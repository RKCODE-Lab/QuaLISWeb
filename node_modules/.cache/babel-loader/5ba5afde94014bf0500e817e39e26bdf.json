{"ast":null,"code":"var _jsxFileName = \"E:\\\\WorkingFolder\\\\React_Postgres\\\\ALPD\\\\branches\\\\SOURCE-513-PROD\\\\SOURCE-513-ALPD-5304\\\\QuaLISWeb\\\\src\\\\pages\\\\configurationmaster\\\\Languages.jsx\";\nimport React from 'react';\nimport { ListWrapper } from '../../components/client-group.styles';\nimport { Row, Col, Button } from 'react-bootstrap';\nimport { toast } from 'react-toastify';\nimport { process } from '@progress/kendo-data-query';\nimport { connect } from 'react-redux';\nimport { injectIntl } from 'react-intl';\nimport { callService, crudMaster, showRegTypeAddScreen, fetchById, comboService, updateStore, validateEsignCredential } from '../../actions';\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\nimport DataGrid from '../../components/data-grid/data-grid.component';\nimport FormSelectSearch from '../../components/form-select-search/form-select-search.component';\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\nimport { showEsign, getControlMap, constructOptionList } from '../../components/CommonScript';\nimport Esign from '../audittrail/Esign';\nimport AddLanguageSynonym from '../../components/AddLanguages'; // import ReactTooltip from 'react-tooltip';\n\nimport { Affix } from 'rsuite';\nimport { faSync, faLanguage, faFilePdf } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nconst mapStateToProps = state => {\n  return {\n    Login: state.Login\n  };\n};\n\nclass Languages extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.dataStateChange = event => {\n      this.setState({\n        dataResult: process(this.state.data.listofItem, event.dataState),\n        dataState: event.dataState\n      });\n    };\n\n    this.reloadData = () => {\n      const inputParam = {\n        inputData: {\n          userinfo: this.props.Login.userInfo\n        },\n        methodUrl: \"Language\",\n        classUrl: this.props.Login.inputParam.classUrl,\n        displayName: this.props.Login.inputParam.displayName ? this.props.Login.inputParam.displayName : '',\n        userInfo: this.props.Login.userInfo\n      };\n      this.props.callService(inputParam);\n    };\n\n    this.validateEsign = () => {\n      const inputParam = {\n        inputData: {\n          \"userinfo\": { ...this.props.Login.userInfo,\n            sreason: this.state.selectedRecord[\"esigncomments\"],\n            nreasoncode: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].value,\n            spredefinedreason: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].label\n          },\n          password: this.state.selectedRecord[\"esignpassword\"]\n        },\n        screenData: this.props.Login.screenData\n      };\n      this.props.validateEsignCredential(inputParam, \"openModal\");\n    };\n\n    this.onInputOnChange = (event, name, item, fieldName) => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (event.target.type === 'checkbox') {\n        selectedRecord[event.target.name] = event.target.checked === true ? 3 : 4;\n      } else {\n        if (name == 'English') {\n          if (this.props.Login.masterData.headername === \"Query Builder Views Columns\") {\n            selectedRecord['sjsondata'][fieldName] = { ...selectedRecord['sjsondata'][fieldName],\n              [event.target.name]: event.target.value\n            };\n            selectedRecord[fieldName] = { ...selectedRecord[fieldName],\n              [event.target.name]: event.target.value\n            };\n            selectedRecord[\"sdefaultname\"] = event.target.value == \"\" ? undefined : event.target.value;\n          } else if (item == 'sactiondisplaystatus') {\n            selectedRecord['sactiondisplaystatus'] = { ...selectedRecord['sactiondisplaystatus'],\n              [event.target.name]: event.target.value\n            };\n          } else if (item === 'stransdisplaystatus') {\n            selectedRecord['stransdisplaystatus'] = { ...selectedRecord['stransdisplaystatus'],\n              [event.target.name]: event.target.value\n            };\n          } else {\n            selectedRecord[fieldName] = { ...selectedRecord[fieldName],\n              [event.target.name]: event.target.value\n            };\n            selectedRecord['sdefaultname'] = event.target.value == \"\" ? undefined : event.target.value;\n          }\n        } else {\n          if (this.props.Login.masterData.headername === \"Query Builder Views Columns\") {\n            selectedRecord['sjsondata'][fieldName] = { ...selectedRecord['sjsondata'][fieldName],\n              [event.target.name]: event.target.value\n            };\n            selectedRecord[fieldName] = { ...selectedRecord[fieldName],\n              [event.target.name]: event.target.value\n            };\n          } else if (item == 'sactiondisplaystatus') {\n            selectedRecord['sactiondisplaystatus'] = { ...selectedRecord['sactiondisplaystatus'],\n              [event.target.name]: event.target.value\n            };\n          } else if (item == 'stransdisplaystatus') {\n            selectedRecord['stransdisplaystatus'] = { ...selectedRecord['stransdisplaystatus'],\n              [event.target.name]: event.target.value\n            };\n          } else {\n            selectedRecord[fieldName] = { ...selectedRecord[fieldName],\n              [event.target.name]: event.target.value\n            };\n            selectedRecord[event.target.name] = event.target.value;\n          }\n        }\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onComboChange = (comboData, fieldName) => {\n      const selectedRecord = this.state.selectedRecord || {};\n      selectedRecord[fieldName] = comboData;\n      this.setState({\n        selectedRecord\n      });\n\n      if (fieldName === \"nquerybuilderviewscode\") {\n        this.props.comboService({\n          inputData: {\n            userinfo: this.props.Login.userInfo,\n            sdisplayname: selectedRecord.nquerybuilderviewscode.item.sviewname,\n            primarykey: selectedRecord.nquerybuilderviewscode.value,\n            item: selectedRecord.nquerybuilderviewscode.item,\n            displayname: this.props.Login.masterData\n          },\n          masterData: this.props.Login.masterData,\n          userinfo: this.props.Login.userInfo,\n          item: selectedRecord.nquerybuilderviewscode.item,\n          sdisplayname: selectedRecord.nquerybuilderviewscode.label,\n          displayname: this.props.Login.masterData\n        });\n      } else if (fieldName === \"nquerybuildertablecode\" || fieldName === \"scolumnname\") {\n        this.props.comboService({\n          inputData: {\n            userinfo: this.props.Login.userInfo,\n            sdisplayname: fieldName === \"nquerybuildertablecode\" ? selectedRecord.nquerybuildertablecode.item.stablename : selectedRecord.scolumnname.item.scolumnname,\n            primarykey: fieldName === \"nquerybuildertablecode\" ? selectedRecord.nquerybuildertablecode.value : selectedRecord.scolumnname.value,\n            item: fieldName === \"nquerybuildertablecode\" ? selectedRecord.nquerybuildertablecode.item : selectedRecord.scolumnname.item,\n            displayname: this.props.Login.masterData,\n            selectedvalues: fieldName === \"nquerybuildertablecode\" ? this.state.SelectedQueryBuilderScolumnList : this.state.SelectedQueryBuilderStableName,\n            fieldName: fieldName\n          },\n          masterData: this.props.Login.masterData,\n          userinfo: this.props.Login.userInfo,\n          item: fieldName === \"nquerybuildertablecode\" ? selectedRecord.nquerybuildertablecode.item : selectedRecord.scolumnname.item,\n          sdisplayname: fieldName === \"nquerybuildertablecode\" ? selectedRecord.nquerybuildertablecode.label : selectedRecord.scolumnname.label,\n          displayname: this.props.Login.masterData\n        });\n      } else if (fieldName === \"dynamicaudittableformcode\" || fieldName === \"ndynamicaudittablecode\") {\n        this.props.comboService({\n          inputData: {\n            userinfo: this.props.Login.userInfo,\n            sdisplayname: fieldName === \"dynamicaudittableformcode\" ? selectedRecord.dynamicaudittableformcode.item.sformname : selectedRecord.ndynamicaudittablecode.item.stablename,\n            primarykey: fieldName === \"ndynamicaudittablecode\" ? selectedRecord.ndynamicaudittablecode.value : null,\n            formPrimayKey: fieldName === \"dynamicaudittableformcode\" ? selectedRecord.dynamicaudittableformcode.value : this.state.selectedLstFormName[0].value,\n            item: fieldName === \"dynamicaudittableformcode\" ? selectedRecord.dynamicaudittableformcode.item : selectedRecord.ndynamicaudittablecode.item,\n            displayname: this.props.Login.masterData,\n            fieldName: fieldName\n          },\n          masterData: this.props.Login.masterData,\n          userinfo: this.props.Login.userInfo,\n          item: fieldName === \"dynamicaudittableformcode\" ? selectedRecord.dynamicaudittableformcode.item : selectedRecord.ndynamicaudittablecode.item,\n          sdisplayname: fieldName === \"dynamicaudittableformcode\" ? selectedRecord.dynamicaudittableformcode.label : selectedRecord.ndynamicaudittablecode.label,\n          displayname: this.props.Login.masterData\n        });\n      } else if (fieldName === \"nmappedtemplatefieldpropcode\" || fieldName === \"indexQualisforms\" || fieldName === \"indexPropertiesKey\" || fieldName === \"indexFieldKey\") {\n        this.props.comboService({\n          inputData: {\n            userinfo: this.props.Login.userInfo,\n            sdisplayname: fieldName === \"nmappedtemplatefieldpropcode\" ? selectedRecord.nmappedtemplatefieldpropcode.item.sregtemplatename : fieldName === \"indexQualisforms\" ? selectedRecord.indexQualisforms.item.sformname : fieldName === \"indexQualisforms\" ? selectedRecord.indexFieldKey.item.indexFieldValue : selectedRecord.indexPropertiesKey.item.indexValue,\n            primarykey: fieldName === \"nmappedtemplatefieldpropcode\" ? selectedRecord.nmappedtemplatefieldpropcode.value : fieldName === \"indexQualisforms\" ? selectedRecord.indexQualisforms.value : fieldName === \"indexFieldKey\" ? selectedRecord.indexFieldKey.value : selectedRecord.indexPropertiesKey.value,\n            item: fieldName === \"nmappedtemplatefieldpropcode\" ? selectedRecord.nmappedtemplatefieldpropcode.item : fieldName === \"indexQualisforms\" ? selectedRecord.indexQualisforms.item : fieldName === \"indexFieldKey\" ? selectedRecord.indexFieldKey.item : selectedRecord.indexPropertiesKey.item,\n            displayname: this.props.Login.masterData,\n            fieldName: fieldName\n          },\n          masterData: this.props.Login.masterData,\n          userinfo: this.props.Login.userInfo,\n          item: fieldName === \"nmappedtemplatefieldpropcode\" ? selectedRecord.nmappedtemplatefieldpropcode.item : fieldName === \"indexQualisforms\" ? selectedRecord.indexQualisforms.item : fieldName === \"indexFieldKey\" ? selectedRecord.indexFieldKey.item : selectedRecord.indexPropertiesKey.item,\n          sdisplayname: fieldName === \"nmappedtemplatefieldpropcode\" ? selectedRecord.nmappedtemplatefieldpropcode.label : fieldName === \"indexQualisforms\" ? selectedRecord.indexQualisforms.label : fieldName === \"indexFieldKey\" ? selectedRecord.indexFieldKey.label : selectedRecord.indexPropertiesKey.label,\n          displayname: this.props.Login.masterData\n        });\n      } else {\n        if (fieldName === \"nmultilingualmasterscode\") {\n          this.props.comboService({\n            inputData: {\n              userinfo: this.props.Login.userInfo,\n              sdisplayname: selectedRecord.nmultilingualmasterscode.label,\n              primarykey: selectedRecord.nmultilingualmasterscode.value,\n              item: selectedRecord.nmultilingualmasterscode.item,\n              displayname: this.props.Login.masterData\n            },\n            masterData: { ...this.props.Login.masterData,\n              headername: {}\n            },\n            userinfo: this.props.Login.userInfo,\n            displayname: this.props.Login.masterData,\n            item: selectedRecord.nmultilingualmasterscode.item,\n            sdisplayname: selectedRecord.nmultilingualmasterscode.label\n          });\n        }\n      }\n    };\n\n    this.onSaveClick = (saveType, formRef) => {\n      let inputData = {};\n      let selectedId = null;\n      let methodUrl = \"\";\n      inputData[\"userinfo\"] = this.props.Login.userInfo;\n      let dataState = undefined;\n\n      if (this.state.showSynonym) {\n        this.setState({\n          showSynonym: false\n        });\n        return null;\n      }\n\n      if (this.props.Login.operation === \"update\") {\n        // edit\n        if (this.props.Login.masterData.headername === \"Menu\") {\n          selectedId = this.props.Login.selectedId;\n          dataState = this.state.dataState;\n          inputData[\"language\"] = {\n            \"nmenucode\": this.state.selectedRecord.nmenucode,\n            \"jsondata\": {\n              \"sdisplayname\": this.state.selectedRecord.sdisplayname\n            }\n          };\n          methodUrl = \"MenuLanguage\";\n        } else if (this.props.Login.masterData.headername === \"Module\") {\n          selectedId = this.props.Login.selectedId;\n          dataState = this.state.dataState;\n          inputData[\"language\"] = {\n            \"nmodulecode\": this.state.selectedRecord.nmodulecode,\n            \"jsondata\": {\n              \"sdisplayname\": this.state.selectedRecord.sdisplayname\n            }\n          };\n          methodUrl = \"ModuleLanguage\";\n        } else if (this.props.Login.masterData.headername === \"Forms\") {\n          dataState = this.state.dataState;\n          selectedId = this.props.Login.selectedId;\n          inputData[\"language\"] = {\n            \"nformcode\": this.state.selectedRecord.nformcode,\n            \"jsondata\": {\n              \"sdisplayname\": this.state.selectedRecord.sdisplayname\n            }\n          };\n          methodUrl = \"FormLanguage\";\n        } else if (this.props.Login.masterData.headername === \"Transaction Status\") {\n          dataState = this.state.dataState;\n          selectedId = this.props.Login.selectedId;\n          inputData[\"language\"] = {\n            \"ntranscode\": this.state.selectedRecord.ntranscode,\n            \"jsondata\": {\n              \"salertdisplaystatus\": this.state.selectedRecord.salertdisplaystatus,\n              \"stransdisplaystatus\": this.state.selectedRecord.stransdisplaystatus,\n              \"sactiondisplaystatus\": this.state.selectedRecord.sactiondisplaystatus\n            }\n          };\n          methodUrl = \"TransactionStatusLanguage\";\n        } else if (this.props.Login.masterData.headername === \"Control Master\") {\n          dataState = this.state.dataState;\n          selectedId = this.props.Login.selectedId;\n          inputData[\"language\"] = {\n            \"ncontrolcode\": this.state.selectedRecord.ncontrolcode,\n            \"nformcode\": this.state.selectedRecord.nformcode,\n            \"jsondata\": {\n              \"scontrolids\": this.state.selectedRecord.scontrolids\n            }\n          };\n          methodUrl = \"ControlMasterLanguage\";\n        } else if (this.props.Login.masterData.headername === \"Approval Sub Type\") {\n          dataState = this.state.dataState;\n          selectedId = this.props.Login.selectedId;\n          inputData[\"language\"] = {\n            \"napprovalsubtypecode\": this.state.selectedRecord.napprovalsubtypecode,\n            \"jsondata\": {\n              \"approvalsubtypename\": this.state.selectedRecord.approvalsubtypename\n            }\n          };\n          methodUrl = \"ApprovalSubTypeLanguage\";\n        } else if (this.props.Login.masterData.headername === \"Sample Type\") {\n          dataState = this.state.dataState;\n          selectedId = this.props.Login.selectedId;\n          inputData[\"language\"] = {\n            \"nsampletypecode\": this.state.selectedRecord.nsampletypecode,\n            \"jsondata\": {\n              \"sampletypename\": this.state.selectedRecord.sampletypename\n            }\n          };\n          methodUrl = \"SampleTypeLanguage\";\n        } // else if (this.props.Login.masterData.headername === \"Template Design\") {\n        //     dataState = this.state.dataState\n        //     selectedId = this.props.Login.selectedId;\n        //     inputData[\"language\"] = {\n        //         \"ntemplatetypecode\": this.state.selectedRecord.ntemplatetypecode,\n        //         \"jsondata\": {\n        //             \"stemplatetypename\": this.state.selectedRecord.stemplatetypename\n        //         }\n        //     }\n        //     methodUrl = \"TemplateTypeLanguage\"\n        // } \n        else if (this.props.Login.masterData.headername === \"Period\") {\n          dataState = this.state.dataState;\n          selectedId = this.props.Login.selectedId;\n          inputData[\"language\"] = {\n            \"nperiodcode\": this.state.selectedRecord.nperiodcode,\n            \"jsondata\": {\n              \"speriodname\": this.state.selectedRecord.speriodname\n            }\n          };\n          methodUrl = \"PeriodLanguage\";\n        } else if (this.props.Login.masterData.headername === \"Gender\") {\n          dataState = this.state.dataState;\n          selectedId = this.props.Login.selectedId;\n          inputData[\"language\"] = {\n            \"ngendercode\": this.state.selectedRecord.ngendercode,\n            \"jsondata\": {\n              \"sgendername\": this.state.selectedRecord.sgendername\n            }\n          };\n          methodUrl = \"GenderLanguage\";\n        } else if (this.props.Login.masterData.headername === \"Grade\") {\n          dataState = this.state.dataState;\n          selectedId = this.props.Login.selectedId;\n          inputData[\"language\"] = {\n            \"ngradecode\": this.state.selectedRecord.ngradecode,\n            \"jsondata\": {\n              \"sdisplayname\": this.state.selectedRecord.sdisplayname\n            }\n          };\n          methodUrl = \"GradeLanguage\";\n        } else if (this.props.Login.masterData.headername === \"Scheduler Type\") {\n          dataState = this.state.dataState;\n          selectedId = this.props.Login.selectedId;\n          inputData[\"language\"] = {\n            \"nschedulertypecode\": this.state.selectedRecord.nschedulertypecode,\n            \"jsondata\": {\n              \"sschedulertypename\": this.state.selectedRecord.sschedulertypename\n            }\n          };\n          methodUrl = \"SchedulerTypeLanguage\";\n        } else if (this.props.Login.masterData.headername === \"Query Builder Tables\") {\n          dataState = this.state.dataState;\n          selectedId = this.props.Login.selectedId;\n          inputData[\"language\"] = {\n            \"nquerybuildertablecode\": this.state.selectedRecord.nquerybuildertablecode,\n            \"jsondata\": {\n              \"tablename\": this.state.selectedRecord.tablename\n            }\n          };\n          methodUrl = \"QueryBuilderTablesLanguage\";\n        } else if (this.props.Login.masterData.headername === \"Query Builder Views\") {\n          dataState = this.state.dataState;\n          selectedId = this.props.Login.selectedId;\n          inputData[\"language\"] = {\n            \"nquerybuilderviewscode\": this.state.selectedRecord.nquerybuilderviewscode,\n            \"jsondata\": {\n              \"displayname\": this.state.selectedRecord.displayname\n            }\n          };\n          methodUrl = \"QueryBuilderViewsLanguage\";\n        } else if (this.props.Login.masterData.headername === \"Multilingual Masters\") {\n          dataState = this.state.dataState;\n          selectedId = this.props.Login.selectedId;\n          inputData[\"language\"] = {\n            \"nmultilingualmasterscode\": this.state.selectedRecord.nmultilingualmasterscode,\n            \"jsondata\": {\n              \"sdisplayname\": this.state.selectedRecord.sdisplayname\n            }\n          };\n          methodUrl = \"MultilingualMastersLanguage\";\n        } else if (this.props.Login.masterData.headername === \"Query Builder Views Columns\") {\n          dataState = this.state.dataState;\n          selectedId = this.props.Login.selectedId;\n          let replaceValue = this.state.selectedRecord.sjsondata.displayname;\n          delete this.state.selectedRecord.sdefaultname;\n          let getIndexValue;\n          inputData[\"findIndex\"] = this.props.Login.selectedRecord.findIndex;\n          inputData[\"keyvalue\"] = this.props.Login.selectedRecord.keys;\n          inputData.keyvalue === \"conditionfields\" ? getIndexValue = inputData.findIndex - this.props.Login.selectedRecord.selectfields.length : getIndexValue = inputData.findIndex;\n          inputData[\"jsondata\"] = {\n            // \"sjsondata\":\n            //     { ...this.state.selectedRecord.sjsondata },\n            // \"sviewname\": this.props.Login.selectedRecord.sviewname\n            \"sjsondata\": { ...this.props.Login.selectedRecord.jsondata,\n              ...(this.props.Login.selectedRecord.jsondata[this.props.Login.selectedRecord.keys][getIndexValue].displayname = replaceValue)\n            },\n            \"sviewname\": this.props.Login.selectedRecord.sviewname\n          };\n          delete inputData[\"jsondata\"].sjsondata[\"en-US\"];\n          delete inputData[\"jsondata\"].sjsondata[\"ru-RU\"];\n          delete inputData[\"jsondata\"].sjsondata[\"tg-TG\"];\n          methodUrl = \"QueryBuilderViewsColumnsLanguage\";\n        } else if (this.props.Login.masterData.headername === \"Material Type\") {\n          dataState = this.state.dataState;\n          selectedId = this.props.Login.selectedId;\n          inputData[\"language\"] = {\n            \"nmaterialtypecode\": this.state.selectedRecord.nmaterialtypecode,\n            \"jsondata\": {\n              \"smaterialtypename\": this.state.selectedRecord.smaterialtypename\n            }\n          };\n          methodUrl = \"MaterialTypeLanguage\";\n        } else if (this.props.Login.masterData.headername === \"Interface Type\") {\n          dataState = this.state.dataState;\n          selectedId = this.props.Login.selectedId;\n          inputData[\"language\"] = {\n            \"ninterfacetypecode\": this.state.selectedRecord.ninterfacetypecode,\n            \"jsondata\": {\n              \"sinterfacetypename\": this.state.selectedRecord.sinterfacetypename\n            }\n          };\n          methodUrl = \"InterfaceTypeLanguage\";\n        } else if (this.props.Login.masterData.headername === \"Audit Action Filter\") {\n          dataState = this.state.dataState;\n          selectedId = this.props.Login.selectedId;\n          inputData[\"language\"] = {\n            \"nauditactionfiltercode\": this.state.selectedRecord.nauditactionfiltercode,\n            \"jsondata\": {\n              \"sdisplayname\": this.state.selectedRecord.sdisplayname\n            }\n          };\n          methodUrl = \"AuditActionFilterLanguage\";\n        } else if (this.props.Login.masterData.headername === \"Attachment Type\") {\n          dataState = this.state.dataState;\n          selectedId = this.props.Login.selectedId;\n          inputData[\"language\"] = {\n            \"nattachmenttypecode\": this.state.selectedRecord.nattachmenttypecode,\n            \"jsondata\": {\n              \"sattachmenttype\": this.state.selectedRecord.sattachmenttype\n            }\n          };\n          methodUrl = \"AttachmentTypeLanguage\";\n        } else if (this.props.Login.masterData.headername === \"FTP Type\") {\n          dataState = this.state.dataState;\n          selectedId = this.props.Login.selectedId;\n          inputData[\"language\"] = {\n            \"nftptypecode\": this.state.selectedRecord.nftptypecode,\n            \"jsondata\": {\n              \"sftptypename\": this.state.selectedRecord.sftptypename\n            }\n          };\n          methodUrl = \"FTPTypeLanguage\";\n        } else if (this.props.Login.masterData.headername === \"Report Type\") {\n          dataState = this.state.dataState;\n          selectedId = this.props.Login.selectedId;\n          inputData[\"language\"] = {\n            \"nreporttypecode\": this.state.selectedRecord.nreporttypecode,\n            \"jsondata\": {\n              \"sdisplayname\": this.state.selectedRecord.sdisplayname\n            }\n          };\n          methodUrl = \"ReportTypeLanguage\";\n        } else if (this.props.Login.masterData.headername === \"COAReport Type\") {\n          dataState = this.state.dataState;\n          selectedId = this.props.Login.selectedId;\n          inputData[\"language\"] = {\n            \"ncoareporttypecode\": this.state.selectedRecord.ncoareporttypecode,\n            \"jsondata\": {\n              \"sdisplayname\": this.state.selectedRecord.sdisplayname\n            }\n          };\n          methodUrl = \"COAReportTypeLanguage\";\n        } else if (this.props.Login.masterData.headername === \"React Components\") {\n          dataState = this.state.dataState;\n          selectedId = this.props.Login.selectedId;\n          inputData[\"language\"] = {\n            \"nreactcomponentcode\": this.state.selectedRecord.nreactcomponentcode,\n            \"jsondata\": {\n              \"componentname\": this.state.selectedRecord.componentname\n            }\n          };\n          methodUrl = \"ReactComponentsLanguage\";\n        } else if (this.props.Login.masterData.headername === \"Functions\") {\n          dataState = this.state.dataState;\n          selectedId = this.props.Login.selectedId;\n          inputData[\"language\"] = {\n            \"nfunctioncode\": this.state.selectedRecord.nfunctioncode,\n            \"jsondata\": {\n              \"sdisplayname\": this.state.selectedRecord.sdisplayname\n            }\n          };\n          methodUrl = \"FunctionsLanguage\";\n        } else if (this.props.Login.masterData.headername === \"Dynamic Formula Fields\") {\n          dataState = this.state.dataState;\n          selectedId = this.props.Login.selectedId;\n          inputData[\"language\"] = {\n            \"ndynamicformulafieldcode\": this.state.selectedRecord.ndynamicformulafieldcode,\n            \"jsondata\": {\n              \"sdisplayname\": this.state.selectedRecord.sdisplayname\n            }\n          };\n          methodUrl = \"DynamicFormulaFieldLanguage\";\n        } else if (this.props.Login.masterData.headername === \"Chart Type\") {\n          dataState = this.state.dataState;\n          selectedId = this.props.Login.selectedId;\n          inputData[\"language\"] = {\n            \"ncharttypecode\": this.state.selectedRecord.ncharttypecode,\n            \"jsondata\": {\n              \"sdisplayname\": this.state.selectedRecord.sdisplayname\n            }\n          };\n          methodUrl = \"ChartTypeLanguage\";\n        } else if (this.props.Login.masterData.headername === \"Design Components\") {\n          dataState = this.state.dataState;\n          selectedId = this.props.Login.selectedId;\n          inputData[\"language\"] = {\n            \"ndesigncomponentcode\": this.state.selectedRecord.ndesigncomponentcode,\n            \"jsondata\": {\n              \"sdisplayname\": this.state.selectedRecord.sdisplayname\n            }\n          };\n          methodUrl = \"DesignComponentLanguage\";\n        } else if (this.props.Login.masterData.headername === \"CheckList Component\") {\n          dataState = this.state.dataState;\n          selectedId = this.props.Login.selectedId;\n          inputData[\"language\"] = {\n            \"nchecklistcomponentcode\": this.state.selectedRecord.nchecklistcomponentcode,\n            \"jsondata\": {\n              \"sdisplayname\": this.state.selectedRecord.sdisplayname\n            }\n          };\n          methodUrl = \"CheckListComponentLanguage\";\n        } else if (this.props.Login.masterData.headername === \"Generic Label\") {\n          dataState = this.state.dataState;\n          selectedId = this.props.Login.selectedId;\n          inputData[\"language\"] = {\n            \"ngenericlabelcode\": this.state.selectedRecord.ngenericlabelcode,\n            \"jsondata\": {\n              \"sdisplayname\": this.state.selectedRecord.sdisplayname\n            }\n          };\n          methodUrl = \"GenericLabelLanguage\";\n        } else if (this.props.Login.masterData.headername === \"Query Builder Table Columns\") {\n          dataState = this.state.dataState;\n          selectedId = this.props.Login.selectedId;\n          let jsondata = JSON.parse(this.state.SelectedQueryBuilderStableName[0].item[this.state.SelectedQueryBuilderScolumnList[0].label].value);\n\n          if (this.state.selectedRecord.columnname === jsondata[this.state.selectedRecord.index].columnname) {\n            jsondata[this.state.selectedRecord.index].displayname = this.state.selectedRecord.displayname;\n          }\n\n          inputData[\"language\"] = {\n            \"nquerybuildertablecode\": this.state.SelectedQueryBuilderStableName[0].value,\n            \"tablecolumnname\": this.state.SelectedQueryBuilderScolumnList[0].label,\n            \"scolumnname\": this.state.selectedRecord.sjsondata.columnname,\n            \"displayname\": this.state.selectedRecord.displayname,\n            \"jsondata\": JSON.stringify(jsondata)\n          };\n          methodUrl = \"QueryBuilderTableColumnsLanguage\";\n        } else if (this.props.Login.masterData.headername === \"Dynamic Audit Table\") {\n          dataState = this.state.dataState;\n          selectedId = this.props.Login.selectedId;\n          let subsampleenabledisable = this.state.selectedRecord.sfieldname;\n          let jsondata = this.state.selectedRecord.jsondata;\n          let index = this.state.selectedRecord.index;\n          jsondata[subsampleenabledisable].multilingualfields[index][this.state.selectedRecord.fieldName] = this.state.selectedRecord[this.state.selectedRecord.fieldName];\n          inputData[\"language\"] = {\n            \"ndynamicaudittablecode\": this.state.selectedLstDynamicAuditTableStableName[0].value,\n            \"subsampleenabledisable\": subsampleenabledisable,\n            \"keyname\": this.state.selectedRecord.fieldName,\n            \"jsondata\": JSON.stringify(jsondata),\n            \"conditioncheck\": JSON.stringify(this.state.selectedRecord.sjsondata),\n            \"nformcode\": this.state.selectedRecord.nformcode\n          };\n          methodUrl = \"DynamicAuditTableLanguage\";\n        } else if (this.props.Login.masterData.headername === \"Mapped Template Field Props\") {\n          dataState = this.state.dataState;\n          selectedId = this.props.Login.selectedId;\n          let fieldName = this.state.selectedRecord.fieldName;\n          let jsondata = this.state.selectedRecord.jsondata && this.state.selectedRecord.jsondata.value && JSON.parse(this.state.selectedRecord.jsondata.value);\n          let index = this.state.selectedRecord.index;\n\n          if (this.props.Login.masterData.selectedLstSampleField === undefined && this.props.Login.masterData.selectedLstQualisforms && this.props.Login.masterData.selectedLstQualisforms[0].nformcode) {\n            jsondata[this.props.Login.masterData.selectedLstQualisforms[0].nformcode][this.props.Login.masterData.selectedLstSampleItems[0].indexPropertiesValue][index][fieldName] = this.state.selectedRecord[fieldName];\n          } else if (this.props.Login.masterData.selectedLstSampleField === undefined && this.props.Login.masterData.selectedLstQualisforms && this.props.Login.masterData.selectedLstQualisforms[0].nformcode === undefined) {\n            jsondata[this.props.Login.masterData.selectedLstQualisforms[0].sformname][index][fieldName] = this.state.selectedRecord[fieldName];\n          } else {\n            jsondata[this.props.Login.masterData.selectedLstQualisforms[0].nformcode][this.props.Login.masterData.selectedLstSampleItems[0].indexPropertiesValue][this.props.Login.masterData.selectedLstSampleField[0].indexFieldValue] !== undefined ? jsondata[this.props.Login.masterData.selectedLstQualisforms[0].nformcode][this.props.Login.masterData.selectedLstSampleItems[0].indexPropertiesValue][this.props.Login.masterData.selectedLstSampleField[0].indexFieldValue][index][fieldName] = this.state.selectedRecord[fieldName] : jsondata[this.props.Login.masterData.selectedLstQualisforms[0].nformcode][this.props.Login.masterData.selectedLstSampleItems[0].indexPropertiesValue][index][fieldName] = this.state.selectedRecord[fieldName];\n          }\n\n          inputData[\"language\"] = {\n            \"nmappedtemplatefieldpropcode\": this.state.selectedRecord.nmappedtemplatefieldpropcode,\n            \"jsondata\": JSON.stringify(jsondata),\n            \"indexQualisforms\": this.props.Login.masterData.selectedLstQualisforms ? this.props.Login.masterData.selectedLstQualisforms[0].indexQualisforms : null,\n            \"indexPropertiesKey\": this.props.Login.masterData.selectedLstSampleItems ? this.props.Login.masterData.selectedLstSampleItems[0].indexPropertiesKey : null,\n            \"indexFieldKey\": this.props.Login.masterData.selectedLstSampleField ? this.props.Login.masterData.selectedLstSampleField[0].indexFieldKey : null,\n            \"index\": index,\n            \"indexPropertiesValue\": this.props.Login.masterData.selectedLstSampleItems ? this.props.Login.masterData.selectedLstSampleItems[0].indexPropertiesValue : null,\n            \"indexFieldValue\": this.props.Login.masterData.selectedLstSampleField ? this.props.Login.masterData.selectedLstSampleField[0].indexFieldValue : null,\n            \"sformname\": this.props.Login.masterData.selectedLstQualisforms && this.props.Login.masterData.selectedLstQualisforms[0].sformname ? this.props.Login.masterData.selectedLstQualisforms[0].sformname : null,\n            \"nformcode\": this.props.Login.masterData.selectedLstQualisforms && this.props.Login.masterData.selectedLstQualisforms[0].nformcode ? this.props.Login.masterData.selectedLstQualisforms[0].nformcode : null\n          };\n          methodUrl = \"MappedTemplateFieldPropsLanguage\";\n        }\n      }\n\n      const inputParam = {\n        methodUrl: methodUrl,\n        classUrl: this.props.Login.inputParam.classUrl,\n        displayName: this.props.Login.inputParam.displayName,\n        inputData: inputData,\n        operation: this.props.Login.operation,\n        saveType,\n        formRef,\n        dataState,\n        selectedId,\n        selectedRecord: { ...this.state.selectedRecord\n        }\n      };\n      const masterData = this.props.Login.masterData;\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolcode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData\n            },\n            saveType,\n            operation: this.props.Login.operation,\n            openModal: true,\n            screenName: this.props.Login.inputParam.displayName\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, masterData, \"openModal\");\n      }\n    };\n\n    this.formRef = React.createRef();\n    this.extractedColumnList = [];\n    this.handleClose = this.handleClose.bind(this);\n    const _dataState = {\n      skip: 0,\n      take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n    };\n    this.state = {\n      data: [],\n      masterStatus: \"\",\n      error: \"\",\n      selectedRecord: {},\n      userRoleControlRights: [],\n      controlMap: new Map(),\n      dataResult: [],\n      dataState: _dataState,\n      mandatoryFields: []\n    };\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    if (props.Login.masterStatus !== state.masterStatus) {\n      toast.warn(props.Login.masterStatus);\n      props.Login.masterStatus = \"\";\n    }\n\n    if (props.Login.error !== state.error) {\n      toast.error(props.Login.error);\n      props.Login.error = \"\";\n    }\n\n    return null;\n  }\n\n  render() {\n    let primaryKeyField = \"\";\n\n    if (this.props.Login.inputParam !== undefined) {\n      this.mandatoryFields = [{\n        \"idsName\": \"IDS_DEFAULTLANGUAGE\",\n        \"dataField\": this.props.Login.languageList[0].value == \"en-US\" ? \"sdefaultname\" : \" \",\n        \"mandatoryLabel\": \"IDS_ENTER\",\n        \"controlType\": \"text\"\n      }];\n\n      if (this.props.Login.masterData.headername == \"Menu\") {\n        this.extractedColumnList = [{\n          \"idsName\": \"IDS_MENUID\",\n          \"dataField\": \"smenuname\",\n          \"width\": \"250px\"\n        }, {\n          \"idsName\": \"IDS_MENUNAME\",\n          \"dataField\": \"sdisplayname\",\n          \"width\": \"250px\"\n        }];\n        primaryKeyField = \"nmenucode\";\n      } else if (this.props.Login.masterData.headername == \"Module\") {\n        this.extractedColumnList = [{\n          \"idsName\": \"IDS_MODULEID\",\n          \"dataField\": \"smodulename\",\n          \"width\": \"250px\"\n        }, {\n          \"idsName\": \"IDS_MODULENAME\",\n          \"dataField\": \"sdisplayname\",\n          \"width\": \"250px\"\n        }];\n        primaryKeyField = \"nmodulecode\";\n      } else if (this.props.Login.masterData.headername == \"Forms\") {\n        this.extractedColumnList = [{\n          \"idsName\": \"IDS_FORMID\",\n          \"dataField\": \"sformname\",\n          \"width\": \"250px\"\n        }, {\n          \"idsName\": \"IDS_FORMNAME\",\n          \"dataField\": \"sdisplayname\",\n          \"width\": \"250px\"\n        }];\n        primaryKeyField = \"nformcode\";\n      } else if (this.props.Login.masterData.headername == \"Transaction Status\") {\n        this.extractedColumnList = [{\n          \"idsName\": \"IDS_TRANSACTIONSTATUSID\",\n          \"dataField\": \"stransstatus\",\n          \"width\": \"250px\"\n        }, {\n          \"idsName\": \"IDS_ACTIONDISPLAYSTATUS\",\n          \"dataField\": \"sactiondisplaystatus\",\n          \"width\": \"250px\"\n        }, {\n          \"idsName\": \"IDS_TRANSDISPLAYSTATUS\",\n          \"dataField\": \"stransdisplaystatus\",\n          \"width\": \"250px\"\n        }];\n        primaryKeyField = \"ntranscode\";\n      } else if (this.props.Login.masterData.headername == \"Control Master\") {\n        this.extractedColumnList = [{\n          \"idsName\": \"IDS_SCREENNAME\",\n          \"dataField\": \"sformname\",\n          \"width\": \"250px\"\n        }, {\n          \"idsName\": \"IDS_CONTROLMASTERID\",\n          \"dataField\": \"scontrolname\",\n          \"width\": \"250px\"\n        }, {\n          \"idsName\": \"IDS_CONTROLMASTER\",\n          \"dataField\": \"sdisplayname\",\n          \"width\": \"250px\"\n        }];\n        primaryKeyField = \"ncontrolcode\";\n      } else if (this.props.Login.masterData.headername == \"Approval Sub Type\") {\n        this.extractedColumnList = [{\n          \"idsName\": \"IDS_APPROVALSUBTYPEID\",\n          \"dataField\": \"sdisplayname\",\n          \"width\": \"250px\"\n        }, {\n          \"idsName\": \"IDS_APPROVALSUBTYPENAME\",\n          \"dataField\": \"sapprovalsubtypename\",\n          \"width\": \"250px\"\n        }];\n        primaryKeyField = \"napprovalsubtypecode\";\n      } else if (this.props.Login.masterData.headername == \"Sample Type\") {\n        this.extractedColumnList = [{\n          \"idsName\": \"IDS_SAMPLETYPEID\",\n          \"dataField\": \"sdisplayname\",\n          \"width\": \"250px\"\n        }, {\n          \"idsName\": \"IDS_SAMPLETYPENAME\",\n          \"dataField\": \"ssampletypename\",\n          \"width\": \"250px\"\n        }];\n        primaryKeyField = \"nsampletypecode\";\n      } // else if (this.props.Login.masterData.headername == \"Template Design\") {\n      //     this.extractedColumnList = [\n      //         { \"idsName\": \"IDS_TEMPLATETYPEID\", \"dataField\": \"sdisplayname\", \"width\": \"250px\" },\n      //         { \"idsName\": \"IDS_TEMPLATETYPENAME\", \"dataField\": \"stemplatetypename\", \"width\": \"250px\" }\n      //     ]\n      //     primaryKeyField = \"ntemplatetypecode\";\n      // }\n      else if (this.props.Login.masterData.headername == \"Period\") {\n        this.extractedColumnList = [{\n          \"idsName\": \"IDS_PERIODID\",\n          \"dataField\": \"sdisplayname\",\n          \"width\": \"250px\"\n        }, {\n          \"idsName\": \"IDS_PERIODNAME\",\n          \"dataField\": \"speriodname\",\n          \"width\": \"250px\"\n        }];\n        primaryKeyField = \"nperiodcode\";\n      } else if (this.props.Login.masterData.headername == \"Gender\") {\n        this.extractedColumnList = [{\n          \"idsName\": \"IDS_GENDERID\",\n          \"dataField\": \"sdisplayname\",\n          \"width\": \"250px\"\n        }, {\n          \"idsName\": \"IDS_GENDERNAME\",\n          \"dataField\": \"sgendername\",\n          \"width\": \"250px\"\n        }];\n        primaryKeyField = \"ngendercode\";\n      } else if (this.props.Login.masterData.headername == \"Grade\") {\n        this.extractedColumnList = [{\n          \"idsName\": \"IDS_GRADEID\",\n          \"dataField\": \"sgradename\",\n          \"width\": \"250px\"\n        }, {\n          \"idsName\": \"IDS_GRADENAME\",\n          \"dataField\": \"sdisplayname\",\n          \"width\": \"250px\"\n        }];\n        primaryKeyField = \"ngradecode\";\n      } else if (this.props.Login.masterData.headername == \"Scheduler Type\") {\n        this.extractedColumnList = [{\n          \"idsName\": \"IDS_SCHEDULERTYPEID\",\n          \"dataField\": \"sdisplayname\",\n          \"width\": \"250px\"\n        }, {\n          \"idsName\": \"IDS_SCHEDULERTYPENAME\",\n          \"dataField\": \"sschedulertypename\",\n          \"width\": \"250px\"\n        }];\n        primaryKeyField = \"nschedulertypecode\";\n      } else if (this.props.Login.masterData.headername == \"Query Builder Tables\") {\n        this.extractedColumnList = [{\n          \"idsName\": \"IDS_FORMS\",\n          \"dataField\": \"sformname\",\n          \"width\": \"250px\"\n        }, {\n          \"idsName\": \"IDS_SQLQUERYBUILDERID\",\n          \"dataField\": \"stablename\",\n          \"width\": \"250px\"\n        }, {\n          \"idsName\": \"IDS_SQLQUERYBUILDERNAME\",\n          \"dataField\": \"sdisplayname\",\n          \"width\": \"250px\"\n        }];\n        primaryKeyField = \"nquerybuildertablecode\";\n      } else if (this.props.Login.masterData.headername == \"Query Builder Views\") {\n        this.extractedColumnList = [{\n          \"idsName\": \"IDS_VIEWSQUERYBUILDERID\",\n          \"dataField\": \"sviewname\",\n          \"width\": \"250px\"\n        }, {\n          \"idsName\": \"IDS_VIEWSQUERYBUILDERNAME\",\n          \"dataField\": \"sdisplayname\",\n          \"width\": \"250px\"\n        }];\n        primaryKeyField = \"nquerybuilderviewscode\";\n      } else if (this.props.Login.masterData.headername == \"Query Builder Views Columns\") {\n        this.extractedColumnList = [// { \"idsName\": \"IDS_QUERYBUILDERVIEWSCOLUMNSNAME\", \"dataField\": \"sviewname\", \"width\": \"250px\" },\n        {\n          \"idsName\": \"IDS_QUERYBUILDERVIEWSCOLUMNSID\",\n          \"dataField\": \"sdisplayname\",\n          \"width\": \"250px\"\n        }];\n        primaryKeyField = 'index';\n      } else if (this.props.Login.masterData.headername == \"Multilingual Masters\") {\n        this.extractedColumnList = [{\n          \"idsName\": \"IDS_MULTILINGUALMASTERSID\",\n          \"dataField\": \"sdisplayname\",\n          \"width\": \"250px\"\n        }, {\n          \"idsName\": \"IDS_MULTILINGUALMASTERSAME\",\n          \"dataField\": \"sdefaultname\",\n          \"width\": \"250px\"\n        }];\n        primaryKeyField = \"nmultilingualmasterscode\";\n      } else if (this.props.Login.masterData.headername == \"Material Type\") {\n        this.extractedColumnList = [{\n          \"idsName\": \"IDS_MATERIALTYPEID\",\n          \"dataField\": \"smaterialtypename\",\n          \"width\": \"250px\"\n        }, {\n          \"idsName\": \"IDS_MATERIALTYPENAME\",\n          \"dataField\": \"sdisplayname\",\n          \"width\": \"250px\"\n        }];\n        primaryKeyField = \"nmaterialtypecode\";\n      } else if (this.props.Login.masterData.headername == \"Interface Type\") {\n        this.extractedColumnList = [{\n          \"idsName\": \"IDS_INTERFACETYPEID\",\n          \"dataField\": \"sinterfacetypename\",\n          \"width\": \"250px\"\n        }, {\n          \"idsName\": \"IDS_INTERFACETYPENAME\",\n          \"dataField\": \"sdisplayname\",\n          \"width\": \"250px\"\n        }];\n        primaryKeyField = \"ninterfacetypecode\";\n      } else if (this.props.Login.masterData.headername == \"Audit Action Filter\") {\n        this.extractedColumnList = [{\n          \"idsName\": \"IDS_AUDITACTIONFILTERID\",\n          \"dataField\": \"sauditactionfiltername\",\n          \"width\": \"250px\"\n        }, {\n          \"idsName\": \"IDS_AUDITACTIONFILTERNAME\",\n          \"dataField\": \"sdisplayname\",\n          \"width\": \"250px\"\n        }];\n        primaryKeyField = \"nauditactionfiltercode\";\n      } else if (this.props.Login.masterData.headername == \"Attachment Type\") {\n        this.extractedColumnList = [{\n          \"idsName\": \"IDS_ATTACHMENTTYPEID\",\n          \"dataField\": \"sdefaultname\",\n          \"width\": \"250px\"\n        }, {\n          \"idsName\": \"IDS_ATTACHMENTTYPENAME\",\n          \"dataField\": \"sdisplayname\",\n          \"width\": \"250px\"\n        }];\n        primaryKeyField = \"nattachmenttypecode\";\n      } else if (this.props.Login.masterData.headername == \"FTP Type\") {\n        this.extractedColumnList = [{\n          \"idsName\": \"IDS_FTPTYPEID\",\n          \"dataField\": \"sdefaultname\",\n          \"width\": \"250px\"\n        }, {\n          \"idsName\": \"IDS_FTPTYPENAME\",\n          \"dataField\": \"sdisplayname\",\n          \"width\": \"250px\"\n        }];\n        primaryKeyField = \"nftptypecode\";\n      } else if (this.props.Login.masterData.headername == \"Report Type\") {\n        this.extractedColumnList = [{\n          \"idsName\": \"IDS_REPORTTYPEID\",\n          \"dataField\": \"sreporttypename\",\n          \"width\": \"250px\"\n        }, {\n          \"idsName\": \"IDS_REPORTTYPENAME\",\n          \"dataField\": \"sdisplayname\",\n          \"width\": \"250px\"\n        }];\n        primaryKeyField = \"nreporttypecode\";\n      } else if (this.props.Login.masterData.headername == \"COAReport Type\") {\n        this.extractedColumnList = [{\n          \"idsName\": \"IDS_COAREPORTTYPEID\",\n          \"dataField\": \"scoareporttypename\",\n          \"width\": \"250px\"\n        }, {\n          \"idsName\": \"IDS_COAREPORTTYPENAME\",\n          \"dataField\": \"sdisplayname\",\n          \"width\": \"250px\"\n        }];\n        primaryKeyField = \"ncoareporttypecode\";\n      } else if (this.props.Login.masterData.headername == \"React Components\") {\n        this.extractedColumnList = [{\n          \"idsName\": \"IDS_REACTCOMPONENTID\",\n          \"dataField\": \"componentname\",\n          \"width\": \"250px\"\n        }, {\n          \"idsName\": \"IDS_REACTCOMPONENTNAME\",\n          \"dataField\": \"sdisplayname\",\n          \"width\": \"250px\"\n        }];\n        primaryKeyField = \"nreactcomponentcode\";\n      } else if (this.props.Login.masterData.headername == \"Functions\") {\n        this.extractedColumnList = [{\n          \"idsName\": \"IDS_FUNCTIONSID\",\n          \"dataField\": \"sfunctionname\",\n          \"width\": \"250px\"\n        }, {\n          \"idsName\": \"IDS_FUNCTIONSNAME\",\n          \"dataField\": \"sdisplayname\",\n          \"width\": \"250px\"\n        }];\n        primaryKeyField = \"nfunctioncode\";\n      } else if (this.props.Login.masterData.headername == \"Dynamic Formula Fields\") {\n        this.extractedColumnList = [{\n          \"idsName\": \"IDS_DYNAMICFORMULAFIELDSID\",\n          \"dataField\": \"sdefaultname\",\n          \"width\": \"250px\"\n        }, {\n          \"idsName\": \"IDS_DYNAMICFORMULAFIELDSNAME\",\n          \"dataField\": \"sdisplayname\",\n          \"width\": \"250px\"\n        }];\n        primaryKeyField = \"ndynamicformulafieldcode\";\n      } else if (this.props.Login.masterData.headername == \"Chart Type\") {\n        this.extractedColumnList = [{\n          \"idsName\": \"IDS_CHARTTYPEID\",\n          \"dataField\": \"sdefaultname\",\n          \"width\": \"250px\"\n        }, {\n          \"idsName\": \"IDS_CHARTTYPENAME\",\n          \"dataField\": \"sdisplayname\",\n          \"width\": \"250px\"\n        }];\n        primaryKeyField = \"ncharttypecode\";\n      } else if (this.props.Login.masterData.headername == \"Design Components\") {\n        this.extractedColumnList = [{\n          \"idsName\": \"IDS_DESIGNCOMPONENTSID\",\n          \"dataField\": \"sdefaultname\",\n          \"width\": \"250px\"\n        }, {\n          \"idsName\": \"IDS_DESIGNCOMPONENTSNAME\",\n          \"dataField\": \"sdisplayname\",\n          \"width\": \"250px\"\n        }];\n        primaryKeyField = \"ndesigncomponentcode\";\n      } else if (this.props.Login.masterData.headername == \"CheckList Component\") {\n        this.extractedColumnList = [{\n          \"idsName\": \"IDS_CHECKLISTCOMPONENTID\",\n          \"dataField\": \"scomponentname\",\n          \"width\": \"250px\"\n        }, {\n          \"idsName\": \"IDS_CHECKLISTCOMPONENTNAME\",\n          \"dataField\": \"sdisplayname\",\n          \"width\": \"250px\"\n        }];\n        primaryKeyField = \"nchecklistcomponentcode\";\n      } else if (this.props.Login.masterData.headername == \"Generic Label\") {\n        this.extractedColumnList = [{\n          \"idsName\": \"IDS_GENERICLABELID\",\n          \"dataField\": \"sgenericlabel\",\n          \"width\": \"250px\"\n        }, {\n          \"idsName\": \"IDS_GENERICLABELNAME\",\n          \"dataField\": \"sdisplayname\",\n          \"width\": \"250px\"\n        }];\n        primaryKeyField = \"ngenericlabelcode\";\n      } else if (this.props.Login.masterData.headername == \"Query Builder Table Columns\") {\n        this.extractedColumnList = [// { \"idsName\": \"IDS_QUERYBUILDERTABLECOLUMNSID\", \"dataField\": \"stablename\", \"width\": \"250px\" },\n        {\n          \"idsName\": \"IDS_QUERYBUILDERTABLECOLUMNSNAME\",\n          \"dataField\": \"sdisplayname\",\n          \"width\": \"250px\"\n        }];\n        primaryKeyField = \"index\";\n      } else if (this.props.Login.masterData.headername == \"Dynamic Audit Table\") {\n        this.extractedColumnList = [// { \"idsName\": \"IDS_TABLE_NAME\", \"dataField\": \"stablename\", \"width\": \"250px\" },\n        {\n          \"idsName\": \"IDS_FIELDNAME\",\n          \"dataField\": \"sfieldname\",\n          \"width\": \"250px\"\n        }, {\n          \"idsName\": \"IDS_MULTILINGUALFIELDS\",\n          \"dataField\": \"sdisplayname\",\n          \"width\": \"250px\"\n        }];\n        primaryKeyField = \"index\";\n      } else if (this.props.Login.masterData.headername == \"Mapped Template Field Props\") {\n        this.extractedColumnList = [// { \"idsName\": \"samplegriditems\", \"dataField\": \"sfieldname\", \"width\": \"250px\" },\n        {\n          \"idsName\": \"IDS_MAPPEDTEMPLATEFIELDPROPSNAME\",\n          \"dataField\": \"sdisplayname\",\n          \"width\": \"250px\"\n        }];\n        primaryKeyField = \"index\";\n      }\n    }\n\n    const languagesId = this.props.Login.inputParam && this.state.controlMap.has(\"UpdateLanguage\") && this.state.controlMap.get('UpdateLanguage').ncontrolcode;\n    const languagesParam = {\n      screenName: \"Language\",\n      operation: \"update\",\n      primaryKeyField: primaryKeyField,\n      masterData: this.props.Login.masterData,\n      userInfo: this.props.Login.userInfo,\n      ncontrolCode: languagesId,\n      selectedRecord: this.state.selectedRecord\n    };\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 322,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 323,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(ListWrapper, {\n      className: \"client-list-content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 324,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      noGutters: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 325,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 8,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 326,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(Affix, {\n      top: 85,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 327,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 328,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 329,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 330,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 4,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 331,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(FormSelectSearch, {\n      name: \"nmultilingualmasterscode\",\n      formLabel: this.props.intl.formatMessage({\n        id: \"IDS_MULTILINGUALMASTERS\"\n      }),\n      placeholder: this.props.intl.formatMessage({\n        id: \"IDS_SELECTRECORD\"\n      }),\n      options: this.state.multilingualmasters || [],\n      value: this.props.Login.masterData && this.props.Login.masterData.selectedmultilingualmasters && {\n        value: this.props.Login.masterData.selectedmultilingualmasters.nmultilingualmasterscode ? this.props.Login.masterData.selectedmultilingualmasters.nmultilingualmasterscode : this.state.selectedRecord.nmultilingualmasterscode.value,\n        label: this.props.Login.masterData.selectedmultilingualmasters.sdisplayname ? this.props.Login.masterData.selectedmultilingualmasters.sdisplayname : this.state.selectedRecord.nmultilingualmasterscode.label\n      },\n      isMandatory: false,\n      isMulti: false,\n      isClearable: false,\n      isSearchable: true,\n      isDisabled: false,\n      closeMenuOnSelect: true,\n      className: \"mb-2\",\n      onChange: event => this.onComboChange(event, 'nmultilingualmasterscode'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 332,\n        columnNumber: 57\n      }\n    })), this.props.Login.masterData.headername == \"Query Builder Views Columns\" ? /*#__PURE__*/React.createElement(Col, {\n      md: 4,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 356,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(FormSelectSearch, {\n      name: \"nquerybuilderviewscode\",\n      formLabel: this.props.intl.formatMessage({\n        id: \"IDS_VIEWNAME\"\n      }),\n      placeholder: this.props.intl.formatMessage({\n        id: \"IDS_SELECTRECORD\"\n      }),\n      options: this.state.QueryBuilderViewsName || [],\n      value: this.props.Login.masterData && this.props.Login.masterData.selectedQueryBuilderViewsName && {\n        value: this.state.selectedRecord.nquerybuilderviewscode !== undefined ? this.state.selectedRecord.nquerybuilderviewscode.value : this.props.Login.masterData.selectedQueryBuilderViewsName.nquerybuilderviewscode,\n        label: this.state.selectedRecord.nquerybuilderviewscode !== undefined ? this.state.selectedRecord.nquerybuilderviewscode.label : this.props.Login.masterData.selectedQueryBuilderViewsName.sdisplayname\n      },\n      isMandatory: false,\n      isMulti: false,\n      isClearable: false,\n      isSearchable: true,\n      isDisabled: false,\n      closeMenuOnSelect: true,\n      className: \"mb-2\",\n      onChange: event => this.onComboChange(event, 'nquerybuilderviewscode'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 357,\n        columnNumber: 61\n      }\n    })) : this.props.Login.masterData.headername == \"Query Builder Table Columns\" ? /*#__PURE__*/React.createElement(Col, {\n      md: 4,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 379,\n        columnNumber: 61\n      }\n    }, /*#__PURE__*/React.createElement(FormSelectSearch, {\n      name: \"nquerybuilderviewscode\",\n      formLabel: this.props.intl.formatMessage({\n        id: \"IDS_TABLE_NAME\"\n      }),\n      placeholder: this.props.intl.formatMessage({\n        id: \"IDS_SELECTRECORD\"\n      }),\n      options: this.state.QueryBuilderStableName || [] // value={this.props.Login.masterData && this.props.Login.masterData.SelectedQueryBuilderStableName\n      //     && {\n      //     value: this.state.selectedRecord.nquerybuildertablecode !== undefined\n      //         ? this.state.selectedRecord.nquerybuildertablecode.value : this.props.Login.masterData.SelectedQueryBuilderStableName[0].nquerybuildertablecode,\n      //     label: this.state.selectedRecord.nquerybuildertablecode !== undefined ?\n      //         this.state.selectedRecord.nquerybuildertablecode.label : this.props.Login.masterData.SelectedQueryBuilderStableName[0].stablename\n      // }}\n      ,\n      value: this.state && this.state.SelectedQueryBuilderStableName && this.state.SelectedQueryBuilderStableName,\n      isMandatory: false,\n      isMulti: false,\n      isClearable: false,\n      isSearchable: true,\n      isDisabled: false,\n      closeMenuOnSelect: true,\n      className: \"mb-2\",\n      onChange: event => this.onComboChange(event, 'nquerybuildertablecode'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 380,\n        columnNumber: 65\n      }\n    })) : this.props.Login.masterData.headername == \"Dynamic Audit Table\" ? /*#__PURE__*/React.createElement(Col, {\n      md: 4,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 403,\n        columnNumber: 65\n      }\n    }, /*#__PURE__*/React.createElement(FormSelectSearch, {\n      name: \"nformcode\",\n      formLabel: this.props.intl.formatMessage({\n        id: \"IDS_SCREENNAME\"\n      }),\n      placeholder: this.props.intl.formatMessage({\n        id: \"IDS_SELECTRECORD\"\n      }),\n      options: this.state.lstFormName || [] // value={this.props.Login.masterData && this.props.Login.masterData.SelectedQueryBuilderStableName\n      //     && {\n      //     value: this.state.selectedRecord.nquerybuildertablecode !== undefined\n      //         ? this.state.selectedRecord.nquerybuildertablecode.value : this.props.Login.masterData.SelectedQueryBuilderStableName[0].nquerybuildertablecode,\n      //     label: this.state.selectedRecord.nquerybuildertablecode !== undefined ?\n      //         this.state.selectedRecord.nquerybuildertablecode.label : this.props.Login.masterData.SelectedQueryBuilderStableName[0].stablename\n      // }}\n      ,\n      value: this.state && this.state.selectedLstFormName && this.state.selectedLstFormName,\n      isMandatory: false,\n      isMulti: false,\n      isClearable: false,\n      isSearchable: true,\n      isDisabled: false,\n      closeMenuOnSelect: true,\n      className: \"mb-2\",\n      onChange: event => this.onComboChange(event, 'dynamicaudittableformcode'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 404,\n        columnNumber: 69\n      }\n    })) : this.props.Login.masterData.headername == \"Mapped Template Field Props\" ? /*#__PURE__*/React.createElement(Col, {\n      md: 4,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 427,\n        columnNumber: 69\n      }\n    }, /*#__PURE__*/React.createElement(FormSelectSearch, {\n      name: \"nquerybuilderviewscode\",\n      formLabel: this.props.intl.formatMessage({\n        id: \"IDS_REACTREGISTRATIONTEMPLATENAME\"\n      }),\n      placeholder: this.props.intl.formatMessage({\n        id: \"IDS_SELECTRECORD\"\n      }),\n      options: this.state.lstMappedTemplateFieldProps || [] // value={this.props.Login.masterData && this.props.Login.masterData.selectedQueryBuilderScolumnList\n      //     && {\n      //     value: this.state.selectedRecord.nquerybuilderviewscode !== undefined\n      //         ? this.state.selectedRecord.nquerybuilderviewscode.value : this.props.Login.masterData.selectedQueryBuilderScolumnList.scolumnname,\n      //     label: this.state.selectedRecord.nquerybuilderviewscode !== undefined ?\n      //         this.state.selectedRecord.nquerybuilderviewscode.label : this.props.Login.masterData.selectedQueryBuilderScolumnList.scolumnname\n      // }}\n      ,\n      value: this.state && this.state.selectedLstMappedTemplateFieldProps && this.state.selectedLstMappedTemplateFieldProps,\n      isMandatory: false,\n      isMulti: false,\n      isClearable: false,\n      isSearchable: true,\n      isDisabled: false,\n      closeMenuOnSelect: true,\n      className: \"mb-2\",\n      onChange: event => this.onComboChange(event, 'nmappedtemplatefieldpropcode'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 428,\n        columnNumber: 73\n      }\n    })) : \"\", this.props.Login.masterData.headername == \"Query Builder Table Columns\" ? /*#__PURE__*/React.createElement(Col, {\n      md: 4,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 453,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(FormSelectSearch, {\n      name: \"nquerybuilderviewscode\",\n      formLabel: this.props.intl.formatMessage({\n        id: \"IDS_COLUMNNAME\"\n      }),\n      placeholder: this.props.intl.formatMessage({\n        id: \"IDS_SELECTRECORD\"\n      }),\n      options: this.state.QueryBuilderScolumnList || [] // value={this.props.Login.masterData && this.props.Login.masterData.selectedQueryBuilderScolumnList\n      //     && {\n      //     value: this.state.selectedRecord.nquerybuilderviewscode !== undefined\n      //         ? this.state.selectedRecord.nquerybuilderviewscode.value : this.props.Login.masterData.selectedQueryBuilderScolumnList.scolumnname,\n      //     label: this.state.selectedRecord.nquerybuilderviewscode !== undefined ?\n      //         this.state.selectedRecord.nquerybuilderviewscode.label : this.props.Login.masterData.selectedQueryBuilderScolumnList.scolumnname\n      // }}\n      ,\n      value: this.state && this.state.SelectedQueryBuilderScolumnList && this.state.SelectedQueryBuilderScolumnList,\n      isMandatory: false,\n      isMulti: false,\n      isClearable: false,\n      isSearchable: true,\n      isDisabled: false,\n      closeMenuOnSelect: true,\n      className: \"mb-2\",\n      onChange: event => this.onComboChange(event, 'scolumnname'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 454,\n        columnNumber: 61\n      }\n    })) : this.props.Login.masterData.headername == \"Dynamic Audit Table\" ? /*#__PURE__*/React.createElement(Col, {\n      md: 4,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 477,\n        columnNumber: 61\n      }\n    }, /*#__PURE__*/React.createElement(FormSelectSearch, {\n      name: \"ndynamicaudittablecode\",\n      formLabel: this.props.intl.formatMessage({\n        id: \"IDS_TABLE_NAME\"\n      }),\n      placeholder: this.props.intl.formatMessage({\n        id: \"IDS_SELECTRECORD\"\n      }),\n      options: this.state.lstDynamicAuditTableStableName || [] // value={this.props.Login.masterData && this.props.Login.masterData.selectedQueryBuilderScolumnList\n      //     && {\n      //     value: this.state.selectedRecord.nquerybuilderviewscode !== undefined\n      //         ? this.state.selectedRecord.nquerybuilderviewscode.value : this.props.Login.masterData.selectedQueryBuilderScolumnList.scolumnname,\n      //     label: this.state.selectedRecord.nquerybuilderviewscode !== undefined ?\n      //         this.state.selectedRecord.nquerybuilderviewscode.label : this.props.Login.masterData.selectedQueryBuilderScolumnList.scolumnname\n      // }}\n      ,\n      value: this.state && this.state.selectedLstDynamicAuditTableStableName && this.state.selectedLstDynamicAuditTableStableName,\n      isMandatory: false,\n      isMulti: false,\n      isClearable: false,\n      isSearchable: true,\n      isDisabled: false,\n      closeMenuOnSelect: true,\n      className: \"mb-2\",\n      onChange: event => this.onComboChange(event, 'ndynamicaudittablecode'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 478,\n        columnNumber: 65\n      }\n    })) : this.props.Login.masterData.headername == \"Mapped Template Field Props\" ? /*#__PURE__*/React.createElement(Col, {\n      md: 4,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 501,\n        columnNumber: 65\n      }\n    }, /*#__PURE__*/React.createElement(FormSelectSearch, {\n      name: \"nformcode\",\n      formLabel: this.props.intl.formatMessage({\n        id: \"IDS_FORMNAME\"\n      }),\n      placeholder: this.props.intl.formatMessage({\n        id: \"IDS_SELECTRECORD\"\n      }),\n      options: this.state.lstQualisForms || [],\n      lstQualisForms: true // value={this.props.Login.masterData && this.props.Login.masterData.SelectedQueryBuilderStableName\n      //     && {\n      //     value: this.state.selectedRecord.nquerybuildertablecode !== undefined\n      //         ? this.state.selectedRecord.nquerybuildertablecode.value : this.props.Login.masterData.SelectedQueryBuilderStableName[0].nquerybuildertablecode,\n      //     label: this.state.selectedRecord.nquerybuildertablecode !== undefined ?\n      //         this.state.selectedRecord.nquerybuildertablecode.label : this.props.Login.masterData.SelectedQueryBuilderStableName[0].stablename\n      // }}\n      ,\n      value: this.state && this.state.selectedLstQualisForms && this.state.selectedLstQualisForms,\n      isMandatory: false,\n      isMulti: false,\n      isClearable: false,\n      isSearchable: true,\n      isDisabled: false,\n      closeMenuOnSelect: true,\n      className: \"mb-2\",\n      onChange: event => this.onComboChange(event, 'indexQualisforms'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 502,\n        columnNumber: 69\n      }\n    })) : \"\", this.props.Login.masterData.headername == \"Mapped Template Field Props\" && this.props.Login.masterData.selectedLstQualisforms && this.props.Login.masterData.selectedLstQualisforms[0].nformcode ? /*#__PURE__*/React.createElement(Col, {\n      md: 4,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 527,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(FormSelectSearch, {\n      name: \"ndynamicaudittablecode\",\n      formLabel: this.props.intl.formatMessage({\n        id: \"IDS_PROPERTIES\"\n      }),\n      placeholder: this.props.intl.formatMessage({\n        id: \"IDS_SELECTRECORD\"\n      }),\n      options: this.state.lstSampleItems || [] // value={this.props.Login.masterData && this.props.Login.masterData.selectedQueryBuilderScolumnList\n      //     && {\n      //     value: this.state.selectedRecord.nquerybuilderviewscode !== undefined\n      //         ? this.state.selectedRecord.nquerybuilderviewscode.value : this.props.Login.masterData.selectedQueryBuilderScolumnList.scolumnname,\n      //     label: this.state.selectedRecord.nquerybuilderviewscode !== undefined ?\n      //         this.state.selectedRecord.nquerybuilderviewscode.label : this.props.Login.masterData.selectedQueryBuilderScolumnList.scolumnname\n      // }}\n      ,\n      value: this.state && this.state.selectedLstSampleItems && this.state.selectedLstSampleItems,\n      isMandatory: false,\n      isMulti: false,\n      isClearable: false,\n      isSearchable: true,\n      isDisabled: false,\n      closeMenuOnSelect: true,\n      className: \"mb-2\",\n      onChange: event => this.onComboChange(event, 'indexPropertiesKey'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 528,\n        columnNumber: 61\n      }\n    })) : \"\", this.props.Login.masterData.headername == \"Mapped Template Field Props\" && this.props.Login.masterData.selectedLstSampleItems && this.props.Login.masterData.selectedLstSampleItems[0].indexPropertiesValue === \"testListFields\" ? /*#__PURE__*/React.createElement(Col, {\n      md: 4,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 552,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(FormSelectSearch, {\n      name: \"ndynamicaudittablecode\",\n      formLabel: this.props.intl.formatMessage({\n        id: \"IDS_FIELDNAME\"\n      }),\n      placeholder: this.props.intl.formatMessage({\n        id: \"IDS_SELECTRECORD\"\n      }),\n      options: this.state.lstSampleField || [] // value={this.props.Login.masterData && this.props.Login.masterData.selectedQueryBuilderScolumnList\n      //     && {\n      //     value: this.state.selectedRecord.nquerybuilderviewscode !== undefined\n      //         ? this.state.selectedRecord.nquerybuilderviewscode.value : this.props.Login.masterData.selectedQueryBuilderScolumnList.scolumnname,\n      //     label: this.state.selectedRecord.nquerybuilderviewscode !== undefined ?\n      //         this.state.selectedRecord.nquerybuilderviewscode.label : this.props.Login.masterData.selectedQueryBuilderScolumnList.scolumnname\n      // }}\n      ,\n      value: this.state && this.state.selectedLstSampleField && this.state.selectedLstSampleField,\n      isMandatory: false,\n      isMulti: false,\n      isClearable: false,\n      isSearchable: true,\n      isDisabled: false,\n      closeMenuOnSelect: true,\n      className: \"mb-2\",\n      onChange: event => this.onComboChange(event, 'indexFieldKey'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 553,\n        columnNumber: 61\n      }\n    })) : \"\")))))), this.state.data ? /*#__PURE__*/React.createElement(DataGrid, {\n      primaryKeyField: primaryKeyField,\n      data: this.state.data.listofItem,\n      dataResult: this.state.dataResult,\n      dataState: this.state.dataState,\n      dataStateChange: this.dataStateChange,\n      extractedColumnList: this.extractedColumnList,\n      languagesRecord: this.props.fetchById,\n      reloadData: this.reloadData,\n      controlMap: this.state.controlMap,\n      userRoleControlRights: this.state.userRoleControlRights,\n      inputParam: this.props.Login.inputParam,\n      userInfo: this.props.Login.userInfo,\n      languagesParam: languagesParam,\n      methodUrl: \"Language\",\n      pageable: true,\n      isActionRequired: true,\n      isToolBarRequired: true,\n      isDownloadPDFRequired: true,\n      isDownloadExcelRequired: true,\n      gridHeight: '465px',\n      scrollable: \"scrollable\",\n      selectedId: this.props.Login.selectedId,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 583,\n        columnNumber: 33\n      }\n    }) : \"\"))), this.props.Login.openModal ? /*#__PURE__*/React.createElement(SlideOutModal, {\n      onSaveClick: this.onSaveClick,\n      operation: this.props.Login.operation,\n      screenName: this.props.Login.inputParam.displayName,\n      closeModal: this.handleClose,\n      show: this.props.Login.openModal,\n      showSaveContinue: false,\n      hideSave: this.state.showSynonym,\n      inputParam: this.props.Login.inputParam,\n      esign: this.props.Login.loadEsign,\n      validateEsign: this.validateEsign,\n      selectedRecord: this.state.selectedRecord,\n      mandatoryFields: this.mandatoryFields,\n      addComponent: this.props.Login.loadEsign ? /*#__PURE__*/React.createElement(Esign, {\n        operation: this.props.Login.operation ? this.props.Login.operation : '',\n        onInputOnChange: this.onInputOnChange,\n        inputParam: this.props.Login.inputParam,\n        selectedRecord: this.state.selectedRecord || {},\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 626,\n          columnNumber: 29\n        }\n      }) : /*#__PURE__*/React.createElement(AddLanguageSynonym, {\n        selectedFieldRecord: this.state.selectedRecord,\n        needheader: this.props.Login.masterData.selectedmultilingualmasters || this.props.Login.masterData.sneedheader,\n        onInputOnChange: this.onInputOnChange,\n        selectedJsondata: this.props.Login.masterData.headername === \"Query Builder Views Columns\" || this.props.Login.masterData.headername === \"Query Builder Table Columns\" || this.props.Login.masterData.headername === \"Dynamic Audit Table\" || this.props.Login.masterData.headername === \"Mapped Template Field Props\" ? this.props.Login.selectedRecord.sjsondata : this.props.Login.selectedRecord && this.props.Login.selectedRecord.jsondata // selectedJsondata={this.props.Login.selectedRecord && this.props.Login.selectedRecord.jsondata}\n        ,\n        languages: this.props.Login.languageList || [],\n        fieldName: this.props.Login.selectedRecord.fieldName,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 632,\n          columnNumber: 29\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 612,\n        columnNumber: 21\n      }\n    }) : \"\");\n  }\n\n  componentDidUpdate(previousProps) {\n    if (this.props.Login.masterData !== previousProps.Login.masterData) {\n      if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\n        const userRoleControlRights = [];\n\n        if (this.props.Login.userRoleControlRights) {\n          this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item => userRoleControlRights.push(item.ncontrolcode));\n        }\n\n        const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode);\n        const multilingualmastersMap = constructOptionList(this.props.Login.masterData.multilingualmasters || [], \"nmultilingualmasterscode\", \"sdisplayname\", \"nsorter\", 'ascending', undefined, true);\n        const multilingualmasters = multilingualmastersMap.get(\"OptionList\");\n        this.setState({\n          userRoleControlRights,\n          controlMap,\n          multilingualmasters: multilingualmasters,\n          data: this.props.Login.masterData,\n          dataResult: process(this.props.Login.masterData.listofItem ? this.props.Login.masterData.listofItem : [], this.state.dataState)\n        });\n      } else {\n        let {\n          dataState\n        } = this.state;\n\n        if (this.props.Login.dataState === undefined) {\n          dataState = {\n            skip: 0,\n            take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n          };\n        }\n\n        const FilterQueryMap = constructOptionList(this.props.Login.masterData.QueryBuilderViewsName || [], \"nquerybuilderviewscode\", \"sdisplayname\", 'nquerybuilderviewscode', 'descending', true);\n        const QueryBuilderViewsName = FilterQueryMap.get(\"OptionList\");\n        const formNameQueryMap = constructOptionList(this.props.Login.filterValue || [], \"nformcode\", \"sformname\", undefined, undefined, true);\n        const MaterialConfig = formNameQueryMap.get(\"OptionList\");\n        let FilterQueryColumnMap, QueryBuilderStableName, FilterColumnNameMap, QueryBuilderScolumnList, SelectedQueryBuilderStableName, SelectedQueryBuilderScolumnList;\n\n        if (this.props.Login.masterData.headername === \"Query Builder Table Columns\") {\n          if (this.props.Login.masterData && this.props.Login.masterData.QueryBuilderStableName) {\n            FilterQueryColumnMap = constructOptionList(this.props.Login.masterData.QueryBuilderStableName || [], \"nquerybuildertablecode\", \"stablename\", 'nquerybuildertablecode', 'ascending', true);\n            QueryBuilderStableName = FilterQueryColumnMap.get(\"OptionList\");\n          }\n\n          if (this.props.Login.masterData && this.props.Login.masterData.SelectedQueryBuilderStableName) {\n            const FilterSelectedQueryColumnMap = constructOptionList(this.props.Login.masterData.SelectedQueryBuilderStableName || [], \"nquerybuildertablecode\", \"stablename\", undefined, undefined, true);\n            SelectedQueryBuilderStableName = FilterSelectedQueryColumnMap.get(\"OptionList\");\n          }\n\n          if (this.props.Login.masterData && this.props.Login.masterData.QueryBuilderScolumnList) {\n            FilterColumnNameMap = constructOptionList(this.props.Login.masterData.QueryBuilderScolumnList || [], \"scolumnname\", \"scolumnname\", 'ordinal_position', 'descending', true);\n            QueryBuilderScolumnList = FilterColumnNameMap.get(\"OptionList\");\n          }\n\n          if (this.props.Login.masterData && this.props.Login.masterData.selectedQueryBuilderScolumnList) {\n            const FilterSelectedColumnNameMap = constructOptionList(this.props.Login.masterData.selectedQueryBuilderScolumnList || [], \"scolumnname\", \"scolumnname\", undefined, undefined, true);\n            SelectedQueryBuilderScolumnList = FilterSelectedColumnNameMap.get(\"OptionList\");\n          }\n        }\n\n        let formName, lstFormName, DynamicAuditTableStableName, lstDynamicAuditTableStableName, selectedFormName, selectedLstFormName, selectedDynamicAuditTableStableName, selectedLstDynamicAuditTableStableName;\n\n        if (this.props.Login.masterData.headername === \"Dynamic Audit Table\") {\n          if (this.props.Login.masterData && this.props.Login.masterData.lstFormName) {\n            formName = constructOptionList(this.props.Login.masterData.lstFormName || [], \"nformcode\", \"sformname\", 'nformcode', 'ascending', true);\n            lstFormName = formName.get(\"OptionList\");\n          }\n\n          if (this.props.Login.masterData && this.props.Login.masterData.lstDynamicAuditTable) {\n            DynamicAuditTableStableName = constructOptionList(this.props.Login.masterData.lstDynamicAuditTable || [], \"ndynamicaudittablecode\", \"stablename\", 'ndynamicaudittablecode', 'descending', true);\n            lstDynamicAuditTableStableName = DynamicAuditTableStableName.get(\"OptionList\");\n          }\n\n          if (this.props.Login.masterData && this.props.Login.masterData.SelectedFormName) {\n            selectedFormName = constructOptionList(this.props.Login.masterData.SelectedFormName || [], \"nformcode\", \"sformname\", undefined, undefined, true);\n            selectedLstFormName = selectedFormName.get(\"OptionList\");\n          }\n\n          if (this.props.Login.masterData && this.props.Login.masterData.selectedDynamicAuditTable) {\n            selectedDynamicAuditTableStableName = constructOptionList(this.props.Login.masterData.selectedDynamicAuditTable || [], \"ndynamicaudittablecode\", \"stablename\", undefined, undefined, true);\n            selectedLstDynamicAuditTableStableName = selectedDynamicAuditTableStableName.get(\"OptionList\");\n          }\n        }\n\n        let lstQualisForms, selectedLstQualisForms, qualisForms, selectedQualisForms, lstSampleItems, selectedLstSampleItems, sampleItems, selectedSampleItems, mappedTemplateFieldProps, selectedMappedTemplateFieldProps, lstMappedTemplateFieldProps, selectedLstMappedTemplateFieldProps, lstSampleField, selectedLstSampleField, sampleField, selectedSampleField;\n\n        if (this.props.Login.masterData.headername === \"Mapped Template Field Props\") {\n          if (this.props.Login.masterData && this.props.Login.masterData.lstMappedTemplateFieldProps) {\n            mappedTemplateFieldProps = constructOptionList(this.props.Login.masterData.lstMappedTemplateFieldProps || [], \"nmappedtemplatefieldpropcode\", \"sregtemplatename\", undefined, undefined, true);\n            lstMappedTemplateFieldProps = mappedTemplateFieldProps.get(\"OptionList\");\n          }\n\n          if (this.props.Login.masterData && this.props.Login.masterData.selectedLstMappedTemplateFieldProps) {\n            selectedMappedTemplateFieldProps = constructOptionList(this.props.Login.masterData.selectedLstMappedTemplateFieldProps || [], \"nmappedtemplatefieldpropcode\", \"sregtemplatename\", undefined, undefined, true);\n            selectedLstMappedTemplateFieldProps = selectedMappedTemplateFieldProps.get(\"OptionList\");\n          }\n\n          if (this.props.Login.masterData && this.props.Login.masterData.lstQualisforms) {\n            qualisForms = constructOptionList(this.props.Login.masterData.lstQualisforms || [], \"indexQualisforms\", \"sformname\", undefined, undefined, true);\n            lstQualisForms = qualisForms.get(\"OptionList\");\n          }\n\n          if (this.props.Login.masterData && this.props.Login.masterData.selectedLstQualisforms) {\n            selectedQualisForms = constructOptionList(this.props.Login.masterData.selectedLstQualisforms || [], \"indexQualisforms\", \"sformname\", undefined, undefined, true);\n            selectedLstQualisForms = selectedQualisForms.get(\"OptionList\");\n          }\n\n          if (this.props.Login.masterData && this.props.Login.masterData.lstSampleItems) {\n            sampleItems = constructOptionList(this.props.Login.masterData.lstSampleItems || [], \"indexPropertiesKey\", \"indexPropertiesValue\", undefined, undefined, true);\n            lstSampleItems = sampleItems.get(\"OptionList\");\n          }\n\n          if (this.props.Login.masterData && this.props.Login.masterData.selectedLstSampleItems) {\n            selectedSampleItems = constructOptionList(this.props.Login.masterData.selectedLstSampleItems || [], \"indexPropertiesKey\", \"indexPropertiesValue\", undefined, undefined, true);\n            selectedLstSampleItems = selectedSampleItems.get(\"OptionList\");\n          }\n\n          if (this.props.Login.masterData && this.props.Login.masterData.lstSampleField) {\n            sampleField = constructOptionList(this.props.Login.masterData.lstSampleField || [], \"indexFieldKey\", \"indexFieldValue\", undefined, undefined, true);\n            lstSampleField = sampleField.get(\"OptionList\");\n          }\n\n          if (this.props.Login.masterData && this.props.Login.masterData.selectedLstSampleField) {\n            selectedSampleField = constructOptionList(this.props.Login.masterData.selectedLstSampleField || [], \"indexFieldKey\", \"indexFieldValue\", undefined, undefined, true);\n            selectedLstSampleField = selectedSampleField.get(\"OptionList\");\n          }\n        }\n\n        this.setState({\n          data: this.props.Login.masterData,\n          QueryBuilderViewsName: QueryBuilderViewsName,\n          QueryBuilderStableName: QueryBuilderStableName ? QueryBuilderStableName : this.state.QueryBuilderStableName,\n          SelectedQueryBuilderStableName: SelectedQueryBuilderStableName ? SelectedQueryBuilderStableName : this.state.SelectedQueryBuilderStableName,\n          QueryBuilderScolumnList: QueryBuilderScolumnList ? QueryBuilderScolumnList : this.state.QueryBuilderScolumnList,\n          SelectedQueryBuilderScolumnList: SelectedQueryBuilderScolumnList ? SelectedQueryBuilderScolumnList : this.state.SelectedQueryBuilderScolumnList,\n          lstFormName: lstFormName ? lstFormName : this.state.lstFormName,\n          lstDynamicAuditTableStableName: lstDynamicAuditTableStableName ? lstDynamicAuditTableStableName : this.state.lstDynamicAuditTableStableName,\n          selectedLstFormName: selectedLstFormName ? selectedLstFormName : this.state.selectedLstFormName,\n          selectedLstDynamicAuditTableStableName: selectedLstDynamicAuditTableStableName ? selectedLstDynamicAuditTableStableName : this.state.selectedLstDynamicAuditTableStableName,\n          lstQualisForms: lstQualisForms ? lstQualisForms : this.state.lstQualisForms,\n          selectedLstQualisForms: selectedLstQualisForms ? selectedLstQualisForms : this.state.selectedLstQualisForms,\n          lstSampleItems: lstSampleItems ? lstSampleItems : this.state.lstSampleItems,\n          selectedLstSampleItems: selectedLstSampleItems ? selectedLstSampleItems : this.state.selectedLstSampleItems,\n          lstMappedTemplateFieldProps: lstMappedTemplateFieldProps ? lstMappedTemplateFieldProps : this.state.lstMappedTemplateFieldProps,\n          selectedLstMappedTemplateFieldProps: selectedLstMappedTemplateFieldProps ? selectedLstMappedTemplateFieldProps : this.state.selectedLstMappedTemplateFieldProps,\n          lstSampleField: lstSampleField ? lstSampleField : this.state.lstSampleField,\n          selectedLstSampleField: selectedLstSampleField ? selectedLstSampleField : this.state.selectedLstSampleField,\n          MaterialConfig: MaterialConfig,\n          dataResult: process(this.props.Login.masterData.listofItem ? this.props.Login.masterData.listofItem : [], dataState),\n          dataState\n        });\n      }\n    } else if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\n      let selectedRecord;\n\n      if (this.props.Login.masterData.headername === \"Query Builder Views Columns\") {\n        selectedRecord = { ...this.props.Login.selectedRecord,\n          sdefaultname: this.props.Login.selectedRecord && this.props.Login.selectedRecord.sdefaultname && this.props.Login.selectedRecord.sdefaultname\n        };\n      } else if (this.props.Login.masterData.headername === \"Query Builder Table Columns\") {\n        selectedRecord = { ...this.props.Login.selectedRecord,\n          sdefaultname: this.props.Login.selectedRecord && this.props.Login.selectedRecord.sdefaultname && this.props.Login.selectedRecord.sdefaultname\n        };\n      } else {\n        selectedRecord = { ...this.props.Login.selectedRecord\n        };\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    }\n  }\n\n  handleClose() {\n    let loadEsign = this.props.Login.loadEsign;\n    let openModal = this.props.Login.openModal;\n    let selectedRecord = this.props.Login.selectedRecord;\n    let selectedId = this.props.Login.selectedId;\n\n    if (this.state.showSynonym) {\n      this.setState({\n        showSynonym: false\n      });\n      return null;\n    }\n\n    if (this.props.Login.loadEsign) {\n      loadEsign = false; //openModal = false;\n    } else {\n      openModal = false;\n      selectedRecord = { ...this.props.Login.selectedRecord\n      };\n      selectedId = null;\n    }\n\n    const updateInfo = {\n      typeName: DEFAULT_RETURN,\n      data: {\n        openModal,\n        loadEsign,\n        selectedRecord,\n        selectedId\n      }\n    };\n    this.props.updateStore(updateInfo);\n  }\n\n}\n\nexport default connect(mapStateToProps, {\n  callService,\n  crudMaster,\n  showRegTypeAddScreen,\n  fetchById,\n  comboService,\n  updateStore,\n  validateEsignCredential\n})(injectIntl(Languages));","map":{"version":3,"sources":["E:/WorkingFolder/React_Postgres/ALPD/branches/SOURCE-513-PROD/SOURCE-513-ALPD-5304/QuaLISWeb/src/pages/configurationmaster/Languages.jsx"],"names":["React","ListWrapper","Row","Col","Button","toast","process","connect","injectIntl","callService","crudMaster","showRegTypeAddScreen","fetchById","comboService","updateStore","validateEsignCredential","DEFAULT_RETURN","DataGrid","FormSelectSearch","SlideOutModal","showEsign","getControlMap","constructOptionList","Esign","AddLanguageSynonym","Affix","faSync","faLanguage","faFilePdf","FontAwesomeIcon","mapStateToProps","state","Login","Languages","Component","constructor","props","dataStateChange","event","setState","dataResult","data","listofItem","dataState","reloadData","inputParam","inputData","userinfo","userInfo","methodUrl","classUrl","displayName","validateEsign","sreason","selectedRecord","nreasoncode","value","spredefinedreason","label","password","screenData","onInputOnChange","name","item","fieldName","target","type","checked","masterData","headername","undefined","onComboChange","comboData","sdisplayname","nquerybuilderviewscode","sviewname","primarykey","displayname","nquerybuildertablecode","stablename","scolumnname","selectedvalues","SelectedQueryBuilderScolumnList","SelectedQueryBuilderStableName","dynamicaudittableformcode","sformname","ndynamicaudittablecode","formPrimayKey","selectedLstFormName","nmappedtemplatefieldpropcode","sregtemplatename","indexQualisforms","indexFieldKey","indexFieldValue","indexPropertiesKey","indexValue","nmultilingualmasterscode","onSaveClick","saveType","formRef","selectedId","showSynonym","operation","nmenucode","nmodulecode","nformcode","ntranscode","salertdisplaystatus","stransdisplaystatus","sactiondisplaystatus","ncontrolcode","scontrolids","napprovalsubtypecode","approvalsubtypename","nsampletypecode","sampletypename","nperiodcode","speriodname","ngendercode","sgendername","ngradecode","nschedulertypecode","sschedulertypename","tablename","replaceValue","sjsondata","sdefaultname","getIndexValue","findIndex","keys","keyvalue","selectfields","length","jsondata","nmaterialtypecode","smaterialtypename","ninterfacetypecode","sinterfacetypename","nauditactionfiltercode","nattachmenttypecode","sattachmenttype","nftptypecode","sftptypename","nreporttypecode","ncoareporttypecode","nreactcomponentcode","componentname","nfunctioncode","ndynamicformulafieldcode","ncharttypecode","ndesigncomponentcode","nchecklistcomponentcode","ngenericlabelcode","JSON","parse","columnname","index","stringify","subsampleenabledisable","sfieldname","multilingualfields","selectedLstDynamicAuditTableStableName","selectedLstSampleField","selectedLstQualisforms","selectedLstSampleItems","indexPropertiesValue","userRoleControlRights","updateInfo","typeName","loadEsign","openModal","screenName","createRef","extractedColumnList","handleClose","bind","skip","take","settings","parseInt","masterStatus","error","controlMap","Map","mandatoryFields","getDerivedStateFromProps","warn","render","primaryKeyField","languageList","languagesId","has","get","languagesParam","ncontrolCode","intl","formatMessage","id","multilingualmasters","selectedmultilingualmasters","QueryBuilderViewsName","selectedQueryBuilderViewsName","QueryBuilderStableName","lstFormName","lstMappedTemplateFieldProps","selectedLstMappedTemplateFieldProps","QueryBuilderScolumnList","lstDynamicAuditTableStableName","lstQualisForms","selectedLstQualisForms","lstSampleItems","lstSampleField","sneedheader","componentDidUpdate","previousProps","Object","values","map","push","multilingualmastersMap","FilterQueryMap","formNameQueryMap","filterValue","MaterialConfig","FilterQueryColumnMap","FilterColumnNameMap","FilterSelectedQueryColumnMap","selectedQueryBuilderScolumnList","FilterSelectedColumnNameMap","formName","DynamicAuditTableStableName","selectedFormName","selectedDynamicAuditTableStableName","lstDynamicAuditTable","SelectedFormName","selectedDynamicAuditTable","qualisForms","selectedQualisForms","sampleItems","selectedSampleItems","mappedTemplateFieldProps","selectedMappedTemplateFieldProps","sampleField","selectedSampleField","lstQualisforms"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { ListWrapper } from '../../components/client-group.styles'\r\nimport { Row, Col, Button } from 'react-bootstrap';\r\nimport { toast } from 'react-toastify';\r\nimport { process } from '@progress/kendo-data-query';\r\nimport { connect } from 'react-redux';\r\nimport { injectIntl } from 'react-intl';\r\nimport { callService, crudMaster, showRegTypeAddScreen, fetchById, comboService, updateStore, validateEsignCredential } from '../../actions';\r\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\r\nimport DataGrid from '../../components/data-grid/data-grid.component';\r\nimport FormSelectSearch from '../../components/form-select-search/form-select-search.component';\r\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\r\nimport { showEsign, getControlMap, constructOptionList } from '../../components/CommonScript';\r\nimport Esign from '../audittrail/Esign';\r\nimport AddLanguageSynonym from '../../components/AddLanguages';\r\n// import ReactTooltip from 'react-tooltip';\r\nimport { Affix } from 'rsuite';\r\nimport { faSync, faLanguage, faFilePdf } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n\r\nconst mapStateToProps = state => {\r\n    return ({ Login: state.Login })\r\n}\r\n\r\nclass Languages extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.formRef = React.createRef();\r\n        this.extractedColumnList = [];\r\n        this.handleClose = this.handleClose.bind(this);\r\n        const dataState = {\r\n            skip: 0,\r\n            take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5,\r\n        };\r\n        this.state = {\r\n            data: [], masterStatus: \"\", error: \"\", selectedRecord: {}, userRoleControlRights: [], controlMap: new Map(),\r\n            dataResult: [],\r\n            dataState: dataState,\r\n            mandatoryFields: []\r\n\r\n        };\r\n    }\r\n    dataStateChange = (event) => {\r\n        this.setState({\r\n            dataResult: process(this.state.data.listofItem, event.dataState),\r\n            dataState: event.dataState\r\n        });\r\n    }\r\n    reloadData = () => {\r\n        const inputParam = {\r\n            inputData: { userinfo: this.props.Login.userInfo },\r\n            methodUrl: \"Language\",\r\n            classUrl: this.props.Login.inputParam.classUrl,\r\n            displayName: this.props.Login.inputParam.displayName ? this.props.Login.inputParam.displayName : '',\r\n            userInfo: this.props.Login.userInfo\r\n        };\r\n        this.props.callService(inputParam);\r\n    }\r\n\r\n    validateEsign = () => {\r\n        const inputParam = {\r\n            inputData: {\r\n                \"userinfo\": {\r\n                    ...this.props.Login.userInfo,\r\n                    sreason: this.state.selectedRecord[\"esigncomments\"],\r\n                    nreasoncode: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].value,\r\n                    spredefinedreason: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].label,\r\n\r\n                },\r\n                password: this.state.selectedRecord[\"esignpassword\"]\r\n            },\r\n            screenData: this.props.Login.screenData\r\n        }\r\n        this.props.validateEsignCredential(inputParam, \"openModal\");\r\n    }\r\n\r\n\r\n    static getDerivedStateFromProps(props, state) {\r\n\r\n        if (props.Login.masterStatus !== state.masterStatus) {\r\n            toast.warn(props.Login.masterStatus);\r\n            props.Login.masterStatus = \"\";\r\n        }\r\n        if (props.Login.error !== state.error) {\r\n            toast.error(props.Login.error)\r\n            props.Login.error = \"\";\r\n        }\r\n        return null;\r\n    }\r\n\r\n    render() {\r\n        let primaryKeyField = \"\";\r\n        if (this.props.Login.inputParam !== undefined) {\r\n            this.mandatoryFields = [\r\n                { \"idsName\": \"IDS_DEFAULTLANGUAGE\", \"dataField\": this.props.Login.languageList[0].value == \"en-US\" ? \"sdefaultname\" : \" \", \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"text\" }\r\n            ]\r\n            if (this.props.Login.masterData.headername == \"Menu\") {\r\n                this.extractedColumnList = [\r\n                    { \"idsName\": \"IDS_MENUID\", \"dataField\": \"smenuname\", \"width\": \"250px\" },\r\n                    { \"idsName\": \"IDS_MENUNAME\", \"dataField\": \"sdisplayname\", \"width\": \"250px\" }\r\n                ]\r\n                primaryKeyField = \"nmenucode\";\r\n            } else if (this.props.Login.masterData.headername == \"Module\") {\r\n                this.extractedColumnList = [\r\n                    { \"idsName\": \"IDS_MODULEID\", \"dataField\": \"smodulename\", \"width\": \"250px\" },\r\n                    { \"idsName\": \"IDS_MODULENAME\", \"dataField\": \"sdisplayname\", \"width\": \"250px\" },\r\n                ]\r\n                primaryKeyField = \"nmodulecode\";\r\n            } else if (this.props.Login.masterData.headername == \"Forms\") {\r\n                this.extractedColumnList = [\r\n                    { \"idsName\": \"IDS_FORMID\", \"dataField\": \"sformname\", \"width\": \"250px\" },\r\n                    { \"idsName\": \"IDS_FORMNAME\", \"dataField\": \"sdisplayname\", \"width\": \"250px\" },\r\n                ]\r\n                primaryKeyField = \"nformcode\";\r\n            } else if (this.props.Login.masterData.headername == \"Transaction Status\") {\r\n                this.extractedColumnList = [\r\n                    { \"idsName\": \"IDS_TRANSACTIONSTATUSID\", \"dataField\": \"stransstatus\", \"width\": \"250px\" },\r\n                    { \"idsName\": \"IDS_ACTIONDISPLAYSTATUS\", \"dataField\": \"sactiondisplaystatus\", \"width\": \"250px\" },\r\n                    { \"idsName\": \"IDS_TRANSDISPLAYSTATUS\", \"dataField\": \"stransdisplaystatus\", \"width\": \"250px\" },\r\n                ]\r\n                primaryKeyField = \"ntranscode\";\r\n            } else if (this.props.Login.masterData.headername == \"Control Master\") {\r\n                this.extractedColumnList = [\r\n                    { \"idsName\": \"IDS_SCREENNAME\", \"dataField\": \"sformname\", \"width\": \"250px\" },\r\n                    { \"idsName\": \"IDS_CONTROLMASTERID\", \"dataField\": \"scontrolname\", \"width\": \"250px\" },\r\n                    { \"idsName\": \"IDS_CONTROLMASTER\", \"dataField\": \"sdisplayname\", \"width\": \"250px\" },\r\n                ]\r\n                primaryKeyField = \"ncontrolcode\";\r\n            } else if (this.props.Login.masterData.headername == \"Approval Sub Type\") {\r\n                this.extractedColumnList = [\r\n                    { \"idsName\": \"IDS_APPROVALSUBTYPEID\", \"dataField\": \"sdisplayname\", \"width\": \"250px\" },\r\n                    { \"idsName\": \"IDS_APPROVALSUBTYPENAME\", \"dataField\": \"sapprovalsubtypename\", \"width\": \"250px\" },\r\n                ]\r\n                primaryKeyField = \"napprovalsubtypecode\";\r\n            } else if (this.props.Login.masterData.headername == \"Sample Type\") {\r\n                this.extractedColumnList = [\r\n                    { \"idsName\": \"IDS_SAMPLETYPEID\", \"dataField\": \"sdisplayname\", \"width\": \"250px\" },\r\n                    { \"idsName\": \"IDS_SAMPLETYPENAME\", \"dataField\": \"ssampletypename\", \"width\": \"250px\" },\r\n                ]\r\n                primaryKeyField = \"nsampletypecode\";\r\n            }\r\n            // else if (this.props.Login.masterData.headername == \"Template Design\") {\r\n            //     this.extractedColumnList = [\r\n            //         { \"idsName\": \"IDS_TEMPLATETYPEID\", \"dataField\": \"sdisplayname\", \"width\": \"250px\" },\r\n            //         { \"idsName\": \"IDS_TEMPLATETYPENAME\", \"dataField\": \"stemplatetypename\", \"width\": \"250px\" }\r\n            //     ]\r\n            //     primaryKeyField = \"ntemplatetypecode\";\r\n            // }\r\n            else if (this.props.Login.masterData.headername == \"Period\") {\r\n                this.extractedColumnList = [\r\n                    { \"idsName\": \"IDS_PERIODID\", \"dataField\": \"sdisplayname\", \"width\": \"250px\" },\r\n                    { \"idsName\": \"IDS_PERIODNAME\", \"dataField\": \"speriodname\", \"width\": \"250px\" }\r\n                ]\r\n                primaryKeyField = \"nperiodcode\";\r\n            } else if (this.props.Login.masterData.headername == \"Gender\") {\r\n                this.extractedColumnList = [\r\n                    { \"idsName\": \"IDS_GENDERID\", \"dataField\": \"sdisplayname\", \"width\": \"250px\" },\r\n                    { \"idsName\": \"IDS_GENDERNAME\", \"dataField\": \"sgendername\", \"width\": \"250px\" }\r\n                ]\r\n                primaryKeyField = \"ngendercode\";\r\n            } else if (this.props.Login.masterData.headername == \"Grade\") {\r\n                this.extractedColumnList = [\r\n                    { \"idsName\": \"IDS_GRADEID\", \"dataField\": \"sgradename\", \"width\": \"250px\" },\r\n                    { \"idsName\": \"IDS_GRADENAME\", \"dataField\": \"sdisplayname\", \"width\": \"250px\" }\r\n                ]\r\n                primaryKeyField = \"ngradecode\";\r\n            } else if (this.props.Login.masterData.headername == \"Scheduler Type\") {\r\n                this.extractedColumnList = [\r\n                    { \"idsName\": \"IDS_SCHEDULERTYPEID\", \"dataField\": \"sdisplayname\", \"width\": \"250px\" },\r\n                    { \"idsName\": \"IDS_SCHEDULERTYPENAME\", \"dataField\": \"sschedulertypename\", \"width\": \"250px\" }\r\n                ]\r\n                primaryKeyField = \"nschedulertypecode\";\r\n            } else if (this.props.Login.masterData.headername == \"Query Builder Tables\") {\r\n                this.extractedColumnList = [\r\n                    { \"idsName\": \"IDS_FORMS\", \"dataField\": \"sformname\", \"width\": \"250px\" },\r\n                    { \"idsName\": \"IDS_SQLQUERYBUILDERID\", \"dataField\": \"stablename\", \"width\": \"250px\" },\r\n                    { \"idsName\": \"IDS_SQLQUERYBUILDERNAME\", \"dataField\": \"sdisplayname\", \"width\": \"250px\" }\r\n                ]\r\n                primaryKeyField = \"nquerybuildertablecode\";\r\n            } else if (this.props.Login.masterData.headername == \"Query Builder Views\") {\r\n                this.extractedColumnList = [\r\n                    { \"idsName\": \"IDS_VIEWSQUERYBUILDERID\", \"dataField\": \"sviewname\", \"width\": \"250px\" },\r\n                    { \"idsName\": \"IDS_VIEWSQUERYBUILDERNAME\", \"dataField\": \"sdisplayname\", \"width\": \"250px\" }\r\n                ]\r\n                primaryKeyField = \"nquerybuilderviewscode\";\r\n            } else if (this.props.Login.masterData.headername == \"Query Builder Views Columns\") {\r\n                this.extractedColumnList = [\r\n                    // { \"idsName\": \"IDS_QUERYBUILDERVIEWSCOLUMNSNAME\", \"dataField\": \"sviewname\", \"width\": \"250px\" },\r\n                    { \"idsName\": \"IDS_QUERYBUILDERVIEWSCOLUMNSID\", \"dataField\": \"sdisplayname\", \"width\": \"250px\" }\r\n                ]\r\n                primaryKeyField = 'index';\r\n            } else if (this.props.Login.masterData.headername == \"Multilingual Masters\") {\r\n                this.extractedColumnList = [\r\n                    { \"idsName\": \"IDS_MULTILINGUALMASTERSID\", \"dataField\": \"sdisplayname\", \"width\": \"250px\" },\r\n                    { \"idsName\": \"IDS_MULTILINGUALMASTERSAME\", \"dataField\": \"sdefaultname\", \"width\": \"250px\" }\r\n                ]\r\n                primaryKeyField = \"nmultilingualmasterscode\";\r\n            } else if (this.props.Login.masterData.headername == \"Material Type\") {\r\n                this.extractedColumnList = [\r\n                    { \"idsName\": \"IDS_MATERIALTYPEID\", \"dataField\": \"smaterialtypename\", \"width\": \"250px\" },\r\n                    { \"idsName\": \"IDS_MATERIALTYPENAME\", \"dataField\": \"sdisplayname\", \"width\": \"250px\" }\r\n                ]\r\n                primaryKeyField = \"nmaterialtypecode\";\r\n            } else if (this.props.Login.masterData.headername == \"Interface Type\") {\r\n                this.extractedColumnList = [\r\n                    { \"idsName\": \"IDS_INTERFACETYPEID\", \"dataField\": \"sinterfacetypename\", \"width\": \"250px\" },\r\n                    { \"idsName\": \"IDS_INTERFACETYPENAME\", \"dataField\": \"sdisplayname\", \"width\": \"250px\" }\r\n                ]\r\n                primaryKeyField = \"ninterfacetypecode\";\r\n            } else if (this.props.Login.masterData.headername == \"Audit Action Filter\") {\r\n                this.extractedColumnList = [\r\n                    { \"idsName\": \"IDS_AUDITACTIONFILTERID\", \"dataField\": \"sauditactionfiltername\", \"width\": \"250px\" },\r\n                    { \"idsName\": \"IDS_AUDITACTIONFILTERNAME\", \"dataField\": \"sdisplayname\", \"width\": \"250px\" }\r\n                ]\r\n                primaryKeyField = \"nauditactionfiltercode\";\r\n            } else if (this.props.Login.masterData.headername == \"Attachment Type\") {\r\n                this.extractedColumnList = [\r\n                    { \"idsName\": \"IDS_ATTACHMENTTYPEID\", \"dataField\": \"sdefaultname\", \"width\": \"250px\" },\r\n                    { \"idsName\": \"IDS_ATTACHMENTTYPENAME\", \"dataField\": \"sdisplayname\", \"width\": \"250px\" }\r\n                ]\r\n                primaryKeyField = \"nattachmenttypecode\";\r\n            } else if (this.props.Login.masterData.headername == \"FTP Type\") {\r\n                this.extractedColumnList = [\r\n                    { \"idsName\": \"IDS_FTPTYPEID\", \"dataField\": \"sdefaultname\", \"width\": \"250px\" },\r\n                    { \"idsName\": \"IDS_FTPTYPENAME\", \"dataField\": \"sdisplayname\", \"width\": \"250px\" }\r\n                ]\r\n                primaryKeyField = \"nftptypecode\";\r\n            } else if (this.props.Login.masterData.headername == \"Report Type\") {\r\n                this.extractedColumnList = [\r\n                    { \"idsName\": \"IDS_REPORTTYPEID\", \"dataField\": \"sreporttypename\", \"width\": \"250px\" },\r\n                    { \"idsName\": \"IDS_REPORTTYPENAME\", \"dataField\": \"sdisplayname\", \"width\": \"250px\" }\r\n                ]\r\n                primaryKeyField = \"nreporttypecode\";\r\n            } else if (this.props.Login.masterData.headername == \"COAReport Type\") {\r\n                this.extractedColumnList = [\r\n                    { \"idsName\": \"IDS_COAREPORTTYPEID\", \"dataField\": \"scoareporttypename\", \"width\": \"250px\" },\r\n                    { \"idsName\": \"IDS_COAREPORTTYPENAME\", \"dataField\": \"sdisplayname\", \"width\": \"250px\" }\r\n                ]\r\n                primaryKeyField = \"ncoareporttypecode\";\r\n            } else if (this.props.Login.masterData.headername == \"React Components\") {\r\n                this.extractedColumnList = [\r\n                    { \"idsName\": \"IDS_REACTCOMPONENTID\", \"dataField\": \"componentname\", \"width\": \"250px\" },\r\n                    { \"idsName\": \"IDS_REACTCOMPONENTNAME\", \"dataField\": \"sdisplayname\", \"width\": \"250px\" }\r\n                ]\r\n                primaryKeyField = \"nreactcomponentcode\";\r\n            }\r\n            else if (this.props.Login.masterData.headername == \"Functions\") {\r\n                this.extractedColumnList = [\r\n                    { \"idsName\": \"IDS_FUNCTIONSID\", \"dataField\": \"sfunctionname\", \"width\": \"250px\" },\r\n                    { \"idsName\": \"IDS_FUNCTIONSNAME\", \"dataField\": \"sdisplayname\", \"width\": \"250px\" }\r\n                ]\r\n                primaryKeyField = \"nfunctioncode\";\r\n            }\r\n            else if (this.props.Login.masterData.headername == \"Dynamic Formula Fields\") {\r\n                this.extractedColumnList = [\r\n                    { \"idsName\": \"IDS_DYNAMICFORMULAFIELDSID\", \"dataField\": \"sdefaultname\", \"width\": \"250px\" },\r\n                    { \"idsName\": \"IDS_DYNAMICFORMULAFIELDSNAME\", \"dataField\": \"sdisplayname\", \"width\": \"250px\" }\r\n                ]\r\n                primaryKeyField = \"ndynamicformulafieldcode\";\r\n            }\r\n            else if (this.props.Login.masterData.headername == \"Chart Type\") {\r\n                this.extractedColumnList = [\r\n                    { \"idsName\": \"IDS_CHARTTYPEID\", \"dataField\": \"sdefaultname\", \"width\": \"250px\" },\r\n                    { \"idsName\": \"IDS_CHARTTYPENAME\", \"dataField\": \"sdisplayname\", \"width\": \"250px\" }\r\n                ]\r\n                primaryKeyField = \"ncharttypecode\";\r\n            }\r\n            else if (this.props.Login.masterData.headername == \"Design Components\") {\r\n                this.extractedColumnList = [\r\n                    { \"idsName\": \"IDS_DESIGNCOMPONENTSID\", \"dataField\": \"sdefaultname\", \"width\": \"250px\" },\r\n                    { \"idsName\": \"IDS_DESIGNCOMPONENTSNAME\", \"dataField\": \"sdisplayname\", \"width\": \"250px\" }\r\n                ]\r\n                primaryKeyField = \"ndesigncomponentcode\";\r\n            }\r\n            else if (this.props.Login.masterData.headername == \"CheckList Component\") {\r\n                this.extractedColumnList = [\r\n                    { \"idsName\": \"IDS_CHECKLISTCOMPONENTID\", \"dataField\": \"scomponentname\", \"width\": \"250px\" },\r\n                    { \"idsName\": \"IDS_CHECKLISTCOMPONENTNAME\", \"dataField\": \"sdisplayname\", \"width\": \"250px\" }\r\n                ]\r\n                primaryKeyField = \"nchecklistcomponentcode\";\r\n            }\r\n            else if (this.props.Login.masterData.headername == \"Generic Label\") {\r\n                this.extractedColumnList = [\r\n                    { \"idsName\": \"IDS_GENERICLABELID\", \"dataField\": \"sgenericlabel\", \"width\": \"250px\" },\r\n                    { \"idsName\": \"IDS_GENERICLABELNAME\", \"dataField\": \"sdisplayname\", \"width\": \"250px\" }\r\n                ]\r\n                primaryKeyField = \"ngenericlabelcode\";\r\n            }\r\n            else if (this.props.Login.masterData.headername == \"Query Builder Table Columns\") {\r\n                this.extractedColumnList = [\r\n                    // { \"idsName\": \"IDS_QUERYBUILDERTABLECOLUMNSID\", \"dataField\": \"stablename\", \"width\": \"250px\" },\r\n                    { \"idsName\": \"IDS_QUERYBUILDERTABLECOLUMNSNAME\", \"dataField\": \"sdisplayname\", \"width\": \"250px\" }\r\n                ]\r\n                primaryKeyField = \"index\";\r\n            }\r\n            else if (this.props.Login.masterData.headername == \"Dynamic Audit Table\") {\r\n                this.extractedColumnList = [\r\n                    // { \"idsName\": \"IDS_TABLE_NAME\", \"dataField\": \"stablename\", \"width\": \"250px\" },\r\n                    { \"idsName\": \"IDS_FIELDNAME\", \"dataField\": \"sfieldname\", \"width\": \"250px\" },\r\n                    { \"idsName\": \"IDS_MULTILINGUALFIELDS\", \"dataField\": \"sdisplayname\", \"width\": \"250px\" }\r\n                ]\r\n                primaryKeyField = \"index\";\r\n            }\r\n            else if (this.props.Login.masterData.headername == \"Mapped Template Field Props\") {\r\n                this.extractedColumnList = [\r\n                    // { \"idsName\": \"samplegriditems\", \"dataField\": \"sfieldname\", \"width\": \"250px\" },\r\n                    { \"idsName\": \"IDS_MAPPEDTEMPLATEFIELDPROPSNAME\", \"dataField\": \"sdisplayname\", \"width\": \"250px\" }\r\n                ]\r\n                primaryKeyField = \"index\";\r\n            }\r\n        }\r\n\r\n        const languagesId = this.props.Login.inputParam && this.state.controlMap.has(\"UpdateLanguage\")\r\n            && this.state.controlMap.get('UpdateLanguage').ncontrolcode;\r\n        const languagesParam = {\r\n            screenName: \"Language\", operation: \"update\", primaryKeyField: primaryKeyField,\r\n            masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo, ncontrolCode: languagesId, selectedRecord: this.state.selectedRecord\r\n        };\r\n\r\n        return (\r\n            <>\r\n                <Row>\r\n                    <Col>\r\n                        <ListWrapper className=\"client-list-content\">\r\n                            <Row noGutters>\r\n                                <Col md={8}>\r\n                                    <Affix top={85}>\r\n                                        <Row>\r\n                                            <Col md={12}>\r\n                                                <Row>\r\n                                                    <Col md={4}>\r\n                                                        <FormSelectSearch\r\n                                                            name={\"nmultilingualmasterscode\"}\r\n                                                            formLabel={this.props.intl.formatMessage({ id: \"IDS_MULTILINGUALMASTERS\" })}\r\n                                                            placeholder={this.props.intl.formatMessage({ id: \"IDS_SELECTRECORD\" })}\r\n                                                            options={this.state.multilingualmasters || []}\r\n                                                            value={this.props.Login.masterData && this.props.Login.masterData.selectedmultilingualmasters\r\n                                                                && {\r\n                                                                value:\r\n                                                                    this.props.Login.masterData.selectedmultilingualmasters.nmultilingualmasterscode ? this.props.Login.masterData.selectedmultilingualmasters.nmultilingualmasterscode :\r\n                                                                        this.state.selectedRecord.nmultilingualmasterscode.value,\r\n                                                                label: this.props.Login.masterData.selectedmultilingualmasters.sdisplayname ? this.props.Login.masterData.selectedmultilingualmasters.sdisplayname :\r\n                                                                    this.state.selectedRecord.nmultilingualmasterscode.label\r\n                                                            }}\r\n                                                            isMandatory={false}\r\n                                                            isMulti={false}\r\n                                                            isClearable={false}\r\n                                                            isSearchable={true}\r\n                                                            isDisabled={false}\r\n                                                            closeMenuOnSelect={true}\r\n                                                            className=\"mb-2\"\r\n                                                            onChange={(event) => this.onComboChange(event, 'nmultilingualmasterscode')}\r\n                                                        />\r\n                                                    </Col>\r\n                                                    {this.props.Login.masterData.headername == \"Query Builder Views Columns\" ?\r\n                                                        <Col md={4} >\r\n                                                            <FormSelectSearch\r\n                                                                name={\"nquerybuilderviewscode\"}\r\n                                                                formLabel={this.props.intl.formatMessage({ id: \"IDS_VIEWNAME\" })}\r\n                                                                placeholder={this.props.intl.formatMessage({ id: \"IDS_SELECTRECORD\" })}\r\n                                                                options={this.state.QueryBuilderViewsName || []}\r\n                                                                value={this.props.Login.masterData && this.props.Login.masterData.selectedQueryBuilderViewsName\r\n                                                                    && {\r\n                                                                    value: this.state.selectedRecord.nquerybuilderviewscode !== undefined\r\n                                                                        ? this.state.selectedRecord.nquerybuilderviewscode.value : this.props.Login.masterData.selectedQueryBuilderViewsName.nquerybuilderviewscode,\r\n                                                                    label: this.state.selectedRecord.nquerybuilderviewscode !== undefined ?\r\n                                                                        this.state.selectedRecord.nquerybuilderviewscode.label : this.props.Login.masterData.selectedQueryBuilderViewsName.sdisplayname\r\n                                                                }}\r\n                                                                isMandatory={false}\r\n                                                                isMulti={false}\r\n                                                                isClearable={false}\r\n                                                                isSearchable={true}\r\n                                                                isDisabled={false}\r\n                                                                closeMenuOnSelect={true}\r\n                                                                className=\"mb-2\"\r\n                                                                onChange={(event) => this.onComboChange(event, 'nquerybuilderviewscode')}\r\n                                                            />\r\n                                                        </Col> : this.props.Login.masterData.headername == \"Query Builder Table Columns\" ?\r\n                                                            <Col md={4} >\r\n                                                                <FormSelectSearch\r\n                                                                    name={\"nquerybuilderviewscode\"}\r\n                                                                    formLabel={this.props.intl.formatMessage({ id: \"IDS_TABLE_NAME\" })}\r\n                                                                    placeholder={this.props.intl.formatMessage({ id: \"IDS_SELECTRECORD\" })}\r\n                                                                    options={this.state.QueryBuilderStableName || []}\r\n                                                                    // value={this.props.Login.masterData && this.props.Login.masterData.SelectedQueryBuilderStableName\r\n                                                                    //     && {\r\n                                                                    //     value: this.state.selectedRecord.nquerybuildertablecode !== undefined\r\n                                                                    //         ? this.state.selectedRecord.nquerybuildertablecode.value : this.props.Login.masterData.SelectedQueryBuilderStableName[0].nquerybuildertablecode,\r\n                                                                    //     label: this.state.selectedRecord.nquerybuildertablecode !== undefined ?\r\n                                                                    //         this.state.selectedRecord.nquerybuildertablecode.label : this.props.Login.masterData.SelectedQueryBuilderStableName[0].stablename\r\n                                                                    // }}\r\n                                                                    value={this.state && this.state.SelectedQueryBuilderStableName && this.state.SelectedQueryBuilderStableName}\r\n                                                                    isMandatory={false}\r\n                                                                    isMulti={false}\r\n                                                                    isClearable={false}\r\n                                                                    isSearchable={true}\r\n                                                                    isDisabled={false}\r\n                                                                    closeMenuOnSelect={true}\r\n                                                                    className=\"mb-2\"\r\n                                                                    onChange={(event) => this.onComboChange(event, 'nquerybuildertablecode')}\r\n                                                                />\r\n                                                            </Col> : this.props.Login.masterData.headername == \"Dynamic Audit Table\" ?\r\n                                                                <Col md={4} >\r\n                                                                    <FormSelectSearch\r\n                                                                        name={\"nformcode\"}\r\n                                                                        formLabel={this.props.intl.formatMessage({ id: \"IDS_SCREENNAME\" })}\r\n                                                                        placeholder={this.props.intl.formatMessage({ id: \"IDS_SELECTRECORD\" })}\r\n                                                                        options={this.state.lstFormName || []}\r\n                                                                        // value={this.props.Login.masterData && this.props.Login.masterData.SelectedQueryBuilderStableName\r\n                                                                        //     && {\r\n                                                                        //     value: this.state.selectedRecord.nquerybuildertablecode !== undefined\r\n                                                                        //         ? this.state.selectedRecord.nquerybuildertablecode.value : this.props.Login.masterData.SelectedQueryBuilderStableName[0].nquerybuildertablecode,\r\n                                                                        //     label: this.state.selectedRecord.nquerybuildertablecode !== undefined ?\r\n                                                                        //         this.state.selectedRecord.nquerybuildertablecode.label : this.props.Login.masterData.SelectedQueryBuilderStableName[0].stablename\r\n                                                                        // }}\r\n                                                                        value={this.state && this.state.selectedLstFormName && this.state.selectedLstFormName}\r\n                                                                        isMandatory={false}\r\n                                                                        isMulti={false}\r\n                                                                        isClearable={false}\r\n                                                                        isSearchable={true}\r\n                                                                        isDisabled={false}\r\n                                                                        closeMenuOnSelect={true}\r\n                                                                        className=\"mb-2\"\r\n                                                                        onChange={(event) => this.onComboChange(event, 'dynamicaudittableformcode')}\r\n                                                                    />\r\n                                                                </Col> : this.props.Login.masterData.headername == \"Mapped Template Field Props\" ?\r\n                                                                    <Col md={4} >\r\n                                                                        <FormSelectSearch\r\n                                                                            name={\"nquerybuilderviewscode\"}\r\n                                                                            formLabel={this.props.intl.formatMessage({ id: \"IDS_REACTREGISTRATIONTEMPLATENAME\" })}\r\n                                                                            placeholder={this.props.intl.formatMessage({ id: \"IDS_SELECTRECORD\" })}\r\n                                                                            options={this.state.lstMappedTemplateFieldProps || []}\r\n                                                                            // value={this.props.Login.masterData && this.props.Login.masterData.selectedQueryBuilderScolumnList\r\n                                                                            //     && {\r\n                                                                            //     value: this.state.selectedRecord.nquerybuilderviewscode !== undefined\r\n                                                                            //         ? this.state.selectedRecord.nquerybuilderviewscode.value : this.props.Login.masterData.selectedQueryBuilderScolumnList.scolumnname,\r\n                                                                            //     label: this.state.selectedRecord.nquerybuilderviewscode !== undefined ?\r\n                                                                            //         this.state.selectedRecord.nquerybuilderviewscode.label : this.props.Login.masterData.selectedQueryBuilderScolumnList.scolumnname\r\n                                                                            // }}\r\n                                                                            value={this.state && this.state.selectedLstMappedTemplateFieldProps && this.state.selectedLstMappedTemplateFieldProps}\r\n                                                                            isMandatory={false}\r\n                                                                            isMulti={false}\r\n                                                                            isClearable={false}\r\n                                                                            isSearchable={true}\r\n                                                                            isDisabled={false}\r\n                                                                            closeMenuOnSelect={true}\r\n                                                                            className=\"mb-2\"\r\n                                                                            onChange={(event) => this.onComboChange(event, 'nmappedtemplatefieldpropcode')}\r\n                                                                        />\r\n                                                                    </Col> : \"\"\r\n                                                    }\r\n                                                    {this.props.Login.masterData.headername == \"Query Builder Table Columns\" ?\r\n                                                        <Col md={4} >\r\n                                                            <FormSelectSearch\r\n                                                                name={\"nquerybuilderviewscode\"}\r\n                                                                formLabel={this.props.intl.formatMessage({ id: \"IDS_COLUMNNAME\" })}\r\n                                                                placeholder={this.props.intl.formatMessage({ id: \"IDS_SELECTRECORD\" })}\r\n                                                                options={this.state.QueryBuilderScolumnList || []}\r\n                                                                // value={this.props.Login.masterData && this.props.Login.masterData.selectedQueryBuilderScolumnList\r\n                                                                //     && {\r\n                                                                //     value: this.state.selectedRecord.nquerybuilderviewscode !== undefined\r\n                                                                //         ? this.state.selectedRecord.nquerybuilderviewscode.value : this.props.Login.masterData.selectedQueryBuilderScolumnList.scolumnname,\r\n                                                                //     label: this.state.selectedRecord.nquerybuilderviewscode !== undefined ?\r\n                                                                //         this.state.selectedRecord.nquerybuilderviewscode.label : this.props.Login.masterData.selectedQueryBuilderScolumnList.scolumnname\r\n                                                                // }}\r\n                                                                value={this.state && this.state.SelectedQueryBuilderScolumnList && this.state.SelectedQueryBuilderScolumnList}\r\n                                                                isMandatory={false}\r\n                                                                isMulti={false}\r\n                                                                isClearable={false}\r\n                                                                isSearchable={true}\r\n                                                                isDisabled={false}\r\n                                                                closeMenuOnSelect={true}\r\n                                                                className=\"mb-2\"\r\n                                                                onChange={(event) => this.onComboChange(event, 'scolumnname')}\r\n                                                            />\r\n                                                        </Col> : this.props.Login.masterData.headername == \"Dynamic Audit Table\" ?\r\n                                                            <Col md={4} >\r\n                                                                <FormSelectSearch\r\n                                                                    name={\"ndynamicaudittablecode\"}\r\n                                                                    formLabel={this.props.intl.formatMessage({ id: \"IDS_TABLE_NAME\" })}\r\n                                                                    placeholder={this.props.intl.formatMessage({ id: \"IDS_SELECTRECORD\" })}\r\n                                                                    options={this.state.lstDynamicAuditTableStableName || []}\r\n                                                                    // value={this.props.Login.masterData && this.props.Login.masterData.selectedQueryBuilderScolumnList\r\n                                                                    //     && {\r\n                                                                    //     value: this.state.selectedRecord.nquerybuilderviewscode !== undefined\r\n                                                                    //         ? this.state.selectedRecord.nquerybuilderviewscode.value : this.props.Login.masterData.selectedQueryBuilderScolumnList.scolumnname,\r\n                                                                    //     label: this.state.selectedRecord.nquerybuilderviewscode !== undefined ?\r\n                                                                    //         this.state.selectedRecord.nquerybuilderviewscode.label : this.props.Login.masterData.selectedQueryBuilderScolumnList.scolumnname\r\n                                                                    // }}\r\n                                                                    value={this.state && this.state.selectedLstDynamicAuditTableStableName && this.state.selectedLstDynamicAuditTableStableName}\r\n                                                                    isMandatory={false}\r\n                                                                    isMulti={false}\r\n                                                                    isClearable={false}\r\n                                                                    isSearchable={true}\r\n                                                                    isDisabled={false}\r\n                                                                    closeMenuOnSelect={true}\r\n                                                                    className=\"mb-2\"\r\n                                                                    onChange={(event) => this.onComboChange(event, 'ndynamicaudittablecode')}\r\n                                                                />\r\n                                                            </Col> : this.props.Login.masterData.headername == \"Mapped Template Field Props\" ?\r\n                                                                <Col md={4} >\r\n                                                                    <FormSelectSearch\r\n                                                                        name={\"nformcode\"}\r\n                                                                        formLabel={this.props.intl.formatMessage({ id: \"IDS_FORMNAME\" })}\r\n                                                                        placeholder={this.props.intl.formatMessage({ id: \"IDS_SELECTRECORD\" })}\r\n                                                                        options={this.state.lstQualisForms || []} lstQualisForms\r\n                                                                        // value={this.props.Login.masterData && this.props.Login.masterData.SelectedQueryBuilderStableName\r\n                                                                        //     && {\r\n                                                                        //     value: this.state.selectedRecord.nquerybuildertablecode !== undefined\r\n                                                                        //         ? this.state.selectedRecord.nquerybuildertablecode.value : this.props.Login.masterData.SelectedQueryBuilderStableName[0].nquerybuildertablecode,\r\n                                                                        //     label: this.state.selectedRecord.nquerybuildertablecode !== undefined ?\r\n                                                                        //         this.state.selectedRecord.nquerybuildertablecode.label : this.props.Login.masterData.SelectedQueryBuilderStableName[0].stablename\r\n                                                                        // }}\r\n                                                                        value={this.state && this.state.selectedLstQualisForms && this.state.selectedLstQualisForms}\r\n                                                                        isMandatory={false}\r\n                                                                        isMulti={false}\r\n                                                                        isClearable={false}\r\n                                                                        isSearchable={true}\r\n                                                                        isDisabled={false}\r\n                                                                        closeMenuOnSelect={true}\r\n                                                                        className=\"mb-2\"\r\n                                                                        onChange={(event) => this.onComboChange(event, 'indexQualisforms')}\r\n                                                                    />\r\n                                                                </Col> : \"\"\r\n                                                    }\r\n                                                    {this.props.Login.masterData.headername == \"Mapped Template Field Props\" && this.props.Login.masterData.selectedLstQualisforms && this.props.Login.masterData.selectedLstQualisforms[0].nformcode ?\r\n                                                        <Col md={4} >\r\n                                                            <FormSelectSearch\r\n                                                                name={\"ndynamicaudittablecode\"}\r\n                                                                formLabel={this.props.intl.formatMessage({ id: \"IDS_PROPERTIES\" })}\r\n                                                                placeholder={this.props.intl.formatMessage({ id: \"IDS_SELECTRECORD\" })}\r\n                                                                options={this.state.lstSampleItems || []}\r\n                                                                // value={this.props.Login.masterData && this.props.Login.masterData.selectedQueryBuilderScolumnList\r\n                                                                //     && {\r\n                                                                //     value: this.state.selectedRecord.nquerybuilderviewscode !== undefined\r\n                                                                //         ? this.state.selectedRecord.nquerybuilderviewscode.value : this.props.Login.masterData.selectedQueryBuilderScolumnList.scolumnname,\r\n                                                                //     label: this.state.selectedRecord.nquerybuilderviewscode !== undefined ?\r\n                                                                //         this.state.selectedRecord.nquerybuilderviewscode.label : this.props.Login.masterData.selectedQueryBuilderScolumnList.scolumnname\r\n                                                                // }}\r\n                                                                value={this.state && this.state.selectedLstSampleItems && this.state.selectedLstSampleItems}\r\n                                                                isMandatory={false}\r\n                                                                isMulti={false}\r\n                                                                isClearable={false}\r\n                                                                isSearchable={true}\r\n                                                                isDisabled={false}\r\n                                                                closeMenuOnSelect={true}\r\n                                                                className=\"mb-2\"\r\n                                                                onChange={(event) => this.onComboChange(event, 'indexPropertiesKey')}\r\n                                                            />\r\n                                                        </Col> : \"\"}\r\n                                                    {this.props.Login.masterData.headername == \"Mapped Template Field Props\" && this.props.Login.masterData.selectedLstSampleItems && this.props.Login.masterData.selectedLstSampleItems[0].indexPropertiesValue === \"testListFields\" ?\r\n                                                        <Col md={4} >\r\n                                                            <FormSelectSearch\r\n                                                                name={\"ndynamicaudittablecode\"}\r\n                                                                formLabel={this.props.intl.formatMessage({ id: \"IDS_FIELDNAME\" })}\r\n                                                                placeholder={this.props.intl.formatMessage({ id: \"IDS_SELECTRECORD\" })}\r\n                                                                options={this.state.lstSampleField || []}\r\n                                                                // value={this.props.Login.masterData && this.props.Login.masterData.selectedQueryBuilderScolumnList\r\n                                                                //     && {\r\n                                                                //     value: this.state.selectedRecord.nquerybuilderviewscode !== undefined\r\n                                                                //         ? this.state.selectedRecord.nquerybuilderviewscode.value : this.props.Login.masterData.selectedQueryBuilderScolumnList.scolumnname,\r\n                                                                //     label: this.state.selectedRecord.nquerybuilderviewscode !== undefined ?\r\n                                                                //         this.state.selectedRecord.nquerybuilderviewscode.label : this.props.Login.masterData.selectedQueryBuilderScolumnList.scolumnname\r\n                                                                // }}\r\n                                                                value={this.state && this.state.selectedLstSampleField && this.state.selectedLstSampleField}\r\n                                                                isMandatory={false}\r\n                                                                isMulti={false}\r\n                                                                isClearable={false}\r\n                                                                isSearchable={true}\r\n                                                                isDisabled={false}\r\n                                                                closeMenuOnSelect={true}\r\n                                                                className=\"mb-2\"\r\n                                                                onChange={(event) => this.onComboChange(event, 'indexFieldKey')}\r\n                                                            />\r\n                                                        </Col> : \"\"}\r\n                                                </Row>\r\n                                            </Col>\r\n                                        </Row>\r\n                                    </Affix>\r\n                                </Col>\r\n                            </Row>\r\n                            {this.state.data ?\r\n                                <DataGrid\r\n                                    primaryKeyField={primaryKeyField}\r\n                                    data={this.state.data.listofItem}\r\n                                    dataResult={this.state.dataResult}\r\n                                    dataState={this.state.dataState}\r\n                                    dataStateChange={this.dataStateChange}\r\n                                    extractedColumnList={this.extractedColumnList}\r\n                                    languagesRecord={this.props.fetchById}\r\n                                    reloadData={this.reloadData}\r\n                                    controlMap={this.state.controlMap}\r\n                                    userRoleControlRights={this.state.userRoleControlRights}\r\n                                    inputParam={this.props.Login.inputParam}\r\n                                    userInfo={this.props.Login.userInfo}\r\n                                    languagesParam={languagesParam}\r\n                                    methodUrl=\"Language\"\r\n                                    pageable={true}\r\n                                    isActionRequired={true}\r\n                                    isToolBarRequired={true}\r\n                                    isDownloadPDFRequired={true}\r\n                                    isDownloadExcelRequired={true}\r\n                                    gridHeight={'465px'}\r\n                                    scrollable={\"scrollable\"}\r\n                                    selectedId={this.props.Login.selectedId}\r\n                                />\r\n                                : \"\"}\r\n                        </ListWrapper>\r\n                    </Col>\r\n                </Row>\r\n                {this.props.Login.openModal ?\r\n                    <SlideOutModal\r\n                        onSaveClick={this.onSaveClick}\r\n                        operation={this.props.Login.operation}\r\n                        screenName={this.props.Login.inputParam.displayName}\r\n                        closeModal={this.handleClose}\r\n                        show={this.props.Login.openModal}\r\n                        showSaveContinue={false}\r\n                        hideSave={this.state.showSynonym}\r\n                        inputParam={this.props.Login.inputParam}\r\n                        esign={this.props.Login.loadEsign}\r\n                        validateEsign={this.validateEsign}\r\n                        selectedRecord={this.state.selectedRecord}\r\n                        mandatoryFields={this.mandatoryFields}\r\n                        addComponent={this.props.Login.loadEsign ?\r\n                            <Esign operation={this.props.Login.operation ? this.props.Login.operation : ''}\r\n                                onInputOnChange={this.onInputOnChange}\r\n                                inputParam={this.props.Login.inputParam}\r\n                                selectedRecord={this.state.selectedRecord || {}}\r\n                            />\r\n                            :\r\n                            <AddLanguageSynonym\r\n                                selectedFieldRecord={this.state.selectedRecord}\r\n                                needheader={(this.props.Login.masterData.selectedmultilingualmasters || this.props.Login.masterData.sneedheader)}\r\n                                onInputOnChange={this.onInputOnChange}\r\n                                selectedJsondata={(this.props.Login.masterData.headername === \"Query Builder Views Columns\" || this.props.Login.masterData.headername === \"Query Builder Table Columns\" || this.props.Login.masterData.headername === \"Dynamic Audit Table\" || this.props.Login.masterData.headername === \"Mapped Template Field Props\") ? this.props.Login.selectedRecord.sjsondata : this.props.Login.selectedRecord && this.props.Login.selectedRecord.jsondata}\r\n                                // selectedJsondata={this.props.Login.selectedRecord && this.props.Login.selectedRecord.jsondata}\r\n                                languages={this.props.Login.languageList || []}\r\n                                fieldName={this.props.Login.selectedRecord.fieldName}\r\n                            />\r\n                        } />\r\n                    : \"\"}\r\n            </>\r\n        );\r\n    }\r\n\r\n    componentDidUpdate(previousProps) {\r\n        if (this.props.Login.masterData !== previousProps.Login.masterData) {\r\n            if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\r\n                const userRoleControlRights = [];\r\n                if (this.props.Login.userRoleControlRights) {\r\n                    this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item =>\r\n                        userRoleControlRights.push(item.ncontrolcode))\r\n                }\r\n                const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode)\r\n\r\n                const multilingualmastersMap = constructOptionList(this.props.Login.masterData.multilingualmasters || [], \"nmultilingualmasterscode\",\r\n                    \"sdisplayname\", \"nsorter\", 'ascending', undefined, true);\r\n                const multilingualmasters = multilingualmastersMap.get(\"OptionList\");\r\n                this.setState({\r\n                    userRoleControlRights, controlMap, multilingualmasters: multilingualmasters, data: this.props.Login.masterData,\r\n                    dataResult: process(this.props.Login.masterData.listofItem ? this.props.Login.masterData.listofItem : [], this.state.dataState)\r\n                });\r\n            }\r\n            else {\r\n                let { dataState } = this.state;\r\n                if (this.props.Login.dataState === undefined) {\r\n                    dataState = { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 }\r\n                }\r\n                const FilterQueryMap = constructOptionList(this.props.Login.masterData.QueryBuilderViewsName || [], \"nquerybuilderviewscode\",\r\n                    \"sdisplayname\", 'nquerybuilderviewscode', 'descending', true);\r\n                const QueryBuilderViewsName = FilterQueryMap.get(\"OptionList\");\r\n                const formNameQueryMap = constructOptionList(this.props.Login.filterValue || [], \"nformcode\",\r\n                    \"sformname\", undefined, undefined, true);\r\n                const MaterialConfig = formNameQueryMap.get(\"OptionList\");\r\n\r\n                let FilterQueryColumnMap, QueryBuilderStableName, FilterColumnNameMap, QueryBuilderScolumnList, SelectedQueryBuilderStableName, SelectedQueryBuilderScolumnList;\r\n\r\n                if (this.props.Login.masterData.headername === \"Query Builder Table Columns\") {\r\n                    if (this.props.Login.masterData && this.props.Login.masterData.QueryBuilderStableName) {\r\n                        FilterQueryColumnMap = constructOptionList(this.props.Login.masterData.QueryBuilderStableName || [], \"nquerybuildertablecode\",\r\n                            \"stablename\", 'nquerybuildertablecode', 'ascending', true);\r\n                        QueryBuilderStableName = FilterQueryColumnMap.get(\"OptionList\");\r\n                    }\r\n                    if (this.props.Login.masterData && this.props.Login.masterData.SelectedQueryBuilderStableName) {\r\n                        const FilterSelectedQueryColumnMap = constructOptionList(this.props.Login.masterData.SelectedQueryBuilderStableName || [], \"nquerybuildertablecode\",\r\n                            \"stablename\", undefined, undefined, true);\r\n                        SelectedQueryBuilderStableName = FilterSelectedQueryColumnMap.get(\"OptionList\");\r\n                    }\r\n                    if (this.props.Login.masterData && this.props.Login.masterData.QueryBuilderScolumnList) {\r\n                        FilterColumnNameMap = constructOptionList(this.props.Login.masterData.QueryBuilderScolumnList || [], \"scolumnname\",\r\n                            \"scolumnname\", 'ordinal_position', 'descending', true);\r\n                        QueryBuilderScolumnList = FilterColumnNameMap.get(\"OptionList\");\r\n                    }\r\n                    if (this.props.Login.masterData && this.props.Login.masterData.selectedQueryBuilderScolumnList) {\r\n                        const FilterSelectedColumnNameMap = constructOptionList(this.props.Login.masterData.selectedQueryBuilderScolumnList || [], \"scolumnname\",\r\n                            \"scolumnname\", undefined, undefined, true);\r\n                        SelectedQueryBuilderScolumnList = FilterSelectedColumnNameMap.get(\"OptionList\");\r\n                    }\r\n                }\r\n\r\n                let formName, lstFormName, DynamicAuditTableStableName, lstDynamicAuditTableStableName, selectedFormName, selectedLstFormName, selectedDynamicAuditTableStableName, selectedLstDynamicAuditTableStableName;\r\n\r\n                if (this.props.Login.masterData.headername === \"Dynamic Audit Table\") {\r\n                    if (this.props.Login.masterData && this.props.Login.masterData.lstFormName) {\r\n                        formName = constructOptionList(this.props.Login.masterData.lstFormName || [], \"nformcode\",\r\n                            \"sformname\", 'nformcode', 'ascending', true);\r\n                        lstFormName = formName.get(\"OptionList\");\r\n                    }\r\n                    if (this.props.Login.masterData && this.props.Login.masterData.lstDynamicAuditTable) {\r\n                        DynamicAuditTableStableName = constructOptionList(this.props.Login.masterData.lstDynamicAuditTable || [], \"ndynamicaudittablecode\",\r\n                            \"stablename\", 'ndynamicaudittablecode', 'descending', true);\r\n                        lstDynamicAuditTableStableName = DynamicAuditTableStableName.get(\"OptionList\");\r\n                    }\r\n                    if (this.props.Login.masterData && this.props.Login.masterData.SelectedFormName) {\r\n                        selectedFormName = constructOptionList(this.props.Login.masterData.SelectedFormName || [], \"nformcode\",\r\n                            \"sformname\", undefined, undefined, true);\r\n                        selectedLstFormName = selectedFormName.get(\"OptionList\");\r\n                    }\r\n                    if (this.props.Login.masterData && this.props.Login.masterData.selectedDynamicAuditTable) {\r\n                        selectedDynamicAuditTableStableName = constructOptionList(this.props.Login.masterData.selectedDynamicAuditTable || [], \"ndynamicaudittablecode\",\r\n                            \"stablename\", undefined, undefined, true);\r\n                        selectedLstDynamicAuditTableStableName = selectedDynamicAuditTableStableName.get(\"OptionList\");\r\n                    }\r\n                }\r\n\r\n                let lstQualisForms, selectedLstQualisForms, qualisForms, selectedQualisForms, lstSampleItems, selectedLstSampleItems,\r\n                    sampleItems, selectedSampleItems, mappedTemplateFieldProps, selectedMappedTemplateFieldProps, lstMappedTemplateFieldProps,\r\n                    selectedLstMappedTemplateFieldProps, lstSampleField, selectedLstSampleField, sampleField, selectedSampleField;\r\n\r\n                if (this.props.Login.masterData.headername === \"Mapped Template Field Props\") {\r\n                    if (this.props.Login.masterData && this.props.Login.masterData.lstMappedTemplateFieldProps) {\r\n                        mappedTemplateFieldProps = constructOptionList(this.props.Login.masterData.lstMappedTemplateFieldProps || [], \"nmappedtemplatefieldpropcode\",\r\n                            \"sregtemplatename\", undefined, undefined, true);\r\n                        lstMappedTemplateFieldProps = mappedTemplateFieldProps.get(\"OptionList\");\r\n                    }\r\n                    if (this.props.Login.masterData && this.props.Login.masterData.selectedLstMappedTemplateFieldProps) {\r\n                        selectedMappedTemplateFieldProps = constructOptionList(this.props.Login.masterData.selectedLstMappedTemplateFieldProps || [], \"nmappedtemplatefieldpropcode\",\r\n                            \"sregtemplatename\", undefined, undefined, true);\r\n                        selectedLstMappedTemplateFieldProps = selectedMappedTemplateFieldProps.get(\"OptionList\");\r\n                    }\r\n                    if (this.props.Login.masterData && this.props.Login.masterData.lstQualisforms) {\r\n                        qualisForms = constructOptionList(this.props.Login.masterData.lstQualisforms || [], \"indexQualisforms\",\r\n                            \"sformname\", undefined, undefined, true);\r\n                        lstQualisForms = qualisForms.get(\"OptionList\");\r\n                    }\r\n                    if (this.props.Login.masterData && this.props.Login.masterData.selectedLstQualisforms) {\r\n                        selectedQualisForms = constructOptionList(this.props.Login.masterData.selectedLstQualisforms || [], \"indexQualisforms\",\r\n                            \"sformname\", undefined, undefined, true);\r\n                        selectedLstQualisForms = selectedQualisForms.get(\"OptionList\");\r\n                    }\r\n                    if (this.props.Login.masterData && this.props.Login.masterData.lstSampleItems) {\r\n                        sampleItems = constructOptionList(this.props.Login.masterData.lstSampleItems || [], \"indexPropertiesKey\",\r\n                            \"indexPropertiesValue\", undefined, undefined, true);\r\n                        lstSampleItems = sampleItems.get(\"OptionList\");\r\n                    }\r\n                    if (this.props.Login.masterData && this.props.Login.masterData.selectedLstSampleItems) {\r\n                        selectedSampleItems = constructOptionList(this.props.Login.masterData.selectedLstSampleItems || [], \"indexPropertiesKey\",\r\n                            \"indexPropertiesValue\", undefined, undefined, true);\r\n                        selectedLstSampleItems = selectedSampleItems.get(\"OptionList\");\r\n                    }\r\n                    if (this.props.Login.masterData && this.props.Login.masterData.lstSampleField) {\r\n                        sampleField = constructOptionList(this.props.Login.masterData.lstSampleField || [], \"indexFieldKey\",\r\n                            \"indexFieldValue\", undefined, undefined, true);\r\n                        lstSampleField = sampleField.get(\"OptionList\");\r\n                    }\r\n                    if (this.props.Login.masterData && this.props.Login.masterData.selectedLstSampleField) {\r\n                        selectedSampleField = constructOptionList(this.props.Login.masterData.selectedLstSampleField || [], \"indexFieldKey\",\r\n                            \"indexFieldValue\", undefined, undefined, true);\r\n                        selectedLstSampleField = selectedSampleField.get(\"OptionList\");\r\n                    }\r\n                }\r\n                this.setState({\r\n                    data: this.props.Login.masterData,\r\n                    QueryBuilderViewsName: QueryBuilderViewsName,\r\n                    QueryBuilderStableName: QueryBuilderStableName ? QueryBuilderStableName : this.state.QueryBuilderStableName,\r\n                    SelectedQueryBuilderStableName: SelectedQueryBuilderStableName ? SelectedQueryBuilderStableName : this.state.SelectedQueryBuilderStableName,\r\n                    QueryBuilderScolumnList: QueryBuilderScolumnList ? QueryBuilderScolumnList : this.state.QueryBuilderScolumnList,\r\n                    SelectedQueryBuilderScolumnList: SelectedQueryBuilderScolumnList ? SelectedQueryBuilderScolumnList : this.state.SelectedQueryBuilderScolumnList,\r\n                    lstFormName: lstFormName ? lstFormName : this.state.lstFormName,\r\n                    lstDynamicAuditTableStableName: lstDynamicAuditTableStableName ? lstDynamicAuditTableStableName : this.state.lstDynamicAuditTableStableName,\r\n                    selectedLstFormName: selectedLstFormName ? selectedLstFormName : this.state.selectedLstFormName,\r\n                    selectedLstDynamicAuditTableStableName: selectedLstDynamicAuditTableStableName ? selectedLstDynamicAuditTableStableName : this.state.selectedLstDynamicAuditTableStableName,\r\n                    lstQualisForms: lstQualisForms ? lstQualisForms : this.state.lstQualisForms,\r\n                    selectedLstQualisForms: selectedLstQualisForms ? selectedLstQualisForms : this.state.selectedLstQualisForms,\r\n                    lstSampleItems: lstSampleItems ? lstSampleItems : this.state.lstSampleItems,\r\n                    selectedLstSampleItems: selectedLstSampleItems ? selectedLstSampleItems : this.state.selectedLstSampleItems,\r\n                    lstMappedTemplateFieldProps: lstMappedTemplateFieldProps ? lstMappedTemplateFieldProps : this.state.lstMappedTemplateFieldProps,\r\n                    selectedLstMappedTemplateFieldProps: selectedLstMappedTemplateFieldProps ? selectedLstMappedTemplateFieldProps : this.state.selectedLstMappedTemplateFieldProps,\r\n                    lstSampleField: lstSampleField ? lstSampleField : this.state.lstSampleField,\r\n                    selectedLstSampleField: selectedLstSampleField ? selectedLstSampleField : this.state.selectedLstSampleField,\r\n                    MaterialConfig: MaterialConfig,\r\n                    dataResult: process(this.props.Login.masterData.listofItem ? this.props.Login.masterData.listofItem : [], dataState),\r\n                    dataState\r\n                });\r\n            }\r\n        }\r\n        else if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\r\n            let selectedRecord;\r\n            if (this.props.Login.masterData.headername === \"Query Builder Views Columns\") {\r\n                selectedRecord = {\r\n                    ...this.props.Login.selectedRecord,\r\n                    sdefaultname: this.props.Login.selectedRecord && this.props.Login.selectedRecord.sdefaultname && this.props.Login.selectedRecord.sdefaultname,\r\n                }\r\n            } else if (this.props.Login.masterData.headername === \"Query Builder Table Columns\") {\r\n                selectedRecord = {\r\n                    ...this.props.Login.selectedRecord,\r\n                    sdefaultname: this.props.Login.selectedRecord && this.props.Login.selectedRecord.sdefaultname && this.props.Login.selectedRecord.sdefaultname,\r\n                }\r\n            }\r\n            else {\r\n                selectedRecord = {\r\n                    ...this.props.Login.selectedRecord\r\n                }\r\n            }\r\n            this.setState({ selectedRecord });\r\n        }\r\n    }\r\n\r\n\r\n    onInputOnChange = (event, name, item, fieldName) => {\r\n\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if (event.target.type === 'checkbox') {\r\n            selectedRecord[event.target.name] = event.target.checked === true ? 3 : 4;\r\n        }\r\n        else {\r\n            if (name == 'English') {\r\n                if (this.props.Login.masterData.headername === \"Query Builder Views Columns\") {\r\n                    selectedRecord['sjsondata'][fieldName] = { ...selectedRecord['sjsondata'][fieldName], [event.target.name]: event.target.value };\r\n                    selectedRecord[fieldName] = { ...selectedRecord[fieldName], [event.target.name]: event.target.value };\r\n                    selectedRecord[\"sdefaultname\"] = event.target.value == \"\" ? undefined : event.target.value;\r\n                }\r\n                else if (item == 'sactiondisplaystatus') {\r\n                    selectedRecord['sactiondisplaystatus'] = { ...selectedRecord['sactiondisplaystatus'], [event.target.name]: event.target.value };\r\n                } else if (item === 'stransdisplaystatus') {\r\n                    selectedRecord['stransdisplaystatus'] = { ...selectedRecord['stransdisplaystatus'], [event.target.name]: event.target.value }\r\n                } else {\r\n                    selectedRecord[fieldName] = { ...selectedRecord[fieldName], [event.target.name]: event.target.value };\r\n                    selectedRecord['sdefaultname'] = event.target.value == \"\" ? undefined : event.target.value;\r\n                }\r\n            } else {\r\n                if (this.props.Login.masterData.headername === \"Query Builder Views Columns\") {\r\n                    selectedRecord['sjsondata'][fieldName] = { ...selectedRecord['sjsondata'][fieldName], [event.target.name]: event.target.value };\r\n                    selectedRecord[fieldName] = { ...selectedRecord[fieldName], [event.target.name]: event.target.value };\r\n                }\r\n                else if (item == 'sactiondisplaystatus') {\r\n                    selectedRecord['sactiondisplaystatus'] = { ...selectedRecord['sactiondisplaystatus'], [event.target.name]: event.target.value };\r\n                } else if (item == 'stransdisplaystatus') {\r\n                    selectedRecord['stransdisplaystatus'] = { ...selectedRecord['stransdisplaystatus'], [event.target.name]: event.target.value }\r\n                } else {\r\n                    selectedRecord[fieldName] = { ...selectedRecord[fieldName], [event.target.name]: event.target.value };\r\n                    selectedRecord[event.target.name] = event.target.value;\r\n                }\r\n            }\r\n        }\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n\r\n    onComboChange = (comboData, fieldName) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        selectedRecord[fieldName] = comboData;\r\n        this.setState({ selectedRecord });\r\n        if (fieldName === \"nquerybuilderviewscode\") {\r\n            this.props.comboService({\r\n                inputData: {\r\n                    userinfo: this.props.Login.userInfo,\r\n                    sdisplayname: selectedRecord.nquerybuilderviewscode.item.sviewname,\r\n                    primarykey: selectedRecord.nquerybuilderviewscode.value,\r\n                    item: selectedRecord.nquerybuilderviewscode.item,\r\n                    displayname: this.props.Login.masterData,\r\n                },\r\n                masterData: this.props.Login.masterData,\r\n                userinfo: this.props.Login.userInfo,\r\n                item: selectedRecord.nquerybuilderviewscode.item,\r\n                sdisplayname: selectedRecord.nquerybuilderviewscode.label,\r\n                displayname: this.props.Login.masterData,\r\n            });\r\n        } else if (fieldName === \"nquerybuildertablecode\" || fieldName === \"scolumnname\") {\r\n            this.props.comboService({\r\n                inputData: {\r\n                    userinfo: this.props.Login.userInfo,\r\n                    sdisplayname: (fieldName === \"nquerybuildertablecode\" ? selectedRecord.nquerybuildertablecode.item.stablename :\r\n                        selectedRecord.scolumnname.item.scolumnname),\r\n                    primarykey: (fieldName === \"nquerybuildertablecode\" ? selectedRecord.nquerybuildertablecode.value :\r\n                        selectedRecord.scolumnname.value),\r\n                    item: (fieldName === \"nquerybuildertablecode\" ? selectedRecord.nquerybuildertablecode.item :\r\n                        selectedRecord.scolumnname.item),\r\n                    displayname: this.props.Login.masterData,\r\n                    selectedvalues: (fieldName === \"nquerybuildertablecode\" ? this.state.SelectedQueryBuilderScolumnList :\r\n                        this.state.SelectedQueryBuilderStableName),\r\n                    fieldName: fieldName\r\n                },\r\n                masterData: this.props.Login.masterData,\r\n                userinfo: this.props.Login.userInfo,\r\n                item: (fieldName === \"nquerybuildertablecode\" ? selectedRecord.nquerybuildertablecode.item :\r\n                    selectedRecord.scolumnname.item),\r\n                sdisplayname: (fieldName === \"nquerybuildertablecode\" ? selectedRecord.nquerybuildertablecode.label :\r\n                    selectedRecord.scolumnname.label),\r\n                displayname: this.props.Login.masterData,\r\n            })\r\n        } else if (fieldName === \"dynamicaudittableformcode\" || fieldName === \"ndynamicaudittablecode\") {\r\n            this.props.comboService({\r\n                inputData: {\r\n                    userinfo: this.props.Login.userInfo,\r\n                    sdisplayname: fieldName === \"dynamicaudittableformcode\" ? selectedRecord.dynamicaudittableformcode.item.sformname :\r\n                        selectedRecord.ndynamicaudittablecode.item.stablename,\r\n                    primarykey: fieldName === \"ndynamicaudittablecode\" ? selectedRecord.ndynamicaudittablecode.value :\r\n                        null,\r\n                    formPrimayKey: fieldName === \"dynamicaudittableformcode\" ? selectedRecord.dynamicaudittableformcode.value :\r\n                        this.state.selectedLstFormName[0].value,\r\n                    item: fieldName === \"dynamicaudittableformcode\" ? selectedRecord.dynamicaudittableformcode.item :\r\n                        selectedRecord.ndynamicaudittablecode.item,\r\n                    displayname: this.props.Login.masterData,\r\n                    fieldName: fieldName\r\n                },\r\n                masterData: this.props.Login.masterData,\r\n                userinfo: this.props.Login.userInfo,\r\n                item: fieldName === \"dynamicaudittableformcode\" ? selectedRecord.dynamicaudittableformcode.item :\r\n                    selectedRecord.ndynamicaudittablecode.item,\r\n                sdisplayname: fieldName === \"dynamicaudittableformcode\" ? selectedRecord.dynamicaudittableformcode.label :\r\n                    selectedRecord.ndynamicaudittablecode.label,\r\n                displayname: this.props.Login.masterData,\r\n            });\r\n        } else if (fieldName === \"nmappedtemplatefieldpropcode\" || fieldName === \"indexQualisforms\" || fieldName === \"indexPropertiesKey\" || fieldName === \"indexFieldKey\") {\r\n            this.props.comboService({\r\n                inputData: {\r\n                    userinfo: this.props.Login.userInfo,\r\n                    sdisplayname: fieldName === \"nmappedtemplatefieldpropcode\" ? selectedRecord.nmappedtemplatefieldpropcode.item.sregtemplatename : fieldName === \"indexQualisforms\" ? selectedRecord.indexQualisforms.item.sformname : fieldName === \"indexQualisforms\" ? selectedRecord.indexFieldKey.item.indexFieldValue : selectedRecord.indexPropertiesKey.item.indexValue,\r\n                    primarykey: fieldName === \"nmappedtemplatefieldpropcode\" ? selectedRecord.nmappedtemplatefieldpropcode.value : fieldName === \"indexQualisforms\" ? selectedRecord.indexQualisforms.value : fieldName === \"indexFieldKey\" ? selectedRecord.indexFieldKey.value : selectedRecord.indexPropertiesKey.value,\r\n                    item: fieldName === \"nmappedtemplatefieldpropcode\" ? selectedRecord.nmappedtemplatefieldpropcode.item : fieldName === \"indexQualisforms\" ? selectedRecord.indexQualisforms.item : fieldName === \"indexFieldKey\" ? selectedRecord.indexFieldKey.item : selectedRecord.indexPropertiesKey.item,\r\n                    displayname: this.props.Login.masterData,\r\n                    fieldName: fieldName\r\n                },\r\n                masterData: this.props.Login.masterData,\r\n                userinfo: this.props.Login.userInfo,\r\n                item: fieldName === \"nmappedtemplatefieldpropcode\" ? selectedRecord.nmappedtemplatefieldpropcode.item : fieldName === \"indexQualisforms\" ? selectedRecord.indexQualisforms.item : fieldName === \"indexFieldKey\" ? selectedRecord.indexFieldKey.item : selectedRecord.indexPropertiesKey.item,\r\n                sdisplayname: fieldName === \"nmappedtemplatefieldpropcode\" ? selectedRecord.nmappedtemplatefieldpropcode.label : fieldName === \"indexQualisforms\" ? selectedRecord.indexQualisforms.label : fieldName === \"indexFieldKey\" ? selectedRecord.indexFieldKey.label : selectedRecord.indexPropertiesKey.label,\r\n                displayname: this.props.Login.masterData,\r\n            });\r\n        }\r\n        else {\r\n            if (fieldName === \"nmultilingualmasterscode\") {\r\n                this.props.comboService({\r\n                    inputData: {\r\n                        userinfo: this.props.Login.userInfo,\r\n                        sdisplayname: selectedRecord.nmultilingualmasterscode.label,\r\n                        primarykey: selectedRecord.nmultilingualmasterscode.value,\r\n                        item: selectedRecord.nmultilingualmasterscode.item,\r\n                        displayname: this.props.Login.masterData\r\n                    },\r\n                    masterData: {\r\n                        ...this.props.Login.masterData,\r\n                        headername: {}\r\n                    },\r\n                    userinfo: this.props.Login.userInfo,\r\n                    displayname: this.props.Login.masterData,\r\n                    item: selectedRecord.nmultilingualmasterscode.item,\r\n                    sdisplayname: selectedRecord.nmultilingualmasterscode.label,\r\n\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    handleClose() {\r\n        let loadEsign = this.props.Login.loadEsign;\r\n        let openModal = this.props.Login.openModal;\r\n        let selectedRecord = this.props.Login.selectedRecord;\r\n        let selectedId = this.props.Login.selectedId;\r\n        if (this.state.showSynonym) {\r\n            this.setState({ showSynonym: false })\r\n            return null;\r\n        }\r\n        if (this.props.Login.loadEsign) {\r\n            loadEsign = false;\r\n            //openModal = false;\r\n        }\r\n        else {\r\n            openModal = false;\r\n            selectedRecord = { ...this.props.Login.selectedRecord };\r\n            selectedId = null;\r\n        }\r\n\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { openModal, loadEsign, selectedRecord, selectedId }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    };\r\n\r\n    //to open side out\r\n    //to perform save action for both add and edit\r\n    onSaveClick = (saveType, formRef) => {\r\n        let inputData = {};\r\n        let selectedId = null;\r\n        let methodUrl = \"\";\r\n        inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n        let dataState = undefined;\r\n        if (this.state.showSynonym) {\r\n            this.setState({ showSynonym: false })\r\n            return null;\r\n        }\r\n        if (this.props.Login.operation === \"update\") {\r\n            // edit\r\n            if (this.props.Login.masterData.headername === \"Menu\") {\r\n                selectedId = this.props.Login.selectedId;\r\n                dataState = this.state.dataState\r\n                inputData[\"language\"] = {\r\n                    \"nmenucode\": this.state.selectedRecord.nmenucode,\r\n                    \"jsondata\": {\r\n                        \"sdisplayname\": this.state.selectedRecord.sdisplayname\r\n                    }\r\n                }\r\n                methodUrl = \"MenuLanguage\"\r\n            } else if (this.props.Login.masterData.headername === \"Module\") {\r\n                selectedId = this.props.Login.selectedId;\r\n                dataState = this.state.dataState\r\n                inputData[\"language\"] = {\r\n                    \"nmodulecode\": this.state.selectedRecord.nmodulecode,\r\n                    \"jsondata\": {\r\n                        \"sdisplayname\": this.state.selectedRecord.sdisplayname\r\n                    }\r\n                }\r\n                methodUrl = \"ModuleLanguage\"\r\n            } else if (this.props.Login.masterData.headername === \"Forms\") {\r\n                dataState = this.state.dataState\r\n                selectedId = this.props.Login.selectedId;\r\n                inputData[\"language\"] = {\r\n                    \"nformcode\": this.state.selectedRecord.nformcode,\r\n                    \"jsondata\": {\r\n                        \"sdisplayname\": this.state.selectedRecord.sdisplayname\r\n                    }\r\n                }\r\n                methodUrl = \"FormLanguage\"\r\n            } else if (this.props.Login.masterData.headername === \"Transaction Status\") {\r\n                dataState = this.state.dataState\r\n                selectedId = this.props.Login.selectedId;\r\n                inputData[\"language\"] = {\r\n                    \"ntranscode\": this.state.selectedRecord.ntranscode,\r\n                    \"jsondata\": {\r\n                        \"salertdisplaystatus\": this.state.selectedRecord.salertdisplaystatus,\r\n                        \"stransdisplaystatus\": this.state.selectedRecord.stransdisplaystatus,\r\n                        \"sactiondisplaystatus\": this.state.selectedRecord.sactiondisplaystatus\r\n                    }\r\n                }\r\n                methodUrl = \"TransactionStatusLanguage\"\r\n            } else if (this.props.Login.masterData.headername === \"Control Master\") {\r\n                dataState = this.state.dataState\r\n                selectedId = this.props.Login.selectedId;\r\n                inputData[\"language\"] = {\r\n                    \"ncontrolcode\": this.state.selectedRecord.ncontrolcode,\r\n                    \"nformcode\": this.state.selectedRecord.nformcode,\r\n                    \"jsondata\": {\r\n                        \"scontrolids\": this.state.selectedRecord.scontrolids\r\n                    }\r\n                }\r\n                methodUrl = \"ControlMasterLanguage\"\r\n            } else if (this.props.Login.masterData.headername === \"Approval Sub Type\") {\r\n                dataState = this.state.dataState\r\n                selectedId = this.props.Login.selectedId;\r\n                inputData[\"language\"] = {\r\n                    \"napprovalsubtypecode\": this.state.selectedRecord.napprovalsubtypecode,\r\n                    \"jsondata\": {\r\n                        \"approvalsubtypename\": this.state.selectedRecord.approvalsubtypename\r\n                    }\r\n                }\r\n                methodUrl = \"ApprovalSubTypeLanguage\"\r\n            } else if (this.props.Login.masterData.headername === \"Sample Type\") {\r\n                dataState = this.state.dataState\r\n                selectedId = this.props.Login.selectedId;\r\n                inputData[\"language\"] = {\r\n                    \"nsampletypecode\": this.state.selectedRecord.nsampletypecode,\r\n                    \"jsondata\": {\r\n                        \"sampletypename\": this.state.selectedRecord.sampletypename\r\n                    }\r\n                }\r\n                methodUrl = \"SampleTypeLanguage\"\r\n            }\r\n            // else if (this.props.Login.masterData.headername === \"Template Design\") {\r\n            //     dataState = this.state.dataState\r\n            //     selectedId = this.props.Login.selectedId;\r\n            //     inputData[\"language\"] = {\r\n            //         \"ntemplatetypecode\": this.state.selectedRecord.ntemplatetypecode,\r\n            //         \"jsondata\": {\r\n            //             \"stemplatetypename\": this.state.selectedRecord.stemplatetypename\r\n            //         }\r\n            //     }\r\n            //     methodUrl = \"TemplateTypeLanguage\"\r\n            // } \r\n            else if (this.props.Login.masterData.headername === \"Period\") {\r\n                dataState = this.state.dataState\r\n                selectedId = this.props.Login.selectedId;\r\n                inputData[\"language\"] = {\r\n                    \"nperiodcode\": this.state.selectedRecord.nperiodcode,\r\n                    \"jsondata\": {\r\n                        \"speriodname\": this.state.selectedRecord.speriodname\r\n                    }\r\n                }\r\n                methodUrl = \"PeriodLanguage\"\r\n            } else if (this.props.Login.masterData.headername === \"Gender\") {\r\n                dataState = this.state.dataState\r\n                selectedId = this.props.Login.selectedId;\r\n                inputData[\"language\"] = {\r\n                    \"ngendercode\": this.state.selectedRecord.ngendercode,\r\n                    \"jsondata\": {\r\n                        \"sgendername\": this.state.selectedRecord.sgendername\r\n                    }\r\n                }\r\n                methodUrl = \"GenderLanguage\"\r\n            } else if (this.props.Login.masterData.headername === \"Grade\") {\r\n                dataState = this.state.dataState\r\n                selectedId = this.props.Login.selectedId;\r\n                inputData[\"language\"] = {\r\n                    \"ngradecode\": this.state.selectedRecord.ngradecode,\r\n                    \"jsondata\": {\r\n                        \"sdisplayname\": this.state.selectedRecord.sdisplayname\r\n                    }\r\n                }\r\n                methodUrl = \"GradeLanguage\"\r\n            } else if (this.props.Login.masterData.headername === \"Scheduler Type\") {\r\n                dataState = this.state.dataState\r\n                selectedId = this.props.Login.selectedId;\r\n                inputData[\"language\"] = {\r\n                    \"nschedulertypecode\": this.state.selectedRecord.nschedulertypecode,\r\n                    \"jsondata\": {\r\n                        \"sschedulertypename\": this.state.selectedRecord.sschedulertypename\r\n                    }\r\n                }\r\n                methodUrl = \"SchedulerTypeLanguage\"\r\n            } else if (this.props.Login.masterData.headername === \"Query Builder Tables\") {\r\n                dataState = this.state.dataState\r\n                selectedId = this.props.Login.selectedId;\r\n                inputData[\"language\"] = {\r\n                    \"nquerybuildertablecode\": this.state.selectedRecord.nquerybuildertablecode,\r\n                    \"jsondata\": {\r\n                        \"tablename\": this.state.selectedRecord.tablename\r\n                    }\r\n                }\r\n                methodUrl = \"QueryBuilderTablesLanguage\"\r\n            } else if (this.props.Login.masterData.headername === \"Query Builder Views\") {\r\n                dataState = this.state.dataState\r\n                selectedId = this.props.Login.selectedId;\r\n                inputData[\"language\"] = {\r\n                    \"nquerybuilderviewscode\": this.state.selectedRecord.nquerybuilderviewscode,\r\n                    \"jsondata\": {\r\n                        \"displayname\": this.state.selectedRecord.displayname\r\n                    }\r\n                }\r\n                methodUrl = \"QueryBuilderViewsLanguage\"\r\n            } else if (this.props.Login.masterData.headername === \"Multilingual Masters\") {\r\n                dataState = this.state.dataState\r\n                selectedId = this.props.Login.selectedId;\r\n                inputData[\"language\"] = {\r\n                    \"nmultilingualmasterscode\": this.state.selectedRecord.nmultilingualmasterscode,\r\n                    \"jsondata\": {\r\n                        \"sdisplayname\": this.state.selectedRecord.sdisplayname\r\n                    }\r\n                }\r\n                methodUrl = \"MultilingualMastersLanguage\"\r\n            } else if (this.props.Login.masterData.headername === \"Query Builder Views Columns\") {\r\n                dataState = this.state.dataState\r\n                selectedId = this.props.Login.selectedId;\r\n                let replaceValue = this.state.selectedRecord.sjsondata.displayname;\r\n                delete (this.state.selectedRecord.sdefaultname);\r\n                let getIndexValue;\r\n                inputData[\"findIndex\"] = this.props.Login.selectedRecord.findIndex;\r\n                inputData[\"keyvalue\"] = this.props.Login.selectedRecord.keys;\r\n                inputData.keyvalue === \"conditionfields\" ?\r\n                    getIndexValue = inputData.findIndex - this.props.Login.selectedRecord.selectfields.length :\r\n                    getIndexValue = inputData.findIndex\r\n                inputData[\"jsondata\"] = {\r\n                    // \"sjsondata\":\r\n                    //     { ...this.state.selectedRecord.sjsondata },\r\n                    // \"sviewname\": this.props.Login.selectedRecord.sviewname\r\n                    \"sjsondata\": {\r\n                        ...this.props.Login.selectedRecord.jsondata,\r\n                        ...this.props.Login.selectedRecord.jsondata[this.props.Login.selectedRecord.keys][getIndexValue].displayname = replaceValue\r\n                    },\r\n                    \"sviewname\": this.props.Login.selectedRecord.sviewname\r\n                }\r\n                delete (inputData[\"jsondata\"].sjsondata[\"en-US\"]);\r\n                delete (inputData[\"jsondata\"].sjsondata[\"ru-RU\"]);\r\n                delete (inputData[\"jsondata\"].sjsondata[\"tg-TG\"])\r\n                methodUrl = \"QueryBuilderViewsColumnsLanguage\"\r\n            } else if (this.props.Login.masterData.headername === \"Material Type\") {\r\n                dataState = this.state.dataState\r\n                selectedId = this.props.Login.selectedId;\r\n                inputData[\"language\"] = {\r\n                    \"nmaterialtypecode\": this.state.selectedRecord.nmaterialtypecode,\r\n                    \"jsondata\": {\r\n                        \"smaterialtypename\": this.state.selectedRecord.smaterialtypename\r\n                    }\r\n                }\r\n                methodUrl = \"MaterialTypeLanguage\"\r\n            }\r\n            else if (this.props.Login.masterData.headername === \"Interface Type\") {\r\n                dataState = this.state.dataState\r\n                selectedId = this.props.Login.selectedId;\r\n                inputData[\"language\"] = {\r\n                    \"ninterfacetypecode\": this.state.selectedRecord.ninterfacetypecode,\r\n                    \"jsondata\": {\r\n                        \"sinterfacetypename\": this.state.selectedRecord.sinterfacetypename\r\n                    }\r\n                }\r\n                methodUrl = \"InterfaceTypeLanguage\"\r\n            } else if (this.props.Login.masterData.headername === \"Audit Action Filter\") {\r\n                dataState = this.state.dataState\r\n                selectedId = this.props.Login.selectedId;\r\n                inputData[\"language\"] = {\r\n                    \"nauditactionfiltercode\": this.state.selectedRecord.nauditactionfiltercode,\r\n                    \"jsondata\": {\r\n                        \"sdisplayname\": this.state.selectedRecord.sdisplayname\r\n                    }\r\n                }\r\n                methodUrl = \"AuditActionFilterLanguage\"\r\n            }\r\n            else if (this.props.Login.masterData.headername === \"Attachment Type\") {\r\n                dataState = this.state.dataState\r\n                selectedId = this.props.Login.selectedId;\r\n                inputData[\"language\"] = {\r\n                    \"nattachmenttypecode\": this.state.selectedRecord.nattachmenttypecode,\r\n                    \"jsondata\": {\r\n                        \"sattachmenttype\": this.state.selectedRecord.sattachmenttype\r\n                    }\r\n                }\r\n                methodUrl = \"AttachmentTypeLanguage\"\r\n            }\r\n            else if (this.props.Login.masterData.headername === \"FTP Type\") {\r\n                dataState = this.state.dataState\r\n                selectedId = this.props.Login.selectedId;\r\n                inputData[\"language\"] = {\r\n                    \"nftptypecode\": this.state.selectedRecord.nftptypecode,\r\n                    \"jsondata\": {\r\n                        \"sftptypename\": this.state.selectedRecord.sftptypename\r\n                    }\r\n                }\r\n                methodUrl = \"FTPTypeLanguage\"\r\n            }\r\n            else if (this.props.Login.masterData.headername === \"Report Type\") {\r\n                dataState = this.state.dataState\r\n                selectedId = this.props.Login.selectedId;\r\n                inputData[\"language\"] = {\r\n                    \"nreporttypecode\": this.state.selectedRecord.nreporttypecode,\r\n                    \"jsondata\": {\r\n                        \"sdisplayname\": this.state.selectedRecord.sdisplayname\r\n                    }\r\n                }\r\n                methodUrl = \"ReportTypeLanguage\"\r\n            }\r\n            else if (this.props.Login.masterData.headername === \"COAReport Type\") {\r\n                dataState = this.state.dataState\r\n                selectedId = this.props.Login.selectedId;\r\n                inputData[\"language\"] = {\r\n                    \"ncoareporttypecode\": this.state.selectedRecord.ncoareporttypecode,\r\n                    \"jsondata\": {\r\n                        \"sdisplayname\": this.state.selectedRecord.sdisplayname\r\n                    }\r\n                }\r\n                methodUrl = \"COAReportTypeLanguage\"\r\n            }\r\n            else if (this.props.Login.masterData.headername === \"React Components\") {\r\n                dataState = this.state.dataState\r\n                selectedId = this.props.Login.selectedId;\r\n                inputData[\"language\"] = {\r\n                    \"nreactcomponentcode\": this.state.selectedRecord.nreactcomponentcode,\r\n                    \"jsondata\": {\r\n                        \"componentname\": this.state.selectedRecord.componentname\r\n                    }\r\n                }\r\n                methodUrl = \"ReactComponentsLanguage\"\r\n            } else if (this.props.Login.masterData.headername === \"Functions\") {\r\n                dataState = this.state.dataState\r\n                selectedId = this.props.Login.selectedId;\r\n                inputData[\"language\"] = {\r\n                    \"nfunctioncode\": this.state.selectedRecord.nfunctioncode,\r\n                    \"jsondata\": {\r\n                        \"sdisplayname\": this.state.selectedRecord.sdisplayname\r\n                    }\r\n                }\r\n                methodUrl = \"FunctionsLanguage\"\r\n            } else if (this.props.Login.masterData.headername === \"Dynamic Formula Fields\") {\r\n                dataState = this.state.dataState\r\n                selectedId = this.props.Login.selectedId;\r\n                inputData[\"language\"] = {\r\n                    \"ndynamicformulafieldcode\": this.state.selectedRecord.ndynamicformulafieldcode,\r\n                    \"jsondata\": {\r\n                        \"sdisplayname\": this.state.selectedRecord.sdisplayname\r\n                    }\r\n                }\r\n                methodUrl = \"DynamicFormulaFieldLanguage\"\r\n            } else if (this.props.Login.masterData.headername === \"Chart Type\") {\r\n                dataState = this.state.dataState\r\n                selectedId = this.props.Login.selectedId;\r\n                inputData[\"language\"] = {\r\n                    \"ncharttypecode\": this.state.selectedRecord.ncharttypecode,\r\n                    \"jsondata\": {\r\n                        \"sdisplayname\": this.state.selectedRecord.sdisplayname\r\n                    }\r\n                }\r\n                methodUrl = \"ChartTypeLanguage\"\r\n            } else if (this.props.Login.masterData.headername === \"Design Components\") {\r\n                dataState = this.state.dataState\r\n                selectedId = this.props.Login.selectedId;\r\n                inputData[\"language\"] = {\r\n                    \"ndesigncomponentcode\": this.state.selectedRecord.ndesigncomponentcode,\r\n                    \"jsondata\": {\r\n                        \"sdisplayname\": this.state.selectedRecord.sdisplayname\r\n                    }\r\n                }\r\n                methodUrl = \"DesignComponentLanguage\"\r\n            } else if (this.props.Login.masterData.headername === \"CheckList Component\") {\r\n                dataState = this.state.dataState\r\n                selectedId = this.props.Login.selectedId;\r\n                inputData[\"language\"] = {\r\n                    \"nchecklistcomponentcode\": this.state.selectedRecord.nchecklistcomponentcode,\r\n                    \"jsondata\": {\r\n                        \"sdisplayname\": this.state.selectedRecord.sdisplayname\r\n                    }\r\n                }\r\n                methodUrl = \"CheckListComponentLanguage\"\r\n            } else if (this.props.Login.masterData.headername === \"Generic Label\") {\r\n                dataState = this.state.dataState\r\n                selectedId = this.props.Login.selectedId;\r\n                inputData[\"language\"] = {\r\n                    \"ngenericlabelcode\": this.state.selectedRecord.ngenericlabelcode,\r\n                    \"jsondata\": {\r\n                        \"sdisplayname\": this.state.selectedRecord.sdisplayname\r\n                    }\r\n                }\r\n                methodUrl = \"GenericLabelLanguage\"\r\n            }\r\n            else if (this.props.Login.masterData.headername === \"Query Builder Table Columns\") {\r\n                dataState = this.state.dataState\r\n                selectedId = this.props.Login.selectedId;\r\n                let jsondata = JSON.parse(this.state.SelectedQueryBuilderStableName[0].item[this.state.SelectedQueryBuilderScolumnList[0].label].value);\r\n                if (this.state.selectedRecord.columnname === jsondata[this.state.selectedRecord.index].columnname) {\r\n                    jsondata[this.state.selectedRecord.index].displayname = this.state.selectedRecord.displayname;\r\n                }\r\n                inputData[\"language\"] = {\r\n                    \"nquerybuildertablecode\": this.state.SelectedQueryBuilderStableName[0].value,\r\n                    \"tablecolumnname\": this.state.SelectedQueryBuilderScolumnList[0].label,\r\n                    \"scolumnname\": this.state.selectedRecord.sjsondata.columnname,\r\n                    \"displayname\": this.state.selectedRecord.displayname,\r\n                    \"jsondata\": JSON.stringify(jsondata)\r\n                }\r\n                methodUrl = \"QueryBuilderTableColumnsLanguage\"\r\n            } else if (this.props.Login.masterData.headername === \"Dynamic Audit Table\") {\r\n                dataState = this.state.dataState\r\n                selectedId = this.props.Login.selectedId;\r\n                let subsampleenabledisable = this.state.selectedRecord.sfieldname;\r\n                let jsondata = this.state.selectedRecord.jsondata;\r\n                let index = this.state.selectedRecord.index;\r\n                jsondata[subsampleenabledisable].multilingualfields[index][this.state.selectedRecord.fieldName] = this.state.selectedRecord[this.state.selectedRecord.fieldName];\r\n                inputData[\"language\"] = {\r\n                    \"ndynamicaudittablecode\": this.state.selectedLstDynamicAuditTableStableName[0].value,\r\n                    \"subsampleenabledisable\": subsampleenabledisable,\r\n                    \"keyname\": this.state.selectedRecord.fieldName,\r\n                    \"jsondata\": JSON.stringify(jsondata),\r\n                    \"conditioncheck\": JSON.stringify(this.state.selectedRecord.sjsondata),\r\n                    \"nformcode\": this.state.selectedRecord.nformcode\r\n                }\r\n                methodUrl = \"DynamicAuditTableLanguage\"\r\n            } else if (this.props.Login.masterData.headername === \"Mapped Template Field Props\") {\r\n                dataState = this.state.dataState\r\n                selectedId = this.props.Login.selectedId;\r\n                let fieldName = this.state.selectedRecord.fieldName;\r\n                let jsondata = this.state.selectedRecord.jsondata && this.state.selectedRecord.jsondata.value && JSON.parse(this.state.selectedRecord.jsondata.value);\r\n                let index = this.state.selectedRecord.index;\r\n                if (this.props.Login.masterData.selectedLstSampleField === undefined && this.props.Login.masterData.selectedLstQualisforms && this.props.Login.masterData.selectedLstQualisforms[0].nformcode) {\r\n                    jsondata[this.props.Login.masterData.selectedLstQualisforms[0].nformcode][this.props.Login.masterData.selectedLstSampleItems[0].indexPropertiesValue][index][fieldName] = this.state.selectedRecord[fieldName];\r\n                } else if (this.props.Login.masterData.selectedLstSampleField === undefined && this.props.Login.masterData.selectedLstQualisforms && this.props.Login.masterData.selectedLstQualisforms[0].nformcode === undefined) {\r\n                    jsondata[this.props.Login.masterData.selectedLstQualisforms[0].sformname][index][fieldName] = this.state.selectedRecord[fieldName];\r\n                } else {\r\n                    jsondata[this.props.Login.masterData.selectedLstQualisforms[0].nformcode][this.props.Login.masterData.selectedLstSampleItems[0].indexPropertiesValue][this.props.Login.masterData.selectedLstSampleField[0].indexFieldValue] !== undefined ?\r\n                        jsondata[this.props.Login.masterData.selectedLstQualisforms[0].nformcode][this.props.Login.masterData.selectedLstSampleItems[0].indexPropertiesValue][this.props.Login.masterData.selectedLstSampleField[0].indexFieldValue][index][fieldName] = this.state.selectedRecord[fieldName] :\r\n                        jsondata[this.props.Login.masterData.selectedLstQualisforms[0].nformcode][this.props.Login.masterData.selectedLstSampleItems[0].indexPropertiesValue][index][fieldName] = this.state.selectedRecord[fieldName];\r\n                }\r\n                inputData[\"language\"] = {\r\n                    \"nmappedtemplatefieldpropcode\": this.state.selectedRecord.nmappedtemplatefieldpropcode,\r\n                    \"jsondata\": JSON.stringify(jsondata),\r\n                    \"indexQualisforms\": this.props.Login.masterData.selectedLstQualisforms ? this.props.Login.masterData.selectedLstQualisforms[0].indexQualisforms : null,\r\n                    \"indexPropertiesKey\": this.props.Login.masterData.selectedLstSampleItems ? this.props.Login.masterData.selectedLstSampleItems[0].indexPropertiesKey : null,\r\n                    \"indexFieldKey\": this.props.Login.masterData.selectedLstSampleField ? this.props.Login.masterData.selectedLstSampleField[0].indexFieldKey : null,\r\n                    \"index\": index,\r\n                    \"indexPropertiesValue\": this.props.Login.masterData.selectedLstSampleItems ? this.props.Login.masterData.selectedLstSampleItems[0].indexPropertiesValue : null,\r\n                    \"indexFieldValue\": this.props.Login.masterData.selectedLstSampleField ? this.props.Login.masterData.selectedLstSampleField[0].indexFieldValue : null,\r\n                    \"sformname\": this.props.Login.masterData.selectedLstQualisforms && this.props.Login.masterData.selectedLstQualisforms[0].sformname ? this.props.Login.masterData.selectedLstQualisforms[0].sformname : null,\r\n                    \"nformcode\": this.props.Login.masterData.selectedLstQualisforms && this.props.Login.masterData.selectedLstQualisforms[0].nformcode ? this.props.Login.masterData.selectedLstQualisforms[0].nformcode : null\r\n                }\r\n                methodUrl = \"MappedTemplateFieldPropsLanguage\"\r\n            }\r\n        }\r\n        const inputParam = {\r\n            methodUrl: methodUrl,\r\n            classUrl: this.props.Login.inputParam.classUrl,\r\n            displayName: this.props.Login.inputParam.displayName,\r\n            inputData: inputData,\r\n            operation: this.props.Login.operation,\r\n            saveType, formRef, dataState, selectedId,\r\n            selectedRecord: { ...this.state.selectedRecord }\r\n        }\r\n        const masterData = this.props.Login.masterData;\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolcode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData }, saveType,\r\n                    operation: this.props.Login.operation, openModal: true,\r\n                    screenName: this.props.Login.inputParam.displayName\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.crudMaster(inputParam, masterData, \"openModal\");\r\n        }\r\n    }\r\n\r\n}\r\nexport default connect(mapStateToProps, {\r\n    callService, crudMaster, showRegTypeAddScreen, fetchById, comboService,\r\n    updateStore, validateEsignCredential\r\n})(injectIntl(Languages));"]},"metadata":{},"sourceType":"module"}