{"ast":null,"code":"import rsapi from '../rsapi';\nimport { DEFAULT_RETURN } from './LoginTypes';\nimport { sortData, constructOptionList, rearrangeDateFormat } from '../components/CommonScript';\nimport Axios from 'axios';\nimport { initRequest } from './LoginAction';\nimport { intl } from '../components/App';\nimport { toast } from 'react-toastify';\nexport function getInstrumentCombo(screenName, operation, primaryKeyName, masterData, userInfo, ncontrolCode) {\n  return function (dispatch) {\n    let urlArray = [];\n    const InstrumentCategory = rsapi.post(\"/instrumentcategory/fetchinstrumentcategory\", {\n      \"userinfo\": userInfo\n    });\n    const Supplier = rsapi.post(\"/instrument/getSupplier\", {\n      \"userinfo\": userInfo\n    });\n    const Manufacturer = rsapi.post(\"/instrument/getManufacturer\", {\n      \"userinfo\": userInfo\n    });\n    const InstrumentStatus = rsapi.post(\"/instrument/getInstrumentStatus\", {\n      \"userinfo\": userInfo\n    });\n    const Lab = rsapi.post(\"/section/getSection\", {\n      \"userinfo\": userInfo\n    });\n    const Period = rsapi.post(\"/instrument/getPeriod\", {\n      \"ncontrolcode\": ncontrolCode,\n      \"userinfo\": userInfo\n    });\n    const timeZoneService = rsapi.post(\"timezone/getTimeZone\");\n    const Instrumentdate = rsapi.post(\"/instrument/addInstrumentDate\", {\n      \"ncontrolcode\": ncontrolCode,\n      \"userinfo\": userInfo\n    });\n    const UTCtimeZoneService = rsapi.post(\"timezone/getLocalTimeByZone\", {\n      userinfo: userInfo\n    });\n\n    if (operation === \"create\") {\n      urlArray = [InstrumentCategory, Supplier, Manufacturer, InstrumentStatus, Lab, Period, timeZoneService, Instrumentdate, UTCtimeZoneService];\n    } else {\n      const InstrumentId = rsapi.post(\"/instrument/getActiveInstrumentById\", {\n        [primaryKeyName]: masterData.selectedInstrument[primaryKeyName],\n        \"userinfo\": userInfo\n      }); //const ManufacturerByID = rsapi.post(\"/manufacturer/getManufacturerById\", { [primaryKeyName] :masterData.selectedManufacturer[primaryKeyName], \"userinfo\": userInfo });\n\n      urlArray = [InstrumentCategory, Supplier, Manufacturer, InstrumentStatus, Lab, Period, timeZoneService, InstrumentId, Instrumentdate, UTCtimeZoneService];\n    }\n\n    dispatch(initRequest(true));\n    Axios.all(urlArray).then(response => {\n      let expiryDate = undefined;\n      let currentTime = undefined;\n      const instcatMap = constructOptionList(response[0].data || [], \"ninstrumentcatcode\", \"sinstrumentcatname\", undefined, undefined, false);\n      const supplierMap = constructOptionList(response[1].data.Supplier || [], \"nsuppliercode\", \"ssuppliername\", undefined, undefined, false);\n      const manufMap = constructOptionList(response[2].data.Manufacturer || [], \"nmanufcode\", \"smanufname\", undefined, undefined, false);\n      const inststatusMap = constructOptionList(response[3].data || [], \"ntranscode\", \"stransstatus\", undefined, undefined, false);\n      const sectionMap = constructOptionList(response[4].data || [], \"nsectioncode\", \"ssectionname\", undefined, undefined, false);\n      const periodMap = constructOptionList(response[5].data || [], \"nperiodcode\", \"speriodname\", undefined, undefined, false);\n      const timezoneMap = constructOptionList(response[6].data || [], \"ntimezonecode\", \"stimezoneid\", undefined, undefined, false);\n      const InstrumentCategory = instcatMap.get(\"OptionList\");\n      const Supplier = supplierMap.get(\"OptionList\");\n      const Manufacturer = manufMap.get(\"OptionList\");\n      const InstrumentStatus = inststatusMap.get(\"OptionList\");\n      const Lab = sectionMap.get(\"OptionList\");\n      const Period = periodMap.get(\"OptionList\");\n      const TimeZoneList = timezoneMap.get(\"OptionList\");\n      let selectedRecord = {\n        \"ntzmanufdate\": {\n          \"value\": userInfo.ntimezonecode,\n          \"label\": userInfo.stimezoneid\n        },\n        //\"stzmanufdate\":userInfo.stimezoneid\n        \"ntzpodate\": {\n          \"value\": userInfo.ntimezonecode,\n          \"label\": userInfo.stimezoneid\n        },\n        \"stzpodate\": userInfo.stimezoneid,\n        \"ntzreceivedate\": {\n          \"value\": userInfo.ntimezonecode,\n          \"label\": userInfo.stimezoneid\n        },\n        \"stzreceivedate\": userInfo.stimezoneid,\n        \"ntzinstallationdate\": {\n          \"value\": userInfo.ntimezonecode,\n          \"label\": userInfo.stimezoneid\n        },\n        \"stzinstallationdate\": userInfo.stimezoneid,\n        \"ntzexpirydate\": {\n          \"value\": userInfo.ntimezonecode,\n          \"label\": userInfo.stimezoneid\n        },\n        \"stzexpirydate\": userInfo.stimezoneid\n      };\n      let instrumentCategory = [];\n      let supplier = [];\n      let manufacturer = [];\n      let instrumentstatus = [];\n      let nwindowsperiodminusunit = [];\n      let nwindowsperiodplusunit = [];\n      ;\n      let lab = [];\n      let ntzmanufdate = [];\n      let ntzpodate = [];\n      let ntzreceivedate = [];\n      let ntzinstallationdate = [];\n      let ntzexpirydate = [];\n      let susername = [];\n      let service = [];\n\n      if (operation === \"create\") {\n        let date = rearrangeDateFormat(userInfo, response[8].data);\n        selectedRecord[\"dmanufacdate\"] = date; //new Date(response[8].data);\n\n        selectedRecord[\"dpodate\"] = date;\n        selectedRecord[\"dreceiveddate\"] = date;\n        selectedRecord[\"dinstallationdate\"] = date;\n        currentTime = date;\n\n        if (response[7].data[\"ExpiryDate\"] !== \"\") {\n          expiryDate = rearrangeDateFormat(userInfo, response[7].data[\"ExpiryDate\"]); //new Date(response[7].data[\"ExpiryDate\"]);\n\n          selectedRecord[\"dexpirydate\"] = expiryDate;\n        }\n      }\n\n      if (operation === \"update\") {\n        selectedRecord = response[7].data;\n        instrumentCategory.push({\n          \"value\": response[7].data[\"ninstrumentcatcode\"],\n          \"label\": response[7].data[\"sinstrumentcatname\"]\n        });\n        supplier.push({\n          \"value\": response[7].data[\"nsuppliercode\"],\n          \"label\": response[7].data[\"ssuppliername\"]\n        });\n        service.push({\n          \"value\": response[7].data[\"nservicecode\"],\n          \"label\": response[7].data[\"sserviceby\"]\n        });\n        manufacturer.push({\n          \"value\": response[7].data[\"nmanufcode\"],\n          \"label\": response[7].data[\"smanufname\"]\n        });\n        instrumentstatus.push({\n          \"value\": response[7].data[\"ntranscode\"],\n          \"label\": response[7].data[\"sactivestatus\"]\n        });\n        nwindowsperiodminusunit.push({\n          \"value\": response[7].data[\"nwindowsperiodminusunit\"],\n          \"label\": response[7].data[\"swindowsperiodminusunit\"]\n        });\n        nwindowsperiodplusunit.push({\n          \"value\": response[7].data[\"nwindowsperiodplusunit\"],\n          \"label\": response[7].data[\"swindowsperiodplusunit\"]\n        });\n        lab.push({\n          \"value\": response[7].data[\"nsectioncode\"],\n          \"label\": response[7].data[\"ssectionname\"]\n        });\n        ntzmanufdate.push({\n          \"value\": response[7].data[\"ntzmanufdate\"],\n          \"label\": response[7].data[\"stzmanufdate\"]\n        });\n        ntzpodate.push({\n          \"value\": response[7].data[\"ntzpodate\"],\n          \"label\": response[7].data[\"stzpodate\"]\n        });\n        ntzreceivedate.push({\n          \"value\": response[7].data[\"ntzreceivedate\"],\n          \"label\": response[7].data[\"stzreceivedate\"]\n        });\n        ntzinstallationdate.push({\n          \"value\": response[7].data[\"ntzinstallationdate\"],\n          \"label\": response[7].data[\"stzinstallationdate\"]\n        });\n        ntzexpirydate.push({\n          \"value\": response[7].data[\"ntzexpirydate\"],\n          \"label\": response[7].data[\"stzexpirydate\"]\n        });\n        susername.push({\n          \"value\": response[7].data[\"nusercode1\"],\n          \"label\": response[7].data[\"susername\"]\n        });\n\n        if (response[7].data[\"smanufacdate\"] !== \"\") {\n          selectedRecord[\"dmanufacdate\"] = rearrangeDateFormat(userInfo, response[7].data[\"smanufacdate\"]); //new Date(response[7].data[\"smanufacdate\"]);\n        }\n\n        if (response[7].data[\"spodate\"] !== \"\") {\n          selectedRecord[\"dpodate\"] = rearrangeDateFormat(userInfo, response[7].data[\"spodate\"]); //new Date(response[7].data[\"spodate\"]);\n        } // else{\n        //     selectedRecord[\"dpodate\"] = \" \";\n        // }\n\n\n        if (response[7].data[\"sreceiveddate\"] !== \"\") {\n          selectedRecord[\"dreceiveddate\"] = rearrangeDateFormat(userInfo, response[7].data[\"sreceiveddate\"]); //new Date(response[7].data[\"sreceiveddate\"]);\n        }\n\n        if (response[7].data[\"sinstallationdate\"] !== \"\") {\n          selectedRecord[\"dinstallationdate\"] = rearrangeDateFormat(userInfo, response[7].data[\"sinstallationdate\"]); //new Date(response[7].data[\"sinstallationdate\"]);\n        }\n\n        if (response[7].data[\"sexpirydate\"] !== \"\") {\n          selectedRecord[\"dexpirydate\"] = rearrangeDateFormat(userInfo, response[7].data[\"sexpirydate\"]); //new Date(response[7].data[\"sexpirydate\"]);\n        }\n\n        selectedRecord[\"ninstrumentcatcode\"] = instrumentCategory[0];\n        selectedRecord[\"nsuppliercode\"] = supplier[0];\n        selectedRecord[\"nservicecode\"] = service[0];\n        if (manufacturer[0].value !== -1) selectedRecord[\"nmanufcode\"] = manufacturer[0];\n        if (instrumentstatus[0].value !== -1) selectedRecord[\"ntranscode\"] = instrumentstatus[0];\n        if (nwindowsperiodminusunit[0].value !== -1) selectedRecord[\"nwindowsperiodminusunit\"] = nwindowsperiodminusunit[0];\n        if (nwindowsperiodplusunit[0].value !== -1) selectedRecord[\"nwindowsperiodplusunit\"] = nwindowsperiodplusunit[0];\n        selectedRecord[\"nsectioncode\"] = lab[0];\n        selectedRecord[\"ntzmanufdate\"] = ntzmanufdate[0];\n        selectedRecord[\"stzmanufdate\"] = ntzmanufdate[0].label;\n        selectedRecord[\"ntzpodate\"] = ntzpodate[0];\n        selectedRecord[\"stzpodate\"] = ntzpodate[0].label;\n        selectedRecord[\"ntzreceivedate\"] = ntzreceivedate[0];\n        selectedRecord[\"stzreceivedate\"] = ntzreceivedate[0].label;\n        selectedRecord[\"ntzinstallationdate\"] = ntzinstallationdate[0];\n        selectedRecord[\"stzinstallationdate\"] = ntzinstallationdate[0].label;\n        selectedRecord[\"ntzexpirydate\"] = ntzexpirydate[0];\n        selectedRecord[\"stzexpirydate\"] = ntzexpirydate[0].label;\n        selectedRecord[\"susername\"] = susername[0];\n      }\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          InstrumentCategory,\n          Supplier,\n          Manufacturer,\n          InstrumentStatus,\n          instrumentCategory: instrumentCategory,\n          supplier: supplier,\n          manufacturer: manufacturer,\n          Lab,\n          Period,\n          TimeZoneList,\n          isOpen: true,\n          selectedRecord: selectedRecord,\n          operation: operation,\n          screenName: screenName,\n          openModal: true,\n          ncontrolCode: ncontrolCode,\n          loading: false,\n          currentTime,\n          expiryDate\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(intl.formatMessage({\n          id: error.message\n        }));\n      } else {\n        toast.warn(intl.formatMessage({\n          id: error.response.data\n        }));\n      }\n    });\n  };\n}\nexport function getSectionUsers(nsectioncode, userInfo, selectedRecord, screenName) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    return rsapi.post(\"instrument/getSectionBasedUser\", {\n      \"nsectioncode\": nsectioncode\n    }, {\n      userinfo: userInfo\n    }).then(response => {\n      //console.log(\" response:\", response); \n      let Users = [];\n\n      if (screenName === \"IDS_SECTION\") {\n        //let sectionusers=[];\n        const userName = constructOptionList(response.data || [], \"nusercode\", \"susername\", undefined, undefined, false);\n        Users = userName.get(\"OptionList\"); //selectedRecord[\"nusercode\"]=\"\";\n\n        selectedRecord[\"nusercode\"] = undefined; //{label:SectionUsers[0].label,value:SectionUsers[0].value,item:SectionUsers[0]};\n      } else {\n        Users = response.data;\n      }\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          Users,\n          selectedRecord,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getInstrumentDetail(Instrument, userInfo, masterData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    return rsapi.post(\"instrument/getInstrument\", {\n      ninstrumentcode: Instrument.ninstrumentcode,\n      userinfo: userInfo\n    }).then(response => {\n      masterData = { ...masterData,\n        ...response.data\n      };\n      sortData(masterData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          operation: null,\n          modalName: undefined,\n          loading: false,\n          dataState: undefined\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport const getAvailableInstData = (instItem, url, key, screenName, userInfo, ncontrolCode, selectedRecord) => {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    let url = '';\n    url = \"/instrument/getUsers\";\n    return rsapi.post(url, {\n      \"userinfo\": userInfo\n    }).then(response => {\n      const secMap = constructOptionList(response.data.Section || [], \"nsectioncode\", \"ssectionname\", undefined, undefined, false);\n      const userMap = constructOptionList(response.data.Users || [], \"nusercode\", \"susername\", undefined, undefined, false);\n      const Lab = secMap.get(\"OptionList\");\n      const LabDefault = secMap.get(\"DefaultValue\");\n\n      if (LabDefault !== undefined) {\n        selectedRecord = {\n          \"nsectioncode\": {\n            \"value\": LabDefault.value,\n            \"label\": LabDefault.label\n          }\n        };\n      }\n\n      const Users = userMap.get(\"OptionList\");\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          Lab,\n          Users,\n          isOpen: true,\n          selectedRecord,\n          operation: \"create\",\n          screenName: screenName,\n          openModal: true,\n          ncontrolCode: ncontrolCode,\n          instItem: instItem,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 417) {\n        toast.info(error.response.data);\n      } else {\n        toast.error(error.message);\n      }\n    });\n  };\n};\nexport const changeInstrumentCategoryFilter = (inputParam, filterInstrumentCategory) => {\n  return dispatch => {\n    dispatch(initRequest(true));\n    rsapi.post(\"/instrument/get\" + inputParam.methodUrl, inputParam.inputData).then(response => {\n      const masterData = response.data;\n      sortData(masterData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false,\n          dataState: undefined,\n          masterData: { ...masterData,\n            filterInstrumentCategory,\n            nfilterInstrumentCategory: inputParam.inputData.nfilterInstrumentCategory\n          }\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n      toast.error(error.message);\n    });\n  };\n};\nexport const addInstrumentFile = inputParam => {\n  return dispatch => {\n    dispatch(initRequest(true));\n    let urlArray = [];\n    urlArray.push(rsapi.post(\"/instrument/editInstrumentFile\", {\n      userinfo: inputParam.userInfo,\n      Instrumentfile: inputParam.selectedRecord\n    }));\n    Axios.all(urlArray).then(response => {\n      let selectedRecord = {};\n      let editObject = {};\n      let operation = \"update\";\n      editObject = response[0].data;\n      selectedRecord = {\n        ninstrumentfilecode: editObject.ninstrumentfilecode,\n        sfiledesc: editObject.sfiledesc,\n        sfilename: editObject.sfilename,\n        sdescription: editObject.sdescription,\n        ssystemfilename: editObject.ssystemfilename\n      };\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          openModal: true,\n          operation: operation,\n          screenName: inputParam.screenName,\n          ncontrolCode: inputParam.ncontrolCode,\n          selectedRecord,\n          loading: false,\n          showSaveContinue: false,\n          editFiles: editObject.nattachmenttypecode === \"1\" ? editObject : {}\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n};\nexport const getDataForAddEditValidation = (screenName, operation, userInfo, ncontrolCode, selectedRecord, masterData, primaryKeyName) => {\n  return function (dispatch) {\n    let urlArray = [];\n    const timeZoneService = rsapi.post(\"timezone/getTimeZone\");\n    const UTCtimeZoneService = rsapi.post(\"timezone/getLocalTimeByZone\", {\n      userinfo: userInfo\n    });\n    const validationStatusService = rsapi.post(\"instrument/getInstrumentValidationStatus\", {\n      \"userinfo\": userInfo\n    });\n\n    if (operation === \"create\") {\n      urlArray = [validationStatusService, UTCtimeZoneService, timeZoneService];\n    } else {\n      const ValidationById = rsapi.post(\"instrument/getActiveInstrumentValidationById\", {\n        [primaryKeyName]: masterData.selectedInstrumentValidation.ninstrumentvalidationcode,\n        \"userinfo\": userInfo\n      });\n      urlArray = [validationStatusService, UTCtimeZoneService, timeZoneService, ValidationById];\n    }\n\n    dispatch(initRequest(true));\n    Axios.all(urlArray).then(response => {\n      let selectedRecord = {};\n      let ValidationData = [];\n      const validationMap = constructOptionList(response[0].data.ValidationStatus || [], \"ntranscode\", \"stransstatus\", undefined, undefined, false);\n      const ValidationStatus = validationMap.get(\"OptionList\");\n      let ntzvalidationdate = [];\n      const timezoneMap = constructOptionList(response[2].data || [], \"ntimezonecode\", \"stimezoneid\", undefined, undefined, false);\n      const TimeZoneList = timezoneMap.get(\"OptionList\");\n\n      if (operation === \"create\") {\n        let date = rearrangeDateFormat(userInfo, response[1].data);\n        selectedRecord[\"dvalidationdate\"] = date;\n      }\n\n      if (operation === \"update\") {\n        ValidationData.push({\n          \"value\": response[3].data[\"nvalidationstatus\"],\n          \"label\": response[3].data[\"stransdisplaystatus\"]\n        });\n        selectedRecord = response[3].data;\n        selectedRecord[\"ntranscode\"] = ValidationData[0];\n        ntzvalidationdate.push({\n          \"value\": response[3].data[\"ntzvalidationdate\"],\n          \"label\": response[3].data[\"stzvalidationdate\"]\n        });\n        selectedRecord[\"ntzvalidationdate\"] = ntzvalidationdate[0];\n\n        if (response[3].data[\"svalidationdate\"] !== \"\") {\n          selectedRecord[\"dvalidationdate\"] = rearrangeDateFormat(userInfo, response[3].data[\"svalidationdate\"]); //new Date(response[7].data[\"smanufacdate\"]);\n        }\n      }\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          ValidationStatus,\n          TimeZoneList,\n          selectedRecord: selectedRecord,\n          isOpen: true,\n          operation: operation,\n          screenName: screenName,\n          openModal: true,\n          ncontrolCode: ncontrolCode,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(intl.formatMessage({\n          id: error.message\n        }));\n      } else {\n        toast.warn(intl.formatMessage({\n          id: error.response.data\n        }));\n      }\n    });\n  };\n};\nexport const getDataForAddEditCalibration = (screenName, operation, userInfo, ncontrolCode, selectedRecord, masterData, primaryKeyName) => {\n  return function (dispatch) {\n    let urlArray = [];\n    const timeZoneService = rsapi.post(\"timezone/getTimeZone\");\n    const calibrationStatusService = rsapi.post(\"instrument/getInstrumentCalibrationStatus\", {\n      \"userinfo\": userInfo\n    });\n    const LastCalibrationDateService = rsapi.post(\"instrument/getInstrumentLastCalibrationDate\", {\n      \"userinfo\": userInfo,\n      ninstrumentcode: masterData.selectedInstrument.ninstrumentcode\n    });\n\n    if (operation === \"create\") {\n      const calibrationValidationService = rsapi.post(\"instrument/getInstrumentCalibrationValidation\", {\n        \"userinfo\": userInfo,\n        nFlag: 1,\n        ninstrumentcode: masterData.selectedInstrument.ninstrumentcode\n      });\n      urlArray = [calibrationStatusService, LastCalibrationDateService, timeZoneService, calibrationValidationService];\n    } else {\n      const calibrationValidationService = rsapi.post(\"instrument/getInstrumentCalibrationValidation\", {\n        \"userinfo\": userInfo,\n        nFlag: 2,\n        ninstrumentcalibrationcode: masterData.selectedInstrumentCalibration.ninstrumentcalibrationcode,\n        ninstrumentcode: masterData.selectedInstrumentCalibration.ninstrumentcode\n      });\n      const CalibrationById = rsapi.post(\"instrument/getActiveInstrumentCalibrationById\", {\n        [primaryKeyName]: masterData.selectedInstrumentCalibration.ninstrumentcalibrationcode,\n        \"userinfo\": userInfo\n      });\n      urlArray = [calibrationStatusService, LastCalibrationDateService, timeZoneService, calibrationValidationService, CalibrationById];\n    }\n\n    dispatch(initRequest(true));\n    Axios.all(urlArray).then(response => {\n      let CalibrationStatus = [];\n      let TimeZoneList = [];\n\n      if (response[3].data.OpenCloseStatus === \"Success\") {\n        let selectedRecord = {};\n        let CalibrationData = [];\n        const calibrationMap = constructOptionList(response[0].data.CalibrationStatus || [], \"ntranscode\", \"stransstatus\", undefined, undefined, false);\n        CalibrationStatus = calibrationMap.get(\"OptionList\");\n        let Action;\n        let ntzlastcalibrationdate = [];\n        let ntzduedate = [];\n        const timezoneMap = constructOptionList(response[2].data || [], \"ntimezonecode\", \"stimezoneid\", undefined, undefined, false);\n        TimeZoneList = timezoneMap.get(\"OptionList\");\n\n        if (operation === \"create\") {\n          let date = rearrangeDateFormat(userInfo, response[1].data.date);\n          selectedRecord[\"dlastcalibrationdate\"] = date;\n          selectedRecord[\"dduedate\"] = rearrangeDateFormat(userInfo, new Date());\n          Action = 'Add';\n        }\n\n        if (operation === \"update\") {\n          Action = 'Edit';\n          CalibrationData.push({\n            \"value\": response[4].data[\"ncalibrationstatus\"],\n            \"label\": response[4].data[\"stransdisplaystatus\"]\n          });\n          selectedRecord = response[4].data;\n          selectedRecord[\"ntranscode\"] = CalibrationData[0];\n          ntzlastcalibrationdate.push({\n            \"value\": response[4].data[\"ntzlastcalibrationdate\"],\n            \"label\": response[4].data[\"stzlastcalibrationdate\"]\n          });\n          ntzduedate.push({\n            \"value\": response[4].data[\"ntzduedate\"],\n            \"label\": response[4].data[\"stzduedate\"]\n          });\n          selectedRecord[\"ntzlastcalibrationdate\"] = ntzlastcalibrationdate[0];\n          selectedRecord[\"ntzduedate\"] = ntzduedate[0];\n\n          if (response[4].data[\"slastcalibrationdate\"] !== \"\") {\n            selectedRecord[\"dlastcalibrationdate\"] = rearrangeDateFormat(userInfo, response[4].data[\"slastcalibrationdate\"]);\n          }\n\n          if (response[4].data[\"sduedate\"] !== \"\") {\n            selectedRecord[\"dduedate\"] = rearrangeDateFormat(userInfo, response[4].data[\"sduedate\"]);\n          }\n        }\n\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            CalibrationStatus,\n            Action: Action,\n            TimeZoneList,\n            selectedRecord: selectedRecord,\n            isOpen: true,\n            operation: operation,\n            screenName: screenName,\n            openModal: true,\n            ncontrolCode: ncontrolCode,\n            loading: false\n          }\n        });\n      } else {\n        toast.warn(intl.formatMessage({\n          id: response[3].data.Status\n        }));\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            operation: operation,\n            screenName: screenName,\n            ncontrolCode: ncontrolCode,\n            loading: false\n          }\n        });\n      }\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(intl.formatMessage({\n          id: error.message\n        }));\n      } else {\n        toast.warn(intl.formatMessage({\n          id: error.response.data\n        }));\n      }\n    });\n  };\n};\nexport const getTabDetails = inputParam => {\n  return function (dispatch) {\n    const instrumentValidation = inputParam.instrumentValidation;\n    const instrumentCalibration = inputParam.instrumentCalibration;\n    const instrumentMaintenance = inputParam.instrumentMaintenance;\n    let urlArray = [];\n    dispatch(initRequest(true));\n\n    if (inputParam.screenName === \"IDS_INSTRUMENTVALIDATION\") {\n      urlArray.push(rsapi.post(\"/instrument/getothertabdetails\", {\n        ninstrumentcode: instrumentValidation.ninstrumentcode,\n        \"nFlag\": inputParam.nFlag,\n        ninstrumentvalidationcode: instrumentValidation.ninstrumentvalidationcode,\n        userinfo: inputParam.userInfo\n      }));\n    } else if (inputParam.screenName === \"IDS_INSTRUMENTCALIBRATION\") {\n      urlArray.push(rsapi.post(\"/instrument/getothertabdetails\", {\n        ninstrumentcode: instrumentCalibration.ninstrumentcode,\n        \"nFlag\": inputParam.nFlag,\n        ninstrumentcalibrationcode: instrumentCalibration.ninstrumentcalibrationcode,\n        userinfo: inputParam.userInfo\n      }));\n    } else if (inputParam.screenName === \"IDS_INSTRUMENTMAINTENANCE\") {\n      urlArray.push(rsapi.post(\"/instrument/getothertabdetails\", {\n        ninstrumentcode: instrumentMaintenance.ninstrumentcode,\n        \"nFlag\": inputParam.nFlag,\n        ninstrumentmaintenancecode: instrumentMaintenance.ninstrumentmaintenancecode,\n        userinfo: inputParam.userInfo\n      }));\n    }\n\n    Axios.all(urlArray).then(response => {\n      let masterData = inputParam.masterData;\n      masterData = { ...masterData,\n        ...response[0].data\n      };\n      sortData(masterData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n};\nexport const getDataForAddEditMaintenance = (screenName, operation, userInfo, ncontrolCode, selectedRecord, masterData, primaryKeyName) => {\n  return function (dispatch) {\n    let urlArray = [];\n    const timeZoneService = rsapi.post(\"timezone/getTimeZone\");\n    const LastMaintenanceDateService = rsapi.post(\"instrument/getInstrumentLastMaintenanceDate\", {\n      \"userinfo\": userInfo,\n      ninstrumentcode: masterData.selectedInstrument.ninstrumentcode\n    });\n    const maintenanceStatusService = rsapi.post(\"instrument/getInstrumentMaintenanceStatus\", {\n      \"userinfo\": userInfo\n    });\n\n    if (operation === \"create\") {\n      const maintenanceValidationService = rsapi.post(\"instrument/getInstrumentMaintenanceValidation\", {\n        \"userinfo\": userInfo,\n        nFlag: 1,\n        ninstrumentcode: masterData.selectedInstrument.ninstrumentcode\n      });\n      urlArray = [maintenanceStatusService, LastMaintenanceDateService, timeZoneService, maintenanceValidationService];\n    } else {\n      const maintenanceValidationService = rsapi.post(\"instrument/getInstrumentMaintenanceValidation\", {\n        \"userinfo\": userInfo,\n        nFlag: 2,\n        ninstrumentmaintenancecode: masterData.selectedInstrumentMaintenance.ninstrumentmaintenancecode,\n        ninstrumentcode: masterData.selectedInstrumentMaintenance.ninstrumentcode\n      });\n      const MaintenanceById = rsapi.post(\"instrument/getActiveInstrumentMaintenanceById\", {\n        [primaryKeyName]: masterData.selectedInstrumentMaintenance.ninstrumentmaintenancecode,\n        \"userinfo\": userInfo\n      });\n      urlArray = [maintenanceStatusService, LastMaintenanceDateService, timeZoneService, maintenanceValidationService, MaintenanceById];\n    }\n\n    dispatch(initRequest(true));\n    Axios.all(urlArray).then(response => {\n      let MaintenanceStatus = [];\n      let TimeZoneList = [];\n\n      if (response[3].data.OpenCloseStatus === \"Success\") {\n        let selectedRecord = {};\n        let MaintenanceData = [];\n        const maintenanceMap = constructOptionList(response[0].data.MaintenanceStatus || [], \"ntranscode\", \"stransstatus\", undefined, undefined, false);\n        MaintenanceStatus = maintenanceMap.get(\"OptionList\");\n        let Action;\n        let ntzlastmaintenancedate = [];\n        let ntzduedate = [];\n        const timezoneMap = constructOptionList(response[2].data || [], \"ntimezonecode\", \"stimezoneid\", undefined, undefined, false);\n        TimeZoneList = timezoneMap.get(\"OptionList\");\n\n        if (operation === \"create\") {\n          let date = rearrangeDateFormat(userInfo, response[1].data.date);\n          selectedRecord[\"dlastmaintenancedate\"] = date;\n          selectedRecord[\"dduedate\"] = rearrangeDateFormat(userInfo, new Date());\n          Action = 'Add';\n        }\n\n        if (operation === \"update\") {\n          Action = 'Edit';\n          MaintenanceData.push({\n            \"value\": response[4].data[\"nmaintenancestatus\"],\n            \"label\": response[4].data[\"stransdisplaystatus\"]\n          });\n          selectedRecord = response[4].data;\n          selectedRecord[\"ntranscode\"] = MaintenanceData[0];\n          ntzlastmaintenancedate.push({\n            \"value\": response[4].data[\"ntzlastmaintenancedate\"],\n            \"label\": response[4].data[\"stzlastmaintenancedate\"]\n          });\n          ntzduedate.push({\n            \"value\": response[4].data[\"ntzduedate\"],\n            \"label\": response[4].data[\"stzduedate\"]\n          });\n          selectedRecord[\"ntzlastmaintenancedate\"] = ntzlastmaintenancedate[0];\n          selectedRecord[\"ntzduedate\"] = ntzduedate[0];\n\n          if (response[4].data[\"slastmaintenancedate\"] !== \"\") {\n            selectedRecord[\"dlastmaintenancedate\"] = rearrangeDateFormat(userInfo, response[4].data[\"slastmaintenancedate\"]); //new Date(response[7].data[\"smanufacdate\"]);\n          }\n\n          if (response[4].data[\"sduedate\"] !== \"\") {\n            selectedRecord[\"dduedate\"] = rearrangeDateFormat(userInfo, response[4].data[\"sduedate\"]); //new Date(response[7].data[\"smanufacdate\"]);\n          }\n        }\n\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            MaintenanceStatus,\n            Action: Action,\n            TimeZoneList,\n            selectedRecord: selectedRecord,\n            isOpen: true,\n            operation: operation,\n            screenName: screenName,\n            openModal: true,\n            ncontrolCode: ncontrolCode,\n            loading: false\n          }\n        });\n      } else {\n        toast.warn(intl.formatMessage({\n          id: response[3].data.Status\n        }));\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            operation: operation,\n            screenName: screenName,\n            ncontrolCode: ncontrolCode,\n            loading: false\n          }\n        });\n      }\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(intl.formatMessage({\n          id: error.message\n        }));\n      } else {\n        toast.warn(intl.formatMessage({\n          id: error.response.data\n        }));\n      }\n    });\n  };\n};\nexport const OpenDate = (screenName, userInfo, ncontrolCode, selectedRecord, masterData) => {\n  return function (dispatch) {\n    let urlArray = [];\n    const timeZoneService = rsapi.post(\"timezone/getTimeZone\");\n    const UTCtimeZoneService = rsapi.post(\"timezone/getLocalTimeByZone\", {\n      userinfo: userInfo\n    });\n\n    if (screenName === \"IDS_INSTRUMENTCALIBRATION\") {\n      const calibrationValidationService = rsapi.post(\"instrument/getInstrumentCalibrationValidation\", {\n        \"userinfo\": userInfo,\n        nFlag: 3,\n        ninstrumentcalibrationcode: masterData.selectedInstrumentCalibration.ninstrumentcalibrationcode,\n        ninstrumentcode: masterData.selectedInstrumentCalibration.ninstrumentcode\n      });\n      const calibrationStatusService = rsapi.post(\"instrument/getInstrumentCalibrationOpenDateStatus\", {\n        \"userinfo\": userInfo,\n        nFlag: 2,\n        ninstrumentcalibrationcode: masterData.selectedInstrumentCalibration.ninstrumentcalibrationcode\n      });\n      urlArray = [calibrationStatusService, timeZoneService, UTCtimeZoneService, calibrationValidationService];\n    } else {\n      const maintenanceValidationService = rsapi.post(\"instrument/getInstrumentMaintenanceValidation\", {\n        \"userinfo\": userInfo,\n        nFlag: 3,\n        ninstrumentmaintenancecode: masterData.selectedInstrumentMaintenance.ninstrumentmaintenancecode,\n        ninstrumentcode: masterData.selectedInstrumentMaintenance.ninstrumentcode\n      });\n      const maintenanceStatusService = rsapi.post(\"instrument/getInstrumentMaintenanceOpenCloseDateStatus\", {\n        \"userinfo\": userInfo,\n        nFlag: 2,\n        ninstrumentmaintenancecode: masterData.selectedInstrumentMaintenance.ninstrumentmaintenancecode\n      });\n      urlArray = [maintenanceStatusService, timeZoneService, UTCtimeZoneService, maintenanceValidationService];\n    }\n\n    dispatch(initRequest(true));\n    Axios.all(urlArray).then(response => {\n      if (response[3].data.OpenCloseStatus === \"Success\") {\n        let CalibrationStatus = {};\n        let MaintenanceStatus = {};\n        let selectedRecord = {};\n        const timezoneMap = constructOptionList(response[1].data || [], \"ntimezonecode\", \"stimezoneid\", undefined, undefined, false);\n        const TimeZoneList = timezoneMap.get(\"OptionList\");\n        let date = rearrangeDateFormat(userInfo, response[2].data);\n        selectedRecord[\"dopendate\"] = date;\n\n        if (screenName === \"IDS_INSTRUMENTCALIBRATION\") {\n          const calibrationMap = constructOptionList(response[0].data.CalibrationStatus || [], \"ntranscode\", \"stransstatus\", undefined, undefined, false);\n          CalibrationStatus = calibrationMap.get(\"OptionList\");\n        } else {\n          const maintenanceMap = constructOptionList(response[0].data.MaintenanceStatus || [], \"ntranscode\", \"stransstatus\", undefined, undefined, false);\n          MaintenanceStatus = maintenanceMap.get(\"OptionList\");\n        }\n\n        let operation = \"create\";\n        let modalTitle = \"IDS_OPENDATE\";\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            isOpen: true,\n            selectedRecord: selectedRecord,\n            operation: operation,\n            modalTitle: modalTitle,\n            CalibrationStatus: CalibrationStatus,\n            MaintenanceStatus: MaintenanceStatus,\n            TimeZoneList: TimeZoneList,\n            screenName: screenName,\n            modalShow: true,\n            ncontrolCode: ncontrolCode,\n            loading: false\n          }\n        });\n      } else {\n        toast.warn(intl.formatMessage({\n          id: response[3].data.Status\n        }));\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            ncontrolCode: ncontrolCode,\n            loading: false\n          }\n        });\n      }\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(intl.formatMessage({\n          id: error.message\n        }));\n      } else {\n        toast.warn(intl.formatMessage({\n          id: error.response.data\n        }));\n      }\n    });\n  };\n};\nexport const CloseDate = (screenName, userInfo, ncontrolCode, selectedRecord, masterData) => {\n  return function (dispatch) {\n    let urlArray = [];\n    const timeZoneService = rsapi.post(\"timezone/getTimeZone\");\n    const UTCtimeZoneService = rsapi.post(\"timezone/getLocalTimeByZone\", {\n      userinfo: userInfo\n    });\n\n    if (screenName === \"IDS_INSTRUMENTCALIBRATION\") {\n      const calibrationValidationService = rsapi.post(\"instrument/getInstrumentCalibrationValidation\", {\n        \"userinfo\": userInfo,\n        nFlag: 4,\n        ninstrumentcalibrationcode: masterData.selectedInstrumentCalibration.ninstrumentcalibrationcode,\n        ninstrumentcode: masterData.selectedInstrumentCalibration.ninstrumentcode\n      });\n      const calibrationStatusService = rsapi.post(\"instrument/getInstrumentCalibrationOpenDateStatus\", {\n        \"userinfo\": userInfo,\n        nFlag: 2,\n        ninstrumentcalibrationcode: masterData.selectedInstrumentCalibration.ninstrumentcalibrationcode\n      });\n      urlArray = [calibrationStatusService, timeZoneService, UTCtimeZoneService, calibrationValidationService];\n    } else {\n      const maintenanceValidationService = rsapi.post(\"instrument/getInstrumentMaintenanceValidation\", {\n        \"userinfo\": userInfo,\n        nFlag: 4,\n        ninstrumentmaintenancecode: masterData.selectedInstrumentMaintenance.ninstrumentmaintenancecode,\n        ninstrumentcode: masterData.selectedInstrumentMaintenance.ninstrumentcode\n      });\n      const maintenanceStatusService = rsapi.post(\"instrument/getInstrumentMaintenanceOpenCloseDateStatus\", {\n        \"userinfo\": userInfo,\n        nFlag: 2,\n        ninstrumentmaintenancecode: masterData.selectedInstrumentMaintenance.ninstrumentmaintenancecode\n      });\n      urlArray = [maintenanceStatusService, timeZoneService, UTCtimeZoneService, maintenanceValidationService];\n    }\n\n    dispatch(initRequest(true));\n    Axios.all(urlArray).then(response => {\n      if (response[3].data.OpenCloseStatus === \"Success\") {\n        let CalibrationStatus = [];\n        let MaintenanceStatus = {};\n        let selectedRecord = {};\n        let date = rearrangeDateFormat(userInfo, response[2].data);\n        selectedRecord[\"dclosedate\"] = date;\n        const timezoneMap = constructOptionList(response[1].data || [], \"ntimezonecode\", \"stimezoneid\", undefined, undefined, false);\n        const TimeZoneList = timezoneMap.get(\"OptionList\");\n\n        if (screenName === \"IDS_INSTRUMENTCALIBRATION\") {\n          const calibrationMap = constructOptionList(response[0].data.CalibrationStatus || [], \"ntranscode\", \"stransstatus\", undefined, undefined, false);\n          CalibrationStatus = calibrationMap.get(\"OptionList\");\n        } else {\n          const maintenanceMap = constructOptionList(response[0].data.MaintenanceStatus || [], \"ntranscode\", \"stransstatus\", undefined, undefined, false);\n          MaintenanceStatus = maintenanceMap.get(\"OptionList\");\n        }\n\n        let operation = \"create\";\n        let modalTitle = \"IDS_CLOSEDATE\";\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            isOpen: true,\n            selectedRecord: selectedRecord,\n            operation: operation,\n            modalTitle: modalTitle,\n            CalibrationStatus: CalibrationStatus,\n            MaintenanceStatus: MaintenanceStatus,\n            TimeZoneList: TimeZoneList,\n            screenName: screenName,\n            modalShow: true,\n            ncontrolCode: ncontrolCode,\n            loading: false\n          }\n        });\n      } else {\n        toast.warn(intl.formatMessage({\n          id: response[3].data.Status\n        }));\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            ncontrolCode: ncontrolCode,\n            loading: false\n          }\n        });\n      }\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(intl.formatMessage({\n          id: error.message\n        }));\n      } else {\n        toast.warn(intl.formatMessage({\n          id: error.response.data\n        }));\n      }\n    });\n  };\n};","map":{"version":3,"sources":["D:/Postgres_workingFolder/QuaLISWeb/src/actions/InstrumentAction.js"],"names":["rsapi","DEFAULT_RETURN","sortData","constructOptionList","rearrangeDateFormat","Axios","initRequest","intl","toast","getInstrumentCombo","screenName","operation","primaryKeyName","masterData","userInfo","ncontrolCode","dispatch","urlArray","InstrumentCategory","post","Supplier","Manufacturer","InstrumentStatus","Lab","Period","timeZoneService","Instrumentdate","UTCtimeZoneService","userinfo","InstrumentId","selectedInstrument","all","then","response","expiryDate","undefined","currentTime","instcatMap","data","supplierMap","manufMap","inststatusMap","sectionMap","periodMap","timezoneMap","get","TimeZoneList","selectedRecord","ntimezonecode","stimezoneid","instrumentCategory","supplier","manufacturer","instrumentstatus","nwindowsperiodminusunit","nwindowsperiodplusunit","lab","ntzmanufdate","ntzpodate","ntzreceivedate","ntzinstallationdate","ntzexpirydate","susername","service","date","push","value","label","type","payload","isOpen","openModal","loading","catch","error","status","formatMessage","id","message","warn","getSectionUsers","nsectioncode","Users","userName","getInstrumentDetail","Instrument","ninstrumentcode","modalName","dataState","getAvailableInstData","instItem","url","key","secMap","Section","userMap","LabDefault","info","changeInstrumentCategoryFilter","inputParam","filterInstrumentCategory","methodUrl","inputData","nfilterInstrumentCategory","addInstrumentFile","Instrumentfile","editObject","ninstrumentfilecode","sfiledesc","sfilename","sdescription","ssystemfilename","showSaveContinue","editFiles","nattachmenttypecode","getDataForAddEditValidation","validationStatusService","ValidationById","selectedInstrumentValidation","ninstrumentvalidationcode","ValidationData","validationMap","ValidationStatus","ntzvalidationdate","getDataForAddEditCalibration","calibrationStatusService","LastCalibrationDateService","calibrationValidationService","nFlag","ninstrumentcalibrationcode","selectedInstrumentCalibration","CalibrationById","CalibrationStatus","OpenCloseStatus","CalibrationData","calibrationMap","Action","ntzlastcalibrationdate","ntzduedate","Date","Status","getTabDetails","instrumentValidation","instrumentCalibration","instrumentMaintenance","ninstrumentmaintenancecode","getDataForAddEditMaintenance","LastMaintenanceDateService","maintenanceStatusService","maintenanceValidationService","selectedInstrumentMaintenance","MaintenanceById","MaintenanceStatus","MaintenanceData","maintenanceMap","ntzlastmaintenancedate","OpenDate","modalTitle","modalShow","CloseDate"],"mappings":"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","sourcesContent":["import rsapi from '../rsapi';\r\nimport {\r\n    DEFAULT_RETURN\r\n} from './LoginTypes';\r\nimport {\r\n    sortData,\r\n    constructOptionList,\r\n    rearrangeDateFormat\r\n} from '../components/CommonScript';\r\nimport Axios from 'axios';\r\nimport {\r\n    initRequest\r\n} from './LoginAction';\r\nimport {\r\n    intl\r\n} from '../components/App';\r\nimport {\r\n    toast\r\n} from 'react-toastify';\r\n\r\nexport function getInstrumentCombo(screenName, operation, primaryKeyName, masterData, userInfo, ncontrolCode) {\r\n    return function (dispatch) {\r\n        let urlArray = [];\r\n        const InstrumentCategory = rsapi.post(\"/instrumentcategory/fetchinstrumentcategory\", {\r\n            \"userinfo\": userInfo\r\n        });\r\n        const Supplier = rsapi.post(\"/instrument/getSupplier\", {\r\n            \"userinfo\": userInfo\r\n        });\r\n        const Manufacturer = rsapi.post(\"/instrument/getManufacturer\", {\r\n            \"userinfo\": userInfo\r\n        });\r\n        const InstrumentStatus = rsapi.post(\"/instrument/getInstrumentStatus\", {\r\n            \"userinfo\": userInfo\r\n        });\r\n        const Lab = rsapi.post(\"/section/getSection\", {\r\n            \"userinfo\": userInfo\r\n        });\r\n        const Period = rsapi.post(\"/instrument/getPeriod\", {\r\n            \"ncontrolcode\": ncontrolCode,\r\n            \"userinfo\": userInfo\r\n        });\r\n        const timeZoneService = rsapi.post(\"timezone/getTimeZone\");\r\n        const Instrumentdate = rsapi.post(\"/instrument/addInstrumentDate\", {\r\n            \"ncontrolcode\": ncontrolCode,\r\n            \"userinfo\": userInfo\r\n        });\r\n        const UTCtimeZoneService = rsapi.post(\"timezone/getLocalTimeByZone\", {\r\n            userinfo: userInfo\r\n        });\r\n        if (operation === \"create\") {\r\n            urlArray = [InstrumentCategory, Supplier, Manufacturer, InstrumentStatus, Lab, Period, timeZoneService, Instrumentdate, UTCtimeZoneService];\r\n\r\n        } else {\r\n            const InstrumentId = rsapi.post(\"/instrument/getActiveInstrumentById\", {\r\n                [primaryKeyName]: masterData.selectedInstrument[primaryKeyName],\r\n                \"userinfo\": userInfo\r\n            });\r\n            //const ManufacturerByID = rsapi.post(\"/manufacturer/getManufacturerById\", { [primaryKeyName] :masterData.selectedManufacturer[primaryKeyName], \"userinfo\": userInfo });\r\n            urlArray = [InstrumentCategory, Supplier, Manufacturer, InstrumentStatus, Lab, Period, timeZoneService, InstrumentId, Instrumentdate, UTCtimeZoneService];\r\n        }\r\n\r\n        dispatch(initRequest(true));\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n\r\n                let expiryDate = undefined;\r\n                let currentTime = undefined;\r\n                const instcatMap = constructOptionList(response[0].data || [], \"ninstrumentcatcode\",\r\n                    \"sinstrumentcatname\", undefined, undefined, false);\r\n\r\n                const supplierMap = constructOptionList(response[1].data.Supplier || [], \"nsuppliercode\",\r\n                    \"ssuppliername\", undefined, undefined, false);\r\n\r\n                const manufMap = constructOptionList(response[2].data.Manufacturer || [], \"nmanufcode\",\r\n                    \"smanufname\", undefined, undefined, false);\r\n\r\n                const inststatusMap = constructOptionList(response[3].data || [], \"ntranscode\",\r\n                    \"stransstatus\", undefined, undefined, false);\r\n\r\n                const sectionMap = constructOptionList(response[4].data || [], \"nsectioncode\",\r\n                    \"ssectionname\", undefined, undefined, false);\r\n\r\n                const periodMap = constructOptionList(response[5].data || [], \"nperiodcode\",\r\n                    \"speriodname\", undefined, undefined, false);\r\n\r\n                const timezoneMap = constructOptionList(response[6].data || [], \"ntimezonecode\",\r\n                    \"stimezoneid\", undefined, undefined, false);\r\n\r\n\r\n                const InstrumentCategory = instcatMap.get(\"OptionList\");\r\n                const Supplier = supplierMap.get(\"OptionList\");\r\n                const Manufacturer = manufMap.get(\"OptionList\");\r\n                const InstrumentStatus = inststatusMap.get(\"OptionList\");\r\n                const Lab = sectionMap.get(\"OptionList\");\r\n                const Period = periodMap.get(\"OptionList\");\r\n                const TimeZoneList = timezoneMap.get(\"OptionList\");\r\n\r\n\r\n                let selectedRecord = {\r\n                    \"ntzmanufdate\": {\r\n                        \"value\": userInfo.ntimezonecode,\r\n                        \"label\": userInfo.stimezoneid\r\n                    },\r\n                    //\"stzmanufdate\":userInfo.stimezoneid\r\n\r\n                    \"ntzpodate\": {\r\n                        \"value\": userInfo.ntimezonecode,\r\n                        \"label\": userInfo.stimezoneid\r\n                    },\r\n                    \"stzpodate\": userInfo.stimezoneid,\r\n\r\n\r\n                    \"ntzreceivedate\": {\r\n                        \"value\": userInfo.ntimezonecode,\r\n                        \"label\": userInfo.stimezoneid\r\n                    },\r\n                    \"stzreceivedate\": userInfo.stimezoneid,\r\n\r\n\r\n                    \"ntzinstallationdate\": {\r\n                        \"value\": userInfo.ntimezonecode,\r\n                        \"label\": userInfo.stimezoneid\r\n                    },\r\n                    \"stzinstallationdate\": userInfo.stimezoneid,\r\n\r\n\r\n                    \"ntzexpirydate\": {\r\n                        \"value\": userInfo.ntimezonecode,\r\n                        \"label\": userInfo.stimezoneid\r\n                    },\r\n                    \"stzexpirydate\": userInfo.stimezoneid\r\n                };\r\n                let instrumentCategory = [];\r\n                let supplier = [];\r\n                let manufacturer = [];\r\n                let instrumentstatus = [];\r\n                let nwindowsperiodminusunit = [];\r\n                let nwindowsperiodplusunit = [];;\r\n                let lab = [];\r\n                let ntzmanufdate = [];\r\n                let ntzpodate = [];\r\n                let ntzreceivedate = [];\r\n                let ntzinstallationdate = [];\r\n                let ntzexpirydate = [];\r\n                let susername = [];\r\n                let service = [];\r\n                if (operation === \"create\") {\r\n                    let date = rearrangeDateFormat(userInfo, response[8].data);\r\n                    selectedRecord[\"dmanufacdate\"] = date; //new Date(response[8].data);\r\n                    selectedRecord[\"dpodate\"] = date;\r\n                    selectedRecord[\"dreceiveddate\"] = date;\r\n                    selectedRecord[\"dinstallationdate\"] = date;\r\n                    currentTime = date;\r\n                    if (response[7].data[\"ExpiryDate\"] !== \"\") {\r\n                        expiryDate = rearrangeDateFormat(userInfo, response[7].data[\"ExpiryDate\"]); //new Date(response[7].data[\"ExpiryDate\"]);\r\n                        selectedRecord[\"dexpirydate\"] = expiryDate;\r\n                    }\r\n                }\r\n                if (operation === \"update\") {\r\n                    selectedRecord = response[7].data;\r\n                    instrumentCategory.push({\r\n                        \"value\": response[7].data[\"ninstrumentcatcode\"],\r\n                        \"label\": response[7].data[\"sinstrumentcatname\"]\r\n                    });\r\n                    supplier.push({\r\n                        \"value\": response[7].data[\"nsuppliercode\"],\r\n                        \"label\": response[7].data[\"ssuppliername\"]\r\n                    });\r\n                    service.push({\r\n                        \"value\": response[7].data[\"nservicecode\"],\r\n                        \"label\": response[7].data[\"sserviceby\"]\r\n                    });\r\n                    manufacturer.push({\r\n                        \"value\": response[7].data[\"nmanufcode\"],\r\n                        \"label\": response[7].data[\"smanufname\"]\r\n                    });\r\n                    instrumentstatus.push({\r\n                        \"value\": response[7].data[\"ntranscode\"],\r\n                        \"label\": response[7].data[\"sactivestatus\"]\r\n                    });\r\n                    nwindowsperiodminusunit.push({\r\n                        \"value\": response[7].data[\"nwindowsperiodminusunit\"],\r\n                        \"label\": response[7].data[\"swindowsperiodminusunit\"]\r\n                    });\r\n                    nwindowsperiodplusunit.push({\r\n                        \"value\": response[7].data[\"nwindowsperiodplusunit\"],\r\n                        \"label\": response[7].data[\"swindowsperiodplusunit\"]\r\n                    });\r\n                    lab.push({\r\n                        \"value\": response[7].data[\"nsectioncode\"],\r\n                        \"label\": response[7].data[\"ssectionname\"]\r\n                    })\r\n                    ntzmanufdate.push({\r\n                        \"value\": response[7].data[\"ntzmanufdate\"],\r\n                        \"label\": response[7].data[\"stzmanufdate\"]\r\n                    })\r\n                    ntzpodate.push({\r\n                        \"value\": response[7].data[\"ntzpodate\"],\r\n                        \"label\": response[7].data[\"stzpodate\"]\r\n                    })\r\n                    ntzreceivedate.push({\r\n                        \"value\": response[7].data[\"ntzreceivedate\"],\r\n                        \"label\": response[7].data[\"stzreceivedate\"]\r\n                    })\r\n                    ntzinstallationdate.push({\r\n                        \"value\": response[7].data[\"ntzinstallationdate\"],\r\n                        \"label\": response[7].data[\"stzinstallationdate\"]\r\n                    })\r\n                    ntzexpirydate.push({\r\n                        \"value\": response[7].data[\"ntzexpirydate\"],\r\n                        \"label\": response[7].data[\"stzexpirydate\"]\r\n                    })\r\n                    susername.push({\r\n                        \"value\": response[7].data[\"nusercode1\"],\r\n                        \"label\": response[7].data[\"susername\"]\r\n                    })\r\n\r\n                    if (response[7].data[\"smanufacdate\"] !== \"\") {\r\n\r\n                        selectedRecord[\"dmanufacdate\"] = rearrangeDateFormat(userInfo, response[7].data[\"smanufacdate\"]); //new Date(response[7].data[\"smanufacdate\"]);\r\n                    }\r\n\r\n                    if (response[7].data[\"spodate\"] !== \"\") {\r\n                        selectedRecord[\"dpodate\"] = rearrangeDateFormat(userInfo, response[7].data[\"spodate\"]); //new Date(response[7].data[\"spodate\"]);\r\n                    }\r\n                    // else{\r\n                    //     selectedRecord[\"dpodate\"] = \" \";\r\n                    // }\r\n\r\n                    if (response[7].data[\"sreceiveddate\"] !== \"\") {\r\n                        selectedRecord[\"dreceiveddate\"] = rearrangeDateFormat(userInfo, response[7].data[\"sreceiveddate\"]); //new Date(response[7].data[\"sreceiveddate\"]);\r\n                    }\r\n                    if (response[7].data[\"sinstallationdate\"] !== \"\") {\r\n                        selectedRecord[\"dinstallationdate\"] = rearrangeDateFormat(userInfo, response[7].data[\"sinstallationdate\"]); //new Date(response[7].data[\"sinstallationdate\"]);\r\n                    }\r\n\r\n                    if (response[7].data[\"sexpirydate\"] !== \"\") {\r\n                        selectedRecord[\"dexpirydate\"] = rearrangeDateFormat(userInfo, response[7].data[\"sexpirydate\"]); //new Date(response[7].data[\"sexpirydate\"]);\r\n                    }\r\n\r\n\r\n                    selectedRecord[\"ninstrumentcatcode\"] = instrumentCategory[0];\r\n                    selectedRecord[\"nsuppliercode\"] = supplier[0];\r\n                    selectedRecord[\"nservicecode\"] = service[0];\r\n                    if (manufacturer[0].value !== -1)\r\n                        selectedRecord[\"nmanufcode\"] = manufacturer[0];\r\n                    if (instrumentstatus[0].value !== -1)\r\n                        selectedRecord[\"ntranscode\"] = instrumentstatus[0];\r\n                    if (nwindowsperiodminusunit[0].value !== -1)\r\n                        selectedRecord[\"nwindowsperiodminusunit\"] = nwindowsperiodminusunit[0];\r\n                    if (nwindowsperiodplusunit[0].value !== -1)\r\n                        selectedRecord[\"nwindowsperiodplusunit\"] = nwindowsperiodplusunit[0];\r\n                    selectedRecord[\"nsectioncode\"] = lab[0];\r\n                    selectedRecord[\"ntzmanufdate\"] = ntzmanufdate[0];\r\n                    selectedRecord[\"stzmanufdate\"] = ntzmanufdate[0].label;\r\n                    selectedRecord[\"ntzpodate\"] = ntzpodate[0];\r\n                    selectedRecord[\"stzpodate\"] = ntzpodate[0].label;\r\n                    selectedRecord[\"ntzreceivedate\"] = ntzreceivedate[0];\r\n                    selectedRecord[\"stzreceivedate\"] = ntzreceivedate[0].label;\r\n                    selectedRecord[\"ntzinstallationdate\"] = ntzinstallationdate[0];\r\n                    selectedRecord[\"stzinstallationdate\"] = ntzinstallationdate[0].label;\r\n                    selectedRecord[\"ntzexpirydate\"] = ntzexpirydate[0];\r\n                    selectedRecord[\"stzexpirydate\"] = ntzexpirydate[0].label;\r\n                    selectedRecord[\"susername\"] = susername[0];\r\n                }\r\n\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        InstrumentCategory,\r\n                        Supplier,\r\n                        Manufacturer,\r\n                        InstrumentStatus,\r\n                        instrumentCategory: instrumentCategory,\r\n                        supplier: supplier,\r\n                        manufacturer: manufacturer,\r\n                        Lab,\r\n                        Period,\r\n                        TimeZoneList,\r\n                        isOpen: true,\r\n                        selectedRecord: selectedRecord,\r\n                        operation: operation,\r\n                        screenName: screenName,\r\n                        openModal: true,\r\n                        ncontrolCode: ncontrolCode,\r\n                        loading: false,\r\n                        currentTime,\r\n                        expiryDate\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(intl.formatMessage({\r\n                        id: error.message\r\n                    }));\r\n                } else {\r\n                    toast.warn(intl.formatMessage({\r\n                        id: error.response.data\r\n                    }));\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\n\r\nexport function getSectionUsers(nsectioncode, userInfo, selectedRecord, screenName) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"instrument/getSectionBasedUser\", {\r\n                \"nsectioncode\": nsectioncode\r\n            }, {\r\n                userinfo: userInfo\r\n            })\r\n            .then(response => {\r\n                //console.log(\" response:\", response); \r\n                let Users = [];\r\n                if (screenName === \"IDS_SECTION\") {\r\n                    //let sectionusers=[];\r\n                    const userName = constructOptionList(response.data || [], \"nusercode\",\r\n                        \"susername\", undefined, undefined, false);\r\n                    Users = userName.get(\"OptionList\");\r\n                    //selectedRecord[\"nusercode\"]=\"\";\r\n                    selectedRecord[\"nusercode\"] = undefined; //{label:SectionUsers[0].label,value:SectionUsers[0].value,item:SectionUsers[0]};\r\n                } else {\r\n                    Users = response.data;\r\n                }\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        Users,\r\n                        selectedRecord,\r\n                        loading: false\r\n\r\n                    }\r\n                });\r\n\r\n            }).catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n\r\n            })\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\nexport function getInstrumentDetail(Instrument, userInfo, masterData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"instrument/getInstrument\", {\r\n                ninstrumentcode: Instrument.ninstrumentcode,\r\n                userinfo: userInfo\r\n            })\r\n            .then(response => {\r\n                masterData = {\r\n                    ...masterData,\r\n                    ...response.data\r\n                };\r\n                sortData(masterData);\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData,\r\n                        operation: null,\r\n                        modalName: undefined,\r\n                        loading: false,\r\n                        dataState: undefined\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n\r\n            })\r\n    }\r\n}\r\n\r\n\r\nexport const getAvailableInstData = (instItem, url, key, screenName, userInfo, ncontrolCode, selectedRecord) => {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        let url = ''\r\n\r\n        url = \"/instrument/getUsers\";\r\n\r\n        return rsapi.post(url, {\r\n                \"userinfo\": userInfo\r\n            })\r\n            .then(response => {\r\n\r\n                const secMap = constructOptionList(response.data.Section || [], \"nsectioncode\",\r\n                    \"ssectionname\", undefined, undefined, false);\r\n                const userMap = constructOptionList(response.data.Users || [], \"nusercode\",\r\n                    \"susername\", undefined, undefined, false);\r\n                const Lab = secMap.get(\"OptionList\");\r\n                const LabDefault = secMap.get(\"DefaultValue\");\r\n                if (LabDefault !== undefined) {\r\n                    selectedRecord = {\r\n                        \"nsectioncode\": {\r\n                            \"value\": LabDefault.value,\r\n                            \"label\": LabDefault.label\r\n                        },\r\n                    }\r\n                }\r\n                const Users = userMap.get(\"OptionList\");\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n\r\n                        Lab,\r\n                        Users,\r\n                        isOpen: true,\r\n                        selectedRecord,\r\n                        operation: \"create\",\r\n                        screenName: screenName,\r\n                        openModal: true,\r\n                        ncontrolCode: ncontrolCode,\r\n                        instItem: instItem,\r\n                        loading: false\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                });\r\n                if (error.response.status === 417) {\r\n                    toast.info(error.response.data)\r\n                } else {\r\n                    toast.error(error.message)\r\n                }\r\n            });\r\n    }\r\n}\r\n\r\n\r\n\r\nexport const changeInstrumentCategoryFilter = (inputParam, filterInstrumentCategory) => {\r\n    return (dispatch) => {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/instrument/get\" + inputParam.methodUrl, inputParam.inputData)\r\n            .then(response => {\r\n                const masterData = response.data\r\n                sortData(masterData);\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false,\r\n                        dataState: undefined,\r\n                        masterData: {\r\n                            ...masterData,\r\n                            filterInstrumentCategory,\r\n                            nfilterInstrumentCategory: inputParam.inputData.nfilterInstrumentCategory\r\n                        }\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                });\r\n                toast.error(error.message);\r\n            });\r\n    }\r\n}\r\n\r\nexport const addInstrumentFile = (inputParam) => {\r\n    return (dispatch) => {\r\n        dispatch(initRequest(true));\r\n        let urlArray = [];\r\n        urlArray.push(rsapi.post(\"/instrument/editInstrumentFile\", {\r\n            userinfo: inputParam.userInfo,\r\n            Instrumentfile: inputParam.selectedRecord\r\n        }))\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                let selectedRecord = {};\r\n                let editObject = {};\r\n                let operation = \"update\";\r\n                editObject = response[0].data;\r\n\r\n                selectedRecord = {\r\n                    ninstrumentfilecode: editObject.ninstrumentfilecode,\r\n                    sfiledesc: editObject.sfiledesc,\r\n\r\n                    sfilename: editObject.sfilename,\r\n                    sdescription: editObject.sdescription,\r\n                    ssystemfilename: editObject.ssystemfilename\r\n                };\r\n\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        openModal: true,\r\n                        operation: operation,\r\n                        screenName: inputParam.screenName,\r\n                        ncontrolCode: inputParam.ncontrolCode,\r\n                        selectedRecord,\r\n                        loading: false,\r\n                        showSaveContinue: false,\r\n                        editFiles: editObject.nattachmenttypecode === \"1\" ? editObject : {}\r\n\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                });\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            });\r\n    }\r\n}\r\n\r\nexport const getDataForAddEditValidation = (screenName, operation, userInfo, ncontrolCode, selectedRecord, masterData, primaryKeyName) => {\r\n    return function (dispatch) {\r\n        let urlArray = [];\r\n        const timeZoneService = rsapi.post(\"timezone/getTimeZone\");\r\n        const UTCtimeZoneService = rsapi.post(\"timezone/getLocalTimeByZone\", {userinfo: userInfo});\r\n        const validationStatusService = rsapi.post(\"instrument/getInstrumentValidationStatus\", {\"userinfo\": userInfo});\r\n\r\n        if (operation === \"create\") {\r\n            urlArray = [validationStatusService, UTCtimeZoneService, timeZoneService];\r\n\r\n        } else {\r\n            const ValidationById = rsapi.post(\"instrument/getActiveInstrumentValidationById\", {\r\n                [primaryKeyName]: masterData.selectedInstrumentValidation.ninstrumentvalidationcode,\r\n                \"userinfo\": userInfo\r\n            });\r\n            urlArray = [validationStatusService, UTCtimeZoneService, timeZoneService, ValidationById];\r\n\r\n        }\r\n\r\n        dispatch(initRequest(true));\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                let selectedRecord = {};\r\n                let ValidationData = [];\r\n\r\n\r\n                const validationMap = constructOptionList(response[0].data.ValidationStatus || [], \"ntranscode\",\r\n                    \"stransstatus\", undefined, undefined, false);\r\n\r\n                const ValidationStatus = validationMap.get(\"OptionList\");\r\n\r\n                let ntzvalidationdate = [];\r\n                const timezoneMap = constructOptionList(response[2].data || [], \"ntimezonecode\",\r\n                    \"stimezoneid\", undefined, undefined, false);\r\n\r\n                const TimeZoneList = timezoneMap.get(\"OptionList\");\r\n                if (operation === \"create\") {\r\n                    let date = rearrangeDateFormat(userInfo, response[1].data);\r\n                    selectedRecord[\"dvalidationdate\"] = date;\r\n\r\n                }\r\n                if (operation === \"update\") {\r\n\r\n                    ValidationData.push({\r\n                        \"value\": response[3].data[\"nvalidationstatus\"],\r\n                        \"label\": response[3].data[\"stransdisplaystatus\"]\r\n                    });\r\n                    selectedRecord = response[3].data;\r\n                    selectedRecord[\"ntranscode\"] = ValidationData[0];\r\n\r\n                    ntzvalidationdate.push({\r\n                        \"value\": response[3].data[\"ntzvalidationdate\"],\r\n                        \"label\": response[3].data[\"stzvalidationdate\"]\r\n                    });\r\n                    selectedRecord[\"ntzvalidationdate\"] = ntzvalidationdate[0];\r\n                    if (response[3].data[\"svalidationdate\"] !== \"\") {\r\n\r\n                        selectedRecord[\"dvalidationdate\"] = rearrangeDateFormat(userInfo, response[3].data[\"svalidationdate\"]); //new Date(response[7].data[\"smanufacdate\"]);\r\n                    }\r\n                }\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        ValidationStatus,\r\n                        TimeZoneList,\r\n                        selectedRecord: selectedRecord,\r\n                        isOpen: true,\r\n                        operation: operation,\r\n                        screenName: screenName,\r\n                        openModal: true,\r\n                        ncontrolCode: ncontrolCode,\r\n                        loading: false\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(intl.formatMessage({\r\n                        id: error.message\r\n                    }));\r\n                } else {\r\n                    toast.warn(intl.formatMessage({\r\n                        id: error.response.data\r\n                    }));\r\n                }\r\n            })\r\n    }\r\n}\r\nexport const getDataForAddEditCalibration = (screenName, operation, userInfo, ncontrolCode, selectedRecord, masterData, primaryKeyName) => {\r\n    return function (dispatch) {\r\n        let urlArray = [];\r\n        const timeZoneService = rsapi.post(\"timezone/getTimeZone\");\r\n     \r\n        const calibrationStatusService = rsapi.post(\"instrument/getInstrumentCalibrationStatus\", {\r\n            \"userinfo\": userInfo\r\n        });\r\n        const LastCalibrationDateService =\r\n        rsapi.post(\"instrument/getInstrumentLastCalibrationDate\", {\r\n            \"userinfo\": userInfo,\r\n            ninstrumentcode: masterData.selectedInstrument.ninstrumentcode\r\n\r\n        });\r\n        if (operation === \"create\") {\r\n            const calibrationValidationService = rsapi.post(\"instrument/getInstrumentCalibrationValidation\", {\r\n                \"userinfo\": userInfo,\r\n                nFlag: 1,\r\n                ninstrumentcode: masterData.selectedInstrument.ninstrumentcode\r\n            });\r\n           \r\n            urlArray = [calibrationStatusService, LastCalibrationDateService, timeZoneService, calibrationValidationService];\r\n\r\n        } else {\r\n            const calibrationValidationService = rsapi.post(\"instrument/getInstrumentCalibrationValidation\", {\r\n                \"userinfo\": userInfo,\r\n                nFlag: 2,\r\n                ninstrumentcalibrationcode: masterData.selectedInstrumentCalibration.ninstrumentcalibrationcode,\r\n                ninstrumentcode: masterData.selectedInstrumentCalibration.ninstrumentcode\r\n\r\n            });\r\n\r\n            const CalibrationById = rsapi.post(\"instrument/getActiveInstrumentCalibrationById\", {\r\n                [primaryKeyName]: masterData.selectedInstrumentCalibration.ninstrumentcalibrationcode,\r\n                \"userinfo\": userInfo\r\n            });\r\n\r\n            urlArray = [calibrationStatusService, LastCalibrationDateService, timeZoneService, calibrationValidationService, CalibrationById];\r\n\r\n        }\r\n\r\n        dispatch(initRequest(true));\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                let CalibrationStatus = [];\r\n                let TimeZoneList = [];\r\n                if (response[3].data.OpenCloseStatus === \"Success\") {\r\n                    let selectedRecord = {};\r\n                    let CalibrationData = [];\r\n\r\n\r\n                    const calibrationMap = constructOptionList(response[0].data.CalibrationStatus || [], \"ntranscode\",\r\n                        \"stransstatus\", undefined, undefined, false);\r\n\r\n                    CalibrationStatus = calibrationMap.get(\"OptionList\");\r\n                    let Action;\r\n                    let ntzlastcalibrationdate = [];\r\n                    let ntzduedate = [];\r\n                    const timezoneMap = constructOptionList(response[2].data || [], \"ntimezonecode\",\r\n                        \"stimezoneid\", undefined, undefined, false);\r\n\r\n                    TimeZoneList = timezoneMap.get(\"OptionList\");\r\n                    if (operation === \"create\") {\r\n                        let date = rearrangeDateFormat(userInfo, response[1].data.date);\r\n                        selectedRecord[\"dlastcalibrationdate\"] = date;\r\n                        selectedRecord[\"dduedate\"] = rearrangeDateFormat(userInfo, new Date());\r\n                        Action = 'Add';\r\n\r\n                    }\r\n                    if (operation === \"update\") {\r\n                        Action = 'Edit';\r\n\r\n                        CalibrationData.push({\r\n                            \"value\": response[4].data[\"ncalibrationstatus\"],\r\n                            \"label\": response[4].data[\"stransdisplaystatus\"]\r\n                        });\r\n                        selectedRecord = response[4].data;\r\n                        selectedRecord[\"ntranscode\"] = CalibrationData[0];\r\n\r\n                        ntzlastcalibrationdate.push({\r\n                            \"value\": response[4].data[\"ntzlastcalibrationdate\"],\r\n                            \"label\": response[4].data[\"stzlastcalibrationdate\"]\r\n                        });\r\n                        ntzduedate.push({\r\n                            \"value\": response[4].data[\"ntzduedate\"],\r\n                            \"label\": response[4].data[\"stzduedate\"]\r\n                        });\r\n                        selectedRecord[\"ntzlastcalibrationdate\"] = ntzlastcalibrationdate[0];\r\n                        selectedRecord[\"ntzduedate\"] = ntzduedate[0];\r\n                        if (response[4].data[\"slastcalibrationdate\"] !== \"\") {\r\n\r\n                            selectedRecord[\"dlastcalibrationdate\"] = rearrangeDateFormat(userInfo, response[4].data[\"slastcalibrationdate\"]);\r\n                        }\r\n                        if (response[4].data[\"sduedate\"] !== \"\") {\r\n\r\n                            selectedRecord[\"dduedate\"] = rearrangeDateFormat(userInfo, response[4].data[\"sduedate\"]);\r\n                        }\r\n\r\n                    }\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            CalibrationStatus,\r\n                            Action: Action,\r\n                            TimeZoneList,\r\n                            selectedRecord: selectedRecord,\r\n                            isOpen: true,\r\n                            operation: operation,\r\n                            screenName: screenName,\r\n                            openModal: true,\r\n                            ncontrolCode: ncontrolCode,\r\n                            loading: false\r\n                        }\r\n                    });\r\n                } else {\r\n                    toast.warn(intl.formatMessage({\r\n                        id: response[3].data.Status\r\n                    }));\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: { \r\n                            operation: operation,\r\n                            screenName: screenName,\r\n                            ncontrolCode: ncontrolCode,\r\n                            loading: false\r\n                        }\r\n                    });\r\n\r\n                }\r\n\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(intl.formatMessage({\r\n                        id: error.message\r\n                    }));\r\n                } else {\r\n                    toast.warn(intl.formatMessage({\r\n                        id: error.response.data\r\n                    }));\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport const getTabDetails = (inputParam) => {\r\n    return function (dispatch) {\r\n\r\n        const instrumentValidation = inputParam.instrumentValidation;\r\n        const instrumentCalibration = inputParam.instrumentCalibration;\r\n        const instrumentMaintenance = inputParam.instrumentMaintenance;\r\n        let urlArray = [];\r\n        dispatch(initRequest(true));\r\n        if (inputParam.screenName === \"IDS_INSTRUMENTVALIDATION\") {\r\n            urlArray.push(rsapi.post(\"/instrument/getothertabdetails\", {\r\n                ninstrumentcode: instrumentValidation.ninstrumentcode,\r\n                \"nFlag\": inputParam.nFlag,\r\n                ninstrumentvalidationcode: instrumentValidation.ninstrumentvalidationcode,\r\n                userinfo: inputParam.userInfo\r\n            }))\r\n        } else if (inputParam.screenName === \"IDS_INSTRUMENTCALIBRATION\") {\r\n            urlArray.push(rsapi.post(\"/instrument/getothertabdetails\", {\r\n                ninstrumentcode: instrumentCalibration.ninstrumentcode,\r\n                \"nFlag\": inputParam.nFlag,\r\n                ninstrumentcalibrationcode: instrumentCalibration.ninstrumentcalibrationcode,\r\n                userinfo: inputParam.userInfo\r\n            }))\r\n        } else if (inputParam.screenName === \"IDS_INSTRUMENTMAINTENANCE\") {\r\n            urlArray.push(rsapi.post(\"/instrument/getothertabdetails\", {\r\n                ninstrumentcode: instrumentMaintenance.ninstrumentcode,\r\n                \"nFlag\": inputParam.nFlag,\r\n                ninstrumentmaintenancecode: instrumentMaintenance.ninstrumentmaintenancecode,\r\n                userinfo: inputParam.userInfo\r\n            }))\r\n        }\r\n\r\n        Axios.all(urlArray)\r\n\r\n            .then(response => {\r\n                let masterData = inputParam.masterData\r\n                masterData = {\r\n                    ...masterData,\r\n                    ...response[0].data\r\n                };\r\n                sortData(masterData);\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData,\r\n                        loading: false\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                });\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            });\r\n    }\r\n}\r\n\r\nexport const getDataForAddEditMaintenance = (screenName, operation, userInfo, ncontrolCode, selectedRecord, masterData, primaryKeyName) => {\r\n    return function (dispatch) {\r\n        let urlArray = [];\r\n        const timeZoneService = rsapi.post(\"timezone/getTimeZone\");\r\n        \r\n        const LastMaintenanceDateService =\r\n                rsapi.post(\"instrument/getInstrumentLastMaintenanceDate\", {\r\n                    \"userinfo\": userInfo,\r\n                    ninstrumentcode: masterData.selectedInstrument.ninstrumentcode\r\n        });\r\n        \r\n        const maintenanceStatusService = rsapi.post(\"instrument/getInstrumentMaintenanceStatus\", {\r\n            \"userinfo\": userInfo  \r\n         });\r\n\r\n        if (operation === \"create\") {\r\n            const maintenanceValidationService = rsapi.post(\"instrument/getInstrumentMaintenanceValidation\", {\r\n                \"userinfo\": userInfo,\r\n                nFlag: 1,\r\n                ninstrumentcode: masterData.selectedInstrument.ninstrumentcode\r\n            });\r\n\r\n            urlArray = [maintenanceStatusService, LastMaintenanceDateService, timeZoneService, maintenanceValidationService];\r\n\r\n        } else {\r\n            const maintenanceValidationService = rsapi.post(\"instrument/getInstrumentMaintenanceValidation\", {\r\n                \"userinfo\": userInfo,\r\n                nFlag: 2,\r\n                ninstrumentmaintenancecode: masterData.selectedInstrumentMaintenance.ninstrumentmaintenancecode,\r\n                ninstrumentcode: masterData.selectedInstrumentMaintenance.ninstrumentcode\r\n            });\r\n\r\n            const MaintenanceById = rsapi.post(\"instrument/getActiveInstrumentMaintenanceById\", {\r\n                [primaryKeyName]: masterData.selectedInstrumentMaintenance.ninstrumentmaintenancecode,\r\n                \"userinfo\": userInfo\r\n            });\r\n\r\n            urlArray = [maintenanceStatusService, LastMaintenanceDateService, timeZoneService, maintenanceValidationService, MaintenanceById];\r\n\r\n        }\r\n\r\n        dispatch(initRequest(true));\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                let MaintenanceStatus = [];\r\n                let TimeZoneList = [];\r\n                if (response[3].data.OpenCloseStatus === \"Success\") {\r\n                    let selectedRecord = {};\r\n                    let MaintenanceData = [];\r\n\r\n                    const maintenanceMap = constructOptionList(response[0].data.MaintenanceStatus || [], \"ntranscode\",\r\n                        \"stransstatus\", undefined, undefined, false);\r\n\r\n                        MaintenanceStatus = maintenanceMap.get(\"OptionList\");\r\n                    let Action;\r\n                    let ntzlastmaintenancedate = [];\r\n                    let ntzduedate = [];\r\n                    const timezoneMap = constructOptionList(response[2].data || [], \"ntimezonecode\",\r\n                        \"stimezoneid\", undefined, undefined, false);\r\n\r\n                    TimeZoneList = timezoneMap.get(\"OptionList\");\r\n                    if (operation === \"create\") {\r\n                        let date = rearrangeDateFormat(userInfo, response[1].data.date);\r\n                        selectedRecord[\"dlastmaintenancedate\"] = date;\r\n                        selectedRecord[\"dduedate\"] = rearrangeDateFormat(userInfo, new Date());\r\n                        Action = 'Add';\r\n\r\n                    }\r\n                    if (operation === \"update\") {\r\n                        Action = 'Edit';\r\n\r\n                        MaintenanceData.push({\r\n                            \"value\": response[4].data[\"nmaintenancestatus\"],\r\n                            \"label\": response[4].data[\"stransdisplaystatus\"]\r\n                        });\r\n                        selectedRecord = response[4].data;\r\n                        selectedRecord[\"ntranscode\"] = MaintenanceData[0];\r\n\r\n                        ntzlastmaintenancedate.push({\r\n                            \"value\": response[4].data[\"ntzlastmaintenancedate\"],\r\n                            \"label\": response[4].data[\"stzlastmaintenancedate\"]\r\n                        });\r\n                        ntzduedate.push({\r\n                            \"value\": response[4].data[\"ntzduedate\"],\r\n                            \"label\": response[4].data[\"stzduedate\"]\r\n                        });\r\n                        selectedRecord[\"ntzlastmaintenancedate\"] = ntzlastmaintenancedate[0];\r\n                        selectedRecord[\"ntzduedate\"] = ntzduedate[0];\r\n                        if (response[4].data[\"slastmaintenancedate\"] !== \"\") {\r\n\r\n                            selectedRecord[\"dlastmaintenancedate\"] = rearrangeDateFormat(userInfo, response[4].data[\"slastmaintenancedate\"]); //new Date(response[7].data[\"smanufacdate\"]);\r\n                        }\r\n                        if (response[4].data[\"sduedate\"] !== \"\") {\r\n\r\n                            selectedRecord[\"dduedate\"] = rearrangeDateFormat(userInfo, response[4].data[\"sduedate\"]); //new Date(response[7].data[\"smanufacdate\"]);\r\n                        }\r\n\r\n                    }\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            MaintenanceStatus,\r\n                            Action: Action,\r\n                            TimeZoneList,\r\n                            selectedRecord: selectedRecord,\r\n                            isOpen: true,\r\n                            operation: operation,\r\n                            screenName: screenName,\r\n                            openModal: true,\r\n                            ncontrolCode: ncontrolCode,\r\n                            loading: false\r\n                        }\r\n                    });\r\n                } else {\r\n                    toast.warn(intl.formatMessage({\r\n                        id: response[3].data.Status\r\n                    }));\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {  \r\n                            operation: operation,\r\n                            screenName: screenName,\r\n                            ncontrolCode: ncontrolCode,\r\n                            loading: false\r\n                        }\r\n                    });\r\n\r\n                }\r\n\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(intl.formatMessage({\r\n                        id: error.message\r\n                    }));\r\n                } else {\r\n                    toast.warn(intl.formatMessage({\r\n                        id: error.response.data\r\n                    }));\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport const OpenDate = (screenName, userInfo, ncontrolCode, selectedRecord, masterData) => {\r\n    return function (dispatch) {\r\n        let urlArray = [];\r\n        const timeZoneService = rsapi.post(\"timezone/getTimeZone\");\r\n        const UTCtimeZoneService = rsapi.post(\"timezone/getLocalTimeByZone\", {\r\n            userinfo: userInfo\r\n        });\r\n\r\n        if (screenName === \"IDS_INSTRUMENTCALIBRATION\") {\r\n            const calibrationValidationService = rsapi.post(\"instrument/getInstrumentCalibrationValidation\", {\r\n                \"userinfo\": userInfo,\r\n                nFlag: 3,\r\n                ninstrumentcalibrationcode: masterData.selectedInstrumentCalibration.ninstrumentcalibrationcode,\r\n                ninstrumentcode: masterData.selectedInstrumentCalibration.ninstrumentcode\r\n            });\r\n\r\n            const calibrationStatusService = rsapi.post(\"instrument/getInstrumentCalibrationOpenDateStatus\", {\r\n                \"userinfo\": userInfo,\r\n                nFlag: 2,\r\n                ninstrumentcalibrationcode: masterData.selectedInstrumentCalibration.ninstrumentcalibrationcode\r\n            });\r\n            urlArray = [calibrationStatusService, timeZoneService, UTCtimeZoneService, calibrationValidationService];\r\n        } else {\r\n            const maintenanceValidationService = rsapi.post(\"instrument/getInstrumentMaintenanceValidation\", {\r\n                \"userinfo\": userInfo,\r\n                nFlag: 3,\r\n                ninstrumentmaintenancecode: masterData.selectedInstrumentMaintenance.ninstrumentmaintenancecode,\r\n                ninstrumentcode: masterData.selectedInstrumentMaintenance.ninstrumentcode\r\n            });\r\n\r\n            const maintenanceStatusService = rsapi.post(\"instrument/getInstrumentMaintenanceOpenCloseDateStatus\", {\r\n                \"userinfo\": userInfo,\r\n                nFlag: 2,\r\n                ninstrumentmaintenancecode: masterData.selectedInstrumentMaintenance.ninstrumentmaintenancecode\r\n            });\r\n            urlArray = [maintenanceStatusService, timeZoneService, UTCtimeZoneService, maintenanceValidationService];\r\n        }\r\n\r\n        dispatch(initRequest(true));\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                if (response[3].data.OpenCloseStatus === \"Success\") {\r\n\r\n                    let CalibrationStatus = {};\r\n                    let MaintenanceStatus = {};\r\n\r\n                    let selectedRecord = {};\r\n                    const timezoneMap = constructOptionList(response[1].data || [], \"ntimezonecode\",\r\n                        \"stimezoneid\", undefined, undefined, false);\r\n\r\n                    const TimeZoneList = timezoneMap.get(\"OptionList\");\r\n                    let date = rearrangeDateFormat(userInfo, response[2].data);\r\n                    selectedRecord[\"dopendate\"] = date;\r\n                    if (screenName === \"IDS_INSTRUMENTCALIBRATION\") {\r\n                        const calibrationMap = constructOptionList(response[0].data.CalibrationStatus || [], \"ntranscode\",\r\n                            \"stransstatus\", undefined, undefined, false);\r\n\r\n                        CalibrationStatus = calibrationMap.get(\"OptionList\");\r\n                    } else {\r\n                        const maintenanceMap = constructOptionList(response[0].data.MaintenanceStatus || [], \"ntranscode\",\r\n                            \"stransstatus\", undefined, undefined, false);\r\n\r\n                        MaintenanceStatus = maintenanceMap.get(\"OptionList\");\r\n                    }\r\n\r\n                    let operation = \"create\";\r\n                    let modalTitle = \"IDS_OPENDATE\";\r\n\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            isOpen: true,\r\n                            selectedRecord: selectedRecord,\r\n                            operation: operation,\r\n                            modalTitle: modalTitle,\r\n                            CalibrationStatus: CalibrationStatus,\r\n                            MaintenanceStatus: MaintenanceStatus,\r\n                            TimeZoneList: TimeZoneList,\r\n                            screenName: screenName,\r\n                            modalShow: true,\r\n                            ncontrolCode: ncontrolCode,\r\n                            loading: false\r\n                        }\r\n                    });\r\n                } else {\r\n                    toast.warn(intl.formatMessage({\r\n                        id: response[3].data.Status\r\n                    }));\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            ncontrolCode: ncontrolCode,\r\n                            loading: false\r\n                        }\r\n                    });\r\n\r\n                }\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(intl.formatMessage({\r\n                        id: error.message\r\n                    }));\r\n                } else {\r\n                    toast.warn(intl.formatMessage({\r\n                        id: error.response.data\r\n                    }));\r\n                }\r\n            })\r\n    }\r\n}\r\nexport const CloseDate = (screenName, userInfo, ncontrolCode, selectedRecord, masterData) => {\r\n    return function (dispatch) {\r\n        let urlArray = [];\r\n        const timeZoneService = rsapi.post(\"timezone/getTimeZone\");\r\n        const UTCtimeZoneService = rsapi.post(\"timezone/getLocalTimeByZone\", {\r\n            userinfo: userInfo\r\n        });\r\n\r\n        if (screenName === \"IDS_INSTRUMENTCALIBRATION\") {\r\n            const calibrationValidationService = rsapi.post(\"instrument/getInstrumentCalibrationValidation\", {\r\n                \"userinfo\": userInfo,\r\n                nFlag: 4,\r\n                ninstrumentcalibrationcode: masterData.selectedInstrumentCalibration.ninstrumentcalibrationcode,\r\n                ninstrumentcode: masterData.selectedInstrumentCalibration.ninstrumentcode\r\n            });\r\n\r\n            const calibrationStatusService = rsapi.post(\"instrument/getInstrumentCalibrationOpenDateStatus\", {\r\n                \"userinfo\": userInfo,\r\n                nFlag: 2,\r\n                ninstrumentcalibrationcode: masterData.selectedInstrumentCalibration.ninstrumentcalibrationcode\r\n            });\r\n            urlArray = [calibrationStatusService, timeZoneService, UTCtimeZoneService, calibrationValidationService];\r\n        } else {\r\n            const maintenanceValidationService = rsapi.post(\"instrument/getInstrumentMaintenanceValidation\", {\r\n                \"userinfo\": userInfo,\r\n                nFlag: 4,\r\n                ninstrumentmaintenancecode: masterData.selectedInstrumentMaintenance.ninstrumentmaintenancecode,\r\n                ninstrumentcode: masterData.selectedInstrumentMaintenance.ninstrumentcode\r\n            });\r\n\r\n            const maintenanceStatusService = rsapi.post(\"instrument/getInstrumentMaintenanceOpenCloseDateStatus\", {\r\n                \"userinfo\": userInfo,\r\n                nFlag: 2,\r\n                ninstrumentmaintenancecode: masterData.selectedInstrumentMaintenance.ninstrumentmaintenancecode\r\n            });\r\n            urlArray = [maintenanceStatusService, timeZoneService, UTCtimeZoneService, maintenanceValidationService];\r\n        }\r\n\r\n        dispatch(initRequest(true));\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                if (response[3].data.OpenCloseStatus === \"Success\") {\r\n\r\n                    let CalibrationStatus = [];\r\n                    let MaintenanceStatus = {};\r\n\r\n                    let selectedRecord = {};\r\n                    let date = rearrangeDateFormat(userInfo, response[2].data);\r\n                    selectedRecord[\"dclosedate\"] = date;\r\n                    const timezoneMap = constructOptionList(response[1].data || [], \"ntimezonecode\",\r\n                        \"stimezoneid\", undefined, undefined, false);\r\n\r\n                    const TimeZoneList = timezoneMap.get(\"OptionList\");\r\n                    if (screenName === \"IDS_INSTRUMENTCALIBRATION\") {\r\n                        const calibrationMap = constructOptionList(response[0].data.CalibrationStatus || [], \"ntranscode\",\r\n                            \"stransstatus\", undefined, undefined, false);\r\n\r\n                        CalibrationStatus = calibrationMap.get(\"OptionList\");\r\n                    } else {\r\n                        const maintenanceMap = constructOptionList(response[0].data.MaintenanceStatus || [], \"ntranscode\",\r\n                            \"stransstatus\", undefined, undefined, false);\r\n\r\n                        MaintenanceStatus = maintenanceMap.get(\"OptionList\");\r\n                    }\r\n                    let operation = \"create\";\r\n                    let modalTitle = \"IDS_CLOSEDATE\";\r\n\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            isOpen: true,\r\n                            selectedRecord: selectedRecord,\r\n                            operation: operation,\r\n                            modalTitle: modalTitle,\r\n                            CalibrationStatus: CalibrationStatus,\r\n                            MaintenanceStatus: MaintenanceStatus,\r\n                            TimeZoneList: TimeZoneList,\r\n                            screenName: screenName,\r\n                            modalShow: true,\r\n                            ncontrolCode: ncontrolCode,\r\n                            loading: false\r\n                        }\r\n                    });\r\n                } else {\r\n                    toast.warn(intl.formatMessage({\r\n                        id: response[3].data.Status\r\n                    }));\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            ncontrolCode: ncontrolCode,\r\n                            loading: false\r\n                        }\r\n                    });\r\n\r\n                }\r\n\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(intl.formatMessage({\r\n                        id: error.message\r\n                    }));\r\n                } else {\r\n                    toast.warn(intl.formatMessage({\r\n                        id: error.response.data\r\n                    }));\r\n                }\r\n            })\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}