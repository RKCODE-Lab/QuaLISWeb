{"ast":null,"code":"var _jsxFileName = \"E:\\\\WorkingFolder\\\\React_Postgres\\\\ALPD\\\\branches\\\\SOURCE-513-PROD\\\\SOURCE-513-ALPD-5304\\\\QuaLISWeb\\\\src\\\\components\\\\type3component\\\\Type3Component.jsx\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { injectIntl } from 'react-intl';\nimport { Row, Col } from 'react-bootstrap';\nimport { toast } from 'react-toastify';\nimport { process } from '@progress/kendo-data-query';\nimport DataGrid from '../../components/data-grid/data-grid.component';\nimport Esign from '../../pages/audittrail/Esign';\nimport SlideOutModal from '../slide-out-modal/SlideOutModal';\nimport { getFieldSpecification } from './Type3FieldSpecificationList';\nimport AddType3Component from './AddType3Component';\nimport { callService, crudMaster, updateStore, validateEsignCredential, fetchRecordCombo, onComboLoad, onServiceLoad, syncAction } from '../../actions';\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\nimport { showEsign, getControlMap, extractFieldHeader, formatInputDate, validateEmail, rearrangeDateFormatDateOnly } from '../CommonScript';\nimport { ListWrapper } from '../client-group.styles';\nimport { transactionStatus, designComponents, formCode } from '../Enumeration';\nimport ConfirmMessage from \"../../components/confirm-alert/confirm-message.component\";\nimport AddSynonym from '../../components/droparea/AddSynonym';\n\nconst mapStateToProps = state => {\n  return {\n    Login: state.Login\n  };\n};\n\nclass Type3Component extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.dataStateChange = event => {\n      this.setState({\n        dataResult: process(this.state.data ? this.state.data : [], event.dataState),\n        dataState: event.dataState\n      });\n    };\n\n    this.openModal = ncontrolCode => {\n      let comboColumnField = [];\n      this.extractedColumnList.map(item => {\n        if (item.ndesigncomponentcode === designComponents.COMBOBOX) {\n          comboColumnField.push(item);\n        } else if (item.ndesigncomponentcode === designComponents.CHECKBOX) {\n          comboColumnField.push(item);\n        }\n      });\n      this.props.onComboLoad(\"create\", this.props.Login.userInfo, this.props.Login.inputParam, ncontrolCode, comboColumnField, this.props.Login.integrationSettings);\n    };\n\n    this.closeModal = () => {\n      // ALPD-5354 - added by gowtham on 07/02/2025 - Created Multilingual Field of OOS Work Flow Type Screen\n      if (this.state.showSynonym) {\n        this.setState({\n          showSynonym: !this.state.showSynonym\n        });\n      } else {\n        let loadEsign = this.props.Login.loadEsign;\n        let openModal = this.props.Login.openModal;\n        let selectedRecord = this.props.Login.selectedRecord;\n        let selectedId = this.props.Login.selectedId;\n\n        if (this.props.Login.loadEsign) {\n          if (this.props.Login.operation === \"delete\" || this.props.Login.operation == \"sync\" || this.props.Login.operation === \"default\") {\n            loadEsign = false;\n            openModal = false;\n            selectedRecord = {};\n          } else {\n            loadEsign = false;\n            selectedRecord['esignpassword'] = \"\";\n            selectedRecord['esigncomments'] = \"\";\n            selectedRecord['esignreason'] = \"\";\n          }\n        } else {\n          openModal = false;\n          selectedRecord = {};\n          selectedId = null;\n        }\n\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            openModal,\n            loadEsign,\n            selectedRecord,\n            //selectedId:null \n            selectedId\n          }\n        };\n        this.props.updateStore(updateInfo);\n      }\n    };\n\n    this.custombuttonclick = (event, component) => {\n      event.preventDefault();\n      event.stopPropagation();\n      const inputparam = {\n        component,\n        userinfo: this.props.Login.userInfo,\n        selectedRecord: this.state.selectedRecord\n      };\n      this.props.getDynamicFilter(inputparam);\n    };\n\n    this.onInputOnChange = (event, item, fieldName) => {\n      const selectedRecord = this.state.selectedRecord || {};\n      let value = event.target.value;\n\n      if (item !== 'synonym') {\n        // ALPD-5354 - added by gowtham on 07/02/2025 - Created Multilingual Field of OOS Work Flow Type Screen\n        if (item && item.zeroNotAllowed && item.zeroNotAllowed && value === '0') {\n          value = \"\";\n        }\n\n        if (event.target.type === 'checkbox') {\n          selectedRecord[event.target.name] = event.target.checked === true ? 3 : 4;\n        } else {\n          if (item && item.isSynonymNeed) {\n            // selectedRecord[event.target.name] = selectedRecord[item.ssynonymname] = event.target.value;\n            selectedRecord[event.target.name] = selectedRecord[item.ssynonymname] = value;\n          } else if (item && item.ismultilingual) {\n            let objLang = {};\n            this.props.Login.languageList.map(item => {\n              objLang[item.value] = value;\n            });\n\n            if (value === \"\" && item.mandatory === \"true\") {\n              selectedRecord[event.target.name] = \"\";\n            } else {\n              selectedRecord[event.target.name] = { ...objLang\n              };\n            }\n          } else {\n            // selectedRecord[event.target.name] = event.target.value;\n            selectedRecord[event.target.name] = value;\n          }\n        }\n\n        if (event.target.type === 'textbox') {\n          selectedRecord[item.existinglength] = true;\n        }\n\n        if (item && item.readOnlyChild) {\n          // selectedRecord[item.readOnlyChild] = event.target.value;\n          selectedRecord[item.readOnlyChild] = value;\n        }\n      } else {\n        selectedRecord[fieldName] = { ...selectedRecord[fieldName],\n          [event.target.name]: value\n        };\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onComboChange = (comboData, fieldName, comboItem) => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (comboData !== null) {\n        if (comboItem.foreignDataField) {\n          selectedRecord[comboItem.foreignDataField] = comboData.value;\n        }\n      }\n\n      selectedRecord[fieldName] = comboData;\n\n      if (comboItem.readOnlyChild) {\n        selectedRecord[comboItem.readOnlyChild] = comboData.item[comboItem.readOnlyParentData];\n      }\n\n      if (comboItem.onChangeUrl != undefined) {\n        const dataList = { ...this.props.Login.dataList\n        }; // let inputData={\n        //     primarykeyvalue: parseInt(comboData.value),\n        // }\n\n        let inputData = {\n          dataList,\n          selectedRecord\n        };\n        let comboColumnField = [];\n        let primarykeyvalue = {};\n        primarykeyvalue[comboItem.tableDataField] = comboData.value;\n        this.extractedColumnList.map(item => {\n          if (item.onChangeUrl != undefined) {\n            if (item.ndesigncomponentcode === designComponents.COMBOBOX) {\n              if (item.tableDataField === comboItem.tableDataField) {\n                comboColumnField.push(item);\n              }\n            }\n          }\n        });\n        this.props.onServiceLoad(this.props.Login.userInfo, this.props.Login.inputParam, this.props.Login.ncontrolCode, comboColumnField, primarykeyvalue, inputData);\n      } else {\n        this.setState({\n          selectedRecord\n        });\n      }\n    };\n\n    this.handleDateChange = (dateName, dateValue, item) => {\n      const {\n        selectedRecord\n      } = this.state;\n      selectedRecord[dateName] = dateValue;\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onNumericInputOnChange = (value, name, item) => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (item.zeroNotAllowed && item.zeroNotAllowed && value === 0) {\n        value = \"\";\n      }\n\n      if (item.child) {\n        if (item.min >= value && value !== 0 || item.max >= value && value !== 0) {\n          selectedRecord.ncodelength = value;\n        }\n\n        selectedRecord[item.childdatafield] && delete selectedRecord[item.childdatafield];\n      } else if (item && item.maxValue) {\n        //added by vignesh for Sample Storage Structure row column max value\n        if (this.props.Login.settings[39] && parseInt(this.props.Login.settings[39]) >= value) {\n          selectedRecord[name] = value;\n        }\n      } else {\n        selectedRecord[name] = value;\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.toggleSwitch = (switchParam, item, event) => {\n      let dataItem = { ...switchParam.selectedRecord\n      };\n      let selectedId = this.props.Login.selectedId;\n\n      if (event.target.type === 'checkbox') {\n        dataItem[item.switchFieldName] = event.target.checked === true ? 3 : 4;\n      }\n\n      const inputParam = {\n        classUrl: this.props.Login.inputParam.classUrl,\n        methodUrl: this.props.Login.inputParam.methodUrl,\n        displayName: this.props.Login.inputParam.displayName,\n        inputData: {\n          [this.props.Login.inputParam.methodUrl.toLowerCase()]: dataItem,\n          \"userinfo\": this.props.Login.userInfo\n        },\n        operation: switchParam.operation,\n        dataState: this.state.dataState,\n        selectedId,\n        selectedRecord: { ...this.state.selectedRecord\n        }\n      };\n      const masterData = switchParam.masterData;\n      const esignNeeded = showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, switchParam.ncontrolCode);\n\n      if (esignNeeded) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              dataItem\n            },\n            openModal: true,\n            screenName: this.props.intl.formatMessage({\n              id: this.props.Login.inputParam.displayName\n            }),\n            operation: switchParam.operation,\n            masterData\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, masterData, \"openModal\");\n      }\n    };\n\n    this.onChangeSynonym = (event, FieldName, item) => {\n      this.setState({\n        showSynonym: !this.state.showSynonym,\n        FieldName,\n        item\n      });\n    };\n\n    this.deleteRecord = deleteParam => {\n      const inputParam = {\n        classUrl: this.props.Login.inputParam.classUrl,\n        methodUrl: this.props.Login.inputParam.methodUrl,\n        displayName: this.props.Login.inputParam.displayName,\n        inputData: {\n          [this.props.Login.inputParam.methodUrl.toLowerCase()]: deleteParam.selectedRecord,\n          \"userinfo\": this.props.Login.userInfo\n        },\n        operation: deleteParam.operation,\n        dataState: this.state.dataState,\n        selectedRecord: { ...this.state.selectedRecord\n        }\n      };\n      const esignNeeded = showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, deleteParam.ncontrolCode);\n\n      if (esignNeeded) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData: this.props.Login.masterData\n            },\n            openModal: true,\n            screenName: this.props.intl.formatMessage({\n              id: this.props.Login.inputParam.displayName\n            }),\n            operation: deleteParam.operation\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\n      }\n    };\n\n    this.reloadData = () => {\n      const inputParam = {\n        inputData: {\n          \"userinfo\": this.props.Login.userInfo\n        },\n        classUrl: this.props.Login.inputParam.classUrl,\n        methodUrl: this.props.Login.inputParam.methodUrl,\n        displayName: this.props.Login.inputParam.displayName,\n        userInfo: this.props.Login.userInfo\n      };\n      this.props.callService(inputParam);\n    };\n\n    this.syncData = syncId => {\n      let classUrl;\n      let methodUrl;\n\n      if (this.props.Login.inputParam.displayName === \"Fusion Site\") {\n        classUrl = \"fusionsite\";\n        methodUrl = \"FusionSite\";\n      } else if (this.props.Login.inputParam.displayName === \"Fusion Plant\") {\n        classUrl = \"fusionplant\";\n        methodUrl = \"FusionPlant\";\n      } else if (this.props.Login.inputParam.displayName === \"Fusion Users\") {\n        classUrl = \"fusionusers\";\n        methodUrl = \"FusionUsers\";\n      } else if (this.props.Login.inputParam.displayName === \"Fusion Plant User\") {\n        classUrl = \"fusionplantuser\";\n        methodUrl = \"FusionPlantUser\";\n      }\n\n      let inputParam = {\n        inputData: {\n          \"userinfo\": this.props.Login.userInfo\n        },\n        classUrl: classUrl,\n        methodUrl: methodUrl,\n        operation: \"sync\",\n        displayName: this.props.Login.inputParam.displayName,\n        userInfo: this.props.Login.userInfo\n      };\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, syncId)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData: { ...this.props.Login.masterData\n              }\n            },\n            openModal: true,\n            screenName: this.props.intl.formatMessage({\n              id: this.props.Login.inputParam.displayName\n            }),\n            operation: \"sync\"\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.syncAction(inputParam);\n      }\n    };\n\n    this.onSaveClick = (saveType, formRef) => {\n      let result = true;\n      let emailFieldName = [];\n      let validateCodeLength = true;\n      let inputData = [];\n      inputData[\"userinfo\"] = this.props.Login.userInfo;\n      let dataState = undefined;\n      let selectedId = null;\n      let fieldList = getFieldSpecification().get(this.props.Login.inputParam.methodUrl) || [];\n      let selectedRecordPrimarykey = fieldList[0].dataField;\n      let clearSelectedRecordField = [];\n      inputData[this.props.Login.inputParam.methodUrl.toLowerCase()] = {\n        \"nsitecode\": this.props.Login.userInfo.nmastersitecode\n      };\n      this.extractedColumnList.map(item => {\n        let fieldName = item.dataField; //ALPD-5063 added by Dhanushya RI,Enable save and continue option in Type3 component based screen\n\n        if (saveType === transactionStatus.DEACTIVE && item.controlType !== \"NA\" && item.isClearField === true) {\n          clearSelectedRecordField.push(item);\n        }\n\n        if (item.isEmail === true) {\n          let validateEmailValue = this.state.selectedRecord[item.dataField] ? validateEmail(this.state.selectedRecord[item.dataField]) : true;\n\n          if (validateEmailValue === false) {\n            result = false;\n            emailFieldName.push(item.idsName);\n          }\n        }\n\n        if (item.validateCodeLength === true) {\n          //Janakumar Added the visit code legth validation \n          if (this.state.selectedRecord[item.codelength] === this.state.selectedRecord[fieldName].length) {\n            inputData[this.props.Login.inputParam.methodUrl.toLowerCase()][fieldName] = this.state.selectedRecord[fieldName] ? this.state.selectedRecord[fieldName] : \"\";\n          } else {\n            validateCodeLength = false;\n          }\n        }\n\n        if (item.isJsonField === true) {\n          return inputData[this.props.Login.inputParam.methodUrl.toLowerCase()][item.jsonObjectName] = { ...inputData[this.props.Login.inputParam.methodUrl.toLowerCase()][item.jsonObjectName],\n            [fieldName]: this.state.selectedRecord[fieldName] ? this.state.selectedRecord[fieldName] : \"\"\n          };\n        } else {\n          if (item.controlType === \"selectbox\") {\n            inputData[this.props.Login.inputParam.methodUrl.toLowerCase()][fieldName] = this.state.selectedRecord[fieldName] ? this.state.selectedRecord[fieldName].label ? this.state.selectedRecord[fieldName].label : \"\" : -1;\n            inputData[this.props.Login.inputParam.methodUrl.toLowerCase()][item.foreignDataField] = this.state.selectedRecord[fieldName] ? this.state.selectedRecord[fieldName].value ? this.state.selectedRecord[fieldName].value : -1 : -1;\n\n            if (this.props.Login.inputParam.methodUrl === \"LimsElnUsermapping\" && this.state.selectedRecord.username && this.state.selectedRecord.username.item && this.state.selectedRecord.username.item.multiusergroupcode) {\n              this.state.selectedRecord.username.item.multiusergroupcode.forEach(dataItem => {\n                if (dataItem.defaultusergroup !== \"undefined\") {\n                  inputData[this.props.Login.inputParam.methodUrl.toLowerCase()][\"nelnusergroupcode\"] = dataItem.lsusergroup.usergroupcode;\n                }\n              });\n            } //return inputData;\n\n          } else if (item.controlType === \"datepicker\") {\n            inputData[this.props.Login.inputParam.methodUrl.toLowerCase()][item.dateField] = formatInputDate(this.state.selectedRecord[fieldName] ? this.state.selectedRecord[fieldName] : \"\", false);\n          } else if (item.controlType === \"checkbox\") {\n            inputData[this.props.Login.inputParam.methodUrl.toLowerCase()][item.controlName] = this.state.selectedRecord[item.controlName] ? this.state.selectedRecord[item.controlName] : transactionStatus.NO;\n          } else if (item.controlType === \"numericinput\") {\n            inputData[this.props.Login.inputParam.methodUrl.toLowerCase()][fieldName] = this.state.selectedRecord[fieldName] ? this.state.selectedRecord[fieldName] : 0;\n          } else if (item.controlType === \"multiselect\") {\n            inputData[this.props.Login.inputParam.methodUrl.toLowerCase()][item.valueKey] = this.state.selectedRecord[fieldName].map(item => item.value).join(\", \");\n            inputData[this.props.Login.inputParam.methodUrl.toLowerCase()][item.valueName] = this.state.selectedRecord[fieldName].map(item => item.label).join(\", \");\n          } else {\n            inputData[this.props.Login.inputParam.methodUrl.toLowerCase()][fieldName] = this.state.selectedRecord[fieldName] ? this.state.selectedRecord[fieldName] : \"\";\n          }\n\n          inputData[this.props.Login.inputParam.methodUrl.toLowerCase()][selectedRecordPrimarykey] = this.props.Login.selectedId;\n          return inputData;\n        }\n      });\n\n      if (this.props.Login.operation == \"update\") {\n        dataState = this.state.dataState;\n        selectedId = this.props.Login.selectedId;\n      } // ALPD-5354 - added by gowtham on 07/02/2025 - Created Multilingual Field of OOS Work Flow Type Screen\n\n\n      const multilingualfields = this.extractedColumnList.filter(item => item.ismultilingual === \"true\");\n      const jsondata = {};\n      multilingualfields.map(item => {\n        if (inputData[this.props.Login.inputParam.methodUrl.toLowerCase()][item.dataField] === \"\") {\n          let objLang = {};\n          this.props.Login.languageList.map(lang => {\n            objLang[lang.value] = \"\";\n          });\n          inputData[this.props.Login.inputParam.methodUrl.toLowerCase()][item.dataField] = { ...objLang\n          };\n        }\n\n        jsondata[item.dataField] = inputData[this.props.Login.inputParam.methodUrl.toLowerCase()][item.dataField];\n        delete inputData[this.props.Login.inputParam.methodUrl.toLowerCase()][item.dataField];\n      });\n      if (Object.keys(jsondata).length > 0) inputData[this.props.Login.inputParam.methodUrl.toLowerCase()][\"jsondata\"] = { ...jsondata\n      };\n      const inputParam = {\n        classUrl: this.props.Login.inputParam.classUrl,\n        methodUrl: this.props.Login.inputParam.methodUrl,\n        displayName: this.props.Login.inputParam.displayName,\n        inputData: inputData,\n        selectedId,\n        selectedRecord: { ...this.state.selectedRecord\n        },\n        operation: this.props.Login.operation,\n        saveType,\n        formRef,\n        dataState\n      };\n\n      if (result && validateCodeLength) {\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              loadEsign: true,\n              screenData: {\n                inputParam,\n                masterData: { ...this.props.Login.masterData\n                }\n              },\n              openModal: true,\n              screenName: this.props.intl.formatMessage({\n                id: this.props.Login.inputParam.displayName\n              }),\n              operation: this.props.Login.operation\n            }\n          };\n          this.props.updateStore(updateInfo);\n        } else {\n          // this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\n          this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\", '', this.confirmMessage, clearSelectedRecordField);\n        }\n      } else {\n        if (validateCodeLength === false) {\n          //janakumar r\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_ENTERCODEOFLENGTH\"\n          }));\n        } else {\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_ENTERVALIDEMAILOF\"\n          }) + this.props.intl.formatMessage({\n            id: emailFieldName[0]\n          }));\n        }\n      }\n    };\n\n    this.ConfirmDelete = (operation, deleteId) => {\n      this.confirmMessage.confirm(\"deleteMessage\", this.props.intl.formatMessage({\n        id: \"IDS_DELETE\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_DEFAULTCONFIRMMSG\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_OK\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_CANCEL\"\n      }), () => this.DeleteWorklist(operation, deleteId, operation.screenName ? operation.screenName : \"IDS_WORKLIST\"));\n    };\n\n    this.validateEsign = () => {\n      const inputParam = {\n        inputData: {\n          \"userinfo\": { ...this.props.Login.userInfo,\n            sreason: this.state.selectedRecord[\"esigncomments\"],\n            nreasoncode: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].value,\n            spredefinedreason: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].label\n          },\n          password: this.state.selectedRecord[\"esignpassword\"]\n        },\n        screenData: this.props.Login.screenData // screenStateData: {selected:{...this.state.selectedRecord}, masterData:{ ...this.props.Login.masterData}},\n\n      };\n      this.props.validateEsignCredential(inputParam, \"openModal\", this.confirmMessage);\n    };\n\n    this.formRef = React.createRef();\n    this.extractedColumnList = [];\n    this.extractedColumnList1 = [];\n    this.extractedDataGridColumnList = []; // ALPD-3660 VISHAKH\n\n    this.fieldList = [];\n    const _dataState = {\n      skip: 0,\n      take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n    };\n    this.state = {\n      data: [],\n      masterStatus: \"\",\n      error: \"\",\n      selectedRecord: {},\n      dataResult: [],\n      dataState: _dataState,\n      userRoleControlRights: [],\n      controlMap: new Map()\n    };\n    this.confirmMessage = new ConfirmMessage();\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\n      toast.warn(props.Login.masterStatus);\n      props.Login.masterStatus = \"\";\n    }\n\n    if (props.Login.error !== state.error) {\n      toast.error(props.Login.error);\n      props.Login.error = \"\";\n    }\n\n    return null;\n  } // fnextractedColumnList  =()=>\n  // {\n  //    // return this.extractedColumnList = this.extractedColumnList1 || [];\n  //     this.extractedColumnList1 = this.extractedColumnList;\n  //     if(item.child){\n  //         this.extractedColumnList.map((values, index)=>{\n  //             if( values.dataField == item.childdatafield )\n  //                 {\n  //                     //this.extractedColumnList[index]['fieldLength']= value.toString();\n  //                     this.extractedColumnList[index]['fieldLength']= value;\n  //                 }\n  //         //console.log(value, index);\n  //     })\n  //         }\n  // }\n\n\n  render() {\n    let primaryKeyField = \"\";\n    let fieldList = {};\n    let inputData = {\n      settings: this.props.Login.settings,\n      userInfo: this.props.Login.userInfo\n    };\n    const addId = this.props.Login.inputParam && this.state.controlMap.has(\"Add\".concat(this.props.Login.inputParam.methodUrl)) && this.state.controlMap.get(\"Add\".concat(this.props.Login.inputParam.methodUrl)).ncontrolcode;\n\n    if (this.props.Login.inputParam !== undefined) {\n      if (this.props.Login.inputParam.classUrl === \"limselnusermapping\") {\n        fieldList = getFieldSpecification(inputData).get(this.props.Login.inputParam.methodUrl) || []; // fieldList.forEach(item=>item.dataField === \"username\" ? \n        //     fieldList.push(\"methodUrl:\"+this.props.Login.integrationSettings[0].smethodname) :\"\"\n        // );  \n\n        for (let index = 0; index < fieldList.length; index++) {\n          if (fieldList[index].elnget) {\n            let smethodname = \"methodUrl\";\n            let fieldListNew = { ...fieldList[index],\n              methodUrl: this.props.Login.integrationSettings[0].smethodname,\n              classUrl: this.props.Login.integrationSettings[0].sclassurlname\n            }; // fieldList.slice(index)\n            //fieldList.push((fieldList[index]).toString())\n            //this.state.selectedRole.push((selectedRecord[index]).toString());\n\n            fieldList.splice(index, 1, fieldListNew);\n          }\n        }\n\n        this.extractedColumnList = extractFieldHeader(Object.values(fieldList));\n        primaryKeyField = Object.keys(fieldList).length > 0 ? fieldList[0].dataField : \"\";\n      } else if (this.props.Login.inputParam.classUrl === \"limselnsitemapping\") {\n        fieldList = getFieldSpecification(inputData).get(this.props.Login.inputParam.methodUrl) || []; // fieldList.forEach(item=>item.dataField === \"username\" ? \n        //     fieldList.push(\"methodUrl:\"+this.props.Login.integrationSettings[0].smethodname) :\"\"\n        // );  \n\n        for (let index = 0; index < fieldList.length; index++) {\n          if (fieldList[index].elnget) {\n            let smethodname = \"methodUrl\";\n            let fieldListNew = { ...fieldList[index],\n              methodUrl: this.props.Login.integrationSettings[1].smethodname,\n              classUrl: this.props.Login.integrationSettings[1].sclassurlname\n            }; // fieldList.slice(index)\n            //fieldList.push((fieldList[index]).toString())\n            //this.state.selectedRole.push((selectedRecord[index]).toString());\n\n            fieldList.splice(index, 1, fieldListNew);\n          }\n        }\n\n        this.extractedColumnList = extractFieldHeader(Object.values(fieldList));\n        primaryKeyField = Object.keys(fieldList).length > 0 ? fieldList[0].dataField : \"\";\n      } else {\n        fieldList = getFieldSpecification(inputData).get(this.props.Login.inputParam.methodUrl) || [];\n        this.extractedColumnList = extractFieldHeader(Object.values(fieldList)); //this.expandedField= expandedField(Object.values(fieldList));\n\n        primaryKeyField = Object.keys(fieldList).length > 0 ? fieldList[0].dataField : \"\";\n      } // START ALPD-3660 VISHAKH\n\n\n      let dataGridList = [...this.extractedColumnList];\n      this.extractedDataGridColumnList = dataGridList.filter(item => !(\"dataGridColumnHide\" in item && item[\"dataGridColumnHide\"] === true)); // END ALPD-3660 VISHAKH\n    }\n\n    const editId = this.props.Login.inputParam && this.state.controlMap.has(\"Edit\".concat(this.props.Login.inputParam.methodUrl)) && this.state.controlMap.get(\"Edit\".concat(this.props.Login.inputParam.methodUrl)).ncontrolcode;\n    const editParam = {\n      screenName: this.props.Login.inputParam && this.props.Login.inputParam.displayName && this.props.intl.formatMessage({\n        id: this.props.Login.inputParam.displayName\n      }),\n      operation: \"update\",\n      primaryKeyField,\n      inputParam: this.props.Login.inputParam,\n      integrationSettings: this.props.Login.integrationSettings,\n      userInfo: this.props.Login.userInfo,\n      ncontrolCode: editId,\n      masterData: this.props.Login.masterData,\n      extractedColumnList: this.extractedColumnList\n    };\n    const deleteParam = {\n      operation: \"delete\"\n    };\n    const switchParam = {\n      operation: \"default\",\n      masterData: this.props.Login.masterData\n    };\n    const mandatoryFields = [];\n    this.extractedColumnList.forEach(item => item.mandatory === true ? mandatoryFields.push(item) : \"\");\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(ListWrapper, {\n      className: \"client-list-content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 25\n      }\n    }, this.state.data ? /*#__PURE__*/React.createElement(DataGrid, {\n      primaryKeyField: primaryKeyField,\n      data: this.state.data,\n      dataResult: this.state.dataResult,\n      dataState: this.state.dataState,\n      dataStateChange: this.dataStateChange,\n      extractedColumnList: this.extractedDataGridColumnList // ALPD-3660 VISHAKH\n      ,\n      detailedFieldList: this.expandedField || [],\n      expandField: \"expanded\",\n      controlMap: this.state.controlMap,\n      userRoleControlRights: this.state.userRoleControlRights,\n      inputParam: this.props.Login.inputParam,\n      userInfo: this.props.Login.userInfo,\n      fetchRecord: this.props.fetchRecordCombo,\n      editParam: editParam,\n      deleteRecord: this.deleteRecord,\n      deleteParam: deleteParam,\n      reloadData: this.reloadData,\n      syncData: this.syncData,\n      addRecord: () => this.openModal(addId),\n      pageable: true,\n      scrollable: 'scrollable' // isComponent={true}\n      ,\n      gridHeight: '580px',\n      isActionRequired: true,\n      isToolBarRequired: true,\n      selectedId: this.props.Login.selectedId,\n      onToggleChange: this.toggleSwitch,\n      switchParam: switchParam,\n      groupable: this.props.Login.displayName === 'Material Accounting Plant Group' ? true : false,\n      settings: this.props.Login.settings,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 33\n      }\n    }) : \"\"))), this.props.Login.openModal ? /*#__PURE__*/React.createElement(SlideOutModal, {\n      show: this.props.Login.openModal,\n      closeModal: this.closeModal,\n      showSaveContinue: true //ALPD-5063 added by Dhanushya RI,Enable save and continue option in Type3 component based screen\n      ,\n      operation: this.props.Login.operation,\n      inputParam: this.props.Login.inputParam,\n      screenName: this.props.Login.screenName,\n      onSaveClick: this.onSaveClick,\n      hideSave: this.state.showSynonym // ALPD-5354 - added by gowtham on 07/02/2025 - Created Multilingual Field of OOS Work Flow Type Screen\n      ,\n      closeLabel: this.state.showSynonym ? \"IDS_CLOSE\" : undefined // ALPD-5354\n      ,\n      esign: this.props.Login.loadEsign,\n      validateEsign: this.validateEsign,\n      masterStatus: this.props.Login.masterStatus,\n      updateStore: this.props.updateStore,\n      selectedRecord: this.state.selectedRecord || {},\n      mandatoryFields: mandatoryFields // addComponentParam={{}}                   \n      // addComponent={this.addComponent}\n      ,\n      addComponent: this.props.Login.loadEsign ? /*#__PURE__*/React.createElement(Esign, {\n        operation: this.props.Login.operation,\n        onInputOnChange: this.onInputOnChange,\n        inputParam: this.props.Login.inputParam,\n        selectedRecord: this.state.selectedRecord || {},\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 287,\n          columnNumber: 29\n        }\n      }) : this.state.showSynonym ?\n      /*#__PURE__*/\n      // ALPD-5354 - added by gowtham on 07/02/2025 - Created Multilingual Field of OOS Work Flow Type Screen\n      React.createElement(AddSynonym, {\n        selectedFieldRecord: this.state.selectedRecord,\n        languages: this.props.Login.languageList || [],\n        fieldName: this.state.FieldName,\n        maxLength: this.state.item.fieldLength,\n        language: this.props.Login.language,\n        onInputOnChange: this.onInputOnChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 293,\n          columnNumber: 33\n        }\n      }) : /*#__PURE__*/React.createElement(AddType3Component, {\n        selectedRecord: this.state.selectedRecord || {},\n        onInputOnChange: this.onInputOnChange,\n        extractedColumnList: this.extractedColumnList,\n        onNumericInputOnChange: this.onNumericInputOnChange,\n        onComboChange: this.onComboChange,\n        handleDateChange: this.handleDateChange,\n        userInfo: this.props.Login.userInfo,\n        dataList: this.props.Login.dataList,\n        operation: this.props.Login.operation,\n        language: this.props.Login.language // ALPD-5354 - added by gowtham on 07/02/2025 - Created Multilingual Field of OOS Work Flow Type Screen\n        ,\n        onChangeSynonym: this.onChangeSynonym // ALPD-5354\n        ,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 301,\n          columnNumber: 31\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 269,\n        columnNumber: 21\n      }\n    }) : \"\");\n  }\n\n  componentDidUpdate(previousProps) {\n    if (this.props.Login.masterData !== previousProps.Login.masterData) {\n      if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\n        const userRoleControlRights = [];\n\n        if (this.props.Login.userRoleControlRights) {\n          this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item => userRoleControlRights.push(item.ncontrolcode));\n        }\n\n        const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode);\n\n        if (this.props.Login.inputParam.methodUrl === 'Purge' || this.props.Login.inputParam.methodUrl === 'RestoreMaster') {\n          for (let i = 0; i < this.props.Login.masterData.length; i++) {\n            //data.push(this.props.UserData[i].jsonuidata);\n            this.props.Login.masterData[i].stodate = rearrangeDateFormatDateOnly(this.props.Login.userInfo, this.props.Login.masterData[i].stodate);\n            this.props.Login.masterData[i].smodifieddate = rearrangeDateFormatDateOnly(this.props.Login.userInfo, this.props.Login.masterData[i].smodifieddate);\n          }\n        }\n\n        this.setState({\n          userRoleControlRights,\n          controlMap,\n          data: this.props.Login.masterData,\n          dataResult: process(this.props.Login.masterData ? this.props.Login.masterData : [], this.state.dataState)\n        });\n      } else {\n        let {\n          dataState\n        } = this.state;\n\n        if (this.props.Login.dataState === undefined) {\n          dataState = {\n            skip: 0,\n            take: this.state.dataState.take\n          };\n        }\n\n        if (this.state.dataResult.data) {\n          if (this.state.dataResult.data.length === 1) {\n            let skipcount = this.state.dataState.skip > 0 ? this.state.dataState.skip - this.state.dataState.take : this.state.dataState.skip;\n            dataState = {\n              skip: skipcount,\n              take: this.state.dataState.take\n            };\n          }\n        }\n\n        if (this.props.Login.masterData.length > 0) {\n          if (this.props.Login.inputParam.methodUrl === 'Purge' || this.props.Login.inputParam.methodUrl === 'RestoreMaster') {\n            for (let i = 0; i < this.props.Login.masterData.length; i++) {\n              //data.push(this.props.UserData[i].jsonuidata);\n              this.props.Login.masterData[i].stodate = rearrangeDateFormatDateOnly(this.props.Login.userInfo, this.props.Login.masterData[i].stodate);\n              this.props.Login.masterData[i].smodifieddate = rearrangeDateFormatDateOnly(this.props.Login.userInfo, this.props.Login.masterData[i].smodifieddate);\n            }\n          }\n        }\n\n        this.setState({\n          data: this.props.Login.masterData,\n          selectedRecord: this.props.Login.selectedRecord,\n          dataResult: process(this.props.Login.masterData ? this.props.Login.masterData : [], dataState),\n          dataState\n        });\n      }\n    }\n\n    if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\n      //Get selected value when clicking edit button\n      if (this.props.Login.selectedRecord) {\n        let {\n          selectedRecord\n        } = this.props.Login; // ALPD-5354 - added by gowtham on 07/02/2025 - Created Multilingual Field of OOS Work Flow Type Screen\n\n        if (this.props.Login.selectedRecord[\"jsondata\"]) {\n          selectedRecord = { ...selectedRecord,\n            ...selectedRecord[\"jsondata\"]\n          };\n          delete selectedRecord[\"jsondata\"];\n        }\n\n        this.setState({\n          selectedRecord\n        });\n      }\n    }\n  }\n\n}\n\nexport default connect(mapStateToProps, {\n  callService,\n  crudMaster,\n  updateStore,\n  validateEsignCredential,\n  syncAction,\n  fetchRecordCombo,\n  onComboLoad,\n  onServiceLoad\n})(injectIntl(Type3Component));","map":{"version":3,"sources":["E:/WorkingFolder/React_Postgres/ALPD/branches/SOURCE-513-PROD/SOURCE-513-ALPD-5304/QuaLISWeb/src/components/type3component/Type3Component.jsx"],"names":["React","connect","injectIntl","Row","Col","toast","process","DataGrid","Esign","SlideOutModal","getFieldSpecification","AddType3Component","callService","crudMaster","updateStore","validateEsignCredential","fetchRecordCombo","onComboLoad","onServiceLoad","syncAction","DEFAULT_RETURN","showEsign","getControlMap","extractFieldHeader","formatInputDate","validateEmail","rearrangeDateFormatDateOnly","ListWrapper","transactionStatus","designComponents","formCode","ConfirmMessage","AddSynonym","mapStateToProps","state","Login","Type3Component","Component","constructor","props","dataStateChange","event","setState","dataResult","data","dataState","openModal","ncontrolCode","comboColumnField","extractedColumnList","map","item","ndesigncomponentcode","COMBOBOX","push","CHECKBOX","userInfo","inputParam","integrationSettings","closeModal","showSynonym","loadEsign","selectedRecord","selectedId","operation","updateInfo","typeName","custombuttonclick","component","preventDefault","stopPropagation","inputparam","userinfo","getDynamicFilter","onInputOnChange","fieldName","value","target","zeroNotAllowed","type","name","checked","isSynonymNeed","ssynonymname","ismultilingual","objLang","languageList","mandatory","existinglength","readOnlyChild","onComboChange","comboData","comboItem","foreignDataField","readOnlyParentData","onChangeUrl","undefined","dataList","inputData","primarykeyvalue","tableDataField","handleDateChange","dateName","dateValue","onNumericInputOnChange","child","min","max","ncodelength","childdatafield","maxValue","settings","parseInt","toggleSwitch","switchParam","dataItem","switchFieldName","classUrl","methodUrl","displayName","toLowerCase","masterData","esignNeeded","userRoleControlRights","nformcode","screenData","screenName","intl","formatMessage","id","onChangeSynonym","FieldName","deleteRecord","deleteParam","reloadData","syncData","syncId","onSaveClick","saveType","formRef","result","emailFieldName","validateCodeLength","fieldList","get","selectedRecordPrimarykey","dataField","clearSelectedRecordField","nmastersitecode","DEACTIVE","controlType","isClearField","isEmail","validateEmailValue","idsName","codelength","length","isJsonField","jsonObjectName","label","username","multiusergroupcode","forEach","defaultusergroup","lsusergroup","usergroupcode","dateField","controlName","NO","valueKey","join","valueName","multilingualfields","filter","jsondata","lang","Object","keys","confirmMessage","warn","ConfirmDelete","deleteId","confirm","DeleteWorklist","validateEsign","sreason","nreasoncode","spredefinedreason","password","createRef","extractedColumnList1","extractedDataGridColumnList","skip","take","masterStatus","error","controlMap","Map","getDerivedStateFromProps","render","primaryKeyField","addId","has","concat","ncontrolcode","index","elnget","smethodname","fieldListNew","sclassurlname","splice","values","dataGridList","editId","editParam","mandatoryFields","expandedField","fieldLength","language","componentDidUpdate","previousProps","i","stodate","smodifieddate","skipcount"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport {  injectIntl } from 'react-intl';\r\nimport { Row, Col } from 'react-bootstrap';\r\nimport { toast } from 'react-toastify';\r\nimport { process } from '@progress/kendo-data-query';\r\nimport DataGrid from '../../components/data-grid/data-grid.component';\r\nimport Esign from '../../pages/audittrail/Esign';\r\nimport SlideOutModal from '../slide-out-modal/SlideOutModal';\r\nimport { getFieldSpecification } from './Type3FieldSpecificationList';\r\nimport AddType3Component from './AddType3Component';\r\nimport { callService, crudMaster, updateStore, validateEsignCredential, fetchRecordCombo, onComboLoad ,onServiceLoad,syncAction} from '../../actions';\r\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\r\nimport { showEsign, getControlMap, extractFieldHeader, formatInputDate, validateEmail,rearrangeDateFormatDateOnly } from '../CommonScript';\r\nimport { ListWrapper} from '../client-group.styles';\r\nimport { transactionStatus, designComponents, formCode } from '../Enumeration';\r\nimport ConfirmMessage from \"../../components/confirm-alert/confirm-message.component\";\r\nimport AddSynonym from '../../components/droparea/AddSynonym';\r\n\r\nconst mapStateToProps = state => {\r\n    return ({ Login: state.Login })\r\n}\r\n\r\nclass Type3Component extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.formRef = React.createRef();\r\n        this.extractedColumnList = [];\r\n        this.extractedColumnList1 = [];\r\n        this.extractedDataGridColumnList = []; // ALPD-3660 VISHAKH\r\n        this.fieldList = [];\r\n\r\n        const dataState = {\r\n            skip: 0,\r\n            take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5,\r\n        };\r\n        this.state = {\r\n            data: [], masterStatus: \"\", error: \"\", selectedRecord: {},\r\n            dataResult: [],\r\n            dataState: dataState,\r\n            userRoleControlRights: [],\r\n            controlMap: new Map(),\r\n        };\r\n        this.confirmMessage = new ConfirmMessage();\r\n    }\r\n\r\n    dataStateChange = (event) => { \r\n        this.setState({\r\n            dataResult: process(this.state.data?this.state.data:[], event.dataState),\r\n            dataState: event.dataState\r\n        });\r\n    }\r\n\r\n    openModal = (ncontrolCode) => {\r\n\r\n        let comboColumnField = [];\r\n        this.extractedColumnList.map(item=>{\r\n        if(item.ndesigncomponentcode === designComponents.COMBOBOX){\r\n            comboColumnField.push(item);\r\n            }\r\n            else if(item.ndesigncomponentcode === designComponents.CHECKBOX ){\r\n                comboColumnField.push(item);\r\n            }\r\n        })\r\n        this.props.onComboLoad(\"create\",this.props.Login.userInfo,this.props.Login.inputParam,ncontrolCode, comboColumnField,this.props.Login.integrationSettings);\r\n    }\r\n\r\n    closeModal = () => {\r\n        // ALPD-5354 - added by gowtham on 07/02/2025 - Created Multilingual Field of OOS Work Flow Type Screen\r\n        if(this.state.showSynonym){\r\n            this.setState({ showSynonym: !this.state.showSynonym })\r\n        }else{\r\n            let loadEsign = this.props.Login.loadEsign;\r\n            let openModal = this.props.Login.openModal;\r\n            let selectedRecord = this.props.Login.selectedRecord;\r\n            let selectedId = this.props.Login.selectedId;\r\n            if (this.props.Login.loadEsign) {\r\n                if (this.props.Login.operation === \"delete\"|| this.props.Login.operation==\"sync\" || this.props.Login.operation === \"default\") {\r\n                    loadEsign = false;\r\n                    openModal = false;\r\n                    selectedRecord = {};\r\n                }\r\n                else {\r\n                \r\n                    loadEsign = false;\r\n                    selectedRecord['esignpassword'] = \"\"\r\n                    selectedRecord['esigncomments'] = \"\"\r\n                    selectedRecord['esignreason']=\"\"\r\n                }\r\n            }\r\n            else {\r\n                openModal = false;\r\n                selectedRecord = {};\r\n                selectedId=null;\r\n            }\r\n    \r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: { openModal, loadEsign, selectedRecord,\r\n                     //selectedId:null \r\n                     selectedId}\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n\r\n    }\r\n   \r\n    static getDerivedStateFromProps(props, state) {\r\n\r\n        if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\r\n            toast.warn(props.Login.masterStatus);\r\n            props.Login.masterStatus = \"\";\r\n        }\r\n\r\n        if (props.Login.error !== state.error) {\r\n            toast.error(props.Login.error)\r\n            props.Login.error = \"\";\r\n        }\r\n        return null;\r\n    }\r\n\r\n    // fnextractedColumnList  =()=>\r\n    // {\r\n    //    // return this.extractedColumnList = this.extractedColumnList1 || [];\r\n\r\n    //     this.extractedColumnList1 = this.extractedColumnList;\r\n    //     if(item.child){\r\n    //         this.extractedColumnList.map((values, index)=>{\r\n    //             if( values.dataField == item.childdatafield )\r\n    //                 {\r\n    //                     //this.extractedColumnList[index]['fieldLength']= value.toString();\r\n    //                     this.extractedColumnList[index]['fieldLength']= value;\r\n    //                 }\r\n    //         //console.log(value, index);\r\n    //     })\r\n    //         }\r\n    // }\r\n\r\n    render() {\r\n        let primaryKeyField = \"\";\r\n        let fieldList = {};\r\n        let inputData={\r\n            settings:this.props.Login.settings,\r\n            userInfo:this.props.Login.userInfo\r\n        };\r\n        const addId = this.props.Login.inputParam && this.state.controlMap.has(\"Add\".concat(this.props.Login.inputParam.methodUrl))\r\n            && this.state.controlMap.get(\"Add\".concat(this.props.Login.inputParam.methodUrl)).ncontrolcode;\r\n\r\n        if (this.props.Login.inputParam !== undefined) {\r\n            \r\n            if(this.props.Login.inputParam.classUrl===\"limselnusermapping\")\r\n            {\r\n                fieldList = getFieldSpecification(inputData).get(this.props.Login.inputParam.methodUrl) || [];\r\n                // fieldList.forEach(item=>item.dataField === \"username\" ? \r\n                //     fieldList.push(\"methodUrl:\"+this.props.Login.integrationSettings[0].smethodname) :\"\"\r\n                // );  \r\n                for (let index = 0; index < fieldList.length; index++) {\r\n                    if (fieldList[index].elnget) {\r\n                        let smethodname=\"methodUrl\";\r\n                        let fieldListNew={...fieldList[index],methodUrl:this.props.Login.integrationSettings[0].smethodname,classUrl:this.props.Login.integrationSettings[0].sclassurlname};\r\n                       // fieldList.slice(index)\r\n                        //fieldList.push((fieldList[index]).toString())\r\n                        //this.state.selectedRole.push((selectedRecord[index]).toString());\r\n                        fieldList.splice(index,1,fieldListNew)\r\n                    }}\r\n                this.extractedColumnList = extractFieldHeader(Object.values(fieldList));\r\n                primaryKeyField = Object.keys(fieldList).length > 0 ? fieldList[0].dataField : \"\";\r\n            }\r\n\r\n           else if(this.props.Login.inputParam.classUrl===\"limselnsitemapping\")\r\n            {\r\n                fieldList = getFieldSpecification(inputData).get(this.props.Login.inputParam.methodUrl) || [];\r\n                // fieldList.forEach(item=>item.dataField === \"username\" ? \r\n                //     fieldList.push(\"methodUrl:\"+this.props.Login.integrationSettings[0].smethodname) :\"\"\r\n                // );  \r\n                for (let index = 0; index < fieldList.length; index++) {\r\n                    if (fieldList[index].elnget) {\r\n                        let smethodname=\"methodUrl\";\r\n                        let fieldListNew={...fieldList[index],methodUrl:this.props.Login.integrationSettings[1].smethodname,classUrl:this.props.Login.integrationSettings[1].sclassurlname};\r\n                       // fieldList.slice(index)\r\n                        //fieldList.push((fieldList[index]).toString())\r\n                        //this.state.selectedRole.push((selectedRecord[index]).toString());\r\n                        fieldList.splice(index,1,fieldListNew)\r\n                    }}\r\n                this.extractedColumnList = extractFieldHeader(Object.values(fieldList));\r\n                primaryKeyField = Object.keys(fieldList).length > 0 ? fieldList[0].dataField : \"\";\r\n            }\r\n            else{\r\n            fieldList = getFieldSpecification(inputData).get(this.props.Login.inputParam.methodUrl) || [];\r\n            this.extractedColumnList = extractFieldHeader(Object.values(fieldList));\r\n            //this.expandedField= expandedField(Object.values(fieldList));\r\n            primaryKeyField = Object.keys(fieldList).length > 0 ? fieldList[0].dataField : \"\";}\r\n            // START ALPD-3660 VISHAKH\r\n            let dataGridList = [...this.extractedColumnList];\r\n            this.extractedDataGridColumnList = dataGridList.filter(item => \r\n                !(\"dataGridColumnHide\" in item && item[\"dataGridColumnHide\"] === true)\r\n                );\r\n            // END ALPD-3660 VISHAKH\r\n        }\r\n\r\n        const editId = this.props.Login.inputParam && this.state.controlMap.has(\"Edit\".concat(this.props.Login.inputParam.methodUrl))\r\n               && this.state.controlMap.get(\"Edit\".concat(this.props.Login.inputParam.methodUrl)).ncontrolcode;\r\n    \r\n        const editParam = {\r\n            screenName:this.props.Login.inputParam && this.props.Login.inputParam.displayName && this.props.intl.formatMessage({ id: this.props.Login.inputParam.displayName }), \r\n            operation:\"update\",  primaryKeyField, \r\n            inputParam:this.props.Login.inputParam,   \r\n            integrationSettings:this.props.Login.integrationSettings,\r\n            userInfo:this.props.Login.userInfo, \r\n            ncontrolCode:editId,\r\n            masterData:this.props.Login.masterData,\r\n            extractedColumnList : this.extractedColumnList\r\n            };\r\n        const deleteParam ={operation:\"delete\"};\r\n        const switchParam ={operation:\"default\",masterData:this.props.Login.masterData};\r\n        const mandatoryFields=[];\r\n        this.extractedColumnList.forEach(item=>item.mandatory === true ? \r\n            mandatoryFields.push(item) :\"\"\r\n        );        \r\n\r\n        return(<>\r\n                <Row>\r\n                    <Col>\r\n                        <ListWrapper className=\"client-list-content\">\r\n                          \r\n\r\n                            {this.state.data ?\r\n                                <DataGrid\r\n                                    primaryKeyField={primaryKeyField}\r\n                                    data={this.state.data}\r\n                                    dataResult={this.state.dataResult}\r\n                                    dataState={this.state.dataState}\r\n                                    dataStateChange={this.dataStateChange}\r\n                                    extractedColumnList={this.extractedDataGridColumnList} // ALPD-3660 VISHAKH\r\n                                    detailedFieldList={this.expandedField||[]}\r\n                                    expandField=\"expanded\"\r\n                                    controlMap={this.state.controlMap}\r\n                                    userRoleControlRights={this.state.userRoleControlRights}\r\n                                    inputParam={this.props.Login.inputParam}\r\n                                    userInfo={this.props.Login.userInfo}\r\n                                    fetchRecord={this.props.fetchRecordCombo}\r\n                                    editParam={editParam}\r\n                                    deleteRecord={this.deleteRecord}\r\n                                    deleteParam={deleteParam}\r\n                                    reloadData={this.reloadData}\r\n                                    syncData = {this.syncData}\r\n                                    addRecord = {() => this.openModal(addId)}\r\n                                    pageable={true}\r\n                                    scrollable={'scrollable'}\r\n                                    // isComponent={true}\r\n                                    gridHeight = {'580px'}\r\n                                    isActionRequired={true}\r\n                                    isToolBarRequired={true}\r\n                                    selectedId={this.props.Login.selectedId}\r\n                                    onToggleChange={this.toggleSwitch}\r\n                                    switchParam={switchParam} \r\n                                    groupable={this.props.Login.displayName ==='Material Accounting Plant Group'?true:false}\r\n                                    settings={this.props.Login.settings}\r\n\r\n                                />\r\n                                : \"\"}\r\n                        </ListWrapper>\r\n                    </Col>\r\n                </Row>\r\n\r\n                {/* Below Condition Added to avoid unwanted rendering of SlideOut */}\r\n                {this.props.Login.openModal ? \r\n                    <SlideOutModal show={this.props.Login.openModal}\r\n                        closeModal={this.closeModal}\r\n                        showSaveContinue={true} //ALPD-5063 added by Dhanushya RI,Enable save and continue option in Type3 component based screen\r\n                        operation={this.props.Login.operation}\r\n                        inputParam={this.props.Login.inputParam}\r\n                        screenName={this.props.Login.screenName}\r\n                        onSaveClick={this.onSaveClick}\r\n                        hideSave={this.state.showSynonym} // ALPD-5354 - added by gowtham on 07/02/2025 - Created Multilingual Field of OOS Work Flow Type Screen\r\n                        closeLabel={this.state.showSynonym ? \"IDS_CLOSE\" : undefined} // ALPD-5354\r\n                        esign={this.props.Login.loadEsign}\r\n                        validateEsign={this.validateEsign}\r\n                        masterStatus={this.props.Login.masterStatus}\r\n                        updateStore={this.props.updateStore}\r\n                        selectedRecord={this.state.selectedRecord || {}}\r\n                        mandatoryFields={mandatoryFields}\r\n                        // addComponentParam={{}}                   \r\n                        // addComponent={this.addComponent}\r\n                        addComponent={this.props.Login.loadEsign ?\r\n                            <Esign operation={this.props.Login.operation}\r\n                                onInputOnChange={this.onInputOnChange}\r\n                                inputParam={this.props.Login.inputParam}\r\n                                selectedRecord={this.state.selectedRecord || {}}\r\n                            />\r\n                            : this.state.showSynonym ? // ALPD-5354 - added by gowtham on 07/02/2025 - Created Multilingual Field of OOS Work Flow Type Screen\r\n                                <AddSynonym \r\n                                    selectedFieldRecord={this.state.selectedRecord}\r\n                                    languages={this.props.Login.languageList || []}\r\n                                    fieldName={this.state.FieldName}\r\n                                    maxLength={this.state.item.fieldLength}\r\n                                    language={this.props.Login.language}\r\n                                    onInputOnChange={this.onInputOnChange}\r\n                                />\r\n                            : <AddType3Component\r\n                                selectedRecord={this.state.selectedRecord || {}}\r\n                                onInputOnChange={this.onInputOnChange}\r\n                                extractedColumnList={this.extractedColumnList}\r\n                                onNumericInputOnChange={this.onNumericInputOnChange}\r\n                                onComboChange={this.onComboChange}\r\n                                handleDateChange={this.handleDateChange}                               \r\n                                userInfo={this.props.Login.userInfo}\r\n                                dataList={this.props.Login.dataList}\r\n                                operation={this.props.Login.operation}\r\n                                language={this.props.Login.language} // ALPD-5354 - added by gowtham on 07/02/2025 - Created Multilingual Field of OOS Work Flow Type Screen\r\n                                onChangeSynonym={this.onChangeSynonym} // ALPD-5354\r\n                            />}\r\n                    />\r\n                :\"\"}\r\n\r\n            </>\r\n        );\r\n    }\r\n\r\n    componentDidUpdate(previousProps) {\r\n        if (this.props.Login.masterData !== previousProps.Login.masterData) {\r\n            if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\r\n                const userRoleControlRights = [];\r\n                if (this.props.Login.userRoleControlRights) {\r\n                    this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item =>\r\n                        userRoleControlRights.push(item.ncontrolcode))\r\n                }\r\n                const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode)\r\n                if(this.props.Login.inputParam.methodUrl === 'Purge' || this.props.Login.inputParam.methodUrl === 'RestoreMaster')\r\n                { \r\n                   for(let i =0;i< this.props.Login.masterData.length;i++){\r\n                       //data.push(this.props.UserData[i].jsonuidata);\r\n                       this.props.Login.masterData[i].stodate= rearrangeDateFormatDateOnly(this.props.Login.userInfo,\r\n                        this.props.Login.masterData[i].stodate) ;\r\n                        this.props.Login.masterData[i].smodifieddate= rearrangeDateFormatDateOnly(this.props.Login.userInfo,\r\n                            this.props.Login.masterData[i].smodifieddate) ;\r\n                    }\r\n                }\r\n                this.setState({\r\n                    userRoleControlRights, controlMap, data: this.props.Login.masterData,\r\n                    dataResult: process(this.props.Login.masterData ? this.props.Login.masterData : [], this.state.dataState),\r\n                });\r\n            }else {\r\n                let {dataState}=this.state;\r\n                if(this.props.Login.dataState===undefined){\r\n                    dataState={skip:0,take:this.state.dataState.take}\r\n                }\r\n                 if(this.state.dataResult.data){\r\n                     if(this.state.dataResult.data.length ===1){\r\n                        let skipcount=this.state.dataState.skip>0?(this.state.dataState.skip-this.state.dataState.take):\r\n                        this.state.dataState.skip\r\n                         dataState={skip:skipcount,take:this.state.dataState.take}\r\n                     }\r\n                 } \r\n                 if(this.props.Login.masterData.length>0)\r\n                 {\r\n                 if(this.props.Login.inputParam.methodUrl === 'Purge' || this.props.Login.inputParam.methodUrl === 'RestoreMaster')\r\n                 { \r\n                    for(let i =0;i< this.props.Login.masterData.length;i++){\r\n                        //data.push(this.props.UserData[i].jsonuidata);\r\n                        this.props.Login.masterData[i].stodate= rearrangeDateFormatDateOnly(this.props.Login.userInfo,\r\n                         this.props.Login.masterData[i].stodate) ;\r\n                         this.props.Login.masterData[i].smodifieddate= rearrangeDateFormatDateOnly(this.props.Login.userInfo,\r\n                             this.props.Login.masterData[i].smodifieddate) ;\r\n                     }\r\n                 }\r\n                }\r\n                this.setState({\r\n                    data: this.props.Login.masterData, selectedRecord: this.props.Login.selectedRecord,\r\n                    dataResult: process(this.props.Login.masterData ? this.props.Login.masterData : [], dataState),\r\n                    dataState\r\n                });\r\n            }\r\n        }\r\n        \r\n        \r\n        if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\r\n            //Get selected value when clicking edit button\r\n            if(this.props.Login.selectedRecord)\r\n            {\r\n                let {selectedRecord} = this.props.Login // ALPD-5354 - added by gowtham on 07/02/2025 - Created Multilingual Field of OOS Work Flow Type Screen\r\n                if(this.props.Login.selectedRecord[\"jsondata\"]){ \r\n                    selectedRecord = { ...selectedRecord, ...selectedRecord[\"jsondata\"] }\r\n                    delete selectedRecord[\"jsondata\"];\r\n                }\r\n                this.setState({ selectedRecord });\r\n            }     \r\n         }\r\n    }\r\n\r\n    custombuttonclick = (event, component) => {\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n        const inputparam = {\r\n            component, userinfo: this.props.Login.userInfo,\r\n            selectedRecord: this.state.selectedRecord\r\n        }\r\n        this.props.getDynamicFilter(inputparam)\r\n    }\r\n\r\n    // ALPD-5354 - added (fieldName) by gowtham on 07/02/2025 - Created Multilingual Field of OOS Work Flow Type Screen\r\n    onInputOnChange = (event, item, fieldName) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        let value = event.target.value;\r\n        if(item !== 'synonym'){ // ALPD-5354 - added by gowtham on 07/02/2025 - Created Multilingual Field of OOS Work Flow Type Screen\r\n            if(item && item.zeroNotAllowed && item.zeroNotAllowed && value === '0'){\r\n                value = \"\";\r\n            }\r\n            if (event.target.type === 'checkbox') {\r\n                selectedRecord[event.target.name] = event.target.checked === true ? 3 : 4;\r\n            }\r\n            else {\r\n              \r\n                if (item && item.isSynonymNeed) {\r\n                    // selectedRecord[event.target.name] = selectedRecord[item.ssynonymname] = event.target.value;\r\n                    selectedRecord[event.target.name] = selectedRecord[item.ssynonymname] = value;\r\n                }\r\n                else if (item && item.ismultilingual) {\r\n                    let objLang = {}\r\n                    this.props.Login.languageList.map(item => {\r\n                        objLang[item.value] = value;\r\n                    })\r\n                    if(value === \"\" && item.mandatory === \"true\") {\r\n                        selectedRecord[event.target.name] = \"\"\r\n                    }else{ \r\n                        selectedRecord[event.target.name] = {\r\n                            ...objLang,\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    // selectedRecord[event.target.name] = event.target.value;\r\n                    selectedRecord[event.target.name] = value;\r\n                }\r\n            }\r\n            if (event.target.type === 'textbox'){\r\n                selectedRecord[item.existinglength] = true\r\n            }\r\n            if(item && item.readOnlyChild){\r\n                // selectedRecord[item.readOnlyChild] = event.target.value;\r\n                selectedRecord[item.readOnlyChild] = value;\r\n            }\r\n        }else{\r\n            selectedRecord[fieldName] = {\r\n                ...selectedRecord[fieldName],\r\n                [event.target.name]: value,\r\n            }\r\n        }\r\n       \r\n        this.setState({ selectedRecord });\r\n    }    \r\n\r\n    onComboChange = (comboData, fieldName, comboItem) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n    \r\n        if (comboData !== null) {\r\n            if (comboItem.foreignDataField) {\r\n                selectedRecord[comboItem.foreignDataField] = comboData.value;\r\n            }\r\n     \r\n        }\r\n        selectedRecord[fieldName] = comboData;\r\n        if (comboItem.readOnlyChild) {\r\n            selectedRecord[comboItem.readOnlyChild] = comboData.item[comboItem.readOnlyParentData];\r\n        }\r\n        if(comboItem.onChangeUrl!=undefined){\r\n            const  dataList = {\r\n                ...this.props.Login.dataList\r\n            }\r\n            // let inputData={\r\n            //     primarykeyvalue: parseInt(comboData.value),\r\n            // }\r\n            \r\n            let inputData = { dataList, selectedRecord };\r\n\r\n            let comboColumnField = [];\r\n            let primarykeyvalue={};\r\n            primarykeyvalue[comboItem.tableDataField]=comboData.value;\r\n            this.extractedColumnList.map(item => {\r\n                if(item.onChangeUrl!=undefined){\r\n                    if (item.ndesigncomponentcode === designComponents.COMBOBOX) {\r\n                        if (item.tableDataField === comboItem.tableDataField) {\r\n                            comboColumnField.push(item);\r\n                        }\r\n                }\r\n                }})\r\n            this.props.onServiceLoad(this.props.Login.userInfo, this.props.Login.inputParam, this.props.Login.ncontrolCode, comboColumnField,primarykeyvalue,inputData);\r\n        }else{\r\n        this.setState({ selectedRecord });\r\n        }\r\n    }\r\n\r\n    \r\n\r\n    handleDateChange = (dateName, dateValue, item) => {\r\n        const { selectedRecord } = this.state;\r\n        selectedRecord[dateName] = dateValue;       \r\n        this.setState({ selectedRecord });\r\n\r\n    }\r\n \r\n\r\n    onNumericInputOnChange = (value, name, item) => {\r\n        \r\n            const selectedRecord = this.state.selectedRecord || {};\r\n            if(item.zeroNotAllowed && item.zeroNotAllowed && value === 0){\r\n                value = \"\";\r\n            }\r\n            if(item.child){\r\n                if(item.min>=value && value!==0 || item.max>=value && value!==0){\r\n                    selectedRecord.ncodelength = value ;\r\n                }\r\n                selectedRecord[item.childdatafield] && delete selectedRecord[item.childdatafield];\r\n            }\r\n            else if(item&&item.maxValue){\r\n                //added by vignesh for Sample Storage Structure row column max value\r\n                    if(this.props.Login.settings[39]&&parseInt(this.props.Login.settings[39])>=value){\r\n                        selectedRecord[name] = value;\r\n                    } \r\n                }\r\n            else{\r\n                selectedRecord[name] = value;\r\n\r\n            }\r\n            this.setState({ selectedRecord });\r\n        \r\n    }\r\n    \r\n    toggleSwitch = (switchParam, item, event) => {\r\n        \r\n        let dataItem = {...switchParam.selectedRecord};\r\n        let selectedId = this.props.Login.selectedId;\r\n        if (event.target.type === 'checkbox') {\r\n            dataItem[item.switchFieldName] = event.target.checked === true ? 3 : 4;\r\n        }\r\n        const inputParam ={\r\n            classUrl: this.props.Login.inputParam.classUrl,\r\n            methodUrl: this.props.Login.inputParam.methodUrl,\r\n            displayName: this.props.Login.inputParam.displayName,\r\n            inputData: {\r\n                [this.props.Login.inputParam.methodUrl.toLowerCase()]: dataItem,\r\n                \"userinfo\": this.props.Login.userInfo\r\n            },\r\n            operation:switchParam.operation,\r\n            dataState:this.state.dataState, selectedId,\r\n            selectedRecord:{...this.state.selectedRecord}\r\n        }\r\n        const masterData = switchParam.masterData;\r\n        const esignNeeded = showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode,switchParam.ncontrolCode);\r\n        if (esignNeeded) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, dataItem },\r\n                    openModal: true, screenName: this.props.intl.formatMessage({ id: this.props.Login.inputParam.displayName }),\r\n                    operation:switchParam.operation,masterData\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.crudMaster(inputParam, masterData, \"openModal\");\r\n        }\r\n    }\r\n\r\n    // ALPD-5354 - added by gowtham on 07/02/2025 - Created Multilingual Field of OOS Work Flow Type Screen\r\n    onChangeSynonym = (event, FieldName, item) => { \r\n        this.setState({ showSynonym: !this.state.showSynonym, FieldName, item })\r\n    }\r\n \r\n    deleteRecord = (deleteParam) =>{\r\n        const inputParam = {\r\n            classUrl: this.props.Login.inputParam.classUrl,\r\n            methodUrl: this.props.Login.inputParam.methodUrl,\r\n            displayName: this.props.Login.inputParam.displayName,\r\n            inputData: {\r\n                [this.props.Login.inputParam.methodUrl.toLowerCase()]: deleteParam.selectedRecord,\r\n                \"userinfo\": this.props.Login.userInfo\r\n            },\r\n            operation:deleteParam.operation,\r\n            dataState:this.state.dataState,\r\n            selectedRecord:{...this.state.selectedRecord}\r\n        }\r\n        \r\n\r\n        const esignNeeded = showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode,deleteParam.ncontrolCode);\r\n        if (esignNeeded) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData: this.props.Login.masterData },\r\n                    openModal: true, screenName: this.props.intl.formatMessage({ id: this.props.Login.inputParam.displayName }),\r\n                    operation:deleteParam.operation\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\r\n        }\r\n    }\r\n\r\n    reloadData = () => {\r\n        const inputParam = {\r\n            inputData: { \"userinfo\": this.props.Login.userInfo },\r\n            classUrl: this.props.Login.inputParam.classUrl,\r\n            methodUrl: this.props.Login.inputParam.methodUrl,\r\n            displayName: this.props.Login.inputParam.displayName,\r\n            userInfo: this.props.Login.userInfo\r\n        };\r\n\r\n        this.props.callService(inputParam);\r\n    }\r\n    syncData = (syncId) => {\r\n\r\n        let classUrl;\r\n        let methodUrl;\r\n\r\n        if(this.props.Login.inputParam.displayName === \"Fusion Site\"){\r\n            classUrl = \"fusionsite\";\r\n            methodUrl=  \"FusionSite\";\r\n        }else if(this.props.Login.inputParam.displayName === \"Fusion Plant\"){\r\n            classUrl= \"fusionplant\";\r\n            methodUrl= \"FusionPlant\";\r\n        }else if(this.props.Login.inputParam.displayName === \"Fusion Users\"){\r\n            classUrl= \"fusionusers\";\r\n            methodUrl= \"FusionUsers\";\r\n        }else if(this.props.Login.inputParam.displayName === \"Fusion Plant User\"){\r\n            classUrl = \"fusionplantuser\";\r\n            methodUrl= \"FusionPlantUser\";\r\n        }\r\n\r\n        let inputParam = {          \r\n            inputData: {\"userinfo\": this.props.Login.userInfo },\r\n            classUrl: classUrl,\r\n            methodUrl: methodUrl,\r\n            operation:\"sync\",\r\n            displayName: this.props.Login.inputParam.displayName,\r\n            userInfo: this.props.Login.userInfo\r\n        };\r\n      \r\n        if(showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, syncId)){\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData: {...this.props.Login.masterData} },\r\n                    openModal: true, screenName: this.props.intl.formatMessage({ id: this.props.Login.inputParam.displayName }),\r\n                    operation:\"sync\"\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else{\r\n        this.props.syncAction(inputParam);\r\n        }\r\n    }\r\n\r\n    onSaveClick = (saveType, formRef) => {\r\n       \r\n        let result = true;\r\n        let emailFieldName=[];\r\n        let validateCodeLength=true;\r\n        let inputData = [];\r\n        inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n        let dataState = undefined;\r\n        let selectedId = null;\r\n        let fieldList = getFieldSpecification().get(this.props.Login.inputParam.methodUrl) || [];\r\n        let selectedRecordPrimarykey = fieldList[0].dataField;\r\n        let clearSelectedRecordField=[];\r\n        \r\n        inputData[this.props.Login.inputParam.methodUrl.toLowerCase()] = { \"nsitecode\": this.props.Login.userInfo.nmastersitecode };\r\n       \r\n        this.extractedColumnList.map(item => {\r\n            let fieldName = item.dataField;\r\n            //ALPD-5063 added by Dhanushya RI,Enable save and continue option in Type3 component based screen\r\n            if(saveType===transactionStatus.DEACTIVE && item.controlType !== \"NA\" && item.isClearField === true ){\r\n                clearSelectedRecordField.push(item);\r\n            }\r\n            if(item.isEmail === true){\r\n                let validateEmailValue = this.state.selectedRecord[item.dataField] ? validateEmail(this.state.selectedRecord[item.dataField]) : true;\r\n                if(validateEmailValue === false){\r\n                    result = false;\r\n                    emailFieldName.push(item.idsName);\r\n                }\r\n            }\r\n\r\n            if (item.validateCodeLength === true) { //Janakumar Added the visit code legth validation \r\n                if (this.state.selectedRecord[item.codelength] === this.state.selectedRecord[fieldName].length) {\r\n                    inputData[this.props.Login.inputParam.methodUrl.toLowerCase()][fieldName] = this.state.selectedRecord[fieldName] ? this.state.selectedRecord[fieldName] : \"\";\r\n\r\n                } else {\r\n                    validateCodeLength=false;\r\n                }\r\n            }\r\n            if (item.isJsonField === true) {\r\n                return inputData[this.props.Login.inputParam.methodUrl.toLowerCase()][item.jsonObjectName] = { ...inputData[this.props.Login.inputParam.methodUrl.toLowerCase()][item.jsonObjectName], [fieldName]: this.state.selectedRecord[fieldName] ? this.state.selectedRecord[fieldName] : \"\" }\r\n            }\r\n            else {\r\n        \r\n                if (item.controlType === \"selectbox\") {\r\n                    inputData[this.props.Login.inputParam.methodUrl.toLowerCase()][fieldName] = this.state.selectedRecord[fieldName] ? this.state.selectedRecord[fieldName].label ? this.state.selectedRecord[fieldName].label : \"\" : -1;\r\n                    inputData[this.props.Login.inputParam.methodUrl.toLowerCase()][item.foreignDataField] = this.state.selectedRecord[fieldName] ? this.state.selectedRecord[fieldName].value ? this.state.selectedRecord[fieldName].value : -1 : -1;\r\n                    if (this.props.Login.inputParam.methodUrl === \"LimsElnUsermapping\" && this.state.selectedRecord.username && this.state.selectedRecord.username.item && this.state.selectedRecord.username.item.multiusergroupcode) {\r\n                        this.state.selectedRecord.username.item.multiusergroupcode.forEach(dataItem => {\r\n                            if (dataItem.defaultusergroup !== \"undefined\") {\r\n                                inputData[this.props.Login.inputParam.methodUrl.toLowerCase()][\"nelnusergroupcode\"] = dataItem.lsusergroup.usergroupcode;\r\n                            }\r\n                        })\r\n                    }\r\n                    //return inputData;\r\n                }\r\n                else if (item.controlType === \"datepicker\") {\r\n                    inputData[this.props.Login.inputParam.methodUrl.toLowerCase()][item.dateField] = formatInputDate(this.state.selectedRecord[fieldName] ? this.state.selectedRecord[fieldName] : \"\", false);\r\n                }\r\n                else if (item.controlType === \"checkbox\") {\r\n                    inputData[this.props.Login.inputParam.methodUrl.toLowerCase()][item.controlName] = this.state.selectedRecord[item.controlName] ? this.state.selectedRecord[item.controlName] : transactionStatus.NO;\r\n                }\r\n                else if (item.controlType === \"numericinput\") {\r\n                    inputData[this.props.Login.inputParam.methodUrl.toLowerCase()][fieldName] = this.state.selectedRecord[fieldName] ? this.state.selectedRecord[fieldName] : 0;\r\n                }\r\n                else if (item.controlType === \"multiselect\") {\r\n                    inputData[this.props.Login.inputParam.methodUrl.toLowerCase()][item.valueKey] = this.state.selectedRecord[fieldName].map(item => item.value).join(\", \");\r\n                    inputData[this.props.Login.inputParam.methodUrl.toLowerCase()][item.valueName] =this.state.selectedRecord[fieldName].map(item => item.label).join(\", \");\r\n                }   \r\n                else {\r\n                    inputData[this.props.Login.inputParam.methodUrl.toLowerCase()][fieldName] = this.state.selectedRecord[fieldName] ? this.state.selectedRecord[fieldName] : \"\";\r\n                }\r\n                inputData[this.props.Login.inputParam.methodUrl.toLowerCase()][selectedRecordPrimarykey] = this.props.Login.selectedId;\r\n                return inputData;\r\n            }\r\n            \r\n        })\r\n        if (this.props.Login.operation == \"update\") {\r\n            dataState = this.state.dataState;\r\n            selectedId = this.props.Login.selectedId;\r\n        }\r\n\r\n        // ALPD-5354 - added by gowtham on 07/02/2025 - Created Multilingual Field of OOS Work Flow Type Screen\r\n        const multilingualfields = this.extractedColumnList.filter(item => item.ismultilingual === \"true\");\r\n        const jsondata = {};\r\n        multilingualfields.map(item => {\r\n            if(inputData[this.props.Login.inputParam.methodUrl.toLowerCase()][item.dataField] === \"\"){\r\n                let objLang = {}\r\n                this.props.Login.languageList.map(lang => {\r\n                    objLang[lang.value] = \"\";\r\n                })\r\n                inputData[this.props.Login.inputParam.methodUrl.toLowerCase()][item.dataField] = { ...objLang }\r\n            }\r\n            jsondata[item.dataField] = inputData[this.props.Login.inputParam.methodUrl.toLowerCase()][item.dataField];\r\n            delete inputData[this.props.Login.inputParam.methodUrl.toLowerCase()][item.dataField];\r\n        });\r\n        if(Object.keys(jsondata).length > 0)\r\n            inputData[this.props.Login.inputParam.methodUrl.toLowerCase()][\"jsondata\"] = { ...jsondata };\r\n\r\n        const inputParam = {\r\n            classUrl: this.props.Login.inputParam.classUrl,\r\n            methodUrl: this.props.Login.inputParam.methodUrl,\r\n            displayName: this.props.Login.inputParam.displayName,\r\n            inputData: inputData, selectedId,\r\n            selectedRecord: { ...this.state.selectedRecord },\r\n            operation: this.props.Login.operation, saveType, formRef, dataState\r\n        }\r\n        if (result  && validateCodeLength) {\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData: { ...this.props.Login.masterData } },\r\n                    openModal: true, screenName: this.props.intl.formatMessage({ id: this.props.Login.inputParam.displayName }),\r\n                    operation: this.props.Login.operation\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n           // this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\r\n           this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\",'',this.confirmMessage,clearSelectedRecordField);\r\n        }\r\n    \r\n    }else {\r\n    if(validateCodeLength===false){ //janakumar r\r\n        toast.warn(this.props.intl.formatMessage({ id: \"IDS_ENTERCODEOFLENGTH\" }));\r\n    }else{\r\n        toast.warn(this.props.intl.formatMessage({ id: \"IDS_ENTERVALIDEMAILOF\" })+ this.props.intl.formatMessage({ id: emailFieldName[0]}));\r\n    }\r\n        }\r\n    \r\n\r\n\r\n}\r\n\r\n    ConfirmDelete = (operation, deleteId) => {\r\n        this.confirmMessage.confirm(\r\n          \"deleteMessage\",\r\n          this.props.intl.formatMessage({ id: \"IDS_DELETE\" }),\r\n          this.props.intl.formatMessage({ id: \"IDS_DEFAULTCONFIRMMSG\" }),\r\n          this.props.intl.formatMessage({ id: \"IDS_OK\" }),\r\n          this.props.intl.formatMessage({ id: \"IDS_CANCEL\" }),\r\n          () =>\r\n            this.DeleteWorklist(\r\n              operation,\r\n              deleteId,\r\n              operation.screenName ? operation.screenName : \"IDS_WORKLIST\"\r\n            )\r\n        );\r\n      };\r\n    validateEsign = () => {\r\n        const inputParam = {\r\n            inputData: {\r\n                \"userinfo\": {\r\n                    ...this.props.Login.userInfo,\r\n                    sreason: this.state.selectedRecord[\"esigncomments\"],\r\n                    nreasoncode:this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].value,\r\n                    spredefinedreason:this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].label,\r\n               \r\n                },\r\n                password: this.state.selectedRecord[\"esignpassword\"]\r\n            },\r\n            screenData: this.props.Login.screenData\r\n            // screenStateData: {selected:{...this.state.selectedRecord}, masterData:{ ...this.props.Login.masterData}},\r\n        }\r\n        this.props.validateEsignCredential(inputParam, \"openModal\",this.confirmMessage);\r\n    }\r\n\r\n}\r\nexport default connect(mapStateToProps, {\r\n    callService, crudMaster, updateStore, validateEsignCredential,syncAction,\r\n    fetchRecordCombo, onComboLoad,onServiceLoad})(injectIntl(Type3Component));"]},"metadata":{},"sourceType":"module"}