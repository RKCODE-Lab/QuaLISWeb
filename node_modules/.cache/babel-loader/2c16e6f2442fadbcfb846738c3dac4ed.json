{"ast":null,"code":"var _jsxFileName = \"D:\\\\Postgres_workingFolder\\\\QuaLISWeb\\\\src\\\\pages\\\\registration\\\\EditPreRegistration.js\";\nimport React, { useEffect } from 'react';\nimport { Row, Col } from 'react-bootstrap';\nimport { injectIntl } from 'react-intl';\nimport FormSelectSearch from '../../components/form-select-search/form-select-search.component';\nimport FormInput from '../../components/form-input/form-input.component';\nimport MultiColumnComboSearch from '../../components/multi-column-combo-search/multi-column-combo-search';\nimport FormTextarea from '../../components/form-textarea/form-textarea.component';\nimport FormNumericInput from '../../components/form-numeric-input/form-numeric-input.component';\nimport FormTreeMenu from '../../components/form-tree-menu/form-tree-menu.component';\nimport DateTimePicker from '../../components/date-time-picker/date-time-picker.component';\nimport { TreeDesign } from './registration.styled';\nimport { RegistrationType, RegistrationSubType } from '../../components/Enumeration';\nimport PerfectScrollbar from 'react-perfect-scrollbar';\n\nconst EditPreRegistration = props => {\n  const {\n    productCategory,\n    product,\n    goodsIn,\n    eProtocol,\n    manufacturer,\n    specification,\n    storageCondition,\n    storageLocation,\n    client,\n    realRegTypeValue,\n    plasmaMasterFile,\n    realRegSubTypeValue,\n    productMaholder,\n    agaramTree,\n    openNodes,\n    focusKey,\n    activeKey\n  } = props; // const disableControlStatus = [transactionStatus.PREREGISTER,\n  // transactionStatus.REGISTER, transactionStatus.COMPLETED, transactionStatus.REVIEWED];\n\n  const diableAllStatus = props.statustoEditDetail && props.statustoEditDetail.napprovalstatuscode;\n  const recordStatus = props.selectedRecord && props.selectedRecord.ntransactionstatus;\n  const myRef = React.createRef();\n  const effectTime = 1000;\n  useEffect(() => {\n    let refEle = myRef && myRef.current && myRef.current;\n    setTimeout(() => {\n      if (refEle) {\n        refEle.getElementsByClassName(\"rstm-tree-item--active\")[0].scrollIntoViewIfNeeded(false);\n      }\n    }, effectTime);\n  }, []);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    md: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    md: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 17\n    }\n  }, realRegSubTypeValue.nregsubtypecode !== RegistrationSubType.PROTOCOL && realRegSubTypeValue.nregsubtypecode !== RegistrationSubType.EXTERNAL_POOL && /*#__PURE__*/React.createElement(FormSelectSearch, {\n    formLabel: props.intl.formatMessage({\n      id: \"IDS_RMSNO\"\n    }),\n    isSearchable: true,\n    name: \"nrmsno\",\n    isDisabled: diableAllStatus === recordStatus,\n    placeholder: props.intl.formatMessage({\n      id: \"IDS_SELECTRECORD\"\n    }),\n    isMandatory: true,\n    options: goodsIn,\n    alphabeticalSort: \"true\",\n    optionId: \"nrmsno\",\n    optionValue: \"nrmsno\",\n    value: props.selectedRecord ? props.selectedRecord[\"nrmsno\"] : \"\",\n    closeMenuOnSelect: true,\n    onChange: event => props.onComboChange(event, 'nrmsno'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 25\n    }\n  }), /*#__PURE__*/React.createElement(FormSelectSearch, {\n    formLabel: props.intl.formatMessage({\n      id: \"IDS_PRODUCTCATEGORY\"\n    }),\n    isSearchable: true,\n    name: \"nproductcatcode\",\n    isDisabled: true,\n    placeholder: props.intl.formatMessage({\n      id: \"IDS_SELECTRECORD\"\n    }),\n    isMandatory: true,\n    options: productCategory,\n    alphabeticalSort: \"true\",\n    optionId: \"nproductcatcode\",\n    optionValue: \"sproductcatname\",\n    value: props.selectedRecord ? props.selectedRecord[\"nproductcatcode\"] : \"\",\n    closeMenuOnSelect: true,\n    onChange: event => props.onComboChange(event, 'nproductcatcode'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(FormSelectSearch, {\n    formLabel: props.intl.formatMessage({\n      id: \"IDS_PRODUCT\"\n    }),\n    isSearchable: true,\n    name: \"nproductcode\",\n    isDisabled: true,\n    placeholder: props.intl.formatMessage({\n      id: \"IDS_SELECTRECORD\"\n    }),\n    isMandatory: true,\n    options: product,\n    alphabeticalSort: \"true\",\n    optionId: \"nproductcode\",\n    optionValue: \"sproductname\",\n    value: props.selectedRecord ? props.selectedRecord[\"nproductcode\"] : \"\",\n    closeMenuOnSelect: true,\n    onChange: event => props.onComboChange(event, 'nproductcode'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 21\n    }\n  }), Object.keys(props.selectedRecord).length > 0 && /*#__PURE__*/React.createElement(MultiColumnComboSearch, {\n    data: manufacturer,\n    isDisabled: diableAllStatus === recordStatus,\n    visibility: \"show-all\",\n    labelledBy: \"IDS_MANUFNAME\",\n    fieldToShow: [\"smanufname\", \"smanufsitename\", \"seprotocolname\"],\n    selectedId: props.selectedRecord[\"nmanufcode\"],\n    value: props.selectedRecord ? [props.selectedRecord] : [],\n    isMandatory: true,\n    showInputkey: \"smanufname\",\n    idslabelfield: [\"IDS_MANUFACTURERNAME\", \"IDS_SITENAME\", \"IDS_EPROTOCOL\"],\n    getValue: value => props.onMultiColumnValue(value, [\"nproductmanufcode\", \"nmanufcode\", \"nmanufsitecode\", \"smanufname\", \"smanufsitename\"], true, [\"seprotocolname\"], [\"neprotocolcode\"]),\n    singleSelection: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 25\n    }\n  }), /*#__PURE__*/React.createElement(FormInput, {\n    label: props.intl.formatMessage({\n      id: \"IDS_MANUFACTURERSITE\"\n    }),\n    name: \"smanufsitename\",\n    type: \"text\",\n    maxLength: \"100\",\n    isMandatory: true,\n    value: props.selectedRecord[\"smanufsitename\"] || [],\n    onChange: event => props.onInputOnChange(event),\n    placeholder: props.intl.formatMessage({\n      id: \"IDS_MANUFACTURERSITE\"\n    }),\n    isDisabled: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(FormSelectSearch, {\n    formLabel: props.intl.formatMessage({\n      id: \"IDS_EPROTOCOL\"\n    }),\n    isSearchable: true,\n    name: \"neprotocolcode\",\n    isDisabled: diableAllStatus === recordStatus,\n    placeholder: props.intl.formatMessage({\n      id: \"IDS_SELECTRECORD\"\n    }),\n    isMandatory: false,\n    options: eProtocol // options={eProtocol ? constructOptionList(eProtocol || [], 'neprotocolcode',\n    //     'seprotocolname', undefined, undefined, undefined).get(\"OptionList\") || [] : \"\"}\n    //alphabeticalSort=\"true\"\n    //optionId=\"neprotocolcode\"\n    //optionValue=\"seprotocolname\"\n    ,\n    value: props.selectedRecord ? props.selectedRecord[\"neprotocolcode\"] : \"\",\n    defaultValue: props.selectedRecord ? props.selectedRecord[\"neprotocolcode\"] : \"\",\n    closeMenuOnSelect: true,\n    onChange: event => props.onComboChange(event, 'neprotocolcode'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 21\n    }\n  }), realRegSubTypeValue.nregsubtypecode !== RegistrationSubType.PROTOCOL && realRegSubTypeValue.nregsubtypecode !== RegistrationSubType.EXTERNAL_POOL && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(FormSelectSearch, {\n    formLabel: props.formatMessage({\n      id: \"IDS_STORAGECONDITION\"\n    }),\n    isSearchable: true,\n    isClearable: true,\n    name: \"nstorageconditioncode\",\n    isDisabled: diableAllStatus === recordStatus,\n    placeholder: props.intl.formatMessage({\n      id: \"IDS_SELECTRECORD\"\n    }),\n    isMandatory: realRegSubTypeValue.nregsubtypecode === RegistrationSubType.EU ? true : realRegSubTypeValue.nregsubtypecode === RegistrationSubType.NON_EU ? true : false,\n    options: storageCondition //alphabeticalSort=\"true\"\n    //optionId=\"nstorageconditioncode\"\n    //optionValue=\"sstorageconditionname\"\n    ,\n    value: props.selectedRecord[\"nstorageconditioncode\"],\n    closeMenuOnSelect: true,\n    onChange: event => props.onComboChange(event, 'nstorageconditioncode'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 29\n    }\n  }), /*#__PURE__*/React.createElement(FormSelectSearch, {\n    formLabel: props.formatMessage({\n      id: \"IDS_STORAGELOCATION\"\n    }),\n    isSearchable: true,\n    isClearable: true,\n    name: \"nstoragelocationcode\",\n    isDisabled: diableAllStatus === recordStatus,\n    placeholder: props.intl.formatMessage({\n      id: \"IDS_SELECTRECORD\"\n    }),\n    isMandatory: false,\n    options: storageLocation //alphabeticalSort=\"true\"\n    //optionId=\"nstoragelocationcode\"\n    //optionValue=\"sstoragelocationname\"\n    ,\n    value: props.selectedRecord[\"nstoragelocationcode\"],\n    closeMenuOnSelect: true,\n    onChange: event => props.onComboChange(event, 'nstoragelocationcode'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 29\n    }\n  })), /*#__PURE__*/React.createElement(FormInput, {\n    label: props.formatMessage({\n      id: \"IDS_MANUFLOTNO\"\n    }),\n    name: \"smanuflotno\",\n    type: \"text\",\n    maxLength: \"100\",\n    isMandatory: true,\n    isDisabled: diableAllStatus === recordStatus,\n    value: props.selectedRecord[\"smanuflotno\"] || [],\n    onChange: event => props.onInputOnChange(event),\n    placeholder: props.formatMessage({\n      id: \"IDS_MANUFLOTNO\"\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 21\n    }\n  }), realRegTypeValue.nregtypecode === RegistrationType.NON_BATCH && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(FormSelectSearch, {\n    formLabel: props.intl.formatMessage({\n      id: \"IDS_CLIENTNAME\"\n    }),\n    isSearchable: true,\n    name: \"nclientcode\",\n    isDisabled: diableAllStatus === recordStatus,\n    placeholder: props.intl.formatMessage({\n      id: \"IDS_SELECTRECORD\"\n    }),\n    isMandatory: true,\n    options: client // alphabeticalSort=\"true\"\n    // optionId=\"nclientcode\"\n    // optionValue=\"sclientname\"\n    ,\n    value: props.selectedRecord[\"nclientcode\"] || \"\",\n    closeMenuOnSelect: true,\n    onChange: event => props.onClientComboChange(event) //onChange={(event) => props.onComboChange(event)}\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 29\n    }\n  }), /*#__PURE__*/React.createElement(FormInput, {\n    label: props.intl.formatMessage({\n      id: \"IDS_CLIENTSITENAME\"\n    }),\n    name: \"sclientsitename\",\n    type: \"text\",\n    maxLength: \"100\",\n    value: props.selectedRecord[\"saddress1\"] || [],\n    onChange: event => props.onInputOnChange(event),\n    placeholder: props.intl.formatMessage({\n      id: \"IDS_CLIENTSITENAME\"\n    }),\n    isDisabled: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 29\n    }\n  })), realRegTypeValue.nregtypecode === RegistrationType.PLASMA_POOL && /*#__PURE__*/React.createElement(React.Fragment, null, Object.keys(props.selectedRecord).length > 0 && /*#__PURE__*/React.createElement(MultiColumnComboSearch, {\n    data: productMaholder,\n    visibility: \"show-all\",\n    labelledBy: \"IDS_MAHOLDERNAME\",\n    fieldToShow: [\"smahname\", \"slicencenumber\", \"sdosagepercontainer\"],\n    selectedId: [props.selectedRecord[\"nproductmahcode\"]],\n    value: props.selectedRecord ? [props.selectedRecord] : [],\n    showInputkey: \"smahname\",\n    idslabelfield: [\"IDS_MAHNAME\", \"IDS_LICENSENUMBER\", \"IDS_DOSAGEPERCONTAINER\"],\n    getValue: value => props.onMultiColumnMAHChange(value, [\"nproductmahcode\", \"smahname\"]),\n    singleSelection: true,\n    isDisabled: diableAllStatus === recordStatus,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 33\n    }\n  }), realRegTypeValue.nregtypecode === RegistrationType.PLASMA_POOL && realRegSubTypeValue.nregsubtypecode !== RegistrationSubType.EXTERNAL_POOL && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 241,\n      columnNumber: 37\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    md: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 242,\n      columnNumber: 41\n    }\n  }, /*#__PURE__*/React.createElement(DateTimePicker, {\n    name: \"dmanufdate\",\n    label: props.intl.formatMessage({\n      id: \"IDS_DATEOFMANUFWOTIME\"\n    }),\n    className: \"form-control\",\n    placeholderText: \"Select date..\",\n    selected: props.selectedRecord[\"dmanufdate\"],\n    dateFormat: props.userInfo[\"ssitedate\"],\n    timeInputLabel: props.intl.formatMessage({\n      id: \"IDS_DATEOFMANUF\"\n    }),\n    showTimeInput: false,\n    isClearable: false,\n    isMandatory: false,\n    required: true,\n    onChange: date => props.handleDateChange(\"dmanufdate\", date),\n    value: props.selectedRecord[\"dmanufdate\"],\n    isDisabled: diableAllStatus === recordStatus,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 243,\n      columnNumber: 45\n    }\n  })), /*#__PURE__*/React.createElement(Col, {\n    md: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 260,\n      columnNumber: 41\n    }\n  }, /*#__PURE__*/React.createElement(FormSelectSearch, {\n    name: \"ntzdmanufdate\",\n    formLabel: props.intl.formatMessage({\n      id: \"IDS_TIMEZONE\"\n    }),\n    placeholder: props.intl.formatMessage({\n      id: \"IDS_SELECTRECORD\"\n    }) // options={props.timeZoneList ? constructOptionList(props.timeZoneList || [], 'ntimezonecode',\n    //     'stimezoneid', undefined, undefined, undefined).get(\"OptionList\") || [] : \"\"}\n    ,\n    options: props.timeZoneList,\n    optionId: \"ntimezonecode\",\n    optionValue: \"stimezoneid\",\n    value: props.selectedRecord[\"ntzdmanufdate\"],\n    isMandatory: false,\n    isSearchable: true,\n    isClearable: false,\n    closeMenuOnSelect: true,\n    alphabeticalSort: true,\n    onChange: value => props.onComboChange(value, 'ntzdmanufdate'),\n    isDisabled: diableAllStatus === recordStatus,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 261,\n      columnNumber: 45\n    }\n  }))), /*#__PURE__*/React.createElement(FormInput, {\n    label: props.formatMessage({\n      id: \"IDS_NOOFDONATIONS\"\n    }),\n    name: \"nnoofdonations\",\n    type: \"text\",\n    maxLength: \"100\",\n    isMandatory: false,\n    value: props.selectedRecord[\"nnoofdonations\"] || [],\n    onChange: event => props.onInputOnChange(event),\n    placeholder: props.formatMessage({\n      id: \"IDS_NOOFDONATIONS\"\n    }),\n    isDisabled: diableAllStatus === recordStatus,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 282,\n      columnNumber: 37\n    }\n  }), /*#__PURE__*/React.createElement(FormInput, {\n    label: props.formatMessage({\n      id: \"IDS_POOLBULKVOLUME\"\n    }),\n    name: \"sbulkvolume\",\n    type: \"text\",\n    maxLength: \"100\",\n    isMandatory: true,\n    value: props.selectedRecord[\"sbulkvolume\"] || [],\n    onChange: event => props.onInputOnChange(event),\n    placeholder: props.formatMessage({\n      id: \"IDS_POOLBULKVOLUME\"\n    }),\n    isDisabled: diableAllStatus === recordStatus,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 294,\n      columnNumber: 37\n    }\n  }), /*#__PURE__*/React.createElement(FormSelectSearch, {\n    formLabel: props.formatMessage({\n      id: \"IDS_PLASMAMASTERFILE\"\n    }),\n    isSearchable: true,\n    name: \"nplasmafilecode\",\n    isDisabled: diableAllStatus === recordStatus,\n    placeholder: props.intl.formatMessage({\n      id: \"IDS_SELECTRECORD\"\n    }),\n    isMandatory: false,\n    options: plasmaMasterFile,\n    alphabeticalSort: \"true\",\n    optionId: \"nplasmafilecode\",\n    optionValue: \"splasmafilenumber\",\n    value: props.selectedRecord[\"nplasmafilecode\"] || \"\",\n    closeMenuOnSelect: true,\n    onChange: event => props.onComboChange(event, 'nplasmafilecode'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 306,\n      columnNumber: 37\n    }\n  }))))), /*#__PURE__*/React.createElement(Col, {\n    md: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 328,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 329,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    md: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 330,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(TreeDesign, {\n    operation: props.operation,\n    ref: myRef,\n    className: \"mb-4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 331,\n      columnNumber: 25\n    }\n  }, agaramTree && agaramTree.length > 0 && /*#__PURE__*/React.createElement(PerfectScrollbar, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 334,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(FormTreeMenu, {\n    data: agaramTree,\n    handleTreeClick: props.onTreeClick,\n    hasSearch: false,\n    initialOpenNodes: openNodes,\n    focusKey: focusKey || \"\",\n    activeKey: activeKey || \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 335,\n      columnNumber: 37\n    }\n  }))), /*#__PURE__*/React.createElement(FormSelectSearch, {\n    formLabel: props.intl.formatMessage({\n      id: \"IDS_TESTGROUP\"\n    }),\n    isSearchable: true,\n    name: \"nallottedspeccode\",\n    isDisabled: true,\n    placeholder: props.intl.formatMessage({\n      id: \"IDS_TESTGROUP\"\n    }),\n    isMandatory: true,\n    options: specification,\n    alphabeticalSort: \"true\",\n    optionId: \"nallottedspeccode\",\n    optionValue: \"sspecname\",\n    value: props.selectedRecord ? props.selectedRecord[\"nallottedspeccode\"] : \"\",\n    defaultValue: props.selectedRecord ? props.selectedRecord[\"nallottedspeccode\"] : \"\",\n    closeMenuOnSelect: true,\n    onChange: event => props.onspecChange(event, ['nallottedspeccode', 'sversionno']),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 349,\n      columnNumber: 25\n    }\n  }), /*#__PURE__*/React.createElement(FormInput, {\n    label: props.intl.formatMessage({\n      id: \"IDS_VERSION\"\n    }),\n    name: \"sversion\",\n    type: \"text\",\n    maxLength: \"100\",\n    value: props.selectedRecord[\"sversion\"] || [],\n    placeholder: props.intl.formatMessage({\n      id: \"IDS_VERSION\"\n    }),\n    isDisabled: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 366,\n      columnNumber: 25\n    }\n  }), realRegSubTypeValue.nregsubtypecode !== RegistrationSubType.PROTOCOL && realRegSubTypeValue.nregsubtypecode !== RegistrationSubType.EXTERNAL_POOL && /*#__PURE__*/React.createElement(FormNumericInput, {\n    name: \"nnoofcontainer\",\n    label: props.formatMessage({\n      id: \"IDS_NOOFCONTAINER\"\n    }),\n    placeholder: props.formatMessage({\n      id: \"IDS_NOOFCONTAINER\"\n    }),\n    type: \"number\",\n    value: props.selectedRecord[\"nnoofcontainer\"] //max={99}\n    ,\n    min: 0,\n    strict: true,\n    maxLength: 8,\n    onChange: event => props.onNumericInputChange(event, \"nnoofcontainer\"),\n    noStyle: true,\n    precision: 0,\n    className: \"form-control\",\n    isMandatory: true,\n    errors: \"Please provide a valid number.\",\n    isDisabled: diableAllStatus === recordStatus,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 378,\n      columnNumber: 29\n    }\n  }), /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 397,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    md: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 398,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(DateTimePicker, {\n    name: \"dreceiveddate\",\n    label: props.intl.formatMessage({\n      id: \"IDS_RECEIVEDDATEWOTIME\"\n    }),\n    className: \"form-control\",\n    placeholderText: \"Select date..\",\n    selected: props.selectedRecord[\"dreceiveddate\"],\n    dateFormat: props.userInfo[\"ssitedate\"],\n    timeInputLabel: props.intl.formatMessage({\n      id: \"IDS_RECEIVEDDATE\"\n    }),\n    showTimeInput: false,\n    isClearable: false,\n    isMandatory: true,\n    required: true,\n    maxDate: props.CurrentTime,\n    maxTime: props.CurrentTime,\n    onChange: date => props.handleDateChange(\"dreceiveddate\", date),\n    value: props.selectedRecord[\"dreceiveddate\"],\n    isDisabled: diableAllStatus === recordStatus,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 399,\n      columnNumber: 33\n    }\n  })), /*#__PURE__*/React.createElement(Col, {\n    md: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 419,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(FormSelectSearch, {\n    name: \"ntzdreceivedate\",\n    formLabel: props.intl.formatMessage({\n      id: \"IDS_TIMEZONE\"\n    }),\n    placeholder: props.intl.formatMessage({\n      id: \"IDS_SELECTRECORD\"\n    }),\n    options: props.timeZoneList // options={props.timeZoneList ? constructOptionList(props.timeZoneList || [], 'ntimezonecode',\n    //     'stimezoneid', undefined, undefined, undefined).get(\"OptionList\") || [] : \"\"}\n    ,\n    optionId: \"ntimezonecode\",\n    optionValue: \"stimezoneid\",\n    value: props.selectedRecord[\"ntzdreceivedate\"],\n    isMandatory: true,\n    isSearchable: true,\n    isClearable: false,\n    closeMenuOnSelect: true,\n    alphabeticalSort: true,\n    onChange: value => props.onComboChange(value, 'ntzdreceivedate'),\n    isDisabled: diableAllStatus === recordStatus,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 420,\n      columnNumber: 33\n    }\n  }))), /*#__PURE__*/React.createElement(FormTextarea, {\n    label: props.formatMessage({\n      id: \"IDS_COMMENTS\"\n    }),\n    name: \"scomments\",\n    type: \"text\",\n    onChange: event => props.onInputOnChange(event),\n    placeholder: props.formatMessage({\n      id: \"IDS_COMMENTS\"\n    }),\n    value: props.selectedRecord[\"scomments\"] === 'null' ? '' : props.selectedRecord[\"scomments\"],\n    isMandatory: false,\n    required: false,\n    maxLength: 255,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 440,\n      columnNumber: 25\n    }\n  }))))));\n};\n\nexport default injectIntl(EditPreRegistration);","map":{"version":3,"sources":["D:/Postgres_workingFolder/QuaLISWeb/src/pages/registration/EditPreRegistration.js"],"names":["React","useEffect","Row","Col","injectIntl","FormSelectSearch","FormInput","MultiColumnComboSearch","FormTextarea","FormNumericInput","FormTreeMenu","DateTimePicker","TreeDesign","RegistrationType","RegistrationSubType","PerfectScrollbar","EditPreRegistration","props","productCategory","product","goodsIn","eProtocol","manufacturer","specification","storageCondition","storageLocation","client","realRegTypeValue","plasmaMasterFile","realRegSubTypeValue","productMaholder","agaramTree","openNodes","focusKey","activeKey","diableAllStatus","statustoEditDetail","napprovalstatuscode","recordStatus","selectedRecord","ntransactionstatus","myRef","createRef","effectTime","refEle","current","setTimeout","getElementsByClassName","scrollIntoViewIfNeeded","nregsubtypecode","PROTOCOL","EXTERNAL_POOL","intl","formatMessage","id","event","onComboChange","Object","keys","length","value","onMultiColumnValue","onInputOnChange","EU","NON_EU","nregtypecode","NON_BATCH","onClientComboChange","PLASMA_POOL","onMultiColumnMAHChange","userInfo","date","handleDateChange","timeZoneList","operation","onTreeClick","onspecChange","onNumericInputChange","CurrentTime"],"mappings":"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","sourcesContent":["import React ,{useEffect} from 'react'\r\nimport { Row, Col } from 'react-bootstrap';\r\nimport { injectIntl } from 'react-intl';\r\nimport FormSelectSearch from '../../components/form-select-search/form-select-search.component';\r\nimport FormInput from '../../components/form-input/form-input.component';\r\nimport MultiColumnComboSearch from '../../components/multi-column-combo-search/multi-column-combo-search';\r\nimport FormTextarea from '../../components/form-textarea/form-textarea.component';\r\nimport FormNumericInput from '../../components/form-numeric-input/form-numeric-input.component';\r\nimport FormTreeMenu from '../../components/form-tree-menu/form-tree-menu.component';\r\nimport DateTimePicker from '../../components/date-time-picker/date-time-picker.component';\r\nimport { TreeDesign } from './registration.styled';\r\nimport { RegistrationType, RegistrationSubType } from '../../components/Enumeration';\r\nimport PerfectScrollbar from 'react-perfect-scrollbar';\r\n\r\nconst EditPreRegistration = (props) => {\r\n\r\n    const { productCategory, product, goodsIn, eProtocol, manufacturer, specification,\r\n        storageCondition, storageLocation, client, realRegTypeValue, plasmaMasterFile,\r\n        realRegSubTypeValue, productMaholder, agaramTree, openNodes, focusKey, activeKey } = props;\r\n\r\n    // const disableControlStatus = [transactionStatus.PREREGISTER,\r\n    // transactionStatus.REGISTER, transactionStatus.COMPLETED, transactionStatus.REVIEWED];\r\n    const diableAllStatus = props.statustoEditDetail && props.statustoEditDetail.napprovalstatuscode;\r\n    const recordStatus = props.selectedRecord && props.selectedRecord.ntransactionstatus;\r\n    const myRef = React.createRef();\r\n    const effectTime = 1000;\r\n    useEffect(() => {\r\n      let refEle = myRef && myRef.current && myRef.current;  \r\n      setTimeout(()=>{\r\n          if(refEle){\r\n              refEle.getElementsByClassName(\"rstm-tree-item--active\")[0].scrollIntoViewIfNeeded(false);\r\n          }\r\n      }  ,effectTime)\r\n    } ,[]);\r\n    return (<>\r\n        <Row>\r\n            <Col md={6}>\r\n                <Col md={12}>\r\n                    {(realRegSubTypeValue.nregsubtypecode !== RegistrationSubType.PROTOCOL &&\r\n                        realRegSubTypeValue.nregsubtypecode !== RegistrationSubType.EXTERNAL_POOL) &&\r\n\r\n                        <FormSelectSearch\r\n                            formLabel={props.intl.formatMessage({ id: \"IDS_RMSNO\" })}\r\n                            isSearchable={true}\r\n                            name={\"nrmsno\"}\r\n                            isDisabled={diableAllStatus === recordStatus}\r\n                            placeholder={props.intl.formatMessage({ id: \"IDS_SELECTRECORD\" })}\r\n                            isMandatory={true}\r\n                            options={goodsIn}\r\n                            alphabeticalSort=\"true\"\r\n                            optionId=\"nrmsno\"\r\n                            optionValue=\"nrmsno\"\r\n                            value={props.selectedRecord ? props.selectedRecord[\"nrmsno\"] : \"\"}\r\n                            closeMenuOnSelect={true}\r\n                            onChange={(event) => props.onComboChange(event, 'nrmsno')}>\r\n                        </FormSelectSearch>\r\n\r\n                    }\r\n\r\n                    <FormSelectSearch\r\n                        formLabel={props.intl.formatMessage({ id: \"IDS_PRODUCTCATEGORY\" })}\r\n                        isSearchable={true}\r\n                        name={\"nproductcatcode\"}\r\n                        isDisabled={true}\r\n                        placeholder={props.intl.formatMessage({ id: \"IDS_SELECTRECORD\" })}\r\n                        isMandatory={true}\r\n                        options={productCategory}\r\n                        alphabeticalSort=\"true\"\r\n                        optionId=\"nproductcatcode\"\r\n                        optionValue=\"sproductcatname\"\r\n                        value={props.selectedRecord ? props.selectedRecord[\"nproductcatcode\"] : \"\"}\r\n                        closeMenuOnSelect={true}\r\n                        onChange={(event) => props.onComboChange(event, 'nproductcatcode')}>\r\n                    </FormSelectSearch>\r\n\r\n                    <FormSelectSearch\r\n                        formLabel={props.intl.formatMessage({ id: \"IDS_PRODUCT\" })}\r\n                        isSearchable={true}\r\n                        name={\"nproductcode\"}\r\n                        isDisabled={true}\r\n                        placeholder={props.intl.formatMessage({ id: \"IDS_SELECTRECORD\" })}\r\n                        isMandatory={true}\r\n                        options={product}\r\n                        alphabeticalSort=\"true\"\r\n                        optionId=\"nproductcode\"\r\n                        optionValue=\"sproductname\"\r\n                        value={props.selectedRecord ? props.selectedRecord[\"nproductcode\"] : \"\"}\r\n                        closeMenuOnSelect={true}\r\n                        onChange={(event) => props.onComboChange(event, 'nproductcode')}>\r\n                    </FormSelectSearch>\r\n\r\n                    {Object.keys(props.selectedRecord).length > 0 &&\r\n                        <MultiColumnComboSearch data={manufacturer}\r\n                            isDisabled={diableAllStatus === recordStatus}\r\n                            visibility='show-all'\r\n                            labelledBy=\"IDS_MANUFNAME\"\r\n                            fieldToShow={[\"smanufname\", \"smanufsitename\", \"seprotocolname\"]}\r\n                            selectedId={props.selectedRecord[\"nmanufcode\"]}\r\n                            value={props.selectedRecord ? [props.selectedRecord] : []}\r\n                            isMandatory={true}\r\n                            showInputkey=\"smanufname\"\r\n                            idslabelfield={[\"IDS_MANUFACTURERNAME\", \"IDS_SITENAME\", \"IDS_EPROTOCOL\"]}\r\n                            getValue={(value) => props.onMultiColumnValue(value, [\"nproductmanufcode\", \"nmanufcode\", \"nmanufsitecode\", \"smanufname\", \"smanufsitename\"], true, [\"seprotocolname\"], [\"neprotocolcode\"])}\r\n                            singleSelection={true}\r\n                        />\r\n                    }\r\n                    <FormInput\r\n                        label={props.intl.formatMessage({ id: \"IDS_MANUFACTURERSITE\" })}\r\n                        name=\"smanufsitename\"\r\n                        type=\"text\"\r\n                        maxLength=\"100\"\r\n                        isMandatory={true}\r\n                        value={props.selectedRecord[\"smanufsitename\"] || []}\r\n                        onChange={(event) => props.onInputOnChange(event)}\r\n                        placeholder={props.intl.formatMessage({ id: \"IDS_MANUFACTURERSITE\" })}\r\n                        isDisabled={true}\r\n                    />\r\n\r\n                    <FormSelectSearch\r\n                        formLabel={props.intl.formatMessage({ id: \"IDS_EPROTOCOL\" })}\r\n                        isSearchable={true}\r\n                        name={\"neprotocolcode\"}\r\n                        isDisabled={diableAllStatus === recordStatus}\r\n                        placeholder={props.intl.formatMessage({ id: \"IDS_SELECTRECORD\" })}\r\n                        isMandatory={false}\r\n                        options={eProtocol}\r\n                        // options={eProtocol ? constructOptionList(eProtocol || [], 'neprotocolcode',\r\n                        //     'seprotocolname', undefined, undefined, undefined).get(\"OptionList\") || [] : \"\"}\r\n                        //alphabeticalSort=\"true\"\r\n                        //optionId=\"neprotocolcode\"\r\n                        //optionValue=\"seprotocolname\"\r\n                        value={props.selectedRecord ? props.selectedRecord[\"neprotocolcode\"] : \"\"}\r\n                        defaultValue={props.selectedRecord ? props.selectedRecord[\"neprotocolcode\"] : \"\"}\r\n                        closeMenuOnSelect={true}\r\n                        onChange={(event) => props.onComboChange(event, 'neprotocolcode')}>\r\n                    </FormSelectSearch>\r\n\r\n                    {realRegSubTypeValue.nregsubtypecode !== RegistrationSubType.PROTOCOL\r\n                        && realRegSubTypeValue.nregsubtypecode !== RegistrationSubType.EXTERNAL_POOL &&\r\n                        <>\r\n                            <FormSelectSearch\r\n                                formLabel={props.formatMessage({ id: \"IDS_STORAGECONDITION\" })}\r\n                                isSearchable={true}\r\n                                isClearable={true}\r\n                                name={\"nstorageconditioncode\"}\r\n                                isDisabled={diableAllStatus === recordStatus}\r\n                                placeholder={props.intl.formatMessage({ id: \"IDS_SELECTRECORD\" })}\r\n                                isMandatory={realRegSubTypeValue.nregsubtypecode === RegistrationSubType.EU ? true : realRegSubTypeValue.nregsubtypecode === RegistrationSubType.NON_EU ? true : false}\r\n                                options={storageCondition}\r\n                                //alphabeticalSort=\"true\"\r\n                                //optionId=\"nstorageconditioncode\"\r\n                                //optionValue=\"sstorageconditionname\"\r\n                                value={props.selectedRecord[\"nstorageconditioncode\"]}\r\n                                closeMenuOnSelect={true}\r\n                                onChange={(event) => props.onComboChange(event, 'nstorageconditioncode')}>\r\n                            </FormSelectSearch>\r\n\r\n\r\n                            <FormSelectSearch\r\n                                formLabel={props.formatMessage({ id: \"IDS_STORAGELOCATION\" })}\r\n                                isSearchable={true}\r\n                                isClearable={true}\r\n                                name={\"nstoragelocationcode\"}\r\n                                isDisabled={diableAllStatus === recordStatus}\r\n                                placeholder={props.intl.formatMessage({ id: \"IDS_SELECTRECORD\" })}\r\n                                isMandatory={false}\r\n                                options={storageLocation}\r\n                                //alphabeticalSort=\"true\"\r\n                                //optionId=\"nstoragelocationcode\"\r\n                                //optionValue=\"sstoragelocationname\"\r\n                                value={props.selectedRecord[\"nstoragelocationcode\"]}\r\n                                closeMenuOnSelect={true}\r\n                                onChange={(event) => props.onComboChange(event, 'nstoragelocationcode')}>\r\n                            </FormSelectSearch>\r\n                        </>\r\n                    }\r\n                    <FormInput\r\n                        label={props.formatMessage({ id: \"IDS_MANUFLOTNO\" })}\r\n                        name=\"smanuflotno\"\r\n                        type=\"text\"\r\n                        maxLength=\"100\"\r\n                        isMandatory={true}\r\n                        isDisabled={diableAllStatus === recordStatus}\r\n                        value={props.selectedRecord[\"smanuflotno\"] || []}\r\n                        onChange={(event) => props.onInputOnChange(event)}\r\n                        placeholder={props.formatMessage({ id: \"IDS_MANUFLOTNO\" })}\r\n                    />\r\n                    {realRegTypeValue.nregtypecode === RegistrationType.NON_BATCH &&\r\n                        <>\r\n                            <FormSelectSearch\r\n                                formLabel={props.intl.formatMessage({ id: \"IDS_CLIENTNAME\" })}\r\n                                isSearchable={true}\r\n                                name={\"nclientcode\"}\r\n                                isDisabled={diableAllStatus === recordStatus}\r\n                                placeholder={props.intl.formatMessage({ id: \"IDS_SELECTRECORD\" })}\r\n                                isMandatory={true}\r\n                                options={client}\r\n                                // alphabeticalSort=\"true\"\r\n                                // optionId=\"nclientcode\"\r\n                                // optionValue=\"sclientname\"\r\n                                value={props.selectedRecord[\"nclientcode\"] || \"\"}\r\n                                closeMenuOnSelect={true}\r\n                                onChange={(event) => props.onClientComboChange(event)}\r\n                                //onChange={(event) => props.onComboChange(event)}\r\n                                >\r\n                            </FormSelectSearch>\r\n\r\n                            <FormInput\r\n                                label={props.intl.formatMessage({ id: \"IDS_CLIENTSITENAME\" })}\r\n                                name=\"sclientsitename\"\r\n                                type=\"text\"\r\n                                maxLength=\"100\"\r\n                                value={props.selectedRecord[\"saddress1\"] || []}\r\n                                onChange={(event) => props.onInputOnChange(event)}\r\n                                placeholder={props.intl.formatMessage({ id: \"IDS_CLIENTSITENAME\" })}\r\n                                isDisabled={true}\r\n                            />\r\n\r\n                        </>\r\n                    }\r\n                    {realRegTypeValue.nregtypecode === RegistrationType.PLASMA_POOL &&\r\n                        <>\r\n                            {Object.keys(props.selectedRecord).length > 0 &&\r\n                                <MultiColumnComboSearch data={productMaholder}\r\n                                    visibility='show-all'\r\n                                    labelledBy=\"IDS_MAHOLDERNAME\"\r\n                                    fieldToShow={[\"smahname\", \"slicencenumber\", \"sdosagepercontainer\"]}\r\n                                    selectedId={[props.selectedRecord[\"nproductmahcode\"]]}\r\n                                    value={props.selectedRecord ? [props.selectedRecord] : []}\r\n                                    showInputkey=\"smahname\"\r\n                                    idslabelfield={[\"IDS_MAHNAME\", \"IDS_LICENSENUMBER\", \"IDS_DOSAGEPERCONTAINER\"]}\r\n                                    getValue={(value) => props.onMultiColumnMAHChange(value, [\"nproductmahcode\", \"smahname\"])}\r\n                                    singleSelection={true}\r\n                                    isDisabled={diableAllStatus === recordStatus}\r\n                                />\r\n                            }\r\n\r\n                            {(realRegTypeValue.nregtypecode === RegistrationType.PLASMA_POOL\r\n                                && realRegSubTypeValue.nregsubtypecode !== RegistrationSubType.EXTERNAL_POOL) &&\r\n                                <>\r\n                                    <Row>\r\n                                        <Col md={6}>\r\n                                            <DateTimePicker\r\n                                                name={\"dmanufdate\"}\r\n                                                label={props.intl.formatMessage({ id: \"IDS_DATEOFMANUFWOTIME\" })}\r\n                                                className='form-control'\r\n                                                placeholderText=\"Select date..\"\r\n                                                selected={props.selectedRecord[\"dmanufdate\"]}\r\n                                                dateFormat={props.userInfo[\"ssitedate\"]}\r\n                                                timeInputLabel={props.intl.formatMessage({ id: \"IDS_DATEOFMANUF\" })}\r\n                                                showTimeInput={false}\r\n                                                isClearable={false}\r\n                                                isMandatory={false}\r\n                                                required={true}\r\n                                                onChange={date => props.handleDateChange(\"dmanufdate\", date)}\r\n                                                value={props.selectedRecord[\"dmanufdate\"]}\r\n                                                isDisabled={diableAllStatus === recordStatus}\r\n                                            />\r\n                                        </Col>\r\n                                        <Col md={6}>\r\n                                            <FormSelectSearch\r\n                                                name={\"ntzdmanufdate\"}\r\n                                                formLabel={props.intl.formatMessage({ id: \"IDS_TIMEZONE\" })}\r\n                                                placeholder={props.intl.formatMessage({ id: \"IDS_SELECTRECORD\" })}\r\n                                                // options={props.timeZoneList ? constructOptionList(props.timeZoneList || [], 'ntimezonecode',\r\n                                                //     'stimezoneid', undefined, undefined, undefined).get(\"OptionList\") || [] : \"\"}\r\n                                                options={props.timeZoneList}\r\n                                                optionId=\"ntimezonecode\"\r\n                                                optionValue=\"stimezoneid\"\r\n                                                value={props.selectedRecord[\"ntzdmanufdate\"]}\r\n                                                isMandatory={false}\r\n                                                isSearchable={true}\r\n                                                isClearable={false}\r\n                                                closeMenuOnSelect={true}\r\n                                                alphabeticalSort={true}\r\n                                                onChange={(value) => props.onComboChange(value, 'ntzdmanufdate')}\r\n                                                isDisabled={diableAllStatus === recordStatus}\r\n                                            />\r\n                                        </Col>\r\n                                    </Row>\r\n\r\n                                    <FormInput\r\n                                        label={props.formatMessage({ id: \"IDS_NOOFDONATIONS\" })}\r\n                                        name=\"nnoofdonations\"\r\n                                        type=\"text\"\r\n                                        maxLength=\"100\"\r\n                                        isMandatory={false}\r\n                                        value={props.selectedRecord[\"nnoofdonations\"] || []}\r\n                                        onChange={(event) => props.onInputOnChange(event)}\r\n                                        placeholder={props.formatMessage({ id: \"IDS_NOOFDONATIONS\" })}\r\n                                        isDisabled={diableAllStatus === recordStatus}\r\n                                    />\r\n\r\n                                    <FormInput\r\n                                        label={props.formatMessage({ id: \"IDS_POOLBULKVOLUME\" })}\r\n                                        name=\"sbulkvolume\"\r\n                                        type=\"text\"\r\n                                        maxLength=\"100\"\r\n                                        isMandatory={true}\r\n                                        value={props.selectedRecord[\"sbulkvolume\"] || []}\r\n                                        onChange={(event) => props.onInputOnChange(event)}\r\n                                        placeholder={props.formatMessage({ id: \"IDS_POOLBULKVOLUME\" })}\r\n                                        isDisabled={diableAllStatus === recordStatus}\r\n                                    />\r\n\r\n                                    <FormSelectSearch\r\n                                        formLabel={props.formatMessage({ id: \"IDS_PLASMAMASTERFILE\" })}\r\n                                        isSearchable={true}\r\n                                        name={\"nplasmafilecode\"}\r\n                                        isDisabled={diableAllStatus === recordStatus}\r\n                                        placeholder={props.intl.formatMessage({ id: \"IDS_SELECTRECORD\" })}\r\n                                        isMandatory={false}\r\n                                        options={plasmaMasterFile}\r\n                                        alphabeticalSort=\"true\"\r\n                                        optionId=\"nplasmafilecode\"\r\n                                        optionValue=\"splasmafilenumber\"\r\n                                        value={props.selectedRecord[\"nplasmafilecode\"] || \"\"}\r\n                                        closeMenuOnSelect={true}\r\n                                        onChange={(event) => props.onComboChange(event, 'nplasmafilecode')}>\r\n                                    </FormSelectSearch>\r\n\r\n                                </>\r\n                            }\r\n                        </>\r\n                    }\r\n                </Col>\r\n            </Col>\r\n            <Col md={6}>\r\n                <Row>\r\n                    <Col md={12} >\r\n                        <TreeDesign operation={props.operation} ref={myRef} className=\"mb-4\">\r\n\r\n                            {agaramTree && agaramTree.length > 0 &&\r\n                                <PerfectScrollbar>\r\n                                    <FormTreeMenu\r\n                                        data={agaramTree}\r\n                                        handleTreeClick={props.onTreeClick}\r\n                                        hasSearch={false}\r\n                                        initialOpenNodes={openNodes}\r\n                                        focusKey={focusKey || \"\"}\r\n                                        activeKey={activeKey || \"\"}\r\n                                    />\r\n                                </PerfectScrollbar>\r\n                            }\r\n\r\n                        </TreeDesign>\r\n\r\n\r\n                        <FormSelectSearch\r\n                            formLabel={props.intl.formatMessage({ id: \"IDS_TESTGROUP\" })}\r\n                            isSearchable={true}\r\n                            name={\"nallottedspeccode\"}\r\n                            isDisabled={true}\r\n                            placeholder={props.intl.formatMessage({ id: \"IDS_TESTGROUP\" })}\r\n                            isMandatory={true}\r\n                            options={specification}\r\n                            alphabeticalSort=\"true\"\r\n                            optionId=\"nallottedspeccode\"\r\n                            optionValue=\"sspecname\"\r\n                            value={props.selectedRecord ? props.selectedRecord[\"nallottedspeccode\"] : \"\"}\r\n                            defaultValue={props.selectedRecord ? props.selectedRecord[\"nallottedspeccode\"] : \"\"}\r\n                            closeMenuOnSelect={true}\r\n                            onChange={(event) => props.onspecChange(event, ['nallottedspeccode', 'sversionno'])}>\r\n                        </FormSelectSearch>\r\n\r\n                        <FormInput\r\n                            label={props.intl.formatMessage({ id: \"IDS_VERSION\" })}\r\n                            name=\"sversion\"\r\n                            type=\"text\"\r\n                            maxLength=\"100\"\r\n                            value={props.selectedRecord[\"sversion\"] || []}\r\n                            placeholder={props.intl.formatMessage({ id: \"IDS_VERSION\" })}\r\n                            isDisabled={true}\r\n                        />\r\n\r\n                        {realRegSubTypeValue.nregsubtypecode !== RegistrationSubType.PROTOCOL\r\n                            && realRegSubTypeValue.nregsubtypecode !== RegistrationSubType.EXTERNAL_POOL &&\r\n                            <FormNumericInput\r\n                                name=\"nnoofcontainer\"\r\n                                label={props.formatMessage({ id: \"IDS_NOOFCONTAINER\" })}\r\n                                placeholder={props.formatMessage({ id: \"IDS_NOOFCONTAINER\" })}\r\n                                type=\"number\"\r\n                                value={props.selectedRecord[\"nnoofcontainer\"]}\r\n                                //max={99}\r\n                                min={0}\r\n                                strict={true}\r\n                                maxLength={8}\r\n                                onChange={(event) => props.onNumericInputChange(event, \"nnoofcontainer\")}\r\n                                noStyle={true}\r\n                                precision={0}\r\n                                className=\"form-control\"\r\n                                isMandatory={true}\r\n                                errors=\"Please provide a valid number.\"\r\n                                isDisabled={diableAllStatus === recordStatus}\r\n                            />\r\n                        }\r\n                        <Row>\r\n                            <Col md={6}>\r\n                                <DateTimePicker\r\n                                    name={\"dreceiveddate\"}\r\n                                    label={props.intl.formatMessage({ id: \"IDS_RECEIVEDDATEWOTIME\" })}\r\n                                    className='form-control'\r\n                                    placeholderText=\"Select date..\"\r\n                                    selected={props.selectedRecord[\"dreceiveddate\"]}\r\n                                    dateFormat={props.userInfo[\"ssitedate\"]}\r\n                                    timeInputLabel={props.intl.formatMessage({ id: \"IDS_RECEIVEDDATE\" })}\r\n                                    showTimeInput={false}\r\n                                    isClearable={false}\r\n                                    isMandatory={true}\r\n                                    required={true}\r\n                                    maxDate={props.CurrentTime}\r\n                                    maxTime={props.CurrentTime}\r\n                                    onChange={date => props.handleDateChange(\"dreceiveddate\", date)}\r\n                                    value={props.selectedRecord[\"dreceiveddate\"]}\r\n                                    isDisabled={diableAllStatus === recordStatus}\r\n\r\n                                />\r\n                            </Col>\r\n                            <Col md={6}>\r\n                                <FormSelectSearch\r\n                                    name={\"ntzdreceivedate\"}\r\n                                    formLabel={props.intl.formatMessage({ id: \"IDS_TIMEZONE\" })}\r\n                                    placeholder={props.intl.formatMessage({ id: \"IDS_SELECTRECORD\" })}\r\n                                    options={props.timeZoneList}\r\n                                    // options={props.timeZoneList ? constructOptionList(props.timeZoneList || [], 'ntimezonecode',\r\n                                    //     'stimezoneid', undefined, undefined, undefined).get(\"OptionList\") || [] : \"\"}\r\n                                    optionId=\"ntimezonecode\"\r\n                                    optionValue=\"stimezoneid\"\r\n                                    value={props.selectedRecord[\"ntzdreceivedate\"]}\r\n                                    isMandatory={true}\r\n                                    isSearchable={true}\r\n                                    isClearable={false}\r\n                                    closeMenuOnSelect={true}\r\n                                    alphabeticalSort={true}\r\n                                    onChange={(value) => props.onComboChange(value, 'ntzdreceivedate')}\r\n                                    isDisabled={diableAllStatus === recordStatus}\r\n                                />\r\n                            </Col>\r\n                        </Row>\r\n                        <FormTextarea\r\n                            label={props.formatMessage({ id: \"IDS_COMMENTS\" })}\r\n                            name=\"scomments\"\r\n                            type=\"text\"\r\n                            onChange={(event) => props.onInputOnChange(event)}\r\n                            placeholder={props.formatMessage({ id: \"IDS_COMMENTS\" })}\r\n                            value={props.selectedRecord[\"scomments\"] === 'null' ? '' : props.selectedRecord[\"scomments\"]}\r\n                            isMandatory={false}\r\n                            required={false}\r\n                            maxLength={255}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n            </Col>\r\n        </Row>\r\n    </>\r\n    )\r\n}\r\n\r\nexport default injectIntl(EditPreRegistration);"]},"metadata":{},"sourceType":"module"}