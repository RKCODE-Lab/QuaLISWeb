{"ast":null,"code":"var _jsxFileName = \"D:\\\\LIMSWFH\\\\LIMSPOSTGRESQL\\\\QuaLISWeb\\\\src\\\\pages\\\\configurationmaster\\\\Languages.jsx\";\nimport React from 'react';\nimport { ListWrapper } from '../../components/client-group.styles';\nimport { Row, Col, Button } from 'react-bootstrap';\nimport { toast } from 'react-toastify';\nimport { process } from '@progress/kendo-data-query';\nimport { connect } from 'react-redux';\nimport { injectIntl } from 'react-intl';\nimport { callService, crudMaster, showRegTypeAddScreen, fetchById, comboService, updateStore, validateEsignCredential } from '../../actions';\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\nimport DataGrid from '../../components/data-grid/data-grid.component';\nimport FormSelectSearch from '../../components/form-select-search/form-select-search.component';\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\nimport { showEsign, getControlMap, constructOptionList } from '../../components/CommonScript';\nimport Esign from '../audittrail/Esign';\nimport AddLanguageSynonym from '../../components/AddLanguages'; // import ReactTooltip from 'react-tooltip';\n\nimport { Affix } from 'rsuite';\nimport { faSync, faLanguage, faFilePdf } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nconst mapStateToProps = state => {\n  return {\n    Login: state.Login\n  };\n};\n\nclass Languages extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.dataStateChange = event => {\n      this.setState({\n        dataResult: process(this.state.data.listofItem, event.dataState),\n        dataState: event.dataState\n      });\n    };\n\n    this.reloadData = () => {\n      const inputParam = {\n        inputData: {\n          userinfo: this.props.Login.userInfo\n        },\n        methodUrl: \"Language\",\n        classUrl: this.props.Login.inputParam.classUrl,\n        displayName: this.props.Login.inputParam.displayName ? this.props.Login.inputParam.displayName : '',\n        userInfo: this.props.Login.userInfo\n      };\n      this.props.callService(inputParam);\n    };\n\n    this.validateEsign = () => {\n      const inputParam = {\n        inputData: {\n          \"userinfo\": { ...this.props.Login.userInfo,\n            sreason: this.state.selectedRecord[\"esigncomments\"],\n            nreasoncode: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].value,\n            spredefinedreason: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].label\n          },\n          password: this.state.selectedRecord[\"esignpassword\"]\n        },\n        screenData: this.props.Login.screenData\n      };\n      this.props.validateEsignCredential(inputParam, \"openModal\");\n    };\n\n    this.onInputOnChange = (event, name, item, fieldName) => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (event.target.type === 'checkbox') {\n        selectedRecord[event.target.name] = event.target.checked === true ? 3 : 4;\n      } else {\n        if (name == 'English') {\n          if (this.props.Login.masterData.headername === \"Query Builder Views Columns\") {\n            selectedRecord['sjsondata'][fieldName] = { ...selectedRecord['sjsondata'][fieldName],\n              [event.target.name]: event.target.value\n            };\n            selectedRecord[fieldName] = { ...selectedRecord[fieldName],\n              [event.target.name]: event.target.value\n            };\n            selectedRecord[\"sdefaultname\"] = event.target.value == \"\" ? undefined : event.target.value;\n          } else {\n            selectedRecord[fieldName] = { ...selectedRecord[fieldName],\n              [event.target.name]: event.target.value\n            };\n            selectedRecord['sdefaultname'] = event.target.value == \"\" ? undefined : event.target.value;\n\n            if (item == 'sactiondisplaystatus') {\n              selectedRecord['sactiondisplaystatus'] = { ...selectedRecord['sactiondisplaystatus'],\n                [event.target.name]: event.target.value\n              };\n            } else {\n              selectedRecord['stransdisplaystatus'] = { ...selectedRecord['stransdisplaystatus'],\n                [event.target.name]: event.target.value\n              };\n            }\n          }\n        } else {\n          if (this.props.Login.masterData.headername === \"Query Builder Views Columns\") {\n            selectedRecord['sjsondata'][fieldName] = { ...selectedRecord['sjsondata'][fieldName],\n              [event.target.name]: event.target.value\n            };\n            selectedRecord[fieldName] = { ...selectedRecord[fieldName],\n              [event.target.name]: event.target.value\n            };\n          } else {\n            selectedRecord[fieldName] = { ...selectedRecord[fieldName],\n              [event.target.name]: event.target.value\n            };\n            selectedRecord[event.target.name] = event.target.value;\n\n            if (item == 'sactiondisplaystatus') {\n              selectedRecord['sactiondisplaystatus'] = { ...selectedRecord['sactiondisplaystatus'],\n                [event.target.name]: event.target.value\n              };\n            } else {\n              selectedRecord['stransdisplaystatus'] = { ...selectedRecord['stransdisplaystatus'],\n                [event.target.name]: event.target.value\n              };\n            }\n          }\n        }\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onComboChange = (comboData, fieldName) => {\n      const selectedRecord = this.state.selectedRecord || {};\n      selectedRecord[fieldName] = comboData;\n      this.setState({\n        selectedRecord\n      });\n\n      if (fieldName === \"nquerybuilderviewscode\") {\n        this.props.comboService({\n          inputData: {\n            userinfo: this.props.Login.userInfo,\n            sdisplayname: selectedRecord.nquerybuilderviewscode.item.sviewname,\n            primarykey: selectedRecord.nquerybuilderviewscode.value,\n            item: selectedRecord.nquerybuilderviewscode.item,\n            displayname: this.props.Login.masterData\n          },\n          masterData: this.props.Login.masterData,\n          userinfo: this.props.Login.userInfo,\n          item: selectedRecord.nquerybuilderviewscode.item,\n          sdisplayname: selectedRecord.nquerybuilderviewscode.label,\n          displayname: this.props.Login.masterData\n        });\n      } else {\n        if (fieldName === \"nmultilingualmasterscode\") {\n          this.props.comboService({\n            inputData: {\n              userinfo: this.props.Login.userInfo,\n              sdisplayname: selectedRecord.nmultilingualmasterscode.label,\n              primarykey: selectedRecord.nmultilingualmasterscode.value,\n              item: selectedRecord.nmultilingualmasterscode.item,\n              displayname: this.props.Login.masterData\n            },\n            masterData: { ...this.props.Login.masterData,\n              headername: {}\n            },\n            userinfo: this.props.Login.userInfo,\n            displayname: this.props.Login.masterData,\n            item: selectedRecord.nmultilingualmasterscode.item,\n            sdisplayname: selectedRecord.nmultilingualmasterscode.label\n          });\n        }\n      }\n    };\n\n    this.onSaveClick = (saveType, formRef) => {\n      let inputData = {};\n      let selectedId = null;\n      let methodUrl = \"\";\n      inputData[\"userinfo\"] = this.props.Login.userInfo;\n      let dataState = undefined;\n\n      if (this.state.showSynonym) {\n        this.setState({\n          showSynonym: false\n        });\n        return null;\n      }\n\n      if (this.props.Login.operation === \"update\") {\n        // edit\n        if (this.props.Login.masterData.headername === \"Menu\") {\n          selectedId = this.props.Login.selectedId;\n          dataState = this.state.dataState;\n          inputData[\"language\"] = {\n            \"nmenucode\": this.state.selectedRecord.nmenucode,\n            \"jsondata\": {\n              \"sdisplayname\": this.state.selectedRecord.sdisplayname\n            }\n          };\n          methodUrl = \"MenuLanguage\";\n        } else if (this.props.Login.masterData.headername === \"Module\") {\n          selectedId = this.props.Login.selectedId;\n          dataState = this.state.dataState;\n          inputData[\"language\"] = {\n            \"nmodulecode\": this.state.selectedRecord.nmodulecode,\n            \"jsondata\": {\n              \"sdisplayname\": this.state.selectedRecord.sdisplayname\n            }\n          };\n          methodUrl = \"ModuleLanguage\";\n        } else if (this.props.Login.masterData.headername === \"Forms\") {\n          dataState = this.state.dataState;\n          selectedId = this.props.Login.selectedId;\n          inputData[\"language\"] = {\n            \"nformcode\": this.state.selectedRecord.nformcode,\n            \"jsondata\": {\n              \"sdisplayname\": this.state.selectedRecord.sdisplayname\n            }\n          };\n          methodUrl = \"FormLanguage\";\n        } else if (this.props.Login.masterData.headername === \"Transaction Status\") {\n          dataState = this.state.dataState;\n          selectedId = this.props.Login.selectedId;\n          inputData[\"language\"] = {\n            \"ntranscode\": this.state.selectedRecord.ntranscode,\n            \"jsondata\": {\n              \"salertdisplaystatus\": this.state.selectedRecord.salertdisplaystatus,\n              \"stransdisplaystatus\": this.state.selectedRecord.stransdisplaystatus,\n              \"sactiondisplaystatus\": this.state.selectedRecord.sactiondisplaystatus\n            }\n          };\n          methodUrl = \"TransactionStatusLanguage\";\n        } else if (this.props.Login.masterData.headername === \"Control Master\") {\n          dataState = this.state.dataState;\n          selectedId = this.props.Login.selectedId;\n          inputData[\"language\"] = {\n            \"ncontrolcode\": this.state.selectedRecord.ncontrolcode,\n            \"jsondata\": {\n              \"scontrolids\": this.state.selectedRecord.scontrolids\n            }\n          };\n          methodUrl = \"ControlMasterLanguage\";\n        } else if (this.props.Login.masterData.headername === \"Approval Sub Type\") {\n          dataState = this.state.dataState;\n          selectedId = this.props.Login.selectedId;\n          inputData[\"language\"] = {\n            \"napprovalsubtypecode\": this.state.selectedRecord.napprovalsubtypecode,\n            \"jsondata\": {\n              \"approvalsubtypename\": this.state.selectedRecord.approvalsubtypename\n            }\n          };\n          methodUrl = \"ApprovalSubTypeLanguage\";\n        } else if (this.props.Login.masterData.headername === \"Sample Type\") {\n          dataState = this.state.dataState;\n          selectedId = this.props.Login.selectedId;\n          inputData[\"language\"] = {\n            \"nsampletypecode\": this.state.selectedRecord.nsampletypecode,\n            \"jsondata\": {\n              \"sampletypename\": this.state.selectedRecord.sampletypename\n            }\n          };\n          methodUrl = \"SampleTypeLanguage\";\n        } else if (this.props.Login.masterData.headername === \"Template Design\") {\n          dataState = this.state.dataState;\n          selectedId = this.props.Login.selectedId;\n          inputData[\"language\"] = {\n            \"ntemplatetypecode\": this.state.selectedRecord.ntemplatetypecode,\n            \"jsondata\": {\n              \"stemplatetypename\": this.state.selectedRecord.stemplatetypename\n            }\n          };\n          methodUrl = \"TemplateTypeLanguage\";\n        } else if (this.props.Login.masterData.headername === \"Period\") {\n          dataState = this.state.dataState;\n          selectedId = this.props.Login.selectedId;\n          inputData[\"language\"] = {\n            \"nperiodcode\": this.state.selectedRecord.nperiodcode,\n            \"jsondata\": {\n              \"speriodname\": this.state.selectedRecord.speriodname\n            }\n          };\n          methodUrl = \"PeriodLanguage\";\n        } else if (this.props.Login.masterData.headername === \"Gender\") {\n          dataState = this.state.dataState;\n          selectedId = this.props.Login.selectedId;\n          inputData[\"language\"] = {\n            \"ngendercode\": this.state.selectedRecord.ngendercode,\n            \"jsondata\": {\n              \"sgendername\": this.state.selectedRecord.sgendername\n            }\n          };\n          methodUrl = \"GenderLanguage\";\n        } else if (this.props.Login.masterData.headername === \"Grade\") {\n          dataState = this.state.dataState;\n          selectedId = this.props.Login.selectedId;\n          inputData[\"language\"] = {\n            \"ngradecode\": this.state.selectedRecord.ngradecode,\n            \"jsondata\": {\n              \"sdisplayname\": this.state.selectedRecord.sdisplayname\n            }\n          };\n          methodUrl = \"GradeLanguage\";\n        } else if (this.props.Login.masterData.headername === \"Scheduler Type\") {\n          dataState = this.state.dataState;\n          selectedId = this.props.Login.selectedId;\n          inputData[\"language\"] = {\n            \"nschedulertypecode\": this.state.selectedRecord.nschedulertypecode,\n            \"jsondata\": {\n              \"sschedulertypename\": this.state.selectedRecord.sschedulertypename\n            }\n          };\n          methodUrl = \"SchedulerTypeLanguage\";\n        } else if (this.props.Login.masterData.headername === \"Query Builder Tables\") {\n          dataState = this.state.dataState;\n          selectedId = this.props.Login.selectedId;\n          inputData[\"language\"] = {\n            \"nquerybuildertablecode\": this.state.selectedRecord.nquerybuildertablecode,\n            \"jsondata\": {\n              \"tablename\": this.state.selectedRecord.tablename\n            }\n          };\n          methodUrl = \"QueryBuilderTablesLanguage\";\n        } else if (this.props.Login.masterData.headername === \"Query Builder Views\") {\n          dataState = this.state.dataState;\n          selectedId = this.props.Login.selectedId;\n          inputData[\"language\"] = {\n            \"nquerybuilderviewscode\": this.state.selectedRecord.nquerybuilderviewscode,\n            \"jsondata\": {\n              \"displayname\": this.state.selectedRecord.displayname\n            }\n          };\n          methodUrl = \"QueryBuilderViewsLanguage\";\n        } else if (this.props.Login.masterData.headername === \"Multilingual Masters\") {\n          dataState = this.state.dataState;\n          selectedId = this.props.Login.selectedId;\n          inputData[\"language\"] = {\n            \"nmultilingualmasterscode\": this.state.selectedRecord.nmultilingualmasterscode,\n            \"jsondata\": {\n              \"sdisplayname\": this.state.selectedRecord.sdisplayname\n            }\n          };\n          methodUrl = \"MultilingualMastersLanguage\";\n        } else if (this.props.Login.masterData.headername === \"Query Builder Views Columns\") {\n          dataState = this.state.dataState;\n          selectedId = this.props.Login.selectedId;\n          delete this.state.selectedRecord.sdefaultname;\n          inputData[\"findIndex\"] = this.props.Login.selectedRecord.findIndex;\n          inputData[\"jsondata\"] = {\n            \"sjsondata\": { ...this.state.selectedRecord.sjsondata\n            },\n            \"sviewname\": this.props.Login.selectedRecord.sviewname\n          };\n          methodUrl = \"QueryBuilderViewsColumnsLanguage\";\n        } else if (this.props.Login.masterData.headername === \"Material Type\") {\n          dataState = this.state.dataState;\n          selectedId = this.props.Login.selectedId;\n          inputData[\"language\"] = {\n            \"nmaterialtypecode\": this.state.selectedRecord.nmaterialtypecode,\n            \"jsondata\": {\n              \"smaterialtypename\": this.state.selectedRecord.smaterialtypename\n            }\n          };\n          methodUrl = \"MaterialTypeLanguage\";\n        } else if (this.props.Login.masterData.headername === \"Interface Type\") {\n          dataState = this.state.dataState;\n          selectedId = this.props.Login.selectedId;\n          inputData[\"language\"] = {\n            \"ninterfacetypecode\": this.state.selectedRecord.ninterfacetypecode,\n            \"jsondata\": {\n              \"sinterfacetypename\": this.state.selectedRecord.sinterfacetypename\n            }\n          };\n          methodUrl = \"InterfaceTypeLanguage\";\n        } else if (this.props.Login.masterData.headername === \"Audit Action Filter\") {\n          dataState = this.state.dataState;\n          selectedId = this.props.Login.selectedId;\n          inputData[\"language\"] = {\n            \"nauditactionfiltercode\": this.state.selectedRecord.nauditactionfiltercode,\n            \"jsondata\": {\n              \"sdisplayname\": this.state.selectedRecord.sdisplayname\n            }\n          };\n          methodUrl = \"AuditActionFilterLanguage\";\n        } else {}\n      }\n\n      const inputParam = {\n        methodUrl: methodUrl,\n        classUrl: this.props.Login.inputParam.classUrl,\n        displayName: this.props.Login.inputParam.displayName,\n        inputData: inputData,\n        operation: this.props.Login.operation,\n        saveType,\n        formRef,\n        dataState,\n        selectedId\n      };\n      const masterData = this.props.Login.masterData;\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolcode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData\n            },\n            saveType,\n            operation: this.props.Login.operation,\n            openModal: true,\n            screenName: this.props.Login.inputParam.displayName\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, masterData, \"openModal\");\n      }\n    };\n\n    this.formRef = React.createRef();\n    this.extractedColumnList = [];\n    this.handleClose = this.handleClose.bind(this);\n    const _dataState = {\n      skip: 0,\n      take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n    };\n    this.state = {\n      data: [],\n      masterStatus: \"\",\n      error: \"\",\n      selectedRecord: {},\n      userRoleControlRights: [],\n      controlMap: new Map(),\n      dataResult: [],\n      dataState: _dataState,\n      mandatoryFields: []\n    };\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    if (props.Login.masterStatus !== state.masterStatus) {\n      toast.warn(props.Login.masterStatus);\n      props.Login.masterStatus = \"\";\n    }\n\n    if (props.Login.error !== state.error) {\n      toast.error(props.Login.error);\n      props.Login.error = \"\";\n    }\n\n    return null;\n  }\n\n  render() {\n    let primaryKeyField = \"\";\n\n    if (this.props.Login.inputParam !== undefined) {\n      this.mandatoryFields = [{\n        \"idsName\": \"IDS_DEFAULTLANGUAGE\",\n        \"dataField\": this.props.Login.languageList[0].value == \"en-US\" ? \"sdefaultname\" : \" \",\n        \"mandatoryLabel\": \"IDS_ENTER\",\n        \"controlType\": \"text\"\n      }];\n\n      if (this.props.Login.masterData.headername == \"Menu\") {\n        this.extractedColumnList = [{\n          \"idsName\": \"IDS_MENUID\",\n          \"dataField\": \"smenuname\",\n          \"width\": \"250px\"\n        }, {\n          \"idsName\": \"IDS_MENUNAME\",\n          \"dataField\": \"sdisplayname\",\n          \"width\": \"250px\"\n        }];\n        primaryKeyField = \"nmenucode\";\n      } else if (this.props.Login.masterData.headername == \"Module\") {\n        this.extractedColumnList = [{\n          \"idsName\": \"IDS_MODULEID\",\n          \"dataField\": \"smodulename\",\n          \"width\": \"250px\"\n        }, {\n          \"idsName\": \"IDS_MODULENAME\",\n          \"dataField\": \"sdisplayname\",\n          \"width\": \"250px\"\n        }];\n        primaryKeyField = \"nmodulecode\";\n      } else if (this.props.Login.masterData.headername == \"Forms\") {\n        this.extractedColumnList = [{\n          \"idsName\": \"IDS_FORMID\",\n          \"dataField\": \"sformname\",\n          \"width\": \"250px\"\n        }, {\n          \"idsName\": \"IDS_FORMNAME\",\n          \"dataField\": \"sdisplayname\",\n          \"width\": \"250px\"\n        }];\n        primaryKeyField = \"nformcode\";\n      } else if (this.props.Login.masterData.headername == \"Transaction Status\") {\n        this.extractedColumnList = [{\n          \"idsName\": \"IDS_TRANSACTIONSTATUSID\",\n          \"dataField\": \"stransstatus\",\n          \"width\": \"250px\"\n        }, {\n          \"idsName\": \"IDS_ACTIONDISPLAYSTATUS\",\n          \"dataField\": \"sactiondisplaystatus\",\n          \"width\": \"250px\"\n        }, {\n          \"idsName\": \"IDS_TRANSDISPLAYSTATUS\",\n          \"dataField\": \"stransdisplaystatus\",\n          \"width\": \"250px\"\n        }];\n        primaryKeyField = \"ntranscode\";\n      } else if (this.props.Login.masterData.headername == \"Control Master\") {\n        this.extractedColumnList = [{\n          \"idsName\": \"IDS_CONTROLMASTERID\",\n          \"dataField\": \"scontrolname\",\n          \"width\": \"250px\"\n        }, {\n          \"idsName\": \"IDS_CONTROLMASTER\",\n          \"dataField\": \"sdisplayname\",\n          \"width\": \"250px\"\n        }];\n        primaryKeyField = \"ncontrolcode\";\n      } else if (this.props.Login.masterData.headername == \"Approval Sub Type\") {\n        this.extractedColumnList = [{\n          \"idsName\": \"IDS_APPROVALSUBTYPEID\",\n          \"dataField\": \"sdisplayname\",\n          \"width\": \"250px\"\n        }, {\n          \"idsName\": \"IDS_APPROVALSUBTYPENAME\",\n          \"dataField\": \"sapprovalsubtypename\",\n          \"width\": \"250px\"\n        }];\n        primaryKeyField = \"napprovalsubtypecode\";\n      } else if (this.props.Login.masterData.headername == \"Sample Type\") {\n        this.extractedColumnList = [{\n          \"idsName\": \"IDS_SAMPLETYPEID\",\n          \"dataField\": \"sdisplayname\",\n          \"width\": \"250px\"\n        }, {\n          \"idsName\": \"IDS_SAMPLETYPENAME\",\n          \"dataField\": \"ssampletypename\",\n          \"width\": \"250px\"\n        }];\n        primaryKeyField = \"nsampletypecode\";\n      } else if (this.props.Login.masterData.headername == \"Template Design\") {\n        this.extractedColumnList = [{\n          \"idsName\": \"IDS_TEMPLATETYPEID\",\n          \"dataField\": \"sdisplayname\",\n          \"width\": \"250px\"\n        }, {\n          \"idsName\": \"IDS_TEMPLATETYPENAME\",\n          \"dataField\": \"stemplatetypename\",\n          \"width\": \"250px\"\n        }];\n        primaryKeyField = \"ntemplatetypecode\";\n      } else if (this.props.Login.masterData.headername == \"Period\") {\n        this.extractedColumnList = [{\n          \"idsName\": \"IDS_PERIODID\",\n          \"dataField\": \"sdisplayname\",\n          \"width\": \"250px\"\n        }, {\n          \"idsName\": \"IDS_PERIODNAME\",\n          \"dataField\": \"speriodname\",\n          \"width\": \"250px\"\n        }];\n        primaryKeyField = \"nperiodcode\";\n      } else if (this.props.Login.masterData.headername == \"Gender\") {\n        this.extractedColumnList = [{\n          \"idsName\": \"IDS_GENDERID\",\n          \"dataField\": \"sdisplayname\",\n          \"width\": \"250px\"\n        }, {\n          \"idsName\": \"IDS_GENDERNAME\",\n          \"dataField\": \"sgendername\",\n          \"width\": \"250px\"\n        }];\n        primaryKeyField = \"ngendercode\";\n      } else if (this.props.Login.masterData.headername == \"Grade\") {\n        this.extractedColumnList = [{\n          \"idsName\": \"IDS_GRADEID\",\n          \"dataField\": \"sgradename\",\n          \"width\": \"250px\"\n        }, {\n          \"idsName\": \"IDS_GRADENAME\",\n          \"dataField\": \"sdisplayname\",\n          \"width\": \"250px\"\n        }];\n        primaryKeyField = \"ngradecode\";\n      } else if (this.props.Login.masterData.headername == \"Scheduler Type\") {\n        this.extractedColumnList = [{\n          \"idsName\": \"IDS_SCHEDULERTYPEID\",\n          \"dataField\": \"sdisplayname\",\n          \"width\": \"250px\"\n        }, {\n          \"idsName\": \"IDS_SCHEDULERTYPENAME\",\n          \"dataField\": \"sschedulertypename\",\n          \"width\": \"250px\"\n        }];\n        primaryKeyField = \"nschedulertypecode\";\n      } else if (this.props.Login.masterData.headername == \"Query Builder Tables\") {\n        this.extractedColumnList = [{\n          \"idsName\": \"IDS_FORMS\",\n          \"dataField\": \"sformname\",\n          \"width\": \"250px\"\n        }, {\n          \"idsName\": \"IDS_SQLQUERYBUILDERID\",\n          \"dataField\": \"stablename\",\n          \"width\": \"250px\"\n        }, {\n          \"idsName\": \"IDS_SQLQUERYBUILDERNAME\",\n          \"dataField\": \"sdisplayname\",\n          \"width\": \"250px\"\n        }];\n        primaryKeyField = \"nquerybuildertablecode\";\n      } else if (this.props.Login.masterData.headername == \"Query Builder Views\") {\n        this.extractedColumnList = [{\n          \"idsName\": \"IDS_VIEWSQUERYBUILDERID\",\n          \"dataField\": \"sviewname\",\n          \"width\": \"250px\"\n        }, {\n          \"idsName\": \"IDS_VIEWSQUERYBUILDERNAME\",\n          \"dataField\": \"sdisplayname\",\n          \"width\": \"250px\"\n        }];\n        primaryKeyField = \"nquerybuilderviewscode\";\n      } else if (this.props.Login.masterData.headername == \"Query Builder Views Columns\") {\n        this.extractedColumnList = [{\n          \"idsName\": \"IDS_QUERYBUILDERVIEWSCOLUMNSID\",\n          \"dataField\": \"sdisplayname\",\n          \"width\": \"250px\"\n        }];\n        primaryKeyField = this.props.Login.selectedId;\n      } else if (this.props.Login.masterData.headername == \"Multilingual Masters\") {\n        this.extractedColumnList = [{\n          \"idsName\": \"IDS_MULTILINGUALMASTERSID\",\n          \"dataField\": \"sdisplayname\",\n          \"width\": \"250px\"\n        }, {\n          \"idsName\": \"IDS_MULTILINGUALMASTERSAME\",\n          \"dataField\": \"sdefaultname\",\n          \"width\": \"250px\"\n        }];\n        primaryKeyField = \"nmultilingualmasterscode\";\n      } else if (this.props.Login.masterData.headername == \"Material Type\") {\n        this.extractedColumnList = [{\n          \"idsName\": \"IDS_MATERIALTYPEID\",\n          \"dataField\": \"smaterialtypename\",\n          \"width\": \"250px\"\n        }, {\n          \"idsName\": \"IDS_MATERIALTYPENAME\",\n          \"dataField\": \"sdisplayname\",\n          \"width\": \"250px\"\n        }];\n        primaryKeyField = \"nmaterialtypecode\";\n      } else if (this.props.Login.masterData.headername == \"Interface Type\") {\n        this.extractedColumnList = [{\n          \"idsName\": \"IDS_INTERFACETYPEID\",\n          \"dataField\": \"sinterfacetypename\",\n          \"width\": \"250px\"\n        }, {\n          \"idsName\": \"IDS_INTERFACETYPENAME\",\n          \"dataField\": \"sdisplayname\",\n          \"width\": \"250px\"\n        }];\n        primaryKeyField = \"ninterfacetypecode\";\n      } else if (this.props.Login.masterData.headername == \"Audit Action Filter\") {\n        this.extractedColumnList = [{\n          \"idsName\": \"IDS_AUDITACTIONFILTERID\",\n          \"dataField\": \"sdefaultname\",\n          \"width\": \"250px\"\n        }, {\n          \"idsName\": \"IDS_AUDITACTIONFILTERNAME\",\n          \"dataField\": \"ssdisplayname\",\n          \"width\": \"250px\"\n        }];\n        primaryKeyField = \"nauditactionfiltercode\";\n      }\n    }\n\n    const languagesId = this.props.Login.inputParam && this.state.controlMap.has(\"UpdateLanguage\") && this.state.controlMap.get('UpdateLanguage').ncontrolcode;\n    const languagesParam = {\n      screenName: \"Language\",\n      operation: \"update\",\n      primaryKeyField: primaryKeyField,\n      masterData: this.props.Login.masterData,\n      userInfo: this.props.Login.userInfo,\n      ncontrolCode: languagesId,\n      selectedRecord: this.state.selectedRecord\n    };\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(ListWrapper, {\n      className: \"client-list-content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      noGutters: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 5,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(Affix, {\n      top: 85,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 7,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(FormSelectSearch, {\n      name: \"nmultilingualmasterscode\",\n      formLabel: this.props.intl.formatMessage({\n        id: \"IDS_MULTILINGUALMASTERS\"\n      }),\n      placeholder: this.props.intl.formatMessage({\n        id: \"IDS_SELECTRECORD\"\n      }),\n      options: this.state.multilingualmasters || [],\n      value: this.props.Login.masterData && this.props.Login.masterData.selectedmultilingualmasters && {\n        value: this.props.Login.masterData.selectedmultilingualmasters.nmultilingualmasterscode ? this.props.Login.masterData.selectedmultilingualmasters.nmultilingualmasterscode : this.state.selectedRecord.nmultilingualmasterscode.value,\n        label: this.props.Login.masterData.selectedmultilingualmasters.sdisplayname ? this.props.Login.masterData.selectedmultilingualmasters.sdisplayname : this.state.selectedRecord.nmultilingualmasterscode.label\n      },\n      isMandatory: false,\n      isMulti: false,\n      isClearable: false,\n      isSearchable: true,\n      isDisabled: false,\n      closeMenuOnSelect: true,\n      className: \"mb-2\",\n      onChange: event => this.onComboChange(event, 'nmultilingualmasterscode'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 57\n      }\n    })), this.props.Login.masterData.headername == \"Query Builder Views Columns\" ? /*#__PURE__*/React.createElement(Col, {\n      md: 5,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 257,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(FormSelectSearch, {\n      name: \"nquerybuilderviewscode\",\n      placeholder: this.props.intl.formatMessage({\n        id: \"IDS_SELECTRECORD\"\n      }),\n      options: this.state.QueryBuilderViewsName || [],\n      value: this.props.Login.masterData && this.props.Login.masterData.selectedQueryBuilderViewsName && {\n        value: this.state.selectedRecord.nquerybuilderviewscode !== undefined ? this.state.selectedRecord.nquerybuilderviewscode.value : this.props.Login.masterData.selectedQueryBuilderViewsName.nquerybuilderviewscode,\n        label: this.state.selectedRecord.nquerybuilderviewscode !== undefined ? this.state.selectedRecord.nquerybuilderviewscode.label : this.props.Login.masterData.selectedQueryBuilderViewsName.sdisplayname\n      },\n      isMandatory: false,\n      isMulti: false,\n      isClearable: false,\n      isSearchable: true,\n      isDisabled: false,\n      closeMenuOnSelect: true,\n      className: \"mb-2\",\n      onChange: event => this.onComboChange(event, 'nquerybuilderviewscode'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 258,\n        columnNumber: 61\n      }\n    })) : \"\")))))), this.state.data ? /*#__PURE__*/React.createElement(DataGrid, {\n      primaryKeyField: primaryKeyField,\n      data: this.state.data.listofItem,\n      dataResult: this.state.dataResult,\n      dataState: this.state.dataState,\n      dataStateChange: this.dataStateChange,\n      extractedColumnList: this.extractedColumnList,\n      languagesRecord: this.props.fetchById,\n      reloadData: this.reloadData,\n      controlMap: this.state.controlMap,\n      userRoleControlRights: this.state.userRoleControlRights,\n      inputParam: this.props.Login.inputParam,\n      userInfo: this.props.Login.userInfo,\n      languagesParam: languagesParam,\n      methodUrl: \"Language\",\n      pageable: true,\n      isActionRequired: true,\n      isToolBarRequired: true,\n      isDownloadPDFRequired: true,\n      isDownloadExcelRequired: true,\n      gridHeight: '465px',\n      scrollable: \"scrollable\",\n      selectedId: this.props.Login.selectedId,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 286,\n        columnNumber: 33\n      }\n    }) : \"\"))), this.props.Login.openModal ? /*#__PURE__*/React.createElement(SlideOutModal, {\n      onSaveClick: this.onSaveClick,\n      operation: this.props.Login.operation,\n      screenName: this.props.Login.inputParam.displayName,\n      closeModal: this.handleClose,\n      show: this.props.Login.openModal,\n      showSaveContinue: false,\n      hideSave: this.state.showSynonym,\n      inputParam: this.props.Login.inputParam,\n      esign: this.props.Login.loadEsign,\n      validateEsign: this.validateEsign,\n      selectedRecord: this.state.selectedRecord,\n      mandatoryFields: this.mandatoryFields,\n      addComponent: this.props.Login.loadEsign ? /*#__PURE__*/React.createElement(Esign, {\n        operation: this.props.Login.operation ? this.props.Login.operation : '',\n        onInputOnChange: this.onInputOnChange,\n        inputParam: this.props.Login.inputParam,\n        selectedRecord: this.state.selectedRecord || {},\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 329,\n          columnNumber: 29\n        }\n      }) : /*#__PURE__*/React.createElement(AddLanguageSynonym, {\n        selectedFieldRecord: this.state.selectedRecord,\n        needheader: this.props.Login.masterData.selectedmultilingualmasters || this.props.Login.masterData.sneedheader,\n        onInputOnChange: this.onInputOnChange,\n        selectedJsondata: this.props.Login.masterData.headername == \"Query Builder Views Columns\" ? this.props.Login.selectedRecord.sjsondata : this.props.Login.selectedRecord && this.props.Login.selectedRecord.jsondata // selectedJsondata={this.props.Login.selectedRecord && this.props.Login.selectedRecord.jsondata}\n        ,\n        languages: this.props.Login.languageList || [],\n        fieldName: this.props.Login.selectedRecord.fieldName,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 335,\n          columnNumber: 29\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 315,\n        columnNumber: 21\n      }\n    }) : \"\");\n  }\n\n  componentDidUpdate(previousProps) {\n    if (this.props.Login.masterData !== previousProps.Login.masterData) {\n      if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\n        const userRoleControlRights = [];\n\n        if (this.props.Login.userRoleControlRights) {\n          this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item => userRoleControlRights.push(item.ncontrolcode));\n        }\n\n        const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode);\n        const multilingualmastersMap = constructOptionList(this.props.Login.masterData.multilingualmasters || [], \"nmultilingualmasterscode\", \"sdisplayname\", \"nsorter\", 'ascending', undefined, true);\n        const multilingualmasters = multilingualmastersMap.get(\"OptionList\");\n        this.setState({\n          userRoleControlRights,\n          controlMap,\n          multilingualmasters: multilingualmasters,\n          data: this.props.Login.masterData,\n          dataResult: process(this.props.Login.masterData.listofItem ? this.props.Login.masterData.listofItem : [], this.state.dataState)\n        });\n      } else {\n        let {\n          dataState\n        } = this.state;\n\n        if (this.props.Login.dataState === undefined) {\n          dataState = {\n            skip: 0,\n            take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n          };\n        }\n\n        const FilterQueryMap = constructOptionList(this.props.Login.masterData.QueryBuilderViewsName || [], \"nquerybuilderviewscode\", \"sdisplayname\", undefined, undefined, true);\n        const QueryBuilderViewsName = FilterQueryMap.get(\"OptionList\");\n        const formNameQueryMap = constructOptionList(this.props.Login.filterValue || [], \"nformcode\", \"sformname\", undefined, undefined, true);\n        const MaterialConfig = formNameQueryMap.get(\"OptionList\");\n        this.setState({\n          data: this.props.Login.masterData,\n          QueryBuilderViewsName: QueryBuilderViewsName,\n          MaterialConfig: MaterialConfig,\n          dataResult: process(this.props.Login.masterData.listofItem ? this.props.Login.masterData.listofItem : [], dataState),\n          dataState\n        });\n      }\n    } else if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\n      let selectedRecord;\n\n      if (this.props.Login.masterData.headername === \"Query Builder Views Columns\") {\n        selectedRecord = { ...this.props.Login.selectedRecord,\n          sdefaultname: this.props.Login.selectedRecord.sdefaultname\n        };\n      } else {\n        selectedRecord = { ...this.props.Login.selectedRecord\n        };\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    }\n  }\n\n  handleClose() {\n    let loadEsign = this.props.Login.loadEsign;\n    let openModal = this.props.Login.openModal;\n    let selectedRecord = this.props.Login.selectedRecord;\n    let selectedId = this.props.Login.selectedId;\n\n    if (this.state.showSynonym) {\n      this.setState({\n        showSynonym: false\n      });\n      return null;\n    }\n\n    if (this.props.Login.loadEsign) {\n      loadEsign = false;\n      openModal = false;\n    } else {\n      openModal = false;\n      selectedRecord = { ...this.props.Login.selectedRecord\n      };\n      selectedId = null;\n    }\n\n    const updateInfo = {\n      typeName: DEFAULT_RETURN,\n      data: {\n        openModal,\n        loadEsign,\n        selectedRecord,\n        selectedId\n      }\n    };\n    this.props.updateStore(updateInfo);\n  }\n\n}\n\nexport default connect(mapStateToProps, {\n  callService,\n  crudMaster,\n  showRegTypeAddScreen,\n  fetchById,\n  comboService,\n  updateStore,\n  validateEsignCredential\n})(injectIntl(Languages));","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/pages/configurationmaster/Languages.jsx"],"names":["React","ListWrapper","Row","Col","Button","toast","process","connect","injectIntl","callService","crudMaster","showRegTypeAddScreen","fetchById","comboService","updateStore","validateEsignCredential","DEFAULT_RETURN","DataGrid","FormSelectSearch","SlideOutModal","showEsign","getControlMap","constructOptionList","Esign","AddLanguageSynonym","Affix","faSync","faLanguage","faFilePdf","FontAwesomeIcon","mapStateToProps","state","Login","Languages","Component","constructor","props","dataStateChange","event","setState","dataResult","data","listofItem","dataState","reloadData","inputParam","inputData","userinfo","userInfo","methodUrl","classUrl","displayName","validateEsign","sreason","selectedRecord","nreasoncode","value","spredefinedreason","label","password","screenData","onInputOnChange","name","item","fieldName","target","type","checked","masterData","headername","undefined","onComboChange","comboData","sdisplayname","nquerybuilderviewscode","sviewname","primarykey","displayname","nmultilingualmasterscode","onSaveClick","saveType","formRef","selectedId","showSynonym","operation","nmenucode","nmodulecode","nformcode","ntranscode","salertdisplaystatus","stransdisplaystatus","sactiondisplaystatus","ncontrolcode","scontrolids","napprovalsubtypecode","approvalsubtypename","nsampletypecode","sampletypename","ntemplatetypecode","stemplatetypename","nperiodcode","speriodname","ngendercode","sgendername","ngradecode","nschedulertypecode","sschedulertypename","nquerybuildertablecode","tablename","sdefaultname","findIndex","sjsondata","nmaterialtypecode","smaterialtypename","ninterfacetypecode","sinterfacetypename","nauditactionfiltercode","userRoleControlRights","updateInfo","typeName","loadEsign","openModal","screenName","createRef","extractedColumnList","handleClose","bind","skip","take","settings","parseInt","masterStatus","error","controlMap","Map","mandatoryFields","getDerivedStateFromProps","warn","render","primaryKeyField","languageList","languagesId","has","get","languagesParam","ncontrolCode","intl","formatMessage","id","multilingualmasters","selectedmultilingualmasters","QueryBuilderViewsName","selectedQueryBuilderViewsName","sneedheader","jsondata","componentDidUpdate","previousProps","Object","values","map","push","multilingualmastersMap","FilterQueryMap","formNameQueryMap","filterValue","MaterialConfig"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { ListWrapper } from '../../components/client-group.styles'\r\nimport { Row, Col, Button } from 'react-bootstrap';\r\nimport { toast } from 'react-toastify';\r\nimport { process } from '@progress/kendo-data-query';\r\nimport { connect } from 'react-redux';\r\nimport { injectIntl } from 'react-intl';\r\nimport { callService, crudMaster, showRegTypeAddScreen, fetchById, comboService, updateStore, validateEsignCredential } from '../../actions';\r\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\r\nimport DataGrid from '../../components/data-grid/data-grid.component';\r\nimport FormSelectSearch from '../../components/form-select-search/form-select-search.component';\r\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\r\nimport { showEsign, getControlMap, constructOptionList } from '../../components/CommonScript';\r\nimport Esign from '../audittrail/Esign';\r\nimport AddLanguageSynonym from '../../components/AddLanguages';\r\n// import ReactTooltip from 'react-tooltip';\r\nimport { Affix } from 'rsuite';\r\nimport { faSync, faLanguage, faFilePdf } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n\r\nconst mapStateToProps = state => {\r\n    return ({ Login: state.Login })\r\n}\r\n\r\nclass Languages extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.formRef = React.createRef();\r\n        this.extractedColumnList = [];\r\n        this.handleClose = this.handleClose.bind(this);\r\n        const dataState = {\r\n            skip: 0,\r\n            take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5,\r\n        };\r\n        this.state = {\r\n            data: [], masterStatus: \"\", error: \"\", selectedRecord: {}, userRoleControlRights: [], controlMap: new Map(),\r\n            dataResult: [],\r\n            dataState: dataState,\r\n            mandatoryFields: []\r\n\r\n        };\r\n    }\r\n    dataStateChange = (event) => {\r\n        this.setState({\r\n            dataResult: process(this.state.data.listofItem, event.dataState),\r\n            dataState: event.dataState\r\n        });\r\n    }\r\n    reloadData = () => {\r\n        const inputParam = {\r\n            inputData: { userinfo: this.props.Login.userInfo },\r\n            methodUrl: \"Language\",\r\n            classUrl: this.props.Login.inputParam.classUrl,\r\n            displayName: this.props.Login.inputParam.displayName ? this.props.Login.inputParam.displayName : '',\r\n            userInfo: this.props.Login.userInfo\r\n        };\r\n        this.props.callService(inputParam);\r\n    }\r\n\r\n    validateEsign = () => {\r\n        const inputParam = {\r\n            inputData: {\r\n                \"userinfo\": {\r\n                    ...this.props.Login.userInfo,\r\n                    sreason: this.state.selectedRecord[\"esigncomments\"],\r\n                    nreasoncode:this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].value,\r\n                    spredefinedreason:this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].label,\r\n               \r\n                },\r\n                password: this.state.selectedRecord[\"esignpassword\"]\r\n            },\r\n            screenData: this.props.Login.screenData\r\n        }\r\n        this.props.validateEsignCredential(inputParam, \"openModal\");\r\n    }\r\n\r\n\r\n    static getDerivedStateFromProps(props, state) {\r\n\r\n        if (props.Login.masterStatus !== state.masterStatus) {\r\n            toast.warn(props.Login.masterStatus);\r\n            props.Login.masterStatus = \"\";\r\n        }\r\n        if (props.Login.error !== state.error) {\r\n            toast.error(props.Login.error)\r\n            props.Login.error = \"\";\r\n        }\r\n        return null;\r\n    }\r\n\r\n    render() {\r\n        let primaryKeyField = \"\";\r\n        if (this.props.Login.inputParam !== undefined) {\r\n            this.mandatoryFields = [\r\n                { \"idsName\": \"IDS_DEFAULTLANGUAGE\", \"dataField\": this.props.Login.languageList[0].value == \"en-US\" ? \"sdefaultname\" : \" \", \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"text\" }\r\n            ]\r\n            if (this.props.Login.masterData.headername == \"Menu\") {\r\n                this.extractedColumnList = [\r\n                    { \"idsName\": \"IDS_MENUID\", \"dataField\": \"smenuname\", \"width\": \"250px\" },\r\n                    { \"idsName\": \"IDS_MENUNAME\", \"dataField\": \"sdisplayname\", \"width\": \"250px\" }\r\n                ]\r\n                primaryKeyField = \"nmenucode\";\r\n            } else if (this.props.Login.masterData.headername == \"Module\") {\r\n                this.extractedColumnList = [\r\n                    { \"idsName\": \"IDS_MODULEID\", \"dataField\": \"smodulename\", \"width\": \"250px\" },\r\n                    { \"idsName\": \"IDS_MODULENAME\", \"dataField\": \"sdisplayname\", \"width\": \"250px\" },\r\n                ]\r\n                primaryKeyField = \"nmodulecode\";\r\n            } else if (this.props.Login.masterData.headername == \"Forms\") {\r\n                this.extractedColumnList = [\r\n                    { \"idsName\": \"IDS_FORMID\", \"dataField\": \"sformname\", \"width\": \"250px\" },\r\n                    { \"idsName\": \"IDS_FORMNAME\", \"dataField\": \"sdisplayname\", \"width\": \"250px\" },\r\n                ]\r\n                primaryKeyField = \"nformcode\";\r\n            } else if (this.props.Login.masterData.headername == \"Transaction Status\") {\r\n                this.extractedColumnList = [\r\n                    { \"idsName\": \"IDS_TRANSACTIONSTATUSID\", \"dataField\": \"stransstatus\", \"width\": \"250px\" },\r\n                    { \"idsName\": \"IDS_ACTIONDISPLAYSTATUS\", \"dataField\": \"sactiondisplaystatus\", \"width\": \"250px\" },\r\n                    { \"idsName\": \"IDS_TRANSDISPLAYSTATUS\", \"dataField\": \"stransdisplaystatus\", \"width\": \"250px\" },\r\n                ]\r\n                primaryKeyField = \"ntranscode\";\r\n            } else if (this.props.Login.masterData.headername == \"Control Master\") {\r\n                this.extractedColumnList = [\r\n                    { \"idsName\": \"IDS_CONTROLMASTERID\", \"dataField\": \"scontrolname\", \"width\": \"250px\" },\r\n                    { \"idsName\": \"IDS_CONTROLMASTER\", \"dataField\": \"sdisplayname\", \"width\": \"250px\" },\r\n                ]\r\n                primaryKeyField = \"ncontrolcode\";\r\n            } else if (this.props.Login.masterData.headername == \"Approval Sub Type\") {\r\n                this.extractedColumnList = [\r\n                    { \"idsName\": \"IDS_APPROVALSUBTYPEID\", \"dataField\": \"sdisplayname\", \"width\": \"250px\" },\r\n                    { \"idsName\": \"IDS_APPROVALSUBTYPENAME\", \"dataField\": \"sapprovalsubtypename\", \"width\": \"250px\" },\r\n                ]\r\n                primaryKeyField = \"napprovalsubtypecode\";\r\n            } else if (this.props.Login.masterData.headername == \"Sample Type\") {\r\n                this.extractedColumnList = [\r\n                    { \"idsName\": \"IDS_SAMPLETYPEID\", \"dataField\": \"sdisplayname\", \"width\": \"250px\" },\r\n                    { \"idsName\": \"IDS_SAMPLETYPENAME\", \"dataField\": \"ssampletypename\", \"width\": \"250px\" },\r\n                ]\r\n                primaryKeyField = \"nsampletypecode\";\r\n            } else if (this.props.Login.masterData.headername == \"Template Design\") {\r\n                this.extractedColumnList = [\r\n                    { \"idsName\": \"IDS_TEMPLATETYPEID\", \"dataField\": \"sdisplayname\", \"width\": \"250px\" },\r\n                    { \"idsName\": \"IDS_TEMPLATETYPENAME\", \"dataField\": \"stemplatetypename\", \"width\": \"250px\" }\r\n                ]\r\n                primaryKeyField = \"ntemplatetypecode\";\r\n            } else if (this.props.Login.masterData.headername == \"Period\") {\r\n                this.extractedColumnList = [\r\n                    { \"idsName\": \"IDS_PERIODID\", \"dataField\": \"sdisplayname\", \"width\": \"250px\" },\r\n                    { \"idsName\": \"IDS_PERIODNAME\", \"dataField\": \"speriodname\", \"width\": \"250px\" }\r\n                ]\r\n                primaryKeyField = \"nperiodcode\";\r\n            } else if (this.props.Login.masterData.headername == \"Gender\") {\r\n                this.extractedColumnList = [\r\n                    { \"idsName\": \"IDS_GENDERID\", \"dataField\": \"sdisplayname\", \"width\": \"250px\" },\r\n                    { \"idsName\": \"IDS_GENDERNAME\", \"dataField\": \"sgendername\", \"width\": \"250px\" }\r\n                ]\r\n                primaryKeyField = \"ngendercode\";\r\n            } else if (this.props.Login.masterData.headername == \"Grade\") {\r\n                this.extractedColumnList = [\r\n                    { \"idsName\": \"IDS_GRADEID\", \"dataField\": \"sgradename\", \"width\": \"250px\" },\r\n                    { \"idsName\": \"IDS_GRADENAME\", \"dataField\": \"sdisplayname\", \"width\": \"250px\" }\r\n                ]\r\n                primaryKeyField = \"ngradecode\";\r\n            } else if (this.props.Login.masterData.headername == \"Scheduler Type\") {\r\n                this.extractedColumnList = [\r\n                    { \"idsName\": \"IDS_SCHEDULERTYPEID\", \"dataField\": \"sdisplayname\", \"width\": \"250px\" },\r\n                    { \"idsName\": \"IDS_SCHEDULERTYPENAME\", \"dataField\": \"sschedulertypename\", \"width\": \"250px\" }\r\n                ]\r\n                primaryKeyField = \"nschedulertypecode\";\r\n            } else if (this.props.Login.masterData.headername == \"Query Builder Tables\") {\r\n                this.extractedColumnList = [\r\n                    { \"idsName\": \"IDS_FORMS\", \"dataField\": \"sformname\", \"width\": \"250px\" },\r\n                    { \"idsName\": \"IDS_SQLQUERYBUILDERID\", \"dataField\": \"stablename\", \"width\": \"250px\" },\r\n                    { \"idsName\": \"IDS_SQLQUERYBUILDERNAME\", \"dataField\": \"sdisplayname\", \"width\": \"250px\" }\r\n                ]\r\n                primaryKeyField = \"nquerybuildertablecode\";\r\n            } else if (this.props.Login.masterData.headername == \"Query Builder Views\") {\r\n                this.extractedColumnList = [\r\n                    { \"idsName\": \"IDS_VIEWSQUERYBUILDERID\", \"dataField\": \"sviewname\", \"width\": \"250px\" },\r\n                    { \"idsName\": \"IDS_VIEWSQUERYBUILDERNAME\", \"dataField\": \"sdisplayname\", \"width\": \"250px\" }\r\n                ]\r\n                primaryKeyField = \"nquerybuilderviewscode\";\r\n            } else if (this.props.Login.masterData.headername == \"Query Builder Views Columns\") {\r\n                this.extractedColumnList = [{ \"idsName\": \"IDS_QUERYBUILDERVIEWSCOLUMNSID\", \"dataField\": \"sdisplayname\", \"width\": \"250px\" }\r\n                ]\r\n                primaryKeyField = this.props.Login.selectedId;\r\n            } else if (this.props.Login.masterData.headername == \"Multilingual Masters\") {\r\n                this.extractedColumnList = [\r\n                    { \"idsName\": \"IDS_MULTILINGUALMASTERSID\", \"dataField\": \"sdisplayname\", \"width\": \"250px\" },\r\n                    { \"idsName\": \"IDS_MULTILINGUALMASTERSAME\", \"dataField\": \"sdefaultname\", \"width\": \"250px\" }\r\n                ]\r\n                primaryKeyField = \"nmultilingualmasterscode\";\r\n            } else if (this.props.Login.masterData.headername == \"Material Type\") {\r\n                this.extractedColumnList = [\r\n                    { \"idsName\": \"IDS_MATERIALTYPEID\", \"dataField\": \"smaterialtypename\", \"width\": \"250px\" },\r\n                    { \"idsName\": \"IDS_MATERIALTYPENAME\", \"dataField\": \"sdisplayname\", \"width\": \"250px\" }\r\n                ]\r\n                primaryKeyField = \"nmaterialtypecode\";\r\n            } else if (this.props.Login.masterData.headername == \"Interface Type\") {\r\n                this.extractedColumnList = [\r\n                    { \"idsName\": \"IDS_INTERFACETYPEID\", \"dataField\": \"sinterfacetypename\", \"width\": \"250px\" },\r\n                    { \"idsName\": \"IDS_INTERFACETYPENAME\", \"dataField\": \"sdisplayname\", \"width\": \"250px\" }\r\n                ]\r\n                primaryKeyField = \"ninterfacetypecode\";\r\n            }else if (this.props.Login.masterData.headername == \"Audit Action Filter\") {\r\n                this.extractedColumnList = [\r\n                    { \"idsName\": \"IDS_AUDITACTIONFILTERID\", \"dataField\": \"sdefaultname\", \"width\": \"250px\" },\r\n                    { \"idsName\": \"IDS_AUDITACTIONFILTERNAME\", \"dataField\": \"ssdisplayname\", \"width\": \"250px\" }\r\n                ]\r\n                primaryKeyField = \"nauditactionfiltercode\";\r\n            }\r\n        }\r\n\r\n        const languagesId = this.props.Login.inputParam && this.state.controlMap.has(\"UpdateLanguage\")\r\n            && this.state.controlMap.get('UpdateLanguage').ncontrolcode;\r\n        const languagesParam = {\r\n            screenName: \"Language\", operation: \"update\", primaryKeyField: primaryKeyField,\r\n            masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo, ncontrolCode: languagesId, selectedRecord: this.state.selectedRecord\r\n        };\r\n\r\n        return (\r\n            <>\r\n                <Row>\r\n                    <Col>\r\n                        <ListWrapper className=\"client-list-content\">\r\n                            <Row noGutters>\r\n                                <Col md={5}>\r\n                                    <Affix top={85}>\r\n                                        <Row>\r\n                                            <Col md={12}>\r\n                                                <Row>\r\n                                                    <Col md={7}>\r\n                                                        <FormSelectSearch\r\n                                                            name={\"nmultilingualmasterscode\"}\r\n                                                            formLabel={this.props.intl.formatMessage({ id: \"IDS_MULTILINGUALMASTERS\" })}\r\n                                                            placeholder={this.props.intl.formatMessage({ id: \"IDS_SELECTRECORD\" })}\r\n                                                            options={this.state.multilingualmasters || []}\r\n                                                            value={this.props.Login.masterData && this.props.Login.masterData.selectedmultilingualmasters\r\n                                                                && {\r\n                                                                value:\r\n                                                                    this.props.Login.masterData.selectedmultilingualmasters.nmultilingualmasterscode ? this.props.Login.masterData.selectedmultilingualmasters.nmultilingualmasterscode :\r\n                                                                        this.state.selectedRecord.nmultilingualmasterscode.value,\r\n                                                                label: this.props.Login.masterData.selectedmultilingualmasters.sdisplayname ? this.props.Login.masterData.selectedmultilingualmasters.sdisplayname :\r\n                                                                    this.state.selectedRecord.nmultilingualmasterscode.label\r\n                                                            }}\r\n                                                            isMandatory={false}\r\n                                                            isMulti={false}\r\n                                                            isClearable={false}\r\n                                                            isSearchable={true}\r\n                                                            isDisabled={false}\r\n                                                            closeMenuOnSelect={true}\r\n                                                            className=\"mb-2\"\r\n                                                            onChange={(event) => this.onComboChange(event, 'nmultilingualmasterscode')}\r\n                                                        />\r\n                                                    </Col>\r\n                                                    {this.props.Login.masterData.headername == \"Query Builder Views Columns\" ?\r\n                                                        <Col md={5} >\r\n                                                            <FormSelectSearch\r\n                                                                name={\"nquerybuilderviewscode\"}\r\n                                                                placeholder={this.props.intl.formatMessage({ id: \"IDS_SELECTRECORD\" })}\r\n                                                                options={this.state.QueryBuilderViewsName || []}\r\n                                                                value={this.props.Login.masterData && this.props.Login.masterData.selectedQueryBuilderViewsName\r\n                                                                    && {\r\n                                                                    value: this.state.selectedRecord.nquerybuilderviewscode !== undefined\r\n                                                                        ? this.state.selectedRecord.nquerybuilderviewscode.value : this.props.Login.masterData.selectedQueryBuilderViewsName.nquerybuilderviewscode,\r\n                                                                    label: this.state.selectedRecord.nquerybuilderviewscode !== undefined ?\r\n                                                                        this.state.selectedRecord.nquerybuilderviewscode.label : this.props.Login.masterData.selectedQueryBuilderViewsName.sdisplayname\r\n                                                                }}\r\n                                                                isMandatory={false}\r\n                                                                isMulti={false}\r\n                                                                isClearable={false}\r\n                                                                isSearchable={true}\r\n                                                                isDisabled={false}\r\n                                                                closeMenuOnSelect={true}\r\n                                                                className=\"mb-2\"\r\n                                                                onChange={(event) => this.onComboChange(event, 'nquerybuilderviewscode')}\r\n                                                            />\r\n                                                        </Col> : \"\"}\r\n                                                </Row>\r\n                                            </Col>\r\n                                        </Row>\r\n                                    </Affix>\r\n                                </Col>\r\n                            </Row>\r\n                            {this.state.data ?\r\n                                <DataGrid\r\n                                    primaryKeyField={primaryKeyField}\r\n                                    data={this.state.data.listofItem}\r\n                                    dataResult={this.state.dataResult}\r\n                                    dataState={this.state.dataState}\r\n                                    dataStateChange={this.dataStateChange}\r\n                                    extractedColumnList={this.extractedColumnList}\r\n                                    languagesRecord={this.props.fetchById}\r\n                                    reloadData={this.reloadData}\r\n                                    controlMap={this.state.controlMap}\r\n                                    userRoleControlRights={this.state.userRoleControlRights}\r\n                                    inputParam={this.props.Login.inputParam}\r\n                                    userInfo={this.props.Login.userInfo}\r\n                                    languagesParam={languagesParam}\r\n                                    methodUrl=\"Language\"\r\n                                    pageable={true}\r\n                                    isActionRequired={true}\r\n                                    isToolBarRequired={true}\r\n                                    isDownloadPDFRequired={true}\r\n                                    isDownloadExcelRequired={true}\r\n                                    gridHeight={'465px'}\r\n                                    scrollable={\"scrollable\"}\r\n                                    selectedId={this.props.Login.selectedId}\r\n                                />\r\n                                : \"\"}\r\n                        </ListWrapper>\r\n                    </Col>\r\n                </Row>\r\n                {this.props.Login.openModal ?\r\n                    <SlideOutModal\r\n                        onSaveClick={this.onSaveClick}\r\n                        operation={this.props.Login.operation}\r\n                        screenName={this.props.Login.inputParam.displayName}\r\n                        closeModal={this.handleClose}\r\n                        show={this.props.Login.openModal}\r\n                        showSaveContinue={false}\r\n                        hideSave={this.state.showSynonym}\r\n                        inputParam={this.props.Login.inputParam}\r\n                        esign={this.props.Login.loadEsign}\r\n                        validateEsign={this.validateEsign}\r\n                        selectedRecord={this.state.selectedRecord}\r\n                        mandatoryFields={this.mandatoryFields}\r\n                        addComponent={this.props.Login.loadEsign ?\r\n                            <Esign operation={this.props.Login.operation ? this.props.Login.operation : ''}\r\n                                onInputOnChange={this.onInputOnChange}\r\n                                inputParam={this.props.Login.inputParam}\r\n                                selectedRecord={this.state.selectedRecord || {}}\r\n                            />\r\n                            :\r\n                            <AddLanguageSynonym\r\n                                selectedFieldRecord={this.state.selectedRecord}\r\n                                needheader={(this.props.Login.masterData.selectedmultilingualmasters || this.props.Login.masterData.sneedheader)}\r\n                                onInputOnChange={this.onInputOnChange}\r\n                                selectedJsondata={this.props.Login.masterData.headername == \"Query Builder Views Columns\" ? this.props.Login.selectedRecord.sjsondata : this.props.Login.selectedRecord && this.props.Login.selectedRecord.jsondata}\r\n                                // selectedJsondata={this.props.Login.selectedRecord && this.props.Login.selectedRecord.jsondata}\r\n                                languages={this.props.Login.languageList || []}\r\n                                fieldName={this.props.Login.selectedRecord.fieldName}\r\n                            />\r\n                        } />\r\n                    : \"\"}\r\n            </>\r\n        );\r\n    }\r\n\r\n    componentDidUpdate(previousProps) {\r\n        if (this.props.Login.masterData !== previousProps.Login.masterData) {\r\n            if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\r\n                const userRoleControlRights = [];\r\n                if (this.props.Login.userRoleControlRights) {\r\n                    this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item =>\r\n                        userRoleControlRights.push(item.ncontrolcode))\r\n                }\r\n                const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode)\r\n\r\n                const multilingualmastersMap = constructOptionList(this.props.Login.masterData.multilingualmasters || [], \"nmultilingualmasterscode\",\r\n                    \"sdisplayname\", \"nsorter\", 'ascending', undefined, true);\r\n                const multilingualmasters = multilingualmastersMap.get(\"OptionList\");\r\n                this.setState({\r\n                    userRoleControlRights, controlMap, multilingualmasters: multilingualmasters, data: this.props.Login.masterData,\r\n                    dataResult: process(this.props.Login.masterData.listofItem ? this.props.Login.masterData.listofItem : [], this.state.dataState)\r\n                });\r\n            }\r\n            else {\r\n                let { dataState } = this.state;\r\n                if (this.props.Login.dataState === undefined) {\r\n                    dataState = { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 }\r\n                }\r\n                const FilterQueryMap = constructOptionList(this.props.Login.masterData.QueryBuilderViewsName || [], \"nquerybuilderviewscode\",\r\n                    \"sdisplayname\", undefined, undefined, true);\r\n                const QueryBuilderViewsName = FilterQueryMap.get(\"OptionList\");\r\n                const formNameQueryMap = constructOptionList(this.props.Login.filterValue || [], \"nformcode\",\r\n                    \"sformname\", undefined, undefined, true);\r\n                const MaterialConfig = formNameQueryMap.get(\"OptionList\");\r\n                this.setState({\r\n                    data: this.props.Login.masterData,\r\n                    QueryBuilderViewsName: QueryBuilderViewsName,\r\n                    MaterialConfig: MaterialConfig,\r\n                    dataResult: process(this.props.Login.masterData.listofItem ? this.props.Login.masterData.listofItem : [], dataState),\r\n                    dataState\r\n                });\r\n            }\r\n        }\r\n        else if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\r\n            let selectedRecord;\r\n            if (this.props.Login.masterData.headername === \"Query Builder Views Columns\") {\r\n                selectedRecord = {\r\n                    ...this.props.Login.selectedRecord,\r\n                    sdefaultname: this.props.Login.selectedRecord.sdefaultname,\r\n                }\r\n            } else {\r\n                selectedRecord = {\r\n                    ...this.props.Login.selectedRecord\r\n                }\r\n            }\r\n            this.setState({ selectedRecord });\r\n        }\r\n    }\r\n\r\n\r\n    onInputOnChange = (event, name, item, fieldName) => {\r\n\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if (event.target.type === 'checkbox') {\r\n            selectedRecord[event.target.name] = event.target.checked === true ? 3 : 4;\r\n        }\r\n        else {\r\n            if (name == 'English') {\r\n                if (this.props.Login.masterData.headername === \"Query Builder Views Columns\") {\r\n                    selectedRecord['sjsondata'][fieldName] = { ...selectedRecord['sjsondata'][fieldName], [event.target.name]: event.target.value };\r\n                    selectedRecord[fieldName] = { ...selectedRecord[fieldName], [event.target.name]: event.target.value };\r\n                    selectedRecord[\"sdefaultname\"] = event.target.value == \"\" ? undefined : event.target.value;\r\n                } else {\r\n                    selectedRecord[fieldName] = { ...selectedRecord[fieldName], [event.target.name]: event.target.value };\r\n                    selectedRecord['sdefaultname'] = event.target.value == \"\" ? undefined : event.target.value;\r\n                    if (item == 'sactiondisplaystatus') {\r\n                        selectedRecord['sactiondisplaystatus'] = { ...selectedRecord['sactiondisplaystatus'], [event.target.name]: event.target.value };\r\n                    } else {\r\n                        selectedRecord['stransdisplaystatus'] = { ...selectedRecord['stransdisplaystatus'], [event.target.name]: event.target.value }\r\n                    }\r\n                }\r\n            } else {\r\n                if (this.props.Login.masterData.headername === \"Query Builder Views Columns\") {\r\n                    selectedRecord['sjsondata'][fieldName] = { ...selectedRecord['sjsondata'][fieldName], [event.target.name]: event.target.value };\r\n                    selectedRecord[fieldName] = { ...selectedRecord[fieldName], [event.target.name]: event.target.value };\r\n                } else {\r\n                    selectedRecord[fieldName] = { ...selectedRecord[fieldName], [event.target.name]: event.target.value };\r\n                    selectedRecord[event.target.name] = event.target.value;\r\n                   if (item == 'sactiondisplaystatus') {\r\n                        selectedRecord['sactiondisplaystatus'] = { ...selectedRecord['sactiondisplaystatus'], [event.target.name]: event.target.value };\r\n                    } else {\r\n                        selectedRecord['stransdisplaystatus'] = { ...selectedRecord['stransdisplaystatus'], [event.target.name]: event.target.value }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n\r\n    onComboChange = (comboData, fieldName) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        selectedRecord[fieldName] = comboData;\r\n        this.setState({ selectedRecord });\r\n        if (fieldName === \"nquerybuilderviewscode\") {\r\n            this.props.comboService({\r\n                inputData: {\r\n                    userinfo: this.props.Login.userInfo,\r\n                    sdisplayname: selectedRecord.nquerybuilderviewscode.item.sviewname,\r\n                    primarykey: selectedRecord.nquerybuilderviewscode.value,\r\n                    item: selectedRecord.nquerybuilderviewscode.item,\r\n                    displayname:this.props.Login.masterData,\r\n                },\r\n                masterData: this.props.Login.masterData,\r\n                userinfo: this.props.Login.userInfo,\r\n                item: selectedRecord.nquerybuilderviewscode.item,\r\n                sdisplayname: selectedRecord.nquerybuilderviewscode.label,\r\n                displayname:this.props.Login.masterData,\r\n\r\n\r\n            });\r\n        }\r\n        else {\r\n            if (fieldName === \"nmultilingualmasterscode\") {\r\n                this.props.comboService({\r\n                    inputData: {\r\n                        userinfo: this.props.Login.userInfo,\r\n                        sdisplayname: selectedRecord.nmultilingualmasterscode.label,\r\n                        primarykey: selectedRecord.nmultilingualmasterscode.value,\r\n                        item: selectedRecord.nmultilingualmasterscode.item,\r\n                      displayname:this.props.Login.masterData\r\n                    },\r\n                    masterData: {\r\n                        ...this.props.Login.masterData,\r\n                        headername: {}\r\n                    },\r\n                    userinfo: this.props.Login.userInfo,\r\n                    displayname:this.props.Login.masterData,\r\n                    item: selectedRecord.nmultilingualmasterscode.item,\r\n                    sdisplayname: selectedRecord.nmultilingualmasterscode.label,\r\n\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    handleClose() {\r\n        let loadEsign = this.props.Login.loadEsign;\r\n        let openModal = this.props.Login.openModal;\r\n        let selectedRecord = this.props.Login.selectedRecord;\r\n        let selectedId = this.props.Login.selectedId;\r\n        if (this.state.showSynonym) {\r\n            this.setState({ showSynonym: false })\r\n            return null;\r\n        }\r\n        if (this.props.Login.loadEsign) {\r\n            loadEsign = false;\r\n            openModal = false;\r\n        }\r\n        else {\r\n            openModal = false;\r\n            selectedRecord = { ...this.props.Login.selectedRecord };\r\n            selectedId = null;\r\n        }\r\n\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { openModal, loadEsign, selectedRecord, selectedId }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    };\r\n\r\n    //to open side out\r\n    //to perform save action for both add and edit\r\n    onSaveClick = (saveType, formRef) => {\r\n        let inputData = {};\r\n        let selectedId = null;\r\n        let methodUrl = \"\";\r\n        inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n        let dataState = undefined;\r\n        if (this.state.showSynonym) {\r\n            this.setState({ showSynonym: false })\r\n            return null;\r\n        }\r\n        if (this.props.Login.operation === \"update\") {\r\n            // edit\r\n            if (this.props.Login.masterData.headername === \"Menu\") {\r\n                selectedId = this.props.Login.selectedId;\r\n                dataState = this.state.dataState\r\n                inputData[\"language\"] = {\r\n                    \"nmenucode\": this.state.selectedRecord.nmenucode,\r\n                    \"jsondata\": {\r\n                        \"sdisplayname\": this.state.selectedRecord.sdisplayname\r\n                    }\r\n                }\r\n                methodUrl = \"MenuLanguage\"\r\n            } else if (this.props.Login.masterData.headername === \"Module\") {\r\n                selectedId = this.props.Login.selectedId;\r\n                dataState = this.state.dataState\r\n                inputData[\"language\"] = {\r\n                    \"nmodulecode\": this.state.selectedRecord.nmodulecode,\r\n                    \"jsondata\": {\r\n                        \"sdisplayname\": this.state.selectedRecord.sdisplayname\r\n                    }\r\n                }\r\n                methodUrl = \"ModuleLanguage\"\r\n            } else if (this.props.Login.masterData.headername === \"Forms\") {\r\n                dataState = this.state.dataState\r\n                selectedId = this.props.Login.selectedId;\r\n                inputData[\"language\"] = {\r\n                    \"nformcode\": this.state.selectedRecord.nformcode,\r\n                    \"jsondata\": {\r\n                        \"sdisplayname\": this.state.selectedRecord.sdisplayname\r\n                    }\r\n                }\r\n                methodUrl = \"FormLanguage\"\r\n            } else if (this.props.Login.masterData.headername === \"Transaction Status\") {\r\n                dataState = this.state.dataState\r\n                selectedId = this.props.Login.selectedId;\r\n                inputData[\"language\"] = {\r\n                    \"ntranscode\": this.state.selectedRecord.ntranscode,\r\n                    \"jsondata\": {\r\n                        \"salertdisplaystatus\": this.state.selectedRecord.salertdisplaystatus,\r\n                        \"stransdisplaystatus\": this.state.selectedRecord.stransdisplaystatus,\r\n                        \"sactiondisplaystatus\": this.state.selectedRecord.sactiondisplaystatus\r\n                    }\r\n                }\r\n                methodUrl = \"TransactionStatusLanguage\"\r\n            } else if (this.props.Login.masterData.headername === \"Control Master\") {\r\n                dataState = this.state.dataState\r\n                selectedId = this.props.Login.selectedId;\r\n                inputData[\"language\"] = {\r\n                    \"ncontrolcode\": this.state.selectedRecord.ncontrolcode,\r\n                    \"jsondata\": {\r\n                        \"scontrolids\": this.state.selectedRecord.scontrolids\r\n                    }\r\n                }\r\n                methodUrl = \"ControlMasterLanguage\"\r\n            } else if (this.props.Login.masterData.headername === \"Approval Sub Type\") {\r\n                dataState = this.state.dataState\r\n                selectedId = this.props.Login.selectedId;\r\n                inputData[\"language\"] = {\r\n                    \"napprovalsubtypecode\": this.state.selectedRecord.napprovalsubtypecode,\r\n                    \"jsondata\": {\r\n                        \"approvalsubtypename\": this.state.selectedRecord.approvalsubtypename\r\n                    }\r\n                }\r\n                methodUrl = \"ApprovalSubTypeLanguage\"\r\n            } else if (this.props.Login.masterData.headername === \"Sample Type\") {\r\n                dataState = this.state.dataState\r\n                selectedId = this.props.Login.selectedId;\r\n                inputData[\"language\"] = {\r\n                    \"nsampletypecode\": this.state.selectedRecord.nsampletypecode,\r\n                    \"jsondata\": {\r\n                        \"sampletypename\": this.state.selectedRecord.sampletypename\r\n                    }\r\n                }\r\n                methodUrl = \"SampleTypeLanguage\"\r\n            } else if (this.props.Login.masterData.headername === \"Template Design\") {\r\n                dataState = this.state.dataState\r\n                selectedId = this.props.Login.selectedId;\r\n                inputData[\"language\"] = {\r\n                    \"ntemplatetypecode\": this.state.selectedRecord.ntemplatetypecode,\r\n                    \"jsondata\": {\r\n                        \"stemplatetypename\": this.state.selectedRecord.stemplatetypename\r\n                    }\r\n                }\r\n                methodUrl = \"TemplateTypeLanguage\"\r\n            } else if (this.props.Login.masterData.headername === \"Period\") {\r\n                dataState = this.state.dataState\r\n                selectedId = this.props.Login.selectedId;\r\n                inputData[\"language\"] = {\r\n                    \"nperiodcode\": this.state.selectedRecord.nperiodcode,\r\n                    \"jsondata\": {\r\n                        \"speriodname\": this.state.selectedRecord.speriodname\r\n                    }\r\n                }\r\n                methodUrl = \"PeriodLanguage\"\r\n            } else if (this.props.Login.masterData.headername === \"Gender\") {\r\n                dataState = this.state.dataState\r\n                selectedId = this.props.Login.selectedId;\r\n                inputData[\"language\"] = {\r\n                    \"ngendercode\": this.state.selectedRecord.ngendercode,\r\n                    \"jsondata\": {\r\n                        \"sgendername\": this.state.selectedRecord.sgendername\r\n                    }\r\n                }\r\n                methodUrl = \"GenderLanguage\"\r\n            } else if (this.props.Login.masterData.headername === \"Grade\") {\r\n                dataState = this.state.dataState\r\n                selectedId = this.props.Login.selectedId;\r\n                inputData[\"language\"] = {\r\n                    \"ngradecode\": this.state.selectedRecord.ngradecode,\r\n                    \"jsondata\": {\r\n                        \"sdisplayname\": this.state.selectedRecord.sdisplayname\r\n                    }\r\n                }\r\n                methodUrl = \"GradeLanguage\"\r\n            } else if (this.props.Login.masterData.headername === \"Scheduler Type\") {\r\n                dataState = this.state.dataState\r\n                selectedId = this.props.Login.selectedId;\r\n                inputData[\"language\"] = {\r\n                    \"nschedulertypecode\": this.state.selectedRecord.nschedulertypecode,\r\n                    \"jsondata\": {\r\n                        \"sschedulertypename\": this.state.selectedRecord.sschedulertypename\r\n                    }\r\n                }\r\n                methodUrl = \"SchedulerTypeLanguage\"\r\n            } else if (this.props.Login.masterData.headername === \"Query Builder Tables\") {\r\n                dataState = this.state.dataState\r\n                selectedId = this.props.Login.selectedId;\r\n                inputData[\"language\"] = {\r\n                    \"nquerybuildertablecode\": this.state.selectedRecord.nquerybuildertablecode,\r\n                    \"jsondata\": {\r\n                        \"tablename\": this.state.selectedRecord.tablename\r\n                    }\r\n                }\r\n                methodUrl = \"QueryBuilderTablesLanguage\"\r\n            } else if (this.props.Login.masterData.headername === \"Query Builder Views\") {\r\n                dataState = this.state.dataState\r\n                selectedId = this.props.Login.selectedId;\r\n                inputData[\"language\"] = {\r\n                    \"nquerybuilderviewscode\": this.state.selectedRecord.nquerybuilderviewscode,\r\n                    \"jsondata\": {\r\n                        \"displayname\": this.state.selectedRecord.displayname\r\n                    }\r\n                }\r\n                methodUrl = \"QueryBuilderViewsLanguage\"\r\n            } else if (this.props.Login.masterData.headername === \"Multilingual Masters\") {\r\n                dataState = this.state.dataState\r\n                selectedId = this.props.Login.selectedId;\r\n                inputData[\"language\"] = {\r\n                    \"nmultilingualmasterscode\": this.state.selectedRecord.nmultilingualmasterscode,\r\n                    \"jsondata\": {\r\n                        \"sdisplayname\": this.state.selectedRecord.sdisplayname\r\n                    }\r\n                }\r\n                methodUrl = \"MultilingualMastersLanguage\"\r\n            } else if (this.props.Login.masterData.headername === \"Query Builder Views Columns\") {\r\n                dataState = this.state.dataState\r\n                selectedId = this.props.Login.selectedId;\r\n                delete (this.state.selectedRecord.sdefaultname);\r\n                inputData[\"findIndex\"] = this.props.Login.selectedRecord.findIndex;\r\n                inputData[\"jsondata\"] = {\r\n                    \"sjsondata\":\r\n                        { ...this.state.selectedRecord.sjsondata },\r\n                    \"sviewname\": this.props.Login.selectedRecord.sviewname\r\n                }\r\n                methodUrl = \"QueryBuilderViewsColumnsLanguage\"\r\n            } else if (this.props.Login.masterData.headername === \"Material Type\") {\r\n                dataState = this.state.dataState\r\n                selectedId = this.props.Login.selectedId;\r\n                inputData[\"language\"] = {\r\n                    \"nmaterialtypecode\": this.state.selectedRecord.nmaterialtypecode,\r\n                    \"jsondata\": {\r\n                        \"smaterialtypename\": this.state.selectedRecord.smaterialtypename\r\n                    }\r\n                }\r\n                methodUrl = \"MaterialTypeLanguage\"\r\n            }\r\n            else if (this.props.Login.masterData.headername === \"Interface Type\") {\r\n                dataState = this.state.dataState\r\n                selectedId = this.props.Login.selectedId;\r\n                inputData[\"language\"] = {\r\n                    \"ninterfacetypecode\": this.state.selectedRecord.ninterfacetypecode,\r\n                    \"jsondata\": {\r\n                        \"sinterfacetypename\": this.state.selectedRecord.sinterfacetypename\r\n                    }\r\n                }\r\n                methodUrl = \"InterfaceTypeLanguage\"\r\n            } else if (this.props.Login.masterData.headername === \"Audit Action Filter\") {\r\n                dataState = this.state.dataState\r\n                selectedId = this.props.Login.selectedId;\r\n                inputData[\"language\"] = {\r\n                    \"nauditactionfiltercode\": this.state.selectedRecord.nauditactionfiltercode,\r\n                    \"jsondata\": {\r\n                        \"sdisplayname\": this.state.selectedRecord.sdisplayname\r\n                    }\r\n                }\r\n                methodUrl = \"AuditActionFilterLanguage\"\r\n            } else {\r\n\r\n            }\r\n        }\r\n        const inputParam = {\r\n            methodUrl: methodUrl,\r\n            classUrl: this.props.Login.inputParam.classUrl,\r\n            displayName: this.props.Login.inputParam.displayName,\r\n            inputData: inputData,\r\n            operation: this.props.Login.operation,\r\n            saveType, formRef, dataState, selectedId\r\n        }\r\n        const masterData = this.props.Login.masterData;\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolcode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData }, saveType,\r\n                    operation: this.props.Login.operation, openModal: true,\r\n                    screenName: this.props.Login.inputParam.displayName\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.crudMaster(inputParam, masterData, \"openModal\");\r\n        }\r\n    }\r\n\r\n}\r\nexport default connect(mapStateToProps, {\r\n    callService, crudMaster, showRegTypeAddScreen, fetchById, comboService,\r\n    updateStore, validateEsignCredential\r\n})(injectIntl(Languages));"]},"metadata":{},"sourceType":"module"}