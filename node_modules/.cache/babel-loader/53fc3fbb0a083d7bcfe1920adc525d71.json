{"ast":null,"code":"import _defineProperty from\"D:\\\\Postgres_workingFolder\\\\QuaLISWeb\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";import rsapi from'../rsapi';import{DEFAULT_RETURN}from'./LoginTypes';import{getComboLabelValue,constructOptionList}from'../components/CommonScript';import{toast}from'react-toastify';import Axios from'axios';import{initRequest}from'./LoginAction';//import { intl } from '../components/App';\n//export function getMethodComboService (screenName, primaryKeyName, primaryKeyValue, operation, inputParam , userInfo, ncontrolCode) {            \nexport function getMethodComboService(methodParam){return function(dispatch){var methodCategoryService=rsapi.post(\"methodcategory/getMethodCategory\",{userinfo:methodParam.userInfo});var urlArray=[];var selectedId=null;if(methodParam.operation===\"create\"){urlArray=[methodCategoryService];}else{var _rsapi$post;var url=methodParam.inputParam.classUrl+\"/getActive\"+methodParam.inputParam.methodUrl+\"ById\";//\"method/getActiveMethodById\"      \nvar methodById=rsapi.post(url,(_rsapi$post={},_defineProperty(_rsapi$post,methodParam.primaryKeyField,methodParam.primaryKeyValue),_defineProperty(_rsapi$post,\"userinfo\",methodParam.userInfo),_rsapi$post));urlArray=[methodCategoryService,methodById];selectedId=methodParam.primaryKeyValue;}dispatch(initRequest(true));Axios.all(urlArray).then(function(response){var selectedRecord={};var methodCatMap=constructOptionList(response[0].data||[],\"nmethodcatcode\",\"smethodcatname\",undefined,undefined,true);var methodCategoryList=methodCatMap.get(\"OptionList\");if(methodParam.operation===\"update\"){selectedRecord=response[1].data;selectedRecord[\"nmethodcatcode\"]=getComboLabelValue(selectedRecord,response[0].data,\"nmethodcatcode\",\"smethodcatname\");}dispatch({type:DEFAULT_RETURN,payload:{methodCategoryList:methodCategoryList,//:response[0].data || [],                               \noperation:methodParam.operation,screenName:methodParam.screenName,selectedRecord:selectedRecord,openModal:true,ncontrolCode:methodParam.ncontrolCode,loading:false,selectedId:selectedId}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}","map":{"version":3,"sources":["D:/Postgres_workingFolder/QuaLISWeb/src/actions/MethodAction.js"],"names":["rsapi","DEFAULT_RETURN","getComboLabelValue","constructOptionList","toast","Axios","initRequest","getMethodComboService","methodParam","dispatch","methodCategoryService","post","userinfo","userInfo","urlArray","selectedId","operation","url","inputParam","classUrl","methodUrl","methodById","primaryKeyField","primaryKeyValue","all","then","response","selectedRecord","methodCatMap","data","undefined","methodCategoryList","get","type","payload","screenName","openModal","ncontrolCode","loading","catch","error","status","message","warn"],"mappings":"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","sourcesContent":["import rsapi from '../rsapi';\r\nimport {DEFAULT_RETURN} from './LoginTypes';\r\nimport {getComboLabelValue, constructOptionList} from '../components/CommonScript'\r\nimport { toast } from 'react-toastify';\r\nimport Axios from 'axios';\r\nimport { initRequest } from './LoginAction';\r\n//import { intl } from '../components/App';\r\n\r\n//export function getMethodComboService (screenName, primaryKeyName, primaryKeyValue, operation, inputParam , userInfo, ncontrolCode) {            \r\nexport function getMethodComboService (methodParam) {            \r\n    return function (dispatch) {   \r\n    const methodCategoryService = rsapi.post(\"methodcategory/getMethodCategory\", \r\n                                    {userinfo:methodParam.userInfo});\r\n    let urlArray = [];\r\n    let selectedId = null;\r\n    if (methodParam.operation === \"create\"){\r\n        urlArray = [methodCategoryService];\r\n    }\r\n    else{           \r\n        const url = methodParam.inputParam.classUrl+ \"/getActive\" + methodParam.inputParam.methodUrl + \"ById\";   //\"method/getActiveMethodById\"      \r\n        const methodById =  rsapi.post(url, { [methodParam.primaryKeyField] :methodParam.primaryKeyValue, \"userinfo\": methodParam.userInfo} );\r\n        urlArray = [methodCategoryService, methodById];\r\n        selectedId = methodParam.primaryKeyValue;\r\n    }\r\n    dispatch(initRequest(true));\r\n    Axios.all(urlArray)\r\n        .then(response=>{                  \r\n            \r\n            let selectedRecord =  {};\r\n\r\n            const methodCatMap = constructOptionList(response[0].data || [], \"nmethodcatcode\",\r\n                                \"smethodcatname\", undefined, undefined, true);\r\n            const methodCategoryList = methodCatMap.get(\"OptionList\");\r\n            \r\n            if (methodParam.operation === \"update\"){\r\n                selectedRecord = response[1].data;\r\n                selectedRecord[\"nmethodcatcode\"] = getComboLabelValue(selectedRecord, response[0].data, \r\n                    \"nmethodcatcode\", \"smethodcatname\");                   \r\n            }\r\n           \r\n            dispatch({type: DEFAULT_RETURN, payload:{methodCategoryList,//:response[0].data || [],                               \r\n                        operation:methodParam.operation, screenName:methodParam.screenName, selectedRecord, \r\n                        openModal : true,\r\n                        ncontrolCode:methodParam.ncontrolCode,\r\n                        loading:false,selectedId\r\n                    }});\r\n        })\r\n        .catch(error=>{\r\n            dispatch({type: DEFAULT_RETURN, payload: {loading:false}})\r\n            if (error.response.status === 500){\r\n                toast.error(error.message);\r\n            } \r\n            else{               \r\n                toast.warn(error.response.data);\r\n            }  \r\n        })        \r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}