{"ast":null,"code":"import rsapi from '../rsapi';\nimport { DEFAULT_RETURN, REQUEST_FAILURE } from './LoginTypes';\nimport { initRequest } from './LoginAction';\nimport { sortData, constructOptionList } from '../components/CommonScript';\nimport { toast } from 'react-toastify';\nimport Axios from 'axios';\nimport { intl } from '../components/App';\nimport { transactionStatus } from '../components/Enumeration';\nexport function getSelectedSampleStorageLocation(inputParam, userInfo, masterData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"/samplestoragelocation/getSelectedSampleStorageLocation\", {\n      'userinfo': userInfo,\n      \"nsamplestoragelocationcode\": parseInt(inputParam.nsamplestoragelocationcode)\n    }).then(response => {\n      masterData = { ...masterData,\n        selectedSampleStorageLocation: response.data[\"selectedSampleStorageLocation\"],\n        sampleStorageVersion: response.data[\"sampleStorageVersion\"],\n        selectedSampleStorageVersion: response.data[\"selectedSampleStorageVersion\"]\n      };\n      sortData(masterData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getSelectedSampleStorageVersion(inputParam, userInfo, masterData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"/samplestoragelocation/getActiveSampleStorageVersion\", {\n      'userinfo': userInfo,\n      \"nsamplestorageversioncode\": parseInt(inputParam.nsamplestorageversioncode)\n    }).then(response => {\n      masterData = { ...masterData,\n        selectedSampleStorageVersion: response.data[\"selectedSampleStorageVersion\"]\n      }; // sortData(masterData);\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function editSampleStorageLocation(inputParam, userInfo, isOnlyDraft, editId) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    let selectedRecord = {};\n    let urlArray = [];\n    const getSampleStorageService = rsapi.post(\"/samplestoragelocation/getSampleStorageVersionByID\", {\n      'userinfo': userInfo,\n      \"nsamplestorageversioncode\": inputParam.nsamplestorageversioncode,\n      \"nsamplestoragelocationcode\": inputParam.nsamplestoragelocationcode\n    });\n    const geStorageCategory = rsapi.post(\"/storagecategory/getStorageCategory\", {\n      'userinfo': userInfo\n    });\n    const getprojecttype = rsapi.post(\"/projecttype/getProjectType\", {\n      'userinfo': userInfo\n    });\n    const getProduct = rsapi.post(\"/product/getProduct\", {\n      'userinfo': userInfo\n    });\n    const url1 = rsapi.post(\"samplestoragemapping/addSampleStorageMapping\", {\n      nsamplestoragelocationcode: 0,\n      userinfo: userInfo\n    });\n    const getUnit = rsapi.post(\"/unit/getUnit\", {\n      'userinfo': userInfo\n    });\n    urlArray = [getSampleStorageService, geStorageCategory, getprojecttype, getProduct, url1, getUnit];\n    Axios.all(urlArray).then(response => {\n      // masterData = {\n      //     ...masterData\n      // };\n      selectedRecord[\"ssamplestoragelocationname\"] = response[0].data[\"selectedSampleStorageVersion\"][\"ssamplestoragelocationname\"];\n      const storageCategoryMap = constructOptionList(response[1].data || [], \"nstoragecategorycode\", \"sstoragecategoryname\", undefined, undefined, true);\n      const storageCategoryList = storageCategoryMap.get(\"OptionList\");\n      storageCategoryList.map(item => item.value === response[0].data[\"selectedSampleStorageVersion\"][\"nstoragecategorycode\"] ? selectedRecord[\"nstoragecategorycode\"] = {\n        \"label\": item.label,\n        \"value\": item.value,\n        \"item\": item.item\n      } : \"\");\n      const projectTypeMap = constructOptionList(response[2].data || [], \"nprojecttypecode\", \"sprojecttypename\", undefined, undefined, true);\n      const projectTypeMapList = projectTypeMap.get(\"OptionList\");\n      projectTypeMapList.map(item => item.value === response[0].data[\"selectedSampleStorageVersion\"][\"nprojecttypecode\"] ? selectedRecord[\"nprojecttypecode\"] = {\n        \"label\": item.label,\n        \"value\": item.value,\n        \"item\": item.item\n      } : \"\");\n      const unitMap = constructOptionList(response[5].data || [], \"nunitcode\", \"sunitname\", undefined, undefined, true);\n      const unitMapList = unitMap.get(\"OptionList\");\n      unitMapList.map(item => item.value === response[0].data[\"selectedSampleStorageVersion\"][\"nunitcode\"] ? selectedRecord[\"nunitcode\"] = {\n        \"label\": item.label,\n        \"value\": item.value,\n        \"item\": item.item\n      } : \"\");\n      const sampleTypeMap = constructOptionList(response[3].data.Product || [], \"nproductcode\", \"sproductname\", undefined, undefined, true);\n      const sampleTypeList = sampleTypeMap.get(\"OptionList\");\n      sampleTypeList.map(item => item.value === response[0].data[\"selectedSampleStorageVersion\"][\"nproductcode\"] ? selectedRecord[\"nproductcode\"] = {\n        \"label\": item.label,\n        \"value\": item.value,\n        \"item\": item.item\n      } : \"\");\n      const containerTypeMap = constructOptionList(response[4].data['containerType'] || [], \"ncontainertypecode\", \"scontainertype\", undefined, undefined, true);\n      const containerTypeList = containerTypeMap.get(\"OptionList\");\n      containerTypeList.map(item => item.value === response[0].data[\"selectedSampleStorageVersion\"][\"ncontainertypecode\"] ? selectedRecord[\"ncontainertypecode\"] = {\n        \"label\": item.label,\n        \"value\": item.value,\n        \"item\": item.item\n      } : \"\");\n      const directionmasterMap = constructOptionList(response[4].data['directionmaster'] || [], \"ndirectionmastercode\", \"sdirection\", undefined, undefined, true);\n      const directionmasterList = directionmasterMap.get(\"OptionList\");\n      directionmasterList.map(item => item.value === response[0].data[\"selectedSampleStorageVersion\"][\"ndirectionmastercode\"] ? selectedRecord[\"ndirectionmastercode\"] = {\n        \"label\": item.label,\n        \"value\": item.value,\n        \"item\": item.item\n      } : \"\");\n      const containerstructureMap = constructOptionList(response[0].data['containerStructure'] || [], \"ncontainerstructurecode\", \"scontainerstructurename\", undefined, undefined, true);\n      const containerstructureList = containerstructureMap.get(\"OptionList\");\n      containerstructureList.map(item => item.value === response[0].data[\"selectedSampleStorageVersion\"][\"ncontainerstructurecode\"] ? selectedRecord[\"ncontainerstructurecode\"] = {\n        \"label\": item.label,\n        \"value\": item.value,\n        \"item\": item.item\n      } : \"\");\n      selectedRecord = { ...selectedRecord,\n        nneedposition: response[0].data[\"selectedSampleStorageVersion\"].nneedposition === 3 ? true : false,\n        nrow: response[0].data[\"selectedSampleStorageVersion\"].nrow,\n        ncolumn: response[0].data[\"selectedSampleStorageVersion\"].ncolumn,\n        nquantity: response[0].data[\"selectedSampleStorageVersion\"].nquantity,\n        nnoofcontainer: response[0].data[\"selectedSampleStorageVersion\"].nnoofcontainer,\n        nneedautomapping: response[0].data[\"selectedSampleStorageVersion\"].nneedautomapping === transactionStatus.YES ? true : false,\n        containerTypeOptions: containerTypeList,\n        containerStructureOptions: containerstructureList,\n        directionmasterOptions: directionmasterList\n      };\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          // masterData,\n          loading: false,\n          treeData: JSON.parse(response[0].data[\"selectedSampleStorageVersion\"][\"jsondata\"].value).data,\n          selectedRecord,\n          openModal: true,\n          operation: \"update\",\n          loadTreeProperties: false,\n          storageCategoryList,\n          sampleTypeList,\n          projectTypeMapList,\n          unitMapList,\n          isOnlyDraft,\n          ncontrolcode: editId\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function additionalInformationData(inputParam, userInfo, isOnlyDraft, addInfoId) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    let selectedRecord = {};\n    let urlArray = [];\n    const getSampleStorageService = rsapi.post(\"/samplestoragelocation/getSampleStorageVersionByID\", {\n      'userinfo': userInfo,\n      \"nsamplestorageversioncode\": inputParam.nsamplestorageversioncode,\n      \"nsamplestoragelocationcode\": inputParam.nsamplestoragelocationcode\n    });\n    const getprojecttype = rsapi.post(\"/samplestoragelocation/getProjectType\", {\n      'userinfo': userInfo\n    });\n    const getProduct = rsapi.post(\"/samplestoragelocation/getProduct\", {\n      'userinfo': userInfo\n    });\n    const url1 = rsapi.post(\"samplestoragemapping/addSampleStorageMapping\", {\n      nsamplestoragelocationcode: 0,\n      userinfo: userInfo\n    });\n    const getUnit = rsapi.post(\"/unit/getUnit\", {\n      'userinfo': userInfo\n    });\n    urlArray = [getSampleStorageService, getprojecttype, getProduct, url1, getUnit];\n    Axios.all(urlArray).then(response => {\n      const projectTypeMap = constructOptionList(response[1].data || [], \"nprojecttypecode\", \"sprojecttypename\", undefined, undefined, true);\n      const projectTypeMapList = projectTypeMap.get(\"OptionList\");\n      projectTypeMapList.map(item => item.value === response[0].data[\"selectedSampleStorageVersion\"][\"nprojecttypecode\"] ? selectedRecord[\"nprojecttypecode\"] = {\n        \"label\": item.label,\n        \"value\": item.value,\n        \"item\": item.item\n      } : \"\");\n      const sampleTypeMap = constructOptionList(response[2].data || [], \"nproductcode\", \"sproductname\", undefined, undefined, true);\n      const sampleTypeList = sampleTypeMap.get(\"OptionList\");\n      sampleTypeList.map(item => item.value === response[0].data[\"selectedSampleStorageVersion\"][\"nproductcode\"] ? selectedRecord[\"nproductcode\"] = {\n        \"label\": item.label,\n        \"value\": item.value,\n        \"item\": item.item\n      } : \"\");\n      const unitMap = constructOptionList(response[4].data || [], \"nunitcode\", \"sunitname\", undefined, undefined, true);\n      const unitMapList = unitMap.get(\"OptionList\");\n      unitMapList.map(item => item.value === response[0].data[\"selectedSampleStorageVersion\"][\"nunitcode\"] ? selectedRecord[\"nunitcode\"] = {\n        \"label\": item.label,\n        \"value\": item.value,\n        \"item\": item.item\n      } : \"\");\n      const containerTypeMap = constructOptionList(response[3].data['containerType'] || [], \"ncontainertypecode\", \"scontainertype\", undefined, undefined, true);\n      const containerTypeList = containerTypeMap.get(\"OptionList\");\n      containerTypeList.map(item => item.value === response[0].data[\"selectedSampleStorageVersion\"][\"ncontainertypecode\"] ? selectedRecord[\"ncontainertypecode\"] = {\n        \"label\": item.label,\n        \"value\": item.value,\n        \"item\": item.item\n      } : \"\");\n      const directionmasterMap = constructOptionList(response[3].data['directionmaster'] || [], \"ndirectionmastercode\", \"sdirection\", undefined, undefined, true);\n      const directionmasterList = directionmasterMap.get(\"OptionList\");\n      directionmasterList.map(item => item.value === response[0].data[\"selectedSampleStorageVersion\"][\"ndirectionmastercode\"] ? selectedRecord[\"ndirectionmastercode\"] = {\n        \"label\": item.label,\n        \"value\": item.value,\n        \"item\": item.item\n      } : \"\");\n      const containerstructureMap = constructOptionList(response[0].data['containerStructure'] || [], \"ncontainerstructurecode\", \"scontainerstructurename\", undefined, undefined, true);\n      const containerstructureList = containerstructureMap.get(\"OptionList\");\n      containerstructureList.map(item => item.value === response[0].data[\"selectedSampleStorageVersion\"][\"ncontainerstructurecode\"] ? selectedRecord[\"ncontainerstructurecode\"] = {\n        \"label\": item.label,\n        \"value\": item.value,\n        \"item\": item.item\n      } : \"\");\n      selectedRecord = { ...selectedRecord,\n        nneedposition: response[0].data[\"selectedSampleStorageVersion\"].nneedposition === 3 ? true : false,\n        nrow: response[0].data[\"selectedSampleStorageVersion\"].nrow,\n        ncolumn: response[0].data[\"selectedSampleStorageVersion\"].ncolumn,\n        nquantity: response[0].data[\"selectedSampleStorageVersion\"].nquantity,\n        nnoofcontainer: response[0].data[\"selectedSampleStorageVersion\"].nnoofcontainer,\n        nneedautomapping: response[0].data[\"selectedSampleStorageVersion\"].nneedautomapping === transactionStatus.YES ? true : false,\n        containerTypeOptions: containerTypeList,\n        containerStructureOptions: containerstructureList,\n        directionmasterOptions: directionmasterList\n      };\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          // masterData,\n          loading: false,\n          treeData: JSON.parse(response[0].data[\"selectedSampleStorageVersion\"][\"jsondata\"].value).data,\n          selectedRecord,\n          openModal: true,\n          operation: \"addinfo\",\n          loadTreeProperties: false,\n          sampleTypeList,\n          projectTypeMapList,\n          unitMapList,\n          isOnlyDraft,\n          ncontrolcode: addInfoId\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function approveSampleStorageLocation(userInfo, masterData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"/samplestoragelocation/ApproveSampleStorageLocation\", {\n      'userinfo': userInfo,\n      \"approvalStatus\": masterData.selectedSampleStorageVersion[\"napprovalstatus\"],\n      \"sampleStorageVersionCode\": masterData.selectedSampleStorageVersion[\"nsamplestorageversioncode\"],\n      \"sampleStorageLocationCode\": masterData.selectedSampleStorageVersion[\"nsamplestoragelocationcode\"]\n    }).then(response => {\n      masterData = { ...masterData,\n        sampleStorageVersion: response.data[\"sampleStorageVersion\"],\n        selectedSampleStorageVersion: response.data[\"selectedSampleStorageVersion\"]\n      }; // sortData(masterData);\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n} // export const openPropertyModal = (clickedItem, editId) => (dispatch) => {\n//     let selectedRecord = {};\n//     selectedRecord[\"locationlastnode\"] = clickedItem.item.locationlastnode === undefined ? false : clickedItem.item.locationlastnode;\n//     selectedRecord[\"containerfirstnode\"] = clickedItem.item.containerfirstnode === undefined ? false : clickedItem.item.containerfirstnode;\n//     selectedRecord[\"containerlastnode\"] = clickedItem.item.containerlastnode === undefined ? false : clickedItem.item.containerlastnode;\n//     dispatch({\n//         type: DEFAULT_RETURN,\n//         payload: { selectedRecord, loadTreeProperties: true, openModal: true, clickedItem, operation: \"update\", ncontrolcode: editId }\n//     });\n// };\n\nexport function openPropertyModal(inputParam, userInfo, clickedItem, editId) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"/samplestoragelocation/getSampleStorageVersionByID\", {\n      'userinfo': userInfo,\n      \"nsamplestorageversioncode\": inputParam.nsamplestorageversioncode,\n      \"nsamplestoragelocationcode\": inputParam.nsamplestoragelocationcode\n    }).then(response => {\n      // masterData = {\n      //     ...masterData, selectedSampleStorageVersion: response.data[\"selectedSampleStorageVersion\"]\n      // };\n      // sortData(masterData);\n      // dispatch({\n      //     type: DEFAULT_RETURN,\n      //     payload: {                       \n      //         loading: false\n      //     }\n      // });\n      let selectedRecord = {};\n      selectedRecord[\"locationlastnode\"] = clickedItem.item.locationlastnode === undefined ? false : clickedItem.item.locationlastnode;\n      selectedRecord[\"containerfirstnode\"] = clickedItem.item.containerfirstnode === undefined ? false : clickedItem.item.containerfirstnode;\n      selectedRecord[\"containerlastnode\"] = clickedItem.item.containerlastnode === undefined ? false : clickedItem.item.containerlastnode;\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          selectedRecord,\n          loadTreeProperties: true,\n          openModal: true,\n          clickedItem,\n          operation: \"update\",\n          ncontrolcode: editId,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function fetchStorageCategory(param) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    const storagecategoryService = rsapi.post(\"/storagecategory/getStorageCategory\", {\n      'userinfo': param.userInfo\n    });\n    const getprojecttype = rsapi.post(\"/projecttype/getProjectType\", {\n      'userinfo': param.userInfo\n    });\n    const getProduct = rsapi.post(\"/product/getProduct\", {\n      'userinfo': param.userInfo\n    });\n    const url1 = rsapi.post(\"samplestoragemapping/addSampleStorageMapping\", {\n      nsamplestoragelocationcode: 0,\n      userinfo: param.userInfo\n    });\n    let urlArray = [storagecategoryService, getprojecttype, getProduct, url1];\n    Axios.all(urlArray).then(response => {\n      const storageCategoryMap = constructOptionList(response[0].data || [], \"nstoragecategorycode\", \"sstoragecategoryname\", undefined, undefined, true);\n      const storageCategoryList = storageCategoryMap.get(\"OptionList\");\n      const projectTypeMap = constructOptionList(response[1].data || [], \"nprojecttypecode\", \"sprojecttypename\", undefined, undefined, true);\n      const projectTypeMapList = projectTypeMap.get(\"OptionList\");\n      const sampleTypeMap = constructOptionList(response[2].data.Product || [], \"nproductcode\", \"sproductname\", undefined, undefined, true);\n      const sampleTypeList = sampleTypeMap.get(\"OptionList\");\n      const containerTypeMap = constructOptionList(response[3].data['containerType'] || [], \"ncontainertypecode\", \"scontainertype\", undefined, undefined, true);\n      const containerTypeList = containerTypeMap.get(\"OptionList\");\n      let containerStructure = response[3].data['containerStructure'];\n      const directionmasterMap = constructOptionList(response[3].data['directionmaster'] || [], \"ndirectionmastercode\", \"sdirection\", undefined, undefined, true);\n      const directionmasterList = directionmasterMap.get(\"OptionList\");\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          storageCategoryList,\n          projectTypeMapList,\n          sampleTypeList,\n          openModal: true,\n          selectedRecord: {\n            containerTypeOptions: containerTypeList,\n            directionmasterOptions: directionmasterList,\n            nrow: containerStructure.length > 0 ? containerStructure[0].nrow : 1,\n            ncolumn: containerStructure.length > 0 ? containerStructure[0].ncolumn : 1,\n            nstoragecategorycode: param.nfilterStorageCategory\n          },\n          loadTreeProperties: false,\n          treeData: [{\n            text: intl.formatMessage({\n              id: \"IDS_ROOT\"\n            }),\n            expanded: true,\n            editable: true,\n            root: true,\n            id: param.id\n          }],\n          operation: \"create\",\n          loading: false,\n          isOnlyDraft: false,\n          ncontrolcode: param.addId\n        }\n      });\n    }) // rsapi.post(\"/storagecategory/getStorageCategory\",\n    //     { 'userinfo': param.userInfo })\n    //     .then(response => {\n    //         const storageCategoryMap = constructOptionList(response.data || [], \"nstoragecategorycode\",\n    //             \"sstoragecategoryname\", undefined, undefined, true);\n    //         const storageCategoryList = storageCategoryMap.get(\"OptionList\");\n    //         dispatch({\n    //             type: DEFAULT_RETURN,\n    //             payload: {\n    //                 storageCategoryList, openModal: true, selectedRecord: {nstoragecategorycode: param.nfilterStorageCategory}, loadTreeProperties: false,\n    //                 treeData: [\n    //                     {\n    //                         text: \"root\",\n    //                         expanded: true,\n    //                         editable: true,\n    //                         root: true,\n    //                         id: param.id,\n    //                     },\n    //                 ], operation: \"create\",\n    //                 loading: false,\n    //                 isOnlyDraft: false,\n    //                 ncontrolcode: param.addId\n    //             }\n    //         });\n    //     })\n    .catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport const changeStorageCategoryFilter = (inputParam, filterStorageCategory) => {\n  return dispatch => {\n    dispatch(initRequest(true));\n    rsapi.post(\"/samplestoragelocation/getSampleStorageLocationByCategory\", inputParam.inputData).then(response => {\n      const masterData = response.data; // sortData(masterData);\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false,\n          masterData: { ...masterData,\n            filterStorageCategory,\n            nfilterStorageCategory: inputParam.inputData.nfilterStorageCategory\n          }\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n      toast.error(error.message);\n    });\n  };\n};\nexport function copySampleStorageVersion(inputParam, userInfo, masterData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"/samplestoragelocation/copySampleStorageVersion\", {\n      'userinfo': userInfo,\n      \"sampleStorageVersionCode\": parseInt(inputParam.nsamplestorageversioncode),\n      \"sampleStorageLocationCode\": parseInt(inputParam.nsamplestoragelocationcode)\n    }).then(response => {\n      masterData = { ...masterData,\n        selectedSampleStorageLocation: response.data[\"selectedSampleStorageLocation\"],\n        sampleStorageVersion: response.data[\"sampleStorageVersion\"],\n        selectedSampleStorageVersion: response.data[\"selectedSampleStorageVersion\"]\n      };\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport const crudSampleStorageLocation = (inputParam, masterData) => {\n  return dispatch => {\n    dispatch(initRequest(true));\n    rsapi.post(\"/samplestoragelocation/\" + inputParam.operation + \"SampleStorageLocation\", { ...inputParam.inputData\n    }).then(response => {\n      // sortData(masterData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false,\n          masterData: { ...masterData,\n            sampleStorageLocation: response.data[\"sampleStorageLocation\"],\n            selectedSampleStorageLocation: response.data[\"selectedSampleStorageLocation\"],\n            sampleStorageVersion: response.data[\"sampleStorageVersion\"],\n            selectedSampleStorageVersion: response.data[\"selectedSampleStorageVersion\"],\n            filterStorageCategory: response.data[\"filterStorageCategory\"],\n            selectedStorageCategoryName: response.data[\"selectedStorageCategoryName\"]\n          },\n          openModal: false\n        }\n      });\n    }).catch(error => {\n      if (error.response.status === 500) {\n        dispatch({\n          type: REQUEST_FAILURE,\n          payload: {\n            error: error.message,\n            loading: false\n          }\n        });\n      } else {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            masterStatus: error.response.data,\n            errorCode: error.response.status,\n            loadEsign: false,\n            loading: false\n          }\n        });\n      } // toast.error(error.message);\n\n    });\n  };\n};","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/actions/SampleStorageLocationAction.js"],"names":["rsapi","DEFAULT_RETURN","REQUEST_FAILURE","initRequest","sortData","constructOptionList","toast","Axios","intl","transactionStatus","getSelectedSampleStorageLocation","inputParam","userInfo","masterData","dispatch","post","parseInt","nsamplestoragelocationcode","then","response","selectedSampleStorageLocation","data","sampleStorageVersion","selectedSampleStorageVersion","type","payload","loading","catch","error","status","message","warn","getSelectedSampleStorageVersion","nsamplestorageversioncode","editSampleStorageLocation","isOnlyDraft","editId","selectedRecord","urlArray","getSampleStorageService","geStorageCategory","getprojecttype","getProduct","url1","userinfo","getUnit","all","storageCategoryMap","undefined","storageCategoryList","get","map","item","value","label","projectTypeMap","projectTypeMapList","unitMap","unitMapList","sampleTypeMap","Product","sampleTypeList","containerTypeMap","containerTypeList","directionmasterMap","directionmasterList","containerstructureMap","containerstructureList","nneedposition","nrow","ncolumn","nquantity","nnoofcontainer","nneedautomapping","YES","containerTypeOptions","containerStructureOptions","directionmasterOptions","treeData","JSON","parse","openModal","operation","loadTreeProperties","ncontrolcode","additionalInformationData","addInfoId","approveSampleStorageLocation","openPropertyModal","clickedItem","locationlastnode","containerfirstnode","containerlastnode","fetchStorageCategory","param","storagecategoryService","containerStructure","length","nstoragecategorycode","nfilterStorageCategory","text","formatMessage","id","expanded","editable","root","addId","changeStorageCategoryFilter","filterStorageCategory","inputData","copySampleStorageVersion","crudSampleStorageLocation","sampleStorageLocation","selectedStorageCategoryName","masterStatus","errorCode","loadEsign"],"mappings":"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","sourcesContent":["import rsapi from '../rsapi';\r\nimport { DEFAULT_RETURN, REQUEST_FAILURE } from './LoginTypes';\r\nimport { initRequest } from './LoginAction';\r\nimport { sortData, constructOptionList } from '../components/CommonScript';\r\nimport { toast } from 'react-toastify';\r\nimport Axios from 'axios';\r\nimport { intl } from '../components/App';\r\nimport { transactionStatus } from '../components/Enumeration';\r\n\r\nexport function getSelectedSampleStorageLocation(inputParam, userInfo, masterData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/samplestoragelocation/getSelectedSampleStorageLocation\",\r\n            { 'userinfo': userInfo, \"nsamplestoragelocationcode\": parseInt(inputParam.nsamplestoragelocationcode) })\r\n            .then(response => {\r\n\r\n                masterData = {\r\n                    ...masterData, selectedSampleStorageLocation: response.data[\"selectedSampleStorageLocation\"],\r\n                    sampleStorageVersion: response.data[\"sampleStorageVersion\"],\r\n                    selectedSampleStorageVersion: response.data[\"selectedSampleStorageVersion\"]\r\n                };\r\n                sortData(masterData);\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData,\r\n                        loading: false\r\n\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            });\r\n    }\r\n}\r\nexport function getSelectedSampleStorageVersion(inputParam, userInfo, masterData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/samplestoragelocation/getActiveSampleStorageVersion\",\r\n            { 'userinfo': userInfo, \"nsamplestorageversioncode\": parseInt(inputParam.nsamplestorageversioncode) })\r\n            .then(response => {\r\n\r\n                masterData = {\r\n                    ...masterData, selectedSampleStorageVersion: response.data[\"selectedSampleStorageVersion\"]\r\n                };\r\n                // sortData(masterData);\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData,\r\n                        loading: false\r\n\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            });\r\n    }\r\n}\r\nexport function editSampleStorageLocation(inputParam, userInfo, isOnlyDraft, editId) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        let selectedRecord = {};\r\n        let urlArray = [];\r\n        const getSampleStorageService = rsapi.post(\"/samplestoragelocation/getSampleStorageVersionByID\",\r\n            { 'userinfo': userInfo, \"nsamplestorageversioncode\": inputParam.nsamplestorageversioncode, \"nsamplestoragelocationcode\": inputParam.nsamplestoragelocationcode });\r\n\r\n        const geStorageCategory = rsapi.post(\"/storagecategory/getStorageCategory\",\r\n            { 'userinfo': userInfo });\r\n        const getprojecttype = rsapi.post(\"/projecttype/getProjectType\",\r\n              { 'userinfo': userInfo });\r\n\r\n        const getProduct = rsapi.post(\"/product/getProduct\",\r\n              { 'userinfo': userInfo });\r\n\r\n        const url1 = rsapi.post(\"samplestoragemapping/addSampleStorageMapping\", {\r\n            nsamplestoragelocationcode: 0,\r\n            userinfo: userInfo\r\n        });\r\n        const getUnit = rsapi.post(\"/unit/getUnit\",\r\n              { 'userinfo': userInfo });\r\n              \r\n\r\n        urlArray = [getSampleStorageService, geStorageCategory,getprojecttype,getProduct,url1,getUnit];\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n\r\n                // masterData = {\r\n                //     ...masterData\r\n                // };\r\n\r\n                selectedRecord[\"ssamplestoragelocationname\"] = response[0].data[\"selectedSampleStorageVersion\"][\"ssamplestoragelocationname\"]\r\n                const storageCategoryMap = constructOptionList(response[1].data || [], \"nstoragecategorycode\",\r\n                    \"sstoragecategoryname\", undefined, undefined, true);\r\n\r\n                const storageCategoryList = storageCategoryMap.get(\"OptionList\");\r\n\r\n                storageCategoryList.map(item => item.value === response[0].data[\"selectedSampleStorageVersion\"][\"nstoragecategorycode\"] ?\r\n                    selectedRecord[\"nstoragecategorycode\"] = {\r\n                        \"label\": item.label,\r\n                        \"value\": item.value,\r\n                        \"item\": item.item\r\n                    }\r\n                    : \"\");\r\n\r\n                    const projectTypeMap = constructOptionList(response[2].data || [], \"nprojecttypecode\",\r\n                    \"sprojecttypename\", undefined, undefined, true);\r\n\r\n                const projectTypeMapList = projectTypeMap.get(\"OptionList\");\r\n\r\n                projectTypeMapList.map(item => item.value === response[0].data[\"selectedSampleStorageVersion\"][\"nprojecttypecode\"] ?\r\n                selectedRecord[\"nprojecttypecode\"] = {\r\n                    \"label\": item.label,\r\n                    \"value\": item.value,\r\n                    \"item\": item.item\r\n                }\r\n                : \"\");\r\n\r\n                const unitMap = constructOptionList(response[5].data || [], \"nunitcode\",\r\n                \"sunitname\", undefined, undefined, true);\r\n\r\n            const unitMapList = unitMap.get(\"OptionList\");\r\n            unitMapList.map(item => item.value === response[0].data[\"selectedSampleStorageVersion\"][\"nunitcode\"] ?\r\n            selectedRecord[\"nunitcode\"] = {\r\n                \"label\": item.label,\r\n                \"value\": item.value,\r\n                \"item\": item.item\r\n            }\r\n            : \"\");\r\n\r\n                const sampleTypeMap = constructOptionList(response[3].data.Product  || [], \"nproductcode\",\r\n                \"sproductname\", undefined, undefined, true);\r\n\r\n                const sampleTypeList = sampleTypeMap.get(\"OptionList\");\r\n\r\n                sampleTypeList.map(item => item.value === response[0].data[\"selectedSampleStorageVersion\"][\"nproductcode\"] ?\r\n                selectedRecord[\"nproductcode\"] = {\r\n                    \"label\": item.label,\r\n                    \"value\": item.value,\r\n                    \"item\": item.item\r\n                }\r\n                : \"\");\r\n\r\n                const containerTypeMap = constructOptionList(response[4].data['containerType'] || [],\r\n                \"ncontainertypecode\",\r\n                \"scontainertype\", undefined, undefined, true);\r\n            const containerTypeList = containerTypeMap.get(\"OptionList\");\r\n            containerTypeList.map(item => item.value === response[0].data[\"selectedSampleStorageVersion\"][\"ncontainertypecode\"] ?\r\n            selectedRecord[\"ncontainertypecode\"] = {\r\n                \"label\": item.label,\r\n                \"value\": item.value,\r\n                \"item\": item.item\r\n            }\r\n            : \"\"); \r\n            const directionmasterMap = constructOptionList(response[4].data['directionmaster'] || [],\r\n                \"ndirectionmastercode\",\r\n                \"sdirection\", undefined, undefined, true);\r\n            const directionmasterList = directionmasterMap.get(\"OptionList\");\r\n\r\n            directionmasterList.map(item => item.value === response[0].data[\"selectedSampleStorageVersion\"][\"ndirectionmastercode\"] ?\r\n            selectedRecord[\"ndirectionmastercode\"] = {\r\n                \"label\": item.label,\r\n                \"value\": item.value,\r\n                \"item\": item.item\r\n            }\r\n            : \"\");\r\n\r\n            const containerstructureMap = constructOptionList(response[0].data['containerStructure']\r\n                || [],\r\n                \"ncontainerstructurecode\",\r\n                \"scontainerstructurename\", undefined, undefined, true);\r\n            const containerstructureList = containerstructureMap.get(\"OptionList\");\r\n\r\n            containerstructureList.map(item => item.value === response[0].data[\"selectedSampleStorageVersion\"][\"ncontainerstructurecode\"] ?\r\n            selectedRecord[\"ncontainerstructurecode\"] = {\r\n                \"label\": item.label,\r\n                \"value\": item.value,\r\n                \"item\": item.item\r\n            }\r\n            : \"\");\r\n\r\n            selectedRecord = { ...selectedRecord, \r\n                nneedposition: response[0].data[\"selectedSampleStorageVersion\"].nneedposition === 3 ? true : false, \r\n                nrow: response[0].data[\"selectedSampleStorageVersion\"].nrow,\r\n                ncolumn: response[0].data[\"selectedSampleStorageVersion\"].ncolumn ,\r\n                nquantity:  response[0].data[\"selectedSampleStorageVersion\"].nquantity,\r\n                nnoofcontainer: response[0].data[\"selectedSampleStorageVersion\"].nnoofcontainer,\r\n                nneedautomapping:  response[0].data[\"selectedSampleStorageVersion\"].nneedautomapping===transactionStatus.YES?\r\n                true:false,\r\n                containerTypeOptions: containerTypeList,\r\n                containerStructureOptions: containerstructureList,\r\n                directionmasterOptions: directionmasterList\r\n            }\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        // masterData,\r\n                        loading: false,\r\n                        treeData: JSON.parse(response[0].data[\"selectedSampleStorageVersion\"][\"jsondata\"].value).data,\r\n                        selectedRecord, openModal: true, operation: \"update\", loadTreeProperties: false, storageCategoryList,\r\n                        sampleTypeList,projectTypeMapList,\r\n                        unitMapList,\r\n                        isOnlyDraft, ncontrolcode: editId\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            });\r\n    }\r\n}\r\n\r\nexport function additionalInformationData(inputParam, userInfo, isOnlyDraft, addInfoId) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        let selectedRecord = {};\r\n        let urlArray = [];\r\n        const getSampleStorageService = rsapi.post(\"/samplestoragelocation/getSampleStorageVersionByID\",\r\n            { 'userinfo': userInfo, \"nsamplestorageversioncode\": inputParam.nsamplestorageversioncode, \"nsamplestoragelocationcode\": inputParam.nsamplestoragelocationcode });\r\n\r\n    \r\n        const getprojecttype = rsapi.post(\"/samplestoragelocation/getProjectType\",\r\n              { 'userinfo': userInfo });\r\n\r\n        const getProduct = rsapi.post(\"/samplestoragelocation/getProduct\",\r\n              { 'userinfo': userInfo });\r\n\r\n        const url1 = rsapi.post(\"samplestoragemapping/addSampleStorageMapping\", {\r\n            nsamplestoragelocationcode: 0,\r\n            userinfo: userInfo\r\n        });\r\n\r\n        const getUnit = rsapi.post(\"/unit/getUnit\",\r\n              { 'userinfo': userInfo });\r\n              \r\n\r\n        urlArray = [getSampleStorageService,getprojecttype,getProduct,url1,getUnit];\r\n        Axios.all(urlArray)\r\n            .then(response => {       \r\n\r\n                const projectTypeMap = constructOptionList(response[1].data || [], \"nprojecttypecode\",\"sprojecttypename\", undefined, undefined, true);\r\n\r\n                const projectTypeMapList = projectTypeMap.get(\"OptionList\");\r\n\r\n                projectTypeMapList.map(item => item.value === response[0].data[\"selectedSampleStorageVersion\"][\"nprojecttypecode\"] ?\r\n                selectedRecord[\"nprojecttypecode\"] = {\r\n                    \"label\": item.label,\r\n                    \"value\": item.value,\r\n                    \"item\": item.item\r\n                }\r\n                : \"\");\r\n\r\n\r\n                const sampleTypeMap = constructOptionList(response[2].data  || [], \"nproductcode\",\"sproductname\", undefined, undefined, true);\r\n\r\n                const sampleTypeList = sampleTypeMap.get(\"OptionList\");\r\n\r\n                sampleTypeList.map(item => item.value === response[0].data[\"selectedSampleStorageVersion\"][\"nproductcode\"] ?\r\n                selectedRecord[\"nproductcode\"] = {\r\n                    \"label\": item.label,\r\n                    \"value\": item.value,\r\n                    \"item\": item.item\r\n                }\r\n                : \"\");\r\n\r\n                const unitMap = constructOptionList(response[4].data || [], \"nunitcode\",\r\n                \"sunitname\", undefined, undefined, true);\r\n\r\n            const unitMapList = unitMap.get(\"OptionList\");\r\n            unitMapList.map(item => item.value === response[0].data[\"selectedSampleStorageVersion\"][\"nunitcode\"] ?\r\n            selectedRecord[\"nunitcode\"] = {\r\n                \"label\": item.label,\r\n                \"value\": item.value,\r\n                \"item\": item.item\r\n            }\r\n            : \"\");\r\n\r\n            const containerTypeMap = constructOptionList(response[3].data['containerType'] || [],\"ncontainertypecode\",\"scontainertype\", undefined, undefined, true);\r\n            const containerTypeList = containerTypeMap.get(\"OptionList\");\r\n            containerTypeList.map(item => item.value === response[0].data[\"selectedSampleStorageVersion\"][\"ncontainertypecode\"] ?\r\n            selectedRecord[\"ncontainertypecode\"] = {\r\n                \"label\": item.label,\r\n                \"value\": item.value,\r\n                \"item\": item.item\r\n            }\r\n            : \"\"); \r\n            const directionmasterMap = constructOptionList(response[3].data['directionmaster'] || [],\r\n                \"ndirectionmastercode\",\r\n                \"sdirection\", undefined, undefined, true);\r\n            const directionmasterList = directionmasterMap.get(\"OptionList\");\r\n\r\n            directionmasterList.map(item => item.value === response[0].data[\"selectedSampleStorageVersion\"][\"ndirectionmastercode\"] ?\r\n            selectedRecord[\"ndirectionmastercode\"] = {\r\n                \"label\": item.label,\r\n                \"value\": item.value,\r\n                \"item\": item.item\r\n            }\r\n            : \"\");\r\n\r\n            const containerstructureMap = constructOptionList(response[0].data['containerStructure']\r\n                || [],\r\n                \"ncontainerstructurecode\",\r\n                \"scontainerstructurename\", undefined, undefined, true);\r\n            const containerstructureList = containerstructureMap.get(\"OptionList\");\r\n\r\n            containerstructureList.map(item => item.value === response[0].data[\"selectedSampleStorageVersion\"][\"ncontainerstructurecode\"] ?\r\n            selectedRecord[\"ncontainerstructurecode\"] = {\r\n                \"label\": item.label,\r\n                \"value\": item.value,\r\n                \"item\": item.item\r\n            }\r\n            : \"\");\r\n\r\n            selectedRecord = { ...selectedRecord, \r\n                nneedposition: response[0].data[\"selectedSampleStorageVersion\"].nneedposition === 3 ? true : false, \r\n                nrow: response[0].data[\"selectedSampleStorageVersion\"].nrow,\r\n                ncolumn: response[0].data[\"selectedSampleStorageVersion\"].ncolumn ,\r\n                nquantity:  response[0].data[\"selectedSampleStorageVersion\"].nquantity,\r\n                nnoofcontainer: response[0].data[\"selectedSampleStorageVersion\"].nnoofcontainer,\r\n                nneedautomapping:  response[0].data[\"selectedSampleStorageVersion\"].nneedautomapping===transactionStatus.YES?\r\n                true:false,\r\n                containerTypeOptions: containerTypeList,\r\n                containerStructureOptions: containerstructureList,\r\n                directionmasterOptions: directionmasterList\r\n            }\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        // masterData,\r\n                        loading: false,\r\n                        treeData: JSON.parse(response[0].data[\"selectedSampleStorageVersion\"][\"jsondata\"].value).data,\r\n                        selectedRecord, openModal: true, operation: \"addinfo\", loadTreeProperties: false,\r\n                        sampleTypeList,projectTypeMapList,unitMapList,\r\n\r\n                        isOnlyDraft, ncontrolcode: addInfoId\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            });\r\n    }\r\n}\r\n\r\nexport function approveSampleStorageLocation(userInfo, masterData) {\r\n    return function (dispatch) {\r\n\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/samplestoragelocation/ApproveSampleStorageLocation\",\r\n            {\r\n                'userinfo': userInfo, \"approvalStatus\": masterData.selectedSampleStorageVersion[\"napprovalstatus\"], \"sampleStorageVersionCode\": masterData.selectedSampleStorageVersion[\"nsamplestorageversioncode\"],\r\n                \"sampleStorageLocationCode\": masterData.selectedSampleStorageVersion[\"nsamplestoragelocationcode\"]\r\n            })\r\n            .then(response => {\r\n\r\n                masterData = {\r\n                    ...masterData, sampleStorageVersion: response.data[\"sampleStorageVersion\"], selectedSampleStorageVersion: response.data[\"selectedSampleStorageVersion\"]\r\n                };\r\n                // sortData(masterData);\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData,\r\n                        loading: false\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            });\r\n    }\r\n}\r\n\r\n// export const openPropertyModal = (clickedItem, editId) => (dispatch) => {\r\n//     let selectedRecord = {};\r\n//     selectedRecord[\"locationlastnode\"] = clickedItem.item.locationlastnode === undefined ? false : clickedItem.item.locationlastnode;\r\n//     selectedRecord[\"containerfirstnode\"] = clickedItem.item.containerfirstnode === undefined ? false : clickedItem.item.containerfirstnode;\r\n//     selectedRecord[\"containerlastnode\"] = clickedItem.item.containerlastnode === undefined ? false : clickedItem.item.containerlastnode;\r\n\r\n\r\n//     dispatch({\r\n//         type: DEFAULT_RETURN,\r\n//         payload: { selectedRecord, loadTreeProperties: true, openModal: true, clickedItem, operation: \"update\", ncontrolcode: editId }\r\n//     });\r\n// };\r\n\r\nexport function openPropertyModal(inputParam, userInfo, clickedItem, editId) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/samplestoragelocation/getSampleStorageVersionByID\",\r\n            { 'userinfo': userInfo, \"nsamplestorageversioncode\": inputParam.nsamplestorageversioncode, \"nsamplestoragelocationcode\": inputParam.nsamplestoragelocationcode })\r\n            .then(response => {\r\n\r\n                // masterData = {\r\n                //     ...masterData, selectedSampleStorageVersion: response.data[\"selectedSampleStorageVersion\"]\r\n                // };\r\n                // sortData(masterData);\r\n\r\n                // dispatch({\r\n                //     type: DEFAULT_RETURN,\r\n                //     payload: {                       \r\n                //         loading: false\r\n\r\n                //     }\r\n                // });\r\n\r\n                let selectedRecord = {};\r\n                selectedRecord[\"locationlastnode\"] = clickedItem.item.locationlastnode === undefined ? false : clickedItem.item.locationlastnode;\r\n                selectedRecord[\"containerfirstnode\"] = clickedItem.item.containerfirstnode === undefined ? false : clickedItem.item.containerfirstnode;\r\n                selectedRecord[\"containerlastnode\"] = clickedItem.item.containerlastnode === undefined ? false : clickedItem.item.containerlastnode;\r\n\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: { selectedRecord, loadTreeProperties: true, openModal: true, clickedItem, operation: \"update\", ncontrolcode: editId, loading: false }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            });\r\n    }\r\n}\r\n\r\nexport function fetchStorageCategory(param) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        \r\n            const storagecategoryService = rsapi.post(\"/storagecategory/getStorageCategory\",\r\n             { 'userinfo': param.userInfo });\r\n\r\n            const getprojecttype = rsapi.post(\"/projecttype/getProjectType\",\r\n              { 'userinfo': param.userInfo });\r\n\r\n              const getProduct = rsapi.post(\"/product/getProduct\",\r\n              { 'userinfo': param.userInfo });\r\n\r\n            \r\n              const url1 = rsapi.post(\"samplestoragemapping/addSampleStorageMapping\", { \r\n                nsamplestoragelocationcode:0, \r\n                userinfo:  param.userInfo \r\n            });\r\n\r\n           let urlArray = [storagecategoryService, getprojecttype,getProduct,url1];\r\n            Axios.all(urlArray)\r\n\r\n            .then(response => {\r\n                const storageCategoryMap = constructOptionList(response[0].data || [], \"nstoragecategorycode\",\r\n                    \"sstoragecategoryname\", undefined, undefined, true);\r\n\r\n                const storageCategoryList = storageCategoryMap.get(\"OptionList\");\r\n\r\n                const projectTypeMap = constructOptionList(response[1].data || [], \"nprojecttypecode\",\r\n                    \"sprojecttypename\", undefined, undefined, true);\r\n\r\n                const projectTypeMapList = projectTypeMap.get(\"OptionList\");\r\n\r\n                const sampleTypeMap = constructOptionList(response[2].data.Product || [], \"nproductcode\",\r\n                \"sproductname\", undefined, undefined, true);\r\n\r\n                const sampleTypeList = sampleTypeMap.get(\"OptionList\");\r\n            \r\n\r\n                const containerTypeMap = constructOptionList(response[3].data['containerType'] || [],\r\n                    \"ncontainertypecode\",\r\n                    \"scontainertype\", undefined, undefined, true);\r\n                const containerTypeList = containerTypeMap.get(\"OptionList\");\r\n\r\n                let containerStructure = response[3].data['containerStructure'];\r\n                const directionmasterMap = constructOptionList(response[3].data['directionmaster'] || [],\r\n                    \"ndirectionmastercode\",\r\n                    \"sdirection\", undefined, undefined, true);\r\n                const directionmasterList = directionmasterMap.get(\"OptionList\");\r\n           \r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        storageCategoryList,projectTypeMapList, sampleTypeList,openModal: true,\r\n                         selectedRecord: {    \r\n                            containerTypeOptions: containerTypeList,\r\n                            directionmasterOptions: directionmasterList, \r\n                            nrow: containerStructure.length > 0 ? containerStructure[0].nrow : 1,\r\n                            ncolumn: containerStructure.length > 0 ? containerStructure[0].ncolumn : 1,  \r\n                            nstoragecategorycode: param.nfilterStorageCategory }\r\n                            , loadTreeProperties: false,\r\n                        treeData: [\r\n                            {\r\n                                text: intl.formatMessage({ id: \"IDS_ROOT\" }),\r\n                                expanded: true,\r\n                                editable: true,\r\n                                root: true,\r\n                                id: param.id,\r\n                            },\r\n                        ], operation: \"create\",\r\n                        loading: false,\r\n                        isOnlyDraft: false,\r\n                        ncontrolcode: param.addId\r\n                    }\r\n                });\r\n            })\r\n            // rsapi.post(\"/storagecategory/getStorageCategory\",\r\n            //     { 'userinfo': param.userInfo })\r\n            //     .then(response => {\r\n\r\n            //         const storageCategoryMap = constructOptionList(response.data || [], \"nstoragecategorycode\",\r\n            //             \"sstoragecategoryname\", undefined, undefined, true);\r\n\r\n            //         const storageCategoryList = storageCategoryMap.get(\"OptionList\");\r\n\r\n\r\n            //         dispatch({\r\n            //             type: DEFAULT_RETURN,\r\n            //             payload: {\r\n            //                 storageCategoryList, openModal: true, selectedRecord: {nstoragecategorycode: param.nfilterStorageCategory}, loadTreeProperties: false,\r\n            //                 treeData: [\r\n            //                     {\r\n            //                         text: \"root\",\r\n            //                         expanded: true,\r\n            //                         editable: true,\r\n            //                         root: true,\r\n            //                         id: param.id,\r\n            //                     },\r\n            //                 ], operation: \"create\",\r\n            //                 loading: false,\r\n            //                 isOnlyDraft: false,\r\n            //                 ncontrolcode: param.addId\r\n            //             }\r\n            //         });\r\n            //     })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            });\r\n    }\r\n}\r\n\r\nexport const changeStorageCategoryFilter = (inputParam, filterStorageCategory) => {\r\n    return (dispatch) => {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/samplestoragelocation/getSampleStorageLocationByCategory\", inputParam.inputData)\r\n            .then(response => {\r\n                const masterData = response.data\r\n                // sortData(masterData);\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false,\r\n                        masterData: {\r\n                            ...masterData,\r\n                            filterStorageCategory,\r\n                            nfilterStorageCategory: inputParam.inputData.nfilterStorageCategory,\r\n\r\n                        }\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                });\r\n                toast.error(error.message);\r\n            });\r\n    }\r\n}\r\n\r\nexport function copySampleStorageVersion(inputParam, userInfo, masterData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/samplestoragelocation/copySampleStorageVersion\",\r\n            {\r\n                'userinfo': userInfo, \"sampleStorageVersionCode\": parseInt(inputParam.nsamplestorageversioncode),\r\n                \"sampleStorageLocationCode\": parseInt(inputParam.nsamplestoragelocationcode)\r\n            })\r\n            .then(response => {\r\n\r\n                masterData = {\r\n                    ...masterData, selectedSampleStorageLocation: response.data[\"selectedSampleStorageLocation\"],\r\n                    sampleStorageVersion: response.data[\"sampleStorageVersion\"],\r\n                    selectedSampleStorageVersion: response.data[\"selectedSampleStorageVersion\"]\r\n                };\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData,\r\n                        loading: false\r\n\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            });\r\n    }\r\n}\r\n\r\nexport const crudSampleStorageLocation = (inputParam, masterData) => {\r\n    return (dispatch) => {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/samplestoragelocation/\" + inputParam.operation + \"SampleStorageLocation\", { ...inputParam.inputData })\r\n            .then(response => {\r\n                // sortData(masterData);\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false,\r\n                        masterData: {\r\n                            ...masterData, sampleStorageLocation: response.data[\"sampleStorageLocation\"], selectedSampleStorageLocation: response.data[\"selectedSampleStorageLocation\"],\r\n                            sampleStorageVersion: response.data[\"sampleStorageVersion\"], selectedSampleStorageVersion: response.data[\"selectedSampleStorageVersion\"],\r\n                            filterStorageCategory: response.data[\"filterStorageCategory\"], selectedStorageCategoryName: response.data[\"selectedStorageCategoryName\"]\r\n\r\n                        },\r\n                        openModal: false\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                if (error.response.status === 500) {\r\n                    dispatch({\r\n                        type: REQUEST_FAILURE,\r\n                        payload: {\r\n                            error: error.message,\r\n                            loading: false\r\n                        }\r\n                    });\r\n                } else {\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            masterStatus: error.response.data,\r\n                            errorCode: error.response.status,\r\n                            loadEsign: false,\r\n                            loading: false\r\n                        }\r\n                    });\r\n                }\r\n\r\n                // toast.error(error.message);\r\n            });\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}