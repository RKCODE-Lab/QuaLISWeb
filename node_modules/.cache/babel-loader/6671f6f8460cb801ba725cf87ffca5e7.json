{"ast":null,"code":"import rsapi from '../rsapi';\nimport { DEFAULT_RETURN } from './LoginTypes';\nimport { toast } from 'react-toastify';\nimport { initRequest } from './LoginAction';\nimport { intl } from '../components/App';\nimport Axios from 'axios';\nimport { numericGrade } from '../pages/ResultEntryBySample/ResultEntryValidation';\nimport { constructOptionList, fillRecordBasedOnCheckBoxSelection, filterRecordBasedOnTwoArrays, getRecordBasedOnPrimaryKeyName, getSameRecordFromTwoArrays, replaceUpdatedObject, sortData, updatedObjectWithNewElement, rearrangeDateFormat } from '../components/CommonScript';\nimport { transactionStatus } from '../components/Enumeration';\nexport function getsubSampleREDetail(inputData, isServiceRequired) {\n  return function (dispatch) {\n    let inputParamData = {\n      ntype: 2,\n      nflag: inputData.nflag || 2,\n      nsampletypecode: inputData.nsampletypecode,\n      nregtypecode: inputData.nregtypecode,\n      nregsubtypecode: inputData.nregsubtypecode,\n      npreregno: inputData.npreregno,\n      ntranscode: String(inputData.ntransactionstatus),\n      ntransactiontestcode: 0,\n      userinfo: inputData.userinfo,\n      ntestcode: inputData.ntestcode,\n      napprovalversioncode: inputData.napprovalversioncode,\n      fromdate: inputData.fromdate,\n      todate: inputData.todate,\n      activeTestKey: inputData.activeTestKey,\n      activeSampleKey: inputData.activeSampleKey,\n      nneedsubsample: inputData.masterData.nneedsubsample\n    };\n    let activeName = \"\";\n    let dataStateName = \"\"; // let { resultDataState, materialDataState, instrumentDataState, taskDataState, resultChangeDataState,\n    //     documentDataState, testCommentDataState } = inputData\n\n    dispatch(initRequest(true));\n\n    if (isServiceRequired) {\n      rsapi.post(\"resultentrybysample/getResultEntryDetails\", { ...inputParamData,\n        checkBoxOperation: inputData.checkBoxOperation\n      }).then(response => {\n        // if (response.data.DynamicGetSamples) {\n        //     sortData(response.data.DynamicGetSamples, \"\", \"\");\n        // }\n        // if (response.data.DynamicGetTests) {\n        //     sortData(response.data.DynamicGetTests, \"descending\", \"npreregno\");\n        // }\n        //sortData(response.data);\n        let oldSelectedTest = inputData.masterData.RESelectedTest;\n        fillRecordBasedOnCheckBoxSelection(inputData.masterData, response.data, inputData.childTabsKey, inputData.checkBoxOperation, \"npreregno\", inputData.removeElementFromArray);\n        let RESelectedSubSample = inputData.checkBoxOperation === 3 ? response.data.RESelectedSubSample : inputData.masterData.RESelectedSubSample;\n        RESelectedSubSample = inputData.masterData.nneedsubsample ? RESelectedSubSample : inputData.masterData.RE_SUBSAMPLE;\n        let masterData = { ...inputData.masterData,\n          // ...response.data,\n          RESelectedTest: inputData.masterData.RE_TEST.length > 0 ? [inputData.masterData.RE_TEST[0]] : [],\n          RESelectedSample: inputData.RESelectedSample,\n          RESelectedSubSample\n        }; // if (inputData.searchSampleRef !== undefined && inputData.searchSampleRef.current !== null) {\n        //     inputData.searchSampleRef.current.value = \"\";\n        //     masterData['searchedSample'] = undefined\n        // }\n\n        if (inputData.searchSubSampleRef !== undefined && inputData.searchSubSampleRef.current !== null) {\n          inputData.searchSubSampleRef.current.value = \"\";\n          masterData['searchedSubSample'] = undefined;\n        }\n\n        if (inputData.searchTestRef !== undefined && inputData.searchTestRef.current !== null) {\n          inputData.searchTestRef.current.value = \"\";\n          masterData['searchedTests'] = undefined;\n        }\n\n        let {\n          testskip,\n          testtake\n        } = inputData;\n        let bool = false;\n        let skipInfo = {};\n\n        if (inputData.masterData.RE_TEST.length <= inputData.testskip) {\n          testskip = 0;\n          bool = true;\n        }\n\n        if (bool) {\n          skipInfo = {\n            testskip,\n            testtake\n          };\n        }\n\n        let TestParameters = [];\n        let ResultUsedInstrument = [];\n        let ResultUsedTasks = [];\n        let RegistrationTestAttachment = [];\n        let ResultChangeHistory = [];\n        let RegistrationTestComment = [];\n\n        if (inputData.checkBoxOperation === 1) {\n          //added by sudharshanan for test select issue while sample click\n          let wholeTestList = masterData.RE_TEST.map(b => b.ntransactiontestcode);\n          oldSelectedTest.map((test, index) => {\n            if (!wholeTestList.includes(test.ntransactiontestcode)) {\n              oldSelectedTest.splice(index, 1);\n            }\n\n            return null;\n          });\n          let keepOld = false;\n          let ntransactiontestcode;\n\n          if (oldSelectedTest.length > 0) {\n            keepOld = true;\n            masterData = { ...masterData,\n              RESelectedTest: oldSelectedTest\n            };\n          } else {\n            ntransactiontestcode = masterData.RESelectedTest[0].ntransactiontestcode;\n          }\n\n          switch (inputData.activeTestKey) {\n            case \"IDS_RESULTS\":\n              TestParameters = keepOld ? inputData.masterData.TestParameters : getRecordBasedOnPrimaryKeyName(inputData.masterData.TestParameters, ntransactiontestcode, \"ntransactiontestcode\");\n              activeName = \"TestParameters\";\n              dataStateName = \"resultDataState\";\n              break;\n\n            case \"IDS_INSTRUMENT\":\n              ResultUsedInstrument = keepOld ? inputData.masterData.ResultUsedInstrument : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedInstrument, ntransactiontestcode, \"ntransactiontestcode\");\n              activeName = \"ResultUsedInstrument\";\n              dataStateName = \"instrumentDataState\";\n              break;\n\n            case \"IDS_TASK\":\n              ResultUsedTasks = keepOld ? inputData.masterData.ResultUsedTasks : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedTasks, ntransactiontestcode, \"ntransactiontestcode\");\n              activeName = \"ResultUsedTasks\";\n              dataStateName = \"taskDataState\";\n              break;\n\n            case \"IDS_TESTATTACHMENTS\":\n              RegistrationTestAttachment = keepOld ? inputData.masterData.RegistrationTestAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment, ntransactiontestcode, \"ntransactiontestcode\");\n              activeName = \"RegistrationTestAttachment\";\n              break;\n\n            case \"IDS_RESULTCHANGEHISTORY\":\n              ResultChangeHistory = keepOld ? inputData.masterData.ResultChangeHistory : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultChangeHistory, ntransactiontestcode, \"ntransactiontestcode\");\n              activeName = \"ResultChangeHistory\";\n              dataStateName = \"resultChangeDataState\";\n              break;\n\n            case \"IDS_TESTCOMMENTS\":\n              RegistrationTestComment = keepOld ? inputData.masterData.RegistrationTestComment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment, ntransactiontestcode, \"ntransactiontestcode\");\n              activeName = \"RegistrationTestComment\";\n              dataStateName = \"testCommentDataState\";\n              break;\n\n            default:\n              TestParameters = keepOld ? inputData.masterData.TestParameters : getRecordBasedOnPrimaryKeyName(inputData.masterData.TestParameters, ntransactiontestcode, \"ntransactiontestcode\");\n              activeName = \"TestParameters\";\n              dataStateName = \"resultDataState\";\n              break;\n          }\n        } else if (inputData.checkBoxOperation === 5) {\n          let list = [];\n          let dbData = [];\n\n          switch (inputData.activeTestKey) {\n            case \"IDS_RESULTS\":\n              dbData = response.data.TestParameters || [];\n              list = [...inputData.masterData.TestParameters, ...response.data.TestParameters];\n              TestParameters = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              break;\n\n            case \"IDS_INSTRUMENT\":\n              dbData = response.data.TestParameters || [];\n              list = [...inputData.masterData.ResultUsedInstrument, ...response.data.ResultUsedInstrument];\n              ResultUsedInstrument = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              break;\n\n            case \"IDS_TASK\":\n              dbData = response.data.ResultUsedTasks || [];\n              list = [...inputData.masterData.ResultUsedTasks, ...dbData];\n              list.reduce((unique, item) => unique.includes(item) ? unique : [...unique, item], []);\n              ResultUsedTasks = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              break;\n\n            case \"IDS_TESTATTACHMENTS\":\n              dbData = response.data.RegistrationTestAttachment || [];\n              list = [...inputData.masterData.RegistrationTestAttachment, ...dbData];\n              RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              break;\n\n            case \"IDS_RESULTCHANGEHISTORY\":\n              dbData = response.data.ResultChangeHistory || [];\n              list = [...inputData.masterData.ResultChangeHistory, ...dbData];\n              ResultChangeHistory = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              break;\n\n            case \"IDS_TESTCOMMENTS\":\n              dbData = response.data.RegistrationTestComment || [];\n              list = [...inputData.masterData.RegistrationTestComment, ...dbData];\n              RegistrationTestComment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              break;\n\n            default:\n              dbData = response.data.TestParameters || [];\n              list = [...inputData.masterData.TestParameters, ...dbData];\n              TestParameters = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              break;\n          }\n        } else {\n          let list = [];\n\n          switch (inputData.activeTestKey) {\n            case \"IDS_RESULTS\":\n              list = response.data.TestParameters ? sortData(response.data.TestParameters, 'ascending', 'ntransactionresultcode') : [];\n              TestParameters = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              activeName = \"TestParameters\";\n              dataStateName = \"resultDataState\";\n              break;\n\n            case \"IDS_INSTRUMENT\":\n              list = response.data.ResultUsedInstrument ? sortData(response.data.ResultUsedInstrument, 'descending', 'nresultusedinstrumentcode') : [];\n              ResultUsedInstrument = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              activeName = \"ResultUsedInstrument\";\n              dataStateName = \"instrumentDataState\";\n              break;\n\n            case \"IDS_TASK\":\n              list = response.data.ResultUsedTasks ? sortData(response.data.ResultUsedTasks, 'descending', 'nresultusedtaskcode') : [];\n              list.reduce((unique, item) => unique.includes(item) ? unique : [...unique, item], []);\n              ResultUsedTasks = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              activeName = \"ResultUsedTasks\";\n              dataStateName = \"taskDataState\";\n              break;\n\n            case \"IDS_TESTATTACHMENTS\":\n              list = response.data.RegistrationTestAttachment ? sortData(response.data.RegistrationTestAttachment, 'descending', 'ntestattachmentcode') : [];\n              RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              activeName = \"RegistrationTestAttachment\";\n              break;\n\n            case \"IDS_RESULTCHANGEHISTORY\":\n              list = response.data.ResultChangeHistory ? sortData(response.data.ResultChangeHistory, 'descending', 'nresultchangehistorycode') : [];\n              ResultChangeHistory = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              activeName = \"ResultChangeHistory\";\n              dataStateName = \"resultChangeDataState\";\n              break;\n\n            case \"IDS_TESTCOMMENTS\":\n              list = response.data.RegistrationTestComment ? sortData(response.data.RegistrationTestComment, 'descending', 'ntestcommentcode') : [];\n              RegistrationTestComment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              activeName = \"RegistrationTestComment\";\n              dataStateName = \"testCommentDataState\";\n              break;\n\n            default:\n              list = response.data.TestParameters ? sortData(response.data.TestParameters, 'ascending', 'ntransactionresultcode') : [];\n              TestParameters = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              activeName = \"TestParameters\";\n              dataStateName = \"resultDataState\";\n              break;\n          }\n        }\n\n        masterData = { ...masterData,\n          // wholeApprovalParameter,\n          TestParameters,\n          // wholeResultUsedInstrument,\n          ResultUsedInstrument,\n          // wholeResultUsedTasks,\n          ResultUsedTasks,\n          // wholeRegistrationTestAttachment,\n          RegistrationTestAttachment,\n          // wholeResultChangeHistory,\n          ResultChangeHistory,\n          // wholeRegistrationTestComments,\n          RegistrationTestComment\n        };\n\n        if (inputData[dataStateName] && masterData[activeName].length <= inputData[dataStateName].skip) {\n          skipInfo = { ...skipInfo,\n            [dataStateName]: { ...inputData[dataStateName],\n              skip: 0,\n              sort: undefined,\n              filter: undefined\n            }\n          };\n        } else {\n          skipInfo = { ...skipInfo,\n            [dataStateName]: { ...inputData[dataStateName],\n              sort: undefined,\n              filter: undefined\n            }\n          };\n        }\n\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            masterData,\n            loading: false,\n            skip: undefined,\n            take: undefined,\n            ...skipInfo\n          }\n        });\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(error.response.data);\n        }\n      });\n    } else {\n      let oldSelectedTest = inputData.masterData.RESelectedTest;\n      let TestSelected = getRecordBasedOnPrimaryKeyName(inputData.masterData.RESelectedTest, inputData.removeElementFromArray[0].npreregno, \"npreregno\");\n      let isGrandChildGetRequired = false;\n      let oldSelectedSubSample = inputData.masterData.RESelectedSubSample;\n      let {\n        subsampletake,\n        subsampleskip\n      } = inputData;\n      let skipInfo = {};\n\n      if (TestSelected.length > 0) {\n        isGrandChildGetRequired = true;\n      } else {\n        isGrandChildGetRequired = false;\n      }\n\n      fillRecordBasedOnCheckBoxSelection(inputData.masterData, inputData.RESelectedSample, inputData.childTabsKey, inputData.checkBoxOperation, \"npreregno\", inputData.removeElementFromArray);\n\n      if (isGrandChildGetRequired) {\n        let ntransactiontestcode = inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode.toString() : \"\";\n        let RESelectedSample = inputData.RESelectedSample;\n        let RESelectedTest = inputData.masterData.RE_TEST.length > 0 ? [inputData.masterData.RE_TEST[0]] : [];\n        let RESelectedSubSample = inputData.masterData.RE_SUBSAMPLE;\n\n        if (inputData.masterData.nneedsubsample) {\n          let filterSelectedSubSample = getSameRecordFromTwoArrays(oldSelectedSubSample, inputData.masterData.RE_SUBSAMPLE, \"ntransactionsamplecode\");\n          RESelectedSubSample = filterSelectedSubSample.length > 0 ? filterSelectedSubSample : [inputData.masterData.RE_SUBSAMPLE[0]];\n\n          if (inputData.masterData.RE_SUBSAMPLE.length <= inputData.subsampleskip) {\n            subsampleskip = 0;\n            skipInfo = {\n              subsampletake,\n              subsampleskip\n            };\n          }\n        }\n\n        let ntransactionsamplecode = RESelectedSubSample.map(subsample => subsample.ntransactionsamplecode).join(',');\n        inputData = { ...inputData,\n          ntransactiontestcode,\n          ntransactionsamplecode,\n          RESelectedSample,\n          RESelectedTest,\n          RESelectedSubSample,\n          checkBoxOperation: 3,\n          activeTestKey: inputData.activeTestKey\n        };\n\n        if (RESelectedTest.length > 0) {\n          inputData = { ...inputData,\n            childTabsKey: [\"TestParameters\", \"ResultUsedInstrument\", \"ResultUsedTasks\", \"RegistrationTestAttachment\", \"ResultChangeHistory\", \"RegistrationTestComment\", \"ResultChangeHistory\"]\n          };\n          dispatch(getTestChildTabREDetail(inputData, true));\n        } else {\n          inputData = { ...inputData,\n            childTabsKey: [\"RE_TEST\"]\n          };\n          dispatch(getTestREDetail(inputData, true));\n        }\n      } else {\n        //added by sudharshanan for test select issue while sample click\n        let masterData = { ...inputData.masterData,\n          RESelectedTest: inputData.masterData.RE_TEST.length > 0 ? [inputData.masterData.RE_TEST[0]] : [],\n          RESelectedSample: inputData.RESelectedSample,\n          RESelectedSubSample: inputData.masterData.nneedsubsample && inputData.masterData.RE_SUBSAMPLE.length > 0 ? inputData.masterData.RESelectedSubSample : inputData.masterData.RE_SUBSAMPLE\n        };\n        let subsamplecheck = true;\n\n        if (inputData.masterData.nneedsubsample) {\n          let SubSampleSelected = getRecordBasedOnPrimaryKeyName(inputData.masterData.RESelectedSubSample, inputData.removeElementFromArray[0].npreregno, \"npreregno\");\n\n          if (SubSampleSelected.length > 0) {\n            let filterSelectedSubSample = getSameRecordFromTwoArrays(oldSelectedSubSample, inputData.masterData.RE_SUBSAMPLE, \"ntransactionsamplecode\");\n\n            if (filterSelectedSubSample.length === 0) {\n              let wholeSubSample = masterData.RE_SUBSAMPLE.map(b => b.ntransactionsamplecode);\n              oldSelectedSubSample.forEach((test, index) => {\n                if (!wholeSubSample.includes(test.ntransactionsamplecode)) {\n                  oldSelectedSubSample.splice(index, 1);\n                }\n\n                return null;\n              });\n\n              if (oldSelectedSubSample.length === 0 && wholeSubSample.length > 0 && masterData.selectedTest.length === 0) {\n                const selectedSubSample1 = [inputData.masterData.RE_SUBSAMPLE[0]];\n                masterData = { ...masterData,\n                  RESelectedSubSample: selectedSubSample1,\n                  selectedTest: []\n                };\n                inputData = { ...inputData,\n                  ...masterData\n                };\n                inputData[\"npreregno\"] = selectedSubSample1.map(x => x.npreregno).join(\",\");\n                inputData[\"ntransactionsamplecode\"] = selectedSubSample1.map(x => x.ntransactionsamplecode).join(\",\");\n                inputData[\"checkBoxOperation\"] = 3;\n                inputData[\"childTabsKey\"] = [\"RE_TEST\"];\n                subsamplecheck = false;\n                dispatch(getTestREDetail(inputData, true));\n              }\n            } else {\n              oldSelectedSubSample = filterSelectedSubSample;\n            }\n          } else {\n            let wholeSubSample = masterData.RE_SUBSAMPLE.map(b => b.ntransactionsamplecode);\n            oldSelectedSubSample.forEach((test, index) => {\n              if (!wholeSubSample.includes(test.ntransactionsamplecode)) {\n                oldSelectedSubSample.splice(index, 1);\n              }\n\n              return null;\n            });\n          }\n\n          if (subsamplecheck) {\n            masterData = { ...masterData,\n              RESelectedSubSample: oldSelectedSubSample\n            };\n          }\n\n          if (inputData.masterData.RE_SUBSAMPLE.length <= inputData.subsampleskip) {\n            subsampleskip = 0;\n            skipInfo = {\n              subsampleskip,\n              subsampletake\n            };\n          }\n        }\n\n        let wholeTestList = masterData.RE_TEST.map(b => b.ntransactiontestcode);\n        oldSelectedTest.map((test, index) => {\n          if (!wholeTestList.includes(test.ntransactiontestcode)) {\n            oldSelectedTest.splice(index, 1);\n          }\n\n          return null;\n        });\n        let keepOld = false;\n        let ntransactiontestcode;\n\n        if (oldSelectedTest.length > 0) {\n          keepOld = true;\n          masterData = { ...masterData,\n            RESelectedTest: oldSelectedTest\n          };\n        } else {\n          ntransactiontestcode = masterData.RE_TEST[0].ntransactiontestcode;\n        }\n\n        const TestParameters = keepOld ? inputData.masterData.TestParameters : getRecordBasedOnPrimaryKeyName(inputData.masterData.TestParameters, ntransactiontestcode, \"ntransactiontestcode\");\n        const ResultUsedInstrument = keepOld ? inputData.masterData.ResultUsedInstrument : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedInstrument || [], ntransactiontestcode, \"ntransactiontestcode\");\n        const ResultUsedTasks = keepOld ? inputData.masterData.ResultUsedTasks : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedTasks || [], ntransactiontestcode, \"ntransactiontestcode\");\n        const RegistrationTestAttachment = keepOld ? inputData.masterData.RegistrationTestAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment || [], ntransactiontestcode, \"ntransactiontestcode\");\n        const RegistrationTestComment = keepOld ? inputData.masterData.RegistrationTestComment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment || [], ntransactiontestcode, \"ntransactiontestcode\");\n        const ResultChangeHistory = keepOld ? inputData.masterData.ResultChangeHistory : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultChangeHistory || [], ntransactiontestcode, \"ntransactiontestcode\");\n        let {\n          testskip,\n          testtake\n        } = inputData;\n        let bool = false;\n        let skipInfo = {};\n\n        if (inputData.masterData.RE_TEST.length <= inputData.testskip) {\n          testskip = 0;\n          bool = true;\n        }\n\n        if (bool) {\n          skipInfo = {\n            testskip,\n            testtake\n          };\n        }\n\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            masterData: { ...masterData,\n              RESelectedSample: inputData.RESelectedSample,\n              // selectedPreregno: inputData.npreregno,\n              // RESelectedTest: inputData.masterData.searchedTest && inputData.masterData.searchedTest.length > 0 ? [inputData.masterData.\n              //     searchedTest[0]\n              // ] : inputData.masterData.RE_TEST.length > 0 ? [inputData.masterData.\n              //     RE_TEST[0]\n              // ] : [],\n              // RESelectedTest: inputData.masterData.RE_TEST.length > 0 ? [inputData.masterData.RE_TEST[0]] : [],\n              TestParameters,\n              ResultUsedInstrument,\n              ResultUsedTasks,\n              RegistrationTestAttachment,\n              RegistrationTestComment,\n              ResultChangeHistory // RESelectedSubSample: inputData.masterData.RE_SUBSAMPLE\n\n            },\n            loading: false,\n            showFilter: false,\n            activeSampleTab: inputData.activeSampleTab,\n            activeTestKey: inputData.activeTestKey,\n            ...skipInfo\n          }\n        });\n      }\n    }\n  };\n}\nexport function getTestREDetail(inputData, isServiceRequired) {\n  return function (dispatch) {\n    let activeName = \"\";\n    let dataStateName = \"\";\n    let inputParamData = {\n      nflag: 3,\n      ntype: 3,\n      nsampletypecode: inputData.nsampletypecode,\n      nregtypecode: inputData.nregtypecode,\n      nregsubtypecode: inputData.nregsubtypecode,\n      npreregno: inputData.npreregno,\n      ntransactiontestcode: 0,\n      ntranscode: inputData.ntransactionstatus.toString(),\n      ntransactionsamplecode: inputData.ntransactionsamplecode,\n      userinfo: inputData.userinfo,\n      ntestcode: inputData.ntestcode,\n      activeTestKey: inputData.activeTestKey\n    }; // dispatch(initRequest(true));\n    // rsapi.post(\"resultentrybysample/getResultEntrySubSampleDetails\", inputParamData)\n\n    if (isServiceRequired) {\n      dispatch(initRequest(true));\n      rsapi.post(\"resultentrybysample/getResultEntrySubSampleDetails\", inputParamData).then(response => {\n        // let responseData = {\n        //     ...response.data,\n        //     RESelectedSample: inputData.RESelectedSample || inputData.masterData.RESelectedSample,\n        //     RESelectedSubSample: inputData.RESelectedSubSample || inputData.masterData.RESelectedSubSample,\n        //     // RESelectedTest: inputData.masterData.RESelectedTest\n        // }\n        let oldSelectedTest = inputData.masterData.RESelectedTest;\n        fillRecordBasedOnCheckBoxSelection(inputData.masterData, response.data, inputData.childTabsKey, inputData.checkBoxOperation, \"npreregno\", inputData.removeElementFromArray);\n        let masterData = { ...inputData.masterData,\n          // ...response.data,\n          RESelectedTest: inputData.masterData.RE_TEST.length > 0 ? [inputData.masterData.RE_TEST[0]] : [],\n          RESelectedSample: inputData.masterData.RESelectedSample,\n          RESelectedSubSample: inputData.RESelectedSubSample || inputData.masterData.RESelectedSubSample\n        };\n\n        if (inputData.searchTestRef !== undefined && inputData.searchTestRef.current !== null) {\n          inputData.searchTestRef.current.value = \"\";\n          masterData['searchedTests'] = undefined;\n        }\n\n        let {\n          testskip,\n          testtake\n        } = inputData;\n        let bool = false;\n        let skipInfo = {};\n\n        if (inputData.masterData.RE_TEST.length <= inputData.testskip) {\n          testskip = 0;\n          bool = true;\n        }\n\n        if (bool) {\n          skipInfo = {\n            testskip,\n            testtake\n          };\n        }\n\n        let TestParameters = [];\n        let ResultUsedInstrument = [];\n        let ResultUsedTasks = [];\n        let RegistrationTestAttachment = [];\n        let ResultChangeHistory = [];\n        let RegistrationTestComment = [];\n\n        if (inputData.checkBoxOperation === 1) {\n          //added by sudharshanan for test select issue while sample click\n          let wholeTestList = masterData.RE_TEST.map(b => b.ntransactiontestcode);\n          oldSelectedTest.map((test, index) => {\n            if (!wholeTestList.includes(test.ntransactiontestcode)) {\n              oldSelectedTest.splice(index, 1);\n            }\n\n            return null;\n          });\n          let keepOld = false;\n          let ntransactiontestcode;\n\n          if (oldSelectedTest.length > 0) {\n            keepOld = true;\n            masterData = { ...masterData,\n              RESelectedTest: oldSelectedTest\n            };\n          } else {\n            ntransactiontestcode = masterData.RESelectedTest[0].ntransactiontestcode;\n          }\n\n          switch (inputData.activeTestKey) {\n            case \"IDS_RESULTS\":\n              TestParameters = keepOld ? inputData.masterData.TestParameters : getRecordBasedOnPrimaryKeyName(inputData.masterData.TestParameters, ntransactiontestcode, \"ntransactiontestcode\");\n              activeName = \"TestParameters\";\n              dataStateName = \"resultDataState\";\n              break;\n\n            case \"IDS_INSTRUMENT\":\n              ResultUsedInstrument = keepOld ? inputData.masterData.ResultUsedInstrument : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedInstrument, ntransactiontestcode, \"ntransactiontestcode\");\n              activeName = \"ResultUsedInstrument\";\n              dataStateName = \"instrumentDataState\";\n              break;\n\n            case \"IDS_TASK\":\n              ResultUsedTasks = keepOld ? inputData.masterData.ResultUsedTasks : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedTasks, ntransactiontestcode, \"ntransactiontestcode\");\n              activeName = \"ResultUsedTasks\";\n              dataStateName = \"taskDataState\";\n              break;\n\n            case \"IDS_TESTATTACHMENTS\":\n              RegistrationTestAttachment = keepOld ? inputData.masterData.RegistrationTestAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment, ntransactiontestcode, \"ntransactiontestcode\");\n              activeName = \"RegistrationTestAttachment\";\n              break;\n\n            case \"IDS_RESULTCHANGEHISTORY\":\n              ResultChangeHistory = keepOld ? inputData.masterData.ResultChangeHistory : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultChangeHistory, ntransactiontestcode, \"ntransactiontestcode\");\n              activeName = \"ResultChangeHistory\";\n              dataStateName = \"resultChangeDataState\";\n              break;\n\n            case \"IDS_TESTCOMMENTS\":\n              RegistrationTestComment = keepOld ? inputData.masterData.RegistrationTestComment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment, ntransactiontestcode, \"ntransactiontestcode\");\n              activeName = \"RegistrationTestComment\";\n              dataStateName = \"testCommentDataState\";\n              break;\n\n            default:\n              TestParameters = keepOld ? inputData.masterData.TestParameters : getRecordBasedOnPrimaryKeyName(inputData.masterData.TestParameters, ntransactiontestcode, \"ntransactiontestcode\");\n              activeName = \"TestParameters\";\n              dataStateName = \"resultDataState\";\n              break;\n          }\n        } else if (inputData.checkBoxOperation === 5) {\n          let list = [];\n          let dbData = [];\n\n          switch (inputData.activeTestKey) {\n            case \"IDS_RESULTS\":\n              dbData = response.data.TestParameters || [];\n              list = [...inputData.masterData.TestParameters, ...response.data.TestParameters];\n              TestParameters = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              break;\n\n            case \"IDS_INSTRUMENT\":\n              dbData = response.data.TestParameters || [];\n              list = [...inputData.masterData.ResultUsedInstrument, ...response.data.ResultUsedInstrument];\n              ResultUsedInstrument = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              break;\n\n            case \"IDS_TASK\":\n              dbData = response.data.ResultUsedTasks || [];\n              list = [...inputData.masterData.ResultUsedTasks, ...dbData];\n              list.reduce((unique, item) => unique.includes(item) ? unique : [...unique, item], []);\n              ResultUsedTasks = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              break;\n\n            case \"IDS_TESTATTACHMENTS\":\n              dbData = response.data.RegistrationTestAttachment || [];\n              list = [...inputData.masterData.RegistrationTestAttachment, ...dbData];\n              RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              break;\n\n            case \"IDS_RESULTCHANGEHISTORY\":\n              dbData = response.data.ResultChangeHistory || [];\n              list = [...inputData.masterData.ResultChangeHistory, ...dbData];\n              ResultChangeHistory = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              break;\n\n            case \"IDS_TESTCOMMENTS\":\n              dbData = response.data.RegistrationTestComment || [];\n              list = [...inputData.masterData.RegistrationTestComment, ...dbData];\n              RegistrationTestComment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              break;\n\n            default:\n              dbData = response.data.TestParameters || [];\n              list = [...inputData.masterData.TestParameters, ...dbData];\n              TestParameters = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              break;\n          }\n        } else {\n          let list = [];\n\n          switch (inputData.activeTestKey) {\n            case \"IDS_RESULTS\":\n              list = response.data.TestParameters ? sortData(response.data.TestParameters, 'ascending', 'ntransactionresultcode') : [];\n              TestParameters = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              activeName = \"TestParameters\";\n              dataStateName = \"resultDataState\";\n              break;\n\n            case \"IDS_INSTRUMENT\":\n              list = response.data.ResultUsedInstrument ? sortData(response.data.ResultUsedInstrument, 'descending', 'nresultusedinstrumentcode') : [];\n              ResultUsedInstrument = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              activeName = \"ResultUsedInstrument\";\n              dataStateName = \"instrumentDataState\";\n              break;\n\n            case \"IDS_TASK\":\n              list = response.data.ResultUsedTasks ? sortData(response.data.ResultUsedTasks, 'descending', 'nresultusedtaskcode') : [];\n              list.reduce((unique, item) => unique.includes(item) ? unique : [...unique, item], []);\n              ResultUsedTasks = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              activeName = \"ResultUsedTasks\";\n              dataStateName = \"taskDataState\";\n              break;\n\n            case \"IDS_TESTATTACHMENTS\":\n              list = response.data.RegistrationTestAttachment ? sortData(response.data.RegistrationTestAttachment, 'descending', 'ntestattachmentcode') : [];\n              RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              activeName = \"RegistrationTestAttachment\";\n              break;\n\n            case \"IDS_RESULTCHANGEHISTORY\":\n              list = response.data.ResultChangeHistory ? sortData(response.data.ResultChangeHistory, 'descending', 'nresultchangehistorycode') : [];\n              ResultChangeHistory = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              activeName = \"ResultChangeHistory\";\n              dataStateName = \"resultChangeDataState\";\n              break;\n\n            case \"IDS_TESTCOMMENTS\":\n              list = response.data.RegistrationTestComment ? sortData(response.data.RegistrationTestComment, 'descending', 'ntestcommentcode') : [];\n              RegistrationTestComment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              activeName = \"RegistrationTestComment\";\n              dataStateName = \"testCommentDataState\";\n              break;\n\n            default:\n              list = response.data.TestParameters ? sortData(response.data.TestParameters, 'ascending', 'ntransactionresultcode') : [];\n              TestParameters = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              activeName = \"TestParameters\";\n              dataStateName = \"resultDataState\";\n              break;\n          }\n        }\n\n        masterData = { ...masterData,\n          // wholeApprovalParameter,\n          TestParameters,\n          // wholeResultUsedInstrument,\n          ResultUsedInstrument,\n          // wholeResultUsedTasks,\n          ResultUsedTasks,\n          // wholeRegistrationTestAttachment,\n          RegistrationTestAttachment,\n          // wholeResultChangeHistory,\n          ResultChangeHistory,\n          // wholeRegistrationTestComments,\n          RegistrationTestComment\n        };\n\n        if (inputData[dataStateName] && masterData[activeName].length <= inputData[dataStateName].skip) {\n          skipInfo = { ...skipInfo,\n            [dataStateName]: { ...inputData[dataStateName],\n              skip: 0,\n              sort: undefined,\n              filter: undefined\n            }\n          };\n        } else {\n          skipInfo = { ...skipInfo,\n            [dataStateName]: { ...inputData[dataStateName],\n              sort: undefined,\n              filter: undefined\n            }\n          };\n        }\n\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            masterData,\n            loading: false,\n            showFilter: false,\n            activeTestKey: inputData.activeTestKey,\n            screenName: inputData.screenName,\n            ...skipInfo\n          }\n        });\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(error.response.data);\n        }\n      });\n    } else {\n      //fillRecordBasedOnCheckBoxSelection(inputData.masterData, response.data, inputData.childTabsKey, inputData.checkBoxOperation, \"npreregno\", inputData.removeElementFromArray);\n      let oldSelectedTest = inputData.masterData.RESelectedTest;\n      let TestSelected = getRecordBasedOnPrimaryKeyName(inputData.masterData.RESelectedTest, inputData.removeElementFromArray[0].ntransactionsamplecode, \"ntransactionsamplecode\");\n      let isGrandChildGetRequired = false;\n\n      if (TestSelected.length > 0) {\n        isGrandChildGetRequired = true;\n      } else {\n        isGrandChildGetRequired = false;\n      }\n\n      fillRecordBasedOnCheckBoxSelection(inputData.masterData, inputData.RESelectedSubSample, inputData.childTabsKey, inputData.checkBoxOperation, \"ntransactionsamplecode\", inputData.removeElementFromArray);\n\n      if (isGrandChildGetRequired) {\n        let ntransactiontestcode = inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode.toString() : \"\";\n        let RESelectedSubSample = inputData.RESelectedSubSample;\n        let RESelectedTest = inputData.masterData.RE_TEST.length > 0 ? [inputData.masterData.RE_TEST[0]] : []; // let RESelectedSubSample = inputData.masterData.RE_SUBSAMPLE\n\n        inputData = { ...inputData,\n          childTabsKey: [\"TestParameters\", \"ResultUsedInstrument\", \"ResultUsedTasks\", \"RegistrationTestAttachment\", \"ResultChangeHistory\", \"RegistrationTestComment\", \"ResultChangeHistory\"],\n          ntransactiontestcode,\n          RESelectedSample: inputData.masterData.RESelectedSample,\n          RESelectedTest,\n          RESelectedSubSample,\n          checkBoxOperation: 3,\n          activeTestKey: inputData.activeTestKey\n        };\n        dispatch(getTestChildTabREDetail(inputData, true));\n      } else {\n        //added by sudharshanan for test select issue while sample click\n        let masterData = { ...inputData.masterData,\n          RESelectedTest: inputData.masterData.RE_TEST.length > 0 ? [inputData.masterData.RE_TEST[0]] : [],\n          RESelectedSubSample: inputData.RESelectedSubSample\n        };\n        let wholeTestList = masterData.RE_TEST.map(b => b.ntransactiontestcode);\n        oldSelectedTest.map((test, index) => {\n          if (!wholeTestList.includes(test.ntransactiontestcode)) {\n            oldSelectedTest.splice(index, 1);\n          }\n\n          return null;\n        });\n        let keepOld = false;\n        let ntransactiontestcode;\n\n        if (oldSelectedTest.length > 0) {\n          keepOld = true;\n          masterData = { ...masterData,\n            RESelectedTest: oldSelectedTest\n          };\n        } else {\n          ntransactiontestcode = masterData.RE_TEST[0].ntransactiontestcode;\n        }\n\n        const TestParameters = keepOld ? inputData.masterData.TestParameters : getRecordBasedOnPrimaryKeyName(inputData.masterData.TestParameters, ntransactiontestcode, \"ntransactiontestcode\");\n        const ResultUsedInstrument = keepOld ? inputData.masterData.ResultUsedInstrument : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedInstrument || [], ntransactiontestcode, \"ntransactiontestcode\");\n        const ResultUsedTasks = keepOld ? inputData.masterData.ResultUsedTasks : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedTasks || [], ntransactiontestcode, \"ntransactiontestcode\");\n        const RegistrationTestAttachment = keepOld ? inputData.masterData.RegistrationTestAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment || [], ntransactiontestcode, \"ntransactiontestcode\");\n        const RegistrationTestComment = keepOld ? inputData.masterData.RegistrationTestComment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment || [], ntransactiontestcode, \"ntransactiontestcode\");\n        const ResultChangeHistory = keepOld ? inputData.masterData.ResultChangeHistory : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultChangeHistory || [], ntransactiontestcode, \"ntransactiontestcode\");\n        let {\n          testskip,\n          testtake\n        } = inputData;\n        let bool = false;\n        let skipInfo = {};\n\n        if (inputData.masterData.RE_TEST.length <= inputData.testskip) {\n          testskip = 0;\n          bool = true;\n        }\n\n        if (bool) {\n          skipInfo = {\n            testskip,\n            testtake\n          };\n        }\n\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            masterData: { ...masterData,\n              RESelectedSubSample: inputData.RESelectedSubSample,\n              // selectedPreregno: inputData.npreregno,\n              // RESelectedTest: inputData.masterData.searchedTest && inputData.masterData.searchedTest.length > 0 ? [inputData.masterData.\n              //     searchedTest[0]\n              // ] : inputData.masterData.RE_TEST.length > 0 ? [inputData.masterData.\n              //     RE_TEST[0]\n              // ] : [],\n              // RESelectedTest: inputData.masterData.RE_TEST.length > 0 ? [inputData.masterData.RE_TEST[0]] : [],\n              TestParameters,\n              ResultUsedInstrument,\n              ResultUsedTasks,\n              RegistrationTestAttachment,\n              RegistrationTestComment,\n              ResultChangeHistory\n            },\n            loading: false,\n            showFilter: false,\n            activeSampleTab: inputData.activeSampleTab,\n            activeTestKey: inputData.activeTestKey,\n            ...skipInfo\n          }\n        });\n      }\n    }\n  };\n}\nexport function getSampleChildTabREDetail(inputData) {\n  return function (dispatch) {\n    let inputParamData = {\n      ntransactiontestcode: inputData.ntransactiontestcode,\n      npreregno: inputData.npreregno,\n      userinfo: inputData.userinfo\n    };\n    let url = \"\";\n\n    switch (inputData.activeSampleKey) {\n      case \"IDS_DOCUMENTS\":\n        url = \"attachment/getSampleAttachment\";\n        break;\n\n      case \"IDS_SAMPLEATTACHMENTS\":\n        url = \"attachment/getSampleAttachment\";\n        break;\n\n      case \"IDS_APPROVALHISTORY\":\n        url = \"resultentrybysample/getSampleApprovalHistory\";\n        break;\n\n      default:\n        url = \"attachment/getSampleAttachment\";\n        break;\n    }\n\n    dispatch(initRequest(true));\n    rsapi.post(url, inputParamData).then(response => {\n      let responseData = { ...response.data\n      }; //responseData = sortData(responseData)\n\n      fillRecordBasedOnCheckBoxSelection(inputData.masterData, responseData, inputData.childTabsKey, inputData.checkBoxOperation, \"npreregno\", inputData.removeElementFromArray);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputData.masterData,\n            ...response.data,\n            RESelectedSample: inputData.RESelectedSample\n          },\n          loading: false,\n          activeSampleKey: inputData.activeSampleKey,\n          screenName: inputData.screenName\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getTestChildTabREDetail(inputData, isServiceRequired) {\n  return function (dispatch) {\n    let inputParamData = {\n      ntransactiontestcode: inputData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\"),\n      npreregno: inputData.npreregno,\n      userinfo: inputData.userinfo\n    };\n    let activeName = \"\";\n    let dataStateName = \"\"; // let { resultDataState, materialDataState, instrumentDataState, taskDataState, resultChangeDataState,\n    //     documentDataState, testCommentDataState } = inputData\n\n    let url = \"resultentrybysample/getTestbasedParameter\";\n\n    switch (inputData.activeTestKey) {\n      case \"IDS_RESULTS\":\n        url = \"resultentrybysample/getTestbasedParameter\";\n        activeName = \"TestParameters\";\n        dataStateName = \"resultDataState\";\n        break;\n\n      case \"IDS_INSTRUMENT\":\n        url = \"resultentrybysample/getResultUsedInstrument\";\n        activeName = \"ResultUsedInstrument\";\n        dataStateName = \"instrumentDataState\";\n        break;\n\n      case \"IDS_MATERIAL\":\n        url = \"resultentrybysample/getResultUsedMaterial\";\n        activeName = \"\";\n        dataStateName = \"materialDataState\";\n        break;\n\n      case \"IDS_TASK\":\n        url = \"resultentrybysample/getResultUsedTask\";\n        activeName = \"ResultUsedTasks\";\n        dataStateName = \"taskDataState\";\n        break;\n\n      case \"IDS_TESTATTACHMENTS\":\n        url = \"attachment/getTestAttachment\";\n        activeName = \"RegistrationTestAttachment\";\n        break;\n\n      case \"IDS_TESTCOMMENTS\":\n        url = \"comments/getTestComment\";\n        activeName = \"RegistrationTestComment\";\n        dataStateName = \"testCommentDataState\";\n        break;\n\n      case \"IDS_DOCUMENTS\":\n        url = \"attachment/getSampleAttachment\";\n        activeName = \"\";\n        dataStateName = \"documentDataState\";\n        break;\n\n      case \"IDS_RESULTCHANGEHISTORY\":\n        url = \"resultentrybysample/getResultChangeHistory\";\n        activeName = \"ResultChangeHistory\";\n        dataStateName = \"resultChangeDataState\";\n        break;\n\n      case \"IDS_SAMPLEATTACHMENTS\":\n        url = \"attachment/getSampleAttachment\";\n        activeName = \"\";\n        dataStateName = \"resultDataState\";\n        break;\n\n      default:\n        url = \"resultentrybysample/getTestbasedParameter\";\n        activeName = \"TestParameters\";\n        dataStateName = \"resultDataState\";\n        break;\n    }\n\n    dispatch(initRequest(true));\n\n    if (isServiceRequired) {\n      rsapi.post(url, inputParamData).then(response => {\n        let responseData = { ...response.data,\n          RESelectedSample: inputData.RESelectedSample || inputData.masterData.RESelectedSample,\n          RESelectedTest: inputData.RESelectedTest\n        };\n        let skipInfo = {}; //responseData = sortData(responseData)\n\n        fillRecordBasedOnCheckBoxSelection(inputData.masterData, responseData, inputData.childTabsKey, inputData.checkBoxOperation, \"npreregno\", inputData.removeElementFromArray);\n        let masterData = { ...inputData.masterData,\n          ...sortData(responseData),\n          RESelectedTest: inputData.RESelectedTest\n        };\n\n        if (inputData[dataStateName] && masterData[activeName].length <= inputData[dataStateName].skip) {\n          skipInfo = {\n            [dataStateName]: { ...inputData[dataStateName],\n              skip: 0,\n              sort: undefined,\n              filter: undefined\n            }\n          };\n        } else {\n          skipInfo = { ...skipInfo,\n            [dataStateName]: { ...inputData[dataStateName],\n              sort: undefined,\n              filter: undefined\n            }\n          };\n        }\n\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            masterData,\n            loading: false,\n            activeTestKey: inputData.activeTestKey,\n            screenName: inputData.activeTestKey,\n            testskip: undefined,\n            testtake: undefined,\n            ...skipInfo\n          }\n        });\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(error.response.data);\n        }\n      });\n    } else {\n      //fillRecordBasedOnCheckBoxSelection(inputData.masterData, response.data, inputData.childTabsKey, inputData.checkBoxOperation, \"npreregno\", inputData.removeElementFromArray);\n      fillRecordBasedOnCheckBoxSelection(inputData.masterData, inputData.RESelectedTest, inputData.childTabsKey, inputData.checkBoxOperation, \"ntransactiontestcode\", inputData.removeElementFromArray);\n      let skipInfo = {};\n      let masterData = { ...inputData.masterData,\n        RESelectedTest: inputData.RESelectedTest\n      };\n\n      if (masterData[activeName].length <= inputData[dataStateName].skip) {\n        skipInfo = {\n          [dataStateName]: { ...inputData[dataStateName],\n            skip: 0,\n            sort: undefined,\n            filter: undefined\n          }\n        };\n      } else {\n        skipInfo = { ...skipInfo,\n          [dataStateName]: { ...inputData[dataStateName],\n            sort: undefined,\n            filter: undefined\n          }\n        };\n      }\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false,\n          showFilter: false,\n          activeTestKey: inputData.activeTestKey,\n          screenName: inputData.screenName,\n          ...skipInfo\n        }\n      });\n    }\n  };\n}\nexport function getRERegistrationType(inputData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"resultentrybysample/getRegistrationType\", inputData).then(response => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputData.masterData,\n            ...response.data\n          },\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getRERegistrationSubType(inputData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"resultentrybysample/getRegistrationsubType\", inputData).then(response => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputData.masterData,\n            ...response.data,\n            defaultRegistrationType: inputData.defaultRegistrationType\n          },\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getREApprovalConfigVersion(inputData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"resultentrybysample/getApprovalConfigVersion\", inputData).then(response => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputData.masterData,\n            ...response.data,\n            defaultRegistrationSubType: inputData.defaultRegistrationSubType // fromDate: inputData.fromdate,\n            //  toDate: inputData.todate\n\n          },\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getREFilterStatus(inputData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"resultentrybysample/getFilterStatus\", inputData).then(response => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputData.masterData,\n            ...response.data,\n            defaultjobstatus: inputData.defaultjobstatus // fromDate: inputData.fromdate,\n            // toDate: inputData.todate\n\n          },\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getREJobStatus(inputData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"resultentrybysample/getJobStatus\", inputData).then(response => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputData.masterData,\n            ...response.data,\n            defaultApprovalConfigVersion: inputData.defaultApprovalConfigVersion // fromDate: inputData.fromdate,\n            // toDate: inputData.todate\n\n          },\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getResultEntryDetails(inputParamData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"resultentrybysample/getResultEntryDetails\", { ...inputParamData.inputData,\n      nneedsubsample: inputParamData.masterData.nneedsubsample\n    }).then(response => {\n      let masterData = { ...inputParamData.masterData\n      };\n\n      if (inputParamData.refs.searchSampleRef !== undefined && inputParamData.refs.searchSampleRef.current !== null) {\n        inputParamData.refs.searchSampleRef.current.value = \"\";\n        masterData['searchedSample'] = undefined;\n      }\n\n      if (inputParamData.refs.searchSubSampleRef !== undefined && inputParamData.refs.searchSubSampleRef.current !== null) {\n        inputParamData.refs.searchSubSampleRef.current.value = \"\";\n        masterData['searchedSubSample'] = undefined;\n      }\n\n      if (inputParamData.refs.searchTestRef !== undefined && inputParamData.refs.searchTestRef.current !== null) {\n        inputParamData.refs.searchTestRef.current.value = \"\"; // masterData['searchedTests'] = undefined\n\n        masterData['searchedTest'] = undefined;\n      }\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...masterData,\n            ...response.data,\n            realFromDate: response.data[\"fromDate\"],\n            realToDate: response.data[\"toDate\"]\n          },\n          loading: false,\n          showTest: inputParamData.inputData.showTest,\n          showSample: inputParamData.inputData.showSample,\n          activeTestKey: inputParamData.inputData.activeTestKey,\n          skip: 0,\n          take: inputParamData.inputData.take,\n          testskip: 0,\n          testtake: inputParamData.inputData.testtake,\n          resultDataState: { ...inputParamData.resultDataState,\n            sort: undefined,\n            filter: undefined\n          },\n          instrumentDataState: { ...inputParamData.instrumentDataState,\n            sort: undefined,\n            filter: undefined\n          },\n          materialDataState: { ...inputParamData.materialDataState,\n            sort: undefined,\n            filter: undefined\n          },\n          taskDataState: { ...inputParamData.taskDataState,\n            sort: undefined,\n            filter: undefined\n          },\n          documentDataState: { ...inputParamData.documentDataState,\n            sort: undefined,\n            filter: undefined\n          },\n          resultChangeDataState: { ...inputParamData.resultChangeDataState,\n            sort: undefined,\n            filter: undefined\n          },\n          testCommentDataState: { ...inputParamData.testCommentDataState,\n            sort: undefined,\n            filter: undefined\n          },\n          historyDataState: { ...inputParamData.historyDataState,\n            sort: undefined,\n            filter: undefined\n          },\n          samplePrintHistoryDataState: { ...inputParamData.samplePrintHistoryDataState,\n            sort: undefined,\n            filter: undefined\n          },\n          sampleHistoryDataState: { ...inputParamData.sampleHistoryDataState,\n            sort: undefined,\n            filter: undefined\n          }\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function resultGetModule(inputData, userInfo, ncontrolcode, testskip, testtake) {\n  return function (dispatch) {\n    let TestList = [...inputData.RE_TEST];\n    TestList = TestList.splice(testskip, testskip + testtake);\n    let acceptTestList = getSameRecordFromTwoArrays(TestList, inputData.RESelectedTest, \"ntransactiontestcode\");\n\n    if (acceptTestList && acceptTestList.length > 0) {\n      if (Object.values(inputData).length > 0 && inputData.RESelectedTest.length > 0) {\n        let inputParamData = {\n          ntransactiontestcode: acceptTestList ? acceptTestList.map(test => test.ntransactiontestcode).join(\",\") : \"\",\n          userinfo: userInfo\n        };\n        dispatch(initRequest(true));\n        rsapi.post(\"resultentrybysample/getResultEntryResults\", inputParamData).then(response => {\n          let selectedResultGrade = [];\n          let paremterResultcode = [];\n          const parameterResults = response.data.ResultParameter;\n          parameterResults.map((param, index) => {\n            selectedResultGrade[index] = {\n              ngradecode: param.ngradecode\n            };\n            paremterResultcode[index] = param.ntransactionresultcode;\n            response.data.PredefinedValues && response.data.PredefinedValues[parameterResults[index].ntransactionresultcode] && response.data.PredefinedValues[parameterResults[index].ntransactionresultcode].map(predefinedvalue => {\n              if (predefinedvalue.ndefaultstatus === transactionStatus.YES) {\n                response.data.PredefinedValues[parameterResults[index].ntransactionresultcode] = constructOptionList(response.data.PredefinedValues[parameterResults[index].ntransactionresultcode] || [], 'spredefinedname', 'spredefinedname', undefined, undefined, undefined).get(\"OptionList\");\n\n                if (response.data.ResultParameter[index].sresult === null) {\n                  response.data.ResultParameter[index].sresult = predefinedvalue.spredefinedname;\n                  response.data.ResultParameter[index].sfinal = predefinedvalue.spredefinedname;\n                  response.data.ResultParameter[index].editable = true;\n                  response.data.ResultParameter[index].ngradecode = predefinedvalue.ngradecode;\n                }\n              }\n\n              return null;\n            });\n            return null;\n          });\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              masterData: { ...inputData,\n                ...response.data,\n                paremterResultcode //,\n                //selectedResultGrade ,\n\n              },\n              selectedRecord: {\n                selectedResultGrade: selectedResultGrade,\n                ResultParameter: response.data.ResultParameter\n              },\n              loading: false,\n              screenName: \"IDS_RESULTENTRY\",\n              openModal: true,\n              operation: \"update\",\n              activeTestKey: \"IDS_RESULTS\",\n              ncontrolcode: ncontrolcode\n            }\n          });\n        }).catch(error => {\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              loading: false\n            }\n          });\n\n          if (error.response.status === 500) {\n            toast.error(error.message);\n          } else {\n            toast.warn(error.response.data);\n          }\n        }); //}\n      } else {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n        toast.warn(intl.formatMessage({\n          id: \"IDS_SELECTTESTTOENTERRESULT\"\n        }));\n      }\n    } else {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n      toast.warn(intl.formatMessage({\n        id: \"IDS_SELECTTESTTOENTERRESULT\"\n      }));\n    }\n  };\n}\nexport function completeTest(inputParam, acceptList, userInfo, completeResultId) {\n  if (acceptList !== undefined && acceptList.length > 0) {\n    return function (dispatch) {\n      let inputData = inputParam.testChildGetREParam;\n      let inputParamData = {\n        ntype: 3,\n        nflag: 3,\n        nsampletypecode: inputData.nsampletypecode,\n        nregtypecode: inputData.nregtypecode,\n        nregsubtypecode: inputData.nregsubtypecode,\n        npreregno: inputData.npreregno,\n        ntranscode: String(inputData.ntransactionstatus),\n        napprovalversioncode: inputData.napprovalversioncode,\n        napprovalconfigcode: inputData.napprovalconfigcode,\n        ntransactionsamplecode: inputData.ntransactionsamplecode,\n        userinfo: userInfo,\n        fromdate: inputData.fromdate,\n        todate: inputData.todate,\n        ntestcode: inputData.ntestcode,\n        transactiontestcode: acceptList ? acceptList.map(test => test.ntransactiontestcode).join(\",\") : \"\",\n        ntransactiontestcode: 0,\n        activeTestKey: inputData.activeTestKey,\n        ncontrolcode: inputParam.inputData.ncontrolcode,\n        nneedsubsample: inputData.masterData.nneedsubsample\n      };\n      let activeName = \"\";\n      let dataStateName = \"\"; // let { resultDataState, materialDataState, instrumentDataState, taskDataState, resultChangeDataState,\n      //     documentDataState, testCommentDataState } = inputData\n      // let url = \"resultentrybysample/getTestbasedParameter\"\n\n      switch (inputData.activeTestKey) {\n        case \"IDS_RESULTS\":\n          activeName = \"TestParameters\";\n          dataStateName = \"resultDataState\";\n          break;\n\n        case \"IDS_INSTRUMENT\":\n          activeName = \"ResultUsedInstrument\";\n          dataStateName = \"instrumentDataState\";\n          break;\n\n        case \"IDS_MATERIAL\":\n          activeName = \"\";\n          dataStateName = \"materialDataState\";\n          break;\n\n        case \"IDS_TASK\":\n          activeName = \"ResultUsedTasks\";\n          dataStateName = \"taskDataState\";\n          break;\n\n        case \"IDS_TESTATTACHMENTS\":\n          activeName = \"RegistrationTestAttachment\";\n          break;\n\n        case \"IDS_TESTCOMMENTS\":\n          activeName = \"RegistrationTestComment\";\n          dataStateName = \"testCommentDataState\";\n          break;\n\n        case \"IDS_DOCUMENTS\":\n          activeName = \"\";\n          dataStateName = \"documentDataState\";\n          break;\n\n        case \"IDS_RESULTCHANGEHISTORY\":\n          activeName = \"ResultChangeHistory\";\n          dataStateName = \"resultChangeDataState\";\n          break;\n\n        case \"IDS_SAMPLEATTACHMENTS\":\n          activeName = \"\";\n          dataStateName = \"resultDataState\";\n          break;\n\n        default:\n          activeName = \"TestParameters\";\n          dataStateName = \"resultDataState\";\n          break;\n      }\n\n      dispatch(initRequest(true));\n      rsapi.post(\"resultentrybysample/completeTest\", inputParamData).then(response => {\n        let RE_SAMPLE = [];\n        let RE_SUBSAMPLE = [];\n        let RE_TEST = [];\n        let responseData = response.data;\n\n        if (responseData[\"RE_TEST\"].length > 0) {\n          if (inputData.masterData.nneedsubsample) RE_TEST = filterRecordBasedOnTwoArrays(inputData.masterData[\"RE_TEST\"], responseData[\"RE_TEST\"], \"ntransactionsamplecode\");else RE_TEST = filterRecordBasedOnTwoArrays(inputData.masterData[\"RE_TEST\"], responseData[\"RE_TEST\"], \"npreregno\");\n        } else {\n          RE_TEST = inputData.masterData[\"RE_TEST\"];\n        }\n\n        RE_SUBSAMPLE = filterRecordBasedOnTwoArrays(inputData.masterData[\"RE_SUBSAMPLE\"], RE_TEST, \"ntransactionsamplecode\");\n\n        if (RE_SUBSAMPLE.length > 0) {\n          RE_SAMPLE = inputData.masterData[\"RE_SAMPLE\"];\n        } else {\n          RE_SAMPLE = filterRecordBasedOnTwoArrays(inputData.masterData[\"RE_SAMPLE\"], RE_TEST, \"npreregno\");\n        }\n\n        const RESelectedSample = filterRecordBasedOnTwoArrays(inputData.masterData[\"RESelectedSample\"], RE_TEST, \"npreregno\");\n        const RESelectedSubSample = filterRecordBasedOnTwoArrays(inputData.masterData[\"RESelectedSubSample\"], RE_TEST, \"ntransactionsamplecode\");\n        let RESelectedTest1 = filterRecordBasedOnTwoArrays(inputData.masterData[\"RESelectedTest\"], acceptList, \"ntransactiontestcode\");\n        let RESelectedTest2 = updatedObjectWithNewElement(RESelectedTest1, responseData.RESelectedTest);\n        let searchedSample = undefined;\n\n        if (inputData.masterData[\"searchedSample\"]) {\n          searchedSample = filterRecordBasedOnTwoArrays(inputData.masterData[\"searchedSample\"], RE_TEST, \"npreregno\");\n        }\n\n        let masterData = { ...inputData.masterData,\n          ...responseData,\n          RE_SAMPLE,\n          RE_SUBSAMPLE,\n          RESelectedSubSample,\n          searchedSample,\n          RESelectedSample,\n          RESelectedTest: RESelectedTest2,\n          RE_TEST: responseData[\"RE_TEST\"]\n        };\n        let skipInfo = {};\n\n        if (masterData.RE_SAMPLE && masterData.RE_SAMPLE.length <= inputParam.skip) {\n          skipInfo = { ...skipInfo,\n            skip: 0,\n            take: inputParam.take\n          };\n        }\n\n        if (masterData.RE_TEST && masterData.RE_TEST.length <= inputParam.testskip) {\n          skipInfo = { ...skipInfo,\n            testskip: 0,\n            testtake: inputParam.testtake\n          };\n        }\n\n        if (inputData[dataStateName] && masterData[activeName].length <= inputData[dataStateName].skip) {\n          skipInfo = { ...skipInfo,\n            [dataStateName]: { ...inputData[dataStateName],\n              skip: 0,\n              sort: undefined,\n              filter: undefined\n            }\n          };\n        } else {\n          skipInfo = { ...skipInfo,\n            [dataStateName]: { ...inputData[dataStateName],\n              sort: undefined,\n              filter: undefined\n            }\n          };\n        }\n\n        let respObject = { ...inputParamData.inputData,\n          openModal: false,\n          loadEsign: false,\n          showConfirmAlert: false,\n          selectedRecord: undefined,\n          loading: false,\n          screenName: inputData.activeTestKey,\n          ...skipInfo\n        };\n\n        if (searchedSample && RESelectedSample.length === 0 && searchedSample.length > 0) {\n          const paramList = inputParam.postParamList[0];\n          const inputParameter = { ...paramList.fecthInputObject.fecthInputObject,\n            fetchUrl: paramList.fetchUrl,\n            [paramList.primaryKeyField]: String(searchedSample[0][paramList.primaryKeyField]),\n            ntype: 2,\n            nflag: 2\n          };\n          respObject = { ...respObject,\n            masterData: { ...masterData,\n              RESelectedSample: [searchedSample[0]]\n            }\n          };\n          dispatch(fetchSelectedData({ ...inputParameter,\n            checkBoxOperation: 3\n          }, respObject));\n        } else if (!searchedSample && RESelectedSample.length === 0 && RE_SAMPLE.length > 0) {\n          const paramList = inputParam.postParamList[0];\n          const inputParameter = { ...paramList.fecthInputObject.fecthInputObject,\n            fetchUrl: paramList.fetchUrl,\n            [paramList.primaryKeyField]: String(RE_SAMPLE[0][paramList.primaryKeyField]),\n            ntype: 2,\n            nflag: 2\n          };\n          respObject = { ...respObject,\n            masterData: { ...masterData,\n              RESelectedSample: [RE_SAMPLE[0]]\n            }\n          };\n          dispatch(fetchSelectedData({ ...inputParameter,\n            checkBoxOperation: 3\n          }, respObject));\n        } else {\n          respObject = { ...respObject,\n            masterData\n          };\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: { ...respObject,\n              loading: false\n            }\n          });\n        }\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(error.response.data);\n        }\n      });\n    };\n  } else {\n    toast.warn(intl.formatMessage({\n      id: \"IDS_SELECTTESTTOCOMPLETE\"\n    }));\n  }\n} //Compare two array and return the first array which is available in second array\n\nexport function compareTwoArray(firstArray, secondArray, PrimaryKey) {\n  const filterArray = firstArray.filter(function (x) {\n    return secondArray.some(function (y) {\n      return x[PrimaryKey] === y[PrimaryKey];\n    });\n  });\n  return filterArray;\n}\n\nfunction fetchSelectedData(inputParam, respObject) {\n  return dispatch => {\n    rsapi.post(inputParam.fetchUrl, { ...inputParam\n    }).then(response => {\n      const masterData = { ...respObject.masterData,\n        ...response.data,\n        RESelectedSample: response.data.RESelectedSample || respObject.masterData.RESelectedSample || []\n      }; //sortData(masterData);\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: { ...respObject,\n          masterData,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\n\nexport function testMethodSourceEdit(inputData) {\n  return function (dispatch) {\n    let inputParamData = {\n      ntransactiontestcode: inputData.test.ntransactiontestcode,\n      ntestgrouptestcode: inputData.test.ntestgrouptestcode,\n      ntestcode: inputData.test.ntestcode,\n      ncontrolcode: inputData.editSourceMethodId,\n      userinfo: inputData.userInfo\n    };\n    dispatch(initRequest(true));\n    rsapi.post(\"resultentrybysample/getTestMethodSource\", inputParamData).then(response => {\n      const TagSource = constructOptionList(response.data.SourceData || [], \"nsourcecode\", \"ssourcename\", undefined, undefined, undefined);\n      const TagListSource = TagSource.get(\"OptionList\");\n      const TagMethod = constructOptionList(response.data.MethodData || [], \"nmethodcode\", \"smethodname\", undefined, undefined, undefined);\n      const TagListMethod = TagMethod.get(\"OptionList\");\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputData.masterData,\n            SourceData: TagListSource,\n            MethodData: TagListMethod,\n            RESelectedSubSample: inputData.masterData.RESelectedSubSample\n          },\n          selectedRecord: {\n            ntransactiontestcode: inputData.test.ntransactiontestcode,\n            stestsynonym: inputData.test.stestsynonym,\n            nsourcecode: response.data.SourceDataValue,\n            nmethodcode: response.data.MethodDataValue\n          },\n          loading: false,\n          screenName: \"IDS_TESTMETHODSOURCE\",\n          openModal: true,\n          operation: \"update\",\n          ncontrolcode: inputData.editSourceMethodId\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function updateParameterComments(inputData, masterData) {\n  return function (dispatch) {\n    let inputParamData = {\n      ntransactiontestcode: inputData.ntransactiontestcode,\n      ntransactionresultcode: inputData.ntransactionresultcode,\n      sresultcomment: inputData.sresultcomment,\n      transactiontestcode: inputData.transactiontestcode,\n      userinfo: inputData.userinfo,\n      nregtypecode: inputData.nregtypecode,\n      nregsubtypecode: inputData.nregsubtypecode,\n      ncontrolcode: inputData.ncontrolcode\n    };\n    dispatch(initRequest(true));\n    rsapi.post(\"resultentrybysample/updateParameterComments\", inputParamData).then(response => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...masterData,\n            ...response.data\n          },\n          loading: false,\n          loadEsign: false,\n          screenName: \"IDS_RESULT\",\n          openModal: false,\n          operation: \"update\",\n          ncontrolcode: inputData.ncontrolcode //ncontrolcode:inputData.editSourceMethodId\n\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function addREInstrument(inputData) {\n  return function (dispatch) {\n    let urlArray = [];\n    const resultusedinstrument = rsapi.post(\"resultentrybysample/getResultUsedInstrumentCombo\", {\n      userinfo: inputData.userInfo\n    });\n    const timeZoneService = rsapi.post(\"timezone/getTimeZone\");\n    const UTCtimeZoneService = rsapi.post(\"timezone/getLocalTimeByZone\", {\n      userinfo: inputData.userInfo\n    });\n    urlArray = [resultusedinstrument, timeZoneService, UTCtimeZoneService];\n    dispatch(initRequest(true));\n    Axios.all(urlArray).then(response => {\n      const TagInstrument = constructOptionList(response[0].data.Instrument || [], \"ninstrumentcode\", \"sinstrumentid\", undefined, undefined, undefined);\n      const TagListInstrument = TagInstrument.get(\"OptionList\");\n      const TagInsturmentcategory = constructOptionList(response[0].data.InstrumentCategory || [], \"ninstrumentcatcode\", \"sinstrumentcatname\", undefined, undefined, undefined);\n      const TagListInstrumentCategory = TagInsturmentcategory.get(\"OptionList\");\n      const TagTimeZone = constructOptionList(response[1].data || [], \"ntimezonecode\", \"stimezoneid\", undefined, undefined, undefined);\n      const TagListTimeZone = TagTimeZone.get(\"OptionList\");\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputData.masterData,\n            Instrument: TagListInstrument,\n            InstrumentCategory: TagListInstrumentCategory\n          },\n          selectedId: null,\n          selectedRecord: {\n            stestsynonym: inputData.test.stestsynonym,\n            transactiontestcode: inputData.RESelectedTest ? inputData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\").toString() : \"\",\n            ntransactiontestcode: inputData.test.ntransactiontestcode,\n            ninstrumentcatcode: TagInsturmentcategory.get(\"DefaultValue\") ? TagInsturmentcategory.get(\"DefaultValue\") : [],\n            ninstrumentcode: TagInstrument.get(\"DefaultValue\") ? TagInstrument.get(\"DefaultValue\") : [],\n            npreregno: inputData.test.npreregno,\n            //dtodate: new Date(response[2].data),//new Date(),\n            dtodate: rearrangeDateFormat(inputData.userInfo, response[2].data),\n            //new Date(),\n            //dfromdate: new Date(response[2].data),//new Date(),\n            dfromdate: rearrangeDateFormat(inputData.userInfo, response[2].data),\n            //new Date(),\n            ntzfromdate: {\n              \"value\": inputData.userInfo.ntimezonecode,\n              \"label\": inputData.userInfo.stimezoneid\n            },\n            ntztodate: {\n              \"value\": inputData.userInfo.ntimezonecode,\n              \"label\": inputData.userInfo.stimezoneid\n            }\n          },\n          timeZoneList: TagListTimeZone || [],\n          loading: false,\n          screenName: \"IDS_INSTRUMENT\",\n          openModal: true,\n          operation: \"create\",\n          //activeTestKey: \"IDS_INSTRUMENT\",\n          ncontrolcode: inputData.addResultUsedInstrumentId\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function deleteInstrumentRecord(inputData) {\n  return function (dispatch) {\n    let inputParamData = {\n      nresultusedinstrumentcode: inputData.selectedRecord.nresultusedinstrumentcode,\n      userinfo: inputData.userInfo,\n      ntransactiontestcode: inputData.masterData.RESelectedTest ? inputData.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\").toString() : \"\",\n      nregtypecode: inputData.masterData.defaultRegistrationType.nregtypecode,\n      nregsubtypecode: inputData.masterData.defaultRegistrationSubType.nregsubtypecode\n    };\n    dispatch(initRequest(true));\n    rsapi.post(\"resultentrybysample/deleteResultUsedInstrument\", inputParamData).then(response => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputData.masterData,\n            ...response.data\n          },\n          loading: false,\n          operation: \"delete\",\n          openModal: false,\n          loadEsign: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function fetchInstrumentRecord(inputData) {\n  return function (dispatch) {\n    let urlArray = []; //const resultUsedInstrumentCombo = rsapi.post(\"resultentrybysample/getResultUsedInstrumentCombo\", { userinfo: inputData.userInfo });\n\n    const timeZoneService = rsapi.post(\"resultentrybysample/getResultUsedInstrument\", {\n      nresultusedinstrumentcode: inputData.editRow.nresultusedinstrumentcode,\n      userinfo: inputData.userInfo\n    });\n    const getResultUsedInstrument = rsapi.post(\"timezone/getTimeZone\");\n    urlArray = [timeZoneService, getResultUsedInstrument];\n    dispatch(initRequest(true));\n    Axios.all(urlArray).then(response => {\n      const TagInstrument = constructOptionList(response[0].data.Instrument || [], \"ninstrumentcode\", \"sinstrumentid\", undefined, undefined, undefined);\n      const TagListInstrument = TagInstrument.get(\"OptionList\");\n      const TagInsturmentcategory = constructOptionList(response[0].data.InstrumentCategory || [], \"ninstrumentcatcode\", \"sinstrumentcatname\", undefined, undefined, undefined);\n      const TagListInstrumentCategory = TagInsturmentcategory.get(\"OptionList\");\n      const TagTimeZone = constructOptionList(response[1].data || [], \"ntimezonecode\", \"stimezoneid\", undefined, undefined, undefined);\n      const TagListTimeZone = TagTimeZone.get(\"OptionList\");\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputData.masterData,\n            Instrument: TagListInstrument,\n            InstrumentCategory: TagListInstrumentCategory,\n            // ...response[0].data,\n            ...response[1].data //...response[2].data\n\n          },\n          selectedId: inputData.editRow.nresultusedinstrumentcode,\n          selectedRecord: {\n            stestsynonym: inputData.editRow.stestsynonym,\n            npreregno: response[0].data.EditResultUsedInstrument[0].npreregno,\n            ntransactiontestcode: inputData.editRow.ntransactiontestcode,\n            nresultusedinstrumentcode: inputData.editRow.nresultusedinstrumentcode,\n            ninstrumentcatcode: {\n              \"value\": response[0].data.EditResultUsedInstrument[0].ninstrumentcatcode,\n              \"label\": response[0].data.EditResultUsedInstrument[0].sinstrumentcatname\n            },\n            ninstrumentcode: {\n              \"value\": response[0].data.EditResultUsedInstrument[0].ninstrumentcode,\n              \"label\": response[0].data.EditResultUsedInstrument[0].sinstrumentid\n            },\n            ntzfromdate: {\n              \"value\": response[0].data.EditResultUsedInstrument[0].ntzfromdate,\n              \"label\": response[0].data.EditResultUsedInstrument[0].stzfromdate\n            },\n            ntztodate: {\n              \"value\": response[0].data.EditResultUsedInstrument[0].ntztodate,\n              \"label\": response[0].data.EditResultUsedInstrument[0].stztodate\n            },\n            //dfromdate: new Date(response[0].data.EditResultUsedInstrument[0].sfromdate),\n            //dtodate: new Date(response[0].data.EditResultUsedInstrument[0].stodate)\n            dfromdate: rearrangeDateFormat(inputData.userInfo, response[0].data.EditResultUsedInstrument[0].sfromdate),\n            dtodate: rearrangeDateFormat(inputData.userInfo, response[0].data.EditResultUsedInstrument[0].stodate)\n          },\n          timeZoneList: TagListTimeZone || [],\n          ncontrolcode: inputData.ncontrolCode,\n          loading: false,\n          screenName: \"IDS_INSTRUMENT\",\n          openModal: true,\n          operation: \"update\"\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function deleteTaskRecord(inputData, userInfo) {\n  return function (dispatch) {\n    let inputParamData = {\n      nresultusedtaskcode: inputData.selectedRecord.nresultusedtaskcode,\n      userinfo: inputData.userInfo,\n      ntransactiontestcode: inputData.masterData.RESelectedTest ? inputData.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\").toString() : \"\",\n      nregtypecode: inputData.masterData.defaultRegistrationType.nregtypecode,\n      nregsubtypecode: inputData.masterData.defaultRegistrationSubType.nregsubtypecode\n    };\n    dispatch(initRequest(true));\n    rsapi.post(\"resultentrybysample/deleteResultUsedTasks\", inputParamData).then(response => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputData.masterData,\n            ...response.data\n          },\n          loading: false,\n          operation: \"delete\",\n          openModal: false,\n          loadEsign: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function fetchTaskRecord(inputData) {\n  return function (dispatch) {\n    let inputParamData = {\n      nresultusedtaskcode: inputData.editRow.nresultusedtaskcode,\n      userinfo: inputData.userInfo\n    };\n    dispatch(initRequest(true));\n    rsapi.post(\"resultentrybysample/getResultUsedTask\", inputParamData).then(response => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputData.masterData,\n            ...response.data\n          },\n          selectedId: response.data.EditResultUsedTasks[0].nresultusedtaskcode,\n          selectedRecord: {\n            npreregno: response.data.EditResultUsedTasks[0].npreregno,\n            stestsynonym: inputData.editRow.stestsynonym,\n            sanalysistime: response.data.EditResultUsedTasks[0].sanalysistime,\n            smisctime: response.data.EditResultUsedTasks[0].smisctime,\n            spreanalysistime: response.data.EditResultUsedTasks[0].spreanalysistime,\n            spreparationtime: response.data.EditResultUsedTasks[0].spreparationtime,\n            scomments: response.data.EditResultUsedTasks[0].scomments,\n            nresultusedtaskcode: response.data.EditResultUsedTasks[0].nresultusedtaskcode\n          },\n          loading: false,\n          screenName: \"IDS_TASK\",\n          openModal: true,\n          operation: \"update\",\n          ncontrolcode: inputData.ncontrolcode\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function parameterRecord(inputData) {\n  return function (dispatch) {\n    let inputParamData = {\n      ntransactionresultcode: inputData.selectedRecord.ntransactionresultcode,\n      ntransactiontestcode: inputData.masterData.RESelectedTest ? inputData.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\") : \"\",\n      ncontrolcode: inputData.controlcode,\n      userinfo: inputData.userInfo\n    };\n    dispatch(initRequest(true));\n    rsapi.post(\"resultentrybysample/getParameterComments\", inputParamData).then(response => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputData.masterData\n          },\n          selectedId: response.data.ParameterComments.ntransactionresultcode,\n          selectedRecord: {\n            sresultcomment: response.data.ParameterComments.sresultcomment,\n            stestsynonym: inputData.selectedRecord.stestsynonym,\n            sparametersynonym: inputData.selectedRecord.sparametersynonym,\n            transactiontestcode: response.data.ParameterComments.ntransactiontestcode,\n            ntransactionresultcode: response.data.ParameterComments.ntransactionresultcode,\n            ntransactiontestcode: inputData.masterData.RESelectedTest ? inputData.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\") : \"\",\n            ncontrolcode: inputData.controlcode\n          },\n          loading: false,\n          screenName: \"IDS_PARAMETERCOMMENTS\",\n          openModal: true,\n          operation: \"updateParameterComments\",\n          ncontrolcode: inputData.controlcode\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function checkListRecord(inputData) {\n  return function (dispatch) {\n    let inputParamData = {\n      ntransactionresultcode: inputData.selectedRecord.ntransactionresultcode,\n      napprovalparametercode: inputData.selectedRecord.napprovalparametercode,\n      nchecklistversioncode: inputData.selectedRecord.nchecklistversioncode,\n      ntransactiontestcode: inputData.selectedRecord.ntransactiontestcode.toString(),\n      ncontrolcode: inputData.ncontrolcode,\n      userinfo: inputData.userInfo\n    };\n    dispatch(initRequest(true));\n    rsapi.post(\"resultentrybysample/getChecklistdesign\", inputParamData).then(response => {\n      let selectedRecord = {};\n      let lsteditedQB = [];\n      selectedRecord = {\n        npreregno: inputData.selectedRecord.npreregno,\n        stestsynonym: inputData.selectedRecord.stestsynonym,\n        sparametersynonym: inputData.selectedRecord.sparametersynonym,\n        ntransactiontestcode: inputData.selectedRecord.ntransactiontestcode,\n        ntransactionresultcode: inputData.selectedRecord.ntransactionresultcode,\n        transactiontestcode: inputData.masterData.RESelectedTest ? inputData.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\") : \"\"\n      };\n      response.data.ChecklistData.map(checklist => {\n        selectedRecord[checklist.nchecklistversionqbcode] = {\n          nchecklistqbcode: checklist.nchecklistqbcode,\n          nchecklistversioncode: checklist.nchecklistversioncode,\n          nchecklistversionqbcode: checklist.nchecklistversionqbcode,\n          sdefaultvalue: checklist.sdefaultvalue\n        };\n        lsteditedQB.push(checklist.nchecklistversionqbcode);\n        return null;\n      });\n      selectedRecord[\"editedQB\"] = lsteditedQB;\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputData.masterData,\n            ...response.data\n          },\n          selectedId: response.data.selectedId,\n          selectedRecord: selectedRecord,\n          loading: false,\n          screenName: \"IDS_CHECKLISTRESULT\",\n          openTemplateModal: true,\n          needSaveButton: inputData.needSaveButton,\n          operation: \"create\",\n          ncontrolCode: inputData.ncontrolcode\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function onSaveCheckList(selectedRecord, userInfo, nregtypecode, nregsubtypecode) {\n  return function (dispatch) {\n    let listResultCheckList = [];\n\n    if (selectedRecord && selectedRecord.editedQB) {\n      selectedRecord.editedQB.map(qbcode => listResultCheckList.push(selectedRecord[qbcode]));\n      let inputParamData = {\n        ntransactionresultcode: selectedRecord.ntransactionresultcode,\n        ntransactiontestcode: selectedRecord.ntransactiontestcode.toString(),\n        transactiontestcode: selectedRecord.transactiontestcode,\n        npreregno: selectedRecord.npreregno,\n        ResultCheckList: listResultCheckList,\n        userinfo: userInfo,\n        nregtypecode: nregtypecode,\n        nregsubtypecode: nregsubtypecode,\n        ncontrolcode: -1\n      };\n      dispatch(initRequest(true));\n      rsapi.post(\"resultentrybysample/createResultEntryChecklist\", inputParamData).then(response => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            selectedRecord: {},\n            templateData: undefined,\n            openTemplateModal: false,\n            openModal: false,\n            loading: false,\n            loadEsign: false\n          }\n        });\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false,\n            loadEsign: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(error.response.data);\n        }\n      });\n    } else {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          openTemplateModal: false,\n          selectedRecord: {},\n          loading: false,\n          loadEsign: false\n        }\n      });\n    }\n  };\n}\nexport function defaultTest(inputData, RESelectedTest, RESelectedSample, nregtypecode, nregsubtypecode) {\n  if (RESelectedTest !== undefined && RESelectedTest.length > 0) {\n    return function (dispatch) {\n      let inputParamData = {\n        userinfo: inputData.userinfo,\n        ntransactiontestcode: RESelectedTest ? RESelectedTest.map(test => test.ntransactiontestcode).join(\",\") : \"\",\n        ntestgrouptestcode: RESelectedTest ? RESelectedTest.map(test => test.ntestgrouptestcode).join(\",\") : \"\",\n        npreregno: RESelectedTest ? RESelectedTest.map(preregno => preregno.npreregno).join(\",\") : \"\",\n        //RESelectedSample ? RESelectedSample.map(preregno => preregno.npreregno).join(\",\") : \"\",\n        nregtypecode: nregtypecode,\n        nregsubtypecode: nregsubtypecode,\n        ncontrolcode: inputData.ncontrolcode\n      };\n      dispatch(initRequest(true));\n      rsapi.post(\"resultentrybysample/updateDefaultValue\", inputParamData).then(response => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            masterData: { ...inputData.masterData,\n              ...response.data,\n              TestParameters: replaceUpdatedObject(response.data.TestParameters, inputData.masterData.TestParameters, 'ntransactionresultcode'),\n              RESelectedSubSample: inputData.masterData.RESelectedSubSample\n            },\n            loading: false,\n            activeTestKey: \"IDS_RESULTS\",\n            openModal: false,\n            loadEsign: false\n          }\n        });\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false,\n            openModal: false,\n            loadEsign: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(error.response.data);\n        }\n      });\n    };\n  } else {\n    toast.warn(intl.formatMessage({\n      id: \"IDS_SELECTTESTTOCOMPLETE\"\n    }));\n  }\n}\nexport function getFormula(parameterData, userInfo, masterData, index, selectedRecord) {\n  return function (dispatch) {\n    let inputParamData = {\n      ntransactiontestcode: parameterData.ntransactiontestcode,\n      nformulacode: parameterData.ntestgrouptestformulacode,\n      userinfo: userInfo\n    };\n    dispatch(initRequest(true));\n    rsapi.post(\"resultentrybysample/getFormulaInputs\", inputParamData).then(response => {\n      const validateFormulaMandyFields = response.data.DynamicFormulaFields.map((item, index) => {\n        return {\n          \"idsName\": \"IDS_FILLALLFIELDS\",\n          \"dataField\": index,\n          \"mandatory\": true\n        };\n      });\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...masterData,\n            ...response.data\n          },\n          selectedRecord: { ...selectedRecord,\n            parameterData: parameterData,\n            sformulacalculationdetail: response.data.query,\n            formulainput: response.data.Formula,\n            resultindex: index,\n            selectedForumulaInput: []\n          },\n          validateFormulaMandyFields,\n          loading: false,\n          screenName: \"IDS_RESULTFORMULA\",\n          showFormula: true,\n          operation: \"validate\",\n          showValidate: true\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function calculateFormula(inputDataValue) {\n  return function (dispatch) {\n    const inputData = {\n      ntransactiontestcode: inputDataValue.selectedRecord.parameterData.ntransactiontestcode,\n      ntransactionresultcode: inputDataValue.selectedRecord.parameterData.ntransactionresultcode,\n      npreregno: inputDataValue.selectedRecord.parameterData.npreregno,\n      sformulacalculationcode: inputDataValue.selectedRecord.sformulacalculationdetail,\n      nformulacode: inputDataValue.selectedRecord.parameterData.ntestgrouptestformulacode,\n      userinfo: inputDataValue.userInfo,\n      dynamicformulafields: inputDataValue.lstDynamicFields\n    };\n    dispatch(initRequest(true));\n    rsapi.post(\"testmaster/calculateFormula\", inputData).then(response => {\n      // inputDataValue.selectedResultData[inputDataValue.selectedRecord.resultindex] =\n      // {\n      //     ntransactionresultcode: inputDataValue.selectedRecord.parameterData.ntransactionresultcode,\n      //     ntransactiontestcode: inputDataValue.selectedRecord.parameterData.ntransactiontestcode,\n      //     nparametertypecode: inputDataValue.selectedRecord.parameterData.nparametertypecode,\n      //     sresult: response.data.Result,\n      //     nroundingdigit: inputDataValue.selectedRecord.parameterData.nroundingdigits,\n      //     value: inputDataValue.selectedRecord.parameterData.ngradecode,\n      //     parameter: inputDataValue.selectedRecord.parameterData\n      // }\n      inputDataValue.ResultParameter[inputDataValue.selectedRecord.resultindex][\"sfinal\"] = response.data.Result;\n      inputDataValue.ResultParameter[inputDataValue.selectedRecord.resultindex][\"sresult\"] = response.data.Result;\n      inputDataValue.ResultParameter[inputDataValue.selectedRecord.resultindex]['editable'] = true;\n      inputDataValue.ResultParameter[inputDataValue.selectedRecord.resultindex][\"ncalculatedresult\"] = 3;\n      inputDataValue.selectedResultGrade[inputDataValue.selectedRecord.resultindex] = {\n        ngradecode: numericGrade(inputDataValue.selectedRecord.parameterData, parseInt(response.data.Result))\n      };\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputDataValue.masterData //selectedResultData: inputDataValue.selectedResultData,\n            //selectedResultGrade: inputDataValue.selectedResultGrade,\n            //ResultParameter: inputDataValue.ResultParameter\n\n          },\n          selectedRecord: {\n            selectedResultGrade: inputDataValue.selectedResultGrade,\n            ResultParameter: inputDataValue.ResultParameter\n          },\n          loading: false,\n          screenName: \"IDS_RESULTENTRY\",\n          showFormula: false,\n          operation: \"update\",\n          showValidate: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        //toast.warn(error.response.data);\n        toast.warn(error.response.data[\"Result\"]);\n      }\n    });\n  };\n}\nexport function getREFilterTestData(inputData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"resultentrybysample/getTestBasedOnCombo\", inputData).then(response => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputData.masterData,\n            ...response.data,\n            defaultFilterStatus: inputData.defaultFilterStatus\n          },\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function updateTestMethodSource(inputData, masterData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"resultentrybysample/updateTestMethodSource\", inputData).then(response => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...masterData,\n            RE_TEST: replaceUpdatedObject(response.data.RE_TEST, masterData.RE_TEST, 'ntransactiontestcode')\n          },\n          loading: false,\n          openModal: false,\n          loadEsign: false // activeTestKey: \"IDS_RESULTS\"\n\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function resultImportFile(inputData, masterData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"resultentrybysample/getImportResultEntry\", inputData).then(response => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...masterData\n          },\n          loading: false,\n          openModal: false // activeTestKey: \"IDS_RESULTS\"\n\n        }\n      });\n\n      if (response.data.returnStatus && response.data.returnStatus !== \"\") {\n        toast.info(response.data.returnStatus);\n      } else {\n        toast.warn(response.data.returnStatus);\n      }\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function validateEsignCredentialComplete(inputParam) {\n  return dispatch => {\n    dispatch(initRequest(true));\n    return rsapi.post(\"login/validateEsignCredential\", inputParam.inputData).then(response => {\n      if (response.data === \"Success\") {\n        const methodUrl = \"performaction\";\n        inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][\"userinfo\"] = inputParam.inputData.userinfo;\n\n        if (inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()] && inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignpassword\"]) {\n          delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignpassword\"];\n          delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esigncomments\"];\n          delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"agree\"];\n        }\n\n        if (inputParam[\"screenData\"][\"inputParam\"][\"operation\"] === \"complete\") {\n          dispatch(completeTest(inputParam[\"screenData\"][\"inputParam\"], inputParam[\"screenData\"][\"inputParam\"][\"RESelectedTest\"], inputParam.inputData.userinfo));\n        } else if (inputParam[\"screenData\"][\"inputParam\"][\"operation\"] === \"default\") {\n          dispatch(defaultTest(inputParam[\"screenData\"][\"inputParam\"][\"testChildGetREParam\"], inputParam[\"screenData\"][\"inputParam\"][\"RESelectedTest\"], inputParam[\"screenData\"][\"inputParam\"][\"RESelectedSample\"], inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][\"nregtypecode\"], inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][\"nregsubtypecode\"]));\n        } else if (inputParam[\"screenData\"][\"inputParam\"][\"operation\"] === \"deleteInstrument\") {\n          dispatch(deleteInstrumentRecord(inputParam[\"screenData\"][\"inputParam\"][\"inputData\"]));\n        } else if (inputParam[\"screenData\"][\"inputParam\"][\"operation\"] === \"createMethod\") {\n          dispatch(updateTestMethodSource(inputParam[\"screenData\"][\"inputParam\"][\"inputData\"], inputParam[\"screenData\"][\"inputParam\"][\"masterData\"]));\n        } else if (inputParam[\"screenData\"][\"inputParam\"][\"operation\"] === \"deleteTask\") {\n          dispatch(deleteTaskRecord(inputParam[\"screenData\"][\"inputParam\"][\"inputData\"]));\n        } else if (inputParam[\"screenData\"][\"inputParam\"][\"operation\"] === \"updateParameterComments\") {\n          dispatch(updateParameterComments(inputParam[\"screenData\"][\"inputParam\"][\"inputData\"], inputParam[\"screenData\"][\"inputParam\"][\"masterData\"]));\n        } else if (inputParam[\"screenData\"][\"operation\"] === \"updatechecklist\") {\n          let {\n            selectedRecord,\n            userInfo,\n            nregtypecode,\n            nregsubtypecode\n          } = inputParam[\"screenData\"];\n          delete selectedRecord.esignpassword;\n          delete selectedRecord.esigncomments;\n          delete selectedRecord.agree;\n          delete inputParam.inputData.password;\n          userInfo = inputParam.inputData.userinfo;\n          dispatch(onSaveCheckList(selectedRecord, userInfo, nregtypecode, nregsubtypecode));\n        }\n      }\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getMeanCalculationTestParameter(meanParam) {\n  return dispatch => {\n    dispatch(initRequest(true));\n    const inputData = {\n      npreregno: meanParam.selectedRecord.npreregno,\n      ntransactionresultcode: meanParam.selectedRecord.ntransactionresultcode,\n      userinfo: meanParam.userInfo\n    };\n    return rsapi.post(\"resultentrybysample/getMeanCalculationTestParameter\", inputData).then(response => {\n      const list = response.data || []; // const optionList = [];\n      // list.map(item=>{\n      //     console.log(\"item:\", item);\n      //         optionList.push({item:item, \n      //                         label:\"[\"+item.stestsynonym+\"]-[\"+item.sparametersynonym+\"]-[\"+item.sresult+\"]\", \n      //                         value:item.ntransactionresultcode})\n      //     })\n      // const masterData = {...masterData, ResultParameter:meanParam.selectedRecord}\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false,\n          openModal: true,\n          meanTestParameterList: list,\n          screenName: \"IDS_MEANPARAMETER\",\n          ncontrolcode: meanParam.ncontrolCode,\n          selectedTestParameterMean: meanParam.selectedRecord\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}","map":{"version":3,"sources":["D:/Postgres_workingFolder/QuaLISWeb/src/actions/ResultEntryAction.js"],"names":["rsapi","DEFAULT_RETURN","toast","initRequest","intl","Axios","numericGrade","constructOptionList","fillRecordBasedOnCheckBoxSelection","filterRecordBasedOnTwoArrays","getRecordBasedOnPrimaryKeyName","getSameRecordFromTwoArrays","replaceUpdatedObject","sortData","updatedObjectWithNewElement","rearrangeDateFormat","transactionStatus","getsubSampleREDetail","inputData","isServiceRequired","dispatch","inputParamData","ntype","nflag","nsampletypecode","nregtypecode","nregsubtypecode","npreregno","ntranscode","String","ntransactionstatus","ntransactiontestcode","userinfo","ntestcode","napprovalversioncode","fromdate","todate","activeTestKey","activeSampleKey","nneedsubsample","masterData","activeName","dataStateName","post","checkBoxOperation","then","response","oldSelectedTest","RESelectedTest","data","childTabsKey","removeElementFromArray","RESelectedSubSample","RE_SUBSAMPLE","RE_TEST","length","RESelectedSample","searchSubSampleRef","undefined","current","value","searchTestRef","testskip","testtake","bool","skipInfo","TestParameters","ResultUsedInstrument","ResultUsedTasks","RegistrationTestAttachment","ResultChangeHistory","RegistrationTestComment","wholeTestList","map","b","test","index","includes","splice","keepOld","list","dbData","reduce","unique","item","skip","sort","filter","type","payload","loading","take","catch","error","status","message","warn","TestSelected","isGrandChildGetRequired","oldSelectedSubSample","subsampletake","subsampleskip","toString","filterSelectedSubSample","ntransactionsamplecode","subsample","join","getTestChildTabREDetail","getTestREDetail","subsamplecheck","SubSampleSelected","wholeSubSample","forEach","selectedTest","selectedSubSample1","x","showFilter","activeSampleTab","screenName","getSampleChildTabREDetail","url","responseData","getRERegistrationType","getRERegistrationSubType","defaultRegistrationType","getREApprovalConfigVersion","defaultRegistrationSubType","getREFilterStatus","defaultjobstatus","getREJobStatus","defaultApprovalConfigVersion","getResultEntryDetails","refs","searchSampleRef","realFromDate","realToDate","showTest","showSample","resultDataState","instrumentDataState","materialDataState","taskDataState","documentDataState","resultChangeDataState","testCommentDataState","historyDataState","samplePrintHistoryDataState","sampleHistoryDataState","resultGetModule","userInfo","ncontrolcode","TestList","acceptTestList","Object","values","selectedResultGrade","paremterResultcode","parameterResults","ResultParameter","param","ngradecode","ntransactionresultcode","PredefinedValues","predefinedvalue","ndefaultstatus","YES","get","sresult","spredefinedname","sfinal","editable","selectedRecord","openModal","operation","formatMessage","id","completeTest","inputParam","acceptList","completeResultId","testChildGetREParam","napprovalconfigcode","transactiontestcode","RE_SAMPLE","RESelectedTest1","RESelectedTest2","searchedSample","respObject","loadEsign","showConfirmAlert","paramList","postParamList","inputParameter","fecthInputObject","fetchUrl","primaryKeyField","fetchSelectedData","compareTwoArray","firstArray","secondArray","PrimaryKey","filterArray","some","y","testMethodSourceEdit","ntestgrouptestcode","editSourceMethodId","TagSource","SourceData","TagListSource","TagMethod","MethodData","TagListMethod","stestsynonym","nsourcecode","SourceDataValue","nmethodcode","MethodDataValue","updateParameterComments","sresultcomment","addREInstrument","urlArray","resultusedinstrument","timeZoneService","UTCtimeZoneService","all","TagInstrument","Instrument","TagListInstrument","TagInsturmentcategory","InstrumentCategory","TagListInstrumentCategory","TagTimeZone","TagListTimeZone","selectedId","ninstrumentcatcode","ninstrumentcode","dtodate","dfromdate","ntzfromdate","ntimezonecode","stimezoneid","ntztodate","timeZoneList","addResultUsedInstrumentId","deleteInstrumentRecord","nresultusedinstrumentcode","fetchInstrumentRecord","editRow","getResultUsedInstrument","EditResultUsedInstrument","sinstrumentcatname","sinstrumentid","stzfromdate","stztodate","sfromdate","stodate","ncontrolCode","deleteTaskRecord","nresultusedtaskcode","fetchTaskRecord","EditResultUsedTasks","sanalysistime","smisctime","spreanalysistime","spreparationtime","scomments","parameterRecord","controlcode","ParameterComments","sparametersynonym","checkListRecord","napprovalparametercode","nchecklistversioncode","lsteditedQB","ChecklistData","checklist","nchecklistversionqbcode","nchecklistqbcode","sdefaultvalue","push","openTemplateModal","needSaveButton","onSaveCheckList","listResultCheckList","editedQB","qbcode","ResultCheckList","templateData","defaultTest","preregno","getFormula","parameterData","nformulacode","ntestgrouptestformulacode","validateFormulaMandyFields","DynamicFormulaFields","sformulacalculationdetail","query","formulainput","Formula","resultindex","selectedForumulaInput","showFormula","showValidate","calculateFormula","inputDataValue","sformulacalculationcode","dynamicformulafields","lstDynamicFields","Result","parseInt","getREFilterTestData","defaultFilterStatus","updateTestMethodSource","resultImportFile","returnStatus","info","validateEsignCredentialComplete","methodUrl","toLowerCase","esignpassword","esigncomments","agree","password","getMeanCalculationTestParameter","meanParam","meanTestParameterList","selectedTestParameterMean"],"mappings":"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","sourcesContent":["import rsapi from '../rsapi';\r\nimport {\r\n    DEFAULT_RETURN\r\n} from './LoginTypes';\r\nimport {\r\n    toast\r\n} from 'react-toastify';\r\nimport {\r\n    initRequest\r\n} from './LoginAction';\r\nimport {\r\n    intl\r\n} from '../components/App';\r\nimport Axios from 'axios';\r\nimport {\r\n    numericGrade\r\n} from '../pages/ResultEntryBySample/ResultEntryValidation';\r\nimport {\r\n    constructOptionList,\r\n    fillRecordBasedOnCheckBoxSelection,\r\n    filterRecordBasedOnTwoArrays,\r\n    getRecordBasedOnPrimaryKeyName,\r\n    getSameRecordFromTwoArrays,\r\n    replaceUpdatedObject,\r\n    sortData,\r\n    updatedObjectWithNewElement, rearrangeDateFormat\r\n} from '../components/CommonScript';\r\nimport {\r\n    transactionStatus\r\n} from '../components/Enumeration';\r\n\r\nexport function getsubSampleREDetail(inputData, isServiceRequired) {\r\n    return function (dispatch) {\r\n        let inputParamData = {\r\n            ntype: 2,\r\n            nflag: inputData.nflag || 2,\r\n            nsampletypecode: inputData.nsampletypecode,\r\n            nregtypecode: inputData.nregtypecode,\r\n            nregsubtypecode: inputData.nregsubtypecode,\r\n            npreregno: inputData.npreregno,\r\n            ntranscode: String(inputData.ntransactionstatus),\r\n            ntransactiontestcode: 0,\r\n            userinfo: inputData.userinfo,\r\n            ntestcode: inputData.ntestcode,\r\n            napprovalversioncode: inputData.napprovalversioncode,\r\n            fromdate: inputData.fromdate,\r\n            todate: inputData.todate,\r\n            activeTestKey: inputData.activeTestKey,\r\n            activeSampleKey: inputData.activeSampleKey,\r\n            nneedsubsample: inputData.masterData.nneedsubsample\r\n        }\r\n        let activeName = \"\";\r\n        let dataStateName = \"\";\r\n        // let { resultDataState, materialDataState, instrumentDataState, taskDataState, resultChangeDataState,\r\n        //     documentDataState, testCommentDataState } = inputData\r\n        dispatch(initRequest(true));\r\n        if (isServiceRequired) {\r\n            rsapi.post(\"resultentrybysample/getResultEntryDetails\", { ...inputParamData, checkBoxOperation: inputData.checkBoxOperation})\r\n                .then(response => {\r\n                    // if (response.data.DynamicGetSamples) {\r\n                    //     sortData(response.data.DynamicGetSamples, \"\", \"\");\r\n                    // }\r\n                    // if (response.data.DynamicGetTests) {\r\n                    //     sortData(response.data.DynamicGetTests, \"descending\", \"npreregno\");\r\n                    // }\r\n                    //sortData(response.data);\r\n                    let oldSelectedTest = inputData.masterData.RESelectedTest\r\n                    fillRecordBasedOnCheckBoxSelection(inputData.masterData, response.data, inputData.childTabsKey, inputData.checkBoxOperation, \"npreregno\", inputData.removeElementFromArray);\r\n                    let RESelectedSubSample = inputData.checkBoxOperation === 3 ? response.data.RESelectedSubSample : inputData.masterData.RESelectedSubSample\r\n                    RESelectedSubSample = inputData.masterData.nneedsubsample ? RESelectedSubSample : inputData.masterData.RE_SUBSAMPLE;\r\n                    let masterData = {\r\n                        ...inputData.masterData,\r\n                        // ...response.data,\r\n                        RESelectedTest: inputData.masterData.RE_TEST.length > 0 ? [inputData.masterData.RE_TEST[0]] : [],\r\n                        RESelectedSample: inputData.RESelectedSample,\r\n                        RESelectedSubSample\r\n                    }\r\n                    // if (inputData.searchSampleRef !== undefined && inputData.searchSampleRef.current !== null) {\r\n                    //     inputData.searchSampleRef.current.value = \"\";\r\n                    //     masterData['searchedSample'] = undefined\r\n                    // }\r\n                    if (inputData.searchSubSampleRef !== undefined && inputData.searchSubSampleRef.current !== null) {\r\n                        inputData.searchSubSampleRef.current.value = \"\";\r\n                        masterData['searchedSubSample'] = undefined\r\n                    }\r\n                    if (inputData.searchTestRef !== undefined && inputData.searchTestRef.current !== null) {\r\n                        inputData.searchTestRef.current.value = \"\"\r\n                        masterData['searchedTests'] = undefined\r\n                    }\r\n                    let {\r\n                        testskip,\r\n                        testtake\r\n                    } = inputData\r\n                    let bool = false;\r\n                    let skipInfo = {}\r\n                    if (inputData.masterData.RE_TEST.length <= inputData.testskip) {\r\n                        testskip = 0;\r\n                        bool = true\r\n                    }\r\n                    if (bool) {\r\n                        skipInfo = {\r\n                            testskip,\r\n                            testtake\r\n                        }\r\n                    }\r\n                    let TestParameters = [];\r\n                    let ResultUsedInstrument = [];\r\n                    let ResultUsedTasks = [];\r\n                    let RegistrationTestAttachment = [];\r\n                    let ResultChangeHistory = [];\r\n                    let RegistrationTestComment = [];\r\n\r\n                    if (inputData.checkBoxOperation === 1) {\r\n                        //added by sudharshanan for test select issue while sample click\r\n                        let wholeTestList = masterData.RE_TEST.map(b => b.ntransactiontestcode)\r\n                        oldSelectedTest.map((test, index) => {\r\n                            if (!wholeTestList.includes(test.ntransactiontestcode)) {\r\n                                oldSelectedTest.splice(index, 1)\r\n                            }\r\n                            return null;\r\n                        })\r\n                        let keepOld = false;\r\n                        let ntransactiontestcode;\r\n                        if (oldSelectedTest.length > 0) {\r\n                            keepOld = true\r\n                            masterData = {\r\n                                ...masterData,\r\n                                RESelectedTest: oldSelectedTest\r\n                            }\r\n                        } else {\r\n                            ntransactiontestcode = masterData.RESelectedTest[0].ntransactiontestcode\r\n                        }\r\n                        switch (inputData.activeTestKey) {\r\n                            case \"IDS_RESULTS\":\r\n                                TestParameters = keepOld ? inputData.masterData.TestParameters : getRecordBasedOnPrimaryKeyName(inputData.masterData.TestParameters, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"TestParameters\"\r\n                                dataStateName = \"resultDataState\"\r\n                                break;\r\n                            case \"IDS_INSTRUMENT\":\r\n                                ResultUsedInstrument = keepOld ? inputData.masterData.ResultUsedInstrument : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedInstrument, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"ResultUsedInstrument\"\r\n                                dataStateName = \"instrumentDataState\"\r\n                                break;\r\n                            case \"IDS_TASK\":\r\n                                ResultUsedTasks = keepOld ? inputData.masterData.ResultUsedTasks : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedTasks, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"ResultUsedTasks\"\r\n                                dataStateName = \"taskDataState\"\r\n                                break;\r\n                            case \"IDS_TESTATTACHMENTS\":\r\n                                RegistrationTestAttachment = keepOld ? inputData.masterData.RegistrationTestAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestAttachment\"\r\n                                break;\r\n                            case \"IDS_RESULTCHANGEHISTORY\":\r\n                                ResultChangeHistory = keepOld ? inputData.masterData.ResultChangeHistory : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultChangeHistory, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"ResultChangeHistory\"\r\n                                dataStateName = \"resultChangeDataState\"\r\n                                break;\r\n                            case \"IDS_TESTCOMMENTS\":\r\n                                RegistrationTestComment = keepOld ? inputData.masterData.RegistrationTestComment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestComment\"\r\n                                dataStateName = \"testCommentDataState\"\r\n                                break;\r\n                            default:\r\n                                TestParameters = keepOld ? inputData.masterData.TestParameters : getRecordBasedOnPrimaryKeyName(inputData.masterData.TestParameters, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"TestParameters\"\r\n                                dataStateName = \"resultDataState\"\r\n                                break;\r\n                        }\r\n\r\n                    } else if (inputData.checkBoxOperation === 5) {\r\n                        let list = []\r\n                        let dbData = [];\r\n                        switch (inputData.activeTestKey) {\r\n                            case \"IDS_RESULTS\":\r\n                                dbData = response.data.TestParameters || []\r\n                                list = [...inputData.masterData.TestParameters, ...response.data.TestParameters];\r\n                                TestParameters = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                            case \"IDS_INSTRUMENT\":\r\n                                dbData = response.data.TestParameters || []\r\n                                list = [...inputData.masterData.ResultUsedInstrument, ...response.data.ResultUsedInstrument];\r\n                                ResultUsedInstrument = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                            case \"IDS_TASK\":\r\n                                dbData = response.data.ResultUsedTasks || []\r\n                                list = [...inputData.masterData.ResultUsedTasks, ...dbData];\r\n                                list.reduce((unique, item) => unique.includes(item) ? unique : [...unique, item], []);\r\n                                ResultUsedTasks = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                            case \"IDS_TESTATTACHMENTS\":\r\n                                dbData = response.data.RegistrationTestAttachment || []\r\n                                list = [...inputData.masterData.RegistrationTestAttachment, ...dbData];\r\n                                RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                            case \"IDS_RESULTCHANGEHISTORY\":\r\n                                dbData = response.data.ResultChangeHistory || []\r\n                                list = [...inputData.masterData.ResultChangeHistory, ...dbData];\r\n                                ResultChangeHistory = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                            case \"IDS_TESTCOMMENTS\":\r\n                                dbData = response.data.RegistrationTestComment || []\r\n                                list = [...inputData.masterData.RegistrationTestComment, ...dbData];\r\n                                RegistrationTestComment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                            default:\r\n                                dbData = response.data.TestParameters || []\r\n                                list = [...inputData.masterData.TestParameters, ...dbData];\r\n                                TestParameters = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                        }\r\n                    } else {\r\n                        let list = []\r\n                        switch (inputData.activeTestKey) {\r\n                            case \"IDS_RESULTS\":\r\n                                list = response.data.TestParameters ? sortData(response.data.TestParameters, 'ascending', 'ntransactionresultcode') : [];\r\n                                TestParameters = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"TestParameters\"\r\n                                dataStateName = \"resultDataState\"\r\n                                break;\r\n                            case \"IDS_INSTRUMENT\":\r\n                                list = response.data.ResultUsedInstrument ? sortData(response.data.ResultUsedInstrument, 'descending', 'nresultusedinstrumentcode') : [];\r\n                                ResultUsedInstrument = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"ResultUsedInstrument\"\r\n                                dataStateName = \"instrumentDataState\"\r\n                                break;\r\n                            case \"IDS_TASK\":\r\n                                list = response.data.ResultUsedTasks ? sortData(response.data.ResultUsedTasks, 'descending', 'nresultusedtaskcode') : [];\r\n                                list.reduce((unique, item) => unique.includes(item) ? unique : [...unique, item], []);\r\n                                ResultUsedTasks = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"ResultUsedTasks\"\r\n                                dataStateName = \"taskDataState\"\r\n                                break;\r\n                            case \"IDS_TESTATTACHMENTS\":\r\n                                list = response.data.RegistrationTestAttachment ? sortData(response.data.RegistrationTestAttachment, 'descending', 'ntestattachmentcode') : [];\r\n                                RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestAttachment\"\r\n                                break;\r\n                            case \"IDS_RESULTCHANGEHISTORY\":\r\n                                list = response.data.ResultChangeHistory ? sortData(response.data.ResultChangeHistory, 'descending', 'nresultchangehistorycode') : [];\r\n                                ResultChangeHistory = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"ResultChangeHistory\"\r\n                                dataStateName = \"resultChangeDataState\"\r\n                                break;\r\n                            case \"IDS_TESTCOMMENTS\":\r\n                                list = response.data.RegistrationTestComment ? sortData(response.data.RegistrationTestComment, 'descending', 'ntestcommentcode') : [];\r\n                                RegistrationTestComment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestComment\"\r\n                                dataStateName = \"testCommentDataState\"\r\n                                break;\r\n                            default:\r\n                                list = response.data.TestParameters ? sortData(response.data.TestParameters, 'ascending', 'ntransactionresultcode') : [];\r\n                                TestParameters = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"TestParameters\"\r\n                                dataStateName = \"resultDataState\"\r\n                                break;\r\n                        }\r\n                    }\r\n\r\n                    masterData = {\r\n                        ...masterData,\r\n                        // wholeApprovalParameter,\r\n                        TestParameters,\r\n                        // wholeResultUsedInstrument,\r\n                        ResultUsedInstrument,\r\n                        // wholeResultUsedTasks,\r\n                        ResultUsedTasks,\r\n                        // wholeRegistrationTestAttachment,\r\n                        RegistrationTestAttachment,\r\n                        // wholeResultChangeHistory,\r\n                        ResultChangeHistory,\r\n                        // wholeRegistrationTestComments,\r\n                        RegistrationTestComment\r\n                    }\r\n                    if (inputData[dataStateName] && masterData[activeName].length <= inputData[dataStateName].skip) {\r\n\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            [dataStateName]: {\r\n                                ...inputData[dataStateName],\r\n                                skip: 0,\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    } else {\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            [dataStateName]: {\r\n                                ...inputData[dataStateName],\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    }\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            masterData,\r\n                            loading: false,\r\n                            skip: undefined,\r\n                            take: undefined,\r\n                            ...skipInfo\r\n                        }\r\n                    })\r\n                })\r\n                .catch(error => {\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            loading: false\r\n                        }\r\n                    })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    } else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                });\r\n        } else {\r\n            let oldSelectedTest = inputData.masterData.RESelectedTest\r\n            let TestSelected = getRecordBasedOnPrimaryKeyName(inputData.masterData.RESelectedTest, inputData.removeElementFromArray[0].npreregno, \"npreregno\");\r\n            let isGrandChildGetRequired = false;\r\n            let oldSelectedSubSample = inputData.masterData.RESelectedSubSample\r\n            let { subsampletake, subsampleskip } = inputData;\r\n            let skipInfo = {};\r\n            if (TestSelected.length > 0) {\r\n                isGrandChildGetRequired = true;\r\n            } else {\r\n                isGrandChildGetRequired = false;\r\n            }\r\n            fillRecordBasedOnCheckBoxSelection(inputData.masterData, inputData.RESelectedSample, inputData.childTabsKey, inputData.checkBoxOperation, \"npreregno\", inputData.removeElementFromArray);\r\n            if (isGrandChildGetRequired) {\r\n                let ntransactiontestcode = inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode.toString() : \"\";\r\n                let RESelectedSample = inputData.RESelectedSample;\r\n                let RESelectedTest = inputData.masterData.RE_TEST.length > 0 ? [inputData.masterData.RE_TEST[0]] : [];\r\n                let RESelectedSubSample =  inputData.masterData.RE_SUBSAMPLE\r\n                \r\n                \r\n                if (inputData.masterData.nneedsubsample) {\r\n                    let filterSelectedSubSample = getSameRecordFromTwoArrays(oldSelectedSubSample, inputData.masterData.RE_SUBSAMPLE, \"ntransactionsamplecode\");\r\n                    RESelectedSubSample = filterSelectedSubSample.length > 0 ? filterSelectedSubSample : [inputData.masterData.RE_SUBSAMPLE[0]];\r\n                    if (inputData.masterData.RE_SUBSAMPLE.length <= inputData.subsampleskip) {\r\n                        subsampleskip = 0;\r\n                        skipInfo = { subsampletake, subsampleskip }\r\n                    }\r\n                }\r\n                let ntransactionsamplecode = RESelectedSubSample.map(subsample => subsample.ntransactionsamplecode).join(',');\r\n                inputData = {\r\n                    ...inputData,\r\n                    ntransactiontestcode,\r\n                    ntransactionsamplecode,\r\n                    RESelectedSample,\r\n                    RESelectedTest,\r\n                    RESelectedSubSample,\r\n                    checkBoxOperation: 3,\r\n                    activeTestKey: inputData.activeTestKey\r\n                }\r\n                if (RESelectedTest.length > 0) {\r\n                    inputData = {\r\n                        ...inputData, \r\n                        childTabsKey: [\"TestParameters\", \"ResultUsedInstrument\", \"ResultUsedTasks\", \"RegistrationTestAttachment\",\r\n                            \"ResultChangeHistory\", \"RegistrationTestComment\", \"ResultChangeHistory\"\r\n                        ]\r\n                    }\r\n                    dispatch(getTestChildTabREDetail(inputData, true));\r\n                } else {\r\n                    inputData = {\r\n                        ...inputData,\r\n                        childTabsKey: [\"RE_TEST\"]\r\n                    }\r\n                    dispatch(getTestREDetail(inputData, true));\r\n                }\r\n            } else {\r\n                //added by sudharshanan for test select issue while sample click\r\n                let masterData = {\r\n                    ...inputData.masterData,\r\n                    RESelectedTest: inputData.masterData.RE_TEST.length > 0 ? [inputData.masterData.RE_TEST[0]] : [],\r\n                    RESelectedSample: inputData.RESelectedSample,\r\n                    RESelectedSubSample: inputData.masterData.nneedsubsample && inputData.masterData.RE_SUBSAMPLE.length>0 ? inputData.masterData.RESelectedSubSample  : inputData.masterData.RE_SUBSAMPLE\r\n                }\r\n                let subsamplecheck = true;\r\n                if (inputData.masterData.nneedsubsample) {\r\n                    let SubSampleSelected = getRecordBasedOnPrimaryKeyName(inputData.masterData.RESelectedSubSample, inputData.removeElementFromArray[0].npreregno, \"npreregno\");\r\n                    if (SubSampleSelected.length > 0) {\r\n                        let filterSelectedSubSample = getSameRecordFromTwoArrays(oldSelectedSubSample, inputData.masterData.RE_SUBSAMPLE, \"ntransactionsamplecode\");\r\n                        if (filterSelectedSubSample.length === 0) {\r\n                            let wholeSubSample = masterData.RE_SUBSAMPLE.map(b => b.ntransactionsamplecode)\r\n                            oldSelectedSubSample.forEach((test, index) => {\r\n                                if (!wholeSubSample.includes(test.ntransactionsamplecode)) {\r\n                                    oldSelectedSubSample.splice(index, 1)\r\n                                }\r\n                                return null;\r\n                            })\r\n                            if (oldSelectedSubSample.length === 0 && wholeSubSample.length > 0\r\n                                && masterData.selectedTest.length === 0) {\r\n                                const selectedSubSample1 = [inputData.masterData.RE_SUBSAMPLE[0]];\r\n                                masterData = {\r\n                                    ...masterData,\r\n                                    RESelectedSubSample: selectedSubSample1,\r\n                                    selectedTest: []\r\n                                }\r\n                                inputData = { ...inputData, ...masterData }\r\n                                inputData[\"npreregno\"] = selectedSubSample1.map(x => x.npreregno).join(\",\")\r\n                                inputData[\"ntransactionsamplecode\"] = selectedSubSample1.map(x => x.ntransactionsamplecode).join(\",\")\r\n                                inputData[\"checkBoxOperation\"] = 3\r\n                                inputData[\"childTabsKey\"] = [\"RE_TEST\"]\r\n                                subsamplecheck = false;\r\n                                dispatch(getTestREDetail(inputData, true));\r\n\r\n                            }\r\n                        } else {\r\n                            oldSelectedSubSample = filterSelectedSubSample\r\n                        }\r\n\r\n                    } else {\r\n                        let wholeSubSample = masterData.RE_SUBSAMPLE.map(b => b.ntransactionsamplecode)\r\n                        oldSelectedSubSample.forEach((test, index) => {\r\n                            if (!wholeSubSample.includes(test.ntransactionsamplecode)) {\r\n                                oldSelectedSubSample.splice(index, 1)\r\n                            }\r\n                            return null;\r\n                        })\r\n                    }\r\n\r\n                    if (subsamplecheck) {\r\n                        masterData = {\r\n                            ...masterData,\r\n                            RESelectedSubSample: oldSelectedSubSample\r\n                        }\r\n                    }\r\n                    if (inputData.masterData.RE_SUBSAMPLE.length <= inputData.subsampleskip) {\r\n                        subsampleskip = 0;\r\n                        skipInfo = { subsampleskip, subsampletake }\r\n                    }\r\n                }\r\n                let wholeTestList = masterData.RE_TEST.map(b => b.ntransactiontestcode)\r\n                oldSelectedTest.map((test, index) => {\r\n                    if (!wholeTestList.includes(test.ntransactiontestcode)) {\r\n                        oldSelectedTest.splice(index, 1)\r\n                    }\r\n                    return null;\r\n                })\r\n                let keepOld = false;\r\n                let ntransactiontestcode;\r\n                if (oldSelectedTest.length > 0) {\r\n                    keepOld = true\r\n                    masterData = {\r\n                        ...masterData,\r\n                        RESelectedTest: oldSelectedTest\r\n                    }\r\n                } else {\r\n                    ntransactiontestcode = masterData.RE_TEST[0].ntransactiontestcode\r\n                }\r\n                const TestParameters = keepOld ? inputData.masterData.TestParameters : getRecordBasedOnPrimaryKeyName(inputData.masterData.TestParameters,\r\n                    ntransactiontestcode, \"ntransactiontestcode\");\r\n                const ResultUsedInstrument = keepOld ? inputData.masterData.ResultUsedInstrument : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedInstrument || [],\r\n                    ntransactiontestcode, \"ntransactiontestcode\");\r\n                const ResultUsedTasks = keepOld ? inputData.masterData.ResultUsedTasks : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedTasks || [],\r\n                    ntransactiontestcode, \"ntransactiontestcode\");\r\n                const RegistrationTestAttachment = keepOld ? inputData.masterData.RegistrationTestAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment || [],\r\n                    ntransactiontestcode, \"ntransactiontestcode\");\r\n                const RegistrationTestComment = keepOld ? inputData.masterData.RegistrationTestComment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment || [],\r\n                    ntransactiontestcode, \"ntransactiontestcode\");\r\n                const ResultChangeHistory = keepOld ? inputData.masterData.ResultChangeHistory : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultChangeHistory || [],\r\n                    ntransactiontestcode, \"ntransactiontestcode\");\r\n                let { testskip, testtake } = inputData\r\n                let bool = false;\r\n                let skipInfo = {}\r\n                if (inputData.masterData.RE_TEST.length <= inputData.testskip) {\r\n                    testskip = 0;\r\n                    bool = true\r\n                }\r\n                if (bool) {\r\n                    skipInfo = {\r\n                        testskip,\r\n                        testtake\r\n                    }\r\n                }\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...masterData,\r\n                            RESelectedSample: inputData.RESelectedSample,\r\n                            // selectedPreregno: inputData.npreregno,\r\n                            // RESelectedTest: inputData.masterData.searchedTest && inputData.masterData.searchedTest.length > 0 ? [inputData.masterData.\r\n                            //     searchedTest[0]\r\n                            // ] : inputData.masterData.RE_TEST.length > 0 ? [inputData.masterData.\r\n                            //     RE_TEST[0]\r\n                            // ] : [],\r\n                            // RESelectedTest: inputData.masterData.RE_TEST.length > 0 ? [inputData.masterData.RE_TEST[0]] : [],\r\n                            TestParameters,\r\n                            ResultUsedInstrument,\r\n                            ResultUsedTasks,\r\n                            RegistrationTestAttachment,\r\n                            RegistrationTestComment,\r\n                            ResultChangeHistory,\r\n                            // RESelectedSubSample: inputData.masterData.RE_SUBSAMPLE\r\n                        },\r\n                        loading: false,\r\n                        showFilter: false,\r\n                        activeSampleTab: inputData.activeSampleTab,\r\n                        activeTestKey: inputData.activeTestKey,\r\n                        ...skipInfo,\r\n                    }\r\n                })\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport function getTestREDetail(inputData, isServiceRequired) {\r\n    return function (dispatch) {\r\n        let activeName = \"\";\r\n        let dataStateName = \"\";\r\n        let inputParamData = {\r\n            nflag: 3,\r\n            ntype: 3,\r\n            nsampletypecode: inputData.nsampletypecode,\r\n            nregtypecode: inputData.nregtypecode,\r\n            nregsubtypecode: inputData.nregsubtypecode,\r\n            npreregno: inputData.npreregno,\r\n            ntransactiontestcode: 0,\r\n            ntranscode: inputData.ntransactionstatus.toString(),\r\n            ntransactionsamplecode: inputData.ntransactionsamplecode,\r\n            userinfo: inputData.userinfo,\r\n            ntestcode: inputData.ntestcode,\r\n            activeTestKey: inputData.activeTestKey\r\n        }\r\n        // dispatch(initRequest(true));\r\n        // rsapi.post(\"resultentrybysample/getResultEntrySubSampleDetails\", inputParamData)\r\n        if (isServiceRequired) {\r\n            dispatch(initRequest(true));\r\n            rsapi.post(\"resultentrybysample/getResultEntrySubSampleDetails\", inputParamData)\r\n                .then(response => {\r\n                    // let responseData = {\r\n                    //     ...response.data,\r\n                    //     RESelectedSample: inputData.RESelectedSample || inputData.masterData.RESelectedSample,\r\n                    //     RESelectedSubSample: inputData.RESelectedSubSample || inputData.masterData.RESelectedSubSample,\r\n                    //     // RESelectedTest: inputData.masterData.RESelectedTest\r\n                    // }\r\n                    let oldSelectedTest = inputData.masterData.RESelectedTest\r\n                    fillRecordBasedOnCheckBoxSelection(inputData.masterData, response.data, inputData.childTabsKey, inputData.checkBoxOperation, \"npreregno\", inputData.removeElementFromArray);\r\n                    let masterData = {\r\n                        ...inputData.masterData,\r\n                        // ...response.data,\r\n                        RESelectedTest: inputData.masterData.RE_TEST.length > 0 ? [inputData.masterData.RE_TEST[0]] : [],\r\n                        RESelectedSample: inputData.masterData.RESelectedSample,\r\n                        RESelectedSubSample: inputData.RESelectedSubSample || inputData.masterData.RESelectedSubSample,\r\n                    }\r\n                    if (inputData.searchTestRef !== undefined && inputData.searchTestRef.current !== null) {\r\n                        inputData.searchTestRef.current.value = \"\"\r\n                        masterData['searchedTests'] = undefined\r\n                    }\r\n                    let {\r\n                        testskip,\r\n                        testtake\r\n                    } = inputData\r\n                    let bool = false;\r\n                    let skipInfo = {}\r\n                    if (inputData.masterData.RE_TEST.length <= inputData.testskip) {\r\n                        testskip = 0;\r\n                        bool = true\r\n                    }\r\n                    if (bool) {\r\n                        skipInfo = {\r\n                            testskip,\r\n                            testtake\r\n                        }\r\n                    }\r\n                    let TestParameters = [];\r\n                    let ResultUsedInstrument = [];\r\n                    let ResultUsedTasks = [];\r\n                    let RegistrationTestAttachment = [];\r\n                    let ResultChangeHistory = [];\r\n                    let RegistrationTestComment = [];\r\n\r\n                    if (inputData.checkBoxOperation === 1) {\r\n                        //added by sudharshanan for test select issue while sample click\r\n                        let wholeTestList = masterData.RE_TEST.map(b => b.ntransactiontestcode)\r\n                        oldSelectedTest.map((test, index) => {\r\n                            if (!wholeTestList.includes(test.ntransactiontestcode)) {\r\n                                oldSelectedTest.splice(index, 1)\r\n                            }\r\n                            return null;\r\n                        })\r\n                        let keepOld = false;\r\n                        let ntransactiontestcode;\r\n                        if (oldSelectedTest.length > 0) {\r\n                            keepOld = true\r\n                            masterData = {\r\n                                ...masterData,\r\n                                RESelectedTest: oldSelectedTest\r\n                            }\r\n                        } else {\r\n                            ntransactiontestcode = masterData.RESelectedTest[0].ntransactiontestcode\r\n                        }\r\n                        switch (inputData.activeTestKey) {\r\n                            case \"IDS_RESULTS\":\r\n                                TestParameters = keepOld ? inputData.masterData.TestParameters : getRecordBasedOnPrimaryKeyName(inputData.masterData.TestParameters, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"TestParameters\"\r\n                                dataStateName = \"resultDataState\"\r\n                                break;\r\n                            case \"IDS_INSTRUMENT\":\r\n                                ResultUsedInstrument = keepOld ? inputData.masterData.ResultUsedInstrument : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedInstrument, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"ResultUsedInstrument\"\r\n                                dataStateName = \"instrumentDataState\"\r\n                                break;\r\n                            case \"IDS_TASK\":\r\n                                ResultUsedTasks = keepOld ? inputData.masterData.ResultUsedTasks : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedTasks, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"ResultUsedTasks\"\r\n                                dataStateName = \"taskDataState\"\r\n                                break;\r\n                            case \"IDS_TESTATTACHMENTS\":\r\n                                RegistrationTestAttachment = keepOld ? inputData.masterData.RegistrationTestAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestAttachment\"\r\n                                break;\r\n                            case \"IDS_RESULTCHANGEHISTORY\":\r\n                                ResultChangeHistory = keepOld ? inputData.masterData.ResultChangeHistory : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultChangeHistory, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"ResultChangeHistory\"\r\n                                dataStateName = \"resultChangeDataState\"\r\n                                break;\r\n                            case \"IDS_TESTCOMMENTS\":\r\n                                RegistrationTestComment = keepOld ? inputData.masterData.RegistrationTestComment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestComment\"\r\n                                dataStateName = \"testCommentDataState\"\r\n                                break;\r\n                            default:\r\n                                TestParameters = keepOld ? inputData.masterData.TestParameters : getRecordBasedOnPrimaryKeyName(inputData.masterData.TestParameters, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"TestParameters\"\r\n                                dataStateName = \"resultDataState\"\r\n                                break;\r\n                        }\r\n\r\n                    } else if (inputData.checkBoxOperation === 5) {\r\n                        let list = []\r\n                        let dbData = [];\r\n                        switch (inputData.activeTestKey) {\r\n                            case \"IDS_RESULTS\":\r\n                                dbData = response.data.TestParameters || []\r\n                                list = [...inputData.masterData.TestParameters, ...response.data.TestParameters];\r\n                                TestParameters = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                            case \"IDS_INSTRUMENT\":\r\n                                dbData = response.data.TestParameters || []\r\n                                list = [...inputData.masterData.ResultUsedInstrument, ...response.data.ResultUsedInstrument];\r\n                                ResultUsedInstrument = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                            case \"IDS_TASK\":\r\n                                dbData = response.data.ResultUsedTasks || []\r\n                                list = [...inputData.masterData.ResultUsedTasks, ...dbData];\r\n                                list.reduce((unique, item) => unique.includes(item) ? unique : [...unique, item], []);\r\n                                ResultUsedTasks = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                            case \"IDS_TESTATTACHMENTS\":\r\n                                dbData = response.data.RegistrationTestAttachment || []\r\n                                list = [...inputData.masterData.RegistrationTestAttachment, ...dbData];\r\n                                RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                            case \"IDS_RESULTCHANGEHISTORY\":\r\n                                dbData = response.data.ResultChangeHistory || []\r\n                                list = [...inputData.masterData.ResultChangeHistory, ...dbData];\r\n                                ResultChangeHistory = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                            case \"IDS_TESTCOMMENTS\":\r\n                                dbData = response.data.RegistrationTestComment || []\r\n                                list = [...inputData.masterData.RegistrationTestComment, ...dbData];\r\n                                RegistrationTestComment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                            default:\r\n                                dbData = response.data.TestParameters || []\r\n                                list = [...inputData.masterData.TestParameters, ...dbData];\r\n                                TestParameters = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                        }\r\n                    } else {\r\n                        let list = []\r\n                        switch (inputData.activeTestKey) {\r\n                            case \"IDS_RESULTS\":\r\n                                list = response.data.TestParameters ? sortData(response.data.TestParameters, 'ascending', 'ntransactionresultcode') : [];\r\n                                TestParameters = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"TestParameters\"\r\n                                dataStateName = \"resultDataState\"\r\n                                break;\r\n                            case \"IDS_INSTRUMENT\":\r\n                                list = response.data.ResultUsedInstrument ? sortData(response.data.ResultUsedInstrument, 'descending', 'nresultusedinstrumentcode') : [];\r\n                                ResultUsedInstrument = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"ResultUsedInstrument\"\r\n                                dataStateName = \"instrumentDataState\"\r\n                                break;\r\n                            case \"IDS_TASK\":\r\n                                list = response.data.ResultUsedTasks ? sortData(response.data.ResultUsedTasks, 'descending', 'nresultusedtaskcode') : [];\r\n                                list.reduce((unique, item) => unique.includes(item) ? unique : [...unique, item], []);\r\n                                ResultUsedTasks = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"ResultUsedTasks\"\r\n                                dataStateName = \"taskDataState\"\r\n                                break;\r\n                            case \"IDS_TESTATTACHMENTS\":\r\n                                list = response.data.RegistrationTestAttachment ? sortData(response.data.RegistrationTestAttachment, 'descending', 'ntestattachmentcode') : [];\r\n                                RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestAttachment\"\r\n                                break;\r\n                            case \"IDS_RESULTCHANGEHISTORY\":\r\n                                list = response.data.ResultChangeHistory ? sortData(response.data.ResultChangeHistory, 'descending', 'nresultchangehistorycode') : [];\r\n                                ResultChangeHistory = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"ResultChangeHistory\"\r\n                                dataStateName = \"resultChangeDataState\"\r\n                                break;\r\n                            case \"IDS_TESTCOMMENTS\":\r\n                                list = response.data.RegistrationTestComment ? sortData(response.data.RegistrationTestComment, 'descending', 'ntestcommentcode') : [];\r\n                                RegistrationTestComment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestComment\"\r\n                                dataStateName = \"testCommentDataState\"\r\n                                break;\r\n                            default:\r\n                                list = response.data.TestParameters ? sortData(response.data.TestParameters, 'ascending', 'ntransactionresultcode') : [];\r\n                                TestParameters = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"TestParameters\"\r\n                                dataStateName = \"resultDataState\"\r\n                                break;\r\n                        }\r\n                    }\r\n\r\n                    masterData = {\r\n                        ...masterData,\r\n                        // wholeApprovalParameter,\r\n                        TestParameters,\r\n                        // wholeResultUsedInstrument,\r\n                        ResultUsedInstrument,\r\n                        // wholeResultUsedTasks,\r\n                        ResultUsedTasks,\r\n                        // wholeRegistrationTestAttachment,\r\n                        RegistrationTestAttachment,\r\n                        // wholeResultChangeHistory,\r\n                        ResultChangeHistory,\r\n                        // wholeRegistrationTestComments,\r\n                        RegistrationTestComment\r\n                    }\r\n                    if (inputData[dataStateName] && masterData[activeName].length <= inputData[dataStateName].skip) {\r\n\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            [dataStateName]: {\r\n                                ...inputData[dataStateName],\r\n                                skip: 0,\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    } else {\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            [dataStateName]: {\r\n                                ...inputData[dataStateName],\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            masterData,\r\n                            loading: false,\r\n                            showFilter: false,\r\n                            activeTestKey: inputData.activeTestKey,\r\n                            screenName: inputData.screenName,\r\n                            ...skipInfo\r\n                        }\r\n                    })\r\n                })\r\n                .catch(error => {\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            loading: false\r\n                        }\r\n                    })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    } else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                })\r\n        } else {\r\n            //fillRecordBasedOnCheckBoxSelection(inputData.masterData, response.data, inputData.childTabsKey, inputData.checkBoxOperation, \"npreregno\", inputData.removeElementFromArray);\r\n\r\n            let oldSelectedTest = inputData.masterData.RESelectedTest\r\n            let TestSelected = getRecordBasedOnPrimaryKeyName(inputData.masterData.RESelectedTest, inputData.removeElementFromArray[0].ntransactionsamplecode, \"ntransactionsamplecode\");\r\n            let isGrandChildGetRequired = false;\r\n            if (TestSelected.length > 0) {\r\n                isGrandChildGetRequired = true;\r\n            } else {\r\n                isGrandChildGetRequired = false;\r\n            }\r\n            fillRecordBasedOnCheckBoxSelection(inputData.masterData, inputData.RESelectedSubSample, inputData.childTabsKey, inputData.checkBoxOperation, \"ntransactionsamplecode\", inputData.removeElementFromArray);\r\n            if (isGrandChildGetRequired) {\r\n                let ntransactiontestcode = inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode.toString() : \"\";\r\n                let RESelectedSubSample = inputData.RESelectedSubSample;\r\n                let RESelectedTest = inputData.masterData.RE_TEST.length > 0 ? [inputData.masterData.RE_TEST[0]] : [];\r\n                // let RESelectedSubSample = inputData.masterData.RE_SUBSAMPLE\r\n\r\n                inputData = {\r\n                    ...inputData,\r\n                    childTabsKey: [\"TestParameters\", \"ResultUsedInstrument\", \"ResultUsedTasks\", \"RegistrationTestAttachment\",\r\n                        \"ResultChangeHistory\", \"RegistrationTestComment\", \"ResultChangeHistory\"\r\n                    ],\r\n                    ntransactiontestcode,\r\n                    RESelectedSample: inputData.masterData.RESelectedSample,\r\n                    RESelectedTest,\r\n                    RESelectedSubSample,\r\n                    checkBoxOperation: 3,\r\n                    activeTestKey: inputData.activeTestKey\r\n                }\r\n                dispatch(getTestChildTabREDetail(inputData, true));\r\n            } else {\r\n                //added by sudharshanan for test select issue while sample click\r\n                let masterData = {\r\n                    ...inputData.masterData,\r\n                    RESelectedTest: inputData.masterData.RE_TEST.length > 0 ? [inputData.masterData.RE_TEST[0]] : [],\r\n                    RESelectedSubSample: inputData.RESelectedSubSample\r\n                }\r\n                let wholeTestList = masterData.RE_TEST.map(b => b.ntransactiontestcode)\r\n                oldSelectedTest.map((test, index) => {\r\n                    if (!wholeTestList.includes(test.ntransactiontestcode)) {\r\n                        oldSelectedTest.splice(index, 1)\r\n                    }\r\n                    return null;\r\n                })\r\n                let keepOld = false;\r\n                let ntransactiontestcode;\r\n                if (oldSelectedTest.length > 0) {\r\n                    keepOld = true\r\n                    masterData = {\r\n                        ...masterData,\r\n                        RESelectedTest: oldSelectedTest\r\n                    }\r\n                } else {\r\n                    ntransactiontestcode = masterData.RE_TEST[0].ntransactiontestcode\r\n                }\r\n                const TestParameters = keepOld ? inputData.masterData.TestParameters : getRecordBasedOnPrimaryKeyName(inputData.masterData.TestParameters,\r\n                    ntransactiontestcode, \"ntransactiontestcode\");\r\n                const ResultUsedInstrument = keepOld ? inputData.masterData.ResultUsedInstrument : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedInstrument || [],\r\n                    ntransactiontestcode, \"ntransactiontestcode\");\r\n                const ResultUsedTasks = keepOld ? inputData.masterData.ResultUsedTasks : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedTasks || [],\r\n                    ntransactiontestcode, \"ntransactiontestcode\");\r\n                const RegistrationTestAttachment = keepOld ? inputData.masterData.RegistrationTestAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment || [],\r\n                    ntransactiontestcode, \"ntransactiontestcode\");\r\n                const RegistrationTestComment = keepOld ? inputData.masterData.RegistrationTestComment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment || [],\r\n                    ntransactiontestcode, \"ntransactiontestcode\");\r\n                const ResultChangeHistory = keepOld ? inputData.masterData.ResultChangeHistory : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultChangeHistory || [],\r\n                    ntransactiontestcode, \"ntransactiontestcode\");\r\n                let { testskip, testtake } = inputData\r\n                let bool = false;\r\n                let skipInfo = {}\r\n                if (inputData.masterData.RE_TEST.length <= inputData.testskip) {\r\n                    testskip = 0;\r\n                    bool = true\r\n                }\r\n                if (bool) {\r\n                    skipInfo = {\r\n                        testskip,\r\n                        testtake\r\n                    }\r\n                }\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...masterData,\r\n                            RESelectedSubSample: inputData.RESelectedSubSample,\r\n                            // selectedPreregno: inputData.npreregno,\r\n                            // RESelectedTest: inputData.masterData.searchedTest && inputData.masterData.searchedTest.length > 0 ? [inputData.masterData.\r\n                            //     searchedTest[0]\r\n                            // ] : inputData.masterData.RE_TEST.length > 0 ? [inputData.masterData.\r\n                            //     RE_TEST[0]\r\n                            // ] : [],\r\n                            // RESelectedTest: inputData.masterData.RE_TEST.length > 0 ? [inputData.masterData.RE_TEST[0]] : [],\r\n                            TestParameters,\r\n                            ResultUsedInstrument,\r\n                            ResultUsedTasks,\r\n                            RegistrationTestAttachment,\r\n                            RegistrationTestComment,\r\n                            ResultChangeHistory,\r\n                        },\r\n                        loading: false,\r\n                        showFilter: false,\r\n                        activeSampleTab: inputData.activeSampleTab,\r\n                        activeTestKey: inputData.activeTestKey,\r\n                        ...skipInfo,\r\n                    }\r\n                })\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\nexport function getSampleChildTabREDetail(inputData) {\r\n    return function (dispatch) {\r\n        let inputParamData = {\r\n            ntransactiontestcode: inputData.ntransactiontestcode,\r\n            npreregno: inputData.npreregno,\r\n            userinfo: inputData.userinfo\r\n        }\r\n        let url = \"\"\r\n        switch (inputData.activeSampleKey) {\r\n            case \"IDS_DOCUMENTS\":\r\n                url = \"attachment/getSampleAttachment\"\r\n                break;\r\n            case \"IDS_SAMPLEATTACHMENTS\":\r\n                url = \"attachment/getSampleAttachment\"\r\n                break;\r\n            case \"IDS_APPROVALHISTORY\":\r\n                url = \"resultentrybysample/getSampleApprovalHistory\"\r\n                break;\r\n            default:\r\n                url = \"attachment/getSampleAttachment\"\r\n                break;\r\n        }\r\n        dispatch(initRequest(true));\r\n        rsapi.post(url, inputParamData)\r\n            .then(response => {\r\n                let responseData = {\r\n                    ...response.data\r\n                }\r\n                //responseData = sortData(responseData)\r\n                fillRecordBasedOnCheckBoxSelection(inputData.masterData, responseData, inputData.childTabsKey, inputData.checkBoxOperation, \"npreregno\", inputData.removeElementFromArray);\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...response.data,\r\n                            RESelectedSample: inputData.RESelectedSample\r\n                        },\r\n                        loading: false,\r\n                        activeSampleKey: inputData.activeSampleKey,\r\n                        screenName: inputData.screenName\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            });\r\n    }\r\n}\r\n\r\nexport function getTestChildTabREDetail(inputData, isServiceRequired) {\r\n    return function (dispatch) {\r\n        let inputParamData = {\r\n            ntransactiontestcode: inputData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\"),\r\n            npreregno: inputData.npreregno,\r\n            userinfo: inputData.userinfo\r\n        }\r\n        let activeName = \"\";\r\n        let dataStateName = \"\";\r\n        // let { resultDataState, materialDataState, instrumentDataState, taskDataState, resultChangeDataState,\r\n        //     documentDataState, testCommentDataState } = inputData\r\n        let url = \"resultentrybysample/getTestbasedParameter\"\r\n        switch (inputData.activeTestKey) {\r\n            case \"IDS_RESULTS\":\r\n                url = \"resultentrybysample/getTestbasedParameter\"\r\n                activeName = \"TestParameters\"\r\n                dataStateName = \"resultDataState\"\r\n                break;\r\n            case \"IDS_INSTRUMENT\":\r\n                url = \"resultentrybysample/getResultUsedInstrument\"\r\n                activeName = \"ResultUsedInstrument\"\r\n                dataStateName = \"instrumentDataState\"\r\n                break;\r\n            case \"IDS_MATERIAL\":\r\n                url = \"resultentrybysample/getResultUsedMaterial\";\r\n                activeName = \"\"\r\n                dataStateName = \"materialDataState\"\r\n                break;\r\n            case \"IDS_TASK\":\r\n                url = \"resultentrybysample/getResultUsedTask\"\r\n                activeName = \"ResultUsedTasks\"\r\n                dataStateName = \"taskDataState\"\r\n                break;\r\n            case \"IDS_TESTATTACHMENTS\":\r\n                url = \"attachment/getTestAttachment\"\r\n                activeName = \"RegistrationTestAttachment\"\r\n                break;\r\n            case \"IDS_TESTCOMMENTS\":\r\n                url = \"comments/getTestComment\"\r\n                activeName = \"RegistrationTestComment\"\r\n                dataStateName = \"testCommentDataState\"\r\n                break;\r\n            case \"IDS_DOCUMENTS\":\r\n                url = \"attachment/getSampleAttachment\"\r\n                activeName = \"\"\r\n                dataStateName = \"documentDataState\"\r\n                break;\r\n            case \"IDS_RESULTCHANGEHISTORY\":\r\n                url = \"resultentrybysample/getResultChangeHistory\"\r\n                activeName = \"ResultChangeHistory\"\r\n                dataStateName = \"resultChangeDataState\"\r\n                break;\r\n            case \"IDS_SAMPLEATTACHMENTS\":\r\n                url = \"attachment/getSampleAttachment\"\r\n                activeName = \"\"\r\n                dataStateName = \"resultDataState\"\r\n                break;\r\n            default:\r\n                url = \"resultentrybysample/getTestbasedParameter\"\r\n                activeName = \"TestParameters\"\r\n                dataStateName = \"resultDataState\"\r\n                break;\r\n        }\r\n        dispatch(initRequest(true));\r\n        if (isServiceRequired) {\r\n            rsapi.post(url, inputParamData)\r\n                .then(response => {\r\n                    let responseData = {\r\n                        ...response.data,\r\n                        RESelectedSample: inputData.RESelectedSample || inputData.masterData.RESelectedSample,\r\n                        RESelectedTest: inputData.RESelectedTest\r\n                    }\r\n                    let skipInfo = {};\r\n                    //responseData = sortData(responseData)\r\n                    fillRecordBasedOnCheckBoxSelection(inputData.masterData, responseData, inputData.childTabsKey, inputData.checkBoxOperation, \"npreregno\", inputData.removeElementFromArray);\r\n                    let masterData = {\r\n                        ...inputData.masterData,\r\n                        ...sortData(responseData),\r\n                        RESelectedTest: inputData.RESelectedTest\r\n                    }\r\n                    if (inputData[dataStateName] && masterData[activeName].length <= inputData[dataStateName].skip) {\r\n\r\n                        skipInfo = {\r\n\r\n                            [dataStateName]: {\r\n                                ...inputData[dataStateName],\r\n                                skip: 0,\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    } else {\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            [dataStateName]: {\r\n                                ...inputData[dataStateName],\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    }\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            masterData,\r\n                            loading: false,\r\n                            activeTestKey: inputData.activeTestKey,\r\n                            screenName: inputData.activeTestKey,\r\n                            testskip: undefined,\r\n                            testtake: undefined,\r\n                            ...skipInfo\r\n                        }\r\n                    })\r\n                })\r\n                .catch(error => {\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            loading: false\r\n                        }\r\n                    })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    } else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                })\r\n        } else {\r\n            //fillRecordBasedOnCheckBoxSelection(inputData.masterData, response.data, inputData.childTabsKey, inputData.checkBoxOperation, \"npreregno\", inputData.removeElementFromArray);\r\n            fillRecordBasedOnCheckBoxSelection(inputData.masterData, inputData.RESelectedTest, inputData.childTabsKey, inputData.checkBoxOperation, \"ntransactiontestcode\", inputData.removeElementFromArray);\r\n            let skipInfo = {};\r\n            let masterData = {\r\n                ...inputData.masterData,\r\n                RESelectedTest: inputData.RESelectedTest\r\n            }\r\n            if (masterData[activeName].length <= inputData[dataStateName].skip) {\r\n\r\n                skipInfo = {\r\n\r\n                    [dataStateName]: {\r\n                        ...inputData[dataStateName],\r\n                        skip: 0,\r\n                        sort: undefined,\r\n                        filter: undefined\r\n                    }\r\n                }\r\n            } else {\r\n                skipInfo = {\r\n                    ...skipInfo,\r\n                    [dataStateName]: {\r\n                        ...inputData[dataStateName],\r\n                        sort: undefined,\r\n                        filter: undefined\r\n                    }\r\n                }\r\n            }\r\n            dispatch({\r\n                type: DEFAULT_RETURN,\r\n                payload: {\r\n                    masterData,\r\n                    loading: false,\r\n                    showFilter: false,\r\n                    activeTestKey: inputData.activeTestKey,\r\n                    screenName: inputData.screenName,\r\n                    ...skipInfo\r\n                }\r\n            })\r\n        }\r\n    }\r\n}\r\n\r\nexport function getRERegistrationType(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"resultentrybysample/getRegistrationType\", inputData)\r\n            .then(response => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...response.data,\r\n                        },\r\n                        loading: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getRERegistrationSubType(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"resultentrybysample/getRegistrationsubType\", inputData)\r\n            .then(response => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...response.data,\r\n                            defaultRegistrationType: inputData.defaultRegistrationType\r\n                        },\r\n                        loading: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getREApprovalConfigVersion(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"resultentrybysample/getApprovalConfigVersion\", inputData)\r\n            .then(response => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...response.data,\r\n                            defaultRegistrationSubType: inputData.defaultRegistrationSubType,\r\n                            // fromDate: inputData.fromdate,\r\n                            //  toDate: inputData.todate\r\n                        },\r\n                        loading: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getREFilterStatus(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"resultentrybysample/getFilterStatus\", inputData)\r\n            .then(response => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...response.data,\r\n                            defaultjobstatus: inputData.defaultjobstatus,\r\n                            // fromDate: inputData.fromdate,\r\n                            // toDate: inputData.todate\r\n                        },\r\n                        loading: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\n\r\nexport function getREJobStatus(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"resultentrybysample/getJobStatus\", inputData)\r\n            .then(response => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...response.data,\r\n                            defaultApprovalConfigVersion: inputData.defaultApprovalConfigVersion,\r\n                            // fromDate: inputData.fromdate,\r\n                            // toDate: inputData.todate\r\n                        },\r\n                        loading: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getResultEntryDetails(inputParamData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"resultentrybysample/getResultEntryDetails\", { ...inputParamData.inputData, nneedsubsample: inputParamData.masterData.nneedsubsample })\r\n            .then(response => {\r\n                let masterData = { ...inputParamData.masterData }\r\n                if (inputParamData.refs.searchSampleRef !== undefined && inputParamData.refs.searchSampleRef.current !== null) {\r\n                    inputParamData.refs.searchSampleRef.current.value = \"\";\r\n                    masterData['searchedSample'] = undefined\r\n                }\r\n                if (inputParamData.refs.searchSubSampleRef !== undefined && inputParamData.refs.searchSubSampleRef.current !== null) {\r\n                    inputParamData.refs.searchSubSampleRef.current.value = \"\";\r\n                    masterData['searchedSubSample'] = undefined\r\n                }\r\n                if (inputParamData.refs.searchTestRef !== undefined && inputParamData.refs.searchTestRef.current !== null) {\r\n                    inputParamData.refs.searchTestRef.current.value = \"\"\r\n                    // masterData['searchedTests'] = undefined\r\n                    masterData['searchedTest'] = undefined\r\n                }\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...masterData,\r\n                            ...response.data,\r\n                            realFromDate: response.data[\"fromDate\"],\r\n                            realToDate: response.data[\"toDate\"]\r\n                        },\r\n                        loading: false,\r\n                        showTest: inputParamData.inputData.showTest,\r\n                        showSample: inputParamData.inputData.showSample,\r\n                        activeTestKey: inputParamData.inputData.activeTestKey,\r\n                        skip: 0,\r\n                        take: inputParamData.inputData.take,\r\n                        testskip: 0,\r\n                        testtake: inputParamData.inputData.testtake,\r\n                        resultDataState: { ...inputParamData.resultDataState, sort: undefined, filter: undefined },\r\n                        instrumentDataState: { ...inputParamData.instrumentDataState, sort: undefined, filter: undefined },\r\n                        materialDataState: { ...inputParamData.materialDataState, sort: undefined, filter: undefined },\r\n                        taskDataState: { ...inputParamData.taskDataState, sort: undefined, filter: undefined },\r\n                        documentDataState: { ...inputParamData.documentDataState, sort: undefined, filter: undefined },\r\n                        resultChangeDataState: { ...inputParamData.resultChangeDataState, sort: undefined, filter: undefined },\r\n                        testCommentDataState: { ...inputParamData.testCommentDataState, sort: undefined, filter: undefined },\r\n                        historyDataState: { ...inputParamData.historyDataState, sort: undefined, filter: undefined },\r\n                        samplePrintHistoryDataState: { ...inputParamData.samplePrintHistoryDataState, sort: undefined, filter: undefined },\r\n                        sampleHistoryDataState: { ...inputParamData.sampleHistoryDataState, sort: undefined, filter: undefined }\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function resultGetModule(inputData, userInfo, ncontrolcode, testskip, testtake) {\r\n    return function (dispatch) {\r\n        let TestList = [...inputData.RE_TEST];\r\n        TestList = TestList.splice(testskip, testskip + testtake);\r\n        let acceptTestList = getSameRecordFromTwoArrays(TestList, inputData.RESelectedTest, \"ntransactiontestcode\");\r\n        if (acceptTestList && acceptTestList.length > 0) {\r\n            if (Object.values(inputData).length > 0 && inputData.RESelectedTest.length > 0) {\r\n                let inputParamData = {\r\n                    ntransactiontestcode: acceptTestList ? acceptTestList.map(test => test.ntransactiontestcode).join(\",\") : \"\",\r\n                    userinfo: userInfo\r\n                }\r\n                dispatch(initRequest(true));\r\n                rsapi.post(\"resultentrybysample/getResultEntryResults\", inputParamData)\r\n                    .then(response => {\r\n                        let selectedResultGrade = [];\r\n                        let paremterResultcode = [];\r\n                        const parameterResults = response.data.ResultParameter\r\n                        parameterResults.map((param, index) => {\r\n                            selectedResultGrade[index] = { ngradecode: param.ngradecode };\r\n                            paremterResultcode[index] = param.ntransactionresultcode;\r\n\r\n                            (response.data.PredefinedValues && response.data.PredefinedValues[parameterResults[index].ntransactionresultcode]) &&\r\n                                response.data.PredefinedValues[parameterResults[index].ntransactionresultcode].map(predefinedvalue => {\r\n                                    if (predefinedvalue.ndefaultstatus === transactionStatus.YES) {\r\n                                        response.data.PredefinedValues[parameterResults[index].ntransactionresultcode] =\r\n                                            constructOptionList(response.data.PredefinedValues[parameterResults[index].ntransactionresultcode] || [], 'spredefinedname', 'spredefinedname', undefined,\r\n                                                undefined, undefined).get(\"OptionList\");\r\n                                        if (response.data.ResultParameter[index].sresult === null) {\r\n                                            response.data.ResultParameter[index].sresult = predefinedvalue.spredefinedname;\r\n                                            response.data.ResultParameter[index].sfinal = predefinedvalue.spredefinedname;\r\n                                            response.data.ResultParameter[index].editable = true;\r\n                                            response.data.ResultParameter[index].ngradecode = predefinedvalue.ngradecode;\r\n                                        }\r\n                                    }\r\n                                    return null;\r\n                                });\r\n                            return null;\r\n                        });\r\n                        dispatch({\r\n                            type: DEFAULT_RETURN,\r\n                            payload: {\r\n                                masterData: {\r\n                                    ...inputData,\r\n                                    ...response.data,\r\n                                    paremterResultcode//,\r\n                                    //selectedResultGrade ,\r\n\r\n                                },\r\n                                selectedRecord: {\r\n                                    selectedResultGrade: selectedResultGrade,\r\n                                    ResultParameter: response.data.ResultParameter\r\n                                },\r\n                                loading: false,\r\n                                screenName: \"IDS_RESULTENTRY\",\r\n                                openModal: true,\r\n                                operation: \"update\",\r\n                                activeTestKey: \"IDS_RESULTS\",\r\n                                ncontrolcode: ncontrolcode\r\n                            }\r\n                        })\r\n                    })\r\n                    .catch(error => {\r\n                        dispatch({\r\n                            type: DEFAULT_RETURN,\r\n                            payload: {\r\n                                loading: false\r\n                            }\r\n                        })\r\n                        if (error.response.status === 500) {\r\n                            toast.error(error.message);\r\n                        } else {\r\n                            toast.warn(error.response.data);\r\n                        }\r\n                    })\r\n                //}\r\n            } else {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                toast.warn(intl.formatMessage({\r\n                    id: \"IDS_SELECTTESTTOENTERRESULT\"\r\n                }));\r\n            }\r\n        } else {\r\n            dispatch({\r\n                type: DEFAULT_RETURN,\r\n                payload: {\r\n                    loading: false\r\n                }\r\n            })\r\n            toast.warn(intl.formatMessage({\r\n                id: \"IDS_SELECTTESTTOENTERRESULT\"\r\n            }));\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport function completeTest(inputParam, acceptList, userInfo, completeResultId) {\r\n    if (acceptList !== undefined && acceptList.length > 0) {\r\n        return function (dispatch) {\r\n            let inputData = inputParam.testChildGetREParam\r\n            let inputParamData = {\r\n                ntype: 3,\r\n                nflag: 3,\r\n                nsampletypecode: inputData.nsampletypecode,\r\n                nregtypecode: inputData.nregtypecode,\r\n                nregsubtypecode: inputData.nregsubtypecode,\r\n                npreregno: inputData.npreregno,\r\n                ntranscode: String(inputData.ntransactionstatus),\r\n                napprovalversioncode: inputData.napprovalversioncode,\r\n                napprovalconfigcode: inputData.napprovalconfigcode,\r\n                ntransactionsamplecode: inputData.ntransactionsamplecode,\r\n                userinfo: userInfo,\r\n                fromdate: inputData.fromdate,\r\n                todate: inputData.todate,\r\n                ntestcode: inputData.ntestcode,\r\n                transactiontestcode: acceptList ? acceptList.map(test => test.ntransactiontestcode).join(\",\") : \"\",\r\n                ntransactiontestcode: 0,\r\n                activeTestKey: inputData.activeTestKey,\r\n                ncontrolcode: inputParam.inputData.ncontrolcode,\r\n                nneedsubsample: inputData.masterData.nneedsubsample\r\n            }\r\n            let activeName = \"\";\r\n            let dataStateName = \"\";\r\n            // let { resultDataState, materialDataState, instrumentDataState, taskDataState, resultChangeDataState,\r\n            //     documentDataState, testCommentDataState } = inputData\r\n            // let url = \"resultentrybysample/getTestbasedParameter\"\r\n            switch (inputData.activeTestKey) {\r\n                case \"IDS_RESULTS\":\r\n                    activeName = \"TestParameters\"\r\n                    dataStateName = \"resultDataState\"\r\n                    break;\r\n                case \"IDS_INSTRUMENT\":\r\n                    activeName = \"ResultUsedInstrument\"\r\n                    dataStateName = \"instrumentDataState\"\r\n                    break;\r\n                case \"IDS_MATERIAL\":\r\n                    activeName = \"\"\r\n                    dataStateName = \"materialDataState\"\r\n                    break;\r\n                case \"IDS_TASK\":\r\n                    activeName = \"ResultUsedTasks\"\r\n                    dataStateName = \"taskDataState\"\r\n                    break;\r\n                case \"IDS_TESTATTACHMENTS\":\r\n                    activeName = \"RegistrationTestAttachment\"\r\n                    break;\r\n                case \"IDS_TESTCOMMENTS\":\r\n                    activeName = \"RegistrationTestComment\"\r\n                    dataStateName = \"testCommentDataState\"\r\n                    break;\r\n                case \"IDS_DOCUMENTS\":\r\n                    activeName = \"\"\r\n                    dataStateName = \"documentDataState\"\r\n                    break;\r\n                case \"IDS_RESULTCHANGEHISTORY\":\r\n                    activeName = \"ResultChangeHistory\"\r\n                    dataStateName = \"resultChangeDataState\"\r\n                    break;\r\n                case \"IDS_SAMPLEATTACHMENTS\":\r\n                    activeName = \"\"\r\n                    dataStateName = \"resultDataState\"\r\n                    break;\r\n                default:\r\n                    activeName = \"TestParameters\"\r\n                    dataStateName = \"resultDataState\"\r\n                    break;\r\n            }\r\n            dispatch(initRequest(true));\r\n            rsapi.post(\"resultentrybysample/completeTest\", inputParamData)\r\n                .then(response => {\r\n                    let RE_SAMPLE = [];\r\n                    let RE_SUBSAMPLE = [];\r\n                    let RE_TEST = [];\r\n                    let responseData = response.data\r\n                    if (responseData[\"RE_TEST\"].length > 0) {\r\n                        if(inputData.masterData.nneedsubsample)\r\n                            RE_TEST = filterRecordBasedOnTwoArrays(inputData.masterData[\"RE_TEST\"], responseData[\"RE_TEST\"], \"ntransactionsamplecode\");\r\n                        else\r\n                            RE_TEST = filterRecordBasedOnTwoArrays(inputData.masterData[\"RE_TEST\"], responseData[\"RE_TEST\"], \"npreregno\");\r\n                    } else {\r\n                        RE_TEST = inputData.masterData[\"RE_TEST\"];\r\n                    }\r\n\r\n                    RE_SUBSAMPLE = filterRecordBasedOnTwoArrays(inputData.masterData[\"RE_SUBSAMPLE\"], RE_TEST, \"ntransactionsamplecode\");\r\n                    if (RE_SUBSAMPLE.length > 0) {\r\n                        RE_SAMPLE = inputData.masterData[\"RE_SAMPLE\"];\r\n                    } else {\r\n                        RE_SAMPLE = filterRecordBasedOnTwoArrays(inputData.masterData[\"RE_SAMPLE\"], RE_TEST, \"npreregno\");\r\n                    }\r\n                    const RESelectedSample = filterRecordBasedOnTwoArrays(inputData.masterData[\"RESelectedSample\"], RE_TEST, \"npreregno\");\r\n                    const RESelectedSubSample = filterRecordBasedOnTwoArrays(inputData.masterData[\"RESelectedSubSample\"], RE_TEST, \"ntransactionsamplecode\");\r\n                    let RESelectedTest1 = filterRecordBasedOnTwoArrays(inputData.masterData[\"RESelectedTest\"], acceptList, \"ntransactiontestcode\");\r\n                    let RESelectedTest2 = updatedObjectWithNewElement(RESelectedTest1, responseData.RESelectedTest)\r\n\r\n                    let searchedSample = undefined;\r\n                    if (inputData.masterData[\"searchedSample\"]) {\r\n                        searchedSample = filterRecordBasedOnTwoArrays(inputData.masterData[\"searchedSample\"], RE_TEST, \"npreregno\");\r\n                    }\r\n\r\n                    let masterData = {\r\n                        ...inputData.masterData,\r\n                        ...responseData,\r\n                        RE_SAMPLE,\r\n                        RE_SUBSAMPLE,\r\n                        RESelectedSubSample,\r\n                        searchedSample,\r\n                        RESelectedSample,\r\n                        RESelectedTest: RESelectedTest2,\r\n                        RE_TEST: responseData[\"RE_TEST\"]\r\n                    }\r\n                    let skipInfo = {};\r\n                    if (masterData.RE_SAMPLE && masterData.RE_SAMPLE.length <= inputParam.skip) {\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            skip: 0,\r\n                            take: inputParam.take\r\n                        }\r\n                    }\r\n                    if (masterData.RE_TEST && masterData.RE_TEST.length <= inputParam.testskip) {\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            testskip: 0,\r\n                            testtake: inputParam.testtake\r\n                        }\r\n                    }\r\n                    if (inputData[dataStateName] && masterData[activeName].length <= inputData[dataStateName].skip) {\r\n\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            [dataStateName]: {\r\n                                ...inputData[dataStateName],\r\n                                skip: 0,\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    } else {\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            [dataStateName]: {\r\n                                ...inputData[dataStateName],\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    }\r\n                    let respObject = {\r\n                        ...inputParamData.inputData,\r\n                        openModal: false,\r\n                        loadEsign: false,\r\n                        showConfirmAlert: false,\r\n                        selectedRecord: undefined,\r\n                        loading: false,\r\n                        screenName: inputData.activeTestKey,\r\n                        ...skipInfo\r\n                    }\r\n                    if (searchedSample && RESelectedSample.length === 0 && searchedSample.length > 0) {\r\n                        const paramList = inputParam.postParamList[0];\r\n                        const inputParameter = {\r\n                            ...paramList.fecthInputObject.fecthInputObject,\r\n                            fetchUrl: paramList.fetchUrl,\r\n                            [paramList.primaryKeyField]: String(searchedSample[0][paramList.primaryKeyField]),\r\n                            ntype: 2,\r\n                            nflag: 2\r\n                        };\r\n                        respObject = {\r\n                            ...respObject,\r\n                            masterData: {\r\n                                ...masterData,\r\n                                RESelectedSample: [searchedSample[0]]\r\n                            }\r\n                        }\r\n                        dispatch(fetchSelectedData({ ...inputParameter, checkBoxOperation : 3 }, respObject));\r\n                    } else if (!searchedSample && RESelectedSample.length === 0 && RE_SAMPLE.length > 0) {\r\n                        const paramList = inputParam.postParamList[0];\r\n                        const inputParameter = {\r\n                            ...paramList.fecthInputObject.fecthInputObject,\r\n                            fetchUrl: paramList.fetchUrl,\r\n                            [paramList.primaryKeyField]: String(RE_SAMPLE[0][paramList.primaryKeyField]),\r\n                            ntype: 2,\r\n                            nflag: 2\r\n                        };\r\n                        respObject = {\r\n                            ...respObject,\r\n                            masterData: {\r\n                                ...masterData,\r\n                                RESelectedSample: [RE_SAMPLE[0]]\r\n                            }\r\n                        }\r\n                        dispatch(fetchSelectedData({ ...inputParameter, checkBoxOperation : 3 }, respObject));\r\n                    } else {\r\n                        respObject = {\r\n                            ...respObject,\r\n                            masterData\r\n                        };\r\n                        dispatch({\r\n                            type: DEFAULT_RETURN,\r\n                            payload: {\r\n                                ...respObject,\r\n                                loading: false\r\n                            }\r\n                        });\r\n                    }\r\n                })\r\n                .catch(error => {\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            loading: false\r\n                        }\r\n                    })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    } else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                })\r\n        }\r\n    } else {\r\n        toast.warn(intl.formatMessage({\r\n            id: \"IDS_SELECTTESTTOCOMPLETE\"\r\n        }));\r\n    }\r\n\r\n}\r\n\r\n//Compare two array and return the first array which is available in second array\r\nexport function compareTwoArray(firstArray, secondArray, PrimaryKey) {\r\n    const filterArray = firstArray.filter(function (x) {\r\n        return secondArray.some(function (y) {\r\n            return x[PrimaryKey] === y[PrimaryKey]\r\n        })\r\n    });\r\n    return filterArray;\r\n}\r\n\r\nfunction fetchSelectedData(inputParam, respObject) {\r\n    return (dispatch) => {\r\n        rsapi.post(inputParam.fetchUrl, {\r\n            ...inputParam\r\n        })\r\n            .then(response => {\r\n                const masterData = {\r\n                    ...respObject.masterData,\r\n                    ...response.data,\r\n                    RESelectedSample: response.data.RESelectedSample || respObject.masterData.RESelectedSample || []\r\n                };\r\n                //sortData(masterData);\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        ...respObject,\r\n                        masterData,\r\n                        loading: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            });\r\n    }\r\n}\r\n\r\n\r\nexport function testMethodSourceEdit(inputData) {\r\n    return function (dispatch) {\r\n        let inputParamData = {\r\n            ntransactiontestcode: inputData.test.ntransactiontestcode,\r\n            ntestgrouptestcode: inputData.test.ntestgrouptestcode,\r\n            ntestcode: inputData.test.ntestcode,\r\n            ncontrolcode: inputData.editSourceMethodId,\r\n            userinfo: inputData.userInfo\r\n        }\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"resultentrybysample/getTestMethodSource\", inputParamData)\r\n            .then(response => {\r\n\r\n                const TagSource = constructOptionList(response.data.SourceData || [], \"nsourcecode\",\r\n                    \"ssourcename\", undefined, undefined, undefined);\r\n                const TagListSource = TagSource.get(\"OptionList\");\r\n\r\n                const TagMethod = constructOptionList(response.data.MethodData || [], \"nmethodcode\",\r\n                    \"smethodname\", undefined, undefined, undefined);\r\n                const TagListMethod = TagMethod.get(\"OptionList\");\r\n\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            SourceData: TagListSource,\r\n                            MethodData: TagListMethod,\r\n                            RESelectedSubSample: inputData.masterData.RESelectedSubSample\r\n                        },\r\n                        selectedRecord: {\r\n                            ntransactiontestcode: inputData.test.ntransactiontestcode,\r\n                            stestsynonym: inputData.test.stestsynonym,\r\n                            nsourcecode: response.data.SourceDataValue,\r\n                            nmethodcode: response.data.MethodDataValue\r\n                        },\r\n                        loading: false,\r\n                        screenName: \"IDS_TESTMETHODSOURCE\",\r\n                        openModal: true,\r\n                        operation: \"update\",\r\n                        ncontrolcode: inputData.editSourceMethodId\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function updateParameterComments(inputData, masterData) {\r\n    return function (dispatch) {\r\n        let inputParamData = {\r\n            ntransactiontestcode: inputData.ntransactiontestcode,\r\n            ntransactionresultcode: inputData.ntransactionresultcode,\r\n            sresultcomment: inputData.sresultcomment,\r\n            transactiontestcode: inputData.transactiontestcode,\r\n            userinfo: inputData.userinfo,\r\n            nregtypecode: inputData.nregtypecode,\r\n            nregsubtypecode: inputData.nregsubtypecode,\r\n            ncontrolcode: inputData.ncontrolcode\r\n        }\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"resultentrybysample/updateParameterComments\", inputParamData)\r\n            .then(response => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...masterData,\r\n                            ...response.data\r\n                        },\r\n                        loading: false,\r\n                        loadEsign: false,\r\n                        screenName: \"IDS_RESULT\",\r\n                        openModal: false,\r\n                        operation: \"update\",\r\n                        ncontrolcode: inputData.ncontrolcode\r\n                        //ncontrolcode:inputData.editSourceMethodId\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\n\r\nexport function addREInstrument(inputData) {\r\n    return function (dispatch) {\r\n\r\n        let urlArray = [];\r\n        const resultusedinstrument = rsapi.post(\"resultentrybysample/getResultUsedInstrumentCombo\", {\r\n            userinfo: inputData.userInfo\r\n        });\r\n        const timeZoneService = rsapi.post(\"timezone/getTimeZone\");\r\n        const UTCtimeZoneService = rsapi.post(\"timezone/getLocalTimeByZone\", { userinfo: inputData.userInfo });\r\n        urlArray = [resultusedinstrument, timeZoneService, UTCtimeZoneService];\r\n\r\n        dispatch(initRequest(true));\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                const TagInstrument = constructOptionList(response[0].data.Instrument || [], \"ninstrumentcode\",\r\n                    \"sinstrumentid\", undefined, undefined, undefined);\r\n                const TagListInstrument = TagInstrument.get(\"OptionList\");\r\n\r\n\r\n                const TagInsturmentcategory = constructOptionList(response[0].data.InstrumentCategory || [], \"ninstrumentcatcode\",\r\n                    \"sinstrumentcatname\", undefined, undefined, undefined);\r\n                const TagListInstrumentCategory = TagInsturmentcategory.get(\"OptionList\");\r\n\r\n                const TagTimeZone = constructOptionList(response[1].data || [], \"ntimezonecode\",\r\n                    \"stimezoneid\", undefined, undefined, undefined);\r\n                const TagListTimeZone = TagTimeZone.get(\"OptionList\")\r\n\r\n                dispatch({\r\n\r\n\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            Instrument: TagListInstrument,\r\n                            InstrumentCategory: TagListInstrumentCategory\r\n\r\n                        },\r\n                        selectedId: null,\r\n                        selectedRecord: {\r\n                            stestsynonym: inputData.test.stestsynonym,\r\n                            transactiontestcode: inputData.RESelectedTest ? inputData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\").toString() : \"\",\r\n                            ntransactiontestcode: inputData.test.ntransactiontestcode,\r\n                            ninstrumentcatcode: TagInsturmentcategory.get(\"DefaultValue\") ? TagInsturmentcategory.get(\"DefaultValue\") : [],\r\n                            ninstrumentcode: TagInstrument.get(\"DefaultValue\") ? TagInstrument.get(\"DefaultValue\") : [],\r\n                            npreregno: inputData.test.npreregno,\r\n                            //dtodate: new Date(response[2].data),//new Date(),\r\n                            dtodate: rearrangeDateFormat(inputData.userInfo, response[2].data),//new Date(),\r\n                            //dfromdate: new Date(response[2].data),//new Date(),\r\n                            dfromdate: rearrangeDateFormat(inputData.userInfo, response[2].data),//new Date(),\r\n                            ntzfromdate: {\r\n                                \"value\": inputData.userInfo.ntimezonecode,\r\n                                \"label\": inputData.userInfo.stimezoneid\r\n                            },\r\n                            ntztodate: {\r\n                                \"value\": inputData.userInfo.ntimezonecode,\r\n                                \"label\": inputData.userInfo.stimezoneid\r\n                            }\r\n                        },\r\n                        timeZoneList: TagListTimeZone || [],\r\n                        loading: false,\r\n                        screenName: \"IDS_INSTRUMENT\",\r\n                        openModal: true,\r\n                        operation: \"create\",\r\n                        //activeTestKey: \"IDS_INSTRUMENT\",\r\n                        ncontrolcode: inputData.addResultUsedInstrumentId\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function deleteInstrumentRecord(inputData) {\r\n    return function (dispatch) {\r\n        let inputParamData = {\r\n            nresultusedinstrumentcode: inputData.selectedRecord.nresultusedinstrumentcode,\r\n            userinfo: inputData.userInfo,\r\n            ntransactiontestcode: inputData.masterData.RESelectedTest ?\r\n                inputData.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\").toString() : \"\",\r\n            nregtypecode: inputData.masterData.defaultRegistrationType.nregtypecode,\r\n            nregsubtypecode: inputData.masterData.defaultRegistrationSubType.nregsubtypecode\r\n        }\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"resultentrybysample/deleteResultUsedInstrument\", inputParamData)\r\n            .then(response => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...response.data\r\n                        },\r\n                        loading: false,\r\n                        operation: \"delete\",\r\n                        openModal: false,\r\n                        loadEsign: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\n\r\n\r\nexport function fetchInstrumentRecord(inputData) {\r\n    return function (dispatch) {\r\n\r\n        let urlArray = [];\r\n        //const resultUsedInstrumentCombo = rsapi.post(\"resultentrybysample/getResultUsedInstrumentCombo\", { userinfo: inputData.userInfo });\r\n        const timeZoneService = rsapi.post(\"resultentrybysample/getResultUsedInstrument\", {\r\n            nresultusedinstrumentcode: inputData.editRow.nresultusedinstrumentcode,\r\n            userinfo: inputData.userInfo\r\n        });\r\n        const getResultUsedInstrument = rsapi.post(\"timezone/getTimeZone\");\r\n        urlArray = [timeZoneService, getResultUsedInstrument];\r\n\r\n        dispatch(initRequest(true));\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n\r\n                const TagInstrument = constructOptionList(response[0].data.Instrument || [], \"ninstrumentcode\",\r\n                    \"sinstrumentid\", undefined, undefined, undefined);\r\n                const TagListInstrument = TagInstrument.get(\"OptionList\");\r\n\r\n\r\n                const TagInsturmentcategory = constructOptionList(response[0].data.InstrumentCategory || [], \"ninstrumentcatcode\",\r\n                    \"sinstrumentcatname\", undefined, undefined, undefined);\r\n                const TagListInstrumentCategory = TagInsturmentcategory.get(\"OptionList\");\r\n\r\n                const TagTimeZone = constructOptionList(response[1].data || [], \"ntimezonecode\",\r\n                    \"stimezoneid\", undefined, undefined, undefined);\r\n                const TagListTimeZone = TagTimeZone.get(\"OptionList\")\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            Instrument: TagListInstrument,\r\n                            InstrumentCategory: TagListInstrumentCategory,\r\n                            // ...response[0].data,\r\n                            ...response[1].data,\r\n                            //...response[2].data\r\n                        },\r\n                        selectedId: inputData.editRow.nresultusedinstrumentcode,\r\n                        selectedRecord: {\r\n                            stestsynonym: inputData.editRow.stestsynonym,\r\n                            npreregno: response[0].data.EditResultUsedInstrument[0].npreregno,\r\n                            ntransactiontestcode: inputData.editRow.ntransactiontestcode,\r\n                            nresultusedinstrumentcode: inputData.editRow.nresultusedinstrumentcode,\r\n                            ninstrumentcatcode: {\r\n                                \"value\": response[0].data.EditResultUsedInstrument[0].ninstrumentcatcode,\r\n                                \"label\": response[0].data.EditResultUsedInstrument[0].sinstrumentcatname\r\n                            },\r\n                            ninstrumentcode: {\r\n                                \"value\": response[0].data.EditResultUsedInstrument[0].ninstrumentcode,\r\n                                \"label\": response[0].data.EditResultUsedInstrument[0].sinstrumentid\r\n                            },\r\n                            ntzfromdate: {\r\n                                \"value\": response[0].data.EditResultUsedInstrument[0].ntzfromdate,\r\n                                \"label\": response[0].data.EditResultUsedInstrument[0].stzfromdate\r\n                            },\r\n                            ntztodate: {\r\n                                \"value\": response[0].data.EditResultUsedInstrument[0].ntztodate,\r\n                                \"label\": response[0].data.EditResultUsedInstrument[0].stztodate\r\n                            },\r\n                            //dfromdate: new Date(response[0].data.EditResultUsedInstrument[0].sfromdate),\r\n                            //dtodate: new Date(response[0].data.EditResultUsedInstrument[0].stodate)\r\n                            dfromdate: rearrangeDateFormat(inputData.userInfo, response[0].data.EditResultUsedInstrument[0].sfromdate),\r\n                            dtodate: rearrangeDateFormat(inputData.userInfo, response[0].data.EditResultUsedInstrument[0].stodate)\r\n                        },\r\n                        timeZoneList: TagListTimeZone || [],\r\n                        ncontrolcode: inputData.ncontrolCode,\r\n                        loading: false,\r\n                        screenName: \"IDS_INSTRUMENT\",\r\n                        openModal: true,\r\n                        operation: \"update\"\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function deleteTaskRecord(inputData, userInfo) {\r\n    return function (dispatch) {\r\n        let inputParamData = {\r\n            nresultusedtaskcode: inputData.selectedRecord.nresultusedtaskcode,\r\n            userinfo: inputData.userInfo,\r\n            ntransactiontestcode: inputData.masterData.RESelectedTest ?\r\n                inputData.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\").toString() : \"\",\r\n            nregtypecode: inputData.masterData.defaultRegistrationType.nregtypecode,\r\n            nregsubtypecode: inputData.masterData.defaultRegistrationSubType.nregsubtypecode\r\n        }\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"resultentrybysample/deleteResultUsedTasks\", inputParamData)\r\n            .then(response => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...response.data\r\n                        },\r\n                        loading: false,\r\n                        operation: \"delete\",\r\n                        openModal: false,\r\n                        loadEsign: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\n\r\nexport function fetchTaskRecord(inputData) {\r\n    return function (dispatch) {\r\n        let inputParamData = {\r\n            nresultusedtaskcode: inputData.editRow.nresultusedtaskcode,\r\n            userinfo: inputData.userInfo,\r\n        }\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"resultentrybysample/getResultUsedTask\", inputParamData)\r\n            .then(response => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...response.data\r\n                        },\r\n                        selectedId: response.data.EditResultUsedTasks[0].nresultusedtaskcode,\r\n                        selectedRecord: {\r\n                            npreregno: response.data.EditResultUsedTasks[0].npreregno,\r\n                            stestsynonym: inputData.editRow.stestsynonym,\r\n                            sanalysistime: response.data.EditResultUsedTasks[0].sanalysistime,\r\n                            smisctime: response.data.EditResultUsedTasks[0].smisctime,\r\n                            spreanalysistime: response.data.EditResultUsedTasks[0].spreanalysistime,\r\n                            spreparationtime: response.data.EditResultUsedTasks[0].spreparationtime,\r\n                            scomments: response.data.EditResultUsedTasks[0].scomments,\r\n                            nresultusedtaskcode: response.data.EditResultUsedTasks[0].nresultusedtaskcode\r\n                        },\r\n                        loading: false,\r\n                        screenName: \"IDS_TASK\",\r\n                        openModal: true,\r\n                        operation: \"update\",\r\n                        ncontrolcode: inputData.ncontrolcode,\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function parameterRecord(inputData) {\r\n    return function (dispatch) {\r\n        let inputParamData = {\r\n            ntransactionresultcode: inputData.selectedRecord.ntransactionresultcode,\r\n            ntransactiontestcode: inputData.masterData.RESelectedTest ? inputData.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\") : \"\",\r\n            ncontrolcode: inputData.controlcode,\r\n            userinfo: inputData.userInfo\r\n        }\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"resultentrybysample/getParameterComments\", inputParamData)\r\n            .then(response => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                        },\r\n                        selectedId: response.data.ParameterComments.ntransactionresultcode,\r\n                        selectedRecord: {\r\n                            sresultcomment: response.data.ParameterComments.sresultcomment,\r\n                            stestsynonym: inputData.selectedRecord.stestsynonym,\r\n                            sparametersynonym: inputData.selectedRecord.sparametersynonym,\r\n                            transactiontestcode: response.data.ParameterComments.ntransactiontestcode,\r\n                            ntransactionresultcode: response.data.ParameterComments.ntransactionresultcode,\r\n                            ntransactiontestcode: inputData.masterData.RESelectedTest ? inputData.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\") : \"\",\r\n                            ncontrolcode: inputData.controlcode\r\n                        },\r\n                        loading: false,\r\n                        screenName: \"IDS_PARAMETERCOMMENTS\",\r\n                        openModal: true,\r\n                        operation: \"updateParameterComments\",\r\n                        ncontrolcode: inputData.controlcode\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\n\r\nexport function checkListRecord(inputData) {\r\n\r\n    return function (dispatch) {\r\n        let inputParamData = {\r\n            ntransactionresultcode: inputData.selectedRecord.ntransactionresultcode,\r\n            napprovalparametercode: inputData.selectedRecord.napprovalparametercode,\r\n            nchecklistversioncode: inputData.selectedRecord.nchecklistversioncode,\r\n            ntransactiontestcode: inputData.selectedRecord.ntransactiontestcode.toString(),\r\n            ncontrolcode: inputData.ncontrolcode,\r\n            userinfo: inputData.userInfo,\r\n        }\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"resultentrybysample/getChecklistdesign\", inputParamData)\r\n            .then(response => {\r\n                let selectedRecord = {};\r\n                let lsteditedQB = [];\r\n                selectedRecord = {\r\n                    npreregno: inputData.selectedRecord.npreregno,\r\n                    stestsynonym: inputData.selectedRecord.stestsynonym,\r\n                    sparametersynonym: inputData.selectedRecord.sparametersynonym,\r\n                    ntransactiontestcode: inputData.selectedRecord.ntransactiontestcode,\r\n                    ntransactionresultcode: inputData.selectedRecord.ntransactionresultcode,\r\n                    transactiontestcode: inputData.masterData.RESelectedTest ? inputData.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\") : \"\"\r\n                }\r\n\r\n                response.data.ChecklistData.map(checklist => {\r\n                    selectedRecord[checklist.nchecklistversionqbcode] = {\r\n                        nchecklistqbcode: checklist.nchecklistqbcode,\r\n                        nchecklistversioncode: checklist.nchecklistversioncode,\r\n                        nchecklistversionqbcode: checklist.nchecklistversionqbcode,\r\n                        sdefaultvalue: checklist.sdefaultvalue\r\n                    }\r\n                    lsteditedQB.push(checklist.nchecklistversionqbcode);\r\n                    return null;\r\n                });\r\n                selectedRecord[\"editedQB\"] = lsteditedQB;\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...response.data\r\n                        },\r\n                        selectedId: response.data.selectedId,\r\n                        selectedRecord: selectedRecord,\r\n                        loading: false,\r\n                        screenName: \"IDS_CHECKLISTRESULT\",\r\n                        openTemplateModal: true,\r\n                        needSaveButton: inputData.needSaveButton,\r\n                        operation: \"create\",\r\n                        ncontrolCode: inputData.ncontrolcode\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function onSaveCheckList(selectedRecord, userInfo, nregtypecode, nregsubtypecode) {\r\n\r\n    return function (dispatch) {\r\n\r\n        let listResultCheckList = [];\r\n        if (selectedRecord && selectedRecord.editedQB) {\r\n            selectedRecord.editedQB.map(qbcode =>\r\n                listResultCheckList.push(selectedRecord[qbcode]))\r\n\r\n            let inputParamData = {\r\n                ntransactionresultcode: selectedRecord.ntransactionresultcode,\r\n                ntransactiontestcode: selectedRecord.ntransactiontestcode.toString(),\r\n                transactiontestcode: selectedRecord.transactiontestcode,\r\n                npreregno: selectedRecord.npreregno,\r\n                ResultCheckList: listResultCheckList,\r\n                userinfo: userInfo,\r\n                nregtypecode: nregtypecode,\r\n                nregsubtypecode: nregsubtypecode,\r\n                ncontrolcode: -1\r\n            }\r\n\r\n            dispatch(initRequest(true));\r\n            rsapi.post(\"resultentrybysample/createResultEntryChecklist\", inputParamData)\r\n\r\n                .then(response => {\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            selectedRecord: {},\r\n                            templateData: undefined,\r\n                            openTemplateModal: false,\r\n                            openModal: false,\r\n                            loading: false,\r\n                            loadEsign: false\r\n                        }\r\n                    })\r\n                })\r\n                .catch(error => {\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            loading: false,\r\n                            loadEsign: false\r\n                        }\r\n                    })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    } else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                })\r\n        } else {\r\n\r\n            dispatch({\r\n                type: DEFAULT_RETURN,\r\n                payload: {\r\n                    openTemplateModal: false,\r\n                    selectedRecord: {},\r\n                    loading: false,\r\n                    loadEsign: false\r\n                }\r\n            })\r\n        }\r\n    }\r\n}\r\n\r\nexport function defaultTest(inputData, RESelectedTest, RESelectedSample, nregtypecode, nregsubtypecode) {\r\n    if (RESelectedTest !== undefined && RESelectedTest.length > 0) {\r\n        return function (dispatch) {\r\n            let inputParamData = {\r\n                userinfo: inputData.userinfo,\r\n                ntransactiontestcode: RESelectedTest ? RESelectedTest.map(test => test.ntransactiontestcode).join(\",\") : \"\",\r\n                ntestgrouptestcode: RESelectedTest ? RESelectedTest.map(test => test.ntestgrouptestcode).join(\",\") : \"\",\r\n                npreregno: RESelectedTest ? RESelectedTest.map(preregno => preregno.npreregno).join(\",\") : \"\",\r\n                //RESelectedSample ? RESelectedSample.map(preregno => preregno.npreregno).join(\",\") : \"\",\r\n                nregtypecode: nregtypecode,\r\n                nregsubtypecode: nregsubtypecode,\r\n                ncontrolcode: inputData.ncontrolcode\r\n            }\r\n            dispatch(initRequest(true));\r\n            rsapi.post(\"resultentrybysample/updateDefaultValue\", inputParamData)\r\n                .then(response => {\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            masterData: {\r\n                                ...inputData.masterData,\r\n                                ...response.data,\r\n                                TestParameters: replaceUpdatedObject(response.data.TestParameters, inputData.masterData.TestParameters, 'ntransactionresultcode'),\r\n                                RESelectedSubSample: inputData.masterData.RESelectedSubSample\r\n                            },\r\n                            loading: false,\r\n                            activeTestKey: \"IDS_RESULTS\",\r\n                            openModal: false,\r\n                            loadEsign: false\r\n                        }\r\n                    })\r\n                })\r\n                .catch(error => {\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            loading: false,\r\n                            openModal: false,\r\n                            loadEsign: false\r\n                        }\r\n                    })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    } else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                })\r\n        }\r\n    } else {\r\n        toast.warn(intl.formatMessage({\r\n            id: \"IDS_SELECTTESTTOCOMPLETE\"\r\n        }));\r\n    }\r\n\r\n}\r\n\r\nexport function getFormula(parameterData, userInfo, masterData, index, selectedRecord) {\r\n    return function (dispatch) {\r\n        let inputParamData = {\r\n            ntransactiontestcode: parameterData.ntransactiontestcode,\r\n            nformulacode: parameterData.ntestgrouptestformulacode,\r\n            userinfo: userInfo,\r\n        }\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"resultentrybysample/getFormulaInputs\", inputParamData)\r\n            .then(response => {\r\n\r\n                const validateFormulaMandyFields = response.data.DynamicFormulaFields.map((item, index) => {\r\n                    return {\r\n                        \"idsName\": \"IDS_FILLALLFIELDS\",\r\n                        \"dataField\": index,\r\n                        \"mandatory\": true\r\n                    }\r\n                });\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...masterData,\r\n                            ...response.data,\r\n                        },\r\n                        selectedRecord: {\r\n                            ...selectedRecord,\r\n                            parameterData: parameterData,\r\n                            sformulacalculationdetail: response.data.query,\r\n                            formulainput: response.data.Formula,\r\n                            resultindex: index,\r\n                            selectedForumulaInput: []\r\n                        },\r\n                        validateFormulaMandyFields,\r\n                        loading: false,\r\n                        screenName: \"IDS_RESULTFORMULA\",\r\n                        showFormula: true,\r\n                        operation: \"validate\",\r\n                        showValidate: true\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function calculateFormula(inputDataValue) {\r\n    return function (dispatch) {\r\n        const inputData = {\r\n            ntransactiontestcode: inputDataValue.selectedRecord.parameterData.ntransactiontestcode,\r\n            ntransactionresultcode: inputDataValue.selectedRecord.parameterData.ntransactionresultcode,\r\n            npreregno: inputDataValue.selectedRecord.parameterData.npreregno,\r\n            sformulacalculationcode: inputDataValue.selectedRecord.sformulacalculationdetail,\r\n            nformulacode: inputDataValue.selectedRecord.parameterData.ntestgrouptestformulacode,\r\n            userinfo: inputDataValue.userInfo,\r\n            dynamicformulafields: inputDataValue.lstDynamicFields,\r\n        }\r\n\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"testmaster/calculateFormula\", inputData)\r\n            .then(response => {\r\n\r\n                // inputDataValue.selectedResultData[inputDataValue.selectedRecord.resultindex] =\r\n                // {\r\n                //     ntransactionresultcode: inputDataValue.selectedRecord.parameterData.ntransactionresultcode,\r\n                //     ntransactiontestcode: inputDataValue.selectedRecord.parameterData.ntransactiontestcode,\r\n                //     nparametertypecode: inputDataValue.selectedRecord.parameterData.nparametertypecode,\r\n                //     sresult: response.data.Result,\r\n                //     nroundingdigit: inputDataValue.selectedRecord.parameterData.nroundingdigits,\r\n                //     value: inputDataValue.selectedRecord.parameterData.ngradecode,\r\n                //     parameter: inputDataValue.selectedRecord.parameterData\r\n                // }\r\n                inputDataValue.ResultParameter[inputDataValue.selectedRecord.resultindex][\"sfinal\"] = response.data.Result;\r\n                inputDataValue.ResultParameter[inputDataValue.selectedRecord.resultindex][\"sresult\"] = response.data.Result;\r\n                inputDataValue.ResultParameter[inputDataValue.selectedRecord.resultindex]['editable'] = true;\r\n                inputDataValue.ResultParameter[inputDataValue.selectedRecord.resultindex][\"ncalculatedresult\"] = 3;\r\n                inputDataValue.selectedResultGrade[inputDataValue.selectedRecord.resultindex] = {\r\n                    ngradecode: numericGrade(inputDataValue.selectedRecord.parameterData, parseInt(response.data.Result))\r\n                }\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...inputDataValue.masterData,\r\n                            //selectedResultData: inputDataValue.selectedResultData,\r\n                            //selectedResultGrade: inputDataValue.selectedResultGrade,\r\n                            //ResultParameter: inputDataValue.ResultParameter\r\n                        },\r\n                        selectedRecord: {\r\n                            selectedResultGrade: inputDataValue.selectedResultGrade,\r\n                            ResultParameter: inputDataValue.ResultParameter\r\n                        },\r\n                        loading: false,\r\n                        screenName: \"IDS_RESULTENTRY\",\r\n                        showFormula: false,\r\n                        operation: \"update\",\r\n                        showValidate: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    //toast.warn(error.response.data);\r\n                    toast.warn(error.response.data[\"Result\"]);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getREFilterTestData(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"resultentrybysample/getTestBasedOnCombo\", inputData)\r\n            .then(response => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...response.data,\r\n                            defaultFilterStatus: inputData.defaultFilterStatus,\r\n                        },\r\n                        loading: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function updateTestMethodSource(inputData, masterData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"resultentrybysample/updateTestMethodSource\", inputData)\r\n            .then(response => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...masterData,\r\n                            RE_TEST: replaceUpdatedObject(response.data.RE_TEST, masterData.RE_TEST, 'ntransactiontestcode')\r\n                        },\r\n                        loading: false,\r\n                        openModal: false,\r\n                        loadEsign: false\r\n\r\n                        // activeTestKey: \"IDS_RESULTS\"\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function resultImportFile(inputData, masterData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"resultentrybysample/getImportResultEntry\", inputData)\r\n            .then(response => {\r\n\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...masterData\r\n                        },\r\n                        loading: false,\r\n                        openModal: false,\r\n                        // activeTestKey: \"IDS_RESULTS\"\r\n                    }\r\n                })\r\n\r\n                if (response.data.returnStatus && response.data.returnStatus !== \"\") {\r\n                    toast.info(response.data.returnStatus);\r\n                }\r\n                else {\r\n                    toast.warn(response.data.returnStatus);\r\n                }\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function validateEsignCredentialComplete(inputParam) {\r\n    return (dispatch) => {\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"login/validateEsignCredential\", inputParam.inputData)\r\n            .then(response => {\r\n                if (response.data === \"Success\") {\r\n\r\n\r\n\r\n                    const methodUrl = \"performaction\"\r\n                    inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][\"userinfo\"] = inputParam.inputData.userinfo;\r\n\r\n                    if (inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()] &&\r\n                        inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignpassword\"]) {\r\n                        delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignpassword\"]\r\n                        delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esigncomments\"]\r\n                        delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"agree\"]\r\n                    }\r\n                    if (inputParam[\"screenData\"][\"inputParam\"][\"operation\"] === \"complete\") {\r\n                        dispatch(completeTest(inputParam[\"screenData\"][\"inputParam\"], inputParam[\"screenData\"][\"inputParam\"][\"RESelectedTest\"], inputParam.inputData.userinfo))\r\n                    } else if (inputParam[\"screenData\"][\"inputParam\"][\"operation\"] === \"default\") {\r\n                        dispatch(defaultTest(inputParam[\"screenData\"][\"inputParam\"][\"testChildGetREParam\"], inputParam[\"screenData\"][\"inputParam\"][\"RESelectedTest\"], inputParam[\"screenData\"][\"inputParam\"][\"RESelectedSample\"], inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][\"nregtypecode\"], inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][\"nregsubtypecode\"]))\r\n                    } else if (inputParam[\"screenData\"][\"inputParam\"][\"operation\"] === \"deleteInstrument\") {\r\n                        dispatch(deleteInstrumentRecord(inputParam[\"screenData\"][\"inputParam\"][\"inputData\"]))\r\n                    } else if (inputParam[\"screenData\"][\"inputParam\"][\"operation\"] === \"createMethod\") {\r\n                        dispatch(updateTestMethodSource(inputParam[\"screenData\"][\"inputParam\"][\"inputData\"], inputParam[\"screenData\"][\"inputParam\"][\"masterData\"]))\r\n                    } else if (inputParam[\"screenData\"][\"inputParam\"][\"operation\"] === \"deleteTask\") {\r\n                        dispatch(deleteTaskRecord(inputParam[\"screenData\"][\"inputParam\"][\"inputData\"]))\r\n                    } else if (inputParam[\"screenData\"][\"inputParam\"][\"operation\"] === \"updateParameterComments\") {\r\n                        dispatch(updateParameterComments(inputParam[\"screenData\"][\"inputParam\"][\"inputData\"], inputParam[\"screenData\"][\"inputParam\"][\"masterData\"]))\r\n                    } else if (inputParam[\"screenData\"][\"operation\"] === \"updatechecklist\") {\r\n                        let { selectedRecord, userInfo, nregtypecode, nregsubtypecode } = inputParam[\"screenData\"];\r\n                        delete selectedRecord.esignpassword;\r\n                        delete selectedRecord.esigncomments;\r\n                        delete selectedRecord.agree;\r\n                        delete inputParam.inputData.password;\r\n                        userInfo = inputParam.inputData.userinfo;\r\n                        dispatch(onSaveCheckList(selectedRecord, userInfo, nregtypecode, nregsubtypecode))\r\n                    }\r\n                }\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    };\r\n}\r\n\r\nexport function getMeanCalculationTestParameter(meanParam) {\r\n    return (dispatch) => {\r\n        dispatch(initRequest(true));\r\n        const inputData = {\r\n            npreregno: meanParam.selectedRecord.npreregno,\r\n            ntransactionresultcode: meanParam.selectedRecord.ntransactionresultcode,\r\n            userinfo: meanParam.userInfo\r\n        }\r\n        return rsapi.post(\"resultentrybysample/getMeanCalculationTestParameter\", inputData)\r\n            .then(response => {\r\n\r\n                const list = response.data || [];\r\n                // const optionList = [];\r\n                // list.map(item=>{\r\n                //     console.log(\"item:\", item);\r\n                //         optionList.push({item:item, \r\n                //                         label:\"[\"+item.stestsynonym+\"]-[\"+item.sparametersynonym+\"]-[\"+item.sresult+\"]\", \r\n                //                         value:item.ntransactionresultcode})\r\n                //     })\r\n                // const masterData = {...masterData, ResultParameter:meanParam.selectedRecord}\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        loading: false, openModal: true,\r\n                        meanTestParameterList: list,\r\n                        screenName: \"IDS_MEANPARAMETER\",\r\n                        ncontrolcode: meanParam.ncontrolCode,\r\n                        selectedTestParameterMean: meanParam.selectedRecord\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    };\r\n}"]},"metadata":{},"sourceType":"module"}