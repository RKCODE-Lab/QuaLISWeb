{"ast":null,"code":"import rsapi from '../rsapi';\nimport { DEFAULT_RETURN } from './LoginTypes';\nimport { initRequest } from './LoginAction';\nimport { toast } from 'react-toastify';\nimport { sortData } from '../components/CommonScript';\nexport function getTestResultDataHistory(methodParam) {\n  return function (dispatch) {\n    return rsapi.post(\"/samplecertificationhistory/getParameterSampleResults\", {\n      transactiontestcode: methodParam.primaryKeyValue,\n      userinfo: methodParam.userInfo\n    }).then(response => {\n      let sampleTestResults = methodParam.masterData.sampleTestResults || new Map();\n      sampleTestResults.set(methodParam.primaryKeyValue, Object.values(response.data[\"ParameterSampleResults\"]));\n      const masterData = { ...methodParam.masterData,\n        sampleTestResults\n      };\n      sortData(masterData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          //...masterData,\n          masterData: masterData,\n          dataState: methodParam.dataState,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getActiveSampleHistory(Sample, userInfo, masterData, dataStateParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    return rsapi.post(\"samplecertificationhistory/getSampleCertificationById\", {\n      nregcertificatecode: parseInt(Sample.nregcertificatecode),\n      userinfo: userInfo,\n      npreregno: masterData.SelectedRegistration.npreregno\n    }).then(response => {\n      const printHistory = response.data.printHistory;\n      masterData = { ...masterData,\n        ...response.data,\n        printHistory\n      };\n      sortData(masterData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          operation: null,\n          modalName: undefined,\n          loading: false,\n          printHistoryDataState: { ...dataStateParam.printHistoryDataState,\n            sort: undefined,\n            filter: undefined\n          },\n          appHistoryDataState: { ...dataStateParam.appHistoryDataState,\n            sort: undefined,\n            filter: undefined\n          },\n          resultsDataState: { ...dataStateParam.resultsDataState,\n            sort: undefined,\n            filter: undefined\n          }\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getWholeFilterStatusHistory(masterData, inputData, operation, dataStateParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"samplecertificationhistory/getFilterWholeStatus\", {\n      FromDate: inputData.FromDate,\n      ToDate: inputData.ToDate,\n      userinfo: inputData.userinfo,\n      nsampletypecode: inputData.nsampletypecode,\n      nregtypecode: inputData.nregtypecode,\n      nregsubtypecode: inputData.nregsubtypecode //nfilterstatus:inputData.nfilterstatus\n\n    }).then(response => {\n      const SelectedRegistration = response.data.SelectedRegistration ? response.data.SelectedRegistration : \"\";\n      const Registration = response.data.Registration ? response.data.Registration : \"\";\n      const FilterStatusValue = response.data.FilterStatusValue ? response.data.FilterStatusValue : \"\";\n      const RegistrationSubTypeValue = response.data.RegistrationSubTypeValue ? response.data.RegistrationSubTypeValue : masterData.RegistrationSubTypeValue;\n      masterData = { ...masterData,\n        ...response.data,\n        Registration,\n        SelectedRegistration,\n        FilterStatusValue,\n        RegistrationSubTypeValue,\n        operation\n      };\n      sortData(masterData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false,\n          showFilter: false,\n          printHistoryDataState: { ...dataStateParam.printHistoryDataState,\n            sort: undefined,\n            filter: undefined\n          },\n          appHistoryDataState: { ...dataStateParam.appHistoryDataState,\n            sort: undefined,\n            filter: undefined\n          },\n          resultsDataState: { ...dataStateParam.resultsDataState,\n            sort: undefined,\n            filter: undefined\n          }\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}","map":{"version":3,"sources":["E:/WorkingFolder/React_Postgres/ALPD/branches/SOURCE-513-PROD/SOURCE-513-ALPD-5294/QuaLISWeb/src/actions/SampleCertificationHistoryAction.js"],"names":["rsapi","DEFAULT_RETURN","initRequest","toast","sortData","getTestResultDataHistory","methodParam","dispatch","post","transactiontestcode","primaryKeyValue","userinfo","userInfo","then","response","sampleTestResults","masterData","Map","set","Object","values","data","type","payload","dataState","loading","catch","error","status","message","warn","getActiveSampleHistory","Sample","dataStateParam","nregcertificatecode","parseInt","npreregno","SelectedRegistration","printHistory","operation","modalName","undefined","printHistoryDataState","sort","filter","appHistoryDataState","resultsDataState","getWholeFilterStatusHistory","inputData","FromDate","ToDate","nsampletypecode","nregtypecode","nregsubtypecode","Registration","FilterStatusValue","RegistrationSubTypeValue","showFilter"],"mappings":"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","sourcesContent":["import rsapi from '../rsapi';\r\nimport {\r\n    DEFAULT_RETURN\r\n} from './LoginTypes';\r\nimport { initRequest } from './LoginAction';\r\nimport { toast } from 'react-toastify';\r\nimport { sortData } from '../components/CommonScript';\r\n\r\n\r\nexport function getTestResultDataHistory(methodParam) {\r\n    return function (dispatch) {\r\n        return rsapi.post(\"/samplecertificationhistory/getParameterSampleResults\",\r\n            { transactiontestcode: methodParam.primaryKeyValue,\r\n              userinfo: methodParam.userInfo })\r\n            .then(response => {\r\n                let sampleTestResults = methodParam.masterData.sampleTestResults||new Map();\r\n                sampleTestResults.set(methodParam.primaryKeyValue,  Object.values(response.data[\"ParameterSampleResults\"]));\r\n                const masterData = {\r\n                    ...methodParam.masterData,\r\n                    sampleTestResults,\r\n                }\r\n                sortData(masterData);\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        //...masterData,\r\n                        masterData: masterData,\r\n                        dataState: methodParam.dataState,\r\n                        loading: false\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\n\r\nexport function getActiveSampleHistory(Sample, userInfo, masterData, dataStateParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"samplecertificationhistory/getSampleCertificationById\",\r\n            { nregcertificatecode: parseInt(Sample.nregcertificatecode), userinfo: userInfo,\r\n                npreregno: masterData.SelectedRegistration.npreregno })\r\n            .then(response => {\r\n                const printHistory = response.data.printHistory;\r\n                masterData = { ...masterData, ...response.data, printHistory };\r\n                sortData(masterData);\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData, operation: null, modalName: undefined,\r\n                        loading: false,\r\n                        printHistoryDataState:{...dataStateParam.printHistoryDataState,sort:undefined, filter:undefined},\r\n                        appHistoryDataState:{...dataStateParam.appHistoryDataState,sort:undefined, filter:undefined},\r\n                        resultsDataState:{...dataStateParam.resultsDataState,sort:undefined, filter:undefined},\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\n\r\nexport function getWholeFilterStatusHistory(masterData, inputData, operation, dataStateParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"samplecertificationhistory/getFilterWholeStatus\",\r\n            {\r\n                FromDate: inputData.FromDate, ToDate: inputData.ToDate, userinfo: inputData.userinfo, nsampletypecode: inputData.nsampletypecode,\r\n                nregtypecode: inputData.nregtypecode, nregsubtypecode: inputData.nregsubtypecode\r\n                //nfilterstatus:inputData.nfilterstatus\r\n            })\r\n\r\n            .then(response => {\r\n                const SelectedRegistration = response.data.SelectedRegistration ? response.data.SelectedRegistration : \"\";\r\n                const Registration = response.data.Registration ? response.data.Registration : \"\";\r\n                const FilterStatusValue = response.data.FilterStatusValue ? response.data.FilterStatusValue : \"\";\r\n                const RegistrationSubTypeValue = response.data.RegistrationSubTypeValue ? response.data.RegistrationSubTypeValue : masterData.RegistrationSubTypeValue;\r\n                masterData = {\r\n                    ...masterData, ...response.data, Registration, SelectedRegistration, FilterStatusValue,\r\n                    RegistrationSubTypeValue, operation,\r\n                };\r\n                sortData(masterData);\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData,\r\n                        loading: false,\r\n                        showFilter: false,\r\n                        printHistoryDataState:{...dataStateParam.printHistoryDataState,sort:undefined, filter:undefined},\r\n                        appHistoryDataState:{...dataStateParam.appHistoryDataState,sort:undefined, filter:undefined},\r\n                        resultsDataState:{...dataStateParam.resultsDataState,sort:undefined, filter:undefined},\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}