{"ast":null,"code":"var _jsxFileName = \"D:\\\\LIMSWFH\\\\LIMSPOSTGRESQL\\\\QuaLISWeb\\\\src\\\\pages\\\\organisation\\\\usermapping\\\\UserMapping.jsx\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { toast } from 'react-toastify';\nimport { Row, Col, Nav, Button, Image, Media } from 'react-bootstrap';\nimport { DEFAULT_RETURN } from '../../../actions/LoginTypes';\nimport { injectIntl } from 'react-intl';\nimport { callService, crudMaster, getUserMappingFilterChange, getUserMappingBySite, getUserMappingGraphView, getChildUsers, openUserMappingModal, updateStore, validateEsignCredential, filterColumnData, getCopyUserMapping, getCopyUserMappingSubType, getUserMapping } from '../../../actions';\nimport { getControlMap, sortData, showEsign, constructOptionList } from '../../../components/CommonScript';\nimport UserMappingFilter from './UserMappingFilter';\nimport { MediaHeader, ContentPanel } from '../../../components/App.styles';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faPlus, faSitemap, faTrashAlt } from '@fortawesome/free-solid-svg-icons';\nimport ListMaster from '../../../components/list-master/list-master.component';\nimport SlideOutModal from '../../../components/slide-out-modal/SlideOutModal';\nimport Esign from '../../audittrail/Esign';\nimport FormSelectSearch from '../../../components/form-select-search/form-select-search.component';\nimport { SearchAdd } from '../../product/product.styled';\nimport ConfirmDialog from '../../../components/confirm-alert/confirm-alert.component';\nimport { Grid, GridColumn, GridColumnMenuFilter } from '@progress/kendo-react-grid';\nimport { process } from '@progress/kendo-data-query';\nimport { ApprovalSubType, transactionStatus } from '../../../components/Enumeration';\nimport ColumnMenu from '../../../components/data-grid/ColumnMenu';\nimport UserTree from './UserTree';\nimport { AtTableWrap, FontIconWrap } from '../../../components/data-grid/data-grid.styles';\nimport ReactTooltip from 'react-tooltip';\nimport './UserMapping.css';\nimport { AtHeader } from '../../../components/header/header.styles';\nimport ConfirmMessage from '../../../components/confirm-alert/confirm-message.component';\nimport { fileViewUrl } from '../../../rsapi';\nimport { loadMessages, LocalizationProvider } from '@progress/kendo-react-intl';\nimport messages_en from '../../../assets/translations/en.json';\nimport messages_de from '../../../assets/translations/de.json';\nimport { Affix } from 'rsuite';\nimport BreadcrumbComponent from '../../../components/Breadcrumb.Component';\n\nconst mapStateToProps = state => {\n  return {\n    Login: state.Login\n  };\n};\n\nconst messages = {\n  'en-US': messages_en,\n  'ko-KR': messages_de\n};\n\nclass UserMapping extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handlePanAndZoom = (a, b, scale) => {\n      scale = scale > 1 ? 1 : scale;\n      this.setState({\n        a,\n        b,\n        scale\n      });\n    };\n\n    this.handlePanMove = (a, b) => {\n      this.setState({\n        a,\n        b\n      });\n    };\n\n    this.dataStateChange = (event, nuserrolecode) => {\n      let dataState = { ...this.state.dataState,\n        [nuserrolecode]: event.dataState\n      };\n      let dataResult = this.state.dataResult;\n      dataResult[nuserrolecode] = process(this.props.Login.masterData[nuserrolecode], event.dataState);\n      this.props.Login.dataState = dataState;\n      this.setState({\n        dataState,\n        dataResult\n      });\n    };\n\n    this.acceptCopy = (saveType, inputParam, masterData) => {\n      const copyId = this.state.controlMap.has(\"CopyUserMapping\") && this.state.controlMap.get(\"CopyUserMapping\").ncontrolcode;\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, copyId)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData\n            },\n            saveType,\n            operation: this.props.Login.operation\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, masterData, \"openModal\");\n      }\n    };\n\n    this.onSaveClick = (saveType, formRef) => {\n      let addedUsers = [];\n      let inputData = {};\n\n      if (this.props.Login.operation === 'copy') {\n        inputData = {\n          usermapping: {\n            ntreeversiontempcode: this.templateVersionValue.value,\n            napprovalsubtypecode: this.approvalSubTypeValue.value,\n            nregtypecode: this.state.selectedRecord[\"regtype\"].value,\n            nregsubtypecode: this.state.selectedRecord[\"regsubtype\"].value,\n            userinfo: this.props.Login.userInfo,\n            nsitecode: this.props.Login.masterData.selectedSite.nsitecode\n          },\n          userinfo: this.props.Login.userInfo\n        };\n        const masterData = this.props.Login.masterData;\n        const inputParam = {\n          methodUrl: 'UserMapping',\n          classUrl: this.props.Login.inputParam.classUrl,\n          displayName: this.props.Login.inputParam.displayName,\n          inputData: inputData,\n          saveType,\n          formRef,\n          operation: 'copy',\n          dataState: { ...this.state.dataState,\n            [this.props.Login.childRole]: {\n              skip: 0,\n              take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n            }\n          }\n        };\n        this.confirmMessage.confirm(this.props.intl.formatMessage({\n          id: \"IDS_CONFIRMATION\"\n        }), this.props.intl.formatMessage({\n          id: \"IDS_CONFIRMATION\"\n        }) + \"!\", this.props.intl.formatMessage({\n          id: \"IDS_COPYUSERMAPPINGALERT\"\n        }) + \" ?\", this.props.intl.formatMessage({\n          id: \"IDS_OK\"\n        }), this.props.intl.formatMessage({\n          id: \"IDS_CANCEL\"\n        }), () => this.acceptCopy(saveType, inputParam, masterData));\n      }\n\n      if (this.state.selectedRecord.nusercode && this.state.selectedRecord.nusercode.length > 0) {\n        this.state.selectedRecord.nusercode.map(user => {\n          addedUsers.push({\n            nversioncode: this.templateVersionValue.value,\n            napprovalconfigcode: this.props.Login.masterData.approvalConfigCode || this.templateVersionValue.item.napprovalconfigcode || -1,\n            nparentrolecode: this.props.Login.parentRole,\n            nparentusercode: this.props.Login.parentRole === -2 ? -2 : this.props.Login.masterData[`selectedUser_${this.props.Login.parentRole}`].UserCode,\n            nparentusersitecode: this.props.Login.parentRole === -2 ? -2 : this.props.Login.masterData[`selectedUser_${this.props.Login.parentRole}`].usersitecode,\n            nchildrolecode: user.item.nuserrolecode,\n            nchildusercode: user.item.UserCode,\n            nchildusersitecode: user.item.nusersitecode,\n            nparusermappingcode: this.props.Login.parentRole === -2 ? -2 : this.props.Login.masterData[`selectedUser_${this.props.Login.parentRole}`].nusermappingcode,\n            nlevel: user.item.nlevelno,\n            nsitecode: this.props.Login.masterData.selectedSite.nsitecode,\n            nstatus: 1\n          });\n          return null;\n        });\n        const masterData = this.props.Login.masterData;\n        inputData = {\n          users: {\n            userinfo: this.props.Login.userInfo,\n            usermapping: addedUsers,\n            nparusermappingcode: this.props.Login.parentRole === -2 ? -2 : this.props.Login.masterData[`selectedUser_${this.props.Login.parentRole}`].nusermappingcode,\n            nuserrolecode: this.props.Login.parentRole,\n            nsitecode: this.props.Login.masterData.selectedSite.nsitecode,\n            nversioncode: this.templateVersionValue.value,\n            levelno: this.props.Login.nlevelno\n          },\n          userinfo: this.props.Login.userInfo\n        };\n        const inputParam = {\n          methodUrl: 'Users',\n          classUrl: this.props.Login.inputParam.classUrl,\n          displayName: this.props.Login.inputParam.displayName,\n          inputData: inputData,\n          saveType,\n          formRef,\n          operation: 'create',\n          dataState: { ...this.state.dataState,\n            [this.props.Login.childRole]: {\n              skip: 0,\n              take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n            }\n          }\n        };\n\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolcode)) {\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              loadEsign: true,\n              screenData: {\n                inputParam,\n                masterData\n              },\n              saveType,\n              operation: this.props.Login.operation\n            }\n          };\n          this.props.updateStore(updateInfo);\n        } else {\n          this.props.crudMaster(inputParam, masterData, \"openModal\");\n        }\n      }\n    };\n\n    this.deleteUsers = (deleteId, nusermappingcode, nparusermappingcode, role) => {\n      const inputData = {\n        'users': {\n          nusermappingcode: nusermappingcode,\n          nparusermappingcode: nparusermappingcode,\n          nuserrolecode: role.nparentrolecode,\n          nsitecode: this.props.Login.masterData.selectedSite.nsitecode,\n          nversioncode: this.templateVersionValue.value,\n          levelno: role.nlevelno,\n          userinfo: this.props.Login.userInfo\n        }\n      };\n      inputData['userinfo'] = this.props.Login.userInfo;\n      const inputParam = {\n        methodUrl: 'Users',\n        classUrl: this.props.Login.inputParam.classUrl,\n        displayName: this.props.Login.inputParam.displayName,\n        inputData: inputData,\n        operation: \"delete\",\n        dataState: this.state.dataState\n      };\n      const masterData = this.props.Login.masterData;\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, deleteId)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData\n            },\n            operation: \"delete\",\n            openModal: true,\n            screenName: this.props.intl.formatMessage({\n              id: this.props.Login.inputParam.displayName\n            })\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, masterData, \"openModal\");\n      }\n    };\n\n    this.closeModal = () => {\n      let loadEsign = this.props.Login.loadEsign;\n      let openModal = this.props.Login.openModal;\n      let graphView = this.props.Login.graphView;\n      let selectedRecord = this.props.Login.selectedRecord;\n\n      if (this.props.Login.loadEsign) {\n        if (this.props.Login.operation === \"delete\") {\n          loadEsign = false;\n          openModal = false;\n          selectedRecord = {};\n        } else {\n          loadEsign = false;\n          selectedRecord['esignpassword'] = undefined;\n          selectedRecord['esigncomments'] = undefined;\n        }\n      } else {\n        openModal = false;\n        graphView = false;\n        selectedRecord = {};\n      }\n\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          openModal,\n          loadEsign,\n          selectedRecord,\n          graphView\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.validateEsign = () => {\n      const inputParam = {\n        inputData: {\n          \"userinfo\": { ...this.props.Login.userInfo,\n            sreason: this.state.selectedRecord[\"esigncomments\"]\n          },\n          password: this.state.selectedRecord[\"esignpassword\"]\n        },\n        screenData: this.props.Login.screenData\n      };\n      this.props.validateEsignCredential(inputParam, \"openModal\");\n    };\n\n    this.getUserMapping = () => {\n      if (this.state.ApprovalsubtypeList.length > 0) {\n        this.searchRef.current.value = \"\"; // let approvalSubTypeValue = this.approvalSubTypeValue ? this.approvalSubTypeValue : this.state.ApprovalsubtypeList.length > 0 ? \n        //                             this.state.ApprovalsubtypeList[0] : -1;\n\n        let masterData = { ...this.props.Login.masterData,\n          realApprovalSubTypeValue: this.props.Login.masterData.approvalSubTypeValue ? this.props.Login.masterData.approvalSubTypeValue : -1,\n          realRegistrationTypeValue: this.props.Login.masterData.registrationTypeValue ? this.props.Login.masterData.registrationTypeValue : -1,\n          realRegistrationSubTypeValue: this.props.Login.masterData.registrationSubTypeValue ? this.props.Login.masterData.registrationSubTypeValue : -1,\n          realTemplateVersionValue: this.props.Login.masterData.templateVersionValue ? this.props.Login.masterData.templateVersionValue : -1\n        };\n        let inputParamData = {\n          nFlag: 6,\n          napprovalsubtypecode: this.props.Login.masterData.approvalSubTypeValue.value,\n          nregtypecode: this.props.Login.masterData.registrationTypeValue.value ? this.props.Login.masterData.registrationTypeValue.value : -1,\n          nregsubtypecode: this.props.Login.masterData.registrationSubTypeValue ? this.props.Login.masterData.registrationSubTypeValue.value : -1,\n          ntemplatecode: this.props.Login.masterData.approvalSubTypeValue.item.ntemplatecode,\n          nversioncode: this.props.Login.masterData.templateVersionValue ? this.props.Login.masterData.templateVersionValue.value : -1,\n          userinfo: this.props.Login.userInfo,\n          masterData\n        };\n\n        if (inputParamData.napprovalsubtypecode > 0 && inputParamData.nregtypecode > 0 && inputParamData.nregsubtypecode > 0 && inputParamData.nversioncode > 0) {\n          this.props.getUserMapping(inputParamData);\n        } else {\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_PLSSELECTALLVALUESINFILTER\"\n          }));\n        }\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_APPROVALSUBTYPENOTAVAILABLE\"\n        }));\n      }\n    };\n\n    this.reloadData = () => {\n      // const inputParam = {\n      //     inputData: { \"userinfo\": this.props.Login.userInfo },\n      //     classUrl: \"usermapping\",\n      //     methodUrl: \"UserMapping\",\n      //     displayName: \"IDS_USERMAPPING\",\n      //     userInfo: this.props.Login.userInfo\n      // };\n      // this.props.callService(inputParam);\n      if (this.props.Login.masterData.approvalSubTypeValue) {\n        this.searchRef.current.value = \"\";\n        let masterData = { ...this.props.Login.masterData,\n          realApprovalSubTypeValue: this.props.Login.masterData.approvalSubTypeValue ? this.props.Login.masterData.approvalSubTypeValue : -1,\n          realRegistrationTypeValue: this.props.Login.masterData.registrationTypeValue ? this.props.Login.masterData.registrationTypeValue : -1,\n          realRegistrationSubTypeValue: this.props.Login.masterData.registrationSubTypeValue ? this.props.Login.masterData.registrationSubTypeValue : -1,\n          realApprovalConfigCode: this.props.Login.masterData.approvalConfigCode || -1,\n          realTreeVersionTemplateValue: this.props.Login.masterData.userroleTemplateValue || -1\n        };\n        const inputData = {\n          napprovalsubtypecode: this.props.Login.masterData.approvalSubTypeValue ? this.props.Login.masterData.approvalSubTypeValue.value : -1,\n          napprovalconfigcode: this.props.Login.masterData.approvalConfigCode,\n          ntreeversiontempcode: this.props.Login.masterData.userroleTemplateValue.value,\n          userinfo: this.props.Login.userInfo\n        };\n        let inputParamData = {\n          inputData,\n          masterData\n        };\n        this.props.getApprovalConfigurationVersion(inputParamData);\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_APPROVALSUBTYPENOTAVAILABLE\"\n        }));\n      }\n    };\n\n    this.onComboChange = (comboData, comboName) => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (comboData && comboName === \"regtype\") {\n        selectedRecord[comboName] = comboData;\n        let nregsubtypecode = this.props.Login.masterData.registrationSubTypeValue.value;\n        this.props.getCopyUserMappingSubType(comboData, nregsubtypecode, selectedRecord, this.props.Login.userInfo, this.props.Login.masterData, this.props.Login.optCopyRegType);\n      } else {\n        if (comboData) {\n          selectedRecord[comboName] = comboData;\n          this.setState({\n            selectedRecord\n          });\n        } else {\n          selectedRecord[comboName] = [];\n          this.setState({\n            selectedRecord,\n            availableQB: []\n          });\n        }\n      }\n    };\n\n    this.onFilterComboChange = (comboData, fieldName) => {\n      const selectedRecord = this.state.selectedRecord || {};\n      let registrationTypeValue = this.props.Login.masterData.registrationTypeValue;\n      let registrationSubTypeValue = this.props.Login.masterData.registrationSubTypeValue;\n      let templateVersionValue = this.props.Login.masterData.templateVersionValue;\n\n      if (comboData) {\n        selectedRecord[fieldName] = comboData.value;\n        let inputParamData = {};\n\n        if (fieldName === 'napprovalsubtypecode') {\n          this.approvalSubTypeValue = comboData;\n          inputParamData = {\n            nFlag: 2,\n            napprovalsubtypecode: comboData.value,\n            ntemplatecode: comboData.item.ntemplatecode,\n            userinfo: this.props.Login.userInfo\n          };\n        } else if (fieldName === 'nregtypecode') {\n          registrationTypeValue = comboData;\n          inputParamData = {\n            nFlag: 3,\n            napprovalsubtypecode: this.approvalSubTypeValue.value,\n            ntemplatecode: this.approvalSubTypeValue.item.ntemplatecode,\n            nregtypecode: comboData.value,\n            userinfo: this.props.Login.userInfo\n          };\n        } else if (fieldName === 'nregsubtypecode') {\n          registrationSubTypeValue = comboData;\n          inputParamData = {\n            nFlag: 4,\n            napprovalsubtypecode: this.approvalSubTypeValue.value,\n            nregtypecode: registrationTypeValue.value,\n            nregsubtypecode: comboData.value,\n            ntemplatecode: this.approvalSubTypeValue.item.ntemplatecode,\n            userinfo: this.props.Login.userInfo\n          };\n        } else {\n          this.templateVersionValue = comboData;\n          templateVersionValue = comboData;\n          inputParamData = {\n            nFlag: 5,\n            napprovalsubtypecode: this.approvalSubTypeValue.value,\n            nregtypecode: this.approvalSubTypeValue.value === 2 ? registrationTypeValue.value : -1,\n            nregsubtypecode: this.approvalSubTypeValue.value === 2 ? registrationSubTypeValue.value : -1,\n            ntemplatecode: this.approvalSubTypeValue.item.ntemplatecode,\n            nversioncode: comboData.value,\n            userinfo: this.props.Login.userInfo\n          };\n        }\n\n        const oldState = {\n          Approvalsubtype: this.props.Login.masterData.Approvalsubtype,\n          RegistrationType: this.props.Login.masterData.RegistrationType,\n          RegistrationSubType: this.props.Login.masterData.RegistrationSubType,\n          TreeVersion: this.props.Login.masterData.TreeVersion,\n          approvalSubTypeValue: this.approvalSubTypeValue,\n          registrationTypeValue,\n          registrationSubTypeValue,\n          templateVersionValue,\n          RegistrationTypeList: this.state.RegistrationTypeList,\n          RegistrationSubTypeList: this.state.RegistrationSubTypeList,\n          templateVersionOptionList: this.state.templateVersionOptionList\n        };\n        this.props.getUserMappingFilterChange(inputParamData, oldState, this.props.Login.masterData);\n      } else {\n        selectedRecord[fieldName] = \"\";\n\n        if (fieldName === 'napprovalsubtypecode') {\n          this.approvalSubTypeValue = [];\n          registrationTypeValue = [];\n          registrationSubTypeValue = [];\n          templateVersionValue = [];\n        } else if (fieldName === 'nregtypecode') {\n          registrationTypeValue = [];\n          registrationSubTypeValue = [];\n          templateVersionValue = [];\n        } else if (fieldName === 'nregsubtypecode') {\n          registrationSubTypeValue = [];\n          templateVersionValue = [];\n        } else {\n          templateVersionValue = [];\n          this.templateVersionValue = [];\n        }\n\n        this.setState({\n          selectedRecord\n        });\n      }\n    };\n\n    this.onInputOnChange = event => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (event.target.type === 'checkbox') {\n        selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\n      } else {\n        selectedRecord[event.target.name] = event.target.value;\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.changeViewMode = event => {\n      event.target.checked === true ? this.setState({\n        viewMode: \"Grid\"\n      }) : this.setState({\n        viewMode: \"List\"\n      });\n    };\n\n    this.copyData = () => {\n      let napprovalsubtypecode = this.approvalSubTypeValue.value;\n      let nregsubtypecode = this.props.Login.masterData.registrationSubTypeValue.value;\n      this.props.getCopyUserMapping(napprovalsubtypecode, nregsubtypecode, this.props.Login.userInfo, this.props.Login.masterData);\n    };\n\n    this.userSearchFilterChange = (comboData, comboName) => {\n      let {\n        selectedRecord,\n        userList\n      } = this.state || [];\n\n      if (comboData) {\n        if (comboName === 'nuserrolecode') {\n          let roleUsers = [];\n          this.props.Login.userTree.map(x => {\n            if (x.nchildrolecode === comboData.value && !roleUsers.find(y => y.nchildusercode === x.nchildusercode)) {\n              roleUsers.push(x);\n            }\n\n            return null;\n          });\n          const userMap = constructOptionList(roleUsers, \"nusermappingcode\", \"username\", undefined, undefined, true);\n          userList = userMap.get(\"OptionList\");\n          selectedRecord[\"filteredRole\"] = comboData;\n          selectedRecord[\"filteredUser\"] = null;\n        } else {\n          selectedRecord[\"filteredUser\"] = comboData;\n        }\n      } else {\n        if (comboName === 'nuserrolecode') {\n          selectedRecord[\"filteredRole\"] = comboData;\n          selectedRecord[\"filteredUser\"] = null;\n          userList = [];\n        } else {\n          selectedRecord[\"filteredUser\"] = comboData;\n        }\n      }\n\n      this.setState({\n        selectedRecord,\n        userList\n      });\n    };\n\n    this.filterTree = () => {\n      if (this.state.selectedRecord.filteredRole) {\n        if (this.state.selectedRecord.filteredUser) {\n          let siteName = this.props.Login.masterData.selectedSite ? this.props.Login.masterData.selectedSite.ssitename : \"\";\n          let data = {\n            id: 0,\n            label: /*#__PURE__*/React.createElement(\"div\", {\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 1286,\n                columnNumber: 25\n              }\n            }, /*#__PURE__*/React.createElement(AtHeader, {\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 1287,\n                columnNumber: 29\n              }\n            }, /*#__PURE__*/React.createElement(Media, {\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 1288,\n                columnNumber: 33\n              }\n            }, /*#__PURE__*/React.createElement(\"span\", {\n              className: \"img-profile rounded-circle mr-2\",\n              style: {\n                background: \"#e7e6f5\",\n                borderRadius: \"50%\",\n                border: \"1px solid #cbc5f7\",\n                color: \"#6554c0\",\n                padding: \"3px\"\n              },\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 1289,\n                columnNumber: 37\n              }\n            }, siteName.split(\" \").length > 1 ? siteName.split(\" \")[0].substring(0, 1).toUpperCase() + \"\" + siteName.split(\" \")[1].substring(0, 1).toUpperCase() : siteName.split(\" \")[0].substring(0, 1).toUpperCase()), /*#__PURE__*/React.createElement(Media.Body, {\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 1305,\n                columnNumber: 37\n              }\n            }, /*#__PURE__*/React.createElement(\"span\", {\n              className: \"role\",\n              style: {\n                paddingTop: \"6px\"\n              },\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 1307,\n                columnNumber: 41\n              }\n            }, siteName))))),\n            children: this.getRoottree(this.props.Login.userTree || [], -2, true)\n          };\n          this.setState({\n            data\n          });\n        } else {\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_SELECTAUSERTOSEARCH\"\n          }));\n        }\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTAUSERROLETOSEARCH\"\n        }));\n      }\n    };\n\n    this.clearFilter = () => {\n      let {\n        selectedRecord,\n        userList\n      } = this.state;\n      selectedRecord[\"filteredUser\"] = null;\n      selectedRecord[\"filteredRole\"] = null;\n      userList = [];\n      let siteName = this.props.Login.masterData.selectedSite ? this.props.Login.masterData.selectedSite.ssitename : \"\";\n      let data = {\n        id: 0,\n        label: /*#__PURE__*/React.createElement(\"div\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1334,\n            columnNumber: 17\n          }\n        }, /*#__PURE__*/React.createElement(AtHeader, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1335,\n            columnNumber: 21\n          }\n        }, /*#__PURE__*/React.createElement(Media, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1336,\n            columnNumber: 25\n          }\n        }, /*#__PURE__*/React.createElement(\"span\", {\n          className: \"img-profile rounded-circle mr-2\",\n          style: {\n            background: \"#e7e6f5\",\n            borderRadius: \"50%\",\n            border: \"1px solid #cbc5f7\",\n            color: \"#6554c0\",\n            padding: \"3px\"\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1337,\n            columnNumber: 29\n          }\n        }, siteName.split(\" \").length > 1 ? siteName.split(\" \")[0].substring(0, 1).toUpperCase() + \"\" + siteName.split(\" \")[1].substring(0, 1).toUpperCase() : siteName.split(\" \")[0].substring(0, 1).toUpperCase()), /*#__PURE__*/React.createElement(Media.Body, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1353,\n            columnNumber: 29\n          }\n        }, /*#__PURE__*/React.createElement(\"span\", {\n          className: \"role\",\n          style: {\n            paddingTop: \"6px\"\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1354,\n            columnNumber: 33\n          }\n        }, siteName))))),\n        children: this.getRoottree(this.props.Login.userTree || [], -2, false)\n      };\n      this.setState({\n        data,\n        selectedRecord,\n        userList\n      });\n    };\n\n    this.collapseAll = () => {\n      this.setState({\n        expanded: !this.state.expanded\n      });\n    };\n\n    this.formRef = React.createRef();\n    this.searchRef = React.createRef();\n    this.confirmMessage = new ConfirmMessage();\n    const _dataState = {\n      skip: 0,\n      take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n    };\n    this.state = {\n      masterStatus: \"\",\n      error: \"\",\n      selectedRecord: {},\n      dataResult: [],\n      dataState: {\n        0: _dataState\n      },\n      userRoleControlRights: [],\n      controlMap: new Map(),\n      ApprovalsubtypeList: [],\n      RegistrationTypeList: [],\n      RegistrationSubTypeList: [],\n      templateVersionOptionList: [],\n      userRoleList: [],\n      userList: [],\n      data: [],\n      a: 0.5,\n      b: 0.5,\n      scale: 1,\n      expanded: false //dataResult:{}\n\n    };\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\n      toast.warn(props.Login.masterStatus);\n      props.Login.masterStatus = \"\";\n    }\n\n    if (props.Login.error !== state.error) {\n      toast.error(props.Login.error);\n      props.Login.error = \"\";\n    }\n\n    if (props.Login.multilingualError && props.Login.multilingualError !== \"\") {\n      toast.warn(props.intl.formatMessage({\n        id: props.Login.multilingualError\n      }));\n      props.Login.multilingualError = \"\";\n    }\n\n    if (props.Login.dataState === undefined) {\n      props.Login.dataState = undefined;\n    }\n\n    if (props.Login.selectedRecord === undefined) {\n      return {\n        selectedRecord: {}\n      };\n    }\n\n    return null;\n  }\n\n  columnProps(field, nuserrolecode) {\n    return {\n      field: field,\n      columnMenu: ColumnMenu,\n      headerClassName: this.isColumnActive(field, this.state.dataState, nuserrolecode) ? 'active' : ''\n    };\n  }\n\n  isColumnActive(field, dataState, nuserrolecode) {\n    return GridColumnMenuFilter.active(field, dataState[nuserrolecode] ? dataState[nuserrolecode].filter : dataState['0'].filter);\n  }\n\n  render() {\n    loadMessages(messages[this.props.Login.userInfo.slanguagetypecode], \"lang\");\n    const extractedColumnList = [{\n      \"idsName\": \"IDS_USERNAME\",\n      \"dataField\": \"Name\",\n      \"width\": \"35%\"\n    }, {\n      \"idsName\": \"IDS_LOGINID\",\n      \"dataField\": \"LoginId\",\n      \"width\": \"35%\"\n    }, {\n      \"idsName\": \"IDS_DEPARTMENT\",\n      \"dataField\": \"sdeptname\",\n      \"width\": \"10%\"\n    }];\n    const addId = this.state.controlMap.has(\"AddUserMapping\") && this.state.controlMap.get(\"AddUserMapping\").ncontrolcode;\n    const deleteId = this.state.controlMap.has(\"DeleteUserMapping\") && this.state.controlMap.get(\"DeleteUserMapping\").ncontrolcode;\n    const copyId = this.state.controlMap.has(\"CopyUserMapping\") && this.state.controlMap.get(\"CopyUserMapping\").ncontrolcode; //  let approvalSubTypes = this.props.Login.masterData.Approvalsubtype ? sortData(this.props.Login.masterData.Approvalsubtype, 'ascending', 'ntemplatecode') : [];\n\n    let approvalSubTypes = this.state.ApprovalsubtypeList ? this.state.ApprovalsubtypeList : [];\n    this.approvalSubTypeValue = this.props.Login.masterData.approvalSubTypeValue ? this.props.Login.masterData.approvalSubTypeValue : approvalSubTypes.length > 0 ? approvalSubTypes[0] : {};\n    this.templateVersionValue = this.props.Login.masterData.templateVersionValue ? this.props.Login.masterData.templateVersionValue : this.props.Login.masterData.TreeVersion ? this.props.Login.masterData.TreeVersion.length > 0 ? {\n      value: this.props.Login.masterData.TreeVersion[0].ntreeversiontempcode,\n      label: this.props.Login.masterData.TreeVersion[0].sversiondescription,\n      item: this.props.Login.masterData.TreeVersion[0]\n    } : {} : {};\n    const userRole = this.props.Login.masterData.UserRole ? sortData(this.props.Login.masterData.UserRole, 'ascending', 'nlevelno') : [];\n    const filterParam = {\n      inputListName: \"Site\",\n      selectedObject: \"selectedSite\",\n      primaryKeyField: \"nsitecode\",\n      fetchUrl: \"usermapping/getUserMappingBySite\",\n      fecthInputObject: {\n        nversioncode: this.templateVersionValue ? this.templateVersionValue.value : -1,\n        userinfo: this.props.Login.userInfo\n      },\n      unchangeList: [\"TreeVersion\", \"templateVersionValue\", \"Approvalsubtype\", \"approvalSubTypeValue\", \"RegistrationType\", \"registrationTypeValue\", \"RegistrationSubType\", \"registrationSubTypeValue\"],\n      masterData: this.props.Login.masterData\n    };\n    let mandatoryFields = [{\n      \"idsName\": \"IDS_USERS\",\n      \"dataField\": \"nusercode\",\n      \"mandatoryLabel\": \"IDS_SELECT\",\n      \"controlType\": \"selectbox\"\n    }];\n\n    if (this.props.Login.operation === 'copy') {\n      mandatoryFields = [{\n        \"idsName\": \"IDS_REGISTRATIONTYPE\",\n        \"dataField\": \"regtype\",\n        \"mandatoryLabel\": \"IDS_SELECT\",\n        \"controlType\": \"selectbox\"\n      }, {\n        \"idsName\": \"IDS_REGISTRATIONSUBTYPE\",\n        \"dataField\": \"regsubtype\",\n        \"mandatoryLabel\": \"IDS_SELECT\",\n        \"controlType\": \"selectbox\"\n      }];\n    }\n\n    let breadCrumbData = [];\n\n    if (this.props.Login.masterData.realApprovalSubTypeValue && this.props.Login.masterData.realApprovalSubTypeValue.value === ApprovalSubType.TESTRESULTAPPROVAL) {\n      breadCrumbData = [{\n        \"label\": \"IDS_APPROVALSUBTYPE\",\n        \"value\": this.props.Login.masterData.realApprovalSubTypeValue ? this.props.Login.masterData.realApprovalSubTypeValue.label : \"NA\"\n      }, {\n        \"label\": \"IDS_REGISTRATIONTYPE\",\n        \"value\": this.props.Login.masterData.realRegistrationTypeValue ? this.props.Login.masterData.realRegistrationTypeValue.label : \"NA\"\n      }, {\n        \"label\": \"IDS_REGISTRATIONSUBTYPE\",\n        \"value\": this.props.Login.masterData.realRegistrationSubTypeValue ? this.props.Login.masterData.realRegistrationSubTypeValue.label : \"NA\"\n      }, {\n        \"label\": \"IDS_USERROLETEMPLATE\",\n        \"value\": this.props.Login.masterData.realTemplateVersionValue ? this.props.Login.masterData.realTemplateVersionValue.label : \"NA\"\n      }];\n    } else {\n      breadCrumbData = [{\n        \"label\": \"IDS_APPROVALSUBTYPE\",\n        \"value\": this.props.Login.masterData.realApprovalSubTypeValue ? this.props.Login.masterData.realApprovalSubTypeValue.label : \"NA\"\n      }, {\n        \"label\": \"IDS_USERROLETEMPLATE\",\n        \"value\": this.props.Login.masterData.realTemplateVersionValue ? this.props.Login.masterData.realTemplateVersionValue.label : \"NA\"\n      }];\n    }\n\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"client-listing-wrap mtop-fixed-breadcrumb fixed_breadcrumd\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 480,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Affix, {\n      top: 53,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 481,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(BreadcrumbComponent, {\n      breadCrumbItem: breadCrumbData,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 482,\n        columnNumber: 25\n      }\n    })), /*#__PURE__*/React.createElement(Row, {\n      noGutters: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 484,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 4,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 485,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(ListMaster //filterColumnData ={(filterValue)=>this.props.filterApprovalConfigColumnData(filterValue,this.props.Login.masterData,this.props.Login.userInfo,this.approvalSubTypeValue.value)}\n    , {\n      masterData: this.props.Login.masterData,\n      userInfo: this.props.Login.userInfo,\n      screenName: this.props.intl.formatMessage({\n        id: \"IDS_USERMAPPING\"\n      }),\n      masterList: this.props.Login.masterData.searchedData || this.props.Login.masterData.Site,\n      getMasterDetail: site => this.props.getUserMappingBySite(site, this.templateVersionValue.value, this.props.Login.userInfo, this.props.Login.masterData),\n      selectedMaster: this.props.Login.masterData.selectedSite,\n      primaryKeyField: \"nsitecode\",\n      mainField: \"ssitename\" //firstField=\"ssiteaddress\"\n      ,\n      userRoleControlRights: this.state.userRoleControlRights,\n      addId: -1,\n      hidePaging: true,\n      reloadData: this.getUserMapping,\n      searchRef: this.searchRef,\n      filterParam: filterParam,\n      filterColumnData: this.props.filterColumnData,\n      copyId: copyId,\n      showCopy: this.approvalSubTypeValue.value === ApprovalSubType.TESTRESULTAPPROVAL,\n      copyData: this.copyData,\n      showGraphView: true,\n      hideSearch: false,\n      getGraphView: () => this.props.getUserMappingGraphView(this.props.Login.masterData.selectedSite, this.templateVersionValue.value, this.props.Login.userInfo),\n      needAccordianFilter: false,\n      showFilterIcon: true,\n      onFilterSubmit: this.getUserMapping,\n      filterComponent: [{\n        \"IDS_FILTER\": /*#__PURE__*/React.createElement(UserMappingFilter, {\n          selectedRecord: this.state.selectedRecord || {},\n          filterComboChange: this.onFilterComboChange,\n          templateVersionOptions: this.state.templateVersionOptionList,\n          templateVersionValue: this.templateVersionValue,\n          Approvalsubtype: this.state.ApprovalsubtypeList,\n          approvalSubTypeValue: this.approvalSubTypeValue,\n          RegistrationType: this.state.RegistrationTypeList,\n          registrationTypeValue: this.props.Login.masterData.registrationTypeValue,\n          RegistrationSubType: this.state.RegistrationSubTypeList,\n          registrationSubTypeValue: this.props.Login.masterData.registrationSubTypeValue,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 516,\n            columnNumber: 45\n          }\n        })\n      }],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 486,\n        columnNumber: 29\n      }\n    })), /*#__PURE__*/React.createElement(Col, {\n      md: 8,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 532,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(ContentPanel, {\n      className: \"panel-main-content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 533,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 534,\n        columnNumber: 33\n      }\n    }, userRole.map((role, index) => /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 536,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(SearchAdd, {\n      className: \"d-flex justify-content-between\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 537,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(MediaHeader, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 538,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(\"h4\", {\n      style: {\n        fontWeight: \"bold\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 539,\n        columnNumber: 53\n      }\n    }, role.suserrolename)), /*#__PURE__*/React.createElement(Button, {\n      id: `adduser_${role.nuserrolecode}`,\n      className: \"btn btn-circle solid-blue\",\n      role: \"button\",\n      hidden: this.state.userRoleControlRights.indexOf(addId) === -1,\n      onClick: () => this.props.openUserMappingModal(role, this.props.Login.masterData.selectedSite.nsitecode, this.props.Login.masterData[`selectedUser_${role.nlevelno === 1 ? role.nuserrolecode : role.nparentrolecode}`], this.templateVersionValue.value, this.props.Login.userInfo, this.props.Login.masterData, userRole.filter(x => x.nuserrolecode === role.nparentrolecode).length > 0 ? userRole.filter(x => x.nuserrolecode === role.nparentrolecode)[0].suserrolename : \"\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 541,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faPlus,\n      title: this.props.intl.formatMessage({\n        id: \"IDS_ADD\"\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 550,\n        columnNumber: 53\n      }\n    }))), /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 553,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 554,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(AtTableWrap, {\n      className: \"at-list-table\",\n      actionColWidth: this.props.actionColWidth ? this.props.actionColWidth : \"150px\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 556,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(LocalizationProvider, {\n      language: \"lang\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 558,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(Grid, Object.assign({\n      key: role.nuserrolecode,\n      data: this.state.dataResult[`${role.nuserrolecode}`],\n      onRowClick: user => this.props.getChildUsers(user.dataItem, role, this.props.Login.masterData.selectedSite.nsitecode, this.templateVersionValue.value, this.props.Login.userInfo, this.props.Login.masterData, this.state.dataState, userRole),\n      selectedField: \"selected\",\n      style: {\n        minHeight: '20em'\n      },\n      onDataStateChange: event => this.dataStateChange(event, role.nuserrolecode),\n      resizable: true,\n      reorderable: true,\n      scrollable: true,\n      sortable: true,\n      pageable: {\n        buttonCount: 2,\n        pageSizes: this.props.Login.settings && this.props.Login.settings[15].split(\",\").map(setting => parseInt(setting)),\n        previousNext: false\n      }\n    }, this.state.dataState[role.nuserrolecode] ? this.state.dataState[role.nuserrolecode] : this.state.dataState['0'], {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 559,\n        columnNumber: 61\n      }\n    }), extractedColumnList.map((item, key) => /*#__PURE__*/React.createElement(GridColumn, Object.assign({\n      key: key,\n      title: this.props.intl.formatMessage({\n        id: item.idsName\n      }),\n      field: item.dataField\n    }, this.columnProps(item.dataField, role.nuserrolecode), {\n      cell: row => /*#__PURE__*/React.createElement(\"td\", {\n        \"data-tip\": row[\"dataItem\"][item.dataField] //  data-for=\"tooltip-grid-wrap\" \n        ,\n        className: this.props.Login.masterData[`selectedUser_${role.nuserrolecode}`].nusermappingcode === row[\"dataItem\"]['nusermappingcode'] ? 'active' : '',\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 582,\n          columnNumber: 77\n        }\n      }, row[\"dataItem\"][item.dataField]),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 578,\n        columnNumber: 69\n      }\n    }))), /*#__PURE__*/React.createElement(GridColumn, {\n      locked: true,\n      headerClassName: \"text-center\",\n      sort: false,\n      title: this.props.intl.formatMessage({\n        id: 'IDS_ACTION'\n      }),\n      cell: row => /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 591,\n          columnNumber: 73\n        }\n      }, /*#__PURE__*/React.createElement(Nav.Link, {\n        className: \"action-icons-wrap text-center\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 592,\n          columnNumber: 77\n        }\n      }, /*#__PURE__*/React.createElement(FontIconWrap, {\n        className: \"d-font-icon\",\n        \"data-tip\": this.props.intl.formatMessage({\n          id: \"IDS_DELETE\"\n        }),\n        \"data-place\": \"left\",\n        title: this.props.intl.formatMessage({\n          id: \"IDS_DELETE\"\n        }),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 593,\n          columnNumber: 81\n        }\n      }, /*#__PURE__*/React.createElement(ConfirmDialog, {\n        name: \"deleteMessage\",\n        message: this.props.intl.formatMessage({\n          id: \"IDS_DEFAULTCONFIRMMSG\"\n        }),\n        doLabel: this.props.intl.formatMessage({\n          id: \"IDS_OK\"\n        }),\n        doNotLabel: this.props.intl.formatMessage({\n          id: \"IDS_CANCEL\"\n        }),\n        icon: faTrashAlt // title={this.props.intl.formatMessage({ id: \"IDS_DELETE\" })}\n        ,\n        hidden: this.state.userRoleControlRights.indexOf(deleteId) === -1,\n        handleClickDelete: () => this.deleteUsers(deleteId, row['dataItem'].nusermappingcode, row['dataItem'].nparusermappingcode, role),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 596,\n          columnNumber: 85\n        }\n      })), userRole.length - 1 === index ? \"\" : /*#__PURE__*/React.createElement(FontIconWrap, {\n        className: \"d-font-icon\",\n        onClick: () => this.props.getUserMappingGraphView(this.props.Login.masterData.selectedSite, this.templateVersionValue.value, this.props.Login.userInfo, row['dataItem'], role),\n        \"data-tip\": this.props.intl.formatMessage({\n          id: \"IDS_GRAPH\"\n        }),\n        \"data-place\": \"left\",\n        title: this.props.intl.formatMessage({\n          id: \"IDS_GRAPH\"\n        }),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 608,\n          columnNumber: 85\n        }\n      }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n        icon: faSitemap,\n        className: \"fa-rotate-270\" // onClick={() => this.props.getUserMappingGraphView(\n        //     this.props.Login.masterData.selectedSite, this.templateVersionValue.value,\n        //     this.props.Login.userInfo, row['dataItem'], role)}\n        // title={this.props.intl.formatMessage({ id: \"IDS_GRAPH\" })}\n        ,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 614,\n          columnNumber: 89\n        }\n      })))),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 589,\n        columnNumber: 65\n      }\n    }))))))))))))), this.props.Login.openModal ? /*#__PURE__*/React.createElement(SlideOutModal, {\n      onSaveClick: this.onSaveClick,\n      operation: this.props.Login.operation,\n      screenName: this.props.Login.graphView ? \"IDS_USERMAPPING\" : this.props.Login.childRoleName || \"IDS_USERMAPPING\",\n      closeModal: this.closeModal,\n      show: this.props.Login.openModal,\n      inputParam: this.props.Login.inputParam,\n      esign: this.props.Login.loadEsign,\n      validateEsign: this.validateEsign,\n      masterStatus: this.props.Login.masterStatus,\n      updateStore: this.props.updateStore,\n      selectedRecord: this.state.selectedRecord || {},\n      mandatoryFields: mandatoryFields,\n      graphView: this.props.Login.graphView,\n      size: this.props.Login.graphView ? 'xl' : 'lg',\n      addComponent: this.props.Login.loadEsign ? /*#__PURE__*/React.createElement(Esign, {\n        operation: this.props.Login.operation,\n        onInputOnChange: this.onInputOnChange,\n        inputParam: this.props.Login.inputParam,\n        selectedRecord: this.state.selectedRecord || {},\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 658,\n          columnNumber: 33\n        }\n      }) : this.props.Login.operation === 'copy' ? /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 666,\n          columnNumber: 37\n        }\n      }, /*#__PURE__*/React.createElement(Col, {\n        md: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 667,\n          columnNumber: 41\n        }\n      }, this.approvalSubTypeValue.value === ApprovalSubType.TESTRESULTAPPROVAL ? /*#__PURE__*/React.createElement(React.Fragment, null, this.props.Login.optCopyRegType ? /*#__PURE__*/React.createElement(FormSelectSearch, {\n        formLabel: this.props.intl.formatMessage({\n          id: \"IDS_REGISTRATIONTYPE\"\n        }),\n        placeholder: this.props.intl.formatMessage({\n          id: \"IDS_SELECTRECORD\"\n        }),\n        name: \"regtype\",\n        optionId: \"nregtypecode\",\n        optionValue: \"sregtypename\",\n        options: this.props.Login.optCopyRegType,\n        value: this.state.selectedRecord ? this.state.selectedRecord[\"regtype\"] : this.registrationTypeValue,\n        onChange: event => this.onComboChange(event, 'regtype'),\n        isMandatory: false,\n        isMulti: false,\n        isSearchable: true,\n        isDisabled: false,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 671,\n          columnNumber: 57\n        }\n      }) : \"\", this.props.Login.optCopyRegSubType ? /*#__PURE__*/React.createElement(FormSelectSearch, {\n        formLabel: this.props.intl.formatMessage({\n          id: \"IDS_REGISTRATIONSUBTYPE\"\n        }),\n        placeholder: this.props.intl.formatMessage({\n          id: \"IDS_SELECTRECORD\"\n        }),\n        name: \"regsubtype\",\n        optionId: \"nregsubtypecode\",\n        optionValue: \"sregsubtypename\",\n        options: this.props.Login.optCopyRegSubType,\n        value: this.state.selectedRecord && this.state.selectedRecord[\"regsubtype\"],\n        isMandatory: false,\n        isMulti: false,\n        isSearchable: true,\n        isDisabled: false,\n        onChange: event => this.onComboChange(event, 'regsubtype'),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 687,\n          columnNumber: 57\n        }\n      }) : \"\") : \"\")) : this.props.Login.graphView ? /*#__PURE__*/React.createElement(UserTree, {\n        userRoleList: this.state.userRoleList,\n        userList: this.state.userList,\n        data: this.state.data,\n        expanded: this.state.expanded,\n        collapseAll: this.collapseAll,\n        selectedRecord: this.state.selectedRecord,\n        clearFilter: this.clearFilter,\n        filterTree: this.filterTree,\n        userSearchFilterChange: this.userSearchFilterChange,\n        a: this.state.a,\n        b: this.state.b,\n        scale: this.state.scale,\n        handlePanAndZoom: this.handlePanAndZoom,\n        handlePanMove: this.handlePanMove,\n        hideFilters: this.props.Login.hideFilters,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 708,\n          columnNumber: 41\n        }\n      }) : /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 726,\n          columnNumber: 41\n        }\n      }, /*#__PURE__*/React.createElement(Col, {\n        md: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 727,\n          columnNumber: 45\n        }\n      }, /*#__PURE__*/React.createElement(FormSelectSearch, {\n        name: 'users',\n        formLabel: this.props.Login.childRoleName //{this.props.intl.formatMessage({ id: \"IDS_USERS\" })}\n        // placeholder={this.props.Login.childRoleName}//{this.props.intl.formatMessage({ id: \"IDS_USERS\" })}\n        ,\n        placeholder: this.props.intl.formatMessage({\n          id: \"IDS_SELECTRECORD\"\n        }),\n        value: this.state.selectedRecord ? this.state.selectedRecord.nusercode ? this.state.selectedRecord.nusercode : [] : [],\n        options: this.props.Login.AvailableUsers ? this.props.Login.AvailableUsers : [],\n        optionId: \"id\",\n        optionValue: \"Name\",\n        isMandatory: true,\n        isMulti: true,\n        isDisabled: false,\n        isSearchable: true,\n        closeMenuOnSelect: false,\n        isClearable: true,\n        as: \"select\",\n        onChange: event => this.onComboChange(event, 'nusercode'),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 728,\n          columnNumber: 49\n        }\n      }))),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 641,\n        columnNumber: 21\n      }\n    }) : \"\");\n  }\n\n  componentDidUpdate(previousProps) {\n    ReactTooltip.rebuild();\n    let {\n      selectedRecord,\n      dataState,\n      userRoleControlRights,\n      controlMap,\n      ApprovalsubtypeList,\n      data,\n      dataResult,\n      RegistrationTypeList,\n      RegistrationSubTypeList,\n      templateVersionOptionList,\n      userRoleList\n    } = this.state;\n    let updateState = false;\n\n    if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\n      //this.setState({ selectedRecord: this.props.Login.selectedRecord });\n      selectedRecord = this.props.Login.selectedRecord;\n      updateState = true;\n    }\n\n    if (this.props.Login.userTree !== previousProps.Login.userTree) {\n      let filter = selectedRecord.filteredUser ? true : false;\n\n      if (this.props.Login.selectedTreeParent !== undefined) {\n        let status = true;\n        this.props.Login.selectedTreeParent.suserimgftp !== null && this.props.Login.files && this.props.Login.files.includes(this.props.Login.selectedTreeParent.suserimgftp) ? status = true : status = false;\n        let element = this.props.Login.selectedTreeParent;\n        data = {\n          id: this.props.Login.selectedTreeParent.nusermappingcode,\n          label: /*#__PURE__*/React.createElement(\"div\", {\n            style: {\n              userSelect: 'none'\n            },\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 775,\n              columnNumber: 25\n            }\n          }, /*#__PURE__*/React.createElement(AtHeader, {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 776,\n              columnNumber: 29\n            }\n          }, /*#__PURE__*/React.createElement(Media, {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 777,\n              columnNumber: 33\n            }\n          }, status && this.props.Login.settings && this.props.Login.settings[5] && element.suserimgftp && element.suserimgftp !== \"\" ? /*#__PURE__*/React.createElement(Image, {\n            src: this.props.Login.settings[5] + element.suserimgftp,\n            alt: \"avatar\",\n            className: \"img-profile rounded-circle mr-2\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 779,\n              columnNumber: 41\n            }\n          }) : /*#__PURE__*/React.createElement(\"span\", {\n            className: \"img-profile rounded-circle mr-2\",\n            style: {\n              background: \"#e7e6f5\",\n              borderRadius: \"50%\",\n              border: \"1px solid #cbc5f7\",\n              color: \"#6554c0\",\n              padding: \"3px\"\n            },\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 780,\n              columnNumber: 43\n            }\n          }, element.username && element.username.split(\" \").length > 1 ? element.username.split(\" \")[0].substring(0, 1).toUpperCase() + \"\" + element.username.split(\" \")[1].substring(0, 1).toUpperCase() : element.username.split(\" \")[0].substring(0, 1).toUpperCase()), /*#__PURE__*/React.createElement(Media.Body, {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 796,\n              columnNumber: 37\n            }\n          }, /*#__PURE__*/React.createElement(\"span\", {\n            className: \"user-name\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 797,\n              columnNumber: 41\n            }\n          }, element.username), /*#__PURE__*/React.createElement(\"span\", {\n            className: \"role\",\n            style: {\n              paddingTop: \"3px\"\n            },\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 798,\n              columnNumber: 41\n            }\n          }, element.suserrolename))))),\n          children: this.getRoottree(this.props.Login.userTree || [], this.props.Login.selectedTreeParent.nusermappingcode, false)\n        };\n      } else {\n        let siteName = this.props.Login.masterData.selectedSite ? this.props.Login.masterData.selectedSite.ssitename : \"\";\n        data = {\n          id: 0,\n          label: /*#__PURE__*/React.createElement(\"div\", {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 811,\n              columnNumber: 25\n            }\n          }, /*#__PURE__*/React.createElement(AtHeader, {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 812,\n              columnNumber: 29\n            }\n          }, /*#__PURE__*/React.createElement(Media, {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 813,\n              columnNumber: 33\n            }\n          }, /*#__PURE__*/React.createElement(\"span\", {\n            className: \"img-profile rounded-circle mr-2\",\n            style: {\n              background: \"#e7e6f5\",\n              borderRadius: \"50%\",\n              border: \"1px solid #cbc5f7\",\n              color: \"#6554c0\",\n              padding: \"3px\"\n            },\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 814,\n              columnNumber: 37\n            }\n          }, siteName.split(\" \").length > 1 ? siteName.split(\" \")[0].substring(0, 1).toUpperCase() + \"\" + siteName.split(\" \")[1].substring(0, 1).toUpperCase() : siteName.split(\" \")[0].substring(0, 1).toUpperCase()), /*#__PURE__*/React.createElement(Media.Body, {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 830,\n              columnNumber: 37\n            }\n          }, /*#__PURE__*/React.createElement(\"span\", {\n            className: \"role\",\n            style: {\n              paddingTop: \"6px\"\n            },\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 832,\n              columnNumber: 41\n            }\n          }, siteName))))),\n          children: this.getRoottree(this.props.Login.userTree || [], -2, filter, selectedRecord.filteredUser, selectedRecord.filteredRole)\n        };\n      }\n\n      updateState = true;\n    }\n\n    if (this.props.Login.dataState !== previousProps.Login.dataState) {\n      if (this.props.Login.dataState === undefined) {\n        // this.setState({ dataState: { '0': this.state.dataState['0'] } })\n        dataState = {\n          '0': this.state.dataState['0']\n        };\n        updateState = true;\n      } else {\n        // this.setState({ dataState: this.props.Login.dataState ? this.props.Login.dataState : this.state.dataState['0'] });\n        dataState = this.props.Login.dataState ? { ...this.props.Login.dataState\n        } : {\n          '0': this.state.dataState['0']\n        };\n        updateState = true;\n      }\n    }\n\n    if (this.props.Login.masterData !== previousProps.Login.masterData) {\n      updateState = true;\n      const userMap = constructOptionList(this.props.Login.masterData.UserRole || [], \"nuserrolecode\", \"suserrolename\", undefined, undefined, true);\n      userRoleList = userMap.get(\"OptionList\");\n      const RegistrationTypeListMap = constructOptionList(this.props.Login.masterData.RegistrationType || [], \"nregtypecode\", \"sregtypename\", 'nregtypecode', 'ascending', false);\n      const RegistrationSubTypeListMap = constructOptionList(this.props.Login.masterData.RegistrationSubType || [], \"nregsubtypecode\", \"sregsubtypename\", 'nregsubtypecode', 'ascending', false);\n      const templateVersionOptionListMap = constructOptionList(this.props.Login.masterData.TreeVersion || [], \"ntreeversiontempcode\", \"sversiondescription\", 'ntreeversiontempcode', 'decending', false);\n      RegistrationTypeList = RegistrationTypeListMap.get(\"OptionList\");\n      RegistrationSubTypeList = RegistrationSubTypeListMap.get(\"OptionList\");\n      templateVersionOptionList = templateVersionOptionListMap.get(\"OptionList\");\n    }\n\n    if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\n      userRoleControlRights = [];\n\n      if (this.props.Login.userRoleControlRights) {\n        this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item => userRoleControlRights.push(item.ncontrolcode));\n      }\n\n      controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode);\n      const ApprovalsubtypeListMap = constructOptionList(this.props.Login.masterData.Approvalsubtype || [], \"napprovalsubtypecode\", \"ssubtypename\", 'ntemplatecode', 'ascending', false);\n      const RegistrationTypeListMap = constructOptionList(this.props.Login.masterData.RegistrationType || [], \"nregtypecode\", \"sregtypename\", 'nregtypecode', 'ascending', false);\n      const RegistrationSubTypeListMap = constructOptionList(this.props.Login.masterData.RegistrationSubType || [], \"nregsubtypecode\", \"sregsubtypename\", 'nregsubtypecode', 'ascending', false);\n      const templateVersionOptionListMap = constructOptionList(this.props.Login.masterData.TreeVersion || [], \"ntreeversiontempcode\", \"sversiondescription\", 'ntreeversiontempcode', 'decending', false);\n      ApprovalsubtypeList = ApprovalsubtypeListMap.get(\"OptionList\");\n      RegistrationTypeList = RegistrationTypeListMap.get(\"OptionList\");\n      RegistrationSubTypeList = RegistrationSubTypeListMap.get(\"OptionList\");\n      templateVersionOptionList = templateVersionOptionListMap.get(\"OptionList\"); //this.setState({userRoleControlRights, controlMap, ApprovalsubtypeList, RegistrationTypeList, RegistrationSubTypeList, templateVersionOptionList});\n\n      updateState = true;\n    }\n\n    if (updateState) {\n      const userRole = this.props.Login.masterData.UserRole ? sortData(this.props.Login.masterData.UserRole, 'ascending', 'nlevelno') : [];\n      userRole.map(role => {\n        let roleUsers = this.props.Login.masterData[`${role.nuserrolecode}`] ? sortData(this.props.Login.masterData[`${role.nuserrolecode}`], 'descending', 'nusermappingcode') : [];\n        dataResult[`${role.nuserrolecode}`] = process(roleUsers.map(item => ({ ...item,\n          selected: item.nusermappingcode === this.props.Login.masterData[`selectedUser_${role.nuserrolecode}`].nusermappingcode\n        })), dataState[role.nuserrolecode] ? dataState[role.nuserrolecode] : dataState['0']);\n        return null;\n      });\n      this.setState({\n        selectedRecord,\n        dataState,\n        userRoleControlRights,\n        controlMap,\n        ApprovalsubtypeList,\n        data,\n        RegistrationTypeList,\n        RegistrationSubTypeList,\n        templateVersionOptionList,\n        userRoleList\n      });\n    }\n  }\n\n  getRoottree(master, parent, filter, user, role) {\n    let child = [];\n    this.child = [];\n    let userTree = this.props.Login.userTree ? this.props.Login.userTree : [];\n    let fiteredUserParentRole = [];\n    let fiteredUserParentUser = [];\n    let filteredUser = this.state.selectedRecord.filteredUser || user;\n    let filteredRole = this.state.selectedRecord.filteredRole || role;\n\n    if (filter) {\n      this.props.Login.userTree.map(y => {\n        if (filteredRole && y.nchildrolecode === filteredRole.value && y.nchildusercode === filteredUser.item.nchildusercode) {\n          fiteredUserParentRole.push(y.nparentrolecode);\n        }\n\n        if (y.nchildusercode === filteredUser.item.nchildusercode) {\n          fiteredUserParentUser.push(y.nparentusercode);\n        }\n\n        return null;\n      });\n    }\n\n    userTree.forEach((element, index) => {\n      const labelColor = ['#e63109', '#2fb47d', '#eaa203', '#6554c0'];\n      const labelBGColor = ['#fcd7cd', '#e5f8f1', '#fcf3dd', '#e7e6f5'];\n      const borderColor = ['#e6310', '#c6f6e4', '#fde2a4', '#cbc5f7'];\n\n      if (element.nparusermappingcode === parent) {\n        let status = true;\n        element.suserimgftp !== null && this.props.Login.files && this.props.Login.files.includes(element.suserimgftp) ? status = true : status = false;\n\n        if (filteredRole && element.nchildrolecode === filteredRole.value) {\n          if (filteredUser && element.nchildusercode === filteredUser.item.nchildusercode) {\n            child.push({\n              id: element.nusermappingcode,\n              label: /*#__PURE__*/React.createElement(\"div\", {\n                style: {\n                  userSelect: 'none'\n                },\n                __self: this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 1120,\n                  columnNumber: 37\n                }\n              }, /*#__PURE__*/React.createElement(AtHeader, {\n                __self: this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 1121,\n                  columnNumber: 41\n                }\n              }, /*#__PURE__*/React.createElement(Media, {\n                __self: this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 1122,\n                  columnNumber: 45\n                }\n              }, status && this.props.Login.settings && this.props.Login.settings[5] && element.suserimgftp && element.suserimgftp !== \"\" ? /*#__PURE__*/React.createElement(Image, {\n                src: this.props.Login.settings[5] + element.suserimgftp,\n                alt: \"avatar\",\n                className: \"img-profile rounded-circle mr-2\",\n                __self: this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 1124,\n                  columnNumber: 53\n                }\n              }) : /*#__PURE__*/React.createElement(\"span\", {\n                className: \"img-profile rounded-circle mr-2\",\n                style: {\n                  background: labelBGColor[index % 4],\n                  borderRadius: \"50%\",\n                  border: `1px solid ${borderColor[index % 4]}`,\n                  color: labelColor[index % 4],\n                  padding: \"3px\"\n                },\n                __self: this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 1125,\n                  columnNumber: 55\n                }\n              }, element.username && // element.username.split(\" \")[0].substring(0, 1).toUpperCase()\n              element.username.split(\" \").length > 1 ? element.username.split(\" \")[0].substring(0, 1).toUpperCase() + \"\" + element.username.split(\" \")[1].substring(0, 1).toUpperCase() : element.username.split(\" \")[0].substring(0, 1).toUpperCase()), /*#__PURE__*/React.createElement(Media.Body, {\n                __self: this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 1143,\n                  columnNumber: 49\n                }\n              }, /*#__PURE__*/React.createElement(\"span\", {\n                className: \"user-name\",\n                __self: this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 1144,\n                  columnNumber: 53\n                }\n              }, element.username), /*#__PURE__*/React.createElement(\"span\", {\n                className: \"role\",\n                style: {\n                  paddingTop: \"3px\"\n                },\n                __self: this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 1145,\n                  columnNumber: 53\n                }\n              }, element.suserrolename))))),\n              children: this.getRoottree(this.props.Login.userTree, element.nusermappingcode, filter, user, role)\n            });\n          }\n        } else {\n          child.push({\n            id: element.nusermappingcode,\n            label: /*#__PURE__*/React.createElement(\"div\", {\n              style: {\n                userSelect: 'none'\n              },\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 1161,\n                columnNumber: 33\n              }\n            }, /*#__PURE__*/React.createElement(AtHeader, {\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 1203,\n                columnNumber: 37\n              }\n            }, /*#__PURE__*/React.createElement(Media, {\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 1204,\n                columnNumber: 41\n              }\n            }, status && this.props.Login.settings && this.props.Login.settings[5] && element.suserimgftp && element.suserimgftp !== \"\" ? /*#__PURE__*/React.createElement(Image, {\n              src: this.props.Login.settings[5] + element.suserimgftp,\n              alt: \"avatar\",\n              className: \"img-profile rounded-circle mr-2\",\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 1206,\n                columnNumber: 49\n              }\n            }) : /*#__PURE__*/React.createElement(\"span\", {\n              className: \"img-profile rounded-circle mr-2\",\n              style: {\n                background: labelBGColor[index % 4],\n                borderRadius: \"50%\",\n                border: `1px solid ${borderColor[index % 4]}`,\n                color: labelColor[index % 4],\n                padding: \"3px\"\n              },\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 1207,\n                columnNumber: 51\n              }\n            }, element.username && // element.username.split(\" \")[0].substring(0, 1).toUpperCase()\n            element.username.split(\" \").length > 1 ? element.username.split(\" \")[0].substring(0, 1).toUpperCase() + \"\" + element.username.split(\" \")[1].substring(0, 1).toUpperCase() : element.username.split(\" \")[0].substring(0, 1).toUpperCase()), /*#__PURE__*/React.createElement(Media.Body, {\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 1225,\n                columnNumber: 45\n              }\n            }, /*#__PURE__*/React.createElement(\"span\", {\n              className: \"user-name\",\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 1226,\n                columnNumber: 49\n              }\n            }, element.username), /*#__PURE__*/React.createElement(\"span\", {\n              className: \"role\",\n              style: {\n                paddingTop: \"3px\"\n              },\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 1227,\n                columnNumber: 49\n              }\n            }, element.suserrolename))))),\n            children: this.getRoottree(this.props.Login.userTree, element.nusermappingcode, filter, user, role)\n          });\n        }\n      }\n    });\n    return child;\n  }\n\n  addDefaultSrc(ev) {\n    ev.target.src = fileViewUrl() + \"/SharedFolder/Default-User-Image.png\";\n  } // getchildtree(master, parent, child) {\n  //     this.props.Login.userTree && this.props.Login.userTree.forEach(element => {\n  //         if (element.nparusermappingcode === parent) {\n  //             this.child.push(\n  //                 {\n  //                     id: element.nusermappingcode,\n  //                     label:\n  //                         <div className=\"d-flex justify-content-between\" style={{ userSelect: 'none' }}>\n  //                             <Row>\n  //                                 <Col md={12}>\n  //                                     {element.suserimgftp === null ?\n  //                                         <FontAwesomeIcon icon={faUserAlt}></FontAwesomeIcon> :\n  //                                         <img\n  //                                             src={fileViewUrl + \"/SharedFolder////\" + element.suserimgftp}\n  //                                             alt={\"userimg\"}\n  //                                             // onClick={() => window.open(signImgPath, '_blank')}\n  //                                             title={element.suserimgname}\n  //                                             style={{ borderRadius: \"50%\", width: \"30px\" }}\n  //                                         />\n  //                                     }\n  //                                 </Col>\n  //                                 <Col md={11}>\n  //                                     {element.username} <br /> {element.suserrolename}\n  //                                 </Col>\n  //                             </Row>\n  //                         </div>,\n  //                     children: this.getchildtree(this.props.Login.userTree, element.nusermappingcode)\n  //                 }\n  //             )\n  //         }\n  //     })\n  //     return child;\n  // }\n\n\n}\n\nexport default connect(mapStateToProps, {\n  callService,\n  crudMaster,\n  openUserMappingModal,\n  updateStore,\n  getUserMappingGraphView,\n  getCopyUserMapping,\n  getUserMappingFilterChange,\n  getUserMappingBySite,\n  getChildUsers,\n  validateEsignCredential,\n  filterColumnData,\n  getCopyUserMappingSubType,\n  getUserMapping\n})(injectIntl(UserMapping));","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/pages/organisation/usermapping/UserMapping.jsx"],"names":["React","connect","toast","Row","Col","Nav","Button","Image","Media","DEFAULT_RETURN","injectIntl","callService","crudMaster","getUserMappingFilterChange","getUserMappingBySite","getUserMappingGraphView","getChildUsers","openUserMappingModal","updateStore","validateEsignCredential","filterColumnData","getCopyUserMapping","getCopyUserMappingSubType","getUserMapping","getControlMap","sortData","showEsign","constructOptionList","UserMappingFilter","MediaHeader","ContentPanel","FontAwesomeIcon","faPlus","faSitemap","faTrashAlt","ListMaster","SlideOutModal","Esign","FormSelectSearch","SearchAdd","ConfirmDialog","Grid","GridColumn","GridColumnMenuFilter","process","ApprovalSubType","transactionStatus","ColumnMenu","UserTree","AtTableWrap","FontIconWrap","ReactTooltip","AtHeader","ConfirmMessage","fileViewUrl","loadMessages","LocalizationProvider","messages_en","messages_de","Affix","BreadcrumbComponent","mapStateToProps","state","Login","messages","UserMapping","Component","constructor","props","handlePanAndZoom","a","b","scale","setState","handlePanMove","dataStateChange","event","nuserrolecode","dataState","dataResult","masterData","acceptCopy","saveType","inputParam","copyId","controlMap","has","get","ncontrolcode","userRoleControlRights","userInfo","nformcode","updateInfo","typeName","data","loadEsign","screenData","operation","onSaveClick","formRef","addedUsers","inputData","usermapping","ntreeversiontempcode","templateVersionValue","value","napprovalsubtypecode","approvalSubTypeValue","nregtypecode","selectedRecord","nregsubtypecode","userinfo","nsitecode","selectedSite","methodUrl","classUrl","displayName","childRole","skip","take","settings","parseInt","confirmMessage","confirm","intl","formatMessage","id","nusercode","length","map","user","push","nversioncode","napprovalconfigcode","approvalConfigCode","item","nparentrolecode","parentRole","nparentusercode","UserCode","nparentusersitecode","usersitecode","nchildrolecode","nchildusercode","nchildusersitecode","nusersitecode","nparusermappingcode","nusermappingcode","nlevel","nlevelno","nstatus","users","levelno","deleteUsers","deleteId","role","openModal","screenName","closeModal","graphView","undefined","validateEsign","sreason","password","ApprovalsubtypeList","searchRef","current","realApprovalSubTypeValue","realRegistrationTypeValue","registrationTypeValue","realRegistrationSubTypeValue","registrationSubTypeValue","realTemplateVersionValue","inputParamData","nFlag","ntemplatecode","warn","reloadData","realApprovalConfigCode","realTreeVersionTemplateValue","userroleTemplateValue","getApprovalConfigurationVersion","onComboChange","comboData","comboName","optCopyRegType","availableQB","onFilterComboChange","fieldName","oldState","Approvalsubtype","RegistrationType","RegistrationSubType","TreeVersion","RegistrationTypeList","RegistrationSubTypeList","templateVersionOptionList","onInputOnChange","target","type","name","checked","YES","NO","changeViewMode","viewMode","copyData","userSearchFilterChange","userList","roleUsers","userTree","x","find","y","userMap","filterTree","filteredRole","filteredUser","siteName","ssitename","label","background","borderRadius","border","color","padding","split","substring","toUpperCase","paddingTop","children","getRoottree","clearFilter","collapseAll","expanded","createRef","masterStatus","error","Map","userRoleList","getDerivedStateFromProps","multilingualError","columnProps","field","columnMenu","headerClassName","isColumnActive","active","filter","render","slanguagetypecode","extractedColumnList","addId","approvalSubTypes","sversiondescription","userRole","UserRole","filterParam","inputListName","selectedObject","primaryKeyField","fetchUrl","fecthInputObject","unchangeList","mandatoryFields","breadCrumbData","TESTRESULTAPPROVAL","searchedData","Site","site","index","fontWeight","suserrolename","indexOf","actionColWidth","dataItem","minHeight","buttonCount","pageSizes","setting","previousNext","key","idsName","dataField","row","childRoleName","optCopyRegSubType","hideFilters","AvailableUsers","componentDidUpdate","previousProps","rebuild","updateState","selectedTreeParent","status","suserimgftp","files","includes","element","userSelect","username","RegistrationTypeListMap","RegistrationSubTypeListMap","templateVersionOptionListMap","Object","values","ApprovalsubtypeListMap","selected","master","parent","child","fiteredUserParentRole","fiteredUserParentUser","forEach","labelColor","labelBGColor","borderColor","addDefaultSrc","ev","src"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport { connect } from 'react-redux';\r\nimport { toast } from 'react-toastify'\r\nimport { Row, Col, Nav, Button, Image, Media } from 'react-bootstrap'\r\nimport { DEFAULT_RETURN } from '../../../actions/LoginTypes'\r\nimport { injectIntl } from 'react-intl';\r\nimport {\r\n    callService, crudMaster, getUserMappingFilterChange, getUserMappingBySite, getUserMappingGraphView,\r\n    getChildUsers, openUserMappingModal, updateStore, validateEsignCredential, filterColumnData,\r\n    getCopyUserMapping, getCopyUserMappingSubType,getUserMapping\r\n} from '../../../actions';\r\nimport { getControlMap, sortData, showEsign, constructOptionList } from '../../../components/CommonScript'\r\nimport UserMappingFilter from './UserMappingFilter';\r\nimport { MediaHeader, ContentPanel } from '../../../components/App.styles';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faPlus, faSitemap, faTrashAlt } from '@fortawesome/free-solid-svg-icons';\r\nimport ListMaster from '../../../components/list-master/list-master.component';\r\nimport SlideOutModal from '../../../components/slide-out-modal/SlideOutModal';\r\nimport Esign from '../../audittrail/Esign';\r\nimport FormSelectSearch from '../../../components/form-select-search/form-select-search.component';\r\nimport { SearchAdd } from '../../product/product.styled';\r\nimport ConfirmDialog from '../../../components/confirm-alert/confirm-alert.component';\r\nimport { Grid, GridColumn, GridColumnMenuFilter } from '@progress/kendo-react-grid';\r\nimport { process } from '@progress/kendo-data-query';\r\nimport { ApprovalSubType, transactionStatus } from '../../../components/Enumeration';\r\nimport ColumnMenu from '../../../components/data-grid/ColumnMenu';\r\nimport UserTree from './UserTree'\r\nimport { AtTableWrap, FontIconWrap } from '../../../components/data-grid/data-grid.styles';\r\nimport ReactTooltip from 'react-tooltip';\r\nimport './UserMapping.css'\r\nimport { AtHeader } from '../../../components/header/header.styles';\r\nimport ConfirmMessage from '../../../components/confirm-alert/confirm-message.component';\r\nimport { fileViewUrl } from '../../../rsapi';\r\nimport { loadMessages, LocalizationProvider } from '@progress/kendo-react-intl';\r\nimport messages_en from '../../../assets/translations/en.json';\r\nimport messages_de from '../../../assets/translations/de.json';\r\nimport { Affix } from 'rsuite';\r\nimport BreadcrumbComponent from '../../../components/Breadcrumb.Component';\r\nconst mapStateToProps = state => {\r\n    return ({ Login: state.Login })\r\n}\r\nconst messages = {\r\n    'en-US': messages_en,\r\n    'ko-KR': messages_de\r\n}\r\nclass UserMapping extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.formRef = React.createRef();\r\n        this.searchRef = React.createRef();\r\n        this.confirmMessage = new ConfirmMessage();\r\n        const dataState = {\r\n            skip: 0,\r\n            take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5,\r\n        };\r\n\r\n        this.state = {\r\n            masterStatus: \"\", error: \"\", selectedRecord: {},\r\n            dataResult: [], dataState: { 0: dataState },\r\n            userRoleControlRights: [],\r\n            controlMap: new Map(),\r\n            ApprovalsubtypeList: [],\r\n            RegistrationTypeList: [],\r\n            RegistrationSubTypeList: [],\r\n            templateVersionOptionList: [],\r\n            userRoleList: [],\r\n            userList: [],\r\n            data: [],\r\n            a: 0.5,\r\n            b: 0.5,\r\n            scale: 1,\r\n            expanded: false,\r\n            //dataResult:{}\r\n        }\r\n    }\r\n\r\n    handlePanAndZoom = (a, b, scale) => {\r\n        scale = scale > 1 ? 1 : scale\r\n        this.setState({ a, b, scale });\r\n    }\r\n\r\n    handlePanMove = (a, b) => {\r\n        this.setState({ a, b });\r\n    }\r\n\r\n    dataStateChange = (event, nuserrolecode) => {\r\n        let dataState = { ...this.state.dataState, [nuserrolecode]: event.dataState };\r\n        let dataResult = this.state.dataResult;\r\n        dataResult[nuserrolecode]=process(this.props.Login.masterData[nuserrolecode],event.dataState)\r\n        this.props.Login.dataState = dataState;\r\n        this.setState({ dataState,dataResult });\r\n    }\r\n\r\n    acceptCopy = (saveType, inputParam, masterData) => {\r\n        const copyId = this.state.controlMap.has(\"CopyUserMapping\") && this.state.controlMap.get(\"CopyUserMapping\").ncontrolcode;\r\n\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, copyId)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData }, saveType,\r\n                    operation: this.props.Login.operation\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.crudMaster(inputParam, masterData, \"openModal\");\r\n        }\r\n    }\r\n\r\n    onSaveClick = (saveType, formRef) => {\r\n        let addedUsers = [];\r\n        let inputData = {};\r\n        if (this.props.Login.operation === 'copy') {\r\n            inputData = {\r\n                usermapping: {\r\n                    ntreeversiontempcode: this.templateVersionValue.value,\r\n                    napprovalsubtypecode: this.approvalSubTypeValue.value,\r\n                    nregtypecode: this.state.selectedRecord[\"regtype\"].value,\r\n                    nregsubtypecode: this.state.selectedRecord[\"regsubtype\"].value,\r\n                    userinfo: this.props.Login.userInfo,\r\n                    nsitecode: this.props.Login.masterData.selectedSite.nsitecode,\r\n                },\r\n                userinfo: this.props.Login.userInfo\r\n            }\r\n            const masterData = this.props.Login.masterData;\r\n            const inputParam = {\r\n                methodUrl: 'UserMapping',\r\n                classUrl: this.props.Login.inputParam.classUrl,\r\n                displayName: this.props.Login.inputParam.displayName,\r\n                inputData: inputData, saveType, formRef,\r\n                operation: 'copy',\r\n                dataState: { ...this.state.dataState, [this.props.Login.childRole]: { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 } }\r\n\r\n            }\r\n            this.confirmMessage.confirm(this.props.intl.formatMessage({ id: \"IDS_CONFIRMATION\" }),\r\n                this.props.intl.formatMessage({ id: \"IDS_CONFIRMATION\" }) + \"!\",\r\n                this.props.intl.formatMessage({ id: \"IDS_COPYUSERMAPPINGALERT\" }) + \" ?\",\r\n                this.props.intl.formatMessage({ id: \"IDS_OK\" }),\r\n                this.props.intl.formatMessage({ id: \"IDS_CANCEL\" }),\r\n                () => this.acceptCopy(saveType, inputParam, masterData));\r\n        }\r\n        if (this.state.selectedRecord.nusercode && this.state.selectedRecord.nusercode.length > 0) {\r\n            this.state.selectedRecord.nusercode.map(user => {\r\n                addedUsers.push({\r\n                    nversioncode: this.templateVersionValue.value,\r\n                    napprovalconfigcode: this.props.Login.masterData.approvalConfigCode || this.templateVersionValue.item.napprovalconfigcode || -1,\r\n                    nparentrolecode: this.props.Login.parentRole,\r\n                    nparentusercode: this.props.Login.parentRole === -2 ? -2 : this.props.Login.masterData[`selectedUser_${this.props.Login.parentRole}`].UserCode,\r\n                    nparentusersitecode: this.props.Login.parentRole === -2 ? -2 : this.props.Login.masterData[`selectedUser_${this.props.Login.parentRole}`].usersitecode,\r\n                    nchildrolecode: user.item.nuserrolecode,\r\n                    nchildusercode: user.item.UserCode,\r\n                    nchildusersitecode: user.item.nusersitecode,\r\n                    nparusermappingcode: this.props.Login.parentRole === -2 ? -2 : this.props.Login.masterData[`selectedUser_${this.props.Login.parentRole}`].nusermappingcode,\r\n                    nlevel: user.item.nlevelno,\r\n                    nsitecode: this.props.Login.masterData.selectedSite.nsitecode,\r\n                    nstatus: 1\r\n                })\r\n                return null;\r\n            })\r\n            const masterData = this.props.Login.masterData;\r\n            inputData = {\r\n                users: {\r\n                    userinfo: this.props.Login.userInfo,\r\n                    usermapping: addedUsers,\r\n                    nparusermappingcode: this.props.Login.parentRole === -2 ? -2 : this.props.Login.masterData[`selectedUser_${this.props.Login.parentRole}`].nusermappingcode,\r\n                    nuserrolecode: this.props.Login.parentRole,\r\n                    nsitecode: this.props.Login.masterData.selectedSite.nsitecode,\r\n                    nversioncode: this.templateVersionValue.value,\r\n                    levelno: this.props.Login.nlevelno\r\n                },\r\n                userinfo: this.props.Login.userInfo,\r\n\r\n            }\r\n            const inputParam = {\r\n                methodUrl: 'Users',\r\n                classUrl: this.props.Login.inputParam.classUrl,\r\n                displayName: this.props.Login.inputParam.displayName,\r\n                inputData: inputData, saveType, formRef,\r\n                operation: 'create',\r\n                dataState: { ...this.state.dataState, [this.props.Login.childRole]: { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 } }\r\n\r\n            }\r\n            if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolcode)) {\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        loadEsign: true, screenData: { inputParam, masterData }, saveType,\r\n                        operation: this.props.Login.operation\r\n                    }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n            else {\r\n                this.props.crudMaster(inputParam, masterData, \"openModal\");\r\n            }\r\n        }\r\n    }\r\n\r\n    deleteUsers = (deleteId, nusermappingcode, nparusermappingcode, role) => {\r\n\r\n        const inputData = {\r\n            'users': {\r\n                nusermappingcode: nusermappingcode,\r\n                nparusermappingcode: nparusermappingcode,\r\n                nuserrolecode: role.nparentrolecode,\r\n                nsitecode: this.props.Login.masterData.selectedSite.nsitecode,\r\n                nversioncode: this.templateVersionValue.value,\r\n                levelno: role.nlevelno,\r\n                userinfo: this.props.Login.userInfo\r\n            }\r\n        }\r\n        inputData['userinfo'] = this.props.Login.userInfo\r\n        const inputParam = {\r\n            methodUrl: 'Users',\r\n            classUrl: this.props.Login.inputParam.classUrl,\r\n            displayName: this.props.Login.inputParam.displayName,\r\n            inputData: inputData,\r\n            operation: \"delete\",\r\n            dataState: this.state.dataState\r\n        }\r\n        const masterData = this.props.Login.masterData;\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, deleteId)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData }, operation: \"delete\",\r\n                    openModal: true, screenName: this.props.intl.formatMessage({ id: this.props.Login.inputParam.displayName })\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.crudMaster(inputParam, masterData, \"openModal\");\r\n        }\r\n\r\n    }\r\n\r\n    closeModal = () => {\r\n        let loadEsign = this.props.Login.loadEsign;\r\n        let openModal = this.props.Login.openModal;\r\n        let graphView = this.props.Login.graphView;\r\n        let selectedRecord = this.props.Login.selectedRecord;\r\n        if (this.props.Login.loadEsign) {\r\n            if (this.props.Login.operation === \"delete\") {\r\n                loadEsign = false;\r\n                openModal = false;\r\n                selectedRecord = {};\r\n               \r\n            }\r\n            else {\r\n                loadEsign = false;\r\n                selectedRecord['esignpassword'] = undefined;\r\n                selectedRecord['esigncomments'] = undefined;\r\n            }\r\n        }\r\n        else {\r\n            openModal = false;\r\n            graphView = false;\r\n            selectedRecord = {};\r\n        }\r\n\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { openModal, loadEsign, selectedRecord, graphView }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    };\r\n\r\n    static getDerivedStateFromProps(props, state) {\r\n\r\n        if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\r\n            toast.warn(props.Login.masterStatus);\r\n            props.Login.masterStatus = \"\";\r\n        }\r\n\r\n        if (props.Login.error !== state.error) {\r\n            toast.error(props.Login.error)\r\n            props.Login.error = \"\";\r\n        }\r\n        if (props.Login.multilingualError && props.Login.multilingualError !== \"\") {\r\n            toast.warn(props.intl.formatMessage({ id: props.Login.multilingualError }))\r\n            props.Login.multilingualError = \"\";\r\n        }\r\n        if (props.Login.dataState === undefined) {\r\n            props.Login.dataState = undefined;\r\n        }\r\n        if (props.Login.selectedRecord === undefined) {\r\n            return { selectedRecord: {} }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    validateEsign = () => {\r\n        const inputParam = {\r\n            inputData: {\r\n                \"userinfo\": {\r\n                    ...this.props.Login.userInfo,\r\n                    sreason: this.state.selectedRecord[\"esigncomments\"]\r\n                },\r\n                password: this.state.selectedRecord[\"esignpassword\"]\r\n            },\r\n            screenData: this.props.Login.screenData\r\n        }\r\n        this.props.validateEsignCredential(inputParam, \"openModal\");\r\n    }\r\n\r\n    columnProps(field, nuserrolecode) {\r\n        return {\r\n            field: field,\r\n            columnMenu: ColumnMenu,\r\n            headerClassName: this.isColumnActive(field, this.state.dataState, nuserrolecode) ? 'active' : ''\r\n        };\r\n    }\r\n\r\n    isColumnActive(field, dataState, nuserrolecode) {\r\n        return GridColumnMenuFilter.active(field, dataState[nuserrolecode] ? dataState[nuserrolecode].filter : dataState['0'].filter)\r\n    }\r\n\r\n    getUserMapping = () => {\r\n        if (this.state.ApprovalsubtypeList.length>0) {\r\n            this.searchRef.current.value = \"\"\r\n\r\n            // let approvalSubTypeValue = this.approvalSubTypeValue ? this.approvalSubTypeValue : this.state.ApprovalsubtypeList.length > 0 ? \r\n            //                             this.state.ApprovalsubtypeList[0] : -1;\r\n         \r\n            let masterData = {\r\n                ...this.props.Login.masterData,\r\n                realApprovalSubTypeValue: this.props.Login.masterData.approvalSubTypeValue  ? this.props.Login.masterData.approvalSubTypeValue : -1,\r\n                realRegistrationTypeValue: this.props.Login.masterData.registrationTypeValue ? this.props.Login.masterData.registrationTypeValue : -1,\r\n                realRegistrationSubTypeValue: this.props.Login.masterData.registrationSubTypeValue ? this.props.Login.masterData.registrationSubTypeValue : -1,\r\n                realTemplateVersionValue: this.props.Login.masterData.templateVersionValue ? this.props.Login.masterData.templateVersionValue : -1,\r\n\r\n            }\r\n       \r\n            let inputParamData = { \r\n                nFlag:6,\r\n                napprovalsubtypecode: this.props.Login.masterData.approvalSubTypeValue.value,\r\n                nregtypecode:  this.props.Login.masterData.registrationTypeValue.value ?  this.props.Login.masterData.registrationTypeValue.value : -1,\r\n                nregsubtypecode: this.props.Login.masterData.registrationSubTypeValue ? this.props.Login.masterData.registrationSubTypeValue.value : -1,\r\n                ntemplatecode: this.props.Login.masterData.approvalSubTypeValue.item.ntemplatecode,\r\n                nversioncode:  this.props.Login.masterData.templateVersionValue ?  this.props.Login.masterData.templateVersionValue.value : -1,\r\n                userinfo: this.props.Login.userInfo, \r\n                masterData \r\n            }\r\n            if(inputParamData.napprovalsubtypecode > 0 &&  inputParamData.nregtypecode > 0 && inputParamData.nregsubtypecode > 0 && inputParamData.nversioncode > 0)\r\n            {\r\n                this.props.getUserMapping(inputParamData);\r\n            }\r\n            else\r\n            {\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_PLSSELECTALLVALUESINFILTER\" }))\r\n            }\r\n           \r\n        } else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_APPROVALSUBTYPENOTAVAILABLE\" }))\r\n        }\r\n    }\r\n\r\n\r\n    reloadData = () => {\r\n        // const inputParam = {\r\n        //     inputData: { \"userinfo\": this.props.Login.userInfo },\r\n        //     classUrl: \"usermapping\",\r\n        //     methodUrl: \"UserMapping\",\r\n        //     displayName: \"IDS_USERMAPPING\",\r\n        //     userInfo: this.props.Login.userInfo\r\n        // };\r\n\r\n        // this.props.callService(inputParam);\r\n        \r\n            if (this.props.Login.masterData.approvalSubTypeValue) {\r\n                this.searchRef.current.value = \"\"\r\n                let masterData = {\r\n                    ...this.props.Login.masterData,\r\n                    realApprovalSubTypeValue: this.props.Login.masterData.approvalSubTypeValue ? this.props.Login.masterData.approvalSubTypeValue : -1,\r\n                    realRegistrationTypeValue: this.props.Login.masterData.registrationTypeValue ? this.props.Login.masterData.registrationTypeValue : -1,\r\n                    realRegistrationSubTypeValue: this.props.Login.masterData.registrationSubTypeValue ? this.props.Login.masterData.registrationSubTypeValue : -1,\r\n                    realApprovalConfigCode: this.props.Login.masterData.approvalConfigCode || -1,\r\n                    realTreeVersionTemplateValue: this.props.Login.masterData.userroleTemplateValue || -1,\r\n    \r\n                }\r\n                const inputData = {\r\n                    napprovalsubtypecode: this.props.Login.masterData.approvalSubTypeValue ?\r\n                        this.props.Login.masterData.approvalSubTypeValue.value : -1,\r\n                    napprovalconfigcode: this.props.Login.masterData.approvalConfigCode,\r\n                    ntreeversiontempcode: this.props.Login.masterData.userroleTemplateValue.value,\r\n                    userinfo: this.props.Login.userInfo\r\n                }\r\n                let inputParamData = { inputData, masterData }\r\n                this.props.getApprovalConfigurationVersion(inputParamData);\r\n            } else {\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_APPROVALSUBTYPENOTAVAILABLE\" }))\r\n            }\r\n    }\r\n\r\n    render() {\r\n        loadMessages(messages[this.props.Login.userInfo.slanguagetypecode], \"lang\");\r\n        const extractedColumnList = [\r\n            { \"idsName\": \"IDS_USERNAME\", \"dataField\": \"Name\", \"width\": \"35%\" },\r\n            { \"idsName\": \"IDS_LOGINID\", \"dataField\": \"LoginId\", \"width\": \"35%\" },\r\n            { \"idsName\": \"IDS_DEPARTMENT\", \"dataField\": \"sdeptname\", \"width\": \"10%\" },\r\n        ]\r\n\r\n\r\n        const addId = this.state.controlMap.has(\"AddUserMapping\") && this.state.controlMap.get(\"AddUserMapping\").ncontrolcode;\r\n        const deleteId = this.state.controlMap.has(\"DeleteUserMapping\") && this.state.controlMap.get(\"DeleteUserMapping\").ncontrolcode;\r\n        const copyId = this.state.controlMap.has(\"CopyUserMapping\") && this.state.controlMap.get(\"CopyUserMapping\").ncontrolcode;\r\n\r\n        //  let approvalSubTypes = this.props.Login.masterData.Approvalsubtype ? sortData(this.props.Login.masterData.Approvalsubtype, 'ascending', 'ntemplatecode') : [];\r\n        let approvalSubTypes = this.state.ApprovalsubtypeList ? this.state.ApprovalsubtypeList : [];\r\n        this.approvalSubTypeValue = this.props.Login.masterData.approvalSubTypeValue ?\r\n            this.props.Login.masterData.approvalSubTypeValue :\r\n            approvalSubTypes.length > 0 ? approvalSubTypes[0]: {};\r\n\r\n        this.templateVersionValue = this.props.Login.masterData.templateVersionValue ?\r\n            this.props.Login.masterData.templateVersionValue : this.props.Login.masterData.TreeVersion ? this.props.Login.masterData.TreeVersion.length > 0 ?\r\n                {\r\n                    value: this.props.Login.masterData.TreeVersion[0].ntreeversiontempcode,\r\n                    label: this.props.Login.masterData.TreeVersion[0].sversiondescription,\r\n                    item: this.props.Login.masterData.TreeVersion[0]\r\n                } : {} : {};\r\n        const userRole = this.props.Login.masterData.UserRole ? sortData(this.props.Login.masterData.UserRole, 'ascending', 'nlevelno') : []\r\n        const filterParam = {\r\n            inputListName: \"Site\",\r\n            selectedObject: \"selectedSite\",\r\n            primaryKeyField: \"nsitecode\",\r\n            fetchUrl: \"usermapping/getUserMappingBySite\",\r\n            fecthInputObject: { nversioncode: this.templateVersionValue ? this.templateVersionValue.value : -1, userinfo: this.props.Login.userInfo },\r\n            unchangeList: [\"TreeVersion\", \"templateVersionValue\", \"Approvalsubtype\", \"approvalSubTypeValue\", \"RegistrationType\", \"registrationTypeValue\", \"RegistrationSubType\", \"registrationSubTypeValue\"],\r\n            masterData: this.props.Login.masterData\r\n        };\r\n        let mandatoryFields = [\r\n            { \"idsName\": \"IDS_USERS\", \"dataField\": \"nusercode\", \"mandatoryLabel\":\"IDS_SELECT\", \"controlType\": \"selectbox\" }\r\n        ];\r\n        if (this.props.Login.operation === 'copy') {\r\n            mandatoryFields = [\r\n                { \"idsName\": \"IDS_REGISTRATIONTYPE\", \"dataField\": \"regtype\" , \"mandatoryLabel\":\"IDS_SELECT\", \"controlType\": \"selectbox\"},\r\n                { \"idsName\": \"IDS_REGISTRATIONSUBTYPE\", \"dataField\": \"regsubtype\" , \"mandatoryLabel\":\"IDS_SELECT\", \"controlType\": \"selectbox\"}\r\n            ]\r\n        }\r\n\r\n         let breadCrumbData = []\r\n         if (this.props.Login.masterData.realApprovalSubTypeValue && this.props.Login.masterData.realApprovalSubTypeValue.value === ApprovalSubType.TESTRESULTAPPROVAL) {\r\n         breadCrumbData = [\r\n                {\r\n                    \"label\": \"IDS_APPROVALSUBTYPE\",\r\n                    \"value\": this.props.Login.masterData.realApprovalSubTypeValue ? this.props.Login.masterData.realApprovalSubTypeValue.label : \"NA\"\r\n                },\r\n                {\r\n                    \"label\": \"IDS_REGISTRATIONTYPE\",\r\n                    \"value\": this.props.Login.masterData.realRegistrationTypeValue ? this.props.Login.masterData.realRegistrationTypeValue.label : \"NA\"\r\n                }, \r\n                {\r\n                    \"label\": \"IDS_REGISTRATIONSUBTYPE\",\r\n                    \"value\": this.props.Login.masterData.realRegistrationSubTypeValue ? this.props.Login.masterData.realRegistrationSubTypeValue.label : \"NA\"\r\n                }, \r\n                {\r\n                    \"label\": \"IDS_USERROLETEMPLATE\",\r\n                    \"value\": this.props.Login.masterData.realTemplateVersionValue ? this.props.Login.masterData.realTemplateVersionValue.label : \"NA\"\r\n                }\r\n             ];\r\n        } \r\n        else\r\n        {\r\n            breadCrumbData = [  {\r\n                \"label\": \"IDS_APPROVALSUBTYPE\",\r\n                \"value\": this.props.Login.masterData.realApprovalSubTypeValue ? this.props.Login.masterData.realApprovalSubTypeValue.label : \"NA\"\r\n            },\r\n            {\r\n                \"label\": \"IDS_USERROLETEMPLATE\",\r\n                \"value\": this.props.Login.masterData.realTemplateVersionValue ? this.props.Login.masterData.realTemplateVersionValue.label : \"NA\"\r\n            }\r\n            ]\r\n        }\r\n\r\n        return (\r\n            <>\r\n                <div className=\"client-listing-wrap mtop-fixed-breadcrumb fixed_breadcrumd\">\r\n                <Affix top={53}>\r\n                        <BreadcrumbComponent breadCrumbItem={breadCrumbData} />\r\n                </Affix>\r\n                    <Row noGutters={true}>\r\n                        <Col md={4}>\r\n                            <ListMaster\r\n                                //filterColumnData ={(filterValue)=>this.props.filterApprovalConfigColumnData(filterValue,this.props.Login.masterData,this.props.Login.userInfo,this.approvalSubTypeValue.value)}\r\n                                masterData={this.props.Login.masterData}\r\n                                userInfo={this.props.Login.userInfo}\r\n                                screenName={this.props.intl.formatMessage({ id: \"IDS_USERMAPPING\" })}\r\n                                masterList={this.props.Login.masterData.searchedData || this.props.Login.masterData.Site}\r\n                                getMasterDetail={(site) => this.props.getUserMappingBySite(site, this.templateVersionValue.value, this.props.Login.userInfo, this.props.Login.masterData)}\r\n                                selectedMaster={this.props.Login.masterData.selectedSite}\r\n                                primaryKeyField=\"nsitecode\"\r\n                                mainField=\"ssitename\"\r\n                                //firstField=\"ssiteaddress\"\r\n                                userRoleControlRights={this.state.userRoleControlRights}\r\n                                addId={-1}\r\n                                hidePaging={true}\r\n                                reloadData={this.getUserMapping}\r\n                                searchRef={this.searchRef}\r\n                                filterParam={filterParam}\r\n                                filterColumnData={this.props.filterColumnData}\r\n                                copyId={copyId}\r\n                                showCopy={this.approvalSubTypeValue.value === ApprovalSubType.TESTRESULTAPPROVAL}\r\n                                copyData={this.copyData}\r\n                                showGraphView={true}\r\n                                hideSearch={false}\r\n                                getGraphView={() => this.props.getUserMappingGraphView(this.props.Login.masterData.selectedSite, this.templateVersionValue.value, this.props.Login.userInfo)}\r\n                                needAccordianFilter={false}\r\n                                showFilterIcon={true}\r\n                                onFilterSubmit={this.getUserMapping}\r\n                                filterComponent={[\r\n                                    {\r\n                                        \"IDS_FILTER\":\r\n                                            <UserMappingFilter\r\n                                                selectedRecord={this.state.selectedRecord || {}}\r\n                                                filterComboChange={this.onFilterComboChange}\r\n                                                templateVersionOptions={this.state.templateVersionOptionList}\r\n                                                templateVersionValue={this.templateVersionValue}\r\n                                                Approvalsubtype={this.state.ApprovalsubtypeList}\r\n                                                approvalSubTypeValue={this.approvalSubTypeValue}\r\n                                                RegistrationType={this.state.RegistrationTypeList}\r\n                                                registrationTypeValue={this.props.Login.masterData.registrationTypeValue}\r\n                                                RegistrationSubType={this.state.RegistrationSubTypeList}\r\n                                                registrationSubTypeValue={this.props.Login.masterData.registrationSubTypeValue}\r\n                                            />\r\n                                    }\r\n                                ]}\r\n                            />\r\n                        </Col>\r\n                        <Col md={8}>\r\n                            <ContentPanel className=\"panel-main-content\">\r\n                                <Row>\r\n                                    {userRole.map((role, index) =>\r\n                                        <Col md={12}>\r\n                                            <SearchAdd className=\"d-flex justify-content-between\">\r\n                                                <MediaHeader>\r\n                                                    <h4 style={{ fontWeight: \"bold\" }}>{role.suserrolename}</h4>\r\n                                                </MediaHeader>\r\n                                                <Button id={`adduser_${role.nuserrolecode}`} className=\"btn btn-circle solid-blue\" role=\"button\"\r\n                                                    hidden={this.state.userRoleControlRights.indexOf(addId) === -1}\r\n                                                    onClick={() => this.props.openUserMappingModal(role, this.props.Login.masterData.selectedSite.nsitecode,\r\n                                                        this.props.Login.masterData[`selectedUser_${role.nlevelno === 1 ? role.nuserrolecode : role.nparentrolecode}`],\r\n                                                        this.templateVersionValue.value, this.props.Login.userInfo,\r\n                                                        this.props.Login.masterData,\r\n                                                        userRole.filter(x => x.nuserrolecode === role.nparentrolecode).length > 0 ?\r\n                                                            userRole.filter(x => x.nuserrolecode === role.nparentrolecode)[0].suserrolename : \"\"\r\n                                                    )}>\r\n                                                    <FontAwesomeIcon icon={faPlus} title={this.props.intl.formatMessage({ id: \"IDS_ADD\" })} />\r\n                                                </Button>\r\n                                            </SearchAdd>\r\n                                            <Row>\r\n                                                <Col md={12}>\r\n                                                    {/* <ReactTooltip place=\"bottom\" id=\"tooltip-grid-wrap\" globalEventOff='click' /> */}\r\n                                                    <AtTableWrap className=\"at-list-table\" actionColWidth={this.props.actionColWidth ? this.props.actionColWidth : \"150px\"} >\r\n                                                        {/* <Tooltip openDelay={100} position=\"bottom\" tooltipClassName=\"ad-tooltip\" anchorElement=\"element\" parentTitle={true}> */}\r\n                                                        <LocalizationProvider language=\"lang\">\r\n                                                            <Grid\r\n                                                                key={role.nuserrolecode}\r\n                                                                data={this.state.dataResult[`${role.nuserrolecode}`]}\r\n\r\n                                                                onRowClick={(user) => this.props.getChildUsers(user.dataItem, role, this.props.Login.masterData.selectedSite.nsitecode, this.templateVersionValue.value,\r\n                                                                    this.props.Login.userInfo, this.props.Login.masterData, this.state.dataState, userRole)}\r\n                                                                selectedField=\"selected\"\r\n                                                                style={{ minHeight: '20em' }}\r\n                                                                onDataStateChange={(event) => this.dataStateChange(event, role.nuserrolecode)}\r\n                                                                resizable={true}\r\n                                                                reorderable\r\n                                                                scrollable\r\n                                                                sortable\r\n                                                                pageable={{ buttonCount: 2, pageSizes: this.props.Login.settings && this.props.Login.settings[15].split(\",\").map(setting => parseInt(setting)), previousNext: false }}\r\n                                                                {...this.state.dataState[role.nuserrolecode] ? this.state.dataState[role.nuserrolecode] : this.state.dataState['0']}\r\n\r\n                                                            >\r\n\r\n                                                                {extractedColumnList.map((item, key) =>\r\n                                                                    <GridColumn key={key} title={this.props.intl.formatMessage({ id: item.idsName })}\r\n                                                                        field={item.dataField}\r\n                                                                        {...this.columnProps(item.dataField, role.nuserrolecode)}\r\n                                                                        cell={(row) => (\r\n                                                                            <td data-tip={row[\"dataItem\"][item.dataField]}\r\n                                                                           //  data-for=\"tooltip-grid-wrap\" \r\n                                                                             className={this.props.Login.masterData[`selectedUser_${role.nuserrolecode}`].nusermappingcode === row[\"dataItem\"]['nusermappingcode'] ? 'active' : ''}>\r\n                                                                                {row[\"dataItem\"][item.dataField]}\r\n                                                                            </td>)}\r\n                                                                    />\r\n                                                                )}\r\n                                                                <GridColumn locked headerClassName=\"text-center\" sort={false} title={this.props.intl.formatMessage({ id: 'IDS_ACTION' })}\r\n                                                                    cell={(row) => (\r\n                                                                        <td>\r\n                                                                            <Nav.Link className=\"action-icons-wrap text-center\">\r\n                                                                                <FontIconWrap className=\"d-font-icon\"\r\n                                                                                data-tip={this.props.intl.formatMessage({ id: \"IDS_DELETE\" })} data-place=\"left\"\r\n                                                                                title={this.props.intl.formatMessage({ id: \"IDS_DELETE\" })}>\r\n                                                                                    <ConfirmDialog\r\n                                                                                        name=\"deleteMessage\"\r\n                                                                                        message={this.props.intl.formatMessage({ id: \"IDS_DEFAULTCONFIRMMSG\" })}\r\n                                                                                        doLabel={this.props.intl.formatMessage({ id: \"IDS_OK\" })}\r\n                                                                                        doNotLabel={this.props.intl.formatMessage({ id: \"IDS_CANCEL\" })}\r\n                                                                                        icon={faTrashAlt}\r\n                                                                                        // title={this.props.intl.formatMessage({ id: \"IDS_DELETE\" })}\r\n                                                                                        hidden={this.state.userRoleControlRights.indexOf(deleteId) === -1}\r\n                                                                                        handleClickDelete={() => this.deleteUsers(deleteId, row['dataItem'].nusermappingcode, row['dataItem'].nparusermappingcode, role)}\r\n                                                                                    />\r\n                                                                                </FontIconWrap>\r\n                                                                                {userRole.length - 1 === index ? \"\" :\r\n                                                                                    <FontIconWrap className=\"d-font-icon\" \r\n                                                                                    onClick={() => this.props.getUserMappingGraphView(\r\n                                                                                        this.props.Login.masterData.selectedSite, this.templateVersionValue.value,\r\n                                                                                        this.props.Login.userInfo, row['dataItem'], role)}\r\n                                                                                    data-tip={this.props.intl.formatMessage({ id: \"IDS_GRAPH\" })} data-place=\"left\"\r\n                                                                                    title={this.props.intl.formatMessage({ id: \"IDS_GRAPH\" })}>\r\n                                                                                        <FontAwesomeIcon icon={faSitemap} className=\"fa-rotate-270\"\r\n                                                                                            // onClick={() => this.props.getUserMappingGraphView(\r\n                                                                                            //     this.props.Login.masterData.selectedSite, this.templateVersionValue.value,\r\n                                                                                            //     this.props.Login.userInfo, row['dataItem'], role)}\r\n                                                                                        // title={this.props.intl.formatMessage({ id: \"IDS_GRAPH\" })}\r\n                                                                                        />\r\n                                                                                    </FontIconWrap>\r\n                                                                                }\r\n                                                                            </Nav.Link>\r\n                                                                        </td>\r\n                                                                    )}\r\n                                                                />\r\n                                                            </Grid>\r\n                                                        </LocalizationProvider>\r\n                                                        {/* </Tooltip> */}\r\n                                                    </AtTableWrap>\r\n                                                </Col>\r\n                                            </Row>\r\n                                        </Col>\r\n                                    )\r\n                                    }\r\n                                </Row>\r\n                            </ContentPanel>\r\n                        </Col>\r\n                    </Row>\r\n                </div>\r\n                {this.props.Login.openModal ?\r\n                    <SlideOutModal\r\n                        onSaveClick={this.onSaveClick}\r\n                        operation={this.props.Login.operation}\r\n                        screenName={this.props.Login.graphView ? \"IDS_USERMAPPING\" : this.props.Login.childRoleName || \"IDS_USERMAPPING\"}\r\n                        closeModal={this.closeModal}\r\n                        show={this.props.Login.openModal}\r\n                        inputParam={this.props.Login.inputParam}\r\n                        esign={this.props.Login.loadEsign}\r\n                        validateEsign={this.validateEsign}\r\n                        masterStatus={this.props.Login.masterStatus}\r\n                        updateStore={this.props.updateStore}\r\n                        selectedRecord={this.state.selectedRecord || {}}\r\n                        mandatoryFields={mandatoryFields}\r\n                        graphView={this.props.Login.graphView}\r\n                        size={this.props.Login.graphView ? 'xl' : 'lg'}\r\n                        addComponent={\r\n                            this.props.Login.loadEsign ?\r\n                                <Esign\r\n                                    operation={this.props.Login.operation}\r\n                                    onInputOnChange={this.onInputOnChange}\r\n                                    inputParam={this.props.Login.inputParam}\r\n                                    selectedRecord={this.state.selectedRecord || {}}\r\n                                />\r\n                                : this.props.Login.operation === 'copy' ?\r\n\r\n                                    <Row>\r\n                                        <Col md={12}>\r\n                                            {this.approvalSubTypeValue.value === ApprovalSubType.TESTRESULTAPPROVAL ?\r\n                                                <>\r\n                                                    {this.props.Login.optCopyRegType ?\r\n                                                        <FormSelectSearch\r\n                                                            formLabel={this.props.intl.formatMessage({ id: \"IDS_REGISTRATIONTYPE\" })}\r\n                                                            placeholder={this.props.intl.formatMessage({ id: \"IDS_SELECTRECORD\" })}\r\n                                                            name=\"regtype\"\r\n                                                            optionId=\"nregtypecode\"\r\n                                                            optionValue=\"sregtypename\"\r\n                                                            options={this.props.Login.optCopyRegType}\r\n                                                            value={this.state.selectedRecord ? this.state.selectedRecord[\"regtype\"] : this.registrationTypeValue}\r\n                                                            onChange={(event) => this.onComboChange(event, 'regtype')}\r\n                                                            isMandatory={false}\r\n                                                            isMulti={false}\r\n                                                            isSearchable={true}\r\n                                                            isDisabled={false}\r\n                                                        />\r\n                                                        : \"\"}\r\n                                                    {this.props.Login.optCopyRegSubType ?\r\n                                                        <FormSelectSearch\r\n                                                            formLabel={this.props.intl.formatMessage({ id: \"IDS_REGISTRATIONSUBTYPE\" })}\r\n                                                            placeholder={this.props.intl.formatMessage({ id: \"IDS_SELECTRECORD\" })}\r\n                                                            name=\"regsubtype\"\r\n                                                            optionId=\"nregsubtypecode\"\r\n                                                            optionValue=\"sregsubtypename\"\r\n                                                            options={this.props.Login.optCopyRegSubType}\r\n                                                            value={this.state.selectedRecord && this.state.selectedRecord[\"regsubtype\"]}\r\n                                                            isMandatory={false}\r\n                                                            isMulti={false}\r\n                                                            isSearchable={true}\r\n                                                            isDisabled={false}\r\n                                                            onChange={(event) => this.onComboChange(event, 'regsubtype')}\r\n\r\n                                                        />\r\n                                                        : \"\"}\r\n                                                </>\r\n                                                : \"\"}\r\n                                        </Col>\r\n                                    </Row>\r\n                                    : this.props.Login.graphView ?\r\n                                        <UserTree\r\n                                            userRoleList={this.state.userRoleList}\r\n                                            userList={this.state.userList}\r\n                                            data={this.state.data}\r\n                                            expanded={this.state.expanded}\r\n                                            collapseAll={this.collapseAll}\r\n                                            selectedRecord={this.state.selectedRecord}\r\n                                            clearFilter={this.clearFilter}\r\n                                            filterTree={this.filterTree}\r\n                                            userSearchFilterChange={this.userSearchFilterChange}\r\n                                            a={this.state.a}\r\n                                            b={this.state.b}\r\n                                            scale={this.state.scale}\r\n                                            handlePanAndZoom={this.handlePanAndZoom}\r\n                                            handlePanMove={this.handlePanMove}\r\n                                            hideFilters={this.props.Login.hideFilters}\r\n                                        />\r\n                                        :\r\n                                        <Row>\r\n                                            <Col md={12}>\r\n                                                <FormSelectSearch\r\n                                                    name={'users'}\r\n                                                    formLabel={this.props.Login.childRoleName}//{this.props.intl.formatMessage({ id: \"IDS_USERS\" })}\r\n                                                    // placeholder={this.props.Login.childRoleName}//{this.props.intl.formatMessage({ id: \"IDS_USERS\" })}\r\n                                                    placeholder={this.props.intl.formatMessage({ id: \"IDS_SELECTRECORD\" })}\r\n                                                    value={this.state.selectedRecord ? this.state.selectedRecord.nusercode ? this.state.selectedRecord.nusercode : [] : []}\r\n                                                    options={this.props.Login.AvailableUsers ? this.props.Login.AvailableUsers : []}\r\n                                                    optionId=\"id\"\r\n                                                    optionValue=\"Name\"\r\n                                                    isMandatory={true}\r\n                                                    isMulti={true}\r\n                                                    isDisabled={false}\r\n                                                    isSearchable={true}\r\n                                                    closeMenuOnSelect={false}\r\n                                                    isClearable={true}\r\n                                                    as={\"select\"}\r\n                                                    onChange={(event) => this.onComboChange(event, 'nusercode')}\r\n                                                />\r\n                                            </Col>\r\n                                        </Row>\r\n                        }\r\n                    /> : \"\"}\r\n            </>\r\n        )\r\n    }\r\n\r\n    componentDidUpdate(previousProps) {\r\n        ReactTooltip.rebuild();\r\n        let { selectedRecord, dataState, userRoleControlRights, controlMap, ApprovalsubtypeList, data, dataResult,\r\n            RegistrationTypeList, RegistrationSubTypeList, templateVersionOptionList, userRoleList } = this.state;\r\n        let updateState = false;\r\n\r\n        if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\r\n            //this.setState({ selectedRecord: this.props.Login.selectedRecord });\r\n            selectedRecord = this.props.Login.selectedRecord;\r\n            updateState = true;\r\n        }\r\n        if (this.props.Login.userTree !== previousProps.Login.userTree) {\r\n            let filter = selectedRecord.filteredUser ? true : false\r\n            if (this.props.Login.selectedTreeParent !== undefined) {\r\n                let status = true;\r\n                this.props.Login.selectedTreeParent.suserimgftp !== null && this.props.Login.files && this.props.Login.files.includes(this.props.Login.selectedTreeParent.suserimgftp)\r\n                    ? status = true : status = false\r\n                let element = this.props.Login.selectedTreeParent\r\n                data = {\r\n                    id: this.props.Login.selectedTreeParent.nusermappingcode,\r\n                    label:\r\n                        <div style={{ userSelect: 'none' }}>\r\n                            <AtHeader>\r\n                                <Media>\r\n                                    {status && this.props.Login.settings && this.props.Login.settings[5] && element.suserimgftp && element.suserimgftp !== \"\" ?\r\n                                        <Image src={this.props.Login.settings[5] + element.suserimgftp} alt=\"avatar\" className=\"img-profile rounded-circle mr-2\" />\r\n                                        : <span className=\"img-profile rounded-circle mr-2\" style={\r\n                                            {\r\n                                                background: \"#e7e6f5\",\r\n                                                borderRadius: \"50%\",\r\n                                                border: \"1px solid #cbc5f7\",\r\n                                                color: \"#6554c0\",\r\n                                                padding: \"3px\"\r\n                                            }} >\r\n                                            {element.username && element.username.split(\" \").length > 1 ?\r\n                                                element.username.split(\" \")[0].substring(0, 1).toUpperCase() + \"\" +\r\n                                                element.username.split(\" \")[1].substring(0, 1).toUpperCase()\r\n                                            :\r\n                                                element.username.split(\" \")[0].substring(0, 1).toUpperCase()\r\n                                            }\r\n                                        </span>\r\n                                    }\r\n                                    <Media.Body>\r\n                                        <span className=\"user-name\">{element.username}</span>\r\n                                        <span className=\"role\" style={{ paddingTop: \"3px\" }}>{element.suserrolename}</span>\r\n                                    </Media.Body>\r\n                                </Media>\r\n                            </AtHeader>\r\n                        </div>,\r\n                    children: this.getRoottree(this.props.Login.userTree || [], this.props.Login.selectedTreeParent.nusermappingcode, false)\r\n                }\r\n\r\n            } else {\r\n                let siteName = this.props.Login.masterData.selectedSite ? this.props.Login.masterData.selectedSite.ssitename : \"\"\r\n                data = {\r\n                    id: 0,\r\n                    label:\r\n                        <div>\r\n                            <AtHeader>\r\n                                <Media>\r\n                                    <span className=\"img-profile rounded-circle mr-2\" style={\r\n                                        {\r\n                                            background: \"#e7e6f5\",\r\n                                            borderRadius: \"50%\",\r\n                                            border: \"1px solid #cbc5f7\",\r\n                                            color: \"#6554c0\",\r\n                                            padding: \"3px\"\r\n                                        }} >\r\n                                        {\r\n                                            siteName.split(\" \").length > 1 ?\r\n                                                siteName.split(\" \")[0].substring(0, 1).toUpperCase() + \"\" +\r\n                                                siteName.split(\" \")[1].substring(0, 1).toUpperCase()\r\n                                                :\r\n                                                siteName.split(\" \")[0].substring(0, 1).toUpperCase()\r\n                                        }\r\n                                    </span>\r\n                                    <Media.Body>\r\n\r\n                                        <span className=\"role\" style={{ paddingTop: \"6px\" }}>{siteName}</span>\r\n                                    </Media.Body>\r\n                                </Media>\r\n                            </AtHeader>\r\n                        </div>,\r\n                    children: this.getRoottree(this.props.Login.userTree || [], -2, filter, selectedRecord.filteredUser, selectedRecord.filteredRole)\r\n                }\r\n            }\r\n            updateState = true;\r\n        }\r\n        if (this.props.Login.dataState !== previousProps.Login.dataState) {\r\n            if (this.props.Login.dataState === undefined) {\r\n                // this.setState({ dataState: { '0': this.state.dataState['0'] } })\r\n                dataState = { '0': this.state.dataState['0'] }\r\n                updateState = true;\r\n            } else {\r\n                // this.setState({ dataState: this.props.Login.dataState ? this.props.Login.dataState : this.state.dataState['0'] });\r\n                dataState =  this.props.Login.dataState ? {...this.props.Login.dataState} : {'0':this.state.dataState['0'] }\r\n                updateState = true;\r\n            }\r\n        }\r\n        if (this.props.Login.masterData !== previousProps.Login.masterData) {\r\n            updateState = true;\r\n            const userMap = constructOptionList(this.props.Login.masterData.UserRole || [], \"nuserrolecode\", \"suserrolename\", undefined, undefined, true);\r\n            userRoleList = userMap.get(\"OptionList\");\r\n\r\n            const RegistrationTypeListMap = constructOptionList(this.props.Login.masterData.RegistrationType || [], \"nregtypecode\", \"sregtypename\", 'nregtypecode', 'ascending', false);\r\n            const RegistrationSubTypeListMap = constructOptionList(this.props.Login.masterData.RegistrationSubType || [], \"nregsubtypecode\", \"sregsubtypename\", 'nregsubtypecode', 'ascending', false);\r\n            const templateVersionOptionListMap = constructOptionList(this.props.Login.masterData.TreeVersion || [], \"ntreeversiontempcode\", \"sversiondescription\", 'ntreeversiontempcode', 'decending', false);\r\n\r\n            RegistrationTypeList = RegistrationTypeListMap.get(\"OptionList\");\r\n            RegistrationSubTypeList = RegistrationSubTypeListMap.get(\"OptionList\");\r\n            templateVersionOptionList = templateVersionOptionListMap.get(\"OptionList\");\r\n\r\n\r\n        }\r\n        if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\r\n            userRoleControlRights = [];\r\n            if (this.props.Login.userRoleControlRights) {\r\n                this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item =>\r\n                    userRoleControlRights.push(item.ncontrolcode))\r\n            }\r\n            controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode)\r\n            const ApprovalsubtypeListMap = constructOptionList(this.props.Login.masterData.Approvalsubtype || [], \"napprovalsubtypecode\", \"ssubtypename\", 'ntemplatecode', 'ascending', false);\r\n            const RegistrationTypeListMap = constructOptionList(this.props.Login.masterData.RegistrationType || [], \"nregtypecode\", \"sregtypename\", 'nregtypecode', 'ascending', false);\r\n            const RegistrationSubTypeListMap = constructOptionList(this.props.Login.masterData.RegistrationSubType || [], \"nregsubtypecode\", \"sregsubtypename\", 'nregsubtypecode', 'ascending', false);\r\n            const templateVersionOptionListMap = constructOptionList(this.props.Login.masterData.TreeVersion || [], \"ntreeversiontempcode\", \"sversiondescription\", 'ntreeversiontempcode', 'decending', false);\r\n            ApprovalsubtypeList = ApprovalsubtypeListMap.get(\"OptionList\");\r\n            RegistrationTypeList = RegistrationTypeListMap.get(\"OptionList\");\r\n            RegistrationSubTypeList = RegistrationSubTypeListMap.get(\"OptionList\");\r\n            templateVersionOptionList = templateVersionOptionListMap.get(\"OptionList\");\r\n            //this.setState({userRoleControlRights, controlMap, ApprovalsubtypeList, RegistrationTypeList, RegistrationSubTypeList, templateVersionOptionList});\r\n            updateState = true;\r\n        }\r\n\r\n        if (updateState) {\r\n            const userRole = this.props.Login.masterData.UserRole ? sortData(this.props.Login.masterData.UserRole, 'ascending', 'nlevelno') : []\r\n            userRole.map(role =>\r\n                {\r\n                    let roleUsers = this.props.Login.masterData[`${role.nuserrolecode}`] ? sortData(this.props.Login.masterData[`${role.nuserrolecode}`],'descending','nusermappingcode'): []\r\n                    dataResult[`${role.nuserrolecode}`]=process(roleUsers.map(item => \r\n                            (\r\n                                { \r\n                                    ...item, \r\n                                    selected: item.nusermappingcode === this.props.Login.masterData[`selectedUser_${role.nuserrolecode}`].nusermappingcode \r\n                                }\r\n                            )\r\n                        )\r\n                    , dataState[role.nuserrolecode] ? dataState[role.nuserrolecode] : dataState['0'])\r\n                    return null;\r\n                })\r\n            this.setState({\r\n                selectedRecord, dataState, userRoleControlRights, controlMap, ApprovalsubtypeList, data,\r\n                RegistrationTypeList, RegistrationSubTypeList, templateVersionOptionList, userRoleList\r\n            });\r\n        }\r\n    }\r\n\r\n    onComboChange = (comboData, comboName) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if (comboData && comboName === \"regtype\") {\r\n            selectedRecord[comboName] = comboData;\r\n            let nregsubtypecode = this.props.Login.masterData.registrationSubTypeValue.value\r\n            this.props.getCopyUserMappingSubType(comboData, nregsubtypecode, selectedRecord, this.props.Login.userInfo, this.props.Login.masterData, this.props.Login.optCopyRegType)\r\n        } else {\r\n            if (comboData) {\r\n                selectedRecord[comboName] = comboData;\r\n                this.setState({ selectedRecord });\r\n            } else {\r\n                selectedRecord[comboName] = []\r\n                this.setState({ selectedRecord, availableQB: [] });\r\n            }\r\n        }\r\n    }\r\n\r\n    onFilterComboChange = (comboData, fieldName) => {\r\n\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n\r\n\r\n        let registrationTypeValue = this.props.Login.masterData.registrationTypeValue;\r\n        let registrationSubTypeValue = this.props.Login.masterData.registrationSubTypeValue;\r\n        let templateVersionValue = this.props.Login.masterData.templateVersionValue;\r\n\r\n        if (comboData) {\r\n\r\n            selectedRecord[fieldName] = comboData.value;\r\n            let inputParamData = {};\r\n            if (fieldName === 'napprovalsubtypecode') {\r\n\r\n                this.approvalSubTypeValue = comboData\r\n                inputParamData = {\r\n                    nFlag: 2,\r\n                    napprovalsubtypecode: comboData.value,\r\n                    ntemplatecode: comboData.item.ntemplatecode,\r\n                    userinfo: this.props.Login.userInfo\r\n                };\r\n\r\n            } else if (fieldName === 'nregtypecode') {\r\n\r\n                registrationTypeValue = comboData\r\n                inputParamData = {\r\n                    nFlag: 3,\r\n                    napprovalsubtypecode: this.approvalSubTypeValue.value,\r\n                    ntemplatecode: this.approvalSubTypeValue.item.ntemplatecode,\r\n                    nregtypecode: comboData.value,\r\n                    userinfo: this.props.Login.userInfo\r\n                }\r\n\r\n            } else if (fieldName === 'nregsubtypecode') {\r\n\r\n                registrationSubTypeValue = comboData\r\n                inputParamData = {\r\n                    nFlag: 4,\r\n                    napprovalsubtypecode: this.approvalSubTypeValue.value,\r\n                    nregtypecode: registrationTypeValue.value,\r\n                    nregsubtypecode: comboData.value,\r\n                    ntemplatecode: this.approvalSubTypeValue.item.ntemplatecode,\r\n                    userinfo: this.props.Login.userInfo\r\n                }\r\n            } else {\r\n\r\n                this.templateVersionValue = comboData\r\n                templateVersionValue = comboData\r\n                inputParamData = {\r\n                    nFlag: 5,\r\n                    napprovalsubtypecode: this.approvalSubTypeValue.value,\r\n                    nregtypecode: this.approvalSubTypeValue.value === 2 ? registrationTypeValue.value : -1,\r\n                    nregsubtypecode: this.approvalSubTypeValue.value === 2 ? registrationSubTypeValue.value : -1,\r\n                    ntemplatecode: this.approvalSubTypeValue.item.ntemplatecode,\r\n                    nversioncode: comboData.value,\r\n                    userinfo: this.props.Login.userInfo\r\n                }\r\n            }\r\n\r\n            const oldState = {\r\n                Approvalsubtype: this.props.Login.masterData.Approvalsubtype,\r\n                RegistrationType: this.props.Login.masterData.RegistrationType,\r\n                RegistrationSubType: this.props.Login.masterData.RegistrationSubType,\r\n                TreeVersion: this.props.Login.masterData.TreeVersion,\r\n                approvalSubTypeValue: this.approvalSubTypeValue,\r\n                registrationTypeValue,\r\n                registrationSubTypeValue,\r\n                templateVersionValue,\r\n                RegistrationTypeList: this.state.RegistrationTypeList,\r\n                RegistrationSubTypeList: this.state.RegistrationSubTypeList,\r\n                templateVersionOptionList: this.state.templateVersionOptionList\r\n            }\r\n            this.props.getUserMappingFilterChange(inputParamData, oldState, this.props.Login.masterData)\r\n\r\n        } else {\r\n            selectedRecord[fieldName] = \"\";\r\n            if (fieldName === 'napprovalsubtypecode') {\r\n\r\n                this.approvalSubTypeValue = []\r\n                registrationTypeValue = []\r\n                registrationSubTypeValue = []\r\n                templateVersionValue = []\r\n\r\n            } else if (fieldName === 'nregtypecode') {\r\n\r\n                registrationTypeValue = []\r\n                registrationSubTypeValue = []\r\n                templateVersionValue = []\r\n\r\n            } else if (fieldName === 'nregsubtypecode') {\r\n\r\n                registrationSubTypeValue = []\r\n                templateVersionValue = []\r\n\r\n            } else {\r\n                templateVersionValue = []\r\n                this.templateVersionValue = []\r\n            }\r\n            this.setState({ selectedRecord });\r\n        }\r\n\r\n    }\r\n\r\n    onInputOnChange = (event) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if (event.target.type === 'checkbox') {\r\n            selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\r\n        }\r\n        else {\r\n            selectedRecord[event.target.name] = event.target.value;\r\n        }\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    changeViewMode = (event) => {\r\n        event.target.checked === true ? this.setState({ viewMode: \"Grid\" }) : this.setState({ viewMode: \"List\" })\r\n    }\r\n\r\n    copyData = () => {\r\n        let napprovalsubtypecode = this.approvalSubTypeValue.value\r\n        let nregsubtypecode = this.props.Login.masterData.registrationSubTypeValue.value;\r\n\r\n        this.props.getCopyUserMapping(napprovalsubtypecode, nregsubtypecode, this.props.Login.userInfo, this.props.Login.masterData)\r\n    }\r\n\r\n   \r\n\r\n    userSearchFilterChange = (comboData, comboName) => {\r\n        let { selectedRecord, userList } = this.state || [];\r\n        if (comboData) {\r\n            if (comboName === 'nuserrolecode') {\r\n                let roleUsers = []\r\n                this.props.Login.userTree.map(x => {\r\n                    if (x.nchildrolecode === comboData.value && !roleUsers.find(y => y.nchildusercode === x.nchildusercode)) {\r\n                        roleUsers.push(x)\r\n                    }\r\n                    return null\r\n                }\r\n                )\r\n                const userMap = constructOptionList(roleUsers, \"nusermappingcode\", \"username\", undefined, undefined, true);\r\n                userList = userMap.get(\"OptionList\");\r\n                selectedRecord[\"filteredRole\"] = comboData;\r\n                selectedRecord[\"filteredUser\"] = null\r\n            } else {\r\n                selectedRecord[\"filteredUser\"] = comboData\r\n            }\r\n        } else {\r\n            if (comboName === 'nuserrolecode') {\r\n                selectedRecord[\"filteredRole\"] = comboData;\r\n                selectedRecord[\"filteredUser\"] = null\r\n                userList = []\r\n            } else {\r\n                selectedRecord[\"filteredUser\"] = comboData\r\n            }\r\n        }\r\n        this.setState({ selectedRecord, userList })\r\n    }\r\n\r\n    getRoottree(master, parent, filter, user, role) {\r\n        let child = []\r\n        this.child = []\r\n        let userTree = this.props.Login.userTree ? this.props.Login.userTree : []\r\n        let fiteredUserParentRole = []\r\n        let fiteredUserParentUser = []\r\n        let filteredUser = this.state.selectedRecord.filteredUser || user\r\n        let filteredRole = this.state.selectedRecord.filteredRole || role\r\n        if (filter) {\r\n            this.props.Login.userTree.map(y => {\r\n                if (filteredRole && y.nchildrolecode === filteredRole.value &&\r\n                    y.nchildusercode === filteredUser.item.nchildusercode) {\r\n                    fiteredUserParentRole.push(y.nparentrolecode)\r\n                }\r\n                if (y.nchildusercode === filteredUser.item.nchildusercode) {\r\n                    fiteredUserParentUser.push(y.nparentusercode)\r\n                }\r\n                return null;\r\n            })\r\n        }\r\n        userTree.forEach((element, index) => {\r\n            const labelColor = ['#e63109', '#2fb47d', '#eaa203', '#6554c0'];\r\n            const labelBGColor = ['#fcd7cd', '#e5f8f1', '#fcf3dd', '#e7e6f5'];\r\n            const borderColor = ['#e6310', '#c6f6e4', '#fde2a4', '#cbc5f7'];\r\n\r\n            if (element.nparusermappingcode === parent) {\r\n                let status = true;\r\n                element.suserimgftp !== null && this.props.Login.files && this.props.Login.files.includes(element.suserimgftp) ? status = true : status = false\r\n                if (filteredRole && element.nchildrolecode === filteredRole.value) {\r\n                    if (filteredUser && element.nchildusercode === filteredUser.item.nchildusercode) {\r\n                        child.push(\r\n                            {\r\n                                id: element.nusermappingcode,\r\n                                label:\r\n                                    <div style={{ userSelect: 'none' }}>\r\n                                        <AtHeader>\r\n                                            <Media>\r\n                                                {status && this.props.Login.settings && this.props.Login.settings[5] && element.suserimgftp && element.suserimgftp !== \"\" ?\r\n                                                    <Image src={this.props.Login.settings[5] + element.suserimgftp} alt=\"avatar\" className=\"img-profile rounded-circle mr-2\" />\r\n                                                    : <span className=\"img-profile rounded-circle mr-2\" style={\r\n                                                        {\r\n                                                            background: labelBGColor[index % 4],\r\n                                                            borderRadius: \"50%\",\r\n                                                            border: `1px solid ${borderColor[index % 4]}`,\r\n                                                            color: labelColor[index % 4],\r\n                                                            padding: \"3px\"\r\n                                                        }} >\r\n                                                        {element.username &&\r\n                                                            // element.username.split(\" \")[0].substring(0, 1).toUpperCase()\r\n                                                            element.username.split(\" \").length > 1 ?\r\n                                                            element.username.split(\" \")[0].substring(0, 1).toUpperCase() + \"\" +\r\n                                                            element.username.split(\" \")[1].substring(0, 1).toUpperCase()\r\n                                                            :\r\n                                                            element.username.split(\" \")[0].substring(0, 1).toUpperCase()\r\n                                                        }\r\n                                                    </span>\r\n                                                }\r\n                                                <Media.Body>\r\n                                                    <span className=\"user-name\">{element.username}</span>\r\n                                                    <span className=\"role\" style={{ paddingTop: \"3px\" }}>{element.suserrolename}</span>\r\n                                                </Media.Body>\r\n                                            </Media>\r\n                                        </AtHeader>\r\n                                    </div>,\r\n                                children: this.getRoottree(this.props.Login.userTree, element.nusermappingcode, filter, user, role)\r\n                            }\r\n                        )\r\n                    }\r\n                }\r\n                else {\r\n\r\n                    child.push(\r\n                        {\r\n                            id: element.nusermappingcode,\r\n                            label:\r\n                                <div style={{ userSelect: 'none' }}>\r\n                                    {/* <Row>\r\n                                        <Col className=\"p-1 pl-2\" md={3}>\r\n                                            {status ?\r\n                                                < Image\r\n                                                    src={fileViewUrl + \"/SharedFolder/\" + element.suserimgftp}\r\n                                                    alt={\"userimg\"}\r\n                                                    title={element.suserimgname}\r\n                                                    // onError={this.addDefaultSrc}\r\n                                                    style={{ maxWidth: \"50px\", maxHeight: \"50px\" }}\r\n                                                />\r\n                                                :\r\n                                                <span className={`mr-3 label-circle ${labelColor[index % 4]}`} style={\r\n                                                    {\r\n                                                        background: labelBGColor[index % 4],\r\n                                                        borderRadius: \"50%\",\r\n                                                        border: `1px solid ${borderColor[index % 4]}`,\r\n                                                        color: labelColor[index % 4],\r\n                                                        fontSize: \"23px\",\r\n                                                        fontWeight: \"300\",\r\n                                                        padding: \"3px\"\r\n                                                    }} >\r\n                                                    {element.username &&\r\n                                                        // element.username.split(\" \")[0].substring(0, 1).toUpperCase()\r\n                                                        element.username.split(\" \").length > 1 ?\r\n                                                        element.username.split(\" \")[0].substring(0, 1).toUpperCase() + \"\" +\r\n                                                        element.username.split(\" \")[1].substring(0, 1).toUpperCase()\r\n                                                        :\r\n                                                        element.username.split(\" \")[0].substring(0, 1).toUpperCase()\r\n                                                    }\r\n                                                </span>\r\n\r\n                                            }\r\n                                        </Col>\r\n                                        <Col md={9}>\r\n                                            <span className=\"d-flex ml-3\">\r\n                                                {element.username}\r\n                                                <br />\r\n                                                {element.suserrolename}\r\n                                            </span>\r\n                                        </Col>\r\n                                    </Row> */}\r\n                                    <AtHeader>\r\n                                        <Media>\r\n                                            {status && this.props.Login.settings && this.props.Login.settings[5] && element.suserimgftp && element.suserimgftp !== \"\" ?\r\n                                                <Image src={this.props.Login.settings[5] + element.suserimgftp} alt=\"avatar\" className=\"img-profile rounded-circle mr-2\" />\r\n                                                : <span className=\"img-profile rounded-circle mr-2\" style={\r\n                                                    {\r\n                                                        background: labelBGColor[index % 4],\r\n                                                        borderRadius: \"50%\",\r\n                                                        border: `1px solid ${borderColor[index % 4]}`,\r\n                                                        color: labelColor[index % 4],\r\n                                                        padding: \"3px\"\r\n                                                    }} >\r\n                                                    {element.username &&\r\n                                                        // element.username.split(\" \")[0].substring(0, 1).toUpperCase()\r\n                                                        element.username.split(\" \").length > 1 ?\r\n                                                        element.username.split(\" \")[0].substring(0, 1).toUpperCase() + \"\" +\r\n                                                        element.username.split(\" \")[1].substring(0, 1).toUpperCase()\r\n                                                        :\r\n                                                        element.username.split(\" \")[0].substring(0, 1).toUpperCase()\r\n                                                    }\r\n                                                </span>\r\n                                            }\r\n                                            <Media.Body>\r\n                                                <span className=\"user-name\">{element.username}</span>\r\n                                                <span className=\"role\" style={{ paddingTop: \"3px\" }}>{element.suserrolename}</span>\r\n                                            </Media.Body>\r\n                                        </Media>\r\n                                    </AtHeader>\r\n                                </div>,\r\n                            children: this.getRoottree(this.props.Login.userTree, element.nusermappingcode, filter, user, role)\r\n                        }\r\n                    )\r\n                }\r\n            }\r\n        })\r\n        return child\r\n    }\r\n\r\n    addDefaultSrc(ev) {\r\n        ev.target.src = fileViewUrl() + \"/SharedFolder/Default-User-Image.png\"\r\n    }\r\n\r\n    // getchildtree(master, parent, child) {\r\n    //     this.props.Login.userTree && this.props.Login.userTree.forEach(element => {\r\n    //         if (element.nparusermappingcode === parent) {\r\n    //             this.child.push(\r\n    //                 {\r\n    //                     id: element.nusermappingcode,\r\n    //                     label:\r\n    //                         <div className=\"d-flex justify-content-between\" style={{ userSelect: 'none' }}>\r\n    //                             <Row>\r\n    //                                 <Col md={12}>\r\n    //                                     {element.suserimgftp === null ?\r\n    //                                         <FontAwesomeIcon icon={faUserAlt}></FontAwesomeIcon> :\r\n    //                                         <img\r\n    //                                             src={fileViewUrl + \"/SharedFolder////\" + element.suserimgftp}\r\n    //                                             alt={\"userimg\"}\r\n    //                                             // onClick={() => window.open(signImgPath, '_blank')}\r\n    //                                             title={element.suserimgname}\r\n    //                                             style={{ borderRadius: \"50%\", width: \"30px\" }}\r\n    //                                         />\r\n    //                                     }\r\n    //                                 </Col>\r\n    //                                 <Col md={11}>\r\n    //                                     {element.username} <br /> {element.suserrolename}\r\n    //                                 </Col>\r\n    //                             </Row>\r\n    //                         </div>,\r\n    //                     children: this.getchildtree(this.props.Login.userTree, element.nusermappingcode)\r\n    //                 }\r\n    //             )\r\n    //         }\r\n    //     })\r\n    //     return child;\r\n    // }\r\n\r\n    filterTree = () => {\r\n        if (this.state.selectedRecord.filteredRole) {\r\n            if (this.state.selectedRecord.filteredUser) {\r\n                let siteName = this.props.Login.masterData.selectedSite ? this.props.Login.masterData.selectedSite.ssitename : \"\"\r\n                let data = {\r\n                    id: 0,\r\n                    label:\r\n                        <div>\r\n                            <AtHeader>\r\n                                <Media>\r\n                                    <span className=\"img-profile rounded-circle mr-2\" style={\r\n                                        {\r\n                                            background: \"#e7e6f5\",\r\n                                            borderRadius: \"50%\",\r\n                                            border: \"1px solid #cbc5f7\",\r\n                                            color: \"#6554c0\",\r\n                                            padding: \"3px\"\r\n                                        }} >\r\n                                        {\r\n                                            siteName.split(\" \").length > 1 ?\r\n                                                siteName.split(\" \")[0].substring(0, 1).toUpperCase() + \"\" +\r\n                                                siteName.split(\" \")[1].substring(0, 1).toUpperCase()\r\n                                                :\r\n                                                siteName.split(\" \")[0].substring(0, 1).toUpperCase()\r\n                                        }\r\n                                    </span>\r\n                                    <Media.Body>\r\n\r\n                                        <span className=\"role\" style={{ paddingTop: \"6px\" }}>{siteName}</span>\r\n                                    </Media.Body>\r\n                                </Media>\r\n                            </AtHeader>\r\n                        </div>,\r\n                    children: this.getRoottree(this.props.Login.userTree || [], -2, true)\r\n                }\r\n\r\n                this.setState({ data })\r\n            } else {\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTAUSERTOSEARCH\" }))\r\n            }\r\n        } else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTAUSERROLETOSEARCH\" }))\r\n        }\r\n    }\r\n\r\n    clearFilter = () => {\r\n\r\n        let { selectedRecord, userList } = this.state\r\n        selectedRecord[\"filteredUser\"] = null\r\n        selectedRecord[\"filteredRole\"] = null\r\n        userList = []\r\n        let siteName = this.props.Login.masterData.selectedSite ? this.props.Login.masterData.selectedSite.ssitename : \"\"\r\n        let data = {\r\n            id: 0,\r\n            label:\r\n                <div>\r\n                    <AtHeader>\r\n                        <Media>\r\n                            <span className=\"img-profile rounded-circle mr-2\" style={\r\n                                {\r\n                                    background: \"#e7e6f5\",\r\n                                    borderRadius: \"50%\",\r\n                                    border: \"1px solid #cbc5f7\",\r\n                                    color: \"#6554c0\",\r\n                                    padding: \"3px\"\r\n                                }} >\r\n                                {\r\n                                    siteName.split(\" \").length > 1 ?\r\n                                        siteName.split(\" \")[0].substring(0, 1).toUpperCase() + \"\" +\r\n                                        siteName.split(\" \")[1].substring(0, 1).toUpperCase()\r\n                                        :\r\n                                        siteName.split(\" \")[0].substring(0, 1).toUpperCase()\r\n                                }\r\n                            </span>\r\n                            <Media.Body>\r\n                                <span className=\"role\" style={{ paddingTop: \"6px\" }}>{siteName}</span>\r\n                            </Media.Body>\r\n                        </Media>\r\n                    </AtHeader>\r\n                </div>,\r\n            children: this.getRoottree(this.props.Login.userTree || [], -2, false)\r\n        }\r\n        this.setState({ data, selectedRecord, userList })\r\n    }\r\n\r\n    collapseAll = () => {\r\n        this.setState({ expanded: !this.state.expanded })\r\n    }\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps, {\r\n    callService, crudMaster, openUserMappingModal, updateStore, getUserMappingGraphView, getCopyUserMapping,\r\n    getUserMappingFilterChange, getUserMappingBySite, getChildUsers, validateEsignCredential,\r\n    filterColumnData, getCopyUserMappingSubType,getUserMapping\r\n})(injectIntl(UserMapping));"]},"metadata":{},"sourceType":"module"}