{"ast":null,"code":"import rsapi from '../rsapi';\nimport Axios from 'axios';\nimport { toast } from 'react-toastify';\nimport { getComboLabelValue } from '../components/CommonScript';\nimport { DEFAULT_RETURN } from './LoginTypes';\nimport { initRequest } from './LoginAction';\nimport { intl } from '../components/App';\nimport { transactionStatus } from './../components/Enumeration';\nexport function openCourierModal(screenName, operation, primaryKeyName, masterData, userInfo, ncontrolcode) {\n  return function (dispatch) {\n    if (operation === \"create\" || operation === \"update\") {\n      const Country = rsapi.post(\"/country/getCountry\", {\n        \"userinfo\": userInfo\n      });\n      let urlArray = [];\n\n      if (operation === \"create\") {\n        urlArray = [Country];\n      }\n\n      dispatch(initRequest(true));\n      Axios.all(urlArray).then(response => {\n        let selectedRecord = {};\n        selectedRecord[\"nstatus\"] = transactionStatus.ACTIVE;\n        selectedRecord[\"ncouriercode\"] = 0;\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            Country: response[0].data || [],\n            operation,\n            screenName,\n            selectedRecord,\n            openModal: true,\n            ncontrolcode,\n            loading: false\n          }\n        });\n      }).catch(error => {\n        dispatch(initRequest(false));\n\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(intl.formatMessage({\n            id: error.response.data\n          }));\n        }\n      });\n    }\n  };\n}\nexport function fetchCourierById(editParam) {\n  return function (dispatch) {\n    const URL1 = rsapi.post('country/getCountry', {\n      \"userinfo\": editParam.userInfo\n    });\n    const URL2 = rsapi.post(\"courier/getActiveCourierById\", {\n      [editParam.primaryKeyField]: editParam.primaryKeyValue,\n      \"userinfo\": editParam.userInfo\n    });\n    dispatch(initRequest(true));\n    Axios.all([URL1, URL2]).then(response => {\n      let selectedRecord = {};\n      let selectedId = editParam.primaryKeyValue;\n      selectedRecord = response[1].data;\n      let Country = response[0].data;\n      getComboLabelValue(selectedRecord, Country, \"ncountrycode\", \"scountryname\");\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          selectedRecord,\n          Country: response[0].data || [],\n          operation: editParam.operation,\n          openModal: true,\n          screenName: editParam.screenName,\n          ncontrolcode: editParam.ncontrolCode,\n          loading: false,\n          selectedId\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}","map":{"version":3,"sources":["E:/WorkingFolder/React_Postgres/ALPD/branches/SOURCE-513-PROD/QuaLISWeb/src/actions/CourierAction.js"],"names":["rsapi","Axios","toast","getComboLabelValue","DEFAULT_RETURN","initRequest","intl","transactionStatus","openCourierModal","screenName","operation","primaryKeyName","masterData","userInfo","ncontrolcode","dispatch","Country","post","urlArray","all","then","response","selectedRecord","ACTIVE","type","payload","data","openModal","loading","catch","error","status","message","warn","formatMessage","id","fetchCourierById","editParam","URL1","URL2","primaryKeyField","primaryKeyValue","selectedId","ncontrolCode"],"mappings":"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","sourcesContent":["import rsapi from '../rsapi';\r\nimport Axios from 'axios';\r\nimport {\r\n    toast\r\n} from 'react-toastify';\r\nimport {\r\n    getComboLabelValue\r\n} from '../components/CommonScript'\r\nimport {\r\n    DEFAULT_RETURN\r\n} from './LoginTypes';\r\nimport { initRequest } from './LoginAction';\r\nimport { intl } from '../components/App';\r\nimport { transactionStatus } from './../components/Enumeration';\r\n\r\n\r\n    export function openCourierModal(screenName, operation, primaryKeyName, masterData, userInfo, ncontrolcode) {\r\n        return function (dispatch) {\r\n            if (operation === \"create\" || operation === \"update\" ) {\r\n                const Country = rsapi.post(\"/country/getCountry\", {\r\n                    \"userinfo\": userInfo\r\n                });\r\n                let urlArray = [];\r\n                if (operation === \"create\") {\r\n                   \r\n                    urlArray = [Country];\r\n                } \r\n                dispatch(initRequest(true));\r\n                Axios.all(urlArray)\r\n                    .then(response => {\r\n                          let selectedRecord = {};\r\n                            selectedRecord[\"nstatus\"] = transactionStatus.ACTIVE;\r\n                            selectedRecord[\"ncouriercode\"] = 0;\r\n                        dispatch({\r\n                            type: DEFAULT_RETURN,\r\n                            payload: {\r\n                                Country: response[0].data || [],\r\n                                operation,\r\n                                screenName,\r\n                                selectedRecord,\r\n                                openModal: true,\r\n                                ncontrolcode, loading: false\r\n                            }\r\n                        })\r\n                    })\r\n                    .catch(error => {\r\n                        dispatch(initRequest(false));\r\n                        if (error.response.status === 500) {\r\n                            toast.error(error.message);\r\n                        } else {\r\n                            toast.warn(intl.formatMessage({\r\n                                id: error.response.data\r\n                            }));\r\n                        }\r\n                    })\r\n            }\r\n        }\r\n    }\r\n    \r\n    export function fetchCourierById (editParam){  \r\n        return function(dispatch){\r\n            const URL1= rsapi.post('country/getCountry',{\"userinfo\":editParam.userInfo})\r\n            const URL2=rsapi.post(\"courier/getActiveCourierById\", { [editParam.primaryKeyField] :editParam.primaryKeyValue , \"userinfo\": editParam.userInfo} )\r\n            dispatch(initRequest(true));\r\n            Axios.all([URL1,URL2])\r\n            .then(response=> { \r\n                let selectedRecord={}\r\n                let selectedId = editParam.primaryKeyValue;\r\n                selectedRecord=response[1].data\r\n                let Country = response[0].data;\r\n               getComboLabelValue(selectedRecord, Country, \"ncountrycode\", \"scountryname\");\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload:{\r\n                    selectedRecord ,\r\n                    Country: response[0].data || [],\r\n                    operation:editParam.operation,\r\n                    openModal: true,\r\n                    screenName:editParam.screenName,\r\n                    ncontrolcode:editParam.ncontrolCode,\r\n                    loading:false,selectedId\r\n                }\r\n                }); \r\n                \r\n            })\r\n            .catch(error => {\r\n                dispatch({type: DEFAULT_RETURN, payload: {loading:false}})\r\n                if (error.response.status === 500){\r\n                    toast.error(error.message);\r\n                } \r\n                else{               \r\n                    toast.warn(error.response.data);\r\n                }         \r\n            })\r\n        }\r\n     }\r\n"]},"metadata":{},"sourceType":"module"}