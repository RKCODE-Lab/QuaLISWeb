{"ast":null,"code":"var _jsxFileName = \"D:\\\\Postgres_workingFolder\\\\QuaLISWeb\\\\src\\\\pages\\\\basemaster\\\\AddBarcode.jsx\";\nimport React from 'react';\nimport { Row, Col } from 'react-bootstrap';\nimport FormInput from '../../components/form-input/form-input.component';\nimport FormTextarea from '../../components/form-textarea/form-textarea.component'; //import CustomSwitch from '../../components/custom-switch/custom-switch.component';\n\nimport FormSelectSearch from '../../components/form-select-search/form-select-search.component';\nimport DropZone from '../../components/dropzone/dropzone.component';\nimport { injectIntl } from 'react-intl';\nimport { attachmentType } from '../../components/Enumeration'; //import { Row, Col, Form } from 'react-bootstrap';\n\nconst AddBarcode = props => {\n  return /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    md: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(FormInput, {\n    label: props.intl.formatMessage({\n      id: \"IDS_BARCODE\"\n    }),\n    name: \"sbarcodename\",\n    type: \"text\",\n    onChange: event => props.onInputOnChange(event),\n    placeholder: props.intl.formatMessage({\n      id: \"IDS_BARCODE\"\n    }),\n    value: props.selectedRecord[\"sbarcodename\"] ? props.selectedRecord[\"sbarcodename\"] : \"\",\n    isMandatory: true,\n    required: true,\n    maxLength: 100,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 19\n    }\n  })), /*#__PURE__*/React.createElement(Col, {\n    md: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(FormSelectSearch, {\n    name: props.barcodeData.nquerycode,\n    formLabel: props.intl.formatMessage({\n      id: \"IDS_QUERY\"\n    }),\n    placeholder: props.intl.formatMessage({\n      id: \"IDS_SELECTRECORD\"\n    }),\n    options: props.queryMapList || [],\n    value: props.selectedRecord ? props.selectedRecord[\"nsqlquerycode\"] : \"\",\n    isMandatory: true,\n    required: true,\n    isMulti: false,\n    isSearchable: true,\n    isDisabled: false,\n    closeMenuOnSelect: true,\n    onChange: event => props.onComboChange(event, \"nsqlquerycode\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 25\n    }\n  })), /*#__PURE__*/React.createElement(Col, {\n    md: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(FormSelectSearch, {\n    name: props.barcodeData.ncontrolcode,\n    formLabel: props.intl.formatMessage({\n      id: \"IDS_CONTROTYPE\"\n    }),\n    placeholder: props.intl.formatMessage({\n      id: \"IDS_SELECTRECORD\"\n    }),\n    options: props.controlMapList || [],\n    value: props.selectedRecord ? props.selectedRecord[\"ncontrolcode\"] : \"\",\n    isMandatory: true,\n    required: true,\n    isMulti: false,\n    isSearchable: true,\n    isDisabled: false,\n    closeMenuOnSelect: true,\n    onChange: event => props.onComboChange(event, \"ncontrolcode\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 29\n    }\n  })), /*#__PURE__*/React.createElement(Col, {\n    md: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(FormTextarea, {\n    label: props.intl.formatMessage({\n      id: \"IDS_DESCRIPTION\"\n    }),\n    name: \"sdescription\",\n    type: \"text\",\n    onChange: event => props.onInputOnChange(event),\n    placeholder: props.intl.formatMessage({\n      id: \"IDS_DESCRIPTION\"\n    }),\n    value: props.selectedRecord[\"sdescription\"] ? props.selectedRecord[\"sdescription\"] : \"\",\n    isMandatory: false,\n    required: false,\n    maxLength: 255,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 17\n    }\n  })), /*#__PURE__*/React.createElement(Col, {\n    md: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(DropZone, {\n    name: \"TestBarcode\",\n    label: \"Barcode\",\n    maxFiles: 1,\n    accept: \".prn\",\n    minSize: 0,\n    maxSize: 1,\n    onDrop: event => props.onDropTestFile(event, 'sfilename', 1),\n    multiple: false,\n    editFiles: props.selectedRecord ? props.selectedRecord : {},\n    attachmentTypeCode: props.operation === \"update\" ? attachmentType.PRN : \"\",\n    fileSizeName: \"nfilesize\",\n    fileName: \"sfilename\",\n    deleteAttachment: props.deleteAttachment,\n    actionType: props.actionType //disabled={disabled}\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 17\n    }\n  })));\n};\n\nexport default injectIntl(AddBarcode);","map":{"version":3,"sources":["D:/Postgres_workingFolder/QuaLISWeb/src/pages/basemaster/AddBarcode.jsx"],"names":["React","Row","Col","FormInput","FormTextarea","FormSelectSearch","DropZone","injectIntl","attachmentType","AddBarcode","props","intl","formatMessage","id","event","onInputOnChange","selectedRecord","barcodeData","nquerycode","queryMapList","onComboChange","ncontrolcode","controlMapList","onDropTestFile","operation","PRN","deleteAttachment","actionType"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { Row, Col } from 'react-bootstrap';\r\nimport FormInput from '../../components/form-input/form-input.component';\r\nimport FormTextarea from '../../components/form-textarea/form-textarea.component';\r\n//import CustomSwitch from '../../components/custom-switch/custom-switch.component';\r\nimport FormSelectSearch from '../../components/form-select-search/form-select-search.component';\r\nimport DropZone from '../../components/dropzone/dropzone.component';\r\nimport {injectIntl } from 'react-intl';\r\nimport { attachmentType } from '../../components/Enumeration';\r\n//import { Row, Col, Form } from 'react-bootstrap';\r\n\r\nconst AddBarcode = (props) => {\r\n    return(\r\n          <Row>                       \r\n            <Col md={12}>\r\n                  <FormInput\r\n                    label={props.intl.formatMessage({ id: \"IDS_BARCODE\" })}\r\n                    name= \"sbarcodename\"\r\n                    type=\"text\"\r\n                    onChange={(event) => props.onInputOnChange(event)}\r\n                    placeholder={props.intl.formatMessage({ id: \"IDS_BARCODE\" })}\r\n                    value={ props.selectedRecord[\"sbarcodename\"] ? props.selectedRecord[\"sbarcodename\"] : \"\"}\r\n                    isMandatory={true}\r\n                    required={true}\r\n                    maxLength={100}\r\n                />\r\n            </Col>\r\n\r\n            <Col md={12}>\r\n                        <FormSelectSearch\r\n                                    name={props.barcodeData.nquerycode}\r\n                                    formLabel={ props.intl.formatMessage({ id:\"IDS_QUERY\"})}                              \r\n                                    placeholder={props.intl.formatMessage({ id:\"IDS_SELECTRECORD\"})}                            \r\n                                    options={ props.queryMapList || []}\r\n                                    value = { props.selectedRecord ? props.selectedRecord[\"nsqlquerycode\"]:\"\"}\r\n                                    isMandatory={true}\r\n                                    required={true}\r\n                                    isMulti={false}\r\n                                    isSearchable={true}                                \r\n                                    isDisabled={false}\r\n                                    closeMenuOnSelect={true}\r\n                                    onChange = {(event)=> props.onComboChange(event, \"nsqlquerycode\")}                               \r\n                            />\r\n                    </Col>\r\n\r\n                    <Col md={12}>\r\n                            <FormSelectSearch\r\n                                    name={props.barcodeData.ncontrolcode}\r\n                                    formLabel={ props.intl.formatMessage({ id:\"IDS_CONTROTYPE\"})}                              \r\n                                    placeholder={props.intl.formatMessage({ id:\"IDS_SELECTRECORD\"})}                               \r\n                                    options={ props.controlMapList || []}\r\n                                    value = { props.selectedRecord ? props.selectedRecord[\"ncontrolcode\"]:\"\"}\r\n                                    isMandatory={true}\r\n                                    required={true}\r\n                                    isMulti={false}\r\n                                    isSearchable={true}                                \r\n                                    isDisabled={false}\r\n                                    closeMenuOnSelect={true}\r\n                                    onChange = {(event)=> props.onComboChange(event, \"ncontrolcode\")}                               \r\n                            />\r\n                    </Col>\r\n\r\n\r\n            <Col md={12}>\r\n                <FormTextarea\r\n                    label={props.intl.formatMessage({ id:\"IDS_DESCRIPTION\" })}\r\n                    name=\"sdescription\"\r\n                    type=\"text\"\r\n                    onChange={(event) => props.onInputOnChange(event)}\r\n                    placeholder={props.intl.formatMessage({ id: \"IDS_DESCRIPTION\" })}\r\n                    value={props.selectedRecord[\"sdescription\"] ? props.selectedRecord[\"sdescription\"] : \"\"}\r\n                    isMandatory={false}\r\n                    required={false}\r\n                    maxLength={255}\r\n                />\r\n            </Col>\r\n\r\n            {/* <Col md=\"12\">\r\n                <Form.Group>\r\n                    <Form.Check \r\n                        name=\"nattachmenttypecode\" \r\n                        type=\"radio\"\r\n                        id=\"AddFiles\"\r\n                        label={props.intl.formatMessage({ id: \"IDS_FTP\" })}\r\n                        inline={true}\r\n                        onChange={(event)=>props.onInputOnChange(event, 1)}\r\n                        //checked={nattachmenttypecode===attachmentType.FTP?true:false}\r\n                        //disabled={disabled}\r\n                    >\r\n                    </Form.Check>\r\n                    </Form.Group>\r\n                </Col> */}\r\n\r\n\r\n            <Col md={12}>\r\n                <DropZone\r\n                    name='TestBarcode' \r\n                    label = {\"Barcode\"}\r\n                    maxFiles={1}\r\n                    accept=\".prn\"\r\n                    minSize={0}\r\n                    maxSize={1}\r\n                    onDrop={(event)=>props.onDropTestFile(event,'sfilename',1)}\r\n                    multiple={false}\r\n                    editFiles={props.selectedRecord?props.selectedRecord:{}}\r\n                    attachmentTypeCode={props.operation === \"update\" ? attachmentType.PRN : \"\"}            \r\n                    fileSizeName=\"nfilesize\"\r\n                    fileName=\"sfilename\"\r\n                    deleteAttachment={props.deleteAttachment}\r\n                    actionType={props.actionType}\r\n                    //disabled={disabled}\r\n                />\r\n            </Col>\r\n         </Row>\r\n    );\r\n};\r\nexport default injectIntl(AddBarcode);"]},"metadata":{},"sourceType":"module"}