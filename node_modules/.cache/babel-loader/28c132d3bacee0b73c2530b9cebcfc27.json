{"ast":null,"code":"var _jsxFileName = \"E:\\\\WorkingFolder\\\\React_Postgres\\\\ALPD\\\\branches\\\\SOURCE-513-PROD\\\\QuaLISWeb\\\\src\\\\pages\\\\storagemanagement\\\\BulkBarcodeGeneration.jsx\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { injectIntl } from 'react-intl';\nimport { Row, Col, Button, Card, Nav } from 'react-bootstrap';\nimport { toast } from 'react-toastify';\nimport { process } from '@progress/kendo-data-query';\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\nimport Esign from '../audittrail/Esign';\nimport { ProductList } from '../product/product.styled';\nimport { callService, crudMaster, updateStore, validateEsignCredential, getBulkBarcodeGenData, getBulkBarcodeGeneration, getBarcodeAndPrinterService, filterTransactionList, getProjectBarcodceConfig, importBulkBarcodeGeneration, getTabBulkBarcodeGeneration, deleteBarcodeData, deleteBulkBarcodeGeneration } from '../../actions';\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\nimport { constructOptionList, getControlMap, showEsign, onDropAttachFileList, Lims_JSON_stringify, convertDateValuetoString, rearrangeDateFormat, deleteAttachmentDropZone, create_UUID, replaceBackSlash, sortData } from '../../components/CommonScript';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faFileImport, faTrashAlt } from '@fortawesome/free-solid-svg-icons';\nimport { ContentPanel } from '../product/product.styled';\nimport { ReactComponent as RefreshIcon } from \"@svgr/webpack?-svgo,+titleProp,+ref!../../assets/image/refresh.svg\";\nimport ConfirmMessage from '../../components/confirm-alert/confirm-message.component';\nimport { attachmentType } from '../../components/Enumeration';\nimport BulkBarcodeGenerationFilter from './BulkBarcodeGenerationFilter';\nimport BreadcrumbComponent from '../../components/Breadcrumb.Component';\nimport { ExcelExport, ExcelExportColumn } from '@progress/kendo-react-excel-export';\nimport { LocalizationProvider } from '@progress/kendo-react-intl';\nimport ImportBulkBarcodeData from './ImportBulkBarcodeData';\nimport TransactionListMasterJsonView from '../../components/TransactionListMasterJsonView';\nimport { faFileExcel, faPrint } from '@fortawesome/free-solid-svg-icons';\nimport { ListWrapper } from '../userroletemplate/userroletemplate.styles';\nimport SplitterLayout from 'react-splitter-layout';\nimport AddPrinter from '../registration/AddPrinter';\nimport ImportDataGridWithSelection from '../../pages/storagemanagement/ImportDataGridWithSelection';\n\nconst mapStateToProps = state => {\n  return {\n    Login: state.Login\n  };\n};\n\nclass BulkBarcodeGeneration extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.sidebarExpandCollapse = () => {\n      this.setState({\n        sidebarview: true\n      });\n    };\n\n    this.dataStateChange = event => {\n      this.setState({\n        dataResult: process(this.state.data, event.dataState),\n        dataState: event.dataState\n      });\n    };\n\n    this.paneSizeChange = d => {\n      this.setState({\n        splitChangeWidthPercentage: d\n      });\n    };\n\n    this.openFilter = () => {\n      let showFilter = !this.props.Login.showFilter;\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          showFilter\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.closeFilter = () => {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          showFilter: false\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.closeModal = () => {\n      let loadEsign = this.props.Login.loadEsign;\n      let openModal = this.props.Login.openModal;\n      let selectedRecord = this.props.Login.selectedRecord;\n      let loadPrinter = this.props.Login.loadPrinter;\n\n      if (this.props.Login.loadEsign) {\n        if (this.props.Login.operation === \"delete\") {\n          loadEsign = false;\n          openModal = false;\n          selectedRecord = {};\n          loadPrinter = false;\n        } else {\n          loadEsign = false; // selectedRecord[\"agree\"] = 4;\n\n          selectedRecord['esignpassword'] = \"\";\n          selectedRecord['esigncomments'] = \"\";\n          selectedRecord['esignreason'] = \"\";\n        }\n      } else {\n        openModal = false;\n        selectedRecord = {};\n        loadPrinter = false;\n      }\n\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          openModal,\n          loadEsign,\n          selectedRecord,\n          selectedId: null,\n          loadPrinter\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.handleDateChange = (dateName, dateValue) => {\n      let masterData = this.props.Login.masterData;\n      masterData[dateName] = dateValue;\n      this.setState({\n        masterData\n      });\n    };\n\n    this.printBulkBarcodegeneration = printbarcodeId => {\n      if (this.props.Login.masterData && this.props.Login.masterData.bulkbarcodedatagen && this.props.Login.masterData.bulkbarcodedatagen.length > 0) {\n        if (this.props.Login.addedComponentList && this.props.Login.addedComponentList.length > 0) {\n          this.props.getBarcodeAndPrinterService({\n            masterData: this.props.Login.masterData,\n            ncontrolcode: printbarcodeId,\n            userInfo: this.props.Login.userInfo,\n            control: \"sampleBarcode\"\n          });\n        } else {\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_SELECTANYONERECORD\"\n          }));\n        }\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_NORECORDSAVAILABLE\"\n        }));\n      }\n    };\n\n    this.ConfirmDelete = deleteId => {\n      this.confirmMessage.confirm(\"deleteMessage\", this.props.intl.formatMessage({\n        id: \"IDS_DELETE\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_DEFAULTCONFIRMMSG\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_OK\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_CANCEL\"\n      }), () => this.deleteRecord(deleteId));\n    };\n\n    this.ConfirmDeleteBarcodeRecord = deleteId => {\n      this.confirmMessage.confirm(\"deleteMessage\", this.props.intl.formatMessage({\n        id: \"IDS_DELETE\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_DEFAULTCONFIRMMSG\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_OK\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_CANCEL\"\n      }), () => this.deleteBarcodeRecord(\"delete\", deleteId));\n    };\n\n    this.handlePageChange = e => {\n      this.setState({\n        skip: e.skip,\n        take: e.take\n      });\n    };\n\n    this.PrinterChange = (comboData, fieldName) => {\n      const selectedRecord = this.state.selectedRecord || {};\n      selectedRecord[fieldName] = comboData;\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onFilterSubmit = () => {\n      if (this.props.Login.masterData.defaultProjectType && this.props.Login.masterData.defaultBarcodeConfig && this.props.Login.masterData.defaultBarcodeConfig.value) {\n        this.searchRef.current.value = \"\";\n        let inputData = [];\n        let obj = convertDateValuetoString(this.props.Login.masterData.FromDate, this.props.Login.masterData.ToDate, this.props.Login.userInfo);\n        let fromDate = obj.fromDate;\n        let toDate = obj.toDate;\n        inputData = {\n          userinfo: this.props.Login.userInfo,\n          nprojecttypecode: this.props.Login.masterData && this.props.Login.masterData.defaultProjectType && this.props.Login.masterData.defaultProjectType.value || -1,\n          nbulkbarcodeconfigcode: this.props.Login.masterData && this.props.Login.masterData.defaultBarcodeConfig && this.props.Login.masterData.defaultBarcodeConfig.value || -1,\n          fromDate: fromDate,\n          toDate: toDate,\n          isfilterSubmit: true\n        };\n        let masterData = { ...this.props.Login.masterData,\n          realProjectType: this.props.Login.masterData && this.props.Login.masterData.defaultProjectType && this.props.Login.masterData.defaultProjectType,\n          realBarcodeConfig: this.props.Login.masterData && this.props.Login.masterData.defaultBarcodeConfig && this.props.Login.masterData.defaultBarcodeConfig\n        };\n        let inputParam = {\n          masterData,\n          inputData\n        };\n        this.props.getBulkBarcodeGeneration(inputParam);\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTALLINFILTER\"\n        }));\n      }\n    };\n\n    this.selectionChange = event => {\n      let addedComponentList = this.props.Login.addedComponentList || []; // let selectedRecord={...this.state.selectedRecord,\"isInitialRender\":true}\n\n      const addComponentDataList = this.props.Login.masterData.bulkbarcodedatagen.map(item => {\n        if (item[\"Barcode Id\"] === event.dataItem[\"Barcode Id\"]) {\n          item.selected = !event.dataItem.selected;\n\n          if (item.selected) {\n            const newItem = JSON.parse(JSON.stringify(item));\n            addedComponentList.push(newItem);\n          } else {\n            addedComponentList = addedComponentList.filter(item1 => item1[\"Barcode Id\"] !== item[\"Barcode Id\"]);\n          }\n        }\n\n        return item;\n      });\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          isInitialRender: true,\n          addComponentDataList,\n          addedComponentList,\n          selectAll: this.valiateCheckAll(addComponentDataList),\n          deleteSelectAll: this.valiateCheckAll(addedComponentList)\n        }\n      };\n      this.props.updateStore(updateInfo);\n      /*  this.setState({\r\n                \"selected\":\"selected\",\r\n            selectedRecord,\r\n            addComponentDataList, addedComponentList,\r\n            addSelectAll: this.valiateCheckAll(addComponentDataList),\r\n            deleteSelectAll: this.valiateCheckAll(addedComponentList)\r\n        });*/\n    };\n\n    this.headerSelectionChange = event => {\n      const checked = event.syntheticEvent.target.checked;\n      let addedComponentList = []; //   let selectedRecord={...this.state.selectedRecord,\"isInitialRender\":true}\n\n      if (checked) {\n        const data = event.target.props.data.map(item => {\n          if (addedComponentList.findIndex(x => x[\"Barcode Id\"] === item[\"Barcode Id\"]) === -1) {\n            item.selected = checked;\n            const newItem = JSON.parse(JSON.stringify(item));\n            delete newItem['selected'];\n            addedComponentList.push(newItem);\n            return item;\n          } else {\n            let olditem = JSON.parse(JSON.stringify(addedComponentList[addedComponentList.findIndex(x => x[\"Barcode Id\"] === item[\"Barcode Id\"])]));\n            olditem.selected = checked;\n            let newItem = JSON.parse(JSON.stringify(olditem));\n            newItem.selected = false;\n            addedComponentList.push(newItem);\n            return olditem;\n          }\n        });\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            isInitialRender: true,\n            addComponentDataList: data,\n            addedComponentList,\n            selectAll: this.valiateCheckAll(addedComponentList),\n            deleteSelectAll: this.valiateCheckAll(addedComponentList),\n            selectAll: checked,\n            deleteSelectAll: false\n          }\n        };\n        this.props.updateStore(updateInfo);\n        /*     this.setState({\r\n                // selectedRecord,\r\n                 addComponentDataList: data, addedComponentList,\r\n                 addSelectAll: this.valiateCheckAll(addedComponentList),\r\n                 deleteSelectAll: this.valiateCheckAll(addedComponentList),\r\n                 addSelectAll: checked, deleteSelectAll: false\r\n             });*/\n      } else {\n        let addedComponentData = this.props.Login.addedComponentList || [];\n        let deletedListdData = this.state.deletedList || [];\n        const data = this.props.Login.addComponentDataList.map(item => {\n          addedComponentData = addedComponentData.filter(item1 => item1.npreregno !== item.npreregno);\n          deletedListdData = deletedListdData.filter(item1 => item1.npreregno !== item.npreregno);\n          item.selected = checked;\n          return item;\n        });\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            isInitialRender: true,\n            addComponentDataList: data,\n            addedComponentList,\n            addedComponentData,\n            deletedList: deletedListdData,\n            deleteSelectAll: this.valiateCheckAll(addedComponentList),\n            selectAll: checked,\n            deleteSelectAll: false\n          }\n        };\n        this.props.updateStore(updateInfo);\n        /*   this.setState({\r\n               addComponentDataList: data, addedComponentList: addedComponentData, deletedList: deletedListdData,\r\n               addSelectAll: this.valiateCheckAll(addedComponentList),\r\n               deleteSelectAll: this.valiateCheckAll(addedComponentList),\r\n               addSelectAll: checked, deleteSelectAll: false\r\n           });*/\n      }\n    };\n\n    this.onDropFile = (attachedFiles, fieldName, maxSize) => {\n      let selectedRecord = this.state.selectedRecord || {};\n      selectedRecord[fieldName] = onDropAttachFileList(selectedRecord[fieldName], attachedFiles, maxSize);\n      this.setState({\n        selectedRecord,\n        actionType: \"new\"\n      });\n    };\n\n    this.expandChange = event => {\n      const isExpanded = event.dataItem.expanded === undefined ? event.dataItem.aggregates : event.dataItem.expanded;\n      event.dataItem.expanded = !isExpanded;\n      this.setState({ ...this.props\n      });\n    };\n\n    this.onComboChange = (comboData, fieldName) => {\n      if (comboData != null) {\n        const selectedRecord = this.state.selectedRecord || {};\n        let inputData = [];\n\n        if (fieldName == \"nprojecttypecode\") {\n          inputData = {\n            userinfo: this.props.Login.userInfo,\n            nprojecttypecode: parseInt(comboData.value),\n            defaultProjectType: comboData\n          };\n          const masterData = { ...this.props.Login.masterData\n          };\n          const inputParam = {\n            masterData,\n            inputData,\n            selectedRecord\n          };\n          this.props.getProjectBarcodceConfig(inputParam);\n        } else if (fieldName === 'nbulkbarcodeconfigcode') {\n          const masterData = { ...this.props.Login.masterData,\n            defaultBarcodeConfig: comboData\n          };\n          const updateInfo = {\n            isInitialRender: false,\n            typeName: DEFAULT_RETURN,\n            data: {\n              masterData\n            }\n          };\n          this.props.updateStore(updateInfo);\n        } else {\n          selectedRecord[fieldName] = comboData;\n          this.setState({\n            selectedRecord\n          });\n        }\n      }\n    };\n\n    this.deleteAttachment = (event, file, fieldName) => {\n      let selectedRecord = this.state.selectedRecord || {};\n      selectedRecord[fieldName] = deleteAttachmentDropZone(selectedRecord[fieldName], file);\n      this.setState({\n        selectedRecord,\n        actionType: \"delete\"\n      });\n    };\n\n    this.handleExportClick = () => {\n      //ALPD-4737--Vignesh R(28-08-2024)\n      if (this.props.Login.masterData.realProjectType && this.props.Login.masterData.realBarcodeConfig && this.props.Login.masterData.realBarcodeConfig.value) {\n        this.setState({\n          export: true\n        });\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTALLINFILTER\"\n        }));\n      }\n    };\n\n    this.handleImportClick = () => {\n      if (this.props.Login.masterData.realProjectType && this.props.Login.masterData.realBarcodeConfig && this.props.Login.masterData.realBarcodeConfig.value) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            //ALPD-4594,ALPD-4596--Vignesh R(31-07-2024)\n            selectedRecord: { ...this.state.selectedRecord,\n              \"isInitialRender\": false\n            },\n            isInitialRender: false,\n            operation: \"\",\n            loadImportFileData: true,\n            openModal: true,\n            loadPrinter: false,\n            screenName: this.props.intl.formatMessage({\n              id: \"IDS_IMPORT\"\n            })\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTALLINFILTER\"\n        }));\n      }\n    };\n\n    this.childDataChange = selectedRecord => {\n      this.setState({\n        selectedRecord: { ...selectedRecord,\n          isInitialRender: false\n        }\n      });\n    };\n\n    this.onInputOnChange = event => {\n      const selectedRecord = this.state.selectedRecord || {};\n      selectedRecord[event.target.name] = event.target.value;\n      this.childDataChange(selectedRecord); //this.setState({ selectedRecord });\n      //this.setState({ selectedRecord });\n    };\n\n    this.deleteRecord = (operation, ncontrolcode) => {\n      if (this.props.Login.masterData && this.props.Login.masterData.selectedBulkBarcodeGeneration !== null) {\n        let obj = convertDateValuetoString(this.props.Login.masterData.FromDate, this.props.Login.masterData.ToDate, this.props.Login.userInfo);\n        let fromDate = obj.fromDate;\n        let toDate = obj.toDate;\n        const postParam = {\n          inputListName: \"BarcodeGeneration\",\n          selectedObject: \"selectedBulkBarcodeGeneration\",\n          primaryKeyField: \"nbulkbarcodegenerationcode\",\n          primaryKeyValue: this.props.Login.masterData.selectedBulkBarcodeGeneration.nbulkbarcodegenerationcode,\n          fetchUrl: \"bulkbarcodegeneration/getBulkBarcodeGeneration\",\n          fecthInputObject: {\n            userinfo: this.props.Login.userInfo\n          }\n        };\n        const inputParam = {\n          classUrl: this.props.Login.inputParam.classUrl,\n          methodUrl: \"BulkBarcodeGeneration\",\n          displayName: this.props.Login.inputParam.displayName,\n          inputData: {\n            \"isDelete\": true,\n            \"userinfo\": this.props.Login.userInfo,\n            \"operation\": \"delete\",\n            \"fromDate\": fromDate,\n            \"toDate\": toDate,\n            \"nprojecttypecode\": this.props.Login.masterData.realProjectType.value || -1,\n            \"nbulkbarcodegenerationcode\": this.props.Login.masterData && this.props.Login.masterData.selectedBulkBarcodeGeneration && this.props.Login.masterData.selectedBulkBarcodeGeneration.nbulkbarcodegenerationcode || -1\n          },\n          postParam,\n          operation: \"delete\",\n          dataState: this.state.dataState\n        };\n\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, ncontrolcode)) {\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              loadEsign: true,\n              screenData: {\n                inputParam,\n                masterData: this.props.Login.masterData\n              },\n              openModal: true,\n              screenName: this.props.intl.formatMessage({\n                id: this.props.Login.inputParam.displayName\n              }),\n              operation: \"delete\"\n            }\n          };\n          this.props.updateStore(updateInfo);\n        } else {\n          this.props.deleteBulkBarcodeGeneration(inputParam, this.props.Login.masterData);\n        }\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_NORECORDSAVAILABLE\"\n        }));\n      }\n    };\n\n    this.deleteBarcodeRecord = ncontrolcode => {\n      if (this.props.Login.masterData && this.props.Login.masterData.selectedBulkBarcodeGeneration !== null) {\n        if (this.props.Login.masterData && this.props.Login.masterData.bulkbarcodedatagen && this.props.Login.masterData.bulkbarcodedatagen.length > 0) {\n          if (this.props.Login.addedComponentList && this.props.Login.addedComponentList.length > 0) {\n            let obj = convertDateValuetoString(this.props.Login.masterData.FromDate, this.props.Login.masterData.ToDate, this.props.Login.userInfo);\n            let fromDate = obj.fromDate;\n            let toDate = obj.toDate;\n            let updateBarcodeData = this.props.Login.masterData.bulkbarcodedatagen.filter(item => {\n              return !this.props.Login.addedComponentList.some(item1 => item1['Barcode Id'] === item['Barcode Id']);\n            });\n            const postParam = {\n              inputListName: \"BarcodeGeneration\",\n              selectedObject: \"selectedBulkBarcodeGeneration\",\n              primaryKeyField: \"nbulkbarcodegenerationcode\",\n              primaryKeyValue: this.props.Login.masterData.selectedBulkBarcodeGeneration.nbulkbarcodegenerationcode,\n              fetchUrl: \"bulkbarcodegeneration/getBulkBarcodeGeneration\",\n              fecthInputObject: {\n                userinfo: this.props.Login.userInfo\n              }\n            };\n            const inputParam = {\n              classUrl: this.props.Login.inputParam.classUrl,\n              addedComponentList: [],\n              selectAll: false,\n              methodUrl: \"BarcodeData\",\n              displayName: this.props.Login.inputParam.displayName,\n              inputData: {\n                \"userinfo\": this.props.Login.userInfo,\n                \"operation\": \"delete\",\n                \"fromDate\": fromDate,\n                \"toDate\": toDate,\n                \"nbulkbarcodeconfigcode\": this.props.Login.masterData && this.props.Login.masterData.realBarcodeConfig && this.props.Login.masterData.realBarcodeConfig.value || -1,\n                \"nprojecttypecode\": this.props.Login.masterData.realProjectType.value || -1,\n                \"nbulkbarcodegenerationcode\": this.props.Login.masterData && this.props.Login.masterData.selectedBulkBarcodeGeneration && this.props.Login.masterData.selectedBulkBarcodeGeneration.nbulkbarcodegenerationcode || -1,\n                \"updateBarcodeData\": Lims_JSON_stringify(JSON.stringify(updateBarcodeData))\n              },\n              postParam,\n              operation: \"delete\",\n              dataState: this.state.dataState\n            };\n\n            if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, ncontrolcode)) {\n              const updateInfo = {\n                typeName: DEFAULT_RETURN,\n                data: {\n                  loadEsign: true,\n                  screenData: {\n                    inputParam,\n                    masterData: this.props.Login.masterData\n                  },\n                  openModal: true,\n                  screenName: this.props.intl.formatMessage({\n                    id: this.props.Login.inputParam.displayName\n                  }),\n                  operation: \"delete\"\n                }\n              };\n              this.props.updateStore(updateInfo);\n            } else {\n              this.props.deleteBarcodeData(inputParam, this.props.Login.masterData);\n            }\n          } else {\n            toast.warn(this.props.intl.formatMessage({\n              id: \"IDS_SELECTANYONERECORD\"\n            }));\n          }\n        } else {\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_NORECORDSAVAILABLE\"\n          }));\n        }\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_NORECORDSAVAILABLE\"\n        }));\n      }\n    };\n\n    this.reloadData = () => {\n      this.searchRef.current.value = \"\";\n\n      if (this.props.Login.masterData.realProjectType && this.props.Login.masterData.realBarcodeConfig && this.props.Login.masterData.realBarcodeConfig.value) {\n        let inputData = [];\n        let obj = convertDateValuetoString(this.props.Login.masterData.FromDate, this.props.Login.masterData.ToDate, this.props.Login.userInfo);\n        let fromDate = obj.fromDate;\n        let toDate = obj.toDate;\n        inputData = {\n          userinfo: this.props.Login.userInfo,\n          //ALPD-4599--Vignesh R(31-07-2024)\n          nprojecttypecode: this.props.Login.masterData && this.props.Login.masterData.realProjectType && this.props.Login.masterData.realProjectType.value || -1,\n          nbulkbarcodeconfigcode: this.props.Login.masterData && this.props.Login.masterData.realBarcodeConfig && this.props.Login.masterData.realBarcodeConfig.value || -1,\n          fromDate: fromDate,\n          toDate: toDate\n        };\n        const inputParam = {\n          inputData: inputData,\n          masterData: this.props.Login.masterData\n        };\n        this.props.getBulkBarcodeGeneration(inputParam);\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTALLINFILTER\"\n        }));\n      }\n    };\n\n    this.ConfirmDelete = deleteId => {\n      this.confirmMessage.confirm(\"deleteMessage\", this.props.intl.formatMessage({\n        id: \"IDS_DELETE\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_DEFAULTCONFIRMMSG\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_OK\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_CANCEL\"\n      }), () => this.deleteRecord(\"delete\", deleteId));\n    };\n\n    this.onSaveClick = (saveType, formRef) => {\n      this.searchRef.current.value = \"\";\n      let selectedRecord = this.state.selectedRecord || {};\n      const acceptedFiles = this.state.selectedRecord.sfilename;\n      let importBulkBarcodeGen = [];\n      const formData = new FormData();\n      let obj = convertDateValuetoString(this.props.Login.masterData.FromDate, this.props.Login.masterData.ToDate, this.props.Login.userInfo);\n      let fromDate = obj.fromDate;\n      let toDate = obj.toDate;\n\n      if (acceptedFiles && acceptedFiles.length === 1) {\n        if (acceptedFiles && Array.isArray(acceptedFiles) && acceptedFiles.length > 0) {\n          acceptedFiles.forEach((file, index) => {\n            const tempData = {};\n            const splittedFileName = file.name.split('.');\n            const fileExtension = file.name.split('.')[splittedFileName.length - 1];\n            const ssystemfilename = selectedRecord.ssystemfilename ? selectedRecord.ssystemfilename.split('.') : \"\";\n            const filesystemfileext = selectedRecord.ssystemfilename ? file.name.split('.')[ssystemfilename.length - 1] : \"\";\n            const uniquefilename = 1 === attachmentType.FTP ? ssystemfilename !== \"\" ? ssystemfilename[0] + '.' + filesystemfileext : create_UUID() + '.' + fileExtension : \"\";\n            tempData[\"sfilename\"] = this.state.selectedRecord['simportfilename'] ? this.state.selectedRecord['simportfilename'] : \"\"; // tempData[\"sfilename\"] = Lims_JSON_stringify(file.name, false);\n\n            tempData[\"sdescription\"] = Lims_JSON_stringify(replaceBackSlash(selectedRecord.sdescription ? selectedRecord.sdescription.trim() : \"\"), false); //  tempData[\"nlinkcode\"] = transactionStatus.NA;\n\n            tempData[\"ssystemfilename\"] = uniquefilename;\n            tempData['nprojecttypecode'] = this.props.Login.masterData.realProjectType && this.props.Login.masterData.realProjectType.value || -1;\n            tempData['nbulkbarcodeconfigcode'] = this.props.Login.masterData.realBarcodeConfig && this.props.Login.masterData.realBarcodeConfig.value || -1;\n            tempData['barcodefields'] = formData.append(\"uploadedFile\" + index, file);\n            formData.append(\"uniquefilename\" + index, uniquefilename);\n            importBulkBarcodeGen.push(tempData);\n          });\n          formData.append(\"filecount\", acceptedFiles.length);\n          formData.append(\"importBulkBarcodeGen\", JSON.stringify(importBulkBarcodeGen));\n          formData.append(\"fromDate\", fromDate);\n          formData.append(\"toDate\", toDate);\n          formData.append(\"ImportFile\", selectedRecord['sfilename'][0]);\n          const bulkbarcodeFields = this.props.Login.masterData && this.props.Login.masterData.jsondataBarcodeFields.filter(item => item.sfieldname !== 'Barcode Id').map(item => item.sfieldname).join(\",\");\n          formData.append(\"bulkbarcodeFields\", bulkbarcodeFields);\n        }\n\n        const inputParam = {\n          inputData: {\n            \"userinfo\": { ...this.props.Login.userInfo,\n              sformname: Lims_JSON_stringify(this.props.Login.userInfo.sformname),\n              smodulename: Lims_JSON_stringify(this.props.Login.userInfo.smodulename),\n              //ALPD-1826(while saving the file and link,audit trail is not captured the respective language)\n              slanguagename: Lims_JSON_stringify(this.props.Login.userInfo.slanguagename)\n            }\n          },\n          formData: formData,\n          masterData: this.props.Login.masterData && this.props.Login.masterData,\n          selectedRecord: this.state.selectedRecord || {},\n          operation: \"import\",\n          classUrl: \"bulkbarcodegeneration\",\n          saveType,\n          formRef,\n          methodUrl: \"BulkBarcodeGeneration\"\n        };\n\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              loadEsign: true,\n              screenData: {\n                inputParam,\n                masterData: this.props.Login.masterData\n              },\n              openModal: true,\n              screenName: this.props.intl.formatMessage({\n                id: \"IDS_CLIENT\"\n              }),\n              //this.props.intl.formatMessage({ id: this.props.Login.inputParam.displayName }),\n              operation: this.props.Login.operation\n            }\n          };\n          this.props.updateStore(updateInfo);\n        } else {\n          this.props.importBulkBarcodeGeneration(inputParam, this.props.Login.masterData, \"openModal\");\n        }\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_PLEASESELECTTHEFILE\"\n        }));\n      }\n    };\n\n    this.validateEsign = () => {\n      const inputParam = {\n        inputData: {\n          \"userinfo\": { ...this.props.Login.userInfo,\n            sreason: this.state.selectedRecord[\"esigncomments\"],\n            nreasoncode: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].value,\n            spredefinedreason: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].label\n          },\n          password: this.state.selectedRecord[\"esignpassword\"]\n        },\n        screenData: this.props.Login.screenData\n      };\n      this.props.validateEsignCredential(inputParam, \"openModal\");\n    };\n\n    this.onSavePrinterClick = () => {\n      let insertlist = [];\n      const inputParam = {\n        classUrl: 'bulkbarcodegeneration',\n        methodUrl: 'Barcode',\n        displayName: this.props.Login.inputParam.displayName,\n        inputData: {\n          selectAll: false,\n          sprintername: this.state.selectedRecord.sprintername ? this.state.selectedRecord.sprintername.value : '',\n          sbarcodename: this.state.selectedRecord.sbarcodename ? this.state.selectedRecord.sbarcodename.value : '',\n          insertlist,\n          BarcodeID: this.props.Login.addedComponentList ? this.props.Login.addedComponentList.map(x => \"'\" + x['Barcode Id'] + \"'\").join(\",\") : \" \",\n          //selectDetailsList:this.state.addedComponentList,\n          userinfo: this.props.Login.userInfo,\n          ncontrolcode: this.props.Login.ncontrolcode\n        },\n        operation: 'print',\n        action: 'printer'\n      };\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolcode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData: { ...this.props.Login.masterData,\n                searchedData: undefined\n              }\n            },\n            openModal: true,\n            screenName: this.props.intl.formatMessage({\n              id: this.props.Login.inputParam.displayName\n            }),\n            operation: 'printer'\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, { ...this.props.Login.masterData,\n          searchedData: undefined\n        }, \"openModal\");\n      }\n    };\n\n    this.formRef = React.createRef();\n    this.extractedColumnList = [];\n    this.fieldList = [];\n    const dataState = {\n      skip: 0,\n      take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n    };\n    this.searchFieldList = [\"sfilename\"];\n    this.state = {\n      addScreen: false,\n      data: [],\n      masterStatus: \"\",\n      error: \"\",\n      operation: \"create\",\n      dataResult: [],\n      dataState: dataState,\n      userRoleControlRights: [],\n      controlMap: new Map(),\n      selectedRecord: {},\n      sidebarview: false,\n      splitChangeWidthPercentage: 30\n    };\n    this.searchRef = React.createRef();\n    this.confirmMessage = new ConfirmMessage();\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\n      toast.warn(props.Login.masterStatus);\n      props.Login.masterStatus = \"\";\n    }\n\n    if (props.Login.error !== state.error) {\n      toast.error(props.Login.error);\n      props.Login.error = \"\";\n    }\n\n    if (props.Login.selectedRecord === undefined) {\n      return {\n        selectedRecord: {}\n      };\n    }\n\n    return null;\n  }\n\n  // printBulkBarcodegeneration = () => {\n  //     if (this.props.Login.masterData && this.props.Login.masterData.bulkbarcodedatagen && this.props.Login.masterData.bulkbarcodedatagen.length > 0) {\n  //         let obj = convertDateValuetoString(this.props.Login.masterData.FromDate, this.props.Login.masterData.ToDate, this.props.Login.userInfo);\n  //         let fromDate = obj.fromDate;\n  //         let toDate = obj.toDate;\n  //         let inputData = {\n  //             nbulkbarcodeconfigcode: this.props.Login.masterData && this.props.Login.masterData.realBarcodeConfig && this.props.Login.masterData.realBarcodeConfig.value,\n  //             nprojecttypecode: this.props.Login.masterData && this.props.Login.masterData.realProjectType && this.props.Login.masterData.realProjectType.value,\n  //             nbulkbarcodegenerationcode: this.props.Login.masterData && this.props.Login.masterData.selectedBulkBarcodeGeneration && this.props.Login.masterData.selectedBulkBarcodeGeneration.nbulkbarcodegenerationcode,\n  //             userinfo: this.props.Login.userInfo,\n  //             fromDate: fromDate,\n  //             toDate: toDate,\n  //             jsondata: {},\n  //             nbarcodeLength: 14\n  //         }\n  //         let inputParam = {};\n  //         inputParam = {\n  //             inputData: inputData,\n  //             masterData: this.props.Login.masterData\n  //         };\n  //         // this.props.getStorageCategoryForSendToStore(inputParam.userInfo, inputParam.masterData, inputParam.controlcode, this.state.selectedRecord, inputData);\n  //         this.props.getBulkBarcodeGenData(inputParam);\n  //     }\n  //     else {\n  //         toast.warn(\n  //             this.props.intl.formatMessage({\n  //                 id: \"IDS_NORECORDSAVAILABLE\",\n  //             })\n  //         );\n  //     }\n  // }\n  gridfillingColumn(barcodeFields) {\n    let temparray1 = [];\n    sortData(barcodeFields, 'ascending', 'nsorter');\n    barcodeFields && barcodeFields.forEach(barcodeItem => {\n      temparray1.push({\n        idsName: barcodeItem.sfieldname,\n        dataField: barcodeItem.sfieldname,\n        width: '250px'\n      });\n    });\n    const newArray = [...temparray1];\n    return newArray;\n  }\n\n  render() {\n    const extractedColumnList = this.gridfillingColumn(this.props.Login.masterData.jsondataBarcodeFields && this.props.Login.masterData.jsondataBarcodeFields);\n    this.extractedColumnList = extractedColumnList;\n    let obj = convertDateValuetoString(this.props.Login.masterData.realFromDate, this.props.Login.masterData.realToDate, this.props.Login.userInfo);\n    const mandatoryFields = [{\n      \"idsName\": \"IDS_FILENAME\",\n      \"dataField\": \"simportfilename\",\n      \"mandatory\": true,\n      \"mandatoryLabel\": \"IDS_ENTER\",\n      \"controlType\": \"textbox\"\n    }];\n    const printMandatoryFields = [{\n      \"idsName\": \"IDS_BARCODENAME\",\n      \"dataField\": \"sbarcodename\",\n      \"width\": \"150px\",\n      \"mandatory\": true,\n      \"mandatoryLabel\": \"IDS_SELECT\",\n      \"controlType\": \"selectbox\"\n    }, {\n      \"idsName\": \"IDS_PRINTERNAME\",\n      \"dataField\": \"sprintername\",\n      \"width\": \"150px\",\n      \"mandatory\": true,\n      \"mandatoryLabel\": \"IDS_SELECT\",\n      \"controlType\": \"selectbox\"\n    }];\n    let fromDate = this.props.Login.masterData.FromDate ? rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.FromDate) : new Date();\n    let toDate = this.props.Login.masterData.ToDate ? rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.ToDate) : new Date();\n    const breadCrumbData = [];\n\n    if (this.props.Login.masterData && this.props.Login.masterData.realProjectType) {\n      breadCrumbData.push({\n        \"label\": \"IDS_FROM\",\n        \"value\": obj.breadCrumbFrom\n      }, {\n        \"label\": \"IDS_TO\",\n        \"value\": obj.breadCrumbto\n      }, {\n        \"label\": \"IDS_PROJECTTYPE\",\n        \"value\": this.props.Login.masterData.realProjectType && this.props.Login.masterData.realProjectType.label || \"NA\"\n      }, {\n        \"label\": \"IDS_BULKBARCODECONDIG\",\n        \"value\": this.props.Login.masterData.realBarcodeConfig && this.props.Login.masterData.realBarcodeConfig.label || \"NA\"\n      });\n    }\n\n    const exportId = this.state.controlMap.has(\"ExportBulkBarcodeGeneration\") && this.state.controlMap.get(\"ExportBulkBarcodeGeneration\").ncontrolcode;\n    const importId = this.state.controlMap.has(\"ImportBulkBarcodeGeneration\") && this.state.controlMap.get(\"ImportBulkBarcodeGeneration\").ncontrolcode;\n    const printbarcodeId = this.state.controlMap.has(\"PrintBulkBarcodeGeneration\") && this.state.controlMap.get(\"PrintBulkBarcodeGeneration\").ncontrolcode;\n    const deleteId = this.state.controlMap.has(\"DeleteBulkBarcodeGeneration\") && this.state.controlMap.get(\"DeleteBulkBarcodeGeneration\").ncontrolcode;\n    let obj1 = convertDateValuetoString(this.props.Login.masterData.FromDate, this.props.Login.masterData.ToDate, this.props.Login.userInfo);\n    let fromDate1 = obj1.fromDate;\n    let toDate1 = obj1.toDate;\n    const filterParam = {\n      inputListName: \"BulkBarcodeGeneration\",\n      selectedObject: \"selectedBulkBarcodeGeneration\",\n      primaryKeyField: \"nbulkbarcodegenerationcode\",\n      fetchUrl: \"bulkbarcodegeneration/getBulkBarcodeGeneration\",\n      masterData: this.props.Login.masterData || {},\n      fecthInputObject: {\n        userinfo: this.props.Login.userInfo,\n        nprojecttypecode: this.props.Login.masterData && this.props.Login.masterData.realProjectType && this.props.Login.masterData.realProjectType.value,\n        nbulkbarcodeconfigcode: this.props.Login.masterData && this.props.Login.masterData.selectedBulkBarcodeGeneration && this.props.Login.masterData.selectedBulkBarcodeGeneration.nbulkbarcodeconfigcode,\n        fromDate: fromDate1,\n        toDate: toDate1\n      },\n      filteredListName: \"searchedBulkBarcodeConfig\",\n      clearFilter: \"no\",\n      updatedListname: \"selectedBulkBarcodeConfig\",\n      searchRef: this.searchRef,\n      searchFieldList: this.searchFieldList,\n      changeList: []\n    };\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(ListWrapper, {\n      className: \"client-listing-wrap mtop-4 screen-height-window\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 319,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(BreadcrumbComponent, {\n      breadCrumbItem: breadCrumbData,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 320,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(Row, {\n      noGutters: \"true\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 321,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      className: \"parent-port-height sticky_head_parent\",\n      ref: parentHeight => {\n        this.parentHeight = parentHeight;\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 322,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(ListWrapper, {\n      className: `vertical-tab-top ${this.state.enablePropertyPopup ? 'active-popup' : \"\"}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 323,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(SplitterLayout, {\n      borderColor: \"#999\",\n      percentage: true,\n      primaryIndex: 1,\n      secondaryInitialSize: this.state.splitChangeWidthPercentage,\n      onSecondaryPaneSizeChange: this.paneSizeChange,\n      primaryMinSize: 40,\n      secondaryMinSize: 20,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 324,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(TransactionListMasterJsonView, {\n      splitChangeWidthPercentage: this.state.splitChangeWidthPercentage,\n      hidePaging: false,\n      filterColumnData: this.props.filterTransactionList,\n      needMultiSelect: false,\n      masterList: this.props.Login.masterData.searchedData || this.props.Login.masterData.BulkBarcodeGeneration || [],\n      selectedMaster: [this.props.Login.masterData && this.props.Login.masterData.selectedBulkBarcodeGeneration],\n      primaryKeyField: \"nbulkbarcodegenerationcode\",\n      getMasterDetail: bulkBarcodeGeneration => this.props.getTabBulkBarcodeGeneration(bulkBarcodeGeneration, this.props.Login.userInfo, this.props.Login.masterData, this.state.selectedRecord),\n      inputParam: {\n        userInfo: this.props.Login.userInfo,\n        masterData: this.props.Login.masterData\n      },\n      mainField: \"sfilename\",\n      selectedListName: \"selectedBulkBarcodeGeneration\",\n      objectName: \"LocationMaster\",\n      searchListName: \"searchedData\",\n      searchRef: this.searchRef,\n      filterParam: filterParam,\n      showFilter: this.props.Login.showFilter,\n      openFilter: this.openFilter,\n      closeFilter: this.closeFilter,\n      onFilterSubmit: this.onFilterSubmit,\n      needFilter: true,\n      handlePageChange: this.handlePageChange,\n      skip: this.state.skip,\n      take: this.state.take //ALPD-4614--Vignesh R(01-08-2024)\n      ,\n      childTabsKey: [],\n      splitModeClass: this.state.splitChangeWidthPercentage && this.state.splitChangeWidthPercentage > 50 ? 'split-mode' : this.state.splitChangeWidthPercentage > 40 ? 'split-md' : '',\n      commonActions: /*#__PURE__*/React.createElement(ProductList, {\n        className: \"d-flex product-category float-right\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 365,\n          columnNumber: 45\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        className: \"btn btn-icon-rounded btn-circle solid-blue\",\n        role: \"button\",\n        \"data-tip\": this.props.intl.formatMessage({\n          id: \"IDS_EXPORTTEMPLATE\"\n        }),\n        onClick: () => this.handleExportClick(),\n        hidden: this.state.userRoleControlRights.indexOf(exportId) === -1,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 367,\n          columnNumber: 49\n        }\n      }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n        icon: faFileExcel,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 373,\n          columnNumber: 53\n        }\n      })), /*#__PURE__*/React.createElement(Button, {\n        className: \"btn btn-circle outline-grey ml-2\",\n        variant: \"link\",\n        \"data-tip\": this.props.intl.formatMessage({\n          id: \"IDS_IMPORTDATA\"\n        }),\n        hidden: this.state.userRoleControlRights.indexOf(importId) === -1,\n        onClick: () => this.handleImportClick(),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 376,\n          columnNumber: 49\n        }\n      }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n        icon: faFileImport,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 381,\n          columnNumber: 53\n        }\n      })), /*#__PURE__*/React.createElement(Button, {\n        className: \"btn btn-circle outline-grey ml-2\",\n        variant: \"link\",\n        \"data-tip\": this.props.intl.formatMessage({\n          id: \"IDS_DELETE\"\n        }),\n        hidden: this.state.userRoleControlRights.indexOf(deleteId) === -1,\n        onClick: () => this.ConfirmDelete(deleteId),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 384,\n          columnNumber: 49\n        }\n      }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n        icon: faTrashAlt,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 388,\n          columnNumber: 52\n        }\n      })), /*#__PURE__*/React.createElement(Button, {\n        className: \"btn btn-circle outline-grey ml-2 p-0\",\n        variant: \"link\",\n        onClick: () => this.reloadData(),\n        \"data-tip\": this.props.intl.formatMessage({\n          id: \"IDS_REFRESH\"\n        }),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 391,\n          columnNumber: 49\n        }\n      }, /*#__PURE__*/React.createElement(RefreshIcon, {\n        className: \"custom_icons\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 394,\n          columnNumber: 53\n        }\n      }))),\n      filterComponent: [{\n        \"IDS_BULKBARCODEGENRATION\": /*#__PURE__*/React.createElement(BulkBarcodeGenerationFilter, {\n          fromDate: fromDate,\n          toDate: toDate,\n          projectType: this.state.projectType,\n          onComboChange: this.onComboChange,\n          defaultProjectType: this.props.Login.masterData.defaultProjectType || {},\n          handleDateChange: this.handleDateChange,\n          userInfo: this.props.Login.userInfo,\n          masterData: this.props.Login.masterData,\n          selectedRecord: this.state.selectedRecord,\n          bulkbarcodeconfig: this.state.bulkbarcodeconfig,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 402,\n            columnNumber: 53\n          }\n        })\n      }],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 325,\n        columnNumber: 37\n      }\n    }), /*#__PURE__*/React.createElement(ContentPanel, {\n      className: \"panel-main-content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 420,\n        columnNumber: 37\n      }\n    }, this.props.Login.masterData && this.props.Login.masterData.selectedBulkBarcodeGeneration && this.props.Login.masterData.realBarcodeConfig && /*#__PURE__*/React.createElement(Card, {\n      className: \"border-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 424,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Card.Header, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 426,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(Card.Title, {\n      className: \"product-title-main\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 427,\n        columnNumber: 53\n      }\n    }, this.props.Login.masterData && this.props.Login.masterData.selectedBulkBarcodeGeneration && this.props.Login.masterData.selectedBulkBarcodeGeneration.sfilename), /*#__PURE__*/React.createElement(Card.Subtitle, {\n      className: \"readonly-text font-weight-normal\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 428,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 429,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 8,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 430,\n        columnNumber: 61\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      className: \"product-title-sub flex-grow-1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 431,\n        columnNumber: 65\n      }\n    }, this.props.Login.masterData && this.props.Login.masterData.selectedBulkBarcodeGeneration && this.props.Login.masterData.realBarcodeConfig.label)), /*#__PURE__*/React.createElement(Col, {\n      md: 4,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 437,\n        columnNumber: 61\n      }\n    }, /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"d-flex product-category\",\n      style: {\n        float: \"right\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 439,\n        columnNumber: 69\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"d-inline \",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 440,\n        columnNumber: 73\n      }\n    }, /*#__PURE__*/React.createElement(Nav.Link, {\n      className: \"btn btn-circle outline-grey mr-2 action-icons-wrap\",\n      href: \"\",\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_DELETE\"\n      }),\n      hidden: this.state.userRoleControlRights.indexOf(deleteId) === -1,\n      onClick: () => this.ConfirmDeleteBarcodeRecord(deleteId),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 441,\n        columnNumber: 77\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faTrashAlt,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 445,\n        columnNumber: 80\n      }\n    })), /*#__PURE__*/React.createElement(Button, {\n      className: \"btn btn-circle outline-grey ml-2\",\n      variant: \"link\",\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_BARCODEGENERATION\"\n      }),\n      hidden: this.state.userRoleControlRights.indexOf(printbarcodeId) === -1,\n      onClick: () => this.printBulkBarcodegeneration(printbarcodeId) // onClick={() => this.props.getBarcodeAndPrinterService({\n      //     masterData: this.props.Login.masterData,\n      //     ncontrolcode: printbarcodeId,\n      //     userInfo: this.props.Login.userInfo,\n      //     control: \"sampleBarcode\"\n      // })}\n      ,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 449,\n        columnNumber: 77\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faPrint,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 463,\n        columnNumber: 81\n      }\n    }))))))))), /*#__PURE__*/React.createElement(Card.Body, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 473,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      noGutters: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 476,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 478,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(ImportDataGridWithSelection, {\n      userInfo: this.props.Login.userInfo,\n      data: this.props.Login.masterData && this.props.Login.masterData.selectedBulkBarcodeGeneration && this.props.Login.masterData.bulkbarcodedatagen !== null || this.props.Login.masterData && this.props.Login.masterData.selectedBulkBarcodeGeneration && this.props.Login.masterData.bulkbarcodedatagen.length > 0 ? this.props.Login.masterData.bulkbarcodedatagen : [] || [],\n      selectAll: this.props.Login.selectAll,\n      title: this.props.intl.formatMessage({\n        id: \"IDS_SELECTTODELETE\"\n      }),\n      selectionChange: this.selectionChange,\n      headerSelectionChange: this.headerSelectionChange,\n      extractedColumnList: this.extractedColumnList,\n      selectedRecord: this.state.selectedRecord,\n      isInitialRender: this.props.Login.isInitialRender !== undefined && !this.props.Login.isInitialRender ? this.props.Login.isInitialRender : true || true,\n      isInitialRenderSelected: this.state.selectedRecord[\"isInitialRender\"] !== undefined ? this.state.selectedRecord[\"isInitialRender\"] : true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 479,\n        columnNumber: 50\n      }\n    })))))))))))), this.state.export ? /*#__PURE__*/React.createElement(LocalizationProvider, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 510,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(ExcelExport, {\n      data: [],\n      collapsible: true,\n      fileName: this.props.Login.masterData && this.props.Login.masterData.realProjectType.label + \"_\" + this.props.Login.masterData.realBarcodeConfig.label + \"_\" + new Date(),\n      ref: exporter => {\n        this._excelExportHeader = exporter;\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 511,\n        columnNumber: 61\n      }\n    }, this.props.Login.masterData.jsondataBarcodeFields && this.props.Login.masterData.jsondataBarcodeFields.map((item, index) => item.sfieldname !== 'Barcode Id' && /*#__PURE__*/React.createElement(ExcelExportColumn, {\n      field: item.sfieldname,\n      title: item.sfieldname,\n      width: 200,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 520,\n        columnNumber: 73\n      }\n    })))) : \"\", this.props.Login.openModal && /*#__PURE__*/React.createElement(SlideOutModal, {\n      show: this.props.Login.openModal,\n      closeModal: this.closeModal,\n      operation: this.props.Login.operation,\n      inputParam: this.props.Login.inputParam,\n      screenName: this.props.Login.screenName,\n      onSaveClick: this.props.Login.loadPrinter ? this.onSavePrinterClick : this.onSaveClick,\n      esign: this.props.Login.loadEsign,\n      validateEsign: this.validateEsign,\n      masterStatus: this.props.Login.masterStatus,\n      updateStore: this.props.updateStore,\n      selectedRecord: this.state.selectedRecord || {},\n      mandatoryFields: this.props.Login.loadPrinter ? printMandatoryFields : this.props.Login.screenName === this.props.intl.formatMessage({\n        id: \"IDS_IMPORT\"\n      }) && mandatoryFields,\n      addComponent: this.props.Login.loadEsign ? /*#__PURE__*/React.createElement(Esign, {\n        operation: this.props.Login.operation,\n        formatMessage: this.props.intl.formatMessage,\n        onInputOnChange: this.onInputOnChange,\n        inputParam: this.props.Login.inputParam,\n        selectedRecord: this.state.selectedRecord || {},\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 545,\n          columnNumber: 29\n        }\n      }) : this.props.Login.screenName === this.props.intl.formatMessage({\n        id: \"IDS_IMPORT\"\n      }) ? /*#__PURE__*/React.createElement(ImportBulkBarcodeData, {\n        loadImportFileData: this.props.Login.masterData.loadImportFileData,\n        onDropFile: this.onDropFile,\n        selectedRecord: this.state.selectedRecord || {},\n        deleteAttachment: this.deleteAttachment,\n        onInputOnChange: this.onInputOnChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 553,\n          columnNumber: 33\n        }\n      }) : this.props.Login.loadPrinter ? /*#__PURE__*/React.createElement(AddPrinter, {\n        printer: this.props.Login.printer,\n        barcode: this.props.Login.barcode,\n        selectedPrinterData: this.state.selectedRecord || {},\n        PrinterChange: this.PrinterChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 562,\n          columnNumber: 33\n        }\n      }) : \"\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 531,\n        columnNumber: 21\n      }\n    }));\n  }\n\n  valiateCheckAll(data) {\n    let selectAll = true;\n\n    if (data && data.length > 0) {\n      data.forEach(dataItem => {\n        if (dataItem.selected) {\n          if (dataItem.selected === false) {\n            selectAll = false;\n          }\n        } else {\n          selectAll = false;\n        }\n      });\n    } else {\n      selectAll = false;\n    }\n\n    return selectAll;\n  }\n\n  componentDidUpdate(previousProps, previousState) {\n    let {\n      projectType,\n      bulkbarcodeconfig,\n      controlMap,\n      userRoleControlRights,\n      skip,\n      take\n    } = this.state;\n    let bool = false;\n    /*if(this.props.Login.addedComponentList!==previousProps.Login.addedComponentList){\r\n        addedComponentList=this.props.Login.addedComponentList;\r\n        bool = true;\r\n    }*/\n\n    if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\n      this.setState({\n        selectedRecord: this.props.Login.selectedRecord\n      });\n    }\n\n    if (this.state.export) {\n      this._excelExportHeader.save();\n\n      this.setState({\n        export: false\n      });\n    }\n\n    if (this.props.Login.masterData.projectType !== previousProps.Login.masterData.projectType) {\n      const projectTypeMap = constructOptionList(this.props.Login.masterData.projectType || [], \"nprojecttypecode\", \"sprojecttypename\", undefined, undefined, undefined);\n      projectType = projectTypeMap.get(\"OptionList\");\n      bool = true;\n    }\n\n    if (this.props.Login.masterData.selectedProjectType !== previousProps.Login.masterData.selectedProjectType) {\n      const projectTypeMap = constructOptionList(this.props.Login.masterData.projectType || [], \"nprojecttypecode\", \"sprojecttypename\", undefined, undefined, undefined);\n      projectType = projectTypeMap.get(\"OptionList\");\n      bool = true;\n    }\n\n    if (this.props.Login.masterData.bulkBarcodeConfig !== previousProps.Login.masterData.bulkBarcodeConfig) {\n      const bulkbarcodeconfigMap = constructOptionList(this.props.Login.masterData.bulkBarcodeConfig || [], \"nbulkbarcodeconfigcode\", \"sconfigname\", undefined, undefined, undefined);\n      bulkbarcodeconfig = bulkbarcodeconfigMap.get(\"OptionList\");\n      bool = true;\n    }\n\n    if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\n      userRoleControlRights = [];\n\n      if (this.props.Login.userRoleControlRights) {\n        this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item => userRoleControlRights.push(item.ncontrolcode));\n      }\n\n      controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode);\n      bool = true;\n    }\n\n    if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\n      this.setState({\n        selectedRecord: this.props.Login.selectedRecord\n      });\n    }\n\n    if (this.props.Login.selectedPrinterData !== previousProps.Login.selectedPrinterData) {\n      this.setState({\n        selectedRecord: { ...this.props.Login.selectedPrinterData,\n          ...this.state.selectedRecord\n        }\n      });\n    }\n\n    if (bool) {\n      this.setState({\n        projectType,\n        bulkbarcodeconfig,\n        controlMap,\n        userRoleControlRights,\n        skip: 0,\n        take: this.props.Login.settings ? parseInt(this.props.Login.settings[3]) : 5\n      });\n    }\n  }\n\n}\n\nexport default connect(mapStateToProps, {\n  callService,\n  crudMaster,\n  updateStore,\n  validateEsignCredential,\n  getBulkBarcodeGenData,\n  getBulkBarcodeGeneration,\n  getBarcodeAndPrinterService,\n  filterTransactionList,\n  getProjectBarcodceConfig,\n  importBulkBarcodeGeneration,\n  getTabBulkBarcodeGeneration,\n  deleteBarcodeData,\n  deleteBulkBarcodeGeneration\n})(injectIntl(BulkBarcodeGeneration));","map":{"version":3,"sources":["E:/WorkingFolder/React_Postgres/ALPD/branches/SOURCE-513-PROD/QuaLISWeb/src/pages/storagemanagement/BulkBarcodeGeneration.jsx"],"names":["React","connect","injectIntl","Row","Col","Button","Card","Nav","toast","process","SlideOutModal","Esign","ProductList","callService","crudMaster","updateStore","validateEsignCredential","getBulkBarcodeGenData","getBulkBarcodeGeneration","getBarcodeAndPrinterService","filterTransactionList","getProjectBarcodceConfig","importBulkBarcodeGeneration","getTabBulkBarcodeGeneration","deleteBarcodeData","deleteBulkBarcodeGeneration","DEFAULT_RETURN","constructOptionList","getControlMap","showEsign","onDropAttachFileList","Lims_JSON_stringify","convertDateValuetoString","rearrangeDateFormat","deleteAttachmentDropZone","create_UUID","replaceBackSlash","sortData","FontAwesomeIcon","faFileImport","faTrashAlt","ContentPanel","ConfirmMessage","attachmentType","BulkBarcodeGenerationFilter","BreadcrumbComponent","ExcelExport","ExcelExportColumn","LocalizationProvider","ImportBulkBarcodeData","TransactionListMasterJsonView","faFileExcel","faPrint","ListWrapper","SplitterLayout","AddPrinter","ImportDataGridWithSelection","mapStateToProps","state","Login","BulkBarcodeGeneration","Component","constructor","props","sidebarExpandCollapse","setState","sidebarview","dataStateChange","event","dataResult","data","dataState","paneSizeChange","d","splitChangeWidthPercentage","openFilter","showFilter","updateInfo","typeName","closeFilter","closeModal","loadEsign","openModal","selectedRecord","loadPrinter","operation","selectedId","handleDateChange","dateName","dateValue","masterData","printBulkBarcodegeneration","printbarcodeId","bulkbarcodedatagen","length","addedComponentList","ncontrolcode","userInfo","control","warn","intl","formatMessage","id","ConfirmDelete","deleteId","confirmMessage","confirm","deleteRecord","ConfirmDeleteBarcodeRecord","deleteBarcodeRecord","handlePageChange","e","skip","take","PrinterChange","comboData","fieldName","onFilterSubmit","defaultProjectType","defaultBarcodeConfig","value","searchRef","current","inputData","obj","FromDate","ToDate","fromDate","toDate","userinfo","nprojecttypecode","nbulkbarcodeconfigcode","isfilterSubmit","realProjectType","realBarcodeConfig","inputParam","selectionChange","addComponentDataList","map","item","dataItem","selected","newItem","JSON","parse","stringify","push","filter","item1","isInitialRender","selectAll","valiateCheckAll","deleteSelectAll","headerSelectionChange","checked","syntheticEvent","target","findIndex","x","olditem","addedComponentData","deletedListdData","deletedList","npreregno","onDropFile","attachedFiles","maxSize","actionType","expandChange","isExpanded","expanded","undefined","aggregates","onComboChange","parseInt","deleteAttachment","file","handleExportClick","export","handleImportClick","loadImportFileData","screenName","childDataChange","onInputOnChange","name","selectedBulkBarcodeGeneration","postParam","inputListName","selectedObject","primaryKeyField","primaryKeyValue","nbulkbarcodegenerationcode","fetchUrl","fecthInputObject","classUrl","methodUrl","displayName","userRoleControlRights","nformcode","screenData","updateBarcodeData","some","reloadData","onSaveClick","saveType","formRef","acceptedFiles","sfilename","importBulkBarcodeGen","formData","FormData","Array","isArray","forEach","index","tempData","splittedFileName","split","fileExtension","ssystemfilename","filesystemfileext","uniquefilename","FTP","sdescription","trim","append","bulkbarcodeFields","jsondataBarcodeFields","sfieldname","join","sformname","smodulename","slanguagename","ncontrolCode","validateEsign","sreason","nreasoncode","spredefinedreason","label","password","onSavePrinterClick","insertlist","sprintername","sbarcodename","BarcodeID","action","searchedData","createRef","extractedColumnList","fieldList","settings","searchFieldList","addScreen","masterStatus","error","controlMap","Map","getDerivedStateFromProps","gridfillingColumn","barcodeFields","temparray1","barcodeItem","idsName","dataField","width","newArray","render","realFromDate","realToDate","mandatoryFields","printMandatoryFields","Date","breadCrumbData","breadCrumbFrom","breadCrumbto","exportId","has","get","importId","obj1","fromDate1","toDate1","filterParam","filteredListName","clearFilter","updatedListname","changeList","parentHeight","enablePropertyPopup","bulkBarcodeGeneration","indexOf","projectType","bulkbarcodeconfig","float","exporter","_excelExportHeader","printer","barcode","componentDidUpdate","previousProps","previousState","bool","save","projectTypeMap","selectedProjectType","bulkBarcodeConfig","bulkbarcodeconfigMap","Object","values","selectedPrinterData"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { injectIntl } from 'react-intl';\r\nimport { Row, Col, Button, Card, Nav } from 'react-bootstrap';\r\nimport { toast } from 'react-toastify';\r\nimport { process } from '@progress/kendo-data-query';\r\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\r\nimport Esign from '../audittrail/Esign';\r\nimport { ProductList } from '../product/product.styled';\r\nimport {\r\n    callService, crudMaster, updateStore, validateEsignCredential,\r\n    getBulkBarcodeGenData, getBulkBarcodeGeneration,\r\n    getBarcodeAndPrinterService,\r\n    filterTransactionList, getProjectBarcodceConfig, importBulkBarcodeGeneration, getTabBulkBarcodeGeneration,deleteBarcodeData,deleteBulkBarcodeGeneration\r\n} from '../../actions';\r\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\r\nimport { constructOptionList, getControlMap, showEsign, onDropAttachFileList, Lims_JSON_stringify, convertDateValuetoString, rearrangeDateFormat, deleteAttachmentDropZone, create_UUID, replaceBackSlash, sortData } from '../../components/CommonScript';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faFileImport, faTrashAlt } from '@fortawesome/free-solid-svg-icons';\r\nimport { ContentPanel } from '../product/product.styled';\r\nimport { ReactComponent as RefreshIcon } from '../../assets/image/refresh.svg';\r\nimport ConfirmMessage from '../../components/confirm-alert/confirm-message.component';\r\nimport { attachmentType } from '../../components/Enumeration';\r\nimport BulkBarcodeGenerationFilter from './BulkBarcodeGenerationFilter';\r\nimport BreadcrumbComponent from '../../components/Breadcrumb.Component';\r\nimport { ExcelExport, ExcelExportColumn } from '@progress/kendo-react-excel-export';\r\nimport { LocalizationProvider } from '@progress/kendo-react-intl';\r\nimport ImportBulkBarcodeData from './ImportBulkBarcodeData';\r\nimport TransactionListMasterJsonView from '../../components/TransactionListMasterJsonView';\r\nimport { faFileExcel ,faPrint} from '@fortawesome/free-solid-svg-icons';\r\nimport { ListWrapper } from '../userroletemplate/userroletemplate.styles';\r\nimport SplitterLayout from 'react-splitter-layout';\r\nimport AddPrinter from '../registration/AddPrinter';\r\nimport ImportDataGridWithSelection from '../../pages/storagemanagement/ImportDataGridWithSelection';\r\n\r\n\r\nconst mapStateToProps = state => {\r\n    return ({ Login: state.Login })\r\n}\r\n\r\nclass BulkBarcodeGeneration extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.formRef = React.createRef();\r\n        this.extractedColumnList = [];\r\n        this.fieldList = [];\r\n        const dataState = {\r\n            skip: 0,\r\n            take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5,\r\n        };\r\n        this.searchFieldList = [\"sfilename\"]\r\n\r\n        this.state = {\r\n            addScreen: false, data: [], masterStatus: \"\", error: \"\", operation: \"create\",\r\n            dataResult: [],\r\n            dataState: dataState,\r\n            userRoleControlRights: [],\r\n            controlMap: new Map(),\r\n            selectedRecord: {},\r\n            sidebarview: false,\r\n            splitChangeWidthPercentage: 30\r\n        };\r\n        this.searchRef = React.createRef();\r\n\r\n        this.confirmMessage = new ConfirmMessage();\r\n\r\n\r\n\r\n    }\r\n    sidebarExpandCollapse = () => {\r\n        this.setState({\r\n            sidebarview: true\r\n        })\r\n    }\r\n\r\n    dataStateChange = (event) => {\r\n        this.setState({\r\n            dataResult: process(this.state.data, event.dataState),\r\n            dataState: event.dataState\r\n        });\r\n    }\r\n    paneSizeChange = (d) => {\r\n        this.setState({\r\n            splitChangeWidthPercentage: d\r\n        })\r\n    }\r\n    openFilter = () => {\r\n        let showFilter = !this.props.Login.showFilter\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { showFilter }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    closeFilter = () => {\r\n\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { showFilter: false }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n\r\n    closeModal = () => {\r\n        let loadEsign = this.props.Login.loadEsign;\r\n        let openModal = this.props.Login.openModal;\r\n        let selectedRecord = this.props.Login.selectedRecord;\r\n        let loadPrinter=this.props.Login.loadPrinter ;\r\n        if (this.props.Login.loadEsign) {\r\n            if (this.props.Login.operation === \"delete\") {\r\n                loadEsign = false;\r\n                openModal = false;\r\n                selectedRecord = {};\r\n                loadPrinter=false;\r\n            }\r\n            else {\r\n                loadEsign = false;\r\n                // selectedRecord[\"agree\"] = 4;\r\n                selectedRecord['esignpassword'] = \"\"\r\n                selectedRecord['esigncomments'] = \"\"\r\n                selectedRecord['esignreason'] = \"\"\r\n            }\r\n        }\r\n        else {\r\n            openModal = false;\r\n            selectedRecord = {};\r\n            loadPrinter=false;\r\n        }\r\n\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { openModal, loadEsign, selectedRecord, selectedId: null,loadPrinter }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n\r\n    }\r\n\r\n    handleDateChange = (dateName, dateValue) => {\r\n        let masterData = this.props.Login.masterData;\r\n        masterData[dateName] = dateValue;\r\n        this.setState({ masterData });\r\n    };\r\n\r\n    static getDerivedStateFromProps(props, state) {\r\n\r\n        if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\r\n            toast.warn(props.Login.masterStatus);\r\n            props.Login.masterStatus = \"\";\r\n        }\r\n\r\n        if (props.Login.error !== state.error) {\r\n            toast.error(props.Login.error)\r\n            props.Login.error = \"\";\r\n        }\r\n        if (props.Login.selectedRecord === undefined) {\r\n            return { selectedRecord: {} }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    printBulkBarcodegeneration = (printbarcodeId) => {\r\n        if (this.props.Login.masterData && this.props.Login.masterData.bulkbarcodedatagen && this.props.Login.masterData.bulkbarcodedatagen.length > 0) {\r\n           if(this.props.Login.addedComponentList && this.props.Login.addedComponentList.length>0){\r\n             this.props.getBarcodeAndPrinterService({\r\n                masterData: this.props.Login.masterData,\r\n                ncontrolcode: printbarcodeId,\r\n                userInfo: this.props.Login.userInfo,\r\n                control: \"sampleBarcode\"\r\n            })\r\n        }else{\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTANYONERECORD\" }));\r\n        }\r\n         }else{\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_NORECORDSAVAILABLE\" }));\r\n         }\r\n    }\r\n\r\n\r\n    // printBulkBarcodegeneration = () => {\r\n    //     if (this.props.Login.masterData && this.props.Login.masterData.bulkbarcodedatagen && this.props.Login.masterData.bulkbarcodedatagen.length > 0) {\r\n\r\n\r\n    //         let obj = convertDateValuetoString(this.props.Login.masterData.FromDate, this.props.Login.masterData.ToDate, this.props.Login.userInfo);\r\n    //         let fromDate = obj.fromDate;\r\n    //         let toDate = obj.toDate;\r\n    //         let inputData = {\r\n    //             nbulkbarcodeconfigcode: this.props.Login.masterData && this.props.Login.masterData.realBarcodeConfig && this.props.Login.masterData.realBarcodeConfig.value,\r\n    //             nprojecttypecode: this.props.Login.masterData && this.props.Login.masterData.realProjectType && this.props.Login.masterData.realProjectType.value,\r\n    //             nbulkbarcodegenerationcode: this.props.Login.masterData && this.props.Login.masterData.selectedBulkBarcodeGeneration && this.props.Login.masterData.selectedBulkBarcodeGeneration.nbulkbarcodegenerationcode,\r\n    //             userinfo: this.props.Login.userInfo,\r\n    //             fromDate: fromDate,\r\n    //             toDate: toDate,\r\n    //             jsondata: {},\r\n    //             nbarcodeLength: 14\r\n\r\n    //         }\r\n    //         let inputParam = {};\r\n    //         inputParam = {\r\n    //             inputData: inputData,\r\n    //             masterData: this.props.Login.masterData\r\n    //         };\r\n    //         // this.props.getStorageCategoryForSendToStore(inputParam.userInfo, inputParam.masterData, inputParam.controlcode, this.state.selectedRecord, inputData);\r\n    //         this.props.getBulkBarcodeGenData(inputParam);\r\n    //     }\r\n    //     else {\r\n    //         toast.warn(\r\n    //             this.props.intl.formatMessage({\r\n    //                 id: \"IDS_NORECORDSAVAILABLE\",\r\n    //             })\r\n    //         );\r\n\r\n    //     }\r\n    // }\r\n\r\n    gridfillingColumn(barcodeFields) {\r\n\r\n\r\n        let temparray1 = [];\r\n        sortData(barcodeFields, 'ascending', 'nsorter');\r\n        barcodeFields && barcodeFields.forEach(barcodeItem => {\r\n\r\n\r\n            temparray1.push({\r\n                idsName: barcodeItem.sfieldname,\r\n                dataField: barcodeItem.sfieldname,\r\n                width: '250px'\r\n            });\r\n\r\n        });\r\n\r\n        const newArray = [...temparray1]\r\n        return newArray;\r\n    }\r\n\r\n\r\n    render() {\r\n     \r\n        const extractedColumnList = this.gridfillingColumn(this.props.Login.masterData.jsondataBarcodeFields && this.props.Login.masterData.jsondataBarcodeFields);\r\n        this.extractedColumnList = extractedColumnList;\r\n\r\n        let obj = convertDateValuetoString(this.props.Login.masterData.realFromDate, this.props.Login.masterData.realToDate, this.props.Login.userInfo);\r\n        const mandatoryFields = [\r\n            { \"idsName\": \"IDS_FILENAME\", \"dataField\": \"simportfilename\", \"mandatory\": true, \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"textbox\" },\r\n        ]\r\n        const printMandatoryFields = [\r\n            { \"idsName\": \"IDS_BARCODENAME\", \"dataField\": \"sbarcodename\", \"width\": \"150px\", \"mandatory\": true, \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n            { \"idsName\": \"IDS_PRINTERNAME\", \"dataField\": \"sprintername\", \"width\": \"150px\", \"mandatory\": true, \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n        ]\r\n        let fromDate = this.props.Login.masterData.FromDate ? rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.FromDate) : new Date();\r\n        let toDate = this.props.Login.masterData.ToDate ? rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.ToDate) : new Date();\r\n\r\n        const breadCrumbData = [];\r\n        if (this.props.Login.masterData && this.props.Login.masterData.realProjectType) {\r\n\r\n            breadCrumbData.push(\r\n                {\r\n                    \"label\": \"IDS_FROM\",\r\n                    \"value\": obj.breadCrumbFrom\r\n                },\r\n                {\r\n                    \"label\": \"IDS_TO\",\r\n                    \"value\": obj.breadCrumbto\r\n                },\r\n                {\r\n                    \"label\": \"IDS_PROJECTTYPE\",\r\n                    \"value\": this.props.Login.masterData.realProjectType && this.props.Login.masterData.realProjectType.label || \"NA\"\r\n                },\r\n                {\r\n                    \"label\": \"IDS_BULKBARCODECONDIG\",\r\n                    \"value\": this.props.Login.masterData.realBarcodeConfig && this.props.Login.masterData.realBarcodeConfig.label || \"NA\"\r\n                }\r\n            );\r\n        }\r\n\r\n\r\n\r\n\r\n\r\n\r\n        const exportId = this.state.controlMap.has(\"ExportBulkBarcodeGeneration\") && this.state.controlMap.get(\"ExportBulkBarcodeGeneration\").ncontrolcode;\r\n        const importId = this.state.controlMap.has(\"ImportBulkBarcodeGeneration\") && this.state.controlMap.get(\"ImportBulkBarcodeGeneration\").ncontrolcode;\r\n\r\n        const printbarcodeId = this.state.controlMap.has(\"PrintBulkBarcodeGeneration\") && this.state.controlMap.get(\"PrintBulkBarcodeGeneration\").ncontrolcode;\r\n        const deleteId = this.state.controlMap.has(\"DeleteBulkBarcodeGeneration\") && this.state.controlMap.get(\"DeleteBulkBarcodeGeneration\").ncontrolcode;\r\n\r\n        let obj1 = convertDateValuetoString(this.props.Login.masterData.FromDate, this.props.Login.masterData.ToDate, this.props.Login.userInfo);\r\n        let fromDate1 = obj1.fromDate;\r\n        let toDate1 = obj1.toDate;\r\n        const filterParam = {\r\n\r\n\r\n\r\n            inputListName: \"BulkBarcodeGeneration\", selectedObject: \"selectedBulkBarcodeGeneration\", primaryKeyField: \"nbulkbarcodegenerationcode\",\r\n            fetchUrl: \"bulkbarcodegeneration/getBulkBarcodeGeneration\", masterData: this.props.Login.masterData || {},\r\n\r\n            fecthInputObject: {\r\n                userinfo: this.props.Login.userInfo,\r\n                nprojecttypecode: this.props.Login.masterData && this.props.Login.masterData.realProjectType &&\r\n                    this.props.Login.masterData.realProjectType.value,\r\n                nbulkbarcodeconfigcode: this.props.Login.masterData && this.props.Login.masterData.selectedBulkBarcodeGeneration &&\r\n                    this.props.Login.masterData.selectedBulkBarcodeGeneration.nbulkbarcodeconfigcode,\r\n                fromDate: fromDate1,\r\n                toDate: toDate1\r\n\r\n            },\r\n            filteredListName: \"searchedBulkBarcodeConfig\",\r\n            clearFilter: \"no\",\r\n            updatedListname: \"selectedBulkBarcodeConfig\",\r\n            searchRef: this.searchRef,\r\n            searchFieldList: this.searchFieldList,\r\n            changeList: []\r\n        };\r\n\r\n\r\n        return (\r\n            <>\r\n                <ListWrapper className=\"client-listing-wrap mtop-4 screen-height-window\">\r\n                    <BreadcrumbComponent breadCrumbItem={breadCrumbData} />\r\n                    <Row noGutters={\"true\"}>\r\n                        <Col md={12} className='parent-port-height sticky_head_parent' ref={(parentHeight) => { this.parentHeight = parentHeight }}>\r\n                            <ListWrapper className={`vertical-tab-top ${this.state.enablePropertyPopup ? 'active-popup' : \"\"}`}>\r\n                                <SplitterLayout borderColor=\"#999\" percentage={true} primaryIndex={1} secondaryInitialSize={this.state.splitChangeWidthPercentage} onSecondaryPaneSizeChange={this.paneSizeChange} primaryMinSize={40} secondaryMinSize={20}>\r\n                                    <TransactionListMasterJsonView\r\n                                        splitChangeWidthPercentage={this.state.splitChangeWidthPercentage}\r\n                                        hidePaging={false}\r\n                                        filterColumnData={this.props.filterTransactionList}\r\n                                        needMultiSelect={false}\r\n                                        masterList={this.props.Login.masterData.searchedData ||\r\n                                            this.props.Login.masterData.BulkBarcodeGeneration || []}\r\n                                        selectedMaster={[this.props.Login.masterData && this.props.Login.masterData.selectedBulkBarcodeGeneration]}\r\n                                        primaryKeyField=\"nbulkbarcodegenerationcode\"\r\n                                        getMasterDetail={(bulkBarcodeGeneration) =>\r\n                                            this.props.getTabBulkBarcodeGeneration(\r\n                                                bulkBarcodeGeneration,\r\n                                                this.props.Login.userInfo,\r\n                                                this.props.Login.masterData,\r\n                                                this.state.selectedRecord\r\n                                            )}\r\n                                        inputParam={{\r\n                                            userInfo: this.props.Login.userInfo,\r\n                                            masterData: this.props.Login.masterData\r\n                                        }}\r\n                                        mainField={\"sfilename\"}\r\n                                        selectedListName=\"selectedBulkBarcodeGeneration\"\r\n                                        objectName=\"LocationMaster\"\r\n                                        searchListName=\"searchedData\"\r\n                                        searchRef={this.searchRef}\r\n                                        filterParam={filterParam}\r\n                                        showFilter={this.props.Login.showFilter}\r\n                                        openFilter={this.openFilter}\r\n                                        closeFilter={this.closeFilter}\r\n                                        onFilterSubmit={this.onFilterSubmit}\r\n                                        needFilter={true}\r\n                                        handlePageChange={this.handlePageChange}\r\n                                        skip={this.state.skip}\r\n                                        take={this.state.take}\r\n                                        //ALPD-4614--Vignesh R(01-08-2024)\r\n                                        childTabsKey={[]}\r\n                                        splitModeClass={this.state.splitChangeWidthPercentage && this.state.splitChangeWidthPercentage > 50 ? 'split-mode' : this.state.splitChangeWidthPercentage > 40 ? 'split-md' : ''}\r\n\r\n\r\n                                        commonActions={\r\n                                            <ProductList className=\"d-flex product-category float-right\">\r\n\r\n                                                <Button className=\"btn btn-icon-rounded btn-circle solid-blue\" role=\"button\"\r\n                                                    data-tip={this.props.intl.formatMessage({ id: \"IDS_EXPORTTEMPLATE\" })}\r\n                                                    onClick={() => this.handleExportClick()}\r\n                                                    hidden={this.state.userRoleControlRights.indexOf(exportId) === -1}\r\n\r\n                                                >\r\n                                                    <FontAwesomeIcon icon={faFileExcel} />\r\n                                                </Button>\r\n\r\n                                                <Button className=\"btn btn-circle outline-grey ml-2\" variant=\"link\"\r\n                                                    data-tip={this.props.intl.formatMessage({ id: \"IDS_IMPORTDATA\" })}\r\n                                                    hidden={this.state.userRoleControlRights.indexOf(importId) === -1}\r\n\r\n                                                    onClick={() => this.handleImportClick()}>\r\n                                                    <FontAwesomeIcon icon={faFileImport} />\r\n                                                </Button>\r\n\r\n                                                <Button className=\"btn btn-circle outline-grey ml-2\" variant=\"link\"\r\n                                                   data-tip={this.props.intl.formatMessage({ id: \"IDS_DELETE\" })}\r\n                                                   hidden={this.state.userRoleControlRights.indexOf(deleteId) === -1}\r\n                                                   onClick={() => this.ConfirmDelete(deleteId)}>\r\n                                                   <FontAwesomeIcon icon={faTrashAlt} />\r\n                                                </Button>\r\n\r\n                                                <Button className=\"btn btn-circle outline-grey ml-2 p-0\" variant=\"link\"\r\n                                                    onClick={() => this.reloadData()}\r\n                                                    data-tip={this.props.intl.formatMessage({ id: \"IDS_REFRESH\" })}>\r\n                                                    <RefreshIcon className='custom_icons' />\r\n                                                </Button>\r\n                                            </ProductList>\r\n                                        }\r\n                                        filterComponent={[\r\n                                            {\r\n\r\n                                                \"IDS_BULKBARCODEGENRATION\":\r\n                                                    <BulkBarcodeGenerationFilter\r\n                                                        fromDate={fromDate}\r\n                                                        toDate={toDate}\r\n                                                        projectType={this.state.projectType}\r\n                                                        onComboChange={this.onComboChange}\r\n                                                        defaultProjectType={this.props.Login.masterData.defaultProjectType || {}}\r\n                                                        handleDateChange={this.handleDateChange}\r\n                                                        userInfo={this.props.Login.userInfo}\r\n                                                        masterData={this.props.Login.masterData}\r\n                                                        selectedRecord={this.state.selectedRecord}\r\n                                                        bulkbarcodeconfig={this.state.bulkbarcodeconfig}\r\n\r\n                                                    />\r\n                                            }\r\n                                        ]}\r\n\r\n                                    />\r\n\r\n                                    <ContentPanel className=\"panel-main-content\">\r\n                                        \r\n                                    {this.props.Login.masterData && this.props.Login.masterData.selectedBulkBarcodeGeneration && this.props.Login.masterData.realBarcodeConfig&&\r\n\r\n                                        <Card className=\"border-0\">\r\n                                            <>\r\n                                                <Card.Header>\r\n                                                    <Card.Title className=\"product-title-main\">{this.props.Login.masterData && this.props.Login.masterData.selectedBulkBarcodeGeneration && this.props.Login.masterData.selectedBulkBarcodeGeneration.sfilename}</Card.Title>\r\n                                                    <Card.Subtitle className=\"readonly-text font-weight-normal\">\r\n                                                        <Row>\r\n                                                            <Col md={8} >\r\n                                                                <h2 className=\"product-title-sub flex-grow-1\">\r\n\r\n                                                                    {this.props.Login.masterData && this.props.Login.masterData.selectedBulkBarcodeGeneration && this.props.Login.masterData.realBarcodeConfig.label}\r\n\r\n                                                                </h2>\r\n                                                            </Col>\r\n                                                            <Col md={4}>\r\n                                                                <>\r\n                                                                    <div className=\"d-flex product-category\" style={{ float: \"right\" }}>\r\n                                                                        <div className=\"d-inline \">\r\n                                                                            <Nav.Link className=\"btn btn-circle outline-grey mr-2 action-icons-wrap\" href=\"\"\r\n                                                                               data-tip={this.props.intl.formatMessage({ id: \"IDS_DELETE\" })}\r\n                                                                               hidden={this.state.userRoleControlRights.indexOf(deleteId) === -1}\r\n                                                                               onClick={() => this.ConfirmDeleteBarcodeRecord(deleteId)}>\r\n                                                                               <FontAwesomeIcon icon={faTrashAlt} />\r\n\r\n                                                                            </Nav.Link>\r\n\r\n                                                                            < Button className=\"btn btn-circle outline-grey ml-2\" variant=\"link\"\r\n                                                                                data-tip={this.props.intl.formatMessage({ id: \"IDS_BARCODEGENERATION\" })}\r\n\r\n                                                                                hidden={this.state.userRoleControlRights.indexOf(printbarcodeId) === -1}\r\n                                                                                onClick={() => this.printBulkBarcodegeneration(printbarcodeId)}\r\n                                                                                // onClick={() => this.props.getBarcodeAndPrinterService({\r\n                                                                                //     masterData: this.props.Login.masterData,\r\n                                                                                //     ncontrolcode: printbarcodeId,\r\n                                                                                //     userInfo: this.props.Login.userInfo,\r\n                                                                                //     control: \"sampleBarcode\"\r\n                                                                                // })}\r\n                                                                            >\r\n\r\n\r\n                                                                                <FontAwesomeIcon icon={faPrint} />\r\n                                                                            </Button>\r\n\r\n                                                                        </div>\r\n                                                                    </div>\r\n                                                                </>\r\n                                                            </Col>\r\n                                                        </Row>\r\n                                                    </Card.Subtitle>\r\n                                                </Card.Header>\r\n                                                <Card.Body>\r\n\r\n\r\n                                                    <Row noGutters={true}>\r\n\r\n                                                        <Col md={12}>\r\n                                                 <ImportDataGridWithSelection\r\n                                                userInfo={this.props.Login.userInfo}\r\n                                                data={(this.props.Login.masterData && this.props.Login.masterData.selectedBulkBarcodeGeneration && this.props.Login.masterData.bulkbarcodedatagen !== null) || (this.props.Login.masterData && this.props.Login.masterData.selectedBulkBarcodeGeneration && this.props.Login.masterData.bulkbarcodedatagen.length > 0) ? this.props.Login.masterData.bulkbarcodedatagen : [] || []}\r\n                                                selectAll={ this.props.Login.selectAll}\r\n                                                title={this.props.intl.formatMessage({ id: \"IDS_SELECTTODELETE\" })}\r\n                                                selectionChange={this.selectionChange}\r\n                                                headerSelectionChange={this.headerSelectionChange}\r\n                                                extractedColumnList={this.extractedColumnList}\r\n                                                selectedRecord={this.state.selectedRecord}\r\n                                                isInitialRender={this.props.Login.isInitialRender!==undefined && !this.props.Login.isInitialRender?this.props.Login.isInitialRender: true || true}\r\n                                                isInitialRenderSelected={this.state.selectedRecord[\"isInitialRender\"]!==undefined ? this.state.selectedRecord[\"isInitialRender\"]: true}\r\n                                            \r\n                                            />\r\n                                                        </Col>\r\n                                                    </Row>\r\n\r\n                                                    \r\n                                                </Card.Body>\r\n                                            </>\r\n                                        </Card>\r\n                                        }\r\n                                    </ContentPanel>\r\n    \r\n                                </SplitterLayout>\r\n\r\n                            </ListWrapper>\r\n                        </Col>\r\n                    </Row>\r\n                    \r\n                </ListWrapper>\r\n                {this.state.export ?\r\n                                                        <LocalizationProvider>\r\n                                                            <ExcelExport\r\n                                                                data={[]}\r\n                                                                collapsible={true}\r\n                                                                fileName={this.props.Login.masterData && this.props.Login.masterData.realProjectType.label + \"_\" + this.props.Login.masterData.realBarcodeConfig.label + \"_\" + new Date()}\r\n                                                                ref={(exporter) => {\r\n                                                                    this._excelExportHeader = exporter;\r\n                                                                }}>\r\n                                                                {this.props.Login.masterData.jsondataBarcodeFields && this.props.Login.masterData.jsondataBarcodeFields.map((item, index) =>\r\n                                                                    item.sfieldname !== 'Barcode Id' && (\r\n                                                                        <ExcelExportColumn\r\n                                                                            field={item.sfieldname} title={(item.sfieldname)} width={200} />\r\n\r\n\r\n                                                                    ))\r\n\r\n                                                                }\r\n\r\n                                                            </ExcelExport>\r\n                                                        </LocalizationProvider > : \"\"}\r\n                {this.props.Login.openModal &&\r\n                    <SlideOutModal show={this.props.Login.openModal}\r\n                        closeModal={this.closeModal}\r\n                        operation={this.props.Login.operation}\r\n                        inputParam={this.props.Login.inputParam}\r\n                        screenName={this.props.Login.screenName}\r\n                        onSaveClick={this.props.Login.loadPrinter ?this.onSavePrinterClick:this.onSaveClick}\r\n                        esign={this.props.Login.loadEsign}\r\n                        validateEsign={this.validateEsign}\r\n                        masterStatus={this.props.Login.masterStatus}\r\n                        updateStore={this.props.updateStore}\r\n                        selectedRecord={ this.state.selectedRecord || {}}\r\n                        mandatoryFields={this.props.Login.loadPrinter ?printMandatoryFields:this.props.Login.screenName === this.props.intl.formatMessage({ id: \"IDS_IMPORT\" }) && mandatoryFields}\r\n\r\n                        addComponent={this.props.Login.loadEsign ?\r\n                            <Esign operation={this.props.Login.operation}\r\n                                formatMessage={this.props.intl.formatMessage}\r\n                                onInputOnChange={this.onInputOnChange}\r\n                                inputParam={this.props.Login.inputParam}\r\n                                selectedRecord={this.state.selectedRecord || {}}\r\n                            />\r\n                            : this.props.Login.screenName === this.props.intl.formatMessage({ id: \"IDS_IMPORT\" }) ?\r\n\r\n                                <ImportBulkBarcodeData\r\n                                    loadImportFileData={this.props.Login.masterData.loadImportFileData}\r\n                                    onDropFile={this.onDropFile}\r\n                                    selectedRecord={this.state.selectedRecord || {}}\r\n                                    deleteAttachment={this.deleteAttachment}\r\n                                    onInputOnChange={this.onInputOnChange}\r\n\r\n                                />\r\n                                : this.props.Login.loadPrinter  ?\r\n                                <AddPrinter\r\n                                printer={this.props.Login.printer}\r\n                                barcode={this.props.Login.barcode}\r\n                                selectedPrinterData={this.state.selectedRecord||{}}\r\n                                PrinterChange={this.PrinterChange}\r\n                            />\r\n                                : \"\"\r\n                        }\r\n                    />\r\n                }\r\n            </>\r\n        );\r\n\r\n    }\r\n\r\n    ConfirmDelete = (deleteId) => {\r\n        this.confirmMessage.confirm(\"deleteMessage\", this.props.intl.formatMessage({ id: \"IDS_DELETE\" }), this.props.intl.formatMessage({ id: \"IDS_DEFAULTCONFIRMMSG\" }),\r\n            this.props.intl.formatMessage({ id: \"IDS_OK\" }), this.props.intl.formatMessage({ id: \"IDS_CANCEL\" }),\r\n            () => this.deleteRecord(deleteId));\r\n    }\r\n    ConfirmDeleteBarcodeRecord = (deleteId) => {\r\n        this.confirmMessage.confirm(\"deleteMessage\", this.props.intl.formatMessage({ id: \"IDS_DELETE\" }), this.props.intl.formatMessage({ id: \"IDS_DEFAULTCONFIRMMSG\" }),\r\n            this.props.intl.formatMessage({ id: \"IDS_OK\" }), this.props.intl.formatMessage({ id: \"IDS_CANCEL\" }),\r\n            () => this.deleteBarcodeRecord(\"delete\", deleteId));\r\n    }\r\n    handlePageChange = e => {\r\n        this.setState({\r\n            skip: e.skip,\r\n            take: e.take\r\n        });\r\n    };\r\n    PrinterChange = (comboData, fieldName) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        selectedRecord[fieldName] = comboData;\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    onFilterSubmit = () => {\r\n        if (this.props.Login.masterData.defaultProjectType && this.props.Login.masterData.defaultBarcodeConfig && this.props.Login.masterData.defaultBarcodeConfig.value) {\r\n            this.searchRef.current.value = \"\";\r\n\r\n            let inputData = [];\r\n\r\n            let obj = convertDateValuetoString(this.props.Login.masterData.FromDate, this.props.Login.masterData.ToDate, this.props.Login.userInfo);\r\n            let fromDate = obj.fromDate;\r\n            let toDate = obj.toDate;\r\n            inputData = {\r\n                userinfo: this.props.Login.userInfo,\r\n                nprojecttypecode: this.props.Login.masterData && this.props.Login.masterData.defaultProjectType && this.props.Login.masterData.defaultProjectType.value || -1,\r\n                nbulkbarcodeconfigcode: this.props.Login.masterData && this.props.Login.masterData.defaultBarcodeConfig && this.props.Login.masterData.defaultBarcodeConfig.value || -1,\r\n                fromDate: fromDate,\r\n                toDate: toDate,\r\n                isfilterSubmit: true\r\n\r\n            }\r\n\r\n            let masterData = {\r\n                ...this.props.Login.masterData,\r\n                realProjectType: this.props.Login.masterData && this.props.Login.masterData.defaultProjectType && this.props.Login.masterData.defaultProjectType,\r\n                realBarcodeConfig: this.props.Login.masterData && this.props.Login.masterData.defaultBarcodeConfig && this.props.Login.masterData.defaultBarcodeConfig,\r\n\r\n\r\n\r\n            }\r\n            let inputParam = { masterData, inputData };\r\n            this.props.getBulkBarcodeGeneration(inputParam);\r\n        }\r\n        else {\r\n            toast.warn(\r\n                this.props.intl.formatMessage({\r\n                    id: \"IDS_SELECTALLINFILTER\",\r\n                })\r\n            );\r\n\r\n        }\r\n    }\r\n\r\n\r\n    selectionChange = (event) => {\r\n        let addedComponentList = this.props.Login.addedComponentList || [];\r\n       // let selectedRecord={...this.state.selectedRecord,\"isInitialRender\":true}\r\n        const addComponentDataList = this.props.Login.masterData.bulkbarcodedatagen.map(item => {\r\n            if (item[\"Barcode Id\"] === event.dataItem[\"Barcode Id\"]) {\r\n                item.selected = !event.dataItem.selected;\r\n                if (item.selected) {\r\n                    const newItem = JSON.parse(JSON.stringify(item));\r\n                    addedComponentList.push(newItem);\r\n                }\r\n                else {\r\n                    addedComponentList = addedComponentList.filter(item1 => item1[\"Barcode Id\"] !== item[\"Barcode Id\"])\r\n                }\r\n\r\n            }\r\n            return item;\r\n        });\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { isInitialRender: true,addComponentDataList,addedComponentList,selectAll: this.valiateCheckAll(addComponentDataList), \r\n                deleteSelectAll: this.valiateCheckAll(addedComponentList)\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n        \r\n        \r\n      /*  this.setState({\r\n                \"selected\":\"selected\",\r\n            selectedRecord,\r\n            addComponentDataList, addedComponentList,\r\n            addSelectAll: this.valiateCheckAll(addComponentDataList),\r\n            deleteSelectAll: this.valiateCheckAll(addedComponentList)\r\n        });*/\r\n    }\r\n\r\n    valiateCheckAll(data) {\r\n    let selectAll = true;\r\n        if (data && data.length > 0) {\r\n\r\n            data.forEach(dataItem => {\r\n                if (dataItem.selected) {\r\n                    if (dataItem.selected === false) {\r\n                        selectAll = false;\r\n                    }\r\n                }\r\n                else {\r\n                    selectAll = false;\r\n                }\r\n            })\r\n        }\r\n        else {\r\n\r\n            selectAll = false;\r\n        }\r\n\r\n        return selectAll;\r\n\r\n    }\r\n    headerSelectionChange = (event) => {\r\n        const checked = event.syntheticEvent.target.checked;\r\n        let addedComponentList = [];\r\n     //   let selectedRecord={...this.state.selectedRecord,\"isInitialRender\":true}\r\n\r\n\r\n        if (checked) {\r\n            const data = event.target.props.data.map(item => {\r\n\r\n                if (addedComponentList.findIndex(x => x[\"Barcode Id\"] === item[\"Barcode Id\"]) === -1) {\r\n\r\n                    item.selected = checked;\r\n                    const newItem = JSON.parse(JSON.stringify(item));\r\n\r\n                    delete newItem['selected']\r\n\r\n                    addedComponentList.push(newItem);\r\n\r\n                    return item;\r\n                } else {\r\n                    let olditem = JSON.parse(JSON.stringify(addedComponentList[addedComponentList.findIndex(x => x[\"Barcode Id\"] === item[\"Barcode Id\"])]))\r\n                    olditem.selected = checked;\r\n                    let newItem = JSON.parse(JSON.stringify(olditem));\r\n                    newItem.selected = false;\r\n\r\n                    addedComponentList.push(newItem);\r\n                    return olditem;\r\n                }\r\n\r\n            });\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: { isInitialRender:true,addComponentDataList: data,\r\n                    addedComponentList,\r\n                    selectAll: this.valiateCheckAll(addedComponentList),\r\n                deleteSelectAll: this.valiateCheckAll(addedComponentList),\r\n                selectAll: checked, deleteSelectAll: false\r\n                 }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n\r\n\r\n\r\n\r\n            \r\n       /*     this.setState({\r\n               // selectedRecord,\r\n                addComponentDataList: data, addedComponentList,\r\n                addSelectAll: this.valiateCheckAll(addedComponentList),\r\n                deleteSelectAll: this.valiateCheckAll(addedComponentList),\r\n                addSelectAll: checked, deleteSelectAll: false\r\n            });*/\r\n        }\r\n\r\n        else {\r\n            let addedComponentData = this.props.Login.addedComponentList || [];\r\n            let deletedListdData = this.state.deletedList || [];\r\n\r\n            const data =this.props.Login.addComponentDataList.map(item => {\r\n                addedComponentData = addedComponentData.filter(item1 => item1.npreregno !== item.npreregno);\r\n                deletedListdData = deletedListdData.filter(item1 => item1.npreregno !== item.npreregno);\r\n                item.selected = checked;\r\n                return item;\r\n            });\r\n\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: { isInitialRender:true,addComponentDataList: data,\r\n                    addedComponentList,addedComponentData,deletedList:deletedListdData,\r\n                deleteSelectAll: this.valiateCheckAll(addedComponentList),\r\n                selectAll: checked, deleteSelectAll: false\r\n                 }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n         \r\n         /*   this.setState({\r\n                addComponentDataList: data, addedComponentList: addedComponentData, deletedList: deletedListdData,\r\n                addSelectAll: this.valiateCheckAll(addedComponentList),\r\n                deleteSelectAll: this.valiateCheckAll(addedComponentList),\r\n                addSelectAll: checked, deleteSelectAll: false\r\n            });*/\r\n        }\r\n\r\n\r\n\r\n    }\r\n    onDropFile = (attachedFiles, fieldName, maxSize) => {\r\n        let selectedRecord = this.state.selectedRecord || {};\r\n        selectedRecord[fieldName] = onDropAttachFileList(selectedRecord[fieldName], attachedFiles, maxSize)\r\n        this.setState({ selectedRecord, actionType: \"new\" });\r\n    }\r\n\r\n    expandChange = (event) => {\r\n        const isExpanded =\r\n            event.dataItem.expanded === undefined ?\r\n                event.dataItem.aggregates : event.dataItem.expanded;\r\n        event.dataItem.expanded = !isExpanded;\r\n        this.setState({ ...this.props });\r\n    }\r\n\r\n\r\n    onComboChange = (comboData, fieldName) => {\r\n        if (comboData != null) {\r\n            const selectedRecord = this.state.selectedRecord || {};\r\n            let inputData = [];\r\n            if (fieldName == \"nprojecttypecode\") {\r\n                inputData = {\r\n                    userinfo: this.props.Login.userInfo,\r\n                    nprojecttypecode: parseInt(comboData.value),\r\n                    defaultProjectType: comboData\r\n                }\r\n                const masterData = { ...this.props.Login.masterData }\r\n                const inputParam = { masterData, inputData, selectedRecord }\r\n                this.props.getProjectBarcodceConfig(inputParam)\r\n            }\r\n            else if (fieldName === 'nbulkbarcodeconfigcode') {\r\n                const masterData = { ...this.props.Login.masterData, defaultBarcodeConfig: comboData }\r\n                const updateInfo = {\r\n                    isInitialRender:false,\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: { masterData }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n            else {\r\n                selectedRecord[fieldName] = comboData;\r\n                this.setState({ selectedRecord });\r\n\r\n            }\r\n\r\n\r\n        }\r\n    }\r\n    deleteAttachment = (event, file, fieldName) => {\r\n        let selectedRecord = this.state.selectedRecord || {};\r\n        selectedRecord[fieldName] = deleteAttachmentDropZone(selectedRecord[fieldName], file);\r\n\r\n        this.setState({ selectedRecord, actionType: \"delete\" });\r\n    };\r\n\r\n    handleExportClick = () => {\r\n        //ALPD-4737--Vignesh R(28-08-2024)\r\n        if (this.props.Login.masterData.realProjectType && this.props.Login.masterData.realBarcodeConfig && this.props.Login.masterData.realBarcodeConfig.value) {\r\n            this.setState({ export: true });\r\n\r\n        }\r\n        else {\r\n\r\n            toast.warn(\r\n                this.props.intl.formatMessage({\r\n                    id: \"IDS_SELECTALLINFILTER\",\r\n                })\r\n            );\r\n        }\r\n\r\n    }\r\n    handleImportClick = () => {\r\n        if (this.props.Login.masterData.realProjectType && this.props.Login.masterData.realBarcodeConfig && this.props.Login.masterData.realBarcodeConfig.value) {\r\n\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    //ALPD-4594,ALPD-4596--Vignesh R(31-07-2024)\r\n                    selectedRecord:{...this.state.selectedRecord,\"isInitialRender\":false},\r\n                    isInitialRender:false,\r\n                    operation:\"\",\r\n                    loadImportFileData: true,\r\n                    openModal: true,\r\n                    loadPrinter: false,\r\n                    screenName: this.props.intl.formatMessage({ id: \"IDS_IMPORT\" }),\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            toast.warn(\r\n                this.props.intl.formatMessage({\r\n                    id: \"IDS_SELECTALLINFILTER\",\r\n                })\r\n            );\r\n\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(previousProps,previousState) {\r\n        let { projectType, bulkbarcodeconfig, controlMap, userRoleControlRights, skip, take } = this.state;\r\n        let bool = false;\r\n\r\n        /*if(this.props.Login.addedComponentList!==previousProps.Login.addedComponentList){\r\n            addedComponentList=this.props.Login.addedComponentList;\r\n            bool = true;\r\n        }*/\r\n        if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\r\n            this.setState({ selectedRecord: this.props.Login.selectedRecord });\r\n        }\r\n        if (this.state.export) {\r\n            this._excelExportHeader.save()\r\n            this.setState({ export: false })\r\n        }\r\n        if (this.props.Login.masterData.projectType !== previousProps.Login.masterData.projectType) {\r\n            const projectTypeMap = constructOptionList(this.props.Login.masterData.projectType || [], \"nprojecttypecode\",\r\n                \"sprojecttypename\", undefined, undefined, undefined);\r\n            projectType = projectTypeMap.get(\"OptionList\");\r\n            bool = true;\r\n\r\n        }\r\n\r\n        if (this.props.Login.masterData.selectedProjectType !== previousProps.Login.masterData.selectedProjectType) {\r\n            const projectTypeMap = constructOptionList(this.props.Login.masterData.projectType || [], \"nprojecttypecode\",\r\n                \"sprojecttypename\", undefined, undefined, undefined);\r\n            projectType = projectTypeMap.get(\"OptionList\");\r\n            bool = true;\r\n\r\n        }\r\n        if (this.props.Login.masterData.bulkBarcodeConfig !== previousProps.Login.masterData.bulkBarcodeConfig) {\r\n            const bulkbarcodeconfigMap = constructOptionList(this.props.Login.masterData.bulkBarcodeConfig || [], \"nbulkbarcodeconfigcode\",\r\n                \"sconfigname\", undefined, undefined, undefined);\r\n            bulkbarcodeconfig = bulkbarcodeconfigMap.get(\"OptionList\");\r\n            bool = true;\r\n\r\n        }\r\n        if (\r\n            this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\r\n            userRoleControlRights = [];\r\n            if (this.props.Login.userRoleControlRights) {\r\n                this.props.Login.userRoleControlRights[\r\n                    this.props.Login.userInfo.nformcode\r\n                ] &&\r\n                    Object.values(\r\n                        this.props.Login.userRoleControlRights[\r\n                        this.props.Login.userInfo.nformcode\r\n                        ]\r\n                    ).map((item) => userRoleControlRights.push(item.ncontrolcode));\r\n            }\r\n            controlMap = getControlMap(\r\n                this.props.Login.userRoleControlRights,\r\n                this.props.Login.userInfo.nformcode\r\n            );\r\n            bool = true;\r\n        }\r\n\r\n\r\n\r\n        if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\r\n            this.setState({ selectedRecord: this.props.Login.selectedRecord });\r\n        }\r\n         if (this.props.Login.selectedPrinterData !== previousProps.Login.selectedPrinterData) {\r\n            this.setState({ selectedRecord:{ ...this.props.Login.selectedPrinterData,...this.state.selectedRecord }});\r\n        }\r\n\r\n        if (bool) {\r\n            this.setState({\r\n                projectType, bulkbarcodeconfig, controlMap, userRoleControlRights, skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[3]) : 5\r\n            });\r\n        }\r\n    }\r\n    childDataChange = (selectedRecord) => {\r\n        this.setState({\r\n            selectedRecord: {\r\n                ...selectedRecord, isInitialRender: false\r\n            },\r\n           \r\n        });\r\n    }\r\n    onInputOnChange = (event) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n       \r\n        selectedRecord[event.target.name] = event.target.value;\r\n        this.childDataChange(selectedRecord);\r\n        //this.setState({ selectedRecord });\r\n            \r\n        \r\n        //this.setState({ selectedRecord });\r\n    }\r\n\r\n    deleteRecord = (operation, ncontrolcode) => {\r\n        if (this.props.Login.masterData && this.props.Login.masterData.selectedBulkBarcodeGeneration !== null) {\r\n            let obj = convertDateValuetoString(this.props.Login.masterData.FromDate, this.props.Login.masterData.ToDate, this.props.Login.userInfo);\r\n            let fromDate = obj.fromDate;\r\n            let toDate = obj.toDate;\r\n\r\n            const postParam = {\r\n                inputListName: \"BarcodeGeneration\", selectedObject: \"selectedBulkBarcodeGeneration\",\r\n                primaryKeyField: \"nbulkbarcodegenerationcode\",\r\n                primaryKeyValue: this.props.Login.masterData.selectedBulkBarcodeGeneration.nbulkbarcodegenerationcode,\r\n                fetchUrl: \"bulkbarcodegeneration/getBulkBarcodeGeneration\",\r\n                fecthInputObject: {\r\n                    userinfo: this.props.Login.userInfo\r\n                },\r\n            }\r\n\r\n            const inputParam = {\r\n                classUrl: this.props.Login.inputParam.classUrl,\r\n                methodUrl: \"BulkBarcodeGeneration\",\r\n                displayName: this.props.Login.inputParam.displayName,\r\n                inputData: {\r\n                    \"isDelete\":true,\r\n                    \"userinfo\": this.props.Login.userInfo,\r\n                    \"operation\": \"delete\",\r\n                    \"fromDate\": fromDate,\r\n                    \"toDate\": toDate,\r\n                    \"nprojecttypecode\": this.props.Login.masterData.realProjectType.value || -1,\r\n                    \"nbulkbarcodegenerationcode\": this.props.Login.masterData && this.props.Login.masterData.selectedBulkBarcodeGeneration && this.props.Login.masterData.selectedBulkBarcodeGeneration.nbulkbarcodegenerationcode || -1\r\n\r\n                },\r\n                postParam,\r\n                operation: \"delete\",\r\n                dataState: this.state.dataState\r\n            }\r\n\r\n            if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, ncontrolcode)) {\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        loadEsign: true, screenData: { inputParam, masterData: this.props.Login.masterData },\r\n                        openModal: true, screenName: this.props.intl.formatMessage({ id: this.props.Login.inputParam.displayName }),\r\n                        operation: \"delete\"\r\n                    }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n            else {\r\n                this.props.deleteBulkBarcodeGeneration(inputParam, this.props.Login.masterData);\r\n            }\r\n        }\r\n        else {\r\n\r\n            toast.warn(\r\n                this.props.intl.formatMessage({\r\n                    id: \"IDS_NORECORDSAVAILABLE\",\r\n                })\r\n            );\r\n        }\r\n    }\r\n    deleteBarcodeRecord = ( ncontrolcode) => {\r\n        if (this.props.Login.masterData && this.props.Login.masterData.selectedBulkBarcodeGeneration !== null) {\r\n            if (this.props.Login.masterData && this.props.Login.masterData.bulkbarcodedatagen && this.props.Login.masterData.bulkbarcodedatagen.length > 0) {\r\n                if(this.props.Login.addedComponentList && this.props.Login.addedComponentList.length>0){\r\n          \r\n            let obj = convertDateValuetoString(this.props.Login.masterData.FromDate, this.props.Login.masterData.ToDate, this.props.Login.userInfo);\r\n            let fromDate = obj.fromDate;\r\n            let toDate = obj.toDate;\r\n            \r\n            let updateBarcodeData = this.props.Login.masterData.bulkbarcodedatagen.filter(item => {\r\n                return !this.props.Login.addedComponentList.some(item1 => item1['Barcode Id'] === item['Barcode Id']);\r\n            });\r\n            \r\n            \r\n            \r\n            const postParam = {\r\n                inputListName: \"BarcodeGeneration\", selectedObject: \"selectedBulkBarcodeGeneration\",\r\n                primaryKeyField: \"nbulkbarcodegenerationcode\",\r\n                primaryKeyValue: this.props.Login.masterData.selectedBulkBarcodeGeneration.nbulkbarcodegenerationcode,\r\n                fetchUrl: \"bulkbarcodegeneration/getBulkBarcodeGeneration\",\r\n                fecthInputObject: {\r\n                    userinfo: this.props.Login.userInfo\r\n                },\r\n            }\r\n\r\n            const inputParam = {\r\n                classUrl: this.props.Login.inputParam.classUrl,\r\n                addedComponentList:[],\r\n                selectAll:false,\r\n                methodUrl: \"BarcodeData\",\r\n                displayName: this.props.Login.inputParam.displayName,\r\n                inputData: {\r\n\r\n                    \"userinfo\": this.props.Login.userInfo,\r\n                    \"operation\": \"delete\",\r\n                    \"fromDate\": fromDate,\r\n                    \"toDate\": toDate,\r\n                    \"nbulkbarcodeconfigcode\": this.props.Login.masterData && this.props.Login.masterData.realBarcodeConfig && this.props.Login.masterData.realBarcodeConfig.value || -1,\r\n                    \"nprojecttypecode\": this.props.Login.masterData.realProjectType.value || -1,\r\n                    \"nbulkbarcodegenerationcode\": this.props.Login.masterData && this.props.Login.masterData.selectedBulkBarcodeGeneration && this.props.Login.masterData.selectedBulkBarcodeGeneration.nbulkbarcodegenerationcode || -1,\r\n                    \"updateBarcodeData\" :Lims_JSON_stringify(JSON.stringify(updateBarcodeData))\r\n\r\n                },\r\n                postParam,\r\n                operation: \"delete\",\r\n                dataState: this.state.dataState\r\n            }\r\n\r\n            if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, ncontrolcode)) {\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        loadEsign: true, screenData: { inputParam, masterData: this.props.Login.masterData },\r\n                        openModal: true, screenName: this.props.intl.formatMessage({ id: this.props.Login.inputParam.displayName }),\r\n                        operation: \"delete\"\r\n                    }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n            else {\r\n                this.props.deleteBarcodeData(inputParam, this.props.Login.masterData);\r\n            }\r\n        }else{\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTANYONERECORD\" }));\r\n        }\r\n         }else{\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_NORECORDSAVAILABLE\" }));\r\n         }\r\n        }\r\n        else {\r\n\r\n            toast.warn(\r\n                this.props.intl.formatMessage({\r\n                    id: \"IDS_NORECORDSAVAILABLE\",\r\n                })\r\n            );\r\n        }\r\n    }\r\n\r\n    reloadData = () => {\r\n        this.searchRef.current.value = \"\";\r\n        if (this.props.Login.masterData.realProjectType && this.props.Login.masterData.realBarcodeConfig && this.props.Login.masterData.realBarcodeConfig.value) {\r\n            let inputData = [];\r\n            let obj = convertDateValuetoString(this.props.Login.masterData.FromDate, this.props.Login.masterData.ToDate, this.props.Login.userInfo);\r\n            let fromDate = obj.fromDate;\r\n            let toDate = obj.toDate;\r\n            inputData = {\r\n                userinfo: this.props.Login.userInfo,\r\n                //ALPD-4599--Vignesh R(31-07-2024)\r\n                nprojecttypecode: this.props.Login.masterData && this.props.Login.masterData.realProjectType && this.props.Login.masterData.realProjectType.value || -1,\r\n                nbulkbarcodeconfigcode: this.props.Login.masterData && this.props.Login.masterData.realBarcodeConfig && this.props.Login.masterData.realBarcodeConfig.value || -1,\r\n                fromDate: fromDate,\r\n                toDate: toDate,\r\n            }\r\n            const inputParam = {\r\n                inputData: inputData,\r\n                masterData: this.props.Login.masterData\r\n\r\n            };\r\n\r\n            this.props.getBulkBarcodeGeneration(inputParam);\r\n        } else {\r\n            toast.warn(\r\n                this.props.intl.formatMessage({\r\n                    id: \"IDS_SELECTALLINFILTER\",\r\n                })\r\n            );\r\n\r\n        }\r\n    }\r\n    ConfirmDelete = (deleteId) => {\r\n        this.confirmMessage.confirm(\"deleteMessage\", this.props.intl.formatMessage({ id: \"IDS_DELETE\" }), this.props.intl.formatMessage({ id: \"IDS_DEFAULTCONFIRMMSG\" }),\r\n            this.props.intl.formatMessage({ id: \"IDS_OK\" }), this.props.intl.formatMessage({ id: \"IDS_CANCEL\" }),\r\n            () => this.deleteRecord(\"delete\", deleteId));\r\n    }\r\n\r\n    onSaveClick = (saveType, formRef) => {\r\n\r\n       \r\n        this.searchRef.current.value = \"\";\r\n   \r\n\r\n        let selectedRecord = this.state.selectedRecord || {}\r\n        const acceptedFiles = this.state.selectedRecord.sfilename;\r\n        let importBulkBarcodeGen = [];\r\n        const formData = new FormData();\r\n        let obj = convertDateValuetoString(this.props.Login.masterData.FromDate, this.props.Login.masterData.ToDate, this.props.Login.userInfo);\r\n        let fromDate = obj.fromDate;\r\n        let toDate = obj.toDate;\r\n        if (acceptedFiles && acceptedFiles.length === 1) {\r\n\r\n            if (acceptedFiles && Array.isArray(acceptedFiles) && acceptedFiles.length > 0) {\r\n                acceptedFiles.forEach((file, index) => {\r\n                    const tempData = {};\r\n                    const splittedFileName = file.name.split('.');\r\n                    const fileExtension = file.name.split('.')[splittedFileName.length - 1];\r\n                    const ssystemfilename = selectedRecord.ssystemfilename ? selectedRecord.ssystemfilename.split('.') : \"\";\r\n                    const filesystemfileext = selectedRecord.ssystemfilename ? file.name.split('.')[ssystemfilename.length - 1] : \"\";\r\n                    const uniquefilename = 1 === attachmentType.FTP ?\r\n                        ssystemfilename !== \"\" ? ssystemfilename[0] + '.' + filesystemfileext : create_UUID() + '.' + fileExtension : \"\";\r\n                    tempData[\"sfilename\"] = this.state.selectedRecord['simportfilename'] ? this.state.selectedRecord['simportfilename'] : \"\";\r\n                    // tempData[\"sfilename\"] = Lims_JSON_stringify(file.name, false);\r\n                    tempData[\"sdescription\"] = Lims_JSON_stringify(replaceBackSlash(selectedRecord.sdescription ? selectedRecord.sdescription.trim() : \"\"), false);\r\n                    //  tempData[\"nlinkcode\"] = transactionStatus.NA;\r\n                    tempData[\"ssystemfilename\"] = uniquefilename;\r\n                    tempData['nprojecttypecode'] = this.props.Login.masterData.realProjectType && this.props.Login.masterData.realProjectType.value || -1\r\n                    tempData['nbulkbarcodeconfigcode'] = this.props.Login.masterData.realBarcodeConfig && this.props.Login.masterData.realBarcodeConfig.value || -1\r\n                    tempData['barcodefields'] =\r\n\r\n                        formData.append(\"uploadedFile\" + index, file);\r\n                    formData.append(\"uniquefilename\" + index, uniquefilename);\r\n                    importBulkBarcodeGen.push(tempData);\r\n                });\r\n                formData.append(\"filecount\", acceptedFiles.length);\r\n                formData.append(\"importBulkBarcodeGen\", JSON.stringify(importBulkBarcodeGen));\r\n                formData.append(\"fromDate\", fromDate);\r\n                formData.append(\"toDate\", toDate);\r\n                formData.append(\"ImportFile\", selectedRecord['sfilename'][0])\r\n\r\n                const bulkbarcodeFields = this.props.Login.masterData\r\n                    && this.props.Login.masterData.jsondataBarcodeFields\r\n                        .filter(item => item.sfieldname !== 'Barcode Id')\r\n                        .map(item => item.sfieldname)\r\n                        .join(\",\");\r\n\r\n                formData.append(\"bulkbarcodeFields\", bulkbarcodeFields)\r\n            }\r\n\r\n            const inputParam = {\r\n                inputData: {\r\n                    \"userinfo\": {\r\n                        ...this.props.Login.userInfo,\r\n                        sformname: Lims_JSON_stringify(this.props.Login.userInfo.sformname),\r\n                        smodulename: Lims_JSON_stringify(this.props.Login.userInfo.smodulename),\r\n                        //ALPD-1826(while saving the file and link,audit trail is not captured the respective language)\r\n                        slanguagename: Lims_JSON_stringify(this.props.Login.userInfo.slanguagename)\r\n                    }\r\n                },\r\n                formData: formData,\r\n                masterData: this.props.Login.masterData && this.props.Login.masterData,\r\n                selectedRecord: this.state.selectedRecord || {},\r\n                operation: \"import\",\r\n                classUrl: \"bulkbarcodegeneration\",\r\n                saveType, formRef, methodUrl: \"BulkBarcodeGeneration\",\r\n            }\r\n            if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        loadEsign: true, screenData: { inputParam, masterData: this.props.Login.masterData },\r\n                        openModal: true, screenName: this.props.intl.formatMessage({ id: \"IDS_CLIENT\" }),\r\n                        //this.props.intl.formatMessage({ id: this.props.Login.inputParam.displayName }),\r\n                        operation: this.props.Login.operation\r\n                    }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n            else {\r\n                this.props.importBulkBarcodeGeneration(inputParam, this.props.Login.masterData, \"openModal\");\r\n            }\r\n\r\n        } else {\r\n\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_PLEASESELECTTHEFILE\" }))\r\n        }\r\n\r\n    }\r\n    validateEsign = () => {\r\n        const inputParam = {\r\n            inputData: {\r\n                \"userinfo\": {\r\n                    ...this.props.Login.userInfo,\r\n                    sreason: this.state.selectedRecord[\"esigncomments\"],\r\n                    nreasoncode: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].value,\r\n                    spredefinedreason: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].label,\r\n\r\n                },\r\n                password: this.state.selectedRecord[\"esignpassword\"]\r\n            },\r\n            screenData: this.props.Login.screenData\r\n        }\r\n        this.props.validateEsignCredential(inputParam, \"openModal\");\r\n    }\r\n\r\n   \r\n    onSavePrinterClick = () => {\r\n        let insertlist = [];\r\n        const inputParam = {\r\n            classUrl: 'bulkbarcodegeneration',\r\n            methodUrl: 'Barcode',\r\n            displayName: this.props.Login.inputParam.displayName,\r\n            inputData: {\r\n                selectAll:false,\r\n                sprintername: this.state.selectedRecord.sprintername ? this.state.selectedRecord.sprintername.value : '',\r\n                sbarcodename: this.state.selectedRecord.sbarcodename ? this.state.selectedRecord.sbarcodename.value : '',\r\n                insertlist,\r\n                BarcodeID: this.props.Login.addedComponentList ? this.props.Login.addedComponentList.map(x =>\"'\"+x['Barcode Id']+\"'\").join(\",\") : \" \",\r\n                //selectDetailsList:this.state.addedComponentList,\r\n                \r\n                userinfo: this.props.Login.userInfo,\r\n                ncontrolcode: this.props.Login.ncontrolcode\r\n            },\r\n            operation: 'print',\r\n            action: 'printer'\r\n        }\r\n\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolcode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData: {...this.props.Login.masterData,searchedData:undefined} },\r\n                    openModal: true, screenName: this.props.intl.formatMessage({ id: this.props.Login.inputParam.displayName }),\r\n                    operation: 'printer'\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.crudMaster(inputParam, {...this.props.Login.masterData,searchedData:undefined}, \"openModal\");\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport default connect(mapStateToProps, {\r\n    callService, crudMaster, updateStore, validateEsignCredential,\r\n    getBulkBarcodeGenData, getBulkBarcodeGeneration,getBarcodeAndPrinterService,\r\n    filterTransactionList, getProjectBarcodceConfig, importBulkBarcodeGeneration, getTabBulkBarcodeGeneration,deleteBarcodeData,deleteBulkBarcodeGeneration\r\n})(injectIntl(BulkBarcodeGeneration));"]},"metadata":{},"sourceType":"module"}