{"ast":null,"code":"import { LABEL_DECIMALS, MIN_RATIO } from './constants';\n/**\n * @hidden\n */\n\nexport var truncateNumber = function truncateNumber(value) {\n  var numberParts = value.toString().split('.');\n  return numberParts.length === 1 ? \"\" + numberParts[0] : numberParts[0] + \".\" + numberParts[1].substr(0, LABEL_DECIMALS);\n};\n/**\n * @hidden\n */\n\nexport var calculatePercentage = function calculatePercentage(min, max, value) {\n  var onePercent = Math.abs((max - min) / 100);\n  return Math.abs((value - min) / onePercent);\n};\n/**\n * @hidden\n */\n\nexport var updateProgress = function updateProgress(progressRef, progressWrapRef, percentage, isVertical) {\n  var progressPercentage = Math.max(percentage, 0.01);\n  var progressWrapPercentage = 100 / progressPercentage * 100;\n\n  if (progressRef.current && progressWrapRef.current) {\n    progressRef.current.style.width = !isVertical ? progressPercentage + \"%\" : '100%';\n    progressWrapRef.current.style.width = !isVertical ? progressWrapPercentage + \"%\" : '100%';\n    progressRef.current.style.height = isVertical ? progressPercentage + \"%\" : '100%';\n    progressWrapRef.current.style.height = isVertical ? progressWrapPercentage + \"%\" : '100%';\n  }\n};\n/**\n * @hidden\n */\n\nexport var calculateRatio = function calculateRatio(min, max, value) {\n  return Math.max((value - min) / (max - min), MIN_RATIO);\n};","map":{"version":3,"sources":["D:/Postgres_workingFolder/QuaLISWeb/node_modules/@progress/kendo-react-progressbars/dist/es/common/utils.js"],"names":["LABEL_DECIMALS","MIN_RATIO","truncateNumber","value","numberParts","toString","split","length","substr","calculatePercentage","min","max","onePercent","Math","abs","updateProgress","progressRef","progressWrapRef","percentage","isVertical","progressPercentage","progressWrapPercentage","current","style","width","height","calculateRatio"],"mappings":"AAAA,SAASA,cAAT,EAAyBC,SAAzB,QAA0C,aAA1C;AACA;AACA;AACA;;AACA,OAAO,IAAIC,cAAc,GAAG,SAAjBA,cAAiB,CAAUC,KAAV,EAAiB;AACzC,MAAIC,WAAW,GAAGD,KAAK,CAACE,QAAN,GAAiBC,KAAjB,CAAuB,GAAvB,CAAlB;AACA,SAAOF,WAAW,CAACG,MAAZ,KAAuB,CAAvB,GAA2B,KAAKH,WAAW,CAAC,CAAD,CAA3C,GAAiDA,WAAW,CAAC,CAAD,CAAX,GAAiB,GAAjB,GAAuBA,WAAW,CAAC,CAAD,CAAX,CAAeI,MAAf,CAAsB,CAAtB,EAAyBR,cAAzB,CAA/E;AACH,CAHM;AAIP;AACA;AACA;;AACA,OAAO,IAAIS,mBAAmB,GAAG,SAAtBA,mBAAsB,CAAUC,GAAV,EAAeC,GAAf,EAAoBR,KAApB,EAA2B;AACxD,MAAIS,UAAU,GAAGC,IAAI,CAACC,GAAL,CAAS,CAACH,GAAG,GAAGD,GAAP,IAAc,GAAvB,CAAjB;AACA,SAAOG,IAAI,CAACC,GAAL,CAAS,CAACX,KAAK,GAAGO,GAAT,IAAgBE,UAAzB,CAAP;AACH,CAHM;AAIP;AACA;AACA;;AACA,OAAO,IAAIG,cAAc,GAAG,SAAjBA,cAAiB,CAAUC,WAAV,EAAuBC,eAAvB,EAAwCC,UAAxC,EAAoDC,UAApD,EAAgE;AACxF,MAAIC,kBAAkB,GAAGP,IAAI,CAACF,GAAL,CAASO,UAAT,EAAqB,IAArB,CAAzB;AACA,MAAIG,sBAAsB,GAAI,MAAMD,kBAAP,GAA6B,GAA1D;;AACA,MAAIJ,WAAW,CAACM,OAAZ,IAAuBL,eAAe,CAACK,OAA3C,EAAoD;AAChDN,IAAAA,WAAW,CAACM,OAAZ,CAAoBC,KAApB,CAA0BC,KAA1B,GAAkC,CAACL,UAAD,GAAcC,kBAAkB,GAAG,GAAnC,GAAyC,MAA3E;AACAH,IAAAA,eAAe,CAACK,OAAhB,CAAwBC,KAAxB,CAA8BC,KAA9B,GAAsC,CAACL,UAAD,GAAcE,sBAAsB,GAAG,GAAvC,GAA6C,MAAnF;AACAL,IAAAA,WAAW,CAACM,OAAZ,CAAoBC,KAApB,CAA0BE,MAA1B,GAAmCN,UAAU,GAAGC,kBAAkB,GAAG,GAAxB,GAA8B,MAA3E;AACAH,IAAAA,eAAe,CAACK,OAAhB,CAAwBC,KAAxB,CAA8BE,MAA9B,GAAuCN,UAAU,GAAGE,sBAAsB,GAAG,GAA5B,GAAkC,MAAnF;AACH;AACJ,CATM;AAUP;AACA;AACA;;AACA,OAAO,IAAIK,cAAc,GAAG,SAAjBA,cAAiB,CAAUhB,GAAV,EAAeC,GAAf,EAAoBR,KAApB,EAA2B;AACnD,SAAOU,IAAI,CAACF,GAAL,CAAS,CAACR,KAAK,GAAGO,GAAT,KAAiBC,GAAG,GAAGD,GAAvB,CAAT,EAAsCT,SAAtC,CAAP;AACH,CAFM","sourcesContent":["import { LABEL_DECIMALS, MIN_RATIO } from './constants';\n/**\n * @hidden\n */\nexport var truncateNumber = function (value) {\n    var numberParts = value.toString().split('.');\n    return numberParts.length === 1 ? \"\" + numberParts[0] : numberParts[0] + \".\" + numberParts[1].substr(0, LABEL_DECIMALS);\n};\n/**\n * @hidden\n */\nexport var calculatePercentage = function (min, max, value) {\n    var onePercent = Math.abs((max - min) / 100);\n    return Math.abs((value - min) / onePercent);\n};\n/**\n * @hidden\n */\nexport var updateProgress = function (progressRef, progressWrapRef, percentage, isVertical) {\n    var progressPercentage = Math.max(percentage, 0.01);\n    var progressWrapPercentage = (100 / progressPercentage) * 100;\n    if (progressRef.current && progressWrapRef.current) {\n        progressRef.current.style.width = !isVertical ? progressPercentage + \"%\" : '100%';\n        progressWrapRef.current.style.width = !isVertical ? progressWrapPercentage + \"%\" : '100%';\n        progressRef.current.style.height = isVertical ? progressPercentage + \"%\" : '100%';\n        progressWrapRef.current.style.height = isVertical ? progressWrapPercentage + \"%\" : '100%';\n    }\n};\n/**\n * @hidden\n */\nexport var calculateRatio = function (min, max, value) {\n    return Math.max((value - min) / (max - min), MIN_RATIO);\n};\n"]},"metadata":{},"sourceType":"module"}