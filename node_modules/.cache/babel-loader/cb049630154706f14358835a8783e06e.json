{"ast":null,"code":"var _jsxFileName = \"D:\\\\LIMSWFH\\\\LIMSPOSTGRESQL\\\\QuaLISWeb\\\\src\\\\pages\\\\basemaster\\\\AddSampleTestComments.jsx\";\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { Row, Col } from 'react-bootstrap';\nimport FormInput from '../../components/form-input/form-input.component'; //import FormTextarea from '../../components/form-textarea/form-textarea.component';\n\nimport CustomSwitch from '../../components/custom-switch/custom-switch.component';\nimport FormSelectSearch from '../../components/form-select-search/form-select-search.component';\nimport FormTextarea from '../../components/form-textarea/form-textarea.component';\nimport { transactionStatus } from '../../components/Enumeration';\n\nconst AddSampleTestComments = props => {\n  return /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    md: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 13\n    }\n  }, props.selectedRecord[\"ncommenttypevisible\"] && props.selectedRecord[\"ncommenttypevisible\"].value === 1 ? /*#__PURE__*/React.createElement(FormSelectSearch, {\n    formLabel: props.intl.formatMessage({\n      id: \"IDS_COMMENTTYPE\"\n    }),\n    name: \"ncommenttypecode\",\n    placeholder: props.intl.formatMessage({\n      id: \"IDS_SELECTRECORD\"\n    }),\n    value: props.selectedRecord ? props.selectedRecord[\"ncommenttypecode\"] : \"\",\n    options: props.CommentType,\n    optionId: \"ncommenttypecode\",\n    optionValue: \"scommenttype\",\n    isMandatory: true,\n    isMulti: false,\n    isSearchable: false,\n    closeMenuOnSelect: true,\n    alphabeticalSort: true,\n    as: \"select\",\n    onChange: event => props.onComboChange(event, \"ncommenttypecode\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 13\n    }\n  }) : \"\"), /*#__PURE__*/React.createElement(Col, {\n    md: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(FormSelectSearch, {\n    formLabel: props.intl.formatMessage({\n      id: \"IDS_COMMENTNAME\"\n    }),\n    name: \"ncommentsubtypecode\",\n    placeholder: props.intl.formatMessage({\n      id: \"IDS_SELECTRECORD\"\n    }),\n    value: props.selectedRecord ? props.selectedRecord[\"ncommentsubtypecode\"] : \"\",\n    options: props.CommentSubType,\n    optionId: \"ncommentsubtypecode\",\n    optionValue: \"scommentsubtype\",\n    isMandatory: true,\n    isMulti: false,\n    isSearchable: false,\n    closeMenuOnSelect: true,\n    alphabeticalSort: true,\n    as: \"select\",\n    onChange: event => props.onComboChange(event, \"ncommentsubtypecode\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(Col, {\n    md: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }\n  }, props.selectedRecord[\"ncommentsubtypecode\"] && props.selectedRecord[\"ncommentsubtypecode\"].value === 3 && props.selectedRecord[\"spredefinedenable\"] === \"true\" ? /*#__PURE__*/React.createElement(FormInput, {\n    label: props.intl.formatMessage({\n      id: \"IDS_PREDEFINEDNAME\"\n    }),\n    name: \"spredefinedname\",\n    type: \"text\",\n    onChange: event => props.onInputOnChange(event),\n    placeholder: props.intl.formatMessage({\n      id: \"IDS_PREDEFINEDNAME\"\n    }),\n    value: props.selectedRecord ? props.selectedRecord[\"spredefinedname\"] : \"\",\n    isMandatory: false,\n    required: true,\n    maxLength: 100,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 17\n    }\n  }) : \"\"), /*#__PURE__*/React.createElement(Col, {\n    md: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(FormTextarea, {\n    label: props.intl.formatMessage({\n      id: \"IDS_DESCRIPTION\"\n    }),\n    name: \"sdescription\",\n    type: \"text\",\n    onChange: event => props.onInputOnChange(event),\n    placeholder: props.intl.formatMessage({\n      id: \"IDS_DESCRIPTION\"\n    }),\n    value: props.selectedRecord[\"sdescription\"] ? props.selectedRecord[\"sdescription\"] : \"\",\n    isMandatory: true,\n    required: false,\n    maxLength: 2000,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 17\n    }\n  })), /*#__PURE__*/React.createElement(Col, {\n    md: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(CustomSwitch, {\n    name: \"ndefaultstatus\",\n    type: \"switch\",\n    label: props.intl.formatMessage({\n      id: \"IDS_DEFAULTSTATUS\"\n    }),\n    placeholder: props.intl.formatMessage({\n      id: \"IDS_DEFAULTSTATUS\"\n    }),\n    defaultValue: props.selectedRecord[\"ndefaultstatus\"] ? props.selectedRecord[\"ndefaultstatus\"] === transactionStatus.YES ? true : false : false,\n    isMandatory: false,\n    required: false,\n    checked: props.selectedRecord[\"ndefaultstatus\"] ? props.selectedRecord[\"ndefaultstatus\"] === transactionStatus.YES ? true : false : false,\n    onChange: event => props.onInputOnChange(event),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 13\n    }\n  })));\n};\n\nexport default injectIntl(AddSampleTestComments);","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/pages/basemaster/AddSampleTestComments.jsx"],"names":["React","injectIntl","Row","Col","FormInput","CustomSwitch","FormSelectSearch","FormTextarea","transactionStatus","AddSampleTestComments","props","selectedRecord","value","intl","formatMessage","id","CommentType","event","onComboChange","CommentSubType","onInputOnChange","YES"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { injectIntl } from 'react-intl';\r\nimport { Row, Col } from 'react-bootstrap';\r\nimport FormInput from '../../components/form-input/form-input.component';\r\n//import FormTextarea from '../../components/form-textarea/form-textarea.component';\r\nimport CustomSwitch from '../../components/custom-switch/custom-switch.component';\r\nimport FormSelectSearch from '../../components/form-select-search/form-select-search.component';\r\nimport FormTextarea from '../../components/form-textarea/form-textarea.component';\r\nimport { transactionStatus } from '../../components/Enumeration';\r\n\r\nconst AddSampleTestComments = (props) => {\r\n    return (\r\n\r\n        <Row>\r\n\r\n            <Col md={12}>\r\n            {props.selectedRecord[\"ncommenttypevisible\"] && \r\n                 props.selectedRecord[\"ncommenttypevisible\"].value === 1 ?\r\n            <FormSelectSearch\r\n                    formLabel={props.intl.formatMessage({ id: \"IDS_COMMENTTYPE\" })}\r\n                    name={\"ncommenttypecode\"} \r\n                    placeholder={props.intl.formatMessage({ id: \"IDS_SELECTRECORD\" })}\r\n                    value={props.selectedRecord ? props.selectedRecord[\"ncommenttypecode\"] : \"\"}\r\n                    options={props.CommentType}\r\n                    optionId=\"ncommenttypecode\"\r\n                    optionValue=\"scommenttype\"\r\n                    isMandatory={true}\r\n                    isMulti={false}\r\n                    isSearchable={false}\r\n                    closeMenuOnSelect={true}\r\n                    alphabeticalSort={true}\r\n                    as={\"select\"}\r\n                    onChange={(event) => props.onComboChange(event, \"ncommenttypecode\")}\r\n                    \r\n                />\r\n                :\"\"}\r\n            </Col>\r\n            <Col md={12}>\r\n            <FormSelectSearch\r\n                    formLabel={props.intl.formatMessage({ id: \"IDS_COMMENTNAME\" })}\r\n                    name={\"ncommentsubtypecode\"} \r\n                    placeholder={props.intl.formatMessage({ id: \"IDS_SELECTRECORD\" })}\r\n                    value={props.selectedRecord ? props.selectedRecord[\"ncommentsubtypecode\"] : \"\"}\r\n                    options={props.CommentSubType}\r\n                    optionId=\"ncommentsubtypecode\"\r\n                    optionValue=\"scommentsubtype\"\r\n                    isMandatory={true}\r\n                    isMulti={false}\r\n                    isSearchable={false}\r\n                    closeMenuOnSelect={true}\r\n                    alphabeticalSort={true}\r\n                    as={\"select\"}\r\n                    onChange={(event) => props.onComboChange(event, \"ncommentsubtypecode\")}\r\n                    \r\n                />\r\n            </Col>\r\n            <Col md={12}>\r\n            {props.selectedRecord[\"ncommentsubtypecode\"] && \r\n                 props.selectedRecord[\"ncommentsubtypecode\"].value === 3 && props.selectedRecord[\"spredefinedenable\"]===\"true\"?\r\n                <FormInput\r\n                    label={props.intl.formatMessage({ id: \"IDS_PREDEFINEDNAME\" })}\r\n                    name={\"spredefinedname\"}\r\n                    type=\"text\"\r\n                    onChange={(event) => props.onInputOnChange(event)}\r\n                    placeholder={props.intl.formatMessage({ id: \"IDS_PREDEFINEDNAME\" })}\r\n                    value={props.selectedRecord ? props.selectedRecord[\"spredefinedname\"] : \"\"}\r\n                    isMandatory={false}\r\n                    required={true}\r\n                    maxLength={100}\r\n                />\r\n                :\"\"}\r\n            </Col>\r\n            <Col md={12}>\r\n                {/* <FormInput\r\n                    label={props.intl.formatMessage({ id: \"IDS_DESCRIPTION\" })}\r\n                    name={\"sdescription\"}\r\n                    type=\"text\"\r\n                    onChange={(event) => props.onInputOnChange(event)}\r\n                    placeholder={props.intl.formatMessage({ id: \"IDS_DESCRIPTION\" })}\r\n                    value={props.selectedRecord ? props.selectedRecord[\"sdescription\"] : \"\"}\r\n                    isMandatory={true}\r\n                    required={false}\r\n                    maxLength={200}\r\n                /> */}\r\n                <FormTextarea\r\n                    label={props.intl.formatMessage({ id:\"IDS_DESCRIPTION\" })}\r\n                    name=\"sdescription\"\r\n                    type=\"text\"\r\n                    onChange={(event) => props.onInputOnChange(event)}\r\n                    placeholder={props.intl.formatMessage({ id: \"IDS_DESCRIPTION\" })}\r\n                    value={props.selectedRecord[\"sdescription\"] ? props.selectedRecord[\"sdescription\"] : \"\"}\r\n                    isMandatory={true}\r\n                    required={false}\r\n                    maxLength={2000}\r\n                />\r\n            </Col>\r\n            <Col md={12}>\r\n            <CustomSwitch\r\n               name={\"ndefaultstatus\"}\r\n               type=\"switch\"\r\n               label={ props.intl.formatMessage({ id:\"IDS_DEFAULTSTATUS\"})}\r\n               placeholder={  props.intl.formatMessage({ id:\"IDS_DEFAULTSTATUS\"})}                            \r\n               defaultValue ={ props.selectedRecord[\"ndefaultstatus\"]  ? props.selectedRecord[\"ndefaultstatus\"] === transactionStatus.YES ? true :false:false }  \r\n               isMandatory={false}                       \r\n               required={false}\r\n               checked={ props.selectedRecord[\"ndefaultstatus\"]  ? props.selectedRecord[\"ndefaultstatus\"] === transactionStatus.YES ? true :false:false}\r\n               onChange={(event)=> props.onInputOnChange(event)}\r\n               />\r\n            </Col>\r\n        </Row>\r\n    )\r\n}\r\nexport default injectIntl(AddSampleTestComments) ;\r\n"]},"metadata":{},"sourceType":"module"}