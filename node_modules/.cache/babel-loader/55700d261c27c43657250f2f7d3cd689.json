{"ast":null,"code":"var _jsxFileName = \"E:\\\\WorkingFolder\\\\React_Postgres\\\\ALPD\\\\branches\\\\SOURCE-513-PROD\\\\QuaLISWeb\\\\src\\\\pages\\\\dashboardtypes\\\\HomeDashBoard.jsx\";\nimport React from 'react';\nimport { Card, Modal, Button } from 'react-bootstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faSave } from '@fortawesome/free-solid-svg-icons';\nimport { connect } from 'react-redux';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport { toast } from 'react-toastify';\nimport { callService, crudMaster, getHomeDashBoard, updateStore, validateEsignCredential, filterColumnData, checkParametersAvailableForHomeDashBoard, getReportViewChildDataListForDashBoard, selectCheckBoxDashBoardView, getAllSelectionDashBoardView } from '../../actions';\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\nimport { formatInputDate, rearrangeDateFormat } from '../../components/CommonScript';\nimport { transactionStatus } from '../../components/Enumeration';\nimport HomeDashBoardRowColTemplate from '../dashboardtypes/HomeDashBoardRowColTemplate';\nimport DashBoardDynamicControls from './DashBoardDynamicControls';\nimport { ModalInner } from \"../../components/App.styles\";\n\nconst mapStateToProps = state => {\n  return {\n    Login: state.Login\n  };\n};\n\nclass HomeDashBoard extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.openModal = () => {\n      this.setState({\n        openModal: !this.state.openModal\n      });\n    };\n\n    this.closeModal = () => {\n      // this.setState({\n      //     openModal: false\n      // })\n      let openModalForHomeDashBoard = this.props.Login.openModalForHomeDashBoard;\n      openModalForHomeDashBoard = false;\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          openModalForHomeDashBoard\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onNumericInputOnChange = (value, name, item) => {\n      const selectedRecord = this.state.selectedRecord || {};\n      selectedRecord[name] = value;\n      const inputData = {\n        dashboarddesignconfig: item,\n        inputfielddata: { ...this.props.Login.inputFieldData,\n          [name]: value,\n          [name.concat(\"_componentcode\")]: item.ndesigncomponentcode,\n          [name.concat(\"_componentname\")]: item.sdesigncomponentname\n        },\n        parentcode: value.toString(),\n        parentid: item.ndashboarddesigncode,\n        userinfo: this.props.Login.userInfo,\n        ndashboardtypecode: this.props.Login.masterData.selectedDashBoardTypes.ndashboardtypecode\n      };\n      const inputParam = {\n        viewDashBoardDesignConfigList: this.props.Login.masterData.viewDashBoardDesignConfigList,\n        selectedRecord,\n        inputData\n      };\n      this.props.getReportViewChildDataListForDashBoard(inputParam);\n    };\n\n    this.onInputOnChange = (event, item) => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (event.target.type === 'checkbox') {\n        selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\n      } else {\n        selectedRecord[event.target.name] = event.target.value;\n      }\n\n      const inputData = {\n        dashboarddesignconfig: item,\n        inputfielddata: { ...this.props.Login.inputFieldData,\n          [event.target.name]: selectedRecord[event.target.name],\n          [event.target.name.concat(\"_componentcode\")]: item.ndesigncomponentcode,\n          [event.target.name.concat(\"_componentname\")]: item.sdesigncomponentname\n        },\n        parentcode: selectedRecord[event.target.name].toString(),\n        parentid: item.ndashboarddesigncode,\n        userinfo: this.props.Login.userInfo,\n        ndashboardtypecode: this.props.Login.masterData.selectedDashBoardTypes.ndashboardtypecode\n      };\n      const inputParam = {\n        viewDashBoardDesignConfigList: this.props.Login.masterData.viewDashBoardDesignConfigList,\n        selectedRecord,\n        inputData\n      };\n      this.props.getReportViewChildDataListForDashBoard(inputParam);\n    };\n\n    this.onComboChange = (comboData, fieldName, item) => {\n      //console.log(\"combo data:\", comboData, fieldName, item);\n      const selectedRecord = this.state.selectedRecord || {};\n      const selectedRecord2 = this.state.selectedRecord2 || {};\n      selectedRecord[fieldName] = comboData;\n      selectedRecord2[fieldName] = comboData === null ? -1 : comboData.value;\n      const inputData = {\n        dashboarddesignconfig: item,\n        inputfielddata: { ...this.props.Login.inputFieldData,\n          [fieldName]: comboData === null ? -1 : comboData.value,\n          [fieldName.concat(\"_componentcode\")]: item.ndesigncomponentcode,\n          [fieldName.concat(\"_componentname\")]: item.sdesigncomponentname\n        },\n        parentcode: comboData === null ? \"-1\" : comboData.value.toString(),\n        parentid: item.ndashboarddesigncode,\n        userinfo: this.props.Login.userInfo,\n        ndashboardtypecode: this.props.Login.masterData.selectedDashBoardTypes.ndashboardtypecode\n      };\n      const inputParam = {\n        viewDashBoardDesignConfigList: this.props.Login.masterData.viewDashBoardDesignConfigList,\n        selectedRecord,\n        inputData\n      };\n      this.props.getReportViewChildDataListForDashBoard(inputParam);\n    };\n\n    this.handleDateChange = (dateName, dateValue, item) => {\n      const {\n        selectedRecord\n      } = this.state;\n      const selectedRecord2 = this.state.selectedRecord2 || {};\n\n      if (dateValue === null) {\n        // dateValue = new Date(item.dataList[0]);\n        dateValue = rearrangeDateFormat(this.props.Login.userInfo, item.dataList[0]);\n      }\n\n      selectedRecord[dateName] = dateValue;\n      selectedRecord2[dateName] = dateValue;\n      const inputData = {\n        dashboarddesignconfig: item,\n        inputfielddata: { ...this.props.Login.inputFieldData,\n          [dateName]: formatInputDate(dateValue, true),\n          [dateName.concat(\"_componentcode\")]: item.ndesigncomponentcode,\n          [dateName.concat(\"_componentname\")]: item.sdesigncomponentname\n        },\n        parentcode: formatInputDate(dateValue, true),\n        parentid: item.ndashboarddesigncode,\n        userinfo: this.props.Login.userInfo,\n        ndashboardtypecode: this.props.Login.masterData.selectedDashBoardTypes.ndashboardtypecode\n      };\n      const inputParam = {\n        viewDashBoardDesignConfigList: this.props.Login.masterData.viewDashBoardDesignConfigList,\n        selectedRecord,\n        inputData\n      };\n      this.props.getReportViewChildDataListForDashBoard(inputParam);\n    };\n\n    this.onSaveClick = (saveType, formRef) => {\n      const inputFieldData = this.props.Login.inputFieldData;\n      const failedControls = [];\n      const startLabel = [];\n      let label = \"IDS_ENTER\";\n      let mandatoryFields = []; // console.log(\"this.state.selectedRecord:\", this.state.selectedRecord);\n\n      const fieldList = this.props.Login.masterData.viewDashBoardDesignConfigList || [];\n      fieldList.forEach(item => {\n        if (item.nmandatory === transactionStatus.YES) {\n          //if (item.ndesigncomponentcode !== designComponents.PATH ){\n          mandatoryFields.push({\n            \"idsName\": item.sdisplayname,\n            \"dataField\": item.sfieldname,\n            \"mandatoryLabel\": \"IDS_PROVIDE\",\n            \"controlType\": \"textbox\"\n          });\n        }\n      });\n      mandatoryFields.forEach(item => {\n        if (this.state.selectedRecord[item.dataField] === undefined || this.state.selectedRecord[item.dataField] === null) {\n          const alertMessage = (item.alertPreFix ? item.alertPreFix : '') + this.props.intl.formatMessage({\n            id: item.idsName\n          }) + (item.alertSuffix ? item.alertSuffix : '');\n          failedControls.push(alertMessage);\n          startLabel.push(item.mandatoryLabel); //\"IDS_PROVIDE\";\n        } else {\n          if (item.validateFunction) {\n            const validateData = item.validateFunction;\n\n            if (validateData(this.state.selectedRecord[item.dataField]) === false) {\n              const alertMessage = (item.alertPreFix ? item.alertPreFix + \" \" : '') + this.props.intl.formatMessage({\n                id: item.idsName\n              }) + (item.alertSuffix ? \" \" + item.alertSuffix : '');\n              failedControls.push(alertMessage);\n              startLabel.push(item.mandatoryLabel);\n            }\n          } else {\n            if (typeof this.state.selectedRecord[item.dataField] === \"object\") {\n              //to validate FormSelectSearch component\n              if (this.state.selectedRecord[item.dataField].length === 0) {\n                const alertMessage = (item.alertPreFix ? item.alertPreFix : '') + this.props.intl.formatMessage({\n                  id: item.idsName\n                }) + (item.alertSuffix ? item.alertSuffix : '');\n                failedControls.push(alertMessage);\n                startLabel.push(item.mandatoryLabel); //\"IDS_SELECT\";\n              }\n            } else if (typeof this.state.selectedRecord[item.dataField] === \"string\") {\n              //to handle string field -- added trim function\n              if (this.state.selectedRecord[item.dataField].trim().length === 0) {\n                const alertMessage = (item.alertPreFix ? item.alertPreFix : '') + this.props.intl.formatMessage({\n                  id: item.idsName\n                }) + (item.alertSuffix ? item.alertSuffix : '');\n                failedControls.push(alertMessage);\n                startLabel.push(item.mandatoryLabel);\n              }\n            } else {\n              //number field\n              if (this.state.selectedRecord[item.dataField].length === 0) {\n                const alertMessage = (item.alertPreFix ? item.alertPreFix : '') + this.props.intl.formatMessage({\n                  id: item.idsName\n                }) + (item.alertSuffix ? item.alertSuffix : '');\n                failedControls.push(alertMessage);\n                startLabel.push(item.mandatoryLabel);\n              }\n            }\n          }\n        }\n      });\n\n      if (failedControls.length === 0) {\n        const inputParam = {\n          dashboardtypes: this.props.Login.masterData.selectedDashBoardTypes,\n          inputfielddata: inputFieldData,\n          userinfo: this.props.Login.userInfo\n        }; //console.log(\"inputParam:\", inputParam);\n\n        this.props.selectCheckBoxDashBoardView(\"HomeDashBoard\", this.state.selectedRecord, this.props.Login.masterData, inputParam, this.props.Login.dashBoardTemplateNo, this.props.Login.templateCode, this.props.Login.homeDashBoard, this.props.Login.currentPageNo);\n      } else {\n        //toast.info(`${this.props.intl.formatMessage({id:\"IDS_ENTER\"})} ${failedControls.join(\",\")}`);\n        label = startLabel[0] === undefined ? label : startLabel[0];\n        toast.info(`${this.props.intl.formatMessage({\n          id: label\n        })} ${failedControls[0]}`);\n      }\n    };\n\n    this.validateEsign = () => {\n      const inputParam = {\n        inputData: {\n          \"userinfo\": { ...this.props.Login.userInfo,\n            sreason: this.state.selectedRecord[\"esigncomments\"],\n            nreasoncode: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].value,\n            spredefinedreason: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].label\n          },\n          password: this.state.selectedRecord[\"esignpassword\"]\n        },\n        screenData: this.props.Login.screenData\n      };\n      this.props.validateEsignCredential(inputParam, \"openModal\");\n    };\n\n    this.formRef = React.createRef();\n    this.extractedColumnList = [];\n    this.gridColumnList = [];\n    this.state = {\n      selectedRecord: {},\n      controlMap: new Map(),\n      userRoleControlRights: [],\n      currentPageNo: 0,\n      openModal: false\n    };\n    this.searchRef = React.createRef();\n  }\n\n  render() {\n    //console.log(\"home dashbaord screen:\", this.props.Login);\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"client-listing-wrap\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(HomeDashBoardRowColTemplate, {\n      userInfo: this.props.Login.userInfo,\n      masterData: this.props.Login.masterData,\n      homeDashBoard: this.props.Login.homeDashBoard && this.props.Login.homeDashBoard[this.props.Login.currentPageNo],\n      checkParametersAvailable: this.props.checkParametersAvailableForHomeDashBoard,\n      selectedRecord: this.props.Login.selectedRecordRealValue || {},\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 21\n      }\n    })), this.props.Login.openModalForHomeDashBoard &&\n    /*#__PURE__*/\n    // \n    React.createElement(Modal, {\n      show: this.props.Login.openModalForHomeDashBoard,\n      onHide: this.closeModal,\n      backdrop: \"static\",\n      className: \"dashboard-parameter\",\n      dialogClassName: \"freakerstop\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Modal.Header, {\n      className: \"d-flex align-items-center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Modal.Title, {\n      id: \"create-password\",\n      className: \"header-primary flex-grow-1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_PARAMETERS\",\n      defaultMessage: \"Parameter\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 33\n      }\n    })), /*#__PURE__*/React.createElement(Button, {\n      className: \"btn-user btn-cancel\",\n      variant: \"\",\n      onClick: this.closeModal,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_CANCEL\",\n      defaultMessage: \"Cancel\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 33\n      }\n    })), /*#__PURE__*/React.createElement(Button, {\n      className: \"btn-user btn-primary-blue\",\n      onClick: this.onSaveClick,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faSave,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 33\n      }\n    }), \" \", /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_SUBMIT\",\n      defaultMessage: \"Submit\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 33\n      }\n    }))), /*#__PURE__*/React.createElement(Modal.Body, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(ModalInner, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Card.Body, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(DashBoardDynamicControls, {\n      selectedRecord: this.props.Login.selectedRecord || {},\n      onInputOnChange: this.onInputOnChange,\n      onNumericInputOnChange: this.onNumericInputOnChange,\n      onComboChange: this.onComboChange,\n      handleDateChange: this.handleDateChange,\n      viewDashBoardDesignConfigList: this.props.Login.masterData.viewDashBoardDesignConfigList || [] // operation={this.props.Login.operation}\n      ,\n      operation: \"filter\",\n      inputParam: this.props.Login.inputParam,\n      userInfo: this.props.Login.userInfo,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 37\n      }\n    }))))));\n  }\n\n  componentDidUpdate(previousProps) {\n    if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\n      this.setState({\n        selectedRecord: this.props.Login.selectedRecord\n      });\n    }\n\n    if (this.props.Login.openModalForHomeDashBoard !== previousProps.Login.openModalForHomeDashBoard) {\n      this.setState({\n        openModal: this.props.Login.openModalForHomeDashBoard\n      });\n    }\n  }\n\n}\n\nexport default connect(mapStateToProps, {\n  callService,\n  crudMaster,\n  getHomeDashBoard,\n  updateStore,\n  validateEsignCredential,\n  filterColumnData,\n  checkParametersAvailableForHomeDashBoard,\n  getReportViewChildDataListForDashBoard,\n  selectCheckBoxDashBoardView,\n  getAllSelectionDashBoardView\n})(injectIntl(HomeDashBoard));","map":{"version":3,"sources":["E:/WorkingFolder/React_Postgres/ALPD/branches/SOURCE-513-PROD/QuaLISWeb/src/pages/dashboardtypes/HomeDashBoard.jsx"],"names":["React","Card","Modal","Button","FontAwesomeIcon","faSave","connect","FormattedMessage","injectIntl","toast","callService","crudMaster","getHomeDashBoard","updateStore","validateEsignCredential","filterColumnData","checkParametersAvailableForHomeDashBoard","getReportViewChildDataListForDashBoard","selectCheckBoxDashBoardView","getAllSelectionDashBoardView","DEFAULT_RETURN","formatInputDate","rearrangeDateFormat","transactionStatus","HomeDashBoardRowColTemplate","DashBoardDynamicControls","ModalInner","mapStateToProps","state","Login","HomeDashBoard","Component","constructor","props","openModal","setState","closeModal","openModalForHomeDashBoard","updateInfo","typeName","data","onNumericInputOnChange","value","name","item","selectedRecord","inputData","dashboarddesignconfig","inputfielddata","inputFieldData","concat","ndesigncomponentcode","sdesigncomponentname","parentcode","toString","parentid","ndashboarddesigncode","userinfo","userInfo","ndashboardtypecode","masterData","selectedDashBoardTypes","inputParam","viewDashBoardDesignConfigList","onInputOnChange","event","target","type","checked","YES","NO","onComboChange","comboData","fieldName","selectedRecord2","handleDateChange","dateName","dateValue","dataList","onSaveClick","saveType","formRef","failedControls","startLabel","label","mandatoryFields","fieldList","forEach","nmandatory","push","sdisplayname","sfieldname","dataField","undefined","alertMessage","alertPreFix","intl","formatMessage","id","idsName","alertSuffix","mandatoryLabel","validateFunction","validateData","length","trim","dashboardtypes","dashBoardTemplateNo","templateCode","homeDashBoard","currentPageNo","info","validateEsign","sreason","nreasoncode","spredefinedreason","password","screenData","createRef","extractedColumnList","gridColumnList","controlMap","Map","userRoleControlRights","searchRef","render","selectedRecordRealValue","componentDidUpdate","previousProps"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { Card, Modal, Button } from 'react-bootstrap';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faSave } from '@fortawesome/free-solid-svg-icons';\r\nimport { connect } from 'react-redux';\r\nimport { FormattedMessage, injectIntl } from 'react-intl';\r\nimport { toast } from 'react-toastify';\r\nimport {\r\n    callService, crudMaster, getHomeDashBoard,\r\n    updateStore, validateEsignCredential, filterColumnData, checkParametersAvailableForHomeDashBoard,\r\n    getReportViewChildDataListForDashBoard, selectCheckBoxDashBoardView,\r\n    getAllSelectionDashBoardView\r\n} from '../../actions';\r\n\r\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\r\nimport { formatInputDate, rearrangeDateFormat } from '../../components/CommonScript';\r\nimport { transactionStatus } from '../../components/Enumeration';\r\nimport HomeDashBoardRowColTemplate from '../dashboardtypes/HomeDashBoardRowColTemplate';\r\nimport DashBoardDynamicControls from './DashBoardDynamicControls';\r\nimport { ModalInner } from \"../../components/App.styles\";\r\n\r\nconst mapStateToProps = state => {\r\n    return ({ Login: state.Login })\r\n}\r\n\r\nclass HomeDashBoard extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.formRef = React.createRef();\r\n        this.extractedColumnList = [];\r\n        this.gridColumnList = [];\r\n\r\n        this.state = {\r\n            selectedRecord: {},\r\n            controlMap: new Map(), userRoleControlRights: [],\r\n            currentPageNo: 0,\r\n            openModal: false\r\n        }\r\n        this.searchRef = React.createRef();\r\n    }\r\n\r\n    openModal = () => {\r\n        this.setState({\r\n            openModal: !this.state.openModal\r\n        })\r\n    }\r\n\r\n    closeModal = () => {\r\n        // this.setState({\r\n        //     openModal: false\r\n        // })\r\n        let openModalForHomeDashBoard = this.props.Login.openModalForHomeDashBoard;\r\n        openModalForHomeDashBoard = false;\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { openModalForHomeDashBoard }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    render() {\r\n\r\n        //console.log(\"home dashbaord screen:\", this.props.Login);\r\n        return (\r\n            <>\r\n                <div className=\"client-listing-wrap\">\r\n                    <HomeDashBoardRowColTemplate\r\n                        userInfo={this.props.Login.userInfo}\r\n                        masterData={this.props.Login.masterData}\r\n                        homeDashBoard={this.props.Login.homeDashBoard && this.props.Login.homeDashBoard[this.props.Login.currentPageNo]}\r\n                        checkParametersAvailable={this.props.checkParametersAvailableForHomeDashBoard}\r\n                        selectedRecord={this.props.Login.selectedRecordRealValue || {}}\r\n                    />\r\n                </div>\r\n                {this.props.Login.openModalForHomeDashBoard &&\r\n                    // \r\n                    <Modal show={this.props.Login.openModalForHomeDashBoard}\r\n                        onHide={this.closeModal} backdrop=\"static\" className=\"dashboard-parameter\" dialogClassName=\"freakerstop\">\r\n                        <Modal.Header className=\"d-flex align-items-center\">\r\n                            <Modal.Title id=\"create-password\" className=\"header-primary flex-grow-1\">\r\n                                <FormattedMessage id={\"IDS_PARAMETERS\"} defaultMessage=\"Parameter\" />\r\n                            </Modal.Title>\r\n                            <Button className=\"btn-user btn-cancel\" variant=\"\" onClick={this.closeModal}>\r\n                                <FormattedMessage id='IDS_CANCEL' defaultMessage='Cancel' />\r\n                            </Button>\r\n                            <Button className=\"btn-user btn-primary-blue\" onClick={this.onSaveClick}>\r\n                                <FontAwesomeIcon icon={faSave} /> { }\r\n                                <FormattedMessage id='IDS_SUBMIT' defaultMessage='Submit' />\r\n                            </Button>\r\n                        </Modal.Header>\r\n                        <Modal.Body>\r\n                            <ModalInner>\r\n                                <Card.Body>\r\n                                    <DashBoardDynamicControls\r\n                                        selectedRecord={this.props.Login.selectedRecord || {}}\r\n                                        onInputOnChange={this.onInputOnChange}\r\n                                        onNumericInputOnChange={this.onNumericInputOnChange}\r\n                                        onComboChange={this.onComboChange}\r\n                                        handleDateChange={this.handleDateChange}\r\n                                        viewDashBoardDesignConfigList={this.props.Login.masterData.viewDashBoardDesignConfigList || []}\r\n                                       // operation={this.props.Login.operation}\r\n                                        operation={\"filter\"}\r\n                                        inputParam={this.props.Login.inputParam}\r\n                                        userInfo={this.props.Login.userInfo}\r\n                                    />\r\n                                </Card.Body>\r\n                            </ModalInner>\r\n                        </Modal.Body>\r\n                    </Modal>\r\n                }\r\n            </>\r\n        );\r\n\r\n    }\r\n\r\n    onNumericInputOnChange = (value, name, item) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n\r\n        selectedRecord[name] = value;\r\n\r\n        const inputData = {\r\n            dashboarddesignconfig: item,\r\n            inputfielddata: {\r\n                ...this.props.Login.inputFieldData,\r\n                [name]: value,\r\n                [name.concat(\"_componentcode\")]: item.ndesigncomponentcode,\r\n                [name.concat(\"_componentname\")]: item.sdesigncomponentname,\r\n\r\n            },\r\n            parentcode: value.toString(),\r\n            parentid: item.ndashboarddesigncode,\r\n            userinfo: this.props.Login.userInfo,\r\n            ndashboardtypecode: this.props.Login.masterData.selectedDashBoardTypes.ndashboardtypecode,\r\n\r\n        }\r\n        const inputParam = {\r\n            viewDashBoardDesignConfigList: this.props.Login.masterData.viewDashBoardDesignConfigList,\r\n            selectedRecord,\r\n            inputData\r\n        }\r\n\r\n        this.props.getReportViewChildDataListForDashBoard(inputParam);\r\n    }\r\n\r\n    onInputOnChange = (event, item) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n\r\n        if (event.target.type === 'checkbox') {\r\n            selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\r\n        }\r\n        else {\r\n            selectedRecord[event.target.name] = event.target.value;\r\n        }\r\n\r\n        const inputData = {\r\n            dashboarddesignconfig: item,\r\n            inputfielddata: {\r\n                ...this.props.Login.inputFieldData,\r\n                [event.target.name]: selectedRecord[event.target.name],\r\n                [event.target.name.concat(\"_componentcode\")]: item.ndesigncomponentcode,\r\n                [event.target.name.concat(\"_componentname\")]: item.sdesigncomponentname,\r\n\r\n            },\r\n            parentcode: selectedRecord[event.target.name].toString(),\r\n            parentid: item.ndashboarddesigncode,\r\n            userinfo: this.props.Login.userInfo,\r\n            ndashboardtypecode: this.props.Login.masterData.selectedDashBoardTypes.ndashboardtypecode,\r\n\r\n        }\r\n        const inputParam = {\r\n            viewDashBoardDesignConfigList: this.props.Login.masterData.viewDashBoardDesignConfigList,\r\n            selectedRecord,\r\n            inputData\r\n        }\r\n\r\n        this.props.getReportViewChildDataListForDashBoard(inputParam);\r\n    }\r\n\r\n    // onComboChange = (comboData, fieldName, item) => {\r\n    //     const selectedRecord = this.state.selectedRecord || {};\r\n\r\n    //     selectedRecord[fieldName] = comboData;\r\n\r\n    //     if (comboData != null){\r\n\r\n    //         const inputData = {\r\n    //             dashboarddesignconfig: item,\r\n    //             inputfielddata: {\r\n    //                 ...this.props.Login.inputFieldData,\r\n    //                 [fieldName]: comboData.value,\r\n    //                 [fieldName.concat(\"_componentcode\")]: item.ndesigncomponentcode,\r\n    //                 [fieldName.concat(\"_componentname\")]: item.sdesigncomponentname,\r\n\r\n    //             },\r\n    //             parentcode: comboData.value.toString(),\r\n    //             parentid: item.ndashboarddesigncode,\r\n    //             userinfo: this.props.Login.userInfo,\r\n    //             ndashboardtypecode: this.props.Login.masterData.selectedDashBoardTypes.ndashboardtypecode,\r\n\r\n    //         }\r\n    //         const inputParam = {\r\n    //             viewDashBoardDesignConfigList: this.props.Login.masterData.viewDashBoardDesignConfigList,\r\n    //             selectedRecord,\r\n    //             inputData\r\n    //         }\r\n\r\n    //         this.props.getReportViewChildDataListForDashBoard(inputParam);\r\n    //     }\r\n    // }\r\n\r\n    onComboChange = (comboData, fieldName, item) => {\r\n        //console.log(\"combo data:\", comboData, fieldName, item);\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        const selectedRecord2 = this.state.selectedRecord2 || {};\r\n        selectedRecord[fieldName] = comboData;\r\n        selectedRecord2[fieldName] = comboData === null ? -1 : comboData.value;\r\n        const inputData = {\r\n            dashboarddesignconfig: item,\r\n            inputfielddata: {\r\n                ...this.props.Login.inputFieldData,\r\n                [fieldName]: comboData === null ? -1 : comboData.value,\r\n                [fieldName.concat(\"_componentcode\")]: item.ndesigncomponentcode,\r\n                [fieldName.concat(\"_componentname\")]: item.sdesigncomponentname,\r\n\r\n            },\r\n            parentcode: comboData === null ? \"-1\" : comboData.value.toString(),\r\n            parentid: item.ndashboarddesigncode,\r\n            userinfo: this.props.Login.userInfo,\r\n            ndashboardtypecode: this.props.Login.masterData.selectedDashBoardTypes.ndashboardtypecode,\r\n\r\n        }\r\n        const inputParam = {\r\n            viewDashBoardDesignConfigList: this.props.Login.masterData.viewDashBoardDesignConfigList,\r\n            selectedRecord,\r\n            inputData\r\n        }\r\n\r\n        this.props.getReportViewChildDataListForDashBoard(inputParam);\r\n    }\r\n\r\n    // handleDateChange = (dateName, dateValue, item) => {\r\n    //     const { selectedRecord } = this.state;\r\n       \r\n    //     if (dateValue === null){\r\n    //         dateValue = new Date(item.dataList[0]);\r\n    //     }\r\n\r\n    //     selectedRecord[dateName] = dateValue;      \r\n     \r\n    //     const inputData = {\r\n    //         dashboarddesignconfig: item,\r\n    //         inputfielddata: {\r\n    //             ...this.props.Login.inputFieldData,\r\n    //             [dateName]: formatInputDate(dateValue, true),\r\n    //             [dateName.concat(\"_componentcode\")]: item.ndesigncomponentcode,\r\n    //             [dateName.concat(\"_componentname\")]: item.sdesigncomponentname,\r\n\r\n    //         },\r\n    //         parentcode: formatInputDate(dateValue, true),\r\n    //         parentid: item.ndashboarddesigncode,\r\n    //         userinfo: this.props.Login.userInfo,\r\n    //         ndashboardtypecode: this.props.Login.masterData.selectedDashBoardTypes.ndashboardtypecode,\r\n\r\n    //     }\r\n    //     const inputParam = {\r\n    //         viewDashBoardDesignConfigList: this.props.Login.masterData.viewDashBoardDesignConfigList,\r\n    //         selectedRecord,\r\n    //         inputData\r\n    //     }\r\n\r\n    //     this.props.getReportViewChildDataListForDashBoard(inputParam);\r\n        \r\n    // }\r\n\r\n    handleDateChange = (dateName, dateValue, item) => {\r\n        const { selectedRecord } = this.state;\r\n        const selectedRecord2 = this.state.selectedRecord2 || {};\r\n\r\n        if (dateValue === null){\r\n            // dateValue = new Date(item.dataList[0]);\r\n            dateValue = rearrangeDateFormat(this.props.Login.userInfo,item.dataList[0]);\r\n        }\r\n\r\n        selectedRecord[dateName] = dateValue;\r\n        selectedRecord2[dateName] = dateValue;\r\n        \r\n        const inputData = {\r\n            dashboarddesignconfig: item,\r\n            inputfielddata: {\r\n                ...this.props.Login.inputFieldData,\r\n                [dateName]: formatInputDate(dateValue, true),\r\n                [dateName.concat(\"_componentcode\")]: item.ndesigncomponentcode,\r\n                [dateName.concat(\"_componentname\")]: item.sdesigncomponentname,\r\n\r\n            },\r\n            parentcode: formatInputDate(dateValue, true),\r\n            parentid: item.ndashboarddesigncode,\r\n            userinfo: this.props.Login.userInfo,\r\n            ndashboardtypecode: this.props.Login.masterData.selectedDashBoardTypes.ndashboardtypecode,\r\n\r\n        }\r\n        const inputParam = {\r\n            viewDashBoardDesignConfigList: this.props.Login.masterData.viewDashBoardDesignConfigList,\r\n            selectedRecord,\r\n            inputData\r\n        }\r\n\r\n        this.props.getReportViewChildDataListForDashBoard(inputParam);\r\n    }\r\n\r\n    onSaveClick = (saveType, formRef) => {\r\n        const inputFieldData = this.props.Login.inputFieldData;\r\n\r\n        const failedControls = [];\r\n        const startLabel = [];\r\n        let label = \"IDS_ENTER\";\r\n        let mandatoryFields = [];\r\n\r\n       // console.log(\"this.state.selectedRecord:\", this.state.selectedRecord);\r\n\r\n        const fieldList = this.props.Login.masterData.viewDashBoardDesignConfigList || [];\r\n        fieldList.forEach(item => {\r\n            if (item.nmandatory === transactionStatus.YES){\r\n            //if (item.ndesigncomponentcode !== designComponents.PATH ){\r\n                mandatoryFields.push({ \"idsName\": item.sdisplayname, \"dataField\": item.sfieldname  , \"mandatoryLabel\":\"IDS_PROVIDE\", \"controlType\": \"textbox\"})\r\n            }\r\n        });\r\n\r\n        mandatoryFields.forEach(item => {\r\n            if (this.state.selectedRecord[item.dataField] === undefined || this.state.selectedRecord[item.dataField] === null)\r\n            {\r\n                const alertMessage = (item.alertPreFix ? item.alertPreFix : '') + this.props.intl.formatMessage({ id: item.idsName }) + (item.alertSuffix ? item.alertSuffix : '')\r\n                failedControls.push(alertMessage);\r\n                startLabel.push(item.mandatoryLabel)//\"IDS_PROVIDE\";\r\n            }\r\n            else {\r\n                if (item.validateFunction) {\r\n                    const validateData = item.validateFunction;\r\n                    if (validateData(this.state.selectedRecord[item.dataField]) === false) {\r\n                        const alertMessage = (item.alertPreFix ? item.alertPreFix + \" \" : '') + this.props.intl.formatMessage({ id: item.idsName }) + (item.alertSuffix ? \" \" + item.alertSuffix : '')\r\n                        failedControls.push(alertMessage);\r\n                        startLabel.push(item.mandatoryLabel)\r\n                    }\r\n                }\r\n                else {\r\n                    if (typeof this.state.selectedRecord[item.dataField] === \"object\") {\r\n                        //to validate FormSelectSearch component\r\n                        if (this.state.selectedRecord[item.dataField].length === 0) {\r\n                            const alertMessage = (item.alertPreFix ? item.alertPreFix : '') + this.props.intl.formatMessage({ id: item.idsName }) + (item.alertSuffix ? item.alertSuffix : '')\r\n                            failedControls.push(alertMessage);\r\n                            startLabel.push(item.mandatoryLabel)//\"IDS_SELECT\";\r\n                        }\r\n                    }\r\n                    else if (typeof this.state.selectedRecord[item.dataField] === \"string\") {\r\n                        //to handle string field -- added trim function\r\n                        if (this.state.selectedRecord[item.dataField].trim().length === 0) {\r\n                            const alertMessage = (item.alertPreFix ? item.alertPreFix : '') + this.props.intl.formatMessage({ id: item.idsName }) + (item.alertSuffix ? item.alertSuffix : '')\r\n                            failedControls.push(alertMessage);\r\n                            startLabel.push(item.mandatoryLabel)\r\n                        }\r\n                    }\r\n                    else {\r\n                        //number field\r\n                        if (this.state.selectedRecord[item.dataField].length === 0) {\r\n                            const alertMessage = (item.alertPreFix ? item.alertPreFix : '') + this.props.intl.formatMessage({ id: item.idsName }) + (item.alertSuffix ? item.alertSuffix : '')\r\n                            failedControls.push(alertMessage);\r\n                            startLabel.push(item.mandatoryLabel)\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        });\r\n\r\n        if (failedControls.length === 0) {\r\n            const inputParam = {\r\n                dashboardtypes: this.props.Login.masterData.selectedDashBoardTypes,\r\n                inputfielddata: inputFieldData,\r\n                userinfo: this.props.Login.userInfo\r\n            }\r\n            //console.log(\"inputParam:\", inputParam);\r\n            this.props.selectCheckBoxDashBoardView(\"HomeDashBoard\", this.state.selectedRecord, this.props.Login.masterData, inputParam, this.props.Login.dashBoardTemplateNo,\r\n                this.props.Login.templateCode, this.props.Login.homeDashBoard, this.props.Login.currentPageNo);\r\n        }\r\n        else {\r\n            //toast.info(`${this.props.intl.formatMessage({id:\"IDS_ENTER\"})} ${failedControls.join(\",\")}`);\r\n            label = startLabel[0] === undefined ? label :startLabel[0];\r\n            toast.info(`${this.props.intl.formatMessage({ id: label })} ${failedControls[0]}`);          \r\n        }\r\n    }\r\n\r\n    componentDidUpdate(previousProps) {\r\n        if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\r\n            this.setState({ selectedRecord: this.props.Login.selectedRecord });\r\n        }\r\n        if (this.props.Login.openModalForHomeDashBoard !== previousProps.Login.openModalForHomeDashBoard) {\r\n            this.setState({ openModal: this.props.Login.openModalForHomeDashBoard });\r\n        }\r\n    }\r\n\r\n    validateEsign = () => {\r\n        const inputParam = {\r\n            inputData: {\r\n                \"userinfo\": {\r\n                    ...this.props.Login.userInfo,\r\n                    sreason: this.state.selectedRecord[\"esigncomments\"],\r\n                    nreasoncode:this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].value,\r\n                    spredefinedreason:this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].label,\r\n               \r\n                },\r\n                password: this.state.selectedRecord[\"esignpassword\"]\r\n            },\r\n            screenData: this.props.Login.screenData\r\n        }\r\n        this.props.validateEsignCredential(inputParam, \"openModal\");\r\n    }\r\n\r\n}\r\n\r\nexport default connect(mapStateToProps, {\r\n    callService, crudMaster, getHomeDashBoard, updateStore,\r\n    validateEsignCredential, filterColumnData, checkParametersAvailableForHomeDashBoard,\r\n    getReportViewChildDataListForDashBoard, selectCheckBoxDashBoardView,\r\n    getAllSelectionDashBoardView\r\n})(injectIntl(HomeDashBoard));"]},"metadata":{},"sourceType":"module"}