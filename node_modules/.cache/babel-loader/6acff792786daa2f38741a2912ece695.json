{"ast":null,"code":"import Axios from \"axios\";\nimport { toast } from \"react-toastify\";\nimport { constructOptionList, sortData } from \"../components/CommonScript\";\nimport { transactionStatus } from \"../components/Enumeration\";\nimport rsapi from \"../rsapi\";\nimport { initRequest } from \"./LoginAction\";\nimport { intl } from '../components/App';\nimport { DEFAULT_RETURN } from \"./LoginTypes\";\nexport function getSeqNoFormats(inputObj) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    let URL = [rsapi.post('/registrationsubtype/getAllSeqNoFormats', {\n      userinfo: inputObj.userInfo\n    })];\n    URL.push(rsapi.post('/registrationsubtype/getPeriods', {\n      userinfo: inputObj.userInfo\n    }));\n    Axios.all(URL).then(response => {\n      let periodList = constructOptionList(response[1].data || [], 'nperiodcode', 'speriodname').get(\"OptionList\");\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          existingFormats: response[0].data,\n          periodList,\n          openModal: true,\n          loading: false,\n          operation: 'create',\n          screenName: \"Version\",\n          ncontrolcode: inputObj.ncontrolcode\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getRegistrationSubTypeOnReload(userInfo) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post('registrationsubtype/getRegistrationSubType', {\n      userinfo: userInfo\n    }).then(res => {\n      let masterData = { ...res.data\n      };\n      sortData(masterData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false,\n          reloadData: true\n        }\n      });\n    }).catch(err => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n      if (err.response.status === 500) toast.error(err.message);else toast.warn(err.response.data);\n    });\n  };\n}\nexport function getRegistrationSubTypeMaster(selectedSampleType, selectedRegType, masterData, userInfo) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post('registrationsubtype/getRegistrationSubTypeMaster', {\n      nregtypecode: selectedRegType.value,\n      userinfo: userInfo\n    }).then(response => {\n      masterData = { ...masterData,\n        ...response.data\n      };\n      sortData(masterData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          realSampleType: selectedSampleType,\n          realRegtype: selectedRegType,\n          loading: false\n        }\n      });\n    }).catch(err => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n      if (err.response.status === 500) toast.error(err.message);else toast.warn(err.response.data);\n    });\n  };\n}\nexport function selectRegistrationSubType(selectedRegSubType, masterData, userInfo) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post('/registrationsubtype/getRegistrationSubTypeById', {\n      nregsubtypecode: selectedRegSubType.nregsubtypecode,\n      userinfo: userInfo\n    }).then(response => {\n      masterData = { ...masterData,\n        ...response.data,\n        selectedRegistrationSubType: selectedRegSubType\n      };\n      sortData(masterData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false\n        }\n      });\n    }).catch(err => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n      if (err.response.status === 500) toast.error(err.message);else toast.warn(err.response.data);\n    });\n  };\n}\nexport function getEditRegSubType(nregsubtypecode, userInfo, ncontrolcode) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post('/registrationsubtype/getEditRegSubType', {\n      nregsubtypecode,\n      userinfo: userInfo\n    }).then(response => {\n      let selectedRecord = {\n        nregsubtypecode: response.data.nregsubtypecode,\n        nregtypecode: response.data.nregtypecode,\n        ...response.data.jsondata\n      };\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          selectedRecord,\n          loading: false,\n          openModal: true,\n          screenName: \"IDS_REGISTRATIONSUBTYPE\",\n          ncontrolcode,\n          operation: \"update\"\n        }\n      });\n    }).catch(err => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n      if (err.response.status === 500) toast.error(err.message);else toast.warn(err.response.data);\n    });\n  };\n}\nexport function getRegSubTypeDetails(inputObj) {\n  let {\n    version,\n    masterData,\n    userInfo\n  } = inputObj;\n  return function (dispatch) {\n    if (!(masterData.selectedVersion.nregsubtypeversioncode === version.nregsubtypeversioncode)) {\n      dispatch(initRequest(true));\n      rsapi.post('registrationsubtype/getVersionDetails', {\n        userinfo: userInfo,\n        nregsubtypeversioncode: version.nregsubtypeversioncode\n      }).then(res => {\n        masterData = { ...masterData,\n          selectedVersion: res.data\n        };\n        sortData(masterData);\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            masterData,\n            loading: false\n          }\n        });\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(error.response.data);\n        }\n      });\n    }\n  };\n}\nexport function getVersionById(primaryKey, userInfo, ncontrolcode) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    let URL = [];\n    URL.push(rsapi.post('/registrationsubtype/getAllSeqNoFormats', {\n      userinfo: userInfo\n    }));\n    URL.push(rsapi.post('/registrationsubtype/getPeriods', {\n      userinfo: userInfo\n    }));\n    URL.push(rsapi.post('registrationsubtype/getVersionDetails', {\n      userinfo: userInfo,\n      nregsubtypeversioncode: primaryKey\n    }));\n    Axios.all(URL).then(res => {\n      if (res[2].data.ntransactionstatus === transactionStatus.DRAFT) {\n        let periodList = constructOptionList(res[1].data || [], 'nperiodcode', 'speriodname').get(\"OptionList\");\n        let nperiodcode = periodList.filter(period => period.value === res[2].data.nperiodcode);\n        let selectedRecord = {};\n        selectedRecord = { ...res[2].data.jsondata,\n          nperiodcode,\n          nregsubtypeversioncode: primaryKey\n        };\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            existingFormats: res[0].data,\n            periodList,\n            selectedRecord,\n            openModal: true,\n            operation: 'update',\n            ncontrolcode,\n            loading: false,\n            screenName: \"Version\"\n          }\n        });\n      } else {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false,\n            masterStatus: \"IDS_SELECTDRAFTRECORD\"\n          }\n        });\n      }\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getRegistrationTypeBySampleType(comboData, masterData, userInfo, realRegtype) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post('registrationtype/getRegistrationTypeBySampleType', {\n      nsampletypecode: comboData.value,\n      userinfo: userInfo\n    }).then(res => {\n      masterData = { ...masterData,\n        RegistrationTypes: res.data\n      };\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          selectedSampleType: comboData,\n          realRegtype,\n          loading: false,\n          reloadData: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/actions/RegistrationSubTypeAction.js"],"names":["Axios","toast","constructOptionList","sortData","transactionStatus","rsapi","initRequest","intl","DEFAULT_RETURN","getSeqNoFormats","inputObj","dispatch","URL","post","userinfo","userInfo","push","all","then","response","periodList","data","get","type","payload","existingFormats","openModal","loading","operation","screenName","ncontrolcode","catch","error","status","message","warn","getRegistrationSubTypeOnReload","res","masterData","reloadData","err","getRegistrationSubTypeMaster","selectedSampleType","selectedRegType","nregtypecode","value","realSampleType","realRegtype","selectRegistrationSubType","selectedRegSubType","nregsubtypecode","selectedRegistrationSubType","getEditRegSubType","selectedRecord","jsondata","getRegSubTypeDetails","version","selectedVersion","nregsubtypeversioncode","getVersionById","primaryKey","ntransactionstatus","DRAFT","nperiodcode","filter","period","masterStatus","getRegistrationTypeBySampleType","comboData","nsampletypecode","RegistrationTypes"],"mappings":"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","sourcesContent":["import Axios from \"axios\";\r\nimport { toast } from \"react-toastify\";\r\nimport { constructOptionList, sortData } from \"../components/CommonScript\";\r\nimport { transactionStatus } from \"../components/Enumeration\";\r\nimport rsapi from \"../rsapi\"\r\nimport { initRequest } from \"./LoginAction\"\r\nimport { intl } from '../components/App';\r\nimport { DEFAULT_RETURN } from \"./LoginTypes\";\r\n\r\nexport function getSeqNoFormats(inputObj) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        let URL = [rsapi.post('/registrationsubtype/getAllSeqNoFormats', { userinfo: inputObj.userInfo })]\r\n        URL.push(rsapi.post('/registrationsubtype/getPeriods', { userinfo: inputObj.userInfo }))\r\n        Axios.all(URL)\r\n            .then(response => {\r\n                let periodList = constructOptionList(response[1].data || [], 'nperiodcode', 'speriodname').get(\"OptionList\")\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        existingFormats: response[0].data,\r\n                        periodList,\r\n                        openModal: true,\r\n                        loading: false,\r\n                        operation: 'create',\r\n                        screenName: \"Version\",\r\n                        ncontrolcode:inputObj.ncontrolcode\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function getRegistrationSubTypeOnReload(userInfo) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post('registrationsubtype/getRegistrationSubType', { userinfo: userInfo })\r\n            .then(res => {\r\n                let masterData = {\r\n                    ...res.data\r\n                }\r\n                sortData(masterData)\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData,\r\n                        loading: false,\r\n                        reloadData: true\r\n                    }\r\n                })\r\n            })\r\n            .catch(err => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: { loading: false }\r\n                })\r\n                if (err.response.status === 500)\r\n                    toast.error(err.message);\r\n                else\r\n                    toast.warn(err.response.data)\r\n            })\r\n    }\r\n}\r\nexport function getRegistrationSubTypeMaster(selectedSampleType, selectedRegType, masterData, userInfo) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post('registrationsubtype/getRegistrationSubTypeMaster', { nregtypecode: selectedRegType.value, userinfo: userInfo })\r\n            .then(response => {\r\n                masterData = {\r\n                    ...masterData,\r\n                    ...response.data\r\n                }\r\n                sortData(masterData);\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData,\r\n                        realSampleType: selectedSampleType,\r\n                        realRegtype: selectedRegType,\r\n                        loading: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(err => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: { loading: false }\r\n                })\r\n                if (err.response.status === 500)\r\n                    toast.error(err.message);\r\n                else\r\n                    toast.warn(err.response.data)\r\n            })\r\n    }\r\n}\r\nexport function selectRegistrationSubType(selectedRegSubType, masterData, userInfo) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post('/registrationsubtype/getRegistrationSubTypeById', { nregsubtypecode: selectedRegSubType.nregsubtypecode, userinfo: userInfo })\r\n            .then(response => {\r\n                masterData = {\r\n                    ...masterData,\r\n                    ...response.data,\r\n                    selectedRegistrationSubType: selectedRegSubType\r\n                }\r\n                sortData(masterData);\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData,\r\n                        loading: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(err => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: { loading: false }\r\n                })\r\n                if (err.response.status === 500)\r\n                    toast.error(err.message);\r\n                else\r\n                    toast.warn(err.response.data)\r\n            })\r\n    }\r\n}\r\nexport function getEditRegSubType(nregsubtypecode, userInfo, ncontrolcode) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post('/registrationsubtype/getEditRegSubType', { nregsubtypecode, userinfo: userInfo })\r\n            .then(response => {\r\n                let selectedRecord = {\r\n                    nregsubtypecode: response.data.nregsubtypecode,\r\n                    nregtypecode: response.data.nregtypecode,\r\n                    ...response.data.jsondata\r\n                }\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        selectedRecord,\r\n                        loading: false,\r\n                        openModal: true,\r\n                        screenName: \"IDS_REGISTRATIONSUBTYPE\",\r\n                        ncontrolcode,\r\n                        operation: \"update\"\r\n                    }\r\n                })\r\n            })\r\n            .catch(err => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: { loading: false }\r\n                })\r\n                if (err.response.status === 500)\r\n                    toast.error(err.message);\r\n                else\r\n                    toast.warn(err.response.data)\r\n            })\r\n    }\r\n}\r\nexport function getRegSubTypeDetails(inputObj) {\r\n    let { version, masterData, userInfo } = inputObj;\r\n    return function (dispatch) {\r\n        if (!(masterData.selectedVersion.nregsubtypeversioncode === version.nregsubtypeversioncode)) {\r\n            dispatch(initRequest(true));\r\n            rsapi.post('registrationsubtype/getVersionDetails', { userinfo: userInfo, nregsubtypeversioncode: version.nregsubtypeversioncode })\r\n                .then(res => {\r\n                    masterData = {\r\n                        ...masterData,\r\n                        selectedVersion: res.data\r\n                    }\r\n                    sortData(masterData);\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN, payload: {\r\n                            masterData,\r\n                            loading: false\r\n                        }\r\n                    });\r\n                })\r\n                .catch(error => {\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    }\r\n                    else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                })\r\n        }\r\n    }\r\n}\r\nexport function getVersionById(primaryKey, userInfo, ncontrolcode) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        let URL = []\r\n        URL.push(rsapi.post('/registrationsubtype/getAllSeqNoFormats', { userinfo: userInfo }))\r\n        URL.push(rsapi.post('/registrationsubtype/getPeriods', { userinfo: userInfo }))\r\n        URL.push(rsapi.post('registrationsubtype/getVersionDetails', { userinfo: userInfo, nregsubtypeversioncode: primaryKey }))\r\n        Axios.all(URL)\r\n            .then(res => {\r\n                if (res[2].data.ntransactionstatus === transactionStatus.DRAFT) {\r\n                    let periodList = constructOptionList(res[1].data || [], 'nperiodcode', 'speriodname').get(\"OptionList\")\r\n                    let nperiodcode = periodList.filter(period => period.value === res[2].data.nperiodcode)\r\n                    let selectedRecord = {}\r\n                    selectedRecord = {\r\n                        ...res[2].data.jsondata,\r\n                        nperiodcode,\r\n                        nregsubtypeversioncode: primaryKey\r\n                    }\r\n\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN, payload: {\r\n                            existingFormats: res[0].data,\r\n                            periodList,\r\n                            selectedRecord,\r\n                            openModal: true,\r\n                            operation: 'update',\r\n                            ncontrolcode,\r\n                            loading: false,\r\n                            screenName:\"Version\"\r\n                        }\r\n                    });\r\n                } else {\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false, masterStatus: \"IDS_SELECTDRAFTRECORD\" } });\r\n\r\n                }\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function getRegistrationTypeBySampleType(comboData, masterData, userInfo, realRegtype) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post('registrationtype/getRegistrationTypeBySampleType', { nsampletypecode: comboData.value, userinfo: userInfo })\r\n            .then(res => {\r\n                masterData = {\r\n                    ...masterData,\r\n                    RegistrationTypes: res.data\r\n                }\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData,\r\n                        selectedSampleType: comboData,\r\n                        realRegtype,\r\n                        loading: false,\r\n                        reloadData: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}