{"ast":null,"code":"var _jsxFileName = \"D:\\\\LIMSWFH\\\\LIMSPOSTGRESQL\\\\QuaLISWeb\\\\src\\\\pages\\\\contactmaster\\\\Manufacturer.jsx\";\nimport React, { Component } from 'react';\nimport { Row, Col, Card, Nav, FormGroup, FormLabel } from 'react-bootstrap';\nimport { toast } from 'react-toastify';\nimport { FormattedMessage } from 'react-intl';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faPencilAlt, faTrashAlt } from '@fortawesome/free-solid-svg-icons';\nimport { ReadOnlyText } from '../../components/App.styles';\nimport { ContentPanel } from '../../pages/product/product.styled';\nimport { connect } from 'react-redux';\nimport { injectIntl } from 'react-intl';\nimport ListMaster from '../../components/list-master/list-master.component';\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\nimport { showEsign, getControlMap } from '../../components/CommonScript';\nimport Esign from '../audittrail/Esign';\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\nimport { transactionStatus } from '../../components/Enumeration'; // import ConfirmDialog from '../../components/confirm-alert/confirm-alert.component';\n\nimport ConfirmMessage from '../../components/confirm-alert/confirm-message.component';\nimport { callService, crudMaster, validateEsignCredential, updateStore, getManfacturerCombo, selectCheckBoxManufacturer, getContactInfo, getSiteManufacturerLoadEdit, getContactManufacturerLoadEdit, filterColumnData } from '../../actions';\nimport ManufacturerSiteTab from '../../pages/contactmaster/ManufacturerSiteTab'; // import { Tooltip } from '@progress/kendo-react-tooltip';\n\nimport AddManufacturer from '../../pages/contactmaster/AddManufacturer';\nimport ReactTooltip from 'react-tooltip';\n\nconst mapStateToProps = state => {\n  return {\n    Login: state.Login\n  };\n};\n\nclass Manufacturer extends Component {\n  constructor(props) {\n    super(props);\n\n    this.closeModal = () => {\n      let loadEsign = this.props.Login.loadEsign;\n      let openModal = this.props.Login.openModal;\n      let selectedRecord = this.props.Login.selectedRecord;\n\n      if (this.props.Login.loadEsign) {\n        if (this.props.Login.operation === \"delete\") {\n          loadEsign = false;\n          openModal = false;\n          selectedRecord = {};\n        } else {\n          loadEsign = false;\n          selectedRecord['esignpassword'] = \"\";\n          selectedRecord['esigncomments'] = \"\";\n        }\n      } else {\n        openModal = false;\n        selectedRecord = {};\n      }\n\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          openModal,\n          loadEsign,\n          selectedRecord,\n          selectedId: null\n        } // data: {openModal, loadEsign, selectedRecord}\n\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.ConfirmDelete = deleteId => {\n      this.confirmMessage.confirm(\"deleteMessage\", this.props.intl.formatMessage({\n        id: \"IDS_DELETE\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_DEFAULTCONFIRMMSG\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_OK\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_CANCEL\"\n      }), () => this.DeleteManufacturer(\"delete\", deleteId));\n    };\n\n    this.onSaveClick = (saveType, formRef) => {\n      let inputData = [];\n      inputData[\"userinfo\"] = this.props.Login.userInfo;\n      let postParam = undefined;\n      let fieldList = [\"nmanufcode\", \"smanufname\", \"sdescription\", \"ntransactionstatus\"];\n\n      if (this.props.Login.operation === \"update\") {\n        postParam = {\n          inputListName: \"Manufacturer\",\n          selectedObject: \"selectedManufacturer\",\n          primaryKeyField: \"nmanufcode\"\n        };\n        inputData[\"manufacturer\"] = JSON.parse(JSON.stringify(this.state.selectedRecord));\n        fieldList.map(item => {\n          if (item === \"nofficialmanufcode\") {\n            return inputData[\"manufacturer\"][item] = this.state.selectedRecord[item] ? this.state.selectedRecord[item].value : \"\";\n          } else {\n            return inputData[\"manufacturer\"][item] = this.state.selectedRecord[item] ? this.state.selectedRecord[item] : \"\";\n          }\n        });\n\n        if (inputData[\"manufacturer\"].hasOwnProperty('nofficialmanufcode')) {\n          delete inputData[\"manufacturer\"]['nofficialmanufcode'];\n        }\n      } else {\n        inputData[\"manufacturer\"] = {\n          \"nsitecode\": this.props.Login.userInfo.nmastersitecode\n        };\n        fieldList.map(item => {\n          if (item === \"nofficialmanufcode\") {\n            return inputData[\"manufacturer\"][item] = this.state.selectedRecord[item].value;\n          } else {\n            return inputData[\"manufacturer\"][item] = this.state.selectedRecord[item];\n          }\n        });\n      }\n\n      const inputParam = {\n        classUrl: this.props.Login.inputParam.classUrl,\n        methodUrl: \"Manufacturer\",\n        inputData: inputData,\n        operation: this.props.Login.operation,\n        saveType,\n        formRef,\n        postParam,\n        searchRef: this.searchRef\n      };\n      const masterData = this.props.Login.masterData;\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData\n            },\n            saveType\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, masterData, \"openModal\");\n      } // this.props.crudMaster(inputParam);\n\n    };\n\n    this.DeleteManufacturer = (operation, ncontrolCode) => {\n      let inputData = [];\n      inputData[\"manufacturer\"] = this.props.Login.masterData.selectedManufacturer;\n      inputData[\"userinfo\"] = this.props.Login.userInfo;\n      const postParam = {\n        inputListName: \"Manufacturer\",\n        selectedObject: \"selectedManufacturer\",\n        primaryKeyField: \"nmanufcode\",\n        primaryKeyValue: this.props.Login.masterData.selectedManufacturer.nmanufcode,\n        fetchUrl: \"manufacturer/getManufacturerWithSiteAndContactDetails\",\n        fecthInputObject: {\n          userinfo: this.props.Login.userInfo\n        }\n      };\n      const inputParam = {\n        methodUrl: \"Manufacturer\",\n        postParam,\n        classUrl: this.props.Login.inputParam.classUrl,\n        inputData: inputData,\n        operation: \"delete\"\n      };\n      const masterData = this.props.Login.masterData; // this.props.crudMaster(inputParam, this.props.Login.masterData);\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, ncontrolCode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData\n            },\n            openModal: true,\n            screenName: \"Manufacturer\",\n            operation\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, masterData, \"openModal\");\n      }\n    };\n\n    this.onInputOnChange = event => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (event.target.type === 'checkbox') {\n        if (event.target.name === \"agree\") {\n          selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\n        } else {\n          selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.ACTIVE : transactionStatus.DEACTIVE;\n        }\n      } else {\n        selectedRecord[event.target.name] = event.target.value;\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onComboChange = (comboData, fieldName) => {\n      if (comboData !== null) {\n        const selectedRecord = this.state.selectedRecord || {};\n        selectedRecord[fieldName] = comboData; //comboData.value;\n\n        this.setState({\n          selectedRecord\n        });\n      }\n    };\n\n    this.validateEsign = () => {\n      const inputParam = {\n        inputData: {\n          \"userinfo\": { ...this.props.Login.userInfo,\n            sreason: this.state.selectedRecord[\"esigncomments\"]\n          },\n          password: this.state.selectedRecord[\"esignpassword\"]\n        },\n        screenData: this.props.Login.screenData\n      };\n      this.props.validateEsignCredential(inputParam, \"openModal\");\n    };\n\n    this.reloadData = () => {\n      this.searchRef.current.value = \"\";\n      const inputParam = {\n        inputData: {\n          \"userinfo\": this.props.Login.userInfo\n        },\n        classUrl: \"manufacturer\",\n        methodUrl: \"Manufacturer\",\n        userInfo: this.props.Login.userInfo,\n        displayName: \"Manufacturer\"\n      };\n      this.props.callService(inputParam);\n    };\n\n    const dataState = {\n      skip: 0,\n      take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n    };\n    this.state = {\n      selectedRecord: {},\n      dataResult: [],\n      dataState: dataState,\n      masterStatus: \"\",\n      error: \"\",\n      Manufacturer: [],\n      operation: \"\",\n      selectedManufacturer: undefined,\n      screenName: \"Manufacturer\",\n      EDQMManufacturer: [],\n      SiteCode: 0,\n      userRoleControlRights: [],\n      controlMap: new Map()\n    };\n    this.searchRef = React.createRef();\n    this.confirmMessage = new ConfirmMessage();\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\n      toast.warn(props.Login.masterStatus);\n      props.Login.masterStatus = \"\";\n    }\n\n    if (props.Login.error !== state.error) {\n      toast.error(props.Login.error);\n      props.Login.error = \"\";\n    }\n\n    if (props.Login.selectedRecord === undefined) {\n      return {\n        selectedRecord: {}\n      };\n    }\n\n    return null;\n  }\n\n  render() {\n    let userStatusCSS = \"\";\n    let activeIconCSS = \"fa fa-check\";\n    this.extractedColumnList = [{\n      \"idsName\": \"IDS_MANUFACTURERNAME\",\n      \"mandatory\": true,\n      \"dataField\": \"smanufname\",\n      \"width\": \"200px\",\n      \"mandatoryLabel\": \"IDS_ENTER\",\n      \"controlType\": \"textbox\"\n    } // { \"idsName\": \"IDS_EDQMOFFICIALNAME\", \"mandatory\": true, \"dataField\": \"nofficialmanufcode\", \"width\": \"200px\" , \"mandatoryLabel\":\"IDS_SELECT\", \"controlType\": \"selectbox\"}\n    ];\n\n    if (this.props.Login.masterData.selectedManufacturer && this.props.Login.masterData.selectedManufacturer.ntransactionstatus === transactionStatus.DEACTIVE) {\n      userStatusCSS = \"outline-secondary\";\n      activeIconCSS = \"\";\n    } else if (this.props.Login.masterData.selectedManufacturer && this.props.Login.masterData.selectedManufacturer.ntransactionstatus === transactionStatus.ACTIVE) {\n      userStatusCSS = \"outline-success\";\n    } else {\n      userStatusCSS = \"outline-Final\";\n    }\n\n    const addId = this.state.controlMap.has(\"AddManufacturer\") && this.state.controlMap.get(\"AddManufacturer\").ncontrolcode;\n    const editId = this.state.controlMap.has(\"EditManufacturer\") && this.state.controlMap.get(\"EditManufacturer\").ncontrolcode;\n    const deleteId = this.state.controlMap.has(\"DeleteManufacturer\") && this.state.controlMap.get(\"DeleteManufacturer\").ncontrolcode;\n    const filterParam = {\n      inputListName: \"Manufacturer\",\n      selectedObject: \"selectedManufacturer\",\n      primaryKeyField: \"nmanufcode\",\n      fetchUrl: \"manufacturer/getManufacturerWithSiteAndContactDetails\",\n      fecthInputObject: {\n        userinfo: this.props.Login.userInfo\n      },\n      masterData: this.props.Login.masterData,\n      searchFieldList: [\"smanufname\", \"sdescription\", \"stransdisplaystatus\"]\n    };\n    const mandatoryFields = [];\n    this.extractedColumnList.forEach(item => item.mandatory === true ? mandatoryFields.push(item) : \"\");\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"client-listing-wrap mtop-4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      noGutters: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 4,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(ListMaster //filterColumnData ={(e)=>this.filterColumnData(e)}\n    , {\n      formatMessage: this.props.intl.formatMessage,\n      screenName: \"Manufacturer\",\n      masterData: this.props.Login.masterData,\n      userInfo: this.props.Login.userInfo,\n      masterList: this.props.Login.masterData.searchedData || this.props.Login.masterData.Manufacturer,\n      getMasterDetail: Manufacturer => this.props.selectCheckBoxManufacturer(Manufacturer, this.props.Login.userInfo, this.props.Login.masterData),\n      selectedMaster: this.props.Login.masterData.selectedManufacturer,\n      primaryKeyField: \"nmanufcode\",\n      mainField: \"smanufname\",\n      firstField: \"stransdisplaystatus\" //secondField=\"stransdisplaystatus\"\n      ,\n      isIDSField: \"Yes\",\n      filterColumnData: this.props.filterColumnData,\n      filterParam: filterParam,\n      userRoleControlRights: this.state.userRoleControlRights,\n      addId: addId,\n      searchRef: this.searchRef,\n      reloadData: this.reloadData,\n      hidePaging: false,\n      openModal: () => this.props.getManfacturerCombo(\"IDS_MANUFACTURER\", \"create\", \"nmanufcode\", this.props.Login.masterData, this.props.Login.userInfo, 75),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 29\n      }\n    })), /*#__PURE__*/React.createElement(Col, {\n      md: \"8\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 34\n      }\n    }, /*#__PURE__*/React.createElement(ContentPanel, {\n      className: \"panel-main-content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 33\n      }\n    }, this.props.Login.masterData.Manufacturer && this.props.Login.masterData.Manufacturer.length > 0 && this.props.Login.masterData.selectedManufacturer ? /*#__PURE__*/React.createElement(Card, {\n      className: \"border-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(Card.Header, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(Card.Title, {\n      className: \"product-title-main\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 49\n      }\n    }, this.props.Login.masterData.selectedManufacturer.smanufname), /*#__PURE__*/React.createElement(Card.Subtitle, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"d-flex product-category\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      className: \"product-title-sub flex-grow-1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      className: `btn btn-outlined ${userStatusCSS} btn-sm ml-3`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 61\n      }\n    }, /*#__PURE__*/React.createElement(\"i\", {\n      className: activeIconCSS,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 65\n      }\n    }), this.props.Login.masterData.selectedManufacturer.stransdisplaystatus)), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"d-inline \",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(ReactTooltip, {\n      place: \"bottom\",\n      globalEventOff: \"click\",\n      id: \"tooltip_list_wrap\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 61\n      }\n    }), \"  \", /*#__PURE__*/React.createElement(Nav.Link, {\n      className: \"btn btn-circle outline-grey mr-2\",\n      href: \"#\",\n      hidden: this.state.userRoleControlRights.indexOf(editId) === -1,\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_EDIT\"\n      }),\n      \"data-for\": \"tooltip_list_wrap\",\n      onClick: e => this.props.getManfacturerCombo(\"Manufacturer\", \"update\", \"nmanufcode\", this.props.Login.masterData, this.props.Login.userInfo, editId),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 61\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faPencilAlt,\n      title: this.props.intl.formatMessage({\n        id: \"IDS_EDIT\"\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 65\n      }\n    })), /*#__PURE__*/React.createElement(Nav.Link, {\n      className: \"btn btn-circle outline-grey mr-2 action-icons-wrap\",\n      href: \"\",\n      hidden: this.state.userRoleControlRights.indexOf(deleteId) === -1,\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_DELETE\"\n      }),\n      \"data-for\": \"tooltip_list_wrap\",\n      onClick: () => this.ConfirmDelete(deleteId),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 61\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faTrashAlt,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 65\n      }\n    })))))), /*#__PURE__*/React.createElement(Card.Body, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: \"4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(FormLabel, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 61\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: 'IDS_DESCRIPTION',\n      message: \"Description\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 72\n      }\n    })), /*#__PURE__*/React.createElement(ReadOnlyText, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 61\n      }\n    }, \" \", this.props.Login.masterData.selectedManufacturer.sdescription === null || this.props.Login.masterData.selectedManufacturer.sdescription.length === 0 ? '-' : this.props.Login.masterData.selectedManufacturer.sdescription)))), /*#__PURE__*/React.createElement(ManufacturerSiteTab, {\n      operation: this.props.Login.operation,\n      inputParam: this.props.Login.inputParam,\n      screenName: this.props.Login.screenName,\n      userInfo: this.props.Login.userInfo,\n      masterData: this.props.Login.masterData,\n      crudMaster: this.props.crudMaster,\n      errorCode: this.props.Login.errorCode,\n      masterStatus: this.props.Login.masterStatus,\n      openChildModal: this.props.Login.openChildModal,\n      updateStore: this.props.updateStore,\n      selectedRecord: this.props.Login.selectedRecord,\n      getContactInfo: this.props.getContactInfo,\n      getSiteManufacturerLoadEdit: this.props.getSiteManufacturerLoadEdit,\n      getContactManufacturerLoadEdit: this.props.getContactManufacturerLoadEdit,\n      ncontrolCode: this.props.Login.ncontrolCode,\n      userRoleControlRights: this.state.userRoleControlRights,\n      esignRights: this.props.Login.userRoleControlRights,\n      screenData: this.props.Login.screenData,\n      validateEsignCredential: this.props.validateEsignCredential,\n      loadEsign: this.props.Login.loadEsign,\n      controlMap: this.state.controlMap,\n      Country: this.props.Login.Country,\n      countryCode: this.props.Login.countryCode,\n      SiteCode: this.props.Login.SiteCode,\n      selectedId: this.props.Login.selectedId,\n      dataState: this.props.Login.dataState,\n      settings: this.props.Login.settings // masterData={{\n      //     \"selectedManufacturer\": this.state.selectedManufacturer,\n      //     \"ManufacturerSiteAddress\": this.state.ManufacturerSiteAddress,\n      //     \"ManufacturerContactInfo\": this.state.ManufacturerContactInfo || [],\n      //     \"SiteCode\": this.state.SiteCode\n      // }}\n      ,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 49\n      }\n    }))) : \"\")))))), this.props.Login.openModal && /*#__PURE__*/React.createElement(SlideOutModal, {\n      show: this.props.Login.openModal,\n      closeModal: this.closeModal,\n      operation: this.props.Login.operation,\n      inputParam: this.props.Login.inputParam,\n      screenName: this.props.Login.screenName,\n      onSaveClick: this.onSaveClick,\n      esign: this.props.Login.loadEsign,\n      validateEsign: this.validateEsign,\n      masterStatus: this.props.Login.masterStatus,\n      updateStore: this.props.updateStore,\n      selectedRecord: this.state.selectedRecord || {},\n      mandatoryFields: mandatoryFields,\n      addComponent: this.props.Login.loadEsign ? /*#__PURE__*/React.createElement(Esign, {\n        operation: this.props.Login.operation // formatMessage={this.props.intl.formatMessage}\n        ,\n        onInputOnChange: this.onInputOnChange,\n        inputParam: this.props.Login.inputParam,\n        selectedRecord: this.state.selectedRecord || {},\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 267,\n          columnNumber: 29\n        }\n      }) : /*#__PURE__*/React.createElement(AddManufacturer, {\n        selectedRecord: this.state.selectedRecord || {},\n        onInputOnChange: this.onInputOnChange,\n        onComboChange: this.onComboChange // formatMessage={this.props.intl.formatMessage}\n        ,\n        edqmManufacturerList: this.props.Login.edqmManufacturerList || [],\n        operation: this.props.operation,\n        inputParam: this.props.inputParam // defaultValue={this.props.Login.edqmManufacturer}\n        ,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 273,\n          columnNumber: 31\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 254,\n        columnNumber: 21\n      }\n    }));\n  }\n\n  componentDidUpdate(previousProps) {\n    // if (this.props.Login.masterData !== previousProps.Login.masterData) {\n    //     this.setState(\n    //         {\n    //             Manufacturer: this.props.Login.masterData.Manufacturer ?\n    //                 this.props.Login.masterData.Manufacturer : this.state.Manufacturer,\n    //             selectedManufacturer: this.props.Login.masterData.selectedManufacturer ?\n    //                 this.props.Login.masterData.selectedManufacturer : this.state.selectedManufacturer,\n    //             ManufacturerSiteAddress: this.props.Login.masterData.ManufacturerSiteAddress ?\n    //                 this.props.Login.masterData.ManufacturerSiteAddress : {},\n    //             ManufacturerContactInfo: this.props.Login.masterData.ManufacturerContactInfo ?\n    //                 this.props.Login.masterData.ManufacturerContactInfo : {},\n    //             SiteCode: this.props.Login.masterData.SiteCode ? this.props.Login.masterData.SiteCode : 0,\n    //             isOpen: false\n    //         });\n    // }\n    if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\n      this.setState({\n        selectedRecord: this.props.Login.selectedRecord\n      });\n    }\n\n    if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\n      const userRoleControlRights = [];\n\n      if (this.props.Login.userRoleControlRights) {\n        this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item => userRoleControlRights.push(item.ncontrolcode));\n      }\n\n      const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode);\n      this.setState({\n        userRoleControlRights,\n        controlMap\n      });\n    }\n  }\n\n  componentWillUnmount() {\n    const updateInfo = {\n      typeName: DEFAULT_RETURN,\n      data: {\n        masterData: [],\n        inputParam: undefined,\n        operation: null,\n        modalName: undefined\n      }\n    };\n    this.props.updateStore(updateInfo);\n  }\n\n}\n\nexport default connect(mapStateToProps, {\n  callService,\n  crudMaster,\n  validateEsignCredential,\n  updateStore,\n  getManfacturerCombo,\n  selectCheckBoxManufacturer,\n  getContactInfo,\n  getSiteManufacturerLoadEdit,\n  getContactManufacturerLoadEdit,\n  filterColumnData\n})(injectIntl(Manufacturer));","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/pages/contactmaster/Manufacturer.jsx"],"names":["React","Component","Row","Col","Card","Nav","FormGroup","FormLabel","toast","FormattedMessage","FontAwesomeIcon","faPencilAlt","faTrashAlt","ReadOnlyText","ContentPanel","connect","injectIntl","ListMaster","SlideOutModal","showEsign","getControlMap","Esign","DEFAULT_RETURN","transactionStatus","ConfirmMessage","callService","crudMaster","validateEsignCredential","updateStore","getManfacturerCombo","selectCheckBoxManufacturer","getContactInfo","getSiteManufacturerLoadEdit","getContactManufacturerLoadEdit","filterColumnData","ManufacturerSiteTab","AddManufacturer","ReactTooltip","mapStateToProps","state","Login","Manufacturer","constructor","props","closeModal","loadEsign","openModal","selectedRecord","operation","updateInfo","typeName","data","selectedId","ConfirmDelete","deleteId","confirmMessage","confirm","intl","formatMessage","id","DeleteManufacturer","onSaveClick","saveType","formRef","inputData","userInfo","postParam","undefined","fieldList","inputListName","selectedObject","primaryKeyField","JSON","parse","stringify","map","item","value","hasOwnProperty","nmastersitecode","inputParam","classUrl","methodUrl","searchRef","masterData","userRoleControlRights","nformcode","ncontrolCode","screenData","selectedManufacturer","primaryKeyValue","nmanufcode","fetchUrl","fecthInputObject","userinfo","screenName","onInputOnChange","event","target","type","name","checked","YES","NO","ACTIVE","DEACTIVE","setState","onComboChange","comboData","fieldName","validateEsign","sreason","password","reloadData","current","displayName","dataState","skip","take","settings","parseInt","dataResult","masterStatus","error","EDQMManufacturer","SiteCode","controlMap","Map","createRef","getDerivedStateFromProps","warn","render","userStatusCSS","activeIconCSS","extractedColumnList","ntransactionstatus","addId","has","get","ncontrolcode","editId","filterParam","searchFieldList","mandatoryFields","forEach","mandatory","push","searchedData","length","smanufname","stransdisplaystatus","indexOf","e","sdescription","errorCode","openChildModal","Country","countryCode","edqmManufacturerList","componentDidUpdate","previousProps","Object","values","componentWillUnmount","modalName"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { Row, Col, Card, Nav, FormGroup, FormLabel } from 'react-bootstrap';\r\nimport { toast } from 'react-toastify';\r\nimport { FormattedMessage } from 'react-intl';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faPencilAlt, faTrashAlt } from '@fortawesome/free-solid-svg-icons';\r\nimport { ReadOnlyText } from '../../components/App.styles';\r\nimport { ContentPanel } from '../../pages/product/product.styled';\r\nimport { connect } from 'react-redux';\r\nimport { injectIntl } from 'react-intl';\r\nimport ListMaster from '../../components/list-master/list-master.component';\r\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\r\nimport { showEsign, getControlMap } from '../../components/CommonScript';\r\nimport Esign from '../audittrail/Esign';\r\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\r\nimport { transactionStatus } from '../../components/Enumeration';\r\n// import ConfirmDialog from '../../components/confirm-alert/confirm-alert.component';\r\nimport ConfirmMessage from '../../components/confirm-alert/confirm-message.component';\r\nimport {\r\n    callService, crudMaster, validateEsignCredential, updateStore, getManfacturerCombo, selectCheckBoxManufacturer,\r\n    getContactInfo,\r\n    getSiteManufacturerLoadEdit, getContactManufacturerLoadEdit, filterColumnData\r\n} from '../../actions';\r\nimport ManufacturerSiteTab from '../../pages/contactmaster/ManufacturerSiteTab';\r\n// import { Tooltip } from '@progress/kendo-react-tooltip';\r\nimport AddManufacturer from '../../pages/contactmaster/AddManufacturer';\r\nimport ReactTooltip from 'react-tooltip';\r\n\r\n\r\n\r\nconst mapStateToProps = state => {\r\n    return ({ Login: state.Login })\r\n}\r\n\r\n\r\nclass Manufacturer extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        const dataState = {\r\n            skip: 0,\r\n            take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5,\r\n        };\r\n        this.state = {\r\n            selectedRecord: {}, dataResult: [],\r\n            dataState: dataState,\r\n            masterStatus: \"\",\r\n            error: \"\",\r\n            Manufacturer: [],\r\n            operation: \"\",\r\n            selectedManufacturer: undefined,\r\n            screenName: \"Manufacturer\",\r\n            EDQMManufacturer: [],\r\n            SiteCode: 0,\r\n            userRoleControlRights: [],\r\n            controlMap: new Map(),\r\n\r\n        };\r\n        this.searchRef = React.createRef();\r\n        this.confirmMessage = new ConfirmMessage();\r\n    }\r\n\r\n    static getDerivedStateFromProps(props, state) {\r\n\r\n        if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\r\n            toast.warn(props.Login.masterStatus);\r\n            props.Login.masterStatus = \"\";\r\n        }\r\n\r\n        if (props.Login.error !== state.error) {\r\n            toast.error(props.Login.error)\r\n            props.Login.error = \"\";\r\n        }\r\n        if (props.Login.selectedRecord === undefined) {\r\n            return { selectedRecord: {} }\r\n        }\r\n        return null;\r\n    }\r\n\r\n\r\n    render() {\r\n        let userStatusCSS = \"\";\r\n        let activeIconCSS = \"fa fa-check\";\r\n\r\n        this.extractedColumnList = [\r\n            { \"idsName\": \"IDS_MANUFACTURERNAME\", \"mandatory\": true, \"dataField\": \"smanufname\", \"width\": \"200px\", \"mandatoryLabel\":\"IDS_ENTER\", \"controlType\": \"textbox\" },\r\n            // { \"idsName\": \"IDS_EDQMOFFICIALNAME\", \"mandatory\": true, \"dataField\": \"nofficialmanufcode\", \"width\": \"200px\" , \"mandatoryLabel\":\"IDS_SELECT\", \"controlType\": \"selectbox\"}\r\n        ];\r\n\r\n        if (this.props.Login.masterData.selectedManufacturer && this.props.Login.masterData.selectedManufacturer.ntransactionstatus === transactionStatus.DEACTIVE) {\r\n            userStatusCSS = \"outline-secondary\";\r\n            activeIconCSS = \"\";\r\n        }\r\n        else if (this.props.Login.masterData.selectedManufacturer && this.props.Login.masterData.selectedManufacturer.ntransactionstatus === transactionStatus.ACTIVE) {\r\n            userStatusCSS = \"outline-success\";\r\n        }\r\n        else {\r\n            userStatusCSS = \"outline-Final\";\r\n        }\r\n        const addId = this.state.controlMap.has(\"AddManufacturer\") && this.state.controlMap.get(\"AddManufacturer\").ncontrolcode;\r\n        const editId = this.state.controlMap.has(\"EditManufacturer\") && this.state.controlMap.get(\"EditManufacturer\").ncontrolcode;\r\n        const deleteId = this.state.controlMap.has(\"DeleteManufacturer\") && this.state.controlMap.get(\"DeleteManufacturer\").ncontrolcode\r\n\r\n        const filterParam = {\r\n            inputListName: \"Manufacturer\", selectedObject: \"selectedManufacturer\", primaryKeyField: \"nmanufcode\",\r\n            fetchUrl: \"manufacturer/getManufacturerWithSiteAndContactDetails\", fecthInputObject: { userinfo: this.props.Login.userInfo },\r\n            masterData: this.props.Login.masterData,\r\n            searchFieldList: [\"smanufname\", \"sdescription\", \"stransdisplaystatus\"]\r\n        };\r\n        const mandatoryFields = [];\r\n        this.extractedColumnList.forEach(item => item.mandatory === true ?\r\n            mandatoryFields.push(item) : \"\"\r\n        );\r\n        return (\r\n            <>\r\n                <div className=\"client-listing-wrap mtop-4\">\r\n                    <Row noGutters={true}>\r\n                        <Col md={4}>\r\n                            <ListMaster //filterColumnData ={(e)=>this.filterColumnData(e)}\r\n                                formatMessage={this.props.intl.formatMessage}\r\n                                screenName={\"Manufacturer\"}\r\n                                masterData={this.props.Login.masterData}\r\n                                userInfo={this.props.Login.userInfo}\r\n                                masterList={this.props.Login.masterData.searchedData || this.props.Login.masterData.Manufacturer}\r\n                                getMasterDetail={(Manufacturer) => this.props.selectCheckBoxManufacturer(Manufacturer, this.props.Login.userInfo, this.props.Login.masterData)}\r\n                                selectedMaster={this.props.Login.masterData.selectedManufacturer}\r\n                                primaryKeyField=\"nmanufcode\"\r\n                                mainField=\"smanufname\"\r\n                                firstField=\"stransdisplaystatus\"\r\n                                //secondField=\"stransdisplaystatus\"\r\n                                isIDSField=\"Yes\"\r\n                                filterColumnData={this.props.filterColumnData}\r\n                                filterParam={filterParam}\r\n                                userRoleControlRights={this.state.userRoleControlRights}\r\n                                addId={addId}\r\n                                searchRef={this.searchRef}\r\n                                reloadData={this.reloadData}\r\n                                hidePaging={false}\r\n                                openModal={() => this.props.getManfacturerCombo(\"IDS_MANUFACTURER\", \"create\", \"nmanufcode\", this.props.Login.masterData, this.props.Login.userInfo, 75)}\r\n                            />\r\n                        </Col>\r\n                        <Col md='8'>\r\n                            <Row><Col md={12}>\r\n                                <ContentPanel className=\"panel-main-content\">\r\n                                    {this.props.Login.masterData.Manufacturer && this.props.Login.masterData.Manufacturer.length > 0 && this.props.Login.masterData.selectedManufacturer ?\r\n                                        <Card className=\"border-0\">\r\n                                            <Card.Header>\r\n                                                <Card.Title className=\"product-title-main\">{this.props.Login.masterData.selectedManufacturer.smanufname}</Card.Title>\r\n                                                <Card.Subtitle>\r\n                                                    <div className=\"d-flex product-category\">\r\n                                                        <h2 className=\"product-title-sub flex-grow-1\">\r\n                                                            <span className={`btn btn-outlined ${userStatusCSS} btn-sm ml-3`}>\r\n                                                                <i className={activeIconCSS}></i>\r\n                                                                {this.props.Login.masterData.selectedManufacturer.stransdisplaystatus}\r\n                                                            </span>\r\n                                                        </h2>\r\n                                                        <div className=\"d-inline \">\r\n                                                            {/* <Tooltip position=\"bottom\" anchorElement=\"target\" openDelay={100} parentTitle={true}> */}\r\n\r\n                                                            <ReactTooltip place=\"bottom\" globalEventOff='click' id=\"tooltip_list_wrap\" />  {/* <ProductList className=\"d-inline dropdown badget_menu\"> */}\r\n                                                            <Nav.Link className=\"btn btn-circle outline-grey mr-2\" href=\"#\"\r\n                                                                hidden={this.state.userRoleControlRights.indexOf(editId) === -1}\r\n                                                                data-tip={this.props.intl.formatMessage({ id: \"IDS_EDIT\" })}\r\n                                                                data-for=\"tooltip_list_wrap\"\r\n                                                                onClick={(e) => this.props.getManfacturerCombo(\"Manufacturer\", \"update\", \"nmanufcode\", this.props.Login.masterData, this.props.Login.userInfo, editId)} >\r\n                                                                <FontAwesomeIcon icon={faPencilAlt}\r\n                                                                    title={this.props.intl.formatMessage({ id: \"IDS_EDIT\" })} />\r\n                                                            </Nav.Link>\r\n                                                            <Nav.Link className=\"btn btn-circle outline-grey mr-2 action-icons-wrap\" href=\"\"\r\n                                                                hidden={this.state.userRoleControlRights.indexOf(deleteId) === -1}\r\n                                                                data-tip={this.props.intl.formatMessage({ id: \"IDS_DELETE\" })}\r\n                                                                data-for=\"tooltip_list_wrap\"\r\n                                                                onClick={() => this.ConfirmDelete(deleteId)}>\r\n                                                                <FontAwesomeIcon icon={faTrashAlt} />\r\n                                                                {/* <FontAwesomeIcon icon={faTrashAlt} className=\"ActionIconColor\" onClick={(e) => this.DeleteManufacturer(\"delete\", deleteId)} /> */}\r\n                                                                {/* <ConfirmDialog\r\n                                                                        name=\"deleteMessage\"\r\n                                                                        message={this.props.intl.formatMessage({ id: \"IDS_DEFAULTCONFIRMMSG\" })}\r\n                                                                        doLabel={this.props.intl.formatMessage({ id: \"IDS_OK\" })}\r\n                                                                        doNotLabel={this.props.intl.formatMessage({ id: \"IDS_CANCEL\" })}\r\n                                                                        icon={faTrashAlt}\r\n                                                                        title={this.props.intl.formatMessage({ id: \"IDS_DELETE\" })}\r\n                                                                        hidden={this.state.userRoleControlRights.indexOf(deleteId) === -1}\r\n                                                                        handleClickDelete={() => this.DeleteManufacturer(\"delete\", deleteId)}\r\n                                                                    /> */}\r\n                                                            </Nav.Link>\r\n                                                            {/* </Tooltip> */}\r\n                                                        </div>\r\n                                                    </div>\r\n                                                </Card.Subtitle>\r\n                                            </Card.Header>\r\n                                            <Card.Body>\r\n                                                <Row>\r\n                                                    {/* <Col md='4'>\r\n                                                        <FormGroup>\r\n                                                            <FormLabel><FormattedMessage id={'IDS_EDQMOFFICIALNAME'} message=\"EDQM Official Name\" /></FormLabel>\r\n                                                            <ReadOnlyText>{this.props.Login.masterData.selectedManufacturer.sofficialmanufname}</ReadOnlyText>\r\n                                                        </FormGroup>\r\n                                                    </Col> */}\r\n                                                    <Col md='4'>\r\n                                                        <FormGroup>\r\n                                                            <FormLabel><FormattedMessage id={'IDS_DESCRIPTION'} message=\"Description\" /></FormLabel>\r\n                                                            <ReadOnlyText> {this.props.Login.masterData.selectedManufacturer.sdescription === null || this.props.Login.masterData.selectedManufacturer.sdescription.length === 0 ? '-' :\r\n                                                               this.props.Login.masterData.selectedManufacturer.sdescription}</ReadOnlyText>\r\n                                                           \r\n                                                        </FormGroup>\r\n                                                    </Col>\r\n                                                </Row>\r\n                                                {/* </Card.Body>\r\n                                            <Card.Body> */}\r\n                                                <ManufacturerSiteTab\r\n                                                    operation={this.props.Login.operation}\r\n                                                    inputParam={this.props.Login.inputParam}\r\n                                                    screenName={this.props.Login.screenName}\r\n                                                    userInfo={this.props.Login.userInfo}\r\n                                                    masterData={this.props.Login.masterData}\r\n                                                    crudMaster={this.props.crudMaster}\r\n                                                    errorCode={this.props.Login.errorCode}\r\n                                                    masterStatus={this.props.Login.masterStatus}\r\n                                                    openChildModal={this.props.Login.openChildModal}\r\n                                                    updateStore={this.props.updateStore}\r\n                                                    selectedRecord={this.props.Login.selectedRecord}\r\n                                                    getContactInfo={this.props.getContactInfo}\r\n                                                    getSiteManufacturerLoadEdit={this.props.getSiteManufacturerLoadEdit}\r\n                                                    getContactManufacturerLoadEdit={this.props.getContactManufacturerLoadEdit}\r\n                                                    ncontrolCode={this.props.Login.ncontrolCode}\r\n                                                    userRoleControlRights={this.state.userRoleControlRights}\r\n                                                    esignRights={this.props.Login.userRoleControlRights}\r\n                                                    screenData={this.props.Login.screenData}\r\n                                                    validateEsignCredential={this.props.validateEsignCredential}\r\n                                                    loadEsign={this.props.Login.loadEsign}\r\n                                                    controlMap={this.state.controlMap}\r\n                                                    Country={this.props.Login.Country}\r\n                                                    countryCode={this.props.Login.countryCode}\r\n                                                    SiteCode={this.props.Login.SiteCode}\r\n                                                    selectedId={this.props.Login.selectedId}\r\n                                                    dataState={this.props.Login.dataState}\r\n                                                    settings = {this.props.Login.settings}\r\n                                                // masterData={{\r\n                                                //     \"selectedManufacturer\": this.state.selectedManufacturer,\r\n                                                //     \"ManufacturerSiteAddress\": this.state.ManufacturerSiteAddress,\r\n                                                //     \"ManufacturerContactInfo\": this.state.ManufacturerContactInfo || [],\r\n                                                //     \"SiteCode\": this.state.SiteCode\r\n                                                // }}\r\n\r\n                                                />\r\n                                            </Card.Body>\r\n                                        </Card> : \"\"}\r\n                                </ContentPanel>\r\n                            </Col></Row>\r\n                        </Col>\r\n                    </Row>\r\n                </div>\r\n                {this.props.Login.openModal &&\r\n                    <SlideOutModal show={this.props.Login.openModal}\r\n                        closeModal={this.closeModal}\r\n                        operation={this.props.Login.operation}\r\n                        inputParam={this.props.Login.inputParam}\r\n                        screenName={this.props.Login.screenName}\r\n                        onSaveClick={this.onSaveClick}\r\n                        esign={this.props.Login.loadEsign}\r\n                        validateEsign={this.validateEsign}\r\n                        masterStatus={this.props.Login.masterStatus}\r\n                        updateStore={this.props.updateStore}\r\n                        selectedRecord={this.state.selectedRecord || {}}\r\n                        mandatoryFields={mandatoryFields}\r\n                        addComponent={this.props.Login.loadEsign ?\r\n                            <Esign operation={this.props.Login.operation}\r\n                                // formatMessage={this.props.intl.formatMessage}\r\n                                onInputOnChange={this.onInputOnChange}\r\n                                inputParam={this.props.Login.inputParam}\r\n                                selectedRecord={this.state.selectedRecord || {}}\r\n                            />\r\n                            : <AddManufacturer\r\n                                selectedRecord={this.state.selectedRecord || {}}\r\n                                onInputOnChange={this.onInputOnChange}\r\n                                onComboChange={this.onComboChange}\r\n                                // formatMessage={this.props.intl.formatMessage}\r\n                                edqmManufacturerList={this.props.Login.edqmManufacturerList || []}\r\n                                operation={this.props.operation}\r\n                                inputParam={this.props.inputParam}\r\n                            // defaultValue={this.props.Login.edqmManufacturer}\r\n                            />}\r\n                    />\r\n                }\r\n            </>\r\n        );\r\n    }\r\n\r\n    closeModal = () => {\r\n        let loadEsign = this.props.Login.loadEsign;\r\n        let openModal = this.props.Login.openModal;\r\n        let selectedRecord = this.props.Login.selectedRecord;\r\n        if (this.props.Login.loadEsign) {\r\n            if (this.props.Login.operation === \"delete\") {\r\n                loadEsign = false;\r\n                openModal = false;\r\n                selectedRecord = {};\r\n            }\r\n            else {\r\n                loadEsign = false;\r\n                selectedRecord['esignpassword'] = \"\"\r\n                selectedRecord['esigncomments'] = \"\"\r\n            }\r\n        }\r\n        else {\r\n            openModal = false;\r\n            selectedRecord = {};\r\n        }\r\n\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { openModal, loadEsign, selectedRecord, selectedId: null }\r\n            // data: {openModal, loadEsign, selectedRecord}\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n\r\n    }\r\n    ConfirmDelete = (deleteId) => {\r\n        this.confirmMessage.confirm(\"deleteMessage\", this.props.intl.formatMessage({ id: \"IDS_DELETE\" }), this.props.intl.formatMessage({ id: \"IDS_DEFAULTCONFIRMMSG\" }),\r\n            this.props.intl.formatMessage({ id: \"IDS_OK\" }), this.props.intl.formatMessage({ id: \"IDS_CANCEL\" }),\r\n            () => this.DeleteManufacturer(\"delete\", deleteId));\r\n    }\r\n    onSaveClick = (saveType, formRef) => {\r\n\r\n        let inputData = [];\r\n        inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n\r\n        let postParam = undefined;\r\n\r\n        let fieldList = [\"nmanufcode\", \"smanufname\", \"sdescription\",\r\n            \"ntransactionstatus\"];\r\n\r\n        if (this.props.Login.operation === \"update\") {\r\n\r\n            postParam = { inputListName: \"Manufacturer\", selectedObject: \"selectedManufacturer\", primaryKeyField: \"nmanufcode\" };\r\n           \r\n            inputData[\"manufacturer\"] = JSON.parse(JSON.stringify(this.state.selectedRecord));\r\n            \r\n            fieldList.map(item => {\r\n                if (item === \"nofficialmanufcode\") {\r\n                    return inputData[\"manufacturer\"][item] = this.state.selectedRecord[item] ? this.state.selectedRecord[item].value : \"\";\r\n                }\r\n                else {\r\n                    return inputData[\"manufacturer\"][item] = this.state.selectedRecord[item] ? this.state.selectedRecord[item] : \"\";\r\n                }\r\n\r\n            })\r\n            if (inputData[\"manufacturer\"].hasOwnProperty('nofficialmanufcode')) {\r\n                    delete inputData[\"manufacturer\"]['nofficialmanufcode']\r\n            }\r\n        }\r\n        else {\r\n            inputData[\"manufacturer\"] = { \"nsitecode\": this.props.Login.userInfo.nmastersitecode };\r\n\r\n            fieldList.map(item => {\r\n                if (item === \"nofficialmanufcode\") {\r\n                    return inputData[\"manufacturer\"][item] = this.state.selectedRecord[item].value\r\n                }\r\n                else {\r\n                    return inputData[\"manufacturer\"][item] = this.state.selectedRecord[item]\r\n                }\r\n            })\r\n        }\r\n        const inputParam = {\r\n            classUrl: this.props.Login.inputParam.classUrl,\r\n            methodUrl: \"Manufacturer\",\r\n            inputData: inputData,\r\n            operation: this.props.Login.operation, saveType, formRef, postParam, searchRef: this.searchRef\r\n        }\r\n        const masterData = this.props.Login.masterData;\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData }, saveType\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.crudMaster(inputParam, masterData, \"openModal\");\r\n        }\r\n\r\n        // this.props.crudMaster(inputParam);\r\n    }\r\n    DeleteManufacturer = (operation, ncontrolCode) => {\r\n        let inputData = [];\r\n\r\n        inputData[\"manufacturer\"] = this.props.Login.masterData.selectedManufacturer;\r\n        inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n\r\n        const postParam = {\r\n            inputListName: \"Manufacturer\", selectedObject: \"selectedManufacturer\",\r\n            primaryKeyField: \"nmanufcode\",\r\n            primaryKeyValue: this.props.Login.masterData.selectedManufacturer.nmanufcode,\r\n            fetchUrl: \"manufacturer/getManufacturerWithSiteAndContactDetails\",\r\n            fecthInputObject: { userinfo: this.props.Login.userInfo },\r\n        }\r\n\r\n        const inputParam = {\r\n            methodUrl: \"Manufacturer\", postParam,\r\n            classUrl: this.props.Login.inputParam.classUrl,\r\n            inputData: inputData,\r\n            operation: \"delete\"\r\n        }\r\n        const masterData = this.props.Login.masterData;\r\n        // this.props.crudMaster(inputParam, this.props.Login.masterData);\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, ncontrolCode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData },\r\n                    openModal: true, screenName: \"Manufacturer\", operation\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.crudMaster(inputParam, masterData, \"openModal\");\r\n        }\r\n    }\r\n    onInputOnChange = (event) => {\r\n\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if (event.target.type === 'checkbox') {\r\n            if (event.target.name === \"agree\") {\r\n                selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\r\n            }\r\n            else {\r\n                selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.ACTIVE : transactionStatus.DEACTIVE;\r\n            }\r\n        }\r\n        else {\r\n            selectedRecord[event.target.name] = event.target.value;\r\n        }\r\n        this.setState({ selectedRecord });\r\n    }\r\n    onComboChange = (comboData, fieldName) => {\r\n        if (comboData !== null) {\r\n            const selectedRecord = this.state.selectedRecord || {};\r\n            selectedRecord[fieldName] = comboData;//comboData.value;\r\n\r\n            this.setState({ selectedRecord });\r\n        }\r\n\r\n    }\r\n\r\n    componentDidUpdate(previousProps) {\r\n        // if (this.props.Login.masterData !== previousProps.Login.masterData) {\r\n        //     this.setState(\r\n        //         {\r\n        //             Manufacturer: this.props.Login.masterData.Manufacturer ?\r\n        //                 this.props.Login.masterData.Manufacturer : this.state.Manufacturer,\r\n        //             selectedManufacturer: this.props.Login.masterData.selectedManufacturer ?\r\n        //                 this.props.Login.masterData.selectedManufacturer : this.state.selectedManufacturer,\r\n        //             ManufacturerSiteAddress: this.props.Login.masterData.ManufacturerSiteAddress ?\r\n        //                 this.props.Login.masterData.ManufacturerSiteAddress : {},\r\n        //             ManufacturerContactInfo: this.props.Login.masterData.ManufacturerContactInfo ?\r\n        //                 this.props.Login.masterData.ManufacturerContactInfo : {},\r\n        //             SiteCode: this.props.Login.masterData.SiteCode ? this.props.Login.masterData.SiteCode : 0,\r\n        //             isOpen: false\r\n        //         });\r\n\r\n\r\n        // }\r\n        if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\r\n            this.setState({ selectedRecord: this.props.Login.selectedRecord });\r\n        }\r\n        if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\r\n            const userRoleControlRights = [];\r\n            if (this.props.Login.userRoleControlRights) {\r\n                this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item =>\r\n                    userRoleControlRights.push(item.ncontrolcode))\r\n            }\r\n            const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode)\r\n            this.setState({ userRoleControlRights, controlMap });\r\n        }\r\n    }\r\n\r\n    validateEsign = () => {\r\n        const inputParam = {\r\n            inputData: {\r\n                \"userinfo\": {\r\n                    ...this.props.Login.userInfo,\r\n                    sreason: this.state.selectedRecord[\"esigncomments\"]\r\n                },\r\n                password: this.state.selectedRecord[\"esignpassword\"]\r\n            },\r\n            screenData: this.props.Login.screenData\r\n        }\r\n        this.props.validateEsignCredential(inputParam, \"openModal\");\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                masterData: [], inputParam: undefined, operation: null, modalName: undefined\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    reloadData = () => {\r\n        this.searchRef.current.value = \"\";\r\n        const inputParam = {\r\n            inputData: { \"userinfo\": this.props.Login.userInfo },\r\n            classUrl: \"manufacturer\",\r\n            methodUrl: \"Manufacturer\",\r\n            userInfo: this.props.Login.userInfo,\r\n            displayName: \"Manufacturer\"\r\n        };\r\n\r\n        this.props.callService(inputParam);\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps,\r\n    {\r\n        callService, crudMaster, validateEsignCredential, updateStore,\r\n        getManfacturerCombo, selectCheckBoxManufacturer, getContactInfo,\r\n        getSiteManufacturerLoadEdit, getContactManufacturerLoadEdit, filterColumnData\r\n    })(injectIntl(Manufacturer));"]},"metadata":{},"sourceType":"module"}