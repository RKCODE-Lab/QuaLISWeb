{"ast":null,"code":"import rsapi from '../rsapi';\nimport { DEFAULT_RETURN } from './LoginTypes';\nimport { sortData, constructOptionList, parentChildComboLoad, rearrangeDateFormat, constructjsonOptionList } from '../components/CommonScript';\nimport { toast } from 'react-toastify';\nimport Axios from 'axios';\nimport { initRequest } from './LoginAction';\nimport { intl } from '../components/App';\nimport { attachmentType, transactionStatus } from '../components/Enumeration';\nexport function initialcombochangeMaterialInvget(nmaterialtypecode, nmaterialcatcode, data, userInfo) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"/materialinventory/getMaterialInventorycombo\", {\n      nmaterialtypecode,\n      nmaterialcatcode: nmaterialcatcode && nmaterialcatcode,\n      \"userinfo\": userInfo\n    }).then(response => {\n      const masterData = { ...data,\n        ...response.data,\n        searchedData: undefined\n      };\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n      toast.error(intl.formatMessage({\n        id: error.message\n      }));\n    });\n  };\n}\nexport function getMaterialInventoryByID(selectedcombo, selectedcombouser, selectedMaterialcombo, Data, userInfo) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"/materialinventory/getMaterialInventoryByID\", selectedcombouser !== undefined ? {\n      nmaterialtypecode: selectedcombo['nmaterialtypecode'].value !== undefined ? selectedcombo['nmaterialtypecode'].value : selectedcombo['nmaterialtypecode'],\n      nmaterialcatcode: selectedcombouser['nmaterialcatcode'].value !== undefined ? selectedcombouser['nmaterialcatcode'].value : selectedcombouser['nmaterialcatcode'],\n      nmaterialcode: selectedMaterialcombo[\"nmaterialcode\"].value !== undefined ? selectedMaterialcombo[\"nmaterialcode\"].value : selectedMaterialcombo[\"nmaterialcode\"],\n      \"userinfo\": userInfo\n    } : {\n      nmaterialtypecode: selectedcombo['nmaterialtypecode'].value,\n      \"userinfo\": userInfo\n    }).then(response => {\n      let masterData = {};\n      masterData = { ...Data,\n        ...response.data,\n        searchedData: undefined\n      };\n      sortData(masterData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false,\n          skip: 0,\n          take: 20\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n      toast.error(intl.formatMessage({\n        id: error.message\n      }));\n    });\n  };\n}\nexport function getAddMaterialInventoryPopup(operation, loginInfo, selectedcombo, ncontrolCode, masterData, selectedRecord) {\n  return function (dispatch) {\n    if (operation === \"create\") {\n      if (selectedcombo !== undefined) {\n        let urlArray = [];\n        let timeZoneList;\n        let templateData = [];\n        let data = [];\n        let dataparent = [];\n        const withoutCombocomponent = [];\n        let filterQueryComponents = [];\n        const Layout = masterData.selectedTemplate[0].jsondata;\n        Layout.map(row => {\n          row.children.map(column => {\n            column.children.map(component => {\n              if (component.hasOwnProperty(\"parent\")) {\n                dataparent.push(component);\n              }\n\n              if (component.hasOwnProperty(\"nsqlquerycode\")) {\n                filterQueryComponents.push(component);\n              }\n\n              return component.hasOwnProperty(\"children\") ? component.children.map(componentrow => {\n                if (componentrow.inputtype === \"combo\" && !component.hasOwnProperty(\"parent\")) {\n                  if (componentrow.hasOwnProperty(\"parent\")) {\n                    dataparent.push(componentrow);\n                  } else {\n                    data.push(componentrow);\n                  }\n                }\n\n                if (componentrow.hasOwnProperty(\"nsqlquerycode\")) {\n                  filterQueryComponents.push(componentrow);\n                }\n              }) : component.inputtype === \"combo\" && !component.hasOwnProperty(\"parent\") ? data.push(component) : withoutCombocomponent.push(component);\n            });\n          });\n        });\n        const comboComponents = data;\n        dataparent[0] = {\n          displaymember: dataparent[0].displaymember,\n          inputtype: dataparent[0].inputtype,\n          label: dataparent[0].label,\n          source: dataparent[0].source,\n          type: dataparent[0].type,\n          valuemember: dataparent[0].valuemember\n        };\n        let filterQueryComponents1 = [];\n        filterQueryComponents.map(temp => {\n          // filterQueryComponents1.push({'nsqlquerycode':temp.nsqlquerycode})\n          filterQueryComponents1 += temp.nsqlquerycode + ',';\n        });\n        const MaterialInvreq = rsapi.post(\"dynamicpreregdesign/getComboValues\", {\n          \"nunitcode\": selectedcombo['jsondata'][\"nunitcode\"].value,\n          \"userinfo\": loginInfo.userInfo,\n          \"parentcolumnlist\": comboComponents,\n          \"filterQueryComponents\": filterQueryComponents1.substring(0, filterQueryComponents1.length - 1),\n          \"parameters\": {\n            'nmaterialcode': masterData['SelectedMaterialCrumb']['jsondata'].nmaterialcode\n          }\n        });\n        const MaterialInvreq1 = rsapi.post('dynamicpreregdesign/getChildValues', {\n          child: Layout[0].children[0].children[0].childValue,\n          parentdata: {\n            nunitcode: selectedcombo['jsondata'][\"nunitcode\"].value\n          },\n          parentsource: 'unit',\n          'nunitcode': selectedcombo['jsondata'][\"nunitcode\"].value,\n          valuemember: 'nunitcode',\n          'userinfo': loginInfo.userInfo,\n          parentcolumnlist: dataparent\n        });\n        const materialReq3 = rsapi.post('materialinventory/getMaterialInventoryByID', {\n          'nmaterialcatcode': masterData['SelectedMaterialCategory'].nmaterialcatcode,\n          'nmaterialtypecode': masterData['SelectedMaterialType'][0].nmaterialtypecode,\n          'nmaterialcode': masterData['SelectedMaterialCrumb']['jsondata'].nmaterialcode,\n          'userinfo': loginInfo.userInfo\n        });\n        const timezone = rsapi.post(\"timezone/getTimeZone\");\n        urlArray = [MaterialInvreq, MaterialInvreq1, timezone, materialReq3];\n        dispatch(initRequest(true));\n        Axios.all(urlArray).then(response => {\n          templateData = response[0].data;\n          data.splice(1, 0, dataparent[0]);\n          let temp1 = [];\n          const temp2 = { ...response[0].data,\n            ...response[1].data\n          };\n          templateData = parentChildComboLoad(data, temp2, selectedRecord, null, withoutCombocomponent, undefined, loginInfo.userInfo.slanguagetypecode, loginInfo.userInfo);\n          let dateLables = [];\n          const Layout = masterData.selectedTemplate[0].jsondata;\n          Layout.map(row => {\n            row.children.map(column => {\n              column.children.map(component => {\n                // if (component.inputtype === 'combo') {\n                //     selectedRecord[component.label] = templateData[\"comboData\"][component.label]\n                //         && templateData[\"comboData\"][component.label][0]\n                // }\n                // else\n                if (component.inputtype === 'date') {\n                  if (component.hasOwnProperty('timezone')) dateLables.push(component.label);\n                }\n\n                component.hasOwnProperty(\"children\") && component.children.map(componentrow => {\n                  if (componentrow.inputtype === 'combo') {\n                    if (componentrow.label === 'Unit') selectedRecord[componentrow.label] = templateData[\"comboData\"][componentrow.label] && templateData[\"comboData\"][componentrow.label][0];\n                  } else if (componentrow.inputtype === 'date') {\n                    if (componentrow.hasOwnProperty('timezone')) dateLables.push(componentrow.label);\n                  }\n                });\n              });\n            });\n          });\n\n          if (dateLables) {\n            const timeZoneListMap = constructOptionList(response[2].data || [], \"ntimezonecode\", \"stimezoneid\", undefined, undefined, true);\n            timeZoneList = timeZoneListMap.get(\"OptionList\");\n            dateLables.map(temp => {\n              selectedRecord[`tz${temp}`] = timeZoneList[0];\n            });\n          }\n\n          masterData['SelectedMaterialCrumb'] = response[3].data.SelectedMaterialCrumb;\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              operation,\n              timeZoneList,\n              screenname: 'IDS_MATERIALINVENTORY',\n              masterData,\n              selectedRecord,\n              showMaterialSection: false,\n              templateData,\n              openModal: true,\n              ncontrolCode,\n              loading: false\n            }\n          });\n        }).catch(error => {\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              loading: false\n            }\n          });\n\n          if (error.response.status === 500) {\n            toast.error(intl.formatMessage({\n              id: error.message\n            }));\n          } else {\n            toast.warn(intl.formatMessage({\n              id: error.response.data\n            }));\n          }\n        });\n      } else {\n        if (masterData.MaterialCategoryMain === undefined) {\n          toast.warn(intl.formatMessage({\n            id: 'IDS_CONFIGMATERIALCATANDMATERIAL'\n          }));\n        }\n\n        if (masterData.MaterialCombo) {\n          if (masterData.MaterialCombo.length === 0) {\n            toast.warn(intl.formatMessage({\n              id: 'IDS_CONFIGMATERIAL'\n            }));\n          }\n        }\n      }\n    } else {\n      let urlArray = [];\n      let templateData = [];\n      let data = [];\n      let filterQueryComponents = [];\n      let dataparent = [];\n      let dateLables = [];\n      let timeZoneList;\n      const withoutCombocomponent = [];\n      const Layout = masterData.selectedTemplate[0].jsondata;\n\n      if (masterData[\"SelectedMaterialInventory\"].ntranscode !== transactionStatus.RETIRED && masterData[\"SelectedMaterialInventory\"].ntranscode !== transactionStatus.RELEASED && masterData[\"SelectedMaterialInventory\"].ntranscode !== transactionStatus.EXPIRED) {\n        Layout.map(row => {\n          row.children.map(column => {\n            column.children.map(component => {\n              if (component.hasOwnProperty(\"parent\")) {\n                dataparent.push(component);\n              }\n\n              if (component.hasOwnProperty(\"nsqlquerycode\")) {\n                filterQueryComponents.push(component);\n              }\n\n              if (component.hasOwnProperty('timezone')) {\n                dateLables.push(component.label);\n              }\n\n              return component.hasOwnProperty(\"children\") ? component.children.map(componentrow => {\n                if (componentrow.inputtype === \"combo\" && !component.hasOwnProperty(\"parent\")) {\n                  if (componentrow.hasOwnProperty(\"parent\")) {\n                    dataparent.push(componentrow);\n                  } else {\n                    data.push(componentrow);\n                  }\n                }\n\n                if (componentrow.hasOwnProperty(\"nsqlquerycode\")) {\n                  filterQueryComponents.push(componentrow);\n                }\n\n                if (component.hasOwnProperty('timezone')) {\n                  dateLables.push(component.label);\n                }\n              }) : component.inputtype === \"combo\" && !component.hasOwnProperty(\"parent\") ? data.push(component) : withoutCombocomponent.push(component);\n            });\n          });\n        });\n        const comboComponents = data;\n        const MaterialInv = rsapi.post(\"/materialinventory/getMaterialInventoryEdit\", {\n          'nmaterialtypecode': masterData.SelectedMaterialInventory.nmaterialtypecode,\n          'nmaterialinventorycode': masterData.SelectedMaterialInventory.nmaterialinventorycode,\n          \"userinfo\": loginInfo.userInfo\n        });\n        dataparent[0] = {\n          displaymember: dataparent[0].displaymember,\n          inputtype: dataparent[0].inputtype,\n          label: dataparent[0].label,\n          source: dataparent[0].source,\n          type: dataparent[0].type,\n          valuemember: dataparent[0].valuemember\n        };\n        let filterQueryComponents1 = [];\n        filterQueryComponents.map(temp => {\n          // filterQueryComponents1.push({'nsqlquerycode':temp.nsqlquerycode})\n          filterQueryComponents1 += temp.nsqlquerycode + ',';\n        });\n        const Materialinvreq = rsapi.post(\"dynamicpreregdesign/getComboValues\", {\n          \"nunitcode\": selectedcombo['jsondata'][\"nunitcode\"].value,\n          \"userinfo\": loginInfo.userInfo,\n          \"parentcolumnlist\": comboComponents,\n          \"filterQueryComponents\": filterQueryComponents1.substring(0, filterQueryComponents1.length - 1),\n          \"parameters\": {\n            'nmaterialcode': masterData['SelectedMaterialCrumb']['jsondata'].nmaterialcode\n          }\n        });\n        const MaterialInvreq1 = rsapi.post('dynamicpreregdesign/getChildValues', {\n          child: Layout[0].children[0].children[0].childValue,\n          parentdata: {\n            nunitcode: selectedcombo['jsondata'][\"nunitcode\"].value\n          },\n          parentsource: 'unit',\n          'nunitcode': selectedcombo['jsondata'][\"nunitcode\"].value,\n          valuemember: 'nunitcode',\n          \"userinfo\": loginInfo.userInfo,\n          parentcolumnlist: dataparent\n        });\n        const timezone = rsapi.post(\"timezone/getTimeZone\");\n        const materialReq3 = rsapi.post('materialinventory/getMaterialInventoryByID', {\n          'nmaterialcatcode': masterData['SelectedMaterialCategory'].nmaterialcatcode,\n          'nmaterialtypecode': masterData['SelectedMaterialType'][0].nmaterialtypecode,\n          'nmaterialcode': masterData['SelectedMaterialCrumb']['jsondata'].nmaterialcode,\n          \"userinfo\": loginInfo.userInfo\n        });\n        urlArray = [Materialinvreq, MaterialInvreq1, MaterialInv, timezone, materialReq3];\n        dispatch(initRequest(true));\n        Axios.all(urlArray).then(response => {\n          templateData = response[0].data;\n          data = [...data, ...dataparent];\n          templateData = parentChildComboLoad(data, { ...response[0].data,\n            ...response[1].data\n          }, selectedRecord, null, withoutCombocomponent, undefined, loginInfo.userInfo.slanguagetypecode, loginInfo.userInfo);\n\n          if (response[2].data[\"EditedMaterialInventory\"].length > 0) {\n            if (response[2].data[\"MaterialInventoryDateFeild\"] !== undefined) {\n              response[2].data[\"MaterialInventoryDateFeild\"].map(temp => {\n                response[2].data[\"EditedMaterialInventory\"][0][temp] = rearrangeDateFormat(loginInfo.userInfo, response[2].data[\"EditedMaterialInventory\"][0][temp]);\n              });\n              response[2].data[\"DateFeildsInventory\"].map(temp => {\n                if (response[2].data[\"EditedMaterialInventory\"][0].hasOwnProperty(temp) && response[2].data[\"EditedMaterialInventory\"][0][temp] === '-') {\n                  delete response[2].data[\"EditedMaterialInventory\"][0][temp];\n                }\n              });\n            } else {\n              response[2].data[\"DateFeildsInventory\"].map(temp => {\n                if (response[2].data[\"EditedMaterialInventory\"][0].hasOwnProperty(temp) && response[2].data[\"EditedMaterialInventory\"][0][temp] === '-') {\n                  delete response[2].data[\"EditedMaterialInventory\"][0][temp];\n                }\n              });\n            }\n          }\n\n          selectedRecord = { ...selectedRecord,\n            ...response[2].data.EditedMaterialInventory[0]\n          };\n\n          if (dateLables) {\n            const timeZoneListMap = constructOptionList(response[3].data || [], \"ntimezonecode\", \"stimezoneid\", undefined, undefined, true);\n            timeZoneList = timeZoneListMap.get(\"OptionList\");\n            response[2].data[\"DateFeildsInventory\"].map(temp => {\n              if (!selectedRecord.hasOwnProperty(temp)) {\n                selectedRecord[`tz${temp}`] = timeZoneList[0];\n              }\n            });\n          }\n\n          masterData['SelectedMaterialCrumb'] = response[4].data.SelectedMaterialCrumb;\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              operation,\n              screenname: 'IDS_MATERIALINVENTORY',\n              timeZoneList,\n              masterData,\n              isSelectedRecordChange: false,\n              showMaterialSection: false,\n              templateData,\n              openModal: true,\n              selectedcombo,\n              selectedRecord,\n              ncontrolCode,\n              loading: false\n            }\n          });\n        }).catch(error => {\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              loading: false\n            }\n          });\n\n          if (error.response.status === 500) {\n            toast.error(intl.formatMessage({\n              id: error.message\n            }));\n          } else {\n            toast.warn(intl.formatMessage({\n              id: error.response.data\n            }));\n          }\n        });\n      } else {\n        toast.warn(intl.formatMessage({\n          id: \"IDS_SELECTQUARENTINEINVENTORY\"\n        }));\n      }\n    }\n  };\n}\nexport function getMaterialInventoryDetails(inputData, masterData, userInfo) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    return rsapi.post(\"materialinventory/getMaterialInventoryDetails\", {\n      \"nmaterialcode\": inputData.nmaterialcode,\n      \"nmaterialcatcode\": inputData.nmaterialcatcode,\n      \"nmaterialtypecode\": inputData.nmaterialtypecode,\n      \"nmaterialinventorycode\": inputData.nmaterialinventorycode,\n      \"userinfo\": userInfo\n    }).then(response => {\n      masterData = { ...masterData,\n        ...response.data\n      };\n      sortData(masterData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(intl.formatMessage({\n          id: error.message\n        }));\n      } else {\n        toast.warn(intl.formatMessage({\n          id: error.response\n        }));\n      }\n    });\n  };\n}\nexport function updateMaterialStatus(masterData, userInfo, ncontrolcode, nflag) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    return rsapi.post(\"materialinventory/updateMaterialStatus\", {\n      nflag: nflag,\n      nmaterialinventorycode: masterData[\"SelectedMaterialInventory\"].nmaterialinventorycode,\n      nmaterialcode: masterData[\"SelectedMaterialInventory\"].nmaterialcode,\n      nmaterialtypecode: masterData[\"SelectedMaterialInventory\"].nmaterialtypecode,\n      nmaterialcatcode: masterData[\"SelectedMaterialInventory\"].nmaterialcatcode,\n      nsectioncode: masterData[\"SelectedMaterialInventory\"].nsectioncode,\n      \"userinfo\": userInfo\n    }).then(response => {\n      masterData = { ...masterData,\n        ...response.data\n      };\n      sortData(masterData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(intl.formatMessage({\n          id: error.message\n        }));\n      } else {\n        toast.warn(intl.formatMessage({\n          id: error.response.data\n        }));\n      }\n    });\n  };\n}\nexport function openDatePopup(masterData, ncontrolCode) {\n  return function (dispatch) {\n    if (masterData.SelectedMaterialCrumb['jsondata']['Open Expiry Need'] !== '4') {\n      dispatch(initRequest(true));\n      return rsapi.post(\"timezone/getTimeZone\").then(response => {\n        let selectedRecord = {}; // const timeZoneListMap = constructOptionList(response.data || [], \"ntimezonecode\",\n        //     \"stimezoneid\", undefined, undefined, true);\n        // const timeZoneList = timeZoneListMap.get(\"OptionList\");\n        // selectedRecord = { 'tzIDS_OPENDATE': timeZoneList[0] }\n        //  dispatch({ type: DEFAULT_RETURN, payload: { timeZoneList, ncontrolCode, selectedRecord, ModaTitle: 'IDS_OPENDATE', showModalPopup: true, masterData, loading: false } });\n\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            operation: 'IDS_OPENDATE',\n            ncontrolCode,\n            selectedRecord,\n            ModaTitle: 'IDS_OPENDATE',\n            showModalPopup: true,\n            masterData,\n            loading: false\n          }\n        });\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(intl.formatMessage({\n            id: error.message\n          }));\n        } else {\n          toast.warn(intl.formatMessage({\n            id: error.response.data\n          }));\n        }\n      });\n    } else {\n      toast.warn(intl.formatMessage({\n        id: 'IDS_OPENDATEISDISABLEDFORTHISMATERIAL'\n      }));\n    }\n  };\n}\nexport function getQuantityTransactionPopup(Data, userInfo, updateInfo, ncontrolCode) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    let urlArray = [];\n    let timeZoneList;\n    const getQuantityTransaction = rsapi.post(\"/materialinventory/getQuantityTransaction\", {\n      \"userinfo\": userInfo,\n      'nmaterialtypecode': Data[\"SelectedMaterialType\"][\"nmaterialtypecode\"],\n      nmaterialinventorycode: Data[\"SelectedMaterialInventory\"][\"nmaterialinventorycode\"],\n      nflag: 1,\n      sprecision: Data.sprecision,\n      needsectionwise: Data.SelectedMaterialCategory.needSectionwise\n    });\n    const timezone = rsapi.post(\"timezone/getTimeZone\");\n    urlArray = [getQuantityTransaction, timezone];\n    Axios.all(urlArray).then(response => {\n      // if (Array.isArray(response[0].data)) {\n      let masterData = {};\n      let isSectionneed;\n      let templateData = [];\n      let selectedRecord = {};\n      let arr1 = [];\n      let arr2 = [];\n      arr1.push(response[0].data.parentcolumnlist[0]);\n      arr2.push(response[0].data.parentcolumnlist[1]);\n      masterData = { ...Data,\n        ...response[0].data,\n        searchedData: undefined\n      };\n      templateData[0] = parentChildComboLoad(arr1, response[0].data, selectedRecord, response[0].data.childcolumnlist[0], undefined, undefined, userInfo.slanguagetypecode, userInfo);\n      templateData[1] = parentChildComboLoad(arr2, response[0].data, selectedRecord, response[0].data.childcolumnlist[1], undefined, undefined, userInfo.slanguagetypecode, userInfo);\n      selectedRecord = { ...templateData[0].selectedRecord,\n        ...templateData[1].selectedRecord,\n        //'IDS_SECTION': Data['SelectedMaterialInventory']['jsondata']['IDS_SECTION'],\n        'Available Quantity/Unit': response[0].data.navailableqty\n      };\n\n      if (selectedRecord.Site) {\n        if (selectedRecord.Site.value === userInfo.nsitecode) {\n          isSectionneed = 3;\n        }\n      } // const timeZoneListMap = constructOptionList(response[1].data || [], \"ntimezonecode\",\n      //     \"stimezoneid\", undefined, undefined, true);\n      // const timeZoneList = timeZoneListMap.get(\"OptionList\");\n      // response[0].data[\"DateFeildsProperties\"].map((temp) => {\n      //     if (!selectedRecord.hasOwnProperty(temp)) {\n      //         selectedRecord[`tz${temp}`] = timeZoneList[0]\n      //     }\n      // })\n      // masterData['QuantityTransactionTemplate'][0].jsondata.map((row) => {\n      //     row.children.map((column) => {\n      //         column.children.map((component,i) => {\n      //             if (component.inputtype === 'combo') {\n      //                 if(selectedRecord.hasOwnProperty(component.label))\n      //                 if (selectedRecord[component.label] === undefined) {\n      //                     if(templateData[0]!==undefined)\n      //                     selectedRecord[component.label] = templateData[0].comboData[component.label][0]\n      //                 }\n      //             }\n      //             if (component.inputtype === 'date') {\n      //                 if (component.hasOwnProperty('timezone')) {\n      //                     const timeZoneListMap = constructOptionList(response[1].data || [], \"ntimezonecode\",\n      //                         \"stimezoneid\", undefined, undefined, true);\n      //                      timeZoneList = timeZoneListMap.get(\"OptionList\");\n      //                     response[0].data[\"DateFeildsProperties\"].map((temp) => {\n      //                         if (!selectedRecord.hasOwnProperty(temp)) {\n      //                             selectedRecord[`tz${temp}`] = timeZoneList[0]\n      //                         }\n      //                     })\n      //                 }\n      //             }\n      //         })\n      //     })\n      // }) \n\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          operation: \"create\",\n          selectedRecord,\n          templateData: templateData[0],\n          timeZoneList,\n          navailableqty: response[0].data.navailableqty,\n          masterData,\n          updateInfo,\n          ncontrolCode,\n          openModal: true,\n          screenname: \"IDS_QUANTITYTRANSACTION\",\n          loading: false,\n          skip: 0,\n          take: 20,\n          isSectionneed\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(intl.formatMessage({\n          id: error.message\n        }));\n      } else {\n        toast.warn(intl.formatMessage({\n          id: error.response.data\n        }));\n      }\n    });\n  };\n}\nexport function getMaterialChildValues(inputParem, userInfo, selectedRecord, parentcolumnlist, childcolumnlist, comboData, childKeyname, parentDependentChild, masterData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post('materialinventory/getChildValuesMaterial', {\n      child: inputParem.child,\n      parentdata: inputParem.item.jsondata,\n      parentsource: inputParem.source,\n      [inputParem.primarykeyField]: inputParem.value,\n      valuemember: inputParem.primarykeyField,\n      userInfo,\n      parentcolumnlist: childcolumnlist[childKeyname],\n      childcolumnlist: childcolumnlist[childKeyname][0],\n      parameters: childcolumnlist[childKeyname][0].hasOwnProperty('nsqlquerycode') ? {\n        nmaterialinventorycode: masterData.SelectedMaterialInventory['nmaterialinventorycode'],\n        nsitecode: selectedRecord.Site.value,\n        nusercode: userInfo.nusercode\n      } : null,\n      userinfo: userInfo\n    }).then(response => {\n      let templateData = [];\n      let temp = selectedRecord[childKeyname];\n      let returnObj = { ...comboData,\n        ...response.data\n      }; //const x=returnObj['Section'] \n\n      templateData = parentChildComboLoad(parentcolumnlist, returnObj, selectedRecord, childcolumnlist, undefined, undefined, userInfo.slanguagetypecode, userInfo);\n\n      if (templateData.comboData['Section'] === undefined) {\n        const optionlist = constructjsonOptionList(response.data['Section'] || [], 'nsectioncode', 'ssectionname', false, false, true, undefined, 'section', false, userInfo.slanguagetypecode);\n        templateData.comboData['Section'] = optionlist.get(\"OptionList\");\n      } //  templateData.comboData={...templateData.comboData,...returnObj }\n\n\n      selectedRecord[childKeyname] = temp;\n      selectedRecord = { ...selectedRecord,\n        [parentDependentChild]: templateData['comboData'][parentDependentChild][0]\n      };\n      const comboData1 = {\n        value: selectedRecord['Transaction Type'] && selectedRecord['Transaction Type'].value\n      };\n      dispatch(getQuantityTransactionOnchange(comboData1, masterData, userInfo, selectedRecord, templateData)); // dispatch( type: DEFAULT_RETURN, payload: {templateData,selectedRecord});\n      //  dispatch({\n      //     type: DEFAULT_RETURN,\n      //     payload: {\n      //         templateData,selectedRecord,loading: false\n      //     }\n      // });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n      toast.error(error);\n    });\n  };\n} // export function getQuantityTransactionOnchange( ) {\n//     return function (dispatch) {\n//         dispatch(initRequest(true));\n//         rsapi.post(\"/materialinventory/getQuantityTransaction\",\n//             {\n//                 \"userinfo\": userInfo, 'nmaterialtypecode': Data[\"SelectedMaterialType\"][\"nmaterialtypecode\"],\n//                 nmaterialinventorycode: Data[\"SelectedMaterialInventory\"][\"nmaterialinventorycode\"]\n//                 , nflag: selectedRecord['Inventory Transaction Type'].value === transactionStatus.ACTIVE ? 2 : 3,\n//                 ntransactiontype: ntransactiontype?selectedRecord['Transaction Type'].value:\n//                 comboData.value,sourceSection:selectedRecord['Section']&&selectedRecord['Section'].value,\n//                 needsectionwise:Data.SelectedMaterialCrumb&&Data.SelectedMaterialCrumb.jsondata.needsectionwise,\n//                 sprecision:Data.sprecision\n//             })\n//             .then(response => { \n//                 dispatch(getQuantityTransactionOnchange(comboData1, masterData, userInfo, selectedRecord, templateData));\n//             })\n//             .catch(error => {\n//                 dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\n//                 toast.error(error);\n//             });\n//     }\n// }\n\nexport function getSiteonchange(comboData, Data, userInfo, selectedRecord, templateData, ntransactiontype) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post('dynamicpreregdesign/getcombovalues', {// \"nunitcode\": selectedcombo['jsondata'][\"nunitcode\"].value\n      // , \"userinfo\": loginInfo.userInfo, \"parentcolumnlist\": comboComponents,\n      // \"filterQueryComponents\": filterQueryComponents1.substring(0, filterQueryComponents1.length - 1),\n      // \"parameters\":{'nmaterialcode': masterData['SelectedMaterialCrumb']['jsondata'].nmaterialcode}\n    }).then(response => {// let templateData = [];\n      // let temp = selectedRecord[childKeyname]\n      // let returnObj = { ...comboData, ...response.data }\n      // templateData = parentChildComboLoad(parentcolumnlist, returnObj, selectedRecord, childcolumnlist, undefined, undefined, userInfo.slanguagetypecode,userInfo)\n      // selectedRecord[childKeyname] = temp\n      // selectedRecord = { ...selectedRecord, [parentDependentChild]: templateData['comboData'][parentDependentChild][0] }\n      // const comboData1 = { value: selectedRecord['Transaction Type'].value }\n      // dispatch(getQuantityTransactionOnchange(comboData1, masterData, userInfo, selectedRecord, templateData)); \n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n      toast.error(error);\n    });\n  };\n}\nexport function getQuantityTransactionOnchange(comboData, Data, userInfo, selectedRecord, templateData, ntransactiontype) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"/materialinventory/getQuantityTransaction\", {\n      \"userinfo\": userInfo,\n      'nmaterialtypecode': Data[\"SelectedMaterialType\"][\"nmaterialtypecode\"] || Data[\"SelectedMaterialType\"][0][\"nmaterialtypecode\"],\n      nmaterialinventorycode: Data[\"SelectedMaterialInventory\"][\"nmaterialinventorycode\"],\n      nflag: selectedRecord['Inventory Transaction Type'].value === transactionStatus.ACTIVE ? 2 : 3,\n      ntransactiontype: ntransactiontype ? selectedRecord['Transaction Type'] && selectedRecord['Transaction Type'].value : comboData.value && comboData.value,\n      sourceSection: selectedRecord['Section'] && selectedRecord['Section'].value,\n      needsectionwise: Data.SelectedMaterialCrumb && Data.SelectedMaterialCrumb.jsondata.needsectionwise,\n      sprecision: Data.sprecision,\n      nsitecode: selectedRecord.Site && selectedRecord.Site.value\n    }).then(response => {\n      let isSectionneed;\n      let masterData = {};\n      let navailableqtyref = {};\n      masterData = { ...Data,\n        ...response.data\n      };\n      selectedRecord = { ...selectedRecord\n      };\n      navailableqtyref = response.data.navailableqtyref;\n\n      if (selectedRecord['Transaction Type']) {\n        selectedRecord = { ...selectedRecord,\n          'Available Quantity/Unit': response.data.navailableqty\n        };\n\n        if (selectedRecord['Transaction Type'].value === transactionStatus.RECEIVED) {\n          masterData['QuantityTransactionTemplate'][0].jsondata.map(row => {\n            row.children.map(column => {\n              column.children.map((component, i) => {\n                if (component.label === 'Available Quantity/Unit') {\n                  delete column.children[i];\n                }\n              });\n            });\n          });\n        }\n      }\n\n      if (selectedRecord.Site) {\n        if (selectedRecord.Site.value === userInfo.nsitecode) {\n          isSectionneed = 3; //    selectedRecord['Transaction Type']=templateData.comboData['Transaction Type'][1]\n        } else {//   isSectionneed = 4; \n        }\n      }\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          operation: \"create\",\n          selectedRecord,\n          templateData,\n          navailableqtyref,\n          masterData,\n          openModal: true,\n          screenname: \"IDS_QUANTITYTRANSACTION\",\n          loading: false,\n          skip: 0,\n          take: 20,\n          isSectionneed\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n      toast.error(error);\n    });\n  };\n}\nexport function addMaterialInventoryFile(inputParam, param) {\n  return dispatch => {\n    dispatch(initRequest(true));\n    let urlArray = [rsapi.post(\"/materialinventory/getMaterialInventoryLinkMaster\", {\n      nmaterialinventorycode: param.nmaterialinventorycode && param.nmaterialinventorycode,\n      userinfo: inputParam.userInfo\n    })];\n\n    if (inputParam.operation === \"update\") {\n      urlArray.push(rsapi.post(\"/materialinventory/editMaterialInventoryFile\", {\n        userinfo: inputParam.userInfo,\n        nmaterialinventorycode: param.nmaterialinventorycode && param.nmaterialinventorycode,\n        nmaterialinventoryfilecode: inputParam.selectedRecord.nmaterialinventoryfilecode\n      }));\n    }\n\n    Axios.all(urlArray).then(response => {\n      const linkMap = constructOptionList(response[0].data.LinkMaster, \"nlinkcode\", \"slinkname\", false, false, true);\n      const linkmaster = linkMap.get(\"OptionList\");\n      let selectedRecord = {};\n      const defaultLink = linkmaster.filter(items => items.item.ndefaultlink === transactionStatus.YES);\n      let disabled = false;\n      let editObject = {};\n\n      if (inputParam.operation === \"update\") {\n        editObject = response[1].data;\n        let nlinkcode = {};\n        let link = {};\n\n        if (editObject[\"jsondata\"].nattachmenttypecode === attachmentType.LINK) {\n          nlinkcode = {\n            \"label\": editObject[\"jsondata\"].slinkname,\n            \"value\": editObject[\"jsondata\"].nlinkcode\n          };\n          link = {\n            slinkfilename: editObject[\"jsondata\"].sfilename,\n            slinkdescription: editObject[\"jsondata\"].sdescription,\n            nlinkdefaultstatus: editObject[\"jsondata\"].ndefaultstatus,\n            sfilesize: '',\n            nfilesize: 0,\n            ndefaultstatus: 4,\n            sfilename: ''\n          };\n        } else {\n          nlinkcode = defaultLink.length > 0 ? defaultLink[0] : \"\";\n          link = {\n            slinkfilename: '',\n            slinkdescription: '',\n            nlinkdefaultstatus: 4,\n            sfilesize: editObject[\"jsondata\"].sfilesize,\n            nfilesize: editObject[\"jsondata\"].nfilesize,\n            ndefaultstatus: editObject[\"jsondata\"].ndefaultstatus,\n            ssystemfilename: editObject[\"jsondata\"].ssystemfilename,\n            sfilename: editObject[\"jsondata\"].sfilename\n          };\n        }\n\n        selectedRecord = { ...link,\n          sdescription: editObject[\"jsondata\"].sdescription,\n          nmaterialinventoryfilecode: editObject[\"jsondata\"].nmaterialinventoryfilecode,\n          nattachmenttypecode: editObject[\"jsondata\"].nattachmenttypecode,\n          nlinkcode\n        };\n      } else {\n        selectedRecord = {\n          nattachmenttypecode: response[0].data.AttachmentType.length > 0 ? response[0].data.AttachmentType[0].nattachmenttypecode : attachmentType.FTP,\n          nlinkcode: defaultLink.length > 0 ? defaultLink[0] : \"\",\n          disabled\n        };\n      }\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          openModal: true,\n          dcreateddate: inputParam.selectedRecord && rearrangeDateFormat(inputParam.userInfo, inputParam.selectedRecord.dcreateddate),\n          operation: inputParam.operation,\n          screenname: inputParam.screenName,\n          ncontrolCode: inputParam.ncontrolCode,\n          selectedRecord,\n          loading: false,\n          linkMaster: linkmaster,\n          showSaveContinue: false,\n          editFiles: editObject.nattachmenttypecode === attachmentType.FTP ? editObject : {}\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/actions/MaterialInventoryAction.js"],"names":["rsapi","DEFAULT_RETURN","sortData","constructOptionList","parentChildComboLoad","rearrangeDateFormat","constructjsonOptionList","toast","Axios","initRequest","intl","attachmentType","transactionStatus","initialcombochangeMaterialInvget","nmaterialtypecode","nmaterialcatcode","data","userInfo","dispatch","post","then","response","masterData","searchedData","undefined","type","payload","loading","catch","error","formatMessage","id","message","getMaterialInventoryByID","selectedcombo","selectedcombouser","selectedMaterialcombo","Data","value","nmaterialcode","skip","take","getAddMaterialInventoryPopup","operation","loginInfo","ncontrolCode","selectedRecord","urlArray","timeZoneList","templateData","dataparent","withoutCombocomponent","filterQueryComponents","Layout","selectedTemplate","jsondata","map","row","children","column","component","hasOwnProperty","push","componentrow","inputtype","comboComponents","displaymember","label","source","valuemember","filterQueryComponents1","temp","nsqlquerycode","MaterialInvreq","substring","length","MaterialInvreq1","child","childValue","parentdata","nunitcode","parentsource","parentcolumnlist","materialReq3","timezone","all","splice","temp1","temp2","slanguagetypecode","dateLables","timeZoneListMap","get","SelectedMaterialCrumb","screenname","showMaterialSection","openModal","status","warn","MaterialCategoryMain","MaterialCombo","ntranscode","RETIRED","RELEASED","EXPIRED","MaterialInv","SelectedMaterialInventory","nmaterialinventorycode","Materialinvreq","EditedMaterialInventory","isSelectedRecordChange","getMaterialInventoryDetails","inputData","updateMaterialStatus","ncontrolcode","nflag","nsectioncode","openDatePopup","ModaTitle","showModalPopup","getQuantityTransactionPopup","updateInfo","getQuantityTransaction","sprecision","needsectionwise","SelectedMaterialCategory","needSectionwise","isSectionneed","arr1","arr2","childcolumnlist","navailableqty","Site","nsitecode","getMaterialChildValues","inputParem","comboData","childKeyname","parentDependentChild","item","primarykeyField","parameters","nusercode","userinfo","returnObj","optionlist","comboData1","getQuantityTransactionOnchange","getSiteonchange","ntransactiontype","ACTIVE","sourceSection","navailableqtyref","RECEIVED","i","addMaterialInventoryFile","inputParam","param","nmaterialinventoryfilecode","linkMap","LinkMaster","linkmaster","defaultLink","filter","items","ndefaultlink","YES","disabled","editObject","nlinkcode","link","nattachmenttypecode","LINK","slinkname","slinkfilename","sfilename","slinkdescription","sdescription","nlinkdefaultstatus","ndefaultstatus","sfilesize","nfilesize","ssystemfilename","AttachmentType","FTP","dcreateddate","screenName","linkMaster","showSaveContinue","editFiles"],"mappings":"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","sourcesContent":["\r\n\r\nimport rsapi from '../rsapi';\r\nimport { DEFAULT_RETURN } from './LoginTypes';\r\nimport { sortData, constructOptionList, parentChildComboLoad, rearrangeDateFormat, constructjsonOptionList } from '../components/CommonScript'\r\nimport { toast } from 'react-toastify';\r\nimport Axios from 'axios';\r\nimport { initRequest } from './LoginAction';\r\nimport { intl } from '../components/App';\r\nimport { attachmentType, transactionStatus } from '../components/Enumeration';\r\n\r\n\r\nexport function initialcombochangeMaterialInvget(nmaterialtypecode, nmaterialcatcode, data, userInfo) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/materialinventory/getMaterialInventorycombo\", { nmaterialtypecode, nmaterialcatcode: nmaterialcatcode && nmaterialcatcode, \"userinfo\": userInfo })\r\n            .then(response => {\r\n                const masterData = { ...data, ...response.data, searchedData: undefined }\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData, loading: false\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                toast.error(intl.formatMessage({ id: error.message }));\r\n            });\r\n    }\r\n}\r\n\r\nexport function getMaterialInventoryByID(selectedcombo, selectedcombouser, selectedMaterialcombo, Data, userInfo) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/materialinventory/getMaterialInventoryByID\", selectedcombouser !== undefined ? {\r\n            nmaterialtypecode: selectedcombo['nmaterialtypecode'].value !== undefined ?\r\n                selectedcombo['nmaterialtypecode'].value : selectedcombo['nmaterialtypecode'],\r\n            nmaterialcatcode: selectedcombouser['nmaterialcatcode'].value !== undefined ?\r\n                selectedcombouser['nmaterialcatcode'].value : selectedcombouser['nmaterialcatcode'],\r\n            nmaterialcode: selectedMaterialcombo[\"nmaterialcode\"].value !== undefined ?\r\n                selectedMaterialcombo[\"nmaterialcode\"].value : selectedMaterialcombo[\"nmaterialcode\"]\r\n            , \"userinfo\": userInfo\r\n        } : {\r\n            nmaterialtypecode: selectedcombo['nmaterialtypecode'].value\r\n\r\n            , \"userinfo\": userInfo\r\n        })\r\n            .then(response => {\r\n                let masterData = {}\r\n\r\n                masterData = { ...Data, ...response.data, searchedData: undefined }\r\n\r\n                sortData(masterData);\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData, loading: false, skip: 0, take: 20\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                toast.error(intl.formatMessage({ id: error.message }));\r\n            });\r\n    }\r\n}\r\nexport function getAddMaterialInventoryPopup(operation, loginInfo, selectedcombo,\r\n    ncontrolCode, masterData, selectedRecord) {\r\n    return function (dispatch) {\r\n        if (operation === \"create\") {\r\n            if (selectedcombo !== undefined) {\r\n                let urlArray = [];\r\n                let timeZoneList;\r\n                let templateData = [];\r\n                let data = [];\r\n                let dataparent = [];\r\n                const withoutCombocomponent = []\r\n                let filterQueryComponents = [];\r\n                const Layout = masterData.selectedTemplate[0].jsondata\r\n                Layout.map(row => {\r\n                    row.children.map(column => {\r\n                        column.children.map(component => {\r\n                            if (component.hasOwnProperty(\"parent\")) {\r\n                                dataparent.push(component)\r\n                            }\r\n                            if (component.hasOwnProperty(\"nsqlquerycode\")) {\r\n                                filterQueryComponents.push(component)\r\n                            }\r\n                            return component.hasOwnProperty(\"children\") ? component.children.map(componentrow => {\r\n                                if (componentrow.inputtype === \"combo\" && !(component.hasOwnProperty(\"parent\"))) {\r\n                                    if (componentrow.hasOwnProperty(\"parent\")) {\r\n                                        dataparent.push(componentrow)\r\n                                    }\r\n                                    else {\r\n                                        data.push(componentrow)\r\n                                    }\r\n                                }\r\n                                if (componentrow.hasOwnProperty(\"nsqlquerycode\")) {\r\n                                    filterQueryComponents.push(componentrow)\r\n                                }\r\n                            })\r\n                                : component.inputtype === \"combo\" && !(component.hasOwnProperty(\"parent\")) ? data.push(component) : withoutCombocomponent.push(component)\r\n                        })\r\n                    })\r\n                })\r\n                const comboComponents = data\r\n                dataparent[0] = {\r\n                    displaymember: dataparent[0].displaymember,\r\n                    inputtype: dataparent[0].inputtype,\r\n                    label: dataparent[0].label,\r\n                    source: dataparent[0].source,\r\n                    type: dataparent[0].type,\r\n                    valuemember: dataparent[0].valuemember\r\n                }\r\n                let filterQueryComponents1 = []\r\n                filterQueryComponents.map(temp => {\r\n                    // filterQueryComponents1.push({'nsqlquerycode':temp.nsqlquerycode})\r\n                    filterQueryComponents1 += temp.nsqlquerycode + ','\r\n                })\r\n                const MaterialInvreq = rsapi.post(\"dynamicpreregdesign/getComboValues\",\r\n                    {\r\n                        \"nunitcode\": selectedcombo['jsondata'][\"nunitcode\"].value\r\n                        , \"userinfo\": loginInfo.userInfo, \"parentcolumnlist\": comboComponents,\r\n                        \"filterQueryComponents\": filterQueryComponents1.substring(0, filterQueryComponents1.length - 1),\r\n                        \"parameters\": { 'nmaterialcode': masterData['SelectedMaterialCrumb']['jsondata'].nmaterialcode }\r\n                    });\r\n                const MaterialInvreq1 = rsapi.post('dynamicpreregdesign/getChildValues', {\r\n                    child: Layout[0].children[0].children[0].childValue,\r\n                    parentdata: { nunitcode: selectedcombo['jsondata'][\"nunitcode\"].value },\r\n                    parentsource: 'unit',\r\n                    'nunitcode': selectedcombo['jsondata'][\"nunitcode\"].value,\r\n                    valuemember: 'nunitcode',\r\n                    'userinfo': loginInfo.userInfo,\r\n                    parentcolumnlist: dataparent\r\n                });\r\n                const materialReq3 = rsapi.post('materialinventory/getMaterialInventoryByID', {\r\n                    'nmaterialcatcode': masterData['SelectedMaterialCategory'].nmaterialcatcode,\r\n                    'nmaterialtypecode': masterData['SelectedMaterialType'][0].nmaterialtypecode,\r\n                    'nmaterialcode': masterData['SelectedMaterialCrumb']['jsondata'].nmaterialcode,\r\n                    'userinfo': loginInfo.userInfo\r\n                });\r\n                const timezone = rsapi.post(\"timezone/getTimeZone\");\r\n                urlArray = [MaterialInvreq, MaterialInvreq1, timezone, materialReq3];\r\n                dispatch(initRequest(true));\r\n                Axios.all(urlArray)\r\n                    .then(response => {\r\n                        templateData = response[0].data;\r\n                        data.splice(1, 0, dataparent[0])\r\n                        let temp1 = []\r\n                        const temp2 = { ...response[0].data, ...response[1].data }\r\n                        templateData = parentChildComboLoad(data, temp2, selectedRecord, null, withoutCombocomponent, undefined, loginInfo.userInfo.slanguagetypecode, loginInfo.userInfo)\r\n                        let dateLables = []\r\n                        const Layout = masterData.selectedTemplate[0].jsondata\r\n                        Layout.map((row) => {\r\n                            row.children.map((column) => {\r\n                                column.children.map((component) => {\r\n                                    // if (component.inputtype === 'combo') {\r\n                                    //     selectedRecord[component.label] = templateData[\"comboData\"][component.label]\r\n                                    //         && templateData[\"comboData\"][component.label][0]\r\n                                    // }\r\n                                    // else\r\n                                    if (component.inputtype === 'date') {\r\n                                        if (component.hasOwnProperty('timezone'))\r\n                                            dateLables.push(component.label)\r\n\r\n                                    }\r\n                                    component.hasOwnProperty(\"children\") && component.children.map(\r\n                                        (componentrow) => {\r\n                                            if (componentrow.inputtype === 'combo') {\r\n                                                if (componentrow.label === 'Unit')\r\n                                                    selectedRecord[componentrow.label] = templateData[\"comboData\"][componentrow.label]\r\n                                                        && templateData[\"comboData\"][componentrow.label][0]\r\n                                            }\r\n                                            else\r\n                                                if (componentrow.inputtype === 'date') {\r\n                                                    if (componentrow.hasOwnProperty('timezone'))\r\n                                                        dateLables.push(componentrow.label)\r\n\r\n                                                }\r\n\r\n                                        }\r\n                                    )\r\n                                })\r\n                            })\r\n                        })\r\n                        if (dateLables) {\r\n                            const timeZoneListMap = constructOptionList(response[2].data || [], \"ntimezonecode\",\r\n                                \"stimezoneid\", undefined, undefined, true);\r\n                            timeZoneList = timeZoneListMap.get(\"OptionList\");\r\n                            dateLables.map((temp) => {\r\n                                selectedRecord[`tz${temp}`] = timeZoneList[0]\r\n                            })\r\n                        }\r\n                        masterData['SelectedMaterialCrumb'] = response[3].data.SelectedMaterialCrumb\r\n                        dispatch({\r\n\r\n                            type: DEFAULT_RETURN, payload: {\r\n                                operation, timeZoneList, screenname: 'IDS_MATERIALINVENTORY', masterData, selectedRecord, showMaterialSection: false, templateData, openModal: true,\r\n                                ncontrolCode, loading: false\r\n                            }\r\n                        });\r\n                    })\r\n                    .catch(error => {\r\n                        dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                        if (error.response.status === 500) {\r\n                            toast.error(intl.formatMessage({ id: error.message }));\r\n                        }\r\n                        else {\r\n                            toast.warn(intl.formatMessage({ id: error.response.data }));\r\n                        }\r\n                    })\r\n            }\r\n            else {\r\n                if(masterData.MaterialCategoryMain===undefined){\r\n                    toast.warn(intl.formatMessage({ id: 'IDS_CONFIGMATERIALCATANDMATERIAL' }));\r\n                }\r\n                if(masterData.MaterialCombo){\r\n                    if(masterData.MaterialCombo.length===0){\r\n                        toast.warn(intl.formatMessage({ id: 'IDS_CONFIGMATERIAL' }));\r\n                    }\r\n                }\r\n             \r\n            }\r\n        }\r\n        else {\r\n            let urlArray = [];\r\n            let templateData = [];\r\n            let data = [];\r\n            let filterQueryComponents = [];\r\n            let dataparent = [];\r\n            let dateLables = [];\r\n            let timeZoneList;\r\n            const withoutCombocomponent = []\r\n            const Layout = masterData.selectedTemplate[0].jsondata\r\n            if (masterData[\"SelectedMaterialInventory\"].ntranscode !== transactionStatus.RETIRED &&\r\n                masterData[\"SelectedMaterialInventory\"].ntranscode !== transactionStatus.RELEASED\r\n                && masterData[\"SelectedMaterialInventory\"].ntranscode !== transactionStatus.EXPIRED) {\r\n                Layout.map(row => {\r\n                    row.children.map(column => {\r\n                        column.children.map(component => {\r\n                            if (component.hasOwnProperty(\"parent\")) {\r\n                                dataparent.push(component)\r\n                            }\r\n                            if (component.hasOwnProperty(\"nsqlquerycode\")) {\r\n                                filterQueryComponents.push(component)\r\n                            }\r\n                            if (component.hasOwnProperty('timezone')) {\r\n                                dateLables.push(component.label)\r\n                            }\r\n                            return component.hasOwnProperty(\"children\") ? component.children.map(componentrow => {\r\n                                if (componentrow.inputtype === \"combo\" && !(component.hasOwnProperty(\"parent\"))) {\r\n                                    if (componentrow.hasOwnProperty(\"parent\")) {\r\n                                        dataparent.push(componentrow)\r\n                                    }\r\n                                    else {\r\n                                        data.push(componentrow)\r\n                                    }\r\n                                }\r\n                                if (componentrow.hasOwnProperty(\"nsqlquerycode\")) {\r\n                                    filterQueryComponents.push(componentrow)\r\n                                }\r\n                                if (component.hasOwnProperty('timezone')) {\r\n                                    dateLables.push(component.label)\r\n                                }\r\n                            })\r\n                                : component.inputtype === \"combo\" && !(component.hasOwnProperty(\"parent\")) ? data.push(component) : withoutCombocomponent.push(component)\r\n                        })\r\n                    })\r\n                })\r\n                const comboComponents = data\r\n                const MaterialInv = rsapi.post(\"/materialinventory/getMaterialInventoryEdit\",\r\n                    {\r\n                        'nmaterialtypecode': masterData.SelectedMaterialInventory.nmaterialtypecode,\r\n                        'nmaterialinventorycode': masterData.SelectedMaterialInventory.nmaterialinventorycode, \"userinfo\": loginInfo.userInfo\r\n                    });\r\n                dataparent[0] = {\r\n                    displaymember: dataparent[0].displaymember,\r\n                    inputtype: dataparent[0].inputtype,\r\n                    label: dataparent[0].label,\r\n                    source: dataparent[0].source,\r\n                    type: dataparent[0].type,\r\n                    valuemember: dataparent[0].valuemember\r\n                }\r\n                let filterQueryComponents1 = []\r\n                filterQueryComponents.map(temp => {\r\n                    // filterQueryComponents1.push({'nsqlquerycode':temp.nsqlquerycode})\r\n                    filterQueryComponents1 += temp.nsqlquerycode + ','\r\n                })\r\n                const Materialinvreq = rsapi.post(\"dynamicpreregdesign/getComboValues\",\r\n                    {\r\n                        \"nunitcode\": selectedcombo['jsondata'][\"nunitcode\"].value\r\n                        , \"userinfo\": loginInfo.userInfo, \"parentcolumnlist\": comboComponents,\r\n                        \"filterQueryComponents\": filterQueryComponents1.substring(0, filterQueryComponents1.length - 1),\r\n                        \"parameters\": { 'nmaterialcode': masterData['SelectedMaterialCrumb']['jsondata'].nmaterialcode }\r\n                    });\r\n                const MaterialInvreq1 = rsapi.post('dynamicpreregdesign/getChildValues', {\r\n                    child: Layout[0].children[0].children[0].childValue,\r\n                    parentdata: { nunitcode: selectedcombo['jsondata'][\"nunitcode\"].value },\r\n                    parentsource: 'unit',\r\n                    'nunitcode': selectedcombo['jsondata'][\"nunitcode\"].value,\r\n                    valuemember: 'nunitcode',\r\n                    \"userinfo\": loginInfo.userInfo,\r\n                    parentcolumnlist: dataparent\r\n                });\r\n                const timezone = rsapi.post(\"timezone/getTimeZone\");\r\n                const materialReq3 = rsapi.post('materialinventory/getMaterialInventoryByID', {\r\n                    'nmaterialcatcode': masterData['SelectedMaterialCategory'].nmaterialcatcode,\r\n                    'nmaterialtypecode': masterData['SelectedMaterialType'][0].nmaterialtypecode,\r\n                    'nmaterialcode': masterData['SelectedMaterialCrumb']['jsondata'].nmaterialcode,\r\n                    \"userinfo\": loginInfo.userInfo\r\n                });\r\n                urlArray = [Materialinvreq, MaterialInvreq1, MaterialInv, timezone, materialReq3];\r\n\r\n                dispatch(initRequest(true));\r\n                Axios.all(urlArray)\r\n                    .then(response => {\r\n                        templateData = response[0].data;\r\n                        data = [...data, ...dataparent]\r\n                        templateData = parentChildComboLoad(data, { ...response[0].data, ...response[1].data }, selectedRecord, null, withoutCombocomponent, undefined, loginInfo.userInfo.slanguagetypecode, loginInfo.userInfo)\r\n\r\n                        if (response[2].data[\"EditedMaterialInventory\"].length > 0) {\r\n                            if (response[2].data[\"MaterialInventoryDateFeild\"] !== undefined) {\r\n                                response[2].data[\"MaterialInventoryDateFeild\"].map((temp) => {\r\n                                    response[2].data[\"EditedMaterialInventory\"][0][temp] =\r\n                                        rearrangeDateFormat(loginInfo.userInfo, response[2].data[\"EditedMaterialInventory\"][0][temp])\r\n                                })\r\n                                response[2].data[\"DateFeildsInventory\"].map((temp) => {\r\n                                    if (response[2].data[\"EditedMaterialInventory\"][0].hasOwnProperty(temp) &&\r\n                                        response[2].data[\"EditedMaterialInventory\"][0][temp] === '-') {\r\n                                        delete response[2].data[\"EditedMaterialInventory\"][0][temp]\r\n                                    }\r\n                                })\r\n                            }\r\n                            else {\r\n                                response[2].data[\"DateFeildsInventory\"].map((temp) => {\r\n                                    if (response[2].data[\"EditedMaterialInventory\"][0].hasOwnProperty(temp) &&\r\n                                        response[2].data[\"EditedMaterialInventory\"][0][temp] === '-') {\r\n                                        delete response[2].data[\"EditedMaterialInventory\"][0][temp]\r\n                                    }\r\n                                })\r\n                            }\r\n                        }\r\n                        selectedRecord = { ...selectedRecord, ...response[2].data.EditedMaterialInventory[0] }\r\n                        if (dateLables) {\r\n                            const timeZoneListMap = constructOptionList(response[3].data || [], \"ntimezonecode\",\r\n                                \"stimezoneid\", undefined, undefined, true);\r\n                            timeZoneList = timeZoneListMap.get(\"OptionList\");\r\n\r\n                            response[2].data[\"DateFeildsInventory\"].map((temp) => {\r\n                                if (!selectedRecord.hasOwnProperty(temp)) {\r\n                                    selectedRecord[`tz${temp}`] = timeZoneList[0]\r\n                                }\r\n                            })\r\n                        }\r\n                        masterData['SelectedMaterialCrumb'] = response[4].data.SelectedMaterialCrumb\r\n                        dispatch({\r\n                            type: DEFAULT_RETURN, payload: {\r\n                                operation, screenname: 'IDS_MATERIALINVENTORY', timeZoneList, masterData, isSelectedRecordChange: false, showMaterialSection: false, templateData, openModal: true, selectedcombo, selectedRecord,\r\n                                ncontrolCode, loading: false\r\n                            }\r\n                        });\r\n\r\n                    })\r\n                    .catch(error => {\r\n                        dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                        if (error.response.status === 500) {\r\n                            toast.error(intl.formatMessage({ id: error.message }));\r\n                        }\r\n                        else {\r\n                            toast.warn(intl.formatMessage({ id: error.response.data }));\r\n                        }\r\n                    })\r\n            }\r\n            else {\r\n                toast.warn(intl.formatMessage({ id: \"IDS_SELECTQUARENTINEINVENTORY\" }));\r\n            }\r\n        }\r\n\r\n    }\r\n}\r\nexport function getMaterialInventoryDetails(inputData, masterData, userInfo) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"materialinventory/getMaterialInventoryDetails\", {\r\n            \"nmaterialcode\": inputData.nmaterialcode,\r\n            \"nmaterialcatcode\": inputData.nmaterialcatcode,\r\n            \"nmaterialtypecode\": inputData.nmaterialtypecode,\r\n            \"nmaterialinventorycode\": inputData.nmaterialinventorycode,\r\n            \"userinfo\": userInfo\r\n        })\r\n            .then(response => {\r\n                masterData = { ...masterData, ...response.data };\r\n                sortData(masterData);\r\n                dispatch({ type: DEFAULT_RETURN, payload: { masterData, loading: false } });\r\n            }).catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(intl.formatMessage({ id: error.message }));\r\n                }\r\n                else {\r\n                    toast.warn(intl.formatMessage({ id: error.response }));\r\n                }\r\n            })\r\n\r\n    }\r\n}\r\n\r\nexport function updateMaterialStatus(masterData, userInfo, ncontrolcode, nflag) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"materialinventory/updateMaterialStatus\", {\r\n            nflag: nflag,\r\n            nmaterialinventorycode: masterData[\"SelectedMaterialInventory\"].nmaterialinventorycode,\r\n            nmaterialcode: masterData[\"SelectedMaterialInventory\"].nmaterialcode,\r\n            nmaterialtypecode: masterData[\"SelectedMaterialInventory\"].nmaterialtypecode,\r\n            nmaterialcatcode: masterData[\"SelectedMaterialInventory\"].nmaterialcatcode,\r\n            nsectioncode: masterData[\"SelectedMaterialInventory\"].nsectioncode,\r\n            \"userinfo\": userInfo\r\n        })\r\n            .then(response => {\r\n                masterData = { ...masterData, ...response.data };\r\n                sortData(masterData);\r\n                dispatch({ type: DEFAULT_RETURN, payload: { masterData, loading: false } });\r\n            }).catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(intl.formatMessage({ id: error.message }));\r\n                }\r\n                else {\r\n                    toast.warn(intl.formatMessage({ id: error.response.data }));\r\n                }\r\n            })\r\n\r\n    }\r\n}\r\n\r\n\r\nexport function openDatePopup(masterData, ncontrolCode) {\r\n    return function (dispatch) {\r\n        if (masterData.SelectedMaterialCrumb['jsondata']['Open Expiry Need'] !== '4') {\r\n            dispatch(initRequest(true));\r\n            return rsapi.post(\"timezone/getTimeZone\")\r\n                .then(response => {\r\n                    let selectedRecord = {};\r\n                    // const timeZoneListMap = constructOptionList(response.data || [], \"ntimezonecode\",\r\n                    //     \"stimezoneid\", undefined, undefined, true);\r\n                    // const timeZoneList = timeZoneListMap.get(\"OptionList\");\r\n                    // selectedRecord = { 'tzIDS_OPENDATE': timeZoneList[0] }\r\n                    //  dispatch({ type: DEFAULT_RETURN, payload: { timeZoneList, ncontrolCode, selectedRecord, ModaTitle: 'IDS_OPENDATE', showModalPopup: true, masterData, loading: false } });\r\n\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { operation: 'IDS_OPENDATE', ncontrolCode, selectedRecord, ModaTitle: 'IDS_OPENDATE', showModalPopup: true, masterData, loading: false } });\r\n                }).catch(error => {\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(intl.formatMessage({ id: error.message }));\r\n                    }\r\n                    else {\r\n                        toast.warn(intl.formatMessage({ id: error.response.data }));\r\n                    }\r\n                })\r\n        }\r\n        else {\r\n            toast.warn(intl.formatMessage({ id: 'IDS_OPENDATEISDISABLEDFORTHISMATERIAL' }));\r\n        }\r\n\r\n    }\r\n}\r\n\r\n\r\nexport function getQuantityTransactionPopup(Data, userInfo, updateInfo, ncontrolCode) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        let urlArray = [];\r\n        let timeZoneList;\r\n        const getQuantityTransaction = rsapi.post(\"/materialinventory/getQuantityTransaction\",\r\n            {\r\n                \"userinfo\": userInfo, 'nmaterialtypecode': Data[\"SelectedMaterialType\"][\"nmaterialtypecode\"],\r\n                nmaterialinventorycode: Data[\"SelectedMaterialInventory\"][\"nmaterialinventorycode\"]\r\n                , nflag: 1, sprecision: Data.sprecision, needsectionwise: Data.SelectedMaterialCategory.needSectionwise\r\n            })\r\n        const timezone = rsapi.post(\"timezone/getTimeZone\");\r\n        urlArray = [getQuantityTransaction, timezone]\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                // if (Array.isArray(response[0].data)) {\r\n                let masterData = {}\r\n                let isSectionneed;\r\n                let templateData = [];\r\n                let selectedRecord = {};\r\n                let arr1 = []\r\n                let arr2 = []\r\n                arr1.push(response[0].data.parentcolumnlist[0])\r\n                arr2.push(response[0].data.parentcolumnlist[1])\r\n                masterData = { ...Data, ...response[0].data, searchedData: undefined }\r\n                templateData[0] = parentChildComboLoad(arr1, response[0].data, selectedRecord,\r\n                    response[0].data.childcolumnlist[0], undefined, undefined, userInfo.slanguagetypecode, userInfo)\r\n                templateData[1] = parentChildComboLoad(arr2, response[0].data, selectedRecord,\r\n                    response[0].data.childcolumnlist[1], undefined, undefined, userInfo.slanguagetypecode, userInfo)\r\n\r\n                selectedRecord = {\r\n                    ...templateData[0].selectedRecord, ...templateData[1].selectedRecord,\r\n                    //'IDS_SECTION': Data['SelectedMaterialInventory']['jsondata']['IDS_SECTION'],\r\n                    'Available Quantity/Unit': response[0].data.navailableqty,\r\n                }\r\n                if (selectedRecord.Site) {\r\n                    if (selectedRecord.Site.value === userInfo.nsitecode) {\r\n                        isSectionneed = 3;\r\n                    }\r\n                }\r\n\r\n                // const timeZoneListMap = constructOptionList(response[1].data || [], \"ntimezonecode\",\r\n                //     \"stimezoneid\", undefined, undefined, true);\r\n                // const timeZoneList = timeZoneListMap.get(\"OptionList\");\r\n                // response[0].data[\"DateFeildsProperties\"].map((temp) => {\r\n                //     if (!selectedRecord.hasOwnProperty(temp)) {\r\n                //         selectedRecord[`tz${temp}`] = timeZoneList[0]\r\n                //     }\r\n                // })\r\n                // masterData['QuantityTransactionTemplate'][0].jsondata.map((row) => {\r\n                //     row.children.map((column) => {\r\n                //         column.children.map((component,i) => {\r\n                //             if (component.inputtype === 'combo') {\r\n                //                 if(selectedRecord.hasOwnProperty(component.label))\r\n                //                 if (selectedRecord[component.label] === undefined) {\r\n                //                     if(templateData[0]!==undefined)\r\n                //                     selectedRecord[component.label] = templateData[0].comboData[component.label][0]\r\n                //                 }\r\n                //             }\r\n                //             if (component.inputtype === 'date') {\r\n                //                 if (component.hasOwnProperty('timezone')) {\r\n                //                     const timeZoneListMap = constructOptionList(response[1].data || [], \"ntimezonecode\",\r\n                //                         \"stimezoneid\", undefined, undefined, true);\r\n                //                      timeZoneList = timeZoneListMap.get(\"OptionList\");\r\n                //                     response[0].data[\"DateFeildsProperties\"].map((temp) => {\r\n                //                         if (!selectedRecord.hasOwnProperty(temp)) {\r\n                //                             selectedRecord[`tz${temp}`] = timeZoneList[0]\r\n                //                         }\r\n                //                     })\r\n                //                 }\r\n                //             }\r\n\r\n                //         })\r\n                //     })\r\n                // }) \r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        operation: \"create\", selectedRecord, templateData: templateData[0], timeZoneList, navailableqty: response[0].data.navailableqty,\r\n                        masterData, updateInfo, ncontrolCode, openModal: true, screenname: \"IDS_QUANTITYTRANSACTION\",\r\n                        loading: false, skip: 0, take: 20, isSectionneed\r\n                    }\r\n                });\r\n\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(intl.formatMessage({ id: error.message }));\r\n                }\r\n                else {\r\n                    toast.warn(intl.formatMessage({ id: error.response.data }));\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getMaterialChildValues(inputParem, userInfo, selectedRecord,\r\n    parentcolumnlist, childcolumnlist, comboData, childKeyname, parentDependentChild, masterData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post('materialinventory/getChildValuesMaterial', {\r\n            child: inputParem.child,\r\n            parentdata: inputParem.item.jsondata,\r\n            parentsource: inputParem.source,\r\n            [inputParem.primarykeyField]: inputParem.value,\r\n            valuemember: inputParem.primarykeyField,\r\n            userInfo,\r\n            parentcolumnlist: childcolumnlist[childKeyname],\r\n            childcolumnlist: childcolumnlist[childKeyname][0],\r\n            parameters: childcolumnlist[childKeyname][0].hasOwnProperty('nsqlquerycode') ? {\r\n                nmaterialinventorycode: masterData.SelectedMaterialInventory['nmaterialinventorycode'],\r\n                nsitecode: selectedRecord.Site.value,nusercode:userInfo.nusercode\r\n            } : null,\r\n            userinfo: userInfo\r\n        })\r\n            .then(response => {\r\n                let templateData = [];\r\n                let temp = selectedRecord[childKeyname]\r\n                let returnObj = { ...comboData, ...response.data }\r\n                //const x=returnObj['Section'] \r\n                templateData = parentChildComboLoad(parentcolumnlist, returnObj, selectedRecord, childcolumnlist, undefined, undefined, userInfo.slanguagetypecode, userInfo)\r\n\r\n                if (templateData.comboData['Section'] === undefined) {\r\n                    const optionlist = constructjsonOptionList(response.data['Section'] || [], 'nsectioncode',\r\n                        'ssectionname', false, false, true, undefined, 'section', false, userInfo.slanguagetypecode)\r\n                    templateData.comboData['Section'] = optionlist.get(\"OptionList\");\r\n                }\r\n\r\n                //  templateData.comboData={...templateData.comboData,...returnObj }\r\n                selectedRecord[childKeyname] = temp\r\n                selectedRecord = { ...selectedRecord, [parentDependentChild]: templateData['comboData'][parentDependentChild][0] }\r\n                const comboData1 = { value: selectedRecord['Transaction Type'] && selectedRecord['Transaction Type'].value }\r\n\r\n                dispatch(getQuantityTransactionOnchange(comboData1, masterData, userInfo, selectedRecord, templateData));\r\n                // dispatch( type: DEFAULT_RETURN, payload: {templateData,selectedRecord});\r\n                //  dispatch({\r\n                //     type: DEFAULT_RETURN,\r\n                //     payload: {\r\n                //         templateData,selectedRecord,loading: false\r\n                //     }\r\n                // });\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                toast.error(error);\r\n            });\r\n    }\r\n}\r\n// export function getQuantityTransactionOnchange( ) {\r\n//     return function (dispatch) {\r\n//         dispatch(initRequest(true));\r\n//         rsapi.post(\"/materialinventory/getQuantityTransaction\",\r\n//             {\r\n//                 \"userinfo\": userInfo, 'nmaterialtypecode': Data[\"SelectedMaterialType\"][\"nmaterialtypecode\"],\r\n//                 nmaterialinventorycode: Data[\"SelectedMaterialInventory\"][\"nmaterialinventorycode\"]\r\n//                 , nflag: selectedRecord['Inventory Transaction Type'].value === transactionStatus.ACTIVE ? 2 : 3,\r\n//                 ntransactiontype: ntransactiontype?selectedRecord['Transaction Type'].value:\r\n//                 comboData.value,sourceSection:selectedRecord['Section']&&selectedRecord['Section'].value,\r\n//                 needsectionwise:Data.SelectedMaterialCrumb&&Data.SelectedMaterialCrumb.jsondata.needsectionwise,\r\n//                 sprecision:Data.sprecision\r\n//             })\r\n//             .then(response => { \r\n//                 dispatch(getQuantityTransactionOnchange(comboData1, masterData, userInfo, selectedRecord, templateData));\r\n//             })\r\n//             .catch(error => {\r\n//                 dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n//                 toast.error(error);\r\n//             });\r\n//     }\r\n// }\r\nexport function getSiteonchange(comboData, Data, userInfo, selectedRecord, templateData, ntransactiontype) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post('dynamicpreregdesign/getcombovalues', {\r\n            // \"nunitcode\": selectedcombo['jsondata'][\"nunitcode\"].value\r\n            // , \"userinfo\": loginInfo.userInfo, \"parentcolumnlist\": comboComponents,\r\n            // \"filterQueryComponents\": filterQueryComponents1.substring(0, filterQueryComponents1.length - 1),\r\n            // \"parameters\":{'nmaterialcode': masterData['SelectedMaterialCrumb']['jsondata'].nmaterialcode}\r\n        })\r\n            .then(response => {\r\n                // let templateData = [];\r\n                // let temp = selectedRecord[childKeyname]\r\n                // let returnObj = { ...comboData, ...response.data }\r\n                // templateData = parentChildComboLoad(parentcolumnlist, returnObj, selectedRecord, childcolumnlist, undefined, undefined, userInfo.slanguagetypecode,userInfo)\r\n                // selectedRecord[childKeyname] = temp\r\n                // selectedRecord = { ...selectedRecord, [parentDependentChild]: templateData['comboData'][parentDependentChild][0] }\r\n                // const comboData1 = { value: selectedRecord['Transaction Type'].value }\r\n                // dispatch(getQuantityTransactionOnchange(comboData1, masterData, userInfo, selectedRecord, templateData)); \r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                toast.error(error);\r\n            });\r\n    }\r\n}\r\nexport function getQuantityTransactionOnchange(comboData, Data, userInfo, selectedRecord, templateData, ntransactiontype) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/materialinventory/getQuantityTransaction\",\r\n            {\r\n                \"userinfo\": userInfo, 'nmaterialtypecode': Data[\"SelectedMaterialType\"][\"nmaterialtypecode\"] || Data[\"SelectedMaterialType\"][0][\"nmaterialtypecode\"],\r\n                nmaterialinventorycode: Data[\"SelectedMaterialInventory\"][\"nmaterialinventorycode\"]\r\n                , nflag: selectedRecord['Inventory Transaction Type'].value === transactionStatus.ACTIVE ? 2 : 3,\r\n                ntransactiontype: ntransactiontype ? selectedRecord['Transaction Type'] && selectedRecord['Transaction Type'].value :\r\n                    comboData.value && comboData.value, sourceSection: selectedRecord['Section'] && selectedRecord['Section'].value,\r\n                needsectionwise: Data.SelectedMaterialCrumb && Data.SelectedMaterialCrumb.jsondata.needsectionwise,\r\n                sprecision: Data.sprecision, nsitecode: selectedRecord.Site && selectedRecord.Site.value\r\n            })\r\n            .then(response => {\r\n                let isSectionneed;\r\n                let masterData = {}\r\n                let navailableqtyref = {}\r\n                masterData = { ...Data, ...response.data }\r\n                selectedRecord = {\r\n                    ...selectedRecord \r\n                }\r\n                navailableqtyref = response.data.navailableqtyref\r\n                if (selectedRecord['Transaction Type']) {\r\n                    selectedRecord = {\r\n                        ...selectedRecord,\r\n                        'Available Quantity/Unit': response.data.navailableqty,\r\n                    }\r\n                    if (selectedRecord['Transaction Type'].value === transactionStatus.RECEIVED) {\r\n                        masterData['QuantityTransactionTemplate'][0].jsondata.map((row) => {\r\n                            row.children.map((column) => {\r\n                                column.children.map((component, i) => {\r\n                                    if (component.label === 'Available Quantity/Unit') {\r\n                                        delete column.children[i]\r\n                                    }\r\n                                })\r\n                            })\r\n                        })\r\n                    }\r\n                }\r\n                if (selectedRecord.Site) {\r\n                    if (selectedRecord.Site.value === userInfo.nsitecode) {\r\n                        isSectionneed = 3; \r\n                     //    selectedRecord['Transaction Type']=templateData.comboData['Transaction Type'][1]\r\n                    }\r\n                    else\r\n                    {\r\n                     //   isSectionneed = 4; \r\n                    }\r\n                }\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        operation: \"create\", selectedRecord, templateData, navailableqtyref,\r\n                        masterData, openModal: true, screenname: \"IDS_QUANTITYTRANSACTION\",\r\n                        loading: false, skip: 0, take: 20, isSectionneed\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                toast.error(error);\r\n            });\r\n    }\r\n}\r\n\r\nexport function addMaterialInventoryFile(inputParam, param) {\r\n    return (dispatch) => {\r\n        dispatch(initRequest(true));\r\n        let urlArray = [rsapi.post(\"/materialinventory/getMaterialInventoryLinkMaster\", {\r\n            nmaterialinventorycode: param.nmaterialinventorycode && param.nmaterialinventorycode,\r\n            userinfo: inputParam.userInfo\r\n        })];\r\n        if (inputParam.operation === \"update\") {\r\n            urlArray.push(rsapi.post(\"/materialinventory/editMaterialInventoryFile\", {\r\n                userinfo: inputParam.userInfo,\r\n                nmaterialinventorycode: param.nmaterialinventorycode && param.nmaterialinventorycode,\r\n                nmaterialinventoryfilecode: inputParam.selectedRecord.nmaterialinventoryfilecode\r\n            }))\r\n        }\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                const linkMap = constructOptionList(response[0].data.LinkMaster, \"nlinkcode\", \"slinkname\", false, false, true);\r\n                const linkmaster = linkMap.get(\"OptionList\");\r\n                let selectedRecord = {};\r\n                const defaultLink = linkmaster.filter(items => items.item.ndefaultlink === transactionStatus.YES);\r\n                let disabled = false;\r\n                let editObject = {};\r\n                if (inputParam.operation === \"update\") {\r\n                    editObject = response[1].data;\r\n                    let nlinkcode = {};\r\n                    let link = {};\r\n                    if (editObject[\"jsondata\"].nattachmenttypecode === attachmentType.LINK) {\r\n                        nlinkcode = {\r\n                            \"label\": editObject[\"jsondata\"].slinkname,\r\n                            \"value\": editObject[\"jsondata\"].nlinkcode\r\n                        }\r\n\r\n                        link = {\r\n                            slinkfilename: editObject[\"jsondata\"].sfilename,\r\n                            slinkdescription: editObject[\"jsondata\"].sdescription,\r\n                            nlinkdefaultstatus: editObject[\"jsondata\"].ndefaultstatus,\r\n                            sfilesize: '',\r\n                            nfilesize: 0,\r\n                            ndefaultstatus: 4,\r\n                            sfilename: '',\r\n                        }\r\n\r\n                    } else {\r\n                        nlinkcode = defaultLink.length > 0 ? defaultLink[0] : \"\"\r\n                        link = {\r\n                            slinkfilename: '',\r\n                            slinkdescription: '',\r\n                            nlinkdefaultstatus: 4,\r\n                            sfilesize: editObject[\"jsondata\"].sfilesize,\r\n                            nfilesize: editObject[\"jsondata\"].nfilesize,\r\n                            ndefaultstatus: editObject[\"jsondata\"].ndefaultstatus,\r\n                            ssystemfilename: editObject[\"jsondata\"].ssystemfilename,\r\n                            sfilename: editObject[\"jsondata\"].sfilename,\r\n                        }\r\n                    }\r\n                    selectedRecord = {\r\n                        ...link,\r\n                        sdescription: editObject[\"jsondata\"].sdescription,\r\n                        nmaterialinventoryfilecode: editObject[\"jsondata\"].nmaterialinventoryfilecode,\r\n                        nattachmenttypecode: editObject[\"jsondata\"].nattachmenttypecode,\r\n                        nlinkcode,\r\n                    };\r\n                } else {\r\n                    selectedRecord = {\r\n                        nattachmenttypecode: response[0].data.AttachmentType.length > 0 ?\r\n                            response[0].data.AttachmentType[0].nattachmenttypecode : attachmentType.FTP,\r\n                        nlinkcode: defaultLink.length > 0 ? defaultLink[0] : \"\",\r\n                        disabled\r\n                    };\r\n                }\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        openModal: true,\r\n                        dcreateddate: inputParam.selectedRecord && rearrangeDateFormat(inputParam.userInfo, inputParam.selectedRecord.dcreateddate),\r\n                        operation: inputParam.operation,\r\n                        screenname: inputParam.screenName,\r\n                        ncontrolCode: inputParam.ncontrolCode,\r\n                        selectedRecord,\r\n                        loading: false,\r\n                        linkMaster: linkmaster,\r\n                        showSaveContinue: false,\r\n                        editFiles: editObject.nattachmenttypecode === attachmentType.FTP ? editObject : {}\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                });\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            });\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}