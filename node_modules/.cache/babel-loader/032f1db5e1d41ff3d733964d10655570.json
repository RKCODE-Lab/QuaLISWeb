{"ast":null,"code":"var _jsxFileName = \"D:\\\\LIMSWFH\\\\LIMSPOSTGRESQL\\\\QuaLISWeb\\\\src\\\\pages\\\\credentialmanagement\\\\UserRoleConfiguration.jsx\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { injectIntl } from 'react-intl';\nimport { Row, Col } from 'react-bootstrap';\nimport { Grid, GridColumn } from '@progress/kendo-react-grid';\nimport { process } from '@progress/kendo-data-query';\nimport { toast } from 'react-toastify'; // import { css } from 'styled-components';\n\nimport ColumnMenu from '../../components/data-grid/ColumnMenu';\nimport CustomSwitch from '../../components/custom-switch/custom-switch.component';\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\nimport Esign from '../../pages/audittrail/Esign';\nimport { callService, crudMaster, updateStore, validateEsignCredential } from '../../actions';\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\nimport { showEsign, getControlMap } from '../../components/CommonScript';\nimport { transactionStatus } from '../../components/Enumeration';\nimport { ListWrapper, AtTableWrap } from '../../components/client-group.styles';\nimport { loadMessages, LocalizationProvider } from '@progress/kendo-react-intl';\nimport messages_en from '../../assets/translations/en.json';\nimport messages_de from '../../assets/translations/de.json';\nimport ReactTooltip from 'react-tooltip';\n\nconst mapStateToProps = state => {\n  return {\n    Login: state.Login\n  };\n};\n\nconst messages = {\n  'en-US': messages_en,\n  'ko-KR': messages_de\n};\n\nclass UserRoleConfiguration extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.dataStateChange = event => {\n      this.setState({\n        dataResult: process(this.state.data, event.dataState),\n        dataState: event.dataState\n      });\n    };\n\n    this.closeModal = () => {\n      let loadEsign = this.props.Login.loadEsign;\n      let openModal = this.props.Login.openModal;\n      let selectedRecord = this.props.Login.selectedRecord;\n\n      if (this.props.Login.loadEsign) {\n        loadEsign = false;\n        openModal = false;\n        selectedRecord = {};\n        const data = [...this.state.data];\n\n        if (this.state.selectedUserRole[this.state.columnName] === transactionStatus.YES) {\n          data[this.state.rowIndex][this.state.columnName] = transactionStatus.NO;\n        } else {\n          data[this.state.rowIndex][this.state.columnName] = transactionStatus.YES;\n        }\n\n        this.setState({\n          data\n        });\n      } else {\n        openModal = false;\n        selectedRecord = {};\n      }\n\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          openModal,\n          loadEsign,\n          selectedRecord\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onInputOnChange = event => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (event.target.name === \"agree\") {\n        selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\n      } else {\n        selectedRecord[event.target.name] = event.target.value;\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onSaveClick = (selectedRecord, saveType, formRef) => {\n      let operation = \"\";\n      let inputData = [];\n      inputData[\"userinfo\"] = this.props.Login.userInfo; // edit    \n\n      inputData[this.props.Login.inputParam.methodUrl.toLowerCase()] = selectedRecord;\n      this.extractedColumnList.map(item => {\n        return inputData[this.props.Login.inputParam.methodUrl.toLowerCase()][item] = selectedRecord[item] ? selectedRecord[item] : \"\";\n      });\n      operation = \"update\";\n      const inputParam = {\n        classUrl: this.props.Login.inputParam.classUrl,\n        methodUrl: this.props.Login.inputParam.methodUrl,\n        displayName: this.props.Login.inputParam.displayName,\n        inputData: inputData,\n        operation: operation,\n        saveType,\n        formRef\n      };\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, 114)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData: this.props.Login.masterData\n            },\n            openModal: true,\n            screenName: this.props.intl.formatMessage({\n              id: this.props.Login.inputParam.displayName\n            }),\n            operation: operation //this.props.Login.operation\n\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\n      } //this.props.crudMaster(inputParam);\n\n    };\n\n    this.validateEsign = () => {\n      const inputParam = {\n        inputData: {\n          \"userinfo\": { ...this.props.Login.userInfo,\n            sreason: this.state.selectedRecord[\"esigncomments\"]\n          },\n          password: this.state.selectedRecord[\"esignpassword\"]\n        },\n        screenData: this.props.Login.screenData\n      };\n      this.props.validateEsignCredential(inputParam, \"openModal\");\n    };\n\n    this.formRef = React.createRef();\n    this.extractedColumnList = [];\n    this.columnWidth = [];\n    const dataState = {\n      skip: 0,\n      take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n    };\n    this.state = {\n      addScreen: false,\n      data: [],\n      masterStatus: \"\",\n      error: \"\",\n      selectedRecord: {},\n      dataResult: [],\n      dataState: dataState,\n      selectedUserRole: {},\n      columnName: '',\n      rowIndex: 0\n    };\n  }\n\n  render() {\n    loadMessages(messages[this.props.Login.userInfo.slanguagetypecode], \"lang\"); // this.columnWidth = [{ \"width\": \"35%\" },{ \"width\": \"35%\" },{ \"width\": \"35%\" },{ \"width\": \"35%\" }];\n    // this.columnWidth = [{ \"width\": \"20%\" },{ \"width\": \"20%\" },{ \"width\": \"20%\" },{ \"width\": \"20%\" },{ \"width\": \"20%\" }];\n\n    this.extractedColumnList = [\"nuserrolecode\", \"suserrolename\", \"nneedapprovalflow\", \"nneedresultflow\"]; //, \"nneedproductflow\", \"nwithdrawnmail\"\n\n    const pageSizes = this.props.Login.settings && this.props.Login.settings[15].split(\",\").map(setting => parseInt(setting));\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(ListWrapper, {\n      className: \"client-list-content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(AtTableWrap, {\n      className: \"at-list-table\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(LocalizationProvider, {\n      language: \"lang\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Grid // className={this.setPercentage()}\n    // sortable\n    , Object.assign({\n      className: \"active-paging\",\n      style: {\n        height: '600px'\n      },\n      resizable: true,\n      reorderable: true //scrollable=\"none\"\n      ,\n      scrollable: \"scrollable\",\n      pageable: {\n        buttonCount: 5,\n        pageSizes: pageSizes,\n        previousNext: false\n      },\n      data: this.state.dataResult\n    }, this.state.dataState, {\n      onDataStateChange: this.dataStateChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 37\n      }\n    }), /*#__PURE__*/React.createElement(GridColumn, {\n      field: \"suserrolename\",\n      columnMenu: ColumnMenu,\n      title: this.props.intl.formatMessage({\n        id: \"IDS_USERROLENAME\"\n      }),\n      cell: row => /*#__PURE__*/React.createElement(\"td\", {\n        \"data-tip\": row[\"dataItem\"]['suserrolename'] // data-for=\"tooltip-grid-wrap\"\n        ,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 49\n        }\n      }, row[\"dataItem\"]['suserrolename']),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 41\n      }\n    }), /*#__PURE__*/React.createElement(GridColumn, {\n      field: \"nneedapprovalflow\",\n      title: this.props.intl.formatMessage({\n        id: \"IDS_NEEDAPPROVALFLOW\"\n      }),\n      headerClassName: \"text-center\",\n      cell: row => /*#__PURE__*/React.createElement(\"td\", {\n        style: {\n          textAlign: \"center\"\n        } // data-tip={\"kfkf\"} \n        //  data-for=\"tooltip-grid-wrap\"\n        ,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 49\n        }\n      }, /*#__PURE__*/React.createElement(CustomSwitch, {\n        type: \"switch\",\n        id: row[\"dataItem\"][\"nneedapprovalflow\"],\n        onChange: event => this.onInputOnChangeRole(event, row[\"dataItem\"], \"nneedapprovalflow\", row.dataIndex),\n        checked: row[\"dataItem\"][\"nneedapprovalflow\"] === transactionStatus.YES ? true : false,\n        name: row[\"dataItem\"][\"nuserrolecode\"] + \"_\" + row.dataIndex + \"_\" + row.columnIndex,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 53\n        }\n      })),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 41\n      }\n    }), /*#__PURE__*/React.createElement(GridColumn, {\n      field: \"nneedresultflow\",\n      title: this.props.intl.formatMessage({\n        id: \"IDS_NEEDRESULTFLOW\"\n      }),\n      headerClassName: \"text-center\",\n      cell: row => /*#__PURE__*/React.createElement(\"td\", {\n        style: {\n          textAlign: \"center\"\n        } //data-tip=\"jdjd\" \n        //  data-for=\"tooltip-grid-wrap\"\n        ,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 49\n        }\n      }, /*#__PURE__*/React.createElement(CustomSwitch, {\n        type: \"switch\",\n        id: row[\"dataItem\"][\"nneedresultflow\"],\n        onChange: event => this.onInputOnChangeRole(event, row[\"dataItem\"], \"nneedresultflow\", row.dataIndex),\n        checked: row[\"dataItem\"][\"nneedresultflow\"] === transactionStatus.YES ? true : false,\n        name: row[\"dataItem\"][\"nuserrolecode\"] + \"_\" + row.dataIndex + \"_\" + row.columnIndex,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 53\n        }\n      })),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 41\n      }\n    })))))))), /*#__PURE__*/React.createElement(SlideOutModal, {\n      show: this.props.Login.openModal,\n      closeModal: this.closeModal,\n      operation: this.props.Login.operation,\n      inputParam: this.props.Login.inputParam,\n      screenName: this.props.Login.screenName,\n      onSaveClick: this.onSaveClick,\n      esign: this.props.Login.loadEsign,\n      validateEsign: this.validateEsign,\n      masterStatus: this.props.Login.masterStatus,\n      updateStore: this.props.updateStore,\n      selectedRecord: this.state.selectedRecord,\n      addComponent: this.props.Login.loadEsign ? /*#__PURE__*/React.createElement(Esign, {\n        operation: this.props.Login.operation,\n        formatMessage: this.props.intl.formatMessage,\n        onInputOnChange: this.onInputOnChange,\n        inputParam: this.props.Login.inputParam,\n        selectedRecord: this.state.selectedRecord || {},\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 218,\n          columnNumber: 25\n        }\n      }) : /*#__PURE__*/React.createElement(React.Fragment, null),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 17\n      }\n    }));\n  } // setPercentage = () => {\n  //     let styles = css;\n  //     let idx = 1;\n  //     this.columnWidth.forEach(item => {\n  //         styles += `.k-grid-header col:nth-of-type(${idx}){\n  //                 width: ${item.width}\n  //             }\n  //             .k-grid-table col:nth-of-type(${idx}){\n  //                 width: ${item.width}\n  //             }`\n  //         idx++;\n  //     })\n  // }\n\n\n  componentDidUpdate(previousProps) {\n    ReactTooltip.rebuild();\n\n    if (this.props.Login.masterData !== previousProps.Login.masterData) {\n      if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\n        const userRoleControlRights = [];\n\n        if (this.props.Login.userRoleControlRights) {\n          this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item => userRoleControlRights.push(item.ncontrolcode));\n        }\n\n        const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode);\n        this.setState({\n          userRoleControlRights,\n          controlMap,\n          data: this.props.Login.masterData,\n          dataResult: process(this.props.Login.masterData, this.state.dataState)\n        });\n      } else {\n        this.setState({\n          data: this.props.Login.masterData,\n          isOpen: false,\n          selectedRecord: this.props.Login.selectedRecord,\n          dataResult: process(this.props.Login.masterData, this.state.dataState)\n        });\n      }\n    } else if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\n      this.setState({\n        selectedRecord: this.props.Login.selectedRecord\n      });\n    } // if (this.props.Login.masterData !== previousProps.Login.masterData) {\n    //     this.setState({\n    //         data: this.props.Login.masterData,\n    //         addScreen: this.props.Login.showScreen,\n    //         dataResult: process(this.props.Login.masterData, this.state.dataState),\n    //     });\n    // }\n\n  }\n\n  onInputOnChangeRole(event, rowItem, columnName, rowIndex) {\n    const selectedRecord = rowItem || {};\n    const selectedUserRole = rowItem || {};\n    let isCheck = false;\n\n    if (columnName === \"nneedresultflow\") {\n      if (event.target.checked === true) {\n        if (rowItem[\"nneedapprovalflow\"] === transactionStatus.YES) {\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_SELECTAPPROVALFLOWORRESULTFLOW\"\n          }));\n        } else {\n          isCheck = true;\n        }\n      } else {\n        // toast.warn(\"If you want deselect, Select another role\");\n        isCheck = true;\n      }\n    } else if (columnName === \"nneedapprovalflow\") {\n      if (event.target.checked === true) {\n        if (rowItem[\"nneedresultflow\"] === transactionStatus.YES) {\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_SELECTAPPROVALFLOWORRESULTFLOW\"\n          }));\n        } else {\n          isCheck = true;\n        }\n      } else {\n        isCheck = true;\n      }\n    } else if (columnName === \"nneedproductflow\" || columnName === \"nwithdrawnmail\" || columnName === \"nfailmail\") {\n      isCheck = true;\n    }\n\n    if (isCheck === true) {\n      selectedRecord[columnName] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\n      selectedUserRole[columnName] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\n      this.onSaveClick(selectedRecord, undefined, undefined);\n      this.setState({\n        selectedUserRole,\n        columnName,\n        rowIndex\n      });\n    }\n  }\n\n}\n\nexport default connect(mapStateToProps, {\n  callService,\n  crudMaster,\n  updateStore,\n  validateEsignCredential\n})(injectIntl(UserRoleConfiguration));","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/pages/credentialmanagement/UserRoleConfiguration.jsx"],"names":["React","connect","injectIntl","Row","Col","Grid","GridColumn","process","toast","ColumnMenu","CustomSwitch","SlideOutModal","Esign","callService","crudMaster","updateStore","validateEsignCredential","DEFAULT_RETURN","showEsign","getControlMap","transactionStatus","ListWrapper","AtTableWrap","loadMessages","LocalizationProvider","messages_en","messages_de","ReactTooltip","mapStateToProps","state","Login","messages","UserRoleConfiguration","Component","constructor","props","dataStateChange","event","setState","dataResult","data","dataState","closeModal","loadEsign","openModal","selectedRecord","selectedUserRole","columnName","YES","rowIndex","NO","updateInfo","typeName","onInputOnChange","target","name","checked","value","onSaveClick","saveType","formRef","operation","inputData","userInfo","inputParam","methodUrl","toLowerCase","extractedColumnList","map","item","classUrl","displayName","userRoleControlRights","nformcode","screenData","masterData","screenName","intl","formatMessage","id","validateEsign","sreason","password","createRef","columnWidth","skip","take","settings","parseInt","addScreen","masterStatus","error","render","slanguagetypecode","pageSizes","split","setting","height","buttonCount","previousNext","row","textAlign","onInputOnChangeRole","dataIndex","columnIndex","componentDidUpdate","previousProps","rebuild","Object","values","push","ncontrolcode","controlMap","isOpen","rowItem","isCheck","warn","undefined"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { injectIntl } from 'react-intl';\r\nimport { Row, Col } from 'react-bootstrap';\r\nimport { Grid, GridColumn } from '@progress/kendo-react-grid';\r\nimport { process } from '@progress/kendo-data-query';\r\nimport { toast } from 'react-toastify';\r\n// import { css } from 'styled-components';\r\nimport ColumnMenu from '../../components/data-grid/ColumnMenu';\r\nimport CustomSwitch from '../../components/custom-switch/custom-switch.component';\r\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\r\nimport Esign from '../../pages/audittrail/Esign';\r\nimport { callService, crudMaster, updateStore, validateEsignCredential } from '../../actions';\r\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\r\nimport { showEsign, getControlMap } from '../../components/CommonScript';\r\nimport { transactionStatus } from '../../components/Enumeration';\r\nimport { ListWrapper, AtTableWrap } from '../../components/client-group.styles'\r\nimport { loadMessages, LocalizationProvider } from '@progress/kendo-react-intl';\r\nimport messages_en from '../../assets/translations/en.json';\r\nimport messages_de from '../../assets/translations/de.json';\r\nimport ReactTooltip from 'react-tooltip';\r\nconst mapStateToProps = state => {\r\n    return ({ Login: state.Login })\r\n}\r\nconst messages = {\r\n    'en-US': messages_en,\r\n    'ko-KR': messages_de\r\n}\r\nclass UserRoleConfiguration extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.formRef = React.createRef();\r\n        this.extractedColumnList = [];\r\n        this.columnWidth = [];\r\n\r\n        const dataState = {\r\n            skip: 0,\r\n            take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5,\r\n        };\r\n        this.state = {\r\n            addScreen: false, data: [], masterStatus: \"\", error: \"\", selectedRecord: {},\r\n            dataResult: [],\r\n            dataState: dataState,\r\n            selectedUserRole: {}, columnName:'', rowIndex: 0\r\n        }\r\n    }\r\n\r\n    dataStateChange = (event) => {\r\n        this.setState({\r\n            dataResult: process(this.state.data, event.dataState),\r\n            dataState: event.dataState\r\n        });\r\n    }\r\n\r\n    closeModal = () => {\r\n        let loadEsign = this.props.Login.loadEsign;\r\n        let openModal = this.props.Login.openModal;\r\n        let selectedRecord = this.props.Login.selectedRecord;\r\n        if (this.props.Login.loadEsign) {\r\n           \r\n                loadEsign = false;\r\n                openModal = false;  \r\n                selectedRecord ={};            \r\n                const data = [...this.state.data];\r\n                if (this.state.selectedUserRole[this.state.columnName] === transactionStatus.YES){\r\n                   data[this.state.rowIndex][this.state.columnName] = transactionStatus.NO; \r\n\r\n                }\r\n                else{\r\n                    data[this.state.rowIndex][this.state.columnName] = transactionStatus.YES; \r\n\r\n                }\r\n                this.setState({ data });\r\n        }\r\n        else {\r\n            openModal = false;\r\n            selectedRecord = {};\r\n        }\r\n\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { openModal, loadEsign, selectedRecord }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n\r\n    }\r\n\r\n    render() {\r\n        loadMessages(messages[this.props.Login.userInfo.slanguagetypecode], \"lang\");\r\n        // this.columnWidth = [{ \"width\": \"35%\" },{ \"width\": \"35%\" },{ \"width\": \"35%\" },{ \"width\": \"35%\" }];\r\n        // this.columnWidth = [{ \"width\": \"20%\" },{ \"width\": \"20%\" },{ \"width\": \"20%\" },{ \"width\": \"20%\" },{ \"width\": \"20%\" }];\r\n        this.extractedColumnList = [\"nuserrolecode\", \"suserrolename\", \"nneedapprovalflow\", \"nneedresultflow\"];\r\n        //, \"nneedproductflow\", \"nwithdrawnmail\"\r\n        const pageSizes = this.props.Login.settings && this.props.Login.settings[15].split(\",\").map(setting => parseInt(setting))\r\n        return (<>\r\n                <Row>\r\n                    <Col>\r\n                        <ListWrapper className=\"client-list-content\">\r\n                            {/* <ReactTooltip place=\"bottom\" id=\"tooltip-grid-wrap\" globalEventOff='click' /> */}\r\n                            <AtTableWrap className=\"at-list-table\">\r\n                                <LocalizationProvider language=\"lang\">\r\n                                    <>\r\n                                    <Grid\r\n                                        // className={this.setPercentage()}\r\n                                        // sortable\r\n                                        className={\"active-paging\"}\r\n                                        style={{ height: '600px'}}\r\n                                        resizable\r\n                                        reorderable\r\n                                        //scrollable=\"none\"\r\n                                        scrollable={\"scrollable\"}\r\n                                        pageable={ { buttonCount: 5, pageSizes: pageSizes , previousNext: false } }\r\n                                        data={this.state.dataResult}\r\n                                        {...this.state.dataState}\r\n                                        onDataStateChange={this.dataStateChange}>\r\n\r\n                                        <GridColumn \r\n                                            field=\"suserrolename\" \r\n                                            columnMenu= {ColumnMenu}\r\n                                            title={this.props.intl.formatMessage({ id: \"IDS_USERROLENAME\" })}\r\n                                            cell={(row) => (\r\n                                                <td data-tip={row[\"dataItem\"]['suserrolename']} \r\n                                               // data-for=\"tooltip-grid-wrap\"\r\n                                               >\r\n                                                    {row[\"dataItem\"]['suserrolename']}\r\n                                                </td>\r\n                                            )}\r\n                                        />\r\n                                        <GridColumn\r\n                                            field={\"nneedapprovalflow\"}\r\n                                            title={this.props.intl.formatMessage({ id: \"IDS_NEEDAPPROVALFLOW\" })}\r\n                                            headerClassName=\"text-center\" \r\n                                            cell={(row) => (\r\n                                                <td style={{ textAlign: \"center\" }}\r\n                                               // data-tip={\"kfkf\"} \r\n                                              //  data-for=\"tooltip-grid-wrap\"\r\n                                                >\r\n                                                    <CustomSwitch type=\"switch\" id={row[\"dataItem\"][\"nneedapprovalflow\"]}\r\n                                                        onChange={(event) => this.onInputOnChangeRole(event, row[\"dataItem\"], \"nneedapprovalflow\", row.dataIndex)}\r\n                                                        checked={row[\"dataItem\"][\"nneedapprovalflow\"] === transactionStatus.YES ? true : false}\r\n                                                        name={row[\"dataItem\"][\"nuserrolecode\"] + \"_\" + row.dataIndex + \"_\" + row.columnIndex} />\r\n                                                </td>)}\r\n                                        />\r\n                                        <GridColumn\r\n                                            field={\"nneedresultflow\"}\r\n                                            title={this.props.intl.formatMessage({ id: \"IDS_NEEDRESULTFLOW\" })}\r\n                                            headerClassName=\"text-center\" \r\n                                            cell={(row) => (\r\n                                                <td style={{ textAlign: \"center\" }}   \r\n                                                //data-tip=\"jdjd\" \r\n                                              //  data-for=\"tooltip-grid-wrap\"\r\n                                                >\r\n                                                    <CustomSwitch type=\"switch\" id={row[\"dataItem\"][\"nneedresultflow\"]}\r\n                                                        onChange={(event) => this.onInputOnChangeRole(event, row[\"dataItem\"], \"nneedresultflow\", row.dataIndex)}\r\n                                                        checked={row[\"dataItem\"][\"nneedresultflow\"] === transactionStatus.YES ? true : false}\r\n                                                        name={row[\"dataItem\"][\"nuserrolecode\"] + \"_\" + row.dataIndex + \"_\" + row.columnIndex} />\r\n                                                </td>)}\r\n                                        />\r\n                                        {/* <GridColumn\r\n                                            field={\"nneedproductflow\"}\r\n                                            title={this.props.intl.formatMessage({ id: \"IDS_NEEDPRODUCTFLOW\" })}\r\n                                            headerClassName=\"text-center\"\r\n                                            cell={(row) => (\r\n                                                <td style={{ textAlign: \"center\" }}>\r\n                                                    <CustomSwitch type=\"switch\" id={row[\"dataItem\"][\"nneedproductflow\"]}\r\n                                                        onChange={(event) => this.onInputOnChangeRole(event, row[\"dataItem\"], \"nneedproductflow\", row.dataIndex)}\r\n                                                        checked={row[\"dataItem\"][\"nneedproductflow\"] === transactionStatus.YES ? true : false}\r\n                                                        name={row[\"dataItem\"][\"nuserrolecode\"] + \"_\" + row.dataIndex + \"_\" + row.columnIndex} />\r\n                                                </td>)}\r\n                                        />\r\n                                        <GridColumn\r\n                                            field={\"nwithdrawnmail\"}\r\n                                            width=\"175px\"\r\n                                            title={this.props.intl.formatMessage({ id: \"IDS_WITHDRAWNEMAIL\" })}\r\n                                            headerClassName=\"text-center\"\r\n                                            cell={(row) => (\r\n                                                <td style={{ textAlign: \"center\" }}>\r\n                                                    <CustomSwitch type=\"switch\" id={row[\"dataItem\"][\"nwithdrawnmail\"]}\r\n                                                        onChange={(event) => this.onInputOnChangeRole(event, row[\"dataItem\"], \"nwithdrawnmail\", row.dataIndex)}\r\n                                                        checked={row[\"dataItem\"][\"nwithdrawnmail\"] === transactionStatus.YES ? true : false}\r\n                                                        name={row[\"dataItem\"][\"nuserrolecode\"] + \"_\" + row.dataIndex + \"_\" + row.columnIndex} />\r\n                                                </td>)}\r\n                                        />\r\n                                        <GridColumn\r\n                                            field={\"nfailmail\"}\r\n                                            width=\"175px\"\r\n                                            title={this.props.intl.formatMessage({ id: \"IDS_FAILEMAIL\" })}\r\n                                            headerClassName=\"text-center\"\r\n                                            cell={(row) => (\r\n                                                <td style={{ textAlign: \"center\" }}>\r\n                                                    <CustomSwitch type=\"switch\" id={row[\"dataItem\"][\"nfailmail\"]}\r\n                                                        onChange={(event) => this.onInputOnChangeRole(event, row[\"dataItem\"], \"nfailmail\", row.dataIndex)}\r\n                                                        checked={row[\"dataItem\"][\"nfailmail\"] === transactionStatus.YES ? true : false}\r\n                                                        name={row[\"dataItem\"][\"nuserrolecode\"] + \"_\" + row.dataIndex + \"_\" + row.columnIndex} />\r\n                                                </td>)}\r\n                                        /> */}\r\n                                    </Grid>\r\n                                    </>\r\n                                </LocalizationProvider>\r\n                            </AtTableWrap>\r\n                            {/* <ReactTooltip/> */}\r\n                        </ListWrapper>\r\n                    </Col>\r\n                </Row>\r\n                <SlideOutModal show={this.props.Login.openModal}\r\n                    closeModal={this.closeModal}\r\n                    operation={this.props.Login.operation}\r\n                    inputParam={this.props.Login.inputParam}\r\n                    screenName={this.props.Login.screenName}\r\n                    onSaveClick={this.onSaveClick}\r\n                    esign={this.props.Login.loadEsign}\r\n                    validateEsign={this.validateEsign}\r\n                    masterStatus={this.props.Login.masterStatus}\r\n                    updateStore={this.props.updateStore}\r\n                    selectedRecord={this.state.selectedRecord}\r\n                    addComponent={this.props.Login.loadEsign ?\r\n                        <Esign operation={this.props.Login.operation}\r\n                            formatMessage={this.props.intl.formatMessage}\r\n                            onInputOnChange={this.onInputOnChange}\r\n                            inputParam={this.props.Login.inputParam}\r\n                            selectedRecord={this.state.selectedRecord || {}}\r\n                        />\r\n                        :\r\n                        <>\r\n                        </>\r\n                    }\r\n                />\r\n            </>\r\n        );\r\n    }\r\n    \r\n    // setPercentage = () => {\r\n    //     let styles = css;\r\n    //     let idx = 1;\r\n    //     this.columnWidth.forEach(item => {\r\n    //         styles += `.k-grid-header col:nth-of-type(${idx}){\r\n    //                 width: ${item.width}\r\n    //             }\r\n    //             .k-grid-table col:nth-of-type(${idx}){\r\n    //                 width: ${item.width}\r\n    //             }`\r\n    //         idx++;\r\n    //     })\r\n    // }\r\n\r\n    componentDidUpdate(previousProps) {\r\n        ReactTooltip.rebuild();\r\n        if (this.props.Login.masterData !== previousProps.Login.masterData) {\r\n            if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\r\n                const userRoleControlRights = [];\r\n                if (this.props.Login.userRoleControlRights) {\r\n                    this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item =>\r\n                        userRoleControlRights.push(item.ncontrolcode))\r\n                }\r\n                const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode)\r\n\r\n                this.setState({\r\n                    userRoleControlRights, controlMap, data: this.props.Login.masterData,\r\n                    dataResult: process(this.props.Login.masterData, this.state.dataState),\r\n                });\r\n            }\r\n            else {\r\n                this.setState({\r\n                    data: this.props.Login.masterData,\r\n                    isOpen: false,\r\n                    selectedRecord: this.props.Login.selectedRecord,\r\n                    dataResult: process(this.props.Login.masterData, this.state.dataState),\r\n                });\r\n            }\r\n        }\r\n        else if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\r\n            this.setState({ selectedRecord: this.props.Login.selectedRecord });\r\n        }\r\n        // if (this.props.Login.masterData !== previousProps.Login.masterData) {\r\n        //     this.setState({\r\n        //         data: this.props.Login.masterData,\r\n        //         addScreen: this.props.Login.showScreen,\r\n        //         dataResult: process(this.props.Login.masterData, this.state.dataState),\r\n        //     });\r\n        // }\r\n    }\r\n    onInputOnChangeRole(event, rowItem, columnName, rowIndex) {\r\n\r\n        const selectedRecord = rowItem || {};\r\n        const selectedUserRole = rowItem || {};\r\n        let isCheck = false;\r\n\r\n        if (columnName === \"nneedresultflow\") {\r\n            if (event.target.checked === true) {\r\n                if (rowItem[\"nneedapprovalflow\"] === transactionStatus.YES) {\r\n                    toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTAPPROVALFLOWORRESULTFLOW\" }));\r\n                }\r\n                else {\r\n                    isCheck = true;\r\n                }\r\n            }\r\n            else {\r\n                // toast.warn(\"If you want deselect, Select another role\");\r\n                isCheck = true;\r\n            }\r\n\r\n        }\r\n        else if (columnName === \"nneedapprovalflow\") {\r\n            if (event.target.checked === true) {\r\n                if (rowItem[\"nneedresultflow\"] === transactionStatus.YES) {\r\n                    toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTAPPROVALFLOWORRESULTFLOW\" }));\r\n                }\r\n                else {\r\n                    isCheck = true;\r\n                }\r\n            }\r\n            else {\r\n                isCheck = true;\r\n            }\r\n        }\r\n        else if (columnName === \"nneedproductflow\" || columnName === \"nwithdrawnmail\"|| columnName === \"nfailmail\") {\r\n            isCheck = true;\r\n        }\r\n\r\n        if (isCheck === true) {\r\n            selectedRecord[columnName] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\r\n            selectedUserRole[columnName] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\r\n            this.onSaveClick(selectedRecord, undefined, undefined);\r\n            this.setState({selectedUserRole, columnName, rowIndex});\r\n        }\r\n\r\n\r\n    }\r\n    onInputOnChange = (event) => {\r\n\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n\r\n        if (event.target.name === \"agree\") {\r\n            selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\r\n        }\r\n        else {\r\n            selectedRecord[event.target.name] = event.target.value;\r\n        }\r\n        this.setState({ selectedRecord });\r\n\r\n    }\r\n\r\n\r\n    onSaveClick = (selectedRecord, saveType, formRef) => {\r\n\r\n        let operation = \"\";\r\n        let inputData = [];\r\n        inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n\r\n\r\n        // edit    \r\n        inputData[this.props.Login.inputParam.methodUrl.toLowerCase()] = selectedRecord;\r\n        this.extractedColumnList.map(item => {\r\n            return inputData[this.props.Login.inputParam.methodUrl.toLowerCase()][item] = selectedRecord[item] ? selectedRecord[item] : \"\";\r\n        })\r\n        operation = \"update\";\r\n\r\n        const inputParam = {\r\n            classUrl: this.props.Login.inputParam.classUrl,\r\n            methodUrl: this.props.Login.inputParam.methodUrl,\r\n            displayName: this.props.Login.inputParam.displayName,\r\n            inputData: inputData,\r\n            operation: operation, saveType, formRef\r\n        }\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, 114)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData: this.props.Login.masterData },\r\n                    openModal: true, screenName: this.props.intl.formatMessage({ id: this.props.Login.inputParam.displayName }),\r\n                    operation: operation//this.props.Login.operation\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\r\n        }\r\n        //this.props.crudMaster(inputParam);\r\n\r\n    }\r\n\r\n    validateEsign = () => {\r\n        const inputParam = {\r\n            inputData: {\r\n                \"userinfo\": {\r\n                    ...this.props.Login.userInfo,\r\n                    sreason: this.state.selectedRecord[\"esigncomments\"]\r\n                },\r\n                password: this.state.selectedRecord[\"esignpassword\"]\r\n            },\r\n            screenData: this.props.Login.screenData\r\n        }\r\n        this.props.validateEsignCredential(inputParam, \"openModal\");\r\n    }\r\n}\r\nexport default connect(mapStateToProps, { callService, crudMaster, updateStore, validateEsignCredential })(injectIntl(UserRoleConfiguration));"]},"metadata":{},"sourceType":"module"}