{"ast":null,"code":"var _jsxFileName = \"D:\\\\Postgres_workingFolder\\\\QuaLISWeb\\\\src\\\\pages\\\\registration\\\\PreRegisterSlideOutModal.jsx\";\nimport React from 'react';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport { Button, Card, Form, Modal } from 'react-bootstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faSave } from '@fortawesome/free-regular-svg-icons';\nimport { toast } from 'react-toastify';\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\nimport { ModalInner } from '../../components/App.styles';\nimport { transactionStatus } from '../../components/Enumeration';\nimport { faCalculator } from '@fortawesome/free-solid-svg-icons';\nimport { comboChild, convertDateTimetoString, getSameRecordFromTwoArrays, rearrangeDateFormat, showEsign } from '../../components/CommonScript';\nimport RegisterSlideOut from './RegisterSlideOut';\nimport AddSpecification from './AddSpecification';\nimport AddTest from './AddTest';\nimport { connect } from 'react-redux';\nimport { getPreviewTemplate, getChildValues, getNewRegSpecification, AddComponents, updateStore, EditComponent, getTest, addsubSample, editSubSample, insertRegistration, updateRegistration, addSubSampleSaveContinue } from '../../actions';\nimport AddComponentPopUp from './AddComponentPopUp';\nimport AddSubSample from './AddSubSample';\nimport { getComponentListfromUnwantedAttr, getRegistration, TestListManipulation } from './RegistrationValidation';\nimport SplitterLayout from 'react-splitter-layout';\n\nconst mapStateToProps = state => {\n  return {\n    Login: state.Login\n  };\n};\n\nclass PreRegisterSlideOutModal extends React.Component {\n  constructor(props) {\n    super(props);\n    this.formRef = React.createRef();\n    this.state = {\n      failedControls: [],\n      testDataState: {\n        skip: 0,\n        take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n      },\n      subSampleDataState: {\n        skip: 0,\n        take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n      },\n      selectedRecord: {},\n      selectedSpec: {},\n      selectComponent: {},\n      selectedTest: {},\n      selectedTestData: {},\n      SubSamplecomboComponents: [],\n      SubSamplewithoutCombocomponent: [],\n      selectedTestData: [],\n      parentSubSampleColumnList: []\n    };\n\n    this.handleSaveClick = saveType => {\n      const failedControls = [];\n      const startLabel = [];\n      let label = \"IDS_ENTER\";\n      let mandatoryFields = [];\n      let selectedRecord = this.state.selectedRecord;\n\n      if (this.props.Login.loadComponent) {\n        mandatoryFields = [{\n          \"idsName\": \"IDS_COMPONENT\",\n          \"dataField\": \"ncomponentcode\",\n          \"mandatoryLabel\": \"IDS_SELECT\",\n          \"controlType\": \"combo\"\n        }, {\n          \"idsName\": \"IDS_RECEIVEDDATE\",\n          \"dataField\": \"dreceiveddate\",\n          \"mandatoryLabel\": \"IDS_SELECT\",\n          \"controlType\": \"combo\"\n        }, {\n          \"idsName\": \"IDS_TIMEZONE\",\n          \"dataField\": \"ntzdreceivedate\",\n          \"mandatoryLabel\": \"IDS_SELECT\",\n          \"controlType\": \"combo\"\n        }];\n        selectedRecord = this.state.selectComponent;\n      } else if (this.props.Login.loadSubSample) {\n        this.props.Login.masterData.SubSampleTemplate && this.props.Login.masterData.SubSampleTemplate.jsondata.map(row => {\n          row.children.map(column => {\n            column.children.map(component => {\n              return component.hasOwnProperty(\"children\") ? component.children.map(componentrow => {\n                if (componentrow.mandatory === true) {\n                  mandatoryFields.push({\n                    \"mandatory\": true,\n                    \"idsName\": componentrow.label,\n                    \"dataField\": componentrow.label,\n                    \"mandatoryLabel\": componentrow.inputtype === \"combo\" ? \"IDS_SELECT\" : \"IDS_ENTER\",\n                    \"controlType\": componentrow.inputtype === \"combo\" ? \"selectbox\" : \"textbox\"\n                  });\n                }\n              }) : component.mandatory === true ? mandatoryFields.push({\n                \"mandatory\": true,\n                \"idsName\": component.label,\n                \"dataField\": component.label,\n                \"mandatoryLabel\": component.inputtype === \"combo\" ? \"IDS_SELECT\" : \"IDS_ENTER\",\n                \"controlType\": component.inputtype === \"combo\" ? \"selectbox\" : \"textbox\"\n              }) : \"\";\n            });\n          });\n        });\n        selectedRecord = this.state.selectComponent;\n      } else if (this.props.Login.loadTest) {\n        mandatoryFields = [{\n          \"idsName\": \"IDS_TEST\",\n          \"dataField\": \"ntestgrouptestcode\",\n          \"mandatoryLabel\": \"IDS_SELECT\",\n          \"controlType\": \"combo\"\n        }];\n        selectedRecord = this.props.Login.selectedTestData;\n      } else if (this.props.Login.loadSpec) {\n        mandatoryFields = [{\n          \"idsName\": \"IDS_SPECIFICATION\",\n          \"dataField\": \"nallottedspeccode\",\n          \"mandatoryLabel\": \"IDS_SELECT\",\n          \"controlType\": \"combo\"\n        }];\n      } else {\n        this.props.Login.masterData.registrationTemplate && this.props.Login.masterData.registrationTemplate.jsondata.map(row => {\n          row.children.map(column => {\n            column.children.map(component => {\n              return component.hasOwnProperty(\"children\") ? component.children.map(componentrow => {\n                if (componentrow.mandatory === true) {\n                  mandatoryFields.push({\n                    \"mandatory\": true,\n                    \"idsName\": componentrow.label,\n                    \"dataField\": componentrow.label,\n                    \"mandatoryLabel\": componentrow.inputtype === \"combo\" ? \"IDS_SELECT\" : \"IDS_ENTER\",\n                    \"controlType\": componentrow.inputtype === \"combo\" ? \"selectbox\" : \"textbox\"\n                  });\n                }\n              }) : component.mandatory === true ? mandatoryFields.push({\n                \"mandatory\": true,\n                \"idsName\": component.label,\n                \"dataField\": component.label,\n                \"mandatoryLabel\": component.inputtype === \"combo\" ? \"IDS_SELECT\" : \"IDS_ENTER\",\n                \"controlType\": component.inputtype === \"combo\" ? \"selectbox\" : \"textbox\"\n              }) : \"\";\n            });\n          });\n        });\n      }\n\n      if (this.props.esign) {\n        mandatoryFields = [{\n          \"idsName\": \"IDS_PASSWORD\",\n          \"dataField\": \"esignpassword\",\n          \"mandatoryLabel\": \"IDS_ENTER\",\n          \"controlType\": \"textbox\"\n        }, {\n          \"idsName\": \"IDS_COMMENTS\",\n          \"dataField\": \"esigncomments\",\n          \"mandatoryLabel\": \"IDS_ENTER\",\n          \"controlType\": \"textbox\"\n        }];\n      }\n\n      mandatoryFields.forEach(item => {\n        if (selectedRecord[item.dataField] === undefined || selectedRecord[item.dataField] === null) {\n          const alertMessage = (item.alertPreFix ? item.alertPreFix + \" \" : '') + this.props.intl.formatMessage({\n            id: item.idsName\n          }) + (item.alertSuffix ? \" \" + item.alertSuffix : '');\n          failedControls.push(alertMessage);\n          startLabel.push(item.mandatoryLabel); //\"IDS_PROVIDE\";\n        } else {\n          if (item.validateFunction) {\n            const validateData = item.validateFunction;\n\n            if (validateData(selectedRecord[item.dataField]) === false) {\n              const alertMessage = (item.alertPreFix ? item.alertPreFix + \" \" : '') + this.props.intl.formatMessage({\n                id: item.idsName\n              }) + (item.alertSuffix ? \" \" + item.alertSuffix : '');\n              failedControls.push(alertMessage);\n              startLabel.push(item.mandatoryLabel);\n            }\n          } else {\n            if (typeof selectedRecord[item.dataField] === \"object\") {\n              //to validate FormSelectSearch component\n              if (selectedRecord[item.dataField].length === 0) {\n                const alertMessage = (item.alertPreFix ? item.alertPreFix + \" \" : '') + this.props.intl.formatMessage({\n                  id: item.idsName\n                }) + (item.alertSuffix ? \" \" + item.alertSuffix : '');\n                failedControls.push(alertMessage);\n                startLabel.push(item.mandatoryLabel); //\"IDS_SELECT\";\n              }\n            } else if (typeof selectedRecord[item.dataField] === \"string\") {\n              //to handle string field -- added trim function\n              if (selectedRecord[item.dataField].trim().length === 0) {\n                const alertMessage = (item.alertPreFix ? item.alertPreFix + \" \" : '') + this.props.intl.formatMessage({\n                  id: item.idsName\n                }) + (item.alertSuffix ? \" \" + item.alertSuffix : '');\n                failedControls.push(alertMessage);\n                startLabel.push(item.mandatoryLabel);\n              }\n            } else {\n              //number field\n              if (selectedRecord[item.dataField].length === 0) {\n                const alertMessage = (item.alertPreFix ? item.alertPreFix + \" \" : '') + this.props.intl.formatMessage({\n                  id: item.idsName\n                }) + (item.alertSuffix ? \" \" + item.alertSuffix : '');\n                failedControls.push(alertMessage);\n                startLabel.push(item.mandatoryLabel);\n              }\n            }\n          }\n        } // else{\n        //     const alertMessage=(item.alertPreFix?item.alertPreFix:'')+this.props.intl.formatMessage({id:item.idsName})+(item.alertSuffix?item.alertSuffix:'')\n        //     failedControls.push(alertMessage);\n        // }\n\n      }); // console.log(\"validationPassed:\", failedControls);\n\n      if (failedControls.length === 0) {\n        if (saveType === 4) {\n          this.props.onExecuteClick(this.formRef);\n        } else if (saveType === 3) {\n          if (selectedRecord.agree && selectedRecord.agree === transactionStatus.NO) {\n            toast.info(this.props.intl.formatMessage({\n              id: \"IDS_CHECKAGREE\"\n            }));\n          } else {\n            this.props.validateEsign();\n          }\n        } else {\n          if (this.props.Login.loadSpec) {\n            let selectedSpec = this.state.selectedSpec;\n            selectedSpec[\"nallottedspeccode\"] = this.state.selectedRecord[\"nallottedspeccode\"];\n            selectedSpec[\"sversion\"] = this.state.selectedRecord[\"sversion\"];\n            selectedSpec[\"ntemplatemanipulationcode\"] = this.state.selectedRecord[\"ntemplatemanipulationcode\"]; // this.setState({\n            //     selectedTestData: [], loadSpec: false, SelectedTest: [], Test: [], Component: [], selectedSpec\n            // })\n\n            const updateInfo = {\n              typeName: DEFAULT_RETURN,\n              data: {\n                selectedTestData: [],\n                loadSpec: false,\n                SelectedTest: [],\n                Test: [],\n                Component: [],\n                selectedSpec,\n                screenName: this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename\n              }\n            };\n            this.props.updateStore(updateInfo);\n          } else if (this.props.Login.loadComponent) {\n            this.onSaveComponentClick(saveType, this.formRef);\n          } else if (this.props.Login.loadTest) {\n            this.onSaveTestClick(saveType, this.formRef);\n          } else if (this.props.Login.loadSubSample) {\n            this.onSaveSubSampleClick(saveType, this.formRef);\n          } else {\n            this.onSaveClick(saveType, this.formRef);\n          }\n        }\n      } else {\n        label = startLabel[0] === undefined ? label : startLabel[0];\n        toast.info(`${this.props.intl.formatMessage({\n          id: label\n        })} ${failedControls[0]}`);\n      }\n    };\n\n    this.TestChange = (comboData, fieldName) => {\n      const selectedTestData = this.state.selectedTestData || {};\n      selectedTestData[fieldName] = comboData;\n      this.setState({\n        selectedTestData\n      }); // const updateInfo = {\n      //     typeName: DEFAULT_RETURN,\n      //     data: { selectedTestData }\n      // }\n      // this.props.updateStore(updateInfo);\n    };\n\n    this.onComboChange = (comboData, control, customName) => {\n      let parentList = [];\n      let childComboList = [];\n      let childColumnList = {};\n      let comboName = customName || control.label;\n      const selectedRecord = this.state.selectedRecord || {};\n      let product = false;\n      let productCategory = false;\n      let nproductcatcode = -1;\n      let nproductcode = -1;\n      const inputParem = {\n        child: control.child,\n        source: control.source,\n        primarykeyField: control.valuemember,\n        value: comboData.value,\n        item: comboData.item,\n        label: comboName,\n        nameofdefaultcomp: control.name\n      };\n\n      if (comboData) {\n        selectedRecord[comboName] = comboData;\n      } else {\n        selectedRecord[comboName] = [];\n      }\n\n      if (control.name === 'Product') {\n        const ProductCategory = this.props.comboComponents.filter(x => x.name === \"Product Category\");\n        const ncategorybasedflow = selectedRecord[ProductCategory[0].label] && selectedRecord[ProductCategory[0].label]['item']['ncategorybasedflow'];\n        nproductcatcode = selectedRecord[ProductCategory[0].label] && selectedRecord[ProductCategory[0].label].value;\n\n        if (ncategorybasedflow !== 3) {\n          product = true;\n          nproductcode = selectedRecord[comboName] && selectedRecord[comboName].value;\n        }\n      } else if (control.name === 'Product Category') {\n        const Product = this.props.comboComponents.filter(x => x.name === \"Product\");\n        nproductcatcode = comboData.value;\n        const ncategorybasedflow = comboData && comboData['item']['ncategorybasedflow'];\n\n        if (ncategorybasedflow === 3) {\n          productCategory = true;\n        } else {\n          inputParem[\"ProductName\"] = Product[0].label; // nproductcode = selectedRecord[comboName] &&\n          // selectedRecord[comboName].value;\n\n          product = true;\n        }\n      }\n\n      if (control.child && control.child.length > 0) {\n        childComboList = getSameRecordFromTwoArrays(this.props.comboComponents, control.child, \"label\");\n        childColumnList = {};\n        childComboList.map(columnList => {\n          const val = comboChild(this.props.comboComponents, columnList, childColumnList, false);\n          childColumnList = val.childColumnList;\n        });\n        parentList = getSameRecordFromTwoArrays(this.props.withoutCombocomponent, control.child, \"label\"); // if (product) {\n        // }\n\n        const mapOfFilter = {\n          nproductcode,\n          nproductcatcode,\n          nsampletypecode: parseInt(this.props.Login.masterData.RealSampleTypeValue.nsampletypecode)\n        };\n        this.props.getChildValues(inputParem, this.props.userInfo, selectedRecord, this.props.Login.comboData, childComboList, childColumnList, this.props.withoutCombocomponent, [...childComboList, ...parentList], productCategory, product, mapOfFilter);\n      } else {\n        // if (productCategory) {\n        //     const ncategorybasedflow = selectedRecord[comboName] &&\n        //         selectedRecord[comboName].value;\n        // } else \n        if (product || productCategory) {\n          // const nproductcode = selectedRecord[comboName] &&\n          //     selectedRecord[comboName].value;\n          const mapOfFilter = {\n            nproductcode,\n            nproductcatcode,\n            nsampletypecode: parseInt(this.props.Login.masterData.RealSampleTypeValue.nsampletypecode)\n          };\n          this.props.getChildValues(inputParem, this.props.userInfo, selectedRecord, this.props.Login.comboData, childComboList, childColumnList, this.props.withoutCombocomponent, [...childComboList, ...parentList], productCategory, product, mapOfFilter);\n        } else {\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              selectedRecord\n            }\n          };\n          this.props.updateStore(updateInfo);\n        }\n      }\n    };\n\n    this.onInputOnChange = (event, radiotext) => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (event.target.type === 'checkbox') {\n        if (event.target.name === 'timeonly') {\n          selectedRecord['dateonly'] = false;\n        }\n\n        if (event.target.name === 'dateonly') {\n          selectedRecord['timeonly'] = false;\n        }\n\n        const value = selectedRecord[event.target.name];\n\n        if (value !== '' && value !== undefined) {\n          if (value.includes(radiotext)) {\n            const index = value.indexOf(radiotext);\n\n            if (index !== -1) {\n              if (index == 0) {\n                const indexcomma = value.indexOf(\",\");\n\n                if (indexcomma !== -1) {\n                  selectedRecord[event.target.name] = value.slice(indexcomma + 1);\n                } else {\n                  selectedRecord[event.target.name] = \"\";\n                }\n              } else {\n                //  const  indexcomma= value.indexOf(\",\")\n                if (value.slice(index).indexOf(\",\") !== -1) {\n                  selectedRecord[event.target.name] = value.slice(0, index) + value.slice(index + value.slice(index).indexOf(\",\") + 1);\n                } else {\n                  selectedRecord[event.target.name] = value.slice(0, index - 1);\n                }\n              }\n            }\n          } else {\n            selectedRecord[event.target.name] = value + ',' + radiotext;\n          }\n        } else {\n          selectedRecord[event.target.name] = radiotext;\n        }\n      } else if (event.target.type === 'radio') {\n        selectedRecord[event.target.name] = radiotext;\n      } else {\n        selectedRecord[event.target.name] = event.target.value;\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onInputOnSubSampleChange = (event, radiotext) => {\n      const selectComponent = this.state.selectComponent || {};\n\n      if (event.target.type === 'checkbox') {\n        if (event.target.name === 'timeonly') {\n          selectComponent['dateonly'] = false;\n        }\n\n        if (event.target.name === 'dateonly') {\n          selectComponent['timeonly'] = false;\n        }\n\n        const value = selectComponent[event.target.name];\n\n        if (value !== '' && value !== undefined) {\n          if (value.includes(radiotext)) {\n            const index = value.indexOf(radiotext);\n\n            if (index !== -1) {\n              if (index == 0) {\n                const indexcomma = value.indexOf(\",\");\n\n                if (indexcomma !== -1) {\n                  selectComponent[event.target.name] = value.slice(indexcomma + 1);\n                } else {\n                  selectComponent[event.target.name] = \"\";\n                }\n              } else {\n                //  const  indexcomma= value.indexOf(\",\")\n                if (value.slice(index).indexOf(\",\") !== -1) {\n                  selectComponent[event.target.name] = value.slice(0, index) + value.slice(index + value.slice(index).indexOf(\",\") + 1);\n                } else {\n                  selectComponent[event.target.name] = value.slice(0, index - 1);\n                }\n              }\n            }\n          } else {\n            selectComponent[event.target.name] = value + ',' + radiotext;\n          }\n        } else {\n          selectComponent[event.target.name] = radiotext;\n        }\n      } else {\n        selectComponent[event.target.name] = event.target.value;\n      }\n\n      this.setState({\n        selectComponent\n      });\n    };\n\n    this.onComboSubSampleChange = (comboData, control, customName) => {\n      let parentList = [];\n      let childComboList = [];\n      let childColumnList = {};\n      let comboName = customName || control.label;\n      const selectComponent = this.state.selectComponent || {};\n      const inputParem = {\n        child: control.child,\n        source: control.source,\n        primarykeyField: control.valuemember,\n        value: comboData.value,\n        item: comboData.item,\n        label: comboName,\n        nameofdefaultcomp: control.name\n      };\n\n      if (comboData) {\n        selectComponent[comboName] = comboData;\n      } else {\n        selectComponent[comboName] = [];\n      }\n\n      if (control.child && control.child.length > 0) {\n        childComboList = getSameRecordFromTwoArrays(this.state.SubSamplecomboComponents, control.child, \"label\");\n        childColumnList = {};\n        childComboList.map(columnList => {\n          const val = comboChild(this.state.SubSamplecomboComponents, columnList, childColumnList, false);\n          childColumnList = val.childColumnList;\n        });\n        parentList = getSameRecordFromTwoArrays(this.state.SubSamplewithoutCombocomponent, control.child, \"label\");\n        this.props.getChildValues(inputParem, this.props.userInfo, selectComponent, this.props.Login.SubSamplecomboData, childComboList, childColumnList, this.state.SubSamplewithoutCombocomponent, [...childComboList, ...parentList]);\n      } else {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            selectComponent\n          }\n        };\n        this.props.updateStore(updateInfo);\n      }\n    };\n\n    this.onNumericInputChange = (value, name) => {\n      let selectedRecord = this.state.selectedRecord;\n      selectedRecord[name] = value;\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onNumericInputSubSampleChange = (value, name) => {\n      let selectComponent = this.state.selectComponent;\n      selectComponent[name] = value;\n      this.setState({\n        selectComponent\n      });\n    };\n\n    this.handleDateChangeComp = (dateValue, dateName, screenName) => {\n      const {\n        selectedRecord\n      } = this.state;\n\n      if (screenName === 'component') {\n        const selectComponent = this.state.selectComponent;\n        selectComponent[dateName] = dateValue;\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            selectComponent\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        selectedRecord[dateName] = dateValue;\n        this.setState({\n          selectedRecord\n        });\n      }\n    };\n\n    this.handleDateChange = (dateValue, dateName) => {\n      const {\n        selectedRecord\n      } = this.state;\n      selectedRecord[dateName] = dateValue;\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.handleDateSubSampleChange = (dateValue, dateName) => {\n      const {\n        selectComponent\n      } = this.state;\n      selectComponent[dateName] = dateValue;\n      this.setState({\n        selectComponent\n      });\n    };\n\n    this.openFilter = () => {\n      let showFilter = !this.state.showFilter;\n      this.setState({\n        showFilter\n      });\n    };\n\n    this.closeFilter = () => {\n      this.setState({\n        showFilter: false\n      });\n    };\n\n    this.AddSpec = e => {\n      // this.setState({\n      //     loadSpec: true\n      // })\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          loadSpec: true,\n          screenName: \"Specification\"\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.addTestslide = (selectedComponent, nneedsubsample, specBasedComponent) => {\n      if (nneedsubsample) {\n        if (selectedComponent && Object.keys(selectedComponent).length > 0) {\n          delete selectedComponent[\"selected\"];\n          this.props.getTest(selectedComponent, this.props.Login, nneedsubsample, specBasedComponent);\n        } else {\n          toast.warn(this.props.intl.formatMessage({\n            id: nneedsubsample ? \"IDS_SELECTSUBSAMPLETOADDTEST\" : \"IDS_SELECTCOMPONENTTOADDTEST\"\n          }));\n        }\n      } else {\n        const selectedComponent1 = {\n          nallottedspeccode: this.state.selectedSpec[\"nallottedspeccode\"] ? this.state.selectedSpec[\"nallottedspeccode\"].value : -1,\n          slno: 1\n        };\n        this.props.getTest(selectedComponent1, this.props.Login, nneedsubsample, specBasedComponent);\n      }\n    };\n\n    this.closeSpec = e => {\n      // this.setState({\n      //     loadSpec: false,\n      //      selectedRecord: { ...this.state.selectedRecord, ...this.state.selectedSpec },\n      //      screenName:\"Specification\"\n      // })\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          loadSpec: false,\n          selectedRecord: { ...this.state.selectedRecord,\n            ...this.state.selectedSpec\n          },\n          screenName: this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.closeComponent = e => {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          loadComponent: false,\n          selectComponent: {}\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.closeTest = e => {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          loadTest: false,\n          selectedTestData: {},\n          screenName: this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.closeSubSample = e => {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          loadSubSample: false,\n          selectedSubSample: {},\n          showSaveContinue: false,\n          selectComponent: {},\n          selectedTestData: {},\n          screenName: this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onspecChange = (event, fieldName) => {\n      if (event !== null) {\n        const selectedRecord = this.state.selectedRecord;\n        const oldpromarycode = this.state.selectedRecord[\"nallottedspeccode\"] !== undefined ? this.state.selectedRecord[\"nallottedspeccode\"].value : undefined;\n        selectedRecord[\"sversion\"] = parseInt(event.item.sversion);\n        selectedRecord[\"nallottedspeccode\"] = event; //  if(this.props.Login.Component.length=== 0 ){\n\n        this.setState({\n          selectedRecord\n        }); // }else{\n        //     if(event.value!== oldpromarycode ){\n        //     this.confirmMessage.confirm(\"confirmation\", \"Confirmation!\", \"Do You Want to clear the Existing Components ?\",\n        //     \"ok\", \"cancel\", () => this.setState({ selectedRecord }));\n        //     }\n        // }\n      }\n    };\n\n    this.onTreeClick = event => {\n      const inputParam = {\n        methodUrl: \"TestGroupSpecification\",\n        screenName: \"IDS_REGISTRATION\",\n        operation: \"get\",\n        activeKey: event.key,\n        focusKey: event.key,\n        keyName: \"treetemplatemanipulation\",\n        userinfo: this.props.Login.userInfo,\n        selectedNode: event.item,\n        selectedRecord: this.state.selectedRecord,\n        primaryKey: event.primaryKey\n      };\n\n      if (event.primaryKey !== this.state.selectedRecord[\"ntemplatemanipulationcode\"]) {\n        this.props.getNewRegSpecification(inputParam, this.props.Login.masterData);\n      } // if (this.props.Login.Component === undefined || this.props.Login.Component.length === 0) {\n      //     //   this.props.getRegSpecification(inputParam, this.props.Login.masterData, getComponents);\n      // } else {\n      //     // if(event.key!== this.props.Login.ActiveKey ){\n      //     // this.confirmMessage.confirm(\"confirmation\", \"Confirmation!\", \"Do You Want to clear the Existing Components ?\",\n      //     // \"ok\", \"cancel\", () =>  this.props.getRegSpecification(inputParam, this.props.Login.masterData, getComponents));\n      //     // }\n      // }\n\n    };\n\n    this.handleComponentRowClick = event => {\n      let selectedComponent = event.dataItem;\n      let SelectedTest = this.props.Login.Test && this.props.Login.Test[selectedComponent.slno] ? this.props.Login.Test[selectedComponent.slno] : [];\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          SelectedTest,\n          selectedComponent,\n          testDataState: {\n            skip: 0,\n            take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n          }\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.AddComponent = () => {\n      let Map = {};\n\n      if (this.state.selectedSpec.nallottedspeccode !== undefined && this.state.selectedSpec.nallottedspeccode !== \"\") {\n        Map[\"ntemplatemanipulationcode\"] = this.state.selectedSpec.ntemplatemanipulationcode;\n        Map[\"nallottedspeccode\"] = this.state.selectedSpec.nallottedspeccode.value;\n        Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\n        Map[\"testrequired\"] = false;\n        Map[\"userinfo\"] = this.props.Login.userInfo;\n        this.props.AddComponents(Map);\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTSPECIFICATION\"\n        }));\n      }\n    };\n\n    this.onComponentChange = (comboData, fieldName, nneedsubsample) => {\n      if (comboData !== null) {\n        if (!nneedsubsample) {\n          const selectComponent = this.state.selectComponent || {};\n\n          if (fieldName === 'ntzdreceivedate') {\n            selectComponent[\"ntzdreceivedate\"] = comboData;\n          } else {\n            // const oldspecsampletypecode = selectComponent.nspecsampletypecode\n            // if (oldspecsampletypecode !== comboData.item.nspecsampletypecode) {\n            //     //selectComponent[\"nneedservice\"] = true;\n            // }\n            selectComponent[fieldName] = comboData;\n            selectComponent[\"nspecsampletypecode\"] = comboData.item.nspecsampletypecode;\n          }\n\n          this.setState({\n            selectComponent\n          }); // const updateInfo = {\n          //     typeName: DEFAULT_RETURN,\n          //     data: {\n          //         selectComponent\n          //     }\n          // }\n          // this.props.updateStore(updateInfo);\n        } else {\n          const selectComponent = this.state.selectComponent || {};\n          selectComponent[fieldName] = comboData; // selectComponent[\"nspecsampletypecode\"] = comboData.item.nspecsampletypecode ?  comboData.item.nspecsampletypecode : -1;\n\n          this.setState({\n            selectComponent\n          });\n        }\n      }\n    };\n\n    this.onInputComponentOnChange = event => {\n      const selectComponent = this.state.selectComponent || {};\n\n      if (event.target.type === 'checkbox') {\n        selectComponent[event.target.name] = event.target.checked === true ? 3 : 4;\n      } else {\n        selectComponent[event.target.name] = event.target.value;\n      }\n\n      this.setState({\n        selectComponent\n      }); // const updateInfo = {\n      //     typeName: DEFAULT_RETURN,\n      //     data: {\n      //         selectComponent\n      //     }\n      // }\n      // this.props.updateStore(updateInfo);\n    };\n\n    this.onSaveComponentClick = (saveType, formRef) => {\n      const childoperation = this.props.Login.childoperation;\n\n      if (childoperation === \"create\") {\n        if (saveType === 1) {\n          this.ComponentObjectAfterSave();\n        } else if (saveType === 2) {\n          this.ComponentObject();\n        }\n      } else {\n        const Component = this.props.Login.Component;\n        const Test = this.props.Login.Test;\n        const testrequired = this.state.selectedRecord.ntransactionstatus;\n        let selectedComponent = { ...this.state.selectComponent\n        };\n        let objcomponent = {};\n        objcomponent[\"scomponentname\"] = selectedComponent[\"ncomponentcode\"].label;\n        objcomponent[\"ncomponentcode\"] = selectedComponent[\"ncomponentcode\"] ? selectedComponent[\"ncomponentcode\"].value : -1;\n        const dreceiveddate = selectedComponent[\"dreceiveddate\"];\n        objcomponent[\"dreceiveddate\"] = dreceiveddate;\n        objcomponent[\"sreceiveddate\"] = convertDateTimetoString(dreceiveddate, this.props.Login.userInfo);\n        objcomponent[\"ntzdreceivedate\"] = selectedComponent[\"ntzdreceivedate\"] ? selectedComponent[\"ntzdreceivedate\"].value : -1;\n        objcomponent[\"stzdreceivedate\"] = selectedComponent[\"ntzdreceivedate\"] ? selectedComponent[\"ntzdreceivedate\"].label : \"\";\n        objcomponent[\"jsondata\"] = \"\";\n        selectedComponent = { ...selectedComponent,\n          ...objcomponent\n        };\n        const index = Component.findIndex(x => x.slno === selectedComponent.slno);\n\n        if (index > -1) {\n          Component.splice(index, 1, selectedComponent);\n        }\n\n        if (testrequired === 3) {\n          this.props.getTestByComponentChange(Component, selectedComponent, this.props.Login);\n        } else if (selectedComponent[\"nneedservice\"] === true) {\n          this.props.getTestByComponentChange(Component, selectedComponent, this.props.Login, true);\n        } else {\n          delete selectedComponent.nneedservice;\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              Component,\n              selectedComponent: selectedComponent,\n              loadComponent: false,\n              openChildModal: false,\n              selectComponent: undefined,\n              parentPopUpSize: \"xl\",\n              Test,\n              SelectedTest: Test[selectedComponent.slno]\n            }\n          };\n          this.props.updateStore(updateInfo);\n        }\n      }\n    };\n\n    this.onSaveSubSampleClick = (saveType, formRef) => {\n      const childoperation = this.props.Login.childoperation;\n\n      if (childoperation === \"create\") {\n        if (saveType === 1) {\n          this.SubSampleObjectAfterSave();\n        } else if (saveType === 2) {\n          this.SubSampleObject();\n        }\n      } else {\n        const Component = this.props.Login.Component;\n        const Test = this.props.Login.Test;\n        const testrequired = this.state.selectedRecord.ntransactionstatus;\n        const defaulttimezone = this.props.Login.defaulttimezone;\n        const userInfo = this.props.Login.userInfo;\n        let selectedComponent = { ...this.state.selectComponent\n        };\n        let objcomponent = {};\n        objcomponent[\"slno\"] = selectedComponent[\"slno\"] ? selectedComponent[\"slno\"] : \"\";\n        objcomponent[\"nallottedspeccode\"] = this.state.selectedSpec[\"nallottedspeccode\"] ? this.state.selectedSpec[\"nallottedspeccode\"].value : -1;\n        objcomponent[\"nspecsampletypecode\"] = this.state.selectedSpec[\"nallottedspeccode\"] ? this.state.selectedSpec[\"nallottedspeccode\"]['item'].nspecsampletypecode : -1;\n        objcomponent[\"jsondata\"] = {};\n        this.props.Login.masterData.SubSampleTemplate && this.props.Login.masterData.SubSampleTemplate.jsondata.map(row => {\n          row.children.map(column => {\n            column.children.map(component => {\n              if (component.hasOwnProperty(\"children\")) {\n                let componentrowlabel = '';\n                let componentrowvalue = '';\n                component.children.map(componentrow => {\n                  if (componentrow.inputtype === \"combo\") {\n                    objcomponent[\"jsondata\"][componentrow.label] = selectedComponent[componentrow.label] ? {\n                      value: selectedComponent[componentrow.label].value,\n                      label: selectedComponent[componentrow.label].label\n                    } : -1;\n\n                    if (componentrow.mandatory || selectedComponent[componentrow.label]) {\n                      componentrowlabel = componentrowlabel + '&' + componentrow.label;\n                      componentrowvalue = componentrowvalue + ' ' + selectedComponent[componentrow.label].label;\n                    }\n                  } else if (componentrow.inputtype === \"date\") {\n                    if (componentrow.mandatory) {\n                      selectedComponent[\"jsondata\"][componentrow.label] = convertDateTimetoString(selectedComponent[componentrow.label] ? selectedComponent[componentrow.label] : new Date(), userInfo);\n                    } else {\n                      objcomponent[\"jsondata\"][componentrow.label] = componentrow.loadcurrentdate ? convertDateTimetoString(selectedComponent[componentrow.label] ? selectedComponent[componentrow.label] : new Date(), userInfo) : selectedComponent[componentrow.label] ? convertDateTimetoString(selectedComponent[componentrow.label] ? selectedComponent[componentrow.label] : new Date(), userInfo) : \"\";\n                    }\n\n                    if (componentrow.timezone) {\n                      selectedComponent[\"jsondata\"][`tz${componentrow.label}`] = selectedComponent[`tz${componentrow.label}`] ? {\n                        value: selectedComponent[`tz${componentrow.label}`].value,\n                        label: selectedComponent[`tz${componentrow.label}`].label\n                      } : defaulttimezone ? defaulttimezone : -1;\n                    } // dateList.push(componentrow.label)\n\n                  } else {\n                    objcomponent[\"jsondata\"][componentrow.label] = selectedComponent[componentrow.label] ? selectedComponent[componentrow.label] : \"\";\n\n                    if (selectedComponent[componentrow.label]) {\n                      componentrowlabel = componentrowlabel + '&' + componentrow.label;\n                      componentrowvalue = componentrowvalue + ' ' + selectedComponent[componentrow.label];\n                    }\n                  }\n                });\n                objcomponent[\"jsondata\"][componentrowlabel.substring(1)] = componentrowvalue;\n              } else {\n                if (component.inputtype === \"combo\") {\n                  objcomponent[\"jsondata\"][component.label] = selectedComponent[component.label] ? {\n                    value: selectedComponent[component.label].value,\n                    label: selectedComponent[component.label].label\n                  } : -1;\n                } else if (component.inputtype === \"date\") {\n                  if (component.mandatory) {\n                    objcomponent[\"jsondata\"][component.label] = convertDateTimetoString(selectedComponent[component.label] ? selectedComponent[component.label] : new Date(), userInfo);\n                  } else {\n                    objcomponent[\"jsondata\"][component.label] = component.loadcurrentdate ? convertDateTimetoString(selectedComponent[component.label] ? selectedComponent[component.label] : new Date(), userInfo) : selectedComponent[component.label] ? convertDateTimetoString(selectedComponent[component.label] ? selectedComponent[component.label] : new Date(), userInfo) : \"\";\n                  }\n\n                  if (component.timezone) {\n                    objcomponent[\"jsondata\"][`tz${component.label}`] = selectedComponent[`tz${component.label}`] ? {\n                      value: selectedComponent[`tz${component.label}`].value,\n                      label: selectedComponent[`tz${component.label}`].label\n                    } : defaulttimezone ? defaulttimezone : -1;\n                  } //dateList.push(component.label)\n\n                } else {\n                  objcomponent[\"jsondata\"][component.label] = selectedComponent[component.label] ? selectedComponent[component.label] : \"\";\n                }\n              }\n            });\n          });\n        });\n        selectedComponent = { ...objcomponent\n        };\n        const index = Component.findIndex(x => x.slno === selectedComponent.slno);\n\n        if (index > -1) {\n          Component.splice(index, 1, selectedComponent);\n        }\n\n        if (testrequired === 3) {\n          this.props.getTestByComponentChange(Component, selectedComponent, this.props.Login);\n        } else if (selectedComponent[\"nneedservice\"] === true) {\n          this.props.getTestByComponentChange(Component, selectedComponent, this.props.Login, true);\n        } else {\n          delete selectedComponent.nneedservice;\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              Component,\n              selectedComponent: selectedComponent,\n              loadSubSample: false,\n              openChildModal: false,\n              selectComponent: {},\n              parentPopUpSize: \"xl\",\n              Test,\n              SelectedTest: Test[selectedComponent.slno],\n              screenName: this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename\n            }\n          };\n          this.props.updateStore(updateInfo);\n        }\n      }\n    };\n\n    this.addSubSampleSaveContinue = updateInfo => {\n      const Map = {};\n      Map[\"ntemplatemanipulationcode\"] = this.state.selectedSpec.ntemplatemanipulationcode;\n      Map[\"nallottedspeccode\"] = this.state.selectedSpec.nallottedspeccode.value;\n      Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\n      Map[\"testrequired\"] = false;\n      Map[\"userinfo\"] = this.props.Login.userInfo;\n      this.props.addSubSampleSaveContinue(updateInfo, Map, 4, this.props.Login.Components);\n    };\n\n    this.editComponent = editselectedcomponent => {\n      let inputData = {};\n      let objComponent = { ...editselectedcomponent\n      };\n      inputData[\"ntemplatemanipulationcode\"] = this.state.selectedSpec.ntemplatemanipulationcode;\n      inputData[\"nallottedspeccode\"] = this.state.selectedSpec.nallottedspeccode.value;\n      inputData[\"userinfo\"] = this.props.Login.userInfo;\n      inputData[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\n      this.props.EditComponent(inputData, objComponent, this.props.Login.userInfo, this.props.Login);\n    };\n\n    this.editSubSample = (editselectedcomponent, specBasedComponent) => {\n      let inputData = {};\n      let objComponent = { ...editselectedcomponent\n      };\n      const defaulttimezone = this.props.Login.defaulttimezone;\n      const userInfo = this.props.Login.userInfo; // inputData[\"ntemplatemanipulationcode\"] = this.state.selectedSpec.ntemplatemanipulationcode;\n      //  inputData[\"nallottedspeccode\"] = this.state.selectedSpec.nallottedspeccode.value;\n      //  inputData[\"userinfo\"] = this.props.Login.userInfo;\n      //   inputData[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\n\n      let selectComponent = this.state.selectComponent;\n      selectComponent['slno'] = objComponent['slno'];\n      this.props.Login.masterData.SubSampleTemplate && this.props.Login.masterData.SubSampleTemplate.jsondata.map(row => {\n        row.children.map(column => {\n          column.children.map(component => {\n            if (component.hasOwnProperty(\"children\")) {\n              component.children.map(componentrow => {\n                if (componentrow.inputtype === \"combo\") {\n                  selectComponent[componentrow.label] = objComponent[\"jsondata\"][componentrow.label] ? objComponent[\"jsondata\"][componentrow.label] : \"\";\n                } else if (componentrow.inputtype === \"date\") {\n                  selectComponent[componentrow.label] = objComponent[\"jsondata\"][componentrow.label] ? rearrangeDateFormat(userInfo, objComponent[\"jsondata\"][componentrow.label]) : new Date();\n\n                  if (componentrow.timezone) {\n                    selectComponent[`tz${componentrow.label}`] = objComponent[\"jsondata\"][`tz${componentrow.label}`] ? objComponent[\"jsondata\"][`tz${componentrow.label}`] : defaulttimezone ? defaulttimezone : -1;\n                  }\n                } else {\n                  selectComponent[componentrow.label] = objComponent[\"jsondata\"][componentrow.label] ? objComponent[\"jsondata\"][componentrow.label] : \"\";\n                }\n              });\n            } else {\n              if (component.inputtype === \"combo\") {\n                selectComponent[component.label] = objComponent[\"jsondata\"][component.label] ? objComponent[\"jsondata\"][component.label] : -1;\n              } else if (component.inputtype === \"date\") {\n                selectComponent[component.label] = objComponent[\"jsondata\"][component.label] ? rearrangeDateFormat(userInfo, objComponent[\"jsondata\"][component.label]) : new Date();\n\n                if (component.timezone) {\n                  selectComponent[`tz${component.label}`] = objComponent[\"jsondata\"][`tz${component.label}`] ? objComponent[\"jsondata\"][`tz${component.label}`] : defaulttimezone ? defaulttimezone : -1;\n                }\n              } else {\n                selectComponent[component.label] = objComponent[\"jsondata\"][component.label] ? objComponent[\"jsondata\"][component.label] : \"\";\n              }\n            }\n          });\n        });\n      });\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          loadSubSample: true,\n          childoperation: \"update\",\n          ChildscreenName: \"SubSample\",\n          screenName: \"SubSample\",\n          openChildModal: false,\n          selectComponent,\n          parentPopUpSize: \"lg\",\n          loading: false\n        }\n      };\n      this.props.updateStore(updateInfo); // this.props.editSubSample(inputData, objComponent, \n      //     this.props.Login.userInfo, specBasedComponent);\n    };\n\n    this.deleteComponent = event => {\n      const dataItem = event;\n      const Component = this.props.Login.Component;\n      const Test = this.props.Login.Test;\n      let SelectedTest = this.props.Login.SelectedTest;\n      const index = Component.findIndex(x => x.slno === dataItem.slno);\n\n      if (index > -1) {\n        Component.splice(index, 1);\n      }\n\n      Test && Test[dataItem.slno] && delete Test[dataItem.slno];\n      SelectedTest = Test && Object.keys(Test).length > 0 && Test[Component[0].slno];\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          Component,\n          selectedComponent: Component[0],\n          Test,\n          SelectedTest\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.deleteTest = event => {\n      const dataItem = event;\n      let SelectedTest = this.props.Login.SelectedTest;\n      let selectedComponent = this.props.Login.selectedComponent;\n      const Test = this.props.Login.Test;\n      const index = SelectedTest.findIndex(x => x.ntestgrouptestcode === dataItem.ntestgrouptestcode);\n\n      if (index > -1) {\n        SelectedTest.splice(index, 1);\n      }\n\n      Test[selectedComponent.slno] = SelectedTest;\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          Test,\n          SelectedTest\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onSaveTestClick = (saveType, formRef) => {\n      let selectedTestData = this.props.Login.selectedTestData[\"ntestgrouptestcode\"];\n      let selectedTestArray = [];\n      selectedTestData.map(item => {\n        return selectedTestArray.push(item.item);\n      });\n      let updateInfo = {};\n      let selectedComponent = this.props.Login.selectedComponent;\n      let Test = this.props.Login.Test || [];\n\n      if (this.props.Login.masterData.nneedsubsample) {\n        const ArrayTest = Test[selectedComponent.slno] ? Test[selectedComponent.slno] : []; //  ArrayTest.push(selectedTestArray);\n\n        Test[selectedComponent.slno] = [...ArrayTest, ...selectedTestArray];\n        updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            SelectedTest: Test[selectedComponent.slno],\n            Test: Test,\n            selectedTestData: {},\n            loadTest: false,\n            parentPopUpSize: \"xl\"\n          }\n        };\n      } else {\n        selectedComponent = {\n          subsamplename: \"NA\",\n          slno: 1\n        };\n        const Component = [selectedComponent];\n        const ArrayTest = Test[selectedComponent.slno] ? Test[selectedComponent.slno] : []; //  ArrayTest.push(selectedTestArray);\n\n        Test[selectedComponent.slno] = [...ArrayTest, ...selectedTestArray];\n        updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            selectedComponent,\n            Component,\n            SelectedTest: Test[selectedComponent.slno],\n            Test: Test,\n            selectedTestData: {},\n            loadTest: false,\n            parentPopUpSize: \"xl\",\n            screenName: this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename\n          }\n        };\n      }\n\n      this.props.updateStore(updateInfo);\n    };\n\n    this.componentDataStateChange = event => {\n      this.setState({\n        componentDataState: event.dataState\n      });\n    };\n\n    this.testDataStateChange = event => {\n      this.setState({\n        testDataState: event.dataState\n      });\n    };\n\n    this.subSampleDataStateChange = event => {\n      this.setState({\n        subSampleDataState: event.dataState\n      });\n    };\n\n    this.addsubSample = specBasedComponent => {\n      let Map = {};\n\n      if (this.state.selectedSpec.nallottedspeccode !== undefined && this.state.selectedSpec.nallottedspeccode !== \"\") {\n        Map[\"ntemplatemanipulationcode\"] = this.state.selectedSpec.ntemplatemanipulationcode;\n        Map[\"nallottedspeccode\"] = this.state.selectedSpec.nallottedspeccode.value;\n        Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\n        Map[\"testrequired\"] = false;\n        Map[\"userinfo\"] = this.props.Login.userInfo;\n        let data = this.state.SubSamplecomboComponents || [];\n        const SubSamplewithoutCombocomponent = this.state.SubSamplewithoutCombocomponent || [];\n        const Layout = this.props.Login.masterData.SubSampleTemplate && this.props.Login.masterData.SubSampleTemplate.jsondata;\n\n        if (SubSamplewithoutCombocomponent.length == 0 || data.length == 0) {\n          if (Layout !== undefined) {\n            Layout.map(row => {\n              row.children.map(column => {\n                column.children.map(component => {\n                  return component.hasOwnProperty(\"children\") ? component.children.map(componentrow => {\n                    if (componentrow.inputtype === \"combo\") {\n                      data.push(componentrow);\n                    } else {\n                      SubSamplewithoutCombocomponent.push(componentrow);\n                    }\n                  }) : component.inputtype === \"combo\" ? data.push(component) : SubSamplewithoutCombocomponent.push(component);\n                });\n              });\n            });\n            const SubSamplecomboComponents = data;\n            let childColumnList = {};\n            data.map(columnList => {\n              const val = comboChild(data, columnList, childColumnList, true);\n              data = val.data;\n              childColumnList = val.childColumnList;\n            });\n            this.props.addsubSample(this.props.Login.masterData, this.props.Login.userInfo, data, this.state.selectComponent, childColumnList, SubSamplecomboComponents, SubSamplewithoutCombocomponent, specBasedComponent, Map, this.props.Login.Component, true); //  this.props.addsubSample(this.props.Login.userInfo, specBasedComponent, Map)\n          }\n        } else {\n          this.props.addsubSample(this.props.Login.masterData, this.props.Login.userInfo, data, this.state.selectComponent, this.state.parentSubSampleColumnList, this.state.SubSamplecomboComponents, this.state.SubSamplewithoutCombocomponent, specBasedComponent, Map, this.props.Login.Component, false, this.props.Login.SubSamplecomboData, this.props.Login.TestCombined);\n        }\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTSPECIFICATION\"\n        }));\n      }\n    };\n\n    this.onSaveClick = (saveType, formRef) => {\n      let operation = this.props.Login.operation;\n\n      if (operation === \"update\") {\n        this.onUpdateRegistration(saveType, formRef, operation);\n      } else {\n        if (operation === \"create\") {\n          this.insertRegistration(true);\n        }\n      }\n    };\n\n    this.onNumericInputChange = (value, name) => {\n      let selectedRecord = this.state.selectedRecord;\n      selectedRecord[name] = value;\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.myRef = React.createRef();\n    this.PrevoiusLoginData = this.props.PrevoiusLoginData;\n    this.componentColumnList = [{\n      \"idsName\": \"IDS_COMPONENTNAME\",\n      \"dataField\": \"scomponentname\",\n      width: \"200px\"\n    }, {\n      \"idsName\": \"IDS_DATERECEIVED\",\n      \"dataField\": \"sreceiveddate\",\n      width: \"250px\"\n    }, {\n      \"idsName\": \"IDS_COMMENTS\",\n      \"dataField\": \"scomments\",\n      width: \"200px\"\n    }];\n    this.sampleeditable = JSON.parse(this.props.Login.masterData.DynamicDesign.jsondata.value);\n    this.subSampleDataGridList = [];\n    this.props.Login.masterData.SubSampleTemplate && this.props.Login.masterData.SubSampleTemplate.jsondata.map(row => {\n      row.children.map(column => {\n        column.children.map(component => {\n          let label = '';\n\n          if (component.hasOwnProperty(\"children\")) {\n            component.children.map(componentrow => {\n              if (componentrow.mandatory === true) {\n                label = label + '&' + componentrow.label; // this.subSampleDataGridList.push({ \"mandatory\": true, \"idsName\": componentrow.label, \"dataField\": componentrow.label })\n              }\n            });\n          } else {\n            if (component.mandatory) this.subSampleDataGridList.push({\n              \"mandatory\": true,\n              \"idsName\": component.label,\n              \"dataField\": component.label\n            });\n          }\n\n          if (label !== '') {\n            this.subSampleDataGridList.push({\n              \"mandatory\": true,\n              \"idsName\": label.substring(1),\n              \"dataField\": label.substring(1)\n            });\n          }\n        });\n      });\n    });\n  }\n\n  componentDidUpdate(previousProps) {\n    let masterStatus = this.props.masterStatus; // const {selectedRecord,selectedSpec,selectedTestData,selectComponent} =this.state\n\n    let check = false;\n\n    if (this.props.Login.selectedRecord !== this.PrevoiusLoginData.Login.selectedRecord) {\n      this.setState({\n        selectedRecord: this.props.Login.selectedRecord\n      });\n      check = true;\n    }\n\n    if (this.props.Login.selectedSpec !== this.PrevoiusLoginData.Login.selectedSpec) {\n      this.setState({\n        selectedSpec: this.props.Login.selectedSpec\n      });\n      check = true;\n    }\n\n    if (this.props.Login.selectedTestData !== this.PrevoiusLoginData.Login.selectedTestData) {\n      this.setState({\n        selectedTestData: this.props.Login.selectedTestData\n      });\n      check = true;\n    }\n\n    if (this.props.Login.selectComponent !== this.PrevoiusLoginData.Login.selectComponent) {\n      this.setState({\n        selectComponent: this.props.Login.selectComponent\n      });\n      check = true;\n    }\n\n    if (this.props.Login.SubSamplewithoutCombocomponent !== this.PrevoiusLoginData.Login.SubSamplewithoutCombocomponent) {\n      this.setState({\n        SubSamplewithoutCombocomponent: this.props.Login.SubSamplewithoutCombocomponent\n      });\n      check = true;\n    }\n\n    if (this.props.Login.SubSamplecomboComponents !== this.PrevoiusLoginData.Login.SubSamplecomboComponents) {\n      this.setState({\n        SubSamplecomboComponents: this.props.Login.SubSamplecomboComponents\n      });\n      check = true;\n    }\n\n    if (this.props.Login.parentSubSampleColumnList !== this.PrevoiusLoginData.Login.parentSubSampleColumnList) {\n      this.setState({\n        parentSubSampleColumnList: this.props.Login.parentSubSampleColumnList\n      });\n      check = true;\n    }\n\n    if (check) {\n      this.PrevoiusLoginData = previousProps;\n    }\n\n    if (masterStatus !== \"\" && masterStatus !== undefined) {\n      toast.warn(masterStatus);\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          masterStatus: \"\"\n        }\n      };\n      this.props.updateStore(updateInfo);\n      masterStatus = \"\";\n    }\n\n    if (this.props.innerPopup !== this.state.innerTop) {\n      setTimeout(() => {\n        let scrollDoc = this.props.modalEvent && this.props.modalEvent.id ? document.getElementById(this.props.modalEvent.id) : null;\n\n        if (this.myRef && this.myRef.current) {\n          this.myRef.current.scrollIntoView({\n            behavior: 'smooth'\n          });\n        }\n\n        if (scrollDoc) {\n          scrollDoc.scrollIntoView({\n            behavior: 'smooth'\n          });\n        }\n      }, 100);\n      this.setState({\n        innerTop: this.props.innerPopup\n      });\n    }\n  }\n\n  ComponentObjectAfterSave() {\n    const testrequired = this.state.selectedRecord.ntransactionstatus;\n    let objcomponent = this.state.selectComponent;\n    delete objcomponent.nneedservice;\n\n    if (testrequired === 3) {\n      this.props.getTestfromDB(objcomponent, this.props.Login, 2);\n    } else {\n      const Component = this.props.Login.Component || [];\n      let saveComponent = { ...objcomponent\n      };\n      saveComponent[\"slno\"] = this.props.Login.Component ? Object.keys(this.props.Login.Component).length + 1 : 1;\n      saveComponent[\"scomponentname\"] = objcomponent[\"ncomponentcode\"].label;\n      saveComponent[\"ncomponentcode\"] = objcomponent[\"ncomponentcode\"] ? objcomponent[\"ncomponentcode\"].value : -1;\n      const dreceiveddate = objcomponent[\"dreceiveddate\"];\n      saveComponent[\"dreceiveddate\"] = dreceiveddate;\n      saveComponent[\"sreceiveddate\"] = convertDateTimetoString(dreceiveddate, this.props.Login.userInfo);\n      saveComponent[\"nallottedspeccode\"] = objcomponent[\"nallottedspeccode\"] ? objcomponent[\"nallottedspeccode\"] : -1;\n      saveComponent[\"ntzdreceivedate\"] = objcomponent[\"ntzdreceivedate\"] ? objcomponent[\"ntzdreceivedate\"].value : -1;\n      saveComponent[\"stzdreceivedate\"] = objcomponent[\"ntzdreceivedate\"] ? objcomponent[\"ntzdreceivedate\"].label : \"\";\n      saveComponent[\"jsondata\"] = \"\";\n      Component.unshift(saveComponent);\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          Component,\n          openChildModal: false,\n          selectedComponent: saveComponent,\n          SelectedTest: [],\n          selectComponent: {},\n          showSaveContinue: false,\n          loadComponent: false,\n          parentPopUpSize: \"xl\"\n        }\n      };\n      this.props.updateStore(updateInfo);\n    }\n  }\n\n  ComponentObject() {\n    const testrequired = this.state.selectedRecord.ntransactionstatus;\n    let objcomponent = this.state.selectComponent;\n    delete objcomponent.nneedservice;\n    let objcomponent1 = { ...this.state.selectComponent\n    };\n\n    if (testrequired === 3) {\n      this.props.getTestfromDB(objcomponent, this.props.Login, 1);\n    } else {\n      const Component = this.props.Login.Component || [];\n      let saveComponent = { ...objcomponent\n      };\n      saveComponent[\"scomponentname\"] = objcomponent[\"ncomponentcode\"].label;\n      saveComponent[\"slno\"] = this.props.Login.Component ? Object.keys(this.props.Login.Component).length + 1 : 1;\n      saveComponent[\"ncomponentcode\"] = objcomponent[\"ncomponentcode\"] ? objcomponent[\"ncomponentcode\"].value : -1;\n      const dreceiveddate = objcomponent[\"dreceiveddate\"];\n      saveComponent[\"dreceiveddate\"] = dreceiveddate;\n      saveComponent[\"sreceiveddate\"] = convertDateTimetoString(dreceiveddate, this.props.Login.userInfo);\n      saveComponent[\"ntzdreceivedate\"] = objcomponent[\"ntzdreceivedate\"] ? objcomponent[\"ntzdreceivedate\"].value : -1;\n      saveComponent[\"stzdreceivedate\"] = objcomponent[\"ntzdreceivedate\"] ? objcomponent[\"ntzdreceivedate\"].label : \"\";\n      saveComponent[\"nallottedspeccode\"] = objcomponent[\"nallottedspeccode\"] ? objcomponent[\"nallottedspeccode\"] : -1;\n      saveComponent[\"jsondata\"] = \"\";\n      Component.unshift(saveComponent);\n      objcomponent1[\"scomments\"] = \"\";\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          Component,\n          selectedComponent: saveComponent,\n          SelectedTest: [],\n          selectComponent: objcomponent1\n        }\n      };\n      this.props.updateStore(updateInfo);\n    }\n  }\n\n  SubSampleObjectAfterSave() {\n    const testrequired = this.state.selectedRecord.ntransactionstatus;\n    let objcomponent = this.state.selectComponent;\n    delete objcomponent.nneedservice;\n    const defaulttimezone = this.props.Login.defaulttimezone;\n    const userInfo = this.props.Login.userInfo;\n\n    if (testrequired === 3) {\n      this.props.getTestfromDB(objcomponent, this.props.Login, 2);\n    } else {\n      const Component = this.props.Login.Component || [];\n      let saveComponent = {}; // saveComponent[\"scomponentname\"] = objcomponent[\"ncomponentcode\"].label;\n      //saveComponent[\"ncomponentcode\"] = objcomponent[\"ncomponentcode\"] ? objcomponent[\"ncomponentcode\"].value : -1;\n\n      saveComponent[\"slno\"] = this.props.Login.Component ? Object.keys(this.props.Login.Component).length + 1 : 1;\n      saveComponent[\"nspecsampletypecode\"] = this.state.selectedSpec[\"nallottedspeccode\"] ? this.state.selectedSpec[\"nallottedspeccode\"]['item'].nspecsampletypecode : -1;\n      saveComponent[\"jsondata\"] = {};\n      this.props.Login.masterData.SubSampleTemplate && this.props.Login.masterData.SubSampleTemplate.jsondata.map(row => {\n        row.children.map(column => {\n          column.children.map(component => {\n            if (component.hasOwnProperty(\"children\")) {\n              let componentrowlabel = '';\n              let componentrowvalue = '';\n              component.children.map(componentrow => {\n                if (componentrow.inputtype === \"combo\") {\n                  saveComponent[\"jsondata\"][componentrow.label] = objcomponent[componentrow.label] ? {\n                    value: objcomponent[componentrow.label].value,\n                    label: objcomponent[componentrow.label].label\n                  } : -1;\n\n                  if (componentrow.mandatory || objcomponent[componentrow.label]) {\n                    componentrowlabel = componentrowlabel + '&' + componentrow.label;\n                    componentrowvalue = componentrowvalue + ' ' + objcomponent[componentrow.label].label;\n                  }\n                } else if (componentrow.inputtype === \"date\") {\n                  if (componentrow.mandatory) {\n                    saveComponent[\"jsondata\"][componentrow.label] = convertDateTimetoString(objcomponent[componentrow.label] ? objcomponent[componentrow.label] : new Date(), userInfo);\n                  } else {\n                    saveComponent[\"jsondata\"][componentrow.label] = componentrow.loadcurrentdate ? convertDateTimetoString(objcomponent[componentrow.label] ? objcomponent[componentrow.label] : new Date(), userInfo) : objcomponent[componentrow.label] ? convertDateTimetoString(objcomponent[componentrow.label] ? objcomponent[componentrow.label] : new Date(), userInfo) : \"\";\n                  }\n\n                  if (componentrow.timezone) {\n                    saveComponent[\"jsondata\"][`tz${componentrow.label}`] = objcomponent[`tz${componentrow.label}`] ? {\n                      value: objcomponent[`tz${componentrow.label}`].value,\n                      label: objcomponent[`tz${componentrow.label}`].label\n                    } : defaulttimezone ? defaulttimezone : -1;\n                  } // dateList.push(componentrow.label)\n\n                } else {\n                  saveComponent[\"jsondata\"][componentrow.label] = objcomponent[componentrow.label] ? objcomponent[componentrow.label] : \"\";\n\n                  if (objcomponent[componentrow.label]) {\n                    componentrowlabel = componentrowlabel + '&' + componentrow.label;\n                    componentrowvalue = componentrowvalue + ' ' + objcomponent[componentrow.label];\n                  }\n                }\n              });\n              saveComponent[\"jsondata\"][componentrowlabel.substring(1)] = componentrowvalue;\n            } else {\n              if (component.inputtype === \"combo\") {\n                saveComponent[\"jsondata\"][component.label] = objcomponent[component.label] ? {\n                  value: objcomponent[component.label].value,\n                  label: objcomponent[component.label].label\n                } : -1;\n              } else if (component.inputtype === \"date\") {\n                if (component.mandatory) {\n                  saveComponent[\"jsondata\"][component.label] = convertDateTimetoString(objcomponent[component.label] ? objcomponent[component.label] : new Date(), userInfo);\n                } else {\n                  saveComponent[\"jsondata\"][component.label] = component.loadcurrentdate ? convertDateTimetoString(objcomponent[component.label] ? objcomponent[component.label] : new Date(), userInfo) : objcomponent[component.label] ? convertDateTimetoString(objcomponent[component.label] ? objcomponent[component.label] : new Date(), userInfo) : \"\";\n                }\n\n                if (component.timezone) {\n                  saveComponent[\"jsondata\"][`tz${component.label}`] = objcomponent[`tz${component.label}`] ? {\n                    value: objcomponent[`tz${component.label}`].value,\n                    label: objcomponent[`tz${component.label}`].label\n                  } : defaulttimezone ? defaulttimezone : -1;\n                } //dateList.push(component.label)\n\n              } else {\n                saveComponent[\"jsondata\"][component.label] = objcomponent[component.label] ? objcomponent[component.label] : \"\";\n              }\n            }\n          });\n        });\n      });\n      saveComponent[\"nallottedspeccode\"] = this.state.selectedSpec[\"nallottedspeccode\"] ? this.state.selectedSpec[\"nallottedspeccode\"].value : -1;\n      Component.unshift(saveComponent);\n      let selectedTestData = this.state.selectedTestData[\"ntestgrouptestcode\"];\n      const selectedTestArray = [];\n      selectedTestData && selectedTestData.map(item => {\n        //  item.item['slno']=saveComponent.slno;\n        return selectedTestArray.push(item.item);\n      }); // selectedTestArray.map((item,i)=>{\n      //    selectedTestArray[i]['slno']=saveComponent.slno;\n      // })\n      // let selectedComponent = this.props.Login.selectedComponent;\n\n      const Test = this.props.Login.Test || [];\n      const ArrayTest = Test[saveComponent.slno] ? Test[saveComponent.slno] : []; //  ArrayTest.push(selectedTestArray);\n\n      Test[saveComponent.slno] = [...ArrayTest, ...selectedTestArray];\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          Component,\n          openChildModal: false,\n          selectedComponent: saveComponent,\n          loadSubSample: false,\n          selectComponent: {},\n          showSaveContinue: false,\n          parentPopUpSize: \"xl\",\n          SelectedTest: Test[saveComponent.slno],\n          Test: Test,\n          selectedTestData: {},\n          screenName: this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename\n        }\n      };\n      this.props.updateStore(updateInfo);\n    }\n  }\n\n  SubSampleObject() {\n    const testrequired = this.state.selectedRecord.ntransactionstatus;\n    let objcomponent = this.state.selectComponent;\n    delete objcomponent.nneedservice;\n    let objcomponent1 = { ...this.state.selectComponent\n    };\n    const defaulttimezone = this.props.Login.defaulttimezone;\n    const userInfo = this.props.Login.userInfo;\n\n    if (testrequired === 3) {\n      this.props.getTestfromDB(objcomponent, this.props.Login, 1);\n    } else {\n      const Component = this.props.Login.Component || [];\n      let saveComponent = {};\n      saveComponent[\"slno\"] = this.props.Login.Component ? Object.keys(this.props.Login.Component).length + 1 : 1;\n      saveComponent[\"jsondata\"] = {};\n      this.props.Login.masterData.SubSampleTemplate && this.props.Login.masterData.SubSampleTemplate.jsondata.map(row => {\n        row.children.map(column => {\n          column.children.map(component => {\n            if (component.hasOwnProperty(\"children\")) {\n              let componentrowlabel = '';\n              let componentrowvalue = '';\n              component.children.map(componentrow => {\n                if (componentrow.inputtype === \"combo\") {\n                  saveComponent[\"jsondata\"][componentrow.label] = objcomponent[componentrow.label] ? {\n                    value: objcomponent[componentrow.label].value,\n                    label: objcomponent[componentrow.label].label\n                  } : -1;\n\n                  if (componentrow.mandatory || objcomponent[componentrow.label]) {\n                    componentrowlabel = componentrowlabel + '&' + componentrow.label;\n                    componentrowvalue = componentrowvalue + ' ' + objcomponent[componentrow.label].label;\n                  }\n                } else if (componentrow.inputtype === \"date\") {\n                  if (componentrow.mandatory) {\n                    saveComponent[\"jsondata\"][componentrow.label] = convertDateTimetoString(objcomponent[componentrow.label] ? objcomponent[componentrow.label] : new Date(), userInfo);\n                  } else {\n                    saveComponent[\"jsondata\"][componentrow.label] = componentrow.loadcurrentdate ? convertDateTimetoString(objcomponent[componentrow.label] ? objcomponent[componentrow.label] : new Date(), userInfo) : objcomponent[componentrow.label] ? convertDateTimetoString(objcomponent[componentrow.label] ? objcomponent[componentrow.label] : new Date(), userInfo) : \"\";\n                  }\n\n                  if (componentrow.timezone) {\n                    saveComponent[\"jsondata\"][`tz${componentrow.label}`] = objcomponent[`tz${componentrow.label}`] ? {\n                      value: objcomponent[`tz${componentrow.label}`].value,\n                      label: objcomponent[`tz${componentrow.label}`].label\n                    } : defaulttimezone ? defaulttimezone : -1;\n                  } // dateList.push(componentrow.label)\n\n                } else {\n                  saveComponent[\"jsondata\"][componentrow.label] = objcomponent[componentrow.label] ? objcomponent[componentrow.label] : \"\";\n\n                  if (objcomponent[componentrow.label]) {\n                    componentrowlabel = componentrowlabel + '&' + componentrow.label;\n                    componentrowvalue = componentrowvalue + ' ' + objcomponent[componentrow.label];\n                  }\n                }\n              });\n              saveComponent[\"jsondata\"][componentrowlabel.substring(1)] = componentrowvalue;\n            } else {\n              if (component.inputtype === \"combo\") {\n                saveComponent[\"jsondata\"][component.label] = objcomponent[component.label] ? {\n                  value: objcomponent[component.label].value,\n                  label: objcomponent[component.label].label\n                } : -1;\n              } else if (component.inputtype === \"date\") {\n                if (component.mandatory) {\n                  saveComponent[\"jsondata\"][component.label] = convertDateTimetoString(objcomponent[component.label] ? objcomponent[component.label] : new Date(), userInfo);\n                } else {\n                  saveComponent[\"jsondata\"][component.label] = component.loadcurrentdate ? convertDateTimetoString(objcomponent[component.label] ? objcomponent[component.label] : new Date(), userInfo) : objcomponent[component.label] ? convertDateTimetoString(objcomponent[component.label] ? objcomponent[component.label] : new Date(), userInfo) : \"\";\n                }\n\n                if (component.timezone) {\n                  saveComponent[\"jsondata\"][`tz${component.label}`] = objcomponent[`tz${component.label}`] ? {\n                    value: objcomponent[`tz${component.label}`].value,\n                    label: objcomponent[`tz${component.label}`].label\n                  } : defaulttimezone ? defaulttimezone : -1;\n                } //dateList.push(component.label)\n\n              } else {\n                saveComponent[\"jsondata\"][component.label] = objcomponent[component.label] ? objcomponent[component.label] : \"\";\n              }\n            }\n          });\n        });\n      });\n      saveComponent[\"nspecsampletypecode\"] = this.state.selectedSpec[\"nallottedspeccode\"] ? this.state.selectedSpec[\"nallottedspeccode\"]['item'].nspecsampletypecode : -1;\n      saveComponent[\"nallottedspeccode\"] = this.state.selectedSpec[\"nallottedspeccode\"] ? this.state.selectedSpec[\"nallottedspeccode\"].value : -1;\n      Component.unshift(saveComponent); // objcomponent1[\"scomments\"] = \"\";\n      //objcomponent1[\"ssubsamplename\"] = \"\";\n\n      let selectedTestData = this.state.selectedTestData[\"ntestgrouptestcode\"];\n      let selectedTestArray = [];\n      selectedTestData && selectedTestData.map(item => {\n        // item.item['slno']=saveComponent.slno;\n        return selectedTestArray.push(item.item);\n      }); // selectedTestArray.map((item,i)=>{\n      //     selectedTestArray[i]['slno']=saveComponent.slno;\n      // })\n\n      let Test = this.props.Login.Test || [];\n      const ArrayTest = Test[saveComponent.slno] ? Test[saveComponent.slno] : [];\n      Test[saveComponent.slno] = [...ArrayTest, ...selectedTestArray];\n      const updateInfo = {\n        Component,\n        selectedComponent: saveComponent,\n        selectComponent: objcomponent1,\n        SelectedTest: Test[saveComponent.slno],\n        Test: Test //, selectedTestData: {}\n\n      };\n      this.addSubSampleSaveContinue(updateInfo); // const updateInfo = {\n      //     typeName: DEFAULT_RETURN,\n      //     data: {\n      //         Component, selectedComponent: saveComponent,\n      //         selectComponent: objcomponent1,\n      //         SelectedTest: Test[saveComponent.slno],\n      //         Test: Test, selectedTestData: {}\n      //     }\n      // }\n      // this.props.updateStore(updateInfo);\n    }\n  }\n\n  onUpdateRegistration(saveType, formRef, operation, flag) {\n    const inputData = {\n      userinfo: this.props.Login.userInfo\n    };\n    let initialParam = {\n      nfilterstatus: this.props.Login.masterData.FilterStatusValue.ntransactionstatus,\n      userinfo: this.props.Login.userInfo,\n      nsampletypecode: this.props.Login.masterData.RealSampleTypeValue.nsampletypecode,\n      nregtypecode: this.props.Login.masterData.RealRegTypeValue.nregtypecode,\n      nregsubtypecode: this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode,\n      fromdate: \"\",\n      todate: \"\",\n      nflag: 2,\n      ntype: 2,\n      npreregno: String(this.state.selectedRecord.npreregno),\n      ndesigntemplatemappingcode: this.props.Login.masterData.registrationTemplate && this.props.Login.masterData.registrationTemplate.ndesigntemplatemappingcode,\n      nneedsubsample: this.props.Login.masterData && this.props.Login.masterData.nneedsubsample,\n      checkBoxOperation: 3\n    };\n    inputData[\"initialparam\"] = initialParam; // inputData[\"samplebeforeedit\"] = JSON.parse(JSON.stringify(this.props.Login.regRecordToEdit));\n    //inputData[\"registration\"] = JSON.parse(JSON.stringify(this.state.selectedRecord));\n\n    const param = getRegistration(this.props.Login.masterData, this.state.selectedRecord, this.state.selectedSpec, this.props.Login.masterData.registrationTemplate.jsondata, this.props.Login.userInfo, this.props.Login.defaulttimezone, operation);\n    inputData[\"registration\"] = param.sampleRegistration;\n    inputData[\"DateList\"] = param.dateList;\n    inputData[\"flag\"] = flag === undefined ? 1 : flag;\n    inputData[\"ndesigntemplatemappingcode\"] = this.props.Login.masterData.registrationTemplate && this.props.Login.masterData.registrationTemplate.ndesigntemplatemappingcode;\n    inputData[\"nneedsubsample\"] = this.props.Login.masterData && this.props.Login.masterData.nneedsubsample;\n    inputData[\"checkBoxOperation\"] = 3; // Object.keys(this.state.selectedRecord).map(key => {\n    //     if (typeof this.state.selectedRecord[key] === \"object\") {\n    //         if (this.state.selectedRecord[key] === null) {\n    //             return inputData[\"registration\"][key] = this.state.selectedRecord[key];\n    //         }\n    //         else if (this.state.selectedRecord[key] instanceof Date) {\n    //             return inputData[\"registration\"][key] = formatInputDate(this.state.selectedRecord[key], false);\n    //         }\n    //         else {\n    //             return inputData[\"registration\"][key] = this.state.selectedRecord[key].value\n    //         }\n    //     }\n    //     else {\n    //         return inputData[\"registration\"][key] = this.state.selectedRecord[key];\n    //     }\n    // }\n    //  )\n    // console.log(\"edit:\", inputData);\n    // if (inputData[\"registration\"] ) {\n    //     delete inputData[\"registration\"][\"esignpassword\"]\n    //     delete inputData[\"registration\"][\"esigncomments\"]\n    //     delete inputData[\"registration\"][\"agree\"]\n    // }\n\n    const inputParam = {\n      classUrl: this.props.Login.inputParam.classUrl,\n      methodUrl: \"Registration\",\n      displayName: this.props.Login.inputParam.displayName,\n      inputData: inputData,\n      operation: operation,\n      saveType,\n      formRef,\n      action: 'editSample',\n      showConfirmAlert: false,\n      resultDataState: this.state.resultDataState,\n      testCommentDataState: this.state.testCommentDataState // dataState:undefined, selectedId\n\n    };\n\n    if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          loadEsign: true,\n          screenData: {\n            inputParam,\n            masterData: this.props.Login.masterData\n          },\n          saveType,\n          parentPopUpSize: \"lg\"\n        }\n      };\n      this.props.updateStore(updateInfo);\n    } else {\n      //this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\n      this.props.updateRegistration(inputParam, this.props.Login.masterData, \"openModal\");\n    }\n  }\n\n  findSubsampleDateList(subsampletemplate) {\n    const dateList = [];\n    subsampletemplate && subsampletemplate.map(row => {\n      row.children.map(column => {\n        column.children.map(component => {\n          if (component.hasOwnProperty(\"children\")) {\n            component.children.map(componentrow => {\n              if (componentrow.inputtype === \"date\") {\n                dateList.push(componentrow.label);\n              }\n            });\n          } else {\n            if (component.inputtype === \"date\") {\n              dateList.push(component.label);\n            }\n          }\n        });\n      });\n    });\n    return dateList;\n  }\n\n  insertRegistration() {\n    let Components = this.props.Login.Component;\n\n    if (Components && Components.length > 0) {\n      let Test = this.props.Login.Test;\n      let Map = {};\n      Map[\"testgrouptest\"] = TestListManipulation(Components, Test);\n      Map[\"RegistrationSample\"] = this.props.Login.Component ? this.props.Login.Component : [];\n      Map[\"subsampleDateList\"] = this.findSubsampleDateList(this.props.Login.masterData.SubSampleTemplate.jsondata); //Map[\"FromDate\"] = rearrangeDateFormat(this.props.Login.userInfo, this.props.fromDate);//formatDate(this.fromDate);\n      // Map[\"ToDate\"] = rearrangeDateFormat(this.props.Login.userInfo, this.props.toDate);//formatDate(this.toDate);\n\n      Map[\"FromDate\"] = \"\";\n      Map[\"ToDate\"] = \"\";\n      Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\n      Map[\"nregsubtypecode\"] = this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode;\n      Map[\"nsampletypecode\"] = this.props.Login.masterData.RealSampleTypeValue.nsampletypecode;\n      Map[\"nfilterstatus\"] = transactionStatus.PREREGISTER;\n      Map[\"ndesigntemplatemappingcode\"] = this.props.Login.masterData.registrationTemplate && this.props.Login.masterData.registrationTemplate.ndesigntemplatemappingcode;\n      Map[\"nneedsubsample\"] = this.props.Login.masterData && this.props.Login.masterData.nneedsubsample;\n      Map[\"checkBoxOperation\"] = 3;\n      const param = getRegistration(this.props.Login.masterData, this.state.selectedRecord, this.state.selectedSpec, this.props.Login.masterData.registrationTemplate.jsondata, this.props.Login.userInfo, this.props.Login.defaultTimeZone);\n      Map[\"Registration\"] = param.sampleRegistration;\n      Map[\"DateList\"] = param.dateList;\n      Map[\"userinfo\"] = this.props.Login.userInfo;\n      Map[\"nflag\"] = 2; // Map[\"ntype\"] = 2;\n\n      Map[\"activeSampleTab\"] = this.props.Login.activeSampleTab;\n      Map[\"activeTestTab\"] = this.props.Login.activeTestTab;\n      Map[\"multipleselectionFlag\"] = this.props.Login.settings && parseInt(this.props.Login.settings[7]) === 3 ? true : false;\n      const inputParam = {\n        inputData: Map,\n        postParamList: this.props.postParamList,\n        action: \"preregister\"\n      };\n      this.props.insertRegistration(inputParam, this.props.Login.masterData);\n    } else {\n      toast.warn(this.props.intl.formatMessage({\n        id: \"IDS_ADDSUBSAMPLETOPREREGISTER\"\n      }));\n    }\n  }\n\n  render() {\n    let saveType = 1;\n\n    if (this.props.ignoreFormValidation) {\n      saveType = 5;\n    }\n\n    let buttonLabel = \"Save\";\n    let idsLabel = \"IDS_SAVE\";\n\n    if (this.props.buttonLabel) {\n      buttonLabel = this.props.buttonLabel;\n      idsLabel = 'IDS_'.concat(buttonLabel.toUpperCase());\n    }\n\n    const testColumnList = [{\n      \"idsName\": \"IDS_TESTNAME\",\n      \"dataField\": \"stestsynonym\",\n      width: \"200px\"\n    }, {\n      \"idsName\": \"IDS_SECTION\",\n      \"dataField\": \"ssectionname\",\n      width: \"150px\"\n    }, {\n      \"idsName\": \"IDS_SOURCE\",\n      \"dataField\": \"ssourcename\",\n      width: \"150px\"\n    }, {\n      \"idsName\": \"IDS_METHOD\",\n      \"dataField\": \"smethodname\",\n      width: \"150px\"\n    }, {\n      \"idsName\": \"IDS_INSTRUMENTCATEGORY\",\n      \"dataField\": \"sinstrumentcatname\",\n      width: \"200px\"\n    }];\n    return /*#__PURE__*/React.createElement(Modal, {\n      size: this.props.Login.loadComponent ? 'lg' : this.props.Login.loadSpec ? 'lg' : this.props.Login.loadTest ? 'lg' : this.props.Login.loadSubSample ? 'lg' : 'xl' // size={this.props.templateData[0] ?\n      //     this.props.templateData[0].children ?\n      //         this.props.templateData[0].children.length >= 2 ? 'xl' : 'lg' : 'lg' : 'lg'}\n      ,\n      backdrop: \"static\" //className={this.props.className || \"registrationModel\"}\n      ,\n      className: this.props.className || \"\",\n      show: this.props.Login.openPortal,\n      onHide: this.props.closeModal,\n      enforceFocus: false,\n      dialogClassName: \"modal-dialog-slideout freakerstop\",\n      \"aria-labelledby\": \"add-user\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1849,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Modal.Header, {\n      className: \"d-flex align-items-center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1866,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Modal.Title, {\n      id: \"add-user\",\n      className: \"header-primary flex-grow-1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1867,\n        columnNumber: 21\n      }\n    }, this.props.graphView === true ? \"\" : this.props.Login.inputParam ? this.props.Login.esign === true ? /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_ESIGN\",\n      defaultMessage: \"Esign\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1870,\n        columnNumber: 33\n      }\n    }) : this.props.loginoperation ? /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: this.props.Login.screenName,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1872,\n        columnNumber: 37\n      }\n    }) : /*#__PURE__*/React.createElement(React.Fragment, null, this.props.operation ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: this.props.Login.operation && \"IDS_\".concat(this.props.Login.operation.toUpperCase()),\n      defaultMessage: \"Add\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1876,\n        columnNumber: 49\n      }\n    }), \" \", this.props.Login.screenName ? /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: this.props.Login.screenName,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1881,\n        columnNumber: 57\n      }\n    }) : \"\") : this.props.Login.screenName ? /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: this.props.Login.screenName,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1887,\n        columnNumber: 49\n      }\n    }) : \"\") : \"\"), /*#__PURE__*/React.createElement(Button, {\n      className: \"btn-user btn-cancel\",\n      variant: \"\",\n      onClick: this.props.Login.loadSpec ? this.closeSpec : this.props.Login.loadTest ? this.closeTest : this.props.Login.loadComponent ? this.closeComponent : this.props.Login.loadSubSample ? this.closeSubSample : this.props.closeModal,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1892,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_CANCEL\",\n      defaultMessage: \"Cancel\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1896,\n        columnNumber: 25\n      }\n    })), this.props.esign === true ? /*#__PURE__*/React.createElement(Button, {\n      className: \"btn-user btn-primary-blue\",\n      onClick: () => this.handleSaveClick(3),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1899,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faSave,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1900,\n        columnNumber: 29\n      }\n    }), \" \", /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_SUBMIT\",\n      defaultMessage: \"Submit\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1901,\n        columnNumber: 29\n      }\n    })) : (this.props.operation === \"create\" || this.props.operation === \"update\") && this.props.showValidate ? /*#__PURE__*/React.createElement(Button, {\n      className: \"btn-user btn-primary-blue\",\n      onClick: () => this.handleSaveClick(4),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1905,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faSave,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1906,\n        columnNumber: 33\n      }\n    }), \" \", /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_VALIDATE\",\n      defaultMessage: \"Validate\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1907,\n        columnNumber: 33\n      }\n    })) : this.props.showCalculate ? /*#__PURE__*/React.createElement(Button, {\n      className: \"btn-user btn-primary-blue\",\n      onClick: () => this.handleSaveClick(saveType),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1910,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faSave,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1911,\n        columnNumber: 37\n      }\n    }), \" \", /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_CALCULATE\",\n      defaultMessage: \"Calculate\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1912,\n        columnNumber: 37\n      }\n    })) : this.props.showParam === true && this.props.showExecute ? /*#__PURE__*/React.createElement(Button, {\n      className: \"btn-user btn-primary-blue\",\n      onClick: () => this.handleSaveClick(4),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1915,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faCalculator,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1916,\n        columnNumber: 41\n      }\n    }), \" \", /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_EXECUTE\",\n      defaultMessage: \"Execute\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1917,\n        columnNumber: 41\n      }\n    })) : this.props.noSave || this.props.graphView ? this.props.operation === \"view\" ? \"\" : /*#__PURE__*/React.createElement(Button, {\n      className: \"btn btn-user btn-primary-blue\",\n      role: \"button\",\n      onClick: this.props.resetView,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1921,\n        columnNumber: 47\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_RESET\",\n      defaultMessage: \"Reset\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1924,\n        columnNumber: 49\n      }\n    })) : this.props.hideSave ? \"\" : /*#__PURE__*/React.createElement(Button, {\n      className: \" btn-user btn-primary-blue\",\n      onClick: () => this.handleSaveClick(saveType),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1927,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faSave,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1928,\n        columnNumber: 49\n      }\n    }), \" \", /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: idsLabel,\n      defaultMessage: buttonLabel,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1929,\n        columnNumber: 49\n      }\n    })), this.props.Login.operation === \"create\" && this.props.Login.showSaveContinue ? /*#__PURE__*/React.createElement(Button, {\n      className: \"btn-user btn-primary-blue\",\n      onClick: () => this.handleSaveClick(2),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1933,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faSave,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1934,\n        columnNumber: 29\n      }\n    }), \" \", /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_SAVECONTINUE\",\n      defaultMessage: \"Save & Continue\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1935,\n        columnNumber: 29\n      }\n    })) : \"\", (this.props.operation === \"create\" || this.props.operation === \"update\") && this.props.esign !== true && this.props.showExecute === true && this.props.showSave ? /*#__PURE__*/React.createElement(Button, {\n      className: \"btn-user btn-primary-blue\",\n      onClick: () => this.handleSaveClick(1),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1941,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faSave,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1942,\n        columnNumber: 29\n      }\n    }), \" \", /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_SAVE\",\n      defaultMessage: \"Save\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1943,\n        columnNumber: 29\n      }\n    })) : \"\"), /*#__PURE__*/React.createElement(Modal.Body, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1947,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(ModalInner, {\n      ref: this.myRef,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1948,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Card.Body, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1949,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1958,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Form, {\n      ref: this.formRef,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1959,\n        columnNumber: 33\n      }\n    }, this.props.Login.loadSpec ? /*#__PURE__*/React.createElement(AddSpecification, {\n      AgaramTree: this.props.Login.AgaramTree,\n      openNodes: this.props.Login.OpenNodes,\n      handleTreeClick: this.onTreeClick,\n      focusKey: this.props.Login.FocusKey,\n      activeKey: this.props.Login.ActiveKey,\n      Specification: this.props.Login.Specification,\n      selectedSpec: this.state.selectedSpec,\n      selectedRecord: this.state.selectedRecord,\n      onSpecChange: this.onspecChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1962,\n        columnNumber: 45\n      }\n    }) : this.props.Login.loadTest ? /*#__PURE__*/React.createElement(AddTest, {\n      TestCombined: this.props.Login.TestCombined || [],\n      TestChange: this.TestChange,\n      selectedTestData: this.props.Login.selectedTestData,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1974,\n        columnNumber: 49\n      }\n    }) : this.props.Login.loadComponent ? /*#__PURE__*/React.createElement(AddComponentPopUp, {\n      ref: this.myScrollRef,\n      selectComponent: this.state.selectComponent || {},\n      RealSampleTypeValue: this.props.Login.masterData.RealSampleTypeValue || {},\n      RealRegTypeValue: this.props.Login.masterData.RealRegTypeValue || {},\n      RealRegSubTypeValue: this.props.Login.masterData.RealRegSubTypeValue || {},\n      RealFilterStatusValue: this.props.Login.masterData.RealFilterStatusValue || {},\n      formatMessage: this.props.intl.formatMessage,\n      handleDateChange: this.handleDateChangeComp,\n      Component: this.props.Login.lstComponent || [],\n      onInputComponentOnChange: this.onInputComponentOnChange // onComboChange={this.onComponentComboChange}\n      ,\n      timeZoneList: this.props.Login.timeZoneList,\n      onComponentChange: this.onComponentChange,\n      userInfo: this.props.Login.userInfo,\n      sreceiveddate: this.props.Login.sreceiveddate || [],\n      CurrentTime: this.props.Login.CurrentTime,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1979,\n        columnNumber: 53\n      }\n    }) : this.props.Login.loadSubSample ? /*#__PURE__*/React.createElement(AddSubSample, {\n      Component: this.props.Login.lstComponent || [],\n      selectComponent: this.state.selectComponent // Unit={this.props.Login.Unit || []}\n      ,\n      onComponentChange: this.onComponentChange,\n      onInputComponentOnChange: this.onInputComponentOnChange,\n      templateData: this.props.Login.masterData.SubSampleTemplate && this.props.Login.masterData.SubSampleTemplate.jsondata,\n      userInfo: this.props.Login.userInfo,\n      timeZoneList: this.props.Login.timeZoneList,\n      defaultTimeZone: this.props.Login.defaultTimeZone,\n      handleDateChange: this.handleDateSubSampleChange,\n      onInputOnChange: this.onInputOnSubSampleChange,\n      onNumericInputChange: this.onNumericInputSubSampleChange,\n      comboData: this.props.Login.SubSamplecomboData,\n      onComboChange: this.onComboSubSampleChange,\n      TestCombined: this.props.Login.TestCombined || [],\n      TestChange: this.TestChange,\n      selectedTestData: this.state.selectedTestData,\n      childoperation: this.props.Login.childoperation,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1998,\n        columnNumber: 57\n      }\n    }) : /*#__PURE__*/React.createElement(RegisterSlideOut, {\n      editfield: this.sampleeditable && this.sampleeditable['sampleeditable'],\n      ntransactionstatus: this.props.Login.masterData && this.props.Login.masterData.selectedSample && this.props.Login.masterData.selectedSample.length > 0 && this.props.Login.masterData.selectedSample[0].jsondata.ntransactionstatus,\n      loadPreregister: this.props.Login.loadPreregister,\n      selectedSpec: this.state.selectedSpec,\n      selectedRecord: this.state.selectedRecord,\n      selectedComponent: this.props.Login.selectedComponent,\n      SelectedTest: this.props.Login.SelectedTest,\n      selectedTestData: this.state.selectedTestData,\n      userRoleControlRights: this.props.userRoleControlRights,\n      templateData: this.props.Login.masterData.registrationTemplate && this.props.Login.masterData.registrationTemplate.jsondata,\n      handleChange: this.props.handleChange,\n      handleDateChange: this.handleDateChange,\n      onInputOnChange: this.onInputOnChange,\n      onNumericInputChange: this.onNumericInputChange,\n      comboData: this.props.Login.comboData,\n      onComboChange: this.onComboChange,\n      userInfo: this.props.Login.userInfo,\n      timeZoneList: this.props.Login.timeZoneList,\n      defaultTimeZone: this.props.Login.defaultTimeZone,\n      AddSpec: this.AddSpec,\n      addTest: this.addTestslide,\n      handleComponentRowClick: this.handleComponentRowClick,\n      nneedsubsample: this.props.Login.masterData && this.props.Login.masterData.nneedsubsample,\n      specBasedComponent: 4,\n      AddComponent: this.AddComponent,\n      deleteComponent: this.deleteComponent,\n      deleteTest: this.deleteTest,\n      editComponent: this.editComponent,\n      componentColumnList: this.componentColumnList,\n      Component: this.props.Login.Component,\n      TestChange: this.TestChange,\n      testDataState: this.state.testDataState,\n      subSampleDataState: this.state.subSampleDataState //componentDataState={this.state.componentDataState}\n      ,\n      testDataStateChange: this.testDataStateChange //componentDataStateChange={this.componentDataStateChange}\n      ,\n      subSampleDataStateChange: this.subSampleDataStateChange,\n      addsubSample: this.addsubSample,\n      editSubSample: this.editSubSample,\n      onNumericInputChange: this.onNumericInputChange,\n      subSampleDataGridList: this.subSampleDataGridList,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2019,\n        columnNumber: 59\n      }\n    })))))));\n  }\n\n}\n\nexport default connect(mapStateToProps, {\n  getChildValues,\n  getPreviewTemplate,\n  getNewRegSpecification,\n  AddComponents,\n  updateStore,\n  EditComponent,\n  getTest,\n  addsubSample,\n  editSubSample,\n  insertRegistration,\n  updateRegistration,\n  addSubSampleSaveContinue\n})(injectIntl(PreRegisterSlideOutModal));","map":{"version":3,"sources":["D:/Postgres_workingFolder/QuaLISWeb/src/pages/registration/PreRegisterSlideOutModal.jsx"],"names":["React","FormattedMessage","injectIntl","Button","Card","Form","Modal","FontAwesomeIcon","faSave","toast","DEFAULT_RETURN","ModalInner","transactionStatus","faCalculator","comboChild","convertDateTimetoString","getSameRecordFromTwoArrays","rearrangeDateFormat","showEsign","RegisterSlideOut","AddSpecification","AddTest","connect","getPreviewTemplate","getChildValues","getNewRegSpecification","AddComponents","updateStore","EditComponent","getTest","addsubSample","editSubSample","insertRegistration","updateRegistration","addSubSampleSaveContinue","AddComponentPopUp","AddSubSample","getComponentListfromUnwantedAttr","getRegistration","TestListManipulation","SplitterLayout","mapStateToProps","state","Login","PreRegisterSlideOutModal","Component","constructor","props","formRef","createRef","failedControls","testDataState","skip","take","settings","parseInt","subSampleDataState","selectedRecord","selectedSpec","selectComponent","selectedTest","selectedTestData","SubSamplecomboComponents","SubSamplewithoutCombocomponent","parentSubSampleColumnList","handleSaveClick","saveType","startLabel","label","mandatoryFields","loadComponent","loadSubSample","masterData","SubSampleTemplate","jsondata","map","row","children","column","component","hasOwnProperty","componentrow","mandatory","push","inputtype","loadTest","loadSpec","registrationTemplate","esign","forEach","item","dataField","undefined","alertMessage","alertPreFix","intl","formatMessage","id","idsName","alertSuffix","mandatoryLabel","validateFunction","validateData","length","trim","onExecuteClick","agree","NO","info","validateEsign","updateInfo","typeName","data","SelectedTest","Test","screenName","RealRegSubTypeValue","sregsubtypename","onSaveComponentClick","onSaveTestClick","onSaveSubSampleClick","onSaveClick","TestChange","comboData","fieldName","setState","onComboChange","control","customName","parentList","childComboList","childColumnList","comboName","product","productCategory","nproductcatcode","nproductcode","inputParem","child","source","primarykeyField","valuemember","value","nameofdefaultcomp","name","ProductCategory","comboComponents","filter","x","ncategorybasedflow","Product","columnList","val","withoutCombocomponent","mapOfFilter","nsampletypecode","RealSampleTypeValue","userInfo","onInputOnChange","event","radiotext","target","type","includes","index","indexOf","indexcomma","slice","onInputOnSubSampleChange","onComboSubSampleChange","SubSamplecomboData","onNumericInputChange","onNumericInputSubSampleChange","handleDateChangeComp","dateValue","dateName","handleDateChange","handleDateSubSampleChange","openFilter","showFilter","closeFilter","AddSpec","e","addTestslide","selectedComponent","nneedsubsample","specBasedComponent","Object","keys","warn","selectedComponent1","nallottedspeccode","slno","closeSpec","closeComponent","closeTest","closeSubSample","selectedSubSample","showSaveContinue","onspecChange","oldpromarycode","sversion","onTreeClick","inputParam","methodUrl","operation","activeKey","key","focusKey","keyName","userinfo","selectedNode","primaryKey","handleComponentRowClick","dataItem","AddComponent","Map","ntemplatemanipulationcode","RealRegTypeValue","nregtypecode","onComponentChange","nspecsampletypecode","onInputComponentOnChange","checked","childoperation","ComponentObjectAfterSave","ComponentObject","testrequired","ntransactionstatus","objcomponent","dreceiveddate","findIndex","splice","getTestByComponentChange","nneedservice","openChildModal","parentPopUpSize","SubSampleObjectAfterSave","SubSampleObject","defaulttimezone","componentrowlabel","componentrowvalue","Date","loadcurrentdate","timezone","substring","Components","editComponent","editselectedcomponent","inputData","objComponent","ChildscreenName","loading","deleteComponent","deleteTest","ntestgrouptestcode","selectedTestArray","ArrayTest","subsamplename","componentDataStateChange","componentDataState","dataState","testDataStateChange","subSampleDataStateChange","Layout","TestCombined","onUpdateRegistration","myRef","PrevoiusLoginData","componentColumnList","width","sampleeditable","JSON","parse","DynamicDesign","subSampleDataGridList","componentDidUpdate","previousProps","masterStatus","check","innerPopup","innerTop","setTimeout","scrollDoc","modalEvent","document","getElementById","current","scrollIntoView","behavior","getTestfromDB","saveComponent","unshift","objcomponent1","flag","initialParam","nfilterstatus","FilterStatusValue","nregsubtypecode","fromdate","todate","nflag","ntype","npreregno","String","ndesigntemplatemappingcode","checkBoxOperation","param","sampleRegistration","dateList","classUrl","displayName","action","showConfirmAlert","resultDataState","testCommentDataState","userRoleControlRights","nformcode","ncontrolCode","loadEsign","screenData","findSubsampleDateList","subsampletemplate","PREREGISTER","defaultTimeZone","activeSampleTab","activeTestTab","postParamList","render","ignoreFormValidation","buttonLabel","idsLabel","concat","toUpperCase","testColumnList","className","openPortal","closeModal","graphView","loginoperation","showValidate","showCalculate","showParam","showExecute","noSave","resetView","hideSave","showSave","AgaramTree","OpenNodes","FocusKey","ActiveKey","Specification","myScrollRef","RealFilterStatusValue","lstComponent","timeZoneList","sreceiveddate","CurrentTime","selectedSample","loadPreregister","handleChange"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { FormattedMessage, injectIntl } from 'react-intl';\r\nimport { Button, Card, Form, Modal } from 'react-bootstrap';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faSave } from '@fortawesome/free-regular-svg-icons';\r\nimport { toast } from 'react-toastify';\r\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\r\nimport { ModalInner } from '../../components/App.styles';\r\nimport { transactionStatus } from '../../components/Enumeration';\r\nimport { faCalculator } from '@fortawesome/free-solid-svg-icons';\r\nimport {\r\n    comboChild, convertDateTimetoString,\r\n    getSameRecordFromTwoArrays, rearrangeDateFormat, showEsign\r\n} from '../../components/CommonScript';\r\nimport RegisterSlideOut from './RegisterSlideOut';\r\nimport AddSpecification from './AddSpecification';\r\nimport AddTest from './AddTest';\r\nimport { connect } from 'react-redux';\r\nimport {\r\n    getPreviewTemplate, getChildValues,\r\n    getNewRegSpecification, AddComponents, updateStore,\r\n    EditComponent, getTest, addsubSample, editSubSample,\r\n    insertRegistration, updateRegistration, addSubSampleSaveContinue\r\n} from '../../actions'\r\nimport AddComponentPopUp from './AddComponentPopUp';\r\nimport AddSubSample from './AddSubSample';\r\nimport {\r\n    getComponentListfromUnwantedAttr,\r\n    getRegistration, TestListManipulation\r\n} from './RegistrationValidation';\r\nimport SplitterLayout from 'react-splitter-layout';\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        Login: state.Login\r\n    }\r\n}\r\nclass PreRegisterSlideOutModal extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.myRef = React.createRef()\r\n        this.PrevoiusLoginData = this.props.PrevoiusLoginData;\r\n        this.componentColumnList = [\r\n            { \"idsName\": \"IDS_COMPONENTNAME\", \"dataField\": \"scomponentname\", width: \"200px\" },\r\n            { \"idsName\": \"IDS_DATERECEIVED\", \"dataField\": \"sreceiveddate\", width: \"250px\" },\r\n            { \"idsName\": \"IDS_COMMENTS\", \"dataField\": \"scomments\", width: \"200px\" },\r\n        ];\r\n        this.sampleeditable = JSON.parse(this.props.Login.masterData.DynamicDesign.jsondata.value)\r\n        this.subSampleDataGridList = [];\r\n        this.props.Login.masterData.SubSampleTemplate &&\r\n            this.props.Login.masterData.SubSampleTemplate.jsondata.map(row => {\r\n                row.children.map(column => {\r\n                    column.children.map(component => {\r\n                        let label = ''\r\n                        if (component.hasOwnProperty(\"children\")) {\r\n                            component.children.map(componentrow => {\r\n                                if (componentrow.mandatory === true) {\r\n                                    label = label + '&' + componentrow.label\r\n                                    // this.subSampleDataGridList.push({ \"mandatory\": true, \"idsName\": componentrow.label, \"dataField\": componentrow.label })\r\n                                }\r\n                            })\r\n                        } else {\r\n                            if (component.mandatory)\r\n                                this.subSampleDataGridList.push({ \"mandatory\": true, \"idsName\": component.label, \"dataField\": component.label });\r\n                        }\r\n                        if (label !== '') {\r\n                            this.subSampleDataGridList.push({ \"mandatory\": true, \"idsName\": label.substring(1), \"dataField\": label.substring(1) })\r\n                        }\r\n                    })\r\n\r\n                })\r\n            })\r\n    }\r\n    formRef = React.createRef();\r\n    state = {\r\n        failedControls: [],\r\n        testDataState: { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 },\r\n        subSampleDataState: { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 },\r\n        selectedRecord: {},\r\n        selectedSpec: {},\r\n        selectComponent: {},\r\n        selectedTest: {},\r\n        selectedTestData: {},\r\n        SubSamplecomboComponents: [],\r\n        SubSamplewithoutCombocomponent: [],\r\n        selectedTestData: [],\r\n        parentSubSampleColumnList: []\r\n    }\r\n\r\n\r\n\r\n    handleSaveClick = (saveType) => {\r\n        const failedControls = [];\r\n        const startLabel = [];\r\n        let label = \"IDS_ENTER\";\r\n        let mandatoryFields = [];\r\n        let selectedRecord = this.state.selectedRecord\r\n\r\n        if (this.props.Login.loadComponent) {\r\n            mandatoryFields = [\r\n                { \"idsName\": \"IDS_COMPONENT\", \"dataField\": \"ncomponentcode\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"combo\" },\r\n                { \"idsName\": \"IDS_RECEIVEDDATE\", \"dataField\": \"dreceiveddate\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"combo\" },\r\n                { \"idsName\": \"IDS_TIMEZONE\", \"dataField\": \"ntzdreceivedate\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"combo\" },\r\n            ]\r\n            selectedRecord = this.state.selectComponent\r\n        }\r\n        else if (this.props.Login.loadSubSample) {\r\n\r\n            this.props.Login.masterData.SubSampleTemplate &&\r\n                this.props.Login.masterData.SubSampleTemplate.jsondata.map(row => {\r\n                    row.children.map(column => {\r\n                        column.children.map(component => {\r\n                            return component.hasOwnProperty(\"children\") ? component.children.map(componentrow => {\r\n                                if (componentrow.mandatory === true) {\r\n                                    mandatoryFields.push({ \"mandatory\": true, \"idsName\": componentrow.label, \"dataField\": componentrow.label, \"mandatoryLabel\": componentrow.inputtype === \"combo\" ? \"IDS_SELECT\" : \"IDS_ENTER\", \"controlType\": componentrow.inputtype === \"combo\" ? \"selectbox\" : \"textbox\" })\r\n\r\n                                }\r\n                            })\r\n                                : component.mandatory === true ?\r\n                                    mandatoryFields.push({ \"mandatory\": true, \"idsName\": component.label, \"dataField\": component.label, \"mandatoryLabel\": component.inputtype === \"combo\" ? \"IDS_SELECT\" : \"IDS_ENTER\", \"controlType\": component.inputtype === \"combo\" ? \"selectbox\" : \"textbox\" }) : \"\"\r\n                        })\r\n                    })\r\n                })\r\n\r\n            selectedRecord = this.state.selectComponent\r\n        }\r\n        else if (this.props.Login.loadTest) {\r\n            mandatoryFields = [{ \"idsName\": \"IDS_TEST\", \"dataField\": \"ntestgrouptestcode\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"combo\" },]\r\n            selectedRecord = this.props.Login.selectedTestData\r\n        }\r\n        else if (this.props.Login.loadSpec) {\r\n            mandatoryFields = [\r\n                { \"idsName\": \"IDS_SPECIFICATION\", \"dataField\": \"nallottedspeccode\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"combo\" },\r\n            ]\r\n        } else {\r\n            this.props.Login.masterData.registrationTemplate &&\r\n                this.props.Login.masterData.registrationTemplate.jsondata.map(row => {\r\n                    row.children.map(column => {\r\n                        column.children.map(component => {\r\n                            return component.hasOwnProperty(\"children\") ? component.children.map(componentrow => {\r\n                                if (componentrow.mandatory === true) {\r\n                                    mandatoryFields.push({ \"mandatory\": true, \"idsName\": componentrow.label, \"dataField\": componentrow.label, \"mandatoryLabel\": componentrow.inputtype === \"combo\" ? \"IDS_SELECT\" : \"IDS_ENTER\", \"controlType\": componentrow.inputtype === \"combo\" ? \"selectbox\" : \"textbox\" })\r\n\r\n                                }\r\n                            })\r\n                                : component.mandatory === true ?\r\n                                    mandatoryFields.push({ \"mandatory\": true, \"idsName\": component.label, \"dataField\": component.label, \"mandatoryLabel\": component.inputtype === \"combo\" ? \"IDS_SELECT\" : \"IDS_ENTER\", \"controlType\": component.inputtype === \"combo\" ? \"selectbox\" : \"textbox\" }) : \"\"\r\n                        })\r\n                    })\r\n                })\r\n        }\r\n        if (this.props.esign) {\r\n            mandatoryFields = [\r\n                { \"idsName\": \"IDS_PASSWORD\", \"dataField\": \"esignpassword\", \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"textbox\" },\r\n                { \"idsName\": \"IDS_COMMENTS\", \"dataField\": \"esigncomments\", \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"textbox\" }\r\n            ]\r\n        }\r\n        mandatoryFields.forEach(item => {\r\n            if (selectedRecord[item.dataField] === undefined || selectedRecord[item.dataField] === null) {\r\n                const alertMessage = (item.alertPreFix ? item.alertPreFix + \" \" : '') + this.props.intl.formatMessage({ id: item.idsName }) + (item.alertSuffix ? \" \" + item.alertSuffix : '')\r\n                failedControls.push(alertMessage);\r\n                startLabel.push(item.mandatoryLabel)//\"IDS_PROVIDE\";\r\n            }\r\n            else {\r\n                if (item.validateFunction) {\r\n                    const validateData = item.validateFunction;\r\n                    if (validateData(selectedRecord[item.dataField]) === false) {\r\n                        const alertMessage = (item.alertPreFix ? item.alertPreFix + \" \" : '') + this.props.intl.formatMessage({ id: item.idsName }) + (item.alertSuffix ? \" \" + item.alertSuffix : '')\r\n                        failedControls.push(alertMessage);\r\n                        startLabel.push(item.mandatoryLabel)\r\n                    }\r\n                }\r\n                else {\r\n                    if (typeof selectedRecord[item.dataField] === \"object\") {\r\n                        //to validate FormSelectSearch component\r\n                        if (selectedRecord[item.dataField].length === 0) {\r\n                            const alertMessage = (item.alertPreFix ? item.alertPreFix + \" \" : '') + this.props.intl.formatMessage({ id: item.idsName }) + (item.alertSuffix ? \" \" + item.alertSuffix : '')\r\n                            failedControls.push(alertMessage);\r\n                            startLabel.push(item.mandatoryLabel)//\"IDS_SELECT\";\r\n                        }\r\n                    }\r\n                    else if (typeof selectedRecord[item.dataField] === \"string\") {\r\n                        //to handle string field -- added trim function\r\n                        if (selectedRecord[item.dataField].trim().length === 0) {\r\n                            const alertMessage = (item.alertPreFix ? item.alertPreFix + \" \" : '') + this.props.intl.formatMessage({ id: item.idsName }) + (item.alertSuffix ? \" \" + item.alertSuffix : '')\r\n                            failedControls.push(alertMessage);\r\n                            startLabel.push(item.mandatoryLabel)\r\n                        }\r\n                    }\r\n                    else {\r\n                        //number field\r\n                        if (selectedRecord[item.dataField].length === 0) {\r\n                            const alertMessage = (item.alertPreFix ? item.alertPreFix + \" \" : '') + this.props.intl.formatMessage({ id: item.idsName }) + (item.alertSuffix ? \" \" + item.alertSuffix : '')\r\n                            failedControls.push(alertMessage);\r\n                            startLabel.push(item.mandatoryLabel)\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            // else{\r\n            //     const alertMessage=(item.alertPreFix?item.alertPreFix:'')+this.props.intl.formatMessage({id:item.idsName})+(item.alertSuffix?item.alertSuffix:'')\r\n            //     failedControls.push(alertMessage);\r\n            // }\r\n        });\r\n        // console.log(\"validationPassed:\", failedControls);\r\n\r\n        if (failedControls.length === 0) {\r\n            if (saveType === 4) {\r\n                this.props.onExecuteClick(this.formRef);\r\n            }\r\n            else if (saveType === 3) {\r\n                if (selectedRecord.agree && selectedRecord.agree === transactionStatus.NO) {\r\n\r\n                    toast.info(this.props.intl.formatMessage({ id: \"IDS_CHECKAGREE\" }));\r\n\r\n                } else {\r\n\r\n                    this.props.validateEsign();\r\n                }\r\n            }\r\n            else {\r\n                if (this.props.Login.loadSpec) {\r\n                    let selectedSpec = this.state.selectedSpec\r\n                    selectedSpec[\"nallottedspeccode\"] = this.state.selectedRecord[\"nallottedspeccode\"]\r\n                    selectedSpec[\"sversion\"] = this.state.selectedRecord[\"sversion\"]\r\n                    selectedSpec[\"ntemplatemanipulationcode\"] = this.state.selectedRecord[\"ntemplatemanipulationcode\"]\r\n                    // this.setState({\r\n                    //     selectedTestData: [], loadSpec: false, SelectedTest: [], Test: [], Component: [], selectedSpec\r\n                    // })\r\n                    const updateInfo = {\r\n                        typeName: DEFAULT_RETURN,\r\n                        data: {\r\n                            selectedTestData: [],\r\n                            loadSpec: false,\r\n                            SelectedTest: [],\r\n                            Test: [],\r\n                            Component: [],\r\n                            selectedSpec,\r\n                            screenName: this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename\r\n                        }\r\n                    }\r\n                    this.props.updateStore(updateInfo);\r\n\r\n\r\n                }\r\n                else if (this.props.Login.loadComponent) {\r\n                    this.onSaveComponentClick(saveType, this.formRef)\r\n                }\r\n                else if (this.props.Login.loadTest) {\r\n                    this.onSaveTestClick(saveType, this.formRef)\r\n                }\r\n                else if (this.props.Login.loadSubSample) {\r\n                    this.onSaveSubSampleClick(saveType, this.formRef)\r\n                }\r\n                else {\r\n                    this.onSaveClick(saveType, this.formRef);\r\n                }\r\n\r\n            }\r\n        }\r\n        else {\r\n            label = startLabel[0] === undefined ? label : startLabel[0];\r\n            toast.info(`${this.props.intl.formatMessage({ id: label })} ${failedControls[0]}`);\r\n        }\r\n\r\n    }\r\n\r\n    TestChange = (comboData, fieldName) => {\r\n        const selectedTestData = this.state.selectedTestData || {};\r\n        selectedTestData[fieldName] = comboData;\r\n        this.setState({ selectedTestData });\r\n        // const updateInfo = {\r\n        //     typeName: DEFAULT_RETURN,\r\n        //     data: { selectedTestData }\r\n        // }\r\n        // this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    onComboChange = (comboData, control, customName) => {\r\n        let parentList = []\r\n        let childComboList = []\r\n        let childColumnList = {}\r\n\r\n        let comboName = customName || control.label;\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        let product = false;\r\n        let productCategory = false;\r\n        let nproductcatcode = -1\r\n        let nproductcode = -1\r\n        const inputParem = {\r\n            child: control.child,\r\n            source: control.source,\r\n            primarykeyField: control.valuemember,\r\n            value: comboData.value,\r\n            item: comboData.item,\r\n            label: comboName,\r\n            nameofdefaultcomp: control.name\r\n        }\r\n        if (comboData) {\r\n            selectedRecord[comboName] = comboData;\r\n        } else {\r\n            selectedRecord[comboName] = []\r\n        }\r\n        if (control.name === 'Product') {\r\n            const ProductCategory = this.props.comboComponents.filter(x => x.name === \"Product Category\");\r\n            const ncategorybasedflow = selectedRecord[ProductCategory[0].label] &&\r\n                selectedRecord[ProductCategory[0].label]['item']['ncategorybasedflow'];\r\n            nproductcatcode = selectedRecord[ProductCategory[0].label] &&\r\n                selectedRecord[ProductCategory[0].label].value\r\n            if (ncategorybasedflow !== 3) {\r\n                product = true\r\n                nproductcode = selectedRecord[comboName] &&\r\n                    selectedRecord[comboName].value;\r\n            }\r\n\r\n        }\r\n        else if (control.name === 'Product Category') {\r\n            const Product = this.props.comboComponents.filter(x => x.name === \"Product\");\r\n            nproductcatcode = comboData.value;\r\n            const ncategorybasedflow = comboData &&\r\n                comboData['item']['ncategorybasedflow'];\r\n            if (ncategorybasedflow === 3) {\r\n                productCategory = true\r\n            } else {\r\n                inputParem[\"ProductName\"] = Product[0].label\r\n                // nproductcode = selectedRecord[comboName] &&\r\n                // selectedRecord[comboName].value;\r\n                product = true\r\n            }\r\n        }\r\n\r\n        if (control.child && control.child.length > 0) {\r\n            childComboList = getSameRecordFromTwoArrays(this.props.comboComponents, control.child, \"label\")\r\n            childColumnList = {};\r\n            childComboList.map(columnList => {\r\n                const val = comboChild(this.props.comboComponents, columnList, childColumnList, false);\r\n                childColumnList = val.childColumnList\r\n            })\r\n\r\n            parentList = getSameRecordFromTwoArrays(this.props.withoutCombocomponent, control.child, \"label\")\r\n\r\n\r\n\r\n            // if (product) {\r\n\r\n            // }\r\n\r\n            const mapOfFilter = {\r\n                nproductcode, nproductcatcode,\r\n                nsampletypecode: parseInt(this.props.Login.masterData.RealSampleTypeValue.nsampletypecode),\r\n            }\r\n            this.props.getChildValues(inputParem,\r\n                this.props.userInfo, selectedRecord, this.props.Login.comboData,\r\n                childComboList, childColumnList, this.props.withoutCombocomponent,\r\n                [...childComboList, ...parentList], productCategory, product, mapOfFilter)\r\n        } else {\r\n\r\n            // if (productCategory) {\r\n            //     const ncategorybasedflow = selectedRecord[comboName] &&\r\n            //         selectedRecord[comboName].value;\r\n\r\n            // } else \r\n            if (product || productCategory) {\r\n                // const nproductcode = selectedRecord[comboName] &&\r\n                //     selectedRecord[comboName].value;\r\n                const mapOfFilter = {\r\n                    nproductcode, nproductcatcode,\r\n                    nsampletypecode: parseInt(this.props.Login.masterData.RealSampleTypeValue.nsampletypecode),\r\n                }\r\n\r\n                this.props.getChildValues(inputParem,\r\n                    this.props.userInfo, selectedRecord, this.props.Login.comboData,\r\n                    childComboList, childColumnList, this.props.withoutCombocomponent,\r\n                    [...childComboList, ...parentList], productCategory, product, mapOfFilter)\r\n            } else {\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: { selectedRecord }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n\r\n\r\n        }\r\n    }\r\n\r\n    onInputOnChange = (event, radiotext) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if (event.target.type === 'checkbox') {\r\n            if (event.target.name === 'timeonly') {\r\n                selectedRecord['dateonly'] = false;\r\n            }\r\n            if (event.target.name === 'dateonly') {\r\n                selectedRecord['timeonly'] = false;\r\n            }\r\n            const value = selectedRecord[event.target.name];\r\n            if (value !== '' && value !== undefined) {\r\n                if(value.includes(radiotext)){\r\n                  const index= value.indexOf(radiotext);\r\n                  if(index!==-1){\r\n                        if(index==0){\r\n                         const  indexcomma= value.indexOf(\",\")\r\n                            if(indexcomma!==-1){\r\n                                selectedRecord[event.target.name] = value.slice(indexcomma+1)\r\n\r\n                            }else{\r\n                                selectedRecord[event.target.name]=\"\"\r\n                            }\r\n                            }else{\r\n                              //  const  indexcomma= value.indexOf(\",\")\r\n                              if( value.slice(index).indexOf(\",\")!==-1){\r\n                                selectedRecord[event.target.name] = value.slice(0,index)+value.slice(index+value.slice(index).indexOf(\",\")+1)\r\n                              }else{\r\n                                selectedRecord[event.target.name] = value.slice(0,index-1)\r\n                              }\r\n                              \r\n                            }\r\n                  }\r\n\r\n                }else{\r\n                    selectedRecord[event.target.name] = value + ',' + radiotext;\r\n                }\r\n                \r\n            } else {\r\n                selectedRecord[event.target.name] = radiotext;\r\n            }\r\n        }\r\n        else if (event.target.type === 'radio') {\r\n            selectedRecord[event.target.name] = radiotext;\r\n        }\r\n        else {\r\n            selectedRecord[event.target.name] = event.target.value;\r\n        }\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    onInputOnSubSampleChange = (event,radiotext) => {\r\n        const selectComponent = this.state.selectComponent || {};\r\n        if (event.target.type === 'checkbox') {\r\n            if (event.target.name === 'timeonly') {\r\n                selectComponent['dateonly'] = false;\r\n            }\r\n            if (event.target.name === 'dateonly') {\r\n                selectComponent['timeonly'] = false;\r\n            }\r\n            const value = selectComponent[event.target.name];\r\n            if (value !== '' && value !== undefined) {\r\n                if(value.includes(radiotext)){\r\n                  const index= value.indexOf(radiotext);\r\n                  if(index!==-1){\r\n                        if(index==0){\r\n                         const  indexcomma= value.indexOf(\",\")\r\n                            if(indexcomma!==-1){\r\n                                selectComponent[event.target.name] = value.slice(indexcomma+1)\r\n\r\n                            }else{\r\n                                selectComponent[event.target.name]=\"\"\r\n                            }\r\n                            }else{\r\n                              //  const  indexcomma= value.indexOf(\",\")\r\n                              if( value.slice(index).indexOf(\",\")!==-1){\r\n                                selectComponent[event.target.name] = value.slice(0,index)+value.slice(index+value.slice(index).indexOf(\",\")+1)\r\n                              }else{\r\n                                selectComponent[event.target.name] = value.slice(0,index-1)\r\n                              }\r\n                              \r\n                            }\r\n                  }\r\n\r\n                }else{\r\n                    selectComponent[event.target.name] = value + ',' + radiotext;\r\n                }\r\n                \r\n            } else {\r\n                selectComponent[event.target.name] = radiotext;\r\n            }\r\n        }\r\n        else {\r\n            selectComponent[event.target.name] = event.target.value;\r\n        }\r\n        this.setState({ selectComponent });\r\n    }\r\n\r\n\r\n    onComboSubSampleChange = (comboData, control, customName) => {\r\n        let parentList = []\r\n        let childComboList = []\r\n        let childColumnList = {}\r\n\r\n        let comboName = customName || control.label;\r\n        const selectComponent = this.state.selectComponent || {};\r\n        const inputParem = {\r\n            child: control.child,\r\n            source: control.source,\r\n            primarykeyField: control.valuemember,\r\n            value: comboData.value,\r\n            item: comboData.item,\r\n            label: comboName,\r\n            nameofdefaultcomp: control.name\r\n        }\r\n        if (comboData) {\r\n            selectComponent[comboName] = comboData;\r\n        } else {\r\n            selectComponent[comboName] = []\r\n        }\r\n        if (control.child && control.child.length > 0) {\r\n            childComboList = getSameRecordFromTwoArrays(this.state.SubSamplecomboComponents,\r\n                control.child, \"label\")\r\n            childColumnList = {};\r\n            childComboList.map(columnList => {\r\n                const val = comboChild(this.state.SubSamplecomboComponents,\r\n                    columnList, childColumnList, false);\r\n                childColumnList = val.childColumnList\r\n            })\r\n\r\n            parentList = getSameRecordFromTwoArrays(this.state.SubSamplewithoutCombocomponent,\r\n                control.child, \"label\")\r\n\r\n            this.props.getChildValues(inputParem,\r\n                this.props.userInfo, selectComponent, this.props.Login.SubSamplecomboData,\r\n                childComboList, childColumnList, this.state.SubSamplewithoutCombocomponent,\r\n                [...childComboList, ...parentList])\r\n        } else {\r\n\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: { selectComponent }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n    }\r\n\r\n    onNumericInputChange = (value, name) => {\r\n        let selectedRecord = this.state.selectedRecord\r\n        selectedRecord[name] = value;\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    onNumericInputSubSampleChange = (value, name) => {\r\n        let selectComponent = this.state.selectComponent\r\n        selectComponent[name] = value;\r\n        this.setState({ selectComponent });\r\n    }\r\n\r\n    handleDateChangeComp = (dateValue, dateName, screenName) => {\r\n        const { selectedRecord } = this.state;\r\n        if (screenName === 'component') {\r\n            const selectComponent = this.state.selectComponent;\r\n            selectComponent[dateName] = dateValue;\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    selectComponent\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        } else {\r\n            selectedRecord[dateName] = dateValue;\r\n            this.setState({ selectedRecord });\r\n        }\r\n\r\n    }\r\n\r\n    handleDateChange = (dateValue, dateName) => {\r\n        const { selectedRecord } = this.state;\r\n        selectedRecord[dateName] = dateValue;\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    handleDateSubSampleChange = (dateValue, dateName) => {\r\n        const { selectComponent } = this.state;\r\n        selectComponent[dateName] = dateValue;\r\n        this.setState({ selectComponent });\r\n    }\r\n\r\n    componentDidUpdate(previousProps) {\r\n        let masterStatus = this.props.masterStatus;\r\n        // const {selectedRecord,selectedSpec,selectedTestData,selectComponent} =this.state\r\n        let check = false;\r\n        if (this.props.Login.selectedRecord !== this.PrevoiusLoginData.Login.selectedRecord) {\r\n            this.setState({ selectedRecord: this.props.Login.selectedRecord });\r\n            check = true\r\n        }\r\n        if (this.props.Login.selectedSpec !== this.PrevoiusLoginData.Login.selectedSpec) {\r\n            this.setState({ selectedSpec: this.props.Login.selectedSpec });\r\n            check = true\r\n        }\r\n        if (this.props.Login.selectedTestData !== this.PrevoiusLoginData.Login.selectedTestData) {\r\n            this.setState({ selectedTestData: this.props.Login.selectedTestData });\r\n            check = true\r\n        }\r\n        if (this.props.Login.selectComponent !== this.PrevoiusLoginData.Login.selectComponent) {\r\n            this.setState({ selectComponent: this.props.Login.selectComponent });\r\n            check = true\r\n        }\r\n\r\n        if (this.props.Login.SubSamplewithoutCombocomponent !== this.PrevoiusLoginData.Login.SubSamplewithoutCombocomponent) {\r\n            this.setState({ SubSamplewithoutCombocomponent: this.props.Login.SubSamplewithoutCombocomponent });\r\n            check = true\r\n        }\r\n        if (this.props.Login.SubSamplecomboComponents !== this.PrevoiusLoginData.Login.SubSamplecomboComponents) {\r\n            this.setState({ SubSamplecomboComponents: this.props.Login.SubSamplecomboComponents });\r\n            check = true\r\n        }\r\n        if (this.props.Login.parentSubSampleColumnList !== this.PrevoiusLoginData.Login.parentSubSampleColumnList) {\r\n            this.setState({ parentSubSampleColumnList: this.props.Login.parentSubSampleColumnList });\r\n            check = true\r\n        }\r\n\r\n\r\n\r\n        if (check) {\r\n            this.PrevoiusLoginData = previousProps\r\n        }\r\n        if (masterStatus !== \"\" && masterStatus !== undefined) {\r\n            toast.warn(masterStatus);\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: { masterStatus: \"\" }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n            masterStatus = \"\";\r\n        }\r\n        if (this.props.innerPopup !== this.state.innerTop) {\r\n            setTimeout(() => {\r\n                let scrollDoc = this.props.modalEvent && this.props.modalEvent.id ? document.getElementById(this.props.modalEvent.id) : null;\r\n                if (this.myRef && this.myRef.current) {\r\n                    this.myRef.current.scrollIntoView({ behavior: 'smooth' })\r\n                }\r\n                if (scrollDoc) {\r\n                    scrollDoc.scrollIntoView({ behavior: 'smooth' })\r\n                }\r\n            }, 100)\r\n            this.setState({\r\n                innerTop: this.props.innerPopup\r\n            })\r\n        }\r\n    }\r\n\r\n    openFilter = () => {\r\n        let showFilter = !this.state.showFilter\r\n        this.setState({\r\n            showFilter\r\n        })\r\n    }\r\n\r\n    closeFilter = () => {\r\n\r\n        this.setState({\r\n            showFilter: false\r\n        })\r\n    }\r\n    AddSpec = (e) => {\r\n        // this.setState({\r\n        //     loadSpec: true\r\n        // })\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                loadSpec: true,\r\n                screenName: \"Specification\"\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n    // addTestslide = (e) => {\r\n    //     this.setState({\r\n    //         loadTest: true\r\n    //     })\r\n    // }\r\n\r\n    addTestslide = (selectedComponent, nneedsubsample, specBasedComponent) => {\r\n        if (nneedsubsample) {\r\n            if (selectedComponent && Object.keys(selectedComponent).length > 0) {\r\n                delete selectedComponent[\"selected\"];\r\n                this.props.getTest(selectedComponent, this.props.Login,\r\n                    nneedsubsample, specBasedComponent);\r\n            } else {\r\n                toast.warn(this.props.intl.formatMessage({ id: nneedsubsample ? \"IDS_SELECTSUBSAMPLETOADDTEST\" : \"IDS_SELECTCOMPONENTTOADDTEST\" }));\r\n            }\r\n        } else {\r\n            const selectedComponent1 = {\r\n                nallottedspeccode: this.state.selectedSpec[\"nallottedspeccode\"] ? this.state.selectedSpec[\"nallottedspeccode\"].value : -1,\r\n                slno: 1\r\n            }\r\n            this.props.getTest(selectedComponent1,\r\n                this.props.Login,\r\n                nneedsubsample, specBasedComponent);\r\n        }\r\n    }\r\n\r\n    closeSpec = (e) => {\r\n        // this.setState({\r\n        //     loadSpec: false,\r\n        //      selectedRecord: { ...this.state.selectedRecord, ...this.state.selectedSpec },\r\n        //      screenName:\"Specification\"\r\n        // })\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                loadSpec: false,\r\n                selectedRecord: { ...this.state.selectedRecord, ...this.state.selectedSpec },\r\n                screenName: this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename\r\n\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    closeComponent = (e) => {\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                loadComponent: false,\r\n                selectComponent: {}\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    closeTest = (e) => {\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                loadTest: false,\r\n                selectedTestData: {},\r\n                screenName: this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    closeSubSample = (e) => {\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                loadSubSample: false,\r\n                selectedSubSample: {},\r\n                showSaveContinue: false,\r\n                selectComponent: {},\r\n                selectedTestData: {},\r\n                screenName: this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n    onspecChange = (event, fieldName) => {\r\n        if (event !== null) {\r\n            const selectedRecord = this.state.selectedRecord;\r\n            const oldpromarycode = this.state.selectedRecord[\"nallottedspeccode\"] !== undefined ?\r\n                this.state.selectedRecord[\"nallottedspeccode\"].value : undefined;\r\n            selectedRecord[\"sversion\"] = parseInt(event.item.sversion);\r\n            selectedRecord[\"nallottedspeccode\"] = event;\r\n            //  if(this.props.Login.Component.length=== 0 ){\r\n            this.setState({ selectedRecord });\r\n            // }else{\r\n            //     if(event.value!== oldpromarycode ){\r\n            //     this.confirmMessage.confirm(\"confirmation\", \"Confirmation!\", \"Do You Want to clear the Existing Components ?\",\r\n            //     \"ok\", \"cancel\", () => this.setState({ selectedRecord }));\r\n            //     }\r\n            // }\r\n\r\n        }\r\n    }\r\n\r\n    onTreeClick = (event) => {\r\n        const inputParam = {\r\n            methodUrl: \"TestGroupSpecification\",\r\n            screenName: \"IDS_REGISTRATION\",\r\n            operation: \"get\",\r\n            activeKey: event.key,\r\n            focusKey: event.key,\r\n            keyName: \"treetemplatemanipulation\",\r\n            userinfo: this.props.Login.userInfo,\r\n            selectedNode: event.item,\r\n            selectedRecord: this.state.selectedRecord,\r\n\r\n            primaryKey: event.primaryKey\r\n        };\r\n        if (event.primaryKey !== this.state.selectedRecord[\"ntemplatemanipulationcode\"]) {\r\n            this.props.getNewRegSpecification(inputParam, this.props.Login.masterData);\r\n        }\r\n\r\n\r\n        // if (this.props.Login.Component === undefined || this.props.Login.Component.length === 0) {\r\n        //     //   this.props.getRegSpecification(inputParam, this.props.Login.masterData, getComponents);\r\n        // } else {\r\n        //     // if(event.key!== this.props.Login.ActiveKey ){\r\n        //     // this.confirmMessage.confirm(\"confirmation\", \"Confirmation!\", \"Do You Want to clear the Existing Components ?\",\r\n        //     // \"ok\", \"cancel\", () =>  this.props.getRegSpecification(inputParam, this.props.Login.masterData, getComponents));\r\n        //     // }\r\n        // }\r\n    }\r\n\r\n\r\n    handleComponentRowClick = (event) => {\r\n        let selectedComponent = event.dataItem;\r\n        let SelectedTest = this.props.Login.Test && this.props.Login.Test[selectedComponent.slno] ? this.props.Login.Test[selectedComponent.slno] : [];\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                SelectedTest, selectedComponent,\r\n                testDataState: {\r\n                    skip: 0, take: this.props.Login.settings ?\r\n                        parseInt(this.props.Login.settings[14]) : 5\r\n                }\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n\r\n    };\r\n\r\n\r\n    AddComponent = () => {\r\n        let Map = {};\r\n        if (this.state.selectedSpec.nallottedspeccode !== undefined\r\n            && this.state.selectedSpec.nallottedspeccode !== \"\") {\r\n            Map[\"ntemplatemanipulationcode\"] = this.state.selectedSpec.ntemplatemanipulationcode;\r\n            Map[\"nallottedspeccode\"] = this.state.selectedSpec.nallottedspeccode.value;\r\n            Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\r\n            Map[\"testrequired\"] = false;\r\n            Map[\"userinfo\"] = this.props.Login.userInfo;\r\n            this.props.AddComponents(Map);\r\n        } else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTSPECIFICATION\" }));\r\n        }\r\n\r\n    }\r\n\r\n    onComponentChange = (comboData, fieldName, nneedsubsample) => {\r\n        if (comboData !== null) {\r\n            if (!nneedsubsample) {\r\n                const selectComponent = this.state.selectComponent || {};\r\n                if (fieldName === 'ntzdreceivedate') {\r\n                    selectComponent[\"ntzdreceivedate\"] = comboData;\r\n                } else {\r\n                    // const oldspecsampletypecode = selectComponent.nspecsampletypecode\r\n                    // if (oldspecsampletypecode !== comboData.item.nspecsampletypecode) {\r\n                    //     //selectComponent[\"nneedservice\"] = true;\r\n                    // }\r\n                    selectComponent[fieldName] = comboData;\r\n                    selectComponent[\"nspecsampletypecode\"] = comboData.item.nspecsampletypecode;\r\n\r\n                }\r\n                this.setState({ selectComponent })\r\n                // const updateInfo = {\r\n                //     typeName: DEFAULT_RETURN,\r\n                //     data: {\r\n                //         selectComponent\r\n                //     }\r\n                // }\r\n                // this.props.updateStore(updateInfo);\r\n            } else {\r\n                const selectComponent = this.state.selectComponent || {};\r\n                selectComponent[fieldName] = comboData;\r\n                // selectComponent[\"nspecsampletypecode\"] = comboData.item.nspecsampletypecode ?  comboData.item.nspecsampletypecode : -1;\r\n                this.setState({ selectComponent })\r\n            }\r\n        }\r\n\r\n    }\r\n    onInputComponentOnChange = (event) => {\r\n        const selectComponent = this.state.selectComponent || {};\r\n        if (event.target.type === 'checkbox') {\r\n            selectComponent[event.target.name] = event.target.checked === true ? 3 : 4;\r\n        }\r\n        else {\r\n            selectComponent[event.target.name] = event.target.value;\r\n        }\r\n        this.setState({ selectComponent })\r\n        // const updateInfo = {\r\n        //     typeName: DEFAULT_RETURN,\r\n        //     data: {\r\n        //         selectComponent\r\n        //     }\r\n        // }\r\n        // this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    onSaveComponentClick = (saveType, formRef) => {\r\n        const childoperation = this.props.Login.childoperation;\r\n        if (childoperation === \"create\") {\r\n            if (saveType === 1) {\r\n                this.ComponentObjectAfterSave();\r\n            } else if (saveType === 2) {\r\n                this.ComponentObject();\r\n            }\r\n        } else {\r\n            const Component = this.props.Login.Component;\r\n            const Test = this.props.Login.Test;\r\n            const testrequired = this.state.selectedRecord.ntransactionstatus;\r\n\r\n            let selectedComponent = { ...this.state.selectComponent };\r\n            let objcomponent = {};\r\n            objcomponent[\"scomponentname\"] = selectedComponent[\"ncomponentcode\"].label;\r\n            objcomponent[\"ncomponentcode\"] = selectedComponent[\"ncomponentcode\"] ? selectedComponent[\"ncomponentcode\"].value : -1;\r\n            const dreceiveddate = selectedComponent[\"dreceiveddate\"];\r\n            objcomponent[\"dreceiveddate\"] = dreceiveddate;\r\n            objcomponent[\"sreceiveddate\"] = convertDateTimetoString(dreceiveddate, this.props.Login.userInfo);\r\n            objcomponent[\"ntzdreceivedate\"] = selectedComponent[\"ntzdreceivedate\"] ? selectedComponent[\"ntzdreceivedate\"].value : -1;\r\n            objcomponent[\"stzdreceivedate\"] = selectedComponent[\"ntzdreceivedate\"] ? selectedComponent[\"ntzdreceivedate\"].label : \"\";\r\n            objcomponent[\"jsondata\"] = \"\"\r\n            selectedComponent = { ...selectedComponent, ...objcomponent }\r\n\r\n            const index = Component.findIndex(x => x.slno === selectedComponent.slno);\r\n            if (index > -1) {\r\n                Component.splice(index, 1, selectedComponent);\r\n            }\r\n            if (testrequired === 3) {\r\n                this.props.getTestByComponentChange(Component, selectedComponent, this.props.Login);\r\n            }\r\n            else if (selectedComponent[\"nneedservice\"] === true) {\r\n                this.props.getTestByComponentChange(Component, selectedComponent, this.props.Login, true);\r\n            } else {\r\n                delete selectedComponent.nneedservice;\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        Component, selectedComponent: selectedComponent, loadComponent: false, openChildModal: false,\r\n                        selectComponent: undefined, parentPopUpSize: \"xl\", Test, SelectedTest: Test[selectedComponent.slno]\r\n                    }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n\r\n    ComponentObjectAfterSave() {\r\n        const testrequired = this.state.selectedRecord.ntransactionstatus;\r\n        let objcomponent = this.state.selectComponent;\r\n        delete objcomponent.nneedservice;\r\n        if (testrequired === 3) {\r\n            this.props.getTestfromDB(objcomponent, this.props.Login, 2);\r\n        } else {\r\n            const Component = this.props.Login.Component || [];\r\n            let saveComponent = { ...objcomponent };\r\n            saveComponent[\"slno\"] = this.props.Login.Component ? Object.keys(this.props.Login.Component).length + 1 : 1;\r\n            saveComponent[\"scomponentname\"] = objcomponent[\"ncomponentcode\"].label;\r\n            saveComponent[\"ncomponentcode\"] = objcomponent[\"ncomponentcode\"] ? objcomponent[\"ncomponentcode\"].value : -1;\r\n            const dreceiveddate = objcomponent[\"dreceiveddate\"];\r\n            saveComponent[\"dreceiveddate\"] = dreceiveddate;\r\n            saveComponent[\"sreceiveddate\"] = convertDateTimetoString(dreceiveddate, this.props.Login.userInfo);\r\n            saveComponent[\"nallottedspeccode\"] = objcomponent[\"nallottedspeccode\"] ? objcomponent[\"nallottedspeccode\"] : -1;\r\n            saveComponent[\"ntzdreceivedate\"] = objcomponent[\"ntzdreceivedate\"] ? objcomponent[\"ntzdreceivedate\"].value : -1;\r\n            saveComponent[\"stzdreceivedate\"] = objcomponent[\"ntzdreceivedate\"] ? objcomponent[\"ntzdreceivedate\"].label : \"\";\r\n            saveComponent[\"jsondata\"] = \"\"\r\n            Component.unshift(saveComponent);\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    Component, openChildModal: false, selectedComponent: saveComponent,\r\n                    SelectedTest: [], selectComponent: {}, showSaveContinue: false, loadComponent: false, parentPopUpSize: \"xl\"\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n    }\r\n    ComponentObject() {\r\n        const testrequired = this.state.selectedRecord.ntransactionstatus;\r\n        let objcomponent = this.state.selectComponent;\r\n        delete objcomponent.nneedservice;\r\n        let objcomponent1 = { ...this.state.selectComponent };\r\n        if (testrequired === 3) {\r\n            this.props.getTestfromDB(objcomponent, this.props.Login, 1);\r\n        } else {\r\n            const Component = this.props.Login.Component || [];\r\n            let saveComponent = { ...objcomponent };\r\n            saveComponent[\"scomponentname\"] = objcomponent[\"ncomponentcode\"].label;\r\n            saveComponent[\"slno\"] = this.props.Login.Component ? Object.keys(this.props.Login.Component).length + 1 : 1;\r\n            saveComponent[\"ncomponentcode\"] = objcomponent[\"ncomponentcode\"] ? objcomponent[\"ncomponentcode\"].value : -1;\r\n            const dreceiveddate = objcomponent[\"dreceiveddate\"];\r\n            saveComponent[\"dreceiveddate\"] = dreceiveddate;\r\n            saveComponent[\"sreceiveddate\"] = convertDateTimetoString(dreceiveddate, this.props.Login.userInfo);\r\n            saveComponent[\"ntzdreceivedate\"] = objcomponent[\"ntzdreceivedate\"] ? objcomponent[\"ntzdreceivedate\"].value : -1;\r\n            saveComponent[\"stzdreceivedate\"] = objcomponent[\"ntzdreceivedate\"] ? objcomponent[\"ntzdreceivedate\"].label : \"\";\r\n            saveComponent[\"nallottedspeccode\"] = objcomponent[\"nallottedspeccode\"] ? objcomponent[\"nallottedspeccode\"] : -1;\r\n            saveComponent[\"jsondata\"] = \"\"\r\n            Component.unshift(saveComponent);\r\n            objcomponent1[\"scomments\"] = \"\";\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: { Component, selectedComponent: saveComponent, SelectedTest: [], selectComponent: objcomponent1 }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n    }\r\n\r\n    onSaveSubSampleClick = (saveType, formRef) => {\r\n        const childoperation = this.props.Login.childoperation;\r\n        if (childoperation === \"create\") {\r\n            if (saveType === 1) {\r\n                this.SubSampleObjectAfterSave();\r\n            } else if (saveType === 2) {\r\n                this.SubSampleObject();\r\n            }\r\n        } else {\r\n            const Component = this.props.Login.Component;\r\n            const Test = this.props.Login.Test;\r\n            const testrequired = this.state.selectedRecord.ntransactionstatus;\r\n            const defaulttimezone = this.props.Login.defaulttimezone;\r\n            const userInfo = this.props.Login.userInfo;\r\n            let selectedComponent = { ...this.state.selectComponent };\r\n            let objcomponent = {};\r\n\r\n            objcomponent[\"slno\"] = selectedComponent[\"slno\"] ? selectedComponent[\"slno\"] : \"\"\r\n            objcomponent[\"nallottedspeccode\"] = this.state.selectedSpec[\"nallottedspeccode\"] ? this.state.selectedSpec[\"nallottedspeccode\"].value : -1;\r\n            objcomponent[\"nspecsampletypecode\"] = this.state.selectedSpec[\"nallottedspeccode\"] ? this.state.selectedSpec[\"nallottedspeccode\"]['item'].nspecsampletypecode : -1;\r\n            objcomponent[\"jsondata\"] = {}\r\n\r\n\r\n            this.props.Login.masterData.SubSampleTemplate &&\r\n                this.props.Login.masterData.SubSampleTemplate.jsondata.map(row => {\r\n                    row.children.map(column => {\r\n                        column.children.map(component => {\r\n                            if (component.hasOwnProperty(\"children\")) {\r\n                                let componentrowlabel = ''\r\n                                let componentrowvalue = ''\r\n                                component.children.map(componentrow => {\r\n                                    if (componentrow.inputtype === \"combo\") {\r\n                                        objcomponent[\"jsondata\"][componentrow.label] = selectedComponent[componentrow.label] ?\r\n                                            { value: selectedComponent[componentrow.label].value, label: selectedComponent[componentrow.label].label } : -1\r\n                                        if (componentrow.mandatory || selectedComponent[componentrow.label]) {\r\n                                            componentrowlabel = componentrowlabel + '&' + componentrow.label\r\n                                            componentrowvalue = componentrowvalue + ' ' + selectedComponent[componentrow.label].label\r\n                                        }\r\n\r\n                                    }\r\n                                    else if (componentrow.inputtype === \"date\") {\r\n                                        if (componentrow.mandatory) {\r\n                                            selectedComponent[\"jsondata\"][componentrow.label] = convertDateTimetoString(selectedComponent[componentrow.label] ?\r\n                                                selectedComponent[componentrow.label] : new Date(), userInfo);\r\n                                        } else {\r\n                                            objcomponent[\"jsondata\"][componentrow.label] = componentrow.loadcurrentdate ?\r\n                                                convertDateTimetoString(selectedComponent[componentrow.label] ?\r\n                                                    selectedComponent[componentrow.label] : new Date(), userInfo) :\r\n                                                selectedComponent[componentrow.label] ? convertDateTimetoString(selectedComponent[componentrow.label] ?\r\n                                                    selectedComponent[componentrow.label] : new Date(), userInfo) : \"\";\r\n                                        }\r\n                                        if (componentrow.timezone) {\r\n                                            selectedComponent[\"jsondata\"][`tz${componentrow.label}`] = selectedComponent[`tz${componentrow.label}`] ?\r\n                                                { value: selectedComponent[`tz${componentrow.label}`].value, label: selectedComponent[`tz${componentrow.label}`].label } :\r\n                                                defaulttimezone ? defaulttimezone : -1\r\n                                        }\r\n                                        // dateList.push(componentrow.label)\r\n                                    }\r\n\r\n                                    else {\r\n                                        objcomponent[\"jsondata\"][componentrow.label] = selectedComponent[componentrow.label] ?\r\n                                            selectedComponent[componentrow.label] : \"\"\r\n                                        if (selectedComponent[componentrow.label]) {\r\n                                            componentrowlabel = componentrowlabel + '&' + componentrow.label\r\n                                            componentrowvalue = componentrowvalue + ' ' + selectedComponent[componentrow.label]\r\n                                        }\r\n                                    }\r\n                                })\r\n                                objcomponent[\"jsondata\"][componentrowlabel.substring(1)] = componentrowvalue\r\n                            }\r\n                            else {\r\n                                if (component.inputtype === \"combo\") {\r\n                                    objcomponent[\"jsondata\"][component.label] = selectedComponent[component.label] ?\r\n                                        { value: selectedComponent[component.label].value, label: selectedComponent[component.label].label } : -1\r\n                                }\r\n                                else if (component.inputtype === \"date\") {\r\n                                    if (component.mandatory) {\r\n                                        objcomponent[\"jsondata\"][component.label] = convertDateTimetoString(selectedComponent[component.label] ?\r\n                                            selectedComponent[component.label] : new Date(), userInfo);\r\n                                    } else {\r\n                                        objcomponent[\"jsondata\"][component.label] = component.loadcurrentdate ?\r\n                                            convertDateTimetoString(selectedComponent[component.label] ?\r\n                                                selectedComponent[component.label] : new Date(), userInfo) :\r\n                                            selectedComponent[component.label] ? convertDateTimetoString(selectedComponent[component.label] ?\r\n                                                selectedComponent[component.label] : new Date(), userInfo) : \"\";\r\n                                    }\r\n                                    if (component.timezone) {\r\n                                        objcomponent[\"jsondata\"][`tz${component.label}`] = selectedComponent[`tz${component.label}`] ?\r\n                                            { value: selectedComponent[`tz${component.label}`].value, label: selectedComponent[`tz${component.label}`].label } :\r\n                                            defaulttimezone ? defaulttimezone : -1\r\n                                    }\r\n                                    //dateList.push(component.label)\r\n                                }\r\n                                else {\r\n                                    objcomponent[\"jsondata\"][component.label] = selectedComponent[component.label] ?\r\n                                        selectedComponent[component.label] : \"\"\r\n                                }\r\n                            }\r\n\r\n                        }\r\n                        )\r\n                    })\r\n                })\r\n\r\n\r\n            selectedComponent = { ...objcomponent }\r\n\r\n            const index = Component.findIndex(x => x.slno === selectedComponent.slno);\r\n            if (index > -1) {\r\n                Component.splice(index, 1, selectedComponent);\r\n            }\r\n            if (testrequired === 3) {\r\n                this.props.getTestByComponentChange(Component, selectedComponent, this.props.Login);\r\n            }\r\n            else if (selectedComponent[\"nneedservice\"] === true) {\r\n                this.props.getTestByComponentChange(Component, selectedComponent, this.props.Login, true);\r\n            } else {\r\n                delete selectedComponent.nneedservice;\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        Component,\r\n                        selectedComponent: selectedComponent,\r\n                        loadSubSample: false, openChildModal: false,\r\n                        selectComponent: {}, parentPopUpSize: \"xl\",\r\n                        Test, SelectedTest: Test[selectedComponent.slno],\r\n                        screenName: this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename\r\n                    }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n\r\n    SubSampleObjectAfterSave() {\r\n        const testrequired = this.state.selectedRecord.ntransactionstatus;\r\n        let objcomponent = this.state.selectComponent;\r\n        delete objcomponent.nneedservice;\r\n        const defaulttimezone = this.props.Login.defaulttimezone;\r\n        const userInfo = this.props.Login.userInfo;\r\n        if (testrequired === 3) {\r\n            this.props.getTestfromDB(objcomponent, this.props.Login, 2);\r\n        } else {\r\n            const Component = this.props.Login.Component || [];\r\n            let saveComponent = {};\r\n            // saveComponent[\"scomponentname\"] = objcomponent[\"ncomponentcode\"].label;\r\n            //saveComponent[\"ncomponentcode\"] = objcomponent[\"ncomponentcode\"] ? objcomponent[\"ncomponentcode\"].value : -1;\r\n            saveComponent[\"slno\"] = this.props.Login.Component ? Object.keys(this.props.Login.Component).length + 1 : 1;\r\n            saveComponent[\"nspecsampletypecode\"] = this.state.selectedSpec[\"nallottedspeccode\"] ? this.state.selectedSpec[\"nallottedspeccode\"]['item'].nspecsampletypecode : -1;\r\n            saveComponent[\"jsondata\"] = {}\r\n\r\n            this.props.Login.masterData.SubSampleTemplate &&\r\n                this.props.Login.masterData.SubSampleTemplate.jsondata.map(row => {\r\n                    row.children.map(column => {\r\n                        column.children.map(component => {\r\n                            if (component.hasOwnProperty(\"children\")) {\r\n                                let componentrowlabel = ''\r\n                                let componentrowvalue = ''\r\n                                component.children.map(componentrow => {\r\n                                    if (componentrow.inputtype === \"combo\") {\r\n                                        saveComponent[\"jsondata\"][componentrow.label] = objcomponent[componentrow.label] ?\r\n                                            { value: objcomponent[componentrow.label].value, label: objcomponent[componentrow.label].label } : -1\r\n                                        if (componentrow.mandatory || objcomponent[componentrow.label]) {\r\n                                            componentrowlabel = componentrowlabel + '&' + componentrow.label\r\n                                            componentrowvalue = componentrowvalue + ' ' + objcomponent[componentrow.label].label\r\n                                        }\r\n                                    }\r\n                                    else if (componentrow.inputtype === \"date\") {\r\n                                        if (componentrow.mandatory) {\r\n                                            saveComponent[\"jsondata\"][componentrow.label] = convertDateTimetoString(objcomponent[componentrow.label] ?\r\n                                                objcomponent[componentrow.label] : new Date(), userInfo);\r\n                                        } else {\r\n                                            saveComponent[\"jsondata\"][componentrow.label] = componentrow.loadcurrentdate ?\r\n                                                convertDateTimetoString(objcomponent[componentrow.label] ?\r\n                                                    objcomponent[componentrow.label] : new Date(), userInfo) :\r\n                                                objcomponent[componentrow.label] ? convertDateTimetoString(objcomponent[componentrow.label] ?\r\n                                                    objcomponent[componentrow.label] : new Date(), userInfo) : \"\";\r\n                                        }\r\n                                        if (componentrow.timezone) {\r\n                                            saveComponent[\"jsondata\"][`tz${componentrow.label}`] = objcomponent[`tz${componentrow.label}`] ?\r\n                                                { value: objcomponent[`tz${componentrow.label}`].value, label: objcomponent[`tz${componentrow.label}`].label } :\r\n                                                defaulttimezone ? defaulttimezone : -1\r\n                                        }\r\n                                        // dateList.push(componentrow.label)\r\n                                    }\r\n\r\n                                    else {\r\n                                        saveComponent[\"jsondata\"][componentrow.label] = objcomponent[componentrow.label] ?\r\n                                            objcomponent[componentrow.label] : \"\"\r\n\r\n                                        if (objcomponent[componentrow.label]) {\r\n                                            componentrowlabel = componentrowlabel + '&' + componentrow.label\r\n                                            componentrowvalue = componentrowvalue + ' ' + objcomponent[componentrow.label]\r\n                                        }\r\n                                    }\r\n                                })\r\n                                saveComponent[\"jsondata\"][componentrowlabel.substring(1)] = componentrowvalue\r\n                            }\r\n                            else {\r\n                                if (component.inputtype === \"combo\") {\r\n                                    saveComponent[\"jsondata\"][component.label] = objcomponent[component.label] ?\r\n                                        { value: objcomponent[component.label].value, label: objcomponent[component.label].label } : -1\r\n                                }\r\n                                else if (component.inputtype === \"date\") {\r\n                                    if (component.mandatory) {\r\n                                        saveComponent[\"jsondata\"][component.label] = convertDateTimetoString(objcomponent[component.label] ?\r\n                                            objcomponent[component.label] : new Date(), userInfo);\r\n                                    } else {\r\n                                        saveComponent[\"jsondata\"][component.label] = component.loadcurrentdate ?\r\n                                            convertDateTimetoString(objcomponent[component.label] ?\r\n                                                objcomponent[component.label] : new Date(), userInfo) :\r\n                                            objcomponent[component.label] ? convertDateTimetoString(objcomponent[component.label] ?\r\n                                                objcomponent[component.label] : new Date(), userInfo) : \"\";\r\n                                    }\r\n                                    if (component.timezone) {\r\n                                        saveComponent[\"jsondata\"][`tz${component.label}`] = objcomponent[`tz${component.label}`] ?\r\n                                            { value: objcomponent[`tz${component.label}`].value, label: objcomponent[`tz${component.label}`].label } :\r\n                                            defaulttimezone ? defaulttimezone : -1\r\n                                    }\r\n                                    //dateList.push(component.label)\r\n                                }\r\n                                else {\r\n                                    saveComponent[\"jsondata\"][component.label] = objcomponent[component.label] ?\r\n                                        objcomponent[component.label] : \"\"\r\n                                }\r\n                            }\r\n\r\n                        }\r\n                        )\r\n                    })\r\n                })\r\n\r\n            saveComponent[\"nallottedspeccode\"] = this.state.selectedSpec[\"nallottedspeccode\"] ? this.state.selectedSpec[\"nallottedspeccode\"].value : -1;\r\n            Component.unshift(saveComponent);\r\n\r\n            let selectedTestData = this.state.selectedTestData[\"ntestgrouptestcode\"];\r\n            const selectedTestArray = [];\r\n            selectedTestData && selectedTestData.map((item) => {\r\n                //  item.item['slno']=saveComponent.slno;\r\n                return selectedTestArray.push(item.item);\r\n            });\r\n            // selectedTestArray.map((item,i)=>{\r\n            //    selectedTestArray[i]['slno']=saveComponent.slno;\r\n            // })\r\n            // let selectedComponent = this.props.Login.selectedComponent;\r\n            const Test = this.props.Login.Test || [];\r\n\r\n            const ArrayTest = Test[saveComponent.slno] ? Test[saveComponent.slno] : [];\r\n            //  ArrayTest.push(selectedTestArray);\r\n            Test[saveComponent.slno] = [...ArrayTest, ...selectedTestArray]\r\n\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    Component, openChildModal: false,\r\n                    selectedComponent: saveComponent,\r\n                    loadSubSample: false,\r\n                    selectComponent: {},\r\n                    showSaveContinue: false,\r\n                    parentPopUpSize: \"xl\",\r\n                    SelectedTest: Test[saveComponent.slno],\r\n                    Test: Test, selectedTestData: {}, screenName: this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n    }\r\n\r\n    SubSampleObject() {\r\n        const testrequired = this.state.selectedRecord.ntransactionstatus;\r\n        let objcomponent = this.state.selectComponent;\r\n        delete objcomponent.nneedservice;\r\n        let objcomponent1 = { ...this.state.selectComponent };\r\n        const defaulttimezone = this.props.Login.defaulttimezone;\r\n        const userInfo = this.props.Login.userInfo;\r\n        if (testrequired === 3) {\r\n            this.props.getTestfromDB(objcomponent, this.props.Login, 1);\r\n        } else {\r\n            const Component = this.props.Login.Component || [];\r\n            let saveComponent = {};\r\n            saveComponent[\"slno\"] = this.props.Login.Component ? Object.keys(this.props.Login.Component).length + 1 : 1;\r\n            saveComponent[\"jsondata\"] = {}\r\n            this.props.Login.masterData.SubSampleTemplate &&\r\n                this.props.Login.masterData.SubSampleTemplate.jsondata.map(row => {\r\n                    row.children.map(column => {\r\n                        column.children.map(component => {\r\n                            if (component.hasOwnProperty(\"children\")) {\r\n                                let componentrowlabel = ''\r\n                                let componentrowvalue = ''\r\n                                component.children.map(componentrow => {\r\n                                    if (componentrow.inputtype === \"combo\") {\r\n                                        saveComponent[\"jsondata\"][componentrow.label] = objcomponent[componentrow.label] ?\r\n                                            { value: objcomponent[componentrow.label].value, label: objcomponent[componentrow.label].label } : -1\r\n\r\n                                        if (componentrow.mandatory || objcomponent[componentrow.label]) {\r\n                                            componentrowlabel = componentrowlabel + '&' + componentrow.label\r\n                                            componentrowvalue = componentrowvalue + ' ' + objcomponent[componentrow.label].label\r\n                                        }\r\n                                    }\r\n                                    else if (componentrow.inputtype === \"date\") {\r\n                                        if (componentrow.mandatory) {\r\n                                            saveComponent[\"jsondata\"][componentrow.label] = convertDateTimetoString(objcomponent[componentrow.label] ?\r\n                                                objcomponent[componentrow.label] : new Date(), userInfo);\r\n                                        } else {\r\n                                            saveComponent[\"jsondata\"][componentrow.label] = componentrow.loadcurrentdate ?\r\n                                                convertDateTimetoString(objcomponent[componentrow.label] ?\r\n                                                    objcomponent[componentrow.label] : new Date(), userInfo) :\r\n                                                objcomponent[componentrow.label] ? convertDateTimetoString(objcomponent[componentrow.label] ?\r\n                                                    objcomponent[componentrow.label] : new Date(), userInfo) : \"\";\r\n                                        }\r\n                                        if (componentrow.timezone) {\r\n                                            saveComponent[\"jsondata\"][`tz${componentrow.label}`] = objcomponent[`tz${componentrow.label}`] ?\r\n                                                { value: objcomponent[`tz${componentrow.label}`].value, label: objcomponent[`tz${componentrow.label}`].label } :\r\n                                                defaulttimezone ? defaulttimezone : -1\r\n                                        }\r\n                                        // dateList.push(componentrow.label)\r\n                                    }\r\n\r\n                                    else {\r\n                                        saveComponent[\"jsondata\"][componentrow.label] = objcomponent[componentrow.label] ?\r\n                                            objcomponent[componentrow.label] : \"\"\r\n\r\n                                        if (objcomponent[componentrow.label]) {\r\n                                            componentrowlabel = componentrowlabel + '&' + componentrow.label\r\n                                            componentrowvalue = componentrowvalue + ' ' + objcomponent[componentrow.label]\r\n                                        }\r\n                                    }\r\n                                })\r\n                                saveComponent[\"jsondata\"][componentrowlabel.substring(1)] = componentrowvalue\r\n                            }\r\n                            else {\r\n                                if (component.inputtype === \"combo\") {\r\n                                    saveComponent[\"jsondata\"][component.label] = objcomponent[component.label] ?\r\n                                        { value: objcomponent[component.label].value, label: objcomponent[component.label].label } : -1\r\n                                }\r\n                                else if (component.inputtype === \"date\") {\r\n                                    if (component.mandatory) {\r\n                                        saveComponent[\"jsondata\"][component.label] = convertDateTimetoString(objcomponent[component.label] ?\r\n                                            objcomponent[component.label] : new Date(), userInfo);\r\n                                    } else {\r\n                                        saveComponent[\"jsondata\"][component.label] = component.loadcurrentdate ?\r\n                                            convertDateTimetoString(objcomponent[component.label] ?\r\n                                                objcomponent[component.label] : new Date(), userInfo) :\r\n                                            objcomponent[component.label] ? convertDateTimetoString(objcomponent[component.label] ?\r\n                                                objcomponent[component.label] : new Date(), userInfo) : \"\";\r\n                                    }\r\n                                    if (component.timezone) {\r\n                                        saveComponent[\"jsondata\"][`tz${component.label}`] = objcomponent[`tz${component.label}`] ?\r\n                                            { value: objcomponent[`tz${component.label}`].value, label: objcomponent[`tz${component.label}`].label } :\r\n                                            defaulttimezone ? defaulttimezone : -1\r\n                                    }\r\n                                    //dateList.push(component.label)\r\n                                }\r\n                                else {\r\n                                    saveComponent[\"jsondata\"][component.label] = objcomponent[component.label] ?\r\n                                        objcomponent[component.label] : \"\"\r\n                                }\r\n                            }\r\n\r\n                        }\r\n                        )\r\n                    })\r\n                })\r\n            saveComponent[\"nspecsampletypecode\"] = this.state.selectedSpec[\"nallottedspeccode\"] ? this.state.selectedSpec[\"nallottedspeccode\"]['item'].nspecsampletypecode : -1;\r\n            saveComponent[\"nallottedspeccode\"] = this.state.selectedSpec[\"nallottedspeccode\"] ?\r\n                this.state.selectedSpec[\"nallottedspeccode\"].value : -1;\r\n            Component.unshift(saveComponent);\r\n            // objcomponent1[\"scomments\"] = \"\";\r\n            //objcomponent1[\"ssubsamplename\"] = \"\";\r\n\r\n            let selectedTestData = this.state.selectedTestData[\"ntestgrouptestcode\"];\r\n            let selectedTestArray = [];\r\n            selectedTestData && selectedTestData.map((item) => {\r\n                // item.item['slno']=saveComponent.slno;\r\n                return selectedTestArray.push(item.item);\r\n            });\r\n            // selectedTestArray.map((item,i)=>{\r\n            //     selectedTestArray[i]['slno']=saveComponent.slno;\r\n            // })\r\n            let Test = this.props.Login.Test || [];\r\n\r\n            const ArrayTest = Test[saveComponent.slno] ? Test[saveComponent.slno] : [];\r\n\r\n            Test[saveComponent.slno] = [...ArrayTest, ...selectedTestArray]\r\n\r\n            const updateInfo = {\r\n                Component, selectedComponent: saveComponent,\r\n                selectComponent: objcomponent1,\r\n                SelectedTest: Test[saveComponent.slno],\r\n                Test: Test//, selectedTestData: {}\r\n            }\r\n            this.addSubSampleSaveContinue(updateInfo)\r\n            // const updateInfo = {\r\n            //     typeName: DEFAULT_RETURN,\r\n            //     data: {\r\n            //         Component, selectedComponent: saveComponent,\r\n            //         selectComponent: objcomponent1,\r\n            //         SelectedTest: Test[saveComponent.slno],\r\n            //         Test: Test, selectedTestData: {}\r\n            //     }\r\n            // }\r\n            // this.props.updateStore(updateInfo);\r\n        }\r\n    }\r\n\r\n    addSubSampleSaveContinue = (updateInfo) => {\r\n        const Map = {}\r\n        Map[\"ntemplatemanipulationcode\"] = this.state.selectedSpec.ntemplatemanipulationcode;\r\n        Map[\"nallottedspeccode\"] = this.state.selectedSpec.nallottedspeccode.value;\r\n        Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\r\n        Map[\"testrequired\"] = false;\r\n        Map[\"userinfo\"] = this.props.Login.userInfo;\r\n        this.props.addSubSampleSaveContinue(updateInfo, Map, 4, this.props.Login.Components)\r\n    }\r\n\r\n    editComponent = (editselectedcomponent) => {\r\n        let inputData = {};\r\n        let objComponent = { ...editselectedcomponent };\r\n        inputData[\"ntemplatemanipulationcode\"] = this.state.selectedSpec.ntemplatemanipulationcode;\r\n        inputData[\"nallottedspeccode\"] = this.state.selectedSpec.nallottedspeccode.value;\r\n        inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n        inputData[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\r\n        this.props.EditComponent(inputData, objComponent, this.props.Login.userInfo, this.props.Login);\r\n    }\r\n\r\n\r\n    editSubSample = (editselectedcomponent, specBasedComponent) => {\r\n        let inputData = {};\r\n        let objComponent = { ...editselectedcomponent };\r\n        const defaulttimezone = this.props.Login.defaulttimezone;\r\n        const userInfo = this.props.Login.userInfo;\r\n        // inputData[\"ntemplatemanipulationcode\"] = this.state.selectedSpec.ntemplatemanipulationcode;\r\n        //  inputData[\"nallottedspeccode\"] = this.state.selectedSpec.nallottedspeccode.value;\r\n        //  inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n        //   inputData[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\r\n\r\n        let selectComponent = this.state.selectComponent;\r\n        selectComponent['slno'] = objComponent['slno']\r\n        this.props.Login.masterData.SubSampleTemplate &&\r\n            this.props.Login.masterData.SubSampleTemplate.jsondata.map(row => {\r\n                row.children.map(column => {\r\n                    column.children.map(component => {\r\n                        if (component.hasOwnProperty(\"children\")) {\r\n                            component.children.map(componentrow => {\r\n                                if (componentrow.inputtype === \"combo\") {\r\n                                    selectComponent[componentrow.label] = objComponent[\"jsondata\"][componentrow.label] ?\r\n                                        objComponent[\"jsondata\"][componentrow.label] : \"\"\r\n                                }\r\n                                else if (componentrow.inputtype === \"date\") {\r\n\r\n                                    selectComponent[componentrow.label] = objComponent[\"jsondata\"][componentrow.label] ?\r\n                                        rearrangeDateFormat(userInfo, objComponent[\"jsondata\"][componentrow.label]) : new Date();\r\n\r\n                                    if (componentrow.timezone) {\r\n                                        selectComponent[`tz${componentrow.label}`] = objComponent[\"jsondata\"][`tz${componentrow.label}`] ?\r\n                                            objComponent[\"jsondata\"][`tz${componentrow.label}`] :\r\n                                            defaulttimezone ? defaulttimezone : -1\r\n                                    }\r\n                                }\r\n                                else {\r\n                                    selectComponent[componentrow.label] = objComponent[\"jsondata\"][componentrow.label] ?\r\n                                        objComponent[\"jsondata\"][componentrow.label] : \"\"\r\n                                }\r\n                            })\r\n                        }\r\n                        else {\r\n                            if (component.inputtype === \"combo\") {\r\n                                selectComponent[component.label] = objComponent[\"jsondata\"][component.label] ?\r\n                                    objComponent[\"jsondata\"][component.label] : -1\r\n                            }\r\n                            else if (component.inputtype === \"date\") {\r\n\r\n                                selectComponent[component.label] = objComponent[\"jsondata\"][component.label] ?\r\n                                    rearrangeDateFormat(userInfo, objComponent[\"jsondata\"][component.label]) : new Date();\r\n\r\n                                if (component.timezone) {\r\n                                    selectComponent[`tz${component.label}`] = objComponent[\"jsondata\"][`tz${component.label}`] ?\r\n                                        objComponent[\"jsondata\"][`tz${component.label}`] :\r\n                                        defaulttimezone ? defaulttimezone : -1\r\n                                }\r\n                            }\r\n                            else {\r\n                                selectComponent[component.label] = objComponent[\"jsondata\"][component.label] ?\r\n                                    objComponent[\"jsondata\"][component.label] : \"\"\r\n                            }\r\n                        }\r\n                    }\r\n                    )\r\n                })\r\n            })\r\n\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                loadSubSample: true, childoperation: \"update\",\r\n                ChildscreenName: \"SubSample\",\r\n                screenName: \"SubSample\",\r\n                openChildModal: false, selectComponent,\r\n                parentPopUpSize: \"lg\", loading: false\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo)\r\n        // this.props.editSubSample(inputData, objComponent, \r\n        //     this.props.Login.userInfo, specBasedComponent);\r\n    }\r\n\r\n    deleteComponent = (event) => {\r\n        const dataItem = event;\r\n        const Component = this.props.Login.Component;\r\n        const Test = this.props.Login.Test;\r\n        let SelectedTest = this.props.Login.SelectedTest;\r\n        const index = Component.findIndex(x => x.slno === dataItem.slno);\r\n        if (index > -1) {\r\n            Component.splice(index, 1);\r\n        }\r\n        Test && Test[dataItem.slno] && delete Test[dataItem.slno]\r\n        SelectedTest = Test && Object.keys(Test).length > 0 && Test[Component[0].slno];\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { Component, selectedComponent: Component[0], Test, SelectedTest }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    deleteTest = (event) => {\r\n        const dataItem = event;\r\n        let SelectedTest = this.props.Login.SelectedTest;\r\n        let selectedComponent = this.props.Login.selectedComponent;\r\n        const Test = this.props.Login.Test;\r\n        const index = SelectedTest.findIndex(x => x.ntestgrouptestcode === dataItem.ntestgrouptestcode);\r\n        if (index > -1) {\r\n            SelectedTest.splice(index, 1);\r\n        }\r\n        Test[selectedComponent.slno] = SelectedTest;\r\n\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { Test, SelectedTest }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    onSaveTestClick = (saveType, formRef) => {\r\n        let selectedTestData = this.props.Login.selectedTestData[\"ntestgrouptestcode\"];\r\n        let selectedTestArray = [];\r\n        selectedTestData.map((item) => {\r\n            return selectedTestArray.push(item.item);\r\n        });\r\n        let updateInfo = {}\r\n        let selectedComponent = this.props.Login.selectedComponent;\r\n        let Test = this.props.Login.Test || [];\r\n        if (this.props.Login.masterData.nneedsubsample) {\r\n            const ArrayTest = Test[selectedComponent.slno] ? Test[selectedComponent.slno] : [];\r\n            //  ArrayTest.push(selectedTestArray);\r\n            Test[selectedComponent.slno] = [...ArrayTest, ...selectedTestArray]\r\n\r\n            updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: { SelectedTest: Test[selectedComponent.slno], Test: Test, selectedTestData: {}, loadTest: false, parentPopUpSize: \"xl\" }\r\n            }\r\n        } else {\r\n            selectedComponent = { subsamplename: \"NA\", slno: 1 }\r\n            const Component = [selectedComponent]\r\n            const ArrayTest = Test[selectedComponent.slno] ? Test[selectedComponent.slno] : [];\r\n            //  ArrayTest.push(selectedTestArray);\r\n            Test[selectedComponent.slno] = [...ArrayTest, ...selectedTestArray]\r\n            updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    selectedComponent,\r\n                    Component,\r\n                    SelectedTest: Test[selectedComponent.slno],\r\n                    Test: Test, selectedTestData: {}, loadTest: false,\r\n                    parentPopUpSize: \"xl\"\r\n                    , screenName: this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename\r\n                }\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    componentDataStateChange = (event) => {\r\n        this.setState({\r\n            componentDataState: event.dataState\r\n        });\r\n    }\r\n\r\n    testDataStateChange = (event) => {\r\n        this.setState({\r\n            testDataState: event.dataState\r\n        });\r\n    }\r\n\r\n    subSampleDataStateChange = (event) => {\r\n        this.setState({\r\n            subSampleDataState: event.dataState\r\n        });\r\n    }\r\n\r\n    addsubSample = (specBasedComponent) => {\r\n        let Map = {};\r\n        if (this.state.selectedSpec.nallottedspeccode !== undefined\r\n            && this.state.selectedSpec.nallottedspeccode !== \"\") {\r\n            Map[\"ntemplatemanipulationcode\"] = this.state.selectedSpec.ntemplatemanipulationcode;\r\n            Map[\"nallottedspeccode\"] = this.state.selectedSpec.nallottedspeccode.value;\r\n            Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\r\n            Map[\"testrequired\"] = false;\r\n            Map[\"userinfo\"] = this.props.Login.userInfo;\r\n\r\n            let data = this.state.SubSamplecomboComponents || []\r\n            const SubSamplewithoutCombocomponent = this.state.SubSamplewithoutCombocomponent || []\r\n            const Layout = this.props.Login.masterData.SubSampleTemplate\r\n                && this.props.Login.masterData.SubSampleTemplate.jsondata\r\n            if (SubSamplewithoutCombocomponent.length == 0 || data.length == 0) {\r\n                if (Layout !== undefined) {\r\n                    Layout.map(row => {\r\n                        row.children.map(column => {\r\n                            column.children.map(component => {\r\n                                return component.hasOwnProperty(\"children\") ?\r\n                                    component.children.map(componentrow => {\r\n                                        if (componentrow.inputtype === \"combo\") {\r\n                                            data.push(componentrow)\r\n                                        } else {\r\n                                            SubSamplewithoutCombocomponent.push(componentrow)\r\n                                        }\r\n                                    })\r\n                                    : component.inputtype === \"combo\" ? data.push(component) :\r\n                                        SubSamplewithoutCombocomponent.push(component)\r\n                            })\r\n                        })\r\n                    })\r\n                    const SubSamplecomboComponents = data\r\n                    let childColumnList = {};\r\n                    data.map(columnList => {\r\n                        const val = comboChild(data, columnList, childColumnList, true);\r\n                        data = val.data;\r\n                        childColumnList = val.childColumnList\r\n                    })\r\n\r\n                    this.props.addsubSample(this.props.Login.masterData,\r\n                        this.props.Login.userInfo, data, this.state.selectComponent,\r\n                        childColumnList, SubSamplecomboComponents,\r\n                        SubSamplewithoutCombocomponent, specBasedComponent,\r\n                        Map, this.props.Login.Component, true)\r\n\r\n                    //  this.props.addsubSample(this.props.Login.userInfo, specBasedComponent, Map)\r\n                }\r\n            } else {\r\n                this.props.addsubSample(this.props.Login.masterData,\r\n                    this.props.Login.userInfo, data, this.state.selectComponent,\r\n                    this.state.parentSubSampleColumnList, this.state.SubSamplecomboComponents,\r\n                    this.state.SubSamplewithoutCombocomponent, specBasedComponent, Map,\r\n                    this.props.Login.Component, false, this.props.Login.SubSamplecomboData,\r\n                    this.props.Login.TestCombined)\r\n            }\r\n        } else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTSPECIFICATION\" }));\r\n        }\r\n\r\n    }\r\n\r\n    onSaveClick = (saveType, formRef) => {\r\n        let operation = this.props.Login.operation;\r\n        if (operation === \"update\") {\r\n            this.onUpdateRegistration(saveType, formRef, operation);\r\n        }\r\n        else {\r\n            if (operation === \"create\") {\r\n                this.insertRegistration(true);\r\n            }\r\n        }\r\n    }\r\n\r\n    onUpdateRegistration(saveType, formRef, operation, flag) {\r\n        const inputData = { userinfo: this.props.Login.userInfo };\r\n\r\n        let initialParam = {\r\n            nfilterstatus: this.props.Login.masterData.FilterStatusValue.ntransactionstatus,\r\n            userinfo: this.props.Login.userInfo,\r\n            nsampletypecode: this.props.Login.masterData.RealSampleTypeValue.nsampletypecode,\r\n            nregtypecode: this.props.Login.masterData.RealRegTypeValue.nregtypecode,\r\n            nregsubtypecode: this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode,\r\n            fromdate: \"\",\r\n            todate: \"\",\r\n            nflag: 2,\r\n            ntype: 2,\r\n            npreregno: String(this.state.selectedRecord.npreregno),\r\n            ndesigntemplatemappingcode: this.props.Login.masterData.registrationTemplate\r\n                && this.props.Login.masterData.registrationTemplate.ndesigntemplatemappingcode,\r\n            nneedsubsample: this.props.Login.masterData\r\n                && this.props.Login.masterData.nneedsubsample,\r\n            checkBoxOperation: 3,\r\n        }\r\n\r\n        inputData[\"initialparam\"] = initialParam;\r\n        // inputData[\"samplebeforeedit\"] = JSON.parse(JSON.stringify(this.props.Login.regRecordToEdit));\r\n        //inputData[\"registration\"] = JSON.parse(JSON.stringify(this.state.selectedRecord));\r\n        const param = getRegistration(this.props.Login.masterData,\r\n            this.state.selectedRecord, this.state.selectedSpec,\r\n            this.props.Login.masterData.registrationTemplate.jsondata,\r\n            this.props.Login.userInfo, this.props.Login.defaulttimezone, operation);\r\n\r\n        inputData[\"registration\"] = param.sampleRegistration\r\n        inputData[\"DateList\"] = param.dateList\r\n        inputData[\"flag\"] = flag === undefined ? 1 : flag;\r\n        inputData[\"ndesigntemplatemappingcode\"] = this.props.Login.masterData.registrationTemplate\r\n            && this.props.Login.masterData.registrationTemplate.ndesigntemplatemappingcode;\r\n        inputData[\"nneedsubsample\"] = this.props.Login.masterData\r\n            && this.props.Login.masterData.nneedsubsample;\r\n        inputData[\"checkBoxOperation\"] = 3;\r\n        // Object.keys(this.state.selectedRecord).map(key => {\r\n        //     if (typeof this.state.selectedRecord[key] === \"object\") {\r\n        //         if (this.state.selectedRecord[key] === null) {\r\n        //             return inputData[\"registration\"][key] = this.state.selectedRecord[key];\r\n        //         }\r\n        //         else if (this.state.selectedRecord[key] instanceof Date) {\r\n        //             return inputData[\"registration\"][key] = formatInputDate(this.state.selectedRecord[key], false);\r\n        //         }\r\n        //         else {\r\n        //             return inputData[\"registration\"][key] = this.state.selectedRecord[key].value\r\n        //         }\r\n        //     }\r\n        //     else {\r\n        //         return inputData[\"registration\"][key] = this.state.selectedRecord[key];\r\n        //     }\r\n        // }\r\n        //  )\r\n        // console.log(\"edit:\", inputData);\r\n\r\n        // if (inputData[\"registration\"] ) {\r\n        //     delete inputData[\"registration\"][\"esignpassword\"]\r\n        //     delete inputData[\"registration\"][\"esigncomments\"]\r\n        //     delete inputData[\"registration\"][\"agree\"]\r\n        // }\r\n        const inputParam = {\r\n            classUrl: this.props.Login.inputParam.classUrl,\r\n            methodUrl: \"Registration\",\r\n            displayName: this.props.Login.inputParam.displayName,\r\n            inputData: inputData,\r\n            operation: operation, saveType, formRef,\r\n            action: 'editSample',\r\n            showConfirmAlert: false,\r\n            resultDataState: this.state.resultDataState,\r\n            testCommentDataState: this.state.testCommentDataState,\r\n            // dataState:undefined, selectedId\r\n        }\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData: this.props.Login.masterData },\r\n                    saveType, parentPopUpSize: \"lg\",\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            //this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\r\n            this.props.updateRegistration(inputParam, this.props.Login.masterData, \"openModal\");\r\n        }\r\n    }\r\n\r\n    findSubsampleDateList(subsampletemplate) {\r\n        const dateList = []\r\n        subsampletemplate && subsampletemplate.map(row => {\r\n            row.children.map(column => {\r\n                column.children.map(component => {\r\n                    if (component.hasOwnProperty(\"children\")) {\r\n                        component.children.map(componentrow => {\r\n                            if (componentrow.inputtype === \"date\") {\r\n                                dateList.push(componentrow.label)\r\n                            }\r\n                        })\r\n                    }\r\n                    else {\r\n                        if (component.inputtype === \"date\") {\r\n                            dateList.push(component.label)\r\n                        }\r\n                    }\r\n                }\r\n                )\r\n            })\r\n        })\r\n        return dateList;\r\n    }\r\n\r\n    insertRegistration() {\r\n        let Components = this.props.Login.Component;\r\n        if (Components && Components.length > 0) {\r\n            let Test = this.props.Login.Test;\r\n            let Map = {};\r\n            Map[\"testgrouptest\"] = TestListManipulation(Components, Test);\r\n            Map[\"RegistrationSample\"] = this.props.Login.Component ? this.props.Login.Component : [];\r\n            Map[\"subsampleDateList\"] = this.findSubsampleDateList(this.props.Login.masterData.SubSampleTemplate.jsondata);\r\n            //Map[\"FromDate\"] = rearrangeDateFormat(this.props.Login.userInfo, this.props.fromDate);//formatDate(this.fromDate);\r\n            // Map[\"ToDate\"] = rearrangeDateFormat(this.props.Login.userInfo, this.props.toDate);//formatDate(this.toDate);\r\n            Map[\"FromDate\"] = \"\";\r\n            Map[\"ToDate\"] = \"\";\r\n            Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\r\n            Map[\"nregsubtypecode\"] = this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode;\r\n            Map[\"nsampletypecode\"] = this.props.Login.masterData.RealSampleTypeValue.nsampletypecode;\r\n            Map[\"nfilterstatus\"] = transactionStatus.PREREGISTER;\r\n            Map[\"ndesigntemplatemappingcode\"] = this.props.Login.masterData.registrationTemplate\r\n                && this.props.Login.masterData.registrationTemplate.ndesigntemplatemappingcode;\r\n            Map[\"nneedsubsample\"] = this.props.Login.masterData && this.props.Login.masterData.nneedsubsample;\r\n            Map[\"checkBoxOperation\"] = 3;\r\n\r\n\r\n            const param = getRegistration(this.props.Login.masterData,\r\n                this.state.selectedRecord, this.state.selectedSpec,\r\n                this.props.Login.masterData.registrationTemplate.jsondata,\r\n                this.props.Login.userInfo, this.props.Login.defaultTimeZone);\r\n            Map[\"Registration\"] = param.sampleRegistration\r\n            Map[\"DateList\"] = param.dateList\r\n            Map[\"userinfo\"] = this.props.Login.userInfo;\r\n            Map[\"nflag\"] = 2;\r\n            // Map[\"ntype\"] = 2;\r\n            Map[\"activeSampleTab\"] = this.props.Login.activeSampleTab;\r\n            Map[\"activeTestTab\"] = this.props.Login.activeTestTab;\r\n            Map[\"multipleselectionFlag\"] = this.props.Login.settings && parseInt(this.props.Login.settings[7]) === 3 ? true : false;\r\n\r\n            const inputParam = {\r\n                inputData: Map,\r\n                postParamList: this.props.postParamList,\r\n                action: \"preregister\"\r\n            }\r\n            this.props.insertRegistration(inputParam, this.props.Login.masterData)\r\n        } else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_ADDSUBSAMPLETOPREREGISTER\" }));\r\n        }\r\n\r\n    }\r\n    onNumericInputChange = (value, name) => {\r\n        let selectedRecord = this.state.selectedRecord\r\n        selectedRecord[name] = value;\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    render() {\r\n\r\n        let saveType = 1;\r\n        if (this.props.ignoreFormValidation) {\r\n            saveType = 5;\r\n        }\r\n        let buttonLabel = \"Save\";\r\n        let idsLabel = \"IDS_SAVE\";\r\n        if (this.props.buttonLabel) {\r\n            buttonLabel = this.props.buttonLabel;\r\n            idsLabel = 'IDS_'.concat(buttonLabel.toUpperCase());\r\n        }\r\n        const testColumnList = [\r\n            { \"idsName\": \"IDS_TESTNAME\", \"dataField\": \"stestsynonym\", width: \"200px\" },\r\n            { \"idsName\": \"IDS_SECTION\", \"dataField\": \"ssectionname\", width: \"150px\" },\r\n            { \"idsName\": \"IDS_SOURCE\", \"dataField\": \"ssourcename\", width: \"150px\" },\r\n            { \"idsName\": \"IDS_METHOD\", \"dataField\": \"smethodname\", width: \"150px\" },\r\n            { \"idsName\": \"IDS_INSTRUMENTCATEGORY\", \"dataField\": \"sinstrumentcatname\", width: \"200px\" }]\r\n        return (\r\n            <Modal\r\n                size={this.props.Login.loadComponent ?\r\n                    'lg' : this.props.Login.loadSpec ? 'lg' :\r\n                        this.props.Login.loadTest ? 'lg' :\r\n                            this.props.Login.loadSubSample ? 'lg' : 'xl'}\r\n                // size={this.props.templateData[0] ?\r\n                //     this.props.templateData[0].children ?\r\n                //         this.props.templateData[0].children.length >= 2 ? 'xl' : 'lg' : 'lg' : 'lg'}\r\n                backdrop=\"static\"\r\n                //className={this.props.className || \"registrationModel\"}\r\n                className={this.props.className || \"\"}\r\n                show={this.props.Login.openPortal}\r\n                onHide={this.props.closeModal}\r\n                enforceFocus={false}\r\n                dialogClassName=\"modal-dialog-slideout freakerstop\"\r\n                aria-labelledby=\"add-user\">\r\n                {/* <Modal.Header className=\"d-flex align-items-center mb-2\"> */}\r\n                <Modal.Header className=\"d-flex align-items-center\">\r\n                    <Modal.Title id=\"add-user\" className=\"header-primary flex-grow-1\">\r\n                        {this.props.graphView === true ? \"\" : this.props.Login.inputParam ?\r\n                            this.props.Login.esign === true ?\r\n                                <FormattedMessage id={\"IDS_ESIGN\"} defaultMessage=\"Esign\" />\r\n                                : this.props.loginoperation ?\r\n                                    <FormattedMessage id={this.props.Login.screenName} />\r\n                                    : <>\r\n                                        {this.props.operation ?\r\n                                            <>\r\n                                                <FormattedMessage id={this.props.Login.operation && \"IDS_\".concat(this.props.Login.operation.toUpperCase())}\r\n                                                    defaultMessage='Add' />\r\n                                                {\" \"}\r\n                                                {\r\n                                                    this.props.Login.screenName ?\r\n                                                        <FormattedMessage id={this.props.Login.screenName} />\r\n                                                        : \"\"\r\n                                                }\r\n                                            </>\r\n                                            :\r\n                                            this.props.Login.screenName ?\r\n                                                <FormattedMessage id={this.props.Login.screenName} />\r\n                                                : \"\"}\r\n                                    </>\r\n                            : \"\"}\r\n                    </Modal.Title>\r\n                    <Button className=\"btn-user btn-cancel\" variant=\"\" onClick={this.props.Login.loadSpec ?\r\n                        this.closeSpec : this.props.Login.loadTest ? this.closeTest : this.props.Login.loadComponent ?\r\n                            this.closeComponent : this.props.Login.loadSubSample ? this.closeSubSample :\r\n                                this.props.closeModal}>\r\n                        <FormattedMessage id='IDS_CANCEL' defaultMessage='Cancel' />\r\n                    </Button>\r\n                    {this.props.esign === true ?\r\n                        <Button className=\"btn-user btn-primary-blue\" onClick={() => this.handleSaveClick(3)}>\r\n                            <FontAwesomeIcon icon={faSave} /> { }\r\n                            <FormattedMessage id='IDS_SUBMIT' defaultMessage='Submit' />\r\n                        </Button>\r\n                        :\r\n                        (this.props.operation === \"create\" || this.props.operation === \"update\") && this.props.showValidate ?\r\n                            <Button className=\"btn-user btn-primary-blue\" onClick={() => this.handleSaveClick(4)}>\r\n                                <FontAwesomeIcon icon={faSave} /> { }\r\n                                <FormattedMessage id='IDS_VALIDATE' defaultMessage='Validate' />\r\n                            </Button> :\r\n                            this.props.showCalculate ?\r\n                                <Button className=\"btn-user btn-primary-blue\" onClick={() => this.handleSaveClick(saveType)}>\r\n                                    <FontAwesomeIcon icon={faSave} /> { }\r\n                                    <FormattedMessage id='IDS_CALCULATE' defaultMessage='Calculate' />\r\n                                </Button> :\r\n                                this.props.showParam === true && this.props.showExecute ?\r\n                                    <Button className=\"btn-user btn-primary-blue\" onClick={() => this.handleSaveClick(4)}>\r\n                                        <FontAwesomeIcon icon={faCalculator} /> { }\r\n                                        <FormattedMessage id='IDS_EXECUTE' defaultMessage='Execute' />\r\n                                    </Button> :\r\n                                    this.props.noSave || this.props.graphView ?\r\n                                        this.props.operation === \"view\" ? \"\"\r\n                                            : <Button className=\"btn btn-user btn-primary-blue\" role=\"button\"\r\n                                                onClick={this.props.resetView}\r\n                                            >\r\n                                                <FormattedMessage id={\"IDS_RESET\"} defaultMessage='Reset' />\r\n                                            </Button>\r\n                                        : this.props.hideSave ? \"\" :\r\n                                            <Button className=\" btn-user btn-primary-blue\" onClick={() => this.handleSaveClick(saveType)}>\r\n                                                <FontAwesomeIcon icon={faSave} /> { }\r\n                                                <FormattedMessage id={idsLabel} defaultMessage={buttonLabel} />\r\n                                            </Button>\r\n                    }\r\n                    {this.props.Login.operation === \"create\" && this.props.Login.showSaveContinue ?\r\n                        <Button className=\"btn-user btn-primary-blue\" onClick={() => this.handleSaveClick(2)}>\r\n                            <FontAwesomeIcon icon={faSave} /> { }\r\n                            <FormattedMessage id='IDS_SAVECONTINUE' defaultMessage='Save & Continue' />\r\n                        </Button>\r\n                        : \"\"\r\n                    }\r\n                    {(this.props.operation === \"create\" || this.props.operation === \"update\")\r\n                        && this.props.esign !== true && this.props.showExecute === true && this.props.showSave ?\r\n                        <Button className=\"btn-user btn-primary-blue\" onClick={() => this.handleSaveClick(1)}>\r\n                            <FontAwesomeIcon icon={faSave} /> { }\r\n                            <FormattedMessage id='IDS_SAVE' defaultMessage='Save' />\r\n                        </Button>\r\n                        : \"\"}\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    <ModalInner ref={this.myRef}>\r\n                        <Card.Body>\r\n                            {/* <SplitterLayout borderColor=\"#999\"\r\n                                primaryIndex={1} percentage={true}\r\n                                secondaryInitialSize={this.state.splitChangeWidthPercentage}\r\n                                onSecondaryPaneSizeChange={this.paneSizeChange}\r\n                                primaryMinSize={40}\r\n                                secondaryMinSize={20}\r\n                                vertical={true}\r\n                            > */}\r\n                            <React.Fragment>\r\n                                <Form ref={this.formRef}>\r\n                                    {\r\n                                        this.props.Login.loadSpec ?\r\n                                            <AddSpecification\r\n                                                AgaramTree={this.props.Login.AgaramTree}\r\n                                                openNodes={this.props.Login.OpenNodes}\r\n                                                handleTreeClick={this.onTreeClick}\r\n                                                focusKey={this.props.Login.FocusKey}\r\n                                                activeKey={this.props.Login.ActiveKey}\r\n                                                Specification={this.props.Login.Specification}\r\n                                                selectedSpec={this.state.selectedSpec}\r\n                                                selectedRecord={this.state.selectedRecord}\r\n                                                onSpecChange={this.onspecChange}\r\n                                            />\r\n                                            : this.props.Login.loadTest ?\r\n                                                <AddTest\r\n                                                    TestCombined={this.props.Login.TestCombined || []}\r\n                                                    TestChange={this.TestChange}\r\n                                                    selectedTestData={this.props.Login.selectedTestData}\r\n                                                /> : this.props.Login.loadComponent ?\r\n                                                    <AddComponentPopUp\r\n                                                        ref={this.myScrollRef}\r\n                                                        selectComponent={this.state.selectComponent || {}}\r\n                                                        RealSampleTypeValue={this.props.Login.masterData.RealSampleTypeValue || {}}\r\n                                                        RealRegTypeValue={this.props.Login.masterData.RealRegTypeValue || {}}\r\n                                                        RealRegSubTypeValue={this.props.Login.masterData.RealRegSubTypeValue || {}}\r\n                                                        RealFilterStatusValue={this.props.Login.masterData.RealFilterStatusValue || {}}\r\n                                                        formatMessage={this.props.intl.formatMessage}\r\n                                                        handleDateChange={this.handleDateChangeComp}\r\n                                                        Component={this.props.Login.lstComponent || []}\r\n                                                        onInputComponentOnChange={this.onInputComponentOnChange}\r\n                                                        // onComboChange={this.onComponentComboChange}\r\n                                                        timeZoneList={this.props.Login.timeZoneList}\r\n                                                        onComponentChange={this.onComponentChange}\r\n                                                        userInfo={this.props.Login.userInfo}\r\n                                                        sreceiveddate={this.props.Login.sreceiveddate || []}\r\n                                                        CurrentTime={this.props.Login.CurrentTime}\r\n                                                    />\r\n                                                    : this.props.Login.loadSubSample ?\r\n                                                        <AddSubSample\r\n                                                            Component={this.props.Login.lstComponent || []}\r\n                                                            selectComponent={this.state.selectComponent}\r\n                                                            // Unit={this.props.Login.Unit || []}\r\n                                                            onComponentChange={this.onComponentChange}\r\n                                                            onInputComponentOnChange={this.onInputComponentOnChange}\r\n                                                            templateData={this.props.Login.masterData.SubSampleTemplate &&\r\n                                                                this.props.Login.masterData.SubSampleTemplate.jsondata}\r\n                                                            userInfo={this.props.Login.userInfo}\r\n                                                            timeZoneList={this.props.Login.timeZoneList}\r\n                                                            defaultTimeZone={this.props.Login.defaultTimeZone}\r\n                                                            handleDateChange={this.handleDateSubSampleChange}\r\n                                                            onInputOnChange={this.onInputOnSubSampleChange}\r\n                                                            onNumericInputChange={this.onNumericInputSubSampleChange}\r\n                                                            comboData={this.props.Login.SubSamplecomboData}\r\n                                                            onComboChange={this.onComboSubSampleChange}\r\n                                                            TestCombined={this.props.Login.TestCombined || []}\r\n                                                            TestChange={this.TestChange}\r\n                                                            selectedTestData={this.state.selectedTestData}\r\n                                                            childoperation={this.props.Login.childoperation}\r\n                                                        />\r\n                                                        : <RegisterSlideOut\r\n                                                            editfield={this.sampleeditable &&\r\n                                                                this.sampleeditable['sampleeditable']}\r\n                                                            ntransactionstatus={this.props.Login.masterData && this.props.Login.masterData.selectedSample &&\r\n                                                                this.props.Login.masterData.selectedSample.length > 0 && this.props.Login.masterData.selectedSample[0].jsondata.ntransactionstatus}\r\n                                                            loadPreregister={this.props.Login.loadPreregister}\r\n                                                            selectedSpec={this.state.selectedSpec}\r\n                                                            selectedRecord={this.state.selectedRecord}\r\n                                                            selectedComponent={this.props.Login.selectedComponent}\r\n                                                            SelectedTest={this.props.Login.SelectedTest}\r\n                                                            selectedTestData={this.state.selectedTestData}\r\n                                                            userRoleControlRights={this.props.userRoleControlRights}\r\n                                                            templateData={this.props.Login.masterData.registrationTemplate &&\r\n                                                                this.props.Login.masterData.registrationTemplate.jsondata}\r\n                                                            handleChange={this.props.handleChange}\r\n                                                            handleDateChange={this.handleDateChange}\r\n                                                            onInputOnChange={this.onInputOnChange}\r\n                                                            onNumericInputChange={this.onNumericInputChange}\r\n                                                            comboData={this.props.Login.comboData}\r\n                                                            onComboChange={this.onComboChange}\r\n                                                            userInfo={this.props.Login.userInfo}\r\n                                                            timeZoneList={this.props.Login.timeZoneList}\r\n                                                            defaultTimeZone={this.props.Login.defaultTimeZone}\r\n                                                            AddSpec={this.AddSpec}\r\n                                                            addTest={this.addTestslide}\r\n                                                            handleComponentRowClick={this.handleComponentRowClick}\r\n                                                            nneedsubsample={this.props.Login.masterData\r\n                                                                && this.props.Login.masterData.nneedsubsample}\r\n                                                            specBasedComponent={4}\r\n                                                            AddComponent={this.AddComponent}\r\n                                                            deleteComponent={this.deleteComponent}\r\n                                                            deleteTest={this.deleteTest}\r\n                                                            editComponent={this.editComponent}\r\n                                                            componentColumnList={this.componentColumnList}\r\n                                                            Component={this.props.Login.Component}\r\n                                                            TestChange={this.TestChange}\r\n                                                            testDataState={this.state.testDataState}\r\n                                                            subSampleDataState={this.state.subSampleDataState}\r\n                                                            //componentDataState={this.state.componentDataState}\r\n                                                            testDataStateChange={this.testDataStateChange}\r\n                                                            //componentDataStateChange={this.componentDataStateChange}\r\n                                                            subSampleDataStateChange={this.subSampleDataStateChange}\r\n                                                            addsubSample={this.addsubSample}\r\n                                                            editSubSample={this.editSubSample}\r\n                                                            onNumericInputChange={this.onNumericInputChange}\r\n                                                            subSampleDataGridList={this.subSampleDataGridList}\r\n\r\n                                                        />\r\n                                    }\r\n                                </Form>\r\n                            </React.Fragment>\r\n                            {/* </SplitterLayout> */}\r\n                        </Card.Body>\r\n                    </ModalInner>\r\n                </Modal.Body>\r\n            </Modal>\r\n        );\r\n\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default connect(mapStateToProps, {\r\n    getChildValues,\r\n    getPreviewTemplate, getNewRegSpecification,\r\n    AddComponents, updateStore, EditComponent, getTest,\r\n    addsubSample, editSubSample, insertRegistration, updateRegistration, addSubSampleSaveContinue\r\n}\r\n)(injectIntl(PreRegisterSlideOutModal));"]},"metadata":{},"sourceType":"module"}