{"ast":null,"code":"import _defineProperty from\"D:\\\\Postgres_workingFolder\\\\QuaLISWeb\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";import rsapi from'../rsapi';import{DEFAULT_RETURN}from'./LoginTypes';import{getComboLabelValue,constructOptionList}from'../components/CommonScript';import{toast}from'react-toastify';import Axios from'axios';import{initRequest}from'./LoginAction';import{intl}from'../components/App';//export function getMethodComboService (screenName, primaryKeyName, primaryKeyValue, operation, inputParam , userInfo, ncontrolCode) {            \nexport function getBarcodeComboService(methodParam){return function(dispatch){var methodTypeService=rsapi.post(\"barcode/getSqlQuery\",{userInfo:methodParam.userInfo});var urlArray=[];var selectedId=null;// let barcodeData={};\n//let editField={};\n//let selectedRecord =  {};\n// let selectedRecord =  {};\nif(methodParam.operation===\"create\"){urlArray=[methodTypeService];// selectedRecord = { \n//     nattachmenttypecode: attachmentType.FTP,\n//     nlinkcode: defaultLink.length>0?{\"label\": defaultLink[0].slinkname, \"value\": defaultLink[0].nlinkcode}:\"\",\n//     disabled\n// };\n}else{var _rsapi$post;var url=methodParam.inputParam.classUrl+\"/getActive\"+methodParam.inputParam.methodUrl+\"ById\";//\"method/getActiveMethodById\"      \nvar methodById=rsapi.post(url,(_rsapi$post={},_defineProperty(_rsapi$post,methodParam.primaryKeyField,methodParam.primaryKeyValue),_defineProperty(_rsapi$post,\"userinfo\",methodParam.userInfo),_rsapi$post));urlArray=[methodTypeService,methodById];selectedId=methodParam.primaryKeyValue;}dispatch(initRequest(true));Axios.all(urlArray).then(function(response){var selectedRecord={};var controlMap=constructOptionList(response[0].data.ControlType||[],\"ncontrolcode\",\"scontrolids\",undefined,undefined,false);var queryMap=constructOptionList(response[0].data.SQLQuey||[],\"nsqlquerycode\",\"ssqlqueryname\",undefined,undefined,false);var controlMapList=controlMap.get(\"OptionList\");var queryMapList=queryMap.get(\"OptionList\");if(methodParam.operation===\"update\"){selectedRecord=response[1].data;selectedRecord[\"nsqlquerycode\"]=getComboLabelValue(selectedRecord,response[0].data.SQLQuey,\"nsqlquerycode\",\"ssqlqueryname\");selectedRecord[\"ncontrolcode\"]=getComboLabelValue(selectedRecord,response[0].data.ControlType,\"ncontrolcode\",\"scontrolids\");};//selectedRecord[\"nattachmenttypecode\"]= attachmentType.PRN\ndispatch({type:DEFAULT_RETURN,payload:{barcodeData:response[0].data||[],queryMapList:queryMapList,controlMapList:controlMapList,operation:methodParam.operation,screenName:methodParam.screenName,selectedRecord:selectedRecord,openModal:true,ncontrolCode:methodParam.ncontrolCode,loading:false,selectedId:selectedId}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(intl.formatMessage({id:error.message}));}else{toast.warn(intl.formatMessage({id:error.response.data}));}});};}","map":{"version":3,"sources":["D:/Postgres_workingFolder/QuaLISWeb/src/actions/BarcodeAction.js"],"names":["rsapi","DEFAULT_RETURN","getComboLabelValue","constructOptionList","toast","Axios","initRequest","intl","getBarcodeComboService","methodParam","dispatch","methodTypeService","post","userInfo","urlArray","selectedId","operation","url","inputParam","classUrl","methodUrl","methodById","primaryKeyField","primaryKeyValue","all","then","response","selectedRecord","controlMap","data","ControlType","undefined","queryMap","SQLQuey","controlMapList","get","queryMapList","type","payload","barcodeData","screenName","openModal","ncontrolCode","loading","catch","error","status","formatMessage","id","message","warn"],"mappings":"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","sourcesContent":["import rsapi from '../rsapi';\r\nimport {DEFAULT_RETURN} from './LoginTypes';\r\nimport {getComboLabelValue,constructOptionList} from '../components/CommonScript'\r\nimport { toast } from 'react-toastify';\r\nimport Axios from 'axios';\r\nimport { initRequest } from './LoginAction';\r\nimport { intl } from '../components/App';\r\n\r\n//export function getMethodComboService (screenName, primaryKeyName, primaryKeyValue, operation, inputParam , userInfo, ncontrolCode) {            \r\n    export function getBarcodeComboService (methodParam) {            \r\n    return function (dispatch) {   \r\n    const methodTypeService = rsapi.post(\"barcode/getSqlQuery\", \r\n                                    {userInfo:methodParam.userInfo});\r\n    let urlArray = [];\r\n    let selectedId = null;\r\n   // let barcodeData={};\r\n    //let editField={};\r\n    //let selectedRecord =  {};\r\n    // let selectedRecord =  {};\r\n    if (methodParam.operation === \"create\"){\r\n        urlArray = [methodTypeService];\r\n        // selectedRecord = { \r\n        //     nattachmenttypecode: attachmentType.FTP,\r\n        //     nlinkcode: defaultLink.length>0?{\"label\": defaultLink[0].slinkname, \"value\": defaultLink[0].nlinkcode}:\"\",\r\n        //     disabled\r\n        // };\r\n    }\r\n    else{           \r\n        const url = methodParam.inputParam.classUrl+ \"/getActive\" + methodParam.inputParam.methodUrl + \"ById\";   //\"method/getActiveMethodById\"      \r\n        const methodById =  rsapi.post(url, { [methodParam.primaryKeyField] :methodParam.primaryKeyValue, \"userinfo\": methodParam.userInfo} );\r\n        urlArray = [methodTypeService, methodById];\r\n        selectedId = methodParam.primaryKeyValue;\r\n    }\r\n    dispatch(initRequest(true));\r\n    Axios.all(urlArray)\r\n        .then(response=>{                  \r\n           \r\n            let selectedRecord =  {};\r\n            const controlMap = constructOptionList(response[0].data.ControlType || [], \"ncontrolcode\",\r\n                                  \"scontrolids\", undefined, undefined, false);\r\n            const queryMap = constructOptionList(response[0].data.SQLQuey|| [], \"nsqlquerycode\",\r\n                                  \"ssqlqueryname\", undefined, undefined, false);\r\n            const  controlMapList = controlMap.get(\"OptionList\");\r\n            const  queryMapList = queryMap.get(\"OptionList\");\r\n\r\n\r\n            if (methodParam.operation === \"update\"){\r\n                selectedRecord = response[1].data;\r\n                selectedRecord[\"nsqlquerycode\"] = getComboLabelValue(selectedRecord, response[0].data.SQLQuey, \r\n                    \"nsqlquerycode\", \"ssqlqueryname\"); \r\n                selectedRecord[\"ncontrolcode\"] = getComboLabelValue(selectedRecord, response[0].data.ControlType, \r\n                        \"ncontrolcode\", \"scontrolids\");    \r\n                              \r\n            };               \r\n           //selectedRecord[\"nattachmenttypecode\"]= attachmentType.PRN\r\n            dispatch({type: DEFAULT_RETURN, payload:{barcodeData:response[0].data || [],   \r\n                queryMapList,   \r\n                controlMapList,                    \r\n                operation:methodParam.operation, screenName:methodParam.screenName, selectedRecord, \r\n                openModal : true,\r\n                ncontrolCode:methodParam.ncontrolCode,\r\n                loading:false,selectedId\r\n            }});\r\n      \r\n        })\r\n        .catch(error=>{\r\n            dispatch({type: DEFAULT_RETURN, payload: {loading:false}})\r\n            if (error.response.status === 500){\r\n                toast.error(intl.formatMessage({id: error.message}));\r\n            } \r\n            else{               \r\n                toast.warn(intl.formatMessage({id: error.response.data}));\r\n            }  \r\n        })        \r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}