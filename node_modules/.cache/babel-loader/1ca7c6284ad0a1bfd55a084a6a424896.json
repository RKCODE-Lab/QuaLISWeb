{"ast":null,"code":"var _jsxFileName = \"D:\\\\LIMSWFH\\\\LIMSPOSTGRESQL\\\\QuaLISWeb\\\\src\\\\pages\\\\joballocation\\\\AllotAnotherUser.jsx\";\nimport React from 'react';\nimport { Row, Col } from 'react-bootstrap';\nimport FormSelectSearch from '../../components/form-select-search/form-select-search.component';\nimport FormInput from '../../components/form-input/form-input.component';\nimport FormTextarea from '../../components/form-textarea/form-textarea.component';\nimport DateTimePicker from '../../components/date-time-picker/date-time-picker.component';\nimport { injectIntl } from 'react-intl';\nimport { transactionStatus } from '../../components/Enumeration';\n\nconst AllotAnotherUser = props => {\n  return /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    md: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(FormInput, {\n    label: props.intl.formatMessage({\n      id: \"IDS_TECHNIQUE\"\n    }),\n    name: \"ntechniquecode\",\n    type: \"text\",\n    onChange: event => props.onInputOnChange(event),\n    value: props.Technique,\n    isDisabled: true,\n    required: true,\n    maxLength: \"100\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 17\n    }\n  })), /*#__PURE__*/React.createElement(Col, {\n    md: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(FormSelectSearch, {\n    formLabel: props.intl.formatMessage({\n      id: \"IDS_USERS\"\n    }),\n    isSearchable: true,\n    name: \"nusercode\",\n    isDisabled: false,\n    placeholder: props.intl.formatMessage({\n      id: \"IDS_SELECTRECORD\"\n    }),\n    isMandatory: true,\n    isClearable: false,\n    options: props.Users,\n    value: props.selectedRecord[\"nusercode\"] || \"\",\n    defaultValue: props.selectedRecord[\"nusercode\"],\n    onChange: event => props.onComboChange(event, \"nusercode\"),\n    closeMenuOnSelect: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 17\n    }\n  })), /*#__PURE__*/React.createElement(Col, {\n    md: props.userInfo.istimezoneshow === transactionStatus.YES ? 6 : 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(DateTimePicker, {\n    name: \"duserblockfromdatetime\",\n    label: props.intl.formatMessage({\n      id: \"IDS_STARTDATETIME\"\n    }),\n    className: \"form-control\",\n    placeholderText: props.intl.formatMessage({\n      id: \"IDS_SELECTDATE\"\n    }),\n    dateFormat: props.userInfo ? props.userInfo.ssitedatetime || [] : [],\n    timeInputLabel: props.intl.formatMessage({\n      id: \"IDS_STARTTIME\"\n    }),\n    showTimeInput: true,\n    isClearable: false,\n    isMandatory: true,\n    required: true,\n    minDate: props.currentTime,\n    maxTime: props.currentTime,\n    onChange: date => props.handleDateChange(\"duserblockfromdatetime\", date),\n    selected: props.selectedRecord && props.selectedRecord[\"duserblockfromdatetime\"] ? props.selectedRecord[\"duserblockfromdatetime\"] : new Date(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 17\n    }\n  })), /*#__PURE__*/React.createElement(Col, {\n    md: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(FormInput, {\n    label: props.intl.formatMessage({\n      id: \"IDS_HOLDDURATION\"\n    }),\n    name: \"suserholdduration\",\n    type: \"text\",\n    onChange: event => props.onInputOnChange(event),\n    placeholder: props.intl.formatMessage({\n      id: \"IDS_HOLDDURATION\"\n    }),\n    value: props.selectedRecord ? props.selectedRecord[\"suserholdduration\"] : \"\",\n    isMandatory: true,\n    required: false,\n    maxLength: \"4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 17\n    }\n  })), /*#__PURE__*/React.createElement(Col, {\n    md: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(FormSelectSearch, {\n    formLabel: props.intl.formatMessage({\n      id: \"IDS_PERIOD\"\n    }),\n    isSearchable: true,\n    name: \"nuserperiodcode\",\n    isDisabled: false,\n    placeholder: props.intl.formatMessage({\n      id: \"IDS_SELECTRECORD\"\n    }),\n    isMandatory: true,\n    isClearable: false,\n    options: props.UsersPeriod,\n    value: props.selectedRecord[\"nuserperiodcode\"] || \"\",\n    defaultValue: props.selectedRecord[\"nuserperiodcode\"],\n    onChange: event => props.onComboChange(event, \"nuserperiodcode\"),\n    closeMenuOnSelect: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 17\n    }\n  })), /*#__PURE__*/React.createElement(Col, {\n    md: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(FormTextarea, {\n    label: props.intl.formatMessage({\n      id: \"IDS_COMMENTS\"\n    }),\n    name: \"scomments\",\n    type: \"text\",\n    onChange: event => props.onInputOnChange(event),\n    placeholder: props.intl.formatMessage({\n      id: \"IDS_COMMENTS\"\n    }),\n    value: props.selectedRecord ? props.selectedRecord[\"scomments\"] : \"\",\n    isMandatory: false,\n    required: false,\n    maxLength: \"255\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 17\n    }\n  })));\n};\n\nexport default injectIntl(AllotAnotherUser);","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/pages/joballocation/AllotAnotherUser.jsx"],"names":["React","Row","Col","FormSelectSearch","FormInput","FormTextarea","DateTimePicker","injectIntl","transactionStatus","AllotAnotherUser","props","intl","formatMessage","id","event","onInputOnChange","Technique","Users","selectedRecord","onComboChange","userInfo","istimezoneshow","YES","ssitedatetime","currentTime","date","handleDateChange","Date","UsersPeriod"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { Row, Col } from 'react-bootstrap';\r\nimport FormSelectSearch from '../../components/form-select-search/form-select-search.component';\r\nimport FormInput from '../../components/form-input/form-input.component';\r\nimport FormTextarea from '../../components/form-textarea/form-textarea.component';\r\nimport DateTimePicker from '../../components/date-time-picker/date-time-picker.component';\r\nimport {injectIntl } from 'react-intl';\r\nimport { transactionStatus } from '../../components/Enumeration';\r\n\r\nconst AllotAnotherUser = (props) => {\r\n    return (\r\n        <Row>\r\n            <Col md={12}>\r\n                <FormInput\r\n                    label={props.intl.formatMessage({ id: \"IDS_TECHNIQUE\" })}\r\n                    name={\"ntechniquecode\"}\r\n                    type=\"text\"\r\n                    onChange={(event) => props.onInputOnChange(event)}\r\n                    value={props.Technique}\r\n                    isDisabled={true}\r\n                    required={true}\r\n                    maxLength={\"100\"}\r\n                />\r\n            </Col>\r\n            <Col md={12}>\r\n                <FormSelectSearch\r\n                    formLabel={props.intl.formatMessage({ id: \"IDS_USERS\" })}\r\n                    isSearchable={true}\r\n                    name={\"nusercode\"}\r\n                    isDisabled={false}\r\n                    placeholder={props.intl.formatMessage({ id: \"IDS_SELECTRECORD\" })}\r\n                    isMandatory={true}\r\n                    isClearable={false}\r\n                    options={props.Users}\r\n                    value = { props.selectedRecord[\"nusercode\"] || \"\" }\r\n                    defaultValue={props.selectedRecord[\"nusercode\"]}\r\n                    onChange={(event)=>props.onComboChange(event, \"nusercode\")}\r\n                    closeMenuOnSelect={true}\r\n                >\r\n                </FormSelectSearch>\r\n            </Col> \r\n\r\n            <Col md={props.userInfo.istimezoneshow === transactionStatus.YES  ? 6 : 12}>\r\n                <DateTimePicker\r\n                    name={\"duserblockfromdatetime\"}\r\n                    label={props.intl.formatMessage({ id: \"IDS_STARTDATETIME\" })}\r\n                    className='form-control'\r\n                    placeholderText={props.intl.formatMessage({ id: \"IDS_SELECTDATE\" })}\r\n                    dateFormat={props.userInfo ? props.userInfo.ssitedatetime || [] : []}\r\n                    timeInputLabel={props.intl.formatMessage({ id: \"IDS_STARTTIME\" })}\r\n                    showTimeInput={true}\r\n                    isClearable={false}\r\n                    isMandatory={true}\r\n                    required={true}\r\n                    minDate={props.currentTime}\r\n                    maxTime={props.currentTime}\r\n                    onChange={date => props.handleDateChange(\"duserblockfromdatetime\", date)}         \r\n                    selected={props.selectedRecord && props.selectedRecord[\"duserblockfromdatetime\"] ? props.selectedRecord[\"duserblockfromdatetime\"] : new Date()}\r\n\r\n                />\r\n             </Col>\r\n\r\n                    \r\n            <Col md={6}>\r\n                <FormInput\r\n                    label={props.intl.formatMessage({ id: \"IDS_HOLDDURATION\" })}\r\n                    name={\"suserholdduration\"}\r\n                    type=\"text\"\r\n                    onChange={(event) => props.onInputOnChange(event)}\r\n                    placeholder={props.intl.formatMessage({ id: \"IDS_HOLDDURATION\" })}\r\n                    value={props.selectedRecord ? props.selectedRecord[\"suserholdduration\"] : \"\"}\r\n                    isMandatory={true}\r\n                    required={false}\r\n                    maxLength={\"4\"}\r\n                />\r\n            </Col>\r\n            <Col md={6}>\r\n                <FormSelectSearch\r\n                    formLabel={props.intl.formatMessage({ id: \"IDS_PERIOD\" })}\r\n                    isSearchable={true}\r\n                    name={\"nuserperiodcode\"}\r\n                    isDisabled={false}\r\n                    placeholder={props.intl.formatMessage({ id: \"IDS_SELECTRECORD\" })}\r\n                    isMandatory={true}\r\n                    isClearable={false}\r\n                    options={props.UsersPeriod}\r\n                    value = { props.selectedRecord[\"nuserperiodcode\"] || \"\" }\r\n                    defaultValue={props.selectedRecord[\"nuserperiodcode\"]}\r\n                    onChange={(event)=>props.onComboChange(event, \"nuserperiodcode\")}\r\n                    closeMenuOnSelect={true}\r\n                >\r\n                </FormSelectSearch>\r\n            </Col>\r\n            <Col md={12}>\r\n                <FormTextarea\r\n                    label={props.intl.formatMessage({ id: \"IDS_COMMENTS\" })}\r\n                    name={\"scomments\"}\r\n                    type=\"text\"\r\n                    onChange={(event) => props.onInputOnChange(event)}\r\n                    placeholder={props.intl.formatMessage({ id: \"IDS_COMMENTS\" })}\r\n                    value={props.selectedRecord ? props.selectedRecord[\"scomments\"] : \"\"}\r\n                    isMandatory={false}\r\n                    required={false}\r\n                    maxLength={\"255\"}\r\n                />\r\n            </Col>\r\n        </Row>\r\n    );\r\n}\r\nexport default injectIntl(AllotAnotherUser);"]},"metadata":{},"sourceType":"module"}