{"ast":null,"code":"var _jsxFileName = \"D:\\\\LIMSWFH\\\\LIMSPOSTGRESQL\\\\QuaLISWeb\\\\src\\\\pages\\\\release\\\\ReleaseTestAttachment.jsx\";\nimport React from 'react';\nimport { Col, Row } from 'react-bootstrap';\nimport { injectIntl } from 'react-intl';\nimport DropZone from '../../components/dropzone/dropzone.component';\nimport { attachmentType, transactionStatus } from '../../components/Enumeration';\nimport { deleteAttachmentDropZone, onDropAttachFileList } from '../../components/CommonScript';\nimport { viewAttachment } from '../../actions';\nimport { connect } from 'react-redux';\nimport DataGrid from '../../components/data-grid/data-grid.component';\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\nimport { process } from '@progress/kendo-data-query';\nimport CustomSwitch from '../../components/custom-switch/custom-switch.component';\nimport FormTextarea from '../../components/form-textarea/form-textarea.component';\nimport FormSelectSearch from '../../components/form-select-search/form-select-search.component';\nimport Esign from '../audittrail/Esign';\nimport rsapi from '../../rsapi';\nimport { toast } from 'react-toastify';\nimport { create_UUID, Lims_JSON_stringify, showEsign } from \"../../components/CommonScript\";\n\nclass ReleaseTestAttachment extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.closeModal = () => {\n      let loadEsign = this.state.loadEsign;\n      let openModal = this.state.openModal;\n      let selectedRecord = this.state.selectedRecord;\n      let operation = this.state.operation;\n\n      if (this.state.loadEsign) {\n        if (this.state.operation === \"delete\") {\n          loadEsign = false;\n          openModal = false;\n          selectedRecord = {};\n          operation = undefined;\n        } else {\n          loadEsign = false;\n          selectedRecord[\"esigncomments\"] = \"\";\n          selectedRecord[\"esignpassword\"] = \"\";\n          selectedRecord['esignreason'] = '';\n        }\n      } else {\n        openModal = false;\n        selectedRecord = {};\n      }\n\n      this.setState({\n        loadEsign,\n        openModal,\n        selectedRecord,\n        operation\n      });\n    };\n\n    this.getSampleDetails = (event, ncontrolCode, operation) => {\n      const url = \"release/getActiveReleaseTestAttachmentById\";\n      let openModal = true;\n\n      if (this.props.masterData.selectedReleaseHistory.ntransactionstatus !== transactionStatus.RELEASED) {\n        if (operation === \"update\") {\n          rsapi.post(url, {\n            \"ncoaparentcode\": event.editRow.ncoaparentcode,\n            \"npreregno\": event.editRow.npreregno,\n            \"ntransactionsamplecode\": event.editRow.ntransactionsamplecode,\n            \"ntransactiontestcode\": event.editRow.ntransactiontestcode,\n            \"nreleasetestattachmentcode\": event.editRow.nreleasetestattachmentcode,\n            \"userinfo\": this.props.userInfo\n          }).then(response => {\n            let responseData = response.data;\n\n            if (responseData.ntransactionstatus !== transactionStatus.RELEASED) {\n              let selectedReleaseTestAttachment = event.editRow;\n              let masterData = this.props.masterData;\n              let nneedreport = responseData && responseData.nneedreport ? responseData.nneedreport : transactionStatus.NO;\n              let sdescription = responseData && responseData.sdescription ? responseData.sdescription : \"\";\n              let sfilename = event.editRow && event.editRow.sfilename;\n              let npreregno;\n              let ntransactionsamplecode;\n              let ntransactiontestcode;\n              let sarno;\n              let ssamplearno;\n              let stestsynonym;\n              masterData.RegistrationArno.map(item => {\n                if (item.value === responseData.npreregno) {\n                  npreregno = item;\n                  sarno = item.label;\n                }\n              });\n              masterData.RegistrationSampleArno.map(item => {\n                if (item.value === responseData.ntransactionsamplecode) {\n                  ntransactionsamplecode = item;\n                  ssamplearno = item.label;\n                }\n              });\n              masterData.RegistrationTest.map(item => {\n                if (item.value === responseData.ntransactiontestcode) {\n                  ntransactiontestcode = item;\n                  stestsynonym = item.label;\n                }\n              });\n              let selectedRecord = { ...this.state.selectedRecord,\n                npreregno,\n                ntransactionsamplecode,\n                ntransactiontestcode,\n                sfilename,\n                sarno,\n                ssamplearno,\n                stestsynonym,\n                nneedreport,\n                sdescription,\n                selectedReleaseTestAttachment\n              };\n              this.setState({\n                selectedRecord,\n                openModal,\n                operation,\n                ncontrolCode\n              });\n            } else {\n              toast.warn(this.props.intl.formatMessage({\n                id: \"IDS_RECORDALREADYRELEASED\"\n              }));\n            }\n          }).catch(error => {\n            if (error.response.status === 500) {\n              toast.error(error.message);\n            } else {\n              toast.warn(error.response.data);\n            }\n\n            this.setState({\n              loading: false\n            });\n          });\n        } else {\n          let RegistrationArno = this.props.masterData.RegistrationArno;\n          let selectedRecord = {\n            RegistrationArno: RegistrationArno,\n            ReleaseTestAttachmentDetails: this.props.masterData.ReleaseTestAttachmentDetails,\n            nneedreport: transactionStatus.NO\n          };\n          this.setState({\n            selectedRecord,\n            openModal,\n            operation,\n            ncontrolCode\n          });\n        }\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_RECORDALREADYRELEASED\"\n        }));\n      }\n    };\n\n    this.deleteRecord = deleteParam => {\n      const url = \"release/deleteReleaseTestAttachment\";\n\n      if (this.props.masterData.selectedReleaseHistory.ntransactionstatus !== transactionStatus.RELEASED) {\n        let releasetestattachment = {\n          \"ncoaparentcode\": deleteParam.selectedRecord.ncoaparentcode,\n          \"npreregno\": deleteParam.selectedRecord.npreregno,\n          \"ntransactionsamplecode\": deleteParam.selectedRecord.ntransactionsamplecode,\n          \"ntransactiontestcode\": deleteParam.selectedRecord.ntransactiontestcode,\n          \"nreleasetestattachmentcode\": deleteParam.selectedRecord.nreleasetestattachmentcode\n        };\n        rsapi.post(url, {\n          releasetestattachment,\n          \"userinfo\": this.props.userInfo\n        }).then(response => {\n          let ReleaseTestAttachmentDetails = response.data.ReleaseTestAttachmentDetails;\n          let selectedRecord = { ...this.state.selectedRecord,\n            ...response.data\n          };\n          this.setState({\n            selectedRecord,\n            ReleaseTestAttachmentDetails\n          });\n        }).catch(error => {\n          if (error.response.status === 500) {\n            toast.error(error.message);\n          } else {\n            toast.warn(error.response.data);\n          }\n\n          this.setState({\n            loading: false\n          });\n        });\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_RECORDALREADYRELEASED\"\n        }));\n      }\n    };\n\n    this.onComboChange = (comboData, fieldName) => {\n      let selectedRecord = this.state.selectedRecord || {};\n      let lstRegistrationSampleArno = this.props.masterData.RegistrationSampleArno;\n      let lstRegistrationTest = this.props.masterData.RegistrationTest;\n      let RegistrationSampleArno = [];\n      let RegistrationTest = [];\n      let ntransactionsamplecode = \"\";\n      let ntransactiontestcode = \"\";\n      let ssamplearno = null;\n      let stestsynonym = null;\n\n      if (fieldName === \"npreregno\") {\n        lstRegistrationSampleArno.map(item => {\n          if (item.item.npreregno === comboData.value) {\n            RegistrationSampleArno.push(item);\n          }\n        });\n        let npreregno = {\n          item: comboData.item,\n          label: comboData.label,\n          value: comboData.value\n        };\n        let sarno = comboData.item.sarno;\n        selectedRecord = { ...selectedRecord,\n          RegistrationSampleArno,\n          RegistrationTest,\n          npreregno,\n          sarno,\n          ntransactionsamplecode,\n          ntransactiontestcode,\n          ssamplearno,\n          stestsynonym\n        };\n        this.setState({\n          selectedRecord\n        });\n      } else if (fieldName === \"ntransactionsamplecode\") {\n        lstRegistrationTest.map(item => {\n          if (item.item.ntransactionsamplecode === comboData.value) {\n            RegistrationTest.push(item);\n          }\n        });\n        ntransactionsamplecode = {\n          item: comboData.item,\n          label: comboData.label,\n          value: comboData.value\n        };\n        ssamplearno = comboData.item.ssamplearno;\n        selectedRecord = { ...selectedRecord,\n          RegistrationTest,\n          ntransactionsamplecode,\n          ssamplearno,\n          ntransactiontestcode,\n          stestsynonym\n        };\n        this.setState({\n          selectedRecord\n        });\n      } else if (fieldName === \"ntransactiontestcode\") {\n        ntransactiontestcode = {\n          item: comboData.item,\n          label: comboData.label,\n          value: comboData.value\n        };\n        stestsynonym = comboData.item.stestsynonym;\n        selectedRecord = { ...selectedRecord,\n          ntransactiontestcode,\n          stestsynonym\n        };\n        this.setState({\n          selectedRecord\n        });\n      }\n    };\n\n    this.onInputOnChange = event => {\n      const selectedRecord = this.state.selectedRecord || {};\n      selectedRecord[event.target.name] = event.target.value;\n\n      if (event.target.type === 'checkbox') {\n        if (event.target.name === \"nneedreport\") {\n          selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\n        }\n      } else {\n        selectedRecord[event.target.name] = event.target.value;\n      }\n\n      if (selectedRecord[\"nneedreport\"] && selectedRecord[\"nneedreport\"] === transactionStatus.YES && selectedRecord[\"sfilename\"] !== undefined && selectedRecord[\"sfilename\"].length > 0) {\n        let fileFormat = false;\n        let requiredFileFormat = this.props.settings && this.props.settings[32] && this.props.settings[32].split(\",\");\n        let fileNameSplit = selectedRecord[\"sfilename\"] && Array.isArray(selectedRecord[\"sfilename\"]) ? selectedRecord[\"sfilename\"][0].name.split(\".\") : selectedRecord[\"sfilename\"].split(\".\");\n        requiredFileFormat.map(item => {\n          if (item.slice(1) === fileNameSplit[fileNameSplit.length - 1]) {\n            fileFormat = true;\n          }\n        });\n        selectedRecord[\"nneedreport\"] = fileFormat ? selectedRecord[\"nneedreport\"] : transactionStatus.NO;\n        !fileFormat && toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_REPORTSUPPORTSONLYFILEFORMATS\"\n        }));\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onDrop = (attachedFiles, fieldName, maxSize) => {\n      let selectedRecord = this.state.selectedRecord || {};\n      selectedRecord[fieldName] = onDropAttachFileList(selectedRecord[fieldName], attachedFiles, maxSize);\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.deleteAttachment = (event, file, fieldName) => {\n      let selectedRecord = this.state.selectedRecord || {};\n      selectedRecord[fieldName] = deleteAttachmentDropZone(selectedRecord[fieldName], file);\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.dataStateChange = event => {\n      this.setState({\n        dataState: event.dataState,\n        dataResult: process(this.state.ReleaseTestAttachmentDetails, event.dataState)\n      });\n    };\n\n    this.viewReleaseTestAttachmentFile = filedata => {\n      delete filedata.inputData.userinfo;\n      const inputParam = {\n        inputData: {\n          releasetestattachment: filedata.inputData,\n          userinfo: this.props.userInfo,\n          ncontrolcode: filedata.ncontrolCode\n        },\n        classUrl: \"release\",\n        operation: \"view\",\n        methodUrl: \"ReleaseTestAttachment\"\n      };\n      this.props.viewAttachment(inputParam);\n    };\n\n    this.onSaveClick = (saveType, formRef) => {\n      if (this.state.loading === false) {\n        this.setState({\n          loading: true\n        });\n        const formData = new FormData();\n        const selectedRecord = this.state.selectedRecord;\n        const acceptedFiles = selectedRecord.sfilename;\n        const userInfo = this.props.userInfo;\n        let isFileEdited = transactionStatus.NO;\n        let fileArray = [];\n\n        if (acceptedFiles && Array.isArray(acceptedFiles) && acceptedFiles.length > 0) {\n          if (this.state.operation === 'create') {\n            acceptedFiles.forEach((file, index) => {\n              const splittedFileName = file.name.split('.');\n              const fileExtension = file.name.split('.')[splittedFileName.length - 1];\n              const fileName = selectedRecord.ssystemfilename && selectedRecord.ssystemfilename !== \"\" ? selectedRecord.ssystemfilename.split('.')[0] : create_UUID();\n              const uniquefilename = fileName + '.' + fileExtension;\n              const tempData = {};\n              tempData[\"nformcode\"] = userInfo.nformcode;\n              tempData[\"npreregno\"] = selectedRecord.npreregno.value;\n              tempData[\"ntransactionsamplecode\"] = selectedRecord.ntransactionsamplecode.value;\n              tempData[\"ntransactiontestcode\"] = selectedRecord.ntransactiontestcode.value;\n              tempData[\"ncoaparentcode\"] = this.props.masterData.ncoaparentcode;\n              tempData[\"nusercode\"] = userInfo.nusercode;\n              tempData[\"nuserrolecode\"] = userInfo.nuserrole;\n              tempData[\"jsondata\"] = {\n                stestsynonym: selectedRecord.ntransactiontestcode.label,\n                susername: userInfo.susername,\n                suserrolename: userInfo.suserrolename,\n                nfilesize: file.size,\n                ssystemfilename: uniquefilename,\n                sfilename: Lims_JSON_stringify(file.name.replaceAll('\\\\', '\\\\\\\\\\\\\\\\').replaceAll('\\n', '\\\\\\\\n').replaceAll('\"', '\\\\\"').trim(), false),\n                slinkname: \"\",\n                sdescription: Lims_JSON_stringify(selectedRecord.sdescription ? selectedRecord.sdescription.replaceAll('\\\\', '\\\\\\\\\\\\\\\\').replaceAll('\\n', '\\\\\\\\n').replaceAll('\"', '\\\\\"').trim() : \"\", false),\n                nneedreport: selectedRecord.nneedreport ? selectedRecord.nneedreport : transactionStatus.NO\n              };\n              formData.append(\"uploadedFile\" + index, file);\n              formData.append(\"uniquefilename\" + index, uniquefilename);\n              fileArray.push(tempData);\n            });\n            formData.append(\"filecount\", acceptedFiles.length);\n            isFileEdited = transactionStatus.YES;\n          } else {\n            acceptedFiles.forEach((file, index) => {\n              const splittedFileName = file.name.split('.');\n              const fileExtension = file.name.split('.')[splittedFileName.length - 1];\n              const fileName = selectedRecord.ssystemfilename && selectedRecord.ssystemfilename !== \"\" ? selectedRecord.ssystemfilename.split('.')[0] : create_UUID();\n              const uniquefilename = fileName + '.' + fileExtension;\n              const tempData = {};\n              tempData[\"nreleasetestattachmentcode\"] = selectedRecord.selectedReleaseTestAttachment && selectedRecord.selectedReleaseTestAttachment.nreleasetestattachmentcode;\n              tempData[\"nformcode\"] = userInfo.nformcode;\n              tempData[\"npreregno\"] = selectedRecord.npreregno.value;\n              tempData[\"ntransactionsamplecode\"] = selectedRecord.ntransactionsamplecode.value;\n              tempData[\"ntransactiontestcode\"] = selectedRecord.ntransactiontestcode.value;\n              tempData[\"ncoaparentcode\"] = this.props.masterData.ncoaparentcode;\n              tempData[\"nusercode\"] = userInfo.nusercode;\n              tempData[\"nuserrolecode\"] = userInfo.nuserrole;\n              tempData[\"jsondata\"] = {\n                stestsynonym: selectedRecord.ntransactiontestcode.label,\n                susername: userInfo.susername,\n                suserrolename: userInfo.suserrolename,\n                nfilesize: file.size,\n                ssystemfilename: uniquefilename,\n                sfilename: Lims_JSON_stringify(file.name.replaceAll('\\\\', '\\\\\\\\\\\\\\\\').replaceAll('\\n', '\\\\\\\\n').replaceAll('\"', '\\\\\"').trim(), false),\n                slinkname: \"\",\n                sdescription: Lims_JSON_stringify(selectedRecord.sdescription ? selectedRecord.sdescription.replaceAll('\\\\', '\\\\\\\\\\\\\\\\').replaceAll('\\n', '\\\\\\\\n').replaceAll('\"', '\\\\\"').trim() : \"\", false),\n                nneedreport: selectedRecord.nneedreport ? selectedRecord.nneedreport : transactionStatus.NO\n              };\n              formData.append(\"uploadedFile\" + index, file);\n              formData.append(\"uniquefilename\" + index, uniquefilename);\n              formData.append(\"filecount\", acceptedFiles.length);\n              isFileEdited = transactionStatus.YES;\n              fileArray.push(tempData);\n            });\n          }\n        } else {\n          let tempData = {};\n          tempData[\"nreleasetestattachmentcode\"] = selectedRecord.selectedReleaseTestAttachment && selectedRecord.selectedReleaseTestAttachment.nreleasetestattachmentcode;\n          tempData[\"nformcode\"] = userInfo.nformcode;\n          tempData[\"npreregno\"] = selectedRecord.npreregno.value;\n          tempData[\"ntransactionsamplecode\"] = selectedRecord.ntransactionsamplecode.value;\n          tempData[\"ntransactiontestcode\"] = selectedRecord.ntransactiontestcode.value;\n          tempData[\"ncoaparentcode\"] = this.props.masterData.ncoaparentcode;\n          tempData[\"nusercode\"] = userInfo.nusercode;\n          tempData[\"nuserrolecode\"] = userInfo.nuserrole;\n          tempData[\"jsondata\"] = {\n            stestsynonym: selectedRecord.ntransactiontestcode.label,\n            susername: userInfo.susername,\n            suserrolename: userInfo.suserrolename,\n            nfilesize: selectedRecord.size,\n            ssystemfilename: selectedRecord.ssystemfilename,\n            sfilename: Lims_JSON_stringify(acceptedFiles.replaceAll('\\\\', '\\\\\\\\\\\\\\\\').replaceAll('\\n', '\\\\\\\\n').replaceAll('\"', '\\\\\"').trim(), false),\n            slinkname: \"\",\n            sdescription: Lims_JSON_stringify(selectedRecord.sdescription ? selectedRecord.sdescription.replaceAll('\\\\', '\\\\\\\\\\\\\\\\').replaceAll('\\n', '\\\\\\\\n').replaceAll('\"', '\\\\\"').trim() : \"\", false),\n            nneedreport: selectedRecord.nneedreport ? selectedRecord.nneedreport : transactionStatus.NO\n          };\n          fileArray.push(tempData);\n        }\n\n        formData.append(\"isFileEdited\", isFileEdited);\n        formData.append(\"releasetestattachment\", JSON.stringify(fileArray));\n        formData.append(\"nattachmenttypecode\", attachmentType.FTP);\n        formData.append(\"ncoaparentcode\", this.props.masterData.ncoaparentcode);\n        formData.append(\"ncontrolcode\", this.state.ncontrolCode);\n        formData.append(\"userinfo\", JSON.stringify({ ...userInfo,\n          sformname: Lims_JSON_stringify(userInfo.sformname),\n          smodulename: Lims_JSON_stringify(userInfo.smodulename),\n          slanguagename: Lims_JSON_stringify(userInfo.slanguagename)\n        }));\n        const inputParam = {\n          inputData: {\n            \"userinfo\": { ...userInfo,\n              sformname: Lims_JSON_stringify(userInfo.sformname),\n              smodulename: Lims_JSON_stringify(userInfo.smodulename),\n              slanguagename: Lims_JSON_stringify(userInfo.slanguagename)\n            }\n          },\n          formData: formData,\n          isFileupload: true,\n          operation: this.state.operation,\n          classUrl: \"release\",\n          saveType: saveType,\n          formRef: formRef,\n          methodUrl: \"ReleaseTestAttachment\"\n        };\n        formData.append(\"userinfo\", JSON.stringify(inputParam.inputData.userinfo));\n        const requestUrl = rsapi.post(\"release/\" + this.state.operation + \"ReleaseTestAttachment\", formData);\n        return requestUrl.then(response => {\n          let ReleaseTestAttachmentDetails = response.data.ReleaseTestAttachmentDetails;\n          let selectedRecord = {};\n          let openModal = false;\n          this.setState({\n            selectedRecord,\n            openModal,\n            ReleaseTestAttachmentDetails,\n            loading: false\n          });\n        }).catch(error => {\n          if (error.response.status === 500) {\n            toast.error(error.message);\n          } else {\n            toast.warn(error.response.data);\n          }\n\n          this.setState({\n            loading: false\n          });\n        });\n      }\n    };\n\n    const dataState = {\n      skip: 0,\n      take: this.props.settings ? parseInt(this.props.settings[14]) : 5\n    };\n    this.state = {\n      loading: false,\n      ReleaseTestAttachmentDetails: this.props.ReleaseTestAttachmentDetails,\n      dataState: dataState,\n      openModal: false,\n      inputParam: this.props.inputParam,\n      loadEsign: false,\n      operation: \"\",\n      selectedRecord: {},\n      isneedReport: this.props.isneedReport\n    };\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.ReleaseTestAttachmentDetails !== prevProps.ReleaseTestAttachmentDetails) {\n      this.setState({\n        ReleaseTestAttachmentDetails: this.props.ReleaseTestAttachmentDetails\n      });\n    }\n\n    if (this.props.inputParam !== prevProps.inputParam) {\n      this.setState({\n        inputParam: this.props.inputParam\n      });\n    }\n  }\n\n  render() {\n    const addReleaseTestAttachment = this.props.controlMap.has(\"AddReleaseTestAttachment\") && this.props.controlMap.get(\"AddReleaseTestAttachment\").ncontrolcode;\n    const editReleaseTestAttachment = this.props.controlMap.has(\"EditReleaseTestAttachment\") && this.props.controlMap.get(\"EditReleaseTestAttachment\").ncontrolcode;\n    const editReleaseTestAttachmentParam = {\n      screenName: this.props.intl.formatMessage({\n        id: \"IDS_RELEASETESTATTACHMENT\"\n      }),\n      operation: \"update\",\n      primaryKeyField: \"nreleasetestattachmentcode\",\n      inputParam: this.state.inputParam,\n      userInfo: this.props.userInfo,\n      ncontrolCode: editReleaseTestAttachment\n    };\n    this.fieldsForReleasedTestAttachmentGrid = [{\n      \"idsName\": \"IDS_FILENAME\",\n      \"dataField\": \"sfilename\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_ARNO\",\n      \"dataField\": \"sarno\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_SAMPLEARNO\",\n      \"dataField\": \"ssamplearno\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_TESTSYNONYM\",\n      \"dataField\": \"stestsynonym\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_SCREENNAME\",\n      \"dataField\": \"sformname\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_DESCRIPTION\",\n      \"dataField\": \"sdescription\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_INCULDEINREPORT\",\n      \"dataField\": \"sneedreport\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_USERNAME\",\n      \"dataField\": \"susername\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_USERROLENAME\",\n      \"dataField\": \"suserrolename\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_CREATEDDATE\",\n      \"dataField\": \"screateddate\",\n      \"width\": \"200px\"\n    }];\n    let mandatoryFields = [{\n      \"idsName\": \"IDS_FILE\",\n      \"dataField\": \"sfilename\",\n      \"mandatoryLabel\": \"IDS_CHOOSE\",\n      \"controlType\": \"file\"\n    }, {\n      \"idsName\": \"IDS_ARNUMBER\",\n      \"dataField\": \"sarno\",\n      \"mandatoryLabel\": \"IDS_CHOOSE\",\n      \"controlType\": \"file\"\n    }, {\n      \"idsName\": \"IDS_SAMPLEARNO\",\n      \"dataField\": \"ssamplearno\",\n      \"mandatoryLabel\": \"IDS_CHOOSE\",\n      \"controlType\": \"file\"\n    }, {\n      \"idsName\": \"IDS_TESTSYNONYM\",\n      \"dataField\": \"stestsynonym\",\n      \"mandatoryLabel\": \"IDS_CHOOSE\",\n      \"controlType\": \"file\"\n    }];\n    const sdescrption = this.state.selectedRecord && this.state.selectedRecord.nattachmenttypecode === attachmentType.LINK ? \"slinkdescription\" : \"sdescription\";\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(DataGrid, {\n      primaryKeyField: \"nreleasetestattachmentcode\",\n      data: this.state.ReleaseTestAttachmentDetails || [],\n      dataResult: process(this.state.ReleaseTestAttachmentDetails && this.state.ReleaseTestAttachmentDetails || [], this.state.dataState),\n      dataState: this.state.dataState,\n      isExportExcelRequired: false,\n      controlMap: this.props.controlMap,\n      userRoleControlRights: this.props.userRoleControlRights,\n      userInfo: this.props.userInfo,\n      editParam: editReleaseTestAttachmentParam,\n      extractedColumnList: this.fieldsForReleasedTestAttachmentGrid,\n      pageable: true,\n      dataStateChange: this.dataStateChange,\n      scrollable: 'scrollable',\n      gridHeight: '630px',\n      isActionRequired: true,\n      addRecord: event => this.getSampleDetails(event, addReleaseTestAttachment, \"create\"),\n      isToolBarRequired: true,\n      methodUrl: 'ReleaseTestAttachment',\n      isAddRequired: this.props.isAddRequired,\n      isRefreshRequired: this.props.isRefreshRequired,\n      isImportRequired: this.props.isImportRequired,\n      isDownloadPDFRequired: this.props.isDownloadPDFRequired,\n      isDownloadExcelRequired: this.props.isDownloadExcelRequired,\n      fetchRecord: event => {\n        this.getSampleDetails(event, editReleaseTestAttachment, \"update\");\n      },\n      deleteRecord: this.deleteRecord,\n      viewDownloadFile: this.viewReleaseTestAttachmentFile,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 25\n      }\n    }))), this.state.openModal ? /*#__PURE__*/React.createElement(SlideOutModal, {\n      show: this.state.openModal,\n      size: \"xl\",\n      closeModal: this.closeModal,\n      operation: this.state.operation,\n      inputParam: this.state.inputParam,\n      screenName: this.props.intl.formatMessage({\n        id: \"IDS_TESTATTACHMENTS\"\n      }),\n      onSaveClick: this.onSaveClick,\n      esign: this.state.loadEsign,\n      validateEsign: this.validateEsign,\n      selectedRecord: this.state.selectedRecord || {},\n      mandatoryFields: mandatoryFields,\n      addComponent: this.state.loadEsign ? /*#__PURE__*/React.createElement(Esign, {\n        operation: this.state.operation,\n        onInputOnChange: this.onInputOnChange,\n        inputParam: this.state.inputParam,\n        selectedRecord: this.state.selectedRecord || {},\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 29\n        }\n      }) : /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(Col, {\n        md: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 37\n        }\n      }, /*#__PURE__*/React.createElement(DropZone, {\n        name: \"AttachmentFile\",\n        label: this.props.intl.formatMessage({\n          id: \"IDS_FILE\"\n        }),\n        isMandatory: true,\n        accept: this.state.selectedRecord && this.state.selectedRecord.nneedreport === transactionStatus.YES ? this.props.settings && this.props.settings[32] : \"\",\n        maxFiles: this.state.operation === \"update\" ? 1 : 3,\n        minSize: 0,\n        maxSize: this.props.maxSize,\n        onDrop: event => this.onDrop(event, 'sfilename', 1),\n        deleteAttachment: this.deleteAttachment,\n        actionType: this.actionType,\n        fileNameLength: this.fileNameLength,\n        editFiles: this.state.selectedRecord ? this.state.selectedRecord : {},\n        attachmentTypeCode: this.state.selectedRecord && this.state.selectedRecord.selectedAttachmentFile && this.state.selectedRecord.selectedAttachmentFile.nattachmenttypecode,\n        fileSizeName: \"nfilesize\",\n        fileName: \"sfilename\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 41\n        }\n      })), /*#__PURE__*/React.createElement(Col, {\n        md: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 193,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(FormSelectSearch, {\n        formLabel: this.props.intl.formatMessage({\n          id: \"IDS_ARNUMBER\"\n        }),\n        isSearchable: true,\n        name: \"npreregno\",\n        isDisabled: this.state.operation === \"create\" ? false : true,\n        placeholder: this.props.intl.formatMessage({\n          id: \"IDS_SELECTRECORD\"\n        }),\n        isMandatory: true,\n        options: this.state.selectedRecord ? this.state.selectedRecord.RegistrationArno : [],\n        optionId: \"npreregno\",\n        optionValue: \"sarno\",\n        value: this.state.selectedRecord ? this.state.selectedRecord.npreregno : \"\",\n        onChange: event => this.onComboChange(event, 'npreregno'),\n        closeMenuOnSelect: true,\n        alphabeticalSort: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 37\n        }\n      })), /*#__PURE__*/React.createElement(Col, {\n        md: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 211,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(FormSelectSearch, {\n        formLabel: this.props.intl.formatMessage({\n          id: \"IDS_SAMPLEARNO\"\n        }),\n        isSearchable: true,\n        name: \"ntransactionsamplecode\",\n        isDisabled: this.state.operation === \"create\" ? false : true,\n        placeholder: this.props.intl.formatMessage({\n          id: \"IDS_SELECTRECORD\"\n        }),\n        isMandatory: true,\n        options: this.state.selectedRecord ? this.state.selectedRecord.RegistrationSampleArno : [],\n        optionId: \"ntransactionsamplecode\",\n        optionValue: \"ssamplearno\",\n        value: this.state.selectedRecord ? this.state.selectedRecord.ntransactionsamplecode : \"\",\n        onChange: event => this.onComboChange(event, 'ntransactionsamplecode'),\n        closeMenuOnSelect: true,\n        alphabeticalSort: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 212,\n          columnNumber: 37\n        }\n      })), /*#__PURE__*/React.createElement(Col, {\n        md: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 229,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(FormSelectSearch, {\n        formLabel: this.props.intl.formatMessage({\n          id: \"IDS_TESTSYNONYM\"\n        }),\n        isSearchable: true,\n        name: \"ntransactiontestcode\",\n        isDisabled: this.state.operation === \"create\" ? false : true,\n        placeholder: this.props.intl.formatMessage({\n          id: \"IDS_SELECTRECORD\"\n        }),\n        isMandatory: true,\n        options: this.state.selectedRecord ? this.state.selectedRecord.RegistrationTest : [],\n        optionId: \"ntransactiontestcode\",\n        optionValue: \"stestsynonym\",\n        value: this.state.selectedRecord ? this.state.selectedRecord.ntransactiontestcode : \"\",\n        onChange: event => this.onComboChange(event, 'ntransactiontestcode'),\n        closeMenuOnSelect: true,\n        alphabeticalSort: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 230,\n          columnNumber: 37\n        }\n      })), /*#__PURE__*/React.createElement(Col, {\n        md: \"12\",\n        className: \"mt-4\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 247,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(FormTextarea, {\n        name: sdescrption,\n        label: this.props.intl.formatMessage({\n          id: \"IDS_DESCRIPTION\"\n        }),\n        onChange: event => this.onInputOnChange(event, 1),\n        placeholder: this.props.intl.formatMessage({\n          id: \"IDS_DESCRIPTION\"\n        }),\n        value: this.state.selectedRecord && this.state.selectedRecord[sdescrption] ? this.state.selectedRecord[sdescrption] : \"\",\n        rows: \"2\",\n        required: false,\n        maxLength: 255,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 248,\n          columnNumber: 37\n        }\n      })), /*#__PURE__*/React.createElement(Col, {\n        md: \"12\",\n        className: \"mt-4\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 261,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(CustomSwitch, {\n        label: this.props.intl.formatMessage({\n          id: \"IDS_INCULDEINREPORT\"\n        }),\n        type: \"switch\",\n        name: \"nneedreport\",\n        onChange: event => this.onInputOnChange(event, 1),\n        defaultValue: false,\n        isMandatory: false,\n        required: true,\n        checked: this.state.selectedRecord ? this.state.selectedRecord.nneedreport === transactionStatus.YES ? true : false : false,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 262,\n          columnNumber: 37\n        }\n      }))),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 21\n      }\n    }) : \"\");\n  }\n\n}\n\nexport default connect(null, {\n  viewAttachment\n})(injectIntl(ReleaseTestAttachment));","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/pages/release/ReleaseTestAttachment.jsx"],"names":["React","Col","Row","injectIntl","DropZone","attachmentType","transactionStatus","deleteAttachmentDropZone","onDropAttachFileList","viewAttachment","connect","DataGrid","SlideOutModal","process","CustomSwitch","FormTextarea","FormSelectSearch","Esign","rsapi","toast","create_UUID","Lims_JSON_stringify","showEsign","ReleaseTestAttachment","Component","constructor","props","closeModal","loadEsign","state","openModal","selectedRecord","operation","undefined","setState","getSampleDetails","event","ncontrolCode","url","masterData","selectedReleaseHistory","ntransactionstatus","RELEASED","post","editRow","ncoaparentcode","npreregno","ntransactionsamplecode","ntransactiontestcode","nreleasetestattachmentcode","userInfo","then","response","responseData","data","selectedReleaseTestAttachment","nneedreport","NO","sdescription","sfilename","sarno","ssamplearno","stestsynonym","RegistrationArno","map","item","value","label","RegistrationSampleArno","RegistrationTest","warn","intl","formatMessage","id","catch","error","status","message","loading","ReleaseTestAttachmentDetails","deleteRecord","deleteParam","releasetestattachment","onComboChange","comboData","fieldName","lstRegistrationSampleArno","lstRegistrationTest","push","onInputOnChange","target","name","type","checked","YES","length","fileFormat","requiredFileFormat","settings","split","fileNameSplit","Array","isArray","slice","onDrop","attachedFiles","maxSize","deleteAttachment","file","dataStateChange","dataState","dataResult","viewReleaseTestAttachmentFile","filedata","inputData","userinfo","inputParam","ncontrolcode","classUrl","methodUrl","onSaveClick","saveType","formRef","formData","FormData","acceptedFiles","isFileEdited","fileArray","forEach","index","splittedFileName","fileExtension","fileName","ssystemfilename","uniquefilename","tempData","nformcode","nusercode","nuserrole","susername","suserrolename","nfilesize","size","replaceAll","trim","slinkname","append","JSON","stringify","FTP","sformname","smodulename","slanguagename","isFileupload","requestUrl","skip","take","parseInt","isneedReport","componentDidUpdate","prevProps","render","addReleaseTestAttachment","controlMap","has","get","editReleaseTestAttachment","editReleaseTestAttachmentParam","screenName","primaryKeyField","fieldsForReleasedTestAttachmentGrid","mandatoryFields","sdescrption","nattachmenttypecode","LINK","userRoleControlRights","isAddRequired","isRefreshRequired","isImportRequired","isDownloadPDFRequired","isDownloadExcelRequired","validateEsign","actionType","fileNameLength","selectedAttachmentFile"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { Col, Row } from 'react-bootstrap';\r\nimport { injectIntl } from 'react-intl';\r\nimport DropZone from '../../components/dropzone/dropzone.component';\r\nimport { attachmentType, transactionStatus } from '../../components/Enumeration';\r\nimport { deleteAttachmentDropZone, onDropAttachFileList } from '../../components/CommonScript';\r\nimport { viewAttachment } from '../../actions';\r\nimport { connect } from 'react-redux';\r\nimport DataGrid from '../../components/data-grid/data-grid.component';\r\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\r\nimport { process } from '@progress/kendo-data-query';\r\nimport CustomSwitch from '../../components/custom-switch/custom-switch.component';\r\nimport FormTextarea from '../../components/form-textarea/form-textarea.component';\r\nimport FormSelectSearch from '../../components/form-select-search/form-select-search.component';\r\nimport Esign from '../audittrail/Esign';\r\nimport rsapi from '../../rsapi';\r\nimport { toast } from 'react-toastify';\r\nimport { create_UUID, Lims_JSON_stringify, showEsign } from \"../../components/CommonScript\";\r\n\r\nclass ReleaseTestAttachment extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        const dataState = {\r\n            skip: 0,\r\n            take: this.props.settings ? parseInt(this.props.settings[14]) : 5,\r\n        };\r\n        this.state = {\r\n            loading: false,\r\n            ReleaseTestAttachmentDetails: this.props.ReleaseTestAttachmentDetails,\r\n            dataState: dataState,\r\n            openModal: false,\r\n            inputParam: this.props.inputParam,\r\n            loadEsign: false,\r\n            operation: \"\",\r\n            selectedRecord: {},\r\n            isneedReport: this.props.isneedReport\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (this.props.ReleaseTestAttachmentDetails !== prevProps.ReleaseTestAttachmentDetails) {\r\n            this.setState({ ReleaseTestAttachmentDetails: this.props.ReleaseTestAttachmentDetails })\r\n        }\r\n        if (this.props.inputParam !== prevProps.inputParam) {\r\n            this.setState({ inputParam: this.props.inputParam })\r\n        }\r\n\r\n    }\r\n\r\n    closeModal = () => {\r\n        let loadEsign = this.state.loadEsign;\r\n        let openModal = this.state.openModal\r\n        let selectedRecord = this.state.selectedRecord;\r\n        let operation = this.state.operation;\r\n        if (this.state.loadEsign) {\r\n            if (this.state.operation === \"delete\") {\r\n                loadEsign = false;\r\n                openModal = false;\r\n                selectedRecord = {};\r\n                operation = undefined;\r\n            }\r\n            else {\r\n                loadEsign = false;\r\n                selectedRecord[\"esigncomments\"] = \"\";\r\n                selectedRecord[\"esignpassword\"] = \"\";\r\n                selectedRecord['esignreason'] = '';\r\n            }\r\n        }\r\n        else {\r\n            openModal = false;\r\n            selectedRecord = {};\r\n        }\r\n        this.setState({ loadEsign, openModal, selectedRecord, operation })\r\n    }\r\n\r\n    render() {\r\n        const addReleaseTestAttachment =\r\n            this.props.controlMap.has(\"AddReleaseTestAttachment\") &&\r\n            this.props.controlMap.get(\"AddReleaseTestAttachment\").ncontrolcode;\r\n\r\n        const editReleaseTestAttachment =\r\n            this.props.controlMap.has(\"EditReleaseTestAttachment\") &&\r\n            this.props.controlMap.get(\"EditReleaseTestAttachment\").ncontrolcode;\r\n\r\n        const editReleaseTestAttachmentParam = {\r\n            screenName: this.props.intl.formatMessage({ id: \"IDS_RELEASETESTATTACHMENT\" }),\r\n            operation: \"update\", primaryKeyField: \"nreleasetestattachmentcode\",\r\n            inputParam: this.state.inputParam,\r\n            userInfo: this.props.userInfo,\r\n            ncontrolCode: editReleaseTestAttachment\r\n        };\r\n\r\n        this.fieldsForReleasedTestAttachmentGrid =\r\n            [\r\n                { \"idsName\": \"IDS_FILENAME\", \"dataField\": \"sfilename\", \"width\": \"200px\" },\r\n                { \"idsName\": \"IDS_ARNO\", \"dataField\": \"sarno\", \"width\": \"200px\" },\r\n                { \"idsName\": \"IDS_SAMPLEARNO\", \"dataField\": \"ssamplearno\", \"width\": \"200px\" },\r\n                { \"idsName\": \"IDS_TESTSYNONYM\", \"dataField\": \"stestsynonym\", \"width\": \"200px\" },\r\n                { \"idsName\": \"IDS_SCREENNAME\", \"dataField\": \"sformname\", \"width\": \"200px\" },\r\n                { \"idsName\": \"IDS_DESCRIPTION\", \"dataField\": \"sdescription\", \"width\": \"200px\" },\r\n                { \"idsName\": \"IDS_INCULDEINREPORT\", \"dataField\": \"sneedreport\", \"width\": \"200px\" },\r\n                { \"idsName\": \"IDS_USERNAME\", \"dataField\": \"susername\", \"width\": \"200px\" },\r\n                { \"idsName\": \"IDS_USERROLENAME\", \"dataField\": \"suserrolename\", \"width\": \"200px\" },\r\n                { \"idsName\": \"IDS_CREATEDDATE\", \"dataField\": \"screateddate\", \"width\": \"200px\" },\r\n\r\n            ]\r\n\r\n        let mandatoryFields = [\r\n            { \"idsName\": \"IDS_FILE\", \"dataField\": \"sfilename\", \"mandatoryLabel\": \"IDS_CHOOSE\", \"controlType\": \"file\" },\r\n            { \"idsName\": \"IDS_ARNUMBER\", \"dataField\": \"sarno\", \"mandatoryLabel\": \"IDS_CHOOSE\", \"controlType\": \"file\" },\r\n            { \"idsName\": \"IDS_SAMPLEARNO\", \"dataField\": \"ssamplearno\", \"mandatoryLabel\": \"IDS_CHOOSE\", \"controlType\": \"file\" },\r\n            { \"idsName\": \"IDS_TESTSYNONYM\", \"dataField\": \"stestsynonym\", \"mandatoryLabel\": \"IDS_CHOOSE\", \"controlType\": \"file\" }\r\n        ];\r\n\r\n        const sdescrption = this.state.selectedRecord && this.state.selectedRecord.nattachmenttypecode === attachmentType.LINK ? \"slinkdescription\" : \"sdescription\";\r\n        return (\r\n            <>\r\n                <Row>\r\n                    <Col>\r\n                        <DataGrid\r\n                            primaryKeyField=\"nreleasetestattachmentcode\"\r\n                            data={this.state.ReleaseTestAttachmentDetails || []}\r\n                            dataResult={process(this.state.ReleaseTestAttachmentDetails && this.state.ReleaseTestAttachmentDetails || [], this.state.dataState)}\r\n                            dataState={this.state.dataState}\r\n                            isExportExcelRequired={false}\r\n                            controlMap={this.props.controlMap}\r\n                            userRoleControlRights={this.props.userRoleControlRights}\r\n                            userInfo={this.props.userInfo}\r\n                            editParam={editReleaseTestAttachmentParam}\r\n                            extractedColumnList={this.fieldsForReleasedTestAttachmentGrid}\r\n                            pageable={true}\r\n                            dataStateChange={this.dataStateChange}\r\n                            scrollable={'scrollable'}\r\n                            gridHeight={'630px'}\r\n                            isActionRequired={true}\r\n                            addRecord={(event) => this.getSampleDetails(event, addReleaseTestAttachment, \"create\")}\r\n                            isToolBarRequired={true}\r\n                            methodUrl={'ReleaseTestAttachment'}\r\n                            isAddRequired={this.props.isAddRequired}\r\n                            isRefreshRequired={this.props.isRefreshRequired}\r\n                            isImportRequired={this.props.isImportRequired}\r\n                            isDownloadPDFRequired={this.props.isDownloadPDFRequired}\r\n                            isDownloadExcelRequired={this.props.isDownloadExcelRequired}\r\n                            fetchRecord={(event) => { this.getSampleDetails(event, editReleaseTestAttachment, \"update\") }}\r\n                            deleteRecord={this.deleteRecord}\r\n                            viewDownloadFile={this.viewReleaseTestAttachmentFile}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n\r\n                {this.state.openModal ?\r\n                    <SlideOutModal show={this.state.openModal}\r\n                        size={\"xl\"}\r\n                        closeModal={this.closeModal}\r\n                        operation={this.state.operation}\r\n                        inputParam={this.state.inputParam}\r\n                        screenName={this.props.intl.formatMessage({ id: \"IDS_TESTATTACHMENTS\" })}\r\n                        onSaveClick={this.onSaveClick}\r\n                        esign={this.state.loadEsign}\r\n                        validateEsign={this.validateEsign}\r\n                        selectedRecord={this.state.selectedRecord || {}}\r\n                        mandatoryFields={mandatoryFields}\r\n                        addComponent={this.state.loadEsign ?\r\n                            <Esign operation={this.state.operation}\r\n                                onInputOnChange={this.onInputOnChange}\r\n                                inputParam={this.state.inputParam}\r\n                                selectedRecord={this.state.selectedRecord || {}}\r\n                            />\r\n                            :\r\n                            <Row>\r\n                                {\r\n                                    <Col md={12}>\r\n                                        <DropZone\r\n                                            name='AttachmentFile'\r\n                                            label={this.props.intl.formatMessage({ id: \"IDS_FILE\" })}\r\n                                            isMandatory={true}\r\n                                            accept={this.state.selectedRecord && this.state.selectedRecord.nneedreport === transactionStatus.YES ? this.props.settings && this.props.settings[32] : \"\"}\r\n                                            maxFiles={this.state.operation === \"update\" ? 1 : 3}\r\n                                            minSize={0}\r\n                                            maxSize={this.props.maxSize}\r\n                                            onDrop={(event) => this.onDrop(event, 'sfilename', 1)}\r\n                                            deleteAttachment={this.deleteAttachment}\r\n                                            actionType={this.actionType}\r\n                                            fileNameLength={this.fileNameLength}\r\n                                            editFiles={this.state.selectedRecord ? this.state.selectedRecord : {}}\r\n                                            attachmentTypeCode={this.state.selectedRecord && this.state.selectedRecord.selectedAttachmentFile && this.state.selectedRecord.selectedAttachmentFile.nattachmenttypecode}\r\n                                            fileSizeName=\"nfilesize\"\r\n                                            fileName=\"sfilename\"\r\n                                        />\r\n                                    </Col>\r\n                                }\r\n\r\n                                <Col md={12}>\r\n                                    <FormSelectSearch\r\n                                        formLabel={this.props.intl.formatMessage({ id: \"IDS_ARNUMBER\" })}\r\n                                        isSearchable={true}\r\n                                        name={\"npreregno\"}\r\n                                        isDisabled={this.state.operation === \"create\" ? false : true}\r\n                                        placeholder={this.props.intl.formatMessage({ id: \"IDS_SELECTRECORD\" })}\r\n                                        isMandatory={true}\r\n                                        options={this.state.selectedRecord ? this.state.selectedRecord.RegistrationArno : []}\r\n                                        optionId='npreregno'\r\n                                        optionValue='sarno'\r\n                                        value={this.state.selectedRecord ? this.state.selectedRecord.npreregno : \"\"}\r\n                                        onChange={(event) => this.onComboChange(event, 'npreregno')}\r\n                                        closeMenuOnSelect={true}\r\n                                        alphabeticalSort={true}\r\n                                    />\r\n                                </Col>\r\n\r\n                                <Col md={12}>\r\n                                    <FormSelectSearch\r\n                                        formLabel={this.props.intl.formatMessage({ id: \"IDS_SAMPLEARNO\" })}\r\n                                        isSearchable={true}\r\n                                        name={\"ntransactionsamplecode\"}\r\n                                        isDisabled={this.state.operation === \"create\" ? false : true}\r\n                                        placeholder={this.props.intl.formatMessage({ id: \"IDS_SELECTRECORD\" })}\r\n                                        isMandatory={true}\r\n                                        options={this.state.selectedRecord ? this.state.selectedRecord.RegistrationSampleArno : []}\r\n                                        optionId='ntransactionsamplecode'\r\n                                        optionValue='ssamplearno'\r\n                                        value={this.state.selectedRecord ? this.state.selectedRecord.ntransactionsamplecode : \"\"}\r\n                                        onChange={(event) => this.onComboChange(event, 'ntransactionsamplecode')}\r\n                                        closeMenuOnSelect={true}\r\n                                        alphabeticalSort={true}\r\n                                    />\r\n                                </Col>\r\n\r\n                                <Col md={12}>\r\n                                    <FormSelectSearch\r\n                                        formLabel={this.props.intl.formatMessage({ id: \"IDS_TESTSYNONYM\" })}\r\n                                        isSearchable={true}\r\n                                        name={\"ntransactiontestcode\"}\r\n                                        isDisabled={this.state.operation === \"create\" ? false : true}\r\n                                        placeholder={this.props.intl.formatMessage({ id: \"IDS_SELECTRECORD\" })}\r\n                                        isMandatory={true}\r\n                                        options={this.state.selectedRecord ? this.state.selectedRecord.RegistrationTest : []}\r\n                                        optionId='ntransactiontestcode'\r\n                                        optionValue='stestsynonym'\r\n                                        value={this.state.selectedRecord ? this.state.selectedRecord.ntransactiontestcode : \"\"}\r\n                                        onChange={(event) => this.onComboChange(event, 'ntransactiontestcode')}\r\n                                        closeMenuOnSelect={true}\r\n                                        alphabeticalSort={true}\r\n                                    />\r\n                                </Col>\r\n\r\n                                <Col md=\"12\" className=\"mt-4\">\r\n                                    <FormTextarea\r\n                                        name={sdescrption}\r\n                                        label={this.props.intl.formatMessage({ id: \"IDS_DESCRIPTION\" })}\r\n                                        onChange={(event) => this.onInputOnChange(event, 1)}\r\n                                        placeholder={this.props.intl.formatMessage({ id: \"IDS_DESCRIPTION\" })}\r\n                                        value={this.state.selectedRecord && this.state.selectedRecord[sdescrption] ? this.state.selectedRecord[sdescrption] : \"\"}\r\n                                        rows=\"2\"\r\n                                        required={false}\r\n                                        maxLength={255}\r\n                                    >\r\n                                    </FormTextarea>\r\n                                </Col>\r\n\r\n                                <Col md=\"12\" className=\"mt-4\">\r\n                                    <CustomSwitch\r\n                                        label={this.props.intl.formatMessage({ id: \"IDS_INCULDEINREPORT\" })}\r\n                                        type=\"switch\"\r\n                                        name={\"nneedreport\"}\r\n                                        onChange={(event) => this.onInputOnChange(event, 1)}\r\n                                        defaultValue={false}\r\n                                        isMandatory={false}\r\n                                        required={true}\r\n                                        checked={this.state.selectedRecord ? this.state.selectedRecord.nneedreport === transactionStatus.YES ? true : false : false}\r\n                                    />\r\n                                </Col>\r\n                                {/* : \"\"} */}\r\n\r\n                            </Row>\r\n                        }\r\n                    /> : \"\"}\r\n            </>\r\n        );\r\n    };\r\n\r\n    getSampleDetails = (event, ncontrolCode, operation) => {\r\n        const url = \"release/getActiveReleaseTestAttachmentById\";\r\n        let openModal = true;\r\n        if (this.props.masterData.selectedReleaseHistory.ntransactionstatus !== transactionStatus.RELEASED) {\r\n            if (operation === \"update\") {\r\n                rsapi.post(url, {\r\n                    \"ncoaparentcode\": event.editRow.ncoaparentcode,\r\n                    \"npreregno\": event.editRow.npreregno,\r\n                    \"ntransactionsamplecode\": event.editRow.ntransactionsamplecode,\r\n                    \"ntransactiontestcode\": event.editRow.ntransactiontestcode,\r\n                    \"nreleasetestattachmentcode\": event.editRow.nreleasetestattachmentcode,\r\n                    \"userinfo\": this.props.userInfo\r\n                })\r\n                    .then(response => {\r\n                        let responseData = response.data;\r\n                        if (responseData.ntransactionstatus !== transactionStatus.RELEASED) {\r\n                            let selectedReleaseTestAttachment = event.editRow;\r\n                            let masterData = this.props.masterData;\r\n                            let nneedreport = responseData && responseData.nneedreport ? responseData.nneedreport : transactionStatus.NO;\r\n                            let sdescription = responseData && responseData.sdescription ? responseData.sdescription : \"\";\r\n                            let sfilename = event.editRow && event.editRow.sfilename;\r\n                            let npreregno;\r\n                            let ntransactionsamplecode;\r\n                            let ntransactiontestcode;\r\n                            let sarno;\r\n                            let ssamplearno;\r\n                            let stestsynonym;\r\n                            masterData.RegistrationArno.map(item => {\r\n                                if (item.value === responseData.npreregno) {\r\n                                    npreregno = item;\r\n                                    sarno = item.label;\r\n                                }\r\n                            });\r\n                            masterData.RegistrationSampleArno.map(item => {\r\n                                if (item.value === responseData.ntransactionsamplecode) {\r\n                                    ntransactionsamplecode = item;\r\n                                    ssamplearno = item.label;\r\n                                }\r\n                            });\r\n                            masterData.RegistrationTest.map(item => {\r\n                                if (item.value === responseData.ntransactiontestcode) {\r\n                                    ntransactiontestcode = item;\r\n                                    stestsynonym = item.label;\r\n                                }\r\n                            });\r\n\r\n                            let selectedRecord = {\r\n                                ...this.state.selectedRecord, npreregno, ntransactionsamplecode, ntransactiontestcode, sfilename, sarno, ssamplearno, stestsynonym, nneedreport, sdescription, selectedReleaseTestAttachment\r\n                            };\r\n                            this.setState({\r\n                                selectedRecord, openModal, operation, ncontrolCode\r\n                            });\r\n                        } else {\r\n                            toast.warn(this.props.intl.formatMessage({ id: \"IDS_RECORDALREADYRELEASED\" }));\r\n                        }\r\n                    }).catch(error => {\r\n                        if (error.response.status === 500) {\r\n                            toast.error(error.message);\r\n                        } else {\r\n                            toast.warn(error.response.data);\r\n                        }\r\n                        this.setState({\r\n                            loading: false\r\n                        });\r\n                    });\r\n            } else {\r\n                let RegistrationArno = this.props.masterData.RegistrationArno;\r\n                let selectedRecord = {\r\n                    RegistrationArno: RegistrationArno,\r\n                    ReleaseTestAttachmentDetails: this.props.masterData.ReleaseTestAttachmentDetails,\r\n                    nneedreport: transactionStatus.NO\r\n                };\r\n                this.setState({\r\n                    selectedRecord, openModal, operation, ncontrolCode\r\n                });\r\n            }\r\n        } else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_RECORDALREADYRELEASED\" }));\r\n        }\r\n    }\r\n\r\n    deleteRecord = (deleteParam) => {\r\n        const url = \"release/deleteReleaseTestAttachment\";\r\n        if (this.props.masterData.selectedReleaseHistory.ntransactionstatus !== transactionStatus.RELEASED) {\r\n            let releasetestattachment = {\r\n                \"ncoaparentcode\": deleteParam.selectedRecord.ncoaparentcode,\r\n                \"npreregno\": deleteParam.selectedRecord.npreregno,\r\n                \"ntransactionsamplecode\": deleteParam.selectedRecord.ntransactionsamplecode,\r\n                \"ntransactiontestcode\": deleteParam.selectedRecord.ntransactiontestcode,\r\n                \"nreleasetestattachmentcode\": deleteParam.selectedRecord.nreleasetestattachmentcode\r\n            }\r\n            rsapi.post(url, {\r\n                releasetestattachment, \"userinfo\": this.props.userInfo\r\n            })\r\n                .then(response => {\r\n                    let ReleaseTestAttachmentDetails = response.data.ReleaseTestAttachmentDetails;\r\n                    let selectedRecord = {\r\n                        ...this.state.selectedRecord, ...response.data\r\n                    };\r\n                    this.setState({\r\n                        selectedRecord, ReleaseTestAttachmentDetails\r\n                    });\r\n                }).catch(error => {\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    } else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                    this.setState({\r\n                        loading: false\r\n                    });\r\n                });\r\n        } else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_RECORDALREADYRELEASED\" }));\r\n        }\r\n    }\r\n\r\n    onComboChange = (comboData, fieldName) => {\r\n        let selectedRecord = this.state.selectedRecord || {};\r\n        let lstRegistrationSampleArno = this.props.masterData.RegistrationSampleArno;\r\n        let lstRegistrationTest = this.props.masterData.RegistrationTest;\r\n        let RegistrationSampleArno = [];\r\n        let RegistrationTest = [];\r\n        let ntransactionsamplecode = \"\";\r\n        let ntransactiontestcode = \"\";\r\n        let ssamplearno = null;\r\n        let stestsynonym = null;\r\n        if (fieldName === \"npreregno\") {\r\n            lstRegistrationSampleArno.map(item => {\r\n                if (item.item.npreregno === comboData.value) {\r\n                    RegistrationSampleArno.push(item);\r\n                }\r\n            });\r\n            let npreregno = {\r\n                item: comboData.item,\r\n                label: comboData.label,\r\n                value: comboData.value\r\n            };\r\n            let sarno = comboData.item.sarno;\r\n            selectedRecord = {\r\n                ...selectedRecord, RegistrationSampleArno, RegistrationTest, npreregno\r\n                , sarno, ntransactionsamplecode, ntransactiontestcode, ssamplearno, stestsynonym\r\n            };\r\n            this.setState({ selectedRecord });\r\n        } else if (fieldName === \"ntransactionsamplecode\") {\r\n            lstRegistrationTest.map(item => {\r\n                if (item.item.ntransactionsamplecode === comboData.value) {\r\n                    RegistrationTest.push(item);\r\n                }\r\n            });\r\n            ntransactionsamplecode = {\r\n                item: comboData.item,\r\n                label: comboData.label,\r\n                value: comboData.value\r\n            }\r\n            ssamplearno = comboData.item.ssamplearno;\r\n            selectedRecord = {\r\n                ...selectedRecord, RegistrationTest, ntransactionsamplecode\r\n                , ssamplearno, ntransactiontestcode, stestsynonym\r\n            };\r\n            this.setState({ selectedRecord });\r\n        } else if (fieldName === \"ntransactiontestcode\") {\r\n            ntransactiontestcode = {\r\n                item: comboData.item,\r\n                label: comboData.label,\r\n                value: comboData.value\r\n            }\r\n            stestsynonym = comboData.item.stestsynonym;\r\n            selectedRecord = {\r\n                ...selectedRecord, ntransactiontestcode\r\n                , stestsynonym\r\n            }\r\n            this.setState({ selectedRecord });\r\n        }\r\n    }\r\n\r\n    onInputOnChange = (event) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        selectedRecord[event.target.name] = event.target.value;\r\n        if (event.target.type === 'checkbox') {\r\n            if (event.target.name === \"nneedreport\") {\r\n                selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\r\n            }\r\n        }\r\n        else {\r\n            selectedRecord[event.target.name] = event.target.value;\r\n        }\r\n        if (selectedRecord[\"nneedreport\"] && selectedRecord[\"nneedreport\"] === transactionStatus.YES && selectedRecord[\"sfilename\"] !== undefined && selectedRecord[\"sfilename\"].length > 0) {\r\n            let fileFormat = false;\r\n            let requiredFileFormat = this.props.settings && this.props.settings[32] && this.props.settings[32].split(\",\");\r\n            let fileNameSplit = selectedRecord[\"sfilename\"] && Array.isArray(selectedRecord[\"sfilename\"]) ? selectedRecord[\"sfilename\"][0].name.split(\".\") : selectedRecord[\"sfilename\"].split(\".\");\r\n            requiredFileFormat.map(item => {\r\n                if (item.slice(1) === fileNameSplit[fileNameSplit.length - 1]) {\r\n                    fileFormat = true;\r\n                }\r\n            });\r\n            selectedRecord[\"nneedreport\"] = fileFormat ? selectedRecord[\"nneedreport\"] : transactionStatus.NO;\r\n            !fileFormat && toast.warn(this.props.intl.formatMessage({ id: \"IDS_REPORTSUPPORTSONLYFILEFORMATS\" }));\r\n        }\r\n        this.setState({ selectedRecord })\r\n    }\r\n\r\n    onDrop = (attachedFiles, fieldName, maxSize) => {\r\n        let selectedRecord = this.state.selectedRecord || {};\r\n        selectedRecord[fieldName] = onDropAttachFileList(selectedRecord[fieldName], attachedFiles, maxSize)\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    deleteAttachment = (event, file, fieldName) => {\r\n        let selectedRecord = this.state.selectedRecord || {};\r\n        selectedRecord[fieldName] = deleteAttachmentDropZone(selectedRecord[fieldName], file)\r\n        this.setState({\r\n            selectedRecord\r\n        });\r\n    }\r\n\r\n    dataStateChange = (event) => {\r\n        this.setState({ dataState: event.dataState, dataResult: process(this.state.ReleaseTestAttachmentDetails, event.dataState) })\r\n    }\r\n\r\n    viewReleaseTestAttachmentFile = (filedata) => {\r\n        delete (filedata.inputData.userinfo);\r\n        const inputParam = {\r\n            inputData: {\r\n                releasetestattachment: filedata.inputData,\r\n                userinfo: this.props.userInfo,\r\n                ncontrolcode: filedata.ncontrolCode\r\n            },\r\n            classUrl: \"release\",\r\n            operation: \"view\",\r\n            methodUrl: \"ReleaseTestAttachment\",\r\n        }\r\n        this.props.viewAttachment(inputParam);\r\n    }\r\n\r\n    onSaveClick = (saveType, formRef) => {\r\n        if (this.state.loading === false) {\r\n            this.setState({ loading: true });\r\n            const formData = new FormData();\r\n            const selectedRecord = this.state.selectedRecord;\r\n            const acceptedFiles = selectedRecord.sfilename;\r\n            const userInfo = this.props.userInfo;\r\n            let isFileEdited = transactionStatus.NO;\r\n            let fileArray = [];\r\n            if (acceptedFiles && Array.isArray(acceptedFiles) && acceptedFiles.length > 0) {\r\n                if (this.state.operation === 'create') {\r\n                    acceptedFiles.forEach((file, index) => {\r\n                        const splittedFileName = file.name.split('.');\r\n                        const fileExtension = file.name.split('.')[splittedFileName.length - 1];\r\n                        const fileName = selectedRecord.ssystemfilename && selectedRecord.ssystemfilename !== \"\" ?\r\n                            selectedRecord.ssystemfilename.split('.')[0] : create_UUID();\r\n                        const uniquefilename = fileName + '.' + fileExtension;\r\n                        const tempData = {};\r\n                        tempData[\"nformcode\"] = userInfo.nformcode;\r\n                        tempData[\"npreregno\"] = selectedRecord.npreregno.value;\r\n                        tempData[\"ntransactionsamplecode\"] = selectedRecord.ntransactionsamplecode.value;\r\n                        tempData[\"ntransactiontestcode\"] = selectedRecord.ntransactiontestcode.value;\r\n                        tempData[\"ncoaparentcode\"] = this.props.masterData.ncoaparentcode;\r\n                        tempData[\"nusercode\"] = userInfo.nusercode;\r\n                        tempData[\"nuserrolecode\"] = userInfo.nuserrole;\r\n                        tempData[\"jsondata\"] = {\r\n                            stestsynonym: selectedRecord.ntransactiontestcode.label,\r\n                            susername: userInfo.susername,\r\n                            suserrolename: userInfo.suserrolename,\r\n                            nfilesize: file.size,\r\n                            ssystemfilename: uniquefilename,\r\n                            sfilename: Lims_JSON_stringify(file.name.replaceAll('\\\\', '\\\\\\\\\\\\\\\\').replaceAll('\\n', '\\\\\\\\n').replaceAll('\"', '\\\\\"').trim(), false),\r\n                            slinkname: \"\",\r\n                            sdescription: Lims_JSON_stringify(selectedRecord.sdescription ? selectedRecord.sdescription.replaceAll('\\\\', '\\\\\\\\\\\\\\\\').replaceAll('\\n', '\\\\\\\\n').replaceAll('\"', '\\\\\"').trim() : \"\", false),\r\n                            nneedreport: selectedRecord.nneedreport ? selectedRecord.nneedreport : transactionStatus.NO\r\n                        }\r\n                        formData.append(\"uploadedFile\" + index, file);\r\n                        formData.append(\"uniquefilename\" + index, uniquefilename);\r\n                        fileArray.push(tempData);\r\n                    });\r\n                    formData.append(\"filecount\", acceptedFiles.length);\r\n                    isFileEdited = transactionStatus.YES;\r\n                } else {\r\n                    acceptedFiles.forEach((file, index) => {\r\n                        const splittedFileName = file.name.split('.');\r\n                        const fileExtension = file.name.split('.')[splittedFileName.length - 1];\r\n                        const fileName = selectedRecord.ssystemfilename && selectedRecord.ssystemfilename !== \"\" ?\r\n                            selectedRecord.ssystemfilename.split('.')[0] : create_UUID();\r\n                        const uniquefilename = fileName + '.' + fileExtension;\r\n                        const tempData = {};\r\n                        tempData[\"nreleasetestattachmentcode\"] = selectedRecord.selectedReleaseTestAttachment && selectedRecord.selectedReleaseTestAttachment.nreleasetestattachmentcode;\r\n                        tempData[\"nformcode\"] = userInfo.nformcode;\r\n                        tempData[\"npreregno\"] = selectedRecord.npreregno.value;\r\n                        tempData[\"ntransactionsamplecode\"] = selectedRecord.ntransactionsamplecode.value;\r\n                        tempData[\"ntransactiontestcode\"] = selectedRecord.ntransactiontestcode.value;\r\n                        tempData[\"ncoaparentcode\"] = this.props.masterData.ncoaparentcode;\r\n                        tempData[\"nusercode\"] = userInfo.nusercode;\r\n                        tempData[\"nuserrolecode\"] = userInfo.nuserrole;\r\n                        tempData[\"jsondata\"] = {\r\n                            stestsynonym: selectedRecord.ntransactiontestcode.label,\r\n                            susername: userInfo.susername,\r\n                            suserrolename: userInfo.suserrolename,\r\n                            nfilesize: file.size,\r\n                            ssystemfilename: uniquefilename,\r\n                            sfilename: Lims_JSON_stringify(file.name.replaceAll('\\\\', '\\\\\\\\\\\\\\\\').replaceAll('\\n', '\\\\\\\\n').replaceAll('\"', '\\\\\"').trim(), false),\r\n                            slinkname: \"\",\r\n                            sdescription: Lims_JSON_stringify(selectedRecord.sdescription ? selectedRecord.sdescription.replaceAll('\\\\', '\\\\\\\\\\\\\\\\').replaceAll('\\n', '\\\\\\\\n').replaceAll('\"', '\\\\\"').trim() : \"\", false),\r\n                            nneedreport: selectedRecord.nneedreport ? selectedRecord.nneedreport : transactionStatus.NO\r\n                        }\r\n                        formData.append(\"uploadedFile\" + index, file);\r\n                        formData.append(\"uniquefilename\" + index, uniquefilename);\r\n                        formData.append(\"filecount\", acceptedFiles.length);\r\n                        isFileEdited = transactionStatus.YES;\r\n\r\n                        fileArray.push(tempData);\r\n                    });\r\n                }\r\n            } else {\r\n                let tempData = {};\r\n                tempData[\"nreleasetestattachmentcode\"] = selectedRecord.selectedReleaseTestAttachment && selectedRecord.selectedReleaseTestAttachment.nreleasetestattachmentcode;\r\n                tempData[\"nformcode\"] = userInfo.nformcode;\r\n                tempData[\"npreregno\"] = selectedRecord.npreregno.value;\r\n                tempData[\"ntransactionsamplecode\"] = selectedRecord.ntransactionsamplecode.value;\r\n                tempData[\"ntransactiontestcode\"] = selectedRecord.ntransactiontestcode.value;\r\n                tempData[\"ncoaparentcode\"] = this.props.masterData.ncoaparentcode;\r\n                tempData[\"nusercode\"] = userInfo.nusercode;\r\n                tempData[\"nuserrolecode\"] = userInfo.nuserrole;\r\n                tempData[\"jsondata\"] = {\r\n                    stestsynonym: selectedRecord.ntransactiontestcode.label,\r\n                    susername: userInfo.susername,\r\n                    suserrolename: userInfo.suserrolename,\r\n                    nfilesize: selectedRecord.size,\r\n                    ssystemfilename: selectedRecord.ssystemfilename,\r\n                    sfilename: Lims_JSON_stringify(acceptedFiles.replaceAll('\\\\', '\\\\\\\\\\\\\\\\').replaceAll('\\n', '\\\\\\\\n').replaceAll('\"', '\\\\\"').trim(), false),\r\n                    slinkname: \"\",\r\n                    sdescription: Lims_JSON_stringify(selectedRecord.sdescription ? selectedRecord.sdescription.replaceAll('\\\\', '\\\\\\\\\\\\\\\\').replaceAll('\\n', '\\\\\\\\n').replaceAll('\"', '\\\\\"').trim() : \"\", false),\r\n                    nneedreport: selectedRecord.nneedreport ? selectedRecord.nneedreport : transactionStatus.NO\r\n                }\r\n                fileArray.push(tempData);\r\n            }\r\n            formData.append(\"isFileEdited\", isFileEdited);\r\n            formData.append(\"releasetestattachment\", JSON.stringify(fileArray));\r\n            formData.append(\"nattachmenttypecode\", attachmentType.FTP);\r\n            formData.append(\"ncoaparentcode\", this.props.masterData.ncoaparentcode);\r\n            formData.append(\"ncontrolcode\", this.state.ncontrolCode);\r\n            formData.append(\"userinfo\", JSON.stringify({\r\n                ...userInfo,\r\n                sformname: Lims_JSON_stringify(userInfo.sformname),\r\n                smodulename: Lims_JSON_stringify(userInfo.smodulename),\r\n                slanguagename: Lims_JSON_stringify(userInfo.slanguagename)\r\n            }));\r\n\r\n            const inputParam = {\r\n                inputData: {\r\n                    \"userinfo\": {\r\n                        ...userInfo,\r\n                        sformname: Lims_JSON_stringify(userInfo.sformname),\r\n                        smodulename: Lims_JSON_stringify(userInfo.smodulename),\r\n                        slanguagename: Lims_JSON_stringify(userInfo.slanguagename)\r\n                    }\r\n                },\r\n                formData: formData,\r\n                isFileupload: true,\r\n                operation: this.state.operation,\r\n                classUrl: \"release\",\r\n                saveType: saveType,\r\n                formRef: formRef,\r\n                methodUrl: \"ReleaseTestAttachment\"\r\n            };\r\n            formData.append(\"userinfo\", JSON.stringify(inputParam.inputData.userinfo));\r\n\r\n            const requestUrl = rsapi.post(\"release/\" + this.state.operation + \"ReleaseTestAttachment\", formData);\r\n            return requestUrl\r\n                .then(response => {\r\n                    let ReleaseTestAttachmentDetails = response.data.ReleaseTestAttachmentDetails;\r\n                    let selectedRecord = {};\r\n                    let openModal = false;\r\n                    this.setState({ selectedRecord, openModal, ReleaseTestAttachmentDetails, loading: false });\r\n\r\n                }).catch(error => {\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    } else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                    this.setState({\r\n                        loading: false\r\n                    });\r\n                });\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport default connect(null, { viewAttachment })(injectIntl(ReleaseTestAttachment));"]},"metadata":{},"sourceType":"module"}