{"ast":null,"code":"var _jsxFileName = \"D:\\\\LIMSWFH\\\\LIMSPOSTGRESQL\\\\QuaLISWeb\\\\src\\\\pages\\\\basemaster\\\\SampleStorageRetrieval.jsx\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { injectIntl, FormattedMessage } from 'react-intl';\nimport { Row, Col, Card, Nav, FormGroup, FormLabel, Form, Button, FormControl, InputGroup } from 'react-bootstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport PerfectScrollbar from 'react-perfect-scrollbar';\nimport { faTrashAlt, faCopy, faPencilAlt, faSync, faPlus, faThumbsUp, faBoxOpen, faBox, faLocationArrow, faFolderMinus, faFolder, faFolderOpen, faArrowRight, faSearch, faTimes, faArrowDown, faHandPointLeft, faArrowUp, faClone, faPuzzlePiece, faCalculator, faEye, faTrashRestore } from '@fortawesome/free-solid-svg-icons';\nimport { toast } from 'react-toastify';\nimport ListMaster from '../../components/list-master/list-master.component';\nimport { constructOptionList, convertDateValuetoString, getControlMap, onSaveMandatoryValidation, rearrangeDateFormat, searchData, searchJsonData, showEsign, sortData } from '../../components/CommonScript';\nimport { ReadOnlyText, ContentPanel, SearchIcon } from '../../components/App.styles'; //import SortableTree from 'react-sortable-tree'; \n\nimport FormSelectSearch from '../../components/form-select-search/form-select-search.component';\nimport DataGrid from '../../components/data-grid/data-grid.component';\nimport { BasicConfig, BasicFuncs, Utils as QbUtils } from \"@react-awesome-query-builder/ui\";\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\nimport { callService, crudMaster, validateEsignCredential, updateStore, getSelectedSampleStorageLocation, filterColumnData, changeStorageCategoryFilter, openPropertyModal, editSampleStorageLocation, approveSampleStorageLocation, getSelectedSampleStorageVersion, fetchStorageCategory, copySampleStorageVersion, crudSampleStorageLocation } from '../../actions';\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\nimport { ListWrapper } from '../../components/client-group.styles';\nimport { MediaLabel, ProductList } from '../product/product.styled'; // import ReactTooltip from 'react-tooltip';\n\nimport { uuid } from \"uuidv4\";\nimport TreeEditable from \"../../components/form-tree-editable/TreeEditable\";\nimport TreeViewEditable from \"../../components/form-tree-editable/form-tree-editable.component\";\nimport { getItemPath, mapTree, removeItems } from \"@progress/kendo-react-treelist\";\nimport ConfirmMessage from '../../components/confirm-alert/confirm-message.component';\nimport AddTreeview from './AddTreeview';\nimport AddTreeProperties from './AddTreeProperties';\nimport { Splitter } from '@progress/kendo-react-layout';\nimport TransactionListMaster from '../../components/TransactionListMaster';\nimport BreadcrumbComponent from '../../components/Breadcrumb.Component';\nimport SplitterLayout from 'react-splitter-layout';\nimport StorageCategoryFilter from './StorageCategoryFilter';\nimport { transactionStatus } from '../../components/Enumeration';\nimport Esign from '../audittrail/Esign';\nimport { TreeViewDragAnalyzer, moveTreeViewItem } from '@progress/kendo-react-treeview';\nimport ModalShow from '../../components/ModalShow';\nimport rsapi from '../../rsapi';\nimport AddSampleStorageMapping from './AddSampleStorageMapping';\nimport Axios from 'axios';\nimport StorageMappingFilter from './StorageMappingFilter';\nimport Preloader from '../../components/preloader/preloader.component';\nimport TransactionListMasterJsonView from '../../components/TransactionListMasterJsonView';\nimport { groupBy, process } from '@progress/kendo-data-query'; //import Spreadsheet from '../../components/Spreadsheet/Spreadsheet';\n\nimport MatrixComponent from '../../components/MatrixComponent';\nimport FilterQueryBuilder from '../../components/FilterQueryBuilder';\nimport { Grid, GridColumn } from '@progress/kendo-react-grid';\nimport FormInput from '../../components/form-input/form-input.component';\nimport AdvFilter from '../../components/AdvFilter';\nimport DateTimePicker from \"../../components/date-time-picker/date-time-picker.component\";\n\nclass SampleStorageRetrieval extends Component {\n  constructor(props) {\n    super(props);\n    this.dragOverCnt = 0;\n    this.isDragDrop = false;\n    this.SEPARATOR = '_';\n    this.uniqueIDArr = [];\n    this.countforTree = 0;\n    this.pointedItem = undefined;\n    this.getitemPath = {};\n\n    this.openModal = () => {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          openModal: true,\n          selectedRecord: {},\n          loadTreeProperties: false,\n          treeData: [{\n            text: \"root\",\n            expanded: true,\n            editable: true,\n            root: true,\n            id: uuid()\n          }],\n          operation: \"create\"\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.closeModal = () => {\n      // const updateInfo = {\n      //     typeName: DEFAULT_RETURN,\n      //     data: {\n      //         openModal: false, selectedRecord: {}\n      //     }\n      // }\n      // this.props.updateStore(updateInfo);\n      let loadEsign = this.props.Login.loadEsign;\n      let openModal = this.props.Login.openModal;\n      let selectedId = this.props.Login.selectedId;\n      let selectedRecord = this.state.selectedRecord; //this.props.Login.selectedRecord;\n\n      if (this.props.Login.loadEsign) {\n        if (this.props.Login.operation === \"delete\" || this.props.Login.operation === \"Approve\" || this.props.Login.operation === \"copy\") {\n          loadEsign = false;\n          openModal = false;\n          selectedRecord = {};\n          selectedId = null;\n        } else {\n          loadEsign = false;\n        }\n      } else {\n        openModal = false;\n        selectedId = null;\n        selectedRecord = {};\n      } // const updateInfo = {\n      //     typeName: DEFAULT_RETURN,\n      //     data: { openModal, loadEsign, selectedRecord, selectedId }\n      // }\n      // this.props.updateStore(updateInfo);\n      // this.getsamplestoragetransaction({}, this.props.Login.userInfo);\n      // if (!this.state.isFilterPopup) {\n      //     this.getDynamicFilterExecuteData()\n      // }\n\n\n      this.onFilterSubmit();\n      this.setState({\n        selectedRecord,\n        openModal: false,\n        isInitialRender: true,\n        isFilterPopup: false,\n        isRetrieveOrDispose: false\n      });\n    };\n\n    this.onInputChange = event => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (event.target.type === \"checkbox\") {\n        selectedRecord[event.target.name] = event.target.checked;\n      } else {\n        selectedRecord[event.target.name] = event.target.value;\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onSaveClick = (saveType, formRef) => {\n      if (this.props.Login.loadTreeProperties === true) {\n        this.onSaveProperties(saveType, formRef);\n      } else if (this.state.openSpreadSheet) {\n        this.CRUDSampleStorageTransaction({ ...this.state.editedsheetData,\n          nsamplestoragemappingcode: this.state.isMultiSampleAdd ? Object.keys(this.state.sheetData).map(nsamplestoragemappingcode => nsamplestoragemappingcode).join(\",\") : this.state.editedsheetData.nsamplestoragemappingcode.toString(),\n          nsamplestoragelocationcode: this.state.editedsheetData.nsamplestoragelocationcode,\n          sheetData: JSON.stringify(this.state.sheetData ? this.state.sheetData : {}),\n          sheetUpdate: true,\n          userinfo: this.props.Login.userInfo,\n          isMultiSampleAdd: this.state.isMultiSampleAdd\n        }, 'create');\n      } else {\n        this.onSaveSampleStorageTransaction(saveType, formRef);\n      }\n    };\n\n    this.paneSizeChange = d => {\n      this.setState({\n        splitChangeWidthPercentage: d\n      });\n    };\n\n    this.handlePageChange = e => {\n      this.setState({\n        skip: e.skip,\n        take: e.take\n      });\n    };\n\n    this.handleDetailPageChange = e => {\n      this.setState({\n        skip: e.skip,\n        take: e.take\n      });\n    };\n\n    this.openFilter = () => {\n      // let showFilter = !this.props.Login.showFilter\n      // const updateInfo = {\n      //     typeName: DEFAULT_RETURN,\n      //     data: { showFilter }\n      // }\n      // this.props.updateStore(updateInfo);\n      let boolean = !this.state.showFilter;\n      this.setState({\n        showFilter: boolean\n      });\n    };\n\n    this.closeFilter = () => {\n      // const updateInfo = {\n      //     typeName: DEFAULT_RETURN,\n      //     data: { showFilter: false }\n      // }\n      // this.props.updateStore(updateInfo);\n      this.setState({\n        showFilter: false\n      });\n    };\n\n    this.reloadData = () => {\n      this.onFilterSubmit();\n    };\n\n    this.onEditSampleStorageLocation = (selectedSampleStorageVersion, userInfo, editId) => {\n      this.handleSearch();\n      this.setState({\n        searchedTreeData: undefined\n      });\n\n      if (this.searchRef.current) {\n        this.searchRef.current.value = \"\";\n      }\n\n      let isOnlyDraft = false;\n\n      if (this.props.Login.masterData.sampleStorageVersion && this.props.Login.masterData.sampleStorageVersion.length > 1) {\n        isOnlyDraft = true;\n      }\n\n      this.props.editSampleStorageLocation(selectedSampleStorageVersion, userInfo, isOnlyDraft, editId);\n    };\n\n    this.openStorageMapping = addId => {\n      this.addSampleStorageMapping({\n        userInfo: this.props.Login.userInfo,\n        addId\n      });\n    };\n\n    this.deletesamplestoragemapping = param => {\n      this.CRUDSampleStorageTransaction({\n        'nsamplestoragelocationcode': this.state.masterData.selectedSampleStorageLocation.nsamplestoragelocationcode,\n        'nsamplestoragemappingcode': param.nsamplestoragemappingcode,\n        userinfo: this.props.Login.userInfo\n      }, 'delete');\n    };\n\n    this.addMultipleSample = param => {\n      this.setState({\n        //sheetData: JSON.parse(response[0].data.sheetData),\n        openModal: true,\n        isMultiSampleAdd: true,\n        openSpreadSheet: true,\n        //, editedsheetData: param, Rows: param.nrow, columns: param.ncolumn,\n        loading: false\n      });\n    };\n\n    this.opensearch = () => {\n      this.setState({\n        openModal: true,\n        isFilterPopup: true,\n        selectedRecord: { ...this.state.submittedselectedRecord\n        } || { ...this.state.selectedRecord\n        }\n      });\n    };\n\n    this.openRetrieveDispose = () => {\n      this.setState({\n        openModal: true,\n        isRetrieveOrDispose: true,\n        dynamicfields: [],\n        selectedBarcodeValue: {}\n      });\n    };\n\n    this.addSample = (param, nflag) => {\n      this.setState({\n        loading: true\n      });\n      let urlArray = [];\n      const url1 = rsapi.post(\"samplestorageretrieval/getsamplestoragemappingSheetData\", {\n        isMultiSampleAdd: nflag === 2 ? true : false,\n        nsamplestoragemappingcode: nflag === 2 ? this.state.masterData.samplestorageretrieval.map(item => item.nsamplestoragemappingcode).join(\",\") : param.nsamplestoragemappingcode.toString()\n      });\n      urlArray = [url1];\n      Axios.all(urlArray).then(response => {\n        if (nflag === 2) {\n          this.setState({\n            sheetData: JSON.parse(response[0].data.sheetData),\n            openModal: true,\n            isMultiSampleAdd: true,\n            openSpreadSheet: true,\n            //, editedsheetData: param, Rows: param.nrow, columns: param.ncolumn,\n            loading: false\n          });\n        } else {\n          this.setState({\n            sheetData: JSON.parse(response[0].data.sheetData),\n            openModal: true,\n            isMultiSampleAdd: false,\n            openSpreadSheet: true,\n            editedsheetData: param,\n            Rows: param.nrow,\n            columns: param.ncolumn,\n            loading: false\n          });\n        }\n      }).catch(error => {\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(error.response.data);\n        }\n\n        this.setState({\n          loading: false\n        });\n      });\n    };\n\n    this.onComboChange = (comboData, fieldName) => {\n      const selectedRecord = this.state.selectedRecord || {};\n      const selectedProjectType = this.state.selectedProjectType || {};\n      let selectedRecordFilter = this.state.selectedRecordFilter || {};\n\n      if (fieldName === 'nstoragecategorycode') {\n        return this.getSampleStorageLocation({\n          userinfo: this.props.Login.userInfo,\n          nstoragecategorycode: comboData.value\n        }, fieldName, comboData);\n      } else if (fieldName === 'ncontainertypecode') {\n        return this.getContainerStructure({\n          userinfo: this.props.Login.userInfo,\n          ncontainertypecode: comboData.value\n        }, fieldName, comboData);\n      } else if (fieldName === 'nprojecttypecode') {\n        ///return this.getprojectbarcodeconfig(comboData);\n        selectedProjectType[fieldName] = comboData;\n        selectedRecord[fieldName] = comboData;\n        this.setState({\n          selectedProjectType,\n          selectedRecord\n        });\n      } else if (fieldName === 'ncontainerstructurecode') {\n        selectedRecord['nrow'] = comboData.item.nrow ? comboData.item.nrow : 1;\n        selectedRecord['ncolumn'] = comboData.item.ncolumn ? comboData.item.ncolumn : 1;\n      } else if (fieldName === 'nsamplestoragelocationcode') {\n        return this.getSampleStorageLocation({\n          userinfo: this.props.Login.userInfo,\n          nstoragecategorycode: this.state.selectedRecordFilter['nstoragecategorycode'].value,\n          nsamplestoragelocationcode: comboData.value\n        }, fieldName, comboData);\n      }\n\n      if (fieldName === 'nsamplestorageversioncode') {\n        selectedRecordFilter[fieldName] = comboData;\n        this.setState({\n          selectedRecordFilter\n        });\n      } else {\n        selectedRecord[fieldName] = comboData;\n        this.setState({\n          selectedRecord,\n          selectedRecordFilter\n        });\n      }\n    };\n\n    this.onSaveSampleStorageTransaction = saveType => {\n      let selectedRecord = this.state.selectedRecord;\n      let containerpathCodeArray = [];\n\n      if (this.state.operation === 'create') {\n        containerpathCodeArray = selectedRecord['nsamplestoragecontainerpathcode'].map(item => item.value);\n      }\n\n      const inputParam = {\n        nsamplestoragetransactioncode: selectedRecord['nsamplestoragetransactioncode'] ? parseInt(selectedRecord['nsamplestoragetransactioncode']) : 0,\n        nsamplestoragelocationcode: this.state.masterData.selectedSampleStorageLocation.nsamplestoragelocationcode,\n        nsamplestoragemappingcode: selectedRecord['nsamplestoragemappingcode'] ? parseInt(selectedRecord['nsamplestoragemappingcode']) : 0,\n        ncontainertypecode: -1,\n        nproductcode: selectedRecord['nproductcode'].value,\n        ndirectionmastercode: -1,\n        ssamplestoragemappingname: \"-\",\n        nsamplestoragecontainerpathcode: this.state.operation === 'create' ? JSON.stringify(containerpathCodeArray) : parseInt(selectedRecord['nsamplestoragecontainerpathcode'].value),\n        containerpathsize: containerpathCodeArray.length,\n        nneedposition: 4,\n        ncontainerstructurecode: -1,\n        nquantity: selectedRecord['nquantity'] ? parseInt(selectedRecord['nquantity']) : 1,\n        userinfo: this.props.Login.userInfo\n      };\n      const masterData = this.props.Login.masterData;\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolcode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData\n            },\n            saveType\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.CRUDSampleStorageTransaction(inputParam, this.state.operation);\n      }\n    };\n\n    this.getsamplestoragetransaction = (inputParam, userinfo) => {\n      this.setState({\n        loading: true\n      });\n      let urlArray = [];\n      const url1 = rsapi.post(\"samplestorageretrieval/getsamplestoragetransaction\", {\n        userinfo: this.props.Login.userInfo\n      });\n      urlArray = [url1];\n      Axios.all(urlArray).then(response => {\n        this.setState({\n          masterData: { ...this.state.masterData,\n            ...response[0].data\n          },\n          loading: false\n        });\n      }).catch(error => {\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(error.response.data);\n        }\n\n        this.setState({\n          loading: false\n        });\n      });\n    };\n\n    this.childDataChange = selectedRecord => {\n      this.setState({\n        selectedRecord: { ...selectedRecord\n        },\n        isInitialRender: false\n      });\n    };\n\n    this.childSheetDataChange = sheetData => {\n      this.setState({\n        // selectedRecord: {\n        //     ...this.state.selectedRecord,\n        //     sheetData: {\n        //         ...this.state.selectedRecord.sheetData,\n        //         ...sheetData\n        //     }\n        // },\n        sheetData: { ...sheetData\n        },\n        isInitialRender: false\n      });\n    };\n\n    this.getActiveSampleStorageMappingById = (inputParam, userinfo) => {\n      this.setState({\n        loading: true\n      });\n      let urlArray = [];\n      const url1 = rsapi.post(\"samplestorageretrieval/getActiveSampleStorageMappingById\", {\n        nsamplestoragelocationcode: inputParam['selectedSampleStorageLocation'][0].nsamplestoragelocationcode,\n        userinfo: userinfo\n      });\n      urlArray = [url1];\n      Axios.all(urlArray).then(response => {\n        this.setState({\n          masterData: { ...this.state.masterData,\n            ...response[0].data\n          } //,\n          // selectedRecord: {\n          //     ...this.state.selectedRecord\n          //    // , sheetData: JSON.parse(response[0].data.selectedSampleStoragemapping.jsondata.value)\n          // }\n          ,\n          loading: false\n        });\n      }).catch(error => {\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(error.response.data);\n        }\n\n        this.setState({\n          loading: false\n        });\n      });\n    };\n\n    this.filterColumnData = (filterValue, filterParam) => {\n      let masterData = filterParam.masterData;\n      let primaryKeyValue = 0;\n      let searchedData = undefined;\n\n      if (filterValue === \"\") {\n        if (masterData[filterParam.inputListName] && masterData[filterParam.inputListName].length > 0) {\n          primaryKeyValue = masterData[filterParam.inputListName][0][filterParam.primaryKeyField];\n        }\n      } else {\n        if (filterParam.isjsondata) {\n          searchedData = searchJsonData(filterValue, masterData[filterParam.inputListName], filterParam.searchFieldList || []);\n        } else {\n          searchedData = searchData(filterValue, masterData[filterParam.inputListName], filterParam.searchFieldList || []);\n        }\n\n        if (searchedData.length > 0) {\n          primaryKeyValue = searchedData[0][filterParam.primaryKeyField];\n        }\n      }\n\n      if (primaryKeyValue !== 0) {\n        this.setState({\n          loading: true\n        });\n        return rsapi.post(filterParam.fetchUrl, { ...filterParam.fecthInputObject,\n          [filterParam.primaryKeyField]: primaryKeyValue\n        }).then(response => {\n          masterData[\"searchedData\"] = searchedData;\n          masterData = { ...masterData,\n            ...response.data\n          };\n\n          if (filterParam.sortField) {\n            sortData(masterData, filterParam.sortOrder, filterParam.sortField);\n          } else {\n            sortData(masterData);\n          }\n\n          this.setState({\n            masterData,\n            loading: false,\n            skip: 0,\n            take: 10,\n            selectedId: null\n          });\n        }).catch(error => {\n          this.setState({\n            loading: false\n          });\n\n          if (error.response.status === 500) {\n            toast.error(this.props.intl.formatMessage({\n              id: error.message\n            }));\n          } else {\n            toast.warn(this.props.intl.formatMessage({\n              id: error.response.data\n            }));\n          }\n        });\n      } else {\n        masterData[filterParam.selectedObject] = undefined;\n        masterData[\"searchedData\"] = [];\n        Object.keys(masterData).forEach(item => {\n          if (item !== filterParam.inputListName && item !== filterParam.selectedObject && filterParam.unchangeList && filterParam.unchangeList.indexOf(item) === -1) masterData[item] = [];\n        });\n        this.setState({\n          masterData,\n          operation: null,\n          modalName: undefined,\n          loading: false\n        });\n      }\n    };\n\n    this.CRUDSampleStorageTransaction = (inputParam, operation) => {\n      if (this.state.selectedRecord && this.state.selectedRecord.spositionvalue !== \"\" && this.state.selectedRecord.spositionvalue !== undefined) {\n        this.setState({\n          loading: true\n        });\n        let urlArray = [];\n        const url1 = rsapi.post(\"samplestorageretrieval/\" + operation + \"samplestorageretrieval\", inputParam);\n        urlArray = [url1];\n        Axios.all(urlArray).then(response => {\n          this.setState({\n            isInitialRender: true,\n            selectedRecord: {},\n            masterData: { ...this.state.masterData,\n              ...response[0].data\n            },\n            selectedBarcodeValue: {},\n            dynamicfields: [],\n            //openModal: false,\n            loading: false\n          });\n        }).catch(error => {\n          if (error.response.status === 500) {\n            toast.error(error.message);\n          } else {\n            toast.info(error.response.data);\n          }\n\n          this.setState({\n            loading: false\n          });\n        });\n      } else {\n        toast.info(this.props.intl.formatMessage({\n          id: \"IDS_ENTERSAMPLEID\"\n        }));\n      }\n    };\n\n    this.onFilterSubmit = () => {\n      this.getprojectbarcodeconfig(true); // this.setState({ loading: true })\n      // let inputParamData = {\n      //     nstoragecategorycode: this.state.selectedRecordFilter[\"nstoragecategorycode\"].value,\n      //     // nsamplestoragelocationcode: this.state.selectedRecordFilter[\"nsamplestoragelocationcode\"].value,\n      //     // nsamplestorageversioncode: this.state.selectedRecordFilter[\"nsamplestorageversioncode\"].value,\n      //     userinfo: this.props.Login.userInfo,\n      // }\n      // let urlArray = [];\n      // const url1 = rsapi.post(\"samplestorageretrieval/getsamplestoragemapping\", inputParamData);\n      // urlArray = [url1];\n      // Axios.all(urlArray)\n      //     .then(response => {\n      //         let object = {\n      //             selectedStorageCategoryName: this.state.selectedRecordFilter[\"nstoragecategorycode\"].item.sstoragecategoryname,\n      //             // ssamplestoragelocationname: this.state.selectedRecordFilter[\"nsamplestoragelocationcode\"].item.ssamplestoragelocationname,\n      //             // selectedSampleStorageVersion: this.state.selectedRecordFilter[\"nsamplestorageversioncode\"].item.nversionno,\n      //         }\n      //         let filterData = this.generateBreadCrumData(object);\n      //         this.setState({\n      //             filterData,\n      //             masterData: {\n      //                 ...this.state.masterData,\n      //                 ...response[0].data,\n      //                 //   samplestorageretrieval: response[0].data['samplestorageretrieval'],\n      //             },\n      //             loading: false\n      //         });\n      //     }).catch(error => {\n      //         if (error.response.status === 500) {\n      //             toast.error(error.message);\n      //         } else {\n      //             toast.warn(error.response.data);\n      //         }\n      //         this.setState({\n      //             loading: false\n      //         });\n      //     });\n    };\n\n    this.onSampleMappingSaveClick = () => {\n      const mandatoryFields = this.state.openSpreadSheet ? [] : this.state.selectedRecord[\"nneedposition\"] === undefined || this.state.selectedRecord[\"nneedposition\"] === false ? [{\n        \"idsName\": \"IDS_SAMPLESTORAGEMAPPING\",\n        \"dataField\": \"nsamplestoragecontainerpathcode\",\n        \"mandatoryLabel\": \"IDS_SELECT\",\n        \"controlType\": \"selectbox\"\n      }, {\n        \"idsName\": \"IDS_PRODUCT\",\n        \"dataField\": \"nproductcode\",\n        \"mandatoryLabel\": \"IDS_SELECT\",\n        \"controlType\": \"selectbox\"\n      }, {\n        \"idsName\": \"IDS_AVAILABLESPACE\",\n        \"dataField\": \"nquantity\",\n        \"mandatoryLabel\": \"IDS_ENTER\",\n        \"controlType\": \"selectbox\"\n      }] : [{\n        \"idsName\": \"IDS_SAMPLESTORAGEMAPPING\",\n        \"dataField\": \"nsamplestoragecontainerpathcode\",\n        \"mandatoryLabel\": \"IDS_SELECT\",\n        \"controlType\": \"selectbox\"\n      }, {\n        \"idsName\": \"IDS_PRODUCT\",\n        \"dataField\": \"nproductcode\",\n        \"mandatoryLabel\": \"IDS_SELECT\",\n        \"controlType\": \"selectbox\"\n      }, {\n        \"idsName\": \"IDS_CONTAINERTYPE\",\n        \"dataField\": \"ncontainertypecode\",\n        \"mandatoryLabel\": \"IDS_SELECT\",\n        \"controlType\": \"selectbox\"\n      }, {\n        \"idsName\": \"IDS_CONTAINERSTRUCTURENAME\",\n        \"dataField\": \"ncontainerstructurecode\",\n        \"mandatoryLabel\": \"IDS_SELECT\",\n        \"controlType\": \"selectbox\"\n      }, {\n        \"idsName\": \"IDS_DIRECTION\",\n        \"dataField\": \"ndirectionmastercode\",\n        \"mandatoryLabel\": \"IDS_ENTER\",\n        \"controlType\": \"selectbox\"\n      }, {\n        \"idsName\": \"IDS_AVAILABLESPACE\",\n        \"dataField\": \"nquantity\",\n        \"mandatoryLabel\": \"IDS_ENTER\",\n        \"controlType\": \"selectbox\"\n      }];\n      onSaveMandatoryValidation(this.state.selectedRecord, mandatoryFields, this.onSaveClick);\n    };\n\n    this.dataStateChange = event => {\n      this.setState({\n        dataStateChange: event.dataState\n      });\n    };\n\n    this.approveSampleStorageMapping = event => {\n      let inputParamData = {};\n      this.setState({\n        loading: true\n      });\n      inputParamData = {\n        nsamplestoragelocationcode: this.state.masterData.selectedSampleStorageLocation.nsamplestoragelocationcode,\n        userinfo: this.props.Login.userInfo\n      };\n      let urlArray = [];\n      const url1 = rsapi.post(\"samplestorageretrieval/approveSampleStorageMapping\", inputParamData);\n      urlArray = [url1];\n      Axios.all(urlArray).then(response => {\n        this.setState({\n          masterData: { ...this.state.masterData,\n            ...response[0].data\n          },\n          loading: false\n        });\n      }).catch(error => {\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(error.response.data);\n        }\n\n        this.setState({\n          loading: false\n        });\n      });\n    };\n\n    this.fetchRecord = data => {\n      this.setState({\n        loading: true\n      });\n      let selectedRecord = this.state.selectedRecord;\n      let inputParamData = {\n        nsamplestoragelocationcode: this.state.masterData.selectedSampleStorageLocation.nsamplestoragelocationcode,\n        userinfo: this.props.Login.userInfo\n      };\n      let urlArray = [];\n      const url1 = rsapi.post(\"samplestorageretrieval/addSampleStorageMapping\", inputParamData);\n      const url2 = rsapi.post(\"product/getProduct\", {\n        'userinfo': this.props.Login.userInfo\n      });\n      const url3 = rsapi.post(\"samplestorageretrieval/getEditSampleStorageMapping\", {\n        'nsamplestoragemappingcode': data.nsamplestoragemappingcode,\n        'userinfo': this.props.Login.userInfo\n      });\n      urlArray = [url1, url2, url3];\n      Axios.all(urlArray).then(response => {\n        const storageMappingMap = constructOptionList(response[0].data['samplestoragecontainerpath'] || [], \"nsamplestoragecontainerpathcode\", \"scontainerpath\", undefined, undefined, true);\n        const storageMappingMapList = storageMappingMap.get(\"OptionList\");\n        let containerStructure = response[0].data['containerStructure'];\n        const containerTypeMap = constructOptionList(response[0].data['containerType'] || [], \"ncontainertypecode\", \"scontainertype\", undefined, undefined, true);\n        const containerTypeList = containerTypeMap.get(\"OptionList\");\n        const directionmasterMap = constructOptionList(response[0].data['directionmaster'] || [], \"ndirectionmastercode\", \"sdirection\", undefined, undefined, true);\n        const directionmasterList = directionmasterMap.get(\"OptionList\");\n        const containerstructureMap = constructOptionList(response[2].data['containerStructure'] || [], \"ncontainerstructurecode\", \"scontainerstructurename\", undefined, undefined, true);\n        const containerstructureList = containerstructureMap.get(\"OptionList\");\n        const productMap = constructOptionList(response[1].data['Product'] || [], \"nproductcode\", \"sproductname\", undefined, undefined, true);\n        const productList = productMap.get(\"OptionList\");\n        const editedObject = response[2].data.editsampleStorageMapping;\n        storageMappingMapList.unshift({\n          label: editedObject.scontainerpath,\n          value: editedObject.nsamplestoragecontainerpathcode\n        });\n        selectedRecord = {\n          ndirectionmastercode: {\n            label: editedObject.sdirection,\n            value: editedObject.ndirectionmastercode\n          },\n          nsamplestoragecontainerpathcode: {\n            label: editedObject.scontainerpath,\n            value: editedObject.nsamplestoragecontainerpathcode\n          },\n          nproductcode: {\n            label: editedObject.sproductname,\n            value: editedObject.nproductcode\n          },\n          ncontainertypecode: {\n            label: editedObject.scontainertype,\n            value: editedObject.ncontainertypecode\n          },\n          ncontainerstructurecode: {\n            label: editedObject.scontainerstructurename,\n            value: editedObject.ncontainerstructurecode\n          },\n          nneedposition: editedObject.nneedposition === 3 ? true : false,\n          directionmasterOptions: directionmasterList,\n          nquantity: editedObject.nquantity,\n          nrow: editedObject.nrow,\n          ncolumn: editedObject.ncolumn,\n          nsamplestoragemappingcode: editedObject.nsamplestoragemappingcode\n        };\n        this.setState({\n          openSpreadSheet: false,\n          openModal: true,\n          selectedRecord: { ...selectedRecord,\n            storageMappingMapOptions: storageMappingMapList,\n            productOptions: productList,\n            containerTypeOptions: containerTypeList,\n            containerStructureOptions: containerstructureList,\n            isInitialRender: true\n          },\n          operation: 'update',\n          loading: false\n        });\n      }).catch(error => {\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(error.response.data);\n        }\n\n        this.setState({\n          loading: false\n        });\n      });\n    };\n\n    this.retrievalType = () => {\n      let retrievalType = this.state.retrievalType;\n\n      if (retrievalType === 1) {\n        retrievalType = 2;\n      } else {\n        retrievalType = 1;\n      }\n\n      this.setState({\n        retrievalType: retrievalType\n      });\n    };\n\n    this.onInputOnChange = event => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (event.target.type === 'checkbox') {\n        if (event.target.name === \"agree\") {\n          selectedRecord[event.target.name] = event.target.checked === true ? 3 : 4;\n        }\n      } else if (event.target.type === 'select-one') {\n        selectedRecord[event.target.name] = event.target.value;\n      } else {\n        selectedRecord[event.target.name] = event.target.value;\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.handlePageChangeFilter = event => {\n      this.setState({\n        kendoSkip: event.skip,\n        kendoTake: event.take\n      });\n    };\n\n    this.onChange = (immutableTree, config) => {\n      let selectedRecord = this.state.selectedRecord || {};\n      selectedRecord[\"tree\"] = immutableTree;\n      selectedRecord[\"config\"] = config;\n      selectedRecord['filterquery'] = QbUtils.sqlFormat(immutableTree, config);\n      this.setState({\n        tree: immutableTree,\n        config: config,\n        selectedRecord: selectedRecord\n      });\n    };\n\n    this.processWithGroups = (data, dataState) => {\n      const aggregates = [{\n        field: \"navailablespace\",\n        aggregate: \"sum\"\n      }];\n      const groups = dataState.group;\n\n      if (groups) {\n        groups.map(group => group.aggregates = aggregates);\n      }\n\n      dataState.group = groups;\n      const newDataState = process(data, dataState); // setGroupIds({\n      //     data: newDataState.data,\n      //     group: dataState.group,\n      // });\n\n      return newDataState;\n    };\n\n    this.handleFilterDateChange = (dateName, dateValue) => {\n      let masterData = this.state.masterData;\n      masterData[dateName] = dateValue;\n      this.setState({\n        masterData\n      });\n    };\n\n    this.validateEsign = () => {\n      const inputParam = {\n        inputData: {\n          \"userinfo\": { ...this.props.Login.userInfo,\n            sreason: this.state.selectedRecord[\"esigncomments\"],\n            nreasoncode: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].value,\n            spredefinedreason: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].label\n          },\n          password: this.state.selectedRecord[\"esignpassword\"]\n        },\n        screenData: this.props.Login.screenData\n      };\n      this.props.validateEsignCredential(inputParam, \"openModal\");\n    };\n\n    this.state = {\n      retrievalType: 1,\n      // extractedColumnList: [   \n      //     { \"idsName\": \"IDS_STORAGESTRUCTURE\", \"dataField\": \"ssamplestoragelocationname\", \"width\": \"200px\" },\n      //     { \"idsName\": \"IDS_SAMPLESTORAGEPATH\", \"dataField\": \"scontainerpath\", \"width\": \"450px\" },\n      //     { \"idsName\": \"IDS_POSITION\", \"dataField\": \"sposition\", \"width\": \"100px\" },\n      //     { \"idsName\": \"IDS_SAMPLEID\", \"dataField\": \"spositionvalue\", \"width\": \"100px\" },\n      //     //{ \"idsName\": \"IDS_PROJECTTYPE\", \"dataField\": \"sprojecttypename\", \"width\": \"100px\" },\n      //     //{ \"idsName\": \"IDS_PRODUCT\", \"dataField\": \"sproductname\", \"width\": \"100px\" },\n      //     { \"idsName\": \"IDS_PARTICIPANTS\", \"dataField\": \"sparticipantid\", \"width\": \"100px\" },\n      //     //{ \"idsName\": \"IDS_VISITNUMBER\", \"dataField\": \"svisitnumber\", \"width\": \"100px\" },\n      //     { \"dataField\": \"svisitnumbershortcode\", \"idsName\": \"IDS_VISITNUMBERCODE\", \"width\": \"100px\" }, \n      //     { \"dataField\": \"sprojectshortcode\", \"idsName\": \"IDS_PROJECTTYPECODE\" , \"width\": \"100px\"} ,\n      //     { \"dataField\": \"sproductshortcode\", \"idsName\": \"IDS_PRODUCTCODE\", \"width\": \"100px\" } ,\n      //     { \"dataField\": \"ssampledonorshortcode\", \"idsName\": \"IDS_SAMPLEDONORCODE\", \"width\": \"100px\" }  ,\n      //     { \"dataField\": \"scollectiontubetypeshortcode\", \"idsName\": \"IDS_COLLECTIONTUBETYPECODE\", \"width\": \"100px\" }\n      // ],\n      sheetData: {},\n      selectedRecordFilter: {},\n      treeData: [{\n        title: 'Chicken',\n        children: [{\n          title: 'Egg'\n        }]\n      }],\n      toggleAction: false,\n      treeDataView: undefined,\n      toggleActionView: false,\n      treeData: [{\n        //  text: \"root\",\n        text: this.props.intl.formatMessage({\n          id: \"IDS_ROOT\"\n        }),\n        expanded: true,\n        editable: true,\n        root: true,\n        id: uuid()\n      }],\n      panes: [{\n        size: '50%',\n        scrollable: false\n      }],\n      selectedRecord: {},\n      userRoleControlRights: [],\n      controlMap: new Map(),\n      skip: 0,\n      detailSkip: 0,\n      detailTake: 10,\n      take: this.props.Login.settings ? this.props.Login.settings[3] : 25,\n      splitChangeWidthPercentage: 22,\n      selectedItem: undefined,\n      loading: false,\n      dataStateChange: {\n        take: 10,\n        skip: 0 // group: [\n        //     {\n        //         field: \"ssamplestoragelocationname\",\n        //     },\n        // ],\n\n      }\n    };\n    let fields = {}; // if (this.state.extractedColumnList) {\n    //     // let newArr=[...[  { \"dataField\": \"svisitnumbershortcode\", \"idsName\": \"IDS_VISITNUMBERCODE\", \"width\": \"100px\" }, \n    //     // { \"dataField\": \"sprojectshortcode\", \"idsName\": \"IDS_PROJECTTYPECODE\" , \"width\": \"100px\"} ,\n    //     // { \"dataField\": \"sproductshortcode\", \"idsName\": \"IDS_PRODUCTCODE\", \"width\": \"100px\" } ,\n    //     // { \"dataField\": \"ssampledonorshortcode\", \"idsName\": \"IDS_SAMPLEDONORCODE\", \"width\": \"100px\" }  ,\n    //     // { \"dataField\": \"scollectiontubetypeshortcode\", \"idsName\": \"IDS_COLLECTIONTUBETYPECODE\", \"width\": \"100px\" }]\n    //     // ,...this.state.extractedColumnList]\n    //     this.state.extractedColumnList.map(field => {\n    //         if (field.dataField !== 'ssamplestoragelocationname' && field.dataField !== 'sproductname'\n    //             && field.dataField !== 'sprojecttypename' && field.dataField !== 'svisitnumber') {\n    //             fields = {\n    //                 ...fields,\n    //                 [field.dataField]: {\n    //                     \"label\":\n    //                         this.props.intl.formatMessage({\n    //                             id: field.idsName,\n    //                         })\n    //                     ,\n    //                     \"type\": field.dataField === 'navailablespace' ? \"number\" : \"text\",\n    //                     \"valueSources\": [\"value\", \"func\"],\n    //                     \"mainWidgetProps\": {\n    //                         \"valueLabel\": \"Name\",\n    //                         \"valuePlaceholder\": this.props.intl.formatMessage({\n    //                             id: field.idsName\n    //                         })\n    //                     }\n    //                 }\n    //             }\n    //         }\n    //     });\n    // }\n\n    this.state = { ...this.state,\n      'fields': fields\n    };\n    this.searchRef = React.createRef();\n    this.dragClue = React.createRef();\n    this.confirmMessage = new ConfirmMessage();\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\n      toast.warn(props.Login.masterStatus);\n      props.Login.masterStatus = \"\";\n    }\n\n    if (props.Login.error !== \"\" && props.Login.error !== state.error) {\n      toast.error(props.Login.error);\n      props.Login.error = \"\";\n    }\n\n    return null;\n  }\n\n  componentDidUpdate(previousProps, previousState) {\n    let {\n      filterData,\n      storageCategoryOptions,\n      selectedRecord,\n      controlMap,\n      userRoleControlRights,\n      storageLocationOptions,\n      sampleStorageVersionOptions,\n      masterData,\n      selectedRecordFilter,\n      fields,\n      selectedProjectType,\n      selectedProjectTypeList,\n      breadCrumbdata\n    } = this.state;\n    let bool = false; ///////////////////////////////\n\n    if (this.props.Login.masterData.sampleStorageLocation !== previousProps.Login.masterData.sampleStorageLocation) {\n      let queryBuilderFreezer = [];\n      bool = true;\n      this.props.Login.masterData.sampleStorageLocation && this.props.Login.masterData.sampleStorageLocation.map(item => queryBuilderFreezer.push({\n        \"value\": item.nsamplestoragelocationcode,\n        \"title\": item.ssamplestoragelocationname\n      }));\n      fields = { ...fields,\n        'nsamplestoragelocationcode': {\n          \"label\": this.props.intl.formatMessage({\n            id: \"IDS_STORAGESTRUCTURENAME\"\n          }),\n          \"type\": \"select\",\n          \"valueSources\": [\"value\"],\n          \"fieldSettings\": {\n            \"listValues\": queryBuilderFreezer\n          }\n        }\n      };\n    } // if (this.props.Login.masterData.sampleType !== previousProps.Login.masterData.sampleType) {\n    //     let queryBuilderFreezer = [];\n    //     bool = true;\n    //     this.props.Login.masterData.sampleType && this.props.Login.masterData.sampleType.map(\n    //         (item) => queryBuilderFreezer.push({ \"value\": item.nproductcode, \"title\": item.sproductname })\n    //     )\n    //     fields = {\n    //         ...fields,\n    //         'nproductcode': {\n    //             \"label\": this.props.intl.formatMessage({\n    //                 id: \"IDS_PRODUCT\",\n    //             }),\n    //             \"type\": \"select\",\n    //             \"valueSources\": [\"value\"],\n    //             \"fieldSettings\": {\n    //                 \"listValues\": queryBuilderFreezer\n    //             }\n    //         }\n    //     }\n    // }\n    // if (this.props.Login.masterData.ProjectType !== previousProps.Login.masterData.ProjectType) {\n    //     let queryBuilderFreezer = [];\n    //     bool = true;\n    //     this.props.Login.masterData.ProjectType && this.props.Login.masterData.ProjectType.map(\n    //         (item) => queryBuilderFreezer.push({ \"value\": item.nprojecttypecode, \"title\": item.sprojecttypename })\n    //     )\n    //     fields = {\n    //         ...fields,\n    //         'nprojecttypecode': {\n    //             \"label\": this.props.intl.formatMessage({\n    //                 id: \"IDS_PROJECTTYPE\",\n    //             }),\n    //             \"type\": \"select\",\n    //             \"valueSources\": [\"value\"],\n    //             \"fieldSettings\": {\n    //                 \"listValues\": queryBuilderFreezer\n    //             }\n    //         }\n    //     }\n    // } if (this.props.Login.masterData.VisitNumber !== previousProps.Login.masterData.VisitNumber) {\n    //     let queryBuilderFreezer = [];\n    //     bool = true;\n    //     this.props.Login.masterData.VisitNumber && this.props.Login.masterData.VisitNumber.map(\n    //         (item) => queryBuilderFreezer.push({ \"value\": item.nvisitnumbercode, \"title\": item.svisitnumber })\n    //     )\n    //     fields = {\n    //         ...fields,\n    //         'nvisitnumbercode': {\n    //             \"label\": this.props.intl.formatMessage({\n    //                 id: \"IDS_VISITNUMBER\",\n    //             }),\n    //             \"type\": \"select\",\n    //             \"valueSources\": [\"value\"],\n    //             \"fieldSettings\": {\n    //                 \"listValues\": queryBuilderFreezer\n    //             }\n    //         }\n    //     }\n    // }\n    ///////////////////////////////\n\n\n    if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\n      bool = true;\n      userRoleControlRights = [];\n\n      if (this.props.Login.userRoleControlRights) {\n        this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item => userRoleControlRights.push(item.ncontrolcode));\n      }\n\n      controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode);\n    }\n\n    if (this.props.Login.masterData.filterStorageCategory !== previousProps.Login.masterData.filterStorageCategory) {\n      bool = true;\n      const filterStorageCategorylist = constructOptionList(this.props.Login.masterData.filterStorageCategory || [], \"nstoragecategorycode\", \"sstoragecategoryname\", undefined, undefined, undefined);\n      storageCategoryOptions = filterStorageCategorylist.get(\"OptionList\");\n\n      if (this.props.Login.masterData.selectedStorageCategory) {\n        selectedRecordFilter = { ...selectedRecordFilter,\n          nstoragecategorycode: storageCategoryOptions.filter(item => item.value === this.props.Login.masterData.selectedStorageCategory.nstoragecategorycode)[0]\n        };\n      }\n    }\n\n    if (this.props.Login.masterData.sampleStorageLocation !== previousProps.Login.masterData.sampleStorageLocation) {\n      bool = true;\n      const sampleStorageLocationList = constructOptionList(this.props.Login.masterData.sampleStorageLocation || [], \"nsamplestoragelocationcode\", \"ssamplestoragelocationname\", undefined, undefined, undefined);\n      storageLocationOptions = sampleStorageLocationList.get(\"OptionList\");\n\n      if (this.props.Login.masterData.selectedSampleStorageLocation) {\n        selectedRecordFilter = { ...selectedRecordFilter,\n          nsamplestoragelocationcode: storageLocationOptions.filter(item => item.value === this.props.Login.masterData.selectedSampleStorageLocation.nsamplestoragelocationcode)[0]\n        };\n      }\n    }\n\n    if (this.props.Login.masterData.sampleStorageVersion !== previousProps.Login.masterData.sampleStorageVersion) {\n      bool = true;\n      const sampleStorageVersionList = constructOptionList(this.props.Login.masterData.sampleStorageVersion || [], \"nsamplestorageversioncode\", \"nversionno\", undefined, undefined, undefined);\n      sampleStorageVersionOptions = sampleStorageVersionList.get(\"OptionList\");\n\n      if (this.props.Login.masterData.selectedSampleStorageVersion) {\n        selectedRecordFilter = { ...selectedRecordFilter,\n          nsamplestorageversioncode: sampleStorageVersionOptions.filter(item => item.value === this.props.Login.masterData.selectedSampleStorageVersion.nsamplestorageversioncode)[0]\n        };\n      }\n    }\n\n    if (this.props.Login.masterData !== previousProps.Login.masterData) {\n      bool = true;\n      masterData = this.props.Login.masterData;\n      selectedRecord[\"nprojecttypecode\"] = {\n        label: this.props.Login.masterData.selectedProjectType && this.props.Login.masterData.selectedProjectType.sprojecttypename ? this.props.Login.masterData.selectedProjectType.sprojecttypename : 'NA',\n        value: this.props.Login.masterData.selectedProjectType && this.props.Login.masterData.selectedProjectType.nprojecttypecode\n      };\n      selectedProjectType = {\n        nprojecttypecode: {\n          label: this.props.Login.masterData.selectedProjectType && this.props.Login.masterData.selectedProjectType.sprojecttypename ? this.props.Login.masterData.selectedProjectType.sprojecttypename : 'NA',\n          value: this.props.Login.masterData.selectedProjectType && this.props.Login.masterData.selectedProjectType.nprojecttypecode\n        }\n      };\n      breadCrumbdata = { ...convertDateValuetoString(this.props.Login.masterData.fromDate, this.props.Login.masterData.toDate, this.props.Login.userInfo),\n        breadcrumbprojecttype: {\n          value: this.props.Login.masterData.selectedProjectType && this.props.Login.masterData.selectedProjectType.sprojecttypename ? this.props.Login.masterData.selectedProjectType.sprojecttypename : 'NA'\n        }\n      };\n      selectedProjectTypeList = this.props.Login.masterData.selectedProjectTypeList;\n      const filterStorageCategorylist = constructOptionList(this.props.Login.masterData.projectbarcodeconfig || [], \"nprojecttypecode\", \"sprojecttypename\", undefined, undefined, undefined);\n      masterData['projectbarcodeconfig'] = filterStorageCategorylist.get(\"OptionList\");\n      filterData = this.generateBreadCrumData(this.props.Login.masterData);\n    }\n\n    if (this.state.masterData !== previousState.masterData) {\n      bool = true;\n      filterData = this.generateBreadCrumData(this.state.masterData);\n    }\n\n    if (bool) {\n      this.setState({\n        storageCategoryOptions,\n        filterData,\n        selectedRecord,\n        controlMap,\n        userRoleControlRights,\n        storageLocationOptions,\n        sampleStorageVersionOptions,\n        masterData,\n        selectedRecordFilter,\n        fields,\n        selectedProjectType,\n        selectedProjectTypeList,\n        breadCrumbdata\n      });\n    }\n  }\n\n  componentDidMount() {\n    if (this.parentHeight) {\n      const height = this.parentHeight.clientHeight;\n      this.setState({\n        firstPane: height - 80,\n        parentHeight: height - 50\n      });\n    }\n  }\n\n  generateBreadCrumData(obj) {\n    const breadCrumbData = [];\n\n    if (this.state.masterData && this.state.masterData.filterStorageCategory) {\n      breadCrumbData.push({\n        \"label\": \"IDS_STORAGECATEGORY\",\n        \"value\": obj.selectedStorageCategoryName && obj.selectedStorageCategoryName !== null ? obj.selectedStorageCategoryName : \"NA\"\n      } // ,\n      // {\n      //     \"label\": \"IDS_STORAGECATEGORYLOCATION\",\n      //     \"value\": obj.selectedSampleStorageLocation &&\n      //         obj.selectedSampleStorageLocation.ssamplestoragelocationname !== null ?\n      //         obj.selectedSampleStorageLocation.ssamplestoragelocationname : \"NA\"\n      // },\n      // {\n      //     \"label\": \"IDS_STORAGECATEGORYVERSION\",\n      //     \"value\": obj.selectedSampleStorageVersion &&\n      //         obj.selectedSampleStorageVersion.nversionno !== null ?\n      //         obj.selectedSampleStorageVersion.nversionno : \"NA\"\n      // }\n      );\n    }\n\n    return breadCrumbData;\n  }\n\n  getSampleStorageLocation(inputData, fieldName, comboData) {\n    let selectedRecordFilter = this.state.selectedRecordFilter || {};\n    let inputParamData = {};\n    this.setState({\n      loading: true\n    });\n\n    if (fieldName === 'nsamplestoragelocationcode') {\n      inputParamData = {\n        nstoragecategorycode: selectedRecordFilter['nstoragecategorycode'].value,\n        nsamplestoragelocationcode: comboData.value,\n        userinfo: inputData.userinfo\n      };\n    } else {\n      inputParamData = {\n        nstoragecategorycode: comboData.value,\n        userinfo: inputData.userinfo\n      };\n    }\n\n    let urlArray = [];\n    const url1 = rsapi.post(\"samplestorageretrieval/getsamplestoragemapping\", inputParamData);\n    urlArray = [url1];\n    Axios.all(urlArray).then(response => {\n      let {\n        storageLocationOptions,\n        sampleStorageVersionOptions\n      } = this.state;\n      let sampleStorageLocationList = constructOptionList(response[0].data.sampleStorageLocation || [], \"nsamplestoragelocationcode\", \"ssamplestoragelocationname\", undefined, undefined, undefined);\n      storageLocationOptions = sampleStorageLocationList.get(\"OptionList\");\n      let sampleStorageVersionList = constructOptionList(response[0].data.sampleStorageVersion || [], \"nsamplestorageversioncode\", \"nversionno\", undefined, undefined, undefined);\n      sampleStorageVersionOptions = sampleStorageVersionList.get(\"OptionList\");\n      selectedRecordFilter = { ...selectedRecordFilter,\n        nsamplestoragelocationcode: storageLocationOptions.length > 0 ? storageLocationOptions[0] : [],\n        nsamplestorageversioncode: sampleStorageVersionOptions.length > 0 ? sampleStorageVersionOptions[0] : []\n      };\n      this.setState({\n        storageLocationOptions,\n        sampleStorageVersionOptions,\n        selectedRecordFilter: { ...selectedRecordFilter,\n          [fieldName]: comboData\n        },\n        loading: false\n      });\n    }).catch(error => {\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n\n      this.setState({\n        loading: false\n      });\n    });\n  }\n\n  addSampleStorageMapping() {\n    this.setState({\n      loading: true\n    });\n    let selectedRecord = this.state.selectedRecord;\n    let inputParamData = {\n      // nstoragecategorycode: this.state.selectedRecordFilter[\"nstoragecategorycode\"].value,\n      nsamplestoragelocationcode: this.state.masterData.selectedSampleStorageLocation.nsamplestoragelocationcode,\n      // nsamplestorageversioncode: this.state.selectedRecordFilter[\"nsamplestorageversioncode\"].value,\n      userinfo: this.props.Login.userInfo\n    };\n    let urlArray = [];\n    const url1 = rsapi.post(\"samplestorageretrieval/addSampleStorageMapping\", inputParamData);\n    const url2 = rsapi.post(\"product/getProduct\", {\n      'userinfo': this.props.Login.userInfo\n    });\n    const url3 = rsapi.post(\"containertype/getContainerType\", {\n      'userinfo': this.props.Login.userInfo\n    });\n    urlArray = [url1, url2];\n    Axios.all(urlArray).then(response => {\n      const storageMappingMap = constructOptionList(response[0].data['samplestoragecontainerpath'] || [], \"nsamplestoragecontainerpathcode\", \"scontainerpath\", undefined, undefined, true);\n      const storageMappingMapList = storageMappingMap.get(\"OptionList\");\n      let containerStructure = response[0].data['containerStructure'];\n      const containerTypeMap = constructOptionList(response[0].data['containerType'] || [], \"ncontainertypecode\", \"scontainertype\", undefined, undefined, true);\n      const containerTypeList = containerTypeMap.get(\"OptionList\");\n      const directionmasterMap = constructOptionList(response[0].data['directionmaster'] || [], \"ndirectionmastercode\", \"sdirection\", undefined, undefined, true);\n      const directionmasterList = directionmasterMap.get(\"OptionList\");\n      const containerstructureMap = constructOptionList(response[0].data['containerStructure'] || [], \"ncontainerstructurecode\", \"scontainerstructurename\", undefined, undefined, true);\n      const containerstructureList = containerstructureMap.get(\"OptionList\");\n      const productMap = constructOptionList(response[1].data['Product'] || [], \"nproductcode\", \"sproductname\", undefined, undefined, true);\n      const productList = productMap.get(\"OptionList\");\n      this.setState({\n        openModal: true,\n        selectedRecord: { ...selectedRecord,\n          storageMappingMapOptions: storageMappingMapList,\n          productOptions: productList,\n          containerTypeOptions: containerTypeList,\n          directionmasterOptions: directionmasterList,\n          // ncontainertypecode: containerTypeList[0],\n          // containerStructureOptions: containerstructureList,\n          // ncontainerstructurecode: containerstructureList[0],\n          nrow: containerStructure.length > 0 ? containerStructure[0].nrow : 1,\n          ncolumn: containerStructure.length > 0 ? containerStructure[0].ncolumn : 1,\n          isInitialRender: true\n        },\n        openSpreadSheet: false,\n        operation: 'create',\n        loading: false\n      });\n    }).catch(error => {\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n\n      this.setState({\n        loading: false\n      });\n    });\n  }\n\n  getprojectbarcodeconfig(nflag) {\n    let inputParamData = {};\n    this.setState({\n      loading: true\n    });\n    let obj = convertDateValuetoString(this.state.masterData.fromDate, this.state.masterData.toDate, this.props.Login.userInfo);\n    inputParamData = {\n      nprojecttypecode: this.state.selectedProjectType.nprojecttypecode.value,\n      isFilterSubmit: nflag,\n      // fromDate: rearrangeDateFormat(this.props.Login.userInfo, this.state.masterData.fromDate),\n      // toDate: rearrangeDateFormat(this.props.Login.userInfo, this.state.masterData.toDate),\n      fromDate: obj.fromDate,\n      toDate: obj.toDate,\n      userinfo: this.props.Login.userInfo\n    };\n    let urlArray = [];\n    const url1 = rsapi.post(\"samplestorageretrieval/getProjectbarcodeconfig\", inputParamData);\n    urlArray = [url1];\n    Axios.all(urlArray).then(response => {\n      let masterData = this.state.masterData.samplestorageretrieval;\n      this.setState(nflag == false ? {\n        selectedProjectTypeList: sortData(response[0].data.selectedProjectTypeList),\n        // selectedRecord: {\n        //     nprojecttypecode: { label: comboData.label, value: comboData.value }\n        // },\n        loading: false\n      } : {\n        selectedProjectTypeList: sortData(response[0].data.selectedProjectTypeList),\n        breadCrumbdata: {\n          breadcrumbprojecttype: {\n            value: this.state.selectedProjectType.nprojecttypecode.label\n          },\n          ...convertDateValuetoString(this.state.masterData.fromDate, this.state.masterData.toDate, this.props.Login.userInfo)\n        },\n        masterData: { ...this.state.masterData,\n          fromDate: rearrangeDateFormat(this.props.Login.userInfo, this.state.masterData.fromDate),\n          toDate: rearrangeDateFormat(this.props.Login.userInfo, this.state.masterData.toDate),\n          samplestorageretrieval: response[0].data.samplestorageretrieval\n        },\n        loading: false\n      });\n    }).catch(error => {\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n\n      this.setState({\n        loading: false\n      });\n    });\n  }\n\n  getContainerStructure(inputData, fieldName, comboData) {\n    let inputParamData = {};\n    this.setState({\n      loading: true\n    });\n    inputParamData = {\n      ncontainertypecode: comboData.value,\n      userinfo: inputData.userinfo\n    };\n    let urlArray = [];\n    const url1 = rsapi.post(\"samplestorageretrieval/getContainerStructure\", inputParamData);\n    urlArray = [url1];\n    Axios.all(urlArray).then(response => {\n      let {\n        containerStructureOptions,\n        selectedRecord\n      } = this.state;\n      let containerStructureList = constructOptionList(response[0].data.containerStructure || [], \"ncontainerstructurecode\", \"scontainerstructurename\", undefined, undefined, undefined);\n      containerStructureOptions = containerStructureList.get(\"OptionList\");\n      selectedRecord = { ...selectedRecord,\n        nrow: containerStructureOptions.length > 0 ? containerStructureOptions[0].item.nrow : 1,\n        ncolumn: containerStructureOptions.length > 0 ? containerStructureOptions[0].item.ncolumn : 1,\n        ncontainerstructurecode: containerStructureOptions.length > 0 ? containerStructureOptions[0] : [],\n        containerStructureOptions: containerStructureOptions.length > 0 ? [...containerStructureOptions] : []\n      };\n      this.setState({\n        selectedRecord: { ...selectedRecord,\n          [fieldName]: comboData\n        },\n        loading: false\n      });\n    }).catch(error => {\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n\n      this.setState({\n        loading: false\n      });\n    });\n  }\n\n  getSelectedBarcodeData(e, inputParam) {\n    if (e.keyCode === 13) {\n      this.setState({\n        loading: true\n      });\n      let selectedRecord = this.state.selectedRecord || {};\n      let urlArray = [];\n      const url1 = rsapi.post(\"/samplestorageretrieval/getSelectedBarcodeData\", {\n        // nprojecttypecode: this.state.selectedBarcodeValue.nprojecttypecode,\n        spositionvalue: inputParam.spositionvalue,\n        userinfo: this.props.Login.userInfo\n      });\n      urlArray = [url1];\n      Axios.all(urlArray).then(response => {\n        let dynamicfields = [];\n        dynamicfields = [{\n          \"idsName\": \"IDS_SAMPLEID\",\n          \"dataField\": \"spositionvalue\",\n          \"width\": \"200px\",\n          \"staticField\": true\n        }, {\n          \"idsName\": \"IDS_POSITION\",\n          \"dataField\": \"sposition\",\n          \"width\": \"200px\",\n          \"staticField\": true\n        }, {\n          \"idsName\": \"IDS_QUANTITY\",\n          \"dataField\": \"nquantity\",\n          \"width\": \"200px\",\n          \"staticField\": true\n        }, {\n          \"idsName\": \"IDS_UNIT\",\n          \"dataField\": \"sunitname\",\n          \"width\": \"200px\",\n          \"staticField\": true\n        }];\n        const temparray2 = response[0].data['selectedProjectTypeList'] && response[0].data['selectedProjectTypeList'].map(option => {\n          return {\n            \"idsName\": option.sfieldname,\n            \"dataField\": option.sfieldname,\n            \"width\": \"200px\"\n          };\n        });\n        dynamicfields = [...dynamicfields, ...temparray2];\n        this.setState({\n          dynamicfields,\n          selectedBarcodeValue: { ...response[0].data['selectedBarcodeValue']\n          },\n          loading: false\n        });\n      }).catch(error => {\n        this.setState({\n          loading: false\n        });\n\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          this.setState({\n            dynamicfields: [],\n            selectedBarcodeValue: {}\n          });\n          toast.info(error.response.data);\n        }\n      });\n    }\n  }\n\n  getDynamicFilterExecuteData(nflag) {\n    let selectedRecord = this.state.selectedRecord || {};\n\n    if (nflag === 2 ? true : selectedRecord.filterquery && selectedRecord.filterquery !== \"\") {\n      this.setState({\n        loading: true\n      });\n      let obj = {\n        // ...inputParam.component, \n        label: 'samplestorageretrieval',\n        valuemember: 'nsamplestorageretrievalcode',\n        filterquery: nflag === 2 ? this.state.submittedselectedRecord.filterquery : selectedRecord.filterquery,\n        fromDate: rearrangeDateFormat(this.props.Login.userInfo, this.state.masterData.fromDate),\n        toDate: rearrangeDateFormat(this.props.Login.userInfo, this.state.masterData.toDate),\n        nprojecttypecode: this.state.selectedProjectType.nprojecttypecode.value,\n        source: 'view_sampleretrieval_' + this.state.selectedProjectType.nprojecttypecode.value,\n        userinfo: this.props.Login.userInfo\n      };\n      let urlArray = [];\n      const url1 = rsapi.post(\"/samplestorageretrieval/getdynamicfilterexecutedata\", obj);\n      urlArray = [url1];\n      Axios.all(urlArray).then(response => {\n        let masterData = this.state.masterData;\n        masterData = { ...masterData,\n          ...response[0].data\n        };\n        this.setState({\n          masterData: { ...masterData\n          },\n          loading: false,\n          openModal: false,\n          isFilterPopup: false,\n          submittedselectedRecord: nflag === 2 ? { ...this.state.submittedselectedRecord\n          } : { ...selectedRecord\n          },\n          selectedRecord: {},\n          displayQuery: this.state.tree ? QbUtils.queryString(this.state.tree, this.state.config, true) : \"\"\n        });\n      }).catch(error => {\n        this.setState({\n          loading: false\n        });\n\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.info(error.response.data.rtn);\n        }\n      });\n    } else {\n      toast.warn(this.props.intl.formatMessage({\n        id: \"IDS_SELECTAFILTER\"\n      }));\n    }\n  } // getDynamicFilterExecuteData(nflag) {\n  //     this.setState({ loading: true })\n  //     let selectedRecord = this.state.selectedRecord || {};\n  //     let obj = {// ...inputParam.component, \n  //         label: 'samplestorageretrieval', valuemember: 'nsamplestoragetransactioncode',\n  //         filterquery:   \n  //         selectedRecord.filterquery, source: 'view_sampleretrieval', userinfo: this.props.Login.userInfo\n  //     }\n  //     let urlArray = [];\n  //     const url1 = rsapi.post(\"/samplestorageretrieval/getdynamicfilterexecutedata\", obj);\n  //     urlArray = [url1];\n  //     Axios.all(urlArray)\n  //         .then(response => {\n  //             console.log(response)\n  //             let masterData = this.state.masterData\n  //             masterData = { ...masterData, ...response[0].data }\n  //             this.setState({\n  //                 masterData: { ...masterData },\n  //                 loading: false,\n  //                 openModal: false,\n  //                 submittedselectedRecord: nflag === 2 ?\n  //                     { ...this.state.submittedselectedRecord }\n  //                     :\n  //                     { ...selectedRecord }\n  //                 ,\n  //                 isFilterPopup: false,\n  //                 selectedRecord: {}\n  //             })\n  //         })\n  //         .catch(error => {\n  //             this.setState({\n  //                 loading: false\n  //             });\n  //             if (error.response.status === 500) {\n  //                 toast.error(error.message);\n  //             }\n  //             else {\n  //                 toast.info(error.response.data.rtn);\n  //             }\n  //         })\n  // }\n\n\n  shouldComponentUpdate(nextProps, nextState) {\n    if (this.state.openModal && nextState.isInitialRender === false && nextState.selectedRecord !== this.state.selectedRecord) {\n      return false;\n    } else if (this.state.openModal && nextState.isInitialRender === false && nextState.sheetData !== this.state.sheetData) {\n      return false;\n    } else {\n      return true;\n    }\n  }\n\n  gridfillingColumn(data) {\n    //  const tempArray = [];\n    const temparray1 = [{\n      \"idsName\": \"IDS_SAMPLEID\",\n      \"dataField\": \"spositionvalue\",\n      \"width\": \"200px\",\n      \"staticField\": true\n    }, {\n      \"idsName\": \"IDS_STORAGESTRUCTURE\",\n      \"dataField\": \"ssamplestoragelocationname\",\n      \"width\": \"200px\",\n      \"staticField\": true\n    }, {\n      \"idsName\": \"IDS_PATHWITHPOSITION\",\n      \"dataField\": \"scontainerpathwithposition\",\n      \"width\": \"500px\",\n      \"staticField\": true\n    }, {\n      \"idsName\": \"IDS_CONTAINERID\",\n      \"dataField\": \"sboxid\",\n      \"width\": \"200px\",\n      \"staticField\": true\n    }, //  { \"idsName\": \"IDS_POSITION\", \"dataField\": \"sposition\", \"width\": \"200px\", \"staticField\": true },\n    {\n      \"idsName\": \"IDS_QUANTITY\",\n      \"dataField\": \"nquantity\",\n      \"width\": \"200px\",\n      \"staticField\": true\n    }, {\n      \"idsName\": \"IDS_UNIT\",\n      \"dataField\": \"sunitname\",\n      \"width\": \"200px\",\n      \"staticField\": true\n    }, {\n      \"idsName\": \"IDS_TRANSACTIONSTATUS\",\n      \"dataField\": \"stransdisplaystatus\",\n      \"width\": \"200px\",\n      \"staticField\": true\n    }, {\n      \"idsName\": \"IDS_TRANSACTIONDATE\",\n      \"dataField\": \"dtransactiondate\",\n      \"width\": \"200px\",\n      \"staticField\": true\n    }, {\n      \"idsName\": \"IDS_USERNAME\",\n      \"dataField\": \"susername\",\n      \"width\": \"200px\",\n      \"staticField\": true\n    }, {\n      \"idsName\": \"IDS_USERROLE\",\n      \"dataField\": \"suserrolename\",\n      \"width\": \"200px\",\n      \"staticField\": true\n    }, {\n      \"idsName\": \"IDS_COMMENTS\",\n      \"dataField\": \"scomments\",\n      \"width\": \"200px\",\n      \"staticField\": true\n    }];\n    const temparray2 = data && data.map(option => {\n      return {\n        \"idsName\": option.sfieldname,\n        \"dataField\": option.sfieldname,\n        \"width\": \"200px\"\n      };\n    });\n    const newArray = [...temparray1, ...temparray2];\n    return newArray;\n  }\n\n  render() {\n    const addId = this.state.controlMap.has(\"Add samplestorageretrieval\") && this.state.controlMap.get(\"Add samplestorageretrieval\").ncontrolcode;\n    const editId = this.state.controlMap.has(\"Edit SampleStorageLocation\") && this.state.controlMap.get(\"Edit SampleStorageLocation\").ncontrolcode;\n    const deleteId = this.state.controlMap.has(\"Delete SampleStorageLocation\") && this.state.controlMap.get(\"Delete SampleStorageLocation\").ncontrolcode;\n    const copyId = this.state.controlMap.has(\"Copy SampleStorageLocation\") && this.state.controlMap.get(\"Copy SampleStorageLocation\").ncontrolcode;\n    const approveId = this.state.controlMap.has(\"Approve SampleStorageLocation\") && this.state.controlMap.get(\"Approve SampleStorageLocation\").ncontrolcode;\n    const retrievedispose = this.state.controlMap.has(\"Retrieve/Dispose\") && this.state.controlMap.get(\"Retrieve/Dispose\").ncontrolcode;\n    let fromDate = this.state.masterData && this.state.masterData.fromDate ? rearrangeDateFormat(this.props.Login.userInfo, this.state.masterData.fromDate) : new Date();\n    let toDate = this.state.masterData && this.state.masterData.toDate ? rearrangeDateFormat(this.props.Login.userInfo, this.state.masterData.toDate) : new Date(); //  let obj = convertDateValuetoString(this.props.Login.masterData.realfromDate, this.props.Login.masterData.realtoDate, this.props.Login.userInfo);\n\n    const extractedColumnList = this.state.selectedProjectTypeList ? this.gridfillingColumn(this.state.selectedProjectTypeList) : [];\n    let fields = {};\n\n    if (extractedColumnList.length > 0) {\n      extractedColumnList.map(field => {\n        field.hasOwnProperty(\"staticField\") ? fields = { ...fields,\n          [field.dataField]: {\n            \"label\": this.props.intl.formatMessage({\n              id: field.idsName\n            }),\n            \"type\": \"text\",\n            \"valueSources\": [\"value\", \"func\"],\n            \"mainWidgetProps\": {\n              \"valueLabel\": \"Name\",\n              \"valuePlaceholder\": this.props.intl.formatMessage({\n                id: field.idsName\n              })\n            }\n          }\n        } : fields = { ...fields,\n          ['\"' + field.dataField + '\"']: {\n            \"label\": field.dataField,\n            \"type\": \"text\",\n            \"valueSources\": [\"value\", \"func\"],\n            \"mainWidgetProps\": {\n              \"valueLabel\": \"Name\",\n              \"valuePlaceholder\": field.dataField\n            }\n          }\n        };\n      });\n    }\n\n    const filterParam = {\n      inputListName: \"sampleStorageLocation\",\n      selectedObject: \"selectedSampleStorageLocation\",\n      primaryKeyField: \"nsamplestoragelocationcode\",\n      fetchUrl: \"samplestorageretrieval/getActiveSampleStorageMappingById\",\n      fecthInputObject: {\n        userinfo: this.props.Login.userInfo\n      },\n      masterData: this.props.Login.masterData,\n      searchFieldList: [\"ssamplestoragelocationname\"]\n    };\n    const breadCrumbData = [{\n      \"label\": \"IDS_FROM\",\n      \"value\": this.state.breadCrumbdata && this.state.breadCrumbdata.breadCrumbFrom ? this.state.breadCrumbdata.breadCrumbFrom : 'IDS_NA'\n    }, {\n      \"label\": \"IDS_TO\",\n      \"value\": this.state.breadCrumbdata && this.state.breadCrumbdata.breadCrumbto ? this.state.breadCrumbdata.breadCrumbto : 'IDS_NA'\n    }, {\n      \"label\": \"IDS_PROJECTTYPE\",\n      \"value\": this.state.breadCrumbdata && this.state.breadCrumbdata.breadcrumbprojecttype ? this.state.breadCrumbdata.breadcrumbprojecttype.value : 'IDS_NA'\n    }];\n    const confirmMessage = new ConfirmMessage();\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Preloader, {\n      loading: this.state.loading,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1729,\n        columnNumber: 17\n      }\n    }),\n    /*#__PURE__*/\n    //this.state.retrievalType === 1 ?\n    React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(ListWrapper, {\n      className: \"client-listing-wrap toolbar-top-wrap mtop-4 screen-height-window\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1733,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(BreadcrumbComponent, {\n      breadCrumbItem: breadCrumbData,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1734,\n        columnNumber: 29\n      }\n    }), /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1737,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1738,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(InputGroup.Append, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1739,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(AdvFilter, {\n      filterComponent: [{\n        \"IDS_SAMPLESTORAGERETRIEVEFILTER\": /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Col, {\n          md: 12,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1743,\n            columnNumber: 65\n          }\n        }, /*#__PURE__*/React.createElement(Row, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1744,\n            columnNumber: 69\n          }\n        }, /*#__PURE__*/React.createElement(Col, {\n          md: 6,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1745,\n            columnNumber: 73\n          }\n        }, /*#__PURE__*/React.createElement(DateTimePicker, {\n          name: \"fromdate\",\n          label: this.props.intl.formatMessage({\n            id: \"IDS_FROM\"\n          }),\n          className: \"form-control\",\n          placeholderText: this.props.intl.formatMessage({\n            id: \"IDS_FROM\"\n          }),\n          selected: fromDate,\n          value: fromDate,\n          dateFormat: this.props.Login.userInfo.ssitedate,\n          isClearable: false,\n          onChange: date => this.handleFilterDateChange(\"fromDate\", date),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1746,\n            columnNumber: 77\n          }\n        })), /*#__PURE__*/React.createElement(Col, {\n          md: 6,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1759,\n            columnNumber: 73\n          }\n        }, /*#__PURE__*/React.createElement(DateTimePicker, {\n          name: \"todate\",\n          label: this.props.intl.formatMessage({\n            id: \"IDS_TO\"\n          }),\n          className: \"form-control\",\n          placeholderText: this.props.intl.formatMessage({\n            id: \"IDS_TO\"\n          }),\n          selected: toDate,\n          value: toDate,\n          dateFormat: this.props.Login.userInfo.ssitedate,\n          isClearable: false,\n          onChange: date => this.handleFilterDateChange(\"toDate\", date),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1760,\n            columnNumber: 77\n          }\n        }))), /*#__PURE__*/React.createElement(Row, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1774,\n            columnNumber: 69\n          }\n        }, /*#__PURE__*/React.createElement(Col, {\n          md: 12,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1775,\n            columnNumber: 73\n          }\n        }, /*#__PURE__*/React.createElement(FormSelectSearch, {\n          name: \"nprojecttypecode\",\n          as: \"select\",\n          onChange: event => this.onComboChange(event, 'nprojecttypecode'),\n          formLabel: this.props.intl.formatMessage({\n            id: \"IDS_PROJECTTYPE\"\n          }),\n          isMandatory: this.state.selectedRecord[\"nneedposition\"],\n          value: this.state.selectedProjectType && this.state.selectedProjectType[\"nprojecttypecode\"] ? this.state.selectedProjectType[\"nprojecttypecode\"] || [] : [],\n          options: this.state.masterData && this.state.masterData.projectbarcodeconfig || [],\n          optionId: \"value\",\n          optionValue: \"label\",\n          isMulti: false,\n          isDisabled: false,\n          isSearchable: false,\n          isClearable: false,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1776,\n            columnNumber: 77\n          }\n        })))))\n      }],\n      dataFor: \"tooltip_list_wrap\",\n      onFilterSubmit: this.onFilterSubmit,\n      showFilter: this.state.showFilter,\n      openFilter: this.openFilter,\n      closeFilter: this.closeFilter,\n      showModalBg: e => this.setState({\n        showModalBg: e\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1740,\n        columnNumber: 49\n      }\n    })))), this.state.selectedProjectTypeList && /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1809,\n        columnNumber: 41\n      }\n    }, \" \", /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1809,\n        columnNumber: 47\n      }\n    }, /*#__PURE__*/React.createElement(DataGrid // isDownloadPDFRequired={this.state.masterData && this.state.masterData.samplestorageretrieval &&\n    //     this.processWithGroups(this.state.masterData.samplestorageretrieval || [],\n    //         this.state.dataStateChange ? this.state.dataStateChange : {\n    //             take: 10,\n    //             skip: 0\n    //         }).data.length > 0 ?\n    //     true : false}\n    // isDownloadExcelRequired={this.state.masterData && this.state.masterData.samplestorageretrieval &&\n    //     this.processWithGroups(this.state.masterData.samplestorageretrieval || [],\n    //         this.state.dataStateChange ? this.state.dataStateChange : {\n    //             take: 10,\n    //             skip: 0\n    //         }).data.length > 0 ?\n    //     true : false}\n    , {\n      isCustomButton: true,\n      customButtonlist: [//     {\n      //     label: 'IDS_SEARCH',\n      //     id: {},\n      //     onClick: () => this.opensearch(),\n      //     controlname: 'faSearch'\n      // },\n      {\n        label: 'IDS_RETRIEVEDISPOSE',\n        id: {},\n        hidden: this.state.userRoleControlRights.indexOf(retrievedispose) === -1,\n        onClick: () => this.openRetrieveDispose(),\n        controlname: 'faRecycle'\n      }],\n      isRefreshRequired: false // onGroupChange={this.handleGroupChange}\n      ,\n      primaryKeyField: 'nsamplestoragetransactioncode',\n      data: this.state.masterData && this.state.masterData.samplestorageretrieval,\n      dataResult: this.state.masterData && this.state.masterData.samplestorageretrieval ? process(this.state.masterData.samplestorageretrieval || [], this.state.dataStateChange ? this.state.dataStateChange : {\n        skip: 0,\n        take: 10\n      }) : [] // this.processWithGroups(this.state.masterData.samplestorageretrieval || [],\n      //     this.state.dataStateChange ? this.state.dataStateChange : {\n      //         take: 10,\n      //         skip: 0\n      //     })\n      ,\n      dataState: this.state.dataStateChange ? this.state.dataStateChange : {\n        skip: 0,\n        take: 10\n      },\n      dataStateChange: this.dataStateChange,\n      extractedColumnList: extractedColumnList,\n      controlMap: this.state.controlMap,\n      userRoleControlRights: this.state.userRoleControlRights,\n      userInfo: this.props.Login.userInfo,\n      deleteRecord: this.deleteRecord,\n      addRecord: () => this.openStorageMapping(),\n      pageable: true,\n      scrollable: 'scrollable' // isComponent={true}\n      ,\n      gridHeight: '600px' // isActionRequired={true}\n      ,\n      isToolBarRequired: true // actionIcons={\n      //     [{\n      //         title: this.props.intl.formatMessage({ id: \"IDS_ADDSAMPLE\" }),\n      //         controlname: \"faPenSquare\",\n      //         hidden: false,\n      //         objectName: \"add\",\n      //         onClick: (param) => this.addSample(param, 1)\n      //     }]}\n      ,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1810,\n        columnNumber: 45\n      }\n    })))))), this.state.openModal && /*#__PURE__*/React.createElement(SlideOutModal, {\n      show: this.state.openModal,\n      closeModal: this.closeModal,\n      hideSave: true,\n      showSubmit: false,\n      needClose: true,\n      size: this.state.openSpreadSheet || this.state.isFilterPopup ? 'xl' : \"\",\n      operation: \"\",\n      inputParam: this.props.Login.inputParam,\n      screenName: this.state.isRetrieveOrDispose ? this.props.intl.formatMessage({\n        id: \"IDS_RETRIEVEORDISPOSESAMPLE\"\n      }) : this.state.isFilterPopup ? \"\" : this.state.isMultiSampleAdd ? this.props.intl.formatMessage({\n        id: \"IDS_STORAGESTRUCTURE\"\n      }) : this.state.editedsheetData.scontainerpath,\n      onSaveClick: this.state.isFilterPopup ? this.getDynamicFilterExecuteData.bind(this) : this.onSampleMappingSaveClick,\n      esign: this.props.Login.loadEsign // className={\"wide-popup\"}\n      ,\n      validateEsign: this.validateEsign,\n      masterStatus: this.props.Login.masterStatus,\n      updateStore: this.props.updateStore,\n      selectedRecord: this.state.selectedRecord || {},\n      addComponent: this.state.isRetrieveOrDispose ? /*#__PURE__*/React.createElement(Col, {\n        md: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1957,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1958,\n          columnNumber: 37\n        }\n      }, /*#__PURE__*/React.createElement(Col, {\n        md: 6,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1959,\n          columnNumber: 41\n        }\n      }, /*#__PURE__*/React.createElement(FormInput, {\n        name: 'spositionvalue',\n        label: this.props.intl.formatMessage({\n          id: \"IDS_SAMPLEID\"\n        }),\n        placeholder: this.props.intl.formatMessage({\n          id: \"IDS_SAMPLEID\"\n        }),\n        value: this.state.selectedRecord['spositionvalue'] ? this.state.selectedRecord['spositionvalue'] : \"\",\n        maxLength: 20,\n        isMandatory: true,\n        isDisabled: this.props.isDisabled,\n        onKeyDown: event => this.getSelectedBarcodeData(event, this.state.selectedRecord),\n        onChange: event => this.onInputOnChange(event),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1960,\n          columnNumber: 45\n        }\n      })), /*#__PURE__*/React.createElement(Col, {\n        md: 3,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1973,\n          columnNumber: 41\n        }\n      }, /*#__PURE__*/React.createElement(\"button\", {\n        className: \"btn btn-primary\",\n        style: {\n          float: \"right\",\n          marginRight: \"1rem\"\n        },\n        onClick: () => this.CRUDSampleStorageTransaction({\n          'nsamplestoragetransactioncode': this.state.selectedBarcodeValue && this.state.selectedBarcodeValue.nsamplestoragetransactioncode,\n          userinfo: this.props.Login.userInfo,\n          scomments: this.state.selectedRecord.scomments && this.state.selectedRecord.scomments !== \"\" ? this.state.selectedRecord.scomments : \"-\",\n          isRetrieve: true,\n          spositionvalue: this.state.selectedRecord.spositionvalue\n        }, 'create'),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1986,\n          columnNumber: 45\n        }\n      }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n        icon: faTrashRestore,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1995,\n          columnNumber: 49\n        }\n      }), \"  \", this.props.intl.formatMessage({\n        id: \"IDS_RETRIEVE\"\n      }))), /*#__PURE__*/React.createElement(Col, {\n        md: 3,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1999,\n          columnNumber: 41\n        }\n      }, /*#__PURE__*/React.createElement(\"button\", {\n        className: \"btn btn-primary\",\n        style: {\n          float: \"right\",\n          marginRight: \"1rem\"\n        },\n        onClick: () => this.CRUDSampleStorageTransaction({\n          'nsamplestoragetransactioncode': this.state.selectedBarcodeValue && this.state.selectedBarcodeValue.nsamplestoragetransactioncode,\n          userinfo: this.props.Login.userInfo,\n          scomments: this.state.selectedRecord.scomments && this.state.selectedRecord.scomments !== \"\" ? this.state.selectedRecord.scomments : \"-\",\n          isRetrieve: false,\n          spositionvalue: this.state.selectedRecord.spositionvalue\n        }, 'create'),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2012,\n          columnNumber: 45\n        }\n      }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n        icon: faTrashAlt,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2021,\n          columnNumber: 49\n        }\n      }), \"  \", this.props.intl.formatMessage({\n        id: \"IDS_DISPOSE\"\n      })))), /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2026,\n          columnNumber: 37\n        }\n      }, /*#__PURE__*/React.createElement(Col, {\n        md: 6,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2027,\n          columnNumber: 41\n        }\n      }, /*#__PURE__*/React.createElement(FormInput, {\n        name: 'scomments',\n        label: this.props.intl.formatMessage({\n          id: \"IDS_COMMENTS\"\n        }),\n        placeholder: this.props.intl.formatMessage({\n          id: \"IDS_COMMENTS\"\n        }),\n        value: this.state.selectedRecord['scomments'] ? this.state.selectedRecord['scomments'] : \"\",\n        maxLength: 255,\n        onChange: event => this.onInputOnChange(event),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2028,\n          columnNumber: 45\n        }\n      }))), /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2039,\n          columnNumber: 37\n        }\n      }, this.state.dynamicfields.length > 0 && /*#__PURE__*/React.createElement(\"div\", {\n        className: \" mb-2\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2041,\n          columnNumber: 45\n        }\n      }, /*#__PURE__*/React.createElement(Card, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2042,\n          columnNumber: 49\n        }\n      }, /*#__PURE__*/React.createElement(Card.Header, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2043,\n          columnNumber: 53\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        style: {\n          display: \"inline-block\",\n          marginTop: \"1%\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2044,\n          columnNumber: 57\n        }\n      }, /*#__PURE__*/React.createElement(\"h4\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2045,\n          columnNumber: 61\n        }\n      }, this.props.intl.formatMessage({\n        id: \"IDS_SAMPLEINFO\"\n      })))), /*#__PURE__*/React.createElement(Card.Body, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2048,\n          columnNumber: 53\n        }\n      }, /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2049,\n          columnNumber: 57\n        }\n      }, this.state.dynamicfields.map((item, index) => {\n        return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Col, {\n          md: 6,\n          key: `specInfo_${index}`,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 2054,\n            columnNumber: 77\n          }\n        }, /*#__PURE__*/React.createElement(FormGroup, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 2055,\n            columnNumber: 81\n          }\n        }, /*#__PURE__*/React.createElement(FormLabel, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 2056,\n            columnNumber: 85\n          }\n        }, item.hasOwnProperty('staticField') ? this.props.intl.formatMessage({\n          id: item.idsName\n        }) : item.idsName, \"  \"), /*#__PURE__*/React.createElement(ReadOnlyText, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 2059,\n            columnNumber: 85\n          }\n        }, this.state.selectedBarcodeValue[item.dataField] === \"\" || this.state.selectedBarcodeValue[item.dataField] === undefined || this.state.selectedBarcodeValue[item.dataField] === null ? \"-\" : this.state.selectedBarcodeValue[item.dataField]))));\n      }) //:\n      // <FormLabel>{\n      //     this.props.intl.formatMessage({ id: \"IDS_NODATAFOUND\" })}  </FormLabel>\n      )))))) : this.state.isFilterPopup ? /*#__PURE__*/React.createElement(FilterQueryBuilder, {\n        fields: fields,\n        isSampleStorage: true,\n        queryArray: this.state.queryArray,\n        skip: this.state.kendoSkip,\n        take: this.state.kendoTake,\n        onChange: this.onChange,\n        tree: this.props.Login.tree !== undefined ? this.props.Login.tree : this.state.selectedRecord.tree,\n        gridColumns: this.slideList,\n        filterData: this.props.Login.slideResult || [],\n        handlePageChange: this.handlePageChangeFilter,\n        static: true,\n        userInfo: this.props.Login.userInfo,\n        updateStore: this.props.updateStore,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2079,\n          columnNumber: 37\n        }\n      }) : this.props.Login.loadEsign ? /*#__PURE__*/React.createElement(Esign, {\n        operation: this.props.Login.operation,\n        formatMessage: this.props.intl.formatMessage,\n        onInputOnChange: this.onInputOnChange,\n        inputParam: this.props.Login.inputParam,\n        selectedRecord: this.state.selectedRecord || {},\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2096,\n          columnNumber: 41\n        }\n      }) : this.state.openSpreadSheet ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(MatrixComponent, {\n        Rows: this.state.Rows || 1,\n        userInfo: this.props.Login.userInfo,\n        columns: this.state.columns || 1,\n        selectedRecord: this.state.selectedRecord.sheetData || {},\n        sheetData: this.state.sheetData || {},\n        isMultiSampleAdd: this.state.isMultiSampleAdd,\n        childSheetDataChange: this.childSheetDataChange,\n        editedsheetData: this.state.editedsheetData,\n        multipleSheetData: this.state.masterData && this.state.masterData.samplestorageretrieval && process(this.state.masterData.samplestorageretrieval || [], this.state.dataStateChange ? this.state.dataStateChange : {\n          skip: 0,\n          take: 10\n        }).data,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2104,\n          columnNumber: 45\n        }\n      })) : /*#__PURE__*/React.createElement(AddSampleStorageMapping, {\n        operation: this.state.operation,\n        selectedRecordFilter: this.state.selectedRecordFilter,\n        onInputChange: e => this.onInputChange(e),\n        onComboChange: this.onComboChange,\n        selectedRecord: this.state.selectedRecord || {},\n        childDataChange: this.childDataChange,\n        userInfo: this.props.Login.userInfo,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2118,\n          columnNumber: 45\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1936,\n        columnNumber: 21\n      }\n    }));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    Login: state.Login\n  };\n};\n\nexport default connect(mapStateToProps, {\n  callService\n})(injectIntl(SampleStorageRetrieval));","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/pages/basemaster/SampleStorageRetrieval.jsx"],"names":["React","Component","connect","injectIntl","FormattedMessage","Row","Col","Card","Nav","FormGroup","FormLabel","Form","Button","FormControl","InputGroup","FontAwesomeIcon","PerfectScrollbar","faTrashAlt","faCopy","faPencilAlt","faSync","faPlus","faThumbsUp","faBoxOpen","faBox","faLocationArrow","faFolderMinus","faFolder","faFolderOpen","faArrowRight","faSearch","faTimes","faArrowDown","faHandPointLeft","faArrowUp","faClone","faPuzzlePiece","faCalculator","faEye","faTrashRestore","toast","ListMaster","constructOptionList","convertDateValuetoString","getControlMap","onSaveMandatoryValidation","rearrangeDateFormat","searchData","searchJsonData","showEsign","sortData","ReadOnlyText","ContentPanel","SearchIcon","FormSelectSearch","DataGrid","BasicConfig","BasicFuncs","Utils","QbUtils","SlideOutModal","callService","crudMaster","validateEsignCredential","updateStore","getSelectedSampleStorageLocation","filterColumnData","changeStorageCategoryFilter","openPropertyModal","editSampleStorageLocation","approveSampleStorageLocation","getSelectedSampleStorageVersion","fetchStorageCategory","copySampleStorageVersion","crudSampleStorageLocation","DEFAULT_RETURN","ListWrapper","MediaLabel","ProductList","uuid","TreeEditable","TreeViewEditable","getItemPath","mapTree","removeItems","ConfirmMessage","AddTreeview","AddTreeProperties","Splitter","TransactionListMaster","BreadcrumbComponent","SplitterLayout","StorageCategoryFilter","transactionStatus","Esign","TreeViewDragAnalyzer","moveTreeViewItem","ModalShow","rsapi","AddSampleStorageMapping","Axios","StorageMappingFilter","Preloader","TransactionListMasterJsonView","groupBy","process","MatrixComponent","FilterQueryBuilder","Grid","GridColumn","FormInput","AdvFilter","DateTimePicker","SampleStorageRetrieval","constructor","props","dragOverCnt","isDragDrop","SEPARATOR","uniqueIDArr","countforTree","pointedItem","undefined","getitemPath","openModal","updateInfo","typeName","data","selectedRecord","loadTreeProperties","treeData","text","expanded","editable","root","id","operation","closeModal","loadEsign","Login","selectedId","state","onFilterSubmit","setState","isInitialRender","isFilterPopup","isRetrieveOrDispose","onInputChange","event","target","type","name","checked","value","onSaveClick","saveType","formRef","onSaveProperties","openSpreadSheet","CRUDSampleStorageTransaction","editedsheetData","nsamplestoragemappingcode","isMultiSampleAdd","Object","keys","sheetData","map","join","toString","nsamplestoragelocationcode","JSON","stringify","sheetUpdate","userinfo","userInfo","onSaveSampleStorageTransaction","paneSizeChange","d","splitChangeWidthPercentage","handlePageChange","e","skip","take","handleDetailPageChange","openFilter","boolean","showFilter","closeFilter","reloadData","onEditSampleStorageLocation","selectedSampleStorageVersion","editId","handleSearch","searchedTreeData","searchRef","current","isOnlyDraft","masterData","sampleStorageVersion","length","openStorageMapping","addId","addSampleStorageMapping","deletesamplestoragemapping","param","selectedSampleStorageLocation","addMultipleSample","loading","opensearch","submittedselectedRecord","openRetrieveDispose","dynamicfields","selectedBarcodeValue","addSample","nflag","urlArray","url1","post","samplestorageretrieval","item","all","then","response","parse","Rows","nrow","columns","ncolumn","catch","error","status","message","warn","onComboChange","comboData","fieldName","selectedProjectType","selectedRecordFilter","getSampleStorageLocation","nstoragecategorycode","getContainerStructure","ncontainertypecode","containerpathCodeArray","inputParam","nsamplestoragetransactioncode","parseInt","nproductcode","ndirectionmastercode","ssamplestoragemappingname","nsamplestoragecontainerpathcode","containerpathsize","nneedposition","ncontainerstructurecode","nquantity","userRoleControlRights","nformcode","ncontrolcode","screenData","getsamplestoragetransaction","childDataChange","childSheetDataChange","getActiveSampleStorageMappingById","filterValue","filterParam","primaryKeyValue","searchedData","inputListName","primaryKeyField","isjsondata","searchFieldList","fetchUrl","fecthInputObject","sortField","sortOrder","intl","formatMessage","selectedObject","forEach","unchangeList","indexOf","modalName","spositionvalue","info","getprojectbarcodeconfig","onSampleMappingSaveClick","mandatoryFields","dataStateChange","dataState","approveSampleStorageMapping","inputParamData","fetchRecord","url2","url3","storageMappingMap","storageMappingMapList","get","containerStructure","containerTypeMap","containerTypeList","directionmasterMap","directionmasterList","containerstructureMap","containerstructureList","productMap","productList","editedObject","editsampleStorageMapping","unshift","label","scontainerpath","sdirection","sproductname","scontainertype","scontainerstructurename","directionmasterOptions","storageMappingMapOptions","productOptions","containerTypeOptions","containerStructureOptions","retrievalType","onInputOnChange","handlePageChangeFilter","kendoSkip","kendoTake","onChange","immutableTree","config","sqlFormat","tree","processWithGroups","aggregates","field","aggregate","groups","group","newDataState","handleFilterDateChange","dateName","dateValue","validateEsign","inputData","sreason","nreasoncode","spredefinedreason","password","title","children","toggleAction","treeDataView","toggleActionView","panes","size","scrollable","controlMap","Map","detailSkip","detailTake","settings","selectedItem","fields","createRef","dragClue","confirmMessage","getDerivedStateFromProps","masterStatus","componentDidUpdate","previousProps","previousState","filterData","storageCategoryOptions","storageLocationOptions","sampleStorageVersionOptions","selectedProjectTypeList","breadCrumbdata","bool","sampleStorageLocation","queryBuilderFreezer","push","ssamplestoragelocationname","values","filterStorageCategory","filterStorageCategorylist","selectedStorageCategory","filter","sampleStorageLocationList","sampleStorageVersionList","nsamplestorageversioncode","sprojecttypename","nprojecttypecode","fromDate","toDate","breadcrumbprojecttype","projectbarcodeconfig","generateBreadCrumData","componentDidMount","parentHeight","height","clientHeight","firstPane","obj","breadCrumbData","selectedStorageCategoryName","isFilterSubmit","containerStructureList","getSelectedBarcodeData","keyCode","temparray2","option","sfieldname","getDynamicFilterExecuteData","filterquery","valuemember","source","displayQuery","queryString","rtn","shouldComponentUpdate","nextProps","nextState","gridfillingColumn","temparray1","newArray","render","has","deleteId","copyId","approveId","retrievedispose","Date","extractedColumnList","hasOwnProperty","dataField","idsName","breadCrumbFrom","breadCrumbto","ssitedate","date","showModalBg","hidden","onClick","controlname","deleteRecord","bind","isDisabled","float","marginRight","scomments","isRetrieve","display","marginTop","index","queryArray","slideList","slideResult","mapStateToProps"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,UAAT,EAAqBC,gBAArB,QAA6C,YAA7C;AACA,SAASC,GAAT,EAAcC,GAAd,EAAmBC,IAAnB,EAAyBC,GAAzB,EAA8BC,SAA9B,EAAyCC,SAAzC,EAAoDC,IAApD,EAA0DC,MAA1D,EAAkEC,WAAlE,EAA+EC,UAA/E,QAAiG,iBAAjG;AACA,SAASC,eAAT,QAAgC,gCAAhC;AACA,OAAOC,gBAAP,MAA6B,yBAA7B;AACA,SAASC,UAAT,EAAqBC,MAArB,EAA6BC,WAA7B,EAA0CC,MAA1C,EAAkDC,MAAlD,EAA0DC,UAA1D,EAAsEC,SAAtE,EAAiFC,KAAjF,EAAwFC,eAAxF,EAAyGC,aAAzG,EAAwHC,QAAxH,EAAkIC,YAAlI,EAAgJC,YAAhJ,EAA8JC,QAA9J,EAAwKC,OAAxK,EAAiLC,WAAjL,EAA8LC,eAA9L,EAA+MC,SAA/M,EAA0NC,OAA1N,EAAmOC,aAAnO,EAAkPC,YAAlP,EAAgQC,KAAhQ,EAAuQC,cAAvQ,QAA6R,mCAA7R;AACA,SAASC,KAAT,QAAsB,gBAAtB;AACA,OAAOC,UAAP,MAAuB,oDAAvB;AACA,SAASC,mBAAT,EAA8BC,wBAA9B,EAAwDC,aAAxD,EAAuEC,yBAAvE,EAAkGC,mBAAlG,EAAuHC,UAAvH,EAAmIC,cAAnI,EAAmJC,SAAnJ,EAA8JC,QAA9J,QAA8K,+BAA9K;AACA,SAASC,YAAT,EAAuBC,YAAvB,EAAqCC,UAArC,QAAuD,6BAAvD,C,CACA;;AACA,OAAOC,gBAAP,MAA6B,kEAA7B;AAEA,OAAOC,QAAP,MAAqB,gDAArB;AACA,SACIC,WADJ,EACiBC,UADjB,EAEIC,KAAK,IAAIC,OAFb,QAGO,iCAHP;AAKA,OAAOC,aAAP,MAA0B,gDAA1B;AACA,SACIC,WADJ,EACiBC,UADjB,EAC6BC,uBAD7B,EACsDC,WADtD,EACmEC,gCADnE,EACqGC,gBADrG,EACuHC,2BADvH,EAEIC,iBAFJ,EAEuBC,yBAFvB,EAEkDC,4BAFlD,EAEgFC,+BAFhF,EAEiHC,oBAFjH,EAEuIC,wBAFvI,EAGIC,yBAHJ,QAIO,eAJP;AAKA,SAASC,cAAT,QAA+B,0BAA/B;AACA,SAASC,WAAT,QAA4B,sCAA5B;AACA,SAASC,UAAT,EAAqBC,WAArB,QAAwC,2BAAxC,C,CACA;;AACA,SAASC,IAAT,QAAqB,QAArB;AACA,OAAOC,YAAP,MAAyB,kDAAzB;AACA,OAAOC,gBAAP,MAA6B,kEAA7B;AACA,SAASC,WAAT,EAAsBC,OAAtB,EAA+BC,WAA/B,QAAkD,gCAAlD;AACA,OAAOC,cAAP,MAA2B,0DAA3B;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,iBAAP,MAA8B,qBAA9B;AACA,SAASC,QAAT,QAAyB,8BAAzB;AACA,OAAOC,qBAAP,MAAkC,wCAAlC;AACA,OAAOC,mBAAP,MAAgC,uCAAhC;AACA,OAAOC,cAAP,MAA2B,uBAA3B;AACA,OAAOC,qBAAP,MAAkC,yBAAlC;AACA,SAASC,iBAAT,QAAkC,8BAAlC;AACA,OAAOC,KAAP,MAAkB,qBAAlB;AACA,SAASC,oBAAT,EAA+BC,gBAA/B,QAAuD,gCAAvD;AACA,OAAOC,SAAP,MAAsB,4BAAtB;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,OAAOC,uBAAP,MAAoC,2BAApC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,oBAAP,MAAiC,wBAAjC;AACA,OAAOC,SAAP,MAAsB,gDAAtB;AACA,OAAOC,6BAAP,MAA0C,gDAA1C;AAEA,SAASC,OAAT,EAAkBC,OAAlB,QAAiC,4BAAjC,C,CACA;;AACA,OAAOC,eAAP,MAA4B,kCAA5B;AACA,OAAOC,kBAAP,MAA+B,qCAA/B;AACA,SAASC,IAAT,EAAeC,UAAf,QAAiC,4BAAjC;AACA,OAAOC,SAAP,MAAsB,kDAAtB;AACA,OAAOC,SAAP,MAAsB,4BAAtB;AACA,OAAOC,cAAP,MAA2B,8DAA3B;;AAGA,MAAMC,sBAAN,SAAqChH,SAArC,CAA+C;AAU3CiH,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AADe,SATnBC,WASmB,GATL,CASK;AAAA,SARnBC,UAQmB,GARN,KAQM;AAAA,SAPnBC,SAOmB,GAPP,GAOO;AAAA,SANnBC,WAMmB,GANL,EAMK;AAAA,SALnBC,YAKmB,GALJ,CAKI;AAAA,SAJnBC,WAImB,GAJLC,SAIK;AAAA,SAHnBC,WAGmB,GAHL,EAGK;;AAAA,SAsTnBC,SAtTmB,GAsTP,MAAM;AACd,YAAMC,UAAU,GAAG;AACfC,QAAAA,QAAQ,EAAEnD,cADK;AAEfoD,QAAAA,IAAI,EAAE;AACFH,UAAAA,SAAS,EAAE,IADT;AACeI,UAAAA,cAAc,EAAE,EAD/B;AACmCC,UAAAA,kBAAkB,EAAE,KADvD;AAEFC,UAAAA,QAAQ,EAAE,CACN;AACIC,YAAAA,IAAI,EAAE,MADV;AAEIC,YAAAA,QAAQ,EAAE,IAFd;AAGIC,YAAAA,QAAQ,EAAE,IAHd;AAIIC,YAAAA,IAAI,EAAE,IAJV;AAKIC,YAAAA,EAAE,EAAExD,IAAI;AALZ,WADM,CAFR;AAUCyD,UAAAA,SAAS,EAAE;AAVZ;AAFS,OAAnB;AAeA,WAAKrB,KAAL,CAAWnD,WAAX,CAAuB6D,UAAvB;AACH,KAvUkB;;AAAA,SAwUnBY,UAxUmB,GAwUN,MAAM;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAIC,SAAS,GAAG,KAAKvB,KAAL,CAAWwB,KAAX,CAAiBD,SAAjC;AACA,UAAId,SAAS,GAAG,KAAKT,KAAL,CAAWwB,KAAX,CAAiBf,SAAjC;AACA,UAAIgB,UAAU,GAAG,KAAKzB,KAAL,CAAWwB,KAAX,CAAiBC,UAAlC;AACA,UAAIZ,cAAc,GAAG,KAAKa,KAAL,CAAWb,cAAhC,CAXe,CAWiC;;AAChD,UAAI,KAAKb,KAAL,CAAWwB,KAAX,CAAiBD,SAArB,EAAgC;AAC5B,YAAI,KAAKvB,KAAL,CAAWwB,KAAX,CAAiBH,SAAjB,KAA+B,QAA/B,IAA2C,KAAKrB,KAAL,CAAWwB,KAAX,CAAiBH,SAAjB,KAA+B,SAA1E,IAAuF,KAAKrB,KAAL,CAAWwB,KAAX,CAAiBH,SAAjB,KAA+B,MAA1H,EAAkI;AAC9HE,UAAAA,SAAS,GAAG,KAAZ;AACAd,UAAAA,SAAS,GAAG,KAAZ;AACAI,UAAAA,cAAc,GAAG,EAAjB;AACAY,UAAAA,UAAU,GAAG,IAAb;AACH,SALD,MAMK;AACDF,UAAAA,SAAS,GAAG,KAAZ;AAEH;AACJ,OAXD,MAYK;AACDd,QAAAA,SAAS,GAAG,KAAZ;AACAgB,QAAAA,UAAU,GAAG,IAAb;AACAZ,QAAAA,cAAc,GAAG,EAAjB;AACH,OA5Bc,CA8Bf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;AACA,WAAKc,cAAL;AACA,WAAKC,QAAL,CAAc;AACVf,QAAAA,cADU;AAEVJ,QAAAA,SAAS,EAAE,KAFD;AAEQoB,QAAAA,eAAe,EAAE,IAFzB;AAGRC,QAAAA,aAAa,EAAE,KAHP;AAGcC,QAAAA,mBAAmB,EAAE;AAHnC,OAAd;AAKH,KAtXkB;;AAAA,SAuXnBC,aAvXmB,GAuXFC,KAAD,IAAW;AACvB,YAAMpB,cAAc,GAAG,KAAKa,KAAL,CAAWb,cAAX,IAA6B,EAApD;;AACA,UAAIoB,KAAK,CAACC,MAAN,CAAaC,IAAb,KAAsB,UAA1B,EAAsC;AAClCtB,QAAAA,cAAc,CAACoB,KAAK,CAACC,MAAN,CAAaE,IAAd,CAAd,GAAoCH,KAAK,CAACC,MAAN,CAAaG,OAAjD;AACH,OAFD,MAEO;AACHxB,QAAAA,cAAc,CAACoB,KAAK,CAACC,MAAN,CAAaE,IAAd,CAAd,GAAoCH,KAAK,CAACC,MAAN,CAAaI,KAAjD;AACH;;AAED,WAAKV,QAAL,CAAc;AAAEf,QAAAA;AAAF,OAAd;AACH,KAhYkB;;AAAA,SAkYnB0B,WAlYmB,GAkYL,CAACC,QAAD,EAAWC,OAAX,KAAuB;AACjC,UAAI,KAAKzC,KAAL,CAAWwB,KAAX,CAAiBV,kBAAjB,KAAwC,IAA5C,EAAkD;AAC9C,aAAK4B,gBAAL,CAAsBF,QAAtB,EAAgCC,OAAhC;AACH,OAFD,MAEO,IAAI,KAAKf,KAAL,CAAWiB,eAAf,EAAgC;AACnC,aAAKC,4BAAL,CAAkC,EAC9B,GAAG,KAAKlB,KAAL,CAAWmB,eADgB;AAE9BC,UAAAA,yBAAyB,EAAE,KAAKpB,KAAL,CAAWqB,gBAAX,GACvBC,MAAM,CAACC,IAAP,CAAY,KAAKvB,KAAL,CAAWwB,SAAvB,EAAkCC,GAAlC,CAAsCL,yBAAyB,IAAIA,yBAAnE,EAA8FM,IAA9F,CAAmG,GAAnG,CADuB,GAErB,KAAK1B,KAAL,CAAWmB,eAAX,CAA2BC,yBAA3B,CAAqDO,QAArD,EAJwB;AAK9BC,UAAAA,0BAA0B,EAAE,KAAK5B,KAAL,CAAWmB,eAAX,CAA2BS,0BALzB;AAM9BJ,UAAAA,SAAS,EAAEK,IAAI,CAACC,SAAL,CAAe,KAAK9B,KAAL,CAAWwB,SAAX,GAAuB,KAAKxB,KAAL,CAAWwB,SAAlC,GAA8C,EAA7D,CANmB;AAO9BO,UAAAA,WAAW,EAAE,IAPiB;AAQ9BC,UAAAA,QAAQ,EAAE,KAAK1D,KAAL,CAAWwB,KAAX,CAAiBmC,QARG;AAS9BZ,UAAAA,gBAAgB,EAAE,KAAKrB,KAAL,CAAWqB;AATC,SAAlC,EAUG,QAVH;AAWH,OAZM,MAYA;AACH,aAAKa,8BAAL,CAAoCpB,QAApC,EAA8CC,OAA9C;AACH;AACJ,KApZkB;;AAAA,SAuZnBoB,cAvZmB,GAuZDC,CAAD,IAAO;AACpB,WAAKlC,QAAL,CAAc;AACVmC,QAAAA,0BAA0B,EAAED;AADlB,OAAd;AAGH,KA3ZkB;;AAAA,SA4ZnBE,gBA5ZmB,GA4ZAC,CAAC,IAAI;AACpB,WAAKrC,QAAL,CAAc;AACVsC,QAAAA,IAAI,EAAED,CAAC,CAACC,IADE;AAEVC,QAAAA,IAAI,EAAEF,CAAC,CAACE;AAFE,OAAd;AAIH,KAjakB;;AAAA,SAkanBC,sBAlamB,GAkaMH,CAAC,IAAI;AAC1B,WAAKrC,QAAL,CAAc;AACVsC,QAAAA,IAAI,EAAED,CAAC,CAACC,IADE;AAEVC,QAAAA,IAAI,EAAEF,CAAC,CAACE;AAFE,OAAd;AAIH,KAvakB;;AAAA,SA+cnBE,UA/cmB,GA+cN,MAAM;AACf;AACA;AACA;AACA;AACA;AACA;AAEA,UAAIC,OAAO,GAAG,CAAC,KAAK5C,KAAL,CAAW6C,UAA1B;AACA,WAAK3C,QAAL,CAAc;AAAE2C,QAAAA,UAAU,EAAED;AAAd,OAAd;AACH,KAzdkB;;AAAA,SA2dnBE,WA3dmB,GA2dL,MAAM;AAEhB;AACA;AACA;AACA;AACA;AACA,WAAK5C,QAAL,CAAc;AAAE2C,QAAAA,UAAU,EAAE;AAAd,OAAd;AACH,KAnekB;;AAAA,SAoenBE,UApemB,GAoeN,MAAM;AACf,WAAK9C,cAAL;AACH,KAtekB;;AAAA,SAuenB+C,2BAvemB,GAueW,CAACC,4BAAD,EAA+BhB,QAA/B,EAAyCiB,MAAzC,KAAoD;AAC9E,WAAKC,YAAL;AACA,WAAKjD,QAAL,CAAc;AAAEkD,QAAAA,gBAAgB,EAAEvE;AAApB,OAAd;;AACA,UAAI,KAAKwE,SAAL,CAAeC,OAAnB,EAA4B;AACxB,aAAKD,SAAL,CAAeC,OAAf,CAAuB1C,KAAvB,GAA+B,EAA/B;AACH;;AAED,UAAI2C,WAAW,GAAG,KAAlB;;AACA,UAAI,KAAKjF,KAAL,CAAWwB,KAAX,CAAiB0D,UAAjB,CAA4BC,oBAA5B,IAAoD,KAAKnF,KAAL,CAAWwB,KAAX,CAAiB0D,UAAjB,CAA4BC,oBAA5B,CAAiDC,MAAjD,GAA0D,CAAlH,EAAqH;AACjHH,QAAAA,WAAW,GAAG,IAAd;AACH;;AACD,WAAKjF,KAAL,CAAW9C,yBAAX,CAAqCyH,4BAArC,EAAmEhB,QAAnE,EAA6EsB,WAA7E,EAA0FL,MAA1F;AACH,KAnfkB;;AAAA,SAofnBS,kBApfmB,GAofGC,KAAD,IAAW;AAC5B,WAAKC,uBAAL,CAA6B;AAAE5B,QAAAA,QAAQ,EAAE,KAAK3D,KAAL,CAAWwB,KAAX,CAAiBmC,QAA7B;AAAuC2B,QAAAA;AAAvC,OAA7B;AACH,KAtfkB;;AAAA,SAufnBE,0BAvfmB,GAufWC,KAAD,IAAW;AACpC,WAAK7C,4BAAL,CAAkC;AAC9B,sCAA8B,KAAKlB,KAAL,CAAWwD,UAAX,CAAsBQ,6BAAtB,CAAoDpC,0BADpD;AAE9B,qCAA6BmC,KAAK,CAAC3C,yBAFL;AAG9BY,QAAAA,QAAQ,EAAE,KAAK1D,KAAL,CAAWwB,KAAX,CAAiBmC;AAHG,OAAlC,EAIG,QAJH;AAKH,KA7fkB;;AAAA,SA8fnBgC,iBA9fmB,GA8fEF,KAAD,IAAW;AAC3B,WAAK7D,QAAL,CAAc;AACV;AACAnB,QAAAA,SAAS,EAAE,IAFD;AAEOsC,QAAAA,gBAAgB,EAAE,IAFzB;AAE+BJ,QAAAA,eAAe,EAAE,IAFhD;AAEqD;AAC/DiD,QAAAA,OAAO,EAAE;AAHC,OAAd;AAKH,KApgBkB;;AAAA,SAqgBnBC,UArgBmB,GAqgBN,MAAM;AACf,WAAKjE,QAAL,CAAc;AACVnB,QAAAA,SAAS,EAAE,IADD;AACOqB,QAAAA,aAAa,EAAE,IADtB;AAC4BjB,QAAAA,cAAc,EAAE,EAAE,GAAG,KAAKa,KAAL,CAAWoE;AAAhB,aAClD,EAAE,GAAG,KAAKpE,KAAL,CAAWb;AAAhB;AAFM,OAAd;AAIH,KA1gBkB;;AAAA,SA2gBnBkF,mBA3gBmB,GA2gBG,MAAM;AACxB,WAAKnE,QAAL,CAAc;AACVnB,QAAAA,SAAS,EAAE,IADD;AACOsB,QAAAA,mBAAmB,EAAE,IAD5B;AAEViE,QAAAA,aAAa,EAAE,EAFL;AAGVC,QAAAA,oBAAoB,EAAE;AAHZ,OAAd;AAKH,KAjhBkB;;AAAA,SAmhBnBC,SAnhBmB,GAmhBP,CAACT,KAAD,EAAQU,KAAR,KAAkB;AAC1B,WAAKvE,QAAL,CAAc;AAAEgE,QAAAA,OAAO,EAAE;AAAX,OAAd;AACA,UAAIQ,QAAQ,GAAG,EAAf;AACA,YAAMC,IAAI,GAAGtH,KAAK,CAACuH,IAAN,CAAW,yDAAX,EACT;AACIvD,QAAAA,gBAAgB,EAAGoD,KAAK,KAAK,CAAX,GAAgB,IAAhB,GAAuB,KAD7C;AAEIrD,QAAAA,yBAAyB,EACpBqD,KAAK,KAAK,CAAX,GAAgB,KAAKzE,KAAL,CAAWwD,UAAX,CAAsBqB,sBAAtB,CAA6CpD,GAA7C,CAAiDqD,IAAI,IAAIA,IAAI,CAAC1D,yBAA9D,EAAyFM,IAAzF,CAA8F,GAA9F,CAAhB,GACMqC,KAAK,CAAC3C,yBAAN,CAAgCO,QAAhC;AAJd,OADS,CAAb;AAOA+C,MAAAA,QAAQ,GAAG,CAACC,IAAD,CAAX;AACApH,MAAAA,KAAK,CAACwH,GAAN,CAAUL,QAAV,EACKM,IADL,CACUC,QAAQ,IAAI;AACd,YAAIR,KAAK,KAAK,CAAd,EAAiB;AACb,eAAKvE,QAAL,CAAc;AACVsB,YAAAA,SAAS,EAAEK,IAAI,CAACqD,KAAL,CAAWD,QAAQ,CAAC,CAAD,CAAR,CAAY/F,IAAZ,CAAiBsC,SAA5B,CADD;AAEVzC,YAAAA,SAAS,EAAE,IAFD;AAEOsC,YAAAA,gBAAgB,EAAE,IAFzB;AAE+BJ,YAAAA,eAAe,EAAE,IAFhD;AAEqD;AAC/DiD,YAAAA,OAAO,EAAE;AAHC,WAAd;AAKH,SAND,MAMO;AACH,eAAKhE,QAAL,CAAc;AACVsB,YAAAA,SAAS,EAAEK,IAAI,CAACqD,KAAL,CAAWD,QAAQ,CAAC,CAAD,CAAR,CAAY/F,IAAZ,CAAiBsC,SAA5B,CADD;AAEVzC,YAAAA,SAAS,EAAE,IAFD;AAEOsC,YAAAA,gBAAgB,EAAE,KAFzB;AAEgCJ,YAAAA,eAAe,EAAE,IAFjD;AAGVE,YAAAA,eAAe,EAAE4C,KAHP;AAGcoB,YAAAA,IAAI,EAAEpB,KAAK,CAACqB,IAH1B;AAGgCC,YAAAA,OAAO,EAAEtB,KAAK,CAACuB,OAH/C;AAIVpB,YAAAA,OAAO,EAAE;AAJC,WAAd;AAMH;AACJ,OAhBL,EAgBOqB,KAhBP,CAgBaC,KAAK,IAAI;AACd,YAAIA,KAAK,CAACP,QAAN,CAAeQ,MAAf,KAA0B,GAA9B,EAAmC;AAC/B9L,UAAAA,KAAK,CAAC6L,KAAN,CAAYA,KAAK,CAACE,OAAlB;AACH,SAFD,MAEO;AACH/L,UAAAA,KAAK,CAACgM,IAAN,CAAWH,KAAK,CAACP,QAAN,CAAe/F,IAA1B;AACH;;AACD,aAAKgB,QAAL,CAAc;AACVgE,UAAAA,OAAO,EAAE;AADC,SAAd;AAGH,OAzBL;AA4BH,KA1jBkB;;AAAA,SA2jBnB0B,aA3jBmB,GA2jBH,CAACC,SAAD,EAAYC,SAAZ,KAA0B;AACtC,YAAM3G,cAAc,GAAG,KAAKa,KAAL,CAAWb,cAAX,IAA6B,EAApD;AACA,YAAM4G,mBAAmB,GAAG,KAAK/F,KAAL,CAAW+F,mBAAX,IAAkC,EAA9D;AACA,UAAIC,oBAAoB,GAAG,KAAKhG,KAAL,CAAWgG,oBAAX,IAAmC,EAA9D;;AAEA,UAAIF,SAAS,KAAK,sBAAlB,EAA0C;AACtC,eAAO,KAAKG,wBAAL,CAA8B;AACjCjE,UAAAA,QAAQ,EAAE,KAAK1D,KAAL,CAAWwB,KAAX,CAAiBmC,QADM;AAEjCiE,UAAAA,oBAAoB,EAAEL,SAAS,CAACjF;AAFC,SAA9B,EAGJkF,SAHI,EAGOD,SAHP,CAAP;AAIH,OALD,MAKO,IAAIC,SAAS,KAAK,oBAAlB,EAAwC;AAC3C,eAAO,KAAKK,qBAAL,CAA2B;AAC9BnE,UAAAA,QAAQ,EAAE,KAAK1D,KAAL,CAAWwB,KAAX,CAAiBmC,QADG;AAE9BmE,UAAAA,kBAAkB,EAAEP,SAAS,CAACjF;AAFA,SAA3B,EAGJkF,SAHI,EAGOD,SAHP,CAAP;AAKH,OANM,MAOF,IAAIC,SAAS,KAAK,kBAAlB,EAAsC;AACvC;AACAC,QAAAA,mBAAmB,CAACD,SAAD,CAAnB,GAAiCD,SAAjC;AACA1G,QAAAA,cAAc,CAAC2G,SAAD,CAAd,GAA4BD,SAA5B;AACA,aAAK3F,QAAL,CAAc;AAAE6F,UAAAA,mBAAF;AAAuB5G,UAAAA;AAAvB,SAAd;AACH,OALI,MAMA,IAAI2G,SAAS,KAAK,yBAAlB,EAA6C;AAC9C3G,QAAAA,cAAc,CAAC,MAAD,CAAd,GAAyB0G,SAAS,CAACf,IAAV,CAAeM,IAAf,GAAsBS,SAAS,CAACf,IAAV,CAAeM,IAArC,GAA4C,CAArE;AACAjG,QAAAA,cAAc,CAAC,SAAD,CAAd,GAA4B0G,SAAS,CAACf,IAAV,CAAeQ,OAAf,GAAyBO,SAAS,CAACf,IAAV,CAAeQ,OAAxC,GAAkD,CAA9E;AACH,OAHI,MAGE,IAAIQ,SAAS,KAAK,4BAAlB,EAAgD;AACnD,eAAO,KAAKG,wBAAL,CAA8B;AACjCjE,UAAAA,QAAQ,EAAE,KAAK1D,KAAL,CAAWwB,KAAX,CAAiBmC,QADM;AAEjCiE,UAAAA,oBAAoB,EAAE,KAAKlG,KAAL,CAAWgG,oBAAX,CAAgC,sBAAhC,EAAwDpF,KAF7C;AAGjCgB,UAAAA,0BAA0B,EAAEiE,SAAS,CAACjF;AAHL,SAA9B,EAKJkF,SALI,EAKOD,SALP,CAAP;AAMH;;AACD,UAAIC,SAAS,KAAK,2BAAlB,EAA+C;AAC3CE,QAAAA,oBAAoB,CAACF,SAAD,CAApB,GAAkCD,SAAlC;AACA,aAAK3F,QAAL,CAAc;AAAE8F,UAAAA;AAAF,SAAd;AAEH,OAJD,MAIO;AACH7G,QAAAA,cAAc,CAAC2G,SAAD,CAAd,GAA4BD,SAA5B;AACA,aAAK3F,QAAL,CAAc;AAAEf,UAAAA,cAAF;AAAkB6G,UAAAA;AAAlB,SAAd;AACH;AAGJ,KAvmBkB;;AAAA,SAymBnB9D,8BAzmBmB,GAymBepB,QAAD,IAAc;AAC3C,UAAI3B,cAAc,GAAG,KAAKa,KAAL,CAAWb,cAAhC;AACA,UAAIkH,sBAAsB,GAAG,EAA7B;;AACA,UAAI,KAAKrG,KAAL,CAAWL,SAAX,KAAyB,QAA7B,EAAuC;AACnC0G,QAAAA,sBAAsB,GAAGlH,cAAc,CAAC,iCAAD,CAAd,CAAkDsC,GAAlD,CAAsDqD,IAAI,IAAIA,IAAI,CAAClE,KAAnE,CAAzB;AACH;;AACD,YAAM0F,UAAU,GAChB;AACIC,QAAAA,6BAA6B,EAAEpH,cAAc,CAAC,+BAAD,CAAd,GAC3BqH,QAAQ,CAACrH,cAAc,CAAC,+BAAD,CAAf,CADmB,GACiC,CAFpE;AAGIyC,QAAAA,0BAA0B,EAAE,KAAK5B,KAAL,CAAWwD,UAAX,CAAsBQ,6BAAtB,CAAoDpC,0BAHpF;AAIIR,QAAAA,yBAAyB,EAAEjC,cAAc,CAAC,2BAAD,CAAd,GACvBqH,QAAQ,CAACrH,cAAc,CAAC,2BAAD,CAAf,CADe,GACiC,CALhE;AAMIiH,QAAAA,kBAAkB,EAAE,CAAC,CANzB;AAOIK,QAAAA,YAAY,EAAEtH,cAAc,CAAC,cAAD,CAAd,CAA+ByB,KAPjD;AAQI8F,QAAAA,oBAAoB,EAAE,CAAC,CAR3B;AASIC,QAAAA,yBAAyB,EAAE,GAT/B;AAUIC,QAAAA,+BAA+B,EAAE,KAAK5G,KAAL,CAAWL,SAAX,KAAyB,QAAzB,GAC7BkC,IAAI,CAACC,SAAL,CAAeuE,sBAAf,CAD6B,GACYG,QAAQ,CAACrH,cAAc,CAAC,iCAAD,CAAd,CAAkDyB,KAAnD,CAXzD;AAYIiG,QAAAA,iBAAiB,EAAER,sBAAsB,CAAC3C,MAZ9C;AAaIoD,QAAAA,aAAa,EAAE,CAbnB;AAcIC,QAAAA,uBAAuB,EAAE,CAAC,CAd9B;AAciCC,QAAAA,SAAS,EAAE7H,cAAc,CAAC,WAAD,CAAd,GACpCqH,QAAQ,CAACrH,cAAc,CAAC,WAAD,CAAf,CAD4B,GACI,CAfhD;AAgBI6C,QAAAA,QAAQ,EAAE,KAAK1D,KAAL,CAAWwB,KAAX,CAAiBmC;AAhB/B,OADA;AAmBA,YAAMuB,UAAU,GAAG,KAAKlF,KAAL,CAAWwB,KAAX,CAAiB0D,UAApC;;AACA,UAAIpJ,SAAS,CAAC,KAAKkE,KAAL,CAAWwB,KAAX,CAAiBmH,qBAAlB,EAAyC,KAAK3I,KAAL,CAAWwB,KAAX,CAAiBmC,QAAjB,CAA0BiF,SAAnE,EAA8E,KAAK5I,KAAL,CAAWwB,KAAX,CAAiBqH,YAA/F,CAAb,EAA2H;AACvH,cAAMnI,UAAU,GAAG;AACfC,UAAAA,QAAQ,EAAEnD,cADK;AAEfoD,UAAAA,IAAI,EAAE;AACFW,YAAAA,SAAS,EAAE,IADT;AACeuH,YAAAA,UAAU,EAAE;AAAEd,cAAAA,UAAF;AAAc9C,cAAAA;AAAd,aAD3B;AACuD1C,YAAAA;AADvD;AAFS,SAAnB;AAMA,aAAKxC,KAAL,CAAWnD,WAAX,CAAuB6D,UAAvB;AACH,OARD,MASK;AACD,aAAKkC,4BAAL,CAAkCoF,UAAlC,EAA8C,KAAKtG,KAAL,CAAWL,SAAzD;AACH;AACJ,KA/oBkB;;AAAA,SAgpBnB0H,2BAhpBmB,GAgpBW,CAACf,UAAD,EAAatE,QAAb,KAA0B;AACpD,WAAK9B,QAAL,CAAc;AAAEgE,QAAAA,OAAO,EAAE;AAAX,OAAd;AACA,UAAIQ,QAAQ,GAAG,EAAf;AACA,YAAMC,IAAI,GAAGtH,KAAK,CAACuH,IAAN,CAAW,oDAAX,EAAiE;AAC1E5C,QAAAA,QAAQ,EAAE,KAAK1D,KAAL,CAAWwB,KAAX,CAAiBmC;AAD+C,OAAjE,CAAb;AAGAyC,MAAAA,QAAQ,GAAG,CAACC,IAAD,CAAX;AACApH,MAAAA,KAAK,CAACwH,GAAN,CAAUL,QAAV,EACKM,IADL,CACUC,QAAQ,IAAI;AACd,aAAK/E,QAAL,CAAc;AACVsD,UAAAA,UAAU,EAAE,EACR,GAAG,KAAKxD,KAAL,CAAWwD,UADN;AACkB,eAAGyB,QAAQ,CAAC,CAAD,CAAR,CAAY/F;AADjC,WADF;AAIVgF,UAAAA,OAAO,EAAE;AAJC,SAAd;AAOH,OATL,EASOqB,KATP,CASaC,KAAK,IAAI;AACd,YAAIA,KAAK,CAACP,QAAN,CAAeQ,MAAf,KAA0B,GAA9B,EAAmC;AAC/B9L,UAAAA,KAAK,CAAC6L,KAAN,CAAYA,KAAK,CAACE,OAAlB;AACH,SAFD,MAEO;AACH/L,UAAAA,KAAK,CAACgM,IAAN,CAAWH,KAAK,CAACP,QAAN,CAAe/F,IAA1B;AACH;;AACD,aAAKgB,QAAL,CAAc;AACVgE,UAAAA,OAAO,EAAE;AADC,SAAd;AAGH,OAlBL;AAoBH,KA3qBkB;;AAAA,SA6qBnBoD,eA7qBmB,GA6qBAnI,cAAD,IAAoB;AAClC,WAAKe,QAAL,CAAc;AACVf,QAAAA,cAAc,EAAE,EACZ,GAAGA;AADS,SADN;AAIVgB,QAAAA,eAAe,EAAE;AAJP,OAAd;AAMH,KAprBkB;;AAAA,SAqrBnBoH,oBArrBmB,GAqrBK/F,SAAD,IAAe;AAElC,WAAKtB,QAAL,CAAc;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACAsB,QAAAA,SAAS,EAAE,EACP,GAAGA;AADI,SARD;AAWVrB,QAAAA,eAAe,EAAE;AAXP,OAAd;AAaH,KApsBkB;;AAAA,SAssBnBqH,iCAtsBmB,GAssBiB,CAAClB,UAAD,EAAatE,QAAb,KAA0B;AAC1D,WAAK9B,QAAL,CAAc;AAAEgE,QAAAA,OAAO,EAAE;AAAX,OAAd;AACA,UAAIQ,QAAQ,GAAG,EAAf;AACA,YAAMC,IAAI,GAAGtH,KAAK,CAACuH,IAAN,CAAW,0DAAX,EAAuE;AAChFhD,QAAAA,0BAA0B,EAAE0E,UAAU,CAAC,+BAAD,CAAV,CAA4C,CAA5C,EAA+C1E,0BADK;AAEhFI,QAAAA,QAAQ,EAAEA;AAFsE,OAAvE,CAAb;AAIA0C,MAAAA,QAAQ,GAAG,CAACC,IAAD,CAAX;AACApH,MAAAA,KAAK,CAACwH,GAAN,CAAUL,QAAV,EACKM,IADL,CACUC,QAAQ,IAAI;AACd,aAAK/E,QAAL,CAAc;AACVsD,UAAAA,UAAU,EAAE,EACR,GAAG,KAAKxD,KAAL,CAAWwD,UADN;AACkB,eAAGyB,QAAQ,CAAC,CAAD,CAAR,CAAY/F;AADjC,WADF,CAGT;AACD;AACA;AACA;AACA;AAPU;AASVgF,UAAAA,OAAO,EAAE;AATC,SAAd;AAYH,OAdL,EAcOqB,KAdP,CAcaC,KAAK,IAAI;AACd,YAAIA,KAAK,CAACP,QAAN,CAAeQ,MAAf,KAA0B,GAA9B,EAAmC;AAC/B9L,UAAAA,KAAK,CAAC6L,KAAN,CAAYA,KAAK,CAACE,OAAlB;AACH,SAFD,MAEO;AACH/L,UAAAA,KAAK,CAACgM,IAAN,CAAWH,KAAK,CAACP,QAAN,CAAe/F,IAA1B;AACH;;AACD,aAAKgB,QAAL,CAAc;AACVgE,UAAAA,OAAO,EAAE;AADC,SAAd;AAGH,OAvBL;AAyBH,KAvuBkB;;AAAA,SAwuBnB7I,gBAxuBmB,GAwuBA,CAACoM,WAAD,EAAcC,WAAd,KAA8B;AAC7C,UAAIlE,UAAU,GAAGkE,WAAW,CAAClE,UAA7B;AACA,UAAImE,eAAe,GAAG,CAAtB;AACA,UAAIC,YAAY,GAAG/I,SAAnB;;AACA,UAAI4I,WAAW,KAAK,EAApB,EAAwB;AACpB,YAAIjE,UAAU,CAACkE,WAAW,CAACG,aAAb,CAAV,IAAyCrE,UAAU,CAACkE,WAAW,CAACG,aAAb,CAAV,CAAsCnE,MAAtC,GAA+C,CAA5F,EAA+F;AAC3FiE,UAAAA,eAAe,GAAGnE,UAAU,CAACkE,WAAW,CAACG,aAAb,CAAV,CAAsC,CAAtC,EAAyCH,WAAW,CAACI,eAArD,CAAlB;AACH;AACJ,OAJD,MAKK;AACD,YAAIJ,WAAW,CAACK,UAAhB,EAA4B;AACxBH,UAAAA,YAAY,GAAGzN,cAAc,CAACsN,WAAD,EAAcjE,UAAU,CAACkE,WAAW,CAACG,aAAb,CAAxB,EAAqDH,WAAW,CAACM,eAAZ,IAA+B,EAApF,CAA7B;AACH,SAFD,MAGK;AACDJ,UAAAA,YAAY,GAAG1N,UAAU,CAACuN,WAAD,EAAcjE,UAAU,CAACkE,WAAW,CAACG,aAAb,CAAxB,EAAqDH,WAAW,CAACM,eAAZ,IAA+B,EAApF,CAAzB;AAEH;;AACD,YAAIJ,YAAY,CAAClE,MAAb,GAAsB,CAA1B,EAA6B;AACzBiE,UAAAA,eAAe,GAAGC,YAAY,CAAC,CAAD,CAAZ,CAAgBF,WAAW,CAACI,eAA5B,CAAlB;AACH;AACJ;;AAED,UAAIH,eAAe,KAAK,CAAxB,EAA2B;AACvB,aAAKzH,QAAL,CAAc;AAAEgE,UAAAA,OAAO,EAAE;AAAX,SAAd;AACA,eAAO7G,KAAK,CAACuH,IAAN,CAAW8C,WAAW,CAACO,QAAvB,EAAiC,EAAE,GAAGP,WAAW,CAACQ,gBAAjB;AAAmC,WAACR,WAAW,CAACI,eAAb,GAA+BH;AAAlE,SAAjC,EACF3C,IADE,CACGC,QAAQ,IAAI;AACdzB,UAAAA,UAAU,CAAC,cAAD,CAAV,GAA6BoE,YAA7B;AACApE,UAAAA,UAAU,GAAG,EAAE,GAAGA,UAAL;AAAiB,eAAGyB,QAAQ,CAAC/F;AAA7B,WAAb;;AAEA,cAAIwI,WAAW,CAACS,SAAhB,EAA2B;AACvB9N,YAAAA,QAAQ,CAACmJ,UAAD,EAAakE,WAAW,CAACU,SAAzB,EAAoCV,WAAW,CAACS,SAAhD,CAAR;AACH,WAFD,MAGK;AACD9N,YAAAA,QAAQ,CAACmJ,UAAD,CAAR;AACH;;AACD,eAAKtD,QAAL,CAAc;AAAEsD,YAAAA,UAAF;AAAcU,YAAAA,OAAO,EAAE,KAAvB;AAA8B1B,YAAAA,IAAI,EAAE,CAApC;AAAuCC,YAAAA,IAAI,EAAE,EAA7C;AAAiD1C,YAAAA,UAAU,EAAE;AAA7D,WAAd;AACH,SAZE,EAaFwF,KAbE,CAaIC,KAAK,IAAI;AACZ,eAAKtF,QAAL,CAAc;AAAEgE,YAAAA,OAAO,EAAE;AAAX,WAAd;;AACA,cAAIsB,KAAK,CAACP,QAAN,CAAeQ,MAAf,KAA0B,GAA9B,EAAmC;AAC/B9L,YAAAA,KAAK,CAAC6L,KAAN,CAAY,KAAKlH,KAAL,CAAW+J,IAAX,CAAgBC,aAAhB,CAA8B;AAAE5I,cAAAA,EAAE,EAAE8F,KAAK,CAACE;AAAZ,aAA9B,CAAZ;AACH,WAFD,MAGK;AACD/L,YAAAA,KAAK,CAACgM,IAAN,CAAW,KAAKrH,KAAL,CAAW+J,IAAX,CAAgBC,aAAhB,CAA8B;AAAE5I,cAAAA,EAAE,EAAE8F,KAAK,CAACP,QAAN,CAAe/F;AAArB,aAA9B,CAAX;AACH;AACJ,SArBE,CAAP;AAsBH,OAxBD,MAyBK;AACDsE,QAAAA,UAAU,CAACkE,WAAW,CAACa,cAAb,CAAV,GAAyC1J,SAAzC;AACA2E,QAAAA,UAAU,CAAC,cAAD,CAAV,GAA6B,EAA7B;AACAlC,QAAAA,MAAM,CAACC,IAAP,CAAYiC,UAAZ,EAAwBgF,OAAxB,CAAgC1D,IAAI,IAAI;AACpC,cAAIA,IAAI,KAAK4C,WAAW,CAACG,aAArB,IAAsC/C,IAAI,KAAK4C,WAAW,CAACa,cAA3D,IACGb,WAAW,CAACe,YADf,IAC+Bf,WAAW,CAACe,YAAZ,CAAyBC,OAAzB,CAAiC5D,IAAjC,MAA2C,CAAC,CAD/E,EAEItB,UAAU,CAACsB,IAAD,CAAV,GAAmB,EAAnB;AACP,SAJD;AAKA,aAAK5E,QAAL,CAAc;AACVsD,UAAAA,UADU;AACE7D,UAAAA,SAAS,EAAE,IADb;AACmBgJ,UAAAA,SAAS,EAAE9J,SAD9B;AAEVqF,UAAAA,OAAO,EAAE;AAFC,SAAd;AAKH;AACJ,KAryBkB;;AAAA,SAwyBnBhD,4BAxyBmB,GAwyBY,CAACoF,UAAD,EAAa3G,SAAb,KAA2B;AACtD,UAAI,KAAKK,KAAL,CAAWb,cAAX,IAA6B,KAAKa,KAAL,CAAWb,cAAX,CAA0ByJ,cAA1B,KAA6C,EAA1E,IACG,KAAK5I,KAAL,CAAWb,cAAX,CAA0ByJ,cAA1B,KAA6C/J,SADpD,EAC+D;AAC3D,aAAKqB,QAAL,CAAc;AAAEgE,UAAAA,OAAO,EAAE;AAAX,SAAd;AACA,YAAIQ,QAAQ,GAAG,EAAf;AACA,cAAMC,IAAI,GAAGtH,KAAK,CAACuH,IAAN,CAAW,4BAA4BjF,SAA5B,GAAwC,wBAAnD,EAA6E2G,UAA7E,CAAb;AACA5B,QAAAA,QAAQ,GAAG,CAACC,IAAD,CAAX;AACApH,QAAAA,KAAK,CAACwH,GAAN,CAAUL,QAAV,EACKM,IADL,CACUC,QAAQ,IAAI;AACd,eAAK/E,QAAL,CAAc;AACVC,YAAAA,eAAe,EAAE,IADP;AAEVhB,YAAAA,cAAc,EAAE,EAFN;AAGVqE,YAAAA,UAAU,EAAE,EACR,GAAG,KAAKxD,KAAL,CAAWwD,UADN;AACkB,iBAAGyB,QAAQ,CAAC,CAAD,CAAR,CAAY/F;AADjC,aAHF;AAMVqF,YAAAA,oBAAoB,EAAE,EANZ;AAOVD,YAAAA,aAAa,EAAE,EAPL;AAQV;AACAJ,YAAAA,OAAO,EAAE;AATC,WAAd;AAYH,SAdL,EAcOqB,KAdP,CAcaC,KAAK,IAAI;AACd,cAAIA,KAAK,CAACP,QAAN,CAAeQ,MAAf,KAA0B,GAA9B,EAAmC;AAC/B9L,YAAAA,KAAK,CAAC6L,KAAN,CAAYA,KAAK,CAACE,OAAlB;AACH,WAFD,MAEO;AACH/L,YAAAA,KAAK,CAACkP,IAAN,CAAWrD,KAAK,CAACP,QAAN,CAAe/F,IAA1B;AACH;;AACD,eAAKgB,QAAL,CAAc;AACVgE,YAAAA,OAAO,EAAE;AADC,WAAd;AAGH,SAvBL;AAwBH,OA9BD,MA8BO;AACHvK,QAAAA,KAAK,CAACkP,IAAN,CAAW,KAAKvK,KAAL,CAAW+J,IAAX,CAAgBC,aAAhB,CAA8B;AACrC5I,UAAAA,EAAE,EAAE;AADiC,SAA9B,CAAX;AAGH;AACJ,KA50BkB;;AAAA,SAy4BnBO,cAz4BmB,GAy4BF,MAAM;AACnB,WAAK6I,uBAAL,CAA6B,IAA7B,EADmB,CAEnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACH,KAj7BkB;;AAAA,SA2mCnBC,wBA3mCmB,GA2mCQ,MAAM;AAC7B,YAAMC,eAAe,GAAG,KAAKhJ,KAAL,CAAWiB,eAAX,GAA6B,EAA7B,GAAkC,KAAKjB,KAAL,CAAWb,cAAX,CAA0B,eAA1B,MAA+CN,SAA/C,IACtD,KAAKmB,KAAL,CAAWb,cAAX,CAA0B,eAA1B,MAA+C,KADO,GACC,CACvD;AACI,mBAAW,0BADf;AAC2C,qBAAa,iCADxD;AAEI,0BAAkB,YAFtB;AAEoC,uBAAe;AAFnD,OADuD,EAKvD;AACI,mBAAW,aADf;AAEI,qBAAa,cAFjB;AAEiC,0BACzB,YAHR;AAGsB,uBAAe;AAHrC,OALuD,EAUvD;AACI,mBAAW,oBADf;AAEI,qBAAa,WAFjB;AAE8B,0BACtB,WAHR;AAGqB,uBAAe;AAHpC,OAVuD,CADD,GAgBtD,CACA;AACI,mBAAW,0BADf;AAC2C,qBAAa,iCADxD;AAEI,0BAAkB,YAFtB;AAEoC,uBAAe;AAFnD,OADA,EAKA;AACI,mBAAW,aADf;AAEI,qBAAa,cAFjB;AAEiC,0BACzB,YAHR;AAGsB,uBAAe;AAHrC,OALA,EAWA;AACI,mBAAW,mBADf;AAEI,qBAAa,oBAFjB;AAEuC,0BAC/B,YAHR;AAGsB,uBAAe;AAHrC,OAXA,EAgBA;AACI,mBAAW,4BADf;AAEI,qBAAa,yBAFjB;AAE4C,0BACpC,YAHR;AAGsB,uBAAe;AAHrC,OAhBA,EAqBA;AACI,mBAAW,eADf;AAEI,qBAAa,sBAFjB;AAEyC,0BACjC,WAHR;AAGqB,uBAAe;AAHpC,OArBA,EA0BA;AACI,mBAAW,oBADf;AAEI,qBAAa,WAFjB;AAE8B,0BACtB,WAHR;AAGqB,uBAAe;AAHpC,OA1BA,CAhBJ;AAgDAnF,MAAAA,yBAAyB,CAAC,KAAKgG,KAAL,CAAWb,cAAZ,EAA4B6J,eAA5B,EACrB,KAAKnI,WADgB,CAAzB;AAEH,KA9pCkB;;AAAA,SA+pCnBoI,eA/pCmB,GA+pCA1I,KAAD,IAAW;AACzB,WAAKL,QAAL,CAAc;AACV+I,QAAAA,eAAe,EAAE1I,KAAK,CAAC2I;AADb,OAAd;AAGH,KAnqCkB;;AAAA,SAqqCnBC,2BArqCmB,GAqqCY5I,KAAD,IAAW;AACrC,UAAI6I,cAAc,GAAG,EAArB;AACA,WAAKlJ,QAAL,CAAc;AAAEgE,QAAAA,OAAO,EAAE;AAAX,OAAd;AACAkF,MAAAA,cAAc,GAAG;AACbxH,QAAAA,0BAA0B,EAAE,KAAK5B,KAAL,CAAWwD,UAAX,CAAsBQ,6BAAtB,CAAoDpC,0BADnE;AAEbI,QAAAA,QAAQ,EAAE,KAAK1D,KAAL,CAAWwB,KAAX,CAAiBmC;AAFd,OAAjB;AAIA,UAAIyC,QAAQ,GAAG,EAAf;AACA,YAAMC,IAAI,GAAGtH,KAAK,CAACuH,IAAN,CAAW,oDAAX,EAAiEwE,cAAjE,CAAb;AAEA1E,MAAAA,QAAQ,GAAG,CAACC,IAAD,CAAX;AACApH,MAAAA,KAAK,CAACwH,GAAN,CAAUL,QAAV,EACKM,IADL,CACUC,QAAQ,IAAI;AACd,aAAK/E,QAAL,CAAc;AACVsD,UAAAA,UAAU,EAAE,EACR,GAAG,KAAKxD,KAAL,CAAWwD,UADN;AAER,eAAGyB,QAAQ,CAAC,CAAD,CAAR,CAAY/F;AAFP,WADF;AAKVgF,UAAAA,OAAO,EAAE;AALC,SAAd;AAOH,OATL,EASOqB,KATP,CASaC,KAAK,IAAI;AACd,YAAIA,KAAK,CAACP,QAAN,CAAeQ,MAAf,KAA0B,GAA9B,EAAmC;AAC/B9L,UAAAA,KAAK,CAAC6L,KAAN,CAAYA,KAAK,CAACE,OAAlB;AACH,SAFD,MAEO;AACH/L,UAAAA,KAAK,CAACgM,IAAN,CAAWH,KAAK,CAACP,QAAN,CAAe/F,IAA1B;AACH;;AACD,aAAKgB,QAAL,CAAc;AACVgE,UAAAA,OAAO,EAAE;AADC,SAAd;AAGH,OAlBL;AAmBH,KAnsCkB;;AAAA,SAk1CnBmF,WAl1CmB,GAk1CJnK,IAAD,IAAU;AACpB,WAAKgB,QAAL,CAAc;AAAEgE,QAAAA,OAAO,EAAE;AAAX,OAAd;AACA,UAAI/E,cAAc,GAAG,KAAKa,KAAL,CAAWb,cAAhC;AACA,UAAIiK,cAAc,GAAG;AACjBxH,QAAAA,0BAA0B,EAAE,KAAK5B,KAAL,CAAWwD,UAAX,CAAsBQ,6BAAtB,CAAoDpC,0BAD/D;AAEjBI,QAAAA,QAAQ,EAAE,KAAK1D,KAAL,CAAWwB,KAAX,CAAiBmC;AAFV,OAArB;AAIA,UAAIyC,QAAQ,GAAG,EAAf;AACA,YAAMC,IAAI,GAAGtH,KAAK,CAACuH,IAAN,CAAW,gDAAX,EAA6DwE,cAA7D,CAAb;AAEA,YAAME,IAAI,GAAGjM,KAAK,CAACuH,IAAN,CAAW,oBAAX,EACT;AAAE,oBAAY,KAAKtG,KAAL,CAAWwB,KAAX,CAAiBmC;AAA/B,OADS,CAAb;AAGA,YAAMsH,IAAI,GAAGlM,KAAK,CAACuH,IAAN,CAAW,oDAAX,EACT;AAAE,qCAA6B1F,IAAI,CAACkC,yBAApC;AAA+D,oBAAY,KAAK9C,KAAL,CAAWwB,KAAX,CAAiBmC;AAA5F,OADS,CAAb;AAGAyC,MAAAA,QAAQ,GAAG,CAACC,IAAD,EAAO2E,IAAP,EAAaC,IAAb,CAAX;AACAhM,MAAAA,KAAK,CAACwH,GAAN,CAAUL,QAAV,EACKM,IADL,CACUC,QAAQ,IAAI;AACd,cAAMuE,iBAAiB,GAAG3P,mBAAmB,CAACoL,QAAQ,CAAC,CAAD,CAAR,CAAY/F,IAAZ,CAAiB,4BAAjB,KAAkD,EAAnD,EACzC,iCADyC,EAEzC,gBAFyC,EAEvBL,SAFuB,EAEZA,SAFY,EAED,IAFC,CAA7C;AAGA,cAAM4K,qBAAqB,GAAGD,iBAAiB,CAACE,GAAlB,CAAsB,YAAtB,CAA9B;AACA,YAAIC,kBAAkB,GAAG1E,QAAQ,CAAC,CAAD,CAAR,CAAY/F,IAAZ,CAAiB,oBAAjB,CAAzB;AAEA,cAAM0K,gBAAgB,GAAG/P,mBAAmB,CAACoL,QAAQ,CAAC,CAAD,CAAR,CAAY/F,IAAZ,CAAiB,eAAjB,KAAqC,EAAtC,EACxC,oBADwC,EAExC,gBAFwC,EAEtBL,SAFsB,EAEXA,SAFW,EAEA,IAFA,CAA5C;AAGA,cAAMgL,iBAAiB,GAAGD,gBAAgB,CAACF,GAAjB,CAAqB,YAArB,CAA1B;AAEA,cAAMI,kBAAkB,GAAGjQ,mBAAmB,CAACoL,QAAQ,CAAC,CAAD,CAAR,CAAY/F,IAAZ,CAAiB,iBAAjB,KAAuC,EAAxC,EAC1C,sBAD0C,EAE1C,YAF0C,EAE5BL,SAF4B,EAEjBA,SAFiB,EAEN,IAFM,CAA9C;AAGA,cAAMkL,mBAAmB,GAAGD,kBAAkB,CAACJ,GAAnB,CAAuB,YAAvB,CAA5B;AAGA,cAAMM,qBAAqB,GAAGnQ,mBAAmB,CAACoL,QAAQ,CAAC,CAAD,CAAR,CAAY/F,IAAZ,CAAiB,oBAAjB,KAC3C,EAD0C,EAE7C,yBAF6C,EAG7C,yBAH6C,EAGlBL,SAHkB,EAGPA,SAHO,EAGI,IAHJ,CAAjD;AAIA,cAAMoL,sBAAsB,GAAGD,qBAAqB,CAACN,GAAtB,CAA0B,YAA1B,CAA/B;AAEA,cAAMQ,UAAU,GAAGrQ,mBAAmB,CAACoL,QAAQ,CAAC,CAAD,CAAR,CAAY/F,IAAZ,CAAiB,SAAjB,KAA+B,EAAhC,EAClC,cADkC,EAElC,cAFkC,EAElBL,SAFkB,EAEPA,SAFO,EAEI,IAFJ,CAAtC;AAGA,cAAMsL,WAAW,GAAGD,UAAU,CAACR,GAAX,CAAe,YAAf,CAApB;AAEA,cAAMU,YAAY,GAAGnF,QAAQ,CAAC,CAAD,CAAR,CAAY/F,IAAZ,CAAiBmL,wBAAtC;AAEAZ,QAAAA,qBAAqB,CAACa,OAAtB,CAA8B;AAAEC,UAAAA,KAAK,EAAEH,YAAY,CAACI,cAAtB;AAAsC5J,UAAAA,KAAK,EAAEwJ,YAAY,CAACxD;AAA1D,SAA9B;AACAzH,QAAAA,cAAc,GAAG;AACbuH,UAAAA,oBAAoB,EAAE;AAAE6D,YAAAA,KAAK,EAAEH,YAAY,CAACK,UAAtB;AAAkC7J,YAAAA,KAAK,EAAEwJ,YAAY,CAAC1D;AAAtD,WADT;AAEbE,UAAAA,+BAA+B,EAAE;AAAE2D,YAAAA,KAAK,EAAEH,YAAY,CAACI,cAAtB;AAAsC5J,YAAAA,KAAK,EAAEwJ,YAAY,CAACxD;AAA1D,WAFpB;AAGbH,UAAAA,YAAY,EAAE;AAAE8D,YAAAA,KAAK,EAAEH,YAAY,CAACM,YAAtB;AAAoC9J,YAAAA,KAAK,EAAEwJ,YAAY,CAAC3D;AAAxD,WAHD;AAIbL,UAAAA,kBAAkB,EAAE;AAAEmE,YAAAA,KAAK,EAAEH,YAAY,CAACO,cAAtB;AAAsC/J,YAAAA,KAAK,EAAEwJ,YAAY,CAAChE;AAA1D,WAJP;AAKbW,UAAAA,uBAAuB,EAAE;AAAEwD,YAAAA,KAAK,EAAEH,YAAY,CAACQ,uBAAtB;AAA+ChK,YAAAA,KAAK,EAAEwJ,YAAY,CAACrD;AAAnE,WALZ;AAMbD,UAAAA,aAAa,EAAEsD,YAAY,CAACtD,aAAb,KAA+B,CAA/B,GAAmC,IAAnC,GAA0C,KAN5C;AAOb+D,UAAAA,sBAAsB,EAAEd,mBAPX;AAQb/C,UAAAA,SAAS,EAAEoD,YAAY,CAACpD,SARX;AASb5B,UAAAA,IAAI,EAAEgF,YAAY,CAAChF,IATN;AAUbE,UAAAA,OAAO,EAAE8E,YAAY,CAAC9E,OAVT;AAWblE,UAAAA,yBAAyB,EAAEgJ,YAAY,CAAChJ;AAX3B,SAAjB;AAaA,aAAKlB,QAAL,CAAc;AACVe,UAAAA,eAAe,EAAE,KADP;AAEVlC,UAAAA,SAAS,EAAE,IAFD;AAGVI,UAAAA,cAAc,EAAE,EACZ,GAAGA,cADS;AAEZ2L,YAAAA,wBAAwB,EAAErB,qBAFd;AAGZsB,YAAAA,cAAc,EAAEZ,WAHJ;AAIZa,YAAAA,oBAAoB,EAAEnB,iBAJV;AAKZoB,YAAAA,yBAAyB,EAAEhB,sBALf;AAMZ9J,YAAAA,eAAe,EAAE;AANL,WAHN;AAWVR,UAAAA,SAAS,EAAE,QAXD;AAYVuE,UAAAA,OAAO,EAAE;AAZC,SAAd;AAcH,OA5DL,EA4DOqB,KA5DP,CA4DaC,KAAK,IAAI;AACd,YAAIA,KAAK,CAACP,QAAN,CAAeQ,MAAf,KAA0B,GAA9B,EAAmC;AAC/B9L,UAAAA,KAAK,CAAC6L,KAAN,CAAYA,KAAK,CAACE,OAAlB;AACH,SAFD,MAEO;AACH/L,UAAAA,KAAK,CAACgM,IAAN,CAAWH,KAAK,CAACP,QAAN,CAAe/F,IAA1B;AACH;;AACD,aAAKgB,QAAL,CAAc;AACVgE,UAAAA,OAAO,EAAE;AADC,SAAd;AAGH,OArEL;AAsEH,KAz6CkB;;AAAA,SA26CnBgH,aA36CmB,GA26CH,MAAM;AAClB,UAAIA,aAAa,GAAG,KAAKlL,KAAL,CAAWkL,aAA/B;;AACA,UAAIA,aAAa,KAAK,CAAtB,EAAyB;AACrBA,QAAAA,aAAa,GAAG,CAAhB;AACH,OAFD,MAEO;AACHA,QAAAA,aAAa,GAAG,CAAhB;AACH;;AACD,WAAKhL,QAAL,CAAc;AAAEgL,QAAAA,aAAa,EAAEA;AAAjB,OAAd;AACH,KAn7CkB;;AAAA,SAo7CnBC,eAp7CmB,GAo7CA5K,KAAD,IAAW;AAEzB,YAAMpB,cAAc,GAAG,KAAKa,KAAL,CAAWb,cAAX,IAA6B,EAApD;;AACA,UAAIoB,KAAK,CAACC,MAAN,CAAaC,IAAb,KAAsB,UAA1B,EAAsC;AAClC,YAAIF,KAAK,CAACC,MAAN,CAAaE,IAAb,KAAsB,OAA1B,EAAmC;AAC/BvB,UAAAA,cAAc,CAACoB,KAAK,CAACC,MAAN,CAAaE,IAAd,CAAd,GAAoCH,KAAK,CAACC,MAAN,CAAaG,OAAb,KAAyB,IAAzB,GAAgC,CAAhC,GAAoC,CAAxE;AACH;AACJ,OAJD,MAKK,IAAIJ,KAAK,CAACC,MAAN,CAAaC,IAAb,KAAsB,YAA1B,EAAwC;AAEzCtB,QAAAA,cAAc,CAACoB,KAAK,CAACC,MAAN,CAAaE,IAAd,CAAd,GAAoCH,KAAK,CAACC,MAAN,CAAaI,KAAjD;AAEH,OAJI,MAKA;AACDzB,QAAAA,cAAc,CAACoB,KAAK,CAACC,MAAN,CAAaE,IAAd,CAAd,GAAoCH,KAAK,CAACC,MAAN,CAAaI,KAAjD;AACH;;AACD,WAAKV,QAAL,CAAc;AAAEf,QAAAA;AAAF,OAAd;AACH,KAr8CkB;;AAAA,SAk9CnBiM,sBAl9CmB,GAk9CO7K,KAAD,IAAW;AAChC,WAAKL,QAAL,CAAc;AAAEmL,QAAAA,SAAS,EAAE9K,KAAK,CAACiC,IAAnB;AAAyB8I,QAAAA,SAAS,EAAE/K,KAAK,CAACkC;AAA1C,OAAd;AACH,KAp9CkB;;AAAA,SAq9CnB8I,QAr9CmB,GAq9CR,CAACC,aAAD,EAAgBC,MAAhB,KAA2B;AAClC,UAAItM,cAAc,GAAG,KAAKa,KAAL,CAAWb,cAAX,IAA6B,EAAlD;AACAA,MAAAA,cAAc,CAAC,MAAD,CAAd,GAAyBqM,aAAzB;AACArM,MAAAA,cAAc,CAAC,QAAD,CAAd,GAA2BsM,MAA3B;AACAtM,MAAAA,cAAc,CAAC,aAAD,CAAd,GAAgCrE,OAAO,CAAC4Q,SAAR,CAAkBF,aAAlB,EAAiCC,MAAjC,CAAhC;AACA,WAAKvL,QAAL,CAAc;AAAEyL,QAAAA,IAAI,EAAEH,aAAR;AAAuBC,QAAAA,MAAM,EAAEA,MAA/B;AAAuCtM,QAAAA,cAAc,EAAEA;AAAvD,OAAd;AAEH,KA59CkB;;AAAA,SAu/CnByM,iBAv/CmB,GAu/CC,CAAC1M,IAAD,EAAOgK,SAAP,KAAqB;AACrC,YAAM2C,UAAU,GAAG,CACf;AACIC,QAAAA,KAAK,EAAE,iBADX;AAEIC,QAAAA,SAAS,EAAE;AAFf,OADe,CAAnB;AAMA,YAAMC,MAAM,GAAG9C,SAAS,CAAC+C,KAAzB;;AACA,UAAID,MAAJ,EAAY;AACRA,QAAAA,MAAM,CAACvK,GAAP,CAAYwK,KAAD,IAAYA,KAAK,CAACJ,UAAN,GAAmBA,UAA1C;AACH;;AACD3C,MAAAA,SAAS,CAAC+C,KAAV,GAAkBD,MAAlB;AACA,YAAME,YAAY,GAAGtO,OAAO,CAACsB,IAAD,EAAOgK,SAAP,CAA5B,CAZqC,CAarC;AACA;AACA;AACA;;AACA,aAAOgD,YAAP;AACH,KAzgDkB;;AAAA,SA8hDnBC,sBA9hDmB,GA8hDM,CAACC,QAAD,EAAWC,SAAX,KAAyB;AAC9C,UAAI7I,UAAU,GAAG,KAAKxD,KAAL,CAAWwD,UAA5B;AACAA,MAAAA,UAAU,CAAC4I,QAAD,CAAV,GAAuBC,SAAvB;AACA,WAAKnM,QAAL,CAAc;AAAEsD,QAAAA;AAAF,OAAd;AAEH,KAniDkB;;AAAA,SA4gEnB8I,aA5gEmB,GA4gEH,MAAM;AAClB,YAAMhG,UAAU,GAAG;AACfiG,QAAAA,SAAS,EAAE;AACP,sBAAY,EACR,GAAG,KAAKjO,KAAL,CAAWwB,KAAX,CAAiBmC,QADZ;AAERuK,YAAAA,OAAO,EAAE,KAAKxM,KAAL,CAAWb,cAAX,CAA0B,eAA1B,CAFD;AAGRsN,YAAAA,WAAW,EAAE,KAAKzM,KAAL,CAAWb,cAAX,CAA0B,aAA1B,KAA4C,KAAKa,KAAL,CAAWb,cAAX,CAA0B,aAA1B,EAAyCyB,KAH1F;AAIR8L,YAAAA,iBAAiB,EAAE,KAAK1M,KAAL,CAAWb,cAAX,CAA0B,aAA1B,KAA4C,KAAKa,KAAL,CAAWb,cAAX,CAA0B,aAA1B,EAAyCoL;AAJhG,WADL;AAQPoC,UAAAA,QAAQ,EAAE,KAAK3M,KAAL,CAAWb,cAAX,CAA0B,eAA1B;AARH,SADI;AAWfiI,QAAAA,UAAU,EAAE,KAAK9I,KAAL,CAAWwB,KAAX,CAAiBsH;AAXd,OAAnB;AAaA,WAAK9I,KAAL,CAAWpD,uBAAX,CAAmCoL,UAAnC,EAA+C,WAA/C;AACH,KA3hEkB;;AAEf,SAAKtG,KAAL,GAAa;AACTkL,MAAAA,aAAa,EAAE,CADN;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA1J,MAAAA,SAAS,EAAE,EAjBF;AAkBTwE,MAAAA,oBAAoB,EAAE,EAlBb;AAmBT3G,MAAAA,QAAQ,EAAE,CAAC;AAAEuN,QAAAA,KAAK,EAAE,SAAT;AAAoBC,QAAAA,QAAQ,EAAE,CAAC;AAAED,UAAAA,KAAK,EAAE;AAAT,SAAD;AAA9B,OAAD,CAnBD;AAoBTE,MAAAA,YAAY,EAAE,KApBL;AAqBTC,MAAAA,YAAY,EAAElO,SArBL;AAsBTmO,MAAAA,gBAAgB,EAAE,KAtBT;AAuBT3N,MAAAA,QAAQ,EAAE,CACN;AACI;AACAC,QAAAA,IAAI,EAAE,KAAKhB,KAAL,CAAW+J,IAAX,CAAgBC,aAAhB,CAA8B;AAAE5I,UAAAA,EAAE,EAAE;AAAN,SAA9B,CAFV;AAGIH,QAAAA,QAAQ,EAAE,IAHd;AAIIC,QAAAA,QAAQ,EAAE,IAJd;AAKIC,QAAAA,IAAI,EAAE,IALV;AAMIC,QAAAA,EAAE,EAAExD,IAAI;AANZ,OADM,CAvBD;AAgCT+Q,MAAAA,KAAK,EAAE,CAAC;AACJC,QAAAA,IAAI,EAAE,KADF;AAEJC,QAAAA,UAAU,EAAE;AAFR,OAAD,CAhCE;AAoCThO,MAAAA,cAAc,EAAE,EApCP;AAqCT8H,MAAAA,qBAAqB,EAAE,EArCd;AAsCTmG,MAAAA,UAAU,EAAE,IAAIC,GAAJ,EAtCH;AAuCT7K,MAAAA,IAAI,EAAE,CAvCG;AAwCT8K,MAAAA,UAAU,EAAE,CAxCH;AAyCTC,MAAAA,UAAU,EAAE,EAzCH;AA0CT9K,MAAAA,IAAI,EAAE,KAAKnE,KAAL,CAAWwB,KAAX,CAAiB0N,QAAjB,GACF,KAAKlP,KAAL,CAAWwB,KAAX,CAAiB0N,QAAjB,CAA0B,CAA1B,CADE,GAC6B,EA3C1B;AA4CTnL,MAAAA,0BAA0B,EAAE,EA5CnB;AA6CToL,MAAAA,YAAY,EAAE5O,SA7CL;AA8CTqF,MAAAA,OAAO,EAAE,KA9CA;AA+CT+E,MAAAA,eAAe,EAAE;AACbxG,QAAAA,IAAI,EAAE,EADO;AAEbD,QAAAA,IAAI,EAAE,CAFO,CAGb;AACA;AACA;AACA;AACA;;AAPa;AA/CR,KAAb;AAyDA,QAAIkL,MAAM,GAAG,EAAb,CA3De,CA4Df;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAAK1N,KAAL,GAAa,EAAE,GAAI,KAAKA,KAAX;AAAkB,gBAAU0N;AAA5B,KAAb;AACA,SAAKrK,SAAL,GAAiBlM,KAAK,CAACwW,SAAN,EAAjB;AACA,SAAKC,QAAL,GAAgBzW,KAAK,CAACwW,SAAN,EAAhB;AACA,SAAKE,cAAL,GAAsB,IAAIrR,cAAJ,EAAtB;AACH;;AAC8B,SAAxBsR,wBAAwB,CAACxP,KAAD,EAAQ0B,KAAR,EAAe;AAE1C,QAAI1B,KAAK,CAACwB,KAAN,CAAYiO,YAAZ,KAA6B,EAA7B,IAAmCzP,KAAK,CAACwB,KAAN,CAAYiO,YAAZ,KAA6B/N,KAAK,CAAC+N,YAA1E,EAAwF;AACpFpU,MAAAA,KAAK,CAACgM,IAAN,CAAWrH,KAAK,CAACwB,KAAN,CAAYiO,YAAvB;AACAzP,MAAAA,KAAK,CAACwB,KAAN,CAAYiO,YAAZ,GAA2B,EAA3B;AACH;;AAED,QAAIzP,KAAK,CAACwB,KAAN,CAAY0F,KAAZ,KAAsB,EAAtB,IAA4BlH,KAAK,CAACwB,KAAN,CAAY0F,KAAZ,KAAsBxF,KAAK,CAACwF,KAA5D,EAAmE;AAC/D7L,MAAAA,KAAK,CAAC6L,KAAN,CAAYlH,KAAK,CAACwB,KAAN,CAAY0F,KAAxB;AACAlH,MAAAA,KAAK,CAACwB,KAAN,CAAY0F,KAAZ,GAAoB,EAApB;AACH;;AACD,WAAO,IAAP;AACH;;AACDwI,EAAAA,kBAAkB,CAACC,aAAD,EAAgBC,aAAhB,EAA+B;AAC7C,QAAI;AAAEC,MAAAA,UAAF;AAAcC,MAAAA,sBAAd;AACAjP,MAAAA,cADA;AACgBiO,MAAAA,UADhB;AAEAnG,MAAAA,qBAFA;AAEuBoH,MAAAA,sBAFvB;AAGAC,MAAAA,2BAHA;AAG6B9K,MAAAA,UAH7B;AAGyCwC,MAAAA,oBAHzC;AAG+D0H,MAAAA,MAH/D;AAGuE3H,MAAAA,mBAHvE;AAG4FwI,MAAAA,uBAH5F;AAGqHC,MAAAA;AAHrH,QAGwI,KAAKxO,KAHjJ;AAIA,QAAIyO,IAAI,GAAG,KAAX,CAL6C,CAM7C;;AACA,QAAI,KAAKnQ,KAAL,CAAWwB,KAAX,CAAiB0D,UAAjB,CAA4BkL,qBAA5B,KAAsDT,aAAa,CAACnO,KAAd,CAAoB0D,UAApB,CAA+BkL,qBAAzF,EAAgH;AAC5G,UAAIC,mBAAmB,GAAG,EAA1B;AACAF,MAAAA,IAAI,GAAG,IAAP;AACA,WAAKnQ,KAAL,CAAWwB,KAAX,CAAiB0D,UAAjB,CAA4BkL,qBAA5B,IAAqD,KAAKpQ,KAAL,CAAWwB,KAAX,CAAiB0D,UAAjB,CAA4BkL,qBAA5B,CAAkDjN,GAAlD,CAChDqD,IAAD,IAAU6J,mBAAmB,CAACC,IAApB,CAAyB;AAAE,iBAAS9J,IAAI,CAAClD,0BAAhB;AAA4C,iBAASkD,IAAI,CAAC+J;AAA1D,OAAzB,CADuC,CAArD;AAGAnB,MAAAA,MAAM,GAAG,EACL,GAAGA,MADE;AAEL,sCAA8B;AAC1B,mBAAS,KAAKpP,KAAL,CAAW+J,IAAX,CAAgBC,aAAhB,CAA8B;AACnC5I,YAAAA,EAAE,EAAE;AAD+B,WAA9B,CADiB;AAI1B,kBAAQ,QAJkB;AAK1B,0BAAgB,CAAC,OAAD,CALU;AAM1B,2BAAiB;AACb,0BAAciP;AADD;AANS;AAFzB,OAAT;AAcH,KA3B4C,CA4B7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;;AACA,QAAI,KAAKrQ,KAAL,CAAWwB,KAAX,CAAiBmC,QAAjB,CAA0BiF,SAA1B,KAAwC+G,aAAa,CAACnO,KAAd,CAAoBmC,QAApB,CAA6BiF,SAAzE,EAAoF;AAChFuH,MAAAA,IAAI,GAAG,IAAP;AACAxH,MAAAA,qBAAqB,GAAG,EAAxB;;AACA,UAAI,KAAK3I,KAAL,CAAWwB,KAAX,CAAiBmH,qBAArB,EAA4C;AACxC,aAAK3I,KAAL,CAAWwB,KAAX,CAAiBmH,qBAAjB,CAAuC,KAAK3I,KAAL,CAAWwB,KAAX,CAAiBmC,QAAjB,CAA0BiF,SAAjE,KAA+E5F,MAAM,CAACwN,MAAP,CAAc,KAAKxQ,KAAL,CAAWwB,KAAX,CAAiBmH,qBAAjB,CAAuC,KAAK3I,KAAL,CAAWwB,KAAX,CAAiBmC,QAAjB,CAA0BiF,SAAjE,CAAd,EAA2FzF,GAA3F,CAA+FqD,IAAI,IAC9KmC,qBAAqB,CAAC2H,IAAtB,CAA2B9J,IAAI,CAACqC,YAAhC,CAD2E,CAA/E;AAEH;;AACDiG,MAAAA,UAAU,GAAGrT,aAAa,CAAC,KAAKuE,KAAL,CAAWwB,KAAX,CAAiBmH,qBAAlB,EAAyC,KAAK3I,KAAL,CAAWwB,KAAX,CAAiBmC,QAAjB,CAA0BiF,SAAnE,CAA1B;AAEH;;AAED,QAAI,KAAK5I,KAAL,CAAWwB,KAAX,CAAiB0D,UAAjB,CAA4BuL,qBAA5B,KAAsDd,aAAa,CAACnO,KAAd,CAAoB0D,UAApB,CAA+BuL,qBAAzF,EAAgH;AAC5GN,MAAAA,IAAI,GAAG,IAAP;AACA,YAAMO,yBAAyB,GAAGnV,mBAAmB,CAAC,KAAKyE,KAAL,CAAWwB,KAAX,CAAiB0D,UAAjB,CAA4BuL,qBAA5B,IAAqD,EAAtD,EAA0D,sBAA1D,EACjD,sBADiD,EACzBlQ,SADyB,EACdA,SADc,EACHA,SADG,CAArD;AAEAuP,MAAAA,sBAAsB,GAAGY,yBAAyB,CAACtF,GAA1B,CAA8B,YAA9B,CAAzB;;AACA,UAAI,KAAKpL,KAAL,CAAWwB,KAAX,CAAiB0D,UAAjB,CAA4ByL,uBAAhC,EAAyD;AACrDjJ,QAAAA,oBAAoB,GAAG,EACnB,GAAGA,oBADgB;AAEnBE,UAAAA,oBAAoB,EAAEkI,sBAAsB,CAACc,MAAvB,CAA8BpK,IAAI,IACpDA,IAAI,CAAClE,KAAL,KAAe,KAAKtC,KAAL,CAAWwB,KAAX,CAAiB0D,UAAjB,CAA4ByL,uBAA5B,CAAoD/I,oBADjD,EACuE,CADvE;AAFH,SAAvB;AAKH;AAEJ;;AACD,QAAI,KAAK5H,KAAL,CAAWwB,KAAX,CAAiB0D,UAAjB,CAA4BkL,qBAA5B,KAAsDT,aAAa,CAACnO,KAAd,CAAoB0D,UAApB,CAA+BkL,qBAAzF,EAAgH;AAC5GD,MAAAA,IAAI,GAAG,IAAP;AACA,YAAMU,yBAAyB,GAAGtV,mBAAmB,CAAC,KAAKyE,KAAL,CAAWwB,KAAX,CAAiB0D,UAAjB,CAA4BkL,qBAA5B,IAAqD,EAAtD,EAA0D,4BAA1D,EACjD,4BADiD,EACnB7P,SADmB,EACRA,SADQ,EACGA,SADH,CAArD;AAEAwP,MAAAA,sBAAsB,GAAGc,yBAAyB,CAACzF,GAA1B,CAA8B,YAA9B,CAAzB;;AACA,UAAI,KAAKpL,KAAL,CAAWwB,KAAX,CAAiB0D,UAAjB,CAA4BQ,6BAAhC,EAA+D;AAC3DgC,QAAAA,oBAAoB,GAAG,EACnB,GAAGA,oBADgB;AAEnBpE,UAAAA,0BAA0B,EAAEyM,sBAAsB,CAACa,MAAvB,CAA8BpK,IAAI,IAC1DA,IAAI,CAAClE,KAAL,KAAe,KAAKtC,KAAL,CAAWwB,KAAX,CAAiB0D,UAAjB,CAA4BQ,6BAA5B,CAA0DpC,0BADjD,EAC6E,CAD7E;AAFT,SAAvB;AAKH;AAGJ;;AAED,QAAI,KAAKtD,KAAL,CAAWwB,KAAX,CAAiB0D,UAAjB,CAA4BC,oBAA5B,KAAqDwK,aAAa,CAACnO,KAAd,CAAoB0D,UAApB,CAA+BC,oBAAxF,EAA8G;AAC1GgL,MAAAA,IAAI,GAAG,IAAP;AACA,YAAMW,wBAAwB,GAAGvV,mBAAmB,CAAC,KAAKyE,KAAL,CAAWwB,KAAX,CAAiB0D,UAAjB,CAA4BC,oBAA5B,IAAoD,EAArD,EAAyD,2BAAzD,EAChD,YADgD,EAClC5E,SADkC,EACvBA,SADuB,EACZA,SADY,CAApD;AAEAyP,MAAAA,2BAA2B,GAAGc,wBAAwB,CAAC1F,GAAzB,CAA6B,YAA7B,CAA9B;;AACA,UAAI,KAAKpL,KAAL,CAAWwB,KAAX,CAAiB0D,UAAjB,CAA4BP,4BAAhC,EAA8D;AAC1D+C,QAAAA,oBAAoB,GAAG,EACnB,GAAGA,oBADgB;AAEnBqJ,UAAAA,yBAAyB,EAAEf,2BAA2B,CAACY,MAA5B,CAAmCpK,IAAI,IAC9DA,IAAI,CAAClE,KAAL,KAAe,KAAKtC,KAAL,CAAWwB,KAAX,CAAiB0D,UAAjB,CAA4BP,4BAA5B,CAAyDoM,yBADjD,EAC4E,CAD5E;AAFR,SAAvB;AAKH;AACJ;;AAED,QAAI,KAAK/Q,KAAL,CAAWwB,KAAX,CAAiB0D,UAAjB,KAAgCyK,aAAa,CAACnO,KAAd,CAAoB0D,UAAxD,EAAoE;AAChEiL,MAAAA,IAAI,GAAG,IAAP;AACAjL,MAAAA,UAAU,GAAG,KAAKlF,KAAL,CAAWwB,KAAX,CAAiB0D,UAA9B;AACArE,MAAAA,cAAc,CAAC,kBAAD,CAAd,GAAqC;AACjCoL,QAAAA,KAAK,EAAE,KAAKjM,KAAL,CAAWwB,KAAX,CAAiB0D,UAAjB,CAA4BuC,mBAA5B,IACH,KAAKzH,KAAL,CAAWwB,KAAX,CAAiB0D,UAAjB,CAA4BuC,mBAA5B,CAAgDuJ,gBAD7C,GAEH,KAAKhR,KAAL,CAAWwB,KAAX,CAAiB0D,UAAjB,CAA4BuC,mBAA5B,CAAgDuJ,gBAF7C,GAEgE,IAHtC;AAI/B1O,QAAAA,KAAK,EAAE,KAAKtC,KAAL,CAAWwB,KAAX,CAAiB0D,UAAjB,CAA4BuC,mBAA5B,IAAmD,KAAKzH,KAAL,CAAWwB,KAAX,CAAiB0D,UAAjB,CAA4BuC,mBAA5B,CAAgDwJ;AAJ3E,OAArC;AAMAxJ,MAAAA,mBAAmB,GAAG;AAClBwJ,QAAAA,gBAAgB,EAAE;AACdhF,UAAAA,KAAK,EAAE,KAAKjM,KAAL,CAAWwB,KAAX,CAAiB0D,UAAjB,CAA4BuC,mBAA5B,IACH,KAAKzH,KAAL,CAAWwB,KAAX,CAAiB0D,UAAjB,CAA4BuC,mBAA5B,CAAgDuJ,gBAD7C,GAEH,KAAKhR,KAAL,CAAWwB,KAAX,CAAiB0D,UAAjB,CAA4BuC,mBAA5B,CAAgDuJ,gBAF7C,GAEgE,IAHzD;AAIZ1O,UAAAA,KAAK,EAAE,KAAKtC,KAAL,CAAWwB,KAAX,CAAiB0D,UAAjB,CAA4BuC,mBAA5B,IAAmD,KAAKzH,KAAL,CAAWwB,KAAX,CAAiB0D,UAAjB,CAA4BuC,mBAA5B,CAAgDwJ;AAJ9F;AADA,OAAtB;AAQAf,MAAAA,cAAc,GAAG,EACb,GAAG1U,wBAAwB,CAAC,KAAKwE,KAAL,CAAWwB,KAAX,CAAiB0D,UAAjB,CAA4BgM,QAA7B,EACvB,KAAKlR,KAAL,CAAWwB,KAAX,CAAiB0D,UAAjB,CAA4BiM,MADL,EACa,KAAKnR,KAAL,CAAWwB,KAAX,CAAiBmC,QAD9B,CADd;AAGbyN,QAAAA,qBAAqB,EAAE;AACnB9O,UAAAA,KAAK,EAAE,KAAKtC,KAAL,CAAWwB,KAAX,CAAiB0D,UAAjB,CAA4BuC,mBAA5B,IACH,KAAKzH,KAAL,CAAWwB,KAAX,CAAiB0D,UAAjB,CAA4BuC,mBAA5B,CAAgDuJ,gBAD7C,GAEH,KAAKhR,KAAL,CAAWwB,KAAX,CAAiB0D,UAAjB,CAA4BuC,mBAA5B,CAAgDuJ,gBAF7C,GAEgE;AAHpD;AAHV,OAAjB;AASAf,MAAAA,uBAAuB,GAAG,KAAKjQ,KAAL,CAAWwB,KAAX,CAAiB0D,UAAjB,CAA4B+K,uBAAtD;AACA,YAAMS,yBAAyB,GAAGnV,mBAAmB,CAAC,KAAKyE,KAAL,CAAWwB,KAAX,CAAiB0D,UAAjB,CAA4BmM,oBAA5B,IAAoD,EAArD,EAAyD,kBAAzD,EACjD,kBADiD,EAC7B9Q,SAD6B,EAClBA,SADkB,EACPA,SADO,CAArD;AAEA2E,MAAAA,UAAU,CAAC,sBAAD,CAAV,GAAqCwL,yBAAyB,CAACtF,GAA1B,CAA8B,YAA9B,CAArC;AAEAyE,MAAAA,UAAU,GAAG,KAAKyB,qBAAL,CAA2B,KAAKtR,KAAL,CAAWwB,KAAX,CAAiB0D,UAA5C,CAAb;AAEH;;AACD,QAAI,KAAKxD,KAAL,CAAWwD,UAAX,KAA0B0K,aAAa,CAAC1K,UAA5C,EAAwD;AACpDiL,MAAAA,IAAI,GAAG,IAAP;AACAN,MAAAA,UAAU,GAAG,KAAKyB,qBAAL,CAA2B,KAAK5P,KAAL,CAAWwD,UAAtC,CAAb;AAEH;;AAGD,QAAIiL,IAAJ,EAAU;AACN,WAAKvO,QAAL,CAAc;AACVkO,QAAAA,sBADU;AACcD,QAAAA,UADd;AAEVhP,QAAAA,cAFU;AAEMiO,QAAAA,UAFN;AAGVnG,QAAAA,qBAHU;AAGaoH,QAAAA,sBAHb;AAIVC,QAAAA,2BAJU;AAImB9K,QAAAA,UAJnB;AAI+BwC,QAAAA,oBAJ/B;AAIqD0H,QAAAA,MAJrD;AAI6D3H,QAAAA,mBAJ7D;AAIkFwI,QAAAA,uBAJlF;AAKVC,QAAAA;AALU,OAAd;AAOH;AAEJ;;AAqHDqB,EAAAA,iBAAiB,GAAG;AAChB,QAAI,KAAKC,YAAT,EAAuB;AACnB,YAAMC,MAAM,GAAG,KAAKD,YAAL,CAAkBE,YAAjC;AACA,WAAK9P,QAAL,CAAc;AACV+P,QAAAA,SAAS,EAAEF,MAAM,GAAG,EADV;AAEVD,QAAAA,YAAY,EAAEC,MAAM,GAAG;AAFb,OAAd;AAIH;AACJ;;AACDH,EAAAA,qBAAqB,CAACM,GAAD,EAAM;AACvB,UAAMC,cAAc,GAAG,EAAvB;;AACA,QAAI,KAAKnQ,KAAL,CAAWwD,UAAX,IAAyB,KAAKxD,KAAL,CAAWwD,UAAX,CAAsBuL,qBAAnD,EAA0E;AAEtEoB,MAAAA,cAAc,CAACvB,IAAf,CACI;AACI,iBAAS,qBADb;AAEI,iBAASsB,GAAG,CAACE,2BAAJ,IACLF,GAAG,CAACE,2BAAJ,KAAoC,IAD/B,GAELF,GAAG,CAACE,2BAFC,GAE6B;AAJ1C,OADJ,CAQI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AApBJ;AAsBH;;AACD,WAAOD,cAAP;AACH;;AAiYDlK,EAAAA,wBAAwB,CAACsG,SAAD,EAAYzG,SAAZ,EAAuBD,SAAvB,EAAkC;AACtD,QAAIG,oBAAoB,GAAG,KAAKhG,KAAL,CAAWgG,oBAAX,IAAmC,EAA9D;AACA,QAAIoD,cAAc,GAAG,EAArB;AACA,SAAKlJ,QAAL,CAAc;AAAEgE,MAAAA,OAAO,EAAE;AAAX,KAAd;;AACA,QAAI4B,SAAS,KAAK,4BAAlB,EAAgD;AAC5CsD,MAAAA,cAAc,GAAG;AACblD,QAAAA,oBAAoB,EAAEF,oBAAoB,CAAC,sBAAD,CAApB,CAA6CpF,KADtD;AAEbgB,QAAAA,0BAA0B,EAAEiE,SAAS,CAACjF,KAFzB;AAGboB,QAAAA,QAAQ,EAAEuK,SAAS,CAACvK;AAHP,OAAjB;AAKH,KAND,MAMO;AACHoH,MAAAA,cAAc,GAAG;AACblD,QAAAA,oBAAoB,EAAEL,SAAS,CAACjF,KADnB;AAEboB,QAAAA,QAAQ,EAAEuK,SAAS,CAACvK;AAFP,OAAjB;AAIH;;AACD,QAAI0C,QAAQ,GAAG,EAAf;AACA,UAAMC,IAAI,GAAGtH,KAAK,CAACuH,IAAN,CAAW,gDAAX,EAA6DwE,cAA7D,CAAb;AAEA1E,IAAAA,QAAQ,GAAG,CAACC,IAAD,CAAX;AACApH,IAAAA,KAAK,CAACwH,GAAN,CAAUL,QAAV,EACKM,IADL,CACUC,QAAQ,IAAI;AACd,UAAI;AAAEoJ,QAAAA,sBAAF;AACAC,QAAAA;AADA,UACgC,KAAKtO,KADzC;AAGA,UAAImP,yBAAyB,GAAGtV,mBAAmB,CAACoL,QAAQ,CAAC,CAAD,CAAR,CAAY/F,IAAZ,CAAiBwP,qBAAjB,IAA0C,EAA3C,EAA+C,4BAA/C,EAC/C,4BAD+C,EACjB7P,SADiB,EACNA,SADM,EACKA,SADL,CAAnD;AAEAwP,MAAAA,sBAAsB,GAAGc,yBAAyB,CAACzF,GAA1B,CAA8B,YAA9B,CAAzB;AACA,UAAI0F,wBAAwB,GAAGvV,mBAAmB,CAACoL,QAAQ,CAAC,CAAD,CAAR,CAAY/F,IAAZ,CAAiBuE,oBAAjB,IAAyC,EAA1C,EAA8C,2BAA9C,EAC9C,YAD8C,EAChC5E,SADgC,EACrBA,SADqB,EACVA,SADU,CAAlD;AAEAyP,MAAAA,2BAA2B,GAAGc,wBAAwB,CAAC1F,GAAzB,CAA6B,YAA7B,CAA9B;AACA1D,MAAAA,oBAAoB,GAAG,EACnB,GAAGA,oBADgB;AAEnBpE,QAAAA,0BAA0B,EAAEyM,sBAAsB,CAAC3K,MAAvB,GAAgC,CAAhC,GACxB2K,sBAAsB,CAAC,CAAD,CADE,GACI,EAHb;AAInBgB,QAAAA,yBAAyB,EAAEf,2BAA2B,CAAC5K,MAA5B,GAAqC,CAArC,GACvB4K,2BAA2B,CAAC,CAAD,CADJ,GACU;AALlB,OAAvB;AAQA,WAAKpO,QAAL,CAAc;AACVmO,QAAAA,sBADU;AACcC,QAAAA,2BADd;AAEVtI,QAAAA,oBAAoB,EAAE,EAClB,GAAGA,oBADe;AAElB,WAACF,SAAD,GAAaD;AAFK,SAFZ;AAMV3B,QAAAA,OAAO,EAAE;AANC,OAAd;AAQH,KA3BL,EA2BOqB,KA3BP,CA2BaC,KAAK,IAAI;AACd,UAAIA,KAAK,CAACP,QAAN,CAAeQ,MAAf,KAA0B,GAA9B,EAAmC;AAC/B9L,QAAAA,KAAK,CAAC6L,KAAN,CAAYA,KAAK,CAACE,OAAlB;AACH,OAFD,MAEO;AACH/L,QAAAA,KAAK,CAACgM,IAAN,CAAWH,KAAK,CAACP,QAAN,CAAe/F,IAA1B;AACH;;AACD,WAAKgB,QAAL,CAAc;AACVgE,QAAAA,OAAO,EAAE;AADC,OAAd;AAGH,KApCL;AAqCH;;AA2CDL,EAAAA,uBAAuB,GAAG;AACtB,SAAK3D,QAAL,CAAc;AAAEgE,MAAAA,OAAO,EAAE;AAAX,KAAd;AACA,QAAI/E,cAAc,GAAG,KAAKa,KAAL,CAAWb,cAAhC;AACA,QAAIiK,cAAc,GAAG;AACjB;AACAxH,MAAAA,0BAA0B,EAAE,KAAK5B,KAAL,CAAWwD,UAAX,CAAsBQ,6BAAtB,CAAoDpC,0BAF/D;AAGjB;AACAI,MAAAA,QAAQ,EAAE,KAAK1D,KAAL,CAAWwB,KAAX,CAAiBmC;AAJV,KAArB;AAOA,QAAIyC,QAAQ,GAAG,EAAf;AACA,UAAMC,IAAI,GAAGtH,KAAK,CAACuH,IAAN,CAAW,gDAAX,EAA6DwE,cAA7D,CAAb;AAEA,UAAME,IAAI,GAAGjM,KAAK,CAACuH,IAAN,CAAW,oBAAX,EACT;AAAE,kBAAY,KAAKtG,KAAL,CAAWwB,KAAX,CAAiBmC;AAA/B,KADS,CAAb;AAGA,UAAMsH,IAAI,GAAGlM,KAAK,CAACuH,IAAN,CAAW,gCAAX,EACT;AAAE,kBAAY,KAAKtG,KAAL,CAAWwB,KAAX,CAAiBmC;AAA/B,KADS,CAAb;AAGAyC,IAAAA,QAAQ,GAAG,CAACC,IAAD,EAAO2E,IAAP,CAAX;AACA/L,IAAAA,KAAK,CAACwH,GAAN,CAAUL,QAAV,EACKM,IADL,CACUC,QAAQ,IAAI;AACd,YAAMuE,iBAAiB,GAAG3P,mBAAmB,CAACoL,QAAQ,CAAC,CAAD,CAAR,CAAY/F,IAAZ,CAAiB,4BAAjB,KAAkD,EAAnD,EACzC,iCADyC,EAEzC,gBAFyC,EAEvBL,SAFuB,EAEZA,SAFY,EAED,IAFC,CAA7C;AAGA,YAAM4K,qBAAqB,GAAGD,iBAAiB,CAACE,GAAlB,CAAsB,YAAtB,CAA9B;AACA,UAAIC,kBAAkB,GAAG1E,QAAQ,CAAC,CAAD,CAAR,CAAY/F,IAAZ,CAAiB,oBAAjB,CAAzB;AAEA,YAAM0K,gBAAgB,GAAG/P,mBAAmB,CAACoL,QAAQ,CAAC,CAAD,CAAR,CAAY/F,IAAZ,CAAiB,eAAjB,KAAqC,EAAtC,EACxC,oBADwC,EAExC,gBAFwC,EAEtBL,SAFsB,EAEXA,SAFW,EAEA,IAFA,CAA5C;AAGA,YAAMgL,iBAAiB,GAAGD,gBAAgB,CAACF,GAAjB,CAAqB,YAArB,CAA1B;AAGA,YAAMI,kBAAkB,GAAGjQ,mBAAmB,CAACoL,QAAQ,CAAC,CAAD,CAAR,CAAY/F,IAAZ,CAAiB,iBAAjB,KAAuC,EAAxC,EAC1C,sBAD0C,EAE1C,YAF0C,EAE5BL,SAF4B,EAEjBA,SAFiB,EAEN,IAFM,CAA9C;AAGA,YAAMkL,mBAAmB,GAAGD,kBAAkB,CAACJ,GAAnB,CAAuB,YAAvB,CAA5B;AAEA,YAAMM,qBAAqB,GAAGnQ,mBAAmB,CAACoL,QAAQ,CAAC,CAAD,CAAR,CAAY/F,IAAZ,CAAiB,oBAAjB,KAC3C,EAD0C,EAE7C,yBAF6C,EAG7C,yBAH6C,EAGlBL,SAHkB,EAGPA,SAHO,EAGI,IAHJ,CAAjD;AAIA,YAAMoL,sBAAsB,GAAGD,qBAAqB,CAACN,GAAtB,CAA0B,YAA1B,CAA/B;AAEA,YAAMQ,UAAU,GAAGrQ,mBAAmB,CAACoL,QAAQ,CAAC,CAAD,CAAR,CAAY/F,IAAZ,CAAiB,SAAjB,KAA+B,EAAhC,EAClC,cADkC,EAElC,cAFkC,EAElBL,SAFkB,EAEPA,SAFO,EAEI,IAFJ,CAAtC;AAGA,YAAMsL,WAAW,GAAGD,UAAU,CAACR,GAAX,CAAe,YAAf,CAApB;AAEA,WAAKxJ,QAAL,CAAc;AACVnB,QAAAA,SAAS,EAAE,IADD;AAEVI,QAAAA,cAAc,EAAE,EACZ,GAAGA,cADS;AAEZ2L,UAAAA,wBAAwB,EAAErB,qBAFd;AAGZsB,UAAAA,cAAc,EAAEZ,WAHJ;AAIZa,UAAAA,oBAAoB,EAAEnB,iBAJV;AAKZgB,UAAAA,sBAAsB,EAAEd,mBALZ;AAMZ;AACA;AACA;AACA3E,UAAAA,IAAI,EAAEuE,kBAAkB,CAACjG,MAAnB,GAA4B,CAA5B,GAAgCiG,kBAAkB,CAAC,CAAD,CAAlB,CAAsBvE,IAAtD,GAA6D,CATvD;AAUZE,UAAAA,OAAO,EAAEqE,kBAAkB,CAACjG,MAAnB,GAA4B,CAA5B,GAAgCiG,kBAAkB,CAAC,CAAD,CAAlB,CAAsBrE,OAAtD,GAAgE,CAV7D;AAWZnF,UAAAA,eAAe,EAAE;AAXL,SAFN;AAgBVc,QAAAA,eAAe,EAAE,KAhBP;AAiBVtB,QAAAA,SAAS,EAAE,QAjBD;AAkBVuE,QAAAA,OAAO,EAAE;AAlBC,OAAd;AAoBH,KAlDL,EAkDOqB,KAlDP,CAkDaC,KAAK,IAAI;AACd,UAAIA,KAAK,CAACP,QAAN,CAAeQ,MAAf,KAA0B,GAA9B,EAAmC;AAC/B9L,QAAAA,KAAK,CAAC6L,KAAN,CAAYA,KAAK,CAACE,OAAlB;AACH,OAFD,MAEO;AACH/L,QAAAA,KAAK,CAACgM,IAAN,CAAWH,KAAK,CAACP,QAAN,CAAe/F,IAA1B;AACH;;AACD,WAAKgB,QAAL,CAAc;AACVgE,QAAAA,OAAO,EAAE;AADC,OAAd;AAGH,KA3DL;AA4DH;;AACL4E,EAAAA,uBAAuB,CAACrE,KAAD,EAAQ;AACvB,QAAI2E,cAAc,GAAG,EAArB;AACA,SAAKlJ,QAAL,CAAc;AAAEgE,MAAAA,OAAO,EAAE;AAAX,KAAd;AACA,QAAIgM,GAAG,GAAGpW,wBAAwB,CAAC,KAAKkG,KAAL,CAAWwD,UAAX,CAAsBgM,QAAvB,EAAiC,KAAKxP,KAAL,CAAWwD,UAAX,CAAsBiM,MAAvD,EAA+D,KAAKnR,KAAL,CAAWwB,KAAX,CAAiBmC,QAAhF,CAAlC;AACAmH,IAAAA,cAAc,GAAG;AACbmG,MAAAA,gBAAgB,EAAE,KAAKvP,KAAL,CAAW+F,mBAAX,CAA+BwJ,gBAA/B,CAAgD3O,KADrD;AAEbyP,MAAAA,cAAc,EAAE5L,KAFH;AAGb;AACA;AACA+K,MAAAA,QAAQ,EAAGU,GAAG,CAACV,QALF;AAMbC,MAAAA,MAAM,EAAES,GAAG,CAACT,MANC;AAObzN,MAAAA,QAAQ,EAAE,KAAK1D,KAAL,CAAWwB,KAAX,CAAiBmC;AAPd,KAAjB;AASA,QAAIyC,QAAQ,GAAG,EAAf;AACA,UAAMC,IAAI,GAAGtH,KAAK,CAACuH,IAAN,CAAW,gDAAX,EAA6DwE,cAA7D,CAAb;AAEA1E,IAAAA,QAAQ,GAAG,CAACC,IAAD,CAAX;AACApH,IAAAA,KAAK,CAACwH,GAAN,CAAUL,QAAV,EACKM,IADL,CACUC,QAAQ,IAAI;AACd,UAAIzB,UAAU,GAAG,KAAKxD,KAAL,CAAWwD,UAAX,CAAsBqB,sBAAvC;AACA,WAAK3E,QAAL,CAAcuE,KAAK,IAAI,KAAT,GAAiB;AAC3B8J,QAAAA,uBAAuB,EAAElU,QAAQ,CAAC4K,QAAQ,CAAC,CAAD,CAAR,CAAY/F,IAAZ,CAAiBqP,uBAAlB,CADN;AAE3B;AACA;AACA;AACArK,QAAAA,OAAO,EAAE;AALkB,OAAjB,GAMV;AACAqK,QAAAA,uBAAuB,EAAElU,QAAQ,CAAC4K,QAAQ,CAAC,CAAD,CAAR,CAAY/F,IAAZ,CAAiBqP,uBAAlB,CADjC;AAEAC,QAAAA,cAAc,EAAE;AACZkB,UAAAA,qBAAqB,EAAE;AACnB9O,YAAAA,KAAK,EAAE,KAAKZ,KAAL,CAAW+F,mBAAX,CAA+BwJ,gBAA/B,CAAgDhF;AADpC,WADX;AAIZ,aAAGzQ,wBAAwB,CAAC,KAAKkG,KAAL,CAAWwD,UAAX,CAAsBgM,QAAvB,EACvB,KAAKxP,KAAL,CAAWwD,UAAX,CAAsBiM,MADC,EACO,KAAKnR,KAAL,CAAWwB,KAAX,CAAiBmC,QADxB;AAJf,SAFhB;AASAuB,QAAAA,UAAU,EAAE,EACR,GAAG,KAAKxD,KAAL,CAAWwD,UADN;AAERgM,UAAAA,QAAQ,EAAEvV,mBAAmB,CAAC,KAAKqE,KAAL,CAAWwB,KAAX,CAAiBmC,QAAlB,EAA4B,KAAKjC,KAAL,CAAWwD,UAAX,CAAsBgM,QAAlD,CAFrB;AAGRC,UAAAA,MAAM,EAAExV,mBAAmB,CAAC,KAAKqE,KAAL,CAAWwB,KAAX,CAAiBmC,QAAlB,EAA4B,KAAKjC,KAAL,CAAWwD,UAAX,CAAsBiM,MAAlD,CAHnB;AAIR5K,UAAAA,sBAAsB,EAAEI,QAAQ,CAAC,CAAD,CAAR,CAAY/F,IAAZ,CAAiB2F;AAJjC,SATZ;AAeAX,QAAAA,OAAO,EAAE;AAfT,OANJ;AAuBH,KA1BL,EA0BOqB,KA1BP,CA0BaC,KAAK,IAAI;AACd,UAAIA,KAAK,CAACP,QAAN,CAAeQ,MAAf,KAA0B,GAA9B,EAAmC;AAC/B9L,QAAAA,KAAK,CAAC6L,KAAN,CAAYA,KAAK,CAACE,OAAlB;AACH,OAFD,MAEO;AACH/L,QAAAA,KAAK,CAACgM,IAAN,CAAWH,KAAK,CAACP,QAAN,CAAe/F,IAA1B;AACH;;AACD,WAAKgB,QAAL,CAAc;AACVgE,QAAAA,OAAO,EAAE;AADC,OAAd;AAGH,KAnCL;AAoCH;;AAEDiC,EAAAA,qBAAqB,CAACoG,SAAD,EAAYzG,SAAZ,EAAuBD,SAAvB,EAAkC;AACnD,QAAIuD,cAAc,GAAG,EAArB;AACA,SAAKlJ,QAAL,CAAc;AAAEgE,MAAAA,OAAO,EAAE;AAAX,KAAd;AACAkF,IAAAA,cAAc,GAAG;AACbhD,MAAAA,kBAAkB,EAAEP,SAAS,CAACjF,KADjB;AAEboB,MAAAA,QAAQ,EAAEuK,SAAS,CAACvK;AAFP,KAAjB;AAIA,QAAI0C,QAAQ,GAAG,EAAf;AACA,UAAMC,IAAI,GAAGtH,KAAK,CAACuH,IAAN,CAAW,8CAAX,EAA2DwE,cAA3D,CAAb;AAEA1E,IAAAA,QAAQ,GAAG,CAACC,IAAD,CAAX;AACApH,IAAAA,KAAK,CAACwH,GAAN,CAAUL,QAAV,EACKM,IADL,CACUC,QAAQ,IAAI;AACd,UAAI;AAAEgG,QAAAA,yBAAF;AAA6B9L,QAAAA;AAA7B,UAAgD,KAAKa,KAAzD;AAEA,UAAIsQ,sBAAsB,GAAGzW,mBAAmB,CAACoL,QAAQ,CAAC,CAAD,CAAR,CAAY/F,IAAZ,CAAiByK,kBAAjB,IAAuC,EAAxC,EAA4C,yBAA5C,EAC5C,yBAD4C,EACjB9K,SADiB,EACNA,SADM,EACKA,SADL,CAAhD;AAEAoM,MAAAA,yBAAyB,GAAGqF,sBAAsB,CAAC5G,GAAvB,CAA2B,YAA3B,CAA5B;AACAvK,MAAAA,cAAc,GAAG,EACb,GAAGA,cADU;AAEbiG,QAAAA,IAAI,EAAE6F,yBAAyB,CAACvH,MAA1B,GAAmC,CAAnC,GACFuH,yBAAyB,CAAC,CAAD,CAAzB,CAA6BnG,IAA7B,CAAkCM,IADhC,GACuC,CAHhC;AAIbE,QAAAA,OAAO,EAAE2F,yBAAyB,CAACvH,MAA1B,GAAmC,CAAnC,GACLuH,yBAAyB,CAAC,CAAD,CAAzB,CAA6BnG,IAA7B,CAAkCQ,OAD7B,GACuC,CALnC;AAMbyB,QAAAA,uBAAuB,EAAEkE,yBAAyB,CAACvH,MAA1B,GAAmC,CAAnC,GACrBuH,yBAAyB,CAAC,CAAD,CADJ,GACU,EAPtB;AAQbA,QAAAA,yBAAyB,EAAEA,yBAAyB,CAACvH,MAA1B,GAAmC,CAAnC,GACvB,CAAC,GAAGuH,yBAAJ,CADuB,GACU;AATxB,OAAjB;AAYA,WAAK/K,QAAL,CAAc;AAEVf,QAAAA,cAAc,EAAE,EACZ,GAAGA,cADS;AAEZ,WAAC2G,SAAD,GAAaD;AAFD,SAFN;AAMV3B,QAAAA,OAAO,EAAE;AANC,OAAd;AAQH,KA3BL,EA2BOqB,KA3BP,CA2BaC,KAAK,IAAI;AACd,UAAIA,KAAK,CAACP,QAAN,CAAeQ,MAAf,KAA0B,GAA9B,EAAmC;AAC/B9L,QAAAA,KAAK,CAAC6L,KAAN,CAAYA,KAAK,CAACE,OAAlB;AACH,OAFD,MAEO;AACH/L,QAAAA,KAAK,CAACgM,IAAN,CAAWH,KAAK,CAACP,QAAN,CAAe/F,IAA1B;AACH;;AACD,WAAKgB,QAAL,CAAc;AACVgE,QAAAA,OAAO,EAAE;AADC,OAAd;AAGH,KApCL;AAqCH;;AA0FDqM,EAAAA,sBAAsB,CAAChO,CAAD,EAAI+D,UAAJ,EAAgB;AAClC,QAAI/D,CAAC,CAACiO,OAAF,KAAc,EAAlB,EAAsB;AAClB,WAAKtQ,QAAL,CAAc;AAAEgE,QAAAA,OAAO,EAAE;AAAX,OAAd;AACA,UAAI/E,cAAc,GAAG,KAAKa,KAAL,CAAWb,cAAX,IAA6B,EAAlD;AACA,UAAIuF,QAAQ,GAAG,EAAf;AACA,YAAMC,IAAI,GAAGtH,KAAK,CAACuH,IAAN,CAAW,gDAAX,EAA6D;AACtE;AACAgE,QAAAA,cAAc,EAAEtC,UAAU,CAACsC,cAF2C;AAGtE5G,QAAAA,QAAQ,EAAE,KAAK1D,KAAL,CAAWwB,KAAX,CAAiBmC;AAH2C,OAA7D,CAAb;AAKAyC,MAAAA,QAAQ,GAAG,CAACC,IAAD,CAAX;AACApH,MAAAA,KAAK,CAACwH,GAAN,CAAUL,QAAV,EACKM,IADL,CACUC,QAAQ,IAAI;AACd,YAAIX,aAAa,GAAG,EAApB;AACAA,QAAAA,aAAa,GAAG,CAAC;AAAE,qBAAW,cAAb;AAA6B,uBAAa,gBAA1C;AAA4D,mBAAS,OAArE;AAA8E,yBAAe;AAA7F,SAAD,EAChB;AAAE,qBAAW,cAAb;AAA6B,uBAAa,WAA1C;AAAuD,mBAAS,OAAhE;AAAyE,yBAAe;AAAxF,SADgB,EAEhB;AAAE,qBAAW,cAAb;AAA6B,uBAAa,WAA1C;AAAuD,mBAAS,OAAhE;AAAyE,yBAAe;AAAxF,SAFgB,EAGhB;AAAE,qBAAW,UAAb;AAAyB,uBAAa,WAAtC;AAAmD,mBAAS,OAA5D;AAAqE,yBAAe;AAApF,SAHgB,CAAhB;AAIA,cAAMmM,UAAU,GAAGxL,QAAQ,CAAC,CAAD,CAAR,CAAY/F,IAAZ,CAAiB,yBAAjB,KAA+C+F,QAAQ,CAAC,CAAD,CAAR,CAAY/F,IAAZ,CAAiB,yBAAjB,EAA4CuC,GAA5C,CAAiDiP,MAAD,IAAY;AAC1H,iBAAO;AAAE,uBAAWA,MAAM,CAACC,UAApB;AAAgC,yBAAaD,MAAM,CAACC,UAApD;AAAgE,qBAAS;AAAzE,WAAP;AACH,SAFiE,CAAlE;AAGArM,QAAAA,aAAa,GAAG,CAAC,GAAGA,aAAJ,EAAmB,GAAGmM,UAAtB,CAAhB;AACA,aAAKvQ,QAAL,CAAc;AACVoE,UAAAA,aADU;AAEVC,UAAAA,oBAAoB,EAAE,EAAE,GAAGU,QAAQ,CAAC,CAAD,CAAR,CAAY/F,IAAZ,CAAiB,sBAAjB;AAAL,WAFZ;AAGVgF,UAAAA,OAAO,EAAE;AAHC,SAAd;AAKH,OAhBL,EAiBKqB,KAjBL,CAiBWC,KAAK,IAAI;AACZ,aAAKtF,QAAL,CAAc;AACVgE,UAAAA,OAAO,EAAE;AADC,SAAd;;AAGA,YAAIsB,KAAK,CAACP,QAAN,CAAeQ,MAAf,KAA0B,GAA9B,EAAmC;AAC/B9L,UAAAA,KAAK,CAAC6L,KAAN,CAAYA,KAAK,CAACE,OAAlB;AACH,SAFD,MAGK;AACD,eAAKxF,QAAL,CAAc;AACVoE,YAAAA,aAAa,EAAE,EADL;AAEVC,YAAAA,oBAAoB,EAAE;AAFZ,WAAd;AAIA5K,UAAAA,KAAK,CAACkP,IAAN,CAAWrD,KAAK,CAACP,QAAN,CAAe/F,IAA1B;AACH;AAEJ,OAhCL;AAiCH;AACJ;;AACD0R,EAAAA,2BAA2B,CAACnM,KAAD,EAAQ;AAC/B,QAAItF,cAAc,GAAG,KAAKa,KAAL,CAAWb,cAAX,IAA6B,EAAlD;;AACA,QAAIsF,KAAK,KAAK,CAAV,GAAc,IAAd,GAAsBtF,cAAc,CAAC0R,WAAf,IAA8B1R,cAAc,CAAC0R,WAAf,KAA+B,EAAvF,EAA4F;AACxF,WAAK3Q,QAAL,CAAc;AAAEgE,QAAAA,OAAO,EAAE;AAAX,OAAd;AACA,UAAIgM,GAAG,GAAG;AAAC;AACP3F,QAAAA,KAAK,EAAE,wBADD;AAC2BuG,QAAAA,WAAW,EAAE,6BADxC;AAEND,QAAAA,WAAW,EAAEpM,KAAK,KAAK,CAAV,GACT,KAAKzE,KAAL,CAAWoE,uBAAX,CAAmCyM,WAD1B,GAGT1R,cAAc,CAAC0R,WALb;AAMNrB,QAAAA,QAAQ,EAAEvV,mBAAmB,CAAC,KAAKqE,KAAL,CAAWwB,KAAX,CAAiBmC,QAAlB,EAA4B,KAAKjC,KAAL,CAAWwD,UAAX,CAAsBgM,QAAlD,CANvB;AAONC,QAAAA,MAAM,EAAExV,mBAAmB,CAAC,KAAKqE,KAAL,CAAWwB,KAAX,CAAiBmC,QAAlB,EAA4B,KAAKjC,KAAL,CAAWwD,UAAX,CAAsBiM,MAAlD,CAPrB;AAQNF,QAAAA,gBAAgB,EAAE,KAAKvP,KAAL,CAAW+F,mBAAX,CAA+BwJ,gBAA/B,CAAgD3O,KAR5D;AASJmQ,QAAAA,MAAM,EAAE,0BAA0B,KAAK/Q,KAAL,CAAW+F,mBAAX,CAA+BwJ,gBAA/B,CAAgD3O,KAT9E;AASqFoB,QAAAA,QAAQ,EAAE,KAAK1D,KAAL,CAAWwB,KAAX,CAAiBmC;AAThH,OAAV;AAWA,UAAIyC,QAAQ,GAAG,EAAf;AACA,YAAMC,IAAI,GAAGtH,KAAK,CAACuH,IAAN,CAAW,qDAAX,EAAkEsL,GAAlE,CAAb;AACAxL,MAAAA,QAAQ,GAAG,CAACC,IAAD,CAAX;AACApH,MAAAA,KAAK,CAACwH,GAAN,CAAUL,QAAV,EACKM,IADL,CACUC,QAAQ,IAAI;AACd,YAAIzB,UAAU,GAAG,KAAKxD,KAAL,CAAWwD,UAA5B;AACAA,QAAAA,UAAU,GAAG,EAAE,GAAGA,UAAL;AAAiB,aAAGyB,QAAQ,CAAC,CAAD,CAAR,CAAY/F;AAAhC,SAAb;AACA,aAAKgB,QAAL,CAAc;AACVsD,UAAAA,UAAU,EAAE,EAAE,GAAGA;AAAL,WADF;AAEVU,UAAAA,OAAO,EAAE,KAFC;AAGVnF,UAAAA,SAAS,EAAE,KAHD;AAIVqB,UAAAA,aAAa,EAAE,KAJL;AAKVgE,UAAAA,uBAAuB,EAAEK,KAAK,KAAK,CAAV,GACrB,EAAE,GAAG,KAAKzE,KAAL,CAAWoE;AAAhB,WADqB,GAGrB,EAAE,GAAGjF;AAAL,WARM;AAUVA,UAAAA,cAAc,EAAE,EAVN;AAWV6R,UAAAA,YAAY,EAAE,KAAKhR,KAAL,CAAW2L,IAAX,GAAkB7Q,OAAO,CAACmW,WAAR,CAAoB,KAAKjR,KAAL,CAAW2L,IAA/B,EAAqC,KAAK3L,KAAL,CAAWyL,MAAhD,EAAwD,IAAxD,CAAlB,GAAkF;AAXtF,SAAd;AAaH,OAjBL,EAkBKlG,KAlBL,CAkBWC,KAAK,IAAI;AACZ,aAAKtF,QAAL,CAAc;AACVgE,UAAAA,OAAO,EAAE;AADC,SAAd;;AAGA,YAAIsB,KAAK,CAACP,QAAN,CAAeQ,MAAf,KAA0B,GAA9B,EAAmC;AAC/B9L,UAAAA,KAAK,CAAC6L,KAAN,CAAYA,KAAK,CAACE,OAAlB;AACH,SAFD,MAGK;AACD/L,UAAAA,KAAK,CAACkP,IAAN,CAAWrD,KAAK,CAACP,QAAN,CAAe/F,IAAf,CAAoBgS,GAA/B;AACH;AAEJ,OA7BL;AA8BH,KA9CD,MA8CO;AACHvX,MAAAA,KAAK,CAACgM,IAAN,CAAW,KAAKrH,KAAL,CAAW+J,IAAX,CAAgBC,aAAhB,CAA8B;AAAE5I,QAAAA,EAAE,EAAE;AAAN,OAA9B,CAAX;AAEH;AACJ,GAhzC0C,CAizC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;;AAuHAyR,EAAAA,qBAAqB,CAACC,SAAD,EAAYC,SAAZ,EAAuB;AACxC,QAAI,KAAKrR,KAAL,CAAWjB,SAAX,IAAwBsS,SAAS,CAAClR,eAAV,KAA8B,KAAtD,IACCkR,SAAS,CAAClS,cAAV,KAA6B,KAAKa,KAAL,CAAWb,cAD7C,EAC8D;AAC1D,aAAO,KAAP;AACH,KAHD,MAGO,IAAI,KAAKa,KAAL,CAAWjB,SAAX,IAAwBsS,SAAS,CAAClR,eAAV,KAA8B,KAAtD,IACNkR,SAAS,CAAC7P,SAAV,KAAwB,KAAKxB,KAAL,CAAWwB,SADjC,EAC6C;AAChD,aAAO,KAAP;AACH,KAHM,MAGA;AACH,aAAO,IAAP;AACH;AACJ;;AAyDD8P,EAAAA,iBAAiB,CAACpS,IAAD,EAAO;AACpB;AACA,UAAMqS,UAAU,GAAG,CAAC;AAAE,iBAAW,cAAb;AAA6B,mBAAa,gBAA1C;AAA4D,eAAS,OAArE;AAA8E,qBAAe;AAA7F,KAAD,EACnB;AAAE,iBAAW,sBAAb;AAAqC,mBAAa,4BAAlD;AAAgF,eAAS,OAAzF;AAAkG,qBAAe;AAAjH,KADmB,EAEnB;AAAE,iBAAW,sBAAb;AAAqC,mBAAa,4BAAlD;AAAgF,eAAS,OAAzF;AAAkG,qBAAe;AAAjH,KAFmB,EAGnB;AAAE,iBAAW,iBAAb;AAAgC,mBAAa,QAA7C;AAAuD,eAAS,OAAhE;AAAyE,qBAAe;AAAxF,KAHmB,EAIrB;AACE;AAAE,iBAAW,cAAb;AAA6B,mBAAa,WAA1C;AAAuD,eAAS,OAAhE;AAAyE,qBAAe;AAAxF,KALmB,EAMnB;AAAE,iBAAW,UAAb;AAAyB,mBAAa,WAAtC;AAAmD,eAAS,OAA5D;AAAqE,qBAAe;AAApF,KANmB,EAOnB;AAAE,iBAAW,uBAAb;AAAsC,mBAAa,qBAAnD;AAA0E,eAAS,OAAnF;AAA4F,qBAAe;AAA3G,KAPmB,EAQnB;AAAE,iBAAW,qBAAb;AAAoC,mBAAa,kBAAjD;AAAqE,eAAS,OAA9E;AAAuF,qBAAe;AAAtG,KARmB,EASnB;AAAE,iBAAW,cAAb;AAA6B,mBAAa,WAA1C;AAAuD,eAAS,OAAhE;AAAyE,qBAAe;AAAxF,KATmB,EAUnB;AAAE,iBAAW,cAAb;AAA6B,mBAAa,eAA1C;AAA2D,eAAS,OAApE;AAA6E,qBAAe;AAA5F,KAVmB,EAWnB;AAAE,iBAAW,cAAb;AAA6B,mBAAa,WAA1C;AAAuD,eAAS,OAAhE;AAAyE,qBAAe;AAAxF,KAXmB,CAAnB;AAYA,UAAMd,UAAU,GAAGvR,IAAI,IAAIA,IAAI,CAACuC,GAAL,CAAUiP,MAAD,IAAY;AAC5C,aAAO;AAAE,mBAAWA,MAAM,CAACC,UAApB;AAAgC,qBAAaD,MAAM,CAACC,UAApD;AAAgE,iBAAS;AAAzE,OAAP;AACH,KAF0B,CAA3B;AAGA,UAAMa,QAAQ,GAAG,CAAC,GAAGD,UAAJ,EAAgB,GAAGd,UAAnB,CAAjB;AACA,WAAOe,QAAP;AACH;;AAODC,EAAAA,MAAM,GAAG;AACL,UAAM7N,KAAK,GAAG,KAAK5D,KAAL,CAAWoN,UAAX,CAAsBsE,GAAtB,CAA0B,4BAA1B,KAA2D,KAAK1R,KAAL,CAAWoN,UAAX,CAAsB1D,GAAtB,CAA0B,4BAA1B,EAAwDvC,YAAjI;AACA,UAAMjE,MAAM,GAAG,KAAKlD,KAAL,CAAWoN,UAAX,CAAsBsE,GAAtB,CAA0B,4BAA1B,KAA2D,KAAK1R,KAAL,CAAWoN,UAAX,CAAsB1D,GAAtB,CAA0B,4BAA1B,EAAwDvC,YAAlI;AACA,UAAMwK,QAAQ,GAAG,KAAK3R,KAAL,CAAWoN,UAAX,CAAsBsE,GAAtB,CAA0B,8BAA1B,KAA6D,KAAK1R,KAAL,CAAWoN,UAAX,CAAsB1D,GAAtB,CAA0B,8BAA1B,EAA0DvC,YAAxI;AACA,UAAMyK,MAAM,GAAG,KAAK5R,KAAL,CAAWoN,UAAX,CAAsBsE,GAAtB,CAA0B,4BAA1B,KAA2D,KAAK1R,KAAL,CAAWoN,UAAX,CAAsB1D,GAAtB,CAA0B,4BAA1B,EAAwDvC,YAAlI;AACA,UAAM0K,SAAS,GAAG,KAAK7R,KAAL,CAAWoN,UAAX,CAAsBsE,GAAtB,CAA0B,+BAA1B,KAA8D,KAAK1R,KAAL,CAAWoN,UAAX,CAAsB1D,GAAtB,CAA0B,+BAA1B,EAA2DvC,YAA3I;AACA,UAAM2K,eAAe,GAAE,KAAK9R,KAAL,CAAWoN,UAAX,CAAsBsE,GAAtB,CAA0B,kBAA1B,KAAiD,KAAK1R,KAAL,CAAWoN,UAAX,CAAsB1D,GAAtB,CAA0B,kBAA1B,EAA8CvC,YAAtH;AAEA,QAAIqI,QAAQ,GAAG,KAAKxP,KAAL,CAAWwD,UAAX,IAAyB,KAAKxD,KAAL,CAAWwD,UAAX,CAAsBgM,QAA/C,GAA0DvV,mBAAmB,CAAC,KAAKqE,KAAL,CAAWwB,KAAX,CAAiBmC,QAAlB,EAA4B,KAAKjC,KAAL,CAAWwD,UAAX,CAAsBgM,QAAlD,CAA7E,GAA2I,IAAIuC,IAAJ,EAA1J;AACA,QAAItC,MAAM,GAAG,KAAKzP,KAAL,CAAWwD,UAAX,IAAyB,KAAKxD,KAAL,CAAWwD,UAAX,CAAsBiM,MAA/C,GAAwDxV,mBAAmB,CAAC,KAAKqE,KAAL,CAAWwB,KAAX,CAAiBmC,QAAlB,EAA4B,KAAKjC,KAAL,CAAWwD,UAAX,CAAsBiM,MAAlD,CAA3E,GAAuI,IAAIsC,IAAJ,EAApJ,CATK,CAWL;;AAEA,UAAMC,mBAAmB,GAAG,KAAKhS,KAAL,CAAWuO,uBAAX,GAAqC,KAAK+C,iBAAL,CAAuB,KAAKtR,KAAL,CAAWuO,uBAAlC,CAArC,GAAkG,EAA9H;AAEA,QAAIb,MAAM,GAAG,EAAb;;AACA,QAAIsE,mBAAmB,CAACtO,MAApB,GAA6B,CAAjC,EAAoC;AAChCsO,MAAAA,mBAAmB,CAACvQ,GAApB,CAAwBqK,KAAK,IAAI;AAC7BA,QAAAA,KAAK,CAACmG,cAAN,CAAqB,aAArB,IACIvE,MAAM,GAAG,EACL,GAAGA,MADE;AAEL,WAAC5B,KAAK,CAACoG,SAAP,GAAmB;AACf,qBAAS,KAAK5T,KAAL,CAAW+J,IAAX,CAAgBC,aAAhB,CAA8B;AACnC5I,cAAAA,EAAE,EAAEoM,KAAK,CAACqG;AADyB,aAA9B,CADM;AAKf,oBAAQ,MALO;AAMf,4BAAgB,CAAC,OAAD,EAAU,MAAV,CAND;AAQf,+BAAmB;AACf,4BAAc,MADC;AAEf,kCAAoB,KAAK7T,KAAL,CAAW+J,IAAX,CAAgBC,aAAhB,CAA8B;AAC9C5I,gBAAAA,EAAE,EAAEoM,KAAK,CAACqG;AADoC,eAA9B;AAFL;AARJ;AAFd,SADb,GAoBIzE,MAAM,GAAG,EACL,GAAGA,MADE;AAEL,WAAC,MAAM5B,KAAK,CAACoG,SAAZ,GAAwB,GAAzB,GAA+B;AAC3B,qBAASpG,KAAK,CAACoG,SADY;AAG3B,oBAAQ,MAHmB;AAI3B,4BAAgB,CAAC,OAAD,EAAU,MAAV,CAJW;AAM3B,+BAAmB;AACf,4BAAc,MADC;AAEf,kCAAoBpG,KAAK,CAACoG;AAFX;AANQ;AAF1B,SApBb;AAkCH,OAnCD;AAoCH;;AACD,UAAMxK,WAAW,GAAG;AAChBG,MAAAA,aAAa,EAAE,uBADC;AACwBU,MAAAA,cAAc,EAAE,+BADxC;AACyET,MAAAA,eAAe,EAAE,4BAD1F;AAEhBG,MAAAA,QAAQ,EAAE,0DAFM;AAGhBC,MAAAA,gBAAgB,EAAE;AAAElG,QAAAA,QAAQ,EAAE,KAAK1D,KAAL,CAAWwB,KAAX,CAAiBmC;AAA7B,OAHF;AAIhBuB,MAAAA,UAAU,EAAE,KAAKlF,KAAL,CAAWwB,KAAX,CAAiB0D,UAJb;AAKhBwE,MAAAA,eAAe,EAAE,CAAC,4BAAD;AALD,KAApB;AAQA,UAAMmI,cAAc,GAAG,CACnB;AACI,eAAS,UADb;AAEI,eAAS,KAAKnQ,KAAL,CAAWwO,cAAX,IAA6B,KAAKxO,KAAL,CAAWwO,cAAX,CAA0B4D,cAAvD,GAAwE,KAAKpS,KAAL,CAAWwO,cAAX,CAA0B4D,cAAlG,GAAmH;AAFhI,KADmB,EAKnB;AACI,eAAS,QADb;AAEI,eAAS,KAAKpS,KAAL,CAAWwO,cAAX,IAA6B,KAAKxO,KAAL,CAAWwO,cAAX,CAA0B6D,YAAvD,GAAsE,KAAKrS,KAAL,CAAWwO,cAAX,CAA0B6D,YAAhG,GAA+G;AAF5H,KALmB,EASnB;AACI,eAAS,iBADb;AAEI,eAAS,KAAKrS,KAAL,CAAWwO,cAAX,IACL,KAAKxO,KAAL,CAAWwO,cAAX,CAA0BkB,qBADrB,GAC6C,KAAK1P,KAAL,CAAWwO,cAAX,CAA0BkB,qBAA1B,CAAgD9O,KAD7F,GACqG;AAHlH,KATmB,CAAvB;AAiBA,UAAMiN,cAAc,GAAG,IAAIrR,cAAJ,EAAvB;AACA,wBACI,uDAEI,oBAAC,SAAD;AAAW,MAAA,OAAO,EAAE,KAAKwD,KAAL,CAAWkE,OAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ;AAAA;AAGK;AACG,2DAEI,oBAAC,WAAD;AAAa,MAAA,SAAS,EAAC,kEAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,mBAAD;AAAqB,MAAA,cAAc,EAAEiM,cAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,eAGQ,uDACI,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,GAAD;AAAK,MAAA,EAAE,EAAE,EAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,UAAD,CAAY,MAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,SAAD;AACI,MAAA,eAAe,EAAE,CAAC;AACd,wDAAmC,uDAC3B,oBAAC,GAAD;AAAK,UAAA,EAAE,EAAE,EAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBACI,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBACI,oBAAC,GAAD;AAAK,UAAA,EAAE,EAAE,CAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBACI,oBAAC,cAAD;AACI,UAAA,IAAI,EAAE,UADV;AAEI,UAAA,KAAK,EAAE,KAAK7R,KAAL,CAAW+J,IAAX,CAAgBC,aAAhB,CAA8B;AAAE5I,YAAAA,EAAE,EAAE;AAAN,WAA9B,CAFX;AAGI,UAAA,SAAS,EAAC,cAHd;AAII,UAAA,eAAe,EAAE,KAAKpB,KAAL,CAAW+J,IAAX,CAAgBC,aAAhB,CAA8B;AAAE5I,YAAAA,EAAE,EAAE;AAAN,WAA9B,CAJrB;AAKI,UAAA,QAAQ,EAAE8P,QALd;AAMI,UAAA,KAAK,EAAEA,QANX;AAOI,UAAA,UAAU,EAAE,KAAKlR,KAAL,CAAWwB,KAAX,CAAiBmC,QAAjB,CAA0BqQ,SAP1C;AAQI,UAAA,WAAW,EAAE,KARjB;AASI,UAAA,QAAQ,EAAGC,IAAD,IACN,KAAKpG,sBAAL,CAA4B,UAA5B,EAAwCoG,IAAxC,CAVR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ,CADJ,eAeI,oBAAC,GAAD;AAAK,UAAA,EAAE,EAAE,CAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBACI,oBAAC,cAAD;AACI,UAAA,IAAI,EAAE,QADV;AAEI,UAAA,KAAK,EAAE,KAAKjU,KAAL,CAAW+J,IAAX,CAAgBC,aAAhB,CAA8B;AAAE5I,YAAAA,EAAE,EAAE;AAAN,WAA9B,CAFX;AAGI,UAAA,SAAS,EAAC,cAHd;AAII,UAAA,eAAe,EAAE,KAAKpB,KAAL,CAAW+J,IAAX,CAAgBC,aAAhB,CAA8B;AAAE5I,YAAAA,EAAE,EAAE;AAAN,WAA9B,CAJrB;AAKI,UAAA,QAAQ,EAAE+P,MALd;AAMI,UAAA,KAAK,EAAEA,MANX;AAOI,UAAA,UAAU,EAAE,KAAKnR,KAAL,CAAWwB,KAAX,CAAiBmC,QAAjB,CAA0BqQ,SAP1C;AAQI,UAAA,WAAW,EAAE,KARjB;AASI,UAAA,QAAQ,EAAGC,IAAD,IACN,KAAKpG,sBAAL,CAA4B,QAA5B,EAAsCoG,IAAtC,CAVR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ,CAfJ,CADJ,eA+BI,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBACI,oBAAC,GAAD;AAAK,UAAA,EAAE,EAAE,EAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBACI,oBAAC,gBAAD;AACI,UAAA,IAAI,EAAE,kBADV;AAEI,UAAA,EAAE,EAAE,QAFR;AAGI,UAAA,QAAQ,EAAGhS,KAAD,IAAW,KAAKqF,aAAL,CAAmBrF,KAAnB,EAA0B,kBAA1B,CAHzB;AAII,UAAA,SAAS,EAAE,KAAKjC,KAAL,CAAW+J,IAAX,CAAgBC,aAAhB,CAA8B;AAAE5I,YAAAA,EAAE,EAAE;AAAN,WAA9B,CAJf;AAKI,UAAA,WAAW,EAAE,KAAKM,KAAL,CAAWb,cAAX,CAA0B,eAA1B,CALjB;AAMI,UAAA,KAAK,EAAE,KAAKa,KAAL,CAAW+F,mBAAX,IAAkC,KAAK/F,KAAL,CAAW+F,mBAAX,CAA+B,kBAA/B,CAAlC,GAAuF,KAAK/F,KAAL,CAAW+F,mBAAX,CAA+B,kBAA/B,KAAsD,EAA7I,GAAkJ,EAN7J;AAOI,UAAA,OAAO,EAAE,KAAK/F,KAAL,CAAWwD,UAAX,IAAyB,KAAKxD,KAAL,CAAWwD,UAAX,CAAsBmM,oBAA/C,IAAuE,EAPpF;AAQI,UAAA,QAAQ,EAAE,OARd;AASI,UAAA,WAAW,EAAE,OATjB;AAUI,UAAA,OAAO,EAAE,KAVb;AAWI,UAAA,UAAU,EAAE,KAXhB;AAYI,UAAA,YAAY,EAAE,KAZlB;AAaI,UAAA,WAAW,EAAE,KAbjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ,CADJ,CA/BJ,CAD2B;AADrB,OAAD,CADrB;AAyDI,MAAA,OAAO,EAAC,mBAzDZ;AA0DI,MAAA,cAAc,EAAE,KAAK1P,cA1DzB;AA2DI,MAAA,UAAU,EAAE,KAAKD,KAAL,CAAW6C,UA3D3B;AA4DI,MAAA,UAAU,EAAE,KAAKF,UA5DrB;AA6DI,MAAA,WAAW,EAAE,KAAKG,WA7DtB;AA8DI,MAAA,WAAW,EAAGP,CAAD,IAAO,KAAKrC,QAAL,CAAc;AAAEsS,QAAAA,WAAW,EAAEjQ;AAAf,OAAd,CA9DxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,CADJ,CADJ,CADJ,EAwEK,KAAKvC,KAAL,CAAWuO,uBAAX,iBACG,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAAM,oBAAC,GAAD;AAAK,MAAA,EAAE,EAAE,EAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACF,oBAAC,QAAD,CACI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAdJ;AAeI,MAAA,cAAc,EAAE,IAfpB;AAgBI,MAAA,gBAAgB,EAAE,CACd;AACA;AACA;AACA;AACA;AACA;AACA;AACIhE,QAAAA,KAAK,EAAE,qBADX;AAEI7K,QAAAA,EAAE,EAAE,EAFR;AAGI+S,QAAAA,MAAM,EAAG,KAAKzS,KAAL,CAAWiH,qBAAX,CAAiCyB,OAAjC,CAAyCoJ,eAAzC,MAA8D,CAAC,CAH5E;AAIIY,QAAAA,OAAO,EAAE,MAAM,KAAKrO,mBAAL,EAJnB;AAKIsO,QAAAA,WAAW,EAAE;AALjB,OAPc,CAhBtB;AA8BI,MAAA,iBAAiB,EAAE,KA9BvB,CA+BI;AA/BJ;AAgCI,MAAA,eAAe,EAAE,+BAhCrB;AAiCI,MAAA,IAAI,EAAE,KAAK3S,KAAL,CAAWwD,UAAX,IACF,KAAKxD,KAAL,CAAWwD,UAAX,CAAsBqB,sBAlC9B;AAmCI,MAAA,UAAU,EAAE,KAAK7E,KAAL,CAAWwD,UAAX,IACR,KAAKxD,KAAL,CAAWwD,UAAX,CAAsBqB,sBADd,GAERjH,OAAO,CAAC,KAAKoC,KAAL,CAAWwD,UAAX,CAAsBqB,sBAAtB,IAAgD,EAAjD,EACH,KAAK7E,KAAL,CAAWiJ,eAAX,GAA6B,KAAKjJ,KAAL,CAAWiJ,eAAxC,GAA0D;AAAEzG,QAAAA,IAAI,EAAE,CAAR;AAAWC,QAAAA,IAAI,EAAE;AAAjB,OADvD,CAFC,GAG+E,EAHjF,CAIN;AACA;AACA;AACA;AACA;AA3CR;AA6CI,MAAA,SAAS,EAAE,KAAKzC,KAAL,CAAWiJ,eAAX,GAA6B,KAAKjJ,KAAL,CAAWiJ,eAAxC,GAA0D;AAAEzG,QAAAA,IAAI,EAAE,CAAR;AAAWC,QAAAA,IAAI,EAAE;AAAjB,OA7CzE;AA8CI,MAAA,eAAe,EAAE,KAAKwG,eA9C1B;AA+CI,MAAA,mBAAmB,EAAE+I,mBA/CzB;AAgDI,MAAA,UAAU,EAAE,KAAKhS,KAAL,CAAWoN,UAhD3B;AAiDI,MAAA,qBAAqB,EAAE,KAAKpN,KAAL,CAAWiH,qBAjDtC;AAkDI,MAAA,QAAQ,EAAE,KAAK3I,KAAL,CAAWwB,KAAX,CAAiBmC,QAlD/B;AAmDI,MAAA,YAAY,EAAE,KAAK2Q,YAnDvB;AAoDI,MAAA,SAAS,EAAE,MAAM,KAAKjP,kBAAL,EApDrB;AAqDI,MAAA,QAAQ,EAAE,IArDd;AAsDI,MAAA,UAAU,EAAE,YAtDhB,CAuDI;AAvDJ;AAwDI,MAAA,UAAU,EAAE,OAxDhB,CAyDI;AAzDJ;AA0DI,MAAA,iBAAiB,EAAE,IA1DvB,CA2DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAlEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADE,CAAN,CAzER,CAHR,CAFJ,CAJR,EAgNQ,KAAK3D,KAAL,CAAWjB,SAAX,iBACA,oBAAC,aAAD;AAAe,MAAA,IAAI,EAAE,KAAKiB,KAAL,CAAWjB,SAAhC;AACI,MAAA,UAAU,EAAE,KAAKa,UADrB;AAEI,MAAA,QAAQ,EAAE,IAFd;AAGI,MAAA,UAAU,EAAE,KAHhB;AAII,MAAA,SAAS,EAAE,IAJf;AAKI,MAAA,IAAI,EAAE,KAAKI,KAAL,CAAWiB,eAAX,IAA8B,KAAKjB,KAAL,CAAWI,aAAzC,GAAyD,IAAzD,GAAgE,EAL1E;AAMI,MAAA,SAAS,EAAE,EANf;AAOI,MAAA,UAAU,EAAE,KAAK9B,KAAL,CAAWwB,KAAX,CAAiBwG,UAPjC;AAQI,MAAA,UAAU,EAAE,KAAKtG,KAAL,CAAWK,mBAAX,GAAiC,KAAK/B,KAAL,CAAW+J,IAAX,CAAgBC,aAAhB,CAA8B;AAAE5I,QAAAA,EAAE,EAAE;AAAN,OAA9B,CAAjC,GACR,KAAKM,KAAL,CAAWI,aAAX,GAA2B,EAA3B,GAAgC,KAAKJ,KAAL,CAAWqB,gBAAX,GAA8B,KAAK/C,KAAL,CAAW+J,IAAX,CAAgBC,aAAhB,CAA8B;AAAE5I,QAAAA,EAAE,EAAE;AAAN,OAA9B,CAA9B,GAC1B,KAAKM,KAAL,CAAWmB,eAAX,CAA2BqJ,cAVzC;AAWI,MAAA,WAAW,EAAE,KAAKxK,KAAL,CAAWI,aAAX,GAA2B,KAAKwQ,2BAAL,CAAiCiC,IAAjC,CAAsC,IAAtC,CAA3B,GAAyE,KAAK9J,wBAX/F;AAYI,MAAA,KAAK,EAAE,KAAKzK,KAAL,CAAWwB,KAAX,CAAiBD,SAZ5B,CAaI;AAbJ;AAeI,MAAA,aAAa,EAAE,KAAKyM,aAfxB;AAgBI,MAAA,YAAY,EAAE,KAAKhO,KAAL,CAAWwB,KAAX,CAAiBiO,YAhBnC;AAiBI,MAAA,WAAW,EAAE,KAAKzP,KAAL,CAAWnD,WAjB5B;AAkBI,MAAA,cAAc,EAAE,KAAK6E,KAAL,CAAWb,cAAX,IAA6B,EAlBjD;AAmBI,MAAA,YAAY,EACR,KAAKa,KAAL,CAAWK,mBAAX,gBACI,oBAAC,GAAD;AAAK,QAAA,EAAE,EAAE,EAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI,oBAAC,GAAD;AAAK,QAAA,EAAE,EAAE,CAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI,oBAAC,SAAD;AACI,QAAA,IAAI,EAAE,gBADV;AAEI,QAAA,KAAK,EAAE,KAAK/B,KAAL,CAAW+J,IAAX,CAAgBC,aAAhB,CAA8B;AAAE5I,UAAAA,EAAE,EAAE;AAAN,SAA9B,CAFX;AAGI,QAAA,WAAW,EAAE,KAAKpB,KAAL,CAAW+J,IAAX,CAAgBC,aAAhB,CAA8B;AAAE5I,UAAAA,EAAE,EAAE;AAAN,SAA9B,CAHjB;AAII,QAAA,KAAK,EAAE,KAAKM,KAAL,CAAWb,cAAX,CAA0B,gBAA1B,IACD,KAAKa,KAAL,CAAWb,cAAX,CAA0B,gBAA1B,CADC,GAC6C,EALxD;AAMI,QAAA,SAAS,EAAE,EANf;AAOI,QAAA,WAAW,EAAE,IAPjB;AAQI,QAAA,UAAU,EAAE,KAAKb,KAAL,CAAWwU,UAR3B;AASI,QAAA,SAAS,EAAGvS,KAAD,IAAW,KAAKgQ,sBAAL,CAA4BhQ,KAA5B,EAAmC,KAAKP,KAAL,CAAWb,cAA9C,CAT1B;AAUI,QAAA,QAAQ,EAAGoB,KAAD,IAAW,KAAK4K,eAAL,CAAqB5K,KAArB,CAVzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,CADJ,eAeI,oBAAC,GAAD;AAAK,QAAA,EAAE,EAAE,CAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAaI;AAAQ,QAAA,SAAS,EAAC,iBAAlB;AAAoC,QAAA,KAAK,EAAE;AAAEwS,UAAAA,KAAK,EAAE,OAAT;AAAkBC,UAAAA,WAAW,EAAE;AAA/B,SAA3C;AACI,QAAA,OAAO,EAAE,MAAM,KAAK9R,4BAAL,CAAkC;AAC7C,2CAAiC,KAAKlB,KAAL,CAAWuE,oBAAX,IAAmC,KAAKvE,KAAL,CAAWuE,oBAAX,CAAgCgC,6BADvD;AAE7CvE,UAAAA,QAAQ,EAAE,KAAK1D,KAAL,CAAWwB,KAAX,CAAiBmC,QAFkB;AAG7CgR,UAAAA,SAAS,EAAE,KAAKjT,KAAL,CAAWb,cAAX,CAA0B8T,SAA1B,IAAuC,KAAKjT,KAAL,CAAWb,cAAX,CAA0B8T,SAA1B,KAAwC,EAA/E,GACL,KAAKjT,KAAL,CAAWb,cAAX,CAA0B8T,SADrB,GACiC,GAJC;AAK7CC,UAAAA,UAAU,EAAE,IALiC;AAM7CtK,UAAAA,cAAc,EAAE,KAAK5I,KAAL,CAAWb,cAAX,CAA0ByJ;AANG,SAAlC,EAOZ,QAPY,CADnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBASI,oBAAC,eAAD;AAAiB,QAAA,IAAI,EAAElP,cAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QATJ,EAS8D,IAT9D,EAUK,KAAK4E,KAAL,CAAW+J,IAAX,CAAgBC,aAAhB,CAA8B;AAAE5I,QAAAA,EAAE,EAAE;AAAN,OAA9B,CAVL,CAbJ,CAfJ,eAyCI,oBAAC,GAAD;AAAK,QAAA,EAAE,EAAE,CAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAaI;AAAQ,QAAA,SAAS,EAAC,iBAAlB;AAAoC,QAAA,KAAK,EAAE;AAAEqT,UAAAA,KAAK,EAAE,OAAT;AAAkBC,UAAAA,WAAW,EAAE;AAA/B,SAA3C;AACI,QAAA,OAAO,EAAE,MAAM,KAAK9R,4BAAL,CAAkC;AAC7C,2CAAiC,KAAKlB,KAAL,CAAWuE,oBAAX,IAAmC,KAAKvE,KAAL,CAAWuE,oBAAX,CAAgCgC,6BADvD;AAE7CvE,UAAAA,QAAQ,EAAE,KAAK1D,KAAL,CAAWwB,KAAX,CAAiBmC,QAFkB;AAG7CgR,UAAAA,SAAS,EAAE,KAAKjT,KAAL,CAAWb,cAAX,CAA0B8T,SAA1B,IAAuC,KAAKjT,KAAL,CAAWb,cAAX,CAA0B8T,SAA1B,KAAwC,EAA/E,GACL,KAAKjT,KAAL,CAAWb,cAAX,CAA0B8T,SADrB,GACiC,GAJC;AAK7CC,UAAAA,UAAU,EAAE,KALiC;AAM7CtK,UAAAA,cAAc,EAAE,KAAK5I,KAAL,CAAWb,cAAX,CAA0ByJ;AANG,SAAlC,EAOZ,QAPY,CADnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBASI,oBAAC,eAAD;AAAiB,QAAA,IAAI,EAAExQ,UAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QATJ,EAS0D,IAT1D,EAUK,KAAKkG,KAAL,CAAW+J,IAAX,CAAgBC,aAAhB,CAA8B;AAAE5I,QAAAA,EAAE,EAAE;AAAN,OAA9B,CAVL,CAbJ,CAzCJ,CADJ,eAqEI,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI,oBAAC,GAAD;AAAK,QAAA,EAAE,EAAE,CAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI,oBAAC,SAAD;AACI,QAAA,IAAI,EAAE,WADV;AAEI,QAAA,KAAK,EAAE,KAAKpB,KAAL,CAAW+J,IAAX,CAAgBC,aAAhB,CAA8B;AAAE5I,UAAAA,EAAE,EAAE;AAAN,SAA9B,CAFX;AAGI,QAAA,WAAW,EAAE,KAAKpB,KAAL,CAAW+J,IAAX,CAAgBC,aAAhB,CAA8B;AAAE5I,UAAAA,EAAE,EAAE;AAAN,SAA9B,CAHjB;AAII,QAAA,KAAK,EAAE,KAAKM,KAAL,CAAWb,cAAX,CAA0B,WAA1B,IACD,KAAKa,KAAL,CAAWb,cAAX,CAA0B,WAA1B,CADC,GACwC,EALnD;AAMI,QAAA,SAAS,EAAE,GANf;AAOI,QAAA,QAAQ,EAAGoB,KAAD,IAAW,KAAK4K,eAAL,CAAqB5K,KAArB,CAPzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,CADJ,CArEJ,eAkFI,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACK,KAAKP,KAAL,CAAWsE,aAAX,CAAyBZ,MAAzB,GAAkC,CAAlC,iBACG;AAAK,QAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI,oBAAC,IAAD,CAAM,MAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI;AAAM,QAAA,KAAK,EAAE;AAAEyP,UAAAA,OAAO,EAAE,cAAX;AAA2BC,UAAAA,SAAS,EAAE;AAAtC,SAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAK,KAAK9U,KAAL,CAAW+J,IAAX,CAAgBC,aAAhB,CAA8B;AAAE5I,QAAAA,EAAE,EAAE;AAAN,OAA9B,CAAL,CADJ,CADJ,CADJ,eAMI,oBAAC,IAAD,CAAM,IAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAEQ,KAAKM,KAAL,CAAWsE,aAAX,CAAyB7C,GAAzB,CAA6B,CAACqD,IAAD,EAAOuO,KAAP,KAAiB;AAC1C,4BACI,uDACI,oBAAC,GAAD;AAAK,UAAA,EAAE,EAAE,CAAT;AAAY,UAAA,GAAG,EAAG,YAAWA,KAAM,EAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBACI,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBACI,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACIvO,IAAI,CAACmN,cAAL,CAAoB,aAApB,IACI,KAAK3T,KAAL,CAAW+J,IAAX,CAAgBC,aAAhB,CAA8B;AAAE5I,UAAAA,EAAE,EAAEoF,IAAI,CAACqN;AAAX,SAA9B,CADJ,GAC0DrN,IAAI,CAACqN,OAFnE,OADJ,eAII,oBAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAe,KAAKnS,KAAL,CAAWuE,oBAAX,CAAgCO,IAAI,CAACoN,SAArC,MAAkD,EAAlD,IACf,KAAKlS,KAAL,CAAWuE,oBAAX,CAAgCO,IAAI,CAACoN,SAArC,MAAkDrT,SADnC,IAEf,KAAKmB,KAAL,CAAWuE,oBAAX,CAAgCO,IAAI,CAACoN,SAArC,MAAkD,IAFnC,GAGf,GAHe,GAGX,KAAKlS,KAAL,CAAWuE,oBAAX,CAAgCO,IAAI,CAACoN,SAArC,CAHJ,CAJJ,CADJ,CADJ,CADJ;AAeH,OAhBD,CAFR,CAmBQ;AACA;AACA;AArBR,OADJ,CANJ,CADJ,CAFR,CAlFJ,CADJ,GA0HM,KAAKlS,KAAL,CAAWI,aAAX,gBACE,oBAAC,kBAAD;AACI,QAAA,MAAM,EAAEsN,MADZ;AAEI,QAAA,eAAe,EAAE,IAFrB;AAII,QAAA,UAAU,EAAE,KAAK1N,KAAL,CAAWsT,UAJ3B;AAKI,QAAA,IAAI,EAAE,KAAKtT,KAAL,CAAWqL,SALrB;AAMI,QAAA,IAAI,EAAE,KAAKrL,KAAL,CAAWsL,SANrB;AAOI,QAAA,QAAQ,EAAE,KAAKC,QAPnB;AAQI,QAAA,IAAI,EAAE,KAAKjN,KAAL,CAAWwB,KAAX,CAAiB6L,IAAjB,KAA0B9M,SAA1B,GAAsC,KAAKP,KAAL,CAAWwB,KAAX,CAAiB6L,IAAvD,GAA8D,KAAK3L,KAAL,CAAWb,cAAX,CAA0BwM,IARlG;AASI,QAAA,WAAW,EAAE,KAAK4H,SATtB;AAUI,QAAA,UAAU,EAAE,KAAKjV,KAAL,CAAWwB,KAAX,CAAiB0T,WAAjB,IAAgC,EAVhD;AAWI,QAAA,gBAAgB,EAAE,KAAKpI,sBAX3B;AAYI,QAAA,MAAM,EAAE,IAZZ;AAaI,QAAA,QAAQ,EAAE,KAAK9M,KAAL,CAAWwB,KAAX,CAAiBmC,QAb/B;AAcI,QAAA,WAAW,EAAE,KAAK3D,KAAL,CAAWnD,WAd5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,GAiBI,KAAKmD,KAAL,CAAWwB,KAAX,CAAiBD,SAAjB,gBACE,oBAAC,KAAD;AAAO,QAAA,SAAS,EAAE,KAAKvB,KAAL,CAAWwB,KAAX,CAAiBH,SAAnC;AACI,QAAA,aAAa,EAAE,KAAKrB,KAAL,CAAW+J,IAAX,CAAgBC,aADnC;AAEI,QAAA,eAAe,EAAE,KAAK6C,eAF1B;AAGI,QAAA,UAAU,EAAE,KAAK7M,KAAL,CAAWwB,KAAX,CAAiBwG,UAHjC;AAII,QAAA,cAAc,EAAE,KAAKtG,KAAL,CAAWb,cAAX,IAA6B,EAJjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,GAQE,KAAKa,KAAL,CAAWiB,eAAX,gBAA6B,uDACzB,oBAAC,eAAD;AACI,QAAA,IAAI,EAAE,KAAKjB,KAAL,CAAWmF,IAAX,IAAmB,CAD7B;AAEI,QAAA,QAAQ,EAAE,KAAK7G,KAAL,CAAWwB,KAAX,CAAiBmC,QAF/B;AAGI,QAAA,OAAO,EAAE,KAAKjC,KAAL,CAAWqF,OAAX,IAAsB,CAHnC;AAII,QAAA,cAAc,EAAE,KAAKrF,KAAL,CAAWb,cAAX,CAA0BqC,SAA1B,IAAuC,EAJ3D;AAKI,QAAA,SAAS,EAAE,KAAKxB,KAAL,CAAWwB,SAAX,IAAwB,EALvC;AAMI,QAAA,gBAAgB,EAAE,KAAKxB,KAAL,CAAWqB,gBANjC;AAOI,QAAA,oBAAoB,EAAE,KAAKkG,oBAP/B;AAQI,QAAA,eAAe,EAAE,KAAKvH,KAAL,CAAWmB,eARhC;AASI,QAAA,iBAAiB,EAAE,KAAKnB,KAAL,CAAWwD,UAAX,IACf,KAAKxD,KAAL,CAAWwD,UAAX,CAAsBqB,sBADP,IAEfjH,OAAO,CAAC,KAAKoC,KAAL,CAAWwD,UAAX,CAAsBqB,sBAAtB,IAAgD,EAAjD,EACH,KAAK7E,KAAL,CAAWiJ,eAAX,GAA6B,KAAKjJ,KAAL,CAAWiJ,eAAxC,GAA0D;AAAEzG,UAAAA,IAAI,EAAE,CAAR;AAAWC,UAAAA,IAAI,EAAE;AAAjB,SADvD,CAAP,CACqFvD,IAZ7F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADyB,CAA7B,gBAeI,oBAAC,uBAAD;AACI,QAAA,SAAS,EAAE,KAAKc,KAAL,CAAWL,SAD1B;AAEI,QAAA,oBAAoB,EAAE,KAAKK,KAAL,CAAWgG,oBAFrC;AAGI,QAAA,aAAa,EAAGzD,CAAD,IAAO,KAAKjC,aAAL,CAAmBiC,CAAnB,CAH1B;AAII,QAAA,aAAa,EAAE,KAAKqD,aAJxB;AAKI,QAAA,cAAc,EAAE,KAAK5F,KAAL,CAAWb,cAAX,IAA6B,EALjD;AAMI,QAAA,eAAe,EAAE,KAAKmI,eAN1B;AAOI,QAAA,QAAQ,EAAE,KAAKhJ,KAAL,CAAWwB,KAAX,CAAiBmC,QAP/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAtLxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAjNR,CADJ;AAsZH;;AAphE0C;;AAwiE/C,MAAMwR,eAAe,GAAIzT,KAAD,IAAW;AAC/B,SAAO;AACHF,IAAAA,KAAK,EAAEE,KAAK,CAACF;AADV,GAAP;AAGH,CAJD;;AAMA,eAAezI,OAAO,CAACoc,eAAD,EAAkB;AACpCzY,EAAAA;AADoC,CAAlB,CAAP,CAEZ1D,UAAU,CAAC8G,sBAAD,CAFE,CAAf","sourcesContent":["import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { injectIntl, FormattedMessage } from 'react-intl';\r\nimport { Row, Col, Card, Nav, FormGroup, FormLabel, Form, Button, FormControl, InputGroup } from 'react-bootstrap';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport PerfectScrollbar from 'react-perfect-scrollbar';\r\nimport { faTrashAlt, faCopy, faPencilAlt, faSync, faPlus, faThumbsUp, faBoxOpen, faBox, faLocationArrow, faFolderMinus, faFolder, faFolderOpen, faArrowRight, faSearch, faTimes, faArrowDown, faHandPointLeft, faArrowUp, faClone, faPuzzlePiece, faCalculator, faEye, faTrashRestore } from '@fortawesome/free-solid-svg-icons';\r\nimport { toast } from 'react-toastify';\r\nimport ListMaster from '../../components/list-master/list-master.component';\r\nimport { constructOptionList, convertDateValuetoString, getControlMap, onSaveMandatoryValidation, rearrangeDateFormat, searchData, searchJsonData, showEsign, sortData } from '../../components/CommonScript';\r\nimport { ReadOnlyText, ContentPanel, SearchIcon } from '../../components/App.styles';\r\n//import SortableTree from 'react-sortable-tree'; \r\nimport FormSelectSearch from '../../components/form-select-search/form-select-search.component';\r\n\r\nimport DataGrid from '../../components/data-grid/data-grid.component';\r\nimport {\r\n    BasicConfig, BasicFuncs,\r\n    Utils as QbUtils,\r\n} from \"@react-awesome-query-builder/ui\";\r\n\r\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\r\nimport {\r\n    callService, crudMaster, validateEsignCredential, updateStore, getSelectedSampleStorageLocation, filterColumnData, changeStorageCategoryFilter,\r\n    openPropertyModal, editSampleStorageLocation, approveSampleStorageLocation, getSelectedSampleStorageVersion, fetchStorageCategory, copySampleStorageVersion,\r\n    crudSampleStorageLocation\r\n} from '../../actions';\r\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\r\nimport { ListWrapper } from '../../components/client-group.styles';\r\nimport { MediaLabel, ProductList } from '../product/product.styled';\r\n// import ReactTooltip from 'react-tooltip';\r\nimport { uuid } from \"uuidv4\";\r\nimport TreeEditable from \"../../components/form-tree-editable/TreeEditable\";\r\nimport TreeViewEditable from \"../../components/form-tree-editable/form-tree-editable.component\";\r\nimport { getItemPath, mapTree, removeItems } from \"@progress/kendo-react-treelist\";\r\nimport ConfirmMessage from '../../components/confirm-alert/confirm-message.component';\r\nimport AddTreeview from './AddTreeview';\r\nimport AddTreeProperties from './AddTreeProperties';\r\nimport { Splitter } from '@progress/kendo-react-layout';\r\nimport TransactionListMaster from '../../components/TransactionListMaster';\r\nimport BreadcrumbComponent from '../../components/Breadcrumb.Component';\r\nimport SplitterLayout from 'react-splitter-layout';\r\nimport StorageCategoryFilter from './StorageCategoryFilter';\r\nimport { transactionStatus } from '../../components/Enumeration';\r\nimport Esign from '../audittrail/Esign';\r\nimport { TreeViewDragAnalyzer, moveTreeViewItem } from '@progress/kendo-react-treeview';\r\nimport ModalShow from '../../components/ModalShow';\r\nimport rsapi from '../../rsapi';\r\nimport AddSampleStorageMapping from './AddSampleStorageMapping';\r\nimport Axios from 'axios';\r\nimport StorageMappingFilter from './StorageMappingFilter';\r\nimport Preloader from '../../components/preloader/preloader.component';\r\nimport TransactionListMasterJsonView from '../../components/TransactionListMasterJsonView';\r\n\r\nimport { groupBy, process } from '@progress/kendo-data-query';\r\n//import Spreadsheet from '../../components/Spreadsheet/Spreadsheet';\r\nimport MatrixComponent from '../../components/MatrixComponent';\r\nimport FilterQueryBuilder from '../../components/FilterQueryBuilder';\r\nimport { Grid, GridColumn } from '@progress/kendo-react-grid';\r\nimport FormInput from '../../components/form-input/form-input.component';\r\nimport AdvFilter from '../../components/AdvFilter';\r\nimport DateTimePicker from \"../../components/date-time-picker/date-time-picker.component\";\r\n\r\n\r\nclass SampleStorageRetrieval extends Component {\r\n    dragOverCnt = 0;\r\n    isDragDrop = false;\r\n    SEPARATOR = '_';\r\n    uniqueIDArr = [];\r\n    countforTree = 0;\r\n    pointedItem = undefined\r\n    getitemPath = {};\r\n\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            retrievalType: 1,\r\n            // extractedColumnList: [   \r\n            //     { \"idsName\": \"IDS_STORAGESTRUCTURE\", \"dataField\": \"ssamplestoragelocationname\", \"width\": \"200px\" },\r\n            //     { \"idsName\": \"IDS_SAMPLESTORAGEPATH\", \"dataField\": \"scontainerpath\", \"width\": \"450px\" },\r\n            //     { \"idsName\": \"IDS_POSITION\", \"dataField\": \"sposition\", \"width\": \"100px\" },\r\n            //     { \"idsName\": \"IDS_SAMPLEID\", \"dataField\": \"spositionvalue\", \"width\": \"100px\" },\r\n            //     //{ \"idsName\": \"IDS_PROJECTTYPE\", \"dataField\": \"sprojecttypename\", \"width\": \"100px\" },\r\n            //     //{ \"idsName\": \"IDS_PRODUCT\", \"dataField\": \"sproductname\", \"width\": \"100px\" },\r\n            //     { \"idsName\": \"IDS_PARTICIPANTS\", \"dataField\": \"sparticipantid\", \"width\": \"100px\" },\r\n            //     //{ \"idsName\": \"IDS_VISITNUMBER\", \"dataField\": \"svisitnumber\", \"width\": \"100px\" },\r\n            //     { \"dataField\": \"svisitnumbershortcode\", \"idsName\": \"IDS_VISITNUMBERCODE\", \"width\": \"100px\" }, \r\n            //     { \"dataField\": \"sprojectshortcode\", \"idsName\": \"IDS_PROJECTTYPECODE\" , \"width\": \"100px\"} ,\r\n            //     { \"dataField\": \"sproductshortcode\", \"idsName\": \"IDS_PRODUCTCODE\", \"width\": \"100px\" } ,\r\n            //     { \"dataField\": \"ssampledonorshortcode\", \"idsName\": \"IDS_SAMPLEDONORCODE\", \"width\": \"100px\" }  ,\r\n            //     { \"dataField\": \"scollectiontubetypeshortcode\", \"idsName\": \"IDS_COLLECTIONTUBETYPECODE\", \"width\": \"100px\" }\r\n            // ],\r\n            sheetData: {},\r\n            selectedRecordFilter: {},\r\n            treeData: [{ title: 'Chicken', children: [{ title: 'Egg' }] }],\r\n            toggleAction: false,\r\n            treeDataView: undefined,\r\n            toggleActionView: false,\r\n            treeData: [\r\n                {\r\n                    //  text: \"root\",\r\n                    text: this.props.intl.formatMessage({ id: \"IDS_ROOT\" }),\r\n                    expanded: true,\r\n                    editable: true,\r\n                    root: true,\r\n                    id: uuid(),\r\n                }],\r\n            panes: [{\r\n                size: '50%',\r\n                scrollable: false\r\n            }],\r\n            selectedRecord: {},\r\n            userRoleControlRights: [],\r\n            controlMap: new Map(),\r\n            skip: 0,\r\n            detailSkip: 0,\r\n            detailTake: 10,\r\n            take: this.props.Login.settings ?\r\n                this.props.Login.settings[3] : 25,\r\n            splitChangeWidthPercentage: 22,\r\n            selectedItem: undefined,\r\n            loading: false,\r\n            dataStateChange: {\r\n                take: 10,\r\n                skip: 0,\r\n                // group: [\r\n                //     {\r\n                //         field: \"ssamplestoragelocationname\",\r\n                //     },\r\n                // ],\r\n            }\r\n        };\r\n        let fields = {};\r\n        // if (this.state.extractedColumnList) {\r\n        //     // let newArr=[...[  { \"dataField\": \"svisitnumbershortcode\", \"idsName\": \"IDS_VISITNUMBERCODE\", \"width\": \"100px\" }, \r\n        //     // { \"dataField\": \"sprojectshortcode\", \"idsName\": \"IDS_PROJECTTYPECODE\" , \"width\": \"100px\"} ,\r\n        //     // { \"dataField\": \"sproductshortcode\", \"idsName\": \"IDS_PRODUCTCODE\", \"width\": \"100px\" } ,\r\n        //     // { \"dataField\": \"ssampledonorshortcode\", \"idsName\": \"IDS_SAMPLEDONORCODE\", \"width\": \"100px\" }  ,\r\n        //     // { \"dataField\": \"scollectiontubetypeshortcode\", \"idsName\": \"IDS_COLLECTIONTUBETYPECODE\", \"width\": \"100px\" }]\r\n        //     // ,...this.state.extractedColumnList]\r\n        //     this.state.extractedColumnList.map(field => {\r\n        //         if (field.dataField !== 'ssamplestoragelocationname' && field.dataField !== 'sproductname'\r\n        //             && field.dataField !== 'sprojecttypename' && field.dataField !== 'svisitnumber') {\r\n        //             fields = {\r\n        //                 ...fields,\r\n        //                 [field.dataField]: {\r\n        //                     \"label\":\r\n        //                         this.props.intl.formatMessage({\r\n        //                             id: field.idsName,\r\n        //                         })\r\n        //                     ,\r\n        //                     \"type\": field.dataField === 'navailablespace' ? \"number\" : \"text\",\r\n        //                     \"valueSources\": [\"value\", \"func\"],\r\n\r\n        //                     \"mainWidgetProps\": {\r\n        //                         \"valueLabel\": \"Name\",\r\n        //                         \"valuePlaceholder\": this.props.intl.formatMessage({\r\n        //                             id: field.idsName\r\n        //                         })\r\n        //                     }\r\n        //                 }\r\n        //             }\r\n        //         }\r\n        //     });\r\n        // }\r\n        this.state = { ... this.state, 'fields': fields }\r\n        this.searchRef = React.createRef();\r\n        this.dragClue = React.createRef();\r\n        this.confirmMessage = new ConfirmMessage();\r\n    }\r\n    static getDerivedStateFromProps(props, state) {\r\n\r\n        if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\r\n            toast.warn(props.Login.masterStatus);\r\n            props.Login.masterStatus = \"\";\r\n        }\r\n\r\n        if (props.Login.error !== \"\" && props.Login.error !== state.error) {\r\n            toast.error(props.Login.error)\r\n            props.Login.error = \"\";\r\n        }\r\n        return null;\r\n    }\r\n    componentDidUpdate(previousProps, previousState) {\r\n        let { filterData, storageCategoryOptions,\r\n            selectedRecord, controlMap,\r\n            userRoleControlRights, storageLocationOptions,\r\n            sampleStorageVersionOptions, masterData, selectedRecordFilter, fields, selectedProjectType, selectedProjectTypeList, breadCrumbdata } = this.state\r\n        let bool = false;\r\n        ///////////////////////////////\r\n        if (this.props.Login.masterData.sampleStorageLocation !== previousProps.Login.masterData.sampleStorageLocation) {\r\n            let queryBuilderFreezer = [];\r\n            bool = true;\r\n            this.props.Login.masterData.sampleStorageLocation && this.props.Login.masterData.sampleStorageLocation.map(\r\n                (item) => queryBuilderFreezer.push({ \"value\": item.nsamplestoragelocationcode, \"title\": item.ssamplestoragelocationname })\r\n            )\r\n            fields = {\r\n                ...fields,\r\n                'nsamplestoragelocationcode': {\r\n                    \"label\": this.props.intl.formatMessage({\r\n                        id: \"IDS_STORAGESTRUCTURENAME\",\r\n                    }),\r\n                    \"type\": \"select\",\r\n                    \"valueSources\": [\"value\"],\r\n                    \"fieldSettings\": {\r\n                        \"listValues\": queryBuilderFreezer\r\n                    }\r\n                }\r\n            }\r\n\r\n        }\r\n        // if (this.props.Login.masterData.sampleType !== previousProps.Login.masterData.sampleType) {\r\n        //     let queryBuilderFreezer = [];\r\n        //     bool = true;\r\n        //     this.props.Login.masterData.sampleType && this.props.Login.masterData.sampleType.map(\r\n        //         (item) => queryBuilderFreezer.push({ \"value\": item.nproductcode, \"title\": item.sproductname })\r\n        //     )\r\n        //     fields = {\r\n        //         ...fields,\r\n        //         'nproductcode': {\r\n        //             \"label\": this.props.intl.formatMessage({\r\n        //                 id: \"IDS_PRODUCT\",\r\n        //             }),\r\n        //             \"type\": \"select\",\r\n        //             \"valueSources\": [\"value\"],\r\n        //             \"fieldSettings\": {\r\n        //                 \"listValues\": queryBuilderFreezer\r\n        //             }\r\n        //         }\r\n        //     }\r\n\r\n        // }\r\n        // if (this.props.Login.masterData.ProjectType !== previousProps.Login.masterData.ProjectType) {\r\n        //     let queryBuilderFreezer = [];\r\n        //     bool = true;\r\n        //     this.props.Login.masterData.ProjectType && this.props.Login.masterData.ProjectType.map(\r\n        //         (item) => queryBuilderFreezer.push({ \"value\": item.nprojecttypecode, \"title\": item.sprojecttypename })\r\n        //     )\r\n        //     fields = {\r\n        //         ...fields,\r\n        //         'nprojecttypecode': {\r\n        //             \"label\": this.props.intl.formatMessage({\r\n        //                 id: \"IDS_PROJECTTYPE\",\r\n        //             }),\r\n        //             \"type\": \"select\",\r\n        //             \"valueSources\": [\"value\"],\r\n        //             \"fieldSettings\": {\r\n        //                 \"listValues\": queryBuilderFreezer\r\n        //             }\r\n        //         }\r\n        //     }\r\n\r\n        // } if (this.props.Login.masterData.VisitNumber !== previousProps.Login.masterData.VisitNumber) {\r\n        //     let queryBuilderFreezer = [];\r\n        //     bool = true;\r\n        //     this.props.Login.masterData.VisitNumber && this.props.Login.masterData.VisitNumber.map(\r\n        //         (item) => queryBuilderFreezer.push({ \"value\": item.nvisitnumbercode, \"title\": item.svisitnumber })\r\n        //     )\r\n        //     fields = {\r\n        //         ...fields,\r\n        //         'nvisitnumbercode': {\r\n        //             \"label\": this.props.intl.formatMessage({\r\n        //                 id: \"IDS_VISITNUMBER\",\r\n        //             }),\r\n        //             \"type\": \"select\",\r\n        //             \"valueSources\": [\"value\"],\r\n        //             \"fieldSettings\": {\r\n        //                 \"listValues\": queryBuilderFreezer\r\n        //             }\r\n        //         }\r\n        //     }\r\n\r\n        // }\r\n        ///////////////////////////////\r\n        if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\r\n            bool = true;\r\n            userRoleControlRights = [];\r\n            if (this.props.Login.userRoleControlRights) {\r\n                this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item =>\r\n                    userRoleControlRights.push(item.ncontrolcode))\r\n            }\r\n            controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode)\r\n\r\n        }\r\n\r\n        if (this.props.Login.masterData.filterStorageCategory !== previousProps.Login.masterData.filterStorageCategory) {\r\n            bool = true;\r\n            const filterStorageCategorylist = constructOptionList(this.props.Login.masterData.filterStorageCategory || [], \"nstoragecategorycode\",\r\n                \"sstoragecategoryname\", undefined, undefined, undefined);\r\n            storageCategoryOptions = filterStorageCategorylist.get(\"OptionList\");\r\n            if (this.props.Login.masterData.selectedStorageCategory) {\r\n                selectedRecordFilter = {\r\n                    ...selectedRecordFilter,\r\n                    nstoragecategorycode: storageCategoryOptions.filter(item =>\r\n                        item.value === this.props.Login.masterData.selectedStorageCategory.nstoragecategorycode)[0]\r\n                }\r\n            }\r\n\r\n        }\r\n        if (this.props.Login.masterData.sampleStorageLocation !== previousProps.Login.masterData.sampleStorageLocation) {\r\n            bool = true;\r\n            const sampleStorageLocationList = constructOptionList(this.props.Login.masterData.sampleStorageLocation || [], \"nsamplestoragelocationcode\",\r\n                \"ssamplestoragelocationname\", undefined, undefined, undefined);\r\n            storageLocationOptions = sampleStorageLocationList.get(\"OptionList\");\r\n            if (this.props.Login.masterData.selectedSampleStorageLocation) {\r\n                selectedRecordFilter = {\r\n                    ...selectedRecordFilter,\r\n                    nsamplestoragelocationcode: storageLocationOptions.filter(item =>\r\n                        item.value === this.props.Login.masterData.selectedSampleStorageLocation.nsamplestoragelocationcode)[0]\r\n                }\r\n            }\r\n\r\n\r\n        }\r\n\r\n        if (this.props.Login.masterData.sampleStorageVersion !== previousProps.Login.masterData.sampleStorageVersion) {\r\n            bool = true;\r\n            const sampleStorageVersionList = constructOptionList(this.props.Login.masterData.sampleStorageVersion || [], \"nsamplestorageversioncode\",\r\n                \"nversionno\", undefined, undefined, undefined);\r\n            sampleStorageVersionOptions = sampleStorageVersionList.get(\"OptionList\");\r\n            if (this.props.Login.masterData.selectedSampleStorageVersion) {\r\n                selectedRecordFilter = {\r\n                    ...selectedRecordFilter,\r\n                    nsamplestorageversioncode: sampleStorageVersionOptions.filter(item =>\r\n                        item.value === this.props.Login.masterData.selectedSampleStorageVersion.nsamplestorageversioncode)[0]\r\n                }\r\n            }\r\n        }\r\n\r\n        if (this.props.Login.masterData !== previousProps.Login.masterData) {\r\n            bool = true;\r\n            masterData = this.props.Login.masterData;\r\n            selectedRecord[\"nprojecttypecode\"] = {\r\n                label: this.props.Login.masterData.selectedProjectType &&\r\n                    this.props.Login.masterData.selectedProjectType.sprojecttypename ?\r\n                    this.props.Login.masterData.selectedProjectType.sprojecttypename : 'NA'\r\n                , value: this.props.Login.masterData.selectedProjectType && this.props.Login.masterData.selectedProjectType.nprojecttypecode\r\n            };\r\n            selectedProjectType = {\r\n                nprojecttypecode: {\r\n                    label: this.props.Login.masterData.selectedProjectType &&\r\n                        this.props.Login.masterData.selectedProjectType.sprojecttypename ?\r\n                        this.props.Login.masterData.selectedProjectType.sprojecttypename : 'NA'\r\n                    , value: this.props.Login.masterData.selectedProjectType && this.props.Login.masterData.selectedProjectType.nprojecttypecode\r\n                }\r\n            };\r\n            breadCrumbdata = {\r\n                ...convertDateValuetoString(this.props.Login.masterData.fromDate,\r\n                    this.props.Login.masterData.toDate, this.props.Login.userInfo),\r\n                breadcrumbprojecttype: {\r\n                    value: this.props.Login.masterData.selectedProjectType &&\r\n                        this.props.Login.masterData.selectedProjectType.sprojecttypename ?\r\n                        this.props.Login.masterData.selectedProjectType.sprojecttypename : 'NA'\r\n                }\r\n            }\r\n            selectedProjectTypeList = this.props.Login.masterData.selectedProjectTypeList;\r\n            const filterStorageCategorylist = constructOptionList(this.props.Login.masterData.projectbarcodeconfig || [], \"nprojecttypecode\",\r\n                \"sprojecttypename\", undefined, undefined, undefined);\r\n            masterData['projectbarcodeconfig'] = filterStorageCategorylist.get(\"OptionList\");\r\n\r\n            filterData = this.generateBreadCrumData(this.props.Login.masterData);\r\n\r\n        }\r\n        if (this.state.masterData !== previousState.masterData) {\r\n            bool = true;\r\n            filterData = this.generateBreadCrumData(this.state.masterData);\r\n\r\n        }\r\n\r\n\r\n        if (bool) {\r\n            this.setState({\r\n                storageCategoryOptions, filterData,\r\n                selectedRecord, controlMap,\r\n                userRoleControlRights, storageLocationOptions,\r\n                sampleStorageVersionOptions, masterData, selectedRecordFilter, fields, selectedProjectType, selectedProjectTypeList,\r\n                breadCrumbdata\r\n            });\r\n        }\r\n\r\n    }\r\n\r\n\r\n    openModal = () => {\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                openModal: true, selectedRecord: {}, loadTreeProperties: false,\r\n                treeData: [\r\n                    {\r\n                        text: \"root\",\r\n                        expanded: true,\r\n                        editable: true,\r\n                        root: true,\r\n                        id: uuid(),\r\n                    },\r\n                ], operation: \"create\"\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n    closeModal = () => {\r\n        // const updateInfo = {\r\n        //     typeName: DEFAULT_RETURN,\r\n        //     data: {\r\n        //         openModal: false, selectedRecord: {}\r\n        //     }\r\n        // }\r\n        // this.props.updateStore(updateInfo);\r\n        let loadEsign = this.props.Login.loadEsign;\r\n        let openModal = this.props.Login.openModal;\r\n        let selectedId = this.props.Login.selectedId;\r\n        let selectedRecord = this.state.selectedRecord; //this.props.Login.selectedRecord;\r\n        if (this.props.Login.loadEsign) {\r\n            if (this.props.Login.operation === \"delete\" || this.props.Login.operation === \"Approve\" || this.props.Login.operation === \"copy\") {\r\n                loadEsign = false;\r\n                openModal = false;\r\n                selectedRecord = {};\r\n                selectedId = null;\r\n            }\r\n            else {\r\n                loadEsign = false;\r\n\r\n            }\r\n        }\r\n        else {\r\n            openModal = false;\r\n            selectedId = null;\r\n            selectedRecord = {};\r\n        }\r\n\r\n        // const updateInfo = {\r\n        //     typeName: DEFAULT_RETURN,\r\n        //     data: { openModal, loadEsign, selectedRecord, selectedId }\r\n        // }\r\n        // this.props.updateStore(updateInfo);\r\n        // this.getsamplestoragetransaction({}, this.props.Login.userInfo);\r\n        // if (!this.state.isFilterPopup) {\r\n        //     this.getDynamicFilterExecuteData()\r\n\r\n        // }\r\n        this.onFilterSubmit();\r\n        this.setState({\r\n            selectedRecord,\r\n            openModal: false, isInitialRender: true\r\n            , isFilterPopup: false, isRetrieveOrDispose: false\r\n        })\r\n    }\r\n    onInputChange = (event) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if (event.target.type === \"checkbox\") {\r\n            selectedRecord[event.target.name] = event.target.checked;\r\n        } else {\r\n            selectedRecord[event.target.name] = event.target.value;\r\n        }\r\n\r\n        this.setState({ selectedRecord });\r\n    };\r\n\r\n    onSaveClick = (saveType, formRef) => {\r\n        if (this.props.Login.loadTreeProperties === true) {\r\n            this.onSaveProperties(saveType, formRef);\r\n        } else if (this.state.openSpreadSheet) {\r\n            this.CRUDSampleStorageTransaction({\r\n                ...this.state.editedsheetData,\r\n                nsamplestoragemappingcode: this.state.isMultiSampleAdd ?\r\n                    Object.keys(this.state.sheetData).map(nsamplestoragemappingcode => nsamplestoragemappingcode).join(\",\")\r\n                    : this.state.editedsheetData.nsamplestoragemappingcode.toString(),\r\n                nsamplestoragelocationcode: this.state.editedsheetData.nsamplestoragelocationcode,\r\n                sheetData: JSON.stringify(this.state.sheetData ? this.state.sheetData : {}),\r\n                sheetUpdate: true,\r\n                userinfo: this.props.Login.userInfo,\r\n                isMultiSampleAdd: this.state.isMultiSampleAdd\r\n            }, 'create');\r\n        } else {\r\n            this.onSaveSampleStorageTransaction(saveType, formRef);\r\n        }\r\n    };\r\n\r\n\r\n    paneSizeChange = (d) => {\r\n        this.setState({\r\n            splitChangeWidthPercentage: d\r\n        })\r\n    }\r\n    handlePageChange = e => {\r\n        this.setState({\r\n            skip: e.skip,\r\n            take: e.take\r\n        });\r\n    };\r\n    handleDetailPageChange = e => {\r\n        this.setState({\r\n            skip: e.skip,\r\n            take: e.take\r\n        });\r\n    };\r\n    componentDidMount() {\r\n        if (this.parentHeight) {\r\n            const height = this.parentHeight.clientHeight;\r\n            this.setState({\r\n                firstPane: height - 80,\r\n                parentHeight: height - 50\r\n            });\r\n        }\r\n    }\r\n    generateBreadCrumData(obj) {\r\n        const breadCrumbData = [];\r\n        if (this.state.masterData && this.state.masterData.filterStorageCategory) {\r\n\r\n            breadCrumbData.push(\r\n                {\r\n                    \"label\": \"IDS_STORAGECATEGORY\",\r\n                    \"value\": obj.selectedStorageCategoryName &&\r\n                        obj.selectedStorageCategoryName !== null ?\r\n                        obj.selectedStorageCategoryName : \"NA\"\r\n\r\n                }\r\n                // ,\r\n                // {\r\n                //     \"label\": \"IDS_STORAGECATEGORYLOCATION\",\r\n                //     \"value\": obj.selectedSampleStorageLocation &&\r\n                //         obj.selectedSampleStorageLocation.ssamplestoragelocationname !== null ?\r\n                //         obj.selectedSampleStorageLocation.ssamplestoragelocationname : \"NA\"\r\n                // },\r\n                // {\r\n                //     \"label\": \"IDS_STORAGECATEGORYVERSION\",\r\n                //     \"value\": obj.selectedSampleStorageVersion &&\r\n                //         obj.selectedSampleStorageVersion.nversionno !== null ?\r\n                //         obj.selectedSampleStorageVersion.nversionno : \"NA\"\r\n                // }\r\n            );\r\n        }\r\n        return breadCrumbData;\r\n    }\r\n\r\n    openFilter = () => {\r\n        // let showFilter = !this.props.Login.showFilter\r\n        // const updateInfo = {\r\n        //     typeName: DEFAULT_RETURN,\r\n        //     data: { showFilter }\r\n        // }\r\n        // this.props.updateStore(updateInfo);\r\n\r\n        let boolean = !this.state.showFilter\r\n        this.setState({ showFilter: boolean })\r\n    }\r\n\r\n    closeFilter = () => {\r\n\r\n        // const updateInfo = {\r\n        //     typeName: DEFAULT_RETURN,\r\n        //     data: { showFilter: false }\r\n        // }\r\n        // this.props.updateStore(updateInfo);\r\n        this.setState({ showFilter: false })\r\n    }\r\n    reloadData = () => {\r\n        this.onFilterSubmit();\r\n    }\r\n    onEditSampleStorageLocation = (selectedSampleStorageVersion, userInfo, editId) => {\r\n        this.handleSearch();\r\n        this.setState({ searchedTreeData: undefined })\r\n        if (this.searchRef.current) {\r\n            this.searchRef.current.value = \"\";\r\n        }\r\n\r\n        let isOnlyDraft = false;\r\n        if (this.props.Login.masterData.sampleStorageVersion && this.props.Login.masterData.sampleStorageVersion.length > 1) {\r\n            isOnlyDraft = true;\r\n        }\r\n        this.props.editSampleStorageLocation(selectedSampleStorageVersion, userInfo, isOnlyDraft, editId);\r\n    }\r\n    openStorageMapping = (addId) => {\r\n        this.addSampleStorageMapping({ userInfo: this.props.Login.userInfo, addId });\r\n    }\r\n    deletesamplestoragemapping = (param) => {\r\n        this.CRUDSampleStorageTransaction({\r\n            'nsamplestoragelocationcode': this.state.masterData.selectedSampleStorageLocation.nsamplestoragelocationcode,\r\n            'nsamplestoragemappingcode': param.nsamplestoragemappingcode,\r\n            userinfo: this.props.Login.userInfo\r\n        }, 'delete');\r\n    }\r\n    addMultipleSample = (param) => {\r\n        this.setState({\r\n            //sheetData: JSON.parse(response[0].data.sheetData),\r\n            openModal: true, isMultiSampleAdd: true, openSpreadSheet: true,//, editedsheetData: param, Rows: param.nrow, columns: param.ncolumn,\r\n            loading: false\r\n        })\r\n    }\r\n    opensearch = () => {\r\n        this.setState({\r\n            openModal: true, isFilterPopup: true, selectedRecord: { ...this.state.submittedselectedRecord } ||\r\n                { ...this.state.selectedRecord }\r\n        })\r\n    }\r\n    openRetrieveDispose = () => {\r\n        this.setState({\r\n            openModal: true, isRetrieveOrDispose: true,\r\n            dynamicfields: [],\r\n            selectedBarcodeValue: {}\r\n        })\r\n    }\r\n\r\n    addSample = (param, nflag) => {\r\n        this.setState({ loading: true })\r\n        let urlArray = [];\r\n        const url1 = rsapi.post(\"samplestorageretrieval/getsamplestoragemappingSheetData\",\r\n            {\r\n                isMultiSampleAdd: (nflag === 2) ? true : false,\r\n                nsamplestoragemappingcode:\r\n                    (nflag === 2) ? this.state.masterData.samplestorageretrieval.map(item => item.nsamplestoragemappingcode).join(\",\")\r\n                        : param.nsamplestoragemappingcode.toString()\r\n            });\r\n        urlArray = [url1];\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                if (nflag === 2) {\r\n                    this.setState({\r\n                        sheetData: JSON.parse(response[0].data.sheetData),\r\n                        openModal: true, isMultiSampleAdd: true, openSpreadSheet: true,//, editedsheetData: param, Rows: param.nrow, columns: param.ncolumn,\r\n                        loading: false\r\n                    })\r\n                } else {\r\n                    this.setState({\r\n                        sheetData: JSON.parse(response[0].data.sheetData),\r\n                        openModal: true, isMultiSampleAdd: false, openSpreadSheet: true,\r\n                        editedsheetData: param, Rows: param.nrow, columns: param.ncolumn,\r\n                        loading: false\r\n                    })\r\n                }\r\n            }).catch(error => {\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n                this.setState({\r\n                    loading: false\r\n                });\r\n            });\r\n\r\n\r\n    }\r\n    onComboChange = (comboData, fieldName) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        const selectedProjectType = this.state.selectedProjectType || {};\r\n        let selectedRecordFilter = this.state.selectedRecordFilter || {};\r\n\r\n        if (fieldName === 'nstoragecategorycode') {\r\n            return this.getSampleStorageLocation({\r\n                userinfo: this.props.Login.userInfo,\r\n                nstoragecategorycode: comboData.value\r\n            }, fieldName, comboData);\r\n        } else if (fieldName === 'ncontainertypecode') {\r\n            return this.getContainerStructure({\r\n                userinfo: this.props.Login.userInfo,\r\n                ncontainertypecode: comboData.value\r\n            }, fieldName, comboData);\r\n\r\n        }\r\n        else if (fieldName === 'nprojecttypecode') {\r\n            ///return this.getprojectbarcodeconfig(comboData);\r\n            selectedProjectType[fieldName] = comboData;\r\n            selectedRecord[fieldName] = comboData;\r\n            this.setState({ selectedProjectType, selectedRecord });\r\n        }\r\n        else if (fieldName === 'ncontainerstructurecode') {\r\n            selectedRecord['nrow'] = comboData.item.nrow ? comboData.item.nrow : 1;\r\n            selectedRecord['ncolumn'] = comboData.item.ncolumn ? comboData.item.ncolumn : 1;\r\n        } else if (fieldName === 'nsamplestoragelocationcode') {\r\n            return this.getSampleStorageLocation({\r\n                userinfo: this.props.Login.userInfo,\r\n                nstoragecategorycode: this.state.selectedRecordFilter['nstoragecategorycode'].value,\r\n                nsamplestoragelocationcode: comboData.value\r\n\r\n            }, fieldName, comboData);\r\n        }\r\n        if (fieldName === 'nsamplestorageversioncode') {\r\n            selectedRecordFilter[fieldName] = comboData;\r\n            this.setState({ selectedRecordFilter });\r\n\r\n        } else {\r\n            selectedRecord[fieldName] = comboData;\r\n            this.setState({ selectedRecord, selectedRecordFilter });\r\n        }\r\n\r\n\r\n    }\r\n\r\n    onSaveSampleStorageTransaction = (saveType) => {\r\n        let selectedRecord = this.state.selectedRecord;\r\n        let containerpathCodeArray = [];\r\n        if (this.state.operation === 'create') {\r\n            containerpathCodeArray = selectedRecord['nsamplestoragecontainerpathcode'].map(item => item.value);\r\n        }\r\n        const inputParam =\r\n        {\r\n            nsamplestoragetransactioncode: selectedRecord['nsamplestoragetransactioncode'] ?\r\n                parseInt(selectedRecord['nsamplestoragetransactioncode']) : 0,\r\n            nsamplestoragelocationcode: this.state.masterData.selectedSampleStorageLocation.nsamplestoragelocationcode,\r\n            nsamplestoragemappingcode: selectedRecord['nsamplestoragemappingcode'] ?\r\n                parseInt(selectedRecord['nsamplestoragemappingcode']) : 0,\r\n            ncontainertypecode: -1,\r\n            nproductcode: selectedRecord['nproductcode'].value,\r\n            ndirectionmastercode: -1,\r\n            ssamplestoragemappingname: \"-\",\r\n            nsamplestoragecontainerpathcode: this.state.operation === 'create' ?\r\n                JSON.stringify(containerpathCodeArray) : parseInt(selectedRecord['nsamplestoragecontainerpathcode'].value),\r\n            containerpathsize: containerpathCodeArray.length,\r\n            nneedposition: 4,\r\n            ncontainerstructurecode: -1, nquantity: selectedRecord['nquantity'] ?\r\n                parseInt(selectedRecord['nquantity']) : 1,\r\n            userinfo: this.props.Login.userInfo\r\n        }\r\n        const masterData = this.props.Login.masterData;\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolcode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData }, saveType\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.CRUDSampleStorageTransaction(inputParam, this.state.operation);\r\n        }\r\n    }\r\n    getsamplestoragetransaction = (inputParam, userinfo) => {\r\n        this.setState({ loading: true })\r\n        let urlArray = [];\r\n        const url1 = rsapi.post(\"samplestorageretrieval/getsamplestoragetransaction\", {\r\n            userinfo: this.props.Login.userInfo\r\n        });\r\n        urlArray = [url1];\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                this.setState({\r\n                    masterData: {\r\n                        ...this.state.masterData, ...response[0].data\r\n                    },\r\n                    loading: false\r\n                });\r\n\r\n            }).catch(error => {\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n                this.setState({\r\n                    loading: false\r\n                });\r\n            });\r\n\r\n    }\r\n\r\n    childDataChange = (selectedRecord) => {\r\n        this.setState({\r\n            selectedRecord: {\r\n                ...selectedRecord\r\n            },\r\n            isInitialRender: false\r\n        });\r\n    }\r\n    childSheetDataChange = (sheetData) => {\r\n\r\n        this.setState({\r\n            // selectedRecord: {\r\n            //     ...this.state.selectedRecord,\r\n            //     sheetData: {\r\n            //         ...this.state.selectedRecord.sheetData,\r\n            //         ...sheetData\r\n            //     }\r\n            // },\r\n            sheetData: {\r\n                ...sheetData\r\n            },\r\n            isInitialRender: false\r\n        });\r\n    }\r\n    // Actions start\r\n    getActiveSampleStorageMappingById = (inputParam, userinfo) => {\r\n        this.setState({ loading: true })\r\n        let urlArray = [];\r\n        const url1 = rsapi.post(\"samplestorageretrieval/getActiveSampleStorageMappingById\", {\r\n            nsamplestoragelocationcode: inputParam['selectedSampleStorageLocation'][0].nsamplestoragelocationcode,\r\n            userinfo: userinfo\r\n        });\r\n        urlArray = [url1];\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                this.setState({\r\n                    masterData: {\r\n                        ...this.state.masterData, ...response[0].data\r\n                    }//,\r\n                    // selectedRecord: {\r\n                    //     ...this.state.selectedRecord\r\n                    //    // , sheetData: JSON.parse(response[0].data.selectedSampleStoragemapping.jsondata.value)\r\n                    // }\r\n                    ,\r\n                    loading: false\r\n                });\r\n\r\n            }).catch(error => {\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n                this.setState({\r\n                    loading: false\r\n                });\r\n            });\r\n\r\n    }\r\n    filterColumnData = (filterValue, filterParam) => {\r\n        let masterData = filterParam.masterData;\r\n        let primaryKeyValue = 0;\r\n        let searchedData = undefined;\r\n        if (filterValue === \"\") {\r\n            if (masterData[filterParam.inputListName] && masterData[filterParam.inputListName].length > 0) {\r\n                primaryKeyValue = masterData[filterParam.inputListName][0][filterParam.primaryKeyField];\r\n            }\r\n        }\r\n        else {\r\n            if (filterParam.isjsondata) {\r\n                searchedData = searchJsonData(filterValue, masterData[filterParam.inputListName], filterParam.searchFieldList || []);\r\n            }\r\n            else {\r\n                searchedData = searchData(filterValue, masterData[filterParam.inputListName], filterParam.searchFieldList || []);\r\n\r\n            }\r\n            if (searchedData.length > 0) {\r\n                primaryKeyValue = searchedData[0][filterParam.primaryKeyField];\r\n            }\r\n        }\r\n\r\n        if (primaryKeyValue !== 0) {\r\n            this.setState({ loading: true });\r\n            return rsapi.post(filterParam.fetchUrl, { ...filterParam.fecthInputObject, [filterParam.primaryKeyField]: primaryKeyValue })\r\n                .then(response => {\r\n                    masterData[\"searchedData\"] = searchedData;\r\n                    masterData = { ...masterData, ...response.data };\r\n\r\n                    if (filterParam.sortField) {\r\n                        sortData(masterData, filterParam.sortOrder, filterParam.sortField);\r\n                    }\r\n                    else {\r\n                        sortData(masterData);\r\n                    }\r\n                    this.setState({ masterData, loading: false, skip: 0, take: 10, selectedId: null });\r\n                })\r\n                .catch(error => {\r\n                    this.setState({ loading: false });\r\n                    if (error.response.status === 500) {\r\n                        toast.error(this.props.intl.formatMessage({ id: error.message }));\r\n                    }\r\n                    else {\r\n                        toast.warn(this.props.intl.formatMessage({ id: error.response.data }));\r\n                    }\r\n                })\r\n        }\r\n        else {\r\n            masterData[filterParam.selectedObject] = undefined;\r\n            masterData[\"searchedData\"] = [];\r\n            Object.keys(masterData).forEach(item => {\r\n                if (item !== filterParam.inputListName && item !== filterParam.selectedObject\r\n                    && filterParam.unchangeList && filterParam.unchangeList.indexOf(item) === -1)\r\n                    masterData[item] = [];\r\n            })\r\n            this.setState({\r\n                masterData, operation: null, modalName: undefined,\r\n                loading: false\r\n            });\r\n\r\n        }\r\n    }\r\n\r\n\r\n    CRUDSampleStorageTransaction = (inputParam, operation) => {\r\n        if (this.state.selectedRecord && this.state.selectedRecord.spositionvalue !== \"\"\r\n            && this.state.selectedRecord.spositionvalue !== undefined) {\r\n            this.setState({ loading: true })\r\n            let urlArray = [];\r\n            const url1 = rsapi.post(\"samplestorageretrieval/\" + operation + \"samplestorageretrieval\", inputParam);\r\n            urlArray = [url1];\r\n            Axios.all(urlArray)\r\n                .then(response => {\r\n                    this.setState({\r\n                        isInitialRender: true,\r\n                        selectedRecord: {},\r\n                        masterData: {\r\n                            ...this.state.masterData, ...response[0].data\r\n                        },\r\n                        selectedBarcodeValue: {},\r\n                        dynamicfields: [],\r\n                        //openModal: false,\r\n                        loading: false\r\n                    });\r\n\r\n                }).catch(error => {\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    } else {\r\n                        toast.info(error.response.data);\r\n                    }\r\n                    this.setState({\r\n                        loading: false\r\n                    });\r\n                });\r\n        } else {\r\n            toast.info(this.props.intl.formatMessage({\r\n                id: \"IDS_ENTERSAMPLEID\",\r\n            }));\r\n        }\r\n    }\r\n\r\n    getSampleStorageLocation(inputData, fieldName, comboData) {\r\n        let selectedRecordFilter = this.state.selectedRecordFilter || {};\r\n        let inputParamData = {}\r\n        this.setState({ loading: true })\r\n        if (fieldName === 'nsamplestoragelocationcode') {\r\n            inputParamData = {\r\n                nstoragecategorycode: selectedRecordFilter['nstoragecategorycode'].value,\r\n                nsamplestoragelocationcode: comboData.value,\r\n                userinfo: inputData.userinfo\r\n            }\r\n        } else {\r\n            inputParamData = {\r\n                nstoragecategorycode: comboData.value,\r\n                userinfo: inputData.userinfo\r\n            }\r\n        }\r\n        let urlArray = [];\r\n        const url1 = rsapi.post(\"samplestorageretrieval/getsamplestoragemapping\", inputParamData);\r\n\r\n        urlArray = [url1];\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                let { storageLocationOptions,\r\n                    sampleStorageVersionOptions } = this.state\r\n\r\n                let sampleStorageLocationList = constructOptionList(response[0].data.sampleStorageLocation || [], \"nsamplestoragelocationcode\",\r\n                    \"ssamplestoragelocationname\", undefined, undefined, undefined);\r\n                storageLocationOptions = sampleStorageLocationList.get(\"OptionList\");\r\n                let sampleStorageVersionList = constructOptionList(response[0].data.sampleStorageVersion || [], \"nsamplestorageversioncode\",\r\n                    \"nversionno\", undefined, undefined, undefined);\r\n                sampleStorageVersionOptions = sampleStorageVersionList.get(\"OptionList\");\r\n                selectedRecordFilter = {\r\n                    ...selectedRecordFilter,\r\n                    nsamplestoragelocationcode: storageLocationOptions.length > 0 ?\r\n                        storageLocationOptions[0] : [],\r\n                    nsamplestorageversioncode: sampleStorageVersionOptions.length > 0 ?\r\n                        sampleStorageVersionOptions[0] : [],\r\n\r\n                }\r\n                this.setState({\r\n                    storageLocationOptions, sampleStorageVersionOptions,\r\n                    selectedRecordFilter: {\r\n                        ...selectedRecordFilter,\r\n                        [fieldName]: comboData\r\n                    },\r\n                    loading: false\r\n                });\r\n            }).catch(error => {\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n                this.setState({\r\n                    loading: false\r\n                });\r\n            });\r\n    }\r\n\r\n    onFilterSubmit = () => {\r\n        this.getprojectbarcodeconfig(true);\r\n        // this.setState({ loading: true })\r\n        // let inputParamData = {\r\n        //     nstoragecategorycode: this.state.selectedRecordFilter[\"nstoragecategorycode\"].value,\r\n        //     // nsamplestoragelocationcode: this.state.selectedRecordFilter[\"nsamplestoragelocationcode\"].value,\r\n        //     // nsamplestorageversioncode: this.state.selectedRecordFilter[\"nsamplestorageversioncode\"].value,\r\n        //     userinfo: this.props.Login.userInfo,\r\n        // }\r\n        // let urlArray = [];\r\n        // const url1 = rsapi.post(\"samplestorageretrieval/getsamplestoragemapping\", inputParamData);\r\n        // urlArray = [url1];\r\n        // Axios.all(urlArray)\r\n        //     .then(response => {\r\n        //         let object = {\r\n        //             selectedStorageCategoryName: this.state.selectedRecordFilter[\"nstoragecategorycode\"].item.sstoragecategoryname,\r\n        //             // ssamplestoragelocationname: this.state.selectedRecordFilter[\"nsamplestoragelocationcode\"].item.ssamplestoragelocationname,\r\n        //             // selectedSampleStorageVersion: this.state.selectedRecordFilter[\"nsamplestorageversioncode\"].item.nversionno,\r\n        //         }\r\n        //         let filterData = this.generateBreadCrumData(object);\r\n\r\n        //         this.setState({\r\n        //             filterData,\r\n        //             masterData: {\r\n        //                 ...this.state.masterData,\r\n        //                 ...response[0].data,\r\n        //                 //   samplestorageretrieval: response[0].data['samplestorageretrieval'],\r\n        //             },\r\n        //             loading: false\r\n        //         });\r\n        //     }).catch(error => {\r\n        //         if (error.response.status === 500) {\r\n        //             toast.error(error.message);\r\n        //         } else {\r\n        //             toast.warn(error.response.data);\r\n        //         }\r\n        //         this.setState({\r\n        //             loading: false\r\n        //         });\r\n        //     });\r\n    }\r\n    addSampleStorageMapping() {\r\n        this.setState({ loading: true })\r\n        let selectedRecord = this.state.selectedRecord\r\n        let inputParamData = {\r\n            // nstoragecategorycode: this.state.selectedRecordFilter[\"nstoragecategorycode\"].value,\r\n            nsamplestoragelocationcode: this.state.masterData.selectedSampleStorageLocation.nsamplestoragelocationcode,\r\n            // nsamplestorageversioncode: this.state.selectedRecordFilter[\"nsamplestorageversioncode\"].value,\r\n            userinfo: this.props.Login.userInfo,\r\n        }\r\n\r\n        let urlArray = [];\r\n        const url1 = rsapi.post(\"samplestorageretrieval/addSampleStorageMapping\", inputParamData);\r\n\r\n        const url2 = rsapi.post(\"product/getProduct\",\r\n            { 'userinfo': this.props.Login.userInfo });\r\n\r\n        const url3 = rsapi.post(\"containertype/getContainerType\",\r\n            { 'userinfo': this.props.Login.userInfo });\r\n\r\n        urlArray = [url1, url2];\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                const storageMappingMap = constructOptionList(response[0].data['samplestoragecontainerpath'] || [],\r\n                    \"nsamplestoragecontainerpathcode\",\r\n                    \"scontainerpath\", undefined, undefined, true);\r\n                const storageMappingMapList = storageMappingMap.get(\"OptionList\");\r\n                let containerStructure = response[0].data['containerStructure'];\r\n\r\n                const containerTypeMap = constructOptionList(response[0].data['containerType'] || [],\r\n                    \"ncontainertypecode\",\r\n                    \"scontainertype\", undefined, undefined, true);\r\n                const containerTypeList = containerTypeMap.get(\"OptionList\");\r\n\r\n\r\n                const directionmasterMap = constructOptionList(response[0].data['directionmaster'] || [],\r\n                    \"ndirectionmastercode\",\r\n                    \"sdirection\", undefined, undefined, true);\r\n                const directionmasterList = directionmasterMap.get(\"OptionList\");\r\n\r\n                const containerstructureMap = constructOptionList(response[0].data['containerStructure']\r\n                    || [],\r\n                    \"ncontainerstructurecode\",\r\n                    \"scontainerstructurename\", undefined, undefined, true);\r\n                const containerstructureList = containerstructureMap.get(\"OptionList\");\r\n\r\n                const productMap = constructOptionList(response[1].data['Product'] || [],\r\n                    \"nproductcode\",\r\n                    \"sproductname\", undefined, undefined, true);\r\n                const productList = productMap.get(\"OptionList\");\r\n\r\n                this.setState({\r\n                    openModal: true,\r\n                    selectedRecord: {\r\n                        ...selectedRecord,\r\n                        storageMappingMapOptions: storageMappingMapList,\r\n                        productOptions: productList,\r\n                        containerTypeOptions: containerTypeList,\r\n                        directionmasterOptions: directionmasterList,\r\n                        // ncontainertypecode: containerTypeList[0],\r\n                        // containerStructureOptions: containerstructureList,\r\n                        // ncontainerstructurecode: containerstructureList[0],\r\n                        nrow: containerStructure.length > 0 ? containerStructure[0].nrow : 1,\r\n                        ncolumn: containerStructure.length > 0 ? containerStructure[0].ncolumn : 1,\r\n                        isInitialRender: true\r\n\r\n                    },\r\n                    openSpreadSheet: false,\r\n                    operation: 'create',\r\n                    loading: false\r\n                });\r\n            }).catch(error => {\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n                this.setState({\r\n                    loading: false\r\n                });\r\n            });\r\n    }\r\ngetprojectbarcodeconfig(nflag) {\r\n        let inputParamData = {}\r\n        this.setState({ loading: true })\r\n        let obj = convertDateValuetoString(this.state.masterData.fromDate, this.state.masterData.toDate, this.props.Login.userInfo);\r\n        inputParamData = {\r\n            nprojecttypecode: this.state.selectedProjectType.nprojecttypecode.value,\r\n            isFilterSubmit: nflag,\r\n            // fromDate: rearrangeDateFormat(this.props.Login.userInfo, this.state.masterData.fromDate),\r\n            // toDate: rearrangeDateFormat(this.props.Login.userInfo, this.state.masterData.toDate),\r\n            fromDate:  obj.fromDate,\r\n            toDate: obj.toDate,\r\n            userinfo: this.props.Login.userInfo\r\n        }\r\n        let urlArray = [];\r\n        const url1 = rsapi.post(\"samplestorageretrieval/getProjectbarcodeconfig\", inputParamData);\r\n\r\n        urlArray = [url1];\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                let masterData = this.state.masterData.samplestorageretrieval\r\n                this.setState(nflag == false ? {\r\n                    selectedProjectTypeList: sortData(response[0].data.selectedProjectTypeList),\r\n                    // selectedRecord: {\r\n                    //     nprojecttypecode: { label: comboData.label, value: comboData.value }\r\n                    // },\r\n                    loading: false\r\n                } : {\r\n                    selectedProjectTypeList: sortData(response[0].data.selectedProjectTypeList),\r\n                    breadCrumbdata: {\r\n                        breadcrumbprojecttype: {\r\n                            value: this.state.selectedProjectType.nprojecttypecode.label\r\n                        },\r\n                        ...convertDateValuetoString(this.state.masterData.fromDate,\r\n                            this.state.masterData.toDate, this.props.Login.userInfo)\r\n                    },\r\n                    masterData: {\r\n                        ...this.state.masterData,\r\n                        fromDate: rearrangeDateFormat(this.props.Login.userInfo, this.state.masterData.fromDate),\r\n                        toDate: rearrangeDateFormat(this.props.Login.userInfo, this.state.masterData.toDate),\r\n                        samplestorageretrieval: response[0].data.samplestorageretrieval\r\n                    },\r\n                    loading: false\r\n                });\r\n            }).catch(error => {\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n                this.setState({\r\n                    loading: false\r\n                });\r\n            });\r\n    }\r\n\r\n    getContainerStructure(inputData, fieldName, comboData) {\r\n        let inputParamData = {}\r\n        this.setState({ loading: true })\r\n        inputParamData = {\r\n            ncontainertypecode: comboData.value,\r\n            userinfo: inputData.userinfo\r\n        }\r\n        let urlArray = [];\r\n        const url1 = rsapi.post(\"samplestorageretrieval/getContainerStructure\", inputParamData);\r\n\r\n        urlArray = [url1];\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                let { containerStructureOptions, selectedRecord } = this.state\r\n\r\n                let containerStructureList = constructOptionList(response[0].data.containerStructure || [], \"ncontainerstructurecode\",\r\n                    \"scontainerstructurename\", undefined, undefined, undefined);\r\n                containerStructureOptions = containerStructureList.get(\"OptionList\");\r\n                selectedRecord = {\r\n                    ...selectedRecord,\r\n                    nrow: containerStructureOptions.length > 0 ?\r\n                        containerStructureOptions[0].item.nrow : 1,\r\n                    ncolumn: containerStructureOptions.length > 0 ?\r\n                        containerStructureOptions[0].item.ncolumn : 1,\r\n                    ncontainerstructurecode: containerStructureOptions.length > 0 ?\r\n                        containerStructureOptions[0] : [],\r\n                    containerStructureOptions: containerStructureOptions.length > 0 ?\r\n                        [...containerStructureOptions] : [],\r\n                }\r\n\r\n                this.setState({\r\n\r\n                    selectedRecord: {\r\n                        ...selectedRecord,\r\n                        [fieldName]: comboData\r\n                    },\r\n                    loading: false\r\n                });\r\n            }).catch(error => {\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n                this.setState({\r\n                    loading: false\r\n                });\r\n            });\r\n    }\r\n    onSampleMappingSaveClick = () => {\r\n        const mandatoryFields = this.state.openSpreadSheet ? [] : this.state.selectedRecord[\"nneedposition\"] === undefined ||\r\n            this.state.selectedRecord[\"nneedposition\"] === false ? [\r\n            {\r\n                \"idsName\": \"IDS_SAMPLESTORAGEMAPPING\", \"dataField\": \"nsamplestoragecontainerpathcode\",\r\n                \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\"\r\n            },\r\n            {\r\n                \"idsName\": \"IDS_PRODUCT\",\r\n                \"dataField\": \"nproductcode\", \"mandatoryLabel\":\r\n                    \"IDS_SELECT\", \"controlType\": \"selectbox\"\r\n            },\r\n            {\r\n                \"idsName\": \"IDS_AVAILABLESPACE\",\r\n                \"dataField\": \"nquantity\", \"mandatoryLabel\":\r\n                    \"IDS_ENTER\", \"controlType\": \"selectbox\"\r\n            }\r\n        ] : [\r\n            {\r\n                \"idsName\": \"IDS_SAMPLESTORAGEMAPPING\", \"dataField\": \"nsamplestoragecontainerpathcode\",\r\n                \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\"\r\n            },\r\n            {\r\n                \"idsName\": \"IDS_PRODUCT\",\r\n                \"dataField\": \"nproductcode\", \"mandatoryLabel\":\r\n                    \"IDS_SELECT\", \"controlType\": \"selectbox\"\r\n            }\r\n            ,\r\n            {\r\n                \"idsName\": \"IDS_CONTAINERTYPE\",\r\n                \"dataField\": \"ncontainertypecode\", \"mandatoryLabel\":\r\n                    \"IDS_SELECT\", \"controlType\": \"selectbox\"\r\n            },\r\n            {\r\n                \"idsName\": \"IDS_CONTAINERSTRUCTURENAME\",\r\n                \"dataField\": \"ncontainerstructurecode\", \"mandatoryLabel\":\r\n                    \"IDS_SELECT\", \"controlType\": \"selectbox\"\r\n            },\r\n            {\r\n                \"idsName\": \"IDS_DIRECTION\",\r\n                \"dataField\": \"ndirectionmastercode\", \"mandatoryLabel\":\r\n                    \"IDS_ENTER\", \"controlType\": \"selectbox\"\r\n            },\r\n            {\r\n                \"idsName\": \"IDS_AVAILABLESPACE\",\r\n                \"dataField\": \"nquantity\", \"mandatoryLabel\":\r\n                    \"IDS_ENTER\", \"controlType\": \"selectbox\"\r\n            }\r\n        ]\r\n        onSaveMandatoryValidation(this.state.selectedRecord, mandatoryFields,\r\n            this.onSaveClick)\r\n    }\r\n    dataStateChange = (event) => {\r\n        this.setState({\r\n            dataStateChange: event.dataState\r\n        });\r\n    }\r\n\r\n    approveSampleStorageMapping = (event) => {\r\n        let inputParamData = {}\r\n        this.setState({ loading: true })\r\n        inputParamData = {\r\n            nsamplestoragelocationcode: this.state.masterData.selectedSampleStorageLocation.nsamplestoragelocationcode,\r\n            userinfo: this.props.Login.userInfo\r\n        }\r\n        let urlArray = [];\r\n        const url1 = rsapi.post(\"samplestorageretrieval/approveSampleStorageMapping\", inputParamData);\r\n\r\n        urlArray = [url1];\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                this.setState({\r\n                    masterData: {\r\n                        ...this.state.masterData,\r\n                        ...response[0].data\r\n                    },\r\n                    loading: false\r\n                });\r\n            }).catch(error => {\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n                this.setState({\r\n                    loading: false\r\n                });\r\n            });\r\n    }\r\n    getSelectedBarcodeData(e, inputParam) {\r\n        if (e.keyCode === 13) {\r\n            this.setState({ loading: true })\r\n            let selectedRecord = this.state.selectedRecord || {};\r\n            let urlArray = [];\r\n            const url1 = rsapi.post(\"/samplestorageretrieval/getSelectedBarcodeData\", {\r\n                // nprojecttypecode: this.state.selectedBarcodeValue.nprojecttypecode,\r\n                spositionvalue: inputParam.spositionvalue,\r\n                userinfo: this.props.Login.userInfo\r\n            });\r\n            urlArray = [url1];\r\n            Axios.all(urlArray)\r\n                .then(response => {\r\n                    let dynamicfields = [];\r\n                    dynamicfields = [{ \"idsName\": \"IDS_SAMPLEID\", \"dataField\": \"spositionvalue\", \"width\": \"200px\", \"staticField\": true },\r\n                    { \"idsName\": \"IDS_POSITION\", \"dataField\": \"sposition\", \"width\": \"200px\", \"staticField\": true },\r\n                    { \"idsName\": \"IDS_QUANTITY\", \"dataField\": \"nquantity\", \"width\": \"200px\", \"staticField\": true },\r\n                    { \"idsName\": \"IDS_UNIT\", \"dataField\": \"sunitname\", \"width\": \"200px\", \"staticField\": true }];\r\n                    const temparray2 = response[0].data['selectedProjectTypeList'] && response[0].data['selectedProjectTypeList'].map((option) => {\r\n                        return { \"idsName\": option.sfieldname, \"dataField\": option.sfieldname, \"width\": \"200px\" };\r\n                    });\r\n                    dynamicfields = [...dynamicfields, ...temparray2]\r\n                    this.setState({\r\n                        dynamicfields,\r\n                        selectedBarcodeValue: { ...response[0].data['selectedBarcodeValue'] },\r\n                        loading: false\r\n                    })\r\n                })\r\n                .catch(error => {\r\n                    this.setState({\r\n                        loading: false\r\n                    });\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    }\r\n                    else {\r\n                        this.setState({\r\n                            dynamicfields: [],\r\n                            selectedBarcodeValue: {}\r\n                        })\r\n                        toast.info(error.response.data);\r\n                    }\r\n\r\n                })\r\n        }\r\n    }\r\n    getDynamicFilterExecuteData(nflag) {\r\n        let selectedRecord = this.state.selectedRecord || {};\r\n        if (nflag === 2 ? true : (selectedRecord.filterquery && selectedRecord.filterquery !== \"\")) {\r\n            this.setState({ loading: true })\r\n            let obj = {// ...inputParam.component, \r\n                label: 'samplestorageretrieval', valuemember: 'nsamplestorageretrievalcode',\r\n                filterquery: nflag === 2 ?\r\n                    this.state.submittedselectedRecord.filterquery\r\n                    :\r\n                    selectedRecord.filterquery,\r\n                fromDate: rearrangeDateFormat(this.props.Login.userInfo, this.state.masterData.fromDate),\r\n                toDate: rearrangeDateFormat(this.props.Login.userInfo, this.state.masterData.toDate),\r\n                nprojecttypecode: this.state.selectedProjectType.nprojecttypecode.value\r\n                , source: 'view_sampleretrieval_' + this.state.selectedProjectType.nprojecttypecode.value, userinfo: this.props.Login.userInfo\r\n            }\r\n            let urlArray = [];\r\n            const url1 = rsapi.post(\"/samplestorageretrieval/getdynamicfilterexecutedata\", obj);\r\n            urlArray = [url1];\r\n            Axios.all(urlArray)\r\n                .then(response => {\r\n                    let masterData = this.state.masterData\r\n                    masterData = { ...masterData, ...response[0].data }\r\n                    this.setState({\r\n                        masterData: { ...masterData },\r\n                        loading: false,\r\n                        openModal: false,\r\n                        isFilterPopup: false,\r\n                        submittedselectedRecord: nflag === 2 ?\r\n                            { ...this.state.submittedselectedRecord }\r\n                            :\r\n                            { ...selectedRecord }\r\n                        ,\r\n                        selectedRecord: {},\r\n                        displayQuery: this.state.tree ? QbUtils.queryString(this.state.tree, this.state.config, true) : \"\"\r\n                    })\r\n                })\r\n                .catch(error => {\r\n                    this.setState({\r\n                        loading: false\r\n                    });\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    }\r\n                    else {\r\n                        toast.info(error.response.data.rtn);\r\n                    }\r\n\r\n                })\r\n        } else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTAFILTER\" }));\r\n\r\n        }\r\n    }\r\n    // getDynamicFilterExecuteData(nflag) {\r\n    //     this.setState({ loading: true })\r\n    //     let selectedRecord = this.state.selectedRecord || {};\r\n    //     let obj = {// ...inputParam.component, \r\n    //         label: 'samplestorageretrieval', valuemember: 'nsamplestoragetransactioncode',\r\n    //         filterquery:   \r\n    //         selectedRecord.filterquery, source: 'view_sampleretrieval', userinfo: this.props.Login.userInfo\r\n    //     }\r\n    //     let urlArray = [];\r\n    //     const url1 = rsapi.post(\"/samplestorageretrieval/getdynamicfilterexecutedata\", obj);\r\n    //     urlArray = [url1];\r\n    //     Axios.all(urlArray)\r\n    //         .then(response => {\r\n    //             console.log(response)\r\n    //             let masterData = this.state.masterData\r\n    //             masterData = { ...masterData, ...response[0].data }\r\n    //             this.setState({\r\n    //                 masterData: { ...masterData },\r\n    //                 loading: false,\r\n    //                 openModal: false,\r\n    //                 submittedselectedRecord: nflag === 2 ?\r\n    //                     { ...this.state.submittedselectedRecord }\r\n    //                     :\r\n    //                     { ...selectedRecord }\r\n    //                 ,\r\n    //                 isFilterPopup: false,\r\n    //                 selectedRecord: {}\r\n    //             })\r\n    //         })\r\n    //         .catch(error => {\r\n    //             this.setState({\r\n    //                 loading: false\r\n    //             });\r\n    //             if (error.response.status === 500) {\r\n    //                 toast.error(error.message);\r\n    //             }\r\n    //             else {\r\n    //                 toast.info(error.response.data.rtn);\r\n    //             }\r\n\r\n    //         })\r\n    // }\r\n\r\n    fetchRecord = (data) => {\r\n        this.setState({ loading: true })\r\n        let selectedRecord = this.state.selectedRecord\r\n        let inputParamData = {\r\n            nsamplestoragelocationcode: this.state.masterData.selectedSampleStorageLocation.nsamplestoragelocationcode,\r\n            userinfo: this.props.Login.userInfo,\r\n        }\r\n        let urlArray = [];\r\n        const url1 = rsapi.post(\"samplestorageretrieval/addSampleStorageMapping\", inputParamData);\r\n\r\n        const url2 = rsapi.post(\"product/getProduct\",\r\n            { 'userinfo': this.props.Login.userInfo });\r\n\r\n        const url3 = rsapi.post(\"samplestorageretrieval/getEditSampleStorageMapping\",\r\n            { 'nsamplestoragemappingcode': data.nsamplestoragemappingcode, 'userinfo': this.props.Login.userInfo });\r\n\r\n        urlArray = [url1, url2, url3];\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                const storageMappingMap = constructOptionList(response[0].data['samplestoragecontainerpath'] || [],\r\n                    \"nsamplestoragecontainerpathcode\",\r\n                    \"scontainerpath\", undefined, undefined, true);\r\n                const storageMappingMapList = storageMappingMap.get(\"OptionList\");\r\n                let containerStructure = response[0].data['containerStructure'];\r\n\r\n                const containerTypeMap = constructOptionList(response[0].data['containerType'] || [],\r\n                    \"ncontainertypecode\",\r\n                    \"scontainertype\", undefined, undefined, true);\r\n                const containerTypeList = containerTypeMap.get(\"OptionList\");\r\n\r\n                const directionmasterMap = constructOptionList(response[0].data['directionmaster'] || [],\r\n                    \"ndirectionmastercode\",\r\n                    \"sdirection\", undefined, undefined, true);\r\n                const directionmasterList = directionmasterMap.get(\"OptionList\");\r\n\r\n\r\n                const containerstructureMap = constructOptionList(response[2].data['containerStructure']\r\n                    || [],\r\n                    \"ncontainerstructurecode\",\r\n                    \"scontainerstructurename\", undefined, undefined, true);\r\n                const containerstructureList = containerstructureMap.get(\"OptionList\");\r\n\r\n                const productMap = constructOptionList(response[1].data['Product'] || [],\r\n                    \"nproductcode\",\r\n                    \"sproductname\", undefined, undefined, true);\r\n                const productList = productMap.get(\"OptionList\");\r\n\r\n                const editedObject = response[2].data.editsampleStorageMapping;\r\n\r\n                storageMappingMapList.unshift({ label: editedObject.scontainerpath, value: editedObject.nsamplestoragecontainerpathcode })\r\n                selectedRecord = {\r\n                    ndirectionmastercode: { label: editedObject.sdirection, value: editedObject.ndirectionmastercode },\r\n                    nsamplestoragecontainerpathcode: { label: editedObject.scontainerpath, value: editedObject.nsamplestoragecontainerpathcode },\r\n                    nproductcode: { label: editedObject.sproductname, value: editedObject.nproductcode },\r\n                    ncontainertypecode: { label: editedObject.scontainertype, value: editedObject.ncontainertypecode },\r\n                    ncontainerstructurecode: { label: editedObject.scontainerstructurename, value: editedObject.ncontainerstructurecode },\r\n                    nneedposition: editedObject.nneedposition === 3 ? true : false,\r\n                    directionmasterOptions: directionmasterList,\r\n                    nquantity: editedObject.nquantity,\r\n                    nrow: editedObject.nrow,\r\n                    ncolumn: editedObject.ncolumn,\r\n                    nsamplestoragemappingcode: editedObject.nsamplestoragemappingcode\r\n                }\r\n                this.setState({\r\n                    openSpreadSheet: false,\r\n                    openModal: true,\r\n                    selectedRecord: {\r\n                        ...selectedRecord,\r\n                        storageMappingMapOptions: storageMappingMapList,\r\n                        productOptions: productList,\r\n                        containerTypeOptions: containerTypeList,\r\n                        containerStructureOptions: containerstructureList,\r\n                        isInitialRender: true\r\n                    },\r\n                    operation: 'update',\r\n                    loading: false\r\n                });\r\n            }).catch(error => {\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n                this.setState({\r\n                    loading: false\r\n                });\r\n            });\r\n    }\r\n    // Actions End\r\n    retrievalType = () => {\r\n        let retrievalType = this.state.retrievalType;\r\n        if (retrievalType === 1) {\r\n            retrievalType = 2;\r\n        } else {\r\n            retrievalType = 1;\r\n        }\r\n        this.setState({ retrievalType: retrievalType })\r\n    }\r\n    onInputOnChange = (event) => {\r\n\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if (event.target.type === 'checkbox') {\r\n            if (event.target.name === \"agree\") {\r\n                selectedRecord[event.target.name] = event.target.checked === true ? 3 : 4;\r\n            }\r\n        }\r\n        else if (event.target.type === 'select-one') {\r\n\r\n            selectedRecord[event.target.name] = event.target.value;\r\n\r\n        }\r\n        else {\r\n            selectedRecord[event.target.name] = event.target.value;\r\n        }\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    shouldComponentUpdate(nextProps, nextState) {\r\n        if (this.state.openModal && nextState.isInitialRender === false &&\r\n            (nextState.selectedRecord !== this.state.selectedRecord)) {\r\n            return false;\r\n        } else if (this.state.openModal && nextState.isInitialRender === false &&\r\n            (nextState.sheetData !== this.state.sheetData)) {\r\n            return false;\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n    handlePageChangeFilter = (event) => {\r\n        this.setState({ kendoSkip: event.skip, kendoTake: event.take });\r\n    };\r\n    onChange = (immutableTree, config) => {\r\n        let selectedRecord = this.state.selectedRecord || {};\r\n        selectedRecord[\"tree\"] = immutableTree;\r\n        selectedRecord[\"config\"] = config;\r\n        selectedRecord['filterquery'] = QbUtils.sqlFormat(immutableTree, config);\r\n        this.setState({ tree: immutableTree, config: config, selectedRecord: selectedRecord });\r\n\r\n    };\r\n    // cellRender(tdElement, cellProps) {\r\n\r\n    //     if (cellProps.rowType === \"groupFooter\") {\r\n    //         console.log('cellProps.field', cellProps)\r\n    //         if (cellProps.dataItem.field === \"ssamplestoragelocationname\") {\r\n    //             console.log('tdElement', tdElement, 'cellProps', cellProps)\r\n    //             return (\r\n    //                 <td aria-colindex={cellProps.columnIndex} role={\"gridcell\"}>\r\n    //                     Sum: {cellProps.dataItem.aggregates.navailablespace.sum}\r\n    //                 </td>\r\n    //             );\r\n    //         }\r\n    //     }\r\n    //     return tdElement;\r\n    // }\r\n    // handleGroupChange = (event) => {\r\n    //     const newDataState = this.processWithGroups(this.state.masterData.samplestorageretrieval || [], this.state.dataStateChange, event.group);\r\n    //     this.setState({\r\n    //         masterData: { ...this.state.masterData, samplestorageretrieval: newDataState },\r\n    //         group: event.group,\r\n    //     });\r\n    // };\r\n    // processWithGroups = (data, group) => {\r\n    //     const newDataState = groupBy(data, group);\r\n    //     return newDataState;\r\n    // };\r\n    processWithGroups = (data, dataState) => {\r\n        const aggregates = [\r\n            {\r\n                field: \"navailablespace\",\r\n                aggregate: \"sum\",\r\n            }\r\n        ];\r\n        const groups = dataState.group;\r\n        if (groups) {\r\n            groups.map((group) => (group.aggregates = aggregates));\r\n        }\r\n        dataState.group = groups;\r\n        const newDataState = process(data, dataState);\r\n        // setGroupIds({\r\n        //     data: newDataState.data,\r\n        //     group: dataState.group,\r\n        // });\r\n        return newDataState;\r\n    };\r\n    gridfillingColumn(data) {\r\n        //  const tempArray = [];\r\n        const temparray1 = [{ \"idsName\": \"IDS_SAMPLEID\", \"dataField\": \"spositionvalue\", \"width\": \"200px\", \"staticField\": true },\r\n        { \"idsName\": \"IDS_STORAGESTRUCTURE\", \"dataField\": \"ssamplestoragelocationname\", \"width\": \"200px\", \"staticField\": true },\r\n        { \"idsName\": \"IDS_PATHWITHPOSITION\", \"dataField\": \"scontainerpathwithposition\", \"width\": \"500px\", \"staticField\": true },\r\n        { \"idsName\": \"IDS_CONTAINERID\", \"dataField\": \"sboxid\", \"width\": \"200px\", \"staticField\": true },\r\n      //  { \"idsName\": \"IDS_POSITION\", \"dataField\": \"sposition\", \"width\": \"200px\", \"staticField\": true },\r\n        { \"idsName\": \"IDS_QUANTITY\", \"dataField\": \"nquantity\", \"width\": \"200px\", \"staticField\": true },\r\n        { \"idsName\": \"IDS_UNIT\", \"dataField\": \"sunitname\", \"width\": \"200px\", \"staticField\": true },\r\n        { \"idsName\": \"IDS_TRANSACTIONSTATUS\", \"dataField\": \"stransdisplaystatus\", \"width\": \"200px\", \"staticField\": true },\r\n        { \"idsName\": \"IDS_TRANSACTIONDATE\", \"dataField\": \"dtransactiondate\", \"width\": \"200px\", \"staticField\": true },\r\n        { \"idsName\": \"IDS_USERNAME\", \"dataField\": \"susername\", \"width\": \"200px\", \"staticField\": true },\r\n        { \"idsName\": \"IDS_USERROLE\", \"dataField\": \"suserrolename\", \"width\": \"200px\", \"staticField\": true },\r\n        { \"idsName\": \"IDS_COMMENTS\", \"dataField\": \"scomments\", \"width\": \"200px\", \"staticField\": true }];\r\n        const temparray2 = data && data.map((option) => {\r\n            return { \"idsName\": option.sfieldname, \"dataField\": option.sfieldname, \"width\": \"200px\" };\r\n        });\r\n        const newArray = [...temparray1, ...temparray2]\r\n        return newArray;\r\n    }\r\n    handleFilterDateChange = (dateName, dateValue) => {\r\n        let masterData = this.state.masterData;\r\n        masterData[dateName] = dateValue;\r\n        this.setState({ masterData });\r\n\r\n    }\r\n    render() {\r\n        const addId = this.state.controlMap.has(\"Add samplestorageretrieval\") && this.state.controlMap.get(\"Add samplestorageretrieval\").ncontrolcode;\r\n        const editId = this.state.controlMap.has(\"Edit SampleStorageLocation\") && this.state.controlMap.get(\"Edit SampleStorageLocation\").ncontrolcode;\r\n        const deleteId = this.state.controlMap.has(\"Delete SampleStorageLocation\") && this.state.controlMap.get(\"Delete SampleStorageLocation\").ncontrolcode;\r\n        const copyId = this.state.controlMap.has(\"Copy SampleStorageLocation\") && this.state.controlMap.get(\"Copy SampleStorageLocation\").ncontrolcode;\r\n        const approveId = this.state.controlMap.has(\"Approve SampleStorageLocation\") && this.state.controlMap.get(\"Approve SampleStorageLocation\").ncontrolcode;\r\n        const retrievedispose= this.state.controlMap.has(\"Retrieve/Dispose\") && this.state.controlMap.get(\"Retrieve/Dispose\").ncontrolcode;\r\n\r\n        let fromDate = this.state.masterData && this.state.masterData.fromDate ? rearrangeDateFormat(this.props.Login.userInfo, this.state.masterData.fromDate) : new Date();\r\n        let toDate = this.state.masterData && this.state.masterData.toDate ? rearrangeDateFormat(this.props.Login.userInfo, this.state.masterData.toDate) : new Date();\r\n\r\n        //  let obj = convertDateValuetoString(this.props.Login.masterData.realfromDate, this.props.Login.masterData.realtoDate, this.props.Login.userInfo);\r\n\r\n        const extractedColumnList = this.state.selectedProjectTypeList ? this.gridfillingColumn(this.state.selectedProjectTypeList) : [];\r\n\r\n        let fields = {};\r\n        if (extractedColumnList.length > 0) {\r\n            extractedColumnList.map(field => {\r\n                field.hasOwnProperty(\"staticField\") ?\r\n                    fields = {\r\n                        ...fields,\r\n                        [field.dataField]: {\r\n                            \"label\": this.props.intl.formatMessage({\r\n                                id: field.idsName,\r\n                            })\r\n                            ,\r\n                            \"type\": \"text\",\r\n                            \"valueSources\": [\"value\", \"func\"],\r\n\r\n                            \"mainWidgetProps\": {\r\n                                \"valueLabel\": \"Name\",\r\n                                \"valuePlaceholder\": this.props.intl.formatMessage({\r\n                                    id: field.idsName\r\n                                })\r\n                            }\r\n                        }\r\n                    }\r\n                    :\r\n                    fields = {\r\n                        ...fields,\r\n                        ['\"' + field.dataField + '\"']: {\r\n                            \"label\": field.dataField\r\n                            ,\r\n                            \"type\": \"text\",\r\n                            \"valueSources\": [\"value\", \"func\"],\r\n\r\n                            \"mainWidgetProps\": {\r\n                                \"valueLabel\": \"Name\",\r\n                                \"valuePlaceholder\": field.dataField\r\n                            }\r\n                        }\r\n                    }\r\n            });\r\n        }\r\n        const filterParam = {\r\n            inputListName: \"sampleStorageLocation\", selectedObject: \"selectedSampleStorageLocation\", primaryKeyField: \"nsamplestoragelocationcode\",\r\n            fetchUrl: \"samplestorageretrieval/getActiveSampleStorageMappingById\",\r\n            fecthInputObject: { userinfo: this.props.Login.userInfo },\r\n            masterData: this.props.Login.masterData,\r\n            searchFieldList: [\"ssamplestoragelocationname\"]\r\n        };\r\n\r\n        const breadCrumbData = [\r\n            {\r\n                \"label\": \"IDS_FROM\",\r\n                \"value\": this.state.breadCrumbdata && this.state.breadCrumbdata.breadCrumbFrom ? this.state.breadCrumbdata.breadCrumbFrom : 'IDS_NA'\r\n            },\r\n            {\r\n                \"label\": \"IDS_TO\",\r\n                \"value\": this.state.breadCrumbdata && this.state.breadCrumbdata.breadCrumbto ? this.state.breadCrumbdata.breadCrumbto : 'IDS_NA'\r\n            },\r\n            {\r\n                \"label\": \"IDS_PROJECTTYPE\",\r\n                \"value\": this.state.breadCrumbdata &&\r\n                    this.state.breadCrumbdata.breadcrumbprojecttype ? this.state.breadCrumbdata.breadcrumbprojecttype.value : 'IDS_NA'\r\n            }\r\n\r\n        ];\r\n\r\n        const confirmMessage = new ConfirmMessage();\r\n        return (\r\n            <>\r\n\r\n                <Preloader loading={this.state.loading} />\r\n                {//this.state.retrievalType === 1 ?\r\n                    <>\r\n\r\n                        <ListWrapper className=\"client-listing-wrap toolbar-top-wrap mtop-4 screen-height-window\">\r\n                            <BreadcrumbComponent breadCrumbItem={breadCrumbData} />\r\n                            {\r\n                                <>\r\n                                    <Row>\r\n                                        <Col md={12}>\r\n                                            <InputGroup.Append>\r\n                                                <AdvFilter\r\n                                                    filterComponent={[{\r\n                                                        \"IDS_SAMPLESTORAGERETRIEVEFILTER\": <> \r\n                                                                <Col md={12}>\r\n                                                                    <Row>\r\n                                                                        <Col md={6}>\r\n                                                                            <DateTimePicker\r\n                                                                                name={\"fromdate\"}\r\n                                                                                label={this.props.intl.formatMessage({ id: \"IDS_FROM\" })}\r\n                                                                                className=\"form-control\"\r\n                                                                                placeholderText={this.props.intl.formatMessage({ id: \"IDS_FROM\" })}\r\n                                                                                selected={fromDate}\r\n                                                                                value={fromDate}\r\n                                                                                dateFormat={this.props.Login.userInfo.ssitedate}\r\n                                                                                isClearable={false}\r\n                                                                                onChange={(date) =>\r\n                                                                                    this.handleFilterDateChange(\"fromDate\", date)}\r\n                                                                            />\r\n                                                                        </Col>\r\n                                                                        <Col md={6}>\r\n                                                                            <DateTimePicker\r\n                                                                                name={\"todate\"}\r\n                                                                                label={this.props.intl.formatMessage({ id: \"IDS_TO\" })}\r\n                                                                                className=\"form-control\"\r\n                                                                                placeholderText={this.props.intl.formatMessage({ id: \"IDS_TO\" })}\r\n                                                                                selected={toDate}\r\n                                                                                value={toDate}\r\n                                                                                dateFormat={this.props.Login.userInfo.ssitedate}\r\n                                                                                isClearable={false}\r\n                                                                                onChange={(date) =>\r\n                                                                                    this.handleFilterDateChange(\"toDate\", date)}\r\n                                                                            />\r\n                                                                        </Col>\r\n                                                                    </Row>\r\n                                                                    <Row>\r\n                                                                        <Col md={12}>\r\n                                                                            <FormSelectSearch\r\n                                                                                name={\"nprojecttypecode\"}\r\n                                                                                as={\"select\"}\r\n                                                                                onChange={(event) => this.onComboChange(event, 'nprojecttypecode')}\r\n                                                                                formLabel={this.props.intl.formatMessage({ id: \"IDS_PROJECTTYPE\" })}\r\n                                                                                isMandatory={this.state.selectedRecord[\"nneedposition\"]}\r\n                                                                                value={this.state.selectedProjectType && this.state.selectedProjectType[\"nprojecttypecode\"] ? this.state.selectedProjectType[\"nprojecttypecode\"] || [] : []}\r\n                                                                                options={this.state.masterData && this.state.masterData.projectbarcodeconfig || []}\r\n                                                                                optionId={\"value\"}\r\n                                                                                optionValue={\"label\"}\r\n                                                                                isMulti={false}\r\n                                                                                isDisabled={false}\r\n                                                                                isSearchable={false}\r\n                                                                                isClearable={false}\r\n                                                                            />\r\n                                                                        </Col>\r\n                                                                    </Row>\r\n                                                                </Col> \r\n\r\n                                                        </>\r\n                                                    }]}\r\n                                                    dataFor=\"tooltip_list_wrap\"\r\n                                                    onFilterSubmit={this.onFilterSubmit}\r\n                                                    showFilter={this.state.showFilter}\r\n                                                    openFilter={this.openFilter}\r\n                                                    closeFilter={this.closeFilter}\r\n                                                    showModalBg={(e) => this.setState({ showModalBg: e })}\r\n\r\n                                                />\r\n                                            </InputGroup.Append>\r\n                                        </Col>\r\n                                    </Row>\r\n                                    {this.state.selectedProjectTypeList &&\r\n                                        <Row> <Col md={12}>\r\n                                            <DataGrid\r\n                                                // isDownloadPDFRequired={this.state.masterData && this.state.masterData.samplestorageretrieval &&\r\n                                                //     this.processWithGroups(this.state.masterData.samplestorageretrieval || [],\r\n                                                //         this.state.dataStateChange ? this.state.dataStateChange : {\r\n                                                //             take: 10,\r\n                                                //             skip: 0\r\n                                                //         }).data.length > 0 ?\r\n                                                //     true : false}\r\n                                                // isDownloadExcelRequired={this.state.masterData && this.state.masterData.samplestorageretrieval &&\r\n                                                //     this.processWithGroups(this.state.masterData.samplestorageretrieval || [],\r\n                                                //         this.state.dataStateChange ? this.state.dataStateChange : {\r\n                                                //             take: 10,\r\n                                                //             skip: 0\r\n                                                //         }).data.length > 0 ?\r\n                                                //     true : false}\r\n                                                isCustomButton={true}\r\n                                                customButtonlist={[\r\n                                                    //     {\r\n                                                    //     label: 'IDS_SEARCH',\r\n                                                    //     id: {},\r\n                                                    //     onClick: () => this.opensearch(),\r\n                                                    //     controlname: 'faSearch'\r\n                                                    // },\r\n                                                    {\r\n                                                        label: 'IDS_RETRIEVEDISPOSE',\r\n                                                        id: {},\r\n                                                        hidden : this.state.userRoleControlRights.indexOf(retrievedispose) === -1,\r\n                                                        onClick: () => this.openRetrieveDispose(),\r\n                                                        controlname: 'faRecycle'\r\n                                                    }]}\r\n                                                isRefreshRequired={false}\r\n                                                // onGroupChange={this.handleGroupChange}\r\n                                                primaryKeyField={'nsamplestoragetransactioncode'}\r\n                                                data={this.state.masterData &&\r\n                                                    this.state.masterData.samplestorageretrieval}\r\n                                                dataResult={this.state.masterData &&\r\n                                                    this.state.masterData.samplestorageretrieval ?\r\n                                                    process(this.state.masterData.samplestorageretrieval || [],\r\n                                                        this.state.dataStateChange ? this.state.dataStateChange : { skip: 0, take: 10 }) : []\r\n                                                    // this.processWithGroups(this.state.masterData.samplestorageretrieval || [],\r\n                                                    //     this.state.dataStateChange ? this.state.dataStateChange : {\r\n                                                    //         take: 10,\r\n                                                    //         skip: 0\r\n                                                    //     })\r\n                                                }\r\n                                                dataState={this.state.dataStateChange ? this.state.dataStateChange : { skip: 0, take: 10 }}\r\n                                                dataStateChange={this.dataStateChange}\r\n                                                extractedColumnList={extractedColumnList}\r\n                                                controlMap={this.state.controlMap}\r\n                                                userRoleControlRights={this.state.userRoleControlRights}\r\n                                                userInfo={this.props.Login.userInfo}\r\n                                                deleteRecord={this.deleteRecord}\r\n                                                addRecord={() => this.openStorageMapping()}\r\n                                                pageable={true}\r\n                                                scrollable={'scrollable'}\r\n                                                // isComponent={true}\r\n                                                gridHeight={'600px'}\r\n                                                // isActionRequired={true}\r\n                                                isToolBarRequired={true}\r\n                                            // actionIcons={\r\n                                            //     [{\r\n                                            //         title: this.props.intl.formatMessage({ id: \"IDS_ADDSAMPLE\" }),\r\n                                            //         controlname: \"faPenSquare\",\r\n                                            //         hidden: false,\r\n                                            //         objectName: \"add\",\r\n                                            //         onClick: (param) => this.addSample(param, 1)\r\n                                            //     }]}\r\n                                            />\r\n\r\n                                        </Col></Row>\r\n\r\n                                    }\r\n\r\n\r\n                                </>\r\n\r\n\r\n                            }\r\n\r\n                        </ListWrapper>\r\n\r\n                        {/* < ListWrapper className=\"client-list-content\" ><Row> \r\n                        </Row>\r\n                            <Col md={12}>\r\n                                <Col md={6}>\r\n                                    <Row>\r\n                                        <FormInput\r\n                                            name={'spositionvalue'}\r\n                                            onb\r\n                                            label={this.props.intl.formatMessage({ id: \"IDS_POSITIONVALUE\" })}\r\n                                            placeholder={this.props.intl.formatMessage({ id: \"IDS_POSITIONVALUE\" })}\r\n                                            value={this.state.selectedRecord['spositionvalue']\r\n                                                ? this.state.selectedRecord['spositionvalue'] : \"\"}\r\n                                            maxLength={255}\r\n                                            isDisabled={this.props.isDisabled}\r\n                                            onKeyDown={(event) => this.getSelectedBarcodeData(this.state.selectedRecord)}\r\n                                            onChange={(event) => this.onInputOnChange(event)}\r\n                                        />\r\n                                    </Row>\r\n                                </Col>\r\n                                <Col md={6}>\r\n                                    {this.state.selectedBarcodeValue && <div className=\"d-flex justify-content-end mr-3\">\r\n                                        <Row>\r\n                                            {\r\n                                                extractedColumnList.map((item, index) => {\r\n                                                    return (\r\n                                                        <>\r\n                                                            <Col md={6} key={`specInfo_${index}`}>\r\n                                                                <FormGroup>\r\n                                                                    <FormLabel>{this.props.intl.formatMessage({ id: item.idsName })}</FormLabel>\r\n                                                                    <ReadOnlyText>{this.state.selectedBarcodeValue[item.dataField]}</ReadOnlyText>\r\n                                                                </FormGroup>\r\n                                                            </Col>\r\n                                                        </>\r\n                                                    )\r\n                                                })\r\n                                            }\r\n                                        </Row>\r\n                                    </div>}\r\n                                </Col>\r\n                            </Col></ListWrapper> */}\r\n                    </>}\r\n\r\n\r\n                {\r\n                    this.state.openModal &&\r\n                    <SlideOutModal show={this.state.openModal}\r\n                        closeModal={this.closeModal}\r\n                        hideSave={true}\r\n                        showSubmit={false}\r\n                        needClose={true}\r\n                        size={this.state.openSpreadSheet || this.state.isFilterPopup ? 'xl' : \"\"}\r\n                        operation={\"\"}\r\n                        inputParam={this.props.Login.inputParam}\r\n                        screenName={this.state.isRetrieveOrDispose ? this.props.intl.formatMessage({ id: \"IDS_RETRIEVEORDISPOSESAMPLE\" }) :\r\n                            this.state.isFilterPopup ? \"\" : this.state.isMultiSampleAdd ? this.props.intl.formatMessage({ id: \"IDS_STORAGESTRUCTURE\" })\r\n                                : this.state.editedsheetData.scontainerpath}\r\n                        onSaveClick={this.state.isFilterPopup ? this.getDynamicFilterExecuteData.bind(this) : this.onSampleMappingSaveClick}\r\n                        esign={this.props.Login.loadEsign}\r\n                        // className={\"wide-popup\"}\r\n\r\n                        validateEsign={this.validateEsign}\r\n                        masterStatus={this.props.Login.masterStatus}\r\n                        updateStore={this.props.updateStore}\r\n                        selectedRecord={this.state.selectedRecord || {}}\r\n                        addComponent={\r\n                            this.state.isRetrieveOrDispose ?\r\n                                <Col md={12}>\r\n                                    <Row>\r\n                                        <Col md={6}>\r\n                                            <FormInput\r\n                                                name={'spositionvalue'}\r\n                                                label={this.props.intl.formatMessage({ id: \"IDS_SAMPLEID\" })}\r\n                                                placeholder={this.props.intl.formatMessage({ id: \"IDS_SAMPLEID\" })}\r\n                                                value={this.state.selectedRecord['spositionvalue']\r\n                                                    ? this.state.selectedRecord['spositionvalue'] : \"\"}\r\n                                                maxLength={20}\r\n                                                isMandatory={true}\r\n                                                isDisabled={this.props.isDisabled}\r\n                                                onKeyDown={(event) => this.getSelectedBarcodeData(event, this.state.selectedRecord)}\r\n                                                onChange={(event) => this.onInputOnChange(event)}\r\n                                            />\r\n                                        </Col>\r\n                                        <Col md={3}>\r\n                                            {/* <Button className=\"btn btn-circle outline-grey ml-2\" variant=\"link\"\r\n                                                onClick={() => this.CRUDSampleStorageTransaction({\r\n                                                    'nsamplestoragetransactioncode': this.state.selectedBarcodeValue && this.state.selectedBarcodeValue.nsamplestoragetransactioncode,\r\n                                                    userinfo: this.props.Login.userInfo,\r\n                                                    scomments: this.state.selectedRecord.scomments && this.state.selectedRecord.scomments !== \"\"\r\n                                                        ? this.state.selectedRecord.scomments : \"-\",\r\n                                                    isRetrieve: true,\r\n                                                    spositionvalue: this.state.selectedRecord.spositionvalue\r\n                                                }, 'create')}\r\n                                                data-tip={this.props.intl.formatMessage({ id: \"IDS_RETRIEVE\" })}>\r\n                                                <FontAwesomeIcon icon={faSync} style={{ \"width\": \"0.6!important\" }} />\r\n                                            </Button> */}\r\n                                            <button className=\"btn btn-primary\" style={{ float: \"right\", marginRight: \"1rem\" }}\r\n                                                onClick={() => this.CRUDSampleStorageTransaction({\r\n                                                    'nsamplestoragetransactioncode': this.state.selectedBarcodeValue && this.state.selectedBarcodeValue.nsamplestoragetransactioncode,\r\n                                                    userinfo: this.props.Login.userInfo,\r\n                                                    scomments: this.state.selectedRecord.scomments && this.state.selectedRecord.scomments !== \"\"\r\n                                                        ? this.state.selectedRecord.scomments : \"-\",\r\n                                                    isRetrieve: true,\r\n                                                    spositionvalue: this.state.selectedRecord.spositionvalue\r\n                                                }, 'create')}>\r\n                                                <FontAwesomeIcon icon={faTrashRestore}></FontAwesomeIcon>{\"  \"}\r\n                                                {this.props.intl.formatMessage({ id: \"IDS_RETRIEVE\" })}\r\n                                            </button>\r\n                                        </Col>\r\n                                        <Col md={3}>\r\n                                            {/* <Button className=\"btn btn-circle outline-grey ml-2\" variant=\"link\"\r\n                                                onClick={() => this.CRUDSampleStorageTransaction({\r\n                                                    'nsamplestoragetransactioncode': this.state.selectedBarcodeValue && this.state.selectedBarcodeValue.nsamplestoragetransactioncode,\r\n                                                    userinfo: this.props.Login.userInfo,\r\n                                                    scomments: this.state.selectedRecord.scomments && this.state.selectedRecord.scomments !== \"\"\r\n                                                        ? this.state.selectedRecord.scomments : \"-\",\r\n                                                    isRetrieve: false,\r\n                                                    spositionvalue: this.state.selectedRecord.spositionvalue\r\n                                                }, 'create')}\r\n                                                data-tip={this.props.intl.formatMessage({ id: \"IDS_DISPOSE\" })}>\r\n                                                <FontAwesomeIcon icon={faSync} style={{ \"width\": \"0.6!important\" }} />\r\n                                            </Button> */}\r\n                                            <button className=\"btn btn-primary\" style={{ float: \"right\", marginRight: \"1rem\" }}\r\n                                                onClick={() => this.CRUDSampleStorageTransaction({\r\n                                                    'nsamplestoragetransactioncode': this.state.selectedBarcodeValue && this.state.selectedBarcodeValue.nsamplestoragetransactioncode,\r\n                                                    userinfo: this.props.Login.userInfo,\r\n                                                    scomments: this.state.selectedRecord.scomments && this.state.selectedRecord.scomments !== \"\"\r\n                                                        ? this.state.selectedRecord.scomments : \"-\",\r\n                                                    isRetrieve: false,\r\n                                                    spositionvalue: this.state.selectedRecord.spositionvalue\r\n                                                }, 'create')}>\r\n                                                <FontAwesomeIcon icon={faTrashAlt}></FontAwesomeIcon>{\"  \"}\r\n                                                {this.props.intl.formatMessage({ id: \"IDS_DISPOSE\" })}\r\n                                            </button>\r\n                                        </Col>\r\n                                    </Row>\r\n                                    <Row>\r\n                                        <Col md={6}>\r\n                                            <FormInput\r\n                                                name={'scomments'}\r\n                                                label={this.props.intl.formatMessage({ id: \"IDS_COMMENTS\" })}\r\n                                                placeholder={this.props.intl.formatMessage({ id: \"IDS_COMMENTS\" })}\r\n                                                value={this.state.selectedRecord['scomments']\r\n                                                    ? this.state.selectedRecord['scomments'] : \"\"}\r\n                                                maxLength={255}\r\n                                                onChange={(event) => this.onInputOnChange(event)}\r\n                                            />\r\n                                        </Col>\r\n                                    </Row>\r\n                                    <Row>\r\n                                        {this.state.dynamicfields.length > 0 &&\r\n                                            <div className=' mb-2'>\r\n                                                <Card>\r\n                                                    <Card.Header>\r\n                                                        <span style={{ display: \"inline-block\", marginTop: \"1%\" }} >\r\n                                                            <h4>{this.props.intl.formatMessage({ id: \"IDS_SAMPLEINFO\" })}</h4>\r\n                                                        </span>\r\n                                                    </Card.Header>\r\n                                                    <Card.Body>\r\n                                                        <Row>\r\n                                                            {\r\n                                                                this.state.dynamicfields.map((item, index) => {\r\n                                                                    return (\r\n                                                                        <>\r\n                                                                            <Col md={6} key={`specInfo_${index}`}>\r\n                                                                                <FormGroup>\r\n                                                                                    <FormLabel>{\r\n                                                                                        item.hasOwnProperty('staticField') ?\r\n                                                                                            this.props.intl.formatMessage({ id: item.idsName }) : item.idsName}  </FormLabel>\r\n                                                                                    <ReadOnlyText>{this.state.selectedBarcodeValue[item.dataField]===\"\"||\r\n                                                                                    this.state.selectedBarcodeValue[item.dataField]===undefined||\r\n                                                                                    this.state.selectedBarcodeValue[item.dataField]===null?\r\n                                                                                    \"-\":this.state.selectedBarcodeValue[item.dataField]}</ReadOnlyText>\r\n                                                                                </FormGroup>\r\n                                                                            </Col>\r\n                                                                        </>\r\n                                                                    )\r\n                                                                })\r\n                                                                //:\r\n                                                                // <FormLabel>{\r\n                                                                //     this.props.intl.formatMessage({ id: \"IDS_NODATAFOUND\" })}  </FormLabel>\r\n                                                            }\r\n                                                        </Row>\r\n                                                    </Card.Body>\r\n                                                </Card>\r\n                                            </div>}\r\n                                    </Row>\r\n                                </Col>\r\n                                : this.state.isFilterPopup ?\r\n                                    <FilterQueryBuilder\r\n                                        fields={fields}\r\n                                        isSampleStorage={true}\r\n\r\n                                        queryArray={this.state.queryArray}\r\n                                        skip={this.state.kendoSkip}\r\n                                        take={this.state.kendoTake}\r\n                                        onChange={this.onChange}\r\n                                        tree={this.props.Login.tree !== undefined ? this.props.Login.tree : this.state.selectedRecord.tree}\r\n                                        gridColumns={this.slideList}\r\n                                        filterData={this.props.Login.slideResult || []}\r\n                                        handlePageChange={this.handlePageChangeFilter}\r\n                                        static={true}\r\n                                        userInfo={this.props.Login.userInfo}\r\n                                        updateStore={this.props.updateStore}\r\n                                    />\r\n                                    : this.props.Login.loadEsign ?\r\n                                        <Esign operation={this.props.Login.operation}\r\n                                            formatMessage={this.props.intl.formatMessage}\r\n                                            onInputOnChange={this.onInputOnChange}\r\n                                            inputParam={this.props.Login.inputParam}\r\n                                            selectedRecord={this.state.selectedRecord || {}}\r\n                                        />\r\n                                        :\r\n                                        this.state.openSpreadSheet ? <>\r\n                                            <MatrixComponent\r\n                                                Rows={this.state.Rows || 1}\r\n                                                userInfo={this.props.Login.userInfo}\r\n                                                columns={this.state.columns || 1}\r\n                                                selectedRecord={this.state.selectedRecord.sheetData || {}}\r\n                                                sheetData={this.state.sheetData || {}}\r\n                                                isMultiSampleAdd={this.state.isMultiSampleAdd}\r\n                                                childSheetDataChange={this.childSheetDataChange}\r\n                                                editedsheetData={this.state.editedsheetData}\r\n                                                multipleSheetData={this.state.masterData &&\r\n                                                    this.state.masterData.samplestorageretrieval &&\r\n                                                    process(this.state.masterData.samplestorageretrieval || [],\r\n                                                        this.state.dataStateChange ? this.state.dataStateChange : { skip: 0, take: 10 }).data} />\r\n                                        </> :\r\n                                            <AddSampleStorageMapping\r\n                                                operation={this.state.operation}\r\n                                                selectedRecordFilter={this.state.selectedRecordFilter}\r\n                                                onInputChange={(e) => this.onInputChange(e)}\r\n                                                onComboChange={this.onComboChange}\r\n                                                selectedRecord={this.state.selectedRecord || {}}\r\n                                                childDataChange={this.childDataChange}\r\n                                                userInfo={this.props.Login.userInfo}\r\n                                            />\r\n                        }\r\n                    />\r\n                }\r\n            </>\r\n        )\r\n    }\r\n\r\n    validateEsign = () => {\r\n        const inputParam = {\r\n            inputData: {\r\n                \"userinfo\": {\r\n                    ...this.props.Login.userInfo,\r\n                    sreason: this.state.selectedRecord[\"esigncomments\"],\r\n                    nreasoncode: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].value,\r\n                    spredefinedreason: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].label,\r\n\r\n                },\r\n                password: this.state.selectedRecord[\"esignpassword\"]\r\n            },\r\n            screenData: this.props.Login.screenData\r\n        }\r\n        this.props.validateEsignCredential(inputParam, \"openModal\");\r\n    }\r\n\r\n}\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        Login: state.Login\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, {\r\n    callService\r\n})(injectIntl(SampleStorageRetrieval));"]},"metadata":{},"sourceType":"module"}