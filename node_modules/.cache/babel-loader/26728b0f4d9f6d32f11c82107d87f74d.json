{"ast":null,"code":"var _jsxFileName = \"E:\\\\WorkingFolder\\\\React_Postgres\\\\ALPD\\\\branches\\\\SOURCE-513-PROD\\\\QuaLISWeb\\\\src\\\\pages\\\\testgroup\\\\AddTestGroupRule.js\";\nimport { faAddressBook, faChevronRight, faComment, faCommentMedical, faComments, faCommentsDollar, faEye, faFlag, faGripVertical, faPlay, faPlus, faRecycle, faTrashAlt } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport React from 'react';\nimport { Button, Card, Col, Form, ListGroup, Media, Nav, Row } from 'react-bootstrap';\nimport { process } from '@progress/kendo-data-query';\nimport CustomAccordion from '../../components/custom-accordion/custom-accordion.component';\nimport { AtTableWrap, FormControlStatic, FontIconWrap } from '../../components/data-grid/data-grid.styles';\nimport { ListWrapper } from '../../components/client-group.styles';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport FormSelectSearch from '../../components/form-select-search/form-select-search.component';\nimport FormInput from '../../components/form-input/form-input.component';\nimport { BuilderBorder, ContionalButton, DeleteRule } from '../configurationmaster/RuleEngineSqlbuilder.styled';\nimport '../../assets/styles/querybuilder.css';\nimport CustomTabs from '../../components/custom-tabs/custom-tabs.component';\nimport { ColumnType, parameterType, transactionStatus } from '../../components/Enumeration';\nimport FormTextarea from '../../components/form-textarea/form-textarea.component';\nimport { stringOperatorData, conditionalOperatorData, numericOperatorData, joinConditionData, aggregateFunction, orderByList } from '../configurationmaster/RuleEngineQueryBuilderData';\nimport CustomSwitch from '../../components/custom-switch/custom-switch.component';\nimport DateTimePicker from '../../components/date-time-picker/date-time-picker.component';\nimport FormCheckbox from '../../components/form-checkbox/form-checkbox.component';\nimport DataGrid from '../../components/data-grid/data-grid.component';\nimport FormMultiSelect from '../../components/form-multi-select/form-multi-select.component';\nimport SplitterLayout from 'react-splitter-layout';\nimport ModalShow from '../../components/ModalShow';\nimport FormNumericInput from '../../components/form-numeric-input/form-numeric-input.component';\nimport { sortData } from '../../components/CommonScript';\nimport TestGroupResultEntry from './TestGroupResultEntry';\nimport { ProductList } from '../product/product.styled';\nimport { ContactHeader, HeaderText } from '../testmanagement/testmaster-styled';\nimport { ClientList } from '../userroletemplate/userroletemplate.styles';\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\nimport TestPopOver from '../ResultEntryBySample/TestPopOver';\nimport { MediaLabel } from '../../components/App.styles';\n\nconst AddTestGroupRule = props => {\n  const fieldsForGrid = props.activeTabIndex == 1 ? [{\n    \"idsName\": \"IDS_TOSITE\",\n    \"dataField\": \"stositename\",\n    \"width\": \"200px\"\n  }, {\n    \"idsName\": \"IDS_FROMSITE\",\n    \"dataField\": \"sfromsitename\",\n    \"width\": \"200px\"\n  }] : props.activeTabIndex == 2 ? [{\n    \"idsName\": \"IDS_DESCRIPTION\",\n    \"dataField\": \"sdescription\",\n    \"width\": \"200px\"\n  }, {\n    \"idsName\": \"IDS_RESULTS\",\n    \"dataField\": \"spredefinedname\",\n    \"width\": \"200px\"\n  }, {\n    \"idsName\": \"IDS_COMMENTSUBTYPE\",\n    \"dataField\": \"scommentsubtype\",\n    \"width\": \"200px\"\n  }, {\n    \"idsName\": \"IDS_COMMENTTYPE\",\n    \"dataField\": \"scommenttype\",\n    \"width\": \"200px\"\n  }] : props.activeTabIndex == 3 ? [{\n    \"idsName\": \"IDS_TESTNAME\",\n    \"dataField\": \"stestsynonym\",\n    \"width\": \"200px\"\n  }, {\n    \"idsName\": \"IDS_REPEATCOUNT\",\n    \"dataField\": \"nrepeatcountno\",\n    \"width\": \"200px\"\n  }] : props.activeTabIndex == 4 ? [{\n    \"idsName\": \"IDS_TESTNAME\",\n    \"dataField\": \"stestsynonym\",\n    \"width\": \"200px\"\n  }, {\n    \"idsName\": \"IDS_OPTIONALPARAMETERS\",\n    \"dataField\": \"sparametersynonym\",\n    \"width\": \"200px\"\n  }, {\n    \"idsName\": \"IDS_RESULTFLAG\",\n    \"dataField\": \"sgradename\",\n    \"width\": \"200px\"\n  }, {\n    \"idsName\": \"IDS_RESULTS\",\n    \"dataField\": \"senforceresult\",\n    \"width\": \"200px\"\n  }] : \"\";\n  const customStyle = {\n    'padding-top': '8px',\n    'padding-left': '2px',\n    'padding-right': '50px'\n  };\n\n  function createRules(items, groupIndex) {\n    let design = [];\n    console.log('props.selectedRecord->>', props.selectedRecord);\n    props.selectedRecord && [...Array(items)].map((data, index) => {\n      let stringOperators = stringOperatorData;\n      design.push( /*#__PURE__*/React.createElement(React.Fragment, null, index > 0 ? props.selectedRecord[\"groupList\"][groupIndex]['button_or'] === true ? /*#__PURE__*/React.createElement(ContionalButton, {\n        type: \"button\",\n        className: \"builder-btn-primary\",\n        marginLeft: 0,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(FormattedMessage, {\n        id: \"IDS_OR\",\n        defaultMessage: \"Or\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 35\n        }\n      }))) : props.selectedRecord[\"groupList\"][groupIndex]['button_and'] === true ? /*#__PURE__*/React.createElement(ContionalButton, {\n        type: \"button\",\n        className: \"builder-btn-primary\",\n        marginLeft: 0,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(FormattedMessage, {\n        id: \"IDS_AND\",\n        defaultMessage: \"And\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 39\n        }\n      }))) : \"\" : \"\", /*#__PURE__*/React.createElement(Row, {\n        className: \"my-3 ml-1\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(FontIconWrap, {\n        className: \"d-font-icon action-icons-wrap\",\n        style: customStyle,\n        \"data-tip\": props.intl.formatMessage({\n          id: \"IDS_DELETE\"\n        }),\n        onClick: () => props.deleteRule(groupIndex, index),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n        icon: faTrashAlt,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 29\n        }\n      })), /*#__PURE__*/React.createElement(Col, {\n        md: 4,\n        className: \"pl-0\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(FormSelectSearch, {\n        formGroupClassName: \"remove-floating-label-margin\",\n        isSearchable: true,\n        name: \"stestname\",\n        showOption: true,\n        options: props.rulesOption || [],\n        optionId: \"stestname\",\n        optionValue: \"displayname\",\n        value: props.selectedRecord[\"groupList\"][groupIndex][index] && props.selectedRecord[\"groupList\"][groupIndex][index][\"stestname\"] || \"\",\n        onChange: value => props.onRuleChange(value, \"stestname\", groupIndex, index),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 29\n        }\n      })), props.selectedRecord[\"groupList\"][groupIndex][index] && props.selectedRecord[\"groupList\"][groupIndex][index][\"stestname\"] && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Col, {\n        md: 2,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(FormSelectSearch, {\n        formGroupClassName: \"remove-floating-label-margin\",\n        formLabel: \"\",\n        isSearchable: true,\n        name: \"orderresulttype\",\n        placeholder: \"\",\n        showOption: true,\n        options: props.resultTypeList,\n        optionId: \"nresultypecode\",\n        optionValue: \"orderresulttype\",\n        value: props.selectedRecord[\"groupList\"][groupIndex][index] && props.selectedRecord[\"groupList\"][groupIndex][index][\"orderresulttype\"] || \"\",\n        onChange: value => props.onMasterDataChange(value, \"orderresulttype\", groupIndex, index),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 37\n        }\n      })), /*#__PURE__*/React.createElement(Col, {\n        md: 2,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(FormSelectSearch, {\n        formGroupClassName: \"remove-floating-label-margin\",\n        formLabel: \"\",\n        isSearchable: true,\n        name: \"ssymbolname\",\n        placeholder: \"\",\n        showOption: true,\n        options: props.selectedRecord[\"groupList\"][groupIndex][index][\"orderresulttype\"] && props.selectedRecord[\"groupList\"][groupIndex][index][\"orderresulttype\"].value === 3 && props.selectedRecord[\"groupList\"][groupIndex][index][\"stestname\"] && props.selectedRecord[\"groupList\"][groupIndex][index][\"stestname\"]['item']['nparametertypecode'] === parameterType.NUMERIC ? numericOperatorData : stringOperators,\n        optionId: \"nvalidationcode\",\n        optionValue: \"ssymbolname\",\n        value: props.selectedRecord[\"groupList\"][groupIndex][index] && props.selectedRecord[\"groupList\"][groupIndex][index][\"ssymbolname\"] || \"\",\n        onChange: value => props.onSymbolChange(value, \"ssymbolname\", groupIndex, index),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 37\n        }\n      })), props.selectedRecord[\"groupList\"][groupIndex][index] ? props.selectedRecord[\"groupList\"][groupIndex][index][\"orderresulttype\"] && props.selectedRecord[\"groupList\"][groupIndex][index][\"orderresulttype\"].value === 3 && props.selectedRecord[\"groupList\"][groupIndex][index][\"stestname\"]['item']['nparametertypecode'] === parameterType.PREDEFINED ? /*#__PURE__*/React.createElement(Col, {\n        md: 2,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 249,\n          columnNumber: 41\n        }\n      }, /*#__PURE__*/React.createElement(FormSelectSearch, {\n        formGroupClassName: \"remove-floating-label-margin\",\n        isSearchable: true,\n        name: `${props.selectedRecord[\"groupList\"][groupIndex][index][\"stestname\"].items && props.selectedRecord[\"groupList\"][groupIndex][index][\"stestname\"].items.valuemember}`,\n        showOption: true,\n        options: props.selectedRecord[\"groupList\"][groupIndex][index][\"orderresulttype\"] && props.selectedRecord[\"groupList\"][groupIndex][index][\"orderresulttype\"].value == 1 ? props.DiagnosticCaseList : props.selectedRecord[\"groupList\"][groupIndex][index][\"orderresulttype\"].value == 2 ? props.GradeList : props.PredefinedParameterOptions && props.PredefinedParameterOptions.length > 0 && props.PredefinedParameterOptions[groupIndex] && props.PredefinedParameterOptions[groupIndex].length > 0 && props.PredefinedParameterOptions[groupIndex][index],\n        optionId: props.selectedRecord[\"groupList\"][groupIndex][index][\"stestname\"].items && props.selectedRecord[\"groupList\"][groupIndex][index][\"stestname\"].items.valuemember,\n        optionValue: props.selectedRecord[\"groupList\"][groupIndex][index][\"stestname\"].items && props.selectedRecord[\"groupList\"][groupIndex][index][\"stestname\"].items.displaymember,\n        value: props.selectedRecord[\"groupList\"][groupIndex][index] && props.selectedRecord[\"groupList\"][groupIndex][index][props.selectedRecord[\"groupList\"][groupIndex][index][\"orderresulttype\"] && props.selectedRecord[\"groupList\"][groupIndex][index][\"orderresulttype\"].value == 1 ? 'ndiagnosticcasecode' : props.selectedRecord[\"groupList\"][groupIndex][index][\"orderresulttype\"].value == 2 ? 'ngradecode' : 'ntestgrouptestpredefcode'] || \"\",\n        onChange: value => props.onMasterDataChange(value, props.selectedRecord[\"groupList\"][groupIndex][index][\"orderresulttype\"] && props.selectedRecord[\"groupList\"][groupIndex][index][\"orderresulttype\"].value === 1 ? 'ndiagnosticcasecode' : props.selectedRecord[\"groupList\"][groupIndex][index][\"orderresulttype\"].value == 2 ? 'ngradecode' : 'ntestgrouptestpredefcode', groupIndex, index),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 250,\n          columnNumber: 45\n        }\n      })) : props.selectedRecord[\"groupList\"][groupIndex][index][\"orderresulttype\"] && props.selectedRecord[\"groupList\"][groupIndex][index][\"orderresulttype\"].value === 3 && props.selectedRecord[\"groupList\"][groupIndex][index][\"stestname\"]['item']['nparametertypecode'] === parameterType.CHARACTER ? /*#__PURE__*/React.createElement(Col, {\n        md: 2,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 281,\n          columnNumber: 45\n        }\n      }, /*#__PURE__*/React.createElement(FormTextarea, {\n        name: `${props.selectedRecord[\"groupList\"][groupIndex][index][\"stestname\"].items && props.selectedRecord[\"groupList\"][groupIndex][index][\"stestname\"].items.valuemember}`,\n        placeholder: props.intl.formatMessage({\n          id: \"IDS_RESULTS\"\n        }),\n        value: props.selectedRecord[\"groupList\"][groupIndex][index] ? props.selectedRecord[\"groupList\"][groupIndex][index][\"ntestgrouptestcharcode\"] : \"\",\n        rows: \"2\",\n        isMandatory: false,\n        required: false,\n        maxLength: 255,\n        onChange: event => props.onRuleInputChange(event, 'ntestgrouptestcharcode', groupIndex, index),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 282,\n          columnNumber: 49\n        }\n      })) : props.selectedRecord[\"groupList\"][groupIndex][index][\"orderresulttype\"] && props.selectedRecord[\"groupList\"][groupIndex][index][\"orderresulttype\"].value === 3 && props.selectedRecord[\"groupList\"][groupIndex][index][\"stestname\"]['item']['nparametertypecode'] === parameterType.NUMERIC ? /*#__PURE__*/React.createElement(Col, {\n        md: 2,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 296,\n          columnNumber: 49\n        }\n      }, /*#__PURE__*/React.createElement(FormNumericInput, {\n        name: `${props.selectedRecord[\"groupList\"][groupIndex][index][\"stestname\"].items && props.selectedRecord[\"groupList\"][groupIndex][index][\"stestname\"].items.valuemember}`,\n        placeholder: props.intl.formatMessage({\n          id: \"IDS_RESULTS\"\n        }),\n        value: props.selectedRecord[\"groupList\"][groupIndex][index] ? props.selectedRecord[\"groupList\"][groupIndex][index][\"ntestgrouptestnumericcode\"] : \"\",\n        type: \"text\",\n        strict: true,\n        maxLength: 10,\n        noStyle: true,\n        onChange: event => props.onRuleNumericInputOnChange(event, 'ntestgrouptestnumericcode', groupIndex, index),\n        precision: 2,\n        min: 0,\n        className: \"form-control\",\n        isMandatory: false,\n        required: false,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 297,\n          columnNumber: 53\n        }\n      })) : /*#__PURE__*/React.createElement(Col, {\n        md: 2,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 314,\n          columnNumber: 49\n        }\n      }, /*#__PURE__*/React.createElement(FormSelectSearch, {\n        formGroupClassName: \"remove-floating-label-margin\",\n        isSearchable: true,\n        name: `${props.selectedRecord[\"groupList\"][groupIndex][index][\"stestname\"].items && props.selectedRecord[\"groupList\"][groupIndex][index][\"stestname\"].items.valuemember}`,\n        showOption: true,\n        options: props.selectedRecord[\"groupList\"][groupIndex][index][\"orderresulttype\"] && props.selectedRecord[\"groupList\"][groupIndex][index][\"orderresulttype\"].value == 1 ? props.DiagnosticCaseList : props.GradeList,\n        optionId: props.selectedRecord[\"groupList\"][groupIndex][index][\"stestname\"].items && props.selectedRecord[\"groupList\"][groupIndex][index][\"stestname\"].items.valuemember,\n        optionValue: props.selectedRecord[\"groupList\"][groupIndex][index][\"stestname\"].items && props.selectedRecord[\"groupList\"][groupIndex][index][\"stestname\"].items.displaymember,\n        value: props.selectedRecord[\"groupList\"][groupIndex][index] && props.selectedRecord[\"groupList\"][groupIndex][index][props.selectedRecord[\"groupList\"][groupIndex][index][\"orderresulttype\"] && props.selectedRecord[\"groupList\"][groupIndex][index][\"orderresulttype\"].value == 1 ? 'ndiagnosticcasecode' : 'ngradecode'] || \"\",\n        onChange: value => props.onMasterDataChange(value, props.selectedRecord[\"groupList\"][groupIndex][index][\"orderresulttype\"] && props.selectedRecord[\"groupList\"][groupIndex][index][\"orderresulttype\"].value === 1 ? 'ndiagnosticcasecode' : 'ngradecode' // `${props.selectedRecord[\"groupList\"][groupIndex][index][\"stestname\"].items.valuemember}`\n        , groupIndex, index),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 315,\n          columnNumber: 53\n        }\n      })) : \"\"))));\n    });\n    return design;\n  }\n\n  function onKeyPress(event, index, paremterResultcode) {\n    if (event.keyCode === 13) {\n      for (let i = 0; i < event.target.form.elements.length; i++) {\n        if (parseInt(event.target.form.elements[i].id) === paremterResultcode[index + 1]) {\n          event.target.form.elements[i].focus();\n          break;\n        }\n      }\n\n      event.preventDefault();\n    }\n  }\n\n  function createGroupRules() {\n    console.log('props.addGroupList->', props);\n    let indexCount = 0;\n    let design = [];\n    console.log('props.addGroupList->', props.addGroupList);\n    props.selectedRecord[\"groupList\"] && props.addGroupList.length > 0 && props.addGroupList.map((items, index) => {\n      let stringOperators = stringOperatorData;\n\n      if (props.selectedRecord[\"groupList\"] && props.selectedRecord[\"groupList\"][index][\"stestname\"] && !props.selectedRecord[\"groupList\"][index][\"stestname\"].items.needmasterdata && props.selectedRecord[\"groupList\"][index][\"stestname\"].items.columntype === ColumnType.TEXTINPUT) {\n        const temp = stringOperators.filter(item => {\n          if (item.items.symbolType !== 6) {\n            return item;\n          }\n        });\n        stringOperators = temp;\n      }\n\n      if (items > -1) {\n        indexCount = indexCount + 1;\n      }\n\n      ;\n      design.push( /*#__PURE__*/React.createElement(React.Fragment, null, index > 0 && /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 383,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(ContionalButton, {\n        type: \"button\",\n        className: props.selectedRecord[\"groupListJoins\"] && props.selectedRecord[\"groupListJoins\"][index - 1] && props.selectedRecord[\"groupListJoins\"][index - 1][\"button_and\"] === true ? \"builder-btn-primary\" : \"\",\n        marginLeft: 1,\n        onClick: () => props.onConditionClick(\"button_and\", index - 1, true),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 384,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 387,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(FormattedMessage, {\n        id: \"IDS_AND\",\n        defaultMessage: \"And\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 387,\n          columnNumber: 31\n        }\n      }))), /*#__PURE__*/React.createElement(ContionalButton, {\n        type: \"button\",\n        className: props.selectedRecord[\"groupListJoins\"] && props.selectedRecord[\"groupListJoins\"][index - 1] && props.selectedRecord[\"groupListJoins\"][index - 1][\"button_or\"] === true ? \"builder-btn-primary\" : \"\",\n        marginLeft: 0,\n        onClick: () => props.onConditionClick(\"button_or\", index - 1, true),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 389,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 392,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(FormattedMessage, {\n        id: \"IDS_OR\",\n        defaultMessage: \"Or\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 392,\n          columnNumber: 31\n        }\n      }))), /*#__PURE__*/React.createElement(ContionalButton, {\n        type: \"button\",\n        className: props.selectedRecord[\"groupListJoins\"] && props.selectedRecord[\"groupListJoins\"][index - 1] && props.selectedRecord[\"groupListJoins\"][index - 1][\"button_not\"] === true ? \"builder-btn-primary\" : \"\",\n        marginLeft: 0,\n        onClick: () => props.onConditionClick(\"button_not\", index - 1, true),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 394,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 397,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(FormattedMessage, {\n        id: \"IDS_NOT\",\n        defaultMessage: \"NOT\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 397,\n          columnNumber: 31\n        }\n      })))), items > -1 ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(BuilderBorder, {\n        key: index,\n        className: \"p-3 mb-1\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 402,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 403,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(Col, {\n        md: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 405,\n          columnNumber: 37\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        onClick: () => props.addRule(\"views\", index),\n        className: \"mr-1 rulesengine-rule-btn\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 406,\n          columnNumber: 41\n        }\n      }, '+', \" \", /*#__PURE__*/React.createElement(FormattedMessage, {\n        id: \"IDS_RULE\",\n        defaultMessage: \"Rule\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 407,\n          columnNumber: 51\n        }\n      })), items > 1 ? /*#__PURE__*/React.createElement(Row, {\n        className: \"rulesengine-condition-btn \",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 410,\n          columnNumber: 45\n        }\n      }, /*#__PURE__*/React.createElement(ContionalButton, {\n        type: \"button\",\n        className: props.selectedRecord[\"groupList\"][index][\"button_and\"] === true ? \"builder-btn-primary\" : \"\",\n        marginLeft: 1,\n        onClick: () => props.onConditionClick(\"button_and\", index, false),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 411,\n          columnNumber: 49\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 413,\n          columnNumber: 53\n        }\n      }, /*#__PURE__*/React.createElement(FormattedMessage, {\n        id: \"IDS_AND\",\n        defaultMessage: \"And\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 413,\n          columnNumber: 59\n        }\n      }))), /*#__PURE__*/React.createElement(ContionalButton, {\n        type: \"button\",\n        className: props.selectedRecord[\"groupList\"][index][\"button_or\"] === true ? \"builder-btn-primary\" : \"\",\n        marginLeft: 0,\n        onClick: () => props.onConditionClick(\"button_or\", index, false),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 415,\n          columnNumber: 49\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 417,\n          columnNumber: 53\n        }\n      }, /*#__PURE__*/React.createElement(FormattedMessage, {\n        id: \"IDS_OR\",\n        defaultMessage: \"Or\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 417,\n          columnNumber: 59\n        }\n      }))), /*#__PURE__*/React.createElement(ContionalButton, {\n        type: \"button\",\n        className: props.selectedRecord[\"groupList\"][index][\"button_not\"] === true ? \"builder-btn-primary\" : \"\",\n        marginLeft: 0,\n        onClick: () => props.onConditionClick(\"button_not\", index, false),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 419,\n          columnNumber: 49\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 421,\n          columnNumber: 53\n        }\n      }, /*#__PURE__*/React.createElement(FormattedMessage, {\n        id: \"IDS_NOT\",\n        defaultMessage: \"NOT\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 421,\n          columnNumber: 59\n        }\n      })))) : /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 427,\n          columnNumber: 49\n        }\n      }, /*#__PURE__*/React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 428,\n          columnNumber: 53\n        }\n      }))))), /*#__PURE__*/React.createElement(React.Fragment, null, createRules(items, index)))) : /*#__PURE__*/React.createElement(React.Fragment, null)));\n    });\n    return design;\n  }\n\n  function testParameterAccordion(TestParameter) {\n    const accordionMap = new Map();\n    TestParameter.map(testParameter => accordionMap.set(testParameter.npkAtestparametercode, /*#__PURE__*/React.createElement(Col, {\n      className: \"p-0\",\n      testParameter: testParameter,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 457,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 459,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: \"12\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 460,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"d-flex align-items-center mb-2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 461,\n        columnNumber: 29\n      }\n    }, testParameter.ParameterRulesEngine && testParameter.ParameterRulesEngine.length > 0 && /*#__PURE__*/React.createElement(\"h4\", {\n      className: \"inner_h4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 462,\n        columnNumber: 120\n      }\n    }, \" \", props.intl.formatMessage({\n      id: \"IDS_RESULTS\"\n    })), /*#__PURE__*/React.createElement(Nav.Item, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 469,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 470,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(CustomSwitch, {\n      label: props.intl.formatMessage({\n        id: \"IDS_NEEDSAMPLE\"\n      }),\n      type: \"switch\",\n      name: \"nneedsample\",\n      onChange: event => props.onInputSwitchChange(event),\n      placeholder: props.intl.formatMessage({\n        id: \"IDS_NEEDSAMPLE\"\n      }),\n      defaultValue: props.masterData.selectedParameterRulesEngine.nneedsample === 3 ? true : false,\n      isMandatory: false,\n      required: false,\n      checked: props.masterData.selectedParameterRulesEngine.nneedsample === 3 ? true : false //  disabled={props.selectedRecord ? props.selectedRecord[\"ndefaultstatus\"] === 3 ? true : false : false}\n      ,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 471,\n        columnNumber: 57\n      }\n    }))), /*#__PURE__*/React.createElement(Nav.Link, {\n      \"data-tip\": props.intl.formatMessage({\n        id: \"IDS_ENTERRESULT\"\n      }),\n      className: \"btn btn-circle outline-grey ml-auto\",\n      role: \"button\",\n      onClick: () => props.addParameter(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 487,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faAddressBook,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 491,\n        columnNumber: 41\n      }\n    }))), /*#__PURE__*/React.createElement(ListGroup, {\n      as: \"ul\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 494,\n        columnNumber: 37\n      }\n    }, testParameter.ParameterRulesEngine && sortData(testParameter.ParameterRulesEngine, 'descending', 'slNo').map((parameter, predefindex) => {\n      let isAdditionalInfoRequired = parameter.hasOwnProperty('additionalInfo') && parameter['additionalInfo'] !== \"\" && parameter['additionalInfo'] !== null && parameter['additionalInfo'] !== undefined ? true : false;\n      return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(ListGroup.Item, {\n        key: predefindex,\n        as: \"li\",\n        className: \"rulesengine-parameter-list\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 501,\n          columnNumber: 57\n        }\n      }, /*#__PURE__*/React.createElement(Media, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 502,\n          columnNumber: 61\n        }\n      }, /*#__PURE__*/React.createElement(Media.Body, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 503,\n          columnNumber: 65\n        }\n      }, /*#__PURE__*/React.createElement(ContactHeader, {\n        className: \"mt-0 text-break\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 504,\n          columnNumber: 69\n        }\n      }, //props.intl.formatMessage({ id: \"IDS_PARAMETERNAME\" }) + ' : ' +\n      parameter.sparametersynonym), /*#__PURE__*/React.createElement(ProductList, {\n        className: \"text-break\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 506,\n          columnNumber: 69\n        }\n      }, props.intl.formatMessage({\n        id: \"IDS_RESULTS\"\n      }) + ' : ' + parameter.sfinal)), /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 515,\n          columnNumber: 65\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"d-flex  justify-content-end mr-1\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 516,\n          columnNumber: 69\n        }\n      }, /*#__PURE__*/React.createElement(ClientList, {\n        className: \"action-icons-wrap\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 517,\n          columnNumber: 73\n        }\n      }, /*#__PURE__*/React.createElement(FontIconWrap, {\n        className: \"d-font-icon action-icons-wrap\",\n        testParameter: testParameter,\n        \"data-tip\": props.intl && props.intl.formatMessage({\n          id: \"IDS_DELETE\"\n        }),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 518,\n          columnNumber: 77\n        }\n      }, /*#__PURE__*/React.createElement(\"a\", {\n        onClick: () => props.deletetestparameter(parameter),\n        class: \"float-right mr-3\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 520,\n          columnNumber: 78\n        }\n      }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n        icon: faTrashAlt,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 521,\n          columnNumber: 85\n        }\n      }))))), isAdditionalInfoRequired && /*#__PURE__*/React.createElement(Col, {\n        md: 2,\n        className: \"pt-2\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 527,\n          columnNumber: 77\n        }\n      }, /*#__PURE__*/React.createElement(TestPopOver, {\n        intl: props.intl,\n        needIcon: true,\n        needPopoverTitleContent: true,\n        placement: \"left\",\n        stringList: parameter.hasOwnProperty('additionalInfo') && [parameter['additionalInfo']],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 528,\n          columnNumber: 81\n        }\n      }))))));\n    })))))));\n    return accordionMap;\n  }\n\n  function testCommentsAccordion(TestParameter) {\n    const accordionMap = new Map();\n    TestParameter.map(testParameterComments => accordionMap.set(testParameterComments.npkBtestparametercode, /*#__PURE__*/React.createElement(Col, {\n      md: \"12\",\n      testParameterComments: testParameterComments,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 608,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 609,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      className: \"d-flex justify-content-end pr-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 610,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Nav.Link, {\n      name: \"addtestparameter\",\n      className: \"add-txt-btn\",\n      testParameterComments: testParameterComments,\n      onClick: () => props.addComments(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 611,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faPlus,\n      testParameterComments: testParameterComments,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 614,\n        columnNumber: 33\n      }\n    }), \" \", /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_COMMENTS\",\n      defaultMessage: \"Add Test Comments\",\n      testParameterComments: testParameterComments,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 615,\n        columnNumber: 33\n      }\n    })))), /*#__PURE__*/React.createElement(DataGrid, {\n      key: \"testsectionkey\",\n      primaryKeyField: \"nresultusedmaterialcode\",\n      dataResult: props.masterData[\"testComments\"] && process(sortData(props.masterData[\"testComments\"][testParameterComments.npkBtestparametercode], 'descending', 'npKAsampletestcommentscode') || [], props.dataStateObject && props.dataStateObject[testParameterComments.npkBtestparametercode] ? props.dataStateObject[testParameterComments.npkBtestparametercode] : {\n        skip: 0,\n        take: 10\n      }),\n      dataState: props.dataStateObject && props.dataStateObject[testParameterComments.npkBtestparametercode] ? props.dataStateObject[testParameterComments.npkBtestparametercode] : {\n        skip: 0,\n        take: 10\n      },\n      dataStateChange: event => {\n        props.dataStateChange(event, testParameterComments.npkBtestparametercode);\n      },\n      extractedColumnList: fieldsForGrid,\n      controlMap: props.controlMap,\n      userRoleControlRights: props.userRoleControlRights,\n      pageable: true,\n      isActionRequired: true,\n      scrollable: 'scrollable',\n      hideColumnFilter: true,\n      selectedId: 0,\n      testParameterComments: testParameterComments,\n      deleteRecord: props.deletModalSite,\n      deleteParam: {\n        operation: \"delete\"\n      },\n      actionIcons: [{\n        title: props.intl.formatMessage({\n          id: \"IDS_DELETE\"\n        }),\n        controlname: \"faTrashAlt\",\n        hidden: false,\n        objectName: \"delete\",\n        onClick: props.deletModalSite\n      }],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 619,\n        columnNumber: 21\n      }\n    }))));\n    return accordionMap;\n  }\n\n  function reportCommentsAccordion(TestParameter) {\n    const accordionMap = new Map();\n    TestParameter.map(testParameterreportComments => accordionMap.set(testParameterreportComments.ntestgrouptestparametercode, /*#__PURE__*/React.createElement(Col, {\n      md: \"12\",\n      testParameterreportComments: testParameterreportComments,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 660,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 661,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      className: \"d-flex justify-content-end\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 662,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Nav.Link, {\n      name: \"deletetestparameter\",\n      className: \"add-txt-btn\",\n      testParameterreportComments: testParameterreportComments,\n      onClick: () => props.deleteModalTest(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 663,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faTrashAlt,\n      testParameterreportComments: testParameterreportComments,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 666,\n        columnNumber: 33\n      }\n    }), \" \", /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_DELETE\",\n      defaultMessage: \"Delete\",\n      testParameterreportComments: testParameterreportComments,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 667,\n        columnNumber: 33\n      }\n    })))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"actions-stripe\",\n      testParameterreportComments: testParameterreportComments,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 671,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"d-flex justify-content-end\",\n      testParameterreportComments: testParameterreportComments,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 672,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Nav.Link, {\n      name: \"addtestparameter\",\n      className: \"add-txt-btn\",\n      testParameterreportComments: testParameterreportComments,\n      onClick: () => props.addComments(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 673,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faPlus,\n      testParameterreportComments: testParameterreportComments,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 676,\n        columnNumber: 33\n      }\n    }), \" \", /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_ADDREPORTCOMMENTS\",\n      defaultMessage: \"Add Report Comments\",\n      testParameterreportComments: testParameterreportComments,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 677,\n        columnNumber: 33\n      }\n    })))), /*#__PURE__*/React.createElement(DataGrid, {\n      key: \"testsectionkey\",\n      primaryKeyField: \"nresultusedmaterialcode\",\n      dataResult: props.masterData[\"reportComments\"] && process(props.masterData[\"reportComments\"][testParameterreportComments.ntestgrouptestparametercode] || [], props.dataState ? props.dataState : {\n        skip: 0,\n        take: 10\n      }),\n      dataState: props.dataState ? props.dataState : {\n        skip: 0,\n        take: 10\n      },\n      dataStateChange: props.dataStateChange,\n      extractedColumnList: fieldsForGrid,\n      controlMap: props.controlMap,\n      userRoleControlRights: props.userRoleControlRights,\n      pageable: true,\n      isActionRequired: true,\n      scrollable: 'scrollable',\n      hideColumnFilter: true,\n      selectedId: 0,\n      testParameterComments: testParameterreportComments,\n      deleteRecord: props.deletModalSite,\n      deleteParam: {\n        operation: \"delete\"\n      },\n      actionIcons: [{\n        title: props.intl.formatMessage({\n          id: \"IDS_DELETE\"\n        }),\n        controlname: \"faTrashAlt\",\n        hidden: false,\n        objectName: \"delete\",\n        onClick: props.deletModalSite\n      }],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 682,\n        columnNumber: 21\n      }\n    }))));\n    return accordionMap;\n  }\n\n  function TabDetails() {\n    const resultTabMap = new Map();\n\n    if (props.addOutcomeList.length === 0) {\n      props.activeTabIndex == 1 ? resultTabMap.set(\"IDS_Test\", /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"actions-stripe\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 725,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"d-flex justify-content-end\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 726,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(Nav.Link, {\n        name: \"addtestparameter\",\n        onClick: () => props.addTest(\"IDS_Test\"),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 727,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n        icon: faPlus,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 729,\n          columnNumber: 37\n        }\n      }), \" \", /*#__PURE__*/React.createElement(FormattedMessage, {\n        id: \"IDS_Test\",\n        defaultMessage: \"Add Test\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 730,\n          columnNumber: 37\n        }\n      })))), props.masterData.testParameter && props.masterData.testParameter.length > 0 && /*#__PURE__*/React.createElement(CustomAccordion, {\n        key: \"parameteraccordion\",\n        clickIconGroup: true,\n        deleteAccordion: props.deleteModalTest,\n        accordionTitle: \"stestsynonym\",\n        accordionComponent: testParameterAccordion(props.masterData.testParameter),\n        inputParam: {\n          masterData: props.masterData,\n          userInfo: props.userInfo,\n          nFlag: 5\n        },\n        accordionClick: props.getOutcomeDetails,\n        accordionPrimaryKey: \"npkAtestparametercode\",\n        accordionObjectName: \"testParameter\",\n        selectedKey: props.masterData.selectedParameterRulesEngine ? props.masterData.selectedParameterRulesEngine.npkAtestparametercode : 0,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 735,\n          columnNumber: 29\n        }\n      }))) : props.activeTabIndex == 2 ? resultTabMap.set(\"IDS_COMMENTS\", /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"actions-stripe\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 752,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"d-flex justify-content-end\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 753,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(Nav.Link, {\n        name: \"addtestparameter\",\n        onClick: () => props.addTest(\"IDS_COMMENTS\"),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 754,\n          columnNumber: 37\n        }\n      }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n        icon: faPlus,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 756,\n          columnNumber: 41\n        }\n      }), \" \", /*#__PURE__*/React.createElement(FormattedMessage, {\n        id: \"IDS_Test\",\n        defaultMessage: \"Add Test\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 757,\n          columnNumber: 41\n        }\n      })))), props.masterData.testParameterComments && props.masterData.testParameterComments.length > 0 && /*#__PURE__*/React.createElement(CustomAccordion, {\n        key: \"parameteraccordion\",\n        clickIconGroup: true,\n        deleteAccordion: props.deleteModalTest,\n        accordionTitle: \"stestsynonym\",\n        accordionComponent: testCommentsAccordion(props.masterData.testParameterComments),\n        inputParam: {\n          masterData: props.masterData,\n          userInfo: props.userInfo,\n          nFlag: 5\n        },\n        accordionClick: props.getOutcomeDetails,\n        accordionPrimaryKey: \"npkBtestparametercode\",\n        accordionObjectName: \"testParameterComments\",\n        selectedKey: props.masterData.selectedParameterRulesEngine ? props.masterData.selectedParameterRulesEngine.npkBtestparametercode : 0,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 762,\n          columnNumber: 33\n        }\n      }))) : props.activeTabIndex == 3 ? resultTabMap.set(\"IDS_REPEAT\", /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"actions-stripe\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 779,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"d-flex justify-content-end\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 780,\n          columnNumber: 37\n        }\n      }, /*#__PURE__*/React.createElement(Nav.Link, {\n        name: \"addtestparameter\",\n        onClick: () => props.addTest(\"IDS_REPEAT\"),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 781,\n          columnNumber: 41\n        }\n      }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n        icon: faPlus,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 783,\n          columnNumber: 45\n        }\n      }), \" \", /*#__PURE__*/React.createElement(FormattedMessage, {\n        id: \"IDS_Test\",\n        defaultMessage: \"Add Test\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 784,\n          columnNumber: 45\n        }\n      })))), props.masterData.testRepeat && props.masterData.testRepeat.length > 0 && /*#__PURE__*/React.createElement(DataGrid, {\n        key: \"testsectionkey\",\n        primaryKeyField: \"nresultusedmaterialcode\",\n        dataResult: props.masterData[\"testRepeat\"] && process(sortData(props.masterData[\"testRepeat\"], 'descending', 'npkCtestparametercode') || [], props.dataStatetestRepeat ? props.dataStatetestRepeat : {\n          skip: 0,\n          take: 10\n        }),\n        dataState: props.dataStatetestRepeat ? props.dataStatetestRepeat : {\n          skip: 0,\n          take: 10\n        },\n        dataStateChange: event => {\n          props.dataStateChangetestRepeat(event);\n        },\n        extractedColumnList: fieldsForGrid,\n        controlMap: props.controlMap,\n        userRoleControlRights: props.userRoleControlRights,\n        pageable: true,\n        isActionRequired: true,\n        scrollable: 'scrollable',\n        hideColumnFilter: true,\n        selectedId: 0,\n        testRepeat: props.masterData.testRepeat,\n        deleteRecord: props.deleteModalTest,\n        deleteParam: {\n          operation: \"delete\"\n        },\n        actionIcons: [{\n          title: props.intl.formatMessage({\n            id: \"IDS_DELETE\"\n          }),\n          controlname: \"faTrashAlt\",\n          hidden: false,\n          objectName: \"delete\",\n          onClick: props.deleteModalTest\n        }],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 789,\n          columnNumber: 37\n        }\n      }))) : props.activeTabIndex == 4 ? resultTabMap.set(\"IDS_ENFORCERESULT\", /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"actions-stripe\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 823,\n          columnNumber: 37\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"d-flex justify-content-end\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 824,\n          columnNumber: 41\n        }\n      }, /*#__PURE__*/React.createElement(Nav.Link, {\n        name: \"addtestparameter\",\n        onClick: () => props.addTest(\"IDS_ENFORCERESULT\"),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 825,\n          columnNumber: 45\n        }\n      }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n        icon: faPlus,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 827,\n          columnNumber: 49\n        }\n      }), \" \", /*#__PURE__*/React.createElement(FormattedMessage, {\n        id: \"IDS_Test\",\n        defaultMessage: \"Add Test\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 828,\n          columnNumber: 49\n        }\n      })))), props.masterData.testenforceTests && props.masterData.testenforceTests.length > 0 && /*#__PURE__*/React.createElement(DataGrid, {\n        key: \"testsectionkey\",\n        primaryKeyField: \"nresultusedmaterialcode\",\n        dataResult: props.masterData[\"testenforceTests\"] && process(sortData(props.masterData[\"testenforceTests\"], 'descending', 'npkDtestparametercode') || [], props.dataStatetestEnforce ? props.dataStatetestEnforce : {\n          skip: 0,\n          take: 10\n        }),\n        dataState: props.dataStatetestEnforce ? props.dataStatetestEnforce : {\n          skip: 0,\n          take: 10\n        },\n        dataStateChange: event => {\n          props.dataStateChangetestEnforce(event);\n        },\n        extractedColumnList: fieldsForGrid,\n        controlMap: props.controlMap,\n        userRoleControlRights: props.userRoleControlRights,\n        pageable: true,\n        isActionRequired: true,\n        scrollable: 'scrollable',\n        hideColumnFilter: true,\n        selectedId: 0,\n        testenforceTests: props.masterData.testenforceTests,\n        deleteRecord: props.deleteModalTest,\n        deleteParam: {\n          operation: \"delete\"\n        },\n        actionIcons: [{\n          title: props.intl.formatMessage({\n            id: \"IDS_DELETE\"\n          }),\n          controlname: \"faTrashAlt\",\n          hidden: false,\n          objectName: \"delete\",\n          onClick: props.deleteModalTest\n        }],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 833,\n          columnNumber: 41\n        }\n      }))) : resultTabMap.set(\"IDS_REPORTCOMMENTS\", /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"actions-stripe\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 867,\n          columnNumber: 37\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"d-flex justify-content-end\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 868,\n          columnNumber: 41\n        }\n      }, /*#__PURE__*/React.createElement(Nav.Link, {\n        name: \"addtestparameter\",\n        onClick: () => props.addTest(),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 869,\n          columnNumber: 45\n        }\n      }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n        icon: faPlus,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 871,\n          columnNumber: 49\n        }\n      }), \" \", /*#__PURE__*/React.createElement(FormattedMessage, {\n        id: \"IDS_Test\",\n        defaultMessage: \"Add Test\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 872,\n          columnNumber: 49\n        }\n      })))), props.masterData.testParameterreportComments && props.masterData.testParameterreportComments.length > 0 && /*#__PURE__*/React.createElement(CustomAccordion, {\n        key: \"parameteraccordion\",\n        accordionTitle: \"stestparametersynonym\",\n        accordionComponent: reportCommentsAccordion(props.masterData.testParameterreportComments),\n        inputParam: {\n          masterData: props.masterData,\n          userInfo: props.userInfo,\n          nFlag: 5\n        },\n        accordionClick: props.getOutcomeDetails,\n        accordionPrimaryKey: \"ntestgrouptestparametercode\",\n        accordionObjectName: \"testParameterreportComments\",\n        selectedKey: props.masterData.selectedParameterRulesEngine ? props.masterData.selectedParameterRulesEngine.ntestgrouptestparametercode : 0,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 877,\n          columnNumber: 41\n        }\n      })));\n    }\n\n    return resultTabMap;\n  }\n\n  function testfilter(list) {\n    let activeTabIndex = props.activeTabIndex;\n\n    if (props.masterData.selectedParameterRulesEngine) {\n      let dynamicList = activeTabIndex === 2 ? props.masterData[\"testComments\"] && props.masterData[\"testComments\"][props.masterData.selectedParameterRulesEngine.ntestgrouptestparametercode] : props.masterData[\"reportComments\"] && props.masterData[\"reportComments\"][props.masterData.selectedParameterRulesEngine.ntestgrouptestparametercode];\n\n      if (dynamicList !== undefined) {\n        list = list.filter(({\n          value\n        }) => !dynamicList.some(x => x.nsampletestcommentscode == value));\n      }\n    }\n\n    return list;\n  }\n\n  const mandatoryFields = props.action === 'IDS_SAVERULEMODAL' ? [{\n    \"idsName\": \"IDS_RULESENGINENAME\",\n    \"dataField\": \"srulename\",\n    \"mandatory\": true,\n    \"mandatoryLabel\": \"IDS_ENTER\",\n    \"controlType\": \"file\"\n  } //, \n  //  { \"idsName\": \"IDS_SORTORDER\", \"dataField\": \"nruleexecorder\", \"mandatory\": true, \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"file\" }\n  ] : props.activeTabIndex === 1 ? props.action === 'IDS_ADDTEST' ? [{\n    \"idsName\": \"IDS_TESTNAME\",\n    \"dataField\": \"ntestgrouptestcode\",\n    \"mandatory\": true,\n    \"mandatoryLabel\": \"IDS_CHOOSE\",\n    \"controlType\": \"file\"\n  } // { \"idsName\": \"IDS_FROMSITE\", \"dataField\": \"nfromsitecode\", \"mandatory\": true, \"mandatoryLabel\": \"IDS_CHOOSE\", \"controlType\": \"file\" },\n  // { \"idsName\": \"IDS_TOSITE\", \"dataField\": \"ntositecode\", \"mandatory\": true, \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" }\n  ] : props.action === 'IDS_ADDPARAMETER' ? \"\" : [{\n    \"idsName\": \"IDS_FROMSITE\",\n    \"dataField\": \"nfromsitecode\",\n    \"mandatory\": true,\n    \"mandatoryLabel\": \"IDS_CHOOSE\",\n    \"controlType\": \"file\"\n  }, {\n    \"idsName\": \"IDS_TOSITE\",\n    \"dataField\": \"ntositecode\",\n    \"mandatory\": true,\n    \"mandatoryLabel\": \"IDS_SELECT\",\n    \"controlType\": \"selectbox\"\n  }] : props.activeTabIndex === 2 ? [{\n    \"idsName\": \"IDS_TESTNAME\",\n    \"dataField\": \"ntestgrouptestcode\",\n    \"mandatory\": true,\n    \"mandatoryLabel\": \"IDS_CHOOSE\",\n    \"controlType\": \"file\"\n  }, {\n    \"idsName\": \"IDS_COMMENTTYPE\",\n    \"dataField\": \"ncommenttypecode\",\n    \"width\": \"200px\"\n  }, {\n    \"idsName\": \"IDS_COMMENTSUBTYPE\",\n    \"dataField\": \"ncommentsubtypecode\",\n    \"width\": \"200px\"\n  }, props.isneedsgeneralcomments === true ? {\n    \"idsName\": \"IDS_GENERALCOMMENTS\",\n    \"dataField\": \"sgeneralcomments\",\n    \"width\": \"200px\"\n  } : {\n    \"idsName\": \"IDS_PREFINEDCOMMENTS\",\n    \"dataField\": \"nsampletestcommentscode\",\n    \"width\": \"200px\"\n  }] : props.activeTabIndex === 3 ? [{\n    \"idsName\": \"IDS_TESTNAME\",\n    \"dataField\": \"ntestgrouptestcode\",\n    \"mandatory\": true,\n    \"mandatoryLabel\": \"IDS_CHOOSE\",\n    \"controlType\": \"file\"\n  }] : props.activeTabIndex === 4 ? [{\n    \"idsName\": \"IDS_TESTNAME\",\n    \"dataField\": \"ntestgrouptestcode\",\n    \"mandatory\": true,\n    \"mandatoryLabel\": \"IDS_CHOOSE\",\n    \"controlType\": \"file\"\n  }, {\n    \"idsName\": \"IDS_OPTIONALPARAMETERS\",\n    \"dataField\": \"ntestgrouptestparametercode\",\n    \"mandatory\": true,\n    \"mandatoryLabel\": \"IDS_CHOOSE\",\n    \"controlType\": \"file\"\n  }, {\n    \"idsName\": \"IDS_RESULTFLAG\",\n    \"dataField\": \"ngradecode\",\n    \"mandatory\": true,\n    \"mandatoryLabel\": \"IDS_CHOOSE\",\n    \"controlType\": \"file\"\n  }, {\n    \"idsName\": \"IDS_RESULTS\",\n    \"dataField\": \"senforceresult\",\n    \"mandatory\": true,\n    \"mandatoryLabel\": \"IDS_ENTER\",\n    \"controlType\": \"file\"\n  }] : \"\";\n  return /*#__PURE__*/React.createElement(\"div\", {\n    class: \"modal-inner-content\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 939,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    class: \"row margin-top-negative-1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 940,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    class: \"p-0 col-md-12\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 941,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    class: \"vertical-tab-top popup rules-engine-add-rule\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 942,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Col, {\n    className: `tab-left-area p-0  ${props.activeTabIndex ? 'active' : \"\"} ${props.enablePropertyPopup ? 'active-popup' : \"\"}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 945,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"center-area-wrap vertical-tab border-0 mr-0 popup-fixed-center-headed-full-width\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 947,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"center-area mt-3 mb-0 mx-4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 948,\n      columnNumber: 37\n    }\n  }, /*#__PURE__*/React.createElement(Row, {\n    className: \"d-flex pt-0\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 949,\n      columnNumber: 41\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    md: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 950,\n      columnNumber: 45\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    onClick: () => props.addGroup(\"views\"),\n    className: \"mr-1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 951,\n      columnNumber: 49\n    }\n  }, '+', \" \", /*#__PURE__*/React.createElement(FormattedMessage, {\n    id: \"IDS_GROUP\",\n    defaultMessage: \"Group\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 952,\n      columnNumber: 59\n    }\n  })), /*#__PURE__*/React.createElement(Button, {\n    onClick: () => props.resetRule(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 954,\n      columnNumber: 49\n    }\n  }, /*#__PURE__*/React.createElement(FormattedMessage, {\n    id: \"IDS_RESET\",\n    defaultMessage: \"Reset\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 955,\n      columnNumber: 53\n    }\n  })))), /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 959,\n      columnNumber: 41\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    md: 12,\n    className: \"ml-0 mr-0\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 960,\n      columnNumber: 45\n    }\n  }, props.addGroupList.length > 0 ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(BuilderBorder, {\n    className: \"border-0 mb-0\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 964,\n      columnNumber: 57\n    }\n  }, \"    \", createGroupRules(), \"   \")) : /*#__PURE__*/React.createElement(React.Fragment, null)))))), /*#__PURE__*/React.createElement(\"div\", {\n    md: 6,\n    className: `${props.enablePropertyPopup ? 'active-popup' : \"\"} vertical-tab vertical-tab-expand ${props.activeTabIndex ? 'active' : \"\"}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 974,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: `${props.enablePropertyPopup ? 'active-popup' : \"\"} vertical-tab-content pager_wrap wrap-class ${props.activeTabIndex ? 'active' : \"\"}`,\n    style: {\n      width: props.enablePropertyPopup ? props.propertyPopupWidth + '%' : \"\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 976,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: ` vertical-tab-close ${props.activeTabIndex ? 'active' : \"\"}`,\n    onClick: () => props.changePropertyView(0),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 978,\n      columnNumber: 37\n    }\n  }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n    icon: faChevronRight,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 979,\n      columnNumber: 104\n    }\n  }), \" \"), /*#__PURE__*/React.createElement(\"div\", {\n    className: ` vertical-tab-content-common  ${props.activeTabIndex && props.activeTabIndex ? 'active' : \"\"}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 980,\n      columnNumber: 37\n    }\n  }, /*#__PURE__*/React.createElement(\"h4\", {\n    className: \"inner_h4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 982,\n      columnNumber: 41\n    }\n  }, props.intl.formatMessage({\n    id: \"IDS_OUTCOME\"\n  })), props.activeTabIndex && props.activeTabIndex ? /*#__PURE__*/React.createElement(CustomTabs, {\n    activeKey: props.activeTestTab,\n    tabDetail: TabDetails(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 987,\n      columnNumber: 45\n    }\n  }) : \"\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"tab-head\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 993,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 994,\n      columnNumber: 37\n    }\n  }, /*#__PURE__*/React.createElement(\"li\", {\n    className: `${props.activeTabIndex && props.activeTabIndex == 1 ? 'active' : \"\"}`,\n    onClick: () => props.changePropertyView(1),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 995,\n      columnNumber: 41\n    }\n  }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n    icon: faPlus,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 997,\n      columnNumber: 45\n    }\n  }), /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 998,\n      columnNumber: 45\n    }\n  }, props.intl.formatMessage({\n    id: \"IDS_Test\"\n  }))), /*#__PURE__*/React.createElement(\"li\", {\n    className: `${props.activeTabIndex && props.activeTabIndex == 2 ? 'active' : \"\"}`,\n    onClick: () => props.changePropertyView(2),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1002,\n      columnNumber: 41\n    }\n  }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n    icon: faComments,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1004,\n      columnNumber: 45\n    }\n  }), /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1005,\n      columnNumber: 45\n    }\n  }, props.intl.formatMessage({\n    id: \"IDS_COMMENTS\"\n  }))), /*#__PURE__*/React.createElement(\"li\", {\n    className: `${props.activeTabIndex && props.activeTabIndex == 3 ? 'active' : \"\"}`,\n    onClick: () => props.changePropertyView(3),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1009,\n      columnNumber: 41\n    }\n  }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n    icon: faRecycle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1011,\n      columnNumber: 45\n    }\n  }), /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1012,\n      columnNumber: 45\n    }\n  }, props.intl.formatMessage({\n    id: \"IDS_REPEAT\"\n  }))), /*#__PURE__*/React.createElement(\"li\", {\n    className: `${props.activeTabIndex && props.activeTabIndex == 4 ? 'active' : \"\"}`,\n    onClick: () => props.changePropertyView(4),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1016,\n      columnNumber: 41\n    }\n  }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n    icon: faFlag,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1018,\n      columnNumber: 45\n    }\n  }), /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1019,\n      columnNumber: 45\n    }\n  }, props.intl.formatMessage({\n    id: \"IDS_ENFORCERESULT\"\n  })))))), props.modalParameterPopup ? /*#__PURE__*/React.createElement(SlideOutModal, {\n    show: props.modalParameterPopup,\n    closeModal: props.closeModalShow //operation={props.action}\n    ,\n    esign: false,\n    inputParam: {},\n    screenName: 'IDS_RESULTENTRY',\n    onSaveClick: props.modalsaveClick //hideSave={this.props.Login.screenName === \"IDS_VIEWRULE\" || this.props.Login.screenName === \"IDS_VIEWOUTCOME\" || this.props.Login.screenName === \"IDS_SUBCODERESULT\" ? true : false}\n    // size={\"lg\"}\n    ,\n    selectedRecord: props.selectedRecord || {},\n    addComponent: /*#__PURE__*/React.createElement(TestGroupResultEntry, {\n      onKeyPress: onKeyPress,\n      parameterResults: props.selectedRecord.ParameterRulesEngine || [],\n      screenName: 'IDS_ADDTEST',\n      PredefinedValues: props.PredefinedValues,\n      onResultInputChange: props.onResultInputChange,\n      onGradeEvent: props.onGradeEvent,\n      gradeValues: props.gradeValues || [],\n      selectedResultGrade: props.selectedRecord.selectedResultGrade || [],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1151,\n        columnNumber: 45\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1139,\n      columnNumber: 37\n    }\n  }) : props.openModalPopup && /*#__PURE__*/React.createElement(ModalShow, {\n    modalShow: true // size={props.activeTabIndex === 1 && (props.action === 'IDS_ADDPARAMETER' || props.action === 'IDS_ADDTEST') ? 'lg' : \"\"}\n    ,\n    modalTitle: props.action === 'IDS_ADDPARAMETER' ? props.intl.formatMessage({\n      id: 'IDS_ADDPARAMETER'\n    }) : props.action === 'IDS_SAVERULEMODAL' ? 'IDS_RULESENGINENAME' : props.action === 'IDS_ADDREPORTCOMMENTS' ? props.intl.formatMessage({\n      id: 'IDS_ADDREPORTCOMMENTS'\n    }) : props.action === 'IDS_ADDTESTCOMMENTS' ? props.intl.formatMessage({\n      id: 'IDS_ADDTESTCOMMENTS'\n    }) : props.action === 'IDS_ADDTEST' ? props.activeTabIndex == 3 ? props.intl.formatMessage({\n      id: 'IDS_ADDREPEATTEST'\n    }) : props.intl.formatMessage({\n      id: 'IDS_ADDTEST'\n    }) : props.intl.formatMessage({\n      id: 'IDS_ADDOUTSOURCESITE'\n    }),\n    closeModal: props.closeModalShow,\n    onSaveClick: props.action === 'IDS_SAVERULEMODAL' ? props.save : props.modalsaveClick // validateEsign={this.validateEsign}\n    ,\n    selectedRecord: props.selectedRecord,\n    mandatoryFields: mandatoryFields,\n    modalBody: props.openmodalsavePopup === true ? /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1184,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1185,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(FormInput, {\n      label: props.intl.formatMessage({\n        id: \"IDS_RULESENGINENAME\"\n      }),\n      name: `srulename`,\n      placeholder: props.intl.formatMessage({\n        id: \"IDS_RULESENGINENAME\"\n      }),\n      type: \"text\",\n      maxLength: 100,\n      required: false,\n      isMandatory: true,\n      value: props.selectedRecord[\"srulename\"] || \"\",\n      onChange: event => props.onInputChange(event),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1186,\n        columnNumber: 57\n      }\n    }))) : props.activeTabIndex == 1 ? /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1218,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1219,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1220,\n        columnNumber: 61\n      }\n    }, /*#__PURE__*/React.createElement(FormSelectSearch, {\n      formLabel: props.intl.formatMessage({\n        id: \"IDS_TESTNAME\"\n      }),\n      isSearchable: true,\n      name: \"ntestgrouptestcode\",\n      showOption: true,\n      options: props.testInitiateTestCombo || [],\n      optionId: \"ntestgrouptestcode\",\n      optionValue: \"stestparametersynonym\",\n      value: props.selectedRecord[\"ntestgrouptestcode\"] && props.selectedRecord[\"ntestgrouptestcode\"] || \"\",\n      onChange: value => props.onmodalComboChange(value, 'ntestgrouptestcode'),\n      isMandatory: true,\n      isDisabled: props.action === 'IDS_ADDTEST' ? props.modalParameterPopup ? true : false : true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1221,\n        columnNumber: 65\n      }\n    })), props.action === 'IDS_ADDPARAMETER' || props.action === 'IDS_ADDTEST' ?\n    /*#__PURE__*/\n    // <div className=\"center-area-wrap vertical-tab border-0 mr-0 popup-fixed-center-headed-full-width\">\n    React.createElement(TestGroupResultEntry, {\n      parameterResults: props.selectedRecord.ParameterRulesEngine || [],\n      screenName: 'IDS_ADDTEST',\n      PredefinedValues: props.PredefinedValues,\n      onResultInputChange: props.onResultInputChange,\n      onGradeEvent: props.onGradeEvent,\n      gradeValues: props.gradeValues || [],\n      selectedResultGrade: props.selectedRecord.selectedResultGrade || [],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1256,\n        columnNumber: 69\n      }\n    }) // </div>\n    : \"\"), (props.action === 'IDS_ADDSITE' // || props.action === 'IDS_ADDTEST'\n    ? true : false) ? /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1290,\n        columnNumber: 61\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1291,\n        columnNumber: 65\n      }\n    }, /*#__PURE__*/React.createElement(FormSelectSearch, {\n      formLabel: props.intl.formatMessage({\n        id: \"IDS_FROMSITE\"\n      }) // formGroupClassName=\"remove-floating-label-margin\"\n      ,\n      isSearchable: true,\n      name: \"nfromsitecode\",\n      showOption: true,\n      options: props.siteList || [],\n      optionId: \"nfromsitecode\",\n      optionValue: \"ssitename\",\n      isMandatory: true,\n      value: props.selectedRecord[\"nfromsitecode\"] && props.selectedRecord[\"nfromsitecode\"] || \"\",\n      onChange: value => props.onmodalComboChange(value, 'nfromsitecode') //  isMandatory={true}\n      ,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1292,\n        columnNumber: 69\n      }\n    })), /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1307,\n        columnNumber: 65\n      }\n    }, /*#__PURE__*/React.createElement(FormSelectSearch, {\n      formLabel: props.intl.formatMessage({\n        id: \"IDS_TOSITE\"\n      }) //    formGroupClassName=\"remove-floating-label-margin\"\n      ,\n      isSearchable: true,\n      name: \"ntositecode\",\n      showOption: true,\n      options: props.siteList || [],\n      optionId: \"ntositecode\",\n      optionValue: \"ssitename\",\n      isMandatory: true,\n      value: props.selectedRecord[\"ntositecode\"] && props.selectedRecord[\"ntositecode\"] || \"\",\n      onChange: value => props.onmodalComboChange(value, 'ntositecode') //  isMandatory={true}\n      ,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1308,\n        columnNumber: 69\n      }\n    }))) : \"\") : props.activeTabIndex == 2 ? /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1328,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1329,\n        columnNumber: 61\n      }\n    }, /*#__PURE__*/React.createElement(FormSelectSearch, {\n      formLabel: props.intl.formatMessage({\n        id: \"IDS_TESTNAME\"\n      }),\n      isSearchable: true,\n      name: \"ntestgrouptestcode\",\n      showOption: true,\n      options: props.testCommentsTestCombo || [],\n      optionId: \"ntestgrouptestcode\",\n      optionValue: \"stestparametersynonym\",\n      value: props.selectedRecord[\"ntestgrouptestcode\"] && props.selectedRecord[\"ntestgrouptestcode\"] || \"\",\n      onChange: value => props.onmodalComboChange(value, 'ntestgrouptestcode'),\n      isMandatory: true,\n      isDisabled: props.action === 'IDS_ADDTEST' ? false : true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1330,\n        columnNumber: 65\n      }\n    })), /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1344,\n        columnNumber: 61\n      }\n    }, /*#__PURE__*/React.createElement(FormSelectSearch, {\n      formLabel: props.intl.formatMessage({\n        id: \"IDS_COMMENTTYPE\"\n      }),\n      isSearchable: true,\n      name: \"ncommenttypecode\",\n      showOption: true,\n      options: props.CommentType || [],\n      optionId: \"ncommenttypecode\",\n      optionValue: \"scommenttype\",\n      value: props.selectedRecord[\"ncommenttypecode\"] && props.selectedRecord[\"ncommenttypecode\"] || \"\",\n      onChange: value => props.onmodalComboChange(value, 'ncommenttypecode'),\n      isMandatory: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1345,\n        columnNumber: 65\n      }\n    })), /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1358,\n        columnNumber: 61\n      }\n    }, /*#__PURE__*/React.createElement(FormSelectSearch, {\n      formLabel: props.intl.formatMessage({\n        id: \"IDS_COMMENTSUBTYPE\"\n      }),\n      isSearchable: true,\n      name: \"ncommentsubtypecode\",\n      showOption: true,\n      options: props.CommentSubType || [],\n      optionId: \"ncommentsubtypecode\",\n      optionValue: \"scommentsubtype\",\n      value: props.selectedRecord[\"ncommentsubtypecode\"] && props.selectedRecord[\"ncommentsubtypecode\"] || \"\",\n      onChange: value => props.onmodalComboChange(value, 'ncommentsubtypecode'),\n      isMandatory: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1359,\n        columnNumber: 65\n      }\n    })), props.selectedRecord[\"ncommentsubtypecode\"] ? props.isneedsgeneralcomments === true ? /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1374,\n        columnNumber: 69\n      }\n    }, /*#__PURE__*/React.createElement(FormTextarea, {\n      name: \"sgeneralcomments\",\n      label: props.intl.formatMessage({\n        id: \"IDS_GENERALCOMMENTS\"\n      }),\n      type: \"text\",\n      value: props.selectedRecord && props.selectedRecord['sgeneralcomments'] || \"\" // isMandatory={control.mandatory}\n      // required={control.mandatory}\n      ,\n      onChange: event => props.onInputChange(event, 1),\n      rows: \"2\",\n      maxLength: \"255\",\n      isDisabled: false,\n      isMandatory: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1375,\n        columnNumber: 73\n      }\n    })) : /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1388,\n        columnNumber: 78\n      }\n    }, /*#__PURE__*/React.createElement(FormSelectSearch, {\n      formLabel: props.intl.formatMessage({\n        id: \"IDS_PREDEFINEDNAME\"\n      }),\n      isSearchable: true,\n      name: \"nsampletestcommentscode\",\n      showOption: true,\n      options: props.predefcomments || [],\n      optionId: \"nsampletestcommentscode\",\n      optionValue: \"spredefinedname\",\n      value: props.selectedRecord[\"nsampletestcommentscode\"] && props.selectedRecord[\"nsampletestcommentscode\"] || \"\",\n      onChange: value => props.onmodalComboChange(value, 'nsampletestcommentscode'),\n      isMandatory: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1389,\n        columnNumber: 73\n      }\n    }), /*#__PURE__*/React.createElement(FormTextarea, {\n      formGroupClassName: \"remove-floating-label-margin\",\n      label: props.intl.formatMessage({\n        id: \"IDS_DESCRIPTION\"\n      }),\n      name: `sdescription`,\n      type: \"text\",\n      required: false,\n      isMandatory: true,\n      value: props.selectedRecord[\"sdescription\"] && props.selectedRecord[\"sdescription\"] || \"\",\n      onChange: event => props.onInputChange(event),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1411,\n        columnNumber: 73\n      }\n    })) : \"\") : props.activeTabIndex == 3 ? /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1427,\n        columnNumber: 61\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1428,\n        columnNumber: 65\n      }\n    }, /*#__PURE__*/React.createElement(FormSelectSearch, {\n      formLabel: props.intl.formatMessage({\n        id: \"IDS_TESTNAME\"\n      }),\n      isSearchable: true,\n      name: \"ntestgrouptestcode\",\n      showOption: true,\n      options: props.testRepeatTestCombo || [],\n      optionId: \"ntestgrouptestcode\",\n      optionValue: \"stestparametersynonym\",\n      value: props.selectedRecord[\"ntestgrouptestcode\"] && props.selectedRecord[\"ntestgrouptestcode\"] || \"\",\n      onChange: value => props.onmodalComboChange(value, 'ntestgrouptestcode'),\n      isMandatory: true,\n      isDisabled: props.action === 'IDS_ADDTEST' ? false : true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1429,\n        columnNumber: 69\n      }\n    })), /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1443,\n        columnNumber: 65\n      }\n    }, /*#__PURE__*/React.createElement(FormNumericInput, {\n      name: 'nrepeatcountno',\n      label: props.intl.formatMessage({\n        id: \"IDS_REPEATCOUNT\"\n      }),\n      placeholder: props.intl.formatMessage({\n        id: \"IDS_REPEATCOUNT\"\n      }),\n      value: props.selectedRecord[\"nrepeatcountno\"] ? props.selectedRecord[\"nrepeatcountno\"] : \"\",\n      type: \"text\",\n      strict: true,\n      maxLength: 10,\n      noStyle: true,\n      onChange: event => props.onRuleNumericInputOnChange(event, 'nrepeatcountno') //  precision={2}\n      ,\n      min: 0,\n      max: 9,\n      className: \"form-control\",\n      isMandatory: false,\n      required: false,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1444,\n        columnNumber: 69\n      }\n    }))) : props.activeTabIndex == 4 ? /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1463,\n        columnNumber: 65\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1464,\n        columnNumber: 69\n      }\n    }, /*#__PURE__*/React.createElement(FormSelectSearch, {\n      formLabel: props.intl.formatMessage({\n        id: \"IDS_TESTNAME\"\n      }),\n      isSearchable: true,\n      name: \"ntestgrouptestcode\",\n      showOption: true,\n      options: props.testenforceTestCombo || [],\n      optionId: \"ntestgrouptestcode\",\n      optionValue: \"stestparametersynonym\",\n      value: props.selectedRecord[\"ntestgrouptestcode\"] && props.selectedRecord[\"ntestgrouptestcode\"] || \"\",\n      onChange: value => props.onmodalComboChange(value, 'ntestgrouptestcode'),\n      isMandatory: true,\n      isDisabled: props.action === 'IDS_ADDTEST' ? false : true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1465,\n        columnNumber: 73\n      }\n    })), /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1479,\n        columnNumber: 69\n      }\n    }, /*#__PURE__*/React.createElement(FormSelectSearch, {\n      formLabel: props.intl.formatMessage({\n        id: \"IDS_OPTIONALPARAMETERS\"\n      }),\n      isSearchable: true,\n      name: \"ntestgrouptestparametercode\",\n      showOption: true,\n      options: props.testGroupTestParameterRulesEngine || [],\n      optionId: \"ntestgrouptestparametercode\",\n      optionValue: \"stestparametersynonym\",\n      value: props.selectedRecord[\"ntestgrouptestparametercode\"] && props.selectedRecord[\"ntestgrouptestparametercode\"] || \"\",\n      onChange: value => props.onmodalComboChange(value, 'ntestgrouptestparametercode'),\n      isMandatory: true,\n      isDisabled: false,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1480,\n        columnNumber: 73\n      }\n    })), /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1494,\n        columnNumber: 69\n      }\n    }, /*#__PURE__*/React.createElement(FormTextarea, {\n      name: \"senforceresult\",\n      label: props.intl.formatMessage({\n        id: \"IDS_RESULTS\"\n      }),\n      placeholder: props.intl.formatMessage({\n        id: \"IDS_RESULTS\"\n      }),\n      value: props.selectedRecord ? props.selectedRecord[\"senforceresult\"] : \"\",\n      rows: \"2\",\n      isMandatory: true,\n      required: false,\n      maxLength: 255,\n      onChange: event => props.onInputChange(event, 1),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1495,\n        columnNumber: 73\n      }\n    })), /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1507,\n        columnNumber: 69\n      }\n    }, /*#__PURE__*/React.createElement(FormSelectSearch, {\n      formLabel: props.intl.formatMessage({\n        id: \"IDS_RESULTFLAG\"\n      }),\n      isSearchable: true,\n      name: \"ngradecode\",\n      showOption: true,\n      options: props.GradeList || [],\n      optionId: \"ngradecode\",\n      optionValue: \"sgradename\",\n      value: props.selectedRecord[\"ngradecode\"] && props.selectedRecord[\"ngradecode\"] || \"\",\n      onChange: value => props.onmodalComboChange(value, 'ngradecode'),\n      isMandatory: true,\n      isDisabled: false,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1508,\n        columnNumber: 73\n      }\n    }))) : \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1165,\n      columnNumber: 37\n    }\n  }))))));\n};\n\nexport default injectIntl(AddTestGroupRule);","map":{"version":3,"sources":["E:/WorkingFolder/React_Postgres/ALPD/branches/SOURCE-513-PROD/QuaLISWeb/src/pages/testgroup/AddTestGroupRule.js"],"names":["faAddressBook","faChevronRight","faComment","faCommentMedical","faComments","faCommentsDollar","faEye","faFlag","faGripVertical","faPlay","faPlus","faRecycle","faTrashAlt","FontAwesomeIcon","React","Button","Card","Col","Form","ListGroup","Media","Nav","Row","process","CustomAccordion","AtTableWrap","FormControlStatic","FontIconWrap","ListWrapper","FormattedMessage","injectIntl","FormSelectSearch","FormInput","BuilderBorder","ContionalButton","DeleteRule","CustomTabs","ColumnType","parameterType","transactionStatus","FormTextarea","stringOperatorData","conditionalOperatorData","numericOperatorData","joinConditionData","aggregateFunction","orderByList","CustomSwitch","DateTimePicker","FormCheckbox","DataGrid","FormMultiSelect","SplitterLayout","ModalShow","FormNumericInput","sortData","TestGroupResultEntry","ProductList","ContactHeader","HeaderText","ClientList","SlideOutModal","TestPopOver","MediaLabel","AddTestGroupRule","props","fieldsForGrid","activeTabIndex","customStyle","createRules","items","groupIndex","design","console","log","selectedRecord","Array","map","data","index","stringOperators","push","intl","formatMessage","id","deleteRule","rulesOption","value","onRuleChange","resultTypeList","onMasterDataChange","NUMERIC","onSymbolChange","PREDEFINED","valuemember","DiagnosticCaseList","GradeList","PredefinedParameterOptions","length","displaymember","CHARACTER","event","onRuleInputChange","onRuleNumericInputOnChange","onKeyPress","paremterResultcode","keyCode","i","target","form","elements","parseInt","focus","preventDefault","createGroupRules","indexCount","addGroupList","needmasterdata","columntype","TEXTINPUT","temp","filter","item","symbolType","onConditionClick","addRule","testParameterAccordion","TestParameter","accordionMap","Map","testParameter","set","npkAtestparametercode","ParameterRulesEngine","onInputSwitchChange","masterData","selectedParameterRulesEngine","nneedsample","addParameter","parameter","predefindex","isAdditionalInfoRequired","hasOwnProperty","undefined","sparametersynonym","sfinal","deletetestparameter","testCommentsAccordion","testParameterComments","npkBtestparametercode","addComments","dataStateObject","skip","take","dataStateChange","controlMap","userRoleControlRights","deletModalSite","operation","title","controlname","hidden","objectName","onClick","reportCommentsAccordion","testParameterreportComments","ntestgrouptestparametercode","deleteModalTest","dataState","TabDetails","resultTabMap","addOutcomeList","addTest","userInfo","nFlag","getOutcomeDetails","testRepeat","dataStatetestRepeat","dataStateChangetestRepeat","testenforceTests","dataStatetestEnforce","dataStateChangetestEnforce","testfilter","list","dynamicList","some","x","nsampletestcommentscode","mandatoryFields","action","isneedsgeneralcomments","enablePropertyPopup","addGroup","resetRule","width","propertyPopupWidth","changePropertyView","activeTestTab","modalParameterPopup","closeModalShow","modalsaveClick","PredefinedValues","onResultInputChange","onGradeEvent","gradeValues","selectedResultGrade","openModalPopup","save","openmodalsavePopup","onInputChange","testInitiateTestCombo","onmodalComboChange","siteList","testCommentsTestCombo","CommentType","CommentSubType","predefcomments","testRepeatTestCombo","testenforceTestCombo","testGroupTestParameterRulesEngine"],"mappings":"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","sourcesContent":["import { faAddressBook, faChevronRight, faComment, faCommentMedical, faComments, faCommentsDollar, faEye, faFlag, faGripVertical, faPlay, faPlus, faRecycle, faTrashAlt } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React from 'react';\r\nimport { Button, Card, Col, Form, ListGroup, Media, Nav, Row } from 'react-bootstrap';\r\nimport { process } from '@progress/kendo-data-query';\r\nimport CustomAccordion from '../../components/custom-accordion/custom-accordion.component';\r\nimport { AtTableWrap, FormControlStatic, FontIconWrap } from '../../components/data-grid/data-grid.styles';\r\nimport { ListWrapper } from '../../components/client-group.styles';\r\n\r\nimport { FormattedMessage, injectIntl } from 'react-intl';\r\nimport FormSelectSearch from '../../components/form-select-search/form-select-search.component';\r\nimport FormInput from '../../components/form-input/form-input.component';\r\nimport { BuilderBorder, ContionalButton, DeleteRule } from '../configurationmaster/RuleEngineSqlbuilder.styled';\r\nimport '../../assets/styles/querybuilder.css';\r\n\r\nimport CustomTabs from '../../components/custom-tabs/custom-tabs.component';\r\n\r\nimport { ColumnType, parameterType, transactionStatus } from '../../components/Enumeration';\r\nimport FormTextarea from '../../components/form-textarea/form-textarea.component';\r\nimport { stringOperatorData, conditionalOperatorData, numericOperatorData, joinConditionData, aggregateFunction, orderByList } from '../configurationmaster/RuleEngineQueryBuilderData';\r\nimport CustomSwitch from '../../components/custom-switch/custom-switch.component';\r\nimport DateTimePicker from '../../components/date-time-picker/date-time-picker.component';\r\nimport FormCheckbox from '../../components/form-checkbox/form-checkbox.component';\r\nimport DataGrid from '../../components/data-grid/data-grid.component';\r\nimport FormMultiSelect from '../../components/form-multi-select/form-multi-select.component';\r\nimport SplitterLayout from 'react-splitter-layout';\r\nimport ModalShow from '../../components/ModalShow';\r\nimport FormNumericInput from '../../components/form-numeric-input/form-numeric-input.component';\r\nimport { sortData } from '../../components/CommonScript';\r\nimport TestGroupResultEntry from './TestGroupResultEntry';\r\nimport { ProductList } from '../product/product.styled';\r\nimport { ContactHeader, HeaderText } from '../testmanagement/testmaster-styled';\r\nimport { ClientList } from '../userroletemplate/userroletemplate.styles';\r\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\r\nimport TestPopOver from '../ResultEntryBySample/TestPopOver';\r\nimport { MediaLabel } from '../../components/App.styles';\r\n\r\n\r\nconst AddTestGroupRule = (props) => {\r\n    const fieldsForGrid = props.activeTabIndex == 1 ? [\r\n        { \"idsName\": \"IDS_TOSITE\", \"dataField\": \"stositename\", \"width\": \"200px\" },\r\n        { \"idsName\": \"IDS_FROMSITE\", \"dataField\": \"sfromsitename\", \"width\": \"200px\" }\r\n\r\n    ] : props.activeTabIndex == 2 ? [\r\n        { \"idsName\": \"IDS_DESCRIPTION\", \"dataField\": \"sdescription\", \"width\": \"200px\" },\r\n        { \"idsName\": \"IDS_RESULTS\", \"dataField\": \"spredefinedname\", \"width\": \"200px\" },\r\n        { \"idsName\": \"IDS_COMMENTSUBTYPE\", \"dataField\": \"scommentsubtype\", \"width\": \"200px\" },\r\n        { \"idsName\": \"IDS_COMMENTTYPE\", \"dataField\": \"scommenttype\", \"width\": \"200px\" }\r\n\r\n    ] : props.activeTabIndex == 3 ? [\r\n        { \"idsName\": \"IDS_TESTNAME\", \"dataField\": \"stestsynonym\", \"width\": \"200px\" },\r\n        { \"idsName\": \"IDS_REPEATCOUNT\", \"dataField\": \"nrepeatcountno\", \"width\": \"200px\" }\r\n    ] : props.activeTabIndex == 4 ? [\r\n        { \"idsName\": \"IDS_TESTNAME\", \"dataField\": \"stestsynonym\", \"width\": \"200px\" },\r\n        { \"idsName\": \"IDS_OPTIONALPARAMETERS\", \"dataField\": \"sparametersynonym\", \"width\": \"200px\" },\r\n        { \"idsName\": \"IDS_RESULTFLAG\", \"dataField\": \"sgradename\", \"width\": \"200px\" },\r\n        { \"idsName\": \"IDS_RESULTS\", \"dataField\": \"senforceresult\", \"width\": \"200px\" }\r\n    ] : \"\";\r\n    const customStyle = {\r\n        'padding-top': '8px',\r\n        'padding-left': '2px',\r\n        'padding-right': '50px'\r\n    }\r\n    function createRules(items, groupIndex) {\r\n        let design = [];\r\n        console.log('props.selectedRecord->>', props.selectedRecord)\r\n        props.selectedRecord && [...Array(items)].map((data, index) => {\r\n            let stringOperators = stringOperatorData;\r\n            design.push(\r\n                <>\r\n                    {index > 0 ? props.selectedRecord[\"groupList\"][groupIndex]['button_or'] === true ?\r\n                        <ContionalButton type=\"button\" className={\"builder-btn-primary\"} marginLeft={0}\r\n                        >\r\n                            <span><FormattedMessage id=\"IDS_OR\" defaultMessage=\"Or\" /></span>\r\n                        </ContionalButton> :\r\n                        props.selectedRecord[\"groupList\"][groupIndex]['button_and'] === true ?\r\n                            <ContionalButton type=\"button\" className={\"builder-btn-primary\"} marginLeft={0}\r\n                            >\r\n                                <span><FormattedMessage id=\"IDS_AND\" defaultMessage=\"And\" /></span>\r\n                            </ContionalButton> : \"\" : \"\"}\r\n                    <Row className=\"my-3 ml-1\">\r\n                        <FontIconWrap className=\"d-font-icon action-icons-wrap\" style={customStyle} data-tip={props.intl.formatMessage({ id: \"IDS_DELETE\" })}\r\n                            onClick={() => props.deleteRule(groupIndex, index)}\r\n                        >\r\n                            <FontAwesomeIcon icon={faTrashAlt} />\r\n                        </FontIconWrap>\r\n                        {/* <DeleteRule marginLeft={1} onClick={() => props.deleteRule(groupIndex, index)}>\r\n                            <FontAwesomeIcon icon={faTrashAlt}  className=\"d-font-icon action-icons-wrap\" />\r\n                        </DeleteRule>  */}\r\n                        <Col md={4} className=\"pl-0\"  >\r\n                            <FormSelectSearch\r\n                                formGroupClassName=\"remove-floating-label-margin\"\r\n                                isSearchable={true}\r\n                                name={\"stestname\"}\r\n                                showOption={true}\r\n                                options={props.rulesOption || []}\r\n                                optionId='stestname'\r\n                                optionValue='displayname'\r\n                                value={props.selectedRecord[\"groupList\"][groupIndex][index] && props.selectedRecord[\"groupList\"][groupIndex][index][\"stestname\"] || \"\"}\r\n                                onChange={value => props.onRuleChange(value, \"stestname\", groupIndex, index)}\r\n                            ></FormSelectSearch>\r\n                        </Col>\r\n\r\n\r\n                        {\r\n                            props.selectedRecord[\"groupList\"][groupIndex][index] && props.selectedRecord[\"groupList\"][groupIndex][index][\"stestname\"] &&\r\n                            <>\r\n                                {/* <Col md={1}>\r\n                                    <FormInput\r\n                                        formGroupClassName=\"remove-floating-label-margin\"\r\n                                        name={`sinputname`}\r\n                                        type=\"text\"\r\n                                        value={props.intl.formatMessage({ id: \"IDS_WITH\" })}\r\n                                        disabled={true}\r\n                                    />\r\n                                </Col> */}\r\n                                <Col md={2}>\r\n                                    <FormSelectSearch\r\n                                        formGroupClassName=\"remove-floating-label-margin\"\r\n                                        formLabel=\"\"\r\n                                        isSearchable={true}\r\n                                        name={\"orderresulttype\"}\r\n                                        placeholder=\"\"\r\n                                        showOption={true}\r\n                                        options={props.resultTypeList}\r\n                                        optionId='nresultypecode'\r\n                                        optionValue='orderresulttype'\r\n                                        value={props.selectedRecord[\"groupList\"][groupIndex][index] && props.selectedRecord[\"groupList\"][groupIndex][index][\"orderresulttype\"] || \"\"}\r\n                                        onChange={value => props.onMasterDataChange(value, \"orderresulttype\", groupIndex, index)}\r\n                                    >\r\n                                    </FormSelectSearch>\r\n                                </Col>\r\n                                <Col md={2}>\r\n                                    <FormSelectSearch\r\n                                        formGroupClassName=\"remove-floating-label-margin\"\r\n                                        formLabel=\"\"\r\n                                        isSearchable={true}\r\n                                        name={\"ssymbolname\"}\r\n                                        placeholder=\"\"\r\n                                        showOption={true}\r\n                                        options={\r\n                                            props.selectedRecord[\"groupList\"][groupIndex][index][\"orderresulttype\"] &&\r\n                                                props.selectedRecord[\"groupList\"][groupIndex][index][\"orderresulttype\"].value === 3 &&\r\n                                                props.selectedRecord[\"groupList\"][groupIndex][index][\"stestname\"] &&\r\n                                                props.selectedRecord[\"groupList\"][groupIndex][index][\"stestname\"]['item']\r\n                                                ['nparametertypecode'] === parameterType.NUMERIC ?\r\n                                                numericOperatorData : stringOperators}\r\n                                        optionId='nvalidationcode'\r\n                                        optionValue='ssymbolname'\r\n                                        value={props.selectedRecord[\"groupList\"][groupIndex][index] && props.selectedRecord[\"groupList\"][groupIndex][index][\"ssymbolname\"] || \"\"}\r\n                                        onChange={value => props.onSymbolChange(value, \"ssymbolname\", groupIndex, index)}\r\n                                    >\r\n                                    </FormSelectSearch>\r\n                                </Col>\r\n                                {/* {props.selectedRecord[\"groupList\"][groupIndex][index] ?\r\n                                    props.selectedRecord[\"groupList\"][groupIndex][index][\"orderresulttype\"] && props.selectedRecord[\"groupList\"][groupIndex][index][\"orderresulttype\"].value === 3 ?\r\n                                        props.selectedRecord[\"groupList\"][groupIndex][index][\"stestname\"]['item']['nparametertypecode'] === parameterType.PREDEFINED ?\r\n                                            <Col md={2}>\r\n                                                <FormSelectSearch\r\n                                                    formGroupClassName=\"remove-floating-label-margin\"\r\n                                                    isSearchable={true}\r\n                                                    name={`${props.selectedRecord[\"groupList\"][groupIndex][index][\"stestname\"].items && props.selectedRecord[\"groupList\"][groupIndex][index][\"stestname\"].items.valuemember}`}\r\n                                                    showOption={true}\r\n                                                    options={props.selectedRecord[\"groupList\"][groupIndex][index][\"orderresulttype\"] &&\r\n                                                        props.selectedRecord[\"groupList\"][groupIndex][index][\"orderresulttype\"].value == 1 ?\r\n                                                        props.DiagnosticCaseList : props.selectedRecord[\"groupList\"][groupIndex][index][\"orderresulttype\"].value == 2 ? props.GradeList\r\n                                                            : props.PredefinedParameterOptions}\r\n\r\n                                                    optionId={props.selectedRecord[\"groupList\"][groupIndex][index][\"stestname\"].items && props.selectedRecord[\"groupList\"][groupIndex][index][\"stestname\"].items.valuemember}\r\n                                                    optionValue={props.selectedRecord[\"groupList\"][groupIndex][index][\"stestname\"].items && props.selectedRecord[\"groupList\"][groupIndex][index][\"stestname\"].items.displaymember}\r\n\r\n                                                    value={props.selectedRecord[\"groupList\"][groupIndex][index] &&\r\n                                                        props.selectedRecord[\"groupList\"][groupIndex][index]\r\n                                                        [props.selectedRecord[\"groupList\"][groupIndex][index][\"orderresulttype\"] &&\r\n                                                            props.selectedRecord[\"groupList\"][groupIndex][index][\"orderresulttype\"].value == 1 ? 'ndiagnosticcasecode' :\r\n                                                            props.selectedRecord[\"groupList\"][groupIndex][index][\"orderresulttype\"].value == 2 ? 'ngradecode' : 'ntestgrouptestpredefcode'] || \"\"}\r\n                                                    onChange={value => props.onMasterDataChange(value,\r\n                                                        props.selectedRecord[\"groupList\"][groupIndex][index][\"orderresulttype\"] &&\r\n                                                            props.selectedRecord[\"groupList\"][groupIndex][index][\"orderresulttype\"].value === 1 ? 'ndiagnosticcasecode' :\r\n                                                            props.selectedRecord[\"groupList\"][groupIndex][index][\"orderresulttype\"].value == 2 ? 'ngradecode' : 'ntestgrouptestpredefcode'\r\n                                                        , groupIndex, index)}\r\n                                                ></FormSelectSearch>\r\n                                            </Col> : props.selectedRecord[\"groupList\"][groupIndex][index] &&\r\n                                                props.selectedRecord[\"groupList\"][groupIndex][index][\"stestname\"]['item']['nparametertypecode'] === parameterType.CHARACTER ?\r\n                                                <Col md={2}>\r\n                                                    <FormTextarea\r\n                                                        name={`${props.selectedRecord[\"groupList\"][groupIndex][index][\"stestname\"].items && props.selectedRecord[\"groupList\"][groupIndex][index][\"stestname\"].items.valuemember}`}\r\n                                                        placeholder={props.intl.formatMessage({ id: \"IDS_RESULTS\" })}\r\n                                                        value={props.selectedRecord ? props.selectedRecord[\"senforceresult\"] : \"\"}\r\n                                                        rows=\"2\"\r\n                                                        isMandatory={false}\r\n                                                        required={false}\r\n                                                        maxLength={255}\r\n                                                        onChange={(event) => props.onRuleInputChange(event, 'ntestgrouptestcharcode', groupIndex, index)}\r\n                                                    />\r\n                                                </Col> :\r\n                                                <Col md={2}>\r\n                                                    <FormNumericInput\r\n                                                        name={`${props.selectedRecord[\"groupList\"][groupIndex][index][\"stestname\"].items && props.selectedRecord[\"groupList\"][groupIndex][index][\"stestname\"].items.valuemember}`}\r\n\r\n                                                        placeholder={props.intl.formatMessage({ id: \"IDS_RESULTS\" })}\r\n                                                        value={props.selectedRecord ? props.selectedRecord[\"senforceresult\"] : \"\"}\r\n                                                        type=\"number\"\r\n                                                        strict={true}\r\n                                                        maxLength={10}\r\n                                                        noStyle={true}\r\n                                                        onChange={(event) => props.onRuleNumericInputOnChange(event, 'ntestgrouptestnumericcode', groupIndex, index)}\r\n                                                        precision={0}\r\n                                                        min={0}\r\n                                                        className=\"form-control\"\r\n                                                        isMandatory={false}\r\n                                                        required={false}\r\n                                                    />\r\n                                                </Col> :\r\n                                        //asusual\r\n                                        <Col md={2}>\r\n                                            <FormSelectSearch\r\n                                                formGroupClassName=\"remove-floating-label-margin\"\r\n                                                isSearchable={true}\r\n                                                name={`${props.selectedRecord[\"groupList\"][groupIndex][index][\"stestname\"].items && props.selectedRecord[\"groupList\"][groupIndex][index][\"stestname\"].items.valuemember}`}\r\n                                                showOption={true}\r\n                                                options={props.selectedRecord[\"groupList\"][groupIndex][index][\"orderresulttype\"] &&\r\n                                                    props.selectedRecord[\"groupList\"][groupIndex][index][\"orderresulttype\"].value == 1 ?\r\n                                                    props.DiagnosticCaseList : props.selectedRecord[\"groupList\"][groupIndex][index][\"orderresulttype\"].value == 2 ? props.GradeList\r\n                                                        : props.PredefinedParameterOptions}\r\n\r\n                                                optionId={props.selectedRecord[\"groupList\"][groupIndex][index][\"stestname\"].items && props.selectedRecord[\"groupList\"][groupIndex][index][\"stestname\"].items.valuemember}\r\n                                                optionValue={props.selectedRecord[\"groupList\"][groupIndex][index][\"stestname\"].items && props.selectedRecord[\"groupList\"][groupIndex][index][\"stestname\"].items.displaymember}\r\n\r\n                                                value={props.selectedRecord[\"groupList\"][groupIndex][index] &&\r\n                                                    props.selectedRecord[\"groupList\"][groupIndex][index]\r\n                                                    [props.selectedRecord[\"groupList\"][groupIndex][index][\"orderresulttype\"] &&\r\n                                                        props.selectedRecord[\"groupList\"][groupIndex][index][\"orderresulttype\"].value == 1 ? 'ndiagnosticcasecode' :\r\n                                                        props.selectedRecord[\"groupList\"][groupIndex][index][\"orderresulttype\"].value == 2 ? 'ngradecode' : 'ntestgrouptestpredefcode'] || \"\"}\r\n                                                onChange={value => props.onMasterDataChange(value,\r\n                                                    props.selectedRecord[\"groupList\"][groupIndex][index][\"orderresulttype\"] &&\r\n                                                        props.selectedRecord[\"groupList\"][groupIndex][index][\"orderresulttype\"].value === 1 ? 'ndiagnosticcasecode' :\r\n                                                        props.selectedRecord[\"groupList\"][groupIndex][index][\"orderresulttype\"].value == 2 ? 'ngradecode' : 'ntestgrouptestpredefcode'\r\n                                                    , groupIndex, index)}\r\n                                            ></FormSelectSearch>\r\n                                        </Col> : \"\"\r\n                                } */}\r\n\r\n\r\n                                {props.selectedRecord[\"groupList\"][groupIndex][index] ?\r\n                                    props.selectedRecord[\"groupList\"][groupIndex][index][\"orderresulttype\"] &&\r\n                                        props.selectedRecord[\"groupList\"][groupIndex][index][\"orderresulttype\"].value === 3 &&\r\n                                        props.selectedRecord[\"groupList\"][groupIndex][index][\"stestname\"]['item']['nparametertypecode'] === parameterType.PREDEFINED ?\r\n                                        <Col md={2}>\r\n                                            <FormSelectSearch\r\n                                                formGroupClassName=\"remove-floating-label-margin\"\r\n                                                isSearchable={true}\r\n                                                name={`${props.selectedRecord[\"groupList\"][groupIndex][index][\"stestname\"].items && props.selectedRecord[\"groupList\"][groupIndex][index][\"stestname\"].items.valuemember}`}\r\n                                                showOption={true}\r\n                                                options={props.selectedRecord[\"groupList\"][groupIndex][index][\"orderresulttype\"] &&\r\n                                                    props.selectedRecord[\"groupList\"][groupIndex][index][\"orderresulttype\"].value == 1 ?\r\n                                                    props.DiagnosticCaseList : props.selectedRecord[\"groupList\"][groupIndex][index][\"orderresulttype\"].value == 2 ? props.GradeList\r\n                                                        : props.PredefinedParameterOptions &&\r\n                                                        props.PredefinedParameterOptions.length > 0 && props.PredefinedParameterOptions[groupIndex] &&\r\n                                                        props.PredefinedParameterOptions[groupIndex].length > 0 &&\r\n                                                        props.PredefinedParameterOptions[groupIndex][index]}\r\n\r\n                                                optionId={props.selectedRecord[\"groupList\"][groupIndex][index][\"stestname\"].items && props.selectedRecord[\"groupList\"][groupIndex][index][\"stestname\"].items.valuemember}\r\n                                                optionValue={props.selectedRecord[\"groupList\"][groupIndex][index][\"stestname\"].items && props.selectedRecord[\"groupList\"][groupIndex][index][\"stestname\"].items.displaymember}\r\n\r\n                                                value={props.selectedRecord[\"groupList\"][groupIndex][index] &&\r\n                                                    props.selectedRecord[\"groupList\"][groupIndex][index]\r\n                                                    [props.selectedRecord[\"groupList\"][groupIndex][index][\"orderresulttype\"] &&\r\n                                                        props.selectedRecord[\"groupList\"][groupIndex][index][\"orderresulttype\"].value == 1 ? 'ndiagnosticcasecode' :\r\n                                                        props.selectedRecord[\"groupList\"][groupIndex][index][\"orderresulttype\"].value == 2 ? 'ngradecode' : 'ntestgrouptestpredefcode'] || \"\"}\r\n                                                onChange={value => props.onMasterDataChange(value,\r\n                                                    props.selectedRecord[\"groupList\"][groupIndex][index][\"orderresulttype\"] &&\r\n                                                        props.selectedRecord[\"groupList\"][groupIndex][index][\"orderresulttype\"].value === 1 ? 'ndiagnosticcasecode' :\r\n                                                        props.selectedRecord[\"groupList\"][groupIndex][index][\"orderresulttype\"].value == 2 ? 'ngradecode' : 'ntestgrouptestpredefcode'\r\n                                                    , groupIndex, index)}\r\n                                            ></FormSelectSearch>\r\n                                        </Col> :\r\n                                        props.selectedRecord[\"groupList\"][groupIndex][index][\"orderresulttype\"] &&\r\n                                            props.selectedRecord[\"groupList\"][groupIndex][index][\"orderresulttype\"].value === 3 &&\r\n                                            props.selectedRecord[\"groupList\"][groupIndex][index][\"stestname\"]['item']['nparametertypecode'] === parameterType.CHARACTER ?\r\n                                            <Col md={2}>\r\n                                                <FormTextarea\r\n                                                    name={`${props.selectedRecord[\"groupList\"][groupIndex][index][\"stestname\"].items && props.selectedRecord[\"groupList\"][groupIndex][index][\"stestname\"].items.valuemember}`}\r\n                                                    placeholder={props.intl.formatMessage({ id: \"IDS_RESULTS\" })}\r\n                                                    value={props.selectedRecord[\"groupList\"][groupIndex][index] ? props.selectedRecord[\"groupList\"][groupIndex][index][\"ntestgrouptestcharcode\"] : \"\"}\r\n                                                    rows=\"2\"\r\n                                                    isMandatory={false}\r\n                                                    required={false}\r\n                                                    maxLength={255}\r\n                                                    onChange={(event) => props.onRuleInputChange(event, 'ntestgrouptestcharcode', groupIndex, index)}\r\n                                                />\r\n                                            </Col> :\r\n                                            props.selectedRecord[\"groupList\"][groupIndex][index][\"orderresulttype\"] &&\r\n                                                props.selectedRecord[\"groupList\"][groupIndex][index][\"orderresulttype\"].value === 3 &&\r\n                                                props.selectedRecord[\"groupList\"][groupIndex][index][\"stestname\"]['item']['nparametertypecode'] === parameterType.NUMERIC ?\r\n                                                <Col md={2}>\r\n                                                    <FormNumericInput\r\n                                                        name={`${props.selectedRecord[\"groupList\"][groupIndex][index][\"stestname\"].items && props.selectedRecord[\"groupList\"][groupIndex][index][\"stestname\"].items.valuemember}`}\r\n\r\n                                                        placeholder={props.intl.formatMessage({ id: \"IDS_RESULTS\" })}\r\n                                                        value={props.selectedRecord[\"groupList\"][groupIndex][index] ? props.selectedRecord[\"groupList\"][groupIndex][index][\"ntestgrouptestnumericcode\"] : \"\"}\r\n                                                        type=\"text\"\r\n                                                        strict={true}\r\n                                                        maxLength={10}\r\n                                                        noStyle={true}\r\n                                                        onChange={(event) => props.onRuleNumericInputOnChange(event, 'ntestgrouptestnumericcode', groupIndex, index)}\r\n                                                        precision={2}\r\n                                                        min={0}\r\n                                                        className=\"form-control\"\r\n                                                        isMandatory={false}\r\n                                                        required={false}\r\n                                                    />\r\n                                                </Col> :\r\n                                                <Col md={2}>\r\n                                                    <FormSelectSearch\r\n                                                        formGroupClassName=\"remove-floating-label-margin\"\r\n                                                        isSearchable={true}\r\n                                                        name={`${props.selectedRecord[\"groupList\"][groupIndex][index][\"stestname\"].items && props.selectedRecord[\"groupList\"][groupIndex][index][\"stestname\"].items.valuemember}`}\r\n                                                        showOption={true}\r\n                                                        options={props.selectedRecord[\"groupList\"][groupIndex][index][\"orderresulttype\"] &&\r\n                                                            props.selectedRecord[\"groupList\"][groupIndex][index][\"orderresulttype\"].value == 1 ?\r\n                                                            props.DiagnosticCaseList : props.GradeList}\r\n\r\n                                                        optionId={props.selectedRecord[\"groupList\"][groupIndex][index][\"stestname\"].items && props.selectedRecord[\"groupList\"][groupIndex][index][\"stestname\"].items.valuemember}\r\n                                                        optionValue={props.selectedRecord[\"groupList\"][groupIndex][index][\"stestname\"].items && props.selectedRecord[\"groupList\"][groupIndex][index][\"stestname\"].items.displaymember}\r\n\r\n                                                        value={props.selectedRecord[\"groupList\"][groupIndex][index] &&\r\n                                                            props.selectedRecord[\"groupList\"][groupIndex][index]\r\n                                                            [props.selectedRecord[\"groupList\"][groupIndex][index][\"orderresulttype\"] &&\r\n                                                                props.selectedRecord[\"groupList\"][groupIndex][index][\"orderresulttype\"].value == 1 ? 'ndiagnosticcasecode' : 'ngradecode'] || \"\"}\r\n                                                        onChange={value => props.onMasterDataChange(value,\r\n                                                            props.selectedRecord[\"groupList\"][groupIndex][index][\"orderresulttype\"] &&\r\n                                                                props.selectedRecord[\"groupList\"][groupIndex][index][\"orderresulttype\"].value === 1 ? 'ndiagnosticcasecode' : 'ngradecode'// `${props.selectedRecord[\"groupList\"][groupIndex][index][\"stestname\"].items.valuemember}`\r\n                                                            , groupIndex, index)}\r\n                                                    ></FormSelectSearch>\r\n                                                </Col> : \"\"\r\n                                }\r\n\r\n\r\n                            </>\r\n                        }\r\n                    </Row>\r\n                </>\r\n            )\r\n        });\r\n        return design;\r\n    }\r\n\r\n    function onKeyPress(event, index, paremterResultcode) {\r\n        if (event.keyCode === 13) {\r\n            for (let i = 0; i < event.target.form.elements.length; i++) {\r\n                if (parseInt(event.target.form.elements[i].id) === paremterResultcode[index + 1]) {\r\n                    event.target.form.elements[i].focus();\r\n                    break;\r\n                }\r\n            }\r\n            event.preventDefault();\r\n        }\r\n    }\r\n    function createGroupRules() {\r\n        console.log('props.addGroupList->', props)\r\n        let indexCount = 0;\r\n        let design = [];\r\n        console.log('props.addGroupList->', props.addGroupList)\r\n        props.selectedRecord[\"groupList\"] && props.addGroupList.length > 0 && props.addGroupList.map((items, index) => {\r\n\r\n            let stringOperators = stringOperatorData;\r\n            if (props.selectedRecord[\"groupList\"] && props.selectedRecord[\"groupList\"][index][\"stestname\"]\r\n                && !props.selectedRecord[\"groupList\"][index][\"stestname\"].items.needmasterdata\r\n                && props.selectedRecord[\"groupList\"][index][\"stestname\"].items.columntype === ColumnType.TEXTINPUT) {\r\n                const temp = stringOperators.filter(item => {\r\n                    if (item.items.symbolType !== 6) {\r\n                        return item\r\n                    }\r\n                });\r\n                stringOperators = temp;\r\n            }\r\n\r\n            if (items > -1) {\r\n                indexCount = indexCount + 1;\r\n            };\r\n            design.push(\r\n                <>{index > 0 && <Row>\r\n                    <ContionalButton type=\"button\" className={props.selectedRecord[\"groupListJoins\"] &&\r\n                        props.selectedRecord[\"groupListJoins\"][index - 1] && props.selectedRecord[\"groupListJoins\"][index - 1][\"button_and\"] === true ? \"builder-btn-primary\" : \"\"} marginLeft={1}\r\n                        onClick={() => props.onConditionClick(\"button_and\", (index - 1), true)}>\r\n                        <span><FormattedMessage id=\"IDS_AND\" defaultMessage=\"And\" /></span>\r\n                    </ContionalButton>\r\n                    <ContionalButton type=\"button\" className={props.selectedRecord[\"groupListJoins\"] &&\r\n                        props.selectedRecord[\"groupListJoins\"][index - 1] && props.selectedRecord[\"groupListJoins\"][index - 1][\"button_or\"] === true ? \"builder-btn-primary\" : \"\"} marginLeft={0}\r\n                        onClick={() => props.onConditionClick(\"button_or\", (index - 1), true)}>\r\n                        <span><FormattedMessage id=\"IDS_OR\" defaultMessage=\"Or\" /></span>\r\n                    </ContionalButton>\r\n                    <ContionalButton type=\"button\" className={props.selectedRecord[\"groupListJoins\"] &&\r\n                        props.selectedRecord[\"groupListJoins\"][index - 1] && props.selectedRecord[\"groupListJoins\"][index - 1][\"button_not\"] === true ? \"builder-btn-primary\" : \"\"} marginLeft={0}\r\n                        onClick={() => props.onConditionClick(\"button_not\", (index - 1), true)}>\r\n                        <span><FormattedMessage id=\"IDS_NOT\" defaultMessage=\"NOT\" /></span>\r\n                    </ContionalButton>\r\n                </Row>}\r\n                    {items > -1 ?\r\n                        <>\r\n                            <BuilderBorder key={index} className=\"p-3 mb-1\">\r\n                                <Row >\r\n\r\n                                    <Col md={12} >\r\n                                        <Button onClick={() => props.addRule(\"views\", index)} className=\"mr-1 rulesengine-rule-btn\">\r\n                                            {'+'} <FormattedMessage id=\"IDS_RULE\" defaultMessage=\"Rule\" />\r\n                                        </Button>\r\n                                        {items > 1 ?\r\n                                            <Row className=\"rulesengine-condition-btn \">\r\n                                                <ContionalButton type=\"button\" className={props.selectedRecord[\"groupList\"][index][\"button_and\"] === true ? \"builder-btn-primary\" : \"\"} marginLeft={1}\r\n                                                    onClick={() => props.onConditionClick(\"button_and\", index, false)}>\r\n                                                    <span><FormattedMessage id=\"IDS_AND\" defaultMessage=\"And\" /></span>\r\n                                                </ContionalButton>\r\n                                                <ContionalButton type=\"button\" className={props.selectedRecord[\"groupList\"][index][\"button_or\"] === true ? \"builder-btn-primary\" : \"\"} marginLeft={0}\r\n                                                    onClick={() => props.onConditionClick(\"button_or\", index, false)}>\r\n                                                    <span><FormattedMessage id=\"IDS_OR\" defaultMessage=\"Or\" /></span>\r\n                                                </ContionalButton>\r\n                                                <ContionalButton type=\"button\" className={props.selectedRecord[\"groupList\"][index][\"button_not\"] === true ? \"builder-btn-primary\" : \"\"} marginLeft={0}\r\n                                                    onClick={() => props.onConditionClick(\"button_not\", index, false)}>\r\n                                                    <span><FormattedMessage id=\"IDS_NOT\" defaultMessage=\"NOT\" /></span>\r\n                                                </ContionalButton>\r\n                                            </Row>\r\n\r\n                                            :\r\n                                            <>\r\n                                                <Row >\r\n                                                    <br >\r\n                                                    </br>\r\n                                                </Row>\r\n                                            </>\r\n                                        }\r\n                                    </Col>\r\n\r\n                                </Row>\r\n                                <>\r\n                                    {createRules(items, index)}\r\n                                </>\r\n\r\n                            </BuilderBorder>\r\n\r\n                        </> : <></>\r\n                    }\r\n\r\n\r\n                </>)\r\n        });\r\n\r\n        return design;\r\n    }\r\n\r\n\r\n    function testParameterAccordion(TestParameter) {\r\n        const accordionMap = new Map();\r\n        TestParameter.map((testParameter) =>\r\n            accordionMap.set(testParameter.npkAtestparametercode,\r\n                <Col className='p-0' testParameter={testParameter}>\r\n\r\n                    <Row>\r\n                        <Col md=\"12\">\r\n                            <div className='d-flex align-items-center mb-2'>\r\n                                    {testParameter.ParameterRulesEngine&&testParameter.ParameterRulesEngine.length>0&& <h4 className='inner_h4'> {props.intl.formatMessage({ id: \"IDS_RESULTS\" })}</h4>}\r\n                                    {/* <Nav.Item className=\"add-txt-btn\" name=\"addcodedresultname\"\r\n                                        onClick={() => props.addParameter()}\r\n                                    >\r\n                                        <FontAwesomeIcon icon={faPlus}></FontAwesomeIcon>{\" \"}\r\n                                        <FormattedMessage id=\"IDS_PARAMETERS\" defaultMessage=\"Parameters\" />\r\n                                    </Nav.Item> */}\r\n                                    <Nav.Item>\r\n                                    <Col md={12}>\r\n                                                        <CustomSwitch\r\n                                                            label={props.intl.formatMessage({ id: \"IDS_NEEDSAMPLE\" })}\r\n                                                            type=\"switch\"\r\n                                                            name={\"nneedsample\"}\r\n                                                            onChange={(event) => props.onInputSwitchChange(event)}\r\n                                                            placeholder={props.intl.formatMessage({ id: \"IDS_NEEDSAMPLE\" })}\r\n                                                            defaultValue={ props.masterData.selectedParameterRulesEngine.nneedsample === 3 ? true : false }\r\n                                                            isMandatory={false}\r\n                                                            required={false}\r\n                                                            checked={props.masterData.selectedParameterRulesEngine.nneedsample  === 3 ? true : false}\r\n                                                        //  disabled={props.selectedRecord ? props.selectedRecord[\"ndefaultstatus\"] === 3 ? true : false : false}\r\n                                                        >\r\n                                                        </CustomSwitch>\r\n                                                    </Col>\r\n\r\n                                    </Nav.Item>\r\n                                    <Nav.Link\r\n                                        data-tip={props.intl.formatMessage({ id: \"IDS_ENTERRESULT\" })}\r\n                                        className=\"btn btn-circle outline-grey ml-auto\" role=\"button\"\r\n                                        onClick={() => props.addParameter()}>\r\n                                        <FontAwesomeIcon icon={faAddressBook} />\r\n                                    </Nav.Link>\r\n                                    </div>\r\n                                    <ListGroup as=\"ul\">\r\n                                        {testParameter.ParameterRulesEngine &&\r\n                                            sortData(testParameter.ParameterRulesEngine, 'descending', 'slNo').map((parameter, predefindex) => {\r\n                                                let isAdditionalInfoRequired = parameter.hasOwnProperty('additionalInfo') &&\r\n                                                    parameter['additionalInfo'] !== \"\" && parameter['additionalInfo'] !== null\r\n                                                    && parameter['additionalInfo'] !== undefined ? true : false\r\n                                                return (<>\r\n                                                        <ListGroup.Item key={predefindex} as=\"li\" className='rulesengine-parameter-list' >\r\n                                                            <Media>\r\n                                                                <Media.Body>\r\n                                                                    <ContactHeader className=\"mt-0 text-break\">{//props.intl.formatMessage({ id: \"IDS_PARAMETERNAME\" }) + ' : ' +\r\n                                                                     parameter.sparametersynonym}</ContactHeader>\r\n                                                                    <ProductList className='text-break'>{props.intl.formatMessage({ id: \"IDS_RESULTS\" })  + ' : ' + parameter.sfinal}</ProductList>\r\n                                                                    {/* <ProductList>{'grade' + ' : ' + parameter.sgradename}</ProductList> */}\r\n                                                                    {/* {props.gradeValues[parameter.ngradecode] &&\r\n                                                                        <ListWrapper>{props.intl.formatMessage({ id: \"IDS_RESULTFLAG\" })} : <MediaLabel className=\"labelfont\" style={{ color: props.gradeValues[parameter.ngradecode][0]['scolorhexcode'] }}>\r\n                                                                            {parameter.ngradecode === undefined ? \"\" : props.gradeValues[parameter.ngradecode][0]['sgradename']}</MediaLabel></ListWrapper>\r\n\r\n                                                                    } */}\r\n\r\n                                                                </Media.Body>\r\n                                                                <div>\r\n                                                                    <div className='d-flex  justify-content-end mr-1'>\r\n                                                                        <ClientList className=\"action-icons-wrap\">\r\n                                                                            <FontIconWrap className=\"d-font-icon action-icons-wrap\" testParameter={testParameter}\r\n                                                                                data-tip={props.intl && props.intl.formatMessage({ id: \"IDS_DELETE\" })}\r\n                                                                            ><a onClick={() => props.deletetestparameter(parameter)} class=\"float-right mr-3\">\r\n                                                                                    <FontAwesomeIcon icon={faTrashAlt} />\r\n                                                                                </a></FontIconWrap> \r\n                                                                        </ClientList>\r\n                                                                       \r\n                                                                    </div>\r\n                                                                    {isAdditionalInfoRequired &&\r\n                                                                            <Col md={2} className=\"pt-2\">\r\n                                                                                <TestPopOver intl={props.intl} needIcon={true} needPopoverTitleContent={true} placement=\"left\" stringList={\r\n                                                                                    parameter.hasOwnProperty('additionalInfo') &&\r\n                                                                                    [parameter['additionalInfo']]} ></TestPopOver>\r\n                                                                            </Col>}\r\n                                                                </div>\r\n                                                            </Media>\r\n                                                        </ListGroup.Item>\r\n                                                   \r\n                                                    {/* {isAdditionalInfoRequired &&\r\n                                                        <Col md={2} className=\"pt-2\">\r\n                                                            <TestPopOver intl={props.intl} needIcon={true} needPopoverTitleContent={true} placement=\"left\" stringList={\r\n                                                                parameter.hasOwnProperty('additionalInfo') &&\r\n                                                                [parameter['additionalInfo']]} ></TestPopOver>\r\n                                                        </Col>}  */}\r\n                                               \r\n\r\n                                                </>\r\n                                                )\r\n                                            })\r\n                                        }\r\n\r\n                                    </ListGroup>\r\n                        </Col>\r\n                    </Row>\r\n                    {/* <Row>\r\n                        <Col md={12} className=\"d-flex justify-content-end pr-0\">\r\n                            <Nav.Link name=\"addtestparameter\" className=\"add-txt-btn pr-0\" testParameter={testParameter}\r\n                                onClick={() => props.addModalSite()}\r\n                            >\r\n                                <FontAwesomeIcon icon={faPlus} testParameter={testParameter} /> { }\r\n                                <FormattedMessage id=\"IDS_OUTSOURCE\" defaultMessage=\"Add Site\" testParameter={testParameter} />\r\n                            </Nav.Link>\r\n                        </Col>\r\n                    </Row> */}\r\n                    {/* {\r\n                        <>\r\n\r\n                            <DataGrid\r\n                                key=\"testsectionkey\"\r\n                                primaryKeyField=\"nresultusedmaterialcode\"\r\n                                dataResult={props.masterData[\"testSite\"] && process(sortData(props.masterData[\"testSite\"][testParameter.npkAtestparametercode], 'descending', 'npksitecode') || [],\r\n                                    props.dataStateObject && props.dataStateObject[testParameter.npkAtestparametercode]\r\n                                        ? props.dataStateObject[testParameter.npkAtestparametercode] : { skip: 0, take: 10 })}\r\n                                dataState={props.dataStateObject && props.dataStateObject[testParameter.npkAtestparametercode]\r\n                                    ? props.dataStateObject[testParameter.npkAtestparametercode] : { skip: 0, take: 10 }}\r\n                                dataStateChange={(event) => { props.dataStateChange(event, testParameter.npkAtestparametercode) }}\r\n\r\n                                extractedColumnList={fieldsForGrid}\r\n                                controlMap={props.controlMap}\r\n                                userRoleControlRights={props.userRoleControlRights}\r\n                                pageable={true}\r\n                                isActionRequired={true}\r\n                                scrollable={'scrollable'}\r\n                                hideColumnFilter={true}\r\n                                selectedId={0}\r\n                                testParameter={testParameter}\r\n                                deleteRecord={props.deletModalSite}\r\n                                deleteParam={{ operation: \"delete\" }}\r\n                                actionIcons={[{\r\n                                    title: props.intl.formatMessage({ id: \"IDS_DELETE\" }),\r\n                                    controlname: \"faTrashAlt\",\r\n                                    hidden: false,\r\n                                    objectName: \"delete\",\r\n                                    onClick: props.deletModalSite\r\n\r\n                                }]}\r\n                            >\r\n                            </DataGrid></>\r\n                        // : \"\"\r\n                    } */}\r\n                </Col>\r\n            )\r\n        );\r\n\r\n        return accordionMap;\r\n    }\r\n    function testCommentsAccordion(TestParameter) {\r\n        const accordionMap = new Map();\r\n        TestParameter.map((testParameterComments) =>\r\n            accordionMap.set(testParameterComments.npkBtestparametercode,\r\n                <Col md=\"12\" testParameterComments={testParameterComments}>\r\n                    <Row>\r\n                        <Col md={12} className=\"d-flex justify-content-end pr-0\">\r\n                            <Nav.Link name=\"addtestparameter\" className=\"add-txt-btn\" testParameterComments={testParameterComments}\r\n                                onClick={() => props.addComments()}\r\n                            >\r\n                                <FontAwesomeIcon icon={faPlus} testParameterComments={testParameterComments} /> { }\r\n                                <FormattedMessage id=\"IDS_COMMENTS\" defaultMessage=\"Add Test Comments\" testParameterComments={testParameterComments} />\r\n                            </Nav.Link>\r\n                        </Col>\r\n                    </Row>\r\n                    <DataGrid\r\n                        key=\"testsectionkey\"\r\n                        primaryKeyField=\"nresultusedmaterialcode\"\r\n                        dataResult={props.masterData[\"testComments\"] && process(sortData(props.masterData[\"testComments\"][testParameterComments.npkBtestparametercode], 'descending', 'npKAsampletestcommentscode') || [],\r\n                            props.dataStateObject && props.dataStateObject[testParameterComments.npkBtestparametercode]\r\n                                ? props.dataStateObject[testParameterComments.npkBtestparametercode] : { skip: 0, take: 10 })}\r\n                        dataState={props.dataStateObject && props.dataStateObject[testParameterComments.npkBtestparametercode]\r\n                            ? props.dataStateObject[testParameterComments.npkBtestparametercode] : { skip: 0, take: 10 }}\r\n                        dataStateChange={(event) => { props.dataStateChange(event, testParameterComments.npkBtestparametercode) }}\r\n\r\n                        extractedColumnList={fieldsForGrid}\r\n                        controlMap={props.controlMap}\r\n                        userRoleControlRights={props.userRoleControlRights}\r\n                        pageable={true}\r\n                        isActionRequired={true}\r\n                        scrollable={'scrollable'}\r\n                        hideColumnFilter={true}\r\n                        selectedId={0}\r\n                        testParameterComments={testParameterComments}\r\n                        deleteRecord={props.deletModalSite}\r\n                        deleteParam={{ operation: \"delete\" }}\r\n                        actionIcons={[{\r\n                            title: props.intl.formatMessage({ id: \"IDS_DELETE\" }),\r\n                            controlname: \"faTrashAlt\",\r\n                            hidden: false,\r\n                            objectName: \"delete\",\r\n                            onClick: props.deletModalSite\r\n\r\n                        }]}\r\n                    >\r\n                    </DataGrid>\r\n                </Col>\r\n            )\r\n        );\r\n\r\n        return accordionMap;\r\n    }\r\n    function reportCommentsAccordion(TestParameter) {\r\n        const accordionMap = new Map();\r\n        TestParameter.map((testParameterreportComments) =>\r\n            accordionMap.set(testParameterreportComments.ntestgrouptestparametercode,\r\n                <Col md=\"12\" testParameterreportComments={testParameterreportComments}>\r\n                    <Row>\r\n                        <Col md={12} className=\"d-flex justify-content-end\">\r\n                            <Nav.Link name=\"deletetestparameter\" className=\"add-txt-btn\" testParameterreportComments={testParameterreportComments}\r\n                                onClick={() => props.deleteModalTest()}\r\n                            >\r\n                                <FontAwesomeIcon icon={faTrashAlt} testParameterreportComments={testParameterreportComments} /> { }\r\n                                <FormattedMessage id=\"IDS_DELETE\" defaultMessage=\"Delete\" testParameterreportComments={testParameterreportComments} />\r\n                            </Nav.Link>\r\n                        </Col>\r\n                    </Row>\r\n                    <div className=\"actions-stripe\" testParameterreportComments={testParameterreportComments}>\r\n                        <div className=\"d-flex justify-content-end\" testParameterreportComments={testParameterreportComments}>\r\n                            <Nav.Link name=\"addtestparameter\" className=\"add-txt-btn\" testParameterreportComments={testParameterreportComments}\r\n                                onClick={() => props.addComments()}\r\n                            >\r\n                                <FontAwesomeIcon icon={faPlus} testParameterreportComments={testParameterreportComments} /> { }\r\n                                <FormattedMessage id=\"IDS_ADDREPORTCOMMENTS\" defaultMessage=\"Add Report Comments\" testParameterreportComments={testParameterreportComments} />\r\n                            </Nav.Link>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <DataGrid\r\n                        key=\"testsectionkey\"\r\n                        primaryKeyField=\"nresultusedmaterialcode\"\r\n                        dataResult={props.masterData[\"reportComments\"] && process(props.masterData[\"reportComments\"][testParameterreportComments.ntestgrouptestparametercode] || [],\r\n                            props.dataState\r\n                                ? props.dataState : { skip: 0, take: 10 })}\r\n                        dataState={props.dataState\r\n                            ? props.dataState : { skip: 0, take: 10 }}\r\n                        dataStateChange={props.dataStateChange}\r\n\r\n                        extractedColumnList={fieldsForGrid}\r\n                        controlMap={props.controlMap}\r\n                        userRoleControlRights={props.userRoleControlRights}\r\n                        pageable={true}\r\n                        isActionRequired={true}\r\n                        scrollable={'scrollable'}\r\n                        hideColumnFilter={true}\r\n                        selectedId={0}\r\n                        testParameterComments={testParameterreportComments}\r\n                        deleteRecord={props.deletModalSite}\r\n                        deleteParam={{ operation: \"delete\" }}\r\n                        actionIcons={[{\r\n                            title: props.intl.formatMessage({ id: \"IDS_DELETE\" }),\r\n                            controlname: \"faTrashAlt\",\r\n                            hidden: false,\r\n                            objectName: \"delete\",\r\n                            onClick: props.deletModalSite\r\n\r\n                        }]}\r\n                    >\r\n                    </DataGrid>\r\n                </Col>\r\n            )\r\n        );\r\n\r\n        return accordionMap;\r\n    }\r\n    function TabDetails() {\r\n        const resultTabMap = new Map();\r\n        if (props.addOutcomeList.length === 0) {\r\n            props.activeTabIndex == 1 ?\r\n                resultTabMap.set(\"IDS_Test\",\r\n                    <>\r\n                        <div className=\"actions-stripe\">\r\n                            <div className=\"d-flex justify-content-end\">\r\n                                <Nav.Link name=\"addtestparameter\"\r\n                                    onClick={() => props.addTest(\"IDS_Test\")}>\r\n                                    <FontAwesomeIcon icon={faPlus} /> { }\r\n                                    <FormattedMessage id=\"IDS_Test\" defaultMessage=\"Add Test\" />\r\n                                </Nav.Link>\r\n                            </div>\r\n                        </div>\r\n                        {props.masterData.testParameter && props.masterData.testParameter.length > 0 &&\r\n                            <CustomAccordion\r\n                                key=\"parameteraccordion\"\r\n                                clickIconGroup={true}\r\n                                deleteAccordion={props.deleteModalTest}\r\n                                accordionTitle={\"stestsynonym\"}\r\n                                accordionComponent={testParameterAccordion(props.masterData.testParameter)}\r\n                                inputParam={{ masterData: props.masterData, userInfo: props.userInfo, nFlag: 5 }}\r\n                                accordionClick={props.getOutcomeDetails}\r\n                                accordionPrimaryKey={\"npkAtestparametercode\"}\r\n                                accordionObjectName={\"testParameter\"}\r\n                                selectedKey={props.masterData.selectedParameterRulesEngine ? props.masterData.selectedParameterRulesEngine.npkAtestparametercode : 0}\r\n                            />\r\n                        }\r\n                    </>\r\n                ) : props.activeTabIndex == 2 ?\r\n                    resultTabMap.set(\"IDS_COMMENTS\",\r\n                        <>\r\n                            <div className=\"actions-stripe\">\r\n                                <div className=\"d-flex justify-content-end\">\r\n                                    <Nav.Link name=\"addtestparameter\"\r\n                                        onClick={() => props.addTest(\"IDS_COMMENTS\")}>\r\n                                        <FontAwesomeIcon icon={faPlus} /> { }\r\n                                        <FormattedMessage id=\"IDS_Test\" defaultMessage=\"Add Test\" />\r\n                                    </Nav.Link>\r\n                                </div>\r\n                            </div>\r\n                            {props.masterData.testParameterComments && props.masterData.testParameterComments.length > 0 &&\r\n                                <CustomAccordion\r\n                                    key=\"parameteraccordion\"\r\n                                    clickIconGroup={true}\r\n                                    deleteAccordion={props.deleteModalTest}\r\n                                    accordionTitle={\"stestsynonym\"}\r\n                                    accordionComponent={testCommentsAccordion(props.masterData.testParameterComments)}\r\n                                    inputParam={{ masterData: props.masterData, userInfo: props.userInfo, nFlag: 5 }}\r\n                                    accordionClick={props.getOutcomeDetails}\r\n                                    accordionPrimaryKey={\"npkBtestparametercode\"}\r\n                                    accordionObjectName={\"testParameterComments\"}\r\n                                    selectedKey={props.masterData.selectedParameterRulesEngine ? props.masterData.selectedParameterRulesEngine.npkBtestparametercode : 0}\r\n                                />\r\n                            }\r\n                        </>\r\n                    ) : props.activeTabIndex == 3 ?\r\n                        resultTabMap.set(\"IDS_REPEAT\",\r\n                            <>\r\n                                <div className=\"actions-stripe\">\r\n                                    <div className=\"d-flex justify-content-end\">\r\n                                        <Nav.Link name=\"addtestparameter\"\r\n                                            onClick={() => props.addTest(\"IDS_REPEAT\")}>\r\n                                            <FontAwesomeIcon icon={faPlus} /> { }\r\n                                            <FormattedMessage id=\"IDS_Test\" defaultMessage=\"Add Test\" />\r\n                                        </Nav.Link>\r\n                                    </div>\r\n                                </div>\r\n                                {props.masterData.testRepeat && props.masterData.testRepeat.length > 0 &&\r\n                                    <DataGrid\r\n                                        key=\"testsectionkey\"\r\n                                        primaryKeyField=\"nresultusedmaterialcode\"\r\n                                        dataResult={props.masterData[\"testRepeat\"] && process(sortData(props.masterData[\"testRepeat\"], 'descending', 'npkCtestparametercode') || [],\r\n                                            props.dataStatetestRepeat\r\n                                                ? props.dataStatetestRepeat : { skip: 0, take: 10 })}\r\n                                        dataState={props.dataStatetestRepeat\r\n                                            ? props.dataStatetestRepeat : { skip: 0, take: 10 }}\r\n                                        dataStateChange={(event) => { props.dataStateChangetestRepeat(event) }}\r\n                                        extractedColumnList={fieldsForGrid}\r\n                                        controlMap={props.controlMap}\r\n                                        userRoleControlRights={props.userRoleControlRights}\r\n                                        pageable={true}\r\n                                        isActionRequired={true}\r\n                                        scrollable={'scrollable'}\r\n                                        hideColumnFilter={true}\r\n                                        selectedId={0}\r\n                                        testRepeat={props.masterData.testRepeat}\r\n                                        deleteRecord={props.deleteModalTest}\r\n                                        deleteParam={{ operation: \"delete\" }}\r\n                                        actionIcons={[{\r\n                                            title: props.intl.formatMessage({ id: \"IDS_DELETE\" }),\r\n                                            controlname: \"faTrashAlt\",\r\n                                            hidden: false,\r\n                                            objectName: \"delete\",\r\n                                            onClick: props.deleteModalTest\r\n                                        }]}\r\n                                    >\r\n                                    </DataGrid>\r\n                                }\r\n                            </>\r\n                        ) : props.activeTabIndex == 4 ?\r\n                            resultTabMap.set(\"IDS_ENFORCERESULT\",\r\n                                <>\r\n                                    <div className=\"actions-stripe\">\r\n                                        <div className=\"d-flex justify-content-end\">\r\n                                            <Nav.Link name=\"addtestparameter\"\r\n                                                onClick={() => props.addTest(\"IDS_ENFORCERESULT\")}>\r\n                                                <FontAwesomeIcon icon={faPlus} /> { }\r\n                                                <FormattedMessage id=\"IDS_Test\" defaultMessage=\"Add Test\" />\r\n                                            </Nav.Link>\r\n                                        </div>\r\n                                    </div>\r\n                                    {props.masterData.testenforceTests && props.masterData.testenforceTests.length > 0 &&\r\n                                        <DataGrid\r\n                                            key=\"testsectionkey\"\r\n                                            primaryKeyField=\"nresultusedmaterialcode\"\r\n                                            dataResult={props.masterData[\"testenforceTests\"] && process(sortData(props.masterData[\"testenforceTests\"], 'descending', 'npkDtestparametercode') || [],\r\n                                                props.dataStatetestEnforce\r\n                                                    ? props.dataStatetestEnforce : { skip: 0, take: 10 })}\r\n                                            dataState={props.dataStatetestEnforce\r\n                                                ? props.dataStatetestEnforce : { skip: 0, take: 10 }}\r\n                                            dataStateChange={(event) => { props.dataStateChangetestEnforce(event) }}\r\n                                            extractedColumnList={fieldsForGrid}\r\n                                            controlMap={props.controlMap}\r\n                                            userRoleControlRights={props.userRoleControlRights}\r\n                                            pageable={true}\r\n                                            isActionRequired={true}\r\n                                            scrollable={'scrollable'}\r\n                                            hideColumnFilter={true}\r\n                                            selectedId={0}\r\n                                            testenforceTests={props.masterData.testenforceTests}\r\n                                            deleteRecord={props.deleteModalTest}\r\n                                            deleteParam={{ operation: \"delete\" }}\r\n                                            actionIcons={[{\r\n                                                title: props.intl.formatMessage({ id: \"IDS_DELETE\" }),\r\n                                                controlname: \"faTrashAlt\",\r\n                                                hidden: false,\r\n                                                objectName: \"delete\",\r\n                                                onClick: props.deleteModalTest\r\n                                            }]}\r\n                                        >\r\n                                        </DataGrid>\r\n                                    }\r\n                                </>\r\n                            ) :\r\n                            resultTabMap.set(\"IDS_REPORTCOMMENTS\",\r\n                                <>\r\n                                    <div className=\"actions-stripe\">\r\n                                        <div className=\"d-flex justify-content-end\">\r\n                                            <Nav.Link name=\"addtestparameter\"\r\n                                                onClick={() => props.addTest()}>\r\n                                                <FontAwesomeIcon icon={faPlus} /> { }\r\n                                                <FormattedMessage id=\"IDS_Test\" defaultMessage=\"Add Test\" />\r\n                                            </Nav.Link>\r\n                                        </div>\r\n                                    </div>\r\n                                    {props.masterData.testParameterreportComments && props.masterData.testParameterreportComments.length > 0 &&\r\n                                        <CustomAccordion\r\n                                            key=\"parameteraccordion\"\r\n                                            accordionTitle={\"stestparametersynonym\"}\r\n                                            accordionComponent={reportCommentsAccordion(props.masterData.testParameterreportComments)}\r\n                                            inputParam={{ masterData: props.masterData, userInfo: props.userInfo, nFlag: 5 }}\r\n                                            accordionClick={props.getOutcomeDetails}\r\n                                            accordionPrimaryKey={\"ntestgrouptestparametercode\"}\r\n                                            accordionObjectName={\"testParameterreportComments\"}\r\n                                            selectedKey={props.masterData.selectedParameterRulesEngine ? props.masterData.selectedParameterRulesEngine.ntestgrouptestparametercode : 0}\r\n                                        />\r\n                                    }\r\n                                </>\r\n                            )\r\n        }\r\n        return resultTabMap;\r\n    }\r\n    function testfilter(list) {\r\n        let activeTabIndex = props.activeTabIndex\r\n        if (props.masterData.selectedParameterRulesEngine) {\r\n            let dynamicList = activeTabIndex === 2 ? props.masterData[\"testComments\"] && props.masterData[\"testComments\"][props.masterData.selectedParameterRulesEngine.ntestgrouptestparametercode]\r\n                : props.masterData[\"reportComments\"] && props.masterData[\"reportComments\"][props.masterData.selectedParameterRulesEngine.ntestgrouptestparametercode]\r\n            if (dynamicList !== undefined) {\r\n                list = list.filter(({ value }) => !dynamicList.some(x => x.nsampletestcommentscode == value))\r\n            }\r\n        }\r\n        return list\r\n    }\r\n    const mandatoryFields =\r\n        props.action === 'IDS_SAVERULEMODAL' ?\r\n            [{ \"idsName\": \"IDS_RULESENGINENAME\", \"dataField\": \"srulename\", \"mandatory\": true, \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"file\" }//, \r\n                //  { \"idsName\": \"IDS_SORTORDER\", \"dataField\": \"nruleexecorder\", \"mandatory\": true, \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"file\" }\r\n            ] :\r\n            props.activeTabIndex === 1 ?\r\n                props.action === 'IDS_ADDTEST' ? [\r\n                    { \"idsName\": \"IDS_TESTNAME\", \"dataField\": \"ntestgrouptestcode\", \"mandatory\": true, \"mandatoryLabel\": \"IDS_CHOOSE\", \"controlType\": \"file\" },\r\n                    // { \"idsName\": \"IDS_FROMSITE\", \"dataField\": \"nfromsitecode\", \"mandatory\": true, \"mandatoryLabel\": \"IDS_CHOOSE\", \"controlType\": \"file\" },\r\n                    // { \"idsName\": \"IDS_TOSITE\", \"dataField\": \"ntositecode\", \"mandatory\": true, \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" }\r\n                ] :\r\n                    props.action === 'IDS_ADDPARAMETER' ? \"\" :\r\n                        [\r\n                            { \"idsName\": \"IDS_FROMSITE\", \"dataField\": \"nfromsitecode\", \"mandatory\": true, \"mandatoryLabel\": \"IDS_CHOOSE\", \"controlType\": \"file\" },\r\n                            { \"idsName\": \"IDS_TOSITE\", \"dataField\": \"ntositecode\", \"mandatory\": true, \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" }\r\n                        ]\r\n                :\r\n                props.activeTabIndex === 2 ? [\r\n                    { \"idsName\": \"IDS_TESTNAME\", \"dataField\": \"ntestgrouptestcode\", \"mandatory\": true, \"mandatoryLabel\": \"IDS_CHOOSE\", \"controlType\": \"file\" },\r\n                    { \"idsName\": \"IDS_COMMENTTYPE\", \"dataField\": \"ncommenttypecode\", \"width\": \"200px\" },\r\n                    { \"idsName\": \"IDS_COMMENTSUBTYPE\", \"dataField\": \"ncommentsubtypecode\", \"width\": \"200px\" },\r\n                    props.isneedsgeneralcomments === true ?\r\n                        { \"idsName\": \"IDS_GENERALCOMMENTS\", \"dataField\": \"sgeneralcomments\", \"width\": \"200px\" } :\r\n                        { \"idsName\": \"IDS_PREFINEDCOMMENTS\", \"dataField\": \"nsampletestcommentscode\", \"width\": \"200px\" }\r\n                ] :\r\n                    props.activeTabIndex === 3 ? [\r\n                        { \"idsName\": \"IDS_TESTNAME\", \"dataField\": \"ntestgrouptestcode\", \"mandatory\": true, \"mandatoryLabel\": \"IDS_CHOOSE\", \"controlType\": \"file\" }\r\n                    ] : props.activeTabIndex === 4 ? [\r\n                        { \"idsName\": \"IDS_TESTNAME\", \"dataField\": \"ntestgrouptestcode\", \"mandatory\": true, \"mandatoryLabel\": \"IDS_CHOOSE\", \"controlType\": \"file\" },\r\n                        { \"idsName\": \"IDS_OPTIONALPARAMETERS\", \"dataField\": \"ntestgrouptestparametercode\", \"mandatory\": true, \"mandatoryLabel\": \"IDS_CHOOSE\", \"controlType\": \"file\" },\r\n                        { \"idsName\": \"IDS_RESULTFLAG\", \"dataField\": \"ngradecode\", \"mandatory\": true, \"mandatoryLabel\": \"IDS_CHOOSE\", \"controlType\": \"file\" },\r\n                        { \"idsName\": \"IDS_RESULTS\", \"dataField\": \"senforceresult\", \"mandatory\": true, \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"file\" }\r\n                    ] : \"\"\r\n    return (\r\n\r\n        <div class=\"modal-inner-content\">\r\n            <div class=\"row margin-top-negative-1\">\r\n                <div class=\"p-0 col-md-12\">\r\n                    <div class=\"vertical-tab-top popup rules-engine-add-rule\"\r\n                    >\r\n                        <>\r\n                            <Col className={`tab-left-area p-0  ${props.activeTabIndex\r\n                                ? 'active' : \"\"} ${props.enablePropertyPopup ? 'active-popup' : \"\"}`}>\r\n                                <div className=\"center-area-wrap vertical-tab border-0 mr-0 popup-fixed-center-headed-full-width\">\r\n                                    <div className=\"center-area mt-3 mb-0 mx-4\">\r\n                                        <Row className='d-flex pt-0'>\r\n                                            <Col md={6}>\r\n                                                <Button onClick={() => props.addGroup(\"views\")} className=\"mr-1\">\r\n                                                    {'+'} <FormattedMessage id=\"IDS_GROUP\" defaultMessage=\"Group\" />\r\n                                                </Button>\r\n                                                <Button onClick={() => props.resetRule()}>\r\n                                                    <FormattedMessage id=\"IDS_RESET\" defaultMessage=\"Reset\" />\r\n                                                </Button>\r\n                                            </Col>\r\n                                        </Row>\r\n                                        <Row>\r\n                                            <Col md={12} className=\"ml-0 mr-0\">\r\n\r\n                                                {props.addGroupList.length > 0 ?\r\n                                                    <>\r\n                                                        <BuilderBorder className='border-0 mb-0'>    {\r\n                                                            createGroupRules()}   </BuilderBorder>\r\n                                                    </>\r\n\r\n                                                    : <></>}\r\n                                            </Col>\r\n                                        </Row>\r\n                                    </div>\r\n                                </div>\r\n                            </Col>\r\n                            <div md={6} className={`${props.enablePropertyPopup ? 'active-popup' : \"\"} vertical-tab vertical-tab-expand ${props.activeTabIndex\r\n                                ? 'active' : \"\"}`} >\r\n                                <div className={`${props.enablePropertyPopup ? 'active-popup' : \"\"} vertical-tab-content pager_wrap wrap-class ${props.activeTabIndex\r\n                                    ? 'active' : \"\"}`} style={{ width: props.enablePropertyPopup ? props.propertyPopupWidth + '%' : \"\" }}>\r\n                                    <span className={` vertical-tab-close ${props.activeTabIndex\r\n                                        ? 'active' : \"\"}`} onClick={() => props.changePropertyView(0)}><FontAwesomeIcon icon={faChevronRight} /> </span>\r\n                                    <div className={` vertical-tab-content-common  ${props.activeTabIndex && props.activeTabIndex\r\n                                        ? 'active' : \"\"}`}>\r\n                                        <h4 className='inner_h4'>\r\n                                            {props.intl.formatMessage({ id: \"IDS_OUTCOME\" })}\r\n                                        </h4>\r\n                                        {props.activeTabIndex && props.activeTabIndex\r\n                                            ?\r\n                                            <CustomTabs activeKey={props.activeTestTab\r\n                                            } tabDetail={TabDetails()} />\r\n                                            : \"\"}\r\n\r\n                                    </div>\r\n                                </div>\r\n                                <div className='tab-head'>\r\n                                    <ul>\r\n                                        <li className={`${props.activeTabIndex && props.activeTabIndex == 1 ? 'active' : \"\"}`}\r\n                                            onClick={() => props.changePropertyView(1)}>\r\n                                            <FontAwesomeIcon icon={faPlus} />\r\n                                            <span>\r\n                                                {props.intl.formatMessage({ id: \"IDS_Test\" })}\r\n                                            </span>\r\n                                        </li>\r\n                                        <li className={`${props.activeTabIndex && props.activeTabIndex == 2 ? 'active' : \"\"}`}\r\n                                            onClick={() => props.changePropertyView(2)}>\r\n                                            <FontAwesomeIcon icon={faComments} />\r\n                                            <span>\r\n                                                {props.intl.formatMessage({ id: \"IDS_COMMENTS\" })}\r\n                                            </span>\r\n                                        </li>\r\n                                        <li className={`${props.activeTabIndex && props.activeTabIndex == 3 ? 'active' : \"\"}`}\r\n                                            onClick={() => props.changePropertyView(3)}>\r\n                                            <FontAwesomeIcon icon={faRecycle} />\r\n                                            <span>\r\n                                                {props.intl.formatMessage({ id: \"IDS_REPEAT\" })}\r\n                                            </span>\r\n                                        </li>\r\n                                        <li className={`${props.activeTabIndex && props.activeTabIndex == 4 ? 'active' : \"\"}`}\r\n                                            onClick={() => props.changePropertyView(4)}>\r\n                                            <FontAwesomeIcon icon={faFlag} />\r\n                                            <span>\r\n                                                {props.intl.formatMessage({ id: \"IDS_ENFORCERESULT\" })}\r\n                                            </span>\r\n                                        </li>\r\n                                    </ul>\r\n                                </div>\r\n                            </div>\r\n\r\n                            {/* <ListWrapper className=\"client-listing-wrap toolbar-top-wrap mtop-4 screen-height-window\">\r\n                                <Row noGutters={true} bsPrefix=\"toolbar-top\">\r\n                                    <Col className=\"parent-port-height\">\r\n                                        <ListWrapper className={`vertical-tab-top ${props.enablePropertyPopup ? 'active-popup' : \"\"}`}>\r\n\r\n                                            <Col className={`tab-left-area p-0  ${props.activeTabIndex\r\n                                                ? 'active' : \"\"} ${props.enablePropertyPopup ? 'active-popup' : \"\"}`}>\r\n                                                <div className=\"center-area-wrap vertical-tab border-0 mr-0 popup-fixed-center-headed-full-width\">\r\n                                                    <div className=\"center-area mt-3 mb-0 mx-4\">\r\n                                                        <Row className='d-flex pt-0'>\r\n                                                            <Col md={6}>\r\n                                                                <Button onClick={() => props.addGroup(\"views\")} className=\"mr-1\">\r\n                                                                    {'+'} <FormattedMessage id=\"IDS_GROUP\" defaultMessage=\"Group\" />\r\n                                                                </Button>\r\n                                                                <Button onClick={() => props.resetRule()}>\r\n                                                                    <FormattedMessage id=\"IDS_RESET\" defaultMessage=\"Reset\" />\r\n                                                                </Button>\r\n                                                            </Col>\r\n                                                        </Row>\r\n                                                        <Row>\r\n                                                            <Col md={12} className=\"ml-0 mr-0\">\r\n\r\n                                                                {props.addGroupList.length > 0 ?\r\n                                                                    <>\r\n                                                                        <BuilderBorder className='border-0 mb-0'>    {\r\n                                                                            createGroupRules()}   </BuilderBorder>\r\n                                                                    </>\r\n\r\n                                                                    : <></>}\r\n                                                            </Col>\r\n                                                        </Row>\r\n                                                    </div>\r\n                                                </div>\r\n                                            </Col>  \r\n                                            <div md={6} className={`${props.enablePropertyPopup ? 'active-popup' : \"\"} vertical-tab vertical-tab-expand ${props.activeTabIndex\r\n                                                ? 'active' : \"\"}`} >\r\n                                                <div className={`${props.enablePropertyPopup ? 'active-popup' : \"\"} vertical-tab-content pager_wrap wrap-class ${props.activeTabIndex\r\n                                                    ? 'active' : \"\"}`} style={{ width: props.enablePropertyPopup ? props.propertyPopupWidth + '%' : \"\" }}>\r\n                                                    <span className={` vertical-tab-close ${props.activeTabIndex\r\n                                                        ? 'active' : \"\"}`} onClick={() => props.changePropertyView(0)}><FontAwesomeIcon icon={faChevronRight} /> </span>\r\n                                                    <div className={` vertical-tab-content-common  ${props.activeTabIndex && props.activeTabIndex\r\n                                                        ? 'active' : \"\"}`}>\r\n                                                        <h4 className='inner_h4'>\r\n                                                            {props.intl.formatMessage({ id: \"IDS_OUTCOME\" })}\r\n                                                        </h4>\r\n                                                        {props.activeTabIndex && props.activeTabIndex\r\n                                                            ?\r\n                                                            <CustomTabs activeKey={props.activeTestTab\r\n                                                            } tabDetail={TabDetails()} />\r\n                                                            : \"\"}\r\n\r\n                                                    </div>\r\n                                                </div>\r\n                                                <div className='tab-head'>\r\n                                                    <ul>\r\n                                                        <li className={`${props.activeTabIndex && props.activeTabIndex == 1 ? 'active' : \"\"}`}\r\n                                                            onClick={() => props.changePropertyView(1)}>\r\n                                                            <FontAwesomeIcon icon={faPlus} />\r\n                                                            <span>\r\n                                                                {props.intl.formatMessage({ id: \"IDS_Test\" })}\r\n                                                            </span>\r\n                                                        </li>\r\n                                                        <li className={`${props.activeTabIndex && props.activeTabIndex == 2 ? 'active' : \"\"}`}\r\n                                                            onClick={() => props.changePropertyView(2)}>\r\n                                                            <FontAwesomeIcon icon={faComments} />\r\n                                                            <span>\r\n                                                                {props.intl.formatMessage({ id: \"IDS_COMMENTS\" })}\r\n                                                            </span>\r\n                                                        </li>\r\n                                                        <li className={`${props.activeTabIndex && props.activeTabIndex == 3 ? 'active' : \"\"}`}\r\n                                                            onClick={() => props.changePropertyView(3)}>\r\n                                                            <FontAwesomeIcon icon={faRecycle} />\r\n                                                            <span>\r\n                                                                {props.intl.formatMessage({ id: \"IDS_REPEAT\" })}\r\n                                                            </span>\r\n                                                        </li>\r\n                                                        <li className={`${props.activeTabIndex && props.activeTabIndex == 4 ? 'active' : \"\"}`}\r\n                                                            onClick={() => props.changePropertyView(4)}>\r\n                                                            <FontAwesomeIcon icon={faFlag} />\r\n                                                            <span>\r\n                                                                {props.intl.formatMessage({ id: \"IDS_ENFORCERESULT\" })}\r\n                                                            </span>\r\n                                                        </li>\r\n                                                    </ul>\r\n                                                    <span className='tab-click-toggle-btn'>\r\n                                                        <CustomSwitch\r\n                                                            // label={\"Popup Nav\"}\r\n                                                            label={props.intl.formatMessage({ id: \"IDS_POPUPNAV\" })}\r\n                                                            type=\"switch\"\r\n                                                            name={\"PopupNav\"}\r\n                                                            onChange={(event) => props.onInputSwitchOnChange(event)}\r\n                                                            defaultValue={props.enablePropertyPopup}\r\n                                                            isMandatory={false}\r\n                                                            required={true}\r\n                                                            checked={props.enablePropertyPopup}\r\n                                                        />\r\n                                                    </span>\r\n                                                </div>\r\n                                            </div>\r\n\r\n                                        </ListWrapper>\r\n                                    </Col>\r\n                                </Row>\r\n                            </ListWrapper > */}\r\n\r\n\r\n\r\n\r\n\r\n\r\n                            {\r\n                                props.modalParameterPopup ?\r\n                                    <SlideOutModal\r\n                                        show={props.modalParameterPopup}\r\n                                        closeModal={props.closeModalShow}\r\n                                        //operation={props.action}\r\n                                        esign={false}\r\n                                        inputParam={{}}\r\n                                        screenName={'IDS_RESULTENTRY'}\r\n                                        onSaveClick={props.modalsaveClick}\r\n                                        //hideSave={this.props.Login.screenName === \"IDS_VIEWRULE\" || this.props.Login.screenName === \"IDS_VIEWOUTCOME\" || this.props.Login.screenName === \"IDS_SUBCODERESULT\" ? true : false}\r\n                                        // size={\"lg\"}\r\n                                        selectedRecord={props.selectedRecord || {}}\r\n                                        addComponent={\r\n                                            <TestGroupResultEntry\r\n                                                onKeyPress={onKeyPress}\r\n                                                parameterResults={props.selectedRecord.ParameterRulesEngine || []}\r\n                                                screenName={'IDS_ADDTEST'}\r\n                                                PredefinedValues={props.PredefinedValues}\r\n                                                onResultInputChange={props.onResultInputChange}\r\n                                                onGradeEvent={props.onGradeEvent}\r\n                                                gradeValues={props.gradeValues || []}\r\n                                                selectedResultGrade={props.selectedRecord.selectedResultGrade || []}\r\n                                            />\r\n                                        }\r\n                                    />\r\n                                    :\r\n                                    props.openModalPopup &&\r\n                                    <ModalShow\r\n                                        modalShow={true}\r\n                                        // size={props.activeTabIndex === 1 && (props.action === 'IDS_ADDPARAMETER' || props.action === 'IDS_ADDTEST') ? 'lg' : \"\"}\r\n                                        modalTitle={props.action === 'IDS_ADDPARAMETER' ? props.intl.formatMessage({ id: 'IDS_ADDPARAMETER' }) :\r\n                                            props.action === 'IDS_SAVERULEMODAL' ? 'IDS_RULESENGINENAME' :\r\n                                                props.action === 'IDS_ADDREPORTCOMMENTS' ? props.intl.formatMessage({ id: 'IDS_ADDREPORTCOMMENTS' }) :\r\n                                                    props.action === 'IDS_ADDTESTCOMMENTS' ? props.intl.formatMessage({ id: 'IDS_ADDTESTCOMMENTS' })\r\n                                                        : props.action === 'IDS_ADDTEST' ? props.activeTabIndex == 3 ? props.intl.formatMessage({ id: 'IDS_ADDREPEATTEST' }) :\r\n                                                            props.intl.formatMessage({ id: 'IDS_ADDTEST' }) :\r\n                                                            props.intl.formatMessage({ id: 'IDS_ADDOUTSOURCESITE' })}\r\n\r\n                                        closeModal={props.closeModalShow}\r\n                                        onSaveClick={props.action === 'IDS_SAVERULEMODAL' ? props.save : props.modalsaveClick}\r\n                                        // validateEsign={this.validateEsign}\r\n                                        selectedRecord={props.selectedRecord}\r\n                                        mandatoryFields={mandatoryFields}\r\n                                        modalBody={\r\n\r\n                                            props.openmodalsavePopup === true ?\r\n                                                <Row>\r\n                                                    <Col md={12}>\r\n                                                        <FormInput\r\n                                                            label={props.intl.formatMessage({ id: \"IDS_RULESENGINENAME\" })}\r\n                                                            name={`srulename`}\r\n                                                            placeholder={props.intl.formatMessage({ id: \"IDS_RULESENGINENAME\" })}\r\n                                                            type=\"text\"\r\n                                                            maxLength={100}\r\n                                                            required={false}\r\n                                                            isMandatory={true}\r\n                                                            value={props.selectedRecord[\"srulename\"] || \"\"}\r\n                                                            onChange={(event) => props.onInputChange(event)}\r\n                                                        />\r\n                                                    </Col>\r\n                                                    {/* <Col md={12}>\r\n                                                <FormNumericInput\r\n                                                    name={'nruleexecorder'}\r\n                                                    label={props.intl.formatMessage({ id: \"IDS_SORTORDER\" })}\r\n                                                    placeholder={props.intl.formatMessage({ id: \"IDS_SORTORDER\" })}\r\n                                                    value={props.selectedRecord[\"nruleexecorder\"] ? props.selectedRecord[\"nruleexecorder\"] : \"\"}\r\n                                                    type=\"text\"\r\n                                                    strict={true}\r\n                                                    maxLength={10}\r\n                                                    noStyle={true}\r\n                                                    onChange={(event) => props.onRuleNumericInputOnChange(event, 'nruleexecorder')} \r\n                                                    min={0}\r\n                                                    isMandatory={true}\r\n                                                    className=\"form-control\" \r\n                                                    required={false}\r\n                                                />\r\n                                            </Col> */}\r\n                                                </Row>\r\n                                                :\r\n                                                props.activeTabIndex == 1 ?\r\n                                                    <Col md={12}>\r\n                                                        <Row>\r\n                                                            <Col md={12}>\r\n                                                                <FormSelectSearch\r\n                                                                    formLabel={props.intl.formatMessage({ id: \"IDS_TESTNAME\" })}\r\n                                                                    isSearchable={true}\r\n                                                                    name={\"ntestgrouptestcode\"}\r\n                                                                    showOption={true}\r\n                                                                    options={props.testInitiateTestCombo || []}\r\n                                                                    optionId='ntestgrouptestcode'\r\n                                                                    optionValue='stestparametersynonym'\r\n                                                                    value={props.selectedRecord[\"ntestgrouptestcode\"] && props.selectedRecord[\"ntestgrouptestcode\"] || \"\"}\r\n                                                                    onChange={value => props.onmodalComboChange(value, 'ntestgrouptestcode')}\r\n                                                                    isMandatory={true}\r\n                                                                    isDisabled={props.action === 'IDS_ADDTEST'\r\n                                                                        ? props.modalParameterPopup ? true : false : true}\r\n                                                                ></FormSelectSearch>\r\n                                                            </Col>\r\n                                                            {/* <Col md={12}>\r\n                                                        <CustomSwitch\r\n                                                            label={props.intl.formatMessage({ id: \"IDS_NEEDSAMPLE\" })}\r\n                                                            type=\"switch\"\r\n                                                            name={\"nneedsample\"}\r\n                                                            onChange={(event) => props.onInputChange(event)}\r\n                                                            placeholder={props.intl.formatMessage({ id: \"IDS_NEEDSAMPLE\" })}\r\n                                                            defaultValue={props.selectedRecord ? props.selectedRecord[\"nneedsample\"] === 3 ? true : false : \"\"}\r\n                                                            isMandatory={false}\r\n                                                            required={false}\r\n                                                            checked={props.selectedRecord[\"nneedsample\"] === 3 ? true : false}\r\n                                                        //  disabled={props.selectedRecord ? props.selectedRecord[\"ndefaultstatus\"] === 3 ? true : false : false}\r\n                                                        >\r\n                                                        </CustomSwitch>\r\n                                                    </Col> */}\r\n                                                            {\r\n                                                                props.action === 'IDS_ADDPARAMETER'\r\n                                                                    || props.action === 'IDS_ADDTEST'\r\n                                                                    ?\r\n                                                                    // <div className=\"center-area-wrap vertical-tab border-0 mr-0 popup-fixed-center-headed-full-width\">\r\n                                                                    <TestGroupResultEntry\r\n                                                                        parameterResults={props.selectedRecord.ParameterRulesEngine || []}\r\n                                                                        screenName={'IDS_ADDTEST'}\r\n                                                                        PredefinedValues={props.PredefinedValues}\r\n                                                                        onResultInputChange={props.onResultInputChange}\r\n                                                                        onGradeEvent={props.onGradeEvent}\r\n                                                                        gradeValues={props.gradeValues || []}\r\n                                                                        selectedResultGrade={props.selectedRecord.selectedResultGrade || []}\r\n                                                                    />\r\n                                                                    // </div>\r\n                                                                    : \"\"\r\n                                                            }\r\n                                                            {/* <Col md={12}>\r\n                                                        <FormSelectSearch\r\n                                                            formLabel={props.intl.formatMessage({ id: \"IDS_PARAMETERS\" })}\r\n                                                            isSearchable={true}\r\n                                                            name={\"ntestgrouptestparametercode\"}\r\n                                                            showOption={true}\r\n                                                            options={props.testGroupTestParameterRulesEngine || []}\r\n                                                            optionId='ntestgrouptestparametercode'\r\n                                                            optionValue='stestparametersynonym'\r\n                                                            value={props.selectedRecord[\"ntestgrouptestparametercode\"] && props.selectedRecord[\"ntestgrouptestparametercode\"] || \"\"}\r\n                                                            onChange={value => props.onmodalComboChange(value, 'ntestgrouptestparametercode')}\r\n                                                            isMandatory={true}\r\n                                                            isDisabled={false}\r\n                                                        ></FormSelectSearch>\r\n                                                    </Col> */}\r\n                                                        </Row>\r\n\r\n                                                        {(\r\n                                                            props.action === 'IDS_ADDSITE'// || props.action === 'IDS_ADDTEST'\r\n                                                                ? true : false\r\n                                                        )\r\n                                                            ?\r\n                                                            <Row>\r\n                                                                <Col md={12}>\r\n                                                                    <FormSelectSearch\r\n                                                                        formLabel={props.intl.formatMessage({ id: \"IDS_FROMSITE\" })}\r\n                                                                        // formGroupClassName=\"remove-floating-label-margin\"\r\n                                                                        isSearchable={true}\r\n                                                                        name={\"nfromsitecode\"}\r\n                                                                        showOption={true}\r\n                                                                        options={props.siteList || []}\r\n                                                                        optionId='nfromsitecode'\r\n                                                                        optionValue='ssitename'\r\n                                                                        isMandatory={true}\r\n                                                                        value={props.selectedRecord[\"nfromsitecode\"] && props.selectedRecord[\"nfromsitecode\"] || \"\"}\r\n                                                                        onChange={value => props.onmodalComboChange(value, 'nfromsitecode')}\r\n                                                                    //  isMandatory={true}\r\n                                                                    ></FormSelectSearch>\r\n                                                                </Col>\r\n                                                                <Col md={12}>\r\n                                                                    <FormSelectSearch\r\n                                                                        formLabel={props.intl.formatMessage({ id: \"IDS_TOSITE\" })}\r\n                                                                        //    formGroupClassName=\"remove-floating-label-margin\"\r\n                                                                        isSearchable={true}\r\n                                                                        name={\"ntositecode\"}\r\n                                                                        showOption={true}\r\n                                                                        options={props.siteList || []}\r\n                                                                        optionId='ntositecode'\r\n                                                                        optionValue='ssitename'\r\n                                                                        isMandatory={true}\r\n                                                                        value={props.selectedRecord[\"ntositecode\"] && props.selectedRecord[\"ntositecode\"] || \"\"}\r\n                                                                        onChange={value => props.onmodalComboChange(value, 'ntositecode')}\r\n                                                                    //  isMandatory={true}\r\n                                                                    ></FormSelectSearch>\r\n                                                                </Col>\r\n                                                            </Row> : \"\"\r\n                                                        }\r\n                                                    </Col>\r\n                                                    :\r\n                                                    props.activeTabIndex == 2 ?\r\n                                                        <Row>\r\n                                                            <Col md={12}>\r\n                                                                <FormSelectSearch\r\n                                                                    formLabel={props.intl.formatMessage({ id: \"IDS_TESTNAME\" })}\r\n                                                                    isSearchable={true}\r\n                                                                    name={\"ntestgrouptestcode\"}\r\n                                                                    showOption={true}\r\n                                                                    options={props.testCommentsTestCombo || []}\r\n                                                                    optionId='ntestgrouptestcode'\r\n                                                                    optionValue='stestparametersynonym'\r\n                                                                    value={props.selectedRecord[\"ntestgrouptestcode\"] && props.selectedRecord[\"ntestgrouptestcode\"] || \"\"}\r\n                                                                    onChange={value => props.onmodalComboChange(value, 'ntestgrouptestcode')}\r\n                                                                    isMandatory={true}\r\n                                                                    isDisabled={props.action === 'IDS_ADDTEST' ? false : true}\r\n                                                                ></FormSelectSearch>\r\n                                                            </Col>\r\n                                                            <Col md={12}>\r\n                                                                <FormSelectSearch\r\n                                                                    formLabel={props.intl.formatMessage({ id: \"IDS_COMMENTTYPE\" })}\r\n                                                                    isSearchable={true}\r\n                                                                    name={\"ncommenttypecode\"}\r\n                                                                    showOption={true}\r\n                                                                    options={props.CommentType || []}\r\n                                                                    optionId='ncommenttypecode'\r\n                                                                    optionValue='scommenttype'\r\n                                                                    value={props.selectedRecord[\"ncommenttypecode\"] && props.selectedRecord[\"ncommenttypecode\"] || \"\"}\r\n                                                                    onChange={value => props.onmodalComboChange(value, 'ncommenttypecode')}\r\n                                                                    isMandatory={true}\r\n                                                                ></FormSelectSearch>\r\n                                                            </Col>\r\n                                                            <Col md={12}>\r\n                                                                <FormSelectSearch\r\n                                                                    formLabel={props.intl.formatMessage({ id: \"IDS_COMMENTSUBTYPE\" })}\r\n                                                                    isSearchable={true}\r\n                                                                    name={\"ncommentsubtypecode\"}\r\n                                                                    showOption={true}\r\n                                                                    options={props.CommentSubType || []}\r\n                                                                    optionId='ncommentsubtypecode'\r\n                                                                    optionValue='scommentsubtype'\r\n                                                                    value={props.selectedRecord[\"ncommentsubtypecode\"] && props.selectedRecord[\"ncommentsubtypecode\"] || \"\"}\r\n                                                                    onChange={value => props.onmodalComboChange(value, 'ncommentsubtypecode')}\r\n                                                                    isMandatory={true}\r\n                                                                ></FormSelectSearch>\r\n                                                            </Col>\r\n                                                            {props.selectedRecord[\"ncommentsubtypecode\"] ?\r\n                                                                props.isneedsgeneralcomments === true ?\r\n                                                                    <Col md={12}>\r\n                                                                        <FormTextarea\r\n                                                                            name={\"sgeneralcomments\"}\r\n                                                                            label={props.intl.formatMessage({ id: \"IDS_GENERALCOMMENTS\" })}\r\n                                                                            type=\"text\"\r\n                                                                            value={props.selectedRecord && props.selectedRecord['sgeneralcomments'] || \"\"}\r\n                                                                            // isMandatory={control.mandatory}\r\n                                                                            // required={control.mandatory}\r\n                                                                            onChange={(event) => props.onInputChange(event, 1)}\r\n                                                                            rows=\"2\"\r\n                                                                            maxLength={\"255\"}\r\n                                                                            isDisabled={false}\r\n                                                                            isMandatory={true}\r\n                                                                        />\r\n                                                                    </Col> : <Col md={12}>\r\n                                                                        <FormSelectSearch\r\n                                                                            formLabel={props.intl.formatMessage({ id: \"IDS_PREDEFINEDNAME\" })}\r\n                                                                            isSearchable={true}\r\n                                                                            name={\"nsampletestcommentscode\"}\r\n                                                                            showOption={true}\r\n                                                                            options={props.predefcomments || []}\r\n                                                                            optionId='nsampletestcommentscode'\r\n                                                                            optionValue='spredefinedname'\r\n                                                                            value={props.selectedRecord[\"nsampletestcommentscode\"] && props.selectedRecord[\"nsampletestcommentscode\"] || \"\"}\r\n                                                                            onChange={value => props.onmodalComboChange(value, 'nsampletestcommentscode')}\r\n                                                                            isMandatory={true}\r\n                                                                        ></FormSelectSearch>\r\n                                                                        {/* <FormInput\r\n                                                                    formGroupClassName=\"remove-floating-label-margin\"\r\n                                                                    label={props.intl.formatMessage({ id: \"IDS_DESCRIPTION\" })}\r\n                                                                    name={`sdescription`}\r\n                                                                    type=\"text\"\r\n                                                                    required={false}\r\n                                                                    isMandatory={true}\r\n                                                                    value={props.selectedRecord[\"sdescription\"] && props.selectedRecord[\"sdescription\"] || \"\"}\r\n                                                                    onChange={(event) => props.onInputChange(event)}\r\n                                                                /> */}\r\n                                                                        <FormTextarea\r\n                                                                            formGroupClassName=\"remove-floating-label-margin\"\r\n                                                                            label={props.intl.formatMessage({ id: \"IDS_DESCRIPTION\" })}\r\n                                                                            name={`sdescription`}\r\n                                                                            type=\"text\"\r\n                                                                            required={false}\r\n                                                                            isMandatory={true}\r\n                                                                            value={props.selectedRecord[\"sdescription\"] && props.selectedRecord[\"sdescription\"] || \"\"}\r\n                                                                            onChange={(event) => props.onInputChange(event)}\r\n                                                                        />\r\n                                                                    </Col>\r\n                                                                : \"\"\r\n                                                            }\r\n\r\n                                                        </Row>\r\n                                                        : props.activeTabIndex == 3 ?\r\n                                                            <Row>\r\n                                                                <Col md={12}>\r\n                                                                    <FormSelectSearch\r\n                                                                        formLabel={props.intl.formatMessage({ id: \"IDS_TESTNAME\" })}\r\n                                                                        isSearchable={true}\r\n                                                                        name={\"ntestgrouptestcode\"}\r\n                                                                        showOption={true}\r\n                                                                        options={props.testRepeatTestCombo || []}\r\n                                                                        optionId='ntestgrouptestcode'\r\n                                                                        optionValue='stestparametersynonym'\r\n                                                                        value={props.selectedRecord[\"ntestgrouptestcode\"] && props.selectedRecord[\"ntestgrouptestcode\"] || \"\"}\r\n                                                                        onChange={value => props.onmodalComboChange(value, 'ntestgrouptestcode')}\r\n                                                                        isMandatory={true}\r\n                                                                        isDisabled={props.action === 'IDS_ADDTEST' ? false : true}\r\n                                                                    ></FormSelectSearch>\r\n                                                                </Col>\r\n                                                                <Col md={12}>\r\n                                                                    <FormNumericInput\r\n                                                                        name={'nrepeatcountno'}\r\n                                                                        label={props.intl.formatMessage({ id: \"IDS_REPEATCOUNT\" })}\r\n                                                                        placeholder={props.intl.formatMessage({ id: \"IDS_REPEATCOUNT\" })}\r\n                                                                        value={props.selectedRecord[\"nrepeatcountno\"] ? props.selectedRecord[\"nrepeatcountno\"] : \"\"}\r\n                                                                        type=\"text\"\r\n                                                                        strict={true}\r\n                                                                        maxLength={10}\r\n                                                                        noStyle={true}\r\n                                                                        onChange={(event) => props.onRuleNumericInputOnChange(event, 'nrepeatcountno')}\r\n                                                                        //  precision={2}\r\n                                                                        min={0}\r\n                                                                        max={9}\r\n                                                                        className=\"form-control\"\r\n                                                                        isMandatory={false}\r\n                                                                        required={false}\r\n                                                                    />\r\n                                                                </Col>\r\n                                                            </Row> : props.activeTabIndex == 4 ?\r\n                                                                <Row>\r\n                                                                    <Col md={12}>\r\n                                                                        <FormSelectSearch\r\n                                                                            formLabel={props.intl.formatMessage({ id: \"IDS_TESTNAME\" })}\r\n                                                                            isSearchable={true}\r\n                                                                            name={\"ntestgrouptestcode\"}\r\n                                                                            showOption={true}\r\n                                                                            options={props.testenforceTestCombo || []}\r\n                                                                            optionId='ntestgrouptestcode'\r\n                                                                            optionValue='stestparametersynonym'\r\n                                                                            value={props.selectedRecord[\"ntestgrouptestcode\"] && props.selectedRecord[\"ntestgrouptestcode\"] || \"\"}\r\n                                                                            onChange={value => props.onmodalComboChange(value, 'ntestgrouptestcode')}\r\n                                                                            isMandatory={true}\r\n                                                                            isDisabled={props.action === 'IDS_ADDTEST' ? false : true}\r\n                                                                        ></FormSelectSearch>\r\n                                                                    </Col>\r\n                                                                    <Col md={12}>\r\n                                                                        <FormSelectSearch\r\n                                                                            formLabel={props.intl.formatMessage({ id: \"IDS_OPTIONALPARAMETERS\" })}\r\n                                                                            isSearchable={true}\r\n                                                                            name={\"ntestgrouptestparametercode\"}\r\n                                                                            showOption={true}\r\n                                                                            options={props.testGroupTestParameterRulesEngine || []}\r\n                                                                            optionId='ntestgrouptestparametercode'\r\n                                                                            optionValue='stestparametersynonym'\r\n                                                                            value={props.selectedRecord[\"ntestgrouptestparametercode\"] && props.selectedRecord[\"ntestgrouptestparametercode\"] || \"\"}\r\n                                                                            onChange={value => props.onmodalComboChange(value, 'ntestgrouptestparametercode')}\r\n                                                                            isMandatory={true}\r\n                                                                            isDisabled={false}\r\n                                                                        ></FormSelectSearch>\r\n                                                                    </Col>\r\n                                                                    <Col md={12}>\r\n                                                                        <FormTextarea\r\n                                                                            name=\"senforceresult\"\r\n                                                                            label={props.intl.formatMessage({ id: \"IDS_RESULTS\" })}\r\n                                                                            placeholder={props.intl.formatMessage({ id: \"IDS_RESULTS\" })}\r\n                                                                            value={props.selectedRecord ? props.selectedRecord[\"senforceresult\"] : \"\"}\r\n                                                                            rows=\"2\"\r\n                                                                            isMandatory={true}\r\n                                                                            required={false}\r\n                                                                            maxLength={255}\r\n                                                                            onChange={(event) => props.onInputChange(event, 1)}\r\n                                                                        />\r\n                                                                    </Col>\r\n                                                                    <Col md={12}>\r\n                                                                        <FormSelectSearch\r\n                                                                            formLabel={props.intl.formatMessage({ id: \"IDS_RESULTFLAG\" })}\r\n                                                                            isSearchable={true}\r\n                                                                            name={\"ngradecode\"}\r\n                                                                            showOption={true}\r\n                                                                            options={props.GradeList || []}\r\n                                                                            optionId='ngradecode'\r\n                                                                            optionValue='sgradename'\r\n                                                                            value={props.selectedRecord[\"ngradecode\"] && props.selectedRecord[\"ngradecode\"] || \"\"}\r\n                                                                            onChange={value => props.onmodalComboChange(value, 'ngradecode')}\r\n                                                                            isMandatory={true}\r\n                                                                            isDisabled={false}\r\n                                                                        ></FormSelectSearch>\r\n                                                                    </Col>\r\n                                                                </Row> : \"\"\r\n                                        }\r\n                                    />\r\n                            }\r\n                        </>\r\n                    </div></div></div>\r\n\r\n        </div >\r\n    );\r\n};\r\n\r\nexport default injectIntl(AddTestGroupRule);"]},"metadata":{},"sourceType":"module"}