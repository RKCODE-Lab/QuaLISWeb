{"ast":null,"code":"import rsapi from '../rsapi';\nimport { DEFAULT_RETURN } from './LoginTypes';\nimport { toast } from 'react-toastify';\nimport { initRequest } from './LoginAction';\nimport { sortData, constructOptionList, parentChildComboLoad, rearrangeDateFormat, ageCalculate, comboChild, validateEmail, getSameRecordFromTwoArrays, removeIndex } from '../components/CommonScript';\nimport { getcomponentdata, getValidComponent, replaceChildFromChildren } from '../components/droparea/helpers';\nimport { designComponents, ReactComponents, SampleType, transactionStatus } from '../components/Enumeration';\nimport Axios from 'axios';\nimport { getTreeByProduct, preRegDispatch } from './RegistrationAction';\nimport { faShareAltSquare } from '@fortawesome/free-solid-svg-icons';\nimport { intl } from '../components/App';\nexport function getReactInputFields(userinfo, operation, respObj, ncontrolCode) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    const listURL = [];\n    listURL[0] = rsapi.post(\"dynamicpreregdesign/getReactComponents\", {\n      userinfo\n    });\n    listURL[1] = rsapi.post(\"dynamicpreregdesign/getReactInputFields\", {\n      userinfo\n    });\n    listURL[2] = rsapi.post(\"registrationsubtype/getPeriods\", {\n      userinfo\n    });\n    listURL[3] = rsapi.post(\"dynamicpreregdesign/getReactStaticFilterTables\", {\n      userinfo\n    });\n    Axios.all(listURL).then(response => {\n      respObj = respObj ? { ...respObj\n      } : {};\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          ReactInputFields: response[1].data,\n          ReactComponents: response[0].data.components,\n          Period: constructOptionList(response[2].data, 'nperiodcode', 'speriodname').get(\"OptionList\"),\n          ReactTables: constructOptionList(response[0].data.tables, 'nquerybuildertablecode', 'sdisplayname').get(\"OptionList\"),\n          staticfiltertables: constructOptionList(response[3].data, 'nquerybuilderstaticfiltercode', 'displayname').get(\"OptionList\"),\n          selectedFieldRecord: {},\n          openModal: false,\n          loading: false,\n          openPortal: true,\n          operation,\n          showFilter: false,\n          ncontrolcode: ncontrolCode,\n          ...respObj\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function selectRegistrationTemplate(template, masterData, userinfo) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"dynamicpreregdesign/getRegistrationTemplateById\", {\n      nreactregtemplatecode: template.nreactregtemplatecode,\n      userinfo\n    }).then(response => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...masterData,\n            selectedTemplate: response.data\n          },\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getRegistrationTemplate(selectedSampleType, masterData, userinfo) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"dynamicpreregdesign/getDynamicPreRegDesign\", {\n      nsampletypecode: selectedSampleType.value,\n      userinfo\n    }).then(response => {\n      masterData = { ...masterData,\n        ...response.data,\n        searchedData: undefined\n      };\n      sortData(masterData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          realSampleType: [{\n            \"label\": \"IDS_SAMPLETYPE\",\n            \"value\": selectedSampleType.label,\n            \"item\": selectedSampleType\n          }],\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getEditRegTemplate(masterData, userinfo, editId) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"dynamicpreregdesign/getRegistrationTemplateById\", {\n      nreactregtemplatecode: masterData.selectedTemplate.nreactregtemplatecode,\n      userinfo\n    }).then(response => {\n      let jsonData = response.data.jsondata;\n      sortData(masterData);\n      const respObj = {\n        masterData,\n        ncontrolcode: editId,\n        openPortal: true,\n        loading: false,\n        openModal: false,\n        design: jsonData,\n        selectedRecord: {\n          templateName: response.data.sregtemplatename\n        }\n      };\n\n      if (response.data.ntransactionstatus === transactionStatus.DRAFT) {\n        // let jsonData = response.data.jsondata;\n        // sortData(masterData)\n        // const respObj = {\n        //     masterData,\n        //     ncontrolcode: editId,\n        //     openPortal: true,\n        //     loading: false,\n        //     openModal: false,\n        //     design: jsonData,\n        //     selectedRecord: { templateName: response.data.sregtemplatename }\n        // }                \n        dispatch(getReactInputFields(userinfo, \"update\", respObj));\n      } else {\n        dispatch(getReactInputFields(userinfo, \"viewdesign\", respObj)); // dispatch({ type: DEFAULT_RETURN, payload: { loading: false, masterStatus: \"IDS_SELECTDRAFTRECORD\" } })\n      }\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getJsonValue(PGjsonData) {\n  if (Array.isArray(PGjsonData)) {\n    let JSONData = [];\n    PGjsonData.map(data => {\n      return JSONData.push(JSON.parse(data.jsondata));\n    });\n    return JSONData;\n  } else {\n    return JSON.parse(PGjsonData);\n  }\n}\nexport function getTableColumns(design, selectedFieldRecord, stablename, userinfo, path, columnInfo, componentData, updateComponents, showFilter) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"dynamicpreregdesign/getTableColumns\", {\n      \"nquerybuildertablecode\": stablename || 0,\n      userinfo\n    }).then(response => {\n      columnInfo = columnInfo || {};\n      const staicColumns = response.data.jstaticcolumns || [];\n      const dynamicColumns = response.data.jdynamiccolumns || [];\n      const multilingualColumns = response.data.jmultilingualcolumn || [];\n      const numericColumns = response.data.jnumericcolumns || [];\n      const primaryKeyName = response.data.sprimarykeyname;\n      columnInfo = { ...columnInfo,\n        [stablename]: {\n          staicColumns,\n          dynamicColumns,\n          multilingualColumns,\n          numericColumns,\n          primaryKeyName\n        }\n      };\n      let defaultColumn = {};\n      let comboData = [];\n      let filterColumns = []; //  let selectedComponentpath=componentData.selectedComponentpath\n\n      staicColumns.map(item => {\n        comboData.push({\n          label: item.displayname[userinfo.slanguagetypecode] || item.displayname['en-US'],\n          value: item.columnname,\n          type: \"static\",\n          item\n        });\n\n        if (item.default) {\n          defaultColumn = {\n            label: item.displayname[userinfo.slanguagetypecode] || item.displayname['en-US'],\n            value: item.columnname,\n            type: \"static\",\n            item\n          };\n        }\n      });\n      dynamicColumns.map(item => {\n        comboData.push({\n          label: item.displayname[userinfo.slanguagetypecode] || item.displayname['en-US'],\n          value: item.columnname,\n          type: \"dynamic\",\n          item\n        });\n\n        if (item.default) {\n          defaultColumn = {\n            label: item.displayname[userinfo.slanguagetypecode] || item.displayname['en-US'],\n            value: item.columnname,\n            type: \"dynamic\",\n            item\n          };\n        }\n      });\n      multilingualColumns.map(item => {\n        comboData.push({\n          label: item.displayname[userinfo.slanguagetypecode] || item.displayname['en-US'],\n          value: item.columnname,\n          type: \"static\",\n          item\n        });\n\n        if (item.default) {\n          defaultColumn = {\n            label: item.displayname[userinfo.slanguagetypecode] || item.displayname['en-US'],\n            value: item.columnname,\n            type: \"static\",\n            item\n          };\n        }\n      });\n      filterColumns = [...comboData];\n      numericColumns.map(item => {\n        filterColumns.push({\n          label: item.displayname[userinfo.slanguagetypecode] || item.displayname['en-US'],\n          value: item.tablecolumnname,\n          type: \"numeric\",\n          item\n        });\n      });\n\n      if (defaultColumn.item && defaultColumn.item.ismultilingual) {\n        selectedFieldRecord['isMultiLingual'] = true;\n      }\n\n      if (updateComponents) {\n        componentData = componentData || {};\n        selectedFieldRecord = { ...selectedFieldRecord,\n          column: defaultColumn,\n          displaymember: defaultColumn.value,\n          valuemember: primaryKeyName\n        };\n        design = replaceChildFromChildren(design, path, selectedFieldRecord);\n\n        if (selectedFieldRecord.componentcode !== ReactComponents.COMBO && selectedFieldRecord.componentcode !== ReactComponents.FRONTENDSEARCHFILTER && selectedFieldRecord.componentcode !== ReactComponents.BACKENDSEARCHFILTER) {\n          let validComponents = getValidComponent(selectedFieldRecord, componentData.components, columnInfo);\n          componentData = { ...componentData,\n            validComponents\n          };\n        }\n      } else if (componentData === undefined || componentData.components === undefined) {\n        componentData = componentData || {};\n\n        if (selectedFieldRecord.componentcode === ReactComponents.FRONTENDSEARCHFILTER || selectedFieldRecord.componentcode === ReactComponents.BACKENDSEARCHFILTER) {\n          selectedFieldRecord = { ...selectedFieldRecord,\n            filterfields: [{\n              type: defaultColumn.type,\n              ...defaultColumn.item\n            }],\n            customsearchfilter: [defaultColumn],\n            displaymember: defaultColumn.value,\n            valuemember: primaryKeyName\n          };\n        } else {\n          selectedFieldRecord = { ...selectedFieldRecord,\n            column: defaultColumn,\n            displaymember: defaultColumn.value,\n            valuemember: primaryKeyName\n          };\n        }\n\n        design = replaceChildFromChildren(design, path, selectedFieldRecord);\n\n        if (selectedFieldRecord.componentcode !== ReactComponents.COMBO && selectedFieldRecord.componentcode !== ReactComponents.FRONTENDSEARCHFILTER && selectedFieldRecord.componentcode !== ReactComponents.BACKENDSEARCHFILTER) {\n          let validComponents = getValidComponent(selectedFieldRecord, componentData.components, columnInfo);\n          componentData = { ...componentData,\n            validComponents\n          };\n        }\n      } else {\n        let validComponents = getValidComponent(selectedFieldRecord, componentData.components, columnInfo);\n        let parentRadioValue = [];\n\n        if (selectedFieldRecord.componentcode === ReactComponents.FRONTENDSEARCHFILTER || selectedFieldRecord.componentcode === ReactComponents.BACKENDSEARCHFILTER) {\n          if (selectedFieldRecord.parentPath) {\n            let oldParentData = getcomponentdata(design, selectedFieldRecord.parentPath.split(\"-\"));\n\n            if (oldParentData.hasOwnProperty('child')) {\n              oldParentData.child.map(item => {\n                if (item.label === selectedFieldRecord.label) {\n                  parentRadioValue = oldParentData.radioOptions.tags.map(item => {\n                    return {\n                      value: item.id,\n                      label: item.text,\n                      item\n                    };\n                  });\n                }\n              });\n            }\n          }\n        }\n\n        componentData = { ...componentData,\n          validComponents,\n          parentRadioValue\n        };\n      }\n\n      columnInfo = { ...columnInfo,\n        [stablename]: { ...columnInfo[stablename],\n          tableColumn: comboData,\n          filterColumns\n        }\n      };\n      let optionalPayload = {\n        selectedComponentpath: Array.isArray(path) ? path.join(\"-\") : undefined\n      };\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false,\n          design,\n          // selectedComponentpath,\n          selectedFieldRecord,\n          ...optionalPayload,\n          tableColumn: comboData,\n          filterColumns,\n          columnInfo,\n          primaryKeyName,\n          selectedComponentpath: componentData.path,\n          ...componentData,\n          showFilter: showFilter\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getForeignTableData(design, selectedFieldRecord, stablename, userinfo, path, columnInfo, componentData, updateComponents) {\n  return function (dispatch) {\n    let parentcolumnlist = [{\n      source: selectedFieldRecord.filtercolumn.item.foriegntablename,\n      valuemember: selectedFieldRecord.filtercolumn.item.foriegntablePK,\n      displaymember: selectedFieldRecord.filtercolumn.item.columnname,\n      conditionstring: selectedFieldRecord.filtercolumn.item.conditionstring,\n      label: \"filterData\",\n      inputtype: \"combo\",\n      isMultiLingual: selectedFieldRecord.filtercolumn.item.ismultilingual\n    }];\n    rsapi.post(\"dynamicpreregdesign/getComboValues\", {\n      parentcolumnlist,\n      userinfo\n    }).then(response => {\n      let comboData = [];\n      let selectedRecord = {};\n      const newcomboData = parentChildComboLoad(parentcolumnlist, response.data, selectedRecord, [], [], undefined, userinfo.slanguagetypecode, userinfo); // sortData(masterData)\n\n      const comboData1 = newcomboData.comboData;\n      const selectedRecord1 = newcomboData.selectedRecord;\n\n      if (updateComponents) {\n        componentData = componentData || {}; // selectedFieldRecord = { ...selectedFieldRecord };\n\n        design = replaceChildFromChildren(design, path, selectedFieldRecord);\n\n        if (selectedFieldRecord.componentcode !== ReactComponents.COMBO) {\n          let validComponents = getValidComponent(selectedFieldRecord, componentData.components, columnInfo);\n          componentData = { ...componentData,\n            validComponents\n          };\n        }\n      }\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false,\n          design,\n          selectedFieldRecord,\n          masterDataValue: comboData,\n          columnInfo,\n          ...componentData,\n          ...comboData1\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getPreviewTemplate(masterData, userinfo, editId, columnList, selectedRecord, childColumnList, comboComponents, withoutCombocomponent, openPortal, openModal, mapOfFilterRegData, preview, operation, screenName) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    const timeZoneService = rsapi.post(\"timezone/getTimeZone\");\n    const actualService = rsapi.post(\"dynamicpreregdesign/getComboValues\", {\n      parentcolumnlist: columnList ? columnList.filter(x => x.inputtype !== 'backendsearchfilter' && x.inputtype !== 'frontendsearchfilter' && x.readonly !== true) : [],\n      childcolumnlist: childColumnList ? childColumnList : [],\n      userinfo\n    });\n    const dateService = rsapi.post(\"dynamicpreregdesign/dateValidation\", {\n      datecolumnlist: withoutCombocomponent.filter(x => x.inputtype === \"date\"),\n      userinfo\n    });\n    const currentDate = rsapi.post(\"timezone/getLocalTimeByZone\", {\n      userinfo\n    });\n    Axios.all([timeZoneService, actualService, dateService, currentDate]).then(response => {\n      const timeZoneMap = constructOptionList(response[0].data || [], \"ntimezonecode\", \"stimezoneid\", undefined, undefined, true);\n      const timeZoneList = timeZoneMap.get(\"OptionList\");\n      const defaultTimeZone = {\n        label: userinfo.stimezoneid,\n        value: userinfo.ntimezonecode\n      };\n      const newcomboData = parentChildComboLoad(columnList.filter(x => x.inputtype !== 'backendsearchfilter' && x.inputtype !== 'frontendsearchfilter' && x.readonly !== true), response[1].data, selectedRecord, childColumnList, withoutCombocomponent, undefined, userinfo.slanguagetypecode, userinfo); // sortData(masterData)\n\n      const comboData1 = newcomboData.comboData;\n      const selectedRecord1 = newcomboData.selectedRecord;\n      withoutCombocomponent.map(componentrow => {\n        if (componentrow.inputtype === \"date\") {\n          //  if (componentrow.mandatory) {\n          if (componentrow.loadcurrentdate) {\n            selectedRecord1[componentrow.label] = componentrow.loadcurrentdate ? rearrangeDateFormat(userinfo, response[3].data) : \"\";\n\n            if (masterData.selectedTemplate && masterData.selectedTemplate.nsampletypecode === SampleType.CLINICALTYPE) {\n              const Age = withoutCombocomponent.filter(item => item.name === \"Age\");\n              selectedRecord[Age[0].label] = ageCalculate(selectedRecord1[componentrow.label]);\n            }\n\n            selectedRecord1[componentrow.label + \"value\"] = selectedRecord1[componentrow.label];\n          } else if (componentrow.nperiodcode) {\n            selectedRecord1[componentrow.label + \"value\"] = response[2].data[componentrow.label] ? new Date(response[2].data[componentrow.label][\"datevalue\"]) : null;\n\n            if (componentrow.loadselecteddate) {\n              selectedRecord1[componentrow.label] = response[2].data[componentrow.label] ? new Date(response[2].data[componentrow.label][\"datevalue\"]) : null;\n            } //    selectedRecord1[componentrow.label]=response[2].data[componentrow.label]?\n            //    new Date(response[2].data[componentrow.label]):null;\n\n          } else {\n            selectedRecord1[componentrow.label + \"value\"] = new Date();\n          }\n\n          if (componentrow.hidebeforedate) {\n            selectedRecord1[componentrow.label + \"min\"] = selectedRecord1[componentrow.label + \"value\"];\n          }\n\n          if (componentrow.hideafterdate) {\n            selectedRecord1[componentrow.label + \"max\"] = selectedRecord1[componentrow.label + \"value\"];\n          } // }else{\n          //     selectedRecord1[componentrow.label] = componentrow.loadcurrentdate ? new Date() : \"\";\n          // }\n          // if (componentrow.timezone) {\n          //     sampleRegistration[\"jsondata\"][`tz${componentrow.label}`] = selectedRecord[`tz${componentrow.label}`] ?\n          //         { value: selectedRecord[`tz${componentrow.label}`].value, label: selectedRecord[`tz${componentrow.label}`].label } :\n          //         defaulttimezone ? defaulttimezone : -1\n          // }\n\n        } else if (componentrow.inputtype === \"radio\") {\n          selectedRecord1[componentrow.label] = componentrow.radioOptions ? componentrow.radioOptions.tags[0].text : \"\";\n        }\n      }); //console.log(\"selectedRecord1 action1:\", selectedRecord1);\n\n      if (preview) {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            timeZoneList,\n            defaultTimeZone,\n            masterData,\n            ncontrolcode: editId,\n            openModal,\n            loading: false,\n            comboData: comboData1,\n            selectedRecord: selectedRecord1,\n            comboComponents,\n            withoutCombocomponent,\n            openPortal,\n            columnList,\n            childColumnList,\n            screenName,\n            operation: \"preview\" // childOperation:true\n\n          }\n        });\n      } else {\n        if (mapOfFilterRegData.nsampletypecode === SampleType.PRODUCT) {\n          const ProductCategory = comboComponents.filter(x => x.name === 'Product Category');\n\n          if (ProductCategory.length > 0) {\n            const nproductcatcode = selectedRecord1[ProductCategory[0].label] && selectedRecord1[ProductCategory[0].label].value;\n            let ncategorybasedFlow = selectedRecord1[ProductCategory[0].label] && selectedRecord1[ProductCategory[0].label]['item']['jsondata']['ncategorybasedflow'];\n\n            if (mapOfFilterRegData.sampletypecategorybasedflow === transactionStatus.YES) {\n              ncategorybasedFlow = transactionStatus.YES;\n            }\n\n            if (ncategorybasedFlow !== undefined) {\n              if (ncategorybasedFlow === transactionStatus.YES) {\n                mapOfFilterRegData['nproductcode'] = -1;\n                mapOfFilterRegData['nproductcatcode'] = nproductcatcode;\n                const inputParam = {\n                  timeZoneList,\n                  defaultTimeZone,\n                  masterData,\n                  ncontrolcode: editId,\n                  openModal,\n                  comboComponents,\n                  withoutCombocomponent,\n                  openPortal,\n                  columnList,\n                  childColumnList,\n                  operation,\n                  screenName // loadPreregister:true\n\n                };\n                dispatch(getTreeByProduct(mapOfFilterRegData, selectedRecord1, newcomboData.comboData, inputParam));\n              } else {\n                const Product = comboComponents.filter(x => x.name === 'Product');\n\n                if (Product.length > 0) {\n                  const nproductcode = selectedRecord1[Product[0].label] && selectedRecord1[Product[0].label].value;\n                  mapOfFilterRegData['nproductcode'] = nproductcode !== undefined ? nproductcode : -1;\n                  mapOfFilterRegData['nproductcatcode'] = nproductcatcode;\n                  const inputParam = {\n                    timeZoneList,\n                    defaultTimeZone,\n                    masterData,\n                    ncontrolcode: editId,\n                    openModal,\n                    comboComponents,\n                    withoutCombocomponent,\n                    openPortal,\n                    columnList,\n                    childColumnList,\n                    operation,\n                    screenName // loadPreregister:true\n\n                  };\n                  dispatch(getTreeByProduct(mapOfFilterRegData, selectedRecord1, newcomboData.comboData, inputParam));\n                } else {\n                  mapOfFilterRegData['nproductcode'] = -1;\n                  mapOfFilterRegData['nproductcatcode'] = -1;\n                  const inputParam = {\n                    timeZoneList,\n                    defaultTimeZone,\n                    masterData,\n                    ncontrolcode: editId,\n                    openModal,\n                    comboComponents,\n                    withoutCombocomponent,\n                    openPortal,\n                    columnList,\n                    childColumnList,\n                    operation,\n                    screenName //loadPreregister:true\n\n                  };\n                  dispatch(getTreeByProduct(mapOfFilterRegData, selectedRecord1, newcomboData.comboData, inputParam));\n                }\n              }\n            } else {\n              mapOfFilterRegData['nproductcode'] = -1;\n              mapOfFilterRegData['nproductcatcode'] = -1;\n              const inputParam = {\n                timeZoneList,\n                defaultTimeZone,\n                masterData,\n                ncontrolcode: editId,\n                openModal,\n                comboComponents,\n                withoutCombocomponent,\n                openPortal,\n                columnList,\n                childColumnList,\n                operation,\n                screenName //loadPreregister:true\n\n              };\n              dispatch(getTreeByProduct(mapOfFilterRegData, selectedRecord1, newcomboData.comboData, inputParam));\n            }\n          } else {\n            mapOfFilterRegData['nproductcode'] = -1;\n            mapOfFilterRegData['nproductcatcode'] = -1;\n            const inputParam = {\n              timeZoneList,\n              defaultTimeZone,\n              masterData,\n              ncontrolcode: editId,\n              openModal,\n              comboComponents,\n              withoutCombocomponent,\n              openPortal,\n              columnList,\n              childColumnList,\n              operation,\n              screenName //loadPreregister:true\n\n            }; //console.log(\"selectedRecord1 action2:\", selectedRecord1);\n\n            dispatch(getTreeByProduct(mapOfFilterRegData, selectedRecord1, newcomboData.comboData, inputParam));\n          }\n        } else if (mapOfFilterRegData.nsampletypecode === SampleType.INSTRUMENT) {\n          const InstrumentCategory = comboComponents.filter(x => x.name === 'Instrument Category');\n\n          if (InstrumentCategory.length > 0) {\n            const ninstrumentcatcode = selectedRecord1[InstrumentCategory[0].label] && selectedRecord1[InstrumentCategory[0].label].value;\n            let ncategorybasedFlow = selectedRecord1[InstrumentCategory[0].label] && selectedRecord1[InstrumentCategory[0].label]['item']['jsondata']['ncategorybasedflow'];\n\n            if (mapOfFilterRegData.sampletypecategorybasedflow === transactionStatus.YES) {\n              ncategorybasedFlow = transactionStatus.YES;\n            }\n\n            if (ncategorybasedFlow !== undefined) {\n              if (ncategorybasedFlow === transactionStatus.YES) {\n                mapOfFilterRegData['nproductcode'] = -1;\n                mapOfFilterRegData['nproductcatcode'] = ninstrumentcatcode;\n                const inputParam = {\n                  timeZoneList,\n                  defaultTimeZone,\n                  masterData,\n                  ncontrolcode: editId,\n                  openModal,\n                  comboComponents,\n                  withoutCombocomponent,\n                  openPortal,\n                  columnList,\n                  childColumnList,\n                  operation,\n                  screenName // loadPreregister:true\n\n                };\n                dispatch(getTreeByProduct(mapOfFilterRegData, selectedRecord1, newcomboData.comboData, inputParam));\n              } else {\n                const Instrument = comboComponents.filter(x => x.name === 'Instrument');\n\n                if (Instrument.length > 0) {\n                  const ninstrumentcode = selectedRecord1[Instrument[0].label] && selectedRecord1[Instrument[0].label].value;\n                  mapOfFilterRegData['nproductcode'] = ninstrumentcode !== undefined ? ninstrumentcode : -1;\n                  mapOfFilterRegData['nproductcatcode'] = ninstrumentcatcode;\n                  const inputParam = {\n                    timeZoneList,\n                    defaultTimeZone,\n                    masterData,\n                    ncontrolcode: editId,\n                    openModal,\n                    comboComponents,\n                    withoutCombocomponent,\n                    openPortal,\n                    columnList,\n                    childColumnList,\n                    operation,\n                    screenName //loadPreregister:true\n\n                  };\n                  dispatch(getTreeByProduct(mapOfFilterRegData, selectedRecord1, newcomboData.comboData, inputParam));\n                } else {\n                  mapOfFilterRegData['nproductcode'] = -1;\n                  mapOfFilterRegData['nproductcatcode'] = -1;\n                  const inputParam = {\n                    timeZoneList,\n                    defaultTimeZone,\n                    masterData,\n                    ncontrolcode: editId,\n                    openModal,\n                    comboComponents,\n                    withoutCombocomponent,\n                    openPortal,\n                    columnList,\n                    childColumnList,\n                    operation,\n                    screenName //loadPreregister:true\n\n                  };\n                  dispatch(getTreeByProduct(mapOfFilterRegData, selectedRecord1, newcomboData.comboData, inputParam));\n                }\n              }\n            } else {\n              mapOfFilterRegData['nproductcode'] = -1;\n              mapOfFilterRegData['nproductcatcode'] = -1;\n              const inputParam = {\n                timeZoneList,\n                defaultTimeZone,\n                masterData,\n                ncontrolcode: editId,\n                openModal,\n                comboComponents,\n                withoutCombocomponent,\n                openPortal,\n                columnList,\n                childColumnList,\n                operation,\n                screenName // loadPreregister:true\n\n              };\n              dispatch(getTreeByProduct(mapOfFilterRegData, selectedRecord1, newcomboData.comboData, inputParam));\n            }\n          } else {\n            mapOfFilterRegData['nproductcode'] = -1;\n            mapOfFilterRegData['nproductcatcode'] = -1;\n            const inputParam = {\n              timeZoneList,\n              defaultTimeZone,\n              masterData,\n              ncontrolcode: editId,\n              openModal,\n              comboComponents,\n              withoutCombocomponent,\n              openPortal,\n              columnList,\n              childColumnList,\n              operation,\n              screenName // loadPreregister:true\n\n            };\n            dispatch(getTreeByProduct(mapOfFilterRegData, selectedRecord1, newcomboData.comboData, inputParam));\n          }\n        } else if (mapOfFilterRegData.nsampletypecode === SampleType.MATERIAL) {\n          const MaterialType = comboComponents.filter(x => x.name === 'Material Type');\n\n          if (MaterialType.length > 0) {\n            const nmaterialtypecode = selectedRecord1[MaterialType[0].label] && selectedRecord1[MaterialType[0].label].value;\n\n            if (nmaterialtypecode !== undefined) {\n              const MaterialCategory = comboComponents.filter(x => x.name === 'Material Category');\n\n              if (MaterialCategory.length > 0) {\n                const nmaterialcatcode = selectedRecord1[MaterialCategory[0].label] && selectedRecord1[MaterialCategory[0].label].value;\n                let ncategorybasedFlow = selectedRecord1[MaterialCategory[0].label] && selectedRecord1[MaterialCategory[0].label]['item']['jsondata']['ncategorybasedflow'];\n\n                if (mapOfFilterRegData.sampletypecategorybasedflow === transactionStatus.YES) {\n                  ncategorybasedFlow = transactionStatus.YES;\n                }\n\n                if (ncategorybasedFlow !== undefined) {\n                  if (ncategorybasedFlow === transactionStatus.YES) {\n                    mapOfFilterRegData['nproductcode'] = -1;\n                    mapOfFilterRegData['nproductcatcode'] = nmaterialcatcode;\n                    const inputParam = {\n                      timeZoneList,\n                      defaultTimeZone,\n                      masterData,\n                      ncontrolcode: editId,\n                      openModal,\n                      comboComponents,\n                      withoutCombocomponent,\n                      openPortal,\n                      columnList,\n                      childColumnList,\n                      operation,\n                      screenName // loadPreregister:true\n\n                    };\n                    dispatch(getTreeByProduct(mapOfFilterRegData, selectedRecord1, newcomboData.comboData, inputParam));\n                  } else {\n                    const Material = comboComponents.filter(x => x.name === 'Material');\n\n                    if (Material.length > 0) {\n                      const nmaterialcode = selectedRecord1[Material[0].label] && selectedRecord1[Material[0].label].value;\n                      mapOfFilterRegData['nproductcode'] = nmaterialcode !== undefined ? nmaterialcode : -1;\n                      mapOfFilterRegData['nproductcatcode'] = nmaterialcatcode;\n                      const inputParam = {\n                        timeZoneList,\n                        defaultTimeZone,\n                        masterData,\n                        ncontrolcode: editId,\n                        openModal,\n                        comboComponents,\n                        withoutCombocomponent,\n                        openPortal,\n                        columnList,\n                        childColumnList,\n                        operation,\n                        screenName // loadPreregister:true\n\n                      };\n                      dispatch(getTreeByProduct(mapOfFilterRegData, selectedRecord1, newcomboData.comboData, inputParam));\n                    } else {\n                      mapOfFilterRegData['nproductcode'] = -1;\n                      mapOfFilterRegData['nproductcatcode'] = -1;\n                      const inputParam = {\n                        timeZoneList,\n                        defaultTimeZone,\n                        masterData,\n                        ncontrolcode: editId,\n                        openModal,\n                        comboComponents,\n                        withoutCombocomponent,\n                        openPortal,\n                        columnList,\n                        childColumnList,\n                        operation,\n                        screenName //loadPreregister:true\n\n                      };\n                      dispatch(getTreeByProduct(mapOfFilterRegData, selectedRecord1, newcomboData.comboData, inputParam));\n                    }\n                  }\n                } else {\n                  mapOfFilterRegData['nproductcode'] = -1;\n                  mapOfFilterRegData['nproductcatcode'] = -1;\n                  const inputParam = {\n                    timeZoneList,\n                    defaultTimeZone,\n                    masterData,\n                    ncontrolcode: editId,\n                    openModal,\n                    comboComponents,\n                    withoutCombocomponent,\n                    openPortal,\n                    columnList,\n                    childColumnList,\n                    operation,\n                    screenName // loadPreregister:true\n\n                  };\n                  dispatch(getTreeByProduct(mapOfFilterRegData, selectedRecord1, newcomboData.comboData, inputParam));\n                }\n              } else {\n                mapOfFilterRegData['nproductcode'] = -1;\n                mapOfFilterRegData['nproductcatcode'] = -1;\n                const inputParam = {\n                  timeZoneList,\n                  defaultTimeZone,\n                  masterData,\n                  ncontrolcode: editId,\n                  openModal,\n                  comboComponents,\n                  withoutCombocomponent,\n                  openPortal,\n                  columnList,\n                  childColumnList,\n                  operation,\n                  screenName //loadPreregister:true\n\n                };\n                dispatch(getTreeByProduct(mapOfFilterRegData, selectedRecord1, newcomboData.comboData, inputParam));\n              }\n            }\n          } else {\n            mapOfFilterRegData['nproductcode'] = -1;\n            mapOfFilterRegData['nproductcatcode'] = -1;\n            const inputParam = {\n              timeZoneList,\n              defaultTimeZone,\n              masterData,\n              ncontrolcode: editId,\n              openModal,\n              comboComponents,\n              withoutCombocomponent,\n              openPortal,\n              columnList,\n              childColumnList,\n              operation,\n              screenName // loadPreregister:true\n\n            };\n            dispatch(getTreeByProduct(mapOfFilterRegData, selectedRecord1, newcomboData.comboData, inputParam));\n          }\n        } else if (mapOfFilterRegData.nsampletypecode === SampleType.CLINICALTYPE) {\n          const ProductCategory = comboComponents.filter(x => x.name === 'Product Category');\n          const dateComp = withoutCombocomponent.filter(item => item.name === \"Date Of Birth\");\n\n          if (dateComp[0].label !== undefined) {\n            const ageComp = withoutCombocomponent.filter(item => item.name === \"Age\");\n            const age = ageCalculate(selectedRecord1[dateComp[0].label]);\n            selectedRecord1[ageComp[0].label] = age;\n          }\n\n          if (ProductCategory.length > 0) {\n            const nproductcatcode = selectedRecord1[ProductCategory[0].label] ? selectedRecord1[ProductCategory[0].label].value : -1;\n            let ncategorybasedFlow = selectedRecord1[ProductCategory[0].label] ? selectedRecord1[ProductCategory[0].label]['item']['jsondata']['ncategorybasedflow'] : undefined;\n\n            if (mapOfFilterRegData.sampletypecategorybasedflow === transactionStatus.YES) {\n              ncategorybasedFlow = transactionStatus.YES;\n            }\n\n            if (ncategorybasedFlow !== undefined) {\n              if (ncategorybasedFlow === transactionStatus.YES) {\n                mapOfFilterRegData['nproductcode'] = -1;\n                mapOfFilterRegData['nproductcatcode'] = nproductcatcode;\n                const inputParam = {\n                  timeZoneList,\n                  defaultTimeZone,\n                  masterData,\n                  ncontrolcode: editId,\n                  openModal,\n                  comboComponents,\n                  withoutCombocomponent,\n                  openPortal,\n                  columnList,\n                  childColumnList,\n                  operation,\n                  screenName // loadPreregister:true\n\n                };\n                dispatch(getTreeByProduct(mapOfFilterRegData, selectedRecord1, newcomboData.comboData, inputParam));\n              } else {\n                const Product = comboComponents.filter(x => x.name === 'Product');\n\n                if (Product.length > 0) {\n                  const nproductcode = selectedRecord1[Product[0].label] && selectedRecord1[Product[0].label].value;\n                  mapOfFilterRegData['nproductcode'] = nproductcode !== undefined ? nproductcode : -1;\n                  mapOfFilterRegData['nproductcatcode'] = nproductcatcode;\n                  const inputParam = {\n                    timeZoneList,\n                    defaultTimeZone,\n                    masterData,\n                    ncontrolcode: editId,\n                    openModal,\n                    comboComponents,\n                    withoutCombocomponent,\n                    openPortal,\n                    columnList,\n                    childColumnList,\n                    operation,\n                    screenName // loadPreregister:true\n\n                  };\n                  dispatch(getTreeByProduct(mapOfFilterRegData, selectedRecord1, newcomboData.comboData, inputParam));\n                } else {\n                  mapOfFilterRegData['nproductcode'] = -1;\n                  mapOfFilterRegData['nproductcatcode'] = -1;\n                  const inputParam = {\n                    timeZoneList,\n                    defaultTimeZone,\n                    masterData,\n                    ncontrolcode: editId,\n                    openModal,\n                    comboComponents,\n                    withoutCombocomponent,\n                    openPortal,\n                    columnList,\n                    childColumnList,\n                    operation,\n                    screenName //loadPreregister:true\n\n                  };\n                  dispatch(getTreeByProduct(mapOfFilterRegData, selectedRecord1, newcomboData.comboData, inputParam));\n                }\n              }\n            } else {\n              mapOfFilterRegData['nproductcode'] = -1;\n              mapOfFilterRegData['nproductcatcode'] = -1;\n              const inputParam = {\n                timeZoneList,\n                defaultTimeZone,\n                masterData,\n                ncontrolcode: editId,\n                openModal,\n                comboComponents,\n                withoutCombocomponent,\n                openPortal,\n                columnList,\n                childColumnList,\n                operation,\n                screenName //loadPreregister:true\n\n              };\n              dispatch(getTreeByProduct(mapOfFilterRegData, selectedRecord1, newcomboData.comboData, inputParam));\n            }\n          } else {\n            mapOfFilterRegData['nproductcode'] = -1;\n            mapOfFilterRegData['nproductcatcode'] = -1;\n            const inputParam = {\n              timeZoneList,\n              defaultTimeZone,\n              masterData,\n              ncontrolcode: editId,\n              openModal,\n              comboComponents,\n              withoutCombocomponent,\n              openPortal,\n              columnList,\n              childColumnList,\n              operation,\n              screenName //loadPreregister:true\n\n            }; //console.log(\"selectedRecord1 action2:\", selectedRecord1);\n\n            dispatch(getTreeByProduct(mapOfFilterRegData, selectedRecord1, newcomboData.comboData, inputParam));\n          }\n        } else if (mapOfFilterRegData.nsampletypecode === SampleType.PROJECTSAMPLETYPE) {\n          const ProductCategory = comboComponents.filter(x => x.name === 'Product Category');\n          const project = comboComponents.filter(x => x.name === 'Project Code');\n          let nprojectMasterCode = -1;\n\n          if (project && project.length > 0 && mapOfFilterRegData['nprojectSpecReqd'] == transactionStatus.YES) {\n            nprojectMasterCode = selectedRecord1[project[0].label] && selectedRecord1[project[0].label].value;\n          }\n\n          if (ProductCategory.length > 0) {\n            const nproductcatcode = selectedRecord1[ProductCategory[0].label] && selectedRecord1[ProductCategory[0].label].value;\n            let ncategorybasedFlow = selectedRecord1[ProductCategory[0].label] && selectedRecord1[ProductCategory[0].label]['item']['jsondata']['ncategorybasedflow'];\n\n            if (mapOfFilterRegData.sampletypecategorybasedflow === transactionStatus.YES) {\n              ncategorybasedFlow = transactionStatus.YES;\n            }\n\n            if (ncategorybasedFlow !== undefined) {\n              if (ncategorybasedFlow === 3) {\n                mapOfFilterRegData['nproductcode'] = -1;\n                mapOfFilterRegData['nproductcatcode'] = nproductcatcode;\n                mapOfFilterRegData['nprojectmastercode'] = nprojectMasterCode || -1;\n                const inputParam = {\n                  timeZoneList,\n                  defaultTimeZone,\n                  masterData,\n                  ncontrolcode: editId,\n                  openModal,\n                  comboComponents,\n                  withoutCombocomponent,\n                  openPortal,\n                  columnList,\n                  childColumnList,\n                  operation,\n                  screenName // loadPreregister:true\n\n                };\n                dispatch(getTreeByProduct(mapOfFilterRegData, selectedRecord1, newcomboData.comboData, inputParam));\n              } else {\n                const Product = comboComponents.filter(x => x.name === 'Product');\n\n                if (Product.length > 0) {\n                  const nproductcode = selectedRecord1[Product[0].label] && selectedRecord1[Product[0].label].value;\n                  mapOfFilterRegData['nproductcode'] = nproductcode !== undefined ? nproductcode : -1;\n                  mapOfFilterRegData['nproductcatcode'] = nproductcatcode;\n                  mapOfFilterRegData['nprojectmastercode'] = nprojectMasterCode || -1;\n                  const inputParam = {\n                    timeZoneList,\n                    defaultTimeZone,\n                    masterData,\n                    ncontrolcode: editId,\n                    openModal,\n                    comboComponents,\n                    withoutCombocomponent,\n                    openPortal,\n                    columnList,\n                    childColumnList,\n                    operation,\n                    screenName // loadPreregister:true\n\n                  };\n                  dispatch(getTreeByProduct(mapOfFilterRegData, selectedRecord1, newcomboData.comboData, inputParam));\n                } else {\n                  mapOfFilterRegData['nproductcode'] = -1;\n                  mapOfFilterRegData['nproductcatcode'] = -1;\n                  mapOfFilterRegData['nprojectmastercode'] = nprojectMasterCode || -1;\n                  const inputParam = {\n                    timeZoneList,\n                    defaultTimeZone,\n                    masterData,\n                    ncontrolcode: editId,\n                    openModal,\n                    comboComponents,\n                    withoutCombocomponent,\n                    openPortal,\n                    columnList,\n                    childColumnList,\n                    operation,\n                    screenName //loadPreregister:true\n\n                  };\n                  dispatch(getTreeByProduct(mapOfFilterRegData, selectedRecord1, newcomboData.comboData, inputParam));\n                }\n              }\n            } else {\n              mapOfFilterRegData['nproductcode'] = -1;\n              mapOfFilterRegData['nproductcatcode'] = -1;\n              mapOfFilterRegData['nprojectmastercode'] = nprojectMasterCode || -1;\n              const inputParam = {\n                timeZoneList,\n                defaultTimeZone,\n                masterData,\n                ncontrolcode: editId,\n                openModal,\n                comboComponents,\n                withoutCombocomponent,\n                openPortal,\n                columnList,\n                childColumnList,\n                operation,\n                screenName //loadPreregister:true\n\n              };\n              dispatch(getTreeByProduct(mapOfFilterRegData, selectedRecord1, newcomboData.comboData, inputParam));\n            }\n          } else {\n            mapOfFilterRegData['nproductcode'] = -1;\n            mapOfFilterRegData['nproductcatcode'] = -1;\n            mapOfFilterRegData['nprojectmastercode'] = nprojectMasterCode || -1;\n            const inputParam = {\n              timeZoneList,\n              defaultTimeZone,\n              masterData,\n              ncontrolcode: editId,\n              openModal,\n              comboComponents,\n              withoutCombocomponent,\n              openPortal,\n              columnList,\n              childColumnList,\n              operation,\n              screenName //loadPreregister:true\n\n            }; //console.log(\"selectedRecord1 action2:\", selectedRecord1);\n\n            dispatch(getTreeByProduct(mapOfFilterRegData, selectedRecord1, newcomboData.comboData, inputParam));\n          }\n        }\n      }\n    }).catch(error => {\n      //console.log(\"error:\", error);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getChildValues(inputParem, userinfo, selectedRecord, comboData, parentcolumnlist, childcolumnlist, withoutCombocomponent, parentListWithReadonly, productCategory, product, mapOfRegFilterData, instrumentCategory, instrument, materialCategory, material, materialType, subsample, project) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post('dynamicpreregdesign/getChildValues', {\n      child: inputParem.child,\n      parentdata: inputParem.item.jsondata,\n      parentsource: inputParem.source,\n      [inputParem.primarykeyField]: inputParem.value,\n      valuemember: inputParem.primarykeyField,\n      childcolumnlist,\n      userinfo,\n      parentcolumnlist\n    }).then(response => {\n      let returnObj = { ...comboData,\n        ...response.data\n      };\n      returnObj = parentChildComboLoad(parentListWithReadonly, returnObj, selectedRecord, childcolumnlist, withoutCombocomponent, inputParem, userinfo.slanguagetypecode, userinfo);\n      selectedRecord = { ...selectedRecord,\n        ...returnObj.selectedRecord\n      };\n\n      if (subsample) {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false,\n            SubSamplecomboData: { ...returnObj.comboData\n            },\n            selectComponent: selectedRecord,\n            screenName: inputParem.screenName,\n            selectedMaster: [],\n            addMaster: false,\n            selectedControl: [],\n            masterComboColumnFiled: [],\n            masterDesign: [],\n            masterextractedColumnList: [],\n            masterfieldList: [],\n            masterdataList: [],\n            mastercomboComponents: [],\n            masterwithoutCombocomponent: [],\n            masterIndex: undefined,\n            loadCustomSearchFilter: false\n          }\n        });\n      } else if (project) {\n        dispatch(getTreeByProduct(mapOfRegFilterData, selectedRecord, { ...returnObj.comboData\n        }));\n      } else if (productCategory) {\n        dispatch(getTreeByProduct(mapOfRegFilterData, selectedRecord, { ...returnObj.comboData\n        }));\n      } else if (product) {\n        if (selectedRecord[inputParem.nameofdefaultcomp === \"Product\" ? inputParem.label : inputParem.ProductName]) {\n          mapOfRegFilterData[\"nproductcode\"] = selectedRecord[inputParem.nameofdefaultcomp === \"Product\" ? inputParem.label : inputParem.ProductName] ? selectedRecord[inputParem.nameofdefaultcomp === \"Product\" ? inputParem.label : inputParem.ProductName].value : -1;\n          dispatch(getTreeByProduct(mapOfRegFilterData, selectedRecord, { ...returnObj.comboData\n          }));\n        } else {\n          selectedRecord[\"nallottedspeccode\"] = \"\";\n          selectedRecord[\"sversion\"] = \"\";\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              loading: false,\n              comboData: { ...returnObj.comboData\n              },\n              selectedRecord,\n              AgaramTree: [],\n              ActiveKey: [],\n              FocusKey: [],\n              OpenNodes: [],\n              Test: [],\n              SelectedTest: [],\n              selectedSpec: {},\n              Component: [],\n              selectComponent: {},\n              selectedComponent: {},\n              Specification: [],\n              selectedMaster: [],\n              subSampleDataGridList: []\n            }\n          });\n        }\n      } else if (instrumentCategory) {\n        dispatch(getTreeByProduct(mapOfRegFilterData, selectedRecord, { ...returnObj.comboData\n        }));\n      } else if (materialCategory) {\n        dispatch(getTreeByProduct(mapOfRegFilterData, selectedRecord, { ...returnObj.comboData\n        }));\n      } else if (instrument) {\n        if (selectedRecord[inputParem.nameofdefaultcomp === \"Instrument\" ? inputParem.label : inputParem.InstrumentName]) {\n          mapOfRegFilterData[\"nproductcode\"] = selectedRecord[inputParem.nameofdefaultcomp === \"Instrument\" ? inputParem.label : inputParem.InstrumentName] ? selectedRecord[inputParem.nameofdefaultcomp === \"Instrument\" ? inputParem.label : inputParem.InstrumentName].value : -1;\n          dispatch(getTreeByProduct(mapOfRegFilterData, selectedRecord, { ...returnObj.comboData\n          }));\n        } else {\n          selectedRecord[\"nallottedspeccode\"] = \"\";\n          selectedRecord[\"sversion\"] = \"\";\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              loading: false,\n              comboData: { ...returnObj.comboData\n              },\n              selectedRecord,\n              AgaramTree: [],\n              ActiveKey: [],\n              FocusKey: [],\n              OpenNodes: [],\n              Test: [],\n              SelectedTest: [],\n              selectedSpec: {},\n              Component: [],\n              selectComponent: {},\n              selectedComponent: {},\n              Specification: [],\n              selectedMaster: [],\n              addMaster: false\n            }\n          });\n        }\n      } else if (material) {\n        if (selectedRecord[inputParem.nameofdefaultcomp === \"Material\" ? inputParem.label : inputParem.MaterialName]) {\n          mapOfRegFilterData[\"nproductcode\"] = selectedRecord[inputParem.nameofdefaultcomp === \"Material\" ? inputParem.label : inputParem.MaterialName] ? selectedRecord[inputParem.nameofdefaultcomp === \"Material\" ? inputParem.label : inputParem.MaterialName].value : -1;\n          dispatch(getTreeByProduct(mapOfRegFilterData, selectedRecord, { ...returnObj.comboData\n          }));\n        } else {\n          selectedRecord[\"nallottedspeccode\"] = \"\";\n          selectedRecord[\"sversion\"] = \"\";\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              loading: false,\n              comboData: { ...returnObj.comboData\n              },\n              selectedRecord,\n              AgaramTree: [],\n              ActiveKey: [],\n              FocusKey: [],\n              OpenNodes: [],\n              Test: [],\n              SelectedTest: [],\n              selectedSpec: {},\n              Component: [],\n              selectComponent: {},\n              selectedComponent: {},\n              Specification: [],\n              selectedMaster: [],\n              addMaster: false\n            }\n          });\n        }\n      } else if (materialType) {\n        if (selectedRecord[inputParem.nameofdefaultcomp === \"Material Type\" ? inputParem.MaterialCategoryName : inputParem.label]) {\n          const productCategory = selectedRecord[inputParem.nameofdefaultcomp === \"Material Type\" ? inputParem.MaterialCategoryName : inputParem.label] ? selectedRecord[inputParem.nameofdefaultcomp === \"Material Type\" ? inputParem.MaterialCategoryName : inputParem.label] : undefined; //  mapOfRegFilterData[\"nproductcatcode\"]\n\n          if (productCategory !== undefined) {\n            if (productCategory.item.ncategorybasedflow === 3) {\n              mapOfRegFilterData[\"nproductcatcode\"] = productCategory.value;\n              mapOfRegFilterData[\"nproductcode\"] = -1;\n              dispatch(getTreeByProduct(mapOfRegFilterData, selectedRecord, { ...returnObj.comboData\n              }));\n            } else {\n              const product = selectedRecord[inputParem.nameofdefaultcomp === \"Material Type\" ? inputParem.MaterialName : inputParem.label] ? selectedRecord[inputParem.nameofdefaultcomp === \"Material Type\" ? inputParem.MaterialName : inputParem.label] : undefined;\n\n              if (product !== undefined) {\n                mapOfRegFilterData[\"nproductcatcode\"] = productCategory.value;\n                mapOfRegFilterData[\"nproductcode\"] = product.value;\n                dispatch(getTreeByProduct(mapOfRegFilterData, selectedRecord, { ...returnObj.comboData\n                }));\n              } else {\n                const product = selectedRecord[inputParem.nameofdefaultcomp === \"MaterialType\" ? inputParem.MaterialName : inputParem.label] ? selectedRecord[inputParem.nameofdefaultcomp === \"MaterialType\" ? inputParem.MaterialName : inputParem.label] : undefined;\n\n                if (product !== undefined) {\n                  mapOfRegFilterData[\"nproductcatcode\"] = productCategory.value;\n                  mapOfRegFilterData[\"nproductcode\"] = product.value;\n                  dispatch(getTreeByProduct(mapOfRegFilterData, selectedRecord, { ...returnObj.comboData\n                  }));\n                } else {\n                  selectedRecord[\"nallottedspeccode\"] = \"\";\n                  selectedRecord[\"sversion\"] = \"\";\n                  dispatch({\n                    type: DEFAULT_RETURN,\n                    payload: {\n                      loading: false,\n                      comboData: { ...returnObj.comboData\n                      },\n                      selectedRecord,\n                      AgaramTree: [],\n                      ActiveKey: [],\n                      FocusKey: [],\n                      OpenNodes: [],\n                      Test: [],\n                      SelectedTest: [],\n                      selectedSpec: {},\n                      Component: [],\n                      selectComponent: {},\n                      selectedComponent: {},\n                      Specification: [],\n                      selectedMaster: [],\n                      addMaster: false\n                    }\n                  });\n                }\n              }\n            }\n          } else {\n            selectedRecord[\"nallottedspeccode\"] = \"\";\n            selectedRecord[\"sversion\"] = \"\";\n            dispatch({\n              type: DEFAULT_RETURN,\n              payload: {\n                loading: false,\n                comboData: { ...returnObj.comboData\n                },\n                selectedRecord,\n                AgaramTree: [],\n                ActiveKey: [],\n                FocusKey: [],\n                OpenNodes: [],\n                Test: [],\n                SelectedTest: [],\n                selectedSpec: {},\n                Component: [],\n                selectComponent: {},\n                selectedComponent: {},\n                Specification: [],\n                selectedMaster: [],\n                addMaster: false\n              }\n            });\n          }\n        } else {\n          selectedRecord[\"nallottedspeccode\"] = \"\";\n          selectedRecord[\"sversion\"] = \"\";\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              loading: false,\n              comboData: { ...returnObj.comboData\n              },\n              selectedRecord,\n              AgaramTree: [],\n              ActiveKey: [],\n              FocusKey: [],\n              OpenNodes: [],\n              Test: [],\n              SelectedTest: [],\n              selectedSpec: {},\n              Component: [],\n              selectComponent: {},\n              selectedComponent: {},\n              Specification: [],\n              selectedMaster: [],\n              addMaster: false\n            }\n          });\n        }\n      } else {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false,\n            comboData: { ...returnObj.comboData\n            },\n            selectedRecord,\n            selectedMaster: [],\n            addMaster: false,\n            selectedControl: [],\n            masterComboColumnFiled: [],\n            masterDesign: [],\n            masterextractedColumnList: [],\n            masterfieldList: [],\n            masterdataList: [],\n            mastercomboComponents: [],\n            masterwithoutCombocomponent: [],\n            masterIndex: undefined,\n            screenName: inputParem.screenName,\n            loadCustomSearchFilter: false\n          }\n        });\n      }\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function validatePreview(inputParam) {\n  return function (dispatch) {\n    rsapi.post(\"dynamicpreregdesign/validatePreview\", { ...inputParam\n    }).then(response => {\n      if (response.data.rtn === \"Success\") {\n        toast.info(intl.formatMessage({\n          id: \"IDS_SUCCESSFULLYVALIDATE\"\n        }));\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n      } else {\n        toast.warn(response.data.rtn);\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false,\n            showConfirmAlert: false\n          }\n        });\n      }\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function addMasterRecord(inputParam) {\n  return function (dispatch) {\n    rsapi.post(inputParam.classUrl + \"/\" + inputParam.operation + inputParam.methodUrl, { ...inputParam.inputData\n    }).then(response => {\n      if (response.status === 202) {\n        //HttpStatus:Accepted\n        //Use this block when u need to display any success message\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n        toast.success(response.data);\n      } else if (response.status === 208) {\n        //HttpStatus:Accepted\n        //208-Already Reported\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n        toast.warn(response.data);\n      } else {\n        let masterIndex = inputParam.masterIndex;\n        let data = [];\n        const data1 = sortData(response.data);\n\n        if (inputParam.selectedControl[masterIndex].table.item.component === 'Dynamic') {\n          data = constructOptionList(data1.DynamicMasterData, inputParam.selectedControl[masterIndex].valuemember, inputParam.selectedControl[masterIndex].displaymember).get(\"OptionList\");\n        } else if (inputParam.selectedControl[masterIndex].table.item.nformcode === 137) {\n          if (inputParam.selectedControl[masterIndex].inputtype === 'backendsearchfilter' || inputParam.selectedControl[masterIndex].inputtype === 'frontendsearchfilter') {\n            //   data = constructOptionList(data1.PatientList, inputParam.selectedControl[masterIndex].valuemember, inputParam.selectedControl[masterIndex].displaymember).get(\"OptionList\")\n            data = [{\n              label: data1.SelectedPatient[inputParam.selectedControl[masterIndex].displaymember],\n              value: data1.SelectedPatient[inputParam.selectedControl[masterIndex].valuemember],\n              item: data1.SelectedPatient\n            }];\n          } else {\n            data = constructOptionList(data1.PatientList, inputParam.selectedControl[masterIndex].valuemember, inputParam.selectedControl[masterIndex].displaymember).get(\"OptionList\");\n          }\n        } else if (inputParam.selectedControl[masterIndex].table.item.nformcode === 43) {\n          if (inputParam.selectedControl[masterIndex].inputtype === 'backendsearchfilter' || inputParam.selectedControl[masterIndex].inputtype === 'frontendsearchfilter') {\n            //   data = constructOptionList(data1.PatientList, inputParam.selectedControl[masterIndex].valuemember, inputParam.selectedControl[masterIndex].displaymember).get(\"OptionList\")\n            data = [{\n              label: data1.ExternalOrder[inputParam.selectedControl[masterIndex].displaymember],\n              value: data1.ExternalOrder[inputParam.selectedControl[masterIndex].valuemember],\n              item: data1.ExternalOrder\n            }];\n          } else {\n            data = constructOptionList(data1.ExternalOrder, inputParam.selectedControl[masterIndex].valuemember, inputParam.selectedControl[masterIndex].displaymember).get(\"OptionList\");\n          }\n        } else {\n          data = constructOptionList(data1, inputParam.selectedControl[masterIndex].valuemember, inputParam.selectedControl[masterIndex].displaymember).get(\"OptionList\");\n        }\n\n        const newdata = data.map((item1, index) => {\n          item1 = { ...item1,\n            item: {\n              jsondata: { ...item1.item,\n                jsondata: { ...item1.item\n                }\n              }\n            }\n          };\n          return item1;\n        });\n\n        if (masterIndex === 0) {\n          const selectedRecord = inputParam.selectedRecord || {};\n          const selectedControl = inputParam.selectedControl || {};\n          const comboData1 = { ...newdata[0],\n            item: { ...newdata[0].item,\n              \"pkey\": selectedControl[masterIndex].valuemember,\n              \"nquerybuildertablecode\": selectedControl[masterIndex].nquerybuildertablecode,\n              \"source\": selectedControl[masterIndex].source\n            }\n          };\n          selectedRecord[selectedControl[masterIndex].label] = comboData1;\n\n          if (inputParam.selectedControl[masterIndex].table.item.nformcode === 137) {\n            selectedRecord['spatientid'] = comboData1.item['jsondata']['spatientid'];\n          }\n\n          if (inputParam.selectedControl[masterIndex].table.item.nformcode === 43) {\n            selectedRecord['nexternalordercode'] = comboData1.item['nexternalordercode'];\n          }\n\n          const comboData = inputParam.comboData;\n          comboData[selectedControl[masterIndex].label] = newdata;\n\n          if (selectedControl[masterIndex].child && selectedControl[masterIndex].child.length > 0) {\n            const childComboList = getSameRecordFromTwoArrays(inputParam.comboComponents, selectedControl[masterIndex].child, \"label\");\n            let childColumnList = {};\n            childComboList.map(columnList => {\n              const val = comboChild(inputParam.comboComponents, columnList, childColumnList, false);\n              childColumnList = val.childColumnList;\n            });\n            const parentList = getSameRecordFromTwoArrays(inputParam.withoutCombocomponent, selectedControl[masterIndex].child, \"label\");\n            const inputParem = {\n              child: selectedControl[masterIndex].child,\n              source: selectedControl[masterIndex].source,\n              primarykeyField: selectedControl[masterIndex].valuemember,\n              value: comboData1.value,\n              item: comboData1.item,\n              screenName: inputParam.screenName\n            };\n\n            if (inputParam.loadSubSample) {\n              dispatch(getChildValues(inputParem, inputParam.inputData.userinfo, selectedRecord, comboData, childComboList, childColumnList, inputParam.withoutCombocomponent, [...childComboList, ...parentList], false, false, {}, false, false, false, false, false, true, false));\n            } else {\n              dispatch(getChildValues(inputParem, inputParam.inputData.userinfo, selectedRecord, comboData, childComboList, childColumnList, inputParam.withoutCombocomponent, [...childComboList, ...parentList]));\n            }\n          } else {\n            dispatch({\n              type: DEFAULT_RETURN,\n              payload: {\n                loading: false,\n                addMaster: false,\n                [inputParam.comboName]: comboData,\n                selectedMaster: [],\n                [inputParam.selectedRecordName]: selectedRecord,\n                screenName: inputParam.screenName,\n                masterIndex: undefined\n              }\n            });\n          }\n        } else {\n          let selectedMaster = inputParam.selectedMaster || [];\n          let selectedControl = inputParam.selectedControl || [];\n          const comboData1 = { ...newdata[0],\n            item: { ...newdata[0].item,\n              \"pkey\": selectedControl[masterIndex].valuemember,\n              \"nquerybuildertablecode\": selectedControl[masterIndex].nquerybuildertablecode,\n              \"source\": selectedControl[masterIndex].source\n            }\n          };\n          selectedMaster[masterIndex - 1][selectedControl[masterIndex].label] = comboData1; // const comboData = inputParam.comboData\n          // comboData[selectedControl[masterIndex].label] = newdata\n\n          let masterdataList = inputParam.masterdataList || [];\n          masterdataList[masterIndex - 1] = { ...masterdataList[masterIndex - 1],\n            [selectedControl[masterIndex].label]: newdata\n          };\n\n          if (selectedControl[masterIndex].child && selectedControl[masterIndex].child.length > 0) {\n            const childComboList = getSameRecordFromTwoArrays(inputParam.mastercomboComponents[masterIndex - 1], selectedControl[masterIndex].child, \"label\");\n            let childColumnList = {};\n            childComboList.map(columnList => {\n              const val = comboChild(inputParam.mastercomboComponents[masterIndex - 1], columnList, childColumnList, false);\n              childColumnList = val.childColumnList;\n            });\n            const parentList = getSameRecordFromTwoArrays(inputParam.masterwithoutCombocomponent[masterIndex - 1], selectedControl[masterIndex].child, \"label\");\n            const inputParem = {\n              child: selectedControl[masterIndex].child,\n              source: selectedControl[masterIndex].source,\n              primarykeyField: selectedControl[masterIndex].valuemember,\n              value: comboData1.value,\n              item: comboData1.item,\n              screenName: inputParam.screenName\n            };\n            dispatch(getChildValuesForMasterAdd(inputParem, inputParam.inputData.userinfo, selectedMaster, inputParam.masterdataList, childComboList, childColumnList, inputParam.masterwithoutCombocomponent, [...childComboList, ...parentList], masterIndex, inputParam));\n          } else {\n            selectedControl = selectedControl && removeIndex(selectedControl, masterIndex);\n            selectedMaster = selectedMaster && removeIndex(selectedMaster, masterIndex);\n            const mastercomboComponents = inputParam.mastercomboComponents && removeIndex(inputParam.mastercomboComponents, masterIndex);\n            const masterwithoutCombocomponent = inputParam.masterwithoutCombocomponent && removeIndex(inputParam.masterwithoutCombocomponent, masterIndex);\n            const masterComboColumnFiled = inputParam.masterComboColumnFiled && removeIndex(inputParam.masterComboColumnFiled, masterIndex);\n            const masterextractedColumnList = inputParam.masterextractedColumnList && removeIndex(inputParam.masterextractedColumnList, masterIndex);\n            masterdataList = masterdataList && removeIndex(masterdataList, masterIndex);\n            const masterDesign = inputParam.masterDesign && removeIndex(inputParam.masterDesign, masterIndex);\n            const masterfieldList = inputParam.masterfieldList && removeIndex(inputParam.masterfieldList, masterIndex);\n            const screenName = selectedControl[masterIndex - 1].displayname[inputParam.userinfo.slanguagetypecode];\n            masterIndex = parseInt(masterIndex) - 1;\n            dispatch({\n              type: DEFAULT_RETURN,\n              payload: {\n                selectedControl,\n                selectedMaster,\n                mastercomboComponents,\n                masterwithoutCombocomponent,\n                masterComboColumnFiled,\n                masterextractedColumnList,\n                masterdataList,\n                masterDesign,\n                masterfieldList,\n                loading: false,\n                // addMaster: false,\n                // masterdataList,\n                // selectedMaster: {},\n                //  selectedMaster: selectedMaster,\n                screenName,\n                masterIndex\n              }\n            });\n          }\n        }\n      }\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n} // export function removeIndex(data, removeIndex) {\n//     const data1 = [...data.splice(0, removeIndex), ...data.splice(removeIndex + 1)]\n//     return data1\n// }\n\nexport function getAddMasterCombo(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    let urlArray = [];\n    let masterIndex = inputParam.masterIndex;\n    inputParam.masterComboColumnFiled[masterIndex].map(item => {\n      if (item.needService === undefined) {\n        urlArray.push(rsapi.post(item.classUrl + \"/\" + item.methodUrl, {\n          userinfo: inputParam.userinfo\n        }));\n        item[\"fetchIndex\"] = urlArray.length - 1;\n      }\n    });\n\n    if (inputParam.selectedControl[masterIndex].table.item.nformcode === 137) {\n      urlArray.push(rsapi.post(\"timezone/getLocalTimeByZone\", {\n        userinfo: inputParam.userinfo\n      }));\n    }\n\n    Axios.all(urlArray).then(response => {\n      let ComboFieldData = [];\n      let masterdataList = inputParam.masterdataList;\n      inputParam.masterComboColumnFiled[masterIndex].map((item, index) => {\n        if (item.needService === undefined) {\n          ComboFieldData = constructOptionList(item.objectValue === null ? response[item.fetchIndex].data || [] : response[item.fetchIndex].data[item.objectValue], item.foreignDataField, item.dataField, undefined, undefined, undefined);\n          masterdataList[masterIndex][item.dataField] = ComboFieldData.get(\"OptionList\");\n        } else {\n          if (item.child !== undefined) {\n            masterdataList[masterIndex][item.dataField] = [];\n          } else if (item.useService !== undefined) {\n            masterdataList[masterIndex][item.dataField] = masterdataList[masterIndex][inputParam.masterComboColumnFiled[masterIndex][item.useService].dataField];\n          }\n        }\n      });\n      let currentTime = '';\n      let selectedMaster = inputParam.selectedMaster || [];\n\n      if (inputParam.selectedControl[masterIndex].table.item.nformcode === 137) {\n        //const data=inputParam.masterComboColumnFiled.filter(x=>x.needService===undefined)\n        currentTime = rearrangeDateFormat(inputParam.userinfo, response[urlArray.length - 1].data);\n        selectedMaster[masterIndex][\"ddob\"] = rearrangeDateFormat(inputParam.userinfo, response[urlArray.length - 1].data);\n        selectedMaster[masterIndex][\"sage\"] = ageCalculate(selectedMaster[\"ddob\"]);\n        selectedMaster[masterIndex][\"nneedcurrentaddress\"] = transactionStatus.NO;\n        selectedMaster[masterIndex][\"today\"] = inputParam.userinfo;\n      }\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterIndex,\n          selectedMaster,\n          masterdataList,\n          addMaster: true,\n          loading: false,\n          selectedControl: inputParam.selectedControl,\n          masterfieldList: inputParam.masterfieldList,\n          masterextractedColumnList: inputParam.masterextractedColumnList,\n          masterprimaryKeyField: inputParam.masterprimaryKeyField,\n          masterComboColumnFiled: inputParam.masterComboColumnFiled,\n          screenName: inputParam.selectedControl[masterIndex].displayname[inputParam.userinfo.slanguagetypecode],\n          mastercomboComponents: inputParam.mastercomboComponents,\n          masterwithoutCombocomponent: inputParam.masterwithoutCombocomponent,\n          masterDesign: inputParam.masterDesign\n        }\n      });\n    }).catch(error => {\n      dispatch(initRequest(false));\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(intl.formatMessage({\n          id: error.response.data\n        }));\n      }\n    });\n  };\n}\nexport function getDynamicMasterTempalte(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    const masterIndex = inputParam.masterIndex;\n    rsapi.post(inputParam.selectedControl[masterIndex].table.item.classUrl + \"/getMasterDesign\", {\n      userinfo: { ...inputParam.userinfo,\n        nformcode: inputParam.selectedControl[inputParam.masterIndex].table.item.nformcode\n      }\n    }).then(response => {\n      const design = response.data;\n      const masterwithoutCombocomponent = inputParam.masterwithoutCombocomponent || [];\n      let data = inputParam.masterdesignData || [];\n      const masterextractedColumnList = inputParam.masterextractedColumnList || []; //masterwithoutCombocomponent[masterIndex] = []\n      // masterextractedColumnList[masterIndex] = []\n\n      data[masterIndex] = [];\n      design.slideoutdesign.map(row => {\n        row.children.map(column => {\n          column.children.map(component => {\n            if (component.hasOwnProperty(\"children\")) {\n              component.children.map(componentrow => {\n                if (componentrow.inputtype === \"combo\") {\n                  data[masterIndex].push(componentrow);\n                } else {\n                  masterwithoutCombocomponent[masterIndex].push(componentrow);\n                }\n\n                if (componentrow.mandatory === true) {\n                  if (componentrow.inputtype === \"email\") {\n                    masterextractedColumnList[masterIndex].push({\n                      \"mandatory\": true,\n                      \"idsName\": componentrow.label,\n                      \"dataField\": componentrow.label,\n                      \"alertPreFix\": this.props.intl.formatMessage({\n                        id: \"IDS_VALID\"\n                      }),\n                      \"validateFunction\": validateEmail,\n                      \"mandatoryLabel\": \"IDS_ENTER\",\n                      \"controlType\": \"textbox\"\n                    });\n                  } else {\n                    masterextractedColumnList[masterIndex].push({\n                      \"mandatory\": true,\n                      \"idsName\": componentrow.label,\n                      \"dataField\": componentrow.label,\n                      \"mandatoryLabel\": componentrow.inputtype === \"combo\" ? \"IDS_SELECT\" : \"IDS_ENTER\",\n                      \"controlType\": componentrow.inputtype === \"combo\" ? \"selectbox\" : \"textbox\"\n                    });\n                  }\n                }\n              });\n            } else {\n              component.inputtype === \"combo\" ? data[masterIndex].push(component) : masterwithoutCombocomponent[masterIndex].push(component);\n\n              if (component.mandatory === true) {\n                if (component.inputtype === \"email\") {\n                  masterextractedColumnList[masterIndex].push({\n                    \"mandatory\": true,\n                    \"idsName\": component.label,\n                    \"dataField\": component.label,\n                    \"alertPreFix\": this.props.intl.formatMessage({\n                      id: \"IDS_VALID\"\n                    }),\n                    \"validateFunction\": validateEmail,\n                    \"mandatoryLabel\": \"IDS_ENTER\",\n                    \"controlType\": \"textbox\"\n                  });\n                } else {\n                  masterextractedColumnList[masterIndex].push({\n                    \"mandatory\": true,\n                    \"idsName\": component.label,\n                    \"dataField\": component.label,\n                    \"mandatoryLabel\": component.inputtype === \"combo\" ? \"IDS_SELECT\" : \"IDS_ENTER\",\n                    \"controlType\": component.inputtype === \"combo\" ? \"selectbox\" : \"textbox\"\n                  });\n                }\n              }\n            }\n          });\n        });\n      });\n      const comboComponents = inputParam.mastercomboComponents || [];\n      comboComponents[masterIndex] = data[masterIndex];\n      let childColumnList = {};\n      data[masterIndex].map(columnList => {\n        const val = comboChild(data[masterIndex], columnList, childColumnList, true);\n        data[masterIndex] = val.data;\n        childColumnList = val.childColumnList;\n      });\n      const masterdesignData = inputParam.masterdesignData || [];\n      masterdesignData[masterIndex] = [...data[masterIndex]];\n      const masterDesign = inputParam.masterDesign || [];\n      masterDesign[masterIndex] = design;\n      inputParam = { ...inputParam,\n        masterchildColumnList: childColumnList,\n        mastercomboComponents: comboComponents,\n        masterextractedColumnList,\n        masterwithoutCombocomponent,\n        masterDesign,\n        masterdesignData\n      };\n      dispatch(getDynamicMasterComboForAdd(inputParam, true)); // dispatch({\n      //     type: DEFAULT_RETURN,\n      //     payload: {\n      //         addMaster: true,\n      //         loading: false,\n      //         selectedControl: inputParam.selectedControl,\n      //         masterchildColumnList: childColumnList,\n      //         mastercomboComponents: comboComponents,\n      //         mastermandatoryFields,\n      //         masterwithoutCombocomponent,\n      //         masterDesign: design\n      //     }\n      // })\n    }).catch(error => {\n      dispatch(initRequest(false));\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(intl.formatMessage({\n          id: error.response.data\n        }));\n      }\n    });\n  };\n}\nexport function getDynamicMasterComboForAdd(inputParam, preview) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    const masterIndex = inputParam.masterIndex;\n    const timeZoneService = rsapi.post(\"timezone/getTimeZone\");\n    const actualService = rsapi.post(\"dynamicpreregdesign/getComboValues\", {\n      parentcolumnlist: inputParam.masterdesignData[masterIndex],\n      childcolumnlist: inputParam.masterchildColumnList,\n      userinfo: inputParam.userinfo\n    });\n    let urlArray = [timeZoneService, actualService];\n    Axios.all(urlArray).then(response => {\n      const timeZoneMap = constructOptionList(response[0].data || [], \"ntimezonecode\", \"stimezoneid\", undefined, undefined, true);\n      const timeZoneList = timeZoneMap.get(\"OptionList\");\n      const defaultTimeZone = {\n        label: inputParam.userinfo.stimezoneid,\n        value: inputParam.userinfo.ntimezonecode\n      };\n      let selectedMaster = inputParam.selectedMaster || [];\n      selectedMaster[masterIndex] = selectedMaster[masterIndex] && { ...selectedMaster[masterIndex]\n      } || {};\n      const newcomboData = parentChildComboLoad(inputParam.masterdesignData[masterIndex], response[1].data, selectedMaster[masterIndex], inputParam.masterchildColumnList, inputParam.masterwithoutCombocomponent[masterIndex], undefined, inputParam.userinfo.slanguagetypecode, inputParam.userinfo);\n      const comboData1 = newcomboData.comboData;\n      const selectedRecord1 = newcomboData.selectedRecord;\n      inputParam.masterwithoutCombocomponent[masterIndex].map(componentrow => {\n        if (componentrow.inputtype === \"date\") {\n          if (componentrow.mandatory) {\n            selectedRecord1[componentrow.label] = componentrow.loadcurrentdate ? new Date() : \"\";\n          }\n        } else if (componentrow.inputtype === \"radio\") {\n          selectedRecord1[componentrow.label] = componentrow.radioOptions ? componentrow.radioOptions.tags[0].text : \"\";\n        }\n      }); //const masterchildColumnList=inputParam.masterchildColumnList || []\n      // masterchildColumnList[masterIndex] = comboData1\n\n      const masterdataList = inputParam.masterdataList || [];\n      masterdataList[masterIndex] = comboData1;\n      selectedMaster[masterIndex] = { ...selectedMaster[masterIndex],\n        selectedRecord1\n      };\n\n      if (preview) {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: { ...inputParam,\n            mastertimeZoneList: timeZoneList,\n            masterdefaultTimeZone: defaultTimeZone,\n            loading: false,\n            addMaster: true,\n            masterdataList,\n            selectedMaster,\n            mastercomboComponents: inputParam.mastercomboComponents,\n            masterwithoutCombocomponent: inputParam.masterwithoutCombocomponent,\n            masterdesignData: inputParam.masterdesignData,\n            masterIndex,\n            // masterchildColumnList: inputParam.masterchildColumnList,\n            screenName: inputParam.selectedControl[masterIndex].displayname[inputParam.userinfo.slanguagetypecode]\n          }\n        });\n      }\n    }).catch(error => {\n      console.log(\"error:\", error);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getChildValuesForAddMaster(inputParam, userinfo, selectedMaster, comboData, parentcolumnlist, childcolumnlist, withoutCombocomponent, parentListWithReadonly, masterIndex) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post('dynamicpreregdesign/getChildValues', {\n      child: inputParam.child,\n      parentdata: inputParam.item.jsondata,\n      parentsource: inputParam.source,\n      [inputParam.primarykeyField]: inputParam.value,\n      valuemember: inputParam.primarykeyField,\n      childcolumnlist,\n      userinfo,\n      parentcolumnlist\n    }).then(response => {\n      let returnObj = { ...comboData[masterIndex],\n        ...response.data\n      };\n      returnObj = parentChildComboLoad(parentListWithReadonly, returnObj, selectedMaster[masterIndex], childcolumnlist, withoutCombocomponent[masterIndex], inputParam, userinfo.slanguagetypecode, userinfo);\n      selectedMaster[masterIndex] = { ...selectedMaster[masterIndex],\n        ...returnObj.selectedRecord\n      };\n      const masterdataList = comboData || [];\n      masterdataList[masterIndex] = returnObj.comboData;\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false,\n          masterdataList,\n          selectedMaster\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getChildComboMaster(selectedMaster, filedName, item, selectedControl, masterComboColumnFiled, masterdataList, userInfo, masterIndex) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    let urlArray = [];\n    const obj = masterComboColumnFiled[masterIndex][item.childIndex];\n    urlArray.push(rsapi.post(obj.classUrl + \"/\" + obj.methodUrl, {\n      [item.foreignDataField]: selectedMaster[masterIndex][item.tableDataField],\n      userinfo: userInfo\n    }));\n    Axios.all(urlArray).then(response => {\n      selectedMaster[masterIndex][obj.dataField] = undefined;\n      const ComboFieldData = constructOptionList(obj.objectValue === null ? response[0].data || [] : response[0].data[obj.objectValue], obj.foreignDataField, obj.foreignDisplayMember, undefined, undefined, undefined);\n      masterdataList[masterIndex][obj.dataField] = ComboFieldData.get(\"OptionList\");\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          selectedMaster,\n          masterdataList,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch(initRequest(false));\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(intl.formatMessage({\n          id: error.response.data\n        }));\n      }\n    });\n  };\n}\nexport function getChildValuesForMasterAdd(inputParem, userinfo, selectedMaster, masterdataList, parentcolumnlist, childcolumnlist, withoutCombocomponent, parentListWithReadonly, masterIndex, inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post('dynamicpreregdesign/getChildValues', {\n      child: inputParem.child,\n      parentdata: inputParem.item.jsondata,\n      parentsource: inputParem.source,\n      [inputParem.primarykeyField]: inputParem.value,\n      valuemember: inputParem.primarykeyField,\n      childcolumnlist,\n      userinfo,\n      parentcolumnlist\n    }).then(response => {\n      let returnObj = { ...masterdataList[masterIndex - 1],\n        ...response.data\n      };\n      returnObj = parentChildComboLoad(parentListWithReadonly, returnObj, selectedMaster[masterIndex - 1], childcolumnlist, withoutCombocomponent[masterIndex - 1], inputParem, userinfo.slanguagetypecode, userinfo);\n      selectedMaster[masterIndex - 1] = { ...selectedMaster[masterIndex - 1],\n        ...returnObj.selectedRecord\n      };\n      masterdataList[masterIndex - 1] = returnObj.comboData; // const dataList = {\n      // }\n\n      const selectedControl = inputParam.selectedControl && removeIndex(inputParam.selectedControl, masterIndex);\n      selectedMaster = selectedMaster && removeIndex(selectedMaster, masterIndex);\n      const mastercomboComponents = inputParam.mastercomboComponents && removeIndex(inputParam.mastercomboComponents, masterIndex);\n      const masterwithoutCombocomponent = inputParam.masterwithoutCombocomponent && removeIndex(inputParam.masterwithoutCombocomponent, masterIndex);\n      const masterComboColumnFiled = inputParam.masterComboColumnFiled && removeIndex(inputParam.masterComboColumnFiled, masterIndex);\n      const masterextractedColumnList = inputParam.masterextractedColumnList && removeIndex(inputParam.masterextractedColumnList, masterIndex);\n      masterdataList = masterdataList && removeIndex(masterdataList, masterIndex);\n      const masterDesign = inputParam.masterDesign && removeIndex(inputParam.masterDesign, masterIndex);\n      const masterfieldList = inputParam.masterfieldList && removeIndex(inputParam.masterfieldList, masterIndex);\n      const screenName = selectedControl[masterIndex - 1].displayname[inputParam.userinfo.slanguagetypecode];\n      masterIndex = parseInt(masterIndex) - 1;\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          // selectedControl: inputParam.selectedControl && removeIndex(inputParam.selectedControl, masterIndex),\n          // selectedMaster: selectedMaster && removeIndex(selectedMaster, masterIndex),\n          // mastercomboComponents: inputParam.mastercomboComponents && removeIndex(inputParam.mastercomboComponents, masterIndex),\n          // masterwithoutCombocomponent: inputParam.masterwithoutCombocomponent && removeIndex(inputParam.masterwithoutCombocomponent, masterIndex),\n          // masterComboColumnFiled: inputParam.masterComboColumnFiled && removeIndex(inputParam.masterComboColumnFiled, masterIndex),\n          // masterextractedColumnList: inputParam.masterextractedColumnList && removeIndex(inputParam.masterextractedColumnList, masterIndex),\n          // masterdataList: masterdataList && removeIndex(masterdataList, masterIndex),\n          // masterDesign: inputParam.masterDesign && removeIndex(inputParam.masterDesign, masterIndex),\n          // masterfieldList: inputParam.masterfieldList && removeIndex(inputParam.masterfieldList, masterIndex),\n          // screenName: inputParam.selectedControl[masterIndex - 1].displayname[userinfo.slanguagetypecode],\n          // loading: false,\n          //masterdataList,\n          //selectedMaster,\n          // ...dataList,\n          //   masterIndex: (parseInt(masterIndex) - 1),\n          // screenName: inputParem.screenName\n          selectedControl,\n          selectedMaster,\n          mastercomboComponents,\n          masterwithoutCombocomponent,\n          masterComboColumnFiled,\n          masterextractedColumnList,\n          masterdataList,\n          masterDesign,\n          masterfieldList,\n          loading: false,\n          // addMaster: false,\n          // masterdataList,\n          // selectedMaster: {},\n          //  selectedMaster: selectedMaster,\n          screenName,\n          masterIndex\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function viewExternalportalDetail(selectedControl, comboData, userinfo) {\n  return function (dispatch) {\n    if (selectedControl.table.item.nquerybuildertablecode === 222) {\n      dispatch(initRequest(true));\n      rsapi.post('dynamicpreregdesign/getExternalportalDetail', {\n        nexternalordercode: comboData.value,\n        nquerybuildertablecode: selectedControl.table.item.nquerybuildertablecode,\n        userinfo\n      }).then(response => {\n        let Map1 = new Map();\n        response.data.Sample.map(item => {\n          const newData = response.data.Test.filter(x => x.nexternalordersamplecode === item.nexternalordersamplecode);\n          Map1.set(item.nexternalordersamplecode, Object.values(newData));\n        });\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            isDynamicViewSlideOut: true,\n            dynamicExternalSample: response.data.Sample,\n            dynamicExternalTestChild: Map1,\n            dynamicGridSelectedId: response.data.Sample.length > 0 ? Object.keys(response.data.Sample[0].nexternalordersamplecode) : null,\n            loading: false,\n            selectedDynamicViewControl: selectedControl // dynamicExternalSubSample:[],\n            // dynamicExternalTest:[]\n\n          }\n        });\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(error.response.data);\n        }\n      });\n    }\n  };\n}","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/actions/DynamicPreRegDesignAction.js"],"names":["rsapi","DEFAULT_RETURN","toast","initRequest","sortData","constructOptionList","parentChildComboLoad","rearrangeDateFormat","ageCalculate","comboChild","validateEmail","getSameRecordFromTwoArrays","removeIndex","getcomponentdata","getValidComponent","replaceChildFromChildren","designComponents","ReactComponents","SampleType","transactionStatus","Axios","getTreeByProduct","preRegDispatch","faShareAltSquare","intl","getReactInputFields","userinfo","operation","respObj","ncontrolCode","dispatch","listURL","post","all","then","response","type","payload","ReactInputFields","data","components","Period","get","ReactTables","tables","staticfiltertables","selectedFieldRecord","openModal","loading","openPortal","showFilter","ncontrolcode","catch","error","status","message","warn","selectRegistrationTemplate","template","masterData","nreactregtemplatecode","selectedTemplate","getRegistrationTemplate","selectedSampleType","nsampletypecode","value","searchedData","undefined","realSampleType","label","getEditRegTemplate","editId","jsonData","jsondata","design","selectedRecord","templateName","sregtemplatename","ntransactionstatus","DRAFT","getJsonValue","PGjsonData","Array","isArray","JSONData","map","push","JSON","parse","getTableColumns","stablename","path","columnInfo","componentData","updateComponents","staicColumns","jstaticcolumns","dynamicColumns","jdynamiccolumns","multilingualColumns","jmultilingualcolumn","numericColumns","jnumericcolumns","primaryKeyName","sprimarykeyname","defaultColumn","comboData","filterColumns","item","displayname","slanguagetypecode","columnname","default","tablecolumnname","ismultilingual","column","displaymember","valuemember","componentcode","COMBO","FRONTENDSEARCHFILTER","BACKENDSEARCHFILTER","validComponents","filterfields","customsearchfilter","parentRadioValue","parentPath","oldParentData","split","hasOwnProperty","child","radioOptions","tags","id","text","tableColumn","optionalPayload","selectedComponentpath","join","getForeignTableData","parentcolumnlist","source","filtercolumn","foriegntablename","foriegntablePK","conditionstring","inputtype","isMultiLingual","newcomboData","comboData1","selectedRecord1","masterDataValue","getPreviewTemplate","columnList","childColumnList","comboComponents","withoutCombocomponent","mapOfFilterRegData","preview","screenName","timeZoneService","actualService","filter","x","readonly","childcolumnlist","dateService","datecolumnlist","currentDate","timeZoneMap","timeZoneList","defaultTimeZone","stimezoneid","ntimezonecode","componentrow","loadcurrentdate","CLINICALTYPE","Age","name","nperiodcode","Date","loadselecteddate","hidebeforedate","hideafterdate","PRODUCT","ProductCategory","length","nproductcatcode","ncategorybasedFlow","sampletypecategorybasedflow","YES","inputParam","Product","nproductcode","INSTRUMENT","InstrumentCategory","ninstrumentcatcode","Instrument","ninstrumentcode","MATERIAL","MaterialType","nmaterialtypecode","MaterialCategory","nmaterialcatcode","Material","nmaterialcode","dateComp","ageComp","age","PROJECTSAMPLETYPE","project","nprojectMasterCode","getChildValues","inputParem","parentListWithReadonly","productCategory","product","mapOfRegFilterData","instrumentCategory","instrument","materialCategory","material","materialType","subsample","parentdata","parentsource","primarykeyField","returnObj","SubSamplecomboData","selectComponent","selectedMaster","addMaster","selectedControl","masterComboColumnFiled","masterDesign","masterextractedColumnList","masterfieldList","masterdataList","mastercomboComponents","masterwithoutCombocomponent","masterIndex","loadCustomSearchFilter","nameofdefaultcomp","ProductName","AgaramTree","ActiveKey","FocusKey","OpenNodes","Test","SelectedTest","selectedSpec","Component","selectedComponent","Specification","subSampleDataGridList","InstrumentName","MaterialName","MaterialCategoryName","ncategorybasedflow","validatePreview","rtn","info","formatMessage","showConfirmAlert","addMasterRecord","classUrl","methodUrl","inputData","success","data1","table","component","DynamicMasterData","nformcode","SelectedPatient","PatientList","ExternalOrder","newdata","item1","index","nquerybuildertablecode","childComboList","val","parentList","loadSubSample","comboName","selectedRecordName","getChildValuesForMasterAdd","parseInt","getAddMasterCombo","urlArray","needService","ComboFieldData","objectValue","fetchIndex","foreignDataField","dataField","useService","currentTime","NO","masterprimaryKeyField","getDynamicMasterTempalte","masterdesignData","slideoutdesign","row","children","mandatory","props","masterchildColumnList","getDynamicMasterComboForAdd","mastertimeZoneList","masterdefaultTimeZone","console","log","getChildValuesForAddMaster","getChildComboMaster","filedName","userInfo","obj","childIndex","tableDataField","foreignDisplayMember","viewExternalportalDetail","nexternalordercode","Map1","Map","Sample","newData","nexternalordersamplecode","set","Object","values","isDynamicViewSlideOut","dynamicExternalSample","dynamicExternalTestChild","dynamicGridSelectedId","keys","selectedDynamicViewControl"],"mappings":"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","sourcesContent":["import rsapi from '../rsapi';\r\nimport { DEFAULT_RETURN } from './LoginTypes';\r\nimport { toast } from 'react-toastify';\r\nimport { initRequest } from './LoginAction';\r\nimport { sortData, constructOptionList, parentChildComboLoad, rearrangeDateFormat, ageCalculate, comboChild, validateEmail, getSameRecordFromTwoArrays, removeIndex } from '../components/CommonScript';\r\nimport { getcomponentdata, getValidComponent, replaceChildFromChildren } from '../components/droparea/helpers';\r\nimport { designComponents, ReactComponents, SampleType, transactionStatus } from '../components/Enumeration';\r\nimport Axios from 'axios';\r\nimport { getTreeByProduct, preRegDispatch } from './RegistrationAction';\r\nimport { faShareAltSquare } from '@fortawesome/free-solid-svg-icons';\r\nimport { intl } from '../components/App';\r\n\r\nexport function getReactInputFields(userinfo, operation, respObj, ncontrolCode) {\r\n\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        const listURL = [];\r\n        listURL[0] = rsapi.post(\"dynamicpreregdesign/getReactComponents\", { userinfo })\r\n        listURL[1] = rsapi.post(\"dynamicpreregdesign/getReactInputFields\", { userinfo })\r\n        listURL[2] = rsapi.post(\"registrationsubtype/getPeriods\", { userinfo })\r\n        listURL[3] = rsapi.post(\"dynamicpreregdesign/getReactStaticFilterTables\", { userinfo })\r\n        Axios.all(listURL)\r\n            .then(response => {\r\n                respObj = respObj ? { ...respObj } : {}\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        ReactInputFields: response[1].data,\r\n                        ReactComponents: response[0].data.components,\r\n                        Period: constructOptionList(response[2].data, 'nperiodcode', 'speriodname').get(\"OptionList\"),\r\n                        ReactTables: constructOptionList(response[0].data.tables, 'nquerybuildertablecode', 'sdisplayname').get(\"OptionList\"),\r\n                        staticfiltertables: constructOptionList(response[3].data, 'nquerybuilderstaticfiltercode', 'displayname').get(\"OptionList\"),\r\n                        selectedFieldRecord: {},\r\n                        openModal: false,\r\n                        loading: false,\r\n                        openPortal: true,\r\n                        operation,\r\n                        showFilter: false,\r\n                        ncontrolcode: ncontrolCode,\r\n                        ...respObj\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function selectRegistrationTemplate(template, masterData, userinfo) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"dynamicpreregdesign/getRegistrationTemplateById\", {\r\n            nreactregtemplatecode: template.nreactregtemplatecode,\r\n            userinfo\r\n        })\r\n            .then(response => {\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: { masterData: { ...masterData, selectedTemplate: response.data }, loading: false }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function getRegistrationTemplate(selectedSampleType, masterData, userinfo) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"dynamicpreregdesign/getDynamicPreRegDesign\", {\r\n            nsampletypecode: selectedSampleType.value,\r\n            userinfo\r\n        })\r\n            .then(response => {\r\n                masterData = { ...masterData, ...response.data, searchedData: undefined }\r\n                sortData(masterData)\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData,\r\n                        realSampleType: [{\r\n                            \"label\": \"IDS_SAMPLETYPE\",\r\n                            \"value\": selectedSampleType.label,\r\n                            \"item\": selectedSampleType\r\n                        }],\r\n                        loading: false,\r\n\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function getEditRegTemplate(masterData, userinfo, editId) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"dynamicpreregdesign/getRegistrationTemplateById\", {\r\n            nreactregtemplatecode: masterData.selectedTemplate.nreactregtemplatecode,\r\n            userinfo\r\n        })\r\n            .then(response => {\r\n                let jsonData = response.data.jsondata;\r\n                    sortData(masterData)\r\n\r\n                    const respObj = {\r\n                        masterData,\r\n                        ncontrolcode: editId,\r\n                        openPortal: true,\r\n                        loading: false,\r\n                        openModal: false,\r\n                        design: jsonData,\r\n                        selectedRecord: { templateName: response.data.sregtemplatename }\r\n                    }                \r\n                if (response.data.ntransactionstatus === transactionStatus.DRAFT) {\r\n                    // let jsonData = response.data.jsondata;\r\n                    // sortData(masterData)\r\n\r\n                    // const respObj = {\r\n                    //     masterData,\r\n                    //     ncontrolcode: editId,\r\n                    //     openPortal: true,\r\n                    //     loading: false,\r\n                    //     openModal: false,\r\n                    //     design: jsonData,\r\n                    //     selectedRecord: { templateName: response.data.sregtemplatename }\r\n                    // }                \r\n                    dispatch(getReactInputFields(userinfo, \"update\", respObj))\r\n                } \r\n                else {\r\n                    dispatch(getReactInputFields(userinfo, \"viewdesign\", respObj))\r\n                   // dispatch({ type: DEFAULT_RETURN, payload: { loading: false, masterStatus: \"IDS_SELECTDRAFTRECORD\" } })\r\n                }\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getJsonValue(PGjsonData) {\r\n\r\n    if (Array.isArray(PGjsonData)) {\r\n        let JSONData = [];\r\n        PGjsonData.map(data => {\r\n            return JSONData.push(JSON.parse(data.jsondata))\r\n        })\r\n        return JSONData;\r\n    } else {\r\n        return JSON.parse(PGjsonData);\r\n    }\r\n\r\n}\r\nexport function getTableColumns(design, selectedFieldRecord, stablename,\r\n    userinfo, path, columnInfo, componentData, updateComponents, showFilter) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"dynamicpreregdesign/getTableColumns\", { \"nquerybuildertablecode\": stablename || 0, userinfo })\r\n            .then(response => {\r\n                columnInfo = columnInfo || {}\r\n                const staicColumns = response.data.jstaticcolumns || []\r\n                const dynamicColumns = response.data.jdynamiccolumns || []\r\n                const multilingualColumns = response.data.jmultilingualcolumn || []\r\n                const numericColumns = response.data.jnumericcolumns || []\r\n                const primaryKeyName = response.data.sprimarykeyname\r\n                columnInfo = {\r\n                    ...columnInfo,\r\n                    [stablename]: {\r\n                        staicColumns,\r\n                        dynamicColumns,\r\n                        multilingualColumns,\r\n                        numericColumns,\r\n                        primaryKeyName\r\n                    }\r\n                }\r\n                let defaultColumn = {};\r\n                let comboData = []\r\n                let filterColumns = [];\r\n                //  let selectedComponentpath=componentData.selectedComponentpath\r\n                staicColumns.map(item => {\r\n                    comboData.push({\r\n                        label: item.displayname[userinfo.slanguagetypecode] || item.displayname['en-US'],\r\n                        value: item.columnname,\r\n                        type: \"static\",\r\n                        item\r\n                    })\r\n                    if (item.default) {\r\n                        defaultColumn = {\r\n                            label: item.displayname[userinfo.slanguagetypecode] || item.displayname['en-US'],\r\n                            value: item.columnname,\r\n                            type: \"static\",\r\n                            item\r\n                        }\r\n                    }\r\n                })\r\n                dynamicColumns.map(item => {\r\n                    comboData.push({\r\n                        label: item.displayname[userinfo.slanguagetypecode] || item.displayname['en-US'],\r\n                        value: item.columnname,\r\n                        type: \"dynamic\",\r\n                        item\r\n                    })\r\n                    if (item.default) {\r\n                        defaultColumn = {\r\n                            label: item.displayname[userinfo.slanguagetypecode] || item.displayname['en-US'],\r\n                            value: item.columnname,\r\n                            type: \"dynamic\",\r\n                            item\r\n                        }\r\n                    }\r\n                })\r\n                multilingualColumns.map(item => {\r\n                    comboData.push({\r\n                        label: item.displayname[userinfo.slanguagetypecode] || item.displayname['en-US'],\r\n                        value: item.columnname,\r\n                        type: \"static\",\r\n                        item\r\n                    })\r\n                    if (item.default) {\r\n                        defaultColumn = {\r\n                            label: item.displayname[userinfo.slanguagetypecode] || item.displayname['en-US'],\r\n                            value: item.columnname,\r\n                            type: \"static\",\r\n                            item\r\n                        }\r\n                    }\r\n                })\r\n                filterColumns = [...comboData];\r\n                numericColumns.map(item => {\r\n                    filterColumns.push({\r\n                        label: item.displayname[userinfo.slanguagetypecode] || item.displayname['en-US'],\r\n                        value: item.tablecolumnname,\r\n                        type: \"numeric\",\r\n                        item\r\n                    })\r\n                })\r\n                if (defaultColumn.item && defaultColumn.item.ismultilingual) {\r\n                    selectedFieldRecord['isMultiLingual'] = true;\r\n                }\r\n                if (updateComponents) {\r\n                    componentData = componentData || {}\r\n                    selectedFieldRecord = { ...selectedFieldRecord, column: defaultColumn, displaymember: defaultColumn.value, valuemember: primaryKeyName };\r\n                    design = replaceChildFromChildren(design, path, selectedFieldRecord)\r\n                    if (selectedFieldRecord.componentcode !== ReactComponents.COMBO\r\n                        && selectedFieldRecord.componentcode !== ReactComponents.FRONTENDSEARCHFILTER\r\n                        && selectedFieldRecord.componentcode !== ReactComponents.BACKENDSEARCHFILTER) {\r\n                        let validComponents = getValidComponent(selectedFieldRecord, componentData.components, columnInfo);\r\n                        componentData = { ...componentData, validComponents }\r\n                    }\r\n                } else if (componentData === undefined || componentData.components === undefined) {\r\n                    componentData = componentData || {}\r\n                    if (selectedFieldRecord.componentcode === ReactComponents.FRONTENDSEARCHFILTER\r\n                        || selectedFieldRecord.componentcode === ReactComponents.BACKENDSEARCHFILTER) {\r\n                        selectedFieldRecord = { ...selectedFieldRecord, filterfields: [{ type: defaultColumn.type, ...defaultColumn.item }], customsearchfilter: [defaultColumn], displaymember: defaultColumn.value, valuemember: primaryKeyName };\r\n                    } else {\r\n                        selectedFieldRecord = { ...selectedFieldRecord, column: defaultColumn, displaymember: defaultColumn.value, valuemember: primaryKeyName };\r\n                    }\r\n\r\n                    design = replaceChildFromChildren(design, path, selectedFieldRecord)\r\n\r\n                    if (selectedFieldRecord.componentcode !== ReactComponents.COMBO\r\n                        && selectedFieldRecord.componentcode !== ReactComponents.FRONTENDSEARCHFILTER\r\n                        && selectedFieldRecord.componentcode !== ReactComponents.BACKENDSEARCHFILTER) {\r\n                        let validComponents = getValidComponent(selectedFieldRecord, componentData.components, columnInfo);\r\n                        componentData = { ...componentData, validComponents }\r\n                    }\r\n                } else {\r\n                    let validComponents = getValidComponent(selectedFieldRecord, componentData.components, columnInfo);\r\n                    let parentRadioValue = []\r\n                    if (selectedFieldRecord.componentcode === ReactComponents.FRONTENDSEARCHFILTER || selectedFieldRecord.componentcode === ReactComponents.BACKENDSEARCHFILTER) {\r\n                        if (selectedFieldRecord.parentPath) {\r\n                            let oldParentData = getcomponentdata(design, selectedFieldRecord.parentPath.split(\"-\"))\r\n                            if (oldParentData.hasOwnProperty('child')) {\r\n                                oldParentData.child.map(item => {\r\n                                    if (item.label === selectedFieldRecord.label) {\r\n                                        parentRadioValue = oldParentData.radioOptions.tags.map(item => {\r\n                                            return { value: item.id, label: item.text, item }\r\n                                        })\r\n                                    }\r\n                                })\r\n                            }\r\n                        }\r\n                    }\r\n                    componentData = { ...componentData, validComponents, parentRadioValue }\r\n                }\r\n\r\n                columnInfo = {\r\n                    ...columnInfo,\r\n                    [stablename]: { ...columnInfo[stablename], tableColumn: comboData, filterColumns }\r\n                }\r\n                let optionalPayload = {\r\n                    selectedComponentpath: Array.isArray(path) ? path.join(\"-\") : undefined,\r\n                }\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false,\r\n                        design,\r\n                        // selectedComponentpath,\r\n                        selectedFieldRecord,\r\n                        ...optionalPayload,\r\n                        tableColumn: comboData,\r\n                        filterColumns,\r\n                        columnInfo,\r\n                        primaryKeyName,\r\n                        selectedComponentpath: componentData.path,\r\n                        ...componentData,\r\n                        showFilter: showFilter\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function getForeignTableData(design, selectedFieldRecord, stablename, userinfo, path, columnInfo, componentData, updateComponents) {\r\n    return function (dispatch) {\r\n        let parentcolumnlist = [{\r\n            source: selectedFieldRecord.filtercolumn.item.foriegntablename,\r\n            valuemember: selectedFieldRecord.filtercolumn.item.foriegntablePK,\r\n            displaymember: selectedFieldRecord.filtercolumn.item.columnname,\r\n            conditionstring: selectedFieldRecord.filtercolumn.item.conditionstring,\r\n            label: \"filterData\",\r\n            inputtype: \"combo\",\r\n            isMultiLingual: selectedFieldRecord.filtercolumn.item.ismultilingual\r\n        }]\r\n        rsapi.post(\"dynamicpreregdesign/getComboValues\", { parentcolumnlist, userinfo })\r\n            .then(response => {\r\n                let comboData = [];\r\n                let selectedRecord = {};\r\n                const newcomboData = parentChildComboLoad(parentcolumnlist, response.data,\r\n                    selectedRecord, [], [], undefined, userinfo.slanguagetypecode, userinfo)\r\n                // sortData(masterData)\r\n\r\n                const comboData1 = newcomboData.comboData\r\n                const selectedRecord1 = newcomboData.selectedRecord\r\n                if (updateComponents) {\r\n                    componentData = componentData || {}\r\n                    // selectedFieldRecord = { ...selectedFieldRecord };\r\n                    design = replaceChildFromChildren(design, path, selectedFieldRecord)\r\n                    if (selectedFieldRecord.componentcode !== ReactComponents.COMBO) {\r\n                        let validComponents = getValidComponent(selectedFieldRecord, componentData.components, columnInfo);\r\n                        componentData = { ...componentData, validComponents }\r\n                    }\r\n                }\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false,\r\n                        design,\r\n                        selectedFieldRecord,\r\n                        masterDataValue: comboData,\r\n                        columnInfo,\r\n                        ...componentData,\r\n                        ...comboData1\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getPreviewTemplate(masterData, userinfo,\r\n    editId, columnList, selectedRecord, childColumnList, comboComponents,\r\n    withoutCombocomponent, openPortal, openModal, mapOfFilterRegData, preview, operation, screenName) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        const timeZoneService = rsapi.post(\"timezone/getTimeZone\");\r\n        const actualService = rsapi.post(\"dynamicpreregdesign/getComboValues\", {\r\n            parentcolumnlist: columnList ? columnList.filter(x => (x.inputtype !== 'backendsearchfilter' && x.inputtype !== 'frontendsearchfilter') && (x.readonly !== true)) : [],\r\n            childcolumnlist: childColumnList ? childColumnList : [],\r\n            userinfo\r\n        })\r\n        const dateService = rsapi.post(\"dynamicpreregdesign/dateValidation\", {\r\n            datecolumnlist: withoutCombocomponent.filter(x => x.inputtype === \"date\"),\r\n            userinfo\r\n        })\r\n\r\n        const currentDate = rsapi.post(\"timezone/getLocalTimeByZone\", {\r\n            userinfo\r\n        })\r\n        Axios.all([timeZoneService, actualService, dateService, currentDate])\r\n            .then(response => {\r\n                const timeZoneMap = constructOptionList(response[0].data || [], \"ntimezonecode\", \"stimezoneid\", undefined, undefined, true);\r\n                const timeZoneList = timeZoneMap.get(\"OptionList\");\r\n                const defaultTimeZone = { label: userinfo.stimezoneid, value: userinfo.ntimezonecode }\r\n                const newcomboData = parentChildComboLoad(columnList.filter(x => (x.inputtype !== 'backendsearchfilter' && x.inputtype !== 'frontendsearchfilter') && (x.readonly !== true)), response[1].data, selectedRecord,\r\n                    childColumnList, withoutCombocomponent, undefined, userinfo.slanguagetypecode, userinfo)\r\n                // sortData(masterData)\r\n\r\n                const comboData1 = newcomboData.comboData\r\n                const selectedRecord1 = newcomboData.selectedRecord\r\n                withoutCombocomponent.map(componentrow => {\r\n                    if (componentrow.inputtype === \"date\") {\r\n                        //  if (componentrow.mandatory) {\r\n                        if (componentrow.loadcurrentdate) {\r\n                            selectedRecord1[componentrow.label] = componentrow.loadcurrentdate ? rearrangeDateFormat(userinfo, response[3].data) : \"\";\r\n                            if (masterData.selectedTemplate && masterData.selectedTemplate.nsampletypecode === SampleType.CLINICALTYPE) {\r\n                                const Age = withoutCombocomponent.filter(item =>\r\n                                    item.name === \"Age\");\r\n                                selectedRecord[Age[0].label] = ageCalculate(selectedRecord1[componentrow.label])\r\n                            }\r\n                            selectedRecord1[componentrow.label + \"value\"] = selectedRecord1[componentrow.label];\r\n                        } else if (componentrow.nperiodcode) {\r\n                            selectedRecord1[componentrow.label + \"value\"] = response[2].data[componentrow.label] ?\r\n                                new Date(response[2].data[componentrow.label][\"datevalue\"]) : null;\r\n                            if (componentrow.loadselecteddate) {\r\n                                selectedRecord1[componentrow.label] = response[2].data[componentrow.label] ?\r\n                                    new Date(response[2].data[componentrow.label][\"datevalue\"]) : null;\r\n                            }\r\n                            //    selectedRecord1[componentrow.label]=response[2].data[componentrow.label]?\r\n                            //    new Date(response[2].data[componentrow.label]):null;\r\n                        } else {\r\n                            selectedRecord1[componentrow.label + \"value\"] = new Date();\r\n                        }\r\n\r\n                        if (componentrow.hidebeforedate) {\r\n                            selectedRecord1[componentrow.label + \"min\"] = selectedRecord1[componentrow.label + \"value\"]\r\n                        }\r\n                        if (componentrow.hideafterdate) {\r\n                            selectedRecord1[componentrow.label + \"max\"] = selectedRecord1[componentrow.label + \"value\"]\r\n                        }\r\n\r\n                        // }else{\r\n                        //     selectedRecord1[componentrow.label] = componentrow.loadcurrentdate ? new Date() : \"\";\r\n                        // }\r\n                        // if (componentrow.timezone) {\r\n                        //     sampleRegistration[\"jsondata\"][`tz${componentrow.label}`] = selectedRecord[`tz${componentrow.label}`] ?\r\n                        //         { value: selectedRecord[`tz${componentrow.label}`].value, label: selectedRecord[`tz${componentrow.label}`].label } :\r\n                        //         defaulttimezone ? defaulttimezone : -1\r\n                        // }\r\n                    }\r\n                    else if (componentrow.inputtype === \"radio\") {\r\n                        selectedRecord1[componentrow.label] = componentrow.radioOptions ?\r\n                            componentrow.radioOptions.tags[0].text : \"\";\r\n                    }\r\n\r\n                })\r\n                //console.log(\"selectedRecord1 action1:\", selectedRecord1);\r\n                if (preview) {\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            timeZoneList,\r\n                            defaultTimeZone,\r\n                            masterData,\r\n                            ncontrolcode: editId,\r\n                            openModal,\r\n                            loading: false,\r\n                            comboData: comboData1,\r\n                            selectedRecord: selectedRecord1,\r\n                            comboComponents,\r\n                            withoutCombocomponent,\r\n                            openPortal,\r\n                            columnList,\r\n                            childColumnList,\r\n                            screenName,\r\n                            operation: \"preview\"\r\n\r\n                            // childOperation:true\r\n                        }\r\n                    })\r\n                }\r\n                else {\r\n                    if (mapOfFilterRegData.nsampletypecode === SampleType.PRODUCT) {\r\n                        const ProductCategory = comboComponents.filter(x => x.name === 'Product Category');\r\n                        if (ProductCategory.length > 0) {\r\n                            const nproductcatcode = selectedRecord1[ProductCategory[0].label] &&\r\n                                selectedRecord1[ProductCategory[0].label].value;\r\n                            let ncategorybasedFlow = selectedRecord1[ProductCategory[0].label]\r\n                                && selectedRecord1[ProductCategory[0].label]['item']['jsondata']['ncategorybasedflow'];\r\n                            if (mapOfFilterRegData.sampletypecategorybasedflow === transactionStatus.YES) {\r\n                                ncategorybasedFlow = transactionStatus.YES;\r\n                            }\r\n                            if (ncategorybasedFlow !== undefined) {\r\n                                if (ncategorybasedFlow === transactionStatus.YES) {\r\n                                    mapOfFilterRegData['nproductcode'] = -1;\r\n                                    mapOfFilterRegData['nproductcatcode'] = nproductcatcode;\r\n                                    const inputParam = {\r\n                                        timeZoneList,\r\n                                        defaultTimeZone,\r\n                                        masterData,\r\n                                        ncontrolcode: editId,\r\n                                        openModal,\r\n                                        comboComponents,\r\n                                        withoutCombocomponent,\r\n                                        openPortal,\r\n                                        columnList,\r\n                                        childColumnList,\r\n                                        operation,\r\n                                        screenName,\r\n                                        // loadPreregister:true\r\n                                    }\r\n                                    dispatch(getTreeByProduct(mapOfFilterRegData,\r\n                                        selectedRecord1,\r\n                                        newcomboData.comboData, inputParam))\r\n                                }\r\n                                else {\r\n                                    const Product = comboComponents.filter(x => x.name === 'Product');\r\n                                    if (Product.length > 0) {\r\n                                        const nproductcode = selectedRecord1[Product[0].label]\r\n                                            && selectedRecord1[Product[0].label].value;\r\n\r\n                                        mapOfFilterRegData['nproductcode'] = nproductcode !== undefined ? nproductcode : -1;\r\n                                        mapOfFilterRegData['nproductcatcode'] = nproductcatcode\r\n\r\n                                        const inputParam = {\r\n                                            timeZoneList,\r\n                                            defaultTimeZone,\r\n                                            masterData,\r\n                                            ncontrolcode: editId,\r\n                                            openModal,\r\n                                            comboComponents,\r\n                                            withoutCombocomponent,\r\n                                            openPortal,\r\n                                            columnList,\r\n                                            childColumnList,\r\n                                            operation,\r\n                                            screenName,\r\n                                            // loadPreregister:true\r\n                                        }\r\n                                        dispatch(getTreeByProduct(mapOfFilterRegData,\r\n                                            selectedRecord1,\r\n                                            newcomboData.comboData, inputParam))\r\n                                    } else {\r\n                                        mapOfFilterRegData['nproductcode'] = -1;\r\n                                        mapOfFilterRegData['nproductcatcode'] = -1\r\n                                        const inputParam = {\r\n                                            timeZoneList,\r\n                                            defaultTimeZone,\r\n                                            masterData,\r\n                                            ncontrolcode: editId,\r\n                                            openModal,\r\n                                            comboComponents,\r\n                                            withoutCombocomponent,\r\n                                            openPortal,\r\n                                            columnList,\r\n                                            childColumnList,\r\n                                            operation,\r\n                                            screenName,\r\n                                            //loadPreregister:true\r\n                                        }\r\n                                        dispatch(getTreeByProduct(mapOfFilterRegData,\r\n                                            selectedRecord1,\r\n                                            newcomboData.comboData, inputParam))\r\n                                    }\r\n                                }\r\n\r\n                            } else {\r\n                                mapOfFilterRegData['nproductcode'] = -1;\r\n                                mapOfFilterRegData['nproductcatcode'] = -1\r\n                                const inputParam = {\r\n                                    timeZoneList,\r\n                                    defaultTimeZone,\r\n                                    masterData,\r\n                                    ncontrolcode: editId,\r\n                                    openModal,\r\n                                    comboComponents,\r\n                                    withoutCombocomponent,\r\n                                    openPortal,\r\n                                    columnList,\r\n                                    childColumnList,\r\n                                    operation,\r\n                                    screenName,\r\n                                    //loadPreregister:true\r\n                                }\r\n                                dispatch(getTreeByProduct(mapOfFilterRegData,\r\n                                    selectedRecord1,\r\n                                    newcomboData.comboData, inputParam))\r\n                            }\r\n                        } else {\r\n                            mapOfFilterRegData['nproductcode'] = -1;\r\n                            mapOfFilterRegData['nproductcatcode'] = -1\r\n                            const inputParam = {\r\n                                timeZoneList,\r\n                                defaultTimeZone,\r\n                                masterData,\r\n                                ncontrolcode: editId,\r\n                                openModal,\r\n                                comboComponents,\r\n                                withoutCombocomponent,\r\n                                openPortal,\r\n                                columnList,\r\n                                childColumnList,\r\n                                operation,\r\n                                screenName,\r\n                                //loadPreregister:true\r\n                            }\r\n                            //console.log(\"selectedRecord1 action2:\", selectedRecord1);\r\n                            dispatch(getTreeByProduct(mapOfFilterRegData,\r\n                                selectedRecord1,\r\n                                newcomboData.comboData, inputParam))\r\n                        }\r\n                    } else if (mapOfFilterRegData.nsampletypecode === SampleType.INSTRUMENT) {\r\n                        const InstrumentCategory = comboComponents.filter(x => x.name === 'Instrument Category');\r\n                        if (InstrumentCategory.length > 0) {\r\n                            const ninstrumentcatcode = selectedRecord1[InstrumentCategory[0].label] &&\r\n                                selectedRecord1[InstrumentCategory[0].label].value\r\n                            let ncategorybasedFlow = selectedRecord1[InstrumentCategory[0].label]\r\n                                && selectedRecord1[InstrumentCategory[0].label]['item']['jsondata']['ncategorybasedflow'];\r\n\r\n                            if (mapOfFilterRegData.sampletypecategorybasedflow === transactionStatus.YES) {\r\n                                ncategorybasedFlow = transactionStatus.YES;\r\n                            }\r\n                            if (ncategorybasedFlow !== undefined) {\r\n                                if (ncategorybasedFlow === transactionStatus.YES) {\r\n                                    mapOfFilterRegData['nproductcode'] = -1;\r\n                                    mapOfFilterRegData['nproductcatcode'] = ninstrumentcatcode\r\n                                    const inputParam = {\r\n                                        timeZoneList,\r\n                                        defaultTimeZone,\r\n                                        masterData,\r\n                                        ncontrolcode: editId,\r\n                                        openModal,\r\n                                        comboComponents,\r\n                                        withoutCombocomponent,\r\n                                        openPortal,\r\n                                        columnList,\r\n                                        childColumnList,\r\n                                        operation,\r\n                                        screenName,\r\n                                        // loadPreregister:true\r\n                                    }\r\n                                    dispatch(getTreeByProduct(mapOfFilterRegData,\r\n                                        selectedRecord1,\r\n                                        newcomboData.comboData, inputParam))\r\n                                }\r\n                                else {\r\n                                    const Instrument = comboComponents.filter(x => x.name === 'Instrument');\r\n                                    if (Instrument.length > 0) {\r\n                                        const ninstrumentcode = selectedRecord1[Instrument[0].label]\r\n                                            && selectedRecord1[Instrument[0].label].value;\r\n\r\n                                        mapOfFilterRegData['nproductcode'] = ninstrumentcode !== undefined ? ninstrumentcode : -1;\r\n                                        mapOfFilterRegData['nproductcatcode'] = ninstrumentcatcode\r\n\r\n                                        const inputParam = {\r\n                                            timeZoneList,\r\n                                            defaultTimeZone,\r\n                                            masterData,\r\n                                            ncontrolcode: editId,\r\n                                            openModal,\r\n                                            comboComponents,\r\n                                            withoutCombocomponent,\r\n                                            openPortal,\r\n                                            columnList,\r\n                                            childColumnList,\r\n                                            operation,\r\n                                            screenName,\r\n                                            //loadPreregister:true\r\n                                        }\r\n                                        dispatch(getTreeByProduct(mapOfFilterRegData,\r\n                                            selectedRecord1,\r\n                                            newcomboData.comboData, inputParam))\r\n                                    } else {\r\n                                        mapOfFilterRegData['nproductcode'] = -1;\r\n                                        mapOfFilterRegData['nproductcatcode'] = -1\r\n                                        const inputParam = {\r\n                                            timeZoneList,\r\n                                            defaultTimeZone,\r\n                                            masterData,\r\n                                            ncontrolcode: editId,\r\n                                            openModal,\r\n                                            comboComponents,\r\n                                            withoutCombocomponent,\r\n                                            openPortal,\r\n                                            columnList,\r\n                                            childColumnList,\r\n                                            operation,\r\n                                            screenName,\r\n                                            //loadPreregister:true\r\n                                        }\r\n                                        dispatch(getTreeByProduct(mapOfFilterRegData,\r\n                                            selectedRecord1,\r\n                                            newcomboData.comboData, inputParam))\r\n                                    }\r\n                                }\r\n\r\n                            } else {\r\n                                mapOfFilterRegData['nproductcode'] = -1;\r\n                                mapOfFilterRegData['nproductcatcode'] = -1\r\n                                const inputParam = {\r\n                                    timeZoneList,\r\n                                    defaultTimeZone,\r\n                                    masterData,\r\n                                    ncontrolcode: editId,\r\n                                    openModal,\r\n                                    comboComponents,\r\n                                    withoutCombocomponent,\r\n                                    openPortal,\r\n                                    columnList,\r\n                                    childColumnList,\r\n                                    operation,\r\n                                    screenName,\r\n                                    // loadPreregister:true\r\n                                }\r\n                                dispatch(getTreeByProduct(mapOfFilterRegData,\r\n                                    selectedRecord1,\r\n                                    newcomboData.comboData, inputParam))\r\n                            }\r\n                        } else {\r\n                            mapOfFilterRegData['nproductcode'] = -1;\r\n                            mapOfFilterRegData['nproductcatcode'] = -1\r\n                            const inputParam = {\r\n                                timeZoneList,\r\n                                defaultTimeZone,\r\n                                masterData,\r\n                                ncontrolcode: editId,\r\n                                openModal,\r\n                                comboComponents,\r\n                                withoutCombocomponent,\r\n                                openPortal,\r\n                                columnList,\r\n                                childColumnList,\r\n                                operation,\r\n                                screenName,\r\n                                // loadPreregister:true\r\n                            }\r\n                            dispatch(getTreeByProduct(mapOfFilterRegData,\r\n                                selectedRecord1,\r\n                                newcomboData.comboData, inputParam))\r\n                        }\r\n                    } else if (mapOfFilterRegData.nsampletypecode === SampleType.MATERIAL) {\r\n                        const MaterialType = comboComponents.filter(x => x.name === 'Material Type');\r\n                        if (MaterialType.length > 0) {\r\n                            const nmaterialtypecode = selectedRecord1[MaterialType[0].label] &&\r\n                                selectedRecord1[MaterialType[0].label].value\r\n                            if (nmaterialtypecode !== undefined) {\r\n                                const MaterialCategory = comboComponents.filter(x => x.name === 'Material Category');\r\n                                if (MaterialCategory.length > 0) {\r\n                                    const nmaterialcatcode = selectedRecord1[MaterialCategory[0].label] &&\r\n                                        selectedRecord1[MaterialCategory[0].label].value\r\n                                    let ncategorybasedFlow = selectedRecord1[MaterialCategory[0].label]\r\n                                        && selectedRecord1[MaterialCategory[0].label]['item']['jsondata']['ncategorybasedflow'];\r\n\r\n                                    if (mapOfFilterRegData.sampletypecategorybasedflow === transactionStatus.YES) {\r\n                                        ncategorybasedFlow = transactionStatus.YES;\r\n                                    }\r\n                                    if (ncategorybasedFlow !== undefined) {\r\n                                        if (ncategorybasedFlow === transactionStatus.YES) {\r\n                                            mapOfFilterRegData['nproductcode'] = -1;\r\n                                            mapOfFilterRegData['nproductcatcode'] = nmaterialcatcode\r\n                                            const inputParam = {\r\n                                                timeZoneList,\r\n                                                defaultTimeZone,\r\n                                                masterData,\r\n                                                ncontrolcode: editId,\r\n                                                openModal,\r\n                                                comboComponents,\r\n                                                withoutCombocomponent,\r\n                                                openPortal,\r\n                                                columnList,\r\n                                                childColumnList,\r\n                                                operation,\r\n                                                screenName,\r\n                                                // loadPreregister:true\r\n                                            }\r\n                                            dispatch(getTreeByProduct(mapOfFilterRegData,\r\n                                                selectedRecord1,\r\n                                                newcomboData.comboData, inputParam))\r\n                                        }\r\n                                        else {\r\n                                            const Material = comboComponents.filter(x => x.name === 'Material');\r\n                                            if (Material.length > 0) {\r\n                                                const nmaterialcode = selectedRecord1[Material[0].label]\r\n                                                    && selectedRecord1[Material[0].label].value;\r\n\r\n                                                mapOfFilterRegData['nproductcode'] = nmaterialcode !== undefined ? nmaterialcode : -1;\r\n                                                mapOfFilterRegData['nproductcatcode'] = nmaterialcatcode\r\n\r\n                                                const inputParam = {\r\n                                                    timeZoneList,\r\n                                                    defaultTimeZone,\r\n                                                    masterData,\r\n                                                    ncontrolcode: editId,\r\n                                                    openModal,\r\n                                                    comboComponents,\r\n                                                    withoutCombocomponent,\r\n                                                    openPortal,\r\n                                                    columnList,\r\n                                                    childColumnList,\r\n                                                    operation,\r\n                                                    screenName,\r\n                                                    // loadPreregister:true\r\n                                                }\r\n                                                dispatch(getTreeByProduct(mapOfFilterRegData,\r\n                                                    selectedRecord1,\r\n                                                    newcomboData.comboData, inputParam))\r\n                                            } else {\r\n                                                mapOfFilterRegData['nproductcode'] = -1;\r\n                                                mapOfFilterRegData['nproductcatcode'] = -1\r\n                                                const inputParam = {\r\n                                                    timeZoneList,\r\n                                                    defaultTimeZone,\r\n                                                    masterData,\r\n                                                    ncontrolcode: editId,\r\n                                                    openModal,\r\n                                                    comboComponents,\r\n                                                    withoutCombocomponent,\r\n                                                    openPortal,\r\n                                                    columnList,\r\n                                                    childColumnList,\r\n                                                    operation,\r\n                                                    screenName,\r\n                                                    //loadPreregister:true\r\n                                                }\r\n                                                dispatch(getTreeByProduct(mapOfFilterRegData,\r\n                                                    selectedRecord1,\r\n                                                    newcomboData.comboData, inputParam))\r\n                                            }\r\n                                        }\r\n\r\n                                    } else {\r\n                                        mapOfFilterRegData['nproductcode'] = -1;\r\n                                        mapOfFilterRegData['nproductcatcode'] = -1\r\n                                        const inputParam = {\r\n                                            timeZoneList,\r\n                                            defaultTimeZone,\r\n                                            masterData,\r\n                                            ncontrolcode: editId,\r\n                                            openModal,\r\n                                            comboComponents,\r\n                                            withoutCombocomponent,\r\n                                            openPortal,\r\n                                            columnList,\r\n                                            childColumnList,\r\n                                            operation,\r\n                                            screenName,\r\n                                            // loadPreregister:true\r\n                                        }\r\n                                        dispatch(getTreeByProduct(mapOfFilterRegData,\r\n                                            selectedRecord1,\r\n                                            newcomboData.comboData, inputParam))\r\n                                    }\r\n                                } else {\r\n                                    mapOfFilterRegData['nproductcode'] = -1;\r\n                                    mapOfFilterRegData['nproductcatcode'] = -1\r\n                                    const inputParam = {\r\n                                        timeZoneList,\r\n                                        defaultTimeZone,\r\n                                        masterData,\r\n                                        ncontrolcode: editId,\r\n                                        openModal,\r\n                                        comboComponents,\r\n                                        withoutCombocomponent,\r\n                                        openPortal,\r\n                                        columnList,\r\n                                        childColumnList,\r\n                                        operation,\r\n                                        screenName,\r\n                                        //loadPreregister:true\r\n                                    }\r\n                                    dispatch(getTreeByProduct(mapOfFilterRegData,\r\n                                        selectedRecord1,\r\n                                        newcomboData.comboData, inputParam))\r\n                                }\r\n\r\n                            }\r\n\r\n                        } else {\r\n                            mapOfFilterRegData['nproductcode'] = -1;\r\n                            mapOfFilterRegData['nproductcatcode'] = -1\r\n                            const inputParam = {\r\n                                timeZoneList,\r\n                                defaultTimeZone,\r\n                                masterData,\r\n                                ncontrolcode: editId,\r\n                                openModal,\r\n                                comboComponents,\r\n                                withoutCombocomponent,\r\n                                openPortal,\r\n                                columnList,\r\n                                childColumnList,\r\n                                operation,\r\n                                screenName,\r\n                                // loadPreregister:true\r\n                            }\r\n                            dispatch(getTreeByProduct(mapOfFilterRegData,\r\n                                selectedRecord1,\r\n                                newcomboData.comboData, inputParam))\r\n                        }\r\n\r\n                    }\r\n                    else if (mapOfFilterRegData.nsampletypecode === SampleType.CLINICALTYPE) {\r\n                        const ProductCategory = comboComponents.filter(x => x.name === 'Product Category');\r\n                        const dateComp = withoutCombocomponent.filter(item => item.name === \"Date Of Birth\");\r\n                        if (dateComp[0].label !== undefined) {\r\n                            const ageComp = withoutCombocomponent.filter(item => item.name === \"Age\");\r\n                            const age = ageCalculate(selectedRecord1[dateComp[0].label]);\r\n                            selectedRecord1[ageComp[0].label] = age;\r\n                        }\r\n                        if (ProductCategory.length > 0) {\r\n                            const nproductcatcode = selectedRecord1[ProductCategory[0].label] ?\r\n                                selectedRecord1[ProductCategory[0].label].value : -1;\r\n                            let ncategorybasedFlow = selectedRecord1[ProductCategory[0].label]\r\n                                ? selectedRecord1[ProductCategory[0].label]['item']['jsondata']['ncategorybasedflow']\r\n                                : undefined;\r\n                            if (mapOfFilterRegData.sampletypecategorybasedflow === transactionStatus.YES) {\r\n                                ncategorybasedFlow = transactionStatus.YES;\r\n                            }\r\n                            if (ncategorybasedFlow !== undefined) {\r\n                                if (ncategorybasedFlow === transactionStatus.YES) {\r\n                                    mapOfFilterRegData['nproductcode'] = -1;\r\n                                    mapOfFilterRegData['nproductcatcode'] = nproductcatcode\r\n                                    const inputParam = {\r\n                                        timeZoneList,\r\n                                        defaultTimeZone,\r\n                                        masterData,\r\n                                        ncontrolcode: editId,\r\n                                        openModal,\r\n                                        comboComponents,\r\n                                        withoutCombocomponent,\r\n                                        openPortal,\r\n                                        columnList,\r\n                                        childColumnList,\r\n                                        operation,\r\n                                        screenName,\r\n                                        // loadPreregister:true\r\n                                    }\r\n                                    dispatch(getTreeByProduct(mapOfFilterRegData,\r\n                                        selectedRecord1,\r\n                                        newcomboData.comboData, inputParam))\r\n                                }\r\n                                else {\r\n                                    const Product = comboComponents.filter(x => x.name === 'Product');\r\n                                    if (Product.length > 0) {\r\n                                        const nproductcode = selectedRecord1[Product[0].label]\r\n                                            && selectedRecord1[Product[0].label].value;\r\n\r\n                                        mapOfFilterRegData['nproductcode'] = nproductcode !== undefined ? nproductcode : -1;\r\n                                        mapOfFilterRegData['nproductcatcode'] = nproductcatcode\r\n\r\n                                        const inputParam = {\r\n                                            timeZoneList,\r\n                                            defaultTimeZone,\r\n                                            masterData,\r\n                                            ncontrolcode: editId,\r\n                                            openModal,\r\n                                            comboComponents,\r\n                                            withoutCombocomponent,\r\n                                            openPortal,\r\n                                            columnList,\r\n                                            childColumnList,\r\n                                            operation,\r\n                                            screenName,\r\n                                            // loadPreregister:true\r\n                                        }\r\n                                        dispatch(getTreeByProduct(mapOfFilterRegData,\r\n                                            selectedRecord1,\r\n                                            newcomboData.comboData, inputParam))\r\n                                    } else {\r\n                                        mapOfFilterRegData['nproductcode'] = -1;\r\n                                        mapOfFilterRegData['nproductcatcode'] = -1\r\n                                        const inputParam = {\r\n                                            timeZoneList,\r\n                                            defaultTimeZone,\r\n                                            masterData,\r\n                                            ncontrolcode: editId,\r\n                                            openModal,\r\n                                            comboComponents,\r\n                                            withoutCombocomponent,\r\n                                            openPortal,\r\n                                            columnList,\r\n                                            childColumnList,\r\n                                            operation,\r\n                                            screenName,\r\n                                            //loadPreregister:true\r\n                                        }\r\n                                        dispatch(getTreeByProduct(mapOfFilterRegData,\r\n                                            selectedRecord1,\r\n                                            newcomboData.comboData, inputParam))\r\n                                    }\r\n                                }\r\n\r\n                            } else {\r\n                                mapOfFilterRegData['nproductcode'] = -1;\r\n                                mapOfFilterRegData['nproductcatcode'] = -1\r\n                                const inputParam = {\r\n                                    timeZoneList,\r\n                                    defaultTimeZone,\r\n                                    masterData,\r\n                                    ncontrolcode: editId,\r\n                                    openModal,\r\n                                    comboComponents,\r\n                                    withoutCombocomponent,\r\n                                    openPortal,\r\n                                    columnList,\r\n                                    childColumnList,\r\n                                    operation,\r\n                                    screenName,\r\n                                    //loadPreregister:true\r\n                                }\r\n                                dispatch(getTreeByProduct(mapOfFilterRegData,\r\n                                    selectedRecord1,\r\n                                    newcomboData.comboData, inputParam))\r\n                            }\r\n                        } else {\r\n                            mapOfFilterRegData['nproductcode'] = -1;\r\n                            mapOfFilterRegData['nproductcatcode'] = -1\r\n                            const inputParam = {\r\n                                timeZoneList,\r\n                                defaultTimeZone,\r\n                                masterData,\r\n                                ncontrolcode: editId,\r\n                                openModal,\r\n                                comboComponents,\r\n                                withoutCombocomponent,\r\n                                openPortal,\r\n                                columnList,\r\n                                childColumnList,\r\n                                operation,\r\n                                screenName,\r\n                                //loadPreregister:true\r\n                            }\r\n                            //console.log(\"selectedRecord1 action2:\", selectedRecord1);\r\n                            dispatch(getTreeByProduct(mapOfFilterRegData,\r\n                                selectedRecord1,\r\n                                newcomboData.comboData, inputParam))\r\n                        }\r\n                    }\r\n                    else if (mapOfFilterRegData.nsampletypecode === SampleType.PROJECTSAMPLETYPE) {\r\n                        const ProductCategory = comboComponents.filter(x => x.name === 'Product Category');\r\n                        const project = comboComponents.filter(x => x.name === 'Project Code');\r\n                        let nprojectMasterCode = -1;\r\n                        if (project && project.length > 0 && mapOfFilterRegData['nprojectSpecReqd'] == transactionStatus.YES) {\r\n                            nprojectMasterCode = selectedRecord1[project[0].label] &&\r\n                                selectedRecord1[project[0].label].value;\r\n                        }\r\n\r\n                        if (ProductCategory.length > 0) {\r\n                            const nproductcatcode = selectedRecord1[ProductCategory[0].label] &&\r\n                                selectedRecord1[ProductCategory[0].label].value;\r\n                            let ncategorybasedFlow = selectedRecord1[ProductCategory[0].label]\r\n                                && selectedRecord1[ProductCategory[0].label]['item']['jsondata']['ncategorybasedflow'];\r\n                            if (mapOfFilterRegData.sampletypecategorybasedflow === transactionStatus.YES) {\r\n                                ncategorybasedFlow = transactionStatus.YES;\r\n                            }\r\n\r\n                            if (ncategorybasedFlow !== undefined) {\r\n                                if (ncategorybasedFlow === 3) {\r\n                                    mapOfFilterRegData['nproductcode'] = -1;\r\n                                    mapOfFilterRegData['nproductcatcode'] = nproductcatcode;\r\n                                    mapOfFilterRegData['nprojectmastercode'] = nprojectMasterCode || -1;\r\n                                    const inputParam = {\r\n                                        timeZoneList,\r\n                                        defaultTimeZone,\r\n                                        masterData,\r\n                                        ncontrolcode: editId,\r\n                                        openModal,\r\n                                        comboComponents,\r\n                                        withoutCombocomponent,\r\n                                        openPortal,\r\n                                        columnList,\r\n                                        childColumnList,\r\n                                        operation,\r\n                                        screenName,\r\n                                        // loadPreregister:true\r\n                                    }\r\n                                    dispatch(getTreeByProduct(mapOfFilterRegData,\r\n                                        selectedRecord1,\r\n                                        newcomboData.comboData, inputParam))\r\n                                }\r\n                                else {\r\n                                    const Product = comboComponents.filter(x => x.name === 'Product');\r\n                                    if (Product.length > 0) {\r\n                                        const nproductcode = selectedRecord1[Product[0].label]\r\n                                            && selectedRecord1[Product[0].label].value;\r\n\r\n                                        mapOfFilterRegData['nproductcode'] = nproductcode !== undefined ? nproductcode : -1;\r\n                                        mapOfFilterRegData['nproductcatcode'] = nproductcatcode;\r\n                                        mapOfFilterRegData['nprojectmastercode'] = nprojectMasterCode || -1;\r\n\r\n                                        const inputParam = {\r\n                                            timeZoneList,\r\n                                            defaultTimeZone,\r\n                                            masterData,\r\n                                            ncontrolcode: editId,\r\n                                            openModal,\r\n                                            comboComponents,\r\n                                            withoutCombocomponent,\r\n                                            openPortal,\r\n                                            columnList,\r\n                                            childColumnList,\r\n                                            operation,\r\n                                            screenName,\r\n                                            // loadPreregister:true\r\n                                        }\r\n                                        dispatch(getTreeByProduct(mapOfFilterRegData,\r\n                                            selectedRecord1,\r\n                                            newcomboData.comboData, inputParam))\r\n                                    } else {\r\n                                        mapOfFilterRegData['nproductcode'] = -1;\r\n                                        mapOfFilterRegData['nproductcatcode'] = -1;\r\n                                        mapOfFilterRegData['nprojectmastercode'] = nprojectMasterCode || -1;\r\n                                        const inputParam = {\r\n                                            timeZoneList,\r\n                                            defaultTimeZone,\r\n                                            masterData,\r\n                                            ncontrolcode: editId,\r\n                                            openModal,\r\n                                            comboComponents,\r\n                                            withoutCombocomponent,\r\n                                            openPortal,\r\n                                            columnList,\r\n                                            childColumnList,\r\n                                            operation,\r\n                                            screenName,\r\n                                            //loadPreregister:true\r\n                                        }\r\n                                        dispatch(getTreeByProduct(mapOfFilterRegData,\r\n                                            selectedRecord1,\r\n                                            newcomboData.comboData, inputParam))\r\n                                    }\r\n                                }\r\n\r\n                            } else {\r\n                                mapOfFilterRegData['nproductcode'] = -1;\r\n                                mapOfFilterRegData['nproductcatcode'] = -1;\r\n                                mapOfFilterRegData['nprojectmastercode'] = nprojectMasterCode || -1;\r\n                                const inputParam = {\r\n                                    timeZoneList,\r\n                                    defaultTimeZone,\r\n                                    masterData,\r\n                                    ncontrolcode: editId,\r\n                                    openModal,\r\n                                    comboComponents,\r\n                                    withoutCombocomponent,\r\n                                    openPortal,\r\n                                    columnList,\r\n                                    childColumnList,\r\n                                    operation,\r\n                                    screenName,\r\n                                    //loadPreregister:true\r\n                                }\r\n                                dispatch(getTreeByProduct(mapOfFilterRegData,\r\n                                    selectedRecord1,\r\n                                    newcomboData.comboData, inputParam))\r\n                            }\r\n                        }\r\n                        else {\r\n                            mapOfFilterRegData['nproductcode'] = -1;\r\n                            mapOfFilterRegData['nproductcatcode'] = -1;\r\n                            mapOfFilterRegData['nprojectmastercode'] = nprojectMasterCode || -1;\r\n                            const inputParam = {\r\n                                timeZoneList,\r\n                                defaultTimeZone,\r\n                                masterData,\r\n                                ncontrolcode: editId,\r\n                                openModal,\r\n                                comboComponents,\r\n                                withoutCombocomponent,\r\n                                openPortal,\r\n                                columnList,\r\n                                childColumnList,\r\n                                operation,\r\n                                screenName,\r\n                                //loadPreregister:true\r\n                            }\r\n                            //console.log(\"selectedRecord1 action2:\", selectedRecord1);\r\n                            dispatch(getTreeByProduct(mapOfFilterRegData,\r\n                                selectedRecord1,\r\n                                newcomboData.comboData, inputParam))\r\n                        }\r\n                    }\r\n\r\n                }\r\n            })\r\n            .catch(error => {\r\n                //console.log(\"error:\", error);\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getChildValues(inputParem,\r\n    userinfo, selectedRecord, comboData, parentcolumnlist,\r\n    childcolumnlist, withoutCombocomponent, parentListWithReadonly,\r\n    productCategory, product, mapOfRegFilterData,\r\n    instrumentCategory, instrument, materialCategory,\r\n    material, materialType, subsample, project) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post('dynamicpreregdesign/getChildValues', {\r\n            child: inputParem.child,\r\n            parentdata: inputParem.item.jsondata,\r\n            parentsource: inputParem.source,\r\n            [inputParem.primarykeyField]: inputParem.value,\r\n            valuemember: inputParem.primarykeyField,\r\n            childcolumnlist,\r\n            userinfo,\r\n            parentcolumnlist\r\n        })\r\n            .then(response => {\r\n                let returnObj = { ...comboData, ...response.data }\r\n                returnObj = parentChildComboLoad(parentListWithReadonly, returnObj, selectedRecord, childcolumnlist, withoutCombocomponent, inputParem, userinfo.slanguagetypecode, userinfo)\r\n                selectedRecord = { ...selectedRecord, ...returnObj.selectedRecord }\r\n                if (subsample) {\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            loading: false,\r\n                            SubSamplecomboData: { ...returnObj.comboData },\r\n                            selectComponent: selectedRecord,\r\n                            screenName: inputParem.screenName,\r\n                            selectedMaster: [],\r\n                            addMaster: false,\r\n                            selectedControl: [],\r\n                            masterComboColumnFiled: [],\r\n                            masterDesign: [],\r\n                            masterextractedColumnList: [],\r\n                            masterfieldList: [],\r\n                            masterdataList: [],\r\n                            mastercomboComponents: [],\r\n                            masterwithoutCombocomponent: [],\r\n                            masterIndex: undefined,\r\n                            loadCustomSearchFilter: false,\r\n                        }\r\n                    })\r\n                }\r\n                else if (project) {\r\n                    dispatch(getTreeByProduct(mapOfRegFilterData, selectedRecord, { ...returnObj.comboData }));\r\n                }\r\n                else if (productCategory) {\r\n                    dispatch(getTreeByProduct(mapOfRegFilterData, selectedRecord, { ...returnObj.comboData }));\r\n                }\r\n                else if (product) {\r\n                    if (selectedRecord[inputParem.nameofdefaultcomp === \"Product\" ? inputParem.label : inputParem.ProductName]) {\r\n                        mapOfRegFilterData[\"nproductcode\"] = selectedRecord[inputParem.nameofdefaultcomp === \"Product\" ? inputParem.label : inputParem.ProductName] ? selectedRecord[inputParem.nameofdefaultcomp === \"Product\" ? inputParem.label : inputParem.ProductName].value : -1\r\n                        dispatch(getTreeByProduct(mapOfRegFilterData, selectedRecord, { ...returnObj.comboData }))\r\n                    } else {\r\n                        selectedRecord[\"nallottedspeccode\"] = \"\"\r\n                        selectedRecord[\"sversion\"] = \"\"\r\n                        dispatch({\r\n                            type: DEFAULT_RETURN,\r\n                            payload: {\r\n                                loading: false,\r\n                                comboData: { ...returnObj.comboData },\r\n                                selectedRecord,\r\n                                AgaramTree: [],\r\n                                ActiveKey: [],\r\n                                FocusKey: [],\r\n                                OpenNodes: [],\r\n                                Test: [],\r\n                                SelectedTest: [],\r\n                                selectedSpec: {},\r\n                                Component: [],\r\n                                selectComponent: {},\r\n                                selectedComponent: {},\r\n                                Specification: [],\r\n                                selectedMaster: [],\r\n                                subSampleDataGridList: []\r\n                            }\r\n                        })\r\n                    }\r\n                }\r\n                else if (instrumentCategory) {\r\n                    dispatch(getTreeByProduct(mapOfRegFilterData, selectedRecord, { ...returnObj.comboData }))\r\n                }\r\n                else if (materialCategory) {\r\n                    dispatch(getTreeByProduct(mapOfRegFilterData, selectedRecord, { ...returnObj.comboData }))\r\n                }\r\n                else if (instrument) {\r\n                    if (selectedRecord[inputParem.nameofdefaultcomp === \"Instrument\" ? inputParem.label : inputParem.InstrumentName]) {\r\n                        mapOfRegFilterData[\"nproductcode\"] = selectedRecord[inputParem.nameofdefaultcomp === \"Instrument\" ?\r\n                            inputParem.label : inputParem.InstrumentName] ? selectedRecord[inputParem.nameofdefaultcomp === \"Instrument\" ? inputParem.label : inputParem.InstrumentName].value : -1\r\n                        dispatch(getTreeByProduct(mapOfRegFilterData, selectedRecord, { ...returnObj.comboData }))\r\n                    } else {\r\n                        selectedRecord[\"nallottedspeccode\"] = \"\"\r\n                        selectedRecord[\"sversion\"] = \"\"\r\n                        dispatch({\r\n                            type: DEFAULT_RETURN,\r\n                            payload: {\r\n                                loading: false,\r\n                                comboData: { ...returnObj.comboData },\r\n                                selectedRecord,\r\n                                AgaramTree: [],\r\n                                ActiveKey: [],\r\n                                FocusKey: [],\r\n                                OpenNodes: [],\r\n                                Test: [],\r\n                                SelectedTest: [],\r\n                                selectedSpec: {},\r\n                                Component: [],\r\n                                selectComponent: {},\r\n                                selectedComponent: {},\r\n                                Specification: [],\r\n                                selectedMaster: [],\r\n                                addMaster: false\r\n                            }\r\n                        })\r\n                    }\r\n                }\r\n                else if (material) {\r\n                    if (selectedRecord[inputParem.nameofdefaultcomp === \"Material\" ? inputParem.label : inputParem.MaterialName]) {\r\n                        mapOfRegFilterData[\"nproductcode\"] = selectedRecord[inputParem.nameofdefaultcomp === \"Material\" ?\r\n                            inputParem.label : inputParem.MaterialName] ? selectedRecord[inputParem.nameofdefaultcomp === \"Material\" ? inputParem.label : inputParem.MaterialName].value : -1\r\n                        dispatch(getTreeByProduct(mapOfRegFilterData, selectedRecord, { ...returnObj.comboData }))\r\n                    } else {\r\n                        selectedRecord[\"nallottedspeccode\"] = \"\"\r\n                        selectedRecord[\"sversion\"] = \"\"\r\n                        dispatch({\r\n                            type: DEFAULT_RETURN,\r\n                            payload: {\r\n                                loading: false,\r\n                                comboData: { ...returnObj.comboData },\r\n                                selectedRecord,\r\n                                AgaramTree: [],\r\n                                ActiveKey: [],\r\n                                FocusKey: [],\r\n                                OpenNodes: [],\r\n                                Test: [],\r\n                                SelectedTest: [],\r\n                                selectedSpec: {},\r\n                                Component: [],\r\n                                selectComponent: {},\r\n                                selectedComponent: {},\r\n                                Specification: [],\r\n                                selectedMaster: [],\r\n                                addMaster: false\r\n                            }\r\n                        })\r\n                    }\r\n                }\r\n                else if (materialType) {\r\n                    if (selectedRecord[inputParem.nameofdefaultcomp === \"Material Type\" ? inputParem.MaterialCategoryName : inputParem.label]) {\r\n                        const productCategory = selectedRecord[inputParem.nameofdefaultcomp === \"Material Type\" ?\r\n                            inputParem.MaterialCategoryName : inputParem.label] ? selectedRecord[inputParem.nameofdefaultcomp === \"Material Type\" ?\r\n                                inputParem.MaterialCategoryName : inputParem.label] : undefined\r\n\r\n                        //  mapOfRegFilterData[\"nproductcatcode\"]\r\n                        if (productCategory !== undefined) {\r\n                            if (productCategory.item.ncategorybasedflow === 3) {\r\n                                mapOfRegFilterData[\"nproductcatcode\"] = productCategory.value\r\n                                mapOfRegFilterData[\"nproductcode\"] = -1\r\n                                dispatch(getTreeByProduct(mapOfRegFilterData, selectedRecord, { ...returnObj.comboData }))\r\n                            } else {\r\n\r\n                                const product = selectedRecord[inputParem.nameofdefaultcomp === \"Material Type\" ?\r\n                                    inputParem.MaterialName : inputParem.label] ? selectedRecord[inputParem.nameofdefaultcomp === \"Material Type\" ?\r\n                                        inputParem.MaterialName : inputParem.label] : undefined\r\n                                if (product !== undefined) {\r\n                                    mapOfRegFilterData[\"nproductcatcode\"] = productCategory.value\r\n                                    mapOfRegFilterData[\"nproductcode\"] = product.value\r\n                                    dispatch(getTreeByProduct(mapOfRegFilterData, selectedRecord, { ...returnObj.comboData }))\r\n                                } else {\r\n\r\n                                    const product = selectedRecord[inputParem.nameofdefaultcomp === \"MaterialType\" ?\r\n                                        inputParem.MaterialName : inputParem.label] ? selectedRecord[inputParem.nameofdefaultcomp === \"MaterialType\" ?\r\n                                            inputParem.MaterialName : inputParem.label] : undefined\r\n                                    if (product !== undefined) {\r\n                                        mapOfRegFilterData[\"nproductcatcode\"] = productCategory.value\r\n                                        mapOfRegFilterData[\"nproductcode\"] = product.value\r\n                                        dispatch(getTreeByProduct(mapOfRegFilterData, selectedRecord, { ...returnObj.comboData }))\r\n                                    } else {\r\n                                        selectedRecord[\"nallottedspeccode\"] = \"\"\r\n                                        selectedRecord[\"sversion\"] = \"\"\r\n                                        dispatch({\r\n                                            type: DEFAULT_RETURN,\r\n                                            payload: {\r\n                                                loading: false,\r\n                                                comboData: { ...returnObj.comboData },\r\n                                                selectedRecord,\r\n                                                AgaramTree: [],\r\n                                                ActiveKey: [],\r\n                                                FocusKey: [],\r\n                                                OpenNodes: [],\r\n                                                Test: [],\r\n                                                SelectedTest: [],\r\n                                                selectedSpec: {},\r\n                                                Component: [],\r\n                                                selectComponent: {},\r\n                                                selectedComponent: {},\r\n                                                Specification: [],\r\n                                                selectedMaster: [],\r\n                                                addMaster: false\r\n                                            }\r\n                                        })\r\n                                    }\r\n                                }\r\n\r\n                            }\r\n                        } else {\r\n                            selectedRecord[\"nallottedspeccode\"] = \"\"\r\n                            selectedRecord[\"sversion\"] = \"\"\r\n                            dispatch({\r\n                                type: DEFAULT_RETURN,\r\n                                payload: {\r\n                                    loading: false,\r\n                                    comboData: { ...returnObj.comboData },\r\n                                    selectedRecord,\r\n                                    AgaramTree: [],\r\n                                    ActiveKey: [],\r\n                                    FocusKey: [],\r\n                                    OpenNodes: [],\r\n                                    Test: [],\r\n                                    SelectedTest: [],\r\n                                    selectedSpec: {},\r\n                                    Component: [],\r\n                                    selectComponent: {},\r\n                                    selectedComponent: {},\r\n                                    Specification: [],\r\n                                    selectedMaster: [],\r\n                                    addMaster: false\r\n                                }\r\n                            })\r\n                        }\r\n                    } else {\r\n                        selectedRecord[\"nallottedspeccode\"] = \"\"\r\n                        selectedRecord[\"sversion\"] = \"\"\r\n                        dispatch({\r\n                            type: DEFAULT_RETURN,\r\n                            payload: {\r\n                                loading: false,\r\n                                comboData: { ...returnObj.comboData },\r\n                                selectedRecord,\r\n                                AgaramTree: [],\r\n                                ActiveKey: [],\r\n                                FocusKey: [],\r\n                                OpenNodes: [],\r\n                                Test: [],\r\n                                SelectedTest: [],\r\n                                selectedSpec: {},\r\n                                Component: [],\r\n                                selectComponent: {},\r\n                                selectedComponent: {},\r\n                                Specification: [],\r\n                                selectedMaster: [],\r\n                                addMaster: false\r\n                            }\r\n                        })\r\n                    }\r\n                }\r\n                else {\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            loading: false,\r\n                            comboData: { ...returnObj.comboData },\r\n                            selectedRecord,\r\n                            selectedMaster: [],\r\n                            addMaster: false,\r\n                            selectedControl: [],\r\n                            masterComboColumnFiled: [],\r\n                            masterDesign: [],\r\n                            masterextractedColumnList: [],\r\n                            masterfieldList: [],\r\n                            masterdataList: [],\r\n                            mastercomboComponents: [],\r\n                            masterwithoutCombocomponent: [],\r\n                            masterIndex: undefined,\r\n                            screenName: inputParem.screenName,\r\n                            loadCustomSearchFilter: false\r\n                        }\r\n                    })\r\n                }\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\n\r\nexport function validatePreview(inputParam) {\r\n    return function (dispatch) {\r\n\r\n        rsapi.post(\"dynamicpreregdesign/validatePreview\", { ...inputParam })\r\n            .then(response => {\r\n                if (response.data.rtn === \"Success\") {\r\n                    toast.info(intl.formatMessage({\r\n                        id: \"IDS_SUCCESSFULLYVALIDATE\"\r\n                    }));\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            loading: false,\r\n                        }\r\n                    })\r\n                } else {\r\n                    toast.warn(response.data.rtn);\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false, showConfirmAlert: false } })\r\n                }\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\n\r\n\r\nexport function addMasterRecord(inputParam) {\r\n    return function (dispatch) {\r\n        rsapi.post(inputParam.classUrl + \"/\" + inputParam.operation + inputParam.methodUrl, { ...inputParam.inputData })\r\n            .then(response => {\r\n                if (response.status === 202) {\r\n                    //HttpStatus:Accepted\r\n                    //Use this block when u need to display any success message\r\n\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN, payload: {\r\n                            loading: false\r\n                        }\r\n                    })\r\n                    toast.success(response.data);\r\n                }\r\n                else if (response.status === 208) {\r\n                    //HttpStatus:Accepted\r\n                    //208-Already Reported\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN, payload: {\r\n                            loading: false\r\n                        }\r\n                    })\r\n                    toast.warn(response.data);\r\n                } else {\r\n                    let masterIndex = inputParam.masterIndex\r\n                    let data = []\r\n                    const data1 = sortData(response.data);\r\n                    if (inputParam.selectedControl[masterIndex].table.item.component === 'Dynamic') {\r\n                        data = constructOptionList(data1.DynamicMasterData, inputParam.selectedControl[masterIndex].valuemember, inputParam.selectedControl[masterIndex].displaymember).get(\"OptionList\")\r\n                    }\r\n                    else if (inputParam.selectedControl[masterIndex].table.item.nformcode === 137) {\r\n                        if (inputParam.selectedControl[masterIndex].inputtype === 'backendsearchfilter'\r\n                            || inputParam.selectedControl[masterIndex].inputtype === 'frontendsearchfilter') {\r\n                            //   data = constructOptionList(data1.PatientList, inputParam.selectedControl[masterIndex].valuemember, inputParam.selectedControl[masterIndex].displaymember).get(\"OptionList\")\r\n                            data = [{ label: data1.SelectedPatient[inputParam.selectedControl[masterIndex].displaymember], value: data1.SelectedPatient[inputParam.selectedControl[masterIndex].valuemember], item: data1.SelectedPatient }]\r\n                        } else {\r\n                            data = constructOptionList(data1.PatientList, inputParam.selectedControl[masterIndex].valuemember, inputParam.selectedControl[masterIndex].displaymember).get(\"OptionList\")\r\n                        }\r\n\r\n                    }\r\n                    else if (inputParam.selectedControl[masterIndex].table.item.nformcode === 43) {\r\n                        if (inputParam.selectedControl[masterIndex].inputtype === 'backendsearchfilter'\r\n                            || inputParam.selectedControl[masterIndex].inputtype === 'frontendsearchfilter') {\r\n                            //   data = constructOptionList(data1.PatientList, inputParam.selectedControl[masterIndex].valuemember, inputParam.selectedControl[masterIndex].displaymember).get(\"OptionList\")\r\n                            data = [{ label: data1.ExternalOrder[inputParam.selectedControl[masterIndex].displaymember], value: data1.ExternalOrder[inputParam.selectedControl[masterIndex].valuemember], item: data1.ExternalOrder }]\r\n                        } else {\r\n                            data = constructOptionList(data1.ExternalOrder, inputParam.selectedControl[masterIndex].valuemember, inputParam.selectedControl[masterIndex].displaymember).get(\"OptionList\")\r\n                        }\r\n\r\n                    }\r\n                    else {\r\n                        data = constructOptionList(data1, inputParam.selectedControl[masterIndex].valuemember, inputParam.selectedControl[masterIndex].displaymember).get(\"OptionList\")\r\n                    }\r\n\r\n                    const newdata = data.map((item1, index) => {\r\n                        item1 = { ...item1, item: { jsondata: { ...item1.item, jsondata: { ...item1.item } } } }\r\n                        return item1;\r\n                    })\r\n                    if (masterIndex === 0) {\r\n                        const selectedRecord = inputParam.selectedRecord || {}\r\n                        const selectedControl = inputParam.selectedControl || {}\r\n\r\n                        const comboData1 = {\r\n                            ...newdata[0], item: {\r\n                                ...newdata[0].item, \"pkey\": selectedControl[masterIndex].valuemember,\r\n                                \"nquerybuildertablecode\": selectedControl[masterIndex].nquerybuildertablecode,\r\n                                \"source\": selectedControl[masterIndex].source\r\n                            }\r\n                        }\r\n\r\n                        selectedRecord[selectedControl[masterIndex].label] = comboData1\r\n                        if (inputParam.selectedControl[masterIndex].table.item.nformcode === 137) {\r\n                            selectedRecord['spatientid'] = comboData1.item['jsondata']['spatientid']\r\n                        }\r\n                        if (inputParam.selectedControl[masterIndex].table.item.nformcode === 43) {\r\n                            selectedRecord['nexternalordercode'] = comboData1.item['nexternalordercode']\r\n                        }\r\n                        const comboData = inputParam.comboData\r\n                        comboData[selectedControl[masterIndex].label] = newdata\r\n\r\n                        if (selectedControl[masterIndex].child && selectedControl[masterIndex].child.length > 0) {\r\n                            const childComboList = getSameRecordFromTwoArrays(inputParam.comboComponents, selectedControl[masterIndex].child, \"label\")\r\n                            let childColumnList = {};\r\n                            childComboList.map(columnList => {\r\n                                const val = comboChild(inputParam.comboComponents, columnList, childColumnList, false);\r\n                                childColumnList = val.childColumnList\r\n                            })\r\n\r\n                            const parentList = getSameRecordFromTwoArrays(inputParam.withoutCombocomponent, selectedControl[masterIndex].child, \"label\")\r\n\r\n                            const inputParem = {\r\n                                child: selectedControl[masterIndex].child,\r\n                                source: selectedControl[masterIndex].source,\r\n                                primarykeyField: selectedControl[masterIndex].valuemember,\r\n                                value: comboData1.value,\r\n                                item: comboData1.item,\r\n                                screenName: inputParam.screenName\r\n                            }\r\n                            if (inputParam.loadSubSample) {\r\n                                dispatch(getChildValues(inputParem,\r\n                                    inputParam.inputData.userinfo, selectedRecord, comboData,\r\n                                    childComboList, childColumnList,\r\n                                    inputParam.withoutCombocomponent,\r\n                                    [...childComboList, ...parentList], false, false, {},\r\n                                    false, false, false,\r\n                                    false, false, true, false))\r\n                            } else {\r\n                                dispatch(getChildValues(inputParem,\r\n                                    inputParam.inputData.userinfo, selectedRecord, comboData,\r\n                                    childComboList, childColumnList,\r\n                                    inputParam.withoutCombocomponent,\r\n                                    [...childComboList, ...parentList]))\r\n                            }\r\n\r\n\r\n                        } else {\r\n                            dispatch({\r\n                                type: DEFAULT_RETURN,\r\n                                payload: {\r\n                                    loading: false,\r\n                                    addMaster: false,\r\n                                    [inputParam.comboName]: comboData,\r\n                                    selectedMaster: [],\r\n                                    [inputParam.selectedRecordName]: selectedRecord,\r\n                                    screenName: inputParam.screenName,\r\n                                    masterIndex: undefined\r\n                                }\r\n                            })\r\n                        }\r\n                    }\r\n                    else {\r\n\r\n                        let selectedMaster = inputParam.selectedMaster || []\r\n                        let selectedControl = inputParam.selectedControl || []\r\n\r\n                        const comboData1 = {\r\n                            ...newdata[0], item: {\r\n                                ...newdata[0].item, \"pkey\": selectedControl[masterIndex].valuemember,\r\n                                \"nquerybuildertablecode\": selectedControl[masterIndex].nquerybuildertablecode,\r\n                                \"source\": selectedControl[masterIndex].source\r\n                            }\r\n                        }\r\n\r\n                        selectedMaster[masterIndex - 1][selectedControl[masterIndex].label] = comboData1\r\n\r\n                        // const comboData = inputParam.comboData\r\n                        // comboData[selectedControl[masterIndex].label] = newdata\r\n\r\n                        let masterdataList = inputParam.masterdataList || []\r\n                        masterdataList[masterIndex - 1] = { ...masterdataList[masterIndex - 1], [selectedControl[masterIndex].label]: newdata }\r\n\r\n                        if (selectedControl[masterIndex].child && selectedControl[masterIndex].child.length > 0) {\r\n                            const childComboList = getSameRecordFromTwoArrays(inputParam.mastercomboComponents[masterIndex - 1], selectedControl[masterIndex].child, \"label\")\r\n                            let childColumnList = {};\r\n                            childComboList.map(columnList => {\r\n                                const val = comboChild(inputParam.mastercomboComponents[masterIndex - 1], columnList, childColumnList, false);\r\n                                childColumnList = val.childColumnList\r\n                            })\r\n\r\n                            const parentList = getSameRecordFromTwoArrays(inputParam.masterwithoutCombocomponent[masterIndex - 1], selectedControl[masterIndex].child, \"label\")\r\n\r\n                            const inputParem = {\r\n                                child: selectedControl[masterIndex].child,\r\n                                source: selectedControl[masterIndex].source,\r\n                                primarykeyField: selectedControl[masterIndex].valuemember,\r\n                                value: comboData1.value,\r\n                                item: comboData1.item,\r\n                                screenName: inputParam.screenName\r\n                            }\r\n\r\n                            dispatch(getChildValuesForMasterAdd(inputParem,\r\n                                inputParam.inputData.userinfo, selectedMaster, inputParam.masterdataList,\r\n                                childComboList, childColumnList,\r\n                                inputParam.masterwithoutCombocomponent,\r\n                                [...childComboList, ...parentList], masterIndex, inputParam))\r\n\r\n\r\n\r\n                        } else {\r\n\r\n                            selectedControl = selectedControl && removeIndex(selectedControl, masterIndex)\r\n                            selectedMaster = selectedMaster && removeIndex(selectedMaster, masterIndex)\r\n\r\n                            const mastercomboComponents = inputParam.mastercomboComponents && removeIndex(inputParam.mastercomboComponents, masterIndex)\r\n                            const masterwithoutCombocomponent = inputParam.masterwithoutCombocomponent && removeIndex(inputParam.masterwithoutCombocomponent, masterIndex)\r\n                            const masterComboColumnFiled = inputParam.masterComboColumnFiled && removeIndex(inputParam.masterComboColumnFiled, masterIndex)\r\n                            const masterextractedColumnList = inputParam.masterextractedColumnList && removeIndex(inputParam.masterextractedColumnList, masterIndex)\r\n                            masterdataList = masterdataList && removeIndex(masterdataList, masterIndex)\r\n                            const masterDesign = inputParam.masterDesign && removeIndex(inputParam.masterDesign, masterIndex)\r\n                            const masterfieldList = inputParam.masterfieldList && removeIndex(inputParam.masterfieldList, masterIndex)\r\n                            const screenName = selectedControl[masterIndex - 1].displayname[inputParam.userinfo.slanguagetypecode]\r\n                            masterIndex = (parseInt(masterIndex) - 1)\r\n\r\n                            dispatch({\r\n                                type: DEFAULT_RETURN,\r\n                                payload: {\r\n                                    selectedControl,\r\n                                    selectedMaster,\r\n                                    mastercomboComponents,\r\n                                    masterwithoutCombocomponent,\r\n                                    masterComboColumnFiled,\r\n                                    masterextractedColumnList,\r\n                                    masterdataList,\r\n                                    masterDesign,\r\n                                    masterfieldList,\r\n                                    loading: false,\r\n                                    // addMaster: false,\r\n                                    // masterdataList,\r\n                                    // selectedMaster: {},\r\n                                    //  selectedMaster: selectedMaster,\r\n\r\n                                    screenName,\r\n                                    masterIndex,\r\n\r\n                                }\r\n                            })\r\n                        }\r\n\r\n                    }\r\n\r\n\r\n                }\r\n\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\n\r\n// export function removeIndex(data, removeIndex) {\r\n//     const data1 = [...data.splice(0, removeIndex), ...data.splice(removeIndex + 1)]\r\n//     return data1\r\n// }\r\n\r\nexport function getAddMasterCombo(inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        let urlArray = [];\r\n        let masterIndex = inputParam.masterIndex\r\n        inputParam.masterComboColumnFiled[masterIndex].map(item => {\r\n            if (item.needService === undefined) {\r\n                urlArray.push(rsapi.post(item.classUrl + \"/\" + item.methodUrl, { userinfo: inputParam.userinfo }));\r\n                item[\"fetchIndex\"] = urlArray.length-1;\r\n            }\r\n        }\r\n        )\r\n        if (inputParam.selectedControl[masterIndex].table.item.nformcode === 137) {\r\n            urlArray.push(rsapi.post(\"timezone/getLocalTimeByZone\", { userinfo: inputParam.userinfo }));\r\n        }\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                let ComboFieldData = [];\r\n                let masterdataList = inputParam.masterdataList;\r\n\r\n                inputParam.masterComboColumnFiled[masterIndex].map((item, index) => {\r\n                    if (item.needService === undefined) {\r\n\r\n                        ComboFieldData = constructOptionList(item.objectValue === null ? response[item.fetchIndex].data || [] : response[item.fetchIndex].data[item.objectValue], item.foreignDataField,\r\n                            item.dataField, undefined, undefined, undefined);\r\n                        masterdataList[masterIndex][item.dataField] = ComboFieldData.get(\"OptionList\");\r\n                    } else {\r\n                        if (item.child !== undefined) {\r\n                            masterdataList[masterIndex][item.dataField] = []\r\n                        } else if (item.useService !== undefined) {\r\n                            masterdataList[masterIndex][item.dataField] = masterdataList[masterIndex][inputParam.masterComboColumnFiled[masterIndex][item.useService].dataField]\r\n                        }\r\n\r\n                    }\r\n                });\r\n                let currentTime = ''\r\n                let selectedMaster = inputParam.selectedMaster || []\r\n                if (inputParam.selectedControl[masterIndex].table.item.nformcode === 137) {\r\n                    //const data=inputParam.masterComboColumnFiled.filter(x=>x.needService===undefined)\r\n                    currentTime = rearrangeDateFormat(inputParam.userinfo, response[urlArray.length - 1].data);\r\n                    selectedMaster[masterIndex][\"ddob\"] = rearrangeDateFormat(inputParam.userinfo, response[urlArray.length - 1].data);\r\n                    selectedMaster[masterIndex][\"sage\"] = ageCalculate(selectedMaster[\"ddob\"])\r\n                    selectedMaster[masterIndex][\"nneedcurrentaddress\"] = transactionStatus.NO;\r\n                    selectedMaster[masterIndex][\"today\"] = inputParam.userinfo;\r\n                }\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterIndex,\r\n                        selectedMaster,\r\n                        masterdataList,\r\n                        addMaster: true,\r\n                        loading: false,\r\n                        selectedControl: inputParam.selectedControl,\r\n                        masterfieldList: inputParam.masterfieldList,\r\n                        masterextractedColumnList: inputParam.masterextractedColumnList,\r\n                        masterprimaryKeyField: inputParam.masterprimaryKeyField,\r\n                        masterComboColumnFiled: inputParam.masterComboColumnFiled,\r\n                        screenName: inputParam.selectedControl[masterIndex].displayname[inputParam.userinfo.slanguagetypecode],\r\n                        mastercomboComponents: inputParam.mastercomboComponents,\r\n                        masterwithoutCombocomponent: inputParam.masterwithoutCombocomponent,\r\n                        masterDesign: inputParam.masterDesign,\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch(initRequest(false));\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(intl.formatMessage({\r\n                        id: error.response.data\r\n                    }));\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getDynamicMasterTempalte(inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        const masterIndex = inputParam.masterIndex\r\n        rsapi.post(inputParam.selectedControl[masterIndex].table.item.classUrl + \"/getMasterDesign\",\r\n            { userinfo: { ...inputParam.userinfo, nformcode: inputParam.selectedControl[inputParam.masterIndex].table.item.nformcode } })\r\n            .then(response => {\r\n                const design = response.data\r\n                const masterwithoutCombocomponent = inputParam.masterwithoutCombocomponent || []\r\n                let data = inputParam.masterdesignData || []\r\n                const masterextractedColumnList = inputParam.masterextractedColumnList || []\r\n\r\n                //masterwithoutCombocomponent[masterIndex] = []\r\n                // masterextractedColumnList[masterIndex] = []\r\n                data[masterIndex] = []\r\n                design.slideoutdesign.map(row => {\r\n                    row.children.map(column => {\r\n                        column.children.map(component => {\r\n                            if (component.hasOwnProperty(\"children\")) {\r\n                                component.children.map(componentrow => {\r\n                                    if (componentrow.inputtype === \"combo\") {\r\n                                        data[masterIndex].push(componentrow)\r\n                                    } else {\r\n                                        masterwithoutCombocomponent[masterIndex].push(componentrow)\r\n                                    }\r\n                                    if (componentrow.mandatory === true) {\r\n                                        if (componentrow.inputtype === \"email\") {\r\n                                            masterextractedColumnList[masterIndex].push({\r\n                                                \"mandatory\": true, \"idsName\": componentrow.label,\r\n                                                \"dataField\": componentrow.label,\r\n                                                \"alertPreFix\": this.props.intl.formatMessage({ id: \"IDS_VALID\" }),\r\n                                                \"validateFunction\": validateEmail,\r\n                                                \"mandatoryLabel\": \"IDS_ENTER\",\r\n                                                \"controlType\": \"textbox\"\r\n                                            })\r\n                                        }\r\n                                        else {\r\n                                            masterextractedColumnList[masterIndex].push({\r\n                                                \"mandatory\": true,\r\n                                                \"idsName\": componentrow.label,\r\n                                                \"dataField\": componentrow.label,\r\n                                                \"mandatoryLabel\": componentrow.inputtype === \"combo\" ?\r\n                                                    \"IDS_SELECT\" : \"IDS_ENTER\",\r\n                                                \"controlType\": componentrow.inputtype === \"combo\" ?\r\n                                                    \"selectbox\" : \"textbox\"\r\n                                            })\r\n                                        }\r\n                                    }\r\n                                })\r\n                            }\r\n                            else {\r\n                                component.inputtype === \"combo\" ?\r\n                                    data[masterIndex].push(component)\r\n                                    : masterwithoutCombocomponent[masterIndex].push(component)\r\n\r\n                                if (component.mandatory === true) {\r\n                                    if (component.inputtype === \"email\") {\r\n                                        masterextractedColumnList[masterIndex].push({\r\n                                            \"mandatory\": true, \"idsName\": component.label,\r\n                                            \"dataField\": component.label,\r\n                                            \"alertPreFix\": this.props.intl.formatMessage({ id: \"IDS_VALID\" }),\r\n                                            \"validateFunction\": validateEmail,\r\n                                            \"mandatoryLabel\": \"IDS_ENTER\",\r\n                                            \"controlType\": \"textbox\"\r\n                                        })\r\n                                    }\r\n                                    else {\r\n                                        masterextractedColumnList[masterIndex].push({\r\n                                            \"mandatory\": true,\r\n                                            \"idsName\": component.label,\r\n                                            \"dataField\": component.label,\r\n                                            \"mandatoryLabel\": component.inputtype === \"combo\" ?\r\n                                                \"IDS_SELECT\" : \"IDS_ENTER\",\r\n                                            \"controlType\": component.inputtype === \"combo\" ?\r\n                                                \"selectbox\" : \"textbox\"\r\n                                        })\r\n                                    }\r\n                                }\r\n                            }\r\n                        })\r\n                    })\r\n                })\r\n                const comboComponents = inputParam.mastercomboComponents || []\r\n                comboComponents[masterIndex] = data[masterIndex];\r\n                let childColumnList = {};\r\n                data[masterIndex].map(columnList => {\r\n                    const val = comboChild(data[masterIndex], columnList, childColumnList, true);\r\n                    data[masterIndex] = val.data;\r\n                    childColumnList = val.childColumnList\r\n                })\r\n\r\n                const masterdesignData = inputParam.masterdesignData || []\r\n                masterdesignData[masterIndex] = [...data[masterIndex]]\r\n                const masterDesign = inputParam.masterDesign || []\r\n                masterDesign[masterIndex] = design\r\n                inputParam = {\r\n                    ...inputParam,\r\n                    masterchildColumnList: childColumnList,\r\n                    mastercomboComponents: comboComponents,\r\n                    masterextractedColumnList,\r\n                    masterwithoutCombocomponent,\r\n                    masterDesign,\r\n                    masterdesignData\r\n                }\r\n                dispatch(getDynamicMasterComboForAdd(inputParam, true))\r\n\r\n                // dispatch({\r\n                //     type: DEFAULT_RETURN,\r\n                //     payload: {\r\n                //         addMaster: true,\r\n                //         loading: false,\r\n                //         selectedControl: inputParam.selectedControl,\r\n                //         masterchildColumnList: childColumnList,\r\n                //         mastercomboComponents: comboComponents,\r\n                //         mastermandatoryFields,\r\n                //         masterwithoutCombocomponent,\r\n                //         masterDesign: design\r\n\r\n                //     }\r\n                // })\r\n            })\r\n            .catch(error => {\r\n                dispatch(initRequest(false));\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(intl.formatMessage({\r\n                        id: error.response.data\r\n                    }));\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\n\r\nexport function getDynamicMasterComboForAdd(inputParam, preview) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        const masterIndex = inputParam.masterIndex\r\n        const timeZoneService = rsapi.post(\"timezone/getTimeZone\");\r\n        const actualService = rsapi.post(\"dynamicpreregdesign/getComboValues\", {\r\n            parentcolumnlist: inputParam.masterdesignData[masterIndex],\r\n            childcolumnlist: inputParam.masterchildColumnList,\r\n            userinfo: inputParam.userinfo\r\n        })\r\n        let urlArray = [timeZoneService, actualService];\r\n\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                const timeZoneMap = constructOptionList(response[0].data || [], \"ntimezonecode\", \"stimezoneid\", undefined, undefined, true);\r\n                const timeZoneList = timeZoneMap.get(\"OptionList\");\r\n                const defaultTimeZone = { label: inputParam.userinfo.stimezoneid, value: inputParam.userinfo.ntimezonecode }\r\n                let selectedMaster = inputParam.selectedMaster || []\r\n                selectedMaster[masterIndex] = selectedMaster[masterIndex] && { ...selectedMaster[masterIndex] } || {}\r\n                const newcomboData = parentChildComboLoad(inputParam.masterdesignData[masterIndex], response[1].data, selectedMaster[masterIndex], inputParam.masterchildColumnList,\r\n                    inputParam.masterwithoutCombocomponent[masterIndex], undefined, inputParam.userinfo.slanguagetypecode, inputParam.userinfo)\r\n\r\n                const comboData1 = newcomboData.comboData\r\n                const selectedRecord1 = newcomboData.selectedRecord\r\n                inputParam.masterwithoutCombocomponent[masterIndex].map(componentrow => {\r\n                    if (componentrow.inputtype === \"date\") {\r\n                        if (componentrow.mandatory) {\r\n                            selectedRecord1[componentrow.label] = componentrow.loadcurrentdate ? new Date() : \"\";\r\n                        }\r\n                    }\r\n                    else if (componentrow.inputtype === \"radio\") {\r\n                        selectedRecord1[componentrow.label] = componentrow.radioOptions ?\r\n                            componentrow.radioOptions.tags[0].text : \"\";\r\n                    }\r\n\r\n                })\r\n                //const masterchildColumnList=inputParam.masterchildColumnList || []\r\n                // masterchildColumnList[masterIndex] = comboData1\r\n                const masterdataList = inputParam.masterdataList || []\r\n                masterdataList[masterIndex] = comboData1\r\n                selectedMaster[masterIndex] = { ...selectedMaster[masterIndex], selectedRecord1 }\r\n                if (preview) {\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            ...inputParam,\r\n                            mastertimeZoneList: timeZoneList,\r\n                            masterdefaultTimeZone: defaultTimeZone,\r\n                            loading: false,\r\n                            addMaster: true,\r\n                            masterdataList,\r\n                            selectedMaster,\r\n                            mastercomboComponents: inputParam.mastercomboComponents,\r\n                            masterwithoutCombocomponent: inputParam.masterwithoutCombocomponent,\r\n                            masterdesignData: inputParam.masterdesignData,\r\n                            masterIndex,\r\n                            // masterchildColumnList: inputParam.masterchildColumnList,\r\n                            screenName: inputParam.selectedControl[masterIndex].displayname[inputParam.userinfo.slanguagetypecode]\r\n                        }\r\n                    })\r\n                }\r\n            })\r\n            .catch(error => {\r\n                console.log(\"error:\", error);\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getChildValuesForAddMaster(inputParam,\r\n    userinfo, selectedMaster, comboData, parentcolumnlist,\r\n    childcolumnlist, withoutCombocomponent, parentListWithReadonly, masterIndex\r\n) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post('dynamicpreregdesign/getChildValues', {\r\n            child: inputParam.child,\r\n            parentdata: inputParam.item.jsondata,\r\n            parentsource: inputParam.source,\r\n            [inputParam.primarykeyField]: inputParam.value,\r\n            valuemember: inputParam.primarykeyField,\r\n            childcolumnlist,\r\n            userinfo,\r\n            parentcolumnlist\r\n        })\r\n            .then(response => {\r\n                let returnObj = { ...comboData[masterIndex], ...response.data }\r\n                returnObj = parentChildComboLoad(parentListWithReadonly, returnObj, selectedMaster[masterIndex], childcolumnlist, withoutCombocomponent[masterIndex], inputParam, userinfo.slanguagetypecode, userinfo)\r\n                selectedMaster[masterIndex] = { ...selectedMaster[masterIndex], ...returnObj.selectedRecord }\r\n                const masterdataList = comboData || []\r\n                masterdataList[masterIndex] = returnObj.comboData\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false,\r\n                        masterdataList,\r\n                        selectedMaster\r\n                    }\r\n                })\r\n\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n\r\n}\r\n\r\nexport function getChildComboMaster(selectedMaster, filedName,\r\n    item, selectedControl, masterComboColumnFiled, masterdataList, userInfo, masterIndex) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        let urlArray = [];\r\n        const obj = masterComboColumnFiled[masterIndex][item.childIndex]\r\n        urlArray.push(rsapi.post(obj.classUrl + \"/\" + obj.methodUrl, { [item.foreignDataField]: selectedMaster[masterIndex][item.tableDataField], userinfo: userInfo }))\r\n\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                selectedMaster[masterIndex][obj.dataField] = undefined\r\n                const ComboFieldData = constructOptionList(obj.objectValue === null ? response[0].data || [] : response[0].data[obj.objectValue], obj.foreignDataField,\r\n                    obj.foreignDisplayMember, undefined, undefined, undefined);\r\n                masterdataList[masterIndex][obj.dataField] = ComboFieldData.get(\"OptionList\");\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        selectedMaster,\r\n                        masterdataList,\r\n                        loading: false,\r\n\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch(initRequest(false));\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(intl.formatMessage({\r\n                        id: error.response.data\r\n                    }));\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\n\r\n\r\nexport function getChildValuesForMasterAdd(inputParem,\r\n    userinfo, selectedMaster, masterdataList, parentcolumnlist,\r\n    childcolumnlist, withoutCombocomponent, parentListWithReadonly,\r\n    masterIndex, inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post('dynamicpreregdesign/getChildValues', {\r\n            child: inputParem.child,\r\n            parentdata: inputParem.item.jsondata,\r\n            parentsource: inputParem.source,\r\n            [inputParem.primarykeyField]: inputParem.value,\r\n            valuemember: inputParem.primarykeyField,\r\n            childcolumnlist,\r\n            userinfo,\r\n            parentcolumnlist\r\n        })\r\n            .then(response => {\r\n                let returnObj = { ...masterdataList[masterIndex - 1], ...response.data }\r\n                returnObj = parentChildComboLoad(parentListWithReadonly, returnObj,\r\n                    selectedMaster[masterIndex - 1],\r\n                    childcolumnlist, withoutCombocomponent[masterIndex - 1], inputParem,\r\n                    userinfo.slanguagetypecode, userinfo)\r\n                selectedMaster[masterIndex - 1] = { ...selectedMaster[masterIndex - 1], ...returnObj.selectedRecord }\r\n                masterdataList[masterIndex - 1] = returnObj.comboData\r\n\r\n\r\n                // const dataList = {\r\n\r\n                // }\r\n                const selectedControl = inputParam.selectedControl && removeIndex(inputParam.selectedControl, masterIndex)\r\n                selectedMaster = selectedMaster && removeIndex(selectedMaster, masterIndex)\r\n\r\n                const mastercomboComponents = inputParam.mastercomboComponents && removeIndex(inputParam.mastercomboComponents, masterIndex)\r\n                const masterwithoutCombocomponent = inputParam.masterwithoutCombocomponent && removeIndex(inputParam.masterwithoutCombocomponent, masterIndex)\r\n                const masterComboColumnFiled = inputParam.masterComboColumnFiled && removeIndex(inputParam.masterComboColumnFiled, masterIndex)\r\n                const masterextractedColumnList = inputParam.masterextractedColumnList && removeIndex(inputParam.masterextractedColumnList, masterIndex)\r\n                masterdataList = masterdataList && removeIndex(masterdataList, masterIndex)\r\n                const masterDesign = inputParam.masterDesign && removeIndex(inputParam.masterDesign, masterIndex)\r\n                const masterfieldList = inputParam.masterfieldList && removeIndex(inputParam.masterfieldList, masterIndex)\r\n                const screenName = selectedControl[masterIndex - 1].displayname[inputParam.userinfo.slanguagetypecode]\r\n                masterIndex = (parseInt(masterIndex) - 1)\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        // selectedControl: inputParam.selectedControl && removeIndex(inputParam.selectedControl, masterIndex),\r\n                        // selectedMaster: selectedMaster && removeIndex(selectedMaster, masterIndex),\r\n                        // mastercomboComponents: inputParam.mastercomboComponents && removeIndex(inputParam.mastercomboComponents, masterIndex),\r\n                        // masterwithoutCombocomponent: inputParam.masterwithoutCombocomponent && removeIndex(inputParam.masterwithoutCombocomponent, masterIndex),\r\n                        // masterComboColumnFiled: inputParam.masterComboColumnFiled && removeIndex(inputParam.masterComboColumnFiled, masterIndex),\r\n                        // masterextractedColumnList: inputParam.masterextractedColumnList && removeIndex(inputParam.masterextractedColumnList, masterIndex),\r\n                        // masterdataList: masterdataList && removeIndex(masterdataList, masterIndex),\r\n                        // masterDesign: inputParam.masterDesign && removeIndex(inputParam.masterDesign, masterIndex),\r\n                        // masterfieldList: inputParam.masterfieldList && removeIndex(inputParam.masterfieldList, masterIndex),\r\n                        // screenName: inputParam.selectedControl[masterIndex - 1].displayname[userinfo.slanguagetypecode],\r\n                        // loading: false,\r\n                        //masterdataList,\r\n                        //selectedMaster,\r\n                        // ...dataList,\r\n                        //   masterIndex: (parseInt(masterIndex) - 1),\r\n                        // screenName: inputParem.screenName\r\n\r\n\r\n                        selectedControl,\r\n                        selectedMaster,\r\n                        mastercomboComponents,\r\n                        masterwithoutCombocomponent,\r\n                        masterComboColumnFiled,\r\n                        masterextractedColumnList,\r\n                        masterdataList,\r\n                        masterDesign,\r\n                        masterfieldList,\r\n                        loading: false,\r\n                        // addMaster: false,\r\n                        // masterdataList,\r\n                        // selectedMaster: {},\r\n                        //  selectedMaster: selectedMaster,\r\n\r\n                        screenName,\r\n                        masterIndex,\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function viewExternalportalDetail(selectedControl,comboData, userinfo) {\r\n    return function (dispatch) {\r\n        if (selectedControl.table.item.nquerybuildertablecode === 222) {\r\n            dispatch(initRequest(true));\r\n            rsapi.post('dynamicpreregdesign/getExternalportalDetail', {\r\n                nexternalordercode:comboData.value,\r\n                nquerybuildertablecode:selectedControl.table.item.nquerybuildertablecode,\r\n                userinfo,\r\n            })\r\n                .then(response => {\r\n                    let Map1=new Map();\r\n                    response.data.Sample.map((item)=>{\r\n                       const newData= response.data.Test.filter(x=>x.nexternalordersamplecode===item.nexternalordersamplecode)\r\n                       Map1.set(item.nexternalordersamplecode,Object.values(newData))\r\n                    })\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            isDynamicViewSlideOut: true,\r\n                            dynamicExternalSample:response.data.Sample,\r\n                            dynamicExternalTestChild:Map1,\r\n                            dynamicGridSelectedId:response.data.Sample.length>0?Object.keys(response.data.Sample[0].nexternalordersamplecode):null,\r\n                            loading:false,\r\n                            selectedDynamicViewControl:selectedControl\r\n                           // dynamicExternalSubSample:[],\r\n                           // dynamicExternalTest:[]\r\n\r\n                        }\r\n                    })\r\n                })\r\n                .catch(error => {\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    } else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                })\r\n        }\r\n\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}