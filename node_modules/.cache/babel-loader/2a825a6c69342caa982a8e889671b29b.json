{"ast":null,"code":"var _jsxFileName = \"E:\\\\WorkingFolder\\\\React_Postgres\\\\ALPD\\\\SOURCE-512\\\\QuaLISWeb\\\\src\\\\pages\\\\Material\\\\MaterialCategory.jsx\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { injectIntl } from 'react-intl';\nimport { Row, Col } from 'react-bootstrap';\nimport { process } from '@progress/kendo-data-query';\nimport { toast } from 'react-toastify';\nimport DataGrid from '../../components/data-grid/data-grid.component';\nimport AddMaterialCategory from './AddMaterialCategory';\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\nimport Esign from '../audittrail/Esign';\nimport { ListWrapper, PrimaryHeader } from '../../components/client-group.styles';\nimport { callService, getMaterialTypeComboService, updateStore, crudMaster, validateEsignCredential } from '../../actions';\nimport { getControlMap, showEsign } from '../../components/CommonScript';\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\nimport { transactionStatus } from '../../components/Enumeration';\n\nconst mapStateToProps = state => {\n  return {\n    Login: state.Login\n  };\n};\n\nclass MaterialCategory extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.dataStateChange = event => {\n      this.setState({\n        dataResult: process(this.state.data, event.dataState),\n        dataState: event.dataState\n      });\n    };\n\n    this.closeModal = () => {\n      let loadEsign = this.props.Login.loadEsign;\n      let openModal = this.props.Login.openModal;\n      let selectedRecord = this.props.Login.selectedRecord;\n      let selectedId = this.props.Login.selectedId;\n\n      if (this.props.Login.loadEsign) {\n        if (this.props.Login.operation === \"delete\") {\n          loadEsign = false;\n          openModal = false;\n          selectedRecord = {};\n        } else {\n          loadEsign = false;\n          selectedRecord['esignpassword'] = \"\";\n          selectedRecord['esigncomments'] = \"\";\n          selectedRecord['esignreason'] = \"\";\n        }\n      } else {\n        openModal = false;\n        selectedRecord = {};\n        selectedId = null;\n      }\n\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          openModal,\n          loadEsign,\n          selectedRecord,\n          selectedId\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.reloadData = () => {\n      const inputParam = {\n        inputData: {\n          \"userinfo\": this.props.Login.userInfo\n        },\n        classUrl: this.props.Login.inputParam.classUrl,\n        methodUrl: this.props.Login.inputParam.methodUrl,\n        userInfo: this.props.Login.userInfo,\n        displayName: this.props.Login.inputParam.displayName\n      };\n      this.props.callService(inputParam);\n    };\n\n    this.deleteRecord = inputData => {\n      const inputParam = {\n        classUrl: this.props.Login.inputParam.classUrl,\n        methodUrl: this.props.Login.inputParam.methodUrl,\n        inputData: {\n          [this.props.Login.inputParam.methodUrl.toLowerCase()]: inputData.selectedRecord,\n          \"userinfo\": this.props.Login.userInfo\n        },\n        operation: inputData.operation,\n        displayName: this.props.Login.inputParam.displayName,\n        selectedRecord: { ...this.state.selectedRecord\n        } //dataState: this.state.dataState\n\n      };\n      const esignNeeded = showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, inputData.ncontrolCode);\n\n      if (esignNeeded) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData: this.props.Login.masterData\n            },\n            openModal: true,\n            screenName: this.props.intl.formatMessage({\n              id: this.props.Login.inputParam.displayName\n            }),\n            operation: inputData.operation\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\n      }\n    };\n\n    this.onSaveClick = (saveType, formRef) => {\n      //add \n      let inputData = [];\n      inputData[\"userinfo\"] = this.props.Login.userInfo;\n      let dataState = undefined;\n      let selectedId = null;\n\n      if (this.props.Login.operation === \"update\") {\n        // edit\n        dataState = this.state.dataState;\n        inputData[this.props.Login.inputParam.methodUrl.toLowerCase()] = JSON.parse(JSON.stringify(this.state.selectedRecord));\n        selectedId = this.props.Login.selectedRecord.nmaterialcatcode;\n      } else {\n        //add               \n        inputData[this.props.Login.inputParam.methodUrl.toLowerCase()] = {\n          \"nsitecode\": this.props.Login.userInfo.nmastersitecode\n        };\n        inputData[this.props.Login.inputParam.methodUrl.toLowerCase()] = {\n          \"nuserrolecode\": this.props.Login.userInfo.nuserrole\n        };\n      }\n\n      if (inputData[\"materialcategory\"].hasOwnProperty('esignpassword')) {\n        if (inputData[\"materialcategory\"]['esignpassword'] === '') {\n          delete inputData[\"materialcategory\"]['esigncomments'];\n          delete inputData[\"materialcategory\"]['esignpassword'];\n          delete inputData[\"materialcategory\"]['esignreason'];\n        }\n      }\n\n      inputData[\"materialcategory\"][\"nmaterialtypecode\"] = this.state.selectedRecord[\"nmaterialtypecode\"] ? this.state.selectedRecord[\"nmaterialtypecode\"].value : transactionStatus.NA;\n      inputData[\"materialcategory\"][\"nbarcode\"] = this.state.selectedRecord[\"nbarcode\"] ? this.state.selectedRecord[\"nbarcode\"].value : transactionStatus.NA;\n      inputData[\"materialcategory\"][\"smaterialcatname\"] = this.state.selectedRecord[\"smaterialcatname\"] ? this.state.selectedRecord[\"smaterialcatname\"] : transactionStatus.NO;\n      inputData[\"materialcategory\"][\"sdescription\"] = this.state.selectedRecord[\"sdescription\"] ? this.state.selectedRecord[\"sdescription\"] : \"\";\n      inputData[\"materialcategory\"][\"ndefaultstatus\"] = this.state.selectedRecord[\"ndefaultstatus\"] ? this.state.selectedRecord[\"ndefaultstatus\"] : transactionStatus.NO;\n      inputData[\"materialcategory\"][\"ncategorybasedflow\"] = this.state.selectedRecord[\"ncategorybasedflow\"] ? this.state.selectedRecord[\"ncategorybasedflow\"] : transactionStatus.NO;\n      inputData[\"materialcategory\"][\"needSectionwise\"] = this.state.selectedRecord[\"needSectionwise\"] ? this.state.selectedRecord[\"needSectionwise\"] : transactionStatus.NO;\n      const inputParam = {\n        classUrl: this.props.Login.inputParam.classUrl,\n        methodUrl: this.props.Login.inputParam.methodUrl,\n        inputData: inputData,\n        operation: this.props.Login.operation,\n        displayName: this.props.Login.inputParam.displayName,\n        saveType,\n        formRef,\n        selectedId,\n        dataState,\n        selectedRecord: { ...this.state.selectedRecord\n        }\n      };\n      const esignNeeded = showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode);\n\n      if (esignNeeded) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData: this.props.Login.masterData\n            },\n            openModal: true,\n            screenName: this.props.intl.formatMessage({\n              id: this.props.Login.inputParam.displayName\n            }),\n            operation: this.props.Login.operation\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\n      }\n    };\n\n    this.onInputOnChange = event => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (event.target.type === 'checkbox') {\n        selectedRecord[event.target.name] = event.target.checked === true ? 3 : 4;\n      } else {\n        selectedRecord[event.target.name] = event.target.value;\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onComboChange = (comboData, fieldName) => {\n      const selectedRecord = this.state.selectedRecord || {};\n      selectedRecord[fieldName] = comboData;\n      ;\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.validateEsign = () => {\n      const inputParam = {\n        inputData: {\n          \"userinfo\": { ...this.props.Login.userInfo,\n            sreason: this.state.selectedRecord[\"esigncomments\"],\n            nreasoncode: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].value,\n            spredefinedreason: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].label\n          },\n          password: this.state.selectedRecord[\"esignpassword\"]\n        },\n        screenData: this.props.Login.screenData\n      };\n      this.props.validateEsignCredential(inputParam, \"openModal\");\n    };\n\n    this.formRef = React.createRef();\n    this.extractedColumnList = [];\n    const _dataState = {\n      skip: 0,\n      take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n    };\n    this.state = {\n      data: [],\n      masterStatus: \"\",\n      error: \"\",\n      selectedRecord: {},\n      dataResult: [],\n      dataState: _dataState,\n      isOpen: false,\n      userRoleControlRights: [],\n      controlMap: new Map()\n    };\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\n      toast.warn(props.Login.masterStatus);\n      props.Login.masterStatus = \"\";\n    }\n\n    if (props.Login.error !== state.error) {\n      toast.error(props.Login.error);\n      props.Login.error = \"\";\n    }\n\n    return null;\n  }\n\n  render() {\n    let primaryKeyField = \"\";\n\n    if (this.props.Login.inputParam !== undefined) {\n      this.extractedColumnList = [{\n        \"controlType\": \"combobox\",\n        \"idsName\": \"IDS_MATERIALTYPE\",\n        \"dataField\": \"smaterialtypename\",\n        \"width\": \"200px\"\n      }, {\n        \"controlType\": \"textbox\",\n        \"idsName\": \"IDS_MATERIALCATEGORY\",\n        \"dataField\": \"smaterialcatname\",\n        \"width\": \"200px\"\n      }, {\n        \"controlType\": \"textbox\",\n        \"idsName\": \"IDS_BARCODE\",\n        \"dataField\": \"sbarcodename\",\n        \"width\": \"200px\"\n      }, {\n        \"controlType\": \"textarea\",\n        \"idsName\": \"IDS_DESCRIPTION\",\n        \"dataField\": \"sdescription\",\n        \"width\": \"200px\"\n      }, {\n        \"controlType\": \"checkbox\",\n        \"idsName\": \"IDS_CATEGORYBASEDFLOW\",\n        \"dataField\": \"scategorybasedflow\",\n        \"width\": \"200px\",\n        \"isIdsField\": false,\n        \"controlName\": \"ncategorybasedflow\"\n      }, {\n        \"controlType\": \"checkbox\",\n        \"idsName\": \"IDS_DEFAULTSTATUS\",\n        \"dataField\": \"sdisplaystatus\",\n        \"width\": \"200px\",\n        \"isIdsField\": false,\n        \"controlName\": \"ndefaultstatus\"\n      }, {\n        \"controlType\": \"checkbox\",\n        \"idsName\": \"IDS_NEEDSECTIONWISE\",\n        \"dataField\": \"sneedSectionwise\",\n        \"width\": \"200px\",\n        \"isIdsField\": false,\n        \"controlName\": \"needSectionwise\"\n      }];\n      primaryKeyField = \"nmaterialcatcode\";\n    }\n\n    let mandatoryFields = [];\n    mandatoryFields.push({\n      \"mandatory\": true,\n      \"idsName\": \"IDS_MATERIALTYPE\",\n      \"dataField\": \"nmaterialtypecode\",\n      \"mandatoryLabel\": \"IDS_SELECT\",\n      \"controlType\": \"selectbox\"\n    }, {\n      \"mandatory\": true,\n      \"idsName\": \"IDS_MATERIALCATEGORY\",\n      \"dataField\": \"smaterialcatname\",\n      \"mandatoryLabel\": \"IDS_ENTER\",\n      \"controlType\": \"textbox\"\n    } //,\n    //  { \"mandatory\": true, \"idsName\": \"IDS_BARCODE\", \"dataField\": \"nbarcode\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"textbox\" },\n    );\n    const addId = this.props.Login.inputParam && this.state.controlMap.has(\"Add\".concat(this.props.Login.inputParam.methodUrl)) && this.state.controlMap.get(\"Add\".concat(this.props.Login.inputParam.methodUrl)).ncontrolcode;\n    const editID = this.props.Login.inputParam && this.state.controlMap.has(\"Edit\".concat(this.props.Login.inputParam.methodUrl)) && this.state.controlMap.get(\"Edit\".concat(this.props.Login.inputParam.methodUrl)).ncontrolcode;\n    const addParam = {\n      screenName: this.props.intl.formatMessage({\n        id: \"IDS_MATERIALCATEGORY\"\n      }),\n      primaryeyField: \"nmaterialcatcode\",\n      primaryKeyValue: undefined,\n      operation: \"create\",\n      inputParam: this.props.Login.inputParam,\n      userInfo: this.props.Login.userInfo,\n      ncontrolCode: addId\n    };\n    const editParam = {\n      screenName: this.props.Login.inputParam && this.props.Login.inputParam.displayName && this.props.intl.formatMessage({\n        id: this.props.Login.inputParam.displayName\n      }),\n      primaryKeyField: \"nmaterialcatcode\",\n      operation: \"update\",\n      inputParam: this.props.Login.inputParam,\n      userInfo: this.props.Login.userInfo,\n      ncontrolCode: editID\n    };\n    const deleteParam = {\n      operation: \"delete\"\n    };\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(ListWrapper, {\n      className: \"client-list-content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(PrimaryHeader, {\n      className: \"d-flex justify-content-between mb-3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 29\n      }\n    }), this.state.data ? /*#__PURE__*/React.createElement(DataGrid, {\n      primaryKeyField: primaryKeyField //selectedId={this.props.Login.selectedId}\n      ,\n      data: this.state.data,\n      dataResult: this.state.dataResult,\n      dataState: this.state.dataState,\n      dataStateChange: this.dataStateChange,\n      extractedColumnList: this.extractedColumnList,\n      controlMap: this.state.controlMap,\n      userRoleControlRights: this.state.userRoleControlRights,\n      inputParam: this.props.Login.inputParam,\n      userInfo: this.props.Login.userInfo,\n      fetchRecord: this.props.getMaterialTypeComboService,\n      deleteRecord: this.deleteRecord,\n      reloadData: this.reloadData,\n      editParam: editParam,\n      deleteParam: deleteParam,\n      addRecord: () => this.props.getMaterialTypeComboService(addParam),\n      scrollable: \"scrollable\",\n      gridHeight: \"600px\" // formatMessage={this.props.intl.formatMessage}\n      //isComponent={true}\n      ,\n      isActionRequired: true,\n      isToolBarRequired: true //pageable={true}\n      ,\n      pageable: {\n        buttonCount: 4,\n        pageSizes: true\n      },\n      hasDynamicColSize: true,\n      selectedId: this.props.Login.selectedId,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 33\n      }\n    }) : \"\"))), this.props.Login.openModal && /*#__PURE__*/React.createElement(SlideOutModal, {\n      show: this.props.Login.openModal,\n      closeModal: this.closeModal,\n      operation: this.props.Login.operation,\n      inputParam: this.props.Login.inputParam,\n      screenName: this.props.Login.screenName,\n      onSaveClick: this.onSaveClick,\n      esign: this.props.Login.loadEsign,\n      validateEsign: this.validateEsign,\n      masterStatus: this.props.Login.masterStatus,\n      updateStore: this.props.updateStore,\n      mandatoryFields: mandatoryFields,\n      selectedRecord: this.state.selectedRecord || {},\n      addComponent: this.props.Login.loadEsign ? /*#__PURE__*/React.createElement(Esign, {\n        operation: this.props.Login.operation,\n        formatMessage: this.props.intl.formatMessage,\n        onInputOnChange: this.onInputOnChange,\n        inputParam: this.props.Login.inputParam,\n        selectedRecord: this.state.selectedRecord || {},\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 220,\n          columnNumber: 29\n        }\n      }) : /*#__PURE__*/React.createElement(AddMaterialCategory, {\n        selectedRecord: this.state.selectedRecord || {},\n        onInputOnChange: this.onInputOnChange,\n        onComboChange: this.onComboChange,\n        needSectionwisedisabled: this.props.Login.needSectionwisedisabled // formatMessage={this.props.intl.formatMessage}\n        ,\n        materialCatgeoryList: this.props.Login.materialCatgeoryList || [],\n        barcodeList: this.props.Login.barcodeList || [],\n        operation: this.props.Login.operation,\n        materialtypeListype: this.props.Login.materialtypeListype,\n        inputParam: this.props.Login.inputParam,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 227,\n          columnNumber: 31\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 21\n      }\n    }));\n  }\n\n  componentDidUpdate(previousProps) {\n    if (this.props.Login.masterData !== previousProps.Login.masterData) {\n      if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\n        const userRoleControlRights = [];\n\n        if (this.props.Login.userRoleControlRights) {\n          this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item => userRoleControlRights.push(item.ncontrolcode));\n        }\n\n        const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode);\n        this.setState({\n          userRoleControlRights,\n          controlMap,\n          data: this.props.Login.masterData,\n          dataResult: process(this.props.Login.masterData, this.state.dataState)\n        });\n      } else {\n        let {\n          dataState\n        } = this.state;\n\n        if (this.props.Login.dataState === undefined) {\n          dataState = {\n            skip: 0,\n            take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n          };\n        }\n\n        this.setState({\n          data: this.props.Login.masterData,\n          isOpen: false,\n          selectedRecord: this.props.Login.selectedRecord,\n          dataResult: process(this.props.Login.masterData, dataState),\n          dataState\n        });\n      }\n    } else if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\n      this.setState({\n        selectedRecord: this.props.Login.selectedRecord\n      });\n    }\n  }\n\n  componentWillUnmount() {\n    const updateInfo = {\n      typeName: DEFAULT_RETURN,\n      data: {\n        masterData: [],\n        inputParam: undefined,\n        operation: null,\n        modalName: undefined\n      }\n    };\n    this.props.updateStore(updateInfo);\n  }\n\n}\n\nexport default connect(mapStateToProps, {\n  callService,\n  getMaterialTypeComboService,\n  updateStore,\n  crudMaster,\n  validateEsignCredential\n})(injectIntl(MaterialCategory));","map":{"version":3,"sources":["E:/WorkingFolder/React_Postgres/ALPD/SOURCE-512/QuaLISWeb/src/pages/Material/MaterialCategory.jsx"],"names":["React","connect","injectIntl","Row","Col","process","toast","DataGrid","AddMaterialCategory","SlideOutModal","Esign","ListWrapper","PrimaryHeader","callService","getMaterialTypeComboService","updateStore","crudMaster","validateEsignCredential","getControlMap","showEsign","DEFAULT_RETURN","transactionStatus","mapStateToProps","state","Login","MaterialCategory","Component","constructor","props","dataStateChange","event","setState","dataResult","data","dataState","closeModal","loadEsign","openModal","selectedRecord","selectedId","operation","updateInfo","typeName","reloadData","inputParam","inputData","userInfo","classUrl","methodUrl","displayName","deleteRecord","toLowerCase","esignNeeded","userRoleControlRights","nformcode","ncontrolCode","screenData","masterData","screenName","intl","formatMessage","id","onSaveClick","saveType","formRef","undefined","JSON","parse","stringify","nmaterialcatcode","nmastersitecode","nuserrole","hasOwnProperty","value","NA","NO","onInputOnChange","target","type","name","checked","onComboChange","comboData","fieldName","validateEsign","sreason","nreasoncode","spredefinedreason","label","password","createRef","extractedColumnList","skip","take","settings","parseInt","masterStatus","error","isOpen","controlMap","Map","getDerivedStateFromProps","warn","render","primaryKeyField","mandatoryFields","push","addId","has","concat","get","ncontrolcode","editID","addParam","primaryeyField","primaryKeyValue","editParam","deleteParam","buttonCount","pageSizes","needSectionwisedisabled","materialCatgeoryList","barcodeList","materialtypeListype","componentDidUpdate","previousProps","Object","values","map","item","componentWillUnmount","modalName"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { injectIntl } from 'react-intl';\r\nimport { Row, Col } from 'react-bootstrap';\r\nimport { process } from '@progress/kendo-data-query';\r\nimport { toast } from 'react-toastify';\r\nimport DataGrid from '../../components/data-grid/data-grid.component';\r\nimport AddMaterialCategory from './AddMaterialCategory';\r\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\r\nimport Esign from '../audittrail/Esign';\r\nimport { ListWrapper, PrimaryHeader } from '../../components/client-group.styles';\r\nimport { callService, getMaterialTypeComboService, updateStore, crudMaster, validateEsignCredential } from '../../actions';\r\nimport { getControlMap, showEsign } from '../../components/CommonScript';\r\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\r\nimport { transactionStatus } from '../../components/Enumeration';\r\n\r\nconst mapStateToProps = state => {\r\n    return ({ Login: state.Login })\r\n}\r\n\r\nclass MaterialCategory extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.formRef = React.createRef();\r\n        this.extractedColumnList = [];\r\n\r\n\r\n        const dataState = {\r\n            skip: 0,\r\n            take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5,\r\n        };\r\n\r\n        this.state = {\r\n            data: [], masterStatus: \"\", error: \"\", selectedRecord: {},\r\n            dataResult: [],\r\n            dataState: dataState,\r\n            isOpen: false,\r\n            userRoleControlRights: [],\r\n            controlMap: new Map()\r\n        };\r\n    };\r\n\r\n\r\n    static getDerivedStateFromProps(props, state) {\r\n\r\n        if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\r\n            toast.warn(props.Login.masterStatus);\r\n            props.Login.masterStatus = \"\";\r\n        }\r\n\r\n        if (props.Login.error !== state.error) {\r\n            toast.error(props.Login.error)\r\n            props.Login.error = \"\";\r\n        }\r\n        return null;\r\n    }\r\n\r\n    dataStateChange = (event) => {\r\n        this.setState({\r\n            dataResult: process(this.state.data, event.dataState),\r\n            dataState: event.dataState\r\n        });\r\n    }\r\n\r\n    closeModal = () => {\r\n        let loadEsign = this.props.Login.loadEsign;\r\n        let openModal = this.props.Login.openModal;\r\n        let selectedRecord = this.props.Login.selectedRecord;\r\n        let selectedId = this.props.Login.selectedId;\r\n        if (this.props.Login.loadEsign) {\r\n            if (this.props.Login.operation === \"delete\") {\r\n                loadEsign = false;\r\n                openModal = false;\r\n                selectedRecord = {};\r\n            } else {\r\n                loadEsign = false;\r\n                selectedRecord['esignpassword'] = \"\"\r\n                selectedRecord['esigncomments'] = \"\"\r\n                selectedRecord['esignreason']=\"\"\r\n            }\r\n        } else {\r\n            openModal = false;\r\n            selectedRecord = {};\r\n            selectedId=null;\r\n        }\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { openModal, loadEsign, selectedRecord,selectedId }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n\r\n    reloadData = () => {\r\n        const inputParam = {\r\n            inputData: { \"userinfo\": this.props.Login.userInfo },\r\n\r\n            classUrl: this.props.Login.inputParam.classUrl,\r\n            methodUrl: this.props.Login.inputParam.methodUrl,\r\n            userInfo: this.props.Login.userInfo,\r\n            displayName: this.props.Login.inputParam.displayName\r\n        };\r\n\r\n        this.props.callService(inputParam);\r\n    }\r\n\r\n\r\n\r\n\r\n    render() {\r\n        let primaryKeyField = \"\";\r\n\r\n        if (this.props.Login.inputParam !== undefined) {\r\n\r\n            this.extractedColumnList = [\r\n                { \"controlType\": \"combobox\", \"idsName\": \"IDS_MATERIALTYPE\", \"dataField\": \"smaterialtypename\", \"width\": \"200px\" },\r\n                { \"controlType\": \"textbox\", \"idsName\": \"IDS_MATERIALCATEGORY\", \"dataField\": \"smaterialcatname\", \"width\": \"200px\" },\r\n                { \"controlType\": \"textbox\", \"idsName\": \"IDS_BARCODE\", \"dataField\": \"sbarcodename\", \"width\": \"200px\" },\r\n                { \"controlType\": \"textarea\", \"idsName\": \"IDS_DESCRIPTION\", \"dataField\": \"sdescription\", \"width\": \"200px\" },\r\n                { \"controlType\": \"checkbox\", \"idsName\": \"IDS_CATEGORYBASEDFLOW\", \"dataField\": \"scategorybasedflow\", \"width\": \"200px\", \"isIdsField\": false, \"controlName\": \"ncategorybasedflow\" },\r\n                { \"controlType\": \"checkbox\", \"idsName\": \"IDS_DEFAULTSTATUS\", \"dataField\": \"sdisplaystatus\", \"width\": \"200px\", \"isIdsField\": false, \"controlName\": \"ndefaultstatus\" },\r\n                { \"controlType\": \"checkbox\", \"idsName\": \"IDS_NEEDSECTIONWISE\", \"dataField\": \"sneedSectionwise\", \"width\": \"200px\", \"isIdsField\": false, \"controlName\": \"needSectionwise\" }\r\n            ]\r\n            primaryKeyField = \"nmaterialcatcode\";\r\n        }\r\n        let mandatoryFields = [];\r\n        mandatoryFields.push(\r\n            { \"mandatory\": true, \"idsName\": \"IDS_MATERIALTYPE\", \"dataField\": \"nmaterialtypecode\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n            { \"mandatory\": true, \"idsName\": \"IDS_MATERIALCATEGORY\", \"dataField\": \"smaterialcatname\", \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"textbox\" }//,\r\n          //  { \"mandatory\": true, \"idsName\": \"IDS_BARCODE\", \"dataField\": \"nbarcode\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"textbox\" },\r\n\r\n        )\r\n        const addId = this.props.Login.inputParam && this.state.controlMap.has(\"Add\".concat(this.props.Login.inputParam.methodUrl))\r\n            && this.state.controlMap.get(\"Add\".concat(this.props.Login.inputParam.methodUrl)).ncontrolcode;\r\n\r\n        const editID = this.props.Login.inputParam && this.state.controlMap.has(\"Edit\".concat(this.props.Login.inputParam.methodUrl))\r\n            && this.state.controlMap.get(\"Edit\".concat(this.props.Login.inputParam.methodUrl)).ncontrolcode;\r\n\r\n        const addParam = {\r\n            screenName: this.props.intl.formatMessage({ id: \"IDS_MATERIALCATEGORY\" }), primaryeyField: \"nmaterialcatcode\", primaryKeyValue: undefined,\r\n            operation: \"create\", inputParam: this.props.Login.inputParam, userInfo: this.props.Login.userInfo, ncontrolCode: addId\r\n        };\r\n\r\n        const editParam = {\r\n            screenName: this.props.Login.inputParam && this.props.Login.inputParam.displayName && this.props.intl.formatMessage({ id: this.props.Login.inputParam.displayName }), primaryKeyField: \"nmaterialcatcode\", operation: \"update\",\r\n            inputParam: this.props.Login.inputParam, userInfo: this.props.Login.userInfo, ncontrolCode: editID\r\n        };\r\n\r\n\r\n        const deleteParam = { operation: \"delete\" };\r\n        return (\r\n            <>\r\n                <Row>\r\n                    <Col>\r\n                        <ListWrapper className=\"client-list-content\">\r\n                            <PrimaryHeader className=\"d-flex justify-content-between mb-3\">\r\n                                {/* <HeaderName className=\"header-primary-md\">\r\n                                {this.props.Login.inputParam && this.props.Login.inputParam.displayName ?\r\n                                    <FormattedMessage id={this.props.Login.inputParam.displayName} /> : \"\"}\r\n                            </HeaderName> */}\r\n                                {/* <Button className=\"btn btn-user btn-primary-blue\"\r\n                                 hidden={this.props.Login.inputParam && this.state.userRoleControlRights.indexOf(addId) === -1}\r\n                                onClick={() => this.props.getMaterialTypeComboService(addParam)}>\r\n                                <FontAwesomeIcon icon={faPlus} /> {}\r\n                                <FormattedMessage id=\"IDS_ADD\" defaultMessage='Add' />\r\n                            </Button> */}\r\n                            </PrimaryHeader>\r\n\r\n                            {this.state.data ?\r\n                                <DataGrid\r\n                                    primaryKeyField={primaryKeyField}\r\n                                    //selectedId={this.props.Login.selectedId}\r\n                                    data={this.state.data}\r\n                                    dataResult={this.state.dataResult}\r\n                                    dataState={this.state.dataState}\r\n                                    dataStateChange={this.dataStateChange}\r\n                                    extractedColumnList={this.extractedColumnList}\r\n                                    controlMap={this.state.controlMap}\r\n                                    userRoleControlRights={this.state.userRoleControlRights}\r\n                                    inputParam={this.props.Login.inputParam}\r\n                                    userInfo={this.props.Login.userInfo}\r\n                                    fetchRecord={this.props.getMaterialTypeComboService}\r\n                                    deleteRecord={this.deleteRecord}\r\n                                    reloadData={this.reloadData}\r\n                                    editParam={editParam}\r\n                                    deleteParam={deleteParam}\r\n                                    addRecord={() => this.props.getMaterialTypeComboService(addParam)}\r\n                                    scrollable={\"scrollable\"}\r\n                                    gridHeight={\"600px\"}\r\n                                    // formatMessage={this.props.intl.formatMessage}\r\n                                    //isComponent={true}\r\n                                    isActionRequired={true}\r\n                                    isToolBarRequired={true}\r\n                                    //pageable={true}\r\n                                    pageable={{ buttonCount: 4, pageSizes: true }}\r\n                                    hasDynamicColSize={true}\r\n                                    selectedId={this.props.Login.selectedId}\r\n                                />\r\n                                : \"\"}\r\n\r\n                        </ListWrapper>\r\n                    </Col>\r\n                </Row>\r\n                {this.props.Login.openModal &&\r\n                    <SlideOutModal\r\n                        show={this.props.Login.openModal}\r\n                        closeModal={this.closeModal}\r\n                        operation={this.props.Login.operation}\r\n                        inputParam={this.props.Login.inputParam}\r\n                        screenName={this.props.Login.screenName}\r\n                        onSaveClick={this.onSaveClick}\r\n                        esign={this.props.Login.loadEsign}\r\n                        validateEsign={this.validateEsign}\r\n                        masterStatus={this.props.Login.masterStatus}\r\n                        updateStore={this.props.updateStore}\r\n                        mandatoryFields={mandatoryFields}\r\n                        selectedRecord={this.state.selectedRecord || {}}\r\n                        addComponent={this.props.Login.loadEsign ?\r\n                            <Esign\r\n                                operation={this.props.Login.operation}\r\n                                formatMessage={this.props.intl.formatMessage}\r\n                                onInputOnChange={this.onInputOnChange}\r\n                                inputParam={this.props.Login.inputParam}\r\n                                selectedRecord={this.state.selectedRecord || {}}\r\n                            />\r\n                            : <AddMaterialCategory\r\n                                selectedRecord={this.state.selectedRecord || {}}\r\n                                onInputOnChange={this.onInputOnChange}\r\n                                onComboChange={this.onComboChange}\r\n                                needSectionwisedisabled={this.props.Login.needSectionwisedisabled}\r\n                                // formatMessage={this.props.intl.formatMessage}\r\n                                materialCatgeoryList={this.props.Login.materialCatgeoryList || []}\r\n                                barcodeList={this.props.Login.barcodeList || []}\r\n                                operation={this.props.Login.operation}\r\n                                materialtypeListype={this.props.Login.materialtypeListype}\r\n                                inputParam={this.props.Login.inputParam}\r\n\r\n                            />\r\n                        }\r\n                    />\r\n                }\r\n            </>\r\n        );\r\n    }\r\n\r\n    componentDidUpdate(previousProps) {\r\n        if (this.props.Login.masterData !== previousProps.Login.masterData) {\r\n            if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\r\n                const userRoleControlRights = [];\r\n                if (this.props.Login.userRoleControlRights) {\r\n                    this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item =>\r\n                        userRoleControlRights.push(item.ncontrolcode))\r\n                }\r\n                const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode)\r\n                this.setState({\r\n                    userRoleControlRights, controlMap, data: this.props.Login.masterData,\r\n                    dataResult: process(this.props.Login.masterData, this.state.dataState),\r\n                });\r\n            }\r\n            else {\r\n                let { dataState } = this.state;\r\n                if (this.props.Login.dataState === undefined) {\r\n                    dataState = { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 }\r\n                }\r\n\r\n                this.setState({\r\n                    data: this.props.Login.masterData,\r\n                    isOpen: false,\r\n                    selectedRecord: this.props.Login.selectedRecord,\r\n                    dataResult: process(this.props.Login.masterData, dataState),\r\n                    dataState\r\n                });\r\n            }\r\n        } else if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\r\n            this.setState({ selectedRecord: this.props.Login.selectedRecord });\r\n        }\r\n    }\r\n\r\n    deleteRecord = (inputData) => {\r\n        const inputParam = {\r\n            classUrl: this.props.Login.inputParam.classUrl,\r\n            methodUrl: this.props.Login.inputParam.methodUrl,\r\n\r\n            inputData: {\r\n                [this.props.Login.inputParam.methodUrl.toLowerCase()]: inputData.selectedRecord,\r\n                \"userinfo\": this.props.Login.userInfo\r\n            },\r\n            operation: inputData.operation,\r\n            displayName: this.props.Login.inputParam.displayName,\r\n            selectedRecord:{...this.state.selectedRecord}\r\n            //dataState: this.state.dataState\r\n        }\r\n        const esignNeeded = showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, inputData.ncontrolCode);\r\n        if (esignNeeded) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData: this.props.Login.masterData },\r\n                    openModal: true, screenName: this.props.intl.formatMessage({ id: this.props.Login.inputParam.displayName }),\r\n                    operation: inputData.operation\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\r\n        }\r\n    }\r\n\r\n    onSaveClick = (saveType, formRef) => {\r\n        //add \r\n        let inputData = [];\r\n        inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n        let dataState = undefined;\r\n        let selectedId = null;\r\n        if (this.props.Login.operation === \"update\") {\r\n            // edit\r\n            dataState = this.state.dataState;\r\n            inputData[this.props.Login.inputParam.methodUrl.toLowerCase()] = JSON.parse(JSON.stringify(this.state.selectedRecord));\r\n            selectedId = this.props.Login.selectedRecord.nmaterialcatcode;\r\n\r\n        }\r\n        else {\r\n            //add               \r\n            inputData[this.props.Login.inputParam.methodUrl.toLowerCase()] = { \"nsitecode\": this.props.Login.userInfo.nmastersitecode };\r\n            inputData[this.props.Login.inputParam.methodUrl.toLowerCase()] = { \"nuserrolecode\": this.props.Login.userInfo.nuserrole };\r\n\r\n        }\r\n        if (inputData[\"materialcategory\"].hasOwnProperty('esignpassword')) {\r\n        if (inputData[\"materialcategory\"]['esignpassword'] === '') {\r\n            delete inputData[\"materialcategory\"]['esigncomments']\r\n            delete inputData[\"materialcategory\"]['esignpassword']\r\n            delete inputData[\"materialcategory\"]['esignreason']\r\n        }\r\n    }\r\n\r\n        inputData[\"materialcategory\"][\"nmaterialtypecode\"] = this.state.selectedRecord[\"nmaterialtypecode\"] ? this.state.selectedRecord[\"nmaterialtypecode\"].value : transactionStatus.NA;\r\n        inputData[\"materialcategory\"][\"nbarcode\"] = this.state.selectedRecord[\"nbarcode\"] ? this.state.selectedRecord[\"nbarcode\"].value : transactionStatus.NA;\r\n\r\n        inputData[\"materialcategory\"][\"smaterialcatname\"] = this.state.selectedRecord[\"smaterialcatname\"] ? this.state.selectedRecord[\"smaterialcatname\"] : transactionStatus.NO;\r\n        inputData[\"materialcategory\"][\"sdescription\"] = this.state.selectedRecord[\"sdescription\"] ? this.state.selectedRecord[\"sdescription\"] : \"\";\r\n        inputData[\"materialcategory\"][\"ndefaultstatus\"] = this.state.selectedRecord[\"ndefaultstatus\"] ? this.state.selectedRecord[\"ndefaultstatus\"] : transactionStatus.NO;\r\n        inputData[\"materialcategory\"][\"ncategorybasedflow\"] = this.state.selectedRecord[\"ncategorybasedflow\"] ? this.state.selectedRecord[\"ncategorybasedflow\"] : transactionStatus.NO;\r\n        inputData[\"materialcategory\"][\"needSectionwise\"] = this.state.selectedRecord[\"needSectionwise\"] ? this.state.selectedRecord[\"needSectionwise\"] : transactionStatus.NO;\r\n\r\n        const inputParam = {\r\n            classUrl: this.props.Login.inputParam.classUrl,\r\n            methodUrl: this.props.Login.inputParam.methodUrl,\r\n            inputData: inputData,\r\n            operation: this.props.Login.operation,\r\n            displayName: this.props.Login.inputParam.displayName, saveType, formRef, selectedId, dataState,\r\n            selectedRecord:{...this.state.selectedRecord}\r\n        }\r\n        const esignNeeded = showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode);\r\n        if (esignNeeded) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData: this.props.Login.masterData },\r\n                    openModal: true, screenName: this.props.intl.formatMessage({ id: this.props.Login.inputParam.displayName }),\r\n                    operation: this.props.Login.operation,\r\n                    \r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                masterData: [], inputParam: undefined, operation: null, modalName: undefined\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n\r\n\r\n    onInputOnChange = (event) => {\r\n\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if (event.target.type === 'checkbox') {\r\n            selectedRecord[event.target.name] = event.target.checked === true ? 3 : 4;\r\n        }\r\n        else {\r\n            selectedRecord[event.target.name] = event.target.value;\r\n        }\r\n\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n\r\n    onComboChange = (comboData, fieldName) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        selectedRecord[fieldName] = comboData;;\r\n\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n\r\n    validateEsign = () => {\r\n        const inputParam = {\r\n            inputData: {\r\n                \"userinfo\": {\r\n                    ...this.props.Login.userInfo,\r\n                    sreason: this.state.selectedRecord[\"esigncomments\"],\r\n                    nreasoncode:this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].value,\r\n                    spredefinedreason:this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].label,\r\n               \r\n                },\r\n                password: this.state.selectedRecord[\"esignpassword\"]\r\n            },\r\n            screenData: this.props.Login.screenData\r\n        }\r\n        this.props.validateEsignCredential(inputParam, \"openModal\");\r\n    }\r\n\r\n}\r\n\r\nexport default connect(mapStateToProps, { callService, getMaterialTypeComboService, updateStore, crudMaster, validateEsignCredential })(injectIntl(MaterialCategory));"]},"metadata":{},"sourceType":"module"}