{"ast":null,"code":"var _jsxFileName = \"D:\\\\LIMSWFH\\\\LIMSPOSTGRESQL\\\\QuaLISWeb\\\\src\\\\pages\\\\testgroup\\\\TestGroupTestTab.jsx\";\nimport React, { Component } from 'react';\nimport { injectIntl } from 'react-intl';\nimport { Row, Col } from 'react-bootstrap';\nimport PerfectScrollbar from 'react-perfect-scrollbar';\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\nimport TestGroupParameterTab from './TestGroupParameterTab';\nimport CustomTab from '../../components/custom-tabs/custom-tabs.component';\nimport { showEsign } from '../../components/CommonScript';\nimport Esign from '../audittrail/Esign';\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\nimport { parameterType, transactionStatus } from '../../components/Enumeration';\nimport EditTestGroupParameter from './EditTestGroupParameter';\nimport AddCodedResult from '../testmanagement/AddCodedResult';\nimport FormTextarea from '../../components/form-textarea/form-textarea.component';\nimport AddSpecification from '../testmanagement/AddSpecification';\nimport TemplateForm from '../checklist/checklist/TemplateForm';\nimport { toast } from 'react-toastify';\nimport TestGroupMaterialTab from './TestGroupMaterialTab';\nimport AddTestGroupTestMaterial from './AddTestGroupTestMaterial';\nimport ConfirmMessage from \"../../components/confirm-alert/confirm-message.component\";\n\nclass TestGroupTestTab extends Component {\n  constructor(props) {\n    super(props);\n\n    this.onTemplateInputChange = event => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (event.target.type === 'checkbox') {\n        selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\n      } else {\n        selectedRecord[event.target.name] = event.target.value;\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onTemplateComboChange = (comboData, fieldName) => {\n      let selectedRecord = this.state.selectedRecord || {};\n      selectedRecord[fieldName] = comboData;\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onTemplateDateChange = (dateName, dateValue) => {\n      const {\n        selectedRecord\n      } = this.state.selectedRecord || {};\n\n      if (dateValue === null) {\n        dateValue = new Date();\n      }\n\n      selectedRecord[dateName] = dateValue;\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.handleClose = () => {\n      let updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          selectedRecord: {},\n          testGroupCheckList: {},\n          openTemplateModal: false\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.closeModal = () => {\n      let loadEsign = this.props.loadEsign;\n      let openChildModal = this.props.openChildModal;\n      let selectedRecord = this.props.selectedRecord;\n\n      if (this.props.loadEsign) {\n        if (this.props.operation === \"delete\" || this.props.operation === \"Default\") {\n          loadEsign = false;\n          openChildModal = false;\n          selectedRecord = {};\n        } else {\n          loadEsign = false;\n          selectedRecord[\"agree\"] = 4;\n          selectedRecord['esignpassword'] = \"\";\n          selectedRecord['esigncomments'] = \"\";\n        }\n      } else {\n        openChildModal = false;\n        selectedRecord = {};\n      }\n\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          openChildModal,\n          loadEsign,\n          selectedRecord\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onTabChange = tabProps => {\n      const screenName = tabProps.screenName;\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          screenName\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.tabDetail = () => {\n      const tabMap = new Map();\n      tabMap.set(\"IDS_PARAMETER\", /*#__PURE__*/React.createElement(TestGroupParameterTab, {\n        controlMap: this.props.controlMap,\n        userRoleControlRights: this.props.userRoleControlRights,\n        userInfo: this.props.userInfo,\n        inputParam: this.props.inputParam,\n        masterData: this.props.masterData,\n        deleteAction: this.deleteAction,\n        onSwitchChange: this.onSwitchChange,\n        addTestFile: this.props.addTestFile,\n        viewTestFile: this.viewTestFile,\n        defaultRecord: this.defaultRecord,\n        filterData: this.props.filterData,\n        getTestGroupParameter: this.props.getTestGroupParameter,\n        editTestGroupParameter: this.props.editTestGroupParameter,\n        addTestGroupCodedResult: this.props.addTestGroupCodedResult,\n        viewTestGroupCheckList: this.props.viewTestGroupCheckList,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 261,\n          columnNumber: 13\n        }\n      }));\n      return tabMap;\n    };\n\n    this.testTabDetail = () => {\n      const tabMap = new Map();\n      tabMap.set(\"IDS_PARAMETER\", /*#__PURE__*/React.createElement(TestGroupParameterTab, {\n        paneHeight: this.props.paneHeight,\n        controlMap: this.props.controlMap,\n        userRoleControlRights: this.props.userRoleControlRights,\n        userInfo: this.props.userInfo,\n        inputParam: this.props.inputParam,\n        masterData: this.props.masterData,\n        deleteAction: this.deleteAction,\n        onSwitchChange: this.onSwitchChange,\n        addTestFile: this.props.addTestFile,\n        viewTestFile: this.viewTestFile,\n        defaultRecord: this.defaultRecord,\n        filterData: this.props.filterData,\n        getTestGroupParameter: this.props.getTestGroupParameter,\n        editTestGroupParameter: this.props.editTestGroupParameter,\n        addTestGroupCodedResult: this.props.addTestGroupCodedResult,\n        viewTestGroupCheckList: this.props.viewTestGroupCheckList,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 283,\n          columnNumber: 13\n        }\n      }));\n      tabMap.set(\"IDS_MATERIAL\", /*#__PURE__*/React.createElement(TestGroupMaterialTab, {\n        paneHeight: this.props.paneHeight,\n        controlMap: this.props.controlMap,\n        userRoleControlRights: this.props.userRoleControlRights,\n        userInfo: this.props.userInfo,\n        inputParam: this.props.inputParam,\n        masterData: this.props.masterData,\n        ConfirmDelete: this.ConfirmDelete,\n        getDataForTestMaterial: this.props.getDataForTestMaterial,\n        getTestGroupMaterial: this.props.getTestGroupMaterial,\n        getDataForEditTestMaterial: this.props.getDataForEditTestMaterial,\n        selectedRecord: this.state.selectedRecord,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 302,\n          columnNumber: 13\n        }\n      }));\n      return tabMap;\n    };\n\n    this.ConfirmDelete = (operation, deleteId, selectedRecord) => {\n      this.confirmMessage.confirm(\"deleteMessage\", this.props.intl.formatMessage({\n        id: \"IDS_DELETE\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_DEFAULTCONFIRMMSG\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_OK\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_CANCEL\"\n      }), () => this.DeleteTestMaterial(operation, deleteId, selectedRecord));\n    };\n\n    this.DeleteTestMaterial = (operation, ncontrolCode) => {\n      let selectedRecord = this.state.selectedRecord;\n      let inputData = [];\n      inputData[\"testgrouptestmaterial\"] = {\n        ntestgrouptestmaterialcode: this.props.masterData.selectedMaterial.ntestgrouptestmaterialcode,\n        ntestgrouptestcode: this.props.masterData.selectedMaterial.ntestgrouptestcode\n      };\n      inputData[\"userinfo\"] = this.props.userInfo;\n      const inputParam = {\n        methodUrl: \"TestGroupTestMaterial\",\n        classUrl: this.props.inputParam.classUrl,\n        inputData: inputData,\n        operation: \"delete\"\n      };\n      const masterData = this.props.masterData;\n\n      if (showEsign(this.props.esignRights, this.props.userInfo.nformcode, ncontrolCode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData\n            },\n            openModal: true,\n            screenName: \"IDS_TESTGROUPTESTMATERIAL\",\n            operation: operation.operation\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, masterData, \"openChildModal\", {});\n      }\n    };\n\n    this.onSaveClick = (saveType, formRef) => {\n      let inputParam = {}; // if(this.props.screenName === \"IDS_TEST\" \n      //     || this.props.screenName === \"IDS_EDITTESTGROUPTEST\") {\n      //     inputParam = this.onSaveTest(saveType, formRef);\n      // } else \n\n      if (this.props.screenName === \"IDS_FORMULA\") {\n        inputParam = this.onSaveFormula(saveType, formRef);\n      } else if (this.props.screenName === \"IDS_PARAMETER\") {\n        inputParam = this.onSaveParameter(saveType, formRef);\n      } else if (this.props.screenName === \"IDS_CODEDRESULT\") {\n        inputParam = this.onSaveCodedResult(saveType, formRef);\n      } else if (this.props.screenName === \"IDS_TESTGROUPTESTMATERIAL\") {\n        inputParam = this.onSaveMaterial(saveType, formRef);\n      }\n\n      if (showEsign(this.props.esignRights, this.props.userInfo.nformcode, this.props.ncontrolCode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData: this.props.masterData\n            },\n            saveType\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, this.props.masterData, \"openChildModal\", {});\n      }\n    };\n\n    this.onSaveParameter = (saveType, formRef) => {\n      const selectedRecord = this.state.selectedRecord;\n      const parameterList = [\"ntestgrouptestparametercode\", \"ntestgrouptestcode\", \"ntestparametercode\", \"sparametersynonym\", \"nroundingdigits\", \"nresultmandatory\", \"nreportmandatory\", \"sspecdesc\", \"nsorter\"];\n      let testGroupTestParameter = {\n        nparametertypecode: selectedRecord.nparametertypecode.value,\n        nunitcode: selectedRecord.nunitcode.value,\n        nchecklistversioncode: selectedRecord.nchecklistversioncode.value\n      };\n      parameterList.map(item => {\n        return testGroupTestParameter[item] = selectedRecord[item] ? selectedRecord[item] : \"\";\n      });\n      let inputData = {\n        testgrouptestparameter: testGroupTestParameter,\n        userinfo: this.props.userInfo\n      };\n\n      if (selectedRecord.nparametertypecode.value === parameterType.NUMERIC) {\n        let testGroupTestNumericParameter = {};\n        const numericList = [\"sminlod\", \"smaxlod\", \"sminb\", \"smina\", \"smaxa\", \"smaxb\", \"sminloq\", \"smaxloq\", \"sdisregard\", \"sresultvalue\"];\n        testGroupTestNumericParameter[\"ntestgrouptestparametercode\"] = selectedRecord.ntestgrouptestparametercode;\n        numericList.map(item => {\n          return testGroupTestNumericParameter[item] = selectedRecord[item] ? selectedRecord[item] === \"0\" ? selectedRecord[item] : selectedRecord[item].replace(/^0+/, '') : null;\n        });\n        inputData[\"testgrouptestnumericparameter\"] = testGroupTestNumericParameter;\n\n        if (selectedRecord.ntestformulacode) {\n          const testFormula = selectedRecord.ntestformulacode.item;\n          const testgrouptestformula = {\n            ntestgrouptestparametercode: selectedRecord.ntestgrouptestparametercode,\n            ntestgrouptestcode: selectedRecord.ntestgrouptestcode,\n            ntestformulacode: testFormula.ntestformulacode,\n            sformulacalculationcode: testFormula.sformulacalculationcode,\n            sformulacalculationdetail: testFormula.sformulacalculationdetail,\n            ntransactionstatus: transactionStatus.YES\n          };\n          inputData[\"testgrouptestformula\"] = testgrouptestformula;\n        } else {\n          inputData[\"testgrouptestformula\"] = null;\n        }\n      } else if (selectedRecord.nparametertypecode.value === parameterType.CHARACTER) {\n        const characterList = [\"ntestgrouptestparametercode\", \"scharname\"];\n        let testGroupTestCharParameter = {};\n        characterList.map(item => {\n          return testGroupTestCharParameter[item] = selectedRecord[item] ? selectedRecord[item] : \"\";\n        });\n        inputData[\"testgrouptestcharparameter\"] = testGroupTestCharParameter;\n      } else if (selectedRecord.nparametertypecode.value === parameterType.PREDEFINED) {\n        const testGroupTestPredefParameter = {\n          ntestgrouptestparametercode: selectedRecord.ntestgrouptestparametercode,\n          ngradecode: selectedRecord.ngradecode.value,\n          spredefinedname: selectedRecord.spredefinedname,\n          ntestgrouptestpredefcode: selectedRecord.ntestgrouptestpredefcode,\n          ndefaultstatus: selectedRecord.ndefaultstatus\n        };\n        inputData[\"testgrouptestpredefparameter\"] = testGroupTestPredefParameter;\n      }\n\n      console.log(\"input data:\", inputData);\n      const inputParam = {\n        inputData,\n        classUrl: \"testgroup\",\n        operation: \"update\",\n        methodUrl: \"TestGroupParameter\",\n        saveType,\n        formRef,\n        searchRef: this.searchRef,\n        postParam: {\n          inputListName: \"TestGroupTest\",\n          selectedObject: \"SelectedTest\",\n          primaryKeyField: \"ntestgrouptestcode\",\n          primaryKeyValue: this.props.masterData.SelectedTest.ntestgrouptestcode,\n          fetchUrl: \"testgroup/getTestGroupTest\",\n          fecthInputObject: {\n            userinfo: this.props.userInfo\n          },\n          masterData: this.props.masterData,\n          searchFieldList: this.searchFieldList\n        }\n      };\n      return inputParam;\n    };\n\n    this.onSaveFormula = (saveType, formRef) => {\n      const masterData = this.props.masterData;\n      const selectedRecord = this.state.selectedRecord;\n      const selectedParameter = masterData.selectedParameter;\n      const testFormulaArray = selectedRecord.ntestformulacode.map(test => {\n        return {\n          ntestgrouptestcode: selectedParameter.ntestgrouptestcode,\n          ntestgrouptestparametercode: selectedParameter.ntestgrouptestparametercode,\n          ntestformulacode: test.item.ntestformulacode,\n          sformulacalculationcode: test.item.sformulacalculationcode,\n          sformulacalculationdetail: test.item.sformulacalculationdetail,\n          ntransactionstatus: transactionStatus.NO\n        };\n      });\n      const inputData = {\n        testgroupspecification: masterData.SelectedSpecification,\n        testgrouptestformula: testFormulaArray,\n        userinfo: this.props.userInfo\n      };\n      const inputParam = {\n        inputData,\n        classUrl: \"testgroup\",\n        operation: this.props.operation,\n        methodUrl: \"TestGroupTestFormula\",\n        saveType,\n        formRef,\n        searchRef: this.searchRef,\n        postParam: {\n          inputListName: \"TestGroupTest\",\n          selectedObject: \"SelectedTest\",\n          primaryKeyField: \"ntestgrouptestcode\",\n          primaryKeyValue: this.props.masterData.SelectedTest.ntestgrouptestcode,\n          fetchUrl: \"testgroup/getTestGroupTest\",\n          fecthInputObject: {\n            userinfo: this.props.userInfo\n          },\n          masterData: this.props.masterData,\n          searchFieldList: this.searchFieldList\n        }\n      };\n      return inputParam;\n    };\n\n    this.onSaveCodedResult = (saveType, formRef) => {\n      const selectedRecord = this.state.selectedRecord;\n      const testGroupPredefParameter = {\n        ndefaultstatus: transactionStatus.NO,\n        nstatus: transactionStatus.ACTIVE,\n        ntestgrouptestpredefcode: selectedRecord[\"ntestgrouptestpredefcode\"],\n        ntestgrouptestparametercode: this.props.masterData.selectedParameter[\"ntestgrouptestparametercode\"],\n        ngradecode: selectedRecord[\"ngradecode\"].value,\n        spredefinedname: selectedRecord[\"spredefinedname\"],\n        ntestpredefinedcode: this.props.masterData.selectedParameter[\"ntestpredefinedcode\"]\n      };\n      const inputParam = {\n        inputData: {\n          testgrouptestpredefinedparameter: testGroupPredefParameter,\n          userinfo: this.props.userInfo,\n          testgroupspecification: this.props.masterData.SelectedSpecification\n        },\n        classUrl: \"testgroup\",\n        operation: this.props.operation,\n        methodUrl: \"TestGroupPredefParameter\",\n        saveType,\n        formRef,\n        searchRef: this.searchRef,\n        postParam: {\n          inputListName: \"TestGroupTest\",\n          selectedObject: \"SelectedTest\",\n          primaryKeyField: \"ntestgrouptestcode\",\n          primaryKeyValue: this.props.masterData.SelectedTest.ntestgrouptestcode,\n          fetchUrl: \"testgroup/getTestGroupTest\",\n          fecthInputObject: {\n            userinfo: this.props.userInfo\n          },\n          masterData: this.props.masterData,\n          searchFieldList: this.searchFieldList\n        }\n      };\n      return inputParam;\n    };\n\n    this.onSaveMaterial = (saveType, formRef) => {\n      const selectedRecord = this.state.selectedRecord;\n      let testGroupTestMaterial = [];\n\n      if (this.props.operation === \"create\") {\n        testGroupTestMaterial = {\n          ntestgrouptestcode: this.props.masterData.SelectedTest.ntestgrouptestcode,\n          ntestgrouptestmaterialcode: this.props.masterData.SelectedTest.ntestgrouptestmaterialcode,\n          nmaterialtypecode: selectedRecord[\"nmaterialtypecode\"].item.jsondata.nmaterialtypecode,\n          nmaterialcatcode: selectedRecord[\"nmaterialcatcode\"].value,\n          nmaterialcode: selectedRecord[\"nmaterialcode\"].value,\n          smaterialname: selectedRecord[\"nmaterialcode\"].label,\n          sremarks: selectedRecord[\"sremarks\"],\n          nstatus: transactionStatus.ACTIVE\n        };\n      } else {\n        testGroupTestMaterial = {\n          ntestgrouptestcode: this.props.masterData.SelectedTest.ntestgrouptestcode,\n          ntestgrouptestmaterialcode: this.props.masterData.selectedMaterial.ntestgrouptestmaterialcode,\n          nmaterialtypecode: selectedRecord[\"nmaterialtypecode\"].value,\n          nmaterialcatcode: selectedRecord[\"nmaterialcatcode\"].value,\n          nmaterialcode: selectedRecord[\"nmaterialcode\"].value,\n          sremarks: selectedRecord[\"sremarks\"],\n          nstatus: transactionStatus.ACTIVE\n        };\n      }\n\n      const inputParam = {\n        inputData: {\n          testgrouptestmaterial: testGroupTestMaterial,\n          userinfo: this.props.userInfo\n        },\n        classUrl: \"testgroup\",\n        operation: this.props.operation,\n        methodUrl: \"TestGroupTestMaterial\",\n        saveType,\n        formRef,\n        searchRef: this.searchRef,\n        postParam: {\n          inputListName: \"TestGroupTest\",\n          selectedObject: \"SelectedTest\",\n          primaryKeyField: \"ntestgrouptestcode\",\n          primaryKeyValue: this.props.masterData.SelectedTest.ntestgrouptestcode,\n          fetchUrl: \"testgroup/getTestGroupTest\",\n          fecthInputObject: {\n            userinfo: this.props.userInfo\n          },\n          masterData: this.props.masterData,\n          searchFieldList: this.searchFieldList\n        }\n      };\n      return inputParam;\n    };\n\n    this.deleteTest = deleteParam => {\n      const testgroupspecification = this.props.masterData.SelectedSpecification;\n\n      if (testgroupspecification.napprovalstatus === transactionStatus.DRAFT || testgroupspecification.napprovalstatus === transactionStatus.CORRECTION) {\n        const screenName = deleteParam.screenName;\n        const inputParam = {\n          inputData: {\n            testgrouptest: deleteParam.selectedRecord,\n            userinfo: this.props.userInfo,\n            testgroupspecification,\n            treetemplatemanipulation: this.props.masterData.selectedNode\n          },\n          classUrl: \"testgroup\",\n          operation: \"delete\",\n          methodUrl: \"Test\",\n          screenName: \"IDS_TEST\",\n          postParam: {\n            inputListName: \"TestGroupTest\",\n            selectedObject: \"SelectedTest\",\n            primaryKeyField: \"ntestgrouptestcode\",\n            primaryKeyValue: deleteParam.selectedRecord.ntestgrouptestcode,\n            fetchUrl: \"testgroup/getTestGroupTest\",\n            fecthInputObject: {\n              userinfo: this.props.userInfo\n            },\n            masterData: this.props.masterData,\n            searchFieldList: this.searchFieldList\n          }\n        };\n        const masterData = this.props.masterData;\n\n        if (showEsign(this.props.esignRights, this.props.userInfo.nformcode, this.props.ncontrolCode)) {\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              loadEsign: true,\n              screenData: {\n                inputParam,\n                masterData\n              },\n              openModal: true,\n              screenName: screenName,\n              operation: deleteParam.operation,\n              selectedRecord: {}\n            }\n          };\n          this.props.updateStore(updateInfo);\n        } else {\n          this.props.crudMaster(inputParam, masterData, \"openModal\", {});\n        }\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SPECIFICATIONSTATUSMUSTBEDRAFTCORRECTION\"\n        }));\n      }\n    };\n\n    this.deleteAction = (item, operation, ncontrolCode, methodUrl, modalName) => {\n      const selected = item;\n      const inputParam = {\n        inputData: {\n          [methodUrl.toLowerCase()]: selected,\n          userinfo: this.props.userInfo,\n          testgroupspecification: this.props.masterData.SelectedSpecification\n        },\n        classUrl: \"testgroup\",\n        operation: operation,\n        methodUrl: methodUrl,\n        screenName: \"IDS_TEST\",\n        postParam: {\n          inputListName: \"TestGroupTest\",\n          selectedObject: \"SelectedTest\",\n          primaryKeyField: \"ntestgrouptestcode\",\n          primaryKeyValue: this.props.masterData.SelectedTest.ntestgrouptestcode,\n          fetchUrl: \"testgroup/getTestGroupTest\",\n          fecthInputObject: {\n            userinfo: this.props.userInfo\n          },\n          masterData: this.props.masterData,\n          searchFieldList: this.searchFieldList\n        }\n      };\n      const masterData = this.props.masterData;\n\n      if (showEsign(this.props.esignRights, this.props.userInfo.nformcode, ncontrolCode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData\n            },\n            [modalName]: true,\n            screenName: \"IDS_TEST\",\n            operation: operation,\n            selectedRecord: {}\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, masterData, \"openChildModal\", {});\n      }\n    };\n\n    this.onSwitchChange = (item, key, methodUrl, event) => {\n      let dataItem = item;\n\n      if (methodUrl === \"TestGroupTestFormula\") {\n        dataItem[\"ntransactionstatus\"] = transactionStatus.YES;\n      } else if (methodUrl === 'TestGroupPredefParameter') {\n        // if(this.props.masterData.SelectedSpecification.napprovalstatus === transactionStatus.DRAFT || this.props.masterData.SelectedSpecification.napprovalstatus === transactionStatus.CORRECTION)\n        // {\n        dataItem['ndefaultstatus'] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO; // }\n        // else{\n        //     return toast.warn(this.props.intl.formatMessage({ id: \"IDS_SPECIFICATIONSTATUSMUSTBEDRAFTCORRECTION\" }));\n        // }\n      } else {\n        dataItem[\"ndefaultstatus\"] = transactionStatus.YES;\n      }\n\n      const inputParam = {\n        inputData: {\n          [key]: dataItem,\n          userinfo: this.props.userInfo,\n          testgroupspecification: this.props.masterData.SelectedSpecification\n        },\n        classUrl: \"testgroup\",\n        operation: \"default\",\n        methodUrl: methodUrl\n      };\n      this.props.crudMaster(inputParam, this.props.masterData, \"openChildModal\", {});\n    };\n\n    this.onEsignInputOnChange = event => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (event.target.type === 'checkbox') {\n        selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\n      } else {\n        selectedRecord[event.target.name] = event.target.value;\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onComboChange = (comboData, fieldName, caseNo) => {\n      let inputData = [];\n      let masterData = { ...this.props.masterData\n      };\n      let inputParam = [];\n      let selectedRecord = this.state.selectedRecord || {};\n\n      switch (caseNo) {\n        case 1:\n          selectedRecord[fieldName] = comboData;\n          this.setState({\n            selectedRecord\n          });\n          break;\n\n        case 2:\n          selectedRecord[\"parameterTypeCode\"] = comboData.value;\n          selectedRecord[fieldName] = comboData;\n          const needRoundingDigit = comboData.value === parameterType.NUMERIC ? false : true;\n          const needUnit = comboData.value === parameterType.NUMERIC ? false : true;\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              selectedRecord,\n              testGroupInputData: { ...this.props.testGroupInputData,\n                needRoundingDigit,\n                needUnit\n              }\n            }\n          };\n          this.props.updateStore(updateInfo);\n          break;\n\n        case 3:\n          selectedRecord[\"schecklistversionname\"] = comboData.item.schecklistversionname;\n          selectedRecord[fieldName] = comboData;\n          this.setState({\n            selectedRecord\n          });\n          break;\n\n        case 4:\n          selectedRecord[\"nmaterialtypecode\"] = comboData.value;\n          selectedRecord[fieldName] = comboData;\n          inputData = {\n            userinfo: this.props.userInfo,\n            nmaterialtypecode: parseInt(comboData.value)\n          };\n          inputParam = {\n            masterData,\n            inputData,\n            selectedRecord\n          };\n          this.props.getMaterialCategoryBasedMaterialType(inputParam);\n          break;\n\n        case 5:\n          selectedRecord[\"nmaterialcatcode\"] = comboData.value;\n          selectedRecord[fieldName] = comboData;\n          inputData = {\n            userinfo: this.props.userInfo,\n            nmaterialcatcode: parseInt(selectedRecord[\"nmaterialcatcode\"].value),\n            nmaterialtypecode: parseInt(selectedRecord[\"nmaterialtypecode\"].value)\n          };\n          inputParam = {\n            masterData,\n            inputData,\n            selectedRecord,\n            operation: this.props.operation,\n            selectedRecord\n          };\n          this.props.getMaterialBasedMaterialCategory(inputParam);\n          break;\n\n        default:\n          break;\n      }\n    };\n\n    this.onInputOnChange = (event, caseNo, optional) => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      switch (caseNo) {\n        case 1:\n          if (event.target.type === 'checkbox') {\n            selectedRecord[event.target.name] = event.target.checked === true ? optional[0] : optional[1];\n          } else if (event.target.type === 'radio') {\n            selectedRecord[event.target.name] = optional;\n          } else {\n            selectedRecord[event.target.name] = event.target.value;\n          }\n\n          this.setState({\n            selectedRecord\n          });\n          break;\n\n        case 2:\n          selectedRecord[event.target.name] = event.target.value;\n          const indexKey = Object.keys(optional)[0];\n          const value = Object.values(optional)[0];\n          const treeData = {\n            ntreeversiontempcode: value.ntreeversiontempcode,\n            npositioncode: value.nlevelno - 1,\n            sleveldescription: event.target.value,\n            ntemptranstestgroupcode: value.ntemptranstestgroupcode,\n            nformcode: 62,\n            schildnode: value.schildnode,\n            nnextchildcode: value.schildnode\n          };\n          let treetemplatemanipulation = selectedRecord.treetemplatemanipulation || [];\n          treetemplatemanipulation[indexKey] = treeData;\n          selectedRecord[\"treetemplatemanipulation\"] = treetemplatemanipulation;\n          this.setState({\n            selectedRecord\n          });\n          break;\n\n        case 4:\n          const inputValue = event.target.value;\n\n          if (/^-?\\d*?\\.?\\d*?$/.test(inputValue) || inputValue === \"\") {\n            selectedRecord[event.target.name] = event.target.value;\n          }\n\n          this.setState({\n            selectedRecord\n          });\n          break;\n\n        default:\n          break;\n      }\n    };\n\n    this.validateEsign = () => {\n      const inputParam = {\n        inputData: {\n          \"userinfo\": { ...this.props.userInfo,\n            sreason: this.state.selectedRecord[\"esigncomments\"]\n          },\n          password: this.state.selectedRecord[\"esignpassword\"]\n        },\n        screenData: this.props.screenData\n      };\n      this.props.validateEsignCredential(inputParam, \"openChildModal\");\n    };\n\n    this.state = {\n      selectedRecord: {}\n    };\n    this.confirmMessage = new ConfirmMessage();\n    this.codedResultMandatory = [{\n      \"idsName\": \"IDS_CODEDRESULT\",\n      \"dataField\": \"spredefinedname\",\n      \"width\": \"200px\",\n      \"mandatory\": true\n    }, {\n      \"idsName\": \"IDS_ACTUALRESULT\",\n      \"dataField\": \"ngradecode\",\n      \"width\": \"200px\",\n      \"mandatory\": true\n    }];\n  }\n\n  render() {\n    this.paramColumnList = [{\n      \"idsName\": \"IDS_PARAMETERSYNONYM\",\n      \"dataField\": \"sparametersynonym\",\n      \"width\": \"200px\",\n      \"mandatory\": true,\n      \"mandatoryLabel\": \"IDS_ENTER\",\n      \"controlType\": \"textbox\"\n    }, {\n      \"idsName\": \"IDS_PARAMETERTYPE\",\n      \"dataField\": \"nparametertypecode\",\n      \"width\": \"200px\",\n      \"mandatory\": true,\n      \"mandatoryLabel\": \"IDS_SELECT\",\n      \"controlType\": \"selectbox\"\n    }];\n\n    if (this.state.selectedRecord[\"parameterTypeCode\"] && this.state.selectedRecord[\"parameterTypeCode\"] === parameterType.NUMERIC) {\n      this.paramColumnList = [{\n        \"idsName\": \"IDS_PARAMETERSYNONYM\",\n        \"dataField\": \"sparametersynonym\",\n        \"width\": \"200px\",\n        \"mandatory\": true,\n        \"mandatoryLabel\": \"IDS_ENTER\",\n        \"controlType\": \"textbox\"\n      }, {\n        \"idsName\": \"IDS_PARAMETERTYPE\",\n        \"dataField\": \"nparametertypecode\",\n        \"width\": \"200px\",\n        \"mandatory\": true,\n        \"mandatoryLabel\": \"IDS_SELECT\",\n        \"controlType\": \"selectbox\"\n      }, {\n        \"idsName\": \"IDS_ROUNDINGDIGITS\",\n        \"dataField\": \"nroundingdigits\",\n        \"width\": \"200px\",\n        \"mandatory\": true,\n        \"mandatoryLabel\": \"IDS_ENTER\",\n        \"controlType\": \"textbox\"\n      }, {\n        \"idsName\": \"IDS_UNI\",\n        \"dataField\": \"nunitcode\",\n        \"width\": \"200px\",\n        \"mandatory\": true,\n        \"mandatoryLabel\": \"IDS_SELECT\",\n        \"controlType\": \"selectbox\"\n      }];\n    }\n\n    if (this.state.selectedRecord[\"parameterTypeCode\"] && this.state.selectedRecord[\"parameterTypeCode\"] === parameterType.PREDEFINED) {\n      this.paramColumnList = [{\n        \"idsName\": \"IDS_PARAMETERSYNONYM\",\n        \"dataField\": \"sparametersynonym\",\n        \"width\": \"200px\",\n        \"mandatory\": true,\n        \"mandatoryLabel\": \"IDS_ENTER\",\n        \"controlType\": \"textbox\"\n      }, {\n        \"idsName\": \"IDS_PARAMETERTYPE\",\n        \"dataField\": \"nparametertypecode\",\n        \"width\": \"200px\",\n        \"mandatory\": true,\n        \"mandatoryLabel\": \"IDS_SELECT\",\n        \"controlType\": \"selectbox\"\n      }, {\n        \"idsName\": \"IDS_CODEDRESULT\",\n        \"dataField\": \"spredefinedname\",\n        \"width\": \"200px\",\n        \"mandatory\": true,\n        \"mandatoryLabel\": \"IDS_ENTER\",\n        \"controlType\": \"textbox\"\n      }, {\n        \"idsName\": \"IDS_ACTUALRESULT\",\n        \"dataField\": \"ngradecode\",\n        \"width\": \"200px\",\n        \"mandatory\": true,\n        \"mandatoryLabel\": \"IDS_SELECT\",\n        \"controlType\": \"selectbox\"\n      }];\n    }\n\n    const paramMandatoryFields = [];\n    this.paramColumnList.forEach(item => item.mandatory === true ? paramMandatoryFields.push(item) : \"\");\n    this.materialColumnList = [{\n      \"idsName\": \"IDS_MATERIALTYPE\",\n      \"dataField\": \"nmaterialtypecode\",\n      \"width\": \"200px\",\n      \"mandatory\": true,\n      \"mandatoryLabel\": \"IDS_SELECT\",\n      \"controlType\": \"selectbox\"\n    }, {\n      \"idsName\": \"IDS_MATERIALCATEGORY\",\n      \"dataField\": \"nmaterialcatcode\",\n      \"width\": \"200px\",\n      \"mandatory\": true,\n      \"mandatoryLabel\": \"IDS_SELECT\",\n      \"controlType\": \"selectbox\"\n    }, {\n      \"idsName\": \"IDS_MATERIALNAME\",\n      \"dataField\": \"nmaterialcode\",\n      \"width\": \"200px\",\n      \"mandatory\": true,\n      \"mandatoryLabel\": \"IDS_SELECT\",\n      \"controlType\": \"selectbox\"\n    }];\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(PerfectScrollbar, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"grouped-param-inner\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 21\n      }\n    }, !this.props.testView ? /*#__PURE__*/React.createElement(CustomTab, {\n      paneHeight: this.props.paneHeight,\n      tabDetail: this.tabDetail(),\n      onTabChange: this.onTabChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 29\n      }\n    }) : /*#__PURE__*/React.createElement(CustomTab, {\n      paneHeight: this.props.paneHeight,\n      tabDetail: this.testTabDetail(),\n      onTabChange: this.onTabChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 29\n      }\n    }))), this.props.openChildModal && this.props.screenName && /*#__PURE__*/React.createElement(SlideOutModal, {\n      show: this.props.openChildModal,\n      closeModal: this.closeModal,\n      operation: this.props.operation,\n      inputParam: this.props.inputParam,\n      screenName: this.props.screenName,\n      esign: this.props.loadEsign,\n      validateEsign: this.validateEsign,\n      onSaveClick: this.onSaveClick,\n      selectedRecord: this.state.selectedRecord || {},\n      mandatoryFields: this.props.screenName === \"IDS_PARAMETER\" ? paramMandatoryFields : this.props.screenName === \"IDS_CODEDRESULT\" ? this.codedResultMandatory : this.props.screenName === \"IDS_TESTGROUPTESTMATERIAL\" ? this.materialColumnList : [],\n      addComponent: this.props.loadEsign ? /*#__PURE__*/React.createElement(Esign, {\n        operation: this.props.operation,\n        onInputOnChange: this.onEsignInputOnChange,\n        inputParam: this.props.inputParam,\n        selectedRecord: this.state.selectedRecord || {},\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 29\n        }\n      }) : this.props.screenName === \"IDS_PARAMETER\" ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(EditTestGroupParameter, {\n        selectedRecord: this.state.selectedRecord || {},\n        testGroupInputData: this.props.testGroupInputData,\n        onComboChange: this.onComboChange,\n        onInputOnChange: this.onInputOnChange,\n        onNumericInputChange: this.onNumericInputChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 33\n        }\n      }), this.state.selectedRecord[\"parameterTypeCode\"] === parameterType.PREDEFINED || this.state.selectedRecord[\"parameterTypeCode\"] === parameterType.CHARACTER || this.state.selectedRecord[\"parameterTypeCode\"] === parameterType.NUMERIC ? /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 37\n        }\n      }, /*#__PURE__*/React.createElement(Col, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 41\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"horizontal-line\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 45\n        }\n      }))) : \"\", this.state.selectedRecord[\"parameterTypeCode\"] === parameterType.PREDEFINED && /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 37\n        }\n      }, /*#__PURE__*/React.createElement(AddCodedResult, {\n        onInputOnChange: this.onInputOnChange,\n        parameterData: this.props.parameterData,\n        selectedRecord: this.state.selectedRecord,\n        onComboChange: this.onComboChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 41\n        }\n      })), this.state.selectedRecord[\"parameterTypeCode\"] === parameterType.CHARACTER && /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 37\n        }\n      }, /*#__PURE__*/React.createElement(Col, {\n        md: \"12\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 41\n        }\n      }, /*#__PURE__*/React.createElement(FormTextarea, {\n        name: \"scharname\",\n        label: this.props.intl.formatMessage({\n          id: \"IDS_TESTCHARACTER\"\n        }),\n        onChange: event => this.onInputOnChange(event, 1),\n        placeholder: this.props.intl.formatMessage({\n          id: \"IDS_TESTCHARACTER\"\n        }),\n        value: this.state.selectedRecord[\"scharname\"],\n        rows: \"2\",\n        required: false,\n        maxLength: 255,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 45\n        }\n      }))), this.state.selectedRecord[\"parameterTypeCode\"] === parameterType.NUMERIC && /*#__PURE__*/React.createElement(AddSpecification, {\n        selectedRecord: this.state.selectedRecord,\n        onInputOnChange: this.onInputOnChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 37\n        }\n      })) : this.props.screenName === \"IDS_CODEDRESULT\" ? /*#__PURE__*/React.createElement(AddCodedResult, {\n        onInputOnChange: this.onInputOnChange,\n        parameterData: this.props.parameterData,\n        selectedRecord: this.state.selectedRecord,\n        onComboChange: this.onComboChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 33\n        }\n      }) : /*#__PURE__*/React.createElement(AddTestGroupTestMaterial, {\n        materialType: this.props.materialType,\n        selectedRecord: this.state.selectedRecord,\n        materialCategoryList: this.props.materialCategoryList,\n        materialList: this.props.materialList,\n        onComboChange: this.onComboChange,\n        onInputOnChange: this.onInputOnChange,\n        onNumericInputChange: this.onNumericInputChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 38\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 21\n      }\n    }), this.props.testGroupCheckList && this.props.testGroupCheckList.templateData && this.props.testGroupCheckList.templateData.length > 0 && /*#__PURE__*/React.createElement(TemplateForm, {\n      templateData: this.props.testGroupCheckList.templateData,\n      handleClose: this.handleClose,\n      screenName: \"IDS_VIEWCHECKLIST\",\n      needSaveButton: false,\n      viewScreen: this.props.openTemplateModal,\n      onTemplateInputChange: this.onTemplateInputChange,\n      onTemplateComboChange: this.onTemplateComboChange,\n      onTemplateDateChange: this.onTemplateDateChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 21\n      }\n    }));\n  }\n\n  componentDidUpdate(previousProps) {\n    if (this.props.selectedRecord !== previousProps.selectedRecord) {\n      this.setState({\n        selectedRecord: this.props.selectedRecord\n      });\n    }\n  }\n\n}\n\nexport default injectIntl(TestGroupTestTab);","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/pages/testgroup/TestGroupTestTab.jsx"],"names":["React","Component","injectIntl","Row","Col","PerfectScrollbar","DEFAULT_RETURN","TestGroupParameterTab","CustomTab","showEsign","Esign","SlideOutModal","parameterType","transactionStatus","EditTestGroupParameter","AddCodedResult","FormTextarea","AddSpecification","TemplateForm","toast","TestGroupMaterialTab","AddTestGroupTestMaterial","ConfirmMessage","TestGroupTestTab","constructor","props","onTemplateInputChange","event","selectedRecord","state","target","type","name","checked","YES","NO","value","setState","onTemplateComboChange","comboData","fieldName","onTemplateDateChange","dateName","dateValue","Date","handleClose","updateInfo","typeName","data","testGroupCheckList","openTemplateModal","updateStore","closeModal","loadEsign","openChildModal","operation","onTabChange","tabProps","screenName","tabDetail","tabMap","Map","set","controlMap","userRoleControlRights","userInfo","inputParam","masterData","deleteAction","onSwitchChange","addTestFile","viewTestFile","defaultRecord","filterData","getTestGroupParameter","editTestGroupParameter","addTestGroupCodedResult","viewTestGroupCheckList","testTabDetail","paneHeight","ConfirmDelete","getDataForTestMaterial","getTestGroupMaterial","getDataForEditTestMaterial","deleteId","confirmMessage","confirm","intl","formatMessage","id","DeleteTestMaterial","ncontrolCode","inputData","ntestgrouptestmaterialcode","selectedMaterial","ntestgrouptestcode","methodUrl","classUrl","esignRights","nformcode","screenData","openModal","crudMaster","onSaveClick","saveType","formRef","onSaveFormula","onSaveParameter","onSaveCodedResult","onSaveMaterial","parameterList","testGroupTestParameter","nparametertypecode","nunitcode","nchecklistversioncode","map","item","testgrouptestparameter","userinfo","NUMERIC","testGroupTestNumericParameter","numericList","ntestgrouptestparametercode","replace","ntestformulacode","testFormula","testgrouptestformula","sformulacalculationcode","sformulacalculationdetail","ntransactionstatus","CHARACTER","characterList","testGroupTestCharParameter","PREDEFINED","testGroupTestPredefParameter","ngradecode","spredefinedname","ntestgrouptestpredefcode","ndefaultstatus","console","log","searchRef","postParam","inputListName","selectedObject","primaryKeyField","primaryKeyValue","SelectedTest","fetchUrl","fecthInputObject","searchFieldList","selectedParameter","testFormulaArray","test","testgroupspecification","SelectedSpecification","testGroupPredefParameter","nstatus","ACTIVE","ntestpredefinedcode","testgrouptestpredefinedparameter","testGroupTestMaterial","nmaterialtypecode","jsondata","nmaterialcatcode","nmaterialcode","smaterialname","label","sremarks","testgrouptestmaterial","deleteTest","deleteParam","napprovalstatus","DRAFT","CORRECTION","testgrouptest","treetemplatemanipulation","selectedNode","warn","modalName","selected","toLowerCase","key","dataItem","onEsignInputOnChange","onComboChange","caseNo","needRoundingDigit","needUnit","testGroupInputData","schecklistversionname","parseInt","getMaterialCategoryBasedMaterialType","getMaterialBasedMaterialCategory","onInputOnChange","optional","indexKey","Object","keys","values","treeData","ntreeversiontempcode","npositioncode","nlevelno","sleveldescription","ntemptranstestgroupcode","schildnode","nnextchildcode","inputValue","validateEsign","sreason","password","validateEsignCredential","codedResultMandatory","render","paramColumnList","paramMandatoryFields","forEach","mandatory","push","materialColumnList","testView","onNumericInputChange","parameterData","materialType","materialCategoryList","materialList","templateData","length","componentDidUpdate","previousProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { injectIntl } from 'react-intl';\r\nimport { Row, Col } from 'react-bootstrap';\r\nimport PerfectScrollbar from 'react-perfect-scrollbar';\r\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\r\nimport TestGroupParameterTab from './TestGroupParameterTab';\r\nimport CustomTab from '../../components/custom-tabs/custom-tabs.component';\r\nimport { showEsign } from '../../components/CommonScript';\r\nimport Esign from '../audittrail/Esign';\r\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\r\nimport { parameterType, transactionStatus } from '../../components/Enumeration';\r\nimport EditTestGroupParameter from './EditTestGroupParameter';\r\nimport AddCodedResult from '../testmanagement/AddCodedResult';\r\nimport FormTextarea from '../../components/form-textarea/form-textarea.component';\r\nimport AddSpecification from '../testmanagement/AddSpecification';\r\nimport TemplateForm from '../checklist/checklist/TemplateForm';\r\nimport { toast } from 'react-toastify';\r\nimport TestGroupMaterialTab from './TestGroupMaterialTab';\r\nimport AddTestGroupTestMaterial from './AddTestGroupTestMaterial';\r\nimport ConfirmMessage from \"../../components/confirm-alert/confirm-message.component\";\r\n\r\nclass TestGroupTestTab extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            selectedRecord: {}\r\n        }\r\n        this.confirmMessage = new ConfirmMessage();\r\n\r\n        this.codedResultMandatory = [{ \"idsName\": \"IDS_CODEDRESULT\", \"dataField\": \"spredefinedname\", \"width\": \"200px\", \"mandatory\": true },\r\n        { \"idsName\": \"IDS_ACTUALRESULT\", \"dataField\": \"ngradecode\", \"width\": \"200px\", \"mandatory\": true }];\r\n    }\r\n\r\n    render() {\r\n        this.paramColumnList = [\r\n            { \"idsName\": \"IDS_PARAMETERSYNONYM\", \"dataField\": \"sparametersynonym\", \"width\": \"200px\", \"mandatory\": true, \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"textbox\" },\r\n            { \"idsName\": \"IDS_PARAMETERTYPE\", \"dataField\": \"nparametertypecode\", \"width\": \"200px\", \"mandatory\": true, \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" }\r\n        ]\r\n        if (this.state.selectedRecord[\"parameterTypeCode\"] && this.state.selectedRecord[\"parameterTypeCode\"] === parameterType.NUMERIC) {\r\n            this.paramColumnList = [\r\n                { \"idsName\": \"IDS_PARAMETERSYNONYM\", \"dataField\": \"sparametersynonym\", \"width\": \"200px\", \"mandatory\": true, \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"textbox\" },\r\n                { \"idsName\": \"IDS_PARAMETERTYPE\", \"dataField\": \"nparametertypecode\", \"width\": \"200px\", \"mandatory\": true, \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n                { \"idsName\": \"IDS_ROUNDINGDIGITS\", \"dataField\": \"nroundingdigits\", \"width\": \"200px\", \"mandatory\": true, \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"textbox\" },\r\n                { \"idsName\": \"IDS_UNI\", \"dataField\": \"nunitcode\", \"width\": \"200px\", \"mandatory\": true, \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" }\r\n            ]\r\n        }\r\n        if (this.state.selectedRecord[\"parameterTypeCode\"] && this.state.selectedRecord[\"parameterTypeCode\"] === parameterType.PREDEFINED) {\r\n            this.paramColumnList = [\r\n                { \"idsName\": \"IDS_PARAMETERSYNONYM\", \"dataField\": \"sparametersynonym\", \"width\": \"200px\", \"mandatory\": true, \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"textbox\" },\r\n                { \"idsName\": \"IDS_PARAMETERTYPE\", \"dataField\": \"nparametertypecode\", \"width\": \"200px\", \"mandatory\": true, \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n                { \"idsName\": \"IDS_CODEDRESULT\", \"dataField\": \"spredefinedname\", \"width\": \"200px\", \"mandatory\": true, \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"textbox\" },\r\n                { \"idsName\": \"IDS_ACTUALRESULT\", \"dataField\": \"ngradecode\", \"width\": \"200px\", \"mandatory\": true, \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" }\r\n            ]\r\n        }\r\n        const paramMandatoryFields = [];\r\n\r\n        this.paramColumnList.forEach(item => item.mandatory === true ?\r\n            paramMandatoryFields.push(item) : \"\"\r\n        );\r\n        this.materialColumnList = [\r\n            { \"idsName\": \"IDS_MATERIALTYPE\", \"dataField\": \"nmaterialtypecode\", \"width\": \"200px\", \"mandatory\": true, \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n            { \"idsName\": \"IDS_MATERIALCATEGORY\", \"dataField\": \"nmaterialcatcode\", \"width\": \"200px\", \"mandatory\": true, \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n            { \"idsName\": \"IDS_MATERIALNAME\", \"dataField\": \"nmaterialcode\", \"width\": \"200px\", \"mandatory\": true, \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" }\r\n\r\n        ]\r\n        return (\r\n            <>\r\n                <PerfectScrollbar>\r\n                    <div className='grouped-param-inner'>\r\n                        {!this.props.testView ?\r\n                            <CustomTab paneHeight={this.props.paneHeight} tabDetail={this.tabDetail()} onTabChange={this.onTabChange} />\r\n                            :\r\n                            <CustomTab paneHeight={this.props.paneHeight} tabDetail={this.testTabDetail()} onTabChange={this.onTabChange} />\r\n\r\n                        }\r\n                    </div>\r\n                </PerfectScrollbar>\r\n\r\n                {this.props.openChildModal && this.props.screenName &&\r\n                    <SlideOutModal\r\n                        show={this.props.openChildModal}\r\n                        closeModal={this.closeModal}\r\n                        operation={this.props.operation}\r\n                        inputParam={this.props.inputParam}\r\n                        screenName={this.props.screenName}\r\n                        esign={this.props.loadEsign}\r\n                        validateEsign={this.validateEsign}\r\n                        onSaveClick={this.onSaveClick}\r\n                        selectedRecord={this.state.selectedRecord || {}}\r\n                        mandatoryFields={this.props.screenName === \"IDS_PARAMETER\" ? paramMandatoryFields :\r\n                            this.props.screenName === \"IDS_CODEDRESULT\" ? this.codedResultMandatory : this.props.screenName === \"IDS_TESTGROUPTESTMATERIAL\"\r\n                            ?this.materialColumnList:[]}\r\n                        addComponent={this.props.loadEsign ?\r\n                            <Esign\r\n                                operation={this.props.operation}\r\n                                onInputOnChange={this.onEsignInputOnChange}\r\n                                inputParam={this.props.inputParam}\r\n                                selectedRecord={this.state.selectedRecord || {}}\r\n                            /> :\r\n                            this.props.screenName === \"IDS_PARAMETER\" ?\r\n                            <>\r\n                                <EditTestGroupParameter\r\n                                    selectedRecord={this.state.selectedRecord || {}}\r\n                                    testGroupInputData={this.props.testGroupInputData}\r\n                                    onComboChange={this.onComboChange}\r\n                                    onInputOnChange={this.onInputOnChange}\r\n                                    onNumericInputChange={this.onNumericInputChange}\r\n                                />\r\n                                {this.state.selectedRecord[\"parameterTypeCode\"] === parameterType.PREDEFINED ||\r\n                                    this.state.selectedRecord[\"parameterTypeCode\"] === parameterType.CHARACTER ||\r\n                                    this.state.selectedRecord[\"parameterTypeCode\"] === parameterType.NUMERIC ?\r\n                                    <Row>\r\n                                        <Col>\r\n                                            <div className=\"horizontal-line\"></div>\r\n                                        </Col>\r\n                                    </Row> : \"\"\r\n                                }\r\n\r\n                                { this.state.selectedRecord[\"parameterTypeCode\"] === parameterType.PREDEFINED &&\r\n                                    <Row>\r\n                                        <AddCodedResult\r\n                                            onInputOnChange={this.onInputOnChange}\r\n                                            parameterData={this.props.parameterData}\r\n                                            selectedRecord={this.state.selectedRecord}\r\n                                            onComboChange={this.onComboChange}\r\n                                        />\r\n                                    </Row>}\r\n                                { this.state.selectedRecord[\"parameterTypeCode\"] === parameterType.CHARACTER &&\r\n                                    <Row>\r\n                                        <Col md=\"12\">\r\n                                            <FormTextarea\r\n                                                name={\"scharname\"}\r\n                                                label={this.props.intl.formatMessage({ id: \"IDS_TESTCHARACTER\" })}\r\n                                                onChange={(event) => this.onInputOnChange(event, 1)}\r\n                                                placeholder={this.props.intl.formatMessage({ id: \"IDS_TESTCHARACTER\" })}\r\n                                                value={this.state.selectedRecord[\"scharname\"]}\r\n                                                rows=\"2\"\r\n                                                required={false}\r\n                                                maxLength={255}\r\n                                            >\r\n                                            </FormTextarea>\r\n                                        </Col>\r\n                                    </Row>}\r\n                                { this.state.selectedRecord[\"parameterTypeCode\"] === parameterType.NUMERIC &&\r\n                                    <AddSpecification\r\n                                        selectedRecord={this.state.selectedRecord}\r\n                                        onInputOnChange={this.onInputOnChange}\r\n                                    />}\r\n                            </> :\r\n                            this.props.screenName === \"IDS_CODEDRESULT\" ?\r\n                                <AddCodedResult\r\n                                    onInputOnChange={this.onInputOnChange}\r\n                                    parameterData={this.props.parameterData}\r\n                                    selectedRecord={this.state.selectedRecord}\r\n                                    onComboChange={this.onComboChange}\r\n                                /> : <AddTestGroupTestMaterial\r\n                                materialType={this.props.materialType}\r\n                                selectedRecord={this.state.selectedRecord}\r\n                                materialCategoryList={this.props.materialCategoryList}\r\n                                materialList={this.props.materialList}\r\n                                onComboChange={this.onComboChange}\r\n                                onInputOnChange={this.onInputOnChange}\r\n                                onNumericInputChange={this.onNumericInputChange}\r\n\r\n                            />\r\n\r\n                        }\r\n                    />\r\n                }\r\n                {this.props.testGroupCheckList && this.props.testGroupCheckList.templateData &&\r\n                    this.props.testGroupCheckList.templateData.length > 0 &&\r\n                    <TemplateForm\r\n                        templateData={this.props.testGroupCheckList.templateData}\r\n                        handleClose={this.handleClose}\r\n                        screenName=\"IDS_VIEWCHECKLIST\"\r\n                        needSaveButton={false}\r\n                        viewScreen={this.props.openTemplateModal}\r\n                        onTemplateInputChange={this.onTemplateInputChange}\r\n                        onTemplateComboChange={this.onTemplateComboChange}\r\n                        onTemplateDateChange={this.onTemplateDateChange}\r\n                    />\r\n                }\r\n            </>\r\n        );\r\n    }\r\n\r\n    onTemplateInputChange = (event) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if (event.target.type === 'checkbox') {\r\n            selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\r\n        } else {\r\n            selectedRecord[event.target.name] = event.target.value;\r\n        }\r\n        this.setState({ selectedRecord });\r\n    }\r\n    onTemplateComboChange = (comboData, fieldName) => {\r\n        let selectedRecord = this.state.selectedRecord || {};\r\n        selectedRecord[fieldName] = comboData;\r\n        this.setState({ selectedRecord });\r\n    }\r\n    onTemplateDateChange = (dateName, dateValue) => {\r\n        const { selectedRecord } = this.state.selectedRecord || {};\r\n        if (dateValue === null) {\r\n            dateValue = new Date();\r\n        }\r\n        selectedRecord[dateName] = dateValue;\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    handleClose = () => {\r\n        let updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                selectedRecord: {},\r\n                testGroupCheckList: {},\r\n                openTemplateModal: false\r\n            }\r\n        };\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    closeModal = () => {\r\n        let loadEsign = this.props.loadEsign;\r\n        let openChildModal = this.props.openChildModal;\r\n        let selectedRecord = this.props.selectedRecord;\r\n        if (this.props.loadEsign) {\r\n            if (this.props.operation === \"delete\" || this.props.operation === \"Default\") {\r\n                loadEsign = false;\r\n                openChildModal = false;\r\n                selectedRecord = {};\r\n            } else {\r\n                loadEsign = false;\r\n                selectedRecord[\"agree\"] = 4;\r\n                selectedRecord['esignpassword'] = \"\"\r\n                selectedRecord['esigncomments'] = \"\"\r\n            }\r\n        } else {\r\n            openChildModal = false;\r\n            selectedRecord = {};\r\n        }\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { openChildModal, loadEsign, selectedRecord }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    onTabChange = (tabProps) => {\r\n        const screenName = tabProps.screenName;\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { screenName }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    tabDetail = () => {\r\n        const tabMap = new Map();\r\n        tabMap.set(\"IDS_PARAMETER\",\r\n            <TestGroupParameterTab\r\n                controlMap={this.props.controlMap}\r\n                userRoleControlRights={this.props.userRoleControlRights}\r\n                userInfo={this.props.userInfo}\r\n                inputParam={this.props.inputParam}\r\n                masterData={this.props.masterData}\r\n                deleteAction={this.deleteAction}\r\n                onSwitchChange={this.onSwitchChange}\r\n                addTestFile={this.props.addTestFile}\r\n                viewTestFile={this.viewTestFile}\r\n                defaultRecord={this.defaultRecord}\r\n                filterData={this.props.filterData}\r\n                getTestGroupParameter={this.props.getTestGroupParameter}\r\n                editTestGroupParameter={this.props.editTestGroupParameter}\r\n                addTestGroupCodedResult={this.props.addTestGroupCodedResult}\r\n                viewTestGroupCheckList={this.props.viewTestGroupCheckList}\r\n            />);\r\n        return tabMap;\r\n    }\r\n    testTabDetail = () => {\r\n        const tabMap = new Map();\r\n        tabMap.set(\"IDS_PARAMETER\",\r\n            <TestGroupParameterTab\r\n                paneHeight={this.props.paneHeight}\r\n                controlMap={this.props.controlMap}\r\n                userRoleControlRights={this.props.userRoleControlRights}\r\n                userInfo={this.props.userInfo}\r\n                inputParam={this.props.inputParam}\r\n                masterData={this.props.masterData}\r\n                deleteAction={this.deleteAction}\r\n                onSwitchChange={this.onSwitchChange}\r\n                addTestFile={this.props.addTestFile}\r\n                viewTestFile={this.viewTestFile}\r\n                defaultRecord={this.defaultRecord}\r\n                filterData={this.props.filterData}\r\n                getTestGroupParameter={this.props.getTestGroupParameter}\r\n                editTestGroupParameter={this.props.editTestGroupParameter}\r\n                addTestGroupCodedResult={this.props.addTestGroupCodedResult}\r\n                viewTestGroupCheckList={this.props.viewTestGroupCheckList}\r\n            />);\r\n        tabMap.set(\"IDS_MATERIAL\",\r\n            <TestGroupMaterialTab\r\n                paneHeight={this.props.paneHeight}\r\n                controlMap={this.props.controlMap}\r\n                userRoleControlRights={this.props.userRoleControlRights}\r\n                userInfo={this.props.userInfo}\r\n                inputParam={this.props.inputParam}\r\n                masterData={this.props.masterData}\r\n                ConfirmDelete={this.ConfirmDelete}\r\n                getDataForTestMaterial={this.props.getDataForTestMaterial}\r\n                getTestGroupMaterial={this.props.getTestGroupMaterial}\r\n                getDataForEditTestMaterial={this.props.getDataForEditTestMaterial}\r\n                selectedRecord={this.state.selectedRecord}\r\n\r\n            />);\r\n        return tabMap;\r\n    }\r\n    ConfirmDelete = (operation, deleteId,selectedRecord) => {\r\n        this.confirmMessage.confirm(\r\n          \"deleteMessage\",\r\n          this.props.intl.formatMessage({ id: \"IDS_DELETE\" }),\r\n          this.props.intl.formatMessage({ id: \"IDS_DEFAULTCONFIRMMSG\" }),\r\n          this.props.intl.formatMessage({ id: \"IDS_OK\" }),\r\n          this.props.intl.formatMessage({ id: \"IDS_CANCEL\" }),\r\n          () =>\r\n            this.DeleteTestMaterial(\r\n              operation,\r\n              deleteId,selectedRecord\r\n            )\r\n        );\r\n    };\r\n    DeleteTestMaterial = (operation, ncontrolCode) => {\r\n        let selectedRecord=this.state.selectedRecord\r\n        let inputData = [];\r\n        inputData[\"testgrouptestmaterial\"] = {\r\n            ntestgrouptestmaterialcode: this.props.masterData.selectedMaterial.ntestgrouptestmaterialcode,\r\n            ntestgrouptestcode: this.props.masterData.selectedMaterial.ntestgrouptestcode,\r\n        };\r\n    \r\n            inputData[\"userinfo\"] = this.props.userInfo;\r\n            const inputParam = {\r\n                methodUrl: \"TestGroupTestMaterial\",\r\n                classUrl: this.props.inputParam.classUrl,\r\n                inputData: inputData,\r\n                operation: \"delete\",\r\n            };\r\n            const masterData = this.props.masterData;\r\n            if (\r\n                showEsign(\r\n                    this.props.esignRights,\r\n                    this.props.userInfo.nformcode,\r\n                    ncontrolCode\r\n                )\r\n            ) {\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        loadEsign: true,\r\n                        screenData: { inputParam, masterData },\r\n                        openModal: true,\r\n                        screenName: \"IDS_TESTGROUPTESTMATERIAL\",\r\n                        operation: operation.operation,\r\n                    },\r\n                };\r\n                this.props.updateStore(updateInfo);\r\n            } else {\r\n                this.props.crudMaster(inputParam, masterData, \"openChildModal\",{});\r\n            }\r\n        \r\n    }\r\n    onSaveClick = (saveType, formRef) => {\r\n        let inputParam = {};\r\n        // if(this.props.screenName === \"IDS_TEST\" \r\n        //     || this.props.screenName === \"IDS_EDITTESTGROUPTEST\") {\r\n        //     inputParam = this.onSaveTest(saveType, formRef);\r\n        // } else \r\n        if (this.props.screenName === \"IDS_FORMULA\") {\r\n            inputParam = this.onSaveFormula(saveType, formRef);\r\n        } else if (this.props.screenName === \"IDS_PARAMETER\") {\r\n            inputParam = this.onSaveParameter(saveType, formRef);\r\n        } else if (this.props.screenName === \"IDS_CODEDRESULT\") {\r\n            inputParam = this.onSaveCodedResult(saveType, formRef);\r\n        } else if (this.props.screenName === \"IDS_TESTGROUPTESTMATERIAL\") {\r\n            inputParam = this.onSaveMaterial(saveType, formRef);\r\n        }\r\n        if (showEsign(this.props.esignRights, this.props.userInfo.nformcode, this.props.ncontrolCode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData: this.props.masterData }, saveType\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        } else {\r\n            this.props.crudMaster(inputParam, this.props.masterData, \"openChildModal\", {});\r\n        }\r\n    }\r\n\r\n    onSaveParameter = (saveType, formRef) => {\r\n        const selectedRecord = this.state.selectedRecord;\r\n        const parameterList = [\"ntestgrouptestparametercode\", \"ntestgrouptestcode\", \"ntestparametercode\", \"sparametersynonym\", \"nroundingdigits\",\r\n            \"nresultmandatory\", \"nreportmandatory\", \"sspecdesc\", \"nsorter\"];\r\n        let testGroupTestParameter = {\r\n            nparametertypecode: selectedRecord.nparametertypecode.value,\r\n            nunitcode: selectedRecord.nunitcode.value,\r\n            nchecklistversioncode: selectedRecord.nchecklistversioncode.value\r\n        }\r\n        parameterList.map(item => {\r\n            return testGroupTestParameter[item] = selectedRecord[item] ? selectedRecord[item] : \"\";\r\n        });\r\n        let inputData = {\r\n            testgrouptestparameter: testGroupTestParameter,\r\n            userinfo: this.props.userInfo\r\n        };\r\n        if (selectedRecord.nparametertypecode.value === parameterType.NUMERIC) {\r\n            let testGroupTestNumericParameter = {};\r\n            const numericList = [\"sminlod\", \"smaxlod\", \"sminb\", \"smina\", \"smaxa\", \"smaxb\", \"sminloq\", \"smaxloq\", \"sdisregard\", \"sresultvalue\"];\r\n            testGroupTestNumericParameter[\"ntestgrouptestparametercode\"] = selectedRecord.ntestgrouptestparametercode;\r\n            numericList.map(item => {\r\n                return testGroupTestNumericParameter[item] = selectedRecord[item] ? selectedRecord[item] === \"0\" ? selectedRecord[item] : selectedRecord[item].replace(/^0+/, '') : null;\r\n            });\r\n            inputData[\"testgrouptestnumericparameter\"] = testGroupTestNumericParameter;\r\n            if (selectedRecord.ntestformulacode) {\r\n                const testFormula = selectedRecord.ntestformulacode.item;\r\n                const testgrouptestformula = {\r\n                    ntestgrouptestparametercode: selectedRecord.ntestgrouptestparametercode,\r\n                    ntestgrouptestcode: selectedRecord.ntestgrouptestcode,\r\n                    ntestformulacode: testFormula.ntestformulacode,\r\n                    sformulacalculationcode: testFormula.sformulacalculationcode,\r\n                    sformulacalculationdetail: testFormula.sformulacalculationdetail,\r\n                    ntransactionstatus: transactionStatus.YES\r\n                };\r\n                inputData[\"testgrouptestformula\"] = testgrouptestformula;\r\n            } else {\r\n                inputData[\"testgrouptestformula\"] = null;\r\n            }\r\n        } else if (selectedRecord.nparametertypecode.value === parameterType.CHARACTER) {\r\n            const characterList = [\"ntestgrouptestparametercode\", \"scharname\"];\r\n            let testGroupTestCharParameter = {};\r\n            characterList.map(item => {\r\n                return testGroupTestCharParameter[item] = selectedRecord[item] ? selectedRecord[item] : \"\";\r\n            });\r\n            inputData[\"testgrouptestcharparameter\"] = testGroupTestCharParameter;\r\n        } else if (selectedRecord.nparametertypecode.value === parameterType.PREDEFINED) {\r\n            const testGroupTestPredefParameter = {\r\n                ntestgrouptestparametercode: selectedRecord.ntestgrouptestparametercode,\r\n                ngradecode: selectedRecord.ngradecode.value,\r\n                spredefinedname: selectedRecord.spredefinedname,\r\n                ntestgrouptestpredefcode: selectedRecord.ntestgrouptestpredefcode,\r\n                ndefaultstatus: selectedRecord.ndefaultstatus\r\n            }\r\n            inputData[\"testgrouptestpredefparameter\"] = testGroupTestPredefParameter;\r\n        }\r\n        console.log(\"input data:\", inputData);\r\n        const inputParam = {\r\n            inputData,\r\n            classUrl: \"testgroup\",\r\n            operation: \"update\",\r\n            methodUrl: \"TestGroupParameter\",\r\n            saveType, formRef, searchRef: this.searchRef,\r\n            postParam: {\r\n                inputListName: \"TestGroupTest\", selectedObject: \"SelectedTest\", primaryKeyField: \"ntestgrouptestcode\",\r\n                primaryKeyValue: this.props.masterData.SelectedTest.ntestgrouptestcode,\r\n                fetchUrl: \"testgroup/getTestGroupTest\", fecthInputObject: { userinfo: this.props.userInfo },\r\n                masterData: this.props.masterData, searchFieldList: this.searchFieldList\r\n            }\r\n        }\r\n        return inputParam;\r\n    }\r\n\r\n    onSaveFormula = (saveType, formRef) => {\r\n        const masterData = this.props.masterData;\r\n        const selectedRecord = this.state.selectedRecord;\r\n        const selectedParameter = masterData.selectedParameter;\r\n        const testFormulaArray = selectedRecord.ntestformulacode.map(test => {\r\n            return {\r\n                ntestgrouptestcode: selectedParameter.ntestgrouptestcode,\r\n                ntestgrouptestparametercode: selectedParameter.ntestgrouptestparametercode,\r\n                ntestformulacode: test.item.ntestformulacode,\r\n                sformulacalculationcode: test.item.sformulacalculationcode,\r\n                sformulacalculationdetail: test.item.sformulacalculationdetail,\r\n                ntransactionstatus: transactionStatus.NO\r\n            }\r\n        });\r\n        const inputData = {\r\n            testgroupspecification: masterData.SelectedSpecification,\r\n            testgrouptestformula: testFormulaArray,\r\n            userinfo: this.props.userInfo\r\n        }\r\n        const inputParam = {\r\n            inputData,\r\n            classUrl: \"testgroup\",\r\n            operation: this.props.operation,\r\n            methodUrl: \"TestGroupTestFormula\",\r\n            saveType, formRef, searchRef: this.searchRef,\r\n            postParam: {\r\n                inputListName: \"TestGroupTest\", selectedObject: \"SelectedTest\", primaryKeyField: \"ntestgrouptestcode\",\r\n                primaryKeyValue: this.props.masterData.SelectedTest.ntestgrouptestcode,\r\n                fetchUrl: \"testgroup/getTestGroupTest\", fecthInputObject: { userinfo: this.props.userInfo },\r\n                masterData: this.props.masterData, searchFieldList: this.searchFieldList\r\n            }\r\n        }\r\n        return inputParam;\r\n    }\r\n\r\n    onSaveCodedResult = (saveType, formRef) => {\r\n        const selectedRecord = this.state.selectedRecord;\r\n        const testGroupPredefParameter = {\r\n            ndefaultstatus: transactionStatus.NO,\r\n            nstatus: transactionStatus.ACTIVE,\r\n            ntestgrouptestpredefcode: selectedRecord[\"ntestgrouptestpredefcode\"],\r\n            ntestgrouptestparametercode: this.props.masterData.selectedParameter[\"ntestgrouptestparametercode\"],\r\n            ngradecode: selectedRecord[\"ngradecode\"].value,\r\n            spredefinedname: selectedRecord[\"spredefinedname\"],\r\n            ntestpredefinedcode: this.props.masterData.selectedParameter[\"ntestpredefinedcode\"],\r\n\r\n        };\r\n        const inputParam = {\r\n            inputData: {\r\n                testgrouptestpredefinedparameter: testGroupPredefParameter,\r\n                userinfo: this.props.userInfo,\r\n                testgroupspecification: this.props.masterData.SelectedSpecification\r\n            },\r\n            classUrl: \"testgroup\",\r\n            operation: this.props.operation,\r\n            methodUrl: \"TestGroupPredefParameter\",\r\n            saveType, formRef, searchRef: this.searchRef,\r\n            postParam: {\r\n                inputListName: \"TestGroupTest\", selectedObject: \"SelectedTest\", primaryKeyField: \"ntestgrouptestcode\",\r\n                primaryKeyValue: this.props.masterData.SelectedTest.ntestgrouptestcode,\r\n                fetchUrl: \"testgroup/getTestGroupTest\", fecthInputObject: { userinfo: this.props.userInfo },\r\n                masterData: this.props.masterData, searchFieldList: this.searchFieldList\r\n            }\r\n        }\r\n        return inputParam;\r\n    }\r\n    onSaveMaterial = (saveType, formRef) => {\r\n        const selectedRecord = this.state.selectedRecord;\r\n        let testGroupTestMaterial=[]\r\n        if (this.props.operation === \"create\"){\r\n             testGroupTestMaterial = {\r\n                ntestgrouptestcode: this.props.masterData.SelectedTest.ntestgrouptestcode,\r\n                ntestgrouptestmaterialcode: this.props.masterData.SelectedTest.ntestgrouptestmaterialcode,\r\n                nmaterialtypecode: selectedRecord[\"nmaterialtypecode\"].item.jsondata.nmaterialtypecode,\r\n                nmaterialcatcode: selectedRecord[\"nmaterialcatcode\"].value,\r\n                 nmaterialcode: selectedRecord[\"nmaterialcode\"].value,\r\n                 smaterialname: selectedRecord[\"nmaterialcode\"].label,\r\n                sremarks: selectedRecord[\"sremarks\"],\r\n                nstatus: transactionStatus.ACTIVE,\r\n\r\n            };\r\n    }\r\n    else{\r\n         testGroupTestMaterial = {\r\n            ntestgrouptestcode: this.props.masterData.SelectedTest.ntestgrouptestcode,\r\n            ntestgrouptestmaterialcode: this.props.masterData.selectedMaterial.ntestgrouptestmaterialcode,\r\n            nmaterialtypecode: selectedRecord[\"nmaterialtypecode\"].value,\r\n            nmaterialcatcode: selectedRecord[\"nmaterialcatcode\"].value,\r\n            nmaterialcode: selectedRecord[\"nmaterialcode\"].value,\r\n            sremarks: selectedRecord[\"sremarks\"],\r\n            nstatus: transactionStatus.ACTIVE,\r\n\r\n        };\r\n    }\r\n\r\n        const inputParam = {\r\n            inputData: {\r\n                testgrouptestmaterial:testGroupTestMaterial,\r\n                userinfo: this.props.userInfo,\r\n            },\r\n            classUrl: \"testgroup\",\r\n            operation: this.props.operation,\r\n            methodUrl: \"TestGroupTestMaterial\",\r\n            saveType, formRef, searchRef: this.searchRef,\r\n            postParam: {\r\n                inputListName: \"TestGroupTest\", selectedObject: \"SelectedTest\", primaryKeyField: \"ntestgrouptestcode\",\r\n                primaryKeyValue: this.props.masterData.SelectedTest.ntestgrouptestcode,\r\n                fetchUrl: \"testgroup/getTestGroupTest\", fecthInputObject: { userinfo: this.props.userInfo },\r\n                masterData: this.props.masterData, searchFieldList: this.searchFieldList\r\n            }\r\n        }\r\n        return inputParam;\r\n    }\r\n    \r\n    deleteTest = (deleteParam) => {\r\n        const testgroupspecification = this.props.masterData.SelectedSpecification;\r\n        if (testgroupspecification.napprovalstatus === transactionStatus.DRAFT\r\n            || testgroupspecification.napprovalstatus === transactionStatus.CORRECTION) {\r\n            const screenName = deleteParam.screenName;\r\n            const inputParam = {\r\n                inputData: {\r\n                    testgrouptest: deleteParam.selectedRecord,\r\n                    userinfo: this.props.userInfo,\r\n                    testgroupspecification,\r\n                    treetemplatemanipulation: this.props.masterData.selectedNode\r\n                },\r\n                classUrl: \"testgroup\",\r\n                operation: \"delete\",\r\n                methodUrl: \"Test\",\r\n                screenName: \"IDS_TEST\",\r\n                postParam: {\r\n                    inputListName: \"TestGroupTest\", selectedObject: \"SelectedTest\", primaryKeyField: \"ntestgrouptestcode\",\r\n                    primaryKeyValue: deleteParam.selectedRecord.ntestgrouptestcode,\r\n                    fetchUrl: \"testgroup/getTestGroupTest\", fecthInputObject: { userinfo: this.props.userInfo },\r\n                    masterData: this.props.masterData, searchFieldList: this.searchFieldList\r\n                }\r\n            }\r\n            const masterData = this.props.masterData;\r\n            if (showEsign(this.props.esignRights, this.props.userInfo.nformcode, this.props.ncontrolCode)) {\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        loadEsign: true, screenData: { inputParam, masterData },\r\n                        openModal: true, screenName: screenName, operation: deleteParam.operation, selectedRecord: {}\r\n                    }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            } else {\r\n                this.props.crudMaster(inputParam, masterData, \"openModal\", {});\r\n            }\r\n        } else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SPECIFICATIONSTATUSMUSTBEDRAFTCORRECTION\" }));\r\n        }\r\n    }\r\n\r\n    deleteAction = (item, operation, ncontrolCode, methodUrl, modalName) => {\r\n        const selected = item;\r\n        const inputParam = {\r\n            inputData: {\r\n                [methodUrl.toLowerCase()]: selected,\r\n                userinfo: this.props.userInfo,\r\n                testgroupspecification: this.props.masterData.SelectedSpecification\r\n            },\r\n            classUrl: \"testgroup\",\r\n            operation: operation,\r\n            methodUrl: methodUrl,\r\n            screenName: \"IDS_TEST\",\r\n            postParam: {\r\n                inputListName: \"TestGroupTest\", selectedObject: \"SelectedTest\", primaryKeyField: \"ntestgrouptestcode\",\r\n                primaryKeyValue: this.props.masterData.SelectedTest.ntestgrouptestcode,\r\n                fetchUrl: \"testgroup/getTestGroupTest\", fecthInputObject: { userinfo: this.props.userInfo },\r\n                masterData: this.props.masterData, searchFieldList: this.searchFieldList\r\n            }\r\n        }\r\n        const masterData = this.props.masterData;\r\n        if (showEsign(this.props.esignRights, this.props.userInfo.nformcode, ncontrolCode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData },\r\n                    [modalName]: true, screenName: \"IDS_TEST\", operation: operation, selectedRecord: {}\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        } else {\r\n            this.props.crudMaster(inputParam, masterData, \"openChildModal\", {});\r\n        }\r\n    }\r\n\r\n    onSwitchChange = (item, key, methodUrl, event) => {\r\n        let dataItem = item;\r\n        if (methodUrl === \"TestGroupTestFormula\") {\r\n            dataItem[\"ntransactionstatus\"] = transactionStatus.YES;\r\n        } else if (methodUrl === 'TestGroupPredefParameter') {\r\n            // if(this.props.masterData.SelectedSpecification.napprovalstatus === transactionStatus.DRAFT || this.props.masterData.SelectedSpecification.napprovalstatus === transactionStatus.CORRECTION)\r\n            // {\r\n            dataItem['ndefaultstatus'] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\r\n            // }\r\n            // else{\r\n            //     return toast.warn(this.props.intl.formatMessage({ id: \"IDS_SPECIFICATIONSTATUSMUSTBEDRAFTCORRECTION\" }));\r\n            // }\r\n\r\n        }\r\n        else {\r\n            dataItem[\"ndefaultstatus\"] = transactionStatus.YES;\r\n        }\r\n        const inputParam = {\r\n            inputData: {\r\n                [key]: dataItem,\r\n                userinfo: this.props.userInfo,\r\n                testgroupspecification: this.props.masterData.SelectedSpecification\r\n            },\r\n            classUrl: \"testgroup\",\r\n            operation: \"default\",\r\n            methodUrl: methodUrl\r\n        }\r\n        this.props.crudMaster(inputParam, this.props.masterData, \"openChildModal\", {});\r\n    }\r\n\r\n    onEsignInputOnChange = (event) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if (event.target.type === 'checkbox') {\r\n            selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\r\n        } else {\r\n            selectedRecord[event.target.name] = event.target.value;\r\n        }\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    onComboChange = (comboData, fieldName, caseNo) => {\r\n        let inputData = [];\r\n        let masterData = { ...this.props.masterData }\r\n        let inputParam = []\r\n        let selectedRecord = this.state.selectedRecord || {};\r\n        switch (caseNo) {\r\n            case 1:\r\n                selectedRecord[fieldName] = comboData;\r\n                this.setState({ selectedRecord });\r\n                break;\r\n\r\n            case 2:\r\n                selectedRecord[\"parameterTypeCode\"] = comboData.value;\r\n                selectedRecord[fieldName] = comboData;\r\n                const needRoundingDigit = comboData.value === parameterType.NUMERIC ? false : true;\r\n                const needUnit = comboData.value === parameterType.NUMERIC ? false : true;\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        selectedRecord,\r\n                        testGroupInputData: {\r\n                            ...this.props.testGroupInputData,\r\n                            needRoundingDigit, needUnit\r\n                        }\r\n                    }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n                break;\r\n\r\n            case 3:\r\n                selectedRecord[\"schecklistversionname\"] = comboData.item.schecklistversionname;\r\n                selectedRecord[fieldName] = comboData;\r\n                this.setState({ selectedRecord });\r\n                break;\r\n            case 4:\r\n                selectedRecord[\"nmaterialtypecode\"] = comboData.value;\r\n\r\n                selectedRecord[fieldName] = comboData;\r\n                inputData = {\r\n                    userinfo: this.props.userInfo,\r\n                    nmaterialtypecode: parseInt(comboData.value),\r\n                }\r\n                inputParam = { masterData, inputData ,selectedRecord}\r\n                this.props.getMaterialCategoryBasedMaterialType(inputParam)\r\n                break;\r\n            case 5:\r\n                selectedRecord[\"nmaterialcatcode\"] = comboData.value;\r\n\r\n                selectedRecord[fieldName] = comboData;\r\n                inputData = {\r\n                    userinfo: this.props.userInfo,\r\n                    nmaterialcatcode: parseInt(selectedRecord[\"nmaterialcatcode\"].value),\r\n                    nmaterialtypecode: parseInt(selectedRecord[\"nmaterialtypecode\"].value),\r\n\r\n                }\r\n                inputParam = { masterData, inputData,selectedRecord,operation:this.props.operation,selectedRecord }\r\n                this.props.getMaterialBasedMaterialCategory(inputParam)\r\n                break;\r\n\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n   \r\n    onInputOnChange = (event, caseNo, optional) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        switch (caseNo) {\r\n            case 1:\r\n                if (event.target.type === 'checkbox') {\r\n                    selectedRecord[event.target.name] = event.target.checked === true ? optional[0] : optional[1];\r\n                } else if (event.target.type === 'radio') {\r\n                    selectedRecord[event.target.name] = optional;\r\n                } else {\r\n                    selectedRecord[event.target.name] = event.target.value;\r\n                }\r\n                this.setState({ selectedRecord });\r\n                break;\r\n\r\n            case 2:\r\n                selectedRecord[event.target.name] = event.target.value;\r\n                const indexKey = Object.keys(optional)[0];\r\n                const value = Object.values(optional)[0];\r\n                const treeData = {\r\n                    ntreeversiontempcode: value.ntreeversiontempcode,\r\n                    npositioncode: value.nlevelno - 1,\r\n                    sleveldescription: event.target.value,\r\n                    ntemptranstestgroupcode: value.ntemptranstestgroupcode,\r\n                    nformcode: 62,\r\n                    schildnode: value.schildnode,\r\n                    nnextchildcode: value.schildnode\r\n                }\r\n                let treetemplatemanipulation = selectedRecord.treetemplatemanipulation || [];\r\n                treetemplatemanipulation[indexKey] = treeData;\r\n                selectedRecord[\"treetemplatemanipulation\"] = treetemplatemanipulation;\r\n                this.setState({ selectedRecord });\r\n                break;\r\n\r\n            case 4:\r\n                const inputValue = event.target.value;\r\n                if (/^-?\\d*?\\.?\\d*?$/.test(inputValue) || inputValue === \"\") {\r\n                    selectedRecord[event.target.name] = event.target.value;\r\n                }\r\n                this.setState({ selectedRecord });\r\n                break;\r\n\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    validateEsign = () => {\r\n        const inputParam = {\r\n            inputData: {\r\n                \"userinfo\": {\r\n                    ...this.props.userInfo,\r\n                    sreason: this.state.selectedRecord[\"esigncomments\"]\r\n                },\r\n                password: this.state.selectedRecord[\"esignpassword\"]\r\n            },\r\n            screenData: this.props.screenData\r\n        }\r\n        this.props.validateEsignCredential(inputParam, \"openChildModal\");\r\n    }\r\n\r\n    componentDidUpdate(previousProps) {\r\n        if (this.props.selectedRecord !== previousProps.selectedRecord) {\r\n            this.setState({ selectedRecord: this.props.selectedRecord });\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport default injectIntl(TestGroupTestTab);"]},"metadata":{},"sourceType":"module"}