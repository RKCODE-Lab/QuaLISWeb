{"ast":null,"code":"var _jsxFileName = \"D:\\\\LIMSWFH\\\\LIMSPOSTGRESQL\\\\QuaLISWeb\\\\src\\\\components\\\\type3component\\\\Type3Component.jsx\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { injectIntl } from 'react-intl';\nimport { Row, Col } from 'react-bootstrap';\nimport { toast } from 'react-toastify';\nimport { process } from '@progress/kendo-data-query';\nimport DataGrid from '../../components/data-grid/data-grid.component';\nimport Esign from '../../pages/audittrail/Esign';\nimport SlideOutModal from '../slide-out-modal/SlideOutModal';\nimport { getFieldSpecification } from './Type3FieldSpecificationList';\nimport AddType3Component from './AddType3Component';\nimport { callService, crudMaster, updateStore, validateEsignCredential, fetchRecordCombo, onComboLoad } from '../../actions';\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\nimport { showEsign, getControlMap, extractFieldHeader, formatInputDate } from '../CommonScript';\nimport { ListWrapper } from '../client-group.styles';\nimport { transactionStatus, designComponents } from '../Enumeration';\n\nconst mapStateToProps = state => {\n  return {\n    Login: state.Login\n  };\n};\n\nclass Type3Component extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.dataStateChange = event => {\n      this.setState({\n        dataResult: process(this.state.data ? this.state.data : [], event.dataState),\n        dataState: event.dataState\n      });\n    };\n\n    this.openModal = ncontrolCode => {\n      let comboColumnField = [];\n      this.extractedColumnList.map(item => {\n        if (item.ndesigncomponentcode === designComponents.COMBOBOX) {\n          comboColumnField.push(item);\n        }\n      });\n      this.props.onComboLoad(\"create\", this.props.Login.userInfo, this.props.Login.inputParam, ncontrolCode, comboColumnField);\n    };\n\n    this.closeModal = () => {\n      let loadEsign = this.props.Login.loadEsign;\n      let openModal = this.props.Login.openModal;\n      let selectedRecord = this.props.Login.selectedRecord;\n      let selectedId = this.props.Login.selectedId;\n\n      if (this.props.Login.loadEsign) {\n        if (this.props.Login.operation === \"delete\") {\n          loadEsign = false;\n          openModal = false;\n          selectedRecord = {};\n        } else {\n          loadEsign = false;\n          selectedRecord['esignpassword'] = \"\";\n          selectedRecord['esigncomments'] = \"\";\n          selectedRecord['esignreason'] = \"\";\n        }\n      } else {\n        openModal = false;\n        selectedRecord = {};\n        selectedId = null;\n      }\n\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          openModal,\n          loadEsign,\n          selectedRecord,\n          //selectedId:null \n          selectedId\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onInputOnChange = event => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (event.target.type === 'checkbox') {\n        selectedRecord[event.target.name] = event.target.checked === true ? 3 : 4;\n      } else {\n        selectedRecord[event.target.name] = event.target.value;\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onComboChange = (comboData, fieldName, item) => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (comboData !== null) {\n        if (item.foreignDataField) {\n          selectedRecord[item.foreignDataField] = comboData.value;\n        }\n      }\n\n      selectedRecord[fieldName] = comboData;\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.handleDateChange = (dateName, dateValue, item) => {\n      const {\n        selectedRecord\n      } = this.state;\n      selectedRecord[dateName] = dateValue;\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onNumericInputOnChange = (value, name, item) => {\n      const selectedRecord = this.state.selectedRecord || {};\n      selectedRecord[name] = value;\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.deleteRecord = deleteParam => {\n      const inputParam = {\n        classUrl: this.props.Login.inputParam.classUrl,\n        methodUrl: this.props.Login.inputParam.methodUrl,\n        displayName: this.props.Login.inputParam.displayName,\n        inputData: {\n          [this.props.Login.inputParam.methodUrl.toLowerCase()]: deleteParam.selectedRecord,\n          \"userinfo\": this.props.Login.userInfo\n        },\n        operation: deleteParam.operation,\n        dataState: this.state.dataState\n      };\n      const esignNeeded = showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, deleteParam.ncontrolCode);\n\n      if (esignNeeded) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData: this.props.Login.masterData\n            },\n            openModal: true,\n            screenName: this.props.intl.formatMessage({\n              id: this.props.Login.inputParam.displayName\n            }),\n            operation: deleteParam.operation\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\n      }\n    };\n\n    this.reloadData = () => {\n      const inputParam = {\n        inputData: {\n          \"userinfo\": this.props.Login.userInfo\n        },\n        classUrl: this.props.Login.inputParam.classUrl,\n        methodUrl: this.props.Login.inputParam.methodUrl,\n        displayName: this.props.Login.inputParam.displayName,\n        userInfo: this.props.Login.userInfo\n      };\n      this.props.callService(inputParam);\n    };\n\n    this.onSaveClick = (saveType, formRef) => {\n      let inputData = [];\n      inputData[\"userinfo\"] = this.props.Login.userInfo;\n      let dataState = undefined;\n      let selectedId = null;\n      let fieldList = getFieldSpecification().get(this.props.Login.inputParam.methodUrl) || [];\n      let selectedRecordPrimarykey = fieldList[0].dataField;\n      dataState = this.state.dataState;\n      inputData[this.props.Login.inputParam.methodUrl.toLowerCase()] = {\n        \"nsitecode\": this.props.Login.userInfo.nmastersitecode\n      };\n      this.extractedColumnList.map(item => {\n        let fieldName = item.dataField;\n\n        if (item.isJsonField === true) {\n          return inputData[this.props.Login.inputParam.methodUrl.toLowerCase()][item.jsonObjectName] = { ...inputData[this.props.Login.inputParam.methodUrl.toLowerCase()][item.jsonObjectName],\n            [fieldName]: this.state.selectedRecord[fieldName] ? this.state.selectedRecord[fieldName] : \"\"\n          };\n        } else {\n          if (item.controlType === \"selectbox\") {\n            inputData[this.props.Login.inputParam.methodUrl.toLowerCase()][fieldName] = this.state.selectedRecord[fieldName] ? this.state.selectedRecord[fieldName].label ? this.state.selectedRecord[fieldName].label : \"\" : -1;\n            inputData[this.props.Login.inputParam.methodUrl.toLowerCase()][item.foreignDataField] = this.state.selectedRecord[fieldName] ? this.state.selectedRecord[fieldName].value ? this.state.selectedRecord[fieldName].value : \"\" : -1;\n            return inputData;\n          } else if (item.controlType === \"datepicker\") {\n            inputData[this.props.Login.inputParam.methodUrl.toLowerCase()][item.dateField] = formatInputDate(this.state.selectedRecord[fieldName] ? this.state.selectedRecord[fieldName] : \"\", false);\n          } else if (item.controlType === \"checkbox\") {\n            inputData[this.props.Login.inputParam.methodUrl.toLowerCase()][item.controlName] = this.state.selectedRecord[item.controlName] ? this.state.selectedRecord[item.controlName] : transactionStatus.NO;\n          } else {\n            inputData[this.props.Login.inputParam.methodUrl.toLowerCase()][fieldName] = this.state.selectedRecord[fieldName] ? this.state.selectedRecord[fieldName] : \"\";\n          }\n\n          inputData[this.props.Login.inputParam.methodUrl.toLowerCase()][selectedRecordPrimarykey] = this.props.Login.selectedId;\n          return inputData;\n        }\n      });\n\n      if (this.props.Login.operation == \"update\") {\n        selectedId = this.props.Login.selectedId;\n      }\n\n      const inputParam = {\n        classUrl: this.props.Login.inputParam.classUrl,\n        methodUrl: this.props.Login.inputParam.methodUrl,\n        displayName: this.props.Login.inputParam.displayName,\n        inputData: inputData,\n        selectedId,\n        operation: this.props.Login.operation,\n        saveType,\n        formRef,\n        dataState\n      };\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData: this.props.Login.masterData\n            },\n            openModal: true,\n            screenName: this.props.intl.formatMessage({\n              id: this.props.Login.inputParam.displayName\n            }),\n            operation: this.props.Login.operation\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\n      }\n    };\n\n    this.validateEsign = () => {\n      const inputParam = {\n        inputData: {\n          \"userinfo\": { ...this.props.Login.userInfo,\n            sreason: this.state.selectedRecord[\"esigncomments\"],\n            nreasoncode: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].value,\n            spredefinedreason: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].label\n          },\n          password: this.state.selectedRecord[\"esignpassword\"]\n        },\n        screenData: this.props.Login.screenData\n      };\n      this.props.validateEsignCredential(inputParam, \"openModal\");\n    };\n\n    this.formRef = React.createRef();\n    this.extractedColumnList = [];\n    this.fieldList = [];\n    const _dataState = {\n      skip: 0,\n      take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n    };\n    this.state = {\n      data: [],\n      masterStatus: \"\",\n      error: \"\",\n      selectedRecord: {},\n      dataResult: [],\n      dataState: _dataState,\n      userRoleControlRights: [],\n      controlMap: new Map()\n    };\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\n      toast.warn(props.Login.masterStatus);\n      props.Login.masterStatus = \"\";\n    }\n\n    if (props.Login.error !== state.error) {\n      toast.error(props.Login.error);\n      props.Login.error = \"\";\n    }\n\n    return null;\n  }\n\n  render() {\n    let primaryKeyField = \"\";\n    let fieldList = {};\n    const addId = this.props.Login.inputParam && this.state.controlMap.has(\"Add\".concat(this.props.Login.inputParam.methodUrl)) && this.state.controlMap.get(\"Add\".concat(this.props.Login.inputParam.methodUrl)).ncontrolcode;\n\n    if (this.props.Login.inputParam !== undefined) {\n      fieldList = getFieldSpecification().get(this.props.Login.inputParam.methodUrl) || [];\n      this.extractedColumnList = extractFieldHeader(Object.values(fieldList));\n      primaryKeyField = Object.keys(fieldList).length > 0 ? fieldList[0].dataField : \"\";\n    }\n\n    const editId = this.props.Login.inputParam && this.state.controlMap.has(\"Edit\".concat(this.props.Login.inputParam.methodUrl)) && this.state.controlMap.get(\"Edit\".concat(this.props.Login.inputParam.methodUrl)).ncontrolcode;\n    const editParam = {\n      screenName: this.props.Login.inputParam && this.props.Login.inputParam.displayName && this.props.intl.formatMessage({\n        id: this.props.Login.inputParam.displayName\n      }),\n      operation: \"update\",\n      primaryKeyField,\n      inputParam: this.props.Login.inputParam,\n      userInfo: this.props.Login.userInfo,\n      ncontrolCode: editId,\n      masterData: this.props.Login.masterData,\n      extractedColumnList: this.extractedColumnList\n    };\n    const deleteParam = {\n      operation: \"delete\"\n    };\n    const mandatoryFields = [];\n    this.extractedColumnList.forEach(item => item.mandatory === true ? mandatoryFields.push(item) : \"\");\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(ListWrapper, {\n      className: \"client-list-content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 25\n      }\n    }, this.state.data ? /*#__PURE__*/React.createElement(DataGrid, {\n      primaryKeyField: primaryKeyField,\n      data: this.state.data,\n      dataResult: this.state.dataResult,\n      dataState: this.state.dataState,\n      dataStateChange: this.dataStateChange,\n      extractedColumnList: this.extractedColumnList,\n      controlMap: this.state.controlMap,\n      userRoleControlRights: this.state.userRoleControlRights,\n      inputParam: this.props.Login.inputParam,\n      userInfo: this.props.Login.userInfo,\n      fetchRecord: this.props.fetchRecordCombo,\n      editParam: editParam,\n      deleteRecord: this.deleteRecord,\n      deleteParam: deleteParam,\n      reloadData: this.reloadData,\n      addRecord: () => this.openModal(addId),\n      pageable: true,\n      scrollable: 'scrollable' // isComponent={true}\n      ,\n      gridHeight: '600px',\n      isActionRequired: true,\n      isToolBarRequired: true,\n      selectedId: this.props.Login.selectedId,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 33\n      }\n    }) : \"\"))), this.props.Login.openModal ? /*#__PURE__*/React.createElement(SlideOutModal, {\n      show: this.props.Login.openModal,\n      closeModal: this.closeModal,\n      operation: this.props.Login.operation,\n      inputParam: this.props.Login.inputParam,\n      screenName: this.props.Login.screenName,\n      onSaveClick: this.onSaveClick,\n      esign: this.props.Login.loadEsign,\n      validateEsign: this.validateEsign,\n      masterStatus: this.props.Login.masterStatus,\n      updateStore: this.props.updateStore,\n      selectedRecord: this.state.selectedRecord || {},\n      mandatoryFields: mandatoryFields // addComponentParam={{}}                   \n      // addComponent={this.addComponent}\n      ,\n      addComponent: this.props.Login.loadEsign ? /*#__PURE__*/React.createElement(Esign, {\n        operation: this.props.Login.operation,\n        onInputOnChange: this.onInputOnChange,\n        inputParam: this.props.Login.inputParam,\n        selectedRecord: this.state.selectedRecord || {},\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 29\n        }\n      }) : /*#__PURE__*/React.createElement(AddType3Component, {\n        selectedRecord: this.state.selectedRecord || {},\n        onInputOnChange: this.onInputOnChange,\n        extractedColumnList: this.extractedColumnList,\n        onNumericInputOnChange: this.onNumericInputOnChange,\n        onComboChange: this.onComboChange,\n        handleDateChange: this.handleDateChange,\n        userInfo: this.props.Login.userInfo,\n        dataList: this.props.Login.dataList,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 197,\n          columnNumber: 31\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 21\n      }\n    }) : \"\");\n  }\n\n  componentDidUpdate(previousProps) {\n    if (this.props.Login.masterData !== previousProps.Login.masterData) {\n      if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\n        const userRoleControlRights = [];\n\n        if (this.props.Login.userRoleControlRights) {\n          this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item => userRoleControlRights.push(item.ncontrolcode));\n        }\n\n        const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode);\n        this.setState({\n          userRoleControlRights,\n          controlMap,\n          data: this.props.Login.masterData,\n          dataResult: process(this.props.Login.masterData ? this.props.Login.masterData : [], this.state.dataState)\n        });\n      } else {\n        let {\n          dataState\n        } = this.state;\n\n        if (this.props.Login.dataState === undefined) {\n          dataState = {\n            skip: 0,\n            take: this.state.dataState.take\n          };\n        }\n\n        if (this.state.dataResult.data) {\n          if (this.state.dataResult.data.length === 1) {\n            let skipcount = this.state.dataState.skip > 0 ? this.state.dataState.skip - this.state.dataState.take : this.state.dataState.skip;\n            dataState = {\n              skip: skipcount,\n              take: this.state.dataState.take\n            };\n          }\n        }\n\n        this.setState({\n          data: this.props.Login.masterData,\n          selectedRecord: this.props.Login.selectedRecord,\n          dataResult: process(this.props.Login.masterData ? this.props.Login.masterData : [], dataState),\n          dataState\n        });\n      }\n    }\n\n    if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\n      //Get selected value when clicking edit button\n      if (this.props.Login.selectedRecord) {\n        this.setState({\n          selectedRecord: this.props.Login.selectedRecord\n        });\n      }\n    }\n  }\n\n}\n\nexport default connect(mapStateToProps, {\n  callService,\n  crudMaster,\n  updateStore,\n  validateEsignCredential,\n  fetchRecordCombo,\n  onComboLoad\n})(injectIntl(Type3Component));","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/components/type3component/Type3Component.jsx"],"names":["React","connect","injectIntl","Row","Col","toast","process","DataGrid","Esign","SlideOutModal","getFieldSpecification","AddType3Component","callService","crudMaster","updateStore","validateEsignCredential","fetchRecordCombo","onComboLoad","DEFAULT_RETURN","showEsign","getControlMap","extractFieldHeader","formatInputDate","ListWrapper","transactionStatus","designComponents","mapStateToProps","state","Login","Type3Component","Component","constructor","props","dataStateChange","event","setState","dataResult","data","dataState","openModal","ncontrolCode","comboColumnField","extractedColumnList","map","item","ndesigncomponentcode","COMBOBOX","push","userInfo","inputParam","closeModal","loadEsign","selectedRecord","selectedId","operation","updateInfo","typeName","onInputOnChange","target","type","name","checked","value","onComboChange","comboData","fieldName","foreignDataField","handleDateChange","dateName","dateValue","onNumericInputOnChange","deleteRecord","deleteParam","classUrl","methodUrl","displayName","inputData","toLowerCase","esignNeeded","userRoleControlRights","nformcode","screenData","masterData","screenName","intl","formatMessage","id","reloadData","onSaveClick","saveType","formRef","undefined","fieldList","get","selectedRecordPrimarykey","dataField","nmastersitecode","isJsonField","jsonObjectName","controlType","label","dateField","controlName","NO","validateEsign","sreason","nreasoncode","spredefinedreason","password","createRef","skip","take","settings","parseInt","masterStatus","error","controlMap","Map","getDerivedStateFromProps","warn","render","primaryKeyField","addId","has","concat","ncontrolcode","Object","values","keys","length","editId","editParam","mandatoryFields","forEach","mandatory","dataList","componentDidUpdate","previousProps","skipcount"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport {  injectIntl } from 'react-intl';\r\nimport { Row, Col } from 'react-bootstrap';\r\nimport { toast } from 'react-toastify';\r\nimport { process } from '@progress/kendo-data-query';\r\nimport DataGrid from '../../components/data-grid/data-grid.component';\r\nimport Esign from '../../pages/audittrail/Esign';\r\nimport SlideOutModal from '../slide-out-modal/SlideOutModal';\r\nimport { getFieldSpecification } from './Type3FieldSpecificationList';\r\nimport AddType3Component from './AddType3Component';\r\nimport { callService, crudMaster, updateStore, validateEsignCredential, fetchRecordCombo, onComboLoad } from '../../actions';\r\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\r\nimport { showEsign, getControlMap, extractFieldHeader, formatInputDate } from '../CommonScript';\r\nimport { ListWrapper} from '../client-group.styles';\r\nimport { transactionStatus, designComponents } from '../Enumeration';\r\n\r\nconst mapStateToProps = state => {\r\n    return ({ Login: state.Login })\r\n}\r\n\r\nclass Type3Component extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.formRef = React.createRef();\r\n        this.extractedColumnList = [];\r\n        this.fieldList = [];\r\n\r\n        const dataState = {\r\n            skip: 0,\r\n            take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5,\r\n        };\r\n        this.state = {\r\n            data: [], masterStatus: \"\", error: \"\", selectedRecord: {},\r\n            dataResult: [],\r\n            dataState: dataState,\r\n            userRoleControlRights: [],\r\n            controlMap: new Map(),\r\n        };\r\n    }\r\n\r\n    dataStateChange = (event) => { \r\n        this.setState({\r\n            dataResult: process(this.state.data?this.state.data:[], event.dataState),\r\n            dataState: event.dataState\r\n        });\r\n    }\r\n\r\n    openModal = (ncontrolCode) => {\r\n\r\n        let comboColumnField = [];\r\n       this.extractedColumnList.map(item=>{\r\n        if(item.ndesigncomponentcode === designComponents.COMBOBOX){\r\n            comboColumnField.push(item);\r\n            }\r\n        })\r\n        this.props.onComboLoad(\"create\",this.props.Login.userInfo,this.props.Login.inputParam,ncontrolCode, comboColumnField);\r\n    }\r\n\r\n    closeModal = () => {\r\n        let loadEsign = this.props.Login.loadEsign;\r\n        let openModal = this.props.Login.openModal;\r\n        let selectedRecord = this.props.Login.selectedRecord;\r\n        let selectedId = this.props.Login.selectedId;\r\n        if (this.props.Login.loadEsign) {\r\n            if (this.props.Login.operation === \"delete\") {\r\n                loadEsign = false;\r\n                openModal = false;\r\n                selectedRecord = {};\r\n            }\r\n            else {\r\n                loadEsign = false;\r\n                selectedRecord['esignpassword'] = \"\"\r\n                selectedRecord['esigncomments'] = \"\"\r\n                selectedRecord['esignreason']=\"\"\r\n            }\r\n        }\r\n        else {\r\n            openModal = false;\r\n            selectedRecord = {};\r\n            selectedId=null;\r\n        }\r\n\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { openModal, loadEsign, selectedRecord,\r\n                 //selectedId:null \r\n                 selectedId}\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n\r\n    }\r\n\r\n    static getDerivedStateFromProps(props, state) {\r\n\r\n        if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\r\n            toast.warn(props.Login.masterStatus);\r\n            props.Login.masterStatus = \"\";\r\n        }\r\n\r\n        if (props.Login.error !== state.error) {\r\n            toast.error(props.Login.error)\r\n            props.Login.error = \"\";\r\n        }\r\n        return null;\r\n    }\r\n\r\n    render() {\r\n        let primaryKeyField = \"\";\r\n        let fieldList = {};\r\n        const addId = this.props.Login.inputParam && this.state.controlMap.has(\"Add\".concat(this.props.Login.inputParam.methodUrl))\r\n            && this.state.controlMap.get(\"Add\".concat(this.props.Login.inputParam.methodUrl)).ncontrolcode;\r\n\r\n        if (this.props.Login.inputParam !== undefined) {\r\n            fieldList = getFieldSpecification().get(this.props.Login.inputParam.methodUrl) || [];\r\n            this.extractedColumnList = extractFieldHeader(Object.values(fieldList));\r\n            primaryKeyField = Object.keys(fieldList).length > 0 ? fieldList[0].dataField : \"\";\r\n        }\r\n\r\n        const editId = this.props.Login.inputParam && this.state.controlMap.has(\"Edit\".concat(this.props.Login.inputParam.methodUrl))\r\n               && this.state.controlMap.get(\"Edit\".concat(this.props.Login.inputParam.methodUrl)).ncontrolcode;\r\n    \r\n        const editParam = {\r\n            screenName:this.props.Login.inputParam && this.props.Login.inputParam.displayName && this.props.intl.formatMessage({ id: this.props.Login.inputParam.displayName }), \r\n            operation:\"update\",  primaryKeyField, \r\n            inputParam:this.props.Login.inputParam,   \r\n            userInfo:this.props.Login.userInfo, \r\n            ncontrolCode:editId,\r\n            masterData:this.props.Login.masterData,\r\n            extractedColumnList : this.extractedColumnList\r\n            };\r\n        const deleteParam ={operation:\"delete\"};\r\n        const mandatoryFields=[];\r\n        this.extractedColumnList.forEach(item=>item.mandatory === true ? \r\n            mandatoryFields.push(item) :\"\"\r\n        );        \r\n\r\n        return(<>\r\n                <Row>\r\n                    <Col>\r\n                        <ListWrapper className=\"client-list-content\">\r\n                          \r\n\r\n                            {this.state.data ?\r\n                                <DataGrid\r\n                                    primaryKeyField={primaryKeyField}\r\n                                    data={this.state.data}\r\n                                    dataResult={this.state.dataResult}\r\n                                    dataState={this.state.dataState}\r\n                                    dataStateChange={this.dataStateChange}\r\n                                    extractedColumnList={this.extractedColumnList}\r\n                                    controlMap={this.state.controlMap}\r\n                                    userRoleControlRights={this.state.userRoleControlRights}\r\n                                    inputParam={this.props.Login.inputParam}\r\n                                    userInfo={this.props.Login.userInfo}\r\n                                    fetchRecord={this.props.fetchRecordCombo}\r\n                                    editParam={editParam}\r\n                                    deleteRecord={this.deleteRecord}\r\n                                    deleteParam={deleteParam}\r\n                                    reloadData={this.reloadData}\r\n                                    addRecord = {() => this.openModal(addId)}\r\n                                    pageable={true}\r\n                                    scrollable={'scrollable'}\r\n                                    // isComponent={true}\r\n                                    gridHeight = {'600px'}\r\n                                    isActionRequired={true}\r\n                                    isToolBarRequired={true}\r\n                                    selectedId={this.props.Login.selectedId}\r\n                                />\r\n                                : \"\"}\r\n                        </ListWrapper>\r\n                    </Col>\r\n                </Row>\r\n\r\n                {/* Below Condition Added to avoid unwanted rendering of SlideOut */}\r\n                {this.props.Login.openModal ? \r\n                    <SlideOutModal show={this.props.Login.openModal}\r\n                        closeModal={this.closeModal}\r\n                        operation={this.props.Login.operation}\r\n                        inputParam={this.props.Login.inputParam}\r\n                        screenName={this.props.Login.screenName}\r\n                        onSaveClick={this.onSaveClick}\r\n                        esign={this.props.Login.loadEsign}\r\n                        validateEsign={this.validateEsign}\r\n                        masterStatus={this.props.Login.masterStatus}\r\n                        updateStore={this.props.updateStore}\r\n                        selectedRecord={this.state.selectedRecord || {}}\r\n                        mandatoryFields={mandatoryFields}\r\n                        // addComponentParam={{}}                   \r\n                        // addComponent={this.addComponent}\r\n                        addComponent={this.props.Login.loadEsign ?\r\n                            <Esign operation={this.props.Login.operation}\r\n                                onInputOnChange={this.onInputOnChange}\r\n                                inputParam={this.props.Login.inputParam}\r\n                                selectedRecord={this.state.selectedRecord || {}}\r\n                            />\r\n                            : <AddType3Component\r\n                                selectedRecord={this.state.selectedRecord || {}}\r\n                                onInputOnChange={this.onInputOnChange}\r\n                                extractedColumnList={this.extractedColumnList}\r\n                                onNumericInputOnChange={this.onNumericInputOnChange}\r\n                                onComboChange={this.onComboChange}\r\n                                handleDateChange={this.handleDateChange}                               \r\n                                userInfo={this.props.Login.userInfo}\r\n                                dataList={this.props.Login.dataList}\r\n                            />}\r\n                    />\r\n                :\"\"}\r\n\r\n            </>\r\n        );\r\n    }\r\n\r\n    componentDidUpdate(previousProps) {\r\n        if (this.props.Login.masterData !== previousProps.Login.masterData) {\r\n            if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\r\n                const userRoleControlRights = [];\r\n                if (this.props.Login.userRoleControlRights) {\r\n                    this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item =>\r\n                        userRoleControlRights.push(item.ncontrolcode))\r\n                }\r\n                const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode)\r\n                this.setState({\r\n                    userRoleControlRights, controlMap, data: this.props.Login.masterData,\r\n                    dataResult: process(this.props.Login.masterData ? this.props.Login.masterData : [], this.state.dataState),\r\n                });\r\n            }else {\r\n                let {dataState}=this.state;\r\n                if(this.props.Login.dataState===undefined){\r\n                    dataState={skip:0,take:this.state.dataState.take}\r\n                }\r\n                 if(this.state.dataResult.data){\r\n                     if(this.state.dataResult.data.length ===1){\r\n                        let skipcount=this.state.dataState.skip>0?(this.state.dataState.skip-this.state.dataState.take):\r\n                        this.state.dataState.skip\r\n                         dataState={skip:skipcount,take:this.state.dataState.take}\r\n                     }\r\n                 } \r\n                this.setState({\r\n                    data: this.props.Login.masterData, selectedRecord: this.props.Login.selectedRecord,\r\n                    dataResult: process(this.props.Login.masterData ? this.props.Login.masterData : [], dataState),\r\n                    dataState\r\n                });\r\n            }\r\n        }\r\n        \r\n        \r\n        if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\r\n            //Get selected value when clicking edit button\r\n            if(this.props.Login.selectedRecord)\r\n            {\r\n                this.setState({ selectedRecord : this.props.Login.selectedRecord });\r\n            }     \r\n         }\r\n    }\r\n\r\n    onInputOnChange = (event) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if (event.target.type === 'checkbox') {\r\n            selectedRecord[event.target.name] = event.target.checked === true ? 3 : 4;\r\n        }\r\n        else {\r\n            selectedRecord[event.target.name] = event.target.value;\r\n        }\r\n        this.setState({ selectedRecord });\r\n    }    \r\n\r\n    onComboChange = (comboData, fieldName, item) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if(comboData !== null){\r\n        if(item.foreignDataField){\r\n            selectedRecord[item.foreignDataField] = comboData.value;\r\n        }\r\n    }\r\n        selectedRecord[fieldName] = comboData;\r\n        this.setState({ selectedRecord });  \r\n    }\r\n\r\n    handleDateChange = (dateName, dateValue, item) => {\r\n        const { selectedRecord } = this.state;\r\n        selectedRecord[dateName] = dateValue;\r\n        this.setState({ selectedRecord });\r\n\r\n    }\r\n\r\n    onNumericInputOnChange = (value, name, item) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        selectedRecord[name] = value;\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n \r\n    deleteRecord = (deleteParam) =>{\r\n        const inputParam = {\r\n            classUrl: this.props.Login.inputParam.classUrl,\r\n            methodUrl: this.props.Login.inputParam.methodUrl,\r\n            displayName: this.props.Login.inputParam.displayName,\r\n            inputData: {\r\n                [this.props.Login.inputParam.methodUrl.toLowerCase()]: deleteParam.selectedRecord,\r\n                \"userinfo\": this.props.Login.userInfo\r\n            },\r\n            operation:deleteParam.operation,\r\n            dataState:this.state.dataState\r\n        }\r\n\r\n        const esignNeeded = showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode,deleteParam.ncontrolCode);\r\n        if (esignNeeded) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData: this.props.Login.masterData },\r\n                    openModal: true, screenName: this.props.intl.formatMessage({ id: this.props.Login.inputParam.displayName }),\r\n                    operation:deleteParam.operation\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\r\n        }\r\n    }\r\n\r\n    reloadData = () => {\r\n        const inputParam = {\r\n            inputData: { \"userinfo\": this.props.Login.userInfo },\r\n            classUrl: this.props.Login.inputParam.classUrl,\r\n            methodUrl: this.props.Login.inputParam.methodUrl,\r\n            displayName: this.props.Login.inputParam.displayName,\r\n            userInfo: this.props.Login.userInfo\r\n        };\r\n\r\n        this.props.callService(inputParam);\r\n    }\r\n\r\n    onSaveClick = (saveType, formRef) => {\r\n       \r\n            let inputData = [];\r\n            inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n            let dataState = undefined;\r\n            let selectedId = null;\r\n            let fieldList = getFieldSpecification().get(this.props.Login.inputParam.methodUrl) || [];\r\n            let selectedRecordPrimarykey = fieldList[0].dataField;\r\n\r\n                dataState=this.state.dataState\r\n                inputData[this.props.Login.inputParam.methodUrl.toLowerCase()] = {\"nsitecode\": this.props.Login.userInfo.nmastersitecode };\r\n                this.extractedColumnList.map(item => {\r\n                    let fieldName = item.dataField;\r\n                    if (item.isJsonField === true) {\r\n                        return inputData[this.props.Login.inputParam.methodUrl.toLowerCase()][item.jsonObjectName] = {...inputData[this.props.Login.inputParam.methodUrl.toLowerCase()][item.jsonObjectName], [fieldName]:this.state.selectedRecord[fieldName] ? this.state.selectedRecord[fieldName] : \"\" }\r\n                      }\r\n                      else {\r\n                        if(item.controlType === \"selectbox\"){\r\n                            inputData[this.props.Login.inputParam.methodUrl.toLowerCase()][fieldName] = this.state.selectedRecord[fieldName] ? this.state.selectedRecord[fieldName].label ? this.state.selectedRecord[fieldName].label : \"\" : -1;\r\n                            inputData[this.props.Login.inputParam.methodUrl.toLowerCase()][item.foreignDataField] = this.state.selectedRecord[fieldName] ? this.state.selectedRecord[fieldName].value ? this.state.selectedRecord[fieldName].value : \"\" : -1;\r\n                            return inputData;\r\n                        }\r\n                        else if(item.controlType === \"datepicker\"){\r\n                            inputData[this.props.Login.inputParam.methodUrl.toLowerCase()][item.dateField] = formatInputDate(this.state.selectedRecord[fieldName] ? this.state.selectedRecord[fieldName] : \"\", false);\r\n                        }\r\n                        else if(item.controlType === \"checkbox\"){\r\n                            inputData[this.props.Login.inputParam.methodUrl.toLowerCase()][item.controlName] = this.state.selectedRecord[item.controlName] ? this.state.selectedRecord[item.controlName] : transactionStatus.NO;\r\n                        }\r\n                        else{\r\n                            inputData[this.props.Login.inputParam.methodUrl.toLowerCase()][fieldName] = this.state.selectedRecord[fieldName] ? this.state.selectedRecord[fieldName] : \"\";\r\n                        }\r\n                        inputData[this.props.Login.inputParam.methodUrl.toLowerCase()][selectedRecordPrimarykey] = this.props.Login.selectedId;\r\n                        return inputData;\r\n                      }                  })\r\n                      if(this.props.Login.operation == \"update\"){\r\n                        selectedId = this.props.Login.selectedId; \r\n                      }              \r\n\r\n            const inputParam = {\r\n                classUrl: this.props.Login.inputParam.classUrl,\r\n                methodUrl: this.props.Login.inputParam.methodUrl,\r\n                displayName: this.props.Login.inputParam.displayName,\r\n                inputData: inputData, selectedId,\r\n                operation: this.props.Login.operation, saveType, formRef,dataState\r\n            }\r\n\r\n            if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        loadEsign: true, screenData: { inputParam, masterData: this.props.Login.masterData },\r\n                        openModal: true, screenName: this.props.intl.formatMessage({ id: this.props.Login.inputParam.displayName }),\r\n                        operation: this.props.Login.operation\r\n                    }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n            else {\r\n               this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\r\n            }\r\n       \r\n    }\r\n    validateEsign = () => {\r\n        const inputParam = {\r\n            inputData: {\r\n                \"userinfo\": {\r\n                    ...this.props.Login.userInfo,\r\n                    sreason: this.state.selectedRecord[\"esigncomments\"],\r\n                    nreasoncode:this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].value,\r\n                    spredefinedreason:this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].label,\r\n               \r\n                },\r\n                password: this.state.selectedRecord[\"esignpassword\"]\r\n            },\r\n            screenData: this.props.Login.screenData\r\n        }\r\n        this.props.validateEsignCredential(inputParam, \"openModal\");\r\n    }\r\n\r\n}\r\nexport default connect(mapStateToProps, {\r\n    callService, crudMaster, updateStore, validateEsignCredential,\r\n    fetchRecordCombo, onComboLoad})(injectIntl(Type3Component));"]},"metadata":{},"sourceType":"module"}