{"ast":null,"code":"var _jsxFileName = \"E:\\\\WorkingFolder\\\\React_Postgres\\\\ALPD\\\\SOURCE-512\\\\QuaLISWeb\\\\src\\\\components\\\\type3component\\\\Type3Component.jsx\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { injectIntl } from 'react-intl';\nimport { Row, Col } from 'react-bootstrap';\nimport { toast } from 'react-toastify';\nimport { process } from '@progress/kendo-data-query';\nimport DataGrid from '../../components/data-grid/data-grid.component';\nimport Esign from '../../pages/audittrail/Esign';\nimport SlideOutModal from '../slide-out-modal/SlideOutModal';\nimport { getFieldSpecification } from './Type3FieldSpecificationList';\nimport AddType3Component from './AddType3Component';\nimport { callService, crudMaster, updateStore, validateEsignCredential, fetchRecordCombo, onComboLoad, onServiceLoad, syncAction } from '../../actions';\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\nimport { showEsign, getControlMap, extractFieldHeader, formatInputDate, validateEmail } from '../CommonScript';\nimport { ListWrapper } from '../client-group.styles';\nimport { transactionStatus, designComponents, formCode } from '../Enumeration';\nimport ConfirmMessage from \"../../components/confirm-alert/confirm-message.component\";\n\nconst mapStateToProps = state => {\n  return {\n    Login: state.Login\n  };\n};\n\nclass Type3Component extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.dataStateChange = event => {\n      this.setState({\n        dataResult: process(this.state.data ? this.state.data : [], event.dataState),\n        dataState: event.dataState\n      });\n    };\n\n    this.openModal = ncontrolCode => {\n      let comboColumnField = [];\n      this.extractedColumnList.map(item => {\n        if (item.ndesigncomponentcode === designComponents.COMBOBOX) {\n          comboColumnField.push(item);\n        } else if (item.ndesigncomponentcode === designComponents.CHECKBOX) {\n          comboColumnField.push(item);\n        }\n      });\n      this.props.onComboLoad(\"create\", this.props.Login.userInfo, this.props.Login.inputParam, ncontrolCode, comboColumnField, this.props.Login.integrationSettings);\n    };\n\n    this.closeModal = () => {\n      let loadEsign = this.props.Login.loadEsign;\n      let openModal = this.props.Login.openModal;\n      let selectedRecord = this.props.Login.selectedRecord;\n      let selectedId = this.props.Login.selectedId;\n\n      if (this.props.Login.loadEsign) {\n        if (this.props.Login.operation === \"delete\" || this.props.Login.operation == \"sync\" || this.props.Login.operation === \"default\") {\n          loadEsign = false;\n          openModal = false;\n          selectedRecord = {};\n        } else {\n          loadEsign = false;\n          selectedRecord['esignpassword'] = \"\";\n          selectedRecord['esigncomments'] = \"\";\n          selectedRecord['esignreason'] = \"\";\n        }\n      } else {\n        openModal = false;\n        selectedRecord = {};\n        selectedId = null;\n      }\n\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          openModal,\n          loadEsign,\n          selectedRecord,\n          //selectedId:null \n          selectedId\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.custombuttonclick = (event, component) => {\n      event.preventDefault();\n      event.stopPropagation();\n      const inputparam = {\n        component,\n        userinfo: this.props.Login.userInfo,\n        selectedRecord: this.state.selectedRecord\n      };\n      this.props.getDynamicFilter(inputparam);\n    };\n\n    this.onInputOnChange = (event, item) => {\n      const selectedRecord = this.state.selectedRecord || {};\n      let value = event.target.value;\n\n      if (item && item.zeroNotAllowed && item.zeroNotAllowed && value === '0') {\n        value = \"\";\n      }\n\n      if (event.target.type === 'checkbox') {\n        selectedRecord[event.target.name] = event.target.checked === true ? 3 : 4;\n      } else {\n        if (item && item.isSynonymNeed) {\n          // selectedRecord[event.target.name] = selectedRecord[item.ssynonymname] = event.target.value;\n          selectedRecord[event.target.name] = selectedRecord[item.ssynonymname] = value;\n        } else {\n          // selectedRecord[event.target.name] = event.target.value;\n          selectedRecord[event.target.name] = value;\n        }\n      }\n\n      if (event.target.type === 'textbox') {\n        selectedRecord[item.existinglength] = true;\n      }\n\n      if (item && item.readOnlyChild) {\n        // selectedRecord[item.readOnlyChild] = event.target.value;\n        selectedRecord[item.readOnlyChild] = value;\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onComboChange = (comboData, fieldName, comboItem) => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (comboData !== null) {\n        if (comboItem.foreignDataField) {\n          selectedRecord[comboItem.foreignDataField] = comboData.value;\n        }\n      }\n\n      selectedRecord[fieldName] = comboData;\n\n      if (comboItem.readOnlyChild) {\n        selectedRecord[comboItem.readOnlyChild] = comboData.item[comboItem.readOnlyParentData];\n      }\n\n      if (comboItem.onChangeUrl != undefined) {\n        const dataList = { ...this.props.Login.dataList\n        }; // let inputData={\n        //     primarykeyvalue: parseInt(comboData.value),\n        // }\n\n        let inputData = {\n          dataList,\n          selectedRecord\n        };\n        let comboColumnField = [];\n        let primarykeyvalue = {};\n        primarykeyvalue[comboItem.tableDataField] = comboData.value;\n        this.extractedColumnList.map(item => {\n          if (item.onChangeUrl != undefined) {\n            if (item.ndesigncomponentcode === designComponents.COMBOBOX) {\n              if (item.tableDataField === comboItem.tableDataField) {\n                comboColumnField.push(item);\n              }\n            }\n          }\n        });\n        this.props.onServiceLoad(this.props.Login.userInfo, this.props.Login.inputParam, this.props.Login.ncontrolCode, comboColumnField, primarykeyvalue, inputData);\n      } else {\n        this.setState({\n          selectedRecord\n        });\n      }\n    };\n\n    this.handleDateChange = (dateName, dateValue, item) => {\n      const {\n        selectedRecord\n      } = this.state;\n      selectedRecord[dateName] = dateValue;\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onNumericInputOnChange = (value, name, item) => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (item.zeroNotAllowed && item.zeroNotAllowed && value === 0) {\n        value = \"\";\n      }\n\n      if (item.child) {\n        if (item.min >= value && value !== 0 || item.max >= value && value !== 0) {\n          selectedRecord.ncodelength = value;\n        }\n\n        selectedRecord[item.childdatafield] && delete selectedRecord[item.childdatafield];\n      } else if (item && item.maxValue) {\n        //added by vignesh for Sample Storage Structure row column max value\n        if (this.props.Login.settings[39] && parseInt(this.props.Login.settings[39]) >= value) {\n          selectedRecord[name] = value;\n        }\n      } else {\n        selectedRecord[name] = value;\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.toggleSwitch = (switchParam, item, event) => {\n      let dataItem = { ...switchParam.selectedRecord\n      };\n      let selectedId = this.props.Login.selectedId;\n\n      if (event.target.type === 'checkbox') {\n        dataItem[item.switchFieldName] = event.target.checked === true ? 3 : 4;\n      }\n\n      const inputParam = {\n        classUrl: this.props.Login.inputParam.classUrl,\n        methodUrl: this.props.Login.inputParam.methodUrl,\n        displayName: this.props.Login.inputParam.displayName,\n        inputData: {\n          [this.props.Login.inputParam.methodUrl.toLowerCase()]: dataItem,\n          \"userinfo\": this.props.Login.userInfo\n        },\n        operation: switchParam.operation,\n        dataState: this.state.dataState,\n        selectedId,\n        selectedRecord: { ...this.state.selectedRecord\n        }\n      };\n      const masterData = switchParam.masterData;\n      const esignNeeded = showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, switchParam.ncontrolCode);\n\n      if (esignNeeded) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              dataItem\n            },\n            openModal: true,\n            screenName: this.props.intl.formatMessage({\n              id: this.props.Login.inputParam.displayName\n            }),\n            operation: switchParam.operation,\n            masterData\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, masterData, \"openModal\");\n      }\n    };\n\n    this.deleteRecord = deleteParam => {\n      const inputParam = {\n        classUrl: this.props.Login.inputParam.classUrl,\n        methodUrl: this.props.Login.inputParam.methodUrl,\n        displayName: this.props.Login.inputParam.displayName,\n        inputData: {\n          [this.props.Login.inputParam.methodUrl.toLowerCase()]: deleteParam.selectedRecord,\n          \"userinfo\": this.props.Login.userInfo\n        },\n        operation: deleteParam.operation,\n        dataState: this.state.dataState,\n        selectedRecord: { ...this.state.selectedRecord\n        }\n      };\n      const esignNeeded = showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, deleteParam.ncontrolCode);\n\n      if (esignNeeded) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData: this.props.Login.masterData\n            },\n            openModal: true,\n            screenName: this.props.intl.formatMessage({\n              id: this.props.Login.inputParam.displayName\n            }),\n            operation: deleteParam.operation\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\n      }\n    };\n\n    this.reloadData = () => {\n      const inputParam = {\n        inputData: {\n          \"userinfo\": this.props.Login.userInfo\n        },\n        classUrl: this.props.Login.inputParam.classUrl,\n        methodUrl: this.props.Login.inputParam.methodUrl,\n        displayName: this.props.Login.inputParam.displayName,\n        userInfo: this.props.Login.userInfo\n      };\n      this.props.callService(inputParam);\n    };\n\n    this.syncData = syncId => {\n      let classUrl;\n      let methodUrl;\n\n      if (this.props.Login.inputParam.displayName === \"Fusion Site\") {\n        classUrl = \"fusionsite\";\n        methodUrl = \"FusionSite\";\n      } else if (this.props.Login.inputParam.displayName === \"Fusion Plant\") {\n        classUrl = \"fusionplant\";\n        methodUrl = \"FusionPlant\";\n      } else if (this.props.Login.inputParam.displayName === \"Fusion Users\") {\n        classUrl = \"fusionusers\";\n        methodUrl = \"FusionUsers\";\n      } else if (this.props.Login.inputParam.displayName === \"Fusion Plant User\") {\n        classUrl = \"fusionplantuser\";\n        methodUrl = \"FusionPlantUser\";\n      }\n\n      let inputParam = {\n        inputData: {\n          \"userinfo\": this.props.Login.userInfo\n        },\n        classUrl: classUrl,\n        methodUrl: methodUrl,\n        operation: \"sync\",\n        displayName: this.props.Login.inputParam.displayName,\n        userInfo: this.props.Login.userInfo\n      };\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, syncId)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData: { ...this.props.Login.masterData\n              }\n            },\n            openModal: true,\n            screenName: this.props.intl.formatMessage({\n              id: this.props.Login.inputParam.displayName\n            }),\n            operation: \"sync\"\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.syncAction(inputParam);\n      }\n    };\n\n    this.onSaveClick = (saveType, formRef) => {\n      let result = true;\n      let emailFieldName = [];\n      let inputData = [];\n      inputData[\"userinfo\"] = this.props.Login.userInfo;\n      let dataState = undefined;\n      let selectedId = null;\n      let fieldList = getFieldSpecification().get(this.props.Login.inputParam.methodUrl) || [];\n      let selectedRecordPrimarykey = fieldList[0].dataField;\n      inputData[this.props.Login.inputParam.methodUrl.toLowerCase()] = {\n        \"nsitecode\": this.props.Login.userInfo.nmastersitecode\n      };\n      this.extractedColumnList.map(item => {\n        let fieldName = item.dataField;\n\n        if (item.isEmail === true) {\n          let validateEmailValue = this.state.selectedRecord[item.dataField] ? validateEmail(this.state.selectedRecord[item.dataField]) : true;\n\n          if (validateEmailValue === false) {\n            result = false;\n            emailFieldName.push(item.idsName);\n          }\n        }\n\n        if (item.isJsonField === true) {\n          return inputData[this.props.Login.inputParam.methodUrl.toLowerCase()][item.jsonObjectName] = { ...inputData[this.props.Login.inputParam.methodUrl.toLowerCase()][item.jsonObjectName],\n            [fieldName]: this.state.selectedRecord[fieldName] ? this.state.selectedRecord[fieldName] : \"\"\n          };\n        } else {\n          if (item.controlType === \"selectbox\") {\n            inputData[this.props.Login.inputParam.methodUrl.toLowerCase()][fieldName] = this.state.selectedRecord[fieldName] ? this.state.selectedRecord[fieldName].label ? this.state.selectedRecord[fieldName].label : \"\" : -1;\n            inputData[this.props.Login.inputParam.methodUrl.toLowerCase()][item.foreignDataField] = this.state.selectedRecord[fieldName] ? this.state.selectedRecord[fieldName].value ? this.state.selectedRecord[fieldName].value : -1 : -1;\n\n            if (this.props.Login.inputParam.methodUrl === \"LimsElnUsermapping\" && this.state.selectedRecord.username && this.state.selectedRecord.username.item && this.state.selectedRecord.username.item.multiusergroupcode) {\n              this.state.selectedRecord.username.item.multiusergroupcode.forEach(dataItem => {\n                if (dataItem.defaultusergroup !== \"undefined\") {\n                  inputData[this.props.Login.inputParam.methodUrl.toLowerCase()][\"nelnusergroupcode\"] = dataItem.lsusergroup.usergroupcode;\n                }\n              });\n            } //return inputData;\n\n          } else if (item.controlType === \"datepicker\") {\n            inputData[this.props.Login.inputParam.methodUrl.toLowerCase()][item.dateField] = formatInputDate(this.state.selectedRecord[fieldName] ? this.state.selectedRecord[fieldName] : \"\", false);\n          } else if (item.controlType === \"checkbox\") {\n            inputData[this.props.Login.inputParam.methodUrl.toLowerCase()][item.controlName] = this.state.selectedRecord[item.controlName] ? this.state.selectedRecord[item.controlName] : transactionStatus.NO;\n          } else if (item.controlType === \"numericinput\") {\n            inputData[this.props.Login.inputParam.methodUrl.toLowerCase()][fieldName] = this.state.selectedRecord[fieldName] ? this.state.selectedRecord[fieldName] : 0;\n          } else if (item.controlType === \"multiselect\") {\n            inputData[this.props.Login.inputParam.methodUrl.toLowerCase()][item.valueKey] = this.state.selectedRecord[fieldName].map(item => item.value).join(\", \");\n            inputData[this.props.Login.inputParam.methodUrl.toLowerCase()][item.valueName] = this.state.selectedRecord[fieldName].map(item => item.label).join(\", \");\n          } else {\n            inputData[this.props.Login.inputParam.methodUrl.toLowerCase()][fieldName] = this.state.selectedRecord[fieldName] ? this.state.selectedRecord[fieldName] : \"\";\n          }\n\n          inputData[this.props.Login.inputParam.methodUrl.toLowerCase()][selectedRecordPrimarykey] = this.props.Login.selectedId;\n          return inputData;\n        }\n      });\n\n      if (this.props.Login.operation == \"update\") {\n        dataState = this.state.dataState;\n        selectedId = this.props.Login.selectedId;\n      }\n\n      const inputParam = {\n        classUrl: this.props.Login.inputParam.classUrl,\n        methodUrl: this.props.Login.inputParam.methodUrl,\n        displayName: this.props.Login.inputParam.displayName,\n        inputData: inputData,\n        selectedId,\n        selectedRecord: { ...this.state.selectedRecord\n        },\n        operation: this.props.Login.operation,\n        saveType,\n        formRef,\n        dataState\n      };\n\n      if (result) {\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              loadEsign: true,\n              screenData: {\n                inputParam,\n                masterData: { ...this.props.Login.masterData\n                }\n              },\n              openModal: true,\n              screenName: this.props.intl.formatMessage({\n                id: this.props.Login.inputParam.displayName\n              }),\n              operation: this.props.Login.operation\n            }\n          };\n          this.props.updateStore(updateInfo);\n        } else {\n          // this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\n          this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\", '', this.confirmMessage);\n        }\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_ENTERVALIDEMAILOF\"\n        }) + this.props.intl.formatMessage({\n          id: emailFieldName[0]\n        }));\n      }\n    };\n\n    this.ConfirmDelete = (operation, deleteId) => {\n      this.confirmMessage.confirm(\"deleteMessage\", this.props.intl.formatMessage({\n        id: \"IDS_DELETE\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_DEFAULTCONFIRMMSG\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_OK\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_CANCEL\"\n      }), () => this.DeleteWorklist(operation, deleteId, operation.screenName ? operation.screenName : \"IDS_WORKLIST\"));\n    };\n\n    this.validateEsign = () => {\n      const inputParam = {\n        inputData: {\n          \"userinfo\": { ...this.props.Login.userInfo,\n            sreason: this.state.selectedRecord[\"esigncomments\"],\n            nreasoncode: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].value,\n            spredefinedreason: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].label\n          },\n          password: this.state.selectedRecord[\"esignpassword\"]\n        },\n        screenData: this.props.Login.screenData // screenStateData: {selected:{...this.state.selectedRecord}, masterData:{ ...this.props.Login.masterData}},\n\n      };\n      this.props.validateEsignCredential(inputParam, \"openModal\", this.confirmMessage);\n    };\n\n    this.formRef = React.createRef();\n    this.extractedColumnList = [];\n    this.extractedColumnList1 = [];\n    this.extractedDataGridColumnList = []; // ALPD-3660 VISHAKH\n\n    this.fieldList = [];\n    const _dataState = {\n      skip: 0,\n      take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n    };\n    this.state = {\n      data: [],\n      masterStatus: \"\",\n      error: \"\",\n      selectedRecord: {},\n      dataResult: [],\n      dataState: _dataState,\n      userRoleControlRights: [],\n      controlMap: new Map()\n    };\n    this.confirmMessage = new ConfirmMessage();\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\n      toast.warn(props.Login.masterStatus);\n      props.Login.masterStatus = \"\";\n    }\n\n    if (props.Login.error !== state.error) {\n      toast.error(props.Login.error);\n      props.Login.error = \"\";\n    }\n\n    return null;\n  } // fnextractedColumnList  =()=>\n  // {\n  //    // return this.extractedColumnList = this.extractedColumnList1 || [];\n  //     this.extractedColumnList1 = this.extractedColumnList;\n  //     if(item.child){\n  //         this.extractedColumnList.map((values, index)=>{\n  //             if( values.dataField == item.childdatafield )\n  //                 {\n  //                     //this.extractedColumnList[index]['fieldLength']= value.toString();\n  //                     this.extractedColumnList[index]['fieldLength']= value;\n  //                 }\n  //         //console.log(value, index);\n  //     })\n  //         }\n  // }\n\n\n  render() {\n    let primaryKeyField = \"\";\n    let fieldList = {};\n    let inputData = {\n      settings: this.props.Login.settings,\n      userInfo: this.props.Login.userInfo\n    };\n    const addId = this.props.Login.inputParam && this.state.controlMap.has(\"Add\".concat(this.props.Login.inputParam.methodUrl)) && this.state.controlMap.get(\"Add\".concat(this.props.Login.inputParam.methodUrl)).ncontrolcode;\n\n    if (this.props.Login.inputParam !== undefined) {\n      if (this.props.Login.inputParam.classUrl === \"limselnusermapping\") {\n        fieldList = getFieldSpecification(inputData).get(this.props.Login.inputParam.methodUrl) || []; // fieldList.forEach(item=>item.dataField === \"username\" ? \n        //     fieldList.push(\"methodUrl:\"+this.props.Login.integrationSettings[0].smethodname) :\"\"\n        // );  \n\n        for (let index = 0; index < fieldList.length; index++) {\n          if (fieldList[index].elnget) {\n            let smethodname = \"methodUrl\";\n            let fieldListNew = { ...fieldList[index],\n              methodUrl: this.props.Login.integrationSettings[0].smethodname,\n              classUrl: this.props.Login.integrationSettings[0].sclassurlname\n            }; // fieldList.slice(index)\n            //fieldList.push((fieldList[index]).toString())\n            //this.state.selectedRole.push((selectedRecord[index]).toString());\n\n            fieldList.splice(index, 1, fieldListNew);\n          }\n        }\n\n        this.extractedColumnList = extractFieldHeader(Object.values(fieldList));\n        primaryKeyField = Object.keys(fieldList).length > 0 ? fieldList[0].dataField : \"\";\n      } else if (this.props.Login.inputParam.classUrl === \"limselnsitemapping\") {\n        fieldList = getFieldSpecification(inputData).get(this.props.Login.inputParam.methodUrl) || []; // fieldList.forEach(item=>item.dataField === \"username\" ? \n        //     fieldList.push(\"methodUrl:\"+this.props.Login.integrationSettings[0].smethodname) :\"\"\n        // );  \n\n        for (let index = 0; index < fieldList.length; index++) {\n          if (fieldList[index].elnget) {\n            let smethodname = \"methodUrl\";\n            let fieldListNew = { ...fieldList[index],\n              methodUrl: this.props.Login.integrationSettings[1].smethodname,\n              classUrl: this.props.Login.integrationSettings[1].sclassurlname\n            }; // fieldList.slice(index)\n            //fieldList.push((fieldList[index]).toString())\n            //this.state.selectedRole.push((selectedRecord[index]).toString());\n\n            fieldList.splice(index, 1, fieldListNew);\n          }\n        }\n\n        this.extractedColumnList = extractFieldHeader(Object.values(fieldList));\n        primaryKeyField = Object.keys(fieldList).length > 0 ? fieldList[0].dataField : \"\";\n      } else {\n        fieldList = getFieldSpecification(inputData).get(this.props.Login.inputParam.methodUrl) || [];\n        this.extractedColumnList = extractFieldHeader(Object.values(fieldList)); //this.expandedField= expandedField(Object.values(fieldList));\n\n        primaryKeyField = Object.keys(fieldList).length > 0 ? fieldList[0].dataField : \"\";\n      } // START ALPD-3660 VISHAKH\n\n\n      let dataGridList = [...this.extractedColumnList];\n      this.extractedDataGridColumnList = dataGridList.filter(item => !(\"dataGridColumnHide\" in item && item[\"dataGridColumnHide\"] === true)); // END ALPD-3660 VISHAKH\n    }\n\n    const editId = this.props.Login.inputParam && this.state.controlMap.has(\"Edit\".concat(this.props.Login.inputParam.methodUrl)) && this.state.controlMap.get(\"Edit\".concat(this.props.Login.inputParam.methodUrl)).ncontrolcode;\n    const editParam = {\n      screenName: this.props.Login.inputParam && this.props.Login.inputParam.displayName && this.props.intl.formatMessage({\n        id: this.props.Login.inputParam.displayName\n      }),\n      operation: \"update\",\n      primaryKeyField,\n      inputParam: this.props.Login.inputParam,\n      integrationSettings: this.props.Login.integrationSettings,\n      userInfo: this.props.Login.userInfo,\n      ncontrolCode: editId,\n      masterData: this.props.Login.masterData,\n      extractedColumnList: this.extractedColumnList\n    };\n    const deleteParam = {\n      operation: \"delete\"\n    };\n    const switchParam = {\n      operation: \"default\",\n      masterData: this.props.Login.masterData\n    };\n    const mandatoryFields = [];\n    this.extractedColumnList.forEach(item => item.mandatory === true ? mandatoryFields.push(item) : \"\");\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(ListWrapper, {\n      className: \"client-list-content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 25\n      }\n    }, this.state.data ? /*#__PURE__*/React.createElement(DataGrid, {\n      primaryKeyField: primaryKeyField,\n      data: this.state.data,\n      dataResult: this.state.dataResult,\n      dataState: this.state.dataState,\n      dataStateChange: this.dataStateChange,\n      extractedColumnList: this.extractedDataGridColumnList // ALPD-3660 VISHAKH\n      ,\n      detailedFieldList: this.expandedField || [],\n      expandField: \"expanded\",\n      controlMap: this.state.controlMap,\n      userRoleControlRights: this.state.userRoleControlRights,\n      inputParam: this.props.Login.inputParam,\n      userInfo: this.props.Login.userInfo,\n      fetchRecord: this.props.fetchRecordCombo,\n      editParam: editParam,\n      deleteRecord: this.deleteRecord,\n      deleteParam: deleteParam,\n      reloadData: this.reloadData,\n      syncData: this.syncData,\n      addRecord: () => this.openModal(addId),\n      pageable: true,\n      scrollable: 'scrollable' // isComponent={true}\n      ,\n      gridHeight: '580px',\n      isActionRequired: true,\n      isToolBarRequired: true,\n      selectedId: this.props.Login.selectedId,\n      onToggleChange: this.toggleSwitch,\n      switchParam: switchParam,\n      groupable: this.props.Login.displayName === 'Material Accounting Plant Group' ? true : false,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 33\n      }\n    }) : \"\"))), this.props.Login.openModal ? /*#__PURE__*/React.createElement(SlideOutModal, {\n      show: this.props.Login.openModal,\n      closeModal: this.closeModal,\n      operation: this.props.Login.operation,\n      inputParam: this.props.Login.inputParam,\n      screenName: this.props.Login.screenName,\n      onSaveClick: this.onSaveClick,\n      esign: this.props.Login.loadEsign,\n      validateEsign: this.validateEsign,\n      masterStatus: this.props.Login.masterStatus,\n      updateStore: this.props.updateStore,\n      selectedRecord: this.state.selectedRecord || {},\n      mandatoryFields: mandatoryFields // addComponentParam={{}}                   \n      // addComponent={this.addComponent}\n      ,\n      addComponent: this.props.Login.loadEsign ? /*#__PURE__*/React.createElement(Esign, {\n        operation: this.props.Login.operation,\n        onInputOnChange: this.onInputOnChange,\n        inputParam: this.props.Login.inputParam,\n        selectedRecord: this.state.selectedRecord || {},\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 276,\n          columnNumber: 29\n        }\n      }) : /*#__PURE__*/React.createElement(AddType3Component, {\n        selectedRecord: this.state.selectedRecord || {},\n        onInputOnChange: this.onInputOnChange,\n        extractedColumnList: this.extractedColumnList,\n        onNumericInputOnChange: this.onNumericInputOnChange,\n        onComboChange: this.onComboChange,\n        handleDateChange: this.handleDateChange,\n        userInfo: this.props.Login.userInfo,\n        dataList: this.props.Login.dataList,\n        operation: this.props.Login.operation,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 281,\n          columnNumber: 31\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 261,\n        columnNumber: 21\n      }\n    }) : \"\");\n  }\n\n  componentDidUpdate(previousProps) {\n    if (this.props.Login.masterData !== previousProps.Login.masterData) {\n      if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\n        const userRoleControlRights = [];\n\n        if (this.props.Login.userRoleControlRights) {\n          this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item => userRoleControlRights.push(item.ncontrolcode));\n        }\n\n        const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode);\n        this.setState({\n          userRoleControlRights,\n          controlMap,\n          data: this.props.Login.masterData,\n          dataResult: process(this.props.Login.masterData ? this.props.Login.masterData : [], this.state.dataState)\n        });\n      } else {\n        let {\n          dataState\n        } = this.state;\n\n        if (this.props.Login.dataState === undefined) {\n          dataState = {\n            skip: 0,\n            take: this.state.dataState.take\n          };\n        }\n\n        if (this.state.dataResult.data) {\n          if (this.state.dataResult.data.length === 1) {\n            let skipcount = this.state.dataState.skip > 0 ? this.state.dataState.skip - this.state.dataState.take : this.state.dataState.skip;\n            dataState = {\n              skip: skipcount,\n              take: this.state.dataState.take\n            };\n          }\n        }\n\n        this.setState({\n          data: this.props.Login.masterData,\n          selectedRecord: this.props.Login.selectedRecord,\n          dataResult: process(this.props.Login.masterData ? this.props.Login.masterData : [], dataState),\n          dataState\n        });\n      }\n    }\n\n    if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\n      //Get selected value when clicking edit button\n      if (this.props.Login.selectedRecord) {\n        this.setState({\n          selectedRecord: this.props.Login.selectedRecord\n        });\n      }\n    }\n  }\n\n}\n\nexport default connect(mapStateToProps, {\n  callService,\n  crudMaster,\n  updateStore,\n  validateEsignCredential,\n  syncAction,\n  fetchRecordCombo,\n  onComboLoad,\n  onServiceLoad\n})(injectIntl(Type3Component));","map":{"version":3,"sources":["E:/WorkingFolder/React_Postgres/ALPD/SOURCE-512/QuaLISWeb/src/components/type3component/Type3Component.jsx"],"names":["React","connect","injectIntl","Row","Col","toast","process","DataGrid","Esign","SlideOutModal","getFieldSpecification","AddType3Component","callService","crudMaster","updateStore","validateEsignCredential","fetchRecordCombo","onComboLoad","onServiceLoad","syncAction","DEFAULT_RETURN","showEsign","getControlMap","extractFieldHeader","formatInputDate","validateEmail","ListWrapper","transactionStatus","designComponents","formCode","ConfirmMessage","mapStateToProps","state","Login","Type3Component","Component","constructor","props","dataStateChange","event","setState","dataResult","data","dataState","openModal","ncontrolCode","comboColumnField","extractedColumnList","map","item","ndesigncomponentcode","COMBOBOX","push","CHECKBOX","userInfo","inputParam","integrationSettings","closeModal","loadEsign","selectedRecord","selectedId","operation","updateInfo","typeName","custombuttonclick","component","preventDefault","stopPropagation","inputparam","userinfo","getDynamicFilter","onInputOnChange","value","target","zeroNotAllowed","type","name","checked","isSynonymNeed","ssynonymname","existinglength","readOnlyChild","onComboChange","comboData","fieldName","comboItem","foreignDataField","readOnlyParentData","onChangeUrl","undefined","dataList","inputData","primarykeyvalue","tableDataField","handleDateChange","dateName","dateValue","onNumericInputOnChange","child","min","max","ncodelength","childdatafield","maxValue","settings","parseInt","toggleSwitch","switchParam","dataItem","switchFieldName","classUrl","methodUrl","displayName","toLowerCase","masterData","esignNeeded","userRoleControlRights","nformcode","screenData","screenName","intl","formatMessage","id","deleteRecord","deleteParam","reloadData","syncData","syncId","onSaveClick","saveType","formRef","result","emailFieldName","fieldList","get","selectedRecordPrimarykey","dataField","nmastersitecode","isEmail","validateEmailValue","idsName","isJsonField","jsonObjectName","controlType","label","username","multiusergroupcode","forEach","defaultusergroup","lsusergroup","usergroupcode","dateField","controlName","NO","valueKey","join","valueName","confirmMessage","warn","ConfirmDelete","deleteId","confirm","DeleteWorklist","validateEsign","sreason","nreasoncode","spredefinedreason","password","createRef","extractedColumnList1","extractedDataGridColumnList","skip","take","masterStatus","error","controlMap","Map","getDerivedStateFromProps","render","primaryKeyField","addId","has","concat","ncontrolcode","index","length","elnget","smethodname","fieldListNew","sclassurlname","splice","Object","values","keys","dataGridList","filter","editId","editParam","mandatoryFields","mandatory","expandedField","componentDidUpdate","previousProps","skipcount"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport {  injectIntl } from 'react-intl';\r\nimport { Row, Col } from 'react-bootstrap';\r\nimport { toast } from 'react-toastify';\r\nimport { process } from '@progress/kendo-data-query';\r\nimport DataGrid from '../../components/data-grid/data-grid.component';\r\nimport Esign from '../../pages/audittrail/Esign';\r\nimport SlideOutModal from '../slide-out-modal/SlideOutModal';\r\nimport { getFieldSpecification } from './Type3FieldSpecificationList';\r\nimport AddType3Component from './AddType3Component';\r\nimport { callService, crudMaster, updateStore, validateEsignCredential, fetchRecordCombo, onComboLoad ,onServiceLoad,syncAction} from '../../actions';\r\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\r\nimport { showEsign, getControlMap, extractFieldHeader, formatInputDate, validateEmail } from '../CommonScript';\r\nimport { ListWrapper} from '../client-group.styles';\r\nimport { transactionStatus, designComponents, formCode } from '../Enumeration';\r\nimport ConfirmMessage from \"../../components/confirm-alert/confirm-message.component\";\r\nconst mapStateToProps = state => {\r\n    return ({ Login: state.Login })\r\n}\r\n\r\nclass Type3Component extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.formRef = React.createRef();\r\n        this.extractedColumnList = [];\r\n        this.extractedColumnList1 = [];\r\n        this.extractedDataGridColumnList = []; // ALPD-3660 VISHAKH\r\n        this.fieldList = [];\r\n\r\n        const dataState = {\r\n            skip: 0,\r\n            take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5,\r\n        };\r\n        this.state = {\r\n            data: [], masterStatus: \"\", error: \"\", selectedRecord: {},\r\n            dataResult: [],\r\n            dataState: dataState,\r\n            userRoleControlRights: [],\r\n            controlMap: new Map(),\r\n        };\r\n        this.confirmMessage = new ConfirmMessage();\r\n    }\r\n\r\n    dataStateChange = (event) => { \r\n        this.setState({\r\n            dataResult: process(this.state.data?this.state.data:[], event.dataState),\r\n            dataState: event.dataState\r\n        });\r\n    }\r\n\r\n    openModal = (ncontrolCode) => {\r\n\r\n        let comboColumnField = [];\r\n        this.extractedColumnList.map(item=>{\r\n        if(item.ndesigncomponentcode === designComponents.COMBOBOX){\r\n            comboColumnField.push(item);\r\n            }\r\n            else if(item.ndesigncomponentcode === designComponents.CHECKBOX ){\r\n                comboColumnField.push(item);\r\n            }\r\n        })\r\n        this.props.onComboLoad(\"create\",this.props.Login.userInfo,this.props.Login.inputParam,ncontrolCode, comboColumnField,this.props.Login.integrationSettings);\r\n    }\r\n\r\n    closeModal = () => {\r\n        let loadEsign = this.props.Login.loadEsign;\r\n        let openModal = this.props.Login.openModal;\r\n        let selectedRecord = this.props.Login.selectedRecord;\r\n        let selectedId = this.props.Login.selectedId;\r\n        if (this.props.Login.loadEsign) {\r\n            if (this.props.Login.operation === \"delete\"|| this.props.Login.operation==\"sync\" || this.props.Login.operation === \"default\") {\r\n                loadEsign = false;\r\n                openModal = false;\r\n                selectedRecord = {};\r\n            }\r\n            else {\r\n            \r\n                loadEsign = false;\r\n                selectedRecord['esignpassword'] = \"\"\r\n                selectedRecord['esigncomments'] = \"\"\r\n                selectedRecord['esignreason']=\"\"\r\n            }\r\n        }\r\n        else {\r\n            openModal = false;\r\n            selectedRecord = {};\r\n            selectedId=null;\r\n        }\r\n\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { openModal, loadEsign, selectedRecord,\r\n                 //selectedId:null \r\n                 selectedId}\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n\r\n    }\r\n   \r\n    static getDerivedStateFromProps(props, state) {\r\n\r\n        if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\r\n            toast.warn(props.Login.masterStatus);\r\n            props.Login.masterStatus = \"\";\r\n        }\r\n\r\n        if (props.Login.error !== state.error) {\r\n            toast.error(props.Login.error)\r\n            props.Login.error = \"\";\r\n        }\r\n        return null;\r\n    }\r\n\r\n    // fnextractedColumnList  =()=>\r\n    // {\r\n    //    // return this.extractedColumnList = this.extractedColumnList1 || [];\r\n\r\n    //     this.extractedColumnList1 = this.extractedColumnList;\r\n    //     if(item.child){\r\n    //         this.extractedColumnList.map((values, index)=>{\r\n    //             if( values.dataField == item.childdatafield )\r\n    //                 {\r\n    //                     //this.extractedColumnList[index]['fieldLength']= value.toString();\r\n    //                     this.extractedColumnList[index]['fieldLength']= value;\r\n    //                 }\r\n    //         //console.log(value, index);\r\n    //     })\r\n    //         }\r\n    // }\r\n\r\n    render() {\r\n        let primaryKeyField = \"\";\r\n        let fieldList = {};\r\n        let inputData={\r\n            settings:this.props.Login.settings,\r\n            userInfo:this.props.Login.userInfo\r\n        };\r\n        const addId = this.props.Login.inputParam && this.state.controlMap.has(\"Add\".concat(this.props.Login.inputParam.methodUrl))\r\n            && this.state.controlMap.get(\"Add\".concat(this.props.Login.inputParam.methodUrl)).ncontrolcode;\r\n\r\n        if (this.props.Login.inputParam !== undefined) {\r\n            \r\n            if(this.props.Login.inputParam.classUrl===\"limselnusermapping\")\r\n            {\r\n                fieldList = getFieldSpecification(inputData).get(this.props.Login.inputParam.methodUrl) || [];\r\n                // fieldList.forEach(item=>item.dataField === \"username\" ? \r\n                //     fieldList.push(\"methodUrl:\"+this.props.Login.integrationSettings[0].smethodname) :\"\"\r\n                // );  \r\n                for (let index = 0; index < fieldList.length; index++) {\r\n                    if (fieldList[index].elnget) {\r\n                        let smethodname=\"methodUrl\";\r\n                        let fieldListNew={...fieldList[index],methodUrl:this.props.Login.integrationSettings[0].smethodname,classUrl:this.props.Login.integrationSettings[0].sclassurlname};\r\n                       // fieldList.slice(index)\r\n                        //fieldList.push((fieldList[index]).toString())\r\n                        //this.state.selectedRole.push((selectedRecord[index]).toString());\r\n                        fieldList.splice(index,1,fieldListNew)\r\n                    }}\r\n                this.extractedColumnList = extractFieldHeader(Object.values(fieldList));\r\n                primaryKeyField = Object.keys(fieldList).length > 0 ? fieldList[0].dataField : \"\";\r\n            }\r\n\r\n           else if(this.props.Login.inputParam.classUrl===\"limselnsitemapping\")\r\n            {\r\n                fieldList = getFieldSpecification(inputData).get(this.props.Login.inputParam.methodUrl) || [];\r\n                // fieldList.forEach(item=>item.dataField === \"username\" ? \r\n                //     fieldList.push(\"methodUrl:\"+this.props.Login.integrationSettings[0].smethodname) :\"\"\r\n                // );  \r\n                for (let index = 0; index < fieldList.length; index++) {\r\n                    if (fieldList[index].elnget) {\r\n                        let smethodname=\"methodUrl\";\r\n                        let fieldListNew={...fieldList[index],methodUrl:this.props.Login.integrationSettings[1].smethodname,classUrl:this.props.Login.integrationSettings[1].sclassurlname};\r\n                       // fieldList.slice(index)\r\n                        //fieldList.push((fieldList[index]).toString())\r\n                        //this.state.selectedRole.push((selectedRecord[index]).toString());\r\n                        fieldList.splice(index,1,fieldListNew)\r\n                    }}\r\n                this.extractedColumnList = extractFieldHeader(Object.values(fieldList));\r\n                primaryKeyField = Object.keys(fieldList).length > 0 ? fieldList[0].dataField : \"\";\r\n            }\r\n            else{\r\n            fieldList = getFieldSpecification(inputData).get(this.props.Login.inputParam.methodUrl) || [];\r\n            this.extractedColumnList = extractFieldHeader(Object.values(fieldList));\r\n            //this.expandedField= expandedField(Object.values(fieldList));\r\n            primaryKeyField = Object.keys(fieldList).length > 0 ? fieldList[0].dataField : \"\";}\r\n            // START ALPD-3660 VISHAKH\r\n            let dataGridList = [...this.extractedColumnList];\r\n            this.extractedDataGridColumnList = dataGridList.filter(item => \r\n                !(\"dataGridColumnHide\" in item && item[\"dataGridColumnHide\"] === true)\r\n                );\r\n            // END ALPD-3660 VISHAKH\r\n        }\r\n\r\n        const editId = this.props.Login.inputParam && this.state.controlMap.has(\"Edit\".concat(this.props.Login.inputParam.methodUrl))\r\n               && this.state.controlMap.get(\"Edit\".concat(this.props.Login.inputParam.methodUrl)).ncontrolcode;\r\n    \r\n        const editParam = {\r\n            screenName:this.props.Login.inputParam && this.props.Login.inputParam.displayName && this.props.intl.formatMessage({ id: this.props.Login.inputParam.displayName }), \r\n            operation:\"update\",  primaryKeyField, \r\n            inputParam:this.props.Login.inputParam,   \r\n            integrationSettings:this.props.Login.integrationSettings,\r\n            userInfo:this.props.Login.userInfo, \r\n            ncontrolCode:editId,\r\n            masterData:this.props.Login.masterData,\r\n            extractedColumnList : this.extractedColumnList\r\n            };\r\n        const deleteParam ={operation:\"delete\"};\r\n        const switchParam ={operation:\"default\",masterData:this.props.Login.masterData};\r\n        const mandatoryFields=[];\r\n        this.extractedColumnList.forEach(item=>item.mandatory === true ? \r\n            mandatoryFields.push(item) :\"\"\r\n        );        \r\n\r\n        return(<>\r\n                <Row>\r\n                    <Col>\r\n                        <ListWrapper className=\"client-list-content\">\r\n                          \r\n\r\n                            {this.state.data ?\r\n                                <DataGrid\r\n                                    primaryKeyField={primaryKeyField}\r\n                                    data={this.state.data}\r\n                                    dataResult={this.state.dataResult}\r\n                                    dataState={this.state.dataState}\r\n                                    dataStateChange={this.dataStateChange}\r\n                                    extractedColumnList={this.extractedDataGridColumnList} // ALPD-3660 VISHAKH\r\n                                    detailedFieldList={this.expandedField||[]}\r\n                                    expandField=\"expanded\"\r\n                                    controlMap={this.state.controlMap}\r\n                                    userRoleControlRights={this.state.userRoleControlRights}\r\n                                    inputParam={this.props.Login.inputParam}\r\n                                    userInfo={this.props.Login.userInfo}\r\n                                    fetchRecord={this.props.fetchRecordCombo}\r\n                                    editParam={editParam}\r\n                                    deleteRecord={this.deleteRecord}\r\n                                    deleteParam={deleteParam}\r\n                                    reloadData={this.reloadData}\r\n                                    syncData = {this.syncData}\r\n                                    addRecord = {() => this.openModal(addId)}\r\n                                    pageable={true}\r\n                                    scrollable={'scrollable'}\r\n                                    // isComponent={true}\r\n                                    gridHeight = {'580px'}\r\n                                    isActionRequired={true}\r\n                                    isToolBarRequired={true}\r\n                                    selectedId={this.props.Login.selectedId}\r\n                                    onToggleChange={this.toggleSwitch}\r\n                                    switchParam={switchParam} \r\n                                    groupable={this.props.Login.displayName ==='Material Accounting Plant Group'?true:false}\r\n\r\n                                />\r\n                                : \"\"}\r\n                        </ListWrapper>\r\n                    </Col>\r\n                </Row>\r\n\r\n                {/* Below Condition Added to avoid unwanted rendering of SlideOut */}\r\n                {this.props.Login.openModal ? \r\n                    <SlideOutModal show={this.props.Login.openModal}\r\n                        closeModal={this.closeModal}\r\n                        operation={this.props.Login.operation}\r\n                        inputParam={this.props.Login.inputParam}\r\n                        screenName={this.props.Login.screenName}\r\n                        onSaveClick={this.onSaveClick}\r\n                        esign={this.props.Login.loadEsign}\r\n                        validateEsign={this.validateEsign}\r\n                        masterStatus={this.props.Login.masterStatus}\r\n                        updateStore={this.props.updateStore}\r\n                        selectedRecord={this.state.selectedRecord || {}}\r\n                        mandatoryFields={mandatoryFields}\r\n                        // addComponentParam={{}}                   \r\n                        // addComponent={this.addComponent}\r\n                        addComponent={this.props.Login.loadEsign ?\r\n                            <Esign operation={this.props.Login.operation}\r\n                                onInputOnChange={this.onInputOnChange}\r\n                                inputParam={this.props.Login.inputParam}\r\n                                selectedRecord={this.state.selectedRecord || {}}\r\n                            />\r\n                            : <AddType3Component\r\n                                selectedRecord={this.state.selectedRecord || {}}\r\n                                onInputOnChange={this.onInputOnChange}\r\n                                extractedColumnList={this.extractedColumnList}\r\n                                onNumericInputOnChange={this.onNumericInputOnChange}\r\n                                onComboChange={this.onComboChange}\r\n                                handleDateChange={this.handleDateChange}                               \r\n                                userInfo={this.props.Login.userInfo}\r\n                                dataList={this.props.Login.dataList}\r\n                                operation={this.props.Login.operation}\r\n                            />}\r\n                    />\r\n                :\"\"}\r\n\r\n            </>\r\n        );\r\n    }\r\n\r\n    componentDidUpdate(previousProps) {\r\n        if (this.props.Login.masterData !== previousProps.Login.masterData) {\r\n            if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\r\n                const userRoleControlRights = [];\r\n                if (this.props.Login.userRoleControlRights) {\r\n                    this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item =>\r\n                        userRoleControlRights.push(item.ncontrolcode))\r\n                }\r\n                const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode)\r\n                this.setState({\r\n                    userRoleControlRights, controlMap, data: this.props.Login.masterData,\r\n                    dataResult: process(this.props.Login.masterData ? this.props.Login.masterData : [], this.state.dataState),\r\n                });\r\n            }else {\r\n                let {dataState}=this.state;\r\n                if(this.props.Login.dataState===undefined){\r\n                    dataState={skip:0,take:this.state.dataState.take}\r\n                }\r\n                 if(this.state.dataResult.data){\r\n                     if(this.state.dataResult.data.length ===1){\r\n                        let skipcount=this.state.dataState.skip>0?(this.state.dataState.skip-this.state.dataState.take):\r\n                        this.state.dataState.skip\r\n                         dataState={skip:skipcount,take:this.state.dataState.take}\r\n                     }\r\n                 } \r\n                \r\n                this.setState({\r\n                    data: this.props.Login.masterData, selectedRecord: this.props.Login.selectedRecord,\r\n                    dataResult: process(this.props.Login.masterData ? this.props.Login.masterData : [], dataState),\r\n                    dataState\r\n                });\r\n            }\r\n        }\r\n        \r\n        \r\n        if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\r\n            //Get selected value when clicking edit button\r\n            if(this.props.Login.selectedRecord)\r\n            {\r\n                this.setState({ selectedRecord : this.props.Login.selectedRecord });\r\n            }     \r\n         }\r\n    }\r\n\r\n    custombuttonclick = (event, component) => {\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n        const inputparam = {\r\n            component, userinfo: this.props.Login.userInfo,\r\n            selectedRecord: this.state.selectedRecord\r\n        }\r\n        this.props.getDynamicFilter(inputparam)\r\n    }\r\n\r\n    onInputOnChange = (event, item) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        let value = event.target.value;\r\n        if(item && item.zeroNotAllowed && item.zeroNotAllowed && value === '0'){\r\n            value = \"\";\r\n        }\r\n        if (event.target.type === 'checkbox') {\r\n            selectedRecord[event.target.name] = event.target.checked === true ? 3 : 4;\r\n        }\r\n        else {\r\n          \r\n            if (item && item.isSynonymNeed) {\r\n                // selectedRecord[event.target.name] = selectedRecord[item.ssynonymname] = event.target.value;\r\n                selectedRecord[event.target.name] = selectedRecord[item.ssynonymname] = value;\r\n            }\r\n            else {\r\n                // selectedRecord[event.target.name] = event.target.value;\r\n                selectedRecord[event.target.name] = value;\r\n            }\r\n        }\r\n        if (event.target.type === 'textbox'){\r\n            selectedRecord[item.existinglength] = true\r\n        }\r\n        if(item && item.readOnlyChild){\r\n            // selectedRecord[item.readOnlyChild] = event.target.value;\r\n            selectedRecord[item.readOnlyChild] = value;\r\n        }\r\n       \r\n        this.setState({ selectedRecord });\r\n    }    \r\n\r\n    onComboChange = (comboData, fieldName, comboItem) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n    \r\n        if (comboData !== null) {\r\n            if (comboItem.foreignDataField) {\r\n                selectedRecord[comboItem.foreignDataField] = comboData.value;\r\n            }\r\n     \r\n        }\r\n        selectedRecord[fieldName] = comboData;\r\n        if (comboItem.readOnlyChild) {\r\n            selectedRecord[comboItem.readOnlyChild] = comboData.item[comboItem.readOnlyParentData];\r\n        }\r\n        if(comboItem.onChangeUrl!=undefined){\r\n            const  dataList = {\r\n                ...this.props.Login.dataList\r\n            }\r\n            // let inputData={\r\n            //     primarykeyvalue: parseInt(comboData.value),\r\n            // }\r\n            \r\n            let inputData = { dataList, selectedRecord };\r\n\r\n            let comboColumnField = [];\r\n            let primarykeyvalue={};\r\n            primarykeyvalue[comboItem.tableDataField]=comboData.value;\r\n            this.extractedColumnList.map(item => {\r\n                if(item.onChangeUrl!=undefined){\r\n                    if (item.ndesigncomponentcode === designComponents.COMBOBOX) {\r\n                        if (item.tableDataField === comboItem.tableDataField) {\r\n                            comboColumnField.push(item);\r\n                        }\r\n                }\r\n                }})\r\n            this.props.onServiceLoad(this.props.Login.userInfo, this.props.Login.inputParam, this.props.Login.ncontrolCode, comboColumnField,primarykeyvalue,inputData);\r\n        }else{\r\n        this.setState({ selectedRecord });\r\n        }\r\n    }\r\n\r\n    \r\n\r\n    handleDateChange = (dateName, dateValue, item) => {\r\n        const { selectedRecord } = this.state;\r\n        selectedRecord[dateName] = dateValue;       \r\n        this.setState({ selectedRecord });\r\n\r\n    }\r\n \r\n\r\n    onNumericInputOnChange = (value, name, item) => {\r\n        \r\n            const selectedRecord = this.state.selectedRecord || {};\r\n            if(item.zeroNotAllowed && item.zeroNotAllowed && value === 0){\r\n                value = \"\";\r\n            }\r\n            if(item.child){\r\n                if(item.min>=value && value!==0 || item.max>=value && value!==0){\r\n                    selectedRecord.ncodelength = value ;\r\n                }\r\n                selectedRecord[item.childdatafield] && delete selectedRecord[item.childdatafield];\r\n            }\r\n            else if(item&&item.maxValue){\r\n                //added by vignesh for Sample Storage Structure row column max value\r\n                    if(this.props.Login.settings[39]&&parseInt(this.props.Login.settings[39])>=value){\r\n                        selectedRecord[name] = value;\r\n                    } \r\n                }\r\n            else{\r\n                selectedRecord[name] = value;\r\n\r\n            }\r\n            this.setState({ selectedRecord });\r\n        \r\n    }\r\n    \r\n    toggleSwitch = (switchParam, item, event) => {\r\n        \r\n        let dataItem = {...switchParam.selectedRecord};\r\n        let selectedId = this.props.Login.selectedId;\r\n        if (event.target.type === 'checkbox') {\r\n            dataItem[item.switchFieldName] = event.target.checked === true ? 3 : 4;\r\n        }\r\n        const inputParam ={\r\n            classUrl: this.props.Login.inputParam.classUrl,\r\n            methodUrl: this.props.Login.inputParam.methodUrl,\r\n            displayName: this.props.Login.inputParam.displayName,\r\n            inputData: {\r\n                [this.props.Login.inputParam.methodUrl.toLowerCase()]: dataItem,\r\n                \"userinfo\": this.props.Login.userInfo\r\n            },\r\n            operation:switchParam.operation,\r\n            dataState:this.state.dataState, selectedId,\r\n            selectedRecord:{...this.state.selectedRecord}\r\n        }\r\n        const masterData = switchParam.masterData;\r\n        const esignNeeded = showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode,switchParam.ncontrolCode);\r\n        if (esignNeeded) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, dataItem },\r\n                    openModal: true, screenName: this.props.intl.formatMessage({ id: this.props.Login.inputParam.displayName }),\r\n                    operation:switchParam.operation,masterData\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.crudMaster(inputParam, masterData, \"openModal\");\r\n        }\r\n    }\r\n\r\n \r\n    deleteRecord = (deleteParam) =>{\r\n        const inputParam = {\r\n            classUrl: this.props.Login.inputParam.classUrl,\r\n            methodUrl: this.props.Login.inputParam.methodUrl,\r\n            displayName: this.props.Login.inputParam.displayName,\r\n            inputData: {\r\n                [this.props.Login.inputParam.methodUrl.toLowerCase()]: deleteParam.selectedRecord,\r\n                \"userinfo\": this.props.Login.userInfo\r\n            },\r\n            operation:deleteParam.operation,\r\n            dataState:this.state.dataState,\r\n            selectedRecord:{...this.state.selectedRecord}\r\n        }\r\n        \r\n\r\n        const esignNeeded = showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode,deleteParam.ncontrolCode);\r\n        if (esignNeeded) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData: this.props.Login.masterData },\r\n                    openModal: true, screenName: this.props.intl.formatMessage({ id: this.props.Login.inputParam.displayName }),\r\n                    operation:deleteParam.operation\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\r\n        }\r\n    }\r\n\r\n    reloadData = () => {\r\n        const inputParam = {\r\n            inputData: { \"userinfo\": this.props.Login.userInfo },\r\n            classUrl: this.props.Login.inputParam.classUrl,\r\n            methodUrl: this.props.Login.inputParam.methodUrl,\r\n            displayName: this.props.Login.inputParam.displayName,\r\n            userInfo: this.props.Login.userInfo\r\n        };\r\n\r\n        this.props.callService(inputParam);\r\n    }\r\n    syncData = (syncId) => {\r\n\r\n        let classUrl;\r\n        let methodUrl;\r\n\r\n        if(this.props.Login.inputParam.displayName === \"Fusion Site\"){\r\n            classUrl = \"fusionsite\";\r\n            methodUrl=  \"FusionSite\";\r\n        }else if(this.props.Login.inputParam.displayName === \"Fusion Plant\"){\r\n            classUrl= \"fusionplant\";\r\n            methodUrl= \"FusionPlant\";\r\n        }else if(this.props.Login.inputParam.displayName === \"Fusion Users\"){\r\n            classUrl= \"fusionusers\";\r\n            methodUrl= \"FusionUsers\";\r\n        }else if(this.props.Login.inputParam.displayName === \"Fusion Plant User\"){\r\n            classUrl = \"fusionplantuser\";\r\n            methodUrl= \"FusionPlantUser\";\r\n        }\r\n\r\n        let inputParam = {          \r\n            inputData: {\"userinfo\": this.props.Login.userInfo },\r\n            classUrl: classUrl,\r\n            methodUrl: methodUrl,\r\n            operation:\"sync\",\r\n            displayName: this.props.Login.inputParam.displayName,\r\n            userInfo: this.props.Login.userInfo\r\n        };\r\n      \r\n        if(showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, syncId)){\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData: {...this.props.Login.masterData} },\r\n                    openModal: true, screenName: this.props.intl.formatMessage({ id: this.props.Login.inputParam.displayName }),\r\n                    operation:\"sync\"\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else{\r\n        this.props.syncAction(inputParam);\r\n        }\r\n    }\r\n\r\n    onSaveClick = (saveType, formRef) => {\r\n       \r\n        let result = true;\r\n        let emailFieldName=[];\r\n        let inputData = [];\r\n        inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n        let dataState = undefined;\r\n        let selectedId = null;\r\n        let fieldList = getFieldSpecification().get(this.props.Login.inputParam.methodUrl) || [];\r\n        let selectedRecordPrimarykey = fieldList[0].dataField;\r\n\r\n        \r\n        inputData[this.props.Login.inputParam.methodUrl.toLowerCase()] = { \"nsitecode\": this.props.Login.userInfo.nmastersitecode };\r\n       \r\n        this.extractedColumnList.map(item => {\r\n            let fieldName = item.dataField;\r\n            if(item.isEmail === true){\r\n                let validateEmailValue = this.state.selectedRecord[item.dataField] ? validateEmail(this.state.selectedRecord[item.dataField]) : true;\r\n                if(validateEmailValue === false){\r\n                    result = false;\r\n                    emailFieldName.push(item.idsName);\r\n                }\r\n            }\r\n            if (item.isJsonField === true) {\r\n                return inputData[this.props.Login.inputParam.methodUrl.toLowerCase()][item.jsonObjectName] = { ...inputData[this.props.Login.inputParam.methodUrl.toLowerCase()][item.jsonObjectName], [fieldName]: this.state.selectedRecord[fieldName] ? this.state.selectedRecord[fieldName] : \"\" }\r\n            }\r\n            else {\r\n        \r\n                if (item.controlType === \"selectbox\") {\r\n                    inputData[this.props.Login.inputParam.methodUrl.toLowerCase()][fieldName] = this.state.selectedRecord[fieldName] ? this.state.selectedRecord[fieldName].label ? this.state.selectedRecord[fieldName].label : \"\" : -1;\r\n                    inputData[this.props.Login.inputParam.methodUrl.toLowerCase()][item.foreignDataField] = this.state.selectedRecord[fieldName] ? this.state.selectedRecord[fieldName].value ? this.state.selectedRecord[fieldName].value : -1 : -1;\r\n                    if (this.props.Login.inputParam.methodUrl === \"LimsElnUsermapping\" && this.state.selectedRecord.username && this.state.selectedRecord.username.item && this.state.selectedRecord.username.item.multiusergroupcode) {\r\n                        this.state.selectedRecord.username.item.multiusergroupcode.forEach(dataItem => {\r\n                            if (dataItem.defaultusergroup !== \"undefined\") {\r\n                                inputData[this.props.Login.inputParam.methodUrl.toLowerCase()][\"nelnusergroupcode\"] = dataItem.lsusergroup.usergroupcode;\r\n                            }\r\n                        })\r\n                    }\r\n                    //return inputData;\r\n                }\r\n                else if (item.controlType === \"datepicker\") {\r\n                    inputData[this.props.Login.inputParam.methodUrl.toLowerCase()][item.dateField] = formatInputDate(this.state.selectedRecord[fieldName] ? this.state.selectedRecord[fieldName] : \"\", false);\r\n                }\r\n                else if (item.controlType === \"checkbox\") {\r\n                    inputData[this.props.Login.inputParam.methodUrl.toLowerCase()][item.controlName] = this.state.selectedRecord[item.controlName] ? this.state.selectedRecord[item.controlName] : transactionStatus.NO;\r\n                }\r\n                else if (item.controlType === \"numericinput\") {\r\n                    inputData[this.props.Login.inputParam.methodUrl.toLowerCase()][fieldName] = this.state.selectedRecord[fieldName] ? this.state.selectedRecord[fieldName] : 0;\r\n                }\r\n                else if (item.controlType === \"multiselect\") {\r\n                    inputData[this.props.Login.inputParam.methodUrl.toLowerCase()][item.valueKey] = this.state.selectedRecord[fieldName].map(item => item.value).join(\", \");\r\n                    inputData[this.props.Login.inputParam.methodUrl.toLowerCase()][item.valueName] =this.state.selectedRecord[fieldName].map(item => item.label).join(\", \");\r\n                }   \r\n                else {\r\n                    inputData[this.props.Login.inputParam.methodUrl.toLowerCase()][fieldName] = this.state.selectedRecord[fieldName] ? this.state.selectedRecord[fieldName] : \"\";\r\n                }\r\n                inputData[this.props.Login.inputParam.methodUrl.toLowerCase()][selectedRecordPrimarykey] = this.props.Login.selectedId;\r\n                return inputData;\r\n            }\r\n            \r\n        })\r\n        if (this.props.Login.operation == \"update\") {\r\n            dataState = this.state.dataState;\r\n            selectedId = this.props.Login.selectedId;\r\n        }\r\n\r\n        const inputParam = {\r\n            classUrl: this.props.Login.inputParam.classUrl,\r\n            methodUrl: this.props.Login.inputParam.methodUrl,\r\n            displayName: this.props.Login.inputParam.displayName,\r\n            inputData: inputData, selectedId,\r\n            selectedRecord: { ...this.state.selectedRecord },\r\n            operation: this.props.Login.operation, saveType, formRef, dataState\r\n        }\r\n        if (result) {\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData: { ...this.props.Login.masterData } },\r\n                    openModal: true, screenName: this.props.intl.formatMessage({ id: this.props.Login.inputParam.displayName }),\r\n                    operation: this.props.Login.operation\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n           // this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\r\n           this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\",'',this.confirmMessage);\r\n        }\r\n    \r\n    } \r\n   else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_ENTERVALIDEMAILOF\" })+ this.props.intl.formatMessage({ id: emailFieldName[0]}));\r\n        }\r\n    \r\n\r\n\r\n}\r\n\r\n    ConfirmDelete = (operation, deleteId) => {\r\n        this.confirmMessage.confirm(\r\n          \"deleteMessage\",\r\n          this.props.intl.formatMessage({ id: \"IDS_DELETE\" }),\r\n          this.props.intl.formatMessage({ id: \"IDS_DEFAULTCONFIRMMSG\" }),\r\n          this.props.intl.formatMessage({ id: \"IDS_OK\" }),\r\n          this.props.intl.formatMessage({ id: \"IDS_CANCEL\" }),\r\n          () =>\r\n            this.DeleteWorklist(\r\n              operation,\r\n              deleteId,\r\n              operation.screenName ? operation.screenName : \"IDS_WORKLIST\"\r\n            )\r\n        );\r\n      };\r\n    validateEsign = () => {\r\n        const inputParam = {\r\n            inputData: {\r\n                \"userinfo\": {\r\n                    ...this.props.Login.userInfo,\r\n                    sreason: this.state.selectedRecord[\"esigncomments\"],\r\n                    nreasoncode:this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].value,\r\n                    spredefinedreason:this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].label,\r\n               \r\n                },\r\n                password: this.state.selectedRecord[\"esignpassword\"]\r\n            },\r\n            screenData: this.props.Login.screenData\r\n            // screenStateData: {selected:{...this.state.selectedRecord}, masterData:{ ...this.props.Login.masterData}},\r\n        }\r\n        this.props.validateEsignCredential(inputParam, \"openModal\",this.confirmMessage);\r\n    }\r\n\r\n}\r\nexport default connect(mapStateToProps, {\r\n    callService, crudMaster, updateStore, validateEsignCredential,syncAction,\r\n    fetchRecordCombo, onComboLoad,onServiceLoad})(injectIntl(Type3Component));"]},"metadata":{},"sourceType":"module"}