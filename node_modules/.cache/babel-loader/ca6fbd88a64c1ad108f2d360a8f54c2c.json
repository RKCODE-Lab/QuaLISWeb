{"ast":null,"code":"import rsapi from'../rsapi';import{DEFAULT_RETURN}from'./LoginTypes';import{constructOptionList}from'../components/CommonScript';import{toast}from'react-toastify';import Axios from'axios';import{initRequest}from'./LoginAction';//import { intl } from '../components/App';\nimport{getComboLabelValue}from\"../components/CommonScript\";export function projectytpe(addsampleprocesstypeId,userInfo){return function(dispatch){dispatch(initRequest(true));var getprojectytpe=rsapi.post(\"sampleprocesstype/getProjectType\",{\"addsampleprocesstypeId\":addsampleprocesstypeId,userinfo:userInfo});var getperiod=rsapi.post(\"/period/getPeriodByControl\",{\"ncontrolcode\":addsampleprocesstypeId,\"userinfo\":userInfo});var urlArray=[];urlArray=[getprojectytpe,getperiod];dispatch(initRequest(true));Axios.all(urlArray).then(function(response){var selectedRecord=[];var constructType=constructOptionList(response[0].data||[],\"nprojectcode\",\"sprojecttypename\",undefined,undefined,false);var periodconstructType=constructOptionList(response[1].data||[],\"nperiodcode\",\"speriodname\",undefined,undefined,false);selectedRecord[\"processperiodtime\"]={label:response[1].data[0].speriodname,value:response[1].data[0].nperiodcode};selectedRecord[\"graceperiodtime\"]={label:response[1].data[0].speriodname,value:response[1].data[0].nperiodcode};var projecttypeList=constructType.get(\"OptionList\");var periodList=periodconstructType.get(\"OptionList\");dispatch({type:DEFAULT_RETURN,payload:{loading:false,openModal:true,projecttypeList:projecttypeList,periodList:periodList,selectedRecord:selectedRecord,screenName:\"IDS_SAMPLEPROCESSTYPE\",operation:\"create\"}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}export function getSampleType(sampletypevalue,sampletypename,userInfo){return function(dispatch){var sampletypeList=rsapi.post(\"sampleprocesstype/getSampleType\",{\"sampletypevalue\":sampletypevalue,\"sampletypename\":sampletypename,userinfo:userInfo});var collectiontubeList=rsapi.post(\"sampleprocesstype/getCollectionTubeType\",{\"sampletypevalue\":sampletypevalue,\"sampletypename\":sampletypename,userinfo:userInfo});var processtypeList=rsapi.post(\"sampleprocesstype/getProcessType\",{\"sampletypevalue\":sampletypevalue,\"sampletypename\":sampletypename,userinfo:userInfo});var urlArray=[];urlArray=[sampletypeList,collectiontubeList,processtypeList];dispatch(initRequest(true));Axios.all(urlArray).then(function(response){var sampletypeListconstruct=constructOptionList(response[0].data||[],\"nproductsamplecode\",\"sproductname\",undefined,undefined,false);var collectiontubeListconstruct=constructOptionList(response[1].data||[],\"ncollectiontubecode\",\"stubename\",undefined,undefined,false);var processtypeListconstruct=constructOptionList(response[2].data||[],\"nprocesscode\",\"sprocesstypename\",undefined,undefined,false);var sampletypeListconstructList=sampletypeListconstruct.get(\"OptionList\");var collectiontubeListconstructList=collectiontubeListconstruct.get(\"OptionList\");var processtypeListconstructList=processtypeListconstruct.get(\"OptionList\");dispatch({type:DEFAULT_RETURN,payload:{loading:false,openModal:true,sampletypeList:sampletypeListconstructList,collectiontubeList:collectiontubeListconstructList,processtypeList:processtypeListconstructList,screenName:\"IDS_SAMPLEPROCESSTYPE\"}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}// export function getCollectionTubeType(sampletypevalue, sampletypename, userInfo) {\n//     return function (dispatch) {\n//         dispatch(initRequest(true));\n//         return rsapi.post(\"sampleprocesstype/getCollectionTubeType\", { \"sampletypevalue\": sampletypevalue, \"sampletypename\": sampletypename, userinfo: userInfo })\n//             .then(response => {\n//                 const constructType = constructOptionList(response.data || [], \"ncollectiontubecode\",\n//                     \"stubename\", undefined, undefined, false);\n//                 const collectiontubeList = constructType.get(\"OptionList\");\n//                 dispatch({\n//                     type: DEFAULT_RETURN, payload: {\n//                         loading: false, openModal: true,\n//                         collectiontubeList: collectiontubeList\n//                     }\n//                 });\n//             })\n//             .catch(error => {\n//                 dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\n//                 if (error.response.status === 500) {\n//                     toast.error(error.message);\n//                 }\n//                 else {\n//                     toast.warn(error.response.data);\n//                 }\n//             })\n//     }\n// }\n// export function getProcessType(sampletypevalue, sampletypename, userInfo) {\n//     return function (dispatch) {\n//         dispatch(initRequest(true));\n//         return rsapi.post(\"sampleprocesstype/getProcessType\", { \"sampletypevalue\": sampletypevalue, \"sampletypename\": sampletypename, userinfo: userInfo })\n//             .then(response => {\n//                 const constructType = constructOptionList(response.data || [], \"nprocesscode\",\n//                     \"sprocesstypename\", undefined, undefined, false);\n//                 const processtypeList = constructType.get(\"OptionList\");\n//                 dispatch({\n//                     type: DEFAULT_RETURN, payload: {\n//                         loading: false, openModal: true,\n//                         processtypeList: processtypeList\n//                     }\n//                 });\n//             })\n//             .catch(error => {\n//                 dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\n//                 if (error.response.status === 500) {\n//                     toast.error(error.message);\n//                 }\n//                 else {\n//                     toast.warn(error.response.data);\n//                 }\n//             })\n//     }\n// }\nexport function getActiveSampleProcessTypeById(editParam,userInfo){return function(dispatch){dispatch(initRequest(true));var ncontrolCode=editParam.ncontrolCode;var sampletypevalue=editParam.editRow.nprojectcode;var sampletypename=editParam.editRow.sprojecttypename;var userInfoPass=editParam.userInfo;var projectytpe=rsapi.post(\"sampleprocesstype/getProjectType\",{\"editSampleProcessType\":ncontrolCode,userinfo:userInfoPass});var sampletypeList=rsapi.post(\"sampleprocesstype/getSampleType\",{\"sampletypevalue\":sampletypevalue,\"sampletypename\":sampletypename,userinfo:userInfoPass});var collectiontubeList=rsapi.post(\"sampleprocesstype/getCollectionTubeType\",{\"sampletypevalue\":sampletypevalue,\"sampletypename\":sampletypename,userinfo:userInfoPass});var processtypeList=rsapi.post(\"sampleprocesstype/getProcessType\",{\"sampletypevalue\":sampletypevalue,\"sampletypename\":sampletypename,userinfo:userInfoPass});var getActiveSampleProcessTypeById=rsapi.post(\"sampleprocesstype/getActiveSampleProcessTypeById\",{nsampleprocesstypecode:editParam.editRow.nsampleprocesstypecode,userinfo:userInfoPass});var urlArray=[];urlArray=[getActiveSampleProcessTypeById,projectytpe,sampletypeList,collectiontubeList,processtypeList];dispatch(initRequest(true));Axios.all(urlArray).then(function(response){var selectedRecord=response[0].data;var projectytpeconstruct=constructOptionList(response[1].data||[],\"nprojectcode\",\"sprojecttypename\",undefined,undefined,false);var sampletypeListconstruct=constructOptionList(response[2].data||[],\"nproductsamplecode\",\"sproductname\",undefined,undefined,false);var collectiontubeListconstruct=constructOptionList(response[3].data||[],\"ncollectiontubecode\",\"stubename\",undefined,undefined,false);var processtypeListconstruct=constructOptionList(response[4].data||[],\"nprocesscode\",\"sprocesstypename\",undefined,undefined,false);selectedRecord[\"sprojecttypename\"]=getComboLabelValue(response[0].data,response[1].data,\"nprojectcode\",\"sprojecttypename\");selectedRecord[\"sproductname\"]=getComboLabelValue(response[0].data,response[2].data,\"nproductsamplecode\",\"sproductname\");selectedRecord[\"stubename\"]=getComboLabelValue(response[0].data,response[3].data,\"ncollectiontubecode\",\"stubename\");selectedRecord[\"sprocesstypename\"]=getComboLabelValue(response[0].data,response[4].data,\"nprocesscode\",\"sprocesstypename\");selectedRecord[\"processtime\"]=response[0].data.nprocesstime;selectedRecord[\"gracetime\"]=response[0].data.ngracetime;selectedRecord[\"executionorder\"]=response[0].data.nexecutionorder;selectedRecord[\"sdescription\"]=response[0].data.sdescription;selectedRecord[\"processperiodtime\"]={label:response[0].data.ngracetimeresult,value:response[0].data.nperiodcode};selectedRecord[\"graceperiodtime\"]={label:response[0].data.ngracetimeresult,value:response[0].data.nperiodcode};//response[0].data[0].ngracetimeresult;\nvar projectytpeconstructList=projectytpeconstruct.get(\"OptionList\");var sampletypeListconstructList=sampletypeListconstruct.get(\"OptionList\");var collectiontubeListconstructList=collectiontubeListconstruct.get(\"OptionList\");var processtypeListconstructList=processtypeListconstruct.get(\"OptionList\");dispatch({type:DEFAULT_RETURN,payload:{loading:false,openModal:true,projecttypeList:projectytpeconstructList,sampletypeList:sampletypeListconstructList,collectiontubeList:collectiontubeListconstructList,processtypeList:processtypeListconstructList,selectedRecord:selectedRecord,selectedId:editParam.editRow.nsampleprocesstypecode,ncontrolCode:editParam.ncontrolCode,screenName:\"IDS_SAMPLEPROCESSTYPE\",operation:\"update\"}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}","map":{"version":3,"sources":["E:/WorkingFolder/React_Postgres/ALPD/branches/SOURCE-513-PROD/SOURCE-513-ALPD-5500/QuaLISWeb/src/actions/SampleProcessTypeAction.js"],"names":["rsapi","DEFAULT_RETURN","constructOptionList","toast","Axios","initRequest","getComboLabelValue","projectytpe","addsampleprocesstypeId","userInfo","dispatch","getprojectytpe","post","userinfo","getperiod","urlArray","all","then","response","selectedRecord","constructType","data","undefined","periodconstructType","label","speriodname","value","nperiodcode","projecttypeList","get","periodList","type","payload","loading","openModal","screenName","operation","catch","error","status","message","warn","getSampleType","sampletypevalue","sampletypename","sampletypeList","collectiontubeList","processtypeList","sampletypeListconstruct","collectiontubeListconstruct","processtypeListconstruct","sampletypeListconstructList","collectiontubeListconstructList","processtypeListconstructList","getActiveSampleProcessTypeById","editParam","ncontrolCode","editRow","nprojectcode","sprojecttypename","userInfoPass","nsampleprocesstypecode","projectytpeconstruct","nprocesstime","ngracetime","nexecutionorder","sdescription","ngracetimeresult","projectytpeconstructList","selectedId"],"mappings":"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","sourcesContent":["import rsapi from '../rsapi';\r\nimport { DEFAULT_RETURN } from './LoginTypes';\r\nimport { constructOptionList } from '../components/CommonScript'\r\nimport { toast } from 'react-toastify';\r\nimport Axios from 'axios';\r\nimport { initRequest } from './LoginAction';\r\n//import { intl } from '../components/App';\r\nimport {  getComboLabelValue } from \"../components/CommonScript\";\r\n\r\nexport function projectytpe(addsampleprocesstypeId,userInfo) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n\r\n        const getprojectytpe= rsapi.post(\"sampleprocesstype/getProjectType\",{\"addsampleprocesstypeId\":addsampleprocesstypeId,userinfo: userInfo});\r\n\r\n        const getperiod = rsapi.post(\"/period/getPeriodByControl\", {\"ncontrolcode\": addsampleprocesstypeId,\"userinfo\": userInfo});\r\n\r\n        let urlArray = [];\r\n        urlArray = [getprojectytpe,getperiod];\r\n\r\n        dispatch(initRequest(true));\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                let selectedRecord=[];\r\n\r\n                const constructType = constructOptionList(response[0].data || [], \"nprojectcode\",\r\n                \"sprojecttypename\", undefined, undefined, false);\r\n\r\n\r\n                const periodconstructType = constructOptionList(response[1].data || [], \"nperiodcode\",\r\n                \"speriodname\", undefined, undefined, false);\r\n\r\n                selectedRecord[\"processperiodtime\"]={label:response[1].data[0].speriodname,value:response[1].data[0].nperiodcode};\r\n\r\n                selectedRecord[\"graceperiodtime\"]={label:response[1].data[0].speriodname,value:response[1].data[0].nperiodcode};\r\n\r\n                 const projecttypeList = constructType.get(\"OptionList\");\r\n                const periodList=periodconstructType.get(\"OptionList\");\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        loading: false, openModal:true,\r\n                        projecttypeList: projecttypeList,\r\n                        periodList:periodList,\r\n                        selectedRecord:selectedRecord,\r\n                        screenName: \"IDS_SAMPLEPROCESSTYPE\",\r\n                        operation: \"create\"\r\n\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n\r\n            })\r\n    }  \r\n}\r\n\r\n\r\nexport function getSampleType(sampletypevalue, sampletypename, userInfo) {\r\n    return function (dispatch) {\r\n        \r\n        const sampletypeList = rsapi.post(\"sampleprocesstype/getSampleType\", { \"sampletypevalue\": sampletypevalue, \"sampletypename\": sampletypename, userinfo: userInfo });\r\n\r\n        const collectiontubeList = rsapi.post(\"sampleprocesstype/getCollectionTubeType\", { \"sampletypevalue\": sampletypevalue, \"sampletypename\": sampletypename, userinfo: userInfo });\r\n\r\n        const processtypeList = rsapi.post(\"sampleprocesstype/getProcessType\", { \"sampletypevalue\": sampletypevalue, \"sampletypename\": sampletypename, userinfo: userInfo });\r\n\r\n\r\n        let urlArray = [];\r\n        urlArray = [sampletypeList, collectiontubeList, processtypeList];\r\n\r\n        dispatch(initRequest(true));\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n\r\n                const sampletypeListconstruct = constructOptionList(response[0].data || [], \"nproductsamplecode\",\r\n                    \"sproductname\", undefined, undefined, false);\r\n\r\n                const collectiontubeListconstruct = constructOptionList(response[1].data || [], \"ncollectiontubecode\",\r\n                    \"stubename\", undefined, undefined, false);\r\n\r\n                const processtypeListconstruct = constructOptionList(response[2].data || [], \"nprocesscode\",\r\n                    \"sprocesstypename\", undefined, undefined, false);\r\n\r\n                const sampletypeListconstructList = sampletypeListconstruct.get(\"OptionList\");\r\n                const collectiontubeListconstructList = collectiontubeListconstruct.get(\"OptionList\");\r\n                const processtypeListconstructList = processtypeListconstruct.get(\"OptionList\");\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        loading: false, openModal: true,\r\n                        sampletypeList: sampletypeListconstructList,\r\n                        collectiontubeList: collectiontubeListconstructList,\r\n                        processtypeList: processtypeListconstructList,\r\n                        screenName: \"IDS_SAMPLEPROCESSTYPE\"\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n\r\n            })\r\n    }\r\n}\r\n\r\n\r\n// export function getCollectionTubeType(sampletypevalue, sampletypename, userInfo) {\r\n//     return function (dispatch) {\r\n//         dispatch(initRequest(true));\r\n//         return rsapi.post(\"sampleprocesstype/getCollectionTubeType\", { \"sampletypevalue\": sampletypevalue, \"sampletypename\": sampletypename, userinfo: userInfo })\r\n//             .then(response => {\r\n//                 const constructType = constructOptionList(response.data || [], \"ncollectiontubecode\",\r\n//                     \"stubename\", undefined, undefined, false);\r\n\r\n//                 const collectiontubeList = constructType.get(\"OptionList\");\r\n//                 dispatch({\r\n//                     type: DEFAULT_RETURN, payload: {\r\n//                         loading: false, openModal: true,\r\n//                         collectiontubeList: collectiontubeList\r\n\r\n//                     }\r\n//                 });\r\n//             })\r\n//             .catch(error => {\r\n//                 dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n//                 if (error.response.status === 500) {\r\n//                     toast.error(error.message);\r\n//                 }\r\n//                 else {\r\n//                     toast.warn(error.response.data);\r\n//                 }\r\n\r\n//             })\r\n//     }\r\n// }\r\n\r\n// export function getProcessType(sampletypevalue, sampletypename, userInfo) {\r\n//     return function (dispatch) {\r\n//         dispatch(initRequest(true));\r\n//         return rsapi.post(\"sampleprocesstype/getProcessType\", { \"sampletypevalue\": sampletypevalue, \"sampletypename\": sampletypename, userinfo: userInfo })\r\n//             .then(response => {\r\n//                 const constructType = constructOptionList(response.data || [], \"nprocesscode\",\r\n//                     \"sprocesstypename\", undefined, undefined, false);\r\n\r\n//                 const processtypeList = constructType.get(\"OptionList\");\r\n//                 dispatch({\r\n//                     type: DEFAULT_RETURN, payload: {\r\n//                         loading: false, openModal: true,\r\n//                         processtypeList: processtypeList\r\n\r\n//                     }\r\n//                 });\r\n//             })\r\n//             .catch(error => {\r\n//                 dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n//                 if (error.response.status === 500) {\r\n//                     toast.error(error.message);\r\n//                 }\r\n//                 else {\r\n//                     toast.warn(error.response.data);\r\n//                 }\r\n\r\n//             })\r\n//     }\r\n// }\r\n\r\n\r\n\r\nexport function getActiveSampleProcessTypeById(editParam, userInfo) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        const ncontrolCode = editParam.ncontrolCode;\r\n\r\n        const sampletypevalue = editParam.editRow.nprojectcode;\r\n\r\n        const sampletypename = editParam.editRow.sprojecttypename;\r\n\r\n        const userInfoPass = editParam.userInfo;\r\n\r\n        const projectytpe = rsapi.post(\"sampleprocesstype/getProjectType\", { \"editSampleProcessType\": ncontrolCode, userinfo: userInfoPass });\r\n\r\n        const sampletypeList = rsapi.post(\"sampleprocesstype/getSampleType\", { \"sampletypevalue\": sampletypevalue, \"sampletypename\": sampletypename, userinfo: userInfoPass });\r\n\r\n        const collectiontubeList = rsapi.post(\"sampleprocesstype/getCollectionTubeType\", { \"sampletypevalue\": sampletypevalue, \"sampletypename\": sampletypename, userinfo: userInfoPass });\r\n\r\n        const processtypeList = rsapi.post(\"sampleprocesstype/getProcessType\", { \"sampletypevalue\": sampletypevalue, \"sampletypename\": sampletypename, userinfo: userInfoPass });\r\n\r\n        const getActiveSampleProcessTypeById = rsapi.post(\"sampleprocesstype/getActiveSampleProcessTypeById\",\r\n            { nsampleprocesstypecode: editParam.editRow.nsampleprocesstypecode, userinfo: userInfoPass });\r\n\r\n        let urlArray = [];\r\n        urlArray = [getActiveSampleProcessTypeById, projectytpe, sampletypeList, collectiontubeList, processtypeList];\r\n\r\n        dispatch(initRequest(true));\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n\r\n                const selectedRecord = response[0].data;\r\n\r\n                const projectytpeconstruct = constructOptionList(response[1].data || [], \"nprojectcode\",\r\n                    \"sprojecttypename\", undefined, undefined, false);\r\n\r\n                const sampletypeListconstruct = constructOptionList(response[2].data || [], \"nproductsamplecode\",\r\n                    \"sproductname\", undefined, undefined, false);\r\n\r\n                const collectiontubeListconstruct = constructOptionList(response[3].data || [], \"ncollectiontubecode\",\r\n                    \"stubename\", undefined, undefined, false);\r\n\r\n                const processtypeListconstruct = constructOptionList(response[4].data || [], \"nprocesscode\",\r\n                    \"sprocesstypename\", undefined, undefined, false);\r\n\r\n                selectedRecord[\"sprojecttypename\"] = getComboLabelValue(response[0].data, response[1].data,\r\n                    \"nprojectcode\", \"sprojecttypename\");\r\n\r\n                selectedRecord[\"sproductname\"] = getComboLabelValue(response[0].data, response[2].data,\r\n                    \"nproductsamplecode\", \"sproductname\");\r\n\r\n                selectedRecord[\"stubename\"] = getComboLabelValue(response[0].data, response[3].data,\r\n                    \"ncollectiontubecode\", \"stubename\");\r\n\r\n                selectedRecord[\"sprocesstypename\"] = getComboLabelValue(response[0].data, response[4].data,\r\n                    \"nprocesscode\", \"sprocesstypename\");\r\n\r\n                selectedRecord[\"processtime\"] = response[0].data.nprocesstime;\r\n\r\n                selectedRecord[\"gracetime\"] = response[0].data.ngracetime;\r\n\r\n                selectedRecord[\"executionorder\"] = response[0].data.nexecutionorder;\r\n\r\n                selectedRecord[\"sdescription\"] = response[0].data.sdescription;\r\n\r\n                selectedRecord[\"processperiodtime\"]={label:response[0].data.ngracetimeresult,value:response[0].data.nperiodcode};\r\n\r\n                selectedRecord[\"graceperiodtime\"]={label:response[0].data.ngracetimeresult,value:response[0].data.nperiodcode};\r\n                //response[0].data[0].ngracetimeresult;\r\n\r\n\r\n                const projectytpeconstructList = projectytpeconstruct.get(\"OptionList\");\r\n                const sampletypeListconstructList = sampletypeListconstruct.get(\"OptionList\");\r\n                const collectiontubeListconstructList = collectiontubeListconstruct.get(\"OptionList\");\r\n                const processtypeListconstructList = processtypeListconstruct.get(\"OptionList\");\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        loading: false, openModal: true,\r\n                        projecttypeList: projectytpeconstructList,\r\n                        sampletypeList: sampletypeListconstructList,\r\n                        collectiontubeList: collectiontubeListconstructList,\r\n                        processtypeList: processtypeListconstructList,\r\n                        selectedRecord: selectedRecord,\r\n                        selectedId:editParam.editRow.nsampleprocesstypecode,\r\n                        ncontrolCode: editParam.ncontrolCode,\r\n                        screenName: \"IDS_SAMPLEPROCESSTYPE\",\r\n                        operation: \"update\"\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n\r\n            })\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}