{"ast":null,"code":"var _jsxFileName = \"D:\\\\LIMSWFH\\\\LIMSPOSTGRESQL\\\\QuaLISWeb\\\\src\\\\pages\\\\testgroup\\\\TestGroup.jsx\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { injectIntl } from 'react-intl';\nimport rsapi from '../../rsapi';\nimport { toast } from 'react-toastify';\nimport { Row, Col, Card, Button, Nav } from 'react-bootstrap';\nimport PerfectScrollbar from 'react-perfect-scrollbar';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faPencilAlt, faPlus, faSync } from '@fortawesome/free-solid-svg-icons';\nimport 'react-perfect-scrollbar/dist/css/styles.css';\nimport SplitterLayout from 'react-splitter-layout';\nimport { faEye, faTrashAlt } from '@fortawesome/free-regular-svg-icons'; // import { Tooltip } from '@progress/kendo-react-tooltip';\n\nimport { process } from '@progress/kendo-data-query';\nimport DataGrid from '../../components/data-grid/data-grid.component';\nimport OrgTree from 'react-org-tree';\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\nimport Esign from '../audittrail/Esign';\nimport { callService, crudMaster, filterTestGroup, createTree, editTree, getTestGroupDetails, sampleTypeOnChange, validateEsignCredential, updateStore, addSpecification, getSpecification, addComponent, changeTestCategory, addTestGroupTest, editTestGroupTest, getTestGroupParameter, editTestGroupParameter, addTestFile, editSpecFile, getSpecificationDetails, addTestGroupCodedResult, getComponentBySpecId, filterColumnData, viewAttachment, viewTestGroupCheckList, getTestGroupComponentDetails, filterTransactionList, reportSpecification, retireSpecification, getDataForTestMaterial, getMaterialCategoryBasedMaterialType, getMaterialBasedMaterialCategory, getTestGroupMaterial, getDataForEditTestMaterial, addTestGroupNumericTab, getTestGroupRulesEngineAdd, getEditTestGroupRulesEngine, getSelectedTestGroupRulesEngine, getParameterRulesEngine, getParameterResultValue } from '../../actions';\nimport { constructOptionList, formatInputDate, create_UUID, deleteAttachmentDropZone, filterRecordBasedOnTwoArrays, getControlMap, onDropAttachFileList, showEsign, sortData } from '../../components/CommonScript';\nimport TestGroupTestTab from './TestGroupTestTab';\nimport AddTestGroupSpecification from './AddTestGroupSpecification';\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\nimport { transactionStatus, REPORTTYPE, attachmentType, formCode, designProperties, parameterType, SampleType } from '../../components/Enumeration';\nimport AddTestGroupTest from './AddTestGroupTest';\nimport AddProfileTree from './AddProfileTree';\nimport SampleFilter from './SampleFilter';\nimport AddFile from '../testmanagement/AddFile';\nimport AdvFilter from '../../components/AdvFilter';\nimport SpecificationHistory from './SpecificationHistory';\nimport TestGroupSpecFile from './TestGroupSpecFile';\nimport SpecificationInfo from './SpecificationInfo';\nimport CustomTab from '../../components/custom-tabs/custom-tabs.component';\nimport TransationListMaster from '../../components/TransactionListMaster';\nimport TransationListMasterView from '../../components/TransactionListMasterView';\nimport FormTreeMenu from '../../components/form-tree-menu/form-tree-menu.component'; // import ConfirmDialog from '../../components/confirm-alert/confirm-alert.component';\n\nimport FormInput from '../../components/form-input/form-input.component';\nimport ConfirmMessage from '../../components/confirm-alert/confirm-message.component';\nimport BreadcrumbComponent from '../../components/Breadcrumb.Component';\nimport { testMoreFields, testSubFields, searchFieldList, specificationColumnList, componentColumnList, addTestColumnList, editTestColumnList } from './TestGroupFields';\nimport EditTestGroupTest from './EditTestGroupTest';\nimport { ContentPanel, SearchAdd } from '../../components/App.styles';\nimport '../../pages/registration/registration.css';\nimport { ListWrapper } from '../../components/client-group.styles';\nimport { ProductList } from '../product/product.styled';\nimport TransactionListMasterJsonView from '../../components/TransactionListMasterJsonView'; // import ReactTooltip from 'react-tooltip';\n\nimport PortalModalSlideout from '../../components/portal-modal/portal-modal-slideout';\nimport AddTestGroupRule from './AddTestGroupRule';\n\nclass TestGroup extends Component {\n  constructor(_props) {\n    super(_props);\n\n    this.reloadData = () => {\n      const filterData = this.props.Login.filterData || this.state.filterData;\n\n      if (filterData.nsampletypecode === undefined) {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SAMPLETYPENOTAVAILABLE\"\n        }));\n      } else if (filterData.nproductcatcode === \"\") {\n        if (filterData.nsampletypecode.item.nformcode === formCode.PRODUCTCATEGORY) {\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_PRODUCTCATEGORYNOTAVAILABLE\"\n          }));\n        } else if (filterData.nsampletypecode.item.nformcode === formCode.INSTRUMENTCATEGORY) {\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_INSTRUMENTCATEGORYNOTAVAILABLE\"\n          }));\n        } else if (filterData.nsampletypecode.item.nformcode === formCode.MATERIALCATEGORY) {\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_MATERIALCATEGORYNOTAVAILABLE\"\n          }));\n        } else {\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_CATEGORYNOTAVAILABLE\"\n          }));\n        }\n      } else if (filterData.nproductcode === \"\" && filterData.nproductcatcode.item.ncategorybasedflow === transactionStatus.NO) {\n        if (filterData.nsampletypecode.item.nformcode === formCode.PRODUCTCATEGORY) {\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_PRODUCTNOTAVAILABLE\"\n          }));\n        } else if (filterData.nsampletypecode.item.nformcode === formCode.INSTRUMENTCATEGORY) {\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_INSTRUMENTNOTAVAILABLE\"\n          }));\n        } else if (filterData.nsampletypecode.item.nformcode === formCode.MATERIALCATEGORY) {\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_MATERIALNOTAVAILABLE\"\n          }));\n        } else {\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_PRODUCTNOTAVAILABLE\"\n          }));\n        }\n      } else if (filterData.ntreeversiontempcode === \"\") {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_STUDYPLANTEMPLATEISNOTAVAILABLE\"\n        }));\n      } else {\n        const inputParam = {\n          inputData: {\n            userinfo: this.props.Login.userInfo,\n            nsampletypecode: filterData.nsampletypecode.item[\"nsampletypecode\"],\n            nproductcatcode: filterData.nproductcatcode.item[\"nproductcatcode\"],\n            //   nproductcode: filterData.nproductcode.item[\"nproductcode\"],\n            nproductcode: filterData.nproductcatcode.item.ncategorybasedflow === transactionStatus.YES ? -1 : filterData.nproductcode ? filterData.nproductcode.value : -1,\n            ntreeversiontempcode: filterData.ntreeversiontempcode.item[\"ntreeversiontempcode\"],\n            nprojectmastercode: filterData.nprojectmastercode !== undefined ? filterData.nprojectmastercode.item[\"nprojectmastercode\"] : -1,\n            filterData //: { ...this.props.Login.filterData }\n\n          },\n          historyDataState: this.state.historyDataState\n        };\n        this.props.filterTestGroup(inputParam, this.props.Login.masterData, this.searchRef);\n      }\n    };\n\n    this.ConfirmDelete = obj => {\n      this.confirmMessage.confirm(\"deleteMessage\", this.props.intl.formatMessage({\n        id: \"IDS_DELETE\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_DEFAULTCONFIRMMSG\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_OK\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_CANCEL\"\n      }), () => this.deleteRecord(obj));\n    };\n\n    this.handlePageChange = event => {\n      this.setState({\n        testskip: event.skip,\n        testtake: event.take\n      });\n    };\n\n    this.viewTestFile = props => {\n      const viewParam = {\n        operation: \"view\",\n        methodUrl: \"TestGroupTestFile\",\n        classUrl: \"testgroup\",\n        inputData: {\n          ntestgroupfilecode: props.selectedTest ? props.selectedTest.ntestgroupfilecode : 0,\n          userinfo: this.props.Login.userInfo,\n          testgroupspecification: this.props.Login.masterData.SelectedSpecification,\n          ntestgrouptestcode: props.selectedTest ? props.selectedTest.ntestgrouptestcode : 0\n        }\n      };\n      this.props.viewAttachment(viewParam);\n    };\n\n    this.fileViewIcon = master => {\n      if (master.ntestgroupfilecode > 0 && master.nlinkcode === transactionStatus.NA) {\n        return true;\n      } else {\n        return false;\n      }\n    };\n\n    this.linkViewIcon = master => {\n      if (master.ntestgroupfilecode > 0 && master.nlinkcode !== transactionStatus.NA) {\n        return true;\n      } else {\n        return false;\n      }\n    };\n\n    this.onFilterSumbit = () => {\n      const tempFilterData = this.state.tempFilterData;\n\n      if (tempFilterData.nsampletypecode === undefined) {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SAMPLETYPENOTAVAILABLE\"\n        }));\n      } else if (tempFilterData.nproductcatcode === \"\") {\n        if (tempFilterData.nsampletypecode.item.nformcode === formCode.PRODUCTCATEGORY) {\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_PRODUCTCATEGORYNOTAVAILABLE\"\n          }));\n        } else if (tempFilterData.nsampletypecode.item.nformcode === formCode.INSTRUMENTCATEGORY) {\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_INSTRUMENTCATEGORYNOTAVAILABLE\"\n          }));\n        } else if (tempFilterData.nsampletypecode.item.nformcode === formCode.MATERIALCATEGORY) {\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_MATERIALCATEGORYNOTAVAILABLE\"\n          }));\n        } else {\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_CATEGORYNOTAVAILABLE\"\n          }));\n        }\n      } // else if(tempFilterData.nproductcatcode.item.ncategorybasedflow === transactionStatus.NO){\n      else if (tempFilterData.nproductcatcode.item.ncategorybasedflow === transactionStatus.NO && tempFilterData.nproductcode === \"\" || tempFilterData.nproductcatcode.item.ncategorybasedflow === transactionStatus.NO && tempFilterData.nproductcode === undefined) {\n        if (tempFilterData.nsampletypecode.item.nformcode === formCode.PRODUCTCATEGORY) {\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_PRODUCTNOTAVAILABLE\"\n          }));\n        } else if (tempFilterData.nsampletypecode.item.nformcode === formCode.INSTRUMENTCATEGORY) {\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_INSTRUMENTNOTAVAILABLE\"\n          }));\n        } else if (tempFilterData.nsampletypecode.item.nformcode === formCode.MATERIALCATEGORY) {\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_MATERIALNOTAVAILABLE\"\n          }));\n        } else {\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_PRODUCTNOTAVAILABLE\"\n          }));\n        }\n      } // }\n      else if (tempFilterData.ntreeversiontempcode === \"\") {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_STUDYPLANTEMPLATEISNOTAVAILABLE\"\n        }));\n      } else {\n        const inputParam = {\n          inputData: {\n            userinfo: this.props.Login.userInfo,\n            nsampletypecode: tempFilterData.nsampletypecode.value,\n            nproductcatcode: tempFilterData.nproductcatcode.value,\n            nproductcode: tempFilterData.nproductcatcode.item.ncategorybasedflow === transactionStatus.YES ? -1 : tempFilterData.nproductcode ? tempFilterData.nproductcode.value : -1,\n            ntreeversiontempcode: tempFilterData.ntreeversiontempcode.value,\n            nprojectmastercode: tempFilterData.nsampletypecode.value === SampleType.PROJECTSAMPLETYPE ? tempFilterData.nsampletypecode.item.nprojectspecrequired === transactionStatus.YES ? tempFilterData.nprojectmastercode.value : -1 : -1,\n            filterData: { ...tempFilterData\n            }\n          },\n          historyDataState: this.state.historyDataState\n        };\n        this.props.filterTestGroup(inputParam, this.props.Login.masterData, this.searchRef);\n      }\n    };\n\n    this.onTreeClick = event => {\n      const inputParam = {\n        methodUrl: \"TestGroupSpecification\",\n        screenName: \"IDS_SPECIFICATION\",\n        operation: \"get\",\n        keyName: \"treetemplatemanipulation\",\n        userinfo: this.props.Login.userInfo,\n        selectedRecord: event.item,\n        activeKey: event.key,\n        focusKey: event.key,\n        primaryKey: event.primaryKey,\n        historyDataState: this.state.historyDataState\n      };\n      this.props.getSpecification(inputParam, this.props.Login.masterData, this.searchRef);\n    };\n\n    this.tabDetail = () => {\n      const tabMap = new Map();\n      tabMap.set(\"IDS_FILE\", /*#__PURE__*/React.createElement(TestGroupSpecFile, {\n        controlMap: this.state.controlMap,\n        userRoleControlRights: this.state.userRoleControlRights,\n        userInfo: this.props.Login.userInfo,\n        inputParam: this.props.Login.inputParam,\n        deleteRecord: this.deleteRecord,\n        testGroupSpecFile: this.props.Login.masterData.TestGroupSpecFile || [],\n        selectedSpecification: this.props.Login.masterData.SelectedSpecification,\n        addTestFile: this.addFile,\n        editSpecFile: this.props.editSpecFile,\n        filterData: this.state.filterData,\n        viewTestFile: this.viewTestFile,\n        defaultRecord: this.defaultRecord,\n        screenName: \"IDS_FILE\",\n        viewAttachment: this.props.viewAttachment,\n        settings: this.props.Login.settings,\n        masterData: this.props.Login.masterData,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1202,\n          columnNumber: 13\n        }\n      }));\n      tabMap.set(\"IDS_SPECIFICATIONHISTORY\", /*#__PURE__*/React.createElement(SpecificationHistory, {\n        data: this.props.Login.masterData.TestGroupSpecificationHistory,\n        dataResult: process(this.props.Login.masterData.TestGroupSpecificationHistory || [], this.state.historyDataState),\n        dataState: this.state.historyDataState,\n        dataStateChange: this.historyDataStateChange // testGroupSpecificationHistory={this.props.Login.masterData.TestGroupSpecificationHistory}\n        // dataState={this.props.Login.screenName === \"IDS_SPECIFICATIONHISTORY\" ? this.state.historyDataState : { skip: 0, take: 10 }}\n        ,\n        controlMap: this.state.controlMap,\n        userRoleControlRights: this.state.userRoleControlRights,\n        userInfo: this.props.Login.userInfo,\n        inputParam: this.props.Login.inputParam,\n        screenName: \"IDS_SPECIFICATIONHISTORY\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1221,\n          columnNumber: 13\n        }\n      }));\n      return tabMap;\n    };\n\n    this.historyDataStateChange = event => {\n      this.setState({\n        dataResult: process(this.props.Login.masterData.TestGroupSpecificationHistory || [], event.dataState),\n        historyDataState: event.dataState\n      });\n    };\n\n    this.specDataStateChange = event => {\n      this.setState({\n        dataResult: process(this.props.Login.masterData.TestGroupTestClinicalSpec || [], event.dataState),\n        clinicalspecDataState: event.dataState\n      });\n    };\n\n    this.addFile = (userInfo, operation, ncontrolCode, screenName, modalName, nflag) => {\n      // const testgroupspecification = this.props.Login.masterData.SelectedSpecification;\n      // if (testgroupspecification.napprovalstatus === transactionStatus.DRAFT\n      //     || testgroupspecification.napprovalstatus === transactionStatus.CORRECTION) {\n      //     this.props.addTestFile(userInfo, operation, ncontrolCode, screenName, modalName, nflag);\n      // } else {\n      //     toast.warn(this.props.intl.formatMessage({ id: \"IDS_SPECIFICATIONSTATUSMUSTBEDRAFTCORRECTION\" }));\n      // }\n      const masterData = this.props.Login.masterData;\n      const treeVersionTemplateIndex = masterData[\"TreeVersionTemplate\"].findIndex(x => x[\"ntreeversiontempcode\"] === masterData.selectedNode[\"ntreeversiontempcode\"]);\n      const templateVersionStatus = masterData[\"TreeVersionTemplate\"][treeVersionTemplateIndex].ntransactionstatus;\n\n      if (templateVersionStatus === transactionStatus.RETIRED) {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTEDTEMPLATEISRETIRED\"\n        }));\n      } else {\n        const testgroupspecification = this.props.Login.masterData.SelectedSpecification;\n\n        if (testgroupspecification.napprovalstatus === transactionStatus.DRAFT || testgroupspecification.napprovalstatus === transactionStatus.CORRECTION) {\n          this.props.addTestFile(userInfo, operation, ncontrolCode, screenName, modalName);\n        } else {\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_SPECIFICATIONSTATUSMUSTBEDRAFTCORRECTION\"\n          }));\n        }\n      }\n    };\n\n    this.onTabChange = tabProps => {\n      const screenName = tabProps.screenName;\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          screenName\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.componentRowClick = event => {\n      let masterData = this.props.Login.masterData;\n      masterData[\"SelectedComponent\"] = event.testgroupspecsampletype[0];\n      const inputParam = {\n        testgroupspecsampletype: event.testgroupspecsampletype[0],\n        userInfo: this.props.Login.userInfo\n      };\n      this.props.getTestGroupComponentDetails(inputParam, masterData, this.searchRef);\n    };\n\n    this.deleteTest = deleteParam => {\n      const masterData = this.props.Login.masterData;\n      const treeVersionTemplateIndex = masterData[\"TreeVersionTemplate\"].findIndex(x => x[\"ntreeversiontempcode\"] === masterData.selectedNode[\"ntreeversiontempcode\"]);\n      const templateVersionStatus = masterData[\"TreeVersionTemplate\"][treeVersionTemplateIndex].ntransactionstatus;\n\n      if (templateVersionStatus === transactionStatus.RETIRED) {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTEDTEMPLATEISRETIRED\"\n        }));\n      } else {\n        const testgroupspecification = masterData.SelectedSpecification;\n\n        if (testgroupspecification.napprovalstatus === transactionStatus.DRAFT || testgroupspecification.napprovalstatus === transactionStatus.CORRECTION) {\n          const testgrouptest = deleteParam.props.testgrouptest;\n          const inputParam = {\n            inputData: {\n              testgrouptest,\n              userinfo: this.props.Login.userInfo,\n              testgroupspecification,\n              ntreeversiontempcode: deleteParam.filterData.ntreeversiontempcode.value\n            },\n            classUrl: \"testgroup\",\n            operation: \"delete\",\n            methodUrl: \"Test\",\n            screenName: \"IDS_TEST\",\n            postParam: {\n              inputListName: \"TestGroupTest\",\n              selectedObject: \"SelectedTest\",\n              primaryKeyField: \"ntestgrouptestcode\",\n              primaryKeyValue: testgrouptest.ntestgrouptestcode,\n              fetchUrl: \"testgroup/getTestGroupTest\",\n              fecthInputObject: {\n                userinfo: this.props.Login.userInfo\n              },\n              masterData,\n              searchFieldList,\n              unchangeList: [\"TestGroupSpecification\", \"SelectedSpecification\", \"SampleType\", \"TreeVersionTemplate\", \"ProductCategory\", \"SelectedTest\", \"Product\", \"AgaramTree\", \"OpenNodes\", \"selectedNode\", \"FocusKey\", \"ActiveKey\", \"SelectedComponent\", \"TestGroupSpecSampleType\"] //, isSingleSelect: true\n\n            }\n          };\n\n          if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, deleteParam.ncontrolCode)) {\n            const updateInfo = {\n              typeName: DEFAULT_RETURN,\n              data: {\n                loadEsign: true,\n                screenData: {\n                  inputParam,\n                  masterData\n                },\n                openModal: true,\n                screenName: \"IDS_TEST\",\n                operation: \"delete\",\n                selectedRecord: {}\n              }\n            };\n            this.props.updateStore(updateInfo);\n          } else {\n            this.props.crudMaster(inputParam, masterData, \"openModal\", {});\n          }\n        } else {\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_SPECIFICATIONSTATUSMUSTBEDRAFTCORRECTION\"\n          }));\n        }\n      }\n    };\n\n    this.closeModal = () => {\n      let loadEsign = this.props.Login.loadEsign;\n      let openModal = this.props.Login.openModal;\n      let selectedRecord = this.props.Login.selectedRecord;\n\n      if (loadEsign) {\n        if (this.props.Login.operation === \"delete\" || this.props.Login.operation === \"Default\" || this.props.Login.operation === 'approve' || this.props.Login.operation === 'complete') {\n          loadEsign = false;\n          openModal = false;\n          selectedRecord = {};\n        } else {\n          loadEsign = false;\n          selectedRecord[\"agree\"] = 4;\n          selectedRecord['esignpassword'] = \"\";\n          selectedRecord['esigncomments'] = \"\";\n          selectedRecord['esignreason'] = \"\";\n        }\n      } else {\n        openModal = false;\n        selectedRecord = {};\n      }\n\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          openModal,\n          loadEsign,\n          selectedRecord\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onInputOnChange = (event, caseNo, optional) => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      switch (caseNo) {\n        case 1:\n          if (event.target.type === 'checkbox') {\n            selectedRecord[event.target.name] = event.target.checked === true ? optional[0] : optional[1];\n          } else if (event.target.type === 'radio') {\n            selectedRecord[event.target.name] = optional; // selectedRecord[\"sfilename\"] = \"\";\n          } else {\n            selectedRecord[event.target.name] = event.target.value;\n          }\n\n          this.setState({\n            selectedRecord\n          });\n          break;\n\n        case 2:\n          selectedRecord[event.target.name] = event.target.value;\n          const indexKey = Object.keys(optional)[0];\n          const value = Object.values(optional)[0];\n          const treeData = {\n            ntreeversiontempcode: value.ntreeversiontempcode,\n            npositioncode: value.nlevelno - 1,\n            sleveldescription: event.target.value,\n            ntemptranstestgroupcode: value.ntemptranstestgroupcode,\n            nformcode: 62,\n            schildnode: \"\",\n            nnextchildcode: value.schildnode !== null ? value.schildnode : -1,\n            ntemplatemanipulationcode: value.ntemplatemanipulationcode,\n            isreadonly: value.ntemplatemanipulationcode > 0 ? true : false,\n            slevelformat: value.slevelformat\n          };\n          let treetemplatemanipulation = selectedRecord.treetemplatemanipulation || [];\n          treetemplatemanipulation[indexKey] = treeData;\n          selectedRecord[\"treetemplatemanipulation\"] = treetemplatemanipulation;\n          this.setState({\n            selectedRecord\n          });\n          break;\n\n        default:\n          break;\n      }\n    };\n\n    this.onEsignInputOnChange = event => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (event.target.type === 'checkbox') {\n        selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\n      } else {\n        selectedRecord[event.target.name] = event.target.value;\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onTabChangeRulesEngine = tabProps => {\n      let masterData = this.props.Login.masterData && this.props.Login.masterData;\n      masterData['activeTabName'] = tabProps.activeTabName;\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          masterData\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.tabDetailRulesEngine = () => {\n      let masterData = this.props.Login.masterData || {};\n      let jsonuidata = this.props.Login.masterData.SelectedRulesEngine && this.props.Login.masterData.SelectedRulesEngine['jsonuidata'];\n      const tabMap = new Map();\n      {\n        tabMap.set(\"IDS_Test\", /*#__PURE__*/React.createElement(DataGrid, {\n          key: \"testsectionkey\",\n          primaryKeyField: \"nresultusedmaterialcode\",\n          expandField: \"expanded\",\n          handleExpandChange: this.handleExpandChange,\n          dataResult: this.props.Login.masterData.SelectedRulesEngine && this.props.Login.masterData.SelectedRulesEngine && process(sortData(this.props.Login.masterData.SelectedRulesEngine['jsonuidata']['testInitiateTests'], \"descending\", \"npkAtestparametercode\") || [], this.state.dataStatetestinitiate ? this.state.dataStatetestinitiate : {\n            skip: 0,\n            take: 10\n          }),\n          dataState: this.state.dataStatetestinitiate ? this.state.dataStatetestinitiate : {\n            skip: 0,\n            take: 10\n          },\n          dataStateChange: this.dataStateChangetestinitiateTab,\n          extractedColumnList: [{\n            \"idsName\": \"IDS_TESTNAME\",\n            \"dataField\": \"stestsynonym\",\n            \"width\": \"200px\"\n          }],\n          controlMap: this.state.controlMap,\n          userRoleControlRights: this.state.userRoleControlRights,\n          pageable: true,\n          scrollable: 'scrollable',\n          hideColumnFilter: false,\n          selectedId: 0,\n          deleteParam: {\n            operation: \"delete\"\n          },\n          hasChild: true,\n          childMappingField: 'ntestgrouptestcode',\n          childColumnList: [{\n            \"idsName\": \"IDS_TOSITE\",\n            \"dataField\": \"stositename\",\n            \"width\": \"200px\"\n          }, {\n            \"idsName\": \"IDS_FROMSITE\",\n            \"dataField\": \"sfromsitename\",\n            \"width\": \"200px\"\n          }],\n          childList: this.state.childListMap,\n          activeTabName: \"IDS_Test\",\n          gridHeight: '400px',\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1608,\n            columnNumber: 17\n          }\n        }));\n        tabMap.set(\"IDS_COMMENTS\", /*#__PURE__*/React.createElement(DataGrid, {\n          key: \"testsectionkey\",\n          primaryKeyField: \"nresultusedmaterialcode\",\n          handleExpandChange: this.handleExpandChange,\n          dataResult: this.props.Login.masterData.SelectedRulesEngine && process(sortData(this.props.Login.masterData.SelectedRulesEngine['jsonuidata']['testCommentsTestsTab'], \"descending\", \"npkBtestparametercode\") || [], this.state.dataState ? this.state.dataState : {\n            skip: 0,\n            take: 10\n          }),\n          dataState: this.state.dataState ? this.state.dataState : {\n            skip: 0,\n            take: 10\n          },\n          dataStateChange: this.dataStateChange,\n          controlMap: this.state.controlMap,\n          userRoleControlRights: this.state.userRoleControlRights,\n          pageable: true,\n          scrollable: 'scrollable',\n          hideColumnFilter: false,\n          selectedId: 0,\n          deleteParam: {\n            operation: \"delete\"\n          },\n          childMappingField: 'ntestgrouptestcode',\n          extractedColumnList: [{\n            \"idsName\": \"IDS_DESCRIPTION\",\n            \"dataField\": \"sdescription\",\n            \"width\": \"200px\"\n          }, {\n            \"idsName\": \"IDS_RESULTS\",\n            \"dataField\": \"scomments\",\n            \"width\": \"200px\"\n          }, {\n            \"idsName\": \"IDS_COMMENTSUBTYPE\",\n            \"dataField\": \"scommentsubtype\",\n            \"width\": \"200px\"\n          }, {\n            \"idsName\": \"IDS_COMMENTTYPE\",\n            \"dataField\": \"scommenttype\",\n            \"width\": \"200px\"\n          }, {\n            \"idsName\": \"IDS_TESTNAME\",\n            \"dataField\": \"stestsynonym\",\n            \"width\": \"200px\"\n          }],\n          childList: this.state.childListMap2 && this.state.childListMap2,\n          activeTabName: \"IDS_COMMENTS\",\n          gridHeight: '400px',\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1646,\n            columnNumber: 13\n          }\n        }));\n        tabMap.set(\"IDS_REPEAT\", /*#__PURE__*/React.createElement(DataGrid, {\n          key: \"testsectionkey\",\n          primaryKeyField: \"nresultusedmaterialcode\",\n          dataResult: this.props.Login.masterData.SelectedRulesEngine && process(sortData(this.props.Login.masterData.SelectedRulesEngine['jsonuidata']['testRepeatTestsTab'], \"descending\", \"npkCtestparametercode\") || [], this.state.dataStaterepeatTab ? this.state.dataStaterepeatTab : {\n            skip: 0,\n            take: 10\n          }),\n          dataState: this.state.dataStaterepeatTab ? this.state.dataStaterepeatTab : {\n            skip: 0,\n            take: 10\n          },\n          dataStateChange: this.dataStateChangeRepeatTab,\n          controlMap: this.state.controlMap,\n          userRoleControlRights: this.state.userRoleControlRights,\n          pageable: true,\n          scrollable: 'scrollable',\n          hideColumnFilter: false,\n          selectedId: 0,\n          deleteParam: {\n            operation: \"delete\"\n          },\n          extractedColumnList: [{\n            \"idsName\": \"IDS_TESTNAME\",\n            \"dataField\": \"stestsynonym\",\n            \"width\": \"200px\"\n          }],\n          activeTabName: \"IDS_COMMENTS\",\n          gridHeight: '400px',\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1680,\n            columnNumber: 9\n          }\n        }));\n        tabMap.set(\"IDS_ENFORCERESULT\", /*#__PURE__*/React.createElement(DataGrid, {\n          key: \"testsectionkey\",\n          primaryKeyField: \"nresultusedmaterialcode\",\n          dataResult: this.props.Login.masterData.SelectedRulesEngine && process(sortData(this.props.Login.masterData.SelectedRulesEngine['jsonuidata']['testenforceTestsTab'], \"descending\", \"npkDtestparametercode\") || [], this.state.dataStateChangenforceTab ? this.state.dataStateChangenforceTab : {\n            skip: 0,\n            take: 10\n          }),\n          dataState: this.state.dataStateChangenforceTab ? this.state.dataStateChangenforceTab : {\n            skip: 0,\n            take: 10\n          },\n          dataStateChange: this.dataStateChangenforceTab,\n          controlMap: this.state.controlMap,\n          userRoleControlRights: this.state.userRoleControlRights,\n          pageable: true,\n          scrollable: 'scrollable',\n          hideColumnFilter: false,\n          selectedId: 0,\n          deleteParam: {\n            operation: \"delete\"\n          },\n          extractedColumnList: [{\n            \"idsName\": \"IDS_TESTNAME\",\n            \"dataField\": \"stestsynonym\",\n            \"width\": \"200px\"\n          }, {\n            \"idsName\": \"IDS_PARAMETERS\",\n            \"dataField\": \"sparametersynonym\",\n            \"width\": \"200px\"\n          }, {\n            \"idsName\": \"IDS_PASSFLAG\",\n            \"dataField\": \"sgradename\",\n            \"width\": \"200px\"\n          }, {\n            \"idsName\": \"IDS_RESULTS\",\n            \"dataField\": \"senforcestatuscomment\",\n            \"width\": \"200px\"\n          }],\n          activeTabName: \"IDS_COMMENTS\",\n          gridHeight: '400px',\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1707,\n            columnNumber: 5\n          }\n        }));\n      }\n      return tabMap;\n    };\n\n    this.dataStateChange = (event, ntestgrouptestparametercode) => {\n      let dataStateObject = this.state.dataStateObject || {};\n\n      if (ntestgrouptestparametercode) {\n        dataStateObject = { ...dataStateObject,\n          [ntestgrouptestparametercode]: event.dataState\n        };\n        this.setState({\n          dataStateObject\n        });\n      } else {\n        this.setState({\n          dataState: event.dataState\n        });\n      }\n    };\n\n    this.dataStateChangetestRepeat = event => {\n      this.setState({\n        //  dataResult: process(this.props.Login.queryData, event.dataState),\n        dataStatetestRepeat: event.dataState\n      });\n    };\n\n    this.dataStateChangetestEnforce = event => {\n      this.setState({\n        //  dataResult: process(this.props.Login.queryData, event.dataState),\n        dataStatetestEnforce: event.dataState\n      });\n    };\n\n    this.dataStateChangetestinitiateTab = event => {\n      this.setState({\n        //  dataResult: process(this.props.Login.queryData, event.dataState),\n        dataStatetestinitiate: event.dataState\n      });\n    };\n\n    this.dataStateChangeRepeatTab = event => {\n      this.setState({\n        //  dataResult: process(this.props.Login.queryData, event.dataState),\n        dataStaterepeatTab: event.dataState\n      });\n    };\n\n    this.dataStateChangenforceTab = event => {\n      this.setState({\n        //  dataResult: process(this.props.Login.queryData, event.dataState),\n        dataStateChangenforceTab: event.dataState\n      });\n    };\n\n    this.dataStateChangeMain = event => {\n      this.setState({\n        dataResultMain: process(this.props.Login.queryDataMain, event.dataStateMain),\n        dataStateMain: event.dataStateMain\n      });\n    };\n\n    this.ConfirmDeleteRule = deleteId => {\n      if (this.props.Login.masterData['RulesEngine'] && this.props.Login.masterData['RulesEngine'].length > 0) {\n        this.confirmMessage.confirm(\"deleteMessage\", this.props.intl.formatMessage({\n          id: \"IDS_DELETE\"\n        }), this.props.intl.formatMessage({\n          id: \"IDS_DEFAULTCONFIRMMSG\"\n        }), this.props.intl.formatMessage({\n          id: \"IDS_OK\"\n        }), this.props.intl.formatMessage({\n          id: \"IDS_CANCEL\"\n        }), () => this.handleClickDelete(this.props.Login.masterData, deleteId, \"openModal\"));\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTRULETODELETE\"\n        }));\n      }\n    };\n\n    this.closeModalShow = () => {\n      let openModalPopup = this.props.Login.openModalPopup;\n      let selectedRecord = this.props.Login.selectedRecord || {};\n      selectedRecord['srulename'] = \"\";\n      openModalPopup = false;\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          openModalPopup,\n          selectedRecord\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onsavevalidation = selectedRecord => {\n      let grouplist = selectedRecord[\"groupList\"];\n      let hasAll = true;\n\n      for (var i = 0; i < grouplist.length; i++) {\n        let rules = grouplist[i];\n\n        for (var j = 0; j < rules.length; j++) {\n          let props = [];\n\n          if (rules[j][\"orderresulttype\"] && rules[j][\"orderresulttype\"].value === 1) {\n            props = [\"stestname\", \"ssymbolname\", \"orderresulttype\", \"ndiagnosticcasecode\"];\n          } else if (rules[j][\"orderresulttype\"] && rules[j][\"orderresulttype\"].value === 3) {\n            if (rules[j][\"stestname\"] && rules[j][\"stestname\"]['item']['nparametertypecode'] === parameterType.PREDEFINED) {\n              props = [\"stestname\", \"ssymbolname\", \"orderresulttype\", \"ntestgrouptestpredefcode\"];\n            } else if (rules[j][\"stestname\"] && rules[j][\"stestname\"]['item']['nparametertypecode'] === parameterType.CHARACTER) {\n              props = [\"stestname\", \"ssymbolname\", \"orderresulttype\", \"ntestgrouptestcharcode\"];\n            } else if (rules[j][\"stestname\"] && rules[j][\"stestname\"]['item']['nparametertypecode'] === parameterType.NUMERIC) {\n              props = [\"stestname\", \"ssymbolname\", \"orderresulttype\", \"ntestgrouptestnumericcode\"];\n            } else {\n              if (rules[j][\"orderresulttype\"] && rules[j][\"orderresulttype\"].value === 1) {\n                props = [\"stestname\", \"ssymbolname\", \"orderresulttype\", \"ndiagnosticcasecode\"];\n              } else {\n                props = [\"stestname\", \"ssymbolname\", \"orderresulttype\", \"ngradecode\"];\n              }\n            }\n          } else {\n            props = [\"stestname\", \"ssymbolname\", \"orderresulttype\", \"ngradecode\"];\n          }\n\n          hasAll = props.every(prop => rules[j].hasOwnProperty(prop));\n\n          if (hasAll === false) {\n            break;\n          }\n        }\n\n        if (hasAll === false) {\n          break;\n        }\n      }\n\n      return hasAll;\n    };\n\n    this.save = () => {\n      let inputData = [];\n      let siteObject = this.props.Login.siteObject || {};\n      let testCommentObject = this.props.Login.testCommentObject || {};\n      let reportCommentObject = this.props.Login.reportCommentObject || {};\n      let PredefinedParameterOptions = this.props.Login.masterData.PredefinedParameterOptions || [];\n      let testInitiateTests = this.props.Login.testInitiateTests || [];\n      let testCommentsTests = this.props.Login.testCommentsTests || [];\n      let reportCommentsTests = this.props.Login.reportCommentsTests || [];\n      let testRepeatTests = this.props.Login.testRepeatTests || [];\n      let testenforceTests = this.props.Login.testenforceTests || [];\n      const {\n        selectedRecord\n      } = this.state;\n      let rules = []; //  if (selectedRecord[\"nproductcatcode\"]) {\n\n      if (testInitiateTests.length > 0 || testCommentsTests.length > 0 || testRepeatTests.length > 0 || testenforceTests.length > 0) {\n        if (selectedRecord[\"groupList\"].length > 0) {\n          if (this.onsavevalidation(selectedRecord)) {\n            if (selectedRecord[\"srulename\"] && selectedRecord[\"srulename\"] !== \"\" && this.props.Login.action !== 'update' && this.props.Login.action !== 'IDS_ADDTESTCOMMENTS' && this.props.Login.action !== 'IDS_ADDREPORTCOMMENTS' && this.props.Login.action !== 'IDS_ADDTEST' && this.props.Login.action !== 'IDS_ADDSITE') {\n              if (selectedRecord[\"groupList\"]) {\n                let groupList = [];\n                let outcomeList = {};\n                groupList = selectedRecord[\"groupList\"];\n                outcomeList['groupList'] = groupList;\n                outcomeList['addGroupList'] = this.props.Login.addGroupList;\n                outcomeList['testInitiateTests'] = this.props.Login.testInitiateTests && this.props.Login.testInitiateTests;\n                outcomeList['testCommentsTests'] = this.props.Login.testCommentsTests && this.props.Login.testCommentsTests;\n                outcomeList['testRepeatTests'] = this.props.Login.testRepeatTests && this.props.Login.testRepeatTests;\n                outcomeList['testenforceTests'] = this.props.Login.testenforceTests && this.props.Login.testenforceTests;\n                outcomeList['reportCommentsTests'] = this.props.Login.reportCommentsTests && this.props.Login.reportCommentsTests;\n                outcomeList['siteObject'] = this.props.Login.siteObject && this.props.Login.siteObject;\n                outcomeList['testCommentObject'] = this.props.Login.testCommentObject && this.props.Login.testCommentObject;\n                outcomeList['reportCommentObject'] = this.props.Login.reportCommentObject && this.props.Login.reportCommentObject;\n                outcomeList['testInitiateSiteTab'] = this.props.Login.masterData.testInitiateSiteTab && this.props.Login.masterData.testInitiateSiteTab;\n                outcomeList['testCommentsTestsTab'] = this.props.Login.masterData.testCommentsTestsTab && this.props.Login.masterData.testCommentsTestsTab;\n                outcomeList['reportCommentsTestsTab'] = this.props.Login.reportCommentsTestsTab && this.props.Login.reportCommentsTestsTab;\n                outcomeList['testRepeatTestsTab'] = this.props.Login.masterData['testRepeatTestsTab'] && this.props.Login.masterData['testRepeatTestsTab'];\n                outcomeList['testenforceTestsTab'] = this.props.Login.masterData['testenforceTestsTab'] && this.props.Login.masterData['testenforceTestsTab'];\n                outcomeList['PredefinedParameterOptions'] = PredefinedParameterOptions; // outcomeList['nproductcatcode'] = selectedRecord['nproductcatcode']\n\n                outcomeList['ntestgrouptestcode'] = this.props.Login.masterData.SelectedTest.ntestgrouptestcode; // outcomeList['nallottedspeccode'] = selectedRecord['nallottedspeccode']\n                // outcomeList['ncomponentcode'] = selectedRecord['ncomponentcode'] \n\n                outcomeList['groupListJoins'] = selectedRecord['groupListJoins'];\n                let ruleEngineLayout = [];\n                let ruleEngineLayoutObject = [];\n                let groupRuleObject = {};\n                groupList.map(List => {\n                  if (List.hasOwnProperty('button_or') && List['button_or'] === true) {\n                    if (List.hasOwnProperty('button_not') && List['button_not'] === true) {\n                      groupRuleObject['button_not_button_or'] = List;\n                    } else {\n                      groupRuleObject['button_or'] = List;\n                    } // groupRuleObject['button_or'] = List\n\n\n                    ruleEngineLayout.push(groupRuleObject);\n                    groupRuleObject = {};\n                  }\n\n                  if (List.hasOwnProperty('button_and') && List['button_and'] === true) {\n                    if (List.hasOwnProperty('button_not') && List['button_not'] === true) {\n                      groupRuleObject['button_not_button_and'] = List;\n                    } else {\n                      groupRuleObject['button_and'] = List;\n                    } //  groupRuleObject['button_and'] = List\n\n\n                    ruleEngineLayout.push(groupRuleObject);\n                    groupRuleObject = {};\n                  }\n                });\n                ruleEngineLayoutObject = groupList.hasOwnProperty('button_or') && groupList['button_or'] === true ? {\n                  'button_or': ruleEngineLayout\n                } : {\n                  'button_and': ruleEngineLayout\n                };\n                console.log('savelist--->', JSON.stringify(ruleEngineLayoutObject)); //  inputData['nproductcatcode'] = this.props.Login.masterData.SelectedProductCategory.nproductcatcode\n                //  inputData['nproductcatcode'] = selectedRecord['nproductcatcode'].value\n\n                inputData['ntestgrouptestcode'] = this.props.Login.masterData.SelectedTest.ntestgrouptestcode; // inputData['nallottedspeccode'] = selectedRecord['nallottedspeccode'].value\n                // inputData['ncomponentcode'] = selectedRecord['ncomponentcode'].value\n\n                inputData['srulename'] = selectedRecord['srulename'];\n                inputData['outcomeList'] = JSON.stringify(outcomeList);\n                inputData['jsondata'] = JSON.stringify(ruleEngineLayout);\n                inputData['userinfo'] = this.props.Login.userInfo;\n\n                if (this.props.Login.operation === 'update') {\n                  inputData['ntestgrouprulesenginecode'] = this.props.Login.masterData.SelectedRulesEngine['ntestgrouprulesenginecode'];\n                }\n\n                const inputParam = {\n                  classUrl: \"testgrouprulesengine\",\n                  methodUrl: \"TestGroupRulesEngine\",\n                  displayName: this.props.Login.inputParam.displayName,\n                  inputData: inputData,\n                  operation: this.props.Login.operation === 'create' ? 'create' : 'update'\n                };\n                this.props.crudMaster(inputParam, this.props.Login.masterData, \"openPortalModal\");\n              } else {\n                toast.info(this.props.intl.formatMessage({\n                  id: \"IDS_PLEASEADDRULE\"\n                }));\n              }\n            } else {\n              selectedRecord['srulename'] = selectedRecord['srulenamecopy'] || \"\";\n              const updateInfo = {\n                typeName: DEFAULT_RETURN,\n                data: {\n                  openModalPopup: true,\n                  selectedRecord,\n                  action: \"IDS_SAVERULEMODAL\",\n                  openmodalsavePopup: true\n                }\n              };\n              this.props.updateStore(updateInfo); //   toast.info(this.props.intl.formatMessage({ id: \"IDS_ENTERRULESENGINENAME\" }));\n            }\n          } else {\n            toast.info(this.props.intl.formatMessage({\n              id: \"IDS_COMPLETETHERULETOSAVE\"\n            }));\n          }\n        } else {\n          toast.info(this.props.intl.formatMessage({\n            id: \"IDS_ATLEASTADDONERULE\"\n          }));\n        }\n      } else {\n        toast.info(this.props.intl.formatMessage({\n          id: \"IDS_ATLEASTADDONEOUTCOME\"\n        }));\n      }\n    };\n\n    this.onOutcomeChange = (comboData, index) => {\n      const {\n        selectedRecord\n      } = this.state;\n      selectedRecord[\"outComeList\"] = [];\n      selectedRecord[\"outComeList\"][index] = [];\n      selectedRecord[\"outComeList\"][index] = comboData;\n\n      if (selectedRecord[\"outComeList\"][index]) {\n        this.setState({\n          selectedRecord\n        });\n      }\n    };\n\n    this.writtenRules = data => {\n      let selectedRecord = this.state.selectedRecord || {};\n      let grouplist = selectedRecord[\"groupList\"];\n      let activeTabIndex = this.props.Login.activeTabIndex || 0;\n\n      if (activeTabIndex === 1) {\n        let boolean = grouplist.every(x => x.every(y => y['stestname']['item'].ntestgrouptestcode !== data['item'].ntestgrouptestcode));\n\n        if (boolean) {\n          return data;\n        }\n      } else {\n        let boolean = grouplist.some(x => x.some(y => y['stestname']['item'].ntestgrouptestcode === data['item'].ntestgrouptestcode));\n\n        if (boolean) {\n          return data;\n        }\n      }\n    };\n\n    this.selectedTestRemove = data => {\n      let activeTabIndex = this.props.Login.activeTabIndex || 0;\n\n      if (activeTabIndex === 1) {\n        if (this.props.Login.masterData.SelectedTest.ntestgrouptestcode !== data['item'].ntestgrouptestcode) {\n          return data;\n        }\n      } else {\n        if (this.props.Login.masterData.SelectedTest.ntestgrouptestcode === data['item'].ntestgrouptestcode) {\n          return data;\n        }\n      }\n    };\n\n    this.outComeTestsRemoveFromRules = data => {\n      let testInitiateTests = this.props.Login.testInitiateTests;\n      let boolean = testInitiateTests.every(x => x['ntestgrouptestcode'] !== data['item'].ntestgrouptestcode);\n\n      if (boolean) {\n        return data;\n      }\n    };\n\n    this.addTest = tabName => {\n      let openModalPopup = this.props.Login.openModalPopup;\n      let action = this.props.Login.action;\n      let selectedRecord = this.props.Login.selectedRecord || {};\n      let rulesOption = this.props.Login.masterData.rulesOption || [];\n      let testInitiateTestCombo = this.props.Login.masterData.testInitiateTestCombo || [];\n      let testCommentsTestCombo = this.props.Login.masterData.testCommentsTestCombo || [];\n      let testRepeatTestCombo = this.props.Login.masterData.testRepeatTestCombo || [];\n      let testenforceTestCombo = this.props.Login.masterData.testenforceTestCombo || [];\n\n      if (tabName == 'IDS_Test') {\n        testInitiateTestCombo = testInitiateTestCombo.filter(this.selectedTestRemove);\n        testInitiateTestCombo = testInitiateTestCombo.filter(this.writtenRules);\n      } else if (tabName == 'IDS_COMMENTS') {\n        let selectedTestTempArray = [];\n        selectedTestTempArray = testCommentsTestCombo.filter(this.selectedTestRemove);\n        testCommentsTestCombo = testCommentsTestCombo.filter(this.writtenRules);\n        let duplicatePresent = selectedTestTempArray.some(x => testCommentsTestCombo.some(y => y['item'].ntestgrouptestcode === x['item'].ntestgrouptestcode));\n\n        if (duplicatePresent) {\n          testCommentsTestCombo = testCommentsTestCombo;\n        } else {\n          testCommentsTestCombo = [...testCommentsTestCombo, ...selectedTestTempArray];\n        }\n      } else if (tabName == 'IDS_REPEAT') {\n        let selectedTestTempArray = [];\n        selectedTestTempArray = testRepeatTestCombo.filter(this.selectedTestRemove);\n        testRepeatTestCombo = testRepeatTestCombo.filter(this.writtenRules);\n        let duplicatePresent = selectedTestTempArray.some(x => testRepeatTestCombo.some(y => y['item'].ntestgrouptestcode === x['item'].ntestgrouptestcode));\n\n        if (duplicatePresent) {\n          testRepeatTestCombo = testRepeatTestCombo;\n        } else {\n          testRepeatTestCombo = [...testRepeatTestCombo, ...selectedTestTempArray];\n        }\n      } else if (tabName == 'IDS_ENFORCERESULT') {\n        let selectedTestTempArray = [];\n        selectedTestTempArray = testenforceTestCombo.filter(this.selectedTestRemove);\n        testenforceTestCombo = testenforceTestCombo.filter(this.writtenRules);\n        let duplicatePresent = selectedTestTempArray.some(x => testenforceTestCombo.some(y => y['item'].ntestgrouptestcode === x['item'].ntestgrouptestcode));\n\n        if (duplicatePresent) {\n          testenforceTestCombo = testenforceTestCombo;\n        } else {\n          testenforceTestCombo = [...testenforceTestCombo, ...selectedTestTempArray];\n        }\n      } else {}\n\n      selectedRecord['ntestgrouptestcode'] && delete selectedRecord['ntestgrouptestcode'];\n      selectedRecord['nsampletestcommentscode'] && delete selectedRecord['nsampletestcommentscode'];\n      selectedRecord['ncommentsubtypecode'] && delete selectedRecord['ncommentsubtypecode'];\n      selectedRecord['ncommenttypecode'] && delete selectedRecord['ncommenttypecode'];\n      selectedRecord['sgeneralcomments'] && delete selectedRecord['sgeneralcomments'];\n      selectedRecord['needoutsource'] && delete selectedRecord['needoutsource'];\n      selectedRecord['sdescription'] && delete selectedRecord['sdescription'];\n      selectedRecord['ntestgrouptestparametercode'] && delete selectedRecord['ntestgrouptestparametercode'];\n      selectedRecord['senforcestatuscomment'] && delete selectedRecord['senforcestatuscomment'];\n      selectedRecord['ngradecode'] && delete selectedRecord['ngradecode'];\n      selectedRecord['nfromsitecode'] && delete selectedRecord['nfromsitecode'];\n      selectedRecord['ntositecode'] && delete selectedRecord['ntositecode'];\n\n      if (this.props.Login.addGroupList.length > 0) {\n        action = \"IDS_ADDTEST\";\n        openModalPopup = true;\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            openModalPopup,\n            action,\n            selectedRecord,\n            openmodalsavePopup: false,\n            testInitiateTestCombo,\n            testCommentsTestCombo,\n            testRepeatTestCombo,\n            testenforceTestCombo\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_PLEASEADDRULETOADDOUTCOME\"\n        }));\n      }\n    };\n\n    this.onRuleChange = (comboData, fieldName, groupIndex, index) => {\n      let PredefinedParameterOptions = this.props.Login.masterData.PredefinedParameterOptions || [];\n      const {\n        selectedRecord\n      } = this.state;\n      this.clearSelectedRule(selectedRecord, index);\n\n      if (selectedRecord[\"groupList\"][groupIndex][index][fieldName] && selectedRecord[\"groupList\"][groupIndex][index][fieldName].value !== comboData.value) {\n        selectedRecord[\"groupList\"][groupIndex][index]['ndiagnosticcasecode'] && delete selectedRecord[\"groupList\"][groupIndex][index]['ndiagnosticcasecode'];\n        selectedRecord[\"groupList\"][groupIndex][index]['ngradecode'] && delete selectedRecord[\"groupList\"][groupIndex][index]['ngradecode'];\n        selectedRecord[\"groupList\"][groupIndex][index]['ntestgrouptestpredefcode'] && delete selectedRecord[\"groupList\"][groupIndex][index]['ntestgrouptestpredefcode'];\n        selectedRecord[\"groupList\"][groupIndex][index]['ntestgrouptestcharcode'] && delete selectedRecord[\"groupList\"][groupIndex][index]['ntestgrouptestcharcode'];\n        selectedRecord[\"groupList\"][groupIndex][index]['ntestgrouptestnumericcode'] && delete selectedRecord[\"groupList\"][groupIndex][index]['ntestgrouptestnumericcode'];\n        selectedRecord[\"groupList\"][groupIndex][index]['ssymbolname'] && delete selectedRecord[\"groupList\"][groupIndex][index]['ssymbolname'];\n      }\n\n      selectedRecord[\"groupList\"][groupIndex][index][fieldName] = comboData;\n\n      if (selectedRecord[\"groupList\"][groupIndex][index]['orderresulttype']) {\n        if (selectedRecord[\"groupList\"][groupIndex][index]['orderresulttype'].value === 3) {\n          let nparametertypecode = selectedRecord[\"groupList\"][groupIndex][index][fieldName]['item']['nparametertypecode'];\n\n          if (nparametertypecode === parameterType.PREDEFINED) {\n            this.props.getParameterResultValue(selectedRecord[\"groupList\"][groupIndex][index], groupIndex, index, PredefinedParameterOptions, selectedRecord, this.props.Login.masterData, this.props.Login.userInfo);\n          } else {\n            if (selectedRecord[\"groupList\"][groupIndex][index][fieldName]) {\n              this.setState({\n                selectedRecord,\n                groupIndex,\n                index\n              });\n            }\n          }\n        } else {\n          if (selectedRecord[\"groupList\"][groupIndex][index][fieldName]) {\n            this.setState({\n              selectedRecord,\n              groupIndex,\n              index\n            });\n          }\n        }\n      } else {\n        if (selectedRecord[\"groupList\"][groupIndex][index][fieldName]) {\n          this.setState({\n            selectedRecord,\n            groupIndex,\n            index\n          });\n        }\n      }\n    };\n\n    this.onRuleInputChange = (event, fieldName, groupIndex, index) => {\n      const {\n        selectedRecord\n      } = this.state;\n      selectedRecord[\"groupList\"][groupIndex][index][fieldName] = event.target.value;\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onRuleNumericInputOnChange = (event, fieldName, groupIndex, index) => {\n      if (event !== 0) {\n        const {\n          selectedRecord\n        } = this.state;\n        selectedRecord[\"groupList\"][groupIndex][index][fieldName] = event;\n        this.setState({\n          selectedRecord\n        });\n      }\n    };\n\n    this.onMasterDataChange = (comboData, fieldName, groupIndex, index) => {\n      const {\n        selectedRecord\n      } = this.state;\n      let PredefinedParameterOptions = this.props.Login.masterData.PredefinedParameterOptions || [];\n      let isResultorOrderType = [];\n      let optionsByRule = [];\n\n      if (this.state.optionsByRule && this.state.optionsByRule.length > 0) {\n        optionsByRule = this.state.optionsByRule;\n      } else {\n        optionsByRule[groupIndex] = [];\n        optionsByRule[groupIndex][index] = [];\n      }\n\n      if (this.state.isResultorOrderType && this.state.isResultorOrderType.length > 0) {\n        isResultorOrderType = this.state.isResultorOrderType;\n      } else {\n        isResultorOrderType[groupIndex] = [];\n        isResultorOrderType[groupIndex][index] = [];\n      }\n\n      if (fieldName !== 'ndiagnosticcasecode' && fieldName !== 'ngradecode' && fieldName !== 'ntestgrouptestpredefcode' && fieldName !== 'ntestgrouptestcharcode' && fieldName !== 'ntestgrouptestnumericcode') {\n        if (selectedRecord[\"groupList\"][groupIndex][index][fieldName] && selectedRecord[\"groupList\"][groupIndex][index][fieldName].value !== comboData.value) {\n          selectedRecord[\"groupList\"][groupIndex][index]['ndiagnosticcasecode'] && delete selectedRecord[\"groupList\"][groupIndex][index]['ndiagnosticcasecode'];\n          selectedRecord[\"groupList\"][groupIndex][index]['ngradecode'] && delete selectedRecord[\"groupList\"][groupIndex][index]['ngradecode'];\n          selectedRecord[\"groupList\"][groupIndex][index]['ntestgrouptestpredefcode'] && delete selectedRecord[\"groupList\"][groupIndex][index]['ntestgrouptestpredefcode'];\n          selectedRecord[\"groupList\"][groupIndex][index]['ntestgrouptestcharcode'] && delete selectedRecord[\"groupList\"][groupIndex][index]['ntestgrouptestcharcode'];\n          selectedRecord[\"groupList\"][groupIndex][index]['ntestgrouptestnumericcode'] && delete selectedRecord[\"groupList\"][groupIndex][index]['ntestgrouptestnumericcode'];\n          selectedRecord[\"groupList\"][groupIndex][index]['ssymbolname'] && delete selectedRecord[\"groupList\"][groupIndex][index]['ssymbolname'];\n        }\n\n        selectedRecord[\"groupList\"][groupIndex][index][fieldName] = comboData;\n\n        if (isResultorOrderType[groupIndex] === undefined) {\n          isResultorOrderType[groupIndex] = [];\n          isResultorOrderType[groupIndex][index] = [];\n        }\n\n        isResultorOrderType[groupIndex][index] = comboData.value;\n\n        if (optionsByRule[groupIndex] === undefined) {\n          optionsByRule[groupIndex] = [];\n          optionsByRule[groupIndex][index] = [];\n        }\n\n        if (isResultorOrderType[groupIndex][index] === 1) {\n          optionsByRule[groupIndex][index] = this.props.Login.masterData.DiagnosticCaseList;\n        } else if (isResultorOrderType[groupIndex][index] === 3) {\n          let nparametertypecode = selectedRecord[\"groupList\"][groupIndex][index]['stestname']['item']['nparametertypecode'];\n\n          if (nparametertypecode === parameterType.PREDEFINED) {\n            this.props.getParameterResultValue(selectedRecord[\"groupList\"][groupIndex][index], groupIndex, index, PredefinedParameterOptions, selectedRecord, this.props.Login.masterData, this.props.Login.userInfo);\n          } else {\n            optionsByRule[groupIndex][index] = this.props.Login.masterData.GradeList;\n          }\n        } else {\n          optionsByRule[groupIndex][index] = this.props.Login.masterData.GradeList;\n        }\n\n        this.setState({\n          selectedRecord,\n          isResultorOrderType,\n          optionsByRule\n        });\n      } else {\n        selectedRecord[\"groupList\"][groupIndex][index][fieldName] = comboData;\n        this.setState({\n          selectedRecord\n        });\n      }\n    };\n\n    this.addRule = (type, groupIndex) => {\n      const {\n        selectedRecord\n      } = this.state;\n      let viewColumnListByRule = this.props.Login.viewColumnListByRule || [];\n      const addGroupList = this.props.Login.addGroupList || [];\n      const arrayLength = addGroupList[groupIndex];\n      addGroupList[groupIndex] = arrayLength + 1;\n      selectedRecord[\"groupList\"][groupIndex][arrayLength] = {};\n      viewColumnListByRule = this.props.Login.viewColumnList || this.props.Login.databaseviewList;\n      ;\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          addGroupList,\n          viewColumnListByRule,\n          activeTabIndex: 0\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.paneSizeChange = d => {\n      this.setState({\n        splitChangeWidthPercentage: d\n      });\n    };\n\n    this.addComments = () => {\n      let openModalPopup = this.props.Login.openModalPopup;\n      let action = this.props.Login.action;\n      let selectedParameterRulesEngine = this.props.Login.masterData.selectedParameterRulesEngine || [];\n      let testparameter = this.props.Login.masterData.testCommentsTestCombo || [];\n      let selectedRecord = this.props.Login.selectedRecord || {};\n      selectedRecord['ntestgrouptestcode'] = {};\n      selectedRecord['ntestgrouptestcode'] = testparameter.filter(x => {\n        return x.value === selectedParameterRulesEngine.ntestgrouptestcode;\n      })[0];\n      delete selectedRecord['nsampletestcommentscode'];\n      delete selectedRecord['ncommentsubtypecode'];\n      delete selectedRecord['ncommenttypecode'];\n      delete selectedRecord['sgeneralcomments'];\n      delete selectedRecord['sdescription'];\n\n      if (this.props.Login.addGroupList.length > 0) {\n        if (this.props.Login.activeTabIndex === 2) {\n          action = \"IDS_ADDTESTCOMMENTS\";\n        } else {\n          action = \"IDS_ADDREPORTCOMMENTS\";\n        }\n\n        openModalPopup = true;\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            openModalPopup,\n            action,\n            selectedRecord,\n            openmodalsavePopup: false\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_PLEASEADDRULETOADDOUTCOME\"\n        }));\n      }\n    };\n\n    this.addModalSite = () => {\n      let openModalPopup = this.props.Login.openModalPopup;\n      let selectedParameterRulesEngine = this.props.Login.masterData.selectedParameterRulesEngine || [];\n      let testparameter = this.props.Login.masterData.testInitiateTestCombo || [];\n      let selectedRecord = this.props.Login.selectedRecord || {};\n      selectedRecord['ntestgrouptestcode'] = {};\n      selectedRecord['ntestgrouptestcode'] = testparameter.filter(x => {\n        return x.value === selectedParameterRulesEngine.ntestgrouptestcode;\n      })[0];\n      selectedRecord['nfromsitecode'] && delete selectedRecord['nfromsitecode'];\n      selectedRecord['ntositecode'] && delete selectedRecord['ntositecode'];\n      openModalPopup = true;\n      let action = this.props.Login.action;\n      action = \"IDS_ADDSITE\";\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          selectedRecord,\n          openModalPopup,\n          action,\n          openmodalsavePopup: false\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.modalsaveClick = () => {\n      let needoutsource = this.props.Login.needoutsource || {};\n      let selectedRecord = this.state.selectedRecord || {};\n      let masterData = this.props.Login.masterData || {};\n      let testInitiateTests = this.props.Login.testInitiateTests || [];\n      let testCommentsTests = this.props.Login.testCommentsTests || [];\n      let testRepeatTests = this.props.Login.testRepeatTests || [];\n      let testenforceTests = this.props.Login.testenforceTests || [];\n      let reportCommentsTests = this.props.Login.reportCommentsTests || [];\n      let siteObject = this.props.Login.siteObject || {};\n      let testCommentObject = this.props.Login.testCommentObject || {};\n      let reportCommentObject = this.props.Login.reportCommentObject || {};\n      let testInitiateTestsTemp = [];\n      let testCommentsTestsTemp = [];\n      let reportCommentsTestsTemp = [];\n      let testInitiateSiteTemp = [];\n      let testCommentsTestsTab = this.props.Login.masterData.testCommentsTestsTab || [];\n      let reportCommentsTestsTab = this.props.Login.reportCommentsTestsTab || [];\n      let testInitiateSiteTab = this.props.Login.masterData.testInitiateSiteTab || [];\n      let testInitiateTestOptions = this.props.Login.testInitiateTestOptions || [];\n      let testCommentsTestOptions = this.props.Login.testCommentsTestOptions || [];\n      let reportCommentsTestOptions = this.props.Login.reportCommentsTestOptions || [];\n      let testInitiateTestdeletedOptions = this.props.Login.testInitiateTestdeletedOptions || [];\n      let testCommentsTestdeletedOptions = this.props.Login.testCommentsTestdeletedOptions || [];\n      let reportCommentsTestdeletedOptions = this.props.Login.reportCommentsTestdeletedOptions || [];\n      let updateInfo = {};\n\n      if (this.props.Login.action === 'IDS_ADDTEST') {\n        let npkAtestparametercode = 0;\n        let npkBtestparametercode = 0;\n        let npkCtestparametercode = 0;\n        let npkDtestparametercode = 0;\n\n        if (this.props.Login.activeTabIndex === 1) {\n          let isduplicate = {};\n          isduplicate = testInitiateTests.filter(x => x.ntestgrouptestcode === selectedRecord['ntestgrouptestcode'].item['ntestgrouptestcode']);\n\n          if (isduplicate.length === 0) {\n            masterData['testParameter'] = {};\n            npkAtestparametercode = this.props.Login.npkAtestparametercode || 0;\n            npkAtestparametercode++;\n            selectedRecord['ntestgrouptestcode'].item['npkAtestparametercode'] = npkAtestparametercode;\n            testInitiateTests.push(selectedRecord['ntestgrouptestcode'].item);\n            masterData['testParameter'] = sortData(testInitiateTests, 'descending', 'npkAtestparametercode');\n            masterData['selectedParameterRulesEngine'] = selectedRecord['ntestgrouptestcode'].item;\n            delete selectedRecord['ntestgrouptestcode'];\n          } else {\n            return toast.warn(this.props.intl.formatMessage({\n              id: \"IDS_ALREADYEXISTS\"\n            }));\n          }\n        }\n\n        if (this.props.Login.activeTabIndex === 2) {\n          let isduplicate = {};\n          isduplicate = testCommentsTests.filter(x => x.ntestgrouptestcode === selectedRecord['ntestgrouptestcode'].item['ntestgrouptestcode']);\n\n          if (isduplicate.length === 0) {\n            masterData['testParameterComments'] = {};\n            npkBtestparametercode = this.props.Login.npkBtestparametercode || 0;\n            npkBtestparametercode++;\n            selectedRecord['ntestgrouptestcode'].item['npkBtestparametercode'] = npkAtestparametercode;\n            selectedRecord['ntestgrouptestcode'].item['sdescription'] = selectedRecord['sdescription'] ? selectedRecord['sdescription'] : '-';\n            testCommentsTests.push(selectedRecord['ntestgrouptestcode'].item);\n            masterData['testParameterComments'] = sortData(testCommentsTests, 'descending', 'npkBtestparametercode');\n            masterData['selectedParameterRulesEngine'] = selectedRecord['ntestgrouptestcode'].item; //delete selectedRecord['ntestgrouptestcode']\n          } else {\n            return toast.warn(this.props.intl.formatMessage({\n              id: \"IDS_ALREADYEXISTS\"\n            }));\n          }\n        }\n\n        if (this.props.Login.activeTabIndex === 3) {\n          let isduplicate = {};\n          isduplicate = testRepeatTests.filter(x => x.ntestgrouptestcode === selectedRecord['ntestgrouptestcode'].item['ntestgrouptestcode']);\n\n          if (isduplicate.length === 0) {\n            masterData['testRepeat'] = {};\n            npkCtestparametercode = this.props.Login.npkCtestparametercode || 0;\n            npkCtestparametercode++;\n            selectedRecord['ntestgrouptestcode'].item['npkCtestparametercode'] = npkCtestparametercode;\n            selectedRecord['ntestgrouptestcode'].item['nrepeatcountno'] = selectedRecord['nrepeatcountno'] ? selectedRecord['nrepeatcountno'] : 1;\n            testRepeatTests.push(selectedRecord['ntestgrouptestcode'].item);\n            masterData['testRepeatTestsTab'] = sortData(testRepeatTests, 'descending', 'npkCtestparametercode');\n            masterData['testRepeat'] = sortData(testRepeatTests, 'descending', 'npkCtestparametercode');\n            masterData['selectedParameterRulesEngine'] = selectedRecord['ntestgrouptestcode'].item;\n            delete selectedRecord['ntestgrouptestcode'];\n          } else {\n            return toast.warn(this.props.intl.formatMessage({\n              id: \"IDS_ALREADYEXISTS\"\n            }));\n          }\n        }\n\n        if (this.props.Login.activeTabIndex === 4) {\n          let isduplicate = {};\n          isduplicate = testenforceTests.filter(x => x.ntestgrouptestcode === selectedRecord['ntestgrouptestcode'].item['ntestgrouptestcode']);\n\n          if (isduplicate.length === 0) {\n            masterData['testenforceTests'] = {};\n            npkDtestparametercode = this.props.Login.npkDtestparametercode || 0;\n            npkDtestparametercode++;\n            selectedRecord['ntestgrouptestcode'].item['sparametersynonym'] = selectedRecord['ntestgrouptestparametercode'] && selectedRecord['ntestgrouptestparametercode'].label;\n            selectedRecord['ntestgrouptestcode'].item['ngradecode'] = selectedRecord['ngradecode'] && selectedRecord['ngradecode'].value;\n            selectedRecord['ntestgrouptestcode'].item['sgradename'] = selectedRecord['ngradecode'] && selectedRecord['ngradecode'].label;\n            selectedRecord['ntestgrouptestcode'].item['ntestgrouptestparametercode'] = selectedRecord['ntestgrouptestparametercode'] && selectedRecord['ntestgrouptestparametercode'].value;\n            selectedRecord['ntestgrouptestcode'].item['senforcestatuscomment'] = selectedRecord['senforcestatuscomment'] && selectedRecord['senforcestatuscomment'];\n            selectedRecord['ntestgrouptestcode'].item['npkDtestparametercode'] = npkDtestparametercode;\n            testenforceTests.push(selectedRecord['ntestgrouptestcode'].item);\n            masterData['testenforceTestsTab'] = sortData(testenforceTests, 'descending', 'npkDtestparametercode');\n            masterData['testenforceTests'] = sortData(testenforceTests, 'descending', 'npkDtestparametercode'); //  masterData['selectedParameterRulesEngine'] = selectedRecord['ntestgrouptestcode'].item\n\n            delete selectedRecord['ntestgrouptestcode'];\n          } else {\n            return toast.warn(this.props.intl.formatMessage({\n              id: \"IDS_ALREADYEXISTS\"\n            }));\n          }\n        }\n\n        updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            openModalPopup: false,\n            masterData,\n            testInitiateTests,\n            testCommentsTests,\n            reportCommentsTests,\n            npkAtestparametercode,\n            npkBtestparametercode,\n            npkCtestparametercode,\n            testInitiateTestOptions,\n            testInitiateTestdeletedOptions,\n            selectedRecord,\n            testRepeatTests,\n            testenforceTests\n          }\n        };\n      }\n\n      if (selectedRecord['nsampletestcommentscode'] || selectedRecord['sgeneralcomments']) {\n        masterData['testComments'] = {};\n        let npKAsampletestcommentscode = 0;\n        let object = {\n          ncommentsubtypecode: selectedRecord['ncommentsubtypecode']['value'],\n          scommentsubtype: selectedRecord['ncommentsubtypecode']['label'],\n          stestsynonym: selectedRecord['ntestgrouptestcode']['label'],\n          ncommenttypecode: selectedRecord['ncommenttypecode']['value'],\n          scommenttype: selectedRecord['ncommenttypecode']['label'],\n          nsampletestcommentscode: selectedRecord['nsampletestcommentscode'] ? selectedRecord['nsampletestcommentscode'].value : -1,\n          // spredefinedname: selectedRecord['nsampletestcommentscode'] ? selectedRecord['nsampletestcommentscode'].label : \"-\",\n          // sgeneralcomments: selectedRecord['sgeneralcomments'] ? selectedRecord['sgeneralcomments'] : \"-\",\n          scomments: selectedRecord['nsampletestcommentscode'] ? selectedRecord['nsampletestcommentscode'].label : selectedRecord['sgeneralcomments'] ? selectedRecord['sgeneralcomments'] : \"-\",\n          sdescription: selectedRecord['sdescription'] ? selectedRecord['sdescription'] : '-',\n          stestparametersynonym: masterData.selectedParameterRulesEngine.stestparametersynonym,\n          ntestgrouptestcode: masterData.selectedParameterRulesEngine.ntestgrouptestcode\n        };\n\n        if (testCommentObject.hasOwnProperty(masterData.selectedParameterRulesEngine.ntestgrouptestcode)) {\n          npKAsampletestcommentscode = this.props.Login.npKAsampletestcommentscode;\n          npKAsampletestcommentscode++;\n          object = { ...object,\n            npKAsampletestcommentscode: npKAsampletestcommentscode\n          };\n          testCommentsTestsTemp = testCommentObject[masterData.selectedParameterRulesEngine.ntestgrouptestcode];\n          testCommentsTestsTemp.push(object);\n          testCommentsTestsTab.push(object);\n          testCommentObject[masterData.selectedParameterRulesEngine.ntestgrouptestcode] = sortData(testCommentsTestsTemp, 'descending', 'npKAsampletestcommentscode');\n          delete selectedRecord['nsampletestcommentscode'];\n          delete selectedRecord['ncommentsubtypecode'];\n          delete selectedRecord['ncommenttypecode'];\n          delete selectedRecord['sgeneralcomments'];\n        } else {\n          npKAsampletestcommentscode++;\n          object = { ...object,\n            npKAsampletestcommentscode: npKAsampletestcommentscode\n          };\n          testCommentsTestsTemp.push(object);\n          testCommentsTestsTab.push(object);\n          testCommentObject[masterData.selectedParameterRulesEngine.ntestgrouptestcode] = sortData(testCommentsTestsTemp, 'descending', 'npKAsampletestcommentscode');\n          delete selectedRecord['nsampletestcommentscode'];\n          delete selectedRecord['ncommentsubtypecode'];\n          delete selectedRecord['ncommenttypecode'];\n          delete selectedRecord['sgeneralcomments'];\n        }\n\n        masterData['testComments'] = testCommentObject;\n        masterData['testCommentsTestsTab'] = testCommentsTestsTab;\n        updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            openModalPopup: false,\n            masterData,\n            testCommentObject,\n            npKAsampletestcommentscode,\n            selectedRecord\n          }\n        };\n      }\n\n      if (selectedRecord['nfromsitecode'] && selectedRecord['ntositecode']) {\n        if (selectedRecord['nfromsitecode'].value !== selectedRecord['ntositecode'].value) {\n          masterData['testSite'] = {};\n          let siteseqnumber = 0;\n\n          if (siteObject.hasOwnProperty(masterData.selectedParameterRulesEngine.ntestgrouptestcode)) {\n            siteseqnumber = this.props.Login.siteseqnumber;\n            siteseqnumber++;\n            let object = {\n              npksitecode: siteseqnumber,\n              sfromsitename: selectedRecord['nfromsitecode'].label,\n              stositename: selectedRecord['ntositecode'].label,\n              stestparametersynonym: masterData.selectedParameterRulesEngine.stestparametersynonym,\n              ntestgrouptestcode: masterData.selectedParameterRulesEngine.ntestgrouptestcode\n            };\n            testInitiateSiteTemp = siteObject[masterData.selectedParameterRulesEngine.ntestgrouptestcode];\n            testInitiateSiteTemp.push(object);\n            testInitiateSiteTab.push(object);\n            siteObject[masterData.selectedParameterRulesEngine.ntestgrouptestcode] = sortData(testInitiateSiteTemp, 'descending', 'npksitecode');\n            delete selectedRecord['ntestgrouptestcode'];\n            delete selectedRecord['nfromsitecode'];\n            delete selectedRecord['ntositecode'];\n          } else {\n            siteseqnumber++;\n            let object = {\n              npksitecode: siteseqnumber,\n              sfromsitename: selectedRecord['nfromsitecode'].label,\n              stositename: selectedRecord['ntositecode'].label,\n              stestparametersynonym: masterData.selectedParameterRulesEngine.stestparametersynonym,\n              ntestgrouptestcode: masterData.selectedParameterRulesEngine.ntestgrouptestcode\n            };\n            testInitiateSiteTemp.push(object);\n            testInitiateSiteTab.push(object);\n            siteObject[masterData.selectedParameterRulesEngine.ntestgrouptestcode] = sortData(testInitiateSiteTemp, 'descending', 'npksitecode');\n            delete selectedRecord['ntestgrouptestcode'];\n            delete selectedRecord['nfromsitecode'];\n            delete selectedRecord['ntositecode'];\n          }\n\n          masterData['testSite'] = siteObject;\n          masterData['testInitiateSiteTab'] = testInitiateSiteTab;\n          updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              openModalPopup: false,\n              masterData,\n              siteObject,\n              siteseqnumber\n            }\n          };\n        } else {\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_FROMANDTOSITECANNOTBESAME\"\n          }));\n        }\n      }\n\n      if (Object.keys(updateInfo).length > 0) {\n        this.props.updateStore(updateInfo);\n      }\n    };\n\n    this.deletModalSite = (inputparam, action, row) => {\n      let temparray = [];\n      let index = 0;\n      let testInitiateSiteTab = this.props.Login.masterData.testInitiateSiteTab;\n      let testCommentsTestsTab = this.props.Login.masterData.testCommentsTestsTab;\n      let reportCommentsTestsTab = this.props.Login.reportCommentsTestsTab;\n      let siteObject = this.props.Login.siteObject || {};\n      let testCommentObject = this.props.Login.testCommentObject || {};\n      let reportCommentObject = this.props.Login.reportCommentObject || {};\n      let masterData = this.props.Login.masterData || {};\n\n      if (this.props.Login.activeTabIndex === 1) {\n        temparray = siteObject[masterData.selectedParameterRulesEngine.ntestgrouptestcode];\n        temparray.splice(row['dataIndex'], 1);\n        testInitiateSiteTab.splice(row['dataIndex'], 1);\n        siteObject[masterData.selectedParameterRulesEngine.ntestgrouptestcode] = temparray;\n      }\n\n      if (this.props.Login.activeTabIndex === 2) {\n        temparray = testCommentObject[masterData.selectedParameterRulesEngine.ntestgrouptestcode];\n        index = temparray.findIndex(x => x.npKAsampletestcommentscode === row['dataItem'].npKAsampletestcommentscode); // temparray.splice(row['dataIndex'], 1);\n\n        temparray.splice(index, 1);\n        index = testCommentsTestsTab.findIndex(x => x.npKAsampletestcommentscode === row['dataItem'].npKAsampletestcommentscode); //   testCommentsTestsTab.splice(row['dataIndex'], 1);\n\n        testCommentsTestsTab.splice(index, 1);\n        testCommentObject[masterData.selectedParameterRulesEngine.ntestgrouptestcode] = temparray;\n      }\n\n      if (this.props.Login.activeTabIndex === 3) {\n        temparray = masterData.testRepeat;\n        temparray.splice(row['dataIndex'], 1);\n        reportCommentsTestsTab.splice(row['dataIndex'], 1);\n        reportCommentObject[masterData.selectedParameterRulesEngine.ntestgrouptestcode] = temparray;\n      }\n\n      let updateInfo = {};\n      updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          siteObject,\n          testCommentObject,\n          reportCommentObject,\n          testInitiateSiteTab,\n          reportCommentsTestsTab,\n          testCommentsTestsTab\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.deleteModalTest = (inputparam, action, row) => {\n      let testInitiateTests = this.props.Login.testInitiateTests || [];\n      let testCommentsTests = this.props.Login.testCommentsTests || [];\n      let testRepeatTests = this.props.Login.testRepeatTests || [];\n      let testenforceTests = this.props.Login.testenforceTests || [];\n      let reportCommentsTests = this.props.Login.reportCommentsTests || [];\n      let testInitiateSiteTab = this.props.Login.masterData.testInitiateSiteTab;\n      let testCommentsTestsTab = this.props.Login.masterData.testCommentsTestsTab;\n      let testRepeatTestsTab = this.props.Login.masterData.testRepeatTestsTab;\n      let testenforceTestsTab = this.props.Login.masterData.testenforceTestsTab;\n      let siteObject = this.props.Login.siteObject || {};\n      let testCommentObject = this.props.Login.testCommentObject || {};\n      let reportCommentObject = this.props.Login.reportCommentObject || {};\n      let testInitiateTestOptions = this.props.Login.testInitiateTestOptions || [];\n      let testCommentsTestOptions = this.props.Login.testCommentsTestOptions || [];\n      let reportCommentsTestOptions = this.props.Login.reportCommentsTestOptions || [];\n      let viewColumnListByRule = this.props.Login.viewColumnListByRule || [];\n      let testInitiateTestdeletedOptions = this.props.Login.testInitiateTestdeletedOptions || [];\n      let testCommentsTestdeletedOptions = this.props.Login.testCommentsTestdeletedOptions || [];\n      let reportCommentsTestdeletedOptions = this.props.Login.reportCommentsTestdeletedOptions || [];\n      let masterData = this.props.Login.masterData || {};\n      let index = 0;\n\n      if (this.props.Login.activeTabIndex === 1) {\n        // index = this.props.Login.testInitiateTests.findIndex(x => x.ntestgrouptestcode === masterData.selectedParameterRulesEngine.ntestgrouptestcode)\n        index = this.props.Login.testInitiateTests.findIndex(x => x.ntestgrouptestcode === inputparam.testParameter.ntestgrouptestcode);\n        testInitiateTests.splice(index, 1); // index = testInitiateSiteTab.findIndex(x => x.ntestgrouptestcode === inputparam.testParameter.ntestgrouptestcode)\n        // testInitiateSiteTab.splice(index, 1); \n\n        testInitiateSiteTab = testInitiateSiteTab.filter(function (obj) {\n          return obj.ntestgrouptestcode !== inputparam.testParameter.ntestgrouptestcode;\n        });\n        delete siteObject[inputparam.testParameter.ntestgrouptestcode];\n      }\n\n      if (this.props.Login.activeTabIndex === 2) {\n        index = this.props.Login.testCommentsTests.findIndex(x => x.ntestgrouptestcode === inputparam.testParameterComments.ntestgrouptestcode);\n        testCommentsTests.splice(index, 1); // index =  testCommentsTestsTab.findIndex(x => x.ntestgrouptestcode === inputparam.testParameterComments.ntestgrouptestcode) \n        // testCommentsTestsTab.splice(index, 1);\n\n        testCommentsTestsTab = testCommentsTestsTab.filter(function (obj) {\n          return obj.ntestgrouptestcode !== inputparam.testParameterComments.ntestgrouptestcode;\n        });\n        delete testCommentObject[inputparam.testParameterComments.ntestgrouptestcode];\n      }\n\n      if (this.props.Login.activeTabIndex === 3) {\n        //  index = this.props.Login.testRepeatTests.findIndex(x => x.ntestgrouptestcode === masterData.selectedParameterRulesEngine.ntestgrouptestcode) \n        index = row['dataIndex'];\n        testRepeatTests.splice(index, 1);\n        testRepeatTestsTab.splice(index, 1);\n      }\n\n      if (this.props.Login.activeTabIndex === 4) {\n        //    index = this.props.Login.testenforceTests.findIndex(x => x.ntestgrouptestcode === masterData.selectedParameterRulesEngine.ntestgrouptestcode)  \n        index = row['dataIndex'];\n        testenforceTests.splice(index, 1);\n        testenforceTestsTab.splice(index, 1);\n      }\n\n      let updateInfo = {};\n      updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          testInitiateTests,\n          siteObject,\n          testCommentObject,\n          testCommentsTests,\n          reportCommentsTests,\n          reportCommentObject,\n          masterData: { ...masterData,\n            testCommentsTestsTab,\n            testInitiateSiteTab,\n            testRepeatTestsTab,\n            testenforceTestsTab\n          },\n          testRepeatTests,\n          testenforceTests\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onmodalComboChange = (comboData, fieldName) => {\n      let selectedRecord = this.state.selectedRecord || {};\n      let isneedsgeneralcomments = this.state.isneedsgeneralcomments || {};\n\n      if (fieldName === 'ncommentsubtypecode') {\n        if (comboData.value === 6) {\n          isneedsgeneralcomments = true;\n          delete selectedRecord['nsampletestcommentscode'];\n        } else {\n          isneedsgeneralcomments = false;\n          delete selectedRecord['sgeneralcomments'];\n        }\n      } else if (fieldName === 'nproductcatcode') {\n        selectedRecord[fieldName] = comboData;\n        this.props.getSpecificationTestGroupRulesEngine(selectedRecord, this.props.Login.selectedRecord, true, this.props.Login.masterData, this.props.Login.userInfo);\n      } else if (fieldName === 'ntestgrouptestcode' && this.state.activeTabIndex === 4) {\n        if (selectedRecord['ntestgrouptestparametercode']) {\n          if (selectedRecord[fieldName].value !== comboData.value) {\n            delete selectedRecord['ntestgrouptestparametercode'];\n          }\n        }\n\n        selectedRecord[fieldName] = comboData;\n        this.props.getParameterRulesEngine(selectedRecord, this.props.Login.masterData, this.props.Login.userInfo);\n      } else if (fieldName === 'nallottedspeccode') {\n        selectedRecord[fieldName] = comboData;\n        this.props.getComponentTestGroupRulesEngine(selectedRecord, this.props.Login.selectedRecord, true, this.props.Login.masterData, this.props.Login.userInfo);\n      }\n\n      if (fieldName === 'nsampletestcommentscode') {\n        selectedRecord['sdescription'] = comboData.item.sdescription;\n      }\n\n      selectedRecord[fieldName] = comboData;\n      this.setState({\n        selectedRecord,\n        isneedsgeneralcomments\n      });\n    };\n\n    this.getOutcomeDetails = inputParam => {\n      let masterData = this.props.Login.masterData || {};\n      const testParameter = this.state.activeTabIndex === 1 ? inputParam.testParameter : this.state.activeTabIndex === 2 ? inputParam.testParameterComments : inputParam.testParameterreportComments;\n      masterData['selectedParameterRulesEngine'] = {};\n      masterData['selectedParameterRulesEngine'] = testParameter;\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          masterData\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.handleExpandChange = () => {\n      let childListMap1 = new Map();\n      let childListMap2 = new Map();\n      let childListMap3 = new Map();\n      let childListMap = new Map();\n\n      if (this.props.Login.masterData.activeTabName === 'IDS_Test') {\n        let keylst = this.props.Login.masterData.activeTabName === 'IDS_Test' ? Object.keys(this.props.Login.masterData.SelectedRulesEngine['jsonuidata']['siteObject']) : this.props.Login.masterData.activeTabName === 'IDS_COMMENTS' ? Object.keys(this.props.Login.masterData.SelectedRulesEngine['jsonuidata']['testCommentObject']) : Object.keys(this.props.Login.masterData.SelectedRulesEngine['jsonuidata']['reportCommentObject']);\n        keylst.map(key => {\n          childListMap.set(parseInt(key), Object.values(this.props.Login.masterData.activeTabName === 'IDS_Test' ? this.props.Login.masterData.SelectedRulesEngine['jsonuidata']['siteObject'][key] : this.props.Login.masterData.activeTabName === 'IDS_COMMENTS' ? this.props.Login.masterData.SelectedRulesEngine['jsonuidata']['testCommentObject'][key] : this.props.Login.masterData.SelectedRulesEngine['jsonuidata']['reportCommentObject'][key]));\n        });\n        this.setState({\n          childListMap\n        });\n      }\n\n      if (this.props.Login.masterData.activeTabName === 'IDS_COMMENTS') {\n        let keylst = Object.keys(this.props.Login.masterData.SelectedRulesEngine['jsonuidata']['testCommentObject']);\n        keylst.map(key => {\n          childListMap2.set(parseInt(key), Object.values(this.props.Login.masterData.SelectedRulesEngine['jsonuidata']['testCommentObject'][key]));\n        });\n        this.setState({\n          childListMap2\n        });\n      }\n\n      if (this.props.Login.masterData.activeTabName === 'IDS_REPORTCOMMENTS') {\n        let keylst = Object.keys(this.props.Login.masterData.SelectedRulesEngine['jsonuidata']['reportCommentObject']);\n        keylst.map(key => {\n          childListMap3.set(parseInt(key), Object.values(this.props.Login.masterData.SelectedRulesEngine['jsonuidata']['reportCommentObject'][key]));\n        });\n        this.setState({\n          childListMap3\n        });\n      }\n    };\n\n    this.viewOutcome = props => {\n      if (this.props.Login.masterData['RulesEngine'] && this.props.Login.masterData['RulesEngine'].length > 0) {\n        let masterData = this.props.Login.masterData;\n        masterData['SelectedRulesEngine'] = props['SelectedRulesEngine'][0];\n        masterData['activeTabName'] = 'IDS_Test';\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            screenName: \"IDS_VIEWOUTCOME\",\n            operation: \"IDS_VIEW\",\n            openModal: true,\n            masterData\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTRULETOVIEWOUTCOME\"\n        }));\n      }\n    };\n\n    this.openflowview = props => {\n      if (this.props.Login.masterData['RulesEngine'] && this.props.Login.masterData['RulesEngine'].length > 0) {\n        let masterData = this.props.Login.masterData;\n        masterData['SelectedRulesEngine'] = props['SelectedRulesEngine'][0];\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            screenName: \"IDS_VIEWRULE\",\n            operation: \"IDS_VIEW\",\n            openModal: true,\n            masterData\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTRULETOVIEWRULE\"\n        }));\n      }\n    };\n\n    this.handlePageChangeRuleEngine = event => {\n      this.setState({\n        skipRulesEngine: event.skip,\n        takeRulesEngine: event.take\n      });\n    };\n\n    this.addGroup = () => {\n      const {\n        selectedRecord\n      } = this.state;\n      let viewColumnListByRule = this.props.Login.viewColumnListByRule || [];\n      const addGroupList = this.props.Login.addGroupList || [];\n      const arrayLength = addGroupList.length;\n      addGroupList[arrayLength] = 1;\n      viewColumnListByRule = this.props.Login.databaseviewList;\n\n      if (arrayLength === 0) {\n        selectedRecord[\"groupList\"] = [];\n        selectedRecord[\"filtercolumns\"] = this.props.Login.selectFields;\n      }\n\n      if (selectedRecord[\"groupListJoins\"] === undefined) {\n        selectedRecord[\"groupListJoins\"] = [];\n      }\n\n      if (selectedRecord[\"groupListJoins\"][arrayLength - 1] === undefined) {\n        selectedRecord[\"groupListJoins\"][arrayLength - 1] = {};\n      }\n\n      selectedRecord[\"groupListJoins\"][arrayLength - 1][\"button_and\"] = true;\n      selectedRecord[\"groupList\"][arrayLength] = [];\n      selectedRecord[\"groupList\"][arrayLength][\"button_and\"] = true;\n      selectedRecord[\"groupList\"][arrayLength][0] = {};\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          addGroupList,\n          viewColumnListByRule,\n          selectedRecord,\n          activeTabIndex: 0\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.getTestGroupRulesEngineAdd = () => {\n      //   if (this.state.selectedcombo['nproductcatcode']) {\n      //    const sqlQuery = false;\n      //this.setState({ selectedRecord: {} });\n      let selectedRecord = this.state.selectedRecord || {};\n      this.props.getTestGroupRulesEngineAdd(this.props.Login.userInfo, false, {\n        addRuleList: [],\n        addGroupList: [],\n        addAggregateList: [],\n        addOrderbyList: []\n      }, this.props.Login.masterData); //  } else {\n      //       toast.info(this.props.intl.formatMessage({ id: \"IDS_SELECTPRODUCTCATEGORY\" }));\n      //   }\n    };\n\n    this.closePortalModal = () => {\n      let masterData = this.props.Login.masterData || {};\n      masterData['testParameter'] = {};\n      masterData['testParameterComments'] = {};\n      masterData['testParameterreportComments'] = {};\n      masterData['testComments'] = {};\n      masterData['reportComments'] = {};\n      masterData['testSite'] = {};\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: this.props.Login.operation !== 'update' ? {\n          activeTabIndex: 0,\n          openPortalModal: false,\n          selectedRecord: {},\n          addRuleList: [],\n          count: 0,\n          masterData,\n          testInitiateTests: [],\n          reportCommentsTests: [],\n          testCommentsTests: [],\n          siteObject: {},\n          testCommentObject: {},\n          reportCommentObject: {},\n          npkAtestparametercode: 0,\n          npkBtestparametercode: 0,\n          npkCtestparametercode: 0,\n          testInitiateSiteTab: [],\n          testCommentsTestsTab: [],\n          reportCommentsTestsTab: []\n        } : {\n          activeTabIndex: 0,\n          openPortalModal: false,\n          selectedRecord: {},\n          addRuleList: [],\n          count: 0,\n          masterData,\n          //  testInitiateTests: [], reportCommentsTests: [],\n          // testCommentsTests: [], siteObject: {}, testCommentObject: {}, reportCommentObject: {},\n          npkAtestparametercode: 0,\n          npkBtestparametercode: 0,\n          npkCtestparametercode: 0 // ,\n          // testInitiateSiteTab: [],\n          // testCommentsTestsTab: [],\n          // reportCommentsTestsTab: []\n\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.changePropertyView = (index, event, status) => {\n      let id = false;\n      let activeTabIndex;\n      let activeTabId;\n      let masterData = this.props.Login.masterData || {};\n      let activeTestTab = this.props.Login.activeTestTab || \"\";\n      const {\n        selectedRecord\n      } = this.state;\n\n      if (selectedRecord[\"groupList\"].length > 0) {\n        if (this.onsavevalidation(selectedRecord)) {\n          if (window.innerWidth > 992 && event && this.state.enableAutoClick || !event) {\n            activeTabIndex = this.state.activeTabIndex !== index ? index : id ? index : false;\n          }\n\n          if (window.innerWidth > 992 && event && this.state.enableAutoClick || !event) {\n            if (index === 1) {\n              activeTestTab = 'IDS_Test';\n              masterData['selectedParameterRulesEngine'] = this.props.Login.testInitiateTests && this.props.Login.testInitiateTests[0];\n            }\n\n            if (index === 2) {\n              activeTestTab = 'IDS_COMMENTS';\n              masterData['selectedParameterRulesEngine'] = this.props.Login.testCommentsTests && this.props.Login.testCommentsTests[0];\n            }\n\n            if (index === 3) {\n              activeTestTab = 'IDS_REPEAT';\n              masterData['selectedParameterRulesEngine'] = this.props.Login.testRepeatTests && this.props.Login.testRepeatTests[0];\n            }\n\n            if (index === 4) {\n              activeTestTab = 'IDS_ENFORCERESULT';\n              masterData['selectedParameterRulesEngine'] = this.props.Login.testEnforceTests && this.props.Login.testEnforceTests[0];\n            }\n\n            const updateInfo = {\n              typeName: DEFAULT_RETURN,\n              data: {\n                activeTabIndex: index === 0 ? 0 : this.state.activeTabIndex !== index ? index : id ? index : false,\n                activeTabId: id,\n                activeTestTab,\n                masterData\n              }\n            };\n            this.props.updateStore(updateInfo);\n          }\n        } else {\n          toast.info(this.props.intl.formatMessage({\n            id: \"IDS_FILLTHERULETOADDOUTCOME\"\n          }));\n        }\n      } else {\n        toast.info(this.props.intl.formatMessage({\n          id: \"IDS_ATLEASTADDONERULETOADDOUTCOME\"\n        }));\n      }\n    };\n\n    this.deleteRule = (groupIndex, index) => {\n      let addGroupList = this.props.Login.addGroupList || [];\n      const selectedRecord = this.state.selectedRecord;\n      addGroupList[groupIndex] = addGroupList[groupIndex] - 1;\n\n      if (addGroupList[groupIndex] === 0) {\n        addGroupList.splice(groupIndex, 1);\n        selectedRecord[\"groupList\"].splice(groupIndex, 1);\n\n        if (selectedRecord[\"groupListJoins\"]) {\n          selectedRecord[\"groupListJoins\"].splice(groupIndex - 1, 1);\n        }\n      } else {\n        selectedRecord[\"groupList\"][groupIndex].splice(index, 1);\n      }\n\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          addGroupList,\n          selectedRecord,\n          activeTabIndex: 0\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.deleteOutcome = index => {\n      let addOutcomeList = this.props.Login.addOutcomeList;\n      addOutcomeList.splice(index, 1);\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          addOutcomeList\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.clearRule = () => {\n      const sviewname = this.state.selectedRecord.sviewname || \"\";\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          addRuleList: [],\n          selectedRecord: {\n            sviewname\n          },\n          sqlQuery: false\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.resetRule = () => {\n      let masterData = this.props.Login.masterData || {};\n      let selectedRecord = this.state.selectedRecord || {};\n      masterData['testParameter'] = {};\n      masterData['testParameterComments'] = {};\n      masterData['testParameterreportComments'] = {};\n      masterData['testComments'] = {};\n      masterData['reportComments'] = {};\n      masterData['testRepeat'] = [];\n      masterData['testenforceTests'] = [];\n      masterData['testSite'] = {};\n\n      if (selectedRecord[\"groupList\"]) {\n        selectedRecord[\"groupList\"] = [];\n      }\n\n      if (selectedRecord[\"groupListJoins\"]) {\n        selectedRecord[\"groupListJoins\"] = [];\n      }\n\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          addRuleList: [],\n          addGroupList: [],\n          masterData,\n          addAggregateList: [],\n          addOrderbyList: [],\n          testInitiateTests: [],\n          reportCommentsTests: [],\n          testCommentsTests: [],\n          siteObject: {},\n          testCommentObject: {},\n          reportCommentObject: {},\n          selectedRecord,\n          testRepeatTests: [],\n          testenforceTests: [],\n          activeTabIndex: 0\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onSymbolChange = (comboData, fieldName, groupIndex, index) => {\n      const {\n        selectedRecord\n      } = this.state;\n      const oldSelectedRecord = selectedRecord[\"groupList\"][groupIndex][index][fieldName] || {};\n      selectedRecord[\"groupList\"][groupIndex][index][fieldName] = comboData;\n      this.setState({\n        selectedRecord,\n        groupIndex,\n        index\n      });\n    };\n\n    this.onInputChange = (event, type, groupIndex, index) => {\n      const selectedRecord = this.state.selectedRecord || {};\n      let needoutsource = this.state.needoutsource || {};\n\n      if (event.target.type === 'checkbox') {\n        if (event.target.name === 'needoutsource' && event.target.checked === true) {\n          needoutsource = true;\n        } else {\n          needoutsource = false;\n          delete selectedRecord['nfromsitecode'];\n          delete selectedRecord['ntositecode'];\n        }\n\n        selectedRecord[event.target.name] = event.target.checked === true ? 3 : 4;\n      } else {\n        selectedRecord[event.target.name] = event.target.value;\n      }\n\n      this.setState({\n        selectedRecord,\n        needoutsource\n      });\n    };\n\n    this.viewColumnListByRule = list => {\n      let activeTabIndex = this.props.Login.activeTabIndex;\n\n      if (activeTabIndex !== 0) {\n        let selectedRecord = this.props.Login.selectedRecord && this.props.Login.selectedRecord;\n        let dynamicList = activeTabIndex === 1 ? this.props.Login.testInitiateTests : activeTabIndex === 2 ? this.props.Login.testCommentsTests : activeTabIndex === 3 ? this.props.Login.testRepeatTests : activeTabIndex === 4 ? this.props.Login.testenforceTests : \"\";\n        if (dynamicList !== undefined && dynamicList) list = list.filter(({\n          value\n        }) => !dynamicList.some(x => x.ntestgrouptestcode == value));\n      }\n\n      return list;\n    };\n\n    this.onConditionClick = (fieldName, index, isgroup) => {\n      let {\n        selectedRecord\n      } = this.state;\n      selectedRecord[\"groupListJoins\"] = selectedRecord[\"groupListJoins\"] || [];\n\n      if (index !== undefined && isgroup === false) {\n        if (fieldName === `button_and`) {\n          selectedRecord[\"groupList\"][index][fieldName] = selectedRecord[\"groupList\"][index][fieldName] === true ? true : true;\n          selectedRecord[\"groupList\"][index][`button_or`] = false;\n        } else if (fieldName === `button_or`) {\n          selectedRecord[\"groupList\"][index][fieldName] = selectedRecord[\"groupList\"][index][fieldName] === true ? true : true;\n          selectedRecord[\"groupList\"][index][`button_and`] = false;\n        } else if (fieldName === `button_not`) {\n          selectedRecord[\"groupList\"][index][fieldName] = selectedRecord[\"groupList\"][index][fieldName] === true ? false : true;\n        } else {}\n\n        this.setState({\n          selectedRecord\n        });\n      } else {\n        if (fieldName === `button_and`) {\n          if (selectedRecord[\"groupListJoins\"][index] === undefined) {\n            selectedRecord[\"groupListJoins\"][index] = {};\n          }\n\n          selectedRecord[\"groupListJoins\"][index][fieldName] = selectedRecord[\"groupListJoins\"][index][fieldName] === true ? true : true;\n          selectedRecord[\"groupListJoins\"][index][`button_or`] = false;\n        }\n\n        if (fieldName === `button_or`) {\n          if (selectedRecord[\"groupListJoins\"][index] === undefined) {\n            selectedRecord[\"groupListJoins\"][index] = {};\n          }\n\n          selectedRecord[\"groupListJoins\"][index][fieldName] = selectedRecord[\"groupListJoins\"][index][fieldName] === true ? true : true;\n          selectedRecord[\"groupListJoins\"][index][`button_and`] = false;\n        }\n\n        if (fieldName === `button_not`) {\n          if (selectedRecord[\"groupListJoins\"][index] === undefined) {\n            selectedRecord[\"groupListJoins\"][index] = {};\n          }\n\n          selectedRecord[\"groupListJoins\"][index][fieldName] = selectedRecord[\"groupListJoins\"][index][fieldName] === true ? false : true;\n        }\n\n        this.setState({\n          selectedRecord\n        });\n      }\n    };\n\n    this.changePropertyViewClose = id => {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          activeTabIndex: undefined,\n          activeTestTab: undefined,\n          activeTabId: id\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onFilterComboChange = (comboData, fieldName, caseNo) => {\n      let tempFilterData = this.state.tempFilterData || {};\n      let inputParam = {};\n\n      switch (caseNo) {\n        case 1:\n          tempFilterData[fieldName] = comboData;\n          inputParam = {\n            inputData: {\n              userinfo: this.props.Login.userInfo,\n              sampletype: comboData.item,\n              tempFilterData\n            },\n            methodUrl: \"/getProductCategory\"\n          };\n          this.props.sampleTypeOnChange(inputParam, this.props.Login.masterData);\n          break;\n\n        case 2:\n          tempFilterData[fieldName] = comboData;\n          inputParam = {\n            inputData: {\n              userinfo: this.props.Login.userInfo,\n              sampletype: tempFilterData.nsampletypecode.item,\n              productcategory: comboData.item,\n              tempFilterData\n            },\n            methodUrl: \"/getProduct\"\n          };\n          this.props.sampleTypeOnChange(inputParam, this.props.Login.masterData);\n          break;\n\n        case 3:\n          tempFilterData[fieldName] = comboData;\n          inputParam = {\n            inputData: {\n              userinfo: this.props.Login.userInfo,\n              sampletype: tempFilterData.nsampletypecode.item,\n              productcategory: tempFilterData.nproductcatcode.item,\n              product: comboData.item,\n              project: comboData.item,\n              tempFilterData\n            },\n            methodUrl: \"/getTreeVersionTemplate\"\n          };\n          this.props.sampleTypeOnChange(inputParam, this.props.Login.masterData);\n          break;\n\n        case 4:\n          tempFilterData[fieldName] = comboData;\n          this.setState({\n            tempFilterData\n          });\n          break;\n\n        case 5:\n          const selectedRecord = this.state.selectedRecord;\n          selectedRecord[fieldName] = comboData;\n          const TestGroupSpecSampleType = this.props.Login.testGroupInputData.TestGroupSpecSampleType || {};\n          let testGroupSpecSampleType = {};\n\n          if (this.props.Login.screenName === \"IDS_COMPONENT\") {\n            testGroupSpecSampleType = selectedRecord[\"ncomponentcode\"] ? selectedRecord[\"ncomponentcode\"].item : TestGroupSpecSampleType[0].item;\n          } else {\n            testGroupSpecSampleType = this.props.Login.masterData.SelectedComponent;\n          }\n\n          inputParam = {\n            userinfo: this.props.Login.userInfo,\n            testcategory: comboData.item,\n            testgroupspecsampletype: testGroupSpecSampleType,\n            nallottedspeccode: this.props.Login.masterData.SelectedSpecification[\"nallottedspeccode\"],\n            selectedRecord\n          };\n          this.props.changeTestCategory(inputParam, this.props.Login.testGroupInputData);\n          break;\n\n        case 6:\n          tempFilterData[fieldName] = comboData;\n          inputParam = {\n            inputData: {\n              userinfo: this.props.Login.userInfo,\n              nprojecttypecode: tempFilterData.nprojecttypecode.value,\n              projecttype: tempFilterData.nprojecttypecode.item,\n              // sampletype: tempFilterData.nsampletypecode.item,\n              // productcategory: comboData.item,\n              tempFilterData\n            },\n            classUrl: \"/projectmaster\",\n            methodUrl: \"/getApprovedProjectByProjectType\"\n          };\n          this.props.sampleTypeOnChange(inputParam, this.props.Login.masterData);\n          break;\n\n        default:\n          break;\n      }\n    };\n\n    this.handleDateChange = (dateName, dateValue) => {\n      const {\n        selectedRecord\n      } = this.state;\n\n      if (dateValue === null) {\n        dateValue = new Date();\n      }\n\n      selectedRecord[dateName] = dateValue;\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onNumericInputChange = (value, name) => {\n      const selectedRecord = this.state.selectedRecord || {};\n      selectedRecord[name] = value;\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onSaveClick = (saveType, formRef) => {\n      let inputParam = {};\n\n      if (this.props.Login.screenName === \"IDS_PROFILETREE\" || this.props.Login.screenName === \"IDS_EDITTREE\") {\n        inputParam = this.onSaveTree(saveType, formRef);\n      } else if (this.props.Login.screenName === \"IDS_SPECIFICATION\") {\n        inputParam = this.onSaveSpecification(saveType, formRef);\n      } else if (this.props.Login.screenName === \"IDS_COMPONENT\") {\n        inputParam = this.onSaveComponent(saveType, formRef);\n      } else if (this.props.Login.screenName === \"IDS_COPYSPECIFICATION\") {\n        inputParam = this.onSaveCopySpecification(saveType, formRef);\n      } else if (this.props.Login.screenName === \"IDS_TEST\" || this.props.Login.screenName === \"IDS_EDITTESTGROUPTEST\") {\n        inputParam = this.onSaveTest(saveType, formRef);\n      } else if (this.props.Login.screenName === \"IDS_SPECFILE\") {\n        inputParam = this.onSaveSpecFile(saveType, formRef);\n      }\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            openModal: true,\n            operation: this.props.Login.operation,\n            screenData: {\n              inputParam,\n              masterData: this.props.Login.masterData\n            },\n            saveType\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\", {});\n      }\n    };\n\n    this.onSaveTest = (saveType, formRef) => {\n      const operation = this.props.Login.operation;\n      const masterData = this.props.Login.masterData;\n      const selectedRecord = this.state.selectedRecord;\n      let inputData = {};\n      const userinfo = this.props.Login.userInfo;\n      let postParam = undefined;\n\n      if (operation === \"create\") {\n        const testArray = selectedRecord.ntestcode.map(test => {\n          return test.item;\n        });\n        inputData = {\n          testgroupspecification: masterData.SelectedSpecification,\n          testgroupspecsampletype: [masterData.SelectedComponent],\n          testgrouptest: testArray,\n          userinfo\n        };\n      } else {\n        postParam = {\n          inputListName: \"TestGroupTest\",\n          selectedObject: \"SelectedTest\",\n          primaryKeyField: \"ntestgrouptestcode\",\n          primaryKeyValue: masterData.SelectedTest ? masterData.SelectedTest.ntestgrouptestcode : 0,\n          fetchUrl: \"testgroup/getTestGroupTest\",\n          fecthInputObject: {\n            userinfo: this.props.Login.userInfo\n          },\n          masterData: this.props.Login.masterData,\n          searchFieldList,\n          changeList: [\"TestGroupTestFormula\", \"TestGroupTestNumericParameter\", \"TestGroupTestPredefinedParameter\", \"TestGroupTestCharParameter\", \"TestGroupTestParameter\"],\n          isSingleSelect: true\n        };\n        let testgrouptestfile = null;\n        let testGroupFile = selectedRecord.ntestfilecode;\n\n        if (testGroupFile) {\n          testGroupFile = testGroupFile.item;\n          testgrouptestfile = {\n            nlinkcode: testGroupFile.nlinkcode,\n            nattachmenttypecode: testGroupFile.nattachmenttypecode,\n            sdescription: testGroupFile.sdescription,\n            ssystemfilename: testGroupFile.ssystemfilename,\n            dcreateddate: testGroupFile.dcreateddate,\n            nfilesize: testGroupFile.nfilesize,\n            ntestgroupfilecode: selectedRecord.ntestgroupfilecode,\n            ntestgrouptestcode: selectedRecord.ntestgrouptestcode,\n            sfilename: testGroupFile.sfilename,\n            nstatus: transactionStatus.ACTIVE\n          };\n        }\n\n        inputData = {\n          testgroupspecification: masterData.SelectedSpecification,\n          testgrouptest: {\n            ntestgrouptestcode: selectedRecord.ntestgrouptestcode,\n            nsectioncode: selectedRecord.nsectioncode.value,\n            //nsourcecode: selectedRecord.nsourcecode.value,\n            nmethodcode: selectedRecord.nmethodcode ? selectedRecord.nmethodcode.value : transactionStatus.NA,\n            ninstrumentcatcode: selectedRecord.ninstrumentcatcode ? selectedRecord.ninstrumentcatcode.value : transactionStatus.NA,\n            ncontainertypecode: selectedRecord.ncontainertypecode ? selectedRecord.ncontainertypecode.value : transactionStatus.NA,\n            stestsynonym: selectedRecord.stestsynonym,\n            ncost: selectedRecord.ncost,\n            nsorter: selectedRecord.nsorter,\n            nspecsampletypecode: selectedRecord.nspecsampletypecode,\n            nrepeatcountno: selectedRecord.nrepeatcountno\n          },\n          testgrouptestfile,\n          userinfo\n        };\n      }\n\n      const inputParam = {\n        inputData,\n        classUrl: \"testgroup\",\n        operation: operation,\n        methodUrl: \"Test\",\n        saveType,\n        formRef,\n        searchRef: this.searchRef,\n        postParam\n      };\n      return inputParam;\n    };\n\n    this.onSaveTree = (saveType, formRef) => {\n      const operation = this.props.Login.operation;\n      const selectedRecord = this.state.selectedRecord;\n      let inputData = {\n        userinfo: this.props.Login.userInfo\n      };\n\n      if (operation === \"update\") {\n        const selectedNode = this.props.Login.masterData.selectedNode;\n        inputData[\"treetemplatemanipulation\"] = {\n          ntemplatemanipulationcode: selectedRecord.ntemplatemanipulationcode,\n          sleveldescription: selectedRecord.sleveldescription,\n          nsampletypecode: selectedNode.nsampletypecode,\n          ntreeversiontempcode: selectedNode.ntreeversiontempcode,\n          nproductcatcode: selectedNode.nproductcatcode,\n          nproductcode: selectedNode.nproductcode,\n          nprojectmastercode: selectedNode.nprojectmastercode\n        };\n        inputData[\"selectednode\"] = this.props.Login.masterData.ActiveKey;\n      } else {\n        const TreetempTranstestGroup = this.props.Login.TreetempTranstestGroup;\n        const filterData = this.state.filterData;\n        const selectedRecord = this.state.selectedRecord;\n        let treetemplatemanipulation = [];\n        let tempArray = filterRecordBasedOnTwoArrays(TreetempTranstestGroup, selectedRecord.treetemplatemanipulation, \"ntemptranstestgroupcode\");\n        tempArray.map(item => {\n          const treeData = {\n            ntreeversiontempcode: item.ntreeversiontempcode,\n            npositioncode: item.nlevelno - 1,\n            sleveldescription: item.sleveldescription,\n            ntemptranstestgroupcode: item.ntemptranstestgroupcode,\n            nformcode: 62,\n            schildnode: \"\",\n            nnextchildcode: item.schildnode,\n            ntemplatemanipulationcode: item.ntemplatemanipulationcode,\n            isreadonly: item.ntemplatemanipulationcode > 0 ? true : false,\n            slevelformat: item.slevelformat\n          };\n          return treetemplatemanipulation.push(treeData);\n        });\n        selectedRecord.treetemplatemanipulation.map(item => {\n          const treeTemplateManip = TreetempTranstestGroup.filter(temp => temp.ntemptranstestgroupcode === item.ntemptranstestgroupcode);\n\n          if (treeTemplateManip.length > 0) {\n            item[\"ntemplatemanipulationcode\"] = treeTemplateManip[\"ntemplatemanipulationcode\"];\n          } else {\n            item[\"ntemplatemanipulationcode\"] = 0;\n          }\n\n          return treetemplatemanipulation.push(item);\n        });\n        inputData[\"treetemplatemanipulation\"] = treetemplatemanipulation;\n        inputData[\"sampletype\"] = filterData.nsampletypecode.item;\n        inputData[\"ncategorycode\"] = filterData.nproductcatcode.value;\n        inputData[\"nproductcode\"] = filterData.nproductcatcode.item.ncategorybasedflow == transactionStatus.YES ? -1 : filterData.nproductcode.value ? filterData.nproductcode.value : -1;\n        inputData[\"ntreeversiontempcode\"] = filterData.ntreeversiontempcode.value; //  inputData[\"nprojectmastercode\"] = filterData.nprojectmastercode ? filterData.nprojectmastercode.value:-1;\n\n        inputData[\"nprojectmastercode\"] = filterData.nprojectmastercode ? filterData.nsampletypecode.item.nprojectspecrequired === transactionStatus.YES ? filterData.nprojectmastercode.value : -1 : -1;\n      }\n\n      const inputParam = {\n        inputData,\n        classUrl: \"testgroup\",\n        operation: operation,\n        methodUrl: \"Tree\",\n        saveType,\n        formRef\n      };\n      return inputParam;\n    };\n\n    this.onSaveSpecification = (saveType, formRef) => {\n      const operation = this.props.Login.operation;\n      const selectedRecord = this.state.selectedRecord;\n      let testGroupSpec = {\n        napproveconfversioncode: -1,\n        sversion: '',\n        napprovalstatus: transactionStatus.DRAFT,\n        nstatus: transactionStatus.ACTIVE,\n        ntransactionstatus: selectedRecord[\"ntransactionstatus\"],\n        ncomponentrequired: selectedRecord[\"ncomponentrequired\"],\n        //   nclinicalspec: selectedRecord[\"nclinicalspec\"],\n        // nprojectcode: selectedRecord[\"nprojectcode\"] ? selectedRecord[\"nprojectcode\"] : -1,\n        nprojectmastercode: this.state.filterData.nprojectmastercode ? this.state.filterData.nsampletypecode.item.nprojectspecrequired === transactionStatus.YES ? this.state.filterData.nprojectmastercode.value : -1 : -1,\n        sspecname: selectedRecord[\"sspecname\"],\n        dexpirydate: selectedRecord[\"dexpirydate\"],\n        nallottedspeccode: selectedRecord[\"nallottedspeccode\"] ? selectedRecord[\"nallottedspeccode\"] : 0,\n        ntzexpirydate: selectedRecord[\"ntzexpirydate\"].value,\n        stzexpirydate: selectedRecord[\"ntzexpirydate\"].label\n      };\n      const dexpirydate = testGroupSpec[\"dexpirydate\"]; //need this conversion when the datatype of the field is 'Instant'\n\n      testGroupSpec[\"dexpirydate\"] = formatInputDate(dexpirydate, false);\n\n      if (operation === \"create\") {\n        testGroupSpec[\"ntemplatemanipulationcode\"] = this.props.Login.masterData.selectedNode.ntemplatemanipulationcode;\n      }\n\n      let ntreeversiontempcode = this.state.filterData.ntreeversiontempcode.value;\n      const inputData = {\n        userinfo: this.props.Login.userInfo,\n        testgroupspecification: testGroupSpec,\n        treetemplatemanipulation: this.props.Login.masterData.selectedNode,\n        selectedspecification: this.props.Login.masterData.SelectedSpecification,\n        ntreeversiontempcode: ntreeversiontempcode\n      };\n      const inputParam = {\n        inputData,\n        classUrl: \"testgroup\",\n        operation: operation,\n        methodUrl: \"Specification\",\n        saveType,\n        formRef\n      };\n      return inputParam;\n    };\n\n    this.onSaveComponent = (saveType, formRef) => {\n      const masterData = this.props.Login.masterData;\n      const selectedRecord = this.state.selectedRecord;\n      const testArray = selectedRecord.ntestcode.map(test => {\n        return test.item;\n      });\n      const inputData = {\n        testgroupspecification: masterData.SelectedSpecification,\n        testgroupspecsampletype: [selectedRecord.ncomponentcode.item],\n        testgrouptest: testArray,\n        userinfo: this.props.Login.userInfo\n      };\n      const inputParam = {\n        inputData,\n        classUrl: \"testgroup\",\n        operation: this.props.Login.operation,\n        methodUrl: \"Component\",\n        saveType,\n        formRef\n      };\n      return inputParam;\n    };\n\n    this.onSaveSpecFile = (saveType, formRef) => {\n      const selectedRecord = this.state.selectedRecord;\n      const acceptedFiles = selectedRecord.sfilename;\n      const nattachmenttypecode = selectedRecord.nattachmenttypecode;\n      let isFileEdited = transactionStatus.NO;\n      let specFileArray = [];\n      const selectedSpecification = this.props.Login.masterData.SelectedSpecification;\n      let specFile = {\n        nallottedspeccode: selectedSpecification.nallottedspeccode,\n        nspecfilecode: selectedRecord.nspecfilecode ? selectedRecord.nspecfilecode : 0,\n        nstatus: transactionStatus.ACTIVE,\n        nattachmenttypecode\n      };\n      const formData = new FormData();\n\n      if (nattachmenttypecode === attachmentType.FTP) {\n        if (acceptedFiles && Array.isArray(acceptedFiles) && acceptedFiles.length > 0) {\n          acceptedFiles.forEach((file, index) => {\n            const tempData = Object.assign({}, specFile);\n            const splittedFileName = file.name.split('.');\n            const fileExtension = file.name.split('.')[splittedFileName.length - 1];\n            const uniquefilename = nattachmenttypecode === attachmentType.FTP ? create_UUID() + '.' + fileExtension : \"\";\n            tempData[\"sfilename\"] = file.name;\n            tempData[\"sdescription\"] = selectedRecord.sdescription ? selectedRecord.sdescription.trim() : \"\";\n            tempData[\"nlinkcode\"] = transactionStatus.NA;\n            tempData[\"ssystemfilename\"] = uniquefilename;\n            tempData[\"nfilesize\"] = file.size;\n            formData.append(\"uploadedFile\" + index, file);\n            formData.append(\"uniquefilename\" + index, uniquefilename);\n            specFileArray.push(tempData);\n          });\n          formData.append(\"filecount\", acceptedFiles.length);\n          isFileEdited = transactionStatus.YES;\n        } else {\n          specFile[\"sfilename\"] = selectedRecord.sfilename;\n          specFile[\"sdescription\"] = selectedRecord.sdescription ? selectedRecord.sdescription.trim() : \"\";\n          specFile[\"nlinkcode\"] = transactionStatus.NA;\n          specFile[\"ssystemfilename\"] = selectedRecord.ssystemfilename;\n          specFile[\"nfilesize\"] = selectedRecord.nfilesize;\n          specFileArray.push(specFile);\n        }\n      } else {\n        specFile[\"sfilename\"] = selectedRecord.slinkfilename.trim();\n        specFile[\"sdescription\"] = selectedRecord.slinkdescription ? selectedRecord.slinkdescription.trim() : \"\";\n        specFile[\"nlinkcode\"] = selectedRecord.nlinkcode.value ? selectedRecord.nlinkcode.value : -1;\n        specFile[\"ssystemfilename\"] = \"\";\n        specFile[\"nfilesize\"] = 0;\n        specFileArray.push(specFile);\n      }\n\n      formData.append(\"isFileEdited\", isFileEdited);\n      formData.append(\"testgroupspecification\", JSON.stringify(selectedSpecification));\n      formData.append(\"testgroupspecfile\", JSON.stringify(specFileArray));\n      const inputParam = {\n        inputData: {\n          userinfo: this.props.Login.userInfo\n        },\n        formData: formData,\n        isFileupload: true,\n        operation: this.props.Login.operation,\n        classUrl: \"testgroup\",\n        saveType,\n        formRef,\n        methodUrl: \"SpecificationFile\"\n      };\n      return inputParam;\n    };\n\n    this.deleteSpecRecord = deleteParam => {\n      const selectedRecord = deleteParam.selectedRecord;\n      const masterData = this.props.Login.masterData;\n      const ntreeversiontempcode = masterData[\"TreeTemplateManipulation\"][0].ntreeversiontempcode;\n      const treeVersionTemplateIndex = masterData[\"TreeVersionTemplate\"].findIndex(x => x[\"ntreeversiontempcode\"] === ntreeversiontempcode);\n      const templateVersionStatus = masterData[\"TreeVersionTemplate\"][treeVersionTemplateIndex].ntransactionstatus;\n\n      if (templateVersionStatus === transactionStatus.RETIRED) {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTEDTEMPLATEISRETIRED\"\n        }));\n      } else {\n        if (selectedRecord.napprovalstatus === transactionStatus.DRAFT || selectedRecord.napprovalstatus === transactionStatus.CORRECTION) {\n          this.deleteRecord(deleteParam);\n        } else {\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_SPECIFICATIONSTATUSMUSTBEDRAFTCORRECTION\"\n          }));\n        }\n      }\n    };\n\n    this.deleteRecord = deleteParam => {\n      if (this.props.Login.masterData.selectedNode !== undefined && this.props.Login.masterData.selectedNode !== null) {\n        const masterData = this.props.Login.masterData;\n        const treeVersionTemplateIndex = masterData[\"TreeVersionTemplate\"].findIndex(x => x[\"ntreeversiontempcode\"] === masterData.selectedNode[\"ntreeversiontempcode\"]);\n        const templateVersionStatus = masterData[\"TreeVersionTemplate\"][treeVersionTemplateIndex].ntransactionstatus;\n\n        if (templateVersionStatus === transactionStatus.RETIRED) {\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_SELECTEDTEMPLATEISRETIRED\"\n          }));\n        } else {\n          if (this.props.Login.masterData.selectedNode) {\n            const methodUrl = deleteParam.methodUrl;\n            let dataState = this.state.componentDataState;\n            const screenName = deleteParam.screenName;\n            const inputParam = {\n              inputData: {\n                [deleteParam.keyName]: deleteParam.selectedRecord,\n                userinfo: this.props.Login.userInfo,\n                testgroupspecification: this.props.Login.masterData.SelectedSpecification,\n                treetemplatemanipulation: this.props.Login.masterData.selectedNode,\n                ntreeversiontempcode: deleteParam.filterData.ntreeversiontempcode.value\n              },\n              classUrl: \"testgroup\",\n              operation: deleteParam.operation,\n              methodUrl: methodUrl,\n              screenName,\n              dataState\n            };\n            const masterData = this.props.Login.masterData; //if (showEsign(this.state.controlMap, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\n\n            if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, deleteParam.ncontrolCode)) {\n              const updateInfo = {\n                typeName: DEFAULT_RETURN,\n                data: {\n                  loadEsign: true,\n                  screenData: {\n                    inputParam,\n                    masterData\n                  },\n                  openModal: true,\n                  screenName: screenName,\n                  operation: deleteParam.operation,\n                  selectedRecord: {}\n                }\n              };\n              this.props.updateStore(updateInfo);\n            } else {\n              this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\", {});\n            }\n          } else {\n            toast.warn(this.props.intl.formatMessage({\n              id: \"IDS_SELECTPROFILENODE\"\n            }));\n          }\n        }\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTPROFILENODE\"\n        }));\n      }\n    };\n\n    this.deleteMultipleRecord = deleteParam => {\n      //console.log(\"delete component:\", deleteParam, this.props.Login.masterData);\n      const masterData = this.props.Login.masterData;\n      const treeVersionTemplateIndex = masterData[\"TreeVersionTemplate\"].findIndex(x => x[\"ntreeversiontempcode\"] === masterData.selectedNode[\"ntreeversiontempcode\"]);\n      const templateVersionStatus = masterData[\"TreeVersionTemplate\"][treeVersionTemplateIndex].ntransactionstatus;\n\n      if (templateVersionStatus === transactionStatus.RETIRED) {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTEDTEMPLATEISRETIRED\"\n        }));\n      } else {\n        const testgroupspecification = this.props.Login.masterData.SelectedSpecification;\n\n        if (testgroupspecification.napprovalstatus === transactionStatus.DRAFT || testgroupspecification.napprovalstatus === transactionStatus.CORRECTION) {\n          const inputParam = {\n            inputData: {\n              testgroupspecsampletype: deleteParam.props.testgroupspecsampletype,\n              userinfo: this.props.Login.userInfo,\n              testgroupspecification,\n              treetemplatemanipulation: this.props.Login.masterData.selectedNode\n            },\n            classUrl: \"testgroup\",\n            operation: \"delete\",\n            methodUrl: \"TestGroupComponent\",\n            screenName: \"IDS_COMPONENT\"\n          };\n          const masterData = this.props.Login.masterData;\n\n          if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, deleteParam.ncontrolCode)) {\n            const updateInfo = {\n              typeName: DEFAULT_RETURN,\n              data: {\n                loadEsign: true,\n                screenData: {\n                  inputParam,\n                  masterData\n                },\n                openModal: true,\n                screenName: \"IDS_COMPONENT\",\n                operation: \"delete\",\n                selectedRecord: {}\n              }\n            };\n            this.props.updateStore(updateInfo);\n          } else {\n            this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\", {});\n          }\n        } else {\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_SPECIFICATIONSTATUSMUSTBEDRAFTCORRECTION\"\n          }));\n        }\n      }\n    };\n\n    this.onDropSpecFile = (attachedFiles, fieldName, maxSize) => {\n      let selectedRecord = this.state.selectedRecord || {};\n      selectedRecord[fieldName] = onDropAttachFileList(selectedRecord[fieldName], attachedFiles, maxSize);\n      this.setState({\n        selectedRecord,\n        actionType: \"new\"\n      });\n    };\n\n    this.deleteAttachment = (event, file, fieldName) => {\n      let selectedRecord = this.state.selectedRecord || {};\n      selectedRecord[fieldName] = deleteAttachmentDropZone(selectedRecord[fieldName], file);\n      this.setState({\n        selectedRecord,\n        actionType: \"delete\" //fileToDelete:file.name \n\n      });\n    };\n\n    this.validateTestGroupComplete = (operation, inputValue, ncontrolCode) => {\n      if (this.props.Login.masterData.selectedNode !== undefined && this.props.Login.masterData.selectedNode !== null) {\n        const masterData = this.props.Login.masterData;\n        const treeVersionTemplateIndex = masterData[\"TreeVersionTemplate\"].findIndex(x => x[\"ntreeversiontempcode\"] === masterData.selectedNode[\"ntreeversiontempcode\"]);\n        const templateVersionStatus = masterData[\"TreeVersionTemplate\"][treeVersionTemplateIndex].ntransactionstatus;\n\n        if (templateVersionStatus === transactionStatus.RETIRED) {\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_SELECTEDTEMPLATEISRETIRED\"\n          }));\n        } else {\n          if (inputValue.testgroupspecification) {\n            if (inputValue.testgroupspecification.napprovalstatus === transactionStatus.DRAFT || inputValue.testgroupspecification.napprovalstatus === transactionStatus.CORRECTION) {\n              return rsapi.post(\"testgroup/validateTestGroupComplete\", {\n                nallottedspeccode: inputValue.testgroupspecification.nallottedspeccode,\n                \"userinfo\": this.props.Login.userInfo\n              }).then(response => {\n                if (response.data && response.data.length > 0) {\n                  const inactiveTestArray = [];\n                  response.data.map(item => inactiveTestArray.indexOf(item.stestname) === -1 ? inactiveTestArray.push(item.stestname) : \"\");\n                  const data = \" [\" + inactiveTestArray + \"] \" + this.props.intl.formatMessage({\n                    id: \"IDS_INACTIVETESTSATCOMPLETE\"\n                  });\n                  this.confirmMessage.confirm(this.props.intl.formatMessage({\n                    id: \"IDS_CONFIRMATION\"\n                  }), this.props.intl.formatMessage({\n                    id: \"IDS_CONFIRMATION\"\n                  }), data, this.props.intl.formatMessage({\n                    id: \"IDS_OK\"\n                  }), this.props.intl.formatMessage({\n                    id: \"IDS_CANCEL\"\n                  }), () => this.completeSpecification(operation, inputValue, ncontrolCode), false, undefined);\n                } else {\n                  this.completeSpecification(operation, inputValue, ncontrolCode);\n                }\n              }).catch(error => {\n                if (error.response.status === 500) {\n                  toast.error(this.props.intl.formatMessage({\n                    id: error.message\n                  }));\n                } else {\n                  toast.warn(this.props.intl.formatMessage({\n                    id: error.response\n                  }));\n                }\n              });\n            } else {\n              toast.warn(this.props.intl.formatMessage({\n                id: \"IDS_SPECIFICATIONSTATUSMUSTBEDRAFTCORRECTION\"\n              }));\n            }\n          } else {\n            toast.warn(this.props.intl.formatMessage({\n              id: \"IDS_SELECTSPECIFICATION\"\n            }));\n          }\n        }\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTSPECIFICATION\"\n        }));\n      }\n    };\n\n    this.retireSpec = (operation, selectedSpecification, approvalRoleActionDetail, retireSpecId) => {\n      if (selectedSpecification.testgroupspecification.napprovalstatus !== transactionStatus.RETIRED) {\n        if (approvalRoleActionDetail.length > 0 && approvalRoleActionDetail[0].nlevelno === transactionStatus.ACTIVE) {\n          if (selectedSpecification.testgroupspecification[\"napprovalstatus\"] === approvalRoleActionDetail[0].ntransactionstatus) {\n            const inputParam = {\n              inputData: {\n                nallottedspeccode: selectedSpecification.testgroupspecification,\n                treetemplatemanipulation: selectedSpecification.treetemplatemanipulation,\n                approvalRoleActionDetail: approvalRoleActionDetail[0],\n                userinfo: this.props.Login.userInfo,\n                operation: operation\n              },\n              classUrl: \"testgroup\",\n              operation: operation,\n              methodUrl: \"Spec\",\n              screenName: \"IDS_STUDYPLAN\"\n            };\n            let masterData = this.props.Login.masterData;\n\n            if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, retireSpecId)) {\n              const updateInfo = {\n                typeName: DEFAULT_RETURN,\n                data: {\n                  loadEsign: true,\n                  screenData: {\n                    inputParam,\n                    masterData\n                  },\n                  openModal: true,\n                  screenName: \"IDS_STUDYPLAN\",\n                  operation: operation,\n                  selectedRecord: {}\n                }\n              };\n              this.props.updateStore(updateInfo);\n            } else {\n              this.props.retireSpecification(inputParam.inputData, masterData);\n            }\n          } else {\n            toast.warn(this.props.intl.formatMessage({\n              id: \"IDS_RETIRECANBECONEAFTERFINAL\"\n            }));\n          }\n        } else {\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_FINALLEVELAPPROVE\"\n          }));\n        }\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_ALREADYRETIRED\"\n        }));\n      }\n    };\n\n    this.specificationReport = (operation, ncontrolCode) => {\n      if (this.props.Login.masterData.SelectedComponent && this.props.Login.masterData.SelectedTest) {\n        const inputParam = {\n          inputData: {\n            sprimarykeyname: 'nallottedspeccode',\n            userinfo: this.props.Login.userInfo,\n            ncontrolcode: ncontrolCode,\n            nregtypecode: transactionStatus.NA,\n            nregsubtypecode: transactionStatus.NA,\n            nreportmodulecode: transactionStatus.NA,\n            nreporttypecode: REPORTTYPE.CONTROLBASED,\n            nreportdecisiontypecode: transactionStatus.NA,\n            certificatetypecode: transactionStatus.NA,\n            nsectioncode: transactionStatus.NA,\n            operation: operation,\n            nallottedspeccode: this.props.Login.masterData['SelectedSpecification']['nallottedspeccode'],\n            selectedComponent: this.props.Login.masterData[\"SelectedComponent\"],\n            selectedTest: this.props.Login.masterData[\"SelectedTest\"],\n            filterData: this.state.filterData\n          }\n        };\n        this.props.reportSpecification(inputParam['inputData']);\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_REPORTCANNOTGENERATEFORCOMPWITHOUTTEST\"\n        }));\n      }\n    };\n\n    this.completeSpecification = (operation, inputValue, ncontrolCode) => {\n      if (inputValue.testgroupspecification) {\n        if (inputValue.testgroupspecification.napprovalstatus === transactionStatus.DRAFT || inputValue.testgroupspecification.napprovalstatus === transactionStatus.CORRECTION) {\n          const inputParam = {\n            inputData: {\n              userinfo: this.props.Login.userInfo,\n              ntreeversiontempcode: this.state.filterData.ntreeversiontempcode.value,\n              testGroupTest: this.props.Login.masterData.TestGroupTest,\n              ...inputValue\n            },\n            classUrl: \"testgroup\",\n            operation: operation,\n            methodUrl: \"Specification\",\n            screenName: \"IDS_SPECIFICATION\"\n          };\n\n          if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, ncontrolCode)) {\n            const updateInfo = {\n              typeName: DEFAULT_RETURN,\n              data: {\n                loadEsign: true,\n                screenData: {\n                  inputParam,\n                  masterData: this.props.Login.masterData\n                },\n                openModal: true,\n                screenName: \"IDS_SPECIFICATION\",\n                operation: operation,\n                selectedRecord: {}\n              }\n            };\n            this.props.updateStore(updateInfo);\n          } else {\n            this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\", {});\n          }\n        } else {\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_SPECIFICATIONSTATUSMUSTBEDRAFTCORRECTION\"\n          }));\n        }\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTSPECIFICATION\"\n        }));\n      }\n    };\n\n    this.approveSpecification = (status, needEsign) => {\n      const masterData = this.props.Login.masterData;\n      const inputParam = {\n        inputData: {\n          userinfo: this.props.Login.userInfo,\n          treetemplatemanipulation: masterData.selectedNode,\n          ntreeversiontempcode: this.state.filterData.ntreeversiontempcode.value,\n          testgroupspecification: { ...masterData.SelectedSpecification,\n            napprovalstatus: status\n          }\n        },\n        classUrl: \"testgroup\",\n        operation: \"approve\",\n        methodUrl: \"Specification\",\n        screenName: \"IDS_SPECIFICATION\"\n      };\n\n      if (needEsign === transactionStatus.YES) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData\n            },\n            openModal: true,\n            screenName: \"IDS_SPECIFICATION\",\n            operation: \"approve\",\n            selectedRecord: {}\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, masterData, \"openModal\", {});\n      }\n    };\n\n    this.onComboChange = (comboData, fieldName, caseNo, optional) => {\n      let selectedRecord = this.state.selectedRecord || {};\n\n      switch (caseNo) {\n        case 1:\n          if (fieldName === \"ntestcode\") {\n            selectedRecord[fieldName] = comboData;\n            this.setState({\n              selectedRecord\n            });\n          } else {\n            selectedRecord[fieldName] = comboData;\n            this.setState({\n              selectedRecord\n            });\n          }\n\n          break;\n\n        case 2:\n          selectedRecord[\"parameterTypeCode\"] = comboData.value;\n          selectedRecord[fieldName] = comboData;\n          this.setState({\n            selectedRecord\n          });\n          break;\n\n        case 3:\n          selectedRecord[\"schecklistversionname\"] = comboData.item.schecklistversionname;\n          selectedRecord[fieldName] = comboData;\n          this.setState({\n            selectedRecord\n          });\n          break;\n\n        default:\n          break;\n      }\n    };\n\n    this.validateEsign = () => {\n      const inputParam = {\n        inputData: {\n          \"userinfo\": { ...this.props.Login.userInfo,\n            sreason: this.state.selectedRecord[\"esigncomments\"],\n            nreasoncode: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].value,\n            spredefinedreason: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].label\n          },\n          password: this.state.selectedRecord[\"esignpassword\"]\n        },\n        screenData: this.props.Login.screenData\n      };\n      this.props.validateEsignCredential(inputParam, \"openModal\");\n    };\n\n    const componentDataState = {\n      skip: 0,\n      take: 10\n    };\n    const historyDataState = {\n      skip: 0,\n      take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n    };\n    const clinicalspecDataState = {\n      skip: 0,\n      take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5,\n      group: [{\n        field: 'sgendername'\n      }]\n    };\n    this.state = {\n      selectedRecord: {},\n      filterData: {},\n      error: \"\",\n      userRoleControlRights: [],\n      controlMap: new Map(),\n      componentDataState,\n      historyDataState,\n      clinicalspecDataState,\n      tempFilterData: {},\n      showTest: true,\n      testskip: 0,\n      testtake: this.props.Login.settings ? this.props.Login.settings[12] : 5,\n      skipRulesEngine: 0,\n      takeRulesEngine: this.props.Login.settings ? this.props.Login.settings[12] : 5,\n      fixefScrollHeight: window.outerHeight - 400,\n      initialVerticalWidth: \"20vh\",\n      testView: true,\n      //paneHeight:'calc(100vh - ' +window.outerHeight-847 + 'px)'\n      paneHeight: 'calc(100vh -183px)'\n    };\n    this.componentBreadcrumbs = [];\n    this.breadCrumbData = [];\n    this.searchRef = React.createRef();\n    this.specSubField = [{\n      [designProperties.VALUE]: \"stransdisplaystatus\"\n    }, {\n      [designProperties.VALUE]: \"sapprovalstatus\",\n      [designProperties.COLOUR]: true\n    }];\n    this.myRef = React.createRef();\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    if (props.Login.masterStatus !== \"\") {\n      if (props.Login.errorCode === 417 || props.Login.errorCode === 409) {\n        toast.warn(props.Login.masterStatus);\n        props.Login.masterStatus = \"\";\n      }\n    }\n\n    if (props.Login.error !== state.error) {\n      toast.error(props.Login.error);\n      props.Login.error = \"\";\n    }\n\n    return null;\n  }\n\n  componentDidMount() {\n    if (this.parentHeight) {\n      const height = this.parentHeight.clientHeight;\n      this.setState({\n        parentHeight: height - 50\n      });\n    }\n  }\n\n  render() {\n    const {\n      TestGroupSpecification,\n      SelectedSpecification,\n      SelectedTest,\n      AgaramTree,\n      OpenNodes,\n      selectedNode,\n      FocusKey,\n      ActiveKey,\n      SelectedComponent,\n      TestGroupTest,\n      TestGroupSpecSampleType,\n      searchedData,\n      TestGroupTestParameter\n    } = this.props.Login.masterData; // const deleteTree = {\n    //     methodUrl: \"Tree\", operation: \"delete\", inputParam: this.props.Login.inputParam,\n    //     userInfo: this.props.Login.userInfo, screenName: \"IDS_TREE\"\n    // };\n\n    const testGroupTestData = searchedData || TestGroupTest || [];\n\n    if (TestGroupTestParameter) {\n      sortData(TestGroupTestParameter, \"ascending\", \"nsorter\");\n    }\n\n    if (testGroupTestData) {\n      sortData(testGroupTestData, \"descending\", \"nsorter\");\n    }\n\n    const getComponent = {\n      screenName: \"IDS_COMPONENT\",\n      operation: \"get\",\n      inputParam: this.props.Login.inputParam,\n      userInfo: this.props.Login.userInfo,\n      methodUrl: \"TestGroupComponent\",\n      keyName: \"testgroupspecification\"\n    };\n    const addSpecParam = {\n      testgroupspecification: SelectedSpecification,\n      selectedRecord: this.state.filterData,\n      userInfo: this.props.Login.userInfo,\n      selectedNode\n    };\n    const editSpecParam = {\n      selectedRecord: this.state.filterData,\n      userinfo: this.props.Login.userInfo,\n      selectedNode\n    };\n    const specDeleteParam = {\n      operation: \"delete\",\n      methodUrl: \"Specification\",\n      screenName: \"IDS_SPECIFICATION\",\n      keyName: \"testgroupspecification\",\n      filterData: this.state.filterData\n    };\n    const addSpecId = this.state.controlMap.has(\"AddSpecification\") && this.state.controlMap.get(\"AddSpecification\").ncontrolcode;\n    const addTreeId = this.state.controlMap.has(\"AddTree\") && this.state.controlMap.get(\"AddTree\").ncontrolcode;\n    const editTreeId = this.state.controlMap.has(\"EditTree\") && this.state.controlMap.get(\"EditTree\").ncontrolcode;\n    const deleteTreeId = this.state.controlMap.has(\"DeleteTree\") && this.state.controlMap.get(\"DeleteTree\").ncontrolcode;\n    const editSpecId = this.state.controlMap.has(\"EditSpecification\") && this.state.controlMap.get(\"EditSpecification\").ncontrolcode;\n    const deleteSpecId = this.state.controlMap.has(\"DeleteSpecification\") && this.state.controlMap.get(\"DeleteSpecification\").ncontrolcode;\n    const addComponentId = this.state.controlMap.has(\"AddComponent\") && this.state.controlMap.get(\"AddComponent\").ncontrolcode;\n    const deleteComponentId = this.state.controlMap.has(\"DeleteComponent\") && this.state.controlMap.get(\"DeleteComponent\").ncontrolcode;\n    const addTestId = this.state.controlMap.has(\"AddTest\") && this.state.controlMap.get(\"AddTest\").ncontrolcode;\n    const deleteTestId = this.state.controlMap.has(\"DeleteTest\") && this.state.controlMap.get(\"DeleteTest\").ncontrolcode;\n    const editTestId = this.state.controlMap.has(\"EditTest\") && this.state.controlMap.get(\"EditTest\").ncontrolcode;\n    const viewFileId = this.state.controlMap.has(\"ViewTestFile\") && this.state.controlMap.get(\"ViewTestFile\").ncontrolcode;\n    const confirmMessage = new ConfirmMessage();\n    const deleteTree = {\n      methodUrl: \"Tree\",\n      operation: \"delete\",\n      inputParam: this.props.Login.inputParam,\n      userInfo: this.props.Login.userInfo,\n      screenName: \"IDS_TREE\",\n      ncontrolCode: deleteTreeId,\n      filterData: this.state.filterData\n    };\n    const getTest = {\n      screenName: \"IDS_TEST\",\n      operation: \"get\",\n      masterData: this.props.Login.masterData,\n      userInfo: this.props.Login.userInfo,\n      methodUrl: \"TestGroupTest\",\n      keyName: \"ntestgrouptestcode\"\n    };\n    const filterParam = {\n      testskip: 0,\n      testtake: this.props.Login.settings ? this.props.Login.settings[12] : 5,\n      inputListName: \"TestGroupTest\",\n      selectedObject: \"SelectedTest\",\n      primaryKeyField: \"ntestgrouptestcode\",\n      fetchUrl: \"testgroup/getTestGroupTest\",\n      fecthInputObject: {\n        userinfo: this.props.Login.userInfo\n      },\n      masterData: this.props.Login.masterData,\n      searchFieldList,\n      changeList: [\"TestGroupTestFormula\", \"TestGroupTestNumericParameter\", \"TestGroupTestPredefinedParameter\", \"TestGroupTestCharParameter\", \"TestGroupTestParameter\"],\n      isSingleSelect: true\n    };\n    const filterParamRulesEngine = {\n      skipRulesEngine: 0,\n      takeRulesEngine: this.props.Login.settings ? this.props.Login.settings[12] : 5,\n      inputListName: \"RulesEngine\",\n      selectedObject: \"SelectedRulesEngine\",\n      primaryKeyField: \"ntestgrouprulesenginecode\",\n      fetchUrl: \"testgrouprulesengine/getSelectedTestGroupRulesEngine\",\n      fecthInputObject: {\n        userinfo: this.props.Login.userInfo,\n        ntestgrouptestcode: this.props.Login.masterData.SelectedTest && this.props.Login.masterData.SelectedTest.ntestgrouptestcode\n      },\n      masterData: this.props.Login.masterData,\n      'searchFieldList': [\"srulename\", \"stransdisplaystatus\"],\n      changeList: [],\n      isSingleSelect: true\n    };\n    const specMandatoryFields = [];\n    const compMandatoryFields = [];\n    const editTestMandatoryFields = [];\n    const addTestMandatoryFields = [];\n    specificationColumnList.forEach(item => item.mandatory === true ? specMandatoryFields.push(item) : \"\");\n    componentColumnList.forEach(item => item.mandatory === true ? compMandatoryFields.push(item) : \"\");\n    editTestColumnList.forEach(item => item.mandatory === true ? editTestMandatoryFields.push(item) : \"\");\n    addTestColumnList.forEach(item => item.mandatory === true ? addTestMandatoryFields.push(item) : \"\");\n\n    if (this.props.Login.masterData && Object.values(this.props.Login.masterData).length > 0) {\n      if (selectedNode && selectedNode.sleveldescription) {\n        const splitNode = this.props.Login.masterData.ActiveKey.split('/');\n        let treeNodeNames = [];\n        splitNode.forEach(nodeItem => {\n          this.props.Login.masterData.TreeTemplateManipulation.forEach(treeItem => {\n            if (treeItem.ntemplatemanipulationcode === parseInt(nodeItem)) treeNodeNames.push(treeItem.sleveldescription);\n          });\n        });\n        this.componentBreadcrumbs = treeNodeNames;\n\n        if (SelectedSpecification && SelectedSpecification !== null && SelectedSpecification.sspecname) {\n          this.componentBreadcrumbs.push(SelectedSpecification.sspecname);\n\n          if (SelectedComponent && SelectedComponent !== null && SelectedComponent.ncomponentcode !== -1) {\n            // this.componentBreadcrumbs[2] = this.props.intl.formatMessage({ id: \"IDS_COMPONENT\" }) + \": \" + SelectedComponent.scomponentname;\n            this.componentBreadcrumbs.push(SelectedComponent.scomponentname);\n          } else {// delete this.componentBreadcrumbs[2];\n          }\n        } else {// delete this.componentBreadcrumbs[1];\n        }\n      } else {\n        this.componentBreadcrumbs = []; // delete this.componentBreadcrumbs[0];\n      }\n    }\n\n    this.confirmMessage = new ConfirmMessage(); //New Design\n\n    const specDesign = /*#__PURE__*/React.createElement(React.Fragment, null, this.componentBreadcrumbs && this.componentBreadcrumbs.length > 0 && /*#__PURE__*/React.createElement(\"div\", {\n      className: \"component_breadcrumbs\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 294,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"ul\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 295,\n        columnNumber: 25\n      }\n    }, this.componentBreadcrumbs.map(item => {\n      return /*#__PURE__*/React.createElement(\"li\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 297,\n          columnNumber: 40\n        }\n      }, item);\n    }))), /*#__PURE__*/React.createElement(ContentPanel, {\n      hidden: this.state.showTest,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 303,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"card_group\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 304,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 305,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Card.Header, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 306,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      style: {\n        display: \"inline-block\",\n        marginTop: \"1%\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 307,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(\"h4\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 308,\n        columnNumber: 37\n      }\n    }, this.props.intl.formatMessage({\n      id: \"IDS_SPECIFICATIONINFO\"\n    }))), /*#__PURE__*/React.createElement(\"button\", {\n      className: \"btn btn-primary\",\n      style: {\n        float: \"right\",\n        marginRight: \"1rem\"\n      },\n      onClick: () => this.showSpecAndTestInfo1(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 315,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faEye,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 317,\n        columnNumber: 37\n      }\n    }), \"  \", this.props.intl.formatMessage({\n      id: \"IDS_TEST\"\n    }))), /*#__PURE__*/React.createElement(Card.Body, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 321,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(SpecificationInfo, {\n      controlMap: this.state.controlMap,\n      userRoleControlRights: this.state.userRoleControlRights,\n      selectedSpecification: this.props.Login.masterData.SelectedSpecification,\n      userInfo: this.props.Login.userInfo,\n      selectedNode: this.props.Login.masterData.selectedNode,\n      selectedRecord: this.state.filterData,\n      approvalRoleActionDetail: this.props.Login.masterData.ApprovalRoleActionDetail,\n      screenName: \"IDS_SPECIFICATIONINFO\",\n      deleteRecord: this.deleteRecord,\n      addSpecification: this.props.addSpecification,\n      filterData: this.state.filterData //completeSpecification={this.completeSpecification}\n      ,\n      completeSpecification: this.validateTestGroupComplete,\n      approveSpecification: this.approveSpecification,\n      specificationReport: this.specificationReport,\n      retireSpec: this.retireSpec,\n      masterData: this.props.Login.masterData,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 322,\n        columnNumber: 33\n      }\n    })))), /*#__PURE__*/React.createElement(Card, {\n      body: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 345,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 347,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(CustomTab, {\n      tabDetail: this.tabDetail(),\n      onTabChange: this.onTabChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 348,\n        columnNumber: 29\n      }\n    })))));\n    const testDesign = /*#__PURE__*/React.createElement(Card, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 355,\n        columnNumber: 28\n      }\n    }, /*#__PURE__*/React.createElement(Card.Header, {\n      className: \"sm-header\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 356,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      style: {\n        display: \"inline-block\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 357,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"h4\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 358,\n        columnNumber: 21\n      }\n    }, this.props.intl.formatMessage({\n      id: \"IDS_TEST\"\n    }))), /*#__PURE__*/React.createElement(\"button\", {\n      className: \"btn btn-primary\",\n      style: {\n        float: \"right\"\n      },\n      onClick: () => this.showSpecAndTestInfo(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 360,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faEye,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 362,\n        columnNumber: 21\n      }\n    }), \"  \", this.props.intl.formatMessage({\n      id: \"IDS_SPECINFO\"\n    }))), /*#__PURE__*/React.createElement(Card.Body, {\n      className: this.state.testView ? 'p-0' : 'no-pad-t',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 366,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(TransactionListMasterJsonView, {\n      cardHead: 167,\n      componentBreadcrumbs: this.breadCrumbData ? this.breadCrumbData.length > 0 ? true : false : false // notSearchable={false}\n      ,\n      masterList: searchedData || TestGroupTest || [] //selectedMaster={[SelectedTest]}\n      ,\n      clickIconGroup: true,\n      selectedMaster: SelectedTest !== undefined ? [SelectedTest] : undefined,\n      primaryKeyField: \"ntestgrouptestcode\",\n      getMasterDetail: this.props.getTestGroupDetails,\n      inputParam: getTest,\n      additionalParam: [],\n      mainField: \"stestname\",\n      selectedListName: \"SelectedTest\",\n      objectName: \"testgrouptest\",\n      listName: \"IDS_TEST\",\n      showStatusLink: true,\n      statusFieldName: \"stransdisplaystatus\",\n      statusField: \"ntransactionstatus\",\n      subFields: testSubFields,\n      moreField: testMoreFields,\n      needValidation: false,\n      needFilter: false,\n      filterColumnData: this.props.filterTransactionList,\n      searchListName: \"searchedData\",\n      searchRef: this.searchRef,\n      hidePaging: false,\n      filterParam: filterParam,\n      handlePageChange: this.handlePageChange,\n      skip: this.state.testskip,\n      take: this.state.testtake,\n      pageSize: this.props.Login.settings && this.props.Login.settings[13].split(\",\").map(setting => parseInt(setting)),\n      actionIcons: [{\n        title: this.props.intl.formatMessage({\n          id: \"IDS_VIEW\"\n        }),\n        controlname: \"faCloudDownloadAlt\",\n        objectName: \"selectedTest\",\n        hidden: this.state.userRoleControlRights.indexOf(viewFileId) === -1,\n        inputData: {\n          masterData: this.props.Login.masterData,\n          userInfo: this.props.Login.userInfo\n        },\n        onClick: props => this.viewTestFile(props),\n        needConditionalIcon: true,\n        conditionalIconFunction: this.fileViewIcon\n      }, {\n        title: this.props.intl.formatMessage({\n          id: \"IDS_VIEW\"\n        }),\n        controlname: \"faExternalLinkAlt\",\n        objectName: \"selectedTest\",\n        hidden: this.state.userRoleControlRights.indexOf(viewFileId) === -1,\n        inputData: {\n          masterData: this.props.Login.masterData,\n          userInfo: this.props.Login.userInfo\n        },\n        onClick: props => this.viewTestFile(props),\n        needConditionalIcon: true,\n        conditionalIconFunction: this.linkViewIcon\n      }, {\n        title: this.props.intl.formatMessage({\n          id: \"IDS_EDIT\"\n        }),\n        controlname: \"faPencilAlt\",\n        objectName: \"testgroupspecification\",\n        hidden: this.state.userRoleControlRights.indexOf(editTestId) === -1,\n        inputData: {\n          masterData: this.props.Login.masterData,\n          userInfo: this.props.Login.userInfo\n        },\n        onClick: props => this.props.editTestGroupTest(\"update\", props.SelectedTest[0], this.props.Login.userInfo, editTestId, SelectedSpecification, this.state.filterData, props.masterData)\n      }, {\n        title: this.props.intl.formatMessage({\n          id: \"IDS_DELETE\"\n        }),\n        controlname: \"faTrashAlt\",\n        objectName: \"testgrouptest\",\n        hidden: this.state.userRoleControlRights.indexOf(deleteTestId) === -1,\n        inputData: {\n          masterData: this.props.Login.masterData,\n          userInfo: this.props.Login.userInfo\n        },\n        onClick: props => confirmMessage.confirm(\"deleteMessage\", this.props.intl.formatMessage({\n          id: \"IDS_DELETE\"\n        }), this.props.intl.formatMessage({\n          id: \"IDS_DEFAULTCONFIRMMSG\"\n        }), this.props.intl.formatMessage({\n          id: \"IDS_OK\"\n        }), this.props.intl.formatMessage({\n          id: \"IDS_CANCEL\"\n        }), () => this.deleteTest({\n          props,\n          ncontrolCode: deleteTestId,\n          filterData: this.state.filterData\n        }))\n      }],\n      commonActions: /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Button, {\n        className: \"btn btn-icon-rounded btn-circle solid-blue\",\n        role: \"button\",\n        hidden: this.state.userRoleControlRights.indexOf(addTestId) === -1,\n        \"data-tip\": this.props.intl.formatMessage({\n          id: \"IDS_ADD\"\n        }) // data-for=\"tooltip-list-wrap\"\n        ,\n        onClick: () => this.props.addTestGroupTest(SelectedComponent, this.props.Login.userInfo, addTestId, SelectedSpecification, this.state.filterData, this.props.Login.masterData),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 449,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n        icon: faPlus,\n        title: this.props.intl.formatMessage({\n          id: \"IDS_ADD\"\n        }),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 454,\n          columnNumber: 33\n        }\n      }))),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 367,\n        columnNumber: 17\n      }\n    })));\n    const paramDesign = /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(ContentPanel, {\n      hidden: !this.state.showTest,\n      className: \"grouped-param\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 464,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 465,\n        columnNumber: 21\n      }\n    }, console.log(this.props.Login.ncontrolCode), /*#__PURE__*/React.createElement(TestGroupTestTab, {\n      paneHeight: this.state.paneHeight,\n      testView: this.state.testView,\n      masterData: this.props.Login.masterData,\n      inputParam: this.props.Login.inputParam,\n      userInfo: this.props.Login.userInfo,\n      userRoleControlRights: this.state.userRoleControlRights,\n      esignRights: this.props.Login.userRoleControlRights,\n      screenName: this.props.Login.screenName,\n      openChildModal: this.props.Login.openChildModal,\n      operation: this.props.Login.operation,\n      loadEsign: this.props.Login.loadEsign,\n      testGroupInputData: this.props.Login.testGroupInputData,\n      parameterData: this.props.Login.parameterData,\n      selectedRecord: this.state.selectedRecord,\n      screenData: this.props.Login.screenData,\n      ncontrolCode: this.props.Login.ncontrolCode,\n      controlMap: this.state.controlMap,\n      testGroupCheckList: this.props.Login.testGroupCheckList,\n      openTemplateModal: this.props.Login.openTemplateModal,\n      editTestGroupTest: this.props.editTestGroupTest,\n      updateStore: this.props.updateStore,\n      crudMaster: this.props.crudMaster,\n      getTestGroupParameter: this.props.getTestGroupParameter,\n      editTestGroupParameter: this.props.editTestGroupParameter,\n      filterData: this.state.filterData,\n      addTestGroupCodedResult: this.props.addTestGroupCodedResult,\n      addTestGroupNumericTab: this.props.addTestGroupNumericTab,\n      validateEsignCredential: this.props.validateEsignCredential,\n      filterColumnData: this.props.filterColumnData,\n      viewTestGroupCheckList: this.props.viewTestGroupCheckList,\n      getDataForTestMaterial: this.props.getDataForTestMaterial,\n      materialType: this.props.Login.materialType,\n      getMaterialCategoryBasedMaterialType: this.props.getMaterialCategoryBasedMaterialType,\n      materialCategoryList: this.props.Login.materialCategoryList,\n      materialList: this.props.Login.materialList,\n      getMaterialBasedMaterialCategory: this.props.getMaterialBasedMaterialCategory,\n      getTestGroupMaterial: this.props.getTestGroupMaterial,\n      getDataForEditTestMaterial: this.props.getDataForEditTestMaterial,\n      dataState: this.state.clinicalspecDataState,\n      dataStateChange: this.specDataStateChange,\n      getTestGroupRulesEngineAdd: this.getTestGroupRulesEngineAdd,\n      settings: this.props.Login.settings,\n      skip: this.state.testskip,\n      take: this.state.testtake,\n      getEditTestGroupRulesEngine: this.props.getEditTestGroupRulesEngine,\n      getSelectedTestGroupRulesEngine: this.props.getSelectedTestGroupRulesEngine,\n      ConfirmDeleteRule: this.ConfirmDeleteRule,\n      approveVersion: (masterdata, nflag) => this.approveVersion(masterdata, nflag),\n      openflowview: props => this.openflowview(props),\n      handlePageChangeRuleEngine: event => this.handlePageChangeRuleEngine(event),\n      skipRulesEngine: this.state.skipRulesEngine,\n      takeRulesEngine: this.state.takeRulesEngine,\n      viewOutcome: props => this.viewOutcome(props),\n      filterParamRulesEngine: filterParamRulesEngine,\n      filterTransactionList: this.props.filterTransactionList,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 474,\n        columnNumber: 25\n      }\n    }))));\n    const mainDesign = /*#__PURE__*/React.createElement(SplitterLayout, {\n      customClassName: this.state.testView ? \"detailed-inner\" : \"detailed-inner no-height \",\n      vertical: this.state.testView ? false : true,\n      borderColor: \"#999\",\n      primaryIndex: 1,\n      percentage: true //secondaryInitialSize={this.state.testView ? 600 : this.state.fixefScrollHeight}\n      ,\n      secondaryInitialSize: 37,\n      primaryMinSize: 30,\n      secondaryMinSize: 37,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 539,\n        columnNumber: 13\n      }\n    }, testDesign, paramDesign); // const testDesign = this.state.testView ?\n    //     <SplitterLayout\n    //         customClassName=\"detailed-inner\"\n    //         borderColor=\"#999\"\n    //         primaryIndex={1}>\n    //         {tempDesign}{paramDesign}\n    //     </SplitterLayout>\n    //     :\n    //     <SplitterLayout\n    //         customClassName=\"detailed-inner no-height\"\n    //         vertical\n    //         borderColor=\"#999\"\n    //         primaryIndex={1}\n    //         // onSecondaryPaneSizeChange={this.verticalPaneSizeChange}\n    //         secondaryInitialSize={this.state.fixefScrollHeight}\n    //     >\n    //         <ContentPanel>\n    //             {tempDesign}\n    //         </ContentPanel>\n    //         {paramDesign}\n    //     </SplitterLayout>\n\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(ListWrapper, {\n      className: \"client-listing-wrap mtop-4 screen-height-window\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 581,\n        columnNumber: 17\n      }\n    }, this.breadCrumbData && this.breadCrumbData.length > 0 && /*#__PURE__*/React.createElement(BreadcrumbComponent, {\n      breadCrumbItem: this.breadCrumbData,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 583,\n        columnNumber: 25\n      }\n    }), /*#__PURE__*/React.createElement(Row, {\n      noGutters: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 586,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      className: \"parent-port-height sticky_head_parent\",\n      ref: parentHeight => {\n        this.parentHeight = parentHeight;\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 587,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(SplitterLayout, {\n      borderColor: \"#999\",\n      primaryIndex: 1,\n      percentage: true,\n      secondaryInitialSize: 30 //customClassName=\"fixed_list_height\"\n      ,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 588,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: `${this.state.showModalBg ? 'show_modal_bg fixed_list_height' : 'fixed_list_height'}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 595,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"sticky_head\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 596,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(SearchAdd, {\n      className: \"border fixed_ico_list title_grp_custom\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 597,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(\"h4\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 598,\n        columnNumber: 45\n      }\n    }, this.props.intl.formatMessage({\n      id: \"IDS_PROFILETREE\"\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"icon_group_right_aligned\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 599,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(AdvFilter, {\n      filterComponent: [{\n        \"IDS_SAMPLEFILTER\": /*#__PURE__*/React.createElement(SampleFilter, {\n          sampleType: this.state.sampleType,\n          treeVersionTemplate: this.state.treeVersionTemplate,\n          productCategory: this.state.productCategory,\n          product: this.state.product,\n          projectType: this.state.projectType,\n          project: this.state.project,\n          onFilterComboChange: this.onFilterComboChange,\n          tempFilterData: this.state.tempFilterData,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 603,\n            columnNumber: 61\n          }\n        }),\n        needActionStrip: false\n      }],\n      onFilterSubmit: this.onFilterSumbit,\n      showModalBg: e => this.setState({\n        showModalBg: e\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 600,\n        columnNumber: 49\n      }\n    }), /*#__PURE__*/React.createElement(ProductList, {\n      className: \"d-flex product-category float-right icon-group-wrap\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 620,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      className: \"btn btn-icon-rounded btn-circle solid-blue mr-1\",\n      role: \"button\",\n      hidden: this.state.userRoleControlRights.indexOf(addTreeId) === -1,\n      onClick: () => this.props.createTree(this.state.filterData, this.props.Login.userInfo, selectedNode, addTreeId),\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_ADD\"\n      }) //  data-for=\"tooltip-list-wrap\"\n      ,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 622,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faPlus,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 628,\n        columnNumber: 57\n      }\n    })), /*#__PURE__*/React.createElement(Nav.Link, {\n      className: \"btn btn-circle outline-grey mr0 mr-1\",\n      name: \"edittestname\",\n      hidden: this.state.userRoleControlRights.indexOf(editTreeId) === -1,\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_EDIT\"\n      }) //  data-for=\"tooltip-list-wrap\"\n      ,\n      onClick: () => this.props.editTree(\"update\", selectedNode, this.props.Login.userInfo, editTreeId, this.state.filterData, this.props.Login.masterData),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 631,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faPencilAlt,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 637,\n        columnNumber: 57\n      }\n    })), /*#__PURE__*/React.createElement(Nav.Link, {\n      name: \"deleteLink\",\n      hidden: this.state.userRoleControlRights.indexOf(deleteTreeId) === -1,\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_DELETE\"\n      }) // data-for=\"tooltip-list-wrap\"\n      ,\n      className: \"btn btn-circle outline-grey \",\n      onClick: () => this.ConfirmDelete({ ...deleteTree\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 639,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faTrashAlt,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 645,\n        columnNumber: 57\n      }\n    })), /*#__PURE__*/React.createElement(Button, {\n      className: \"btn btn-circle outline-grey ml-1\",\n      variant: \"link\",\n      onClick: () => this.reloadData() // data-for=\"tooltip-list-wrap\"\n      ,\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_REFRESH\"\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 657,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faSync,\n      style: {\n        \"width\": \"0.6!important\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 661,\n        columnNumber: 57\n      }\n    })))))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"sticky_head_scroll_body\",\n      style: {\n        \"height\": this.state.parentHeight\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 669,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(PerfectScrollbar, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 670,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(FormTreeMenu, {\n      data: AgaramTree,\n      hasSearch: false,\n      handleTreeClick: this.onTreeClick,\n      initialOpenNodes: OpenNodes,\n      focusKey: FocusKey || \"\",\n      activeKey: ActiveKey || \"\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 671,\n        columnNumber: 45\n      }\n    }), /*#__PURE__*/React.createElement(TransationListMaster, {\n      notSearchable: true,\n      titleHead: this.props.intl.formatMessage({\n        id: \"IDS_SPECIFICATION\"\n      }),\n      titleClasses: \"title_grp_custom fixed_ico_list\",\n      masterList: TestGroupSpecification || [],\n      selectedMaster: [SelectedSpecification],\n      needMultiSelect: false,\n      primaryKeyField: \"nallottedspeccode\",\n      getMasterDetail: spec => this.props.getComponentBySpecId({ ...getComponent,\n        selectedRecord: spec,\n        historyDataState: this.state.historyDataState\n      }, this.props.Login.masterData, this.searchRef),\n      mainField: \"sspecname\",\n      selectedListName: \"testgroupspecification\",\n      objectName: \"testgroupspecification\",\n      listName: \"IDS_SPECIFICATION\",\n      onFilterSumbit: this.onFilterSumbit,\n      subFields: this.specSubField,\n      actionIcons: [{\n        title: this.props.intl.formatMessage({\n          id: \"IDS_EDIT\"\n        }),\n        controlname: \"faPencilAlt\",\n        objectName: \"testgroupspecification\",\n        hidden: this.state.userRoleControlRights.indexOf(editSpecId) === -1,\n        inputData: {\n          masterData: this.props.Login.masterData,\n          userInfo: this.props.Login.userInfo\n        },\n        onClick: props => this.props.addSpecification(\"update\", { ...editSpecParam,\n          ...props\n        }, editSpecId)\n      }, {\n        title: this.props.intl.formatMessage({\n          id: \"IDS_DELETE\"\n        }),\n        controlname: \"faTrashAlt\",\n        objectName: \"testgroupspecification\",\n        hidden: this.state.userRoleControlRights.indexOf(deleteSpecId) === -1,\n        inputData: {\n          masterData: this.props.Login.masterData,\n          userInfo: this.props.Login.userInfo\n        },\n        onClick: props => confirmMessage.confirm(\"deleteMessage\", this.props.intl.formatMessage({\n          id: \"IDS_DELETE\"\n        }), this.props.intl.formatMessage({\n          id: \"IDS_DEFAULTCONFIRMMSG\"\n        }), this.props.intl.formatMessage({\n          id: \"IDS_OK\"\n        }), this.props.intl.formatMessage({\n          id: \"IDS_CANCEL\"\n        }), () => this.deleteSpecRecord({\n          props,\n          ...specDeleteParam,\n          selectedRecord: SelectedSpecification,\n          ncontrolCode: deleteSpecId\n        }))\n      }],\n      needFilter: false,\n      commonActions: /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Button, {\n        className: \"btn btn-icon-rounded btn-circle solid-blue\",\n        role: \"button\",\n        hidden: this.state.userRoleControlRights.indexOf(addSpecId) === -1,\n        \"data-tip\": this.props.intl.formatMessage({\n          id: \"IDS_ADD\"\n        }) //  data-for=\"tooltip-list-wrap\"\n        ,\n        onClick: () => this.props.addSpecification(\"create\", { ...addSpecParam\n        }, addSpecId, this.props.Login.masterData),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 725,\n          columnNumber: 57\n        }\n      }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n        icon: faPlus // title={this.props.intl.formatMessage({ id: \"IDS_ADD\" })}\n        ,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 730,\n          columnNumber: 61\n        }\n      }))),\n      hideSearch: false,\n      hidePaging: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 679,\n        columnNumber: 45\n      }\n    }), SelectedSpecification && SelectedSpecification.ncomponentrequired === transactionStatus.YES && /*#__PURE__*/React.createElement(TransationListMaster, {\n      notSearchable: true,\n      titleHead: this.props.intl.formatMessage({\n        id: \"IDS_COMPONENT\"\n      }),\n      titleClasses: \"title_grp_custom fixed_ico_list\",\n      masterList: TestGroupSpecSampleType || [],\n      selectedMaster: [SelectedComponent],\n      needMultiSelect: false,\n      primaryKeyField: \"nspecsampletypecode\",\n      getMasterDetail: event => this.componentRowClick(event),\n      mainField: \"scomponentname\",\n      selectedListName: \"testgroupspecsampletype\",\n      objectName: \"testgroupspecsampletype\",\n      listName: \"IDS_COMPONENT\",\n      actionIcons: [{\n        title: this.props.intl.formatMessage({\n          id: \"IDS_DELETE\"\n        }),\n        // data-tip={this.props.intl.formatMessage({ id: \"IDS_ADD\" })}\n        controlname: \"faTrashAlt\",\n        objectName: \"testgroupspecsampletype\",\n        hidden: this.state.userRoleControlRights.indexOf(deleteComponentId) === -1,\n        inputData: {\n          masterData: this.props.Login.masterData,\n          userInfo: this.props.Login.userInfo\n        },\n        onClick: props => confirmMessage.confirm(\"deleteMessage\", this.props.intl.formatMessage({\n          id: \"IDS_DELETE\"\n        }), this.props.intl.formatMessage({\n          id: \"IDS_DEFAULTCONFIRMMSG\"\n        }), this.props.intl.formatMessage({\n          id: \"IDS_OK\"\n        }), this.props.intl.formatMessage({\n          id: \"IDS_CANCEL\"\n        }), () => this.deleteMultipleRecord({\n          props,\n          ncontrolCode: deleteComponentId\n        }))\n      }],\n      commonActions: /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Button, {\n        className: \"btn btn-icon-rounded btn-circle solid-blue\",\n        role: \"button\",\n        hidden: this.state.userRoleControlRights.indexOf(addComponentId) === -1,\n        \"data-tip\": this.props.intl.formatMessage({\n          id: \"IDS_ADD\"\n        }) //  data-for=\"tooltip-list-wrap\"\n        // title={this.props.intl.formatMessage({ id: \"IDS_ADD\" })}\n        ,\n        onClick: () => this.props.addComponent(SelectedSpecification, this.props.Login.userInfo, addComponentId, this.props.Login.masterData),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 776,\n          columnNumber: 61\n        }\n      }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n        icon: faPlus // title={this.props.intl.formatMessage({ id: \"IDS_ADD\" })} \n        ,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 782,\n          columnNumber: 65\n        }\n      }))),\n      hidePaging: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 740,\n        columnNumber: 49\n      }\n    })))), /*#__PURE__*/React.createElement(React.Fragment, null, this.state.testView ? /*#__PURE__*/React.createElement(React.Fragment, null, specDesign, this.state.showTest ? /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 799,\n        columnNumber: 49\n      }\n    }, mainDesign) : \"\") : /*#__PURE__*/React.createElement(PerfectScrollbar, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 805,\n        columnNumber: 41\n      }\n    }, specDesign, this.state.showTest ? /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 808,\n        columnNumber: 49\n      }\n    }, mainDesign) : \"\")))))), this.props.Login.openModal && this.props.Login.screenName && /*#__PURE__*/React.createElement(SlideOutModal, {\n      show: this.props.Login.openModal,\n      closeModal: this.closeModal,\n      className: this.props.Login.screenName === \"IDS_VIEWRULE\" ? \"wide-popup\" : \"\",\n      operation: this.props.Login.screenName === \"IDS_VIEWRULE\" || this.props.Login.screenName === \"IDS_VIEWOUTCOME\" ? \"\" : this.props.Login.operation,\n      inputParam: this.props.Login.inputParam,\n      screenName: this.props.Login.screenName,\n      esign: this.props.Login.loadEsign,\n      validateEsign: this.validateEsign,\n      onSaveClick: this.onSaveClick,\n      hideSave: this.props.Login.screenName === \"IDS_VIEWRULE\" || this.props.Login.screenName === \"IDS_VIEWOUTCOME\" ? true : false,\n      size: this.props.Login.screenName === \"IDS_VIEWRULE\" || this.props.Login.screenName === \"IDS_VIEWOUTCOME\" ? 'xl' : \"lg\",\n      selectedRecord: this.state.selectedRecord || {},\n      mandatoryFields: this.props.Login.screenName === \"IDS_SPECFILE\" ? this.findMandatoryFields(this.props.Login.screenName, this.state.selectedRecord) : this.props.Login.screenName === \"IDS_SPECIFICATION\" ? specMandatoryFields : this.props.Login.screenName === \"IDS_COMPONENT\" ? compMandatoryFields : this.props.Login.screenName === \"IDS_EDITTESTGROUPTEST\" ? editTestMandatoryFields : this.props.Login.screenName === \"IDS_TEST\" ? addTestMandatoryFields : this.props.Login.screenName === \"IDS_PROFILETREE\" || this.props.Login.screenName === \"IDS_EDITTREE\" ? this.props.Login.treeMandatoryFields : [],\n      addComponent: this.props.Login.loadEsign ? /*#__PURE__*/React.createElement(Esign, {\n        operation: this.props.Login.operation,\n        onInputOnChange: this.onEsignInputOnChange,\n        inputParam: this.props.Login.inputParam,\n        selectedRecord: this.state.selectedRecord || {},\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 845,\n          columnNumber: 29\n        }\n      }) : this.props.Login.screenName === \"IDS_SPECIFICATION\" ? /*#__PURE__*/React.createElement(AddTestGroupSpecification, {\n        selectedRecord: this.state.selectedRecord || {},\n        timeZoneList: this.props.Login.timeZoneList,\n        onInputOnChange: this.onInputOnChange,\n        handleDateChange: this.handleDateChange,\n        onComboChange: this.onComboChange,\n        screenName: this.props.Login.screenName,\n        operation: this.props.Login.operation,\n        userInfo: this.props.Login.userInfo,\n        nsampletypecode: this.props.Login.masterData.selectedNode.nsampletypecode,\n        settings: this.props.Login.settings,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 852,\n          columnNumber: 33\n        }\n      }) : this.props.Login.screenName === \"IDS_COMPONENT\" ? /*#__PURE__*/React.createElement(AddTestGroupTest, {\n        selectedRecord: this.state.selectedRecord || {},\n        testGroupInputData: this.props.Login.testGroupInputData,\n        screenName: this.props.Login.screenName,\n        onComboChange: this.onComboChange,\n        onFilterComboChange: this.onFilterComboChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 865,\n          columnNumber: 37\n        }\n      }) : this.props.Login.screenName === \"IDS_PROFILETREE\" ? /*#__PURE__*/React.createElement(AddProfileTree, {\n        selectedRecord: this.state.selectedRecord || {},\n        onInputOnChange: this.onInputOnChange,\n        treetempTranstestGroup: this.props.Login.TreetempTranstestGroup,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 873,\n          columnNumber: 41\n        }\n      }) : this.props.Login.screenName === \"IDS_SPECFILE\" ? /*#__PURE__*/React.createElement(AddFile, {\n        selectedRecord: this.state.selectedRecord || {},\n        onInputOnChange: this.onInputOnChange,\n        actionType: this.state.actionType,\n        onDrop: this.onDropSpecFile,\n        deleteAttachment: this.deleteAttachment,\n        linkMaster: this.props.Login.linkMaster,\n        editFiles: this.props.Login.editFiles,\n        maxSize: 20,\n        maxFiles: this.props.Login.operation === \"update\" ? 1 : 1,\n        multiple: this.props.Login.operation === \"update\" ? false : true,\n        label: this.props.intl.formatMessage({\n          id: \"IDS_SPECFILE\"\n        }),\n        hideDefaultToggle: true,\n        name: \"specfilename\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 879,\n          columnNumber: 45\n        }\n      }) : this.props.Login.screenName === \"IDS_EDITTREE\" ? /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 895,\n          columnNumber: 49\n        }\n      }, /*#__PURE__*/React.createElement(Col, {\n        md: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 896,\n          columnNumber: 53\n        }\n      }, /*#__PURE__*/React.createElement(FormInput, {\n        name: \"sleveldescription\",\n        label: this.state.selectedRecord.slabelname,\n        type: \"text\",\n        onChange: event => this.onInputOnChange(event, 1),\n        placeholder: this.state.selectedRecord.slabelname,\n        value: this.state.selectedRecord ? this.state.selectedRecord[\"sleveldescription\"] : \"\",\n        isMandatory: \"*\",\n        required: true,\n        maxLength: 100,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 897,\n          columnNumber: 57\n        }\n      }))) : this.props.Login.screenName === \"IDS_TEST\" ? /*#__PURE__*/React.createElement(AddTestGroupTest, {\n        selectedRecord: this.state.selectedRecord || {},\n        testGroupInputData: this.props.Login.testGroupInputData,\n        screenName: this.props.Login.screenName,\n        onComboChange: this.onComboChange,\n        onFilterComboChange: this.onFilterComboChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 911,\n          columnNumber: 53\n        }\n      }) : this.props.Login.screenName === \"IDS_EDITTESTGROUPTEST\" ? /*#__PURE__*/React.createElement(EditTestGroupTest, {\n        selectedRecord: this.state.selectedRecord || {},\n        testGroupInputData: this.props.Login.testGroupInputData,\n        onComboChange: this.onComboChange,\n        onInputOnChange: this.onInputOnChange,\n        onNumericInputChange: this.onNumericInputChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 918,\n          columnNumber: 57\n        }\n      }) : this.props.Login.screenName === \"IDS_VIEWRULE\" ? /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 925,\n          columnNumber: 61\n        }\n      }, /*#__PURE__*/React.createElement(Col, {\n        md: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 926,\n          columnNumber: 65\n        }\n      }, /*#__PURE__*/React.createElement(OrgTree, {\n        data: this.ruleflowobject(),\n        horizontal: true,\n        collapsable: true,\n        expandAll: true,\n        labelClassName: \"ruletree\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 927,\n          columnNumber: 69\n        }\n      }))) : this.props.Login.screenName === \"IDS_VIEWOUTCOME\" ? /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 938,\n          columnNumber: 61\n        }\n      }, /*#__PURE__*/React.createElement(Col, {\n        md: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 939,\n          columnNumber: 65\n        }\n      }, this.props.Login.masterData.SelectedRulesEngine && /*#__PURE__*/React.createElement(CustomTab, {\n        tabDetail: this.tabDetailRulesEngine(),\n        onTabChange: this.onTabChangeRulesEngine,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 941,\n          columnNumber: 65\n        }\n      }))) : \"\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 823,\n        columnNumber: 21\n      }\n    }), this.props.Login.openPortalModal && /*#__PURE__*/React.createElement(PortalModalSlideout, {\n      show: this.props.Login.openPortalModal,\n      closeModal: this.closePortalModal,\n      screenName: this.props.intl.formatMessage({\n        id: this.props.Login.screenName\n      }) + \" - \" + this.props.Login.masterData.SelectedTest.stestsynonym,\n      handleSaveClick: this.save,\n      addComponent: (this.props.Login.operation === 'update' ? this.state.selectedRecord['groupList'] : true) && /*#__PURE__*/React.createElement(AddTestGroupRule, {\n        productCategoryList: this.state.ProductCategoryList || [],\n        selectedRecord: this.state.selectedRecord || {},\n        databaseTableList: this.props.Login.databaseTableList,\n        tableColumnList: this.state.tableColumnList,\n        specificationOptions: this.state.TestGroupSpecificationList || [],\n        componentOptions: this.state.ComponentList || [],\n        foreignTableList: this.state.foreignTableList || [],\n        foreignTableColumnList: this.props.Login.foreignTableColumnList || [],\n        count: this.state.count,\n        foreignTableCount: this.state.foreignTableCount,\n        sqlQuery: this.state.sqlQuery,\n        userInfo: this.props.Login.userInfo,\n        onInputChange: this.onInputChange,\n        deleteRule: this.deleteRule,\n        clearRule: this.clearRule,\n        resetRule: this.resetRule,\n        onSymbolChange: this.onSymbolChange,\n        onRuleChange: this.onRuleChange,\n        addRule: this.addRule,\n        addTest: this.addTest,\n        onConditionClick: this.onConditionClick,\n        onMasterDataChange: this.onMasterDataChange,\n        databaseviewList: this.props.Login.databaseviewList,\n        addRuleList: this.props.Login.addRuleList || [],\n        rulesOption: this.props.Login.masterData.rulesOption && this.props.Login.masterData.rulesOption.filter(this.outComeTestsRemoveFromRules),\n        masterdata: this.props.Login.masterdata,\n        switchRecord: this.state.switchRecord,\n        data: this.state.data,\n        dataResult: this.state.dataResult || [],\n        dataState: this.state.dataState,\n        dataStateChange: this.dataStateChange,\n        userRoleControlRights: this.state.userRoleControlRights,\n        gridColumnList: this.props.Login.gridColumnList || [],\n        queryType: this.state.queryType,\n        addAggregateList: this.props.Login.addAggregateList || [],\n        addOrderbyList: this.props.Login.addOrderbyList || [],\n        addGroup: this.addGroup,\n        addGroupList: this.props.Login.addGroupList || [],\n        onFilterComboChange: this.onFilterComboChange,\n        selectFields: this.props.Login.selectFields || [],\n        SelectedProductCategory: this.props.Login.masterData.SelectedProductCategory,\n        DiagnosticCaseList: this.props.Login.masterData.DiagnosticCaseList,\n        GradeList: this.props.Login.masterData.GradeList,\n        PredefinedParameterOptions: this.props.Login.masterData.PredefinedParameterOptions,\n        siteList: this.props.Login.masterData.siteList,\n        resultTypeList: this.props.Login.masterData.resultTypeList,\n        isResultorOrderType: this.state.isResultorOrderType,\n        optionsByRule: this.state.optionsByRule || this.props.Login.masterData.DiagnosticCaseList,\n        changePropertyView: this.changePropertyView,\n        splitChangeWidthPercentage: this.state.splitChangeWidthPercentage,\n        activeTabIndex: this.props.Login.activeTabIndex,\n        enablePropertyPopup: this.state.enablePropertyPopup,\n        propertyPopupWidth: this.state.propertyPopupWidth,\n        controlMap: this.state.controlMap,\n        sectionDataState: this.state.sectionDataState,\n        masterData: this.props.Login.masterData,\n        intl: this.props.intl,\n        addOutcomeList: this.props.Login.addOutcomeList && this.props.Login.addOutcomeList || [],\n        deleteOutcome: this.deleteOutcome,\n        onmodalComboChange: this.onmodalComboChange,\n        openModalPopup: this.props.Login.openModalPopup,\n        closeModalShow: this.closeModalShow,\n        modalsaveClick: this.modalsaveClick,\n        getOutcomeDetails: this.getOutcomeDetails,\n        addModalSite: this.addModalSite,\n        action: this.props.Login.action,\n        deletModalSite: this.deletModalSite,\n        deleteModalTest: this.deleteModalTest,\n        activeTestTab: this.props.Login.activeTestTab,\n        testcomments: this.props.Login.testcomments,\n        reportcomments: this.props.Login.reportcomments,\n        addComments: this.addComments,\n        CommentType: this.props.Login.CommentType,\n        CommentSubType: this.props.Login.CommentSubType,\n        isneedsgeneralcomments: this.state.isneedsgeneralcomments,\n        predefcomments: this.props.Login.predefcomments,\n        needoutsource: this.state.selectedRecord['needoutsource'] && this.state.selectedRecord['needoutsource'] === 3 ? true : false,\n        openmodalsavePopup: this.props.Login.openmodalsavePopup,\n        save: this.save,\n        dataStateObject: this.state.dataStateObject,\n        paneSizeChange: this.paneSizeChange,\n        testInitiateTestCombo: this.props.Login.testInitiateTestCombo && this.viewColumnListByRule(this.props.Login.testInitiateTestCombo),\n        testCommentsTestCombo: this.props.Login.testCommentsTestCombo && this.viewColumnListByRule(this.props.Login.testCommentsTestCombo),\n        testRepeatTestCombo: this.props.Login.testRepeatTestCombo && this.viewColumnListByRule(this.props.Login.testRepeatTestCombo),\n        testenforceTestCombo: this.props.Login.testenforceTestCombo && this.viewColumnListByRule(this.props.Login.testenforceTestCombo),\n        dataStateChangetestRepeat: this.dataStateChangetestRepeat,\n        dataStateChangetestEnforce: this.dataStateChangetestEnforce,\n        dataStatetestEnforce: this.state.dataStatetestEnforce,\n        dataStatetestRepeat: this.state.dataStatetestRepeat,\n        testGroupTestParameterRulesEngine: this.props.Login.masterData.testGroupTestParameterRulesEngine,\n        onRuleInputChange: this.onRuleInputChange,\n        onRuleNumericInputOnChange: this.onRuleNumericInputOnChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 956,\n          columnNumber: 29\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 949,\n        columnNumber: 21\n      }\n    }));\n  }\n\n  findMandatoryFields(screenName, selectedRecord) {\n    let mandyFields = [];\n\n    if (screenName === \"IDS_SPECFILE\") {\n      if (selectedRecord && selectedRecord.nattachmenttypecode === attachmentType.LINK) {\n        mandyFields = [{\n          \"idsName\": \"IDS_FILENAME\",\n          \"dataField\": \"slinkfilename\",\n          \"mandatory\": true,\n          \"mandatoryLabel\": \"IDS_CHOOSE\",\n          \"controlType\": \"file\"\n        }, {\n          \"idsName\": \"IDS_LINKNAME\",\n          \"dataField\": \"nlinkcode\",\n          \"mandatory\": true,\n          \"mandatoryLabel\": \"IDS_SELECT\",\n          \"controlType\": \"selectbox\"\n        }];\n      } else {\n        //if (this.props.Login.operation === 'update') {\n        mandyFields = [{\n          \"idsName\": \"IDS_FILE\",\n          \"dataField\": \"sfilename\",\n          \"mandatory\": true,\n          \"mandatoryLabel\": \"IDS_CHOOSE\",\n          \"controlType\": \"file\"\n        }]; // }\n      }\n    } else {\n      return [];\n    }\n\n    let finalMandyFields = [];\n    mandyFields.forEach(item => item.mandatory === true && finalMandyFields.push(item));\n    return finalMandyFields;\n  }\n\n  showSpecAndTestInfo() {\n    this.setState({\n      showTest: !this.state.showTest,\n      testView: false\n    });\n    this.updateSpiltterLayout();\n  }\n\n  showSpecAndTestInfo1() {\n    this.setState({\n      showTest: !this.state.showTest,\n      testView: true\n    }); //this.updateSpiltterLayout()\n  }\n\n  //Rules Engine Functions Start\n  ruleflowobject() {\n    let object = {};\n    const labelColor = ['#e63109', '#2fb47d', '#eaa203', '#6554c0'];\n    const labelBGColor = ['#fcd7cd', '#e5f8f1', '#fcf3dd', '#e7e6f5'];\n    const borderColor = ['#e6310', '#c6f6e4', '#fde2a4', '#cbc5f7'];\n    let groupList = this.props.Login.masterData.SelectedRulesEngine['jsondata'];\n    let groupListJoins = this.props.Login.masterData.SelectedRulesEngine['jsonuidata'] && this.props.Login.masterData.SelectedRulesEngine['jsonuidata']['groupListJoins'];\n    let children = [];\n    let parent = [];\n    let grandparent = [];\n    groupList.map((groupobject, index) => {\n      if (groupobject.hasOwnProperty('button_or')) {\n        children = [];\n        let rulesList = groupobject['button_or'];\n        rulesList.map((rule, index) => {\n          children.push({\n            id: index,\n            label: /*#__PURE__*/React.createElement(React.Fragment, null, rule['stestname'].label + \" -> \" + rule['orderresulttype'].label + \" -> \" + rule['ssymbolname'].label + \" -> \" + (rule['ndiagnosticcasecode'] && rule['ndiagnosticcasecode'].label || rule['ngradecode'] && rule['ngradecode'].label || rule['ntestgrouptestnumericcode'] && rule['ntestgrouptestnumericcode'] || rule['ntestgrouptestcharcode'] && rule['ntestgrouptestcharcode'] || rule['ntestgrouptestpredefcode'] && rule['ntestgrouptestpredefcode'].label))\n          });\n        });\n        parent.push({\n          id: index,\n          label: /*#__PURE__*/React.createElement(\"div\", {\n            className: \"btn btn-primary\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 1461,\n              columnNumber: 49\n            }\n          }, this.props.intl.formatMessage({\n            id: \"IDS_OR\"\n          })),\n          children: children\n        });\n      }\n\n      if (groupobject.hasOwnProperty('button_and')) {\n        children = [];\n        let rulesList = groupobject['button_and'];\n        rulesList.map((rule, index) => {\n          children.push({\n            id: index,\n            label: /*#__PURE__*/React.createElement(React.Fragment, null, rule['stestname'].label + \" -> \" + rule['orderresulttype'].label + \" -> \" + rule['ssymbolname'].label + \" -> \" + (rule['ndiagnosticcasecode'] && rule['ndiagnosticcasecode'].label || rule['ngradecode'] && rule['ngradecode'].label || rule['ntestgrouptestnumericcode'] && rule['ntestgrouptestnumericcode'] || rule['ntestgrouptestcharcode'] && rule['ntestgrouptestcharcode'] || rule['ntestgrouptestpredefcode'] && rule['ntestgrouptestpredefcode'].label))\n          });\n        });\n        parent.push({\n          id: index,\n          label: /*#__PURE__*/React.createElement(\"div\", {\n            className: \"btn btn-primary\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 1483,\n              columnNumber: 49\n            }\n          }, this.props.intl.formatMessage({\n            id: \"IDS_AND\"\n          })),\n          children: children\n        });\n      }\n\n      if (groupobject.hasOwnProperty('button_not_button_and')) {\n        children = [];\n        let rulesList = groupobject['button_not_button_and'];\n        rulesList.map((rule, index) => {\n          children.push({\n            id: index,\n            label: /*#__PURE__*/React.createElement(React.Fragment, null, rule['stestname'].label + \" -> \" + rule['orderresulttype'].label + \" -> \" + rule['ssymbolname'].label + \" -> \" + (rule['ndiagnosticcasecode'] && rule['ndiagnosticcasecode'].label || rule['ngradecode'] && rule['ngradecode'].label || rule['ntestgrouptestnumericcode'] && rule['ntestgrouptestnumericcode'] || rule['ntestgrouptestcharcode'] && rule['ntestgrouptestcharcode'] || rule['ntestgrouptestpredefcode'] && rule['ntestgrouptestpredefcode'].label))\n          });\n        });\n        let notarray = [{\n          id: index,\n          label: /*#__PURE__*/React.createElement(\"div\", {\n            className: \"btn btn-primary\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 1502,\n              columnNumber: 53\n            }\n          }, this.props.intl.formatMessage({\n            id: \"IDS_AND\"\n          })),\n          children: children\n        }];\n        parent.push({\n          id: index,\n          label: /*#__PURE__*/React.createElement(\"div\", {\n            className: \"btn btn-primary\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 1503,\n              columnNumber: 49\n            }\n          }, this.props.intl.formatMessage({\n            id: \"IDS_NOT\"\n          })),\n          children: notarray\n        });\n      }\n\n      if (groupobject.hasOwnProperty('button_not_button_or')) {\n        children = [];\n        let rulesList = groupobject['button_not_button_or'];\n        rulesList.map((rule, index) => {\n          children.push({\n            id: index,\n            label: /*#__PURE__*/React.createElement(React.Fragment, null, rule['stestname'].label + \" -> \" + rule['orderresulttype'].label + \" -> \" + rule['ssymbolname'].label + \" -> \" + (rule['ndiagnosticcasecode'] && rule['ndiagnosticcasecode'].label || rule['ngradecode'] && rule['ngradecode'].label || rule['ntestgrouptestnumericcode'] && rule['ntestgrouptestnumericcode'] || rule['ntestgrouptestcharcode'] && rule['ntestgrouptestcharcode'] || rule['ntestgrouptestpredefcode'] && rule['ntestgrouptestpredefcode'].label))\n          });\n        });\n        let notarray = [{\n          id: index,\n          label: /*#__PURE__*/React.createElement(\"div\", {\n            className: \"btn btn-primary\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 1522,\n              columnNumber: 53\n            }\n          }, this.props.intl.formatMessage({\n            id: \"IDS_OR\"\n          })),\n          children: children\n        }];\n        parent.push({\n          id: index,\n          label: /*#__PURE__*/React.createElement(\"div\", {\n            className: \"btn btn-primary\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 1523,\n              columnNumber: 49\n            }\n          }, this.props.intl.formatMessage({\n            id: \"IDS_NOT\"\n          })),\n          children: notarray\n        });\n      }\n    });\n\n    if (groupListJoins !== undefined) {\n      groupListJoins.map((join, index) => {\n        let parentjoins = [];\n\n        if (join.hasOwnProperty('button_or') && join['button_or'] === true) {\n          let notarray = [];\n          parentjoins.push(parent[index]);\n          parentjoins.push(parent[index + 1]);\n\n          if (join.hasOwnProperty('button_not') && join['button_not'] === true) {\n            notarray = [{\n              id: index,\n              label: /*#__PURE__*/React.createElement(\"div\", {\n                className: \"btn btn-primary\",\n                __self: this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 1536,\n                  columnNumber: 47\n                }\n              }, this.props.intl.formatMessage({\n                id: \"IDS_OR\"\n              }), \" \") // 'button_or'\n              ,\n              children: parentjoins\n            }];\n            grandparent.push({\n              id: index,\n              label: /*#__PURE__*/React.createElement(\"div\", {\n                className: \"btn btn-primary\",\n                __self: this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 1541,\n                  columnNumber: 47\n                }\n              }, this.props.intl.formatMessage({\n                id: \"IDS_NOT\"\n              }), \" \") // 'button_or'\n              ,\n              children: notarray\n            });\n          } else {\n            grandparent.push({\n              id: index,\n              label: /*#__PURE__*/React.createElement(\"div\", {\n                className: \"btn btn-primary\",\n                __self: this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 1548,\n                  columnNumber: 47\n                }\n              }, this.props.intl.formatMessage({\n                id: \"IDS_OR\"\n              }), \" \") // 'button_or'\n              ,\n              children: parentjoins\n            });\n          }\n        }\n\n        if (join.hasOwnProperty('button_and') && join['button_and'] === true) {\n          let notarray = [];\n          parentjoins.push(parent[index]);\n          parentjoins.push(parent[index + 1]);\n\n          if (join.hasOwnProperty('button_not') && join['button_not'] === true) {\n            notarray = [{\n              id: index,\n              label: /*#__PURE__*/React.createElement(\"div\", {\n                className: \"btn btn-primary\",\n                __self: this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 1560,\n                  columnNumber: 47\n                }\n              }, this.props.intl.formatMessage({\n                id: \"IDS_AND\"\n              }), \" \") // 'button_or'\n              ,\n              children: parentjoins\n            }];\n            grandparent.push({\n              id: index,\n              label: /*#__PURE__*/React.createElement(\"div\", {\n                className: \"btn btn-primary\",\n                __self: this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 1565,\n                  columnNumber: 47\n                }\n              }, this.props.intl.formatMessage({\n                id: \"IDS_NOT\"\n              }), \" \") // 'button_or'\n              ,\n              children: notarray\n            });\n          } else {\n            grandparent.push({\n              id: index,\n              label: /*#__PURE__*/React.createElement(\"div\", {\n                className: \"btn btn-primary\",\n                __self: this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 1572,\n                  columnNumber: 47\n                }\n              }, this.props.intl.formatMessage({\n                id: \"IDS_AND\"\n              })) // 'button_and'\n              ,\n              children: parentjoins\n            });\n          }\n        }\n      });\n    }\n\n    object = grandparent.length > 0 ? {\n      id: 0,\n      label: /*#__PURE__*/React.createElement(\"div\", {\n        className: \"btn btn-primary\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1583,\n          columnNumber: 24\n        }\n      }, this.props.Login.masterData.SelectedRulesEngine.srulename, \" \"),\n      children: grandparent\n    } : {\n      id: 0,\n      label: /*#__PURE__*/React.createElement(\"div\", {\n        className: \"btn btn-primary\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1588,\n          columnNumber: 24\n        }\n      }, this.props.Login.masterData.SelectedRulesEngine.srulename, \" \"),\n      children: parent\n    };\n    return object;\n  }\n\n  handleClickDelete(masterData, ncontrolcode //, modalName\n  ) {\n    const fieldArray = [];\n    const inputParam = {\n      methodUrl: \"TestGroupRulesEngine\",\n      classUrl: \"testgrouprulesengine\",\n      inputData: {\n        \"ntestgrouptestcode\": this.props.Login.masterData.SelectedTest.ntestgrouptestcode,\n        \"ntestgrouprulesenginecode\": this.props.Login.masterData.SelectedRulesEngine.ntestgrouprulesenginecode,\n        \"userinfo\": this.props.Login.userInfo\n      },\n      operation: \"delete\",\n      //postParam,\n      displayName: \"RulesEngine\"\n    };\n\n    if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, ncontrolcode)) {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          loadEsign: true,\n          screenData: {\n            inputParam,\n            masterData\n          },\n          // [modalName]: true,\n          operation: 'delete',\n          screenName: \"IDS_RULESENGINE\",\n          id: \"RulesEngine\"\n        }\n      };\n      this.props.updateStore(updateInfo);\n    } else {\n      this.props.crudMaster(inputParam, masterData, undefined);\n    }\n  }\n\n  approveVersion(masterData, nflag, ncontrolcode //, modalName\n  ) {\n    if (masterData['RulesEngine'] && masterData['RulesEngine'].length > 0) {\n      const fieldArray = [];\n      const inputParam = {\n        methodUrl: \"TestGroupRulesEngine\",\n        classUrl: \"testgrouprulesengine\",\n        inputData: {\n          \"ntestgrouptestcode\": this.props.Login.masterData.SelectedTest.ntestgrouptestcode,\n          \"ntestgrouprulesenginecode\": this.props.Login.masterData.SelectedRulesEngine.ntestgrouprulesenginecode,\n          \"userinfo\": this.props.Login.userInfo,\n          nflag: nflag\n        },\n        operation: \"approve\",\n        //postParam,\n        displayName: \"RulesEngine\"\n      };\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, ncontrolcode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData\n            },\n            // [modalName]: true,\n            operation: 'delete',\n            screenName: \"IDS_RULESENGINE\",\n            id: \"RulesEngine\"\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, masterData, undefined);\n      }\n    } else {\n      if (nflag == 1) {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTRULETOAPPROVE\"\n        }));\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTRULETORETIRE\"\n        }));\n      }\n    }\n  }\n\n  clearSelectedRule(selectedRecord, index) {\n    selectedRecord[\"sinputname_\" + index] && delete selectedRecord[\"sinputname_\" + index];\n    selectedRecord[\"ssymbolname_\" + index] && delete selectedRecord[\"ssymbolname_\" + index];\n    selectedRecord[\"snumericinput_\" + index] && delete selectedRecord[\"snumericinput_\" + index];\n    selectedRecord[\"columnname_\" + index] && delete selectedRecord[\"columnname_\" + index];\n    selectedRecord[\"snumericinputtwo_\" + index] && delete selectedRecord[\"snumericinputtwo_\" + index];\n    selectedRecord[\"dateinput_\" + index] && delete selectedRecord[\"dateinput_\" + index];\n    selectedRecord[\"dateinputtwo_\" + index] && delete selectedRecord[\"dateinputtwo_\" + index];\n  }\n\n  generateBreadCrumData(filterData) {\n    if (filterData && Object.values(filterData).length > 0 && filterData.nsampletypecode && filterData.nsampletypecode.item) {\n      if (filterData.nsampletypecode && filterData.nproductcatcode && filterData.nproductcatcode.item.ncategorybasedflow === transactionStatus.YES) {\n        this.breadCrumbData = [{\n          \"label\": \"IDS_SAMPLETYPE\",\n          \"value\": filterData.nsampletypecode ? filterData.nsampletypecode.label : \"\"\n        }, {\n          \"label\": filterData.nsampletypecode.item.nformcode === formCode.PRODUCTCATEGORY ? \"IDS_PRODUCTCATEGORY\" : filterData.nsampletypecode.item.nformcode === formCode.INSTRUMENTCATEGORY ? \"IDS_INSTRUMENTCATEGORY\" : filterData.nsampletypecode.item.nformcode === formCode.MATERIALCATEGORY ? \"IDS_MATERIALCATEGORY\" : \"\",\n          \"value\": filterData.nproductcatcode ? filterData.nproductcatcode.label : \"\"\n        }, {\n          \"label\": \"IDS_TREETEMPLATEVERSION\",\n          \"value\": filterData.ntreeversiontempcode ? filterData.ntreeversiontempcode.label : \"\"\n        }];\n\n        if (filterData.nsampletypecode.value === SampleType.PROJECTSAMPLETYPE) {\n          if (filterData.nsampletypecode.item.nprojectspecrequired === transactionStatus.YES) {\n            this.breadCrumbData.push({\n              \"label\": \"IDS_PROJECTTYPE\",\n              \"value\": filterData.nprojecttypecode ? filterData.nprojecttypecode.label : \"\"\n            }, {\n              \"label\": \"IDS_PROJECT\",\n              \"value\": filterData.nprojectmastercode ? filterData.nprojectmastercode.label : \"\"\n            });\n          }\n        }\n      } else {\n        this.breadCrumbData = [{\n          \"label\": \"IDS_SAMPLETYPE\",\n          \"value\": filterData.nsampletypecode ? filterData.nsampletypecode.label : \"\"\n        }, {\n          \"label\": filterData.nsampletypecode.item.nformcode === formCode.PRODUCTCATEGORY ? \"IDS_PRODUCTCATEGORY\" : filterData.nsampletypecode.item.nformcode === formCode.INSTRUMENTCATEGORY ? \"IDS_INSTRUMENTCATEGORY\" : filterData.nsampletypecode.item.nformcode === formCode.MATERIALCATEGORY ? \"IDS_MATERIALCATEGORY\" : \"\",\n          \"value\": filterData.nproductcatcode ? filterData.nproductcatcode.label : \"\"\n        }, {\n          \"label\": filterData.nsampletypecode.item.nformcode === formCode.PRODUCTCATEGORY ? \"IDS_PRODUCT\" : filterData.nsampletypecode.item.nformcode === formCode.INSTRUMENTCATEGORY ? \"IDS_INSTRUMENT\" : filterData.nsampletypecode.item.nformcode === formCode.MATERIALCATEGORY ? \"IDS_MATERIAL\" : \"\",\n          \"value\": filterData.nproductcode ? filterData.nproductcode.label : \"\"\n        }, {\n          \"label\": \"IDS_TREETEMPLATEVERSION\",\n          \"value\": filterData.ntreeversiontempcode ? filterData.ntreeversiontempcode.label : \"\"\n        }];\n\n        if (filterData.nsampletypecode.value === SampleType.PROJECTSAMPLETYPE) {\n          if (filterData.nsampletypecode.item.nprojectspecrequired === transactionStatus.YES) {\n            this.breadCrumbData.push({\n              \"label\": \"IDS_PROJECTTYPE\",\n              \"value\": filterData.nprojecttypecode ? filterData.nprojecttypecode.label : \"\"\n            }, {\n              \"label\": \"IDS_PROJECT\",\n              \"value\": filterData.nprojectmastercode ? filterData.nprojectmastercode.label : \"\"\n            });\n          }\n        }\n      }\n    }\n  }\n\n  updateSpiltterLayout() {\n    if (this.myRef && this.myRef.current && this.myRef.current.clientHeight + 20 !== this.state.fixefScrollHeight) {\n      this.setState({\n        fixefScrollHeight: this.myRef.current.clientHeight + 20,\n        disableSplit: true\n      });\n      console.log(this.myRef.current.clientHeight);\n      setTimeout(() => {\n        this.setState({\n          disableSplit: false\n        });\n      });\n    }\n  }\n\n  componentDidUpdate(previousProps, previousState) {\n    let selectedRecord = this.state.selectedRecord;\n    let filterData = this.state.filterData || {};\n    let isStateChanged = false;\n    let activeTabIndex = this.props.Login.activeTabIndex || 0;\n    let activeTabId = this.props.Login.activeTabId || false;\n    this.updateSpiltterLayout();\n    let tempFilterData = this.state.tempFilterData || {};\n\n    if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\n      selectedRecord = this.props.Login.selectedRecord;\n      isStateChanged = true;\n    }\n\n    if (this.props.Login.activeTabIndex !== previousProps.Login.activeTabIndex || this.props.Login.masterData !== previousProps.Login.masterData) {\n      if (this.props.Login.activeTabIndex !== previousProps.Login.activeTabIndex) {\n        activeTabIndex = this.props.Login.activeTabIndex;\n        activeTabId = this.props.Login.activeTabId;\n        isStateChanged = true; // this.setState({\n        //     activeTabIndex,\n        //     activeTabId\n        // });\n      }\n    }\n\n    if (this.props.Login.tempFilterData !== previousProps.Login.tempFilterData) {\n      tempFilterData = this.props.Login.tempFilterData || {};\n      isStateChanged = true;\n    }\n\n    let sampleType = this.state.sampleType || [];\n\n    if (this.props.Login.masterData.SampleType !== previousProps.Login.masterData.SampleType) {\n      const sampleTypeMap = constructOptionList(this.props.Login.masterData.SampleType || [], \"nsampletypecode\", \"ssampletypename\", \"nsorter\", \"ascending\", false);\n      sampleType = sampleTypeMap.get(\"OptionList\");\n      tempFilterData[\"nsampletypecode\"] = sampleType.length ? sampleType[0] : \"\";\n      isStateChanged = true;\n    }\n\n    let productCategory = this.state.productCategory || [];\n\n    if (this.props.Login.masterData.ProductCategory !== previousProps.Login.masterData.ProductCategory) {\n      const productCatMap = constructOptionList(this.props.Login.masterData.ProductCategory || [], \"nproductcatcode\", \"sproductcatname\", \"nproductcatcode\", \"ascending\", false);\n      productCategory = productCatMap.get(\"OptionList\");\n      tempFilterData[\"nproductcatcode\"] = productCategory.length > 0 ? productCategory[0] : \"\";\n      isStateChanged = true;\n    }\n\n    let product = this.state.product || [];\n\n    if (this.props.Login.masterData.Product !== previousProps.Login.masterData.Product) {\n      const productMap = constructOptionList(this.props.Login.masterData.Product || [], \"nproductcode\", \"sproductname\", \"nproductcode\", \"ascending\", false);\n      product = productMap.get(\"OptionList\");\n      tempFilterData[\"nproductcode\"] = product.length > 0 ? product[0] : undefined;\n      isStateChanged = true;\n    }\n\n    let projectType = this.state.projectType || [];\n\n    if (this.props.Login.masterData.ProjectTypeList !== previousProps.Login.masterData.ProjectTypeList) {\n      const projectTypeMap = constructOptionList(this.props.Login.masterData.ProjectTypeList || [], \"nprojecttypecode\", \"sprojecttypename\", \"nprojecttypecode\", \"ascending\", false);\n      projectType = projectTypeMap.get(\"OptionList\");\n      tempFilterData[\"nprojecttypecode\"] = projectType.length > 0 ? projectType[0] : undefined;\n      isStateChanged = true;\n    }\n\n    let project = this.state.project || [];\n\n    if (this.props.Login.masterData.ProjectMasterList !== previousProps.Login.masterData.ProjectMasterList) {\n      const projectMasterMap = constructOptionList(this.props.Login.masterData.ProjectMasterList || [], \"nprojectmastercode\", \"sprojectcode\", \"nprojectmastercode\", \"ascending\", false);\n      project = projectMasterMap.get(\"OptionList\");\n      tempFilterData[\"nprojectmastercode\"] = project.length > 0 ? project[0] : undefined;\n      isStateChanged = true;\n    }\n\n    let treeVersionTemplate = this.state.treeVersionTemplate || [];\n\n    if (this.props.Login.masterData.TreeVersionTemplate !== previousProps.Login.masterData.TreeVersionTemplate) {\n      const templateMap = constructOptionList(this.props.Login.masterData.TreeVersionTemplate || [], \"ntreeversiontempcode\", \"sversiondescription\", \"ntreeversiontempcode\", \"ascending\", false);\n      treeVersionTemplate = templateMap.get(\"OptionList\");\n      tempFilterData[\"ntreeversiontempcode\"] = treeVersionTemplate.length > 0 ? treeVersionTemplate[treeVersionTemplate.length - 1] : \"\";\n      isStateChanged = true;\n    } // if (this.props.Login.masterData.TestGroupTestParameter && this.props.Login.masterData.TestGroupTestParameter !== previousProps.Login.masterData.TestGroupTestParameter) {\n    //     sortData(this.props.Login.masterData.TestGroupTestParameter, \"ascending\", \"nsorter\");\n    // }\n    // if (this.props.Login.masterData.TestGroupTesT && this.props.Login.masterData.TestGroupTesT !== previousProps.Login.masterData.TestGroupTesT) {\n    //     sortData(this.props.Login.masterData.TestGroupTesTest, \"ascending\", \"nsorter\");\n    // }\n\n\n    let userRoleControlRights = this.state.userRoleControlRights || [];\n    let controlMap = this.state.controlMap || [];\n\n    if (this.props.Login.userInfo && this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\n      const nformCode = this.props.Login.userInfo.nformcode;\n\n      if (this.props.Login.userRoleControlRights) {\n        this.props.Login.userRoleControlRights[nformCode] && Object.values(this.props.Login.userRoleControlRights[nformCode]).map(item => userRoleControlRights.push(item.ncontrolcode));\n      }\n\n      controlMap = getControlMap(this.props.Login.userRoleControlRights, nformCode);\n      filterData = { ...tempFilterData\n      };\n      this.generateBreadCrumData(filterData);\n    }\n\n    if (this.props.Login.filterData !== previousProps.Login.filterData) {\n      filterData = { ...this.props.Login.filterData\n      };\n      this.generateBreadCrumData(filterData);\n      isStateChanged = true;\n    } // else if (filterData !== previousState.filterData) {\n    //     filterData = { ...tempFilterData };\n    //     this.generateBreadCrumData(filterData);\n    // }\n\n\n    let historyDataState = this.state.historyDataState;\n\n    if (this.props.Login.historyDataState && this.props.Login.historyDataState !== previousProps.Login.historyDataState) {\n      historyDataState = this.props.Login.historyDataState;\n      isStateChanged = true;\n    }\n\n    let {\n      testskip,\n      testtake\n    } = this.state;\n\n    if (this.props.Login.masterData !== previousProps.Login.masterData) {\n      testskip = this.props.Login.testskip === undefined ? testskip : this.props.Login.testskip;\n      testtake = testtake ? testtake : this.props.Login.testtake;\n      isStateChanged = true;\n    }\n\n    let {\n      skipRulesEngine,\n      takeRulesEngine\n    } = this.state;\n\n    if (this.props.Login.masterData !== previousProps.Login.masterData) {\n      skipRulesEngine = this.props.Login.skipRulesEngine === undefined ? skipRulesEngine : this.props.Login.skipRulesEngine;\n      takeRulesEngine = takeRulesEngine ? takeRulesEngine : this.props.Login.takeRulesEngine;\n      isStateChanged = true;\n    }\n\n    if (isStateChanged) {\n      this.setState({\n        selectedRecord,\n        tempFilterData,\n        filterData,\n        userRoleControlRights,\n        controlMap,\n        sampleType,\n        productCategory,\n        product,\n        treeVersionTemplate,\n        historyDataState,\n        testskip,\n        testtake,\n        projectType,\n        project,\n        activeTabIndex,\n        activeTabId,\n        skipRulesEngine,\n        takeRulesEngine\n      });\n    }\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    Login: state.Login\n  };\n};\n\nexport default connect(mapStateToProps, {\n  callService,\n  crudMaster,\n  filterTestGroup,\n  createTree,\n  editTree,\n  sampleTypeOnChange,\n  getTestGroupDetails,\n  validateEsignCredential,\n  updateStore,\n  addSpecification,\n  getSpecification,\n  addComponent,\n  changeTestCategory,\n  addTestGroupTest,\n  editTestGroupTest,\n  getTestGroupParameter,\n  editTestGroupParameter,\n  addTestFile,\n  editSpecFile,\n  getSpecificationDetails,\n  addTestGroupCodedResult,\n  getComponentBySpecId,\n  filterColumnData,\n  viewAttachment,\n  viewTestGroupCheckList,\n  getTestGroupComponentDetails,\n  filterTransactionList,\n  reportSpecification,\n  retireSpecification,\n  getDataForTestMaterial,\n  getEditTestGroupRulesEngine,\n  getMaterialCategoryBasedMaterialType,\n  getMaterialBasedMaterialCategory,\n  getTestGroupMaterial,\n  getDataForEditTestMaterial,\n  addTestGroupNumericTab,\n  getTestGroupRulesEngineAdd,\n  getSelectedTestGroupRulesEngine,\n  getParameterRulesEngine,\n  getParameterResultValue\n})(injectIntl(TestGroup));","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/pages/testgroup/TestGroup.jsx"],"names":["React","Component","connect","injectIntl","rsapi","toast","Row","Col","Card","Button","Nav","PerfectScrollbar","FontAwesomeIcon","faPencilAlt","faPlus","faSync","SplitterLayout","faEye","faTrashAlt","process","DataGrid","OrgTree","SlideOutModal","Esign","callService","crudMaster","filterTestGroup","createTree","editTree","getTestGroupDetails","sampleTypeOnChange","validateEsignCredential","updateStore","addSpecification","getSpecification","addComponent","changeTestCategory","addTestGroupTest","editTestGroupTest","getTestGroupParameter","editTestGroupParameter","addTestFile","editSpecFile","getSpecificationDetails","addTestGroupCodedResult","getComponentBySpecId","filterColumnData","viewAttachment","viewTestGroupCheckList","getTestGroupComponentDetails","filterTransactionList","reportSpecification","retireSpecification","getDataForTestMaterial","getMaterialCategoryBasedMaterialType","getMaterialBasedMaterialCategory","getTestGroupMaterial","getDataForEditTestMaterial","addTestGroupNumericTab","getTestGroupRulesEngineAdd","getEditTestGroupRulesEngine","getSelectedTestGroupRulesEngine","getParameterRulesEngine","getParameterResultValue","constructOptionList","formatInputDate","create_UUID","deleteAttachmentDropZone","filterRecordBasedOnTwoArrays","getControlMap","onDropAttachFileList","showEsign","sortData","TestGroupTestTab","AddTestGroupSpecification","DEFAULT_RETURN","transactionStatus","REPORTTYPE","attachmentType","formCode","designProperties","parameterType","SampleType","AddTestGroupTest","AddProfileTree","SampleFilter","AddFile","AdvFilter","SpecificationHistory","TestGroupSpecFile","SpecificationInfo","CustomTab","TransationListMaster","TransationListMasterView","FormTreeMenu","FormInput","ConfirmMessage","BreadcrumbComponent","testMoreFields","testSubFields","searchFieldList","specificationColumnList","componentColumnList","addTestColumnList","editTestColumnList","EditTestGroupTest","ContentPanel","SearchAdd","ListWrapper","ProductList","TransactionListMasterJsonView","PortalModalSlideout","AddTestGroupRule","TestGroup","constructor","props","reloadData","filterData","Login","state","nsampletypecode","undefined","warn","intl","formatMessage","id","nproductcatcode","item","nformcode","PRODUCTCATEGORY","INSTRUMENTCATEGORY","MATERIALCATEGORY","nproductcode","ncategorybasedflow","NO","ntreeversiontempcode","inputParam","inputData","userinfo","userInfo","YES","value","nprojectmastercode","historyDataState","masterData","searchRef","ConfirmDelete","obj","confirmMessage","confirm","deleteRecord","handlePageChange","event","setState","testskip","skip","testtake","take","viewTestFile","viewParam","operation","methodUrl","classUrl","ntestgroupfilecode","selectedTest","testgroupspecification","SelectedSpecification","ntestgrouptestcode","fileViewIcon","master","nlinkcode","NA","linkViewIcon","onFilterSumbit","tempFilterData","PROJECTSAMPLETYPE","nprojectspecrequired","onTreeClick","screenName","keyName","selectedRecord","activeKey","key","focusKey","primaryKey","tabDetail","tabMap","Map","set","controlMap","userRoleControlRights","addFile","defaultRecord","settings","TestGroupSpecificationHistory","historyDataStateChange","dataResult","dataState","specDataStateChange","TestGroupTestClinicalSpec","clinicalspecDataState","ncontrolCode","modalName","nflag","treeVersionTemplateIndex","findIndex","x","selectedNode","templateVersionStatus","ntransactionstatus","RETIRED","napprovalstatus","DRAFT","CORRECTION","onTabChange","tabProps","updateInfo","typeName","data","componentRowClick","testgroupspecsampletype","deleteTest","deleteParam","testgrouptest","postParam","inputListName","selectedObject","primaryKeyField","primaryKeyValue","fetchUrl","fecthInputObject","unchangeList","loadEsign","screenData","openModal","closeModal","onInputOnChange","caseNo","optional","target","type","name","checked","indexKey","Object","keys","values","treeData","npositioncode","nlevelno","sleveldescription","ntemptranstestgroupcode","schildnode","nnextchildcode","ntemplatemanipulationcode","isreadonly","slevelformat","treetemplatemanipulation","onEsignInputOnChange","onTabChangeRulesEngine","activeTabName","tabDetailRulesEngine","jsonuidata","SelectedRulesEngine","handleExpandChange","dataStatetestinitiate","dataStateChangetestinitiateTab","childListMap","dataStateChange","childListMap2","dataStaterepeatTab","dataStateChangeRepeatTab","dataStateChangenforceTab","ntestgrouptestparametercode","dataStateObject","dataStateChangetestRepeat","dataStatetestRepeat","dataStateChangetestEnforce","dataStatetestEnforce","dataStateChangeMain","dataResultMain","queryDataMain","dataStateMain","ConfirmDeleteRule","deleteId","length","handleClickDelete","closeModalShow","openModalPopup","onsavevalidation","grouplist","hasAll","i","rules","j","PREDEFINED","CHARACTER","NUMERIC","every","prop","hasOwnProperty","save","siteObject","testCommentObject","reportCommentObject","PredefinedParameterOptions","testInitiateTests","testCommentsTests","reportCommentsTests","testRepeatTests","testenforceTests","action","groupList","outcomeList","addGroupList","testInitiateSiteTab","testCommentsTestsTab","reportCommentsTestsTab","SelectedTest","ruleEngineLayout","ruleEngineLayoutObject","groupRuleObject","map","List","push","console","log","JSON","stringify","displayName","info","openmodalsavePopup","onOutcomeChange","comboData","index","writtenRules","activeTabIndex","boolean","y","some","selectedTestRemove","outComeTestsRemoveFromRules","addTest","tabName","rulesOption","testInitiateTestCombo","testCommentsTestCombo","testRepeatTestCombo","testenforceTestCombo","filter","selectedTestTempArray","duplicatePresent","onRuleChange","fieldName","groupIndex","clearSelectedRule","nparametertypecode","onRuleInputChange","onRuleNumericInputOnChange","onMasterDataChange","isResultorOrderType","optionsByRule","DiagnosticCaseList","GradeList","addRule","viewColumnListByRule","arrayLength","viewColumnList","databaseviewList","paneSizeChange","d","splitChangeWidthPercentage","addComments","selectedParameterRulesEngine","testparameter","addModalSite","modalsaveClick","needoutsource","testInitiateTestsTemp","testCommentsTestsTemp","reportCommentsTestsTemp","testInitiateSiteTemp","testInitiateTestOptions","testCommentsTestOptions","reportCommentsTestOptions","testInitiateTestdeletedOptions","testCommentsTestdeletedOptions","reportCommentsTestdeletedOptions","npkAtestparametercode","npkBtestparametercode","npkCtestparametercode","npkDtestparametercode","isduplicate","label","npKAsampletestcommentscode","object","ncommentsubtypecode","scommentsubtype","stestsynonym","ncommenttypecode","scommenttype","nsampletestcommentscode","scomments","sdescription","stestparametersynonym","siteseqnumber","npksitecode","sfromsitename","stositename","deletModalSite","inputparam","row","temparray","splice","testRepeat","deleteModalTest","testRepeatTestsTab","testenforceTestsTab","testParameter","testParameterComments","onmodalComboChange","isneedsgeneralcomments","getSpecificationTestGroupRulesEngine","getComponentTestGroupRulesEngine","getOutcomeDetails","testParameterreportComments","childListMap1","childListMap3","keylst","parseInt","viewOutcome","openflowview","handlePageChangeRuleEngine","skipRulesEngine","takeRulesEngine","addGroup","selectFields","addRuleList","addAggregateList","addOrderbyList","closePortalModal","openPortalModal","count","changePropertyView","status","activeTabId","activeTestTab","window","innerWidth","enableAutoClick","testEnforceTests","deleteRule","deleteOutcome","addOutcomeList","clearRule","sviewname","sqlQuery","resetRule","onSymbolChange","oldSelectedRecord","onInputChange","list","dynamicList","onConditionClick","isgroup","changePropertyViewClose","onFilterComboChange","sampletype","productcategory","product","project","TestGroupSpecSampleType","testGroupInputData","testGroupSpecSampleType","SelectedComponent","testcategory","nallottedspeccode","nprojecttypecode","projecttype","handleDateChange","dateName","dateValue","Date","onNumericInputChange","onSaveClick","saveType","formRef","onSaveTree","onSaveSpecification","onSaveComponent","onSaveCopySpecification","onSaveTest","onSaveSpecFile","testArray","ntestcode","test","changeList","isSingleSelect","testgrouptestfile","testGroupFile","ntestfilecode","nattachmenttypecode","ssystemfilename","dcreateddate","nfilesize","sfilename","nstatus","ACTIVE","nsectioncode","nmethodcode","ninstrumentcatcode","ncontainertypecode","ncost","nsorter","nspecsampletypecode","nrepeatcountno","ActiveKey","TreetempTranstestGroup","tempArray","treeTemplateManip","temp","testGroupSpec","napproveconfversioncode","sversion","ncomponentrequired","sspecname","dexpirydate","ntzexpirydate","stzexpirydate","selectedspecification","ncomponentcode","acceptedFiles","isFileEdited","specFileArray","selectedSpecification","specFile","nspecfilecode","formData","FormData","FTP","Array","isArray","forEach","file","tempData","assign","splittedFileName","split","fileExtension","uniquefilename","trim","size","append","slinkfilename","slinkdescription","isFileupload","deleteSpecRecord","componentDataState","deleteMultipleRecord","onDropSpecFile","attachedFiles","maxSize","actionType","deleteAttachment","validateTestGroupComplete","inputValue","post","then","response","inactiveTestArray","indexOf","stestname","completeSpecification","catch","error","message","retireSpec","approvalRoleActionDetail","retireSpecId","specificationReport","sprimarykeyname","ncontrolcode","nregtypecode","nregsubtypecode","nreportmodulecode","nreporttypecode","CONTROLBASED","nreportdecisiontypecode","certificatetypecode","selectedComponent","testGroupTest","TestGroupTest","approveSpecification","needEsign","onComboChange","schecklistversionname","validateEsign","sreason","nreasoncode","spredefinedreason","password","group","field","showTest","fixefScrollHeight","outerHeight","initialVerticalWidth","testView","paneHeight","componentBreadcrumbs","breadCrumbData","createRef","specSubField","VALUE","COLOUR","myRef","getDerivedStateFromProps","masterStatus","errorCode","componentDidMount","parentHeight","height","clientHeight","render","TestGroupSpecification","AgaramTree","OpenNodes","FocusKey","searchedData","TestGroupTestParameter","testGroupTestData","getComponent","addSpecParam","editSpecParam","specDeleteParam","addSpecId","has","get","addTreeId","editTreeId","deleteTreeId","editSpecId","deleteSpecId","addComponentId","deleteComponentId","addTestId","deleteTestId","editTestId","viewFileId","deleteTree","getTest","filterParam","filterParamRulesEngine","specMandatoryFields","compMandatoryFields","editTestMandatoryFields","addTestMandatoryFields","mandatory","splitNode","treeNodeNames","nodeItem","TreeTemplateManipulation","treeItem","scomponentname","specDesign","display","marginTop","float","marginRight","showSpecAndTestInfo1","ApprovalRoleActionDetail","testDesign","showSpecAndTestInfo","setting","title","controlname","objectName","hidden","onClick","needConditionalIcon","conditionalIconFunction","paramDesign","openChildModal","parameterData","testGroupCheckList","openTemplateModal","materialType","materialCategoryList","materialList","masterdata","approveVersion","mainDesign","showModalBg","sampleType","treeVersionTemplate","productCategory","projectType","needActionStrip","e","spec","findMandatoryFields","treeMandatoryFields","timeZoneList","linkMaster","editFiles","slabelname","ruleflowobject","ProductCategoryList","databaseTableList","tableColumnList","TestGroupSpecificationList","ComponentList","foreignTableList","foreignTableColumnList","foreignTableCount","switchRecord","gridColumnList","queryType","SelectedProductCategory","siteList","resultTypeList","enablePropertyPopup","propertyPopupWidth","sectionDataState","testcomments","reportcomments","CommentType","CommentSubType","predefcomments","testGroupTestParameterRulesEngine","mandyFields","LINK","finalMandyFields","updateSpiltterLayout","labelColor","labelBGColor","borderColor","groupListJoins","children","parent","grandparent","groupobject","rulesList","rule","notarray","join","parentjoins","srulename","fieldArray","ntestgrouprulesenginecode","generateBreadCrumData","current","disableSplit","setTimeout","componentDidUpdate","previousProps","previousState","isStateChanged","sampleTypeMap","ProductCategory","productCatMap","Product","productMap","ProjectTypeList","projectTypeMap","ProjectMasterList","projectMasterMap","TreeVersionTemplate","templateMap","nformCode","mapStateToProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { injectIntl } from 'react-intl';\r\nimport rsapi from '../../rsapi';\r\nimport { toast } from 'react-toastify';\r\nimport { Row, Col, Card, Button, Nav } from 'react-bootstrap';\r\nimport PerfectScrollbar from 'react-perfect-scrollbar';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faPencilAlt, faPlus, faSync } from '@fortawesome/free-solid-svg-icons';\r\nimport 'react-perfect-scrollbar/dist/css/styles.css';\r\nimport SplitterLayout from 'react-splitter-layout';\r\nimport { faEye, faTrashAlt } from '@fortawesome/free-regular-svg-icons';\r\n// import { Tooltip } from '@progress/kendo-react-tooltip';\r\nimport { process } from '@progress/kendo-data-query';\r\nimport DataGrid from '../../components/data-grid/data-grid.component';\r\nimport OrgTree from 'react-org-tree';\r\n\r\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\r\nimport Esign from '../audittrail/Esign';\r\nimport {\r\n    callService, crudMaster, filterTestGroup, createTree, editTree, getTestGroupDetails, sampleTypeOnChange,\r\n    validateEsignCredential, updateStore, addSpecification, getSpecification, addComponent, changeTestCategory,\r\n    addTestGroupTest, editTestGroupTest, getTestGroupParameter, editTestGroupParameter, addTestFile,\r\n    editSpecFile, getSpecificationDetails, addTestGroupCodedResult, getComponentBySpecId, filterColumnData,\r\n    viewAttachment, viewTestGroupCheckList, getTestGroupComponentDetails, filterTransactionList, reportSpecification, retireSpecification, getDataForTestMaterial,\r\n    getMaterialCategoryBasedMaterialType, getMaterialBasedMaterialCategory, getTestGroupMaterial, getDataForEditTestMaterial, addTestGroupNumericTab, getTestGroupRulesEngineAdd,\r\n    getEditTestGroupRulesEngine, getSelectedTestGroupRulesEngine, getParameterRulesEngine,getParameterResultValue\r\n} from '../../actions'\r\nimport { constructOptionList, formatInputDate, create_UUID, deleteAttachmentDropZone, filterRecordBasedOnTwoArrays, getControlMap, onDropAttachFileList, showEsign, sortData } from '../../components/CommonScript';\r\nimport TestGroupTestTab from './TestGroupTestTab';\r\nimport AddTestGroupSpecification from './AddTestGroupSpecification';\r\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\r\nimport { transactionStatus, REPORTTYPE, attachmentType, formCode, designProperties, \r\n    parameterType,SampleType } from '../../components/Enumeration';\r\nimport AddTestGroupTest from './AddTestGroupTest';\r\nimport AddProfileTree from './AddProfileTree';\r\nimport SampleFilter from './SampleFilter';\r\nimport AddFile from '../testmanagement/AddFile';\r\nimport AdvFilter from '../../components/AdvFilter';\r\nimport SpecificationHistory from './SpecificationHistory';\r\nimport TestGroupSpecFile from './TestGroupSpecFile';\r\nimport SpecificationInfo from './SpecificationInfo';\r\nimport CustomTab from '../../components/custom-tabs/custom-tabs.component';\r\nimport TransationListMaster from '../../components/TransactionListMaster';\r\nimport TransationListMasterView from '../../components/TransactionListMasterView';\r\nimport FormTreeMenu from '../../components/form-tree-menu/form-tree-menu.component';\r\n// import ConfirmDialog from '../../components/confirm-alert/confirm-alert.component';\r\nimport FormInput from '../../components/form-input/form-input.component';\r\nimport ConfirmMessage from '../../components/confirm-alert/confirm-message.component';\r\nimport BreadcrumbComponent from '../../components/Breadcrumb.Component';\r\n\r\nimport {\r\n    testMoreFields, testSubFields, searchFieldList, specificationColumnList, componentColumnList,\r\n    addTestColumnList, editTestColumnList \r\n} from './TestGroupFields';\r\nimport EditTestGroupTest from './EditTestGroupTest';\r\nimport { ContentPanel, SearchAdd } from '../../components/App.styles';\r\nimport '../../pages/registration/registration.css';\r\nimport { ListWrapper } from '../../components/client-group.styles';\r\nimport { ProductList } from '../product/product.styled';\r\nimport TransactionListMasterJsonView from '../../components/TransactionListMasterJsonView';\r\n// import ReactTooltip from 'react-tooltip';\r\nimport PortalModalSlideout from '../../components/portal-modal/portal-modal-slideout';\r\nimport AddTestGroupRule from './AddTestGroupRule';\r\n\r\n\r\nclass TestGroup extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        const componentDataState = { skip: 0, take: 10 };\r\n        const historyDataState = { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 };\r\n        const clinicalspecDataState = { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5, group: [{ field: 'sgendername' }] };\r\n\r\n        this.state = {\r\n            selectedRecord: {},\r\n            filterData: {},\r\n            error: \"\",\r\n            userRoleControlRights: [],\r\n            controlMap: new Map(),\r\n            componentDataState,\r\n            historyDataState,\r\n            clinicalspecDataState,\r\n            tempFilterData: {},\r\n            showTest: true,\r\n            testskip: 0,\r\n            testtake: this.props.Login.settings ? this.props.Login.settings[12] : 5,\r\n            skipRulesEngine: 0,\r\n            takeRulesEngine: this.props.Login.settings ? this.props.Login.settings[12] : 5,\r\n            fixefScrollHeight: window.outerHeight - 400,\r\n            initialVerticalWidth: \"20vh\",\r\n            testView: true,\r\n            //paneHeight:'calc(100vh - ' +window.outerHeight-847 + 'px)'\r\n            paneHeight: 'calc(100vh -183px)'\r\n        }\r\n        this.componentBreadcrumbs = [];\r\n        this.breadCrumbData = [];\r\n        this.searchRef = React.createRef();\r\n        this.specSubField = [{ [designProperties.VALUE]: \"stransdisplaystatus\" },\r\n        { [designProperties.VALUE]: \"sapprovalstatus\", [designProperties.COLOUR]: true }];\r\n        this.myRef = React.createRef();\r\n\r\n    }\r\n\r\n    static getDerivedStateFromProps(props, state) {\r\n        if (props.Login.masterStatus !== \"\") {\r\n            if (props.Login.errorCode === 417 || props.Login.errorCode === 409) {\r\n                toast.warn(props.Login.masterStatus);\r\n                props.Login.masterStatus = \"\";\r\n            }\r\n        }\r\n        if (props.Login.error !== state.error) {\r\n            toast.error(props.Login.error)\r\n            props.Login.error = \"\";\r\n        }\r\n        return null;\r\n    }\r\n\r\n    reloadData = () => {\r\n\r\n        const filterData = this.props.Login.filterData || this.state.filterData;\r\n        if (filterData.nsampletypecode === undefined) {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SAMPLETYPENOTAVAILABLE\" }));\r\n        }\r\n        else if (filterData.nproductcatcode === \"\") {\r\n            if (filterData.nsampletypecode.item.nformcode === formCode.PRODUCTCATEGORY) {\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_PRODUCTCATEGORYNOTAVAILABLE\" }));\r\n            } else if (filterData.nsampletypecode.item.nformcode === formCode.INSTRUMENTCATEGORY) {\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_INSTRUMENTCATEGORYNOTAVAILABLE\" }));\r\n            } else if (filterData.nsampletypecode.item.nformcode === formCode.MATERIALCATEGORY) {\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_MATERIALCATEGORYNOTAVAILABLE\" }));\r\n            } else {\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_CATEGORYNOTAVAILABLE\" }));\r\n            }\r\n        }\r\n        else if (filterData.nproductcode === \"\" && (filterData.nproductcatcode.item.ncategorybasedflow === transactionStatus.NO)) {\r\n            if (filterData.nsampletypecode.item.nformcode === formCode.PRODUCTCATEGORY) {\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_PRODUCTNOTAVAILABLE\" }));\r\n            } else if (filterData.nsampletypecode.item.nformcode === formCode.INSTRUMENTCATEGORY) {\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_INSTRUMENTNOTAVAILABLE\" }));\r\n            } else if (filterData.nsampletypecode.item.nformcode === formCode.MATERIALCATEGORY) {\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_MATERIALNOTAVAILABLE\" }));\r\n            } else {\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_PRODUCTNOTAVAILABLE\" }));\r\n            }\r\n        } else if (filterData.ntreeversiontempcode === \"\") {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_STUDYPLANTEMPLATEISNOTAVAILABLE\" }));\r\n        }\r\n        else {\r\n            const inputParam = {\r\n                inputData: {\r\n                    userinfo: this.props.Login.userInfo,\r\n                    nsampletypecode: filterData.nsampletypecode.item[\"nsampletypecode\"],\r\n                    nproductcatcode: filterData.nproductcatcode.item[\"nproductcatcode\"],\r\n                 //   nproductcode: filterData.nproductcode.item[\"nproductcode\"],\r\n                    nproductcode:filterData.nproductcatcode.item.ncategorybasedflow === transactionStatus.YES ? -1 : filterData.nproductcode ? filterData.nproductcode.value : -1,\r\n                    ntreeversiontempcode: filterData.ntreeversiontempcode.item[\"ntreeversiontempcode\"],\r\n                    nprojectmastercode: filterData.nprojectmastercode !== undefined ? filterData.nprojectmastercode.item[\"nprojectmastercode\"]:-1,\r\n                    filterData,//: { ...this.props.Login.filterData }\r\n                },\r\n                historyDataState: this.state.historyDataState\r\n\r\n            }\r\n            this.props.filterTestGroup(inputParam, this.props.Login.masterData, this.searchRef);\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (this.parentHeight) {\r\n            const height = this.parentHeight.clientHeight;\r\n            this.setState({\r\n                parentHeight: height - 50\r\n            });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { TestGroupSpecification, SelectedSpecification, SelectedTest, AgaramTree, OpenNodes, selectedNode, FocusKey,\r\n            ActiveKey, SelectedComponent, TestGroupTest, TestGroupSpecSampleType, searchedData,\r\n            TestGroupTestParameter } = this.props.Login.masterData;\r\n        // const deleteTree = {\r\n        //     methodUrl: \"Tree\", operation: \"delete\", inputParam: this.props.Login.inputParam,\r\n        //     userInfo: this.props.Login.userInfo, screenName: \"IDS_TREE\"\r\n        // };\r\n\r\n        const testGroupTestData = searchedData || TestGroupTest || []\r\n\r\n        if (TestGroupTestParameter) {\r\n            sortData(TestGroupTestParameter, \"ascending\", \"nsorter\");\r\n        }\r\n\r\n        if (testGroupTestData) {\r\n            sortData(testGroupTestData, \"descending\", \"nsorter\");\r\n        }\r\n\r\n        const getComponent = {\r\n            screenName: \"IDS_COMPONENT\", operation: \"get\", inputParam: this.props.Login.inputParam,\r\n            userInfo: this.props.Login.userInfo, methodUrl: \"TestGroupComponent\", keyName: \"testgroupspecification\"\r\n        };\r\n        const addSpecParam = { testgroupspecification: SelectedSpecification, selectedRecord: this.state.filterData, userInfo: this.props.Login.userInfo, selectedNode };\r\n        const editSpecParam = { selectedRecord: this.state.filterData, userinfo: this.props.Login.userInfo, selectedNode };\r\n        const specDeleteParam = { operation: \"delete\", methodUrl: \"Specification\", screenName: \"IDS_SPECIFICATION\", keyName: \"testgroupspecification\", filterData: this.state.filterData };\r\n        const addSpecId = this.state.controlMap.has(\"AddSpecification\") && this.state.controlMap.get(\"AddSpecification\").ncontrolcode;\r\n        const addTreeId = this.state.controlMap.has(\"AddTree\") && this.state.controlMap.get(\"AddTree\").ncontrolcode;\r\n        const editTreeId = this.state.controlMap.has(\"EditTree\") && this.state.controlMap.get(\"EditTree\").ncontrolcode;\r\n        const deleteTreeId = this.state.controlMap.has(\"DeleteTree\") && this.state.controlMap.get(\"DeleteTree\").ncontrolcode;\r\n        const editSpecId = this.state.controlMap.has(\"EditSpecification\") && this.state.controlMap.get(\"EditSpecification\").ncontrolcode;\r\n        const deleteSpecId = this.state.controlMap.has(\"DeleteSpecification\") && this.state.controlMap.get(\"DeleteSpecification\").ncontrolcode;\r\n        const addComponentId = this.state.controlMap.has(\"AddComponent\") && this.state.controlMap.get(\"AddComponent\").ncontrolcode;\r\n        const deleteComponentId = this.state.controlMap.has(\"DeleteComponent\") && this.state.controlMap.get(\"DeleteComponent\").ncontrolcode;\r\n        const addTestId = this.state.controlMap.has(\"AddTest\") && this.state.controlMap.get(\"AddTest\").ncontrolcode;\r\n        const deleteTestId = this.state.controlMap.has(\"DeleteTest\") && this.state.controlMap.get(\"DeleteTest\").ncontrolcode;\r\n        const editTestId = this.state.controlMap.has(\"EditTest\") && this.state.controlMap.get(\"EditTest\").ncontrolcode;\r\n        const viewFileId = this.state.controlMap.has(\"ViewTestFile\") && this.state.controlMap.get(\"ViewTestFile\").ncontrolcode;\r\n        const confirmMessage = new ConfirmMessage();\r\n\r\n        const deleteTree = {\r\n            methodUrl: \"Tree\", operation: \"delete\", inputParam: this.props.Login.inputParam,\r\n            userInfo: this.props.Login.userInfo, screenName: \"IDS_TREE\", ncontrolCode: deleteTreeId, filterData: this.state.filterData\r\n        };\r\n\r\n        const getTest = {\r\n            screenName: \"IDS_TEST\", operation: \"get\", masterData: this.props.Login.masterData,\r\n            userInfo: this.props.Login.userInfo, methodUrl: \"TestGroupTest\", keyName: \"ntestgrouptestcode\"\r\n        };\r\n        const filterParam = {\r\n            testskip: 0, testtake: this.props.Login.settings ? this.props.Login.settings[12] : 5,\r\n            inputListName: \"TestGroupTest\", selectedObject: \"SelectedTest\", primaryKeyField: \"ntestgrouptestcode\",\r\n            fetchUrl: \"testgroup/getTestGroupTest\", fecthInputObject: { userinfo: this.props.Login.userInfo }, masterData: this.props.Login.masterData,\r\n            searchFieldList, changeList: [\"TestGroupTestFormula\", \"TestGroupTestNumericParameter\",\r\n                \"TestGroupTestPredefinedParameter\", \"TestGroupTestCharParameter\", \"TestGroupTestParameter\"], isSingleSelect: true\r\n        };\r\n        const filterParamRulesEngine = {\r\n            skipRulesEngine: 0, takeRulesEngine: this.props.Login.settings ? this.props.Login.settings[12] : 5,\r\n            inputListName: \"RulesEngine\", selectedObject: \"SelectedRulesEngine\", primaryKeyField: \"ntestgrouprulesenginecode\",\r\n            fetchUrl: \"testgrouprulesengine/getSelectedTestGroupRulesEngine\", fecthInputObject: { userinfo: this.props.Login.userInfo\r\n                ,ntestgrouptestcode:this.props.Login.masterData.SelectedTest&&this.props.Login.masterData.SelectedTest.ntestgrouptestcode }, masterData: this.props.Login.masterData,\r\n            'searchFieldList':[\"srulename\",\"stransdisplaystatus\" \r\n        ], changeList: [],  isSingleSelect: true\r\n        };\r\n        const specMandatoryFields = [];\r\n        const compMandatoryFields = [];\r\n        const editTestMandatoryFields = [];\r\n        const addTestMandatoryFields = [];\r\n        specificationColumnList.forEach(item => item.mandatory === true ?\r\n            specMandatoryFields.push(item) : \"\"\r\n        );\r\n        componentColumnList.forEach(item => item.mandatory === true ?\r\n            compMandatoryFields.push(item) : \"\"\r\n        );\r\n        editTestColumnList.forEach(item => item.mandatory === true ?\r\n            editTestMandatoryFields.push(item) : \"\"\r\n        );\r\n        addTestColumnList.forEach(item => item.mandatory === true ?\r\n            addTestMandatoryFields.push(item) : \"\"\r\n        );\r\n\r\n        if (this.props.Login.masterData && Object.values(this.props.Login.masterData).length > 0) {\r\n            if (selectedNode && selectedNode.sleveldescription) {\r\n                const splitNode = this.props.Login.masterData.ActiveKey.split('/');\r\n                let treeNodeNames = [];\r\n                splitNode.forEach(nodeItem => {\r\n                    this.props.Login.masterData.TreeTemplateManipulation.forEach(treeItem => {\r\n                        if (treeItem.ntemplatemanipulationcode === parseInt(nodeItem))\r\n                            treeNodeNames.push(treeItem.sleveldescription);\r\n                    })\r\n                })\r\n                this.componentBreadcrumbs = treeNodeNames;\r\n                if (SelectedSpecification && SelectedSpecification !== null && SelectedSpecification.sspecname) {\r\n                    this.componentBreadcrumbs.push(SelectedSpecification.sspecname);\r\n                    if (SelectedComponent && SelectedComponent !== null && SelectedComponent.ncomponentcode !== -1) {\r\n                        // this.componentBreadcrumbs[2] = this.props.intl.formatMessage({ id: \"IDS_COMPONENT\" }) + \": \" + SelectedComponent.scomponentname;\r\n                        this.componentBreadcrumbs.push(SelectedComponent.scomponentname);\r\n                    } else {\r\n                        // delete this.componentBreadcrumbs[2];\r\n                    }\r\n                } else {\r\n                    // delete this.componentBreadcrumbs[1];\r\n                }\r\n            } else {\r\n                this.componentBreadcrumbs = [];\r\n                // delete this.componentBreadcrumbs[0];\r\n            }\r\n        }\r\n\r\n        this.confirmMessage = new ConfirmMessage();\r\n\r\n\r\n\r\n        //New Design\r\n        const specDesign =\r\n            <>\r\n                {this.componentBreadcrumbs && this.componentBreadcrumbs.length > 0 &&\r\n                    <div className=\"component_breadcrumbs\">\r\n                        <ul>\r\n                            {this.componentBreadcrumbs.map((item) => {\r\n                                return <li>{item}</li>\r\n                            })}\r\n                        </ul>\r\n                    </div>\r\n                }\r\n\r\n                <ContentPanel hidden={this.state.showTest}>\r\n                    <div className='card_group'>\r\n                        <Card>\r\n                            <Card.Header>\r\n                                <span style={{ display: \"inline-block\", marginTop: \"1%\" }} >\r\n                                    <h4>{this.props.intl.formatMessage({ id: \"IDS_SPECIFICATIONINFO\" })}</h4>\r\n                                </span>\r\n                                {/* <button className=\"btn btn-primary\" style={{ float: \"right\" }}\r\n                                    onClick={() => this.showSpecAndTestInfo()}>\r\n                                    <FontAwesomeIcon icon={faEye}></FontAwesomeIcon>{\"  \"}\r\n                                    {this.props.intl.formatMessage({ id: \"IDS_TEST\" })}\r\n                                </button> */}\r\n                                <button className=\"btn btn-primary\" style={{ float: \"right\", marginRight: \"1rem\" }}\r\n                                    onClick={() => this.showSpecAndTestInfo1()}>\r\n                                    <FontAwesomeIcon icon={faEye}></FontAwesomeIcon>{\"  \"}\r\n                                    {this.props.intl.formatMessage({ id: \"IDS_TEST\" })}\r\n                                </button>\r\n                            </Card.Header>\r\n                            <Card.Body>\r\n                                <SpecificationInfo\r\n                                    controlMap={this.state.controlMap}\r\n                                    userRoleControlRights={this.state.userRoleControlRights}\r\n                                    selectedSpecification={this.props.Login.masterData.SelectedSpecification}\r\n                                    userInfo={this.props.Login.userInfo}\r\n                                    selectedNode={this.props.Login.masterData.selectedNode}\r\n                                    selectedRecord={this.state.filterData}\r\n                                    approvalRoleActionDetail={this.props.Login.masterData.ApprovalRoleActionDetail}\r\n                                    screenName=\"IDS_SPECIFICATIONINFO\"\r\n                                    deleteRecord={this.deleteRecord}\r\n                                    addSpecification={this.props.addSpecification}\r\n                                    filterData={this.state.filterData}\r\n                                    //completeSpecification={this.completeSpecification}\r\n                                    completeSpecification={this.validateTestGroupComplete}\r\n                                    approveSpecification={this.approveSpecification}\r\n                                    specificationReport={this.specificationReport}\r\n                                    retireSpec={this.retireSpec}\r\n                                    masterData={this.props.Login.masterData}\r\n\r\n                                />\r\n                            </Card.Body>\r\n                        </Card>\r\n                    </div>\r\n                    <Card body>\r\n\r\n                        <div>\r\n                            <CustomTab tabDetail={this.tabDetail()} onTabChange={this.onTabChange} />\r\n                        </div>\r\n\r\n                    </Card>\r\n                </ContentPanel>\r\n            </>\r\n\r\n        const testDesign = <Card>\r\n            <Card.Header className='sm-header'>\r\n                <span style={{ display: \"inline-block\" }} >\r\n                    <h4>{this.props.intl.formatMessage({ id: \"IDS_TEST\" })}</h4>\r\n                </span>\r\n                <button className=\"btn btn-primary\" style={{ float: \"right\" }}\r\n                    onClick={() => this.showSpecAndTestInfo()}>\r\n                    <FontAwesomeIcon icon={faEye}></FontAwesomeIcon>{\"  \"}\r\n                    {this.props.intl.formatMessage({ id: \"IDS_SPECINFO\" })}\r\n                </button>\r\n            </Card.Header>\r\n            <Card.Body className={this.state.testView ? 'p-0' : 'no-pad-t'}>\r\n                <TransactionListMasterJsonView\r\n                    cardHead={167}\r\n                    componentBreadcrumbs={this.breadCrumbData ? this.breadCrumbData.length > 0 ? true : false : false}\r\n                    // notSearchable={false}\r\n                    masterList={searchedData || TestGroupTest || []}\r\n                    //selectedMaster={[SelectedTest]}\r\n                    clickIconGroup={true}\r\n                    selectedMaster={SelectedTest !== undefined ? [SelectedTest] : undefined}\r\n                    primaryKeyField=\"ntestgrouptestcode\"\r\n                    getMasterDetail={this.props.getTestGroupDetails}\r\n                    inputParam={getTest}\r\n                    additionalParam={[]}\r\n                    mainField=\"stestname\"\r\n                    selectedListName=\"SelectedTest\"\r\n                    objectName=\"testgrouptest\"\r\n                    listName=\"IDS_TEST\"\r\n                    showStatusLink={true}\r\n                    statusFieldName=\"stransdisplaystatus\"\r\n                    statusField=\"ntransactionstatus\"\r\n                    subFields={testSubFields}\r\n                    moreField={testMoreFields}\r\n                    needValidation={false}\r\n                    needFilter={false}\r\n                    filterColumnData={this.props.filterTransactionList}\r\n                    searchListName=\"searchedData\"\r\n                    searchRef={this.searchRef}\r\n                    hidePaging={false}\r\n                    filterParam={filterParam}\r\n                    handlePageChange={this.handlePageChange}\r\n                    skip={this.state.testskip}\r\n                    take={this.state.testtake}\r\n                    pageSize={this.props.Login.settings && this.props.Login.settings[13].split(\",\").map(setting => parseInt(setting))}\r\n                    actionIcons={\r\n                        [\r\n                            {\r\n                                title: this.props.intl.formatMessage({ id: \"IDS_VIEW\" }),\r\n                                controlname: \"faCloudDownloadAlt\",\r\n                                objectName: \"selectedTest\",\r\n                                hidden: this.state.userRoleControlRights.indexOf(viewFileId) === -1,\r\n                                inputData: { masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo },\r\n                                onClick: (props) => this.viewTestFile(props),\r\n                                needConditionalIcon: true,\r\n                                conditionalIconFunction: this.fileViewIcon\r\n                            },\r\n                            {\r\n                                title: this.props.intl.formatMessage({ id: \"IDS_VIEW\" }),\r\n                                controlname: \"faExternalLinkAlt\",\r\n                                objectName: \"selectedTest\",\r\n                                hidden: this.state.userRoleControlRights.indexOf(viewFileId) === -1,\r\n                                inputData: { masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo },\r\n                                onClick: (props) => this.viewTestFile(props),\r\n                                needConditionalIcon: true,\r\n                                conditionalIconFunction: this.linkViewIcon\r\n                            },\r\n                            {\r\n                                title: this.props.intl.formatMessage({ id: \"IDS_EDIT\" }),\r\n                                controlname: \"faPencilAlt\",\r\n                                objectName: \"testgroupspecification\",\r\n                                hidden: this.state.userRoleControlRights.indexOf(editTestId) === -1,\r\n                                inputData: { masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo },\r\n                                onClick: (props) => this.props.editTestGroupTest(\"update\", props.SelectedTest[0], this.props.Login.userInfo, editTestId, SelectedSpecification, this.state.filterData, props.masterData)\r\n                            },\r\n                            {\r\n                                title: this.props.intl.formatMessage({ id: \"IDS_DELETE\" }),\r\n                                controlname: \"faTrashAlt\",\r\n                                objectName: \"testgrouptest\",\r\n                                hidden: this.state.userRoleControlRights.indexOf(deleteTestId) === -1,\r\n                                inputData: { masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo },\r\n                                onClick: (props) => confirmMessage.confirm(\r\n                                    \"deleteMessage\",\r\n                                    this.props.intl.formatMessage({ id: \"IDS_DELETE\" }),\r\n                                    this.props.intl.formatMessage({ id: \"IDS_DEFAULTCONFIRMMSG\" }),\r\n                                    this.props.intl.formatMessage({ id: \"IDS_OK\" }),\r\n                                    this.props.intl.formatMessage({ id: \"IDS_CANCEL\" }),\r\n                                    () => this.deleteTest({ props, ncontrolCode: deleteTestId, filterData: this.state.filterData })\r\n                                )\r\n                            }\r\n                        ]\r\n                    }\r\n                    commonActions={\r\n                        <>\r\n\r\n                            <Button className=\"btn btn-icon-rounded btn-circle solid-blue\" role=\"button\"\r\n                                hidden={this.state.userRoleControlRights.indexOf(addTestId) === -1}\r\n                                data-tip={this.props.intl.formatMessage({ id: \"IDS_ADD\" })}\r\n                                // data-for=\"tooltip-list-wrap\"\r\n                                onClick={() => this.props.addTestGroupTest(SelectedComponent, this.props.Login.userInfo, addTestId, SelectedSpecification, this.state.filterData, this.props.Login.masterData)}>\r\n                                <FontAwesomeIcon icon={faPlus} title={this.props.intl.formatMessage({ id: \"IDS_ADD\" })} />\r\n                            </Button>\r\n                        </>\r\n                    }\r\n                />\r\n            </Card.Body>\r\n        </Card>\r\n\r\n        const paramDesign =\r\n            <>\r\n                <ContentPanel hidden={!this.state.showTest} className=\"grouped-param\">\r\n                    <Card>\r\n                        {/* <Card.Header className='sm-header'>\r\n                            <span style={{ display: \"inline-block\" }} >\r\n                                <h4>{this.props.intl.formatMessage({ id: \"IDS_PARAMETER\" })}</h4>\r\n                            </span>\r\n                        </Card.Header> */}\r\n                        {/* {TestGroupTestParameter && TestGroupTestParameter.length > 0 && */}\r\n                        {/* <PerfectScrollbar> */}\r\n                        {console.log(this.props.Login.ncontrolCode)}\r\n                        <TestGroupTestTab\r\n                            paneHeight={this.state.paneHeight}\r\n                            testView={this.state.testView}\r\n                            masterData={this.props.Login.masterData}\r\n                            inputParam={this.props.Login.inputParam}\r\n                            userInfo={this.props.Login.userInfo}\r\n                            userRoleControlRights={this.state.userRoleControlRights}\r\n                            esignRights={this.props.Login.userRoleControlRights}\r\n                            screenName={this.props.Login.screenName}\r\n                            openChildModal={this.props.Login.openChildModal}\r\n                            operation={this.props.Login.operation}\r\n                            loadEsign={this.props.Login.loadEsign}\r\n                            testGroupInputData={this.props.Login.testGroupInputData}\r\n                            parameterData={this.props.Login.parameterData}\r\n                            selectedRecord={this.state.selectedRecord}\r\n                            screenData={this.props.Login.screenData}\r\n                            ncontrolCode={this.props.Login.ncontrolCode}\r\n                            controlMap={this.state.controlMap}\r\n                            testGroupCheckList={this.props.Login.testGroupCheckList}\r\n                            openTemplateModal={this.props.Login.openTemplateModal}\r\n                            editTestGroupTest={this.props.editTestGroupTest}\r\n                            updateStore={this.props.updateStore}\r\n                            crudMaster={this.props.crudMaster}\r\n                            getTestGroupParameter={this.props.getTestGroupParameter}\r\n                            editTestGroupParameter={this.props.editTestGroupParameter}\r\n                            filterData={this.state.filterData}\r\n                            addTestGroupCodedResult={this.props.addTestGroupCodedResult}\r\n                            addTestGroupNumericTab={this.props.addTestGroupNumericTab}\r\n                            validateEsignCredential={this.props.validateEsignCredential}\r\n                            filterColumnData={this.props.filterColumnData}\r\n                            viewTestGroupCheckList={this.props.viewTestGroupCheckList}\r\n                            getDataForTestMaterial={this.props.getDataForTestMaterial}\r\n                            materialType={this.props.Login.materialType}\r\n                            getMaterialCategoryBasedMaterialType={this.props.getMaterialCategoryBasedMaterialType}\r\n                            materialCategoryList={this.props.Login.materialCategoryList}\r\n                            materialList={this.props.Login.materialList}\r\n                            getMaterialBasedMaterialCategory={this.props.getMaterialBasedMaterialCategory}\r\n                            getTestGroupMaterial={this.props.getTestGroupMaterial}\r\n                            getDataForEditTestMaterial={this.props.getDataForEditTestMaterial}\r\n                            dataState={this.state.clinicalspecDataState}\r\n                            dataStateChange={this.specDataStateChange}\r\n                            getTestGroupRulesEngineAdd={this.getTestGroupRulesEngineAdd}\r\n                            settings={this.props.Login.settings}\r\n                            skip={this.state.testskip}\r\n                            take={this.state.testtake}\r\n                            getEditTestGroupRulesEngine={this.props.getEditTestGroupRulesEngine}\r\n                            getSelectedTestGroupRulesEngine={this.props.getSelectedTestGroupRulesEngine}\r\n                            ConfirmDeleteRule={this.ConfirmDeleteRule}\r\n                            approveVersion={(masterdata, nflag) => this.approveVersion(masterdata, nflag)}\r\n                            openflowview={(props)=>this.openflowview(props)}\r\n                            handlePageChangeRuleEngine={(event) => this.handlePageChangeRuleEngine(event)}\r\n                            skipRulesEngine={this.state.skipRulesEngine}\r\n                            takeRulesEngine={this.state.takeRulesEngine}\r\n                            viewOutcome={ (props)=>this.viewOutcome(props)}\r\n                            filterParamRulesEngine={ filterParamRulesEngine}\r\n                            filterTransactionList={this.props.filterTransactionList} \r\n\r\n                        />\r\n                        {/* </PerfectScrollbar>\r\n                     } */}\r\n                    </Card>\r\n                </ContentPanel>\r\n            </>\r\n\r\n        const mainDesign =\r\n            <SplitterLayout\r\n                customClassName={this.state.testView ? \"detailed-inner\" : \"detailed-inner no-height \"}\r\n                vertical={this.state.testView ? false : true}\r\n                borderColor=\"#999\"\r\n                primaryIndex={1}\r\n                percentage={true}\r\n                //secondaryInitialSize={this.state.testView ? 600 : this.state.fixefScrollHeight}\r\n                secondaryInitialSize={37}\r\n                primaryMinSize={30}\r\n                secondaryMinSize={37}\r\n            >\r\n                {testDesign}{paramDesign}\r\n            </SplitterLayout >\r\n\r\n\r\n        // const testDesign = this.state.testView ?\r\n        //     <SplitterLayout\r\n        //         customClassName=\"detailed-inner\"\r\n        //         borderColor=\"#999\"\r\n        //         primaryIndex={1}>\r\n        //         {tempDesign}{paramDesign}\r\n        //     </SplitterLayout>\r\n        //     :\r\n        //     <SplitterLayout\r\n        //         customClassName=\"detailed-inner no-height\"\r\n        //         vertical\r\n        //         borderColor=\"#999\"\r\n        //         primaryIndex={1}\r\n        //         // onSecondaryPaneSizeChange={this.verticalPaneSizeChange}\r\n        //         secondaryInitialSize={this.state.fixefScrollHeight}\r\n        //     >\r\n        //         <ContentPanel>\r\n        //             {tempDesign}\r\n        //         </ContentPanel>\r\n\r\n        //         {paramDesign}\r\n        //     </SplitterLayout>\r\n\r\n        return (\r\n            <>\r\n                {/* <ReactTooltip place=\"bottom\" globalEventOff='click' id=\"tooltip-list-wrap\" /> */}\r\n                {/* screen-height-window active_seperator */}\r\n                <ListWrapper className=\"client-listing-wrap mtop-4 screen-height-window\">\r\n                    {this.breadCrumbData && this.breadCrumbData.length > 0 &&\r\n                        <BreadcrumbComponent\r\n                            breadCrumbItem={this.breadCrumbData}\r\n                        />}\r\n                    <Row noGutters>\r\n                        <Col md={12} className=\"parent-port-height sticky_head_parent\" ref={(parentHeight) => { this.parentHeight = parentHeight }}>\r\n                            <SplitterLayout\r\n                                borderColor=\"#999\"\r\n                                primaryIndex={1}\r\n                                percentage={true}\r\n                                secondaryInitialSize={30}\r\n                            //customClassName=\"fixed_list_height\"\r\n                            >\r\n                                <div className={`${this.state.showModalBg ? 'show_modal_bg fixed_list_height' : 'fixed_list_height'}`}>\r\n                                    <div className=\"sticky_head\">\r\n                                        <SearchAdd className=\"border fixed_ico_list title_grp_custom\">\r\n                                            <h4>{this.props.intl.formatMessage({ id: \"IDS_PROFILETREE\" })}</h4>\r\n                                            <div className=\"icon_group_right_aligned\">\r\n                                                <AdvFilter\r\n                                                    filterComponent={[{\r\n                                                        \"IDS_SAMPLEFILTER\":\r\n                                                            <SampleFilter\r\n                                                                sampleType={this.state.sampleType}\r\n                                                                treeVersionTemplate={this.state.treeVersionTemplate}\r\n                                                                productCategory={this.state.productCategory}\r\n                                                                product={this.state.product}\r\n                                                                projectType={this.state.projectType}\r\n                                                                project={this.state.project}\r\n                                                                onFilterComboChange={this.onFilterComboChange}\r\n                                                                tempFilterData={this.state.tempFilterData}\r\n                                                            >\r\n                                                            </SampleFilter>,\r\n                                                        needActionStrip: false\r\n                                                    }]}\r\n                                                    onFilterSubmit={this.onFilterSumbit}\r\n                                                    showModalBg={(e) => this.setState({ showModalBg: e })}\r\n                                                />\r\n\r\n                                                <ProductList className=\"d-flex product-category float-right icon-group-wrap\">\r\n                                                    {/* <Tooltip position=\"bottom\" anchorElement=\"target\" openDelay={100} parentTitle={true}> */}\r\n                                                    <Button className=\"btn btn-icon-rounded btn-circle solid-blue mr-1\" role=\"button\"\r\n                                                        hidden={this.state.userRoleControlRights.indexOf(addTreeId) === -1}\r\n                                                        onClick={() => this.props.createTree(this.state.filterData, this.props.Login.userInfo, selectedNode, addTreeId)}\r\n                                                        data-tip={this.props.intl.formatMessage({ id: \"IDS_ADD\" })}\r\n                                                    //  data-for=\"tooltip-list-wrap\"\r\n                                                    >\r\n                                                        <FontAwesomeIcon icon={faPlus} />\r\n                                                    </Button>\r\n\r\n                                                    <Nav.Link className=\"btn btn-circle outline-grey mr0 mr-1\" name=\"edittestname\"\r\n                                                        hidden={this.state.userRoleControlRights.indexOf(editTreeId) === -1}\r\n                                                        data-tip={this.props.intl.formatMessage({ id: \"IDS_EDIT\" })}\r\n                                                        //  data-for=\"tooltip-list-wrap\"\r\n                                                        onClick={() => this.props.editTree(\"update\", selectedNode, this.props.Login.userInfo, editTreeId, this.state.filterData,\r\n                                                            this.props.Login.masterData)}>\r\n                                                        <FontAwesomeIcon icon={faPencilAlt} />\r\n                                                    </Nav.Link>\r\n                                                    <Nav.Link name=\"deleteLink\"\r\n                                                        hidden={this.state.userRoleControlRights.indexOf(deleteTreeId) === -1}\r\n                                                        data-tip={this.props.intl.formatMessage({ id: \"IDS_DELETE\" })}\r\n                                                        // data-for=\"tooltip-list-wrap\"\r\n                                                        className=\"btn btn-circle outline-grey \"\r\n                                                        onClick={() => this.ConfirmDelete({ ...deleteTree })}>\r\n                                                        <FontAwesomeIcon icon={faTrashAlt} />\r\n                                                        {/* <ConfirmDialog\r\n                                                            name=\"deleteMessage\"\r\n                                                            message={this.props.intl.formatMessage({ id: \"IDS_DEFAULTCONFIRMMSG\" })}\r\n                                                            doLabel={this.props.intl.formatMessage({ id: \"IDS_OK\" })}\r\n                                                            doNotLabel={this.props.intl.formatMessage({ id: \"IDS_CANCEL\" })}\r\n                                                            icon={faTrashAlt}\r\n                                                            title={this.props.intl.formatMessage({ id: \"IDS_DELETE\" })}\r\n                                                            hidden={this.state.userRoleControlRights.indexOf(deleteTreeId) === -1}\r\n                                                            handleClickDelete={() => this.deleteRecord({ ...deleteTree })}\r\n                                                        /> */}\r\n                                                    </Nav.Link>\r\n                                                    <Button className=\"btn btn-circle outline-grey ml-1\" variant=\"link\"\r\n                                                        onClick={() => this.reloadData()}\r\n                                                        // data-for=\"tooltip-list-wrap\"\r\n                                                        data-tip={this.props.intl.formatMessage({ id: \"IDS_REFRESH\" })}>\r\n                                                        <FontAwesomeIcon icon={faSync} style={{ \"width\": \"0.6!important\" }} />\r\n                                                    </Button>\r\n                                                    {/* </Tooltip> */}\r\n                                                </ProductList>\r\n\r\n                                            </div>\r\n                                        </SearchAdd>\r\n                                    </div>\r\n                                    <div className=\"sticky_head_scroll_body\" style={{ \"height\": this.state.parentHeight }}>\r\n                                        <PerfectScrollbar>\r\n                                            <FormTreeMenu\r\n                                                data={AgaramTree}\r\n                                                hasSearch={false}\r\n                                                handleTreeClick={this.onTreeClick}\r\n                                                initialOpenNodes={OpenNodes}\r\n                                                focusKey={FocusKey || \"\"}\r\n                                                activeKey={ActiveKey || \"\"}\r\n                                            />\r\n                                            <TransationListMaster\r\n                                                notSearchable={true}\r\n                                                titleHead={this.props.intl.formatMessage({ id: \"IDS_SPECIFICATION\" })}\r\n                                                titleClasses=\"title_grp_custom fixed_ico_list\"\r\n                                                masterList={TestGroupSpecification || []}\r\n                                                selectedMaster={[SelectedSpecification]}\r\n                                                needMultiSelect={false}\r\n                                                primaryKeyField=\"nallottedspeccode\"\r\n                                                getMasterDetail={(spec) => this.props.getComponentBySpecId({ ...getComponent, selectedRecord: spec, historyDataState: this.state.historyDataState }, this.props.Login.masterData, this.searchRef)}\r\n                                                mainField=\"sspecname\"\r\n                                                selectedListName=\"testgroupspecification\"\r\n                                                objectName=\"testgroupspecification\"\r\n                                                listName=\"IDS_SPECIFICATION\"\r\n                                                onFilterSumbit={this.onFilterSumbit}\r\n                                                subFields={this.specSubField}\r\n                                                actionIcons={\r\n                                                    [\r\n                                                        {\r\n                                                            title: this.props.intl.formatMessage({ id: \"IDS_EDIT\" }),\r\n                                                            controlname: \"faPencilAlt\",\r\n                                                            objectName: \"testgroupspecification\",\r\n                                                            hidden: this.state.userRoleControlRights.indexOf(editSpecId) === -1,\r\n                                                            inputData: { masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo },\r\n                                                            onClick: (props) => this.props.addSpecification(\"update\", { ...editSpecParam, ...props }, editSpecId)\r\n                                                        },\r\n                                                        {\r\n                                                            title: this.props.intl.formatMessage({ id: \"IDS_DELETE\" }),\r\n                                                            controlname: \"faTrashAlt\",\r\n                                                            objectName: \"testgroupspecification\",\r\n                                                            hidden: this.state.userRoleControlRights.indexOf(deleteSpecId) === -1,\r\n                                                            inputData: { masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo },\r\n                                                            onClick: (props) => confirmMessage.confirm(\r\n                                                                \"deleteMessage\",\r\n                                                                this.props.intl.formatMessage({ id: \"IDS_DELETE\" }),\r\n                                                                this.props.intl.formatMessage({ id: \"IDS_DEFAULTCONFIRMMSG\" }),\r\n                                                                this.props.intl.formatMessage({ id: \"IDS_OK\" }),\r\n                                                                this.props.intl.formatMessage({ id: \"IDS_CANCEL\" }),\r\n                                                                () => this.deleteSpecRecord({ props, ...specDeleteParam, selectedRecord: SelectedSpecification, ncontrolCode: deleteSpecId })\r\n                                                            )\r\n                                                        }\r\n                                                    ]\r\n                                                }\r\n                                                needFilter={false}\r\n                                                commonActions={\r\n                                                    <>\r\n                                                        {/* <ReactTooltip place=\"bottom\" /> */}\r\n                                                        <Button className=\"btn btn-icon-rounded btn-circle solid-blue\" role=\"button\"\r\n                                                            hidden={this.state.userRoleControlRights.indexOf(addSpecId) === -1}\r\n                                                            data-tip={this.props.intl.formatMessage({ id: \"IDS_ADD\" })}\r\n                                                            //  data-for=\"tooltip-list-wrap\"\r\n                                                            onClick={() => this.props.addSpecification(\"create\", { ...addSpecParam }, addSpecId, this.props.Login.masterData)}>\r\n                                                            <FontAwesomeIcon icon={faPlus}\r\n                                                            // title={this.props.intl.formatMessage({ id: \"IDS_ADD\" })}\r\n                                                            />\r\n                                                        </Button>\r\n                                                    </>\r\n                                                }\r\n                                                hideSearch={false}\r\n                                                hidePaging={true}\r\n                                            />\r\n                                            {SelectedSpecification && SelectedSpecification.ncomponentrequired === transactionStatus.YES &&\r\n                                                <TransationListMaster\r\n                                                    notSearchable={true}\r\n                                                    titleHead={this.props.intl.formatMessage({ id: \"IDS_COMPONENT\" })}\r\n                                                    titleClasses=\"title_grp_custom fixed_ico_list\"\r\n                                                    masterList={TestGroupSpecSampleType || []}\r\n                                                    selectedMaster={[SelectedComponent]}\r\n                                                    needMultiSelect={false}\r\n                                                    primaryKeyField=\"nspecsampletypecode\"\r\n                                                    getMasterDetail={(event) => this.componentRowClick(event)}\r\n                                                    mainField=\"scomponentname\"\r\n                                                    selectedListName=\"testgroupspecsampletype\"\r\n                                                    objectName=\"testgroupspecsampletype\"\r\n                                                    listName=\"IDS_COMPONENT\"\r\n                                                    actionIcons={\r\n                                                        [\r\n                                                            {\r\n                                                                title: this.props.intl.formatMessage({ id: \"IDS_DELETE\" }),\r\n                                                                // data-tip={this.props.intl.formatMessage({ id: \"IDS_ADD\" })}\r\n                                                                controlname: \"faTrashAlt\",\r\n                                                                objectName: \"testgroupspecsampletype\",\r\n                                                                hidden: this.state.userRoleControlRights.indexOf(deleteComponentId) === -1,\r\n                                                                inputData: { masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo },\r\n                                                                onClick: (props) => confirmMessage.confirm(\r\n                                                                    \"deleteMessage\",\r\n                                                                    this.props.intl.formatMessage({ id: \"IDS_DELETE\" }),\r\n                                                                    this.props.intl.formatMessage({ id: \"IDS_DEFAULTCONFIRMMSG\" }),\r\n                                                                    this.props.intl.formatMessage({ id: \"IDS_OK\" }),\r\n                                                                    this.props.intl.formatMessage({ id: \"IDS_CANCEL\" }),\r\n                                                                    () => this.deleteMultipleRecord({ props, ncontrolCode: deleteComponentId })\r\n                                                                )\r\n                                                            }\r\n                                                        ]\r\n                                                    }\r\n                                                    commonActions={\r\n                                                        <>\r\n                                                            {/* <ReactTooltip place=\"bottom\" /> */}\r\n                                                            <Button className=\"btn btn-icon-rounded btn-circle solid-blue\" role=\"button\"\r\n                                                                hidden={this.state.userRoleControlRights.indexOf(addComponentId) === -1}\r\n                                                                data-tip={this.props.intl.formatMessage({ id: \"IDS_ADD\" })}\r\n                                                                //  data-for=\"tooltip-list-wrap\"\r\n                                                                // title={this.props.intl.formatMessage({ id: \"IDS_ADD\" })}\r\n                                                                onClick={() => this.props.addComponent(SelectedSpecification, this.props.Login.userInfo, addComponentId, this.props.Login.masterData)}>\r\n                                                                <FontAwesomeIcon icon={faPlus}\r\n                                                                // title={this.props.intl.formatMessage({ id: \"IDS_ADD\" })} \r\n                                                                />\r\n                                                            </Button>\r\n\r\n                                                        </>\r\n                                                    }\r\n                                                    hidePaging={true}\r\n                                                />}\r\n                                        </PerfectScrollbar>\r\n                                    </div>\r\n                                </div>\r\n                                <>\r\n                                    {this.state.testView ?\r\n                                        <>\r\n                                            {specDesign}\r\n                                            {this.state.showTest ?\r\n                                                <div>\r\n                                                    {mainDesign}\r\n                                                </div>\r\n                                                : \"\"}\r\n                                        </>\r\n                                        :\r\n                                        <PerfectScrollbar>\r\n                                            {specDesign}\r\n                                            {this.state.showTest ?\r\n                                                <div>\r\n                                                    {mainDesign}\r\n                                                </div>\r\n                                                : \"\"}\r\n                                        </PerfectScrollbar>\r\n                                    }\r\n\r\n\r\n                                </>\r\n                            </SplitterLayout>\r\n                        </Col>\r\n                    </Row>\r\n                </ListWrapper>\r\n                {\r\n                    this.props.Login.openModal && this.props.Login.screenName &&\r\n                    <SlideOutModal\r\n                        show={this.props.Login.openModal}\r\n                        closeModal={this.closeModal}\r\n                        className={this.props.Login.screenName === \"IDS_VIEWRULE\"  ? \"wide-popup\" : \"\"}\r\n                        operation={this.props.Login.screenName === \"IDS_VIEWRULE\"||this.props.Login.screenName === \"IDS_VIEWOUTCOME\" ? \"\" : this.props.Login.operation}\r\n                        inputParam={this.props.Login.inputParam}\r\n                        screenName={this.props.Login.screenName}\r\n                        esign={this.props.Login.loadEsign}\r\n                        validateEsign={this.validateEsign}\r\n                        onSaveClick={this.onSaveClick}\r\n                        hideSave={this.props.Login.screenName === \"IDS_VIEWRULE\"||this.props.Login.screenName === \"IDS_VIEWOUTCOME\" ? true : false}\r\n                        size={this.props.Login.screenName === \"IDS_VIEWRULE\" ||this.props.Login.screenName === \"IDS_VIEWOUTCOME\"  ? 'xl' : \"lg\"}\r\n                        selectedRecord={this.state.selectedRecord || {}}\r\n                        mandatoryFields={\r\n                            this.props.Login.screenName === \"IDS_SPECFILE\" ? this.findMandatoryFields(this.props.Login.screenName, this.state.selectedRecord)\r\n                                : this.props.Login.screenName === \"IDS_SPECIFICATION\" ? specMandatoryFields\r\n                                    : this.props.Login.screenName === \"IDS_COMPONENT\" ? compMandatoryFields\r\n                                        : this.props.Login.screenName === \"IDS_EDITTESTGROUPTEST\" ? editTestMandatoryFields\r\n                                            : this.props.Login.screenName === \"IDS_TEST\" ? addTestMandatoryFields\r\n                                                : this.props.Login.screenName === \"IDS_PROFILETREE\" || this.props.Login.screenName === \"IDS_EDITTREE\"\r\n                                                    ? this.props.Login.treeMandatoryFields : []}\r\n                        addComponent={this.props.Login.loadEsign ?\r\n                            <Esign\r\n                                operation={this.props.Login.operation}\r\n                                onInputOnChange={this.onEsignInputOnChange}\r\n                                inputParam={this.props.Login.inputParam}\r\n                                selectedRecord={this.state.selectedRecord || {}}\r\n                            /> :\r\n                            this.props.Login.screenName === \"IDS_SPECIFICATION\" ?\r\n                                <AddTestGroupSpecification\r\n                                    selectedRecord={this.state.selectedRecord || {}}\r\n                                    timeZoneList={this.props.Login.timeZoneList}\r\n                                    onInputOnChange={this.onInputOnChange}\r\n                                    handleDateChange={this.handleDateChange}\r\n                                    onComboChange={this.onComboChange}\r\n                                    screenName={this.props.Login.screenName}\r\n                                    operation={this.props.Login.operation}\r\n                                    userInfo={this.props.Login.userInfo}\r\n                                    nsampletypecode={this.props.Login.masterData.selectedNode.nsampletypecode}\r\n                                    settings={this.props.Login.settings}\r\n                                /> :\r\n                                this.props.Login.screenName === \"IDS_COMPONENT\" ?\r\n                                    <AddTestGroupTest\r\n                                        selectedRecord={this.state.selectedRecord || {}}\r\n                                        testGroupInputData={this.props.Login.testGroupInputData}\r\n                                        screenName={this.props.Login.screenName}\r\n                                        onComboChange={this.onComboChange}\r\n                                        onFilterComboChange={this.onFilterComboChange}\r\n                                    /> :\r\n                                    this.props.Login.screenName === \"IDS_PROFILETREE\" ?\r\n                                        <AddProfileTree\r\n                                            selectedRecord={this.state.selectedRecord || {}}\r\n                                            onInputOnChange={this.onInputOnChange}\r\n                                            treetempTranstestGroup={this.props.Login.TreetempTranstestGroup}\r\n                                        /> :\r\n                                        this.props.Login.screenName === \"IDS_SPECFILE\" ?\r\n                                            <AddFile\r\n                                                selectedRecord={this.state.selectedRecord || {}}\r\n                                                onInputOnChange={this.onInputOnChange}\r\n                                                actionType={this.state.actionType}\r\n                                                onDrop={this.onDropSpecFile}\r\n                                                deleteAttachment={this.deleteAttachment}\r\n                                                linkMaster={this.props.Login.linkMaster}\r\n                                                editFiles={this.props.Login.editFiles}\r\n                                                maxSize={20}\r\n                                                maxFiles={this.props.Login.operation === \"update\" ? 1 : 1}\r\n                                                multiple={this.props.Login.operation === \"update\" ? false : true}\r\n                                                label={this.props.intl.formatMessage({ id: \"IDS_SPECFILE\" })}\r\n                                                hideDefaultToggle={true}\r\n                                                name=\"specfilename\"\r\n                                            /> :\r\n                                            this.props.Login.screenName === \"IDS_EDITTREE\" ?\r\n                                                <Row>\r\n                                                    <Col md={12}>\r\n                                                        <FormInput\r\n                                                            name={\"sleveldescription\"}\r\n                                                            label={this.state.selectedRecord.slabelname}\r\n                                                            type=\"text\"\r\n                                                            onChange={(event) => this.onInputOnChange(event, 1)}\r\n                                                            placeholder={this.state.selectedRecord.slabelname}\r\n                                                            value={this.state.selectedRecord ? this.state.selectedRecord[\"sleveldescription\"] : \"\"}\r\n                                                            isMandatory=\"*\"\r\n                                                            required={true}\r\n                                                            maxLength={100}\r\n                                                        />\r\n                                                    </Col>\r\n                                                </Row> :\r\n                                                this.props.Login.screenName === \"IDS_TEST\" ?\r\n                                                    <AddTestGroupTest\r\n                                                        selectedRecord={this.state.selectedRecord || {}}\r\n                                                        testGroupInputData={this.props.Login.testGroupInputData}\r\n                                                        screenName={this.props.Login.screenName}\r\n                                                        onComboChange={this.onComboChange}\r\n                                                        onFilterComboChange={this.onFilterComboChange}\r\n                                                    /> : this.props.Login.screenName === \"IDS_EDITTESTGROUPTEST\" ?\r\n                                                        <EditTestGroupTest\r\n                                                            selectedRecord={this.state.selectedRecord || {}}\r\n                                                            testGroupInputData={this.props.Login.testGroupInputData}\r\n                                                            onComboChange={this.onComboChange}\r\n                                                            onInputOnChange={this.onInputOnChange}\r\n                                                            onNumericInputChange={this.onNumericInputChange}\r\n                                                        /> : this.props.Login.screenName === \"IDS_VIEWRULE\" ?\r\n                                                            <Row>\r\n                                                                <Col md={12}>\r\n                                                                    <OrgTree\r\n                                                                        data={this.ruleflowobject()}\r\n                                                                        horizontal={true}\r\n                                                                        collapsable={true}\r\n                                                                        expandAll={true}\r\n                                                                        labelClassName={\"ruletree\"}\r\n                                                                    /> \r\n                                                                </Col>\r\n                                                            </Row>\r\n                                                               \r\n                                                            :  this.props.Login.screenName === \"IDS_VIEWOUTCOME\" ?\r\n                                                            <Row>\r\n                                                                <Col md={12}> \r\n                                                                    {this.props.Login.masterData.SelectedRulesEngine &&\r\n                                                                <CustomTab tabDetail={this.tabDetailRulesEngine()} onTabChange={this.onTabChangeRulesEngine} /> }\r\n                                                                </Col>\r\n                                                            </Row>:\"\"\r\n                        }\r\n                    />\r\n                }\r\n                {\r\n                    this.props.Login.openPortalModal &&\r\n                    <PortalModalSlideout\r\n                        show={this.props.Login.openPortalModal}\r\n                        closeModal={this.closePortalModal}\r\n                        screenName={this.props.intl.formatMessage({ id:this.props.Login.screenName})+\" - \"+this.props.Login.masterData.SelectedTest.stestsynonym}\r\n                        handleSaveClick={this.save}\r\n                        addComponent={\r\n                            (this.props.Login.operation === 'update' ? this.state.selectedRecord['groupList'] : true) &&\r\n                            <AddTestGroupRule\r\n                                productCategoryList={this.state.ProductCategoryList || []}\r\n                                selectedRecord={this.state.selectedRecord || {}}\r\n                                databaseTableList={this.props.Login.databaseTableList}\r\n                                tableColumnList={this.state.tableColumnList}\r\n                                specificationOptions={this.state.TestGroupSpecificationList || []}\r\n                                componentOptions={this.state.ComponentList || []}\r\n                                foreignTableList={this.state.foreignTableList || []}\r\n                                foreignTableColumnList={this.props.Login.foreignTableColumnList || []}\r\n                                count={this.state.count}\r\n                                foreignTableCount={this.state.foreignTableCount}\r\n                                sqlQuery={this.state.sqlQuery}\r\n                                userInfo={this.props.Login.userInfo}\r\n                                onInputChange={this.onInputChange}\r\n                                deleteRule={this.deleteRule}\r\n                                clearRule={this.clearRule}\r\n                                resetRule={this.resetRule}\r\n                                onSymbolChange={this.onSymbolChange}\r\n                                onRuleChange={this.onRuleChange}\r\n                                addRule={this.addRule}\r\n                                addTest={this.addTest}\r\n                                onConditionClick={this.onConditionClick}\r\n                                onMasterDataChange={this.onMasterDataChange}\r\n                                databaseviewList={this.props.Login.databaseviewList}\r\n                                addRuleList={this.props.Login.addRuleList || []}\r\n                                rulesOption={this.props.Login.masterData.rulesOption&&this.props.Login.masterData.rulesOption.filter(this.outComeTestsRemoveFromRules)}\r\n                                masterdata={this.props.Login.masterdata}\r\n                                switchRecord={this.state.switchRecord}\r\n                                data={this.state.data}\r\n                                dataResult={this.state.dataResult || []}\r\n                                dataState={this.state.dataState}\r\n                                dataStateChange={this.dataStateChange}\r\n                                userRoleControlRights={this.state.userRoleControlRights}\r\n                                gridColumnList={this.props.Login.gridColumnList || []}\r\n                                queryType={this.state.queryType}\r\n                                addAggregateList={this.props.Login.addAggregateList || []}\r\n                                addOrderbyList={this.props.Login.addOrderbyList || []}\r\n                                addGroup={this.addGroup}\r\n                                addGroupList={this.props.Login.addGroupList || []}\r\n                                onFilterComboChange={this.onFilterComboChange}\r\n                                selectFields={this.props.Login.selectFields || []}\r\n                                SelectedProductCategory={this.props.Login.masterData.SelectedProductCategory}\r\n                                DiagnosticCaseList={this.props.Login.masterData.DiagnosticCaseList}\r\n                                GradeList={this.props.Login.masterData.GradeList}\r\n                                PredefinedParameterOptions={this.props.Login.masterData.PredefinedParameterOptions} \r\n                                siteList={this.props.Login.masterData.siteList}\r\n                                resultTypeList={this.props.Login.masterData.resultTypeList}\r\n                                isResultorOrderType={this.state.isResultorOrderType}\r\n                                optionsByRule={this.state.optionsByRule || this.props.Login.masterData.DiagnosticCaseList}\r\n                                changePropertyView={this.changePropertyView}\r\n                                splitChangeWidthPercentage={this.state.splitChangeWidthPercentage}\r\n                                activeTabIndex={this.props.Login.activeTabIndex}\r\n                                enablePropertyPopup={this.state.enablePropertyPopup}\r\n                                propertyPopupWidth={this.state.propertyPopupWidth}\r\n                                controlMap={this.state.controlMap}\r\n                                sectionDataState={this.state.sectionDataState}\r\n                                masterData={this.props.Login.masterData}\r\n                                intl={this.props.intl}\r\n                                addOutcomeList={this.props.Login.addOutcomeList && this.props.Login.addOutcomeList || []}\r\n                                deleteOutcome={this.deleteOutcome}\r\n                                onmodalComboChange={this.onmodalComboChange}\r\n                                openModalPopup={this.props.Login.openModalPopup}\r\n                                closeModalShow={this.closeModalShow}\r\n                                modalsaveClick={this.modalsaveClick}\r\n                                getOutcomeDetails={this.getOutcomeDetails}\r\n                                addModalSite={this.addModalSite}\r\n                                action={this.props.Login.action}\r\n                                deletModalSite={this.deletModalSite}\r\n                                deleteModalTest={this.deleteModalTest}\r\n                                activeTestTab={this.props.Login.activeTestTab}\r\n                                testcomments={this.props.Login.testcomments}\r\n                                reportcomments={this.props.Login.reportcomments}\r\n                                addComments={this.addComments}\r\n                                CommentType={this.props.Login.CommentType}\r\n                                CommentSubType={this.props.Login.CommentSubType}\r\n                                isneedsgeneralcomments={this.state.isneedsgeneralcomments}\r\n                                predefcomments={this.props.Login.predefcomments}\r\n                                needoutsource={this.state.selectedRecord['needoutsource'] && this.state.selectedRecord['needoutsource'] === 3 ? true : false}\r\n                                openmodalsavePopup={this.props.Login.openmodalsavePopup}\r\n                                save={this.save}\r\n                                dataStateObject={this.state.dataStateObject}\r\n                                paneSizeChange={this.paneSizeChange}\r\n                                testInitiateTestCombo={this.props.Login.testInitiateTestCombo && this.viewColumnListByRule(this.props.Login.testInitiateTestCombo)}\r\n                                testCommentsTestCombo={this.props.Login.testCommentsTestCombo && this.viewColumnListByRule(this.props.Login.testCommentsTestCombo)}\r\n                                testRepeatTestCombo={this.props.Login.testRepeatTestCombo && this.viewColumnListByRule(this.props.Login.testRepeatTestCombo)}\r\n                                testenforceTestCombo={this.props.Login.testenforceTestCombo && this.viewColumnListByRule(this.props.Login.testenforceTestCombo)}\r\n                                dataStateChangetestRepeat={this.dataStateChangetestRepeat}\r\n                                dataStateChangetestEnforce={this.dataStateChangetestEnforce}\r\n                                dataStatetestEnforce={this.state.dataStatetestEnforce}\r\n                                dataStatetestRepeat={this.state.dataStatetestRepeat}\r\n                                testGroupTestParameterRulesEngine={this.props.Login.masterData.testGroupTestParameterRulesEngine}\r\n                                onRuleInputChange={this.onRuleInputChange}\r\n                                onRuleNumericInputOnChange={this.onRuleNumericInputOnChange} \r\n                            />\r\n                        }\r\n                    />\r\n                }\r\n            </>\r\n        );\r\n    }\r\n\r\n    ConfirmDelete = (obj) => {\r\n        this.confirmMessage.confirm(\"deleteMessage\", this.props.intl.formatMessage({ id: \"IDS_DELETE\" }), this.props.intl.formatMessage({ id: \"IDS_DEFAULTCONFIRMMSG\" }),\r\n            this.props.intl.formatMessage({ id: \"IDS_OK\" }), this.props.intl.formatMessage({ id: \"IDS_CANCEL\" }),\r\n            () => this.deleteRecord(obj));\r\n    }\r\n\r\n    handlePageChange = (event) => {\r\n        this.setState({\r\n            testskip: event.skip,\r\n            testtake: event.take\r\n        });\r\n    }\r\n\r\n    findMandatoryFields(screenName, selectedRecord) {\r\n        let mandyFields = [];\r\n        if (screenName === \"IDS_SPECFILE\") {\r\n            if (selectedRecord && selectedRecord.nattachmenttypecode === attachmentType.LINK) {\r\n                mandyFields = [\r\n                    { \"idsName\": \"IDS_FILENAME\", \"dataField\": \"slinkfilename\", \"mandatory\": true, \"mandatoryLabel\": \"IDS_CHOOSE\", \"controlType\": \"file\" },\r\n                    { \"idsName\": \"IDS_LINKNAME\", \"dataField\": \"nlinkcode\", \"mandatory\": true, \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" }\r\n                ];\r\n            } else {\r\n                //if (this.props.Login.operation === 'update') {\r\n                mandyFields = [\r\n                    { \"idsName\": \"IDS_FILE\", \"dataField\": \"sfilename\", \"mandatory\": true, \"mandatoryLabel\": \"IDS_CHOOSE\", \"controlType\": \"file\" },\r\n                ];\r\n                // }\r\n            }\r\n        } else {\r\n            return [];\r\n        }\r\n        let finalMandyFields = [];\r\n        mandyFields.forEach(item => item.mandatory === true && finalMandyFields.push(item));\r\n        return finalMandyFields;\r\n    }\r\n\r\n    viewTestFile = (props) => {\r\n        const viewParam = {\r\n            operation: \"view\",\r\n            methodUrl: \"TestGroupTestFile\",\r\n            classUrl: \"testgroup\",\r\n            inputData: {\r\n                ntestgroupfilecode: props.selectedTest ? props.selectedTest.ntestgroupfilecode : 0,\r\n                userinfo: this.props.Login.userInfo,\r\n                testgroupspecification: this.props.Login.masterData.SelectedSpecification,\r\n                ntestgrouptestcode: props.selectedTest ? props.selectedTest.ntestgrouptestcode : 0\r\n            }\r\n        }\r\n        this.props.viewAttachment(viewParam)\r\n    }\r\n\r\n    fileViewIcon = (master) => {\r\n        if (master.ntestgroupfilecode > 0 && master.nlinkcode === transactionStatus.NA) {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    linkViewIcon = (master) => {\r\n        if (master.ntestgroupfilecode > 0 && master.nlinkcode !== transactionStatus.NA) {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    showSpecAndTestInfo() {\r\n        this.setState({ showTest: !this.state.showTest, testView: false })\r\n        this.updateSpiltterLayout()\r\n\r\n    }\r\n    showSpecAndTestInfo1() {\r\n        this.setState({ showTest: !this.state.showTest, testView: true })\r\n        //this.updateSpiltterLayout()\r\n\r\n    }\r\n\r\n    onFilterSumbit = () => {\r\n        const tempFilterData = this.state.tempFilterData;\r\n        if (tempFilterData.nsampletypecode === undefined) {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SAMPLETYPENOTAVAILABLE\" }));\r\n        } else if (tempFilterData.nproductcatcode === \"\") {\r\n            if (tempFilterData.nsampletypecode.item.nformcode === formCode.PRODUCTCATEGORY) {\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_PRODUCTCATEGORYNOTAVAILABLE\" }));\r\n            } else if (tempFilterData.nsampletypecode.item.nformcode === formCode.INSTRUMENTCATEGORY) {\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_INSTRUMENTCATEGORYNOTAVAILABLE\" }));\r\n            } else if (tempFilterData.nsampletypecode.item.nformcode === formCode.MATERIALCATEGORY) {\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_MATERIALCATEGORYNOTAVAILABLE\" }));\r\n            } else {\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_CATEGORYNOTAVAILABLE\" }));\r\n            }\r\n        }\r\n        // else if(tempFilterData.nproductcatcode.item.ncategorybasedflow === transactionStatus.NO){\r\n        else if ((tempFilterData.nproductcatcode.item.ncategorybasedflow === transactionStatus.NO && tempFilterData.nproductcode === \"\") ||\r\n            (tempFilterData.nproductcatcode.item.ncategorybasedflow === transactionStatus.NO && tempFilterData.nproductcode === undefined)) {\r\n            if (tempFilterData.nsampletypecode.item.nformcode === formCode.PRODUCTCATEGORY) {\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_PRODUCTNOTAVAILABLE\" }));\r\n            } else if (tempFilterData.nsampletypecode.item.nformcode === formCode.INSTRUMENTCATEGORY) {\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_INSTRUMENTNOTAVAILABLE\" }));\r\n            } else if (tempFilterData.nsampletypecode.item.nformcode === formCode.MATERIALCATEGORY) {\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_MATERIALNOTAVAILABLE\" }));\r\n            } else {\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_PRODUCTNOTAVAILABLE\" }));\r\n            }\r\n        }\r\n        // }\r\n        else if (tempFilterData.ntreeversiontempcode === \"\") {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_STUDYPLANTEMPLATEISNOTAVAILABLE\" }));\r\n        } else {\r\n            const inputParam = {\r\n                inputData: {\r\n                    userinfo: this.props.Login.userInfo,\r\n                    nsampletypecode: tempFilterData.nsampletypecode.value,\r\n                    nproductcatcode: tempFilterData.nproductcatcode.value,\r\n                    nproductcode: tempFilterData.nproductcatcode.item.ncategorybasedflow === transactionStatus.YES ? -1 : tempFilterData.nproductcode ? tempFilterData.nproductcode.value : -1,\r\n                    ntreeversiontempcode: tempFilterData.ntreeversiontempcode.value,\r\n                    nprojectmastercode: tempFilterData.nsampletypecode.value === SampleType.PROJECTSAMPLETYPE ?  tempFilterData.nsampletypecode.item.nprojectspecrequired=== transactionStatus.YES ? tempFilterData.nprojectmastercode.value :-1 : -1,\r\n                    filterData: { ...tempFilterData },\r\n                },\r\n                historyDataState: this.state.historyDataState\r\n            }\r\n            this.props.filterTestGroup(inputParam, this.props.Login.masterData, this.searchRef);\r\n        }\r\n    }\r\n\r\n    onTreeClick = (event) => {\r\n        const inputParam = {\r\n            methodUrl: \"TestGroupSpecification\",\r\n            screenName: \"IDS_SPECIFICATION\",\r\n            operation: \"get\",\r\n            keyName: \"treetemplatemanipulation\",\r\n            userinfo: this.props.Login.userInfo,\r\n            selectedRecord: event.item,\r\n            activeKey: event.key,\r\n            focusKey: event.key,\r\n            primaryKey: event.primaryKey,\r\n            historyDataState: this.state.historyDataState\r\n        };\r\n        this.props.getSpecification(inputParam, this.props.Login.masterData, this.searchRef);\r\n    }\r\n\r\n    tabDetail = () => {\r\n        const tabMap = new Map();\r\n        tabMap.set(\"IDS_FILE\",\r\n            <TestGroupSpecFile\r\n                controlMap={this.state.controlMap}\r\n                userRoleControlRights={this.state.userRoleControlRights}\r\n                userInfo={this.props.Login.userInfo}\r\n                inputParam={this.props.Login.inputParam}\r\n                deleteRecord={this.deleteRecord}\r\n                testGroupSpecFile={this.props.Login.masterData.TestGroupSpecFile || []}\r\n                selectedSpecification={this.props.Login.masterData.SelectedSpecification}\r\n                addTestFile={this.addFile}\r\n                editSpecFile={this.props.editSpecFile}\r\n                filterData={this.state.filterData}\r\n                viewTestFile={this.viewTestFile}\r\n                defaultRecord={this.defaultRecord}\r\n                screenName=\"IDS_FILE\"\r\n                viewAttachment={this.props.viewAttachment}\r\n                settings={this.props.Login.settings}\r\n                masterData={this.props.Login.masterData}\r\n            />);\r\n        tabMap.set(\"IDS_SPECIFICATIONHISTORY\",\r\n            <SpecificationHistory\r\n                data={this.props.Login.masterData.TestGroupSpecificationHistory}\r\n                dataResult={process(this.props.Login.masterData.TestGroupSpecificationHistory || [], this.state.historyDataState)}\r\n                dataState={this.state.historyDataState}\r\n                dataStateChange={this.historyDataStateChange}\r\n\r\n                // testGroupSpecificationHistory={this.props.Login.masterData.TestGroupSpecificationHistory}\r\n                // dataState={this.props.Login.screenName === \"IDS_SPECIFICATIONHISTORY\" ? this.state.historyDataState : { skip: 0, take: 10 }}\r\n                controlMap={this.state.controlMap}\r\n                userRoleControlRights={this.state.userRoleControlRights}\r\n                userInfo={this.props.Login.userInfo}\r\n                inputParam={this.props.Login.inputParam}\r\n                screenName=\"IDS_SPECIFICATIONHISTORY\"\r\n            />);\r\n        return tabMap;\r\n    }\r\n\r\n    historyDataStateChange = (event) => {\r\n        this.setState({\r\n            dataResult: process(this.props.Login.masterData.TestGroupSpecificationHistory || [], event.dataState),\r\n            historyDataState: event.dataState\r\n        });\r\n    }\r\n    specDataStateChange = (event) => {\r\n        this.setState({\r\n            dataResult: process(this.props.Login.masterData.TestGroupTestClinicalSpec || [], event.dataState),\r\n            clinicalspecDataState: event.dataState\r\n        });\r\n    }\r\n    addFile = (userInfo, operation, ncontrolCode, screenName, modalName, nflag) => {\r\n        // const testgroupspecification = this.props.Login.masterData.SelectedSpecification;\r\n        // if (testgroupspecification.napprovalstatus === transactionStatus.DRAFT\r\n        //     || testgroupspecification.napprovalstatus === transactionStatus.CORRECTION) {\r\n        //     this.props.addTestFile(userInfo, operation, ncontrolCode, screenName, modalName, nflag);\r\n        // } else {\r\n        //     toast.warn(this.props.intl.formatMessage({ id: \"IDS_SPECIFICATIONSTATUSMUSTBEDRAFTCORRECTION\" }));\r\n        // }\r\n\r\n        const masterData = this.props.Login.masterData;\r\n        const treeVersionTemplateIndex = masterData[\"TreeVersionTemplate\"].findIndex(\r\n            x => x[\"ntreeversiontempcode\"] === masterData.selectedNode[\"ntreeversiontempcode\"]);\r\n\r\n        const templateVersionStatus = masterData[\"TreeVersionTemplate\"][treeVersionTemplateIndex].ntransactionstatus\r\n        if (templateVersionStatus === transactionStatus.RETIRED) {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTEDTEMPLATEISRETIRED\" }));\r\n        }\r\n        else {\r\n            const testgroupspecification = this.props.Login.masterData.SelectedSpecification;\r\n            if (testgroupspecification.napprovalstatus === transactionStatus.DRAFT\r\n                || testgroupspecification.napprovalstatus === transactionStatus.CORRECTION) {\r\n                this.props.addTestFile(userInfo, operation, ncontrolCode, screenName, modalName);\r\n            } else {\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_SPECIFICATIONSTATUSMUSTBEDRAFTCORRECTION\" }));\r\n            }\r\n        }\r\n    }\r\n\r\n    onTabChange = (tabProps) => {\r\n        const screenName = tabProps.screenName;\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { screenName }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    componentRowClick = (event) => {\r\n        let masterData = this.props.Login.masterData;\r\n        masterData[\"SelectedComponent\"] = event.testgroupspecsampletype[0];\r\n        const inputParam = {\r\n            testgroupspecsampletype: event.testgroupspecsampletype[0],\r\n            userInfo: this.props.Login.userInfo\r\n        };\r\n        this.props.getTestGroupComponentDetails(inputParam, masterData, this.searchRef);\r\n    }\r\n\r\n    deleteTest = (deleteParam) => {\r\n        const masterData = this.props.Login.masterData;\r\n        const treeVersionTemplateIndex = masterData[\"TreeVersionTemplate\"].findIndex(\r\n            x => x[\"ntreeversiontempcode\"] === masterData.selectedNode[\"ntreeversiontempcode\"]);\r\n\r\n        const templateVersionStatus = masterData[\"TreeVersionTemplate\"][treeVersionTemplateIndex].ntransactionstatus\r\n        if (templateVersionStatus === transactionStatus.RETIRED) {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTEDTEMPLATEISRETIRED\" }));\r\n        }\r\n        else {\r\n            const testgroupspecification = masterData.SelectedSpecification;\r\n            if (testgroupspecification.napprovalstatus === transactionStatus.DRAFT\r\n                || testgroupspecification.napprovalstatus === transactionStatus.CORRECTION) {\r\n                const testgrouptest = deleteParam.props.testgrouptest;\r\n                const inputParam = {\r\n                    inputData: {\r\n                        testgrouptest,\r\n                        userinfo: this.props.Login.userInfo,\r\n                        testgroupspecification,\r\n                        ntreeversiontempcode: deleteParam.filterData.ntreeversiontempcode.value\r\n                    },\r\n                    classUrl: \"testgroup\",\r\n                    operation: \"delete\",\r\n                    methodUrl: \"Test\",\r\n                    screenName: \"IDS_TEST\",\r\n                    postParam: {\r\n                        inputListName: \"TestGroupTest\", selectedObject: \"SelectedTest\", primaryKeyField: \"ntestgrouptestcode\",\r\n                        primaryKeyValue: testgrouptest.ntestgrouptestcode,\r\n                        fetchUrl: \"testgroup/getTestGroupTest\", fecthInputObject: { userinfo: this.props.Login.userInfo },\r\n                        masterData, searchFieldList, unchangeList: [\"TestGroupSpecification\", \"SelectedSpecification\",\r\n                            \"SampleType\", \"TreeVersionTemplate\", \"ProductCategory\", \"SelectedTest\", \"Product\",\r\n                            \"AgaramTree\", \"OpenNodes\", \"selectedNode\", \"FocusKey\", \"ActiveKey\", \"SelectedComponent\", \"TestGroupSpecSampleType\"]//, isSingleSelect: true\r\n                    }\r\n                }\r\n\r\n                if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, deleteParam.ncontrolCode)) {\r\n                    const updateInfo = {\r\n                        typeName: DEFAULT_RETURN,\r\n                        data: {\r\n                            loadEsign: true, screenData: { inputParam, masterData },\r\n                            openModal: true, screenName: \"IDS_TEST\", operation: \"delete\", selectedRecord: {}\r\n                        }\r\n                    }\r\n                    this.props.updateStore(updateInfo);\r\n                } else {\r\n                    this.props.crudMaster(inputParam, masterData, \"openModal\", {});\r\n                }\r\n            } else {\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_SPECIFICATIONSTATUSMUSTBEDRAFTCORRECTION\" }));\r\n            }\r\n        }\r\n    }\r\n\r\n    closeModal = () => {\r\n        let loadEsign = this.props.Login.loadEsign;\r\n        let openModal = this.props.Login.openModal;\r\n        let selectedRecord = this.props.Login.selectedRecord;\r\n        if (loadEsign) {\r\n            if (this.props.Login.operation === \"delete\" || this.props.Login.operation === \"Default\"\r\n                || this.props.Login.operation === 'approve' || this.props.Login.operation === 'complete') {\r\n                loadEsign = false;\r\n                openModal = false;\r\n                selectedRecord = {};\r\n            } else {\r\n                loadEsign = false;\r\n                selectedRecord[\"agree\"] = 4;\r\n                selectedRecord['esignpassword'] = \"\"\r\n                selectedRecord['esigncomments'] = \"\"\r\n                selectedRecord['esignreason'] = \"\"\r\n\r\n            }\r\n        } else {\r\n            openModal = false;\r\n            selectedRecord = {};\r\n        }\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { openModal, loadEsign, selectedRecord }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    onInputOnChange = (event, caseNo, optional) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        switch (caseNo) {\r\n            case 1:\r\n                if (event.target.type === 'checkbox') {\r\n                    selectedRecord[event.target.name] = event.target.checked === true ? optional[0] : optional[1];\r\n                } else if (event.target.type === 'radio') {\r\n                    selectedRecord[event.target.name] = optional;\r\n                    // selectedRecord[\"sfilename\"] = \"\";\r\n                } else {\r\n                    selectedRecord[event.target.name] = event.target.value;\r\n                }\r\n                this.setState({ selectedRecord });\r\n                break;\r\n\r\n            case 2:\r\n                selectedRecord[event.target.name] = event.target.value;\r\n\r\n                const indexKey = Object.keys(optional)[0];\r\n                const value = Object.values(optional)[0];\r\n                const treeData = {\r\n                    ntreeversiontempcode: value.ntreeversiontempcode,\r\n                    npositioncode: value.nlevelno - 1,\r\n                    sleveldescription: event.target.value,\r\n                    ntemptranstestgroupcode: value.ntemptranstestgroupcode,\r\n                    nformcode: 62,\r\n                    schildnode: \"\",\r\n                    nnextchildcode: value.schildnode !== null ? value.schildnode : -1,\r\n                    ntemplatemanipulationcode: value.ntemplatemanipulationcode,\r\n                    isreadonly: value.ntemplatemanipulationcode > 0 ? true : false,\r\n                    slevelformat: value.slevelformat\r\n                }\r\n                let treetemplatemanipulation = selectedRecord.treetemplatemanipulation || [];\r\n                treetemplatemanipulation[indexKey] = treeData;\r\n                selectedRecord[\"treetemplatemanipulation\"] = treetemplatemanipulation;\r\n                this.setState({ selectedRecord });\r\n                break;\r\n\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    onEsignInputOnChange = (event) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if (event.target.type === 'checkbox') {\r\n            selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\r\n        } else {\r\n            selectedRecord[event.target.name] = event.target.value;\r\n        }\r\n        this.setState({ selectedRecord });\r\n    }\r\n    //Rules Engine Functions Start\r\n    ruleflowobject() {\r\n        let object = {}\r\n        const labelColor = ['#e63109', '#2fb47d', '#eaa203', '#6554c0'];\r\n        const labelBGColor = ['#fcd7cd', '#e5f8f1', '#fcf3dd', '#e7e6f5'];\r\n        const borderColor = ['#e6310', '#c6f6e4', '#fde2a4', '#cbc5f7'];\r\n        let groupList = this.props.Login.masterData.SelectedRulesEngine['jsondata']\r\n        let groupListJoins = this.props.Login.masterData.SelectedRulesEngine['jsonuidata'] &&\r\n            this.props.Login.masterData.SelectedRulesEngine['jsonuidata']['groupListJoins']\r\n        let children = []\r\n        let parent = []\r\n        let grandparent = []\r\n        groupList.map((groupobject, index) => {\r\n            if (groupobject.hasOwnProperty('button_or')) {\r\n                children = []\r\n                let rulesList = groupobject['button_or']\r\n                rulesList.map((rule, index) => {\r\n                    children.push(\r\n                        {\r\n                            id: index, label: <>{(rule['stestname'].label) //+ \" -> \" + (this.props.intl.formatMessage({ id: \"IDS_WITH\" })) \r\n                            + \" -> \" +\r\n                                (rule['orderresulttype'].label) + \" -> \" +\r\n                                (rule['ssymbolname'].label) + \" -> \" + ( rule['ndiagnosticcasecode']&& rule['ndiagnosticcasecode'].label ||\r\n                                rule['ngradecode']&&rule['ngradecode'].label||  rule['ntestgrouptestnumericcode']&&rule['ntestgrouptestnumericcode']||\r\n                                rule['ntestgrouptestcharcode']&&rule['ntestgrouptestcharcode']|| rule['ntestgrouptestpredefcode']&&rule['ntestgrouptestpredefcode'].label)\r\n\r\n                            }</>\r\n                        }\r\n                    )\r\n                })\r\n                parent.push({ id: index, label: <div className=\"btn btn-primary\" >{this.props.intl.formatMessage({ id: \"IDS_OR\" })}</div>, children: children })\r\n            }\r\n            if (groupobject.hasOwnProperty('button_and')) {\r\n                children = []\r\n                let rulesList = groupobject['button_and']\r\n                rulesList.map((rule, index) => {\r\n                    children.push(\r\n                        {\r\n                            id: index, label: <>{\r\n\r\n                                (rule['stestname'].label) //+ \" -> \" + (this.props.intl.formatMessage({ id: \"IDS_WITH\" })) \r\n                                + \" -> \" +\r\n                                (rule['orderresulttype'].label) + \" -> \" +\r\n                                (rule['ssymbolname'].label) + \" -> \" +  ( rule['ndiagnosticcasecode']&& rule['ndiagnosticcasecode'].label ||\r\n                                rule['ngradecode']&&rule['ngradecode'].label||  rule['ntestgrouptestnumericcode']&&rule['ntestgrouptestnumericcode']||\r\n                                rule['ntestgrouptestcharcode']&&rule['ntestgrouptestcharcode']|| rule['ntestgrouptestpredefcode']&&rule['ntestgrouptestpredefcode'].label)\r\n\r\n\r\n                            }</>\r\n                        }\r\n                    )\r\n                })\r\n                parent.push({ id: index, label: <div className=\"btn btn-primary\" >{this.props.intl.formatMessage({ id: \"IDS_AND\" })}</div>, children: children })\r\n            }\r\n            if (groupobject.hasOwnProperty('button_not_button_and')) {\r\n                children = []\r\n                let rulesList = groupobject['button_not_button_and']\r\n                rulesList.map((rule, index) => {\r\n                    children.push(\r\n                        {\r\n                            id: index, label: <>{(rule['stestname'].label) //+ \" -> \" + (this.props.intl.formatMessage({ id: \"IDS_WITH\" })) \r\n                            + \" -> \" +\r\n                                (rule['orderresulttype'].label) + \" -> \" +\r\n                                (rule['ssymbolname'].label) + \" -> \" +  ( rule['ndiagnosticcasecode']&& rule['ndiagnosticcasecode'].label ||\r\n                                rule['ngradecode']&&rule['ngradecode'].label||  rule['ntestgrouptestnumericcode']&&rule['ntestgrouptestnumericcode']||\r\n                                rule['ntestgrouptestcharcode']&&rule['ntestgrouptestcharcode']|| rule['ntestgrouptestpredefcode']&&rule['ntestgrouptestpredefcode'].label)\r\n\r\n                            }</>\r\n                        }\r\n                    )\r\n                })\r\n                let notarray = [{ id: index, label: <div className=\"btn btn-primary\" >{this.props.intl.formatMessage({ id: \"IDS_AND\" })}</div>, children: children }]\r\n                parent.push({ id: index, label: <div className=\"btn btn-primary\" >{this.props.intl.formatMessage({ id: \"IDS_NOT\" })}</div>, children: notarray })\r\n            }\r\n            if (groupobject.hasOwnProperty('button_not_button_or')) {\r\n                children = []\r\n                let rulesList = groupobject['button_not_button_or']\r\n                rulesList.map((rule, index) => {\r\n                    children.push(\r\n                        {\r\n                            id: index, label: <>{(rule['stestname'].label)// + \" -> \" + (this.props.intl.formatMessage({ id: \"IDS_WITH\" })) \r\n                            + \" -> \" +\r\n                                (rule['orderresulttype'].label) + \" -> \" +\r\n                                (rule['ssymbolname'].label) + \" -> \" +  ( rule['ndiagnosticcasecode']&& rule['ndiagnosticcasecode'].label ||\r\n                                rule['ngradecode']&&rule['ngradecode'].label||  rule['ntestgrouptestnumericcode']&&rule['ntestgrouptestnumericcode']||\r\n                                rule['ntestgrouptestcharcode']&&rule['ntestgrouptestcharcode']|| rule['ntestgrouptestpredefcode']&&rule['ntestgrouptestpredefcode'].label)\r\n\r\n                            }</>\r\n                        }\r\n                    )\r\n                })\r\n                let notarray = [{ id: index, label: <div className=\"btn btn-primary\" >{this.props.intl.formatMessage({ id: \"IDS_OR\" })}</div>, children: children }]\r\n                parent.push({ id: index, label: <div className=\"btn btn-primary\" >{this.props.intl.formatMessage({ id: \"IDS_NOT\" })}</div>, children: notarray })\r\n            }\r\n        })\r\n\r\n        if (groupListJoins !== undefined) {\r\n            groupListJoins.map((join, index) => {\r\n                let parentjoins = []\r\n                if (join.hasOwnProperty('button_or') && join['button_or'] === true) {\r\n                    let notarray = []\r\n                    parentjoins.push(parent[index])\r\n                    parentjoins.push(parent[index + 1])\r\n                    if (join.hasOwnProperty('button_not') && join['button_not'] === true) {\r\n                        notarray = [{\r\n                            id: index, label: <div className=\"btn btn-primary\" >\r\n                                {this.props.intl.formatMessage({ id: \"IDS_OR\" })} </div>// 'button_or'\r\n                            , children: parentjoins\r\n                        }]\r\n                        grandparent.push({\r\n                            id: index, label: <div className=\"btn btn-primary\" >\r\n                                {this.props.intl.formatMessage({ id: \"IDS_NOT\" })} </div>// 'button_or'\r\n                            , children: notarray\r\n                        })\r\n                    }\r\n                    else {\r\n                        grandparent.push({\r\n                            id: index, label: <div className=\"btn btn-primary\" >\r\n                                {this.props.intl.formatMessage({ id: \"IDS_OR\" })} </div>// 'button_or'\r\n                            , children: parentjoins\r\n                        })\r\n                    }\r\n                }\r\n                if (join.hasOwnProperty('button_and') && join['button_and'] === true) {\r\n                    let notarray = []\r\n                    parentjoins.push(parent[index])\r\n                    parentjoins.push(parent[index + 1])\r\n                    if (join.hasOwnProperty('button_not') && join['button_not'] === true) {\r\n                        notarray = [{\r\n                            id: index, label: <div className=\"btn btn-primary\" >\r\n                                {this.props.intl.formatMessage({ id: \"IDS_AND\" })} </div>// 'button_or'\r\n                            , children: parentjoins\r\n                        }]\r\n                        grandparent.push({\r\n                            id: index, label: <div className=\"btn btn-primary\" >\r\n                                {this.props.intl.formatMessage({ id: \"IDS_NOT\" })} </div>// 'button_or'\r\n                            , children: notarray\r\n                        })\r\n                    }\r\n                    else {\r\n                        grandparent.push({\r\n                            id: index, label: <div className=\"btn btn-primary\" >{this.props.intl.formatMessage({ id: \"IDS_AND\" })}</div>// 'button_and'\r\n                            , children: parentjoins\r\n                        })\r\n                    }\r\n                }\r\n            })\r\n        }\r\n\r\n        object = grandparent.length > 0 ?\r\n            {\r\n                id: 0,\r\n                label: <div className=\"btn btn-primary\" >{this.props.Login.masterData.SelectedRulesEngine.srulename} </div>,\r\n                children: grandparent\r\n            }\r\n            : {\r\n                id: 0,\r\n                label: <div className=\"btn btn-primary\" >{this.props.Login.masterData.SelectedRulesEngine.srulename} </div>,\r\n                children: parent\r\n            }\r\n        return object\r\n    }\r\n    onTabChangeRulesEngine = (tabProps) => {\r\n        let masterData = this.props.Login.masterData && this.props.Login.masterData\r\n        masterData['activeTabName'] = tabProps.activeTabName;\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { masterData }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n    tabDetailRulesEngine = () => {\r\n        let masterData = this.props.Login.masterData || {};\r\n        let jsonuidata = this.props.Login.masterData.SelectedRulesEngine && this.props.Login.masterData.SelectedRulesEngine['jsonuidata'] \r\n        const tabMap = new Map();\r\n        {\r\n            tabMap.set(\"IDS_Test\",\r\n                <DataGrid\r\n                    key=\"testsectionkey\"\r\n                    primaryKeyField=\"nresultusedmaterialcode\"\r\n                    expandField=\"expanded\"\r\n                    handleExpandChange={this.handleExpandChange} \r\n                    dataResult={this.props.Login.masterData.SelectedRulesEngine &&\r\n                        this.props.Login.masterData.SelectedRulesEngine && process(\r\n                            sortData(this.props.Login.masterData.SelectedRulesEngine['jsonuidata']['testInitiateTests'], \"descending\", \"npkAtestparametercode\")\r\n                            || [],\r\n                            this.state.dataStatetestinitiate\r\n                                ? this.state.dataStatetestinitiate : { skip: 0, take: 10 })} \r\n                    dataState={this.state.dataStatetestinitiate\r\n                        ? this.state.dataStatetestinitiate : { skip: 0, take: 10 }} \r\n                    dataStateChange={this.dataStateChangetestinitiateTab}\r\n\r\n                    extractedColumnList={[\r\n                        { \"idsName\": \"IDS_TESTNAME\", \"dataField\": \"stestsynonym\", \"width\": \"200px\" }\r\n                    ]}\r\n                    controlMap={this.state.controlMap}\r\n                    userRoleControlRights={this.state.userRoleControlRights}\r\n                    pageable={true} \r\n                    scrollable={'scrollable'}\r\n                    hideColumnFilter={false}\r\n                    selectedId={0} \r\n                    deleteParam={{ operation: \"delete\" }} \r\n                    hasChild={true}\r\n                    childMappingField={'ntestgrouptestcode'}\r\n                    childColumnList={[\r\n                        { \"idsName\": \"IDS_TOSITE\", \"dataField\": \"stositename\", \"width\": \"200px\" },\r\n                        { \"idsName\": \"IDS_FROMSITE\", \"dataField\": \"sfromsitename\", \"width\": \"200px\" }\r\n                        \r\n                    ]}\r\n                    childList={this.state.childListMap}\r\n                    activeTabName={\"IDS_Test\"}\r\n                    gridHeight = {'400px'}\r\n                >\r\n                </DataGrid>); \r\n            tabMap.set(\"IDS_COMMENTS\",\r\n            <DataGrid\r\n                key=\"testsectionkey\"\r\n                primaryKeyField=\"nresultusedmaterialcode\" \r\n                handleExpandChange={this.handleExpandChange} \r\n                dataResult={this.props.Login.masterData.SelectedRulesEngine && process(\r\n                    sortData(this.props.Login.masterData.SelectedRulesEngine['jsonuidata']['testCommentsTestsTab'], \"descending\", \"npkBtestparametercode\")\r\n                    || [],\r\n                    this.state.dataState\r\n                        ? this.state.dataState : { skip: 0, take: 10 })} \r\n                dataState={this.state.dataState\r\n                    ? this.state.dataState : { skip: 0, take: 10 }} \r\n                dataStateChange={this.dataStateChange} \r\n                controlMap={this.state.controlMap}\r\n                userRoleControlRights={this.state.userRoleControlRights}\r\n                pageable={true} \r\n                scrollable={'scrollable'}\r\n                hideColumnFilter={false}\r\n                selectedId={0} \r\n                deleteParam={{ operation: \"delete\" }} \r\n                childMappingField={'ntestgrouptestcode'} \r\n                extractedColumnList={[\r\n                    { \"idsName\": \"IDS_DESCRIPTION\", \"dataField\": \"sdescription\", \"width\": \"200px\" },\r\n                    { \"idsName\": \"IDS_RESULTS\", \"dataField\": \"scomments\", \"width\": \"200px\" },\r\n                    { \"idsName\": \"IDS_COMMENTSUBTYPE\", \"dataField\": \"scommentsubtype\", \"width\": \"200px\" }, \r\n                    { \"idsName\": \"IDS_COMMENTTYPE\", \"dataField\": \"scommenttype\", \"width\": \"200px\" } ,\r\n                    { \"idsName\": \"IDS_TESTNAME\", \"dataField\": \"stestsynonym\", \"width\": \"200px\" }   \r\n                ]}\r\n                childList={this.state.childListMap2 && this.state.childListMap2}\r\n                activeTabName={\"IDS_COMMENTS\"}\r\n                gridHeight = {'400px'}\r\n                >\r\n            </DataGrid>\r\n        ); \r\n        tabMap.set(\"IDS_REPEAT\",\r\n        <DataGrid\r\n            key=\"testsectionkey\"\r\n            primaryKeyField=\"nresultusedmaterialcode\"  \r\n            dataResult={this.props.Login.masterData.SelectedRulesEngine && process(\r\n                sortData(this.props.Login.masterData.SelectedRulesEngine['jsonuidata']['testRepeatTestsTab'], \"descending\", \"npkCtestparametercode\")\r\n                || [],\r\n                this.state.dataStaterepeatTab\r\n                    ? this.state.dataStaterepeatTab : { skip: 0, take: 10 })} \r\n            dataState={this.state.dataStaterepeatTab\r\n                ? this.state.dataStaterepeatTab : { skip: 0, take: 10 }} \r\n            dataStateChange={this.dataStateChangeRepeatTab} \r\n            controlMap={this.state.controlMap}\r\n            userRoleControlRights={this.state.userRoleControlRights}\r\n            pageable={true} \r\n            scrollable={'scrollable'}\r\n            hideColumnFilter={false}\r\n            selectedId={0} \r\n            deleteParam={{ operation: \"delete\" }}  \r\n            extractedColumnList={[ \r\n                { \"idsName\": \"IDS_TESTNAME\", \"dataField\": \"stestsynonym\", \"width\": \"200px\" }   \r\n            ]} \r\n            activeTabName={\"IDS_COMMENTS\"}\r\n            gridHeight = {'400px'}\r\n            >\r\n        </DataGrid>\r\n    ); \r\n    tabMap.set(\"IDS_ENFORCERESULT\",\r\n    <DataGrid\r\n        key=\"testsectionkey\"\r\n        primaryKeyField=\"nresultusedmaterialcode\"  \r\n        dataResult={this.props.Login.masterData.SelectedRulesEngine && process(\r\n            sortData(this.props.Login.masterData.SelectedRulesEngine['jsonuidata']['testenforceTestsTab'], \"descending\", \"npkDtestparametercode\")\r\n            || [],\r\n            this.state.dataStateChangenforceTab\r\n                ? this.state.dataStateChangenforceTab : { skip: 0, take: 10 })} \r\n        dataState={this.state.dataStateChangenforceTab\r\n            ? this.state.dataStateChangenforceTab : { skip: 0, take: 10 }} \r\n        dataStateChange={this.dataStateChangenforceTab} \r\n        controlMap={this.state.controlMap}\r\n        userRoleControlRights={this.state.userRoleControlRights}\r\n        pageable={true} \r\n        scrollable={'scrollable'}\r\n        hideColumnFilter={false}\r\n        selectedId={0} \r\n        deleteParam={{ operation: \"delete\" }}  \r\n        extractedColumnList={[ \r\n            { \"idsName\": \"IDS_TESTNAME\", \"dataField\": \"stestsynonym\", \"width\": \"200px\" }, \r\n            { \"idsName\": \"IDS_PARAMETERS\", \"dataField\": \"sparametersynonym\", \"width\": \"200px\" },\r\n            { \"idsName\": \"IDS_PASSFLAG\", \"dataField\": \"sgradename\", \"width\": \"200px\" },\r\n            { \"idsName\": \"IDS_RESULTS\", \"dataField\": \"senforcestatuscomment\", \"width\": \"200px\" }\r\n        ]} \r\n        activeTabName={\"IDS_COMMENTS\"}\r\n        gridHeight = {'400px'}\r\n        >\r\n    </DataGrid>\r\n); \r\n        }\r\n        return tabMap;\r\n    }\r\n    dataStateChange = (event, ntestgrouptestparametercode) => {\r\n        let dataStateObject = this.state.dataStateObject || {}\r\n        if (ntestgrouptestparametercode) {\r\n            dataStateObject = {\r\n                ...dataStateObject,\r\n                [ntestgrouptestparametercode]: event.dataState\r\n            }\r\n            this.setState({\r\n                dataStateObject\r\n            });\r\n        }\r\n        else {\r\n            this.setState({\r\n                dataState: event.dataState\r\n            });\r\n        }\r\n\r\n    }\r\n    dataStateChangetestRepeat = (event) => {\r\n        this.setState({\r\n            //  dataResult: process(this.props.Login.queryData, event.dataState),\r\n            dataStatetestRepeat: event.dataState\r\n        });\r\n    }\r\n    dataStateChangetestEnforce = (event) => {\r\n        this.setState({\r\n            //  dataResult: process(this.props.Login.queryData, event.dataState),\r\n            dataStatetestEnforce: event.dataState\r\n        });\r\n    }\r\n    dataStateChangetestinitiateTab = (event) => {\r\n        this.setState({\r\n            //  dataResult: process(this.props.Login.queryData, event.dataState),\r\n            dataStatetestinitiate: event.dataState\r\n        });\r\n    }\r\n    dataStateChangeRepeatTab = (event) => {\r\n        this.setState({\r\n            //  dataResult: process(this.props.Login.queryData, event.dataState),\r\n            dataStaterepeatTab: event.dataState\r\n        });\r\n    } \r\n    dataStateChangenforceTab = (event) => {\r\n        this.setState({\r\n            //  dataResult: process(this.props.Login.queryData, event.dataState),\r\n            dataStateChangenforceTab: event.dataState\r\n        });\r\n    } \r\n    dataStateChangeMain = (event) => {\r\n        this.setState({\r\n            dataResultMain: process(this.props.Login.queryDataMain, event.dataStateMain),\r\n            dataStateMain: event.dataStateMain\r\n        });\r\n    }\r\n    ConfirmDeleteRule = (deleteId) => {\r\n        if(this.props.Login.masterData['RulesEngine']&&this.props.Login.masterData['RulesEngine'].length>0){ \r\n        this.confirmMessage.confirm(\"deleteMessage\", this.props.intl.formatMessage({ id: \"IDS_DELETE\" }), this.props.intl.formatMessage({ id: \"IDS_DEFAULTCONFIRMMSG\" }),\r\n            this.props.intl.formatMessage({ id: \"IDS_OK\" }), this.props.intl.formatMessage({ id: \"IDS_CANCEL\" }),\r\n            () => this.handleClickDelete(this.props.Login.masterData, deleteId, \"openModal\"));\r\n        }\r\n        else{\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTRULETODELETE\" })); \r\n        }\r\n    }\r\n    handleClickDelete(masterData, ncontrolcode//, modalName\r\n    ) {\r\n      \r\n        const fieldArray = [];\r\n        const inputParam = {\r\n            methodUrl: \"TestGroupRulesEngine\",\r\n            classUrl: \"testgrouprulesengine\",\r\n            inputData: {\r\n                \"ntestgrouptestcode\": this.props.Login.masterData.SelectedTest.ntestgrouptestcode,\r\n                \"ntestgrouprulesenginecode\": this.props.Login.masterData.SelectedRulesEngine.ntestgrouprulesenginecode,\r\n                \"userinfo\": this.props.Login.userInfo,\r\n            },\r\n            operation: \"delete\", //postParam,\r\n            displayName: \"RulesEngine\",\r\n        }\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, ncontrolcode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData },// [modalName]: true,\r\n                    operation: 'delete', screenName: \"IDS_RULESENGINE\", id: \"RulesEngine\"\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.crudMaster(inputParam, masterData, undefined\r\n            );\r\n        }\r\n\r\n    }\r\n\r\n\r\n    approveVersion(masterData, nflag, ncontrolcode//, modalName\r\n    ) {\r\n        if (masterData['RulesEngine']&&masterData['RulesEngine'].length > 0) {\r\n            const fieldArray = [];\r\n            const inputParam = {\r\n                methodUrl: \"TestGroupRulesEngine\",\r\n                classUrl: \"testgrouprulesengine\",\r\n                inputData: {\r\n                    \"ntestgrouptestcode\": this.props.Login.masterData.SelectedTest.ntestgrouptestcode,\r\n                    \"ntestgrouprulesenginecode\": this.props.Login.masterData.SelectedRulesEngine.ntestgrouprulesenginecode,\r\n                    \"userinfo\": this.props.Login.userInfo, nflag: nflag\r\n                },\r\n                operation: \"approve\", //postParam,\r\n                displayName: \"RulesEngine\",\r\n            }\r\n            if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, ncontrolcode)) {\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        loadEsign: true, screenData: { inputParam, masterData },// [modalName]: true,\r\n                        operation: 'delete', screenName: \"IDS_RULESENGINE\", id: \"RulesEngine\"\r\n                    }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n            else {\r\n                this.props.crudMaster(inputParam, masterData, undefined\r\n                );\r\n            }\r\n        }\r\n        else {\r\n            if(nflag==1)\r\n            { \r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTRULETOAPPROVE\" }));  \r\n            }\r\n            else\r\n            { \r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTRULETORETIRE\" }));  \r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    closeModalShow = () => {\r\n        let openModalPopup = this.props.Login.openModalPopup;\r\n        let selectedRecord = this.props.Login.selectedRecord || {};\r\n        selectedRecord['srulename'] = \"\"\r\n        openModalPopup = false;\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { openModalPopup, selectedRecord }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    onsavevalidation = (selectedRecord) => {\r\n        let grouplist = selectedRecord[\"groupList\"]\r\n        let hasAll = true;\r\n        for (var i = 0; i < grouplist.length; i++) {\r\n            let rules = grouplist[i]\r\n            for (var j = 0; j < rules.length; j++) {\r\n                let props = []\r\n                if (rules[j][\"orderresulttype\"] && rules[j][\"orderresulttype\"].value === 1) {\r\n                    props = [\"stestname\", \"ssymbolname\", \"orderresulttype\", \"ndiagnosticcasecode\"];\r\n                }\r\n                else if (rules[j][\"orderresulttype\"] && rules[j][\"orderresulttype\"].value === 3) {\r\n                    if(rules[j][\"stestname\"] && rules[j][\"stestname\"]['item']['nparametertypecode'] === parameterType.PREDEFINED)\r\n                    {\r\n                        props = [\"stestname\", \"ssymbolname\", \"orderresulttype\", \"ntestgrouptestpredefcode\"]; \r\n\r\n                    }\r\n                    else if(rules[j][\"stestname\"] && rules[j][\"stestname\"]['item']['nparametertypecode'] === parameterType.CHARACTER)\r\n                    {\r\n                        props = [\"stestname\", \"ssymbolname\", \"orderresulttype\", \"ntestgrouptestcharcode\"]; \r\n\r\n                    }\r\n                    else if (rules[j][\"stestname\"] && rules[j][\"stestname\"]['item']['nparametertypecode'] === parameterType.NUMERIC)\r\n                    {\r\n                        props = [\"stestname\", \"ssymbolname\", \"orderresulttype\", \"ntestgrouptestnumericcode\"]; \r\n\r\n                    } \r\n                    else\r\n                    {\r\n                        if (rules[j][\"orderresulttype\"] && rules[j][\"orderresulttype\"].value === 1) {\r\n                            props = [\"stestname\", \"ssymbolname\", \"orderresulttype\", \"ndiagnosticcasecode\"];\r\n                        }\r\n                        else {\r\n                            props = [\"stestname\", \"ssymbolname\", \"orderresulttype\", \"ngradecode\"];\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    props = [\"stestname\", \"ssymbolname\", \"orderresulttype\", \"ngradecode\"];\r\n                }\r\n                hasAll = props.every(prop => rules[j].hasOwnProperty(prop));\r\n                if (hasAll === false) {\r\n                    break;\r\n                }\r\n            }\r\n            if (hasAll === false) {\r\n                break;\r\n            }\r\n        }\r\n        return hasAll\r\n    }\r\n    save = () => {\r\n        let inputData = [];\r\n        let siteObject = this.props.Login.siteObject || {};\r\n        let testCommentObject = this.props.Login.testCommentObject || {};\r\n        let reportCommentObject = this.props.Login.reportCommentObject || {};\r\n        let PredefinedParameterOptions= this.props.Login.masterData.PredefinedParameterOptions||[]  \r\n\r\n        let testInitiateTests = this.props.Login.testInitiateTests || [];\r\n        let testCommentsTests = this.props.Login.testCommentsTests || [];\r\n        let reportCommentsTests = this.props.Login.reportCommentsTests || [];\r\n \r\n        let testRepeatTests = this.props.Login.testRepeatTests || [];\r\n        let testenforceTests = this.props.Login.testenforceTests || [];\r\n\r\n        const { selectedRecord } = this.state;\r\n        let rules = []\r\n        //  if (selectedRecord[\"nproductcatcode\"]) {\r\n            if(testInitiateTests.length > 0||testCommentsTests.length > 0||testRepeatTests.length > 0||testenforceTests.length > 0){\r\n        if (selectedRecord[\"groupList\"].length > 0) {\r\n            if (this.onsavevalidation(selectedRecord)) {\r\n                if (selectedRecord[\"srulename\"] && selectedRecord[\"srulename\"] !== \"\" && this.props.Login.action !== 'update'\r\n                    && this.props.Login.action !== 'IDS_ADDTESTCOMMENTS' && this.props.Login.action !== 'IDS_ADDREPORTCOMMENTS'\r\n                    && this.props.Login.action !== 'IDS_ADDTEST' && this.props.Login.action !== 'IDS_ADDSITE'\r\n                ) {\r\n\r\n                    if (selectedRecord[\"groupList\"]) {\r\n                        let groupList = [];\r\n                        let outcomeList = {};\r\n                        groupList = selectedRecord[\"groupList\"];\r\n\r\n                        outcomeList['groupList'] = groupList\r\n                        outcomeList['addGroupList'] = this.props.Login.addGroupList\r\n                        outcomeList['testInitiateTests'] = this.props.Login.testInitiateTests && this.props.Login.testInitiateTests\r\n                        outcomeList['testCommentsTests'] = this.props.Login.testCommentsTests && this.props.Login.testCommentsTests\r\n                        outcomeList['testRepeatTests'] = this.props.Login.testRepeatTests && this.props.Login.testRepeatTests\r\n                        outcomeList['testenforceTests'] = this.props.Login.testenforceTests && this.props.Login.testenforceTests\r\n\r\n                        outcomeList['reportCommentsTests'] = this.props.Login.reportCommentsTests && this.props.Login.reportCommentsTests\r\n                        outcomeList['siteObject'] = this.props.Login.siteObject && this.props.Login.siteObject\r\n                        outcomeList['testCommentObject'] = this.props.Login.testCommentObject && this.props.Login.testCommentObject\r\n                        outcomeList['reportCommentObject'] = this.props.Login.reportCommentObject && this.props.Login.reportCommentObject\r\n                        outcomeList['testInitiateSiteTab'] = this.props.Login.masterData.testInitiateSiteTab && this.props.Login.masterData.testInitiateSiteTab\r\n                        outcomeList['testCommentsTestsTab'] = this.props.Login.masterData.testCommentsTestsTab && this.props.Login.masterData.testCommentsTestsTab\r\n                        outcomeList['reportCommentsTestsTab'] = this.props.Login.reportCommentsTestsTab && this.props.Login.reportCommentsTestsTab\r\n                        outcomeList['testRepeatTestsTab'] =  this.props.Login.masterData['testRepeatTestsTab']&& this.props.Login.masterData['testRepeatTestsTab']\r\n                        outcomeList['testenforceTestsTab'] =  this.props.Login.masterData['testenforceTestsTab']&& this.props.Login.masterData['testenforceTestsTab']\r\n                        outcomeList['PredefinedParameterOptions']=PredefinedParameterOptions\r\n                        // outcomeList['nproductcatcode'] = selectedRecord['nproductcatcode']\r\n                        outcomeList['ntestgrouptestcode'] = this.props.Login.masterData.SelectedTest.ntestgrouptestcode\r\n                        // outcomeList['nallottedspeccode'] = selectedRecord['nallottedspeccode']\r\n                        // outcomeList['ncomponentcode'] = selectedRecord['ncomponentcode'] \r\n                        outcomeList['groupListJoins'] = selectedRecord['groupListJoins']\r\n\r\n                        let ruleEngineLayout = []\r\n                        let ruleEngineLayoutObject = []\r\n                        let groupRuleObject = {}\r\n                        groupList.map((List) => {\r\n                            if (List.hasOwnProperty('button_or') && List['button_or'] === true) {\r\n                                if (List.hasOwnProperty('button_not') && List['button_not'] === true) {\r\n                                    groupRuleObject['button_not_button_or'] = List\r\n                                }\r\n                                else {\r\n                                    groupRuleObject['button_or'] = List\r\n                                }\r\n                                // groupRuleObject['button_or'] = List\r\n                                ruleEngineLayout.push(groupRuleObject)\r\n                                groupRuleObject = {}\r\n                            }\r\n                            if (List.hasOwnProperty('button_and') && List['button_and'] === true) {\r\n                                if (List.hasOwnProperty('button_not') && List['button_not'] === true) {\r\n                                    groupRuleObject['button_not_button_and'] = List\r\n                                }\r\n                                else {\r\n                                    groupRuleObject['button_and'] = List\r\n                                }\r\n                                //  groupRuleObject['button_and'] = List\r\n                                ruleEngineLayout.push(groupRuleObject)\r\n                                groupRuleObject = {}\r\n                            }\r\n                        })\r\n                        ruleEngineLayoutObject = groupList.hasOwnProperty('button_or') && groupList['button_or'] === true ?\r\n                            {\r\n                                'button_or': ruleEngineLayout\r\n                            } : {\r\n                                'button_and': ruleEngineLayout\r\n                            }\r\n                        console.log('savelist--->', JSON.stringify(ruleEngineLayoutObject))\r\n                        //  inputData['nproductcatcode'] = this.props.Login.masterData.SelectedProductCategory.nproductcatcode\r\n                        //  inputData['nproductcatcode'] = selectedRecord['nproductcatcode'].value\r\n                        inputData['ntestgrouptestcode'] = this.props.Login.masterData.SelectedTest.ntestgrouptestcode\r\n                        // inputData['nallottedspeccode'] = selectedRecord['nallottedspeccode'].value\r\n                        // inputData['ncomponentcode'] = selectedRecord['ncomponentcode'].value\r\n                        inputData['srulename'] = selectedRecord['srulename']\r\n                        inputData['outcomeList'] = JSON.stringify(outcomeList)\r\n                        inputData['jsondata'] = JSON.stringify(ruleEngineLayout)\r\n                        inputData['userinfo'] = this.props.Login.userInfo\r\n                        if (this.props.Login.operation === 'update') {\r\n                            inputData['ntestgrouprulesenginecode'] = this.props.Login.masterData.SelectedRulesEngine['ntestgrouprulesenginecode']\r\n                        }\r\n                        const inputParam = {\r\n                            classUrl: \"testgrouprulesengine\",\r\n                            methodUrl: \"TestGroupRulesEngine\",\r\n                            displayName: this.props.Login.inputParam.displayName,\r\n                            inputData: inputData,\r\n                            operation: this.props.Login.operation === 'create' ? 'create' : 'update'\r\n                        }\r\n                        this.props.crudMaster(inputParam, this.props.Login.masterData, \"openPortalModal\");\r\n                    }\r\n                    else {\r\n                        toast.info(this.props.intl.formatMessage({ id: \"IDS_PLEASEADDRULE\" }));\r\n                    }\r\n\r\n                }\r\n                else {\r\n                    selectedRecord['srulename'] = selectedRecord['srulenamecopy'] || \"\"\r\n                    const updateInfo = {\r\n                        typeName: DEFAULT_RETURN,\r\n                        data: { openModalPopup: true, selectedRecord, action: \"IDS_SAVERULEMODAL\", openmodalsavePopup: true }\r\n                    }\r\n                    this.props.updateStore(updateInfo);\r\n                    //   toast.info(this.props.intl.formatMessage({ id: \"IDS_ENTERRULESENGINENAME\" }));\r\n\r\n                }\r\n            } else {\r\n                toast.info(this.props.intl.formatMessage({ id: \"IDS_COMPLETETHERULETOSAVE\" }));\r\n            }\r\n        }\r\n        else {\r\n            toast.info(this.props.intl.formatMessage({ id: \"IDS_ATLEASTADDONERULE\" }));\r\n        } \r\n    }\r\n    else{\r\n        toast.info(this.props.intl.formatMessage({ id: \"IDS_ATLEASTADDONEOUTCOME\" })); \r\n    }\r\n    } \r\n    onOutcomeChange = (comboData, index) => {\r\n        const { selectedRecord } = this.state;\r\n        selectedRecord[\"outComeList\"] = []\r\n        selectedRecord[\"outComeList\"][index] = []\r\n        selectedRecord[\"outComeList\"][index] = comboData;\r\n        if (selectedRecord[\"outComeList\"][index]) {\r\n            this.setState({\r\n                selectedRecord\r\n            });\r\n        }\r\n    }\r\n    writtenRules = (data) => {\r\n        let selectedRecord = this.state.selectedRecord || {}\r\n        let grouplist = selectedRecord[\"groupList\"]\r\n        let activeTabIndex = this.props.Login.activeTabIndex || 0;\r\n        if (activeTabIndex === 1) {\r\n            let boolean = grouplist.every(x => x.every(y => y['stestname']['item'].ntestgrouptestcode !== data['item'].ntestgrouptestcode)\r\n            )\r\n            if (boolean) {\r\n                return data;\r\n            }\r\n        }\r\n        else {\r\n            let boolean = grouplist.some(x => x.some(y => y['stestname']['item'].ntestgrouptestcode === data['item'].ntestgrouptestcode)\r\n            )\r\n            if (boolean) {\r\n                return data;\r\n            }\r\n        } \r\n    } \r\n    selectedTestRemove = (data) => {\r\n        let activeTabIndex = this.props.Login.activeTabIndex || 0;\r\n        if (activeTabIndex === 1) {\r\n            if (this.props.Login.masterData.SelectedTest.ntestgrouptestcode !== data['item'].ntestgrouptestcode) {\r\n                return data;\r\n            }\r\n        }\r\n        else {\r\n            if (this.props.Login.masterData.SelectedTest.ntestgrouptestcode === data['item'].ntestgrouptestcode) {\r\n                return data;\r\n            }\r\n        } \r\n    }\r\n    outComeTestsRemoveFromRules = (data) => { \r\n        let testInitiateTests=this.props.Login.testInitiateTests;\r\n        let boolean = testInitiateTests.every(x => x['ntestgrouptestcode']!== data['item'].ntestgrouptestcode)\r\n            if (boolean) {\r\n                return data;\r\n            } \r\n    }\r\n    addTest = (tabName) => {\r\n        let openModalPopup = this.props.Login.openModalPopup;\r\n        let action = this.props.Login.action;\r\n        let selectedRecord = this.props.Login.selectedRecord || {}\r\n\r\n        let rulesOption = this.props.Login.masterData.rulesOption || [];\r\n        let testInitiateTestCombo = this.props.Login.masterData.testInitiateTestCombo || [];\r\n        let testCommentsTestCombo = this.props.Login.masterData.testCommentsTestCombo || [];\r\n        let testRepeatTestCombo = this.props.Login.masterData.testRepeatTestCombo || [];\r\n        let testenforceTestCombo = this.props.Login.masterData.testenforceTestCombo || [];\r\n\r\n        if (tabName == 'IDS_Test') {\r\n            testInitiateTestCombo = testInitiateTestCombo.filter(this.selectedTestRemove);\r\n            testInitiateTestCombo = testInitiateTestCombo.filter(this.writtenRules);\r\n        }\r\n        else if (tabName == 'IDS_COMMENTS') {\r\n            let selectedTestTempArray = []\r\n            selectedTestTempArray = testCommentsTestCombo.filter(this.selectedTestRemove);\r\n            testCommentsTestCombo = testCommentsTestCombo.filter(this.writtenRules);\r\n            let duplicatePresent = selectedTestTempArray.some(x => testCommentsTestCombo.some(y => y['item'].ntestgrouptestcode === x['item'].ntestgrouptestcode))\r\n            if (duplicatePresent) {\r\n                testCommentsTestCombo = testCommentsTestCombo\r\n            } else {\r\n                testCommentsTestCombo = [...testCommentsTestCombo, ...selectedTestTempArray];\r\n            }\r\n        }\r\n        else if (tabName == 'IDS_REPEAT') {\r\n            let selectedTestTempArray = []\r\n            selectedTestTempArray = testRepeatTestCombo.filter(this.selectedTestRemove);\r\n            testRepeatTestCombo = testRepeatTestCombo.filter(this.writtenRules);\r\n            let duplicatePresent = selectedTestTempArray.some(x => testRepeatTestCombo.some(y => y['item'].ntestgrouptestcode === x['item'].ntestgrouptestcode))\r\n            if (duplicatePresent) {\r\n                testRepeatTestCombo = testRepeatTestCombo\r\n            } else {\r\n                testRepeatTestCombo = [...testRepeatTestCombo, ...selectedTestTempArray];\r\n            }\r\n        }\r\n        else if (tabName == 'IDS_ENFORCERESULT') {\r\n            let selectedTestTempArray = []\r\n            selectedTestTempArray = testenforceTestCombo.filter(this.selectedTestRemove);\r\n            testenforceTestCombo = testenforceTestCombo.filter(this.writtenRules);\r\n            let duplicatePresent = selectedTestTempArray.some(x => testenforceTestCombo.some(y => y['item'].ntestgrouptestcode === x['item'].ntestgrouptestcode))\r\n            if (duplicatePresent) {\r\n                testenforceTestCombo = testenforceTestCombo\r\n            } else {\r\n                testenforceTestCombo = [...testenforceTestCombo, ...selectedTestTempArray];\r\n            }\r\n        }\r\n        else {\r\n\r\n        }\r\n        selectedRecord['ntestgrouptestcode']&& delete selectedRecord['ntestgrouptestcode']\r\n        selectedRecord['nsampletestcommentscode']&&delete selectedRecord['nsampletestcommentscode']\r\n        selectedRecord['ncommentsubtypecode']&&delete selectedRecord['ncommentsubtypecode']\r\n        selectedRecord['ncommenttypecode']&&delete selectedRecord['ncommenttypecode']\r\n        selectedRecord['sgeneralcomments']&&delete selectedRecord['sgeneralcomments']\r\n        selectedRecord['needoutsource']&&delete selectedRecord['needoutsource']\r\n        selectedRecord['sdescription']&&delete selectedRecord['sdescription']\r\n        selectedRecord['ntestgrouptestparametercode']&&delete selectedRecord['ntestgrouptestparametercode']\r\n        selectedRecord['senforcestatuscomment']&&delete selectedRecord['senforcestatuscomment']\r\n        selectedRecord['ngradecode']&&delete selectedRecord['ngradecode']\r\n        selectedRecord['nfromsitecode']&&delete selectedRecord['nfromsitecode']\r\n        selectedRecord['ntositecode']&&delete selectedRecord['ntositecode']\r\n\r\n        if (this.props.Login.addGroupList.length > 0) {\r\n            action = \"IDS_ADDTEST\"\r\n            openModalPopup = true;\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    openModalPopup,\r\n                    action,\r\n                    selectedRecord,\r\n                    openmodalsavePopup: false,\r\n                    testInitiateTestCombo,\r\n                    testCommentsTestCombo,\r\n                    testRepeatTestCombo,\r\n                    testenforceTestCombo\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        } else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_PLEASEADDRULETOADDOUTCOME\" }));\r\n        }\r\n\r\n    }\r\n    onRuleChange = (comboData, fieldName, groupIndex, index) => {\r\n        let PredefinedParameterOptions= this.props.Login.masterData.PredefinedParameterOptions||[] \r\n        const { selectedRecord } = this.state;\r\n        this.clearSelectedRule(selectedRecord, index); \r\n        if(selectedRecord[\"groupList\"][groupIndex][index][fieldName]&&\r\n            selectedRecord[\"groupList\"][groupIndex][index][fieldName].value!==comboData.value)\r\n        {\r\n            selectedRecord[\"groupList\"][groupIndex][index]['ndiagnosticcasecode']&& delete selectedRecord[\"groupList\"][groupIndex][index]['ndiagnosticcasecode']\r\n            selectedRecord[\"groupList\"][groupIndex][index]['ngradecode']&&delete selectedRecord[\"groupList\"][groupIndex][index]['ngradecode'] \r\n            selectedRecord[\"groupList\"][groupIndex][index]['ntestgrouptestpredefcode']&&delete selectedRecord[\"groupList\"][groupIndex][index]['ntestgrouptestpredefcode'] \r\n            selectedRecord[\"groupList\"][groupIndex][index]['ntestgrouptestcharcode']&&delete selectedRecord[\"groupList\"][groupIndex][index]['ntestgrouptestcharcode'] \r\n            selectedRecord[\"groupList\"][groupIndex][index]['ntestgrouptestnumericcode']&&delete selectedRecord[\"groupList\"][groupIndex][index]['ntestgrouptestnumericcode']  \r\n            selectedRecord[\"groupList\"][groupIndex][index]['ssymbolname']&&delete selectedRecord[\"groupList\"][groupIndex][index]['ssymbolname']   \r\n        } \r\n        selectedRecord[\"groupList\"][groupIndex][index][fieldName] = comboData;  \r\n        if(selectedRecord[\"groupList\"][groupIndex][index]['orderresulttype'])\r\n        {\r\n            if(selectedRecord[\"groupList\"][groupIndex][index]['orderresulttype'].value === 3)\r\n            {\r\n                let nparametertypecode=selectedRecord[\"groupList\"][groupIndex][index][fieldName]['item']['nparametertypecode'] \r\n                 if(nparametertypecode===parameterType.PREDEFINED)\r\n                {\r\n                    this.props.getParameterResultValue(selectedRecord[\"groupList\"][groupIndex][index],groupIndex,index,PredefinedParameterOptions,selectedRecord, this.props.Login.masterData, this.props.Login.userInfo) \r\n                }\r\n                else{\r\n                    if (selectedRecord[\"groupList\"][groupIndex][index][fieldName]) {\r\n                        this.setState({\r\n                            selectedRecord,\r\n                            groupIndex,\r\n                            index\r\n                        });\r\n                    }\r\n                }    \r\n            }      else{\r\n                if (selectedRecord[\"groupList\"][groupIndex][index][fieldName]) {\r\n                    this.setState({\r\n                        selectedRecord,\r\n                        groupIndex,\r\n                        index\r\n                    });\r\n                }\r\n            }  \r\n        }\r\n        else{\r\n            if (selectedRecord[\"groupList\"][groupIndex][index][fieldName]) {\r\n                this.setState({\r\n                    selectedRecord,\r\n                    groupIndex,\r\n                    index\r\n                });\r\n            }\r\n        }  \r\n    }\r\n    onRuleInputChange = (event, fieldName, groupIndex, index) => {\r\n        const { selectedRecord } = this.state;\r\n        selectedRecord[\"groupList\"][groupIndex][index][fieldName] = event.target.value;\r\n        this.setState({ selectedRecord });\r\n    }\r\n    onRuleNumericInputOnChange = (event, fieldName, groupIndex, index) => {\r\n        if(event!==0){\r\n            const { selectedRecord } = this.state;\r\n            selectedRecord[\"groupList\"][groupIndex][index][fieldName] =  event;\r\n            this.setState({ selectedRecord });\r\n        } \r\n    }\r\n    onMasterDataChange = (comboData, fieldName, groupIndex, index) => {\r\n        const { selectedRecord } = this.state;\r\n        let PredefinedParameterOptions= this.props.Login.masterData.PredefinedParameterOptions||[]  \r\n        let isResultorOrderType = [];\r\n        let optionsByRule = [];\r\n        if (this.state.optionsByRule && this.state.optionsByRule.length > 0) {\r\n            optionsByRule = this.state.optionsByRule\r\n        }\r\n        else {\r\n            optionsByRule[groupIndex] = [];\r\n            optionsByRule[groupIndex][index] = [];\r\n        }\r\n        if (this.state.isResultorOrderType && this.state.isResultorOrderType.length > 0) {\r\n            isResultorOrderType = this.state.isResultorOrderType\r\n        }\r\n        else {\r\n            isResultorOrderType[groupIndex] = [];\r\n            isResultorOrderType[groupIndex][index] = [];\r\n        }\r\n        if (fieldName !== 'ndiagnosticcasecode' && fieldName !== 'ngradecode'&&\r\n        fieldName !== 'ntestgrouptestpredefcode' && fieldName !== 'ntestgrouptestcharcode' && fieldName !== 'ntestgrouptestnumericcode') {\r\n            if(selectedRecord[\"groupList\"][groupIndex][index][fieldName]&&\r\n            selectedRecord[\"groupList\"][groupIndex][index][fieldName].value!==comboData.value)\r\n        {\r\n            selectedRecord[\"groupList\"][groupIndex][index]['ndiagnosticcasecode']&& delete selectedRecord[\"groupList\"][groupIndex][index]['ndiagnosticcasecode']\r\n            selectedRecord[\"groupList\"][groupIndex][index]['ngradecode']&&delete selectedRecord[\"groupList\"][groupIndex][index]['ngradecode'] \r\n            selectedRecord[\"groupList\"][groupIndex][index]['ntestgrouptestpredefcode']&&delete selectedRecord[\"groupList\"][groupIndex][index]['ntestgrouptestpredefcode'] \r\n            selectedRecord[\"groupList\"][groupIndex][index]['ntestgrouptestcharcode']&&delete selectedRecord[\"groupList\"][groupIndex][index]['ntestgrouptestcharcode'] \r\n            selectedRecord[\"groupList\"][groupIndex][index]['ntestgrouptestnumericcode']&&delete selectedRecord[\"groupList\"][groupIndex][index]['ntestgrouptestnumericcode']  \r\n            selectedRecord[\"groupList\"][groupIndex][index]['ssymbolname']&&delete selectedRecord[\"groupList\"][groupIndex][index]['ssymbolname']   \r\n        } \r\n        selectedRecord[\"groupList\"][groupIndex][index][fieldName] = comboData; \r\n            if (isResultorOrderType[groupIndex] === undefined) {\r\n                isResultorOrderType[groupIndex] = [];\r\n                isResultorOrderType[groupIndex][index] = [];\r\n            }\r\n            isResultorOrderType[groupIndex][index] = comboData.value\r\n            if (optionsByRule[groupIndex] === undefined) {\r\n                optionsByRule[groupIndex] = [];\r\n                optionsByRule[groupIndex][index] = [];\r\n            }\r\n            if (isResultorOrderType[groupIndex][index] === 1) { \r\n                optionsByRule[groupIndex][index] = this.props.Login.masterData.DiagnosticCaseList\r\n            }\r\n            else if (isResultorOrderType[groupIndex][index] === 3) { \r\n                let nparametertypecode=selectedRecord[\"groupList\"][groupIndex][index]['stestname']['item']['nparametertypecode'] \r\n                 if(nparametertypecode===parameterType.PREDEFINED)\r\n                {\r\n                    this.props.getParameterResultValue(selectedRecord[\"groupList\"][groupIndex][index],groupIndex,index,PredefinedParameterOptions,selectedRecord, this.props.Login.masterData, this.props.Login.userInfo) \r\n                } \r\n                else\r\n                {\r\n                    optionsByRule[groupIndex][index] = this.props.Login.masterData.GradeList \r\n                }\r\n            }\r\n            else { \r\n                optionsByRule[groupIndex][index] = this.props.Login.masterData.GradeList\r\n            }\r\n            this.setState({ selectedRecord, isResultorOrderType, optionsByRule });\r\n        } \r\n        else {\r\n            selectedRecord[\"groupList\"][groupIndex][index][fieldName] = comboData; \r\n            this.setState({ selectedRecord });\r\n        }\r\n    }\r\n    addRule = (type, groupIndex) => {\r\n        const { selectedRecord } = this.state;\r\n        let viewColumnListByRule = this.props.Login.viewColumnListByRule || [];\r\n        const addGroupList = this.props.Login.addGroupList || [];\r\n        const arrayLength = addGroupList[groupIndex];\r\n        addGroupList[groupIndex] = arrayLength + 1;\r\n        selectedRecord[\"groupList\"][groupIndex][arrayLength] = {};\r\n        viewColumnListByRule = this.props.Login.viewColumnList || this.props.Login.databaseviewList;;\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                addGroupList,\r\n                viewColumnListByRule,\r\n                activeTabIndex:0\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n    paneSizeChange = (d) => {\r\n        this.setState({\r\n            splitChangeWidthPercentage: d\r\n        })\r\n    }\r\n\r\n    addComments = () => {\r\n        let openModalPopup = this.props.Login.openModalPopup;\r\n        let action = this.props.Login.action;\r\n        let selectedParameterRulesEngine = this.props.Login.masterData.selectedParameterRulesEngine || [];\r\n        let testparameter = this.props.Login.masterData.testCommentsTestCombo || [];\r\n        let selectedRecord = this.props.Login.selectedRecord || {}\r\n        selectedRecord['ntestgrouptestcode'] = {}\r\n        selectedRecord['ntestgrouptestcode'] = testparameter.filter(x => { return x.value === selectedParameterRulesEngine.ntestgrouptestcode })[0]\r\n\r\n        delete selectedRecord['nsampletestcommentscode']\r\n        delete selectedRecord['ncommentsubtypecode']\r\n        delete selectedRecord['ncommenttypecode']\r\n        delete selectedRecord['sgeneralcomments']\r\n        delete selectedRecord['sdescription']\r\n\r\n\r\n        if (this.props.Login.addGroupList.length > 0) {\r\n            if (this.props.Login.activeTabIndex === 2) {\r\n                action = \"IDS_ADDTESTCOMMENTS\"\r\n            }\r\n            else {\r\n                action = \"IDS_ADDREPORTCOMMENTS\"\r\n            }\r\n            openModalPopup = true;\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    openModalPopup,\r\n                    action,\r\n                    selectedRecord,\r\n                    openmodalsavePopup: false\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        } else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_PLEASEADDRULETOADDOUTCOME\" }));\r\n        }\r\n\r\n    }\r\n    addModalSite = () => {\r\n        let openModalPopup = this.props.Login.openModalPopup;\r\n\r\n        let selectedParameterRulesEngine = this.props.Login.masterData.selectedParameterRulesEngine || [];\r\n        let testparameter = this.props.Login.masterData.testInitiateTestCombo || [];\r\n        let selectedRecord = this.props.Login.selectedRecord || {}\r\n        selectedRecord['ntestgrouptestcode'] = {}\r\n        selectedRecord['ntestgrouptestcode'] = testparameter.filter(x => { return x.value === selectedParameterRulesEngine.ntestgrouptestcode })[0]\r\n        selectedRecord['nfromsitecode']&&delete selectedRecord['nfromsitecode']\r\n        selectedRecord['ntositecode']&&delete selectedRecord['ntositecode']\r\n\r\n        openModalPopup = true;\r\n        let action = this.props.Login.action;\r\n        action = \"IDS_ADDSITE\"\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                selectedRecord,\r\n                openModalPopup,\r\n                action,\r\n                openmodalsavePopup: false\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n    modalsaveClick = () => {\r\n        let needoutsource = this.props.Login.needoutsource || {};\r\n        let selectedRecord = this.state.selectedRecord || {};\r\n        let masterData = this.props.Login.masterData || {};\r\n        let testInitiateTests = this.props.Login.testInitiateTests || [];\r\n        let testCommentsTests = this.props.Login.testCommentsTests || [];\r\n        let testRepeatTests = this.props.Login.testRepeatTests || [];\r\n        let testenforceTests = this.props.Login.testenforceTests || [];\r\n\r\n\r\n        let reportCommentsTests = this.props.Login.reportCommentsTests || [];\r\n\r\n        let siteObject = this.props.Login.siteObject || {};\r\n        let testCommentObject = this.props.Login.testCommentObject || {};\r\n        let reportCommentObject = this.props.Login.reportCommentObject || {};\r\n\r\n\r\n        let testInitiateTestsTemp = [];\r\n        let testCommentsTestsTemp = [];\r\n        let reportCommentsTestsTemp = [];\r\n        let testInitiateSiteTemp = [];\r\n\r\n        let testCommentsTestsTab = this.props.Login.masterData.testCommentsTestsTab || []; \r\n\r\n\r\n        let reportCommentsTestsTab = this.props.Login.reportCommentsTestsTab || [];\r\n        let testInitiateSiteTab = this.props.Login.masterData.testInitiateSiteTab || [];\r\n\r\n        let testInitiateTestOptions = this.props.Login.testInitiateTestOptions || [];\r\n        let testCommentsTestOptions = this.props.Login.testCommentsTestOptions || [];\r\n        let reportCommentsTestOptions = this.props.Login.reportCommentsTestOptions || [];\r\n\r\n\r\n        let testInitiateTestdeletedOptions = this.props.Login.testInitiateTestdeletedOptions || [];\r\n        let testCommentsTestdeletedOptions = this.props.Login.testCommentsTestdeletedOptions || [];\r\n        let reportCommentsTestdeletedOptions = this.props.Login.reportCommentsTestdeletedOptions || [];\r\n\r\n        let updateInfo = {}\r\n        if (this.props.Login.action === 'IDS_ADDTEST') {\r\n            let npkAtestparametercode = 0;\r\n            let npkBtestparametercode = 0;\r\n            let npkCtestparametercode = 0;\r\n            let npkDtestparametercode = 0;\r\n            if (this.props.Login.activeTabIndex === 1) {\r\n                let isduplicate = {}\r\n                isduplicate = testInitiateTests.filter(x => x.ntestgrouptestcode ===\r\n                    selectedRecord['ntestgrouptestcode'].item['ntestgrouptestcode'])\r\n                if (isduplicate.length === 0) {\r\n                    masterData['testParameter'] = {}\r\n                    npkAtestparametercode = this.props.Login.npkAtestparametercode || 0;\r\n                    npkAtestparametercode++;\r\n                    selectedRecord['ntestgrouptestcode'].item['npkAtestparametercode'] = npkAtestparametercode\r\n                    testInitiateTests.push(selectedRecord['ntestgrouptestcode'].item);\r\n                    masterData['testParameter'] = sortData(testInitiateTests, 'descending', 'npkAtestparametercode')\r\n                    masterData['selectedParameterRulesEngine'] = selectedRecord['ntestgrouptestcode'].item\r\n                    delete selectedRecord['ntestgrouptestcode']\r\n\r\n                }\r\n                else {\r\n                    return toast.warn(this.props.intl.formatMessage({ id: \"IDS_ALREADYEXISTS\" }));\r\n                }\r\n\r\n            }\r\n            if (this.props.Login.activeTabIndex === 2) {\r\n                let isduplicate = {}\r\n                isduplicate = testCommentsTests.filter(x => x.ntestgrouptestcode ===\r\n                    selectedRecord['ntestgrouptestcode'].item['ntestgrouptestcode'])\r\n                if (isduplicate.length === 0) {\r\n                    masterData['testParameterComments'] = {}\r\n                    npkBtestparametercode = this.props.Login.npkBtestparametercode || 0;\r\n                    npkBtestparametercode++;\r\n                    selectedRecord['ntestgrouptestcode'].item['npkBtestparametercode'] = npkAtestparametercode\r\n                    selectedRecord['ntestgrouptestcode'].item['sdescription'] = selectedRecord['sdescription'] ? selectedRecord['sdescription'] : '-'\r\n                    testCommentsTests.push(selectedRecord['ntestgrouptestcode'].item);\r\n                    masterData['testParameterComments'] = sortData(testCommentsTests, 'descending', 'npkBtestparametercode')\r\n                    masterData['selectedParameterRulesEngine'] = selectedRecord['ntestgrouptestcode'].item\r\n                    //delete selectedRecord['ntestgrouptestcode']\r\n                }\r\n                else {\r\n                    return toast.warn(this.props.intl.formatMessage({ id: \"IDS_ALREADYEXISTS\" }));\r\n                }\r\n            }\r\n            if (this.props.Login.activeTabIndex === 3) {\r\n                let isduplicate = {}\r\n                isduplicate = testRepeatTests.filter(x => x.ntestgrouptestcode ===\r\n                    selectedRecord['ntestgrouptestcode'].item['ntestgrouptestcode'])\r\n                if (isduplicate.length === 0) {\r\n                    masterData['testRepeat'] = {}\r\n                    npkCtestparametercode = this.props.Login.npkCtestparametercode || 0;\r\n                    npkCtestparametercode++;\r\n                    selectedRecord['ntestgrouptestcode'].item['npkCtestparametercode'] = npkCtestparametercode\r\n                    selectedRecord['ntestgrouptestcode'].item['nrepeatcountno'] = selectedRecord['nrepeatcountno']?selectedRecord['nrepeatcountno']:1\r\n                    testRepeatTests.push(selectedRecord['ntestgrouptestcode'].item);\r\n                    masterData['testRepeatTestsTab'] = sortData(testRepeatTests, 'descending', 'npkCtestparametercode')\r\n                    masterData['testRepeat'] = sortData(testRepeatTests, 'descending', 'npkCtestparametercode')\r\n                    masterData['selectedParameterRulesEngine'] = selectedRecord['ntestgrouptestcode'].item\r\n                    delete selectedRecord['ntestgrouptestcode']\r\n                }\r\n                else {\r\n                    return toast.warn(this.props.intl.formatMessage({ id: \"IDS_ALREADYEXISTS\" }));\r\n                }\r\n            }\r\n            if (this.props.Login.activeTabIndex === 4) {\r\n                let isduplicate = {}\r\n                isduplicate = testenforceTests.filter(x => x.ntestgrouptestcode ===\r\n                    selectedRecord['ntestgrouptestcode'].item['ntestgrouptestcode'])\r\n                if (isduplicate.length === 0) {\r\n                    masterData['testenforceTests'] = {}\r\n                    npkDtestparametercode = this.props.Login.npkDtestparametercode || 0;\r\n                    npkDtestparametercode++;\r\n                    selectedRecord['ntestgrouptestcode'].item['sparametersynonym'] = selectedRecord['ntestgrouptestparametercode'] && selectedRecord['ntestgrouptestparametercode'].label\r\n                    selectedRecord['ntestgrouptestcode'].item['ngradecode'] = selectedRecord['ngradecode'] && selectedRecord['ngradecode'].value\r\n                    selectedRecord['ntestgrouptestcode'].item['sgradename'] = selectedRecord['ngradecode'] && selectedRecord['ngradecode'].label\r\n                    selectedRecord['ntestgrouptestcode'].item['ntestgrouptestparametercode'] = selectedRecord['ntestgrouptestparametercode'] && selectedRecord['ntestgrouptestparametercode'].value\r\n                    selectedRecord['ntestgrouptestcode'].item['senforcestatuscomment'] = selectedRecord['senforcestatuscomment'] && selectedRecord['senforcestatuscomment']\r\n                    \r\n                    selectedRecord['ntestgrouptestcode'].item['npkDtestparametercode'] = npkDtestparametercode\r\n                    testenforceTests.push(selectedRecord['ntestgrouptestcode'].item);\r\n                    masterData['testenforceTestsTab'] = sortData(testenforceTests, 'descending', 'npkDtestparametercode') \r\n                    masterData['testenforceTests'] = sortData(testenforceTests, 'descending', 'npkDtestparametercode')\r\n                    //  masterData['selectedParameterRulesEngine'] = selectedRecord['ntestgrouptestcode'].item\r\n                    delete selectedRecord['ntestgrouptestcode']\r\n                }\r\n                else {\r\n                    return toast.warn(this.props.intl.formatMessage({ id: \"IDS_ALREADYEXISTS\" }));\r\n                }\r\n            }\r\n            updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    openModalPopup: false,\r\n                    masterData,\r\n                    testInitiateTests,\r\n                    testCommentsTests,\r\n                    reportCommentsTests,\r\n                    npkAtestparametercode,\r\n                    npkBtestparametercode,\r\n                    npkCtestparametercode,\r\n                    testInitiateTestOptions,\r\n                    testInitiateTestdeletedOptions,\r\n                    selectedRecord,\r\n                    testRepeatTests,\r\n                    testenforceTests\r\n                }\r\n            }\r\n        }\r\n        if (selectedRecord['nsampletestcommentscode'] || selectedRecord['sgeneralcomments']\r\n        ) {\r\n            masterData['testComments'] = {}\r\n            let npKAsampletestcommentscode = 0;\r\n            let object = {\r\n                ncommentsubtypecode: selectedRecord['ncommentsubtypecode']['value'],\r\n                scommentsubtype: selectedRecord['ncommentsubtypecode']['label'],\r\n                stestsynonym: selectedRecord['ntestgrouptestcode']['label'], \r\n                ncommenttypecode: selectedRecord['ncommenttypecode']['value'],\r\n                scommenttype: selectedRecord['ncommenttypecode']['label'],\r\n                nsampletestcommentscode: selectedRecord['nsampletestcommentscode'] ? selectedRecord['nsampletestcommentscode'].value : -1,\r\n                // spredefinedname: selectedRecord['nsampletestcommentscode'] ? selectedRecord['nsampletestcommentscode'].label : \"-\",\r\n                // sgeneralcomments: selectedRecord['sgeneralcomments'] ? selectedRecord['sgeneralcomments'] : \"-\",\r\n                scomments:selectedRecord['nsampletestcommentscode']? selectedRecord['nsampletestcommentscode'].label:\r\n                selectedRecord['sgeneralcomments'] ? selectedRecord['sgeneralcomments'] : \"-\",\r\n                sdescription: selectedRecord['sdescription'] ? selectedRecord['sdescription'] : '-'\r\n                , stestparametersynonym: masterData.selectedParameterRulesEngine.stestparametersynonym,\r\n                ntestgrouptestcode: masterData.selectedParameterRulesEngine.ntestgrouptestcode\r\n            }\r\n            if (testCommentObject.hasOwnProperty(masterData.selectedParameterRulesEngine.ntestgrouptestcode)) {\r\n                npKAsampletestcommentscode = this.props.Login.npKAsampletestcommentscode;\r\n                npKAsampletestcommentscode++;\r\n                object = { ...object, npKAsampletestcommentscode: npKAsampletestcommentscode }\r\n                testCommentsTestsTemp = testCommentObject[masterData.selectedParameterRulesEngine.ntestgrouptestcode]\r\n                testCommentsTestsTemp.push(object);\r\n                testCommentsTestsTab.push(object);\r\n                testCommentObject[masterData.selectedParameterRulesEngine.ntestgrouptestcode] = sortData(testCommentsTestsTemp, 'descending', 'npKAsampletestcommentscode')\r\n                delete selectedRecord['nsampletestcommentscode']\r\n                delete selectedRecord['ncommentsubtypecode']\r\n                delete selectedRecord['ncommenttypecode']\r\n                delete selectedRecord['sgeneralcomments']\r\n            }\r\n            else {\r\n                npKAsampletestcommentscode++;\r\n                object = { ...object, npKAsampletestcommentscode: npKAsampletestcommentscode }\r\n                testCommentsTestsTemp.push(object);\r\n                testCommentsTestsTab.push(object);\r\n                testCommentObject[masterData.selectedParameterRulesEngine.ntestgrouptestcode] = sortData(testCommentsTestsTemp, 'descending', 'npKAsampletestcommentscode')\r\n                delete selectedRecord['nsampletestcommentscode']\r\n                delete selectedRecord['ncommentsubtypecode']\r\n                delete selectedRecord['ncommenttypecode']\r\n                delete selectedRecord['sgeneralcomments']\r\n            }\r\n            masterData['testComments'] = testCommentObject\r\n            masterData['testCommentsTestsTab'] = testCommentsTestsTab \r\n            updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    openModalPopup: false,\r\n                    masterData,\r\n                    testCommentObject, \r\n                    npKAsampletestcommentscode,\r\n                    selectedRecord\r\n                }\r\n            }\r\n        }\r\n        if (selectedRecord['nfromsitecode'] && selectedRecord['ntositecode']) {\r\n            if(selectedRecord['nfromsitecode'].value!==selectedRecord['ntositecode'].value){\r\n            masterData['testSite'] = {}\r\n            let siteseqnumber = 0;\r\n            if (siteObject.hasOwnProperty(masterData.selectedParameterRulesEngine.ntestgrouptestcode)) {\r\n                siteseqnumber = this.props.Login.siteseqnumber;\r\n                siteseqnumber++;\r\n                let object = {\r\n                    npksitecode: siteseqnumber, sfromsitename: selectedRecord['nfromsitecode'].label, stositename: selectedRecord['ntositecode'].label\r\n                    , stestparametersynonym: masterData.selectedParameterRulesEngine.stestparametersynonym, ntestgrouptestcode: masterData.selectedParameterRulesEngine.ntestgrouptestcode\r\n                }\r\n                testInitiateSiteTemp = siteObject[masterData.selectedParameterRulesEngine.ntestgrouptestcode]\r\n                testInitiateSiteTemp.push(object);\r\n                testInitiateSiteTab.push(object);\r\n                siteObject[masterData.selectedParameterRulesEngine.ntestgrouptestcode] = sortData(testInitiateSiteTemp, 'descending', 'npksitecode')\r\n                delete selectedRecord['ntestgrouptestcode']\r\n                delete selectedRecord['nfromsitecode'];\r\n                delete selectedRecord['ntositecode'];\r\n\r\n            }\r\n            else {\r\n                siteseqnumber++;\r\n                let object = {\r\n                    npksitecode: siteseqnumber, sfromsitename: selectedRecord['nfromsitecode'].label, stositename: selectedRecord['ntositecode'].label\r\n                    , stestparametersynonym: masterData.selectedParameterRulesEngine.stestparametersynonym, ntestgrouptestcode: masterData.selectedParameterRulesEngine.ntestgrouptestcode\r\n                }\r\n                testInitiateSiteTemp.push(object);\r\n                testInitiateSiteTab.push(object);\r\n                siteObject[masterData.selectedParameterRulesEngine.ntestgrouptestcode] = sortData(testInitiateSiteTemp, 'descending', 'npksitecode')\r\n                delete selectedRecord['ntestgrouptestcode']\r\n                delete selectedRecord['nfromsitecode'];\r\n                delete selectedRecord['ntositecode'];\r\n            }\r\n            masterData['testSite'] = siteObject\r\n            masterData['testInitiateSiteTab'] = testInitiateSiteTab \r\n            updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    openModalPopup: false,\r\n                    masterData,\r\n                    siteObject,\r\n                    siteseqnumber,\r\n                    \r\n                }\r\n            }\r\n        }\r\n        else\r\n        {\r\n             toast.warn(this.props.intl.formatMessage({ id: \"IDS_FROMANDTOSITECANNOTBESAME\" })); \r\n        }\r\n        }\r\n        if (Object.keys(updateInfo).length > 0) {\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n    }\r\n    deletModalSite = (inputparam, action, row) => {\r\n        let temparray = [];\r\n        let index = 0;\r\n\r\n        let testInitiateSiteTab = this.props.Login.masterData.testInitiateSiteTab\r\n        let testCommentsTestsTab = this.props.Login.masterData.testCommentsTestsTab\r\n        let reportCommentsTestsTab = this.props.Login.reportCommentsTestsTab\r\n\r\n\r\n        let siteObject = this.props.Login.siteObject || {};\r\n        let testCommentObject = this.props.Login.testCommentObject || {};\r\n        let reportCommentObject = this.props.Login.reportCommentObject || {};\r\n        let masterData = this.props.Login.masterData || {};\r\n\r\n\r\n\r\n        if (this.props.Login.activeTabIndex === 1) {\r\n            temparray = siteObject[masterData.selectedParameterRulesEngine.ntestgrouptestcode]\r\n            temparray.splice(row['dataIndex'], 1);\r\n            testInitiateSiteTab.splice(row['dataIndex'], 1);\r\n            siteObject[masterData.selectedParameterRulesEngine.ntestgrouptestcode] = temparray\r\n\r\n        }\r\n        if (this.props.Login.activeTabIndex === 2) {\r\n            temparray = testCommentObject[masterData.selectedParameterRulesEngine.ntestgrouptestcode]\r\n            index = temparray.findIndex(x => x.npKAsampletestcommentscode === row['dataItem'].npKAsampletestcommentscode)\r\n            // temparray.splice(row['dataIndex'], 1);\r\n            temparray.splice(index, 1);\r\n            index = testCommentsTestsTab.findIndex(x => x.npKAsampletestcommentscode === row['dataItem'].npKAsampletestcommentscode)\r\n            //   testCommentsTestsTab.splice(row['dataIndex'], 1);\r\n            testCommentsTestsTab.splice(index, 1);\r\n            testCommentObject[masterData.selectedParameterRulesEngine.ntestgrouptestcode] = temparray\r\n        }\r\n        if (this.props.Login.activeTabIndex === 3) {\r\n            temparray = masterData.testRepeat\r\n            temparray.splice(row['dataIndex'], 1);\r\n            reportCommentsTestsTab.splice(row['dataIndex'], 1);\r\n            reportCommentObject[masterData.selectedParameterRulesEngine.ntestgrouptestcode] = temparray\r\n        }\r\n        let updateInfo = {}\r\n        updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                siteObject,\r\n                testCommentObject,\r\n                reportCommentObject,\r\n                testInitiateSiteTab,\r\n                reportCommentsTestsTab,\r\n                testCommentsTestsTab\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n    deleteModalTest = (inputparam, action, row) => {\r\n\r\n        let testInitiateTests = this.props.Login.testInitiateTests || [];\r\n        let testCommentsTests = this.props.Login.testCommentsTests || [];\r\n        let testRepeatTests = this.props.Login.testRepeatTests || [];\r\n        let testenforceTests = this.props.Login.testenforceTests || [];\r\n        let reportCommentsTests = this.props.Login.reportCommentsTests || [];\r\n        let testInitiateSiteTab = this.props.Login.masterData.testInitiateSiteTab \r\n        let testCommentsTestsTab = this.props.Login.masterData.testCommentsTestsTab\r\n        let testRepeatTestsTab = this.props.Login.masterData.testRepeatTestsTab\r\n        let testenforceTestsTab = this.props.Login.masterData.testenforceTestsTab\r\n\r\n        let siteObject = this.props.Login.siteObject || {};\r\n        let testCommentObject = this.props.Login.testCommentObject || {};\r\n        let reportCommentObject = this.props.Login.reportCommentObject || {};\r\n\r\n\r\n        let testInitiateTestOptions = this.props.Login.testInitiateTestOptions || [];\r\n        let testCommentsTestOptions = this.props.Login.testCommentsTestOptions || [];\r\n        let reportCommentsTestOptions = this.props.Login.reportCommentsTestOptions || [];\r\n        let viewColumnListByRule = this.props.Login.viewColumnListByRule || [];\r\n\r\n\r\n        let testInitiateTestdeletedOptions = this.props.Login.testInitiateTestdeletedOptions || [];\r\n        let testCommentsTestdeletedOptions = this.props.Login.testCommentsTestdeletedOptions || [];\r\n        let reportCommentsTestdeletedOptions = this.props.Login.reportCommentsTestdeletedOptions || [];\r\n\r\n        let masterData = this.props.Login.masterData || {};\r\n        let index = 0;\r\n        if (this.props.Login.activeTabIndex === 1) {\r\n           // index = this.props.Login.testInitiateTests.findIndex(x => x.ntestgrouptestcode === masterData.selectedParameterRulesEngine.ntestgrouptestcode)\r\n            index = this.props.Login.testInitiateTests.findIndex(x => x.ntestgrouptestcode === inputparam.testParameter.ntestgrouptestcode)\r\n            testInitiateTests.splice(index, 1);\r\n            // index = testInitiateSiteTab.findIndex(x => x.ntestgrouptestcode === inputparam.testParameter.ntestgrouptestcode)\r\n            // testInitiateSiteTab.splice(index, 1); \r\n            testInitiateSiteTab=testInitiateSiteTab.filter(function( obj ) {\r\n                return obj.ntestgrouptestcode !== inputparam.testParameter.ntestgrouptestcode;\r\n            }) \r\n            delete siteObject[inputparam.testParameter.ntestgrouptestcode]\r\n        }\r\n        if (this.props.Login.activeTabIndex === 2) {\r\n            index = this.props.Login.testCommentsTests.findIndex(x => x.ntestgrouptestcode === inputparam.testParameterComments.ntestgrouptestcode)\r\n            testCommentsTests.splice(index, 1); \r\n            // index =  testCommentsTestsTab.findIndex(x => x.ntestgrouptestcode === inputparam.testParameterComments.ntestgrouptestcode) \r\n            // testCommentsTestsTab.splice(index, 1);\r\n            testCommentsTestsTab=testCommentsTestsTab.filter(function( obj ) {\r\n                return obj.ntestgrouptestcode !== inputparam.testParameterComments.ntestgrouptestcode;\r\n            }) \r\n            delete testCommentObject[inputparam.testParameterComments.ntestgrouptestcode]\r\n        }\r\n        if (this.props.Login.activeTabIndex === 3) {\r\n          //  index = this.props.Login.testRepeatTests.findIndex(x => x.ntestgrouptestcode === masterData.selectedParameterRulesEngine.ntestgrouptestcode) \r\n            index=row['dataIndex'] \r\n            testRepeatTests.splice(index, 1);\r\n            testRepeatTestsTab.splice(index, 1); \r\n        }\r\n        if (this.props.Login.activeTabIndex === 4) {\r\n        //    index = this.props.Login.testenforceTests.findIndex(x => x.ntestgrouptestcode === masterData.selectedParameterRulesEngine.ntestgrouptestcode)  \r\n            index=row['dataIndex']\r\n            testenforceTests.splice(index, 1);\r\n            testenforceTestsTab.splice(index, 1); \r\n        }\r\n        let updateInfo = {}\r\n        updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                testInitiateTests,\r\n                siteObject,\r\n                testCommentObject,\r\n                testCommentsTests,\r\n                reportCommentsTests,\r\n                reportCommentObject,\r\n                masterData:{...masterData,   testCommentsTestsTab,testInitiateSiteTab,\r\n                    testRepeatTestsTab,\r\n                    testenforceTestsTab},\r\n                testRepeatTests,\r\n                testenforceTests,\r\n             \r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n    onmodalComboChange = (comboData, fieldName) => {\r\n        let selectedRecord = this.state.selectedRecord || {};\r\n        let isneedsgeneralcomments = this.state.isneedsgeneralcomments || {}\r\n\r\n        if (fieldName === 'ncommentsubtypecode') {\r\n            if (comboData.value === 6) {\r\n                isneedsgeneralcomments = true\r\n                delete selectedRecord['nsampletestcommentscode']\r\n            }\r\n            else {\r\n                isneedsgeneralcomments = false\r\n                delete selectedRecord['sgeneralcomments']\r\n\r\n            }\r\n        }\r\n        else if (fieldName === 'nproductcatcode') {\r\n            selectedRecord[fieldName] = comboData;\r\n            this.props.getSpecificationTestGroupRulesEngine(selectedRecord, this.props.Login.selectedRecord, true, this.props.Login.masterData, this.props.Login.userInfo)\r\n        }\r\n        else if (fieldName === 'ntestgrouptestcode' && this.state.activeTabIndex === 4) {\r\n\r\n            if (selectedRecord['ntestgrouptestparametercode']) {\r\n                if (selectedRecord[fieldName].value !== comboData.value) {\r\n                    delete selectedRecord['ntestgrouptestparametercode']\r\n                }\r\n            }\r\n            selectedRecord[fieldName] = comboData;\r\n            this.props.getParameterRulesEngine(selectedRecord, this.props.Login.masterData, this.props.Login.userInfo)\r\n\r\n        }\r\n        else if (fieldName === 'nallottedspeccode') {\r\n            selectedRecord[fieldName] = comboData;\r\n            this.props.getComponentTestGroupRulesEngine(selectedRecord, this.props.Login.selectedRecord, true, this.props.Login.masterData, this.props.Login.userInfo)\r\n        }\r\n        if (fieldName === 'nsampletestcommentscode') {\r\n            selectedRecord['sdescription'] = comboData.item.sdescription;\r\n        }\r\n        selectedRecord[fieldName] = comboData;\r\n        this.setState({ selectedRecord, isneedsgeneralcomments });\r\n    }\r\n    getOutcomeDetails = (inputParam) => {\r\n        let masterData = this.props.Login.masterData || {};\r\n        const testParameter = this.state.activeTabIndex === 1 ? inputParam.testParameter : this.state.activeTabIndex === 2 ?\r\n            inputParam.testParameterComments : inputParam.testParameterreportComments;\r\n        masterData['selectedParameterRulesEngine'] = {}\r\n        masterData['selectedParameterRulesEngine'] = testParameter;\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                masterData\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n    handleExpandChange = () => {\r\n        let childListMap1 =  new Map();\r\n        let childListMap2 =   new Map();\r\n        let childListMap3 =  new Map();\r\n        let childListMap =  new Map(); \r\n        if (this.props.Login.masterData.activeTabName === 'IDS_Test') { \r\n            let keylst = this.props.Login.masterData.activeTabName === 'IDS_Test' ?\r\n                Object.keys(this.props.Login.masterData.SelectedRulesEngine['jsonuidata']['siteObject']) :\r\n                this.props.Login.masterData.activeTabName === 'IDS_COMMENTS' ?\r\n                    Object.keys(this.props.Login.masterData.SelectedRulesEngine['jsonuidata']['testCommentObject']) :\r\n                    Object.keys(this.props.Login.masterData.SelectedRulesEngine['jsonuidata']['reportCommentObject'])\r\n            keylst.map(key => {\r\n                childListMap.set(parseInt(key),\r\n                    Object.values(this.props.Login.masterData.activeTabName === 'IDS_Test' ?\r\n                        this.props.Login.masterData.SelectedRulesEngine['jsonuidata']['siteObject'][key] :\r\n                        this.props.Login.masterData.activeTabName === 'IDS_COMMENTS' ?\r\n                            this.props.Login.masterData.SelectedRulesEngine['jsonuidata']['testCommentObject'][key] :\r\n                            this.props.Login.masterData.SelectedRulesEngine['jsonuidata']['reportCommentObject'][key]));\r\n            })\r\n            this.setState({ childListMap })\r\n        }\r\n        if (this.props.Login.masterData.activeTabName === 'IDS_COMMENTS') {\r\n            let keylst = Object.keys(this.props.Login.masterData.SelectedRulesEngine['jsonuidata']['testCommentObject'])\r\n            keylst.map(key => {\r\n                childListMap2.set(parseInt(key),\r\n                    Object.values(\r\n                        this.props.Login.masterData.SelectedRulesEngine['jsonuidata']['testCommentObject'][key]));\r\n            })\r\n            this.setState({ childListMap2 })\r\n        }\r\n        if (this.props.Login.masterData.activeTabName === 'IDS_REPORTCOMMENTS') {\r\n            let keylst =\r\n                Object.keys(this.props.Login.masterData.SelectedRulesEngine['jsonuidata']['reportCommentObject']);\r\n            keylst.map(key => {\r\n                childListMap3.set(parseInt(key),\r\n                    Object.values(\r\n                        this.props.Login.masterData.SelectedRulesEngine['jsonuidata']['reportCommentObject'][key]));\r\n            })\r\n            this.setState({ childListMap3 })\r\n        }\r\n    }\r\n    viewOutcome = (props) => {\r\n        if(this.props.Login.masterData['RulesEngine']&&this.props.Login.masterData['RulesEngine'].length>0){ \r\n            let  masterData= this.props.Login.masterData\r\n            masterData['SelectedRulesEngine']=props['SelectedRulesEngine'][0]\r\n            masterData['activeTabName']='IDS_Test'\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                screenName: \"IDS_VIEWOUTCOME\",\r\n                operation: \"IDS_VIEW\",\r\n                openModal: true,\r\n                masterData\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n    else{\r\n        toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTRULETOVIEWOUTCOME\" })); \r\n    }\r\n    }\r\n    openflowview = (props) => {\r\n        if(this.props.Login.masterData['RulesEngine']&&this.props.Login.masterData['RulesEngine'].length>0){\r\n           let  masterData= this.props.Login.masterData \r\n        masterData['SelectedRulesEngine']=props['SelectedRulesEngine'][0]\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                screenName: \"IDS_VIEWRULE\",\r\n                operation: \"IDS_VIEW\",\r\n                openModal: true,\r\n                masterData\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n    else{\r\n        toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTRULETOVIEWRULE\" })); \r\n    }\r\n    }\r\n    handlePageChangeRuleEngine = (event) => {\r\n        this.setState({\r\n            skipRulesEngine: event.skip,\r\n            takeRulesEngine: event.take\r\n        });\r\n    }\r\n    addGroup = () => {\r\n\r\n        const { selectedRecord } = this.state;\r\n        let viewColumnListByRule = this.props.Login.viewColumnListByRule || [];\r\n        const addGroupList = this.props.Login.addGroupList || [];\r\n        const arrayLength = addGroupList.length;\r\n        addGroupList[arrayLength] = 1;\r\n\r\n        viewColumnListByRule = this.props.Login.databaseviewList;\r\n        if (arrayLength === 0) {\r\n            selectedRecord[\"groupList\"] = [];\r\n            selectedRecord[\"filtercolumns\"] = this.props.Login.selectFields;\r\n        }\r\n        if (selectedRecord[\"groupListJoins\"] === undefined) {\r\n            selectedRecord[\"groupListJoins\"] = []\r\n        }\r\n        if (selectedRecord[\"groupListJoins\"][arrayLength - 1] === undefined) {\r\n            selectedRecord[\"groupListJoins\"][arrayLength - 1] = {}\r\n        }\r\n        selectedRecord[\"groupListJoins\"][arrayLength - 1][\"button_and\"] = true;\r\n\r\n        selectedRecord[\"groupList\"][arrayLength] = [];\r\n        selectedRecord[\"groupList\"][arrayLength][\"button_and\"] = true;\r\n        selectedRecord[\"groupList\"][arrayLength][0] = {};\r\n\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                addGroupList,\r\n                viewColumnListByRule,\r\n                selectedRecord,\r\n                activeTabIndex:0\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n    getTestGroupRulesEngineAdd = () => {\r\n        //   if (this.state.selectedcombo['nproductcatcode']) {\r\n        //    const sqlQuery = false;\r\n        //this.setState({ selectedRecord: {} });\r\n        let selectedRecord = this.state.selectedRecord || {}\r\n        this.props.getTestGroupRulesEngineAdd(this.props.Login.userInfo, false, {\r\n            addRuleList: [], addGroupList: [],\r\n            addAggregateList: [], addOrderbyList: []\r\n        }, this.props.Login.masterData);\r\n        //  } else {\r\n        //       toast.info(this.props.intl.formatMessage({ id: \"IDS_SELECTPRODUCTCATEGORY\" }));\r\n\r\n        //   }\r\n\r\n\r\n    }\r\n    closePortalModal = () => {\r\n        let masterData = this.props.Login.masterData || {};\r\n        masterData['testParameter'] = {}\r\n        masterData['testParameterComments'] = {}\r\n        masterData['testParameterreportComments'] = {}\r\n        masterData['testComments'] = {}\r\n        masterData['reportComments'] = {}\r\n        masterData['testSite'] = {}\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: this.props.Login.operation !== 'update' ? {\r\n                activeTabIndex: 0,\r\n                openPortalModal: false, selectedRecord: {}, addRuleList: [], count: 0,\r\n                masterData, testInitiateTests: [], reportCommentsTests: [],\r\n                testCommentsTests: [], siteObject: {}, testCommentObject: {}, reportCommentObject: {},\r\n                npkAtestparametercode: 0,\r\n                npkBtestparametercode: 0,\r\n                npkCtestparametercode: 0,\r\n                testInitiateSiteTab: [],\r\n                testCommentsTestsTab: [],\r\n                reportCommentsTestsTab: []\r\n            } : {\r\n                activeTabIndex: 0,\r\n                openPortalModal: false, selectedRecord: {}, addRuleList: [], count: 0,\r\n                masterData,\r\n                //  testInitiateTests: [], reportCommentsTests: [],\r\n                // testCommentsTests: [], siteObject: {}, testCommentObject: {}, reportCommentObject: {},\r\n                npkAtestparametercode: 0,\r\n                npkBtestparametercode: 0,\r\n                npkCtestparametercode: 0\r\n                // ,\r\n                // testInitiateSiteTab: [],\r\n                // testCommentsTestsTab: [],\r\n                // reportCommentsTestsTab: []\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n    changePropertyView = (index, event, status) => {\r\n\r\n        let id = false;\r\n        let activeTabIndex\r\n        let activeTabId\r\n        let masterData = this.props.Login.masterData || {};\r\n        let activeTestTab = this.props.Login.activeTestTab || \"\"\r\n        const { selectedRecord } = this.state;\r\n        if (selectedRecord[\"groupList\"].length > 0) {\r\n            if (this.onsavevalidation(selectedRecord)) {\r\n                if (window.innerWidth > 992 && event && this.state.enableAutoClick || !event) {\r\n                    activeTabIndex = this.state.activeTabIndex !== index ? index : id ? index : false;\r\n                }\r\n                if (window.innerWidth > 992 && event && this.state.enableAutoClick || !event) {\r\n                    if (index === 1) {\r\n                        activeTestTab = 'IDS_Test'\r\n                        masterData['selectedParameterRulesEngine'] = this.props.Login.testInitiateTests && this.props.Login.testInitiateTests[0]\r\n                    }\r\n                    if (index === 2) {\r\n                        activeTestTab = 'IDS_COMMENTS'\r\n                        masterData['selectedParameterRulesEngine'] = this.props.Login.testCommentsTests && this.props.Login.testCommentsTests[0]\r\n                    }\r\n                    if (index === 3) {\r\n                        activeTestTab = 'IDS_REPEAT'\r\n                        masterData['selectedParameterRulesEngine'] = this.props.Login.testRepeatTests && this.props.Login.testRepeatTests[0]\r\n                    }\r\n                    if (index === 4) {\r\n                        activeTestTab = 'IDS_ENFORCERESULT'\r\n                        masterData['selectedParameterRulesEngine'] = this.props.Login.testEnforceTests && this.props.Login.testEnforceTests[0]\r\n                    }\r\n                    const updateInfo = {\r\n                        typeName: DEFAULT_RETURN,\r\n                        data: {\r\n                            activeTabIndex: index === 0 ? 0 : this.state.activeTabIndex !== index ? index : id ? index : false,\r\n                            activeTabId: id,\r\n                            activeTestTab,\r\n                            masterData\r\n                        }\r\n                    }\r\n                    this.props.updateStore(updateInfo);\r\n                }\r\n            } else {\r\n                toast.info(this.props.intl.formatMessage({ id: \"IDS_FILLTHERULETOADDOUTCOME\" }));\r\n            }\r\n        }\r\n        else {\r\n            toast.info(this.props.intl.formatMessage({ id: \"IDS_ATLEASTADDONERULETOADDOUTCOME\" }));\r\n        }\r\n    }\r\n\r\n\r\n    deleteRule = (groupIndex, index) => {\r\n        let addGroupList = this.props.Login.addGroupList || [];\r\n        const selectedRecord = this.state.selectedRecord;\r\n        addGroupList[groupIndex] = addGroupList[groupIndex] - 1;\r\n\r\n        if (addGroupList[groupIndex] === 0) {\r\n            addGroupList.splice(groupIndex, 1);\r\n            selectedRecord[\"groupList\"].splice(groupIndex, 1);\r\n            if (selectedRecord[\"groupListJoins\"]) {\r\n                selectedRecord[\"groupListJoins\"].splice(groupIndex - 1, 1);\r\n            }\r\n        } else {\r\n            selectedRecord[\"groupList\"][groupIndex].splice(index, 1);\r\n        }\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { addGroupList, selectedRecord,\r\n                activeTabIndex:0 }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n    deleteOutcome = (index) => {\r\n        let addOutcomeList = this.props.Login.addOutcomeList;\r\n        addOutcomeList.splice(index, 1);\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { addOutcomeList }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n    clearSelectedRule(selectedRecord, index) {\r\n        selectedRecord[\"sinputname_\" + index] && delete selectedRecord[\"sinputname_\" + index];\r\n        selectedRecord[\"ssymbolname_\" + index] && delete selectedRecord[\"ssymbolname_\" + index];\r\n        selectedRecord[\"snumericinput_\" + index] && delete selectedRecord[\"snumericinput_\" + index];\r\n        selectedRecord[\"columnname_\" + index] && delete selectedRecord[\"columnname_\" + index];\r\n        selectedRecord[\"snumericinputtwo_\" + index] && delete selectedRecord[\"snumericinputtwo_\" + index];\r\n        selectedRecord[\"dateinput_\" + index] && delete selectedRecord[\"dateinput_\" + index];\r\n        selectedRecord[\"dateinputtwo_\" + index] && delete selectedRecord[\"dateinputtwo_\" + index];\r\n    }\r\n\r\n    clearRule = () => {\r\n        const sviewname = this.state.selectedRecord.sviewname || \"\";\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { addRuleList: [], selectedRecord: { sviewname }, sqlQuery: false }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    resetRule = () => {\r\n        let masterData = this.props.Login.masterData || {};\r\n        let selectedRecord = this.state.selectedRecord || {}\r\n        masterData['testParameter'] = {}\r\n        masterData['testParameterComments'] = {}\r\n        masterData['testParameterreportComments'] = {}\r\n        masterData['testComments'] = {}\r\n        masterData['reportComments'] = {}\r\n        masterData['testRepeat'] = []\r\n        masterData['testenforceTests'] = []\r\n        masterData['testSite'] = {}\r\n        if (selectedRecord[\"groupList\"]) {\r\n            selectedRecord[\"groupList\"] = []\r\n\r\n        }\r\n        if (selectedRecord[\"groupListJoins\"]) {\r\n            selectedRecord[\"groupListJoins\"] = []\r\n\r\n        }\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                addRuleList: [], addGroupList: [], masterData,\r\n                addAggregateList: [], addOrderbyList: [], testInitiateTests: [], reportCommentsTests: [],\r\n                testCommentsTests: [], siteObject: {}, testCommentObject: {}, reportCommentObject: {}, selectedRecord, testRepeatTests: [],\r\n                testenforceTests: [],\r\n                activeTabIndex:0\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n\r\n    }\r\n\r\n    onSymbolChange = (comboData, fieldName, groupIndex, index) => {\r\n        const { selectedRecord } = this.state;\r\n        const oldSelectedRecord = selectedRecord[\"groupList\"][groupIndex][index][fieldName] || {};\r\n        selectedRecord[\"groupList\"][groupIndex][index][fieldName] = comboData;\r\n        this.setState({ selectedRecord, groupIndex, index });\r\n    }\r\n\r\n    onInputChange = (event, type, groupIndex, index) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        let needoutsource = this.state.needoutsource || {};\r\n        if (event.target.type === 'checkbox') {\r\n            if (event.target.name === 'needoutsource' && event.target.checked === true) {\r\n                needoutsource = true\r\n            }\r\n            else {\r\n                needoutsource = false\r\n                delete selectedRecord['nfromsitecode'];\r\n                delete selectedRecord['ntositecode'];\r\n            }\r\n            selectedRecord[event.target.name] = event.target.checked === true ? 3 : 4;\r\n        }\r\n        else {\r\n            selectedRecord[event.target.name] = event.target.value;\r\n        }\r\n        this.setState({ selectedRecord, needoutsource });\r\n    }\r\n\r\n\r\n\r\n    viewColumnListByRule = (list) => {\r\n        let activeTabIndex = this.props.Login.activeTabIndex\r\n\r\n        if (activeTabIndex !== 0) {\r\n            let selectedRecord = this.props.Login.selectedRecord && this.props.Login.selectedRecord\r\n            let dynamicList = activeTabIndex === 1 ? this.props.Login.testInitiateTests : activeTabIndex === 2 ? this.props.Login.testCommentsTests\r\n                : activeTabIndex === 3 ? this.props.Login.testRepeatTests : activeTabIndex === 4 ? this.props.Login.testenforceTests : \"\"\r\n            if (dynamicList !== undefined && dynamicList)\r\n                list = list.filter(({ value }) => !dynamicList.some(x => x.ntestgrouptestcode == value))\r\n        }\r\n        return list\r\n    }\r\n    onConditionClick = (fieldName, index, isgroup) => {\r\n        let { selectedRecord } = this.state;\r\n        selectedRecord[\"groupListJoins\"] = selectedRecord[\"groupListJoins\"] || []\r\n        if (index !== undefined && isgroup === false) {\r\n            if (fieldName === `button_and`) {\r\n                selectedRecord[\"groupList\"][index][fieldName] = selectedRecord[\"groupList\"][index][fieldName] === true ? true : true;\r\n                selectedRecord[\"groupList\"][index][`button_or`] = false;\r\n            } else if (fieldName === `button_or`) {\r\n                selectedRecord[\"groupList\"][index][fieldName] = selectedRecord[\"groupList\"][index][fieldName] === true ? true : true;\r\n                selectedRecord[\"groupList\"][index][`button_and`] = false;\r\n            } else if (fieldName === `button_not`) {\r\n                selectedRecord[\"groupList\"][index][fieldName] = selectedRecord[\"groupList\"][index][fieldName] === true ? false : true;\r\n            }\r\n            else {\r\n\r\n            }\r\n            this.setState({ selectedRecord });\r\n        }\r\n        else {\r\n            if (fieldName === `button_and`) {\r\n                if (selectedRecord[\"groupListJoins\"][index] === undefined) {\r\n                    selectedRecord[\"groupListJoins\"][index] = {}\r\n                }\r\n                selectedRecord[\"groupListJoins\"][index][fieldName] = selectedRecord[\"groupListJoins\"][index][fieldName] === true ? true : true;\r\n                selectedRecord[\"groupListJoins\"][index][`button_or`] = false;\r\n            }\r\n            if (fieldName === `button_or`) {\r\n                if (selectedRecord[\"groupListJoins\"][index] === undefined) {\r\n                    selectedRecord[\"groupListJoins\"][index] = {}\r\n                }\r\n                selectedRecord[\"groupListJoins\"][index][fieldName] = selectedRecord[\"groupListJoins\"][index][fieldName] === true ? true : true;\r\n                selectedRecord[\"groupListJoins\"][index][`button_and`] = false;\r\n            }\r\n            if (fieldName === `button_not`) {\r\n                if (selectedRecord[\"groupListJoins\"][index] === undefined) {\r\n                    selectedRecord[\"groupListJoins\"][index] = {}\r\n                }\r\n                selectedRecord[\"groupListJoins\"][index][fieldName] = selectedRecord[\"groupListJoins\"][index][fieldName] === true ? false : true;\r\n            }\r\n            this.setState({ selectedRecord });\r\n        }\r\n\r\n    }\r\n\r\n\r\n    //Rules Engine Functions End\r\n    changePropertyViewClose = (id) => {\r\n\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                activeTabIndex: undefined,\r\n                activeTestTab: undefined,\r\n                activeTabId: id\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n    onFilterComboChange = (comboData, fieldName, caseNo) => {\r\n        let tempFilterData = this.state.tempFilterData || {};\r\n        let inputParam = {};\r\n        switch (caseNo) {\r\n            case 1:\r\n                tempFilterData[fieldName] = comboData;\r\n                inputParam = {\r\n                    inputData: {\r\n                        userinfo: this.props.Login.userInfo,\r\n                        sampletype: comboData.item,\r\n                        tempFilterData\r\n                    },\r\n                    methodUrl: \"/getProductCategory\"\r\n                }\r\n                this.props.sampleTypeOnChange(inputParam, this.props.Login.masterData);\r\n                break;\r\n\r\n            case 2:\r\n                tempFilterData[fieldName] = comboData;\r\n                inputParam = {\r\n                    inputData: {\r\n                        userinfo: this.props.Login.userInfo,\r\n                        sampletype: tempFilterData.nsampletypecode.item,\r\n                        productcategory: comboData.item,\r\n                        tempFilterData\r\n                    },\r\n                    methodUrl: \"/getProduct\"\r\n                }\r\n                this.props.sampleTypeOnChange(inputParam, this.props.Login.masterData);\r\n                break;\r\n\r\n            case 3:\r\n                tempFilterData[fieldName] = comboData;\r\n                inputParam = {\r\n                    inputData: {\r\n                        userinfo: this.props.Login.userInfo,\r\n                        sampletype: tempFilterData.nsampletypecode.item,\r\n                        productcategory: tempFilterData.nproductcatcode.item,\r\n                        product: comboData.item,\r\n                        project:comboData.item,\r\n                        tempFilterData\r\n                    },\r\n                    methodUrl: \"/getTreeVersionTemplate\"\r\n                }\r\n                this.props.sampleTypeOnChange(inputParam, this.props.Login.masterData);\r\n                break;\r\n\r\n            case 4:\r\n                tempFilterData[fieldName] = comboData;\r\n                this.setState({ tempFilterData });\r\n                break;\r\n\r\n            case 5:\r\n                const selectedRecord = this.state.selectedRecord;\r\n                selectedRecord[fieldName] = comboData;\r\n                const TestGroupSpecSampleType = this.props.Login.testGroupInputData.TestGroupSpecSampleType || {};\r\n                let testGroupSpecSampleType = {};\r\n                if (this.props.Login.screenName === \"IDS_COMPONENT\") {\r\n                    testGroupSpecSampleType = selectedRecord[\"ncomponentcode\"] ? selectedRecord[\"ncomponentcode\"].item : TestGroupSpecSampleType[0].item;\r\n                } else {\r\n                    testGroupSpecSampleType = this.props.Login.masterData.SelectedComponent;\r\n                }\r\n                inputParam = {\r\n                    userinfo: this.props.Login.userInfo,\r\n                    testcategory: comboData.item,\r\n                    testgroupspecsampletype: testGroupSpecSampleType,\r\n                    nallottedspeccode: this.props.Login.masterData.SelectedSpecification[\"nallottedspeccode\"],\r\n                    selectedRecord\r\n                }\r\n                this.props.changeTestCategory(inputParam, this.props.Login.testGroupInputData);\r\n                break;\r\n            case 6:\r\n                tempFilterData[fieldName] = comboData;\r\n                inputParam = {\r\n                    inputData: {\r\n                        userinfo: this.props.Login.userInfo,\r\n                        nprojecttypecode:tempFilterData.nprojecttypecode.value,\r\n                        projecttype:tempFilterData.nprojecttypecode.item,\r\n                       // sampletype: tempFilterData.nsampletypecode.item,\r\n                       // productcategory: comboData.item,\r\n                        tempFilterData\r\n                    },\r\n                    classUrl:\"/projectmaster\",\r\n                    methodUrl: \"/getApprovedProjectByProjectType\"\r\n                }\r\n                this.props.sampleTypeOnChange(inputParam, this.props.Login.masterData);\r\n                break;\r\n           \r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    handleDateChange = (dateName, dateValue) => {\r\n        const { selectedRecord } = this.state;\r\n        if (dateValue === null) {\r\n            dateValue = new Date();\r\n        }\r\n        selectedRecord[dateName] = dateValue;\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    onNumericInputChange = (value, name) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        selectedRecord[name] = value;\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    onSaveClick = (saveType, formRef) => {\r\n        let inputParam = {};\r\n        if (this.props.Login.screenName === \"IDS_PROFILETREE\"\r\n            || this.props.Login.screenName === \"IDS_EDITTREE\") {\r\n            inputParam = this.onSaveTree(saveType, formRef);\r\n        } else if (this.props.Login.screenName === \"IDS_SPECIFICATION\") {\r\n            inputParam = this.onSaveSpecification(saveType, formRef);\r\n        } else if (this.props.Login.screenName === \"IDS_COMPONENT\") {\r\n            inputParam = this.onSaveComponent(saveType, formRef);\r\n        } else if (this.props.Login.screenName === \"IDS_COPYSPECIFICATION\") {\r\n            inputParam = this.onSaveCopySpecification(saveType, formRef);\r\n        } else if (this.props.Login.screenName === \"IDS_TEST\"\r\n            || this.props.Login.screenName === \"IDS_EDITTESTGROUPTEST\") {\r\n            inputParam = this.onSaveTest(saveType, formRef);\r\n        } else if (this.props.Login.screenName === \"IDS_SPECFILE\") {\r\n            inputParam = this.onSaveSpecFile(saveType, formRef);\r\n        }\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, openModal: true, operation: this.props.Login.operation,\r\n                    screenData: { inputParam, masterData: this.props.Login.masterData },\r\n                    saveType\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        } else {\r\n            this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\", {});\r\n        }\r\n    }\r\n\r\n    onSaveTest = (saveType, formRef) => {\r\n        const operation = this.props.Login.operation;\r\n        const masterData = this.props.Login.masterData;\r\n        const selectedRecord = this.state.selectedRecord;\r\n        let inputData = {};\r\n        const userinfo = this.props.Login.userInfo;\r\n        let postParam = undefined;\r\n        if (operation === \"create\") {\r\n            const testArray = selectedRecord.ntestcode.map(test => { return test.item });\r\n            inputData = {\r\n                testgroupspecification: masterData.SelectedSpecification,\r\n                testgroupspecsampletype: [masterData.SelectedComponent],\r\n                testgrouptest: testArray, userinfo\r\n            }\r\n        } else {\r\n            postParam = {\r\n                inputListName: \"TestGroupTest\", selectedObject: \"SelectedTest\", primaryKeyField: \"ntestgrouptestcode\",\r\n                primaryKeyValue: masterData.SelectedTest ? masterData.SelectedTest.ntestgrouptestcode : 0,\r\n                fetchUrl: \"testgroup/getTestGroupTest\", fecthInputObject: { userinfo: this.props.Login.userInfo },\r\n                masterData: this.props.Login.masterData, searchFieldList, changeList: [\"TestGroupTestFormula\", \"TestGroupTestNumericParameter\",\r\n                    \"TestGroupTestPredefinedParameter\", \"TestGroupTestCharParameter\", \"TestGroupTestParameter\"], isSingleSelect: true\r\n            }\r\n            let testgrouptestfile = null;\r\n            let testGroupFile = selectedRecord.ntestfilecode;\r\n            if (testGroupFile) {\r\n                testGroupFile = testGroupFile.item;\r\n                testgrouptestfile = {\r\n                    nlinkcode: testGroupFile.nlinkcode,\r\n                    nattachmenttypecode: testGroupFile.nattachmenttypecode,\r\n                    sdescription: testGroupFile.sdescription,\r\n                    ssystemfilename: testGroupFile.ssystemfilename,\r\n                    dcreateddate: testGroupFile.dcreateddate,\r\n                    nfilesize: testGroupFile.nfilesize,\r\n                    ntestgroupfilecode: selectedRecord.ntestgroupfilecode,\r\n                    ntestgrouptestcode: selectedRecord.ntestgrouptestcode,\r\n                    sfilename: testGroupFile.sfilename,\r\n                    nstatus: transactionStatus.ACTIVE\r\n                };\r\n            }\r\n            inputData = {\r\n                testgroupspecification: masterData.SelectedSpecification,\r\n                testgrouptest: {\r\n                    ntestgrouptestcode: selectedRecord.ntestgrouptestcode,\r\n                    nsectioncode: selectedRecord.nsectioncode.value,\r\n                    //nsourcecode: selectedRecord.nsourcecode.value,\r\n                    nmethodcode: selectedRecord.nmethodcode ? selectedRecord.nmethodcode.value : transactionStatus.NA,\r\n                    ninstrumentcatcode: selectedRecord.ninstrumentcatcode ? selectedRecord.ninstrumentcatcode.value : transactionStatus.NA,\r\n                    ncontainertypecode: selectedRecord.ncontainertypecode ? selectedRecord.ncontainertypecode.value : transactionStatus.NA,\r\n                    stestsynonym: selectedRecord.stestsynonym,\r\n                    ncost: selectedRecord.ncost,\r\n                    nsorter: selectedRecord.nsorter,\r\n                    nspecsampletypecode: selectedRecord.nspecsampletypecode,\r\n                    nrepeatcountno: selectedRecord.nrepeatcountno\r\n\r\n                },\r\n                testgrouptestfile, userinfo\r\n            }\r\n        }\r\n        const inputParam = {\r\n            inputData,\r\n            classUrl: \"testgroup\",\r\n            operation: operation,\r\n            methodUrl: \"Test\",\r\n            saveType, formRef, searchRef: this.searchRef,\r\n            postParam\r\n        }\r\n        return inputParam;\r\n    }\r\n\r\n    onSaveTree = (saveType, formRef) => {\r\n        const operation = this.props.Login.operation;\r\n        const selectedRecord = this.state.selectedRecord;\r\n        let inputData = {\r\n            userinfo: this.props.Login.userInfo\r\n        };\r\n        if (operation === \"update\") {\r\n            const selectedNode = this.props.Login.masterData.selectedNode;\r\n            inputData[\"treetemplatemanipulation\"] = {\r\n                ntemplatemanipulationcode: selectedRecord.ntemplatemanipulationcode,\r\n                sleveldescription: selectedRecord.sleveldescription,\r\n                nsampletypecode: selectedNode.nsampletypecode,\r\n                ntreeversiontempcode: selectedNode.ntreeversiontempcode,\r\n                nproductcatcode: selectedNode.nproductcatcode,\r\n                nproductcode: selectedNode.nproductcode,\r\n                nprojectmastercode: selectedNode.nprojectmastercode,\r\n            }\r\n            inputData[\"selectednode\"] = this.props.Login.masterData.ActiveKey;\r\n        } else {\r\n            const TreetempTranstestGroup = this.props.Login.TreetempTranstestGroup;\r\n            const filterData = this.state.filterData;\r\n            const selectedRecord = this.state.selectedRecord;\r\n            let treetemplatemanipulation = [];\r\n            let tempArray = filterRecordBasedOnTwoArrays(TreetempTranstestGroup, selectedRecord.treetemplatemanipulation, \"ntemptranstestgroupcode\");\r\n\r\n            tempArray.map(item => {\r\n                const treeData = {\r\n                    ntreeversiontempcode: item.ntreeversiontempcode,\r\n                    npositioncode: item.nlevelno - 1,\r\n                    sleveldescription: item.sleveldescription,\r\n                    ntemptranstestgroupcode: item.ntemptranstestgroupcode,\r\n                    nformcode: 62,\r\n                    schildnode: \"\",\r\n                    nnextchildcode: item.schildnode,\r\n                    ntemplatemanipulationcode: item.ntemplatemanipulationcode,\r\n                    isreadonly: item.ntemplatemanipulationcode > 0 ? true : false,\r\n                    slevelformat: item.slevelformat\r\n                }\r\n                return treetemplatemanipulation.push(treeData);\r\n            });\r\n\r\n\r\n            selectedRecord.treetemplatemanipulation.map(item => {\r\n                const treeTemplateManip = TreetempTranstestGroup.filter(temp => temp.ntemptranstestgroupcode === item.ntemptranstestgroupcode);\r\n                if (treeTemplateManip.length > 0) {\r\n                    item[\"ntemplatemanipulationcode\"] = treeTemplateManip[\"ntemplatemanipulationcode\"];\r\n                } else {\r\n                    item[\"ntemplatemanipulationcode\"] = 0;\r\n                }\r\n                return treetemplatemanipulation.push(item);\r\n            });\r\n\r\n            inputData[\"treetemplatemanipulation\"] = treetemplatemanipulation;\r\n            inputData[\"sampletype\"] = filterData.nsampletypecode.item;\r\n            inputData[\"ncategorycode\"] = filterData.nproductcatcode.value;\r\n            inputData[\"nproductcode\"] = filterData.nproductcatcode.item.ncategorybasedflow == transactionStatus.YES ? -1 :\r\n                filterData.nproductcode.value ? filterData.nproductcode.value : -1;\r\n            inputData[\"ntreeversiontempcode\"] = filterData.ntreeversiontempcode.value;\r\n          //  inputData[\"nprojectmastercode\"] = filterData.nprojectmastercode ? filterData.nprojectmastercode.value:-1;\r\n            inputData[\"nprojectmastercode\"] = filterData.nprojectmastercode ? filterData.nsampletypecode.item.nprojectspecrequired === transactionStatus.YES ? filterData.nprojectmastercode.value :-1:-1;\r\n        }\r\n        const inputParam = {\r\n            inputData,\r\n            classUrl: \"testgroup\",\r\n            operation: operation,\r\n            methodUrl: \"Tree\",\r\n            saveType, formRef\r\n        }\r\n        return inputParam;\r\n    }\r\n\r\n    onSaveSpecification = (saveType, formRef) => {\r\n        const operation = this.props.Login.operation;\r\n        const selectedRecord = this.state.selectedRecord;\r\n\r\n        let testGroupSpec = {\r\n            napproveconfversioncode: -1,\r\n            sversion: '',\r\n            napprovalstatus: transactionStatus.DRAFT,\r\n            nstatus: transactionStatus.ACTIVE,\r\n            ntransactionstatus: selectedRecord[\"ntransactionstatus\"],\r\n            ncomponentrequired: selectedRecord[\"ncomponentrequired\"],\r\n            //   nclinicalspec: selectedRecord[\"nclinicalspec\"],\r\n           // nprojectcode: selectedRecord[\"nprojectcode\"] ? selectedRecord[\"nprojectcode\"] : -1,\r\n            nprojectmastercode: this.state.filterData.nprojectmastercode ? this.state.filterData.nsampletypecode.item.nprojectspecrequired === transactionStatus.YES ? this.state.filterData.nprojectmastercode.value :-1 : -1,\r\n            sspecname: selectedRecord[\"sspecname\"],\r\n            dexpirydate: selectedRecord[\"dexpirydate\"],\r\n            nallottedspeccode: selectedRecord[\"nallottedspeccode\"] ? selectedRecord[\"nallottedspeccode\"] : 0,\r\n            ntzexpirydate: selectedRecord[\"ntzexpirydate\"].value,\r\n            stzexpirydate: selectedRecord[\"ntzexpirydate\"].label\r\n        };\r\n\r\n        const dexpirydate = testGroupSpec[\"dexpirydate\"];\r\n        //need this conversion when the datatype of the field is 'Instant'\r\n        testGroupSpec[\"dexpirydate\"] = formatInputDate(dexpirydate, false);\r\n\r\n        if (operation === \"create\") {\r\n            testGroupSpec[\"ntemplatemanipulationcode\"] = this.props.Login.masterData.selectedNode.ntemplatemanipulationcode\r\n        }\r\n        let ntreeversiontempcode = this.state.filterData.ntreeversiontempcode.value;\r\n\r\n        const inputData = {\r\n            userinfo: this.props.Login.userInfo,\r\n            testgroupspecification: testGroupSpec,\r\n            treetemplatemanipulation: this.props.Login.masterData.selectedNode,\r\n            selectedspecification: this.props.Login.masterData.SelectedSpecification,\r\n            ntreeversiontempcode: ntreeversiontempcode\r\n        }\r\n\r\n        const inputParam = {\r\n            inputData,\r\n            classUrl: \"testgroup\",\r\n            operation: operation,\r\n            methodUrl: \"Specification\",\r\n            saveType, formRef\r\n        }\r\n        return inputParam;\r\n    }\r\n\r\n    onSaveComponent = (saveType, formRef) => {\r\n        const masterData = this.props.Login.masterData;\r\n        const selectedRecord = this.state.selectedRecord;\r\n        const testArray = selectedRecord.ntestcode.map(test => { return test.item });\r\n        const inputData = {\r\n            testgroupspecification: masterData.SelectedSpecification,\r\n            testgroupspecsampletype: [selectedRecord.ncomponentcode.item],\r\n            testgrouptest: testArray,\r\n            userinfo: this.props.Login.userInfo\r\n        }\r\n        const inputParam = {\r\n            inputData,\r\n            classUrl: \"testgroup\",\r\n            operation: this.props.Login.operation,\r\n            methodUrl: \"Component\",\r\n            saveType, formRef\r\n        }\r\n        return inputParam;\r\n    }\r\n\r\n    onSaveSpecFile = (saveType, formRef) => {\r\n        const selectedRecord = this.state.selectedRecord;\r\n        const acceptedFiles = selectedRecord.sfilename;\r\n        const nattachmenttypecode = selectedRecord.nattachmenttypecode;\r\n        let isFileEdited = transactionStatus.NO;\r\n        let specFileArray = [];\r\n        const selectedSpecification = this.props.Login.masterData.SelectedSpecification;\r\n        let specFile = {\r\n            nallottedspeccode: selectedSpecification.nallottedspeccode,\r\n            nspecfilecode: selectedRecord.nspecfilecode ? selectedRecord.nspecfilecode : 0,\r\n            nstatus: transactionStatus.ACTIVE,\r\n            nattachmenttypecode\r\n        };\r\n        const formData = new FormData();\r\n        if (nattachmenttypecode === attachmentType.FTP) {\r\n            if (acceptedFiles && Array.isArray(acceptedFiles) && acceptedFiles.length > 0) {\r\n                acceptedFiles.forEach((file, index) => {\r\n                    const tempData = Object.assign({}, specFile);\r\n                    const splittedFileName = file.name.split('.');\r\n                    const fileExtension = file.name.split('.')[splittedFileName.length - 1];\r\n                    const uniquefilename = nattachmenttypecode === attachmentType.FTP ? create_UUID() + '.' + fileExtension : \"\";\r\n                    tempData[\"sfilename\"] = file.name;\r\n                    tempData[\"sdescription\"] = selectedRecord.sdescription ? selectedRecord.sdescription.trim() : \"\";\r\n                    tempData[\"nlinkcode\"] = transactionStatus.NA;\r\n                    tempData[\"ssystemfilename\"] = uniquefilename;\r\n                    tempData[\"nfilesize\"] = file.size;\r\n                    formData.append(\"uploadedFile\" + index, file);\r\n                    formData.append(\"uniquefilename\" + index, uniquefilename);\r\n                    specFileArray.push(tempData);\r\n                });\r\n                formData.append(\"filecount\", acceptedFiles.length);\r\n                isFileEdited = transactionStatus.YES;\r\n            } else {\r\n                specFile[\"sfilename\"] = selectedRecord.sfilename;\r\n                specFile[\"sdescription\"] = selectedRecord.sdescription ? selectedRecord.sdescription.trim() : \"\";\r\n                specFile[\"nlinkcode\"] = transactionStatus.NA;\r\n                specFile[\"ssystemfilename\"] = selectedRecord.ssystemfilename;\r\n                specFile[\"nfilesize\"] = selectedRecord.nfilesize;\r\n                specFileArray.push(specFile);\r\n            }\r\n        } else {\r\n            specFile[\"sfilename\"] = selectedRecord.slinkfilename.trim();\r\n            specFile[\"sdescription\"] = selectedRecord.slinkdescription ? selectedRecord.slinkdescription.trim() : \"\";\r\n            specFile[\"nlinkcode\"] = selectedRecord.nlinkcode.value ? selectedRecord.nlinkcode.value : -1;\r\n            specFile[\"ssystemfilename\"] = \"\";\r\n            specFile[\"nfilesize\"] = 0;\r\n            specFileArray.push(specFile);\r\n        }\r\n        formData.append(\"isFileEdited\", isFileEdited);\r\n        formData.append(\"testgroupspecification\", JSON.stringify(selectedSpecification));\r\n        formData.append(\"testgroupspecfile\", JSON.stringify(specFileArray));\r\n        const inputParam = {\r\n            inputData: { userinfo: this.props.Login.userInfo },\r\n            formData: formData,\r\n            isFileupload: true,\r\n            operation: this.props.Login.operation,\r\n            classUrl: \"testgroup\",\r\n            saveType, formRef, methodUrl: \"SpecificationFile\"\r\n        }\r\n        return inputParam;\r\n    }\r\n\r\n    deleteSpecRecord = (deleteParam) => {\r\n        const selectedRecord = deleteParam.selectedRecord;\r\n\r\n        const masterData = this.props.Login.masterData;\r\n        const ntreeversiontempcode = masterData[\"TreeTemplateManipulation\"][0].ntreeversiontempcode;\r\n        const treeVersionTemplateIndex = masterData[\"TreeVersionTemplate\"].findIndex(\r\n            x => x[\"ntreeversiontempcode\"] === ntreeversiontempcode);\r\n\r\n        const templateVersionStatus = masterData[\"TreeVersionTemplate\"][treeVersionTemplateIndex].ntransactionstatus\r\n        if (templateVersionStatus === transactionStatus.RETIRED) {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTEDTEMPLATEISRETIRED\" }));\r\n        }\r\n        else {\r\n            if (selectedRecord.napprovalstatus === transactionStatus.DRAFT\r\n                || selectedRecord.napprovalstatus === transactionStatus.CORRECTION) {\r\n                this.deleteRecord(deleteParam);\r\n            } else {\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_SPECIFICATIONSTATUSMUSTBEDRAFTCORRECTION\" }));\r\n            }\r\n        }\r\n    }\r\n\r\n    deleteRecord = (deleteParam) => {\r\n        if (this.props.Login.masterData.selectedNode !== undefined && this.props.Login.masterData.selectedNode !== null) {\r\n            const masterData = this.props.Login.masterData;\r\n            const treeVersionTemplateIndex = masterData[\"TreeVersionTemplate\"].findIndex(\r\n                x => x[\"ntreeversiontempcode\"] === masterData.selectedNode[\"ntreeversiontempcode\"]);\r\n\r\n            const templateVersionStatus = masterData[\"TreeVersionTemplate\"][treeVersionTemplateIndex].ntransactionstatus\r\n            if (templateVersionStatus === transactionStatus.RETIRED) {\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTEDTEMPLATEISRETIRED\" }));\r\n            }\r\n            else {\r\n                if (this.props.Login.masterData.selectedNode) {\r\n                    const methodUrl = deleteParam.methodUrl;\r\n                    let dataState = this.state.componentDataState;\r\n                    const screenName = deleteParam.screenName;\r\n                    const inputParam = {\r\n                        inputData: {\r\n                            [deleteParam.keyName]: deleteParam.selectedRecord,\r\n                            userinfo: this.props.Login.userInfo,\r\n                            testgroupspecification: this.props.Login.masterData.SelectedSpecification,\r\n                            treetemplatemanipulation: this.props.Login.masterData.selectedNode,\r\n                            ntreeversiontempcode: deleteParam.filterData.ntreeversiontempcode.value\r\n                        },\r\n                        classUrl: \"testgroup\",\r\n                        operation: deleteParam.operation,\r\n                        methodUrl: methodUrl,\r\n                        screenName, dataState\r\n                    }\r\n                    const masterData = this.props.Login.masterData;\r\n                    //if (showEsign(this.state.controlMap, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\r\n                    if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, deleteParam.ncontrolCode)) {\r\n                        const updateInfo = {\r\n                            typeName: DEFAULT_RETURN,\r\n                            data: {\r\n                                loadEsign: true, screenData: { inputParam, masterData },\r\n                                openModal: true, screenName: screenName, operation: deleteParam.operation, selectedRecord: {}\r\n                            }\r\n                        }\r\n                        this.props.updateStore(updateInfo);\r\n                    } else {\r\n                        this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\", {});\r\n                    }\r\n                } else {\r\n                    toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTPROFILENODE\" }));\r\n                }\r\n            }\r\n        } else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTPROFILENODE\" }));\r\n        }\r\n    }\r\n\r\n    deleteMultipleRecord = (deleteParam) => {\r\n        //console.log(\"delete component:\", deleteParam, this.props.Login.masterData);\r\n        const masterData = this.props.Login.masterData;\r\n        const treeVersionTemplateIndex = masterData[\"TreeVersionTemplate\"].findIndex(\r\n            x => x[\"ntreeversiontempcode\"] === masterData.selectedNode[\"ntreeversiontempcode\"]);\r\n\r\n        const templateVersionStatus = masterData[\"TreeVersionTemplate\"][treeVersionTemplateIndex].ntransactionstatus\r\n        if (templateVersionStatus === transactionStatus.RETIRED) {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTEDTEMPLATEISRETIRED\" }));\r\n        }\r\n        else {\r\n            const testgroupspecification = this.props.Login.masterData.SelectedSpecification;\r\n            if (testgroupspecification.napprovalstatus === transactionStatus.DRAFT\r\n                || testgroupspecification.napprovalstatus === transactionStatus.CORRECTION) {\r\n                const inputParam = {\r\n                    inputData: {\r\n                        testgroupspecsampletype: deleteParam.props.testgroupspecsampletype,\r\n                        userinfo: this.props.Login.userInfo,\r\n                        testgroupspecification,\r\n                        treetemplatemanipulation: this.props.Login.masterData.selectedNode\r\n                    },\r\n                    classUrl: \"testgroup\",\r\n                    operation: \"delete\",\r\n                    methodUrl: \"TestGroupComponent\",\r\n                    screenName: \"IDS_COMPONENT\"\r\n                }\r\n                const masterData = this.props.Login.masterData;\r\n                if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, deleteParam.ncontrolCode)) {\r\n                    const updateInfo = {\r\n                        typeName: DEFAULT_RETURN,\r\n                        data: {\r\n                            loadEsign: true, screenData: { inputParam, masterData },\r\n                            openModal: true, screenName: \"IDS_COMPONENT\", operation: \"delete\", selectedRecord: {}\r\n                        }\r\n                    }\r\n                    this.props.updateStore(updateInfo);\r\n                } else {\r\n                    this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\", {});\r\n                }\r\n            } else {\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_SPECIFICATIONSTATUSMUSTBEDRAFTCORRECTION\" }));\r\n            }\r\n        }\r\n    }\r\n\r\n    onDropSpecFile = (attachedFiles, fieldName, maxSize) => {\r\n        let selectedRecord = this.state.selectedRecord || {};\r\n        selectedRecord[fieldName] = onDropAttachFileList(selectedRecord[fieldName], attachedFiles, maxSize)\r\n        this.setState({ selectedRecord, actionType: \"new\" });\r\n    }\r\n\r\n    deleteAttachment = (event, file, fieldName) => {\r\n        let selectedRecord = this.state.selectedRecord || {};\r\n        selectedRecord[fieldName] = deleteAttachmentDropZone(selectedRecord[fieldName], file)\r\n\r\n        this.setState({\r\n            selectedRecord, actionType: \"delete\" //fileToDelete:file.name \r\n        });\r\n    }\r\n\r\n    validateTestGroupComplete = (operation, inputValue, ncontrolCode) => {\r\n        if (this.props.Login.masterData.selectedNode !== undefined && this.props.Login.masterData.selectedNode !== null) {\r\n            const masterData = this.props.Login.masterData;\r\n            const treeVersionTemplateIndex = masterData[\"TreeVersionTemplate\"].findIndex(\r\n                x => x[\"ntreeversiontempcode\"] === masterData.selectedNode[\"ntreeversiontempcode\"]);\r\n\r\n            const templateVersionStatus = masterData[\"TreeVersionTemplate\"][treeVersionTemplateIndex].ntransactionstatus\r\n            if (templateVersionStatus === transactionStatus.RETIRED) {\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTEDTEMPLATEISRETIRED\" }));\r\n            }\r\n            else {\r\n                if (inputValue.testgroupspecification) {\r\n                    if (inputValue.testgroupspecification.napprovalstatus === transactionStatus.DRAFT\r\n                        || inputValue.testgroupspecification.napprovalstatus === transactionStatus.CORRECTION) {\r\n                        return rsapi.post(\"testgroup/validateTestGroupComplete\", {\r\n                            nallottedspeccode: inputValue.testgroupspecification.nallottedspeccode,\r\n                            \"userinfo\": this.props.Login.userInfo\r\n                        })\r\n                            .then(response => {\r\n                                if (response.data && response.data.length > 0) {\r\n                                    const inactiveTestArray = [];\r\n                                    response.data.map(item => inactiveTestArray.indexOf(item.stestname) === -1 ? inactiveTestArray.push(item.stestname) : \"\");\r\n                                    const data = \" [\" + inactiveTestArray + \"] \" + this.props.intl.formatMessage({ id: \"IDS_INACTIVETESTSATCOMPLETE\" })\r\n                                    this.confirmMessage.confirm(this.props.intl.formatMessage({ id: \"IDS_CONFIRMATION\" }),\r\n                                        this.props.intl.formatMessage({ id: \"IDS_CONFIRMATION\" }),\r\n                                        data,\r\n                                        this.props.intl.formatMessage({ id: \"IDS_OK\" }),\r\n                                        this.props.intl.formatMessage({ id: \"IDS_CANCEL\" }),\r\n                                        () => this.completeSpecification(operation, inputValue, ncontrolCode),\r\n                                        false,\r\n                                        undefined);\r\n                                }\r\n                                else {\r\n                                    this.completeSpecification(operation, inputValue, ncontrolCode);\r\n                                }\r\n\r\n                            })\r\n                            .catch(error => {\r\n                                if (error.response.status === 500) {\r\n                                    toast.error(this.props.intl.formatMessage({ id: error.message }));\r\n                                }\r\n                                else {\r\n                                    toast.warn(this.props.intl.formatMessage({ id: error.response }));\r\n                                }\r\n                            })\r\n                    }\r\n                    else {\r\n                        toast.warn(this.props.intl.formatMessage({ id: \"IDS_SPECIFICATIONSTATUSMUSTBEDRAFTCORRECTION\" }));\r\n                    }\r\n                }\r\n                else {\r\n                    toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTSPECIFICATION\" }));\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTSPECIFICATION\" }));\r\n        }\r\n    }\r\n\r\n    retireSpec = (operation, selectedSpecification, approvalRoleActionDetail, retireSpecId) => {\r\n        if (selectedSpecification.testgroupspecification.napprovalstatus !== transactionStatus.RETIRED) {\r\n            if (approvalRoleActionDetail.length > 0 && approvalRoleActionDetail[0].nlevelno === transactionStatus.ACTIVE) {\r\n                if (selectedSpecification.testgroupspecification[\"napprovalstatus\"] === approvalRoleActionDetail[0].ntransactionstatus) {\r\n                    const inputParam = {\r\n                        inputData: {\r\n                            nallottedspeccode: selectedSpecification.testgroupspecification,\r\n                            treetemplatemanipulation: selectedSpecification.treetemplatemanipulation,\r\n                            approvalRoleActionDetail: approvalRoleActionDetail[0],\r\n                            userinfo: this.props.Login.userInfo,\r\n                            operation: operation\r\n                        },\r\n                        classUrl: \"testgroup\",\r\n                        operation: operation,\r\n                        methodUrl: \"Spec\",\r\n                        screenName: \"IDS_STUDYPLAN\"\r\n                    }\r\n\r\n\r\n                    let masterData = this.props.Login.masterData\r\n                    if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, retireSpecId)) {\r\n                        const updateInfo = {\r\n                            typeName: DEFAULT_RETURN,\r\n                            data: {\r\n                                loadEsign: true, screenData: { inputParam, masterData },\r\n                                openModal: true, screenName: \"IDS_STUDYPLAN\", operation: operation, selectedRecord: {}\r\n                            }\r\n                        }\r\n                        this.props.updateStore(updateInfo);\r\n                    } else {\r\n                        this.props.retireSpecification(inputParam.inputData, masterData);\r\n                    }\r\n                } else {\r\n                    toast.warn(this.props.intl.formatMessage({ id: \"IDS_RETIRECANBECONEAFTERFINAL\" }));\r\n                }\r\n            } else {\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_FINALLEVELAPPROVE\" }));\r\n            }\r\n        } else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_ALREADYRETIRED\" }));\r\n        }\r\n\r\n    }\r\n\r\n    specificationReport = (operation, ncontrolCode) => {\r\n        if (this.props.Login.masterData.SelectedComponent && this.props.Login.masterData.SelectedTest) {\r\n            const inputParam = {\r\n                inputData: {\r\n                    sprimarykeyname: 'nallottedspeccode',\r\n                    userinfo: this.props.Login.userInfo,\r\n                    ncontrolcode: ncontrolCode,\r\n                    nregtypecode: transactionStatus.NA,\r\n                    nregsubtypecode: transactionStatus.NA,\r\n                    nreportmodulecode: transactionStatus.NA,\r\n                    nreporttypecode: REPORTTYPE.CONTROLBASED,\r\n                    nreportdecisiontypecode: transactionStatus.NA,\r\n                    certificatetypecode: transactionStatus.NA,\r\n                    nsectioncode: transactionStatus.NA,\r\n                    operation: operation,\r\n                    nallottedspeccode: this.props.Login.masterData['SelectedSpecification']['nallottedspeccode'],\r\n                    selectedComponent: this.props.Login.masterData[\"SelectedComponent\"],\r\n                    selectedTest: this.props.Login.masterData[\"SelectedTest\"],\r\n                    filterData: this.state.filterData\r\n\r\n                },\r\n            }\r\n            this.props.reportSpecification(inputParam['inputData']);\r\n        } else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_REPORTCANNOTGENERATEFORCOMPWITHOUTTEST\" }));\r\n        }\r\n    }\r\n\r\n    completeSpecification = (operation, inputValue, ncontrolCode) => {\r\n        if (inputValue.testgroupspecification) {\r\n            if (inputValue.testgroupspecification.napprovalstatus === transactionStatus.DRAFT\r\n                || inputValue.testgroupspecification.napprovalstatus === transactionStatus.CORRECTION) {\r\n\r\n                const inputParam = {\r\n                    inputData: {\r\n                        userinfo: this.props.Login.userInfo,\r\n                        ntreeversiontempcode: this.state.filterData.ntreeversiontempcode.value,\r\n                        testGroupTest: this.props.Login.masterData.TestGroupTest,\r\n                        ...inputValue\r\n                    },\r\n                    classUrl: \"testgroup\",\r\n                    operation: operation,\r\n                    methodUrl: \"Specification\",\r\n                    screenName: \"IDS_SPECIFICATION\"\r\n                }\r\n                if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, ncontrolCode)) {\r\n                    const updateInfo = {\r\n                        typeName: DEFAULT_RETURN,\r\n                        data: {\r\n                            loadEsign: true, screenData: { inputParam, masterData: this.props.Login.masterData },\r\n                            openModal: true, screenName: \"IDS_SPECIFICATION\", operation: operation, selectedRecord: {}\r\n                        }\r\n                    }\r\n                    this.props.updateStore(updateInfo);\r\n                } else {\r\n                    this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\", {});\r\n                }\r\n            } else {\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_SPECIFICATIONSTATUSMUSTBEDRAFTCORRECTION\" }));\r\n            }\r\n        } else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTSPECIFICATION\" }));\r\n        }\r\n    }\r\n\r\n    approveSpecification = (status, needEsign) => {\r\n        const masterData = this.props.Login.masterData;\r\n        const inputParam = {\r\n            inputData: {\r\n                userinfo: this.props.Login.userInfo,\r\n                treetemplatemanipulation: masterData.selectedNode,\r\n                ntreeversiontempcode: this.state.filterData.ntreeversiontempcode.value,\r\n                testgroupspecification: {\r\n                    ...masterData.SelectedSpecification,\r\n                    napprovalstatus: status\r\n                }\r\n            },\r\n            classUrl: \"testgroup\",\r\n            operation: \"approve\",\r\n            methodUrl: \"Specification\",\r\n            screenName: \"IDS_SPECIFICATION\"\r\n        }\r\n        if (needEsign === transactionStatus.YES) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData },\r\n                    openModal: true, screenName: \"IDS_SPECIFICATION\", operation: \"approve\", selectedRecord: {}\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        } else {\r\n            this.props.crudMaster(inputParam, masterData, \"openModal\", {});\r\n        }\r\n    }\r\n\r\n    onComboChange = (comboData, fieldName, caseNo, optional) => {\r\n        let selectedRecord = this.state.selectedRecord || {};\r\n        switch (caseNo) {\r\n            case 1:\r\n                if (fieldName === \"ntestcode\") {\r\n                    selectedRecord[fieldName] = comboData;\r\n                    this.setState({ selectedRecord });\r\n                } else {\r\n                    selectedRecord[fieldName] = comboData;\r\n                    this.setState({ selectedRecord });\r\n                }\r\n                break;\r\n\r\n            case 2:\r\n                selectedRecord[\"parameterTypeCode\"] = comboData.value;\r\n                selectedRecord[fieldName] = comboData;\r\n                this.setState({ selectedRecord });\r\n                break;\r\n\r\n            case 3:\r\n                selectedRecord[\"schecklistversionname\"] = comboData.item.schecklistversionname;\r\n                selectedRecord[fieldName] = comboData;\r\n                this.setState({ selectedRecord });\r\n                break;\r\n\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    validateEsign = () => {\r\n        const inputParam = {\r\n            inputData: {\r\n                \"userinfo\": {\r\n                    ...this.props.Login.userInfo,\r\n                    sreason: this.state.selectedRecord[\"esigncomments\"],\r\n                    nreasoncode: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].value,\r\n                    spredefinedreason: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].label,\r\n\r\n                },\r\n                password: this.state.selectedRecord[\"esignpassword\"]\r\n            },\r\n            screenData: this.props.Login.screenData\r\n        }\r\n        this.props.validateEsignCredential(inputParam, \"openModal\");\r\n    }\r\n\r\n    generateBreadCrumData(filterData) {\r\n        if (filterData && Object.values(filterData).length > 0 && filterData.nsampletypecode && filterData.nsampletypecode.item) {\r\n            if (filterData.nsampletypecode && filterData.nproductcatcode && filterData.nproductcatcode.item.ncategorybasedflow === transactionStatus.YES) {\r\n                this.breadCrumbData = [\r\n                    {\r\n                        \"label\": \"IDS_SAMPLETYPE\",\r\n                        \"value\": filterData.nsampletypecode ? filterData.nsampletypecode.label : \"\"\r\n                    },\r\n                    {\r\n                        \"label\": filterData.nsampletypecode.item.nformcode === formCode.PRODUCTCATEGORY ? \"IDS_PRODUCTCATEGORY\" :\r\n                            filterData.nsampletypecode.item.nformcode === formCode.INSTRUMENTCATEGORY ? \"IDS_INSTRUMENTCATEGORY\" :\r\n                                filterData.nsampletypecode.item.nformcode === formCode.MATERIALCATEGORY ? \"IDS_MATERIALCATEGORY\" : \"\",\r\n                        \"value\": filterData.nproductcatcode ? filterData.nproductcatcode.label : \"\"\r\n                    },\r\n                    {\r\n                        \"label\": \"IDS_TREETEMPLATEVERSION\",\r\n                        \"value\": filterData.ntreeversiontempcode ? filterData.ntreeversiontempcode.label : \"\"\r\n                    }\r\n                ]\r\n                if (filterData.nsampletypecode.value === SampleType.PROJECTSAMPLETYPE)\r\n                {\r\n                 if ( filterData.nsampletypecode.item.nprojectspecrequired === transactionStatus.YES) {\r\n                    this.breadCrumbData.push(  {\r\n                        \"label\": \"IDS_PROJECTTYPE\",\r\n                        \"value\": filterData.nprojecttypecode ? filterData.nprojecttypecode.label : \"\"\r\n                    },\r\n                    {\r\n                        \"label\": \"IDS_PROJECT\",\r\n                        \"value\": filterData.nprojectmastercode ? filterData.nprojectmastercode.label : \"\"\r\n                    })\r\n                }\r\n                }\r\n            } else {\r\n                this.breadCrumbData = [\r\n                    {\r\n                        \"label\": \"IDS_SAMPLETYPE\",\r\n                        \"value\": filterData.nsampletypecode ? filterData.nsampletypecode.label : \"\"\r\n                    },\r\n                    {\r\n                        \"label\": filterData.nsampletypecode.item.nformcode === formCode.PRODUCTCATEGORY ? \"IDS_PRODUCTCATEGORY\" :\r\n                            filterData.nsampletypecode.item.nformcode === formCode.INSTRUMENTCATEGORY ? \"IDS_INSTRUMENTCATEGORY\" :\r\n                                filterData.nsampletypecode.item.nformcode === formCode.MATERIALCATEGORY ? \"IDS_MATERIALCATEGORY\" : \"\",\r\n                        \"value\": filterData.nproductcatcode ? filterData.nproductcatcode.label : \"\"\r\n                    },\r\n\r\n                    {\r\n                        \"label\": filterData.nsampletypecode.item.nformcode === formCode.PRODUCTCATEGORY ? \"IDS_PRODUCT\" :\r\n                            filterData.nsampletypecode.item.nformcode === formCode.INSTRUMENTCATEGORY ? \"IDS_INSTRUMENT\" :\r\n                                filterData.nsampletypecode.item.nformcode === formCode.MATERIALCATEGORY ? \"IDS_MATERIAL\" : \"\",\r\n                        \"value\": filterData.nproductcode ? filterData.nproductcode.label : \"\"\r\n                    },\r\n                    {\r\n                        \"label\": \"IDS_TREETEMPLATEVERSION\",\r\n                        \"value\": filterData.ntreeversiontempcode ? filterData.ntreeversiontempcode.label : \"\"\r\n                    }\r\n                ];\r\n                if (filterData.nsampletypecode.value === SampleType.PROJECTSAMPLETYPE)\r\n                {\r\n                    if ( filterData.nsampletypecode.item.nprojectspecrequired === transactionStatus.YES) {\r\n                    this.breadCrumbData.push(  {\r\n                        \"label\": \"IDS_PROJECTTYPE\",\r\n                        \"value\": filterData.nprojecttypecode ? filterData.nprojecttypecode.label : \"\"\r\n                    },\r\n                    {\r\n                        \"label\": \"IDS_PROJECT\",\r\n                        \"value\": filterData.nprojectmastercode ? filterData.nprojectmastercode.label : \"\"\r\n                    })\r\n                }\r\n                }\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    updateSpiltterLayout() {\r\n        if (this.myRef && this.myRef.current && this.myRef.current.clientHeight + 20 !== this.state.fixefScrollHeight) {\r\n\r\n            this.setState({\r\n                fixefScrollHeight: this.myRef.current.clientHeight + 20,\r\n                disableSplit: true\r\n            })\r\n            console.log(this.myRef.current.clientHeight)\r\n            setTimeout(() => {\r\n                this.setState({\r\n                    disableSplit: false\r\n                })\r\n            })\r\n        }\r\n\r\n    }\r\n    componentDidUpdate(previousProps, previousState) {\r\n        let selectedRecord = this.state.selectedRecord;\r\n        let filterData = this.state.filterData || {};\r\n        let isStateChanged = false;\r\n        let activeTabIndex = this.props.Login.activeTabIndex || 0;\r\n        let activeTabId = this.props.Login.activeTabId || false;\r\n\r\n        this.updateSpiltterLayout()\r\n        let tempFilterData = this.state.tempFilterData || {};\r\n        if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\r\n            selectedRecord = this.props.Login.selectedRecord;\r\n            isStateChanged = true;\r\n        }\r\n        if (this.props.Login.activeTabIndex !== previousProps.Login.activeTabIndex || this.props.Login.masterData !== previousProps.Login.masterData) {\r\n            if (this.props.Login.activeTabIndex !== previousProps.Login.activeTabIndex) {\r\n                activeTabIndex = this.props.Login.activeTabIndex;\r\n                activeTabId = this.props.Login.activeTabId;\r\n                isStateChanged = true;\r\n                // this.setState({\r\n                //     activeTabIndex,\r\n                //     activeTabId\r\n                // });\r\n            }\r\n        }\r\n        if (this.props.Login.tempFilterData !== previousProps.Login.tempFilterData) {\r\n            tempFilterData = this.props.Login.tempFilterData || {};\r\n            isStateChanged = true;\r\n        }\r\n        let sampleType = this.state.sampleType || [];\r\n        if (this.props.Login.masterData.SampleType !== previousProps.Login.masterData.SampleType) {\r\n            const sampleTypeMap = constructOptionList(this.props.Login.masterData.SampleType || [], \"nsampletypecode\", \"ssampletypename\", \"nsorter\", \"ascending\", false);\r\n            sampleType = sampleTypeMap.get(\"OptionList\");\r\n            tempFilterData[\"nsampletypecode\"] = sampleType.length ? sampleType[0] : \"\";\r\n            isStateChanged = true;\r\n        }\r\n        let productCategory = this.state.productCategory || [];\r\n        if (this.props.Login.masterData.ProductCategory !== previousProps.Login.masterData.ProductCategory) {\r\n            const productCatMap = constructOptionList(this.props.Login.masterData.ProductCategory || [], \"nproductcatcode\", \"sproductcatname\", \"nproductcatcode\", \"ascending\", false);\r\n            productCategory = productCatMap.get(\"OptionList\");\r\n            tempFilterData[\"nproductcatcode\"] = productCategory.length > 0 ? productCategory[0] : \"\";\r\n            isStateChanged = true;\r\n        }\r\n        let product = this.state.product || [];\r\n        if (this.props.Login.masterData.Product !== previousProps.Login.masterData.Product) {\r\n            const productMap = constructOptionList(this.props.Login.masterData.Product || [], \"nproductcode\", \"sproductname\", \"nproductcode\", \"ascending\", false);\r\n            product = productMap.get(\"OptionList\");\r\n            tempFilterData[\"nproductcode\"] = product.length > 0 ? product[0] : undefined;\r\n            isStateChanged = true;\r\n        }\r\n        let projectType = this.state.projectType || [];\r\n        if (this.props.Login.masterData.ProjectTypeList !== previousProps.Login.masterData.ProjectTypeList) {\r\n            const projectTypeMap = constructOptionList(this.props.Login.masterData.ProjectTypeList || [], \"nprojecttypecode\", \r\n                        \"sprojecttypename\", \"nprojecttypecode\", \"ascending\", false);\r\n            projectType = projectTypeMap.get(\"OptionList\");\r\n            tempFilterData[\"nprojecttypecode\"] = projectType.length > 0 ? projectType[0] : undefined;\r\n            isStateChanged = true;\r\n        }\r\n        let project = this.state.project || [];\r\n        if (this.props.Login.masterData.ProjectMasterList !== previousProps.Login.masterData.ProjectMasterList) {\r\n            const projectMasterMap = constructOptionList(this.props.Login.masterData.ProjectMasterList || [], \"nprojectmastercode\", \r\n                        \"sprojectcode\", \"nprojectmastercode\", \"ascending\", false);\r\n            project = projectMasterMap.get(\"OptionList\");\r\n            tempFilterData[\"nprojectmastercode\"] = project.length > 0 ? project[0] : undefined;\r\n            isStateChanged = true;\r\n        }\r\n        let treeVersionTemplate = this.state.treeVersionTemplate || [];\r\n        if (this.props.Login.masterData.TreeVersionTemplate !== previousProps.Login.masterData.TreeVersionTemplate) {\r\n            const templateMap = constructOptionList(this.props.Login.masterData.TreeVersionTemplate || [], \"ntreeversiontempcode\", \"sversiondescription\", \"ntreeversiontempcode\", \"ascending\", false);\r\n            treeVersionTemplate = templateMap.get(\"OptionList\");\r\n            tempFilterData[\"ntreeversiontempcode\"] = treeVersionTemplate.length > 0 ? treeVersionTemplate[treeVersionTemplate.length - 1] : \"\";\r\n            isStateChanged = true;\r\n        }\r\n\r\n        // if (this.props.Login.masterData.TestGroupTestParameter && this.props.Login.masterData.TestGroupTestParameter !== previousProps.Login.masterData.TestGroupTestParameter) {\r\n        //     sortData(this.props.Login.masterData.TestGroupTestParameter, \"ascending\", \"nsorter\");\r\n        // }\r\n\r\n        // if (this.props.Login.masterData.TestGroupTesT && this.props.Login.masterData.TestGroupTesT !== previousProps.Login.masterData.TestGroupTesT) {\r\n        //     sortData(this.props.Login.masterData.TestGroupTesTest, \"ascending\", \"nsorter\");\r\n        // }\r\n\r\n        let userRoleControlRights = this.state.userRoleControlRights || [];\r\n        let controlMap = this.state.controlMap || [];\r\n        if (this.props.Login.userInfo && this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\r\n            const nformCode = this.props.Login.userInfo.nformcode;\r\n            if (this.props.Login.userRoleControlRights) {\r\n                this.props.Login.userRoleControlRights[nformCode] && Object.values(this.props.Login.userRoleControlRights[nformCode]).map(item =>\r\n                    userRoleControlRights.push(item.ncontrolcode));\r\n            }\r\n            controlMap = getControlMap(this.props.Login.userRoleControlRights, nformCode);\r\n            filterData = { ...tempFilterData };\r\n            this.generateBreadCrumData(filterData);\r\n        }\r\n\r\n        if (this.props.Login.filterData !== previousProps.Login.filterData) {\r\n            filterData = { ...this.props.Login.filterData };\r\n            this.generateBreadCrumData(filterData);\r\n            isStateChanged = true;\r\n        }\r\n        // else if (filterData !== previousState.filterData) {\r\n        //     filterData = { ...tempFilterData };\r\n        //     this.generateBreadCrumData(filterData);\r\n        // }\r\n\r\n        let historyDataState = this.state.historyDataState;\r\n        if (this.props.Login.historyDataState && this.props.Login.historyDataState !== previousProps.Login.historyDataState) {\r\n            historyDataState = this.props.Login.historyDataState;\r\n            isStateChanged = true;\r\n        }\r\n\r\n        let { testskip, testtake } = this.state;\r\n        if (this.props.Login.masterData !== previousProps.Login.masterData) {\r\n            testskip = this.props.Login.testskip === undefined ? testskip : this.props.Login.testskip\r\n            testtake = testtake ? testtake : this.props.Login.testtake\r\n            isStateChanged = true;\r\n        } \r\n        let { skipRulesEngine, takeRulesEngine } = this.state;\r\n        if (this.props.Login.masterData !== previousProps.Login.masterData) {\r\n            skipRulesEngine = this.props.Login.skipRulesEngine === undefined ? skipRulesEngine : this.props.Login.skipRulesEngine\r\n            takeRulesEngine = takeRulesEngine ? takeRulesEngine : this.props.Login.takeRulesEngine\r\n            isStateChanged = true;\r\n        }\r\n        if (isStateChanged) {\r\n            this.setState({\r\n                selectedRecord, tempFilterData, filterData, userRoleControlRights, controlMap,\r\n                sampleType, productCategory, product, treeVersionTemplate, historyDataState,\r\n                testskip, testtake, projectType, project,activeTabIndex, activeTabId, skipRulesEngine, takeRulesEngine\r\n            });\r\n        }\r\n    }\r\n\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        Login: state.Login\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, {\r\n    callService, crudMaster, filterTestGroup, createTree, editTree, sampleTypeOnChange,\r\n    getTestGroupDetails, validateEsignCredential, updateStore, addSpecification, getSpecification, addComponent,\r\n    changeTestCategory, addTestGroupTest, editTestGroupTest, getTestGroupParameter, editTestGroupParameter,\r\n    addTestFile, editSpecFile, getSpecificationDetails, addTestGroupCodedResult, getComponentBySpecId, filterColumnData,\r\n    viewAttachment, viewTestGroupCheckList, getTestGroupComponentDetails, filterTransactionList, reportSpecification, retireSpecification, getDataForTestMaterial, getEditTestGroupRulesEngine,\r\n    getMaterialCategoryBasedMaterialType, getMaterialBasedMaterialCategory, getTestGroupMaterial, getDataForEditTestMaterial, addTestGroupNumericTab, getTestGroupRulesEngineAdd,\r\n    getSelectedTestGroupRulesEngine, getParameterRulesEngine,getParameterResultValue\r\n})(injectIntl(TestGroup));"]},"metadata":{},"sourceType":"module"}