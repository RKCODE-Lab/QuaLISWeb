{"ast":null,"code":"import { convertMsLists } from './listConvert';\n/**\n * Removes the invalid HTML. Use it as a first step for cleaning the HTML.\n */\n\nexport var sanitize = function (html) {\n  html = html.replace(/^[\\s\\S]+?<!--StartFragment-->\\s*([\\s\\S]*?)\\s*<!--EndFragment-->[\\s\\S]+$/, '$1');\n  html = html.replace(/<\\/?[ovw]:[^>]*?>/gi, ''); // MS elements, e.g. <o:p>, <w:sdtPr>, <v:\n\n  html = html.replace(/<\\\\?\\??xml[^>]*>/gi, ''); // XML namespaces\n\n  html = html.replace(/<(?:link|meta) [^>]+?>/ig, '');\n  html = html.replace(/<style[^>]*?>\\s*<\\/style>/ig, '');\n  html = html.replace(/<\\/?st1:.*?>/gi, '');\n  html = html.replace(/<a name=\"[a-zA-Z0-9_]+\">/gmi, '');\n  html = html.replace(/v:shapes?=\"[^\"]+\"/ig, '');\n  html = html.replace(/<!\\[if !supportLists\\]>/ig, '');\n  html = html.replace(/<!\\[endif\\]>/ig, '');\n  return html;\n};\n/**\n * Removes comments in HTML.\n */\n\nexport var removeComments = function (html) {\n  return html.replace(/<!--[\\s\\S]+?-->/g, '');\n};\n/**\n * Removes the specified tag(s).\n */\n\nexport var removeTag = function (html, tagPattern) {\n  return html.replace(new RegExp('<\\\\/?(' + tagPattern + ')(?:\\\\s[^>]*?)?>', 'gi'), '');\n};\n/**\n * Removes the passed attribute.\n */\n\nexport var removeAttribute = function (attr) {\n  if (attr.ownerElement) {\n    attr.ownerElement.removeAttribute(attr.name);\n  }\n};\n/**\n * Remove the attribute if its value matches /^Mso/ regex.\n */\n\nexport var sanitizeClassAttr = function (attr) {\n  if (/^Mso/.test(attr.value)) {\n    removeAttribute(attr);\n  }\n};\nvar stylesSplit = /\\s*;\\s*/;\nvar styleValueSplit = /\\s*:\\s*/;\n/**\n * Removes invalid HTML styles.\n */\n\nexport var sanitizeStyleAttr = function (attr) {\n  var styles = attr.value.split(stylesSplit).filter(function (st) {\n    return Boolean(st);\n  });\n  var element = attr.ownerElement;\n  var supportedStyles = element.style;\n  var result = '',\n      name,\n      value;\n  styles.forEach(function (style) {\n    var _a;\n\n    _a = style.split(styleValueSplit), name = _a[0], value = _a[1];\n\n    if (supportedStyles[name] !== undefined) {\n      result += name + \": \" + value + \"; \";\n    }\n  });\n  result = result.trim();\n\n  if (result) {\n    attr.value = result;\n  } else {\n    removeAttribute(attr);\n  }\n};\n\nvar removeNode = function (node) {\n  var parentNode = node.parentNode;\n\n  if (parentNode) {\n    while (node.firstChild) {\n      parentNode.insertBefore(node.firstChild, node);\n    }\n\n    parentNode.removeChild(node);\n  }\n};\n\nvar sanitizeNode = function (node, attributes) {\n  if (node.nodeType === Node.ELEMENT_NODE) {\n    for (var i = node.attributes.length - 1; i >= 0; i--) {\n      var attr = node.attributes[i];\n\n      if (attributes[attr.name]) {\n        attributes[attr.name](attr);\n      } else if (attributes['*']) {\n        attributes['*'](attr);\n      }\n    }\n\n    if (node.nodeName === 'SPAN' && node.attributes.length === 0) {\n      removeNode(node);\n    }\n  }\n};\n/**\n * Cleans the HTML based on passed settings.\n * Before using it, clean the HTML with the `sanitize` function.\n */\n\n\nexport var pasteCleanup = function (html, settings) {\n  var result = html;\n\n  if (settings.convertMsLists) {\n    result = convertMsLists(result);\n  }\n\n  if (settings.stripTags) {\n    result = removeTag(result, settings.stripTags);\n  }\n\n  if (settings.attributes) {\n    var div = document.createElement('div');\n    div.innerHTML = result;\n    Array.from(div.querySelectorAll('*')).forEach(function (node) {\n      return sanitizeNode(node, settings.attributes);\n    });\n    result = div.innerHTML;\n  }\n\n  return result;\n};","map":{"version":3,"sources":["D:/Postgres_workingFolder/QuaLISWeb/node_modules/@progress/kendo-editor-common/dist/es/paste.js"],"names":["convertMsLists","sanitize","html","replace","removeComments","removeTag","tagPattern","RegExp","removeAttribute","attr","ownerElement","name","sanitizeClassAttr","test","value","stylesSplit","styleValueSplit","sanitizeStyleAttr","styles","split","filter","st","Boolean","element","supportedStyles","style","result","forEach","_a","undefined","trim","removeNode","node","parentNode","firstChild","insertBefore","removeChild","sanitizeNode","attributes","nodeType","Node","ELEMENT_NODE","i","length","nodeName","pasteCleanup","settings","stripTags","div","document","createElement","innerHTML","Array","from","querySelectorAll"],"mappings":"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","sourcesContent":["import { convertMsLists } from './listConvert';\n/**\n * Removes the invalid HTML. Use it as a first step for cleaning the HTML.\n */\nexport var sanitize = function (html) {\n    html = html.replace(/^[\\s\\S]+?<!--StartFragment-->\\s*([\\s\\S]*?)\\s*<!--EndFragment-->[\\s\\S]+$/, '$1');\n    html = html.replace(/<\\/?[ovw]:[^>]*?>/gi, ''); // MS elements, e.g. <o:p>, <w:sdtPr>, <v:\n    html = html.replace(/<\\\\?\\??xml[^>]*>/gi, ''); // XML namespaces\n    html = html.replace(/<(?:link|meta) [^>]+?>/ig, '');\n    html = html.replace(/<style[^>]*?>\\s*<\\/style>/ig, '');\n    html = html.replace(/<\\/?st1:.*?>/gi, '');\n    html = html.replace(/<a name=\"[a-zA-Z0-9_]+\">/gmi, '');\n    html = html.replace(/v:shapes?=\"[^\"]+\"/ig, '');\n    html = html.replace(/<!\\[if !supportLists\\]>/ig, '');\n    html = html.replace(/<!\\[endif\\]>/ig, '');\n    return html;\n};\n/**\n * Removes comments in HTML.\n */\nexport var removeComments = function (html) {\n    return html.replace(/<!--[\\s\\S]+?-->/g, '');\n};\n/**\n * Removes the specified tag(s).\n */\nexport var removeTag = function (html, tagPattern) {\n    return html.replace(new RegExp('<\\\\/?(' + tagPattern + ')(?:\\\\s[^>]*?)?>', 'gi'), '');\n};\n/**\n * Removes the passed attribute.\n */\nexport var removeAttribute = function (attr) {\n    if (attr.ownerElement) {\n        attr.ownerElement.removeAttribute(attr.name);\n    }\n};\n/**\n * Remove the attribute if its value matches /^Mso/ regex.\n */\nexport var sanitizeClassAttr = function (attr) {\n    if (/^Mso/.test(attr.value)) {\n        removeAttribute(attr);\n    }\n};\nvar stylesSplit = /\\s*;\\s*/;\nvar styleValueSplit = /\\s*:\\s*/;\n/**\n * Removes invalid HTML styles.\n */\nexport var sanitizeStyleAttr = function (attr) {\n    var styles = attr.value.split(stylesSplit).filter(function (st) { return Boolean(st); });\n    var element = attr.ownerElement;\n    var supportedStyles = element.style;\n    var result = '', name, value;\n    styles.forEach(function (style) {\n        var _a;\n        _a = style.split(styleValueSplit), name = _a[0], value = _a[1];\n        if (supportedStyles[name] !== undefined) {\n            result += name + \": \" + value + \"; \";\n        }\n    });\n    result = result.trim();\n    if (result) {\n        attr.value = result;\n    }\n    else {\n        removeAttribute(attr);\n    }\n};\nvar removeNode = function (node) {\n    var parentNode = node.parentNode;\n    if (parentNode) {\n        while (node.firstChild) {\n            parentNode.insertBefore(node.firstChild, node);\n        }\n        parentNode.removeChild(node);\n    }\n};\nvar sanitizeNode = function (node, attributes) {\n    if (node.nodeType === Node.ELEMENT_NODE) {\n        for (var i = node.attributes.length - 1; i >= 0; i--) {\n            var attr = node.attributes[i];\n            if (attributes[attr.name]) {\n                attributes[attr.name](attr);\n            }\n            else if (attributes['*']) {\n                attributes['*'](attr);\n            }\n        }\n        if (node.nodeName === 'SPAN' && node.attributes.length === 0) {\n            removeNode(node);\n        }\n    }\n};\n/**\n * Cleans the HTML based on passed settings.\n * Before using it, clean the HTML with the `sanitize` function.\n */\nexport var pasteCleanup = function (html, settings) {\n    var result = html;\n    if (settings.convertMsLists) {\n        result = convertMsLists(result);\n    }\n    if (settings.stripTags) {\n        result = removeTag(result, settings.stripTags);\n    }\n    if (settings.attributes) {\n        var div = document.createElement('div');\n        div.innerHTML = result;\n        Array.from(div.querySelectorAll('*')).forEach(function (node) { return sanitizeNode(node, settings.attributes); });\n        result = div.innerHTML;\n    }\n    return result;\n};\n"]},"metadata":{},"sourceType":"module"}