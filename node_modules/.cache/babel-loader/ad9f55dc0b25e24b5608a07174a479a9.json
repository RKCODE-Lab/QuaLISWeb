{"ast":null,"code":"var _jsxFileName = \"E:\\\\WorkingFolder\\\\React_Postgres\\\\ALPD\\\\branches\\\\SOURCE-513-PROD\\\\SOURCE-513-ALPD-5294\\\\QuaLISWeb\\\\src\\\\pages\\\\testmanagement\\\\TestMaster.jsx\";\nimport React, { Component } from 'react';\nimport { Row, Col, Card, Nav, FormGroup, FormLabel } from 'react-bootstrap';\nimport { connect } from 'react-redux';\nimport rsapi from '../../rsapi';\nimport { callService, crudMaster, getTestMaster, addTest, updateStore, getTestDetails, formulaChangeFunction, filterColumnData, addParameter, validateEsignCredential, addCodedResult, addParameterSpecification, getAvailableData, addFormula, addClinicalSpecification, changeTestCategoryFilter, addTestFile, viewAttachment, getActiveTestContainerTypeById, addContainerType, ReportInfoTest, getUnitConversion, getConversionOperator, addPredefinedModal } from '../../actions';\nimport TestView from './TestView';\nimport { injectIntl } from 'react-intl';\nimport { toast } from 'react-toastify';\nimport AddParameter from './AddParameter';\nimport AddTest from '../../pages/testmanagement/AddTest';\nimport TestReportInfo from \"../../pages/testmanagement/TestReportInfo\";\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\nimport { getControlMap, showEsign, constructOptionList } from '../../components/CommonScript';\nimport TestCategoryFilter from './TestCategoryFilter';\nimport ListMaster from '../../components/list-master/list-master.component';\nimport { faTrashAlt, faPencilAlt, faCopy, faCheck } from '@fortawesome/free-solid-svg-icons';\nimport { ReactComponent as ReportEdit } from \"@svgr/webpack?-svgo,+titleProp,+ref!../../assets/image/report-edit.svg\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { ReadOnlyText, ContentPanel, MediaLabel } from '../../components/App.styles';\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\nimport Esign from '../audittrail/Esign'; // import ConfirmDialog from '../../components/confirm-alert/confirm-alert.component';\n\nimport { parameterType, transactionStatus } from '../../components/Enumeration';\nimport 'react-perfect-scrollbar/dist/css/styles.css'; // import { Tooltip } from '@progress/kendo-react-tooltip';\n\nimport ConfirmMessage from '../../components/confirm-alert/confirm-message.component';\nimport BreadcrumbComponent from '../../components/Breadcrumb.Component';\nimport { Affix } from 'rsuite'; //ALPD-4652 Saravanan\n\nimport { process } from '@progress/kendo-data-query'; // import ReactTooltip from 'react-tooltip';\n\nclass TestMaster extends Component {\n  constructor(props) {\n    super(props);\n\n    this.sidebarExpandCollapse = () => {\n      //  alert('ss');\n      // this.setState({sidebarviewstate: !this.state.sidebarviewstate}) \n      this.setState({\n        sidebarview: true\n      }); // sidebarviewstate:true\n    };\n\n    this.handlePageChange = event => {\n      this.setState({\n        skip: event.skip,\n        take: event.take\n      });\n    };\n\n    this.ConfirmDelete = (item, operation, ncontrolCode, methodUrl, modalName) => {\n      this.confirmMessage.confirm(\"deleteMessage\", this.props.intl.formatMessage({\n        id: \"IDS_DELETE\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_DEFAULTCONFIRMMSG\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_OK\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_CANCEL\"\n      }), () => this.deleteAction(item, operation, ncontrolCode, methodUrl, modalName));\n    };\n\n    this.onComboChange = (comboData, fieldName, caseNo) => {\n      let selectedRecord = this.state.selectedRecord || {};\n\n      switch (caseNo) {\n        case 1:\n          if (fieldName === \"sparametername\") {\n            selectedRecord[fieldName] = comboData;\n            selectedRecord[\"sparametersynonym\"] = comboData ? comboData.value : \"\";\n          } else if (fieldName === \"nunitcode\") {\n            selectedRecord[\"nunitcode\"] = comboData;\n            this.props.getUnitConversion(this.state.selectedRecord.nunitcode.value, this.props.Login.masterData, this.props.Login.userInfo, selectedRecord);\n          } else if (fieldName === \"ndestinationunitcode\") {\n            if (comboData !== null) {\n              selectedRecord[\"ndestinationunitcode\"] = comboData;\n              this.props.getConversionOperator(this.state.selectedRecord.nunitcode.value, this.state.selectedRecord.ndestinationunitcode.value, this.props.Login.masterData, this.props.Login.userInfo, selectedRecord);\n            } else {\n              delete selectedRecord[\"ndestinationunitcode\"]; //ALPD-3521\n\n              delete selectedRecord[\"soperator\"];\n              delete selectedRecord[\"nconversionfactor\"];\n              selectedRecord[\"noperatorcode\"] = -1;\n            }\n          } else {\n            selectedRecord[fieldName] = comboData;\n          }\n\n          this.setState({\n            selectedRecord\n          });\n          break;\n\n        case 2:\n          let item = comboData['item'];\n          let needUnit = true;\n          let needRoundingDigit = true;\n          let needCodedResult = true;\n          let needActualResult = true;\n          let npredefinedcode = transactionStatus.NO;\n          const parameterData = this.props.Login.parameterData;\n\n          if (item[\"nunitrequired\"] === transactionStatus.YES) {\n            needUnit = false;\n            selectedRecord[\"nunitcode\"] = this.props.Login.parameterData.defaultUnit;\n          } else {\n            selectedRecord[\"nunitcode\"] = \"\"; //ALPD-3521\n\n            selectedRecord[\"ndestinationunitcode\"] = [];\n            selectedRecord[\"soperator\"] = [];\n          }\n\n          if (item[\"nroundingrequired\"] === transactionStatus.YES) {\n            needRoundingDigit = false;\n          } else {\n            selectedRecord[\"nroundingdigit\"] = \"\";\n            selectedRecord[\"nroundingdigits\"] = \"\";\n            selectedRecord[\"ndeltacheck\"] = 4;\n            selectedRecord[\"ndeltacheckframe\"] = \"\";\n            selectedRecord[\"ndeltaunitcode\"] = \"\";\n            selectedRecord[\"ndeltachecklimitcode\"] = \"\";\n          }\n\n          if (item[\"npredefinedrequired\"] === transactionStatus.YES) {\n            needCodedResult = false;\n            npredefinedcode = item[\"npredefinedrequired\"];\n          } else {\n            selectedRecord[\"spredefinedname\"] = \"\";\n          }\n\n          if (item[\"ngraderequired\"] === transactionStatus.YES) {\n            needActualResult = false;\n            selectedRecord[\"ngradecode\"] = this.props.Login.parameterData.defaultGrade;\n          } else {\n            selectedRecord[\"ngradecode\"] = \"\";\n          }\n\n          selectedRecord[fieldName] = comboData;\n          const parameterInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              parameterData: { ...parameterData,\n                needUnit,\n                needRoundingDigit,\n                needCodedResult,\n                needActualResult,\n                npredefinedcode\n              },\n              selectedRecord\n            }\n          };\n          this.props.updateStore(parameterInfo);\n          break;\n\n        case 3:\n          let nfilterTestCategory = this.state.nfilterTestCategory || {};\n          nfilterTestCategory = comboData;\n          this.searchRef.current.value = \"\";\n          this.setState({\n            nfilterTestCategory\n          });\n          break;\n\n        default:\n          break;\n      }\n    };\n\n    this.openFilter = () => {\n      let showFilter = !this.props.Login.showFilter;\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          showFilter\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.closeFilter = () => {\n      console.log(\"Hello Close Filter\");\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          showFilter: false\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onFilterSubmit = () => {\n      if (this.state.nfilterTestCategory.value) {\n        let inputParam = {\n          inputData: {\n            ntestcategorycode: this.state.nfilterTestCategory.value,\n            userinfo: this.props.Login.userInfo,\n            nfilterTestCategory: this.state.nfilterTestCategory\n          },\n          classUrl: \"testmaster\",\n          methodUrl: \"TestMasterByCategory\"\n        };\n        this.props.changeTestCategoryFilter(inputParam, this.props.Login.masterData.filterTestCategory);\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_TESTCATEGORYNOTAVAILABLE\"\n        }));\n      }\n    };\n\n    this.onEsignInputOnChange = event => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (event.target.type === 'checkbox') {\n        selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\n      } else {\n        selectedRecord[event.target.name] = event.target.value;\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onInputOnChange = (event, caseNo, optional) => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      switch (caseNo) {\n        case 1:\n          if (event.target.type === 'checkbox') {\n            selectedRecord[event.target.name] = event.target.checked === true ? optional[0] : optional[1];\n\n            if (selectedRecord['ndeltacheck'] === transactionStatus.YES) {\n              selectedRecord['ndeltaunitcode'] = this.props.Login.parameterData && this.props.Login.parameterData.deltaperiod.filter(x => x.item.ndefaultstatus === transactionStatus.YES)[0];\n            } else {\n              delete selectedRecord['ndeltaunitcode'];\n            }\n          } else {\n            selectedRecord[event.target.name] = event.target.value;\n          }\n\n          this.setState({\n            selectedRecord\n          });\n          break;\n\n        case 2:\n          selectedRecord[event.target.name] = selectedRecord[\"stestsynonym\"] = selectedRecord[\"sparametersynonym\"] = event.target.value;\n          selectedRecord[\"sparametername\"] = {\n            label: event.target.value,\n            value: event.target.value\n          };\n          this.setState({\n            selectedRecord\n          });\n          break;\n\n        case 3:\n          selectedRecord[event.target.name] = selectedRecord[\"sparametersynonym\"] = event.target.value;\n          this.setState({\n            selectedRecord\n          });\n          break;\n\n        case 6:\n          //selectedRecord[event.target.name] = selectedRecord[\"sresultparacomment\"] = event.target.value;\n          selectedRecord[event.target.name] = selectedRecord[\"spredefinedsynonym\"] = event.target.value;\n          this.setState({\n            selectedRecord\n          });\n          break;\n\n        default:\n          break;\n      }\n    };\n\n    this.onNumericInputChange = (value, name) => {\n      // console.log(\"value:\", value, name);\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (name === \"nroundingdigits\" || name === \"nconversionfactor\") {\n        // if(/^\\-/.test(value.target.value)){\n        // if (/^-?\\d*?$/.test(value.target.value) || value.target.value === \"\") {\n        if (/^\\d*?$/.test(value.target.value) || value.target.value === \"\") {\n          //  console.log(\"val:\", value.target.value);\n          selectedRecord[name] = value.target.value;\n        }\n      } else {\n        selectedRecord[name] = value;\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.closeModal = () => {\n      let loadEsign = this.props.Login.loadEsign;\n      let openModal = this.props.Login.openModal;\n      let selectedRecord = this.props.Login.selectedRecord;\n\n      if (this.props.Login.loadEsign) {\n        if (this.props.Login.operation === \"delete\") {\n          loadEsign = false;\n          openModal = false;\n          selectedRecord = {};\n        } else {\n          loadEsign = false;\n          selectedRecord['esignpassword'] = \"\";\n          selectedRecord['esigncomments'] = \"\";\n          selectedRecord['esignreason'] = \"\";\n        }\n      } else {\n        openModal = false;\n        selectedRecord = {};\n      }\n\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          openModal,\n          loadEsign,\n          selectedRecord\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.closeFormulaModal = () => {\n      this.setState({\n        addformula: false\n      });\n    };\n\n    this.addSubCodedResult = () => {};\n\n    this.deleteAction = (item, operation, ncontrolCode, methodUrl, modalName) => {\n      const selected = item[\"dataItem\"] ? item[\"dataItem\"] : item;\n      const inputParam = {\n        inputData: {\n          [methodUrl.toLowerCase()]: selected,\n          userinfo: this.props.Login.userInfo,\n          //ALPD-4831--Vignesh R(08-10-2024)--When nsettingcode 71 is set to 3, the Test Group is not required and is automatically updated by default in the relevant test group-related tables.\n          \"isQualisLite\": parseInt(this.props.Login.settings[71])\n        },\n        classUrl: \"testmaster\",\n        operation: operation,\n        methodUrl: methodUrl,\n        screenName: \"IDS_TEST\",\n        selectedRecord: { ...this.state.selectedRecord\n        },\n        postParam: {\n          inputListName: \"TestMaster\",\n          selectedObject: \"SelectedTest\",\n          primaryKeyField: \"ntestcode\",\n          primaryKeyValue: selected.ntestcode,\n          fetchUrl: \"testmaster/getTestById\",\n          fecthInputObject: {\n            userinfo: this.props.Login.userInfo\n          },\n          masterData: this.props.Login.masterData\n        }\n      };\n      const masterData = this.props.Login.masterData;\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, ncontrolCode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData\n            },\n            [modalName]: true,\n            screenName: \"IDS_TEST\",\n            operation: operation\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, masterData, modalName, {});\n      }\n    };\n\n    this.validateTestExistenceInTestGroup = () => {\n      const operation = this.props.Login.operation;\n\n      if (operation === \"update\") {\n        return rsapi.post(\"testmaster/validateTestExistenceInTestGroup\", {\n          ntestcode: this.props.Login.masterData.SelectedTest[\"ntestcode\"],\n          \"userinfo\": this.props.Login.userInfo\n        }).then(response => {\n          if (response.data === true) {\n            this.confirmMessage.confirm(this.props.intl.formatMessage({\n              id: \"IDS_CONFIRMATION\"\n            }), this.props.intl.formatMessage({\n              id: \"IDS_CONFIRMATION\"\n            }), this.props.intl.formatMessage({\n              id: \"IDS_TESTEXISTSINTESTGROUP\"\n            }), this.props.intl.formatMessage({\n              id: \"IDS_OK\"\n            }), this.props.intl.formatMessage({\n              id: \"IDS_CANCEL\"\n            }), () => this.onSaveTest(null, null), false, undefined);\n          }\n        }).catch(error => {\n          if (error.response.status === 500) {\n            toast.error(this.props.intl.formatMessage({\n              id: error.message\n            }));\n          } else {\n            toast.warn(this.props.intl.formatMessage({\n              id: error.response\n            }));\n          }\n        });\n      }\n    };\n\n    this.onSaveTest = (saveType, formRef) => {\n      const operation = this.props.Login.operation;\n      const selectedRecord = this.state.selectedRecord;\n\n      if (operation === \"reportinfotest\") {\n        this.onSaveReportInfoTest(null, null);\n      } else if (operation === \"update\") {\n        if (selectedRecord[\"ntransactionstatus\"] === transactionStatus.DEACTIVE) {\n          return rsapi.post(\"testmaster/validateTestExistenceInTestGroup\", {\n            ntestcode: this.props.Login.masterData.SelectedTest[\"ntestcode\"],\n            \"userinfo\": this.props.Login.userInfo\n          }).then(response => {\n            if (response.data === true) {\n              this.confirmMessage.confirm(this.props.intl.formatMessage({\n                id: \"IDS_CONFIRMATION\"\n              }), this.props.intl.formatMessage({\n                id: \"IDS_CONFIRMATION\"\n              }), this.props.intl.formatMessage({\n                id: \"IDS_TESTEXISTSINTESTGROUP\"\n              }), this.props.intl.formatMessage({\n                id: \"IDS_OK\"\n              }), this.props.intl.formatMessage({\n                id: \"IDS_CANCEL\"\n              }), () => this.onSaveValidatedTest(null, null), false, undefined);\n            } else {\n              this.onSaveValidatedTest(null, null);\n            }\n          }).catch(error => {\n            if (error.response.status === 500) {\n              toast.error(this.props.intl.formatMessage({\n                id: error.message\n              }));\n            } else {\n              toast.warn(this.props.intl.formatMessage({\n                id: error.response\n              }));\n            }\n          });\n        } else {\n          this.onSaveValidatedTest(null, null);\n        }\n      } else {\n        if (saveType === 2) {\n          this.onSaveValidatedTest(saveType, null);\n        } else {\n          this.onSaveValidatedTest(null, null);\n        }\n      }\n    };\n\n    this.onSaveValidatedTest = (saveType, formRef) => {\n      const operation = this.props.Login.operation;\n      let inputData = {};\n      let customobject = null;\n      const userInfo = this.props.Login.userInfo;\n      const selectedRecord = this.state.selectedRecord;\n      let testColumns = [{\n        \"testmaster\": [{\n          \"ntestcode\": \"int\"\n        }, {\n          \"ntestcategorycode\": \"input\"\n        }, {\n          \"nchecklistversioncode\": \"input\"\n        }, {\n          \"naccredited\": \"int\"\n        }, {\n          \"ntrainingneed\": \"int\"\n        }, {\n          \"ntransactionstatus\": \"int\"\n        }, {\n          \"stestname\": \"string\"\n        }, {\n          \"stestsynonym\": \"string\"\n        }, {\n          \"sshortname\": \"string\"\n        }, {\n          \"sdescription\": \"string\"\n        }, {\n          \"ncost\": \"float\"\n        }, {\n          \"stestplatform\": \"string\"\n        }, {\n          \"ntat\": \"int\"\n        }, {\n          \"ntatperiodcode\": \"input\"\n        }, {\n          \"ninterfacetypecode\": \"input\"\n        }]\n      }];\n\n      if (operation === \"create\") {\n        testColumns.push({\n          \"testparameter\": [{\n            \"ntestcode\": \"int\"\n          }, {\n            \"nparametertypecode\": \"input\"\n          }, {\n            \"nunitcode\": \"input\"\n          }, {\n            \"ndestinationunitcode\": \"input\"\n          }, //{ \"sconversionoperator\":\"string\" },\n          {\n            \"noperatorcode\": \"int\"\n          }, {\n            \"nconversionfactor\": \"float\"\n          }, {\n            \"sparametername\": \"input\"\n          }, {\n            \"sparametersynonym\": \"string\"\n          }, {\n            \"nroundingdigits\": \"int\"\n          }, {\n            \"objPredefinedParameter\": \"customobject\"\n          }, {\n            \"ndeltachecklimitcode\": \"float\"\n          }, {\n            \"ndeltacheck\": \"int\"\n          }, {\n            \"ndeltaunitcode\": \"input\"\n          }, {\n            \"ndeltacheckframe\": \"int\"\n          }, {\n            \"nresultaccuracycode\": \"input\"\n          }]\n        });\n        inputData = {\n          \"testmaster\": {},\n          \"testparameter\": {\n            nisadhocparameter: transactionStatus.NO,\n            nisvisible: transactionStatus.YES,\n            nstatus: transactionStatus.ACTIVE\n          },\n          \"testsection\": {},\n          \"testmethod\": {},\n          \"testinstrumentcategory\": {},\n          \"testpackagetest\": {}\n        };\n\n        if (this.props.Login.parameterData.npredefinedcode === transactionStatus.YES) {\n          customobject = {};\n          customobject[\"spredefinedname\"] = selectedRecord[\"spredefinedname\"].trim();\n          customobject[\"nstatus\"] = transactionStatus.ACTIVE;\n          customobject[\"ndefaultstatus\"] = transactionStatus.YES;\n          customobject[\"ngradecode\"] = selectedRecord[\"ngradecode\"] ? selectedRecord[\"ngradecode\"].value ? selectedRecord[\"ngradecode\"].value : -1 : -1; //     if (selectedRecord[\"sresultparacomment\"]) {\n          //     customobject[\"sresultparacomment\"] = selectedRecord[\"sresultparacomment\"].trim();}\n          // }\n\n          if (selectedRecord[\"spredefinedsynonym\"]) {\n            customobject[\"spredefinedsynonym\"] = selectedRecord[\"spredefinedsynonym\"].trim();\n          }\n        }\n      } else {\n        inputData = {\n          \"testmaster\": {}\n        };\n      }\n\n      inputData[\"userinfo\"] = userInfo;\n      inputData[\"testmaster\"][\"nstatus\"] = transactionStatus.ACTIVE;\n      inputData[\"testmaster\"][\"nsitecode\"] = userInfo.nmastersitecode; //ALPD-4831--Vignesh R(08-10-2024)--When nsettingcode 71 is set to 3, the Test Group is not required and is automatically updated by default in the relevant test group-related tables.\n\n      inputData[\"isQualisLite\"] = parseInt(this.props.Login.settings[71]);\n      ;\n      testColumns.forEach(function (items) {\n        const mapkey = Object.keys(items)[0];\n        const columns = Object.values(items)[0];\n        columns.map(item => {\n          const key = Object.keys(item)[0];\n          const value = Object.values(item)[0];\n\n          if (value === \"input\") {\n            return inputData[mapkey][key] = selectedRecord[key] ? selectedRecord[key].value ? selectedRecord[key].value : -1 : -1;\n          } else if (value === \"int\") {\n            return inputData[mapkey][key] = selectedRecord[key] ? selectedRecord[key] : 0;\n          } else if (value === \"string\") {\n            return inputData[mapkey][key] = selectedRecord[key] ? selectedRecord[key].trim() : \"\";\n          } else if (value === \"float\") {\n            return inputData[mapkey][key] = selectedRecord[key] ? selectedRecord[key] : 0;\n          } else if (value === \"customobject\") {\n            return inputData[mapkey][key] = customobject;\n          } else {\n            return null;\n          }\n        });\n      });\n      let postParam = undefined;\n\n      if (operation === \"create\") {\n        if (selectedRecord[\"nsectioncode\"]) {\n          inputData[\"testsection\"][\"nsectioncode\"] = selectedRecord[\"nsectioncode\"].value;\n          inputData[\"testsection\"][\"ndefaultstatus\"] = transactionStatus.YES;\n          inputData[\"testsection\"][\"nstatus\"] = transactionStatus.ACTIVE;\n        }\n\n        if (selectedRecord[\"nmethodcode\"]) {\n          inputData[\"testmethod\"][\"nmethodcode\"] = selectedRecord[\"nmethodcode\"].value;\n          inputData[\"testmethod\"][\"ndefaultstatus\"] = transactionStatus.YES;\n          inputData[\"testmethod\"][\"nstatus\"] = transactionStatus.ACTIVE;\n        }\n\n        if (selectedRecord[\"ninstrumentcatcode\"]) {\n          inputData[\"testinstrumentcategory\"][\"ninstrumentcatcode\"] = selectedRecord[\"ninstrumentcatcode\"].value;\n          inputData[\"testinstrumentcategory\"][\"ndefaultstatus\"] = transactionStatus.YES;\n          inputData[\"testinstrumentcategory\"][\"nstatus\"] = transactionStatus.ACTIVE;\n        }\n\n        if (selectedRecord[\"ntestpackagecode\"]) {\n          inputData[\"testpackagetest\"][\"ntestpackagecode\"] = selectedRecord[\"ntestpackagecode\"].value;\n          inputData[\"testpackagetest\"][\"ndefaultstatus\"] = transactionStatus.YES;\n          inputData[\"testpackagetest\"][\"nstatus\"] = transactionStatus.ACTIVE;\n        }\n      } else if (operation === \"copy\") {\n        inputData[\"testmaster\"][\"ntestcode\"] = this.props.Login.masterData.SelectedTest[\"ntestcode\"];\n      } else if (operation === \"update\") {\n        postParam = {\n          inputListName: \"TestMaster\",\n          selectedObject: \"SelectedTest\",\n          primaryKeyField: \"ntestcode\"\n        };\n      }\n\n      if ((operation === \"create\" || operation === \"update\") && inputData[\"testparameter\"]) {\n        inputData[\"testparameter\"][\"sdisplaystatus\"] = selectedRecord[\"nparametertypecode\"] && selectedRecord[\"nparametertypecode\"].label;\n      }\n\n      this.setState({\n        nfilterTestCategory: {\n          \"label\": selectedRecord.ntestcategorycode.label,\n          \"value\": selectedRecord.ntestcategorycode.value\n        }\n      });\n\n      if (operation !== \"update\") {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            defaultkeyname: \"parametereventkey\"\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } //  let valid = true;\n      // if (operation === \"update\" && (validateTest === undefined || validateTest === true)){       \n      // if (valid){\n\n\n      let clearSelectedRecordField = [];\n\n      if (operation === \"create\") {\n        clearSelectedRecordField = [{\n          \"controlType\": \"textbox\",\n          \"idsName\": \"IDS_TESTNAME\",\n          \"dataField\": \"stestname\",\n          \"width\": \"200px\",\n          \"mandatory\": true,\n          \"mandatoryLabel\": \"IDS_ENTER\",\n          \"isClearField\": true\n        }, {\n          \"controlType\": \"textarea\",\n          \"idsName\": \"IDS_TESTSYNONYM\",\n          \"dataField\": \"stestsynonym\",\n          \"width\": \"200px\",\n          \"mandatoryLabel\": \"IDS_ENTER\",\n          \"isClearField\": true\n        }, {\n          \"controlType\": \"textarea\",\n          \"idsName\": \"IDS_SHORTNAME\",\n          \"dataField\": \"sshortname\",\n          \"width\": \"200px\",\n          \"mandatoryLabel\": \"IDS_ENTER\",\n          \"isClearField\": true\n        }, {\n          \"controlType\": \"textarea\",\n          \"idsName\": \"IDS_PRICE\",\n          \"dataField\": \"ncost\",\n          \"width\": \"200px\",\n          \"mandatoryLabel\": \"IDS_ENTER\",\n          \"isClearField\": true\n        }, {\n          \"controlType\": \"textarea\",\n          \"idsName\": \"IDS_TESTPROCEDURE\",\n          \"dataField\": \"sdescription\",\n          \"width\": \"200px\",\n          \"mandatoryLabel\": \"IDS_ENTER\",\n          \"isClearField\": true\n        }, {\n          \"controlType\": \"textarea\",\n          \"idsName\": \"IDS_TAT\",\n          \"dataField\": \"ntat\",\n          \"width\": \"200px\",\n          \"mandatoryLabel\": \"IDS_ENTER\",\n          \"isClearField\": true\n        }, {\n          \"controlType\": \"textarea\",\n          \"idsName\": \"IDS_TESTPLATFORM\",\n          \"dataField\": \"stestplatform\",\n          \"width\": \"200px\",\n          \"mandatoryLabel\": \"IDS_ENTER\",\n          \"isClearField\": true\n        }, {\n          \"controlType\": \"textarea\",\n          \"idsName\": \"IDS_PARAMETERSYNONYM\",\n          \"dataField\": \"sparametersynonym\",\n          \"width\": \"200px\",\n          \"mandatoryLabel\": \"IDS_ENTER\",\n          \"isClearField\": true\n        }, {\n          \"controlType\": \"textarea\",\n          \"idsName\": \"IDS_ROUNDINGDIGITS\",\n          \"dataField\": \"nroundingdigits\",\n          \"width\": \"200px\",\n          \"mandatoryLabel\": \"IDS_ENTER\",\n          \"isClearField\": true\n        }, {\n          \"controlType\": \"textarea\",\n          \"idsName\": \"IDS_CONVERSIONOPERATOR\",\n          \"dataField\": \"soperator\",\n          \"width\": \"200px\",\n          \"mandatoryLabel\": \"IDS_ENTER\",\n          \"isClearField\": true\n        }, {\n          \"controlType\": \"textarea\",\n          \"idsName\": \"IDS_CONVERSIONFACTOR\",\n          \"dataField\": \"nconversionfactor\",\n          \"width\": \"200px\",\n          \"mandatoryLabel\": \"IDS_ENTER\",\n          \"isClearField\": true\n        }, {\n          \"controlType\": \"textarea\",\n          \"idsName\": \"IDS_DELTACHECKTIMEFRAME\",\n          \"dataField\": \"ndeltacheckframe\",\n          \"width\": \"200px\",\n          \"mandatoryLabel\": \"IDS_ENTER\",\n          \"isClearField\": true\n        }, {\n          \"controlType\": \"textarea\",\n          \"idsName\": \"IDS_DELTACHECKLIMIT\",\n          \"dataField\": \"ndeltachecklimitcode\",\n          \"width\": \"200px\",\n          \"mandatoryLabel\": \"IDS_ENTER\",\n          \"isClearField\": true\n        }, {\n          \"controlType\": \"textarea\",\n          \"idsName\": \"IDS_CODEDRESULT\",\n          \"dataField\": \"spredefinedname\",\n          \"width\": \"200px\",\n          \"mandatoryLabel\": \"IDS_ENTER\",\n          \"isClearField\": true\n        }, {\n          \"controlType\": \"textarea\",\n          \"idsName\": \"IDS_CODEDRESULTSYNONYM\",\n          \"dataField\": \"spredefinedsynonym\",\n          \"width\": \"200px\",\n          \"mandatoryLabel\": \"IDS_ENTER\",\n          \"isClearField\": true\n        }, {\n          \"controlType\": \"textarea\",\n          \"idsName\": \"IDS_RESULTPARAMETERCOMMENTS\",\n          \"dataField\": \"spredefinedcomments\",\n          \"width\": \"200px\",\n          \"mandatoryLabel\": \"IDS_ENTER\",\n          \"isClearField\": true\n        }, {\n          \"controlType\": \"textarea\",\n          \"idsName\": \"IDS_ALERTMESSAGE\",\n          \"dataField\": \"salertmessage\",\n          \"width\": \"200px\",\n          \"mandatoryLabel\": \"IDS_ENTER\",\n          \"isClearField\": true\n        }, {\n          \"controlType\": \"checkbox\",\n          \"idsName\": \"IDS_ACCREDITED\",\n          \"dataField\": \"naccredited\",\n          \"width\": \"200px\",\n          \"controlName\": \"ncategorybasedflow\",\n          \"isClearField\": true,\n          \"preSetValue\": 63\n        }, {\n          \"controlType\": \"checkbox\",\n          \"idsName\": \"IDS_ACTIVE\",\n          \"dataField\": \"ntransactionstatus\",\n          \"width\": \"150px\",\n          \"controlName\": \"ndefaultstatus\",\n          \"mandatoryLabel\": \"IDS_SELECT\",\n          \"isClearField\": true,\n          \"preSetValue\": 1\n        }, {\n          \"controlType\": \"checkbox\",\n          \"idsName\": \"IDS_TRAININGNEEDED\",\n          \"dataField\": \"ntrainingneed\",\n          \"width\": \"150px\",\n          \"controlName\": \"ndefaultstatus\",\n          \"mandatoryLabel\": \"IDS_SELECT\",\n          \"isClearField\": true,\n          \"preSetValue\": 4\n        }, {\n          \"controlType\": \"checkbox\",\n          \"idsName\": \"IDS_DELTACHECK\",\n          \"dataField\": \"ndeltacheck\",\n          \"width\": \"150px\",\n          \"controlName\": \"ndefaultstatus\",\n          \"mandatoryLabel\": \"IDS_SELECT\",\n          \"isClearField\": true,\n          \"preSetValue\": 4\n        }, {\n          \"controlType\": \"checkbox\",\n          \"idsName\": \"IDS_AlERTFORRESULTENTRY\",\n          \"dataField\": \"nneedresultentryalert\",\n          \"width\": \"150px\",\n          \"controlName\": \"ndefaultstatus\",\n          \"mandatoryLabel\": \"IDS_SELECT\",\n          \"isClearField\": true,\n          \"preSetValue\": 4\n        }, {\n          \"controlType\": \"checkbox\",\n          \"idsName\": \"IDS_SUBCODERESULTNEED\",\n          \"dataField\": \"nneedsubcodedresult\",\n          \"width\": \"150px\",\n          \"controlName\": \"ndefaultstatus\",\n          \"mandatoryLabel\": \"IDS_SELECT\",\n          \"isClearField\": true,\n          \"preSetValue\": 4\n        }];\n      }\n\n      if (operation === \"copy\") {\n        clearSelectedRecordField = [{\n          \"controlType\": \"textbox\",\n          \"idsName\": \"IDS_TESTNAME\",\n          \"dataField\": \"stestname\",\n          \"width\": \"200px\",\n          \"mandatory\": true,\n          \"mandatoryLabel\": \"IDS_ENTER\",\n          \"isClearField\": true\n        }, {\n          \"controlType\": \"textarea\",\n          \"idsName\": \"IDS_TESTSYNONYM\",\n          \"dataField\": \"stestsynonym\",\n          \"width\": \"200px\",\n          \"mandatoryLabel\": \"IDS_ENTER\",\n          \"isClearField\": true\n        }, {\n          \"controlType\": \"textarea\",\n          \"idsName\": \"IDS_SHORTNAME\",\n          \"dataField\": \"sshortname\",\n          \"width\": \"200px\",\n          \"mandatoryLabel\": \"IDS_ENTER\",\n          \"isClearField\": true\n        }, {\n          \"controlType\": \"textarea\",\n          \"idsName\": \"IDS_PRICE\",\n          \"dataField\": \"ncost\",\n          \"width\": \"200px\",\n          \"mandatoryLabel\": \"IDS_ENTER\",\n          \"isClearField\": true\n        }, {\n          \"controlType\": \"textarea\",\n          \"idsName\": \"IDS_TESTPROCEDURE\",\n          \"dataField\": \"sdescription\",\n          \"width\": \"200px\",\n          \"mandatoryLabel\": \"IDS_ENTER\",\n          \"isClearField\": true\n        }, {\n          \"controlType\": \"textarea\",\n          \"idsName\": \"IDS_TAT\",\n          \"dataField\": \"ntat\",\n          \"width\": \"200px\",\n          \"mandatoryLabel\": \"IDS_ENTER\",\n          \"isClearField\": true\n        }, {\n          \"controlType\": \"textarea\",\n          \"idsName\": \"IDS_TESTPLATFORM\",\n          \"dataField\": \"stestplatform\",\n          \"width\": \"200px\",\n          \"mandatoryLabel\": \"IDS_ENTER\",\n          \"isClearField\": true\n        }, {\n          \"controlType\": \"checkbox\",\n          \"idsName\": \"IDS_ACCREDITED\",\n          \"dataField\": \"naccredited\",\n          \"width\": \"200px\",\n          \"controlName\": \"ncategorybasedflow\",\n          \"isClearField\": true,\n          \"preSetValue\": 63\n        }, {\n          \"controlType\": \"checkbox\",\n          \"idsName\": \"IDS_ACTIVE\",\n          \"dataField\": \"ntransactionstatus\",\n          \"width\": \"150px\",\n          \"controlName\": \"ndefaultstatus\",\n          \"mandatoryLabel\": \"IDS_SELECT\",\n          \"isClearField\": true,\n          \"preSetValue\": 1\n        }, {\n          \"controlType\": \"checkbox\",\n          \"idsName\": \"IDS_TRAININGNEEDED\",\n          \"dataField\": \"ntrainingneed\",\n          \"width\": \"150px\",\n          \"controlName\": \"ndefaultstatus\",\n          \"mandatoryLabel\": \"IDS_SELECT\",\n          \"isClearField\": true,\n          \"preSetValue\": 4\n        } // { \"controlType\": \"checkbox\", \"idsName\": \"IDS_DELTACHECK\", \"dataField\": \"ndeltacheck\", \"width\": \"150px\",\"controlName\": \"ndefaultstatus\", \"mandatoryLabel\": \"IDS_SELECT\",\"isClearField\":true,\"preSetValue\":4 },\n        // { \"controlType\": \"checkbox\", \"idsName\": \"IDS_AlERTFORRESULTENTRY\", \"dataField\": \"nneedresultentryalert\", \"width\": \"150px\",\"controlName\": \"ndefaultstatus\", \"mandatoryLabel\": \"IDS_SELECT\",\"isClearField\":true,\"preSetValue\":4 },\n        // { \"controlType\": \"checkbox\", \"idsName\": \"IDS_SUBCODERESULTNEED\", \"dataField\": \"nneedsubcodedresult\", \"width\": \"150px\",\"controlName\": \"ndefaultstatus\", \"mandatoryLabel\": \"IDS_SELECT\",\"isClearField\":true,\"preSetValue\":4 }\n        ];\n      }\n\n      const inputParam = {\n        inputData: { ...inputData,\n          validatetest: false\n        },\n        classUrl: \"testmaster\",\n        operation: operation,\n        methodUrl: \"TestMaster\",\n        saveType,\n        formRef,\n        postParam,\n        searchRef: this.searchRef,\n        selectedRecord: { ...this.state.selectedRecord\n        }\n      };\n      const masterData = this.props.Login.masterData;\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData\n            },\n            saveType,\n            formRef\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, masterData, \"openModal\", {}, \"\", clearSelectedRecordField);\n      } // }\n\n    };\n\n    this.onSaveReportInfoTest = (saveType, formRef) => {\n      let postParam = undefined;\n      let inputData = [];\n      const selectedRecord = this.state.selectedRecord;\n      postParam = {\n        inputListName: \"TestMaster\",\n        selectedObject: \"SelectedTest\",\n        primaryKeyField: \"ntestcode\"\n      };\n      inputData[\"reportinfotest\"] = {};\n      inputData[\"reportinfotest\"][\"ntestcode\"] = this.props.Login.masterData.SelectedTest.ntestcode;\n      inputData[\"reportinfotest\"][\"sconfirmstatement\"] = selectedRecord.sconfirmstatement;\n      inputData[\"reportinfotest\"][\"sdecisionrule\"] = selectedRecord.sdecisionrule;\n      inputData[\"reportinfotest\"][\"ssopdescription\"] = selectedRecord.ssopdescription;\n      inputData[\"reportinfotest\"][\"stestcondition\"] = selectedRecord.stestcondition;\n      inputData[\"reportinfotest\"][\"sdeviationcomments\"] = selectedRecord.sdeviationcomments;\n      inputData[\"reportinfotest\"][\"smethodstandard\"] = selectedRecord.smethodstandard;\n      inputData[\"reportinfotest\"][\"sreference\"] = selectedRecord.sreference;\n      inputData[\"userinfo\"] = this.props.Login.userInfo;\n      let dataState = this.state.dataState;\n      const inputParam = {\n        classUrl: this.props.Login.inputParam.classUrl,\n        methodUrl: \"ReportInfoTest\",\n        displayName: this.props.Login.screenName,\n        inputData: inputData,\n        selectedId: this.state.selectedRecord[\"ntestcode\"],\n        operation: \"update\",\n        saveType,\n        formRef,\n        dataState,\n        searchRef: this.searchRef,\n        postParam: postParam\n      };\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData: this.props.Login.masterData\n            },\n            openModal: true,\n            screenName: this.props.intl.formatMessage({\n              id: \"IDS_REPORTINFOTEST\"\n            }),\n            operation: this.props.Login.operation\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\n      }\n    };\n\n    this.specDataStateChange = event => {\n      this.setState({\n        //TestMasterClinicalSpec\n        //dataResult: process(this.props.Login.masterData.TestGroupTestClinicalSpec || [], event.dataState),\n        dataResult: process(this.props.Login.masterData.TestMasterClinicalSpec || [], event.dataState),\n        clinicalspecDataState: event.dataState\n      });\n    };\n\n    this.validateEsign = () => {\n      const inputParam = {\n        inputData: {\n          \"userinfo\": { ...this.props.Login.userInfo,\n            sreason: this.state.selectedRecord[\"esigncomments\"],\n            nreasoncode: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].value,\n            spredefinedreason: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].label\n          },\n          password: this.state.selectedRecord[\"esignpassword\"]\n        },\n        screenData: this.props.Login.screenData\n      };\n      this.props.validateEsignCredential(inputParam, \"openModal\");\n    };\n\n    this.reloadData = () => {\n      // this.searchRef.current.value = \"\";\n      // const inputParam = {\n      //     inputData: { \"userinfo\": this.props.Login.userInfo },\n      //     classUrl: \"testmaster\",\n      //     methodUrl: \"TestMaster\",\n      //     userInfo: this.props.Login.userInfo,\n      //     displayName: \"IDS_TESTMASTER\"\n      // };\n      // this.props.callService(inputParam);\n      //ALPD-4803 done by Dhanushya RI,To check searchref key is present or not\n      if (this.searchRef && this.searchRef.current) {\n        this.searchRef.current.value = \"\";\n      }\n\n      if (this.state.nfilterTestCategory.value) {\n        let inputParam = {\n          inputData: {\n            //    ntestcategorycode: this.state.nfilterTestCategory.value,\n            ntestcategorycode: this.props.Login.masterData.SelectedTestCat && this.props.Login.masterData.SelectedTestCat.ntestcategorycode,\n            userinfo: this.props.Login.userInfo,\n            nfilterTestCategory: this.state.nfilterTestCategory\n          },\n          classUrl: \"testmaster\",\n          methodUrl: \"TestMasterByCategory\"\n        };\n        this.props.changeTestCategoryFilter(inputParam, this.props.Login.masterData.filterTestCategory);\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_TESTCATEGORYNOTAVAILABLE\"\n        }));\n      }\n    };\n\n    const clinicalspecDataState = {\n      skip: 0,\n      take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5,\n      group: [{\n        field: 'sgendername'\n      }]\n    };\n    this.state = {\n      selectedRecord: {},\n      error: \"\",\n      userRoleControlRights: [],\n      controlMap: new Map(),\n      skip: 0,\n      take: this.props.Login.settings ? this.props.Login.settings[3] : 10,\n      sidebarview: false,\n      clinicalspecDataState\n    };\n    this.searchRef = React.createRef();\n    this.searchFieldList = [\"stestname\", \"stestsynonym\", \"sdescription\", \"saccredited\", \"stestcategoryname\", \"ncost\", \"stransactionstatus\"];\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    if (props.Login.masterStatus !== \"\") {\n      if (props.Login.errorCode === 417 || props.Login.errorCode === 409) {\n        toast.warn(props.Login.masterStatus);\n        props.Login.masterStatus = \"\";\n      }\n    }\n\n    if (props.Login.error !== state.error) {\n      toast.error(props.Login.error);\n      props.Login.error = \"\";\n    }\n\n    return null;\n  }\n\n  render() {\n    //console.log(\"render in test:\", this.props.Login);\n    this.confirmMessage = new ConfirmMessage();\n    const {\n      TestMaster,\n      SelectedTest,\n      searchedData\n    } = this.props.Login.masterData;\n    const {\n      masterData,\n      userInfo,\n      testData,\n      parameterData,\n      otherTestData,\n      linkMaster,\n      editFiles\n    } = this.props.Login;\n    const addId = this.state.controlMap.has(\"AddTest\") && this.state.controlMap.get(\"AddTest\").ncontrolcode;\n    const editId = this.state.controlMap.has(\"EditTest\") && this.state.controlMap.get(\"EditTest\").ncontrolcode;\n    const deleteId = this.state.controlMap.has(\"DeleteTest\") && this.state.controlMap.get(\"DeleteTest\").ncontrolcode;\n    const copyId = this.state.controlMap.has(\"CopyTest\") && this.state.controlMap.get(\"CopyTest\").ncontrolcode;\n    const reportdetailId = this.state.controlMap.has(\"ReportInfoTest\") && this.state.controlMap.get(\"ReportInfoTest\").ncontrolcode;\n    const filterParam = {\n      inputListName: \"TestMaster\",\n      selectedObject: \"SelectedTest\",\n      primaryKeyField: \"ntestcode\",\n      fetchUrl: \"testmaster/getTestById\",\n      fecthInputObject: {\n        userinfo: this.props.Login.userInfo\n      },\n      masterData: this.props.Login.masterData,\n      searchFieldList: this.searchFieldList\n    };\n\n    if (this.props.Login.openModal) {\n      this.mandatoryFields = this.findMandatoryFields(this.props.Login.screenName, this.state.selectedRecord, this.props.Login.operation);\n    }\n\n    const breadCrumbData = this.state.filterData || [];\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"client-listing-wrap mtop-fixed-breadcrumb fixed_breadcrumd\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 17\n      }\n    }, breadCrumbData.length > 0 ? /*#__PURE__*/React.createElement(Affix, {\n      top: 53,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(BreadcrumbComponent, {\n      breadCrumbItem: breadCrumbData,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 29\n      }\n    })) : \"\", /*#__PURE__*/React.createElement(Row, {\n      noGutters: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: `${!this.props.sidebarview ? '4' : \"2\"}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(ListMaster, {\n      masterData: masterData,\n      screenName: this.props.intl.formatMessage({\n        id: \"IDS_TEST\"\n      }),\n      masterList: searchedData || TestMaster,\n      getMasterDetail: test => this.props.getTestMaster(test, userInfo, masterData),\n      selectedMaster: SelectedTest,\n      primaryKeyField: \"ntestcode\",\n      mainField: \"stestname\",\n      firstField: \"stestcategoryname\",\n      secondField: \"stransactionstatus\",\n      openModal: () => this.props.addTest(\"create\", SelectedTest, userInfo, addId, this.state.nfilterTestCategory),\n      filterColumnData: this.props.filterColumnData,\n      filterParam: filterParam,\n      userRoleControlRights: this.state.userRoleControlRights,\n      addId: addId,\n      searchRef: this.searchRef,\n      reloadData: this.reloadData,\n      needAccordianFilter: false //skip={this.state.skip}\n      //take={this.state.take}\n      //handlePageChange={this.handlePageChange}\n      ,\n      openFilter: this.openFilter,\n      closeFilter: this.closeFilter,\n      onFilterSubmit: this.onFilterSubmit,\n      showFilterIcon: true,\n      showFilter: this.props.Login.showFilter,\n      filterComponent: [{\n        \"IDS_TESTFILTER\": /*#__PURE__*/React.createElement(TestCategoryFilter, {\n          filterTestCategory: this.state.filterTestCategory || [],\n          nfilterTestCategory: this.state.nfilterTestCategory || {},\n          onComboChange: this.onComboChange,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 142,\n            columnNumber: 45\n          }\n        })\n      }],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 29\n      }\n    })), /*#__PURE__*/React.createElement(Col, {\n      md: `${!this.props.sidebarview ? '8' : \"10\"}`,\n      className: \"position-relative\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"sidebar-view-btn-block\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"sidebar-view-btn \",\n      onClick: this.props.parentFunction,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 33\n      }\n    }, !this.props.sidebarview ? /*#__PURE__*/React.createElement(\"i\", {\n      class: \"fa fa-less-than\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 41\n      }\n    }) : /*#__PURE__*/React.createElement(\"i\", {\n      class: \"fa fa-greater-than\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 41\n      }\n    }))), TestMaster && TestMaster.length > 0 && SelectedTest && Object.values(SelectedTest).length > 0 ? /*#__PURE__*/React.createElement(ContentPanel, {\n      className: \"panel-main-content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      className: \"border-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(Card.Header, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(Card.Title, {\n      className: \"product-title-main\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 45\n      }\n    }, SelectedTest.stestname), /*#__PURE__*/React.createElement(Card.Subtitle, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"d-flex product-category\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      className: \"product-title-sub flex-grow-1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(MediaLabel, {\n      className: `btn btn-outlined ${SelectedTest.ntransactionstatus === 1 ? \"outline-success\" : \"outline-secondary\"} btn-sm ml-3`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 57\n      }\n    }, SelectedTest.ntransactionstatus === 1 && /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faCheck,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 103\n      }\n    }), SelectedTest.stransactionstatus), /*#__PURE__*/React.createElement(MediaLabel, {\n      className: `btn-normal ${SelectedTest.naccredited === transactionStatus.ACCREDITED ? \"outline-success\" : \"normal-danger\"} btn-sm mr-3`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 57\n      }\n    }, SelectedTest.saccredited)), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"d-inline\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 53\n      }\n    }, parseInt(this.props.Login.settings[34]) === transactionStatus.YES ? /*#__PURE__*/React.createElement(Nav.Link, {\n      className: \"btn btn-circle outline-grey mr-2\",\n      name: \"reportdetailstestname\",\n      hidden: this.state.userRoleControlRights.indexOf(reportdetailId) === -1,\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_REPORTINFOTEST\"\n      }) //data-for=\"tooltip_list_wrap\"\n      ,\n      onClick: e => this.props.ReportInfoTest(\"\", \"reportinfotest\", \"ntestcode\", this.props.Login.masterData, this.props.Login.userInfo, reportdetailId),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(ReportEdit, {\n      className: \"custom_icons\",\n      width: \"20\",\n      height: \"20\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 61\n      }\n    })) : \"\", /*#__PURE__*/React.createElement(Nav.Link, {\n      className: \"btn btn-circle outline-grey mr-2\",\n      name: \"edittestname\",\n      hidden: this.state.userRoleControlRights.indexOf(editId) === -1,\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_EDIT\"\n      }) //data-for=\"tooltip_list_wrap\"\n      ,\n      onClick: () => this.props.addTest(\"update\", SelectedTest, userInfo, editId, this.state.nfilterTestCategory),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faPencilAlt,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 61\n      }\n    })), /*#__PURE__*/React.createElement(Nav.Link, {\n      className: \"btn btn-circle outline-grey mr-2 action-icons-wrap\",\n      name: \"deletetestname\",\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_DELETE\"\n      }) //   data-for=\"tooltip_list_wrap\"\n      ,\n      hidden: this.state.userRoleControlRights.indexOf(deleteId) === -1,\n      onClick: () => this.ConfirmDelete(SelectedTest, \"delete\", deleteId, \"TestMaster\", \"openModal\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faTrashAlt,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 61\n      }\n    })), /*#__PURE__*/React.createElement(Nav.Link, {\n      className: \"btn btn-circle outline-grey mr-2 \",\n      name: \"copytestname\",\n      hidden: this.state.userRoleControlRights.indexOf(copyId) === -1,\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_COPY\"\n      }) // data-for=\"tooltip_list_wrap\"\n      ,\n      onClick: () => this.props.addTest(\"copy\", SelectedTest, userInfo, copyId, this.state.nfilterTestCategory),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faCopy,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 61\n      }\n    })))))), /*#__PURE__*/React.createElement(Card.Body, {\n      className: \"form-static-wrap\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: \"4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 244,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(FormLabel, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 57\n      }\n    }, this.props.intl.formatMessage({\n      id: \"IDS_TESTSYNONYM\"\n    })), /*#__PURE__*/React.createElement(ReadOnlyText, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 57\n      }\n    }, SelectedTest.stestsynonym))), /*#__PURE__*/React.createElement(Col, {\n      md: \"4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 251,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(FormLabel, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 252,\n        columnNumber: 57\n      }\n    }, this.props.intl.formatMessage({\n      id: \"IDS_SHORTNAME\"\n    })), /*#__PURE__*/React.createElement(ReadOnlyText, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 57\n      }\n    }, SelectedTest.sshortname))), /*#__PURE__*/React.createElement(Col, {\n      md: \"4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 256,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 257,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(FormLabel, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 258,\n        columnNumber: 61\n      }\n    }, this.props.intl.formatMessage({\n      id: \"IDS_PRICE\"\n    })), /*#__PURE__*/React.createElement(ReadOnlyText, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 259,\n        columnNumber: 61\n      }\n    }, SelectedTest.ncost))), /*#__PURE__*/React.createElement(Col, {\n      md: \"4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 262,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 263,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(FormLabel, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 264,\n        columnNumber: 61\n      }\n    }, this.props.intl.formatMessage({\n      id: \"IDS_TAT\"\n    })), /*#__PURE__*/React.createElement(ReadOnlyText, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 265,\n        columnNumber: 61\n      }\n    }, SelectedTest.ntat !== -1 ? SelectedTest.ntat : '-', SelectedTest.ntat !== 0 && SelectedTest.ntatperiodcode !== -1 ? \" \".concat(SelectedTest.statperiodname) : \"\"))), /*#__PURE__*/React.createElement(Col, {\n      md: \"4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 269,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 270,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(FormLabel, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 271,\n        columnNumber: 61\n      }\n    }, this.props.intl.formatMessage({\n      id: \"IDS_TRAININGNEEDED\"\n    })), /*#__PURE__*/React.createElement(ReadOnlyText, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 272,\n        columnNumber: 61\n      }\n    }, SelectedTest.strainingneed, \" \"))), /*#__PURE__*/React.createElement(Col, {\n      md: \"4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 275,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 276,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(FormLabel, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 277,\n        columnNumber: 61\n      }\n    }, this.props.intl.formatMessage({\n      id: \"IDS_INTERFACETYPE\"\n    })), /*#__PURE__*/React.createElement(ReadOnlyText, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 278,\n        columnNumber: 61\n      }\n    }, SelectedTest.sinterfacetypename, \" \"))), /*#__PURE__*/React.createElement(Col, {\n      md: \"12\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 281,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 282,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(FormLabel, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 283,\n        columnNumber: 61\n      }\n    }, this.props.intl.formatMessage({\n      id: \"IDS_TESTPLATFORM\"\n    })), /*#__PURE__*/React.createElement(ReadOnlyText, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 284,\n        columnNumber: 61\n      }\n    }, SelectedTest.stestplatform))), /*#__PURE__*/React.createElement(Col, {\n      md: \"12\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 287,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 288,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(FormLabel, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 289,\n        columnNumber: 57\n      }\n    }, this.props.intl.formatMessage({\n      id: \"IDS_TESTPROCEDURE\"\n    })), /*#__PURE__*/React.createElement(ReadOnlyText, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 290,\n        columnNumber: 57\n      }\n    }, SelectedTest.sdescription)))), /*#__PURE__*/React.createElement(TestView, {\n      isFormulaOpen: this.props.Login.isFormulaOpen,\n      linkMaster: linkMaster,\n      editFiles: editFiles,\n      userInfo: this.props.Login.userInfo,\n      parameterData: parameterData || [],\n      otherTestData: otherTestData || [],\n      formulaData: this.props.Login.formulaData || {},\n      preDefinedFormula: this.props.Login.preDefinedFormula || {},\n      dataState: this.props.Login.dataState,\n      masterData: masterData,\n      inputParam: this.props.Login.inputParam,\n      controlMap: this.state.controlMap,\n      userRoleControlRights: this.state.userRoleControlRights,\n      esignRights: this.props.Login.userRoleControlRights,\n      screenData: this.props.Login.screenData,\n      openChildModal: this.props.Login.openChildModal,\n      showSaveContinue: this.props.Login.showSaveContinue,\n      operation: this.props.Login.operation,\n      screenName: this.props.Login.screenName,\n      selectedRecord: this.props.Login.selectedRecord,\n      loadEsign: this.props.Login.loadEsign,\n      ncontrolCode: this.props.Login.ncontrolCode,\n      crudMaster: this.props.crudMaster,\n      addParameterSpecification: this.props.addParameterSpecification,\n      getAvailableData: this.props.getAvailableData,\n      addCodedResult: this.props.addCodedResult,\n      addSubCodedResult: this.addSubCodedResult,\n      addFormula: this.props.addFormula,\n      openPredefinedModal: this.props.addPredefinedModal,\n      formulaChangeFunction: this.props.formulaChangeFunction,\n      addParameter: this.props.addParameter,\n      addContainerType: this.props.addContainerType,\n      deleteAction: this.deleteAction,\n      getTestDetails: this.props.getTestDetails,\n      updateStore: this.props.updateStore,\n      validateEsignCredential: this.props.validateEsignCredential,\n      addTestFile: this.props.addTestFile,\n      viewAttachment: this.props.viewAttachment,\n      settings: this.props.Login.settings,\n      getActiveTestContainerTypeById: this.props.getActiveTestContainerTypeById,\n      hideQualisForms: this.props.Login.hideQualisForms,\n      getUnitConversion: this.props.getUnitConversion,\n      getConversionOperator: this.props.getConversionOperator,\n      DestinationUnit: this.props.Login.DestinationUnit,\n      onFocus: this.handleFocus,\n      grade: this.props.Login.grade,\n      addClinicalSpecification: this.props.addClinicalSpecification,\n      clinicalspecDataState: this.state.clinicalspecDataState,\n      dataStateChange: this.specDataStateChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 312,\n        columnNumber: 45\n      }\n    })))) : \"\"))), this.props.Login.openModal && this.props.Login.operation && this.props.Login.inputParam && /*#__PURE__*/React.createElement(SlideOutModal, {\n      show: this.props.Login.openModal //size={this.props.Login.operation===\"create\" ? \"xl\" : \"lg\" }\n      ,\n      closeModal: this.closeModal,\n      operation: this.props.Login.operation,\n      inputParam: this.props.Login.inputParam,\n      screenName: this.props.Login.screenName,\n      showSaveContinue: true,\n      onSaveClick: this.onSaveTest,\n      esign: this.props.Login.loadEsign,\n      validateEsign: this.validateEsign,\n      selectedRecord: this.state.selectedRecord || {},\n      mandatoryFields: this.mandatoryFields || [],\n      addComponent: this.props.Login.loadEsign ? /*#__PURE__*/React.createElement(Esign, {\n        operation: this.props.Login.operation,\n        onInputOnChange: this.onEsignInputOnChange,\n        inputParam: this.props.Login.inputParam,\n        selectedRecord: this.state.selectedRecord || {},\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 390,\n          columnNumber: 29\n        }\n      }) : this.props.Login.operation === \"reportinfotest\" ? /*#__PURE__*/React.createElement(TestReportInfo, {\n        userInfo: this.props.Login.userInfo,\n        selectedRecord: this.state.selectedRecord || {},\n        onInputOnChange: this.onInputOnChange,\n        onNumericInputChange: this.onNumericInputChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 397,\n          columnNumber: 33\n        }\n      }) : /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 403,\n          columnNumber: 31\n        }\n      }, /*#__PURE__*/React.createElement(Col, {\n        md: this.props.Login.needOtherTest ? \"6\" : \"12\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 405,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(AddTest, {\n        selectedRecord: this.state.selectedRecord || {},\n        onInputOnChange: this.onInputOnChange // onActiveStatusChange={this.onActiveStatusChange}\n        ,\n        onNumericInputChange: this.onNumericInputChange,\n        onComboChange: this.onComboChange,\n        testData: testData,\n        otherTestData: otherTestData,\n        needOtherTest: this.props.Login.needOtherTest,\n        parameterData: parameterData,\n        hideQualisForms: this.props.Login.hideQualisForms,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 406,\n          columnNumber: 37\n        }\n      })), this.props.Login.needOtherTest && /*#__PURE__*/React.createElement(Col, {\n        md: 6,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 420,\n          columnNumber: 37\n        }\n      }, /*#__PURE__*/React.createElement(AddParameter, {\n        selectedRecord: this.state.selectedRecord || {},\n        onInputOnChange: this.onInputOnChange,\n        onNumericInputChange: this.onNumericInputChange,\n        onComboChange: this.onComboChange,\n        parameterData: parameterData,\n        userInfo: this.props.Login.userInfo,\n        onFocus: this.handleFocus,\n        DestinationUnit: this.props.Login.DestinationUnit,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 421,\n          columnNumber: 41\n        }\n      }))),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 376,\n        columnNumber: 21\n      }\n    }));\n  }\n\n  findMandatoryFields(screenName, selectedRecord, operation) {\n    if (screenName === \"IDS_TEST\") {\n      let mandatoryFields = [{\n        \"idsName\": \"IDS_TESTCATEGORY\",\n        \"dataField\": \"ntestcategorycode\",\n        \"width\": \"200px\",\n        \"mandatory\": true,\n        \"mandatoryLabel\": \"IDS_SELECT\",\n        \"controlType\": \"selectbox\"\n      }, {\n        \"idsName\": \"IDS_TESTNAME\",\n        \"dataField\": \"stestname\",\n        \"width\": \"200px\",\n        \"mandatory\": true,\n        \"mandatoryLabel\": \"IDS_ENTER\",\n        \"controlType\": \"textbox\"\n      }, {\n        \"idsName\": \"IDS_TESTSYNONYM\",\n        \"dataField\": \"stestsynonym\",\n        \"width\": \"200px\",\n        \"mandatory\": true,\n        \"mandatoryLabel\": \"IDS_ENTER\",\n        \"controlType\": \"textbox\"\n      }];\n\n      if (operation === \"create\") {\n        mandatoryFields.push({\n          \"idsName\": \"IDS_SECTION\",\n          \"dataField\": \"nsectioncode\",\n          \"width\": \"200px\",\n          \"mandatory\": true,\n          \"mandatoryLabel\": \"IDS_SELECT\",\n          \"controlType\": \"selectbox\"\n        }, {\n          \"idsName\": \"IDS_PARAMETERNAME\",\n          \"dataField\": \"sparametername\",\n          \"width\": \"200px\",\n          \"mandatory\": true,\n          \"mandatoryLabel\": \"IDS_ENTER\",\n          \"controlType\": \"textbox\"\n        }, {\n          \"idsName\": \"IDS_PARAMETERSYNONYM\",\n          \"dataField\": \"sparametersynonym\",\n          \"width\": \"200px\",\n          \"mandatory\": true,\n          \"mandatoryLabel\": \"IDS_ENTER\",\n          \"controlType\": \"textbox\"\n        }, {\n          \"idsName\": \"IDS_PARAMETERTYPE\",\n          \"dataField\": \"nparametertypecode\",\n          \"width\": \"200px\",\n          \"mandatory\": true,\n          \"mandatoryLabel\": \"IDS_SELECT\",\n          \"controlType\": \"selectbox\"\n        });\n\n        if (selectedRecord && Object.values(selectedRecord).length > 0 && selectedRecord[\"nparametertypecode\"]) {\n          if (selectedRecord[\"nparametertypecode\"].value === parameterType.NUMERIC) {\n            mandatoryFields.push({\n              \"idsName\": \"IDS_ROUNDINGDIGITS\",\n              \"dataField\": \"nroundingdigits\",\n              \"width\": \"200px\",\n              \"mandatory\": true,\n              \"mandatoryLabel\": \"IDS_ENTER\",\n              \"controlType\": \"textbox\"\n            }, {\n              \"idsName\": \"IDS_UNIT\",\n              \"dataField\": \"nunitcode\",\n              \"width\": \"200px\",\n              \"mandatory\": true,\n              \"mandatoryLabel\": \"IDS_SELECT\",\n              \"controlType\": \"selectbox\"\n            });\n          } else if (selectedRecord[\"nparametertypecode\"].value === parameterType.PREDEFINED) {\n            mandatoryFields.push({\n              \"idsName\": \"IDS_CODEDRESULT\",\n              \"dataField\": \"spredefinedname\",\n              \"width\": \"200px\",\n              \"mandatory\": true,\n              \"mandatoryLabel\": \"IDS_ENTER\",\n              \"controlType\": \"textbox\"\n            }, {\n              \"idsName\": \"IDS_ACTUALRESULT\",\n              \"dataField\": \"ngradecode\",\n              \"width\": \"200px\",\n              \"mandatory\": true,\n              \"mandatoryLabel\": \"IDS_SELECT\",\n              \"controlType\": \"selectbox\"\n            }, {\n              \"idsName\": \"IDS_CODEDRESULTSYNONYM\",\n              \"dataField\": \"spredefinedsynonym\",\n              \"width\": \"200px\",\n              \"mandatory\": true,\n              \"mandatoryLabel\": \"IDS_ENTER\",\n              \"controlType\": \"textbox\"\n            });\n          }\n        }\n      }\n\n      mandatoryFields.forEach(item => item.mandatory === true && mandatoryFields.push(item));\n      return mandatoryFields;\n    } else if (operation === \"reportinfotest\") {\n      let mandatoryFields = [];\n      mandatoryFields.push({\n        \"idsName\": \"IDS_CONFIRMSTATEMENT\",\n        \"dataField\": \"sconfirmstatement\",\n        \"width\": \"200px\",\n        \"mandatory\": true,\n        \"mandatoryLabel\": \"IDS_ENTER\",\n        \"controlType\": \"textbox\"\n      }, {\n        \"idsName\": \"IDS_DECISIONRULE\",\n        \"dataField\": \"sdecisionrule\",\n        \"width\": \"200px\",\n        \"mandatory\": true,\n        \"mandatoryLabel\": \"IDS_ENTER\",\n        \"controlType\": \"textbox\"\n      }, {\n        \"idsName\": \"IDS_SOPDESCRIPTION\",\n        \"dataField\": \"ssopdescription\",\n        \"width\": \"200px\",\n        \"mandatory\": true,\n        \"mandatoryLabel\": \"IDS_ENTER\",\n        \"controlType\": \"textbox\"\n      }, {\n        \"idsName\": \"IDS_TESTCONDITION\",\n        \"dataField\": \"stestcondition\",\n        \"width\": \"200px\",\n        \"mandatory\": true,\n        \"mandatoryLabel\": \"IDS_ENTER\",\n        \"controlType\": \"textbox\"\n      }, {\n        \"idsName\": \"IDS_DEVIATIONCOMMENTS\",\n        \"dataField\": \"sdeviationcomments\",\n        \"width\": \"200px\",\n        \"mandatory\": true,\n        \"mandatoryLabel\": \"IDS_ENTER\",\n        \"controlType\": \"textbox\"\n      }, {\n        \"idsName\": \"IDS_METHODSTANDARD\",\n        \"dataField\": \"smethodstandard\",\n        \"width\": \"200px\",\n        \"mandatory\": true,\n        \"mandatoryLabel\": \"IDS_ENTER\",\n        \"controlType\": \"textbox\"\n      }, {\n        \"idsName\": \"IDS_REFERENCE\",\n        \"dataField\": \"sreference\",\n        \"width\": \"200px\",\n        \"mandatory\": true,\n        \"mandatoryLabel\": \"IDS_ENTER\",\n        \"controlType\": \"textbox\"\n      });\n      return mandatoryFields;\n    } else {\n      return [];\n    }\n  }\n\n  handleFocus(e) {\n    e.target.select();\n  }\n\n  componentDidUpdate(previousProps) {\n    let isComponentUpdated = false;\n    let selectedRecord = this.state.selectedRecord || {};\n\n    if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\n      selectedRecord = this.props.Login.selectedRecord;\n      isComponentUpdated = true;\n    }\n\n    let userRoleControlRights = this.state.userRoleControlRights || [];\n    let controlMap = this.state.controlMap || new Map();\n\n    if (this.props.Login.userInfo && this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\n      const nformCode = this.props.Login.userInfo.nformcode;\n\n      if (this.props.Login.userRoleControlRights) {\n        this.props.Login.userRoleControlRights[nformCode] && Object.values(this.props.Login.userRoleControlRights[nformCode]).map(item => userRoleControlRights.push(item.ncontrolcode));\n      }\n\n      controlMap = getControlMap(this.props.Login.userRoleControlRights, nformCode);\n      isComponentUpdated = true;\n    }\n\n    let nfilterTestCategory = this.state.nfilterTestCategory || {};\n    let filterTestCategory = this.state.filterTestCategory || {};\n\n    if (this.props.Login.masterData.filterTestCategory !== previousProps.Login.masterData.filterTestCategory) {\n      const testCategoryMap = constructOptionList(this.props.Login.masterData.filterTestCategory || [], \"ntestcategorycode\", \"stestcategoryname\", 'ntestcategorycode', 'ascending', false);\n      filterTestCategory = testCategoryMap.get(\"OptionList\");\n\n      if (testCategoryMap.get(\"DefaultValue\")) {\n        nfilterTestCategory = testCategoryMap.get(\"DefaultValue\");\n      } else if (filterTestCategory && filterTestCategory.length > 0) {\n        nfilterTestCategory = filterTestCategory[0];\n      }\n\n      isComponentUpdated = true;\n    } else if (this.props.Login.masterData.nfilterTestCategory !== previousProps.Login.masterData.nfilterTestCategory) {\n      nfilterTestCategory = this.props.Login.masterData.nfilterTestCategory;\n      isComponentUpdated = true;\n    }\n\n    if (isComponentUpdated) {\n      this.setState({\n        nfilterTestCategory,\n        userRoleControlRights,\n        controlMap,\n        selectedRecord,\n        filterTestCategory\n      });\n    }\n\n    if (this.props.Login.masterData !== previousProps.Login.masterData) {\n      const filterData = this.generateBreadCrumData();\n      this.setState({\n        filterData\n      });\n    }\n  }\n\n  generateBreadCrumData() {\n    const breadCrumbData = [];\n\n    if (this.props.Login.masterData && this.props.Login.masterData.filterTestCategory) {\n      breadCrumbData.push({\n        \"label\": \"IDS_TESTCATEGORY\",\n        \"value\": this.props.Login.masterData.SelectedTestCat ? this.props.Login.masterData.SelectedTestCat.stestcategoryname : \"NA\"\n      });\n    }\n\n    return breadCrumbData;\n  }\n\n  componentWillUnmount() {\n    const updateInfo = {\n      typeName: DEFAULT_RETURN,\n      data: {\n        masterData: [],\n        inputParam: undefined,\n        operation: null,\n        modalName: undefined,\n        testData: {},\n        parameterData: {},\n        otherTestData: {},\n        formulaData: {}\n      }\n    };\n    this.props.updateStore(updateInfo);\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    Login: state.Login\n  };\n};\n\nexport default connect(mapStateToProps, {\n  callService,\n  crudMaster,\n  getTestMaster,\n  addTest,\n  updateStore,\n  formulaChangeFunction,\n  filterColumnData,\n  getTestDetails,\n  addParameter,\n  validateEsignCredential,\n  addCodedResult,\n  addParameterSpecification,\n  addClinicalSpecification,\n  getAvailableData,\n  addFormula,\n  changeTestCategoryFilter,\n  addTestFile,\n  viewAttachment,\n  getActiveTestContainerTypeById,\n  addContainerType,\n  ReportInfoTest,\n  getUnitConversion,\n  getConversionOperator,\n  addPredefinedModal\n})(injectIntl(TestMaster));","map":{"version":3,"sources":["E:/WorkingFolder/React_Postgres/ALPD/branches/SOURCE-513-PROD/SOURCE-513-ALPD-5294/QuaLISWeb/src/pages/testmanagement/TestMaster.jsx"],"names":["React","Component","Row","Col","Card","Nav","FormGroup","FormLabel","connect","rsapi","callService","crudMaster","getTestMaster","addTest","updateStore","getTestDetails","formulaChangeFunction","filterColumnData","addParameter","validateEsignCredential","addCodedResult","addParameterSpecification","getAvailableData","addFormula","addClinicalSpecification","changeTestCategoryFilter","addTestFile","viewAttachment","getActiveTestContainerTypeById","addContainerType","ReportInfoTest","getUnitConversion","getConversionOperator","addPredefinedModal","TestView","injectIntl","toast","AddParameter","AddTest","TestReportInfo","SlideOutModal","getControlMap","showEsign","constructOptionList","TestCategoryFilter","ListMaster","faTrashAlt","faPencilAlt","faCopy","faCheck","FontAwesomeIcon","ReadOnlyText","ContentPanel","MediaLabel","DEFAULT_RETURN","Esign","parameterType","transactionStatus","ConfirmMessage","BreadcrumbComponent","Affix","process","TestMaster","constructor","props","sidebarExpandCollapse","setState","sidebarview","handlePageChange","event","skip","take","ConfirmDelete","item","operation","ncontrolCode","methodUrl","modalName","confirmMessage","confirm","intl","formatMessage","id","deleteAction","onComboChange","comboData","fieldName","caseNo","selectedRecord","state","value","nunitcode","Login","masterData","userInfo","ndestinationunitcode","needUnit","needRoundingDigit","needCodedResult","needActualResult","npredefinedcode","NO","parameterData","YES","defaultUnit","defaultGrade","parameterInfo","typeName","data","nfilterTestCategory","searchRef","current","openFilter","showFilter","updateInfo","closeFilter","console","log","onFilterSubmit","inputParam","inputData","ntestcategorycode","userinfo","classUrl","filterTestCategory","warn","onEsignInputOnChange","target","type","name","checked","onInputOnChange","optional","deltaperiod","filter","x","ndefaultstatus","label","onNumericInputChange","test","closeModal","loadEsign","openModal","closeFormulaModal","addformula","addSubCodedResult","selected","toLowerCase","parseInt","settings","screenName","postParam","inputListName","selectedObject","primaryKeyField","primaryKeyValue","ntestcode","fetchUrl","fecthInputObject","userRoleControlRights","nformcode","screenData","validateTestExistenceInTestGroup","post","SelectedTest","then","response","onSaveTest","undefined","catch","error","status","message","saveType","formRef","onSaveReportInfoTest","DEACTIVE","onSaveValidatedTest","customobject","testColumns","push","nisadhocparameter","nisvisible","nstatus","ACTIVE","trim","nmastersitecode","forEach","items","mapkey","Object","keys","columns","values","map","key","defaultkeyname","clearSelectedRecordField","validatetest","sconfirmstatement","sdecisionrule","ssopdescription","stestcondition","sdeviationcomments","smethodstandard","sreference","dataState","displayName","selectedId","specDataStateChange","dataResult","TestMasterClinicalSpec","clinicalspecDataState","validateEsign","sreason","nreasoncode","spredefinedreason","password","reloadData","SelectedTestCat","group","field","controlMap","Map","createRef","searchFieldList","getDerivedStateFromProps","masterStatus","errorCode","render","searchedData","testData","otherTestData","linkMaster","editFiles","addId","has","get","ncontrolcode","editId","deleteId","copyId","reportdetailId","filterParam","mandatoryFields","findMandatoryFields","breadCrumbData","filterData","length","parentFunction","stestname","ntransactionstatus","stransactionstatus","naccredited","ACCREDITED","saccredited","indexOf","e","stestsynonym","sshortname","ncost","ntat","ntatperiodcode","concat","statperiodname","strainingneed","sinterfacetypename","stestplatform","sdescription","isFormulaOpen","formulaData","preDefinedFormula","openChildModal","showSaveContinue","hideQualisForms","DestinationUnit","handleFocus","grade","needOtherTest","NUMERIC","PREDEFINED","mandatory","select","componentDidUpdate","previousProps","isComponentUpdated","nformCode","testCategoryMap","generateBreadCrumData","stestcategoryname","componentWillUnmount","mapStateToProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { Row, Col, Card, Nav, FormGroup, FormLabel } from 'react-bootstrap';\r\nimport { connect } from 'react-redux';\r\nimport rsapi from '../../rsapi';\r\n\r\nimport {\r\n    callService, crudMaster, getTestMaster, addTest, updateStore, getTestDetails, formulaChangeFunction, filterColumnData,\r\n    addParameter, validateEsignCredential, addCodedResult, addParameterSpecification, getAvailableData, addFormula,addClinicalSpecification,\r\n    changeTestCategoryFilter, addTestFile, viewAttachment, getActiveTestContainerTypeById, addContainerType, ReportInfoTest, getUnitConversion,\r\n    getConversionOperator,addPredefinedModal\r\n} from '../../actions'\r\nimport TestView from './TestView';\r\nimport { injectIntl } from 'react-intl';\r\nimport { toast } from 'react-toastify';\r\nimport AddParameter from './AddParameter';\r\nimport AddTest from '../../pages/testmanagement/AddTest';\r\nimport TestReportInfo from \"../../pages/testmanagement/TestReportInfo\";\r\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\r\nimport { getControlMap, showEsign, constructOptionList } from '../../components/CommonScript';\r\nimport TestCategoryFilter from './TestCategoryFilter';\r\nimport ListMaster from '../../components/list-master/list-master.component';\r\nimport { faTrashAlt, faPencilAlt, faCopy, faCheck } from '@fortawesome/free-solid-svg-icons';\r\nimport { ReactComponent as ReportEdit } from '../../assets/image/report-edit.svg';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { ReadOnlyText, ContentPanel, MediaLabel } from '../../components/App.styles';\r\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\r\nimport Esign from '../audittrail/Esign';\r\n// import ConfirmDialog from '../../components/confirm-alert/confirm-alert.component';\r\nimport { parameterType, transactionStatus } from '../../components/Enumeration';\r\nimport 'react-perfect-scrollbar/dist/css/styles.css';\r\n// import { Tooltip } from '@progress/kendo-react-tooltip';\r\n\r\nimport ConfirmMessage from '../../components/confirm-alert/confirm-message.component';\r\nimport BreadcrumbComponent from '../../components/Breadcrumb.Component';\r\nimport { Affix } from 'rsuite';\r\n//ALPD-4652 Saravanan\r\nimport { process } from '@progress/kendo-data-query';\r\n// import ReactTooltip from 'react-tooltip';\r\n\r\nclass TestMaster extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        const clinicalspecDataState = { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5, group: [{ field: 'sgendername' }] };\r\n        this.state = ({\r\n            selectedRecord: {},\r\n            error: \"\",\r\n            userRoleControlRights: [],\r\n            controlMap: new Map(),\r\n            skip: 0,\r\n            take: this.props.Login.settings ? this.props.Login.settings[3] : 10,\r\n            sidebarview:false,clinicalspecDataState\r\n        });\r\n        this.searchRef = React.createRef();\r\n        this.searchFieldList = [\"stestname\", \"stestsynonym\", \"sdescription\", \"saccredited\", \"stestcategoryname\", \"ncost\", \"stransactionstatus\"]\r\n    }\r\n    \r\n    sidebarExpandCollapse = () => {\r\n      //  alert('ss');\r\n       // this.setState({sidebarviewstate: !this.state.sidebarviewstate}) \r\n       this.setState({\r\n        sidebarview: true\r\n    })          \r\n       // sidebarviewstate:true\r\n    }\r\n\r\n    static getDerivedStateFromProps(props, state) {\r\n        if (props.Login.masterStatus !== \"\") {\r\n            if (props.Login.errorCode === 417 || props.Login.errorCode === 409) {\r\n                toast.warn(props.Login.masterStatus);\r\n                props.Login.masterStatus = \"\";\r\n            }\r\n        }\r\n        if (props.Login.error !== state.error) {\r\n            toast.error(props.Login.error)\r\n            props.Login.error = \"\";\r\n        }\r\n        return null;\r\n    }\r\n    render() {\r\n\r\n        //console.log(\"render in test:\", this.props.Login);\r\n        this.confirmMessage = new ConfirmMessage();\r\n\r\n        const { TestMaster, SelectedTest, searchedData } = this.props.Login.masterData;\r\n        const { masterData, userInfo, testData, parameterData, otherTestData, linkMaster, editFiles } = this.props.Login;\r\n        const addId = this.state.controlMap.has(\"AddTest\") && this.state.controlMap.get(\"AddTest\").ncontrolcode;\r\n        const editId = this.state.controlMap.has(\"EditTest\") && this.state.controlMap.get(\"EditTest\").ncontrolcode;\r\n        const deleteId = this.state.controlMap.has(\"DeleteTest\") && this.state.controlMap.get(\"DeleteTest\").ncontrolcode;\r\n        const copyId = this.state.controlMap.has(\"CopyTest\") && this.state.controlMap.get(\"CopyTest\").ncontrolcode;\r\n        const reportdetailId= this.state.controlMap.has(\"ReportInfoTest\")  && this.state.controlMap.get(\"ReportInfoTest\").ncontrolcode;\r\n\r\n        const filterParam = {\r\n            inputListName: \"TestMaster\", selectedObject: \"SelectedTest\", primaryKeyField: \"ntestcode\",\r\n            fetchUrl: \"testmaster/getTestById\", fecthInputObject: { userinfo: this.props.Login.userInfo },\r\n            masterData: this.props.Login.masterData, searchFieldList: this.searchFieldList\r\n        };\r\n        if (this.props.Login.openModal) {\r\n            this.mandatoryFields = this.findMandatoryFields(this.props.Login.screenName, this.state.selectedRecord, this.props.Login.operation)\r\n        }\r\n        const breadCrumbData = this.state.filterData || [];\r\n        return (\r\n            <>\r\n                {/* Start of get display */}\r\n                <div className=\"client-listing-wrap mtop-fixed-breadcrumb fixed_breadcrumd\">\r\n                    {breadCrumbData.length > 0 ?\r\n                        <Affix top={53}>\r\n                            <BreadcrumbComponent breadCrumbItem={breadCrumbData} />\r\n                        </Affix> : \"\"\r\n                    }\r\n                    <Row noGutters={true}>\r\n                        <Col md={`${!this.props.sidebarview ? '4' : \"2\"}`}> \r\n                            <ListMaster\r\n                                masterData={masterData}\r\n                                screenName={this.props.intl.formatMessage({ id: \"IDS_TEST\" })}\r\n                                masterList={searchedData || TestMaster}\r\n                                getMasterDetail={(test) => this.props.getTestMaster(test, userInfo, masterData)}\r\n                                selectedMaster={SelectedTest}\r\n                                primaryKeyField=\"ntestcode\"\r\n                                mainField=\"stestname\"\r\n                                firstField=\"stestcategoryname\"\r\n                                secondField=\"stransactionstatus\"\r\n                                openModal={() => this.props.addTest(\"create\", SelectedTest, userInfo, addId, this.state.nfilterTestCategory)}\r\n                                filterColumnData={this.props.filterColumnData}\r\n                                filterParam={filterParam}\r\n                                userRoleControlRights={this.state.userRoleControlRights}\r\n                                addId={addId}\r\n                                searchRef={this.searchRef}\r\n                                reloadData={this.reloadData}\r\n                                needAccordianFilter={false}\r\n                                //skip={this.state.skip}\r\n                                //take={this.state.take}\r\n                                //handlePageChange={this.handlePageChange}\r\n                                openFilter={this.openFilter}\r\n                                closeFilter={this.closeFilter}\r\n                                onFilterSubmit={this.onFilterSubmit}\r\n                                showFilterIcon={true}\r\n                                showFilter={this.props.Login.showFilter}\r\n                                filterComponent={[\r\n                                    {\r\n                                        \"IDS_TESTFILTER\":\r\n                                            <TestCategoryFilter\r\n                                                filterTestCategory={this.state.filterTestCategory || []}\r\n                                                nfilterTestCategory={this.state.nfilterTestCategory || {}}\r\n                                                onComboChange={this.onComboChange}\r\n                                            />\r\n                                    }\r\n                                ]}\r\n                            />\r\n                        </Col>\r\n                        <Col md={`${!this.props.sidebarview ? '8' : \"10\"}`} className=\"position-relative\">\r\n                            <div className=\"sidebar-view-btn-block\">\r\n                                <div className=\"sidebar-view-btn \" onClick={this.props.parentFunction}>\r\n                                    {!this.props.sidebarview ?                    \r\n                                        <i class=\"fa fa-less-than\"></i> :\r\n                                        <i class=\"fa fa-greater-than\"></i> \r\n                                    }\r\n                                </div>\r\n                            </div>\r\n                            {TestMaster && TestMaster.length > 0 && SelectedTest && Object.values(SelectedTest).length > 0 ?\r\n                                <ContentPanel className=\"panel-main-content\">\r\n                                    <Card className=\"border-0\">\r\n                                        <Card.Header>\r\n                                            {/* <ReactTooltip place=\"bottom\" globalEventOff='click' /> */}\r\n                                            <Card.Title className=\"product-title-main\">\r\n                                                {SelectedTest.stestname}\r\n                                            </Card.Title>\r\n                                            <Card.Subtitle>\r\n                                                {/* <Row>\r\n                                                <Col md={8}> */}\r\n                                                <div className=\"d-flex product-category\">\r\n                                                    <h2 className=\"product-title-sub flex-grow-1\">\r\n                                                        <MediaLabel className={`btn btn-outlined ${SelectedTest.ntransactionstatus === 1 ? \"outline-success\" : \"outline-secondary\"} btn-sm ml-3`}>\r\n                                                            {SelectedTest.ntransactionstatus === 1 && <FontAwesomeIcon icon={faCheck}></FontAwesomeIcon>}\r\n                                                            {SelectedTest.stransactionstatus}\r\n                                                        </MediaLabel>\r\n                                                        <MediaLabel className={`btn-normal ${SelectedTest.naccredited === transactionStatus.ACCREDITED ? \"outline-success\" : \"normal-danger\"} btn-sm mr-3`}>\r\n                                                            {SelectedTest.saccredited}\r\n                                                        </MediaLabel>\r\n                                                    </h2>\r\n                                                    {/* </Col>\r\n                                                <Col md=\"4\"> */}\r\n                                                    {/* <Tooltip position=\"bottom\" anchorElement=\"target\" openDelay={100} parentTitle={true}> */}\r\n                                                    <div className=\"d-inline\">\r\n                                                        {/* Don't delete these commented lines because additional info feature is needed for Agaram LIMS */}\r\n                                                        {/* Start Here */}\r\n                                                        {/* <Nav.Link className=\"btn btn-circle outline-grey mr-2 action-icons-wrap\" href=\"\" >  \r\n                                                            <FontAwesomeIcon icon={faEye} className=\"ActionIconColor\" onClick={(e)=>this.viewAdditionalInfo(e)} />\r\n                                                        </Nav.Link> */}\r\n                                                        {/* End Here */}\r\n\r\n                                                        { \r\n                                                        parseInt(this.props.Login.settings[34]) === transactionStatus.YES ?\r\n                                                        <Nav.Link className=\"btn btn-circle outline-grey mr-2\" name=\"reportdetailstestname\"\r\n                                                            hidden={this.state.userRoleControlRights.indexOf(reportdetailId) === -1}\r\n                                                            data-tip={this.props.intl.formatMessage({ id: \"IDS_REPORTINFOTEST\" })}\r\n                                                            //data-for=\"tooltip_list_wrap\"\r\n                                                            onClick={(e) => this.props.ReportInfoTest(\"\", \"reportinfotest\", \"ntestcode\", this.props.Login.masterData, this.props.Login.userInfo, reportdetailId)}>\r\n                                                            <ReportEdit className=\"custom_icons\" width=\"20\" height=\"20\" />\r\n                                                        </Nav.Link>     \r\n                                                        : \"\"}\r\n\r\n                                                        <Nav.Link className=\"btn btn-circle outline-grey mr-2\" name=\"edittestname\"\r\n                                                            hidden={this.state.userRoleControlRights.indexOf(editId) === -1}\r\n                                                            data-tip={this.props.intl.formatMessage({ id: \"IDS_EDIT\" })}\r\n                                                            //data-for=\"tooltip_list_wrap\"\r\n                                                            onClick={() => this.props.addTest(\"update\", SelectedTest, userInfo, editId, this.state.nfilterTestCategory)}>\r\n                                                            <FontAwesomeIcon icon={faPencilAlt} />\r\n                                                        </Nav.Link>\r\n                                                        <Nav.Link className=\"btn btn-circle outline-grey mr-2 action-icons-wrap\" name=\"deletetestname\"\r\n                                                            data-tip={this.props.intl.formatMessage({ id: \"IDS_DELETE\" })}\r\n                                                         //   data-for=\"tooltip_list_wrap\"\r\n                                                            hidden={this.state.userRoleControlRights.indexOf(deleteId) === -1}\r\n                                                            onClick={() => this.ConfirmDelete(SelectedTest, \"delete\", deleteId, \"TestMaster\", \"openModal\")}\r\n                                                        >\r\n                                                            <FontAwesomeIcon icon={faTrashAlt} />\r\n                                                            {/* <ConfirmDialog\r\n                                                                    name=\"deleteMessage\"\r\n                                                                    message={this.props.intl.formatMessage({ id: \"IDS_DEFAULTCONFIRMMSG\" })}\r\n                                                                    doLabel={this.props.intl.formatMessage({ id: \"IDS_OK\" })}\r\n                                                                    doNotLabel={this.props.intl.formatMessage({ id: \"IDS_CANCEL\" })}\r\n                                                                    icon={faTrashAlt}\r\n                                                                    // title={this.props.intl.formatMessage({ id: \"IDS_DELETE\" })}\r\n                                                                    hidden={this.props.userRoleControlRights && this.props.userRoleControlRights.indexOf(deleteId) === -1}\r\n                                                                    handleClickDelete={() => this.deleteAction(SelectedTest, \"delete\", deleteId, \"TestMaster\", \"openModal\")}\r\n                                                                /> */}\r\n                                                        </Nav.Link>\r\n                                                        <Nav.Link className=\"btn btn-circle outline-grey mr-2 \" name=\"copytestname\"\r\n                                                            hidden={this.state.userRoleControlRights.indexOf(copyId) === -1}\r\n                                                            data-tip={this.props.intl.formatMessage({ id: \"IDS_COPY\" })}\r\n                                                           // data-for=\"tooltip_list_wrap\"\r\n                                                            onClick={() => this.props.addTest(\"copy\", SelectedTest, userInfo, copyId, this.state.nfilterTestCategory)}>\r\n                                                            <FontAwesomeIcon icon={faCopy} />\r\n                                                        </Nav.Link>\r\n                                                    </div>\r\n                                                    {/* </Tooltip> */}\r\n                                                </div>\r\n                                                {/* </Col>\r\n                                            </Row> */}\r\n                                            </Card.Subtitle>\r\n                                        </Card.Header>\r\n                                        <Card.Body className=\"form-static-wrap\">\r\n                                            <Row>\r\n                                                <Col md=\"4\">\r\n                                                    <FormGroup>\r\n                                                        <FormLabel>{this.props.intl.formatMessage({ id: \"IDS_TESTSYNONYM\" })}</FormLabel>\r\n                                                        <ReadOnlyText>{SelectedTest.stestsynonym}</ReadOnlyText>\r\n                                                    </FormGroup>\r\n                                                </Col>\r\n                                                <Col md=\"4\">\r\n                                                    <FormGroup>\r\n                                                        <FormLabel>{this.props.intl.formatMessage({ id: \"IDS_SHORTNAME\" })}</FormLabel>\r\n                                                        <ReadOnlyText>{SelectedTest.sshortname}</ReadOnlyText>\r\n                                                    </FormGroup>\r\n                                                </Col>\r\n                                                <Col md=\"4\">\r\n                                                        <FormGroup>\r\n                                                            <FormLabel>{this.props.intl.formatMessage({ id: \"IDS_PRICE\" })}</FormLabel>\r\n                                                            <ReadOnlyText>{SelectedTest.ncost}</ReadOnlyText>\r\n                                                        </FormGroup>\r\n                                                </Col>\r\n                                                <Col md=\"4\">\r\n                                                        <FormGroup>\r\n                                                            <FormLabel>{this.props.intl.formatMessage({ id: \"IDS_TAT\" })}</FormLabel>\r\n                                                            <ReadOnlyText>{SelectedTest.ntat !== -1 ? SelectedTest.ntat : '-'} \r\n                                                                    {SelectedTest.ntat !== 0  && SelectedTest.ntatperiodcode !== -1 ? \" \".concat(SelectedTest.statperiodname) : \"\" }</ReadOnlyText>\r\n                                                        </FormGroup>\r\n                                                </Col>\r\n                                                <Col md=\"4\">\r\n                                                        <FormGroup>\r\n                                                            <FormLabel>{this.props.intl.formatMessage({ id: \"IDS_TRAININGNEEDED\" })}</FormLabel>\r\n                                                            <ReadOnlyText>{SelectedTest.strainingneed} </ReadOnlyText>\r\n                                                        </FormGroup>\r\n                                                </Col>\r\n                                                <Col md=\"4\">\r\n                                                        <FormGroup>\r\n                                                            <FormLabel>{this.props.intl.formatMessage({ id: \"IDS_INTERFACETYPE\" })}</FormLabel>\r\n                                                            <ReadOnlyText>{SelectedTest.sinterfacetypename} </ReadOnlyText>\r\n                                                        </FormGroup>\r\n                                                </Col>\r\n                                                <Col md=\"12\">\r\n                                                        <FormGroup>\r\n                                                            <FormLabel>{this.props.intl.formatMessage({ id: \"IDS_TESTPLATFORM\" })}</FormLabel>\r\n                                                            <ReadOnlyText>{SelectedTest.stestplatform}</ReadOnlyText>\r\n                                                        </FormGroup>\r\n                                                </Col>\r\n                                                <Col md=\"12\">\r\n                                                    <FormGroup>\r\n                                                        <FormLabel>{this.props.intl.formatMessage({ id: \"IDS_TESTPROCEDURE\" })}</FormLabel>\r\n                                                        <ReadOnlyText>{SelectedTest.sdescription}</ReadOnlyText>\r\n                                                    </FormGroup>\r\n                                                </Col>\r\n\r\n                                                {/* {this.props.Login.masterData.TestParameter && this.props.Login.masterData.TestParameter.length > 0 && this.props.Login.masterData.TestParameter[0].nparametertypecode === 1 && */}\r\n                                                    {/* <Col md=\"6\">\r\n                                                        <FormGroup>\r\n                                                            <FormLabel>{this.props.intl.formatMessage({ id: \"IDS_PRICE\" })}</FormLabel>\r\n                                                            <ReadOnlyText>{SelectedTest.ncost}</ReadOnlyText>\r\n                                                        </FormGroup>\r\n                                                    </Col> */}\r\n                                                {/* } */}\r\n                                                {/* Don't delete these commented lines because additional info feature is needed for Agaram LIMS */}\r\n                                                {/* Start Here */}\r\n                                                {/* <Col md=\"6\">\r\n                                                <FormGroup>\r\n                                                    <FormLabel>{ this.props.intl.formatMessage({id: \"IDS_ADDITIONALINFO\"}) }</FormLabel>\r\n                                                    <ReadOnlyText>{ selectedTest.schecklistname }</ReadOnlyText>\r\n                                                </FormGroup>\r\n                                            </Col> */}\r\n                                                {/* End Here */}\r\n                                            </Row>\r\n                                            <TestView\r\n                                                isFormulaOpen={this.props.Login.isFormulaOpen}\r\n                                                linkMaster={linkMaster}\r\n                                                editFiles={editFiles}\r\n                                                userInfo={this.props.Login.userInfo}\r\n                                                parameterData={parameterData || []}\r\n                                                otherTestData={otherTestData || []}\r\n                                                formulaData={this.props.Login.formulaData || {}}\r\n                                                preDefinedFormula={this.props.Login.preDefinedFormula || {}}\r\n                                                dataState={this.props.Login.dataState}\r\n                                                masterData={masterData}\r\n                                                inputParam={this.props.Login.inputParam}\r\n                                                controlMap={this.state.controlMap}\r\n                                                userRoleControlRights={this.state.userRoleControlRights}\r\n                                                esignRights={this.props.Login.userRoleControlRights}\r\n                                                screenData={this.props.Login.screenData}\r\n                                                openChildModal={this.props.Login.openChildModal}\r\n                                                showSaveContinue={this.props.Login.showSaveContinue}\r\n                                                operation={this.props.Login.operation}\r\n                                                screenName={this.props.Login.screenName}\r\n                                                selectedRecord={this.props.Login.selectedRecord}\r\n                                                loadEsign={this.props.Login.loadEsign}\r\n                                                ncontrolCode={this.props.Login.ncontrolCode}\r\n                                                crudMaster={this.props.crudMaster}\r\n                                                addParameterSpecification={this.props.addParameterSpecification}\r\n                                                getAvailableData={this.props.getAvailableData}\r\n                                                addCodedResult={this.props.addCodedResult}\r\n                                                addSubCodedResult={this.addSubCodedResult}\r\n                                                addFormula={this.props.addFormula}\r\n                                                openPredefinedModal={this.props.addPredefinedModal}\r\n                                                formulaChangeFunction={this.props.formulaChangeFunction}\r\n                                                addParameter={this.props.addParameter}\r\n                                                addContainerType={this.props.addContainerType}\r\n                                                deleteAction={this.deleteAction}\r\n                                                getTestDetails={this.props.getTestDetails}\r\n                                                updateStore={this.props.updateStore}\r\n                                                validateEsignCredential={this.props.validateEsignCredential}\r\n                                                addTestFile={this.props.addTestFile}\r\n                                                viewAttachment={this.props.viewAttachment}\r\n                                                settings = {this.props.Login.settings}\r\n                                                getActiveTestContainerTypeById={this.props.getActiveTestContainerTypeById}\r\n                                                hideQualisForms={this.props.Login.hideQualisForms}\r\n                                                getUnitConversion = {this.props.getUnitConversion}\r\n                                                getConversionOperator = {this.props.getConversionOperator}\r\n                                                DestinationUnit = {this.props.Login.DestinationUnit}\r\n                                                onFocus={this.handleFocus}\r\n                                                grade={this.props.Login.grade}\r\n                                                addClinicalSpecification={this.props.addClinicalSpecification}\r\n                                                clinicalspecDataState={this.state.clinicalspecDataState}\r\n                                                dataStateChange={this.specDataStateChange}\r\n                                                \r\n                                            ></TestView>\r\n                                        </Card.Body>\r\n                                    </Card>\r\n                                </ContentPanel>\r\n                                : \"\"\r\n                            }\r\n                        </Col>\r\n                    </Row>\r\n                </div>\r\n                {/* End of get display */}\r\n\r\n                {/* Start of Modal Sideout for Test Creation */}\r\n                {this.props.Login.openModal && this.props.Login.operation && this.props.Login.inputParam &&\r\n                    <SlideOutModal\r\n                        show={this.props.Login.openModal}\r\n                        //size={this.props.Login.operation===\"create\" ? \"xl\" : \"lg\" }\r\n                        closeModal={this.closeModal}\r\n                        operation={this.props.Login.operation}\r\n                        inputParam={this.props.Login.inputParam}\r\n                        screenName={this.props.Login.screenName}\r\n                        showSaveContinue={true}\r\n                        onSaveClick={this.onSaveTest}\r\n                        esign={this.props.Login.loadEsign}\r\n                        validateEsign={this.validateEsign}\r\n                        selectedRecord={this.state.selectedRecord || {}}\r\n                        mandatoryFields={this.mandatoryFields || []}\r\n                        addComponent={this.props.Login.loadEsign ?\r\n                            <Esign\r\n                                operation={this.props.Login.operation}\r\n                                onInputOnChange={this.onEsignInputOnChange}\r\n                                inputParam={this.props.Login.inputParam}\r\n                                selectedRecord={this.state.selectedRecord || {}}\r\n                             /> \r\n                             :this.props.Login.operation ===\"reportinfotest\" ?\r\n                                <TestReportInfo\r\n                                    userInfo={this.props.Login.userInfo}\r\n                                    selectedRecord={this.state.selectedRecord || {}}\r\n                                    onInputOnChange={this.onInputOnChange}\r\n                                    onNumericInputChange={this.onNumericInputChange}\r\n                                />\r\n                            : <Row>\r\n                                {/* <Col md={this.props.Login.needOtherTest ? \"8\" : \"12\"}> */}\r\n                                <Col md={this.props.Login.needOtherTest ? \"6\" : \"12\"}>\r\n                                    <AddTest\r\n                                        selectedRecord={this.state.selectedRecord || {}}\r\n                                        onInputOnChange={this.onInputOnChange}\r\n                                        // onActiveStatusChange={this.onActiveStatusChange}\r\n                                        onNumericInputChange={this.onNumericInputChange}\r\n                                        onComboChange={this.onComboChange}\r\n                                        testData={testData}\r\n                                        otherTestData={otherTestData}\r\n                                        needOtherTest={this.props.Login.needOtherTest}\r\n                                        parameterData={parameterData}\r\n                                        hideQualisForms={this.props.Login.hideQualisForms}\r\n                                    ></AddTest>\r\n                                </Col>                               \r\n                                {this.props.Login.needOtherTest &&\r\n                                    <Col md={6}>\r\n                                        <AddParameter\r\n                                            selectedRecord={this.state.selectedRecord || {}}\r\n                                            onInputOnChange={this.onInputOnChange}\r\n                                            onNumericInputChange={this.onNumericInputChange}\r\n                                            onComboChange={this.onComboChange}\r\n                                            parameterData={parameterData}\r\n                                            userInfo={this.props.Login.userInfo}\r\n                                            onFocus={this.handleFocus}\r\n                                            DestinationUnit={this.props.Login.DestinationUnit}                                                          \r\n                                        ></AddParameter>\r\n                                    </Col>\r\n                                }                                \r\n                            </Row>\r\n                           \r\n                        }\r\n                    />\r\n                }\r\n                {/* End of Modal Sideout for Test Creation */}\r\n            </>\r\n        );\r\n    }\r\n\r\n    handlePageChange = (event) => {\r\n        this.setState({\r\n            skip: event.skip,\r\n            take: event.take\r\n        });\r\n    }\r\n\r\n    ConfirmDelete = (item, operation, ncontrolCode, methodUrl, modalName) => {\r\n        this.confirmMessage.confirm(\"deleteMessage\", this.props.intl.formatMessage({ id: \"IDS_DELETE\" }), this.props.intl.formatMessage({ id: \"IDS_DEFAULTCONFIRMMSG\" }),\r\n            this.props.intl.formatMessage({ id: \"IDS_OK\" }), this.props.intl.formatMessage({ id: \"IDS_CANCEL\" }),\r\n            () => this.deleteAction(item, operation, ncontrolCode, methodUrl, modalName));\r\n    }\r\n\r\n    findMandatoryFields(screenName, selectedRecord, operation) {\r\n        if (screenName === \"IDS_TEST\") {\r\n            let mandatoryFields = [\r\n                { \"idsName\": \"IDS_TESTCATEGORY\", \"dataField\": \"ntestcategorycode\", \"width\": \"200px\", \"mandatory\": true, \"mandatoryLabel\":\"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n                { \"idsName\": \"IDS_TESTNAME\", \"dataField\": \"stestname\", \"width\": \"200px\", \"mandatory\": true , \"mandatoryLabel\":\"IDS_ENTER\", \"controlType\": \"textbox\"},\r\n                { \"idsName\": \"IDS_TESTSYNONYM\", \"dataField\": \"stestsynonym\", \"width\": \"200px\", \"mandatory\": true, \"mandatoryLabel\":\"IDS_ENTER\", \"controlType\": \"textbox\" },\r\n                \r\n            ]\r\n            if (operation === \"create\") {\r\n                mandatoryFields.push(\r\n                    { \"idsName\": \"IDS_SECTION\", \"dataField\": \"nsectioncode\", \"width\": \"200px\", \"mandatory\": true, \"mandatoryLabel\":\"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n                    { \"idsName\": \"IDS_PARAMETERNAME\", \"dataField\": \"sparametername\", \"width\": \"200px\", \"mandatory\": true, \"mandatoryLabel\":\"IDS_ENTER\", \"controlType\": \"textbox\" },\r\n                    { \"idsName\": \"IDS_PARAMETERSYNONYM\", \"dataField\": \"sparametersynonym\", \"width\": \"200px\", \"mandatory\": true, \"mandatoryLabel\":\"IDS_ENTER\", \"controlType\": \"textbox\" },\r\n                    { \"idsName\": \"IDS_PARAMETERTYPE\", \"dataField\": \"nparametertypecode\", \"width\": \"200px\", \"mandatory\": true , \"mandatoryLabel\":\"IDS_SELECT\", \"controlType\": \"selectbox\"}\r\n                );\r\n                if (selectedRecord && Object.values(selectedRecord).length > 0 && selectedRecord[\"nparametertypecode\"]) {\r\n                    if (selectedRecord[\"nparametertypecode\"].value === parameterType.NUMERIC) {\r\n                        mandatoryFields.push(\r\n                            { \"idsName\": \"IDS_ROUNDINGDIGITS\", \"dataField\": \"nroundingdigits\", \"width\": \"200px\", \"mandatory\": true, \"mandatoryLabel\":\"IDS_ENTER\", \"controlType\": \"textbox\" },\r\n                            { \"idsName\": \"IDS_UNIT\", \"dataField\": \"nunitcode\", \"width\": \"200px\", \"mandatory\": true , \"mandatoryLabel\":\"IDS_SELECT\", \"controlType\": \"selectbox\"},\r\n                        );\r\n                    } else if (selectedRecord[\"nparametertypecode\"].value === parameterType.PREDEFINED) {\r\n                        mandatoryFields.push(\r\n                            { \"idsName\": \"IDS_CODEDRESULT\", \"dataField\": \"spredefinedname\", \"width\": \"200px\", \"mandatory\": true, \"mandatoryLabel\":\"IDS_ENTER\", \"controlType\": \"textbox\" },\r\n                            { \"idsName\": \"IDS_ACTUALRESULT\", \"dataField\": \"ngradecode\", \"width\": \"200px\", \"mandatory\": true , \"mandatoryLabel\":\"IDS_SELECT\", \"controlType\": \"selectbox\"},\r\n                            { \"idsName\": \"IDS_CODEDRESULTSYNONYM\", \"dataField\": \"spredefinedsynonym\", \"width\": \"200px\", \"mandatory\": true , \"mandatoryLabel\":\"IDS_ENTER\", \"controlType\": \"textbox\"},\r\n\r\n                        );\r\n                    }\r\n                }\r\n\r\n            }\r\n            mandatoryFields.forEach(item => item.mandatory === true && mandatoryFields.push(item));\r\n            return mandatoryFields;\r\n        } else  if(operation ===\"reportinfotest\") {\r\n            let mandatoryFields = [];\r\n            mandatoryFields.push(\r\n                { \"idsName\": \"IDS_CONFIRMSTATEMENT\", \"dataField\": \"sconfirmstatement\", \"width\": \"200px\", \"mandatory\": true, \"mandatoryLabel\":\"IDS_ENTER\", \"controlType\": \"textbox\" },\r\n                { \"idsName\": \"IDS_DECISIONRULE\", \"dataField\": \"sdecisionrule\", \"width\": \"200px\", \"mandatory\": true , \"mandatoryLabel\":\"IDS_ENTER\", \"controlType\": \"textbox\"},\r\n                { \"idsName\": \"IDS_SOPDESCRIPTION\", \"dataField\": \"ssopdescription\", \"width\": \"200px\", \"mandatory\": true , \"mandatoryLabel\":\"IDS_ENTER\", \"controlType\": \"textbox\"},\r\n                { \"idsName\": \"IDS_TESTCONDITION\", \"dataField\": \"stestcondition\", \"width\": \"200px\", \"mandatory\": true , \"mandatoryLabel\":\"IDS_ENTER\", \"controlType\": \"textbox\"},\r\n                { \"idsName\": \"IDS_DEVIATIONCOMMENTS\", \"dataField\": \"sdeviationcomments\", \"width\": \"200px\", \"mandatory\": true , \"mandatoryLabel\":\"IDS_ENTER\", \"controlType\": \"textbox\"},\r\n                { \"idsName\": \"IDS_METHODSTANDARD\", \"dataField\": \"smethodstandard\", \"width\": \"200px\", \"mandatory\": true , \"mandatoryLabel\":\"IDS_ENTER\", \"controlType\": \"textbox\"},\r\n                { \"idsName\": \"IDS_REFERENCE\", \"dataField\": \"sreference\", \"width\": \"200px\", \"mandatory\": true , \"mandatoryLabel\":\"IDS_ENTER\", \"controlType\": \"textbox\"},\r\n            );\r\n            return mandatoryFields;\r\n\r\n        }\r\n        else {\r\n            return [];\r\n        }\r\n    }\r\n\r\n    onComboChange = (comboData, fieldName, caseNo) => {\r\n        let selectedRecord = this.state.selectedRecord || {};\r\n        switch (caseNo) {\r\n            case 1:\r\n                if (fieldName === \"sparametername\") {\r\n                    selectedRecord[fieldName] = comboData;\r\n                    selectedRecord[\"sparametersynonym\"] = comboData ? comboData.value : \"\";\r\n                } else if(fieldName  === \"nunitcode\") {\r\n                    selectedRecord[\"nunitcode\"] = comboData;\r\n                    this.props.getUnitConversion(this.state.selectedRecord.nunitcode.value,this.props.Login.masterData,this.props.Login.userInfo, selectedRecord);\r\n                } else  if(fieldName === \"ndestinationunitcode\") {\r\n                    if(comboData !==null){\r\n                        selectedRecord[\"ndestinationunitcode\"] = comboData;\r\n                        this.props.getConversionOperator(this.state.selectedRecord.nunitcode.value,this.state.selectedRecord.ndestinationunitcode.value,this.props.Login.masterData,this.props.Login.userInfo, selectedRecord);\r\n\r\n                    }else {\r\n                        delete selectedRecord[\"ndestinationunitcode\"];\r\n\t\t\t\t\t\t//ALPD-3521\r\n                        delete selectedRecord[\"soperator\"];\r\n                        delete selectedRecord[\"nconversionfactor\"];\r\n                        selectedRecord[\"noperatorcode\"]=-1;\r\n                    }\r\n                    \r\n                }\r\n                else {\r\n                    selectedRecord[fieldName] = comboData;\r\n                }\r\n                this.setState({ selectedRecord });\r\n                break;\r\n\r\n            case 2:\r\n                let item = comboData['item'];\r\n                let needUnit = true;\r\n                let needRoundingDigit = true;\r\n                let needCodedResult = true;\r\n                let needActualResult = true;\r\n                let npredefinedcode = transactionStatus.NO;\r\n                const parameterData = this.props.Login.parameterData;\r\n                if (item[\"nunitrequired\"] === transactionStatus.YES) {\r\n                    needUnit = false;\r\n                    selectedRecord[\"nunitcode\"] = this.props.Login.parameterData.defaultUnit;\r\n                } else {\r\n                    selectedRecord[\"nunitcode\"] = \"\";\r\n\t\t\t\t\t//ALPD-3521\r\n                    selectedRecord[\"ndestinationunitcode\"] = [];\r\n                    selectedRecord[\"soperator\"] = [];\r\n                }\r\n                if (item[\"nroundingrequired\"] === transactionStatus.YES) {\r\n                    needRoundingDigit = false;\r\n                } else {\r\n                   selectedRecord[\"nroundingdigit\"] = \"\";\r\n                    selectedRecord[\"nroundingdigits\"] = \"\";\r\n                    selectedRecord[\"ndeltacheck\"] = 4;\r\n                    selectedRecord[\"ndeltacheckframe\"] = \"\";\r\n                    selectedRecord[\"ndeltaunitcode\"] = \"\";\r\n                    selectedRecord[\"ndeltachecklimitcode\"] = \"\";\r\n                }\r\n                if (item[\"npredefinedrequired\"] === transactionStatus.YES) {\r\n                    needCodedResult = false;\r\n                    npredefinedcode = item[\"npredefinedrequired\"];\r\n                } else {\r\n                    selectedRecord[\"spredefinedname\"] = \"\";\r\n                }\r\n                if (item[\"ngraderequired\"] === transactionStatus.YES) {\r\n                    needActualResult = false;\r\n                    selectedRecord[\"ngradecode\"] = this.props.Login.parameterData.defaultGrade;\r\n                } else {\r\n                    selectedRecord[\"ngradecode\"] = \"\";\r\n                }\r\n\r\n\r\n                selectedRecord[fieldName] = comboData;\r\n                const parameterInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        parameterData: {\r\n                            ...parameterData, needUnit, needRoundingDigit, needCodedResult, needActualResult, npredefinedcode\r\n                        }, selectedRecord\r\n                    }\r\n                }\r\n                this.props.updateStore(parameterInfo);\r\n\r\n                break;\r\n\r\n            case 3:\r\n                let nfilterTestCategory = this.state.nfilterTestCategory || {}\r\n                nfilterTestCategory = comboData;\r\n                this.searchRef.current.value = \"\";\r\n                this.setState({ nfilterTestCategory })\r\n                break;\r\n\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    openFilter = () => {\r\n        let showFilter = !this.props.Login.showFilter\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { showFilter }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    closeFilter = () => {\r\nconsole.log(\"Hello Close Filter\");\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { showFilter: false }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    onFilterSubmit = () => {\r\n        if (this.state.nfilterTestCategory.value) {\r\n            let inputParam = {\r\n                inputData: {\r\n                    ntestcategorycode: this.state.nfilterTestCategory.value,\r\n                    userinfo: this.props.Login.userInfo,\r\n                    nfilterTestCategory: this.state.nfilterTestCategory\r\n                },\r\n                classUrl: \"testmaster\",\r\n                methodUrl: \"TestMasterByCategory\"\r\n            }\r\n            this.props.changeTestCategoryFilter(inputParam, this.props.Login.masterData.filterTestCategory);\r\n        } else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_TESTCATEGORYNOTAVAILABLE\" }));\r\n        }\r\n    }\r\n\r\n\r\n    onEsignInputOnChange = (event) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if (event.target.type === 'checkbox') {\r\n            selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\r\n        } else {\r\n            selectedRecord[event.target.name] = event.target.value;\r\n        }\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    // onActiveStatusChange =(event, optional)=>{\r\n    //     const selectedRecord = this.state.selectedRecord || {};\r\n    //     selectedRecord[event.target.name] = event.target.checked === true ? optional[0] : optional[1];\r\n    //     this.setState({ selectedRecord });\r\n    //     if (event.target.checked === false){\r\n    //        this.validateTestExistenceInTestGroup();\r\n    //     }\r\n    // }\r\n\r\n    onInputOnChange = (event, caseNo, optional) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        switch (caseNo) {\r\n            case 1:\r\n                if (event.target.type === 'checkbox') {\r\n                    selectedRecord[event.target.name] = event.target.checked === true ? optional[0] : optional[1];\r\n                    if (selectedRecord['ndeltacheck']===transactionStatus.YES) {\r\n                        selectedRecord['ndeltaunitcode'] = this.props.Login.parameterData && this.props.Login.parameterData.deltaperiod.filter(x =>\r\n                            x.item.ndefaultstatus === transactionStatus.YES)[0];\r\n                    }\r\n                    else {\r\n                        delete selectedRecord['ndeltaunitcode'];\r\n                    }\r\n                } else {\r\n                    selectedRecord[event.target.name] = event.target.value;\r\n                }\r\n                this.setState({ selectedRecord });\r\n                break;\r\n\r\n            case 2:\r\n                selectedRecord[event.target.name] = selectedRecord[\"stestsynonym\"] =\r\n                    selectedRecord[\"sparametersynonym\"] = event.target.value;\r\n                selectedRecord[\"sparametername\"] = { label: event.target.value, value: event.target.value };\r\n                this.setState({ selectedRecord });\r\n                break;\r\n\r\n            case 3:\r\n                selectedRecord[event.target.name] = selectedRecord[\"sparametersynonym\"] = event.target.value;\r\n                this.setState({ selectedRecord });\r\n                break;\r\n\r\n        case 6:\r\n          //selectedRecord[event.target.name] = selectedRecord[\"sresultparacomment\"] = event.target.value;\r\n          selectedRecord[event.target.name] = selectedRecord[\"spredefinedsynonym\"] = event.target.value;\r\n\r\n           this.setState({ selectedRecord });\r\n                    break;\r\n\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    // onNumericInputChange = (value, name) => {\r\n    //     const selectedRecord = this.state.selectedRecord || {};\r\n    //     selectedRecord[name] = value;\r\n    //     this.setState({ selectedRecord });\r\n    // }\r\n\r\n    onNumericInputChange = (value, name) => {\r\n       // console.log(\"value:\", value, name);\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if (name === \"nroundingdigits\" || name === \"nconversionfactor\") {\r\n           // if(/^\\-/.test(value.target.value)){\r\n           // if (/^-?\\d*?$/.test(value.target.value) || value.target.value === \"\") {\r\n                if (/^\\d*?$/.test(value.target.value) || value.target.value === \"\") {\r\n\r\n              //  console.log(\"val:\", value.target.value);\r\n                selectedRecord[name] = value.target.value;\r\n            }\r\n            \r\n        }\r\n        else {\r\n            selectedRecord[name] = value;\r\n        }\r\n\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    closeModal = () => {\r\n        let loadEsign = this.props.Login.loadEsign;\r\n        let openModal = this.props.Login.openModal;\r\n        let selectedRecord = this.props.Login.selectedRecord;\r\n        if (this.props.Login.loadEsign) {\r\n            if (this.props.Login.operation === \"delete\") {\r\n                loadEsign = false;\r\n                openModal = false;\r\n                selectedRecord = {};\r\n            } else {\r\n                loadEsign = false;\r\n                selectedRecord['esignpassword'] = \"\"\r\n                selectedRecord['esigncomments'] = \"\"\r\n                selectedRecord['esignreason']=\"\"\r\n            }\r\n        } else {\r\n            openModal = false;\r\n            selectedRecord = {};\r\n        }\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { openModal, loadEsign, selectedRecord }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    closeFormulaModal = () => {\r\n        this.setState({ addformula: false });\r\n    }\r\n\r\n    addSubCodedResult = () => {\r\n    }\r\n\r\n    deleteAction = (item, operation, ncontrolCode, methodUrl, modalName) => {\r\n        const selected = item[\"dataItem\"] ? item[\"dataItem\"] : item;\r\n        const inputParam = {\r\n            inputData: {\r\n                [methodUrl.toLowerCase()]: selected,\r\n                userinfo: this.props.Login.userInfo,\r\n\t\t\t\t//ALPD-4831--Vignesh R(08-10-2024)--When nsettingcode 71 is set to 3, the Test Group is not required and is automatically updated by default in the relevant test group-related tables.\r\n                \"isQualisLite\":parseInt(this.props.Login.settings[71])\r\n\r\n            },\r\n            classUrl: \"testmaster\",\r\n            operation: operation,\r\n            methodUrl: methodUrl,\r\n            screenName: \"IDS_TEST\",\r\n            selectedRecord: {...this.state.selectedRecord},\r\n            postParam: {\r\n                inputListName: \"TestMaster\", selectedObject: \"SelectedTest\", primaryKeyField: \"ntestcode\",\r\n                primaryKeyValue: selected.ntestcode,\r\n                fetchUrl: \"testmaster/getTestById\", fecthInputObject: { userinfo: this.props.Login.userInfo },\r\n                masterData: this.props.Login.masterData\r\n            }\r\n        }\r\n        const masterData = this.props.Login.masterData;\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, ncontrolCode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData },\r\n                    [modalName]: true, screenName: \"IDS_TEST\", operation: operation\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        } else {\r\n            this.props.crudMaster(inputParam, masterData, modalName, {});\r\n        }\r\n    }\r\n\r\n    validateTestExistenceInTestGroup = () => {\r\n\r\n        const operation = this.props.Login.operation;\r\n        if (operation === \"update\") {\r\n            return rsapi.post(\"testmaster/validateTestExistenceInTestGroup\", {\r\n                ntestcode: this.props.Login.masterData.SelectedTest[\"ntestcode\"],\r\n                \"userinfo\": this.props.Login.userInfo\r\n            })\r\n                .then(response => {\r\n                    if (response.data === true) {\r\n                        this.confirmMessage.confirm(this.props.intl.formatMessage({ id: \"IDS_CONFIRMATION\" }),\r\n                            this.props.intl.formatMessage({ id: \"IDS_CONFIRMATION\" }),\r\n                            this.props.intl.formatMessage({ id: \"IDS_TESTEXISTSINTESTGROUP\" }),\r\n                            this.props.intl.formatMessage({ id: \"IDS_OK\" }),\r\n                            this.props.intl.formatMessage({ id: \"IDS_CANCEL\" }),\r\n                            () => this.onSaveTest(null, null),\r\n                            false,\r\n                            undefined);\r\n                    }\r\n\r\n                })\r\n                .catch(error => {\r\n                    if (error.response.status === 500) {\r\n                        toast.error(this.props.intl.formatMessage({ id: error.message }));\r\n                    }\r\n                    else {\r\n                        toast.warn(this.props.intl.formatMessage({ id: error.response }));\r\n                    }\r\n                })\r\n        }\r\n    }\r\n\r\n    onSaveTest = (saveType, formRef) => {\r\n        const operation = this.props.Login.operation;\r\n        const selectedRecord = this.state.selectedRecord;\r\n\r\n        if(operation ===\"reportinfotest\"){\r\n            this.onSaveReportInfoTest(null,null);\r\n        }\r\n\r\n\r\n        else if (operation === \"update\") {\r\n            if (selectedRecord[\"ntransactionstatus\"] === transactionStatus.DEACTIVE) {\r\n                return rsapi.post(\"testmaster/validateTestExistenceInTestGroup\", {\r\n                    ntestcode: this.props.Login.masterData.SelectedTest[\"ntestcode\"],\r\n                    \"userinfo\": this.props.Login.userInfo\r\n                })\r\n                    .then(response => {\r\n                        if (response.data === true) {\r\n                            this.confirmMessage.confirm(this.props.intl.formatMessage({ id: \"IDS_CONFIRMATION\" }),\r\n                                this.props.intl.formatMessage({ id: \"IDS_CONFIRMATION\" }),\r\n                                this.props.intl.formatMessage({ id: \"IDS_TESTEXISTSINTESTGROUP\" }),\r\n                                this.props.intl.formatMessage({ id: \"IDS_OK\" }),\r\n                                this.props.intl.formatMessage({ id: \"IDS_CANCEL\" }),\r\n                                () => this.onSaveValidatedTest(null, null),\r\n                                false,\r\n                                undefined);\r\n                        }\r\n                        else {\r\n                            this.onSaveValidatedTest(null, null);\r\n                        }\r\n\r\n                    })\r\n                    .catch(error => {\r\n                        if (error.response.status === 500) {\r\n                            toast.error(this.props.intl.formatMessage({ id: error.message }));\r\n                        }\r\n                        else {\r\n                            toast.warn(this.props.intl.formatMessage({ id: error.response }));\r\n                        }\r\n                    })\r\n            }\r\n            else {\r\n                this.onSaveValidatedTest(null, null);\r\n            }\r\n        }\r\n        else {\r\n            if(saveType===2)\r\n            {\r\n                this.onSaveValidatedTest(saveType, null);\r\n            }\r\n            else\r\n            {\r\n               this.onSaveValidatedTest(null, null);\r\n            }\r\n        }\r\n    }\r\n\r\n    // onSaveTest1 = (saveType, formRef) => {\r\n    //     const operation = this.props.Login.operation;\r\n    //     let inputData = {};\r\n    //     let customobject = null;\r\n    //     const userInfo = this.props.Login.userInfo;\r\n    //     const selectedRecord = this.state.selectedRecord;\r\n    //     let testColumns = [{\r\n    //         \"testmaster\": [{ \"ntestcode\": \"int\" }, { \"ntestcategorycode\": \"input\" }, { \"nchecklistversioncode\": \"input\" }, { \"naccredited\": \"int\" },\r\n    //         { \"ntransactionstatus\": \"int\" }, { \"stestname\": \"string\" }, { \"stestsynonym\": \"string\" }, { \"sdescription\": \"string\" }, { \"ncost\": \"float\" }]\r\n    //     }]\r\n    //     if (operation === \"create\") {\r\n    //         testColumns.push({\r\n    //             \"testparameter\": [{ \"ntestcode\": \"int\" }, { \"nparametertypecode\": \"input\" }, { \"nunitcode\": \"input\" }, { \"sparametername\": \"input\" },\r\n    //             { \"sparametersynonym\": \"string\" }, { \"nroundingdigits\": \"int\" }, { \"objPredefinedParameter\": \"customobject\" }]\r\n    //         });\r\n    //         inputData = {\r\n    //             \"testmaster\": {},\r\n    //             \"testparameter\": {\r\n    //                 nisadhocparameter: transactionStatus.NO,\r\n    //                 nisvisible: transactionStatus.YES,\r\n    //                 nstatus: transactionStatus.ACTIVE\r\n    //             },\r\n    //             \"testsection\": {},\r\n    //             \"testmethod\": {},\r\n    //             \"testinstrumentcategory\": {}\r\n    //         };\r\n    //         if (this.props.Login.parameterData.npredefinedcode === transactionStatus.YES) {\r\n    //             customobject = {};\r\n    //             customobject[\"spredefinedname\"] = selectedRecord[\"spredefinedname\"].trim();\r\n    //             customobject[\"nstatus\"] = transactionStatus.ACTIVE;\r\n    //             customobject[\"ndefaultstatus\"] = transactionStatus.YES;\r\n    //             customobject[\"ngradecode\"] = selectedRecord[\"ngradecode\"] ? selectedRecord[\"ngradecode\"].value ? selectedRecord[\"ngradecode\"].value : -1 : -1;\r\n    //         }\r\n    //     } else {\r\n    //         inputData = {\r\n    //             \"testmaster\": {}\r\n    //         };\r\n    //     }\r\n    //     inputData[\"userinfo\"] = userInfo;\r\n    //     inputData[\"testmaster\"][\"nstatus\"] = transactionStatus.ACTIVE;\r\n    //     inputData[\"testmaster\"][\"nsitecode\"] = userInfo.nmastersitecode;\r\n    //     testColumns.forEach(function (items) {\r\n    //         const mapkey = Object.keys(items)[0];\r\n    //         const columns = Object.values(items)[0];\r\n    //         columns.map(item => {\r\n    //             const key = Object.keys(item)[0];\r\n    //             const value = Object.values(item)[0];\r\n    //             if (value === \"input\") {\r\n    //                 return inputData[mapkey][key] = selectedRecord[key] ? selectedRecord[key].value ? selectedRecord[key].value : -1 : -1;\r\n    //             } else if (value === \"int\") {\r\n    //                 return inputData[mapkey][key] = selectedRecord[key] ? selectedRecord[key] : 0;\r\n    //             } else if (value === \"string\") {\r\n    //                 return inputData[mapkey][key] = selectedRecord[key] ? selectedRecord[key].trim() : \"\";\r\n    //             } else if (value === \"float\") {\r\n    //                 return inputData[mapkey][key] = selectedRecord[key] ? selectedRecord[key] : 0;\r\n    //             } else if (value === \"customobject\") {\r\n    //                 return inputData[mapkey][key] = customobject;\r\n    //             } else {\r\n    //                 return null;\r\n    //             }\r\n    //         });\r\n    //     });\r\n    //     let postParam = undefined;\r\n    //     if (operation === \"create\") {\r\n    //         if (selectedRecord[\"nsectioncode\"]) {\r\n    //             inputData[\"testsection\"][\"nsectioncode\"] = selectedRecord[\"nsectioncode\"].value;\r\n    //             inputData[\"testsection\"][\"ndefaultstatus\"] = transactionStatus.YES;\r\n    //             inputData[\"testsection\"][\"nstatus\"] = transactionStatus.ACTIVE;\r\n    //         }\r\n    //         if (selectedRecord[\"nmethodcode\"]) {\r\n    //             inputData[\"testmethod\"][\"nmethodcode\"] = selectedRecord[\"nmethodcode\"].value;\r\n    //             inputData[\"testmethod\"][\"ndefaultstatus\"] = transactionStatus.YES;\r\n    //             inputData[\"testmethod\"][\"nstatus\"] = transactionStatus.ACTIVE;\r\n    //         }\r\n\r\n    //         if (selectedRecord[\"ninstrumentcatcode\"]) {\r\n    //             inputData[\"testinstrumentcategory\"][\"ninstrumentcatcode\"] = selectedRecord[\"ninstrumentcatcode\"].value;\r\n    //             inputData[\"testinstrumentcategory\"][\"ndefaultstatus\"] = transactionStatus.YES;\r\n    //             inputData[\"testinstrumentcategory\"][\"nstatus\"] = transactionStatus.ACTIVE;\r\n    //         }\r\n    //     } else if (operation === \"copy\") {\r\n    //         inputData[\"testmaster\"][\"ntestcode\"] = this.props.Login.masterData.SelectedTest[\"ntestcode\"]\r\n    //     } else if (operation === \"update\") {\r\n    //         postParam = { inputListName: \"TestMaster\", selectedObject: \"SelectedTest\", primaryKeyField: \"ntestcode\" };\r\n    //     }       \r\n\r\n    //    // this.setState({ nfilterTestCategory: { \"label\": selectedRecord.ntestcategorycode.label, \"value\": selectedRecord.ntestcategorycode.value } });\r\n    //     if (operation !== \"update\") {\r\n    //         const updateInfo = {\r\n    //             typeName: DEFAULT_RETURN,\r\n    //             data: { defaultkeyname: \"parametereventkey\" }\r\n    //         };\r\n    //         this.props.updateStore(updateInfo);\r\n    //     }\r\n    //     let valid = true;\r\n    //     // if (operation === \"update\" && (validateTest === undefined || validateTest === true)){\r\n\r\n\r\n    //     if (valid){\r\n    //         const inputParam = {\r\n    //             inputData :{...inputData, validatetest:false},\r\n    //             classUrl: \"testmaster\",\r\n    //             operation: operation,\r\n    //             methodUrl: \"TestMaster\",\r\n    //             saveType, \r\n    //             formRef, postParam, searchRef: this.searchRef\r\n    //         }\r\n    //         const masterData = this.props.Login.masterData;\r\n    //         if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\r\n    //             const updateInfo = {\r\n    //                 typeName: DEFAULT_RETURN,\r\n    //                 data: {\r\n    //                     loadEsign: true, screenData: { inputParam, masterData }, saveType, formRef\r\n    //                 }\r\n    //             }\r\n    //             this.props.updateStore(updateInfo);\r\n    //         } else {\r\n    //             this.props.crudMaster(inputParam, masterData, \"openModal\", {});\r\n    //         }\r\n    //     }\r\n    // }\r\n\r\n    onSaveValidatedTest = (saveType, formRef) => {\r\n        const operation = this.props.Login.operation;\r\n        let inputData = {};\r\n        let customobject = null;\r\n        const userInfo = this.props.Login.userInfo;\r\n        const selectedRecord = this.state.selectedRecord;\r\n        let testColumns = [{\r\n            \"testmaster\": [{ \"ntestcode\": \"int\" }, { \"ntestcategorycode\": \"input\" }, { \"nchecklistversioncode\": \"input\" }, { \"naccredited\": \"int\" },{ \"ntrainingneed\": \"int\" },\r\n            { \"ntransactionstatus\": \"int\" }, { \"stestname\": \"string\" }, { \"stestsynonym\": \"string\" }, { \"sshortname\": \"string\" },{ \"sdescription\": \"string\" }, { \"ncost\": \"float\" },\r\n            { \"stestplatform\": \"string\" },{ \"ntat\": \"int\" },{ \"ntatperiodcode\": \"input\" },{ \"ninterfacetypecode\": \"input\" }]\r\n        }]\r\n        if (operation === \"create\") {\r\n            testColumns.push({\r\n                \"testparameter\": [{ \"ntestcode\": \"int\" }, { \"nparametertypecode\": \"input\" }, { \"nunitcode\": \"input\" }, { \"ndestinationunitcode\":\"input\" }, \r\n                //{ \"sconversionoperator\":\"string\" },\r\n                {\"noperatorcode\":\"int\"}, { \"nconversionfactor\":\"float\" }, { \"sparametername\": \"input\" },\r\n                    { \"sparametersynonym\": \"string\" }, { \"nroundingdigits\": \"int\" }, { \"objPredefinedParameter\": \"customobject\" }, { \"ndeltachecklimitcode\": \"float\" }, { \"ndeltacheck\": \"int\" },\r\n                    { \"ndeltaunitcode\": \"input\" }, { \"ndeltacheckframe\": \"int\" },{\"nresultaccuracycode\":\"input\"}]\r\n            });\r\n            inputData = {\r\n                \"testmaster\": {},\r\n                \"testparameter\": {\r\n                    nisadhocparameter: transactionStatus.NO,\r\n                    nisvisible: transactionStatus.YES,\r\n                    nstatus: transactionStatus.ACTIVE\r\n                },\r\n                \"testsection\": {},\r\n                \"testmethod\": {},\r\n                \"testinstrumentcategory\": {},\r\n                \"testpackagetest\":{}\r\n            };\r\n            if (this.props.Login.parameterData.npredefinedcode === transactionStatus.YES) {\r\n                customobject = {};\r\n                customobject[\"spredefinedname\"] = selectedRecord[\"spredefinedname\"].trim();\r\n                customobject[\"nstatus\"] = transactionStatus.ACTIVE;\r\n                customobject[\"ndefaultstatus\"] = transactionStatus.YES;\r\n                customobject[\"ngradecode\"] = selectedRecord[\"ngradecode\"] ? selectedRecord[\"ngradecode\"].value ? selectedRecord[\"ngradecode\"].value : -1 : -1;\r\n            //     if (selectedRecord[\"sresultparacomment\"]) {\r\n            //     customobject[\"sresultparacomment\"] = selectedRecord[\"sresultparacomment\"].trim();}\r\n            // }\r\n            if (selectedRecord[\"spredefinedsynonym\"]) {\r\n                customobject[\"spredefinedsynonym\"] = selectedRecord[\"spredefinedsynonym\"].trim();}\r\n            }\r\n        } else {\r\n            inputData = {\r\n                \"testmaster\": {}\r\n            };\r\n        }\r\n        inputData[\"userinfo\"] = userInfo;\r\n        inputData[\"testmaster\"][\"nstatus\"] = transactionStatus.ACTIVE;\r\n        inputData[\"testmaster\"][\"nsitecode\"] = userInfo.nmastersitecode;\r\n\t\t//ALPD-4831--Vignesh R(08-10-2024)--When nsettingcode 71 is set to 3, the Test Group is not required and is automatically updated by default in the relevant test group-related tables.\r\n        inputData[\"isQualisLite\"]=parseInt(this.props.Login.settings[71]);\r\n        ;\r\n\r\n        testColumns.forEach(function (items) {\r\n            const mapkey = Object.keys(items)[0];\r\n            const columns = Object.values(items)[0];\r\n            columns.map(item => {\r\n                const key = Object.keys(item)[0];\r\n                const value = Object.values(item)[0];\r\n                if (value === \"input\") {\r\n                    return inputData[mapkey][key] = selectedRecord[key] ? selectedRecord[key].value ? selectedRecord[key].value : -1 : -1;\r\n                } else if (value === \"int\") {\r\n                    return inputData[mapkey][key] = selectedRecord[key] ? selectedRecord[key] : 0;\r\n                } else if (value === \"string\") {\r\n                    return inputData[mapkey][key] = selectedRecord[key] ? selectedRecord[key].trim() : \"\";\r\n                } else if (value === \"float\") {\r\n                    return inputData[mapkey][key] = selectedRecord[key] ? selectedRecord[key] : 0;\r\n                } else if (value === \"customobject\") {\r\n                    return inputData[mapkey][key] = customobject;\r\n                } else {\r\n                    return null;\r\n                }\r\n            });\r\n        });\r\n        let postParam = undefined;\r\n        if (operation === \"create\") {\r\n            if (selectedRecord[\"nsectioncode\"]) {\r\n                inputData[\"testsection\"][\"nsectioncode\"] = selectedRecord[\"nsectioncode\"].value;\r\n                inputData[\"testsection\"][\"ndefaultstatus\"] = transactionStatus.YES;\r\n                inputData[\"testsection\"][\"nstatus\"] = transactionStatus.ACTIVE;\r\n            }\r\n            if (selectedRecord[\"nmethodcode\"]) {\r\n                inputData[\"testmethod\"][\"nmethodcode\"] = selectedRecord[\"nmethodcode\"].value;\r\n                inputData[\"testmethod\"][\"ndefaultstatus\"] = transactionStatus.YES;\r\n                inputData[\"testmethod\"][\"nstatus\"] = transactionStatus.ACTIVE;\r\n            }\r\n\r\n            if (selectedRecord[\"ninstrumentcatcode\"]) {\r\n                inputData[\"testinstrumentcategory\"][\"ninstrumentcatcode\"] = selectedRecord[\"ninstrumentcatcode\"].value;\r\n                inputData[\"testinstrumentcategory\"][\"ndefaultstatus\"] = transactionStatus.YES;\r\n                inputData[\"testinstrumentcategory\"][\"nstatus\"] = transactionStatus.ACTIVE;\r\n            }\r\n\r\n\r\n            if (selectedRecord[\"ntestpackagecode\"]) {\r\n                inputData[\"testpackagetest\"][\"ntestpackagecode\"] = selectedRecord[\"ntestpackagecode\"].value;\r\n                inputData[\"testpackagetest\"][\"ndefaultstatus\"] = transactionStatus.YES;\r\n                inputData[\"testpackagetest\"][\"nstatus\"] = transactionStatus.ACTIVE;\r\n            }\r\n        } else if (operation === \"copy\") {\r\n            inputData[\"testmaster\"][\"ntestcode\"] = this.props.Login.masterData.SelectedTest[\"ntestcode\"]\r\n        } else if (operation === \"update\") {\r\n            postParam = { inputListName: \"TestMaster\", selectedObject: \"SelectedTest\", primaryKeyField: \"ntestcode\" };\r\n        }\r\n        if((operation === \"create\" || operation === \"update\") && inputData[\"testparameter\"]){\r\n            inputData[\"testparameter\"][\"sdisplaystatus\"] = selectedRecord[\"nparametertypecode\"] && selectedRecord[\"nparametertypecode\"].label;\r\n        }\r\n\r\n        this.setState({ nfilterTestCategory: { \"label\": selectedRecord.ntestcategorycode.label, \"value\": selectedRecord.ntestcategorycode.value } });\r\n        if (operation !== \"update\") {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: { defaultkeyname: \"parametereventkey\" }\r\n            };\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        //  let valid = true;\r\n        // if (operation === \"update\" && (validateTest === undefined || validateTest === true)){       \r\n        // if (valid){\r\n            let clearSelectedRecordField = [];\r\n        if(operation === \"create\")\r\n        {\r\n            clearSelectedRecordField = [\r\n                { \"controlType\": \"textbox\", \"idsName\":\"IDS_TESTNAME\", \"dataField\": \"stestname\", \"width\": \"200px\", \"mandatory\": true, \"mandatoryLabel\": \"IDS_ENTER\",\"isClearField\":true },\r\n                { \"controlType\": \"textarea\", \"idsName\": \"IDS_TESTSYNONYM\", \"dataField\": \"stestsynonym\", \"width\": \"200px\", \"mandatoryLabel\": \"IDS_ENTER\",\"isClearField\":true },\r\n                { \"controlType\": \"textarea\", \"idsName\": \"IDS_SHORTNAME\", \"dataField\": \"sshortname\", \"width\": \"200px\", \"mandatoryLabel\": \"IDS_ENTER\",\"isClearField\":true },\r\n                { \"controlType\": \"textarea\", \"idsName\": \"IDS_PRICE\", \"dataField\": \"ncost\", \"width\": \"200px\", \"mandatoryLabel\": \"IDS_ENTER\",\"isClearField\":true },\r\n                { \"controlType\": \"textarea\", \"idsName\": \"IDS_TESTPROCEDURE\", \"dataField\": \"sdescription\", \"width\": \"200px\", \"mandatoryLabel\": \"IDS_ENTER\",\"isClearField\":true },\r\n                { \"controlType\": \"textarea\", \"idsName\": \"IDS_TAT\", \"dataField\": \"ntat\", \"width\": \"200px\", \"mandatoryLabel\": \"IDS_ENTER\",\"isClearField\":true },\r\n                { \"controlType\": \"textarea\", \"idsName\": \"IDS_TESTPLATFORM\", \"dataField\": \"stestplatform\", \"width\": \"200px\", \"mandatoryLabel\": \"IDS_ENTER\",\"isClearField\":true },\r\n                { \"controlType\": \"textarea\", \"idsName\": \"IDS_PARAMETERSYNONYM\", \"dataField\": \"sparametersynonym\", \"width\": \"200px\", \"mandatoryLabel\": \"IDS_ENTER\",\"isClearField\":true },\r\n                { \"controlType\": \"textarea\", \"idsName\": \"IDS_ROUNDINGDIGITS\", \"dataField\": \"nroundingdigits\", \"width\": \"200px\", \"mandatoryLabel\": \"IDS_ENTER\",\"isClearField\":true },\r\n                { \"controlType\": \"textarea\", \"idsName\": \"IDS_CONVERSIONOPERATOR\", \"dataField\": \"soperator\", \"width\": \"200px\", \"mandatoryLabel\": \"IDS_ENTER\",\"isClearField\":true },\r\n                { \"controlType\": \"textarea\", \"idsName\": \"IDS_CONVERSIONFACTOR\", \"dataField\": \"nconversionfactor\", \"width\": \"200px\", \"mandatoryLabel\": \"IDS_ENTER\",\"isClearField\":true },\r\n                { \"controlType\": \"textarea\", \"idsName\": \"IDS_DELTACHECKTIMEFRAME\", \"dataField\": \"ndeltacheckframe\", \"width\": \"200px\", \"mandatoryLabel\": \"IDS_ENTER\",\"isClearField\":true },\r\n                { \"controlType\": \"textarea\", \"idsName\": \"IDS_DELTACHECKLIMIT\", \"dataField\": \"ndeltachecklimitcode\", \"width\": \"200px\", \"mandatoryLabel\": \"IDS_ENTER\",\"isClearField\":true },\r\n                { \"controlType\": \"textarea\", \"idsName\": \"IDS_CODEDRESULT\", \"dataField\": \"spredefinedname\", \"width\": \"200px\", \"mandatoryLabel\": \"IDS_ENTER\",\"isClearField\":true },\r\n                { \"controlType\": \"textarea\", \"idsName\": \"IDS_CODEDRESULTSYNONYM\", \"dataField\": \"spredefinedsynonym\", \"width\": \"200px\", \"mandatoryLabel\": \"IDS_ENTER\",\"isClearField\":true },\r\n                { \"controlType\": \"textarea\", \"idsName\": \"IDS_RESULTPARAMETERCOMMENTS\", \"dataField\": \"spredefinedcomments\", \"width\": \"200px\", \"mandatoryLabel\": \"IDS_ENTER\",\"isClearField\":true },\r\n                { \"controlType\": \"textarea\", \"idsName\": \"IDS_ALERTMESSAGE\", \"dataField\": \"salertmessage\", \"width\": \"200px\", \"mandatoryLabel\": \"IDS_ENTER\",\"isClearField\":true },\r\n                { \"controlType\": \"checkbox\", \"idsName\": \"IDS_ACCREDITED\", \"dataField\": \"naccredited\", \"width\": \"200px\", \"controlName\": \"ncategorybasedflow\",\"isClearField\":true,\"preSetValue\":63 },\r\n                { \"controlType\": \"checkbox\", \"idsName\": \"IDS_ACTIVE\", \"dataField\": \"ntransactionstatus\", \"width\": \"150px\",\"controlName\": \"ndefaultstatus\", \"mandatoryLabel\": \"IDS_SELECT\",\"isClearField\":true,\"preSetValue\":1 },\r\n                { \"controlType\": \"checkbox\", \"idsName\": \"IDS_TRAININGNEEDED\", \"dataField\": \"ntrainingneed\", \"width\": \"150px\",\"controlName\": \"ndefaultstatus\", \"mandatoryLabel\": \"IDS_SELECT\",\"isClearField\":true,\"preSetValue\":4 },\r\n                { \"controlType\": \"checkbox\", \"idsName\": \"IDS_DELTACHECK\", \"dataField\": \"ndeltacheck\", \"width\": \"150px\",\"controlName\": \"ndefaultstatus\", \"mandatoryLabel\": \"IDS_SELECT\",\"isClearField\":true,\"preSetValue\":4 },\r\n                { \"controlType\": \"checkbox\", \"idsName\": \"IDS_AlERTFORRESULTENTRY\", \"dataField\": \"nneedresultentryalert\", \"width\": \"150px\",\"controlName\": \"ndefaultstatus\", \"mandatoryLabel\": \"IDS_SELECT\",\"isClearField\":true,\"preSetValue\":4 },\r\n                { \"controlType\": \"checkbox\", \"idsName\": \"IDS_SUBCODERESULTNEED\", \"dataField\": \"nneedsubcodedresult\", \"width\": \"150px\",\"controlName\": \"ndefaultstatus\", \"mandatoryLabel\": \"IDS_SELECT\",\"isClearField\":true,\"preSetValue\":4 }\r\n            ]\r\n        }\r\n       if(operation === \"copy\")\r\n        {\r\n            clearSelectedRecordField = [\r\n                { \"controlType\": \"textbox\", \"idsName\":\"IDS_TESTNAME\", \"dataField\": \"stestname\", \"width\": \"200px\", \"mandatory\": true, \"mandatoryLabel\": \"IDS_ENTER\",\"isClearField\":true },\r\n                { \"controlType\": \"textarea\", \"idsName\": \"IDS_TESTSYNONYM\", \"dataField\": \"stestsynonym\", \"width\": \"200px\", \"mandatoryLabel\": \"IDS_ENTER\",\"isClearField\":true },\r\n                { \"controlType\": \"textarea\", \"idsName\": \"IDS_SHORTNAME\", \"dataField\": \"sshortname\", \"width\": \"200px\", \"mandatoryLabel\": \"IDS_ENTER\",\"isClearField\":true },\r\n                { \"controlType\": \"textarea\", \"idsName\": \"IDS_PRICE\", \"dataField\": \"ncost\", \"width\": \"200px\", \"mandatoryLabel\": \"IDS_ENTER\",\"isClearField\":true },\r\n                { \"controlType\": \"textarea\", \"idsName\": \"IDS_TESTPROCEDURE\", \"dataField\": \"sdescription\", \"width\": \"200px\", \"mandatoryLabel\": \"IDS_ENTER\",\"isClearField\":true },\r\n                { \"controlType\": \"textarea\", \"idsName\": \"IDS_TAT\", \"dataField\": \"ntat\", \"width\": \"200px\", \"mandatoryLabel\": \"IDS_ENTER\",\"isClearField\":true },\r\n                { \"controlType\": \"textarea\", \"idsName\": \"IDS_TESTPLATFORM\", \"dataField\": \"stestplatform\", \"width\": \"200px\", \"mandatoryLabel\": \"IDS_ENTER\",\"isClearField\":true },\r\n                \r\n                { \"controlType\": \"checkbox\", \"idsName\": \"IDS_ACCREDITED\", \"dataField\": \"naccredited\", \"width\": \"200px\", \"controlName\": \"ncategorybasedflow\",\"isClearField\":true,\"preSetValue\":63 },\r\n                { \"controlType\": \"checkbox\", \"idsName\": \"IDS_ACTIVE\", \"dataField\": \"ntransactionstatus\", \"width\": \"150px\",\"controlName\": \"ndefaultstatus\", \"mandatoryLabel\": \"IDS_SELECT\",\"isClearField\":true,\"preSetValue\":1 },\r\n                { \"controlType\": \"checkbox\", \"idsName\": \"IDS_TRAININGNEEDED\", \"dataField\": \"ntrainingneed\", \"width\": \"150px\",\"controlName\": \"ndefaultstatus\", \"mandatoryLabel\": \"IDS_SELECT\",\"isClearField\":true,\"preSetValue\":4 },\r\n                // { \"controlType\": \"checkbox\", \"idsName\": \"IDS_DELTACHECK\", \"dataField\": \"ndeltacheck\", \"width\": \"150px\",\"controlName\": \"ndefaultstatus\", \"mandatoryLabel\": \"IDS_SELECT\",\"isClearField\":true,\"preSetValue\":4 },\r\n                // { \"controlType\": \"checkbox\", \"idsName\": \"IDS_AlERTFORRESULTENTRY\", \"dataField\": \"nneedresultentryalert\", \"width\": \"150px\",\"controlName\": \"ndefaultstatus\", \"mandatoryLabel\": \"IDS_SELECT\",\"isClearField\":true,\"preSetValue\":4 },\r\n                // { \"controlType\": \"checkbox\", \"idsName\": \"IDS_SUBCODERESULTNEED\", \"dataField\": \"nneedsubcodedresult\", \"width\": \"150px\",\"controlName\": \"ndefaultstatus\", \"mandatoryLabel\": \"IDS_SELECT\",\"isClearField\":true,\"preSetValue\":4 }\r\n            ]\r\n         }\r\n        const inputParam = {\r\n            inputData: { ...inputData, validatetest: false },\r\n            classUrl: \"testmaster\",\r\n            operation: operation,\r\n            methodUrl: \"TestMaster\",\r\n            saveType,\r\n            formRef, postParam, searchRef: this.searchRef,\r\n            selectedRecord: {...this.state.selectedRecord}\r\n        }\r\n        const masterData = this.props.Login.masterData;\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData }, saveType, formRef\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        } else {\r\n            this.props.crudMaster(inputParam, masterData, \"openModal\", {},\"\",clearSelectedRecordField);\r\n        }\r\n        // }\r\n    }\r\n\r\n\r\n    onSaveReportInfoTest =(saveType,formRef) => {\r\n        let postParam = undefined;\r\n        let inputData =[];\r\n        const selectedRecord = this.state.selectedRecord;\r\n        postParam = {\r\n            inputListName: \"TestMaster\",\r\n            selectedObject: \"SelectedTest\",\r\n            primaryKeyField: \"ntestcode\",\r\n        };\r\n        inputData[\"reportinfotest\"] = {};\r\n        inputData[\"reportinfotest\"][\"ntestcode\"] =this.props.Login.masterData.SelectedTest.ntestcode;\r\n        inputData[\"reportinfotest\"][\"sconfirmstatement\"] =selectedRecord.sconfirmstatement;\r\n        inputData[\"reportinfotest\"][\"sdecisionrule\"] =selectedRecord.sdecisionrule;\r\n        inputData[\"reportinfotest\"][\"ssopdescription\"] =selectedRecord.ssopdescription;\r\n        inputData[\"reportinfotest\"][\"stestcondition\"] =selectedRecord.stestcondition;\r\n        inputData[\"reportinfotest\"][\"sdeviationcomments\"] =selectedRecord.sdeviationcomments;\r\n        inputData[\"reportinfotest\"][\"smethodstandard\"] =selectedRecord.smethodstandard;\r\n        inputData[\"reportinfotest\"][\"sreference\"] =selectedRecord.sreference;\r\n        \r\n        inputData[\"userinfo\"]=  this.props.Login.userInfo;\r\n        let dataState = this.state.dataState;\r\n    \r\n    \r\n        const inputParam = {\r\n          classUrl: this.props.Login.inputParam.classUrl,\r\n          methodUrl: \"ReportInfoTest\",\r\n          displayName: this.props.Login.screenName,\r\n          inputData: inputData,\r\n          selectedId: this.state.selectedRecord[\"ntestcode\"],\r\n          operation: \"update\", saveType, formRef, dataState,\r\n          searchRef: this.searchRef,\r\n          postParam: postParam\r\n        }\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData: this.props.Login.masterData },\r\n                    openModal: true, screenName: this.props.intl.formatMessage({ id: \"IDS_REPORTINFOTEST\" }),\r\n                    operation: this.props.Login.operation\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        } else {\r\n            this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\r\n        }\r\n    }\r\n\r\n   handleFocus(e){\r\n        e.target.select();\r\n    }\r\n    specDataStateChange = (event) => {\r\n        this.setState({\r\n            //TestMasterClinicalSpec\r\n            //dataResult: process(this.props.Login.masterData.TestGroupTestClinicalSpec || [], event.dataState),\r\n            dataResult: process(this.props.Login.masterData.TestMasterClinicalSpec || [], event.dataState),\r\n            clinicalspecDataState: event.dataState\r\n        });\r\n    }\r\n\r\n    validateEsign = () => {\r\n        const inputParam = {\r\n            inputData: {\r\n                \"userinfo\": {\r\n                    ...this.props.Login.userInfo,\r\n                    sreason: this.state.selectedRecord[\"esigncomments\"],\r\n                    nreasoncode:this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].value,\r\n                    spredefinedreason:this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].label,\r\n               \r\n                },\r\n                password: this.state.selectedRecord[\"esignpassword\"]\r\n            },\r\n            screenData: this.props.Login.screenData\r\n        }\r\n        this.props.validateEsignCredential(inputParam, \"openModal\");\r\n    }\r\n\r\n    reloadData = () => {\r\n        // this.searchRef.current.value = \"\";\r\n        // const inputParam = {\r\n        //     inputData: { \"userinfo\": this.props.Login.userInfo },\r\n        //     classUrl: \"testmaster\",\r\n        //     methodUrl: \"TestMaster\",\r\n        //     userInfo: this.props.Login.userInfo,\r\n        //     displayName: \"IDS_TESTMASTER\"\r\n        // };\r\n        // this.props.callService(inputParam);\r\n         //ALPD-4803 done by Dhanushya RI,To check searchref key is present or not\r\n        if (this.searchRef && this.searchRef.current) {\r\n            this.searchRef.current.value = \"\";\r\n          }        \r\n        if (this.state.nfilterTestCategory.value) {\r\n            let inputParam = {\r\n                inputData: {\r\n                //    ntestcategorycode: this.state.nfilterTestCategory.value,\r\n                   ntestcategorycode:this.props.Login.masterData.SelectedTestCat&&this.props.Login.masterData.SelectedTestCat.ntestcategorycode,\r\n                    userinfo: this.props.Login.userInfo,\r\n                    nfilterTestCategory: this.state.nfilterTestCategory\r\n                },\r\n                classUrl: \"testmaster\",\r\n                methodUrl: \"TestMasterByCategory\"\r\n            }\r\n            this.props.changeTestCategoryFilter(inputParam, this.props.Login.masterData.filterTestCategory);\r\n        } else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_TESTCATEGORYNOTAVAILABLE\" }));\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(previousProps) {\r\n        let isComponentUpdated = false;\r\n        let selectedRecord = this.state.selectedRecord || {};\r\n        if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\r\n            selectedRecord = this.props.Login.selectedRecord;\r\n            isComponentUpdated = true;\r\n        }\r\n\r\n        let userRoleControlRights = this.state.userRoleControlRights || [];\r\n        let controlMap = this.state.controlMap || new Map();\r\n        if (this.props.Login.userInfo && this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\r\n            const nformCode = this.props.Login.userInfo.nformcode;\r\n            if (this.props.Login.userRoleControlRights) {\r\n                this.props.Login.userRoleControlRights[nformCode] && Object.values(this.props.Login.userRoleControlRights[nformCode]).map(item =>\r\n                    userRoleControlRights.push(item.ncontrolcode));\r\n            }\r\n            controlMap = getControlMap(this.props.Login.userRoleControlRights, nformCode);\r\n            isComponentUpdated = true;\r\n        }\r\n        let nfilterTestCategory = this.state.nfilterTestCategory || {};\r\n        let filterTestCategory = this.state.filterTestCategory || {};\r\n\r\n        if (this.props.Login.masterData.filterTestCategory !== previousProps.Login.masterData.filterTestCategory) {\r\n            const testCategoryMap = constructOptionList(this.props.Login.masterData.filterTestCategory || [], \"ntestcategorycode\",\r\n                \"stestcategoryname\", 'ntestcategorycode', 'ascending', false);\r\n            filterTestCategory = testCategoryMap.get(\"OptionList\");\r\n            if (testCategoryMap.get(\"DefaultValue\")) {\r\n                nfilterTestCategory = testCategoryMap.get(\"DefaultValue\");\r\n            } else if (filterTestCategory && filterTestCategory.length > 0) {\r\n                nfilterTestCategory = filterTestCategory[0];\r\n            }\r\n            isComponentUpdated = true;\r\n        } else if (this.props.Login.masterData.nfilterTestCategory !== previousProps.Login.masterData.nfilterTestCategory) {\r\n            nfilterTestCategory = this.props.Login.masterData.nfilterTestCategory;\r\n            isComponentUpdated = true;\r\n        }\r\n        if (isComponentUpdated) {\r\n            this.setState({ nfilterTestCategory, userRoleControlRights, controlMap, selectedRecord, filterTestCategory });\r\n        }\r\n        if (this.props.Login.masterData !== previousProps.Login.masterData) {\r\n            const filterData = this.generateBreadCrumData();\r\n            this.setState({ filterData });\r\n        }\r\n    }\r\n\r\n    generateBreadCrumData() {\r\n        const breadCrumbData = [];\r\n        if (this.props.Login.masterData && this.props.Login.masterData.filterTestCategory) {\r\n\r\n            breadCrumbData.push(\r\n                {\r\n                    \"label\": \"IDS_TESTCATEGORY\",\r\n                    \"value\": this.props.Login.masterData.SelectedTestCat ? this.props.Login.masterData.SelectedTestCat.stestcategoryname : \"NA\"\r\n                }\r\n            );\r\n        }\r\n        return breadCrumbData;\r\n    }\r\n\r\n\r\n    componentWillUnmount() {\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                masterData: [], inputParam: undefined, operation: null, modalName: undefined,\r\n                testData: {}, parameterData: {}, otherTestData: {}, formulaData: {}\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        Login: state.Login\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, {\r\n    callService, crudMaster, getTestMaster, addTest, updateStore, formulaChangeFunction,\r\n    filterColumnData, getTestDetails, addParameter, validateEsignCredential, addCodedResult, addParameterSpecification,addClinicalSpecification,\r\n    getAvailableData, addFormula, changeTestCategoryFilter, addTestFile, viewAttachment, getActiveTestContainerTypeById, addContainerType,\r\n    ReportInfoTest, getUnitConversion, getConversionOperator,addPredefinedModal\r\n})(injectIntl(TestMaster));"]},"metadata":{},"sourceType":"module"}