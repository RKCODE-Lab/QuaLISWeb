{"ast":null,"code":"var _jsxFileName = \"D:\\\\LIMSWFH\\\\LIMSPOSTGRESQL\\\\QuaLISWeb\\\\src\\\\pages\\\\reports\\\\reportsconfig\\\\ReportConfig.jsx\";\nimport React, { Component } from 'react';\nimport { faThumbsUp, faPlus, faSync } from '@fortawesome/free-solid-svg-icons';\nimport { Card, Col, Row, Button, FormGroup, FormLabel, Nav, Form } from 'react-bootstrap';\nimport { injectIntl, FormattedMessage } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { toast } from 'react-toastify';\nimport TransactionListMaster from '../../../components/TransactionListMaster';\nimport DataGrid from '../../../components/data-grid/data-grid.component';\nimport { SampleType, designProperties } from '../../../components/Enumeration';\nimport CustomTabs from '../../../components/custom-tabs/custom-tabs.component';\nimport { ProductList } from '../../testmanagement/testmaster-styled';\nimport { ListWrapper } from '../../../components/client-group.styles';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport SplitterLayout from \"react-splitter-layout\";\nimport PerfectScrollbar from 'react-perfect-scrollbar';\nimport { ReadOnlyText, ContentPanel } from '../../../components/App.styles';\nimport '../../registration/registration.css';\nimport { callService, getReportMasterComboService, updateStore, getSelectedReportMasterDetail, getReportDetailComboService, getSelectedReportDetail, getConfigReportComboService, getParameterMappingComboService, //getActionMappingComboService, \nfilterTransactionList, getReportSubType, getregtype, validationReportparameter, controlBasedReportparametretable, //controlBasedReportparametretablecolumn,\ncrudMaster, getReportRegSubType, validateEsignCredential, getControlButton, getReportRegSubTypeApproveConfigVersion, getReportSampletype, getReportTemplate, controlBasedReportparametre } from '../../../actions';\nimport { DEFAULT_RETURN } from '../../../actions/LoginTypes';\nimport SlideOutModal from '../../../components/slide-out-modal/SlideOutModal';\nimport { showEsign, getControlMap, create_UUID, constructOptionList, Lims_JSON_stringify, validateDays, replaceBackSlash } from '../../../components/CommonScript';\nimport AddDesign from '../../../components/add-design/add-design.component';\nimport ParameterMapping from '../../../components/add-design/parameter-mapping.component';\nimport { reportTypeEnum, transactionStatus, RegistrationType, reportCOAType } from '../../../components/Enumeration';\nimport ConfirmMessage from '../../../components/confirm-alert/confirm-message.component';\nimport { designComponents } from '../../../components/Enumeration';\nimport Esign from '../../audittrail/Esign';\nimport AddReportMaster from './AddReportMaster';\nimport AddReportDetail from './AddReportDetail';\nimport AddAttachment from './AddAttachment';\nimport ReportConfigFilter from './ReportConfigFilter';\nimport { ReactComponent as ParameterConfigurationIcon } from \"@svgr/webpack?-svgo,+titleProp,+ref!../../../assets/image/parameter-configuration.svg\";\nimport { ReactComponent as ParameterMappingIcon } from \"@svgr/webpack?-svgo,+titleProp,+ref!../../../assets/image/parameter-mapping.svg\";\nimport BreadcrumbComponent from '../../../components/Breadcrumb.Component';\nimport { ReactComponent as RefreshIcon } from \"@svgr/webpack?-svgo,+titleProp,+ref!../../../assets/image/refresh.svg\";\nimport AddReportValidation from './AddReportValidation';\nimport AddReportParameters from './AddReportParameters';\n\nconst mapStatetoProps = state => {\n  return {\n    Login: state.Login\n  };\n};\n\nclass ReportConfig extends Component {\n  constructor(props) {\n    super(props); // const dataState = {\n    //     skip: 0,\n    //     take: 10,\n    // }; \n\n    this.onSecondaryPaneSizeChange = (e, val) => {\n      this.setState({\n        firstPane: e - val,\n        tabPane: e - 80,\n        childPane: this.state.parentHeight - e - 80\n      });\n    };\n\n    this.paneSizeChange = d => {\n      this.setState({\n        splitChangeWidthPercentage: d\n      });\n    };\n\n    this.handlePageChange = e => {\n      this.setState({\n        skip: e.skip,\n        take: e.take\n      });\n    };\n\n    this.handleMasterPageChange = e => {\n      this.setState({\n        skip: e.skip,\n        take: e.take\n      });\n    };\n\n    this.handleDetailPageChange = e => {\n      this.setState({\n        skip: e.skip,\n        take: e.take\n      });\n    };\n\n    this.openFilter = () => {\n      let showFilter = !this.props.Login.showFilter;\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          showFilter\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.closeFilter = () => {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          showFilter: false\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onFilterSubmit = () => {\n      this.searchRef.current.value = \"\";\n      const inputParam = {\n        inputData: {\n          \"userinfo\": this.props.Login.userInfo,\n          nreporttypecode: this.state.selectedRecord[\"filterreporttypecode\"] ? String(this.state.selectedRecord[\"filterreporttypecode\"].value) : 0\n        },\n        classUrl: \"reportconfig\",\n        methodUrl: \"ReportDesigner\",\n        userInfo: this.props.Login.userInfo,\n        displayName: \"IDS_REPORTDESIGNER\"\n      };\n      this.props.callService(inputParam);\n    };\n\n    this.onTabChange = tabProps => {\n      const screenName = tabProps.screenName;\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          screenName\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.tabDetail = () => {\n      const tabMap = new Map();\n      const addSubReportId = this.state.controlMap.has(\"AddSubReportDetails\") && this.state.controlMap.get(\"AddSubReportDetails\").ncontrolcode;\n      const deleteSubReportId = this.state.controlMap.has(\"DeleteSubReportDetails\") && this.state.controlMap.get(\"DeleteSubReportDetails\").ncontrolcode;\n      const addImageId = this.state.controlMap.has(\"AddReportImages\") && this.state.controlMap.get(\"AddReportImages\").ncontrolcode;\n      const deleteImageId = this.state.controlMap.has(\"DeleteReportImages\") && this.state.controlMap.get(\"DeleteReportImages\").ncontrolcode;\n      const addValidationId = this.state.controlMap.has(\"AddReportValidation\") && this.state.controlMap.get(\"AddReportValidation\").ncontrolcode;\n      const deleteValidationId = this.state.controlMap.has(\"DeleteValidation\") && this.state.controlMap.get(\"DeleteValidation\").ncontrolcode;\n      const addParameterMapping = this.state.controlMap.has(\"AddParameterMapping\") && this.state.controlMap.get(\"AddParameterMapping\").ncontrolcode; //const deleteParameterMapping = this.state.controlMap.has(\"DeleteParameterMapping\") && this.state.controlMap.get(\"DeleteParameterMapping\").ncontrolcode;\n\n      tabMap.set(\"IDS_PARAMETERS\", /*#__PURE__*/React.createElement(DataGrid, {\n        primaryKeyField: \"nreportparametercode\",\n        data: this.props.Login.masterData[\"ReportParameter\"] || [],\n        dataResult: this.props.Login.masterData[\"ReportParameter\"] || [],\n        dataState: {\n          skip: 0,\n          take: this.props.Login.masterData[\"ReportParameter\"] ? this.props.Login.masterData[\"ReportParameter\"].length : 0\n        },\n        extractedColumnList: this.parameterColumnList,\n        controlMap: this.state.controlMap,\n        userRoleControlRights: this.state.userRoleControlRights,\n        inputParam: this.props.Login.inputParam,\n        userInfo: this.props.Login.userInfo,\n        pageable: false,\n        scrollable: \"scrollable\",\n        isActionRequired: false,\n        isToolBarRequired: false,\n        selectedId: null,\n        hideColumnFilter: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1326,\n          columnNumber: 38\n        }\n      }));\n\n      if (this.props.Login && this.props.Login.masterData && this.props.Login.masterData.ReportParameter && this.props.Login.masterData.ReportParameter.length > 0 && (this.props.Login.masterData.SelectedFilterReportType.nreporttypecode === reportTypeEnum.MIS || this.props.Login.masterData.SelectedFilterReportType.nreporttypecode === reportTypeEnum.ALL)) {\n        tabMap.set(\"IDS_DESIGNPARAMETERS\", /*#__PURE__*/React.createElement(DataGrid, {\n          primaryKeyField: \"nreportdesignconfigcode\",\n          data: this.props.Login.masterData[\"ReportDesignConfig\"] || [],\n          dataResult: this.props.Login.masterData[\"ReportDesignConfig\"] || [],\n          dataState: {\n            skip: 0,\n            take: this.props.Login.masterData[\"ReportDesignConfig\"] ? this.props.Login.masterData[\"ReportDesignConfig\"].length : 0\n          } //dataState={this.state.dataState}\n          //dataStateChange={(event)=> this.setState({dataState: event.dataState})}                                                           \n          ,\n          extractedColumnList: this.tabGridColumnList,\n          controlMap: this.state.controlMap,\n          userRoleControlRights: this.state.userRoleControlRights,\n          inputParam: this.props.Login.inputParam,\n          userInfo: this.props.Login.userInfo,\n          pageable: false,\n          scrollable: \"scrollable\",\n          isActionRequired: false,\n          isToolBarRequired: false,\n          selectedId: null,\n          hideColumnFilter: true,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1346,\n            columnNumber: 48\n          }\n        }));\n        tabMap.set(\"IDS_PARAMETERMAPPING\", /*#__PURE__*/React.createElement(DataGrid, {\n          primaryKeyField: \"nreportparametermappingcode\",\n          data: this.props.Login.masterData[\"ReportParameterMapping\"] || [],\n          dataResult: this.props.Login.masterData[\"ReportParameterMapping\"] || [],\n          dataState: {\n            skip: 0,\n            take: this.props.Login.masterData[\"ReportParameterMapping\"] ? this.props.Login.masterData[\"ReportParameterMapping\"].length : 0\n          },\n          extractedColumnList: this.mappingGridFieldList,\n          controlMap: this.state.controlMap,\n          userRoleControlRights: this.state.userRoleControlRights,\n          inputParam: this.props.Login.inputParam,\n          userInfo: this.props.Login.userInfo,\n          pageable: false,\n          scrollable: \"scrollable\",\n          isActionRequired: false,\n          isToolBarRequired: false,\n          selectedId: null,\n          hideColumnFilter: true,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1365,\n            columnNumber: 48\n          }\n        }));\n      } // tabMap.set(\"IDS_ACTIONMAPPING\",  <DataGrid  primaryKeyField={\"nreportparameteractioncode\"}\n      //                                         data={this.props.Login.masterData[\"ReportParameterAction\"] || []}\n      //                                         dataResult={this.props.Login.masterData[\"ReportParameterAction\"] || []}\n      //                                         extractedColumnList={this.actionGridFieldList}\n      //                                         controlMap={this.state.controlMap}\n      //                                         userRoleControlRights={this.state.userRoleControlRights}\n      //                                         inputParam={this.props.Login.inputParam}\n      //                                         userInfo={this.props.Login.userInfo}\n      //                                         pageable={false}\n      //                                         scrollable={\"scrollable\"}                                            \n      //                                         isActionRequired={false}\n      //                                         isToolBarRequired={false}\n      //                                         selectedId={this.props.Login.selectedId}\n      //                                         hideColumnFilter={true}\n      //                                     />)\n\n\n      tabMap.set(\"IDS_SUBREPORTS\", /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Row, {\n        noGutters: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1400,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(Col, {\n        md: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1401,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"actions-stripe d-flex justify-content-end\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1402,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(Nav.Link, {\n        name: \"addsubreport\",\n        className: \"add-txt-btn\",\n        hidden: this.state.userRoleControlRights.indexOf(addSubReportId) === -1,\n        onClick: () => this.openModal(\"IDS_SUBREPORTS\"),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1403,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n        icon: faPlus,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1406,\n          columnNumber: 29\n        }\n      }), \" \", /*#__PURE__*/React.createElement(FormattedMessage, {\n        id: \"IDS_SUBREPORT\",\n        defaultMessage: \"Sub Report\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1407,\n          columnNumber: 29\n        }\n      }))), /*#__PURE__*/React.createElement(DataGrid, {\n        primaryKeyField: \"nsubreportdetailcode\",\n        data: this.props.Login.masterData[\"SubReportDetails\"] || [],\n        dataResult: this.props.Login.masterData[\"SubReportDetails\"] || [],\n        dataState: {\n          skip: 0,\n          take: this.props.Login.masterData[\"SubReportDetails\"] ? this.props.Login.masterData[\"SubReportDetails\"].length : 0\n        },\n        extractedColumnList: this.subReportGridFieldList,\n        controlMap: this.state.controlMap,\n        userRoleControlRights: this.state.userRoleControlRights,\n        inputParam: this.props.Login.inputParam,\n        userInfo: this.props.Login.userInfo,\n        pageable: false,\n        deleteRecord: this.deleteAttachment,\n        deleteParam: {\n          screenName: \"IDS_SUBREPORTS\",\n          methodUrl: \"SubReportDetails\",\n          operation: \"delete\",\n          //masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo,\n          ncontrolcode: deleteSubReportId\n        },\n        methodUrl: \"SubReportDetails\",\n        scrollable: \"scrollable\",\n        isActionRequired: true,\n        isToolBarRequired: false,\n        selectedId: this.props.Login.selectedId,\n        hideColumnFilter: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1410,\n          columnNumber: 21\n        }\n      })))));\n      tabMap.set(\"IDS_IMAGES\", /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Row, {\n        noGutters: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1438,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(Col, {\n        md: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1439,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"actions-stripe d-flex justify-content-end\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1440,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(Nav.Link, {\n        name: \"addimages\",\n        className: \"add-txt-btn\",\n        hidden: this.state.userRoleControlRights.indexOf(addImageId) === -1,\n        onClick: () => this.openModal(\"IDS_IMAGES\"),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1441,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n        icon: faPlus,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1444,\n          columnNumber: 29\n        }\n      }), \" \", /*#__PURE__*/React.createElement(FormattedMessage, {\n        id: \"IDS_IMAGES\",\n        defaultMessage: \"Images\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1445,\n          columnNumber: 29\n        }\n      }))), /*#__PURE__*/React.createElement(DataGrid, {\n        primaryKeyField: \"nreportimagecode\",\n        data: this.props.Login.masterData[\"ReportImages\"] || [],\n        dataResult: this.props.Login.masterData[\"ReportImages\"] || [],\n        dataState: {\n          skip: 0,\n          take: this.props.Login.masterData[\"ReportImages\"] ? this.props.Login.masterData[\"ReportImages\"].length : 0\n        },\n        extractedColumnList: this.imageGridFieldList,\n        controlMap: this.state.controlMap,\n        userRoleControlRights: this.state.userRoleControlRights,\n        inputParam: this.props.Login.inputParam,\n        userInfo: this.props.Login.userInfo,\n        pageable: false,\n        scrollable: \"scrollable\",\n        deleteRecord: this.deleteAttachment,\n        deleteParam: {\n          screenName: \"IDS_IMAGES\",\n          methodUrl: \"ReportImages\",\n          operation: \"delete\",\n          //masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo,\n          ncontrolcode: deleteImageId\n        },\n        methodUrl: \"ReportImages\",\n        isActionRequired: true,\n        isToolBarRequired: false,\n        selectedId: this.props.Login.selectedId,\n        hideColumnFilter: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1448,\n          columnNumber: 21\n        }\n      })))));\n\n      if (this.props.Login && this.props.Login.masterData && this.props.Login.masterData.SelectedFilterReportType.nreporttypecode === reportTypeEnum.SCREENWISE) {\n        tabMap.set(\"IDS_REPORTVALIDATION\", /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Row, {\n          noGutters: true,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1476,\n            columnNumber: 17\n          }\n        }, /*#__PURE__*/React.createElement(Col, {\n          md: 12,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1477,\n            columnNumber: 21\n          }\n        }, /*#__PURE__*/React.createElement(\"div\", {\n          className: \"actions-stripe d-flex justify-content-end\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1478,\n            columnNumber: 25\n          }\n        }, /*#__PURE__*/React.createElement(Nav.Link, {\n          name: \"addValidation\",\n          className: \"add-txt-btn\",\n          hidden: this.state.userRoleControlRights.indexOf(addValidationId) === -1,\n          onClick: () => this.generateControlBasedReportReport(addValidationId),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1479,\n            columnNumber: 29\n          }\n        }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n          icon: faPlus,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1482,\n            columnNumber: 33\n          }\n        }), \" \", /*#__PURE__*/React.createElement(FormattedMessage, {\n          id: \"IDS_REPORTVALIDATION\",\n          defaultMessage: \"Validation Status\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1483,\n            columnNumber: 33\n          }\n        }))), /*#__PURE__*/React.createElement(DataGrid, {\n          primaryKeyField: \"nreportvalidationcode\" //selectedId={this.props.Login.selectedId}\n          ,\n          data: this.props.Login.masterData[\"ReportValidation\"] || [],\n          dataResult: this.props.Login.masterData[\"ReportValidation\"] || [],\n          dataState: {\n            skip: 0,\n            take: this.props.Login.masterData[\"ReportValidation\"] || []\n          } //dataState={{ skip: 0, take: this.props.Login.masterData[\"ReportValidation\"] ? this.props.Login.masterData[\"ReportValidation\"].length : 5 }}\n          //dataStateChange={this.dataStateChange}\n          ,\n          extractedColumnList: this.transValidationFieldList,\n          controlMap: this.state.controlMap,\n          userRoleControlRights: this.state.userRoleControlRights,\n          inputParam: this.props.Login.inputParam,\n          userInfo: this.props.Login.userInfo,\n          deleteRecord: this.deleteValidation,\n          methodUrl: \"ReportValidation\",\n          scrollable: \"scrollable\",\n          pageable: false,\n          isActionRequired: true,\n          isToolBarRequired: false,\n          hideColumnFilter: true,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1486,\n            columnNumber: 25\n          }\n        })))));\n      }\n\n      if (this.props.Login && this.props.Login.masterData && this.props.Login.masterData.SelectedFilterReportType.nreporttypecode === reportTypeEnum.SCREENWISE) {\n        tabMap.set(\"IDS_REPORTPARAMETERMAPPING\", /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Row, {\n          noGutters: true,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1514,\n            columnNumber: 17\n          }\n        }, /*#__PURE__*/React.createElement(Col, {\n          md: 12,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1515,\n            columnNumber: 21\n          }\n        }, /*#__PURE__*/React.createElement(\"div\", {\n          className: \"actions-stripe d-flex justify-content-end\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1516,\n            columnNumber: 25\n          }\n        }, /*#__PURE__*/React.createElement(Nav.Link, {\n          name: \"addParameterMapping\",\n          className: \"add-txt-btn\",\n          hidden: this.state.userRoleControlRights.indexOf(addParameterMapping) === -1,\n          onClick: () => this.generateControlBasedReportReportparametre(addParameterMapping),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1517,\n            columnNumber: 29\n          }\n        }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n          icon: faPlus,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1521,\n            columnNumber: 33\n          }\n        }), \" \", /*#__PURE__*/React.createElement(FormattedMessage, {\n          id: \"IDS_REPORTPARAMETERMAPPING\",\n          defaultMessage: \"Report Parameters\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1522,\n            columnNumber: 33\n          }\n        }))), /*#__PURE__*/React.createElement(DataGrid, {\n          primaryKeyField: \"nreportparameterconfiguration\",\n          data: this.props.Login.masterData[\"ParameterMapping\"] || this.props.Login.ParameterMappingDatagrid,\n          dataResult: this.props.Login.masterData[\"ParameterMapping\"] || this.props.Login.ParameterMappingDatagrid,\n          dataState: {\n            skip: 0,\n            take: this.props.Login.masterData[\"ParameterMapping\"] || []\n          } //? this.props.Login.masterData[\"ParameterMapping\"].length : 0 }}\n          ,\n          extractedColumnList: this.reportparametermappingcolumn,\n          controlMap: this.state.controlMap,\n          userRoleControlRights: this.state.userRoleControlRights,\n          inputParam: this.props.Login.inputParam,\n          userInfo: this.props.Login.userInfo,\n          pageable: false,\n          methodUrl: \"ParameterMapping\",\n          isActionRequired: true,\n          isToolBarRequired: false,\n          selectedId: this.props.Login.selectedId,\n          hideColumnFilter: true,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1525,\n            columnNumber: 25\n          }\n        })))));\n      }\n\n      return tabMap;\n    };\n\n    this.openModal = (screenName, ncontrolCode) => {\n      if (this.props.Login.masterData.SelectedReportDetail == null) {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_REPORTVERSIONNOTFOUND\"\n        }));\n      } else {\n        if (this.props.Login.masterData.SelectedReportDetail.ntransactionstatus === transactionStatus.DRAFT) {\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              selectedRecord: {\n                sreportname: this.props.Login.masterData.SelectedReportMaster.sreportname\n              },\n              operation: \"create\",\n              ncontrolCode,\n              selectedId: null,\n              openModal: true,\n              screenName\n            }\n          };\n          this.props.updateStore(updateInfo);\n        } else if (this.props.Login.masterData.SelectedReportDetail.ntransactionstatus === transactionStatus.APPROVED) {\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_CANNOTADDFORAPPROVEDREPORT\"\n          }));\n        } else if (this.props.Login.masterData.SelectedReportDetail.ntransactionstatus === transactionStatus.RETIRED) {\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_CANNOTADDFORRETIREDREPORT\"\n          }));\n        }\n      }\n    };\n\n    this.addreportParametersInDataGrid = selectedRecord => {\n      //if (this.props.Login.ParameterMappingDatagrid.length !== this.props.Login.masterData.ReportParameter.length) {\n      if (this.props.Login.ParameterMappingDatagrid.length === this.props.Login.masterData.ReportParameter.length || this.state.gridDataparmeter.length === this.props.Login.masterData.ReportParameter.length) {\n        toast.warn(\"You cannot add more than Report Parameters count\");\n      } else {\n        if (selectedRecord && selectedRecord !== undefined && selectedRecord.ncontrolBasedparameter !== undefined && selectedRecord.nquerybuildertablecodecolumn !== undefined) {\n          const duplicate = this.state.gridDataparmeter.map(function (el) {\n            return el.ncontrolBasedparameter;\n          });\n          const duplicateRecord = duplicate.some(num => num === selectedRecord.ncontrolBasedparameter.value);\n          const valuecheck = this.props.Login.ParameterMappingDatagrid.map(function (el) {\n            return el.nreportparametercode;\n          });\n          const isValuePresent = valuecheck.some(num => num === selectedRecord.ncontrolBasedparameter.value);\n\n          if (this.state.gridDataparmeter.length !== 0 && this.props.Login.ParameterMappingDatagrid.length !== 0 || selectedRecord !== undefined) {\n            if (duplicateRecord === true || isValuePresent === true) {\n              toast.warn(this.props.intl.formatMessage({\n                id: \"IDS_ALREADYEXISTS\"\n              }));\n            } else {\n              let copySelected = { ...selectedRecord\n              };\n              const gridDataparmeter = this.state.gridDataparmeter;\n              let controlbasedKey = 0;\n              controlbasedKey = gridDataparmeter.length > 0 ? Math.max(...gridDataparmeter.map(x => x.controlbasedKey)) : 0;\n              controlbasedKey++;\n              gridDataparmeter.push({\n                controlbasedKey: controlbasedKey,\n                ncontrolBasedparameter: copySelected.ncontrolBasedparameter.value,\n                scontrolBasedparameter: copySelected.ncontrolBasedparameter.label,\n                stablecolumn: copySelected.nquerybuildertablecodecolumn.label,\n                ncolumnfield: copySelected.nquerybuildertablecodecolumn.value\n              });\n              let reportTypeListparameter = [];\n              this.state.reportTypeListparameter.map(x => {\n                if (x.value !== copySelected.ncontrolBasedparameter.value) {\n                  reportTypeListparameter.push(x);\n                }\n              });\n              let reportTypeListColumn = [];\n              let reportTypeListName = [];\n              this.setState({\n                selectedRecord: \"\",\n                gridDataparmeter,\n                reportTypeListparameter: reportTypeListparameter,\n                reportTypeListColumn: reportTypeListColumn,\n                reportTypeListName: reportTypeListName\n              }); //}\n            }\n          } else {}\n        } else {\n          if (selectedRecord.ncontrolBasedparameter === undefined || selectedRecord[\"ncontrolBasedparameter\"].length === 0) {\n            toast.info(`${this.props.intl.formatMessage({\n              id: \"IDS_SELECT\"\n            })} ${this.props.intl.formatMessage({\n              id: \"IDS_REPORTPARAMETER\"\n            })}`);\n          } else if (selectedRecord.nquerybuildertablecodecolumn === undefined || selectedRecord[\"nquerybuildertablecodecolumn\"].length === 0) {\n            toast.info(`${this.props.intl.formatMessage({\n              id: \"IDS_SELECT\"\n            })} ${this.props.intl.formatMessage({\n              id: \"IDS_REPORTTABLECOLUMNNAME\"\n            })}`);\n          } else {\n            toast.info(`${this.props.intl.formatMessage({\n              id: \"IDS_SELECT\"\n            })} ${this.props.intl.formatMessage({\n              id: \"IDS_PARAMETERS\"\n            })}`);\n          }\n        }\n      } // } else {\n      //     toast.info(`${this.props.intl.formatMessage({ id: \"IDS_REMOVETHEGRIDVALUEANDADD\" })}`); \n      // }\n\n    };\n\n    this.removereportParametersInDataGrid = selectedRecord => {\n      const gridDataNew = this.state.gridDataparmeter.filter(item => {\n        if (typeof item.ncontrolBasedparameter === \"number\") {\n          return item.ncontrolBasedparameter !== selectedRecord.ncontrolBasedparameter;\n        } else {\n          return item.ncontrolBasedparameter !== selectedRecord.ncontrolBasedparameter;\n        }\n      });\n      const ParameterMappingDatagridNew = this.props.Login.ParameterMappingDatagrid.filter(item => {\n        if (typeof item.ncontrolBasedparameter === \"number\") {\n          return item.ncontrolBasedparameter !== selectedRecord.ncontrolBasedparameter;\n        } else {\n          return item.ncontrolBasedparameter !== selectedRecord.ncontrolBasedparameter;\n        }\n      }); //         const gridDataNew = this.state.gridDataparmeter.filter(item => item.ncontrolBasedparameter !== selectedRecord.ncontrolBasedparameter);\n      // const ParameterMappingDatagridNew = this.props.Login.ParameterMappingDatagrid.filter(item => item.ncontrolBasedparameter !== selectedRecord.ncontrolBasedparameter);\n      // let str=this.props.Login.reportTypeListparametercopy;\n      //     let reportTypeListparameter=str.map(x=>{\n      //          if(x.value===selectedRecord.ncontrolBasedparameter){\n      //               return x;\n      //       }\n      // })\n\n      let str = this.props.Login.reportTypeListparametercopy;\n      let reportTypeListparameter1 = this.state.reportTypeListparameter;\n      let reportTypeListparameter = str.filter(x => x.value === selectedRecord.ncontrolBasedparameter);\n      reportTypeListparameter = reportTypeListparameter.concat(reportTypeListparameter1); //reportTypeListparameter=reportTypeListparameter.splice(1,' ')\n\n      this.props.Login.ParameterMappingDatagrid = ParameterMappingDatagridNew;\n      this.setState({\n        gridDataparmeter: gridDataNew,\n        reportTypeListparameter: reportTypeListparameter\n      });\n    };\n\n    this.removeParametersInDataGrid = selectedItem => {\n      const addDesignParamNew = this.state.addDesignParam.filter(item => {\n        if (typeof item.nreportparametercode === \"number\") {\n          return item.nreportparametercode !== selectedItem.nreportparametercode;\n        } else {\n          return item.nreportparametercode.value !== selectedItem.nreportparametercode;\n        }\n      });\n      const gridDataNew = this.state.gridData.filter(item => {\n        if (typeof item.nreportparametercode === \"number\") {\n          return item.nreportparametercode !== selectedItem.nreportparametercode;\n        } else {\n          return item.nreportparametercode.value !== selectedItem.nreportparametercode;\n        }\n      }); //gridData.filter\n      // (item => item.sfieldname !== selectedItem.sfieldname);\n\n      this.setState({\n        addDesignParam: addDesignParamNew,\n        gridData: gridDataNew\n      });\n    };\n\n    this.addParametersInDataGrid = selectedRecord => {\n      if (this.state.addDesignParam.length === this.props.Login.masterData.ReportParameter.length) {\n        toast.warn(\"You cannot add more than Report Parameters count\");\n      } else {\n        let validData = false;\n\n        if (selectedRecord[\"sdisplayname\"] && selectedRecord[\"sdisplayname\"].trim().length !== 0 && selectedRecord[\"nreportparametercode\"] && selectedRecord[\"ndesigncomponentcode\"]) {\n          validData = true;\n\n          if (selectedRecord[\"ndesigncomponentcode\"].value === designComponents.COMBOBOX) {\n            if (selectedRecord[\"nsqlquerycode\"] && selectedRecord[\"nsqlquerycode\"].length !== 0) {\n              validData = true;\n            } else {\n              validData = false;\n            }\n          }\n\n          if (selectedRecord[\"ndesigncomponentcode\"].value === designComponents.DATEPICKER) {\n            if (selectedRecord[\"ndays\"] && selectedRecord[\"ndays\"].length !== 0) {\n              validData = true;\n            } else {\n              validData = false;\n            }\n          }\n        }\n\n        if (validData) {\n          if (selectedRecord && selectedRecord.nreportparametercode !== undefined) {\n            let copySelected = { ...selectedRecord\n            };\n            const addDesignParam = this.state.addDesignParam;\n            const index = addDesignParam.findIndex(item => {\n              if (typeof item.nreportparametercode === \"number\") {\n                return item.nreportparametercode === copySelected.nreportparametercode.value;\n              } else {\n                return item.nreportparametercode.value === copySelected.nreportparametercode.value;\n              }\n            });\n\n            if (index === -1) {\n              addDesignParam.push(copySelected);\n              const gridData = this.state.gridData;\n              ;\n              gridData.push({\n                nreportparametercode: copySelected.nreportparametercode.value,\n                sreportparametername: copySelected.nreportparametercode.label,\n                sdisplayname: copySelected.sdisplayname,\n                ndesigncomponentcode: copySelected.ndesigncomponentcode.value,\n                sdesigncomponentname: copySelected.ndesigncomponentcode.label\n              });\n              this.setState({\n                addDesignParam,\n                selectedRecord: {\n                  ndays: \"\",\n                  sdisplayname: \"\"\n                },\n                gridData\n              });\n            } else toast.warn(this.props.intl.formatMessage({\n              id: \"IDS_DUPLICATEMAPPING\"\n            }));\n\n            this.setState({\n              selectedRecord: {\n                ndays: \"\",\n                sdisplayname: \"\"\n              }\n            });\n          }\n        } else {\n          //toast.info(this.props.intl.formatMessage({id:\"IDS_FILLMANDATORY\"}));\n          if (selectedRecord[\"nreportparametercode\"] === undefined || selectedRecord[\"nreportparametercode\"].length === 0) {\n            toast.info(`${this.props.intl.formatMessage({\n              id: \"IDS_ENTER\"\n            })} ${this.props.intl.formatMessage({\n              id: \"IDS_PARAMETERS\"\n            })}`);\n          } else if (selectedRecord[\"sdisplayname\"] === undefined || selectedRecord[\"sdisplayname\"] === \"\") {\n            toast.info(`${this.props.intl.formatMessage({\n              id: \"IDS_ENTER\"\n            })} ${this.props.intl.formatMessage({\n              id: \"IDS_DISPLAYNAME\"\n            })}`);\n          } else if (selectedRecord[\"ndesigncomponentcode\"] === undefined || selectedRecord[\"ndesigncomponentcode\"].length === 0) {\n            toast.info(`${this.props.intl.formatMessage({\n              id: \"IDS_ENTER\"\n            })} ${this.props.intl.formatMessage({\n              id: \"IDS_INPUTTYPE\"\n            })}`);\n          } else {\n            if (selectedRecord[\"ndesigncomponentcode\"].value === designComponents.COMBOBOX) {\n              if (selectedRecord[\"nsqlquerycode\"] === undefined || selectedRecord[\"nsqlquerycode\"].length === 0) {\n                toast.info(`${this.props.intl.formatMessage({\n                  id: \"IDS_ENTER\"\n                })} ${this.props.intl.formatMessage({\n                  id: \"IDS_EXISTINGLINKTABLE\"\n                })}`);\n              }\n            } else if (selectedRecord[\"ndesigncomponentcode\"].value === designComponents.DATEPICKER) {\n              if (selectedRecord[\"ndays\"] === undefined || selectedRecord[\"ndays\"].length === 0) {\n                toast.info(`${this.props.intl.formatMessage({\n                  id: \"IDS_ENTER\"\n                })} ${this.props.intl.formatMessage({\n                  id: \"IDS_DAYS\"\n                })}`);\n              }\n            }\n          }\n        }\n      }\n    };\n\n    this.unbindMappingParametersFromDataGrid = selectedItem => {\n      const addMappingParamNew = this.state.addMappingParam.filter(item => {\n        if (typeof item.nchildreportdesigncode === \"number\") {\n          if (item.nchildreportdesigncode === selectedItem.nchildreportdesigncode) {\n            return item.nparentreportdesigncode !== selectedItem.nparentreportdesigncode;\n          } else return item;\n        } else {\n          if (item.nchildreportdesigncode.value === selectedItem.nchildreportdesigncode) {\n            return item.nparentreportdesigncode.value !== selectedItem.nparentreportdesigncode;\n          } else return item;\n        }\n      });\n      const mappingGridDataNew = this.state.mappingGridData.filter(item => {\n        if (typeof item.nchildreportdesigncode === \"number\") {\n          if (item.nchildreportdesigncode === selectedItem.nchildreportdesigncode) {\n            return item.nparentreportdesigncode !== selectedItem.nparentreportdesigncode;\n          } else return item;\n        } else {\n          if (item.nchildreportdesigncode.value === selectedItem.nchildreportdesigncode) {\n            return item.nparentreportdesigncode.value !== selectedItem.nparentreportdesigncode;\n          } else return item;\n        }\n      });\n      this.setState({\n        addMappingParam: addMappingParamNew,\n        mappingGridData: mappingGridDataNew\n      });\n    };\n\n    this.bindMappingParametersToDataGrid = selectedRecord => {\n      if (selectedRecord[\"sfieldname\"] && selectedRecord[\"nparentreportdesigncode\"] && selectedRecord[\"nchildreportdesigncode\"]) {\n        if (selectedRecord && selectedRecord.nparentreportdesigncode !== undefined) {\n          let copySelected = { ...selectedRecord\n          };\n          const addMappingParam = this.state.addMappingParam;\n          const index = addMappingParam.findIndex(item => {\n            if (typeof item.nparentreportdesigncode === \"number\") {\n              return item.nparentreportdesigncode === copySelected.nparentreportdesigncode.value && item.nchildreportdesigncode === copySelected.nchildreportdesigncode.value && item.sfieldname === copySelected.sfieldname.value;\n            } else {\n              return item.nparentreportdesigncode.value === copySelected.nparentreportdesigncode.value && item.nchildreportdesigncode.value === copySelected.nchildreportdesigncode.value && item.sfieldname.value === copySelected.sfieldname.value;\n            }\n          });\n\n          if (index === -1) {\n            addMappingParam.push(copySelected);\n            const mappingGridData = this.state.mappingGridData;\n            ;\n            mappingGridData.push({\n              nparentreportdesigncode: copySelected.nparentreportdesigncode.value,\n              nchildreportdesigncode: copySelected.nchildreportdesigncode.value,\n              sparentparametername: copySelected.nparentreportdesigncode.label,\n              schildparametername: copySelected.nchildreportdesigncode.label,\n              sfieldname: copySelected.sfieldname.value,\n              nactionparameter: transactionStatus.NO\n            });\n            this.setState({\n              addMappingParam,\n              selectedRecord: {\n                nactionreportdesigncode: \"\",\n                nparentreportdesigncode: \"\",\n                sfieldname: \"\",\n                nchildreportdesigncode: \"\"\n              },\n              //selectedRecord:{},\n              mappingGridData\n            });\n          } else {\n            toast.warn(this.props.intl.formatMessage({\n              id: \"IDS_DUPLICATEMAPPING\"\n            }));\n            this.setState({\n              selectedRecord: {\n                nparentreportdesigncode: {\n                  label: \"\",\n                  value: -1\n                },\n                sfieldname: {\n                  label: \"\",\n                  value: -1\n                },\n                nchildreportdesigncode: {\n                  label: \"\",\n                  value: -1\n                }\n              }\n            });\n          }\n        }\n      } else {\n        //toast.warn(this.props.intl.formatMessage({id:\"IDS_FILLMANDATORY\"}));\n        if (selectedRecord[\"nchildreportdesigncode\"] === undefined || selectedRecord[\"nchildreportdesigncode\"].length === 0) {\n          toast.info(`${this.props.intl.formatMessage({\n            id: \"IDS_ENTER\"\n          })} ${this.props.intl.formatMessage({\n            id: \"IDS_PARAMETER\"\n          })}`);\n        } else if (selectedRecord[\"sfieldname\"] === undefined || selectedRecord[\"sfieldname\"].length === 0) {\n          toast.info(`${this.props.intl.formatMessage({\n            id: \"IDS_ENTER\"\n          })} ${this.props.intl.formatMessage({\n            id: \"IDS_FIELDNAME\"\n          })}`);\n        } else if (selectedRecord[\"nparentreportdesigncode\"] === undefined || selectedRecord[\"nparentreportdesigncode\"].length === 0) {\n          toast.info(`${this.props.intl.formatMessage({\n            id: \"IDS_ENTER\"\n          })} ${this.props.intl.formatMessage({\n            id: \"IDS_PARENTPARAMETER\"\n          })}`);\n        }\n      }\n    };\n\n    this.bindActionParameter = (rowItem, event) => {\n      const gridMappingParam = this.state.mappingGridData;\n      const addMappingParam = this.state.addMappingParam;\n\n      if (event.target.checked) {\n        gridMappingParam.forEach(item => {\n          if (item.nchildreportdesigncode === rowItem.selectedRecord.nchildreportdesigncode) {\n            if (item.nparentreportdesigncode === rowItem.selectedRecord.nparentreportdesigncode) {\n              const index = addMappingParam.findIndex(item => item.nchildreportdesigncode === rowItem.selectedRecord.nchildreportdesigncode && item.nparentreportdesigncode === rowItem.selectedRecord.nparentreportdesigncode);\n              addMappingParam[index] = { ...addMappingParam[index],\n                \"nisactionparent\": transactionStatus.YES\n              };\n              return item.nisactionparent = transactionStatus.YES;\n            } else {\n              const index = addMappingParam.findIndex(item => item.nchildreportdesigncode === rowItem.selectedRecord.nchildreportdesigncode && item.nparentreportdesigncode === rowItem.selectedRecord.nparentreportdesigncode);\n              addMappingParam[index] = { ...addMappingParam[index],\n                \"nisactionparent\": transactionStatus.NO\n              };\n              return item.nisactionparent = transactionStatus.NO;\n            }\n          }\n        });\n      } else {\n        const index = gridMappingParam.findIndex(item => item.nchildreportdesigncode === rowItem.selectedRecord.nchildreportdesigncode && item.nparentreportdesigncode === rowItem.selectedRecord.nparentreportdesigncode);\n        gridMappingParam[index][\"nisactionparent\"] = transactionStatus.NO;\n        const index1 = addMappingParam.findIndex(item => item.nchildreportdesigncode === rowItem.selectedRecord.nchildreportdesigncode && item.nparentreportdesigncode === rowItem.selectedRecord.nparentreportdesigncode);\n        addMappingParam[index1] = { ...addMappingParam[index1],\n          \"nisactionparent\": transactionStatus.NO\n        };\n      }\n\n      this.setState({\n        mappingGridData: gridMappingParam,\n        addMappingParam: addMappingParam\n      });\n    };\n\n    this.handleChangeDesign = (value, valueParam) => {\n      if (value !== null) {\n        const selectedRecord = this.state.selectedRecord || {};\n        selectedRecord[valueParam] = value.value;\n        this.setState({\n          selectedRecord\n        });\n      }\n    };\n\n    this.closeModal = () => {\n      let loadEsign = this.props.Login.loadEsign;\n      let openModal = this.props.Login.openModal;\n      let selectedRecord = this.props.Login.selectedRecord;\n      let controlButton = this.props.Login.controlButton;\n\n      if (this.props.Login.loadEsign) {\n        if (this.props.Login.operation === \"delete\" || this.props.Login.operation === \"toggle\" || this.props.Login.operation === \"approve\") {\n          loadEsign = false;\n          openModal = false;\n          selectedRecord = {};\n        } else {\n          loadEsign = false;\n        }\n      } else {\n        openModal = false;\n        selectedRecord = {};\n        controlButton = [];\n      }\n\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          openModal,\n          loadEsign,\n          selectedRecord,\n          selectedId: null,\n          controlButton\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onComboChange = (comboData, fieldName) => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (fieldName === \"nreporttypecode\") {\n        selectedRecord[fieldName] = comboData;\n\n        if (comboData.value === reportTypeEnum.COA || comboData.value === reportTypeEnum.COAPREVIEW || comboData.value === reportTypeEnum.COAPRELIMINARY) {\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              selectedRecord: selectedRecord\n            }\n          };\n          this.props.updateStore(updateInfo);\n        } else if (comboData.value !== reportTypeEnum.MIS && comboData.value !== reportTypeEnum.SCREENWISE && comboData.value !== reportTypeEnum.SAMPLE) {\n          this.props.getReportSubType({\n            selectedRecord,\n            reportType: comboData.item,\n            userInfo: this.props.Login.userInfo\n          });\n        } else if (comboData.value === reportTypeEnum.SAMPLE) {\n          this.props.getReportSampletype({\n            selectedRecord,\n            reportType: comboData.item,\n            nregtypecode: RegistrationType.PLASMA_POOL,\n            userInfo: this.props.Login.userInfo\n          });\n        } else {\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              selectedRecord: selectedRecord\n            }\n          };\n          this.props.updateStore(updateInfo);\n        }\n      } else if (fieldName === \"nchildreportdesigncode\") {\n        //parameter mapping\n        selectedRecord[fieldName] = comboData;\n        const sqlquery = comboData.item.ssqlquery;\n        const param = [];\n        const param1 = []; // let firstIndex = sqlquery.indexOf(\"P$\");\n        // const lastIndex = sqlquery.lastIndexOf(\"P$\");            \n        // let first = sqlquery.indexOf(\"P$\");\n        // let endFirst = sqlquery.indexOf(\"$P\");\n        // do {\n        //     let second = sqlquery.indexOf(\"P$\", first + 1);\n        //     let endSecond = sqlquery.indexOf(\"$P\", endFirst + 1);\n        //     const parameter = sqlquery.substring(first + 2, endFirst);\n        //     param.push({ label: parameter, value: parameter });\n        //     first = second;\n        //     endFirst = endSecond;\n        //     firstIndex = second;\n        // }\n        // while (firstIndex === lastIndex)\n\n        let query = sqlquery;\n\n        while (query.indexOf(\"<@\") !== -1 || query.indexOf(\"<#\") !== -1) {\n          let index1 = query.indexOf(\"<@\");\n          let index2 = query.indexOf(\"@>\");\n          let check = false;\n\n          if (query.indexOf(\"<@\") !== -1) {\n            index1 = query.indexOf(\"<@\");\n            index2 = query.indexOf(\"@>\");\n            check = true;\n          } else if (query.indexOf(\"<#\") !== -1) {\n            index1 = query.indexOf(\"<#\");\n            index2 = query.indexOf(\"#>\");\n          }\n\n          const parameter = query.substring(index1 + 2, index2);\n\n          if (!param1.includes(parameter)) {\n            param.push({\n              label: parameter,\n              value: parameter\n            });\n            param1.push(parameter);\n          }\n\n          if (check) {\n            query = query.replace(\"<@\", \"\").replace(\"@>\", \"\");\n          } else {\n            query = query.replace(\"<#\", \"\").replace(\"#>\", \"\");\n          }\n        }\n\n        this.setState({\n          selectedRecord,\n          optionalParameterList: param\n        }); //}\n      } else if (fieldName === \"ncontrolBasedparameter\") {\n        //parameter mapping\n        selectedRecord[fieldName] = comboData;\n        this.setState({\n          selectedRecord\n        });\n        this.props.controlBasedReportparametretable( //this.state.selectedRecord,\n        this.props.Login.masterData.SelectedReportMaster.nformcode, this.props.Login.masterData.SelectedReportDetail.nreportdetailcode, this.props.Login.userInfo, selectedRecord.ncontrolBasedparameter.item.sdatatype //this.props.Login.screenName\n        );\n      } // else if (fieldName === \"nquerybuildertablecode\") {\n      //     //parameter mapping\n      //     selectedRecord[fieldName] = comboData;\n      //     this.props.controlBasedReportparametretablecolumn(\n      //         //this.state.selectedRecord,\n      //         this.props.Login.masterData.SelectedReportMaster.nformcode,\n      //         this.props.Login.masterData.SelectedReportDetail.nreportdetailcode,\n      //         this.props.Login.userInfo,\n      //         selectedRecord.ncontrolBasedparameter.item.sdatatype,\n      //         //this.props.Login.screenName\n      //     );\n      // }\n      else if (fieldName === \"nsampletypecode\") {\n        selectedRecord[fieldName] = comboData;\n        this.props.getregtype({\n          selectedRecord,\n          sampleType: comboData.item,\n          userInfo: this.props.Login.userInfo\n        });\n      } else if (fieldName === \"nregtypecode\") {\n        selectedRecord[fieldName] = comboData;\n        this.props.getReportRegSubType({\n          selectedRecord,\n          registrationType: comboData.item,\n          userInfo: this.props.Login.userInfo\n        });\n      } else if (fieldName === \"nregsubtypecode\") {\n        selectedRecord[fieldName] = comboData;\n        this.props.getReportRegSubTypeApproveConfigVersion({\n          selectedRecord,\n          registrationsubType: comboData.item,\n          userInfo: this.props.Login.userInfo\n        });\n      } else if (fieldName === \"ncertificatetypecode\") {\n        selectedRecord[fieldName] = comboData;\n        selectedRecord[\"sbatchdisplayname\"] = comboData.item.sbatchdisplayname;\n        this.setState({\n          selectedRecord\n        });\n      } else if (fieldName === \"nformcode\") {\n        selectedRecord[fieldName] = comboData;\n        selectedRecord[\"ncontrolcode\"] = undefined;\n        this.props.getControlButton({\n          selectedRecord,\n          ControlScreen: comboData.item,\n          userInfo: this.props.Login.userInfo\n        });\n      } else if (fieldName === \"ncoareporttypecode\") {\n        selectedRecord[fieldName] = comboData;\n        selectedRecord[\"nsectioncode\"] = undefined; // this.props.getReportTemplate({ selectedRecord, userInfo: this.props.Login.userInfo })\n\n        this.setState({\n          selectedRecord\n        });\n      } else if (fieldName === \"ntranscode\") {\n        //selectedRecord[fieldName] = comboData;\n        //const ntransactionsamplecode = selectedSubsample.map(x => x.ntransactionsamplecode).join(\",\");\n        selectedRecord[\"ntranscode\"] = comboData;\n        this.setState({\n          selectedRecord\n        });\n      } // else if (fieldName === \"nreportparametercode\") {\n      //     //selectedRecord[fieldName] = comboData;\n      //     //const ntransactionsamplecode = selectedSubsample.map(x => x.ntransactionsamplecode).join(\",\");\n      //     selectedRecord[\"nreportparametercode\"] = comboData;\n      //     this.setState({ selectedRecord });\n      // }\n      else {\n        selectedRecord[fieldName] = comboData;\n        this.setState({\n          selectedRecord\n        });\n      }\n    };\n\n    this.onInputOnChange = event => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (event.target.type === 'checkbox') {\n        if (event.target.name === \"ntransactionstatus\") selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.ACTIVE : transactionStatus.DEACTIVE;else selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\n      } else {\n        if (event.target.name === \"ndays\") {\n          if (event.target.value !== \"\") {\n            event.target.value = validateDays(event.target.value);\n            selectedRecord[event.target.name] = event.target.value !== \"\" ? event.target.value : selectedRecord[event.target.name];\n          } else {\n            selectedRecord[event.target.name] = event.target.value;\n          }\n        } else {\n          selectedRecord[event.target.name] = event.target.value;\n        }\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onDropImage = (attachedFiles, fieldName) => {\n      let selectedRecord = this.state.selectedRecord || {};\n      selectedRecord[fieldName] = attachedFiles;\n      this.setState({\n        selectedRecord,\n        actionType: \"new\"\n      });\n    };\n\n    this.onSaveClick = (saveType, formRef) => {\n      if (this.props.Login.screenName === \"IDS_REPORTVERSION\") {\n        this.onSaveVersion(saveType, formRef);\n      } else if (this.props.Login.screenName === \"IDS_REPORTMASTER\") {\n        this.onSaveMaster(saveType, formRef);\n      } else if (this.props.Login.screenName === \"IDS_REPORTDESIGN\") {\n        this.onSaveReportConfig(saveType, formRef);\n      } else if (this.props.Login.screenName === \"IDS_PARAMETERMAPPING\") {\n        this.onSaveParameterMapping(saveType, formRef);\n      } else if (this.props.Login.screenName === \"IDS_ACTIONMAPPING\") {\n        this.onSaveParameterAction(saveType, formRef);\n      } else if (this.props.Login.screenName === \"IDS_SUBREPORTS\") {\n        this.onSaveSubReport(saveType, formRef);\n      } else if (this.props.Login.screenName === \"IDS_IMAGES\") {\n        this.onSaveReportImage(saveType, formRef);\n      } else if (this.props.Login.screenName === \"IDS_REPORTVALIDATION\") {\n        this.onSaveReportValidation(saveType, formRef);\n      } else if (this.props.Login.screenName === \"IDS_REPORTPARAMETERMAPPING\") {\n        this.onSaveReportParameter(saveType, formRef);\n      }\n    };\n\n    this.onSaveMaster = (saveType, formRef) => {\n      const reportFile = this.state.selectedRecord.sfilename;\n      let isFileEdited = transactionStatus.NO;\n      const formData = new FormData();\n      let methodUrl = \"ReportDesigner\";\n      let postParam = undefined;\n      let reportmaster = {\n        \"nsitecode\": this.props.Login.userInfo.nmastersitecode\n      };\n      let inputParam = {};\n\n      if (this.props.Login.operation === \"update\") {\n        // edit           \n        postParam = {\n          inputListName: \"ReportMaster\",\n          selectedObject: \"SelectedReportMaster\",\n          primaryKeyField: \"nreportcode\"\n        };\n\n        if (this.props.Login.reportVersionStatus === transactionStatus.APPROVED) {\n          let approvedReportMaster = this.props.Login.ApprovedReportMaster;\n          approvedReportMaster[\"sfilterreporttypecode\"] = this.props.Login.masterData && this.props.Login.masterData.SelectedFilterReportType && this.props.Login.masterData.SelectedFilterReportType.nreporttypecode.toString();\n          reportmaster = JSON.parse(JSON.stringify(approvedReportMaster));\n          reportmaster[\"ntransactionstatus\"] = this.state.selectedRecord[\"ntransactionstatus\"] ? this.state.selectedRecord[\"ntransactionstatus\"] : transactionStatus.ACTIVE;\n        } else {\n          const data = JSON.parse(JSON.stringify(this.props.Login.selectedRecord));\n          reportmaster[\"nreporttypecode\"] = data[\"nreporttypecode\"].value;\n          reportmaster[\"nreportcode\"] = data[\"nreportcode\"];\n          reportmaster[\"nsampletypecode\"] = transactionStatus.NA;\n          reportmaster[\"nregtypecode\"] = transactionStatus.NA;\n          reportmaster[\"nregsubtypecode\"] = transactionStatus.NA;\n          reportmaster[\"napproveconfversioncode\"] = transactionStatus.NA;\n          reportmaster[\"nsectioncode\"] = transactionStatus.NA;\n          reportmaster[\"nreportmodulecode\"] = transactionStatus.NA;\n          reportmaster[\"nreportdecisiontypecode\"] = transactionStatus.NA;\n          reportmaster[\"ncertificatetypecode\"] = transactionStatus.NA;\n          reportmaster[\"ncoareporttypecode\"] = transactionStatus.NA;\n          reportmaster[\"nreporttemplatecode\"] = transactionStatus.NA;\n          reportmaster[\"sreportname\"] = Lims_JSON_stringify(replaceBackSlash(this.state.selectedRecord[\"sreportname\"]), false);\n          reportmaster[\"sdescription\"] = Lims_JSON_stringify(replaceBackSlash(this.state.selectedRecord[\"sdescription\"] || \"\"), false);\n          reportmaster[\"ntransactionstatus\"] = this.state.selectedRecord[\"ntransactionstatus\"] ? this.state.selectedRecord[\"ntransactionstatus\"] : transactionStatus.ACTIVE;\n          reportmaster[\"sfilterreporttypecode\"] = this.props.Login.masterData && this.props.Login.masterData.SelectedFilterReportType && this.props.Login.masterData.SelectedFilterReportType.nreporttypecode.toString();\n\n          if ( //data[\"nreporttypecode\"].value === reportTypeEnum.SAMPLE || \n          data[\"nreporttypecode\"].value === reportTypeEnum.COA) {\n            reportmaster[\"nsampletypecode\"] = this.state.selectedRecord[\"nsampletypecode\"] ? this.state.selectedRecord[\"nsampletypecode\"].value : data[\"nsampletypecode\"].value;\n            reportmaster[\"nregtypecode\"] = this.state.selectedRecord[\"nregtypecode\"] ? this.state.selectedRecord[\"nregtypecode\"].value : data[\"nregtypecode\"].value;\n            reportmaster[\"nregsubtypecode\"] = this.state.selectedRecord[\"nregsubtypecode\"] ? this.state.selectedRecord[\"nregsubtypecode\"].value : transactionStatus.NA;\n            reportmaster[\"napproveconfversioncode\"] = this.state.selectedRecord[\"napproveconfversioncode\"] ? this.state.selectedRecord[\"napproveconfversioncode\"].value : transactionStatus.NA;\n            reportmaster[\"nsectioncode\"] = this.state.selectedRecord[\"nsectioncode\"] ? this.state.selectedRecord[\"nsectioncode\"].value : transactionStatus.NA;\n            reportmaster[\"ncoareporttypecode\"] = this.state.selectedRecord[\"ncoareporttypecode\"] ? this.state.selectedRecord[\"ncoareporttypecode\"].value : transactionStatus.NA;\n            reportmaster[\"nreporttemplatecode\"] = this.state.selectedRecord[\"nreporttemplatecode\"] ? this.state.selectedRecord[\"nreporttemplatecode\"].value : transactionStatus.NA; // if (data[\"nreporttypecode\"].value === reportTypeEnum.SAMPLE)\n            // {\n            //      reportmaster[\"nreportdecisiontypecode\"] = this.state.selectedRecord[\"nreportdecisiontypecode\"] \n            //                  ? this.state.selectedRecord[\"nreportdecisiontypecode\"].value : data[\"nreportdecisiontypecode\"];\n            // }\n          } else if (this.state.selectedRecord[\"nreporttypecode\"].value === reportTypeEnum.COAPREVIEW || this.state.selectedRecord[\"nreporttypecode\"].value === reportTypeEnum.COAPRELIMINARY) {\n            reportmaster[\"nsampletypecode\"] = this.state.selectedRecord[\"nsampletypecode\"] ? this.state.selectedRecord[\"nsampletypecode\"].value : data[\"nsampletypecode\"].value;\n            reportmaster[\"nregtypecode\"] = this.state.selectedRecord[\"nregtypecode\"] ? this.state.selectedRecord[\"nregtypecode\"].value : data[\"nregtypecode\"].value;\n            reportmaster[\"nregsubtypecode\"] = this.state.selectedRecord[\"nregsubtypecode\"] ? this.state.selectedRecord[\"nregsubtypecode\"].value : transactionStatus.NA;\n            reportmaster[\"napproveconfversioncode\"] = this.state.selectedRecord[\"napproveconfversioncode\"] ? this.state.selectedRecord[\"napproveconfversioncode\"].value : transactionStatus.NA;\n            reportmaster[\"nsectioncode\"] = this.state.selectedRecord[\"nsectioncode\"] ? this.state.selectedRecord[\"nsectioncode\"].value : transactionStatus.NA;\n            reportmaster[\"ncoareporttypecode\"] = this.state.selectedRecord[\"ncoareporttypecode\"] ? this.state.selectedRecord[\"ncoareporttypecode\"].value : transactionStatus.NA;\n            reportmaster[\"nreporttemplatecode\"] = this.state.selectedRecord[\"nreporttemplatecode\"] ? this.state.selectedRecord[\"nreporttemplatecode\"].value : transactionStatus.NA;\n          } else if (data[\"nreporttypecode\"].value === reportTypeEnum.SAMPLE || data[\"nreporttypecode\"].value === reportTypeEnum.BATCH) {\n            reportmaster[\"ncoareporttypecode\"] = this.state.selectedRecord[\"ncoareporttypecode\"] ? this.state.selectedRecord[\"ncoareporttypecode\"].value : transactionStatus.NA;\n            reportmaster[\"ncertificatetypecode\"] = this.state.selectedRecord[\"ncertificatetypecode\"] ? this.state.selectedRecord[\"ncertificatetypecode\"].value : data[\"ncertificatetypecode\"];\n\n            if (data[\"nreporttypecode\"].value === reportTypeEnum.SAMPLE && this.props.Login.masterData.SelectedReportDetail.isneedregtype === transactionStatus.YES) {\n              reportmaster[\"nsampletypecode\"] = this.state.selectedRecord[\"nsampletypecode\"] ? this.state.selectedRecord[\"nsampletypecode\"].value : data[\"nsampletypecode\"].value;\n              reportmaster[\"nregtypecode\"] = this.state.selectedRecord[\"nregtypecode\"] ? this.state.selectedRecord[\"nregtypecode\"].value : data[\"nregtypecode\"].value;\n              reportmaster[\"nregsubtypecode\"] = this.state.selectedRecord[\"nregsubtypecode\"] ? this.state.selectedRecord[\"nregsubtypecode\"].value : transactionStatus.NA;\n              reportmaster[\"nsectioncode\"] = this.state.selectedRecord[\"nsectioncode\"] ? this.state.selectedRecord[\"nsectioncode\"].value : transactionStatus.NA;\n            }\n          } else if (data[\"nreporttypecode\"].value === reportTypeEnum.SCREENWISE) {\n            reportmaster[\"ncontrolcode\"] = this.state.selectedRecord[\"ncontrolcode\"] ? this.state.selectedRecord[\"ncontrolcode\"].value : data[\"ncontrolcode\"];\n          } else {\n            if (data[\"nreporttypecode\"].value === reportTypeEnum.MIS) {\n              if (typeof this.state.selectedRecord[\"nreportmodulecode\"].value === \"string\") {\n                reportmaster[\"nreportmodulecode\"] = 0;\n                reportmaster[\"smoduledisplayname\"] = this.state.selectedRecord[\"nreportmodulecode\"].value;\n                reportmaster[\"jsondata\"] = {\n                  \"sdisplayname\": {\n                    \"en-US\": this.state.selectedRecord[\"nreportmodulecode\"].value,\n                    \"ru-RU\": this.state.selectedRecord[\"nreportmodulecode\"].value,\n                    \"tg-TG\": this.state.selectedRecord[\"nreportmodulecode\"].value\n                  }\n                };\n              } else {\n                reportmaster[\"nreportmodulecode\"] = this.state.selectedRecord[\"nreportmodulecode\"].value;\n              }\n            } else {\n              reportmaster[\"nreportmodulecode\"] = data[\"nreportmodulecode\"];\n            }\n          }\n        }\n\n        inputParam = {\n          classUrl: this.props.Login.inputParam.classUrl,\n          methodUrl: \"ReportMaster\",\n          inputData: {\n            userinfo: { ...this.props.Login.userInfo,\n              sformname: Lims_JSON_stringify(this.props.Login.userInfo.sformname),\n              smodulename: Lims_JSON_stringify(this.props.Login.userInfo.smodulename)\n            },\n            reportmaster\n          },\n          operation: this.props.Login.operation,\n          saveType,\n          formRef,\n          postParam,\n          searchRef: this.searchRef\n        };\n      } else {\n        //add   \n        reportmaster[\"nreporttypecode\"] = this.state.selectedRecord[\"nreporttypecode\"].value; //reportmaster[\"nreporttypecode\"] = this.state.selectedRecord[\"nreporttypecode\"].value == reportTypeEnum.COAPREVIEW ? reportTypeEnum.COA : this.state.selectedRecord[\"nreporttypecode\"].value;\n\n        reportmaster[\"nreportdecisiontypecode\"] = transactionStatus.NA;\n        reportmaster[\"ncertificatetypecode\"] = transactionStatus.NA;\n        reportmaster[\"nsampletypecode\"] = transactionStatus.NA;\n        reportmaster[\"nregtypecode\"] = transactionStatus.NA;\n        reportmaster[\"nregsubtypecode\"] = transactionStatus.NA;\n        reportmaster[\"napproveconfversioncode\"] = transactionStatus.NA;\n        reportmaster[\"nreportmodulecode\"] = transactionStatus.NA;\n        reportmaster[\"ncontrolcode\"] = transactionStatus.NA;\n        reportmaster[\"sreportname\"] = Lims_JSON_stringify(replaceBackSlash(this.state.selectedRecord[\"sreportname\"]), false);\n        reportmaster[\"sdescription\"] = Lims_JSON_stringify(replaceBackSlash(this.state.selectedRecord[\"sdescription\"] || \"\"), false);\n        reportmaster[\"ntransactionstatus\"] = this.state.selectedRecord[\"ntransactionstatus\"];\n        reportmaster[\"ncoareporttypecode\"] = this.state.selectedRecord[\"nreporttypecode\"].value !== reportTypeEnum.MIS && this.state.selectedRecord[\"nreporttypecode\"].value !== reportTypeEnum.SCREENWISE ? this.state.selectedRecord[\"ncoareporttypecode\"].value : transactionStatus.NA;\n\n        if (this.state.selectedRecord[\"nreporttypecode\"].value === reportTypeEnum.SAMPLE) {\n          reportmaster[\"nsampletypecode\"] = this.state.selectedRecord[\"nsampletypecode\"] ? this.state.selectedRecord[\"nsampletypecode\"].value : transactionStatus.NA;\n          reportmaster[\"nregtypecode\"] = this.state.selectedRecord[\"nregtypecode\"] ? this.state.selectedRecord[\"nregtypecode\"].value : transactionStatus.NA;\n          reportmaster[\"nregsubtypecode\"] = this.state.selectedRecord[\"nregsubtypecode\"] ? this.state.selectedRecord[\"nregsubtypecode\"].value : transactionStatus.NA;\n          reportmaster[\"nsectioncode\"] = this.state.selectedRecord[\"nsectioncode\"] ? this.state.selectedRecord[\"nsectioncode\"].value : transactionStatus.NA;\n          reportmaster[\"nreportdecisiontypecode\"] = this.state.selectedRecord[\"nreportdecisiontypecode\"] ? this.state.selectedRecord[\"nreportdecisiontypecode\"].value : transactionStatus.NA;\n          reportmaster[\"ncertificatetypecode\"] = this.state.selectedRecord[\"ncertificatetypecode\"].value;\n        } else if (this.state.selectedRecord[\"nreporttypecode\"].value === reportTypeEnum.BATCH) {\n          reportmaster[\"ncertificatetypecode\"] = this.state.selectedRecord[\"ncertificatetypecode\"].value;\n        } else if (this.state.selectedRecord[\"nreporttypecode\"].value === reportTypeEnum.SCREENWISE) {\n          reportmaster[\"ncontrolcode\"] = this.state.selectedRecord[\"nreporttypecode\"].value === reportTypeEnum.SCREENWISE ? this.state.selectedRecord[\"ncontrolcode\"].value : transactionStatus.NA;\n        } else if (this.state.selectedRecord[\"nreporttypecode\"].value === reportTypeEnum.COA) {\n          reportmaster[\"nsampletypecode\"] = this.state.selectedRecord && this.state.selectedRecord[\"nsampletypecode\"] ? this.state.selectedRecord[\"nsampletypecode\"].value : transactionStatus.NA;\n          reportmaster[\"nregtypecode\"] = this.state.selectedRecord && this.state.selectedRecord[\"nregtypecode\"] ? this.state.selectedRecord[\"nregtypecode\"].value : transactionStatus.NA;\n          reportmaster[\"nregsubtypecode\"] = this.state.selectedRecord && this.state.selectedRecord[\"nregsubtypecode\"] ? this.state.selectedRecord[\"nregsubtypecode\"].value : transactionStatus.NA;\n          reportmaster[\"napproveconfversioncode\"] = this.state.selectedRecord && this.state.selectedRecord[\"napproveconfversioncode\"] ? this.state.selectedRecord[\"napproveconfversioncode\"].value : transactionStatus.NA;\n          reportmaster[\"nsectioncode\"] = this.state.selectedRecord[\"nsectioncode\"] ? this.state.selectedRecord[\"nsectioncode\"].value : transactionStatus.NA;\n          reportmaster[\"nreporttemplatecode\"] = this.state.selectedRecord && this.state.selectedRecord[\"nreporttemplatecode\"] ? this.state.selectedRecord[\"nreporttemplatecode\"].value : transactionStatus.NA;\n        } else if (this.state.selectedRecord[\"nreporttypecode\"].value === reportTypeEnum.COAPREVIEW || this.state.selectedRecord[\"nreporttypecode\"].value === reportTypeEnum.COAPRELIMINARY) {\n          reportmaster[\"nsampletypecode\"] = this.state.selectedRecord && this.state.selectedRecord[\"nsampletypecode\"] ? this.state.selectedRecord[\"nsampletypecode\"].value : transactionStatus.NA;\n          reportmaster[\"nregtypecode\"] = this.state.selectedRecord && this.state.selectedRecord[\"nregtypecode\"] ? this.state.selectedRecord[\"nregtypecode\"].value : transactionStatus.NA;\n          reportmaster[\"nregsubtypecode\"] = this.state.selectedRecord && this.state.selectedRecord[\"nregsubtypecode\"] ? this.state.selectedRecord[\"nregsubtypecode\"].value : transactionStatus.NA;\n          reportmaster[\"napproveconfversioncode\"] = this.state.selectedRecord && this.state.selectedRecord[\"napproveconfversioncode\"] ? this.state.selectedRecord[\"napproveconfversioncode\"].value : transactionStatus.NA;\n          reportmaster[\"nsectioncode\"] = this.state.selectedRecord[\"nsectioncode\"] ? this.state.selectedRecord[\"nsectioncode\"].value : transactionStatus.NA;\n          reportmaster[\"nreporttemplatecode\"] = this.state.selectedRecord && this.state.selectedRecord[\"nreporttemplatecode\"] ? this.state.selectedRecord[\"nreporttemplatecode\"].value : transactionStatus.NA;\n        } else {\n          if (typeof this.state.selectedRecord[\"nreportmodulecode\"].value === \"string\") {\n            reportmaster[\"nreportmodulecode\"] = 0;\n            reportmaster[\"smoduledisplayname\"] = this.state.selectedRecord[\"nreportmodulecode\"].value;\n            reportmaster[\"jsondata\"] = {\n              \"sdisplayname\": {\n                \"en-US\": this.state.selectedRecord[\"nreportmodulecode\"].value,\n                \"ru-RU\": this.state.selectedRecord[\"nreportmodulecode\"].value,\n                \"tg-TG\": this.state.selectedRecord[\"nreportmodulecode\"].value\n              }\n            };\n          } else {\n            reportmaster[\"nreportmodulecode\"] = this.state.selectedRecord[\"nreportmodulecode\"].value;\n          }\n        }\n\n        let reportdetails = {\n          // ncoareporttypecode: this.state.selectedRecord[\"nreporttypecode\"].value !== reportTypeEnum.MIS && this.state.selectedRecord[\"nreporttypecode\"].value !== reportTypeEnum.SCREENWISE  ?\n          //     this.state.selectedRecord[\"ncoareporttypecode\"].value : transactionStatus.NA,\n          // nsectioncode: this.state.selectedRecord[\"nreporttypecode\"].value === reportTypeEnum.SAMPLE ?\n          // this.state.selectedRecord[\"nsectioncode\"]? this.state.selectedRecord[\"nsectioncode\"].value : transactionStatus.NA: transactionStatus.NA,\n          // nreportdecisiontypecode: this.state.selectedRecord[\"nreporttypecode\"].value === reportTypeEnum.SAMPLE ?\n          //                 this.state.selectedRecord[\"nreportdecisiontypecode\"].value : transactionStatus.NA,\n          // ncertificatetypecode: this.state.selectedRecord[\"nreporttypecode\"].value === reportTypeEnum.BATCH ?\n          //                 this.state.selectedRecord[\"ncertificatetypecode\"].value : transactionStatus.NA,\n          ntransactionstatus: transactionStatus.DRAFT,\n          nversionno: -1,\n          nisplsqlquery: this.state.selectedRecord[\"nisplsqlquery\"] ? this.state.selectedRecord[\"nisplsqlquery\"] : transactionStatus.NO,\n          sreportformatdetail: this.state.selectedRecord[\"sreportformatdetail\"] == undefined ? 'pdf' : this.state.selectedRecord[\"sreportformatdetail\"]\n        }; // if(this.state.selectedRecord[\"nreporttypecode\"].value === reportTypeEnum.COA){\n        //     reportdetails={\n        //         ncoareporttypecode : this.state.selectedRecord ? this.state.selectedRecord.ncoareporttypecode.value : transactionStatus.NA,\n        //         nreportdecisiontypecode : transactionStatus.NA,\n        //         ncertificatetypecode : transactionStatus.NA,\n        //         nsectioncode : this.state.selectedRecord && this.state.selectedRecord.nsectioncode ? this.state.selectedRecord.nsectioncode.value : transactionStatus.NA ,\n        //         ntransactionstatus: transactionStatus.DRAFT,\n        //         nisplsqlquery: this.state.selectedRecord ? this.state.selectedRecord[\"nisplsqlquery\"] || transactionStatus.NO : transactionStatus.NO,\n        //     }\n        // }\n        //reportdetails[\"nversionno\"] = -1;\n        // reportdetails[\"nisplsqlquery\"] = this.state.selectedRecord ? this.state.selectedRecord[\"nisplsqlquery\"] || transactionStatus.NO : transactionStatus.NO;\n\n        if (reportFile && Array.isArray(reportFile) && reportFile.length > 0) {\n          const splittedFileName = reportFile[0].name.split('.');\n          const fileExtension = reportFile[0].name.split('.')[splittedFileName.length - 1];\n          const uniquefilename = this.state.selectedRecord.sfilename === \"\" ? this.state.selectedRecord.sfilename : create_UUID() + '.' + fileExtension;\n          reportdetails[\"sfilename\"] = Lims_JSON_stringify(reportFile[0].name.trim(), false);\n          reportdetails[\"ssystemfilename\"] = uniquefilename;\n          formData.append(\"uploadedFile0\", reportFile[0]);\n          formData.append(\"uniquefilename0\", uniquefilename);\n          isFileEdited = transactionStatus.YES; //reportmaster[\"sfilename\"] = \"\";\n        }\n\n        formData.append(\"isFileEdited\", isFileEdited);\n        formData.append(\"filecount\", 1);\n        formData.append(\"reportdetails\", JSON.stringify(reportdetails)); // formData.append(\"userinfo\", JSON.stringify(this.props.Login.userInfo));\n\n        formData.append(\"reportmaster\", JSON.stringify(reportmaster));\n        inputParam = {\n          classUrl: this.props.Login.inputParam.classUrl,\n          methodUrl: methodUrl,\n          //\"ReportDesigner\",\n          //  inputData: inputData,\n          inputData: {\n            userinfo: { ...this.props.Login.userInfo,\n              sformname: Lims_JSON_stringify(this.props.Login.userInfo.sformname),\n              smodulename: Lims_JSON_stringify(this.props.Login.userInfo.smodulename)\n            }\n          },\n          formData: formData,\n          isFileupload: true,\n          operation: this.props.Login.operation,\n          saveType,\n          formRef,\n          postParam,\n          searchRef: this.searchRef\n        };\n      }\n\n      const masterData = this.props.Login.masterData;\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData\n            },\n            saveType\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, masterData, \"openModal\");\n      }\n    };\n\n    this.onSaveVersion = (saveType, formRef) => {\n      const reportFile = this.state.selectedRecord.sfilename;\n      let isFileEdited = transactionStatus.NO;\n      const formData = new FormData();\n      const postParam = {\n        inputListName: \"ReportMaster\",\n        selectedObject: \"SelectedReportMaster\",\n        primaryKeyField: \"nreportcode\"\n      };\n      const reportmaster = this.props.Login.masterData.SelectedReportMaster;\n      reportmaster[\"sfilterreporttypecode\"] = this.props.Login.masterData && this.props.Login.masterData.SelectedFilterReportType && this.props.Login.masterData.SelectedFilterReportType.nreporttypecode.toString();\n      let reportdetails = {\n        // ncoareporttypecode: this.props.Login.masterData.SelectedReportMaster[\"nreporttypecode\"] !== reportTypeEnum.MIS &&this.props.Login.masterData.SelectedReportMaster[\"nreporttypecode\"] !== reportTypeEnum.SCREENWISE  ?\n        //     this.state.selectedRecord[\"ncoareporttypecode\"].value : transactionStatus.NA,\n        // nsectioncode: this.props.Login.masterData.SelectedReportMaster[\"nreporttypecode\"] === reportTypeEnum.SAMPLE ?\n        //                 this.state.selectedRecord[\"nsectioncode\"] ? \n        //                 this.state.selectedRecord[\"nsectioncode\"].value : transactionStatus.NA\n        //                 : transactionStatus.NA,\n        // nreportdecisiontypecode: this.props.Login.masterData.SelectedReportMaster[\"nreporttypecode\"] === reportTypeEnum.SAMPLE ?\n        //                     this.state.selectedRecord[\"nreportdecisiontypecode\"].value : transactionStatus.NA,\n        // ncertificatetypecode: this.props.Login.masterData.SelectedReportMaster[\"nreporttypecode\"] === reportTypeEnum.BATCH ?\n        //                     this.state.selectedRecord[\"ncertificatetypecode\"].value : transactionStatus.NA,\n        ntransactionstatus: transactionStatus.DRAFT,\n        nisplsqlquery: this.state.selectedRecord[\"nisplsqlquery\"] ? this.state.selectedRecord[\"nisplsqlquery\"] : transactionStatus.NO\n      };\n\n      if (this.props.Login.operation === \"update\") {\n        // edit\n        // postParam =  { inputListName : \"ReportDetails\", selectedObject : \"SelectedReportDetail\", \n        //                 primaryKeyField : \"nreportdetailcode\", isChild:true, };\n        const data = JSON.parse(JSON.stringify(this.props.Login.selectedRecord));\n        reportdetails[\"nreportdetailcode\"] = data[\"nreportdetailcode\"];\n        reportdetails[\"nversionno\"] = data[\"nversionno\"];\n        reportdetails[\"sfilename\"] = Lims_JSON_stringify(data[\"sfilename\"][0].path ? data[\"sfilename\"][0].path : data[\"sfilename\"], false);\n        reportdetails[\"ssystemfilename\"] = data[\"ssystemfilename\"];\n        reportdetails[\"sreportformatdetail\"] = this.state.selectedRecord[\"sreportformatdetail\"] == undefined ? 'pdf' : this.state.selectedRecord[\"sreportformatdetail\"];\n      } else {\n        //add               \n        reportdetails[\"nversionno\"] = -1;\n      }\n\n      if (reportFile && Array.isArray(reportFile) && reportFile.length > 0) {\n        const splittedFileName = reportFile[0].name.split('.');\n        const fileExtension = reportFile[0].name.split('.')[splittedFileName.length - 1];\n        const uniquefilename = this.state.selectedRecord.sfilename === \"\" ? this.state.selectedRecord.sfilename : create_UUID() + '.' + fileExtension;\n        reportdetails[\"sfilename\"] = Lims_JSON_stringify(reportFile[0].name, false);\n        reportdetails[\"ssystemfilename\"] = uniquefilename;\n        formData.append(\"uploadedFile0\", reportFile[0]);\n        formData.append(\"uniquefilename0\", uniquefilename);\n        isFileEdited = transactionStatus.YES; //reportmaster[\"sfilename\"] = \"\";\n\n        reportdetails[\"sreportformatdetail\"] = this.state.selectedRecord[\"sreportformatdetail\"] == undefined ? 'pdf' : this.state.selectedRecord[\"sreportformatdetail\"]; //formData.append(\"sreportformatdetail\",sreportformatdetail);\n      }\n\n      formData.append(\"isFileEdited\", isFileEdited);\n      formData.append(\"filecount\", 1);\n      formData.append(\"reportdetails\", JSON.stringify(reportdetails)); //formData.append(\"userinfo\", JSON.stringify(this.props.Login.userInfo));\n\n      formData.append(\"reportmaster\", JSON.stringify(reportmaster));\n      const inputParam = {\n        classUrl: this.props.Login.inputParam.classUrl,\n        methodUrl: \"ReportDetails\",\n        inputData: {\n          userinfo: { ...this.props.Login.userInfo,\n            sformname: Lims_JSON_stringify(this.props.Login.userInfo.sformname),\n            smodulename: Lims_JSON_stringify(this.props.Login.userInfo.smodulename)\n          }\n        },\n        formData: formData,\n        isFileupload: true,\n        operation: this.props.Login.operation,\n        saveType,\n        formRef,\n        postParam,\n        searchRef: this.searchRef,\n        isChild: true\n      };\n      const masterData = this.props.Login.masterData;\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData\n            },\n            saveType\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, masterData, \"openModal\");\n      }\n    };\n\n    this.onSaveReportConfig = (saveType, formRef) => {\n      const postParam = {\n        inputListName: \"ReportMaster\",\n        selectedObject: \"SelectedReportMaster\",\n        primaryKeyField: \"nreportcode\"\n      };\n\n      if (this.state.addDesignParam.length === this.props.Login.masterData.ReportParameter.length) {\n        let operation = this.props.Login.operation;\n        let inputData = [];\n        let selectedId = null;\n        let data = []; //let i = 0;\n\n        inputData[\"userinfo\"] = { ...this.props.Login.userInfo,\n          sformname: Lims_JSON_stringify(this.props.Login.userInfo.sformname),\n          smodulename: Lims_JSON_stringify(this.props.Login.userInfo.smodulename)\n        };\n\n        if (JSON.stringify(this.state.addDesignParam) !== JSON.stringify(this.props.Login.masterData.ReportDesignConfig)) {\n          this.state.addDesignParam.forEach(item => {\n            data.push({\n              \"nreportdetailcode\": this.props.Login.masterData.SelectedReportDetail.nreportdetailcode,\n              \"ndesigncomponentcode\": typeof item.ndesigncomponentcode === \"number\" ? item.ndesigncomponentcode : item.ndesigncomponentcode.value,\n              \"nsqlquerycode\": item.nsqlquerycode ? typeof item.nsqlquerycode === \"number\" ? item.nsqlquerycode : item.nsqlquerycode.value : transactionStatus.NA,\n              \"nreportparametercode\": typeof item.nreportparametercode === \"number\" ? item.nreportparametercode : item.nreportparametercode.value,\n              \"sdisplayname\": item.sdisplayname,\n              \"ndays\": item.ndays ? item.ndays : 0\n            });\n          });\n          inputData[\"reportdesignconfig\"] = data;\n          const inputParam = {\n            classUrl: this.props.Login.inputParam.classUrl,\n            methodUrl: \"ReportDesignParameter\",\n            displayName: this.props.Login.inputParam.displayName,\n            inputData: inputData,\n            postParam,\n            operation: operation,\n            saveType,\n            formRef,\n            dataState: undefined,\n            selectedId,\n            isChild: true\n          };\n\n          if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\n            const updateInfo = {\n              typeName: DEFAULT_RETURN,\n              data: {\n                loadEsign: true,\n                screenData: {\n                  inputParam,\n                  masterData: this.props.Login.masterData\n                },\n                saveType\n              }\n            };\n            this.props.updateStore(updateInfo);\n          } else {\n            this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\n          }\n        } else {\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_NODATATOSAVE\"\n          }));\n        }\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_CONFIGUREALLPARAMETERS\"\n        }));\n      }\n    };\n\n    this.onSaveParameterMapping = (saveType, formRef) => {\n      let operation = this.props.Login.operation;\n      let inputData = [];\n      let selectedId = null;\n      const postParam = {\n        inputListName: \"ReportMaster\",\n        selectedObject: \"SelectedReportMaster\",\n        primaryKeyField: \"nreportcode\"\n      };\n      inputData[\"userinfo\"] = { ...this.props.Login.userInfo,\n        sformname: Lims_JSON_stringify(this.props.Login.userInfo.sformname),\n        smodulename: Lims_JSON_stringify(this.props.Login.userInfo.smodulename)\n      };\n      inputData[\"reportparametermapping\"] = [];\n      inputData[\"reportdetails\"] = this.props.Login.masterData.SelectedReportDetail; //inputData[\"reportparameteraction\"] = [];\n      // if ((this.props.Login.masterData.ReportParameterMapping.length > 0 && this.state.mappingGridData.length === 0)\n      //     || (this.props.Login.masterData.ReportParameterMapping.length === 0 && this.state.mappingGridData.length > 0))\n      // {\n      // if (JSON.stringify(this.state.addMappingParam) !==JSON.stringify(this.props.Login.masterData.ReportParameterMapping))\n      // {\n\n      let count = 0;\n      this.state.mappingGridData.forEach(item => {\n        if (item.nisactionparent === transactionStatus.YES) count = count + 1;\n        inputData[\"reportparametermapping\"].push({\n          \"nreportdetailcode\": this.props.Login.masterData.SelectedReportDetail.nreportdetailcode,\n          \"nparentreportdesigncode\": item.nparentreportdesigncode,\n          \"nchildreportdesigncode\": item.nchildreportdesigncode,\n          \"sfieldname\": item.sfieldname,\n          \"nisactionparent\": item.nisactionparent\n        }); // if(item.nactionparameter === transactionStatus.YES)\n        //     inputData[\"reportparameteraction\"].push({\"nreportdetailcode\":this.props.Login.masterData.SelectedReportDetail.nreportdetailcode,\n        //                                                 \"nreportdesigncode\": item.nchildreportdesigncode,\n        //                                                 \"nparentreportdesigncode\": item.nparentreportdesigncode,                                                            \n        //                                             });  \n      });\n      let valid = false;\n\n      if (this.state.mappingGridData.length > 0) {\n        if (count === this.props.Login.childComponentList.length) {\n          valid = true;\n        }\n      } else {\n        if (this.props.Login.masterData.ReportParameterMapping.length === 0 && this.state.mappingGridData.length === 0) {\n          valid = false;\n        } else valid = true;\n      }\n\n      if (valid) {\n        const inputParam = {\n          classUrl: this.props.Login.inputParam.classUrl,\n          methodUrl: \"ReportParameterMapping\",\n          displayName: this.props.Login.inputParam.displayName,\n          inputData: inputData,\n          postParam,\n          operation: operation,\n          saveType,\n          formRef,\n          dataState: undefined,\n          selectedId,\n          isChild: true\n        };\n\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              loadEsign: true,\n              screenData: {\n                inputParam,\n                masterData: this.props.Login.masterData\n              },\n              saveType //openModal: true, screenName: this.props.intl.formatMessage({ id: this.props.Login.inputParam.displayName }),\n              ///operation: this.props.Login.operation\n\n            }\n          };\n          this.props.updateStore(updateInfo);\n        } else {\n          this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\n        }\n      } else {\n        if (this.state.mappingGridData.length === 0) {\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_NODATATOSAVE\"\n          }));\n        } else {\n          if (count !== this.props.Login.childComponentList.length) toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_INSUFFICIENTACTIONPARENT\"\n          }));else toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_NODATATOSAVE\"\n          }));\n        }\n      }\n    };\n\n    this.onSaveSubReport = (saveType, formRef) => {\n      const reportFile = this.state.selectedRecord.sfilename;\n      const formData = new FormData();\n      const postParam = {\n        inputListName: \"ReportMaster\",\n        selectedObject: \"SelectedReportMaster\",\n        primaryKeyField: \"nreportcode\"\n      };\n      const reportdetails = this.props.Login.masterData.SelectedReportDetail;\n      const subreportdetails = {\n        nreportdetailcode: reportdetails.nreportdetailcode,\n        nreportcode: reportdetails.nreportcode\n      };\n\n      if (reportFile && Array.isArray(reportFile) && reportFile.length > 0) {\n        const splittedFileName = reportFile[0].name.split('.');\n        const fileExtension = reportFile[0].name.split('.')[splittedFileName.length - 1];\n        const uniquefilename = this.state.selectedRecord.sfilename === \"\" ? this.state.selectedRecord.sfilename : create_UUID() + '.' + fileExtension;\n        subreportdetails[\"sfilename\"] = Lims_JSON_stringify(reportFile[0].name.trim(), false);\n        ;\n        subreportdetails[\"ssystemfilename\"] = uniquefilename;\n        formData.append(\"uploadedFile0\", reportFile[0]);\n        formData.append(\"uniquefilename0\", uniquefilename);\n      }\n\n      formData.append(\"filecount\", 1); //formData.append(\"reportdetails\", JSON.stringify(reportdetails));\n\n      formData.append(\"subreportdetails\", JSON.stringify(subreportdetails)); // formData.append(\"userinfo\", JSON.stringify(this.props.Login.userInfo));\n\n      const inputParam = {\n        classUrl: this.props.Login.inputParam.classUrl,\n        methodUrl: \"SubReportDetails\",\n        inputData: {\n          userinfo: { ...this.props.Login.userInfo,\n            sformname: Lims_JSON_stringify(this.props.Login.userInfo.sformname),\n            smodulename: Lims_JSON_stringify(this.props.Login.userInfo.smodulename)\n          }\n        },\n        formData: formData,\n        isFileupload: true,\n        operation: this.props.Login.operation,\n        saveType,\n        formRef,\n        postParam,\n        searchRef: this.searchRef,\n        isChild: true\n      };\n      const masterData = this.props.Login.masterData;\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData\n            },\n            saveType\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, masterData, \"openModal\");\n      }\n    };\n\n    this.onSaveReportImage = (saveType, formRef) => {\n      const reportFile = this.state.selectedRecord.sfilename;\n      const formData = new FormData();\n      const postParam = {\n        inputListName: \"ReportMaster\",\n        selectedObject: \"SelectedReportMaster\",\n        primaryKeyField: \"nreportcode\"\n      };\n      const reportdetails = this.props.Login.masterData.SelectedReportDetail;\n      const reportimages = {\n        nreportdetailcode: reportdetails.nreportdetailcode,\n        nreportcode: reportdetails.nreportcode\n      };\n\n      if (reportFile && Array.isArray(reportFile) && reportFile.length > 0) {\n        const splittedFileName = reportFile[0].name.split('.');\n        const fileExtension = reportFile[0].name.split('.')[splittedFileName.length - 1];\n        const uniquefilename = this.state.selectedRecord.sfilename === \"\" ? this.state.selectedRecord.sfilename : create_UUID() + '.' + fileExtension;\n        reportimages[\"sfilename\"] = Lims_JSON_stringify(reportFile[0].name.trim(), false);\n        reportimages[\"ssystemfilename\"] = uniquefilename;\n        formData.append(\"uploadedFile0\", reportFile[0]);\n        formData.append(\"uniquefilename0\", uniquefilename);\n      }\n\n      formData.append(\"filecount\", 1); //formData.append(\"reportdetails\", JSON.stringify(reportdetails));\n\n      formData.append(\"reportimages\", JSON.stringify(reportimages)); //  formData.append(\"userinfo\", JSON.stringify(this.props.Login.userInfo));\n\n      const inputParam = {\n        classUrl: this.props.Login.inputParam.classUrl,\n        methodUrl: \"ReportImages\",\n        inputData: {\n          userinfo: { ...this.props.Login.userInfo,\n            sformname: Lims_JSON_stringify(this.props.Login.userInfo.sformname),\n            smodulename: Lims_JSON_stringify(this.props.Login.userInfo.smodulename)\n          }\n        },\n        formData: formData,\n        isFileupload: true,\n        operation: this.props.Login.operation,\n        saveType,\n        formRef,\n        postParam,\n        searchRef: this.searchRef,\n        isChild: true\n      };\n      const masterData = this.props.Login.masterData;\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData\n            },\n            saveType\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, masterData, \"openModal\");\n      }\n    };\n\n    this.onSaveReportValidation = (saveType, formRef) => {\n      if (this.state.selectedRecord.ntranscode === undefined) {\n        toast.info(`${this.props.intl.formatMessage({\n          id: \"IDS_SELECT\"\n        })} ${this.props.intl.formatMessage({\n          id: \"IDS_TRANSACTIONSTATUS\"\n        })}`);\n      } else {\n        const inputParam = {\n          nformcode: this.props.Login.userInfo.nformcode,\n          classUrl: this.props.Login.inputParam.classUrl,\n          methodUrl: \"ReportValidation\",\n          inputData: {\n            userinfo: { ...this.props.Login.userInfo,\n              sformname: Lims_JSON_stringify(this.props.Login.userInfo.sformname),\n              smodulename: Lims_JSON_stringify(this.props.Login.userInfo.smodulename)\n            },\n            nformcode: this.props.Login.masterData.SelectedReportMaster.nformcode,\n            ncontrolcode: this.props.Login.masterData.SelectedReportMaster.ncontrolcode,\n            nreportdetailcode: this.props.Login.masterData.SelectedReportDetail.nreportdetailcode,\n            ntransctionstatus: this.state.selectedRecord.ntranscode.map(item => item.value).join(\",\")\n          },\n          //ntransationstatus:this.state.selectedRecord.ntranscode.map(item => item.ntranscode).join(\",\") },\n          operation: \"create\",\n          saveType,\n          formRef\n        };\n        const masterData = this.props.Login.masterData;\n\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              loadEsign: true,\n              screenData: {\n                inputParam,\n                masterData\n              },\n              saveType\n            }\n          };\n          this.props.updateStore(updateInfo);\n        } else {\n          this.props.crudMaster(inputParam, masterData, \"openModal\");\n        }\n      }\n    };\n\n    this.onSaveReportParameter = (saveType, formRef) => {\n      if (this.state.gridDataparmeter.length === 0) {\n        toast.info(`${this.props.intl.formatMessage({\n          id: \"IDS_ADDTHEPARMTERIN GERIDTHENSAVE\"\n        })}`);\n      } else {\n        const inputParam = {\n          nformcode: this.props.Login.userInfo.nformcode,\n          classUrl: this.props.Login.inputParam.classUrl,\n          //\"controlbasedreport\",\n          methodUrl: \"ControlBasedReportparametreInsert\",\n          inputData: {\n            userinfo: { ...this.props.Login.userInfo,\n              sformname: Lims_JSON_stringify(this.props.Login.userInfo.sformname),\n              smodulename: Lims_JSON_stringify(this.props.Login.userInfo.smodulename)\n            },\n            //indexof:\n            ncontrolCode: this.props.Login.userInfo.nformcode,\n            nreportcode: this.props.Login.masterData.SelectedReportMaster.nreportcode,\n            nreportdetailcode: this.props.Login.masterData.SelectedReportDetail.nreportdetailcode,\n            ncontrolbasedparameter: this.state.gridDataparmeter.map(function (el) {\n              return el.ncontrolBasedparameter;\n            }).join(\",\") || null,\n            //this.state.selectedRecord.ncontrolBasedparameter.value, \n            nquerybuildertablecode: this.state.gridDataparmeter.map(function (el) {\n              return el.nquerybuildertablecode;\n            }).join(\",\") || null,\n            //this.state.selectedRecord.nquerybuildertablecode.value,\n            squerybuildertablecodecolumn: this.state.gridDataparmeter.map(function (el) {\n              return \"'\" + el.stablecolumn + \"'\";\n            }).join(\",\"),\n            //this.state.selectedRecord.nquerybuildertablecodecolumn.label,\n            nreportparameterconfigurationcode: this.props.Login.masterData.ParameterMapping.map(function (el) {\n              return el.nreportparameterconfigurationcode;\n            }).join(\",\") || null\n          },\n          operation: \"create\",\n          saveType,\n          formRef\n        };\n        const masterData = this.props.Login.masterData;\n\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              loadEsign: true,\n              screenData: {\n                inputParam,\n                masterData\n              },\n              saveType\n            }\n          };\n          this.props.updateStore(updateInfo);\n        } else {\n          this.props.crudMaster(inputParam, masterData, \"openModal\");\n        }\n      }\n    };\n\n    this.deleteFile = fieldName => {\n      let selectedRecord = this.state.selectedRecord || {};\n      selectedRecord[fieldName] = \"\";\n      this.setState({\n        selectedRecord,\n        actionType: \"delete\"\n      });\n    };\n\n    this.approveReport = ncontrolCode => {\n      if (this.props.Login.masterData.SelectedReportDetail) {\n        if (this.props.Login.masterData.SelectedReportDetail.ntransactionstatus === transactionStatus.APPROVED) {\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_REPORTALREADYAPPROVED\"\n          }));\n        } else {\n          const postParam = {\n            inputListName: \"ReportDetails\",\n            selectedObject: \"SelectedReportDetail\",\n            primaryKeyField: \"nreportdetailcode\",\n            primaryKeyValue: this.props.Login.masterData.SelectedReportDetail.nreportdetailcode,\n            fetchUrl: \"reportconfig/getReportDetail\",\n            fecthInputObject: {\n              userinfo: this.props.Login.userInfo\n            }\n          };\n          let SelectedReportDetail = this.props.Login.masterData.SelectedReportDetail;\n          SelectedReportDetail[\"sfilterreporttypecode\"] = this.props.Login.masterData && this.props.Login.masterData.SelectedFilterReportType && this.props.Login.masterData.SelectedFilterReportType.nreporttypecode.toString();\n          const inputParam = {\n            classUrl: this.props.Login.inputParam.classUrl,\n            methodUrl: \"ReportVersion\",\n            inputData: {\n              \"userinfo\": this.props.Login.userInfo,\n              // \"reportdetails\": this.props.Login.masterData.SelectedReportDetail\n              \"reportdetails\": SelectedReportDetail\n            },\n            operation: \"approve\",\n            postParam,\n            isChild: true\n          };\n          const masterData = this.props.Login.masterData;\n\n          if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, ncontrolCode)) {\n            const updateInfo = {\n              typeName: DEFAULT_RETURN,\n              data: {\n                loadEsign: true,\n                screenData: {\n                  inputParam,\n                  masterData\n                },\n                openModal: true,\n                screenName: \"IDS_REPORTMASTER\",\n                operation: \"approve\"\n              }\n            };\n            this.props.updateStore(updateInfo);\n          } else {\n            this.props.crudMaster(inputParam, masterData, \"openModal\");\n          }\n        }\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_NOVERSIONTOAPPROVE\"\n        }));\n      }\n    };\n\n    this.deleteValidation = deleteParam => {\n      if (this.props.Login.masterData.SelectedReportDetail.ntransactionstatus === transactionStatus.APPROVED) {\n        const message = \"IDS_CANNOTDELETEFORAPPROVEDREPORT\";\n        toast.warn(this.props.intl.formatMessage({\n          id: message\n        }));\n      } else {\n        delete deleteParam.selectedRecord.dmodifieddate;\n        const inputParam = {\n          classUrl: this.props.Login.inputParam.classUrl,\n          methodUrl: \"ReportValidation\",\n          inputData: {\n            \"reportvalidation\": deleteParam.selectedRecord,\n            \"userinfo\": this.props.Login.userInfo\n          },\n          operation: \"delete\",\n          isChild: true\n        };\n        const masterData = this.props.Login.masterData;\n\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, deleteParam.ncontrolCode)) {\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              loadEsign: true,\n              screenData: {\n                inputParam,\n                masterData\n              },\n              openModal: true,\n              screenName: deleteParam.screenName,\n              operation: deleteParam.operation\n            }\n          };\n          this.props.updateStore(updateInfo);\n        } else {\n          this.props.crudMaster(inputParam, masterData, \"openModal\");\n        }\n      }\n    };\n\n    this.deleteAttachment = deleteParam => {\n      if (this.props.Login.masterData.SelectedReportDetail.ntransactionstatus === transactionStatus.APPROVED) {\n        const message = \"IDS_CANNOTDELETEFORAPPROVEDREPORT\";\n        toast.warn(this.props.intl.formatMessage({\n          id: message\n        }));\n      } else {\n        const postParam = {\n          inputListName: \"ReportMaster\",\n          selectedObject: \"SelectedReportMaster\",\n          primaryKeyField: \"nreportcode\",\n          primaryKeyValue: this.props.Login.masterData.SelectedReportMaster.nreportcode,\n          fetchUrl: \"reportconfig/getReportDesigner\",\n          fecthInputObject: {\n            userinfo: this.props.Login.userInfo\n          }\n        };\n        const inputParam = {\n          classUrl: this.props.Login.inputParam.classUrl,\n          methodUrl: deleteParam.methodUrl,\n          inputData: {\n            [deleteParam.methodUrl.toLowerCase()]: deleteParam.selectedRecord,\n            \"userinfo\": this.props.Login.userInfo\n          },\n          operation: deleteParam.operation,\n          isChild: true,\n          postParam\n        };\n        const masterData = this.props.Login.masterData;\n\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, deleteParam.ncontrolCode)) {\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              loadEsign: true,\n              screenData: {\n                inputParam,\n                masterData\n              },\n              openModal: true,\n              screenName: deleteParam.screenName,\n              operation: deleteParam.operation\n            }\n          };\n          this.props.updateStore(updateInfo);\n        } else {\n          this.props.crudMaster(inputParam, masterData, \"openModal\");\n        }\n      }\n    };\n\n    this.deleteReport = deleteParam => {\n      const postParam = {\n        inputListName: \"ReportMaster\",\n        selectedObject: \"SelectedReportMaster\",\n        primaryKeyField: \"nreportcode\",\n        primaryKeyValue: this.props.Login.masterData.SelectedReportMaster.nreportcode,\n        fetchUrl: \"reportconfig/getReportDesigner\",\n        fecthInputObject: {\n          userinfo: this.props.Login.userInfo\n        }\n      };\n      let masterToDelete = deleteParam.mastertodelete;\n      masterToDelete[\"sfilterreporttypecode\"] = this.props.Login.masterData && this.props.Login.masterData.SelectedFilterReportType && this.props.Login.masterData.SelectedFilterReportType.nreporttypecode.toString();\n      const inputParam = {\n        classUrl: this.props.Login.inputParam.classUrl,\n        methodUrl: deleteParam.methodUrl,\n        inputData: {\n          \"userinfo\": this.props.Login.userInfo,\n          // [deleteParam.listName]: deleteParam.mastertodelete\n          [deleteParam.listName]: masterToDelete\n        },\n        operation: deleteParam.operation,\n        postParam,\n        isChild: deleteParam.methodUrl === \"ReportDetails\" ? true : undefined\n      };\n      const masterData = this.props.Login.masterData;\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, deleteParam.ncontrolCode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData\n            },\n            openModal: true,\n            screenName: deleteParam.screenName,\n            operation: deleteParam.operation\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, masterData, \"openModal\");\n      }\n    };\n\n    this.updateReportStatus = methodParam => {\n      const reportmaster = methodParam.mastertoupdate;\n      let status = reportmaster.ntransactionstatus;\n\n      if (status === transactionStatus.ACTIVE) {\n        status = transactionStatus.DEACTIVE;\n      } else {\n        status = transactionStatus.ACTIVE;\n      }\n\n      reportmaster[\"ntransactionstatus\"] = status;\n      let postParam = {\n        inputListName: \"ReportMaster\",\n        selectedObject: \"SelectedReportMaster\",\n        primaryKeyField: \"nreportcode\"\n      };\n      const inputParam = {\n        classUrl: this.props.Login.inputParam.classUrl,\n        methodUrl: \"ReportStatus\",\n        inputData: {\n          \"userinfo\": this.props.Login.userInfo,\n          reportmaster\n        },\n        operation: methodParam.operation,\n        postParam\n      };\n      const masterData = this.props.Login.masterData;\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, methodParam.ncontrolCode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData\n            },\n            openModal: true,\n            screenName: methodParam.screenName,\n            operation: methodParam.operation\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, masterData, \"openModal\");\n      }\n    };\n\n    this.validateEsign = () => {\n      const inputParam = {\n        inputData: {\n          \"userinfo\": { ...this.props.Login.userInfo,\n            sreason: this.state.selectedRecord[\"esigncomments\"],\n            nreasoncode: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].value,\n            spredefinedreason: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].label\n          },\n          password: this.state.selectedRecord[\"esignpassword\"]\n        },\n        screenData: this.props.Login.screenData\n      };\n      this.props.validateEsignCredential(inputParam, \"openModal\");\n    };\n\n    this.reloadData = () => {\n      this.searchRef.current.value = \"\";\n      const inputParam = {\n        inputData: {\n          \"userinfo\": this.props.Login.userInfo,\n          nreporttypecode: String(this.props.Login.masterData.SelectedFilterReportType.nreporttypecode)\n        },\n        classUrl: \"reportconfig\",\n        methodUrl: \"ReportDesigner\",\n        userInfo: this.props.Login.userInfo,\n        displayName: \"IDS_REPORTDESIGNER\"\n      };\n      this.props.callService(inputParam);\n    };\n\n    this.searchRef = React.createRef();\n    this.state = {\n      masterStatus: \"\",\n      error: \"\",\n      selectedRecord: {},\n      operation: \"\",\n      //dataState, dataResult:[],\n      screenName: undefined,\n      userRoleControlRights: [],\n      controlMap: new Map(),\n      // actionMappingParentList:[],\n      addMappingParam: [],\n      firstPane: 0,\n      paneHeight: 0,\n      secondPaneHeight: 0,\n      tabPane: 0,\n      //masterSkip:0,\n      //masterTake:25,\n      detailSkip: 0,\n      detailTake: 10,\n      splitChangeWidthPercentage: 22,\n      skip: 0,\n      take: this.props.Login.settings && parseInt(this.props.Login.settings[3])\n    };\n    this.parameterColumnList = [{\n      \"idsName\": \"IDS_PARAMETERS\",\n      \"dataField\": \"sreportparametername\",\n      \"width\": \"250px\"\n    }, {\n      \"idsName\": \"IDS_DATATYPE\",\n      \"dataField\": \"sdisplaydatatype\",\n      \"width\": \"400px\"\n    }];\n    this.designInputFieldList = [{\n      \"idsName\": \"IDS_REPORTNAME\",\n      \"dataField\": \"sreportname\"\n    }, {\n      \"idsName\": \"IDS_INPUTTYPE\",\n      \"dataField\": \"ndesigncomponentcode\",\n      \"listName\": \"designComponentList\",\n      \"optionId\": \"ndesigncomponentcode\",\n      \"optionValue\": \"sdesigncomponentname\"\n    }, {\n      \"idsName\": \"IDS_PARAMETERS\",\n      \"dataField\": \"nreportparametercode\",\n      \"listName\": \"reportParameterList\",\n      \"optionId\": \"nreportparametercode\",\n      \"optionValue\": \"sreportparametername\"\n    }, {\n      \"idsName\": \"IDS_EXISTINGLINKTABLE\",\n      \"dataField\": \"nsqlquerycode\",\n      \"listName\": \"sqlQueryList\",\n      \"optionId\": \"nsqlquerycode\",\n      \"optionValue\": \"ssqlqueryname\"\n    }, {\n      \"idsName\": \"IDS_DISPLAYNAME\",\n      \"dataField\": \"sdisplayname\"\n    }, {\n      \"idsName\": \"IDS_DAYS\",\n      \"dataField\": \"ndays\",\n      \"maxLength\": 5\n    } //{ \"idsName\": \"IDS_MANDATORY\", \"dataField\": \"nmandatory\"}\n    ];\n    this.designGridColumnList = [{\n      \"idsName\": \"IDS_PARAMETERS\",\n      \"dataField\": \"sreportparametername\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_DISPLAYNAME\",\n      \"dataField\": \"sdisplayname\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_INPUTTYPE\",\n      \"dataField\": \"sdesigncomponentname\",\n      \"width\": \"200px\"\n    } // { \"idsName\": \"IDS_SQLQUERY\", \"dataField\": \"ssqlqueryname\", \"width\": \"200px\" },\n    //  { \"idsName\": \"IDS_DAYS\", \"dataField\": \"ndays\", \"width\": \"150px\" },\n    // { \"idsName\": \"IDS_MANDATORY\", \"dataField\": \"smandatory\", \"width\": \"150px\" },\n    ];\n    this.tabGridColumnList = [{\n      \"idsName\": \"IDS_PARAMETERS\",\n      \"dataField\": \"sreportparametername\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_DISPLAYNAME\",\n      \"dataField\": \"sdisplayname\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_INPUTTYPE\",\n      \"dataField\": \"sdesigncomponentname\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_SQLQUERY\",\n      \"dataField\": \"ssqlqueryname\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_DAYS\",\n      \"dataField\": \"ndays\",\n      \"width\": \"150px\"\n    }, {\n      \"idsName\": \"IDS_MANDATORY\",\n      \"dataField\": \"smandatory\",\n      \"width\": \"150px\"\n    }];\n    this.mappingGridFieldList = [{\n      \"idsName\": \"IDS_PARAMETERS\",\n      \"dataField\": \"schildparametername\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_FIELDNAME\",\n      \"dataField\": \"sfieldname\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_PARENTPARAMETER\",\n      \"dataField\": \"sparentparametername\",\n      \"width\": \"300px\"\n    }, {\n      \"idsName\": \"IDS_ACTIONPARAMETER\",\n      \"dataField\": \"sisactionparent\",\n      \"width\": \"200px\"\n    }];\n    this.detailedGridFieldList = [{\n      \"idsName\": \"IDS_FIELDNAME\",\n      \"dataField\": \"sfieldname\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_PARENTPARAMETER\",\n      \"dataField\": \"sparentparametername\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_ACTIONPARAMETER\",\n      \"dataField\": \"nisactionparent\",\n      \"width\": \"200px\",\n      \"componentName\": \"switch\",\n      \"switchFieldName\": \"nisactionparent\",\n      \"switchStatus\": transactionStatus.YES,\n      \"needRights\": false //\"controlName\": \"DefaultTestSection\"\n\n    }];\n    this.mappingInputFieldList = [{\n      \"idsName\": \"IDS_PARAMETER\",\n      \"dataField\": \"nchildreportdesigncode\",\n      \"listName\": \"childComponentList\",\n      \"optionId\": \"nreportdesigncode\",\n      \"optionValue\": \"sdisplayname\"\n    }, {\n      \"idsName\": \"IDS_FIELDNAME\",\n      \"dataField\": \"sfieldname\",\n      \"listName\": \"optionalParameterList\",\n      \"optionId\": \"value\",\n      \"optionValue\": \"label\"\n    }, {\n      \"idsName\": \"IDS_PARENTPARAMETER\",\n      \"dataField\": \"nparentreportdesigncode\",\n      \"listName\": \"parentComponentList\",\n      \"optionId\": \"nreportdesigncode\",\n      \"optionValue\": \"sdisplayname\"\n    } // { \"idsName\": \"IDS_ACTIONPARAMETER\", \"dataField\": \"nactionreportdesigncode\",\"listName\":\"actionMappingParentList\",\n    //        \"optionId\":\"nreportdesigncode\",  \"optionValue\":\"sdisplayname\"},\n    ]; // this.actionGridFieldList = [\n    //                    { \"idsName\": \"IDS_ACTIONPARAMETER\", \"dataField\": \"sparentparametername\", \"width\":\"300px\"},\n    //                    { \"idsName\": \"IDS_CHILDPARAMETER\", \"dataField\": \"schildparametername\", \"width\":\"300px\"},\n    //                     ];\n\n    this.subReportGridFieldList = [{\n      \"idsName\": \"IDS_FILE\",\n      \"dataField\": \"sfilename\",\n      \"width\": \"300px\"\n    }, {\n      \"idsName\": \"IDS_FTPFILE\",\n      \"dataField\": \"ssystemfilename\",\n      \"width\": \"400px\"\n    }];\n    this.imageGridFieldList = [{\n      \"idsName\": \"IDS_FILE\",\n      \"dataField\": \"sfilename\",\n      \"width\": \"300px\"\n    }, {\n      \"idsName\": \"IDS_FTPFILE\",\n      \"dataField\": \"ssystemfilename\",\n      \"width\": \"400px\"\n    }];\n    this.transValidationFieldList = [{\n      \"idsName\": \"IDS_TRANSACTIONSTATUS\",\n      \"dataField\": \"stransactionstatus\",\n      \"width\": \"300px\"\n    }];\n    this.reportparametermappingcolumn = [{\n      \"idsName\": \"IDS_REPORTPARAMETER\",\n      \"dataField\": \"scontrolBasedparameter\",\n      \"width\": \"300px\"\n    }, {\n      \"idsName\": \"IDS_FIELDNAME\",\n      \"dataField\": \"stablecolumn\",\n      \"width\": \"300px\"\n    } // ,{ \"idsName\": \"IDS_REPORTTABLECOLUMNNAME\", \"dataField\": \"stablecolumn\", \"width\": \"300px\" }\n    ];\n    this.reportparametermappingcolumndatagrid = [{\n      \"idsName\": \"IDS_REPORTPARAMETER\",\n      \"dataField\": \"scontrolBasedparameter\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_FIELDNAME\",\n      \"dataField\": \"stablecolumn\",\n      \"width\": \"200px\"\n    }]; //  this.formRef = React.createRef();\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\n      toast.warn(props.Login.masterStatus);\n      props.Login.masterStatus = \"\";\n    }\n\n    if (props.Login.error !== state.error) {\n      toast.error(props.Login.error);\n      props.Login.error = \"\";\n    }\n\n    if (props.Login.selectedRecord === undefined) {\n      return {\n        selectedRecord: {}\n      };\n    }\n\n    return null;\n  }\n\n  componentDidMount() {\n    if (this.parentHeight) {\n      const height = this.parentHeight.clientHeight;\n      this.setState({\n        firstPane: height - 80,\n        parentHeight: height - 50\n      });\n    }\n  }\n\n  render() {\n    const addMasterId = this.state.controlMap.has(\"AddReportMaster\") && this.state.controlMap.get(\"AddReportMaster\").ncontrolcode;\n    const editMasterId = this.state.controlMap.has(\"EditReportMaster\") && this.state.controlMap.get(\"EditReportMaster\").ncontrolcode;\n    const deleteMasterId = this.state.controlMap.has(\"DeleteReportMaster\") && this.state.controlMap.get(\"DeleteReportMaster\").ncontrolcode;\n    const filterParam = {\n      inputListName: \"ReportMaster\",\n      selectedObject: \"SelectedReportMaster\",\n      primaryKeyField: \"nreportcode\",\n      fetchUrl: \"reportconfig/getReportDesigner\",\n      fecthInputObject: {\n        userinfo: this.props.Login.userInfo\n      },\n      masterData: this.props.Login.masterData,\n      childRefs: [],\n      searchFieldList: [\"sreportname\", \"sreportdisplayname\", \"sregtypename\", \"sregsubtypename\", \"sreportmodulename\", \"sactivestatus\", \"scontrolids\", \"sdisplayname\"],\n      changeList: [\"ReportDetails\", \"SelectedReportDetail\", \"ReportParameter\", \"ReportDesignConfig\", \"ReportParameterMapping\", \"ReportParameterAction\", \"SubReportDetails\", \"ReportImages\"],\n      isSingleSelect: true\n    };\n    const addMasterParam = {\n      screenName: \"IDS_REPORTMASTER\",\n      operation: \"create\",\n      primaryKeyName: \"nreportcode\",\n      masterData: this.props.Login.masterData,\n      userInfo: this.props.Login.userInfo,\n      ncontrolcode: addMasterId,\n      filterReportType: this.props.Login.masterData.SelectedFilterReportType\n    };\n    const addDetailId = this.state.controlMap.has(\"AddReportDetails\") && this.state.controlMap.get(\"AddReportDetails\").ncontrolcode;\n    const editDetailId = this.state.controlMap.has(\"EditReportDetails\") && this.state.controlMap.get(\"EditReportDetails\").ncontrolcode;\n    const deleteDetailId = this.state.controlMap.has(\"DeleteReportDetails\") && this.state.controlMap.get(\"DeleteReportDetails\").ncontrolcode;\n    const addDetailParam = {\n      screenName: \"IDS_REPORTVERSION\",\n      operation: \"create\",\n      primaryKeyName: \"nreportdetailcode\",\n      masterData: this.props.Login.masterData,\n      userInfo: this.props.Login.userInfo,\n      ncontrolcode: addDetailId\n    };\n    const configReportId = this.state.controlMap.has(\"AddReportDesignParameter\") && this.state.controlMap.get(\"AddReportDesignParameter\").ncontrolcode;\n    const parameterMapId = this.state.controlMap.has(\"AddReportParameterMapping\") && this.state.controlMap.get(\"AddReportParameterMapping\").ncontrolcode;\n    const approveReportId = this.state.controlMap.has(\"ApproveReportVersion\") && this.state.controlMap.get(\"ApproveReportVersion\").ncontrolcode;\n    const confirmMessage = new ConfirmMessage();\n    let mandatoryFields = [];\n\n    if (this.props.Login.screenName === \"IDS_REPORTMASTER\") {\n      if (this.props.Login.operation === \"create\") {\n        mandatoryFields.push({\n          \"idsName\": \"IDS_REPORTTYPE\",\n          \"dataField\": \"nreporttypecode\",\n          \"mandatoryLabel\": \"IDS_SELECT\",\n          \"controlType\": \"selectbox\"\n        });\n\n        if (this.state.selectedRecord[\"nreporttypecode\"] && this.state.selectedRecord[\"nreporttypecode\"].value === reportTypeEnum.COA || this.state.selectedRecord[\"nreporttypecode\"] && this.state.selectedRecord[\"nreporttypecode\"].value === reportTypeEnum.COAPREVIEW || this.state.selectedRecord[\"nreporttypecode\"] && this.state.selectedRecord[\"nreporttypecode\"].value === reportTypeEnum.COAPRELIMINARY) {\n          mandatoryFields.push({\n            \"idsName\": \"IDS_SAMPLETYPE\",\n            \"dataField\": \"nsampletypecode\",\n            \"mandatoryLabel\": \"IDS_SELECT\",\n            \"controlType\": \"selectbox\"\n          });\n          mandatoryFields.push({\n            \"idsName\": \"IDS_REGISTRATIONTYPE\",\n            \"dataField\": \"nregtypecode\",\n            \"mandatoryLabel\": \"IDS_SELECT\",\n            \"controlType\": \"selectbox\"\n          });\n          mandatoryFields.push({\n            \"idsName\": \"IDS_REGISTRATIONSUBTYPE\",\n            \"dataField\": \"nregsubtypecode\",\n            \"mandatoryLabel\": \"IDS_SELECT\",\n            \"controlType\": \"selectbox\"\n          });\n          mandatoryFields.push({\n            \"idsName\": \"IDS_APPROVECONFIGVERSION\",\n            \"dataField\": \"napproveconfversioncode\",\n            \"mandatoryLabel\": \"IDS_SELECT\",\n            \"controlType\": \"selectbox\"\n          });\n          mandatoryFields.push({\n            \"idsName\": \"IDS_REPORTSUBTYPE\",\n            \"dataField\": \"ncoareporttypecode\",\n            \"mandatoryLabel\": \"IDS_SELECT\",\n            \"controlType\": \"selectbox\"\n          });\n          {\n            this.state.selectedRecord[\"isneedsection\"] || this.state.selectedRecord[\"ncoareporttypecode\"] && this.state.selectedRecord[\"ncoareporttypecode\"].item && this.state.selectedRecord[\"ncoareporttypecode\"].item.isneedsection === transactionStatus.YES && mandatoryFields.push({\n              \"idsName\": \"IDS_SECTION\",\n              \"dataField\": \"nsectioncode\",\n              \"mandatoryLabel\": \"IDS_SELECT\",\n              \"controlType\": \"selectbox\"\n            });\n          }\n          {\n            this.state.selectedRecord && this.state.selectedRecord[\"nsampletypecode\"] && this.state.selectedRecord[\"nsampletypecode\"].value !== SampleType.CLINICALTYPE && mandatoryFields.push({\n              \"idsName\": \"IDS_REPORTTEMPLATE\",\n              \"dataField\": \"nreporttemplatecode\",\n              \"mandatoryLabel\": \"IDS_SELECT\",\n              \"controlType\": \"selectbox\"\n            });\n          } // if(this.state.selectedRecord[\"ncoareporttypecode\"] && this.state.selectedRecord[\"ncoareporttypecode\"].value === reportCOAType.PROJECTWISE\n          // && this.props.Login.settings && parseInt(this.props.Login.settings[29]) === transactionStatus.YES){\n          //     mandatoryFields.push({ \"idsName\": \"IDS_REPORTTEMPLATE\", \"dataField\": \"nreporttemplatecode\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" });\n          // }\n        } else if (this.state.selectedRecord[\"nreporttypecode\"] && this.state.selectedRecord[\"nreporttypecode\"].value === reportTypeEnum.MIS) {\n          mandatoryFields.push({\n            \"idsName\": \"IDS_MODULENAME\",\n            \"dataField\": \"nreportmodulecode\",\n            \"mandatoryLabel\": \"IDS_SELECT\",\n            \"controlType\": \"selectbox\"\n          });\n        } else if (this.state.selectedRecord[\"nreporttypecode\"] && (this.state.selectedRecord[\"nreporttypecode\"].value === reportTypeEnum.BATCH || this.state.selectedRecord[\"nreporttypecode\"].value === reportTypeEnum.SAMPLE)) {\n          ;\n          mandatoryFields.push({\n            \"idsName\": \"IDS_COAREPORTTYPE\",\n            \"dataField\": \"ncoareporttypecode\",\n            \"mandatoryLabel\": \"IDS_SELECT\",\n            \"controlType\": \"selectbox\"\n          });\n          mandatoryFields.push({\n            \"idsName\": \"IDS_CERTIFICATETYPE\",\n            \"dataField\": \"ncertificatetypecode\",\n            \"mandatoryLabel\": \"IDS_SELECT\",\n            \"controlType\": \"selectbox\"\n          });\n        } else if (this.state.selectedRecord[\"nreporttypecode\"] && this.state.selectedRecord[\"nreporttypecode\"].value === reportTypeEnum.SCREENWISE) {\n          mandatoryFields.push({\n            \"idsName\": \"IDS_SCREENNAME\",\n            \"dataField\": \"nformcode\",\n            \"mandatoryLabel\": \"IDS_SELECT\",\n            \"controlType\": \"selectbox\"\n          });\n          mandatoryFields.push({\n            \"idsName\": \"IDS_CONTROLNAME\",\n            \"dataField\": \"ncontrolcode\",\n            \"mandatoryLabel\": \"IDS_SELECT\",\n            \"controlType\": \"selectbox\"\n          });\n        }\n      }\n\n      mandatoryFields.push({\n        \"idsName\": \"IDS_REPORTNAME\",\n        \"dataField\": \"sreportname\",\n        \"mandatoryLabel\": \"IDS_ENTER\",\n        \"controlType\": \"textbox\"\n      });\n      this.props.Login.operation === \"create\" && mandatoryFields.push({\n        \"idsName\": \"IDS_FILE\",\n        \"dataField\": \"sfilename\",\n        \"mandatoryLabel\": \"IDS_CHOOSE\",\n        \"controlType\": \"file\"\n      });\n    } else if (this.props.Login.screenName === \"IDS_REPORTVERSION\") {\n      if (this.state.selectedRecord[\"nreporttypecode\"] && this.state.selectedRecord[\"nreporttypecode\"].value === reportTypeEnum.SAMPLE) {\n        mandatoryFields.push({\n          \"idsName\": \"IDS_COAREPORTTYPE\",\n          \"dataField\": \"ncoareporttypecode\",\n          \"mandatoryLabel\": \"IDS_SELECT\",\n          \"controlType\": \"selectbox\"\n        }, // { \"idsName\": \"IDS_LAB\", \"dataField\": \"nsectioncode\" },\n        {\n          \"idsName\": \"IDS_DECISIONTYPE\",\n          \"dataField\": \"nreportdecisiontypecode\",\n          \"mandatoryLabel\": \"IDS_SELECT\",\n          \"controlType\": \"selectbox\"\n        }, {\n          \"idsName\": \"IDS_FILE\",\n          \"dataField\": \"sfilename\",\n          \"mandatoryLabel\": \"IDS_CHOOSE\",\n          \"controlType\": \"file\"\n        });\n      } else if (this.state.selectedRecord[\"nreporttypecode\"] && this.state.selectedRecord[\"nreporttypecode\"].value === reportTypeEnum.BATCH) {\n        mandatoryFields.push({\n          \"idsName\": \"IDS_COAREPORTTYPE\",\n          \"dataField\": \"ncoareporttypecode\",\n          \"mandatoryLabel\": \"IDS_SELECT\",\n          \"controlType\": \"selectbox\"\n        }, {\n          \"idsName\": \"IDS_FILE\",\n          \"dataField\": \"sfilename\",\n          \"mandatoryLabel\": \"IDS_CHOOSE\",\n          \"controlType\": \"file\"\n        });\n      } else {\n        mandatoryFields.push({\n          \"idsName\": \"IDS_FILE\",\n          \"dataField\": \"sfilename\",\n          \"mandatoryLabel\": \"IDS_CHOOSE\",\n          \"controlType\": \"file\"\n        });\n      }\n    } else {\n      if (this.props.Login.screenName === \"IDS_SUBREPORTS\" || this.props.Login.screenName === \"IDS_IMAGES\") {\n        mandatoryFields.push({\n          \"idsName\": \"IDS_FILE\",\n          \"dataField\": \"sfilename\",\n          \"mandatoryLabel\": \"IDS_CHOOSE\",\n          \"controlType\": \"file\"\n        });\n      }\n    }\n\n    const breadCrumbData = this.state.filterData || []; ///console.log(\"masterdata:\", this.props.Login.masterData);\n\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(ListWrapper, {\n      className: \"client-listing-wrap mtop-4 screen-height-window\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 351,\n        columnNumber: 17\n      }\n    }, breadCrumbData.length > 0 ? /*#__PURE__*/React.createElement(BreadcrumbComponent, {\n      breadCrumbItem: breadCrumbData,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 353,\n        columnNumber: 25\n      }\n    }) : \"\", /*#__PURE__*/React.createElement(Row, {\n      noGutters: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 355,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      className: \"parent-port-height\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 356,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(SplitterLayout, {\n      borderColor: \"#999\",\n      percentage: true,\n      primaryIndex: 1,\n      onSecondaryPaneSizeChange: this.paneSizeChange,\n      secondaryInitialSize: 25,\n      primaryMinSize: 40,\n      secondaryMinSize: 20,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 359,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(TransactionListMaster, {\n      paneHeight: this.state.parentHeight,\n      needMultiSelect: false,\n      masterList: this.props.Login.masterData.searchedData || this.props.Login.masterData.ReportMaster || [],\n      selectedMaster: [this.props.Login.masterData.SelectedReportMaster],\n      primaryKeyField: \"nreportcode\",\n      getMasterDetail: this.props.getSelectedReportMasterDetail,\n      inputParam: {\n        userInfo: this.props.Login.userInfo,\n        masterData: this.props.Login.masterData\n      },\n      mainField: \"sreportname\",\n      selectedListName: \"SelectedReportMaster\",\n      objectName: \"ReportMaster\",\n      listName: \"IDS_REPORT\",\n      filterColumnData: this.props.filterTransactionList,\n      searchListName: \"searchedData\",\n      searchRef: this.searchRef,\n      filterParam: filterParam,\n      showFilter: this.props.Login.showFilter,\n      openFilter: this.openFilter,\n      closeFilter: this.closeFilter,\n      onFilterSubmit: this.onFilterSubmit,\n      subFields: [{\n        [designProperties.VALUE]: \"sreportdisplayname\"\n      }, {\n        [designProperties.VALUE]: \"sactivestatus\",\n        [designProperties.COLOUR]: \"Color\"\n      }],\n      needFilter: true //skip={this.state.masterSkip}\n      //take={this.state.masterTake}\n      ,\n      hidePaging: false,\n      handlePageChange: this.handlePageChange,\n      skip: this.state.skip,\n      take: this.state.take,\n      actionIcons: [{\n        title: this.props.intl.formatMessage({\n          id: \"IDS_EDIT\"\n        }),\n        controlname: \"faPencilAlt\",\n        objectName: \"mastertoedit\",\n        hidden: this.state.userRoleControlRights.indexOf(editMasterId) === -1,\n        onClick: this.props.getReportMasterComboService,\n        inputData: {\n          primaryKeyName: \"nreportcode\",\n          operation: \"update\",\n          masterData: this.props.Login.masterData,\n          userInfo: this.props.Login.userInfo,\n          screenName: \"IDS_REPORTMASTER\",\n          ncontrolcode: editMasterId,\n          filterReportType: this.props.Login.masterData.SelectedFilterReportType\n        }\n      }, {\n        title: this.props.intl.formatMessage({\n          id: \"IDS_DELETE\"\n        }),\n        controlname: \"faTrashAlt\",\n        objectName: \"mastertodelete\",\n        hidden: this.state.userRoleControlRights.indexOf(deleteMasterId) === -1,\n        onClick: props => confirmMessage.confirm(\"deleteMessage\", this.props.intl.formatMessage({\n          id: \"IDS_DELETE\"\n        }), this.props.intl.formatMessage({\n          id: \"IDS_DEFAULTCONFIRMMSG\"\n        }), this.props.intl.formatMessage({\n          id: \"IDS_OK\"\n        }), this.props.intl.formatMessage({\n          id: \"IDS_CANCEL\"\n        }), () => this.deleteReport(props)),\n        inputData: {\n          primaryKeyName: \"nreportcode\",\n          operation: \"delete\",\n          masterData: this.props.Login.masterData,\n          userInfo: this.props.Login.userInfo,\n          screenName: \"IDS_REPORTMASTER\",\n          listName: \"reportmaster\",\n          ncontrolCode: deleteMasterId,\n          methodUrl: \"ReportMaster\"\n        }\n      }],\n      commonActions: /*#__PURE__*/React.createElement(ProductList, {\n        className: \"d-flex product-category float-right\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 443,\n          columnNumber: 41\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        className: \"btn btn-icon-rounded btn-circle solid-blue\",\n        role: \"button\",\n        \"data-tip\": this.props.intl.formatMessage({\n          id: \"IDS_ADD\"\n        }) // data-for=\"tooltip-common-wrap\"\n        ,\n        hidden: this.state.userRoleControlRights.indexOf(addMasterId) === -1,\n        onClick: () => this.props.getReportMasterComboService(addMasterParam),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 444,\n          columnNumber: 45\n        }\n      }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n        icon: faPlus,\n        title: this.props.intl.formatMessage({\n          id: \"IDS_ADD\"\n        }),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 449,\n          columnNumber: 49\n        }\n      })), /*#__PURE__*/React.createElement(Button, {\n        className: \"btn btn-circle outline-grey ml-2 p-0\",\n        variant: \"link\",\n        onClick: () => this.reloadData() // data-for=\"tooltip-common-wrap\"\n        ,\n        \"data-tip\": this.props.intl.formatMessage({\n          id: \"IDS_REFRESH\"\n        }),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 451,\n          columnNumber: 45\n        }\n      }, /*#__PURE__*/React.createElement(RefreshIcon, {\n        className: \"custom_icons\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 455,\n          columnNumber: 49\n        }\n      }))),\n      filterComponent: [{\n        \"IDS_FILTER\": /*#__PURE__*/React.createElement(ReportConfigFilter, {\n          selectedRecord: this.state.selectedRecord || {},\n          reportTypeList: this.state.reportTypeList || [],\n          onComboChange: this.onComboChange,\n          filterReportType: this.props.Login.masterData.SelectedFilterReportType,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 462,\n            columnNumber: 49\n          }\n        })\n      }],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 361,\n        columnNumber: 33\n      }\n    }), /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(SplitterLayout, {\n      vertical: true,\n      borderColor: \"#999\",\n      percentage: true,\n      primaryIndex: 1 //secondaryInitialSize={400}\n      ,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 473,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"card_group\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 476,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 477,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 479,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"report-designer-right\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 480,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(PerfectScrollbar, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 481,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(ContentPanel, {\n      className: `panel-main-content`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 483,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      className: \"border-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 484,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(Card.Body, {\n      className: \"p-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 485,\n        columnNumber: 61\n      }\n    }, this.props.Login.masterData.SelectedReportMaster && /*#__PURE__*/React.createElement(Row, {\n      noGutters: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 487,\n        columnNumber: 69\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 488,\n        columnNumber: 73\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 489,\n        columnNumber: 77\n      }\n    }, /*#__PURE__*/React.createElement(Card.Header, {\n      style: {\n        borderBottom: \"0px\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 490,\n        columnNumber: 81\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      style: {\n        display: \"inline-block\",\n        marginTop: \"1%\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 491,\n        columnNumber: 85\n      }\n    }, /*#__PURE__*/React.createElement(\"h4\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 492,\n        columnNumber: 89\n      }\n    }, this.props.intl.formatMessage({\n      id: \"IDS_REPORTDETAILS\"\n    })))), /*#__PURE__*/React.createElement(Card.Body, {\n      className: \"form-static-wrap p-2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 495,\n        columnNumber: 81\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 496,\n        columnNumber: 85\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 497,\n        columnNumber: 89\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"d-flex product-category\",\n      style: {\n        float: \"right\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 498,\n        columnNumber: 93\n      }\n    }, this.props.Login.masterData.ReportParameter && this.props.Login.masterData.ReportParameter.length > 0 && (this.props.Login.masterData.SelectedFilterReportType.nreporttypecode === reportTypeEnum.ALL || this.props.Login.masterData.SelectedFilterReportType.nreporttypecode === reportTypeEnum.MIS) ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(ContentPanel, {\n      className: \"d-flex justify-content-end dropdown badget_menu icon-group-wrap\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 503,\n        columnNumber: 101\n      }\n    }, /*#__PURE__*/React.createElement(Nav.Link, {\n      name: \"configreportlink\",\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_REPORTDESIGN\"\n      }),\n      hidden: this.state.userRoleControlRights.indexOf(configReportId) === -1,\n      className: \"btn btn-circle outline-grey mr-2 \",\n      onClick: () => this.props.getConfigReportComboService({\n        reportMaster: this.props.Login.masterData.SelectedReportMaster,\n        reportDetail: this.props.Login.masterData.SelectedReportDetail,\n        operation: \"config\",\n        ncontrolCode: configReportId,\n        screenName: \"IDS_REPORTDESIGN\",\n        userInfo: this.props.Login.userInfo\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 504,\n        columnNumber: 105\n      }\n    }, /*#__PURE__*/React.createElement(ParameterConfigurationIcon, {\n      className: \"custom_icons\",\n      width: \"20\",\n      height: \"20\",\n      name: \"configreporticon\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 517,\n        columnNumber: 109\n      }\n    })), /*#__PURE__*/React.createElement(Nav.Link, {\n      name: \"parametermappinglink\",\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_PARAMETERMAPPING\"\n      }),\n      hidden: this.state.userRoleControlRights.indexOf(parameterMapId) === -1,\n      className: \"btn btn-circle outline-grey mr-2 \",\n      onClick: () => this.props.getParameterMappingComboService({\n        reportMaster: this.props.Login.masterData.SelectedReportMaster,\n        reportDetail: this.props.Login.masterData.SelectedReportDetail,\n        operation: \"create\",\n        ncontrolCode: parameterMapId,\n        userInfo: this.props.Login.userInfo,\n        screenName: \"IDS_PARAMETERMAPPING\"\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 521,\n        columnNumber: 105\n      }\n    }, /*#__PURE__*/React.createElement(ParameterMappingIcon, {\n      className: \"custom_icons\",\n      width: \"20\",\n      height: \"20\",\n      name: \"mappingreporticon\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 535,\n        columnNumber: 109\n      }\n    })))) : \"\", /*#__PURE__*/React.createElement(Nav.Link, {\n      name: \"approvereportlink\",\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_APPROVEREPORT\"\n      }),\n      hidden: this.state.userRoleControlRights.indexOf(approveReportId) === -1,\n      className: \"btn btn-circle outline-grey mr-2 action-icons-wrap\",\n      onClick: () => this.approveReport(approveReportId),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 544,\n        columnNumber: 97\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faThumbsUp,\n      name: \"approvereporticon\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 549,\n        columnNumber: 101\n      }\n    }))))), /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 555,\n        columnNumber: 1\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 3,\n      className: \"report-designer-version\",\n      style: {\n        paddingRight: '0'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 556,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(PerfectScrollbar, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 559,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 560,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(TransactionListMaster, {\n      masterList: this.props.Login.masterData.ReportDetails || [],\n      needMultiSelect: false,\n      selectedMaster: [this.props.Login.masterData.SelectedReportDetail],\n      primaryKeyField: \"nreportdetailcode\",\n      getMasterDetail: this.props.getSelectedReportDetail,\n      inputParam: {\n        userInfo: this.props.Login.userInfo,\n        masterData: this.props.Login.masterData\n      },\n      mainField: \"sversionno\",\n      mainFieldLabel: this.props.intl.formatMessage({\n        id: \"IDS_VERSION\"\n      }),\n      selectedListName: \"SelectedReportDetail\",\n      objectName: \"ReportMaster\",\n      listName: \"IDS_REPORTDETAILS\",\n      hideSearch: true,\n      subFields: [{\n        [designProperties.VALUE]: \"sdisplaystatus\",\n        [designProperties.COLOUR]: \"Color\"\n      }],\n      needValidation: false,\n      needFilter: false,\n      moreField: [],\n      skip: this.state.detailSkip,\n      take: this.state.detailTake,\n      hidePaging: true,\n      handlePageChange: this.handleDetailPageChange,\n      splitModeClass: this.state.splitChangeWidthPercentage && this.state.splitChangeWidthPercentage > 50 ? 'split-mode' : this.state.splitChangeWidthPercentage > 40 ? 'split-md' : '',\n      actionIcons: [{\n        title: this.props.intl.formatMessage({\n          id: \"IDS_EDIT\"\n        }),\n        controlname: \"faPencilAlt\",\n        objectName: \"detailtoedit\",\n        hidden: this.state.userRoleControlRights.indexOf(editDetailId) === -1,\n        inputData: {\n          primaryKeyName: \"nreportdetailcode\",\n          operation: \"update\",\n          masterData: this.props.Login.masterData,\n          userInfo: this.props.Login.userInfo,\n          screenName: \"IDS_REPORTVERSION\",\n          ncontrolcode: editDetailId\n        },\n        onClick: props => confirmMessage.confirm(\"editDetailMessage\", this.props.intl.formatMessage({\n          id: \"IDS_EDIT\"\n        }), this.props.intl.formatMessage({\n          id: \"IDS_EDITDETAILCONFIRMMSG\"\n        }), this.props.intl.formatMessage({\n          id: \"IDS_OK\"\n        }), this.props.intl.formatMessage({\n          id: \"IDS_CANCEL\"\n        }), () => this.props.getReportDetailComboService(props))\n      }, {\n        title: this.props.intl.formatMessage({\n          id: \"IDS_DELETE\"\n        }),\n        controlname: \"faTrashAlt\",\n        objectName: \"mastertodelete\",\n        hidden: this.state.userRoleControlRights.indexOf(deleteDetailId) === -1,\n        onClick: props => confirmMessage.confirm(\"deleteMessage\", this.props.intl.formatMessage({\n          id: \"IDS_DELETE\"\n        }), this.props.intl.formatMessage({\n          id: \"IDS_DEFAULTCONFIRMMSG\"\n        }), this.props.intl.formatMessage({\n          id: \"IDS_OK\"\n        }), this.props.intl.formatMessage({\n          id: \"IDS_CANCEL\"\n        }), () => this.deleteReport(props)),\n        inputData: {\n          primaryKeyName: \"nreportdetailcode\",\n          operation: \"delete\",\n          masterData: this.props.Login.masterData,\n          userInfo: this.props.Login.userInfo,\n          screenName: \"IDS_REPORTVERSION\",\n          listName: \"reportdetails\",\n          ncontrolCode: deleteDetailId,\n          methodUrl: \"ReportDetails\"\n        }\n      }],\n      commonActions: /*#__PURE__*/React.createElement(ProductList, {\n        className: \"d-flex product-category float-right\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 638,\n          columnNumber: 61\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        className: \"btn btn-icon-rounded btn-circle solid-blue\",\n        role: \"button\",\n        \"data-tip\": this.props.intl.formatMessage({\n          id: \"IDS_ADD\"\n        }),\n        hidden: this.state.userRoleControlRights.indexOf(addDetailId) === -1,\n        onClick: () => this.props.getReportDetailComboService(addDetailParam),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 639,\n          columnNumber: 65\n        }\n      }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n        icon: faPlus,\n        title: this.props.intl.formatMessage({\n          id: \"IDS_ADD\"\n        }),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 643,\n          columnNumber: 69\n        }\n      }))),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 561,\n        columnNumber: 41\n      }\n    })))), /*#__PURE__*/React.createElement(Col, {\n      md: 9,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 655,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 656,\n        columnNumber: 85\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 4,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 657,\n        columnNumber: 89\n      }\n    }, /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 658,\n        columnNumber: 93\n      }\n    }, /*#__PURE__*/React.createElement(FormLabel, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 659,\n        columnNumber: 97\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_REPORTNAME\",\n      message: \"Report Name\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 659,\n        columnNumber: 108\n      }\n    })), /*#__PURE__*/React.createElement(ReadOnlyText, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 660,\n        columnNumber: 97\n      }\n    }, this.props.Login.masterData.SelectedReportMaster.sreportname))), /*#__PURE__*/React.createElement(Col, {\n      md: 4,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 663,\n        columnNumber: 89\n      }\n    }, /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 664,\n        columnNumber: 93\n      }\n    }, /*#__PURE__*/React.createElement(FormLabel, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 665,\n        columnNumber: 97\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_REPORTTYPE\",\n      message: \"Report Type\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 665,\n        columnNumber: 108\n      }\n    })), /*#__PURE__*/React.createElement(ReadOnlyText, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 666,\n        columnNumber: 97\n      }\n    }, this.props.Login.masterData.SelectedReportMaster.sreportdisplayname))), //this.props.Login.masterData.SelectedReportMaster.nreporttypecode === reportTypeEnum.SAMPLE\n    //   || this.props.Login.masterData.SelectedReportMaster.nreporttypecode === reportTypeEnum.COA ?\n    this.props.Login.masterData.SelectedReportMaster.isneedregtype === transactionStatus.YES ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Col, {\n      md: 4,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 673,\n        columnNumber: 101\n      }\n    }, /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 674,\n        columnNumber: 105\n      }\n    }, /*#__PURE__*/React.createElement(FormLabel, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 675,\n        columnNumber: 109\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_SAMPLETYPE\",\n      message: \"Sample Type\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 675,\n        columnNumber: 120\n      }\n    })), /*#__PURE__*/React.createElement(ReadOnlyText, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 676,\n        columnNumber: 109\n      }\n    }, this.props.Login.masterData.SelectedReportMaster.ssampletypename))), /*#__PURE__*/React.createElement(Col, {\n      md: 4,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 679,\n        columnNumber: 101\n      }\n    }, /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 680,\n        columnNumber: 105\n      }\n    }, /*#__PURE__*/React.createElement(FormLabel, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 681,\n        columnNumber: 109\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_REGTYPE\",\n      message: \"Registration Type\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 681,\n        columnNumber: 120\n      }\n    })), /*#__PURE__*/React.createElement(ReadOnlyText, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 682,\n        columnNumber: 109\n      }\n    }, this.props.Login.masterData.SelectedReportMaster.sregtypename))), /*#__PURE__*/React.createElement(Col, {\n      md: 4,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 685,\n        columnNumber: 101\n      }\n    }, /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 686,\n        columnNumber: 105\n      }\n    }, /*#__PURE__*/React.createElement(FormLabel, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 687,\n        columnNumber: 109\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_REGSUBTYPE\",\n      message: \"Registration Sub Type\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 687,\n        columnNumber: 120\n      }\n    })), /*#__PURE__*/React.createElement(ReadOnlyText, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 688,\n        columnNumber: 109\n      }\n    }, this.props.Login.masterData.SelectedReportMaster.nregsubtypecode === -1 ? '-' : this.props.Login.masterData.SelectedReportMaster.sregsubtypename))), /*#__PURE__*/React.createElement(Col, {\n      md: 4,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 694,\n        columnNumber: 101\n      }\n    }, /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 695,\n        columnNumber: 105\n      }\n    }, /*#__PURE__*/React.createElement(FormLabel, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 696,\n        columnNumber: 109\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_APPROVECONFIGVERSION\",\n      message: \"Approve COnfig Version\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 696,\n        columnNumber: 120\n      }\n    })), /*#__PURE__*/React.createElement(ReadOnlyText, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 697,\n        columnNumber: 109\n      }\n    }, this.props.Login.masterData.SelectedReportMaster.nregsubtypecode === -1 ? '-' : this.props.Login.masterData.SelectedReportMaster.sapproveversionname && this.props.Login.masterData.SelectedReportMaster.sapproveversionname)))) : \"\", this.props.Login.masterData.SelectedReportMaster.isneedsection === transactionStatus.YES && /*#__PURE__*/React.createElement(Col, {\n      md: 4,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 719,\n        columnNumber: 93\n      }\n    }, /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 720,\n        columnNumber: 97\n      }\n    }, /*#__PURE__*/React.createElement(FormLabel, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 721,\n        columnNumber: 101\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_SECTION\",\n      message: \"Section\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 721,\n        columnNumber: 112\n      }\n    })), /*#__PURE__*/React.createElement(ReadOnlyText, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 722,\n        columnNumber: 101\n      }\n    }, this.props.Login.masterData.SelectedReportMaster.nsectioncode !== -1 ? this.props.Login.masterData.SelectedReportMaster.ssectionname : '-'))), this.props.Login.masterData.SelectedReportMaster.nreporttypecode !== reportTypeEnum.MIS && this.props.Login.masterData.SelectedReportMaster.nreporttypecode !== reportTypeEnum.SCREENWISE ? /*#__PURE__*/React.createElement(Col, {\n      md: 4,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 728,\n        columnNumber: 93\n      }\n    }, /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 729,\n        columnNumber: 97\n      }\n    }, /*#__PURE__*/React.createElement(FormLabel, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 730,\n        columnNumber: 101\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_REPORTSUBTYPE\",\n      message: \"Report Sub Type\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 730,\n        columnNumber: 112\n      }\n    })), /*#__PURE__*/React.createElement(ReadOnlyText, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 731,\n        columnNumber: 101\n      }\n    }, this.props.Login.masterData.SelectedReportMaster.scoareporttypename))) : \"\", /*#__PURE__*/React.createElement(Col, {\n      md: 4,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 738,\n        columnNumber: 93\n      }\n    }, /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 739,\n        columnNumber: 97\n      }\n    }, /*#__PURE__*/React.createElement(FormLabel, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 740,\n        columnNumber: 101\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_REPORTTEMPLATE\",\n      message: \"Report Template\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 740,\n        columnNumber: 112\n      }\n    })), /*#__PURE__*/React.createElement(ReadOnlyText, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 741,\n        columnNumber: 101\n      }\n    }, this.props.Login.masterData.SelectedReportMaster.sreporttemplatename))), this.props.Login.masterData.SelectedReportMaster.nreporttypecode === reportTypeEnum.MIS ? /*#__PURE__*/React.createElement(Col, {\n      md: 4,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 755,\n        columnNumber: 93\n      }\n    }, /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 756,\n        columnNumber: 97\n      }\n    }, /*#__PURE__*/React.createElement(FormLabel, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 757,\n        columnNumber: 101\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_MODULENAME\",\n      message: \"Module Name\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 757,\n        columnNumber: 112\n      }\n    })), /*#__PURE__*/React.createElement(ReadOnlyText, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 758,\n        columnNumber: 101\n      }\n    }, this.props.Login.masterData.SelectedReportMaster.sreportmodulename))) : \"\", this.props.Login.masterData.SelectedReportMaster.nreporttypecode === reportTypeEnum.BATCH || this.props.Login.masterData.SelectedReportMaster.nreporttypecode === reportTypeEnum.SAMPLE ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Col, {\n      md: 4,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 764,\n        columnNumber: 95\n      }\n    }, /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 765,\n        columnNumber: 97\n      }\n    }, /*#__PURE__*/React.createElement(FormLabel, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 766,\n        columnNumber: 101\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_CERTIFICATETYPE\",\n      message: \"Certificate Type\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 766,\n        columnNumber: 112\n      }\n    })), /*#__PURE__*/React.createElement(ReadOnlyText, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 767,\n        columnNumber: 101\n      }\n    }, this.props.Login.masterData.SelectedReportMaster.scertificatetype))), /*#__PURE__*/React.createElement(Col, {\n      md: 4,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 770,\n        columnNumber: 97\n      }\n    }, /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 771,\n        columnNumber: 101\n      }\n    }, /*#__PURE__*/React.createElement(FormLabel, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 772,\n        columnNumber: 105\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_REPORTBATCHTYPE\",\n      message: \"Report Batch Type\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 772,\n        columnNumber: 116\n      }\n    })), /*#__PURE__*/React.createElement(ReadOnlyText, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 773,\n        columnNumber: 105\n      }\n    }, this.props.Login.masterData.SelectedReportMaster.sbatchdisplayname))), \" \") : \"\", this.props.Login.masterData.SelectedReportMaster.nreporttypecode === reportTypeEnum.SCREENWISE ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Col, {\n      md: 4,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 779,\n        columnNumber: 95\n      }\n    }, /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 780,\n        columnNumber: 97\n      }\n    }, /*#__PURE__*/React.createElement(FormLabel, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 781,\n        columnNumber: 101\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_SCREENNAME\",\n      message: \"Screen Name\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 781,\n        columnNumber: 112\n      }\n    })), /*#__PURE__*/React.createElement(ReadOnlyText, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 782,\n        columnNumber: 101\n      }\n    }, this.props.Login.masterData.SelectedReportMaster.sdisplayname))), /*#__PURE__*/React.createElement(Col, {\n      md: 4,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 785,\n        columnNumber: 97\n      }\n    }, /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 786,\n        columnNumber: 101\n      }\n    }, /*#__PURE__*/React.createElement(FormLabel, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 787,\n        columnNumber: 105\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_CONTROLNAME\",\n      message: \"Control Name\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 787,\n        columnNumber: 116\n      }\n    })), /*#__PURE__*/React.createElement(ReadOnlyText, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 788,\n        columnNumber: 105\n      }\n    }, this.props.Login.masterData.SelectedReportMaster.scontrolids))), \" \") : \"\"), this.props.Login.masterData.SelectedReportDetail && /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 802,\n        columnNumber: 89\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 4,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 864,\n        columnNumber: 93\n      }\n    }, /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 865,\n        columnNumber: 97\n      }\n    }, /*#__PURE__*/React.createElement(FormLabel, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 866,\n        columnNumber: 101\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_ISPLSQLQUERY\",\n      message: \"Is PLSQL\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 866,\n        columnNumber: 112\n      }\n    })), /*#__PURE__*/React.createElement(ReadOnlyText, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 867,\n        columnNumber: 101\n      }\n    }, this.props.Login.masterData.SelectedReportDetail.splsqlquery))), /*#__PURE__*/React.createElement(Col, {\n      md: 8,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 870,\n        columnNumber: 93\n      }\n    }, /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 871,\n        columnNumber: 97\n      }\n    }, /*#__PURE__*/React.createElement(FormLabel, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 872,\n        columnNumber: 101\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_FILE\",\n      message: \"File\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 872,\n        columnNumber: 112\n      }\n    })), /*#__PURE__*/React.createElement(ReadOnlyText, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 873,\n        columnNumber: 101\n      }\n    }, this.props.Login.masterData.SelectedReportDetail.sfilename)))), /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 884,\n        columnNumber: 85\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 885,\n        columnNumber: 89\n      }\n    }, /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 886,\n        columnNumber: 93\n      }\n    }, /*#__PURE__*/React.createElement(FormLabel, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 887,\n        columnNumber: 97\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_DESCRIPTION\",\n      message: \"Description\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 887,\n        columnNumber: 108\n      }\n    })), /*#__PURE__*/React.createElement(ReadOnlyText, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 888,\n        columnNumber: 97\n      }\n    }, this.props.Login.masterData.SelectedReportMaster.sdescription))))))))))))), /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 904,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 905,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(ListWrapper, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 907,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(ContentPanel, {\n      className: \"panel-main-content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 908,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      className: \"border-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 909,\n        columnNumber: 61\n      }\n    }, /*#__PURE__*/React.createElement(Card.Body, {\n      className: \"p-1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 910,\n        columnNumber: 65\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      noGutters: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 911,\n        columnNumber: 69\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 912,\n        columnNumber: 73\n      }\n    }, this.props.Login.masterData[\"ReportMaster\"] && /*#__PURE__*/React.createElement(CustomTabs, {\n      tabDetail: this.tabDetail(),\n      onTabChange: this.onTabChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 914,\n        columnNumber: 81\n      }\n    })))))))))))))))))))), this.props.Login.openModal ? /*#__PURE__*/React.createElement(SlideOutModal, {\n      show: this.props.Login.openModal,\n      closeModal: this.closeModal //size={'xl'}\n      ,\n      operation: this.props.Login.operation,\n      inputParam: this.props.Login.inputParam,\n      screenName: this.props.Login.screenName,\n      onSaveClick: this.onSaveClick,\n      esign: this.props.Login.loadEsign,\n      validateEsign: this.validateEsign,\n      masterStatus: this.props.Login.masterStatus,\n      updateStore: this.props.updateStore,\n      ignoreFormValidation: this.props.Login.screenName === \"IDS_REPORTDESIGN\" || this.props.Login.screenName === \"IDS_SUBREPORTS\" || this.props.Login.screenName === \"IDS_IMAGES\",\n      selectedRecord: this.state.selectedRecord || {},\n      mandatoryFields: mandatoryFields,\n      addComponent: this.props.Login.loadEsign ? /*#__PURE__*/React.createElement(Esign, {\n        operation: this.props.Login.operation //formatMessage={this.props.intl.formatMessage}\n        ,\n        onInputOnChange: this.onInputOnChange,\n        inputParam: this.props.Login.inputParam,\n        selectedRecord: this.state.selectedRecord || {},\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 961,\n          columnNumber: 29\n        }\n      }) : this.props.Login.screenName === \"IDS_REPORTMASTER\" ? /*#__PURE__*/React.createElement(AddReportMaster, {\n        selectedRecord: this.state.selectedRecord || {},\n        onInputOnChange: this.onInputOnChange,\n        onComboChange: this.onComboChange,\n        reportTypeList: this.props.Login.reportTypeList || [],\n        coaReportTypeList: this.props.Login.reportSubTypeList || [],\n        certificateTypeList: this.props.Login.certificateTypeList || [],\n        sampleTypeList: this.props.Login.sampleTypeList || [],\n        regTypeList: this.props.Login.regTypeList || [],\n        regSubTypeList: this.props.Login.regSubTypeList || [] //regType={this.props.Login.regType || []}\n        ,\n        controlButton: this.props.Login.controlButton || [],\n        sectionList: this.props.Login.sectionList || [],\n        ApproveConfigList: this.props.Login.ApproveConfigList || [],\n        decisionTypeList: this.props.Login.reportDecisionTypeList || [],\n        controlScreen: this.props.Login.controlScreen || [],\n        reportModuleList: this.props.Login.reportModuleList || [],\n        operation: this.props.Login.operation,\n        inputParam: this.props.Login.inputParam,\n        onDropImage: this.onDropImage,\n        deleteFile: this.deleteFile,\n        actionType: this.state.actionType,\n        reportVersionStatus: this.props.Login.reportVersionStatus || transactionStatus.DRAFT,\n        filterReportType: this.props.Login.masterData.SelectedFilterReportType || {},\n        reportTemplateList: this.props.Login.reportTemplateList || [],\n        settings: this.props.Login.settings,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 968,\n          columnNumber: 33\n        }\n      }) : this.props.Login.screenName === \"IDS_REPORTVERSION\" ? /*#__PURE__*/React.createElement(AddReportDetail, {\n        selectedRecord: this.state.selectedRecord || {},\n        onInputOnChange: this.onInputOnChange,\n        onComboChange: this.onComboChange //coaReportTypeList={this.props.Login.reportSubTypeList || []}\n        // certificateTypeList={this.props.Login.certificateTypeList || []}\n        // sectionList={this.props.Login.sectionList || []}\n        // decisionTypeList={this.props.Login.reportDecisionTypeList || []}\n        ,\n        reportMaster: this.props.Login.masterData.SelectedReportMaster || {},\n        operation: this.props.Login.operation,\n        inputParam: this.props.Login.inputParam,\n        onDropImage: this.onDropImage,\n        deleteFile: this.deleteFile,\n        actionType: this.state.actionType,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 996,\n          columnNumber: 37\n        }\n      }) : this.props.Login.screenName === \"IDS_REPORTDESIGN\" ? /*#__PURE__*/React.createElement(AddDesign, {\n        operation: this.props.Login.operation,\n        selectedReportMaster: this.props.Login.masterData.SelectedReportMaster || {},\n        reportParameterList: this.props.Login.reportParameterList || [],\n        designComponentList: this.props.Login.designComponentList || [],\n        sqlQueryList: this.props.Login.sqlQueryList || [],\n        onInputOnChange: this.onInputOnChange,\n        handleChange: this.onComboChange,\n        selectedRecord: this.state.selectedRecord || {} //handleChange={this.handleChangeDesign}\n        ,\n        gridPrimaryKey: \"nreportdesigncode\",\n        designName: this.props.Login.masterData.SelectedReportMaster.sreportname || \"\",\n        addDesignParam: this.state.addDesignParam || this.props.Login.masterData.ReportDesignConfig,\n        gridData: this.state.gridData || this.props.Login.masterData.ReportDesignConfig,\n        addParametersInDataGrid: this.addParametersInDataGrid,\n        deleteRecordWORights: this.removeParametersInDataGrid,\n        inputColumnList: this.designInputFieldList,\n        gridColumnList: this.designGridColumnList,\n        controlMap: this.state.controlMap,\n        userRoleControlRights: this.state.userRoleControlRights,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1012,\n          columnNumber: 41\n        }\n      }) : this.props.Login.screenName === \"IDS_PARAMETERMAPPING\" ? /*#__PURE__*/React.createElement(ParameterMapping, {\n        operation: this.props.Login.operation,\n        parentComponentList: this.props.Login.parentComponentList || [],\n        childComponentList: this.props.Login.childComponentList || [],\n        optionalParameterList: this.state.optionalParameterList || [],\n        onInputOnChange: this.onInputOnChange,\n        handleChange: this.onComboChange,\n        selectedRecord: this.state.selectedRecord || {},\n        addMappingParam: this.state.addMappingParam || this.props.Login.masterData.ReportParameterMapping,\n        mappingGridData: this.state.mappingGridData || this.props.Login.masterData.ReportParameterMapping,\n        addParametersInDataGrid: this.bindMappingParametersToDataGrid,\n        deleteRecordWORights: this.unbindMappingParametersFromDataGrid,\n        inputColumnList: this.mappingInputFieldList,\n        mappingGridColumnList: this.mappingGridFieldList,\n        controlMap: this.state.controlMap,\n        userRoleControlRights: this.state.userRoleControlRights,\n        detailedFieldList: this.detailedGridFieldList,\n        bindActionParameter: this.bindActionParameter,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1034,\n          columnNumber: 45\n        }\n      }) : this.props.Login.screenName === \"IDS_SUBREPORTS\" || this.props.Login.screenName === \"IDS_IMAGES\" ? /*#__PURE__*/React.createElement(AddAttachment, {\n        operation: this.props.Login.operation,\n        selectedRecord: this.state.selectedRecord || {},\n        onDropImage: this.onDropImage,\n        deleteFile: this.deleteFile,\n        actionType: this.state.actionType,\n        attachmentType: this.props.Login.screenName === \"IDS_SUBREPORTS\" ? \".jrxml\" : \"image/*\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1054,\n          columnNumber: 49\n        }\n      }) : this.props.Login.screenName === \"IDS_REPORTVALIDATION\" ? /*#__PURE__*/React.createElement(AddReportValidation, {\n        selectedRecord: this.state.selectedRecord || {},\n        onInputOnChange: this.onInputOnChange,\n        onComboChange: this.onComboChange,\n        reportTypeList: this.props.Login.reportTypeList,\n        onClick: () => this.openModal(\"IDS_REPORTVALIDATION\"),\n        reportMaster: this.props.Login.masterData.SelectedReportMaster || {},\n        operation: this.props.Login.operation,\n        inputParam: this.props.Login.inputParam,\n        deleteFile: this.deleteFile,\n        actionType: this.state.actionType,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1063,\n          columnNumber: 53\n        }\n      }) : this.props.Login.screenName === \"IDS_REPORTPARAMETERMAPPING\" ? /*#__PURE__*/React.createElement(AddReportParameters, {\n        operation: this.props.Login.operation,\n        selectedRecord: this.state.selectedRecord || {},\n        onInputOnChange: this.onInputOnChange,\n        onComboChange: this.onComboChange,\n        gridPrimaryKey: \"controlbasedKey\",\n        addDesignParameter: this.state.addDesignParameter,\n        gridDataparmeter: this.state.gridDataparmeter && this.state.gridDataparmeter.length > 0 ? this.state.gridDataparmeter || [] : this.props.Login.ParameterMappingDatagrid || [] //dataResult={this.props.Login.masterData[\"ParameterMapping\"] }\n        ,\n        addreportParametersInDataGrid: this.addreportParametersInDataGrid,\n        deleteRecordWORights: this.removereportParametersInDataGrid,\n        gridColumnList: this.reportparametermappingcolumndatagrid || [],\n        userinfo: this.props.Login.userInfo,\n        reportTypeListparameter: this.state.reportTypeListparameter,\n        reportTypeListName: this.state.reportTypeListName || [],\n        reportTypeListColumn: this.state.reportTypeListColumn || [],\n        onClick: () => this.openModal(\"IDS_REPORTPARAMETERMAPPING\"),\n        masterData: this.props.Login.masterData || {},\n        inputParam: this.props.Login.inputParam,\n        deleteFile: this.deleteFile,\n        actionType: this.state.actionType,\n        controlMap: this.state.controlMap,\n        userRoleControlRights: this.state.userRoleControlRights //coaReportTypeList={this.props.Login.reportSubTypeList || []}\n        // certificateTypeList={this.props.Login.certificateTypeList || []}\n        // sectionList={this.props.Login.sectionList || []}\n        // decisionTypeList={this.props.Login.reportDecisionTypeList || []}\n        ,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1076,\n          columnNumber: 57\n        }\n      }) : \"\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 945,\n        columnNumber: 21\n      }\n    }) : \"\");\n  }\n\n  componentDidUpdate(previousProps) {\n    if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\n      this.setState({\n        selectedRecord: this.props.Login.selectedRecord\n      });\n    } // if (this.props.Login.reportTypeListparameter !== previousProps.Login.reportTypeListparameter) {\n    //     this.props.Login.reportTypeListName= [];\n    //     this.props.Login.reportTypeListColumn= [];\n    // }\n\n\n    if (this.props.Login.reportTypeListparameter !== previousProps.Login.reportTypeListparameter) {\n      this.setState({\n        reportTypeListparameter: this.props.Login.reportTypeListparameter\n      });\n    } // if (this.props.Login.reportTypeListColumn !== previousProps.Login.reportTypeListColumn) {\n    //     this.setState({ reportTypeListColumn: this.props.Login.reportTypeListColumn });\n    // }\n\n\n    if (this.props.Login.reportTypeListName !== previousProps.Login.reportTypeListName) {\n      this.setState({\n        reportTypeListName: this.props.Login.reportTypeListName\n      });\n    }\n\n    if (this.props.Login.ParameterMappingDatagrid !== previousProps.Login.ParameterMappingDatagrid) {\n      this.setState({\n        gridDataparmeter: this.props.Login.ParameterMappingDatagrid\n      });\n    }\n\n    if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\n      const userRoleControlRights = [];\n\n      if (this.props.Login.userRoleControlRights) {\n        this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item => userRoleControlRights.push(item.ncontrolcode));\n      }\n\n      const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode);\n      const addDesignParam = [];\n      const gridData = [];\n      this.props.Login.masterData.ReportDesignConfig && this.props.Login.masterData.ReportDesignConfig.forEach(item => {\n        addDesignParam.push({ ...item\n        });\n        gridData.push({ ...item\n        });\n      }); //     const addDesignParameter = [];\n      // //     const gridDataparmeter = [];\n      //     this.props.Login.reportTypeListparameter &&\n      //     this.props.Login.reportTypeListparameter.forEach(item => {\n      //         addDesignParameter.push({ ...item });\n      //         //gridDataparmeter.push({ ...item });\n      //     });\n\n      const addMappingParam = [];\n      const mappingGridData = [];\n      this.props.Login.masterData.ReportParameterMapping && this.props.Login.masterData.ReportParameterMapping.forEach(item => {\n        addMappingParam.push({ ...item\n        });\n        mappingGridData.push({ ...item\n        });\n      });\n      const reportTypeMap = constructOptionList(this.props.Login.masterData.ReportTypeList || [], \"nreporttypecode\", \"sdisplayname\", undefined, undefined, true);\n      const reportTypeList = reportTypeMap.get(\"OptionList\");\n      const filterData = this.generateBreadCrumData();\n      let skip = this.state.skip;\n      let take = this.state.take;\n\n      if (reportTypeList.length < take) {\n        skip = 0;\n        take = take;\n      }\n\n      this.setState({\n        reportTypeList,\n        filterData,\n        userRoleControlRights,\n        controlMap,\n        addDesignParam,\n        gridData,\n        addMappingParam,\n        mappingGridData,\n        // addActionParam, \n        // actionGridData\n        skip,\n        take\n      });\n    } else {\n      if (this.props.Login.masterData !== previousProps.Login.masterData) {\n        const filterData = this.generateBreadCrumData();\n        const reportTypeMap = constructOptionList(this.props.Login.masterData.ReportTypeList || [], \"nreporttypecode\", \"sdisplayname\", undefined, undefined, true);\n        const reportTypeList = reportTypeMap.get(\"OptionList\");\n        const addDesignParam = [];\n        const gridData = [];\n        this.props.Login.masterData.ReportDesignConfig && this.props.Login.masterData.ReportDesignConfig.forEach(item => {\n          addDesignParam.push({ ...item\n          });\n          gridData.push({ ...item\n          });\n        });\n        const addMappingParam = [];\n        const mappingGridData = [];\n        this.props.Login.masterData.ReportParameterMapping && this.props.Login.masterData.ReportParameterMapping.forEach(item => {\n          addMappingParam.push({ ...item\n          });\n          mappingGridData.push({ ...item\n          });\n        });\n        let skip = this.state.skip;\n        let take = this.state.take;\n\n        if (reportTypeList.length < take) {\n          skip = 0;\n          take = take;\n        }\n\n        this.setState({\n          reportTypeList,\n          filterData,\n          addDesignParam,\n          gridData,\n          addMappingParam,\n          mappingGridData,\n          skip,\n          take\n        });\n      }\n    }\n  }\n\n  generateBreadCrumData() {\n    const breadCrumbData = [];\n\n    if (this.props.Login.masterData && this.props.Login.masterData.SelectedFilterReportType) {\n      breadCrumbData.push({\n        \"label\": \"IDS_REPORTTYPE\",\n        \"value\": this.props.Login.masterData.SelectedFilterReportType ? this.props.intl.formatMessage({\n          id: this.props.Login.masterData.SelectedFilterReportType.sdisplayname\n        }) : \"\"\n      });\n    }\n\n    return breadCrumbData;\n  }\n\n  //     generateControlBasedReportReport(addValidationId){\n  //         if (this.props.Login.masterData.SelectedReportDetail == null) {\n  //             toast.warn(this.props.intl.formatMessage({ id: \"IDS_REPORTVERSIONNOTFOUND\" }))\n  //         }\n  //         else {\n  //             if (this.props.Login.masterData.SelectedReportDetail.ntransactionstatus === transactionStatus.DRAFT) {\n  //                 let inputParam={\n  //                     userinfo: this.props.Login.userInfo,\n  //                     nformcode:this.props.Login.userInfo.nformcode\n  //                 }\n  //                 this.props.validationReportparameter(inputParam)\n  //             }else if (this.props.Login.masterData.SelectedReportDetail.ntransactionstatus === transactionStatus.APPROVED) {\n  //                 toast.warn(this.props.intl.formatMessage({ id: \"IDS_CANNOTADDFORAPPROVEDREPORT\" }))\n  //             } else if (this.props.Login.masterData.SelectedReportDetail.ntransactionstatus === transactionStatus.RETIRED) {\n  //                 toast.warn(this.props.intl.formatMessage({ id: \"IDS_CANNOTADDFORRETIREDREPORT\" }))\n  //             }\n  //         }   \n  // }\n  generateControlBasedReportReportparametre(addValidationId) {\n    if (this.props.Login.masterData.SelectedReportDetail == null) {\n      toast.warn(this.props.intl.formatMessage({\n        id: \"IDS_REPORTVERSIONNOTFOUND\"\n      }));\n    } else {\n      if (this.props.Login.masterData.SelectedReportDetail.ntransactionstatus === transactionStatus.DRAFT) {\n        let inputParam = {\n          userinfo: this.props.Login.userInfo,\n          nformcode: this.props.Login.userInfo.nformcode,\n          nreportdetailcode: this.props.Login.masterData.SelectedReportDetail.nreportdetailcode\n        };\n        this.props.controlBasedReportparametre(inputParam);\n      } else if (this.props.Login.masterData.SelectedReportDetail.ntransactionstatus === transactionStatus.APPROVED) {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_CANNOTADDFORAPPROVEDREPORT\"\n        }));\n      } else if (this.props.Login.masterData.SelectedReportDetail.ntransactionstatus === transactionStatus.RETIRED) {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_CANNOTADDFORRETIREDREPORT\"\n        }));\n      }\n    }\n  }\n\n  generateControlBasedReportReport(addValidationId) {\n    if (this.props.Login.masterData.SelectedReportDetail == null) {\n      toast.warn(this.props.intl.formatMessage({\n        id: \"IDS_REPORTVERSIONNOTFOUND\"\n      }));\n    } else {\n      if (this.props.Login.masterData.SelectedReportDetail.ntransactionstatus === transactionStatus.DRAFT) {\n        let inputParam = {\n          userinfo: this.props.Login.userInfo,\n          nformcode: this.props.Login.masterData.SelectedReportMaster.nformcode,\n          ntranscode: this.props.Login.masterData.ReportValidation.map(item => item.ntranscode).join(\",\")\n        };\n        this.props.validationReportparameter(inputParam);\n      } else if (this.props.Login.masterData.SelectedReportDetail.ntransactionstatus === transactionStatus.APPROVED) {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_CANNOTADDFORAPPROVEDREPORT\"\n        }));\n      } else if (this.props.Login.masterData.SelectedReportDetail.ntransactionstatus === transactionStatus.RETIRED) {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_CANNOTADDFORRETIREDREPORT\"\n        }));\n      }\n    }\n  }\n\n  componentWillUnmount() {\n    const updateInfo = {\n      typeName: DEFAULT_RETURN,\n      data: {\n        masterData: [],\n        inputParam: undefined,\n        operation: null,\n        modalName: undefined\n      }\n    };\n    this.props.updateStore(updateInfo);\n  }\n\n}\n\nexport default connect(mapStatetoProps, {\n  callService,\n  getReportMasterComboService,\n  updateStore,\n  crudMaster,\n  getReportDetailComboService,\n  getSelectedReportMasterDetail,\n  getSelectedReportDetail,\n  getConfigReportComboService,\n  getParameterMappingComboService,\n  //getActionMappingComboService, \n  getReportRegSubType,\n  validateEsignCredential,\n  validationReportparameter,\n  controlBasedReportparametre,\n  controlBasedReportparametretable,\n  //controlBasedReportparametretablecolumn,\n  filterTransactionList,\n  getReportSubType,\n  getControlButton,\n  getregtype,\n  getReportRegSubTypeApproveConfigVersion,\n  getReportSampletype,\n  getReportTemplate\n})(injectIntl(ReportConfig));","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/pages/reports/reportsconfig/ReportConfig.jsx"],"names":["React","Component","faThumbsUp","faPlus","faSync","Card","Col","Row","Button","FormGroup","FormLabel","Nav","Form","injectIntl","FormattedMessage","connect","toast","TransactionListMaster","DataGrid","SampleType","designProperties","CustomTabs","ProductList","ListWrapper","FontAwesomeIcon","SplitterLayout","PerfectScrollbar","ReadOnlyText","ContentPanel","callService","getReportMasterComboService","updateStore","getSelectedReportMasterDetail","getReportDetailComboService","getSelectedReportDetail","getConfigReportComboService","getParameterMappingComboService","filterTransactionList","getReportSubType","getregtype","validationReportparameter","controlBasedReportparametretable","crudMaster","getReportRegSubType","validateEsignCredential","getControlButton","getReportRegSubTypeApproveConfigVersion","getReportSampletype","getReportTemplate","controlBasedReportparametre","DEFAULT_RETURN","SlideOutModal","showEsign","getControlMap","create_UUID","constructOptionList","Lims_JSON_stringify","validateDays","replaceBackSlash","AddDesign","ParameterMapping","reportTypeEnum","transactionStatus","RegistrationType","reportCOAType","ConfirmMessage","designComponents","Esign","AddReportMaster","AddReportDetail","AddAttachment","ReportConfigFilter","BreadcrumbComponent","AddReportValidation","AddReportParameters","mapStatetoProps","state","Login","ReportConfig","constructor","props","onSecondaryPaneSizeChange","e","val","setState","firstPane","tabPane","childPane","parentHeight","paneSizeChange","d","splitChangeWidthPercentage","handlePageChange","skip","take","handleMasterPageChange","handleDetailPageChange","openFilter","showFilter","updateInfo","typeName","data","closeFilter","onFilterSubmit","searchRef","current","value","inputParam","inputData","userInfo","nreporttypecode","selectedRecord","String","classUrl","methodUrl","displayName","onTabChange","tabProps","screenName","tabDetail","tabMap","Map","addSubReportId","controlMap","has","get","ncontrolcode","deleteSubReportId","addImageId","deleteImageId","addValidationId","deleteValidationId","addParameterMapping","set","masterData","length","parameterColumnList","userRoleControlRights","ReportParameter","SelectedFilterReportType","MIS","ALL","tabGridColumnList","mappingGridFieldList","indexOf","openModal","subReportGridFieldList","deleteAttachment","operation","selectedId","imageGridFieldList","SCREENWISE","generateControlBasedReportReport","transValidationFieldList","deleteValidation","generateControlBasedReportReportparametre","ParameterMappingDatagrid","reportparametermappingcolumn","ncontrolCode","SelectedReportDetail","warn","intl","formatMessage","id","ntransactionstatus","DRAFT","sreportname","SelectedReportMaster","APPROVED","RETIRED","addreportParametersInDataGrid","gridDataparmeter","undefined","ncontrolBasedparameter","nquerybuildertablecodecolumn","duplicate","map","el","duplicateRecord","some","num","valuecheck","nreportparametercode","isValuePresent","copySelected","controlbasedKey","Math","max","x","push","scontrolBasedparameter","label","stablecolumn","ncolumnfield","reportTypeListparameter","reportTypeListColumn","reportTypeListName","info","removereportParametersInDataGrid","gridDataNew","filter","item","ParameterMappingDatagridNew","str","reportTypeListparametercopy","reportTypeListparameter1","concat","removeParametersInDataGrid","selectedItem","addDesignParamNew","addDesignParam","gridData","addParametersInDataGrid","validData","trim","COMBOBOX","DATEPICKER","index","findIndex","sreportparametername","sdisplayname","ndesigncomponentcode","sdesigncomponentname","ndays","unbindMappingParametersFromDataGrid","addMappingParamNew","addMappingParam","nchildreportdesigncode","nparentreportdesigncode","mappingGridDataNew","mappingGridData","bindMappingParametersToDataGrid","sfieldname","sparentparametername","schildparametername","nactionparameter","NO","nactionreportdesigncode","bindActionParameter","rowItem","event","gridMappingParam","target","checked","forEach","YES","nisactionparent","index1","handleChangeDesign","valueParam","closeModal","loadEsign","controlButton","onComboChange","comboData","fieldName","COA","COAPREVIEW","COAPRELIMINARY","SAMPLE","reportType","nregtypecode","PLASMA_POOL","sqlquery","ssqlquery","param","param1","query","index2","check","parameter","substring","includes","replace","optionalParameterList","nformcode","nreportdetailcode","sdatatype","sampleType","registrationType","registrationsubType","sbatchdisplayname","ControlScreen","onInputOnChange","type","name","ACTIVE","DEACTIVE","onDropImage","attachedFiles","actionType","onSaveClick","saveType","formRef","onSaveVersion","onSaveMaster","onSaveReportConfig","onSaveParameterMapping","onSaveParameterAction","onSaveSubReport","onSaveReportImage","onSaveReportValidation","onSaveReportParameter","reportFile","sfilename","isFileEdited","formData","FormData","postParam","reportmaster","nmastersitecode","inputListName","selectedObject","primaryKeyField","reportVersionStatus","approvedReportMaster","ApprovedReportMaster","toString","JSON","parse","stringify","NA","BATCH","isneedregtype","userinfo","sformname","smodulename","reportdetails","nversionno","nisplsqlquery","sreportformatdetail","Array","isArray","splittedFileName","split","fileExtension","uniquefilename","append","isFileupload","screenData","path","isChild","ReportDesignConfig","nsqlquerycode","dataState","count","valid","childComponentList","ReportParameterMapping","subreportdetails","nreportcode","reportimages","ntranscode","ntransctionstatus","join","ncontrolbasedparameter","nquerybuildertablecode","squerybuildertablecodecolumn","nreportparameterconfigurationcode","deleteFile","approveReport","primaryKeyValue","fetchUrl","fecthInputObject","deleteParam","message","dmodifieddate","toLowerCase","deleteReport","masterToDelete","mastertodelete","listName","updateReportStatus","methodParam","mastertoupdate","status","validateEsign","sreason","nreasoncode","spredefinedreason","password","reloadData","createRef","masterStatus","error","paneHeight","secondPaneHeight","detailSkip","detailTake","settings","parseInt","designInputFieldList","designGridColumnList","detailedGridFieldList","mappingInputFieldList","reportparametermappingcolumndatagrid","getDerivedStateFromProps","componentDidMount","height","clientHeight","render","addMasterId","editMasterId","deleteMasterId","filterParam","childRefs","searchFieldList","changeList","isSingleSelect","addMasterParam","primaryKeyName","filterReportType","addDetailId","editDetailId","deleteDetailId","addDetailParam","configReportId","parameterMapId","approveReportId","confirmMessage","mandatoryFields","isneedsection","CLINICALTYPE","breadCrumbData","filterData","searchedData","ReportMaster","VALUE","COLOUR","title","controlname","objectName","hidden","onClick","confirm","reportTypeList","borderBottom","display","marginTop","float","reportMaster","reportDetail","paddingRight","ReportDetails","sreportdisplayname","ssampletypename","sregtypename","nregsubtypecode","sregsubtypename","sapproveversionname","nsectioncode","ssectionname","scoareporttypename","sreporttemplatename","sreportmodulename","scertificatetype","scontrolids","splsqlquery","sdescription","reportSubTypeList","certificateTypeList","sampleTypeList","regTypeList","regSubTypeList","sectionList","ApproveConfigList","reportDecisionTypeList","controlScreen","reportModuleList","reportTemplateList","reportParameterList","designComponentList","sqlQueryList","parentComponentList","addDesignParameter","componentDidUpdate","previousProps","Object","values","reportTypeMap","ReportTypeList","generateBreadCrumData","ReportValidation","componentWillUnmount","modalName"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { faThumbsUp, faPlus, faSync } from '@fortawesome/free-solid-svg-icons';\r\nimport { Card, Col, Row, Button, FormGroup, FormLabel, Nav, Form } from 'react-bootstrap';\r\nimport { injectIntl, FormattedMessage } from 'react-intl';\r\nimport { connect } from 'react-redux';\r\nimport { toast } from 'react-toastify';\r\n\r\nimport TransactionListMaster from '../../../components/TransactionListMaster';\r\nimport DataGrid from '../../../components/data-grid/data-grid.component';\r\nimport { SampleType, designProperties } from '../../../components/Enumeration';\r\nimport CustomTabs from '../../../components/custom-tabs/custom-tabs.component';\r\nimport { ProductList } from '../../testmanagement/testmaster-styled';\r\nimport { ListWrapper } from '../../../components/client-group.styles';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport SplitterLayout from \"react-splitter-layout\";\r\nimport PerfectScrollbar from 'react-perfect-scrollbar';\r\nimport { ReadOnlyText, ContentPanel } from '../../../components/App.styles';\r\nimport '../../registration/registration.css';\r\nimport {\r\n    callService, getReportMasterComboService, updateStore, getSelectedReportMasterDetail,\r\n    getReportDetailComboService, getSelectedReportDetail, getConfigReportComboService,\r\n    getParameterMappingComboService, //getActionMappingComboService, \r\n    filterTransactionList, getReportSubType, getregtype, validationReportparameter, controlBasedReportparametretable,\r\n    //controlBasedReportparametretablecolumn,\r\n    crudMaster, getReportRegSubType, validateEsignCredential, getControlButton, getReportRegSubTypeApproveConfigVersion, getReportSampletype,\r\n    getReportTemplate, controlBasedReportparametre\r\n} from '../../../actions';\r\nimport { DEFAULT_RETURN } from '../../../actions/LoginTypes';\r\nimport SlideOutModal from '../../../components/slide-out-modal/SlideOutModal';\r\nimport { showEsign, getControlMap, create_UUID, constructOptionList, Lims_JSON_stringify, validateDays, replaceBackSlash } from '../../../components/CommonScript';\r\nimport AddDesign from '../../../components/add-design/add-design.component';\r\nimport ParameterMapping from '../../../components/add-design/parameter-mapping.component';\r\nimport { reportTypeEnum, transactionStatus, RegistrationType, reportCOAType } from '../../../components/Enumeration';\r\nimport ConfirmMessage from '../../../components/confirm-alert/confirm-message.component';\r\nimport { designComponents } from '../../../components/Enumeration';\r\n\r\nimport Esign from '../../audittrail/Esign';\r\nimport AddReportMaster from './AddReportMaster';\r\nimport AddReportDetail from './AddReportDetail';\r\nimport AddAttachment from './AddAttachment';\r\nimport ReportConfigFilter from './ReportConfigFilter';\r\n\r\nimport { ReactComponent as ParameterConfigurationIcon } from '../../../assets/image/parameter-configuration.svg';\r\nimport { ReactComponent as ParameterMappingIcon } from '../../../assets/image/parameter-mapping.svg';\r\nimport BreadcrumbComponent from '../../../components/Breadcrumb.Component';\r\nimport { ReactComponent as RefreshIcon } from '../../../assets/image/refresh.svg';\r\nimport AddReportValidation from './AddReportValidation';\r\nimport AddReportParameters from './AddReportParameters';\r\n\r\nconst mapStatetoProps = (state) => {\r\n    return {\r\n        Login: state.Login\r\n    }\r\n}\r\n\r\nclass ReportConfig extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        // const dataState = {\r\n        //     skip: 0,\r\n        //     take: 10,\r\n        // }; \r\n        this.searchRef = React.createRef();\r\n        this.state = {\r\n\r\n            masterStatus: \"\",\r\n            error: \"\",\r\n            selectedRecord: {},\r\n            operation: \"\", //dataState, dataResult:[],\r\n            screenName: undefined,\r\n            userRoleControlRights: [],\r\n            controlMap: new Map(),\r\n            // actionMappingParentList:[],\r\n            addMappingParam: [],\r\n            firstPane: 0,\r\n            paneHeight: 0,\r\n            secondPaneHeight: 0,\r\n            tabPane: 0,\r\n            //masterSkip:0,\r\n            //masterTake:25,\r\n            detailSkip: 0,\r\n            detailTake: 10,\r\n            splitChangeWidthPercentage: 22,\r\n            skip: 0,\r\n            take: this.props.Login.settings && parseInt(this.props.Login.settings[3])\r\n\r\n        }\r\n\r\n        this.parameterColumnList = [{ \"idsName\": \"IDS_PARAMETERS\", \"dataField\": \"sreportparametername\", \"width\": \"250px\" },\r\n        { \"idsName\": \"IDS_DATATYPE\", \"dataField\": \"sdisplaydatatype\", \"width\": \"400px\" },\r\n        ];\r\n\r\n        this.designInputFieldList = [\r\n            { \"idsName\": \"IDS_REPORTNAME\", \"dataField\": \"sreportname\" },\r\n            {\r\n                \"idsName\": \"IDS_INPUTTYPE\", \"dataField\": \"ndesigncomponentcode\", \"listName\": \"designComponentList\",\r\n                \"optionId\": \"ndesigncomponentcode\", \"optionValue\": \"sdesigncomponentname\"\r\n            },\r\n            {\r\n                \"idsName\": \"IDS_PARAMETERS\", \"dataField\": \"nreportparametercode\", \"listName\": \"reportParameterList\",\r\n                \"optionId\": \"nreportparametercode\", \"optionValue\": \"sreportparametername\"\r\n            },\r\n            {\r\n                \"idsName\": \"IDS_EXISTINGLINKTABLE\", \"dataField\": \"nsqlquerycode\", \"listName\": \"sqlQueryList\",\r\n                \"optionId\": \"nsqlquerycode\", \"optionValue\": \"ssqlqueryname\"\r\n            },\r\n            { \"idsName\": \"IDS_DISPLAYNAME\", \"dataField\": \"sdisplayname\" },\r\n            { \"idsName\": \"IDS_DAYS\", \"dataField\": \"ndays\", \"maxLength\": 5 },\r\n            //{ \"idsName\": \"IDS_MANDATORY\", \"dataField\": \"nmandatory\"}\r\n        ];\r\n        this.designGridColumnList = [\r\n            { \"idsName\": \"IDS_PARAMETERS\", \"dataField\": \"sreportparametername\", \"width\": \"200px\" },\r\n            { \"idsName\": \"IDS_DISPLAYNAME\", \"dataField\": \"sdisplayname\", \"width\": \"200px\" },\r\n            { \"idsName\": \"IDS_INPUTTYPE\", \"dataField\": \"sdesigncomponentname\", \"width\": \"200px\" },\r\n            // { \"idsName\": \"IDS_SQLQUERY\", \"dataField\": \"ssqlqueryname\", \"width\": \"200px\" },\r\n            //  { \"idsName\": \"IDS_DAYS\", \"dataField\": \"ndays\", \"width\": \"150px\" },\r\n            // { \"idsName\": \"IDS_MANDATORY\", \"dataField\": \"smandatory\", \"width\": \"150px\" },\r\n        ];\r\n\r\n        this.tabGridColumnList = [\r\n            { \"idsName\": \"IDS_PARAMETERS\", \"dataField\": \"sreportparametername\", \"width\": \"200px\" },\r\n            { \"idsName\": \"IDS_DISPLAYNAME\", \"dataField\": \"sdisplayname\", \"width\": \"200px\" },\r\n            { \"idsName\": \"IDS_INPUTTYPE\", \"dataField\": \"sdesigncomponentname\", \"width\": \"200px\" },\r\n            { \"idsName\": \"IDS_SQLQUERY\", \"dataField\": \"ssqlqueryname\", \"width\": \"200px\" },\r\n            { \"idsName\": \"IDS_DAYS\", \"dataField\": \"ndays\", \"width\": \"150px\" },\r\n            { \"idsName\": \"IDS_MANDATORY\", \"dataField\": \"smandatory\", \"width\": \"150px\" },\r\n        ];\r\n\r\n        this.mappingGridFieldList = [\r\n            { \"idsName\": \"IDS_PARAMETERS\", \"dataField\": \"schildparametername\", \"width\": \"200px\" },\r\n            { \"idsName\": \"IDS_FIELDNAME\", \"dataField\": \"sfieldname\", \"width\": \"200px\" },\r\n            { \"idsName\": \"IDS_PARENTPARAMETER\", \"dataField\": \"sparentparametername\", \"width\": \"300px\" },\r\n            { \"idsName\": \"IDS_ACTIONPARAMETER\", \"dataField\": \"sisactionparent\", \"width\": \"200px\" }\r\n        ];\r\n        this.detailedGridFieldList = [\r\n            { \"idsName\": \"IDS_FIELDNAME\", \"dataField\": \"sfieldname\", \"width\": \"200px\" },\r\n            { \"idsName\": \"IDS_PARENTPARAMETER\", \"dataField\": \"sparentparametername\", \"width\": \"200px\" },\r\n            {\r\n                \"idsName\": \"IDS_ACTIONPARAMETER\", \"dataField\": \"nisactionparent\", \"width\": \"200px\",\r\n                \"componentName\": \"switch\", \"switchFieldName\": \"nisactionparent\",\r\n                \"switchStatus\": transactionStatus.YES, \"needRights\": false, //\"controlName\": \"DefaultTestSection\"\r\n            },\r\n\r\n        ];\r\n\r\n        this.mappingInputFieldList = [\r\n            {\r\n                \"idsName\": \"IDS_PARAMETER\", \"dataField\": \"nchildreportdesigncode\", \"listName\": \"childComponentList\",\r\n                \"optionId\": \"nreportdesigncode\", \"optionValue\": \"sdisplayname\"\r\n            },\r\n            {\r\n                \"idsName\": \"IDS_FIELDNAME\", \"dataField\": \"sfieldname\", \"listName\": \"optionalParameterList\",\r\n                \"optionId\": \"value\", \"optionValue\": \"label\"\r\n            },\r\n            {\r\n                \"idsName\": \"IDS_PARENTPARAMETER\", \"dataField\": \"nparentreportdesigncode\", \"listName\": \"parentComponentList\",\r\n                \"optionId\": \"nreportdesigncode\", \"optionValue\": \"sdisplayname\"\r\n            },\r\n            // { \"idsName\": \"IDS_ACTIONPARAMETER\", \"dataField\": \"nactionreportdesigncode\",\"listName\":\"actionMappingParentList\",\r\n            //        \"optionId\":\"nreportdesigncode\",  \"optionValue\":\"sdisplayname\"},\r\n\r\n        ];\r\n\r\n        // this.actionGridFieldList = [\r\n        //                    { \"idsName\": \"IDS_ACTIONPARAMETER\", \"dataField\": \"sparentparametername\", \"width\":\"300px\"},\r\n        //                    { \"idsName\": \"IDS_CHILDPARAMETER\", \"dataField\": \"schildparametername\", \"width\":\"300px\"},\r\n        //                     ];\r\n\r\n        this.subReportGridFieldList = [\r\n            { \"idsName\": \"IDS_FILE\", \"dataField\": \"sfilename\", \"width\": \"300px\" },\r\n            { \"idsName\": \"IDS_FTPFILE\", \"dataField\": \"ssystemfilename\", \"width\": \"400px\" },\r\n        ];\r\n\r\n        this.imageGridFieldList = [\r\n            { \"idsName\": \"IDS_FILE\", \"dataField\": \"sfilename\", \"width\": \"300px\" },\r\n            { \"idsName\": \"IDS_FTPFILE\", \"dataField\": \"ssystemfilename\", \"width\": \"400px\" },\r\n        ];\r\n        this.transValidationFieldList = [\r\n            { \"idsName\": \"IDS_TRANSACTIONSTATUS\", \"dataField\": \"stransactionstatus\", \"width\": \"300px\" }\r\n        ];\r\n        this.reportparametermappingcolumn = [\r\n            { \"idsName\": \"IDS_REPORTPARAMETER\", \"dataField\": \"scontrolBasedparameter\", \"width\": \"300px\" },\r\n            { \"idsName\": \"IDS_FIELDNAME\", \"dataField\": \"stablecolumn\", \"width\": \"300px\" }\r\n            // ,{ \"idsName\": \"IDS_REPORTTABLECOLUMNNAME\", \"dataField\": \"stablecolumn\", \"width\": \"300px\" }\r\n        ];\r\n        this.reportparametermappingcolumndatagrid = [\r\n            { \"idsName\": \"IDS_REPORTPARAMETER\", \"dataField\": \"scontrolBasedparameter\", \"width\": \"200px\" },\r\n            { \"idsName\": \"IDS_FIELDNAME\", \"dataField\": \"stablecolumn\", \"width\": \"200px\" }\r\n\r\n        ];\r\n\r\n        //  this.formRef = React.createRef();\r\n    }\r\n\r\n    static getDerivedStateFromProps(props, state) {\r\n\r\n        if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\r\n            toast.warn(props.Login.masterStatus);\r\n            props.Login.masterStatus = \"\";\r\n        }\r\n        if (props.Login.error !== state.error) {\r\n            toast.error(props.Login.error)\r\n            props.Login.error = \"\";\r\n        }\r\n        if (props.Login.selectedRecord === undefined) {\r\n            return { selectedRecord: {} }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    onSecondaryPaneSizeChange = (e, val) => {\r\n        this.setState({\r\n            firstPane: e - val,\r\n            tabPane: e - 80,\r\n            childPane: this.state.parentHeight - e - 80\r\n        })\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (this.parentHeight) {\r\n            const height = this.parentHeight.clientHeight;\r\n            this.setState({\r\n                firstPane: height - 80,\r\n                parentHeight: height - 50\r\n            });\r\n        }\r\n    }\r\n\r\n    paneSizeChange = (d) => {\r\n        this.setState({\r\n            splitChangeWidthPercentage: d\r\n        })\r\n    }\r\n\r\n    handlePageChange = e => {\r\n        this.setState({\r\n            skip: e.skip,\r\n            take: e.take\r\n        });\r\n    };\r\n\r\n\r\n    render() {\r\n\r\n        const addMasterId = this.state.controlMap.has(\"AddReportMaster\") && this.state.controlMap.get(\"AddReportMaster\").ncontrolcode;\r\n        const editMasterId = this.state.controlMap.has(\"EditReportMaster\") && this.state.controlMap.get(\"EditReportMaster\").ncontrolcode;\r\n        const deleteMasterId = this.state.controlMap.has(\"DeleteReportMaster\") && this.state.controlMap.get(\"DeleteReportMaster\").ncontrolcode;\r\n\r\n        const filterParam = {\r\n            inputListName: \"ReportMaster\", selectedObject: \"SelectedReportMaster\", primaryKeyField: \"nreportcode\",\r\n            fetchUrl: \"reportconfig/getReportDesigner\", fecthInputObject: { userinfo: this.props.Login.userInfo },\r\n            masterData: this.props.Login.masterData, childRefs: [],\r\n            searchFieldList: [\"sreportname\", \"sreportdisplayname\", \"sregtypename\",\r\n                \"sregsubtypename\", \"sreportmodulename\", \"sactivestatus\", \"scontrolids\", \"sdisplayname\"],\r\n            changeList: [\"ReportDetails\", \"SelectedReportDetail\", \"ReportParameter\", \"ReportDesignConfig\",\r\n                \"ReportParameterMapping\", \"ReportParameterAction\", \"SubReportDetails\", \"ReportImages\"], isSingleSelect: true\r\n\r\n        };\r\n\r\n        const addMasterParam = {\r\n            screenName: \"IDS_REPORTMASTER\", operation: \"create\", primaryKeyName: \"nreportcode\",\r\n            masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo,\r\n            ncontrolcode: addMasterId,\r\n            filterReportType: this.props.Login.masterData.SelectedFilterReportType\r\n        }\r\n\r\n        const addDetailId = this.state.controlMap.has(\"AddReportDetails\") && this.state.controlMap.get(\"AddReportDetails\").ncontrolcode;\r\n        const editDetailId = this.state.controlMap.has(\"EditReportDetails\") && this.state.controlMap.get(\"EditReportDetails\").ncontrolcode;\r\n        const deleteDetailId = this.state.controlMap.has(\"DeleteReportDetails\") && this.state.controlMap.get(\"DeleteReportDetails\").ncontrolcode;\r\n\r\n        const addDetailParam = {\r\n            screenName: \"IDS_REPORTVERSION\", operation: \"create\", primaryKeyName: \"nreportdetailcode\",\r\n            masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo,\r\n            ncontrolcode: addDetailId\r\n        }\r\n\r\n        const configReportId = this.state.controlMap.has(\"AddReportDesignParameter\") && this.state.controlMap.get(\"AddReportDesignParameter\").ncontrolcode;\r\n        const parameterMapId = this.state.controlMap.has(\"AddReportParameterMapping\") && this.state.controlMap.get(\"AddReportParameterMapping\").ncontrolcode;\r\n        const approveReportId = this.state.controlMap.has(\"ApproveReportVersion\") && this.state.controlMap.get(\"ApproveReportVersion\").ncontrolcode;\r\n\r\n        const confirmMessage = new ConfirmMessage();\r\n\r\n        let mandatoryFields = [];\r\n        if (this.props.Login.screenName === \"IDS_REPORTMASTER\") {\r\n            if (this.props.Login.operation === \"create\") {\r\n                mandatoryFields.push({ \"idsName\": \"IDS_REPORTTYPE\", \"dataField\": \"nreporttypecode\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" });\r\n                if (this.state.selectedRecord[\"nreporttypecode\"] && this.state.selectedRecord[\"nreporttypecode\"].value === reportTypeEnum.COA || this.state.selectedRecord[\"nreporttypecode\"] && this.state.selectedRecord[\"nreporttypecode\"].value === reportTypeEnum.COAPREVIEW\r\n                    || this.state.selectedRecord[\"nreporttypecode\"] && this.state.selectedRecord[\"nreporttypecode\"].value === reportTypeEnum.COAPRELIMINARY) {\r\n                    mandatoryFields.push({ \"idsName\": \"IDS_SAMPLETYPE\", \"dataField\": \"nsampletypecode\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" });\r\n                    mandatoryFields.push({ \"idsName\": \"IDS_REGISTRATIONTYPE\", \"dataField\": \"nregtypecode\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" });\r\n                    mandatoryFields.push({ \"idsName\": \"IDS_REGISTRATIONSUBTYPE\", \"dataField\": \"nregsubtypecode\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" });\r\n                    mandatoryFields.push({ \"idsName\": \"IDS_APPROVECONFIGVERSION\", \"dataField\": \"napproveconfversioncode\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" });\r\n                    mandatoryFields.push({ \"idsName\": \"IDS_REPORTSUBTYPE\", \"dataField\": \"ncoareporttypecode\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" });\r\n                    {this.state.selectedRecord[\"isneedsection\"] || this.state.selectedRecord[\"ncoareporttypecode\"] && this.state.selectedRecord[\"ncoareporttypecode\"].item && this.state.selectedRecord[\"ncoareporttypecode\"].item.isneedsection === transactionStatus.YES &&\r\n                    mandatoryFields.push({ \"idsName\": \"IDS_SECTION\", \"dataField\": \"nsectioncode\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" });}\r\n                    {this.state.selectedRecord && this.state.selectedRecord[\"nsampletypecode\"] && this.state.selectedRecord[\"nsampletypecode\"].value !== SampleType.CLINICALTYPE &&\r\n                    mandatoryFields.push({ \"idsName\": \"IDS_REPORTTEMPLATE\", \"dataField\": \"nreporttemplatecode\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" });}\r\n                    // if(this.state.selectedRecord[\"ncoareporttypecode\"] && this.state.selectedRecord[\"ncoareporttypecode\"].value === reportCOAType.PROJECTWISE\r\n                    // && this.props.Login.settings && parseInt(this.props.Login.settings[29]) === transactionStatus.YES){\r\n                    //     mandatoryFields.push({ \"idsName\": \"IDS_REPORTTEMPLATE\", \"dataField\": \"nreporttemplatecode\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" });\r\n                    // }\r\n                } else if (this.state.selectedRecord[\"nreporttypecode\"] && this.state.selectedRecord[\"nreporttypecode\"].value === reportTypeEnum.MIS) {\r\n                    mandatoryFields.push({ \"idsName\": \"IDS_MODULENAME\", \"dataField\": \"nreportmodulecode\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" });\r\n\r\n                } else if (this.state.selectedRecord[\"nreporttypecode\"] && (this.state.selectedRecord[\"nreporttypecode\"].value === reportTypeEnum.BATCH\r\n                    || this.state.selectedRecord[\"nreporttypecode\"].value === reportTypeEnum.SAMPLE)) {\r\n                    ;\r\n                    mandatoryFields.push({ \"idsName\": \"IDS_COAREPORTTYPE\", \"dataField\": \"ncoareporttypecode\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" });\r\n                    mandatoryFields.push({ \"idsName\": \"IDS_CERTIFICATETYPE\", \"dataField\": \"ncertificatetypecode\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" });\r\n\r\n                } else if (this.state.selectedRecord[\"nreporttypecode\"] && this.state.selectedRecord[\"nreporttypecode\"].value === reportTypeEnum.SCREENWISE) {\r\n                    mandatoryFields.push({ \"idsName\": \"IDS_SCREENNAME\", \"dataField\": \"nformcode\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" });\r\n                    mandatoryFields.push({ \"idsName\": \"IDS_CONTROLNAME\", \"dataField\": \"ncontrolcode\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" });\r\n                }\r\n\r\n            }\r\n            mandatoryFields.push({ \"idsName\": \"IDS_REPORTNAME\", \"dataField\": \"sreportname\", \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"textbox\" });\r\n            this.props.Login.operation === \"create\" && mandatoryFields.push({ \"idsName\": \"IDS_FILE\", \"dataField\": \"sfilename\", \"mandatoryLabel\": \"IDS_CHOOSE\", \"controlType\": \"file\" });\r\n\r\n        }\r\n        else if (this.props.Login.screenName === \"IDS_REPORTVERSION\") {\r\n            if (this.state.selectedRecord[\"nreporttypecode\"]\r\n                && this.state.selectedRecord[\"nreporttypecode\"].value === reportTypeEnum.SAMPLE) {\r\n                mandatoryFields.push(\r\n                    { \"idsName\": \"IDS_COAREPORTTYPE\", \"dataField\": \"ncoareporttypecode\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n                    // { \"idsName\": \"IDS_LAB\", \"dataField\": \"nsectioncode\" },\r\n                    { \"idsName\": \"IDS_DECISIONTYPE\", \"dataField\": \"nreportdecisiontypecode\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n                    { \"idsName\": \"IDS_FILE\", \"dataField\": \"sfilename\", \"mandatoryLabel\": \"IDS_CHOOSE\", \"controlType\": \"file\" });\r\n            }\r\n            else if (this.state.selectedRecord[\"nreporttypecode\"]\r\n                && this.state.selectedRecord[\"nreporttypecode\"].value === reportTypeEnum.BATCH) {\r\n                mandatoryFields.push({ \"idsName\": \"IDS_COAREPORTTYPE\", \"dataField\": \"ncoareporttypecode\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n                    { \"idsName\": \"IDS_FILE\", \"dataField\": \"sfilename\", \"mandatoryLabel\": \"IDS_CHOOSE\", \"controlType\": \"file\" });\r\n            }\r\n            else {\r\n                mandatoryFields.push({ \"idsName\": \"IDS_FILE\", \"dataField\": \"sfilename\", \"mandatoryLabel\": \"IDS_CHOOSE\", \"controlType\": \"file\" });\r\n            }\r\n\r\n        }\r\n        else {\r\n            if (this.props.Login.screenName === \"IDS_SUBREPORTS\" || this.props.Login.screenName === \"IDS_IMAGES\") {\r\n                mandatoryFields.push({ \"idsName\": \"IDS_FILE\", \"dataField\": \"sfilename\", \"mandatoryLabel\": \"IDS_CHOOSE\", \"controlType\": \"file\" });\r\n            }\r\n        }\r\n\r\n        const breadCrumbData = this.state.filterData || [];\r\n        ///console.log(\"masterdata:\", this.props.Login.masterData);\r\n        return (\r\n\r\n            <>\r\n                <ListWrapper className=\"client-listing-wrap mtop-4 screen-height-window\">\r\n                    {breadCrumbData.length > 0 ?\r\n                        <BreadcrumbComponent breadCrumbItem={breadCrumbData} />\r\n                        : \"\"}\r\n                    <Row noGutters={true}>\r\n                        <Col md={12} className=\"parent-port-height\">\r\n                            {/* <Col md={12} className='parent-port-height-nobreadcrumb sticky_head_parent' ref={(parentHeight) => { this.parentHeight = parentHeight }}>\r\n                            <ListWrapper> */}\r\n                            <SplitterLayout borderColor=\"#999\" percentage={true} primaryIndex={1} onSecondaryPaneSizeChange={this.paneSizeChange} secondaryInitialSize={25} primaryMinSize={40} secondaryMinSize={20}>\r\n                                {/* First column */}\r\n                                <TransactionListMaster\r\n                                    paneHeight={this.state.parentHeight}\r\n                                    needMultiSelect={false}\r\n                                    masterList={this.props.Login.masterData.searchedData || (this.props.Login.masterData.ReportMaster || [])}\r\n                                    selectedMaster={[this.props.Login.masterData.SelectedReportMaster]}\r\n                                    primaryKeyField=\"nreportcode\"\r\n                                    getMasterDetail={this.props.getSelectedReportMasterDetail}\r\n                                    inputParam={{\r\n                                        userInfo: this.props.Login.userInfo,\r\n                                        masterData: this.props.Login.masterData\r\n                                    }}\r\n                                    mainField={\"sreportname\"}\r\n                                    selectedListName=\"SelectedReportMaster\"\r\n                                    objectName=\"ReportMaster\"\r\n                                    listName=\"IDS_REPORT\"\r\n                                    filterColumnData={this.props.filterTransactionList}\r\n                                    searchListName=\"searchedData\"\r\n                                    searchRef={this.searchRef}\r\n                                    filterParam={filterParam}\r\n\r\n                                    showFilter={this.props.Login.showFilter}\r\n                                    openFilter={this.openFilter}\r\n                                    closeFilter={this.closeFilter}\r\n                                    onFilterSubmit={this.onFilterSubmit}\r\n                                    subFields={[\r\n                                        { [designProperties.VALUE]: \"sreportdisplayname\" },\r\n                                        { [designProperties.VALUE]: \"sactivestatus\", [designProperties.COLOUR]: \"Color\" }\r\n                                    ]}\r\n                                    needFilter={true}\r\n                                    //skip={this.state.masterSkip}\r\n                                    //take={this.state.masterTake}\r\n                                    hidePaging={false}\r\n                                    handlePageChange={this.handlePageChange}\r\n                                    skip={this.state.skip}\r\n                                    take={this.state.take}\r\n\r\n                                    actionIcons={\r\n                                        [\r\n                                            {\r\n                                                title: this.props.intl.formatMessage({ id: \"IDS_EDIT\" }),\r\n                                                controlname: \"faPencilAlt\",\r\n                                                objectName: \"mastertoedit\",\r\n                                                hidden: this.state.userRoleControlRights.indexOf(editMasterId) === -1,\r\n                                                onClick: this.props.getReportMasterComboService,\r\n                                                inputData: {\r\n                                                    primaryKeyName: \"nreportcode\",\r\n                                                    operation: \"update\",\r\n                                                    masterData: this.props.Login.masterData,\r\n                                                    userInfo: this.props.Login.userInfo,\r\n                                                    screenName: \"IDS_REPORTMASTER\",\r\n                                                    ncontrolcode: editMasterId,\r\n                                                    filterReportType: this.props.Login.masterData.SelectedFilterReportType\r\n                                                },\r\n\r\n                                            },\r\n                                            {\r\n                                                title: this.props.intl.formatMessage({ id: \"IDS_DELETE\" }),\r\n                                                controlname: \"faTrashAlt\",\r\n                                                objectName: \"mastertodelete\",\r\n                                                hidden: this.state.userRoleControlRights.indexOf(deleteMasterId) === -1,\r\n                                                onClick: (props) => confirmMessage.confirm(\r\n                                                    \"deleteMessage\",\r\n                                                    this.props.intl.formatMessage({ id: \"IDS_DELETE\" }),\r\n                                                    this.props.intl.formatMessage({ id: \"IDS_DEFAULTCONFIRMMSG\" }),\r\n                                                    this.props.intl.formatMessage({ id: \"IDS_OK\" }),\r\n                                                    this.props.intl.formatMessage({ id: \"IDS_CANCEL\" }),\r\n                                                    () => this.deleteReport(props)\r\n                                                ),\r\n                                                inputData: {\r\n                                                    primaryKeyName: \"nreportcode\",\r\n                                                    operation: \"delete\",\r\n                                                    masterData: this.props.Login.masterData,\r\n                                                    userInfo: this.props.Login.userInfo,\r\n                                                    screenName: \"IDS_REPORTMASTER\",\r\n                                                    listName: \"reportmaster\",\r\n                                                    ncontrolCode: deleteMasterId, methodUrl: \"ReportMaster\"\r\n                                                }\r\n                                            },\r\n\r\n                                        ]\r\n                                    }\r\n                                    commonActions={\r\n                                        <ProductList className=\"d-flex product-category float-right\">\r\n                                            <Button className=\"btn btn-icon-rounded btn-circle solid-blue\" role=\"button\"\r\n                                                data-tip={this.props.intl.formatMessage({ id: \"IDS_ADD\" })}\r\n                                                // data-for=\"tooltip-common-wrap\"\r\n                                                hidden={this.state.userRoleControlRights.indexOf(addMasterId) === -1}\r\n                                                onClick={() => this.props.getReportMasterComboService(addMasterParam)}>\r\n                                                <FontAwesomeIcon icon={faPlus} title={this.props.intl.formatMessage({ id: \"IDS_ADD\" })} />\r\n                                            </Button>\r\n                                            <Button className=\"btn btn-circle outline-grey ml-2 p-0\" variant=\"link\"\r\n                                                onClick={() => this.reloadData()}\r\n                                                // data-for=\"tooltip-common-wrap\"\r\n                                                data-tip={this.props.intl.formatMessage({ id: \"IDS_REFRESH\" })}>\r\n                                                <RefreshIcon className='custom_icons'/>\r\n                                            </Button>\r\n                                        </ProductList>\r\n                                    }\r\n                                    filterComponent={[\r\n                                        {\r\n                                            \"IDS_FILTER\":\r\n                                                <ReportConfigFilter\r\n                                                    selectedRecord={this.state.selectedRecord || {}}\r\n                                                    reportTypeList={this.state.reportTypeList || []}\r\n                                                    onComboChange={this.onComboChange}\r\n                                                    filterReportType={this.props.Login.masterData.SelectedFilterReportType}\r\n                                                />\r\n                                        }\r\n                                    ]}\r\n                                />\r\n<>\r\n                                {/* End of first column */}\r\n                                <SplitterLayout vertical borderColor=\"#999\" percentage={true} primaryIndex={1} //secondaryInitialSize={400}\r\n                                   >\r\n                                        {/* Start of second column */}\r\n                                        <div className=\"card_group\">\r\n                                            <Row>\r\n                                                \r\n                                                <Col md={12}>\r\n                                                    <div className='report-designer-right'>\r\n                                                <PerfectScrollbar>\r\n                                                    {/* Start of detailed content */}\r\n                                                    <ContentPanel className={`panel-main-content`}>\r\n                                                        <Card className=\"border-0\">\r\n                                                            <Card.Body className='p-0'>\r\n                                                                {this.props.Login.masterData.SelectedReportMaster &&\r\n                                                                    <Row noGutters>\r\n                                                                        <Col md={12}>\r\n                                                                            <Card>\r\n                                                                                <Card.Header style={{ borderBottom: \"0px\" }}>\r\n                                                                                    <span style={{ display: \"inline-block\", marginTop: \"1%\" }} >\r\n                                                                                        <h4 >{this.props.intl.formatMessage({ id: \"IDS_REPORTDETAILS\" })}</h4>\r\n                                                                                    </span>\r\n                                                                                </Card.Header>\r\n                                                                                <Card.Body className='form-static-wrap p-2'>\r\n                                                                                    <Row>\r\n                                                                                        <Col md={12}>\r\n                                                                                            <div className=\"d-flex product-category\" style={{ float: \"right\" }}>\r\n                                                                                                {((this.props.Login.masterData.ReportParameter &&\r\n                                                                                                    this.props.Login.masterData.ReportParameter.length > 0) && (this.props.Login.masterData.SelectedFilterReportType.nreporttypecode === reportTypeEnum.ALL\r\n                                                                                                    || this.props.Login.masterData.SelectedFilterReportType.nreporttypecode === reportTypeEnum.MIS))\r\n                                                                                                     ? <>\r\n                                                                                                    <ContentPanel className=\"d-flex justify-content-end dropdown badget_menu icon-group-wrap\">\r\n                                                                                                        <Nav.Link name=\"configreportlink\"\r\n                                                                                                            data-tip={this.props.intl.formatMessage({ id: \"IDS_REPORTDESIGN\" })}\r\n                                                                                                            hidden={this.state.userRoleControlRights.indexOf(configReportId) === -1}\r\n                                                                                                            className=\"btn btn-circle outline-grey mr-2 \"\r\n                                                                                                            onClick={() => this.props.getConfigReportComboService({\r\n                                                                                                                reportMaster: this.props.Login.masterData.SelectedReportMaster,\r\n                                                                                                                reportDetail: this.props.Login.masterData.SelectedReportDetail,\r\n                                                                                                                operation: \"config\", ncontrolCode: configReportId,\r\n                                                                                                                screenName: \"IDS_REPORTDESIGN\", userInfo: this.props.Login.userInfo\r\n                                                                                                            })}>\r\n                                                                                                            {/* <FontAwesomeIcon icon={faCog} name=\"configreporticon\"\r\n                                                                                                                    title={this.props.intl.formatMessage({id:\"IDS_CONFIGREPORT\"})}/> */}\r\n\r\n                                                                                                            <ParameterConfigurationIcon className=\"custom_icons\" width=\"20\" height=\"20\"\r\n                                                                                                                name=\"configreporticon\" />\r\n                                                                                                            { }\r\n                                                                                                        </Nav.Link>\r\n                                                                                                        <Nav.Link name=\"parametermappinglink\"\r\n                                                                                                            data-tip={this.props.intl.formatMessage({ id: \"IDS_PARAMETERMAPPING\" })}\r\n                                                                                                            hidden={this.state.userRoleControlRights.indexOf(parameterMapId) === -1}\r\n                                                                                                            className=\"btn btn-circle outline-grey mr-2 \"\r\n                                                                                                            onClick={() => this.props.getParameterMappingComboService({\r\n                                                                                                                reportMaster: this.props.Login.masterData.SelectedReportMaster,\r\n                                                                                                                reportDetail: this.props.Login.masterData.SelectedReportDetail,\r\n                                                                                                                operation: \"create\", ncontrolCode: parameterMapId,\r\n                                                                                                                userInfo: this.props.Login.userInfo,\r\n                                                                                                                screenName: \"IDS_PARAMETERMAPPING\"\r\n                                                                                                            })}>\r\n                                                                                                            {/* <FontAwesomeIcon icon={faLink} name=\"mappingreporticon\"\r\n                                                                                                                    title={this.props.intl.formatMessage({id:\"IDS_PARAMETERMAPPING\"})}/> */}\r\n\r\n                                                                                                            <ParameterMappingIcon className=\"custom_icons\" width=\"20\" height=\"20\"\r\n                                                                                                                name=\"mappingreporticon\" />\r\n                                                                                                            { }\r\n                                                                                                        </Nav.Link>\r\n                                                                                                    </ContentPanel>\r\n\r\n                                                                                                </>\r\n\r\n                                                                                                    : \"\"}\r\n                                                                                                <Nav.Link name=\"approvereportlink\"\r\n                                                                                                    data-tip={this.props.intl.formatMessage({ id: \"IDS_APPROVEREPORT\" })}\r\n                                                                                                    hidden={this.state.userRoleControlRights.indexOf(approveReportId) === -1}\r\n                                                                                                    className=\"btn btn-circle outline-grey mr-2 action-icons-wrap\"\r\n                                                                                                    onClick={() => this.approveReport(approveReportId)}>\r\n                                                                                                    <FontAwesomeIcon icon={faThumbsUp} name=\"approvereporticon\" />\r\n                                                                                                </Nav.Link>\r\n                                                                                            </div>\r\n                                                                                        </Col>\r\n                                                                                    </Row>\r\n\r\n<Row>\r\n                            <Col md={3} className='report-designer-version' style={{ paddingRight: '0' }}>\r\n                                                    {/* Start of version column */}\r\n                                                    \r\n                                    <PerfectScrollbar>\r\n                                        <div>\r\n                                        <TransactionListMaster\r\n                                                        masterList={this.props.Login.masterData.ReportDetails || []}\r\n                                                        needMultiSelect={false}\r\n                                                        selectedMaster={[this.props.Login.masterData.SelectedReportDetail]}\r\n                                                        primaryKeyField=\"nreportdetailcode\"\r\n                                                        getMasterDetail={this.props.getSelectedReportDetail}\r\n                                                        inputParam={{\r\n                                                            userInfo: this.props.Login.userInfo,\r\n                                                            masterData: this.props.Login.masterData\r\n                                                        }}\r\n                                                        mainField={\"sversionno\"}\r\n                                                        mainFieldLabel={this.props.intl.formatMessage({ id: \"IDS_VERSION\" })}\r\n                                                        selectedListName=\"SelectedReportDetail\"\r\n                                                        objectName=\"ReportMaster\"\r\n                                                        listName=\"IDS_REPORTDETAILS\"\r\n                                                        hideSearch={true}\r\n                                                        subFields={[\r\n                                                            { [designProperties.VALUE]: \"sdisplaystatus\", [designProperties.COLOUR]: \"Color\" }\r\n                                                        ]}\r\n                                                        needValidation={false}\r\n                                                        needFilter={false}\r\n                                                        moreField={[]}\r\n                                                        skip={this.state.detailSkip}\r\n                                                        take={this.state.detailTake}\r\n                                                        hidePaging={true}\r\n                                                        handlePageChange={this.handleDetailPageChange}\r\n                                                        splitModeClass={this.state.splitChangeWidthPercentage && this.state.splitChangeWidthPercentage > 50 ? 'split-mode' : this.state.splitChangeWidthPercentage > 40 ? 'split-md' : ''}\r\n                                                        actionIcons={\r\n                                                            [\r\n                                                                {\r\n                                                                    title: this.props.intl.formatMessage({ id: \"IDS_EDIT\" }),\r\n                                                                    controlname: \"faPencilAlt\",\r\n                                                                    objectName: \"detailtoedit\",\r\n                                                                    hidden: this.state.userRoleControlRights.indexOf(editDetailId) === -1,\r\n                                                                    inputData: {\r\n                                                                        primaryKeyName: \"nreportdetailcode\",\r\n                                                                        operation: \"update\",\r\n                                                                        masterData: this.props.Login.masterData,\r\n                                                                        userInfo: this.props.Login.userInfo,\r\n                                                                        screenName: \"IDS_REPORTVERSION\",\r\n                                                                        ncontrolcode: editDetailId,\r\n                                                                    },\r\n                                                                    onClick: (props) => confirmMessage.confirm(\r\n                                                                        \"editDetailMessage\",\r\n                                                                        this.props.intl.formatMessage({ id: \"IDS_EDIT\" }),\r\n                                                                        this.props.intl.formatMessage({ id: \"IDS_EDITDETAILCONFIRMMSG\" }),\r\n                                                                        this.props.intl.formatMessage({ id: \"IDS_OK\" }),\r\n                                                                        this.props.intl.formatMessage({ id: \"IDS_CANCEL\" }),\r\n                                                                        () => this.props.getReportDetailComboService(props)\r\n                                                                    ),\r\n                                                                },\r\n                                                                {\r\n                                                                    title: this.props.intl.formatMessage({ id: \"IDS_DELETE\" }),\r\n                                                                    controlname: \"faTrashAlt\",\r\n                                                                    objectName: \"mastertodelete\",\r\n                                                                    hidden: this.state.userRoleControlRights.indexOf(deleteDetailId) === -1,\r\n                                                                    onClick: (props) => confirmMessage.confirm(\r\n                                                                        \"deleteMessage\",\r\n                                                                        this.props.intl.formatMessage({ id: \"IDS_DELETE\" }),\r\n                                                                        this.props.intl.formatMessage({ id: \"IDS_DEFAULTCONFIRMMSG\" }),\r\n                                                                        this.props.intl.formatMessage({ id: \"IDS_OK\" }),\r\n                                                                        this.props.intl.formatMessage({ id: \"IDS_CANCEL\" }),\r\n                                                                        () => this.deleteReport(props)\r\n                                                                    ),\r\n                                                                    inputData: {\r\n                                                                        primaryKeyName: \"nreportdetailcode\",\r\n                                                                        operation: \"delete\",\r\n                                                                        masterData: this.props.Login.masterData,\r\n                                                                        userInfo: this.props.Login.userInfo,\r\n                                                                        screenName: \"IDS_REPORTVERSION\",\r\n                                                                        listName: \"reportdetails\",\r\n                                                                        ncontrolCode: deleteDetailId, methodUrl: \"ReportDetails\"\r\n                                                                    }\r\n                                                                }\r\n                                                            ]\r\n                                                        }\r\n                                                        commonActions={\r\n                                                            <ProductList className=\"d-flex product-category float-right\">\r\n                                                                <Button className=\"btn btn-icon-rounded btn-circle solid-blue\" role=\"button\"\r\n                                                                    data-tip={this.props.intl.formatMessage({ id: \"IDS_ADD\" })}\r\n                                                                    hidden={this.state.userRoleControlRights.indexOf(addDetailId) === -1}\r\n                                                                    onClick={() => this.props.getReportDetailComboService(addDetailParam)}>\r\n                                                                    <FontAwesomeIcon icon={faPlus} title={this.props.intl.formatMessage({ id: \"IDS_ADD\" })} />\r\n                                                                </Button>\r\n\r\n                                                            </ProductList>\r\n                                                        }\r\n                                                    />\r\n                                        </div>\r\n                                                   \r\n                                                    </PerfectScrollbar>\r\n                                                    {/* End of version column */}\r\n                                                </Col>\r\n\r\n                                                <Col md={9}>\r\n                                                                                    <Row>\r\n                                                                                        <Col md={4}>\r\n                                                                                            <FormGroup>\r\n                                                                                                <FormLabel><FormattedMessage id=\"IDS_REPORTNAME\" message=\"Report Name\" /></FormLabel>\r\n                                                                                                <ReadOnlyText>{this.props.Login.masterData.SelectedReportMaster.sreportname}</ReadOnlyText>\r\n                                                                                            </FormGroup>\r\n                                                                                        </Col>\r\n                                                                                        <Col md={4}>\r\n                                                                                            <FormGroup>\r\n                                                                                                <FormLabel><FormattedMessage id=\"IDS_REPORTTYPE\" message=\"Report Type\" /></FormLabel>\r\n                                                                                                <ReadOnlyText>{this.props.Login.masterData.SelectedReportMaster.sreportdisplayname}</ReadOnlyText>\r\n                                                                                            </FormGroup>\r\n                                                                                        </Col>\r\n                                                                                        {//this.props.Login.masterData.SelectedReportMaster.nreporttypecode === reportTypeEnum.SAMPLE\r\n                                                                                            //   || this.props.Login.masterData.SelectedReportMaster.nreporttypecode === reportTypeEnum.COA ?\r\n                                                                                            this.props.Login.masterData.SelectedReportMaster.isneedregtype === transactionStatus.YES ?\r\n                                                                                                <>\r\n                                                                                                    <Col md={4}>\r\n                                                                                                        <FormGroup>\r\n                                                                                                            <FormLabel><FormattedMessage id=\"IDS_SAMPLETYPE\" message=\"Sample Type\" /></FormLabel>\r\n                                                                                                            <ReadOnlyText>{this.props.Login.masterData.SelectedReportMaster.ssampletypename}</ReadOnlyText>\r\n                                                                                                        </FormGroup>\r\n                                                                                                    </Col>\r\n                                                                                                    <Col md={4}>\r\n                                                                                                        <FormGroup>\r\n                                                                                                            <FormLabel><FormattedMessage id=\"IDS_REGTYPE\" message=\"Registration Type\" /></FormLabel>\r\n                                                                                                            <ReadOnlyText>{this.props.Login.masterData.SelectedReportMaster.sregtypename}</ReadOnlyText>\r\n                                                                                                        </FormGroup>\r\n                                                                                                    </Col>\r\n                                                                                                    <Col md={4}>\r\n                                                                                                        <FormGroup>\r\n                                                                                                            <FormLabel><FormattedMessage id=\"IDS_REGSUBTYPE\" message=\"Registration Sub Type\" /></FormLabel>\r\n                                                                                                            <ReadOnlyText>{ }\r\n                                                                                                                {this.props.Login.masterData.SelectedReportMaster.nregsubtypecode === -1 ?\r\n                                                                                                                    '-' : this.props.Login.masterData.SelectedReportMaster.sregsubtypename}\r\n                                                                                                            </ReadOnlyText>\r\n                                                                                                        </FormGroup>\r\n                                                                                                    </Col>\r\n                                                                                                    <Col md={4}>\r\n                                                                                                        <FormGroup>\r\n                                                                                                            <FormLabel><FormattedMessage id=\"IDS_APPROVECONFIGVERSION\" message=\"Approve COnfig Version\" /></FormLabel>\r\n                                                                                                            <ReadOnlyText>{ }\r\n                                                                                                                {this.props.Login.masterData.SelectedReportMaster.nregsubtypecode === -1 ?\r\n                                                                                                                    '-' : this.props.Login.masterData.SelectedReportMaster.sapproveversionname &&\r\n                                                                                                                    this.props.Login.masterData.SelectedReportMaster.sapproveversionname}\r\n                                                                                                            </ReadOnlyText>\r\n                                                                                                        </FormGroup>\r\n                                                                                                    </Col>\r\n                                                                                                </> : \"\"}\r\n                                                                                        {/* {this.props.Login.masterData.SelectedReportMaster.isneedsection === transactionStatus.YES ?\r\n                                                                                            <>\r\n                                                                                                <Col md={4}>\r\n                                                                                                    <FormGroup>\r\n                                                                                                        <FormLabel><FormattedMessage id=\"IDS_LAB\" message=\"Section\" /></FormLabel>\r\n                                                                                                        <ReadOnlyText>\r\n                                                                                                            {this.props.Login.masterData.SelectedReportMaster.nsectioncode === -1 ?\r\n                                                                                                                '-' : this.props.Login.masterData.SelectedReportMaster.ssectionname}\r\n                                                                                                        </ReadOnlyText>\r\n                                                                                                    </FormGroup>\r\n                                                                                                </Col>\r\n                                                                                            </>\r\n                                                                                            : \"\"} */}\r\n                                                                                            {this.props.Login.masterData.SelectedReportMaster.isneedsection === transactionStatus.YES && \r\n                                                                                            <Col md={4}>\r\n                                                                                                <FormGroup>\r\n                                                                                                    <FormLabel><FormattedMessage id=\"IDS_SECTION\" message=\"Section\" /></FormLabel>\r\n                                                                                                    <ReadOnlyText>{this.props.Login.masterData.SelectedReportMaster.nsectioncode !== -1 ? this.props.Login.masterData.SelectedReportMaster.ssectionname : '-'}</ReadOnlyText>\r\n                                                                                                </FormGroup>\r\n                                                                                            </Col>\r\n                                                                                            }\r\n                                                                                        {this.props.Login.masterData.SelectedReportMaster.nreporttypecode !== reportTypeEnum.MIS\r\n                                                                                            && this.props.Login.masterData.SelectedReportMaster.nreporttypecode !== reportTypeEnum.SCREENWISE ?\r\n                                                                                            <Col md={4}>\r\n                                                                                                <FormGroup>\r\n                                                                                                    <FormLabel><FormattedMessage id=\"IDS_REPORTSUBTYPE\" message=\"Report Sub Type\" /></FormLabel>\r\n                                                                                                    <ReadOnlyText>{this.props.Login.masterData.SelectedReportMaster.scoareporttypename}</ReadOnlyText>\r\n                                                                                                </FormGroup>\r\n                                                                                            </Col>\r\n\r\n                                                                                            : \"\"}\r\n                                                                                        {/* {this.props.Login.masterData.SelectedReportMaster.nreporttypecode && this.props.Login.masterData.SelectedReportMaster.nreporttypecode === reportTypeEnum.COA && this.props.Login.masterData.SelectedReportMaster.ncoareporttypecode && this.props.Login.masterData.SelectedReportMaster.ncoareporttypecode === reportCOAType.PROJECTWISE || this.props.Login.masterData.SelectedReportMaster.nreporttypecode === reportTypeEnum.COAPREVIEW && this.props.Login.masterData.SelectedReportMaster.ncoareporttypecode && this.props.Login.masterData.SelectedReportMaster.ncoareporttypecode === reportCOAType.PROJECTWISE\r\n                                                                                            || this.props.Login.masterData.SelectedReportMaster.nreporttypecode === reportTypeEnum.COAPRELIMINARY && this.props.Login.masterData.SelectedReportMaster.ncoareporttypecode && this.props.Login.masterData.SelectedReportMaster.ncoareporttypecode === reportCOAType.PROJECTWISE ? */}\r\n                                                                                            <Col md={4}>\r\n                                                                                                <FormGroup>\r\n                                                                                                    <FormLabel><FormattedMessage id=\"IDS_REPORTTEMPLATE\" message=\"Report Template\" /></FormLabel>\r\n                                                                                                    <ReadOnlyText>{this.props.Login.masterData.SelectedReportMaster.sreporttemplatename}</ReadOnlyText>\r\n                                                                                                </FormGroup>\r\n                                                                                            </Col>\r\n\r\n                                                                                            {/* : \"\"} */}\r\n                                                                                        {/* {this.props.Login.masterData.SelectedReportMaster.nreporttypecode === reportTypeEnum.SAMPLE ?\r\n                                                                                                        <Col md={4}>\r\n                                                                                                                <FormGroup>\r\n                                                                                                                    <FormLabel><FormattedMessage id=\"IDS_DECISIONTYPE\" message=\"Decision Type\" /></FormLabel>\r\n                                                                                                                    <ReadOnlyText>{this.props.Login.masterData.SelectedReportMaster.sdecisiontypename}</ReadOnlyText>\r\n                                                                                                                </FormGroup>\r\n                                                                                                            </Col>\r\n                                                                                                    :\"\"} */}\r\n                                                                                        {this.props.Login.masterData.SelectedReportMaster.nreporttypecode === reportTypeEnum.MIS ?\r\n                                                                                            <Col md={4}>\r\n                                                                                                <FormGroup>\r\n                                                                                                    <FormLabel><FormattedMessage id=\"IDS_MODULENAME\" message=\"Module Name\" /></FormLabel>\r\n                                                                                                    <ReadOnlyText>{this.props.Login.masterData.SelectedReportMaster.sreportmodulename}</ReadOnlyText>\r\n                                                                                                </FormGroup>\r\n                                                                                            </Col> : \"\"}\r\n\r\n                                                                                        {this.props.Login.masterData.SelectedReportMaster.nreporttypecode === reportTypeEnum.BATCH\r\n                                                                                            || this.props.Login.masterData.SelectedReportMaster.nreporttypecode === reportTypeEnum.SAMPLE ?\r\n                                                                                            <><Col md={4}>\r\n                                                                                                <FormGroup>\r\n                                                                                                    <FormLabel><FormattedMessage id=\"IDS_CERTIFICATETYPE\" message=\"Certificate Type\" /></FormLabel>\r\n                                                                                                    <ReadOnlyText>{this.props.Login.masterData.SelectedReportMaster.scertificatetype}</ReadOnlyText>\r\n                                                                                                </FormGroup>\r\n                                                                                            </Col>\r\n                                                                                                <Col md={4}>\r\n                                                                                                    <FormGroup>\r\n                                                                                                        <FormLabel><FormattedMessage id=\"IDS_REPORTBATCHTYPE\" message=\"Report Batch Type\" /></FormLabel>\r\n                                                                                                        <ReadOnlyText>{this.props.Login.masterData.SelectedReportMaster.sbatchdisplayname}</ReadOnlyText>\r\n                                                                                                    </FormGroup>\r\n                                                                                                </Col> </>\r\n                                                                                            : \"\"}\r\n\r\n                                                                                        {this.props.Login.masterData.SelectedReportMaster.nreporttypecode === reportTypeEnum.SCREENWISE ?\r\n                                                                                            <><Col md={4}>\r\n                                                                                                <FormGroup>\r\n                                                                                                    <FormLabel><FormattedMessage id=\"IDS_SCREENNAME\" message=\"Screen Name\" /></FormLabel>\r\n                                                                                                    <ReadOnlyText>{this.props.Login.masterData.SelectedReportMaster.sdisplayname}</ReadOnlyText>\r\n                                                                                                </FormGroup>\r\n                                                                                            </Col>\r\n                                                                                                <Col md={4}>\r\n                                                                                                    <FormGroup>\r\n                                                                                                        <FormLabel><FormattedMessage id=\"IDS_CONTROLNAME\" message=\"Control Name\" /></FormLabel>\r\n                                                                                                        <ReadOnlyText>{this.props.Login.masterData.SelectedReportMaster.scontrolids}</ReadOnlyText>\r\n                                                                                                    </FormGroup>\r\n                                                                                                </Col> </>\r\n                                                                                            : \"\"}\r\n\r\n                                                                                        {/* <Col md={4}>\r\n                                                                                        <FormGroup>\r\n                                                                                            <FormLabel><FormattedMessage id=\"IDS_STATUS\" message=\"Status\"/></FormLabel>\r\n                                                                                            <ReadOnlyText>{this.props.Login.masterData.SelectedReportMaster.sactivestatus}</ReadOnlyText>\r\n                                                                                        </FormGroup>\r\n                                                                                    </Col>                                                                                     */}\r\n\r\n                                                                                    </Row>\r\n                                                                                    {this.props.Login.masterData.SelectedReportDetail &&\r\n                                                                                        <Row>\r\n                                                \r\n                                                                                            {/* {this.props.Login.masterData.SelectedReportMaster.nreporttypecode !== reportTypeEnum.MIS && this.props.Login.masterData.SelectedReportMaster.nreporttypecode !== reportTypeEnum.SCREENWISE ?\r\n                                                                                                        <Col md={4}>\r\n                                                                                                            <FormGroup>\r\n                                                                                                                <FormLabel><FormattedMessage id=\"IDS_REPORTSUBTYPE\" message=\"Report Sub Type\" /></FormLabel>\r\n                                                                                                                <ReadOnlyText>{this.props.Login.masterData.SelectedReportDetail.scoareporttypename}</ReadOnlyText>\r\n                                                                                                            </FormGroup>\r\n                                                                                                        </Col>\r\n                                                                                                     \r\n                                                                                                    : \"\"} */}\r\n\r\n                                                                                            {/* {this.props.Login.masterData.SelectedReportMaster.nreporttypecode === reportTypeEnum.SAMPLE ?\r\n                                                                                                        <>\r\n                                                                                                        <Col md={4}>\r\n                                                                                                                <FormGroup>\r\n                                                                                                                    <FormLabel><FormattedMessage id=\"IDS_DECISIONTYPE\" message=\"Decision Type\" /></FormLabel>\r\n                                                                                                                    <ReadOnlyText>{this.props.Login.masterData.SelectedReportDetail.sdecisiontypename}</ReadOnlyText>\r\n                                                                                                                </FormGroup>\r\n                                                                                                            </Col>\r\n                                                                                                            <Col md={4}>\r\n                                                                                                                <FormGroup>\r\n                                                                                                                    <FormLabel><FormattedMessage id=\"IDS_LAB\" message=\"Section\" /></FormLabel>\r\n                                                                                                                    <ReadOnlyText>\r\n                                                                                                                            {this.props.Login.masterData.SelectedReportDetail.nsectioncode === -1 ?\r\n                                                                                                                             '-' : this.props.Login.masterData.SelectedReportDetail.ssectionname}\r\n                                                                                                                    </ReadOnlyText>\r\n                                                                                                                </FormGroup>\r\n                                                                                                            </Col>\r\n                                                                                                         </>\r\n                                                                                                    : \"\"} */}\r\n                                                                                            {/* {this.props.Login.masterData.SelectedReportMaster.nreporttypecode === reportTypeEnum.BATCH ?\r\n                                                                                                            <><Col md={4}>\r\n                                                                                                                <FormGroup>\r\n                                                                                                                    <FormLabel><FormattedMessage id=\"IDS_CERTIFICATETYPE\" message=\"Certificate Type\" /></FormLabel>\r\n                                                                                                                    <ReadOnlyText>{this.props.Login.masterData.SelectedReportDetail.scertificatetype}</ReadOnlyText>\r\n                                                                                                                </FormGroup>\r\n                                                                                                            </Col> \r\n                                                                                                            <Col md={4}>\r\n                                                                                                            <FormGroup>\r\n                                                                                                                <FormLabel><FormattedMessage id=\"IDS_REPORTBATCHTYPE\" message=\"Report Batch Type\" /></FormLabel>\r\n                                                                                                                <ReadOnlyText>{this.props.Login.masterData.SelectedReportDetail.sbatchdisplayname}</ReadOnlyText>\r\n                                                                                                            </FormGroup>\r\n                                                                                                        </Col> </>\r\n                                                                                                    : \"\"} */}\r\n\r\n                                                                                            {/* {this.props.Login.masterData.SelectedReportMaster.nreporttypecode === reportTypeEnum.SCREENWISE ?\r\n                                                                                                            <><Col md={4}>\r\n                                                                                                                <FormGroup>\r\n                                                                                                                    <FormLabel><FormattedMessage id=\"IDS_SCREENNAME\" message=\"Screen Name\" /></FormLabel>\r\n                                                                                                                    <ReadOnlyText>{this.props.Login.masterData.SelectedReportDetail.sdisplayname}</ReadOnlyText>\r\n                                                                                                                </FormGroup>\r\n                                                                                                            </Col> \r\n                                                                                                            <Col md={4}>\r\n                                                                                                            <FormGroup>\r\n                                                                                                                <FormLabel><FormattedMessage id=\"IDS_CONTROLNAME\" message=\"Control Name\" /></FormLabel>\r\n                                                                                                                <ReadOnlyText>{this.props.Login.masterData.SelectedReportDetail.scontrolids}</ReadOnlyText>\r\n                                                                                                            </FormGroup>\r\n                                                                                                        </Col> </>\r\n                                                                                                    : \"\"} */}\r\n\r\n\r\n                                                                                            <Col md={4}>\r\n                                                                                                <FormGroup>\r\n                                                                                                    <FormLabel><FormattedMessage id=\"IDS_ISPLSQLQUERY\" message=\"Is PLSQL\" /></FormLabel>\r\n                                                                                                    <ReadOnlyText>{this.props.Login.masterData.SelectedReportDetail.splsqlquery}</ReadOnlyText>\r\n                                                                                                </FormGroup>\r\n                                                                                            </Col>\r\n                                                                                            <Col md={8}>\r\n                                                                                                <FormGroup>\r\n                                                                                                    <FormLabel><FormattedMessage id=\"IDS_FILE\" message=\"File\" /></FormLabel>\r\n                                                                                                    <ReadOnlyText>{this.props.Login.masterData.SelectedReportDetail.sfilename}</ReadOnlyText>\r\n                                                                                                </FormGroup>\r\n                                                                                            </Col>\r\n                                                                                            {/* <Col md={4}>\r\n                                                                                            <FormGroup>\r\n                                                                                                <FormLabel><FormattedMessage id=\"IDS_VERSIONSTATUS\" message=\"Version Status\"/></FormLabel>\r\n                                                                                                <ReadOnlyText>{this.props.Login.masterData.SelectedReportDetail.sdisplaystatus}</ReadOnlyText>\r\n                                                                                            </FormGroup>\r\n                                                                                        </Col> */}\r\n                                                                                        </Row>\r\n                                                                                    }\r\n                                                                                    <Row>\r\n                                                                                        <Col md={12}>\r\n                                                                                            <FormGroup>\r\n                                                                                                <FormLabel><FormattedMessage id=\"IDS_DESCRIPTION\" message=\"Description\" /></FormLabel>\r\n                                                                                                <ReadOnlyText>{this.props.Login.masterData.SelectedReportMaster.sdescription}</ReadOnlyText>\r\n                                                                                            </FormGroup>\r\n                                                                                        </Col>\r\n                                                                                    </Row>\r\n                                                                                    </Col>\r\n                                                                                    </Row>\r\n                                                                                </Card.Body>\r\n                                                                            </Card>\r\n                                                                        </Col>\r\n                                                                    </Row>\r\n                                                                }\r\n\r\n                                                            </Card.Body>\r\n                                                        </Card>\r\n                                                    </ContentPanel>\r\n                                                    {/* End of detailed content */}\r\n                                                    <Row>\r\n                                                <Col md={12}>\r\n                                                    {/* Start of tabs */}\r\n                                                    <ListWrapper>\r\n                                                        <ContentPanel className=\"panel-main-content\">\r\n                                                            <Card className=\"border-0\">\r\n                                                                <Card.Body className='p-1'>\r\n                                                                    <Row noGutters>\r\n                                                                        <Col md={12}>\r\n                                                                            {this.props.Login.masterData[\"ReportMaster\"] &&\r\n                                                                                <CustomTabs tabDetail={this.tabDetail()} onTabChange={this.onTabChange} />\r\n                                                                            }\r\n                                                                        </Col>\r\n                                                                    </Row>\r\n                                                                </Card.Body>\r\n                                                            </Card>\r\n                                                        </ContentPanel>\r\n                                                    </ListWrapper>\r\n                                                    {/* End of tabs */}\r\n                                                </Col>\r\n                                                \r\n                                            </Row>\r\n                                            </PerfectScrollbar>\r\n                                            </div>\r\n                                                </Col>\r\n                                            </Row>\r\n                                            \r\n                                        </div>\r\n                                        {/* End of second column */}\r\n\r\n                                </SplitterLayout>\r\n                                </>\r\n\r\n                            </SplitterLayout>\r\n                            {/* </ListWrapper > */}\r\n                        </Col>\r\n                    </Row>\r\n                </ListWrapper>\r\n                {/* Start of Modal Sideout for Creation */}\r\n                {/* Below Condition Added to avoid unwanted rendering of SlideOut */}\r\n                {this.props.Login.openModal ?\r\n                    <SlideOutModal show={this.props.Login.openModal}\r\n                        closeModal={this.closeModal}\r\n                        //size={'xl'}\r\n                        operation={this.props.Login.operation}\r\n                        inputParam={this.props.Login.inputParam}\r\n                        screenName={this.props.Login.screenName}\r\n                        onSaveClick={this.onSaveClick}\r\n                        esign={this.props.Login.loadEsign}\r\n                        validateEsign={this.validateEsign}\r\n                        masterStatus={this.props.Login.masterStatus}\r\n                        updateStore={this.props.updateStore}\r\n                        ignoreFormValidation={this.props.Login.screenName === \"IDS_REPORTDESIGN\" || this.props.Login.screenName === \"IDS_SUBREPORTS\"\r\n                            || this.props.Login.screenName === \"IDS_IMAGES\"}\r\n                        selectedRecord={this.state.selectedRecord || {}}\r\n                        mandatoryFields={mandatoryFields}\r\n                        addComponent={this.props.Login.loadEsign ?\r\n                            <Esign operation={this.props.Login.operation}\r\n                                //formatMessage={this.props.intl.formatMessage}\r\n                                onInputOnChange={this.onInputOnChange}\r\n                                inputParam={this.props.Login.inputParam}\r\n                                selectedRecord={this.state.selectedRecord || {}}\r\n                            />\r\n                            : this.props.Login.screenName === \"IDS_REPORTMASTER\" ?\r\n                                <AddReportMaster\r\n                                    selectedRecord={this.state.selectedRecord || {}}\r\n                                    onInputOnChange={this.onInputOnChange}\r\n                                    onComboChange={this.onComboChange}\r\n                                    reportTypeList={this.props.Login.reportTypeList || []}\r\n                                    coaReportTypeList={this.props.Login.reportSubTypeList || []}\r\n                                    certificateTypeList={this.props.Login.certificateTypeList || []}\r\n                                    sampleTypeList={this.props.Login.sampleTypeList || []}\r\n                                    regTypeList={this.props.Login.regTypeList || []}\r\n                                    regSubTypeList={this.props.Login.regSubTypeList || []}\r\n                                    //regType={this.props.Login.regType || []}\r\n                                    controlButton={this.props.Login.controlButton || []}\r\n                                    sectionList={this.props.Login.sectionList || []}\r\n                                    ApproveConfigList={this.props.Login.ApproveConfigList || []}\r\n                                    decisionTypeList={this.props.Login.reportDecisionTypeList || []}\r\n                                    controlScreen={this.props.Login.controlScreen || []}\r\n                                    reportModuleList={this.props.Login.reportModuleList || []}\r\n                                    operation={this.props.Login.operation}\r\n                                    inputParam={this.props.Login.inputParam}\r\n                                    onDropImage={this.onDropImage}\r\n                                    deleteFile={this.deleteFile}\r\n                                    actionType={this.state.actionType}\r\n                                    reportVersionStatus={this.props.Login.reportVersionStatus || transactionStatus.DRAFT}\r\n                                    filterReportType={this.props.Login.masterData.SelectedFilterReportType || {}}\r\n                                    reportTemplateList={this.props.Login.reportTemplateList || []}\r\n                                    settings={this.props.Login.settings}\r\n                                />\r\n                                : this.props.Login.screenName === \"IDS_REPORTVERSION\" ?\r\n                                    <AddReportDetail\r\n                                        selectedRecord={this.state.selectedRecord || {}}\r\n                                        onInputOnChange={this.onInputOnChange}\r\n                                        onComboChange={this.onComboChange}\r\n                                        //coaReportTypeList={this.props.Login.reportSubTypeList || []}\r\n                                        // certificateTypeList={this.props.Login.certificateTypeList || []}\r\n                                        // sectionList={this.props.Login.sectionList || []}\r\n                                        // decisionTypeList={this.props.Login.reportDecisionTypeList || []}\r\n                                        reportMaster={this.props.Login.masterData.SelectedReportMaster || {}}\r\n                                        operation={this.props.Login.operation}\r\n                                        inputParam={this.props.Login.inputParam}\r\n                                        onDropImage={this.onDropImage}\r\n                                        deleteFile={this.deleteFile}\r\n                                        actionType={this.state.actionType}\r\n                                    />\r\n                                    : this.props.Login.screenName === \"IDS_REPORTDESIGN\" ?\r\n                                        <AddDesign\r\n                                            operation={this.props.Login.operation}\r\n                                            selectedReportMaster={this.props.Login.masterData.SelectedReportMaster || {}}\r\n                                            reportParameterList={this.props.Login.reportParameterList || []}\r\n                                            designComponentList={this.props.Login.designComponentList || []}\r\n                                            sqlQueryList={this.props.Login.sqlQueryList || []}\r\n                                            onInputOnChange={this.onInputOnChange}\r\n                                            handleChange={this.onComboChange}\r\n                                            selectedRecord={this.state.selectedRecord || {}}\r\n                                            //handleChange={this.handleChangeDesign}\r\n                                            gridPrimaryKey={\"nreportdesigncode\"}\r\n                                            designName={this.props.Login.masterData.SelectedReportMaster.sreportname || \"\"}\r\n                                            addDesignParam={this.state.addDesignParam || this.props.Login.masterData.ReportDesignConfig}\r\n                                            gridData={this.state.gridData || this.props.Login.masterData.ReportDesignConfig}\r\n                                            addParametersInDataGrid={this.addParametersInDataGrid}\r\n                                            deleteRecordWORights={this.removeParametersInDataGrid}\r\n                                            inputColumnList={this.designInputFieldList}\r\n                                            gridColumnList={this.designGridColumnList}\r\n                                            controlMap={this.state.controlMap}\r\n                                            userRoleControlRights={this.state.userRoleControlRights}\r\n                                        />\r\n                                        : this.props.Login.screenName === \"IDS_PARAMETERMAPPING\" ?\r\n                                            <ParameterMapping\r\n                                                operation={this.props.Login.operation}\r\n                                                parentComponentList={this.props.Login.parentComponentList || []}\r\n                                                childComponentList={this.props.Login.childComponentList || []}\r\n                                                optionalParameterList={this.state.optionalParameterList || []}\r\n                                                onInputOnChange={this.onInputOnChange}\r\n                                                handleChange={this.onComboChange}\r\n                                                selectedRecord={this.state.selectedRecord || {}}\r\n                                                addMappingParam={this.state.addMappingParam || this.props.Login.masterData.ReportParameterMapping}\r\n                                                mappingGridData={this.state.mappingGridData || this.props.Login.masterData.ReportParameterMapping}\r\n                                                addParametersInDataGrid={this.bindMappingParametersToDataGrid}\r\n                                                deleteRecordWORights={this.unbindMappingParametersFromDataGrid}\r\n                                                inputColumnList={this.mappingInputFieldList}\r\n                                                mappingGridColumnList={this.mappingGridFieldList}\r\n                                                controlMap={this.state.controlMap}\r\n                                                userRoleControlRights={this.state.userRoleControlRights}\r\n                                                detailedFieldList={this.detailedGridFieldList}\r\n                                                bindActionParameter={this.bindActionParameter}\r\n                                            />\r\n                                            : this.props.Login.screenName === \"IDS_SUBREPORTS\" || this.props.Login.screenName === \"IDS_IMAGES\" ?\r\n                                                <AddAttachment\r\n                                                    operation={this.props.Login.operation}\r\n                                                    selectedRecord={this.state.selectedRecord || {}}\r\n                                                    onDropImage={this.onDropImage}\r\n                                                    deleteFile={this.deleteFile}\r\n                                                    actionType={this.state.actionType}\r\n                                                    attachmentType={this.props.Login.screenName === \"IDS_SUBREPORTS\" ? \".jrxml\" : \"image/*\"}\r\n                                                />\r\n                                                : this.props.Login.screenName === \"IDS_REPORTVALIDATION\" ?\r\n                                                    <AddReportValidation\r\n                                                        selectedRecord={this.state.selectedRecord || {}}\r\n                                                        onInputOnChange={this.onInputOnChange}\r\n                                                        onComboChange={this.onComboChange}\r\n                                                        reportTypeList={this.props.Login.reportTypeList}\r\n                                                        onClick={() => this.openModal(\"IDS_REPORTVALIDATION\")}\r\n                                                        reportMaster={this.props.Login.masterData.SelectedReportMaster || {}}\r\n                                                        operation={this.props.Login.operation}\r\n                                                        inputParam={this.props.Login.inputParam}\r\n                                                        deleteFile={this.deleteFile}\r\n                                                        actionType={this.state.actionType}\r\n                                                    />\r\n                                                    : this.props.Login.screenName === \"IDS_REPORTPARAMETERMAPPING\" ?\r\n                                                        <AddReportParameters\r\n                                                            operation={this.props.Login.operation}\r\n                                                            selectedRecord={this.state.selectedRecord || {}}\r\n                                                            onInputOnChange={this.onInputOnChange}\r\n                                                            onComboChange={this.onComboChange}\r\n                                                            gridPrimaryKey={\"controlbasedKey\"}\r\n                                                            addDesignParameter={this.state.addDesignParameter}\r\n                                                            gridDataparmeter={this.state.gridDataparmeter && this.state.gridDataparmeter.length > 0 ? (this.state.gridDataparmeter || []) : (this.props.Login.ParameterMappingDatagrid || [])}\r\n                                                            //dataResult={this.props.Login.masterData[\"ParameterMapping\"] }\r\n                                                            addreportParametersInDataGrid={this.addreportParametersInDataGrid}\r\n                                                            deleteRecordWORights={this.removereportParametersInDataGrid}\r\n                                                            gridColumnList={this.reportparametermappingcolumndatagrid || []}\r\n                                                            userinfo={this.props.Login.userInfo}\r\n                                                            reportTypeListparameter={this.state.reportTypeListparameter}\r\n                                                            reportTypeListName={this.state.reportTypeListName || []}\r\n                                                            reportTypeListColumn={this.state.reportTypeListColumn || []}\r\n                                                            onClick={() => this.openModal(\"IDS_REPORTPARAMETERMAPPING\")}\r\n                                                            masterData={this.props.Login.masterData || {}}\r\n                                                            inputParam={this.props.Login.inputParam}\r\n                                                            deleteFile={this.deleteFile}\r\n                                                            actionType={this.state.actionType}\r\n                                                            controlMap={this.state.controlMap}\r\n                                                            userRoleControlRights={this.state.userRoleControlRights}\r\n                                                        //coaReportTypeList={this.props.Login.reportSubTypeList || []}\r\n                                                        // certificateTypeList={this.props.Login.certificateTypeList || []}\r\n                                                        // sectionList={this.props.Login.sectionList || []}\r\n                                                        // decisionTypeList={this.props.Login.reportDecisionTypeList || []}\r\n                                                        /> :\r\n                                                        \"\"\r\n                        }\r\n                    /> : \"\"}\r\n                {/* End of Modal Sideout for Creation */}\r\n            </>\r\n\r\n        );\r\n    }\r\n\r\n    handleMasterPageChange = e => {\r\n        this.setState({\r\n            skip: e.skip,\r\n            take: e.take\r\n        });\r\n    };\r\n\r\n    handleDetailPageChange = e => {\r\n        this.setState({\r\n            skip: e.skip,\r\n            take: e.take\r\n        });\r\n    };\r\n\r\n    componentDidUpdate(previousProps) {\r\n        if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\r\n            this.setState({ selectedRecord: this.props.Login.selectedRecord });\r\n        }\r\n        // if (this.props.Login.reportTypeListparameter !== previousProps.Login.reportTypeListparameter) {\r\n        //     this.props.Login.reportTypeListName= [];\r\n        //     this.props.Login.reportTypeListColumn= [];\r\n\r\n        // }\r\n\r\n\r\n        if (this.props.Login.reportTypeListparameter !== previousProps.Login.reportTypeListparameter) {\r\n            this.setState({ reportTypeListparameter: this.props.Login.reportTypeListparameter });\r\n        }\r\n\r\n        // if (this.props.Login.reportTypeListColumn !== previousProps.Login.reportTypeListColumn) {\r\n        //     this.setState({ reportTypeListColumn: this.props.Login.reportTypeListColumn });\r\n        // }\r\n\r\n        if (this.props.Login.reportTypeListName !== previousProps.Login.reportTypeListName) {\r\n            this.setState({ reportTypeListName: this.props.Login.reportTypeListName });\r\n        }\r\n\r\n\r\n        if (this.props.Login.ParameterMappingDatagrid !== previousProps.Login.ParameterMappingDatagrid) {\r\n\r\n            this.setState({ gridDataparmeter: this.props.Login.ParameterMappingDatagrid });\r\n\r\n        }\r\n        if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\r\n            const userRoleControlRights = [];\r\n            if (this.props.Login.userRoleControlRights) {\r\n                this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item =>\r\n                    userRoleControlRights.push(item.ncontrolcode))\r\n            }\r\n            const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode)\r\n\r\n            const addDesignParam = [];\r\n            const gridData = [];\r\n\r\n            this.props.Login.masterData.ReportDesignConfig &&\r\n                this.props.Login.masterData.ReportDesignConfig.forEach(item => {\r\n                    addDesignParam.push({ ...item });\r\n                    gridData.push({ ...item });\r\n                });\r\n\r\n            //     const addDesignParameter = [];\r\n            // //     const gridDataparmeter = [];\r\n\r\n            //     this.props.Login.reportTypeListparameter &&\r\n            //     this.props.Login.reportTypeListparameter.forEach(item => {\r\n            //         addDesignParameter.push({ ...item });\r\n            //         //gridDataparmeter.push({ ...item });\r\n            //     });\r\n\r\n            const addMappingParam = [];\r\n            const mappingGridData = [];\r\n\r\n            this.props.Login.masterData.ReportParameterMapping &&\r\n                this.props.Login.masterData.ReportParameterMapping.forEach(item => {\r\n                    addMappingParam.push({ ...item });\r\n                    mappingGridData.push({ ...item });\r\n                });\r\n\r\n            const reportTypeMap = constructOptionList(this.props.Login.masterData.ReportTypeList || [], \"nreporttypecode\",\r\n                \"sdisplayname\", undefined, undefined, true);\r\n            const reportTypeList = reportTypeMap.get(\"OptionList\");\r\n            const filterData = this.generateBreadCrumData();\r\n            let skip = this.state.skip;\r\n            let take = this.state.take;\r\n            if (reportTypeList.length < take) {\r\n                skip = 0;\r\n                take = take;\r\n            }\r\n\r\n            this.setState({\r\n                reportTypeList, filterData,\r\n                userRoleControlRights, controlMap, addDesignParam, gridData,\r\n                addMappingParam, mappingGridData,// addActionParam, \r\n                // actionGridData\r\n                skip, take\r\n            });\r\n        }\r\n        else {\r\n            if (this.props.Login.masterData !== previousProps.Login.masterData) {\r\n\r\n                const filterData = this.generateBreadCrumData();\r\n                const reportTypeMap = constructOptionList(this.props.Login.masterData.ReportTypeList || [], \"nreporttypecode\",\r\n                    \"sdisplayname\", undefined, undefined, true);\r\n                const reportTypeList = reportTypeMap.get(\"OptionList\");\r\n\r\n                const addDesignParam = [];\r\n                const gridData = [];\r\n\r\n                this.props.Login.masterData.ReportDesignConfig &&\r\n                    this.props.Login.masterData.ReportDesignConfig.forEach(item => {\r\n                        addDesignParam.push({ ...item });\r\n                        gridData.push({ ...item });\r\n                    });\r\n\r\n                const addMappingParam = [];\r\n                const mappingGridData = [];\r\n\r\n                this.props.Login.masterData.ReportParameterMapping &&\r\n                    this.props.Login.masterData.ReportParameterMapping.forEach(item => {\r\n                        addMappingParam.push({ ...item });\r\n                        mappingGridData.push({ ...item });\r\n                    });\r\n                let skip = this.state.skip;\r\n                let take = this.state.take;\r\n                if (reportTypeList.length < take) {\r\n                    skip = 0;\r\n                    take = take;\r\n                }\r\n\r\n                this.setState({\r\n                    reportTypeList, filterData,\r\n                    addDesignParam, gridData, addMappingParam, mappingGridData, skip, take\r\n                });\r\n\r\n            }\r\n        }\r\n    }\r\n\r\n    generateBreadCrumData() {\r\n        const breadCrumbData = [];\r\n        if (this.props.Login.masterData && this.props.Login.masterData.SelectedFilterReportType) {\r\n\r\n            breadCrumbData.push(\r\n\r\n                {\r\n                    \"label\": \"IDS_REPORTTYPE\",\r\n                    \"value\": this.props.Login.masterData.SelectedFilterReportType ?\r\n                        this.props.intl.formatMessage({ id: this.props.Login.masterData.SelectedFilterReportType.sdisplayname }) : \"\"\r\n                }\r\n            );\r\n        }\r\n        return breadCrumbData;\r\n    }\r\n\r\n    openFilter = () => {\r\n        let showFilter = !this.props.Login.showFilter\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { showFilter }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    closeFilter = () => {\r\n\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { showFilter: false }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    onFilterSubmit = () => {\r\n\r\n        this.searchRef.current.value = \"\";\r\n        const inputParam = {\r\n            inputData: {\r\n                \"userinfo\": this.props.Login.userInfo,\r\n                nreporttypecode: this.state.selectedRecord[\"filterreporttypecode\"] ?\r\n                    String(this.state.selectedRecord[\"filterreporttypecode\"].value) : 0\r\n            },\r\n            classUrl: \"reportconfig\",\r\n            methodUrl: \"ReportDesigner\",\r\n            userInfo: this.props.Login.userInfo,\r\n            displayName: \"IDS_REPORTDESIGNER\"\r\n        };\r\n\r\n        this.props.callService(inputParam);\r\n\r\n    }\r\n\r\n    onTabChange = (tabProps) => {\r\n        const screenName = tabProps.screenName;\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { screenName }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    tabDetail = () => {\r\n        const tabMap = new Map();\r\n        const addSubReportId = this.state.controlMap.has(\"AddSubReportDetails\") && this.state.controlMap.get(\"AddSubReportDetails\").ncontrolcode;\r\n        const deleteSubReportId = this.state.controlMap.has(\"DeleteSubReportDetails\") && this.state.controlMap.get(\"DeleteSubReportDetails\").ncontrolcode;\r\n\r\n        const addImageId = this.state.controlMap.has(\"AddReportImages\") && this.state.controlMap.get(\"AddReportImages\").ncontrolcode;\r\n        const deleteImageId = this.state.controlMap.has(\"DeleteReportImages\") && this.state.controlMap.get(\"DeleteReportImages\").ncontrolcode;\r\n        const addValidationId = this.state.controlMap.has(\"AddReportValidation\") && this.state.controlMap.get(\"AddReportValidation\").ncontrolcode;\r\n        const deleteValidationId = this.state.controlMap.has(\"DeleteValidation\") && this.state.controlMap.get(\"DeleteValidation\").ncontrolcode;\r\n        const addParameterMapping = this.state.controlMap.has(\"AddParameterMapping\") && this.state.controlMap.get(\"AddParameterMapping\").ncontrolcode;\r\n        //const deleteParameterMapping = this.state.controlMap.has(\"DeleteParameterMapping\") && this.state.controlMap.get(\"DeleteParameterMapping\").ncontrolcode;\r\n\r\n\r\n        tabMap.set(\"IDS_PARAMETERS\", <DataGrid primaryKeyField={\"nreportparametercode\"}\r\n            data={this.props.Login.masterData[\"ReportParameter\"] || []}\r\n            dataResult={this.props.Login.masterData[\"ReportParameter\"] || []}\r\n            dataState={{ skip: 0, take: this.props.Login.masterData[\"ReportParameter\"] ? this.props.Login.masterData[\"ReportParameter\"].length : 0 }}\r\n            extractedColumnList={this.parameterColumnList}\r\n            controlMap={this.state.controlMap}\r\n            userRoleControlRights={this.state.userRoleControlRights}\r\n            inputParam={this.props.Login.inputParam}\r\n            userInfo={this.props.Login.userInfo}\r\n            pageable={false}\r\n            scrollable={\"scrollable\"}\r\n            isActionRequired={false}\r\n            isToolBarRequired={false}\r\n            selectedId={null}\r\n            hideColumnFilter={true}\r\n        />)\r\n        if (this.props.Login && this.props.Login.masterData\r\n            && this.props.Login.masterData.ReportParameter\r\n            && this.props.Login.masterData.ReportParameter.length > 0\r\n            && (this.props.Login.masterData.SelectedFilterReportType.nreporttypecode === reportTypeEnum.MIS || this.props.Login.masterData.SelectedFilterReportType.nreporttypecode === reportTypeEnum.ALL)) {\r\n            tabMap.set(\"IDS_DESIGNPARAMETERS\", <DataGrid primaryKeyField={\"nreportdesignconfigcode\"}\r\n                data={this.props.Login.masterData[\"ReportDesignConfig\"] || []}\r\n                dataResult={this.props.Login.masterData[\"ReportDesignConfig\"] || []}\r\n                dataState={{ skip: 0, take: this.props.Login.masterData[\"ReportDesignConfig\"] ? this.props.Login.masterData[\"ReportDesignConfig\"].length : 0 }}\r\n                //dataState={this.state.dataState}\r\n                //dataStateChange={(event)=> this.setState({dataState: event.dataState})}                                                           \r\n                extractedColumnList={this.tabGridColumnList}\r\n                controlMap={this.state.controlMap}\r\n                userRoleControlRights={this.state.userRoleControlRights}\r\n                inputParam={this.props.Login.inputParam}\r\n                userInfo={this.props.Login.userInfo}\r\n                pageable={false}\r\n                scrollable={\"scrollable\"}\r\n                isActionRequired={false}\r\n                isToolBarRequired={false}\r\n                selectedId={null}\r\n                hideColumnFilter={true}\r\n            />);\r\n\r\n            tabMap.set(\"IDS_PARAMETERMAPPING\", <DataGrid primaryKeyField={\"nreportparametermappingcode\"}\r\n                data={this.props.Login.masterData[\"ReportParameterMapping\"] || []}\r\n                dataResult={this.props.Login.masterData[\"ReportParameterMapping\"] || []}\r\n                dataState={{ skip: 0, take: this.props.Login.masterData[\"ReportParameterMapping\"] ? this.props.Login.masterData[\"ReportParameterMapping\"].length : 0 }}\r\n\r\n                extractedColumnList={this.mappingGridFieldList}\r\n                controlMap={this.state.controlMap}\r\n                userRoleControlRights={this.state.userRoleControlRights}\r\n                inputParam={this.props.Login.inputParam}\r\n                userInfo={this.props.Login.userInfo}\r\n                pageable={false}\r\n                scrollable={\"scrollable\"}\r\n                isActionRequired={false}\r\n                isToolBarRequired={false}\r\n                selectedId={null}\r\n                hideColumnFilter={true}\r\n            />);\r\n        }\r\n        // tabMap.set(\"IDS_ACTIONMAPPING\",  <DataGrid  primaryKeyField={\"nreportparameteractioncode\"}\r\n        //                                         data={this.props.Login.masterData[\"ReportParameterAction\"] || []}\r\n        //                                         dataResult={this.props.Login.masterData[\"ReportParameterAction\"] || []}\r\n        //                                         extractedColumnList={this.actionGridFieldList}\r\n        //                                         controlMap={this.state.controlMap}\r\n        //                                         userRoleControlRights={this.state.userRoleControlRights}\r\n        //                                         inputParam={this.props.Login.inputParam}\r\n        //                                         userInfo={this.props.Login.userInfo}\r\n        //                                         pageable={false}\r\n        //                                         scrollable={\"scrollable\"}                                            \r\n        //                                         isActionRequired={false}\r\n        //                                         isToolBarRequired={false}\r\n        //                                         selectedId={this.props.Login.selectedId}\r\n        //                                         hideColumnFilter={true}\r\n        //                                     />)\r\n\r\n        tabMap.set(\"IDS_SUBREPORTS\", <>\r\n            <Row noGutters={true}>\r\n                <Col md={12}>\r\n                    <div className=\"actions-stripe d-flex justify-content-end\">\r\n                        <Nav.Link name=\"addsubreport\" className=\"add-txt-btn\"\r\n                            hidden={this.state.userRoleControlRights.indexOf(addSubReportId) === -1}\r\n                            onClick={() => this.openModal(\"IDS_SUBREPORTS\")}>\r\n                            <FontAwesomeIcon icon={faPlus} /> { }\r\n                            <FormattedMessage id='IDS_SUBREPORT' defaultMessage='Sub Report' />\r\n                        </Nav.Link>\r\n                    </div>\r\n                    <DataGrid primaryKeyField={\"nsubreportdetailcode\"}\r\n                        data={this.props.Login.masterData[\"SubReportDetails\"] || []}\r\n                        dataResult={this.props.Login.masterData[\"SubReportDetails\"] || []}\r\n                        dataState={{ skip: 0, take: this.props.Login.masterData[\"SubReportDetails\"] ? this.props.Login.masterData[\"SubReportDetails\"].length : 0 }}\r\n\r\n                        extractedColumnList={this.subReportGridFieldList}\r\n                        controlMap={this.state.controlMap}\r\n                        userRoleControlRights={this.state.userRoleControlRights}\r\n                        inputParam={this.props.Login.inputParam}\r\n                        userInfo={this.props.Login.userInfo}\r\n                        pageable={false}\r\n                        deleteRecord={this.deleteAttachment}\r\n                        deleteParam={{\r\n                            screenName: \"IDS_SUBREPORTS\", methodUrl: \"SubReportDetails\", operation: \"delete\",\r\n                            //masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo,\r\n                            ncontrolcode: deleteSubReportId\r\n                        }}\r\n                        methodUrl={\"SubReportDetails\"}\r\n                        scrollable={\"scrollable\"}\r\n                        isActionRequired={true}\r\n                        isToolBarRequired={false}\r\n                        selectedId={this.props.Login.selectedId}\r\n                        hideColumnFilter={true}\r\n                    />\r\n                </Col>\r\n            </Row></>)\r\n\r\n        tabMap.set(\"IDS_IMAGES\", <>\r\n            <Row noGutters={true}>\r\n                <Col md={12}>\r\n                    <div className=\"actions-stripe d-flex justify-content-end\">\r\n                        <Nav.Link name=\"addimages\" className=\"add-txt-btn\"\r\n                            hidden={this.state.userRoleControlRights.indexOf(addImageId) === -1}\r\n                            onClick={() => this.openModal(\"IDS_IMAGES\")}>\r\n                            <FontAwesomeIcon icon={faPlus} /> { }\r\n                            <FormattedMessage id='IDS_IMAGES' defaultMessage='Images' />\r\n                        </Nav.Link>\r\n                    </div>\r\n                    <DataGrid primaryKeyField={\"nreportimagecode\"}\r\n                        data={this.props.Login.masterData[\"ReportImages\"] || []}\r\n                        dataResult={this.props.Login.masterData[\"ReportImages\"] || []}\r\n                        dataState={{ skip: 0, take: this.props.Login.masterData[\"ReportImages\"] ? this.props.Login.masterData[\"ReportImages\"].length : 0 }}\r\n\r\n                        extractedColumnList={this.imageGridFieldList}\r\n                        controlMap={this.state.controlMap}\r\n                        userRoleControlRights={this.state.userRoleControlRights}\r\n                        inputParam={this.props.Login.inputParam}\r\n                        userInfo={this.props.Login.userInfo}\r\n                        pageable={false}\r\n                        scrollable={\"scrollable\"}\r\n                        deleteRecord={this.deleteAttachment}\r\n                        deleteParam={{\r\n                            screenName: \"IDS_IMAGES\", methodUrl: \"ReportImages\", operation: \"delete\",\r\n                            //masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo,\r\n                            ncontrolcode: deleteImageId\r\n                        }}\r\n                        methodUrl={\"ReportImages\"}\r\n                        isActionRequired={true}\r\n                        isToolBarRequired={false}\r\n                        selectedId={this.props.Login.selectedId}\r\n                        hideColumnFilter={true}\r\n                    />\r\n                </Col></Row></>)\r\n        if (this.props.Login && this.props.Login.masterData\r\n            && this.props.Login.masterData.SelectedFilterReportType.nreporttypecode === reportTypeEnum.SCREENWISE) {\r\n            tabMap.set(\"IDS_REPORTVALIDATION\", <>\r\n                <Row noGutters={true}>\r\n                    <Col md={12}>\r\n                        <div className=\"actions-stripe d-flex justify-content-end\">\r\n                            <Nav.Link name=\"addValidation\" className=\"add-txt-btn\"\r\n                                hidden={this.state.userRoleControlRights.indexOf(addValidationId) === -1}\r\n                                onClick={() => this.generateControlBasedReportReport(addValidationId)}>\r\n                                <FontAwesomeIcon icon={faPlus} /> { }\r\n                                <FormattedMessage id='IDS_REPORTVALIDATION' defaultMessage='Validation Status' />\r\n                            </Nav.Link>\r\n                        </div>\r\n                        <DataGrid\r\n                            primaryKeyField={\"nreportvalidationcode\"}\r\n                            //selectedId={this.props.Login.selectedId}\r\n                            data={this.props.Login.masterData[\"ReportValidation\"] || []}\r\n                            dataResult={this.props.Login.masterData[\"ReportValidation\"] || []}\r\n                            dataState={{ skip: 0, take: this.props.Login.masterData[\"ReportValidation\"] || [] }}\r\n                            //dataState={{ skip: 0, take: this.props.Login.masterData[\"ReportValidation\"] ? this.props.Login.masterData[\"ReportValidation\"].length : 5 }}\r\n                            //dataStateChange={this.dataStateChange}\r\n                            extractedColumnList={this.transValidationFieldList}\r\n                            controlMap={this.state.controlMap}\r\n                            userRoleControlRights={this.state.userRoleControlRights}\r\n                            inputParam={this.props.Login.inputParam}\r\n                            userInfo={this.props.Login.userInfo}\r\n                            deleteRecord={this.deleteValidation}\r\n                            methodUrl={\"ReportValidation\"}\r\n                            scrollable={\"scrollable\"}\r\n                            pageable={false}\r\n                            isActionRequired={true}\r\n                            isToolBarRequired={false}\r\n                            hideColumnFilter={true}\r\n                    \r\n                        />\r\n                    </Col></Row></>)\r\n        }\r\n\r\n        if (this.props.Login && this.props.Login.masterData\r\n            && this.props.Login.masterData.SelectedFilterReportType.nreporttypecode === reportTypeEnum.SCREENWISE) {\r\n            tabMap.set(\"IDS_REPORTPARAMETERMAPPING\", <>\r\n                <Row noGutters={true}>\r\n                    <Col md={12}>\r\n                        <div className=\"actions-stripe d-flex justify-content-end\">\r\n                            <Nav.Link name=\"addParameterMapping\" className=\"add-txt-btn\"\r\n                                hidden={this.state.userRoleControlRights.indexOf(addParameterMapping) === -1}\r\n                                onClick={() => this.generateControlBasedReportReportparametre(addParameterMapping)}\r\n                            >\r\n                                <FontAwesomeIcon icon={faPlus} /> { }\r\n                                <FormattedMessage id='IDS_REPORTPARAMETERMAPPING' defaultMessage='Report Parameters' />\r\n                            </Nav.Link>\r\n                        </div>\r\n                        <DataGrid\r\n                            primaryKeyField={\"nreportparameterconfiguration\"}\r\n                            data={this.props.Login.masterData[\"ParameterMapping\"] || this.props.Login.ParameterMappingDatagrid}\r\n                            dataResult={this.props.Login.masterData[\"ParameterMapping\"] || this.props.Login.ParameterMappingDatagrid}\r\n                            dataState={{ skip: 0, take: this.props.Login.masterData[\"ParameterMapping\"] || [] }}//? this.props.Login.masterData[\"ParameterMapping\"].length : 0 }}\r\n                            extractedColumnList={this.reportparametermappingcolumn}\r\n                            controlMap={this.state.controlMap}\r\n                            userRoleControlRights={this.state.userRoleControlRights}\r\n                            inputParam={this.props.Login.inputParam}\r\n                            userInfo={this.props.Login.userInfo}\r\n                            pageable={false}\r\n                            methodUrl={\"ParameterMapping\"}\r\n                            isActionRequired={true}\r\n                            isToolBarRequired={false}\r\n                            selectedId={this.props.Login.selectedId}\r\n                            hideColumnFilter={true}\r\n                        />\r\n                    </Col></Row></>)\r\n        }\r\n        return tabMap;\r\n    }\r\n\r\n    //     generateControlBasedReportReport(addValidationId){\r\n\r\n    //         if (this.props.Login.masterData.SelectedReportDetail == null) {\r\n    //             toast.warn(this.props.intl.formatMessage({ id: \"IDS_REPORTVERSIONNOTFOUND\" }))\r\n    //         }\r\n    //         else {\r\n    //             if (this.props.Login.masterData.SelectedReportDetail.ntransactionstatus === transactionStatus.DRAFT) {\r\n\r\n    //                 let inputParam={\r\n    //                     userinfo: this.props.Login.userInfo,\r\n    //                     nformcode:this.props.Login.userInfo.nformcode\r\n    //                 }\r\n\r\n    //                 this.props.validationReportparameter(inputParam)\r\n\r\n    //             }else if (this.props.Login.masterData.SelectedReportDetail.ntransactionstatus === transactionStatus.APPROVED) {\r\n    //                 toast.warn(this.props.intl.formatMessage({ id: \"IDS_CANNOTADDFORAPPROVEDREPORT\" }))\r\n    //             } else if (this.props.Login.masterData.SelectedReportDetail.ntransactionstatus === transactionStatus.RETIRED) {\r\n    //                 toast.warn(this.props.intl.formatMessage({ id: \"IDS_CANNOTADDFORRETIREDREPORT\" }))\r\n    //             }\r\n    //         }   \r\n    // }\r\n\r\n    generateControlBasedReportReportparametre(addValidationId) {\r\n\r\n        if (this.props.Login.masterData.SelectedReportDetail == null) {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_REPORTVERSIONNOTFOUND\" }))\r\n        }\r\n        else {\r\n            if (this.props.Login.masterData.SelectedReportDetail.ntransactionstatus === transactionStatus.DRAFT) {\r\n\r\n                let inputParam = {\r\n                    userinfo: this.props.Login.userInfo,\r\n                    nformcode: this.props.Login.userInfo.nformcode,\r\n                    nreportdetailcode: this.props.Login.masterData.SelectedReportDetail.nreportdetailcode\r\n                }\r\n\r\n                this.props.controlBasedReportparametre(inputParam)\r\n\r\n            } else if (this.props.Login.masterData.SelectedReportDetail.ntransactionstatus === transactionStatus.APPROVED) {\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_CANNOTADDFORAPPROVEDREPORT\" }))\r\n            } else if (this.props.Login.masterData.SelectedReportDetail.ntransactionstatus === transactionStatus.RETIRED) {\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_CANNOTADDFORRETIREDREPORT\" }))\r\n            }\r\n        }\r\n    }\r\n\r\n    generateControlBasedReportReport(addValidationId) {\r\n        if (this.props.Login.masterData.SelectedReportDetail == null) {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_REPORTVERSIONNOTFOUND\" }))\r\n        }\r\n        else {\r\n            if (this.props.Login.masterData.SelectedReportDetail.ntransactionstatus === transactionStatus.DRAFT) {\r\n\r\n                let inputParam = {\r\n                    userinfo: this.props.Login.userInfo,\r\n                    nformcode: this.props.Login.masterData.SelectedReportMaster.nformcode,\r\n                    ntranscode: this.props.Login.masterData.ReportValidation.map(item => item.ntranscode).join(\",\")\r\n\r\n                }\r\n\r\n                this.props.validationReportparameter(inputParam)\r\n\r\n            } else if (this.props.Login.masterData.SelectedReportDetail.ntransactionstatus === transactionStatus.APPROVED) {\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_CANNOTADDFORAPPROVEDREPORT\" }))\r\n            } else if (this.props.Login.masterData.SelectedReportDetail.ntransactionstatus === transactionStatus.RETIRED) {\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_CANNOTADDFORRETIREDREPORT\" }))\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    openModal = (screenName, ncontrolCode) => {\r\n\r\n        if (this.props.Login.masterData.SelectedReportDetail == null) {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_REPORTVERSIONNOTFOUND\" }))\r\n        }\r\n        else {\r\n            if (this.props.Login.masterData.SelectedReportDetail.ntransactionstatus === transactionStatus.DRAFT) {\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        selectedRecord: { sreportname: this.props.Login.masterData.SelectedReportMaster.sreportname }, operation: \"create\", ncontrolCode, selectedId: null,\r\n                        openModal: true, screenName\r\n                    }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n            else if (this.props.Login.masterData.SelectedReportDetail.ntransactionstatus === transactionStatus.APPROVED) {\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_CANNOTADDFORAPPROVEDREPORT\" }))\r\n            } else if (this.props.Login.masterData.SelectedReportDetail.ntransactionstatus === transactionStatus.RETIRED) {\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_CANNOTADDFORRETIREDREPORT\" }))\r\n\r\n            }\r\n        }\r\n    }\r\n\r\n    addreportParametersInDataGrid = (selectedRecord) => {\r\n\r\n        //if (this.props.Login.ParameterMappingDatagrid.length !== this.props.Login.masterData.ReportParameter.length) {\r\n        if (this.props.Login.ParameterMappingDatagrid.length === this.props.Login.masterData.ReportParameter.length || this.state.gridDataparmeter.length === this.props.Login.masterData.ReportParameter.length) {\r\n            toast.warn(\"You cannot add more than Report Parameters count\");\r\n        } else {\r\n\r\n            if (selectedRecord && selectedRecord !== undefined && selectedRecord.ncontrolBasedparameter !== undefined && selectedRecord.nquerybuildertablecodecolumn !== undefined) {\r\n                const duplicate = this.state.gridDataparmeter.map(function (el) { return el.ncontrolBasedparameter; })\r\n                const duplicateRecord = duplicate.some(num => num === selectedRecord.ncontrolBasedparameter.value);\r\n                const valuecheck = this.props.Login.ParameterMappingDatagrid.map(function (el) { return el.nreportparametercode; });\r\n                const isValuePresent = valuecheck.some(num => num === selectedRecord.ncontrolBasedparameter.value);\r\n                if (this.state.gridDataparmeter.length !== 0 && this.props.Login.ParameterMappingDatagrid.length !== 0 || selectedRecord !== undefined) {\r\n                    if (duplicateRecord === true || isValuePresent === true) {\r\n                        toast.warn(this.props.intl.formatMessage({ id: \"IDS_ALREADYEXISTS\" }));\r\n                    }\r\n                    else {\r\n                        let copySelected = { ...selectedRecord };\r\n                        const gridDataparmeter = this.state.gridDataparmeter;\r\n                        let controlbasedKey = 0;\r\n                        controlbasedKey = gridDataparmeter.length > 0 ? Math.max(...gridDataparmeter.map(x => x.controlbasedKey)) : 0;\r\n                        controlbasedKey++;\r\n                        gridDataparmeter.push({\r\n                            controlbasedKey: controlbasedKey,\r\n                            ncontrolBasedparameter: copySelected.ncontrolBasedparameter.value,\r\n                            scontrolBasedparameter: copySelected.ncontrolBasedparameter.label,\r\n                            stablecolumn: copySelected.nquerybuildertablecodecolumn.label,\r\n                            ncolumnfield: copySelected.nquerybuildertablecodecolumn.value,\r\n                        })\r\n                        let reportTypeListparameter = [];\r\n                        this.state.reportTypeListparameter.map(x => {\r\n                            if (x.value !== copySelected.ncontrolBasedparameter.value) {\r\n                                reportTypeListparameter.push(x)\r\n                            }\r\n                        })\r\n\r\n                        let reportTypeListColumn = [];\r\n                        let reportTypeListName = [];\r\n                        this.setState({\r\n                            selectedRecord: \"\",\r\n                            gridDataparmeter,\r\n                            reportTypeListparameter: reportTypeListparameter,\r\n                            reportTypeListColumn: reportTypeListColumn,\r\n                            reportTypeListName: reportTypeListName\r\n\r\n                        });\r\n                        //}\r\n                    }\r\n                } else {\r\n\r\n                }\r\n            } else {\r\n                if (selectedRecord.ncontrolBasedparameter === undefined\r\n                    || selectedRecord[\"ncontrolBasedparameter\"].length === 0) {\r\n                    toast.info(`${this.props.intl.formatMessage({ id: \"IDS_SELECT\" })} ${this.props.intl.formatMessage({ id: \"IDS_REPORTPARAMETER\" })}`);\r\n                } else if (selectedRecord.nquerybuildertablecodecolumn === undefined\r\n                    || selectedRecord[\"nquerybuildertablecodecolumn\"].length === 0) {\r\n                    toast.info(`${this.props.intl.formatMessage({ id: \"IDS_SELECT\" })} ${this.props.intl.formatMessage({ id: \"IDS_REPORTTABLECOLUMNNAME\" })}`);\r\n                }\r\n                else {\r\n                    toast.info(`${this.props.intl.formatMessage({ id: \"IDS_SELECT\" })} ${this.props.intl.formatMessage({ id: \"IDS_PARAMETERS\" })}`);\r\n                }\r\n            }\r\n        }\r\n        // } else {\r\n        //     toast.info(`${this.props.intl.formatMessage({ id: \"IDS_REMOVETHEGRIDVALUEANDADD\" })}`); \r\n        // }\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n    //     addreportParametersInDataGrid = (selectedRecord) => {\r\n\r\n    //         if(this.props.Login.ParameterMappingDatagrid.length !== this.props.Login.masterData.ReportParameter.length)\r\n    //         {\r\n    //         if (this.state.addDesignParameter.length === this.props.Login.masterData.ReportParameter.length) {\r\n    //             toast.warn(\"You cannot add more than Report Parameters count\");\r\n    //         }else{\r\n    //             if (selectedRecord  && selectedRecord.ncontrolBasedparameter !== this.state.addMappingParam && selectedRecord.ncontrolBasedparameter !== undefined && selectedRecord.nquerybuildertablecode !== undefined && selectedRecord.nquerybuildertablecodecolumn !== undefined) {\r\n    //                 let copySelected = { ...selectedRecord };\r\n    //                 const valuecheck=this.props.Login.ParameterMappingDatagrid.map(function (el) { return el.nreportparametercode; });\r\n    //                 const isValuePresent = valuecheck.some(num => num === selectedRecord.ncontrolBasedparameter.value);\r\n    //                 if (isValuePresent) {\r\n    //                     toast.warn(this.props.intl.formatMessage({ id: \"IDS_ALREADYEXISTS\" }));\r\n    //                 }else{\r\n    //                 const addDesignParameter = this.state.addDesignParameter;\r\n    //                 const index = addDesignParameter.findIndex(item => {\r\n    //                     if (typeof item.ncontrolBasedparameter.value === \"number\"  && typeof item.ncontrolBasedparameter.value === copySelected.nquerybuildertablecodecolumn.value ) {\r\n    //                         return item.nquerybuildertablecodecolumn.value === copySelected.nquerybuildertablecodecolumn.value;\r\n    //                     } else {\r\n    //                         return item.ncontrolBasedparameter.value === copySelected.ncontrolBasedparameter.value;\r\n    //                     }\r\n    //                 });\r\n\r\n    //                 if (index === -1) {\r\n    //                     addDesignParameter.push(copySelected);\r\n    //                     let controlbasedKey = 0;\r\n    //                     controlbasedKey= gridDataparmeter.length>0 ? Math.max(...gridDataparmeter.map(x => x.controlbasedKey)):0; \r\n    //                     controlbasedKey++;\r\n    //                     const gridDataparmeter = this.state.gridDataparmeter;\r\n    //                     gridDataparmeter.push({\r\n    //                         //nreportparametercode: copySelected.nreportparametercode.value,\r\n    //                         controlbasedKey:controlbasedKey,\r\n    //                         ncontrolBasedparameter: copySelected.ncontrolBasedparameter.value,\r\n    //                         scontrolBasedparameter: copySelected.ncontrolBasedparameter.label,\r\n    //                         stablecolumn: copySelected.nquerybuildertablecodecolumn.label,\r\n    //                         nquerybuildertablecode: copySelected.nquerybuildertablecode.value,\r\n    //                         stablename: copySelected.nquerybuildertablecode.label,\r\n    //                     })\r\n    //                     //const reportTypeListparameter=this.props.Login.reportTypeListparameter.map(function (el) { return el.nquerybuildertablecode.value; }).join(\",\")\r\n\r\n    //                     this.setState({\r\n    //                         addDesignParameter, selectedRecord: selectedRecord,\r\n    //                         gridDataparmeter\r\n    //                     });\r\n    //                 }\r\n    //                 else\r\n    //                     toast.warn(this.props.intl.formatMessage({ id: \"IDS_DUPLICATEMAPPING\" }));\r\n    //                 this.setState({ selectedRecord: { } });\r\n    //                  }\r\n    //             }else{\r\n    //                 if (selectedRecord.ncontrolBasedparameter === undefined\r\n    //                 || selectedRecord[\"ncontrolBasedparameter\"].length === 0) {\r\n    //                 toast.info(`${this.props.intl.formatMessage({ id: \"IDS_SELECT\" })} ${this.props.intl.formatMessage({ id: \"IDS_REPORTPARAMETER\" })}`);\r\n    //             }else if (selectedRecord.nquerybuildertablecode === undefined\r\n    //                 || selectedRecord[\"nquerybuildertablecode\"].length === 0) {\r\n    //                 toast.info(`${this.props.intl.formatMessage({ id: \"IDS_SELECT\" })} ${this.props.intl.formatMessage({ id: \"IDS_REPORTTABLENAME\" })}`);\r\n    //             }else if (selectedRecord.nquerybuildertablecodecolumn === undefined\r\n    //                 || selectedRecord[\"nquerybuildertablecodecolumn\"].length === 0) {\r\n    //                 toast.info(`${this.props.intl.formatMessage({ id: \"IDS_SELECT\" })} ${this.props.intl.formatMessage({ id: \"IDS_REPORTTABLECOLUMNNAME\" })}`);\r\n    //             }else{\r\n    //                 toast.info(`${this.props.intl.formatMessage({ id: \"IDS_SELECT\" })} ${this.props.intl.formatMessage({ id: \"IDS_PARAMETERS\" })}`);\r\n    //             }       \r\n    //             }\r\n    //         }\r\n    //     }else{\r\n    //         toast.info(`${this.props.intl.formatMessage({ id: \"IDS_REMOVETHEGRIDVALUEANDADD\" })}`); \r\n    //     }\r\n    // }\r\n\r\n\r\n    removereportParametersInDataGrid = (selectedRecord) => {\r\n\r\n\r\n        const gridDataNew = this.state.gridDataparmeter.filter(item => {\r\n            if (typeof item.ncontrolBasedparameter === \"number\") {\r\n                return item.ncontrolBasedparameter !== selectedRecord.ncontrolBasedparameter\r\n            }\r\n            else {\r\n                return item.ncontrolBasedparameter !== selectedRecord.ncontrolBasedparameter\r\n            }\r\n        });\r\n\r\n        const ParameterMappingDatagridNew = this.props.Login.ParameterMappingDatagrid.filter(item => {\r\n            if (typeof item.ncontrolBasedparameter === \"number\") {\r\n                return item.ncontrolBasedparameter !== selectedRecord.ncontrolBasedparameter\r\n            }\r\n            else {\r\n                return item.ncontrolBasedparameter !== selectedRecord.ncontrolBasedparameter\r\n            }\r\n        })\r\n\r\n        //         const gridDataNew = this.state.gridDataparmeter.filter(item => item.ncontrolBasedparameter !== selectedRecord.ncontrolBasedparameter);\r\n        // const ParameterMappingDatagridNew = this.props.Login.ParameterMappingDatagrid.filter(item => item.ncontrolBasedparameter !== selectedRecord.ncontrolBasedparameter);\r\n\r\n\r\n\r\n        // let str=this.props.Login.reportTypeListparametercopy;\r\n        //     let reportTypeListparameter=str.map(x=>{\r\n        //          if(x.value===selectedRecord.ncontrolBasedparameter){\r\n        //               return x;\r\n        //       }\r\n        // })\r\n        let str = this.props.Login.reportTypeListparametercopy;\r\n        let reportTypeListparameter1 = this.state.reportTypeListparameter;\r\n        let reportTypeListparameter = str.filter(x => x.value === selectedRecord.ncontrolBasedparameter);\r\n        reportTypeListparameter = reportTypeListparameter.concat(reportTypeListparameter1);\r\n\r\n\r\n        //reportTypeListparameter=reportTypeListparameter.splice(1,' ')\r\n        this.props.Login.ParameterMappingDatagrid = ParameterMappingDatagridNew;\r\n        this.setState({ gridDataparmeter: gridDataNew, reportTypeListparameter: reportTypeListparameter });\r\n    }\r\n\r\n    // const addDesignreportParameter = this.state.addDesignParameter.filter(item => {\r\n    //     if (typeof item.ncontrolBasedparameter.value === \"number\") {\r\n    //         return item.ncontrolBasedparameter.value !== selectedRecord.ncontrolBasedparameter\r\n    //     }\r\n    //     else {\r\n    //         return item.ncontrolBasedparameter !== selectedRecord.ncontrolBasedparameter\r\n    //     }\r\n    // });\r\n\r\n\r\n\r\n\r\n    // if(this.props.Login.reportTypeListparameter.map(function (el) { return el.value; }).some(num => num ===this.state.gridDataparmeter.map(function (el) { return el.nreportparametercode; })) === true)\r\n    // {\r\n    //     this.props.Login.reportTypeListparameter.push(this.state.reportTypeoldList);\r\n    // }else{\r\n\r\n\r\n    // }\r\n    //gridData.filter\r\n    // (item => item.sfieldname !== selectedItem.sfieldname);\r\n    //addDesignParameter: addDesignreportParameter, \r\n\r\n\r\n\r\n\r\n    removeParametersInDataGrid = (selectedItem) => {\r\n\r\n        const addDesignParamNew = this.state.addDesignParam.filter(item => {\r\n            if (typeof item.nreportparametercode === \"number\") {\r\n                return item.nreportparametercode !== selectedItem.nreportparametercode\r\n            }\r\n            else {\r\n                return item.nreportparametercode.value !== selectedItem.nreportparametercode\r\n            }\r\n        });\r\n        const gridDataNew = this.state.gridData.filter(item => {\r\n            if (typeof item.nreportparametercode === \"number\") {\r\n                return item.nreportparametercode !== selectedItem.nreportparametercode\r\n            }\r\n            else {\r\n                return item.nreportparametercode.value !== selectedItem.nreportparametercode\r\n            }\r\n        });\r\n\r\n\r\n        //gridData.filter\r\n        // (item => item.sfieldname !== selectedItem.sfieldname);\r\n        this.setState({ addDesignParam: addDesignParamNew, gridData: gridDataNew });\r\n\r\n    }\r\n\r\n    addParametersInDataGrid = (selectedRecord) => {\r\n        if (this.state.addDesignParam.length === this.props.Login.masterData.ReportParameter.length) {\r\n            toast.warn(\"You cannot add more than Report Parameters count\");\r\n        }\r\n        else {\r\n            let validData = false;\r\n            if (selectedRecord[\"sdisplayname\"] && selectedRecord[\"sdisplayname\"].trim().length !== 0\r\n                && selectedRecord[\"nreportparametercode\"] && selectedRecord[\"ndesigncomponentcode\"]) {\r\n                validData = true;\r\n                if (selectedRecord[\"ndesigncomponentcode\"].value === designComponents.COMBOBOX) {\r\n                    if (selectedRecord[\"nsqlquerycode\"] && selectedRecord[\"nsqlquerycode\"].length !== 0) {\r\n                        validData = true;\r\n                    }\r\n                    else {\r\n                        validData = false;\r\n                    }\r\n                }\r\n                if (selectedRecord[\"ndesigncomponentcode\"].value === designComponents.DATEPICKER) {\r\n                    if (selectedRecord[\"ndays\"] && selectedRecord[\"ndays\"].length !== 0) {\r\n                        validData = true;\r\n                    } else {\r\n                        validData = false;\r\n                    }\r\n                }\r\n            }\r\n            if (validData) {\r\n                if (selectedRecord && selectedRecord.nreportparametercode !== undefined) {\r\n                    let copySelected = { ...selectedRecord };\r\n\r\n                    const addDesignParam = this.state.addDesignParam;\r\n                    const index = addDesignParam.findIndex(item => {\r\n                        if (typeof item.nreportparametercode === \"number\") {\r\n                            return item.nreportparametercode === copySelected.nreportparametercode.value;\r\n                        } else {\r\n                            return item.nreportparametercode.value === copySelected.nreportparametercode.value;\r\n                        }\r\n                    });\r\n\r\n                    if (index === -1) {\r\n                        addDesignParam.push(copySelected);\r\n                        const gridData = this.state.gridData;;\r\n                        gridData.push({\r\n                            nreportparametercode: copySelected.nreportparametercode.value,\r\n                            sreportparametername: copySelected.nreportparametercode.label,\r\n                            sdisplayname: copySelected.sdisplayname,\r\n                            ndesigncomponentcode: copySelected.ndesigncomponentcode.value,\r\n                            sdesigncomponentname: copySelected.ndesigncomponentcode.label,\r\n                        })\r\n                        this.setState({\r\n                            addDesignParam, selectedRecord: { ndays: \"\", sdisplayname: \"\" },\r\n                            gridData\r\n                        });\r\n                    }\r\n                    else\r\n                        toast.warn(this.props.intl.formatMessage({ id: \"IDS_DUPLICATEMAPPING\" }));\r\n                    this.setState({ selectedRecord: { ndays: \"\", sdisplayname: \"\" } });\r\n                }\r\n            }\r\n            else {\r\n                //toast.info(this.props.intl.formatMessage({id:\"IDS_FILLMANDATORY\"}));\r\n                if (selectedRecord[\"nreportparametercode\"] === undefined\r\n                    || selectedRecord[\"nreportparametercode\"].length === 0) {\r\n                    toast.info(`${this.props.intl.formatMessage({ id: \"IDS_ENTER\" })} ${this.props.intl.formatMessage({ id: \"IDS_PARAMETERS\" })}`);\r\n                }\r\n                else if (selectedRecord[\"sdisplayname\"] === undefined\r\n                    || selectedRecord[\"sdisplayname\"] === \"\") {\r\n                    toast.info(`${this.props.intl.formatMessage({ id: \"IDS_ENTER\" })} ${this.props.intl.formatMessage({ id: \"IDS_DISPLAYNAME\" })}`);\r\n                }\r\n                else if (selectedRecord[\"ndesigncomponentcode\"] === undefined\r\n                    || selectedRecord[\"ndesigncomponentcode\"].length === 0) {\r\n                    toast.info(`${this.props.intl.formatMessage({ id: \"IDS_ENTER\" })} ${this.props.intl.formatMessage({ id: \"IDS_INPUTTYPE\" })}`);\r\n                }\r\n                else {\r\n                    if (selectedRecord[\"ndesigncomponentcode\"].value === designComponents.COMBOBOX) {\r\n                        if (selectedRecord[\"nsqlquerycode\"] === undefined || selectedRecord[\"nsqlquerycode\"].length === 0) {\r\n                            toast.info(`${this.props.intl.formatMessage({ id: \"IDS_ENTER\" })} ${this.props.intl.formatMessage({ id: \"IDS_EXISTINGLINKTABLE\" })}`);\r\n                        }\r\n                    }\r\n                    else if (selectedRecord[\"ndesigncomponentcode\"].value === designComponents.DATEPICKER) {\r\n                        if (selectedRecord[\"ndays\"] === undefined || selectedRecord[\"ndays\"].length === 0) {\r\n                            toast.info(`${this.props.intl.formatMessage({ id: \"IDS_ENTER\" })} ${this.props.intl.formatMessage({ id: \"IDS_DAYS\" })}`);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    unbindMappingParametersFromDataGrid = (selectedItem) => {\r\n\r\n        const addMappingParamNew = this.state.addMappingParam.filter(item => {\r\n            if (typeof item.nchildreportdesigncode === \"number\") {\r\n                if (item.nchildreportdesigncode === selectedItem.nchildreportdesigncode) {\r\n                    return (item.nparentreportdesigncode !== selectedItem.nparentreportdesigncode)\r\n                }\r\n                else\r\n                    return item;\r\n            }\r\n            else {\r\n                if (item.nchildreportdesigncode.value === selectedItem.nchildreportdesigncode) {\r\n                    return (item.nparentreportdesigncode.value !== selectedItem.nparentreportdesigncode)\r\n                }\r\n                else\r\n                    return item;\r\n            }\r\n        });\r\n        const mappingGridDataNew = this.state.mappingGridData.filter(item => {\r\n            if (typeof item.nchildreportdesigncode === \"number\") {\r\n                if (item.nchildreportdesigncode === selectedItem.nchildreportdesigncode) {\r\n                    return (item.nparentreportdesigncode !== selectedItem.nparentreportdesigncode)\r\n                }\r\n                else\r\n                    return item;\r\n            }\r\n            else {\r\n                if (item.nchildreportdesigncode.value === selectedItem.nchildreportdesigncode) {\r\n                    return (item.nparentreportdesigncode.value !== selectedItem.nparentreportdesigncode)\r\n                }\r\n                else\r\n                    return item;\r\n            }\r\n        });\r\n\r\n        this.setState({ addMappingParam: addMappingParamNew, mappingGridData: mappingGridDataNew });\r\n\r\n    }\r\n\r\n    bindMappingParametersToDataGrid = (selectedRecord) => {\r\n\r\n        if (selectedRecord[\"sfieldname\"] && selectedRecord[\"nparentreportdesigncode\"]\r\n            && selectedRecord[\"nchildreportdesigncode\"]) {\r\n            if (selectedRecord && selectedRecord.nparentreportdesigncode !== undefined) {\r\n                let copySelected = { ...selectedRecord };\r\n\r\n                const addMappingParam = this.state.addMappingParam;\r\n                const index = addMappingParam.findIndex(item => {\r\n                    if (typeof item.nparentreportdesigncode === \"number\") {\r\n                        return item.nparentreportdesigncode === copySelected.nparentreportdesigncode.value\r\n                            && item.nchildreportdesigncode === copySelected.nchildreportdesigncode.value\r\n                            && item.sfieldname === copySelected.sfieldname.value;\r\n                    }\r\n                    else {\r\n                        return item.nparentreportdesigncode.value === copySelected.nparentreportdesigncode.value\r\n                            && item.nchildreportdesigncode.value === copySelected.nchildreportdesigncode.value\r\n                            && item.sfieldname.value === copySelected.sfieldname.value;\r\n                    }\r\n                });\r\n                if (index === -1) {\r\n                    addMappingParam.push(copySelected);\r\n                    const mappingGridData = this.state.mappingGridData;;\r\n                    mappingGridData.push({\r\n                        nparentreportdesigncode: copySelected.nparentreportdesigncode.value,\r\n                        nchildreportdesigncode: copySelected.nchildreportdesigncode.value,\r\n                        sparentparametername: copySelected.nparentreportdesigncode.label,\r\n                        schildparametername: copySelected.nchildreportdesigncode.label,\r\n                        sfieldname: copySelected.sfieldname.value,\r\n                        nactionparameter: transactionStatus.NO\r\n                    })\r\n\r\n\r\n                    this.setState({\r\n                        addMappingParam,\r\n                        selectedRecord: {\r\n                            nactionreportdesigncode: \"\",\r\n                            nparentreportdesigncode: \"\",\r\n                            sfieldname: \"\",\r\n                            nchildreportdesigncode: \"\"\r\n                        },\r\n                        //selectedRecord:{},\r\n                        mappingGridData\r\n                    });\r\n                }\r\n                else {\r\n                    toast.warn(this.props.intl.formatMessage({ id: \"IDS_DUPLICATEMAPPING\" }));\r\n                    this.setState({\r\n                        selectedRecord: {\r\n                            nparentreportdesigncode: { label: \"\", value: -1 },\r\n                            sfieldname: { label: \"\", value: -1 },\r\n                            nchildreportdesigncode: { label: \"\", value: -1 }\r\n                        },\r\n                    });\r\n\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            //toast.warn(this.props.intl.formatMessage({id:\"IDS_FILLMANDATORY\"}));\r\n\r\n            if (selectedRecord[\"nchildreportdesigncode\"] === undefined\r\n                || selectedRecord[\"nchildreportdesigncode\"].length === 0) {\r\n                toast.info(`${this.props.intl.formatMessage({ id: \"IDS_ENTER\" })} ${this.props.intl.formatMessage({ id: \"IDS_PARAMETER\" })}`);\r\n            }\r\n            else if (selectedRecord[\"sfieldname\"] === undefined\r\n                || selectedRecord[\"sfieldname\"].length === 0) {\r\n                toast.info(`${this.props.intl.formatMessage({ id: \"IDS_ENTER\" })} ${this.props.intl.formatMessage({ id: \"IDS_FIELDNAME\" })}`);\r\n            }\r\n            else if (selectedRecord[\"nparentreportdesigncode\"] === undefined\r\n                || selectedRecord[\"nparentreportdesigncode\"].length === 0) {\r\n                toast.info(`${this.props.intl.formatMessage({ id: \"IDS_ENTER\" })} ${this.props.intl.formatMessage({ id: \"IDS_PARENTPARAMETER\" })}`);\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    bindActionParameter = (rowItem, event) => {\r\n\r\n        const gridMappingParam = this.state.mappingGridData;\r\n        const addMappingParam = this.state.addMappingParam;\r\n        if (event.target.checked) {\r\n            gridMappingParam.forEach(item => {\r\n                if (item.nchildreportdesigncode === rowItem.selectedRecord.nchildreportdesigncode) {\r\n                    if (item.nparentreportdesigncode === rowItem.selectedRecord.nparentreportdesigncode) {\r\n                        const index = addMappingParam.findIndex(item => item.nchildreportdesigncode === rowItem.selectedRecord.nchildreportdesigncode\r\n                            && item.nparentreportdesigncode === rowItem.selectedRecord.nparentreportdesigncode)\r\n\r\n                        addMappingParam[index] = {\r\n                            ...addMappingParam[index],\r\n                            \"nisactionparent\": transactionStatus.YES\r\n                        };\r\n                        return item.nisactionparent = transactionStatus.YES;\r\n                    }\r\n                    else {\r\n                        const index = addMappingParam.findIndex(item => item.nchildreportdesigncode === rowItem.selectedRecord.nchildreportdesigncode\r\n                            && item.nparentreportdesigncode === rowItem.selectedRecord.nparentreportdesigncode)\r\n\r\n                        addMappingParam[index] = {\r\n                            ...addMappingParam[index],\r\n                            \"nisactionparent\": transactionStatus.NO\r\n                        };\r\n                        return item.nisactionparent = transactionStatus.NO;\r\n                    }\r\n                }\r\n            })\r\n        }\r\n        else {\r\n            const index = gridMappingParam.findIndex(item => item.nchildreportdesigncode === rowItem.selectedRecord.nchildreportdesigncode\r\n                && item.nparentreportdesigncode === rowItem.selectedRecord.nparentreportdesigncode);\r\n            gridMappingParam[index][\"nisactionparent\"] = transactionStatus.NO;\r\n\r\n            const index1 = addMappingParam.findIndex(item => item.nchildreportdesigncode === rowItem.selectedRecord.nchildreportdesigncode\r\n                && item.nparentreportdesigncode === rowItem.selectedRecord.nparentreportdesigncode)\r\n\r\n            addMappingParam[index1] = {\r\n                ...addMappingParam[index1],\r\n                \"nisactionparent\": transactionStatus.NO\r\n            };\r\n        }\r\n\r\n        this.setState({ mappingGridData: gridMappingParam, addMappingParam: addMappingParam });\r\n    }\r\n\r\n    handleChangeDesign = (value, valueParam) => {\r\n        if (value !== null) {\r\n            const selectedRecord = this.state.selectedRecord || {};\r\n            selectedRecord[valueParam] = value.value;\r\n            this.setState({ selectedRecord });\r\n        }\r\n    }\r\n\r\n    closeModal = () => {\r\n        let loadEsign = this.props.Login.loadEsign;\r\n        let openModal = this.props.Login.openModal;\r\n        let selectedRecord = this.props.Login.selectedRecord;\r\n        let controlButton = this.props.Login.controlButton;\r\n        if (this.props.Login.loadEsign) {\r\n            if (this.props.Login.operation === \"delete\" || this.props.Login.operation === \"toggle\"\r\n                || this.props.Login.operation === \"approve\") {\r\n                loadEsign = false;\r\n                openModal = false;\r\n                selectedRecord = {};\r\n            }\r\n            else {\r\n                loadEsign = false;\r\n            }\r\n        }\r\n        else {\r\n            openModal = false;\r\n            selectedRecord = {};\r\n            controlButton = [];\r\n\r\n        }\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                openModal, loadEsign, selectedRecord, selectedId: null, controlButton\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n\r\n\r\n    }\r\n\r\n    onComboChange = (comboData, fieldName) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n\r\n        if (fieldName === \"nreporttypecode\") {\r\n            selectedRecord[fieldName] = comboData;\r\n            if (comboData.value === reportTypeEnum.COA || comboData.value === reportTypeEnum.COAPREVIEW || comboData.value === reportTypeEnum.COAPRELIMINARY) {\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: { selectedRecord: selectedRecord }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n            else if (comboData.value !== reportTypeEnum.MIS &&\r\n                comboData.value !== reportTypeEnum.SCREENWISE && comboData.value !== reportTypeEnum.SAMPLE) {\r\n                this.props.getReportSubType({ selectedRecord, reportType: comboData.item, userInfo: this.props.Login.userInfo });\r\n            }\r\n            else if (comboData.value === reportTypeEnum.SAMPLE) {\r\n                this.props.getReportSampletype({ selectedRecord, reportType: comboData.item, nregtypecode: RegistrationType.PLASMA_POOL, userInfo: this.props.Login.userInfo });\r\n            }\r\n            else {\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: { selectedRecord: selectedRecord }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n\r\n        }\r\n        else if (fieldName === \"nchildreportdesigncode\") {\r\n            //parameter mapping\r\n            selectedRecord[fieldName] = comboData;\r\n\r\n            const sqlquery = comboData.item.ssqlquery;\r\n            const param = [];\r\n            const param1 = [];\r\n            // let firstIndex = sqlquery.indexOf(\"P$\");\r\n            // const lastIndex = sqlquery.lastIndexOf(\"P$\");            \r\n            // let first = sqlquery.indexOf(\"P$\");\r\n            // let endFirst = sqlquery.indexOf(\"$P\");\r\n            // do {\r\n\r\n            //     let second = sqlquery.indexOf(\"P$\", first + 1);\r\n            //     let endSecond = sqlquery.indexOf(\"$P\", endFirst + 1);\r\n            //     const parameter = sqlquery.substring(first + 2, endFirst);\r\n            //     param.push({ label: parameter, value: parameter });\r\n\r\n            //     first = second;\r\n            //     endFirst = endSecond;\r\n            //     firstIndex = second;\r\n            // }\r\n            // while (firstIndex === lastIndex)\r\n            let query = sqlquery;\r\n            while (query.indexOf(\"<@\") !== -1 || query.indexOf(\"<#\") !== -1) {\r\n                let index1 = query.indexOf(\"<@\");\r\n                let index2 = query.indexOf(\"@>\");\r\n                let check = false;\r\n                if (query.indexOf(\"<@\") !== -1) {\r\n                    index1 = query.indexOf(\"<@\");\r\n                    index2 = query.indexOf(\"@>\");\r\n                    check = true;\r\n                }\r\n                else if (query.indexOf(\"<#\") !== -1) {\r\n                    index1 = query.indexOf(\"<#\");\r\n                    index2 = query.indexOf(\"#>\");\r\n                }\r\n\r\n                const parameter = query.substring(index1 + 2, index2);\r\n                if (!param1.includes(parameter)) {\r\n                    param.push({ label: parameter, value: parameter });\r\n                    param1.push(parameter);\r\n                }\r\n                if (check) {\r\n                    query = query.replace(\"<@\", \"\").replace(\"@>\", \"\");\r\n                } else {\r\n                    query = query.replace(\"<#\", \"\").replace(\"#>\", \"\");\r\n                }\r\n\r\n            }\r\n\r\n            this.setState({ selectedRecord, optionalParameterList: param });\r\n            //}\r\n        }\r\n        else if (fieldName === \"ncontrolBasedparameter\") {\r\n            //parameter mapping\r\n            selectedRecord[fieldName] = comboData;\r\n            this.setState({ selectedRecord });\r\n            this.props.controlBasedReportparametretable(\r\n                //this.state.selectedRecord,\r\n                this.props.Login.masterData.SelectedReportMaster.nformcode,\r\n                this.props.Login.masterData.SelectedReportDetail.nreportdetailcode,\r\n                this.props.Login.userInfo,\r\n                selectedRecord.ncontrolBasedparameter.item.sdatatype,\r\n                //this.props.Login.screenName\r\n            );\r\n        }\r\n        // else if (fieldName === \"nquerybuildertablecode\") {\r\n        //     //parameter mapping\r\n        //     selectedRecord[fieldName] = comboData;\r\n        //     this.props.controlBasedReportparametretablecolumn(\r\n        //         //this.state.selectedRecord,\r\n        //         this.props.Login.masterData.SelectedReportMaster.nformcode,\r\n        //         this.props.Login.masterData.SelectedReportDetail.nreportdetailcode,\r\n        //         this.props.Login.userInfo,\r\n        //         selectedRecord.ncontrolBasedparameter.item.sdatatype,\r\n        //         //this.props.Login.screenName\r\n        //     );\r\n        // }\r\n        else if (fieldName === \"nsampletypecode\") {\r\n            selectedRecord[fieldName] = comboData;\r\n            this.props.getregtype({ selectedRecord, sampleType: comboData.item, userInfo: this.props.Login.userInfo })\r\n        }\r\n        else if (fieldName === \"nregtypecode\") {\r\n            selectedRecord[fieldName] = comboData;\r\n            this.props.getReportRegSubType({ selectedRecord, registrationType: comboData.item, userInfo: this.props.Login.userInfo })\r\n        }\r\n        else if (fieldName === \"nregsubtypecode\") {\r\n            selectedRecord[fieldName] = comboData;\r\n            this.props.getReportRegSubTypeApproveConfigVersion({ selectedRecord, registrationsubType: comboData.item, userInfo: this.props.Login.userInfo })\r\n        }\r\n        else if (fieldName === \"ncertificatetypecode\") {\r\n            selectedRecord[fieldName] = comboData;\r\n            selectedRecord[\"sbatchdisplayname\"] = comboData.item.sbatchdisplayname;\r\n            this.setState({ selectedRecord });\r\n        }\r\n        else if (fieldName === \"nformcode\") {\r\n            selectedRecord[fieldName] = comboData;\r\n            selectedRecord[\"ncontrolcode\"] = undefined;\r\n            this.props.getControlButton({ selectedRecord, ControlScreen: comboData.item, userInfo: this.props.Login.userInfo })\r\n        }\r\n        else if (fieldName === \"ncoareporttypecode\") {\r\n            selectedRecord[fieldName] = comboData;\r\n            selectedRecord[\"nsectioncode\"] = undefined;\r\n            // this.props.getReportTemplate({ selectedRecord, userInfo: this.props.Login.userInfo })\r\n            this.setState({ selectedRecord });\r\n        }\r\n        else if (fieldName === \"ntranscode\") {\r\n            //selectedRecord[fieldName] = comboData;\r\n            //const ntransactionsamplecode = selectedSubsample.map(x => x.ntransactionsamplecode).join(\",\");\r\n            selectedRecord[\"ntranscode\"] = comboData;\r\n            this.setState({ selectedRecord });\r\n        }\r\n        // else if (fieldName === \"nreportparametercode\") {\r\n        //     //selectedRecord[fieldName] = comboData;\r\n        //     //const ntransactionsamplecode = selectedSubsample.map(x => x.ntransactionsamplecode).join(\",\");\r\n        //     selectedRecord[\"nreportparametercode\"] = comboData;\r\n        //     this.setState({ selectedRecord });\r\n        // }\r\n        else {\r\n            selectedRecord[fieldName] = comboData;\r\n            this.setState({ selectedRecord });\r\n        }\r\n    }\r\n\r\n    onInputOnChange = (event) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if (event.target.type === 'checkbox') {\r\n            if (event.target.name === \"ntransactionstatus\")\r\n                selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.ACTIVE : transactionStatus.DEACTIVE;\r\n            else\r\n                selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\r\n        }\r\n        else {\r\n            if (event.target.name === \"ndays\") {\r\n                if (event.target.value !== \"\") {\r\n                    event.target.value = validateDays(event.target.value);\r\n                    selectedRecord[event.target.name] =\r\n                        event.target.value !== \"\"\r\n                            ? event.target.value\r\n                            : selectedRecord[event.target.name];\r\n                } else {\r\n                    selectedRecord[event.target.name] = event.target.value;\r\n                }\r\n            } else {\r\n                selectedRecord[event.target.name] = event.target.value;\r\n            }\r\n        }\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    onDropImage = (attachedFiles, fieldName) => {\r\n        let selectedRecord = this.state.selectedRecord || {};\r\n        selectedRecord[fieldName] = attachedFiles;\r\n        this.setState({ selectedRecord, actionType: \"new\" });\r\n    }\r\n\r\n    onSaveClick = (saveType, formRef) => {\r\n        if (this.props.Login.screenName === \"IDS_REPORTVERSION\") {\r\n            this.onSaveVersion(saveType, formRef);\r\n        }\r\n        else if (this.props.Login.screenName === \"IDS_REPORTMASTER\") {\r\n            this.onSaveMaster(saveType, formRef);\r\n        }\r\n        else if (this.props.Login.screenName === \"IDS_REPORTDESIGN\") {\r\n            this.onSaveReportConfig(saveType, formRef);\r\n        }\r\n        else if (this.props.Login.screenName === \"IDS_PARAMETERMAPPING\") {\r\n            this.onSaveParameterMapping(saveType, formRef);\r\n        }\r\n        else if (this.props.Login.screenName === \"IDS_ACTIONMAPPING\") {\r\n            this.onSaveParameterAction(saveType, formRef);\r\n        }\r\n        else if (this.props.Login.screenName === \"IDS_SUBREPORTS\") {\r\n            this.onSaveSubReport(saveType, formRef);\r\n        }\r\n        else if (this.props.Login.screenName === \"IDS_IMAGES\") {\r\n            this.onSaveReportImage(saveType, formRef);\r\n        }\r\n        else if (this.props.Login.screenName === \"IDS_REPORTVALIDATION\") {\r\n            this.onSaveReportValidation(saveType, formRef);\r\n        }\r\n        else if (this.props.Login.screenName === \"IDS_REPORTPARAMETERMAPPING\") {\r\n            this.onSaveReportParameter(saveType, formRef);\r\n        }\r\n    }\r\n\r\n    onSaveMaster = (saveType, formRef) => {\r\n        const reportFile = this.state.selectedRecord.sfilename;\r\n\r\n        let isFileEdited = transactionStatus.NO;\r\n        const formData = new FormData();\r\n        let methodUrl = \"ReportDesigner\";\r\n\r\n        let postParam = undefined;\r\n        let reportmaster = { \"nsitecode\": this.props.Login.userInfo.nmastersitecode };\r\n        let inputParam = {};\r\n\r\n        if (this.props.Login.operation === \"update\") {\r\n            // edit           \r\n            postParam = {\r\n                inputListName: \"ReportMaster\", selectedObject: \"SelectedReportMaster\",\r\n                primaryKeyField: \"nreportcode\"\r\n            };\r\n            if (this.props.Login.reportVersionStatus === transactionStatus.APPROVED) {\r\n                let approvedReportMaster = this.props.Login.ApprovedReportMaster;\r\n                approvedReportMaster[\"sfilterreporttypecode\"] = this.props.Login.masterData && this.props.Login.masterData.SelectedFilterReportType && this.props.Login.masterData.SelectedFilterReportType.nreporttypecode.toString();\r\n                reportmaster = JSON.parse(JSON.stringify(approvedReportMaster));\r\n                reportmaster[\"ntransactionstatus\"] = this.state.selectedRecord[\"ntransactionstatus\"] ? this.state.selectedRecord[\"ntransactionstatus\"] : transactionStatus.ACTIVE;\r\n            }\r\n            else {\r\n                const data = JSON.parse(JSON.stringify(this.props.Login.selectedRecord));\r\n\r\n                reportmaster[\"nreporttypecode\"] = data[\"nreporttypecode\"].value;\r\n                reportmaster[\"nreportcode\"] = data[\"nreportcode\"];\r\n                reportmaster[\"nsampletypecode\"] = transactionStatus.NA;\r\n                reportmaster[\"nregtypecode\"] = transactionStatus.NA;\r\n                reportmaster[\"nregsubtypecode\"] = transactionStatus.NA;\r\n                reportmaster[\"napproveconfversioncode\"] = transactionStatus.NA;\r\n                reportmaster[\"nsectioncode\"] = transactionStatus.NA;\r\n                reportmaster[\"nreportmodulecode\"] = transactionStatus.NA;\r\n                reportmaster[\"nreportdecisiontypecode\"] = transactionStatus.NA;\r\n                reportmaster[\"ncertificatetypecode\"] = transactionStatus.NA;\r\n                reportmaster[\"ncoareporttypecode\"] = transactionStatus.NA;\r\n                reportmaster[\"nreporttemplatecode\"] = transactionStatus.NA;\r\n\r\n\r\n                reportmaster[\"sreportname\"] = Lims_JSON_stringify(replaceBackSlash(this.state.selectedRecord[\"sreportname\"]), false);\r\n                reportmaster[\"sdescription\"] = Lims_JSON_stringify(replaceBackSlash(this.state.selectedRecord[\"sdescription\"] || \"\"), false);\r\n                reportmaster[\"ntransactionstatus\"] = this.state.selectedRecord[\"ntransactionstatus\"] ? this.state.selectedRecord[\"ntransactionstatus\"] : transactionStatus.ACTIVE;\r\n                reportmaster[\"sfilterreporttypecode\"] = this.props.Login.masterData && this.props.Login.masterData.SelectedFilterReportType && this.props.Login.masterData.SelectedFilterReportType.nreporttypecode.toString();\r\n\r\n                if (//data[\"nreporttypecode\"].value === reportTypeEnum.SAMPLE || \r\n                    data[\"nreporttypecode\"].value === reportTypeEnum.COA) {\r\n                    reportmaster[\"nsampletypecode\"] = this.state.selectedRecord[\"nsampletypecode\"] ?\r\n                        this.state.selectedRecord[\"nsampletypecode\"].value : data[\"nsampletypecode\"].value;\r\n                    reportmaster[\"nregtypecode\"] = this.state.selectedRecord[\"nregtypecode\"] ?\r\n                        this.state.selectedRecord[\"nregtypecode\"].value : data[\"nregtypecode\"].value;\r\n                    reportmaster[\"nregsubtypecode\"] = this.state.selectedRecord[\"nregsubtypecode\"] ?\r\n                        this.state.selectedRecord[\"nregsubtypecode\"].value : transactionStatus.NA;\r\n\r\n                    reportmaster[\"napproveconfversioncode\"] = this.state.selectedRecord[\"napproveconfversioncode\"] ?\r\n                        this.state.selectedRecord[\"napproveconfversioncode\"].value : transactionStatus.NA;\r\n\r\n                    reportmaster[\"nsectioncode\"] = this.state.selectedRecord[\"nsectioncode\"] ?\r\n                        this.state.selectedRecord[\"nsectioncode\"].value : transactionStatus.NA;\r\n                    reportmaster[\"ncoareporttypecode\"] = this.state.selectedRecord[\"ncoareporttypecode\"] ?\r\n                        this.state.selectedRecord[\"ncoareporttypecode\"].value : transactionStatus.NA;\r\n                    reportmaster[\"nreporttemplatecode\"] = this.state.selectedRecord[\"nreporttemplatecode\"] ?\r\n                        this.state.selectedRecord[\"nreporttemplatecode\"].value : transactionStatus.NA;\r\n                    // if (data[\"nreporttypecode\"].value === reportTypeEnum.SAMPLE)\r\n                    // {\r\n                    //      reportmaster[\"nreportdecisiontypecode\"] = this.state.selectedRecord[\"nreportdecisiontypecode\"] \r\n                    //                  ? this.state.selectedRecord[\"nreportdecisiontypecode\"].value : data[\"nreportdecisiontypecode\"];\r\n                    // }\r\n                } else if (this.state.selectedRecord[\"nreporttypecode\"].value === reportTypeEnum.COAPREVIEW || this.state.selectedRecord[\"nreporttypecode\"].value === reportTypeEnum.COAPRELIMINARY) {\r\n                    reportmaster[\"nsampletypecode\"] = this.state.selectedRecord[\"nsampletypecode\"] ?\r\n                        this.state.selectedRecord[\"nsampletypecode\"].value : data[\"nsampletypecode\"].value;\r\n                    reportmaster[\"nregtypecode\"] = this.state.selectedRecord[\"nregtypecode\"] ?\r\n                        this.state.selectedRecord[\"nregtypecode\"].value : data[\"nregtypecode\"].value;\r\n                    reportmaster[\"nregsubtypecode\"] = this.state.selectedRecord[\"nregsubtypecode\"] ?\r\n                        this.state.selectedRecord[\"nregsubtypecode\"].value : transactionStatus.NA;\r\n\r\n                    reportmaster[\"napproveconfversioncode\"] = this.state.selectedRecord[\"napproveconfversioncode\"] ?\r\n                        this.state.selectedRecord[\"napproveconfversioncode\"].value : transactionStatus.NA;\r\n\r\n                    reportmaster[\"nsectioncode\"] = this.state.selectedRecord[\"nsectioncode\"] ?\r\n                        this.state.selectedRecord[\"nsectioncode\"].value : transactionStatus.NA;\r\n                    reportmaster[\"ncoareporttypecode\"] = this.state.selectedRecord[\"ncoareporttypecode\"] ?\r\n                        this.state.selectedRecord[\"ncoareporttypecode\"].value : transactionStatus.NA;\r\n                    reportmaster[\"nreporttemplatecode\"] = this.state.selectedRecord[\"nreporttemplatecode\"] ?\r\n                        this.state.selectedRecord[\"nreporttemplatecode\"].value : transactionStatus.NA;\r\n                } else if (data[\"nreporttypecode\"].value === reportTypeEnum.SAMPLE || data[\"nreporttypecode\"].value === reportTypeEnum.BATCH) {\r\n                    reportmaster[\"ncoareporttypecode\"] = this.state.selectedRecord[\"ncoareporttypecode\"] ?\r\n                        this.state.selectedRecord[\"ncoareporttypecode\"].value : transactionStatus.NA;\r\n                    reportmaster[\"ncertificatetypecode\"] = this.state.selectedRecord[\"ncertificatetypecode\"]\r\n                        ? this.state.selectedRecord[\"ncertificatetypecode\"].value : data[\"ncertificatetypecode\"];\r\n\r\n                    if (data[\"nreporttypecode\"].value === reportTypeEnum.SAMPLE\r\n                        && this.props.Login.masterData.SelectedReportDetail.isneedregtype === transactionStatus.YES) {\r\n                        reportmaster[\"nsampletypecode\"] = this.state.selectedRecord[\"nsampletypecode\"] ?\r\n                            this.state.selectedRecord[\"nsampletypecode\"].value : data[\"nsampletypecode\"].value;\r\n                        reportmaster[\"nregtypecode\"] = this.state.selectedRecord[\"nregtypecode\"] ?\r\n                            this.state.selectedRecord[\"nregtypecode\"].value : data[\"nregtypecode\"].value;\r\n                        reportmaster[\"nregsubtypecode\"] = this.state.selectedRecord[\"nregsubtypecode\"] ?\r\n                            this.state.selectedRecord[\"nregsubtypecode\"].value : transactionStatus.NA;\r\n                        reportmaster[\"nsectioncode\"] = this.state.selectedRecord[\"nsectioncode\"] ?\r\n                            this.state.selectedRecord[\"nsectioncode\"].value : transactionStatus.NA;\r\n\r\n                    }\r\n                }\r\n                else if (data[\"nreporttypecode\"].value === reportTypeEnum.SCREENWISE) {\r\n                    reportmaster[\"ncontrolcode\"] = this.state.selectedRecord[\"ncontrolcode\"]\r\n                        ? this.state.selectedRecord[\"ncontrolcode\"].value : data[\"ncontrolcode\"];\r\n\r\n                }\r\n                else {\r\n\r\n                    if (data[\"nreporttypecode\"].value === reportTypeEnum.MIS) {\r\n                        if (typeof this.state.selectedRecord[\"nreportmodulecode\"].value === \"string\") {\r\n                            reportmaster[\"nreportmodulecode\"] = 0;\r\n                            reportmaster[\"smoduledisplayname\"] = this.state.selectedRecord[\"nreportmodulecode\"].value;\r\n                            reportmaster[\"jsondata\"] = {\r\n                                \"sdisplayname\": {\r\n                                    \"en-US\": this.state.selectedRecord[\"nreportmodulecode\"].value,\r\n                                    \"ru-RU\": this.state.selectedRecord[\"nreportmodulecode\"].value,\r\n                                    \"tg-TG\": this.state.selectedRecord[\"nreportmodulecode\"].value\r\n                                }\r\n                            };\r\n                        }\r\n                        else {\r\n                            reportmaster[\"nreportmodulecode\"] = this.state.selectedRecord[\"nreportmodulecode\"].value;\r\n                        }\r\n                    }\r\n                    else {\r\n                        reportmaster[\"nreportmodulecode\"] = data[\"nreportmodulecode\"];\r\n                    }\r\n                }\r\n            }\r\n            inputParam = {\r\n                classUrl: this.props.Login.inputParam.classUrl,\r\n                methodUrl: \"ReportMaster\",\r\n                inputData: {\r\n                    userinfo: {\r\n                        ...this.props.Login.userInfo,\r\n                        sformname: Lims_JSON_stringify(this.props.Login.userInfo.sformname),\r\n                        smodulename: Lims_JSON_stringify(this.props.Login.userInfo.smodulename)\r\n                    }, reportmaster\r\n                },\r\n                operation: this.props.Login.operation,\r\n                saveType, formRef, postParam, searchRef: this.searchRef\r\n            }\r\n        }\r\n        else {\r\n            //add   \r\n            reportmaster[\"nreporttypecode\"] = this.state.selectedRecord[\"nreporttypecode\"].value;\r\n            //reportmaster[\"nreporttypecode\"] = this.state.selectedRecord[\"nreporttypecode\"].value == reportTypeEnum.COAPREVIEW ? reportTypeEnum.COA : this.state.selectedRecord[\"nreporttypecode\"].value;\r\n            reportmaster[\"nreportdecisiontypecode\"] = transactionStatus.NA;\r\n            reportmaster[\"ncertificatetypecode\"] = transactionStatus.NA;\r\n            reportmaster[\"nsampletypecode\"] = transactionStatus.NA;\r\n            reportmaster[\"nregtypecode\"] = transactionStatus.NA;\r\n            reportmaster[\"nregsubtypecode\"] = transactionStatus.NA;\r\n            reportmaster[\"napproveconfversioncode\"] = transactionStatus.NA;\r\n            reportmaster[\"nreportmodulecode\"] = transactionStatus.NA;\r\n            reportmaster[\"ncontrolcode\"] = transactionStatus.NA;\r\n            reportmaster[\"sreportname\"] = Lims_JSON_stringify(replaceBackSlash(this.state.selectedRecord[\"sreportname\"]), false);\r\n            reportmaster[\"sdescription\"] = Lims_JSON_stringify(replaceBackSlash(this.state.selectedRecord[\"sdescription\"] || \"\"), false);\r\n            reportmaster[\"ntransactionstatus\"] = this.state.selectedRecord[\"ntransactionstatus\"];\r\n            reportmaster[\"ncoareporttypecode\"] = this.state.selectedRecord[\"nreporttypecode\"].value !== reportTypeEnum.MIS && this.state.selectedRecord[\"nreporttypecode\"].value !== reportTypeEnum.SCREENWISE ?\r\n                this.state.selectedRecord[\"ncoareporttypecode\"].value : transactionStatus.NA;\r\n\r\n\r\n            if (this.state.selectedRecord[\"nreporttypecode\"].value === reportTypeEnum.SAMPLE) {\r\n                reportmaster[\"nsampletypecode\"] = this.state.selectedRecord[\"nsampletypecode\"] ?\r\n                    this.state.selectedRecord[\"nsampletypecode\"].value : transactionStatus.NA;\r\n                reportmaster[\"nregtypecode\"] = this.state.selectedRecord[\"nregtypecode\"] ?\r\n                    this.state.selectedRecord[\"nregtypecode\"].value : transactionStatus.NA;\r\n                reportmaster[\"nregsubtypecode\"] = this.state.selectedRecord[\"nregsubtypecode\"] ?\r\n                    this.state.selectedRecord[\"nregsubtypecode\"].value : transactionStatus.NA;\r\n                reportmaster[\"nsectioncode\"] = this.state.selectedRecord[\"nsectioncode\"]\r\n                    ? this.state.selectedRecord[\"nsectioncode\"].value\r\n                    : transactionStatus.NA;\r\n                reportmaster[\"nreportdecisiontypecode\"] = this.state.selectedRecord[\"nreportdecisiontypecode\"]\r\n                    ? this.state.selectedRecord[\"nreportdecisiontypecode\"].value\r\n                    : transactionStatus.NA;\r\n                reportmaster[\"ncertificatetypecode\"] = this.state.selectedRecord[\"ncertificatetypecode\"].value;\r\n\r\n            }\r\n            else if (this.state.selectedRecord[\"nreporttypecode\"].value === reportTypeEnum.BATCH) {\r\n                reportmaster[\"ncertificatetypecode\"] = this.state.selectedRecord[\"ncertificatetypecode\"].value;\r\n            }\r\n            else if (this.state.selectedRecord[\"nreporttypecode\"].value === reportTypeEnum.SCREENWISE) {\r\n                reportmaster[\"ncontrolcode\"] = this.state.selectedRecord[\"nreporttypecode\"].value === reportTypeEnum.SCREENWISE ?\r\n                    this.state.selectedRecord[\"ncontrolcode\"].value : transactionStatus.NA;\r\n\r\n            }\r\n            else if (this.state.selectedRecord[\"nreporttypecode\"].value === reportTypeEnum.COA) {\r\n                reportmaster[\"nsampletypecode\"] = this.state.selectedRecord && this.state.selectedRecord[\"nsampletypecode\"] ? this.state.selectedRecord[\"nsampletypecode\"].value : transactionStatus.NA;\r\n                reportmaster[\"nregtypecode\"] = this.state.selectedRecord && this.state.selectedRecord[\"nregtypecode\"] ? this.state.selectedRecord[\"nregtypecode\"].value : transactionStatus.NA;\r\n                reportmaster[\"nregsubtypecode\"] = this.state.selectedRecord && this.state.selectedRecord[\"nregsubtypecode\"] ? this.state.selectedRecord[\"nregsubtypecode\"].value : transactionStatus.NA;\r\n                reportmaster[\"napproveconfversioncode\"] = this.state.selectedRecord &&\r\n                    this.state.selectedRecord[\"napproveconfversioncode\"] ?\r\n                    this.state.selectedRecord[\"napproveconfversioncode\"].value : transactionStatus.NA;\r\n                reportmaster[\"nsectioncode\"] = this.state.selectedRecord[\"nsectioncode\"]\r\n                    ? this.state.selectedRecord[\"nsectioncode\"].value\r\n                    : transactionStatus.NA;\r\n                reportmaster[\"nreporttemplatecode\"] = this.state.selectedRecord && this.state.selectedRecord[\"nreporttemplatecode\"] ? this.state.selectedRecord[\"nreporttemplatecode\"].value : transactionStatus.NA;\r\n            } else if (this.state.selectedRecord[\"nreporttypecode\"].value === reportTypeEnum.COAPREVIEW || this.state.selectedRecord[\"nreporttypecode\"].value === reportTypeEnum.COAPRELIMINARY) {\r\n                reportmaster[\"nsampletypecode\"] = this.state.selectedRecord && this.state.selectedRecord[\"nsampletypecode\"] ? this.state.selectedRecord[\"nsampletypecode\"].value : transactionStatus.NA;\r\n                reportmaster[\"nregtypecode\"] = this.state.selectedRecord && this.state.selectedRecord[\"nregtypecode\"] ? this.state.selectedRecord[\"nregtypecode\"].value : transactionStatus.NA;\r\n                reportmaster[\"nregsubtypecode\"] = this.state.selectedRecord && this.state.selectedRecord[\"nregsubtypecode\"] ? this.state.selectedRecord[\"nregsubtypecode\"].value : transactionStatus.NA;\r\n                reportmaster[\"napproveconfversioncode\"] = this.state.selectedRecord &&\r\n                    this.state.selectedRecord[\"napproveconfversioncode\"] ?\r\n                    this.state.selectedRecord[\"napproveconfversioncode\"].value : transactionStatus.NA;\r\n                reportmaster[\"nsectioncode\"] = this.state.selectedRecord[\"nsectioncode\"]\r\n                    ? this.state.selectedRecord[\"nsectioncode\"].value\r\n                    : transactionStatus.NA;\r\n                reportmaster[\"nreporttemplatecode\"] = this.state.selectedRecord && this.state.selectedRecord[\"nreporttemplatecode\"] ? this.state.selectedRecord[\"nreporttemplatecode\"].value : transactionStatus.NA;\r\n\r\n            }\r\n            else {\r\n                if (typeof this.state.selectedRecord[\"nreportmodulecode\"].value === \"string\") {\r\n                    reportmaster[\"nreportmodulecode\"] = 0;\r\n                    reportmaster[\"smoduledisplayname\"] = this.state.selectedRecord[\"nreportmodulecode\"].value;\r\n                    reportmaster[\"jsondata\"] = {\r\n                        \"sdisplayname\": {\r\n                            \"en-US\": this.state.selectedRecord[\"nreportmodulecode\"].value,\r\n                            \"ru-RU\": this.state.selectedRecord[\"nreportmodulecode\"].value,\r\n                            \"tg-TG\": this.state.selectedRecord[\"nreportmodulecode\"].value\r\n                        }\r\n                    };\r\n                }\r\n                else {\r\n                    reportmaster[\"nreportmodulecode\"] = this.state.selectedRecord[\"nreportmodulecode\"].value;\r\n                }\r\n\r\n            }\r\n\r\n            let reportdetails = {\r\n                // ncoareporttypecode: this.state.selectedRecord[\"nreporttypecode\"].value !== reportTypeEnum.MIS && this.state.selectedRecord[\"nreporttypecode\"].value !== reportTypeEnum.SCREENWISE  ?\r\n                //     this.state.selectedRecord[\"ncoareporttypecode\"].value : transactionStatus.NA,\r\n                // nsectioncode: this.state.selectedRecord[\"nreporttypecode\"].value === reportTypeEnum.SAMPLE ?\r\n                // this.state.selectedRecord[\"nsectioncode\"]? this.state.selectedRecord[\"nsectioncode\"].value : transactionStatus.NA: transactionStatus.NA,\r\n                // nreportdecisiontypecode: this.state.selectedRecord[\"nreporttypecode\"].value === reportTypeEnum.SAMPLE ?\r\n                //                 this.state.selectedRecord[\"nreportdecisiontypecode\"].value : transactionStatus.NA,\r\n                // ncertificatetypecode: this.state.selectedRecord[\"nreporttypecode\"].value === reportTypeEnum.BATCH ?\r\n                //                 this.state.selectedRecord[\"ncertificatetypecode\"].value : transactionStatus.NA,\r\n                ntransactionstatus: transactionStatus.DRAFT,\r\n                nversionno: -1,\r\n                nisplsqlquery: this.state.selectedRecord[\"nisplsqlquery\"] ? this.state.selectedRecord[\"nisplsqlquery\"] : transactionStatus.NO,\r\n              sreportformatdetail :this.state.selectedRecord[\"sreportformatdetail\"] == undefined ? 'pdf' : this.state.selectedRecord[\"sreportformatdetail\"],\r\n\r\n            };\r\n\r\n            // if(this.state.selectedRecord[\"nreporttypecode\"].value === reportTypeEnum.COA){\r\n\r\n            //     reportdetails={\r\n            //         ncoareporttypecode : this.state.selectedRecord ? this.state.selectedRecord.ncoareporttypecode.value : transactionStatus.NA,\r\n            //         nreportdecisiontypecode : transactionStatus.NA,\r\n            //         ncertificatetypecode : transactionStatus.NA,\r\n            //         nsectioncode : this.state.selectedRecord && this.state.selectedRecord.nsectioncode ? this.state.selectedRecord.nsectioncode.value : transactionStatus.NA ,\r\n            //         ntransactionstatus: transactionStatus.DRAFT,\r\n            //         nisplsqlquery: this.state.selectedRecord ? this.state.selectedRecord[\"nisplsqlquery\"] || transactionStatus.NO : transactionStatus.NO,\r\n            //     }\r\n            // }\r\n\r\n            //reportdetails[\"nversionno\"] = -1;\r\n            // reportdetails[\"nisplsqlquery\"] = this.state.selectedRecord ? this.state.selectedRecord[\"nisplsqlquery\"] || transactionStatus.NO : transactionStatus.NO;\r\n\r\n            if (reportFile && Array.isArray(reportFile) && reportFile.length > 0) {\r\n\r\n                const splittedFileName = reportFile[0].name.split('.');\r\n                const fileExtension = reportFile[0].name.split('.')[splittedFileName.length - 1];\r\n                const uniquefilename = this.state.selectedRecord.sfilename === \"\" ?\r\n                    this.state.selectedRecord.sfilename : create_UUID() + '.' + fileExtension;\r\n\r\n                reportdetails[\"sfilename\"] = Lims_JSON_stringify(reportFile[0].name.trim(), false);\r\n                reportdetails[\"ssystemfilename\"] = uniquefilename;\r\n\r\n                formData.append(\"uploadedFile0\", reportFile[0]);\r\n                formData.append(\"uniquefilename0\", uniquefilename);\r\n                isFileEdited = transactionStatus.YES;\r\n                //reportmaster[\"sfilename\"] = \"\";\r\n            }\r\n\r\n            formData.append(\"isFileEdited\", isFileEdited);\r\n            formData.append(\"filecount\", 1);\r\n            formData.append(\"reportdetails\", JSON.stringify(reportdetails));\r\n\r\n            // formData.append(\"userinfo\", JSON.stringify(this.props.Login.userInfo));\r\n            formData.append(\"reportmaster\", JSON.stringify(reportmaster));\r\n        \r\n\r\n            inputParam = {\r\n                classUrl: this.props.Login.inputParam.classUrl,\r\n                methodUrl: methodUrl,//\"ReportDesigner\",\r\n                //  inputData: inputData,\r\n                inputData: {\r\n                    userinfo: {\r\n                        ...this.props.Login.userInfo,\r\n                        sformname: Lims_JSON_stringify(this.props.Login.userInfo.sformname),\r\n                        smodulename: Lims_JSON_stringify(this.props.Login.userInfo.smodulename)\r\n                    }\r\n                },\r\n                formData: formData,\r\n                isFileupload: true,\r\n                operation: this.props.Login.operation,\r\n                saveType, formRef, postParam, searchRef: this.searchRef\r\n            }\r\n        }\r\n\r\n        const masterData = this.props.Login.masterData;\r\n\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData }, saveType\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.crudMaster(inputParam, masterData, \"openModal\");\r\n        }\r\n\r\n    }\r\n\r\n    onSaveVersion = (saveType, formRef) => {\r\n        const reportFile = this.state.selectedRecord.sfilename;\r\n\r\n        let isFileEdited = transactionStatus.NO;\r\n        const formData = new FormData();\r\n\r\n        const postParam = {\r\n            inputListName: \"ReportMaster\", selectedObject: \"SelectedReportMaster\",\r\n            primaryKeyField: \"nreportcode\"\r\n        };\r\n        const reportmaster = this.props.Login.masterData.SelectedReportMaster;\r\n        reportmaster[\"sfilterreporttypecode\"] = this.props.Login.masterData && this.props.Login.masterData.SelectedFilterReportType && this.props.Login.masterData.SelectedFilterReportType.nreporttypecode.toString();\r\n\r\n\r\n        let reportdetails = {\r\n            // ncoareporttypecode: this.props.Login.masterData.SelectedReportMaster[\"nreporttypecode\"] !== reportTypeEnum.MIS &&this.props.Login.masterData.SelectedReportMaster[\"nreporttypecode\"] !== reportTypeEnum.SCREENWISE  ?\r\n            //     this.state.selectedRecord[\"ncoareporttypecode\"].value : transactionStatus.NA,\r\n            // nsectioncode: this.props.Login.masterData.SelectedReportMaster[\"nreporttypecode\"] === reportTypeEnum.SAMPLE ?\r\n            //                 this.state.selectedRecord[\"nsectioncode\"] ? \r\n            //                 this.state.selectedRecord[\"nsectioncode\"].value : transactionStatus.NA\r\n            //                 : transactionStatus.NA,\r\n            // nreportdecisiontypecode: this.props.Login.masterData.SelectedReportMaster[\"nreporttypecode\"] === reportTypeEnum.SAMPLE ?\r\n            //                     this.state.selectedRecord[\"nreportdecisiontypecode\"].value : transactionStatus.NA,\r\n            // ncertificatetypecode: this.props.Login.masterData.SelectedReportMaster[\"nreporttypecode\"] === reportTypeEnum.BATCH ?\r\n            //                     this.state.selectedRecord[\"ncertificatetypecode\"].value : transactionStatus.NA,\r\n\r\n            ntransactionstatus: transactionStatus.DRAFT,\r\n            nisplsqlquery: this.state.selectedRecord[\"nisplsqlquery\"] ? this.state.selectedRecord[\"nisplsqlquery\"] : transactionStatus.NO,\r\n        };\r\n\r\n        if (this.props.Login.operation === \"update\") {\r\n            // edit\r\n            // postParam =  { inputListName : \"ReportDetails\", selectedObject : \"SelectedReportDetail\", \r\n            //                 primaryKeyField : \"nreportdetailcode\", isChild:true, };\r\n            const data = JSON.parse(JSON.stringify(this.props.Login.selectedRecord));\r\n\r\n            reportdetails[\"nreportdetailcode\"] = data[\"nreportdetailcode\"];\r\n            reportdetails[\"nversionno\"] = data[\"nversionno\"];\r\n            reportdetails[\"sfilename\"] = Lims_JSON_stringify(data[\"sfilename\"][0].path ? data[\"sfilename\"][0].path : data[\"sfilename\"], false);\r\n            reportdetails[\"ssystemfilename\"] = data[\"ssystemfilename\"];\r\n            reportdetails[\"sreportformatdetail\"]= this.state.selectedRecord[\"sreportformatdetail\"] == undefined ? 'pdf' : this.state.selectedRecord[\"sreportformatdetail\"];\r\n\r\n        }\r\n        else {\r\n            //add               \r\n            reportdetails[\"nversionno\"] = -1;\r\n\r\n        }\r\n\r\n        if (reportFile && Array.isArray(reportFile) && reportFile.length > 0) {\r\n\r\n            const splittedFileName = reportFile[0].name.split('.');\r\n            const fileExtension = reportFile[0].name.split('.')[splittedFileName.length - 1];\r\n            const uniquefilename = this.state.selectedRecord.sfilename === \"\" ?\r\n                this.state.selectedRecord.sfilename : create_UUID() + '.' + fileExtension;\r\n\r\n            reportdetails[\"sfilename\"] = Lims_JSON_stringify(reportFile[0].name, false);\r\n            reportdetails[\"ssystemfilename\"] = uniquefilename;\r\n\r\n            formData.append(\"uploadedFile0\", reportFile[0]);\r\n            formData.append(\"uniquefilename0\", uniquefilename);\r\n            isFileEdited = transactionStatus.YES;\r\n            //reportmaster[\"sfilename\"] = \"\";\r\n            reportdetails[\"sreportformatdetail\"]= this.state.selectedRecord[\"sreportformatdetail\"] == undefined ? 'pdf' : this.state.selectedRecord[\"sreportformatdetail\"];\r\n            //formData.append(\"sreportformatdetail\",sreportformatdetail);\r\n        }\r\n\r\n\r\n        formData.append(\"isFileEdited\", isFileEdited);\r\n        formData.append(\"filecount\", 1);\r\n        formData.append(\"reportdetails\", JSON.stringify(reportdetails));\r\n        //formData.append(\"userinfo\", JSON.stringify(this.props.Login.userInfo));\r\n        formData.append(\"reportmaster\", JSON.stringify(reportmaster));\r\n\r\n\r\n        const inputParam = {\r\n            classUrl: this.props.Login.inputParam.classUrl,\r\n            methodUrl: \"ReportDetails\",\r\n            inputData: {\r\n                userinfo: {\r\n                    ...this.props.Login.userInfo,\r\n                    sformname: Lims_JSON_stringify(this.props.Login.userInfo.sformname),\r\n                    smodulename: Lims_JSON_stringify(this.props.Login.userInfo.smodulename),\r\n                }\r\n            },\r\n            formData: formData,\r\n            isFileupload: true,\r\n            operation: this.props.Login.operation,\r\n            saveType, formRef, postParam, searchRef: this.searchRef, isChild: true\r\n        }\r\n        const masterData = this.props.Login.masterData;\r\n\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData }, saveType\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.crudMaster(inputParam, masterData, \"openModal\");\r\n        }\r\n    }\r\n\r\n    onSaveReportConfig = (saveType, formRef) => {\r\n\r\n        const postParam = {\r\n            inputListName: \"ReportMaster\", selectedObject: \"SelectedReportMaster\",\r\n            primaryKeyField: \"nreportcode\"\r\n        };\r\n        if (this.state.addDesignParam.length === this.props.Login.masterData.ReportParameter.length) {\r\n            let operation = this.props.Login.operation;\r\n            let inputData = [];\r\n            let selectedId = null;\r\n            let data = [];\r\n            //let i = 0;\r\n\r\n            inputData[\"userinfo\"] = {\r\n                ...this.props.Login.userInfo,\r\n                sformname: Lims_JSON_stringify(this.props.Login.userInfo.sformname),\r\n                smodulename: Lims_JSON_stringify(this.props.Login.userInfo.smodulename),\r\n            };\r\n\r\n            if (JSON.stringify(this.state.addDesignParam) !== JSON.stringify(this.props.Login.masterData.ReportDesignConfig)) {\r\n                this.state.addDesignParam.forEach(item => {\r\n                    data.push({\r\n                        \"nreportdetailcode\": this.props.Login.masterData.SelectedReportDetail.nreportdetailcode,\r\n                        \"ndesigncomponentcode\": typeof item.ndesigncomponentcode === \"number\" ? item.ndesigncomponentcode :\r\n                            item.ndesigncomponentcode.value,\r\n                        \"nsqlquerycode\": item.nsqlquerycode ? (typeof item.nsqlquerycode === \"number\" ?\r\n                            item.nsqlquerycode : item.nsqlquerycode.value) : transactionStatus.NA,\r\n                        \"nreportparametercode\": typeof item.nreportparametercode === \"number\" ?\r\n                            item.nreportparametercode : item.nreportparametercode.value,\r\n                        \"sdisplayname\": item.sdisplayname,\r\n                        \"ndays\": item.ndays ? item.ndays : 0\r\n                    });\r\n\r\n                })\r\n                inputData[\"reportdesignconfig\"] = data;\r\n\r\n                const inputParam = {\r\n                    classUrl: this.props.Login.inputParam.classUrl,\r\n                    methodUrl: \"ReportDesignParameter\",\r\n                    displayName: this.props.Login.inputParam.displayName,\r\n                    inputData: inputData, postParam,\r\n                    operation: operation, saveType, formRef, dataState: undefined, selectedId, isChild: true\r\n                }\r\n                if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\r\n                    const updateInfo = {\r\n                        typeName: DEFAULT_RETURN,\r\n                        data: {\r\n                            loadEsign: true, screenData: { inputParam, masterData: this.props.Login.masterData },\r\n                            saveType\r\n                        }\r\n                    }\r\n                    this.props.updateStore(updateInfo);\r\n                }\r\n                else {\r\n                    this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\r\n                }\r\n            }\r\n            else {\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_NODATATOSAVE\" }))\r\n            }\r\n        }\r\n        else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_CONFIGUREALLPARAMETERS\" }))\r\n        }\r\n    }\r\n\r\n    onSaveParameterMapping = (saveType, formRef) => {\r\n\r\n        let operation = this.props.Login.operation;\r\n        let inputData = [];\r\n        let selectedId = null;\r\n        const postParam = {\r\n            inputListName: \"ReportMaster\", selectedObject: \"SelectedReportMaster\",\r\n            primaryKeyField: \"nreportcode\"\r\n        };\r\n\r\n        inputData[\"userinfo\"] = {\r\n            ...this.props.Login.userInfo,\r\n            sformname: Lims_JSON_stringify(this.props.Login.userInfo.sformname),\r\n            smodulename: Lims_JSON_stringify(this.props.Login.userInfo.smodulename),\r\n        };\r\n        inputData[\"reportparametermapping\"] = [];\r\n        inputData[\"reportdetails\"] = this.props.Login.masterData.SelectedReportDetail;\r\n        //inputData[\"reportparameteraction\"] = [];\r\n\r\n        // if ((this.props.Login.masterData.ReportParameterMapping.length > 0 && this.state.mappingGridData.length === 0)\r\n        //     || (this.props.Login.masterData.ReportParameterMapping.length === 0 && this.state.mappingGridData.length > 0))\r\n        // {\r\n        // if (JSON.stringify(this.state.addMappingParam) !==JSON.stringify(this.props.Login.masterData.ReportParameterMapping))\r\n        // {\r\n        let count = 0;\r\n        this.state.mappingGridData.forEach(item => {\r\n            if (item.nisactionparent === transactionStatus.YES)\r\n                count = count + 1;\r\n            inputData[\"reportparametermapping\"].push({\r\n                \"nreportdetailcode\": this.props.Login.masterData.SelectedReportDetail.nreportdetailcode,\r\n                \"nparentreportdesigncode\": item.nparentreportdesigncode,\r\n                \"nchildreportdesigncode\": item.nchildreportdesigncode,\r\n                \"sfieldname\": item.sfieldname,\r\n                \"nisactionparent\": item.nisactionparent\r\n            });\r\n            // if(item.nactionparameter === transactionStatus.YES)\r\n            //     inputData[\"reportparameteraction\"].push({\"nreportdetailcode\":this.props.Login.masterData.SelectedReportDetail.nreportdetailcode,\r\n            //                                                 \"nreportdesigncode\": item.nchildreportdesigncode,\r\n            //                                                 \"nparentreportdesigncode\": item.nparentreportdesigncode,                                                            \r\n            //                                             });  \r\n        })\r\n        let valid = false;\r\n        if (this.state.mappingGridData.length > 0) {\r\n            if (count === this.props.Login.childComponentList.length) {\r\n                valid = true;\r\n            }\r\n        }\r\n        else {\r\n            if (this.props.Login.masterData.ReportParameterMapping.length === 0 && this.state.mappingGridData.length === 0) {\r\n                valid = false;\r\n            }\r\n            else\r\n                valid = true;\r\n        }\r\n\r\n        if (valid) {\r\n            const inputParam = {\r\n                classUrl: this.props.Login.inputParam.classUrl,\r\n                methodUrl: \"ReportParameterMapping\",\r\n                displayName: this.props.Login.inputParam.displayName,\r\n                inputData: inputData, postParam,\r\n                operation: operation, saveType, formRef, dataState: undefined, selectedId, isChild: true\r\n            }\r\n            if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        loadEsign: true, screenData: { inputParam, masterData: this.props.Login.masterData }, saveType\r\n                        //openModal: true, screenName: this.props.intl.formatMessage({ id: this.props.Login.inputParam.displayName }),\r\n                        ///operation: this.props.Login.operation\r\n                    }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n            else {\r\n                this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\r\n            }\r\n        }\r\n        else {\r\n            if (this.state.mappingGridData.length === 0) {\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_NODATATOSAVE\" }));\r\n            }\r\n            else {\r\n                if (count !== this.props.Login.childComponentList.length)\r\n                    toast.warn(this.props.intl.formatMessage({ id: \"IDS_INSUFFICIENTACTIONPARENT\" }));\r\n                else\r\n                    toast.warn(this.props.intl.formatMessage({ id: \"IDS_NODATATOSAVE\" }));\r\n            }\r\n        }\r\n    }\r\n\r\n    // onSaveParameterMapping = (saveType, formRef) =>{\r\n\r\n    //         let operation = this.props.Login.operation;\r\n    //         let inputData = [];\r\n    //         let selectedId = null;\r\n    //         let data = [];\r\n    //         //let i = 0;\r\n\r\n    //         inputData[\"userinfo\"] = this.props.Login.userInfo;     \r\n\r\n    //         this.state.addMappingParam.forEach(item => {          \r\n    //             data.push({\r\n    //                 \"nreportdetailcode\":this.props.Login.masterData.SelectedReportDetail.nreportdetailcode,\r\n    //                 \"nparentreportdesigncode\": typeof item.nparentreportdesigncode === \"number\"? item.nparentreportdesigncode:\r\n    //                                         item.nparentreportdesigncode.value,\r\n    //                 \"nchildreportdesigncode\": typeof item.nchildreportdesigncode === \"number\"? item.nchildreportdesigncode:\r\n    //                                         item.nchildreportdesigncode.value,\r\n\r\n    //                 \"sfieldname\": typeof item.sfieldname === \"string\"? item.sfieldname:\r\n    //                                         item.sfieldname.value\r\n    //             });         \r\n\r\n    //         })\r\n    //         inputData[\"reportparametermapping\"] = data;\r\n\r\n    //         inputData[\"reportparameteraction\"] = [];\r\n\r\n    //         this.state.actionGridData.forEach(item => {          \r\n    //             inputData[\"reportparameteraction\"].push({\r\n    //                 \"nreportdetailcode\":this.props.Login.masterData.SelectedReportDetail.nreportdetailcode,\r\n    //                 \"nreportdesigncode\": typeof item.nchildreportdesigncode === \"number\"? item.nchildreportdesigncode:\r\n    //                                         item.nchildreportdesigncode.value,\r\n    //                 \"nparentreportdesigncode\": typeof item.nactionreportdesigncode === \"number\"? item.nactionreportdesigncode:\r\n    //                                         item.nactionreportdesigncode.value,\r\n\r\n    //             });  \r\n    //         })         \r\n\r\n    //         const inputParam = {\r\n    //             classUrl: this.props.Login.inputParam.classUrl,\r\n    //             methodUrl: \"ReportParameterMapping\",\r\n    //             displayName: this.props.Login.inputParam.displayName,\r\n    //             inputData: inputData,\r\n    //             operation: operation, saveType, formRef, dataState:undefined, selectedId\r\n    //         }\r\n    //         if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\r\n    //             const updateInfo = {\r\n    //                 typeName: DEFAULT_RETURN,\r\n    //                 data: {\r\n    //                     loadEsign: true, screenData: { inputParam, masterData: this.props.Login.masterData }, saveType\r\n    //                     //openModal: true, screenName: this.props.intl.formatMessage({ id: this.props.Login.inputParam.displayName }),\r\n    //                     ///operation: this.props.Login.operation\r\n    //                 }\r\n    //             }\r\n    //             this.props.updateStore(updateInfo);\r\n    //         }\r\n    //         else {\r\n    //             this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\r\n    //         }\r\n    // }\r\n\r\n    // onSaveParameterAction = (saveType, formRef) =>{\r\n\r\n    //          let operation = this.props.Login.operation;\r\n    //         let inputData = [];\r\n    //         let selectedId = null;\r\n    //         let data = [];\r\n\r\n    //         inputData[\"userinfo\"] = this.props.Login.userInfo;     \r\n\r\n    //         this.state.addActionParam.forEach(item => {          \r\n    //             data.push({\r\n    //                 \"nreportdetailcode\":this.props.Login.masterData.SelectedReportDetail.nreportdetailcode,\r\n    //                 \"nreportdesigncode\": typeof item.nreportdesigncode === \"number\"? item.nreportdesigncode:\r\n    //                                         item.nreportdesigncode.value,\r\n    //                 \"nparentreportdesigncode\": typeof item.nparentreportdesigncode === \"number\"? item.nparentreportdesigncode:\r\n    //                                         item.nparentreportdesigncode.value,\r\n\r\n    //             });         \r\n\r\n    //         })\r\n    //         inputData[\"reportparameteraction\"] = data;\r\n\r\n    //         const inputParam = {\r\n    //             classUrl: this.props.Login.inputParam.classUrl,\r\n    //             methodUrl: \"ReportParameterAction\",\r\n    //             displayName: this.props.Login.inputParam.displayName,\r\n    //             inputData: inputData,\r\n    //             operation: operation, saveType, formRef, dataState:undefined, selectedId\r\n    //         }\r\n    //         if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\r\n    //             const updateInfo = {\r\n    //                 typeName: DEFAULT_RETURN,\r\n    //                 data: {\r\n    //                     loadEsign: true, screenData: { inputParam, masterData: this.props.Login.masterData }, saveType\r\n    //                     // openModal: true, screenName: this.props.intl.formatMessage({ id: this.props.Login.inputParam.displayName }),\r\n    //                     // operation: this.props.Login.operation\r\n    //                 }\r\n    //             }\r\n    //             this.props.updateStore(updateInfo);\r\n    //         }\r\n    //         else {\r\n    //             this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\r\n    //         }\r\n    // }\r\n\r\n    onSaveSubReport = (saveType, formRef) => {\r\n        const reportFile = this.state.selectedRecord.sfilename;\r\n\r\n        const formData = new FormData();\r\n\r\n        const postParam = {\r\n            inputListName: \"ReportMaster\", selectedObject: \"SelectedReportMaster\",\r\n            primaryKeyField: \"nreportcode\"\r\n        };\r\n        const reportdetails = this.props.Login.masterData.SelectedReportDetail;\r\n        const subreportdetails = {\r\n            nreportdetailcode: reportdetails.nreportdetailcode,\r\n            nreportcode: reportdetails.nreportcode\r\n        };\r\n\r\n        if (reportFile && Array.isArray(reportFile) && reportFile.length > 0) {\r\n\r\n            const splittedFileName = reportFile[0].name.split('.');\r\n            const fileExtension = reportFile[0].name.split('.')[splittedFileName.length - 1];\r\n            const uniquefilename = this.state.selectedRecord.sfilename === \"\" ?\r\n                this.state.selectedRecord.sfilename : create_UUID() + '.' + fileExtension;\r\n\r\n            subreportdetails[\"sfilename\"] = Lims_JSON_stringify(reportFile[0].name.trim(), false);;\r\n            subreportdetails[\"ssystemfilename\"] = uniquefilename;\r\n\r\n            formData.append(\"uploadedFile0\", reportFile[0]);\r\n            formData.append(\"uniquefilename0\", uniquefilename);\r\n        }\r\n\r\n        formData.append(\"filecount\", 1);\r\n        //formData.append(\"reportdetails\", JSON.stringify(reportdetails));\r\n        formData.append(\"subreportdetails\", JSON.stringify(subreportdetails));\r\n        // formData.append(\"userinfo\", JSON.stringify(this.props.Login.userInfo));\r\n\r\n        const inputParam = {\r\n            classUrl: this.props.Login.inputParam.classUrl,\r\n            methodUrl: \"SubReportDetails\",\r\n            inputData: {\r\n                userinfo: {\r\n                    ...this.props.Login.userInfo,\r\n                    sformname: Lims_JSON_stringify(this.props.Login.userInfo.sformname),\r\n                    smodulename: Lims_JSON_stringify(this.props.Login.userInfo.smodulename),\r\n                }\r\n            },\r\n            formData: formData,\r\n            isFileupload: true,\r\n            operation: this.props.Login.operation,\r\n            saveType, formRef, postParam, searchRef: this.searchRef, isChild: true\r\n        }\r\n        const masterData = this.props.Login.masterData;\r\n\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData }, saveType\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.crudMaster(inputParam, masterData, \"openModal\");\r\n        }\r\n    }\r\n\r\n    onSaveReportImage = (saveType, formRef) => {\r\n        const reportFile = this.state.selectedRecord.sfilename;\r\n\r\n        const formData = new FormData();\r\n\r\n        const postParam = {\r\n            inputListName: \"ReportMaster\", selectedObject: \"SelectedReportMaster\",\r\n            primaryKeyField: \"nreportcode\"\r\n        };\r\n        const reportdetails = this.props.Login.masterData.SelectedReportDetail;\r\n        const reportimages = {\r\n            nreportdetailcode: reportdetails.nreportdetailcode,\r\n            nreportcode: reportdetails.nreportcode\r\n        };\r\n\r\n        if (reportFile && Array.isArray(reportFile) && reportFile.length > 0) {\r\n\r\n            const splittedFileName = reportFile[0].name.split('.');\r\n            const fileExtension = reportFile[0].name.split('.')[splittedFileName.length - 1];\r\n            const uniquefilename = this.state.selectedRecord.sfilename === \"\" ?\r\n                this.state.selectedRecord.sfilename : create_UUID() + '.' + fileExtension;\r\n\r\n            reportimages[\"sfilename\"] = Lims_JSON_stringify(reportFile[0].name.trim(), false);\r\n            reportimages[\"ssystemfilename\"] = uniquefilename;\r\n\r\n            formData.append(\"uploadedFile0\", reportFile[0]);\r\n            formData.append(\"uniquefilename0\", uniquefilename);\r\n        }\r\n\r\n        formData.append(\"filecount\", 1);\r\n        //formData.append(\"reportdetails\", JSON.stringify(reportdetails));\r\n        formData.append(\"reportimages\", JSON.stringify(reportimages));\r\n        //  formData.append(\"userinfo\", JSON.stringify(this.props.Login.userInfo));\r\n\r\n        const inputParam = {\r\n            classUrl: this.props.Login.inputParam.classUrl,\r\n            methodUrl: \"ReportImages\",\r\n            inputData: {\r\n                userinfo: {\r\n                    ...this.props.Login.userInfo,\r\n                    sformname: Lims_JSON_stringify(this.props.Login.userInfo.sformname),\r\n                    smodulename: Lims_JSON_stringify(this.props.Login.userInfo.smodulename),\r\n                }\r\n            },\r\n            formData: formData,\r\n            isFileupload: true,\r\n            operation: this.props.Login.operation,\r\n            saveType, formRef, postParam, searchRef: this.searchRef, isChild: true\r\n        }\r\n        const masterData = this.props.Login.masterData;\r\n\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData }, saveType\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.crudMaster(inputParam, masterData, \"openModal\");\r\n        }\r\n    }\r\n\r\n\r\n    onSaveReportValidation = (saveType, formRef) => {\r\n\r\n        if (this.state.selectedRecord.ntranscode === undefined) {\r\n            toast.info(`${this.props.intl.formatMessage({ id: \"IDS_SELECT\" })} ${this.props.intl.formatMessage({ id: \"IDS_TRANSACTIONSTATUS\" })}`);\r\n        } else {\r\n\r\n            const inputParam = {\r\n                nformcode: this.props.Login.userInfo.nformcode,\r\n                classUrl: this.props.Login.inputParam.classUrl,\r\n                methodUrl: \"ReportValidation\",\r\n                inputData: {\r\n                    userinfo: {\r\n                        ...this.props.Login.userInfo,\r\n                        sformname: Lims_JSON_stringify(this.props.Login.userInfo.sformname),\r\n                        smodulename: Lims_JSON_stringify(this.props.Login.userInfo.smodulename),\r\n                    },\r\n                    nformcode: this.props.Login.masterData.SelectedReportMaster.nformcode,\r\n                    ncontrolcode: this.props.Login.masterData.SelectedReportMaster.ncontrolcode,\r\n                    nreportdetailcode: this.props.Login.masterData.SelectedReportDetail.nreportdetailcode,\r\n                    ntransctionstatus: this.state.selectedRecord.ntranscode.map(item => item.value).join(\",\")\r\n                },\r\n                //ntransationstatus:this.state.selectedRecord.ntranscode.map(item => item.ntranscode).join(\",\") },\r\n                operation: \"create\",\r\n                saveType, formRef,\r\n            }\r\n\r\n            const masterData = this.props.Login.masterData;\r\n\r\n            if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        loadEsign: true, screenData: { inputParam, masterData }, saveType\r\n                    }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n            else {\r\n                this.props.crudMaster(inputParam, masterData, \"openModal\");\r\n            }\r\n        }\r\n    }\r\n\r\n    onSaveReportParameter = (saveType, formRef) => {\r\n\r\n        if (this.state.gridDataparmeter.length === 0) {\r\n            toast.info(`${this.props.intl.formatMessage({ id: \"IDS_ADDTHEPARMTERIN GERIDTHENSAVE\" })}`);\r\n\r\n        } else {\r\n            const inputParam = {\r\n                nformcode: this.props.Login.userInfo.nformcode,\r\n                classUrl: this.props.Login.inputParam.classUrl, //\"controlbasedreport\",\r\n                methodUrl: \"ControlBasedReportparametreInsert\",\r\n                inputData: {\r\n                    userinfo: {\r\n                        ...this.props.Login.userInfo,\r\n                        sformname: Lims_JSON_stringify(this.props.Login.userInfo.sformname),\r\n                        smodulename: Lims_JSON_stringify(this.props.Login.userInfo.smodulename),\r\n                    },\r\n                    //indexof:\r\n                    ncontrolCode: this.props.Login.userInfo.nformcode,\r\n                    nreportcode: this.props.Login.masterData.SelectedReportMaster.nreportcode,\r\n                    nreportdetailcode: this.props.Login.masterData.SelectedReportDetail.nreportdetailcode,\r\n                    ncontrolbasedparameter: this.state.gridDataparmeter.map(function (el) { return el.ncontrolBasedparameter; }).join(\",\") || null, //this.state.selectedRecord.ncontrolBasedparameter.value, \r\n                    nquerybuildertablecode: this.state.gridDataparmeter.map(function (el) { return el.nquerybuildertablecode; }).join(\",\") || null, //this.state.selectedRecord.nquerybuildertablecode.value,\r\n                    squerybuildertablecodecolumn: this.state.gridDataparmeter.map(function (el) { return \"'\" + el.stablecolumn + \"'\"; }).join(\",\"), //this.state.selectedRecord.nquerybuildertablecodecolumn.label,\r\n                    nreportparameterconfigurationcode: this.props.Login.masterData.ParameterMapping.map(function (el) { return el.nreportparameterconfigurationcode; }).join(\",\") || null\r\n                },\r\n                operation: \"create\",\r\n                saveType, formRef,\r\n            }\r\n\r\n            const masterData = this.props.Login.masterData;\r\n\r\n            if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        loadEsign: true, screenData: { inputParam, masterData }, saveType\r\n                    }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n            else {\r\n                this.props.crudMaster(inputParam, masterData, \"openModal\");\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n\r\n    deleteFile = (fieldName) => {\r\n        let selectedRecord = this.state.selectedRecord || {};\r\n        selectedRecord[fieldName] = \"\";\r\n        this.setState({ selectedRecord, actionType: \"delete\" });\r\n    }\r\n\r\n    approveReport = (ncontrolCode) => {\r\n        if (this.props.Login.masterData.SelectedReportDetail) {\r\n            if (this.props.Login.masterData.SelectedReportDetail.ntransactionstatus === transactionStatus.APPROVED) {\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_REPORTALREADYAPPROVED\" }));\r\n            }\r\n            else {\r\n\r\n                const postParam = {\r\n                    inputListName: \"ReportDetails\", selectedObject: \"SelectedReportDetail\",\r\n                    primaryKeyField: \"nreportdetailcode\",\r\n                    primaryKeyValue: this.props.Login.masterData.SelectedReportDetail.nreportdetailcode,\r\n                    fetchUrl: \"reportconfig/getReportDetail\",\r\n                    fecthInputObject: { userinfo: this.props.Login.userInfo },\r\n                };\r\n                let SelectedReportDetail = this.props.Login.masterData.SelectedReportDetail;\r\n                SelectedReportDetail[\"sfilterreporttypecode\"] = this.props.Login.masterData && this.props.Login.masterData.SelectedFilterReportType && this.props.Login.masterData.SelectedFilterReportType.nreporttypecode.toString();\r\n                const inputParam = {\r\n                    classUrl: this.props.Login.inputParam.classUrl,\r\n                    methodUrl: \"ReportVersion\",\r\n                    inputData: {\r\n                        \"userinfo\": this.props.Login.userInfo,\r\n                        // \"reportdetails\": this.props.Login.masterData.SelectedReportDetail\r\n                        \"reportdetails\": SelectedReportDetail\r\n                    },\r\n                    operation: \"approve\", postParam, isChild: true\r\n                }\r\n\r\n                const masterData = this.props.Login.masterData;\r\n\r\n                if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, ncontrolCode)) {\r\n                    const updateInfo = {\r\n                        typeName: DEFAULT_RETURN,\r\n                        data: {\r\n                            loadEsign: true, screenData: { inputParam, masterData },\r\n                            openModal: true, screenName: \"IDS_REPORTMASTER\", operation: \"approve\"\r\n                        }\r\n                    }\r\n                    this.props.updateStore(updateInfo);\r\n                }\r\n                else {\r\n                    this.props.crudMaster(inputParam, masterData, \"openModal\");\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_NOVERSIONTOAPPROVE\" }));\r\n        }\r\n    }\r\n\r\n    deleteValidation = (deleteParam) => {\r\n\r\n        if (this.props.Login.masterData.SelectedReportDetail.ntransactionstatus === transactionStatus.APPROVED) {\r\n            const message = \"IDS_CANNOTDELETEFORAPPROVEDREPORT\";\r\n            toast.warn(this.props.intl.formatMessage({ id: message }));\r\n        }\r\n        else {\r\n            delete deleteParam.selectedRecord.dmodifieddate;\r\n            const inputParam = {\r\n                classUrl: this.props.Login.inputParam.classUrl,\r\n                methodUrl: \"ReportValidation\",\r\n                inputData: {\r\n                    \"reportvalidation\": deleteParam.selectedRecord,\r\n                    \"userinfo\": this.props.Login.userInfo\r\n                },\r\n                operation: \"delete\", isChild: true\r\n            }\r\n            const masterData = this.props.Login.masterData;\r\n            if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode,\r\n                deleteParam.ncontrolCode)) {\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        loadEsign: true, screenData: { inputParam, masterData },\r\n                        openModal: true, screenName: deleteParam.screenName, operation: deleteParam.operation\r\n                    }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n            else {\r\n                this.props.crudMaster(inputParam, masterData, \"openModal\");\r\n            }\r\n        }\r\n    }\r\n\r\n    deleteAttachment = (deleteParam) => {\r\n\r\n        if (this.props.Login.masterData.SelectedReportDetail.ntransactionstatus === transactionStatus.APPROVED) {\r\n            const message = \"IDS_CANNOTDELETEFORAPPROVEDREPORT\";\r\n            toast.warn(this.props.intl.formatMessage({ id: message }));\r\n        }\r\n        else {\r\n            const postParam = {\r\n                inputListName: \"ReportMaster\", selectedObject: \"SelectedReportMaster\",\r\n                primaryKeyField: \"nreportcode\",\r\n                primaryKeyValue: this.props.Login.masterData.SelectedReportMaster.nreportcode,\r\n                fetchUrl: \"reportconfig/getReportDesigner\",\r\n                fecthInputObject: { userinfo: this.props.Login.userInfo },\r\n            }\r\n            const inputParam = {\r\n                classUrl: this.props.Login.inputParam.classUrl,\r\n                methodUrl: deleteParam.methodUrl,\r\n                inputData: {\r\n                    [deleteParam.methodUrl.toLowerCase()]: deleteParam.selectedRecord,\r\n                    \"userinfo\": this.props.Login.userInfo\r\n                },\r\n                operation: deleteParam.operation, isChild: true, postParam\r\n            }\r\n            const masterData = this.props.Login.masterData;\r\n            if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode,\r\n                deleteParam.ncontrolCode)) {\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        loadEsign: true, screenData: { inputParam, masterData },\r\n                        openModal: true, screenName: deleteParam.screenName, operation: deleteParam.operation\r\n                    }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n            else {\r\n                this.props.crudMaster(inputParam, masterData, \"openModal\");\r\n            }\r\n        }\r\n    }\r\n\r\n    deleteReport = (deleteParam) => {\r\n\r\n        const postParam = {\r\n            inputListName: \"ReportMaster\", selectedObject: \"SelectedReportMaster\",\r\n            primaryKeyField: \"nreportcode\",\r\n            primaryKeyValue: this.props.Login.masterData.SelectedReportMaster.nreportcode,\r\n            fetchUrl: \"reportconfig/getReportDesigner\",\r\n            fecthInputObject: { userinfo: this.props.Login.userInfo },\r\n        };\r\n        let masterToDelete = deleteParam.mastertodelete;\r\n        masterToDelete[\"sfilterreporttypecode\"] = this.props.Login.masterData && this.props.Login.masterData.SelectedFilterReportType && this.props.Login.masterData.SelectedFilterReportType.nreporttypecode.toString();\r\n\r\n        const inputParam = {\r\n            classUrl: this.props.Login.inputParam.classUrl,\r\n            methodUrl: deleteParam.methodUrl,\r\n            inputData: {\r\n                \"userinfo\": this.props.Login.userInfo,\r\n                // [deleteParam.listName]: deleteParam.mastertodelete\r\n                [deleteParam.listName]: masterToDelete\r\n            },\r\n            operation: deleteParam.operation, postParam,\r\n            isChild: deleteParam.methodUrl === \"ReportDetails\" ? true : undefined\r\n        }\r\n\r\n        const masterData = this.props.Login.masterData;\r\n\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode,\r\n            deleteParam.ncontrolCode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData },\r\n                    openModal: true, screenName: deleteParam.screenName, operation: deleteParam.operation\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.crudMaster(inputParam, masterData, \"openModal\");\r\n        }\r\n    }\r\n\r\n    updateReportStatus = (methodParam) => {\r\n        const reportmaster = methodParam.mastertoupdate;\r\n        let status = reportmaster.ntransactionstatus;\r\n        if (status === transactionStatus.ACTIVE) {\r\n            status = transactionStatus.DEACTIVE;\r\n        }\r\n        else {\r\n            status = transactionStatus.ACTIVE;\r\n        }\r\n        reportmaster[\"ntransactionstatus\"] = status;\r\n        let postParam = { inputListName: \"ReportMaster\", selectedObject: \"SelectedReportMaster\", primaryKeyField: \"nreportcode\" };\r\n\r\n        const inputParam = {\r\n            classUrl: this.props.Login.inputParam.classUrl,\r\n            methodUrl: \"ReportStatus\",\r\n            inputData: {\r\n                \"userinfo\": this.props.Login.userInfo,\r\n                reportmaster\r\n            },\r\n            operation: methodParam.operation, postParam\r\n        }\r\n\r\n        const masterData = this.props.Login.masterData;\r\n\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode,\r\n            methodParam.ncontrolCode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData },\r\n                    openModal: true, screenName: methodParam.screenName, operation: methodParam.operation\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.crudMaster(inputParam, masterData, \"openModal\");\r\n        }\r\n    }\r\n\r\n    validateEsign = () => {\r\n        const inputParam = {\r\n            inputData: {\r\n                \"userinfo\": {\r\n                    ...this.props.Login.userInfo,\r\n                    sreason: this.state.selectedRecord[\"esigncomments\"],\r\n                    nreasoncode: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].value,\r\n                    spredefinedreason: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].label,\r\n\r\n                },\r\n                password: this.state.selectedRecord[\"esignpassword\"]\r\n            },\r\n            screenData: this.props.Login.screenData\r\n        }\r\n        this.props.validateEsignCredential(inputParam, \"openModal\");\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                masterData: [], inputParam: undefined, operation: null, modalName: undefined\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    reloadData = () => {\r\n\r\n        this.searchRef.current.value = \"\";\r\n        const inputParam = {\r\n            inputData: {\r\n                \"userinfo\": this.props.Login.userInfo,\r\n                nreporttypecode: String(this.props.Login.masterData.SelectedFilterReportType.nreporttypecode)\r\n            },\r\n            classUrl: \"reportconfig\",\r\n            methodUrl: \"ReportDesigner\",\r\n            userInfo: this.props.Login.userInfo,\r\n            displayName: \"IDS_REPORTDESIGNER\"\r\n        };\r\n\r\n        this.props.callService(inputParam);\r\n\r\n    }\r\n\r\n}\r\n\r\nexport default connect(mapStatetoProps, {\r\n    callService, getReportMasterComboService,\r\n    updateStore, crudMaster, getReportDetailComboService, getSelectedReportMasterDetail,\r\n    getSelectedReportDetail, getConfigReportComboService, getParameterMappingComboService,\r\n    //getActionMappingComboService, \r\n    getReportRegSubType, validateEsignCredential, validationReportparameter, controlBasedReportparametre, controlBasedReportparametretable,\r\n    //controlBasedReportparametretablecolumn,\r\n    filterTransactionList, getReportSubType, getControlButton, getregtype, getReportRegSubTypeApproveConfigVersion, getReportSampletype, getReportTemplate\r\n})(injectIntl(ReportConfig));\r\n\r\n"]},"metadata":{},"sourceType":"module"}