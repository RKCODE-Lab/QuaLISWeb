{"ast":null,"code":"var _jsxFileName = \"D:\\\\LIMSWFH\\\\LIMSPOSTGRESQL\\\\QuaLISWeb\\\\src\\\\components\\\\doc-viewer\\\\doc-viewer.component.jsx\";\nimport './doc-viewer-component.css'; //import { LabelNormal, DivWrap, SpanWrap } from './doc-viewer-component.style';\n//import { Row, Col, Button } from 'react-bootstrap';\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faDownload, faWindowClose } from '@fortawesome/free-solid-svg-icons';\nimport React from 'react'; //import { Document, Page } from 'react-pdf';\n\nimport FileViewer from 'react-file-viewer';\n\nclass DocViewer extends React.Component {\n  // constructor(Props) {\n  //   super(Props);\n  //   let iconName;\n  //   let fileName;\n  //   switch(Props.type){\n  //     case 'pdf': \n  //       fileName = 'export.pdf';\n  //       iconName = faFilePdf ;\n  //       break;\n  //     case 'xlsx':\n  //       fileName = 'export.xlsx'; \n  //       iconName = faFileExcel ;\n  //       break;\n  //     case 'png': \n  //       fileName = 'export.png';\n  //       iconName = faImages;\n  //       break;\n  //     case 'jpeg':\n  //       fileName = 'export.jpeg'; \n  //       iconName = faFileImage;\n  //       break;\n  //     case 'docx':\n  //       fileName = 'export.doc'; \n  //       iconName = faFileAlt;\n  //       break;\n  //     default:\n  //       fileName =  'export.pdf';\n  //       iconName = faFilePdf ;\n  //       break;\n  //   }\n  //   console.log(iconName)\n  //   this.state = { ...Props ,page:1 , open:false , iconName:iconName , fileName:fileName}\n  // }\n  constructor(props) {\n    super(props);\n\n    this.leftClick = data => {\n      this.setState({\n        page: data\n      });\n    };\n\n    this.rightClick = data => {\n      this.setState({\n        page: data\n      });\n    };\n\n    this.toggleClick = () => {\n      this.setState({\n        open: !this.state.open\n      });\n    };\n\n    this.state = { ...props,\n      page: 1,\n      open: this.props.showReport\n    };\n  }\n\n  render() {\n    //const docs = [{ uri: this.state.file }]; \n    // console.log(\"doc viewer:\", this.state.file, this.state.fileName);\n    const MyPdfViewer = () => {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"popup_modal_wrap\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: `popup_modal ${this.state.open ? 'open' : ''}`,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        className: \"close_top\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n        icon: faWindowClose,\n        onClick: this.props.closeModal,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 15\n        }\n      }), this.state.isDownloadable ? /*#__PURE__*/React.createElement(\"a\", {\n        href: this.state.file,\n        download: this.state.fileName,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 44\n        }\n      }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n        icon: faDownload,\n        onClick: this.toggleClick,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 17\n        }\n      })) : ''), /*#__PURE__*/React.createElement(FileViewer, {\n        fileType: this.state.type,\n        filePath: this.state.file,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 13\n        }\n      })));\n    };\n\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(MyPdfViewer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }\n    }));\n  }\n\n  componentDidMount(prevProps) {}\n\n}\n\nexport default DocViewer;","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/components/doc-viewer/doc-viewer.component.jsx"],"names":["FontAwesomeIcon","faDownload","faWindowClose","React","FileViewer","DocViewer","Component","constructor","props","leftClick","data","setState","page","rightClick","toggleClick","open","state","showReport","render","MyPdfViewer","closeModal","isDownloadable","file","fileName","type","componentDidMount","prevProps"],"mappings":";AAAA,OAAO,4BAAP,C,CACA;AACA;;AACA,SAASA,eAAT,QAAgC,gCAAhC;AACA,SAASC,UAAT,EAAsBC,aAAtB,QAA2C,mCAA3C;AACA,OAAOC,KAAP,MAAkB,OAAlB,C,CACA;;AACA,OAAOC,UAAP,MAAuB,mBAAvB;;AAEA,MAAMC,SAAN,SAAwBF,KAAK,CAACG,SAA9B,CAAwC;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEAC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;;AADiB,SAUnBC,SAVmB,GAUNC,IAAD,IAAS;AACnB,WAAKC,QAAL,CAAc;AACZC,QAAAA,IAAI,EAACF;AADO,OAAd;AAGD,KAdkB;;AAAA,SAenBG,UAfmB,GAeLH,IAAD,IAAS;AACpB,WAAKC,QAAL,CAAc;AACZC,QAAAA,IAAI,EAACF;AADO,OAAd;AAGD,KAnBkB;;AAAA,SAoBnBI,WApBmB,GAoBL,MAAK;AACjB,WAAKH,QAAL,CAAc;AACZI,QAAAA,IAAI,EAAE,CAAC,KAAKC,KAAL,CAAWD;AADN,OAAd;AAGD,KAxBkB;;AAEjB,SAAKC,KAAL,GAAa,EACX,GAAGR,KADQ;AAEXI,MAAAA,IAAI,EAAC,CAFM;AAGXG,MAAAA,IAAI,EAAC,KAAKP,KAAL,CAAWS;AAHL,KAAb;AAKD;;AAmBDC,EAAAA,MAAM,GAAG;AACP;AACD;AACC,UAAMC,WAAW,GAAG,MAAK;AACvB,0BACE;AAAK,QAAA,SAAS,EAAC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAEE;AAAK,QAAA,SAAS,EAAG,eAAc,KAAKH,KAAL,CAAWD,IAAX,GAAkB,MAAlB,GAAyB,EAAG,EAA3D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE;AAAM,QAAA,SAAS,EAAC,WAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE,oBAAC,eAAD;AAAiB,QAAA,IAAI,EAAEb,aAAvB;AAAsC,QAAA,OAAO,EAAE,KAAKM,KAAL,CAAWY,UAA1D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,EAEG,KAAKJ,KAAL,CAAWK,cAAX,gBAA4B;AAAG,QAAA,IAAI,EAAE,KAAKL,KAAL,CAAWM,IAApB;AAA0B,QAAA,QAAQ,EAAE,KAAKN,KAAL,CAAWO,QAA/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAC3B,oBAAC,eAAD;AAAiB,QAAA,IAAI,EAAEtB,UAAvB;AAAmC,QAAA,OAAO,EAAE,KAAKa,WAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAD2B,CAA5B,GAEM,EAJT,CADF,eAQE,oBAAC,UAAD;AACE,QAAA,QAAQ,EAAE,KAAKE,KAAL,CAAWQ,IADvB;AAEE,QAAA,QAAQ,EAAE,KAAKR,KAAL,CAAWM,IAFvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QARF,CAFF,CADF;AAmBD,KApBD;;AAqBA,wBACE,uDACE,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CADF;AAKD;;AACDG,EAAAA,iBAAiB,CAACC,SAAD,EAAY,CAC5B;;AA7FqC;;AA+FxC,eAAerB,SAAf","sourcesContent":["import './doc-viewer-component.css';\n//import { LabelNormal, DivWrap, SpanWrap } from './doc-viewer-component.style';\n//import { Row, Col, Button } from 'react-bootstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faDownload , faWindowClose } from '@fortawesome/free-solid-svg-icons';\nimport React from 'react';\n//import { Document, Page } from 'react-pdf';\nimport FileViewer from 'react-file-viewer';\n\nclass DocViewer extends React.Component {\n  // constructor(Props) {\n  //   super(Props);\n  //   let iconName;\n  //   let fileName;\n  //   switch(Props.type){\n  //     case 'pdf': \n  //       fileName = 'export.pdf';\n  //       iconName = faFilePdf ;\n  //       break;\n  //     case 'xlsx':\n  //       fileName = 'export.xlsx'; \n  //       iconName = faFileExcel ;\n  //       break;\n  //     case 'png': \n  //       fileName = 'export.png';\n  //       iconName = faImages;\n  //       break;\n  //     case 'jpeg':\n  //       fileName = 'export.jpeg'; \n  //       iconName = faFileImage;\n  //       break;\n  //     case 'docx':\n  //       fileName = 'export.doc'; \n  //       iconName = faFileAlt;\n  //       break;\n  //     default:\n  //       fileName =  'export.pdf';\n  //       iconName = faFilePdf ;\n  //       break;\n  //   }\n  //   console.log(iconName)\n  //   this.state = { ...Props ,page:1 , open:false , iconName:iconName , fileName:fileName}\n\n  // }\n\n  constructor(props) {\n    super(props);\n    this.state = { \n      ...props ,\n      page:1 , \n      open:this.props.showReport\n    }\n  }\n\n\n  leftClick = (data) =>{\n    this.setState({\n      page:data\n    })\n  }\n  rightClick = (data) =>{\n    this.setState({\n      page:data\n    })\n  }\n  toggleClick = () =>{\n    this.setState({\n      open: !this.state.open\n    })\n  }\n\n  render() {\n    //const docs = [{ uri: this.state.file }]; \n   // console.log(\"doc viewer:\", this.state.file, this.state.fileName);\n    const MyPdfViewer = () =>{\n      return (\n        <div className=\"popup_modal_wrap\">\n          {/* <FontAwesomeIcon icon={this.state.iconName} onClick={this.toggleClick} /> */}\n          <div className={`popup_modal ${this.state.open ? 'open':''}`}>\n            <span className=\"close_top\">\n              <FontAwesomeIcon icon={faWindowClose} onClick={this.props.closeModal} />\n              {this.state.isDownloadable ? <a href={this.state.file} download={this.state.fileName}>\n                <FontAwesomeIcon icon={faDownload} onClick={this.toggleClick} />\n              </a> : ''}\n              \n            </span> \n            <FileViewer\n              fileType={this.state.type}\n              filePath={this.state.file}\n             />\n          </div> \n        </div>\n\n      );\n    }\n    return (\n      <>\n        <MyPdfViewer/>\n      </>\n    )\n  }\n  componentDidMount(prevProps) {\n  }\n}\nexport default DocViewer;\n\n"]},"metadata":{},"sourceType":"module"}