{"ast":null,"code":"var _jsxFileName = \"D:\\\\Postgres_workingFolder\\\\QuaLISWeb\\\\src\\\\components\\\\droparea\\\\Componentexp.jsx\";\nimport React, { useRef } from \"react\";\nimport { Button } from \"react-bootstrap\";\nimport { useDrag } from \"react-dnd\";\nimport { COMPONENT, COMPONENTROW } from \"./constants\";\nconst style = {\n  // border: \"1px dashed black\",\n  padding: \"0\",\n  backgroundColor: \"white\",\n  cursor: \"move\"\n};\n\nconst Componentexp = _ref => {\n  let {\n    data,\n    components,\n    path,\n    onclickcomponent,\n    selectedFieldRecord\n  } = _ref;\n  const ref = useRef(null);\n  const [{\n    isDragging\n  }, drag] = useDrag({\n    type: COMPONENTROW,\n    item: {\n      type: COMPONENTROW,\n      id: data.id,\n      data: data,\n      path\n    },\n    collect: monitor => ({\n      isDragging: monitor.isDragging()\n    })\n  });\n  const opacity = isDragging ? 0 : 1;\n  drag(ref); // const component = components[data.id];\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    ref: ref,\n    style: { ...style,\n      opacity\n    },\n    className: \"component draggable\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    className: `componentItemButton ${selectedFieldRecord.id === data.id ? \"selected\" : \"\"}`,\n    onClick: e => onclickcomponent(e, data, path),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: `componentItem`,\n    style: {\n      \"white-space\": \"nowrap\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 9\n    }\n  }, data.label || data.componentname)));\n};\n\nexport default Componentexp;","map":{"version":3,"sources":["D:/Postgres_workingFolder/QuaLISWeb/src/components/droparea/Componentexp.jsx"],"names":["React","useRef","Button","useDrag","COMPONENT","COMPONENTROW","style","padding","backgroundColor","cursor","Componentexp","data","components","path","onclickcomponent","selectedFieldRecord","ref","isDragging","drag","type","item","id","collect","monitor","opacity","e","label","componentname"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,MAAhB,QAA8B,OAA9B;AACA,SAASC,MAAT,QAAuB,iBAAvB;AACA,SAASC,OAAT,QAAwB,WAAxB;AACA,SAASC,SAAT,EAAoBC,YAApB,QAAwC,aAAxC;AAEA,MAAMC,KAAK,GAAG;AACZ;AACAC,EAAAA,OAAO,EAAE,GAFG;AAGZC,EAAAA,eAAe,EAAE,OAHL;AAIZC,EAAAA,MAAM,EAAE;AAJI,CAAd;;AAMA,MAAMC,YAAY,GAAG,QAAuE;AAAA,MAAtE;AAAEC,IAAAA,IAAF;AAAQC,IAAAA,UAAR;AAAoBC,IAAAA,IAApB;AAA0BC,IAAAA,gBAA1B;AAA4CC,IAAAA;AAA5C,GAAsE;AAC1F,QAAMC,GAAG,GAAGf,MAAM,CAAC,IAAD,CAAlB;AAEA,QAAM,CAAC;AAAEgB,IAAAA;AAAF,GAAD,EAAiBC,IAAjB,IAAyBf,OAAO,CAAC;AACrCgB,IAAAA,IAAI,EAAEd,YAD+B;AAErCe,IAAAA,IAAI,EAAE;AACJD,MAAAA,IAAI,EAAEd,YADF;AAEJgB,MAAAA,EAAE,EAAEV,IAAI,CAACU,EAFL;AAGJV,MAAAA,IAAI,EAAEA,IAHF;AAIJE,MAAAA;AAJI,KAF+B;AAQrCS,IAAAA,OAAO,EAAEC,OAAO,KAAK;AACnBN,MAAAA,UAAU,EAAEM,OAAO,CAACN,UAAR;AADO,KAAL;AARqB,GAAD,CAAtC;AAaA,QAAMO,OAAO,GAAGP,UAAU,GAAG,CAAH,GAAO,CAAjC;AACAC,EAAAA,IAAI,CAACF,GAAD,CAAJ,CAjB0F,CAmB1F;;AAEA,sBACE;AACE,IAAA,GAAG,EAAEA,GADP;AAEE,IAAA,KAAK,EAAE,EAAE,GAAGV,KAAL;AAAYkB,MAAAA;AAAZ,KAFT;AAGE,IAAA,SAAS,EAAC,qBAHZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAME,oBAAC,MAAD;AAAQ,IAAA,SAAS,EAAG,uBAAsBT,mBAAmB,CAACM,EAApB,KAA2BV,IAAI,CAACU,EAAhC,GAAqC,UAArC,GAAkD,EAAG,EAA/F;AAAkG,IAAA,OAAO,EAAGI,CAAD,IAAOX,gBAAgB,CAACW,CAAD,EAAId,IAAJ,EAAUE,IAAV,CAAlI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAG,eAAjB;AAAiC,IAAA,KAAK,EAAE;AAAE,qBAAe;AAAjB,KAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGF,IAAI,CAACe,KAAL,IAAcf,IAAI,CAACgB,aADtB,CADF,CANF,CADF;AAcD,CAnCD;;AAoCA,eAAejB,YAAf","sourcesContent":["import React, { useRef } from \"react\";\r\nimport { Button } from \"react-bootstrap\";\r\nimport { useDrag } from \"react-dnd\";\r\nimport { COMPONENT, COMPONENTROW } from \"./constants\";\r\n\r\nconst style = {\r\n  // border: \"1px dashed black\",\r\n  padding: \"0\",\r\n  backgroundColor: \"white\",\r\n  cursor: \"move\"\r\n};\r\nconst Componentexp = ({ data, components, path, onclickcomponent, selectedFieldRecord }) => {\r\n  const ref = useRef(null);\r\n\r\n  const [{ isDragging }, drag] = useDrag({\r\n    type: COMPONENTROW,\r\n    item: {\r\n      type: COMPONENTROW,\r\n      id: data.id,\r\n      data: data,\r\n      path\r\n    },\r\n    collect: monitor => ({\r\n      isDragging: monitor.isDragging()\r\n    })\r\n  });\r\n\r\n  const opacity = isDragging ? 0 : 1;\r\n  drag(ref);\r\n\r\n  // const component = components[data.id];\r\n\r\n  return (\r\n    <div\r\n      ref={ref}\r\n      style={{ ...style, opacity }}\r\n      className=\"component draggable\"\r\n    >\r\n      {/* <div>{data.id}</div> */}\r\n      <Button className={`componentItemButton ${selectedFieldRecord.id === data.id ? \"selected\" : \"\"}`} onClick={(e) => onclickcomponent(e, data, path)}>\r\n        <div className={`componentItem`} style={{ \"white-space\": \"nowrap\" }}>\r\n          {data.label || data.componentname}\r\n        </div>\r\n      </Button>\r\n    </div>\r\n  );\r\n};\r\nexport default Componentexp;\r\n"]},"metadata":{},"sourceType":"module"}