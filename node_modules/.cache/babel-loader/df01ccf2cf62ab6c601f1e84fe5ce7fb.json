{"ast":null,"code":"var _jsxFileName = \"D:\\\\LIMSWFH\\\\LIMSPOSTGRESQL\\\\QuaLISWeb\\\\src\\\\components\\\\type3component\\\\Type3Component.jsx\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { injectIntl } from 'react-intl';\nimport { Row, Col } from 'react-bootstrap';\nimport { toast } from 'react-toastify';\nimport { process } from '@progress/kendo-data-query';\nimport DataGrid from '../../components/data-grid/data-grid.component';\nimport Esign from '../../pages/audittrail/Esign';\nimport SlideOutModal from '../slide-out-modal/SlideOutModal';\nimport { getFieldSpecification } from './Type3FieldSpecificationList';\nimport AddType3Component from './AddType3Component';\nimport { callService, crudMaster, updateStore, validateEsignCredential, fetchRecordCombo, onComboLoad, onServiceLoad } from '../../actions';\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\nimport { showEsign, getControlMap, extractFieldHeader, formatInputDate } from '../CommonScript';\nimport { ListWrapper } from '../client-group.styles';\nimport { transactionStatus, designComponents, formCode } from '../Enumeration';\n\nconst mapStateToProps = state => {\n  return {\n    Login: state.Login\n  };\n};\n\nclass Type3Component extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.dataStateChange = event => {\n      this.setState({\n        dataResult: process(this.state.data ? this.state.data : [], event.dataState),\n        dataState: event.dataState\n      });\n    };\n\n    this.openModal = ncontrolCode => {\n      let comboColumnField = [];\n      this.extractedColumnList.map(item => {\n        if (item.ndesigncomponentcode === designComponents.COMBOBOX) {\n          comboColumnField.push(item);\n        }\n      });\n      this.props.onComboLoad(\"create\", this.props.Login.userInfo, this.props.Login.inputParam, ncontrolCode, comboColumnField, this.props.Login.integrationSettings);\n    };\n\n    this.closeModal = () => {\n      let loadEsign = this.props.Login.loadEsign;\n      let openModal = this.props.Login.openModal;\n      let selectedRecord = this.props.Login.selectedRecord;\n      let selectedId = this.props.Login.selectedId;\n\n      if (this.props.Login.loadEsign) {\n        if (this.props.Login.operation === \"delete\") {\n          loadEsign = false;\n          openModal = false;\n          selectedRecord = {};\n        } else {\n          loadEsign = false;\n          selectedRecord['esignpassword'] = \"\";\n          selectedRecord['esigncomments'] = \"\";\n          selectedRecord['esignreason'] = \"\";\n        }\n      } else {\n        openModal = false;\n        selectedRecord = {};\n        selectedId = null;\n      }\n\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          openModal,\n          loadEsign,\n          selectedRecord,\n          //selectedId:null \n          selectedId\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.custombuttonclick = (event, component) => {\n      event.preventDefault();\n      event.stopPropagation();\n      const inputparam = {\n        component,\n        userinfo: this.props.Login.userInfo,\n        selectedRecord: this.state.selectedRecord\n      };\n      this.props.getDynamicFilter(inputparam);\n    };\n\n    this.onInputOnChange = (event, item) => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (event.target.type === 'checkbox') {\n        selectedRecord[event.target.name] = event.target.checked === true ? 3 : 4;\n      } else {\n        selectedRecord[event.target.name] = event.target.value;\n      }\n\n      if (event.target.type === 'textbox') {\n        selectedRecord[item.existinglength] = true;\n      }\n\n      if (item && item.readOnlyChild) {\n        selectedRecord[item.readOnlyChild] = event.target.value;\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onComboChange = (comboData, fieldName, item) => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (comboData !== null) {\n        if (item.foreignDataField) {\n          selectedRecord[item.foreignDataField] = comboData.value;\n        }\n      }\n\n      selectedRecord[fieldName] = comboData;\n\n      if (item.readOnlyChild) {\n        selectedRecord[item.readOnlyChild] = comboData.item[item.readOnlyParentData];\n      }\n\n      if (item.onChangeUrl != undefined) {\n        const dataList = { ...this.props.Login.dataList\n        }; // let inputData={\n        //     primarykeyvalue: parseInt(comboData.value),\n        // }\n\n        let inputData = {\n          dataList,\n          selectedRecord\n        };\n        let comboColumnField = [];\n        let primarykeyvalue = {};\n        primarykeyvalue[item.tableDataField] = comboData.value;\n        this.extractedColumnList.map(item => {\n          if (item.onChangeUrl != undefined) {\n            if (item.ndesigncomponentcode === designComponents.COMBOBOX) {\n              comboColumnField.push(item);\n            }\n          }\n        });\n        this.props.onServiceLoad(this.props.Login.userInfo, this.props.Login.inputParam, this.props.Login.ncontrolCode, comboColumnField, primarykeyvalue, inputData);\n      } else {\n        this.setState({\n          selectedRecord\n        });\n      }\n    };\n\n    this.handleDateChange = (dateName, dateValue, item) => {\n      const {\n        selectedRecord\n      } = this.state;\n      selectedRecord[dateName] = dateValue;\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onNumericInputOnChange = (value, name, item) => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (item.child) {\n        if (item.min >= value && value !== 0 || item.max >= value && value !== 0) {\n          selectedRecord.ncodelength = value;\n        }\n\n        selectedRecord[item.childdatafield] && delete selectedRecord[item.childdatafield];\n      } else {\n        selectedRecord[name] = value;\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.deleteRecord = deleteParam => {\n      const inputParam = {\n        classUrl: this.props.Login.inputParam.classUrl,\n        methodUrl: this.props.Login.inputParam.methodUrl,\n        displayName: this.props.Login.inputParam.displayName,\n        inputData: {\n          [this.props.Login.inputParam.methodUrl.toLowerCase()]: deleteParam.selectedRecord,\n          \"userinfo\": this.props.Login.userInfo\n        },\n        operation: deleteParam.operation,\n        dataState: this.state.dataState,\n        selectedRecord: { ...this.state.selectedRecord\n        }\n      };\n      const esignNeeded = showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, deleteParam.ncontrolCode);\n\n      if (esignNeeded) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData: this.props.Login.masterData\n            },\n            openModal: true,\n            screenName: this.props.intl.formatMessage({\n              id: this.props.Login.inputParam.displayName\n            }),\n            operation: deleteParam.operation\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\n      }\n    };\n\n    this.reloadData = () => {\n      const inputParam = {\n        inputData: {\n          \"userinfo\": this.props.Login.userInfo\n        },\n        classUrl: this.props.Login.inputParam.classUrl,\n        methodUrl: this.props.Login.inputParam.methodUrl,\n        displayName: this.props.Login.inputParam.displayName,\n        userInfo: this.props.Login.userInfo\n      };\n      this.props.callService(inputParam);\n    };\n\n    this.onSaveClick = (saveType, formRef) => {\n      let inputData = [];\n      inputData[\"userinfo\"] = this.props.Login.userInfo;\n      let dataState = undefined;\n      let selectedId = null;\n      let fieldList = getFieldSpecification().get(this.props.Login.inputParam.methodUrl) || [];\n      let selectedRecordPrimarykey = fieldList[0].dataField;\n      inputData[this.props.Login.inputParam.methodUrl.toLowerCase()] = {\n        \"nsitecode\": this.props.Login.userInfo.nmastersitecode\n      };\n      this.extractedColumnList.map(item => {\n        let fieldName = item.dataField;\n\n        if (item.isJsonField === true) {\n          return inputData[this.props.Login.inputParam.methodUrl.toLowerCase()][item.jsonObjectName] = { ...inputData[this.props.Login.inputParam.methodUrl.toLowerCase()][item.jsonObjectName],\n            [fieldName]: this.state.selectedRecord[fieldName] ? this.state.selectedRecord[fieldName] : \"\"\n          };\n        } else {\n          if (item.controlType === \"selectbox\") {\n            inputData[this.props.Login.inputParam.methodUrl.toLowerCase()][fieldName] = this.state.selectedRecord[fieldName] ? this.state.selectedRecord[fieldName].label ? this.state.selectedRecord[fieldName].label : \"\" : -1;\n            inputData[this.props.Login.inputParam.methodUrl.toLowerCase()][item.foreignDataField] = this.state.selectedRecord[fieldName] ? this.state.selectedRecord[fieldName].value ? this.state.selectedRecord[fieldName].value : \"\" : -1;\n\n            if (this.props.Login.inputParam.methodUrl === \"LimsElnUsermapping\" && this.state.selectedRecord.username && this.state.selectedRecord.username.item && this.state.selectedRecord.username.item.multiusergroupcode) {\n              this.state.selectedRecord.username.item.multiusergroupcode.forEach(dataItem => {\n                if (dataItem.defaultusergroup !== \"undefined\") {\n                  inputData[this.props.Login.inputParam.methodUrl.toLowerCase()][\"nelnusergroupcode\"] = dataItem.lsusergroup.usergroupcode;\n                }\n              });\n            } //return inputData;\n\n          } else if (item.controlType === \"datepicker\") {\n            inputData[this.props.Login.inputParam.methodUrl.toLowerCase()][item.dateField] = formatInputDate(this.state.selectedRecord[fieldName] ? this.state.selectedRecord[fieldName] : \"\", false);\n          } else if (item.controlType === \"checkbox\") {\n            inputData[this.props.Login.inputParam.methodUrl.toLowerCase()][item.controlName] = this.state.selectedRecord[item.controlName] ? this.state.selectedRecord[item.controlName] : transactionStatus.NO;\n          } else {\n            inputData[this.props.Login.inputParam.methodUrl.toLowerCase()][fieldName] = this.state.selectedRecord[fieldName] ? this.state.selectedRecord[fieldName] : \"\";\n          }\n\n          inputData[this.props.Login.inputParam.methodUrl.toLowerCase()][selectedRecordPrimarykey] = this.props.Login.selectedId;\n          return inputData;\n        }\n      });\n\n      if (this.props.Login.operation == \"update\") {\n        dataState = this.state.dataState;\n        selectedId = this.props.Login.selectedId;\n      }\n\n      const inputParam = {\n        classUrl: this.props.Login.inputParam.classUrl,\n        methodUrl: this.props.Login.inputParam.methodUrl,\n        displayName: this.props.Login.inputParam.displayName,\n        inputData: inputData,\n        selectedId,\n        selectedRecord: { ...this.state.selectedRecord\n        },\n        operation: this.props.Login.operation,\n        saveType,\n        formRef,\n        dataState\n      };\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData: { ...this.props.Login.masterData\n              }\n            },\n            openModal: true,\n            screenName: this.props.intl.formatMessage({\n              id: this.props.Login.inputParam.displayName\n            }),\n            operation: this.props.Login.operation\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\n      }\n    };\n\n    this.validateEsign = () => {\n      const inputParam = {\n        inputData: {\n          \"userinfo\": { ...this.props.Login.userInfo,\n            sreason: this.state.selectedRecord[\"esigncomments\"],\n            nreasoncode: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].value,\n            spredefinedreason: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].label\n          },\n          password: this.state.selectedRecord[\"esignpassword\"]\n        },\n        screenData: this.props.Login.screenData // screenStateData: {selected:{...this.state.selectedRecord}, masterData:{ ...this.props.Login.masterData}},\n\n      };\n      this.props.validateEsignCredential(inputParam, \"openModal\");\n    };\n\n    this.formRef = React.createRef();\n    this.extractedColumnList = [];\n    this.extractedColumnList1 = [];\n    this.fieldList = [];\n    const _dataState = {\n      skip: 0,\n      take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n    };\n    this.state = {\n      data: [],\n      masterStatus: \"\",\n      error: \"\",\n      selectedRecord: {},\n      dataResult: [],\n      dataState: _dataState,\n      userRoleControlRights: [],\n      controlMap: new Map()\n    };\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\n      toast.warn(props.Login.masterStatus);\n      props.Login.masterStatus = \"\";\n    }\n\n    if (props.Login.error !== state.error) {\n      toast.error(props.Login.error);\n      props.Login.error = \"\";\n    }\n\n    return null;\n  } // fnextractedColumnList  =()=>\n  // {\n  //    // return this.extractedColumnList = this.extractedColumnList1 || [];\n  //     this.extractedColumnList1 = this.extractedColumnList;\n  //     if(item.child){\n  //         this.extractedColumnList.map((values, index)=>{\n  //             if( values.dataField == item.childdatafield )\n  //                 {\n  //                     //this.extractedColumnList[index]['fieldLength']= value.toString();\n  //                     this.extractedColumnList[index]['fieldLength']= value;\n  //                 }\n  //         //console.log(value, index);\n  //     })\n  //         }\n  // }\n\n\n  render() {\n    let primaryKeyField = \"\";\n    let fieldList = {};\n    const addId = this.props.Login.inputParam && this.state.controlMap.has(\"Add\".concat(this.props.Login.inputParam.methodUrl)) && this.state.controlMap.get(\"Add\".concat(this.props.Login.inputParam.methodUrl)).ncontrolcode;\n\n    if (this.props.Login.inputParam !== undefined) {\n      if (this.props.Login.inputParam.classUrl === \"limselnusermapping\") {\n        fieldList = getFieldSpecification().get(this.props.Login.inputParam.methodUrl) || []; // fieldList.forEach(item=>item.dataField === \"username\" ? \n        //     fieldList.push(\"methodUrl:\"+this.props.Login.integrationSettings[0].smethodname) :\"\"\n        // );  \n\n        for (let index = 0; index < fieldList.length; index++) {\n          if (fieldList[index].elnget) {\n            let smethodname = \"methodUrl\";\n            let fieldListNew = { ...fieldList[index],\n              methodUrl: this.props.Login.integrationSettings[0].smethodname,\n              classUrl: this.props.Login.integrationSettings[0].sclassurlname\n            }; // fieldList.slice(index)\n            //fieldList.push((fieldList[index]).toString())\n            //this.state.selectedRole.push((selectedRecord[index]).toString());\n\n            fieldList.splice(index, 1, fieldListNew);\n          }\n        }\n\n        this.extractedColumnList = extractFieldHeader(Object.values(fieldList));\n        primaryKeyField = Object.keys(fieldList).length > 0 ? fieldList[0].dataField : \"\";\n      } else if (this.props.Login.inputParam.classUrl === \"limselnsitemapping\") {\n        fieldList = getFieldSpecification().get(this.props.Login.inputParam.methodUrl) || []; // fieldList.forEach(item=>item.dataField === \"username\" ? \n        //     fieldList.push(\"methodUrl:\"+this.props.Login.integrationSettings[0].smethodname) :\"\"\n        // );  \n\n        for (let index = 0; index < fieldList.length; index++) {\n          if (fieldList[index].elnget) {\n            let smethodname = \"methodUrl\";\n            let fieldListNew = { ...fieldList[index],\n              methodUrl: this.props.Login.integrationSettings[1].smethodname,\n              classUrl: this.props.Login.integrationSettings[1].sclassurlname\n            }; // fieldList.slice(index)\n            //fieldList.push((fieldList[index]).toString())\n            //this.state.selectedRole.push((selectedRecord[index]).toString());\n\n            fieldList.splice(index, 1, fieldListNew);\n          }\n        }\n\n        this.extractedColumnList = extractFieldHeader(Object.values(fieldList));\n        primaryKeyField = Object.keys(fieldList).length > 0 ? fieldList[0].dataField : \"\";\n      } else {\n        fieldList = getFieldSpecification().get(this.props.Login.inputParam.methodUrl) || [];\n        this.extractedColumnList = extractFieldHeader(Object.values(fieldList));\n        primaryKeyField = Object.keys(fieldList).length > 0 ? fieldList[0].dataField : \"\";\n      }\n    }\n\n    const editId = this.props.Login.inputParam && this.state.controlMap.has(\"Edit\".concat(this.props.Login.inputParam.methodUrl)) && this.state.controlMap.get(\"Edit\".concat(this.props.Login.inputParam.methodUrl)).ncontrolcode;\n    const editParam = {\n      screenName: this.props.Login.inputParam && this.props.Login.inputParam.displayName && this.props.intl.formatMessage({\n        id: this.props.Login.inputParam.displayName\n      }),\n      operation: \"update\",\n      primaryKeyField,\n      inputParam: this.props.Login.inputParam,\n      integrationSettings: this.props.Login.integrationSettings,\n      userInfo: this.props.Login.userInfo,\n      ncontrolCode: editId,\n      masterData: this.props.Login.masterData,\n      extractedColumnList: this.extractedColumnList\n    };\n    const deleteParam = {\n      operation: \"delete\"\n    };\n    const mandatoryFields = [];\n    this.extractedColumnList.forEach(item => item.mandatory === true ? mandatoryFields.push(item) : \"\");\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(ListWrapper, {\n      className: \"client-list-content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 25\n      }\n    }, this.state.data ? /*#__PURE__*/React.createElement(DataGrid, {\n      primaryKeyField: primaryKeyField,\n      data: this.state.data,\n      dataResult: this.state.dataResult,\n      dataState: this.state.dataState,\n      dataStateChange: this.dataStateChange,\n      extractedColumnList: this.extractedColumnList,\n      controlMap: this.state.controlMap,\n      userRoleControlRights: this.state.userRoleControlRights,\n      inputParam: this.props.Login.inputParam,\n      userInfo: this.props.Login.userInfo,\n      fetchRecord: this.props.fetchRecordCombo,\n      editParam: editParam,\n      deleteRecord: this.deleteRecord,\n      deleteParam: deleteParam,\n      reloadData: this.reloadData,\n      addRecord: () => this.openModal(addId),\n      pageable: true,\n      scrollable: 'scrollable' // isComponent={true}\n      ,\n      gridHeight: '600px',\n      isActionRequired: true,\n      isToolBarRequired: true,\n      selectedId: this.props.Login.selectedId,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 33\n      }\n    }) : \"\"))), this.props.Login.openModal ? /*#__PURE__*/React.createElement(SlideOutModal, {\n      show: this.props.Login.openModal,\n      closeModal: this.closeModal,\n      operation: this.props.Login.operation,\n      inputParam: this.props.Login.inputParam,\n      screenName: this.props.Login.screenName,\n      onSaveClick: this.onSaveClick,\n      esign: this.props.Login.loadEsign,\n      validateEsign: this.validateEsign,\n      masterStatus: this.props.Login.masterStatus,\n      updateStore: this.props.updateStore,\n      selectedRecord: this.state.selectedRecord || {},\n      mandatoryFields: mandatoryFields // addComponentParam={{}}                   \n      // addComponent={this.addComponent}\n      ,\n      addComponent: this.props.Login.loadEsign ? /*#__PURE__*/React.createElement(Esign, {\n        operation: this.props.Login.operation,\n        onInputOnChange: this.onInputOnChange,\n        inputParam: this.props.Login.inputParam,\n        selectedRecord: this.state.selectedRecord || {},\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 253,\n          columnNumber: 29\n        }\n      }) : /*#__PURE__*/React.createElement(AddType3Component, {\n        selectedRecord: this.state.selectedRecord || {},\n        onInputOnChange: this.onInputOnChange,\n        extractedColumnList: this.extractedColumnList,\n        onNumericInputOnChange: this.onNumericInputOnChange,\n        onComboChange: this.onComboChange,\n        handleDateChange: this.handleDateChange,\n        userInfo: this.props.Login.userInfo,\n        dataList: this.props.Login.dataList,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 258,\n          columnNumber: 31\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 21\n      }\n    }) : \"\");\n  }\n\n  componentDidUpdate(previousProps) {\n    if (this.props.Login.masterData !== previousProps.Login.masterData) {\n      if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\n        const userRoleControlRights = [];\n\n        if (this.props.Login.userRoleControlRights) {\n          this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item => userRoleControlRights.push(item.ncontrolcode));\n        }\n\n        const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode);\n        this.setState({\n          userRoleControlRights,\n          controlMap,\n          data: this.props.Login.masterData,\n          dataResult: process(this.props.Login.masterData ? this.props.Login.masterData : [], this.state.dataState)\n        });\n      } else {\n        let {\n          dataState\n        } = this.state;\n\n        if (this.props.Login.dataState === undefined) {\n          dataState = {\n            skip: 0,\n            take: this.state.dataState.take\n          };\n        }\n\n        if (this.state.dataResult.data) {\n          if (this.state.dataResult.data.length === 1) {\n            let skipcount = this.state.dataState.skip > 0 ? this.state.dataState.skip - this.state.dataState.take : this.state.dataState.skip;\n            dataState = {\n              skip: skipcount,\n              take: this.state.dataState.take\n            };\n          }\n        }\n\n        this.setState({\n          data: this.props.Login.masterData,\n          selectedRecord: this.props.Login.selectedRecord,\n          dataResult: process(this.props.Login.masterData ? this.props.Login.masterData : [], dataState),\n          dataState\n        });\n      }\n    }\n\n    if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\n      //Get selected value when clicking edit button\n      if (this.props.Login.selectedRecord) {\n        this.setState({\n          selectedRecord: this.props.Login.selectedRecord\n        });\n      }\n    }\n  }\n\n}\n\nexport default connect(mapStateToProps, {\n  callService,\n  crudMaster,\n  updateStore,\n  validateEsignCredential,\n  fetchRecordCombo,\n  onComboLoad,\n  onServiceLoad\n})(injectIntl(Type3Component));","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/components/type3component/Type3Component.jsx"],"names":["React","connect","injectIntl","Row","Col","toast","process","DataGrid","Esign","SlideOutModal","getFieldSpecification","AddType3Component","callService","crudMaster","updateStore","validateEsignCredential","fetchRecordCombo","onComboLoad","onServiceLoad","DEFAULT_RETURN","showEsign","getControlMap","extractFieldHeader","formatInputDate","ListWrapper","transactionStatus","designComponents","formCode","mapStateToProps","state","Login","Type3Component","Component","constructor","props","dataStateChange","event","setState","dataResult","data","dataState","openModal","ncontrolCode","comboColumnField","extractedColumnList","map","item","ndesigncomponentcode","COMBOBOX","push","userInfo","inputParam","integrationSettings","closeModal","loadEsign","selectedRecord","selectedId","operation","updateInfo","typeName","custombuttonclick","component","preventDefault","stopPropagation","inputparam","userinfo","getDynamicFilter","onInputOnChange","target","type","name","checked","value","existinglength","readOnlyChild","onComboChange","comboData","fieldName","foreignDataField","readOnlyParentData","onChangeUrl","undefined","dataList","inputData","primarykeyvalue","tableDataField","handleDateChange","dateName","dateValue","onNumericInputOnChange","child","min","max","ncodelength","childdatafield","deleteRecord","deleteParam","classUrl","methodUrl","displayName","toLowerCase","esignNeeded","userRoleControlRights","nformcode","screenData","masterData","screenName","intl","formatMessage","id","reloadData","onSaveClick","saveType","formRef","fieldList","get","selectedRecordPrimarykey","dataField","nmastersitecode","isJsonField","jsonObjectName","controlType","label","username","multiusergroupcode","forEach","dataItem","defaultusergroup","lsusergroup","usergroupcode","dateField","controlName","NO","validateEsign","sreason","nreasoncode","spredefinedreason","password","createRef","extractedColumnList1","skip","take","settings","parseInt","masterStatus","error","controlMap","Map","getDerivedStateFromProps","warn","render","primaryKeyField","addId","has","concat","ncontrolcode","index","length","elnget","smethodname","fieldListNew","sclassurlname","splice","Object","values","keys","editId","editParam","mandatoryFields","mandatory","componentDidUpdate","previousProps","skipcount"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport {  injectIntl } from 'react-intl';\r\nimport { Row, Col } from 'react-bootstrap';\r\nimport { toast } from 'react-toastify';\r\nimport { process } from '@progress/kendo-data-query';\r\nimport DataGrid from '../../components/data-grid/data-grid.component';\r\nimport Esign from '../../pages/audittrail/Esign';\r\nimport SlideOutModal from '../slide-out-modal/SlideOutModal';\r\nimport { getFieldSpecification } from './Type3FieldSpecificationList';\r\nimport AddType3Component from './AddType3Component';\r\nimport { callService, crudMaster, updateStore, validateEsignCredential, fetchRecordCombo, onComboLoad ,onServiceLoad} from '../../actions';\r\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\r\nimport { showEsign, getControlMap, extractFieldHeader, formatInputDate } from '../CommonScript';\r\nimport { ListWrapper} from '../client-group.styles';\r\nimport { transactionStatus, designComponents, formCode } from '../Enumeration';\r\n\r\nconst mapStateToProps = state => {\r\n    return ({ Login: state.Login })\r\n}\r\n\r\nclass Type3Component extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.formRef = React.createRef();\r\n        this.extractedColumnList = [];\r\n        this.extractedColumnList1 = [];\r\n        this.fieldList = [];\r\n\r\n        const dataState = {\r\n            skip: 0,\r\n            take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5,\r\n        };\r\n        this.state = {\r\n            data: [], masterStatus: \"\", error: \"\", selectedRecord: {},\r\n            dataResult: [],\r\n            dataState: dataState,\r\n            userRoleControlRights: [],\r\n            controlMap: new Map(),\r\n        };\r\n    }\r\n\r\n    dataStateChange = (event) => { \r\n        this.setState({\r\n            dataResult: process(this.state.data?this.state.data:[], event.dataState),\r\n            dataState: event.dataState\r\n        });\r\n    }\r\n\r\n    openModal = (ncontrolCode) => {\r\n\r\n        let comboColumnField = [];\r\n        this.extractedColumnList.map(item=>{\r\n        if(item.ndesigncomponentcode === designComponents.COMBOBOX){\r\n            comboColumnField.push(item);\r\n            }\r\n        })\r\n        this.props.onComboLoad(\"create\",this.props.Login.userInfo,this.props.Login.inputParam,ncontrolCode, comboColumnField,this.props.Login.integrationSettings);\r\n    }\r\n\r\n    closeModal = () => {\r\n        let loadEsign = this.props.Login.loadEsign;\r\n        let openModal = this.props.Login.openModal;\r\n        let selectedRecord = this.props.Login.selectedRecord;\r\n        let selectedId = this.props.Login.selectedId;\r\n        if (this.props.Login.loadEsign) {\r\n            if (this.props.Login.operation === \"delete\") {\r\n                loadEsign = false;\r\n                openModal = false;\r\n                selectedRecord = {};\r\n            }\r\n            else {\r\n                loadEsign = false;\r\n                selectedRecord['esignpassword'] = \"\"\r\n                selectedRecord['esigncomments'] = \"\"\r\n                selectedRecord['esignreason']=\"\"\r\n            }\r\n        }\r\n        else {\r\n            openModal = false;\r\n            selectedRecord = {};\r\n            selectedId=null;\r\n        }\r\n\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { openModal, loadEsign, selectedRecord,\r\n                 //selectedId:null \r\n                 selectedId}\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n\r\n    }\r\n\r\n    static getDerivedStateFromProps(props, state) {\r\n\r\n        if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\r\n            toast.warn(props.Login.masterStatus);\r\n            props.Login.masterStatus = \"\";\r\n        }\r\n\r\n        if (props.Login.error !== state.error) {\r\n            toast.error(props.Login.error)\r\n            props.Login.error = \"\";\r\n        }\r\n        return null;\r\n    }\r\n\r\n    // fnextractedColumnList  =()=>\r\n    // {\r\n    //    // return this.extractedColumnList = this.extractedColumnList1 || [];\r\n\r\n    //     this.extractedColumnList1 = this.extractedColumnList;\r\n    //     if(item.child){\r\n    //         this.extractedColumnList.map((values, index)=>{\r\n    //             if( values.dataField == item.childdatafield )\r\n    //                 {\r\n    //                     //this.extractedColumnList[index]['fieldLength']= value.toString();\r\n    //                     this.extractedColumnList[index]['fieldLength']= value;\r\n    //                 }\r\n    //         //console.log(value, index);\r\n    //     })\r\n    //         }\r\n    // }\r\n\r\n    render() {\r\n        let primaryKeyField = \"\";\r\n        let fieldList = {};\r\n        const addId = this.props.Login.inputParam && this.state.controlMap.has(\"Add\".concat(this.props.Login.inputParam.methodUrl))\r\n            && this.state.controlMap.get(\"Add\".concat(this.props.Login.inputParam.methodUrl)).ncontrolcode;\r\n\r\n        if (this.props.Login.inputParam !== undefined) {\r\n            \r\n            if(this.props.Login.inputParam.classUrl===\"limselnusermapping\")\r\n            {\r\n                fieldList = getFieldSpecification().get(this.props.Login.inputParam.methodUrl) || [];\r\n                // fieldList.forEach(item=>item.dataField === \"username\" ? \r\n                //     fieldList.push(\"methodUrl:\"+this.props.Login.integrationSettings[0].smethodname) :\"\"\r\n                // );  \r\n                for (let index = 0; index < fieldList.length; index++) {\r\n                    if (fieldList[index].elnget) {\r\n                        let smethodname=\"methodUrl\";\r\n                        let fieldListNew={...fieldList[index],methodUrl:this.props.Login.integrationSettings[0].smethodname,classUrl:this.props.Login.integrationSettings[0].sclassurlname};\r\n                       // fieldList.slice(index)\r\n                        //fieldList.push((fieldList[index]).toString())\r\n                        //this.state.selectedRole.push((selectedRecord[index]).toString());\r\n                        fieldList.splice(index,1,fieldListNew)\r\n                    }}\r\n                this.extractedColumnList = extractFieldHeader(Object.values(fieldList));\r\n                primaryKeyField = Object.keys(fieldList).length > 0 ? fieldList[0].dataField : \"\";\r\n            }\r\n\r\n           else if(this.props.Login.inputParam.classUrl===\"limselnsitemapping\")\r\n            {\r\n                fieldList = getFieldSpecification().get(this.props.Login.inputParam.methodUrl) || [];\r\n                // fieldList.forEach(item=>item.dataField === \"username\" ? \r\n                //     fieldList.push(\"methodUrl:\"+this.props.Login.integrationSettings[0].smethodname) :\"\"\r\n                // );  \r\n                for (let index = 0; index < fieldList.length; index++) {\r\n                    if (fieldList[index].elnget) {\r\n                        let smethodname=\"methodUrl\";\r\n                        let fieldListNew={...fieldList[index],methodUrl:this.props.Login.integrationSettings[1].smethodname,classUrl:this.props.Login.integrationSettings[1].sclassurlname};\r\n                       // fieldList.slice(index)\r\n                        //fieldList.push((fieldList[index]).toString())\r\n                        //this.state.selectedRole.push((selectedRecord[index]).toString());\r\n                        fieldList.splice(index,1,fieldListNew)\r\n                    }}\r\n                this.extractedColumnList = extractFieldHeader(Object.values(fieldList));\r\n                primaryKeyField = Object.keys(fieldList).length > 0 ? fieldList[0].dataField : \"\";\r\n            }\r\n            else{\r\n            fieldList = getFieldSpecification().get(this.props.Login.inputParam.methodUrl) || [];\r\n            this.extractedColumnList = extractFieldHeader(Object.values(fieldList));\r\n            primaryKeyField = Object.keys(fieldList).length > 0 ? fieldList[0].dataField : \"\";}\r\n\r\n\r\n        }\r\n\r\n        const editId = this.props.Login.inputParam && this.state.controlMap.has(\"Edit\".concat(this.props.Login.inputParam.methodUrl))\r\n               && this.state.controlMap.get(\"Edit\".concat(this.props.Login.inputParam.methodUrl)).ncontrolcode;\r\n    \r\n        const editParam = {\r\n            screenName:this.props.Login.inputParam && this.props.Login.inputParam.displayName && this.props.intl.formatMessage({ id: this.props.Login.inputParam.displayName }), \r\n            operation:\"update\",  primaryKeyField, \r\n            inputParam:this.props.Login.inputParam,   \r\n            integrationSettings:this.props.Login.integrationSettings,\r\n            userInfo:this.props.Login.userInfo, \r\n            ncontrolCode:editId,\r\n            masterData:this.props.Login.masterData,\r\n            extractedColumnList : this.extractedColumnList\r\n            };\r\n        const deleteParam ={operation:\"delete\"};\r\n        const mandatoryFields=[];\r\n        this.extractedColumnList.forEach(item=>item.mandatory === true ? \r\n            mandatoryFields.push(item) :\"\"\r\n        );        \r\n\r\n        return(<>\r\n                <Row>\r\n                    <Col>\r\n                        <ListWrapper className=\"client-list-content\">\r\n                          \r\n\r\n                            {this.state.data ?\r\n                                <DataGrid\r\n                                    primaryKeyField={primaryKeyField}\r\n                                    data={this.state.data}\r\n                                    dataResult={this.state.dataResult}\r\n                                    dataState={this.state.dataState}\r\n                                    dataStateChange={this.dataStateChange}\r\n                                    extractedColumnList={this.extractedColumnList}\r\n                                    controlMap={this.state.controlMap}\r\n                                    userRoleControlRights={this.state.userRoleControlRights}\r\n                                    inputParam={this.props.Login.inputParam}\r\n                                    userInfo={this.props.Login.userInfo}\r\n                                    fetchRecord={this.props.fetchRecordCombo}\r\n                                    editParam={editParam}\r\n                                    deleteRecord={this.deleteRecord}\r\n                                    deleteParam={deleteParam}\r\n                                    reloadData={this.reloadData}\r\n                                    addRecord = {() => this.openModal(addId)}\r\n                                    pageable={true}\r\n                                    scrollable={'scrollable'}\r\n                                    // isComponent={true}\r\n                                    gridHeight = {'600px'}\r\n                                    isActionRequired={true}\r\n                                    isToolBarRequired={true}\r\n                                    selectedId={this.props.Login.selectedId}\r\n                                />\r\n                                : \"\"}\r\n                        </ListWrapper>\r\n                    </Col>\r\n                </Row>\r\n\r\n                {/* Below Condition Added to avoid unwanted rendering of SlideOut */}\r\n                {this.props.Login.openModal ? \r\n                    <SlideOutModal show={this.props.Login.openModal}\r\n                        closeModal={this.closeModal}\r\n                        operation={this.props.Login.operation}\r\n                        inputParam={this.props.Login.inputParam}\r\n                        screenName={this.props.Login.screenName}\r\n                        onSaveClick={this.onSaveClick}\r\n                        esign={this.props.Login.loadEsign}\r\n                        validateEsign={this.validateEsign}\r\n                        masterStatus={this.props.Login.masterStatus}\r\n                        updateStore={this.props.updateStore}\r\n                        selectedRecord={this.state.selectedRecord || {}}\r\n                        mandatoryFields={mandatoryFields}\r\n                        // addComponentParam={{}}                   \r\n                        // addComponent={this.addComponent}\r\n                        addComponent={this.props.Login.loadEsign ?\r\n                            <Esign operation={this.props.Login.operation}\r\n                                onInputOnChange={this.onInputOnChange}\r\n                                inputParam={this.props.Login.inputParam}\r\n                                selectedRecord={this.state.selectedRecord || {}}\r\n                            />\r\n                            : <AddType3Component\r\n                                selectedRecord={this.state.selectedRecord || {}}\r\n                                onInputOnChange={this.onInputOnChange}\r\n                                extractedColumnList={this.extractedColumnList}\r\n                                onNumericInputOnChange={this.onNumericInputOnChange}\r\n                                onComboChange={this.onComboChange}\r\n                                handleDateChange={this.handleDateChange}                               \r\n                                userInfo={this.props.Login.userInfo}\r\n                                dataList={this.props.Login.dataList}\r\n                            />}\r\n                    />\r\n                :\"\"}\r\n\r\n            </>\r\n        );\r\n    }\r\n\r\n    componentDidUpdate(previousProps) {\r\n        if (this.props.Login.masterData !== previousProps.Login.masterData) {\r\n            if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\r\n                const userRoleControlRights = [];\r\n                if (this.props.Login.userRoleControlRights) {\r\n                    this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item =>\r\n                        userRoleControlRights.push(item.ncontrolcode))\r\n                }\r\n                const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode)\r\n                this.setState({\r\n                    userRoleControlRights, controlMap, data: this.props.Login.masterData,\r\n                    dataResult: process(this.props.Login.masterData ? this.props.Login.masterData : [], this.state.dataState),\r\n                });\r\n            }else {\r\n                let {dataState}=this.state;\r\n                if(this.props.Login.dataState===undefined){\r\n                    dataState={skip:0,take:this.state.dataState.take}\r\n                }\r\n                 if(this.state.dataResult.data){\r\n                     if(this.state.dataResult.data.length ===1){\r\n                        let skipcount=this.state.dataState.skip>0?(this.state.dataState.skip-this.state.dataState.take):\r\n                        this.state.dataState.skip\r\n                         dataState={skip:skipcount,take:this.state.dataState.take}\r\n                     }\r\n                 } \r\n                this.setState({\r\n                    data: this.props.Login.masterData, selectedRecord: this.props.Login.selectedRecord,\r\n                    dataResult: process(this.props.Login.masterData ? this.props.Login.masterData : [], dataState),\r\n                    dataState\r\n                });\r\n            }\r\n        }\r\n        \r\n        \r\n        if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\r\n            //Get selected value when clicking edit button\r\n            if(this.props.Login.selectedRecord)\r\n            {\r\n                this.setState({ selectedRecord : this.props.Login.selectedRecord });\r\n            }     \r\n         }\r\n    }\r\n\r\n    custombuttonclick = (event, component) => {\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n        const inputparam = {\r\n            component, userinfo: this.props.Login.userInfo,\r\n            selectedRecord: this.state.selectedRecord\r\n        }\r\n        this.props.getDynamicFilter(inputparam)\r\n    }\r\n\r\n    onInputOnChange = (event, item) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if (event.target.type === 'checkbox') {\r\n            selectedRecord[event.target.name] = event.target.checked === true ? 3 : 4;\r\n        }\r\n        else {\r\n            selectedRecord[event.target.name] = event.target.value;\r\n        }\r\n        if (event.target.type === 'textbox'){\r\n            selectedRecord[item.existinglength] = true\r\n        }\r\n        if(item && item.readOnlyChild){\r\n            selectedRecord[item.readOnlyChild] = event.target.value;\r\n        }\r\n        this.setState({ selectedRecord });\r\n    }    \r\n\r\n    onComboChange = (comboData, fieldName, item) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n     \r\n      \r\n        if (comboData !== null) {\r\n            if (item.foreignDataField) {\r\n                selectedRecord[item.foreignDataField] = comboData.value;\r\n            }\r\n        }\r\n        selectedRecord[fieldName] = comboData;\r\n        if (item.readOnlyChild) {\r\n            selectedRecord[item.readOnlyChild] = comboData.item[item.readOnlyParentData];\r\n        }\r\n        if(item.onChangeUrl!=undefined){\r\n            const  dataList = {\r\n                ...this.props.Login.dataList\r\n            }\r\n            // let inputData={\r\n            //     primarykeyvalue: parseInt(comboData.value),\r\n            // }\r\n            \r\n            let inputData = { dataList, selectedRecord };\r\n\r\n            let comboColumnField = [];\r\n            let primarykeyvalue={};\r\n            primarykeyvalue[item.tableDataField]=comboData.value;\r\n            this.extractedColumnList.map(item => {\r\n                if(item.onChangeUrl!=undefined){\r\n                if (item.ndesigncomponentcode === designComponents.COMBOBOX) {\r\n                    comboColumnField.push(item);\r\n                }\r\n                }})\r\n            this.props.onServiceLoad(this.props.Login.userInfo, this.props.Login.inputParam, this.props.Login.ncontrolCode, comboColumnField,primarykeyvalue,inputData);\r\n        }else{\r\n        this.setState({ selectedRecord });\r\n        }\r\n    }\r\n\r\n\r\n\r\n    handleDateChange = (dateName, dateValue, item) => {\r\n        const { selectedRecord } = this.state;\r\n        selectedRecord[dateName] = dateValue;       \r\n        this.setState({ selectedRecord });\r\n\r\n    }\r\n \r\n\r\n    onNumericInputOnChange = (value, name, item) => {\r\n        \r\n            const selectedRecord = this.state.selectedRecord || {};\r\n\r\n            if(item.child){\r\n                if(item.min>=value && value!==0 || item.max>=value && value!==0){\r\n                    selectedRecord.ncodelength = value ;\r\n                }\r\n                selectedRecord[item.childdatafield] && delete selectedRecord[item.childdatafield];\r\n            }\r\n            else{\r\n                selectedRecord[name] = value;\r\n\r\n            }\r\n            this.setState({ selectedRecord });\r\n        \r\n    }\r\n\r\n \r\n    deleteRecord = (deleteParam) =>{\r\n        const inputParam = {\r\n            classUrl: this.props.Login.inputParam.classUrl,\r\n            methodUrl: this.props.Login.inputParam.methodUrl,\r\n            displayName: this.props.Login.inputParam.displayName,\r\n            inputData: {\r\n                [this.props.Login.inputParam.methodUrl.toLowerCase()]: deleteParam.selectedRecord,\r\n                \"userinfo\": this.props.Login.userInfo\r\n            },\r\n            operation:deleteParam.operation,\r\n            dataState:this.state.dataState,\r\n            selectedRecord:{...this.state.selectedRecord}\r\n        }\r\n\r\n        const esignNeeded = showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode,deleteParam.ncontrolCode);\r\n        if (esignNeeded) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData: this.props.Login.masterData },\r\n                    openModal: true, screenName: this.props.intl.formatMessage({ id: this.props.Login.inputParam.displayName }),\r\n                    operation:deleteParam.operation\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\r\n        }\r\n    }\r\n\r\n    reloadData = () => {\r\n        const inputParam = {\r\n            inputData: { \"userinfo\": this.props.Login.userInfo },\r\n            classUrl: this.props.Login.inputParam.classUrl,\r\n            methodUrl: this.props.Login.inputParam.methodUrl,\r\n            displayName: this.props.Login.inputParam.displayName,\r\n            userInfo: this.props.Login.userInfo\r\n        };\r\n\r\n        this.props.callService(inputParam);\r\n    }\r\n\r\n    onSaveClick = (saveType, formRef) => {\r\n       \r\n            let inputData = [];\r\n            inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n            let dataState = undefined;\r\n            let selectedId = null;\r\n            let fieldList = getFieldSpecification().get(this.props.Login.inputParam.methodUrl) || [];\r\n            let selectedRecordPrimarykey = fieldList[0].dataField;\r\n\r\n                \r\n                inputData[this.props.Login.inputParam.methodUrl.toLowerCase()] = {\"nsitecode\": this.props.Login.userInfo.nmastersitecode };\r\n               \r\n                this.extractedColumnList.map(item => {\r\n                    let fieldName = item.dataField;\r\n                    if (item.isJsonField === true) {\r\n                        return inputData[this.props.Login.inputParam.methodUrl.toLowerCase()][item.jsonObjectName] = {...inputData[this.props.Login.inputParam.methodUrl.toLowerCase()][item.jsonObjectName], [fieldName]:this.state.selectedRecord[fieldName] ? this.state.selectedRecord[fieldName] : \"\" }\r\n                      }\r\n                      else {\r\n                        if(item.controlType === \"selectbox\"){\r\n                            inputData[this.props.Login.inputParam.methodUrl.toLowerCase()][fieldName] = this.state.selectedRecord[fieldName] ? this.state.selectedRecord[fieldName].label ? this.state.selectedRecord[fieldName].label : \"\" : -1;\r\n                            inputData[this.props.Login.inputParam.methodUrl.toLowerCase()][item.foreignDataField] = this.state.selectedRecord[fieldName] ? this.state.selectedRecord[fieldName].value ? this.state.selectedRecord[fieldName].value : \"\" : -1;\r\n                            if(this.props.Login.inputParam.methodUrl===\"LimsElnUsermapping\" && this.state.selectedRecord.username && this.state.selectedRecord.username.item && this.state.selectedRecord.username.item.multiusergroupcode){\r\n                                this.state.selectedRecord.username.item.multiusergroupcode.forEach(dataItem => {                         \r\n                                    if (dataItem.defaultusergroup!==\"undefined\") {\r\n                                        inputData[this.props.Login.inputParam.methodUrl.toLowerCase()][\"nelnusergroupcode\"]=dataItem.lsusergroup.usergroupcode;     \r\n                                    }\r\n                                })}\r\n                            //return inputData;\r\n                        }\r\n                        else if(item.controlType === \"datepicker\"){\r\n                            inputData[this.props.Login.inputParam.methodUrl.toLowerCase()][item.dateField] = formatInputDate(this.state.selectedRecord[fieldName] ? this.state.selectedRecord[fieldName] : \"\", false);\r\n                        }\r\n                        else if(item.controlType === \"checkbox\"){\r\n                            inputData[this.props.Login.inputParam.methodUrl.toLowerCase()][item.controlName] = this.state.selectedRecord[item.controlName] ? this.state.selectedRecord[item.controlName] : transactionStatus.NO;\r\n                        }\r\n                        else{\r\n                            inputData[this.props.Login.inputParam.methodUrl.toLowerCase()][fieldName] = this.state.selectedRecord[fieldName] ? this.state.selectedRecord[fieldName] : \"\";\r\n                        }\r\n                        inputData[this.props.Login.inputParam.methodUrl.toLowerCase()][selectedRecordPrimarykey] = this.props.Login.selectedId;\r\n                        return inputData;\r\n                      }                  })\r\n                      if(this.props.Login.operation == \"update\"){\r\n                        dataState=this.state.dataState;\r\n                        selectedId = this.props.Login.selectedId; \r\n                      }              \r\n\r\n            const inputParam = {\r\n                classUrl: this.props.Login.inputParam.classUrl,\r\n                methodUrl: this.props.Login.inputParam.methodUrl,\r\n                displayName: this.props.Login.inputParam.displayName,\r\n                inputData: inputData, selectedId,\r\n                selectedRecord:{...this.state.selectedRecord},\r\n                operation: this.props.Login.operation, saveType, formRef,dataState\r\n            }\r\n\r\n            if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        loadEsign: true, screenData: { inputParam, masterData: {...this.props.Login.masterData} },\r\n                        openModal: true, screenName: this.props.intl.formatMessage({ id: this.props.Login.inputParam.displayName }),\r\n                        operation: this.props.Login.operation\r\n                    }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n            else {\r\n               this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\r\n            }\r\n       \r\n    }\r\n    validateEsign = () => {\r\n        const inputParam = {\r\n            inputData: {\r\n                \"userinfo\": {\r\n                    ...this.props.Login.userInfo,\r\n                    sreason: this.state.selectedRecord[\"esigncomments\"],\r\n                    nreasoncode:this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].value,\r\n                    spredefinedreason:this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].label,\r\n               \r\n                },\r\n                password: this.state.selectedRecord[\"esignpassword\"]\r\n            },\r\n            screenData: this.props.Login.screenData\r\n            // screenStateData: {selected:{...this.state.selectedRecord}, masterData:{ ...this.props.Login.masterData}},\r\n        }\r\n        this.props.validateEsignCredential(inputParam, \"openModal\");\r\n    }\r\n\r\n}\r\nexport default connect(mapStateToProps, {\r\n    callService, crudMaster, updateStore, validateEsignCredential,\r\n    fetchRecordCombo, onComboLoad,onServiceLoad})(injectIntl(Type3Component));"]},"metadata":{},"sourceType":"module"}