{"ast":null,"code":"var _jsxFileName = \"E:\\\\WorkingFolder\\\\React_Postgres\\\\ALPD\\\\branches\\\\SOURCE-513-PROD\\\\SOURCE-513-ALPD-5500\\\\QuaLISWeb\\\\src\\\\pages\\\\mail\\\\emailhost\\\\EmailHost.jsx\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { injectIntl } from 'react-intl';\nimport { Row, Col } from 'react-bootstrap';\nimport { toast } from 'react-toastify';\nimport { process } from '@progress/kendo-data-query';\nimport DataGrid from '../../../components/data-grid/data-grid.component';\nimport AddEmailHost from './AddEmailHost';\nimport Esign from '../../audittrail/Esign';\nimport SlideOutModal from '../../../components/slide-out-modal/SlideOutModal';\nimport { ListWrapper } from '../../../components/client-group.styles';\nimport { callService, crudMaster, fetchEmailHostById, validateEsignCredential, openEmailHostModal, updateStore } from '../../../actions';\nimport { getControlMap, showEsign, validatePhoneNumber, validateEmail } from '../../../components/CommonScript';\nimport { DEFAULT_RETURN } from '../../../actions/LoginTypes';\nimport { transactionStatus } from '../../../components/Enumeration';\n\nconst mapStateToProps = state => {\n  return {\n    Login: state.Login\n  };\n};\n\nclass EmailHost extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.dataStateChange = event => {\n      this.setState({\n        dataResult: process(this.props.Login.masterData, event.dataState),\n        dataState: event.dataState\n      });\n    };\n\n    this.closeModal = () => {\n      let loadEsign = this.props.Login.loadEsign;\n      let openModal = this.props.Login.openModal;\n      let selectedRecord = this.props.Login.selectedRecord;\n\n      if (this.props.Login.loadEsign) {\n        if (this.props.Login.operation === \"delete\") {\n          loadEsign = false;\n          openModal = false;\n          selectedRecord = {};\n        } else {\n          loadEsign = false;\n        }\n      } else {\n        openModal = false;\n        selectedRecord = {};\n      }\n\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          openModal,\n          loadEsign,\n          selectedRecord,\n          selectedId: null\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onInputOnChange = event => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (event.target.type === 'checkbox') {\n        selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\n      } else if (event.target.name === \"nportno\") {\n        if (event.target.value !== \"\") {\n          if (!isNaN(event.target.value)) {\n            event.target.value = validatePhoneNumber(event.target.value);\n            if (event.target.value !== \"\") selectedRecord[event.target.name] = event.target.value;else selectedRecord[event.target.name] = selectedRecord[event.target.name];\n          } else {\n            selectedRecord[event.target.name] = selectedRecord[event.target.name];\n          }\n        } else {\n          selectedRecord[event.target.name] = event.target.value;\n        }\n      } else {\n        selectedRecord[event.target.name] = event.target.value;\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onComboChange = (comboData, fieldName) => {\n      if (comboData !== null) {\n        const selectedRecord = this.state.selectedRecord || {};\n        selectedRecord[fieldName] = comboData;\n        this.setState({\n          selectedRecord\n        });\n      }\n    };\n\n    this.deleteRecord = inputData => {\n      const inputParam = {\n        classUrl: this.props.Login.inputParam.classUrl,\n        methodUrl: this.props.Login.inputParam.methodUrl,\n        inputData: {\n          [this.props.Login.inputParam.methodUrl.toLowerCase()]: inputData.selectedRecord,\n          \"userinfo\": this.props.Login.userInfo\n        },\n        operation: inputData.operation,\n        displayName: this.props.Login.inputParam.displayName,\n        dataState: this.state.dataState\n      };\n      const esignNeeded = showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, inputData.ncontrolCode);\n\n      if (esignNeeded) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData: this.props.Login.masterData\n            },\n            openModal: true,\n            screenName: this.props.intl.formatMessage({\n              id: this.props.Login.inputParam.displayName\n            }),\n            operation: inputData.operation\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\n      }\n    };\n\n    this.reloadData = () => {\n      const inputParam = {\n        inputData: {\n          \"userinfo\": this.props.Login.userInfo\n        },\n        classUrl: this.props.Login.inputParam.classUrl,\n        methodUrl: this.props.Login.inputParam.methodUrl,\n        userInfo: this.props.Login.userInfo,\n        displayName: this.props.Login.inputParam.displayName\n      };\n      this.props.callService(inputParam);\n    };\n\n    this.onSaveClick = (saveType, formRef) => {\n      let inputData = [];\n      inputData[\"userinfo\"] = this.props.Login.userInfo;\n      let postParam = undefined;\n      let selectedId = null;\n\n      if (this.props.Login.operation === \"update\") {\n        // edit\n        postParam = {\n          inputListName: \"emailhost\",\n          selectedObject: \"selectedEmailHost\",\n          primaryKeyField: \"nemailhostcode\"\n        }; //inputData[\"emailhost\"] = this.state.selectedRecord;\n\n        inputData[this.props.Login.inputParam.methodUrl.toLowerCase()] = JSON.parse(JSON.stringify(this.state.selectedRecord));\n        selectedId = this.props.Login.selectedRecord.nemailhostcode;\n        this.fieldList.map(item => {\n          return inputData[\"emailhost\"][item] = this.state.selectedRecord[item] ? this.state.selectedRecord[item] : \"\";\n        });\n      } else {\n        inputData[\"emailhost\"] = {\n          \"nsitecode\": this.props.Login.userInfo.nmastersitecode\n        };\n        this.fieldList.map(item => {\n          return inputData[\"emailhost\"][item] = this.state.selectedRecord[item];\n        });\n      }\n\n      inputData[\"emailhost\"][\"sauthenticationname\"] = this.state.selectedRecord[\"sauthenticationname\"] ? this.state.selectedRecord[\"sauthenticationname\"] : \"True\";\n\n      if (inputData[\"emailhost\"][\"agree\"]) {\n        delete inputData[\"emailhost\"][\"agree\"];\n      }\n\n      const inputParam = {\n        classUrl: this.props.Login.inputParam.classUrl,\n        methodUrl: this.props.Login.inputParam.methodUrl,\n        displayName: this.props.Login.inputParam.displayName ? this.props.Login.inputParam.displayName : '',\n        inputData: inputData,\n        operation: this.props.Login.operation,\n        saveType,\n        formRef,\n        postParam,\n        searchRef: this.searchRef,\n        selectedId\n      };\n      const masterData = this.props.Login.masterData;\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolcode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData\n            },\n            saveType\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, masterData, \"openModal\");\n      } // this.props.crudMaster(inputParam, this.props.Login.masterData,\"openModal\");\n\n    };\n\n    this.validateEsign = () => {\n      const inputParam = {\n        inputData: {\n          \"userinfo\": { ...this.props.Login.userInfo,\n            sreason: this.state.selectedRecord[\"esigncomments\"],\n            nreasoncode: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].value,\n            spredefinedreason: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].label\n          },\n          password: this.state.selectedRecord[\"esignpassword\"]\n        },\n        screenData: this.props.Login.screenData\n      };\n      this.props.validateEsignCredential(inputParam, \"openModal\");\n    };\n\n    this.formRef = React.createRef(); // this.closeModal = this.closeModal.bind(this);\n\n    this.extractedColumnList = [];\n    this.fieldList = [];\n    const dataState = {\n      skip: 0,\n      take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n    };\n    this.state = {\n      data: [],\n      masterStatus: \"\",\n      error: \"\",\n      selectedRecord: {},\n      dataResult: [],\n      dataState: dataState,\n      isOpen: false,\n      userRoleControlRights: [],\n      controlMap: new Map()\n    };\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\n      toast.warn(props.Login.masterStatus);\n      props.Login.masterStatus = \"\";\n    }\n\n    if (props.Login.error !== state.error) {\n      toast.error(props.Login.error);\n      props.Login.error = \"\";\n    }\n\n    return null;\n  }\n\n  render() {\n    let primaryKeyField = \"\";\n\n    if (this.props.Login.inputParam !== undefined) {\n      this.extractedColumnList = [{\n        \"controlType\": \"textbox\",\n        \"idsName\": \"IDS_DISPLAYNAME\",\n        \"dataField\": \"sprofilename\",\n        \"width\": \"200px\"\n      }, {\n        \"controlType\": \"textbox\",\n        \"idsName\": \"IDS_HOSTNAME\",\n        \"dataField\": \"shostname\",\n        \"width\": \"200px\"\n      }, {\n        \"controlType\": \"textbox\",\n        \"idsName\": \"IDS_EMAILID\",\n        \"dataField\": \"semail\",\n        \"width\": \"200px\"\n      }, {\n        \"controlType\": \"numericinput\",\n        \"idsName\": \"IDS_PORTNO\",\n        \"dataField\": \"nportno\",\n        \"width\": \"200px\"\n      }];\n      primaryKeyField = \"nemailhostcode\";\n      this.fieldList = [\"nemailhostcode\", \"sprofilename\", \"shostname\", \"nportno\", \"semail\", \"spassword\", \"sauthenticationname\"];\n    }\n\n    const mandatoryFields = [{\n      \"mandatory\": true,\n      \"idsName\": \"IDS_DISPLAYNAME\",\n      \"dataField\": \"sprofilename\",\n      \"mandatoryLabel\": \"IDS_ENTER\",\n      \"controlType\": \"textbox\"\n    }, {\n      \"mandatory\": true,\n      \"idsName\": \"IDS_HOSTNAME\",\n      \"dataField\": \"shostname\",\n      \"mandatoryLabel\": \"IDS_ENTER\",\n      \"controlType\": \"textbox\"\n    }, {\n      \"mandatory\": true,\n      \"idsName\": \"IDS_EMAILID\",\n      \"dataField\": \"semail\",\n      \"alertPreFix\": this.props.intl.formatMessage({\n        id: \"IDS_VALID\"\n      }),\n      \"validateFunction\": validateEmail,\n      \"mandatoryLabel\": \"IDS_ENTER\",\n      \"controlType\": \"textbox\"\n    }, {\n      \"mandatory\": true,\n      \"idsName\": \"IDS_PASSWORD\",\n      \"dataField\": \"spassword\",\n      \"mandatoryLabel\": \"IDS_ENTER\",\n      \"controlType\": \"textbox\"\n    }, {\n      \"mandatory\": true,\n      \"idsName\": \"IDS_PORTNO\",\n      \"dataField\": \"nportno\",\n      \"mandatoryLabel\": \"IDS_ENTER\",\n      \"controlType\": \"textbox\"\n    }];\n    const addId = this.props.Login.inputParam && this.state.controlMap.has(\"Add\".concat(this.props.Login.inputParam.methodUrl)) && this.state.controlMap.get(\"Add\".concat(this.props.Login.inputParam.methodUrl)).ncontrolcode;\n    const editID = this.props.Login.inputParam && this.state.controlMap.has(\"Edit\".concat(this.props.Login.inputParam.methodUrl)) && this.state.controlMap.get(\"Edit\".concat(this.props.Login.inputParam.methodUrl)).ncontrolcode;\n    const deleteID = this.props.Login.inputParam && this.state.controlMap.has(\"Delete\".concat(this.props.Login.inputParam.methodUrl)) && this.state.controlMap.get(\"Delete\".concat(this.props.Login.inputParam.methodUrl)).ncontrolcode;\n    const editParam = {\n      screenName: this.props.Login.inputParam && this.props.Login.inputParam.displayName && this.props.intl.formatMessage({\n        id: this.props.Login.inputParam.displayName\n      }),\n      primaryKeyField: \"nemailhostcode\",\n      operation: \"update\",\n      inputParam: this.props.Login.inputParam,\n      userInfo: this.props.Login.userInfo,\n      ncontrolCode: editID\n    };\n    const deleteParam = {\n      operation: \"delete\",\n      ncontrolCode: deleteID\n    };\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(ListWrapper, {\n      className: \"client-list-content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 25\n      }\n    }, this.state.data ? /*#__PURE__*/React.createElement(DataGrid, {\n      primaryKeyField: primaryKeyField,\n      data: this.state.data,\n      dataResult: this.state.dataResult,\n      dataState: this.state.dataState,\n      dataStateChange: this.dataStateChange,\n      extractedColumnList: this.extractedColumnList // detailedFieldList={this.detailedFieldList}\n      //expandField=\"expanded\"\n      ,\n      formatMessage: this.props.intl.formatMessage,\n      controlMap: this.state.controlMap,\n      userRoleControlRights: this.state.userRoleControlRights,\n      inputParam: this.props.Login.inputParam,\n      userInfo: this.props.Login.userInfo,\n      fetchRecord: this.props.fetchEmailHostById,\n      deleteRecord: this.deleteRecord,\n      reloadData: this.reloadData,\n      editParam: editParam,\n      deleteParam: deleteParam,\n      addRecord: () => this.props.openEmailHostModal(\"IDS_MAILHOST\", \"create\", \"nemailhostcode\", this.props.Login.masterData, this.props.Login.userInfo, addId) // isComponent={true}\n      ,\n      pageable: true,\n      isActionRequired: true,\n      isToolBarRequired: true,\n      scrollable: \"scrollable\",\n      selectedId: this.props.Login.selectedId,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 33\n      }\n    }) : \"\"))), this.props.Login.openModal && /*#__PURE__*/React.createElement(SlideOutModal, {\n      show: this.props.Login.openModal,\n      closeModal: this.closeModal,\n      operation: this.props.Login.operation,\n      inputParam: this.props.Login.inputParam,\n      screenName: this.props.Login.screenName,\n      onSaveClick: this.onSaveClick,\n      esign: this.props.Login.loadEsign,\n      validateEsign: this.validateEsign,\n      selectedRecord: this.state.selectedRecord || {},\n      mandatoryFields: mandatoryFields,\n      masterStatus: this.props.Login.masterStatus,\n      updateStore: this.props.updateStore,\n      addComponent: this.props.Login.loadEsign ? /*#__PURE__*/React.createElement(Esign, {\n        operation: this.props.Login.operation // formatMessage={this.props.intl.formatMessage}\n        ,\n        onInputOnChange: this.onInputOnChange,\n        inputParam: this.props.Login.inputParam,\n        selectedRecord: this.state.selectedRecord || {},\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 29\n        }\n      }) : /*#__PURE__*/React.createElement(AddEmailHost, {\n        selectedRecord: this.state.selectedRecord || {},\n        onInputOnChange: this.onInputOnChange,\n        onComboChange: this.onComboChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 186,\n          columnNumber: 31\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 21\n      }\n    }));\n  }\n\n  componentDidUpdate(previousProps) {\n    if (this.props.Login.masterData !== previousProps.Login.masterData) {\n      if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\n        const userRoleControlRights = [];\n\n        if (this.props.Login.userRoleControlRights) {\n          this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item => userRoleControlRights.push(item.ncontrolcode));\n        }\n\n        const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode);\n        this.setState({\n          userRoleControlRights,\n          controlMap,\n          data: this.props.Login.masterData,\n          dataResult: process(this.props.Login.masterData, this.state.dataState)\n        });\n      } else {\n        let {\n          dataState\n        } = this.state;\n\n        if (this.props.Login.dataState === undefined) {\n          dataState = {\n            skip: 0,\n            take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n          };\n        }\n\n        this.setState({\n          data: this.props.Login.masterData,\n          // isOpen: false,\n          dataResult: process(this.props.Login.masterData, dataState),\n          dataState //,\n          //selectedRecord:{ncalibrationreq:transactionStatus.NO,ncategorybasedflow:transactionStatus.NO,ndefaultstatus:transactionStatus.NO}\n\n        });\n      }\n    } else if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\n      this.setState({\n        selectedRecord: this.props.Login.selectedRecord\n      });\n    }\n  }\n\n  componentWillUnmount() {\n    const updateInfo = {\n      typeName: DEFAULT_RETURN,\n      data: {\n        masterData: [],\n        inputParam: undefined,\n        operation: null,\n        modalName: undefined\n      }\n    };\n    this.props.updateStore(updateInfo);\n  }\n\n}\n\nexport default connect(mapStateToProps, {\n  callService,\n  crudMaster,\n  fetchEmailHostById,\n  validateEsignCredential,\n  openEmailHostModal,\n  updateStore\n})(injectIntl(EmailHost));","map":{"version":3,"sources":["E:/WorkingFolder/React_Postgres/ALPD/branches/SOURCE-513-PROD/SOURCE-513-ALPD-5500/QuaLISWeb/src/pages/mail/emailhost/EmailHost.jsx"],"names":["React","connect","injectIntl","Row","Col","toast","process","DataGrid","AddEmailHost","Esign","SlideOutModal","ListWrapper","callService","crudMaster","fetchEmailHostById","validateEsignCredential","openEmailHostModal","updateStore","getControlMap","showEsign","validatePhoneNumber","validateEmail","DEFAULT_RETURN","transactionStatus","mapStateToProps","state","Login","EmailHost","Component","constructor","props","dataStateChange","event","setState","dataResult","masterData","dataState","closeModal","loadEsign","openModal","selectedRecord","operation","updateInfo","typeName","data","selectedId","onInputOnChange","target","type","name","checked","YES","NO","value","isNaN","onComboChange","comboData","fieldName","deleteRecord","inputData","inputParam","classUrl","methodUrl","toLowerCase","userInfo","displayName","esignNeeded","userRoleControlRights","nformcode","ncontrolCode","screenData","screenName","intl","formatMessage","id","reloadData","onSaveClick","saveType","formRef","postParam","undefined","inputListName","selectedObject","primaryKeyField","JSON","parse","stringify","nemailhostcode","fieldList","map","item","nmastersitecode","searchRef","ncontrolcode","validateEsign","sreason","nreasoncode","spredefinedreason","label","password","createRef","extractedColumnList","skip","take","settings","parseInt","masterStatus","error","isOpen","controlMap","Map","getDerivedStateFromProps","warn","render","mandatoryFields","addId","has","concat","get","editID","deleteID","editParam","deleteParam","componentDidUpdate","previousProps","Object","values","push","componentWillUnmount","modalName"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { injectIntl } from 'react-intl';\r\nimport { Row, Col } from 'react-bootstrap';\r\nimport { toast } from 'react-toastify';\r\nimport { process } from '@progress/kendo-data-query';\r\nimport DataGrid from '../../../components/data-grid/data-grid.component';\r\nimport AddEmailHost from './AddEmailHost';\r\nimport Esign from '../../audittrail/Esign';\r\nimport SlideOutModal from '../../../components/slide-out-modal/SlideOutModal';\r\nimport { ListWrapper } from '../../../components/client-group.styles';\r\nimport { callService, crudMaster, fetchEmailHostById, validateEsignCredential, openEmailHostModal, updateStore } from '../../../actions';\r\nimport { getControlMap, showEsign,validatePhoneNumber, validateEmail } from '../../../components/CommonScript';\r\nimport { DEFAULT_RETURN } from '../../../actions/LoginTypes';\r\nimport { transactionStatus } from '../../../components/Enumeration';\r\n\r\nconst mapStateToProps = state => {\r\n    return ({ Login: state.Login })\r\n}\r\n\r\nclass EmailHost extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.formRef = React.createRef();\r\n        // this.closeModal = this.closeModal.bind(this);\r\n        this.extractedColumnList = [];\r\n        this.fieldList = [];\r\n\r\n        const dataState = {\r\n            skip: 0,\r\n            take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5,\r\n        };\r\n        this.state = {\r\n            data: [], masterStatus: \"\", error: \"\", selectedRecord: {},\r\n            dataResult: [],\r\n            dataState: dataState,\r\n            isOpen: false,\r\n            userRoleControlRights: [],\r\n            controlMap: new Map()\r\n        };\r\n    }\r\n\r\n    static getDerivedStateFromProps(props, state) {\r\n\r\n        if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\r\n            toast.warn(props.Login.masterStatus);\r\n            props.Login.masterStatus = \"\";\r\n        }\r\n\r\n        if (props.Login.error !== state.error) {\r\n            toast.error(props.Login.error)\r\n            props.Login.error = \"\";\r\n        }\r\n        return null;\r\n    }\r\n\r\n    dataStateChange = (event) => {\r\n        this.setState({\r\n            dataResult: process(this.props.Login.masterData, event.dataState),\r\n            dataState: event.dataState\r\n        });\r\n    }\r\n\r\n\r\n    closeModal = () => {\r\n        let loadEsign = this.props.Login.loadEsign;\r\n        let openModal = this.props.Login.openModal;\r\n        let selectedRecord = this.props.Login.selectedRecord;\r\n        if (this.props.Login.loadEsign) {\r\n            if (this.props.Login.operation === \"delete\") {\r\n                loadEsign = false;\r\n                openModal = false;\r\n                selectedRecord = {};\r\n            } else {\r\n                loadEsign = false;\r\n            }\r\n        } else {\r\n            openModal = false;\r\n            selectedRecord = {};\r\n        }\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { openModal, loadEsign, selectedRecord ,selectedId:null}\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n\r\n    render() {\r\n\r\n        let primaryKeyField = \"\";\r\n\r\n        if (this.props.Login.inputParam !== undefined) {\r\n\r\n            this.extractedColumnList = [\r\n                    { \"controlType\": \"textbox\", \"idsName\": \"IDS_DISPLAYNAME\", \"dataField\": \"sprofilename\", \"width\": \"200px\" },\r\n                    { \"controlType\": \"textbox\", \"idsName\": \"IDS_HOSTNAME\", \"dataField\": \"shostname\", \"width\": \"200px\" },\r\n                    { \"controlType\": \"textbox\", \"idsName\": \"IDS_EMAILID\", \"dataField\": \"semail\", \"width\": \"200px\" },\r\n                    { \"controlType\": \"numericinput\", \"idsName\": \"IDS_PORTNO\", \"dataField\": \"nportno\", \"width\": \"200px\" },\r\n               ]\r\n       \r\n            primaryKeyField = \"nemailhostcode\";\r\n            this.fieldList = [\"nemailhostcode\",\"sprofilename\", \"shostname\", \"nportno\", \"semail\",\"spassword\",\"sauthenticationname\"];\r\n        }\r\n        const mandatoryFields=[ { \"mandatory\": true, \"idsName\": \"IDS_DISPLAYNAME\", \"dataField\": \"sprofilename\" , \"mandatoryLabel\":\"IDS_ENTER\", \"controlType\": \"textbox\" },\r\n                                 { \"mandatory\": true, \"idsName\": \"IDS_HOSTNAME\", \"dataField\": \"shostname\", \"mandatoryLabel\":\"IDS_ENTER\", \"controlType\": \"textbox\"},\r\n                                 { \"mandatory\": true, \"idsName\": \"IDS_EMAILID\", \"dataField\": \"semail\", \"alertPreFix\": this.props.intl.formatMessage({ id: \"IDS_VALID\" }), \"validateFunction\": validateEmail ,\"mandatoryLabel\":\"IDS_ENTER\", \"controlType\": \"textbox\"},\r\n                                 { \"mandatory\": true, \"idsName\": \"IDS_PASSWORD\", \"dataField\": \"spassword\", \"mandatoryLabel\":\"IDS_ENTER\", \"controlType\": \"textbox\"},\r\n                                 { \"mandatory\": true, \"idsName\": \"IDS_PORTNO\", \"dataField\": \"nportno\", \"mandatoryLabel\":\"IDS_ENTER\", \"controlType\": \"textbox\"}\r\n\r\n                                ];\r\n        const addId = this.props.Login.inputParam && this.state.controlMap.has(\"Add\".concat(this.props.Login.inputParam.methodUrl))\r\n            && this.state.controlMap.get(\"Add\".concat(this.props.Login.inputParam.methodUrl)).ncontrolcode;\r\n\r\n        const editID = this.props.Login.inputParam && this.state.controlMap.has(\"Edit\".concat(this.props.Login.inputParam.methodUrl))\r\n            && this.state.controlMap.get(\"Edit\".concat(this.props.Login.inputParam.methodUrl)).ncontrolcode;\r\n\r\n            const deleteID = this.props.Login.inputParam && this.state.controlMap.has(\"Delete\".concat(this.props.Login.inputParam.methodUrl))\r\n            && this.state.controlMap.get(\"Delete\".concat(this.props.Login.inputParam.methodUrl)).ncontrolcode;\r\n\r\n        const editParam = {\r\n            screenName: this.props.Login.inputParam && this.props.Login.inputParam.displayName && this.props.intl.formatMessage({ id: this.props.Login.inputParam.displayName }), primaryKeyField: \"nemailhostcode\", operation: \"update\",\r\n            inputParam: this.props.Login.inputParam, userInfo: this.props.Login.userInfo, ncontrolCode: editID\r\n        };\r\n        const deleteParam = { operation: \"delete\",ncontrolCode:deleteID};\r\n        return (\r\n            <>\r\n                <Row>\r\n                    <Col>\r\n                        <ListWrapper className=\"client-list-content\">\r\n                            {this.state.data ?\r\n                                <DataGrid\r\n                                    primaryKeyField={primaryKeyField}\r\n                                    data={this.state.data}\r\n                                    dataResult={this.state.dataResult}\r\n                                    dataState={this.state.dataState}\r\n                                    dataStateChange={this.dataStateChange}\r\n                                    extractedColumnList={this.extractedColumnList}\r\n                                   // detailedFieldList={this.detailedFieldList}\r\n                                    //expandField=\"expanded\"\r\n                                    formatMessage={this.props.intl.formatMessage}\r\n                                    controlMap={this.state.controlMap}\r\n                                    userRoleControlRights={this.state.userRoleControlRights}\r\n                                    inputParam={this.props.Login.inputParam}\r\n                                    userInfo={this.props.Login.userInfo}\r\n                                    fetchRecord={this.props.fetchEmailHostById}\r\n                                    deleteRecord={this.deleteRecord}\r\n                                    reloadData={this.reloadData}\r\n                                    editParam={editParam}\r\n                                    deleteParam={deleteParam}\r\n                                    addRecord={() => this.props.openEmailHostModal(\"IDS_MAILHOST\", \"create\", \"nemailhostcode\", this.props.Login.masterData, this.props.Login.userInfo, addId)}\r\n                                    // isComponent={true}\r\n                                    pageable={true}\r\n                                    isActionRequired={true}\r\n                                    isToolBarRequired={true}\r\n                                    scrollable={\"scrollable\"}\r\n                                    selectedId={this.props.Login.selectedId}\r\n\r\n                                />\r\n                            : \"\"}\r\n                        </ListWrapper>\r\n                    </Col>\r\n                </Row>\r\n                {this.props.Login.openModal &&\r\n                    <SlideOutModal\r\n                        show={this.props.Login.openModal}\r\n                        closeModal={this.closeModal}\r\n                        operation={this.props.Login.operation}\r\n                        inputParam={this.props.Login.inputParam}\r\n                        screenName={this.props.Login.screenName}\r\n                        onSaveClick={this.onSaveClick}\r\n                        esign={this.props.Login.loadEsign}\r\n                        validateEsign={this.validateEsign}\r\n                        selectedRecord={this.state.selectedRecord || {}}\r\n                        mandatoryFields={mandatoryFields}\r\n                        masterStatus={this.props.Login.masterStatus}\r\n                        updateStore={this.props.updateStore}\r\n                        addComponent={this.props.Login.loadEsign ?\r\n                            <Esign\r\n                                operation={this.props.Login.operation}\r\n                               // formatMessage={this.props.intl.formatMessage}\r\n                                onInputOnChange={this.onInputOnChange}\r\n                                inputParam={this.props.Login.inputParam}\r\n                                selectedRecord={this.state.selectedRecord || {}}\r\n                            />\r\n                            : <AddEmailHost\r\n                                selectedRecord={this.state.selectedRecord || {}}\r\n                                onInputOnChange={this.onInputOnChange}\r\n                                onComboChange={this.onComboChange}\r\n\r\n                            />\r\n                        }\r\n                    />\r\n                }\r\n            </>\r\n        );\r\n    }\r\n\r\n    componentDidUpdate(previousProps) {\r\n        if (this.props.Login.masterData !== previousProps.Login.masterData) {\r\n            if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\r\n                const userRoleControlRights = [];\r\n                if (this.props.Login.userRoleControlRights) {\r\n                    this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item =>\r\n                        userRoleControlRights.push(item.ncontrolcode))\r\n                }\r\n                const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode)\r\n                this.setState({\r\n                    userRoleControlRights, controlMap, data: this.props.Login.masterData,\r\n                    dataResult: process(this.props.Login.masterData, this.state.dataState),\r\n                });\r\n            }\r\n            else {\r\n                let { dataState } = this.state;\r\n                if (this.props.Login.dataState === undefined) {\r\n                    dataState = { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 }\r\n                }\r\n\r\n                this.setState({\r\n                    data: this.props.Login.masterData,\r\n                    // isOpen: false,\r\n                    dataResult: process(this.props.Login.masterData, dataState),\r\n                    dataState//,\r\n                    //selectedRecord:{ncalibrationreq:transactionStatus.NO,ncategorybasedflow:transactionStatus.NO,ndefaultstatus:transactionStatus.NO}\r\n                });\r\n            }\r\n        } else if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\r\n            this.setState({ selectedRecord: this.props.Login.selectedRecord });\r\n        }\r\n    }\r\n\r\n    onInputOnChange = (event) => {\r\n\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if (event.target.type === 'checkbox') \r\n        {\r\n           selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\r\n        }\r\n        else if (event.target.name === \"nportno\")\r\n        {\r\n           if (event.target.value !== \"\"){\r\n                \r\n                if(!isNaN(event.target.value)){\r\n                    event.target.value = validatePhoneNumber(event.target.value);\r\n                 if (event.target.value !== \"\")\r\n                      selectedRecord[event.target.name] = event.target.value;\r\n                 else\r\n                     selectedRecord[event.target.name] = selectedRecord[event.target.name];\r\n                }else{\r\n                    selectedRecord[event.target.name] = selectedRecord[event.target.name]; \r\n                }\r\n            }\r\n            else{     \r\n                selectedRecord[event.target.name] = event.target.value;               \r\n            }\r\n        } \r\n        else {\r\n            selectedRecord[event.target.name] = event.target.value;\r\n        }\r\n        this.setState({ selectedRecord });\r\n\r\n    }\r\n\r\n    onComboChange = (comboData, fieldName) => {\r\n        if (comboData !== null) {\r\n            const selectedRecord = this.state.selectedRecord || {};\r\n            selectedRecord[fieldName] = comboData;\r\n            this.setState({ selectedRecord });\r\n        }\r\n    }\r\n\r\n    deleteRecord = (inputData) => {\r\n        const inputParam = {\r\n            classUrl: this.props.Login.inputParam.classUrl,\r\n            methodUrl: this.props.Login.inputParam.methodUrl,\r\n\r\n            inputData: {\r\n                [this.props.Login.inputParam.methodUrl.toLowerCase()]: inputData.selectedRecord,\r\n                \"userinfo\": this.props.Login.userInfo\r\n            },\r\n            operation: inputData.operation,\r\n            displayName: this.props.Login.inputParam.displayName,\r\n            dataState: this.state.dataState\r\n        }\r\n        const esignNeeded = showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, inputData.ncontrolCode);\r\n        if (esignNeeded) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData: this.props.Login.masterData },\r\n                    openModal: true, screenName: this.props.intl.formatMessage({ id: this.props.Login.inputParam.displayName }),\r\n                    operation: inputData.operation\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\r\n        }\r\n    }\r\n\r\n    reloadData = () => {\r\n        const inputParam = {\r\n            inputData: { \"userinfo\": this.props.Login.userInfo },\r\n\r\n            classUrl: this.props.Login.inputParam.classUrl,\r\n            methodUrl: this.props.Login.inputParam.methodUrl,\r\n            userInfo: this.props.Login.userInfo,\r\n            displayName: this.props.Login.inputParam.displayName\r\n        };\r\n\r\n        this.props.callService(inputParam);\r\n    }\r\n\r\n    onSaveClick = (saveType, formRef) => {\r\n        let inputData = [];\r\n        inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n        let postParam = undefined;\r\n        let selectedId = null;\r\n\r\n        if (this.props.Login.operation === \"update\") {\r\n            // edit\r\n            postParam = { inputListName: \"emailhost\", selectedObject: \"selectedEmailHost\", \r\n                          primaryKeyField: \"nemailhostcode\" }\r\n            //inputData[\"emailhost\"] = this.state.selectedRecord;\r\n\r\n            inputData[this.props.Login.inputParam.methodUrl.toLowerCase()] = JSON.parse(JSON.stringify(this.state.selectedRecord));\r\n            selectedId = this.props.Login.selectedRecord.nemailhostcode;\r\n            this.fieldList.map(item => {\r\n               return inputData[\"emailhost\"][item] = this.state.selectedRecord[item] ? this.state.selectedRecord[item] : \"\";\r\n              })\r\n        } else {\r\n            inputData[\"emailhost\"] = { \"nsitecode\": this.props.Login.userInfo.nmastersitecode };\r\n             this.fieldList.map(item => {\r\n                return inputData[\"emailhost\"][item] = this.state.selectedRecord[item]\r\n              });\r\n        }\r\n        inputData[\"emailhost\"][\"sauthenticationname\"] = this.state.selectedRecord[\"sauthenticationname\"]? this.state.selectedRecord[\"sauthenticationname\"]:\"True\";\r\n\r\n        if (inputData[\"emailhost\"][\"agree\"]){\r\n            delete inputData[\"emailhost\"][\"agree\"]\r\n        }\r\n\r\n        const inputParam = {\r\n            classUrl: this.props.Login.inputParam.classUrl,\r\n            methodUrl: this.props.Login.inputParam.methodUrl,\r\n            displayName: this.props.Login.inputParam.displayName ? this.props.Login.inputParam.displayName : '',\r\n            inputData: inputData,\r\n            operation: this.props.Login.operation,\r\n            saveType, formRef, postParam, searchRef: this.searchRef, selectedId\r\n        }\r\n        const masterData = this.props.Login.masterData;\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolcode)) {\r\n\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData }, saveType\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n\r\n            this.props.crudMaster(inputParam, masterData, \"openModal\");\r\n        }\r\n        // this.props.crudMaster(inputParam, this.props.Login.masterData,\"openModal\");\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                masterData: [], inputParam: undefined, operation: null, modalName: undefined\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    validateEsign = () => {\r\n        const inputParam = {\r\n            inputData: {\r\n                \"userinfo\": {\r\n                    ...this.props.Login.userInfo,\r\n                    sreason: this.state.selectedRecord[\"esigncomments\"],\r\n                    nreasoncode:this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].value,\r\n                    spredefinedreason:this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].label,\r\n               \r\n                },\r\n                password: this.state.selectedRecord[\"esignpassword\"]\r\n            },\r\n            screenData: this.props.Login.screenData\r\n        }\r\n        this.props.validateEsignCredential(inputParam, \"openModal\");\r\n    }\r\n\r\n}\r\nexport default connect(mapStateToProps, { callService, crudMaster, fetchEmailHostById, validateEsignCredential, openEmailHostModal, updateStore })(injectIntl(EmailHost));"]},"metadata":{},"sourceType":"module"}