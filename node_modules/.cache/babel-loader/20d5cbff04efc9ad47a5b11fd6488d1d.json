{"ast":null,"code":"import rsapi from '../rsapi';\nimport { DEFAULT_RETURN, REQUEST_FAILURE } from './LoginTypes';\nimport { sortData } from '../components/CommonScript';\nimport { initRequest } from './LoginAction';\nimport { toast } from 'react-toastify';\nimport { intl } from '../components/App';\nexport function sendRequest(obj) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    const newMap = { ...obj.inputData\n    };\n    const masterData = obj.masterData;\n    const selectedRecord = obj.selectedRecord;\n    const query = obj.sqlquery;\n    rsapi.post(obj.url, { ...newMap,\n      userinfo: obj.userinfo,\n      query,\n      whereCondition: newMap.whereCondition,\n      parameters: obj.parameters\n    }).then(response => {\n      masterData['consoleData'] = response.data;\n      newMap['whereCondition'] = obj.inputData.whereCondition; // selectedRecord['filterNew']\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...masterData,\n            selectedRecord,\n            newMap\n          },\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n    });\n  };\n}\nexport function getQualisForms(obj) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    const userinfo = obj.userinfo;\n    let selectedRecord = obj.selectedRecord;\n    selectedRecord = { ...selectedRecord,\n      \"ParamValue\": \"\"\n    };\n    let Parameters = obj.Parameters;\n    let constructApiData = obj.constructApiData;\n    let masterData = obj.masterData;\n    rsapi.post('/apiservice/getQualisForms', {\n      'userinfo': userinfo,\n      'napiservicecode': selectedRecord.napiservicecode.value\n    }).then(response => {\n      masterData = { ...masterData,\n        ...response.data // lstquerybilderColumns: response.data.lstquerybilderColumns.map((item, index) => {\n        //         return { label: item.scolumndisplayname, value: index, item: { ...item } }})\n\n      };\n      masterData['SelectedApi'] = selectedRecord['napiservicecode'];\n\n      if (selectedRecord['napiservicecode'].value < 3) {\n        constructApiData = obj.constructApiData;\n      } else {\n        constructApiData = [];\n      }\n\n      if (!response.data.needdisplayparam) {\n        Parameters = undefined;\n      }\n\n      masterData['consoleData'] = [];\n      masterData = { ...masterData,\n        Parameters\n      };\n      selectedRecord['filterNew'] = [];\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...masterData\n          },\n          loading: false,\n          selectedRecord,\n          userinfo,\n          //constructApiData:[]\n          constructApiData\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n    });\n  };\n}\nexport function getQualisFormsFields(obj) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    const userinfo = obj.userinfo;\n    let selectedRecord = { ...obj.selectedRecord,\n      'filterNew': []\n    };\n    selectedRecord = { ...selectedRecord,\n      \"ParamValue\": \"\"\n    };\n    let masterData = { ...obj.masterData\n    };\n    rsapi.post('/apiservice/getQualisFormFields', {\n      'userinfo': userinfo,\n      'nformcode': selectedRecord.nformcode.value\n    }).then(response => {\n      masterData = { ...masterData,\n        'lstquerybilderColumns': response.data,\n        'SelectedForm': { ...selectedRecord['nformcode']\n        },\n        'consoleData': []\n      };\n      selectedRecord['filterNew'] = [];\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...masterData\n          },\n          loading: false,\n          selectedRecord\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n    });\n  };\n}\nexport function getCustomQuery(obj) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    const userinfo = obj.userinfo;\n    let selectedRecord = obj.selectedRecord;\n    selectedRecord = { ...selectedRecord,\n      \"ParamValue\": \"\"\n    };\n    let constructApiData = obj.constructApiData;\n    let masterData = obj.masterData;\n    rsapi.post('/apiservice/getCustomQuery', {\n      'userinfo': userinfo,\n      'napiservicecode': selectedRecord.napiservicecode.value\n    }).then(response => {\n      masterData = { ...masterData,\n        ...response.data\n      };\n      masterData['SelectedApi'] = selectedRecord['napiservicecode'];\n      masterData['SelectedSQLQuery'] = response.data.SelectedSQLQuery;\n      masterData['Columns'] = response.data.Columns;\n      masterData['Parameters'] = response.data.Parameters;\n      constructApiData = obj.constructApiData;\n      masterData['consoleData'] = [];\n      selectedRecord['filterNew'] = []; //ALPD-3801\n\n      selectedRecord[\"nsqlquerycode\"] = {\n        \"item\": response.data.SelectedSQLQuery.item,\n        \"label\": response.data.SelectedSQLQuery.label,\n        \"value\": response.data.SelectedSQLQuery.value\n      };\n      masterData['needdisplayparam'] = response.data.needdisplayparam;\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...masterData\n          },\n          loading: false,\n          selectedRecord,\n          userinfo,\n          constructApiData\n        }\n      });\n    }).catch(response => {\n      console.log(\"error:\", response);\n\n      if (response.response.status === 500) {\n        dispatch({\n          type: REQUEST_FAILURE,\n          payload: {\n            error: response.message,\n            loading: false // openPortal:this.props.Login.openPortal,\n            //openModal:inputParam.openPortal?false:true\n\n          }\n        });\n      }\n    });\n  };\n}\nexport function getCustomQueryName(obj) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    const userinfo = obj.userinfo; //ALPD-3801\n\n    let selectedRecord = { ...obj.selectedRecord,\n      \"ParamValue\": \"\"\n    };\n    let masterData = { ...obj.masterData\n    };\n    rsapi.post('/apiservice/getCustomQueryName', {\n      'userinfo': userinfo,\n      'nsqlquerycode': selectedRecord.nsqlquerycode.value\n    }).then(response => {\n      masterData = { ...masterData\n      };\n      masterData['SelectedSQLQuery'] = response.data.SelectedSQLQuery; //ALPD-3801\n\n      masterData['Parameters'] = response.data.Parameters;\n      masterData['needdisplayparam'] = response.data.needdisplayparam;\n      masterData['Columns'] = response.data.Columns;\n      masterData['consoleData'] = [];\n      selectedRecord['filterNew'] = [];\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...masterData\n          },\n          loading: false,\n          selectedRecord\n        }\n      });\n    }).catch(response => {\n      console.log(\"error:\", response);\n\n      if (response.response.status === 500) {\n        dispatch({\n          type: REQUEST_FAILURE,\n          payload: {\n            error: response.message,\n            loading: false // openPortal:this.props.Login.openPortal,\n            //openModal:inputParam.openPortal?false:true\n\n          }\n        });\n      }\n    });\n  };\n}","map":{"version":3,"sources":["E:/WorkingFolder/React_Postgres/ALPD/branches/SOURCE-512/QuaLISWeb/src/actions/APIServiceAction.js"],"names":["rsapi","DEFAULT_RETURN","REQUEST_FAILURE","sortData","initRequest","toast","intl","sendRequest","obj","dispatch","newMap","inputData","masterData","selectedRecord","query","sqlquery","post","url","userinfo","whereCondition","parameters","then","response","data","type","payload","loading","catch","error","getQualisForms","Parameters","constructApiData","napiservicecode","value","needdisplayparam","undefined","getQualisFormsFields","nformcode","getCustomQuery","SelectedSQLQuery","Columns","item","label","console","log","status","message","getCustomQueryName","nsqlquerycode"],"mappings":"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","sourcesContent":["import rsapi from '../rsapi';\r\nimport { DEFAULT_RETURN,REQUEST_FAILURE } from './LoginTypes';\r\nimport { sortData } from '../components/CommonScript';\r\nimport { initRequest } from './LoginAction';\r\nimport { toast } from 'react-toastify';\r\nimport { intl } from '../components/App';\r\n\r\n\r\nexport function sendRequest(obj) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        const newMap={...obj.inputData}\r\n        const masterData=obj.masterData\r\n        const selectedRecord=obj.selectedRecord\r\n        const query = obj.sqlquery\r\n        rsapi.post(obj.url, {...newMap , userinfo: obj.userinfo ,query , whereCondition: newMap.whereCondition,parameters:obj.parameters} )\r\n            .then(response => {\r\n                masterData['consoleData']=response.data\r\n                newMap['whereCondition']=obj.inputData.whereCondition\r\n                // selectedRecord['filterNew']\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData:{...masterData,selectedRecord,newMap}, loading: false\r\n                        \r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN,payload: { loading: false }})\r\n            })\r\n    }\r\n}\r\n\r\nexport function getQualisForms(obj) {\r\n    return function (dispatch) {     \r\n        dispatch(initRequest(true));\r\n       const userinfo=obj.userinfo\r\n       let selectedRecord=obj.selectedRecord\r\n       selectedRecord={...selectedRecord,\"ParamValue\":\"\"}\r\n    let Parameters=obj.Parameters\r\n       let constructApiData = obj.constructApiData\r\n       let masterData=obj.masterData\r\n        rsapi.post('/apiservice/getQualisForms', {'userinfo':userinfo,'napiservicecode':selectedRecord.napiservicecode.value} )\r\n            .then(response => {\r\n                masterData={...masterData,\r\n                    ...response.data,\r\n                    // lstquerybilderColumns: response.data.lstquerybilderColumns.map((item, index) => {\r\n                    //         return { label: item.scolumndisplayname, value: index, item: { ...item } }})\r\n                }\r\n                masterData['SelectedApi']=selectedRecord['napiservicecode']\r\n                if(selectedRecord['napiservicecode'].value < 3){   \r\n                    constructApiData = obj.constructApiData\r\n                }\r\n                else{\r\n                    constructApiData = []\r\n                }\r\n             \r\n                if(!response.data.needdisplayparam){\r\n                    Parameters=undefined\r\n                }\r\n                \r\n                masterData['consoleData']=[]\r\n                masterData={...masterData,Parameters}\r\n                selectedRecord['filterNew']=[]\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData:{...masterData},\r\n                        loading: false,\r\n                        selectedRecord,\r\n                        userinfo,\r\n                        //constructApiData:[]\r\n                        constructApiData\r\n                        \r\n                       \r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n            })\r\n    }\r\n}\r\n\r\nexport function getQualisFormsFields(obj) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n       const userinfo=obj.userinfo\r\n       let selectedRecord={...obj.selectedRecord,'filterNew':[]}\r\n       selectedRecord={...selectedRecord,\"ParamValue\":\"\"}\r\n\r\n       let masterData={...obj.masterData}\r\n        rsapi.post('/apiservice/getQualisFormFields', {'userinfo':userinfo,'nformcode':selectedRecord.nformcode.value} )\r\n            .then(response => {\r\n                masterData={...masterData,'lstquerybilderColumns':response.data,\r\n                'SelectedForm':{...selectedRecord['nformcode']},'consoleData':[]}\r\n                selectedRecord['filterNew']=[]\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData:{...masterData} ,\r\n                        loading: false,\r\n                        selectedRecord\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n            })\r\n    }\r\n}\r\n\r\nexport function getCustomQuery(obj) {\r\n    return function (dispatch) {     \r\n        dispatch(initRequest(true));\r\n       const userinfo=obj.userinfo\r\n       let selectedRecord=obj.selectedRecord\r\n        selectedRecord={...selectedRecord,\"ParamValue\":\"\"}\r\n       let constructApiData = obj.constructApiData\r\n       let masterData=obj.masterData\r\n        rsapi.post('/apiservice/getCustomQuery', {'userinfo':userinfo,'napiservicecode':selectedRecord.napiservicecode.value} )\r\n            .then(response => {\r\n                masterData={...masterData,\r\n                    ...response.data,\r\n                }\r\n                masterData['SelectedApi']=selectedRecord['napiservicecode']\r\n                masterData['SelectedSQLQuery'] = response.data.SelectedSQLQuery\r\n                masterData['Columns']=response.data.Columns\r\n                masterData['Parameters']=response.data.Parameters\r\n                constructApiData = obj.constructApiData\r\n                masterData['consoleData']=[]\r\n                selectedRecord['filterNew']=[]\r\n\t\t\t\t//ALPD-3801\r\n                selectedRecord[\"nsqlquerycode\"]={\"item\":response.data.SelectedSQLQuery.item,\r\n                \"label\":response.data.SelectedSQLQuery.label,\r\n                \"value\":response.data.SelectedSQLQuery.value\r\n               }\r\n               masterData['needdisplayparam']=response.data.needdisplayparam\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData:{...masterData},\r\n                        loading: false,\r\n                        selectedRecord,\r\n                        userinfo,\r\n                        constructApiData\r\n                    }\r\n                });\r\n            })\r\n            .catch(response => {\r\n                console.log(\"error:\", response);\r\n                if (response.response.status === 500) {\r\n                  dispatch({\r\n                    type: REQUEST_FAILURE,\r\n                    payload: {\r\n                      error: response.message,\r\n                      loading: false,\r\n                      // openPortal:this.props.Login.openPortal,\r\n                      //openModal:inputParam.openPortal?false:true\r\n                    }\r\n                  });\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function getCustomQueryName(obj) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n       const userinfo=obj.userinfo\r\n        //ALPD-3801\r\n       let selectedRecord={...obj.selectedRecord,\"ParamValue\":\"\"}\r\n       let masterData={...obj.masterData}\r\n        rsapi.post('/apiservice/getCustomQueryName', {'userinfo':userinfo,'nsqlquerycode':selectedRecord.nsqlquerycode.value} )\r\n            .then(response => {\r\n                masterData={...masterData}\r\n                masterData['SelectedSQLQuery'] = response.data.SelectedSQLQuery\r\n\t\t\t\t//ALPD-3801\r\n                masterData['Parameters'] = response.data.Parameters\r\n                masterData['needdisplayparam'] = response.data.needdisplayparam\r\n                masterData['Columns']=response.data.Columns\r\n                masterData['consoleData']=[]\r\n                selectedRecord['filterNew']=[]\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData:{...masterData} ,\r\n                        loading: false,\r\n                        selectedRecord\r\n                    }\r\n                });\r\n            })\r\n            .catch(response => {\r\n                console.log(\"error:\", response);\r\n                if (response.response.status === 500) {\r\n                  dispatch({\r\n                    type: REQUEST_FAILURE,\r\n                    payload: {\r\n                      error: response.message,\r\n                      loading: false,\r\n                      // openPortal:this.props.Login.openPortal,\r\n                      //openModal:inputParam.openPortal?false:true\r\n                    }\r\n                  });\r\n                }            })\r\n    }\r\n}\r\n\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}