{"ast":null,"code":"import rsapi from '../rsapi';\nimport Axios from 'axios';\nimport { toast } from 'react-toastify';\nimport { DEFAULT_RETURN } from './LoginTypes';\nimport { initRequest } from './LoginAction';\nimport { sortData, constructOptionList, rearrangeDateFormat, formatInputDate } from '../components/CommonScript';\nimport { transactionStatus } from '../components/Enumeration';\nimport { intl } from \"../components/App\";\nexport const getreloadQuotation = inputParam => {\n  return dispatch => {\n    dispatch(initRequest(true));\n    rsapi.post(\"/quotation/get\" + inputParam.methodUrl, inputParam.inputData).then(response => {\n      const masterData = response.data;\n      sortData(masterData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false,\n          dataState: undefined,\n          masterData: { ...masterData // quotation: inputParam.inputData.quotation\n\n          }\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n      toast.error(error.message);\n    });\n  };\n};\nexport function getQuotationClientCategoryComboService(methodParam, selectedRecord) {\n  return function (dispatch) {\n    let URL = [];\n    URL = rsapi.post(\"/client/getClientByCategory\", {\n      \"userinfo\": methodParam.inputData.userinfo,\n      \"nclientcatcode\": methodParam.inputData.primarykey\n    });\n    dispatch(initRequest(true));\n    Axios.all([URL]).then(response => {\n      let Client, sclientsiteaddress, ClientSite, ClientContact;\n      const ClientMap = constructOptionList(response[0].data.Client || [], \"nclientcode\", \"sclientname\", undefined, undefined, false); // const ClientSiteMap = constructOptionList(response[0].data.ClientSite || [], \"nclientsitecode\",\"sclientsitename\", undefined, undefined, false);              \n      // const ClientContactMap = constructOptionList(response[0].data.ClientContact || [], \"nclientcontactcode\",\"scontactname\", undefined, undefined, false);              \n\n      Client = ClientMap.get(\"OptionList\"); // ClientSite = ClientSiteMap.get(\"OptionList\");\n      // ClientContact = ClientContactMap.get(\"OptionList\");\n      // let ActiveClientSite = response[0].data.ClientSite.filter(x => x.ndefaultstatus === 3);\n      // let ActiveClientContact = response[0].data.ClientContact.filter(x => x.ndefaultstatus === 3);\n      // if(Client.length>0){\n      //     selectedRecord[\"nclientcode\"]=  {\n      //         label: response[0].data.selectedClient.sclientname,\n      //         value: response[0].data.selectedClient.nclientcode,\n      //         item: response[0].data.selectedClient\n      //     }\n      //     selectedRecord[\"nclientsitecode\"]=  {\n      //         label: ActiveClientSite[0].sclientsitename,\n      //         value: ActiveClientSite[0].nclientsitecode,\n      //         item:  ActiveClientSite[0]\n      //     }\n      //     selectedRecord[\"nclientcontactcode\"]=  {\n      //         label: ActiveClientContact[0].scontactname,\n      //         value: ActiveClientContact[0].nclientcontactcode,\n      //         item: ActiveClientContact[0].selectedClientContact\n      //     }\n      // }\n\n      selectedRecord = { ...selectedRecord\n      };\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          Client,\n          selectedRecord,\n          ClientSite,\n          ClientContact,\n          loading: false,\n          data: undefined,\n          dataState: undefined,\n          sclientsiteaddress\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getQuotaionClientComboService(methodParam, selectedRecord) {\n  return function (dispatch) {\n    let URL = [];\n    URL = rsapi.post(\"/quotation/getSelectedClientDetail\", {\n      \"userinfo\": methodParam.inputData.userinfo,\n      \"nclientcode\": methodParam.inputData.primarykey\n    });\n    dispatch(initRequest(true));\n    Axios.all([URL]).then(response => {\n      let ClientSite, ClientContact;\n      let ActiveClientSite = response[0].data.ClientSite.filter(x => x.ndefaultstatus === 3);\n      let ActiveClientContact = response[0].data.ClientContact.filter(x => x.ndefaultstatus === 3);\n      const ClientSiteMap = constructOptionList(ActiveClientSite || [], \"nclientsitecode\", \"sclientsitename\", undefined, undefined, false);\n      const ClientContactMap = constructOptionList(ActiveClientContact || [], \"nclientcontactcode\", \"scontactname\", undefined, undefined, false);\n      ClientSite = ClientSiteMap.get(\"OptionList\");\n      ClientContact = ClientContactMap.get(\"OptionList\");\n      selectedRecord[\"nclientsitecode\"] = {\n        label: ActiveClientSite[0].sclientsitename,\n        value: ActiveClientSite[0].nclientsitecode,\n        item: ActiveClientSite[0]\n      };\n      selectedRecord[\"nclientcontactcode\"] = {\n        label: ActiveClientContact[0].scontactname,\n        value: ActiveClientContact[0].nclientcontactcode,\n        item: ActiveClientContact[0]\n      };\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          selectedRecord,\n          ClientSite,\n          ClientContact,\n          loading: false,\n          data: undefined,\n          dataState: undefined\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getQuotaionClientSiteComboService(methodParam, selectedRecord) {\n  return function (dispatch) {\n    let URL = [];\n    URL = rsapi.post(\"/client/getClientContactInfoBySite\", {\n      \"userinfo\": methodParam.inputData.userinfo,\n      \"nclientcode\": methodParam.inputData.nclientcode,\n      \"nclientsitecode\": methodParam.inputData.primarykey\n    });\n    dispatch(initRequest(true));\n    Axios.all([URL]).then(response => {\n      let ClientContact;\n      const ClientContactMap = constructOptionList(response[0].data || [], \"nclientcontactcode\", \"scontactname\", undefined, undefined, false); // ClientContact = ClientContactMap.get(\"OptionList\");\n\n      let ActiveClientContact = response[0].data.filter(x => x.ndefaultstatus === 3);\n\n      if (ActiveClientContact.length > 0) {\n        ClientContact = ClientContactMap.get(\"OptionList\");\n        selectedRecord[\"nclientcontactcode\"] = {\n          label: ActiveClientContact[0].scontactname,\n          value: ActiveClientContact[0].nclientcontactcode,\n          item: ActiveClientContact[0]\n        };\n      } else {\n        selectedRecord[\"nclientcontactcode\"] = {\n          label: \"\",\n          value: \"\",\n          item: \"\"\n        };\n      }\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          selectedRecord,\n          ClientContact,\n          loading: false,\n          data: undefined,\n          dataState: undefined\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getQuotaionProductCategoryComboService(methodParam, selectedRecord) {\n  return function (dispatch) {\n    let URL = [];\n    URL = rsapi.post(\"/quotation/getProductByCategory\", {\n      \"userinfo\": methodParam.inputData.userinfo,\n      \"nproductcatcode\": methodParam.inputData.primarykey\n    });\n    dispatch(initRequest(true));\n    Axios.all([URL]).then(response => {\n      let Product;\n      const usertMap = constructOptionList(response[0].data.Product || [], \"nproductcode\", \"sproductname\", undefined, undefined, false);\n      Product = usertMap.get(\"OptionList\");\n\n      if (Product.length > 0) {\n        selectedRecord[\"nproductcode\"] = {\n          label: response[0].data.Product[0].sproductname,\n          value: response[0].data.Product[0].nproductcode,\n          item: response[0].data.Product[0]\n        };\n      }\n\n      selectedRecord = { ...selectedRecord\n      };\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          Product,\n          selectedRecord,\n          loading: false,\n          data: undefined,\n          dataState: undefined\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getProjectTypeComboService(methodParam, selectedRecord) {\n  return function (dispatch) {\n    let URL = [];\n    URL = rsapi.post(\"/projectmaster/getApprovedProjectMasterByProjectType\", {\n      \"userinfo\": methodParam.inputData.userinfo,\n      \"nprojecttypecode\": methodParam.inputData.primarykey\n    });\n    dispatch(initRequest(true));\n    Axios.all([URL]).then(response => {\n      let ProjectCode,\n          ProjectMaster = []; // let srfwdate;\n\n      const usertMap = constructOptionList(response[0].data.ProjectCode || [], \"nprojectmastercode\", \"sprojectcode\", undefined, undefined, false);\n      ProjectCode = usertMap.get(\"OptionList\");\n\n      if (ProjectCode.length > 0) {\n        selectedRecord[\"nprojectmastercode\"] = {\n          label: response[0].data.SelectedProjectCode.sprojectcode,\n          value: response[0].data.SelectedProjectCode.nprojectmastercode,\n          item: response[0].data.SelectedProjectCode\n        }; // srfwdate= rearrangeDateFormat( methodParam.inputData.userinfo, response[0].data.Projectmaster[0].srfwdate); --  New\n        //  srfwdate=response[0].data.Projectmaster[0].srfwdate;\n\n        selectedRecord[\"sprojecttitle\"] = response[0].data.Projectmaster[0].sprojecttitle; // selectedRecord[\"srfwdate\"]=srfwdate; -- New\n\n        selectedRecord[\"suserrolename\"] = response[0].data.Projectmaster[0].suserrolename;\n        selectedRecord[\"susername\"] = response[0].data.Projectmaster[0].susername; // selectedRecord[\"nuserrolecode\"]=response[0].data.Projectmaster[0].nuserrolecode;\n\n        selectedRecord[\"nusercode\"] = response[0].data.Projectmaster[0].nusercode; // ProjectMaster={...response[0].data.Projectmaster[0],srfwdate:srfwdate};\n      }\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          selectedRecord,\n          loading: false,\n          data: undefined,\n          dataState: undefined,\n          ProjectCode,\n          ProjectMaster\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getProjectCodeComboService(methodParam, selectedRecord) {\n  return function (dispatch) {\n    let URL = [];\n    URL = rsapi.post(\"/projectmaster/getActiveProjectMasterById\", {\n      \"userinfo\": methodParam.inputData.userinfo,\n      \"nprojectmastercode\": methodParam.inputData.primarykey\n    });\n    dispatch(initRequest(true));\n    Axios.all([URL]).then(response => {\n      // let ProjectMaster=[];  \n      // let srfwdate;  \n      // srfwdate= rearrangeDateFormat( methodParam.inputData.userinfo, response[0].data.Projectmaster[0].srfwdate);\n      // ProjectMaster=response[0].data.SelectedProjectMaster;\n      selectedRecord[\"nprojectmastercode\"] = {\n        label: response[0].data.SelectedProjectMaster.sprojectcode,\n        value: response[0].data.SelectedProjectMaster.nprojectmastercode,\n        item: response[0].data.SelectedProjectMaster\n      }; // srfwdate=response[0].data.SelectedProjectMaster.srfwdate;\n      // ProjectMaster={...response[0].data.SelectedProjectMaster,srfwdate:srfwdate};\n      // srfwdate= rearrangeDateFormat( methodParam.inputData.userinfo, response[0].data.SelectedProjectMaster.srfwdate); -- New\n\n      selectedRecord[\"sprojecttitle\"] = response[0].data.SelectedProjectMaster.sprojecttitle; // selectedRecord[\"srfwdate\"]=srfwdate; -- New\n\n      selectedRecord[\"suserrolename\"] = response[0].data.SelectedProjectMaster.suserrolename;\n      selectedRecord[\"susername\"] = response[0].data.SelectedProjectMaster.susername; // selectedRecord[\"nuserrolecode\"]=response[0].data.SelectedProjectMaster.nuserrolecode;\n\n      selectedRecord[\"nusercode\"] = response[0].data.SelectedProjectMaster.nusercode;\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          selectedRecord,\n          loading: false,\n          data: undefined,\n          dataState: undefined\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n} //Add Quotation\n\nexport const addQuotation = (operation, userInfo, ncontrolCode, selectedQuotation) => {\n  return function (dispatch) {\n    if (operation === \"create\" || operation === \"update\" && selectedQuotation.ntransactionstatus !== transactionStatus.APPROVED) {\n      dispatch(initRequest(true));\n      const urlArray = [];\n      let selectedRecord = {};\n\n      if (operation === \"create\" || operation === \"update\") {\n        // urlArray.push(rsapi.post(\"clientcategory/getClientCategory\", {\n        //     \"userinfo\": userInfo\n        // }));\n        urlArray.push(rsapi.post(\"quotation/getClientCategory\", {\n          \"userinfo\": userInfo\n        })); // urlArray.push(rsapi.post(\"client/getClientByCategory\", {\n        //     \"nclientcatcode\": selectedQuotation.nclientcatcode,\n        //     \"userinfo\": userInfo\n        // })); \n\n        urlArray.push(rsapi.post(\"projecttype/getProjectType\", {\n          \"userinfo\": userInfo\n        }));\n        urlArray.push(rsapi.post(\"quotation/getQuotationType\", {\n          \"userinfo\": userInfo\n        })); // urlArray.push(rsapi.post(\"productcategory/getProductCategory\", {\n        //     \"userinfo\": userInfo \n        // })); \n\n        urlArray.push(rsapi.post(\"quotation/getProductCategory\", {\n          \"userinfo\": userInfo\n        }));\n        urlArray.push(rsapi.post(\"product/getProduct\", {\n          \"nproductcode\": null,\n          \"userinfo\": userInfo\n        }));\n        urlArray.push(rsapi.post(\"oem/getOEM\", {\n          \"nproductcode\": null,\n          \"userinfo\": userInfo\n        }));\n      }\n\n      if (operation === \"update\") {\n        urlArray.push(rsapi.post(\"quotation/getActiveQuotationById\", {\n          \"userinfo\": userInfo,\n          \"nquotationcode\": selectedQuotation.nquotationcode\n        }));\n        urlArray.push(rsapi.post(\"quotation/getSelectedClientDetail\", {\n          \"userinfo\": userInfo,\n          \"nclientcode\": selectedQuotation.nclientcode\n        }));\n        urlArray.push(rsapi.post(\"client/getClientByCategory\", {\n          \"nclientcatcode\": selectedQuotation.nclientcatcode,\n          \"userinfo\": userInfo\n        }));\n      }\n\n      Axios.all(urlArray).then(response => {\n        let testData = {};\n        let ClientCategory, Client, ProjectType, ProjectMaster, sclientsiteaddress, QuotationType, Product, ProductCategory, OEM, ClientSite, ClientContact;\n\n        if (operation === \"create\") {\n          ClientCategory = constructOptionList(response[0].data || [], \"nclientcatcode\", \"sclientcatname\", false, false, true).get(\"OptionList\"); //       Client = constructOptionList(response[1].data || [], \"nclientcode\", \"sclientname\", false, false, true).get(\"OptionList\");\n\n          ProjectType = constructOptionList(response[1].data || [], \"nprojecttypecode\", \"sprojecttypename\", false, false, true).get(\"OptionList\");\n          QuotationType = constructOptionList(response[2].data || [], \"nquotationtypecode\", \"squotationname\", false, false, true).get(\"OptionList\");\n          selectedRecord[\"dquotationdate\"] = new Date();\n          ProductCategory = constructOptionList(response[3].data || [], \"nproductcatcode\", \"sproductcatname\", false, false, true).get(\"OptionList\");\n          OEM = constructOptionList(response[5].data || [], \"noemcode\", \"soemname\", false, false, true).get(\"OptionList\"); // Product = constructOptionList(response[5].data.Product || [], \"nproductcode\", \"sproductname\", false, false, true).get(\"OptionList\");\n          // selectedRecord[\"dquotationdate\"] = formatInputDate(new Date(), true);\n        } else if (operation === \"update\") {\n          const editData = response[6].data.SelectedQuotation; // ProjectMaster=response[5].data.SelectedQuotation;\n          // sclientsiteaddress = editData.sclientsiteaddress;\n\n          selectedRecord[\"sclientsiteaddress\"] = editData.sclientsiteaddress; // selectedRecord[\"sinvoiceaddress\"] = editData.sinvoiceaddress;\n          // selectedRecord[\"sprojecttitle\"] = editData.sprojecttitle;\n\n          selectedRecord[\"sdescription\"] = editData.sdescription;\n          selectedRecord[\"sdeviationremarks\"] = editData.sdeviationremarks; // selectedRecord[\"suserrolename\"] = editData.suserrolename;\n          // selectedRecord[\"susername\"] = editData.susername;\n          // selectedRecord[\"nuserrolecode\"] = editData.nuserrolecode;\n          // selectedRecord[\"nusercode\"] = editData.nusercode;\n\n          selectedRecord[\"soem\"] = editData.soem;\n          selectedRecord[\"squotationleadtime\"] = editData.squotationleadtime;\n          selectedRecord = { ...selectedRecord\n          };\n          const ClientCategoryMap = constructOptionList(response[0].data || [], \"nclientcatcode\", \"sclientcatname\", false, false, true);\n          const ClientMap = constructOptionList(response[8].data.Client || [], \"nclientcode\", \"sclientname\", false, false, true); // ProjectType = constructOptionList(response[2].data || [], \"nprojecttypecode\", \"sprojecttypename\", false, false, true);\n          // QuotationType = constructOptionList(response[3].data || [], \"nquotationtypecode\", \"squotationname\", false, false, true)\n\n          const ProductCategoryMap = constructOptionList(response[3].data || [], \"nproductcatcode\", \"sproductcatname\", false, false, true);\n          const ProductMap = constructOptionList(response[4].data.Product || [], \"nproductcode\", \"sproductname\", false, false, true);\n          const OEMMap = constructOptionList(response[5].data || [], \"noemcode\", \"soemname\", false, false, true);\n          const ClientSiteMap = constructOptionList(response[7].data.ClientSite || [], \"nclientsitecode\", \"sclientsitename\", undefined, undefined, false);\n          const ClientContactMap = constructOptionList(response[7].data.ClientContact || [], \"nclientcontactcode\", \"scontactname\", undefined, undefined, false);\n          ClientCategory = ClientCategoryMap.get(\"OptionList\");\n          Client = ClientMap.get(\"OptionList\");\n          ProductCategory = ProductCategoryMap.get(\"OptionList\");\n          Product = ProductMap.get(\"OptionList\");\n          OEM = OEMMap.get(\"OptionList\");\n          ClientSite = ClientSiteMap.get(\"OptionList\");\n          ClientContact = ClientContactMap.get(\"OptionList\"); // selectedRecord[\"nprojecttypecode\"] = {\n          //     \"value\": editData[\"nprojecttypecode\"],\n          //     \"label\":  editData[\"sprojecttypename\"]\n          // };\n\n          selectedRecord[\"nclientcatcode\"] = {\n            \"value\": editData[\"nclientcatcode\"],\n            \"label\": editData[\"sclientcatname\"]\n          };\n          selectedRecord[\"nclientcode\"] = {\n            \"value\": editData[\"nclientcode\"],\n            \"label\": editData[\"sclientname\"]\n          }; // selectedRecord[\"nquotationtypecode\"] = {\n          //     \"value\": editData[\"nquotationtypecode\"],\n          //     \"label\": editData[\"squotationname\"]\n          // };\n          // selectedRecord[\"nprojectmastercode\"] = {\n          //     \"value\": editData[\"nprojectmastercode\"],\n          //     \"label\": editData[\"sprojectcode\"]\n          // };\n\n          selectedRecord[\"nproductcatcode\"] = {\n            \"value\": editData[\"nproductcatcode\"],\n            \"label\": editData[\"sproductcatname\"]\n          };\n          selectedRecord[\"nproductcode\"] = {\n            \"value\": editData[\"nproductcode\"],\n            \"label\": editData[\"sproductname\"]\n          };\n          selectedRecord[\"noemcode\"] = {\n            \"value\": editData[\"noemcode\"],\n            \"label\": editData[\"soemname\"]\n          };\n          selectedRecord[\"nclientsitecode\"] = {\n            \"value\": editData[\"nclientsitecode\"],\n            \"label\": editData[\"sclientsitename\"]\n          };\n          selectedRecord[\"nclientcontactcode\"] = {\n            \"value\": editData[\"nclientcontactcode\"],\n            \"label\": editData[\"scontactname\"]\n          }; // selectedRecord[\"srfwdate\"] = rearrangeDateFormat(userInfo,editData.srfwdate);\n\n          selectedRecord[\"dquotationdate\"] = rearrangeDateFormat(userInfo, editData.squotationdate);\n        }\n\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            openModal: true,\n            ProjectType,\n            operation: operation,\n            ClientCategory,\n            Client,\n            ProjectMaster,\n            sclientsiteaddress,\n            QuotationType,\n            Product,\n            ProductCategory,\n            OEM,\n            ClientSite,\n            ClientContact,\n            screenName: \"IDS_QUOTATION\",\n            modalScreenSize: false,\n            selectedRecord,\n            ncontrolCode,\n            testData,\n            loading: false\n          }\n        });\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(error.response.data);\n        }\n      });\n    } else {\n      toast.warn(intl.formatMessage({\n        id: \"IDS_SELECTDRAFTVERSION\"\n      }));\n    }\n  };\n};\nexport const GrossQuotation = (operation, userInfo, ncontrolCode, selectedQuotation) => {\n  return function (dispatch) {\n    //  if (operation === \"create\" || (operation === \"update\" && selectedQuotation.ntransactionstatus !== transactionStatus.RETIRED)) {\n    dispatch(initRequest(true));\n    const urlArray = [];\n    let selectedRecord = {};\n    urlArray.push(rsapi.post(\"discountband/getDiscountBand\", {\n      \"userinfo\": userInfo\n    }));\n    urlArray.push(rsapi.post(\"vatband/getVATBand\", {\n      \"userinfo\": userInfo\n    }));\n    urlArray.push(rsapi.post(\"quotation/getQuotationGrossAmount\", {\n      \"nquotationcode\": selectedQuotation.nquotationcode,\n      \"userinfo\": userInfo\n    }));\n    Axios.all(urlArray).then(response => {\n      let {\n        DiscountBand,\n        VATBand\n      } = [];\n      DiscountBand = constructOptionList(response[0].data || [], \"ndiscountbandcode\", \"sdiscountbandname\", false, false, true).get(\"OptionList\");\n      VATBand = constructOptionList(response[1].data || [], \"nvatbandcode\", \"svatbandname\", false, false, true).get(\"OptionList\");\n      const QuotationGrossAmount = response[2].data;\n\n      if (QuotationGrossAmount[0].ndiscountpercentage > 0 || QuotationGrossAmount[0].nvatpercentage > 0) {\n        //  selectedRecord[\"ndiscountamount\"] = QuotationGrossAmount[0].ndiscountamount; \n        //   selectedRecord[\"nvatamount\"] = QuotationGrossAmount[0].nvatamount; \n        selectedRecord[\"ndiscountpercentage\"] = QuotationGrossAmount[0].ndiscountpercentage;\n        selectedRecord[\"DiscountAmount\"] = QuotationGrossAmount[0].ndiscountamount;\n        selectedRecord[\"nvatpercentage\"] = QuotationGrossAmount[0].nvatpercentage;\n        selectedRecord[\"VatAmount\"] = QuotationGrossAmount[0].nvatamount;\n        selectedRecord[\"TotalNetAmount\"] = QuotationGrossAmount[0].ntotalgrossamount + selectedRecord[\"VatAmount\"] - selectedRecord[\"DiscountAmount\"];\n\n        if (QuotationGrossAmount[0].ndiscountpercentage > 0) {\n          selectedRecord[\"ndiscountbandcode\"] = {\n            \"value\": QuotationGrossAmount[0][\"ndiscountbandcode\"],\n            \"label\": QuotationGrossAmount[0][\"sdiscountbandname\"]\n          };\n        }\n\n        if (QuotationGrossAmount[0].nvatpercentage > 0) {\n          selectedRecord[\"nvatbandcode\"] = {\n            \"value\": QuotationGrossAmount[0][\"nvatbandcode\"],\n            \"label\": QuotationGrossAmount[0][\"svatbandname\"]\n          };\n        }\n      } else {\n        /*                 selectedRecord[\"ndiscountpercentage\"]= DiscountBand[0].item.namount;\r\n                         selectedRecord[\"nvatpercentage\"] = VATBand[0].item.namount;\r\n                           selectedRecord[\"nvatbandcode\"] = {\r\n                             \"value\": VATBand[0][\"value\"],\r\n                             \"label\": VATBand[0][\"label\"]\r\n                         };\r\n                           selectedRecord[\"ndiscountbandcode\"] = {\r\n                             \"value\": DiscountBand[0][\"value\"],\r\n                             \"label\": DiscountBand[0][\"label\"]\r\n                         }; \r\n                           selectedRecord[\"DiscountAmount\"]=QuotationGrossAmount[0].ntotalgrossamount * (DiscountBand[0].item.namount/100);\r\n                         selectedRecord[\"VatAmount\"]=QuotationGrossAmount[0].ntotalgrossamount * (VATBand[0].item.namount/100);\r\n          //             selectedRecord[\"TotalNetAmount\"]=QuotationGrossAmount[0].ntotalgrossamount+(selectedRecord[\"DiscountAmount\"]-selectedRecord[\"VatAmount\"]);\r\n                         selectedRecord[\"TotalNetAmount\"]=(QuotationGrossAmount[0].ntotalgrossamount+selectedRecord[\"VatAmount\"])-selectedRecord[\"DiscountAmount\"];\r\n        */\n        selectedRecord[\"ndiscountpercentage\"] = 0;\n        selectedRecord[\"nvatpercentage\"] = 0;\n        selectedRecord[\"nvatbandcode\"] = \"\";\n        selectedRecord[\"ndiscountbandcode\"] = \"\";\n        selectedRecord[\"DiscountAmount\"] = 0;\n        selectedRecord[\"VatAmount\"] = 0;\n        selectedRecord[\"TotalNetAmount\"] = QuotationGrossAmount[0].ntotalgrossamount;\n      }\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          openChildModal: true,\n          DiscountBand,\n          modalScreenSize: false,\n          operation: operation,\n          VATBand,\n          QuotationGrossAmount,\n          screenName: \"IDS_CALCULATEPRICING\",\n          selectedRecord,\n          ncontrolCode,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    }); //  } else {\n    //         toast.warn(intl.formatMessage({id: \"IDS_SELECTDRAFTVERSION\"}));\n    //  }\n  };\n}; //Quotation Record Click \n\nexport const getQuotation = (quotationItem, userInfo, masterData) => {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"/quotation/getActiveQuotationById\", {\n      nquotationcode: quotationItem.nquotationcode,\n      userinfo: userInfo\n    }).then(response => {\n      let masterData1 = { ...masterData,\n        ...response.data\n      }; // ...masterData,\n      // ...response.data\n\n      masterData = masterData1;\n      sortData(masterData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          // masterData,\n          loading: false,\n          dataState: undefined,\n          masterData\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n      toast.error(error.message);\n    });\n  };\n};\nexport function getQuotationAddTestService(screenName, operation, masterData, userInfo, ncontrolCode) {\n  return function (dispatch) {\n    if (masterData.SelectedQuotation.ntransactionstatus === transactionStatus.DRAFT) {\n      dispatch(initRequest(true));\n      rsapi.post(\"quotation/getQuotationUnmappedTest\", {\n        \"nquotationcode\": masterData.SelectedQuotation[\"nquotationcode\"],\n        userinfo: userInfo\n      }).then(response => {\n        let masterData1 = { ...masterData,\n          ...response.data\n        };\n        masterData = masterData1;\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            QuotationTestList: response.data,\n            masterData,\n            modalScreenSize: false,\n            openChildModal: true,\n            operation,\n            screenName,\n            ncontrolCode,\n            //selectedRecord, \n            loading: false\n          }\n        });\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(error.response.data);\n        }\n      });\n    } else {\n      toast.warn(intl.formatMessage({\n        id: \"IDS_SELECTDRAFTVERSION\"\n      }));\n    }\n  };\n}\nexport function getQuotationPricingEditService(editParam) {\n  return function (dispatch) {\n    // screenName, operation, masterData, userInfo, ncontrolCode\n    //console.log(\"editParam:\", editParam);\n    if (editParam.masterData.SelectedQuotation.ntransactionstatus === transactionStatus.DRAFT) {\n      dispatch(initRequest(true));\n      const urlArray = [];\n      urlArray.push(rsapi.post(\"discountband/getDiscountBand\", {\n        \"userinfo\": editParam.userInfo\n      }));\n      urlArray.push(rsapi.post(\"quotation/getQuotationPrice\", {\n        \"nquotationcode\": editParam.masterData.SelectedQuotation[\"nquotationcode\"],\n        \"nquotationtestcode\": editParam.editRow ? editParam.editRow.nquotationtestcode : null,\n        userinfo: editParam.userInfo\n      }));\n      Axios.all(urlArray).then(response => {\n        let {\n          DiscountBand\n        } = [];\n        let selectedRecord = [];\n        DiscountBand = constructOptionList(response[0].data || [], \"ndiscountbandcode\", \"sdiscountbandname\", false, false, true).get(\"OptionList\"); // selectedRecord[\"namount\"]= response[0].data[0].namount;\n        // selectedRecord[\"ndiscountbandcode\"]= response[0].data[0].ndiscountbandcode;\n\n        if (editParam.editRow) {\n          selectedRecord.push(response[1].data[\"SelectedQuotationPrice\"]);\n          selectedRecord[0][\"ndiscountbandcode\"] = { ...selectedRecord[0][\"ndiscountbandcode\"],\n            label: selectedRecord[0].sdiscountbandname,\n            value: selectedRecord[0].ndiscountbandcode\n          };\n        } else {\n          selectedRecord = sortData(response[1].data[\"QuotationPrice\"]);\n          response[1].data[\"QuotationPrice\"].forEach((item, index) => {\n            selectedRecord[index][\"ndiscountbandcode\"] = { ...selectedRecord[index][\"ndiscountbandcode\"],\n              label: item.sdiscountbandname,\n              value: item.ndiscountbandcode\n            };\n          });\n        }\n\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            //pricingTestList:testList, \n            //testPriceList:response.data[\"TestPrice\"],\n            openChildModal: true,\n            modalScreenSize: true,\n            operation: editParam.operation,\n            screenName: editParam.screenName,\n            ncontrolCode: editParam.ncontrolCode,\n            selectedRecord,\n            selectedId: editParam.editRow ? editParam.editRow.nquotationtestcode : null,\n            loading: false,\n            quotationDataState: editParam.quotationDataState,\n            DiscountBand\n          }\n        });\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(error.response.data);\n        }\n      });\n    } else {\n      toast.warn(intl.formatMessage({\n        id: \"IDS_SELECTDRAFTVERSION\"\n      }));\n    }\n  };\n}","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/actions/QuotationAction.js"],"names":["rsapi","Axios","toast","DEFAULT_RETURN","initRequest","sortData","constructOptionList","rearrangeDateFormat","formatInputDate","transactionStatus","intl","getreloadQuotation","inputParam","dispatch","post","methodUrl","inputData","then","response","masterData","data","type","payload","loading","dataState","undefined","catch","error","message","getQuotationClientCategoryComboService","methodParam","selectedRecord","URL","userinfo","primarykey","all","Client","sclientsiteaddress","ClientSite","ClientContact","ClientMap","get","status","warn","getQuotaionClientComboService","ActiveClientSite","filter","x","ndefaultstatus","ActiveClientContact","ClientSiteMap","ClientContactMap","label","sclientsitename","value","nclientsitecode","item","scontactname","nclientcontactcode","getQuotaionClientSiteComboService","nclientcode","length","getQuotaionProductCategoryComboService","Product","usertMap","sproductname","nproductcode","getProjectTypeComboService","ProjectCode","ProjectMaster","SelectedProjectCode","sprojectcode","nprojectmastercode","Projectmaster","sprojecttitle","suserrolename","susername","nusercode","getProjectCodeComboService","SelectedProjectMaster","addQuotation","operation","userInfo","ncontrolCode","selectedQuotation","ntransactionstatus","APPROVED","urlArray","push","nquotationcode","nclientcatcode","testData","ClientCategory","ProjectType","QuotationType","ProductCategory","OEM","Date","editData","SelectedQuotation","sdescription","sdeviationremarks","soem","squotationleadtime","ClientCategoryMap","ProductCategoryMap","ProductMap","OEMMap","squotationdate","openModal","screenName","modalScreenSize","formatMessage","id","GrossQuotation","DiscountBand","VATBand","QuotationGrossAmount","ndiscountpercentage","nvatpercentage","ndiscountamount","nvatamount","ntotalgrossamount","openChildModal","getQuotation","quotationItem","masterData1","getQuotationAddTestService","DRAFT","QuotationTestList","getQuotationPricingEditService","editParam","editRow","nquotationtestcode","sdiscountbandname","ndiscountbandcode","forEach","index","selectedId","quotationDataState"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,UAAlB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAAQC,KAAR,QAAoB,gBAApB;AACA,SAASC,cAAT,QAA8B,cAA9B;AACA,SAASC,WAAT,QAA4B,eAA5B;AACA,SAASC,QAAT,EAAmBC,mBAAnB,EAAuCC,mBAAvC,EAA2DC,eAA3D,QAAkF,4BAAlF;AACA,SAASC,iBAAT,QAAkC,2BAAlC;AACA,SAASC,IAAT,QAAqB,mBAArB;AAEA,OAAO,MAAMC,kBAAkB,GAAIC,UAAD,IAAgB;AAC9C,SAAQC,QAAD,IAAc;AACjBA,IAAAA,QAAQ,CAACT,WAAW,CAAC,IAAD,CAAZ,CAAR;AACAJ,IAAAA,KAAK,CAACc,IAAN,CAAW,mBAAmBF,UAAU,CAACG,SAAzC,EAAoDH,UAAU,CAACI,SAA/D,EACKC,IADL,CACUC,QAAQ,IAAI;AACd,YAAMC,UAAU,GAAGD,QAAQ,CAACE,IAA5B;AACAf,MAAAA,QAAQ,CAACc,UAAD,CAAR;AAEAN,MAAAA,QAAQ,CAAC;AACLQ,QAAAA,IAAI,EAAElB,cADD;AAELmB,QAAAA,OAAO,EAAE;AACLC,UAAAA,OAAO,EAAE,KADJ;AAELC,UAAAA,SAAS,EAAEC,SAFN;AAGLN,UAAAA,UAAU,EAAE,EACR,GAAGA,UADK,CAER;;AAFQ;AAHP;AAFJ,OAAD,CAAR;AAYH,KAjBL,EAkBKO,KAlBL,CAkBWC,KAAK,IAAI;AACZd,MAAAA,QAAQ,CAAC;AACLQ,QAAAA,IAAI,EAAElB,cADD;AAELmB,QAAAA,OAAO,EAAE;AACLC,UAAAA,OAAO,EAAE;AADJ;AAFJ,OAAD,CAAR;AAMArB,MAAAA,KAAK,CAACyB,KAAN,CAAYA,KAAK,CAACC,OAAlB;AACH,KA1BL;AA2BH,GA7BD;AA8BH,CA/BM;AAiCP,OAAO,SAASC,sCAAT,CAAgDC,WAAhD,EAA4DC,cAA5D,EAA4E;AAE/E,SAAO,UAAUlB,QAAV,EAAoB;AAEvB,QAAImB,GAAG,GAAG,EAAV;AAEIA,IAAAA,GAAG,GAAChC,KAAK,CAACc,IAAN,CAAW,6BAAX,EAA0C;AAAE,kBAAYgB,WAAW,CAACd,SAAZ,CAAsBiB,QAApC;AAA8C,wBAAmBH,WAAW,CAACd,SAAZ,CAAsBkB;AAAvF,KAA1C,CAAJ;AAEHrB,IAAAA,QAAQ,CAACT,WAAW,CAAC,IAAD,CAAZ,CAAR;AAEDH,IAAAA,KAAK,CAACkC,GAAN,CAAU,CAACH,GAAD,CAAV,EAEKf,IAFL,CAEUC,QAAQ,IAAI;AAEd,UAAIkB,MAAJ,EAAWC,kBAAX,EAA8BC,UAA9B,EAAyCC,aAAzC;AAEA,YAAMC,SAAS,GAAGlC,mBAAmB,CAACY,QAAQ,CAAC,CAAD,CAAR,CAAYE,IAAZ,CAAiBgB,MAAjB,IAA2B,EAA5B,EAAgC,aAAhC,EAA8C,aAA9C,EAA6DX,SAA7D,EAAwEA,SAAxE,EAAmF,KAAnF,CAArC,CAJc,CAKd;AACA;;AAEAW,MAAAA,MAAM,GAAGI,SAAS,CAACC,GAAV,CAAc,YAAd,CAAT,CARc,CASd;AACA;AAEA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;;AAEDV,MAAAA,cAAc,GAAG,EAAC,GAAGA;AAAJ,OAAjB;AAEClB,MAAAA,QAAQ,CAAC;AAAEQ,QAAAA,IAAI,EAAElB,cAAR;AAAwBmB,QAAAA,OAAO,EAEnC;AAAEc,UAAAA,MAAF;AAASL,UAAAA,cAAT;AAAwBO,UAAAA,UAAxB;AAAmCC,UAAAA,aAAnC;AAAkDhB,UAAAA,OAAO,EAAE,KAA3D;AAAkEH,UAAAA,IAAI,EAAEK,SAAxE;AAAmFD,UAAAA,SAAS,EAAEC,SAA9F;AAAwGY,UAAAA;AAAxG;AAFI,OAAD,CAAR;AAIH,KA9CL,EAgDKX,KAhDL,CAgDWC,KAAK,IAAI;AAEZd,MAAAA,QAAQ,CAAC;AAAEQ,QAAAA,IAAI,EAAElB,cAAR;AAAwBmB,QAAAA,OAAO,EAAE;AAAEC,UAAAA,OAAO,EAAE;AAAX;AAAjC,OAAD,CAAR;;AAEA,UAAII,KAAK,CAACT,QAAN,CAAewB,MAAf,KAA0B,GAA9B,EAAmC;AAE/BxC,QAAAA,KAAK,CAACyB,KAAN,CAAYA,KAAK,CAACC,OAAlB;AAEH,OAJD,MAMK;AAED1B,QAAAA,KAAK,CAACyC,IAAN,CAAWhB,KAAK,CAACT,QAAN,CAAeE,IAA1B;AAEH;AAEJ,KAhEL;AAkEH,GA1ED;AA4EH;AAED,OAAO,SAASwB,6BAAT,CAAuCd,WAAvC,EAAmDC,cAAnD,EAAmE;AAEtE,SAAO,UAAUlB,QAAV,EAAoB;AAEvB,QAAImB,GAAG,GAAG,EAAV;AAEIA,IAAAA,GAAG,GAAChC,KAAK,CAACc,IAAN,CAAW,oCAAX,EAAiD;AAAE,kBAAYgB,WAAW,CAACd,SAAZ,CAAsBiB,QAApC;AAA8C,qBAAgBH,WAAW,CAACd,SAAZ,CAAsBkB;AAApF,KAAjD,CAAJ;AAEHrB,IAAAA,QAAQ,CAACT,WAAW,CAAC,IAAD,CAAZ,CAAR;AAEDH,IAAAA,KAAK,CAACkC,GAAN,CAAU,CAACH,GAAD,CAAV,EAEKf,IAFL,CAEUC,QAAQ,IAAI;AAEd,UAAIoB,UAAJ,EAAeC,aAAf;AAEA,UAAIM,gBAAgB,GAAE3B,QAAQ,CAAC,CAAD,CAAR,CAAYE,IAAZ,CAAiBkB,UAAjB,CAA4BQ,MAA5B,CAAmCC,CAAC,IAAIA,CAAC,CAACC,cAAF,KAAqB,CAA7D,CAAtB;AACA,UAAIC,mBAAmB,GAAG/B,QAAQ,CAAC,CAAD,CAAR,CAAYE,IAAZ,CAAiBmB,aAAjB,CAA+BO,MAA/B,CAAsCC,CAAC,IAAIA,CAAC,CAACC,cAAF,KAAqB,CAAhE,CAA1B;AAEA,YAAME,aAAa,GAAG5C,mBAAmB,CAACuC,gBAAgB,IAAI,EAArB,EAAyB,iBAAzB,EAA2C,iBAA3C,EAA8DpB,SAA9D,EAAyEA,SAAzE,EAAoF,KAApF,CAAzC;AACA,YAAM0B,gBAAgB,GAAG7C,mBAAmB,CAAC2C,mBAAmB,IAAI,EAAxB,EAA4B,oBAA5B,EAAiD,cAAjD,EAAiExB,SAAjE,EAA4EA,SAA5E,EAAuF,KAAvF,CAA5C;AAEAa,MAAAA,UAAU,GAAGY,aAAa,CAACT,GAAd,CAAkB,YAAlB,CAAb;AACAF,MAAAA,aAAa,GAAGY,gBAAgB,CAACV,GAAjB,CAAqB,YAArB,CAAhB;AAGAV,MAAAA,cAAc,CAAC,iBAAD,CAAd,GAAoC;AAChCqB,QAAAA,KAAK,EAAEP,gBAAgB,CAAC,CAAD,CAAhB,CAAoBQ,eADK;AAEhCC,QAAAA,KAAK,EAAET,gBAAgB,CAAC,CAAD,CAAhB,CAAoBU,eAFK;AAGhCC,QAAAA,IAAI,EAAGX,gBAAgB,CAAC,CAAD;AAHS,OAApC;AAMAd,MAAAA,cAAc,CAAC,oBAAD,CAAd,GAAuC;AACnCqB,QAAAA,KAAK,EAAEH,mBAAmB,CAAC,CAAD,CAAnB,CAAuBQ,YADK;AAEnCH,QAAAA,KAAK,EAAEL,mBAAmB,CAAC,CAAD,CAAnB,CAAuBS,kBAFK;AAGnCF,QAAAA,IAAI,EAAGP,mBAAmB,CAAC,CAAD;AAHS,OAAvC;AAMApC,MAAAA,QAAQ,CAAC;AAAEQ,QAAAA,IAAI,EAAElB,cAAR;AAAwBmB,QAAAA,OAAO,EAEnC;AAAES,UAAAA,cAAF;AAAiBO,UAAAA,UAAjB;AAA4BC,UAAAA,aAA5B;AAA2ChB,UAAAA,OAAO,EAAE,KAApD;AAA2DH,UAAAA,IAAI,EAAEK,SAAjE;AAA4ED,UAAAA,SAAS,EAAEC;AAAvF;AAFI,OAAD,CAAR;AAIH,KAhCL,EAkCKC,KAlCL,CAkCWC,KAAK,IAAI;AAEZd,MAAAA,QAAQ,CAAC;AAAEQ,QAAAA,IAAI,EAAElB,cAAR;AAAwBmB,QAAAA,OAAO,EAAE;AAAEC,UAAAA,OAAO,EAAE;AAAX;AAAjC,OAAD,CAAR;;AAEA,UAAII,KAAK,CAACT,QAAN,CAAewB,MAAf,KAA0B,GAA9B,EAAmC;AAE/BxC,QAAAA,KAAK,CAACyB,KAAN,CAAYA,KAAK,CAACC,OAAlB;AAEH,OAJD,MAMK;AAED1B,QAAAA,KAAK,CAACyC,IAAN,CAAWhB,KAAK,CAACT,QAAN,CAAeE,IAA1B;AAEH;AAEJ,KAlDL;AAoDH,GA5DD;AA8DH;AAED,OAAO,SAASuC,iCAAT,CAA2C7B,WAA3C,EAAuDC,cAAvD,EAAuE;AAE1E,SAAO,UAAUlB,QAAV,EAAoB;AAEvB,QAAImB,GAAG,GAAG,EAAV;AAEIA,IAAAA,GAAG,GAAChC,KAAK,CAACc,IAAN,CAAW,oCAAX,EAAiD;AAAE,kBAAYgB,WAAW,CAACd,SAAZ,CAAsBiB,QAApC;AAA8C,qBAAgBH,WAAW,CAACd,SAAZ,CAAsB4C,WAApF;AAAgG,yBAAoB9B,WAAW,CAACd,SAAZ,CAAsBkB;AAA1I,KAAjD,CAAJ;AAEHrB,IAAAA,QAAQ,CAACT,WAAW,CAAC,IAAD,CAAZ,CAAR;AAEDH,IAAAA,KAAK,CAACkC,GAAN,CAAU,CAACH,GAAD,CAAV,EAEKf,IAFL,CAEUC,QAAQ,IAAI;AAEd,UAAIqB,aAAJ;AACA,YAAMY,gBAAgB,GAAG7C,mBAAmB,CAACY,QAAQ,CAAC,CAAD,CAAR,CAAYE,IAAZ,IAAoB,EAArB,EAAyB,oBAAzB,EAA8C,cAA9C,EAA8DK,SAA9D,EAAyEA,SAAzE,EAAoF,KAApF,CAA5C,CAHc,CAKd;;AAEC,UAAIwB,mBAAmB,GAAG/B,QAAQ,CAAC,CAAD,CAAR,CAAYE,IAAZ,CAAiB0B,MAAjB,CAAwBC,CAAC,IAAIA,CAAC,CAACC,cAAF,KAAqB,CAAlD,CAA1B;;AAEH,UAAGC,mBAAmB,CAACY,MAApB,GAA2B,CAA9B,EAAgC;AAE9BtB,QAAAA,aAAa,GAAGY,gBAAgB,CAACV,GAAjB,CAAqB,YAArB,CAAhB;AAEAV,QAAAA,cAAc,CAAC,oBAAD,CAAd,GAAuC;AACnCqB,UAAAA,KAAK,EAAEH,mBAAmB,CAAC,CAAD,CAAnB,CAAuBQ,YADK;AAEnCH,UAAAA,KAAK,EAAEL,mBAAmB,CAAC,CAAD,CAAnB,CAAuBS,kBAFK;AAGnCF,UAAAA,IAAI,EAAGP,mBAAmB,CAAC,CAAD;AAHS,SAAvC;AAMD,OAVD,MAUK;AACHlB,QAAAA,cAAc,CAAC,oBAAD,CAAd,GAAuC;AACnCqB,UAAAA,KAAK,EAAE,EAD4B;AAEnCE,UAAAA,KAAK,EAAE,EAF4B;AAGnCE,UAAAA,IAAI,EAAG;AAH4B,SAAvC;AAMD;;AAGC3C,MAAAA,QAAQ,CAAC;AAAEQ,QAAAA,IAAI,EAAElB,cAAR;AAAwBmB,QAAAA,OAAO,EAEnC;AAAES,UAAAA,cAAF;AAAiBQ,UAAAA,aAAjB;AAAgChB,UAAAA,OAAO,EAAE,KAAzC;AAAgDH,UAAAA,IAAI,EAAEK,SAAtD;AAAiED,UAAAA,SAAS,EAAEC;AAA5E;AAFI,OAAD,CAAR;AAIH,KAnCL,EAqCKC,KArCL,CAqCWC,KAAK,IAAI;AAEZd,MAAAA,QAAQ,CAAC;AAAEQ,QAAAA,IAAI,EAAElB,cAAR;AAAwBmB,QAAAA,OAAO,EAAE;AAAEC,UAAAA,OAAO,EAAE;AAAX;AAAjC,OAAD,CAAR;;AAEA,UAAII,KAAK,CAACT,QAAN,CAAewB,MAAf,KAA0B,GAA9B,EAAmC;AAE/BxC,QAAAA,KAAK,CAACyB,KAAN,CAAYA,KAAK,CAACC,OAAlB;AAEH,OAJD,MAMK;AAED1B,QAAAA,KAAK,CAACyC,IAAN,CAAWhB,KAAK,CAACT,QAAN,CAAeE,IAA1B;AAEH;AAEJ,KArDL;AAuDH,GA/DD;AAiEH;AAED,OAAO,SAAS0C,sCAAT,CAAgDhC,WAAhD,EAA4DC,cAA5D,EAA4E;AAE/E,SAAO,UAAUlB,QAAV,EAAoB;AAEvB,QAAImB,GAAG,GAAG,EAAV;AAEIA,IAAAA,GAAG,GAAChC,KAAK,CAACc,IAAN,CAAW,iCAAX,EAA8C;AAAE,kBAAYgB,WAAW,CAACd,SAAZ,CAAsBiB,QAApC;AAA8C,yBAAoBH,WAAW,CAACd,SAAZ,CAAsBkB;AAAxF,KAA9C,CAAJ;AAEHrB,IAAAA,QAAQ,CAACT,WAAW,CAAC,IAAD,CAAZ,CAAR;AAEDH,IAAAA,KAAK,CAACkC,GAAN,CAAU,CAACH,GAAD,CAAV,EAEKf,IAFL,CAEUC,QAAQ,IAAI;AAEd,UAAI6C,OAAJ;AAEA,YAAMC,QAAQ,GAAG1D,mBAAmB,CAACY,QAAQ,CAAC,CAAD,CAAR,CAAYE,IAAZ,CAAiB2C,OAAjB,IAA4B,EAA7B,EAAiC,cAAjC,EAAgD,cAAhD,EAAgEtC,SAAhE,EAA2EA,SAA3E,EAAsF,KAAtF,CAApC;AAEAsC,MAAAA,OAAO,GAAGC,QAAQ,CAACvB,GAAT,CAAa,YAAb,CAAV;;AAEA,UAAGsB,OAAO,CAACF,MAAR,GAAe,CAAlB,EAAoB;AAEhB9B,QAAAA,cAAc,CAAC,cAAD,CAAd,GAAiC;AAC7BqB,UAAAA,KAAK,EAAElC,QAAQ,CAAC,CAAD,CAAR,CAAYE,IAAZ,CAAiB2C,OAAjB,CAAyB,CAAzB,EAA4BE,YADN;AAE7BX,UAAAA,KAAK,EAAEpC,QAAQ,CAAC,CAAD,CAAR,CAAYE,IAAZ,CAAiB2C,OAAjB,CAAyB,CAAzB,EAA4BG,YAFN;AAG7BV,UAAAA,IAAI,EAAEtC,QAAQ,CAAC,CAAD,CAAR,CAAYE,IAAZ,CAAiB2C,OAAjB,CAAyB,CAAzB;AAHuB,SAAjC;AAMH;;AAEFhC,MAAAA,cAAc,GAAG,EAAC,GAAGA;AAAJ,OAAjB;AAEClB,MAAAA,QAAQ,CAAC;AAAEQ,QAAAA,IAAI,EAAElB,cAAR;AAAwBmB,QAAAA,OAAO,EAEpC;AAAEyC,UAAAA,OAAF;AAAUhC,UAAAA,cAAV;AAA0BR,UAAAA,OAAO,EAAE,KAAnC;AAA0CH,UAAAA,IAAI,EAAEK,SAAhD;AAA2DD,UAAAA,SAAS,EAAEC;AAAtE;AAFK,OAAD,CAAR;AAGH,KAzBL,EA2BKC,KA3BL,CA2BWC,KAAK,IAAI;AAEZd,MAAAA,QAAQ,CAAC;AAAEQ,QAAAA,IAAI,EAAElB,cAAR;AAAwBmB,QAAAA,OAAO,EAAE;AAAEC,UAAAA,OAAO,EAAE;AAAX;AAAjC,OAAD,CAAR;;AAEA,UAAII,KAAK,CAACT,QAAN,CAAewB,MAAf,KAA0B,GAA9B,EAAmC;AAE/BxC,QAAAA,KAAK,CAACyB,KAAN,CAAYA,KAAK,CAACC,OAAlB;AAEH,OAJD,MAMK;AAED1B,QAAAA,KAAK,CAACyC,IAAN,CAAWhB,KAAK,CAACT,QAAN,CAAeE,IAA1B;AAEH;AAEJ,KA3CL;AA6CH,GArDD;AAuDH;AAED,OAAO,SAAS+C,0BAAT,CAAoCrC,WAApC,EAAgDC,cAAhD,EAAgE;AAEnE,SAAO,UAAUlB,QAAV,EAAoB;AAEvB,QAAImB,GAAG,GAAG,EAAV;AAEIA,IAAAA,GAAG,GAAChC,KAAK,CAACc,IAAN,CAAW,sDAAX,EAAmE;AAAE,kBAAYgB,WAAW,CAACd,SAAZ,CAAsBiB,QAApC;AAA8C,0BAAqBH,WAAW,CAACd,SAAZ,CAAsBkB;AAAzF,KAAnE,CAAJ;AAEHrB,IAAAA,QAAQ,CAACT,WAAW,CAAC,IAAD,CAAZ,CAAR;AAEDH,IAAAA,KAAK,CAACkC,GAAN,CAAU,CAACH,GAAD,CAAV,EAEKf,IAFL,CAEUC,QAAQ,IAAI;AAEd,UAAIkD,WAAJ;AAAA,UAAgBC,aAAa,GAAC,EAA9B,CAFc,CAGd;;AAEA,YAAML,QAAQ,GAAG1D,mBAAmB,CAACY,QAAQ,CAAC,CAAD,CAAR,CAAYE,IAAZ,CAAiBgD,WAAjB,IAAgC,EAAjC,EAAqC,oBAArC,EAA0D,cAA1D,EAA0E3C,SAA1E,EAAqFA,SAArF,EAAgG,KAAhG,CAApC;AAEA2C,MAAAA,WAAW,GAAGJ,QAAQ,CAACvB,GAAT,CAAa,YAAb,CAAd;;AAEA,UAAG2B,WAAW,CAACP,MAAZ,GAAmB,CAAtB,EAAwB;AAEpB9B,QAAAA,cAAc,CAAC,oBAAD,CAAd,GAAuC;AAC3BqB,UAAAA,KAAK,EAAElC,QAAQ,CAAC,CAAD,CAAR,CAAYE,IAAZ,CAAiBkD,mBAAjB,CAAqCC,YADjB;AAE3BjB,UAAAA,KAAK,EAAEpC,QAAQ,CAAC,CAAD,CAAR,CAAYE,IAAZ,CAAiBkD,mBAAjB,CAAqCE,kBAFjB;AAG3BhB,UAAAA,IAAI,EAAEtC,QAAQ,CAAC,CAAD,CAAR,CAAYE,IAAZ,CAAiBkD;AAHI,SAAvC,CAFoB,CAOxB;AACA;;AACIvC,QAAAA,cAAc,CAAC,eAAD,CAAd,GAAgCb,QAAQ,CAAC,CAAD,CAAR,CAAYE,IAAZ,CAAiBqD,aAAjB,CAA+B,CAA/B,EAAkCC,aAAlE,CAToB,CAUxB;;AACI3C,QAAAA,cAAc,CAAC,eAAD,CAAd,GAAgCb,QAAQ,CAAC,CAAD,CAAR,CAAYE,IAAZ,CAAiBqD,aAAjB,CAA+B,CAA/B,EAAkCE,aAAlE;AACA5C,QAAAA,cAAc,CAAC,WAAD,CAAd,GAA4Bb,QAAQ,CAAC,CAAD,CAAR,CAAYE,IAAZ,CAAiBqD,aAAjB,CAA+B,CAA/B,EAAkCG,SAA9D,CAZoB,CAapB;;AACA7C,QAAAA,cAAc,CAAC,WAAD,CAAd,GAA4Bb,QAAQ,CAAC,CAAD,CAAR,CAAYE,IAAZ,CAAiBqD,aAAjB,CAA+B,CAA/B,EAAkCI,SAA9D,CAdoB,CAepB;AACH;;AAIDhE,MAAAA,QAAQ,CAAC;AAAEQ,QAAAA,IAAI,EAAElB,cAAR;AAAwBmB,QAAAA,OAAO,EAEnC;AAAES,UAAAA,cAAF;AAAkBR,UAAAA,OAAO,EAAE,KAA3B;AAAkCH,UAAAA,IAAI,EAAEK,SAAxC;AAAmDD,UAAAA,SAAS,EAAEC,SAA9D;AAAwE2C,UAAAA,WAAxE;AAAoFC,UAAAA;AAApF;AAFI,OAAD,CAAR;AAIH,KAnCL,EAqCK3C,KArCL,CAqCWC,KAAK,IAAI;AAEZd,MAAAA,QAAQ,CAAC;AAAEQ,QAAAA,IAAI,EAAElB,cAAR;AAAwBmB,QAAAA,OAAO,EAAE;AAAEC,UAAAA,OAAO,EAAE;AAAX;AAAjC,OAAD,CAAR;;AAEA,UAAII,KAAK,CAACT,QAAN,CAAewB,MAAf,KAA0B,GAA9B,EAAmC;AAE/BxC,QAAAA,KAAK,CAACyB,KAAN,CAAYA,KAAK,CAACC,OAAlB;AAEH,OAJD,MAMK;AAED1B,QAAAA,KAAK,CAACyC,IAAN,CAAWhB,KAAK,CAACT,QAAN,CAAeE,IAA1B;AAEH;AAEJ,KArDL;AAuDH,GA/DD;AAiEH;AAED,OAAO,SAAS0D,0BAAT,CAAoChD,WAApC,EAAgDC,cAAhD,EAAgE;AAEnE,SAAO,UAAUlB,QAAV,EAAoB;AAEvB,QAAImB,GAAG,GAAG,EAAV;AAEIA,IAAAA,GAAG,GAAChC,KAAK,CAACc,IAAN,CAAW,2CAAX,EAAwD;AAAE,kBAAYgB,WAAW,CAACd,SAAZ,CAAsBiB,QAApC;AAA8C,4BAAuBH,WAAW,CAACd,SAAZ,CAAsBkB;AAA3F,KAAxD,CAAJ;AAEHrB,IAAAA,QAAQ,CAACT,WAAW,CAAC,IAAD,CAAZ,CAAR;AAEDH,IAAAA,KAAK,CAACkC,GAAN,CAAU,CAACH,GAAD,CAAV,EAEKf,IAFL,CAEUC,QAAQ,IAAI;AAEd;AACA;AAEA;AAEA;AAEAa,MAAAA,cAAc,CAAC,oBAAD,CAAd,GAAuC;AACnCqB,QAAAA,KAAK,EAAElC,QAAQ,CAAC,CAAD,CAAR,CAAYE,IAAZ,CAAiB2D,qBAAjB,CAAuCR,YADX;AAEnCjB,QAAAA,KAAK,EAAEpC,QAAQ,CAAC,CAAD,CAAR,CAAYE,IAAZ,CAAiB2D,qBAAjB,CAAuCP,kBAFX;AAGnChB,QAAAA,IAAI,EAAEtC,QAAQ,CAAC,CAAD,CAAR,CAAYE,IAAZ,CAAiB2D;AAHY,OAAvC,CATc,CAcd;AACA;AAEA;;AACAhD,MAAAA,cAAc,CAAC,eAAD,CAAd,GAAgCb,QAAQ,CAAC,CAAD,CAAR,CAAYE,IAAZ,CAAiB2D,qBAAjB,CAAuCL,aAAvE,CAlBc,CAmBd;;AACA3C,MAAAA,cAAc,CAAC,eAAD,CAAd,GAAgCb,QAAQ,CAAC,CAAD,CAAR,CAAYE,IAAZ,CAAiB2D,qBAAjB,CAAuCJ,aAAvE;AACA5C,MAAAA,cAAc,CAAC,WAAD,CAAd,GAA4Bb,QAAQ,CAAC,CAAD,CAAR,CAAYE,IAAZ,CAAiB2D,qBAAjB,CAAuCH,SAAnE,CArBc,CAsBd;;AACA7C,MAAAA,cAAc,CAAC,WAAD,CAAd,GAA4Bb,QAAQ,CAAC,CAAD,CAAR,CAAYE,IAAZ,CAAiB2D,qBAAjB,CAAuCF,SAAnE;AAEAhE,MAAAA,QAAQ,CAAC;AAAEQ,QAAAA,IAAI,EAAElB,cAAR;AAAwBmB,QAAAA,OAAO,EAEnC;AAAES,UAAAA,cAAF;AAAkBR,UAAAA,OAAO,EAAE,KAA3B;AAAkCH,UAAAA,IAAI,EAAEK,SAAxC;AAAmDD,UAAAA,SAAS,EAAEC;AAA9D;AAFI,OAAD,CAAR;AAIH,KA/BL,EAiCKC,KAjCL,CAiCWC,KAAK,IAAI;AAEZd,MAAAA,QAAQ,CAAC;AAAEQ,QAAAA,IAAI,EAAElB,cAAR;AAAwBmB,QAAAA,OAAO,EAAE;AAAEC,UAAAA,OAAO,EAAE;AAAX;AAAjC,OAAD,CAAR;;AAEA,UAAII,KAAK,CAACT,QAAN,CAAewB,MAAf,KAA0B,GAA9B,EAAmC;AAE/BxC,QAAAA,KAAK,CAACyB,KAAN,CAAYA,KAAK,CAACC,OAAlB;AAEH,OAJD,MAMK;AAED1B,QAAAA,KAAK,CAACyC,IAAN,CAAWhB,KAAK,CAACT,QAAN,CAAeE,IAA1B;AAEH;AAEJ,KAjDL;AAmDH,GA3DD;AA6DH,C,CAED;;AACA,OAAO,MAAM4D,YAAY,GAAG,CAACC,SAAD,EAAYC,QAAZ,EAAsBC,YAAtB,EAAmCC,iBAAnC,KAA0D;AAClF,SAAO,UAAUvE,QAAV,EAAoB;AAC1B,QAAIoE,SAAS,KAAK,QAAd,IAA2BA,SAAS,KAAK,QAAd,IAA0BG,iBAAiB,CAACC,kBAAlB,KAAyC5E,iBAAiB,CAAC6E,QAApH,EAA+H;AACpHzE,MAAAA,QAAQ,CAACT,WAAW,CAAC,IAAD,CAAZ,CAAR;AACJ,YAAMmF,QAAQ,GAAG,EAAjB;AAEA,UAAIxD,cAAc,GAAG,EAArB;;AAEC,UAAIkD,SAAS,KAAK,QAAd,IAA0BA,SAAS,KAAK,QAA5C,EAAsD;AAEnD;AACA;AACA;AAEAM,QAAAA,QAAQ,CAACC,IAAT,CAAcxF,KAAK,CAACc,IAAN,CAAW,6BAAX,EAA0C;AACpD,sBAAYoE;AADwC,SAA1C,CAAd,EANmD,CAUnD;AACA;AACA;AACA;;AAGAK,QAAAA,QAAQ,CAACC,IAAT,CAAcxF,KAAK,CAACc,IAAN,CAAW,4BAAX,EAAyC;AACnD,sBAAYoE;AADuC,SAAzC,CAAd;AAKAK,QAAAA,QAAQ,CAACC,IAAT,CAAcxF,KAAK,CAACc,IAAN,CAAW,4BAAX,EAAyC;AACnD,sBAAYoE;AADuC,SAAzC,CAAd,EArBmD,CA0BnD;AACA;AAEA;;AAEAK,QAAAA,QAAQ,CAACC,IAAT,CAAcxF,KAAK,CAACc,IAAN,CAAW,8BAAX,EAA2C;AACrD,sBAAYoE;AADyC,SAA3C,CAAd;AAKAK,QAAAA,QAAQ,CAACC,IAAT,CAAcxF,KAAK,CAACc,IAAN,CAAW,oBAAX,EAAiC;AAC3C,0BAAgB,IAD2B;AAE3C,sBAAYoE;AAF+B,SAAjC,CAAd;AAMAK,QAAAA,QAAQ,CAACC,IAAT,CAAcxF,KAAK,CAACc,IAAN,CAAW,YAAX,EAAyB;AACnC,0BAAgB,IADmB;AAEnC,sBAAYoE;AAFuB,SAAzB,CAAd;AAKH;;AACA,UAAID,SAAS,KAAK,QAAlB,EAA2B;AAExBM,QAAAA,QAAQ,CAACC,IAAT,CAAcxF,KAAK,CAACc,IAAN,CAAW,kCAAX,EAA+C;AACzD,sBAAYoE,QAD6C;AAEzD,4BAAkBE,iBAAiB,CAACK;AAFqB,SAA/C,CAAd;AAKAF,QAAAA,QAAQ,CAACC,IAAT,CAAcxF,KAAK,CAACc,IAAN,CAAW,mCAAX,EAAgD;AAC1D,sBAAYoE,QAD8C;AAE1D,yBAAeE,iBAAiB,CAACxB;AAFyB,SAAhD,CAAd;AAKA2B,QAAAA,QAAQ,CAACC,IAAT,CAAcxF,KAAK,CAACc,IAAN,CAAW,4BAAX,EAAyC;AACnD,4BAAkBsE,iBAAiB,CAACM,cADe;AAEnD,sBAAYR;AAFuC,SAAzC,CAAd;AAKH;;AAEDjF,MAAAA,KAAK,CAACkC,GAAN,CAAUoD,QAAV,EACKtE,IADL,CACUC,QAAQ,IAAI;AAGlB,YAAIyE,QAAQ,GAAG,EAAf;AAEA,YAAIC,cAAJ,EAAmBxD,MAAnB,EAA0ByD,WAA1B,EAAsCxB,aAAtC,EAAoDhC,kBAApD,EACIyD,aADJ,EACkB/B,OADlB,EAC0BgC,eAD1B,EAC0CC,GAD1C,EAC8C1D,UAD9C,EACyDC,aADzD;;AAIF,YAAI0C,SAAS,KAAK,QAAlB,EAA4B;AAGrBW,UAAAA,cAAc,GAAGtF,mBAAmB,CAACY,QAAQ,CAAC,CAAD,CAAR,CAAYE,IAAZ,IAAoB,EAArB,EAAyB,gBAAzB,EAA2C,gBAA3C,EAA6D,KAA7D,EAAoE,KAApE,EAA2E,IAA3E,CAAnB,CAAoGqB,GAApG,CAAwG,YAAxG,CAAjB,CAHqB,CAK5B;;AAEOoD,UAAAA,WAAW,GAAGvF,mBAAmB,CAACY,QAAQ,CAAC,CAAD,CAAR,CAAYE,IAAZ,IAAoB,EAArB,EAAyB,kBAAzB,EAA6C,kBAA7C,EAAiE,KAAjE,EAAwE,KAAxE,EAA+E,IAA/E,CAAnB,CAAwGqB,GAAxG,CAA4G,YAA5G,CAAd;AACAqD,UAAAA,aAAa,GAAGxF,mBAAmB,CAACY,QAAQ,CAAC,CAAD,CAAR,CAAYE,IAAZ,IAAoB,EAArB,EAAyB,oBAAzB,EAA+C,gBAA/C,EAAiE,KAAjE,EAAwE,KAAxE,EAA+E,IAA/E,CAAnB,CAAwGqB,GAAxG,CAA4G,YAA5G,CAAhB;AAEDV,UAAAA,cAAc,CAAC,gBAAD,CAAd,GAAmC,IAAIkE,IAAJ,EAAnC;AACAF,UAAAA,eAAe,GAAGzF,mBAAmB,CAACY,QAAQ,CAAC,CAAD,CAAR,CAAYE,IAAZ,IAAoB,EAArB,EAAyB,iBAAzB,EAA4C,iBAA5C,EAA+D,KAA/D,EAAsE,KAAtE,EAA6E,IAA7E,CAAnB,CAAsGqB,GAAtG,CAA0G,YAA1G,CAAlB;AACAuD,UAAAA,GAAG,GAAG1F,mBAAmB,CAACY,QAAQ,CAAC,CAAD,CAAR,CAAYE,IAAZ,IAAoB,EAArB,EAAyB,UAAzB,EAAqC,UAArC,EAAiD,KAAjD,EAAwD,KAAxD,EAA+D,IAA/D,CAAnB,CAAwFqB,GAAxF,CAA4F,YAA5F,CAAN,CAZsB,CAatB;AAEA;AAGH,SAlBH,MAkBQ,IAAIwC,SAAS,KAAK,QAAlB,EAA4B;AAE9B,gBAAMiB,QAAQ,GAAGhF,QAAQ,CAAC,CAAD,CAAR,CAAYE,IAAZ,CAAiB+E,iBAAlC,CAF8B,CAG9B;AAEA;;AACApE,UAAAA,cAAc,CAAC,oBAAD,CAAd,GAAqCmE,QAAQ,CAAC7D,kBAA9C,CAN8B,CAO9B;AACA;;AACAN,UAAAA,cAAc,CAAC,cAAD,CAAd,GAAiCmE,QAAQ,CAACE,YAA1C;AACArE,UAAAA,cAAc,CAAC,mBAAD,CAAd,GAAsCmE,QAAQ,CAACG,iBAA/C,CAV8B,CAW9B;AACA;AACA;AACA;;AACAtE,UAAAA,cAAc,CAAC,MAAD,CAAd,GAAyBmE,QAAQ,CAACI,IAAlC;AACAvE,UAAAA,cAAc,CAAC,oBAAD,CAAd,GAAuCmE,QAAQ,CAACK,kBAAhD;AAEAxE,UAAAA,cAAc,GAAG,EAAC,GAAGA;AAAJ,WAAjB;AAET,gBAAMyE,iBAAiB,GAAGlG,mBAAmB,CAACY,QAAQ,CAAC,CAAD,CAAR,CAAYE,IAAZ,IAAoB,EAArB,EAAyB,gBAAzB,EAA2C,gBAA3C,EAA6D,KAA7D,EAAoE,KAApE,EAA2E,IAA3E,CAA7C;AACA,gBAAMoB,SAAS,GAAGlC,mBAAmB,CAACY,QAAQ,CAAC,CAAD,CAAR,CAAYE,IAAZ,CAAiBgB,MAAjB,IAA2B,EAA5B,EAAgC,aAAhC,EAA+C,aAA/C,EAA8D,KAA9D,EAAqE,KAArE,EAA4E,IAA5E,CAArC,CArBuC,CAsBtC;AACA;;AACD,gBAAMqE,kBAAkB,GAAGnG,mBAAmB,CAACY,QAAQ,CAAC,CAAD,CAAR,CAAYE,IAAZ,IAAoB,EAArB,EAAyB,iBAAzB,EAA4C,iBAA5C,EAA+D,KAA/D,EAAsE,KAAtE,EAA6E,IAA7E,CAA9C;AACA,gBAAMsF,UAAU,GAAGpG,mBAAmB,CAACY,QAAQ,CAAC,CAAD,CAAR,CAAYE,IAAZ,CAAiB2C,OAAjB,IAA4B,EAA7B,EAAiC,cAAjC,EAAiD,cAAjD,EAAiE,KAAjE,EAAwE,KAAxE,EAA+E,IAA/E,CAAtC;AACA,gBAAM4C,MAAM,GAAGrG,mBAAmB,CAACY,QAAQ,CAAC,CAAD,CAAR,CAAYE,IAAZ,IAAoB,EAArB,EAAyB,UAAzB,EAAqC,UAArC,EAAiD,KAAjD,EAAwD,KAAxD,EAA+D,IAA/D,CAAlC;AACA,gBAAM8B,aAAa,GAAE5C,mBAAmB,CAACY,QAAQ,CAAC,CAAD,CAAR,CAAYE,IAAZ,CAAiBkB,UAAjB,IAA+B,EAAhC,EAAoC,iBAApC,EAAsD,iBAAtD,EAAyEb,SAAzE,EAAoFA,SAApF,EAA+F,KAA/F,CAAxC;AACA,gBAAM0B,gBAAgB,GAAG7C,mBAAmB,CAACY,QAAQ,CAAC,CAAD,CAAR,CAAYE,IAAZ,CAAiBmB,aAAjB,IAAkC,EAAnC,EAAuC,oBAAvC,EAA4D,cAA5D,EAA4Ed,SAA5E,EAAuFA,SAAvF,EAAkG,KAAlG,CAA5C;AAGKmE,UAAAA,cAAc,GAAGY,iBAAiB,CAAC/D,GAAlB,CAAsB,YAAtB,CAAjB;AACAL,UAAAA,MAAM,GAAGI,SAAS,CAACC,GAAV,CAAc,YAAd,CAAT;AACAsD,UAAAA,eAAe,GAAGU,kBAAkB,CAAChE,GAAnB,CAAuB,YAAvB,CAAlB;AACAsB,UAAAA,OAAO,GAAG2C,UAAU,CAACjE,GAAX,CAAe,YAAf,CAAV;AACAuD,UAAAA,GAAG,GAAGW,MAAM,CAAClE,GAAP,CAAW,YAAX,CAAN;AACAH,UAAAA,UAAU,GAAGY,aAAa,CAACT,GAAd,CAAkB,YAAlB,CAAb;AACAF,UAAAA,aAAa,GAAGY,gBAAgB,CAACV,GAAjB,CAAqB,YAArB,CAAhB,CArCkC,CAuC9B;AACA;AACA;AACA;;AAEAV,UAAAA,cAAc,CAAC,gBAAD,CAAd,GAAmC;AAC/B,qBAASmE,QAAQ,CAAC,gBAAD,CADc;AAE/B,qBAASA,QAAQ,CAAC,gBAAD;AAFc,WAAnC;AAKAnE,UAAAA,cAAc,CAAC,aAAD,CAAd,GAAgC;AAC5B,qBAASmE,QAAQ,CAAC,aAAD,CADW;AAE5B,qBAASA,QAAQ,CAAC,aAAD;AAFW,WAAhC,CAjD8B,CAsD9B;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;AAEAnE,UAAAA,cAAc,CAAC,iBAAD,CAAd,GAAoC;AAChC,qBAASmE,QAAQ,CAAC,iBAAD,CADe;AAEhC,qBAASA,QAAQ,CAAC,iBAAD;AAFe,WAApC;AAKAnE,UAAAA,cAAc,CAAC,cAAD,CAAd,GAAiC;AAC7B,qBAASmE,QAAQ,CAAC,cAAD,CADY;AAE7B,qBAASA,QAAQ,CAAC,cAAD;AAFY,WAAjC;AAKAnE,UAAAA,cAAc,CAAC,UAAD,CAAd,GAA6B;AACzB,qBAASmE,QAAQ,CAAC,UAAD,CADQ;AAEzB,qBAASA,QAAQ,CAAC,UAAD;AAFQ,WAA7B;AAKAnE,UAAAA,cAAc,CAAC,iBAAD,CAAd,GAAoC;AAChC,qBAASmE,QAAQ,CAAC,iBAAD,CADe;AAEhC,qBAASA,QAAQ,CAAC,iBAAD;AAFe,WAApC;AAKAnE,UAAAA,cAAc,CAAC,oBAAD,CAAd,GAAuC;AACnC,qBAASmE,QAAQ,CAAC,oBAAD,CADkB;AAEnC,qBAASA,QAAQ,CAAC,cAAD;AAFkB,WAAvC,CApF8B,CAwFlC;;AACAnE,UAAAA,cAAc,CAAC,gBAAD,CAAd,GAAmCxB,mBAAmB,CAAC2E,QAAD,EAAUgB,QAAQ,CAACU,cAAnB,CAAtD;AAEC;;AAEG/F,QAAAA,QAAQ,CAAC;AACLQ,UAAAA,IAAI,EAAElB,cADD;AAELmB,UAAAA,OAAO,EAAE;AAELuF,YAAAA,SAAS,EAAE,IAFN;AAGLhB,YAAAA,WAHK;AAILZ,YAAAA,SAAS,EAAEA,SAJN;AAIgBW,YAAAA,cAJhB;AAI+BxD,YAAAA,MAJ/B;AAIsCiC,YAAAA,aAJtC;AAIoDhC,YAAAA,kBAJpD;AAIuEyD,YAAAA,aAJvE;AAKL/B,YAAAA,OALK;AAKGgC,YAAAA,eALH;AAKmBC,YAAAA,GALnB;AAKuB1D,YAAAA,UALvB;AAKkCC,YAAAA,aALlC;AAMLuE,YAAAA,UAAU,EAAE,eANP;AAMuBC,YAAAA,eAAe,EAAC,KANvC;AAOLhF,YAAAA,cAPK;AAQLoD,YAAAA,YARK;AASLQ,YAAAA,QATK;AAULpE,YAAAA,OAAO,EAAE;AAVJ;AAFJ,SAAD,CAAR;AAeH,OAxIL,EAyIKG,KAzIL,CAyIWC,KAAK,IAAI;AACZd,QAAAA,QAAQ,CAAC;AACLQ,UAAAA,IAAI,EAAElB,cADD;AAELmB,UAAAA,OAAO,EAAE;AACLC,YAAAA,OAAO,EAAE;AADJ;AAFJ,SAAD,CAAR;;AAMA,YAAII,KAAK,CAACT,QAAN,CAAewB,MAAf,KAA0B,GAA9B,EAAmC;AAC/BxC,UAAAA,KAAK,CAACyB,KAAN,CAAYA,KAAK,CAACC,OAAlB;AACH,SAFD,MAEO;AACH1B,UAAAA,KAAK,CAACyC,IAAN,CAAWhB,KAAK,CAACT,QAAN,CAAeE,IAA1B;AACH;AACJ,OArJL;AAsJF,KA/NL,MA+NW;AAEAlB,MAAAA,KAAK,CAACyC,IAAN,CAAWjC,IAAI,CAACsG,aAAL,CAAmB;AAACC,QAAAA,EAAE,EAAE;AAAL,OAAnB,CAAX;AAEN;AACL,GArOD;AAsOH,CAvOM;AAyOP,OAAO,MAAMC,cAAc,GAAG,CAACjC,SAAD,EAAYC,QAAZ,EAAsBC,YAAtB,EAAmCC,iBAAnC,KAA0D;AACpF,SAAO,UAAUvE,QAAV,EAAoB;AAC3B;AACYA,IAAAA,QAAQ,CAACT,WAAW,CAAC,IAAD,CAAZ,CAAR;AACJ,UAAMmF,QAAQ,GAAG,EAAjB;AAEA,QAAIxD,cAAc,GAAG,EAArB;AAEIwD,IAAAA,QAAQ,CAACC,IAAT,CAAcxF,KAAK,CAACc,IAAN,CAAW,8BAAX,EAA2C;AACrD,kBAAYoE;AADyC,KAA3C,CAAd;AAIAK,IAAAA,QAAQ,CAACC,IAAT,CAAcxF,KAAK,CAACc,IAAN,CAAW,oBAAX,EAAiC;AAC3C,kBAAYoE;AAD+B,KAAjC,CAAd;AAIAK,IAAAA,QAAQ,CAACC,IAAT,CAAcxF,KAAK,CAACc,IAAN,CAAW,mCAAX,EAAgD;AAC1D,wBAAkBsE,iBAAiB,CAACK,cADsB;AAE1D,kBAAYP;AAF8C,KAAhD,CAAd;AAMJjF,IAAAA,KAAK,CAACkC,GAAN,CAAUoD,QAAV,EACKtE,IADL,CACUC,QAAQ,IAAI;AAElB,UAAI;AAACiG,QAAAA,YAAD;AAAcC,QAAAA;AAAd,UAAuB,EAA3B;AAEAD,MAAAA,YAAY,GAAG7G,mBAAmB,CAACY,QAAQ,CAAC,CAAD,CAAR,CAAYE,IAAZ,IAAoB,EAArB,EAAyB,mBAAzB,EAA8C,mBAA9C,EAAmE,KAAnE,EAA0E,KAA1E,EAAiF,IAAjF,CAAnB,CAA0GqB,GAA1G,CAA8G,YAA9G,CAAf;AACA2E,MAAAA,OAAO,GAAG9G,mBAAmB,CAACY,QAAQ,CAAC,CAAD,CAAR,CAAYE,IAAZ,IAAoB,EAArB,EAAyB,cAAzB,EAAyC,cAAzC,EAAyD,KAAzD,EAAgE,KAAhE,EAAuE,IAAvE,CAAnB,CAAgGqB,GAAhG,CAAoG,YAApG,CAAV;AACA,YAAM4E,oBAAoB,GAAEnG,QAAQ,CAAC,CAAD,CAAR,CAAYE,IAAxC;;AAEA,UAAGiG,oBAAoB,CAAC,CAAD,CAApB,CAAwBC,mBAAxB,GAA6C,CAA7C,IAAkDD,oBAAoB,CAAC,CAAD,CAApB,CAAwBE,cAAxB,GAAwC,CAA7F,EAA+F;AAG/F;AACD;AAEAxF,QAAAA,cAAc,CAAC,qBAAD,CAAd,GAAuCsF,oBAAoB,CAAC,CAAD,CAApB,CAAwBC,mBAA/D;AACAvF,QAAAA,cAAc,CAAC,gBAAD,CAAd,GAAmCsF,oBAAoB,CAAC,CAAD,CAApB,CAAwBG,eAA3D;AAEAzF,QAAAA,cAAc,CAAC,gBAAD,CAAd,GAAmCsF,oBAAoB,CAAC,CAAD,CAApB,CAAwBE,cAA3D;AACAxF,QAAAA,cAAc,CAAC,WAAD,CAAd,GAA8BsF,oBAAoB,CAAC,CAAD,CAApB,CAAwBI,UAAtD;AACA1F,QAAAA,cAAc,CAAC,gBAAD,CAAd,GAAkCsF,oBAAoB,CAAC,CAAD,CAApB,CAAwBK,iBAAxB,GAA0C3F,cAAc,CAAC,WAAD,CAAzD,GAAwEA,cAAc,CAAC,gBAAD,CAAvH;;AAEI,YAAGsF,oBAAoB,CAAC,CAAD,CAApB,CAAwBC,mBAAxB,GAA6C,CAAhD,EAAmD;AAElDvF,UAAAA,cAAc,CAAC,mBAAD,CAAd,GAAsC;AAClC,qBAASsF,oBAAoB,CAAC,CAAD,CAApB,CAAwB,mBAAxB,CADyB;AAElC,qBAASA,oBAAoB,CAAC,CAAD,CAApB,CAAwB,mBAAxB;AAFyB,WAAtC;AAIA;;AAED,YAAGA,oBAAoB,CAAC,CAAD,CAApB,CAAwBE,cAAxB,GAAwC,CAA3C,EAA8C;AAE7CxF,UAAAA,cAAc,CAAC,cAAD,CAAd,GAAiC;AAC7B,qBAASsF,oBAAoB,CAAC,CAAD,CAApB,CAAwB,cAAxB,CADoB;AAE7B,qBAAUA,oBAAoB,CAAC,CAAD,CAApB,CAAwB,cAAxB;AAFmB,WAAjC;AAIC;AAEJ,OA7BD,MA6BM;AAEnB;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKoBtF,QAAAA,cAAc,CAAC,qBAAD,CAAd,GAAuC,CAAvC;AACAA,QAAAA,cAAc,CAAC,gBAAD,CAAd,GAAmC,CAAnC;AACAA,QAAAA,cAAc,CAAC,cAAD,CAAd,GAAgC,EAAhC;AACAA,QAAAA,cAAc,CAAC,mBAAD,CAAd,GAAsC,EAAtC;AACAA,QAAAA,cAAc,CAAC,gBAAD,CAAd,GAAiC,CAAjC;AACAA,QAAAA,cAAc,CAAC,WAAD,CAAd,GAA4B,CAA5B;AACAA,QAAAA,cAAc,CAAC,gBAAD,CAAd,GAAiCsF,oBAAoB,CAAC,CAAD,CAApB,CAAwBK,iBAAzD;AAEH;;AAEG7G,MAAAA,QAAQ,CAAC;AACLQ,QAAAA,IAAI,EAAElB,cADD;AAELmB,QAAAA,OAAO,EAAE;AAELqG,UAAAA,cAAc,EAAE,IAFX;AAGLR,UAAAA,YAHK;AAGQJ,UAAAA,eAAe,EAAC,KAHxB;AAIL9B,UAAAA,SAAS,EAAEA,SAJN;AAIgBmC,UAAAA,OAJhB;AAIwBC,UAAAA,oBAJxB;AAKLP,UAAAA,UAAU,EAAE,sBALP;AAML/E,UAAAA,cANK;AAOLoD,UAAAA,YAPK;AAQL5D,UAAAA,OAAO,EAAE;AARJ;AAFJ,OAAD,CAAR;AAaH,KAlFL,EAmFKG,KAnFL,CAmFWC,KAAK,IAAI;AACZd,MAAAA,QAAQ,CAAC;AACLQ,QAAAA,IAAI,EAAElB,cADD;AAELmB,QAAAA,OAAO,EAAE;AACLC,UAAAA,OAAO,EAAE;AADJ;AAFJ,OAAD,CAAR;;AAMA,UAAII,KAAK,CAACT,QAAN,CAAewB,MAAf,KAA0B,GAA9B,EAAmC;AAC/BxC,QAAAA,KAAK,CAACyB,KAAN,CAAYA,KAAK,CAACC,OAAlB;AACH,OAFD,MAEO;AACH1B,QAAAA,KAAK,CAACyC,IAAN,CAAWhB,KAAK,CAACT,QAAN,CAAeE,IAA1B;AACH;AACJ,KA/FL,EArBmB,CAqHvB;AAEA;AAEA;AACH,GA1HD;AA2HH,CA5HM,C,CA8HP;;AACA,OAAO,MAAMwG,YAAY,GAAG,CAACC,aAAD,EAAgB3C,QAAhB,EAA0B/D,UAA1B,KAAyC;AACjE,SAAO,UAAUN,QAAV,EAAoB;AACvBA,IAAAA,QAAQ,CAACT,WAAW,CAAC,IAAD,CAAZ,CAAR;AACAJ,IAAAA,KAAK,CAACc,IAAN,CAAW,mCAAX,EAAgD;AAC5C2E,MAAAA,cAAc,EAAEoC,aAAa,CAACpC,cADc;AAExCxD,MAAAA,QAAQ,EAAEiD;AAF8B,KAAhD,EAIKjE,IAJL,CAIUC,QAAQ,IAAI;AAGV,UAAI4G,WAAW,GAAI,EAAC,GAAG3G,UAAJ;AAEf,WAAGD,QAAQ,CAACE;AAFG,OAAnB,CAHU,CAOV;AACA;;AACAD,MAAAA,UAAU,GAAC2G,WAAX;AACJzH,MAAAA,QAAQ,CAACc,UAAD,CAAR;AACAN,MAAAA,QAAQ,CAAC;AACLQ,QAAAA,IAAI,EAAElB,cADD;AAELmB,QAAAA,OAAO,EAAE;AACN;AACCC,UAAAA,OAAO,EAAE,KAFJ;AAGLC,UAAAA,SAAS,EAAEC,SAHN;AAILN,UAAAA;AAJK;AAFJ,OAAD,CAAR;AAUH,KAzBL,EA0BKO,KA1BL,CA0BWC,KAAK,IAAI;AACZd,MAAAA,QAAQ,CAAC;AACLQ,QAAAA,IAAI,EAAElB,cADD;AAELmB,QAAAA,OAAO,EAAE;AACLC,UAAAA,OAAO,EAAE;AADJ;AAFJ,OAAD,CAAR;AAMArB,MAAAA,KAAK,CAACyB,KAAN,CAAYA,KAAK,CAACC,OAAlB;AACH,KAlCL;AAmCH,GArCD;AAsCH,CAvCM;AAyCP,OAAO,SAASmG,0BAAT,CAAoCjB,UAApC,EAAgD7B,SAAhD,EAA2D9D,UAA3D,EAAuE+D,QAAvE,EAAiFC,YAAjF,EAA8F;AACjG,SAAO,UAAUtE,QAAV,EAAoB;AACvB,QAAIM,UAAU,CAACgF,iBAAX,CAA6Bd,kBAA7B,KAAoD5E,iBAAiB,CAACuH,KAA1E,EAAgF;AAEhFnH,MAAAA,QAAQ,CAACT,WAAW,CAAC,IAAD,CAAZ,CAAR;AACAJ,MAAAA,KAAK,CAACc,IAAN,CAAW,oCAAX,EAAgD;AAC5C,0BAAiBK,UAAU,CAACgF,iBAAX,CAA6B,gBAA7B,CAD2B;AAE5ClE,QAAAA,QAAQ,EAACiD;AAFmC,OAAhD,EAICjE,IAJD,CAIMC,QAAQ,IAAE;AAEZ,YAAI4G,WAAW,GAAI,EAAC,GAAG3G,UAAJ;AAEf,aAAGD,QAAQ,CAACE;AAFG,SAAnB;AAGID,QAAAA,UAAU,GAAC2G,WAAX;AACAjH,QAAAA,QAAQ,CAAC;AAACQ,UAAAA,IAAI,EAAElB,cAAP;AAAuBmB,UAAAA,OAAO,EAAC;AACA2G,YAAAA,iBAAiB,EAAC/G,QAAQ,CAACE,IAD3B;AAEAD,YAAAA,UAFA;AAEW4F,YAAAA,eAAe,EAAC,KAF3B;AAGAY,YAAAA,cAAc,EAAC,IAHf;AAIA1C,YAAAA,SAJA;AAIW6B,YAAAA,UAJX;AAIuB3B,YAAAA,YAJvB;AAKA;AACA5D,YAAAA,OAAO,EAAC;AANR;AAA/B,SAAD,CAAR;AAOH,OAjBL,EAkBKG,KAlBL,CAkBWC,KAAK,IAAE;AACVd,QAAAA,QAAQ,CAAC;AAACQ,UAAAA,IAAI,EAAElB,cAAP;AAAuBmB,UAAAA,OAAO,EAAE;AAACC,YAAAA,OAAO,EAAC;AAAT;AAAhC,SAAD,CAAR;;AACA,YAAII,KAAK,CAACT,QAAN,CAAewB,MAAf,KAA0B,GAA9B,EAAkC;AAC9BxC,UAAAA,KAAK,CAACyB,KAAN,CAAYA,KAAK,CAACC,OAAlB;AACH,SAFD,MAGI;AACA1B,UAAAA,KAAK,CAACyC,IAAN,CAAWhB,KAAK,CAACT,QAAN,CAAeE,IAA1B;AACH;AACJ,OA1BL;AA2BH,KA9BG,MA+BA;AACAlB,MAAAA,KAAK,CAACyC,IAAN,CAAWjC,IAAI,CAACsG,aAAL,CAAmB;AAACC,QAAAA,EAAE,EAAE;AAAL,OAAnB,CAAX;AACH;AACJ,GAnCG;AAmCF;AAGF,OAAO,SAASiB,8BAAT,CAAwCC,SAAxC,EAAkD;AACrD,SAAO,UAAUtH,QAAV,EAAoB;AACxB;AACA;AACC,QAAIsH,SAAS,CAAChH,UAAV,CAAqBgF,iBAArB,CAAuCd,kBAAvC,KAA8D5E,iBAAiB,CAACuH,KAApF,EAA0F;AAE1FnH,MAAAA,QAAQ,CAACT,WAAW,CAAC,IAAD,CAAZ,CAAR;AACA,YAAMmF,QAAQ,GAAG,EAAjB;AAIIA,MAAAA,QAAQ,CAACC,IAAT,CAAcxF,KAAK,CAACc,IAAN,CAAW,8BAAX,EAA2C;AACrD,oBAAYqH,SAAS,CAACjD;AAD+B,OAA3C,CAAd;AAIAK,MAAAA,QAAQ,CAACC,IAAT,CAAexF,KAAK,CAACc,IAAN,CAAW,6BAAX,EAAyC;AAAC,0BAAiBqH,SAAS,CAAChH,UAAV,CAAqBgF,iBAArB,CAAuC,gBAAvC,CAAlB;AACxD,8BAAqBgC,SAAS,CAACC,OAAV,GAAoBD,SAAS,CAACC,OAAV,CAAkBC,kBAAtC,GAA0D,IADvB;AAExDpG,QAAAA,QAAQ,EAACkG,SAAS,CAACjD;AAFqC,OAAzC,CAAf;AAKJjF,MAAAA,KAAK,CAACkC,GAAN,CAAUoD,QAAV,EACCtE,IADD,CACMC,QAAQ,IAAE;AAEZ,YAAI;AAACiG,UAAAA;AAAD,YAAe,EAAnB;AACA,YAAIpF,cAAc,GAAE,EAApB;AAEAoF,QAAAA,YAAY,GAAG7G,mBAAmB,CAACY,QAAQ,CAAC,CAAD,CAAR,CAAYE,IAAZ,IAAoB,EAArB,EAAyB,mBAAzB,EAA8C,mBAA9C,EAAmE,KAAnE,EAA0E,KAA1E,EAAiF,IAAjF,CAAnB,CAA0GqB,GAA1G,CAA8G,YAA9G,CAAf,CALY,CAOZ;AACA;;AAGI,YAAI0F,SAAS,CAACC,OAAd,EAAsB;AAElBrG,UAAAA,cAAc,CAACyD,IAAf,CAAoBtE,QAAQ,CAAC,CAAD,CAAR,CAAYE,IAAZ,CAAiB,wBAAjB,CAApB;AACAW,UAAAA,cAAc,CAAC,CAAD,CAAd,CAAkB,mBAAlB,IAAyC,EAAC,GAAGA,cAAc,CAAC,CAAD,CAAd,CAAkB,mBAAlB,CAAJ;AAEjCqB,YAAAA,KAAK,EAAErB,cAAc,CAAC,CAAD,CAAd,CAAkBuG,iBAFQ;AAGjChF,YAAAA,KAAK,EAAEvB,cAAc,CAAC,CAAD,CAAd,CAAkBwG;AAHQ,WAAzC;AAKH,SARD,MASI;AAEAxG,UAAAA,cAAc,GAAG1B,QAAQ,CAACa,QAAQ,CAAC,CAAD,CAAR,CAAYE,IAAZ,CAAiB,gBAAjB,CAAD,CAAzB;AACAF,UAAAA,QAAQ,CAAC,CAAD,CAAR,CAAYE,IAAZ,CAAiB,gBAAjB,EAAmCoH,OAAnC,CAA2C,CAAChF,IAAD,EAAOiF,KAAP,KAAiB;AAExD1G,YAAAA,cAAc,CAAC0G,KAAD,CAAd,CAAsB,mBAAtB,IAA6C,EAAC,GAAG1G,cAAc,CAAC0G,KAAD,CAAd,CAAsB,mBAAtB,CAAJ;AAEzCrF,cAAAA,KAAK,EAAEI,IAAI,CAAC8E,iBAF6B;AAGzChF,cAAAA,KAAK,EAAEE,IAAI,CAAC+E;AAH6B,aAA7C;AAMH,WARD;AASH;;AACD1H,QAAAA,QAAQ,CAAC;AAACQ,UAAAA,IAAI,EAAElB,cAAP;AAAuBmB,UAAAA,OAAO,EAAC;AAAC;AACD;AACAqG,YAAAA,cAAc,EAAC,IAFf;AAEoBZ,YAAAA,eAAe,EAAC,IAFpC;AAGA9B,YAAAA,SAAS,EAACkD,SAAS,CAAClD,SAHpB;AAIA6B,YAAAA,UAAU,EAACqB,SAAS,CAACrB,UAJrB;AAKA3B,YAAAA,YAAY,EAACgD,SAAS,CAAChD,YALvB;AAMApD,YAAAA,cANA;AAOA2G,YAAAA,UAAU,EAACP,SAAS,CAACC,OAAV,GAAoBD,SAAS,CAACC,OAAV,CAAkBC,kBAAtC,GAA0D,IAPrE;AAQA9G,YAAAA,OAAO,EAAC,KARR;AASAoH,YAAAA,kBAAkB,EAACR,SAAS,CAACQ,kBAT7B;AAUAxB,YAAAA;AAVA;AAA/B,SAAD,CAAR;AAWH,OA7CL,EA8CKzF,KA9CL,CA8CWC,KAAK,IAAE;AACVd,QAAAA,QAAQ,CAAC;AAACQ,UAAAA,IAAI,EAAElB,cAAP;AAAuBmB,UAAAA,OAAO,EAAE;AAACC,YAAAA,OAAO,EAAC;AAAT;AAAhC,SAAD,CAAR;;AACA,YAAII,KAAK,CAACT,QAAN,CAAewB,MAAf,KAA0B,GAA9B,EAAkC;AAC9BxC,UAAAA,KAAK,CAACyB,KAAN,CAAYA,KAAK,CAACC,OAAlB;AACH,SAFD,MAGI;AACA1B,UAAAA,KAAK,CAACyC,IAAN,CAAWhB,KAAK,CAACT,QAAN,CAAeE,IAA1B;AACH;AACJ,OAtDL;AAuDH,KAvEG,MAwEA;AACAlB,MAAAA,KAAK,CAACyC,IAAN,CAAWjC,IAAI,CAACsG,aAAL,CAAmB;AAACC,QAAAA,EAAE,EAAE;AAAL,OAAnB,CAAX;AACH;AACJ,GA9EG;AA8EF","sourcesContent":["import rsapi from '../rsapi';\r\nimport Axios from 'axios';\r\nimport {toast} from 'react-toastify';\r\nimport { DEFAULT_RETURN} from './LoginTypes';\r\nimport { initRequest } from './LoginAction';\r\nimport { sortData ,constructOptionList,rearrangeDateFormat,formatInputDate } from '../components/CommonScript';\r\nimport { transactionStatus } from '../components/Enumeration';\r\nimport { intl } from \"../components/App\"; \r\n\r\nexport const getreloadQuotation = (inputParam) => {\r\n    return (dispatch) => {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/quotation/get\" + inputParam.methodUrl, inputParam.inputData)\r\n            .then(response => {\r\n                const masterData = response.data\r\n                sortData(masterData);\r\n                    \r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false,\r\n                        dataState: undefined,\r\n                        masterData: {\r\n                            ...masterData,\r\n                            // quotation: inputParam.inputData.quotation\r\n                            \r\n                        }\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                });\r\n                toast.error(error.message);\r\n            });\r\n    }\r\n}\r\n\r\nexport function getQuotationClientCategoryComboService(methodParam,selectedRecord) {\r\n\r\n    return function (dispatch) {\r\n\r\n        let URL = [];\r\n\r\n            URL=rsapi.post(\"/client/getClientByCategory\", { \"userinfo\": methodParam.inputData.userinfo, \"nclientcatcode\":  methodParam.inputData.primarykey  })\r\n\r\n         dispatch(initRequest(true));\r\n\r\n        Axios.all([URL])\r\n\r\n            .then(response => {\r\n\r\n                let Client,sclientsiteaddress,ClientSite,ClientContact;\r\n                \r\n                const ClientMap = constructOptionList(response[0].data.Client || [], \"nclientcode\",\"sclientname\", undefined, undefined, false);              \r\n                // const ClientSiteMap = constructOptionList(response[0].data.ClientSite || [], \"nclientsitecode\",\"sclientsitename\", undefined, undefined, false);              \r\n                // const ClientContactMap = constructOptionList(response[0].data.ClientContact || [], \"nclientcontactcode\",\"scontactname\", undefined, undefined, false);              \r\n\r\n                Client = ClientMap.get(\"OptionList\");\r\n                // ClientSite = ClientSiteMap.get(\"OptionList\");\r\n                // ClientContact = ClientContactMap.get(\"OptionList\");\r\n\r\n                // let ActiveClientSite = response[0].data.ClientSite.filter(x => x.ndefaultstatus === 3);\r\n                // let ActiveClientContact = response[0].data.ClientContact.filter(x => x.ndefaultstatus === 3);\r\n\r\n          \r\n                // if(Client.length>0){\r\n                    \r\n                //     selectedRecord[\"nclientcode\"]=  {\r\n                //         label: response[0].data.selectedClient.sclientname,\r\n                //         value: response[0].data.selectedClient.nclientcode,\r\n                //         item: response[0].data.selectedClient\r\n                //     }\r\n\r\n                //     selectedRecord[\"nclientsitecode\"]=  {\r\n                //         label: ActiveClientSite[0].sclientsitename,\r\n                //         value: ActiveClientSite[0].nclientsitecode,\r\n                //         item:  ActiveClientSite[0]\r\n                //     }\r\n\r\n                //     selectedRecord[\"nclientcontactcode\"]=  {\r\n                //         label: ActiveClientContact[0].scontactname,\r\n                //         value: ActiveClientContact[0].nclientcontactcode,\r\n                //         item: ActiveClientContact[0].selectedClientContact\r\n                //     }\r\n\r\n                // }\r\n                \r\n               selectedRecord = {...selectedRecord}\r\n\r\n                dispatch({ type: DEFAULT_RETURN, payload:\r\n\r\n                     { Client,selectedRecord,ClientSite,ClientContact, loading: false, data: undefined, dataState: undefined,sclientsiteaddress } })\r\n\r\n            })\r\n\r\n            .catch(error => {\r\n\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n\r\n                if (error.response.status === 500) {\r\n\r\n                    toast.error(error.message);\r\n\r\n                }\r\n\r\n                else {\r\n\r\n                    toast.warn(error.response.data);\r\n\r\n                }\r\n\r\n            })\r\n\r\n    }\r\n\r\n}\r\n\r\nexport function getQuotaionClientComboService(methodParam,selectedRecord) {\r\n\r\n    return function (dispatch) {\r\n\r\n        let URL = [];\r\n\r\n            URL=rsapi.post(\"/quotation/getSelectedClientDetail\", { \"userinfo\": methodParam.inputData.userinfo, \"nclientcode\":  methodParam.inputData.primarykey  })\r\n\r\n         dispatch(initRequest(true));\r\n\r\n        Axios.all([URL])\r\n\r\n            .then(response => {\r\n\r\n                let ClientSite,ClientContact;\r\n\r\n                let ActiveClientSite =response[0].data.ClientSite.filter(x => x.ndefaultstatus === 3);\r\n                let ActiveClientContact = response[0].data.ClientContact.filter(x => x.ndefaultstatus === 3);\r\n\r\n                const ClientSiteMap = constructOptionList(ActiveClientSite || [], \"nclientsitecode\",\"sclientsitename\", undefined, undefined, false);              \r\n                const ClientContactMap = constructOptionList(ActiveClientContact || [], \"nclientcontactcode\",\"scontactname\", undefined, undefined, false);  \r\n                \r\n                ClientSite = ClientSiteMap.get(\"OptionList\");\r\n                ClientContact = ClientContactMap.get(\"OptionList\");\r\n\r\n\r\n                selectedRecord[\"nclientsitecode\"]=  {\r\n                    label: ActiveClientSite[0].sclientsitename,\r\n                    value: ActiveClientSite[0].nclientsitecode,\r\n                    item:  ActiveClientSite[0]\r\n                }\r\n\r\n                selectedRecord[\"nclientcontactcode\"]=  {\r\n                    label: ActiveClientContact[0].scontactname,\r\n                    value: ActiveClientContact[0].nclientcontactcode,\r\n                    item:  ActiveClientContact[0]\r\n                }\r\n\r\n                dispatch({ type: DEFAULT_RETURN, payload:\r\n\r\n                     { selectedRecord,ClientSite,ClientContact, loading: false, data: undefined, dataState: undefined } })\r\n\r\n            })\r\n\r\n            .catch(error => {\r\n\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n\r\n                if (error.response.status === 500) {\r\n\r\n                    toast.error(error.message);\r\n\r\n                }\r\n\r\n                else {\r\n\r\n                    toast.warn(error.response.data);\r\n\r\n                }\r\n\r\n            })\r\n\r\n    }\r\n\r\n}\r\n\r\nexport function getQuotaionClientSiteComboService(methodParam,selectedRecord) {\r\n\r\n    return function (dispatch) {\r\n\r\n        let URL = [];\r\n\r\n            URL=rsapi.post(\"/client/getClientContactInfoBySite\", { \"userinfo\": methodParam.inputData.userinfo, \"nclientcode\":  methodParam.inputData.nclientcode,\"nclientsitecode\":  methodParam.inputData.primarykey  })\r\n\r\n         dispatch(initRequest(true));\r\n\r\n        Axios.all([URL])\r\n\r\n            .then(response => {\r\n\r\n                let ClientContact;\r\n                const ClientContactMap = constructOptionList(response[0].data || [], \"nclientcontactcode\",\"scontactname\", undefined, undefined, false);  \r\n                \r\n                // ClientContact = ClientContactMap.get(\"OptionList\");\r\n\r\n                 let ActiveClientContact = response[0].data.filter(x => x.ndefaultstatus === 3);\r\n\r\n              if(ActiveClientContact.length>0){\r\n\r\n                ClientContact = ClientContactMap.get(\"OptionList\");\r\n                \r\n                selectedRecord[\"nclientcontactcode\"]=  {\r\n                    label: ActiveClientContact[0].scontactname,\r\n                    value: ActiveClientContact[0].nclientcontactcode,\r\n                    item:  ActiveClientContact[0]\r\n                }\r\n\r\n              }else{\r\n                selectedRecord[\"nclientcontactcode\"]=  {\r\n                    label: \"\",\r\n                    value: \"\",\r\n                    item:  \"\"\r\n                }\r\n\r\n              }\r\n               \r\n\r\n                dispatch({ type: DEFAULT_RETURN, payload:\r\n\r\n                     { selectedRecord,ClientContact, loading: false, data: undefined, dataState: undefined } })\r\n\r\n            })\r\n\r\n            .catch(error => {\r\n\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n\r\n                if (error.response.status === 500) {\r\n\r\n                    toast.error(error.message);\r\n\r\n                }\r\n\r\n                else {\r\n\r\n                    toast.warn(error.response.data);\r\n\r\n                }\r\n\r\n            })\r\n\r\n    }\r\n\r\n}\r\n\r\nexport function getQuotaionProductCategoryComboService(methodParam,selectedRecord) {\r\n\r\n    return function (dispatch) {\r\n\r\n        let URL = [];\r\n\r\n            URL=rsapi.post(\"/quotation/getProductByCategory\", { \"userinfo\": methodParam.inputData.userinfo, \"nproductcatcode\":  methodParam.inputData.primarykey  })\r\n\r\n         dispatch(initRequest(true));\r\n\r\n        Axios.all([URL])\r\n\r\n            .then(response => {\r\n\r\n                let Product;\r\n               \r\n                const usertMap = constructOptionList(response[0].data.Product || [], \"nproductcode\",\"sproductname\", undefined, undefined, false);              \r\n\r\n                Product = usertMap.get(\"OptionList\");\r\n\r\n                if(Product.length>0){\r\n                    \r\n                    selectedRecord[\"nproductcode\"]=  {\r\n                        label: response[0].data.Product[0].sproductname,\r\n                        value: response[0].data.Product[0].nproductcode,\r\n                        item: response[0].data.Product[0]\r\n                    }\r\n\r\n                }\r\n                \r\n               selectedRecord = {...selectedRecord}\r\n\r\n                dispatch({ type: DEFAULT_RETURN, payload:\r\n\r\n                    { Product,selectedRecord, loading: false, data: undefined, dataState: undefined } })\r\n            })\r\n\r\n            .catch(error => {\r\n\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n\r\n                if (error.response.status === 500) {\r\n\r\n                    toast.error(error.message);\r\n\r\n                }\r\n\r\n                else {\r\n\r\n                    toast.warn(error.response.data);\r\n\r\n                }\r\n\r\n            })\r\n\r\n    }\r\n\r\n}\r\n\r\nexport function getProjectTypeComboService(methodParam,selectedRecord) {\r\n\r\n    return function (dispatch) {\r\n\r\n        let URL = [];\r\n\r\n            URL=rsapi.post(\"/projectmaster/getApprovedProjectMasterByProjectType\", { \"userinfo\": methodParam.inputData.userinfo, \"nprojecttypecode\":  methodParam.inputData.primarykey  })\r\n\r\n         dispatch(initRequest(true));\r\n\r\n        Axios.all([URL])\r\n\r\n            .then(response => {\r\n\r\n                let ProjectCode,ProjectMaster=[];    \r\n                // let srfwdate;\r\n\r\n                const usertMap = constructOptionList(response[0].data.ProjectCode || [], \"nprojectmastercode\",\"sprojectcode\", undefined, undefined, false);              \r\n\r\n                ProjectCode = usertMap.get(\"OptionList\");\r\n    \r\n                if(ProjectCode.length>0){\r\n\r\n                    selectedRecord[\"nprojectmastercode\"]=  {\r\n                                label: response[0].data.SelectedProjectCode.sprojectcode,\r\n                                value: response[0].data.SelectedProjectCode.nprojectmastercode,\r\n                                item: response[0].data.SelectedProjectCode}\r\n\r\n                // srfwdate= rearrangeDateFormat( methodParam.inputData.userinfo, response[0].data.Projectmaster[0].srfwdate); --  New\r\n                //  srfwdate=response[0].data.Projectmaster[0].srfwdate;\r\n                    selectedRecord[\"sprojecttitle\"]=response[0].data.Projectmaster[0].sprojecttitle;\r\n                // selectedRecord[\"srfwdate\"]=srfwdate; -- New\r\n                    selectedRecord[\"suserrolename\"]=response[0].data.Projectmaster[0].suserrolename;\r\n                    selectedRecord[\"susername\"]=response[0].data.Projectmaster[0].susername;\r\n                    // selectedRecord[\"nuserrolecode\"]=response[0].data.Projectmaster[0].nuserrolecode;\r\n                    selectedRecord[\"nusercode\"]=response[0].data.Projectmaster[0].nusercode;\r\n                    // ProjectMaster={...response[0].data.Projectmaster[0],srfwdate:srfwdate};\r\n                }\r\n               \r\n\r\n\r\n                dispatch({ type: DEFAULT_RETURN, payload:\r\n\r\n                     { selectedRecord, loading: false, data: undefined, dataState: undefined,ProjectCode,ProjectMaster } })\r\n\r\n            })\r\n\r\n            .catch(error => {\r\n\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n\r\n                if (error.response.status === 500) {\r\n\r\n                    toast.error(error.message);\r\n\r\n                }\r\n\r\n                else {\r\n\r\n                    toast.warn(error.response.data);\r\n\r\n                }\r\n\r\n            })\r\n\r\n    }\r\n\r\n}\r\n\r\nexport function getProjectCodeComboService(methodParam,selectedRecord) {\r\n\r\n    return function (dispatch) {\r\n\r\n        let URL = [];\r\n\r\n            URL=rsapi.post(\"/projectmaster/getActiveProjectMasterById\", { \"userinfo\": methodParam.inputData.userinfo, \"nprojectmastercode\":  methodParam.inputData.primarykey  })\r\n\r\n         dispatch(initRequest(true));\r\n\r\n        Axios.all([URL])\r\n\r\n            .then(response => {\r\n\r\n                // let ProjectMaster=[];  \r\n                // let srfwdate;  \r\n               \r\n                // srfwdate= rearrangeDateFormat( methodParam.inputData.userinfo, response[0].data.Projectmaster[0].srfwdate);\r\n                \r\n                // ProjectMaster=response[0].data.SelectedProjectMaster;\r\n\r\n                selectedRecord[\"nprojectmastercode\"]=  {\r\n                    label: response[0].data.SelectedProjectMaster.sprojectcode,\r\n                    value: response[0].data.SelectedProjectMaster.nprojectmastercode,\r\n                    item: response[0].data.SelectedProjectMaster}\r\n\r\n                // srfwdate=response[0].data.SelectedProjectMaster.srfwdate;\r\n                // ProjectMaster={...response[0].data.SelectedProjectMaster,srfwdate:srfwdate};\r\n\r\n                // srfwdate= rearrangeDateFormat( methodParam.inputData.userinfo, response[0].data.SelectedProjectMaster.srfwdate); -- New\r\n                selectedRecord[\"sprojecttitle\"]=response[0].data.SelectedProjectMaster.sprojecttitle;\r\n                // selectedRecord[\"srfwdate\"]=srfwdate; -- New\r\n                selectedRecord[\"suserrolename\"]=response[0].data.SelectedProjectMaster.suserrolename;\r\n                selectedRecord[\"susername\"]=response[0].data.SelectedProjectMaster.susername;\r\n                // selectedRecord[\"nuserrolecode\"]=response[0].data.SelectedProjectMaster.nuserrolecode;\r\n                selectedRecord[\"nusercode\"]=response[0].data.SelectedProjectMaster.nusercode;\r\n\r\n                dispatch({ type: DEFAULT_RETURN, payload:\r\n\r\n                     { selectedRecord, loading: false, data: undefined, dataState: undefined } })\r\n\r\n            })\r\n\r\n            .catch(error => {\r\n\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n\r\n                if (error.response.status === 500) {\r\n\r\n                    toast.error(error.message);\r\n\r\n                }\r\n\r\n                else {\r\n\r\n                    toast.warn(error.response.data);\r\n\r\n                }\r\n\r\n            })\r\n\r\n    }\r\n\r\n}\r\n\r\n//Add Quotation\r\nexport const addQuotation = (operation, userInfo, ncontrolCode,selectedQuotation ) => {\r\n    return function (dispatch) {\r\n     if (operation === \"create\" || (operation === \"update\" && selectedQuotation.ntransactionstatus !== transactionStatus.APPROVED)) {\r\n                dispatch(initRequest(true));\r\n            const urlArray = [\r\n            ];\r\n            let selectedRecord = {};\r\n\r\n             if (operation === \"create\" || operation === \"update\") {\r\n\r\n                // urlArray.push(rsapi.post(\"clientcategory/getClientCategory\", {\r\n                //     \"userinfo\": userInfo\r\n                // }));\r\n\r\n                urlArray.push(rsapi.post(\"quotation/getClientCategory\", {\r\n                    \"userinfo\": userInfo\r\n                }));\r\n\r\n                // urlArray.push(rsapi.post(\"client/getClientByCategory\", {\r\n                //     \"nclientcatcode\": selectedQuotation.nclientcatcode,\r\n                //     \"userinfo\": userInfo\r\n                // })); \r\n\r\n\r\n                urlArray.push(rsapi.post(\"projecttype/getProjectType\", {\r\n                    \"userinfo\": userInfo \r\n                    \r\n                })); \r\n         \r\n                urlArray.push(rsapi.post(\"quotation/getQuotationType\", {\r\n                    \"userinfo\": userInfo \r\n                    \r\n                })); \r\n\r\n                // urlArray.push(rsapi.post(\"productcategory/getProductCategory\", {\r\n                //     \"userinfo\": userInfo \r\n                    \r\n                // })); \r\n\r\n                urlArray.push(rsapi.post(\"quotation/getProductCategory\", {\r\n                    \"userinfo\": userInfo \r\n                    \r\n                })); \r\n\r\n                urlArray.push(rsapi.post(\"product/getProduct\", {\r\n                    \"nproductcode\": null,\r\n                    \"userinfo\": userInfo \r\n                    \r\n                })); \r\n\r\n                urlArray.push(rsapi.post(\"oem/getOEM\", {\r\n                    \"nproductcode\": null,\r\n                    \"userinfo\": userInfo \r\n                    \r\n                }));\r\n            } \r\n             if (operation === \"update\"){\r\n\r\n                urlArray.push(rsapi.post(\"quotation/getActiveQuotationById\", {\r\n                    \"userinfo\": userInfo,\r\n                    \"nquotationcode\": selectedQuotation.nquotationcode\r\n                }));\r\n\r\n                urlArray.push(rsapi.post(\"quotation/getSelectedClientDetail\", {\r\n                    \"userinfo\": userInfo,\r\n                    \"nclientcode\": selectedQuotation.nclientcode\r\n                }));\r\n\r\n                urlArray.push(rsapi.post(\"client/getClientByCategory\", {\r\n                    \"nclientcatcode\": selectedQuotation.nclientcatcode,\r\n                    \"userinfo\": userInfo\r\n                })); \r\n\r\n            }\r\n\r\n            Axios.all(urlArray)\r\n                .then(response => {\r\n\r\n               \r\n                let testData = {};\r\n\r\n                let ClientCategory,Client,ProjectType,ProjectMaster,sclientsiteaddress,\r\n                    QuotationType,Product,ProductCategory,OEM,ClientSite,ClientContact;\r\n                \r\n\r\n              if (operation === \"create\") {\r\n                   \r\n                   \r\n                     ClientCategory = constructOptionList(response[0].data || [], \"nclientcatcode\", \"sclientcatname\", false, false, true).get(\"OptionList\");\r\n                   \r\n              //       Client = constructOptionList(response[1].data || [], \"nclientcode\", \"sclientname\", false, false, true).get(\"OptionList\");\r\n\r\n                     ProjectType = constructOptionList(response[1].data || [], \"nprojecttypecode\", \"sprojecttypename\", false, false, true).get(\"OptionList\");\r\n                     QuotationType = constructOptionList(response[2].data || [], \"nquotationtypecode\", \"squotationname\", false, false, true).get(\"OptionList\");\r\n\r\n                    selectedRecord[\"dquotationdate\"] = new Date();\r\n                    ProductCategory = constructOptionList(response[3].data || [], \"nproductcatcode\", \"sproductcatname\", false, false, true).get(\"OptionList\");\r\n                    OEM = constructOptionList(response[5].data || [], \"noemcode\", \"soemname\", false, false, true).get(\"OptionList\");\r\n                    // Product = constructOptionList(response[5].data.Product || [], \"nproductcode\", \"sproductname\", false, false, true).get(\"OptionList\");\r\n\r\n                    // selectedRecord[\"dquotationdate\"] = formatInputDate(new Date(), true);\r\n                     \r\n\r\n                }else if (operation === \"update\") {\r\n                    \r\n                    const editData = response[6].data.SelectedQuotation;\r\n                    // ProjectMaster=response[5].data.SelectedQuotation;\r\n\r\n                    // sclientsiteaddress = editData.sclientsiteaddress;\r\n                    selectedRecord[\"sclientsiteaddress\"]=editData.sclientsiteaddress;\r\n                    // selectedRecord[\"sinvoiceaddress\"] = editData.sinvoiceaddress;\r\n                    // selectedRecord[\"sprojecttitle\"] = editData.sprojecttitle;\r\n                    selectedRecord[\"sdescription\"] = editData.sdescription;\r\n                    selectedRecord[\"sdeviationremarks\"] = editData.sdeviationremarks;\r\n                    // selectedRecord[\"suserrolename\"] = editData.suserrolename;\r\n                    // selectedRecord[\"susername\"] = editData.susername;\r\n                    // selectedRecord[\"nuserrolecode\"] = editData.nuserrolecode;\r\n                    // selectedRecord[\"nusercode\"] = editData.nusercode;\r\n                    selectedRecord[\"soem\"] = editData.soem;\r\n                    selectedRecord[\"squotationleadtime\"] = editData.squotationleadtime;\r\n                \r\n                    selectedRecord = {...selectedRecord}\r\n\r\n           const ClientCategoryMap = constructOptionList(response[0].data || [], \"nclientcatcode\", \"sclientcatname\", false, false, true);\r\n           const ClientMap = constructOptionList(response[8].data.Client || [], \"nclientcode\", \"sclientname\", false, false, true);\r\n            // ProjectType = constructOptionList(response[2].data || [], \"nprojecttypecode\", \"sprojecttypename\", false, false, true);\r\n            // QuotationType = constructOptionList(response[3].data || [], \"nquotationtypecode\", \"squotationname\", false, false, true)\r\n           const ProductCategoryMap = constructOptionList(response[3].data || [], \"nproductcatcode\", \"sproductcatname\", false, false, true);\r\n           const ProductMap = constructOptionList(response[4].data.Product || [], \"nproductcode\", \"sproductname\", false, false, true);\r\n           const OEMMap = constructOptionList(response[5].data || [], \"noemcode\", \"soemname\", false, false, true);\r\n           const ClientSiteMap= constructOptionList(response[7].data.ClientSite || [], \"nclientsitecode\",\"sclientsitename\", undefined, undefined, false);        \r\n           const ClientContactMap = constructOptionList(response[7].data.ClientContact || [], \"nclientcontactcode\",\"scontactname\", undefined, undefined, false);\r\n                          \r\n\r\n                ClientCategory = ClientCategoryMap.get(\"OptionList\");\r\n                Client = ClientMap.get(\"OptionList\");\r\n                ProductCategory = ProductCategoryMap.get(\"OptionList\");\r\n                Product = ProductMap.get(\"OptionList\");\r\n                OEM = OEMMap.get(\"OptionList\");\r\n                ClientSite = ClientSiteMap.get(\"OptionList\");\r\n                ClientContact = ClientContactMap.get(\"OptionList\");\r\n\r\n                    // selectedRecord[\"nprojecttypecode\"] = {\r\n                    //     \"value\": editData[\"nprojecttypecode\"],\r\n                    //     \"label\":  editData[\"sprojecttypename\"]\r\n                    // };\r\n\r\n                    selectedRecord[\"nclientcatcode\"] = {\r\n                        \"value\": editData[\"nclientcatcode\"],\r\n                        \"label\": editData[\"sclientcatname\"]\r\n                    };\r\n\r\n                    selectedRecord[\"nclientcode\"] = {\r\n                        \"value\": editData[\"nclientcode\"],\r\n                        \"label\": editData[\"sclientname\"]\r\n                    };\r\n                    \r\n                    // selectedRecord[\"nquotationtypecode\"] = {\r\n                    //     \"value\": editData[\"nquotationtypecode\"],\r\n                    //     \"label\": editData[\"squotationname\"]\r\n                    // };\r\n\r\n                    // selectedRecord[\"nprojectmastercode\"] = {\r\n                    //     \"value\": editData[\"nprojectmastercode\"],\r\n                    //     \"label\": editData[\"sprojectcode\"]\r\n                    // };\r\n                  \r\n                    selectedRecord[\"nproductcatcode\"] = {\r\n                        \"value\": editData[\"nproductcatcode\"],\r\n                        \"label\": editData[\"sproductcatname\"]\r\n                    };\r\n\r\n                    selectedRecord[\"nproductcode\"] = {\r\n                        \"value\": editData[\"nproductcode\"],\r\n                        \"label\": editData[\"sproductname\"]\r\n                    };\r\n\r\n                    selectedRecord[\"noemcode\"] = {\r\n                        \"value\": editData[\"noemcode\"],\r\n                        \"label\": editData[\"soemname\"]\r\n                    };\r\n\r\n                    selectedRecord[\"nclientsitecode\"] = {\r\n                        \"value\": editData[\"nclientsitecode\"],\r\n                        \"label\": editData[\"sclientsitename\"]\r\n                    };\r\n    \r\n                    selectedRecord[\"nclientcontactcode\"] = {\r\n                        \"value\": editData[\"nclientcontactcode\"],\r\n                        \"label\": editData[\"scontactname\"]\r\n                    };\r\n                // selectedRecord[\"srfwdate\"] = rearrangeDateFormat(userInfo,editData.srfwdate);\r\n                selectedRecord[\"dquotationdate\"] = rearrangeDateFormat(userInfo,editData.squotationdate);\r\n               \r\n                }\r\n                   \r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n  \r\n                            openModal: true,\r\n                            ProjectType,\r\n                            operation: operation,ClientCategory,Client,ProjectMaster,sclientsiteaddress,QuotationType,\r\n                            Product,ProductCategory,OEM,ClientSite,ClientContact,\r\n                            screenName: \"IDS_QUOTATION\",modalScreenSize:false,\r\n                            selectedRecord,\r\n                            ncontrolCode,\r\n                            testData,\r\n                            loading: false\r\n                        }\r\n                    });\r\n                })\r\n                .catch(error => {\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            loading: false\r\n                        }\r\n                    });\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    } else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                });\r\n         } else {\r\n                          \r\n                toast.warn(intl.formatMessage({id: \"IDS_SELECTDRAFTVERSION\"}));\r\n\r\n         }\r\n    }\r\n}\r\n\r\nexport const GrossQuotation = (operation, userInfo, ncontrolCode,selectedQuotation ) => {\r\n    return function (dispatch) {\r\n    //  if (operation === \"create\" || (operation === \"update\" && selectedQuotation.ntransactionstatus !== transactionStatus.RETIRED)) {\r\n                dispatch(initRequest(true));\r\n            const urlArray = [\r\n            ];\r\n            let selectedRecord = {};\r\n\r\n                urlArray.push(rsapi.post(\"discountband/getDiscountBand\", {\r\n                    \"userinfo\": userInfo\r\n                }));\r\n\r\n                urlArray.push(rsapi.post(\"vatband/getVATBand\", {\r\n                    \"userinfo\": userInfo\r\n                })); \r\n\r\n                urlArray.push(rsapi.post(\"quotation/getQuotationGrossAmount\", {\r\n                    \"nquotationcode\": selectedQuotation.nquotationcode,\r\n                    \"userinfo\": userInfo\r\n                })); \r\n\r\n            \r\n            Axios.all(urlArray)\r\n                .then(response => {\r\n\r\n                let {DiscountBand,VATBand}=[]\r\n                \r\n                DiscountBand = constructOptionList(response[0].data || [], \"ndiscountbandcode\", \"sdiscountbandname\", false, false, true).get(\"OptionList\");\r\n                VATBand = constructOptionList(response[1].data || [], \"nvatbandcode\", \"svatbandname\", false, false, true).get(\"OptionList\");\r\n                const QuotationGrossAmount= response[2].data;\r\n\r\n                if(QuotationGrossAmount[0].ndiscountpercentage >0 || QuotationGrossAmount[0].nvatpercentage >0){\r\n\r\n                   \r\n                //  selectedRecord[\"ndiscountamount\"] = QuotationGrossAmount[0].ndiscountamount; \r\n               //   selectedRecord[\"nvatamount\"] = QuotationGrossAmount[0].nvatamount; \r\n                     \r\n               selectedRecord[\"ndiscountpercentage\"]= QuotationGrossAmount[0].ndiscountpercentage;\r\n               selectedRecord[\"DiscountAmount\"] = QuotationGrossAmount[0].ndiscountamount;\r\n\r\n               selectedRecord[\"nvatpercentage\"] = QuotationGrossAmount[0].nvatpercentage;  \r\n               selectedRecord[\"VatAmount\"] = QuotationGrossAmount[0].nvatamount;\r\n               selectedRecord[\"TotalNetAmount\"]=(QuotationGrossAmount[0].ntotalgrossamount+selectedRecord[\"VatAmount\"])-selectedRecord[\"DiscountAmount\"];\r\n\r\n                   if(QuotationGrossAmount[0].ndiscountpercentage >0) {\r\n\r\n                    selectedRecord[\"ndiscountbandcode\"] = {\r\n                        \"value\": QuotationGrossAmount[0][\"ndiscountbandcode\"],\r\n                        \"label\": QuotationGrossAmount[0][\"sdiscountbandname\"]\r\n                    }\r\n                   }\r\n                    \r\n                   if(QuotationGrossAmount[0].nvatpercentage >0) {\r\n\r\n                    selectedRecord[\"nvatbandcode\"] = {\r\n                        \"value\": QuotationGrossAmount[0][\"nvatbandcode\"],\r\n                        \"label\":  QuotationGrossAmount[0][\"svatbandname\"]\r\n                      }\r\n                    }\r\n                   \r\n                }else {\r\n\r\n   /*                 selectedRecord[\"ndiscountpercentage\"]= DiscountBand[0].item.namount;\r\n                    selectedRecord[\"nvatpercentage\"] = VATBand[0].item.namount;\r\n\r\n                    selectedRecord[\"nvatbandcode\"] = {\r\n                        \"value\": VATBand[0][\"value\"],\r\n                        \"label\": VATBand[0][\"label\"]\r\n                    };\r\n\r\n                    selectedRecord[\"ndiscountbandcode\"] = {\r\n                        \"value\": DiscountBand[0][\"value\"],\r\n                        \"label\": DiscountBand[0][\"label\"]\r\n                    }; \r\n\r\n                    selectedRecord[\"DiscountAmount\"]=QuotationGrossAmount[0].ntotalgrossamount * (DiscountBand[0].item.namount/100);\r\n                    selectedRecord[\"VatAmount\"]=QuotationGrossAmount[0].ntotalgrossamount * (VATBand[0].item.namount/100);\r\n     //             selectedRecord[\"TotalNetAmount\"]=QuotationGrossAmount[0].ntotalgrossamount+(selectedRecord[\"DiscountAmount\"]-selectedRecord[\"VatAmount\"]);\r\n                    selectedRecord[\"TotalNetAmount\"]=(QuotationGrossAmount[0].ntotalgrossamount+selectedRecord[\"VatAmount\"])-selectedRecord[\"DiscountAmount\"];\r\n\r\n*/\r\n                    selectedRecord[\"ndiscountpercentage\"]= 0;\r\n                    selectedRecord[\"nvatpercentage\"] = 0;\r\n                    selectedRecord[\"nvatbandcode\"] =\"\";\r\n                    selectedRecord[\"ndiscountbandcode\"] = \"\";\r\n                    selectedRecord[\"DiscountAmount\"]=0;\r\n                    selectedRecord[\"VatAmount\"]=0;\r\n                    selectedRecord[\"TotalNetAmount\"]=QuotationGrossAmount[0].ntotalgrossamount;\r\n\r\n                }\r\n\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n  \r\n                            openChildModal: true,\r\n                            DiscountBand,modalScreenSize:false,\r\n                            operation: operation,VATBand,QuotationGrossAmount,\r\n                            screenName: \"IDS_CALCULATEPRICING\",\r\n                            selectedRecord,\r\n                            ncontrolCode,\r\n                            loading: false\r\n                        }\r\n                    });\r\n                })\r\n                .catch(error => {\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            loading: false\r\n                        }\r\n                    });\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    } else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                });\r\n        //  } else {\r\n                          \r\n        //         toast.warn(intl.formatMessage({id: \"IDS_SELECTDRAFTVERSION\"}));\r\n\r\n        //  }\r\n    }\r\n}\r\n\r\n//Quotation Record Click \r\nexport const getQuotation = (quotationItem, userInfo, masterData) => {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/quotation/getActiveQuotationById\", {\r\n            nquotationcode: quotationItem.nquotationcode,\r\n                userinfo: userInfo\r\n            })\r\n            .then(response => {\r\n                \r\n\r\n                    let masterData1  = {...masterData,\r\n\r\n                        ...response.data }\r\n\r\n                    // ...masterData,\r\n                    // ...response.data\r\n                    masterData=masterData1\r\n                sortData(masterData);\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                       // masterData,\r\n                        loading: false,\r\n                        dataState: undefined,\r\n                        masterData\r\n                        \r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                });\r\n                toast.error(error.message);\r\n            });\r\n    }\r\n}\r\n\r\nexport function getQuotationAddTestService(screenName, operation, masterData, userInfo, ncontrolCode){\r\n    return function (dispatch) {    \r\n        if (masterData.SelectedQuotation.ntransactionstatus === transactionStatus.DRAFT){     \r\n        \r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"quotation/getQuotationUnmappedTest\",{\r\n            \"nquotationcode\":masterData.SelectedQuotation[\"nquotationcode\"], \r\n            userinfo:userInfo})\r\n\r\n        .then(response=>{\r\n\r\n            let masterData1  = {...masterData,\r\n\r\n                ...response.data }\r\n                masterData=masterData1                       \r\n                dispatch({type: DEFAULT_RETURN, payload:{ \r\n                                                        QuotationTestList:response.data,\r\n                                                        masterData,modalScreenSize:false,\r\n                                                        openChildModal:true,\r\n                                                        operation, screenName, ncontrolCode,\r\n                                                        //selectedRecord, \r\n                                                        loading:false}});\r\n            })\r\n            .catch(error=>{\r\n                dispatch({type: DEFAULT_RETURN, payload: {loading:false}})\r\n                if (error.response.status === 500){\r\n                    toast.error(error.message);\r\n                } \r\n                else{               \r\n                    toast.warn(error.response.data);\r\n                }      \r\n            }) \r\n    }\r\n    else{\r\n        toast.warn(intl.formatMessage({id: \"IDS_SELECTDRAFTVERSION\"}));\r\n    }\r\n}}\r\n\r\n\r\nexport function getQuotationPricingEditService(editParam){\r\n    return function (dispatch) {    \r\n       // screenName, operation, masterData, userInfo, ncontrolCode\r\n       //console.log(\"editParam:\", editParam);\r\n        if (editParam.masterData.SelectedQuotation.ntransactionstatus === transactionStatus.DRAFT){     \r\n        \r\n        dispatch(initRequest(true));\r\n        const urlArray = [\r\n        ];\r\n        \r\n\r\n            urlArray.push(rsapi.post(\"discountband/getDiscountBand\", {\r\n                \"userinfo\": editParam.userInfo\r\n            }));\r\n\r\n            urlArray.push( rsapi.post(\"quotation/getQuotationPrice\",{\"nquotationcode\":editParam.masterData.SelectedQuotation[\"nquotationcode\"], \r\n            \"nquotationtestcode\":editParam.editRow ? editParam.editRow.nquotationtestcode :null,\r\n            userinfo:editParam.userInfo}));\r\n\r\n        \r\n        Axios.all(urlArray)\r\n        .then(response=>{\r\n\r\n            let {DiscountBand}=[];\r\n            let selectedRecord =[];\r\n\r\n            DiscountBand = constructOptionList(response[0].data || [], \"ndiscountbandcode\", \"sdiscountbandname\", false, false, true).get(\"OptionList\");\r\n            \r\n            // selectedRecord[\"namount\"]= response[0].data[0].namount;\r\n            // selectedRecord[\"ndiscountbandcode\"]= response[0].data[0].ndiscountbandcode;\r\n\r\n                \r\n                if (editParam.editRow){\r\n\r\n                    selectedRecord.push(response[1].data[\"SelectedQuotationPrice\"]);\r\n                    selectedRecord[0][\"ndiscountbandcode\"]=  {...selectedRecord[0][\"ndiscountbandcode\"],\r\n    \r\n                            label: selectedRecord[0].sdiscountbandname,\r\n                            value: selectedRecord[0].ndiscountbandcode }\r\n                  \r\n                }\r\n                else{  \r\n\r\n                    selectedRecord = sortData(response[1].data[\"QuotationPrice\"]);   \r\n                    response[1].data[\"QuotationPrice\"].forEach((item, index) => {\r\n                \r\n                        selectedRecord[index][\"ndiscountbandcode\"]=  {...selectedRecord[index][\"ndiscountbandcode\"],\r\n    \r\n                            label: item.sdiscountbandname,\r\n                            value: item.ndiscountbandcode\r\n                            \r\n                        }\r\n                    });\r\n                }\r\n                dispatch({type: DEFAULT_RETURN, payload:{//pricingTestList:testList, \r\n                                                        //testPriceList:response.data[\"TestPrice\"],\r\n                                                        openChildModal:true,modalScreenSize:true,\r\n                                                        operation:editParam.operation,\r\n                                                        screenName:editParam.screenName, \r\n                                                        ncontrolCode:editParam.ncontrolCode,\r\n                                                        selectedRecord, \r\n                                                        selectedId:editParam.editRow ? editParam.editRow.nquotationtestcode :null,\r\n                                                        loading:false,\r\n                                                        quotationDataState:editParam.quotationDataState,\r\n                                                        DiscountBand}});\r\n            })\r\n            .catch(error=>{\r\n                dispatch({type: DEFAULT_RETURN, payload: {loading:false}})\r\n                if (error.response.status === 500){\r\n                    toast.error(error.message);\r\n                } \r\n                else{               \r\n                    toast.warn(error.response.data); \r\n                }      \r\n            }) \r\n    }\r\n    else{\r\n        toast.warn(intl.formatMessage({id: \"IDS_SELECTDRAFTVERSION\"}));\r\n    }\r\n}}\r\n\r\n"]},"metadata":{},"sourceType":"module"}