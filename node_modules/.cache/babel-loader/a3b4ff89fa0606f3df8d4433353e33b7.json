{"ast":null,"code":"var _jsxFileName = \"E:\\\\WorkingFolder\\\\React_Postgres\\\\ALPD\\\\branches\\\\SOURCE-513-FINAL\\\\SOURCE-513-ALPD-4991\\\\QuaLISWeb\\\\src\\\\pages\\\\storagemanagement\\\\SampleProcessType.jsx\";\nimport { process } from '@progress/kendo-data-query';\nimport React from 'react';\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\nimport { projectytpe, getSampleType, getActiveSampleProcessTypeById } from '../../actions';\nimport { connect } from 'react-redux';\nimport { injectIntl } from 'react-intl';\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\nimport { showEsign, getControlMap, Lims_JSON_stringify } from '../../components/CommonScript';\nimport { ListWrapper } from '../../components/client-group.styles';\nimport DataGrid from '../../components/data-grid/data-grid.component';\nimport Esign from '../audittrail/Esign';\nimport AddSampleProcessType from './AddSampleProcessType';\nimport { callService, updateStore, crudMaster, validateEsignCredential } from '../../actions';\nimport { toast } from 'react-toastify';\n\nconst mapStateToProps = state => {\n  return {\n    Login: state.Login\n  };\n};\n\nclass SampleProcessType extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.dataStateChange = event => {\n      this.setState({\n        dataResult: process(this.state.data, event.dataState),\n        dataState: event.dataState\n      });\n    };\n\n    this.reloadData = () => {\n      const inputParam = {\n        inputData: {\n          \"userinfo\": this.props.Login.userInfo\n        },\n        classUrl: this.props.Login.inputParam.classUrl,\n        methodUrl: this.props.Login.inputParam.methodUrl,\n        userInfo: this.props.Login.userInfo,\n        displayName: this.props.Login.displayName\n      };\n      this.props.callService(inputParam);\n    };\n\n    this.onComboChange = (comboData, fieldName) => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (fieldName === \"sprojecttypename\") {\n        selectedRecord[fieldName] = comboData;\n        delete selectedRecord[\"sproductname\"];\n        delete selectedRecord[\"stubename\"];\n        delete selectedRecord[\"sprocesstypename\"];\n        this.props.getSampleType(this.state.selectedRecord.sprojecttypename.value, this.state.selectedRecord.sprojecttypename.label, this.props.Login.userInfo);\n      } else {\n        selectedRecord[fieldName] = comboData;\n        this.setState({\n          selectedRecord\n        });\n      }\n    };\n\n    this.onInputOnChange = (event, fieldName) => {\n      const selectedRecord = this.state.selectedRecord || {};\n      const values = event.target.value;\n      let parsedvalues;\n      parsedvalues = parseInt(values, 10);\n\n      if (fieldName === \"processtime\" || fieldName === \"gracetime\") {\n        if (/^\\d*?$/.test(values) && values !== \"\") {\n          selectedRecord[fieldName] = parsedvalues;\n        } else {\n          selectedRecord[fieldName] = [];\n        }\n      } else if (fieldName === \"executionorder\") {\n        if (/^\\d*?$/.test(values) && values !== \"\") {\n          selectedRecord[fieldName] = parsedvalues;\n        } else {\n          selectedRecord[fieldName] = [];\n        }\n      } else {\n        selectedRecord[event.target.name] = event.target.value;\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.closeModal = () => {\n      let loadEsign = this.props.Login.loadEsign;\n      let openModal = this.props.Login.openModal;\n      let selectedRecord = this.props.Login.selectedRecord;\n      let controlButton = this.props.Login.controlButton;\n      let selectedId = this.props.Login.selectedId;\n      let processtypeList;\n      let projecttypeList;\n      let sampletypeList;\n      let collectiontubeList;\n\n      if (this.props.Login.loadEsign) {\n        if (this.props.Login.operation === \"delete\") {\n          loadEsign = false;\n          openModal = false;\n          selectedRecord = {};\n        } else {\n          loadEsign = false;\n          selectedRecord['esignpassword'] = \"\";\n          selectedRecord['esignreason'] = \"\";\n          selectedRecord['esigncomments'] = \"\";\n        }\n      } else {\n        openModal = false;\n        selectedRecord = {};\n        controlButton = [];\n        processtypeList = [];\n        projecttypeList = [];\n        sampletypeList = [];\n        collectiontubeList = [];\n      }\n\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          openModal,\n          loadEsign,\n          selectedRecord,\n          selectedId,\n          controlButton\n        }\n      };\n      this.props.updateStore(updateInfo);\n      this.setState({\n        selectedRecord: selectedRecord,\n        processtypeList: processtypeList,\n        projecttypeList: projecttypeList,\n        sampletypeList: sampletypeList,\n        collectiontubeList: collectiontubeList\n      });\n    };\n\n    this.validateEsign = () => {\n      const inputParam = {\n        inputData: {\n          \"userinfo\": { ...this.props.Login.userInfo,\n            sreason: this.state.selectedRecord[\"esigncomments\"],\n            nreasoncode: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].value,\n            spredefinedreason: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].label\n          },\n          password: this.state.selectedRecord[\"esignpassword\"]\n        },\n        screenData: this.props.Login.screenData\n      };\n      this.props.validateEsignCredential(inputParam, \"openModal\");\n    };\n\n    this.onSaveClick = (saveType, formRef) => {\n      if (this.props.Login.operation === \"create\") {\n        this.onSaveSampleProcessType(saveType, formRef);\n      } else if (this.props.Login.operation === \"update\") {\n        this.updateSampleProcessType(saveType, formRef);\n      }\n    };\n\n    this.onSaveSampleProcessType = (saveType, formRef) => {\n      let selectedRecord = this.state.selectedRecord;\n\n      if (selectedRecord !== undefined) {\n        const inputParam = {\n          nformcode: this.props.Login.userInfo.nformcode,\n          classUrl: \"sampleprocesstype\",\n          methodUrl: \"SampleProcessType\",\n          inputData: {\n            userinfo: { ...this.props.Login.userInfo,\n              sformname: Lims_JSON_stringify(this.props.Login.userInfo.sformname),\n              smodulename: Lims_JSON_stringify(this.props.Login.userInfo.smodulename)\n            },\n            ncontrolCode: this.props.Login.userInfo.nformcode,\n            tubename: this.state.selectedRecord.stubename.label,\n            tubevalue: this.state.selectedRecord.stubename.value,\n            projecttypename: this.state.selectedRecord.sprojecttypename.label,\n            projecttypevalue: this.state.selectedRecord.sprojecttypename.value,\n            productname: this.state.selectedRecord.sproductname.label,\n            productvalue: this.state.selectedRecord.sproductname.value,\n            processtypename: this.state.selectedRecord.sprocesstypename.label,\n            processtypevalue: this.state.selectedRecord.sprocesstypename.value,\n            processtime: this.state.selectedRecord.processtime,\n            processperiodtime: this.state.selectedRecord.processperiodtime.value,\n            graceperiodtime: this.state.selectedRecord.graceperiodtime.value,\n            gracetime: this.state.selectedRecord.gracetime,\n            executionorder: this.state.selectedRecord.executionorder,\n            sdescription: this.state.selectedRecord.sdescription,\n            commonPeriod: this.state.selectedRecord.graceperiodtime.label,\n            operation: \"create\"\n          },\n          operation: \"create\",\n          saveType,\n          formRef\n        };\n        const masterData = this.props.Login.masterData;\n        this.props.crudMaster(inputParam, masterData, \"openModal\");\n      }\n    };\n\n    this.updateSampleProcessType = (saveType, formRef) => {\n      const inputParam = {\n        nformcode: this.props.Login.userInfo.nformcode,\n        classUrl: \"sampleprocesstype\",\n        methodUrl: \"SampleProcessType\",\n        selectedRecord: { ...this.state.selectedRecord\n        },\n        selectedId: this.state.selectedRecord.nsampleprocesstypecode,\n        inputData: {\n          userinfo: { ...this.props.Login.userInfo,\n            sformname: Lims_JSON_stringify(this.props.Login.userInfo.sformname),\n            smodulename: Lims_JSON_stringify(this.props.Login.userInfo.smodulename)\n          },\n          ncontrolCode: this.props.Login.userInfo.nformcode,\n          nsampleprocesstypecode: this.state.selectedRecord.nsampleprocesstypecode,\n          tubename: this.state.selectedRecord.stubename.label,\n          tubevalue: this.state.selectedRecord.stubename.value,\n          projecttypename: this.state.selectedRecord.sprojecttypename.label,\n          projecttypevalue: this.state.selectedRecord.sprojecttypename.value,\n          productname: this.state.selectedRecord.sproductname.label,\n          productvalue: this.state.selectedRecord.sproductname.value,\n          processtypename: this.state.selectedRecord.sprocesstypename.label,\n          processtypevalue: this.state.selectedRecord.sprocesstypename.value,\n          processtime: this.state.selectedRecord.processtime,\n          gracetime: this.state.selectedRecord.gracetime,\n          executionorder: this.state.selectedRecord.executionorder,\n          sdescription: this.state.selectedRecord.sdescription,\n          commonPeriod: this.state.selectedRecord.graceperiodtime.label,\n          operation: \"update\"\n        },\n        operation: \"update\",\n        saveType,\n        formRef\n      };\n      const masterData = this.props.Login.masterData;\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData\n            },\n            saveType\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, masterData, \"openModal\");\n      }\n    };\n\n    this.deleteRecord = deleteParam => {\n      const inputParam = {\n        classUrl: this.props.Login.inputParam.classUrl,\n        methodUrl: this.props.Login.inputParam.methodUrl,\n        displayName: this.props.Login.inputParam.displayName,\n        inputData: {\n          [this.props.Login.inputParam.methodUrl.toLowerCase()]: deleteParam.selectedRecord,\n          //.dataItem,\n          \"userinfo\": this.props.Login.userInfo\n        },\n        operation: deleteParam.operation,\n        dataState: this.state.dataState,\n        selectedRecord: deleteParam.selectedRecord\n      };\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, deleteParam.ncontrolCode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData: this.props.Login.masterData\n            },\n            openModal: true,\n            screenName: this.props.intl.formatMessage({\n              id: this.props.Login.displayName\n            }),\n            operation: deleteParam.operation\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\n      }\n    };\n\n    this.formRef = React.createRef();\n    this.extractedColumnList = [];\n    const dataState = {\n      skip: 0,\n      take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n    };\n    this.state = {\n      data: [],\n      masterStatus: \"\",\n      error: \"\",\n      selectedRecord: {},\n      dataResult: [],\n      dataState: dataState,\n      userRoleControlRights: [],\n      controlMap: new Map()\n    };\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\n      toast.warn(props.Login.masterStatus);\n      props.Login.masterStatus = \"\";\n    }\n\n    if (props.Login.error !== state.error) {\n      toast.error(props.Login.error);\n      props.Login.error = \"\";\n    }\n\n    return null;\n  }\n\n  render() {\n    let primaryKeyField = \"\";\n\n    if (this.props.Login.inputParam !== undefined) {\n      this.extractedColumnList = [{\n        \"mandatory\": true,\n        \"idsName\": \"IDS_PROJECTTYPE\",\n        \"dataField\": \"sprojecttypename\",\n        \"mandatoryLabel\": \"IDS_SELECT\",\n        \"controlType\": \"selectbox\"\n      }, {\n        \"mandatory\": true,\n        \"idsName\": \"IDS_SAMPLETYPE\",\n        \"dataField\": \"sproductname\",\n        \"mandatoryLabel\": \"IDS_SELECT\",\n        \"controlType\": \"selectbox\"\n      }, {\n        \"mandatory\": true,\n        \"idsName\": \"IDS_COLLECTIONTUBETYPEPROCESSTYPE\",\n        \"dataField\": \"stubename\",\n        \"mandatoryLabel\": \"IDS_SELECT\",\n        \"controlType\": \"selectbox\",\n        \"width\": 180\n      }, {\n        \"mandatory\": true,\n        \"idsName\": \"IDS_PROCESSTYPENAME\",\n        \"dataField\": \"sprocesstypename\",\n        \"mandatoryLabel\": \"IDS_SELECT\",\n        \"controlType\": \"selectbox\"\n      }, {\n        \"mandatory\": true,\n        \"idsName\": \"IDS_PROCESSTIME\",\n        \"dataField\": \"nprocesstimeresult\",\n        \"mandatoryLabel\": \"IDS_ENTER\",\n        \"controlType\": \"selectbox\"\n      }, {\n        \"mandatory\": true,\n        \"idsName\": \"IDS_GRACETIME\",\n        \"dataField\": \"ngracetimeresult\",\n        \"mandatoryLabel\": \"IDS_ENTER\",\n        \"controlType\": \"selectbox\"\n      }, {\n        \"mandatory\": true,\n        \"idsName\": \"IDS_EXECTIONORDER\",\n        \"dataField\": \"nexecutionorder\",\n        \"mandatoryLabel\": \"IDS_ENTER\",\n        \"controlType\": \"selectbox\"\n      }, {\n        \"mandatory\": true,\n        \"idsName\": \"IDS_DESCRIPTION\",\n        \"dataField\": \"sdescription\",\n        \"mandatoryLabel\": \"IDS_ENTER\",\n        \"controlType\": \"selectbox\"\n      }];\n      primaryKeyField = \"nsampleprocesstypecode\";\n    }\n\n    let mandatoryFields = [];\n    mandatoryFields.push({\n      \"mandatory\": true,\n      \"idsName\": \"IDS_PROJECTTYPE\",\n      \"dataField\": \"sprojecttypename\",\n      \"mandatoryLabel\": \"IDS_SELECT\",\n      \"controlType\": \"selectbox\"\n    }, {\n      \"mandatory\": true,\n      \"idsName\": \"IDS_SAMPLETYPE\",\n      \"dataField\": \"sproductname\",\n      \"mandatoryLabel\": \"IDS_SELECT\",\n      \"controlType\": \"selectbox\"\n    }, {\n      \"mandatory\": true,\n      \"idsName\": \"IDS_COLLECTIONTUBETYPEPROCESSTYPE\",\n      \"dataField\": \"stubename\",\n      \"mandatoryLabel\": \"IDS_SELECT\",\n      \"controlType\": \"selectbox\"\n    }, {\n      \"mandatory\": true,\n      \"idsName\": \"IDS_PROCESSTYPENAME\",\n      \"dataField\": \"sprocesstypename\",\n      \"mandatoryLabel\": \"IDS_SELECT\",\n      \"controlType\": \"selectbox\"\n    }, {\n      \"mandatory\": true,\n      \"idsName\": \"IDS_PROCESSTIME\",\n      \"dataField\": \"processtime\",\n      \"mandatoryLabel\": \"IDS_ENTER\",\n      \"controlType\": \"selectbox\"\n    }, {\n      \"mandatory\": true,\n      \"idsName\": \"IDS_GRACETIME\",\n      \"dataField\": \"gracetime\",\n      \"mandatoryLabel\": \"IDS_ENTER\",\n      \"controlType\": \"selectbox\"\n    }, {\n      \"mandatory\": true,\n      \"idsName\": \"IDS_EXECTIONORDER\",\n      \"dataField\": \"executionorder\",\n      \"mandatoryLabel\": \"IDS_ENTER\",\n      \"controlType\": \"selectbox\"\n    }, {\n      \"mandatory\": true,\n      \"idsName\": \"IDS_PROCESSPERIODTIME\",\n      \"dataField\": \"processperiodtime\",\n      \"mandatoryLabel\": \"IDS_ENTER\",\n      \"controlType\": \"selectbox\"\n    }, {\n      \"mandatory\": true,\n      \"idsName\": \"IDS_GRACEPERIODTIME\",\n      \"dataField\": \"graceperiodtime\",\n      \"mandatoryLabel\": \"IDS_ENTER\",\n      \"controlType\": \"selectbox\"\n    });\n    const addsampleprocesstypeId = this.state.controlMap.has(\"AddSampleProcessType\") && this.state.controlMap.get(\"AddSampleProcessType\").ncontrolcode;\n    const editsampleprocesstypeId = this.state.controlMap.has(\"EditSampleProcessType\") && this.state.controlMap.get(\"EditSampleProcessType\").ncontrolcode;\n    const deletesampleprocesstypeId = this.state.controlMap.has(\"DeleteSampleProcessType\") && this.state.controlMap.get(\"DeleteSampleProcessType\").ncontrolcode;\n    const editParam = {\n      screenName: this.props.Login.inputParam && this.props.Login.inputParam.displayName && this.props.intl.formatMessage({\n        id: this.props.Login.inputParam.displayName\n      }),\n      primaryKeyField: \"nsampleprocesstypecode\",\n      operation: \"update\",\n      inputParam: this.props.Login.inputParam,\n      userInfo: this.props.Login.userInfo,\n      ncontrolCode: editsampleprocesstypeId\n    };\n    const deleteParam = {\n      operation: \"delete\"\n    };\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(ListWrapper, {\n      className: \"client-list-content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(DataGrid, {\n      primaryKeyField: primaryKeyField,\n      selectedId: this.props.Login.selectedId,\n      data: this.state.data,\n      dataResult: this.state.dataResult || [],\n      dataState: this.state.dataState,\n      dataStateChange: this.dataStateChange,\n      extractedColumnList: this.extractedColumnList,\n      controlMap: this.state.controlMap,\n      userRoleControlRights: this.state.userRoleControlRights,\n      inputParam: this.props.Login.inputParam,\n      userInfo: this.props.Login.userInfo,\n      fetchRecord: this.props.getActiveSampleProcessTypeById,\n      addRecord: () => this.props.projectytpe(addsampleprocesstypeId, this.props.Login.userInfo) || [],\n      deleteRecord: this.deleteRecord,\n      reloadData: this.reloadData,\n      editParam: editParam,\n      deleteParam: deleteParam,\n      scrollable: \"scrollable\",\n      gridHeight: \"600px\",\n      isActionRequired: true,\n      isToolBarRequired: true,\n      pageable: true,\n      groupable: false,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 17\n      }\n    })), this.props.Login.openModal && /*#__PURE__*/React.createElement(SlideOutModal, {\n      show: this.props.Login.openModal,\n      closeModal: this.closeModal,\n      operation: this.props.Login.operation,\n      inputParam: this.props.Login.inputParam,\n      screenName: this.props.Login.screenName,\n      onSaveClick: this.onSaveClick,\n      esign: this.props.Login.loadEsign,\n      validateEsign: this.validateEsign,\n      masterStatus: this.props.Login.masterStatus,\n      selectedRecord: this.state.selectedRecord || {},\n      updateStore: this.props.updateStore,\n      mandatoryFields: mandatoryFields,\n      addComponent: this.props.Login.loadEsign ? /*#__PURE__*/React.createElement(Esign, {\n        operation: this.props.Login.operation,\n        onInputOnChange: this.onInputOnChange,\n        inputParam: this.props.Login.inputParam,\n        selectedRecord: this.state.selectedRecord || {},\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 25\n        }\n      }) : /*#__PURE__*/React.createElement(AddSampleProcessType, {\n        selectedRecord: this.state.selectedRecord || {},\n        onInputOnChange: this.onInputOnChange,\n        onComboChange: this.onComboChange,\n        projecttypeList: this.state.projecttypeList || [],\n        sampletypeList: this.state.sampletypeList || [],\n        collectiontubeList: this.state.collectiontubeList || [],\n        processtypeList: this.state.processtypeList || [],\n        periodList: this.state.periodList || [],\n        inputParam: this.props.Login.inputParam,\n        actionType: this.state.actionType,\n        operation: this.props.Login.operation,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 27\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 17\n      }\n    }));\n  }\n\n  componentDidUpdate(previousProps) {\n    if (this.props.Login.masterData !== previousProps.Login.masterData) {\n      if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\n        const userRoleControlRights = [];\n\n        if (this.props.Login.userRoleControlRights) {\n          this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item => userRoleControlRights.push(item.ncontrolcode));\n        }\n\n        const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode);\n        this.setState({\n          userRoleControlRights,\n          controlMap,\n          data: this.props.Login.masterData,\n          dataResult: process(this.props.Login.masterData, this.state.dataState)\n        });\n      } else {\n        //ALPD-4699Sample Process mapping-->While try to delete the already used records in other Modules alert validation captured Wrongly \" This Record is Used in Storage Sample Processing\"\"\n        let {\n          dataState\n        } = this.state;\n\n        if (dataState === undefined) {\n          dataState = {\n            skip: 0,\n            take: this.state.dataState.take\n          };\n        }\n\n        if (this.state.dataResult.data) {\n          //if(this.state.dataResult.data.length >0 && this.props.Login.operation !=='update' && this.props.Login.operation ==='create'){\n          if (this.state.dataResult.data.length === 1) {\n            //let skipcount=this.state.dataState.skip>0?(this.props.Login.masterData.length-this.state.dataState.take):\n            let skipcount = this.state.dataState.skip > 0 ? this.state.dataState.skip - this.state.dataState.take : this.state.dataState.skip;\n            dataState = {\n              skip: skipcount,\n              take: this.state.dataState.take\n            };\n          }\n        }\n\n        this.setState({\n          data: this.props.Login.masterData,\n          isOpen: false,\n          selectedRecord: this.props.Login.selectedRecord,\n          dataResult: process(this.props.Login.masterData, dataState),\n          dataState\n        }); //     let { dataState } = this.state;\n        // if (this.props.Login.dataState === undefined) {\n        //     dataState = { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 }\n        // }\n        // this.setState({\n        //     data: this.props.Login.masterData,\n        //     isOpen: false,\n        //     selectedRecord: this.props.Login.selectedRecord,\n        //     dataResult: process(this.props.Login.masterData, dataState),\n        //     dataState\n        // });\n      }\n    } else if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\n      this.setState({\n        selectedRecord: this.props.Login.selectedRecord\n      });\n    }\n\n    if (this.props.Login.projecttypeList !== previousProps.Login.projecttypeList) {\n      this.setState({\n        projecttypeList: this.props.Login.projecttypeList\n      });\n    }\n\n    if (this.props.Login.sampletypeList !== previousProps.Login.sampletypeList) {\n      this.setState({\n        sampletypeList: this.props.Login.sampletypeList\n      });\n    }\n\n    if (this.props.Login.collectiontubeList !== previousProps.Login.collectiontubeList) {\n      this.setState({\n        collectiontubeList: this.props.Login.collectiontubeList\n      });\n    }\n\n    if (this.props.Login.processtypeList !== previousProps.Login.processtypeList) {\n      this.setState({\n        processtypeList: this.props.Login.processtypeList\n      });\n    }\n\n    if (this.props.Login.periodList !== previousProps.Login.periodList) {\n      this.setState({\n        periodList: this.props.Login.periodList\n      });\n    }\n  }\n\n}\n\nexport default connect(mapStateToProps, {\n  updateStore,\n  callService,\n  crudMaster,\n  validateEsignCredential,\n  projectytpe,\n  getSampleType,\n  getActiveSampleProcessTypeById\n})(injectIntl(SampleProcessType));","map":{"version":3,"sources":["E:/WorkingFolder/React_Postgres/ALPD/branches/SOURCE-513-FINAL/SOURCE-513-ALPD-4991/QuaLISWeb/src/pages/storagemanagement/SampleProcessType.jsx"],"names":["process","React","SlideOutModal","projectytpe","getSampleType","getActiveSampleProcessTypeById","connect","injectIntl","DEFAULT_RETURN","showEsign","getControlMap","Lims_JSON_stringify","ListWrapper","DataGrid","Esign","AddSampleProcessType","callService","updateStore","crudMaster","validateEsignCredential","toast","mapStateToProps","state","Login","SampleProcessType","Component","constructor","props","dataStateChange","event","setState","dataResult","data","dataState","reloadData","inputParam","inputData","userInfo","classUrl","methodUrl","displayName","onComboChange","comboData","fieldName","selectedRecord","sprojecttypename","value","label","onInputOnChange","values","target","parsedvalues","parseInt","test","name","closeModal","loadEsign","openModal","controlButton","selectedId","processtypeList","projecttypeList","sampletypeList","collectiontubeList","operation","updateInfo","typeName","validateEsign","sreason","nreasoncode","spredefinedreason","password","screenData","onSaveClick","saveType","formRef","onSaveSampleProcessType","updateSampleProcessType","undefined","nformcode","userinfo","sformname","smodulename","ncontrolCode","tubename","stubename","tubevalue","projecttypename","projecttypevalue","productname","sproductname","productvalue","processtypename","sprocesstypename","processtypevalue","processtime","processperiodtime","graceperiodtime","gracetime","executionorder","sdescription","commonPeriod","masterData","nsampleprocesstypecode","userRoleControlRights","deleteRecord","deleteParam","toLowerCase","screenName","intl","formatMessage","id","createRef","extractedColumnList","skip","take","settings","masterStatus","error","controlMap","Map","getDerivedStateFromProps","warn","render","primaryKeyField","mandatoryFields","push","addsampleprocesstypeId","has","get","ncontrolcode","editsampleprocesstypeId","deletesampleprocesstypeId","editParam","periodList","actionType","componentDidUpdate","previousProps","Object","map","item","length","skipcount","isOpen"],"mappings":"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","sourcesContent":["import { process } from '@progress/kendo-data-query';\r\nimport React from 'react'\r\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\r\nimport { projectytpe, getSampleType, getActiveSampleProcessTypeById } from '../../actions';\r\nimport { connect } from 'react-redux';\r\nimport { injectIntl } from 'react-intl';\r\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\r\nimport { showEsign, getControlMap, Lims_JSON_stringify } from\r\n    '../../components/CommonScript';\r\nimport { ListWrapper } from '../../components/client-group.styles';\r\nimport DataGrid from '../../components/data-grid/data-grid.component';\r\nimport Esign from '../audittrail/Esign';\r\nimport AddSampleProcessType from './AddSampleProcessType';\r\nimport { callService, updateStore, crudMaster, validateEsignCredential } from '../../actions';\r\nimport { toast } from 'react-toastify';\r\n\r\n\r\n\r\n\r\nconst mapStateToProps = state => {\r\n    return ({ Login: state.Login })\r\n}\r\n\r\nclass SampleProcessType extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.formRef = React.createRef();\r\n        this.extractedColumnList = [];\r\n\r\n        const dataState = {\r\n            skip: 0,\r\n            take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5,\r\n        };\r\n\r\n        this.state = {\r\n            data: [], masterStatus: \"\", error: \"\", selectedRecord: {},\r\n            dataResult: [],\r\n            dataState: dataState,\r\n            userRoleControlRights: [],\r\n            controlMap: new Map()\r\n        };\r\n\r\n    }\r\n\r\n    static getDerivedStateFromProps(props, state) {\r\n\r\n        if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\r\n            toast.warn(props.Login.masterStatus);\r\n            props.Login.masterStatus = \"\";\r\n        }\r\n\r\n        if (props.Login.error !== state.error) {\r\n            toast.error(props.Login.error)\r\n            props.Login.error = \"\";\r\n        }\r\n        return null;\r\n    }\r\n\r\n\r\n    dataStateChange = (event) => {\r\n        this.setState({\r\n            dataResult: process(this.state.data, event.dataState),\r\n            dataState: event.dataState\r\n        });\r\n    }\r\n\r\n\r\n\r\n    reloadData = () => {\r\n        const inputParam = {\r\n            inputData: { \"userinfo\": this.props.Login.userInfo },\r\n            classUrl: this.props.Login.inputParam.classUrl,\r\n            methodUrl: this.props.Login.inputParam.methodUrl,\r\n            userInfo: this.props.Login.userInfo,\r\n            displayName: this.props.Login.displayName\r\n        };\r\n\r\n        this.props.callService(inputParam);\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        let primaryKeyField = \"\";\r\n\r\n        if (this.props.Login.inputParam !== undefined) {\r\n\r\n            this.extractedColumnList = [\r\n                { \"mandatory\": true, \"idsName\": \"IDS_PROJECTTYPE\", \"dataField\": \"sprojecttypename\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n                { \"mandatory\": true, \"idsName\": \"IDS_SAMPLETYPE\", \"dataField\": \"sproductname\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n                { \"mandatory\": true, \"idsName\": \"IDS_COLLECTIONTUBETYPEPROCESSTYPE\", \"dataField\": \"stubename\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\", \"width\": 180 },\r\n                { \"mandatory\": true, \"idsName\": \"IDS_PROCESSTYPENAME\", \"dataField\": \"sprocesstypename\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n                { \"mandatory\": true, \"idsName\": \"IDS_PROCESSTIME\", \"dataField\": \"nprocesstimeresult\", \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"selectbox\" },\r\n                { \"mandatory\": true, \"idsName\": \"IDS_GRACETIME\", \"dataField\": \"ngracetimeresult\", \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"selectbox\" },\r\n                { \"mandatory\": true, \"idsName\": \"IDS_EXECTIONORDER\", \"dataField\": \"nexecutionorder\", \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"selectbox\" },\r\n                { \"mandatory\": true, \"idsName\": \"IDS_DESCRIPTION\", \"dataField\": \"sdescription\", \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"selectbox\" },\r\n\r\n            ]\r\n\r\n            primaryKeyField = \"nsampleprocesstypecode\";\r\n        }\r\n        let mandatoryFields = [];\r\n        mandatoryFields.push(\r\n            { \"mandatory\": true, \"idsName\": \"IDS_PROJECTTYPE\", \"dataField\": \"sprojecttypename\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n            { \"mandatory\": true, \"idsName\": \"IDS_SAMPLETYPE\", \"dataField\": \"sproductname\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n            { \"mandatory\": true, \"idsName\": \"IDS_COLLECTIONTUBETYPEPROCESSTYPE\", \"dataField\": \"stubename\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n            { \"mandatory\": true, \"idsName\": \"IDS_PROCESSTYPENAME\", \"dataField\": \"sprocesstypename\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n            { \"mandatory\": true, \"idsName\": \"IDS_PROCESSTIME\", \"dataField\": \"processtime\", \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"selectbox\" },\r\n            { \"mandatory\": true, \"idsName\": \"IDS_GRACETIME\", \"dataField\": \"gracetime\", \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"selectbox\" },\r\n            { \"mandatory\": true, \"idsName\": \"IDS_EXECTIONORDER\", \"dataField\": \"executionorder\", \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"selectbox\" },\r\n            { \"mandatory\": true, \"idsName\": \"IDS_PROCESSPERIODTIME\", \"dataField\": \"processperiodtime\", \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"selectbox\" },\r\n            { \"mandatory\": true, \"idsName\": \"IDS_GRACEPERIODTIME\", \"dataField\": \"graceperiodtime\", \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"selectbox\" },\r\n\r\n\r\n        )\r\n\r\n\r\n        const addsampleprocesstypeId = this.state.controlMap.has(\"AddSampleProcessType\") && this.state.controlMap.get(\"AddSampleProcessType\").ncontrolcode;\r\n        const editsampleprocesstypeId = this.state.controlMap.has(\"EditSampleProcessType\") && this.state.controlMap.get(\"EditSampleProcessType\").ncontrolcode;\r\n        const deletesampleprocesstypeId = this.state.controlMap.has(\"DeleteSampleProcessType\") && this.state.controlMap.get(\"DeleteSampleProcessType\").ncontrolcode;\r\n\r\n\r\n        const editParam = {\r\n            screenName: this.props.Login.inputParam && this.props.Login.inputParam.displayName && this.props.intl.formatMessage({ id: this.props.Login.inputParam.displayName }), primaryKeyField: \"nsampleprocesstypecode\", operation: \"update\",\r\n            inputParam: this.props.Login.inputParam, userInfo: this.props.Login.userInfo,\r\n            ncontrolCode: editsampleprocesstypeId\r\n        };\r\n\r\n        const deleteParam = { operation: \"delete\" };\r\n\r\n        return (<>\r\n\r\n            <ListWrapper className=\"client-list-content\">\r\n\r\n\r\n                <DataGrid\r\n                    primaryKeyField={primaryKeyField}\r\n                    selectedId={this.props.Login.selectedId}\r\n                    data={this.state.data}\r\n                    dataResult={this.state.dataResult || []}\r\n                    dataState={this.state.dataState}\r\n                    dataStateChange={this.dataStateChange}\r\n                    extractedColumnList={this.extractedColumnList}\r\n                    controlMap={this.state.controlMap}\r\n                    userRoleControlRights={this.state.userRoleControlRights}\r\n                    inputParam={this.props.Login.inputParam}\r\n                    userInfo={this.props.Login.userInfo}\r\n                    fetchRecord={this.props.getActiveSampleProcessTypeById}\r\n                    addRecord={() => this.props.projectytpe(addsampleprocesstypeId, this.props.Login.userInfo) || []}\r\n                    deleteRecord={this.deleteRecord}\r\n                    reloadData={this.reloadData}\r\n                    editParam={editParam}\r\n                    deleteParam={deleteParam}\r\n                    scrollable={\"scrollable\"}\r\n                    gridHeight={\"600px\"}\r\n                    isActionRequired={true}\r\n                    isToolBarRequired={true}\r\n                    pageable={true}\r\n                    groupable={false}\r\n\r\n                />\r\n\r\n            </ListWrapper>\r\n\r\n            {this.props.Login.openModal &&\r\n                <SlideOutModal\r\n                    show={this.props.Login.openModal}\r\n                    closeModal={this.closeModal}\r\n                    operation={this.props.Login.operation}\r\n                    inputParam={this.props.Login.inputParam}\r\n                    screenName={this.props.Login.screenName}\r\n                    onSaveClick={this.onSaveClick}\r\n                    esign={this.props.Login.loadEsign}\r\n                    validateEsign={this.validateEsign}\r\n                    masterStatus={this.props.Login.masterStatus}\r\n                    selectedRecord={this.state.selectedRecord || {}}\r\n                    updateStore={this.props.updateStore}\r\n                    mandatoryFields={mandatoryFields}\r\n                    addComponent={this.props.Login.loadEsign ?\r\n                        <Esign\r\n                            operation={this.props.Login.operation}\r\n                            onInputOnChange={this.onInputOnChange}\r\n                            inputParam={this.props.Login.inputParam}\r\n                            selectedRecord={this.state.selectedRecord || {}}\r\n                        />\r\n                        : <AddSampleProcessType\r\n                            selectedRecord={this.state.selectedRecord || {}}\r\n                            onInputOnChange={this.onInputOnChange}\r\n                            onComboChange={this.onComboChange}\r\n                            projecttypeList={this.state.projecttypeList || []}\r\n                            sampletypeList={this.state.sampletypeList || []}\r\n                            collectiontubeList={this.state.collectiontubeList || []}\r\n                            processtypeList={this.state.processtypeList || []}\r\n                            periodList={this.state.periodList || []}\r\n                            inputParam={this.props.Login.inputParam}\r\n                            actionType={this.state.actionType}\r\n                            operation={this.props.Login.operation}\r\n                        />}\r\n                />\r\n            }\r\n        </>);\r\n    }\r\n\r\n\r\n    componentDidUpdate(previousProps) {\r\n        \r\n\r\n        if (this.props.Login.masterData !== previousProps.Login.masterData) {\r\n            if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\r\n                const userRoleControlRights = [];\r\n                if (this.props.Login.userRoleControlRights) {\r\n                    this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item =>\r\n                        userRoleControlRights.push(item.ncontrolcode))\r\n                }\r\n                const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode)\r\n                this.setState({\r\n                    userRoleControlRights, controlMap, data: this.props.Login.masterData,\r\n                    dataResult: process(this.props.Login.masterData, this.state.dataState),\r\n                });\r\n            }\r\n            else {\r\n                //ALPD-4699Sample Process mapping-->While try to delete the already used records in other Modules alert validation captured Wrongly \" This Record is Used in Storage Sample Processing\"\"\r\n                \r\n                let {dataState}=this.state;\r\n                if(dataState===undefined){\r\n                    dataState={skip:0,take:this.state.dataState.take}\r\n                }\r\n                if(this.state.dataResult.data){\r\n                    //if(this.state.dataResult.data.length >0 && this.props.Login.operation !=='update' && this.props.Login.operation ==='create'){\r\n                    if(this.state.dataResult.data.length ===1){\r\n                    //let skipcount=this.state.dataState.skip>0?(this.props.Login.masterData.length-this.state.dataState.take):\r\n                    let skipcount=this.state.dataState.skip>0?(this.state.dataState.skip-this.state.dataState.take):  \r\n                    this.state.dataState.skip\r\n                        dataState={skip:skipcount,take:this.state.dataState.take}\r\n                    }\r\n                } \r\n\r\n                this.setState({\r\n                    data: this.props.Login.masterData,\r\n                    isOpen: false,\r\n                    selectedRecord: this.props.Login.selectedRecord,\r\n                    dataResult: process(this.props.Login.masterData, dataState),\r\n                    dataState\r\n                });\r\n            \r\n\r\n            //     let { dataState } = this.state;\r\n            // if (this.props.Login.dataState === undefined) {\r\n            //     dataState = { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 }\r\n            // }\r\n\r\n            // this.setState({\r\n            //     data: this.props.Login.masterData,\r\n            //     isOpen: false,\r\n            //     selectedRecord: this.props.Login.selectedRecord,\r\n            //     dataResult: process(this.props.Login.masterData, dataState),\r\n            //     dataState\r\n            // });\r\n        }\r\n        } else if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\r\n            this.setState({ selectedRecord: this.props.Login.selectedRecord });\r\n        }\r\n\r\n        if (this.props.Login.projecttypeList !== previousProps.Login.projecttypeList) {\r\n            this.setState({ projecttypeList: this.props.Login.projecttypeList });\r\n        }\r\n\r\n        if (this.props.Login.sampletypeList !== previousProps.Login.sampletypeList) {\r\n            this.setState({ sampletypeList: this.props.Login.sampletypeList });\r\n        }\r\n\r\n        if (this.props.Login.collectiontubeList !== previousProps.Login.collectiontubeList) {\r\n            this.setState({ collectiontubeList: this.props.Login.collectiontubeList });\r\n        }\r\n\r\n        if (this.props.Login.processtypeList !== previousProps.Login.processtypeList) {\r\n            this.setState({ processtypeList: this.props.Login.processtypeList });\r\n        }\r\n\r\n        if (this.props.Login.periodList !== previousProps.Login.periodList) {\r\n            this.setState({ periodList: this.props.Login.periodList });\r\n        }\r\n\r\n    }\r\n\r\n\r\n    onComboChange = (comboData, fieldName) => {\r\n\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n\r\n\r\n        if (fieldName === \"sprojecttypename\") {\r\n            selectedRecord[fieldName] = comboData;\r\n\r\n            delete selectedRecord[\"sproductname\"];\r\n            delete selectedRecord[\"stubename\"];\r\n            delete selectedRecord[\"sprocesstypename\"];\r\n\r\n            this.props.getSampleType(\r\n                this.state.selectedRecord.sprojecttypename.value,\r\n                this.state.selectedRecord.sprojecttypename.label,\r\n                this.props.Login.userInfo,\r\n            )\r\n        }\r\n        else {\r\n            selectedRecord[fieldName] = comboData;\r\n            this.setState({ selectedRecord });\r\n        }\r\n\r\n    }\r\n\r\n\r\n    onInputOnChange = (event, fieldName) => {\r\n\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n\r\n        const values = event.target.value;\r\n\r\n        let parsedvalues;\r\n\r\n        parsedvalues = parseInt(values, 10);\r\n\r\n        if (fieldName === \"processtime\" || fieldName === \"gracetime\") {\r\n\r\n            if (/^\\d*?$/.test(values) && values !== \"\") {\r\n\r\n                selectedRecord[fieldName] = parsedvalues;\r\n            } else {\r\n                selectedRecord[fieldName] = [];\r\n            }\r\n\r\n        } else if (fieldName === \"executionorder\") {\r\n\r\n            if (/^\\d*?$/.test(values) && values !== \"\") {\r\n\r\n                selectedRecord[fieldName] = parsedvalues;\r\n            } else {\r\n                selectedRecord[fieldName] = [];\r\n            }\r\n\r\n\r\n        } else {\r\n            selectedRecord[event.target.name] = event.target.value;\r\n        }\r\n\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n\r\n    closeModal = () => {\r\n        let loadEsign = this.props.Login.loadEsign;\r\n        let openModal = this.props.Login.openModal;\r\n        let selectedRecord = this.props.Login.selectedRecord;\r\n        let controlButton = this.props.Login.controlButton;\r\n        let selectedId = this.props.Login.selectedId;\r\n        let processtypeList;\r\n        let projecttypeList;\r\n        let sampletypeList;\r\n        let collectiontubeList;\r\n\r\n        if (this.props.Login.loadEsign) {\r\n            if (this.props.Login.operation === \"delete\") {\r\n                loadEsign = false;\r\n                openModal = false;\r\n                selectedRecord = {};\r\n\r\n            }\r\n            else {\r\n                loadEsign = false;\r\n                selectedRecord['esignpassword'] = \"\"\r\n                selectedRecord['esignreason'] = \"\"\r\n                selectedRecord['esigncomments'] = \"\"\r\n            }\r\n        }\r\n        else {\r\n            openModal = false;\r\n            selectedRecord = {};\r\n            controlButton = [];\r\n            processtypeList = [];\r\n            projecttypeList = [];\r\n            sampletypeList = [];\r\n            collectiontubeList = [];\r\n\r\n        }\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                openModal, loadEsign, selectedRecord, selectedId, controlButton\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n\r\n        this.setState({ selectedRecord: selectedRecord, processtypeList: processtypeList, projecttypeList: projecttypeList, sampletypeList: sampletypeList, collectiontubeList: collectiontubeList });\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n    validateEsign = () => {\r\n        const inputParam = {\r\n            inputData: {\r\n                \"userinfo\": {\r\n                    ...this.props.Login.userInfo,\r\n                    sreason: this.state.selectedRecord[\"esigncomments\"],\r\n                    nreasoncode: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].value,\r\n                    spredefinedreason: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].label,\r\n\r\n                },\r\n                password: this.state.selectedRecord[\"esignpassword\"]\r\n            },\r\n            screenData: this.props.Login.screenData\r\n        }\r\n        this.props.validateEsignCredential(inputParam, \"openModal\");\r\n    }\r\n\r\n\r\n    onSaveClick = (saveType, formRef) => {\r\n        if (this.props.Login.operation === \"create\") {\r\n            this.onSaveSampleProcessType(saveType, formRef);\r\n        } else if (this.props.Login.operation === \"update\") {\r\n            this.updateSampleProcessType(saveType, formRef);\r\n        }\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n    onSaveSampleProcessType = (saveType, formRef) => {\r\n\r\n\r\n        let selectedRecord = this.state.selectedRecord;\r\n\r\n        if (selectedRecord !== undefined) {\r\n\r\n            const inputParam = {\r\n                nformcode: this.props.Login.userInfo.nformcode,\r\n                classUrl: \"sampleprocesstype\",\r\n                methodUrl: \"SampleProcessType\",\r\n                inputData: {\r\n                    userinfo: {\r\n                        ...this.props.Login.userInfo,\r\n                        sformname: Lims_JSON_stringify(this.props.Login.userInfo.sformname),\r\n                        smodulename: Lims_JSON_stringify(this.props.Login.userInfo.smodulename),\r\n                    },\r\n\r\n                    ncontrolCode: this.props.Login.userInfo.nformcode,\r\n                    tubename: this.state.selectedRecord.stubename.label,\r\n                    tubevalue: this.state.selectedRecord.stubename.value,\r\n                    projecttypename: this.state.selectedRecord.sprojecttypename.label,\r\n                    projecttypevalue: this.state.selectedRecord.sprojecttypename.value,\r\n                    productname: this.state.selectedRecord.sproductname.label,\r\n                    productvalue: this.state.selectedRecord.sproductname.value,\r\n                    processtypename: this.state.selectedRecord.sprocesstypename.label,\r\n                    processtypevalue: this.state.selectedRecord.sprocesstypename.value,\r\n                    processtime: this.state.selectedRecord.processtime,\r\n                    processperiodtime: this.state.selectedRecord.processperiodtime.value,\r\n                    graceperiodtime: this.state.selectedRecord.graceperiodtime.value,\r\n                    gracetime: this.state.selectedRecord.gracetime,\r\n                    executionorder: this.state.selectedRecord.executionorder,\r\n                    sdescription: this.state.selectedRecord.sdescription,\r\n                    commonPeriod: this.state.selectedRecord.graceperiodtime.label,\r\n\r\n                    operation: \"create\",\r\n\r\n\r\n                },\r\n                operation: \"create\",\r\n                saveType, formRef,\r\n            }\r\n\r\n            const masterData = this.props.Login.masterData;\r\n\r\n\r\n            this.props.crudMaster(inputParam, masterData, \"openModal\");\r\n\r\n        }\r\n\r\n    }\r\n\r\n    updateSampleProcessType = (saveType, formRef) => {\r\n\r\n\r\n        const inputParam = {\r\n            nformcode: this.props.Login.userInfo.nformcode,\r\n            classUrl: \"sampleprocesstype\",\r\n            methodUrl: \"SampleProcessType\",\r\n            selectedRecord: {...this.state.selectedRecord},\r\n            selectedId:this.state.selectedRecord.nsampleprocesstypecode,\r\n            inputData: {\r\n                userinfo: {\r\n                    ...this.props.Login.userInfo,\r\n                    sformname: Lims_JSON_stringify(this.props.Login.userInfo.sformname),\r\n                    smodulename: Lims_JSON_stringify(this.props.Login.userInfo.smodulename),\r\n                },\r\n\r\n                ncontrolCode: this.props.Login.userInfo.nformcode,\r\n                nsampleprocesstypecode: this.state.selectedRecord.nsampleprocesstypecode,\r\n                tubename: this.state.selectedRecord.stubename.label,\r\n                tubevalue: this.state.selectedRecord.stubename.value,\r\n                projecttypename: this.state.selectedRecord.sprojecttypename.label,\r\n                projecttypevalue: this.state.selectedRecord.sprojecttypename.value,\r\n                productname: this.state.selectedRecord.sproductname.label,\r\n                productvalue: this.state.selectedRecord.sproductname.value,\r\n                processtypename: this.state.selectedRecord.sprocesstypename.label,\r\n                processtypevalue: this.state.selectedRecord.sprocesstypename.value,\r\n                processtime: this.state.selectedRecord.processtime,\r\n                gracetime: this.state.selectedRecord.gracetime,\r\n                executionorder: this.state.selectedRecord.executionorder,\r\n                sdescription: this.state.selectedRecord.sdescription,\r\n                commonPeriod: this.state.selectedRecord.graceperiodtime.label,\r\n                operation: \"update\",\r\n\r\n\r\n            },\r\n            operation: \"update\",\r\n            saveType, formRef,\r\n        }\r\n\r\n        const masterData = this.props.Login.masterData;\r\n\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData }, saveType\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.crudMaster(inputParam, masterData, \"openModal\");\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    deleteRecord = (deleteParam) => {\r\n        const inputParam = {\r\n            classUrl: this.props.Login.inputParam.classUrl,\r\n            methodUrl: this.props.Login.inputParam.methodUrl,\r\n            displayName: this.props.Login.inputParam.displayName,\r\n            inputData: {\r\n                [this.props.Login.inputParam.methodUrl.toLowerCase()]: deleteParam.selectedRecord,//.dataItem,\r\n                \"userinfo\": this.props.Login.userInfo\r\n            },\r\n            operation: deleteParam.operation,\r\n            dataState: this.state.dataState,\r\n            selectedRecord: deleteParam.selectedRecord\r\n        }\r\n\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, deleteParam.ncontrolCode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData: this.props.Login.masterData },\r\n                    openModal: true, screenName: this.props.intl.formatMessage({ id: this.props.Login.displayName }),\r\n                    operation: deleteParam.operation\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n}\r\nexport default connect(mapStateToProps, {\r\n    updateStore, callService, crudMaster, validateEsignCredential,\r\n    projectytpe, getSampleType, getActiveSampleProcessTypeById\r\n})(injectIntl(SampleProcessType));\r\n"]},"metadata":{},"sourceType":"module"}