{"ast":null,"code":"import { transactionStatus } from \"../../../components/Enumeration\";\nexport function onSaveTestComments(saveParam, selectedMaster) {\n  const inputData = {};\n  const selectedRecord = saveParam.selectedRecord;\n  let commentArray = [];\n\n  if (saveParam.operation === 'update') {\n    let comment = {};\n    comment['ntestcommentcode'] = selectedRecord.ntestcommentcode ? selectedRecord.ntestcommentcode : 0;\n    comment[\"npreregno\"] = selectedRecord.npreregno;\n    comment[\"ntransactionsamplecode\"] = selectedRecord.ntransactionsamplecode;\n    comment[\"ntransactiontestcode\"] = selectedRecord.ntransactiontestcode;\n    comment['nformcode'] = saveParam.userInfo.nformcode;\n    comment['nusercode'] = saveParam.userInfo.nusercode;\n    comment['nuserrolecode'] = saveParam.userInfo.nuserrole;\n    comment[\"jsondata\"] = {\n      stestsynonym: selectedRecord.stestsynonym,\n      scomments: selectedRecord.scomments ? selectedRecord.scomments.trim() : \"\"\n    };\n    comment[\"nsamplecommentscode\"] = selectedRecord.nsamplecommentscode ? selectedRecord.nsamplecommentscode.value : -1;\n    comment['nstatus'] = transactionStatus.ACTIVE;\n    inputData[\"testcomment\"] = comment;\n  } else {\n    selectedMaster.forEach(test => {\n      let comment = {};\n      comment['ntestcommentcode'] = selectedRecord.ntestcommentcode ? selectedRecord.ntestcommentcode : 0;\n      comment[\"npreregno\"] = test.npreregno;\n      comment[\"ntransactionsamplecode\"] = test.ntransactionsamplecode;\n      comment[\"ntransactiontestcode\"] = test.ntransactiontestcode;\n      comment['nformcode'] = saveParam.userInfo.nformcode;\n      comment['nusercode'] = saveParam.userInfo.nusercode;\n      comment['nuserrolecode'] = saveParam.userInfo.nuserrole;\n      comment[\"jsondata\"] = {\n        stestsynonym: test.stestsynonym,\n        scomments: selectedRecord.scomments ? selectedRecord.scomments.trim() : \"\"\n      };\n      comment[\"nsamplecommentscode\"] = selectedRecord.nsamplecommentscode ? selectedRecord.nsamplecommentscode.value : -1;\n      comment['nstatus'] = transactionStatus.ACTIVE;\n      commentArray.push(comment);\n    });\n    inputData[\"testcomment\"] = commentArray;\n  }\n\n  inputData[\"ntransactiontestcode\"] = saveParam.ntransactiontestcode;\n  const inputParam = {\n    inputData: {\n      userinfo: saveParam.userInfo,\n      ...inputData\n    },\n    operation: saveParam.operation,\n    selectedId: selectedRecord.ntestcommentcode ? selectedRecord.ntestcommentcode : 0,\n    classUrl: \"comments\",\n    saveType: saveParam.saveType,\n    formRef: saveParam.formRef,\n    methodUrl: \"TestComment\"\n  };\n  return inputParam;\n}\nexport function onSaveSampleComments(saveParam, selectedMaster) {\n  const inputData = {};\n  const selectedRecord = saveParam.selectedRecord;\n  let commentArray = [];\n\n  if (saveParam.operation === 'update') {\n    let comment = {};\n    comment['nregcommentcode'] = selectedRecord.nregcommentcode ? selectedRecord.nregcommentcode : 0;\n    comment[\"npreregno\"] = selectedRecord.npreregno;\n    comment['nformcode'] = saveParam.userInfo.nformcode;\n    comment['nusercode'] = saveParam.userInfo.nusercode;\n    comment['nuserrolecode'] = saveParam.userInfo.nuserrole;\n    comment[\"jsondata\"] = {\n      sarno: selectedRecord.jsondata.sarno,\n      scomments: selectedRecord.scomments ? selectedRecord.scomments.trim() : \"\"\n    };\n    comment[\"nsamplecommentscode\"] = saveParam.isTestComment && selectedRecord.nsamplecommentscode ? selectedRecord.nsamplecommentscode.value : -1;\n    comment['nstatus'] = transactionStatus.ACTIVE;\n    inputData[\"samplecomment\"] = comment;\n  } else {\n    selectedMaster.forEach(sample => {\n      let comment = {};\n      comment['nregcommentcode'] = selectedRecord.nregcommentcode ? selectedRecord.nregcommentcode : 0;\n      comment[\"npreregno\"] = sample.npreregno;\n      comment['nformcode'] = saveParam.userInfo.nformcode;\n      comment['nusercode'] = saveParam.userInfo.nusercode;\n      comment['nuserrolecode'] = saveParam.userInfo.nuserrole;\n      comment[\"jsondata\"] = {\n        sarno: sample.sarno,\n        scomments: selectedRecord.scomments ? selectedRecord.scomments.trim() : \"\"\n      };\n      comment[\"nsamplecommentscode\"] = saveParam.isTestComment && selectedRecord.nsamplecommentscode ? selectedRecord.nsamplecommentscode.value : -1;\n      comment['nstatus'] = transactionStatus.ACTIVE;\n      commentArray.push(comment);\n    });\n    inputData[\"samplecomment\"] = commentArray;\n  }\n\n  inputData[\"npreregno\"] = saveParam.npreregno;\n  const inputParam = {\n    inputData: {\n      userinfo: saveParam.userInfo,\n      ...inputData\n    },\n    operation: saveParam.operation,\n    selectedId: selectedRecord.nregcommentcode ? selectedRecord.nregcommentcode : 0,\n    classUrl: \"comments\",\n    saveType: saveParam.saveType,\n    formRef: saveParam.formRef,\n    methodUrl: \"SampleComment\"\n  };\n  return inputParam;\n}\nexport function onSaveSubSampleComments(saveParam, selectedMaster) {\n  const inputData = {};\n  const selectedRecord = saveParam.selectedRecord;\n  let commentArray = [];\n\n  if (saveParam.operation === 'update') {\n    let comment = {};\n    comment['nsamplecommentcode'] = selectedRecord.nsamplecommentcode ? selectedRecord.nsamplecommentcode : 0;\n    comment[\"ntransactionsamplecode\"] = selectedRecord.ntransactionsamplecode;\n    comment[\"npreregno\"] = selectedRecord.npreregno;\n    comment['nformcode'] = saveParam.userInfo.nformcode;\n    comment['nusercode'] = saveParam.userInfo.nusercode;\n    comment['nuserrolecode'] = saveParam.userInfo.nuserrole;\n    comment[\"jsondata\"] = {\n      sarno: selectedRecord.jsondata.sarno,\n      ssamplearno: selectedRecord.jsondata.ssamplearno,\n      scomments: selectedRecord.scomments ? selectedRecord.scomments.trim() : \"\"\n    };\n    comment[\"nsamplecommentscode\"] = saveParam.isTestComment && selectedRecord.nsamplecommentscode ? selectedRecord.nsamplecommentscode.value : -1;\n    comment['nstatus'] = transactionStatus.ACTIVE;\n    inputData[\"subsamplecomment\"] = comment;\n  } else {\n    selectedMaster.forEach(sample => {\n      let comment = {};\n      comment['nsamplecommentcode'] = selectedRecord.nsamplecommentcode ? selectedRecord.nsamplecommentcode : 0;\n      comment[\"ntransactionsamplecode\"] = sample.ntransactionsamplecode;\n      comment[\"npreregno\"] = sample.npreregno;\n      comment['nformcode'] = saveParam.userInfo.nformcode;\n      comment['nusercode'] = saveParam.userInfo.nusercode;\n      comment['nuserrolecode'] = saveParam.userInfo.nuserrole;\n      comment[\"jsondata\"] = {\n        sarno: sample.sarno,\n        ssamplearno: sample.ssamplearno,\n        scomments: selectedRecord.scomments ? selectedRecord.scomments.trim() : \"\"\n      };\n      comment[\"nsamplecommentscode\"] = saveParam.isTestComment && selectedRecord.nsamplecommentscode ? selectedRecord.nsamplecommentscode.value : -1;\n      comment['nstatus'] = transactionStatus.ACTIVE;\n      commentArray.push(comment);\n    });\n    inputData[\"subsamplecomment\"] = commentArray;\n  }\n\n  inputData[\"ntransactionsamplecode\"] = saveParam.ntransactionsamplecode;\n  const inputParam = {\n    inputData: {\n      userinfo: saveParam.userInfo,\n      ...inputData\n    },\n    operation: saveParam.operation,\n    selectedId: selectedRecord.nsamplecommentcode ? selectedRecord.nsamplecommentcode : 0,\n    classUrl: \"comments\",\n    saveType: saveParam.saveType,\n    formRef: saveParam.formRef,\n    methodUrl: \"SubSampleComment\"\n  };\n  return inputParam;\n}","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/pages/attachmentscomments/comments/CommentFunctions.js"],"names":["transactionStatus","onSaveTestComments","saveParam","selectedMaster","inputData","selectedRecord","commentArray","operation","comment","ntestcommentcode","npreregno","ntransactionsamplecode","ntransactiontestcode","userInfo","nformcode","nusercode","nuserrole","stestsynonym","scomments","trim","nsamplecommentscode","value","ACTIVE","forEach","test","push","inputParam","userinfo","selectedId","classUrl","saveType","formRef","methodUrl","onSaveSampleComments","nregcommentcode","sarno","jsondata","isTestComment","sample","onSaveSubSampleComments","nsamplecommentcode","ssamplearno"],"mappings":"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","sourcesContent":["\r\nimport {  transactionStatus } from \"../../../components/Enumeration\";\r\n\r\nexport function onSaveTestComments(saveParam,selectedMaster){\r\n\r\n    const inputData = {};\r\n    const selectedRecord = saveParam.selectedRecord;\r\n    let commentArray = [];\r\n    \r\n    if(saveParam.operation==='update'){\r\n        let comment = {};\r\n        comment['ntestcommentcode']=selectedRecord.ntestcommentcode ?selectedRecord.ntestcommentcode: 0;\r\n        comment[\"npreregno\"]=selectedRecord.npreregno;\r\n        comment[\"ntransactionsamplecode\"]=selectedRecord.ntransactionsamplecode;\r\n        comment[\"ntransactiontestcode\"]=selectedRecord.ntransactiontestcode;\r\n        comment['nformcode']=saveParam.userInfo.nformcode\r\n        comment['nusercode']=saveParam.userInfo.nusercode\r\n        comment['nuserrolecode']=saveParam.userInfo.nuserrole\r\n        comment[\"jsondata\"] = {\r\n            stestsynonym :  selectedRecord.stestsynonym,\r\n            scomments: selectedRecord.scomments ? selectedRecord.scomments.trim() : \"\"\r\n        }\r\n        comment[\"nsamplecommentscode\"] = selectedRecord.nsamplecommentscode? selectedRecord.nsamplecommentscode.value: -1;\r\n        comment['nstatus']=transactionStatus.ACTIVE;\r\n        inputData[\"testcomment\"]= comment;\r\n    }else{\r\n        selectedMaster.forEach(test=>{\r\n            let comment = {};\r\n            comment['ntestcommentcode']=selectedRecord.ntestcommentcode ?selectedRecord.ntestcommentcode: 0;\r\n            comment[\"npreregno\"]=test.npreregno;\r\n            comment[\"ntransactionsamplecode\"]=test.ntransactionsamplecode;\r\n            comment[\"ntransactiontestcode\"]=test.ntransactiontestcode;\r\n            comment['nformcode']=saveParam.userInfo.nformcode\r\n            comment['nusercode']=saveParam.userInfo.nusercode\r\n            comment['nuserrolecode']=saveParam.userInfo.nuserrole\r\n            comment[\"jsondata\"] = {\r\n                stestsynonym :  test.stestsynonym,\r\n                scomments: selectedRecord.scomments ? selectedRecord.scomments.trim() : \"\"\r\n            }\r\n            comment[\"nsamplecommentscode\"] = selectedRecord.nsamplecommentscode? selectedRecord.nsamplecommentscode.value: -1;\r\n            comment['nstatus']=transactionStatus.ACTIVE;\r\n            commentArray.push(comment);\r\n        })  \r\n        inputData[\"testcomment\"]= commentArray;\r\n    }\r\n    \r\n   \r\n    \r\n    inputData[\"ntransactiontestcode\"]=saveParam.ntransactiontestcode\r\n    const inputParam = {\r\n        inputData: {userinfo: saveParam.userInfo,...inputData},\r\n        operation: saveParam.operation, selectedId:selectedRecord.ntestcommentcode ?selectedRecord.ntestcommentcode: 0,\r\n        classUrl: \"comments\",\r\n        saveType:saveParam.saveType,\r\n        formRef:saveParam.formRef,\r\n         methodUrl: \"TestComment\"\r\n    }\r\n    return inputParam;\r\n}\r\n\r\nexport function onSaveSampleComments(saveParam,selectedMaster){\r\n\r\n    const inputData = {};\r\n    const selectedRecord = saveParam.selectedRecord;\r\n    let commentArray = [];\r\n    \r\n    if(saveParam.operation==='update'){\r\n        let comment = {};\r\n        comment['nregcommentcode']=selectedRecord.nregcommentcode ?selectedRecord.nregcommentcode: 0;\r\n        comment[\"npreregno\"]=selectedRecord.npreregno;\r\n        comment['nformcode']=saveParam.userInfo.nformcode\r\n        comment['nusercode']=saveParam.userInfo.nusercode\r\n        comment['nuserrolecode']=saveParam.userInfo.nuserrole\r\n        comment[\"jsondata\"] = {\r\n            sarno :  selectedRecord.jsondata.sarno,\r\n            scomments: selectedRecord.scomments ? selectedRecord.scomments.trim() : \"\"\r\n        }\r\n        comment[\"nsamplecommentscode\"] = saveParam.isTestComment&&selectedRecord.nsamplecommentscode? selectedRecord.nsamplecommentscode.value: -1;\r\n        comment['nstatus']=transactionStatus.ACTIVE;\r\n        inputData[\"samplecomment\"]= comment;\r\n    }else{\r\n        selectedMaster.forEach(sample=>{\r\n            let comment = {};\r\n            comment['nregcommentcode']=selectedRecord.nregcommentcode ?selectedRecord.nregcommentcode: 0;\r\n            comment[\"npreregno\"]=sample.npreregno;\r\n            comment['nformcode']=saveParam.userInfo.nformcode\r\n            comment['nusercode']=saveParam.userInfo.nusercode\r\n            comment['nuserrolecode']=saveParam.userInfo.nuserrole\r\n            comment[\"jsondata\"] = {\r\n                sarno :  sample.sarno,\r\n                scomments: selectedRecord.scomments ? selectedRecord.scomments.trim() : \"\"\r\n            }\r\n            comment[\"nsamplecommentscode\"] = saveParam.isTestComment&&selectedRecord.nsamplecommentscode? selectedRecord.nsamplecommentscode.value: -1;\r\n            comment['nstatus']=transactionStatus.ACTIVE;\r\n            commentArray.push(comment);\r\n        })  \r\n        inputData[\"samplecomment\"]= commentArray;\r\n    }\r\n    \r\n   \r\n    \r\n    inputData[\"npreregno\"]=saveParam.npreregno\r\n    const inputParam = {\r\n        inputData: {userinfo: saveParam.userInfo,...inputData},\r\n        operation: saveParam.operation, selectedId:selectedRecord.nregcommentcode ?selectedRecord.nregcommentcode: 0,\r\n        classUrl: \"comments\",\r\n        saveType:saveParam.saveType,\r\n        formRef:saveParam.formRef,\r\n         methodUrl: \"SampleComment\"\r\n    }\r\n    return inputParam;\r\n}\r\n\r\n\r\nexport function onSaveSubSampleComments(saveParam,selectedMaster){\r\n\r\n    const inputData = {};\r\n    const selectedRecord = saveParam.selectedRecord;\r\n    let commentArray = [];\r\n    \r\n    if(saveParam.operation==='update'){\r\n        let comment = {};\r\n        comment['nsamplecommentcode']=selectedRecord.nsamplecommentcode ?selectedRecord.nsamplecommentcode: 0;\r\n        comment[\"ntransactionsamplecode\"]=selectedRecord.ntransactionsamplecode;\r\n        comment[\"npreregno\"] = selectedRecord.npreregno;\r\n        comment['nformcode']=saveParam.userInfo.nformcode\r\n        comment['nusercode']=saveParam.userInfo.nusercode\r\n        comment['nuserrolecode']=saveParam.userInfo.nuserrole\r\n        comment[\"jsondata\"] = {\r\n            sarno :  selectedRecord.jsondata.sarno,\r\n            ssamplearno :  selectedRecord.jsondata.ssamplearno,\r\n            scomments: selectedRecord.scomments ? selectedRecord.scomments.trim() : \"\"\r\n        }\r\n        comment[\"nsamplecommentscode\"] = saveParam.isTestComment&&selectedRecord.nsamplecommentscode? selectedRecord.nsamplecommentscode.value: -1;\r\n        comment['nstatus']=transactionStatus.ACTIVE;\r\n        inputData[\"subsamplecomment\"]= comment;\r\n    }else{\r\n        selectedMaster.forEach(sample=>{\r\n            let comment = {};\r\n            comment['nsamplecommentcode']=selectedRecord.nsamplecommentcode ?selectedRecord.nsamplecommentcode: 0;\r\n            comment[\"ntransactionsamplecode\"]=sample.ntransactionsamplecode;\r\n            comment[\"npreregno\"] = sample.npreregno;\r\n            comment['nformcode']=saveParam.userInfo.nformcode\r\n            comment['nusercode']=saveParam.userInfo.nusercode\r\n            comment['nuserrolecode']=saveParam.userInfo.nuserrole\r\n            comment[\"jsondata\"] = {\r\n                sarno :  sample.sarno,\r\n                ssamplearno :  sample.ssamplearno,\r\n                scomments: selectedRecord.scomments ? selectedRecord.scomments.trim() : \"\"\r\n            }\r\n            comment[\"nsamplecommentscode\"] = saveParam.isTestComment&&selectedRecord.nsamplecommentscode? selectedRecord.nsamplecommentscode.value: -1;\r\n            comment['nstatus']=transactionStatus.ACTIVE;\r\n            commentArray.push(comment);\r\n        })  \r\n        inputData[\"subsamplecomment\"]= commentArray;\r\n    }\r\n    \r\n   \r\n    \r\n    inputData[\"ntransactionsamplecode\"]=saveParam.ntransactionsamplecode\r\n    const inputParam = {\r\n        inputData: {userinfo: saveParam.userInfo,...inputData},\r\n        operation: saveParam.operation, selectedId:selectedRecord.nsamplecommentcode ?selectedRecord.nsamplecommentcode: 0,\r\n        classUrl: \"comments\",\r\n        saveType:saveParam.saveType,\r\n        formRef:saveParam.formRef,\r\n         methodUrl: \"SubSampleComment\"\r\n    }\r\n    return inputParam;\r\n}"]},"metadata":{},"sourceType":"module"}