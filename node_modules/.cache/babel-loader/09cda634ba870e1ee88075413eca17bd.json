{"ast":null,"code":"var _jsxFileName = \"D:\\\\LIMSWFH\\\\LIMSPOSTGRESQL\\\\QuaLISWeb\\\\src\\\\pages\\\\release\\\\ReleaseTestComment.jsx\";\nimport React from 'react';\nimport { Col, Row } from 'react-bootstrap';\nimport { injectIntl } from 'react-intl';\nimport { transactionStatus } from '../../components/Enumeration';\nimport { viewAttachment } from '../../actions';\nimport { connect } from 'react-redux';\nimport DataGrid from '../../components/data-grid/data-grid.component';\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\nimport { process } from '@progress/kendo-data-query';\nimport CustomSwitch from '../../components/custom-switch/custom-switch.component';\nimport FormTextarea from '../../components/form-textarea/form-textarea.component';\nimport FormSelectSearch from '../../components/form-select-search/form-select-search.component';\nimport Esign from '../audittrail/Esign';\nimport rsapi from '../../rsapi';\nimport { toast } from 'react-toastify';\nimport { Lims_JSON_stringify, constructOptionList } from \"../../components/CommonScript\";\nimport Axios from \"axios\";\n\nclass ReleaseTestAttachment extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.closeModal = () => {\n      let loadEsign = this.state.loadEsign;\n      let openModal = this.state.openModal;\n      let selectedRecord = this.state.selectedRecord;\n      let operation = this.state.operation;\n\n      if (this.state.loadEsign) {\n        if (this.state.operation === \"delete\") {\n          loadEsign = false;\n          openModal = false;\n          selectedRecord = {};\n          operation = undefined;\n        } else {\n          loadEsign = false;\n          selectedRecord[\"esigncomments\"] = \"\";\n          selectedRecord[\"esignpassword\"] = \"\";\n          selectedRecord['esignreason'] = '';\n        }\n      } else {\n        openModal = false;\n        selectedRecord = {};\n      }\n\n      this.setState({\n        loadEsign,\n        openModal,\n        selectedRecord,\n        operation\n      });\n    };\n\n    this.getSampleDetails = (event, ncontrolCode, operation) => {\n      const url = \"release/getActiveReleaseTestCommentById\";\n      let openModal = true;\n\n      if (this.props.masterData.selectedReleaseHistory.ntransactionstatus !== transactionStatus.RELEASED) {\n        if (operation === \"update\") {\n          let urlArray = [];\n          urlArray.push(rsapi.post(url, {\n            \"ncoaparentcode\": event.editRow.ncoaparentcode,\n            \"npreregno\": event.editRow.npreregno,\n            \"ntransactionsamplecode\": event.editRow.ntransactionsamplecode,\n            \"ntransactiontestcode\": event.editRow.ntransactiontestcode,\n            \"nreleasetestcommentcode\": event.editRow.nreleasetestcommentcode,\n            \"userinfo\": this.props.userInfo\n          }));\n          urlArray.push(rsapi.post(\"/comments/getSampleTestCommentsListById\", {\n            userinfo: this.props.userInfo,\n            ncommentsubtypecode: event.editRow && event.editRow.ncommentsubtypecode && event.editRow.ncommentsubtypecode\n          }));\n          Axios.all(urlArray).then(response => {\n            let responseData = response[0].data;\n            const lstSampleTestComments = constructOptionList(response[1].data.SampleTestComments || [], \"nsampletestcommentscode\", \"spredefinedname\", false, false, true);\n            const SampleTestComments = lstSampleTestComments.get(\"OptionList\");\n\n            if (responseData.ntransactionstatus !== transactionStatus.RELEASED) {\n              let selectedReleaseTestComment = event.editRow;\n              let masterData = this.props.masterData;\n              let nneedreport = responseData && responseData.nneedreport ? responseData.nneedreport : transactionStatus.NO;\n              let scomments = responseData && responseData.scomments ? responseData.scomments : \"\";\n              let npreregno;\n              let ntransactionsamplecode;\n              let ntransactiontestcode;\n              let sarno;\n              let ssamplearno;\n              let stestsynonym;\n              masterData.RegistrationArno.map(item => {\n                if (item.value === responseData.npreregno) {\n                  npreregno = item;\n                  sarno = item.label;\n                }\n              });\n              masterData.RegistrationSampleArno.map(item => {\n                if (item.value === responseData.ntransactionsamplecode) {\n                  ntransactionsamplecode = item;\n                  ssamplearno = item.label;\n                }\n              });\n              masterData.RegistrationTest.map(item => {\n                if (item.value === responseData.ntransactiontestcode) {\n                  ntransactiontestcode = item;\n                  stestsynonym = item.label;\n                }\n              });\n              let selectedRecord = { ...this.state.selectedRecord,\n                npreregno,\n                ntransactionsamplecode,\n                ntransactiontestcode,\n                sarno,\n                ssamplearno,\n                stestsynonym,\n                nneedreport,\n                scomments,\n                selectedReleaseTestComment\n              };\n              selectedRecord[\"scommentsubtype\"] = responseData.scommentsubtype;\n              selectedRecord[\"ncommentsubtypecode\"] = {\n                label: responseData.scommentsubtype,\n                value: responseData.ncommentsubtypecode\n              };\n              selectedRecord[\"spredefinedname\"] = responseData.spredefinedname;\n              selectedRecord[\"nsampletestcommentscode\"] = {\n                label: responseData.spredefinedname,\n                value: responseData.nsampletestcommentscode\n              };\n              this.setState({\n                selectedRecord,\n                openModal,\n                operation,\n                ncontrolCode,\n                SampleTestComments\n              });\n            } else {\n              toast.warn(this.props.intl.formatMessage({\n                id: \"IDS_RECORDALREADYRELEASED\"\n              }));\n            }\n          }).catch(error => {\n            if (error.response.status === 500) {\n              toast.error(error.message);\n            } else {\n              toast.warn(error.response.data);\n            }\n\n            this.setState({\n              loading: false\n            });\n          });\n        } else {\n          let RegistrationArno = this.props.masterData.RegistrationArno;\n          let commentSubType = this.props.CommentSubType;\n          let selectedRecord = {\n            RegistrationArno: RegistrationArno,\n            ReleaseTestCommentDetails: this.props.masterData.ReleaseTestCommentDetails,\n            nneedreport: transactionStatus.NO,\n            ncommentsubtypecode: commentSubType && commentSubType[0],\n            scommentsubtype: commentSubType && commentSubType[0] && commentSubType[0].label\n          };\n          this.setState({\n            selectedRecord,\n            openModal,\n            operation,\n            ncontrolCode\n          });\n        }\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_RECORDALREADYRELEASED\"\n        }));\n      }\n    };\n\n    this.deleteRecord = deleteParam => {\n      const url = \"release/deleteReleaseTestComment\";\n\n      if (this.props.masterData.selectedReleaseHistory.ntransactionstatus !== transactionStatus.RELEASED) {\n        let releasetestcomment = {\n          \"ncoaparentcode\": deleteParam.selectedRecord.ncoaparentcode,\n          \"npreregno\": deleteParam.selectedRecord.npreregno,\n          \"ntransactionsamplecode\": deleteParam.selectedRecord.ntransactionsamplecode,\n          \"ntransactiontestcode\": deleteParam.selectedRecord.ntransactiontestcode,\n          \"nreleasetestcommentcode\": deleteParam.selectedRecord.nreleasetestcommentcode\n        };\n        rsapi.post(url, {\n          releasetestcomment,\n          \"userinfo\": this.props.userInfo\n        }).then(response => {\n          let ReleaseTestCommentDetails = response.data.ReleaseTestCommentDetails;\n          let selectedRecord = { ...this.state.selectedRecord,\n            ...response.data\n          };\n          this.setState({\n            selectedRecord,\n            ReleaseTestCommentDetails\n          });\n        }).catch(error => {\n          if (error.response.status === 500) {\n            toast.error(error.message);\n          } else {\n            toast.warn(error.response.data);\n          }\n\n          this.setState({\n            loading: false\n          });\n        });\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_RECORDALREADYRELEASED\"\n        }));\n      }\n    };\n\n    this.onComboChange = (comboData, fieldName) => {\n      let selectedRecord = this.state.selectedRecord || {};\n      let lstRegistrationSampleArno = this.props.masterData.RegistrationSampleArno;\n      let lstRegistrationTest = this.props.masterData.RegistrationTest;\n      let RegistrationSampleArno = [];\n      let RegistrationTest = [];\n      let ntransactionsamplecode = \"\";\n      let ntransactiontestcode = \"\";\n      let ssamplearno = null;\n      let stestsynonym = null;\n\n      if (fieldName === \"npreregno\") {\n        lstRegistrationSampleArno.map(item => {\n          if (item.item.npreregno === comboData.value) {\n            RegistrationSampleArno.push(item);\n          }\n        });\n        let npreregno = {\n          item: comboData.item,\n          label: comboData.label,\n          value: comboData.value\n        };\n        let sarno = comboData.item.sarno;\n        selectedRecord = { ...selectedRecord,\n          RegistrationSampleArno,\n          RegistrationTest,\n          npreregno,\n          sarno,\n          ntransactionsamplecode,\n          ntransactiontestcode,\n          ssamplearno,\n          stestsynonym\n        };\n        this.setState({\n          selectedRecord\n        });\n      } else if (fieldName === \"ntransactionsamplecode\") {\n        lstRegistrationTest.map(item => {\n          if (item.item.ntransactionsamplecode === comboData.value) {\n            RegistrationTest.push(item);\n          }\n        });\n        ntransactionsamplecode = {\n          item: comboData.item,\n          label: comboData.label,\n          value: comboData.value\n        };\n        ssamplearno = comboData.item.ssamplearno;\n        selectedRecord = { ...selectedRecord,\n          RegistrationTest,\n          ntransactionsamplecode,\n          ssamplearno,\n          ntransactiontestcode,\n          stestsynonym\n        };\n        this.setState({\n          selectedRecord\n        });\n      } else if (fieldName === \"ntransactiontestcode\") {\n        ntransactiontestcode = {\n          item: comboData.item,\n          label: comboData.label,\n          value: comboData.value\n        };\n        stestsynonym = comboData.item.stestsynonym;\n        selectedRecord = { ...selectedRecord,\n          ntransactiontestcode,\n          stestsynonym\n        };\n        this.setState({\n          selectedRecord\n        });\n      } else if (fieldName === \"ncommentsubtypecode\") {\n        rsapi.post(\"/comments/getSampleTestCommentsListById\", {\n          userinfo: this.props.userInfo,\n          ncommentsubtypecode: comboData.value\n        }).then(response => {\n          let listSampleTestComments = response.data.SampleTestComments;\n          const lstSampleTestComments = constructOptionList(listSampleTestComments || [], \"nsampletestcommentscode\", \"spredefinedname\", false, false, true);\n          const SampleTestComments = lstSampleTestComments.get(\"OptionList\");\n          selectedRecord[\"scommentsubtype\"] = comboData.label;\n          selectedRecord[\"ncommentsubtypecode\"] = comboData;\n          selectedRecord[\"nsampletestcommentscode\"] = \"\";\n          selectedRecord[\"scomments\"] = \"\";\n          selectedRecord[\"spredefinedname\"] = \"\";\n          this.setState({\n            SampleTestComments,\n            selectedRecord\n          });\n        }).catch(error => {\n          if (error.response.status === 500) {\n            toast.error(error.message);\n          } else {\n            toast.warn(error.response.data);\n          }\n\n          this.setState({\n            loading: false\n          });\n        });\n      } else if (fieldName === \"nsampletestcommentscode\") {\n        selectedRecord[\"nsampletestcommentscode\"] = comboData;\n        selectedRecord[\"spredefinedname\"] = comboData.label;\n        selectedRecord[\"scomments\"] = comboData.item && comboData.item.sdescription ? comboData.item.sdescription : \"\";\n        this.setState({\n          selectedRecord\n        });\n      }\n    };\n\n    this.onInputOnChange = event => {\n      const selectedRecord = this.state.selectedRecord || {};\n      selectedRecord[event.target.name] = event.target.value;\n\n      if (event.target.type === 'checkbox') {\n        if (event.target.name === \"nneedreport\") {\n          selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\n        }\n      } else {\n        selectedRecord[event.target.name] = event.target.value;\n      }\n\n      if (selectedRecord[\"nneedreport\"] && selectedRecord[\"nneedreport\"] === transactionStatus.YES && selectedRecord[\"sfilename\"] !== undefined && selectedRecord[\"sfilename\"].length > 0) {\n        let fileFormat = false;\n        let requiredFileFormat = this.props.settings && this.props.settings[32] && this.props.settings[32].split(\",\");\n        let fileNameSplit = selectedRecord[\"sfilename\"] && Array.isArray(selectedRecord[\"sfilename\"]) ? selectedRecord[\"sfilename\"][0].name.split(\".\") : selectedRecord[\"sfilename\"].split(\".\");\n        requiredFileFormat.map(item => {\n          if (item.slice(1) === fileNameSplit[fileNameSplit.length - 1]) {\n            fileFormat = true;\n          }\n        });\n        selectedRecord[\"nneedreport\"] = fileFormat ? selectedRecord[\"nneedreport\"] : transactionStatus.NO;\n        !fileFormat && toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_REPORTSUPPORTSONLYFILEFORMATS\"\n        }));\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.dataStateChange = event => {\n      this.setState({\n        dataState: event.dataState,\n        dataResult: process(this.state.ReleaseTestCommentDetails, event.dataState)\n      });\n    };\n\n    this.onSaveClick = (saveType, formRef) => {\n      if (this.state.loading === false) {\n        this.setState({\n          loading: true\n        });\n        const formData = new FormData();\n        const selectedRecord = this.state.selectedRecord;\n        const userInfo = this.props.userInfo;\n        const inputData = {};\n        let commentArray = []; // if (this.state.operation === 'update') {\n        // } else {\n\n        let comment = {};\n        comment[\"nreleasetestcommentcode\"] = selectedRecord.selectedReleaseTestComment && selectedRecord.selectedReleaseTestComment.nreleasetestcommentcode;\n        comment[\"nformcode\"] = userInfo.nformcode;\n        comment[\"npreregno\"] = selectedRecord.npreregno.value;\n        comment[\"ntransactionsamplecode\"] = selectedRecord.ntransactionsamplecode.value;\n        comment[\"ntransactiontestcode\"] = selectedRecord.ntransactiontestcode.value;\n        comment[\"ncoaparentcode\"] = this.props.masterData.ncoaparentcode;\n        comment[\"nusercode\"] = userInfo.nusercode;\n        comment[\"nuserrolecode\"] = userInfo.nuserrole;\n        comment[\"ncommentsubtypecode\"] = selectedRecord.ncommentsubtypecode && selectedRecord.ncommentsubtypecode.value;\n        comment[\"nsampletestcommentscode\"] = selectedRecord.nsampletestcommentscode && selectedRecord.nsampletestcommentscode.value !== \"\" ? selectedRecord.nsampletestcommentscode.value : '-1';\n        comment[\"jsondata\"] = {\n          scomments: selectedRecord.scomments ? selectedRecord.scomments : \"\",\n          nneedreport: selectedRecord.nneedreport ? selectedRecord.nneedreport : transactionStatus.NO,\n          stestsynonym: selectedRecord.stestsynonym,\n          scommentsubtype: selectedRecord.ncommentsubtypecode && selectedRecord.ncommentsubtypecode.label,\n          spredefinedname: selectedRecord.nsampletestcommentscode && selectedRecord.nsampletestcommentscode.label !== \"\" ? selectedRecord.nsampletestcommentscode.label : '-',\n          ncommentsubtypecode: selectedRecord.ncommentsubtypecode && selectedRecord.ncommentsubtypecode,\n          nsampletestcommentscode: selectedRecord.nsampletestcommentscode ? selectedRecord.nsampletestcommentscode : '-'\n        };\n        comment[\"nsamplecommentscode\"] = selectedRecord.nsamplecommentscode ? selectedRecord.nsamplecommentscode.value : -1;\n        commentArray.push(comment);\n        inputData[\"testcomment\"] = commentArray; // }\n\n        formData.append(\"userinfo\", JSON.stringify({ ...userInfo,\n          sformname: Lims_JSON_stringify(userInfo.sformname),\n          smodulename: Lims_JSON_stringify(userInfo.smodulename),\n          slanguagename: Lims_JSON_stringify(userInfo.slanguagename)\n        }));\n        formData.append(\"releasetestcomment\", JSON.stringify(commentArray));\n        formData.append(\"ncoaparentcode\", this.props.masterData.ncoaparentcode);\n        const requestUrl = rsapi.post(\"release/\" + this.state.operation + \"ReleaseTestComment\", formData);\n        return requestUrl.then(response => {\n          let ReleaseTestCommentDetails = response.data.ReleaseTestCommentDetails;\n          let selectedRecord = {};\n          let openModal = false;\n          this.setState({\n            selectedRecord,\n            openModal,\n            ReleaseTestCommentDetails,\n            loading: false\n          });\n        }).catch(error => {\n          if (error.response.status === 500) {\n            toast.error(error.message);\n          } else {\n            toast.warn(error.response.data);\n          }\n\n          this.setState({\n            loading: false\n          });\n        });\n      }\n    };\n\n    const dataState = {\n      skip: 0,\n      take: this.props.settings ? parseInt(this.props.settings[14]) : 5\n    };\n    this.state = {\n      loading: false,\n      ReleaseTestCommentDetails: this.props.ReleaseTestCommentDetails,\n      dataState: dataState,\n      openModal: false,\n      inputParam: this.props.inputParam,\n      loadEsign: false,\n      operation: \"\",\n      selectedRecord: {},\n      isneedReport: this.props.isneedReport\n    };\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.ReleaseTestCommentDetails !== prevProps.ReleaseTestCommentDetails) {\n      this.setState({\n        ReleaseTestCommentDetails: this.props.ReleaseTestCommentDetails\n      });\n    }\n\n    if (this.props.inputParam !== prevProps.inputParam) {\n      this.setState({\n        inputParam: this.props.inputParam\n      });\n    }\n  }\n\n  render() {\n    const addReleaseTestComment = this.props.controlMap.has(\"AddReleaseTestComment\") && this.props.controlMap.get(\"AddReleaseTestComment\").ncontrolcode;\n    const editReleaseTestComment = this.props.controlMap.has(\"EditReleaseTestComment\") && this.props.controlMap.get(\"EditReleaseTestComment\").ncontrolcode;\n    const editReleaseTestCommentParam = {\n      screenName: this.props.intl.formatMessage({\n        id: \"IDS_RELEASETESTCOMMENT\"\n      }),\n      operation: \"update\",\n      primaryKeyField: \"nreleasetestcommentcode\",\n      inputParam: this.state.inputParam,\n      userInfo: this.props.userInfo,\n      ncontrolCode: editReleaseTestComment\n    };\n    this.fieldsForReleasedTestCommentGrid = [// { \"idsName\": \"IDS_FILENAME\", \"dataField\": \"sfilename\", \"width\": \"200px\" },\n    {\n      \"idsName\": \"IDS_ARNO\",\n      \"dataField\": \"sarno\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_SAMPLEARNO\",\n      \"dataField\": \"ssamplearno\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_TESTSYNONYM\",\n      \"dataField\": \"stestsynonym\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_SCREENNAME\",\n      \"dataField\": \"sformname\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_COMMENTNAME\",\n      \"dataField\": \"scommentsubtype\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_ABBREVIATIONNAME\",\n      \"dataField\": \"spredefinedname\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_COMMENTS\",\n      \"dataField\": \"scomments\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_INCULDEINREPORT\",\n      \"dataField\": \"sneedreport\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_USERNAME\",\n      \"dataField\": \"susername\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_USERROLENAME\",\n      \"dataField\": \"suserrolename\",\n      \"width\": \"200px\"\n    }];\n    let mandatoryFields = this.state.selectedRecord && this.state.selectedRecord[\"ncommentsubtypecode\"] && this.state.selectedRecord[\"ncommentsubtypecode\"].value === 3 ? [{\n      \"idsName\": \"IDS_COMMENTNAME\",\n      \"dataField\": \"scommentsubtype\",\n      \"mandatoryLabel\": \"IDS_CHOOSE\",\n      \"controlType\": \"selectbox\"\n    }, {\n      \"idsName\": \"IDS_ABBREVIATIONNAME\",\n      \"dataField\": \"spredefinedname\",\n      \"mandatoryLabel\": \"IDS_CHOOSE\",\n      \"controlType\": \"selectbox\"\n    }, {\n      \"idsName\": \"IDS_COMMENTS\",\n      \"dataField\": \"scomments\",\n      \"mandatoryLabel\": \"IDS_ENTER\",\n      \"controlType\": \"textbox\"\n    }, {\n      \"idsName\": \"IDS_ARNUMBER\",\n      \"dataField\": \"sarno\",\n      \"mandatoryLabel\": \"IDS_CHOOSE\",\n      \"controlType\": \"selectbox\"\n    }, {\n      \"idsName\": \"IDS_SAMPLEARNO\",\n      \"dataField\": \"ssamplearno\",\n      \"mandatoryLabel\": \"IDS_CHOOSE\",\n      \"controlType\": \"selectbox\"\n    }, {\n      \"idsName\": \"IDS_TESTSYNONYM\",\n      \"dataField\": \"stestsynonym\",\n      \"mandatoryLabel\": \"IDS_CHOOSE\",\n      \"controlType\": \"selectbox\"\n    }] : [{\n      \"idsName\": \"IDS_COMMENTNAME\",\n      \"dataField\": \"scommentsubtype\",\n      \"mandatoryLabel\": \"IDS_CHOOSE\",\n      \"controlType\": \"selectbox\"\n    }, {\n      \"idsName\": \"IDS_COMMENTS\",\n      \"dataField\": \"scomments\",\n      \"mandatoryLabel\": \"IDS_ENTER\",\n      \"controlType\": \"textbox\"\n    }, {\n      \"idsName\": \"IDS_ARNUMBER\",\n      \"dataField\": \"sarno\",\n      \"mandatoryLabel\": \"IDS_CHOOSE\",\n      \"controlType\": \"selectbox\"\n    }, {\n      \"idsName\": \"IDS_SAMPLEARNO\",\n      \"dataField\": \"ssamplearno\",\n      \"mandatoryLabel\": \"IDS_CHOOSE\",\n      \"controlType\": \"selectbox\"\n    }, {\n      \"idsName\": \"IDS_TESTSYNONYM\",\n      \"dataField\": \"stestsynonym\",\n      \"mandatoryLabel\": \"IDS_CHOOSE\",\n      \"controlType\": \"selectbox\"\n    }];\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(DataGrid, {\n      primaryKeyField: \"nreleasetestcommentcode\",\n      data: this.state.ReleaseTestCommentDetails || [],\n      dataResult: process(this.state.ReleaseTestCommentDetails && this.state.ReleaseTestCommentDetails || [], this.state.dataState),\n      dataState: this.state.dataState,\n      isExportExcelRequired: false,\n      controlMap: this.props.controlMap,\n      userRoleControlRights: this.props.userRoleControlRights,\n      userInfo: this.props.userInfo,\n      editParam: editReleaseTestCommentParam,\n      extractedColumnList: this.fieldsForReleasedTestCommentGrid,\n      pageable: true,\n      dataStateChange: this.dataStateChange,\n      scrollable: 'scrollable',\n      gridHeight: '630px',\n      isActionRequired: true,\n      addRecord: event => this.getSampleDetails(event, addReleaseTestComment, \"create\"),\n      isToolBarRequired: true,\n      methodUrl: 'ReleaseTestComment',\n      isAddRequired: this.props.isAddRequired,\n      isRefreshRequired: this.props.isRefreshRequired,\n      isImportRequired: this.props.isImportRequired,\n      isDownloadPDFRequired: this.props.isDownloadPDFRequired,\n      isDownloadExcelRequired: this.props.isDownloadExcelRequired,\n      fetchRecord: event => {\n        this.getSampleDetails(event, editReleaseTestComment, \"update\");\n      },\n      deleteRecord: this.deleteRecord,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 25\n      }\n    }))), this.state.openModal ? /*#__PURE__*/React.createElement(SlideOutModal, {\n      show: this.state.openModal,\n      size: \"xl\",\n      closeModal: this.closeModal,\n      operation: this.state.operation,\n      inputParam: this.state.inputParam,\n      screenName: this.props.intl.formatMessage({\n        id: \"IDS_TESTCOMMENTS\"\n      }),\n      onSaveClick: this.onSaveClick,\n      esign: this.state.loadEsign,\n      validateEsign: this.validateEsign,\n      selectedRecord: this.state.selectedRecord || {},\n      mandatoryFields: mandatoryFields,\n      addComponent: this.state.loadEsign ? /*#__PURE__*/React.createElement(Esign, {\n        operation: this.state.operation,\n        onInputOnChange: this.onInputOnChange,\n        inputParam: this.state.inputParam,\n        selectedRecord: this.state.selectedRecord || {},\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 29\n        }\n      }) : /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(Col, {\n        md: \"12\",\n        className: \"mt-4\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 37\n        }\n      }, /*#__PURE__*/React.createElement(FormSelectSearch, {\n        formLabel: this.props.intl.formatMessage({\n          id: \"IDS_COMMENTNAME\"\n        }),\n        isSearchable: true,\n        name: \"ncommentsubtypecode\",\n        showOption: true,\n        options: this.props.CommentSubType || [],\n        optionId: \"ncommentsubtypecode\",\n        optionValue: \"scommentsubtype\",\n        value: this.state.selectedRecord[\"ncommentsubtypecode\"] && this.state.selectedRecord[\"ncommentsubtypecode\"] || \"\",\n        onChange: value => this.onComboChange(value, 'ncommentsubtypecode'),\n        isMandatory: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 41\n        }\n      }), this.state.selectedRecord && this.state.selectedRecord[\"ncommentsubtypecode\"] && this.state.selectedRecord[\"ncommentsubtypecode\"].value === 3 ? /*#__PURE__*/React.createElement(FormSelectSearch, {\n        formLabel: this.props.intl.formatMessage({\n          id: \"IDS_ABBREVIATIONNAME\"\n        }),\n        isSearchable: true,\n        name: \"nsampletestcommentscode\",\n        showOption: true,\n        options: this.state.SampleTestComments || [],\n        optionId: \"nsampletestcommentscode\",\n        optionValue: \"spredefinedname\",\n        value: this.state.selectedRecord[\"nsampletestcommentscode\"] && this.state.selectedRecord[\"nsampletestcommentscode\"] || \"\",\n        onChange: value => this.onComboChange(value, 'nsampletestcommentscode'),\n        isMandatory: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 197,\n          columnNumber: 45\n        }\n      }) : \"\", /*#__PURE__*/React.createElement(FormTextarea, {\n        formGroupClassName: \"remove-floating-label-margin\",\n        label: this.props.intl.formatMessage({\n          id: \"IDS_COMMENT\"\n        }),\n        name: \"scomments\",\n        type: \"text\",\n        required: false,\n        isMandatory: true,\n        value: this.state.selectedRecord[\"scomments\"] && this.state.selectedRecord[\"scomments\"] || \"\",\n        onChange: event => this.onInputOnChange(event),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 209,\n          columnNumber: 41\n        }\n      })), /*#__PURE__*/React.createElement(Col, {\n        md: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 222,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(FormSelectSearch, {\n        formLabel: this.props.intl.formatMessage({\n          id: \"IDS_ARNUMBER\"\n        }),\n        isSearchable: true,\n        name: \"npreregno\",\n        isDisabled: this.state.operation === \"create\" ? false : true,\n        placeholder: this.props.intl.formatMessage({\n          id: \"IDS_SELECTRECORD\"\n        }),\n        isMandatory: true,\n        options: this.state.selectedRecord ? this.state.selectedRecord.RegistrationArno : [],\n        optionId: \"npreregno\",\n        optionValue: \"sarno\",\n        value: this.state.selectedRecord ? this.state.selectedRecord.npreregno : \"\",\n        onChange: event => this.onComboChange(event, 'npreregno'),\n        closeMenuOnSelect: true,\n        alphabeticalSort: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 223,\n          columnNumber: 37\n        }\n      })), /*#__PURE__*/React.createElement(Col, {\n        md: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 240,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(FormSelectSearch, {\n        formLabel: this.props.intl.formatMessage({\n          id: \"IDS_SAMPLEARNO\"\n        }),\n        isSearchable: true,\n        name: \"ntransactionsamplecode\",\n        isDisabled: this.state.operation === \"create\" ? false : true,\n        placeholder: this.props.intl.formatMessage({\n          id: \"IDS_SELECTRECORD\"\n        }),\n        isMandatory: true,\n        options: this.state.selectedRecord ? this.state.selectedRecord.RegistrationSampleArno : [],\n        optionId: \"ntransactionsamplecode\",\n        optionValue: \"ssamplearno\",\n        value: this.state.selectedRecord ? this.state.selectedRecord.ntransactionsamplecode : \"\",\n        onChange: event => this.onComboChange(event, 'ntransactionsamplecode'),\n        closeMenuOnSelect: true,\n        alphabeticalSort: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 241,\n          columnNumber: 37\n        }\n      })), /*#__PURE__*/React.createElement(Col, {\n        md: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 258,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(FormSelectSearch, {\n        formLabel: this.props.intl.formatMessage({\n          id: \"IDS_TESTSYNONYM\"\n        }),\n        isSearchable: true,\n        name: \"ntransactiontestcode\",\n        isDisabled: this.state.operation === \"create\" ? false : true,\n        placeholder: this.props.intl.formatMessage({\n          id: \"IDS_SELECTRECORD\"\n        }),\n        isMandatory: true,\n        options: this.state.selectedRecord ? this.state.selectedRecord.RegistrationTest : [],\n        optionId: \"ntransactiontestcode\",\n        optionValue: \"stestsynonym\",\n        value: this.state.selectedRecord ? this.state.selectedRecord.ntransactiontestcode : \"\",\n        onChange: event => this.onComboChange(event, 'ntransactiontestcode'),\n        closeMenuOnSelect: true,\n        alphabeticalSort: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 259,\n          columnNumber: 37\n        }\n      })), /*#__PURE__*/React.createElement(Col, {\n        md: \"12\",\n        className: \"mt-4\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 276,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(CustomSwitch, {\n        label: this.props.intl.formatMessage({\n          id: \"IDS_INCULDEINREPORT\"\n        }),\n        type: \"switch\",\n        name: \"nneedreport\",\n        onChange: event => this.onInputOnChange(event, 1),\n        defaultValue: false,\n        isMandatory: false,\n        required: true,\n        checked: this.state.selectedRecord ? this.state.selectedRecord.nneedreport === transactionStatus.YES ? true : false : false,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 277,\n          columnNumber: 37\n        }\n      }))),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 21\n      }\n    }) : \"\");\n  }\n\n}\n\nexport default connect(null, {\n  viewAttachment\n})(injectIntl(ReleaseTestAttachment));","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/pages/release/ReleaseTestComment.jsx"],"names":["React","Col","Row","injectIntl","transactionStatus","viewAttachment","connect","DataGrid","SlideOutModal","process","CustomSwitch","FormTextarea","FormSelectSearch","Esign","rsapi","toast","Lims_JSON_stringify","constructOptionList","Axios","ReleaseTestAttachment","Component","constructor","props","closeModal","loadEsign","state","openModal","selectedRecord","operation","undefined","setState","getSampleDetails","event","ncontrolCode","url","masterData","selectedReleaseHistory","ntransactionstatus","RELEASED","urlArray","push","post","editRow","ncoaparentcode","npreregno","ntransactionsamplecode","ntransactiontestcode","nreleasetestcommentcode","userInfo","userinfo","ncommentsubtypecode","all","then","response","responseData","data","lstSampleTestComments","SampleTestComments","get","selectedReleaseTestComment","nneedreport","NO","scomments","sarno","ssamplearno","stestsynonym","RegistrationArno","map","item","value","label","RegistrationSampleArno","RegistrationTest","scommentsubtype","spredefinedname","nsampletestcommentscode","warn","intl","formatMessage","id","catch","error","status","message","loading","commentSubType","CommentSubType","ReleaseTestCommentDetails","deleteRecord","deleteParam","releasetestcomment","onComboChange","comboData","fieldName","lstRegistrationSampleArno","lstRegistrationTest","listSampleTestComments","sdescription","onInputOnChange","target","name","type","checked","YES","length","fileFormat","requiredFileFormat","settings","split","fileNameSplit","Array","isArray","slice","dataStateChange","dataState","dataResult","onSaveClick","saveType","formRef","formData","FormData","inputData","commentArray","comment","nformcode","nusercode","nuserrole","nsamplecommentscode","append","JSON","stringify","sformname","smodulename","slanguagename","requestUrl","skip","take","parseInt","inputParam","isneedReport","componentDidUpdate","prevProps","render","addReleaseTestComment","controlMap","has","ncontrolcode","editReleaseTestComment","editReleaseTestCommentParam","screenName","primaryKeyField","fieldsForReleasedTestCommentGrid","mandatoryFields","userRoleControlRights","isAddRequired","isRefreshRequired","isImportRequired","isDownloadPDFRequired","isDownloadExcelRequired","validateEsign"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { Col, Row } from 'react-bootstrap';\r\nimport { injectIntl } from 'react-intl';\r\nimport { transactionStatus } from '../../components/Enumeration';\r\nimport { viewAttachment } from '../../actions';\r\nimport { connect } from 'react-redux';\r\nimport DataGrid from '../../components/data-grid/data-grid.component';\r\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\r\nimport { process } from '@progress/kendo-data-query';\r\nimport CustomSwitch from '../../components/custom-switch/custom-switch.component';\r\nimport FormTextarea from '../../components/form-textarea/form-textarea.component';\r\nimport FormSelectSearch from '../../components/form-select-search/form-select-search.component';\r\nimport Esign from '../audittrail/Esign';\r\nimport rsapi from '../../rsapi';\r\nimport { toast } from 'react-toastify';\r\nimport { Lims_JSON_stringify, constructOptionList } from \"../../components/CommonScript\";\r\nimport Axios from \"axios\";\r\n\r\nclass ReleaseTestAttachment extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        const dataState = {\r\n            skip: 0,\r\n            take: this.props.settings ? parseInt(this.props.settings[14]) : 5,\r\n        };\r\n        this.state = {\r\n            loading: false,\r\n            ReleaseTestCommentDetails: this.props.ReleaseTestCommentDetails,\r\n            dataState: dataState,\r\n            openModal: false,\r\n            inputParam: this.props.inputParam,\r\n            loadEsign: false,\r\n            operation: \"\",\r\n            selectedRecord: {},\r\n            isneedReport: this.props.isneedReport\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (this.props.ReleaseTestCommentDetails !== prevProps.ReleaseTestCommentDetails) {\r\n            this.setState({ ReleaseTestCommentDetails: this.props.ReleaseTestCommentDetails })\r\n        }\r\n        if (this.props.inputParam !== prevProps.inputParam) {\r\n            this.setState({ inputParam: this.props.inputParam })\r\n        }\r\n\r\n    }\r\n\r\n    closeModal = () => {\r\n        let loadEsign = this.state.loadEsign;\r\n        let openModal = this.state.openModal\r\n        let selectedRecord = this.state.selectedRecord;\r\n        let operation = this.state.operation;\r\n        if (this.state.loadEsign) {\r\n            if (this.state.operation === \"delete\") {\r\n                loadEsign = false;\r\n                openModal = false;\r\n                selectedRecord = {};\r\n                operation = undefined;\r\n            }\r\n            else {\r\n                loadEsign = false;\r\n                selectedRecord[\"esigncomments\"] = \"\";\r\n                selectedRecord[\"esignpassword\"] = \"\";\r\n                selectedRecord['esignreason'] = '';\r\n            }\r\n        }\r\n        else {\r\n            openModal = false;\r\n            selectedRecord = {};\r\n        }\r\n        this.setState({ loadEsign, openModal, selectedRecord, operation })\r\n    }\r\n\r\n    render() {\r\n        const addReleaseTestComment =\r\n            this.props.controlMap.has(\"AddReleaseTestComment\") &&\r\n            this.props.controlMap.get(\"AddReleaseTestComment\").ncontrolcode;\r\n\r\n        const editReleaseTestComment =\r\n            this.props.controlMap.has(\"EditReleaseTestComment\") &&\r\n            this.props.controlMap.get(\"EditReleaseTestComment\").ncontrolcode;\r\n\r\n        const editReleaseTestCommentParam = {\r\n            screenName: this.props.intl.formatMessage({ id: \"IDS_RELEASETESTCOMMENT\" }),\r\n            operation: \"update\", primaryKeyField: \"nreleasetestcommentcode\",\r\n            inputParam: this.state.inputParam,\r\n            userInfo: this.props.userInfo,\r\n            ncontrolCode: editReleaseTestComment\r\n        };\r\n\r\n        this.fieldsForReleasedTestCommentGrid =\r\n            [\r\n                // { \"idsName\": \"IDS_FILENAME\", \"dataField\": \"sfilename\", \"width\": \"200px\" },\r\n                { \"idsName\": \"IDS_ARNO\", \"dataField\": \"sarno\", \"width\": \"200px\" },\r\n                { \"idsName\": \"IDS_SAMPLEARNO\", \"dataField\": \"ssamplearno\", \"width\": \"200px\" },\r\n                { \"idsName\": \"IDS_TESTSYNONYM\", \"dataField\": \"stestsynonym\", \"width\": \"200px\" },\r\n                { \"idsName\": \"IDS_SCREENNAME\", \"dataField\": \"sformname\", \"width\": \"200px\" },\r\n                { \"idsName\": \"IDS_COMMENTNAME\", \"dataField\": \"scommentsubtype\", \"width\": \"200px\" },\r\n                { \"idsName\": \"IDS_ABBREVIATIONNAME\", \"dataField\": \"spredefinedname\", \"width\": \"200px\" },\r\n                { \"idsName\": \"IDS_COMMENTS\", \"dataField\": \"scomments\", \"width\": \"200px\" },\r\n                { \"idsName\": \"IDS_INCULDEINREPORT\", \"dataField\": \"sneedreport\", \"width\": \"200px\" },\r\n                { \"idsName\": \"IDS_USERNAME\", \"dataField\": \"susername\", \"width\": \"200px\" },\r\n                { \"idsName\": \"IDS_USERROLENAME\", \"dataField\": \"suserrolename\", \"width\": \"200px\" },\r\n\r\n            ]\r\n\r\n\r\n        let mandatoryFields = this.state.selectedRecord && this.state.selectedRecord[\"ncommentsubtypecode\"] && this.state.selectedRecord[\"ncommentsubtypecode\"].value === 3 ?\r\n            [\r\n                { \"idsName\": \"IDS_COMMENTNAME\", \"dataField\": \"scommentsubtype\", \"mandatoryLabel\": \"IDS_CHOOSE\", \"controlType\": \"selectbox\" },\r\n                { \"idsName\": \"IDS_ABBREVIATIONNAME\", \"dataField\": \"spredefinedname\", \"mandatoryLabel\": \"IDS_CHOOSE\", \"controlType\": \"selectbox\" },\r\n                { \"idsName\": \"IDS_COMMENTS\", \"dataField\": \"scomments\", \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"textbox\" },\r\n                { \"idsName\": \"IDS_ARNUMBER\", \"dataField\": \"sarno\", \"mandatoryLabel\": \"IDS_CHOOSE\", \"controlType\": \"selectbox\" },\r\n                { \"idsName\": \"IDS_SAMPLEARNO\", \"dataField\": \"ssamplearno\", \"mandatoryLabel\": \"IDS_CHOOSE\", \"controlType\": \"selectbox\" },\r\n                { \"idsName\": \"IDS_TESTSYNONYM\", \"dataField\": \"stestsynonym\", \"mandatoryLabel\": \"IDS_CHOOSE\", \"controlType\": \"selectbox\" }\r\n            ]\r\n            :\r\n            [\r\n                { \"idsName\": \"IDS_COMMENTNAME\", \"dataField\": \"scommentsubtype\", \"mandatoryLabel\": \"IDS_CHOOSE\", \"controlType\": \"selectbox\" },\r\n                { \"idsName\": \"IDS_COMMENTS\", \"dataField\": \"scomments\", \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"textbox\" },\r\n                { \"idsName\": \"IDS_ARNUMBER\", \"dataField\": \"sarno\", \"mandatoryLabel\": \"IDS_CHOOSE\", \"controlType\": \"selectbox\" },\r\n                { \"idsName\": \"IDS_SAMPLEARNO\", \"dataField\": \"ssamplearno\", \"mandatoryLabel\": \"IDS_CHOOSE\", \"controlType\": \"selectbox\" },\r\n                { \"idsName\": \"IDS_TESTSYNONYM\", \"dataField\": \"stestsynonym\", \"mandatoryLabel\": \"IDS_CHOOSE\", \"controlType\": \"selectbox\" }\r\n            ]\r\n\r\n        return (\r\n            <>\r\n                <Row>\r\n                    <Col>\r\n                        <DataGrid\r\n                            primaryKeyField=\"nreleasetestcommentcode\"\r\n                            data={this.state.ReleaseTestCommentDetails || []}\r\n                            dataResult={process(this.state.ReleaseTestCommentDetails && this.state.ReleaseTestCommentDetails || [], this.state.dataState)}\r\n                            dataState={this.state.dataState}\r\n                            isExportExcelRequired={false}\r\n                            controlMap={this.props.controlMap}\r\n                            userRoleControlRights={this.props.userRoleControlRights}\r\n                            userInfo={this.props.userInfo}\r\n                            editParam={editReleaseTestCommentParam}\r\n                            extractedColumnList={this.fieldsForReleasedTestCommentGrid}\r\n                            pageable={true}\r\n                            dataStateChange={this.dataStateChange}\r\n                            scrollable={'scrollable'}\r\n                            gridHeight={'630px'}\r\n                            isActionRequired={true}\r\n                            addRecord={(event) => this.getSampleDetails(event, addReleaseTestComment, \"create\")}\r\n                            isToolBarRequired={true}\r\n                            methodUrl={'ReleaseTestComment'}\r\n                            isAddRequired={this.props.isAddRequired}\r\n                            isRefreshRequired={this.props.isRefreshRequired}\r\n                            isImportRequired={this.props.isImportRequired}\r\n                            isDownloadPDFRequired={this.props.isDownloadPDFRequired}\r\n                            isDownloadExcelRequired={this.props.isDownloadExcelRequired}\r\n                            fetchRecord={(event) => { this.getSampleDetails(event, editReleaseTestComment, \"update\") }}\r\n                            deleteRecord={this.deleteRecord}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n\r\n                {this.state.openModal ?\r\n                    <SlideOutModal show={this.state.openModal}\r\n                        size={\"xl\"}\r\n                        closeModal={this.closeModal}\r\n                        operation={this.state.operation}\r\n                        inputParam={this.state.inputParam}\r\n                        screenName={this.props.intl.formatMessage({ id: \"IDS_TESTCOMMENTS\" })}\r\n                        onSaveClick={this.onSaveClick}\r\n                        esign={this.state.loadEsign}\r\n                        validateEsign={this.validateEsign}\r\n                        selectedRecord={this.state.selectedRecord || {}}\r\n                        mandatoryFields={mandatoryFields}\r\n                        addComponent={this.state.loadEsign ?\r\n                            <Esign operation={this.state.operation}\r\n                                onInputOnChange={this.onInputOnChange}\r\n                                inputParam={this.state.inputParam}\r\n                                selectedRecord={this.state.selectedRecord || {}}\r\n                            />\r\n                            :\r\n                            <Row>\r\n\r\n                                {\r\n                                    <Col md=\"12\" className=\"mt-4\">\r\n                                        <FormSelectSearch\r\n                                            formLabel={this.props.intl.formatMessage({ id: \"IDS_COMMENTNAME\" })}\r\n                                            isSearchable={true}\r\n                                            name={\"ncommentsubtypecode\"}\r\n                                            showOption={true}\r\n                                            options={this.props.CommentSubType || []}\r\n                                            optionId='ncommentsubtypecode'\r\n                                            optionValue='scommentsubtype'\r\n                                            value={this.state.selectedRecord[\"ncommentsubtypecode\"] && this.state.selectedRecord[\"ncommentsubtypecode\"] || \"\"}\r\n                                            onChange={value => this.onComboChange(value, 'ncommentsubtypecode')}\r\n                                            isMandatory={true}\r\n                                        />\r\n                                        {this.state.selectedRecord && this.state.selectedRecord[\"ncommentsubtypecode\"] && this.state.selectedRecord[\"ncommentsubtypecode\"].value === 3 ?\r\n                                            <FormSelectSearch\r\n                                                formLabel={this.props.intl.formatMessage({ id: \"IDS_ABBREVIATIONNAME\" })}\r\n                                                isSearchable={true}\r\n                                                name={\"nsampletestcommentscode\"}\r\n                                                showOption={true}\r\n                                                options={this.state.SampleTestComments || []}\r\n                                                optionId='nsampletestcommentscode'\r\n                                                optionValue='spredefinedname'\r\n                                                value={this.state.selectedRecord[\"nsampletestcommentscode\"] && this.state.selectedRecord[\"nsampletestcommentscode\"] || \"\"}\r\n                                                onChange={value => this.onComboChange(value, 'nsampletestcommentscode')}\r\n                                                isMandatory={true}\r\n                                            /> : \"\"}\r\n                                        <FormTextarea\r\n                                            formGroupClassName=\"remove-floating-label-margin\"\r\n                                            label={this.props.intl.formatMessage({ id: \"IDS_COMMENT\" })}\r\n                                            name={\"scomments\"}\r\n                                            type=\"text\"\r\n                                            required={false}\r\n                                            isMandatory={true}\r\n                                            value={this.state.selectedRecord[\"scomments\"] && this.state.selectedRecord[\"scomments\"] || \"\"}\r\n                                            onChange={(event) => this.onInputOnChange(event)}\r\n                                        />\r\n                                    </Col>\r\n                                }\r\n\r\n                                <Col md={12}>\r\n                                    <FormSelectSearch\r\n                                        formLabel={this.props.intl.formatMessage({ id: \"IDS_ARNUMBER\" })}\r\n                                        isSearchable={true}\r\n                                        name={\"npreregno\"}\r\n                                        isDisabled={this.state.operation === \"create\" ? false : true}\r\n                                        placeholder={this.props.intl.formatMessage({ id: \"IDS_SELECTRECORD\" })}\r\n                                        isMandatory={true}\r\n                                        options={this.state.selectedRecord ? this.state.selectedRecord.RegistrationArno : []}\r\n                                        optionId='npreregno'\r\n                                        optionValue='sarno'\r\n                                        value={this.state.selectedRecord ? this.state.selectedRecord.npreregno : \"\"}\r\n                                        onChange={(event) => this.onComboChange(event, 'npreregno')}\r\n                                        closeMenuOnSelect={true}\r\n                                        alphabeticalSort={true}\r\n                                    />\r\n                                </Col>\r\n\r\n                                <Col md={12}>\r\n                                    <FormSelectSearch\r\n                                        formLabel={this.props.intl.formatMessage({ id: \"IDS_SAMPLEARNO\" })}\r\n                                        isSearchable={true}\r\n                                        name={\"ntransactionsamplecode\"}\r\n                                        isDisabled={this.state.operation === \"create\" ? false : true}\r\n                                        placeholder={this.props.intl.formatMessage({ id: \"IDS_SELECTRECORD\" })}\r\n                                        isMandatory={true}\r\n                                        options={this.state.selectedRecord ? this.state.selectedRecord.RegistrationSampleArno : []}\r\n                                        optionId='ntransactionsamplecode'\r\n                                        optionValue='ssamplearno'\r\n                                        value={this.state.selectedRecord ? this.state.selectedRecord.ntransactionsamplecode : \"\"}\r\n                                        onChange={(event) => this.onComboChange(event, 'ntransactionsamplecode')}\r\n                                        closeMenuOnSelect={true}\r\n                                        alphabeticalSort={true}\r\n                                    />\r\n                                </Col>\r\n\r\n                                <Col md={12}>\r\n                                    <FormSelectSearch\r\n                                        formLabel={this.props.intl.formatMessage({ id: \"IDS_TESTSYNONYM\" })}\r\n                                        isSearchable={true}\r\n                                        name={\"ntransactiontestcode\"}\r\n                                        isDisabled={this.state.operation === \"create\" ? false : true}\r\n                                        placeholder={this.props.intl.formatMessage({ id: \"IDS_SELECTRECORD\" })}\r\n                                        isMandatory={true}\r\n                                        options={this.state.selectedRecord ? this.state.selectedRecord.RegistrationTest : []}\r\n                                        optionId='ntransactiontestcode'\r\n                                        optionValue='stestsynonym'\r\n                                        value={this.state.selectedRecord ? this.state.selectedRecord.ntransactiontestcode : \"\"}\r\n                                        onChange={(event) => this.onComboChange(event, 'ntransactiontestcode')}\r\n                                        closeMenuOnSelect={true}\r\n                                        alphabeticalSort={true}\r\n                                    />\r\n                                </Col>\r\n\r\n                                <Col md=\"12\" className=\"mt-4\">\r\n                                    <CustomSwitch\r\n                                        label={this.props.intl.formatMessage({ id: \"IDS_INCULDEINREPORT\" })}\r\n                                        type=\"switch\"\r\n                                        name={\"nneedreport\"}\r\n                                        onChange={(event) => this.onInputOnChange(event, 1)}\r\n                                        defaultValue={false}\r\n                                        isMandatory={false}\r\n                                        required={true}\r\n                                        checked={this.state.selectedRecord ? this.state.selectedRecord.nneedreport === transactionStatus.YES ? true : false : false}\r\n                                    />\r\n                                </Col>\r\n                                {/* : \"\"} */}\r\n\r\n                            </Row>\r\n                        }\r\n                    /> : \"\"}\r\n            </>\r\n        );\r\n    };\r\n\r\n    getSampleDetails = (event, ncontrolCode, operation) => {\r\n        const url = \"release/getActiveReleaseTestCommentById\";\r\n        let openModal = true;\r\n        if (this.props.masterData.selectedReleaseHistory.ntransactionstatus !== transactionStatus.RELEASED) {\r\n            if (operation === \"update\") {\r\n                let urlArray = [];\r\n                urlArray.push(rsapi.post(url, {\r\n                    \"ncoaparentcode\": event.editRow.ncoaparentcode,\r\n                    \"npreregno\": event.editRow.npreregno,\r\n                    \"ntransactionsamplecode\": event.editRow.ntransactionsamplecode,\r\n                    \"ntransactiontestcode\": event.editRow.ntransactiontestcode,\r\n                    \"nreleasetestcommentcode\": event.editRow.nreleasetestcommentcode,\r\n                    \"userinfo\": this.props.userInfo\r\n                }));\r\n                urlArray.push(\r\n                    rsapi.post(\"/comments/getSampleTestCommentsListById\", {\r\n                        userinfo: this.props.userInfo,\r\n                        ncommentsubtypecode: event.editRow && event.editRow.ncommentsubtypecode && event.editRow.ncommentsubtypecode\r\n                    })\r\n                );\r\n                Axios.all(urlArray)\r\n                    .then(response => {\r\n                        let responseData = response[0].data;\r\n                        const lstSampleTestComments = constructOptionList(response[1].data.SampleTestComments || [], \"nsampletestcommentscode\", \"spredefinedname\", false, false, true);\r\n                        const SampleTestComments = lstSampleTestComments.get(\"OptionList\");\r\n                        if (responseData.ntransactionstatus !== transactionStatus.RELEASED) {\r\n                            let selectedReleaseTestComment = event.editRow;\r\n                            let masterData = this.props.masterData;\r\n                            let nneedreport = responseData && responseData.nneedreport ? responseData.nneedreport : transactionStatus.NO;\r\n                            let scomments = responseData && responseData.scomments ? responseData.scomments : \"\";\r\n                            let npreregno;\r\n                            let ntransactionsamplecode;\r\n                            let ntransactiontestcode;\r\n                            let sarno;\r\n                            let ssamplearno;\r\n                            let stestsynonym;\r\n                            masterData.RegistrationArno.map(item => {\r\n                                if (item.value === responseData.npreregno) {\r\n                                    npreregno = item;\r\n                                    sarno = item.label;\r\n                                }\r\n                            });\r\n                            masterData.RegistrationSampleArno.map(item => {\r\n                                if (item.value === responseData.ntransactionsamplecode) {\r\n                                    ntransactionsamplecode = item;\r\n                                    ssamplearno = item.label;\r\n                                }\r\n                            });\r\n                            masterData.RegistrationTest.map(item => {\r\n                                if (item.value === responseData.ntransactiontestcode) {\r\n                                    ntransactiontestcode = item;\r\n                                    stestsynonym = item.label;\r\n                                }\r\n                            });\r\n\r\n                            let selectedRecord = {\r\n                                ...this.state.selectedRecord, npreregno, ntransactionsamplecode, ntransactiontestcode, sarno, ssamplearno, stestsynonym, nneedreport,\r\n                                scomments, selectedReleaseTestComment,\r\n                            };\r\n                            selectedRecord[\"scommentsubtype\"] = responseData.scommentsubtype;\r\n                            selectedRecord[\"ncommentsubtypecode\"] = {\r\n                                label: responseData.scommentsubtype,\r\n                                value: responseData.ncommentsubtypecode\r\n                            };\r\n                            selectedRecord[\"spredefinedname\"] = responseData.spredefinedname;\r\n                            selectedRecord[\"nsampletestcommentscode\"] = {\r\n                                label: responseData.spredefinedname,\r\n                                value: responseData.nsampletestcommentscode\r\n                            };\r\n                            this.setState({\r\n                                selectedRecord, openModal, operation, ncontrolCode, SampleTestComments\r\n                            });\r\n                        } else {\r\n                            toast.warn(this.props.intl.formatMessage({ id: \"IDS_RECORDALREADYRELEASED\" }));\r\n                        }\r\n                    }).catch(error => {\r\n                        if (error.response.status === 500) {\r\n                            toast.error(error.message);\r\n                        } else {\r\n                            toast.warn(error.response.data);\r\n                        }\r\n                        this.setState({\r\n                            loading: false\r\n                        });\r\n                    });\r\n            } else {\r\n                let RegistrationArno = this.props.masterData.RegistrationArno;\r\n                let commentSubType = this.props.CommentSubType;\r\n                let selectedRecord = {\r\n                    RegistrationArno: RegistrationArno,\r\n                    ReleaseTestCommentDetails: this.props.masterData.ReleaseTestCommentDetails,\r\n                    nneedreport: transactionStatus.NO,\r\n                    ncommentsubtypecode: commentSubType && commentSubType[0],\r\n                    scommentsubtype: commentSubType && commentSubType[0] && commentSubType[0].label\r\n                };\r\n                this.setState({\r\n                    selectedRecord, openModal, operation, ncontrolCode,\r\n                });\r\n            }\r\n        } else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_RECORDALREADYRELEASED\" }));\r\n        }\r\n    }\r\n\r\n    deleteRecord = (deleteParam) => {\r\n        const url = \"release/deleteReleaseTestComment\";\r\n        if (this.props.masterData.selectedReleaseHistory.ntransactionstatus !== transactionStatus.RELEASED) {\r\n            let releasetestcomment = {\r\n                \"ncoaparentcode\": deleteParam.selectedRecord.ncoaparentcode,\r\n                \"npreregno\": deleteParam.selectedRecord.npreregno,\r\n                \"ntransactionsamplecode\": deleteParam.selectedRecord.ntransactionsamplecode,\r\n                \"ntransactiontestcode\": deleteParam.selectedRecord.ntransactiontestcode,\r\n                \"nreleasetestcommentcode\": deleteParam.selectedRecord.nreleasetestcommentcode\r\n            }\r\n            rsapi.post(url, {\r\n                releasetestcomment, \"userinfo\": this.props.userInfo\r\n            })\r\n                .then(response => {\r\n                    let ReleaseTestCommentDetails = response.data.ReleaseTestCommentDetails;\r\n                    let selectedRecord = {\r\n                        ...this.state.selectedRecord, ...response.data\r\n                    };\r\n                    this.setState({\r\n                        selectedRecord, ReleaseTestCommentDetails\r\n                    });\r\n                }).catch(error => {\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    } else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                    this.setState({\r\n                        loading: false\r\n                    });\r\n                });\r\n        } else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_RECORDALREADYRELEASED\" }));\r\n        }\r\n    }\r\n\r\n    onComboChange = (comboData, fieldName) => {\r\n        let selectedRecord = this.state.selectedRecord || {};\r\n        let lstRegistrationSampleArno = this.props.masterData.RegistrationSampleArno;\r\n        let lstRegistrationTest = this.props.masterData.RegistrationTest;\r\n        let RegistrationSampleArno = [];\r\n        let RegistrationTest = [];\r\n        let ntransactionsamplecode = \"\";\r\n        let ntransactiontestcode = \"\";\r\n        let ssamplearno = null;\r\n        let stestsynonym = null;\r\n        if (fieldName === \"npreregno\") {\r\n            lstRegistrationSampleArno.map(item => {\r\n                if (item.item.npreregno === comboData.value) {\r\n                    RegistrationSampleArno.push(item);\r\n                }\r\n            });\r\n            let npreregno = {\r\n                item: comboData.item,\r\n                label: comboData.label,\r\n                value: comboData.value\r\n            };\r\n            let sarno = comboData.item.sarno;\r\n            selectedRecord = {\r\n                ...selectedRecord, RegistrationSampleArno, RegistrationTest, npreregno\r\n                , sarno, ntransactionsamplecode, ntransactiontestcode, ssamplearno, stestsynonym\r\n            };\r\n            this.setState({ selectedRecord });\r\n        } else if (fieldName === \"ntransactionsamplecode\") {\r\n            lstRegistrationTest.map(item => {\r\n                if (item.item.ntransactionsamplecode === comboData.value) {\r\n                    RegistrationTest.push(item);\r\n                }\r\n            });\r\n            ntransactionsamplecode = {\r\n                item: comboData.item,\r\n                label: comboData.label,\r\n                value: comboData.value\r\n            }\r\n            ssamplearno = comboData.item.ssamplearno;\r\n            selectedRecord = {\r\n                ...selectedRecord, RegistrationTest, ntransactionsamplecode\r\n                , ssamplearno, ntransactiontestcode, stestsynonym\r\n            };\r\n            this.setState({ selectedRecord });\r\n        } else if (fieldName === \"ntransactiontestcode\") {\r\n            ntransactiontestcode = {\r\n                item: comboData.item,\r\n                label: comboData.label,\r\n                value: comboData.value\r\n            }\r\n            stestsynonym = comboData.item.stestsynonym;\r\n            selectedRecord = {\r\n                ...selectedRecord, ntransactiontestcode\r\n                , stestsynonym\r\n            }\r\n            this.setState({ selectedRecord });\r\n        } else if (fieldName === \"ncommentsubtypecode\") {\r\n            rsapi.post(\"/comments/getSampleTestCommentsListById\", {\r\n                userinfo: this.props.userInfo,\r\n                ncommentsubtypecode: comboData.value\r\n            })\r\n                .then(response => {\r\n                    let listSampleTestComments = response.data.SampleTestComments;\r\n                    const lstSampleTestComments = constructOptionList(listSampleTestComments || [], \"nsampletestcommentscode\", \"spredefinedname\", false, false, true);\r\n                    const SampleTestComments = lstSampleTestComments.get(\"OptionList\");\r\n                    selectedRecord[\"scommentsubtype\"] = comboData.label;\r\n                    selectedRecord[\"ncommentsubtypecode\"] = comboData;\r\n                    selectedRecord[\"nsampletestcommentscode\"] = \"\";\r\n                    selectedRecord[\"scomments\"] = \"\";\r\n                    selectedRecord[\"spredefinedname\"] = \"\";\r\n                    this.setState({\r\n                        SampleTestComments, selectedRecord,\r\n                    });\r\n                }).catch(error => {\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    } else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                    this.setState({\r\n                        loading: false\r\n                    });\r\n                });\r\n        } else if (fieldName === \"nsampletestcommentscode\") {\r\n            selectedRecord[\"nsampletestcommentscode\"] = comboData;\r\n            selectedRecord[\"spredefinedname\"] = comboData.label;\r\n            selectedRecord[\"scomments\"] = comboData.item && comboData.item.sdescription ? comboData.item.sdescription : \"\";\r\n            this.setState({ selectedRecord });\r\n        }\r\n    }\r\n\r\n    onInputOnChange = (event) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        selectedRecord[event.target.name] = event.target.value;\r\n        if (event.target.type === 'checkbox') {\r\n            if (event.target.name === \"nneedreport\") {\r\n                selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\r\n            }\r\n        }\r\n        else {\r\n            selectedRecord[event.target.name] = event.target.value;\r\n        }\r\n        if (selectedRecord[\"nneedreport\"] && selectedRecord[\"nneedreport\"] === transactionStatus.YES && selectedRecord[\"sfilename\"] !== undefined && selectedRecord[\"sfilename\"].length > 0) {\r\n            let fileFormat = false;\r\n            let requiredFileFormat = this.props.settings && this.props.settings[32] && this.props.settings[32].split(\",\");\r\n            let fileNameSplit = selectedRecord[\"sfilename\"] && Array.isArray(selectedRecord[\"sfilename\"]) ? selectedRecord[\"sfilename\"][0].name.split(\".\") : selectedRecord[\"sfilename\"].split(\".\");\r\n            requiredFileFormat.map(item => {\r\n                if (item.slice(1) === fileNameSplit[fileNameSplit.length - 1]) {\r\n                    fileFormat = true;\r\n                }\r\n            });\r\n            selectedRecord[\"nneedreport\"] = fileFormat ? selectedRecord[\"nneedreport\"] : transactionStatus.NO;\r\n            !fileFormat && toast.warn(this.props.intl.formatMessage({ id: \"IDS_REPORTSUPPORTSONLYFILEFORMATS\" }));\r\n        }\r\n        this.setState({ selectedRecord })\r\n    }\r\n\r\n    dataStateChange = (event) => {\r\n        this.setState({ dataState: event.dataState, dataResult: process(this.state.ReleaseTestCommentDetails, event.dataState) })\r\n    }\r\n\r\n    onSaveClick = (saveType, formRef) => {\r\n        if (this.state.loading === false) {\r\n            this.setState({ loading: true });\r\n            const formData = new FormData();\r\n            const selectedRecord = this.state.selectedRecord;\r\n            const userInfo = this.props.userInfo;\r\n            const inputData = {};\r\n            let commentArray = [];\r\n            // if (this.state.operation === 'update') {\r\n\r\n            // } else {\r\n            let comment = {};\r\n            comment[\"nreleasetestcommentcode\"] = selectedRecord.selectedReleaseTestComment && selectedRecord.selectedReleaseTestComment.nreleasetestcommentcode\r\n            comment[\"nformcode\"] = userInfo.nformcode;\r\n            comment[\"npreregno\"] = selectedRecord.npreregno.value;\r\n            comment[\"ntransactionsamplecode\"] = selectedRecord.ntransactionsamplecode.value;\r\n            comment[\"ntransactiontestcode\"] = selectedRecord.ntransactiontestcode.value;\r\n            comment[\"ncoaparentcode\"] = this.props.masterData.ncoaparentcode;\r\n            comment[\"nusercode\"] = userInfo.nusercode;\r\n            comment[\"nuserrolecode\"] = userInfo.nuserrole;\r\n            comment[\"ncommentsubtypecode\"] = selectedRecord.ncommentsubtypecode && selectedRecord.ncommentsubtypecode.value;\r\n            comment[\"nsampletestcommentscode\"] = selectedRecord.nsampletestcommentscode && selectedRecord.nsampletestcommentscode.value !== \"\" ? selectedRecord.nsampletestcommentscode.value : '-1';\r\n            comment[\"jsondata\"] = {\r\n                scomments: selectedRecord.scomments ? selectedRecord.scomments : \"\",\r\n                nneedreport: selectedRecord.nneedreport ? selectedRecord.nneedreport : transactionStatus.NO,\r\n                stestsynonym: selectedRecord.stestsynonym,\r\n                scommentsubtype: selectedRecord.ncommentsubtypecode && selectedRecord.ncommentsubtypecode.label,\r\n                spredefinedname: selectedRecord.nsampletestcommentscode && selectedRecord.nsampletestcommentscode.label !== \"\" ? selectedRecord.nsampletestcommentscode.label : '-',\r\n                ncommentsubtypecode: selectedRecord.ncommentsubtypecode && selectedRecord.ncommentsubtypecode,\r\n                nsampletestcommentscode: selectedRecord.nsampletestcommentscode ? selectedRecord.nsampletestcommentscode : '-'\r\n            }\r\n            comment[\"nsamplecommentscode\"] = selectedRecord.nsamplecommentscode ? selectedRecord.nsamplecommentscode.value : -1;\r\n            commentArray.push(comment);\r\n            inputData[\"testcomment\"] = commentArray;\r\n            // }\r\n            formData.append(\"userinfo\", JSON.stringify({\r\n                ...userInfo,\r\n                sformname: Lims_JSON_stringify(userInfo.sformname),\r\n                smodulename: Lims_JSON_stringify(userInfo.smodulename),\r\n                slanguagename: Lims_JSON_stringify(userInfo.slanguagename)\r\n            }));\r\n            formData.append(\"releasetestcomment\", JSON.stringify(commentArray));\r\n            formData.append(\"ncoaparentcode\", this.props.masterData.ncoaparentcode);\r\n\r\n            const requestUrl = rsapi.post(\"release/\" + this.state.operation + \"ReleaseTestComment\", formData);\r\n            return requestUrl\r\n                .then(response => {\r\n                    let ReleaseTestCommentDetails = response.data.ReleaseTestCommentDetails;\r\n                    let selectedRecord = {};\r\n                    let openModal = false;\r\n                    this.setState({ selectedRecord, openModal, ReleaseTestCommentDetails, loading: false });\r\n\r\n                }).catch(error => {\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    } else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                    this.setState({\r\n                        loading: false\r\n                    });\r\n                });\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport default connect(null, { viewAttachment })(injectIntl(ReleaseTestAttachment));"]},"metadata":{},"sourceType":"module"}