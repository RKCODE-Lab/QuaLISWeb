{"ast":null,"code":"import rsapi from '../rsapi';\nimport { DEFAULT_RETURN } from './LoginTypes';\nimport { sortData, constructOptionList, convertDateValuetoString, rearrangeDateFormat } from '../components/CommonScript'; //, getComboLabelValue, searchData\n\nimport { toast } from 'react-toastify';\nimport Axios from 'axios';\nimport { initRequest } from './LoginAction';\nimport { intl } from '../components/App';\nimport { transactionStatus } from '../components/Enumeration';\nexport function getTrainingCertificateDetail(trainingcertificate, fromDate, toDate, userInfo, masterData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    return rsapi.post(\"trainingcertificate/getTrainingCertificate\", {\n      ntrainingcode: trainingcertificate.ntrainingcode,\n      fromDate,\n      toDate,\n      \"userinfo\": userInfo\n    }).then(response => {\n      masterData = { ...masterData,\n        ...response.data\n      };\n      sortData(masterData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(intl.formatMessage({\n          id: error.message\n        }));\n      } else {\n        toast.warn(intl.formatMessage({\n          id: error.response\n        }));\n      }\n    });\n  };\n}\nexport function getTrainingCertificateComboService(screenName, operation, primaryKeyName, primaryKeyValue, masterData, userInfo, ncontrolCode) {\n  return function (dispatch) {\n    if (operation === \"create\" || operation === \"update\" || operation === \"reschedule\") {\n      const trainingcategoryService = rsapi.post(\"traningcategory/getTrainingCategory\", {\n        userinfo: userInfo\n      });\n      const techniqueService = rsapi.post(\"trainingcertificate/getTechnique\", {\n        userinfo: userInfo\n      });\n      const timeZoneService = rsapi.post(\"timezone/getTimeZone\");\n      const UTCtimeZoneService = rsapi.post(\"timezone/getLocalTimeByZone\", {\n        userinfo: userInfo\n      });\n      let urlArray = [techniqueService, trainingcategoryService, timeZoneService, UTCtimeZoneService];\n\n      if (operation === \"update\" || operation === \"reschedule\") {\n        const trainingcertificateServiceById = rsapi.post(\"trainingcertificate/getActiveTrainingCertificateById\", {\n          [primaryKeyName]: primaryKeyValue,\n          \"userinfo\": userInfo\n        }); //this.props.Login.userInfo\n\n        urlArray.push(trainingcertificateServiceById);\n        const trainingparticipantsById = rsapi.post(\"trainingcertificate/getTrainingParticipants\", {\n          [primaryKeyName]: primaryKeyValue,\n          \"userinfo\": userInfo\n        }); //this.props.Login.userInfo\n\n        urlArray.push(trainingparticipantsById);\n      }\n\n      dispatch(initRequest(true));\n      Axios.all(urlArray).then(response => {\n        let status = true;\n        let index;\n\n        if (operation === \"update\" || operation === \"reschedule\") {\n          index = response[5].data.TrainingParticipants.findIndex(item => item.ntransactionstatus === transactionStatus.INVITED);\n\n          if (index !== -1) {\n            status = operation === \"update\" ? false : true;\n          } else {\n            status = operation === \"reschedule\" ? false : true;\n          }\n        }\n\n        if (status === true) {\n          let selectedRecord = {\n            \"ntztrainingdate\": {\n              \"value\": userInfo.ntimezonecode,\n              \"label\": userInfo.stimezoneid\n            },\n            \"stztrainingdate\": userInfo.stimezoneid\n          };\n          const techniqueMap = constructOptionList(response[0].data || [], \"ntechniquecode\", \"stechniquename\", undefined, undefined, true);\n          const trainingcategoryMap = constructOptionList(response[1].data || [], \"ntrainingcategorycode\", \"strainingcategoryname\", undefined, undefined, true);\n          const timeZoneMap = constructOptionList(response[2].data || [], \"ntimezonecode\", \"stimezoneid\", undefined, undefined, true);\n          const trainingcategoryList = trainingcategoryMap.get(\"OptionList\");\n          const techniqueList = techniqueMap.get(\"OptionList\");\n          const timeZoneList = timeZoneMap.get(\"OptionList\");\n          const currentTime = rearrangeDateFormat(userInfo, response[3].data);\n\n          if (operation === \"update\" || operation === \"reschedule\") {\n            selectedRecord = response[4].data;\n            selectedRecord[\"dtrainingdatetime\"] = rearrangeDateFormat(userInfo, response[4].data.strainingdatetime);\n            selectedRecord[\"ntrainingcategorycode\"] = {\n              \"value\": response[4].data.ntrainingcategorycode,\n              \"label\": response[4].data.strainingcategoryname\n            };\n            selectedRecord[\"ntechniquecode\"] = {\n              \"value\": response[4].data.ntechniquecode,\n              \"label\": response[4].data.stechniquename\n            };\n            selectedRecord[\"ntztrainingdate\"] = {\n              \"value\": response[4].data.ntztrainingdate,\n              \"label\": response[4].data.stimezoneid\n            };\n          } else {\n            selectedRecord[\"ntransactionstatus\"] = transactionStatus.ACTIVE;\n            selectedRecord[\"ntrainingcategorycode\"] = trainingcategoryMap.get(\"DefaultValue\");\n          }\n\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              currentTime,\n              trainingcategoryList,\n              techniqueList,\n              timeZoneList,\n              operation,\n              screenName,\n              selectedRecord,\n              openModal: true,\n              ncontrolCode,\n              loading: false\n            }\n          });\n        } else {\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              loading: false\n            }\n          });\n          toast.warn(intl.formatMessage({\n            id: operation === \"update\" ? \"IDS_INVITEDPARTICIPANTSCANNOTBEEDITED\" : \"IDS_INVITEPARTICIPANTS\"\n          }));\n        }\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(intl.formatMessage({\n            id: error.message\n          }));\n        } else {\n          toast.warn(intl.formatMessage({\n            id: error.response.data\n          }));\n        }\n      });\n    }\n  };\n}\nexport function getTrainingParticipantsComboDataService(trainingparam, masterData) {\n  return function (dispatch) {\n    if (masterData.SelectedTrainingCertificate.ntransactionstatus !== transactionStatus.CANCELLED) {\n      const section = rsapi.post(\"section/getSection\", {\n        \"userinfo\": trainingparam.userInfo\n      });\n      let urlArray = [];\n      let selectedId = null;\n      urlArray = [section];\n      dispatch(initRequest(true));\n      Axios.all(urlArray).then(Axios.spread((...response) => {\n        let selectedRecord = {};\n        let nsectioncode = [];\n        let nsitecode = [];\n        let sectionusersList = [];\n        const SectionMap = constructOptionList(response[0].data || [], \"nsectioncode\", \"ssectionname\", undefined, undefined, true);\n        const sectionList = SectionMap.get(\"OptionList\");\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            section: sectionList,\n            sectionUsers: trainingparam.operation === \"update\" ? sectionusersList : [],\n            nsectioncode: nsectioncode,\n            nsitecode: nsitecode,\n            selectedRecord: trainingparam.operation === \"update\" ? selectedRecord : undefined,\n            operation: trainingparam.operation,\n            screenName: \"IDS_PARTICIPANTSDETAILS\",\n            openChildModal: true,\n            ncontrolCode: trainingparam.ncontrolCode,\n            loading: false,\n            selectedId\n          }\n        });\n      })).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(intl.formatMessage({\n            id: error.message\n          }));\n        } else {\n          toast.warn(intl.formatMessage({\n            id: error.response.data\n          }));\n        }\n      });\n    } else {\n      toast.warn(intl.formatMessage({\n        id: \"IDS_TRAININGCANCELED\"\n      }));\n    }\n  };\n}\nexport function reloadTrainingCertificate(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"trainingcertificate/getTrainingCertificate\", { ...inputParam.inputData\n    }).then(response => {\n      let responseData = { ...response.data\n      };\n      responseData = sortData(responseData);\n      let masterData = { ...inputParam.masterData,\n        ...responseData\n      };\n\n      if (inputParam.searchRef !== undefined && inputParam.searchRef.current !== null) {\n        inputParam.searchRef.current.value = \"\";\n        masterData['searchedData'] = undefined;\n      }\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false,\n          showFilter: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getSectionUsersDataService(nSectionCode, selectedRecord, userInfo, SelectedTrainingCertificate) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"trainingcertificate/getSectionUsers\", {\n      \"userinfo\": userInfo,\n      \"nsectioncode\": parseInt(nSectionCode),\n      \"ntrainingcode\": parseInt(SelectedTrainingCertificate)\n    }).then(response => {\n      let nusercode = []; // const sectionusersMap = constructOptionList(response.data.SectionUsers || [], \"nusercode\",\n      //     \"sfullname\", undefined, undefined, true);\n\n      const sectionusersList = response.data.SectionUsers;\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          sectionUsers: sectionusersList,\n          nusercode: nusercode,\n          selectedRecord,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n    });\n  };\n}\nexport function getTrainingParticipantsInvite(trainingparam, selectedRecord, masterData, operation) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"trainingcertificate/getInviteParticipants\", {\n      \"userinfo\": trainingparam.userInfo,\n      \"ntrainingcode\": parseInt(masterData.SelectedTrainingCertificate.ntrainingcode)\n    }).then(response => {\n      let nusercode = []; // const inviteUsersMap = constructOptionList(response.data.InvitedParticipants || [], \"nusercode\",\n      //     \"sfullname\", undefined, undefined, true);\n      // const inviteUsersList = inviteUsersMap.get(\"OptionList\");\n\n      const inviteUsersList = response.data.InvitedParticipants;\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          usersStatus: inviteUsersList,\n          nusercode: nusercode,\n          loading: false,\n          openChildModal: true,\n          screenName: \"IDS_INVITEDPARTICIPANTSDETAILS\",\n          nFlag: 2,\n          selectedRecord: selectedRecord,\n          operation: operation\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getTrainingParticipantsCancel(trainingparam, selectedRecord, masterData, operation) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"trainingcertificate/getCancelParticipants\", {\n      \"userinfo\": trainingparam.userInfo,\n      \"ntrainingcode\": parseInt(masterData.SelectedTrainingCertificate.ntrainingcode)\n    }).then(response => {\n      let nusercode = []; // const cancelUsersMap = constructOptionList(response.data.CancelParticipants || [], \"nusercode\",\n      //     \"sfullname\", undefined, undefined, true);\n\n      const cancelUsersList = response.data.CancelParticipants;\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          usersStatus: cancelUsersList,\n          nusercode: nusercode,\n          loading: false,\n          openChildModal: true,\n          screenName: \"IDS_CANCELPARTICIPANTSDETAILS\",\n          nFlag: 3,\n          selectedRecord: selectedRecord,\n          operation: operation\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function rescheduleTrainingCertificate(inputParam, masterData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"trainingcertificate/rescheduleTrainingCertificate\", { ...inputParam.inputData\n    }).then(response => {\n      let masterData = { ...response.data\n      };\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false,\n          showFilter: false,\n          openModal: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getAddValidityExpiry(screenName, operation, masterData, userInfo, ncontrolCode) {\n  return function (dispatch) {\n    //if (masterData.SelectedTestPriceVersion.ntransactionstatus === transactionStatus.DRAFT){     \n    if (masterData.SelectedTrainingCertificate.ntransactionstatus !== transactionStatus.CONDUCTED && masterData.SelectedTrainingCertificate.ntransactionstatus !== transactionStatus.COMPLETED && masterData.SelectedTrainingCertificate.ntransactionstatus !== transactionStatus.CANCELLED) {\n      dispatch(initRequest(true));\n      let obj = convertDateValuetoString(masterData.SelectedTrainingCertificate.strainingdatetime ? masterData.SelectedTrainingCertificate.strainingdatetime : new Date(), masterData.SelectedTrainingCertificate.strainingdatetime ? masterData.SelectedTrainingCertificate.strainingdatetime : new Date(), userInfo);\n      masterData.SelectedTrainingCertificate.stemptrainingdatetime = obj.toDate + \"Z\";\n      let objdate = convertDateValuetoString(masterData.FromDate, masterData.ToDate, userInfo);\n      let fromDate = objdate.fromDate;\n      let toDate = objdate.toDate;\n      rsapi.post(\"trainingcertificate/validateConductAndTrainingDate\", {\n        \"trainingcertificate\": masterData.SelectedTrainingCertificate,\n        \"fromDate\": fromDate,\n        \"toDate\": toDate,\n        userinfo: userInfo\n      }).then(response => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            operation,\n            screenName,\n            ncontrolCode,\n            loading: false\n          }\n        }); //rsapi.post(\"trainingcertificate/getPeriod\",{userinfo:userInfo})\n\n        rsapi.post(\"/period/getPeriodByControl\", {\n          \"ncontrolcode\": ncontrolCode,\n          \"userinfo\": userInfo\n        }).then(response => {\n          const PeriodMap = constructOptionList(response.data || [], \"nperiodcode\", \"speriodname\", undefined, undefined, true);\n          const periodList = PeriodMap.get(\"OptionList\");\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              period: periodList,\n              openModal: true,\n              operation,\n              screenName,\n              ncontrolCode,\n              loading: false\n            }\n          });\n        }).catch(error => {\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              loading: false\n            }\n          });\n\n          if (error.response.status === 500) {\n            toast.error(error.message);\n          } else {\n            toast.warn(error.response.data);\n          }\n        });\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(error.response.data);\n        }\n      });\n    } else {\n      if (masterData.SelectedTrainingCertificate.ntransactionstatus === transactionStatus.CONDUCTED) {\n        toast.warn(intl.formatMessage({\n          id: \"IDS_TESTTRAININGALREADYCONDUCTED\"\n        }));\n      }\n\n      if (masterData.SelectedTrainingCertificate.ntransactionstatus === transactionStatus.COMPLETED) {\n        toast.warn(intl.formatMessage({\n          id: \"IDS_TESTTRAININGALREADYCOMPLETED\"\n        }));\n      }\n\n      if (masterData.SelectedTrainingCertificate.ntransactionstatus === transactionStatus.CANCELLED) {\n        toast.warn(intl.formatMessage({\n          id: \"IDS_TESTTRAININGALREADYCANCELLED\"\n        }));\n      }\n    }\n  };\n}","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/actions/TrainingCertificateAction.js"],"names":["rsapi","DEFAULT_RETURN","sortData","constructOptionList","convertDateValuetoString","rearrangeDateFormat","toast","Axios","initRequest","intl","transactionStatus","getTrainingCertificateDetail","trainingcertificate","fromDate","toDate","userInfo","masterData","dispatch","post","ntrainingcode","then","response","data","type","payload","loading","catch","error","status","formatMessage","id","message","warn","getTrainingCertificateComboService","screenName","operation","primaryKeyName","primaryKeyValue","ncontrolCode","trainingcategoryService","userinfo","techniqueService","timeZoneService","UTCtimeZoneService","urlArray","trainingcertificateServiceById","push","trainingparticipantsById","all","index","TrainingParticipants","findIndex","item","ntransactionstatus","INVITED","selectedRecord","ntimezonecode","stimezoneid","techniqueMap","undefined","trainingcategoryMap","timeZoneMap","trainingcategoryList","get","techniqueList","timeZoneList","currentTime","strainingdatetime","ntrainingcategorycode","strainingcategoryname","ntechniquecode","stechniquename","ntztrainingdate","ACTIVE","openModal","getTrainingParticipantsComboDataService","trainingparam","SelectedTrainingCertificate","CANCELLED","section","selectedId","spread","nsectioncode","nsitecode","sectionusersList","SectionMap","sectionList","sectionUsers","openChildModal","reloadTrainingCertificate","inputParam","inputData","responseData","searchRef","current","value","showFilter","getSectionUsersDataService","nSectionCode","parseInt","nusercode","SectionUsers","getTrainingParticipantsInvite","inviteUsersList","InvitedParticipants","usersStatus","nFlag","getTrainingParticipantsCancel","cancelUsersList","CancelParticipants","rescheduleTrainingCertificate","getAddValidityExpiry","CONDUCTED","COMPLETED","obj","Date","stemptrainingdatetime","objdate","FromDate","ToDate","PeriodMap","periodList","period"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,UAAlB;AACA,SAASC,cAAT,QAA+B,cAA/B;AACA,SAASC,QAAT,EAAmBC,mBAAnB,EAAuCC,wBAAvC,EAAiEC,mBAAjE,QAA4F,4BAA5F,C,CAAwH;;AACxH,SAASC,KAAT,QAAsB,gBAAtB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,WAAT,QAA4B,eAA5B;AACA,SAASC,IAAT,QAAqB,mBAArB;AACA,SAASC,iBAAT,QAAkC,2BAAlC;AAEA,OAAO,SAASC,4BAAT,CAAsCC,mBAAtC,EAA2DC,QAA3D,EAAqEC,MAArE,EAA6EC,QAA7E,EAAuFC,UAAvF,EAAmG;AACtG,SAAO,UAAUC,QAAV,EAAoB;AACvBA,IAAAA,QAAQ,CAACT,WAAW,CAAC,IAAD,CAAZ,CAAR;AAEA,WAAOR,KAAK,CAACkB,IAAN,CAAW,4CAAX,EAAyD;AAC5DC,MAAAA,aAAa,EAAEP,mBAAmB,CAACO,aADyB;AACVN,MAAAA,QADU;AACAC,MAAAA,MADA;AAE5D,kBAAYC;AAFgD,KAAzD,EAIFK,IAJE,CAIGC,QAAQ,IAAI;AAEdL,MAAAA,UAAU,GAAG,EAAE,GAAGA,UAAL;AAAiB,WAAGK,QAAQ,CAACC;AAA7B,OAAb;AACApB,MAAAA,QAAQ,CAACc,UAAD,CAAR;AACAC,MAAAA,QAAQ,CAAC;AAAEM,QAAAA,IAAI,EAAEtB,cAAR;AAAwBuB,QAAAA,OAAO,EAAE;AAAER,UAAAA,UAAF;AAAcS,UAAAA,OAAO,EAAE;AAAvB;AAAjC,OAAD,CAAR;AACH,KATE,EAUFC,KAVE,CAUIC,KAAK,IAAI;AACZV,MAAAA,QAAQ,CAAC;AAAEM,QAAAA,IAAI,EAAEtB,cAAR;AAAwBuB,QAAAA,OAAO,EAAE;AAAEC,UAAAA,OAAO,EAAE;AAAX;AAAjC,OAAD,CAAR;;AACA,UAAIE,KAAK,CAACN,QAAN,CAAeO,MAAf,KAA0B,GAA9B,EAAmC;AAC/BtB,QAAAA,KAAK,CAACqB,KAAN,CAAYlB,IAAI,CAACoB,aAAL,CAAmB;AAAEC,UAAAA,EAAE,EAAEH,KAAK,CAACI;AAAZ,SAAnB,CAAZ;AACH,OAFD,MAGK;AAEDzB,QAAAA,KAAK,CAAC0B,IAAN,CAAWvB,IAAI,CAACoB,aAAL,CAAmB;AAAEC,UAAAA,EAAE,EAAEH,KAAK,CAACN;AAAZ,SAAnB,CAAX;AACH;AAEJ,KApBE,CAAP;AAqBH,GAxBD;AAyBH;AAED,OAAO,SAASY,kCAAT,CAA4CC,UAA5C,EAAwDC,SAAxD,EAAmEC,cAAnE,EAAmFC,eAAnF,EAAoGrB,UAApG,EAAgHD,QAAhH,EAA0HuB,YAA1H,EAAwI;AAC3I,SAAO,UAAUrB,QAAV,EAAoB;AACvB,QAAIkB,SAAS,KAAK,QAAd,IAA2BA,SAAS,KAAK,QAAd,IAA0BA,SAAS,KAAK,YAAvE,EAAsF;AAElF,YAAMI,uBAAuB,GAAGvC,KAAK,CAACkB,IAAN,CAAW,qCAAX,EAAkD;AAAEsB,QAAAA,QAAQ,EAAEzB;AAAZ,OAAlD,CAAhC;AACA,YAAM0B,gBAAgB,GAAGzC,KAAK,CAACkB,IAAN,CAAW,kCAAX,EAA+C;AAAEsB,QAAAA,QAAQ,EAAEzB;AAAZ,OAA/C,CAAzB;AACA,YAAM2B,eAAe,GAAG1C,KAAK,CAACkB,IAAN,CAAW,sBAAX,CAAxB;AACA,YAAMyB,kBAAkB,GAAG3C,KAAK,CAACkB,IAAN,CAAW,6BAAX,EAA0C;AAAEsB,QAAAA,QAAQ,EAAEzB;AAAZ,OAA1C,CAA3B;AACA,UAAI6B,QAAQ,GAAG,CAACH,gBAAD,EAAmBF,uBAAnB,EAA4CG,eAA5C,EAA6DC,kBAA7D,CAAf;;AACA,UAAIR,SAAS,KAAK,QAAd,IAA0BA,SAAS,KAAK,YAA5C,EAA0D;AAEtD,cAAMU,8BAA8B,GAAG7C,KAAK,CAACkB,IAAN,CAAW,sDAAX,EAAmE;AAAE,WAACkB,cAAD,GAAkBC,eAApB;AAAqC,sBAAYtB;AAAjD,SAAnE,CAAvC,CAFsD,CAEiH;;AACvK6B,QAAAA,QAAQ,CAACE,IAAT,CAAcD,8BAAd;AACA,cAAME,wBAAwB,GAAG/C,KAAK,CAACkB,IAAN,CAAW,6CAAX,EAA0D;AAAE,WAACkB,cAAD,GAAkBC,eAApB;AAAqC,sBAAYtB;AAAjD,SAA1D,CAAjC,CAJsD,CAIkG;;AACxJ6B,QAAAA,QAAQ,CAACE,IAAT,CAAcC,wBAAd;AACH;;AAED9B,MAAAA,QAAQ,CAACT,WAAW,CAAC,IAAD,CAAZ,CAAR;AACAD,MAAAA,KAAK,CAACyC,GAAN,CAAUJ,QAAV,EACKxB,IADL,CACUC,QAAQ,IAAI;AAClB,YAAIO,MAAM,GAAG,IAAb;AACA,YAAIqB,KAAJ;;AACA,YAAGd,SAAS,KAAK,QAAd,IAA0BA,SAAS,KAAK,YAA3C,EAAwD;AACnDc,UAAAA,KAAK,GAAG5B,QAAQ,CAAC,CAAD,CAAR,CAAYC,IAAZ,CAAiB4B,oBAAjB,CAAsCC,SAAtC,CAAiDC,IAAI,IAC1DA,IAAI,CAACC,kBAAL,KAA4B3C,iBAAiB,CAAC4C,OADzC,CAAR;;AAGD,cAAGL,KAAK,KAAK,CAAC,CAAd,EAAgB;AACdrB,YAAAA,MAAM,GAAGO,SAAS,KAAK,QAAd,GAAyB,KAAzB,GAAkC,IAA3C;AACD,WAFD,MAEM;AACFP,YAAAA,MAAM,GAAGO,SAAS,KAAK,YAAd,GAA6B,KAA7B,GAAqC,IAA9C;AACH;AACJ;;AAEG,YAAGP,MAAM,KAAK,IAAd,EAAmB;AAEnB,cAAI2B,cAAc,GAAG;AACjB,+BAAmB;AACf,uBAASxC,QAAQ,CAACyC,aADH;AAEf,uBAASzC,QAAQ,CAAC0C;AAFH,aADF;AAKjB,+BAAmB1C,QAAQ,CAAC0C;AALX,WAArB;AAQA,gBAAMC,YAAY,GAAGvD,mBAAmB,CAACkB,QAAQ,CAAC,CAAD,CAAR,CAAYC,IAAZ,IAAoB,EAArB,EAAyB,gBAAzB,EACpC,gBADoC,EAClBqC,SADkB,EACPA,SADO,EACI,IADJ,CAAxC;AAEA,gBAAMC,mBAAmB,GAAGzD,mBAAmB,CAACkB,QAAQ,CAAC,CAAD,CAAR,CAAYC,IAAZ,IAAoB,EAArB,EAAyB,uBAAzB,EAC3C,uBAD2C,EAClBqC,SADkB,EACPA,SADO,EACI,IADJ,CAA/C;AAEA,gBAAME,WAAW,GAAG1D,mBAAmB,CAACkB,QAAQ,CAAC,CAAD,CAAR,CAAYC,IAAZ,IAAoB,EAArB,EAAyB,eAAzB,EACnC,aADmC,EACpBqC,SADoB,EACTA,SADS,EACE,IADF,CAAvC;AAEA,gBAAMG,oBAAoB,GAAGF,mBAAmB,CAACG,GAApB,CAAwB,YAAxB,CAA7B;AACA,gBAAMC,aAAa,GAAGN,YAAY,CAACK,GAAb,CAAiB,YAAjB,CAAtB;AACA,gBAAME,YAAY,GAAGJ,WAAW,CAACE,GAAZ,CAAgB,YAAhB,CAArB;AACA,gBAAMG,WAAW,GAAG7D,mBAAmB,CAACU,QAAD,EAAWM,QAAQ,CAAC,CAAD,CAAR,CAAYC,IAAvB,CAAvC;;AACA,cAAIa,SAAS,KAAK,QAAd,IAA0BA,SAAS,KAAK,YAA5C,EAA0D;AACtDoB,YAAAA,cAAc,GAAGlC,QAAQ,CAAC,CAAD,CAAR,CAAYC,IAA7B;AAEAiC,YAAAA,cAAc,CAAC,mBAAD,CAAd,GAAsClD,mBAAmB,CAACU,QAAD,EAAWM,QAAQ,CAAC,CAAD,CAAR,CAAYC,IAAZ,CAAiB6C,iBAA5B,CAAzD;AACAZ,YAAAA,cAAc,CAAC,uBAAD,CAAd,GAA0C;AAAE,uBAASlC,QAAQ,CAAC,CAAD,CAAR,CAAYC,IAAZ,CAAiB8C,qBAA5B;AAAmD,uBAAS/C,QAAQ,CAAC,CAAD,CAAR,CAAYC,IAAZ,CAAiB+C;AAA7E,aAA1C;AACAd,YAAAA,cAAc,CAAC,gBAAD,CAAd,GAAmC;AAAE,uBAASlC,QAAQ,CAAC,CAAD,CAAR,CAAYC,IAAZ,CAAiBgD,cAA5B;AAA4C,uBAASjD,QAAQ,CAAC,CAAD,CAAR,CAAYC,IAAZ,CAAiBiD;AAAtE,aAAnC;AACAhB,YAAAA,cAAc,CAAC,iBAAD,CAAd,GAAoC;AAAE,uBAASlC,QAAQ,CAAC,CAAD,CAAR,CAAYC,IAAZ,CAAiBkD,eAA5B;AAA6C,uBAASnD,QAAQ,CAAC,CAAD,CAAR,CAAYC,IAAZ,CAAiBmC;AAAvE,aAApC;AACH,WAPD,MAQK;AACDF,YAAAA,cAAc,CAAC,oBAAD,CAAd,GAAuC7C,iBAAiB,CAAC+D,MAAzD;AACAlB,YAAAA,cAAc,CAAC,uBAAD,CAAd,GAA0CK,mBAAmB,CAACG,GAApB,CAAwB,cAAxB,CAA1C;AACH;;AAED9C,UAAAA,QAAQ,CAAC;AACLM,YAAAA,IAAI,EAAEtB,cADD;AACiBuB,YAAAA,OAAO,EAAE;AAC3B0C,cAAAA,WAD2B;AAE3BJ,cAAAA,oBAF2B;AAELE,cAAAA,aAFK;AAEUC,cAAAA,YAFV;AAG3B9B,cAAAA,SAH2B;AAGhBD,cAAAA,UAHgB;AAGJqB,cAAAA,cAHI;AAGYmB,cAAAA,SAAS,EAAE,IAHvB;AAI3BpC,cAAAA,YAJ2B;AAIbb,cAAAA,OAAO,EAAE;AAJI;AAD1B,WAAD,CAAR;AAQH,SAzCG,MA0CA;AACAR,UAAAA,QAAQ,CAAC;AAAEM,YAAAA,IAAI,EAAEtB,cAAR;AAAwBuB,YAAAA,OAAO,EAAE;AAAEC,cAAAA,OAAO,EAAE;AAAX;AAAjC,WAAD,CAAR;AACAnB,UAAAA,KAAK,CAAC0B,IAAN,CAAWvB,IAAI,CAACoB,aAAL,CAAmB;AAAEC,YAAAA,EAAE,EAAGK,SAAS,KAAK,QAAd,GAAyB,uCAAzB,GAAmE;AAA1E,WAAnB,CAAX;AACH;AACJ,OA7DD,EA+DKT,KA/DL,CA+DWC,KAAK,IAAI;AACZV,QAAAA,QAAQ,CAAC;AAAEM,UAAAA,IAAI,EAAEtB,cAAR;AAAwBuB,UAAAA,OAAO,EAAE;AAAEC,YAAAA,OAAO,EAAE;AAAX;AAAjC,SAAD,CAAR;;AACA,YAAIE,KAAK,CAACN,QAAN,CAAeO,MAAf,KAA0B,GAA9B,EAAmC;AAC/BtB,UAAAA,KAAK,CAACqB,KAAN,CAAYlB,IAAI,CAACoB,aAAL,CAAmB;AAAEC,YAAAA,EAAE,EAAEH,KAAK,CAACI;AAAZ,WAAnB,CAAZ;AACH,SAFD,MAGK;AAEDzB,UAAAA,KAAK,CAAC0B,IAAN,CAAWvB,IAAI,CAACoB,aAAL,CAAmB;AAAEC,YAAAA,EAAE,EAAEH,KAAK,CAACN,QAAN,CAAeC;AAArB,WAAnB,CAAX;AACH;AACJ,OAxEL;AAyEH;AAEJ,GA5FD;AA6FH;AAGD,OAAO,SAASqD,uCAAT,CAAiDC,aAAjD,EAAgE5D,UAAhE,EAA4E;AAC/E,SAAO,UAAUC,QAAV,EAAoB;AAEvB,QAAID,UAAU,CAAC6D,2BAAX,CAAuCxB,kBAAvC,KAA8D3C,iBAAiB,CAACoE,SAApF,EAA+F;AAE3F,YAAMC,OAAO,GAAG/E,KAAK,CAACkB,IAAN,CAAW,oBAAX,EAAiC;AAAE,oBAAY0D,aAAa,CAAC7D;AAA5B,OAAjC,CAAhB;AAEA,UAAI6B,QAAQ,GAAG,EAAf;AAEA,UAAIoC,UAAU,GAAG,IAAjB;AAEApC,MAAAA,QAAQ,GAAG,CAACmC,OAAD,CAAX;AAEA9D,MAAAA,QAAQ,CAACT,WAAW,CAAC,IAAD,CAAZ,CAAR;AACAD,MAAAA,KAAK,CAACyC,GAAN,CAAUJ,QAAV,EACKxB,IADL,CACUb,KAAK,CAAC0E,MAAN,CAAa,CAAC,GAAG5D,QAAJ,KAAiB;AAEhC,YAAIkC,cAAc,GAAG,EAArB;AACA,YAAI2B,YAAY,GAAG,EAAnB;AACA,YAAIC,SAAS,GAAG,EAAhB;AAEA,YAAIC,gBAAgB,GAAG,EAAvB;AAEA,cAAMC,UAAU,GAAGlF,mBAAmB,CAACkB,QAAQ,CAAC,CAAD,CAAR,CAAYC,IAAZ,IAAoB,EAArB,EAAyB,cAAzB,EAClC,cADkC,EAClBqC,SADkB,EACPA,SADO,EACI,IADJ,CAAtC;AAGA,cAAM2B,WAAW,GAAGD,UAAU,CAACtB,GAAX,CAAe,YAAf,CAApB;AAIA9C,QAAAA,QAAQ,CAAC;AACLM,UAAAA,IAAI,EAAEtB,cADD;AAELuB,UAAAA,OAAO,EAAE;AACLuD,YAAAA,OAAO,EAAEO,WADJ;AACiBC,YAAAA,YAAY,EAAEX,aAAa,CAACzC,SAAd,KAA4B,QAA5B,GAAuCiD,gBAAvC,GAA0D,EADzF;AAELF,YAAAA,YAAY,EAAEA,YAFT;AAEuBC,YAAAA,SAAS,EAAEA,SAFlC;AAGL5B,YAAAA,cAAc,EAAEqB,aAAa,CAACzC,SAAd,KAA4B,QAA5B,GAAuCoB,cAAvC,GAAwDI,SAHnE;AAG8ExB,YAAAA,SAAS,EAAEyC,aAAa,CAACzC,SAHvG;AAILD,YAAAA,UAAU,EAAE,yBAJP;AAKLsD,YAAAA,cAAc,EAAE,IALX;AAKiBlD,YAAAA,YAAY,EAAEsC,aAAa,CAACtC,YAL7C;AAMLb,YAAAA,OAAO,EAAE,KANJ;AAMWuD,YAAAA;AANX;AAFJ,SAAD,CAAR;AAWH,OA1BK,CADV,EA6BKtD,KA7BL,CA6BWC,KAAK,IAAI;AACZV,QAAAA,QAAQ,CAAC;AAAEM,UAAAA,IAAI,EAAEtB,cAAR;AAAwBuB,UAAAA,OAAO,EAAE;AAAEC,YAAAA,OAAO,EAAE;AAAX;AAAjC,SAAD,CAAR;;AACA,YAAIE,KAAK,CAACN,QAAN,CAAeO,MAAf,KAA0B,GAA9B,EAAmC;AAC/BtB,UAAAA,KAAK,CAACqB,KAAN,CAAYlB,IAAI,CAACoB,aAAL,CAAmB;AAAEC,YAAAA,EAAE,EAAEH,KAAK,CAACI;AAAZ,WAAnB,CAAZ;AACH,SAFD,MAGK;AACDzB,UAAAA,KAAK,CAAC0B,IAAN,CAAWvB,IAAI,CAACoB,aAAL,CAAmB;AAAEC,YAAAA,EAAE,EAAEH,KAAK,CAACN,QAAN,CAAeC;AAArB,WAAnB,CAAX;AACH;AACJ,OArCL;AAsCH,KAjDD,MAkDK;AAEDhB,MAAAA,KAAK,CAAC0B,IAAN,CAAWvB,IAAI,CAACoB,aAAL,CAAmB;AAAEC,QAAAA,EAAE,EAAE;AAAN,OAAnB,CAAX;AACH;AACJ,GAxDD;AA0DH;AAQD,OAAO,SAAS2D,yBAAT,CAAmCC,UAAnC,EAA+C;AAClD,SAAO,UAAUzE,QAAV,EAAoB;AACvBA,IAAAA,QAAQ,CAACT,WAAW,CAAC,IAAD,CAAZ,CAAR;AACAR,IAAAA,KAAK,CAACkB,IAAN,CAAW,4CAAX,EAAyD,EAAE,GAAGwE,UAAU,CAACC;AAAhB,KAAzD,EACKvE,IADL,CACUC,QAAQ,IAAI;AACd,UAAIuE,YAAY,GAAG,EAAE,GAAGvE,QAAQ,CAACC;AAAd,OAAnB;AACAsE,MAAAA,YAAY,GAAG1F,QAAQ,CAAC0F,YAAD,CAAvB;AACA,UAAI5E,UAAU,GAAG,EACb,GAAG0E,UAAU,CAAC1E,UADD;AAEb,WAAG4E;AAFU,OAAjB;;AAIA,UAAIF,UAAU,CAACG,SAAX,KAAyBlC,SAAzB,IAAsC+B,UAAU,CAACG,SAAX,CAAqBC,OAArB,KAAiC,IAA3E,EAAiF;AAC7EJ,QAAAA,UAAU,CAACG,SAAX,CAAqBC,OAArB,CAA6BC,KAA7B,GAAqC,EAArC;AACA/E,QAAAA,UAAU,CAAC,cAAD,CAAV,GAA6B2C,SAA7B;AACH;;AACD1C,MAAAA,QAAQ,CAAC;AACLM,QAAAA,IAAI,EAAEtB,cADD;AACiBuB,QAAAA,OAAO,EAAE;AAC3BR,UAAAA,UAD2B;AAE3BS,UAAAA,OAAO,EAAE,KAFkB;AAG3BuE,UAAAA,UAAU,EAAE;AAHe;AAD1B,OAAD,CAAR;AAOH,KAnBL,EAoBKtE,KApBL,CAoBWC,KAAK,IAAI;AACZV,MAAAA,QAAQ,CAAC;AAAEM,QAAAA,IAAI,EAAEtB,cAAR;AAAwBuB,QAAAA,OAAO,EAAE;AAAEC,UAAAA,OAAO,EAAE;AAAX;AAAjC,OAAD,CAAR;;AACA,UAAIE,KAAK,CAACN,QAAN,CAAeO,MAAf,KAA0B,GAA9B,EAAmC;AAC/BtB,QAAAA,KAAK,CAACqB,KAAN,CAAYA,KAAK,CAACI,OAAlB;AACH,OAFD,MAGK;AACDzB,QAAAA,KAAK,CAAC0B,IAAN,CAAWL,KAAK,CAACN,QAAN,CAAeC,IAA1B;AACH;AACJ,KA5BL;AA6BH,GA/BD;AAgCH;AAED,OAAO,SAAS2E,0BAAT,CAAoCC,YAApC,EAAkD3C,cAAlD,EAAkExC,QAAlE,EAA4E8D,2BAA5E,EAAyG;AAC5G,SAAO,UAAU5D,QAAV,EAAoB;AACvBA,IAAAA,QAAQ,CAACT,WAAW,CAAC,IAAD,CAAZ,CAAR;AACAR,IAAAA,KAAK,CAACkB,IAAN,CAAW,qCAAX,EAAkD;AAAE,kBAAYH,QAAd;AAAwB,sBAAgBoF,QAAQ,CAACD,YAAD,CAAhD;AAAgE,uBAAiBC,QAAQ,CAACtB,2BAAD;AAAzF,KAAlD,EACKzD,IADL,CACUC,QAAQ,IAAI;AAEd,UAAI+E,SAAS,GAAG,EAAhB,CAFc,CAId;AACA;;AAEA,YAAMhB,gBAAgB,GAAG/D,QAAQ,CAACC,IAAT,CAAc+E,YAAvC;AAEApF,MAAAA,QAAQ,CAAC;AACLM,QAAAA,IAAI,EAAEtB,cADD;AAELuB,QAAAA,OAAO,EAAE;AACL+D,UAAAA,YAAY,EAAEH,gBADT;AAC2BgB,UAAAA,SAAS,EAAEA,SADtC;AACiD7C,UAAAA,cADjD;AACiE9B,UAAAA,OAAO,EAAE;AAD1E;AAFJ,OAAD,CAAR;AAOH,KAjBL,EAiBOC,KAjBP,CAiBaC,KAAK,IAAI;AACdV,MAAAA,QAAQ,CAAC;AAAEM,QAAAA,IAAI,EAAEtB,cAAR;AAAwBuB,QAAAA,OAAO,EAAE;AAAEC,UAAAA,OAAO,EAAE;AAAX;AAAjC,OAAD,CAAR;AAEH,KApBL;AAqBH,GAvBD;AAwBH;AACD,OAAO,SAAS6E,6BAAT,CAAuC1B,aAAvC,EAAsDrB,cAAtD,EAAsEvC,UAAtE,EAAkFmB,SAAlF,EAA6F;AAChG,SAAO,UAAUlB,QAAV,EAAoB;AACvBA,IAAAA,QAAQ,CAACT,WAAW,CAAC,IAAD,CAAZ,CAAR;AACAR,IAAAA,KAAK,CAACkB,IAAN,CAAW,2CAAX,EAAwD;AAAE,kBAAY0D,aAAa,CAAC7D,QAA5B;AAAsC,uBAAiBoF,QAAQ,CAACnF,UAAU,CAAC6D,2BAAX,CAAuC1D,aAAxC;AAA/D,KAAxD,EACKC,IADL,CACUC,QAAQ,IAAI;AAEd,UAAI+E,SAAS,GAAG,EAAhB,CAFc,CAId;AACA;AAEA;;AACA,YAAMG,eAAe,GAAGlF,QAAQ,CAACC,IAAT,CAAckF,mBAAtC;AAEAvF,MAAAA,QAAQ,CAAC;AACLM,QAAAA,IAAI,EAAEtB,cADD;AAELuB,QAAAA,OAAO,EAAE;AACLiF,UAAAA,WAAW,EAAEF,eADR;AACyBH,UAAAA,SAAS,EAAEA,SADpC;AAC+C3E,UAAAA,OAAO,EAAE,KADxD;AAC+D+D,UAAAA,cAAc,EAAE,IAD/E;AAELtD,UAAAA,UAAU,EAAE,gCAFP;AAEyCwE,UAAAA,KAAK,EAAE,CAFhD;AAEmDnD,UAAAA,cAAc,EAAEA,cAFnE;AAEmFpB,UAAAA,SAAS,EAAEA;AAF9F;AAFJ,OAAD,CAAR;AAUH,KArBL,EAqBOT,KArBP,CAqBaC,KAAK,IAAI;AACdV,MAAAA,QAAQ,CAAC;AAAEM,QAAAA,IAAI,EAAEtB,cAAR;AAAwBuB,QAAAA,OAAO,EAAE;AAAEC,UAAAA,OAAO,EAAE;AAAX;AAAjC,OAAD,CAAR;;AACA,UAAIE,KAAK,CAACN,QAAN,CAAeO,MAAf,KAA0B,GAA9B,EAAmC;AAC/BtB,QAAAA,KAAK,CAACqB,KAAN,CAAYA,KAAK,CAACI,OAAlB;AACH,OAFD,MAEO;AACHzB,QAAAA,KAAK,CAAC0B,IAAN,CAAWL,KAAK,CAACN,QAAN,CAAeC,IAA1B;AACH;AACJ,KA5BL;AA6BH,GA/BD;AAgCH;AACD,OAAO,SAASqF,6BAAT,CAAuC/B,aAAvC,EAAsDrB,cAAtD,EAAsEvC,UAAtE,EAAkFmB,SAAlF,EAA6F;AAChG,SAAO,UAAUlB,QAAV,EAAoB;AACvBA,IAAAA,QAAQ,CAACT,WAAW,CAAC,IAAD,CAAZ,CAAR;AACAR,IAAAA,KAAK,CAACkB,IAAN,CAAW,2CAAX,EAAwD;AAAE,kBAAY0D,aAAa,CAAC7D,QAA5B;AAAsC,uBAAiBoF,QAAQ,CAACnF,UAAU,CAAC6D,2BAAX,CAAuC1D,aAAxC;AAA/D,KAAxD,EACKC,IADL,CACUC,QAAQ,IAAI;AAEd,UAAI+E,SAAS,GAAG,EAAhB,CAFc,CAId;AACA;;AAEA,YAAMQ,eAAe,GAAGvF,QAAQ,CAACC,IAAT,CAAcuF,kBAAtC;AAEA5F,MAAAA,QAAQ,CAAC;AACLM,QAAAA,IAAI,EAAEtB,cADD;AAELuB,QAAAA,OAAO,EAAE;AACLiF,UAAAA,WAAW,EAAEG,eADR;AACyBR,UAAAA,SAAS,EAAEA,SADpC;AAC+C3E,UAAAA,OAAO,EAAE,KADxD;AAC+D+D,UAAAA,cAAc,EAAE,IAD/E;AAELtD,UAAAA,UAAU,EAAE,+BAFP;AAEwCwE,UAAAA,KAAK,EAAE,CAF/C;AAEkDnD,UAAAA,cAAc,EAAEA,cAFlE;AAEkFpB,UAAAA,SAAS,EAAEA;AAF7F;AAFJ,OAAD,CAAR;AAQH,KAlBL,EAkBOT,KAlBP,CAkBaC,KAAK,IAAI;AACdV,MAAAA,QAAQ,CAAC;AAAEM,QAAAA,IAAI,EAAEtB,cAAR;AAAwBuB,QAAAA,OAAO,EAAE;AAAEC,UAAAA,OAAO,EAAE;AAAX;AAAjC,OAAD,CAAR;;AACA,UAAIE,KAAK,CAACN,QAAN,CAAeO,MAAf,KAA0B,GAA9B,EAAmC;AAC/BtB,QAAAA,KAAK,CAACqB,KAAN,CAAYA,KAAK,CAACI,OAAlB;AACH,OAFD,MAEO;AACHzB,QAAAA,KAAK,CAAC0B,IAAN,CAAWL,KAAK,CAACN,QAAN,CAAeC,IAA1B;AACH;AACJ,KAzBL;AA0BH,GA5BD;AA6BH;AAED,OAAO,SAASwF,6BAAT,CAAuCpB,UAAvC,EAAmD1E,UAAnD,EAA+D;AAClE,SAAO,UAAUC,QAAV,EAAoB;AACvBA,IAAAA,QAAQ,CAACT,WAAW,CAAC,IAAD,CAAZ,CAAR;AACAR,IAAAA,KAAK,CAACkB,IAAN,CAAW,mDAAX,EAAgE,EAAE,GAAGwE,UAAU,CAACC;AAAhB,KAAhE,EACKvE,IADL,CACUC,QAAQ,IAAI;AACd,UAAIL,UAAU,GAAG,EAAE,GAAGK,QAAQ,CAACC;AAAd,OAAjB;AAEAL,MAAAA,QAAQ,CAAC;AACLM,QAAAA,IAAI,EAAEtB,cADD;AACiBuB,QAAAA,OAAO,EAAE;AAC3BR,UAAAA,UAD2B;AAE3BS,UAAAA,OAAO,EAAE,KAFkB;AAG3BuE,UAAAA,UAAU,EAAE,KAHe;AAI3BtB,UAAAA,SAAS,EAAE;AAJgB;AAD1B,OAAD,CAAR;AAQH,KAZL,EAaKhD,KAbL,CAaWC,KAAK,IAAI;AACZV,MAAAA,QAAQ,CAAC;AAAEM,QAAAA,IAAI,EAAEtB,cAAR;AAAwBuB,QAAAA,OAAO,EAAE;AAAEC,UAAAA,OAAO,EAAE;AAAX;AAAjC,OAAD,CAAR;;AACA,UAAIE,KAAK,CAACN,QAAN,CAAeO,MAAf,KAA0B,GAA9B,EAAmC;AAC/BtB,QAAAA,KAAK,CAACqB,KAAN,CAAYA,KAAK,CAACI,OAAlB;AACH,OAFD,MAGK;AACDzB,QAAAA,KAAK,CAAC0B,IAAN,CAAWL,KAAK,CAACN,QAAN,CAAeC,IAA1B;AACH;AACJ,KArBL;AAsBH,GAxBD;AAyBH;AAED,OAAO,SAASyF,oBAAT,CAA8B7E,UAA9B,EAA0CC,SAA1C,EAAqDnB,UAArD,EAAiED,QAAjE,EAA2EuB,YAA3E,EAAwF;AAC3F,SAAO,UAAUrB,QAAV,EAAoB;AACvB;AACI,QAAID,UAAU,CAAC6D,2BAAX,CAAuCxB,kBAAvC,KAA8D3C,iBAAiB,CAACsG,SAAhF,IACAhG,UAAU,CAAC6D,2BAAX,CAAuCxB,kBAAvC,KAA8D3C,iBAAiB,CAACuG,SADhF,IAEAjG,UAAU,CAAC6D,2BAAX,CAAuCxB,kBAAvC,KAA8D3C,iBAAiB,CAACoE,SAFpF,EAE+F;AACnG7D,MAAAA,QAAQ,CAACT,WAAW,CAAC,IAAD,CAAZ,CAAR;AAGA,UAAI0G,GAAG,GAAE9G,wBAAwB,CAACY,UAAU,CAAC6D,2BAAX,CAAuCV,iBAAvC,GAA2DnD,UAAU,CAAC6D,2BAAX,CAAuCV,iBAAlG,GAAqH,IAAIgD,IAAJ,EAAtH,EAAiInG,UAAU,CAAC6D,2BAAX,CAAuCV,iBAAvC,GAA2DnD,UAAU,CAAC6D,2BAAX,CAAuCV,iBAAlG,GAAsH,IAAIgD,IAAJ,EAAvP,EAAkQpG,QAAlQ,CAAjC;AACAC,MAAAA,UAAU,CAAC6D,2BAAX,CAAuCuC,qBAAvC,GAA6DF,GAAG,CAACpG,MAAJ,GAAW,GAAxE;AAEA,UAAIuG,OAAO,GAAGjH,wBAAwB,CAACY,UAAU,CAACsG,QAAZ,EAAsBtG,UAAU,CAACuG,MAAjC,EAAyCxG,QAAzC,CAAtC;AAEA,UAAIF,QAAQ,GAAGwG,OAAO,CAACxG,QAAvB;AACA,UAAIC,MAAM,GAAGuG,OAAO,CAACvG,MAArB;AAGAd,MAAAA,KAAK,CAACkB,IAAN,CAAW,oDAAX,EAAgE;AAAC,+BAAsBF,UAAU,CAAC6D,2BAAlC;AAChE,oBAAWhE,QADqD;AAC5C,kBAASC,MADmC;AAC5B0B,QAAAA,QAAQ,EAACzB;AADmB,OAAhE,EAGCK,IAHD,CAGMC,QAAQ,IAAE;AAGZJ,QAAAA,QAAQ,CAAC;AAACM,UAAAA,IAAI,EAAEtB,cAAP;AAAuBuB,UAAAA,OAAO,EAAC;AACpCW,YAAAA,SADoC;AACzBD,YAAAA,UADyB;AACbI,YAAAA,YADa;AAGpCb,YAAAA,OAAO,EAAC;AAH4B;AAA/B,SAAD,CAAR,CAHY,CAQR;;AACAzB,QAAAA,KAAK,CAACkB,IAAN,CAAW,4BAAX,EAAyC;AACrC,0BAAgBoB,YADqB;AAErC,sBAAYvB;AAFyB,SAAzC,EAKHK,IALG,CAKEC,QAAQ,IAAE;AAGZ,gBAAMmG,SAAS,GAAGrH,mBAAmB,CAACkB,QAAQ,CAACC,IAAT,IAAiB,EAAlB,EAAsB,aAAtB,EAC7B,aAD6B,EACdqC,SADc,EACHA,SADG,EACQ,IADR,CAArC;AAGI,gBAAM8D,UAAU,GAAGD,SAAS,CAACzD,GAAV,CAAc,YAAd,CAAnB;AAEA9C,UAAAA,QAAQ,CAAC;AAACM,YAAAA,IAAI,EAAEtB,cAAP;AAAuBuB,YAAAA,OAAO,EAAC;AACAkG,cAAAA,MAAM,EAACD,UADP;AAGA/C,cAAAA,SAAS,EAAC,IAHV;AAIAvC,cAAAA,SAJA;AAIWD,cAAAA,UAJX;AAIuBI,cAAAA,YAJvB;AAMAb,cAAAA,OAAO,EAAC;AANR;AAA/B,WAAD,CAAR;AAOH,SApBD,EAqBCC,KArBD,CAqBOC,KAAK,IAAE;AACVV,UAAAA,QAAQ,CAAC;AAACM,YAAAA,IAAI,EAAEtB,cAAP;AAAuBuB,YAAAA,OAAO,EAAE;AAACC,cAAAA,OAAO,EAAC;AAAT;AAAhC,WAAD,CAAR;;AACA,cAAIE,KAAK,CAACN,QAAN,CAAeO,MAAf,KAA0B,GAA9B,EAAkC;AAC9BtB,YAAAA,KAAK,CAACqB,KAAN,CAAYA,KAAK,CAACI,OAAlB;AACH,WAFD,MAGI;AACAzB,YAAAA,KAAK,CAAC0B,IAAN,CAAWL,KAAK,CAACN,QAAN,CAAeC,IAA1B;AACH;AACJ,SA7BD;AA8BH,OA1CL,EA2CKI,KA3CL,CA2CWC,KAAK,IAAE;AACVV,QAAAA,QAAQ,CAAC;AAACM,UAAAA,IAAI,EAAEtB,cAAP;AAAuBuB,UAAAA,OAAO,EAAE;AAACC,YAAAA,OAAO,EAAC;AAAT;AAAhC,SAAD,CAAR;;AACA,YAAIE,KAAK,CAACN,QAAN,CAAeO,MAAf,KAA0B,GAA9B,EAAkC;AAC9BtB,UAAAA,KAAK,CAACqB,KAAN,CAAYA,KAAK,CAACI,OAAlB;AACH,SAFD,MAGI;AACAzB,UAAAA,KAAK,CAAC0B,IAAN,CAAWL,KAAK,CAACN,QAAN,CAAeC,IAA1B;AACH;AACJ,OAnDL;AAoDK,KAnED,MAqEA;AACI,UAAGN,UAAU,CAAC6D,2BAAX,CAAuCxB,kBAAvC,KAA8D3C,iBAAiB,CAACsG,SAAnF,EACA;AACG1G,QAAAA,KAAK,CAAC0B,IAAN,CAAWvB,IAAI,CAACoB,aAAL,CAAmB;AAACC,UAAAA,EAAE,EAAE;AAAL,SAAnB,CAAX;AACF;;AACD,UAAGd,UAAU,CAAC6D,2BAAX,CAAuCxB,kBAAvC,KAA8D3C,iBAAiB,CAACuG,SAAnF,EACA;AACG3G,QAAAA,KAAK,CAAC0B,IAAN,CAAWvB,IAAI,CAACoB,aAAL,CAAmB;AAACC,UAAAA,EAAE,EAAE;AAAL,SAAnB,CAAX;AACF;;AACD,UAAGd,UAAU,CAAC6D,2BAAX,CAAuCxB,kBAAvC,KAA8D3C,iBAAiB,CAACoE,SAAnF,EACA;AACGxE,QAAAA,KAAK,CAAC0B,IAAN,CAAWvB,IAAI,CAACoB,aAAL,CAAmB;AAACC,UAAAA,EAAE,EAAE;AAAL,SAAnB,CAAX;AACF;AACJ;AACE,GArFX;AAqFY","sourcesContent":["import rsapi from '../rsapi';\r\nimport { DEFAULT_RETURN } from './LoginTypes';\r\nimport { sortData, constructOptionList,convertDateValuetoString, rearrangeDateFormat } from '../components/CommonScript'//, getComboLabelValue, searchData\r\nimport { toast } from 'react-toastify';\r\nimport Axios from 'axios';\r\nimport { initRequest } from './LoginAction';\r\nimport { intl } from '../components/App';\r\nimport { transactionStatus } from '../components/Enumeration';\r\n\r\nexport function getTrainingCertificateDetail(trainingcertificate, fromDate, toDate, userInfo, masterData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n\r\n        return rsapi.post(\"trainingcertificate/getTrainingCertificate\", {\r\n            ntrainingcode: trainingcertificate.ntrainingcode, fromDate, toDate,\r\n            \"userinfo\": userInfo\r\n        })\r\n            .then(response => {\r\n\r\n                masterData = { ...masterData, ...response.data };\r\n                sortData(masterData);\r\n                dispatch({ type: DEFAULT_RETURN, payload: { masterData, loading: false } });\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(intl.formatMessage({ id: error.message }));\r\n                }\r\n                else {\r\n\r\n                    toast.warn(intl.formatMessage({ id: error.response }));\r\n                }\r\n\r\n            })\r\n    }\r\n}\r\n\r\nexport function getTrainingCertificateComboService(screenName, operation, primaryKeyName, primaryKeyValue, masterData, userInfo, ncontrolCode) {\r\n    return function (dispatch) {\r\n        if (operation === \"create\" || (operation === \"update\" || operation === \"reschedule\")) {\r\n\r\n            const trainingcategoryService = rsapi.post(\"traningcategory/getTrainingCategory\", { userinfo: userInfo });\r\n            const techniqueService = rsapi.post(\"trainingcertificate/getTechnique\", { userinfo: userInfo });\r\n            const timeZoneService = rsapi.post(\"timezone/getTimeZone\");\r\n            const UTCtimeZoneService = rsapi.post(\"timezone/getLocalTimeByZone\", { userinfo: userInfo });\r\n            let urlArray = [techniqueService, trainingcategoryService, timeZoneService, UTCtimeZoneService];\r\n            if (operation === \"update\" || operation === \"reschedule\") {\r\n\r\n                const trainingcertificateServiceById = rsapi.post(\"trainingcertificate/getActiveTrainingCertificateById\", { [primaryKeyName]: primaryKeyValue, \"userinfo\": userInfo });//this.props.Login.userInfo\r\n                urlArray.push(trainingcertificateServiceById)\r\n                const trainingparticipantsById = rsapi.post(\"trainingcertificate/getTrainingParticipants\", { [primaryKeyName]: primaryKeyValue, \"userinfo\": userInfo });//this.props.Login.userInfo\r\n                urlArray.push(trainingparticipantsById)\r\n            }\r\n\r\n            dispatch(initRequest(true));\r\n            Axios.all(urlArray)\r\n                .then(response => {\r\n                let status = true;\r\n                let index ;\r\n                if(operation === \"update\" || operation === \"reschedule\"){\r\n                     index = response[5].data.TrainingParticipants.findIndex( item => \r\n                       (item.ntransactionstatus === transactionStatus.INVITED) \r\n                      );\r\n                    if(index !== -1){\r\n                      status = operation === \"update\" ? false :  true;\r\n                    } else{\r\n                        status = operation === \"reschedule\" ? false : true;\r\n                    }\r\n                }\r\n              \r\n                    if(status === true){\r\n\r\n                    let selectedRecord = {\r\n                        \"ntztrainingdate\": {\r\n                            \"value\": userInfo.ntimezonecode,\r\n                            \"label\": userInfo.stimezoneid\r\n                        },\r\n                        \"stztrainingdate\": userInfo.stimezoneid\r\n                    };\r\n\r\n                    const techniqueMap = constructOptionList(response[0].data || [], \"ntechniquecode\",\r\n                        \"stechniquename\", undefined, undefined, true);\r\n                    const trainingcategoryMap = constructOptionList(response[1].data || [], \"ntrainingcategorycode\",\r\n                        \"strainingcategoryname\", undefined, undefined, true);\r\n                    const timeZoneMap = constructOptionList(response[2].data || [], \"ntimezonecode\",\r\n                        \"stimezoneid\", undefined, undefined, true);\r\n                    const trainingcategoryList = trainingcategoryMap.get(\"OptionList\");\r\n                    const techniqueList = techniqueMap.get(\"OptionList\");\r\n                    const timeZoneList = timeZoneMap.get(\"OptionList\");\r\n                    const currentTime = rearrangeDateFormat(userInfo, response[3].data);\r\n                    if (operation === \"update\" || operation === \"reschedule\") {\r\n                        selectedRecord = response[4].data;\r\n\r\n                        selectedRecord[\"dtrainingdatetime\"] = rearrangeDateFormat(userInfo, response[4].data.strainingdatetime)\r\n                        selectedRecord[\"ntrainingcategorycode\"] = { \"value\": response[4].data.ntrainingcategorycode, \"label\": response[4].data.strainingcategoryname };\r\n                        selectedRecord[\"ntechniquecode\"] = { \"value\": response[4].data.ntechniquecode, \"label\": response[4].data.stechniquename };\r\n                        selectedRecord[\"ntztrainingdate\"] = { \"value\": response[4].data.ntztrainingdate, \"label\": response[4].data.stimezoneid };\r\n                    }\r\n                    else {\r\n                        selectedRecord[\"ntransactionstatus\"] = transactionStatus.ACTIVE;\r\n                        selectedRecord[\"ntrainingcategorycode\"] = trainingcategoryMap.get(\"DefaultValue\");\r\n                    }\r\n\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN, payload: {\r\n                            currentTime,\r\n                            trainingcategoryList, techniqueList, timeZoneList,\r\n                            operation, screenName, selectedRecord, openModal: true,\r\n                            ncontrolCode, loading: false\r\n                        }\r\n                    });\r\n                }\r\n                else{\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                    toast.warn(intl.formatMessage({ id: (operation === \"update\" ? \"IDS_INVITEDPARTICIPANTSCANNOTBEEDITED\" : \"IDS_INVITEPARTICIPANTS\")}));\r\n                }\r\n            }\r\n            )\r\n                .catch(error => {\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(intl.formatMessage({ id: error.message }));\r\n                    }\r\n                    else {\r\n\r\n                        toast.warn(intl.formatMessage({ id: error.response.data }));\r\n                    }\r\n                })\r\n        }\r\n\r\n    }\r\n}\r\n\r\n\r\nexport function getTrainingParticipantsComboDataService(trainingparam, masterData) {\r\n    return function (dispatch) {\r\n\r\n        if (masterData.SelectedTrainingCertificate.ntransactionstatus !== transactionStatus.CANCELLED) {\r\n\r\n            const section = rsapi.post(\"section/getSection\", { \"userinfo\": trainingparam.userInfo });\r\n\r\n            let urlArray = [];\r\n\r\n            let selectedId = null;\r\n\r\n            urlArray = [section];\r\n\r\n            dispatch(initRequest(true));\r\n            Axios.all(urlArray)\r\n                .then(Axios.spread((...response) => {\r\n\r\n                    let selectedRecord = {};\r\n                    let nsectioncode = [];\r\n                    let nsitecode = [];\r\n\r\n                    let sectionusersList = [];\r\n\r\n                    const SectionMap = constructOptionList(response[0].data || [], \"nsectioncode\",\r\n                        \"ssectionname\", undefined, undefined, true);\r\n\r\n                    const sectionList = SectionMap.get(\"OptionList\");\r\n\r\n\r\n\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            section: sectionList, sectionUsers: trainingparam.operation === \"update\" ? sectionusersList : [],\r\n                            nsectioncode: nsectioncode, nsitecode: nsitecode,\r\n                            selectedRecord: trainingparam.operation === \"update\" ? selectedRecord : undefined, operation: trainingparam.operation,\r\n                            screenName: \"IDS_PARTICIPANTSDETAILS\",\r\n                            openChildModal: true, ncontrolCode: trainingparam.ncontrolCode,\r\n                            loading: false, selectedId\r\n                        }\r\n                    });\r\n                }))\r\n\r\n                .catch(error => {\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(intl.formatMessage({ id: error.message }));\r\n                    }\r\n                    else {\r\n                        toast.warn(intl.formatMessage({ id: error.response.data }));\r\n                    }\r\n                })\r\n        }\r\n        else {\r\n\r\n            toast.warn(intl.formatMessage({ id: \"IDS_TRAININGCANCELED\" }));\r\n        }\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport function reloadTrainingCertificate(inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"trainingcertificate/getTrainingCertificate\", { ...inputParam.inputData })\r\n            .then(response => {\r\n                let responseData = { ...response.data }\r\n                responseData = sortData(responseData)\r\n                let masterData = {\r\n                    ...inputParam.masterData,\r\n                    ...responseData,\r\n                }\r\n                if (inputParam.searchRef !== undefined && inputParam.searchRef.current !== null) {\r\n                    inputParam.searchRef.current.value = \"\";\r\n                    masterData['searchedData'] = undefined\r\n                }\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData,\r\n                        loading: false,\r\n                        showFilter: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getSectionUsersDataService(nSectionCode, selectedRecord, userInfo, SelectedTrainingCertificate) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"trainingcertificate/getSectionUsers\", { \"userinfo\": userInfo, \"nsectioncode\": parseInt(nSectionCode), \"ntrainingcode\": parseInt(SelectedTrainingCertificate) })\r\n            .then(response => {\r\n\r\n                let nusercode = [];\r\n\r\n                // const sectionusersMap = constructOptionList(response.data.SectionUsers || [], \"nusercode\",\r\n                //     \"sfullname\", undefined, undefined, true);\r\n\r\n                const sectionusersList = response.data.SectionUsers;\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        sectionUsers: sectionusersList, nusercode: nusercode, selectedRecord, loading: false\r\n                    }\r\n                });\r\n\r\n            }).catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n\r\n            })\r\n    }\r\n}\r\nexport function getTrainingParticipantsInvite(trainingparam, selectedRecord, masterData, operation) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"trainingcertificate/getInviteParticipants\", { \"userinfo\": trainingparam.userInfo, \"ntrainingcode\": parseInt(masterData.SelectedTrainingCertificate.ntrainingcode) })\r\n            .then(response => {\r\n\r\n                let nusercode = [];\r\n\r\n                // const inviteUsersMap = constructOptionList(response.data.InvitedParticipants || [], \"nusercode\",\r\n                //     \"sfullname\", undefined, undefined, true);\r\n\r\n                // const inviteUsersList = inviteUsersMap.get(\"OptionList\");\r\n                const inviteUsersList = response.data.InvitedParticipants;\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        usersStatus: inviteUsersList, nusercode: nusercode, loading: false, openChildModal: true,\r\n                        screenName: \"IDS_INVITEDPARTICIPANTSDETAILS\", nFlag: 2, selectedRecord: selectedRecord, operation: operation\r\n                    }\r\n                });\r\n\r\n\r\n\r\n            }).catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function getTrainingParticipantsCancel(trainingparam, selectedRecord, masterData, operation) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"trainingcertificate/getCancelParticipants\", { \"userinfo\": trainingparam.userInfo, \"ntrainingcode\": parseInt(masterData.SelectedTrainingCertificate.ntrainingcode) })\r\n            .then(response => {\r\n\r\n                let nusercode = [];\r\n\r\n                // const cancelUsersMap = constructOptionList(response.data.CancelParticipants || [], \"nusercode\",\r\n                //     \"sfullname\", undefined, undefined, true);\r\n\r\n                const cancelUsersList = response.data.CancelParticipants;\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        usersStatus: cancelUsersList, nusercode: nusercode, loading: false, openChildModal: true,\r\n                        screenName: \"IDS_CANCELPARTICIPANTSDETAILS\", nFlag: 3, selectedRecord: selectedRecord, operation: operation\r\n                    }\r\n                });\r\n\r\n            }).catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function rescheduleTrainingCertificate(inputParam, masterData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"trainingcertificate/rescheduleTrainingCertificate\", { ...inputParam.inputData })\r\n            .then(response => {\r\n                let masterData = { ...response.data }\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData,\r\n                        loading: false,\r\n                        showFilter: false,\r\n                        openModal: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getAddValidityExpiry(screenName, operation, masterData, userInfo, ncontrolCode){\r\n    return function (dispatch) {    \r\n        //if (masterData.SelectedTestPriceVersion.ntransactionstatus === transactionStatus.DRAFT){     \r\n            if (masterData.SelectedTrainingCertificate.ntransactionstatus !== transactionStatus.CONDUCTED &&\r\n                masterData.SelectedTrainingCertificate.ntransactionstatus !== transactionStatus.COMPLETED &&\r\n                masterData.SelectedTrainingCertificate.ntransactionstatus !== transactionStatus.CANCELLED) {\r\n        dispatch(initRequest(true));\r\n        \r\n\r\n        let obj= convertDateValuetoString(masterData.SelectedTrainingCertificate.strainingdatetime ? masterData.SelectedTrainingCertificate.strainingdatetime: new Date(),masterData.SelectedTrainingCertificate.strainingdatetime ? masterData.SelectedTrainingCertificate.strainingdatetime : new Date(),userInfo);\r\n        masterData.SelectedTrainingCertificate.stemptrainingdatetime=obj.toDate+\"Z\";\r\n        \r\n        let objdate = convertDateValuetoString(masterData.FromDate, masterData.ToDate, userInfo);\r\n\r\n        let fromDate = objdate.fromDate;\r\n        let toDate = objdate.toDate;\r\n       \r\n\r\n        rsapi.post(\"trainingcertificate/validateConductAndTrainingDate\",{\"trainingcertificate\":masterData.SelectedTrainingCertificate, \r\n        \"fromDate\":fromDate,\"toDate\":toDate,userinfo:userInfo})\r\n        \r\n        .then(response=>{\r\n        \r\n        \r\n            dispatch({type: DEFAULT_RETURN, payload:{\r\n                operation, screenName, ncontrolCode,\r\n                \r\n                loading:false}});\r\n\r\n                //rsapi.post(\"trainingcertificate/getPeriod\",{userinfo:userInfo})\r\n                rsapi.post(\"/period/getPeriodByControl\", {\r\n                    \"ncontrolcode\": ncontrolCode,\r\n                    \"userinfo\": userInfo\r\n                })\r\n    \r\n            .then(response=>{\r\n                                      \r\n                \r\n                const PeriodMap = constructOptionList(response.data || [], \"nperiodcode\",\r\n                        \"speriodname\", undefined, undefined, true);\r\n\r\n                    const periodList = PeriodMap.get(\"OptionList\");\r\n\r\n                    dispatch({type: DEFAULT_RETURN, payload:{\r\n                                                            period:periodList,\r\n                                                           \r\n                                                            openModal:true,\r\n                                                            operation, screenName, ncontrolCode,\r\n                                                            \r\n                                                            loading:false}});\r\n                })\r\n                .catch(error=>{\r\n                    dispatch({type: DEFAULT_RETURN, payload: {loading:false}})\r\n                    if (error.response.status === 500){\r\n                        toast.error(error.message);\r\n                    } \r\n                    else{               \r\n                        toast.warn(error.response.data);\r\n                    }      \r\n                })\r\n            })\r\n            .catch(error=>{\r\n                dispatch({type: DEFAULT_RETURN, payload: {loading:false}})\r\n                if (error.response.status === 500){\r\n                    toast.error(error.message);\r\n                } \r\n                else{               \r\n                    toast.warn(error.response.data);\r\n                }      \r\n            })\r\n            }\r\n            else\r\n            {\r\n                if(masterData.SelectedTrainingCertificate.ntransactionstatus === transactionStatus.CONDUCTED)\r\n                {\r\n                   toast.warn(intl.formatMessage({id: \"IDS_TESTTRAININGALREADYCONDUCTED\"}));\r\n                }\r\n                if(masterData.SelectedTrainingCertificate.ntransactionstatus === transactionStatus.COMPLETED)\r\n                {\r\n                   toast.warn(intl.formatMessage({id: \"IDS_TESTTRAININGALREADYCOMPLETED\"}));\r\n                }\r\n                if(masterData.SelectedTrainingCertificate.ntransactionstatus === transactionStatus.CANCELLED)\r\n                {\r\n                   toast.warn(intl.formatMessage({id: \"IDS_TESTTRAININGALREADYCANCELLED\"}));\r\n                }\r\n            }\r\n              }}\r\n    \r\n               \r\n          \r\n\r\n    \r\n         \r\n    \r\n\r\n"]},"metadata":{},"sourceType":"module"}