{"ast":null,"code":"var _jsxFileName = \"D:\\\\Postgres_workingFolder\\\\QuaLISWeb\\\\src\\\\pages\\\\instrumentmanagement\\\\InstrumentCategory.jsx\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { injectIntl } from 'react-intl';\nimport { Row, Col } from 'react-bootstrap';\nimport { toast } from 'react-toastify';\nimport { process } from '@progress/kendo-data-query';\nimport DataGrid from '../../components/data-grid/data-grid.component';\nimport AddInstrumentCategory from './AddInstrumentCategory';\nimport Esign from '../audittrail/Esign';\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\nimport { ListWrapper } from '../../components/client-group.styles';\nimport { callService, crudMaster, fetchInstrumentCategoryById, validateEsignCredential, openInstrumentCategoryModal, updateStore } from '../../actions';\nimport { transactionStatus } from '../../components/Enumeration';\nimport { constructOptionList, getControlMap, showEsign } from '../../components/CommonScript';\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\nimport Axios from 'axios'; // import DocViewer from '../../components/doc-viewer/doc-viewer.component'\n// import samplePdf from '../../assets/pdf/BatchStudyReport_202100008.pdf';\n// import sampleExcel from '../../assets/excel/Export.xlsx';\n// import sampleTxt from '../../assets/text/file-sample_100kB.docx';\n// import rsapi, { fileViewUrl } from '../../rsapi';\n// import samplePng from '../../assets/image/Samplepng.png';\n\nconst mapStateToProps = state => {\n  return {\n    Login: state.Login\n  };\n};\n\nclass InstrumentCategory extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.dataStateChange = event => {\n      this.setState({\n        dataResult: process(this.props.Login.masterData, event.dataState),\n        dataState: event.dataState\n      });\n    };\n\n    this.closeModal = () => {\n      let loadEsign = this.props.Login.loadEsign;\n      let openModal = this.props.Login.openModal;\n      let selectedRecord = this.props.Login.selectedRecord;\n\n      if (this.props.Login.loadEsign) {\n        if (this.props.Login.operation === \"delete\") {\n          loadEsign = false;\n          openModal = false;\n          selectedRecord = {};\n        } else {\n          loadEsign = false;\n          selectedRecord['esignpassword'] = undefined;\n          selectedRecord['esigncomments'] = undefined;\n        }\n      } else {\n        openModal = false;\n        selectedRecord = {};\n      }\n\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          openModal,\n          loadEsign,\n          selectedRecord,\n          selectedId: null\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onInputOnChange = event => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (event.target.type === 'checkbox') {\n        selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\n      } else {\n        selectedRecord[event.target.name] = event.target.value;\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onComboChange = (comboData, fieldName) => {\n      if (comboData !== null) {\n        const selectedRecord = this.state.selectedRecord || {};\n        selectedRecord[fieldName] = comboData;\n        this.setState({\n          selectedRecord\n        });\n      }\n    };\n\n    this.deleteRecord = inputData => {\n      if (inputData.selectedRecord.expanded !== undefined) {\n        delete inputData.selectedRecord.expanded;\n      }\n\n      const inputParam = {\n        classUrl: this.props.Login.inputParam.classUrl,\n        methodUrl: this.props.Login.inputParam.methodUrl,\n        inputData: {\n          [this.props.Login.inputParam.methodUrl.toLowerCase()]: inputData.selectedRecord,\n          \"userinfo\": this.props.Login.userInfo\n        },\n        operation: inputData.operation,\n        displayName: this.props.Login.inputParam.displayName,\n        dataState: this.state.dataState\n      };\n      const esignNeeded = showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, inputData.ncontrolCode);\n\n      if (esignNeeded) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData: this.props.Login.masterData\n            },\n            openModal: true,\n            screenName: this.props.intl.formatMessage({\n              id: this.props.Login.inputParam.displayName\n            }),\n            operation: inputData.operation\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\n      }\n    };\n\n    this.reloadData = () => {\n      const inputParam = {\n        inputData: {\n          \"userinfo\": this.props.Login.userInfo\n        },\n        classUrl: this.props.Login.inputParam.classUrl,\n        methodUrl: this.props.Login.inputParam.methodUrl,\n        userInfo: this.props.Login.userInfo,\n        displayName: this.props.Login.inputParam.displayName\n      };\n      this.props.callService(inputParam);\n    };\n\n    this.onSaveClick = (saveType, formRef) => {\n      let inputData = [];\n      inputData[\"userinfo\"] = this.props.Login.userInfo;\n      let postParam = undefined;\n      let selectedId = null;\n\n      if (this.props.Login.operation === \"update\") {\n        // edit\n        postParam = {\n          inputListName: \"instrumentcategory\",\n          selectedObject: \"selectedInstrumentCategory\",\n          primaryKeyField: \"ninstrumentcatcode\"\n        }; // inputData[\"instrumentcategory\"] = this.state.selectedRecord;\n\n        inputData[this.props.Login.inputParam.methodUrl.toLowerCase()] = JSON.parse(JSON.stringify(this.state.selectedRecord));\n        selectedId = this.props.Login.selectedRecord.ninstrumentcatcode; //this.fieldList.map(item => {\n        //   return inputData[\"instrumentcategory\"][item] = this.state.selectedRecord[item] ? this.state.selectedRecord[item] : \"\";\n        //  })\n      } else {\n        inputData[\"instrumentcategory\"] = {\n          \"nsitecode\": this.props.Login.userInfo.nmastersitecode\n        }; // this.fieldList.map(item => {\n        //    return inputData[\"instrumentcategory\"][item] = this.state.selectedRecord[item]\n        //  });\n      } //inputData[\"instrumentcategory\"][\"ninstrumentcatcode\"] = this.state.selectedRecord[\"ninstrumentcatcode\"]? this.state.selectedRecord[\"ninstrumentcatcode\"]:0;\n\n\n      inputData[\"instrumentcategory\"][\"sinstrumentcatname\"] = this.state.selectedRecord.sinstrumentcatname ? this.state.selectedRecord.sinstrumentcatname : \"\";\n      inputData[\"instrumentcategory\"][\"sdescription\"] = this.state.selectedRecord[\"sdescription\"] ? this.state.selectedRecord[\"sdescription\"] : \"\";\n      inputData[\"instrumentcategory\"][\"ntechniquecode\"] = this.state.selectedRecord[\"ntechniquecode\"] ? this.state.selectedRecord[\"ntechniquecode\"].value : -1;\n      inputData[\"instrumentcategory\"][\"ninterfacetypecode\"] = this.state.selectedRecord[\"ninterfacetypecode\"] ? this.state.selectedRecord[\"ninterfacetypecode\"].value : -1;\n      inputData[\"instrumentcategory\"][\"nstatus\"] = this.state.selectedRecord[\"nstatus\"];\n      inputData[\"instrumentcategory\"][\"ndefaultstatus\"] = this.state.selectedRecord[\"ndefaultstatus\"] ? this.state.selectedRecord[\"ndefaultstatus\"] : transactionStatus.NO;\n      inputData[\"instrumentcategory\"][\"ncategorybasedflow\"] = this.state.selectedRecord[\"ncategorybasedflow\"] ? this.state.selectedRecord[\"ncategorybasedflow\"] : transactionStatus.NO;\n      inputData[\"instrumentcategory\"][\"ncalibrationreq\"] = this.state.selectedRecord[\"ncalibrationreq\"] ? this.state.selectedRecord[\"ncalibrationreq\"] : transactionStatus.NO;\n      inputData[\"instrumentcategory\"][\"jsondata\"] = {};\n      inputData[\"instrumentcategory\"][\"jsondata\"][\"sinstrumentdisplayname\"] = this.functionTransalte(inputData[\"instrumentcategory\"][\"sinstrumentcatname\"]);\n      inputData[\"instrumentcategory\"][\"jsondata\"][\"sdescriptiondisplayname\"] = this.functionTransalte(inputData[\"instrumentcategory\"][\"sdescription\"]);\n      const inputParam = {\n        classUrl: this.props.Login.inputParam.classUrl,\n        methodUrl: this.props.Login.inputParam.methodUrl,\n        displayName: this.props.Login.inputParam.displayName ? this.props.Login.inputParam.displayName : '',\n        inputData: inputData,\n        operation: this.props.Login.operation,\n        saveType,\n        formRef,\n        postParam,\n        searchRef: this.searchRef,\n        selectedId\n      };\n      const masterData = this.props.Login.masterData;\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolcode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData\n            },\n            saveType\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, masterData, \"openModal\");\n      } // this.props.crudMaster(inputParam, this.props.Login.masterData,\"openModal\");\n\n    };\n\n    this.validateEsign = () => {\n      const inputParam = {\n        inputData: {\n          \"userinfo\": { ...this.props.Login.userInfo,\n            sreason: this.state.selectedRecord[\"esigncomments\"]\n          },\n          password: this.state.selectedRecord[\"esignpassword\"]\n        },\n        screenData: this.props.Login.screenData\n      };\n      this.props.validateEsignCredential(inputParam, \"openModal\");\n    };\n\n    this.formRef = React.createRef(); // this.closeModal = this.closeModal.bind(this);\n\n    this.extractedColumnList = [];\n    this.fieldList = [];\n    const dataState = {\n      skip: 0,\n      take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n    };\n    this.state = {\n      data: [],\n      masterStatus: \"\",\n      error: \"\",\n      selectedRecord: {},\n      dataResult: [],\n      dataState: dataState,\n      isOpen: false,\n      userRoleControlRights: [],\n      Interfacetype: [],\n      Technique: [],\n      controlMap: new Map()\n    };\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\n      toast.warn(props.Login.masterStatus);\n      props.Login.masterStatus = \"\";\n    }\n\n    if (props.Login.error !== state.error) {\n      toast.error(props.Login.error);\n      props.Login.error = \"\";\n    }\n\n    return null;\n  }\n\n  render() {\n    let primaryKeyField = \"\";\n\n    if (this.props.Login.inputParam !== undefined) {\n      this.extractedColumnList = [{\n        \"controlType\": \"textbox\",\n        \"idsName\": \"IDS_INSTRUMENTCATEGORY\",\n        \"dataField\": \"sinstrumentcatname\",\n        \"width\": \"200px\"\n      }, {\n        \"controlType\": \"checkbox\",\n        \"idsName\": \"IDS_CATEGORYBASEDFLOW\",\n        \"dataField\": \"scategorybasedflow\",\n        \"width\": \"200px\",\n        \"isIdsField\": true,\n        \"controlName\": \"ncategorybasedflow\"\n      }, {\n        \"controlType\": \"checkbox\",\n        \"idsName\": \"IDS_CALIBRATIONREQUIRED\",\n        \"dataField\": \"scalibrationrequired\",\n        \"width\": \"200px\",\n        \"isIdsField\": true,\n        \"controlName\": \"ncalibrationreq\"\n      }, {\n        \"controlType\": \"checkbox\",\n        \"idsName\": \"IDS_DISPLAYSTATUS\",\n        \"dataField\": \"sdisplaystatus\",\n        \"width\": \"200px\",\n        \"isIdsField\": true,\n        \"controlName\": \"ndefaultstatus\"\n      }];\n      this.extractedFormList = [];\n      this.detailedFieldList = [{\n        \"idsName\": \"IDS_TECHNIQUE\",\n        \"dataField\": \"stechniquename\",\n        \"width\": \"300px\"\n      }, {\n        \"idsName\": \"IDS_INTERFACETYPE\",\n        \"dataField\": \"sinterfacetypename\",\n        \"width\": \"250px\"\n      }, {\n        \"idsName\": \"IDS_DESCRIPTION\",\n        \"dataField\": \"sdescription\",\n        \"width\": \"250px\"\n      }];\n      primaryKeyField = \"ninstrumentcatcode\";\n      this.fieldList = [\"sinstrumentcatname\", \"sdescription\", \"ntechniquecode\", \"ninterfacetypecode\", \"ncalibrationreq\", \"ncategorybasedflow\", \"ndefaultstatus\"];\n    }\n\n    const mandatoryFields = [{\n      \"mandatory\": true,\n      \"idsName\": \"IDS_INSTRUMENTCATEGORY\",\n      \"dataField\": \"sinstrumentcatname\",\n      \"mandatoryLabel\": \"IDS_ENTER\",\n      \"controlType\": \"textbox\"\n    }, {\n      \"mandatory\": true,\n      \"idsName\": \"IDS_TECHNIQUE\",\n      \"dataField\": \"ntechniquecode\",\n      \"mandatoryLabel\": \"IDS_SELECT\",\n      \"controlType\": \"selectbox\"\n    }, {\n      \"mandatory\": true,\n      \"idsName\": \"IDS_INTERFACETYPE\",\n      \"dataField\": \"ninterfacetypecode\",\n      \"mandatoryLabel\": \"IDS_SELECT\",\n      \"controlType\": \"selectbox\"\n    }];\n    const addId = this.props.Login.inputParam && this.state.controlMap.has(\"Add\".concat(this.props.Login.inputParam.methodUrl)) && this.state.controlMap.get(\"Add\".concat(this.props.Login.inputParam.methodUrl)).ncontrolcode;\n    const editID = this.props.Login.inputParam && this.state.controlMap.has(\"Edit\".concat(this.props.Login.inputParam.methodUrl)) && this.state.controlMap.get(\"Edit\".concat(this.props.Login.inputParam.methodUrl)).ncontrolcode;\n    const editParam = {\n      screenName: this.props.Login.inputParam && this.props.Login.inputParam.displayName && this.props.intl.formatMessage({\n        id: this.props.Login.inputParam.displayName\n      }),\n      primaryKeyField: \"ninstrumentcatcode\",\n      operation: \"update\",\n      inputParam: this.props.Login.inputParam,\n      userInfo: this.props.Login.userInfo,\n      ncontrolCode: editID\n    };\n    const deleteParam = {\n      operation: \"delete\"\n    };\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(ListWrapper, {\n      className: \"client-list-content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 25\n      }\n    }, this.state.data ? /*#__PURE__*/React.createElement(DataGrid, {\n      primaryKeyField: primaryKeyField,\n      data: this.state.data,\n      dataResult: this.state.dataResult,\n      dataState: this.state.dataState,\n      dataStateChange: this.dataStateChange,\n      extractedColumnList: this.extractedColumnList,\n      detailedFieldList: this.detailedFieldList,\n      expandField: \"expanded\",\n      formatMessage: this.props.intl.formatMessage,\n      controlMap: this.state.controlMap,\n      userRoleControlRights: this.state.userRoleControlRights,\n      inputParam: this.props.Login.inputParam,\n      userInfo: this.props.Login.userInfo,\n      fetchRecord: this.props.fetchInstrumentCategoryById,\n      deleteRecord: this.deleteRecord,\n      reloadData: this.reloadData,\n      editParam: editParam,\n      deleteParam: deleteParam,\n      addRecord: () => this.props.openInstrumentCategoryModal(\"IDS_INSTRUMENTCATEGORY\", \"create\", \"ninstrumentcatcode\", this.props.Login.masterData, this.props.Login.userInfo, addId) // isComponent={true}\n      ,\n      pageable: true,\n      isActionRequired: true,\n      isToolBarRequired: true,\n      scrollable: \"scrollable\",\n      selectedId: this.props.Login.selectedId,\n      gridHeight: '600px',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 33\n      }\n    }) : \"\"))), this.props.Login.openModal && /*#__PURE__*/React.createElement(SlideOutModal, {\n      show: this.props.Login.openModal,\n      closeModal: this.closeModal,\n      operation: this.props.Login.operation,\n      inputParam: this.props.Login.inputParam,\n      screenName: this.props.Login.screenName,\n      onSaveClick: this.onSaveClick,\n      esign: this.props.Login.loadEsign,\n      selectedRecord: this.state.selectedRecord || {},\n      mandatoryFields: mandatoryFields,\n      validateEsign: this.validateEsign,\n      masterStatus: this.props.Login.masterStatus,\n      updateStore: this.props.updateStore,\n      addComponent: this.props.Login.loadEsign ? /*#__PURE__*/React.createElement(Esign, {\n        operation: this.props.Login.operation,\n        formatMessage: this.props.intl.formatMessage,\n        onInputOnChange: this.onInputOnChange,\n        inputParam: this.props.Login.inputParam,\n        selectedRecord: this.state.selectedRecord || {},\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 215,\n          columnNumber: 29\n        }\n      }) : /*#__PURE__*/React.createElement(AddInstrumentCategory, {\n        selectedRecord: this.state.selectedRecord || {},\n        onInputOnChange: this.onInputOnChange,\n        onComboChange: this.onComboChange,\n        Technique: this.state.Technique || [],\n        Interfacetype: this.state.Interfacetype || [],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 222,\n          columnNumber: 31\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 21\n      }\n    }));\n  }\n\n  componentDidUpdate(previousProps) {\n    if (this.props.Login.masterData !== previousProps.Login.masterData) {\n      if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\n        const userRoleControlRights = [];\n\n        if (this.props.Login.userRoleControlRights) {\n          this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item => userRoleControlRights.push(item.ncontrolcode));\n        }\n\n        const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode);\n        this.setState({\n          userRoleControlRights,\n          controlMap,\n          data: this.props.Login.masterData,\n          dataResult: process(this.props.Login.masterData, this.state.dataState)\n        });\n      } else {\n        let {\n          dataState\n        } = this.state;\n\n        if (this.props.Login.dataState === undefined) {\n          dataState = {\n            skip: 0,\n            take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n          };\n        }\n\n        this.setState({\n          data: this.props.Login.masterData,\n          // isOpen: false,\n          dataResult: process(this.props.Login.masterData, dataState),\n          dataState //,\n          //selectedRecord:{ncalibrationreq:transactionStatus.NO,ncategorybasedflow:transactionStatus.NO,ndefaultstatus:transactionStatus.NO}\n\n        });\n      }\n    } else if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\n      this.setState({\n        selectedRecord: this.props.Login.selectedRecord\n      });\n    }\n\n    if (this.props.Login.Technique !== previousProps.Login.Technique || this.props.Login.Interfacetype !== previousProps.Login.Interfacetype) {\n      const Technique = constructOptionList(this.props.Login.Technique || [], \"ntechniquecode\", \"stechniquename\", undefined, undefined, undefined);\n      const TechniqueList = Technique.get(\"OptionList\");\n      const Interfacetype = constructOptionList(this.props.Login.Interfacetype || [], \"ninterfacetypecode\", \"sinterfacetypename\", undefined, undefined, undefined);\n      const InterfacetypeList = Interfacetype.get(\"OptionList\");\n      this.setState({\n        Technique: TechniqueList,\n        Interfacetype: InterfacetypeList\n      });\n    }\n  }\n\n  async functionTransalte(value) {\n    return await this.transalate(value);\n  }\n\n  transalate(value) {\n    const urlArray = 'https://translation.googleapis.com/language/translate/v2';\n    const languageList = this.props.Login.languageList;\n    const array = [];\n    languageList.map(x => {\n      array.push(Axios.get(urlArray, {}, {\n        params: {\n          q: value,\n          target: x.item.slanguagetranslate,\n          key: 'AIzaSyCHUCmpR7cT_yDFHC98CZJy2LTms-IwDlM'\n        }\n      }));\n    });\n    const returnObject = {};\n    Axios.all(array).then(data => {\n      // this.setState({translated: data.data.data.translations[0].translatedText})\n      if (data && data.length > 0) {\n        data.map((x, i) => {\n          returnObject[languageList[i]['value']] = x.data.data.translations[0].translatedText;\n          console.log(x.data.data.translations[0].translatedText);\n        });\n      }\n    });\n    return returnObject;\n  }\n\n  componentWillUnmount() {\n    const updateInfo = {\n      typeName: DEFAULT_RETURN,\n      data: {\n        masterData: [],\n        inputParam: undefined,\n        operation: null,\n        modalName: undefined\n      }\n    };\n    this.props.updateStore(updateInfo);\n  }\n\n}\n\nexport default connect(mapStateToProps, {\n  callService,\n  crudMaster,\n  fetchInstrumentCategoryById,\n  validateEsignCredential,\n  openInstrumentCategoryModal,\n  updateStore\n})(injectIntl(InstrumentCategory));","map":{"version":3,"sources":["D:/Postgres_workingFolder/QuaLISWeb/src/pages/instrumentmanagement/InstrumentCategory.jsx"],"names":["React","connect","injectIntl","Row","Col","toast","process","DataGrid","AddInstrumentCategory","Esign","SlideOutModal","ListWrapper","callService","crudMaster","fetchInstrumentCategoryById","validateEsignCredential","openInstrumentCategoryModal","updateStore","transactionStatus","constructOptionList","getControlMap","showEsign","DEFAULT_RETURN","Axios","mapStateToProps","state","Login","InstrumentCategory","Component","constructor","props","dataStateChange","event","setState","dataResult","masterData","dataState","closeModal","loadEsign","openModal","selectedRecord","operation","undefined","updateInfo","typeName","data","selectedId","onInputOnChange","target","type","name","checked","YES","NO","value","onComboChange","comboData","fieldName","deleteRecord","inputData","expanded","inputParam","classUrl","methodUrl","toLowerCase","userInfo","displayName","esignNeeded","userRoleControlRights","nformcode","ncontrolCode","screenData","screenName","intl","formatMessage","id","reloadData","onSaveClick","saveType","formRef","postParam","inputListName","selectedObject","primaryKeyField","JSON","parse","stringify","ninstrumentcatcode","nmastersitecode","sinstrumentcatname","functionTransalte","searchRef","ncontrolcode","validateEsign","sreason","password","createRef","extractedColumnList","fieldList","skip","take","settings","parseInt","masterStatus","error","isOpen","Interfacetype","Technique","controlMap","Map","getDerivedStateFromProps","warn","render","extractedFormList","detailedFieldList","mandatoryFields","addId","has","concat","get","editID","editParam","deleteParam","componentDidUpdate","previousProps","Object","values","map","item","push","TechniqueList","InterfacetypeList","transalate","urlArray","languageList","array","x","params","q","slanguagetranslate","key","returnObject","all","then","length","i","translations","translatedText","console","log","componentWillUnmount","modalName"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { injectIntl } from 'react-intl';\r\nimport { Row, Col } from 'react-bootstrap';\r\nimport { toast } from 'react-toastify';\r\nimport { process } from '@progress/kendo-data-query';\r\nimport DataGrid from '../../components/data-grid/data-grid.component';\r\nimport AddInstrumentCategory from './AddInstrumentCategory';\r\nimport Esign from '../audittrail/Esign';\r\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\r\nimport { ListWrapper } from '../../components/client-group.styles';\r\nimport { callService, crudMaster, fetchInstrumentCategoryById, validateEsignCredential, openInstrumentCategoryModal, updateStore } from '../../actions';\r\nimport { transactionStatus } from '../../components/Enumeration';\r\nimport { constructOptionList, getControlMap, showEsign } from '../../components/CommonScript';\r\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\r\nimport Axios from 'axios';\r\n// import DocViewer from '../../components/doc-viewer/doc-viewer.component'\r\n// import samplePdf from '../../assets/pdf/BatchStudyReport_202100008.pdf';\r\n// import sampleExcel from '../../assets/excel/Export.xlsx';\r\n// import sampleTxt from '../../assets/text/file-sample_100kB.docx';\r\n// import rsapi, { fileViewUrl } from '../../rsapi';\r\n// import samplePng from '../../assets/image/Samplepng.png';\r\n\r\nconst mapStateToProps = state => {\r\n    return ({ Login: state.Login })\r\n}\r\n\r\nclass InstrumentCategory extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.formRef = React.createRef();\r\n        // this.closeModal = this.closeModal.bind(this);\r\n        this.extractedColumnList = [];\r\n        this.fieldList = [];\r\n\r\n\r\n        const dataState = {\r\n            skip: 0,\r\n            take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5,\r\n        };\r\n        this.state = {\r\n            data: [], masterStatus: \"\", error: \"\", selectedRecord: {},\r\n            dataResult: [],\r\n            dataState: dataState,\r\n            isOpen: false,\r\n            userRoleControlRights: [],\r\n            Interfacetype: [],\r\n            Technique: [],\r\n            controlMap: new Map()\r\n        };\r\n    }\r\n\r\n    static getDerivedStateFromProps(props, state) {\r\n\r\n        if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\r\n            toast.warn(props.Login.masterStatus);\r\n            props.Login.masterStatus = \"\";\r\n        }\r\n\r\n        if (props.Login.error !== state.error) {\r\n            toast.error(props.Login.error)\r\n            props.Login.error = \"\";\r\n        }\r\n        return null;\r\n    }\r\n\r\n    dataStateChange = (event) => {\r\n        this.setState({\r\n            dataResult: process(this.props.Login.masterData, event.dataState),\r\n            dataState: event.dataState\r\n        });\r\n    }\r\n\r\n\r\n\r\n    // openModal = (ncontrolCode) => {\r\n    //     return (dispatch) => {\r\n    //         dispatch({type: DEFAULT_RETURN, payload:{selectedRecord : {}, screenName: this.props.Login.screenName,\r\n    //             operation: \"create\", openModal: true, ncontrolCode}}); \r\n    //     }\r\n    // };\r\n\r\n    // closeModal = () => this.setState({ isOpen: false });\r\n\r\n    closeModal = () => {\r\n        let loadEsign = this.props.Login.loadEsign;\r\n        let openModal = this.props.Login.openModal;\r\n        let selectedRecord = this.props.Login.selectedRecord;\r\n        if (this.props.Login.loadEsign) {\r\n            if (this.props.Login.operation === \"delete\") {\r\n                loadEsign = false;\r\n                openModal = false;\r\n                selectedRecord = {};\r\n            } else {\r\n                loadEsign = false;\r\n                selectedRecord['esignpassword'] = undefined;\r\n                selectedRecord['esigncomments'] = undefined;\r\n            }\r\n        } else {\r\n            openModal = false;\r\n            selectedRecord = {};\r\n        }\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { openModal, loadEsign, selectedRecord, selectedId: null }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n\r\n    render() {\r\n\r\n        let primaryKeyField = \"\";\r\n\r\n        if (this.props.Login.inputParam !== undefined) {\r\n\r\n            this.extractedColumnList = [\r\n                { \"controlType\": \"textbox\", \"idsName\": \"IDS_INSTRUMENTCATEGORY\", \"dataField\": \"sinstrumentcatname\", \"width\": \"200px\" },\r\n                { \"controlType\": \"checkbox\", \"idsName\": \"IDS_CATEGORYBASEDFLOW\", \"dataField\": \"scategorybasedflow\", \"width\": \"200px\", \"isIdsField\": true, \"controlName\": \"ncategorybasedflow\" },\r\n              { \"controlType\": \"checkbox\", \"idsName\": \"IDS_CALIBRATIONREQUIRED\", \"dataField\": \"scalibrationrequired\", \"width\": \"200px\", \"isIdsField\": true, \"controlName\": \"ncalibrationreq\" },\r\n                { \"controlType\": \"checkbox\", \"idsName\": \"IDS_DISPLAYSTATUS\", \"dataField\": \"sdisplaystatus\", \"width\": \"200px\", \"isIdsField\": true, \"controlName\": \"ndefaultstatus\" }\r\n            ]\r\n\r\n            this.extractedFormList = [\r\n\r\n            ]\r\n            this.detailedFieldList = [\r\n                { \"idsName\": \"IDS_TECHNIQUE\", \"dataField\": \"stechniquename\", \"width\": \"300px\" },\r\n                { \"idsName\": \"IDS_INTERFACETYPE\", \"dataField\": \"sinterfacetypename\", \"width\": \"250px\" },\r\n                { \"idsName\": \"IDS_DESCRIPTION\", \"dataField\": \"sdescription\", \"width\": \"250px\" }\r\n\r\n            ];\r\n\r\n\r\n\r\n            primaryKeyField = \"ninstrumentcatcode\";\r\n            this.fieldList = [\"sinstrumentcatname\", \"sdescription\", \"ntechniquecode\", \"ninterfacetypecode\", \"ncalibrationreq\", \"ncategorybasedflow\", \"ndefaultstatus\"];\r\n        }\r\n\r\n        const mandatoryFields = [{ \"mandatory\": true, \"idsName\": \"IDS_INSTRUMENTCATEGORY\", \"dataField\": \"sinstrumentcatname\"  , \"mandatoryLabel\":\"IDS_ENTER\", \"controlType\": \"textbox\"},\r\n        { \"mandatory\": true, \"idsName\": \"IDS_TECHNIQUE\", \"dataField\": \"ntechniquecode\"  , \"mandatoryLabel\":\"IDS_SELECT\", \"controlType\": \"selectbox\"},\r\n        { \"mandatory\": true, \"idsName\": \"IDS_INTERFACETYPE\", \"dataField\": \"ninterfacetypecode\" , \"mandatoryLabel\":\"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n        ];\r\n\r\n        const addId = this.props.Login.inputParam && this.state.controlMap.has(\"Add\".concat(this.props.Login.inputParam.methodUrl))\r\n            && this.state.controlMap.get(\"Add\".concat(this.props.Login.inputParam.methodUrl)).ncontrolcode;\r\n\r\n        const editID = this.props.Login.inputParam && this.state.controlMap.has(\"Edit\".concat(this.props.Login.inputParam.methodUrl))\r\n            && this.state.controlMap.get(\"Edit\".concat(this.props.Login.inputParam.methodUrl)).ncontrolcode;\r\n\r\n        const editParam = {\r\n            screenName: this.props.Login.inputParam && this.props.Login.inputParam.displayName && this.props.intl.formatMessage({ id: this.props.Login.inputParam.displayName }), primaryKeyField: \"ninstrumentcatcode\", operation: \"update\",\r\n            inputParam: this.props.Login.inputParam, userInfo: this.props.Login.userInfo, ncontrolCode: editID\r\n        };\r\n        const deleteParam = { operation: \"delete\" };\r\n        return (\r\n            <>\r\n                <Row>\r\n                    <Col>\r\n                        <ListWrapper className=\"client-list-content\">\r\n\r\n                            {/* <DocViewer file={samplePdf} type={\"pdf\"}></DocViewer> */}\r\n                            {/* <DocViewer file={sampleExcel} type={\"xlsx\"} isDownloadable={true}></DocViewer>\r\n                            <DocViewer file={sampleTxt} type={\"docx\"}></DocViewer>\r\n                            <DocViewer file={fileViewUrl() + '//SharedFolder//UserProfile//83b8bc7b-6d43-41f2-bc6c-90e1a93733334'} type={\"png\"}></DocViewer>  */}\r\n                            {this.state.data ?\r\n                                <DataGrid\r\n                                    primaryKeyField={primaryKeyField}\r\n                                    data={this.state.data}\r\n                                    dataResult={this.state.dataResult}\r\n                                    dataState={this.state.dataState}\r\n                                    dataStateChange={this.dataStateChange}\r\n                                    extractedColumnList={this.extractedColumnList}\r\n                                    detailedFieldList={this.detailedFieldList}\r\n                                    expandField=\"expanded\"\r\n                                    formatMessage={this.props.intl.formatMessage}\r\n                                    controlMap={this.state.controlMap}\r\n                                    userRoleControlRights={this.state.userRoleControlRights}\r\n                                    inputParam={this.props.Login.inputParam}\r\n                                    userInfo={this.props.Login.userInfo}\r\n                                    fetchRecord={this.props.fetchInstrumentCategoryById}\r\n                                    deleteRecord={this.deleteRecord}\r\n                                    reloadData={this.reloadData}\r\n                                    editParam={editParam}\r\n                                    deleteParam={deleteParam}\r\n                                    addRecord={() => this.props.openInstrumentCategoryModal(\"IDS_INSTRUMENTCATEGORY\", \"create\", \"ninstrumentcatcode\", this.props.Login.masterData, this.props.Login.userInfo, addId)}\r\n                                    // isComponent={true}\r\n                                    pageable={true}\r\n                                    isActionRequired={true}\r\n                                    isToolBarRequired={true}\r\n                                    scrollable={\"scrollable\"}\r\n                                    selectedId={this.props.Login.selectedId}\r\n                                    gridHeight={'600px'}\r\n\r\n                                />\r\n                                : \"\"}\r\n                        </ListWrapper>\r\n                    </Col>\r\n                </Row>\r\n                {this.props.Login.openModal &&\r\n                    <SlideOutModal\r\n                        show={this.props.Login.openModal}\r\n                        closeModal={this.closeModal}\r\n                        operation={this.props.Login.operation}\r\n                        inputParam={this.props.Login.inputParam}\r\n                        screenName={this.props.Login.screenName}\r\n                        onSaveClick={this.onSaveClick}\r\n                        esign={this.props.Login.loadEsign}\r\n                        selectedRecord={this.state.selectedRecord || {}}\r\n                        mandatoryFields={mandatoryFields}\r\n                        validateEsign={this.validateEsign}\r\n                        masterStatus={this.props.Login.masterStatus}\r\n                        updateStore={this.props.updateStore}\r\n                        addComponent={this.props.Login.loadEsign ?\r\n                            <Esign\r\n                                operation={this.props.Login.operation}\r\n                                formatMessage={this.props.intl.formatMessage}\r\n                                onInputOnChange={this.onInputOnChange}\r\n                                inputParam={this.props.Login.inputParam}\r\n                                selectedRecord={this.state.selectedRecord || {}}\r\n                            />\r\n                            : <AddInstrumentCategory\r\n                                selectedRecord={this.state.selectedRecord || {}}\r\n                                onInputOnChange={this.onInputOnChange}\r\n                                onComboChange={this.onComboChange}\r\n                                Technique={this.state.Technique || []}\r\n                                Interfacetype={this.state.Interfacetype || []}\r\n\r\n                            />\r\n                        }\r\n                    />\r\n                }\r\n            </>\r\n        );\r\n    }\r\n\r\n    componentDidUpdate(previousProps) {\r\n        if (this.props.Login.masterData !== previousProps.Login.masterData) {\r\n            if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\r\n                const userRoleControlRights = [];\r\n                if (this.props.Login.userRoleControlRights) {\r\n                    this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item =>\r\n                        userRoleControlRights.push(item.ncontrolcode))\r\n                }\r\n                const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode)\r\n                this.setState({\r\n                    userRoleControlRights, controlMap, data: this.props.Login.masterData,\r\n                    dataResult: process(this.props.Login.masterData, this.state.dataState),\r\n                });\r\n            }\r\n            else {\r\n                let { dataState } = this.state;\r\n                if (this.props.Login.dataState === undefined) {\r\n                    dataState = { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 }\r\n                }\r\n\r\n                this.setState({\r\n                    data: this.props.Login.masterData,\r\n                    // isOpen: false,\r\n                    dataResult: process(this.props.Login.masterData, dataState),\r\n                    dataState//,\r\n                    //selectedRecord:{ncalibrationreq:transactionStatus.NO,ncategorybasedflow:transactionStatus.NO,ndefaultstatus:transactionStatus.NO}\r\n                });\r\n            }\r\n        } else if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\r\n            this.setState({ selectedRecord: this.props.Login.selectedRecord });\r\n        }\r\n        if (this.props.Login.Technique !== previousProps.Login.Technique || this.props.Login.Interfacetype !== previousProps.Login.Interfacetype) {\r\n\r\n            const Technique = constructOptionList(this.props.Login.Technique || [], \"ntechniquecode\",\r\n                \"stechniquename\", undefined, undefined, undefined);\r\n            const TechniqueList = Technique.get(\"OptionList\");\r\n\r\n            const Interfacetype = constructOptionList(this.props.Login.Interfacetype || [], \"ninterfacetypecode\",\r\n                \"sinterfacetypename\", undefined, undefined, undefined);\r\n            const InterfacetypeList = Interfacetype.get(\"OptionList\");\r\n\r\n            this.setState({ Technique: TechniqueList, Interfacetype: InterfacetypeList });\r\n        }\r\n    }\r\n    onInputOnChange = (event) => {\r\n\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if (event.target.type === 'checkbox') {\r\n            selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\r\n        }\r\n        else {\r\n            selectedRecord[event.target.name] = event.target.value;\r\n        }\r\n        this.setState({ selectedRecord });\r\n\r\n    }\r\n    onComboChange = (comboData, fieldName) => {\r\n        if (comboData !== null) {\r\n            const selectedRecord = this.state.selectedRecord || {};\r\n            selectedRecord[fieldName] = comboData;\r\n            this.setState({ selectedRecord });\r\n        }\r\n\r\n    }\r\n    deleteRecord = (inputData) => {\r\n        if (inputData.selectedRecord.expanded !== undefined) {\r\n            delete inputData.selectedRecord.expanded\r\n        }\r\n        const inputParam = {\r\n            classUrl: this.props.Login.inputParam.classUrl,\r\n            methodUrl: this.props.Login.inputParam.methodUrl,\r\n\r\n            inputData: {\r\n                [this.props.Login.inputParam.methodUrl.toLowerCase()]: inputData.selectedRecord,\r\n                \"userinfo\": this.props.Login.userInfo\r\n            },\r\n            operation: inputData.operation,\r\n            displayName: this.props.Login.inputParam.displayName,\r\n            dataState: this.state.dataState\r\n        }\r\n        const esignNeeded = showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, inputData.ncontrolCode);\r\n        if (esignNeeded) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData: this.props.Login.masterData },\r\n                    openModal: true, screenName: this.props.intl.formatMessage({ id: this.props.Login.inputParam.displayName }),\r\n                    operation: inputData.operation\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\r\n        }\r\n    }\r\n\r\n    reloadData = () => {\r\n        const inputParam = {\r\n            inputData: { \"userinfo\": this.props.Login.userInfo },\r\n\r\n            classUrl: this.props.Login.inputParam.classUrl,\r\n            methodUrl: this.props.Login.inputParam.methodUrl,\r\n            userInfo: this.props.Login.userInfo,\r\n            displayName: this.props.Login.inputParam.displayName\r\n        };\r\n\r\n        this.props.callService(inputParam);\r\n    }\r\n\r\n    onSaveClick = (saveType, formRef) => {\r\n        let inputData = [];\r\n        inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n        let postParam = undefined;\r\n        let selectedId = null;\r\n        if (this.props.Login.operation === \"update\") {\r\n            // edit\r\n            postParam = { inputListName: \"instrumentcategory\", selectedObject: \"selectedInstrumentCategory\", primaryKeyField: \"ninstrumentcatcode\" }\r\n            // inputData[\"instrumentcategory\"] = this.state.selectedRecord;\r\n            inputData[this.props.Login.inputParam.methodUrl.toLowerCase()] = JSON.parse(JSON.stringify(this.state.selectedRecord));\r\n            selectedId = this.props.Login.selectedRecord.ninstrumentcatcode;\r\n            //this.fieldList.map(item => {\r\n            //   return inputData[\"instrumentcategory\"][item] = this.state.selectedRecord[item] ? this.state.selectedRecord[item] : \"\";\r\n            //  })\r\n        } else {\r\n            inputData[\"instrumentcategory\"] = { \"nsitecode\": this.props.Login.userInfo.nmastersitecode };\r\n            // this.fieldList.map(item => {\r\n            //    return inputData[\"instrumentcategory\"][item] = this.state.selectedRecord[item]\r\n            //  });\r\n        }\r\n        //inputData[\"instrumentcategory\"][\"ninstrumentcatcode\"] = this.state.selectedRecord[\"ninstrumentcatcode\"]? this.state.selectedRecord[\"ninstrumentcatcode\"]:0;\r\n        inputData[\"instrumentcategory\"][\"sinstrumentcatname\"] = this.state.selectedRecord.sinstrumentcatname ? this.state.selectedRecord.sinstrumentcatname : \"\";\r\n        inputData[\"instrumentcategory\"][\"sdescription\"] = this.state.selectedRecord[\"sdescription\"] ? this.state.selectedRecord[\"sdescription\"] : \"\";\r\n        inputData[\"instrumentcategory\"][\"ntechniquecode\"] = this.state.selectedRecord[\"ntechniquecode\"] ? this.state.selectedRecord[\"ntechniquecode\"].value : -1;\r\n        inputData[\"instrumentcategory\"][\"ninterfacetypecode\"] = this.state.selectedRecord[\"ninterfacetypecode\"] ? this.state.selectedRecord[\"ninterfacetypecode\"].value : -1;\r\n        inputData[\"instrumentcategory\"][\"nstatus\"] = this.state.selectedRecord[\"nstatus\"];\r\n        inputData[\"instrumentcategory\"][\"ndefaultstatus\"] = this.state.selectedRecord[\"ndefaultstatus\"] ? this.state.selectedRecord[\"ndefaultstatus\"] : transactionStatus.NO;\r\n        inputData[\"instrumentcategory\"][\"ncategorybasedflow\"] = this.state.selectedRecord[\"ncategorybasedflow\"] ? this.state.selectedRecord[\"ncategorybasedflow\"] : transactionStatus.NO;\r\n        inputData[\"instrumentcategory\"][\"ncalibrationreq\"] = this.state.selectedRecord[\"ncalibrationreq\"] ? this.state.selectedRecord[\"ncalibrationreq\"] : transactionStatus.NO;\r\n        inputData[\"instrumentcategory\"][\"jsondata\"]={}\r\n\r\n\r\n       inputData[\"instrumentcategory\"][\"jsondata\"][\"sinstrumentdisplayname\"]= this.functionTransalte( inputData[\"instrumentcategory\"][\"sinstrumentcatname\"] )\r\n       inputData[\"instrumentcategory\"][\"jsondata\"][\"sdescriptiondisplayname\"]=this.functionTransalte( inputData[\"instrumentcategory\"][\"sdescription\"] )\r\n\r\n\r\n        const inputParam = {\r\n            classUrl: this.props.Login.inputParam.classUrl,\r\n            methodUrl: this.props.Login.inputParam.methodUrl,\r\n            displayName: this.props.Login.inputParam.displayName ? this.props.Login.inputParam.displayName : '',\r\n            inputData: inputData,\r\n            operation: this.props.Login.operation,\r\n            saveType, formRef, postParam, searchRef: this.searchRef, selectedId\r\n        }\r\n        const masterData = this.props.Login.masterData;\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolcode)) {\r\n\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData }, saveType\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n\r\n            this.props.crudMaster(inputParam, masterData, \"openModal\");\r\n        }\r\n        // this.props.crudMaster(inputParam, this.props.Login.masterData,\"openModal\");\r\n    }\r\n\r\n    async  functionTransalte(value){\r\nreturn await this.transalate(value)\r\n    }\r\n\r\n     transalate(value){\r\n    \r\n    const urlArray= 'https://translation.googleapis.com/language/translate/v2'\r\n\r\n    const languageList=this.props.Login.languageList\r\n   \r\n    const array=[]\r\n    languageList.map(x=>{\r\n     array.push( Axios.get(urlArray,{}, {params: {\r\n         q: value,\r\n         target: x.item.slanguagetranslate,\r\n         key: 'AIzaSyCHUCmpR7cT_yDFHC98CZJy2LTms-IwDlM'\r\n       }}))\r\n     })\r\n     const returnObject={}\r\n      Axios.all(array).then(data => {\r\n        // this.setState({translated: data.data.data.translations[0].translatedText})\r\n        \r\n        if(data&&data.length>0){\r\n            data.map((x,i)=>{\r\n                returnObject[languageList[i]['value']]=x.data.data.translations[0].translatedText\r\n                console.log(x.data.data.translations[0].translatedText)\r\n               })\r\n        }\r\n     }\r\n     )\r\nreturn returnObject;\r\n}\r\n\r\n    componentWillUnmount() {\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                masterData: [], inputParam: undefined, operation: null, modalName: undefined\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n    validateEsign = () => {\r\n        const inputParam = {\r\n            inputData: {\r\n                \"userinfo\": {\r\n                    ...this.props.Login.userInfo,\r\n                    sreason: this.state.selectedRecord[\"esigncomments\"]\r\n                },\r\n                password: this.state.selectedRecord[\"esignpassword\"]\r\n            },\r\n            screenData: this.props.Login.screenData\r\n        }\r\n        this.props.validateEsignCredential(inputParam, \"openModal\");\r\n    }\r\n\r\n}\r\nexport default connect(mapStateToProps, { callService, crudMaster, fetchInstrumentCategoryById, validateEsignCredential, openInstrumentCategoryModal, updateStore })(injectIntl(InstrumentCategory));"]},"metadata":{},"sourceType":"module"}