{"ast":null,"code":"var _jsxFileName = \"E:\\\\WorkingFolder\\\\React_Postgres\\\\ALPD\\\\branches\\\\SOURCE-513-PROD\\\\SOURCE-513-ALPD-5500\\\\QuaLISWeb\\\\src\\\\pages\\\\configurationmaster\\\\RuleEngineQueryBuilder.jsx\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { injectIntl, FormattedMessage } from 'react-intl';\nimport { Row, Col, Card, Nav } from 'react-bootstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { ReactComponent as Reject } from \"@svgr/webpack?-svgo,+titleProp,+ref!../../assets/image/reject.svg\";\nimport { BuilderBorder, ContionalButton } from './RuleEngineSqlbuilder.styled';\nimport OrgTree from 'react-org-tree';\nimport { faTrashAlt, faCopy, faPencilAlt, faThumbsUp, faEye } from '@fortawesome/free-solid-svg-icons';\nimport { process } from '@progress/kendo-data-query';\nimport { toast } from 'react-toastify';\nimport ListMaster from '../../components/list-master/list-master.component';\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\nimport CustomTab from '../../components/custom-tabs/custom-tabs.component';\nimport RuleEngineQueryTypeFilter from './RuleEngineQueryTypeFilter';\nimport { callService, crudMaster, validateEsignCredential, updateStore, filterColumnData, getSelectedRulesEngine, getRulesEngine, getEditRulesEngine, getRulesEngineAdd } from '../../actions';\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\nimport { transactionStatus } from '../../components/Enumeration';\nimport { constructOptionList, getControlMap, showEsign, sortData } from '../../components/CommonScript';\nimport { MediaLabel } from '../../components/App.styles';\nimport ConfirmMessage from '../../components/confirm-alert/confirm-message.component';\nimport { Affix } from 'rsuite';\nimport BreadcrumbComponent from '../../components/Breadcrumb.Component';\nimport { ListWrapper } from '../../components/client-group.styles'; // import ReactTooltip from 'react-tooltip';\n\nimport PortalModalSlideout from '../../components/portal-modal/portal-modal-slideout';\nimport AddRule from './AddRule';\nimport { ProductList } from '../product/product.styled';\nimport DataGrid from '../../components/data-grid/data-grid.component';\nimport { stringOperatorData } from './RuleEngineQueryBuilderData';\nimport FormInput from '../../components/form-input/form-input.component';\n\nconst jsonSql = require('json-sql')({\n  separatedValues: false\n}); //const jsonSqlParam = require('json-sql')({ separatedValues: true });\n\n\nclass RuleEngineQueryBuilder extends Component {\n  constructor(_props) {\n    super(_props);\n\n    this.dataStateChange = (event, ntestparametercode) => {\n      let dataStateObject = this.state.dataStateObject || {};\n\n      if (ntestparametercode) {\n        dataStateObject = { ...dataStateObject,\n          [ntestparametercode]: event.dataState\n        };\n        this.setState({\n          dataStateObject\n        });\n      } else {\n        this.setState({\n          dataState: event.dataState\n        });\n      }\n    };\n\n    this.dataStateChangetestinitiate = event => {\n      this.setState({\n        //  dataResult: process(this.props.Login.queryData, event.dataState),\n        dataStatetestinitiate: event.dataState\n      });\n    };\n\n    this.dataStateChangeMain = event => {\n      this.setState({\n        dataResultMain: process(this.props.Login.queryDataMain, event.dataStateMain),\n        dataStateMain: event.dataStateMain\n      });\n    };\n\n    this.ConfirmDelete = deleteId => {\n      this.confirmMessage.confirm(\"deleteMessage\", this.props.intl.formatMessage({\n        id: \"IDS_DELETE\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_DEFAULTCONFIRMMSG\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_OK\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_CANCEL\"\n      }), () => this.handleClickDelete(this.props.Login.masterData, deleteId, \"openModal\"));\n    };\n\n    this.changePropertyViewClose = id => {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          activeTabIndex: undefined,\n          activeTestTab: undefined,\n          activeTabId: id\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.closeModalShow = () => {\n      let openModalPopup = this.props.Login.openModalPopup;\n      let selectedRecord = this.props.Login.selectedRecord || {};\n      selectedRecord['srulename'] = \"\";\n      openModalPopup = false;\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          openModalPopup,\n          selectedRecord\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.reloadData = () => {\n      this.searchRef.current.value = \"\";\n      const inputParam = {\n        inputData: {\n          \"userinfo\": this.props.Login.userInfo,\n          nproductcatcode: this.props.Login.masterData.SelectedProductCategory.nproductcatcode\n        },\n        classUrl: \"rulesengine\",\n        methodUrl: \"RulesEngine\",\n        displayName: \"IDS_RULESENGINE\",\n        userInfo: this.props.Login.userInfo\n      };\n      this.props.callService(inputParam);\n    };\n\n    this.onsavevalidation = selectedRecord => {\n      let grouplist = selectedRecord[\"groupList\"];\n      let hasAll = true;\n\n      for (var i = 0; i < grouplist.length; i++) {\n        let rules = grouplist[i];\n\n        for (var j = 0; j < rules.length; j++) {\n          let props = [];\n\n          if (rules[j][\"orderresulttype\"] && rules[j][\"orderresulttype\"].value === 1) {\n            props = [\"stestname\", \"ssymbolname\", \"orderresulttype\", \"ndiagnosticcasecode\"];\n          } else {\n            props = [\"stestname\", \"ssymbolname\", \"orderresulttype\", \"ngradecode\"];\n          }\n\n          hasAll = props.every(prop => rules[j].hasOwnProperty(prop));\n\n          if (hasAll === false) {\n            break;\n          }\n        }\n\n        if (hasAll === false) {\n          break;\n        }\n      }\n\n      return hasAll;\n    };\n\n    this.save = () => {\n      let inputData = [];\n      let siteObject = this.props.Login.siteObject || {};\n      let testCommentObject = this.props.Login.testCommentObject || {};\n      let reportCommentObject = this.props.Login.reportCommentObject || {};\n      let testInitiateTests = this.props.Login.testInitiateTests || [];\n      let testCommentsTests = this.props.Login.testCommentsTests || [];\n      let reportCommentsTests = this.props.Login.reportCommentsTests || [];\n      const {\n        selectedRecord\n      } = this.state;\n      let rules = [];\n\n      if (selectedRecord[\"nproductcatcode\"]) {\n        if (selectedRecord[\"groupList\"].length > 0) {\n          if (this.onsavevalidation(selectedRecord)) {\n            if (selectedRecord[\"srulename\"] && selectedRecord[\"srulename\"] !== \"\" && this.props.Login.action !== 'update' && this.props.Login.action !== 'IDS_ADDTESTCOMMENTS' && this.props.Login.action !== 'IDS_ADDREPORTCOMMENTS' && this.props.Login.action !== 'IDS_ADDTEST' && this.props.Login.action !== 'IDS_ADDSITE') {\n              if (selectedRecord[\"groupList\"]) {\n                let groupList = [];\n                let outcomeList = {};\n                groupList = selectedRecord[\"groupList\"];\n                outcomeList['groupList'] = groupList;\n                outcomeList['addGroupList'] = this.props.Login.addGroupList;\n                outcomeList['testInitiateTests'] = this.props.Login.testInitiateTests && this.props.Login.testInitiateTests;\n                outcomeList['testCommentsTests'] = this.props.Login.testCommentsTests && this.props.Login.testCommentsTests;\n                outcomeList['reportCommentsTests'] = this.props.Login.reportCommentsTests && this.props.Login.reportCommentsTests;\n                outcomeList['siteObject'] = this.props.Login.siteObject && this.props.Login.siteObject;\n                outcomeList['testCommentObject'] = this.props.Login.testCommentObject && this.props.Login.testCommentObject;\n                outcomeList['reportCommentObject'] = this.props.Login.reportCommentObject && this.props.Login.reportCommentObject;\n                outcomeList['testInitiateSiteTab'] = this.props.Login.testInitiateSiteTab && this.props.Login.testInitiateSiteTab;\n                outcomeList['testCommentsTestsTab'] = this.props.Login.testCommentsTestsTab && this.props.Login.testCommentsTestsTab;\n                outcomeList['reportCommentsTestsTab'] = this.props.Login.reportCommentsTestsTab && this.props.Login.reportCommentsTestsTab;\n                outcomeList['nproductcatcode'] = selectedRecord['nproductcatcode'];\n                outcomeList['groupListJoins'] = selectedRecord['groupListJoins'];\n                let ruleEngineLayout = [];\n                let ruleEngineLayoutObject = [];\n                let groupRuleObject = {};\n                groupList.map(List => {\n                  if (List.hasOwnProperty('button_or') && List['button_or'] === true) {\n                    if (List.hasOwnProperty('button_not') && List['button_not'] === true) {\n                      groupRuleObject['button_not_button_or'] = List;\n                    } else {\n                      groupRuleObject['button_or'] = List;\n                    } // groupRuleObject['button_or'] = List\n\n\n                    ruleEngineLayout.push(groupRuleObject);\n                    groupRuleObject = {};\n                  }\n\n                  if (List.hasOwnProperty('button_and') && List['button_and'] === true) {\n                    if (List.hasOwnProperty('button_not') && List['button_not'] === true) {\n                      groupRuleObject['button_not_button_and'] = List;\n                    } else {\n                      groupRuleObject['button_and'] = List;\n                    } //  groupRuleObject['button_and'] = List\n\n\n                    ruleEngineLayout.push(groupRuleObject);\n                    groupRuleObject = {};\n                  }\n                });\n                ruleEngineLayoutObject = groupList.hasOwnProperty('button_or') && groupList['button_or'] === true ? {\n                  'button_or': ruleEngineLayout\n                } : {\n                  'button_and': ruleEngineLayout\n                };\n                console.log('savelist--->', JSON.stringify(ruleEngineLayoutObject)); //  inputData['nproductcatcode'] = this.props.Login.masterData.SelectedProductCategory.nproductcatcode\n\n                inputData['nproductcatcode'] = selectedRecord['nproductcatcode'].value;\n                inputData['srulename'] = selectedRecord['srulename'];\n                inputData['outcomeList'] = JSON.stringify(outcomeList);\n                inputData['jsondata'] = JSON.stringify(ruleEngineLayout);\n                inputData['userinfo'] = this.props.Login.userInfo;\n\n                if (this.props.Login.operation === 'update') {\n                  inputData['ntransactionrulesenginecode'] = this.props.Login.masterData.SelectedRulesEngine['ntransactionrulesenginecode'];\n                }\n\n                const inputParam = {\n                  classUrl: \"rulesengine\",\n                  methodUrl: \"RulesEngine\",\n                  displayName: this.props.Login.inputParam.displayName,\n                  inputData: inputData,\n                  operation: this.props.Login.operation === 'create' ? 'create' : 'update'\n                };\n                this.props.crudMaster(inputParam, this.props.Login.masterData, \"openPortalModal\");\n              } else {\n                toast.info(this.props.intl.formatMessage({\n                  id: \"IDS_PLEASEADDRULE\"\n                }));\n              }\n            } else {\n              selectedRecord['srulename'] = selectedRecord['srulenamecopy'] || \"\";\n              const updateInfo = {\n                typeName: DEFAULT_RETURN,\n                data: {\n                  openModalPopup: true,\n                  selectedRecord,\n                  action: \"IDS_SAVERULEMODAL\",\n                  openmodalsavePopup: true\n                }\n              };\n              this.props.updateStore(updateInfo); //   toast.info(this.props.intl.formatMessage({ id: \"IDS_ENTERRULESENGINENAME\" }));\n            }\n          } else {\n            toast.info(this.props.intl.formatMessage({\n              id: \"IDS_COMPLETETHERULETOSAVE\"\n            }));\n          }\n        } else {\n          toast.info(this.props.intl.formatMessage({\n            id: \"IDS_ATLEASTADDONERULE\"\n          }));\n        }\n      } else {\n        toast.info(this.props.intl.formatMessage({\n          id: \"IDS_SELECTPRODUCTCATEGORY\"\n        }));\n      }\n    };\n\n    this.openFilter = () => {\n      let showFilter = !this.props.Login.showFilter;\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          showFilter\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.closeFilter = () => {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          showFilter: false\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onFilterSubmit = () => {\n      this.searchRef.current.value = \"\";\n\n      if (this.state.selectedcombo[\"nproductcatcode\"]) {\n        console.log(this.state.selectedcombo[\"nproductcatcode\"].value);\n      }\n\n      const nproductcatcode = this.state.selectedcombo[\"nproductcatcode\"] ? this.state.selectedcombo[\"nproductcatcode\"].value : this.props.Login.masterData.queryTypeCode;\n      this.props.getRulesEngine(nproductcatcode, this.props.Login.userInfo, this.props.Login.masterData);\n    };\n\n    this.onFilterComboChange = (comboData, fieldName) => {\n      const selectedRecord = this.state.selectedRecord || {};\n      selectedRecord[fieldName] = comboData; //  this.generateFilterQuery(selectedRecord);\n    };\n\n    this.onComboChange = (comboData, fieldName) => {\n      const selectedcombo = this.state.selectedcombo || {};\n      selectedcombo[fieldName] = comboData;\n      this.setState({\n        selectedcombo\n      });\n    };\n\n    this.onOutcomeChange = (comboData, index) => {\n      const {\n        selectedRecord\n      } = this.state;\n      selectedRecord[\"outComeList\"] = [];\n      selectedRecord[\"outComeList\"][index] = [];\n      selectedRecord[\"outComeList\"][index] = comboData;\n\n      if (selectedRecord[\"outComeList\"][index]) {\n        this.setState({\n          selectedRecord\n        });\n      }\n    };\n\n    this.onRuleChange = (comboData, fieldName, groupIndex, index) => {\n      const {\n        selectedRecord\n      } = this.state;\n      this.clearSelectedRule(selectedRecord, index);\n      const sqlQuery = this.props.Login.sqlQuery;\n      const oldselectedRecord = selectedRecord;\n      selectedRecord[\"groupList\"][groupIndex][index][fieldName] = comboData;\n      const tableData = comboData.item;\n\n      if (selectedRecord[\"groupList\"][groupIndex][index][fieldName]) {\n        this.setState({\n          selectedRecord,\n          groupIndex,\n          index\n        });\n      }\n    };\n\n    this.onMasterDataChange = (comboData, fieldName, groupIndex, index) => {\n      const {\n        selectedRecord\n      } = this.state;\n      let isResultorOrderType = [];\n      let optionsByRule = [];\n\n      if (this.state.optionsByRule && this.state.optionsByRule.length > 0) {\n        optionsByRule = this.state.optionsByRule;\n      } else {\n        optionsByRule[groupIndex] = [];\n        optionsByRule[groupIndex][index] = [];\n      }\n\n      if (this.state.isResultorOrderType && this.state.isResultorOrderType.length > 0) {\n        isResultorOrderType = this.state.isResultorOrderType;\n      } else {\n        isResultorOrderType[groupIndex] = [];\n        isResultorOrderType[groupIndex][index] = [];\n      }\n\n      selectedRecord[\"groupList\"][groupIndex][index][fieldName] = comboData;\n\n      if (fieldName !== 'ndiagnosticcasecode' && fieldName !== 'ngradecode') {\n        if (isResultorOrderType[groupIndex] === undefined) {\n          isResultorOrderType[groupIndex] = [];\n          isResultorOrderType[groupIndex][index] = [];\n        }\n\n        isResultorOrderType[groupIndex][index] = comboData.value;\n\n        if (optionsByRule[groupIndex] === undefined) {\n          optionsByRule[groupIndex] = [];\n          optionsByRule[groupIndex][index] = [];\n        }\n\n        if (isResultorOrderType[groupIndex][index] === 1) {\n          delete selectedRecord[\"groupList\"][groupIndex][index]['ndiagnosticcasecode'];\n          optionsByRule[groupIndex][index] = this.props.Login.DiagnosticCaseList;\n        } else {\n          delete selectedRecord[\"groupList\"][groupIndex][index]['ngradecode'];\n          optionsByRule[groupIndex][index] = this.props.Login.GradeList;\n        }\n\n        this.setState({\n          selectedRecord,\n          isResultorOrderType,\n          optionsByRule\n        });\n      } else {\n        this.setState({\n          selectedRecord\n        });\n      }\n    };\n\n    this.addRule = (type, groupIndex) => {\n      const {\n        selectedRecord\n      } = this.state;\n      let viewColumnListByRule = this.props.Login.viewColumnListByRule || [];\n      const addGroupList = this.props.Login.addGroupList || [];\n      const arrayLength = addGroupList[groupIndex];\n      addGroupList[groupIndex] = arrayLength + 1;\n      selectedRecord[\"groupList\"][groupIndex][arrayLength] = {};\n      viewColumnListByRule = this.props.Login.viewColumnList || this.props.Login.databaseviewList;\n      ;\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          addGroupList,\n          viewColumnListByRule\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.paneSizeChange = d => {\n      this.setState({\n        splitChangeWidthPercentage: d\n      });\n    };\n\n    this.addTest = () => {\n      let openModalPopup = this.props.Login.openModalPopup;\n      let action = this.props.Login.action;\n      let selectedRecord = this.props.Login.selectedRecord || {};\n      delete selectedRecord['ntestparametercode'];\n      delete selectedRecord['nsampletestcommentscode'];\n      delete selectedRecord['ncommentsubtypecode'];\n      delete selectedRecord['ncommenttypecode'];\n      delete selectedRecord['sgeneralcomments'];\n      delete selectedRecord['needoutsource'];\n\n      if (this.props.Login.addGroupList.length > 0) {\n        action = \"IDS_ADDTEST\";\n        openModalPopup = true;\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            openModalPopup,\n            action,\n            selectedRecord,\n            openmodalsavePopup: false\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_PLEASEADDRULETOADDOUTCOME\"\n        }));\n      }\n    };\n\n    this.addComments = () => {\n      let openModalPopup = this.props.Login.openModalPopup;\n      let action = this.props.Login.action;\n      let selectedParameter = this.props.Login.masterData.selectedParameter || [];\n      let testparameter = this.props.Login.viewColumnListByRule || [];\n      let selectedRecord = this.props.Login.selectedRecord || {};\n      selectedRecord['ntestparametercode'] = {};\n      selectedRecord['ntestparametercode'] = testparameter.filter(x => {\n        return x.value === selectedParameter.ntestparametercode;\n      })[0];\n      delete selectedRecord['nsampletestcommentscode'];\n      delete selectedRecord['ncommentsubtypecode'];\n      delete selectedRecord['ncommenttypecode'];\n      delete selectedRecord['sgeneralcomments'];\n\n      if (this.props.Login.addGroupList.length > 0) {\n        if (this.props.Login.activeTabIndex === 2) {\n          action = \"IDS_ADDTESTCOMMENTS\";\n        } else {\n          action = \"IDS_ADDREPORTCOMMENTS\";\n        }\n\n        openModalPopup = true;\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            openModalPopup,\n            action,\n            selectedRecord,\n            openmodalsavePopup: false\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_PLEASEADDRULETOADDOUTCOME\"\n        }));\n      }\n    };\n\n    this.addModalSite = () => {\n      let openModalPopup = this.props.Login.openModalPopup;\n      let selectedParameter = this.props.Login.masterData.selectedParameter || [];\n      let testparameter = this.props.Login.viewColumnListByRule || [];\n      let selectedRecord = this.props.Login.selectedRecord || {};\n      selectedRecord['ntestparametercode'] = {};\n      selectedRecord['ntestparametercode'] = testparameter.filter(x => {\n        return x.value === selectedParameter.ntestparametercode;\n      })[0];\n      openModalPopup = true;\n      let action = this.props.Login.action;\n      action = \"IDS_ADDSITE\";\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          selectedRecord,\n          openModalPopup,\n          action,\n          openmodalsavePopup: false\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.modalsaveClick = () => {\n      let needoutsource = this.props.Login.needoutsource || {};\n      let selectedRecord = this.state.selectedRecord || {};\n      let masterData = this.props.Login.masterData || {};\n      let testInitiateTests = this.props.Login.testInitiateTests || [];\n      let testCommentsTests = this.props.Login.testCommentsTests || [];\n      let reportCommentsTests = this.props.Login.reportCommentsTests || [];\n      let siteObject = this.props.Login.siteObject || {};\n      let testCommentObject = this.props.Login.testCommentObject || {};\n      let reportCommentObject = this.props.Login.reportCommentObject || {};\n      let testInitiateTestsTemp = [];\n      let testCommentsTestsTemp = [];\n      let reportCommentsTestsTemp = [];\n      let testInitiateSiteTemp = [];\n      let testCommentsTestsTab = this.props.Login.testCommentsTestsTab || [];\n      let reportCommentsTestsTab = this.props.Login.reportCommentsTestsTab || [];\n      let testInitiateSiteTab = this.props.Login.testInitiateSiteTab || [];\n      let testInitiateTestOptions = this.props.Login.testInitiateTestOptions || [];\n      let testCommentsTestOptions = this.props.Login.testCommentsTestOptions || [];\n      let reportCommentsTestOptions = this.props.Login.reportCommentsTestOptions || [];\n      let testInitiateTestdeletedOptions = this.props.Login.testInitiateTestdeletedOptions || [];\n      let testCommentsTestdeletedOptions = this.props.Login.testCommentsTestdeletedOptions || [];\n      let reportCommentsTestdeletedOptions = this.props.Login.reportCommentsTestdeletedOptions || [];\n      let updateInfo = {};\n\n      if (this.props.Login.action === 'IDS_ADDTEST') {\n        let npkAtestparametercode = 0;\n        let npkBtestparametercode = 0;\n        let npkCtestparametercode = 0;\n\n        if (this.props.Login.activeTabIndex === 1) {\n          let isduplicate = {};\n          isduplicate = testInitiateTests.filter(x => x.ntestparametercode === selectedRecord['ntestparametercode'].item['ntestparametercode']);\n\n          if (isduplicate.length === 0) {\n            masterData['testParameter'] = {};\n            npkAtestparametercode = this.props.Login.npkAtestparametercode || 0;\n            npkAtestparametercode++;\n            selectedRecord['ntestparametercode'].item['npkAtestparametercode'] = npkAtestparametercode;\n            testInitiateTests.push(selectedRecord['ntestparametercode'].item);\n            masterData['testParameter'] = sortData(testInitiateTests, 'descending', 'npkAtestparametercode');\n            masterData['selectedParameter'] = selectedRecord['ntestparametercode'].item;\n            delete selectedRecord['ntestparametercode'];\n          } else {\n            return toast.warn(this.props.intl.formatMessage({\n              id: \"IDS_ALREADYEXISTS\"\n            }));\n          }\n        }\n\n        if (this.props.Login.activeTabIndex === 2) {\n          let isduplicate = {};\n          isduplicate = testCommentsTests.filter(x => x.ntestparametercode === selectedRecord['ntestparametercode'].item['ntestparametercode']);\n\n          if (isduplicate.length === 0) {\n            masterData['testParameterComments'] = {};\n            npkBtestparametercode = this.props.Login.npkBtestparametercode || 0;\n            npkBtestparametercode++;\n            selectedRecord['ntestparametercode'].item['npkBtestparametercode'] = npkAtestparametercode;\n            testCommentsTests.push(selectedRecord['ntestparametercode'].item);\n            masterData['testParameterComments'] = sortData(testCommentsTests, 'descending', 'npkBtestparametercode');\n            masterData['selectedParameter'] = selectedRecord['ntestparametercode'].item;\n            delete selectedRecord['ntestparametercode'];\n          } else {\n            return toast.warn(this.props.intl.formatMessage({\n              id: \"IDS_ALREADYEXISTS\"\n            }));\n          }\n        }\n\n        if (this.props.Login.activeTabIndex === 3) {\n          let isduplicate = {};\n          isduplicate = reportCommentsTests.filter(x => x.ntestparametercode === selectedRecord['ntestparametercode'].item['ntestparametercode']);\n\n          if (isduplicate.length === 0) {\n            masterData['testParameterreportComments'] = {};\n            npkCtestparametercode = this.props.Login.npkCtestparametercode || 0;\n            npkCtestparametercode++;\n            selectedRecord['ntestparametercode'].item['npkCtestparametercode'] = npkCtestparametercode;\n            reportCommentsTests.push(selectedRecord['ntestparametercode'].item);\n            masterData['testParameterreportComments'] = sortData(reportCommentsTests, 'descending', 'npkCtestparametercode');\n            masterData['selectedParameter'] = selectedRecord['ntestparametercode'].item;\n            delete selectedRecord['ntestparametercode'];\n          } else {\n            return toast.warn(this.props.intl.formatMessage({\n              id: \"IDS_ALREADYEXISTS\"\n            }));\n          }\n        }\n\n        updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            openModalPopup: false,\n            masterData,\n            testInitiateTests,\n            testCommentsTests,\n            reportCommentsTests,\n            npkAtestparametercode,\n            npkBtestparametercode,\n            npkCtestparametercode,\n            testInitiateTestOptions,\n            testInitiateTestdeletedOptions,\n            selectedRecord\n          }\n        };\n      }\n\n      if (selectedRecord['nsampletestcommentscode'] || selectedRecord['sgeneralcomments'] //this.props.Login.action === 'IDS_ADDTESTCOMMENTS'\n      ) {\n        // let isduplicate = {}\n        // let spredefinedname = selectedRecord['nsampletestcommentscode'].label\n        // let arraycheck = testCommentObject[masterData.selectedParameter.ntestparametercode]\n        // if (arraycheck) {\n        //     isduplicate = arraycheck.filter(x => x.spredefinedname === spredefinedname)\n        // }\n        // if (arraycheck !== undefined ? isduplicate.length > 0 ? false : true : true) {\n        masterData['testComments'] = {};\n        let npKAsampletestcommentscode = 0;\n\n        if (testCommentObject.hasOwnProperty(masterData.selectedParameter.ntestparametercode)) {\n          npKAsampletestcommentscode = this.props.Login.npKAsampletestcommentscode;\n          npKAsampletestcommentscode++;\n          let object = {\n            npKAsampletestcommentscode: npKAsampletestcommentscode,\n            ncommentsubtypecode: selectedRecord['ncommentsubtypecode']['value'],\n            scommentsubtype: selectedRecord['ncommentsubtypecode']['label'],\n            ncommenttypecode: selectedRecord['ncommenttypecode']['value'],\n            scommenttype: selectedRecord['ncommenttypecode']['label'],\n            nsampletestcommentscode: selectedRecord['nsampletestcommentscode'] ? selectedRecord['nsampletestcommentscode'].value : -1,\n            spredefinedname: selectedRecord['nsampletestcommentscode'] ? selectedRecord['nsampletestcommentscode'].label : \"-\",\n            sgeneralcomments: selectedRecord['sgeneralcomments'] ? selectedRecord['sgeneralcomments'] : \"-\",\n            stestparametersynonym: masterData.selectedParameter.stestparametersynonym,\n            ntestparametercode: masterData.selectedParameter.ntestparametercode\n          };\n          testCommentsTestsTemp = testCommentObject[masterData.selectedParameter.ntestparametercode];\n          testCommentsTestsTemp.push(object);\n          testCommentsTestsTab.push(object);\n          testCommentObject[masterData.selectedParameter.ntestparametercode] = sortData(testCommentsTestsTemp, 'descending', 'npKAsampletestcommentscode');\n          delete selectedRecord['nsampletestcommentscode'];\n          delete selectedRecord['ncommentsubtypecode'];\n          delete selectedRecord['ncommenttypecode'];\n          delete selectedRecord['sgeneralcomments'];\n        } else {\n          npKAsampletestcommentscode++;\n          let object = {\n            npKAsampletestcommentscode: npKAsampletestcommentscode,\n            ncommentsubtypecode: selectedRecord['ncommentsubtypecode']['value'],\n            scommentsubtype: selectedRecord['ncommentsubtypecode']['label'],\n            ncommenttypecode: selectedRecord['ncommenttypecode']['value'],\n            scommenttype: selectedRecord['ncommenttypecode']['label'],\n            nsampletestcommentscode: selectedRecord['nsampletestcommentscode'] ? selectedRecord['nsampletestcommentscode'].value : -1,\n            spredefinedname: selectedRecord['nsampletestcommentscode'] ? selectedRecord['nsampletestcommentscode'].label : \"-\",\n            sgeneralcomments: selectedRecord['sgeneralcomments'] ? selectedRecord['sgeneralcomments'] : \"-\",\n            stestparametersynonym: masterData.selectedParameter.stestparametersynonym,\n            ntestparametercode: masterData.selectedParameter.ntestparametercode\n          };\n          testCommentsTestsTemp.push(object);\n          testCommentsTestsTab.push(object);\n          testCommentObject[masterData.selectedParameter.ntestparametercode] = sortData(testCommentsTestsTemp, 'descending', 'npKAsampletestcommentscode');\n          delete selectedRecord['nsampletestcommentscode'];\n          delete selectedRecord['ncommentsubtypecode'];\n          delete selectedRecord['ncommenttypecode'];\n          delete selectedRecord['sgeneralcomments'];\n        }\n\n        masterData['testComments'] = testCommentObject;\n        updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            openModalPopup: false,\n            masterData,\n            testCommentObject,\n            testCommentsTestsTab,\n            npKAsampletestcommentscode,\n            selectedRecord\n          }\n        }; // }\n        // else {\n        //     toast.warn(this.props.intl.formatMessage({ id: \"IDS_ALREADYEXISTS\" }));\n        // }\n      } // else if (this.props.Login.action === 'IDS_ADDREPORTCOMMENTS') {\n      //     let isduplicate = {}\n      //     let spredefinedname = selectedRecord['nsampletestcommentscode'].label\n      //     let arraycheck = reportCommentObject[masterData.selectedParameter.ntestparametercode]\n      //     if (arraycheck) {\n      //         isduplicate = arraycheck.filter(x => x.spredefinedname === spredefinedname)\n      //     }\n      //     if (arraycheck !== undefined ? isduplicate.length > 0 ? false : true : true) {\n      //         masterData['reportComments'] = {}\n      //         let npKBsampletestcommentscode = 0;\n      //         if (reportCommentObject.hasOwnProperty(masterData.selectedParameter.ntestparametercode)) {\n      //             npKBsampletestcommentscode = this.props.Login.npKBsampletestcommentscode;\n      //             npKBsampletestcommentscode++;\n      //             let object = {\n      //                 npKBsampletestcommentscode: npKBsampletestcommentscode,\n      //                 nsampletestcommentscode: selectedRecord['nsampletestcommentscode'].value,\n      //                 spredefinedname: selectedRecord['nsampletestcommentscode'].label,\n      //                 scommentsubtype: this.props.Login.reportcomments[0].item.scommentsubtype\n      //                 , stestparametersynonym: masterData.selectedParameter.stestparametersynonym, ntestparametercode: masterData.selectedParameter.ntestparametercode\n      //             }\n      //             reportCommentsTestsTemp = reportCommentObject[masterData.selectedParameter.ntestparametercode]\n      //             reportCommentsTestsTemp.push(object);\n      //             reportCommentsTestsTab.push(object);\n      //             reportCommentObject[masterData.selectedParameter.ntestparametercode] = sortData(reportCommentsTestsTemp, 'descending', 'npKBsampletestcommentscode')\n      //             delete selectedRecord['nsampletestcommentscode']\n      //         }\n      //         else {\n      //             npKBsampletestcommentscode++;\n      //             let object = {\n      //                 npKBsampletestcommentscode: npKBsampletestcommentscode,\n      //                 nsampletestcommentscode: selectedRecord['nsampletestcommentscode'].value,\n      //                 spredefinedname: selectedRecord['nsampletestcommentscode'].label,\n      //                 scommentsubtype: this.props.Login.reportcomments[0].item.scommentsubtype\n      //                 , stestparametersynonym: masterData.selectedParameter.stestparametersynonym, ntestparametercode: masterData.selectedParameter.ntestparametercode\n      //             }\n      //             reportCommentsTestsTemp.push(object);\n      //             reportCommentsTestsTab.push(object);\n      //             reportCommentObject[masterData.selectedParameter.ntestparametercode] = sortData(reportCommentsTestsTemp, 'descending', 'npKBsampletestcommentscode')\n      //             delete selectedRecord['nsampletestcommentscode']\n      //         }\n      //         masterData['reportComments'] = reportCommentObject\n      //         updateInfo = {\n      //             typeName: DEFAULT_RETURN,\n      //             data: {\n      //                 openModalPopup: false,\n      //                 masterData,\n      //                 reportCommentObject,\n      //                 reportCommentsTestsTab,\n      //                 npKBsampletestcommentscode,\n      //                 selectedRecord\n      //             }\n      //         }\n      //     } else {\n      //         toast.warn(this.props.intl.formatMessage({ id: \"IDS_ALREADYEXISTS\" }));\n      //     }\n      // }\n\n\n      if (selectedRecord['nfromsitecode'] && selectedRecord['ntositecode']) {\n        masterData['testSite'] = {};\n        let siteseqnumber = 0;\n\n        if (siteObject.hasOwnProperty(masterData.selectedParameter.ntestparametercode)) {\n          siteseqnumber = this.props.Login.siteseqnumber;\n          siteseqnumber++;\n          let object = {\n            npksitecode: siteseqnumber,\n            sfromsitename: selectedRecord['nfromsitecode'].label,\n            stositename: selectedRecord['ntositecode'].label,\n            stestparametersynonym: masterData.selectedParameter.stestparametersynonym,\n            ntestparametercode: masterData.selectedParameter.ntestparametercode\n          };\n          testInitiateSiteTemp = siteObject[masterData.selectedParameter.ntestparametercode];\n          testInitiateSiteTemp.push(object);\n          testInitiateSiteTab.push(object);\n          siteObject[masterData.selectedParameter.ntestparametercode] = sortData(testInitiateSiteTemp, 'descending', 'npksitecode');\n          delete selectedRecord['ntestparametercode'];\n          delete selectedRecord['nfromsitecode'];\n          delete selectedRecord['ntositecode'];\n        } else {\n          siteseqnumber++;\n          let object = {\n            npksitecode: siteseqnumber,\n            sfromsitename: selectedRecord['nfromsitecode'].label,\n            stositename: selectedRecord['ntositecode'].label,\n            stestparametersynonym: masterData.selectedParameter.stestparametersynonym,\n            ntestparametercode: masterData.selectedParameter.ntestparametercode\n          };\n          testInitiateSiteTemp.push(object);\n          testInitiateSiteTab.push(object);\n          siteObject[masterData.selectedParameter.ntestparametercode] = sortData(testInitiateSiteTemp, 'descending', 'npksitecode');\n          delete selectedRecord['ntestparametercode'];\n          delete selectedRecord['nfromsitecode'];\n          delete selectedRecord['ntositecode'];\n        }\n\n        masterData['testSite'] = siteObject;\n        updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            openModalPopup: false,\n            masterData,\n            siteObject,\n            siteseqnumber,\n            testInitiateSiteTab\n          }\n        };\n      }\n\n      if (Object.keys(updateInfo).length > 0) {\n        this.props.updateStore(updateInfo);\n      }\n    };\n\n    this.deletModalSite = (inputparam, action, row) => {\n      let temparray = [];\n      let testInitiateSiteTab = this.props.Login.testInitiateSiteTab;\n      let testCommentsTestsTab = this.props.Login.testCommentsTestsTab;\n      let reportCommentsTestsTab = this.props.Login.reportCommentsTestsTab;\n      let siteObject = this.props.Login.siteObject || {};\n      let testCommentObject = this.props.Login.testCommentObject || {};\n      let reportCommentObject = this.props.Login.reportCommentObject || {};\n      let masterData = this.props.Login.masterData || {};\n\n      if (this.props.Login.activeTabIndex === 1) {\n        temparray = siteObject[masterData.selectedParameter.ntestparametercode];\n        temparray.splice(row['dataIndex'], 1);\n        testInitiateSiteTab.splice(row['dataIndex'], 1);\n        siteObject[masterData.selectedParameter.ntestparametercode] = temparray;\n      }\n\n      if (this.props.Login.activeTabIndex === 2) {\n        temparray = testCommentObject[masterData.selectedParameter.ntestparametercode];\n        temparray.splice(row['dataIndex'], 1);\n        testCommentsTestsTab.splice(row['dataIndex'], 1);\n        testCommentObject[masterData.selectedParameter.ntestparametercode] = temparray;\n      }\n\n      if (this.props.Login.activeTabIndex === 3) {\n        temparray = reportCommentObject[masterData.selectedParameter.ntestparametercode];\n        temparray.splice(row['dataIndex'], 1);\n        reportCommentsTestsTab.splice(row['dataIndex'], 1);\n        reportCommentObject[masterData.selectedParameter.ntestparametercode] = temparray;\n      }\n\n      let updateInfo = {};\n      updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          siteObject,\n          testCommentObject,\n          reportCommentObject,\n          testInitiateSiteTab,\n          reportCommentsTestsTab,\n          testCommentsTestsTab\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.deleteModalTest = () => {\n      let testInitiateTests = this.props.Login.testInitiateTests || [];\n      let testCommentsTests = this.props.Login.testCommentsTests || [];\n      let reportCommentsTests = this.props.Login.reportCommentsTests || [];\n      let siteObject = this.props.Login.siteObject || {};\n      let testCommentObject = this.props.Login.testCommentObject || {};\n      let reportCommentObject = this.props.Login.reportCommentObject || {};\n      let testInitiateTestOptions = this.props.Login.testInitiateTestOptions || [];\n      let testCommentsTestOptions = this.props.Login.testCommentsTestOptions || [];\n      let reportCommentsTestOptions = this.props.Login.reportCommentsTestOptions || [];\n      let viewColumnListByRule = this.props.Login.viewColumnListByRule || [];\n      let testInitiateTestdeletedOptions = this.props.Login.testInitiateTestdeletedOptions || [];\n      let testCommentsTestdeletedOptions = this.props.Login.testCommentsTestdeletedOptions || [];\n      let reportCommentsTestdeletedOptions = this.props.Login.reportCommentsTestdeletedOptions || [];\n      let masterData = this.props.Login.masterData || {};\n      let index = 0;\n\n      if (this.props.Login.activeTabIndex === 1) {\n        index = this.props.Login.testInitiateTests.findIndex(x => x.ntestparametercode === masterData.selectedParameter.ntestparametercode);\n        testInitiateTests.splice(index, 1);\n        delete siteObject[masterData.selectedParameter.ntestparametercode];\n      }\n\n      if (this.props.Login.activeTabIndex === 2) {\n        index = this.props.Login.testCommentsTests.findIndex(x => x.ntestparametercode === masterData.selectedParameter.ntestparametercode);\n        testCommentsTests.splice(index, 1);\n        delete testCommentObject[masterData.selectedParameter.ntestparametercode];\n      }\n\n      if (this.props.Login.activeTabIndex === 3) {\n        index = this.props.Login.reportCommentsTests.findIndex(x => x.ntestparametercode === masterData.selectedParameter.ntestparametercode);\n        reportCommentsTests.splice(index, 1);\n        delete reportCommentObject[masterData.selectedParameter.ntestparametercode];\n      }\n\n      let updateInfo = {};\n      updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          testInitiateTests,\n          siteObject,\n          testCommentObject,\n          testCommentsTests,\n          reportCommentsTests,\n          reportCommentObject\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onmodalComboChange = (comboData, fieldName) => {\n      let selectedRecord = this.state.selectedRecord || {};\n      let isneedsgeneralcomments = this.state.isneedsgeneralcomments || {};\n\n      if (fieldName === 'ncommentsubtypecode') {\n        if (comboData.value === 6) {\n          isneedsgeneralcomments = true;\n          delete selectedRecord['nsampletestcommentscode'];\n        } else {\n          isneedsgeneralcomments = false;\n          delete selectedRecord['sgeneralcomments'];\n        }\n      }\n\n      selectedRecord[fieldName] = comboData;\n      this.setState({\n        selectedRecord,\n        isneedsgeneralcomments\n      });\n    };\n\n    this.getOutcomeDetails = inputParam => {\n      let masterData = this.props.Login.masterData || {};\n      const testParameter = this.state.activeTabIndex === 1 ? inputParam.testParameter : this.state.activeTabIndex === 2 ? inputParam.testParameterComments : inputParam.testParameterreportComments;\n      masterData['selectedParameter'] = {};\n      masterData['selectedParameter'] = testParameter;\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          masterData\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.handleExpandChange = () => {\n      let childListMap1 = this.state.childListMap1 || new Map();\n      let childListMap2 = this.state.childListMap2 || new Map();\n      let childListMap3 = this.state.childListMap3 || new Map();\n      let childListMap = this.state.childListMap || new Map(); //     let keylst = this.props.Login.masterData.activeTabName === 'IDS_NEEDTESTINITIATE' ?\n      //     Object.keys(this.props.Login.masterData.SelectedRulesEngine['jsonuidata']['siteObject']) :\n      //     this.props.Login.masterData.activeTabName === 'IDS_TESTCOMMENTS' ?\n      //         Object.keys(this.props.Login.masterData.SelectedRulesEngine['jsonuidata']['testCommentObject']) :\n      //         Object.keys(this.props.Login.masterData.SelectedRulesEngine['jsonuidata']['reportCommentObject'])\n      // keylst.map(key => {\n      //     childListMap.set(parseInt(key),\n      //         Object.values(this.props.Login.masterData.activeTabName === 'IDS_NEEDTESTINITIATE' ?\n      //             this.props.Login.masterData.SelectedRulesEngine['jsonuidata']['siteObject'][key] :\n      //             this.props.Login.masterData.activeTabName === 'IDS_TESTCOMMENTS' ?\n      //                 this.props.Login.masterData.SelectedRulesEngine['jsonuidata']['testCommentObject'][key] :\n      //                 this.props.Login.masterData.SelectedRulesEngine['jsonuidata']['reportCommentObject'][key]));\n      // })\n      // this.setState({ childListMap })\n\n      if (this.props.Login.masterData.activeTabName === 'IDS_NEEDTESTINITIATE') {\n        // let keylst =\n        //     Object.keys(this.props.Login.masterData.SelectedRulesEngine['jsonuidata']['siteObject'])\n        // keylst.map(key => {\n        //     childListMap1.set(parseInt(key),\n        //         Object.values(\n        //             this.props.Login.masterData.SelectedRulesEngine['jsonuidata']['siteObject'][key]));\n        // })\n        // this.setState({ childListMap1 })\n        let keylst = this.props.Login.masterData.activeTabName === 'IDS_NEEDTESTINITIATE' ? Object.keys(this.props.Login.masterData.SelectedRulesEngine['jsonuidata']['siteObject']) : this.props.Login.masterData.activeTabName === 'IDS_TESTCOMMENTS' ? Object.keys(this.props.Login.masterData.SelectedRulesEngine['jsonuidata']['testCommentObject']) : Object.keys(this.props.Login.masterData.SelectedRulesEngine['jsonuidata']['reportCommentObject']);\n        keylst.map(key => {\n          childListMap.set(parseInt(key), Object.values(this.props.Login.masterData.activeTabName === 'IDS_NEEDTESTINITIATE' ? this.props.Login.masterData.SelectedRulesEngine['jsonuidata']['siteObject'][key] : this.props.Login.masterData.activeTabName === 'IDS_TESTCOMMENTS' ? this.props.Login.masterData.SelectedRulesEngine['jsonuidata']['testCommentObject'][key] : this.props.Login.masterData.SelectedRulesEngine['jsonuidata']['reportCommentObject'][key]));\n        });\n        this.setState({\n          childListMap\n        });\n      }\n\n      if (this.props.Login.masterData.activeTabName === 'IDS_TESTCOMMENTS') {\n        let keylst = Object.keys(this.props.Login.masterData.SelectedRulesEngine['jsonuidata']['testCommentObject']);\n        keylst.map(key => {\n          childListMap2.set(parseInt(key), Object.values(this.props.Login.masterData.SelectedRulesEngine['jsonuidata']['testCommentObject'][key]));\n        });\n        this.setState({\n          childListMap2\n        });\n      }\n\n      if (this.props.Login.masterData.activeTabName === 'IDS_REPORTCOMMENTS') {\n        let keylst = Object.keys(this.props.Login.masterData.SelectedRulesEngine['jsonuidata']['reportCommentObject']);\n        keylst.map(key => {\n          childListMap3.set(parseInt(key), Object.values(this.props.Login.masterData.SelectedRulesEngine['jsonuidata']['reportCommentObject'][key]));\n        });\n        this.setState({\n          childListMap3\n        });\n      }\n    };\n\n    this.onTabChange = tabProps => {\n      let masterData = this.props.Login.masterData && this.props.Login.masterData;\n      masterData['activeTabName'] = tabProps.activeTabName;\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          masterData\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.openflowview = () => {\n      let openModal = this.props.Login.openModal;\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          openModal: true\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.tabDetail = () => {\n      let masterData = this.props.Login.masterData || {};\n      let jsonuidata = this.props.Login.masterData.SelectedRulesEngine && this.props.Login.masterData.SelectedRulesEngine['jsonuidata']; // let childList = this.props.Login.screenName === 'IDS_NEEDTESTINITIATE' ? jsonuidata && jsonuidata['siteObject'] : jsonuidata \n      // && jsonuidata['testCommentObject']\n      // let parentlist = this.props.Login.masterData.activeTabName === 'IDS_NEEDTESTINITIATE' ? jsonuidata['siteObject']\n      // [masterData.selectedParameter.ntestparametercode] :\n      //     this.props.Login.masterData.activeTabName === 'IDS_TESTCOMMENTS' ? jsonuidata['testCommentObject'][masterData.selectedParameter.ntestparametercode]\n      //         : jsonuidata['reportCommentObject'][masterData.selectedParameter.ntestparametercode]\n\n      const tabMap = new Map();\n      {\n        tabMap.set(\"IDS_NEEDTESTINITIATE\", /*#__PURE__*/React.createElement(DataGrid, {\n          key: \"testsectionkey\",\n          primaryKeyField: \"nresultusedmaterialcode\",\n          expandField: \"expanded\",\n          handleExpandChange: this.handleExpandChange //   dataResult={props.dataResult || []}\n          ,\n          dataResult: this.props.Login.masterData.SelectedRulesEngine && this.props.Login.masterData.SelectedRulesEngine && process(sortData(this.props.Login.masterData.SelectedRulesEngine['jsonuidata']['testInitiateTests'], \"descending\", \"npkAtestparametercode\") || [], this.state.dataStatetestinitiate ? this.state.dataStatetestinitiate : {\n            skip: 0,\n            take: 10\n          }) //dataState={{ skip: 0, take: 10 }}\n          // dataStateChange={props.dataStateChange}\n          ,\n          dataState: this.state.dataStatetestinitiate ? this.state.dataStatetestinitiate : {\n            skip: 0,\n            take: 10\n          } // dataStateChange={(event) => this.setState({ sectionDataState: event.dataState })}\n          ,\n          dataStateChange: this.dataStateChangetestinitiate,\n          extractedColumnList: [{\n            \"idsName\": \"IDS_TESTNAME\",\n            \"dataField\": \"stestparametersynonym\",\n            \"width\": \"200px\"\n          }],\n          controlMap: this.state.controlMap,\n          userRoleControlRights: this.state.userRoleControlRights,\n          pageable: true //    isActionRequired={true}\n          ,\n          scrollable: 'scrollable',\n          hideColumnFilter: false,\n          selectedId: 0 //hasDynamicColSize={true}\n          //testParameter={testParameter}\n          //deleteRecord={props.deletModalSite}\n          ,\n          deleteParam: {\n            operation: \"delete\"\n          } // actionIcons={[{\n          //     title: this.props.intl.formatMessage({ id: \"IDS_DELETE\" }),\n          //     controlname: \"faTrashAlt\",\n          //     hidden: false,\n          //     objectName: \"delete\",\n          //     onClick: props.deletModalSite\n          // }]}\n          ,\n          hasChild: true,\n          childMappingField: 'ntestparametercode',\n          childColumnList: [{\n            \"idsName\": \"IDS_FROMSITE\",\n            \"dataField\": \"sfromsitename\",\n            \"width\": \"200px\"\n          }, {\n            \"idsName\": \"IDS_TOSITE\",\n            \"dataField\": \"stositename\",\n            \"width\": \"200px\"\n          }],\n          childList: this.state.childListMap,\n          activeTabName: \"IDS_NEEDTESTINITIATE\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 2194,\n            columnNumber: 17\n          }\n        }));\n        tabMap.set(\"IDS_TESTCOMMENTS\", /*#__PURE__*/React.createElement(DataGrid, {\n          key: \"testsectionkey\",\n          primaryKeyField: \"nresultusedmaterialcode\" //expandField=\"expanded\"\n          ,\n          handleExpandChange: this.handleExpandChange //   dataResult={props.dataResult || []}\n          ,\n          dataResult: this.props.Login.masterData.SelectedRulesEngine && process(sortData(this.props.Login.masterData.SelectedRulesEngine['jsonuidata']['testCommentsTestsTab'], \"descending\", \"npkAtestparametercode\") || [], this.state.dataState ? this.state.dataState : {\n            skip: 0,\n            take: 10\n          }) //dataState={{ skip: 0, take: 10 }}\n          // dataStateChange={props.dataStateChange}\n          ,\n          dataState: this.state.dataState ? this.state.dataState : {\n            skip: 0,\n            take: 10\n          } // dataStateChange={(event) => this.setState({ sectionDataState: event.dataState })}\n          ,\n          dataStateChange: this.dataStateChange // extractedColumnList={[\n          //     { \"idsName\": \"IDS_TESTNAME\", \"dataField\": \"stestparametersynonym\", \"width\": \"200px\" }\n          // ]}\n          ,\n          controlMap: this.state.controlMap,\n          userRoleControlRights: this.state.userRoleControlRights,\n          pageable: true //     isActionRequired={true}\n          ,\n          scrollable: 'scrollable',\n          hideColumnFilter: false,\n          selectedId: 0 //hasDynamicColSize={true}\n          //testParameter={testParameter}\n          //deleteRecord={props.deletModalSite}\n          ,\n          deleteParam: {\n            operation: \"delete\"\n          } // actionIcons={[{\n          //     title: this.props.intl.formatMessage({ id: \"IDS_DELETE\" }),\n          //     controlname: \"faTrashAlt\",\n          //     hidden: false,\n          //     objectName: \"delete\",\n          //     onClick: props.deletModalSite\n          // }]}\n          //hasChild={true}\n          ,\n          childMappingField: 'ntestparametercode' // extractedColumnList={[\n          //     { \"idsName\": \"IDS_TESTNAME\", \"dataField\": \"stestparametersynonym\", \"width\": \"200px\" },\n          //     { \"idsName\": \"IDS_TESTCOMMENTS\", \"dataField\": \"spredefinedname\", \"width\": \"200px\" }\n          // ]} \n          ,\n          extractedColumnList: [{\n            \"idsName\": \"IDS_TESTNAME\",\n            \"dataField\": \"stestparametersynonym\",\n            \"width\": \"200px\"\n          }, {\n            \"idsName\": \"IDS_COMMENTTYPE\",\n            \"dataField\": \"scommenttype\",\n            \"width\": \"200px\"\n          }, {\n            \"idsName\": \"IDS_COMMENTSUBTYPE\",\n            \"dataField\": \"scommentsubtype\",\n            \"width\": \"200px\"\n          }, {\n            \"idsName\": \"IDS_PREFINEDCOMMENTS\",\n            \"dataField\": \"spredefinedname\",\n            \"width\": \"200px\"\n          }, {\n            \"idsName\": \"IDS_GENERALCOMMENTS\",\n            \"dataField\": \"sgeneralcomments\",\n            \"width\": \"200px\"\n          } // props.activeTabIndex == 2 ? { \"idsName\": \"IDS_PREFINEDCOMMENTS\", \"dataField\": \"spredefinedname\", \"width\": \"200px\" } :\n          //     { \"idsName\": \"IDS_REPORTCOMMENTS\", \"dataField\": \"spredefinedname\", \"width\": \"200px\" }\n          ],\n          childList: this.state.childListMap2 && this.state.childListMap2,\n          activeTabName: \"IDS_TESTCOMMENTS\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 2249,\n            columnNumber: 17\n          }\n        })); // tabMap.set(\"IDS_REPORTCOMMENTS\",\n        //     <DataGrid\n        //         key=\"testsectionkey\"\n        //         primaryKeyField=\"nresultusedmaterialcode\"\n        //         //expandField=\"expanded\"\n        //         handleExpandChange={this.handleExpandChange}\n        //         //   dataResult={props.dataResult || []}\n        //         dataResult={this.props.Login.masterData.SelectedRulesEngine['jsonuidata'] && process(\n        //             sortData(this.props.Login.masterData.SelectedRulesEngine['jsonuidata']['reportCommentsTestsTab'], \"descending\", \"npkBtestparametercode\")\n        //             || [],\n        //             this.state.dataState\n        //                 ? this.state.dataState : { skip: 0, take: 10 })}\n        //         //dataState={{ skip: 0, take: 10 }}\n        //         // dataStateChange={props.dataStateChange}\n        //         dataState={this.state.dataState\n        //             ? this.state.dataState : { skip: 0, take: 10 }}\n        //         // dataStateChange={(event) => this.setState({ sectionDataState: event.dataState })}\n        //         dataStateChange={this.dataStateChange}\n        //         // extractedColumnList={[\n        //         //     { \"idsName\": \"IDS_TESTNAME\", \"dataField\": \"stestparametersynonym\", \"width\": \"200px\" }\n        //         // ]}\n        //         controlMap={this.state.controlMap}\n        //         userRoleControlRights={this.state.userRoleControlRights}\n        //         pageable={true}\n        //         isActionRequired={true}\n        //         scrollable={'scrollable'}\n        //         hideColumnFilter={false}\n        //         selectedId={0}\n        //         //hasDynamicColSize={true}\n        //         //testParameter={testParameter}\n        //         //deleteRecord={props.deletModalSite}\n        //         deleteParam={{ operation: \"delete\" }}\n        //         // actionIcons={[{\n        //         //     title: this.props.intl.formatMessage({ id: \"IDS_DELETE\" }),\n        //         //     controlname: \"faTrashAlt\",\n        //         //     hidden: false,\n        //         //     objectName: \"delete\",\n        //         //     onClick: props.deletModalSite\n        //         // }]}\n        //         //  hasChild={true}\n        //         childMappingField={'ntestparametercode'}\n        //         extractedColumnList={[\n        //             { \"idsName\": \"IDS_TESTNAME\", \"dataField\": \"stestparametersynonym\", \"width\": \"200px\" },\n        //             { \"idsName\": \"IDS_REPORTCOMMENTS\", \"dataField\": \"spredefinedname\", \"width\": \"200px\" }\n        //         ]}\n        //         childList={this.state.childListMap3 && this.state.childListMap3}\n        //         activeTabName={\"IDS_REPORTCOMMENTS\"}\n        //     >\n        //     </DataGrid>\n        // );\n      }\n      return tabMap;\n    };\n\n    this.addGroup = () => {\n      const {\n        selectedRecord\n      } = this.state;\n      var sql1 = jsonSql.build({\n        table: 'testmaster',\n        alias: 'tm',\n        join: [{\n          type: 'inner',\n          table: 'testcategory',\n          alias: 'tc',\n          on: {\n            'tm.ntestcategorycode': 'tc.ntestcategorycode'\n          }\n        }, {\n          type: 'inner',\n          table: 'transactionstatus',\n          alias: 'ts',\n          on: {\n            'tm.naccredited': 'ts.ntranscode'\n          }\n        }]\n      });\n      console.log(sql1.query);\n      var sql21 = jsonSql.build({\n        table: 'testmaster',\n        alias: 'tm',\n        join: [{\n          type: 'inner',\n          table: 'testcategory',\n          alias: 'tc',\n          on: {\n            'tm.ntestcategorycode': 'tc.ntestcategorycode'\n          }\n        }, {\n          type: 'right outer',\n          table: 'transactionstatus',\n          alias: 'ts',\n          on: {\n            'tm.naccredited': 'ts.ntranscode'\n          }\n        }, {\n          type: 'left outer',\n          table: 'transactionstatus',\n          alias: 'ts',\n          on: [{\n            'tm.naccredited': 'ts.ntranscode'\n          }, {\n            'tc.naccredited': 'ts.ntranscode'\n          }]\n        }],\n        condition: [{\n          a: {\n            $gt: 1\n          }\n        }, {\n          b: {\n            $lt: 10\n          }\n        }],\n        group: ['a', 'b']\n      });\n      console.log(sql21.query); //  if (selectedRecord[\"sviewname\"]) {\n\n      let viewColumnListByRule = this.props.Login.viewColumnListByRule || [];\n      const addGroupList = this.props.Login.addGroupList || [];\n      const arrayLength = addGroupList.length;\n      addGroupList[arrayLength] = 1; // viewColumnListByRule[arrayLength] = [];\n      // viewColumnListByRule[arrayLength].push(this.props.Login.viewColumnList);\n\n      viewColumnListByRule = this.props.Login.databaseviewList;\n\n      if (arrayLength === 0) {\n        selectedRecord[\"groupList\"] = [];\n        selectedRecord[\"filtercolumns\"] = this.props.Login.selectFields;\n      }\n\n      if (selectedRecord[\"groupListJoins\"] === undefined) {\n        selectedRecord[\"groupListJoins\"] = [];\n      }\n\n      if (selectedRecord[\"groupListJoins\"][arrayLength - 1] === undefined) {\n        selectedRecord[\"groupListJoins\"][arrayLength - 1] = {};\n      }\n\n      selectedRecord[\"groupListJoins\"][arrayLength - 1][\"button_and\"] = true;\n      selectedRecord[\"groupList\"][arrayLength] = [];\n      selectedRecord[\"groupList\"][arrayLength][\"button_and\"] = true;\n      selectedRecord[\"groupList\"][arrayLength][0] = {};\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          addGroupList,\n          viewColumnListByRule,\n          selectedRecord\n        }\n      };\n      this.props.updateStore(updateInfo); // } else {\n      //     toast.info(this.props.intl.formatMessage({ id: \"IDS_SELECTVIEW\" }));\n      // }\n    };\n\n    this.getRulesEngineAdd = () => {\n      if (this.state.selectedcombo['nproductcatcode']) {\n        const sqlQuery = false;\n        this.setState({\n          selectedRecord: {}\n        });\n        this.props.getRulesEngineAdd(this.props.Login.userInfo, sqlQuery, {\n          addRuleList: [],\n          addGroupList: [],\n          addAggregateList: [],\n          addOrderbyList: []\n        }, this.props.Login.masterData);\n      } else {\n        toast.info(this.props.intl.formatMessage({\n          id: \"IDS_SELECTPRODUCTCATEGORY\"\n        }));\n      }\n    };\n\n    this.closePortalModal = () => {\n      let masterData = this.props.Login.masterData || {}; // let modalTestsaveddata = this.props.Login.modalTestsaveddata || [];\n      // let modalSitesaveddata = this.props.Login.modalSitesaveddata || [];\n      // let modalSiteObject = this.props.Login.modalSiteObject || {};\n      // let testInitiateTests = this.props.Login.testInitiateTests || [];\n      // let testCommentsTests = this.props.Login.testCommentsTests || [];\n      // let reportCommentsTests = this.props.Login.reportCommentsTests || [];\n      // let siteObject = this.props.Login.siteObject || {};\n      // let testCommentObject = this.props.Login.testCommentObject || {};\n      // let reportCommentObject = this.props.Login.reportCommentObject || {};\n\n      masterData['testParameter'] = {};\n      masterData['testParameterComments'] = {};\n      masterData['testParameterreportComments'] = {};\n      masterData['testComments'] = {};\n      masterData['reportComments'] = {};\n      masterData['testSite'] = {};\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: this.props.Login.operation !== 'update' ? {\n          activeTabIndex: 0,\n          openPortalModal: false,\n          selectedRecord: {},\n          addRuleList: [],\n          count: 0,\n          masterData,\n          testInitiateTests: [],\n          reportCommentsTests: [],\n          testCommentsTests: [],\n          siteObject: {},\n          testCommentObject: {},\n          reportCommentObject: {},\n          npkAtestparametercode: 0,\n          npkBtestparametercode: 0,\n          npkCtestparametercode: 0,\n          testInitiateSiteTab: [],\n          testCommentsTestsTab: [],\n          reportCommentsTestsTab: []\n        } : {\n          activeTabIndex: 0,\n          openPortalModal: false,\n          selectedRecord: {},\n          addRuleList: [],\n          count: 0,\n          masterData,\n          //  testInitiateTests: [], reportCommentsTests: [],\n          // testCommentsTests: [], siteObject: {}, testCommentObject: {}, reportCommentObject: {},\n          npkAtestparametercode: 0,\n          npkBtestparametercode: 0,\n          npkCtestparametercode: 0 // ,\n          // testInitiateSiteTab: [],\n          // testCommentsTestsTab: [],\n          // reportCommentsTestsTab: []\n\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.closeModal = () => {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          openModal: false,\n          selectedRecord: {}\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.changePropertyView = (index, event, status) => {\n      let id = false;\n      let activeTabIndex;\n      let activeTabId;\n      let masterData = this.props.Login.masterData || {};\n      let activeTestTab = this.props.Login.activeTestTab || \"\";\n\n      if (window.innerWidth > 992 && event && this.state.enableAutoClick || !event) {\n        activeTabIndex = this.state.activeTabIndex !== index ? index : id ? index : false;\n      }\n\n      if (window.innerWidth > 992 && event && this.state.enableAutoClick || !event) {\n        if (index === 1) {\n          activeTestTab = 'IDS_NEEDTESTINITIATE';\n          masterData['selectedParameter'] = this.props.Login.testInitiateTests && this.props.Login.testInitiateTests[0];\n        }\n\n        if (index === 2) {\n          activeTestTab = 'IDS_TESTCOMMENTS';\n          masterData['selectedParameter'] = this.props.Login.testCommentsTests && this.props.Login.testCommentsTests[0];\n        }\n\n        if (index === 3) {\n          activeTestTab = 'IDS_REPORTCOMMENTS';\n          masterData['selectedParameter'] = this.props.Login.reportCommentsTests && this.props.Login.reportCommentsTests[0];\n        }\n\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            activeTabIndex: index === 0 ? 0 : this.state.activeTabIndex !== index ? index : id ? index : false,\n            activeTabId: id,\n            activeTestTab,\n            masterData\n          }\n        };\n        this.props.updateStore(updateInfo);\n      }\n    };\n\n    this.deleteRule = (groupIndex, index) => {\n      let addGroupList = this.props.Login.addGroupList || [];\n      const selectedRecord = this.state.selectedRecord;\n      addGroupList[groupIndex] = addGroupList[groupIndex] - 1;\n\n      if (addGroupList[groupIndex] === 0) {\n        addGroupList.splice(groupIndex, 1);\n        selectedRecord[\"groupList\"].splice(groupIndex, 1);\n\n        if (selectedRecord[\"groupListJoins\"]) {\n          selectedRecord[\"groupListJoins\"].splice(groupIndex - 1, 1);\n        }\n      } else {\n        selectedRecord[\"groupList\"][groupIndex].splice(index, 1);\n      }\n\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          addGroupList,\n          selectedRecord\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.deleteOutcome = index => {\n      let addOutcomeList = this.props.Login.addOutcomeList;\n      addOutcomeList.splice(index, 1);\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          addOutcomeList\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.clearRule = () => {\n      const sviewname = this.state.selectedRecord.sviewname || \"\";\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          addRuleList: [],\n          selectedRecord: {\n            sviewname\n          },\n          sqlQuery: false\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.resetRule = () => {\n      let masterData = this.props.Login.masterData || {};\n      let selectedRecord = this.state.selectedRecord || {};\n      masterData['testParameter'] = {};\n      masterData['testParameterComments'] = {};\n      masterData['testParameterreportComments'] = {};\n      masterData['testComments'] = {};\n      masterData['reportComments'] = {};\n      masterData['testSite'] = {};\n\n      if (selectedRecord[\"groupList\"]) {\n        selectedRecord[\"groupList\"] = [];\n      }\n\n      if (selectedRecord[\"groupListJoins\"]) {\n        selectedRecord[\"groupListJoins\"] = [];\n      }\n\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          addRuleList: [],\n          addGroupList: [],\n          addAggregateList: [],\n          addOrderbyList: [],\n          testInitiateTests: [],\n          reportCommentsTests: [],\n          testCommentsTests: [],\n          siteObject: {},\n          testCommentObject: {},\n          reportCommentObject: {},\n          selectedRecord\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onSymbolChange = (comboData, fieldName, groupIndex, index) => {\n      const {\n        selectedRecord\n      } = this.state;\n      const oldSelectedRecord = selectedRecord[\"groupList\"][groupIndex][index][fieldName] || {};\n      selectedRecord[\"groupList\"][groupIndex][index][fieldName] = comboData;\n      this.setState({\n        selectedRecord,\n        groupIndex,\n        index\n      });\n    };\n\n    this.onInputChange = (event, type, groupIndex, index) => {\n      const selectedRecord = this.state.selectedRecord || {};\n      let needoutsource = this.state.needoutsource || {};\n\n      if (event.target.type === 'checkbox') {\n        if (event.target.name === 'needoutsource' && event.target.checked === true) {\n          needoutsource = true;\n        } else {\n          needoutsource = false;\n          delete selectedRecord['nfromsitecode'];\n          delete selectedRecord['ntositecode'];\n        }\n\n        selectedRecord[event.target.name] = event.target.checked === true ? 3 : 4;\n      } else {\n        selectedRecord[event.target.name] = event.target.value;\n      }\n\n      this.setState({\n        selectedRecord,\n        needoutsource\n      });\n    };\n\n    this.viewColumnListByRule = list => {\n      let activeTabIndex = this.props.Login.activeTabIndex;\n      let selectedRecord = this.props.Login.selectedRecord && this.props.Login.selectedRecord;\n      let dynamicList = activeTabIndex === 1 ? this.props.Login.testInitiateTests : activeTabIndex === 2 ? this.props.Login.testCommentsTests : this.props.Login.reportCommentsTests;\n      list = list.filter(({\n        value\n      }) => !dynamicList.some(x => x.ntestparametercode == value));\n      return list;\n    };\n\n    this.onConditionClick = (fieldName, index, isgroup) => {\n      let {\n        selectedRecord\n      } = this.state;\n      selectedRecord[\"groupListJoins\"] = selectedRecord[\"groupListJoins\"] || [];\n\n      if (index !== undefined && isgroup === false) {\n        if (fieldName === `button_and`) {\n          selectedRecord[\"groupList\"][index][fieldName] = selectedRecord[\"groupList\"][index][fieldName] === true ? true : true;\n          selectedRecord[\"groupList\"][index][`button_or`] = false;\n        } else if (fieldName === `button_or`) {\n          selectedRecord[\"groupList\"][index][fieldName] = selectedRecord[\"groupList\"][index][fieldName] === true ? true : true;\n          selectedRecord[\"groupList\"][index][`button_and`] = false;\n        } else if (fieldName === `button_not`) {\n          selectedRecord[\"groupList\"][index][fieldName] = selectedRecord[\"groupList\"][index][fieldName] === true ? false : true;\n        } else {}\n\n        this.setState({\n          selectedRecord\n        });\n      } else {\n        if (fieldName === `button_and`) {\n          if (selectedRecord[\"groupListJoins\"][index] === undefined) {\n            selectedRecord[\"groupListJoins\"][index] = {};\n          }\n\n          selectedRecord[\"groupListJoins\"][index][fieldName] = selectedRecord[\"groupListJoins\"][index][fieldName] === true ? true : true;\n          selectedRecord[\"groupListJoins\"][index][`button_or`] = false;\n        }\n\n        if (fieldName === `button_or`) {\n          if (selectedRecord[\"groupListJoins\"][index] === undefined) {\n            selectedRecord[\"groupListJoins\"][index] = {};\n          }\n\n          selectedRecord[\"groupListJoins\"][index][fieldName] = selectedRecord[\"groupListJoins\"][index][fieldName] === true ? true : true;\n          selectedRecord[\"groupListJoins\"][index][`button_and`] = false;\n        }\n\n        if (fieldName === `button_not`) {\n          if (selectedRecord[\"groupListJoins\"][index] === undefined) {\n            selectedRecord[\"groupListJoins\"][index] = {};\n          }\n\n          selectedRecord[\"groupListJoins\"][index][fieldName] = selectedRecord[\"groupListJoins\"][index][fieldName] === true ? false : true;\n        }\n\n        this.setState({\n          selectedRecord\n        });\n      }\n    };\n\n    const dataState = {\n      skip: 0,\n      take: _props.settings ? parseInt(_props.settings[14]) : 5\n    };\n    const dataStateMain = {\n      skip: 0,\n      take: _props.settings ? parseInt(_props.settings[14]) : 5\n    };\n    const dataStateUserQuery = {\n      skip: 0,\n      take: 10\n    };\n    this.state = {\n      selectedRecord: {},\n      error: \"\",\n      sectionDataState: {\n        skip: 0,\n        take: 10\n      },\n      // modalIsOpen: false,\n      parameters: [],\n      // objparam: [],\n      // objDparam: [],\n      queryName: '',\n      // queryResult: [],\n      userRoleControlRights: [],\n      splitChangeWidthPercentage: 28.6,\n      controlMap: new Map(),\n      dataStateUserQuery: dataStateUserQuery,\n      queryTypeName: '',\n      selectedcombo: [],\n      selectedTableType: [],\n      moduleFormName: [],\n      ntableTypeCode: -1,\n      nFormCode: -1,\n      tableType: [],\n      chartList: [],\n      skip: 0,\n      take: this.props.Login.settings ? this.props.Login.settings[3] : 25,\n      //tableName : undefined,tableList:[]\n      outputColumns: [],\n      selectedTableList: [],\n      tableColumnList: [],\n      foreignTableColumnList: [],\n      joinTableList: [],\n      symbolsList: [],\n      foreignTableList: [],\n      count: 0,\n      foreignTableCount: [],\n      selectedforeignTableList: [],\n      filterColumnList: [],\n      sqlQuery: false,\n      // viewColumnList: [],\n      switchRecord: {},\n      dataState: dataState,\n      dataStateMain: dataStateMain,\n      data: [],\n      dataMainList: [],\n      dataResult: [],\n      dataResultMain: [],\n      enablePropertyPopup: false,\n      enableAutoClick: false,\n      needoutsource: false,\n      queryType: [{\n        squerytypename: this.props.intl.formatMessage({\n          id: \"IDS_VIEWS\"\n        }),\n        nquerytypecode: 1\n      }, {\n        squerytypename: this.props.intl.formatMessage({\n          id: \"IDS_SQL\"\n        }),\n        nquerytypecode: 2\n      }],\n      //  queryTypeOptions: [{ label: this.props.intl.formatMessage({ id: \"IDS_VIEWS\" }), views: 1 }, { label: this.props.intl.formatMessage({ id: \"IDS_SQL\" }), value: 2 }]\n      queryTypeOptions: []\n    };\n    this.searchRef = React.createRef();\n    this.confirmMessage = new ConfirmMessage(); // this.dropItemRef = React.createRef(); \n\n    this.queryFieldList = ['nquerytypecode', 'ssqlqueryname', 'ssqlquery', 'sscreenrecordquery', 'sscreenheader', 'svaluemember', 'sdisplaymember', 'ncharttypecode']; // this.queryList = [];\n\n    this.searchFieldList = [\"ssqlqueryname\", \"ssqlquery\", \"sscreenheader\", \"svaluemember\", \"sdisplaymember\", \"squerytypename\", \"schartname\"];\n  }\n\n  handleClickDelete(masterData, ncontrolcode //, modalName\n  ) {\n    const fieldArray = [];\n    const inputParam = {\n      methodUrl: \"RulesEngine\",\n      classUrl: \"rulesengine\",\n      inputData: {\n        \"ntransactionrulesenginecode\": this.props.Login.masterData.SelectedRulesEngine.ntransactionrulesenginecode,\n        \"nproductcatcode\": this.props.Login.masterData.SelectedProductCategory.nproductcatcode,\n        \"userinfo\": this.props.Login.userInfo\n      },\n      operation: \"delete\",\n      //postParam,\n      displayName: \"RulesEngine\"\n    };\n\n    if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, ncontrolcode)) {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          loadEsign: true,\n          screenData: {\n            inputParam,\n            masterData\n          },\n          // [modalName]: true,\n          operation: 'delete',\n          screenName: \"RulesEngine\",\n          id: \"RulesEngine\"\n        }\n      };\n      this.props.updateStore(updateInfo);\n    } else {\n      this.props.crudMaster(inputParam, masterData, undefined);\n    }\n  }\n\n  approveVersion(masterData, nflag, ncontrolcode //, modalName\n  ) {\n    const fieldArray = [];\n    const inputParam = {\n      methodUrl: \"RulesEngine\",\n      classUrl: \"rulesengine\",\n      inputData: {\n        \"ntransactionrulesenginecode\": this.props.Login.masterData.SelectedRulesEngine.ntransactionrulesenginecode,\n        \"nproductcatcode\": this.props.Login.masterData.SelectedProductCategory.nproductcatcode,\n        \"userinfo\": this.props.Login.userInfo,\n        nflag: nflag\n      },\n      operation: \"approve\",\n      //postParam,\n      displayName: \"RulesEngine\"\n    };\n\n    if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, ncontrolcode)) {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          loadEsign: true,\n          screenData: {\n            inputParam,\n            masterData\n          },\n          // [modalName]: true,\n          operation: 'delete',\n          screenName: \"RulesEngine\",\n          id: \"RulesEngine\"\n        }\n      };\n      this.props.updateStore(updateInfo);\n    } else {\n      this.props.crudMaster(inputParam, masterData, undefined);\n    }\n  }\n\n  createRulesView(items, groupIndex, selectedRecordview) {\n    let design = [];\n    [...Array(items)].map((data, index) => {\n      let stringOperators = stringOperatorData;\n      design.push( /*#__PURE__*/React.createElement(React.Fragment, null, index > 0 ? selectedRecordview[\"groupList\"][groupIndex]['button_or'] === true ? /*#__PURE__*/React.createElement(ContionalButton, {\n        type: \"button\",\n        className: \"builder-btn-primary\",\n        marginLeft: 0,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 233,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 235,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(FormattedMessage, {\n        id: \"IDS_OR\",\n        defaultMessage: \"Or\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 235,\n          columnNumber: 35\n        }\n      }))) : selectedRecordview[\"groupList\"][groupIndex]['button_and'] === true ? /*#__PURE__*/React.createElement(ContionalButton, {\n        type: \"button\",\n        className: \"builder-btn-primary\",\n        marginLeft: 0,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 238,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 240,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(FormattedMessage, {\n        id: \"IDS_AND\",\n        defaultMessage: \"And\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 240,\n          columnNumber: 39\n        }\n      }))) : \"\" : \"\", /*#__PURE__*/React.createElement(Row, {\n        className: \"mt-3\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 242,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(Col, {\n        md: 3,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 243,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(FormInput, {\n        formGroupClassName: \"remove-floating-label-margin\",\n        name: `stestname`,\n        type: \"text\",\n        value: selectedRecordview[\"groupList\"][groupIndex][index] && selectedRecordview[\"groupList\"][groupIndex][index][\"stestname\"].label,\n        disabled: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 257,\n          columnNumber: 29\n        }\n      })), selectedRecordview[\"groupList\"][groupIndex][index][\"stestname\"] && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Col, {\n        md: 1,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 270,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(FormInput, {\n        formGroupClassName: \"remove-floating-label-margin\",\n        name: `sinputname`,\n        type: \"text\",\n        value: this.props.intl.formatMessage({\n          id: \"IDS_WITH\"\n        }),\n        disabled: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 271,\n          columnNumber: 37\n        }\n      })), /*#__PURE__*/React.createElement(Col, {\n        md: 2,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 279,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(FormInput, {\n        formGroupClassName: \"remove-floating-label-margin\",\n        name: `orderresulttype`,\n        type: \"text\",\n        value: selectedRecordview[\"groupList\"][groupIndex][index][\"orderresulttype\"] && selectedRecordview[\"groupList\"][groupIndex][index][\"orderresulttype\"].label,\n        disabled: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 295,\n          columnNumber: 37\n        }\n      })), /*#__PURE__*/React.createElement(Col, {\n        md: 2,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 303,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(FormInput, {\n        formGroupClassName: \"remove-floating-label-margin\",\n        name: `ssymbolname`,\n        type: \"text\",\n        value: selectedRecordview[\"groupList\"][groupIndex][index][\"ssymbolname\"] && selectedRecordview[\"groupList\"][groupIndex][index][\"ssymbolname\"].label || \"\",\n        disabled: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 319,\n          columnNumber: 37\n        }\n      })), /*#__PURE__*/React.createElement(Col, {\n        md: 3,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 328,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(FormInput, {\n        formGroupClassName: \"remove-floating-label-margin\",\n        name: `${selectedRecordview[\"groupList\"][groupIndex][index][\"stestname\"].items && selectedRecordview[\"groupList\"][groupIndex][index][\"stestname\"].items.valuemember}`,\n        type: \"text\",\n        value: selectedRecordview[\"groupList\"][groupIndex][index] && selectedRecordview[\"groupList\"][groupIndex][index][selectedRecordview[\"groupList\"][groupIndex][index][\"orderresulttype\"] && selectedRecordview[\"groupList\"][groupIndex][index][\"orderresulttype\"].value == 1 ? 'ndiagnosticcasecode' : 'ngradecode'].label || \"\",\n        disabled: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 345,\n          columnNumber: 37\n        }\n      }))))));\n    });\n    return design;\n  }\n\n  generateRandomColor() {\n    var letters = '0123456789ABCDEF';\n    var color = '#';\n\n    for (var i = 0; i < 6; i++) {\n      color += letters[Math.floor(Math.random() * 16)];\n    }\n\n    return color;\n  }\n\n  ruleflowobject() {\n    let object = {};\n    const labelColor = ['#e63109', '#2fb47d', '#eaa203', '#6554c0'];\n    const labelBGColor = ['#fcd7cd', '#e5f8f1', '#fcf3dd', '#e7e6f5'];\n    const borderColor = ['#e6310', '#c6f6e4', '#fde2a4', '#cbc5f7'];\n    let groupList = this.props.Login.masterData.SelectedRulesEngine['jsondata'];\n    let groupListJoins = this.props.Login.masterData.SelectedRulesEngine['jsonuidata'] && this.props.Login.masterData.SelectedRulesEngine['jsonuidata']['groupListJoins'];\n    let children = [];\n    let parent = [];\n    let grandparent = []; // groupList.map((groupobject, index) => {\n    //     if (groupobject.hasOwnProperty('button_or')) {\n    //         children = []\n    //         let rulesList = groupobject['button_or']\n    //         rulesList.map((rule, index) => {\n    //             children.push({ id: index, label: rule['stestname'].label })\n    //         })\n    //         parent.push({ id: index, label: 'button_or', children: children })\n    //     }\n    //     if (groupobject.hasOwnProperty('button_and')) {\n    //         children = []\n    //         let rulesList = groupobject['button_and']\n    //         rulesList.map((rule, index) => {\n    //             children.push({ id: index, label: rule['stestname'].label })\n    //         })\n    //         parent.push({ id: index, label: 'button_and', children: children })\n    //     }\n    // })\n\n    groupList.map((groupobject, index) => {\n      if (groupobject.hasOwnProperty('button_or')) {\n        children = [];\n        let rulesList = groupobject['button_or'];\n        rulesList.map((rule, index) => {\n          children.push( //     {\n          //     id: index, label: rule['stestname'].label, children: [\n          //         {\n          //             id: 0, label: this.props.intl.formatMessage({ id: \"IDS_WITH\" }), children: [\n          //                 {\n          //                     id: 0, label: rule['orderresulttype'].label, children: [\n          //                         {\n          //                             id: 0, label: rule['ssymbolname'].label, children: [\n          //                                 {\n          //                                     id: 0, label: rule['ndiagnosticcasecode'] ? rule['ndiagnosticcasecode'].label :\n          //                                         rule['ngradecode'].label, children: []\n          //                                 }\n          //                             ]\n          //                         }\n          //                     ]\n          //                 }\n          //             ]\n          //         }\n          //     ]\n          // }\n          {\n            id: index,\n            label: /*#__PURE__*/React.createElement(React.Fragment, null, rule['stestname'].label + \" -> \" + this.props.intl.formatMessage({\n              id: \"IDS_WITH\"\n            }) + \" -> \" + rule['orderresulttype'].label + \" -> \" + rule['ssymbolname'].label + \" -> \" + (rule['orderresulttype'].value === 1 ? rule['ndiagnosticcasecode'].label : rule['ngradecode'].label))\n          });\n        });\n        parent.push({\n          id: index,\n          label: /*#__PURE__*/React.createElement(\"div\", {\n            className: \"btn btn-primary\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 439,\n              columnNumber: 49\n            }\n          }, this.props.intl.formatMessage({\n            id: \"IDS_OR\"\n          })),\n          children: children\n        });\n      }\n\n      if (groupobject.hasOwnProperty('button_and')) {\n        children = [];\n        let rulesList = groupobject['button_and'];\n        rulesList.map((rule, index) => {\n          children.push( // {\n          //     id: index, label: rule['stestname'].label, children: [\n          //         {\n          //             id: 0, label: this.props.intl.formatMessage({ id: \"IDS_WITH\" }), children: [\n          //                 {\n          //                     id: 0, label: rule['orderresulttype'].label, children: [\n          //                         {\n          //                             id: 0, label: rule['ssymbolname'].label, children: [\n          //                                 {\n          //                                     id: 0, label: rule['ndiagnosticcasecode'] ? rule['ndiagnosticcasecode'].label :\n          //                                         rule['ngradecode'].label, children: []\n          //                                 }\n          //                             ]\n          //                         }\n          //                     ]\n          //                 }\n          //             ]\n          //         }\n          //     ]\n          // }\n          {\n            id: index,\n            label: /*#__PURE__*/React.createElement(React.Fragment, null, rule['stestname'].label + \" -> \" + this.props.intl.formatMessage({\n              id: \"IDS_WITH\"\n            }) + \" -> \" + rule['orderresulttype'].label + \" -> \" + rule['ssymbolname'].label + \" -> \" + (rule['orderresulttype'].value === 1 ? rule['ndiagnosticcasecode'].label : rule['ngradecode'].label))\n          });\n        });\n        parent.push({\n          id: index,\n          label: /*#__PURE__*/React.createElement(\"div\", {\n            className: \"btn btn-primary\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 481,\n              columnNumber: 49\n            }\n          }, this.props.intl.formatMessage({\n            id: \"IDS_AND\"\n          })),\n          children: children\n        });\n      }\n\n      if (groupobject.hasOwnProperty('button_not_button_and')) {\n        children = [];\n        let rulesList = groupobject['button_not_button_and'];\n        rulesList.map((rule, index) => {\n          children.push({\n            id: index,\n            label: /*#__PURE__*/React.createElement(React.Fragment, null, rule['stestname'].label + \" -> \" + this.props.intl.formatMessage({\n              id: \"IDS_WITH\"\n            }) + \" -> \" + rule['orderresulttype'].label + \" -> \" + rule['ssymbolname'].label + \" -> \" + (rule['orderresulttype'].value === 1 ? rule['ndiagnosticcasecode'].label : rule['ngradecode'].label))\n          });\n        });\n        let notarray = [{\n          id: index,\n          label: /*#__PURE__*/React.createElement(\"div\", {\n            className: \"btn btn-primary\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 498,\n              columnNumber: 53\n            }\n          }, this.props.intl.formatMessage({\n            id: \"IDS_AND\"\n          })),\n          children: children\n        }];\n        parent.push({\n          id: index,\n          label: /*#__PURE__*/React.createElement(\"div\", {\n            className: \"btn btn-primary\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 499,\n              columnNumber: 49\n            }\n          }, this.props.intl.formatMessage({\n            id: \"IDS_NOT\"\n          })),\n          children: notarray\n        });\n      }\n\n      if (groupobject.hasOwnProperty('button_not_button_or')) {\n        children = [];\n        let rulesList = groupobject['button_not_button_or'];\n        rulesList.map((rule, index) => {\n          children.push({\n            id: index,\n            label: /*#__PURE__*/React.createElement(React.Fragment, null, rule['stestname'].label + \" -> \" + this.props.intl.formatMessage({\n              id: \"IDS_WITH\"\n            }) + \" -> \" + rule['orderresulttype'].label + \" -> \" + rule['ssymbolname'].label + \" -> \" + (rule['orderresulttype'].value === 1 ? rule['ndiagnosticcasecode'].label : rule['ngradecode'].label))\n          });\n        });\n        let notarray = [{\n          id: index,\n          label: /*#__PURE__*/React.createElement(\"div\", {\n            className: \"btn btn-primary\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 516,\n              columnNumber: 53\n            }\n          }, this.props.intl.formatMessage({\n            id: \"IDS_OR\"\n          })),\n          children: children\n        }];\n        parent.push({\n          id: index,\n          label: /*#__PURE__*/React.createElement(\"div\", {\n            className: \"btn btn-primary\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 517,\n              columnNumber: 49\n            }\n          }, this.props.intl.formatMessage({\n            id: \"IDS_NOT\"\n          })),\n          children: notarray\n        });\n      } // if (groupListJoins.length > 0) {\n      //     if (groupListJoins[index]) {\n      //         if (groupListJoins[index].hasOwnProperty('button_or') &&\n      //             groupListJoins[index]['button_or'] === true) {\n      //             grandparent.push({ id: index, label: 'button_or', children: parent })\n      //         }\n      //         if (groupListJoins[index].hasOwnProperty('button_and') &&\n      //             groupListJoins[index]['button_and'] === true) {\n      //             grandparent.push({ id: index, label: 'button_and', children: parent })\n      //         }\n      //     }\n      // }\n\n    });\n\n    if (groupListJoins !== undefined) {\n      // groupListJoins.map((join, index) => {\n      //     if (index > 0) {\n      //         if (parent[index].hasOwnProperty('children')) {\n      //             return parent[index]['children'].map(rule => {\n      //                 return rule['label'] = <div //className=\"rulesengine-btn-primary\"\n      //                     //style={{ color: \"#fff\", background: this.generateRandomColor(),borderRadius: '0.25rem' }} \n      //                     >{rule['label']}</div>;\n      //             })\n      //         }\n      //     }\n      // })\n      groupListJoins.map((join, index) => {\n        let parentjoins = [];\n\n        if (join.hasOwnProperty('button_or') && join['button_or'] === true) {\n          let notarray = [];\n          parentjoins.push(parent[index]);\n          parentjoins.push(parent[index + 1]);\n\n          if (join.hasOwnProperty('button_not') && join['button_not'] === true) {\n            notarray = [{\n              id: index,\n              label: /*#__PURE__*/React.createElement(\"div\", {\n                className: \"btn btn-primary\",\n                __self: this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 553,\n                  columnNumber: 47\n                }\n              }, this.props.intl.formatMessage({\n                id: \"IDS_OR\"\n              }), \" \") // 'button_or'\n              ,\n              children: parentjoins\n            }];\n            grandparent.push({\n              id: index,\n              label: /*#__PURE__*/React.createElement(\"div\", {\n                className: \"btn btn-primary\",\n                __self: this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 558,\n                  columnNumber: 47\n                }\n              }, this.props.intl.formatMessage({\n                id: \"IDS_NOT\"\n              }), \" \") // 'button_or'\n              ,\n              children: notarray\n            });\n          } else {\n            grandparent.push({\n              id: index,\n              label: /*#__PURE__*/React.createElement(\"div\", {\n                className: \"btn btn-primary\",\n                __self: this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 565,\n                  columnNumber: 47\n                }\n              }, this.props.intl.formatMessage({\n                id: \"IDS_OR\"\n              }), \" \") // 'button_or'\n              ,\n              children: parentjoins\n            });\n          }\n        }\n\n        if (join.hasOwnProperty('button_and') && join['button_and'] === true) {\n          let notarray = [];\n          parentjoins.push(parent[index]);\n          parentjoins.push(parent[index + 1]);\n\n          if (join.hasOwnProperty('button_not') && join['button_not'] === true) {\n            notarray = [{\n              id: index,\n              label: /*#__PURE__*/React.createElement(\"div\", {\n                className: \"btn btn-primary\",\n                __self: this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 577,\n                  columnNumber: 47\n                }\n              }, this.props.intl.formatMessage({\n                id: \"IDS_AND\"\n              }), \" \") // 'button_or'\n              ,\n              children: parentjoins\n            }];\n            grandparent.push({\n              id: index,\n              label: /*#__PURE__*/React.createElement(\"div\", {\n                className: \"btn btn-primary\",\n                __self: this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 582,\n                  columnNumber: 47\n                }\n              }, this.props.intl.formatMessage({\n                id: \"IDS_NOT\"\n              }), \" \") // 'button_or'\n              ,\n              children: notarray\n            });\n          } else {\n            grandparent.push({\n              id: index,\n              label: /*#__PURE__*/React.createElement(\"div\", {\n                className: \"btn btn-primary\",\n                __self: this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 589,\n                  columnNumber: 47\n                }\n              }, this.props.intl.formatMessage({\n                id: \"IDS_AND\"\n              })) // 'button_and'\n              ,\n              children: parentjoins\n            });\n          }\n        }\n      });\n    } // groupListJoins.map((join, index) => {\n    //     if (join.hasOwnProperty('button_or') && join['button_or'] === true) {\n    //         parent = []\n    //         groupList.map((groupobject, index) => {\n    //             if (groupobject.hasOwnProperty('button_or')) {\n    //                 children = []\n    //                 let rulesList = groupobject['button_or']\n    //                 rulesList.map((rule, index) => {\n    //                     children.push({ id: index, label: rule['stestname'].label })\n    //                 })\n    //                 return parent.push({ id: index, label: 'button_or', children: children })\n    //             }\n    //         })\n    //         grandparent.push({ id: index, label: 'button_or', children: parent })\n    //     }\n    //     if (join.hasOwnProperty('button_and') && join['button_and'] === true) {\n    //         parent = []\n    //         groupList.map((groupobject, index) => {\n    //             if (groupobject.hasOwnProperty('button_and')) {\n    //                 children = []\n    //                 let rulesList = groupobject['button_and']\n    //                 rulesList.map((rule, index) => {\n    //                     children.push({ id: index, label: rule['stestname'].label })\n    //                 })\n    //                 return parent.push({ id: index, label: 'button_and', children: children })\n    //             }\n    //         })\n    //         grandparent.push({ id: index, label: 'button_and', children: parent })\n    //     }\n    // })\n\n\n    object = grandparent.length > 0 ? {\n      id: 0,\n      label: /*#__PURE__*/React.createElement(\"div\", {\n        className: \"btn btn-primary\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 633,\n          columnNumber: 24\n        }\n      }, this.props.Login.masterData.SelectedRulesEngine.srulename, \" \"),\n      children: grandparent\n    } : {\n      id: 0,\n      label: /*#__PURE__*/React.createElement(\"div\", {\n        className: \"btn btn-primary\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 638,\n          columnNumber: 24\n        }\n      }, this.props.Login.masterData.SelectedRulesEngine.srulename, \" \"),\n      children: parent\n    };\n    return object;\n  } // ruleflowobject() {\n  //     let object = {}\n  //     let groupList = this.props.Login.masterData.SelectedRulesEngine['jsondata']\n  //     let groupListJoins = this.props.Login.masterData.SelectedRulesEngine['jsonuidata'] &&\n  //         this.props.Login.masterData.SelectedRulesEngine['jsonuidata']['groupListJoins']\n  //     let child = []\n  //     let children = []\n  //     // let parentor = []\n  //     // let parentand = []\n  //     let parent = []\n  //     groupList.map((ruleslist, index) => {\n  //         if (ruleslist.hasOwnProperty('button_or')) {\n  //             children = []\n  //             let rules = ruleslist['button_or']\n  //             // if (groupListJoins.length > 0) {\n  //             //     rules.map((rule, index) => {\n  //             //         children.push({ id: index + 1, label: rule['stestname'].label })\n  //             //     })\n  //             // }\n  //             // else {\n  //             rules.map((rule, index) => {\n  //                 children.push({ id: index + 1, label: rule['stestname'].label })\n  //             })\n  //             parent.push({ id: index + 1, label: 'button_or', children: children })\n  //             //  }\n  //         }\n  //         if (ruleslist.hasOwnProperty('button_and')) {\n  //             children = []\n  //             let rules = ruleslist['button_and']\n  //             // if (groupListJoins.length > 0) {\n  //             //     rules.map((rule, index) => {\n  //             //         children.push({ id: index + 1, label: rule['stestname'].label })\n  //             //     })\n  //             // }\n  //             // else {\n  //             rules.map((rule, index) => {\n  //                 children.push({ id: index + 1, label: rule['stestname'].label })\n  //             })\n  //             parent.push({ id: index + 1, label: 'button_and', children: children })\n  //             //  }\n  //         }\n  //     })\n  //     groupListJoins.map((join, index) => {\n  //         if (join.hasOwnProperty('button_or') && join['button_or'] === true) {\n  //             child.push({ id: index + 1, label: 'button_or', children: parent })\n  //         }\n  //         if (join.hasOwnProperty('button_and') && join['button_and'] === true) {\n  //             child.push({ id: index + 1, label: 'button_and', children: parent })\n  //         }\n  //     })\n  //     object =  child.length > 0 ?\n  //      {\n  //         id: 0,\n  //         label: 'root',\n  //         children: child\n  //     } \n  //     : {\n  //         id: 0,\n  //         label: 'root',\n  //         children: parent\n  //     }\n  //     // object = {\n  //     //     id: 0,\n  //     //     label: 'button_or',\n  //     //     children: [{\n  //     //         id: 1,\n  //     //         label: 'Complete Blood Count(Complete Blood Count)'\n  //     //     }, {\n  //     //         id: 2,\n  //     //         label: 'H-A1C-Pre(kk-2)'\n  //     //     }]\n  //     // }\n  //     console.log('view object:',JSON.stringify(object))\n  //     return object\n  // }\n\n\n  createGroupRulesview() {\n    let indexCount = 0;\n    let design = [];\n    let groupList = this.props.Login.masterData.SelectedRulesEngine['jsondata'].hasOwnProperty('button_and') ? this.props.Login.masterData.SelectedRulesEngine['jsondata']['button_and'] : this.props.Login.masterData.SelectedRulesEngine['jsondata']['button_or'];\n    let selectedRecordview = {};\n    let selectedRecordviewflag = {};\n    selectedRecordview[\"groupList\"] = [];\n    groupList.map((ruleslist, index) => {\n      if (ruleslist.hasOwnProperty('button_or')) {\n        selectedRecordview[\"groupList\"][index] = ruleslist[\"button_or\"];\n        selectedRecordview[\"groupList\"][index][\"button_or\"] = true;\n      }\n\n      if (ruleslist.hasOwnProperty('button_and')) {\n        selectedRecordview[\"groupList\"][index] = ruleslist[\"button_and\"];\n        selectedRecordview[\"groupList\"][index][\"button_and\"] = true;\n      }\n    });\n\n    if (this.props.Login.masterData.SelectedRulesEngine['jsondata'].hasOwnProperty('button_and')) {\n      selectedRecordviewflag[\"groupList\"] = {};\n      selectedRecordviewflag[\"groupList\"][\"button_and\"] = true;\n    } else {\n      selectedRecordviewflag[\"groupList\"] = {};\n      selectedRecordviewflag[\"groupList\"][\"button_or\"] = true;\n    }\n\n    console.log('props.addGroupList->', this.props.Login.masterData.SelectedRulesEngine['jsonuidata'].addGroupList);\n    this.props.Login.masterData.SelectedRulesEngine['jsonuidata'].addGroupList.length > 0 && this.props.Login.masterData.SelectedRulesEngine['jsonuidata'].addGroupList.map((items, index) => {\n      if (items > -1) {\n        indexCount = indexCount + 1;\n      }\n\n      ;\n      design.push( /*#__PURE__*/React.createElement(React.Fragment, null, items > -1 ? /*#__PURE__*/React.createElement(React.Fragment, null, \"  \", index > 0 ? selectedRecordviewflag[\"groupList\"]['button_or'] === true ? /*#__PURE__*/React.createElement(ContionalButton, {\n        type: \"button\",\n        className: \"builder-btn-primary\",\n        marginLeft: 0,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 757,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 759,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(FormattedMessage, {\n        id: \"IDS_OR\",\n        defaultMessage: \"Or\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 759,\n          columnNumber: 39\n        }\n      }))) : selectedRecordviewflag[\"groupList\"]['button_and'] === true ? /*#__PURE__*/React.createElement(ContionalButton, {\n        type: \"button\",\n        className: \"builder-btn-primary\",\n        marginLeft: 0,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 762,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 764,\n          columnNumber: 37\n        }\n      }, /*#__PURE__*/React.createElement(FormattedMessage, {\n        id: \"IDS_AND\",\n        defaultMessage: \"And\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 764,\n          columnNumber: 43\n        }\n      }))) : \"\" : \"\", \" \", /*#__PURE__*/React.createElement(BuilderBorder, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 765,\n          columnNumber: 63\n        }\n      }, /*#__PURE__*/React.createElement(React.Fragment, null, this.createRulesView(items, index, selectedRecordview)))) : /*#__PURE__*/React.createElement(React.Fragment, null)));\n    });\n    return design;\n  }\n\n  componentWillUnmount() {\n    let activeTabIndex = this.props.Login.activeTabIndex;\n    const updateInfo = {\n      typeName: DEFAULT_RETURN,\n      data: {\n        activeTabIndex: undefined\n      }\n    };\n    this.props.updateStore(updateInfo);\n  }\n\n  componentDidUpdate(previousProps) {\n    let {\n      filterData,\n      activeTabIndex,\n      activeTabId,\n      selectedcombo\n    } = this.state;\n\n    if (this.props.Login.queryData !== previousProps.Login.queryData) {\n      this.setState({\n        data: this.props.Login.queryData,\n        dataResult: process(this.props.Login.queryData, this.state.dataState)\n      });\n    }\n\n    if (this.props.Login.needoutsource !== previousProps.Login.needoutsource) {\n      this.setState({\n        needoutsource: this.props.Login.needoutsource\n      });\n    }\n\n    if (this.props.Login.activeTabIndex !== previousProps.Login.activeTabIndex || this.props.Login.masterData !== previousProps.Login.masterData) {\n      if (this.props.Login.activeTabIndex !== previousProps.Login.activeTabIndex) {\n        activeTabIndex = this.props.Login.activeTabIndex;\n        activeTabId = this.props.Login.activeTabId;\n        this.setState({\n          activeTabIndex,\n          activeTabId\n        });\n      }\n    }\n\n    if (this.props.Login.masterData.ProductCategory !== previousProps.Login.masterData.ProductCategory) {\n      const ProductCategory = constructOptionList(this.props.Login.masterData.ProductCategory || [], \"nproductcatcode\", \"sproductcatname\", undefined, undefined, undefined);\n      let ProductCategoryList = ProductCategory.get(\"OptionList\");\n      this.setState({\n        ProductCategoryList\n      });\n    }\n\n    if (this.props.Login.masterData.queryDataMain !== previousProps.Login.masterData.queryDataMain) {\n      if (this.props.Login.masterData.queryDataMain !== undefined) {\n        this.setState({\n          dataMainList: this.props.Login.masterData.queryDataMain,\n          dataResultMain: process(this.props.Login.masterData.queryDataMain === null ? [] : this.props.Login.masterData.queryDataMain, this.state.dataStateMain)\n        });\n      }\n    }\n\n    if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\n      this.setState({\n        selectedRecord: this.props.Login.selectedRecord\n      });\n    }\n\n    if (this.props.Login.masterData.queryTypeCode !== previousProps.Login.masterData.queryTypeCode) {\n      filterData = this.generateBreadCrumData();\n      this.setState({\n        filterData\n      });\n    }\n\n    if (this.props.Login.masterData.SelectedProductCategory !== previousProps.Login.masterData.SelectedProductCategory) {\n      if (this.props.Login.masterData.SelectedProductCategory) {\n        const ProductCategory = constructOptionList(this.props.Login.masterData.ProductCategory || [], \"nproductcatcode\", \"sproductcatname\", undefined, undefined, undefined);\n        let ProductCategoryList = ProductCategory.get(\"OptionList\");\n        let nproductcatcode = this.props.Login.masterData.SelectedProductCategory.nproductcatcode;\n        selectedcombo['nproductcatcode'] = ProductCategoryList.filter(x => {\n          return x.value === nproductcatcode;\n        })[0];\n        filterData = this.generateBreadCrumData();\n        this.setState({\n          filterData,\n          selectedcombo\n        });\n      } else {\n        filterData = this.generateBreadCrumData();\n        this.setState({\n          filterData\n        });\n      }\n    } // if(this.props.Login.testInitiateSiteTab&&this.props.Login.testInitiateSiteTab.length>0)\n    // {\n    //     const updateInfo = {\n    //         typeName: DEFAULT_RETURN,\n    //         data: {\n    //             testInitiateSiteTab: []\n    //         }\n    //     }\n    //     this.props.updateStore(updateInfo);\n    // }\n\n\n    if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\n      const userRoleControlRights = [];\n\n      if (this.props.Login.userRoleControlRights) {\n        this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item => userRoleControlRights.push(item.ncontrolcode));\n      }\n\n      const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode);\n      this.setState({\n        controlMap,\n        userRoleControlRights\n      });\n    }\n  }\n\n  generateBreadCrumData() {\n    const breadCrumbData = [];\n\n    if (this.props.Login.masterData && this.props.Login.masterData.queryTypeCode) {\n      const item = this.state.queryType.filter(item => item.nquerytypecode === this.props.Login.masterData.queryTypeCode);\n      breadCrumbData.push({\n        \"label\": \"IDS_QUERYTYPE\",\n        \"value\": this.props.Login.masterData.queryTypeCode ? item[0].squerytypename : \"\"\n      });\n    }\n\n    if (this.props.Login.masterData && this.props.Login.masterData.SelectedProductCategory) {\n      breadCrumbData.push({\n        \"label\": \"IDS_SAMPLECATEGORY\",\n        \"value\": this.props.Login.masterData.SelectedProductCategory ? this.props.Login.masterData.SelectedProductCategory.sproductcatname : \"\"\n      });\n    } else {\n      breadCrumbData.push({\n        \"label\": \"IDS_SAMPLECATEGORY\",\n        \"value\": \"NA\"\n      });\n    }\n\n    return breadCrumbData;\n  }\n\n  fieldsForGrid() {\n    return this.props.Login.activeTabIndex == 1 ? [{\n      \"idsName\": \"IDS_FROMSITE\",\n      \"dataField\": \"sfromsitename\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_TOSITE\",\n      \"dataField\": \"stositename\",\n      \"width\": \"200px\"\n    }] : [{\n      \"idsName\": \"IDS_COMMENTSUBTYPE\",\n      \"dataField\": \"scommentsubtype\",\n      \"width\": \"200px\"\n    }, this.props.Login.activeTabIndex == 2 ? {\n      \"idsName\": \"IDS_TESTCOMMENTS\",\n      \"dataField\": \"spredefinedname\",\n      \"width\": \"200px\"\n    } : {\n      \"idsName\": \"IDS_REPORTCOMMENTS\",\n      \"dataField\": \"spredefinedname\",\n      \"width\": \"200px\"\n    }];\n  }\n\n  render() {\n    const addId = this.state.controlMap.has(\"Add Rules Engine\") && this.state.controlMap.get(\"Add Rules Engine\").ncontrolcode;\n    const editId = this.state.controlMap.has(\"Edit Rules Engine\") && this.state.controlMap.get(\"Edit Rules Engine\").ncontrolcode;\n    const deleteId = this.state.controlMap.has(\"Delete Rules Engine\") && this.state.controlMap.get(\"Delete Rules Engine\").ncontrolcode;\n    const breadCrumbData = this.state.filterData || [];\n    this.props.Login.masterData.RulesEngine = this.props.Login.masterData.RulesEngine && sortData(this.props.Login.masterData.RulesEngine, \"descending\", \"ntransactionrulesenginecode\");\n    this.props.Login.masterData.searchedData = this.props.Login.masterData.searchedData && sortData(this.props.Login.masterData.searchedData, \"descending\", \"ntransactionrulesenginecode\");\n    let gridColumnListMain = [];\n\n    if (this.props.Login.masterData && this.props.Login.masterData.columnList && this.props.Login.masterData.columnList.length > 0) {\n      this.props.Login.masterData.columnList.forEach(item => {\n        gridColumnListMain.push({\n          idsName: item.items.displayname[this.props.Login.userInfo.slanguagetypecode],\n          dataField: item.items.stestname,\n          width: '200px'\n        });\n      });\n    }\n\n    let selectedQueryType = [];\n\n    if (this.props.Login.masterData && this.props.Login.masterData.queryTypeCode) {\n      selectedQueryType = this.state.queryType.filter(item => item.nquerytypecode === this.props.Login.masterData.queryTypeCode);\n    }\n\n    const filterParam = {\n      inputListName: \"RulesEngine\",\n      selectedObject: \"SelectedRulesEngine\",\n      primaryKeyField: \"ntransactionrulesenginecode\",\n      fetchUrl: \"rulesengine/getSelectedRulesEngine\",\n      fecthInputObject: {\n        userinfo: this.props.Login.userInfo,\n        nproductcatcode: this.props.Login.masterData.SelectedProductCategory && this.props.Login.masterData.SelectedProductCategory.nproductcatcode\n      },\n      masterData: this.props.Login.masterData,\n      searchFieldList: [\"srulename\", \"stransdisplaystatus\"]\n    };\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(ListWrapper, {\n      className: \"client-listing-wrap mtop-fixed-breadcrumb fixed_breadcrumd\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 968,\n        columnNumber: 17\n      }\n    }, breadCrumbData.length > 0 ? /*#__PURE__*/React.createElement(Affix, {\n      top: 53,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 970,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(BreadcrumbComponent, {\n      breadCrumbItem: breadCrumbData,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 971,\n        columnNumber: 29\n      }\n    })) : \"\", /*#__PURE__*/React.createElement(Row, {\n      noGutters: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 974,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: \"4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 975,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(ListMaster, {\n      masterData: this.props.Login.masterData || [],\n      screenName: this.props.intl.formatMessage({\n        id: \"IDS_QUERYBUILDER\"\n      }),\n      masterList: this.props.Login.masterData.searchedData || this.props.Login.masterData.RulesEngine,\n      getMasterDetail: param => this.props.getSelectedRulesEngine(param, this.props.Login.userInfo, this.props.Login.masterData),\n      selectedMaster: this.props.Login.masterData.SelectedRulesEngine || this.props.Login.SelectedRulesEngine,\n      primaryKeyField: \"ntransactionrulesenginecode\",\n      mainField: \"srulename\",\n      firstField: \"stransdisplaystatus\" //secondField={\"stransdisplaystatus\"}\n      ,\n      filterColumnData: this.props.filterColumnData,\n      filterParam: filterParam,\n      userRoleControlRights: this.state.userRoleControlRights,\n      addId: addId,\n      searchRef: this.searchRef,\n      reloadData: this.reloadData,\n      openModal: this.getRulesEngineAdd // openModal={() => this.props.getSQLQueryComboService(\"\", \"create\", \"nsqlquerycode\", null,\n      //     this.props.Login.masterData, this.props.Login.userInfo,\n      //     this.props.Login.masterData.SelectedQueryType.nquerytypecode,                                   \n      //     addId)} \n      //{() => this.props.addTest(\"create\", selectedTest, userInfo, addId, this.state.nfilterTestCategory)} Already commented\n      ,\n      needAccordianFilter: false // skip={this.state.skip}\n      // take={this.state.take}\n      ,\n      handlePageChange: this.handlePageChange,\n      showFilterIcon: true,\n      showFilter: this.props.Login.showFilter,\n      openFilter: this.openFilter,\n      closeFilter: this.closeFilter,\n      onFilterSubmit: this.onFilterSubmit,\n      showBuildQuery: false,\n      builderData: this.getRulesEngineAdd,\n      filterComponent: [{\n        \"IDS_QUERYTYPEFILTER\": /*#__PURE__*/React.createElement(RuleEngineQueryTypeFilter, {\n          queryType: this.state.ProductCategoryList || [],\n          selectedRecord: this.state.selectedcombo || {},\n          onComboChange: this.onComboChange,\n          filterQueryType: selectedQueryType[0],\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1012,\n            columnNumber: 45\n          }\n        })\n      }],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 976,\n        columnNumber: 29\n      }\n    })), /*#__PURE__*/React.createElement(Col, {\n      md: \"8\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1022,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(ProductList, {\n      className: \"panel-main-content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1023,\n        columnNumber: 29\n      }\n    }, this.props.Login.masterData.SelectedRulesEngine && this.props.Login.masterData.SelectedRulesEngine ? /*#__PURE__*/React.createElement(Card, {\n      className: \"border-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1025,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(Card.Header, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1026,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(Card.Title, {\n      className: \"product-title-main\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1027,\n        columnNumber: 45\n      }\n    }, this.props.Login.masterData.SelectedRulesEngine.srulename), /*#__PURE__*/React.createElement(Card.Subtitle, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1028,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(ProductList, {\n      className: \"d-flex product-category icon-group-wrap\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1029,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      className: \"product-title-sub flex-grow-1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1030,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(MediaLabel, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1031,\n        columnNumber: 57\n      }\n    }, this.props.intl.formatMessage({\n      id: \"IDS_STATUS\"\n    }), \" :\"), /*#__PURE__*/React.createElement(MediaLabel, {\n      className: `btn btn-outlined ${this.props.Login.masterData.SelectedRulesEngine.ntransactionstatus === transactionStatus.APPROVED ? \"outline-success\" : this.props.Login.masterData.SelectedRulesEngine.ntransactionstatus === transactionStatus.RETIRED ? \"outline-danger\" : \"outline-secondary\"} btn-sm ml-3` // className={`btn btn-outlined  outline-success  btn-sm ml-3`}\n      ,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1034,\n        columnNumber: 57\n      }\n    }, this.props.Login.masterData.SelectedRulesEngine.stransdisplaystatus)), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"d-inline \",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1045,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(Nav.Link, {\n      className: \"btn btn-circle outline-grey mr-2\",\n      href: \"#\",\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_EDIT\"\n      }) //  data-for=\"tooltip_list_wrap\"\n      ,\n      onClick: e => this.props.getEditRulesEngine(\"update\", this.props.Login.masterData, editId, this.props.Login.userInfo),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1046,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faPencilAlt,\n      title: this.props.intl.formatMessage({\n        id: \"IDS_EDIT\"\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1055,\n        columnNumber: 61\n      }\n    })), /*#__PURE__*/React.createElement(Nav.Link, {\n      className: \"btn btn-circle outline-grey mr-2 action-icons-wrap\",\n      href: \"\",\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_DELETE\"\n      }) //   data-for=\"tooltip_list_wrap\"\n      ,\n      onClick: () => this.ConfirmDelete(deleteId),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1058,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faTrashAlt,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1063,\n        columnNumber: 61\n      }\n    })), /*#__PURE__*/React.createElement(Nav.Link, {\n      className: \"btn btn-circle outline-grey mr-2\",\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_APPROVE\"\n      }) // hidden={props.userRoleControlRights.indexOf(approveVersionId) === -1}\n      ,\n      onClick: () => this.approveVersion(this.props.Login.masterData, 1),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1066,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faThumbsUp,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1071,\n        columnNumber: 61\n      }\n    })), /*#__PURE__*/React.createElement(Nav.Link, {\n      className: \"btn btn-circle outline-grey mr-2\",\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_RETIRE\"\n      }) // hidden={props.userRoleControlRights.indexOf(approveVersionId) === -1}\n      ,\n      onClick: () => this.approveVersion(this.props.Login.masterData, 2),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1073,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(Reject, {\n      className: \"custom_icons\",\n      width: \"20\",\n      height: \"20\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1078,\n        columnNumber: 61\n      }\n    })), /*#__PURE__*/React.createElement(Nav.Link, {\n      className: \"btn btn-circle outline-grey mr-2\",\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_VIEW\"\n      }) // hidden={props.userRoleControlRights.indexOf(approveVersionId) === -1}\n      ,\n      onClick: () => this.openflowview(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1081,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faEye,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1086,\n        columnNumber: 61\n      }\n    }))))))) : \"\", this.props.Login.masterData.SelectedRulesEngine && /*#__PURE__*/React.createElement(CustomTab, {\n      tabDetail: this.tabDetail(),\n      onTabChange: this.onTabChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1098,\n        columnNumber: 37\n      }\n    }))))), this.props.Login.openPortalModal && /*#__PURE__*/React.createElement(PortalModalSlideout, {\n      show: this.props.Login.openPortalModal,\n      closeModal: this.closePortalModal,\n      screenName: this.props.Login.screenName,\n      handleSaveClick: this.save,\n      addComponent: (this.props.Login.operation === 'update' ? this.state.selectedRecord['groupList'] : true) && /*#__PURE__*/React.createElement(AddRule, {\n        productCategoryList: this.state.ProductCategoryList || [],\n        selectedRecord: this.state.selectedRecord || {},\n        databaseTableList: this.props.Login.databaseTableList,\n        tableColumnList: this.state.tableColumnList,\n        foreignTableList: this.state.foreignTableList || [],\n        foreignTableColumnList: this.props.Login.foreignTableColumnList || [] // validationData={validationData}\n        ,\n        count: this.state.count,\n        foreignTableCount: this.state.foreignTableCount,\n        sqlQuery: this.state.sqlQuery // viewMasterListByRule={this.props.Login.viewMasterListByRule&&this.props.Login.viewMasterListByRule.filter((x,i)=>{return x.value===this.props.Login.testInitiateTests[i]}) || []}\n        ,\n        userInfo: this.props.Login.userInfo,\n        onInputChange: this.onInputChange,\n        deleteRule: this.deleteRule,\n        clearRule: this.clearRule,\n        resetRule: this.resetRule,\n        onSymbolChange: this.onSymbolChange // onForeignTableChange={this.onForeignTableChange}\n        // addJoinTable={this.addJoinTable} \n        ,\n        onRuleChange: this.onRuleChange,\n        addRule: this.addRule,\n        addTest: this.addTest,\n        onConditionClick: this.onConditionClick,\n        onMasterDataChange: this.onMasterDataChange,\n        databaseviewList: this.props.Login.databaseviewList,\n        addRuleList: this.props.Login.addRuleList || [],\n        rulesOption: this.props.Login.rulesOption //viewColumnListByRule={this.props.Login.viewColumnListByRule || []}\n        // viewColumnListByRule={this.props.Login.viewColumnListByRule && this.props.Login.viewColumnListByRule.filter((x, i) => { return x.value === this.props.Login.testInitiateTests[i] }) || []}\n        ,\n        viewColumnListByRule: this.props.Login.viewColumnListByRule && this.viewColumnListByRule(this.props.Login.viewColumnListByRule) //this.props.Login.viewColumnListByRule && this.props.Login.viewColumnListByRule\n        ,\n        masterdata: this.props.Login.masterdata,\n        switchRecord: this.state.switchRecord,\n        data: this.state.data,\n        dataResult: this.state.dataResult || [],\n        dataState: this.state.dataState,\n        dataStateChange: this.dataStateChange,\n        userRoleControlRights: this.state.userRoleControlRights,\n        gridColumnList: this.props.Login.gridColumnList || [],\n        queryType: this.state.queryType,\n        addAggregateList: this.props.Login.addAggregateList || [],\n        addOrderbyList: this.props.Login.addOrderbyList || [],\n        addGroup: this.addGroup,\n        addGroupList: this.props.Login.addGroupList || [],\n        onFilterComboChange: this.onFilterComboChange,\n        selectFields: this.props.Login.selectFields || [],\n        SelectedProductCategory: this.props.Login.masterData.SelectedProductCategory,\n        DiagnosticCaseList: this.props.Login.DiagnosticCaseList,\n        GradeList: this.props.Login.GradeList,\n        siteList: this.props.Login.siteList,\n        resultTypeList: this.props.Login.resultTypeList,\n        isResultorOrderType: this.state.isResultorOrderType,\n        optionsByRule: this.state.optionsByRule || this.props.Login.DiagnosticCaseList //sideNavDetail={this.sideNavDetail}\n        ,\n        changePropertyView: this.changePropertyView,\n        splitChangeWidthPercentage: this.state.splitChangeWidthPercentage,\n        activeTabIndex: this.props.Login.activeTabIndex,\n        enablePropertyPopup: this.state.enablePropertyPopup,\n        propertyPopupWidth: this.state.propertyPopupWidth,\n        controlMap: this.state.controlMap,\n        sectionDataState: this.state.sectionDataState,\n        masterData: this.props.Login.masterData,\n        intl: this.props.intl,\n        addOutcomeList: this.props.Login.addOutcomeList && this.props.Login.addOutcomeList || [],\n        deleteOutcome: this.deleteOutcome,\n        onmodalComboChange: this.onmodalComboChange,\n        openModalPopup: this.props.Login.openModalPopup,\n        closeModalShow: this.closeModalShow,\n        modalsaveClick: this.modalsaveClick,\n        getOutcomeDetails: this.getOutcomeDetails,\n        addModalSite: this.addModalSite,\n        action: this.props.Login.action,\n        deletModalSite: this.deletModalSite,\n        deleteModalTest: this.deleteModalTest,\n        activeTestTab: this.props.Login.activeTestTab,\n        testcomments: this.props.Login.testcomments,\n        reportcomments: this.props.Login.reportcomments,\n        addComments: this.addComments,\n        CommentType: this.props.Login.CommentType,\n        CommentSubType: this.props.Login.CommentSubType,\n        isneedsgeneralcomments: this.state.isneedsgeneralcomments,\n        predefcomments: this.props.Login.predefcomments,\n        needoutsource: this.state.selectedRecord['needoutsource'] && this.state.selectedRecord['needoutsource'] === 3 ? true : false,\n        openmodalsavePopup: this.props.Login.openmodalsavePopup,\n        save: this.save,\n        dataStateObject: this.state.dataStateObject,\n        paneSizeChange: this.paneSizeChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1113,\n          columnNumber: 29\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1106,\n        columnNumber: 21\n      }\n    }), this.props.Login.openModal && /*#__PURE__*/React.createElement(SlideOutModal, {\n      show: this.props.Login.openModal,\n      closeModal: this.closeModal,\n      className: \"wide-popup\",\n      inputParam: this.props.Login.inputParam,\n      screenName: this.props.intl.formatMessage({\n        id: \"IDS_VIEWRULE\"\n      }),\n      hideSave: true,\n      size: 'xl',\n      selectedRecord: this.state.selectedRecord || {},\n      addComponent: this.props.Login.masterData.SelectedRulesEngine && /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1220,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(Col, {\n        md: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1221,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(OrgTree, {\n        data: this.ruleflowobject(),\n        horizontal: true,\n        collapsable: true,\n        expandAll: true,\n        labelClassName: \"ruletree\" //labelWidth={50}\n        ,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1222,\n          columnNumber: 37\n        }\n      }))),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1210,\n        columnNumber: 21\n      }\n    }));\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\n      toast.warn(props.Login.masterStatus);\n      props.Login.masterStatus = \"\";\n    }\n\n    if (props.Login.error !== state.error) {\n      toast.error(props.Login.error);\n      props.Login.error = \"\";\n    }\n\n    return null;\n  } // confirmDelete = (ncontrolCode) => {\n  //     this.confirmMessage.confirm(\"deleteMessage\",\n  //         this.props.intl.formatMessage({ id: \"IDS_DELETE\" }),\n  //         this.props.intl.formatMessage({ id: \"IDS_DEFAULTCONFIRMMSG\" }),\n  //         this.props.intl.formatMessage({ id: \"IDS_OK\" }),\n  //         this.props.intl.formatMessage({ id: \"IDS_CANCEL\" }),\n  //         () => this.deleteQB(\"delete\", ncontrolCode));\n  // };\n\n\n  clearSelectedRule(selectedRecord, index) {\n    selectedRecord[\"sinputname_\" + index] && delete selectedRecord[\"sinputname_\" + index];\n    selectedRecord[\"ssymbolname_\" + index] && delete selectedRecord[\"ssymbolname_\" + index];\n    selectedRecord[\"snumericinput_\" + index] && delete selectedRecord[\"snumericinput_\" + index];\n    selectedRecord[\"columnname_\" + index] && delete selectedRecord[\"columnname_\" + index];\n    selectedRecord[\"snumericinputtwo_\" + index] && delete selectedRecord[\"snumericinputtwo_\" + index];\n    selectedRecord[\"dateinput_\" + index] && delete selectedRecord[\"dateinput_\" + index];\n    selectedRecord[\"dateinputtwo_\" + index] && delete selectedRecord[\"dateinputtwo_\" + index];\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    Login: state.Login\n  };\n};\n\nexport default connect(mapStateToProps, {\n  callService,\n  crudMaster,\n  updateStore,\n  filterColumnData,\n  validateEsignCredential,\n  getRulesEngineAdd,\n  getSelectedRulesEngine,\n  getRulesEngine,\n  getEditRulesEngine\n})(injectIntl(RuleEngineQueryBuilder));","map":{"version":3,"sources":["E:/WorkingFolder/React_Postgres/ALPD/branches/SOURCE-513-PROD/SOURCE-513-ALPD-5500/QuaLISWeb/src/pages/configurationmaster/RuleEngineQueryBuilder.jsx"],"names":["React","Component","connect","injectIntl","FormattedMessage","Row","Col","Card","Nav","FontAwesomeIcon","BuilderBorder","ContionalButton","OrgTree","faTrashAlt","faCopy","faPencilAlt","faThumbsUp","faEye","process","toast","ListMaster","SlideOutModal","CustomTab","RuleEngineQueryTypeFilter","callService","crudMaster","validateEsignCredential","updateStore","filterColumnData","getSelectedRulesEngine","getRulesEngine","getEditRulesEngine","getRulesEngineAdd","DEFAULT_RETURN","transactionStatus","constructOptionList","getControlMap","showEsign","sortData","MediaLabel","ConfirmMessage","Affix","BreadcrumbComponent","ListWrapper","PortalModalSlideout","AddRule","ProductList","DataGrid","stringOperatorData","FormInput","jsonSql","require","separatedValues","RuleEngineQueryBuilder","constructor","props","dataStateChange","event","ntestparametercode","dataStateObject","state","dataState","setState","dataStateChangetestinitiate","dataStatetestinitiate","dataStateChangeMain","dataResultMain","Login","queryDataMain","dataStateMain","ConfirmDelete","deleteId","confirmMessage","confirm","intl","formatMessage","id","handleClickDelete","masterData","changePropertyViewClose","updateInfo","typeName","data","activeTabIndex","undefined","activeTestTab","activeTabId","closeModalShow","openModalPopup","selectedRecord","reloadData","searchRef","current","value","inputParam","inputData","userInfo","nproductcatcode","SelectedProductCategory","classUrl","methodUrl","displayName","onsavevalidation","grouplist","hasAll","i","length","rules","j","every","prop","hasOwnProperty","save","siteObject","testCommentObject","reportCommentObject","testInitiateTests","testCommentsTests","reportCommentsTests","action","groupList","outcomeList","addGroupList","testInitiateSiteTab","testCommentsTestsTab","reportCommentsTestsTab","ruleEngineLayout","ruleEngineLayoutObject","groupRuleObject","map","List","push","console","log","JSON","stringify","operation","SelectedRulesEngine","info","openmodalsavePopup","openFilter","showFilter","closeFilter","onFilterSubmit","selectedcombo","queryTypeCode","onFilterComboChange","comboData","fieldName","onComboChange","onOutcomeChange","index","onRuleChange","groupIndex","clearSelectedRule","sqlQuery","oldselectedRecord","tableData","item","onMasterDataChange","isResultorOrderType","optionsByRule","DiagnosticCaseList","GradeList","addRule","type","viewColumnListByRule","arrayLength","viewColumnList","databaseviewList","paneSizeChange","d","splitChangeWidthPercentage","addTest","warn","addComments","selectedParameter","testparameter","filter","x","addModalSite","modalsaveClick","needoutsource","testInitiateTestsTemp","testCommentsTestsTemp","reportCommentsTestsTemp","testInitiateSiteTemp","testInitiateTestOptions","testCommentsTestOptions","reportCommentsTestOptions","testInitiateTestdeletedOptions","testCommentsTestdeletedOptions","reportCommentsTestdeletedOptions","npkAtestparametercode","npkBtestparametercode","npkCtestparametercode","isduplicate","npKAsampletestcommentscode","object","ncommentsubtypecode","scommentsubtype","ncommenttypecode","scommenttype","nsampletestcommentscode","spredefinedname","label","sgeneralcomments","stestparametersynonym","siteseqnumber","npksitecode","sfromsitename","stositename","Object","keys","deletModalSite","inputparam","row","temparray","splice","deleteModalTest","findIndex","onmodalComboChange","isneedsgeneralcomments","getOutcomeDetails","testParameter","testParameterComments","testParameterreportComments","handleExpandChange","childListMap1","Map","childListMap2","childListMap3","childListMap","activeTabName","keylst","key","set","parseInt","values","onTabChange","tabProps","openflowview","openModal","tabDetail","jsonuidata","tabMap","skip","take","controlMap","userRoleControlRights","addGroup","sql1","build","table","alias","join","on","query","sql21","condition","a","$gt","b","$lt","group","selectFields","addRuleList","addAggregateList","addOrderbyList","closePortalModal","openPortalModal","count","closeModal","changePropertyView","status","window","innerWidth","enableAutoClick","deleteRule","deleteOutcome","addOutcomeList","clearRule","sviewname","resetRule","onSymbolChange","oldSelectedRecord","onInputChange","target","name","checked","list","dynamicList","some","onConditionClick","isgroup","settings","dataStateUserQuery","error","sectionDataState","parameters","queryName","queryTypeName","selectedTableType","moduleFormName","ntableTypeCode","nFormCode","tableType","chartList","outputColumns","selectedTableList","tableColumnList","foreignTableColumnList","joinTableList","symbolsList","foreignTableList","foreignTableCount","selectedforeignTableList","filterColumnList","switchRecord","dataMainList","dataResult","enablePropertyPopup","queryType","squerytypename","nquerytypecode","queryTypeOptions","createRef","queryFieldList","searchFieldList","ncontrolcode","fieldArray","ntransactionrulesenginecode","nformcode","loadEsign","screenData","screenName","approveVersion","nflag","createRulesView","items","selectedRecordview","design","Array","stringOperators","valuemember","generateRandomColor","letters","color","Math","floor","random","ruleflowobject","labelColor","labelBGColor","borderColor","groupListJoins","children","parent","grandparent","groupobject","rulesList","rule","notarray","parentjoins","srulename","createGroupRulesview","indexCount","selectedRecordviewflag","ruleslist","componentWillUnmount","componentDidUpdate","previousProps","filterData","queryData","ProductCategory","ProductCategoryList","get","generateBreadCrumData","breadCrumbData","sproductcatname","fieldsForGrid","render","addId","has","editId","RulesEngine","searchedData","gridColumnListMain","columnList","forEach","idsName","displayname","slanguagetypecode","dataField","stestname","width","selectedQueryType","filterParam","inputListName","selectedObject","primaryKeyField","fetchUrl","fecthInputObject","userinfo","param","handlePageChange","ntransactionstatus","APPROVED","RETIRED","stransdisplaystatus","e","databaseTableList","rulesOption","masterdata","gridColumnList","siteList","resultTypeList","propertyPopupWidth","testcomments","reportcomments","CommentType","CommentSubType","predefcomments","getDerivedStateFromProps","masterStatus","mapStateToProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { injectIntl, FormattedMessage } from 'react-intl';\r\nimport { Row, Col, Card, Nav } from 'react-bootstrap';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { ReactComponent as Reject } from '../../assets/image/reject.svg'\r\nimport { BuilderBorder, ContionalButton } from './RuleEngineSqlbuilder.styled';\r\nimport OrgTree from 'react-org-tree';\r\n\r\nimport { faTrashAlt, faCopy, faPencilAlt, faThumbsUp, faEye } from '@fortawesome/free-solid-svg-icons';\r\nimport { process } from '@progress/kendo-data-query';\r\nimport { toast } from 'react-toastify';\r\nimport ListMaster from '../../components/list-master/list-master.component';\r\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\r\nimport CustomTab from '../../components/custom-tabs/custom-tabs.component'\r\nimport RuleEngineQueryTypeFilter from './RuleEngineQueryTypeFilter';\r\nimport {\r\n    callService, crudMaster, validateEsignCredential, updateStore,\r\n    filterColumnData,\r\n    getSelectedRulesEngine, getRulesEngine, getEditRulesEngine, getRulesEngineAdd\r\n} from '../../actions';\r\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\r\nimport { transactionStatus } from '../../components/Enumeration';\r\nimport { constructOptionList, getControlMap, showEsign, sortData } from '../../components/CommonScript';\r\nimport { MediaLabel } from '../../components/App.styles';\r\nimport ConfirmMessage from '../../components/confirm-alert/confirm-message.component';\r\nimport { Affix } from 'rsuite';\r\nimport BreadcrumbComponent from '../../components/Breadcrumb.Component';\r\nimport { ListWrapper } from '../../components/client-group.styles';\r\n// import ReactTooltip from 'react-tooltip';\r\nimport PortalModalSlideout from '../../components/portal-modal/portal-modal-slideout';\r\nimport AddRule from './AddRule';\r\nimport { ProductList } from '../product/product.styled'; \r\nimport DataGrid from '../../components/data-grid/data-grid.component';\r\n\r\nimport { stringOperatorData } from './RuleEngineQueryBuilderData';\r\nimport FormInput from '../../components/form-input/form-input.component';\r\n\r\n\r\nconst jsonSql = require('json-sql')({ separatedValues: false });\r\n//const jsonSqlParam = require('json-sql')({ separatedValues: true });\r\n\r\nclass RuleEngineQueryBuilder extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        const dataState = {\r\n            skip: 0,\r\n            take: props.settings ? parseInt(props.settings[14]) : 5,\r\n        };\r\n        const dataStateMain = {\r\n            skip: 0,\r\n            take: props.settings ? parseInt(props.settings[14]) : 5,\r\n        };\r\n        const dataStateUserQuery = {\r\n            skip: 0,\r\n            take: 10,\r\n        };\r\n\r\n        this.state = ({\r\n            selectedRecord: {},\r\n            error: \"\",\r\n            sectionDataState: { skip: 0, take: 10 },\r\n            // modalIsOpen: false,\r\n            parameters: [],\r\n            // objparam: [],\r\n            // objDparam: [],\r\n            queryName: '',\r\n            // queryResult: [],\r\n            userRoleControlRights: [],\r\n            splitChangeWidthPercentage: 28.6,\r\n            controlMap: new Map(),\r\n            dataStateUserQuery: dataStateUserQuery,\r\n            queryTypeName: '',\r\n            selectedcombo: [],\r\n            selectedTableType: [],\r\n            moduleFormName: [],\r\n            ntableTypeCode: -1,\r\n            nFormCode: -1,\r\n            tableType: [],\r\n            chartList: [],\r\n            skip: 0,\r\n            take: this.props.Login.settings ?\r\n                this.props.Login.settings[3] : 25, //tableName : undefined,tableList:[]\r\n            outputColumns: [],\r\n            selectedTableList: [],\r\n            tableColumnList: [],\r\n            foreignTableColumnList: [],\r\n            joinTableList: [],\r\n            symbolsList: [],\r\n            foreignTableList: [],\r\n            count: 0,\r\n            foreignTableCount: [],\r\n            selectedforeignTableList: [],\r\n            filterColumnList: [],\r\n            sqlQuery: false,\r\n            // viewColumnList: [],\r\n            switchRecord: {},\r\n            dataState: dataState,\r\n            dataStateMain: dataStateMain,\r\n            data: [],\r\n            dataMainList: [],\r\n            dataResult: [],\r\n            dataResultMain: [],\r\n            enablePropertyPopup: false,\r\n            enableAutoClick: false, needoutsource: false,\r\n            queryType: [{ squerytypename: this.props.intl.formatMessage({ id: \"IDS_VIEWS\" }), nquerytypecode: 1 }, { squerytypename: this.props.intl.formatMessage({ id: \"IDS_SQL\" }), nquerytypecode: 2 }],\r\n            //  queryTypeOptions: [{ label: this.props.intl.formatMessage({ id: \"IDS_VIEWS\" }), views: 1 }, { label: this.props.intl.formatMessage({ id: \"IDS_SQL\" }), value: 2 }]\r\n            queryTypeOptions: []\r\n        });\r\n        this.searchRef = React.createRef();\r\n        this.confirmMessage = new ConfirmMessage();\r\n        // this.dropItemRef = React.createRef(); \r\n\r\n        this.queryFieldList = ['nquerytypecode', 'ssqlqueryname', 'ssqlquery',\r\n            'sscreenrecordquery', 'sscreenheader', 'svaluemember', 'sdisplaymember', 'ncharttypecode'];\r\n        // this.queryList = [];\r\n\r\n        this.searchFieldList = [\"ssqlqueryname\", \"ssqlquery\", \"sscreenheader\", \"svaluemember\", \"sdisplaymember\",\r\n            \"squerytypename\", \"schartname\"];\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n    dataStateChange = (event, ntestparametercode) => {\r\n        let dataStateObject = this.state.dataStateObject || {}\r\n        if (ntestparametercode) {\r\n            dataStateObject = {\r\n                ...dataStateObject,\r\n                [ntestparametercode]: event.dataState\r\n            }\r\n            this.setState({\r\n                dataStateObject\r\n            });\r\n        }\r\n        else {\r\n            this.setState({\r\n                dataState: event.dataState\r\n            });\r\n        }\r\n\r\n    }\r\n    dataStateChangetestinitiate = (event) => {\r\n        this.setState({\r\n            //  dataResult: process(this.props.Login.queryData, event.dataState),\r\n            dataStatetestinitiate: event.dataState\r\n        });\r\n    }\r\n    dataStateChangeMain = (event) => {\r\n        this.setState({\r\n            dataResultMain: process(this.props.Login.queryDataMain, event.dataStateMain),\r\n            dataStateMain: event.dataStateMain\r\n        });\r\n    }\r\n    ConfirmDelete = (deleteId) => {\r\n        this.confirmMessage.confirm(\"deleteMessage\", this.props.intl.formatMessage({ id: \"IDS_DELETE\" }), this.props.intl.formatMessage({ id: \"IDS_DEFAULTCONFIRMMSG\" }),\r\n            this.props.intl.formatMessage({ id: \"IDS_OK\" }), this.props.intl.formatMessage({ id: \"IDS_CANCEL\" }),\r\n            () => this.handleClickDelete(this.props.Login.masterData, deleteId, \"openModal\"));\r\n    }\r\n    handleClickDelete(masterData, ncontrolcode//, modalName\r\n    ) {\r\n        const fieldArray = [];\r\n        const inputParam = {\r\n            methodUrl: \"RulesEngine\",\r\n            classUrl: \"rulesengine\",\r\n            inputData: {\r\n                \"ntransactionrulesenginecode\": this.props.Login.masterData.SelectedRulesEngine.ntransactionrulesenginecode,\r\n                \"nproductcatcode\": this.props.Login.masterData.SelectedProductCategory.nproductcatcode,\r\n                \"userinfo\": this.props.Login.userInfo,\r\n            },\r\n            operation: \"delete\", //postParam,\r\n            displayName: \"RulesEngine\",\r\n        }\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, ncontrolcode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData },// [modalName]: true,\r\n                    operation: 'delete', screenName: \"RulesEngine\", id: \"RulesEngine\"\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.crudMaster(inputParam, masterData, undefined\r\n            );\r\n        }\r\n    }\r\n\r\n\r\n    approveVersion(masterData, nflag, ncontrolcode//, modalName\r\n    ) {\r\n        const fieldArray = [];\r\n        const inputParam = {\r\n            methodUrl: \"RulesEngine\",\r\n            classUrl: \"rulesengine\",\r\n            inputData: {\r\n                \"ntransactionrulesenginecode\": this.props.Login.masterData.SelectedRulesEngine.ntransactionrulesenginecode,\r\n                \"nproductcatcode\": this.props.Login.masterData.SelectedProductCategory.nproductcatcode,\r\n                \"userinfo\": this.props.Login.userInfo, nflag: nflag\r\n            },\r\n            operation: \"approve\", //postParam,\r\n            displayName: \"RulesEngine\",\r\n        }\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, ncontrolcode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData },// [modalName]: true,\r\n                    operation: 'delete', screenName: \"RulesEngine\", id: \"RulesEngine\"\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.crudMaster(inputParam, masterData, undefined\r\n            );\r\n        }\r\n    }\r\n\r\n\r\n    createRulesView(items, groupIndex, selectedRecordview) {\r\n        let design = [];\r\n        [...Array(items)].map((data, index) => {\r\n            let stringOperators = stringOperatorData;\r\n            design.push(\r\n                <>\r\n                    {index > 0 ? selectedRecordview[\"groupList\"][groupIndex]['button_or'] === true ?\r\n                        <ContionalButton type=\"button\" className={\"builder-btn-primary\"} marginLeft={0}\r\n                        >\r\n                            <span><FormattedMessage id=\"IDS_OR\" defaultMessage=\"Or\" /></span>\r\n                        </ContionalButton> :\r\n                        selectedRecordview[\"groupList\"][groupIndex]['button_and'] === true ?\r\n                            <ContionalButton type=\"button\" className={\"builder-btn-primary\"} marginLeft={0}\r\n                            >\r\n                                <span><FormattedMessage id=\"IDS_AND\" defaultMessage=\"And\" /></span>\r\n                            </ContionalButton> : \"\" : \"\"}\r\n                    <Row className=\"mt-3\">\r\n                        <Col md={3}>\r\n                            {/* <FormSelectSearch\r\n                                formGroupClassName=\"remove-floating-label-margin\"\r\n                                isSearchable={true}\r\n                                name={\"stestname\"}\r\n                                showOption={true}\r\n                                options={this.props.Login.rulesOption || []}\r\n                                optionId='stestname'\r\n                                optionValue='displayname'\r\n                                isDisabled={true}\r\n                                value={selectedRecordview[\"groupList\"][groupIndex][index] && selectedRecordview[\"groupList\"][groupIndex][index][\"stestname\"] || \"\"}\r\n                            //onChange={value => props.onRuleChange(value, \"stestname\", groupIndex, index)}\r\n                            ></FormSelectSearch> */}\r\n\r\n                            <FormInput\r\n                                formGroupClassName=\"remove-floating-label-margin\"\r\n                                name={`stestname`}\r\n                                type=\"text\"\r\n                                value={selectedRecordview[\"groupList\"][groupIndex][index] && selectedRecordview[\"groupList\"][groupIndex][index][\"stestname\"].label}\r\n                                disabled={true}\r\n                            />\r\n\r\n                        </Col>\r\n\r\n                        {\r\n                            selectedRecordview[\"groupList\"][groupIndex][index][\"stestname\"] &&\r\n                            <>\r\n                                <Col md={1}>\r\n                                    <FormInput\r\n                                        formGroupClassName=\"remove-floating-label-margin\"\r\n                                        name={`sinputname`}\r\n                                        type=\"text\"\r\n                                        value={this.props.intl.formatMessage({ id: \"IDS_WITH\" })}\r\n                                        disabled={true}\r\n                                    />\r\n                                </Col>\r\n                                <Col md={2}>\r\n                                    {/* <FormSelectSearch\r\n                                        formGroupClassName=\"remove-floating-label-margin\"\r\n                                        formLabel=\"\"\r\n                                        isSearchable={true}\r\n                                        name={\"orderresulttype\"}\r\n                                        placeholder=\"\"\r\n                                        showOption={true}\r\n                                        options={this.props.Login.resultTypeList}\r\n                                        optionId='nresultypecode'\r\n                                        optionValue='orderresulttype'\r\n                                        isDisabled={true}\r\n                                        value={selectedRecordview[\"groupList\"][groupIndex][index][\"orderresulttype\"] && selectedRecordview[\"groupList\"][groupIndex][index][\"orderresulttype\"] || \"\"}\r\n                                    //onChange={value => props.onMasterDataChange(value, \"orderresulttype\", groupIndex, index)}\r\n                                    >\r\n                                    </FormSelectSearch> */}\r\n                                    <FormInput\r\n                                        formGroupClassName=\"remove-floating-label-margin\"\r\n                                        name={`orderresulttype`}\r\n                                        type=\"text\"\r\n                                        value={selectedRecordview[\"groupList\"][groupIndex][index][\"orderresulttype\"] && selectedRecordview[\"groupList\"][groupIndex][index][\"orderresulttype\"].label}\r\n                                        disabled={true}\r\n                                    />\r\n                                </Col>\r\n                                <Col md={2}>\r\n                                    {/* <FormSelectSearch\r\n                                        formGroupClassName=\"remove-floating-label-margin\"\r\n                                        formLabel=\"\"\r\n                                        isSearchable={true}\r\n                                        name={\"ssymbolname\"}\r\n                                        placeholder=\"\"\r\n                                        showOption={true}\r\n                                        options={stringOperators}\r\n                                        optionId='nvalidationcode'\r\n                                        optionValue='ssymbolname'\r\n                                        isDisabled={true}\r\n                                        value={selectedRecordview[\"groupList\"][groupIndex][index][\"ssymbolname\"] && selectedRecordview[\"groupList\"][groupIndex][index][\"ssymbolname\"] || \"\"}\r\n                                    // onChange={value => props.onSymbolChange(value, \"ssymbolname\", groupIndex, index)}\r\n                                    >\r\n                                    </FormSelectSearch> */}\r\n                                    <FormInput\r\n                                        formGroupClassName=\"remove-floating-label-margin\"\r\n                                        name={`ssymbolname`}\r\n                                        type=\"text\"\r\n                                        value={selectedRecordview[\"groupList\"][groupIndex][index][\"ssymbolname\"] && selectedRecordview[\"groupList\"][groupIndex][index][\"ssymbolname\"].label || \"\"}\r\n                                        disabled={true}\r\n                                    />\r\n                                </Col>\r\n\r\n                                <Col md={3}>\r\n                                    {/* <FormSelectSearch\r\n                                        formGroupClassName=\"remove-floating-label-margin\"\r\n                                        isSearchable={true}\r\n                                        name={`${selectedRecordview[\"groupList\"][groupIndex][index][\"stestname\"].items && selectedRecordview[\"groupList\"][groupIndex][index][\"stestname\"].items.valuemember}`}\r\n                                        showOption={true}\r\n                                        options={selectedRecordview[\"groupList\"][groupIndex][index][\"orderresulttype\"] &&\r\n                                            selectedRecordview[\"groupList\"][groupIndex][index][\"orderresulttype\"].value == 1 ?\r\n                                            this.props.Login.DiagnosticCaseList : this.props.Login.GradeList}\r\n                                        optionId={selectedRecordview[\"groupList\"][groupIndex][index][\"stestname\"].items && selectedRecordview[\"groupList\"][groupIndex][index][\"stestname\"].items.valuemember}\r\n                                        optionValue={selectedRecordview[\"groupList\"][groupIndex][index][\"stestname\"].items && selectedRecordview[\"groupList\"][groupIndex][index][\"stestname\"].items.displaymember}\r\n                                        value={selectedRecordview[\"groupList\"][groupIndex][index] &&\r\n                                            selectedRecordview[\"groupList\"][groupIndex][index]\r\n                                            [selectedRecordview[\"groupList\"][groupIndex][index][\"orderresulttype\"] &&\r\n                                                selectedRecordview[\"groupList\"][groupIndex][index][\"orderresulttype\"].value == 1 ? 'ndiagnosticcasecode' : 'ngradecode'] || \"\"}\r\n                                        isDisabled={true}\r\n                                    ></FormSelectSearch> */}\r\n                                    <FormInput\r\n                                        formGroupClassName=\"remove-floating-label-margin\"\r\n                                        name={`${selectedRecordview[\"groupList\"][groupIndex][index][\"stestname\"].items && selectedRecordview[\"groupList\"][groupIndex][index][\"stestname\"].items.valuemember}`}\r\n                                        type=\"text\"\r\n                                        value={selectedRecordview[\"groupList\"][groupIndex][index] &&\r\n                                            selectedRecordview[\"groupList\"][groupIndex][index]\r\n                                            [selectedRecordview[\"groupList\"][groupIndex][index][\"orderresulttype\"] &&\r\n                                                selectedRecordview[\"groupList\"][groupIndex][index][\"orderresulttype\"].value == 1 ? 'ndiagnosticcasecode' : 'ngradecode'].label || \"\"} disabled={true}\r\n                                    />\r\n                                </Col>\r\n\r\n                            </>\r\n                        }\r\n                    </Row>\r\n                </>\r\n            )\r\n        });\r\n        return design;\r\n    }\r\n    generateRandomColor() {\r\n        var letters = '0123456789ABCDEF';\r\n        var color = '#';\r\n        for (var i = 0; i < 6; i++) {\r\n            color += letters[Math.floor(Math.random() * 16)];\r\n        }\r\n        return color;\r\n    }\r\n    ruleflowobject() {\r\n        let object = {}\r\n        const labelColor = ['#e63109', '#2fb47d', '#eaa203', '#6554c0'];\r\n        const labelBGColor = ['#fcd7cd', '#e5f8f1', '#fcf3dd', '#e7e6f5'];\r\n        const borderColor = ['#e6310', '#c6f6e4', '#fde2a4', '#cbc5f7'];\r\n        let groupList = this.props.Login.masterData.SelectedRulesEngine['jsondata']\r\n        let groupListJoins = this.props.Login.masterData.SelectedRulesEngine['jsonuidata'] &&\r\n            this.props.Login.masterData.SelectedRulesEngine['jsonuidata']['groupListJoins']\r\n        let children = []\r\n        let parent = []\r\n        let grandparent = []\r\n        // groupList.map((groupobject, index) => {\r\n        //     if (groupobject.hasOwnProperty('button_or')) {\r\n        //         children = []\r\n        //         let rulesList = groupobject['button_or']\r\n        //         rulesList.map((rule, index) => {\r\n        //             children.push({ id: index, label: rule['stestname'].label })\r\n        //         })\r\n        //         parent.push({ id: index, label: 'button_or', children: children })\r\n        //     }\r\n        //     if (groupobject.hasOwnProperty('button_and')) {\r\n        //         children = []\r\n        //         let rulesList = groupobject['button_and']\r\n        //         rulesList.map((rule, index) => {\r\n        //             children.push({ id: index, label: rule['stestname'].label })\r\n        //         })\r\n        //         parent.push({ id: index, label: 'button_and', children: children })\r\n        //     }\r\n        // })\r\n        groupList.map((groupobject, index) => {\r\n            if (groupobject.hasOwnProperty('button_or')) {\r\n                children = []\r\n                let rulesList = groupobject['button_or']\r\n                rulesList.map((rule, index) => {\r\n                    children.push(\r\n                        //     {\r\n                        //     id: index, label: rule['stestname'].label, children: [\r\n                        //         {\r\n                        //             id: 0, label: this.props.intl.formatMessage({ id: \"IDS_WITH\" }), children: [\r\n                        //                 {\r\n                        //                     id: 0, label: rule['orderresulttype'].label, children: [\r\n\r\n                        //                         {\r\n                        //                             id: 0, label: rule['ssymbolname'].label, children: [\r\n                        //                                 {\r\n                        //                                     id: 0, label: rule['ndiagnosticcasecode'] ? rule['ndiagnosticcasecode'].label :\r\n                        //                                         rule['ngradecode'].label, children: []\r\n                        //                                 }\r\n                        //                             ]\r\n                        //                         }\r\n\r\n                        //                     ]\r\n                        //                 }\r\n                        //             ]\r\n                        //         }\r\n                        //     ]\r\n                        // }\r\n                        {\r\n                            id: index, label: <>{(rule['stestname'].label) + \" -> \" + (this.props.intl.formatMessage({ id: \"IDS_WITH\" })) + \" -> \" +\r\n                                (rule['orderresulttype'].label) + \" -> \" +\r\n                                (rule['ssymbolname'].label) + \" -> \" + (rule['orderresulttype'].value === 1 ? rule['ndiagnosticcasecode'].label :\r\n                                    rule['ngradecode'].label)\r\n\r\n                            }</>\r\n                        }\r\n                    )\r\n                })\r\n                parent.push({ id: index, label: <div className=\"btn btn-primary\" >{this.props.intl.formatMessage({ id: \"IDS_OR\" })}</div>, children: children })\r\n            }\r\n            if (groupobject.hasOwnProperty('button_and')) {\r\n                children = []\r\n                let rulesList = groupobject['button_and']\r\n                rulesList.map((rule, index) => {\r\n                    children.push(\r\n                        // {\r\n                        //     id: index, label: rule['stestname'].label, children: [\r\n                        //         {\r\n                        //             id: 0, label: this.props.intl.formatMessage({ id: \"IDS_WITH\" }), children: [\r\n                        //                 {\r\n                        //                     id: 0, label: rule['orderresulttype'].label, children: [\r\n\r\n                        //                         {\r\n                        //                             id: 0, label: rule['ssymbolname'].label, children: [\r\n                        //                                 {\r\n                        //                                     id: 0, label: rule['ndiagnosticcasecode'] ? rule['ndiagnosticcasecode'].label :\r\n                        //                                         rule['ngradecode'].label, children: []\r\n                        //                                 }\r\n                        //                             ]\r\n                        //                         }\r\n\r\n                        //                     ]\r\n                        //                 }\r\n                        //             ]\r\n                        //         }\r\n                        //     ]\r\n                        // }\r\n                        {\r\n                            id: index, label: <>{\r\n\r\n                                (rule['stestname'].label) + \" -> \" + (this.props.intl.formatMessage({ id: \"IDS_WITH\" })) + \" -> \" +\r\n                                (rule['orderresulttype'].label) + \" -> \" +\r\n                                (rule['ssymbolname'].label) + \" -> \" + (rule['orderresulttype'].value === 1 ? rule['ndiagnosticcasecode'].label :\r\n                                    rule['ngradecode'].label)\r\n\r\n\r\n                            }</>\r\n                        }\r\n                    )\r\n                })\r\n                parent.push({ id: index, label: <div className=\"btn btn-primary\" >{this.props.intl.formatMessage({ id: \"IDS_AND\" })}</div>, children: children })\r\n            }\r\n            if (groupobject.hasOwnProperty('button_not_button_and')) {\r\n                children = []\r\n                let rulesList = groupobject['button_not_button_and']\r\n                rulesList.map((rule, index) => {\r\n                    children.push(\r\n                        {\r\n                            id: index, label: <>{(rule['stestname'].label) + \" -> \" + (this.props.intl.formatMessage({ id: \"IDS_WITH\" })) + \" -> \" +\r\n                                (rule['orderresulttype'].label) + \" -> \" +\r\n                                (rule['ssymbolname'].label) + \" -> \" + (rule['orderresulttype'].value === 1 ? rule['ndiagnosticcasecode'].label :\r\n                                    rule['ngradecode'].label)\r\n\r\n                            }</>\r\n                        }\r\n                    )\r\n                })\r\n                let notarray = [{ id: index, label: <div className=\"btn btn-primary\" >{this.props.intl.formatMessage({ id: \"IDS_AND\" })}</div>, children: children }]\r\n                parent.push({ id: index, label: <div className=\"btn btn-primary\" >{this.props.intl.formatMessage({ id: \"IDS_NOT\" })}</div>, children: notarray })\r\n            }\r\n            if (groupobject.hasOwnProperty('button_not_button_or')) {\r\n                children = []\r\n                let rulesList = groupobject['button_not_button_or']\r\n                rulesList.map((rule, index) => {\r\n                    children.push(\r\n                        {\r\n                            id: index, label: <>{(rule['stestname'].label) + \" -> \" + (this.props.intl.formatMessage({ id: \"IDS_WITH\" })) + \" -> \" +\r\n                                (rule['orderresulttype'].label) + \" -> \" +\r\n                                (rule['ssymbolname'].label) + \" -> \" + (rule['orderresulttype'].value === 1 ? rule['ndiagnosticcasecode'].label :\r\n                                    rule['ngradecode'].label)\r\n\r\n                            }</>\r\n                        }\r\n                    )\r\n                })\r\n                let notarray = [{ id: index, label: <div className=\"btn btn-primary\" >{this.props.intl.formatMessage({ id: \"IDS_OR\" })}</div>, children: children }]\r\n                parent.push({ id: index, label: <div className=\"btn btn-primary\" >{this.props.intl.formatMessage({ id: \"IDS_NOT\" })}</div>, children: notarray })\r\n            }\r\n            // if (groupListJoins.length > 0) {\r\n            //     if (groupListJoins[index]) {\r\n            //         if (groupListJoins[index].hasOwnProperty('button_or') &&\r\n            //             groupListJoins[index]['button_or'] === true) {\r\n            //             grandparent.push({ id: index, label: 'button_or', children: parent })\r\n            //         }\r\n            //         if (groupListJoins[index].hasOwnProperty('button_and') &&\r\n            //             groupListJoins[index]['button_and'] === true) {\r\n            //             grandparent.push({ id: index, label: 'button_and', children: parent })\r\n            //         }\r\n            //     }\r\n            // }\r\n        })\r\n\r\n        if (groupListJoins !== undefined) {\r\n            // groupListJoins.map((join, index) => {\r\n            //     if (index > 0) {\r\n            //         if (parent[index].hasOwnProperty('children')) {\r\n            //             return parent[index]['children'].map(rule => {\r\n            //                 return rule['label'] = <div //className=\"rulesengine-btn-primary\"\r\n            //                     //style={{ color: \"#fff\", background: this.generateRandomColor(),borderRadius: '0.25rem' }} \r\n            //                     >{rule['label']}</div>;\r\n            //             })\r\n            //         }\r\n            //     }\r\n            // })\r\n            groupListJoins.map((join, index) => {\r\n                let parentjoins = []\r\n                if (join.hasOwnProperty('button_or') && join['button_or'] === true) {\r\n                    let notarray = []\r\n                    parentjoins.push(parent[index])\r\n                    parentjoins.push(parent[index + 1])\r\n                    if (join.hasOwnProperty('button_not') && join['button_not'] === true) {\r\n                        notarray = [{\r\n                            id: index, label: <div className=\"btn btn-primary\" >\r\n                                {this.props.intl.formatMessage({ id: \"IDS_OR\" })} </div>// 'button_or'\r\n                            , children: parentjoins\r\n                        }]\r\n                        grandparent.push({\r\n                            id: index, label: <div className=\"btn btn-primary\" >\r\n                                {this.props.intl.formatMessage({ id: \"IDS_NOT\" })} </div>// 'button_or'\r\n                            , children: notarray\r\n                        })\r\n                    }\r\n                    else {\r\n                        grandparent.push({\r\n                            id: index, label: <div className=\"btn btn-primary\" >\r\n                                {this.props.intl.formatMessage({ id: \"IDS_OR\" })} </div>// 'button_or'\r\n                            , children: parentjoins\r\n                        })\r\n                    }\r\n                }\r\n                if (join.hasOwnProperty('button_and') && join['button_and'] === true) {\r\n                    let notarray = []\r\n                    parentjoins.push(parent[index])\r\n                    parentjoins.push(parent[index + 1])\r\n                    if (join.hasOwnProperty('button_not') && join['button_not'] === true) {\r\n                        notarray = [{\r\n                            id: index, label: <div className=\"btn btn-primary\" >\r\n                                {this.props.intl.formatMessage({ id: \"IDS_AND\" })} </div>// 'button_or'\r\n                            , children: parentjoins\r\n                        }]\r\n                        grandparent.push({\r\n                            id: index, label: <div className=\"btn btn-primary\" >\r\n                                {this.props.intl.formatMessage({ id: \"IDS_NOT\" })} </div>// 'button_or'\r\n                            , children: notarray\r\n                        })\r\n                    }\r\n                    else {\r\n                        grandparent.push({\r\n                            id: index, label: <div className=\"btn btn-primary\" >{this.props.intl.formatMessage({ id: \"IDS_AND\" })}</div>// 'button_and'\r\n                            , children: parentjoins\r\n                        })\r\n                    }\r\n                }\r\n            })\r\n        }\r\n\r\n\r\n\r\n        // groupListJoins.map((join, index) => {\r\n        //     if (join.hasOwnProperty('button_or') && join['button_or'] === true) {\r\n        //         parent = []\r\n        //         groupList.map((groupobject, index) => {\r\n        //             if (groupobject.hasOwnProperty('button_or')) {\r\n        //                 children = []\r\n        //                 let rulesList = groupobject['button_or']\r\n        //                 rulesList.map((rule, index) => {\r\n        //                     children.push({ id: index, label: rule['stestname'].label })\r\n        //                 })\r\n        //                 return parent.push({ id: index, label: 'button_or', children: children })\r\n        //             }\r\n        //         })\r\n        //         grandparent.push({ id: index, label: 'button_or', children: parent })\r\n        //     }\r\n        //     if (join.hasOwnProperty('button_and') && join['button_and'] === true) {\r\n        //         parent = []\r\n        //         groupList.map((groupobject, index) => {\r\n        //             if (groupobject.hasOwnProperty('button_and')) {\r\n        //                 children = []\r\n        //                 let rulesList = groupobject['button_and']\r\n        //                 rulesList.map((rule, index) => {\r\n        //                     children.push({ id: index, label: rule['stestname'].label })\r\n        //                 })\r\n        //                 return parent.push({ id: index, label: 'button_and', children: children })\r\n        //             }\r\n        //         })\r\n        //         grandparent.push({ id: index, label: 'button_and', children: parent })\r\n        //     }\r\n        // })\r\n\r\n        object = grandparent.length > 0 ?\r\n            {\r\n                id: 0,\r\n                label: <div className=\"btn btn-primary\" >{this.props.Login.masterData.SelectedRulesEngine.srulename} </div>,\r\n                children: grandparent\r\n            }\r\n            : {\r\n                id: 0,\r\n                label: <div className=\"btn btn-primary\" >{this.props.Login.masterData.SelectedRulesEngine.srulename} </div>,\r\n                children: parent\r\n            }\r\n        return object\r\n    }\r\n    // ruleflowobject() {\r\n    //     let object = {}\r\n    //     let groupList = this.props.Login.masterData.SelectedRulesEngine['jsondata']\r\n    //     let groupListJoins = this.props.Login.masterData.SelectedRulesEngine['jsonuidata'] &&\r\n    //         this.props.Login.masterData.SelectedRulesEngine['jsonuidata']['groupListJoins']\r\n    //     let child = []\r\n    //     let children = []\r\n    //     // let parentor = []\r\n    //     // let parentand = []\r\n    //     let parent = []\r\n    //     groupList.map((ruleslist, index) => {\r\n\r\n    //         if (ruleslist.hasOwnProperty('button_or')) {\r\n    //             children = []\r\n    //             let rules = ruleslist['button_or']\r\n    //             // if (groupListJoins.length > 0) {\r\n    //             //     rules.map((rule, index) => {\r\n    //             //         children.push({ id: index + 1, label: rule['stestname'].label })\r\n    //             //     })\r\n    //             // }\r\n    //             // else {\r\n    //             rules.map((rule, index) => {\r\n    //                 children.push({ id: index + 1, label: rule['stestname'].label })\r\n    //             })\r\n    //             parent.push({ id: index + 1, label: 'button_or', children: children })\r\n    //             //  }\r\n    //         }\r\n    //         if (ruleslist.hasOwnProperty('button_and')) {\r\n    //             children = []\r\n    //             let rules = ruleslist['button_and']\r\n    //             // if (groupListJoins.length > 0) {\r\n    //             //     rules.map((rule, index) => {\r\n    //             //         children.push({ id: index + 1, label: rule['stestname'].label })\r\n    //             //     })\r\n    //             // }\r\n    //             // else {\r\n    //             rules.map((rule, index) => {\r\n    //                 children.push({ id: index + 1, label: rule['stestname'].label })\r\n    //             })\r\n    //             parent.push({ id: index + 1, label: 'button_and', children: children })\r\n    //             //  }\r\n    //         }\r\n    //     })\r\n    //     groupListJoins.map((join, index) => {\r\n    //         if (join.hasOwnProperty('button_or') && join['button_or'] === true) {\r\n    //             child.push({ id: index + 1, label: 'button_or', children: parent })\r\n    //         }\r\n    //         if (join.hasOwnProperty('button_and') && join['button_and'] === true) {\r\n    //             child.push({ id: index + 1, label: 'button_and', children: parent })\r\n    //         }\r\n    //     })\r\n\r\n    //     object =  child.length > 0 ?\r\n    //      {\r\n    //         id: 0,\r\n    //         label: 'root',\r\n    //         children: child\r\n    //     } \r\n    //     : {\r\n    //         id: 0,\r\n    //         label: 'root',\r\n    //         children: parent\r\n    //     }\r\n    //     // object = {\r\n    //     //     id: 0,\r\n    //     //     label: 'button_or',\r\n    //     //     children: [{\r\n    //     //         id: 1,\r\n    //     //         label: 'Complete Blood Count(Complete Blood Count)'\r\n    //     //     }, {\r\n    //     //         id: 2,\r\n    //     //         label: 'H-A1C-Pre(kk-2)'\r\n    //     //     }]\r\n    //     // }\r\n    //     console.log('view object:',JSON.stringify(object))\r\n    //     return object\r\n    // }\r\n    createGroupRulesview() {\r\n        let indexCount = 0;\r\n        let design = [];\r\n        let groupList = this.props.Login.masterData.SelectedRulesEngine['jsondata'].hasOwnProperty('button_and') ?\r\n            this.props.Login.masterData.SelectedRulesEngine['jsondata']['button_and'] : this.props.Login.masterData.SelectedRulesEngine['jsondata']['button_or']\r\n        let selectedRecordview = {}\r\n        let selectedRecordviewflag = {}\r\n        selectedRecordview[\"groupList\"] = []\r\n        groupList.map((ruleslist, index) => {\r\n\r\n            if (ruleslist.hasOwnProperty('button_or')) {\r\n                selectedRecordview[\"groupList\"][index] = ruleslist[\"button_or\"]\r\n                selectedRecordview[\"groupList\"][index][\"button_or\"] = true\r\n            }\r\n            if (ruleslist.hasOwnProperty('button_and')) {\r\n                selectedRecordview[\"groupList\"][index] = ruleslist[\"button_and\"]\r\n                selectedRecordview[\"groupList\"][index][\"button_and\"] = true\r\n            }\r\n        })\r\n\r\n        if (this.props.Login.masterData.SelectedRulesEngine['jsondata'].hasOwnProperty('button_and')) {\r\n            selectedRecordviewflag[\"groupList\"] = {}\r\n            selectedRecordviewflag[\"groupList\"][\"button_and\"] = true\r\n        }\r\n        else {\r\n            selectedRecordviewflag[\"groupList\"] = {}\r\n            selectedRecordviewflag[\"groupList\"][\"button_or\"] = true\r\n        }\r\n        console.log('props.addGroupList->', this.props.Login.masterData.SelectedRulesEngine['jsonuidata'].addGroupList)\r\n        this.props.Login.masterData.SelectedRulesEngine['jsonuidata'].addGroupList.length > 0 && this.props.Login.masterData.SelectedRulesEngine['jsonuidata'].addGroupList.map((items, index) => {\r\n            if (items > -1) {\r\n                indexCount = indexCount + 1;\r\n            };\r\n            design.push(\r\n                <>\r\n                    {items > -1 ?\r\n                        <>  {index > 0 ? selectedRecordviewflag[\"groupList\"]['button_or'] === true ?\r\n                            <ContionalButton type=\"button\" className={\"builder-btn-primary\"} marginLeft={0}\r\n                            >\r\n                                <span><FormattedMessage id=\"IDS_OR\" defaultMessage=\"Or\" /></span>\r\n                            </ContionalButton> :\r\n                            selectedRecordviewflag[\"groupList\"]['button_and'] === true ?\r\n                                <ContionalButton type=\"button\" className={\"builder-btn-primary\"} marginLeft={0}\r\n                                >\r\n                                    <span><FormattedMessage id=\"IDS_AND\" defaultMessage=\"And\" /></span>\r\n                                </ContionalButton> : \"\" : \"\"} <BuilderBorder  >\r\n                                <>\r\n                                    {this.createRulesView(items, index, selectedRecordview)}\r\n                                </>\r\n\r\n                            </BuilderBorder>\r\n                        </> : <></>\r\n                    }\r\n\r\n\r\n                </>)\r\n        });\r\n\r\n        return design;\r\n    }\r\n    changePropertyViewClose = (id) => {\r\n\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                activeTabIndex: undefined,\r\n                activeTestTab: undefined,\r\n                activeTabId: id\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n    componentWillUnmount() {\r\n        let activeTabIndex = this.props.Login.activeTabIndex\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                activeTabIndex: undefined\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n    componentDidUpdate(previousProps) {\r\n\r\n        let { filterData, activeTabIndex, activeTabId, selectedcombo } = this.state;\r\n        if (this.props.Login.queryData !== previousProps.Login.queryData) {\r\n            this.setState({\r\n                data: this.props.Login.queryData,\r\n                dataResult: process(this.props.Login.queryData, this.state.dataState)\r\n            });\r\n        }\r\n        if (this.props.Login.needoutsource !== previousProps.Login.needoutsource) {\r\n            this.setState({\r\n                needoutsource: this.props.Login.needoutsource\r\n            });\r\n        }\r\n\r\n        if (this.props.Login.activeTabIndex !== previousProps.Login.activeTabIndex || this.props.Login.masterData !== previousProps.Login.masterData) {\r\n            if (this.props.Login.activeTabIndex !== previousProps.Login.activeTabIndex) {\r\n                activeTabIndex = this.props.Login.activeTabIndex;\r\n                activeTabId = this.props.Login.activeTabId;\r\n                this.setState({\r\n                    activeTabIndex,\r\n                    activeTabId\r\n                });\r\n            }\r\n        }\r\n        if (this.props.Login.masterData.ProductCategory !== previousProps.Login.masterData.ProductCategory) {\r\n            const ProductCategory = constructOptionList(this.props.Login.masterData.ProductCategory || [], \"nproductcatcode\",\r\n                \"sproductcatname\", undefined, undefined, undefined);\r\n            let ProductCategoryList = ProductCategory.get(\"OptionList\");\r\n            this.setState({\r\n                ProductCategoryList\r\n            });\r\n        }\r\n\r\n        if (this.props.Login.masterData.queryDataMain !== previousProps.Login.masterData.queryDataMain) {\r\n            if (this.props.Login.masterData.queryDataMain !== undefined) {\r\n                this.setState({\r\n                    dataMainList: this.props.Login.masterData.queryDataMain,\r\n                    dataResultMain: process(this.props.Login.masterData.queryDataMain === null ? [] : this.props.Login.masterData.queryDataMain, this.state.dataStateMain)\r\n                });\r\n            }\r\n        }\r\n        if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\r\n            this.setState({ selectedRecord: this.props.Login.selectedRecord });\r\n        }\r\n        if (this.props.Login.masterData.queryTypeCode !== previousProps.Login.masterData.queryTypeCode) {\r\n            filterData = this.generateBreadCrumData();\r\n            this.setState({ filterData });\r\n        }\r\n        if (this.props.Login.masterData.SelectedProductCategory !== previousProps.Login.masterData.SelectedProductCategory) {\r\n            if (this.props.Login.masterData.SelectedProductCategory) {\r\n                const ProductCategory = constructOptionList(this.props.Login.masterData.ProductCategory || [], \"nproductcatcode\",\r\n                    \"sproductcatname\", undefined, undefined, undefined);\r\n                let ProductCategoryList = ProductCategory.get(\"OptionList\");\r\n                let nproductcatcode = this.props.Login.masterData.SelectedProductCategory.nproductcatcode\r\n                selectedcombo['nproductcatcode'] = ProductCategoryList.filter(x => { return x.value === nproductcatcode })[0]\r\n                filterData = this.generateBreadCrumData();\r\n                this.setState({ filterData, selectedcombo });\r\n            }\r\n            else {\r\n                filterData = this.generateBreadCrumData();\r\n                this.setState({ filterData });\r\n            }\r\n\r\n\r\n        }\r\n        // if(this.props.Login.testInitiateSiteTab&&this.props.Login.testInitiateSiteTab.length>0)\r\n        // {\r\n        //     const updateInfo = {\r\n        //         typeName: DEFAULT_RETURN,\r\n        //         data: {\r\n        //             testInitiateSiteTab: []\r\n        //         }\r\n        //     }\r\n        //     this.props.updateStore(updateInfo);\r\n        // }\r\n        if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\r\n            const userRoleControlRights = [];\r\n            if (this.props.Login.userRoleControlRights) {\r\n                this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item =>\r\n                    userRoleControlRights.push(item.ncontrolcode))\r\n            }\r\n            const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode)\r\n            this.setState({ controlMap, userRoleControlRights });\r\n        }\r\n\r\n    }\r\n    generateBreadCrumData() {\r\n        const breadCrumbData = [];\r\n        if (this.props.Login.masterData && this.props.Login.masterData.queryTypeCode) {\r\n\r\n            const item = this.state.queryType.filter(item => item.nquerytypecode === this.props.Login.masterData.queryTypeCode);\r\n            breadCrumbData.push(\r\n                {\r\n                    \"label\": \"IDS_QUERYTYPE\",\r\n                    \"value\": this.props.Login.masterData.queryTypeCode ?\r\n                        item[0].squerytypename : \"\"\r\n                }\r\n            );\r\n        }\r\n        if (this.props.Login.masterData && this.props.Login.masterData.SelectedProductCategory) {\r\n            breadCrumbData.push(\r\n                {\r\n                    \"label\": \"IDS_SAMPLECATEGORY\",\r\n                    \"value\": this.props.Login.masterData.SelectedProductCategory ?\r\n                        this.props.Login.masterData.SelectedProductCategory.sproductcatname : \"\"\r\n                }\r\n            );\r\n        }\r\n        else {\r\n            breadCrumbData.push(\r\n                {\r\n                    \"label\": \"IDS_SAMPLECATEGORY\",\r\n                    \"value\": \"NA\"\r\n                }\r\n            );\r\n        }\r\n        return breadCrumbData;\r\n    }\r\n    fieldsForGrid() {\r\n        return this.props.Login.activeTabIndex == 1 ? [\r\n            { \"idsName\": \"IDS_FROMSITE\", \"dataField\": \"sfromsitename\", \"width\": \"200px\" },\r\n            { \"idsName\": \"IDS_TOSITE\", \"dataField\": \"stositename\", \"width\": \"200px\" }\r\n        ] : [\r\n            { \"idsName\": \"IDS_COMMENTSUBTYPE\", \"dataField\": \"scommentsubtype\", \"width\": \"200px\" },\r\n            this.props.Login.activeTabIndex == 2 ? { \"idsName\": \"IDS_TESTCOMMENTS\", \"dataField\": \"spredefinedname\", \"width\": \"200px\" } :\r\n                { \"idsName\": \"IDS_REPORTCOMMENTS\", \"dataField\": \"spredefinedname\", \"width\": \"200px\" }\r\n        ];\r\n    }\r\n\r\n    render() {\r\n\r\n        const addId = this.state.controlMap.has(\"Add Rules Engine\") && this.state.controlMap.get(\"Add Rules Engine\").ncontrolcode;\r\n        const editId = this.state.controlMap.has(\"Edit Rules Engine\") && this.state.controlMap.get(\"Edit Rules Engine\").ncontrolcode;\r\n        const deleteId = this.state.controlMap.has(\"Delete Rules Engine\") && this.state.controlMap.get(\"Delete Rules Engine\").ncontrolcode;\r\n        const breadCrumbData = this.state.filterData || [];\r\n\r\n        this.props.Login.masterData.RulesEngine = this.props.Login.masterData.RulesEngine &&\r\n            sortData(this.props.Login.masterData.RulesEngine, \"descending\", \"ntransactionrulesenginecode\")\r\n        this.props.Login.masterData.searchedData = this.props.Login.masterData.searchedData &&\r\n            sortData(this.props.Login.masterData.searchedData, \"descending\", \"ntransactionrulesenginecode\")\r\n        let gridColumnListMain = [];\r\n\r\n        if (this.props.Login.masterData && this.props.Login.masterData.columnList && this.props.Login.masterData.columnList.length > 0) {\r\n            this.props.Login.masterData.columnList.forEach(item => {\r\n                gridColumnListMain.push({ idsName: item.items.displayname[this.props.Login.userInfo.slanguagetypecode], dataField: item.items.stestname, width: '200px' })\r\n            })\r\n        }\r\n        let selectedQueryType = [];\r\n        if (this.props.Login.masterData && this.props.Login.masterData.queryTypeCode) {\r\n\r\n            selectedQueryType = this.state.queryType.filter(item => item.nquerytypecode === this.props.Login.masterData.queryTypeCode);\r\n        }\r\n        const filterParam = {\r\n            inputListName: \"RulesEngine\", selectedObject: \"SelectedRulesEngine\", primaryKeyField: \"ntransactionrulesenginecode\",\r\n            fetchUrl: \"rulesengine/getSelectedRulesEngine\", fecthInputObject: {\r\n                userinfo: this.props.Login.userInfo,\r\n                nproductcatcode: this.props.Login.masterData.SelectedProductCategory && this.props.Login.masterData.SelectedProductCategory.nproductcatcode\r\n            },\r\n\r\n            masterData: this.props.Login.masterData,\r\n            searchFieldList: [\"srulename\", \"stransdisplaystatus\"]\r\n        };\r\n\r\n        return (\r\n            <>\r\n                <ListWrapper className=\"client-listing-wrap mtop-fixed-breadcrumb fixed_breadcrumd\">\r\n                    {breadCrumbData.length > 0 ?\r\n                        <Affix top={53}>\r\n                            <BreadcrumbComponent breadCrumbItem={breadCrumbData} />\r\n                        </Affix> : \"\"\r\n                    }\r\n                    <Row noGutters={true}>\r\n                        <Col md=\"4\">\r\n                            <ListMaster\r\n                                masterData={this.props.Login.masterData || []}\r\n                                screenName={this.props.intl.formatMessage({ id: \"IDS_QUERYBUILDER\" })}\r\n                                masterList={this.props.Login.masterData.searchedData || this.props.Login.masterData.RulesEngine}\r\n                                getMasterDetail={(param) => this.props.getSelectedRulesEngine(param, this.props.Login.userInfo, this.props.Login.masterData)}\r\n                                selectedMaster={this.props.Login.masterData.SelectedRulesEngine || this.props.Login.SelectedRulesEngine}\r\n                                primaryKeyField=\"ntransactionrulesenginecode\"\r\n                                mainField=\"srulename\"\r\n                                firstField=\"stransdisplaystatus\"\r\n                                //secondField={\"stransdisplaystatus\"}\r\n                                filterColumnData={this.props.filterColumnData}\r\n                                filterParam={filterParam}\r\n                                userRoleControlRights={this.state.userRoleControlRights}\r\n                                addId={addId}\r\n                                searchRef={this.searchRef}\r\n                                reloadData={this.reloadData}\r\n                                openModal={this.getRulesEngineAdd}\r\n                                // openModal={() => this.props.getSQLQueryComboService(\"\", \"create\", \"nsqlquerycode\", null,\r\n                                //     this.props.Login.masterData, this.props.Login.userInfo,\r\n                                //     this.props.Login.masterData.SelectedQueryType.nquerytypecode,                                   \r\n                                //     addId)} \r\n                                //{() => this.props.addTest(\"create\", selectedTest, userInfo, addId, this.state.nfilterTestCategory)} Already commented\r\n                                needAccordianFilter={false}\r\n                                // skip={this.state.skip}\r\n                                // take={this.state.take}\r\n                                handlePageChange={this.handlePageChange}\r\n                                showFilterIcon={true}\r\n                                showFilter={this.props.Login.showFilter}\r\n                                openFilter={this.openFilter}\r\n                                closeFilter={this.closeFilter}\r\n                                onFilterSubmit={this.onFilterSubmit}\r\n                                showBuildQuery={false}\r\n                                builderData={this.getRulesEngineAdd}\r\n                                filterComponent={[\r\n                                    {\r\n                                        \"IDS_QUERYTYPEFILTER\":\r\n                                            <RuleEngineQueryTypeFilter\r\n                                                queryType={this.state.ProductCategoryList || []}\r\n                                                selectedRecord={this.state.selectedcombo || {}}\r\n                                                onComboChange={this.onComboChange}\r\n                                                filterQueryType={selectedQueryType[0]}\r\n                                            />\r\n                                    }\r\n                                ]}\r\n                            />\r\n                        </Col>\r\n                        <Col md=\"8\">\r\n                            <ProductList className=\"panel-main-content\">\r\n                                {this.props.Login.masterData.SelectedRulesEngine && this.props.Login.masterData.SelectedRulesEngine ?\r\n                                    <Card className=\"border-0\">\r\n                                        <Card.Header>\r\n                                            <Card.Title className=\"product-title-main\">{this.props.Login.masterData.SelectedRulesEngine.srulename}</Card.Title>\r\n                                            <Card.Subtitle>\r\n                                                <ProductList className=\"d-flex product-category icon-group-wrap\">\r\n                                                    <h2 className=\"product-title-sub flex-grow-1\">\r\n                                                        <MediaLabel >\r\n                                                            {this.props.intl.formatMessage({ id: \"IDS_STATUS\" })} :\r\n                                                        </MediaLabel>\r\n                                                        <MediaLabel\r\n                                                            className={`btn btn-outlined ${this.props.Login.masterData.SelectedRulesEngine.ntransactionstatus === transactionStatus.APPROVED ? \"outline-success\" :\r\n                                                                this.props.Login.masterData.SelectedRulesEngine.ntransactionstatus === transactionStatus.RETIRED ? \"outline-danger\" :\r\n                                                                    \"outline-secondary\"} btn-sm ml-3`}\r\n                                                        // className={`btn btn-outlined  outline-success  btn-sm ml-3`}\r\n                                                        >\r\n                                                            {this.props.Login.masterData.SelectedRulesEngine.stransdisplaystatus}\r\n                                                        </MediaLabel>\r\n\r\n                                                    </h2>\r\n\r\n                                                    <div className=\"d-inline \">\r\n                                                        <Nav.Link className=\"btn btn-circle outline-grey mr-2\" href=\"#\"\r\n                                                            data-tip={this.props.intl.formatMessage({ id: \"IDS_EDIT\" })}\r\n                                                            //  data-for=\"tooltip_list_wrap\"\r\n                                                            onClick={(e) =>\r\n                                                                this.props.getEditRulesEngine(\r\n                                                                    \"update\", this.props.Login.masterData, editId, this.props.Login.userInfo\r\n                                                                )\r\n                                                            }\r\n                                                        >\r\n                                                            <FontAwesomeIcon icon={faPencilAlt}\r\n                                                                title={this.props.intl.formatMessage({ id: \"IDS_EDIT\" })} />\r\n                                                        </Nav.Link>\r\n                                                        <Nav.Link className=\"btn btn-circle outline-grey mr-2 action-icons-wrap\" href=\"\"\r\n                                                            data-tip={this.props.intl.formatMessage({ id: \"IDS_DELETE\" })}\r\n                                                            //   data-for=\"tooltip_list_wrap\"\r\n                                                            onClick={() => this.ConfirmDelete(deleteId)}\r\n                                                        >\r\n                                                            <FontAwesomeIcon icon={faTrashAlt} />\r\n\r\n                                                        </Nav.Link>\r\n                                                        <Nav.Link className=\"btn btn-circle outline-grey mr-2\"\r\n                                                            data-tip={this.props.intl.formatMessage({ id: \"IDS_APPROVE\" })}\r\n                                                            // hidden={props.userRoleControlRights.indexOf(approveVersionId) === -1}\r\n                                                            onClick={() => this.approveVersion(this.props.Login.masterData, 1)}\r\n                                                        >\r\n                                                            <FontAwesomeIcon icon={faThumbsUp} />\r\n                                                        </Nav.Link>\r\n                                                        <Nav.Link className=\"btn btn-circle outline-grey mr-2\"\r\n                                                            data-tip={this.props.intl.formatMessage({ id: \"IDS_RETIRE\" })}\r\n                                                            // hidden={props.userRoleControlRights.indexOf(approveVersionId) === -1}\r\n                                                            onClick={() => this.approveVersion(this.props.Login.masterData, 2)}\r\n                                                        >\r\n                                                            <Reject className=\"custom_icons\" width=\"20\" height=\"20\" />\r\n                                                        </Nav.Link>\r\n\r\n                                                        <Nav.Link className=\"btn btn-circle outline-grey mr-2\"\r\n                                                            data-tip={this.props.intl.formatMessage({ id: \"IDS_VIEW\" })}\r\n                                                            // hidden={props.userRoleControlRights.indexOf(approveVersionId) === -1}\r\n                                                            onClick={() => this.openflowview()}\r\n                                                        >\r\n                                                            <FontAwesomeIcon icon={faEye} />\r\n                                                        </Nav.Link>\r\n\r\n                                                    </div>\r\n                                                </ProductList>\r\n                                            </Card.Subtitle>\r\n\r\n                                        </Card.Header>\r\n\r\n                                    </Card>\r\n                                    : \"\"}\r\n                                {this.props.Login.masterData.SelectedRulesEngine &&\r\n                                    <CustomTab tabDetail={this.tabDetail()} onTabChange={this.onTabChange} />}\r\n                            </ProductList>\r\n                        </Col>\r\n                    </Row>\r\n                </ListWrapper>\r\n\r\n                {\r\n                    this.props.Login.openPortalModal &&\r\n                    <PortalModalSlideout\r\n                        show={this.props.Login.openPortalModal}\r\n                        closeModal={this.closePortalModal}\r\n                        screenName={this.props.Login.screenName}\r\n                        handleSaveClick={this.save}\r\n                        addComponent={\r\n                            (this.props.Login.operation === 'update' ? this.state.selectedRecord['groupList'] : true) &&\r\n                            <AddRule\r\n                                productCategoryList={this.state.ProductCategoryList || []}\r\n                                selectedRecord={this.state.selectedRecord || {}}\r\n                                databaseTableList={this.props.Login.databaseTableList}\r\n                                tableColumnList={this.state.tableColumnList}\r\n                                foreignTableList={this.state.foreignTableList || []}\r\n                                foreignTableColumnList={this.props.Login.foreignTableColumnList || []}\r\n                                // validationData={validationData}\r\n                                count={this.state.count}\r\n                                foreignTableCount={this.state.foreignTableCount}\r\n                                sqlQuery={this.state.sqlQuery}\r\n                                // viewMasterListByRule={this.props.Login.viewMasterListByRule&&this.props.Login.viewMasterListByRule.filter((x,i)=>{return x.value===this.props.Login.testInitiateTests[i]}) || []}\r\n                                userInfo={this.props.Login.userInfo}\r\n                                onInputChange={this.onInputChange}\r\n                                deleteRule={this.deleteRule}\r\n                                clearRule={this.clearRule}\r\n                                resetRule={this.resetRule}\r\n                                onSymbolChange={this.onSymbolChange}\r\n                                // onForeignTableChange={this.onForeignTableChange}\r\n                                // addJoinTable={this.addJoinTable} \r\n\r\n                                onRuleChange={this.onRuleChange}\r\n\r\n                                addRule={this.addRule}\r\n                                addTest={this.addTest}\r\n                                onConditionClick={this.onConditionClick}\r\n                                onMasterDataChange={this.onMasterDataChange}\r\n                                databaseviewList={this.props.Login.databaseviewList}\r\n                                addRuleList={this.props.Login.addRuleList || []}\r\n                                rulesOption={this.props.Login.rulesOption}\r\n                                //viewColumnListByRule={this.props.Login.viewColumnListByRule || []}\r\n                                // viewColumnListByRule={this.props.Login.viewColumnListByRule && this.props.Login.viewColumnListByRule.filter((x, i) => { return x.value === this.props.Login.testInitiateTests[i] }) || []}\r\n                                viewColumnListByRule={this.props.Login.viewColumnListByRule && this.viewColumnListByRule(this.props.Login.viewColumnListByRule) //this.props.Login.viewColumnListByRule && this.props.Login.viewColumnListByRule\r\n                                }\r\n                                masterdata={this.props.Login.masterdata}\r\n                                switchRecord={this.state.switchRecord}\r\n                                data={this.state.data}\r\n                                dataResult={this.state.dataResult || []}\r\n                                dataState={this.state.dataState}\r\n                                dataStateChange={this.dataStateChange}\r\n                                userRoleControlRights={this.state.userRoleControlRights}\r\n                                gridColumnList={this.props.Login.gridColumnList || []}\r\n                                queryType={this.state.queryType}\r\n                                addAggregateList={this.props.Login.addAggregateList || []}\r\n                                addOrderbyList={this.props.Login.addOrderbyList || []}\r\n                                addGroup={this.addGroup}\r\n                                addGroupList={this.props.Login.addGroupList || []}\r\n                                onFilterComboChange={this.onFilterComboChange}\r\n                                selectFields={this.props.Login.selectFields || []}\r\n                                SelectedProductCategory={this.props.Login.masterData.SelectedProductCategory}\r\n                                DiagnosticCaseList={this.props.Login.DiagnosticCaseList}\r\n                                GradeList={this.props.Login.GradeList}\r\n                                siteList={this.props.Login.siteList}\r\n                                resultTypeList={this.props.Login.resultTypeList}\r\n                                isResultorOrderType={this.state.isResultorOrderType}\r\n                                optionsByRule={this.state.optionsByRule || this.props.Login.DiagnosticCaseList}\r\n                                //sideNavDetail={this.sideNavDetail}\r\n                                changePropertyView={this.changePropertyView}\r\n                                splitChangeWidthPercentage={this.state.splitChangeWidthPercentage}\r\n                                activeTabIndex={this.props.Login.activeTabIndex}\r\n                                enablePropertyPopup={this.state.enablePropertyPopup}\r\n                                propertyPopupWidth={this.state.propertyPopupWidth}\r\n                                controlMap={this.state.controlMap}\r\n                                sectionDataState={this.state.sectionDataState}\r\n                                masterData={this.props.Login.masterData}\r\n                                intl={this.props.intl}\r\n                                addOutcomeList={this.props.Login.addOutcomeList && this.props.Login.addOutcomeList || []}\r\n                                deleteOutcome={this.deleteOutcome}\r\n                                onmodalComboChange={this.onmodalComboChange}\r\n                                openModalPopup={this.props.Login.openModalPopup}\r\n                                closeModalShow={this.closeModalShow}\r\n                                modalsaveClick={this.modalsaveClick}\r\n                                getOutcomeDetails={this.getOutcomeDetails}\r\n                                addModalSite={this.addModalSite}\r\n                                action={this.props.Login.action}\r\n                                deletModalSite={this.deletModalSite}\r\n                                deleteModalTest={this.deleteModalTest}\r\n                                activeTestTab={this.props.Login.activeTestTab}\r\n                                testcomments={this.props.Login.testcomments}\r\n                                reportcomments={this.props.Login.reportcomments}\r\n                                addComments={this.addComments}\r\n                                CommentType={this.props.Login.CommentType}\r\n                                CommentSubType={this.props.Login.CommentSubType}\r\n                                isneedsgeneralcomments={this.state.isneedsgeneralcomments}\r\n                                predefcomments={this.props.Login.predefcomments}\r\n                                needoutsource={this.state.selectedRecord['needoutsource'] && this.state.selectedRecord['needoutsource'] === 3 ? true : false}\r\n                                openmodalsavePopup={this.props.Login.openmodalsavePopup}\r\n                                save={this.save}\r\n                                dataStateObject={this.state.dataStateObject}\r\n                                paneSizeChange={this.paneSizeChange}\r\n                            />\r\n                        }\r\n                    />\r\n                }\r\n\r\n                {\r\n                    this.props.Login.openModal &&\r\n                    <SlideOutModal show={this.props.Login.openModal}\r\n                        closeModal={this.closeModal}\r\n                        className={\"wide-popup\"}\r\n                        inputParam={this.props.Login.inputParam}\r\n                        screenName={this.props.intl.formatMessage({ id: \"IDS_VIEWRULE\" })}\r\n                        hideSave={true}\r\n                        size={'xl'}\r\n                        selectedRecord={this.state.selectedRecord || {}}\r\n                        addComponent={\r\n                            this.props.Login.masterData.SelectedRulesEngine &&\r\n                            <Row>\r\n                                <Col md={12}>\r\n                                    <OrgTree\r\n                                        data={this.ruleflowobject()}\r\n                                        horizontal={true}\r\n                                        collapsable={true}\r\n                                        expandAll={true}\r\n                                        labelClassName={\"ruletree\"}\r\n                                    //labelWidth={50}\r\n                                    />\r\n                                    {/* </BuilderBorder> */}\r\n\r\n                                </Col>\r\n                            </Row>\r\n                        }\r\n                    />\r\n                }\r\n            </>\r\n        );\r\n    }\r\n\r\n    closeModalShow = () => {\r\n        let openModalPopup = this.props.Login.openModalPopup;\r\n        let selectedRecord = this.props.Login.selectedRecord || {};\r\n        selectedRecord['srulename'] = \"\"\r\n        openModalPopup = false;\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { openModalPopup, selectedRecord }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n\r\n    reloadData = () => {\r\n        this.searchRef.current.value = \"\";\r\n        const inputParam = {\r\n            inputData: { \"userinfo\": this.props.Login.userInfo, nproductcatcode: this.props.Login.masterData.SelectedProductCategory.nproductcatcode },\r\n            classUrl: \"rulesengine\",\r\n            methodUrl: \"RulesEngine\",\r\n            displayName: \"IDS_RULESENGINE\",\r\n\r\n            userInfo: this.props.Login.userInfo\r\n        };\r\n\r\n        this.props.callService(inputParam);\r\n    }\r\n\r\n    onsavevalidation = (selectedRecord) => {\r\n        let grouplist = selectedRecord[\"groupList\"]\r\n        let hasAll = true;\r\n        for (var i = 0; i < grouplist.length; i++) {\r\n            let rules = grouplist[i]\r\n            for (var j = 0; j < rules.length; j++) {\r\n                let props = []\r\n                if (rules[j][\"orderresulttype\"] && rules[j][\"orderresulttype\"].value === 1) {\r\n                    props = [\"stestname\", \"ssymbolname\", \"orderresulttype\", \"ndiagnosticcasecode\"];\r\n                }\r\n                else {\r\n                    props = [\"stestname\", \"ssymbolname\", \"orderresulttype\", \"ngradecode\"];\r\n                }\r\n                hasAll = props.every(prop => rules[j].hasOwnProperty(prop));\r\n                if (hasAll === false) {\r\n                    break;\r\n                }\r\n            }\r\n            if (hasAll === false) {\r\n                break;\r\n            }\r\n        }\r\n        return hasAll\r\n    }\r\n    save = () => {\r\n        let inputData = [];\r\n        let siteObject = this.props.Login.siteObject || {};\r\n        let testCommentObject = this.props.Login.testCommentObject || {};\r\n        let reportCommentObject = this.props.Login.reportCommentObject || {};\r\n\r\n        let testInitiateTests = this.props.Login.testInitiateTests || [];\r\n        let testCommentsTests = this.props.Login.testCommentsTests || [];\r\n        let reportCommentsTests = this.props.Login.reportCommentsTests || [];\r\n\r\n        const { selectedRecord } = this.state;\r\n        let rules = []\r\n        if (selectedRecord[\"nproductcatcode\"]) {\r\n            if (selectedRecord[\"groupList\"].length > 0) {\r\n                if (this.onsavevalidation(selectedRecord)) {\r\n                    if (selectedRecord[\"srulename\"] && selectedRecord[\"srulename\"] !== \"\" && this.props.Login.action !== 'update'\r\n                        && this.props.Login.action !== 'IDS_ADDTESTCOMMENTS' && this.props.Login.action !== 'IDS_ADDREPORTCOMMENTS'\r\n                        && this.props.Login.action !== 'IDS_ADDTEST' && this.props.Login.action !== 'IDS_ADDSITE'\r\n                    ) {\r\n\r\n                        if (selectedRecord[\"groupList\"]) {\r\n                            let groupList = [];\r\n                            let outcomeList = {};\r\n                            groupList = selectedRecord[\"groupList\"];\r\n\r\n                            outcomeList['groupList'] = groupList\r\n                            outcomeList['addGroupList'] = this.props.Login.addGroupList\r\n                            outcomeList['testInitiateTests'] = this.props.Login.testInitiateTests && this.props.Login.testInitiateTests\r\n                            outcomeList['testCommentsTests'] = this.props.Login.testCommentsTests && this.props.Login.testCommentsTests\r\n                            outcomeList['reportCommentsTests'] = this.props.Login.reportCommentsTests && this.props.Login.reportCommentsTests\r\n                            outcomeList['siteObject'] = this.props.Login.siteObject && this.props.Login.siteObject\r\n                            outcomeList['testCommentObject'] = this.props.Login.testCommentObject && this.props.Login.testCommentObject\r\n                            outcomeList['reportCommentObject'] = this.props.Login.reportCommentObject && this.props.Login.reportCommentObject\r\n                            outcomeList['testInitiateSiteTab'] = this.props.Login.testInitiateSiteTab && this.props.Login.testInitiateSiteTab\r\n                            outcomeList['testCommentsTestsTab'] = this.props.Login.testCommentsTestsTab && this.props.Login.testCommentsTestsTab\r\n                            outcomeList['reportCommentsTestsTab'] = this.props.Login.reportCommentsTestsTab && this.props.Login.reportCommentsTestsTab\r\n                            outcomeList['nproductcatcode'] = selectedRecord['nproductcatcode']\r\n                            outcomeList['groupListJoins'] = selectedRecord['groupListJoins']\r\n\r\n                            let ruleEngineLayout = []\r\n                            let ruleEngineLayoutObject = []\r\n                            let groupRuleObject = {}\r\n                            groupList.map((List) => {\r\n                                if (List.hasOwnProperty('button_or') && List['button_or'] === true) {\r\n                                    if (List.hasOwnProperty('button_not') && List['button_not'] === true) {\r\n                                        groupRuleObject['button_not_button_or'] = List\r\n                                    }\r\n                                    else {\r\n                                        groupRuleObject['button_or'] = List\r\n                                    }\r\n                                    // groupRuleObject['button_or'] = List\r\n                                    ruleEngineLayout.push(groupRuleObject)\r\n                                    groupRuleObject = {}\r\n                                }\r\n                                if (List.hasOwnProperty('button_and') && List['button_and'] === true) {\r\n                                    if (List.hasOwnProperty('button_not') && List['button_not'] === true) {\r\n                                        groupRuleObject['button_not_button_and'] = List\r\n                                    }\r\n                                    else {\r\n                                        groupRuleObject['button_and'] = List\r\n                                    }\r\n                                    //  groupRuleObject['button_and'] = List\r\n                                    ruleEngineLayout.push(groupRuleObject)\r\n                                    groupRuleObject = {}\r\n                                }\r\n                            })\r\n                            ruleEngineLayoutObject = groupList.hasOwnProperty('button_or') && groupList['button_or'] === true ?\r\n                                {\r\n                                    'button_or': ruleEngineLayout\r\n                                } : {\r\n                                    'button_and': ruleEngineLayout\r\n                                }\r\n                            console.log('savelist--->', JSON.stringify(ruleEngineLayoutObject))\r\n                            //  inputData['nproductcatcode'] = this.props.Login.masterData.SelectedProductCategory.nproductcatcode\r\n                            inputData['nproductcatcode'] = selectedRecord['nproductcatcode'].value\r\n                            inputData['srulename'] = selectedRecord['srulename']\r\n                            inputData['outcomeList'] = JSON.stringify(outcomeList)\r\n                            inputData['jsondata'] = JSON.stringify(ruleEngineLayout)\r\n                            inputData['userinfo'] = this.props.Login.userInfo\r\n                            if (this.props.Login.operation === 'update') {\r\n                                inputData['ntransactionrulesenginecode'] = this.props.Login.masterData.SelectedRulesEngine['ntransactionrulesenginecode']\r\n                            }\r\n                            const inputParam = {\r\n                                classUrl: \"rulesengine\",\r\n                                methodUrl: \"RulesEngine\",\r\n                                displayName: this.props.Login.inputParam.displayName,\r\n                                inputData: inputData,\r\n                                operation: this.props.Login.operation === 'create' ? 'create' : 'update'\r\n                            }\r\n                            this.props.crudMaster(inputParam, this.props.Login.masterData, \"openPortalModal\");\r\n                        }\r\n                        else {\r\n                            toast.info(this.props.intl.formatMessage({ id: \"IDS_PLEASEADDRULE\" }));\r\n                        }\r\n\r\n                    }\r\n                    else {\r\n                        selectedRecord['srulename'] = selectedRecord['srulenamecopy'] || \"\"\r\n                        const updateInfo = {\r\n                            typeName: DEFAULT_RETURN,\r\n                            data: { openModalPopup: true, selectedRecord, action: \"IDS_SAVERULEMODAL\", openmodalsavePopup: true }\r\n                        }\r\n                        this.props.updateStore(updateInfo);\r\n                        //   toast.info(this.props.intl.formatMessage({ id: \"IDS_ENTERRULESENGINENAME\" }));\r\n\r\n                    }\r\n                } else {\r\n                    toast.info(this.props.intl.formatMessage({ id: \"IDS_COMPLETETHERULETOSAVE\" }));\r\n                }\r\n            }\r\n            else {\r\n                toast.info(this.props.intl.formatMessage({ id: \"IDS_ATLEASTADDONERULE\" }));\r\n            }\r\n        }\r\n        else {\r\n            toast.info(this.props.intl.formatMessage({ id: \"IDS_SELECTPRODUCTCATEGORY\" }));\r\n\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n    static getDerivedStateFromProps(props, state) {\r\n\r\n        if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\r\n            toast.warn(props.Login.masterStatus);\r\n            props.Login.masterStatus = \"\";\r\n        }\r\n\r\n        if (props.Login.error !== state.error) {\r\n            toast.error(props.Login.error)\r\n            props.Login.error = \"\";\r\n        }\r\n        return null;\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    // confirmDelete = (ncontrolCode) => {\r\n    //     this.confirmMessage.confirm(\"deleteMessage\",\r\n    //         this.props.intl.formatMessage({ id: \"IDS_DELETE\" }),\r\n    //         this.props.intl.formatMessage({ id: \"IDS_DEFAULTCONFIRMMSG\" }),\r\n    //         this.props.intl.formatMessage({ id: \"IDS_OK\" }),\r\n    //         this.props.intl.formatMessage({ id: \"IDS_CANCEL\" }),\r\n    //         () => this.deleteQB(\"delete\", ncontrolCode));\r\n    // };\r\n\r\n    openFilter = () => {\r\n        let showFilter = !this.props.Login.showFilter\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { showFilter }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    closeFilter = () => {\r\n\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { showFilter: false }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    onFilterSubmit = () => {\r\n\r\n        this.searchRef.current.value = \"\";\r\n\r\n        if (this.state.selectedcombo[\"nproductcatcode\"]) {\r\n            console.log(this.state.selectedcombo[\"nproductcatcode\"].value);\r\n        }\r\n        const nproductcatcode = this.state.selectedcombo[\"nproductcatcode\"] ?\r\n            this.state.selectedcombo[\"nproductcatcode\"].value : this.props.Login.masterData.queryTypeCode;\r\n\r\n        this.props.getRulesEngine(nproductcatcode, this.props.Login.userInfo, this.props.Login.masterData);\r\n\r\n\r\n    }\r\n\r\n    onFilterComboChange = (comboData, fieldName) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        selectedRecord[fieldName] = comboData;\r\n        //  this.generateFilterQuery(selectedRecord);\r\n    }\r\n\r\n\r\n    onComboChange = (comboData, fieldName) => {\r\n        const selectedcombo = this.state.selectedcombo || {};\r\n        selectedcombo[fieldName] = comboData;\r\n\r\n        this.setState({ selectedcombo });\r\n    }\r\n\r\n    onOutcomeChange = (comboData, index) => {\r\n        const { selectedRecord } = this.state;\r\n        selectedRecord[\"outComeList\"] = []\r\n        selectedRecord[\"outComeList\"][index] = []\r\n        selectedRecord[\"outComeList\"][index] = comboData;\r\n        if (selectedRecord[\"outComeList\"][index]) {\r\n            this.setState({\r\n                selectedRecord\r\n            });\r\n        }\r\n    }\r\n\r\n\r\n    onRuleChange = (comboData, fieldName, groupIndex, index) => {\r\n        const { selectedRecord } = this.state;\r\n        this.clearSelectedRule(selectedRecord, index);\r\n        const sqlQuery = this.props.Login.sqlQuery;\r\n        const oldselectedRecord = selectedRecord;\r\n        selectedRecord[\"groupList\"][groupIndex][index][fieldName] = comboData;\r\n        const tableData = comboData.item;\r\n\r\n        if (selectedRecord[\"groupList\"][groupIndex][index][fieldName]) {\r\n            this.setState({\r\n                selectedRecord,\r\n                groupIndex,\r\n                index\r\n            });\r\n        }\r\n    }\r\n\r\n    onMasterDataChange = (comboData, fieldName, groupIndex, index) => {\r\n        const { selectedRecord } = this.state;\r\n        let isResultorOrderType = [];\r\n        let optionsByRule = [];\r\n        if (this.state.optionsByRule && this.state.optionsByRule.length > 0) {\r\n            optionsByRule = this.state.optionsByRule\r\n        }\r\n        else {\r\n            optionsByRule[groupIndex] = [];\r\n            optionsByRule[groupIndex][index] = [];\r\n        }\r\n        if (this.state.isResultorOrderType && this.state.isResultorOrderType.length > 0) {\r\n            isResultorOrderType = this.state.isResultorOrderType\r\n        }\r\n        else {\r\n            isResultorOrderType[groupIndex] = [];\r\n            isResultorOrderType[groupIndex][index] = [];\r\n        }\r\n        selectedRecord[\"groupList\"][groupIndex][index][fieldName] = comboData;\r\n        if (fieldName !== 'ndiagnosticcasecode' && fieldName !== 'ngradecode') {\r\n            if (isResultorOrderType[groupIndex] === undefined) {\r\n                isResultorOrderType[groupIndex] = [];\r\n                isResultorOrderType[groupIndex][index] = [];\r\n            }\r\n            isResultorOrderType[groupIndex][index] = comboData.value\r\n            if (optionsByRule[groupIndex] === undefined) {\r\n                optionsByRule[groupIndex] = [];\r\n                optionsByRule[groupIndex][index] = [];\r\n            }\r\n            if (isResultorOrderType[groupIndex][index] === 1) {\r\n                delete selectedRecord[\"groupList\"][groupIndex][index]['ndiagnosticcasecode']\r\n                optionsByRule[groupIndex][index] = this.props.Login.DiagnosticCaseList\r\n            }\r\n            else {\r\n                delete selectedRecord[\"groupList\"][groupIndex][index]['ngradecode']\r\n                optionsByRule[groupIndex][index] = this.props.Login.GradeList\r\n            }\r\n            this.setState({ selectedRecord, isResultorOrderType, optionsByRule });\r\n        }\r\n\r\n        else {\r\n\r\n            this.setState({ selectedRecord });\r\n        }\r\n    }\r\n    addRule = (type, groupIndex) => {\r\n        const { selectedRecord } = this.state;\r\n        let viewColumnListByRule = this.props.Login.viewColumnListByRule || [];\r\n        const addGroupList = this.props.Login.addGroupList || [];\r\n        const arrayLength = addGroupList[groupIndex];\r\n        addGroupList[groupIndex] = arrayLength + 1;\r\n        selectedRecord[\"groupList\"][groupIndex][arrayLength] = {};\r\n        viewColumnListByRule = this.props.Login.viewColumnList || this.props.Login.databaseviewList;;\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                addGroupList,\r\n                viewColumnListByRule\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n    paneSizeChange = (d) => {\r\n        this.setState({\r\n            splitChangeWidthPercentage: d\r\n        })\r\n    }\r\n    addTest = () => {\r\n        let openModalPopup = this.props.Login.openModalPopup;\r\n        let action = this.props.Login.action;\r\n        let selectedRecord = this.props.Login.selectedRecord || {}\r\n        delete selectedRecord['ntestparametercode']\r\n        delete selectedRecord['nsampletestcommentscode']\r\n        delete selectedRecord['ncommentsubtypecode']\r\n        delete selectedRecord['ncommenttypecode']\r\n        delete selectedRecord['sgeneralcomments']\r\n        delete selectedRecord['needoutsource']\r\n        if (this.props.Login.addGroupList.length > 0) {\r\n            action = \"IDS_ADDTEST\"\r\n            openModalPopup = true;\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    openModalPopup,\r\n                    action,\r\n                    selectedRecord,\r\n                    openmodalsavePopup: false\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        } else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_PLEASEADDRULETOADDOUTCOME\" }));\r\n        }\r\n\r\n    }\r\n    addComments = () => {\r\n        let openModalPopup = this.props.Login.openModalPopup;\r\n        let action = this.props.Login.action;\r\n        let selectedParameter = this.props.Login.masterData.selectedParameter || [];\r\n        let testparameter = this.props.Login.viewColumnListByRule || [];\r\n        let selectedRecord = this.props.Login.selectedRecord || {}\r\n        selectedRecord['ntestparametercode'] = {}\r\n        selectedRecord['ntestparametercode'] = testparameter.filter(x => { return x.value === selectedParameter.ntestparametercode })[0]\r\n\r\n        delete selectedRecord['nsampletestcommentscode']\r\n        delete selectedRecord['ncommentsubtypecode']\r\n        delete selectedRecord['ncommenttypecode']\r\n        delete selectedRecord['sgeneralcomments']\r\n\r\n\r\n        if (this.props.Login.addGroupList.length > 0) {\r\n            if (this.props.Login.activeTabIndex === 2) {\r\n                action = \"IDS_ADDTESTCOMMENTS\"\r\n            }\r\n            else {\r\n                action = \"IDS_ADDREPORTCOMMENTS\"\r\n            }\r\n            openModalPopup = true;\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    openModalPopup,\r\n                    action,\r\n                    selectedRecord,\r\n                    openmodalsavePopup: false\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        } else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_PLEASEADDRULETOADDOUTCOME\" }));\r\n        }\r\n\r\n    }\r\n    addModalSite = () => {\r\n        let openModalPopup = this.props.Login.openModalPopup;\r\n\r\n        let selectedParameter = this.props.Login.masterData.selectedParameter || [];\r\n        let testparameter = this.props.Login.viewColumnListByRule || [];\r\n        let selectedRecord = this.props.Login.selectedRecord || {}\r\n        selectedRecord['ntestparametercode'] = {}\r\n        selectedRecord['ntestparametercode'] = testparameter.filter(x => { return x.value === selectedParameter.ntestparametercode })[0]\r\n\r\n\r\n        openModalPopup = true;\r\n        let action = this.props.Login.action;\r\n        action = \"IDS_ADDSITE\"\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                selectedRecord,\r\n                openModalPopup,\r\n                action,\r\n                openmodalsavePopup: false\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n    modalsaveClick = () => {\r\n        let needoutsource = this.props.Login.needoutsource || {};\r\n        let selectedRecord = this.state.selectedRecord || {};\r\n        let masterData = this.props.Login.masterData || {};\r\n        let testInitiateTests = this.props.Login.testInitiateTests || [];\r\n        let testCommentsTests = this.props.Login.testCommentsTests || [];\r\n        let reportCommentsTests = this.props.Login.reportCommentsTests || [];\r\n\r\n        let siteObject = this.props.Login.siteObject || {};\r\n        let testCommentObject = this.props.Login.testCommentObject || {};\r\n        let reportCommentObject = this.props.Login.reportCommentObject || {};\r\n\r\n\r\n        let testInitiateTestsTemp = [];\r\n        let testCommentsTestsTemp = [];\r\n        let reportCommentsTestsTemp = [];\r\n        let testInitiateSiteTemp = [];\r\n\r\n        let testCommentsTestsTab = this.props.Login.testCommentsTestsTab || [];\r\n        let reportCommentsTestsTab = this.props.Login.reportCommentsTestsTab || [];\r\n        let testInitiateSiteTab = this.props.Login.testInitiateSiteTab || [];\r\n\r\n        let testInitiateTestOptions = this.props.Login.testInitiateTestOptions || [];\r\n        let testCommentsTestOptions = this.props.Login.testCommentsTestOptions || [];\r\n        let reportCommentsTestOptions = this.props.Login.reportCommentsTestOptions || [];\r\n\r\n\r\n        let testInitiateTestdeletedOptions = this.props.Login.testInitiateTestdeletedOptions || [];\r\n        let testCommentsTestdeletedOptions = this.props.Login.testCommentsTestdeletedOptions || [];\r\n        let reportCommentsTestdeletedOptions = this.props.Login.reportCommentsTestdeletedOptions || [];\r\n\r\n        let updateInfo = {}\r\n        if (this.props.Login.action === 'IDS_ADDTEST') {\r\n            let npkAtestparametercode = 0;\r\n            let npkBtestparametercode = 0;\r\n            let npkCtestparametercode = 0;\r\n            if (this.props.Login.activeTabIndex === 1) {\r\n                let isduplicate = {}\r\n                isduplicate = testInitiateTests.filter(x => x.ntestparametercode ===\r\n                    selectedRecord['ntestparametercode'].item['ntestparametercode'])\r\n                if (isduplicate.length === 0) {\r\n                    masterData['testParameter'] = {}\r\n                    npkAtestparametercode = this.props.Login.npkAtestparametercode || 0;\r\n                    npkAtestparametercode++;\r\n                    selectedRecord['ntestparametercode'].item['npkAtestparametercode'] = npkAtestparametercode\r\n                    testInitiateTests.push(selectedRecord['ntestparametercode'].item);\r\n                    masterData['testParameter'] = sortData(testInitiateTests, 'descending', 'npkAtestparametercode')\r\n                    masterData['selectedParameter'] = selectedRecord['ntestparametercode'].item\r\n                    delete selectedRecord['ntestparametercode']\r\n\r\n                }\r\n                else {\r\n                    return toast.warn(this.props.intl.formatMessage({ id: \"IDS_ALREADYEXISTS\" }));\r\n                }\r\n\r\n            }\r\n            if (this.props.Login.activeTabIndex === 2) {\r\n                let isduplicate = {}\r\n                isduplicate = testCommentsTests.filter(x => x.ntestparametercode ===\r\n                    selectedRecord['ntestparametercode'].item['ntestparametercode'])\r\n                if (isduplicate.length === 0) {\r\n                    masterData['testParameterComments'] = {}\r\n                    npkBtestparametercode = this.props.Login.npkBtestparametercode || 0;\r\n                    npkBtestparametercode++;\r\n                    selectedRecord['ntestparametercode'].item['npkBtestparametercode'] = npkAtestparametercode\r\n                    testCommentsTests.push(selectedRecord['ntestparametercode'].item);\r\n                    masterData['testParameterComments'] = sortData(testCommentsTests, 'descending', 'npkBtestparametercode')\r\n                    masterData['selectedParameter'] = selectedRecord['ntestparametercode'].item\r\n                    delete selectedRecord['ntestparametercode']\r\n                }\r\n                else {\r\n                    return toast.warn(this.props.intl.formatMessage({ id: \"IDS_ALREADYEXISTS\" }));\r\n                }\r\n            }\r\n            if (this.props.Login.activeTabIndex === 3) {\r\n                let isduplicate = {}\r\n                isduplicate = reportCommentsTests.filter(x => x.ntestparametercode ===\r\n                    selectedRecord['ntestparametercode'].item['ntestparametercode'])\r\n                if (isduplicate.length === 0) {\r\n                    masterData['testParameterreportComments'] = {}\r\n                    npkCtestparametercode = this.props.Login.npkCtestparametercode || 0;\r\n                    npkCtestparametercode++;\r\n                    selectedRecord['ntestparametercode'].item['npkCtestparametercode'] = npkCtestparametercode\r\n                    reportCommentsTests.push(selectedRecord['ntestparametercode'].item);\r\n                    masterData['testParameterreportComments'] = sortData(reportCommentsTests, 'descending', 'npkCtestparametercode')\r\n                    masterData['selectedParameter'] = selectedRecord['ntestparametercode'].item\r\n                    delete selectedRecord['ntestparametercode']\r\n                }\r\n                else {\r\n                    return toast.warn(this.props.intl.formatMessage({ id: \"IDS_ALREADYEXISTS\" }));\r\n                }\r\n            }\r\n            updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    openModalPopup: false,\r\n                    masterData,\r\n                    testInitiateTests,\r\n                    testCommentsTests,\r\n                    reportCommentsTests,\r\n                    npkAtestparametercode,\r\n                    npkBtestparametercode,\r\n                    npkCtestparametercode,\r\n                    testInitiateTestOptions,\r\n                    testInitiateTestdeletedOptions,\r\n                    selectedRecord\r\n                }\r\n            }\r\n        }\r\n        if (selectedRecord['nsampletestcommentscode'] || selectedRecord['sgeneralcomments']//this.props.Login.action === 'IDS_ADDTESTCOMMENTS'\r\n        ) {\r\n            // let isduplicate = {}\r\n            // let spredefinedname = selectedRecord['nsampletestcommentscode'].label\r\n            // let arraycheck = testCommentObject[masterData.selectedParameter.ntestparametercode]\r\n            // if (arraycheck) {\r\n            //     isduplicate = arraycheck.filter(x => x.spredefinedname === spredefinedname)\r\n            // }\r\n            // if (arraycheck !== undefined ? isduplicate.length > 0 ? false : true : true) {\r\n            masterData['testComments'] = {}\r\n            let npKAsampletestcommentscode = 0;\r\n\r\n            if (testCommentObject.hasOwnProperty(masterData.selectedParameter.ntestparametercode)) {\r\n                npKAsampletestcommentscode = this.props.Login.npKAsampletestcommentscode;\r\n                npKAsampletestcommentscode++;\r\n                let object = {\r\n                    npKAsampletestcommentscode: npKAsampletestcommentscode,\r\n                    ncommentsubtypecode: selectedRecord['ncommentsubtypecode']['value'],\r\n                    scommentsubtype: selectedRecord['ncommentsubtypecode']['label'],\r\n                    ncommenttypecode: selectedRecord['ncommenttypecode']['value'],\r\n                    scommenttype: selectedRecord['ncommenttypecode']['label'],\r\n                    nsampletestcommentscode: selectedRecord['nsampletestcommentscode'] ? selectedRecord['nsampletestcommentscode'].value : -1,\r\n                    spredefinedname: selectedRecord['nsampletestcommentscode'] ? selectedRecord['nsampletestcommentscode'].label : \"-\",\r\n                    sgeneralcomments: selectedRecord['sgeneralcomments'] ? selectedRecord['sgeneralcomments'] : \"-\"\r\n                    , stestparametersynonym: masterData.selectedParameter.stestparametersynonym,\r\n                    ntestparametercode: masterData.selectedParameter.ntestparametercode\r\n                }\r\n                testCommentsTestsTemp = testCommentObject[masterData.selectedParameter.ntestparametercode]\r\n                testCommentsTestsTemp.push(object);\r\n                testCommentsTestsTab.push(object);\r\n                testCommentObject[masterData.selectedParameter.ntestparametercode] = sortData(testCommentsTestsTemp, 'descending', 'npKAsampletestcommentscode')\r\n                delete selectedRecord['nsampletestcommentscode']\r\n                delete selectedRecord['ncommentsubtypecode']\r\n                delete selectedRecord['ncommenttypecode']\r\n                delete selectedRecord['sgeneralcomments']\r\n            }\r\n            else {\r\n                npKAsampletestcommentscode++;\r\n                let object = {\r\n                    npKAsampletestcommentscode: npKAsampletestcommentscode,\r\n                    ncommentsubtypecode: selectedRecord['ncommentsubtypecode']['value'],\r\n                    scommentsubtype: selectedRecord['ncommentsubtypecode']['label'],\r\n                    ncommenttypecode: selectedRecord['ncommenttypecode']['value'],\r\n                    scommenttype: selectedRecord['ncommenttypecode']['label'],\r\n                    nsampletestcommentscode: selectedRecord['nsampletestcommentscode'] ? selectedRecord['nsampletestcommentscode'].value : -1,\r\n                    spredefinedname: selectedRecord['nsampletestcommentscode'] ? selectedRecord['nsampletestcommentscode'].label : \"-\",\r\n                    sgeneralcomments: selectedRecord['sgeneralcomments'] ? selectedRecord['sgeneralcomments'] : \"-\"\r\n                    , stestparametersynonym: masterData.selectedParameter.stestparametersynonym,\r\n                    ntestparametercode: masterData.selectedParameter.ntestparametercode\r\n                }\r\n                testCommentsTestsTemp.push(object);\r\n                testCommentsTestsTab.push(object);\r\n                testCommentObject[masterData.selectedParameter.ntestparametercode] = sortData(testCommentsTestsTemp, 'descending', 'npKAsampletestcommentscode')\r\n                delete selectedRecord['nsampletestcommentscode']\r\n                delete selectedRecord['ncommentsubtypecode']\r\n                delete selectedRecord['ncommenttypecode']\r\n                delete selectedRecord['sgeneralcomments']\r\n            }\r\n            masterData['testComments'] = testCommentObject\r\n            updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    openModalPopup: false,\r\n                    masterData,\r\n                    testCommentObject,\r\n                    testCommentsTestsTab,\r\n                    npKAsampletestcommentscode,\r\n                    selectedRecord\r\n                }\r\n            }\r\n            // }\r\n            // else {\r\n            //     toast.warn(this.props.intl.formatMessage({ id: \"IDS_ALREADYEXISTS\" }));\r\n            // }\r\n        }\r\n        // else if (this.props.Login.action === 'IDS_ADDREPORTCOMMENTS') {\r\n        //     let isduplicate = {}\r\n        //     let spredefinedname = selectedRecord['nsampletestcommentscode'].label\r\n        //     let arraycheck = reportCommentObject[masterData.selectedParameter.ntestparametercode]\r\n        //     if (arraycheck) {\r\n        //         isduplicate = arraycheck.filter(x => x.spredefinedname === spredefinedname)\r\n        //     }\r\n        //     if (arraycheck !== undefined ? isduplicate.length > 0 ? false : true : true) {\r\n        //         masterData['reportComments'] = {}\r\n        //         let npKBsampletestcommentscode = 0;\r\n        //         if (reportCommentObject.hasOwnProperty(masterData.selectedParameter.ntestparametercode)) {\r\n        //             npKBsampletestcommentscode = this.props.Login.npKBsampletestcommentscode;\r\n        //             npKBsampletestcommentscode++;\r\n        //             let object = {\r\n        //                 npKBsampletestcommentscode: npKBsampletestcommentscode,\r\n        //                 nsampletestcommentscode: selectedRecord['nsampletestcommentscode'].value,\r\n        //                 spredefinedname: selectedRecord['nsampletestcommentscode'].label,\r\n        //                 scommentsubtype: this.props.Login.reportcomments[0].item.scommentsubtype\r\n        //                 , stestparametersynonym: masterData.selectedParameter.stestparametersynonym, ntestparametercode: masterData.selectedParameter.ntestparametercode\r\n        //             }\r\n        //             reportCommentsTestsTemp = reportCommentObject[masterData.selectedParameter.ntestparametercode]\r\n        //             reportCommentsTestsTemp.push(object);\r\n        //             reportCommentsTestsTab.push(object);\r\n        //             reportCommentObject[masterData.selectedParameter.ntestparametercode] = sortData(reportCommentsTestsTemp, 'descending', 'npKBsampletestcommentscode')\r\n        //             delete selectedRecord['nsampletestcommentscode']\r\n        //         }\r\n        //         else {\r\n        //             npKBsampletestcommentscode++;\r\n        //             let object = {\r\n        //                 npKBsampletestcommentscode: npKBsampletestcommentscode,\r\n        //                 nsampletestcommentscode: selectedRecord['nsampletestcommentscode'].value,\r\n        //                 spredefinedname: selectedRecord['nsampletestcommentscode'].label,\r\n        //                 scommentsubtype: this.props.Login.reportcomments[0].item.scommentsubtype\r\n        //                 , stestparametersynonym: masterData.selectedParameter.stestparametersynonym, ntestparametercode: masterData.selectedParameter.ntestparametercode\r\n        //             }\r\n        //             reportCommentsTestsTemp.push(object);\r\n        //             reportCommentsTestsTab.push(object);\r\n        //             reportCommentObject[masterData.selectedParameter.ntestparametercode] = sortData(reportCommentsTestsTemp, 'descending', 'npKBsampletestcommentscode')\r\n        //             delete selectedRecord['nsampletestcommentscode']\r\n        //         }\r\n        //         masterData['reportComments'] = reportCommentObject\r\n        //         updateInfo = {\r\n        //             typeName: DEFAULT_RETURN,\r\n        //             data: {\r\n        //                 openModalPopup: false,\r\n        //                 masterData,\r\n        //                 reportCommentObject,\r\n        //                 reportCommentsTestsTab,\r\n        //                 npKBsampletestcommentscode,\r\n        //                 selectedRecord\r\n        //             }\r\n        //         }\r\n        //     } else {\r\n        //         toast.warn(this.props.intl.formatMessage({ id: \"IDS_ALREADYEXISTS\" }));\r\n        //     }\r\n        // }\r\n        if (selectedRecord['nfromsitecode'] && selectedRecord['ntositecode']) {\r\n            masterData['testSite'] = {}\r\n            let siteseqnumber = 0;\r\n            if (siteObject.hasOwnProperty(masterData.selectedParameter.ntestparametercode)) {\r\n                siteseqnumber = this.props.Login.siteseqnumber;\r\n                siteseqnumber++;\r\n                let object = {\r\n                    npksitecode: siteseqnumber, sfromsitename: selectedRecord['nfromsitecode'].label, stositename: selectedRecord['ntositecode'].label\r\n                    , stestparametersynonym: masterData.selectedParameter.stestparametersynonym, ntestparametercode: masterData.selectedParameter.ntestparametercode\r\n                }\r\n                testInitiateSiteTemp = siteObject[masterData.selectedParameter.ntestparametercode]\r\n                testInitiateSiteTemp.push(object);\r\n                testInitiateSiteTab.push(object);\r\n                siteObject[masterData.selectedParameter.ntestparametercode] = sortData(testInitiateSiteTemp, 'descending', 'npksitecode')\r\n                delete selectedRecord['ntestparametercode']\r\n                delete selectedRecord['nfromsitecode'];\r\n                delete selectedRecord['ntositecode'];\r\n\r\n            }\r\n            else {\r\n                siteseqnumber++;\r\n                let object = {\r\n                    npksitecode: siteseqnumber, sfromsitename: selectedRecord['nfromsitecode'].label, stositename: selectedRecord['ntositecode'].label\r\n                    , stestparametersynonym: masterData.selectedParameter.stestparametersynonym, ntestparametercode: masterData.selectedParameter.ntestparametercode\r\n                }\r\n                testInitiateSiteTemp.push(object);\r\n                testInitiateSiteTab.push(object);\r\n                siteObject[masterData.selectedParameter.ntestparametercode] = sortData(testInitiateSiteTemp, 'descending', 'npksitecode')\r\n                delete selectedRecord['ntestparametercode']\r\n                delete selectedRecord['nfromsitecode'];\r\n                delete selectedRecord['ntositecode'];\r\n            }\r\n            masterData['testSite'] = siteObject\r\n            updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    openModalPopup: false,\r\n                    masterData,\r\n                    siteObject,\r\n                    siteseqnumber,\r\n                    testInitiateSiteTab\r\n                }\r\n            }\r\n        }\r\n        if (Object.keys(updateInfo).length > 0) {\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n    }\r\n    deletModalSite = (inputparam, action, row) => {\r\n        let temparray = [];\r\n\r\n\r\n        let testInitiateSiteTab = this.props.Login.testInitiateSiteTab\r\n        let testCommentsTestsTab = this.props.Login.testCommentsTestsTab\r\n        let reportCommentsTestsTab = this.props.Login.reportCommentsTestsTab\r\n\r\n\r\n        let siteObject = this.props.Login.siteObject || {};\r\n        let testCommentObject = this.props.Login.testCommentObject || {};\r\n        let reportCommentObject = this.props.Login.reportCommentObject || {};\r\n        let masterData = this.props.Login.masterData || {};\r\n\r\n\r\n\r\n        if (this.props.Login.activeTabIndex === 1) {\r\n            temparray = siteObject[masterData.selectedParameter.ntestparametercode]\r\n            temparray.splice(row['dataIndex'], 1);\r\n            testInitiateSiteTab.splice(row['dataIndex'], 1);\r\n            siteObject[masterData.selectedParameter.ntestparametercode] = temparray\r\n\r\n        }\r\n        if (this.props.Login.activeTabIndex === 2) {\r\n            temparray = testCommentObject[masterData.selectedParameter.ntestparametercode]\r\n            temparray.splice(row['dataIndex'], 1);\r\n            testCommentsTestsTab.splice(row['dataIndex'], 1);\r\n            testCommentObject[masterData.selectedParameter.ntestparametercode] = temparray\r\n        }\r\n        if (this.props.Login.activeTabIndex === 3) {\r\n            temparray = reportCommentObject[masterData.selectedParameter.ntestparametercode]\r\n            temparray.splice(row['dataIndex'], 1);\r\n            reportCommentsTestsTab.splice(row['dataIndex'], 1);\r\n            reportCommentObject[masterData.selectedParameter.ntestparametercode] = temparray\r\n        }\r\n        let updateInfo = {}\r\n        updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                siteObject,\r\n                testCommentObject,\r\n                reportCommentObject,\r\n                testInitiateSiteTab,\r\n                reportCommentsTestsTab,\r\n                testCommentsTestsTab\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n    deleteModalTest = () => {\r\n\r\n        let testInitiateTests = this.props.Login.testInitiateTests || [];\r\n        let testCommentsTests = this.props.Login.testCommentsTests || [];\r\n        let reportCommentsTests = this.props.Login.reportCommentsTests || [];\r\n\r\n        let siteObject = this.props.Login.siteObject || {};\r\n        let testCommentObject = this.props.Login.testCommentObject || {};\r\n        let reportCommentObject = this.props.Login.reportCommentObject || {};\r\n\r\n\r\n        let testInitiateTestOptions = this.props.Login.testInitiateTestOptions || [];\r\n        let testCommentsTestOptions = this.props.Login.testCommentsTestOptions || [];\r\n        let reportCommentsTestOptions = this.props.Login.reportCommentsTestOptions || [];\r\n        let viewColumnListByRule = this.props.Login.viewColumnListByRule || [];\r\n\r\n\r\n        let testInitiateTestdeletedOptions = this.props.Login.testInitiateTestdeletedOptions || [];\r\n        let testCommentsTestdeletedOptions = this.props.Login.testCommentsTestdeletedOptions || [];\r\n        let reportCommentsTestdeletedOptions = this.props.Login.reportCommentsTestdeletedOptions || [];\r\n\r\n        let masterData = this.props.Login.masterData || {};\r\n        let index = 0;\r\n        if (this.props.Login.activeTabIndex === 1) {\r\n            index = this.props.Login.testInitiateTests.findIndex(x => x.ntestparametercode === masterData.selectedParameter.ntestparametercode)\r\n            testInitiateTests.splice(index, 1);\r\n            delete siteObject[masterData.selectedParameter.ntestparametercode]\r\n        }\r\n        if (this.props.Login.activeTabIndex === 2) {\r\n            index = this.props.Login.testCommentsTests.findIndex(x => x.ntestparametercode === masterData.selectedParameter.ntestparametercode)\r\n            testCommentsTests.splice(index, 1);\r\n            delete testCommentObject[masterData.selectedParameter.ntestparametercode]\r\n        }\r\n        if (this.props.Login.activeTabIndex === 3) {\r\n            index = this.props.Login.reportCommentsTests.findIndex(x => x.ntestparametercode === masterData.selectedParameter.ntestparametercode)\r\n            reportCommentsTests.splice(index, 1);\r\n            delete reportCommentObject[masterData.selectedParameter.ntestparametercode]\r\n        }\r\n        let updateInfo = {}\r\n        updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                testInitiateTests,\r\n                siteObject,\r\n                testCommentObject,\r\n                testCommentsTests,\r\n                reportCommentsTests,\r\n                reportCommentObject\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n    onmodalComboChange = (comboData, fieldName) => {\r\n        let selectedRecord = this.state.selectedRecord || {};\r\n        let isneedsgeneralcomments = this.state.isneedsgeneralcomments || {}\r\n\r\n        if (fieldName === 'ncommentsubtypecode') {\r\n            if (comboData.value === 6) {\r\n                isneedsgeneralcomments = true\r\n                delete selectedRecord['nsampletestcommentscode']\r\n            }\r\n            else {\r\n                isneedsgeneralcomments = false\r\n                delete selectedRecord['sgeneralcomments']\r\n\r\n            }\r\n        }\r\n        selectedRecord[fieldName] = comboData;\r\n        this.setState({ selectedRecord, isneedsgeneralcomments });\r\n    }\r\n    getOutcomeDetails = (inputParam) => {\r\n        let masterData = this.props.Login.masterData || {};\r\n        const testParameter = this.state.activeTabIndex === 1 ? inputParam.testParameter : this.state.activeTabIndex === 2 ?\r\n            inputParam.testParameterComments : inputParam.testParameterreportComments;\r\n        masterData['selectedParameter'] = {}\r\n        masterData['selectedParameter'] = testParameter;\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                masterData\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n    handleExpandChange = () => {\r\n        let childListMap1 = this.state.childListMap1 || new Map();\r\n        let childListMap2 = this.state.childListMap2 || new Map();\r\n        let childListMap3 = this.state.childListMap3 || new Map();\r\n        let childListMap = this.state.childListMap || new Map();\r\n        //     let keylst = this.props.Login.masterData.activeTabName === 'IDS_NEEDTESTINITIATE' ?\r\n        //     Object.keys(this.props.Login.masterData.SelectedRulesEngine['jsonuidata']['siteObject']) :\r\n        //     this.props.Login.masterData.activeTabName === 'IDS_TESTCOMMENTS' ?\r\n        //         Object.keys(this.props.Login.masterData.SelectedRulesEngine['jsonuidata']['testCommentObject']) :\r\n        //         Object.keys(this.props.Login.masterData.SelectedRulesEngine['jsonuidata']['reportCommentObject'])\r\n        // keylst.map(key => {\r\n        //     childListMap.set(parseInt(key),\r\n        //         Object.values(this.props.Login.masterData.activeTabName === 'IDS_NEEDTESTINITIATE' ?\r\n        //             this.props.Login.masterData.SelectedRulesEngine['jsonuidata']['siteObject'][key] :\r\n        //             this.props.Login.masterData.activeTabName === 'IDS_TESTCOMMENTS' ?\r\n        //                 this.props.Login.masterData.SelectedRulesEngine['jsonuidata']['testCommentObject'][key] :\r\n        //                 this.props.Login.masterData.SelectedRulesEngine['jsonuidata']['reportCommentObject'][key]));\r\n        // })\r\n        // this.setState({ childListMap })\r\n        if (this.props.Login.masterData.activeTabName === 'IDS_NEEDTESTINITIATE') {\r\n            // let keylst =\r\n            //     Object.keys(this.props.Login.masterData.SelectedRulesEngine['jsonuidata']['siteObject'])\r\n            // keylst.map(key => {\r\n            //     childListMap1.set(parseInt(key),\r\n            //         Object.values(\r\n            //             this.props.Login.masterData.SelectedRulesEngine['jsonuidata']['siteObject'][key]));\r\n            // })\r\n            // this.setState({ childListMap1 })\r\n\r\n\r\n\r\n            let keylst = this.props.Login.masterData.activeTabName === 'IDS_NEEDTESTINITIATE' ?\r\n                Object.keys(this.props.Login.masterData.SelectedRulesEngine['jsonuidata']['siteObject']) :\r\n                this.props.Login.masterData.activeTabName === 'IDS_TESTCOMMENTS' ?\r\n                    Object.keys(this.props.Login.masterData.SelectedRulesEngine['jsonuidata']['testCommentObject']) :\r\n                    Object.keys(this.props.Login.masterData.SelectedRulesEngine['jsonuidata']['reportCommentObject'])\r\n            keylst.map(key => {\r\n                childListMap.set(parseInt(key),\r\n                    Object.values(this.props.Login.masterData.activeTabName === 'IDS_NEEDTESTINITIATE' ?\r\n                        this.props.Login.masterData.SelectedRulesEngine['jsonuidata']['siteObject'][key] :\r\n                        this.props.Login.masterData.activeTabName === 'IDS_TESTCOMMENTS' ?\r\n                            this.props.Login.masterData.SelectedRulesEngine['jsonuidata']['testCommentObject'][key] :\r\n                            this.props.Login.masterData.SelectedRulesEngine['jsonuidata']['reportCommentObject'][key]));\r\n            })\r\n            this.setState({ childListMap })\r\n        }\r\n        if (this.props.Login.masterData.activeTabName === 'IDS_TESTCOMMENTS') {\r\n            let keylst = Object.keys(this.props.Login.masterData.SelectedRulesEngine['jsonuidata']['testCommentObject'])\r\n            keylst.map(key => {\r\n                childListMap2.set(parseInt(key),\r\n                    Object.values(\r\n                        this.props.Login.masterData.SelectedRulesEngine['jsonuidata']['testCommentObject'][key]));\r\n            })\r\n            this.setState({ childListMap2 })\r\n        }\r\n        if (this.props.Login.masterData.activeTabName === 'IDS_REPORTCOMMENTS') {\r\n            let keylst =\r\n                Object.keys(this.props.Login.masterData.SelectedRulesEngine['jsonuidata']['reportCommentObject']);\r\n            keylst.map(key => {\r\n                childListMap3.set(parseInt(key),\r\n                    Object.values(\r\n                        this.props.Login.masterData.SelectedRulesEngine['jsonuidata']['reportCommentObject'][key]));\r\n            })\r\n            this.setState({ childListMap3 })\r\n        }\r\n    }\r\n    onTabChange = (tabProps) => {\r\n        let masterData = this.props.Login.masterData && this.props.Login.masterData\r\n        masterData['activeTabName'] = tabProps.activeTabName;\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { masterData }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n    openflowview = () => {\r\n        let openModal = this.props.Login.openModal\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                openModal: true\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n    tabDetail = () => {\r\n        let masterData = this.props.Login.masterData || {};\r\n        let jsonuidata = this.props.Login.masterData.SelectedRulesEngine && this.props.Login.masterData.SelectedRulesEngine['jsonuidata']\r\n        // let childList = this.props.Login.screenName === 'IDS_NEEDTESTINITIATE' ? jsonuidata && jsonuidata['siteObject'] : jsonuidata \r\n        // && jsonuidata['testCommentObject']\r\n        // let parentlist = this.props.Login.masterData.activeTabName === 'IDS_NEEDTESTINITIATE' ? jsonuidata['siteObject']\r\n        // [masterData.selectedParameter.ntestparametercode] :\r\n        //     this.props.Login.masterData.activeTabName === 'IDS_TESTCOMMENTS' ? jsonuidata['testCommentObject'][masterData.selectedParameter.ntestparametercode]\r\n        //         : jsonuidata['reportCommentObject'][masterData.selectedParameter.ntestparametercode]\r\n        const tabMap = new Map();\r\n        {\r\n            tabMap.set(\"IDS_NEEDTESTINITIATE\",\r\n                <DataGrid\r\n                    key=\"testsectionkey\"\r\n                    primaryKeyField=\"nresultusedmaterialcode\"\r\n                    expandField=\"expanded\"\r\n                    handleExpandChange={this.handleExpandChange}\r\n                    //   dataResult={props.dataResult || []}\r\n\r\n                    dataResult={this.props.Login.masterData.SelectedRulesEngine &&\r\n                        this.props.Login.masterData.SelectedRulesEngine && process(\r\n                            sortData(this.props.Login.masterData.SelectedRulesEngine['jsonuidata']['testInitiateTests'], \"descending\", \"npkAtestparametercode\")\r\n                            || [],\r\n                            this.state.dataStatetestinitiate\r\n                                ? this.state.dataStatetestinitiate : { skip: 0, take: 10 })}\r\n                    //dataState={{ skip: 0, take: 10 }}\r\n                    // dataStateChange={props.dataStateChange}\r\n\r\n                    dataState={this.state.dataStatetestinitiate\r\n                        ? this.state.dataStatetestinitiate : { skip: 0, take: 10 }}\r\n                    // dataStateChange={(event) => this.setState({ sectionDataState: event.dataState })}\r\n                    dataStateChange={this.dataStateChangetestinitiate}\r\n\r\n                    extractedColumnList={[\r\n                        { \"idsName\": \"IDS_TESTNAME\", \"dataField\": \"stestparametersynonym\", \"width\": \"200px\" }\r\n                    ]}\r\n                    controlMap={this.state.controlMap}\r\n                    userRoleControlRights={this.state.userRoleControlRights}\r\n                    pageable={true}\r\n                    //    isActionRequired={true}\r\n                    scrollable={'scrollable'}\r\n                    hideColumnFilter={false}\r\n                    selectedId={0}\r\n                    //hasDynamicColSize={true}\r\n                    //testParameter={testParameter}\r\n                    //deleteRecord={props.deletModalSite}\r\n                    deleteParam={{ operation: \"delete\" }}\r\n                    // actionIcons={[{\r\n                    //     title: this.props.intl.formatMessage({ id: \"IDS_DELETE\" }),\r\n                    //     controlname: \"faTrashAlt\",\r\n                    //     hidden: false,\r\n                    //     objectName: \"delete\",\r\n                    //     onClick: props.deletModalSite\r\n\r\n                    // }]}\r\n                    hasChild={true}\r\n                    childMappingField={'ntestparametercode'}\r\n                    childColumnList={[\r\n\r\n                        { \"idsName\": \"IDS_FROMSITE\", \"dataField\": \"sfromsitename\", \"width\": \"200px\" },\r\n                        { \"idsName\": \"IDS_TOSITE\", \"dataField\": \"stositename\", \"width\": \"200px\" }\r\n                    ]}\r\n                    childList={this.state.childListMap}\r\n                    activeTabName={\"IDS_NEEDTESTINITIATE\"}\r\n                >\r\n                </DataGrid>);\r\n            tabMap.set(\"IDS_TESTCOMMENTS\",\r\n                <DataGrid\r\n                    key=\"testsectionkey\"\r\n                    primaryKeyField=\"nresultusedmaterialcode\"\r\n                    //expandField=\"expanded\"\r\n                    handleExpandChange={this.handleExpandChange}\r\n                    //   dataResult={props.dataResult || []}\r\n\r\n                    dataResult={this.props.Login.masterData.SelectedRulesEngine && process(\r\n                        sortData(this.props.Login.masterData.SelectedRulesEngine['jsonuidata']['testCommentsTestsTab'], \"descending\", \"npkAtestparametercode\")\r\n                        || [],\r\n                        this.state.dataState\r\n                            ? this.state.dataState : { skip: 0, take: 10 })}\r\n                    //dataState={{ skip: 0, take: 10 }}\r\n                    // dataStateChange={props.dataStateChange}\r\n\r\n                    dataState={this.state.dataState\r\n                        ? this.state.dataState : { skip: 0, take: 10 }}\r\n                    // dataStateChange={(event) => this.setState({ sectionDataState: event.dataState })}\r\n                    dataStateChange={this.dataStateChange}\r\n\r\n                    // extractedColumnList={[\r\n                    //     { \"idsName\": \"IDS_TESTNAME\", \"dataField\": \"stestparametersynonym\", \"width\": \"200px\" }\r\n                    // ]}\r\n                    controlMap={this.state.controlMap}\r\n                    userRoleControlRights={this.state.userRoleControlRights}\r\n                    pageable={true}\r\n                    //     isActionRequired={true}\r\n                    scrollable={'scrollable'}\r\n                    hideColumnFilter={false}\r\n                    selectedId={0}\r\n                    //hasDynamicColSize={true}\r\n                    //testParameter={testParameter}\r\n                    //deleteRecord={props.deletModalSite}\r\n                    deleteParam={{ operation: \"delete\" }}\r\n                    // actionIcons={[{\r\n                    //     title: this.props.intl.formatMessage({ id: \"IDS_DELETE\" }),\r\n                    //     controlname: \"faTrashAlt\",\r\n                    //     hidden: false,\r\n                    //     objectName: \"delete\",\r\n                    //     onClick: props.deletModalSite\r\n\r\n                    // }]}\r\n                    //hasChild={true}\r\n                    childMappingField={'ntestparametercode'}\r\n                    // extractedColumnList={[\r\n                    //     { \"idsName\": \"IDS_TESTNAME\", \"dataField\": \"stestparametersynonym\", \"width\": \"200px\" },\r\n                    //     { \"idsName\": \"IDS_TESTCOMMENTS\", \"dataField\": \"spredefinedname\", \"width\": \"200px\" }\r\n                    // ]} \r\n\r\n                    extractedColumnList={[\r\n                        { \"idsName\": \"IDS_TESTNAME\", \"dataField\": \"stestparametersynonym\", \"width\": \"200px\" },\r\n                        { \"idsName\": \"IDS_COMMENTTYPE\", \"dataField\": \"scommenttype\", \"width\": \"200px\" },\r\n                        { \"idsName\": \"IDS_COMMENTSUBTYPE\", \"dataField\": \"scommentsubtype\", \"width\": \"200px\" },\r\n                        { \"idsName\": \"IDS_PREFINEDCOMMENTS\", \"dataField\": \"spredefinedname\", \"width\": \"200px\" },\r\n                        { \"idsName\": \"IDS_GENERALCOMMENTS\", \"dataField\": \"sgeneralcomments\", \"width\": \"200px\" }\r\n                        // props.activeTabIndex == 2 ? { \"idsName\": \"IDS_PREFINEDCOMMENTS\", \"dataField\": \"spredefinedname\", \"width\": \"200px\" } :\r\n                        //     { \"idsName\": \"IDS_REPORTCOMMENTS\", \"dataField\": \"spredefinedname\", \"width\": \"200px\" }\r\n                    ]}\r\n                    childList={this.state.childListMap2 && this.state.childListMap2}\r\n                    activeTabName={\"IDS_TESTCOMMENTS\"}\r\n                >\r\n                </DataGrid>\r\n            );\r\n            // tabMap.set(\"IDS_REPORTCOMMENTS\",\r\n            //     <DataGrid\r\n            //         key=\"testsectionkey\"\r\n            //         primaryKeyField=\"nresultusedmaterialcode\"\r\n            //         //expandField=\"expanded\"\r\n            //         handleExpandChange={this.handleExpandChange}\r\n            //         //   dataResult={props.dataResult || []}\r\n\r\n            //         dataResult={this.props.Login.masterData.SelectedRulesEngine['jsonuidata'] && process(\r\n\r\n            //             sortData(this.props.Login.masterData.SelectedRulesEngine['jsonuidata']['reportCommentsTestsTab'], \"descending\", \"npkBtestparametercode\")\r\n            //             || [],\r\n            //             this.state.dataState\r\n            //                 ? this.state.dataState : { skip: 0, take: 10 })}\r\n            //         //dataState={{ skip: 0, take: 10 }}\r\n            //         // dataStateChange={props.dataStateChange}\r\n\r\n            //         dataState={this.state.dataState\r\n            //             ? this.state.dataState : { skip: 0, take: 10 }}\r\n            //         // dataStateChange={(event) => this.setState({ sectionDataState: event.dataState })}\r\n            //         dataStateChange={this.dataStateChange}\r\n\r\n            //         // extractedColumnList={[\r\n            //         //     { \"idsName\": \"IDS_TESTNAME\", \"dataField\": \"stestparametersynonym\", \"width\": \"200px\" }\r\n            //         // ]}\r\n            //         controlMap={this.state.controlMap}\r\n            //         userRoleControlRights={this.state.userRoleControlRights}\r\n            //         pageable={true}\r\n            //         isActionRequired={true}\r\n            //         scrollable={'scrollable'}\r\n            //         hideColumnFilter={false}\r\n            //         selectedId={0}\r\n            //         //hasDynamicColSize={true}\r\n            //         //testParameter={testParameter}\r\n            //         //deleteRecord={props.deletModalSite}\r\n            //         deleteParam={{ operation: \"delete\" }}\r\n            //         // actionIcons={[{\r\n            //         //     title: this.props.intl.formatMessage({ id: \"IDS_DELETE\" }),\r\n            //         //     controlname: \"faTrashAlt\",\r\n            //         //     hidden: false,\r\n            //         //     objectName: \"delete\",\r\n            //         //     onClick: props.deletModalSite\r\n\r\n            //         // }]}\r\n            //         //  hasChild={true}\r\n            //         childMappingField={'ntestparametercode'}\r\n            //         extractedColumnList={[\r\n            //             { \"idsName\": \"IDS_TESTNAME\", \"dataField\": \"stestparametersynonym\", \"width\": \"200px\" },\r\n            //             { \"idsName\": \"IDS_REPORTCOMMENTS\", \"dataField\": \"spredefinedname\", \"width\": \"200px\" }\r\n            //         ]}\r\n            //         childList={this.state.childListMap3 && this.state.childListMap3}\r\n            //         activeTabName={\"IDS_REPORTCOMMENTS\"}\r\n            //     >\r\n            //     </DataGrid>\r\n            // );\r\n\r\n        }\r\n        return tabMap;\r\n    }\r\n    addGroup = () => {\r\n\r\n        const { selectedRecord } = this.state;\r\n\r\n        var sql1 = jsonSql.build({\r\n            table: 'testmaster',\r\n            alias: 'tm',\r\n            join: [{\r\n                type: 'inner',\r\n                table: 'testcategory',\r\n                alias: 'tc',\r\n                on: { 'tm.ntestcategorycode': 'tc.ntestcategorycode' }\r\n            },\r\n            {\r\n                type: 'inner',\r\n                table: 'transactionstatus',\r\n                alias: 'ts',\r\n                on: { 'tm.naccredited': 'ts.ntranscode' }\r\n            }]\r\n        });\r\n        console.log(sql1.query);\r\n\r\n        var sql21 = jsonSql.build({\r\n            table: 'testmaster',\r\n            alias: 'tm',\r\n            join: [{\r\n                type: 'inner',\r\n                table: 'testcategory',\r\n                alias: 'tc',\r\n                on: { 'tm.ntestcategorycode': 'tc.ntestcategorycode' }\r\n            },\r\n            {\r\n                type: 'right outer',\r\n                table: 'transactionstatus',\r\n                alias: 'ts',\r\n                on: { 'tm.naccredited': 'ts.ntranscode' }\r\n            },\r\n            {\r\n                type: 'left outer',\r\n                table: 'transactionstatus',\r\n                alias: 'ts',\r\n                on: [{ 'tm.naccredited': 'ts.ntranscode' }, { 'tc.naccredited': 'ts.ntranscode' }]\r\n            }],\r\n            condition: [\r\n                { a: { $gt: 1 } },\r\n                { b: { $lt: 10 } }\r\n            ],\r\n            group: ['a', 'b']\r\n        });\r\n        console.log(sql21.query);\r\n\r\n        //  if (selectedRecord[\"sviewname\"]) {\r\n        let viewColumnListByRule = this.props.Login.viewColumnListByRule || [];\r\n        const addGroupList = this.props.Login.addGroupList || [];\r\n        const arrayLength = addGroupList.length;\r\n        addGroupList[arrayLength] = 1;\r\n        // viewColumnListByRule[arrayLength] = [];\r\n        // viewColumnListByRule[arrayLength].push(this.props.Login.viewColumnList);\r\n\r\n\r\n        viewColumnListByRule = this.props.Login.databaseviewList;\r\n        if (arrayLength === 0) {\r\n            selectedRecord[\"groupList\"] = [];\r\n            selectedRecord[\"filtercolumns\"] = this.props.Login.selectFields;\r\n        }\r\n        if (selectedRecord[\"groupListJoins\"] === undefined) {\r\n            selectedRecord[\"groupListJoins\"] = []\r\n        }\r\n        if (selectedRecord[\"groupListJoins\"][arrayLength - 1] === undefined) {\r\n            selectedRecord[\"groupListJoins\"][arrayLength - 1] = {}\r\n        }\r\n        selectedRecord[\"groupListJoins\"][arrayLength - 1][\"button_and\"] = true;\r\n\r\n        selectedRecord[\"groupList\"][arrayLength] = [];\r\n        selectedRecord[\"groupList\"][arrayLength][\"button_and\"] = true;\r\n        selectedRecord[\"groupList\"][arrayLength][0] = {};\r\n\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                addGroupList,\r\n                viewColumnListByRule,\r\n                selectedRecord\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n        // } else {\r\n        //     toast.info(this.props.intl.formatMessage({ id: \"IDS_SELECTVIEW\" }));\r\n        // }\r\n    }\r\n    getRulesEngineAdd = () => {\r\n        if(this.state.selectedcombo['nproductcatcode'])\r\n        {\r\n            const sqlQuery = false;\r\n            this.setState({ selectedRecord: {} });\r\n            this.props.getRulesEngineAdd(this.props.Login.userInfo, sqlQuery, {\r\n                addRuleList: [], addGroupList: [],\r\n                addAggregateList: [], addOrderbyList: []\r\n            }, this.props.Login.masterData);\r\n        }   else {\r\n            toast.info(this.props.intl.formatMessage({ id: \"IDS_SELECTPRODUCTCATEGORY\" }));\r\n\r\n        }\r\n\r\n\r\n    }\r\n    closePortalModal = () => {\r\n        let masterData = this.props.Login.masterData || {};\r\n        // let modalTestsaveddata = this.props.Login.modalTestsaveddata || [];\r\n        // let modalSitesaveddata = this.props.Login.modalSitesaveddata || [];\r\n        // let modalSiteObject = this.props.Login.modalSiteObject || {};\r\n\r\n\r\n        // let testInitiateTests = this.props.Login.testInitiateTests || [];\r\n        // let testCommentsTests = this.props.Login.testCommentsTests || [];\r\n        // let reportCommentsTests = this.props.Login.reportCommentsTests || [];\r\n\r\n        // let siteObject = this.props.Login.siteObject || {};\r\n        // let testCommentObject = this.props.Login.testCommentObject || {};\r\n        // let reportCommentObject = this.props.Login.reportCommentObject || {};\r\n\r\n\r\n\r\n        masterData['testParameter'] = {}\r\n        masterData['testParameterComments'] = {}\r\n        masterData['testParameterreportComments'] = {}\r\n        masterData['testComments'] = {}\r\n        masterData['reportComments'] = {}\r\n        masterData['testSite'] = {}\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: this.props.Login.operation !== 'update' ? {\r\n                activeTabIndex: 0,\r\n                openPortalModal: false, selectedRecord: {}, addRuleList: [], count: 0,\r\n                masterData, testInitiateTests: [], reportCommentsTests: [],\r\n                testCommentsTests: [], siteObject: {}, testCommentObject: {}, reportCommentObject: {},\r\n                npkAtestparametercode: 0,\r\n                npkBtestparametercode: 0,\r\n                npkCtestparametercode: 0,\r\n                testInitiateSiteTab: [],\r\n                testCommentsTestsTab: [],\r\n                reportCommentsTestsTab: []\r\n            } : {\r\n                activeTabIndex: 0,\r\n                openPortalModal: false, selectedRecord: {}, addRuleList: [], count: 0,\r\n                masterData,\r\n                //  testInitiateTests: [], reportCommentsTests: [],\r\n                // testCommentsTests: [], siteObject: {}, testCommentObject: {}, reportCommentObject: {},\r\n                npkAtestparametercode: 0,\r\n                npkBtestparametercode: 0,\r\n                npkCtestparametercode: 0\r\n                // ,\r\n                // testInitiateSiteTab: [],\r\n                // testCommentsTestsTab: [],\r\n                // reportCommentsTestsTab: []\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n    closeModal = () => {\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                openModal: false, selectedRecord: {}\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n    // sideNavDetail = (screenName) => {\r\n    //     return (\r\n    //         <CustomTabs activeKey={this.props.Login.activeTestTab || \"IDS_NEEDTESTINITIATE\"} tabDetail={this.TabDetails()} onTabChange={this.onTabChange} />\r\n\r\n    //     )\r\n    // }\r\n    changePropertyView = (index, event, status) => {\r\n\r\n        let id = false;\r\n        let activeTabIndex\r\n        let activeTabId\r\n        let masterData = this.props.Login.masterData || {};\r\n        let activeTestTab = this.props.Login.activeTestTab || \"\"\r\n        if (window.innerWidth > 992 && event && this.state.enableAutoClick || !event) {\r\n            activeTabIndex = this.state.activeTabIndex !== index ? index : id ? index : false;\r\n        }\r\n        if (window.innerWidth > 992 && event && this.state.enableAutoClick || !event) {\r\n            if (index === 1) {\r\n                activeTestTab = 'IDS_NEEDTESTINITIATE'\r\n                masterData['selectedParameter'] = this.props.Login.testInitiateTests && this.props.Login.testInitiateTests[0]\r\n            }\r\n            if (index === 2) {\r\n                activeTestTab = 'IDS_TESTCOMMENTS'\r\n                masterData['selectedParameter'] = this.props.Login.testCommentsTests && this.props.Login.testCommentsTests[0]\r\n            }\r\n            if (index === 3) {\r\n                activeTestTab = 'IDS_REPORTCOMMENTS'\r\n                masterData['selectedParameter'] = this.props.Login.reportCommentsTests && this.props.Login.reportCommentsTests[0]\r\n            }\r\n\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    activeTabIndex: index === 0 ? 0 : this.state.activeTabIndex !== index ? index : id ? index : false,\r\n                    activeTabId: id,\r\n                    activeTestTab,\r\n                    masterData\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n    }\r\n\r\n\r\n    deleteRule = (groupIndex, index) => {\r\n        let addGroupList = this.props.Login.addGroupList || [];\r\n        const selectedRecord = this.state.selectedRecord;\r\n        addGroupList[groupIndex] = addGroupList[groupIndex] - 1;\r\n\r\n        if (addGroupList[groupIndex] === 0) {\r\n            addGroupList.splice(groupIndex, 1);\r\n            selectedRecord[\"groupList\"].splice(groupIndex, 1);\r\n            if (selectedRecord[\"groupListJoins\"]) {\r\n                selectedRecord[\"groupListJoins\"].splice(groupIndex - 1, 1);\r\n            }\r\n        } else {\r\n            selectedRecord[\"groupList\"][groupIndex].splice(index, 1);\r\n        }\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { addGroupList, selectedRecord }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n    deleteOutcome = (index) => {\r\n        let addOutcomeList = this.props.Login.addOutcomeList;\r\n        addOutcomeList.splice(index, 1);\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { addOutcomeList }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n    clearSelectedRule(selectedRecord, index) {\r\n        selectedRecord[\"sinputname_\" + index] && delete selectedRecord[\"sinputname_\" + index];\r\n        selectedRecord[\"ssymbolname_\" + index] && delete selectedRecord[\"ssymbolname_\" + index];\r\n        selectedRecord[\"snumericinput_\" + index] && delete selectedRecord[\"snumericinput_\" + index];\r\n        selectedRecord[\"columnname_\" + index] && delete selectedRecord[\"columnname_\" + index];\r\n        selectedRecord[\"snumericinputtwo_\" + index] && delete selectedRecord[\"snumericinputtwo_\" + index];\r\n        selectedRecord[\"dateinput_\" + index] && delete selectedRecord[\"dateinput_\" + index];\r\n        selectedRecord[\"dateinputtwo_\" + index] && delete selectedRecord[\"dateinputtwo_\" + index];\r\n    }\r\n\r\n    clearRule = () => {\r\n        const sviewname = this.state.selectedRecord.sviewname || \"\";\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { addRuleList: [], selectedRecord: { sviewname }, sqlQuery: false }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    resetRule = () => {\r\n        let masterData = this.props.Login.masterData || {};\r\n        let selectedRecord = this.state.selectedRecord || {}\r\n        masterData['testParameter'] = {}\r\n        masterData['testParameterComments'] = {}\r\n        masterData['testParameterreportComments'] = {}\r\n        masterData['testComments'] = {}\r\n        masterData['reportComments'] = {}\r\n        masterData['testSite'] = {}\r\n        if (selectedRecord[\"groupList\"]) {\r\n            selectedRecord[\"groupList\"] = []\r\n\r\n        }\r\n        if (selectedRecord[\"groupListJoins\"]) {\r\n            selectedRecord[\"groupListJoins\"] = []\r\n\r\n        }\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                addRuleList: [], addGroupList: [],\r\n                addAggregateList: [], addOrderbyList: [], testInitiateTests: [], reportCommentsTests: [],\r\n                testCommentsTests: [], siteObject: {}, testCommentObject: {}, reportCommentObject: {}, selectedRecord\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n\r\n    }\r\n\r\n    onSymbolChange = (comboData, fieldName, groupIndex, index) => {\r\n        const { selectedRecord } = this.state;\r\n        const oldSelectedRecord = selectedRecord[\"groupList\"][groupIndex][index][fieldName] || {};\r\n        selectedRecord[\"groupList\"][groupIndex][index][fieldName] = comboData;\r\n        this.setState({ selectedRecord, groupIndex, index });\r\n    }\r\n\r\n    onInputChange = (event, type, groupIndex, index) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        let needoutsource = this.state.needoutsource || {};\r\n        if (event.target.type === 'checkbox') {\r\n            if (event.target.name === 'needoutsource' && event.target.checked === true) {\r\n                needoutsource = true\r\n            }\r\n            else {\r\n                needoutsource = false\r\n                delete selectedRecord['nfromsitecode'];\r\n                delete selectedRecord['ntositecode'];\r\n            }\r\n            selectedRecord[event.target.name] = event.target.checked === true ? 3 : 4;\r\n        }\r\n        else {\r\n            selectedRecord[event.target.name] = event.target.value;\r\n        }\r\n        this.setState({ selectedRecord, needoutsource });\r\n    }\r\n\r\n\r\n\r\n    viewColumnListByRule = (list) => {\r\n        let activeTabIndex = this.props.Login.activeTabIndex\r\n        let selectedRecord = this.props.Login.selectedRecord && this.props.Login.selectedRecord\r\n        let dynamicList = activeTabIndex === 1 ? this.props.Login.testInitiateTests : activeTabIndex === 2 ? this.props.Login.testCommentsTests : this.props.Login.reportCommentsTests\r\n        list = list.filter(({ value }) => !dynamicList.some(x => x.ntestparametercode == value))\r\n        return list\r\n    }\r\n    onConditionClick = (fieldName, index, isgroup) => {\r\n        let { selectedRecord } = this.state;\r\n        selectedRecord[\"groupListJoins\"] = selectedRecord[\"groupListJoins\"] || []\r\n        if (index !== undefined && isgroup === false) {\r\n            if (fieldName === `button_and`) {\r\n                selectedRecord[\"groupList\"][index][fieldName] = selectedRecord[\"groupList\"][index][fieldName] === true ? true : true;\r\n                selectedRecord[\"groupList\"][index][`button_or`] = false;\r\n            } else if (fieldName === `button_or`) {\r\n                selectedRecord[\"groupList\"][index][fieldName] = selectedRecord[\"groupList\"][index][fieldName] === true ? true : true;\r\n                selectedRecord[\"groupList\"][index][`button_and`] = false;\r\n            } else if (fieldName === `button_not`) {\r\n                selectedRecord[\"groupList\"][index][fieldName] = selectedRecord[\"groupList\"][index][fieldName] === true ? false : true;\r\n            }\r\n            else {\r\n\r\n            }\r\n            this.setState({ selectedRecord });\r\n        }\r\n        else {\r\n            if (fieldName === `button_and`) {\r\n                if (selectedRecord[\"groupListJoins\"][index] === undefined) {\r\n                    selectedRecord[\"groupListJoins\"][index] = {}\r\n                }\r\n                selectedRecord[\"groupListJoins\"][index][fieldName] = selectedRecord[\"groupListJoins\"][index][fieldName] === true ? true : true;\r\n                selectedRecord[\"groupListJoins\"][index][`button_or`] = false;\r\n            }\r\n            if (fieldName === `button_or`) {\r\n                if (selectedRecord[\"groupListJoins\"][index] === undefined) {\r\n                    selectedRecord[\"groupListJoins\"][index] = {}\r\n                }\r\n                selectedRecord[\"groupListJoins\"][index][fieldName] = selectedRecord[\"groupListJoins\"][index][fieldName] === true ? true : true;\r\n                selectedRecord[\"groupListJoins\"][index][`button_and`] = false;\r\n            }\r\n            if (fieldName === `button_not`) {\r\n                if (selectedRecord[\"groupListJoins\"][index] === undefined) {\r\n                    selectedRecord[\"groupListJoins\"][index] = {}\r\n                }\r\n                selectedRecord[\"groupListJoins\"][index][fieldName] = selectedRecord[\"groupListJoins\"][index][fieldName] === true ? false : true;\r\n            }\r\n            this.setState({ selectedRecord });\r\n        }\r\n\r\n    }\r\n\r\n\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        Login: state.Login\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, {\r\n    callService, crudMaster, updateStore, filterColumnData,\r\n    validateEsignCredential,\r\n    getRulesEngineAdd,\r\n    getSelectedRulesEngine, getRulesEngine, getEditRulesEngine\r\n})(injectIntl(RuleEngineQueryBuilder));"]},"metadata":{},"sourceType":"module"}