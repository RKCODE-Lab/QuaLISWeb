{"ast":null,"code":"var _jsxFileName = \"D:\\\\LIMSWFH\\\\LIMSPOSTGRESQL\\\\QuaLISWeb\\\\src\\\\pages\\\\basemaster\\\\SampleTestComments.jsx\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { injectIntl } from 'react-intl';\nimport { Row, Col } from 'react-bootstrap';\nimport { toast } from 'react-toastify';\nimport { process } from '@progress/kendo-data-query';\nimport DataGrid from '../../components/data-grid/data-grid.component'; //import AddSampleTestComments from './AddSampleTestComments';\n\nimport Esign from '../audittrail/Esign';\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\nimport { ListWrapper } from '../../components/client-group.styles';\nimport { callService, crudMaster, fetchSampleTestCommentsById, validateEsignCredential, openSampleTestCommentsModal, updateStore } from '../../actions';\nimport { transactionStatus } from '../../components/Enumeration';\nimport { constructOptionList, getControlMap, showEsign, validateEmail, validatePhoneNumber } from '../../components/CommonScript';\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\nimport AddSampleTestComments from './AddSampleTestComments';\n\nconst mapStateToProps = state => {\n  return {\n    Login: state.Login\n  };\n};\n\nclass SampleTestComments extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.dataStateChange = event => {\n      this.setState({\n        dataResult: process(this.props.Login.masterData, event.dataState),\n        dataState: event.dataState\n      });\n    };\n\n    this.closeModal = () => {\n      let loadEsign = this.props.Login.loadEsign;\n      let openModal = this.props.Login.openModal;\n      let selectedRecord = this.props.Login.selectedRecord;\n\n      if (this.props.Login.loadEsign) {\n        if (this.props.Login.operation === \"delete\") {\n          selectedRecord['agree'] = 4;\n          loadEsign = false;\n          openModal = false;\n        } else {\n          loadEsign = false;\n        }\n      } else {\n        openModal = false;\n        selectedRecord = {};\n      }\n\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          openModal,\n          loadEsign,\n          selectedRecord,\n          selectedId: null\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onInputOnChange = event => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (event.target.type === 'checkbox') {\n        selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\n      } else {\n        if (event.target.name === \"sphoneno\" || event.target.name === \"smobileno\") {\n          if (event.target.value !== \"\") {\n            event.target.value = validatePhoneNumber(event.target.value);\n            selectedRecord[event.target.name] = event.target.value !== \"\" ? event.target.value : selectedRecord[event.target.name];\n          } else {\n            selectedRecord[event.target.name] = event.target.value;\n          }\n        } else {\n          selectedRecord[event.target.name] = event.target.value;\n        }\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onComboChange = (comboData, fieldName) => {\n      if (comboData !== null) {\n        const selectedRecord = this.state.selectedRecord || {};\n        let spredefinedenable = \"false\";\n        let isCommentSubType = comboData.value;\n\n        if (fieldName === \"ncommentsubtypecode\") {\n          spredefinedenable = comboData.item.spredefinedenable;\n          selectedRecord[\"spredefinedenable\"] = spredefinedenable;\n          selectedRecord[fieldName] = comboData;\n          selectedRecord[\"sdescription\"] = \"\";\n          selectedRecord[\"spredefinedname\"] = \"\";\n        } else {\n          selectedRecord[fieldName] = comboData;\n        }\n\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            selectedRecord,\n            spredefinedenable,\n            isCommentSubType\n          }\n        };\n        this.props.updateStore(updateInfo);\n      }\n    };\n\n    this.reloadData = () => {\n      const inputParam = {\n        inputData: {\n          \"userinfo\": this.props.Login.userInfo\n        },\n        classUrl: this.props.Login.inputParam.classUrl,\n        methodUrl: this.props.Login.inputParam.methodUrl,\n        userInfo: this.props.Login.userInfo,\n        displayName: this.props.Login.inputParam.displayName\n      };\n      this.props.callService(inputParam);\n    };\n\n    this.onSaveClick = (saveType, formRef) => {\n      let inputData = [];\n      inputData[\"userinfo\"] = this.props.Login.userInfo;\n      let postParam = undefined;\n      let selectedId = null;\n\n      if (this.state.selectedRecord[\"ncommentsubtypecode\"].value === 3) {\n        if (this.state.selectedRecord[\"spredefinedname\"] === undefined || this.state.selectedRecord[\"spredefinedname\"] === \"\") {\n          toast.info(\"Enter PreDefined Name\");\n          return;\n        }\n      }\n\n      if (this.props.Login.operation === \"update\") {\n        // edit\n        postParam = {\n          inputListName: \"sampletestcomments\",\n          selectedObject: \"selectedSampleTestComments\",\n          primaryKeyField: \"nsampletestcommentscode\"\n        };\n        inputData[\"sampletestcomments\"] = JSON.parse(JSON.stringify(this.state.selectedRecord));\n        this.fieldList.map(item => {\n          return inputData[\"sampletestcomments\"][item] = this.state.selectedRecord[item] ? this.state.selectedRecord[item] : \"\";\n        });\n        inputData[\"sampletestcomments\"][\"nsampletestcommentscode\"] = this.state.selectedRecord.nsampletestcommentscode;\n\n        if (this.state.selectedRecord[\"ncommentsubtypecode\"] && this.state.selectedRecord[\"ncommentsubtypecode\"].value !== 3) {\n          inputData[\"sampletestcomments\"][\"spredefinedname\"] = \"\";\n        }\n\n        selectedId = this.props.Login.selectedId;\n      } else {\n        inputData[\"sampletestcomments\"] = {\n          \"nsitecode\": this.props.Login.userInfo.nmastersitecode\n        };\n        this.fieldList.map(item => {\n          return inputData[\"sampletestcomments\"][item] = this.state.selectedRecord[item] ? this.state.selectedRecord[item] : \"\";\n        });\n\n        if (this.state.selectedRecord[\"ncommentsubtypecode\"] && this.state.selectedRecord[\"ncommentsubtypecode\"].value !== 3) {\n          inputData[\"sampletestcomments\"][\"spredefinedname\"] = \"\";\n        }\n      }\n\n      inputData[\"sampletestcomments\"][\"ncommenttypecode\"] = this.state.selectedRecord[\"ncommenttypecode\"] ? this.state.selectedRecord[\"ncommenttypecode\"].value : 1;\n      inputData[\"sampletestcomments\"][\"ncommentsubtypecode\"] = this.state.selectedRecord[\"ncommentsubtypecode\"] ? this.state.selectedRecord[\"ncommentsubtypecode\"].value : -1;\n      const inputParam = {\n        classUrl: this.props.Login.inputParam.classUrl,\n        methodUrl: this.props.Login.inputParam.methodUrl,\n        displayName: \"IDS_SAMPLETESTCOMMENTS\",\n        inputData: inputData,\n        selectedId,\n        operation: this.props.Login.operation,\n        saveType,\n        formRef,\n        postParam,\n        searchRef: this.searchRef\n      };\n      const masterData = this.props.Login.masterData;\n      const esignNeeded = showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolcode);\n\n      if (esignNeeded) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData\n            },\n            saveType\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, masterData, \"openModal\");\n      }\n    };\n\n    this.deleteRecord = inputData => {\n      const inputParam = {\n        classUrl: this.props.Login.inputParam.classUrl,\n        methodUrl: this.props.Login.inputParam.methodUrl,\n        inputData: {\n          [this.props.Login.inputParam.methodUrl.toLowerCase()]: inputData.selectedRecord,\n          \"userinfo\": this.props.Login.userInfo\n        },\n        operation: inputData.operation,\n        displayName: this.props.Login.inputParam.displayName,\n        dataState: this.state.dataState\n      };\n      const esignNeeded = showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, inputData.ncontrolCode);\n\n      if (esignNeeded) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData: this.props.Login.masterData\n            },\n            openModal: true,\n            screenName: this.props.intl.formatMessage({\n              id: this.props.Login.inputParam.displayName\n            }),\n            operation: this.props.Login.operation\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\n      }\n    };\n\n    this.validateEsign = () => {\n      const inputParam = {\n        inputData: {\n          \"userinfo\": { ...this.props.Login.userInfo,\n            sreason: this.state.selectedRecord[\"esigncomments\"],\n            nreasoncode: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].value,\n            spredefinedreason: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].label\n          },\n          password: this.state.selectedRecord[\"esignpassword\"]\n        },\n        screenData: this.props.Login.screenData\n      };\n      this.props.validateEsignCredential(inputParam, \"openModal\");\n    };\n\n    this.formRef = React.createRef();\n    this.closeModal = this.closeModal.bind(this);\n    this.extractedColumnList = [];\n    this.fieldList = [];\n    const dataState = {\n      skip: 0,\n      take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n    };\n    this.state = {\n      data: [],\n      masterStatus: \"\",\n      error: \"\",\n      selectedRecord: {},\n      dataResult: [],\n      dataState: dataState,\n      isOpen: false,\n      userRoleControlRights: [],\n      controlMap: new Map(),\n      CommentType: [],\n      CommentSubType: []\n    };\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\n      toast.warn(props.Login.masterStatus);\n      props.Login.masterStatus = \"\";\n    }\n\n    if (props.Login.error !== state.error) {\n      toast.error(props.Login.error);\n      props.Login.error = \"\";\n    }\n\n    return null;\n  }\n\n  render() {\n    let primaryKeyField = \"\";\n\n    if (this.props.Login.inputParam !== undefined) {\n      this.extractedColumnList = [{\n        \"controlType\": \"textbox\",\n        \"idsName\": \"IDS_COMMENTNAME\",\n        \"dataField\": \"scommentsubtype\",\n        \"width\": \"150px\"\n      }, {\n        \"controlType\": \"textbox\",\n        \"idsName\": \"IDS_ABBREVIATIONNAME\",\n        \"dataField\": \"spredefinedname\",\n        \"width\": \"150px\"\n      }, {\n        \"controlType\": \"textbox\",\n        \"idsName\": \"IDS_DESCRIPTION\",\n        \"dataField\": \"sdescription\",\n        \"width\": \"150px\"\n      }];\n      primaryKeyField = \"nsampletestcommentscode\";\n      this.fieldList = [\"ncommentsubtypecode\", \"spredefinedname\", \"sdescription\"];\n    }\n\n    const mandatoryFields = [{\n      \"controlType\": \"selectbox\",\n      \"mandatory\": true,\n      \"idsName\": \"IDS_COMMENTNAME\",\n      \"dataField\": \"ncommentsubtypecode\",\n      \"mandatoryLabel\": \"IDS_SELECT\"\n    }, {\n      \"controlType\": \"textbox\",\n      \"mandatory\": true,\n      \"idsName\": \"IDS_ABBREVIATIONNAME\",\n      \"dataField\": \"spredefinedname\",\n      \"mandatoryLabel\": \"IDS_ENTER\"\n    }, {\n      \"controlType\": \"textbox\",\n      \"mandatory\": true,\n      \"idsName\": \"IDS_DESCRIPTION\",\n      \"dataField\": \"sdescription\",\n      \"mandatoryLabel\": \"IDS_ENTER\"\n    }];\n    const removeAbbreviationMandatoryFields = [{\n      \"controlType\": \"selectbox\",\n      \"mandatory\": true,\n      \"idsName\": \"IDS_COMMENTNAME\",\n      \"dataField\": \"ncommentsubtypecode\",\n      \"mandatoryLabel\": \"IDS_SELECT\"\n    }, {\n      \"controlType\": \"textbox\",\n      \"mandatory\": true,\n      \"idsName\": \"IDS_DESCRIPTION\",\n      \"dataField\": \"sdescription\",\n      \"mandatoryLabel\": \"IDS_ENTER\"\n    }];\n    const addId = this.state.controlMap.has(\"AddSampleTestComments\") && this.state.controlMap.get(\"AddSampleTestComments\").ncontrolcode;\n    const editId = this.state.controlMap.has(\"EditSampleTestComments\") && this.state.controlMap.get(\"EditSampleTestComments\").ncontrolcode;\n    const deleteId = this.state.controlMap.has(\"DeleteSampleTestComments\") && this.state.controlMap.get(\"DeleteSampleTestComments\").ncontrolcode; // const editParam = {\n    //     screenName: this.props.Login.inputParam && this.props.Login.inputParam.displayName && this.props.intl.formatMessage({ id: this.props.Login.inputParam.displayName }), primaryKeyField: \"nsampletestcommentscode\", operation: \"update\",\n    //     inputParam: this.props.Login.inputParam, userInfo: this.props.Login.userInfo, ncontrolCode: editId\n    // };\n\n    const addParam = {\n      screenName: \"IDS_SAMPLETESTCOMMENTS\",\n      operation: \"create\",\n      primaryKeyName: \"nsampletestcommentscode\",\n      masterData: this.props.Login.masterData,\n      userInfo: this.props.Login.userInfo,\n      ncontrolcode: addId\n    };\n    const editParam = {\n      screenName: \"IDS_SAMPLETESTCOMMENTS\",\n      operation: \"update\",\n      primaryKeyName: \"nsampletestcommentscode\",\n      masterData: this.props.Login.masterData,\n      userInfo: this.props.Login.userInfo,\n      ncontrolcode: editId,\n      inputListName: \"SampleTestComments\",\n      selectedObject: \"selectedRecord\"\n    };\n    const deleteParam = {\n      operation: \"delete\"\n    };\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(ListWrapper, {\n      className: \"client-list-content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 25\n      }\n    }, this.state.data ? /*#__PURE__*/React.createElement(DataGrid, {\n      primaryKeyField: primaryKeyField,\n      data: this.state.data,\n      dataResult: this.state.dataResult,\n      dataState: this.state.dataState,\n      dataStateChange: this.dataStateChange,\n      extractedColumnList: this.extractedColumnList,\n      formatMessage: this.props.intl.formatMessage,\n      controlMap: this.state.controlMap,\n      userRoleControlRights: this.state.userRoleControlRights,\n      inputParam: this.props.Login.inputParam,\n      userInfo: this.props.Login.userInfo,\n      fetchRecord: this.props.fetchSampleTestCommentsById,\n      deleteRecord: this.deleteRecord,\n      reloadData: this.reloadData,\n      editParam: editParam,\n      deleteParam: deleteParam,\n      addRecord: () => this.props.openSampleTestCommentsModal(\"IDS_SAMPLETESTCOMMENTS\", \"create\", \"nsampletestcommentscode\", this.props.Login.masterData, this.props.Login.userInfo, addId),\n      gridHeight: \"600px\",\n      pageable: true,\n      isAddRequired: true,\n      isActionRequired: true,\n      isToolBarRequired: true,\n      scrollable: \"scrollable\",\n      selectedId: this.props.Login.selectedId,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 33\n      }\n    }) : \"\"))), this.props.Login.openModal && /*#__PURE__*/React.createElement(SlideOutModal, {\n      show: this.props.Login.openModal,\n      closeModal: this.closeModal,\n      operation: this.props.Login.operation,\n      inputParam: this.props.Login.inputParam,\n      screenName: this.props.Login.screenName,\n      onSaveClick: this.onSaveClick,\n      esign: this.props.Login.loadEsign,\n      selectedRecord: this.state.selectedRecord || {},\n      mandatoryFields: this.props.Login.isCommentSubType === 3 ? mandatoryFields : removeAbbreviationMandatoryFields,\n      validateEsign: this.validateEsign,\n      masterStatus: this.props.Login.masterStatus,\n      updateStore: this.props.updateStore,\n      addComponent: this.props.Login.loadEsign ? /*#__PURE__*/React.createElement(Esign, {\n        operation: this.props.Login.operation,\n        formatMessage: this.props.intl.formatMessage,\n        onInputOnChange: this.onInputOnChange,\n        inputParam: this.props.Login.inputParam,\n        selectedRecord: this.state.selectedRecord || {},\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 193,\n          columnNumber: 29\n        }\n      }) : /*#__PURE__*/React.createElement(AddSampleTestComments, {\n        selectedRecord: this.state.selectedRecord || {},\n        onInputOnChange: this.onInputOnChange,\n        onComboChange: this.onComboChange,\n        CommentType: this.state.CommentType || [],\n        CommentSubType: this.state.CommentSubType || [],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 200,\n          columnNumber: 31\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 21\n      }\n    }));\n  }\n\n  componentDidUpdate(previousProps) {\n    if (this.props.Login.masterData !== previousProps.Login.masterData) {\n      if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\n        const userRoleControlRights = [];\n\n        if (this.props.Login.userRoleControlRights) {\n          this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item => userRoleControlRights.push(item.ncontrolcode));\n        }\n\n        const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode);\n        this.setState({\n          userRoleControlRights,\n          controlMap,\n          data: this.props.Login.masterData,\n          dataResult: process(this.props.Login.masterData, this.state.dataState)\n        });\n      } else {\n        let {\n          dataState\n        } = this.state;\n\n        if (this.props.Login.dataState === undefined) {\n          dataState = {\n            skip: 0,\n            take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n          };\n        }\n\n        this.setState({\n          data: this.props.Login.masterData,\n          // isOpen: false,\n          dataResult: process(this.props.Login.masterData, dataState),\n          dataState,\n          selectedRecord: {}\n        });\n      }\n    } else if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\n      this.setState({\n        selectedRecord: this.props.Login.selectedRecord\n      });\n    }\n\n    if (this.props.Login.CommentType !== previousProps.Login.CommentType) {\n      const CommentType = constructOptionList(this.props.Login.CommentType || [], \"ncommenttypecode\", \"scommenttype\", undefined, undefined, undefined);\n      const CommentTypeList = CommentType.get(\"OptionList\");\n      this.setState({\n        CommentType: CommentTypeList\n      });\n    }\n\n    if (this.props.Login.CommentSubType !== previousProps.Login.CommentSubType) {\n      const CommentSubType = constructOptionList(this.props.Login.CommentSubType || [], \"ncommentsubtypecode\", \"scommentsubtype\", undefined, undefined, undefined);\n      const CommentSubTypeList = CommentSubType.get(\"OptionList\");\n      this.setState({\n        CommentSubType: CommentSubTypeList\n      });\n    }\n\n    if (this.props.Login.isCommentSubType !== previousProps.Login.isCommentSubType) {\n      this.setState({\n        selectedRecord: this.props.Login.selectedRecord,\n        spredefinedenable: this.props.Login.spredefinedenable\n      });\n    }\n  }\n\n  componentWillUnmount() {\n    const updateInfo = {\n      typeName: DEFAULT_RETURN,\n      data: {\n        masterData: [],\n        inputParam: undefined,\n        operation: null,\n        modalName: undefined\n      }\n    };\n    this.props.updateStore(updateInfo);\n  }\n\n}\n\nexport default connect(mapStateToProps, {\n  callService,\n  crudMaster,\n  validateEsignCredential,\n  openSampleTestCommentsModal,\n  fetchSampleTestCommentsById,\n  updateStore\n})(injectIntl(SampleTestComments));","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/pages/basemaster/SampleTestComments.jsx"],"names":["React","connect","injectIntl","Row","Col","toast","process","DataGrid","Esign","SlideOutModal","ListWrapper","callService","crudMaster","fetchSampleTestCommentsById","validateEsignCredential","openSampleTestCommentsModal","updateStore","transactionStatus","constructOptionList","getControlMap","showEsign","validateEmail","validatePhoneNumber","DEFAULT_RETURN","AddSampleTestComments","mapStateToProps","state","Login","SampleTestComments","Component","constructor","props","dataStateChange","event","setState","dataResult","masterData","dataState","closeModal","loadEsign","openModal","selectedRecord","operation","updateInfo","typeName","data","selectedId","onInputOnChange","target","type","name","checked","YES","NO","value","onComboChange","comboData","fieldName","spredefinedenable","isCommentSubType","item","reloadData","inputParam","inputData","userInfo","classUrl","methodUrl","displayName","onSaveClick","saveType","formRef","postParam","undefined","info","inputListName","selectedObject","primaryKeyField","JSON","parse","stringify","fieldList","map","nsampletestcommentscode","nmastersitecode","searchRef","esignNeeded","userRoleControlRights","nformcode","ncontrolcode","screenData","deleteRecord","toLowerCase","ncontrolCode","screenName","intl","formatMessage","id","validateEsign","sreason","nreasoncode","spredefinedreason","label","password","createRef","bind","extractedColumnList","skip","take","settings","parseInt","masterStatus","error","isOpen","controlMap","Map","CommentType","CommentSubType","getDerivedStateFromProps","warn","render","mandatoryFields","removeAbbreviationMandatoryFields","addId","has","get","editId","deleteId","addParam","primaryKeyName","editParam","deleteParam","componentDidUpdate","previousProps","Object","values","push","CommentTypeList","CommentSubTypeList","componentWillUnmount","modalName"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { injectIntl } from 'react-intl';\r\nimport { Row, Col } from 'react-bootstrap';\r\nimport { toast } from 'react-toastify';\r\nimport { process } from '@progress/kendo-data-query';\r\nimport DataGrid from '../../components/data-grid/data-grid.component';\r\n//import AddSampleTestComments from './AddSampleTestComments';\r\nimport Esign from '../audittrail/Esign';\r\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\r\nimport { ListWrapper } from '../../components/client-group.styles';\r\nimport { callService, crudMaster, fetchSampleTestCommentsById, validateEsignCredential, openSampleTestCommentsModal, updateStore } from '../../actions';\r\nimport { transactionStatus } from '../../components/Enumeration';\r\nimport { constructOptionList, getControlMap, showEsign,validateEmail,validatePhoneNumber } from '../../components/CommonScript';\r\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\r\nimport AddSampleTestComments from './AddSampleTestComments';\r\n\r\nconst mapStateToProps = state => {\r\n    return ({ Login: state.Login })\r\n}\r\n\r\nclass SampleTestComments extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.formRef = React.createRef();\r\n        this.closeModal = this.closeModal.bind(this);\r\n        this.extractedColumnList = [];\r\n        this.fieldList = [];\r\n\r\n        const dataState = {\r\n            skip: 0,\r\n            take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5,\r\n        };\r\n        this.state = {\r\n            data: [], masterStatus: \"\", error: \"\", selectedRecord: {},\r\n            dataResult: [],\r\n            dataState: dataState,\r\n            isOpen: false,\r\n            userRoleControlRights: [],\r\n            controlMap: new Map(),\r\n            CommentType:[],\r\n            CommentSubType:[]\r\n        };\r\n    }\r\n\r\n    static getDerivedStateFromProps(props, state) {\r\n\r\n        if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\r\n            toast.warn(props.Login.masterStatus);\r\n            props.Login.masterStatus = \"\";\r\n        }\r\n\r\n        if (props.Login.error !== state.error) {\r\n            toast.error(props.Login.error)\r\n            props.Login.error = \"\";\r\n        }\r\n        return null;\r\n    }\r\n\r\n    dataStateChange = (event) => {\r\n        this.setState({\r\n            dataResult: process(this.props.Login.masterData, event.dataState),\r\n            dataState: event.dataState\r\n        });\r\n    }\r\n\r\n    closeModal = () => {\r\n        let loadEsign = this.props.Login.loadEsign;\r\n        let openModal = this.props.Login.openModal;\r\n        let selectedRecord = this.props.Login.selectedRecord;\r\n        if (this.props.Login.loadEsign) {\r\n            if (this.props.Login.operation === \"delete\") {\r\n                selectedRecord['agree'] = 4;\r\n                loadEsign = false;\r\n                openModal = false;\r\n            } else {\r\n                loadEsign = false;\r\n            }\r\n        } else {\r\n            openModal = false;\r\n            selectedRecord = {};\r\n        }\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { openModal, loadEsign, selectedRecord, selectedId:null }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    render() {\r\n\r\n        let primaryKeyField = \"\";\r\n        if (this.props.Login.inputParam !== undefined) {\r\n\r\n            this.extractedColumnList = [\r\n                { \"controlType\": \"textbox\", \"idsName\": \"IDS_COMMENTNAME\", \"dataField\": \"scommentsubtype\", \"width\": \"150px\" },\r\n                { \"controlType\": \"textbox\", \"idsName\": \"IDS_ABBREVIATIONNAME\", \"dataField\": \"spredefinedname\", \"width\": \"150px\" },\r\n                { \"controlType\": \"textbox\", \"idsName\": \"IDS_DESCRIPTION\", \"dataField\": \"sdescription\", \"width\": \"150px\" },\r\n\r\n            ]\r\n                     \r\n            primaryKeyField = \"nsampletestcommentscode\";\r\n            this.fieldList = [\r\n                \"ncommentsubtypecode\",\"spredefinedname\",\"sdescription\"\r\n        ];\r\n        }\r\n\r\n\r\n        const mandatoryFields=[ \r\n                            { \"controlType\": \"selectbox\",\"mandatory\": true, \"idsName\": \"IDS_COMMENTNAME\", \"dataField\": \"ncommentsubtypecode\", \"mandatoryLabel\":\"IDS_SELECT\"},\r\n                            { \"controlType\": \"textbox\",\"mandatory\": true, \"idsName\": \"IDS_ABBREVIATIONNAME\", \"dataField\": \"spredefinedname\", \"mandatoryLabel\":\"IDS_ENTER\"},\r\n                            { \"controlType\": \"textbox\",\"mandatory\": true, \"idsName\": \"IDS_DESCRIPTION\", \"dataField\": \"sdescription\", \"mandatoryLabel\":\"IDS_ENTER\" } ];\r\n\r\n        const removeAbbreviationMandatoryFields=[ \r\n                            { \"controlType\": \"selectbox\",\"mandatory\": true, \"idsName\": \"IDS_COMMENTNAME\", \"dataField\": \"ncommentsubtypecode\", \"mandatoryLabel\":\"IDS_SELECT\"},\r\n                            { \"controlType\": \"textbox\",\"mandatory\": true, \"idsName\": \"IDS_DESCRIPTION\", \"dataField\": \"sdescription\", \"mandatoryLabel\":\"IDS_ENTER\" } ];\r\n       \r\n        const addId = this.state.controlMap.has(\"AddSampleTestComments\") && this.state.controlMap.get(\"AddSampleTestComments\").ncontrolcode;\r\n        const editId = this.state.controlMap.has(\"EditSampleTestComments\") && this.state.controlMap.get(\"EditSampleTestComments\").ncontrolcode;\r\n        const deleteId = this.state.controlMap.has(\"DeleteSampleTestComments\") && this.state.controlMap.get(\"DeleteSampleTestComments\").ncontrolcode;\r\n\r\n        // const editParam = {\r\n        //     screenName: this.props.Login.inputParam && this.props.Login.inputParam.displayName && this.props.intl.formatMessage({ id: this.props.Login.inputParam.displayName }), primaryKeyField: \"nsampletestcommentscode\", operation: \"update\",\r\n        //     inputParam: this.props.Login.inputParam, userInfo: this.props.Login.userInfo, ncontrolCode: editId\r\n        // };\r\n        const addParam = {\r\n            screenName: \"IDS_SAMPLETESTCOMMENTS\", operation: \"create\", primaryKeyName: \"nsampletestcommentscode\",\r\n            masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo,\r\n            ncontrolcode: addId\r\n            \r\n        }\r\n\r\n        const editParam = {\r\n            screenName: \"IDS_SAMPLETESTCOMMENTS\", operation: \"update\", primaryKeyName: \"nsampletestcommentscode\",\r\n            masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo,\r\n            ncontrolcode: editId, inputListName: \"SampleTestComments\", selectedObject: \"selectedRecord\"\r\n        };\r\n        const deleteParam = { operation: \"delete\" };\r\n        return (\r\n            <>\r\n                <Row>\r\n                    <Col>\r\n                        <ListWrapper className=\"client-list-content\">\r\n                           \r\n\r\n                            {this.state.data ?\r\n                                <DataGrid\r\n                                    primaryKeyField={primaryKeyField}\r\n                                    data={this.state.data}\r\n                                    dataResult={this.state.dataResult}\r\n                                    dataState={this.state.dataState}\r\n                                    dataStateChange={this.dataStateChange}\r\n                                    extractedColumnList={this.extractedColumnList}\r\n                                    formatMessage={this.props.intl.formatMessage}\r\n                                    controlMap={this.state.controlMap}\r\n                                    userRoleControlRights={this.state.userRoleControlRights}\r\n                                    inputParam={this.props.Login.inputParam}\r\n                                    userInfo={this.props.Login.userInfo}\r\n                                    fetchRecord={this.props.fetchSampleTestCommentsById}\r\n                                    deleteRecord={this.deleteRecord}\r\n                                    reloadData={this.reloadData}\r\n                                    editParam={editParam}\r\n                                    deleteParam={deleteParam}\r\n                                    addRecord = {() => this.props.openSampleTestCommentsModal(\"IDS_SAMPLETESTCOMMENTS\", \"create\", \"nsampletestcommentscode\", this.props.Login.masterData, this.props.Login.userInfo, addId)}\r\n                                    gridHeight = {\"600px\"}\r\n                                    pageable={true}\r\n                                    isAddRequired={true}\r\n                                    isActionRequired={true}\r\n                                    isToolBarRequired={true}\r\n                                    scrollable={\"scrollable\"}\r\n                                    selectedId={this.props.Login.selectedId}\r\n                                   \r\n                                />\r\n                                : \"\"}\r\n                        </ListWrapper>\r\n                    </Col>\r\n                </Row>\r\n                {this.props.Login.openModal &&\r\n                    <SlideOutModal\r\n                        show={this.props.Login.openModal}\r\n                        closeModal={this.closeModal}\r\n                        operation={this.props.Login.operation}\r\n                        inputParam={this.props.Login.inputParam}\r\n                        screenName={this.props.Login.screenName}\r\n                        onSaveClick={this.onSaveClick}\r\n                        esign={this.props.Login.loadEsign}\r\n                        selectedRecord={this.state.selectedRecord || {}}\r\n                        mandatoryFields={this.props.Login.isCommentSubType === 3 ? mandatoryFields : removeAbbreviationMandatoryFields}\r\n                        validateEsign={this.validateEsign}\r\n                        masterStatus={this.props.Login.masterStatus}\r\n                        updateStore={this.props.updateStore}\r\n                        addComponent={this.props.Login.loadEsign ?\r\n                            <Esign\r\n                                operation={this.props.Login.operation}\r\n                                formatMessage={this.props.intl.formatMessage}\r\n                                onInputOnChange={this.onInputOnChange}\r\n                                inputParam={this.props.Login.inputParam}\r\n                                selectedRecord={this.state.selectedRecord || {}}\r\n                            />\r\n                            : <AddSampleTestComments\r\n                                selectedRecord={this.state.selectedRecord || {}}\r\n                                onInputOnChange={this.onInputOnChange}\r\n                                onComboChange={this.onComboChange}\r\n                                CommentType={this.state.CommentType || []}\r\n                                CommentSubType={this.state.CommentSubType || []}\r\n                            />\r\n                            \r\n                        }\r\n                    />\r\n                }\r\n            </>\r\n        );\r\n    }\r\n\r\n    componentDidUpdate(previousProps) {\r\n        if (this.props.Login.masterData !== previousProps.Login.masterData) {\r\n            if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\r\n                const userRoleControlRights = [];\r\n                if (this.props.Login.userRoleControlRights) {\r\n                    this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item =>\r\n                        userRoleControlRights.push(item.ncontrolcode))\r\n                }\r\n                const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode)\r\n                this.setState({\r\n                    userRoleControlRights, controlMap, data: this.props.Login.masterData,\r\n                    dataResult: process(this.props.Login.masterData, this.state.dataState),\r\n                });\r\n            }\r\n            else {\r\n                let { dataState } = this.state;\r\n                if (this.props.Login.dataState === undefined) {\r\n                    dataState = { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 }\r\n                }\r\n\r\n                this.setState({\r\n                    data: this.props.Login.masterData,\r\n                   // isOpen: false,\r\n                    dataResult: process(this.props.Login.masterData, dataState),\r\n                    dataState,\r\n                    selectedRecord:{}\r\n                });\r\n            }\r\n        } else if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\r\n            this.setState({ selectedRecord: this.props.Login.selectedRecord });\r\n        }\r\n        if(this.props.Login.CommentType!==previousProps.Login.CommentType){\r\n            const CommentType=constructOptionList(this.props.Login.CommentType ||[], \"ncommenttypecode\",\r\n            \"scommenttype\" , undefined, undefined, undefined);\r\n            const CommentTypeList=CommentType.get(\"OptionList\")\r\n            this.setState({CommentType:CommentTypeList})\r\n        }\r\n        if(this.props.Login.CommentSubType!==previousProps.Login.CommentSubType){\r\n            const CommentSubType=constructOptionList(this.props.Login.CommentSubType ||[], \"ncommentsubtypecode\",\r\n            \"scommentsubtype\" , undefined, undefined, undefined);\r\n            const CommentSubTypeList=CommentSubType.get(\"OptionList\")\r\n            this.setState({CommentSubType:CommentSubTypeList})\r\n        }\r\n        if(this.props.Login.isCommentSubType !== previousProps.Login.isCommentSubType){\r\n            this.setState({selectedRecord:this.props.Login.selectedRecord , spredefinedenable:this.props.Login.spredefinedenable})\r\n        }\r\n    }\r\n\r\n    onInputOnChange=(event)=>  {\r\n        \r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if (event.target.type === 'checkbox')\r\n        {\r\n            selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\r\n        }\r\n        else  {\r\n            if (event.target.name === \"sphoneno\" || event.target.name === \"smobileno\"){\r\n                if (event.target.value !== \"\"){\r\n                    event.target.value = validatePhoneNumber(event.target.value);\r\n                    selectedRecord[event.target.name] = event.target.value !== \"\" ? event.target.value:selectedRecord[event.target.name];\r\n                }\r\n                else{     \r\n                    selectedRecord[event.target.name] = event.target.value;               \r\n                }\r\n            }  \r\n            else{     \r\n                selectedRecord[event.target.name] = event.target.value;               \r\n            }         \r\n        }     \r\n        this.setState({selectedRecord});\r\n        \r\n    }\r\n\r\n    onComboChange = (comboData, fieldName) => {\r\n        if (comboData !== null) {\r\n            const selectedRecord = this.state.selectedRecord || {};\r\n            let spredefinedenable=\"false\";\r\n            let isCommentSubType = comboData.value;\r\n            \r\n            if(fieldName === \"ncommentsubtypecode\")\r\n            {\r\n               spredefinedenable=comboData.item.spredefinedenable;\r\n               selectedRecord[\"spredefinedenable\"]=spredefinedenable;\r\n               selectedRecord[fieldName] = comboData;\r\n               selectedRecord[\"sdescription\"] = \"\";\r\n               selectedRecord[\"spredefinedname\"] = \"\";\r\n            }\r\n            else\r\n            {\r\n              selectedRecord[fieldName] = comboData;\r\n            }\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: { selectedRecord, spredefinedenable, isCommentSubType}\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n\r\n    }\r\n\r\n    reloadData = () => {\r\n        const inputParam = {\r\n            inputData: { \"userinfo\": this.props.Login.userInfo },\r\n\r\n            classUrl: this.props.Login.inputParam.classUrl,\r\n            methodUrl: this.props.Login.inputParam.methodUrl,\r\n            userInfo: this.props.Login.userInfo,\r\n            displayName: this.props.Login.inputParam.displayName\r\n        };\r\n\r\n        this.props.callService(inputParam);\r\n    }\r\n\r\n    onSaveClick = (saveType, formRef) => {\r\n        \r\n        let inputData = [];\r\n        inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n        let postParam = undefined;\r\n        let selectedId = null;\r\n\r\n        if (this.state.selectedRecord[\"ncommentsubtypecode\"].value === 3) {\r\n            if (this.state.selectedRecord[\"spredefinedname\"] === undefined || \r\n                 this.state.selectedRecord[\"spredefinedname\"] === \"\") {\r\n                toast.info(\"Enter PreDefined Name\");\r\n                return;\r\n            }\r\n        }\r\n\r\n        if (this.props.Login.operation === \"update\") {\r\n            // edit\r\n            postParam = { inputListName: \"sampletestcomments\", selectedObject: \"selectedSampleTestComments\", primaryKeyField: \"nsampletestcommentscode\" }\r\n            inputData[\"sampletestcomments\"] = JSON.parse(JSON.stringify(this.state.selectedRecord));\r\n            this.fieldList.map(item => {\r\n                return inputData[\"sampletestcomments\"][item] = this.state.selectedRecord[item] ? this.state.selectedRecord[item] : \"\";\r\n            })\r\n            inputData[\"sampletestcomments\"][\"nsampletestcommentscode\"] = this.state.selectedRecord.nsampletestcommentscode;\r\n            if(this.state.selectedRecord[\"ncommentsubtypecode\"] && this.state.selectedRecord[\"ncommentsubtypecode\"].value !== 3)\r\n            {\r\n                inputData[\"sampletestcomments\"][\"spredefinedname\"]=\"\";\r\n            }\r\n            selectedId =  this.props.Login.selectedId;\r\n        } else {\r\n            inputData[\"sampletestcomments\"] = { \"nsitecode\": this.props.Login.userInfo.nmastersitecode };\r\n            this.fieldList.map(item => {\r\n                return inputData[\"sampletestcomments\"][item] = this.state.selectedRecord[item] ? this.state.selectedRecord[item] : \"\";\r\n            });\r\n            if(this.state.selectedRecord[\"ncommentsubtypecode\"] && this.state.selectedRecord[\"ncommentsubtypecode\"].value !== 3)\r\n            {\r\n                inputData[\"sampletestcomments\"][\"spredefinedname\"]=\"\";\r\n\r\n            }\r\n        }\r\n        inputData[\"sampletestcomments\"][\"ncommenttypecode\"] = this.state.selectedRecord[\"ncommenttypecode\"] ? this.state.selectedRecord[\"ncommenttypecode\"].value : 1;\r\n        inputData[\"sampletestcomments\"][\"ncommentsubtypecode\"] = this.state.selectedRecord[\"ncommentsubtypecode\"] ? this.state.selectedRecord[\"ncommentsubtypecode\"].value : -1;\r\n        const inputParam = {\r\n            classUrl: this.props.Login.inputParam.classUrl,\r\n            methodUrl: this.props.Login.inputParam.methodUrl,\r\n            displayName:\"IDS_SAMPLETESTCOMMENTS\",\r\n            inputData: inputData, selectedId,\r\n            operation: this.props.Login.operation,\r\n            saveType, formRef, postParam, searchRef: this.searchRef\r\n        }\r\n        const masterData = this.props.Login.masterData;\r\n        const esignNeeded  = showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolcode)\r\n        if (esignNeeded) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData }, saveType\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            \r\n            this.props.crudMaster(inputParam, masterData, \"openModal\");\r\n        }\r\n    \r\n    }\r\n    deleteRecord = (inputData) => {\r\n        const inputParam = {\r\n            classUrl: this.props.Login.inputParam.classUrl,\r\n            methodUrl: this.props.Login.inputParam.methodUrl,\r\n            \r\n            inputData: {\r\n                [this.props.Login.inputParam.methodUrl.toLowerCase()]: inputData.selectedRecord,\r\n                \"userinfo\": this.props.Login.userInfo\r\n            },\r\n            \r\n            operation: inputData.operation,\r\n            displayName: this.props.Login.inputParam.displayName,\r\n            dataState: this.state.dataState\r\n\r\n        }\r\n        \r\n        const esignNeeded = showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, inputData.ncontrolCode);\r\n        if (esignNeeded) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData: this.props.Login.masterData },\r\n                    openModal: true, screenName: this.props.intl.formatMessage({ id: this.props.Login.inputParam.displayName }),\r\n                    operation: this.props.Login.operation\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\r\n        }\r\n    }\r\n    componentWillUnmount(){\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                 masterData :[], inputParam:undefined, operation:null,modalName:undefined\r\n                }\r\n            }\r\n        this.props.updateStore(updateInfo);\r\n    }    \r\n    validateEsign = () => {\r\n        const inputParam = {\r\n            inputData: {\r\n                \"userinfo\": {\r\n                    ...this.props.Login.userInfo,\r\n                    sreason: this.state.selectedRecord[\"esigncomments\"],\r\n                    nreasoncode:this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].value,\r\n                    spredefinedreason:this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].label,\r\n               \r\n                },\r\n                password: this.state.selectedRecord[\"esignpassword\"]\r\n            },\r\n            screenData: this.props.Login.screenData\r\n        }\r\n        this.props.validateEsignCredential(inputParam, \"openModal\");\r\n    }\r\n\r\n}\r\nexport default connect(mapStateToProps, { callService, crudMaster,  validateEsignCredential, openSampleTestCommentsModal,fetchSampleTestCommentsById, updateStore })(injectIntl(SampleTestComments));\r\n"]},"metadata":{},"sourceType":"module"}