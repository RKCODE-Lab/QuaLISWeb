{"ast":null,"code":"import { DEFAULT_RETURN } from './LoginTypes';\nimport rsapi from '../rsapi';\nimport { toast } from 'react-toastify';\nimport { sortData, constructOptionList } from '../components/CommonScript';\nimport { initRequest } from './LoginAction';\nimport { intl } from '../components/App';\nimport Axios from 'axios';\nexport function getSiteDetail(Site, userInfo, masterData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    return rsapi.post(\"site/getSiteScreen\", {\n      nsitecode: Site.nsitecode,\n      userinfo: userInfo\n    }).then(response => {\n      masterData = { ...masterData,\n        ...response.data\n      };\n      sortData(masterData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          operation: null,\n          modalName: undefined,\n          loading: false,\n          dataState: undefined\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getSiteCombo(siteParam) {\n  return function (dispatch) {\n    let urlArray = [];\n    let selectedId = null;\n    const timeZoneService = rsapi.post(\"timezone/getTimeZone\");\n    const dateformat = rsapi.post(\"site/getDateFormat\", {\n      userinfo: siteParam.userInfo\n    });\n\n    if (siteParam.operation === \"create\") {\n      urlArray = [timeZoneService, dateformat];\n    } else {\n      const SiteByID = rsapi.post(\"site/getActiveSiteById\", {\n        [siteParam.primaryKeyField]: siteParam.primaryKeyValue,\n        \"userinfo\": siteParam.userInfo\n      });\n      const districtService = rsapi.post(\"site/getDistrict\", {\n        userinfo: siteParam.userInfo,\n        \"nregioncode\": siteParam.editRow.nregioncode\n      });\n      urlArray = [timeZoneService, dateformat, SiteByID, districtService];\n      selectedId = siteParam.primaryKeyValue;\n    }\n\n    dispatch(initRequest(true));\n    Axios.all(urlArray).then(response => {\n      let timezone = [];\n      let dateFormat = [];\n      let region = [];\n      let district = [];\n      let districtList = [];\n      let selectedRecord = {};\n      const timezoneMap = constructOptionList(response[0].data || [], \"ntimezonecode\", \"stimezoneid\", undefined, undefined, false);\n      const TimeZoneList = timezoneMap.get(\"OptionList\");\n      const dateFormatMap = constructOptionList(response[1].data.DateFormat || [], \"ndateformatcode\", \"sdateformat\", undefined, undefined, false);\n      const dateFormatList = dateFormatMap.get(\"OptionList\");\n      const regionMap = constructOptionList(response[1].data.Region || [], \"nregioncode\", \"sregionname\", undefined, undefined, false);\n      const regionList = regionMap.get(\"OptionList\");\n\n      if (siteParam.operation === \"update\") {\n        const districtMap = constructOptionList(response[3].data.districtList || [], \"ndistrictcode\", \"sdistrictname\", undefined, undefined, false);\n        districtList = districtMap.get(\"OptionList\");\n      }\n\n      if (siteParam.operation === \"update\") {\n        selectedRecord = response[2].data;\n        timezone.push({\n          \"value\": response[2].data[\"ntimezonecode\"],\n          \"label\": response[2].data[\"stimezoneid\"]\n        });\n        dateFormat.push({\n          \"value\": response[2].data[\"ndateformatcode\"],\n          \"label\": response[2].data[\"sdateformat\"]\n        });\n        region.push({\n          \"value\": response[2].data[\"nregioncode\"],\n          \"label\": response[2].data[\"sregionname\"]\n        });\n        district.push({\n          \"value\": response[2].data[\"ndistrictcode\"],\n          \"label\": response[2].data[\"sdistrictname\"]\n        });\n        selectedRecord[\"ntimezonecode\"] = timezone[0];\n        selectedRecord[\"ndateformatcode\"] = dateFormat[0];\n        selectedRecord[\"nregioncode\"] = region[0];\n        selectedRecord[\"ndistrictcode\"] = district[0];\n      } // else {\n      //     selectedRecord = {\n      //         ntimezonecode: {\n      //             \"label\": siteParam.userInfo.stimezoneid,\n      //             \"value\": siteParam.userInfo.ntimezonecode\n      //         }\n      //     };\n      // }\n\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          TimeZoneList,\n          isOpen: true,\n          selectedRecord: siteParam.operation === \"update\" ? selectedRecord : {\n            \"ntransactionstatus\": 1\n          },\n          operation: siteParam.operation,\n          screenName: siteParam.screenName,\n          selectedRecord,\n          openModal: true,\n          ncontrolCode: siteParam.ncontrolCode,\n          loading: false,\n          selectedId,\n          dateFormatList,\n          regionList,\n          districtList\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(intl.formatMessage({\n          id: error.message\n        }));\n      } else {\n        toast.warn(intl.formatMessage({\n          id: error.response.data\n        }));\n      }\n    });\n  };\n}\nexport function getDistrictByRegion(methodParam) {\n  return function (dispatch) {\n    let URL = [];\n    URL = rsapi.post(\"/site/getDistrict\", {\n      \"userinfo\": methodParam.inputData.userinfo,\n      \"nregioncode\": methodParam.inputData.primarykey\n    });\n    dispatch(initRequest(true));\n    Axios.all([URL]).then(response => {\n      const districtMap = constructOptionList(response[0].data['districtList'] || [], \"ndistrictcode\", \"sdistrictname\", undefined, undefined, false);\n      const districtList = districtMap.get(\"OptionList\");\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          districtList,\n          loading: false,\n          data: undefined,\n          dataState: undefined\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/actions/SiteAction.js"],"names":["DEFAULT_RETURN","rsapi","toast","sortData","constructOptionList","initRequest","intl","Axios","getSiteDetail","Site","userInfo","masterData","dispatch","post","nsitecode","userinfo","then","response","data","type","payload","operation","modalName","undefined","loading","dataState","catch","error","status","message","warn","getSiteCombo","siteParam","urlArray","selectedId","timeZoneService","dateformat","SiteByID","primaryKeyField","primaryKeyValue","districtService","editRow","nregioncode","all","timezone","dateFormat","region","district","districtList","selectedRecord","timezoneMap","TimeZoneList","get","dateFormatMap","DateFormat","dateFormatList","regionMap","Region","regionList","districtMap","push","isOpen","screenName","openModal","ncontrolCode","formatMessage","id","getDistrictByRegion","methodParam","URL","inputData","primarykey"],"mappings":"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","sourcesContent":["import { DEFAULT_RETURN } from './LoginTypes';\r\nimport rsapi from '../rsapi';\r\nimport { toast } from 'react-toastify';\r\nimport { sortData, constructOptionList } from '../components/CommonScript';\r\nimport { initRequest } from './LoginAction';\r\nimport { intl } from '../components/App';\r\nimport Axios from 'axios';\r\n\r\n\r\nexport function getSiteDetail(Site, userInfo, masterData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"site/getSiteScreen\", { nsitecode: Site.nsitecode, userinfo: userInfo })\r\n            .then(response => {\r\n                masterData = { ...masterData, ...response.data };\r\n                sortData(masterData);\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData, operation: null, modalName: undefined,\r\n                        loading: false, dataState: undefined\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n\r\n            })\r\n    }\r\n}\r\n\r\nexport function getSiteCombo(siteParam) {\r\n    return function (dispatch) {\r\n        let urlArray = [];\r\n        let selectedId = null;\r\n        const timeZoneService = rsapi.post(\"timezone/getTimeZone\");\r\n        const dateformat = rsapi.post(\"site/getDateFormat\", { userinfo: siteParam.userInfo });\r\n        if (siteParam.operation === \"create\") {\r\n\r\n            urlArray = [timeZoneService, dateformat];\r\n        }\r\n        else {\r\n\r\n            const SiteByID = rsapi.post(\"site/getActiveSiteById\", { [siteParam.primaryKeyField]: siteParam.primaryKeyValue, \"userinfo\": siteParam.userInfo });\r\n            const districtService = rsapi.post(\"site/getDistrict\", { userinfo: siteParam.userInfo,\"nregioncode\":  siteParam.editRow.nregioncode });\r\n            urlArray = [timeZoneService, dateformat, SiteByID,districtService];\r\n            selectedId = siteParam.primaryKeyValue;\r\n\r\n        }\r\n\r\n        dispatch(initRequest(true));\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n\r\n                let timezone = [];\r\n                let dateFormat = [];\r\n                let region=[];\r\n                let district=[];\r\n                let districtList=[];\r\n\r\n                let selectedRecord = {};\r\n                const timezoneMap = constructOptionList(response[0].data || [], \"ntimezonecode\",\r\n                    \"stimezoneid\", undefined, undefined, false);\r\n\r\n                const TimeZoneList = timezoneMap.get(\"OptionList\");\r\n\r\n                const dateFormatMap = constructOptionList(response[1].data.DateFormat || [], \"ndateformatcode\",\r\n                    \"sdateformat\", undefined, undefined, false);\r\n\r\n                const dateFormatList = dateFormatMap.get(\"OptionList\");\r\n\r\n                const regionMap = constructOptionList(response[1].data.Region || [], \"nregioncode\",\r\n                \"sregionname\", undefined, undefined, false);\r\n\r\n               const regionList = regionMap.get(\"OptionList\");\r\n               if (siteParam.operation === \"update\") {\r\n               const districtMap = constructOptionList(response[3].data.districtList || [], \"ndistrictcode\",\r\n                \"sdistrictname\", undefined, undefined, false);\r\n\r\n                districtList = districtMap.get(\"OptionList\");\r\n               }\r\n                if (siteParam.operation === \"update\") {\r\n\r\n                    selectedRecord = response[2].data;\r\n                    timezone.push({ \"value\": response[2].data[\"ntimezonecode\"], \"label\": response[2].data[\"stimezoneid\"] });\r\n                    dateFormat.push({ \"value\": response[2].data[\"ndateformatcode\"], \"label\": response[2].data[\"sdateformat\"] });\r\n                    region.push({ \"value\": response[2].data[\"nregioncode\"], \"label\": response[2].data[\"sregionname\"] });\r\n                    district.push({ \"value\": response[2].data[\"ndistrictcode\"], \"label\": response[2].data[\"sdistrictname\"] });\r\n\r\n                    selectedRecord[\"ntimezonecode\"] = timezone[0];\r\n                    selectedRecord[\"ndateformatcode\"] = dateFormat[0];\r\n                    selectedRecord[\"nregioncode\"] = region[0];\r\n                    selectedRecord[\"ndistrictcode\"] = district[0];\r\n\r\n                }\r\n                // else {\r\n                //     selectedRecord = {\r\n                //         ntimezonecode: {\r\n                //             \"label\": siteParam.userInfo.stimezoneid,\r\n                //             \"value\": siteParam.userInfo.ntimezonecode\r\n                //         }\r\n                //     };\r\n                // }\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        TimeZoneList, isOpen: true,\r\n                        selectedRecord: siteParam.operation === \"update\" ? selectedRecord : { \"ntransactionstatus\": 1 },\r\n                        operation: siteParam.operation, screenName: siteParam.screenName, selectedRecord,\r\n                        openModal: true,\r\n                        ncontrolCode: siteParam.ncontrolCode,\r\n                        loading: false, selectedId, dateFormatList,regionList,districtList\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(intl.formatMessage({ id: error.message }));\r\n                }\r\n                else {\r\n                    toast.warn(intl.formatMessage({ id: error.response.data }));\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getDistrictByRegion(methodParam) {\r\n    return function (dispatch) {\r\n        let URL = []; \r\n            URL=rsapi.post(\"/site/getDistrict\", { \"userinfo\": methodParam.inputData.userinfo, \"nregioncode\":  methodParam.inputData.primarykey  })\r\n         dispatch(initRequest(true));\r\n        Axios.all([URL])\r\n            .then(response => {\r\n                const districtMap = constructOptionList(response[0].data['districtList'] || [], \"ndistrictcode\",\r\n                \"sdistrictname\", undefined, undefined, false);               \r\n\r\n                const  districtList = districtMap.get(\"OptionList\"); \r\n                dispatch({ type: DEFAULT_RETURN, payload:\r\n                     { districtList, loading: false, data: undefined, dataState: undefined } })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}