{"ast":null,"code":"import rsapi from '../rsapi';\nimport { DEFAULT_RETURN } from './LoginTypes';\nimport { constructjsonOptionList, constructOptionList, getComboLabelValue } from '../components/CommonScript';\nimport { toast } from 'react-toastify';\nimport Axios from 'axios';\nimport { initRequest } from './LoginAction';\nimport { intl } from '../components/App'; //export function getMethodComboService (screenName, primaryKeyName, primaryKeyValue, operation, inputParam , userInfo, ncontrolCode) {            \n\nexport function getMaterialTypeComboService(methodParam) {\n  return function (dispatch) {\n    const methodTypeService = rsapi.post(\"materialcategory/getMaterialType\", {\n      userinfo: methodParam.userInfo\n    });\n    const barcodeService = rsapi.post(\"barcode/getBarcode\", {\n      userinfo: methodParam.userInfo\n    });\n    let urlArray = [];\n    let selectedId = null;\n\n    if (methodParam.operation === \"create\") {\n      urlArray = [methodTypeService, barcodeService];\n    } else {\n      const url = methodParam.inputParam.classUrl + \"/getActive\" + methodParam.inputParam.methodUrl + \"ById\"; //\"method/getActiveMethodById\"      \n\n      const methodById = rsapi.post(url, {\n        [methodParam.primaryKeyField]: methodParam.primaryKeyValue,\n        \"userinfo\": methodParam.userInfo\n      });\n      urlArray = [methodTypeService, barcodeService, methodById];\n      selectedId = methodParam.primaryKeyValue;\n    }\n\n    dispatch(initRequest(true));\n    Axios.all(urlArray).then(response => {\n      let selectedRecord = {};\n      const materialCatgeoryList = constructjsonOptionList(response[0].data, \"nmaterialtypecode\", \"smaterialtypename\", undefined, undefined, undefined, undefined, undefined, true, methodParam.userInfo.slanguagetypecode);\n      const barcodeList = constructOptionList(response[1].data, \"nbarcode\", \"sbarcodename\", undefined, undefined, undefined, undefined, undefined, true, methodParam.userInfo.slanguagetypecode); // const materialCatgeoryList = constructOptionList(response[0].data  ||[], \"nmaterialtypecode\",\n      // \"smaterialtypename\" , undefined, undefined, undefined);\n\n      const materialCatgeoryList1 = materialCatgeoryList.get(\"OptionList\");\n      const barcodeList1 = barcodeList.get(\"OptionList\");\n      const materialCatgeorydefault = materialCatgeoryList.get(\"DefaultValue\");\n\n      if (methodParam.operation === \"update\") {\n        selectedRecord = response[2].data;\n        selectedRecord[\"nmaterialtypecode\"] = getComboLabelValue(selectedRecord, response[0].data, \"nmaterialtypecode\", \"smaterialtypename\", 'jsondata', methodParam.userInfo.slanguagetypecode);\n        selectedRecord[\"nbarcode\"] = getComboLabelValue(selectedRecord, response[1].data, \"nbarcode\", \"sbarcodename\", 'jsondata', methodParam.userInfo.slanguagetypecode);\n      } else {\n        selectedRecord[\"nmaterialtypecode\"] = materialCatgeorydefault;\n      }\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          materialCatgeoryList: materialCatgeoryList1 || [],\n          barcodeList: barcodeList1 || [],\n          operation: methodParam.operation,\n          screenName: methodParam.screenName,\n          selectedRecord,\n          openModal: true,\n          ncontrolCode: methodParam.ncontrolCode,\n          loading: false,\n          selectedId,\n          needSectionwisedisabled: selectedRecord.needSectionwisedisabled\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(intl.formatMessage({\n          id: error.message\n        }));\n      } else {\n        toast.warn(intl.formatMessage({\n          id: error.response.data\n        }));\n      }\n    });\n  };\n}","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/actions/MaterialCategoryAction.js"],"names":["rsapi","DEFAULT_RETURN","constructjsonOptionList","constructOptionList","getComboLabelValue","toast","Axios","initRequest","intl","getMaterialTypeComboService","methodParam","dispatch","methodTypeService","post","userinfo","userInfo","barcodeService","urlArray","selectedId","operation","url","inputParam","classUrl","methodUrl","methodById","primaryKeyField","primaryKeyValue","all","then","response","selectedRecord","materialCatgeoryList","data","undefined","slanguagetypecode","barcodeList","materialCatgeoryList1","get","barcodeList1","materialCatgeorydefault","type","payload","screenName","openModal","ncontrolCode","loading","needSectionwisedisabled","catch","error","status","formatMessage","id","message","warn"],"mappings":"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","sourcesContent":["import rsapi from '../rsapi';\r\nimport { DEFAULT_RETURN } from './LoginTypes';\r\nimport { constructjsonOptionList, constructOptionList, getComboLabelValue } from '../components/CommonScript'\r\nimport { toast } from 'react-toastify';\r\nimport Axios from 'axios';\r\nimport { initRequest } from './LoginAction';\r\nimport { intl } from '../components/App';\r\n\r\n//export function getMethodComboService (screenName, primaryKeyName, primaryKeyValue, operation, inputParam , userInfo, ncontrolCode) {            \r\nexport function getMaterialTypeComboService(methodParam) {\r\n    return function (dispatch) {\r\n        const methodTypeService = rsapi.post(\"materialcategory/getMaterialType\",\r\n            { userinfo: methodParam.userInfo });\r\n        const barcodeService = rsapi.post(\"barcode/getBarcode\",\r\n            { userinfo: methodParam.userInfo });\r\n        let urlArray = [];\r\n        let selectedId = null;\r\n        if (methodParam.operation === \"create\") {\r\n            urlArray = [methodTypeService,barcodeService];\r\n        }\r\n        else {\r\n            const url = methodParam.inputParam.classUrl + \"/getActive\" + methodParam.inputParam.methodUrl + \"ById\";   //\"method/getActiveMethodById\"      \r\n            const methodById = rsapi.post(url, { [methodParam.primaryKeyField]: methodParam.primaryKeyValue, \"userinfo\": methodParam.userInfo });\r\n            urlArray = [methodTypeService,barcodeService, methodById];\r\n            selectedId = methodParam.primaryKeyValue;\r\n        }\r\n        dispatch(initRequest(true));\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n\r\n                let selectedRecord = {};\r\n\r\n                const materialCatgeoryList = constructjsonOptionList(response[0].data,\r\n                    \"nmaterialtypecode\", \"smaterialtypename\", undefined, undefined,\r\n                    undefined, undefined,\r\n                    undefined, true, methodParam.userInfo.slanguagetypecode)\r\n                    const barcodeList = constructOptionList(response[1].data,\r\n                        \"nbarcode\", \"sbarcodename\", undefined, undefined,\r\n                        undefined, undefined,\r\n                        undefined, true, methodParam.userInfo.slanguagetypecode)\r\n\r\n                // const materialCatgeoryList = constructOptionList(response[0].data  ||[], \"nmaterialtypecode\",\r\n                // \"smaterialtypename\" , undefined, undefined, undefined);\r\n                const materialCatgeoryList1 = materialCatgeoryList.get(\"OptionList\");\r\n                const barcodeList1 = barcodeList.get(\"OptionList\");\r\n                const materialCatgeorydefault = materialCatgeoryList.get(\"DefaultValue\");\r\n\r\n\r\n                if (methodParam.operation === \"update\") {\r\n                   selectedRecord = response[2].data; \r\n                    selectedRecord[\"nmaterialtypecode\"] = getComboLabelValue(selectedRecord, response[0].data,\r\n                        \"nmaterialtypecode\", \"smaterialtypename\", 'jsondata', methodParam.userInfo.slanguagetypecode);\r\n                        selectedRecord[\"nbarcode\"] = getComboLabelValue(selectedRecord, response[1].data,\r\n                            \"nbarcode\", \"sbarcodename\", 'jsondata', methodParam.userInfo.slanguagetypecode);\r\n\r\n                } else {\r\n                    selectedRecord[\"nmaterialtypecode\"] = materialCatgeorydefault;\r\n                }\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        materialCatgeoryList: materialCatgeoryList1 || [],\r\n                        barcodeList:barcodeList1 || [],\r\n                        operation: methodParam.operation, screenName: methodParam.screenName, selectedRecord,\r\n                        openModal: true,\r\n                        ncontrolCode: methodParam.ncontrolCode,\r\n                        loading: false, selectedId,\r\n                        needSectionwisedisabled: selectedRecord.needSectionwisedisabled\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(intl.formatMessage({ id: error.message }));\r\n                }\r\n                else {\r\n                    toast.warn(intl.formatMessage({ id: error.response.data }));\r\n                }\r\n            })\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}