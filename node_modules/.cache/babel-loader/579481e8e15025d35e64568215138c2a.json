{"ast":null,"code":"import { toast } from \"react-toastify\";\nimport { intl } from \"../components/App\";\nimport { constructOptionList, sortData } from \"../components/CommonScript\";\nimport rsapi from \"../rsapi\";\nimport { initRequest } from \"./LoginAction\";\nimport { DEFAULT_RETURN } from \"./LoginTypes\";\nexport function getUserTechniqueViewDetail(inputData, userInfo, masterData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    return rsapi.post(\"usertechniqueview/getUserTechniqueViewDetails\", {\n      \"userinfo\": userInfo,\n      \"ntrainingcode\": inputData.ntrainingcode,\n      \"nparticipantcode\": inputData.nparticipantcode\n    }).then(response => {\n      masterData = { ...masterData,\n        ...response.data\n      };\n      sortData(masterData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(intl.formatMessage({\n          id: error.message\n        }));\n      } else {\n        toast.warn(intl.formatMessage({\n          id: error.response\n        }));\n      }\n    });\n  };\n}\nexport const changeUserTechniqueViewFilter = (inputParam, filterTechnique, filterUsers) => {\n  return dispatch => {\n    dispatch(initRequest(true));\n    rsapi.post(\"/usertechniqueview/get\" + inputParam.methodUrl, inputParam.inputData).then(response => {\n      let responseData = { ...response.data\n      };\n      responseData = sortData(responseData);\n      let masterData = { ...inputParam.masterData,\n        ...responseData\n      };\n\n      if (inputParam.searchRef !== undefined && inputParam.searchRef.current !== null) {\n        inputParam.searchRef.current.value = \"\";\n        masterData['searchedData'] = undefined;\n      }\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false,\n          masterData: { ...masterData,\n            filterTechnique,\n            filterUsers\n          }\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n};\nexport function getUserTechniqueViewFilterChange(ntechniquecode, data, userInfo) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"usertechniqueview/getUserForUserTechniqueView1\", {\n      ntechniquecode,\n      \"userinfo\": userInfo\n    }).then(response => {\n      const masterData = { ...data,\n        ...response.data,\n        searchedData: undefined\n      };\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n      toast.error(intl.formatMessage({\n        id: error.message\n      }));\n    });\n  };\n}","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/actions/TrainingUserTechniqueViewAction.js"],"names":["toast","intl","constructOptionList","sortData","rsapi","initRequest","DEFAULT_RETURN","getUserTechniqueViewDetail","inputData","userInfo","masterData","dispatch","post","ntrainingcode","nparticipantcode","then","response","data","type","payload","loading","catch","error","status","formatMessage","id","message","warn","changeUserTechniqueViewFilter","inputParam","filterTechnique","filterUsers","methodUrl","responseData","searchRef","undefined","current","value","getUserTechniqueViewFilterChange","ntechniquecode","searchedData"],"mappings":"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","sourcesContent":["import { toast } from \"react-toastify\";\r\nimport { intl } from \"../components/App\";\r\nimport { constructOptionList,sortData } from \"../components/CommonScript\";\r\nimport rsapi from \"../rsapi\";\r\nimport { initRequest } from \"./LoginAction\";\r\nimport { DEFAULT_RETURN } from \"./LoginTypes\";\r\n\r\nexport function getUserTechniqueViewDetail(inputData, userInfo,masterData) {\r\n    return function (dispatch) {\r\n\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"usertechniqueview/getUserTechniqueViewDetails\", {\r\n            \"userinfo\": userInfo,\"ntrainingcode\": inputData.ntrainingcode,\r\n            \"nparticipantcode\":inputData.nparticipantcode\r\n\r\n        })\r\n            .then(response => {\r\n\r\n                masterData = { ...masterData, ...response.data };\r\n\r\n                sortData(masterData);\r\n                dispatch({ type: DEFAULT_RETURN, payload: { masterData, loading: false } });\r\n            }).catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(intl.formatMessage({ id: error.message }));\r\n                }\r\n                else {\r\n                    toast.warn(intl.formatMessage({ id: error.response }));\r\n                }\r\n            })\r\n\r\n    }\r\n}\r\n\r\nexport const changeUserTechniqueViewFilter = (inputParam, filterTechnique,filterUsers) => {\r\n    return (dispatch) => {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/usertechniqueview/get\" + inputParam.methodUrl, inputParam.inputData)\r\n            .then(response => {\r\n                let responseData = { ...response.data }\r\n                responseData = sortData(responseData)\r\n                let masterData = {\r\n                    ...inputParam.masterData,\r\n                    ...responseData,\r\n                }\r\n                if (inputParam.searchRef !== undefined && inputParam.searchRef.current !== null) {\r\n                    inputParam.searchRef.current.value = \"\";\r\n                    masterData['searchedData'] = undefined\r\n                }\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false,\r\n                        masterData: {\r\n                            ...masterData,\r\n                            filterTechnique,\r\n                            filterUsers\r\n\r\n                        }\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            });\r\n    }\r\n}\r\n\r\n\r\nexport function getUserTechniqueViewFilterChange(ntechniquecode, data, userInfo) {\r\n    return function (dispatch) { dispatch(initRequest(true));\r\n     rsapi.post(\"usertechniqueview/getUserForUserTechniqueView1\", { ntechniquecode, \"userinfo\": userInfo })\r\n     .then(response => {\r\n    const masterData = { ...data, ...response.data, searchedData: undefined }\r\n     dispatch({ type: DEFAULT_RETURN, payload: {\r\n     masterData, loading: false\r\n     }\r\n      });\r\n     })\r\n    .catch(error => {\r\n      dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n      toast.error(intl.formatMessage({ id: error.message }));\r\n     });\r\n     }}\r\n    \r\n\r\n"]},"metadata":{},"sourceType":"module"}