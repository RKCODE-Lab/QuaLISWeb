{"ast":null,"code":"var _jsxFileName = \"D:\\\\LIMSWFH\\\\LIMSPOSTGRESQL\\\\QuaLISWeb\\\\src\\\\pages\\\\basemaster\\\\Site.jsx\";\nimport React from 'react';\nimport { ListWrapper } from '../../components/client-group.styles';\nimport { Row, Col } from 'react-bootstrap';\nimport { toast } from 'react-toastify';\nimport { process } from '@progress/kendo-data-query';\nimport { connect } from 'react-redux';\nimport { injectIntl } from 'react-intl';\nimport { callService, crudMaster, getSiteCombo, updateStore, validateEsignCredential, getDistrictByRegion } from '../../actions';\nimport DataGrid from '../../components/data-grid/data-grid.component';\nimport Esign from '../../pages/audittrail/Esign';\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\nimport AddSite from './AddSite';\nimport { showEsign, getControlMap, validateEmail, validatePhoneNumber } from '../../components/CommonScript';\nimport { transactionStatus } from '../../components/Enumeration';\n\nconst mapStateToProps = state => {\n  return {\n    Login: state.Login\n  };\n};\n\nclass Site extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.dataStateChange = event => {\n      this.setState({\n        dataResult: process(this.state.data, event.dataState),\n        dataState: event.dataState\n      });\n    };\n\n    this.closeModal = () => {\n      let loadEsign = this.props.Login.loadEsign;\n      let openModal = this.props.Login.openModal;\n      let selectedRecord = this.props.Login.selectedRecord;\n      let selectedId = this.props.Login.selectedId;\n\n      if (this.props.Login.loadEsign) {\n        if (this.props.Login.operation === \"delete\") {\n          loadEsign = false;\n          openModal = false;\n          selectedRecord = {};\n        } else {\n          loadEsign = false;\n          selectedRecord['esignpassword'] = \"\";\n          selectedRecord['esigncomments'] = \"\";\n          selectedRecord['esignreason'] = \"\";\n        }\n      } else {\n        openModal = false;\n        selectedRecord = {};\n        this.props.Login.districtList = [];\n        selectedId = null;\n      }\n\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          openModal,\n          loadEsign,\n          selectedRecord,\n          selectedId\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onInputOnChange = event => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (event.target.type === 'checkbox') {\n        selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\n      } else {\n        if (event.target.name === \"sphoneno\") {\n          if (event.target.value !== \"\") {\n            event.target.value = validatePhoneNumber(event.target.value);\n            selectedRecord[event.target.name] = event.target.value !== \"\" ? event.target.value : selectedRecord[event.target.name];\n          } else {\n            selectedRecord[event.target.name] = event.target.value;\n          }\n        } else {\n          selectedRecord[event.target.name] = event.target.value;\n        }\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onComboChange = (comboData, fieldName) => {\n      if (comboData !== null) {\n        const selectedRecord = this.state.selectedRecord || {};\n        selectedRecord[fieldName] = comboData;\n\n        if (fieldName == \"nregioncode\") {\n          this.props.getDistrictByRegion({\n            inputData: {\n              userinfo: this.props.Login.userInfo,\n              sdisplayname: selectedRecord.nregioncode.label,\n              primarykey: selectedRecord.nregioncode.value\n            }\n          });\n          selectedRecord[\"ndistrictcode\"] = \"\";\n        }\n\n        this.setState({\n          selectedRecord\n        });\n      }\n    };\n\n    this.deleteRecord = deleteParam => {\n      const inputParam = {\n        classUrl: this.props.Login.inputParam.classUrl,\n        methodUrl: this.props.Login.inputParam.methodUrl,\n        displayName: this.props.Login.inputParam.displayName,\n        inputData: {\n          [\"site\"]: deleteParam.selectedRecord,\n          \"userinfo\": this.props.Login.userInfo\n        },\n        operation: deleteParam.operation,\n        dataState: this.state.dataState\n      };\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, deleteParam.ncontrolCode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData: this.props.Login.masterData\n            },\n            openModal: true,\n            screenName: this.props.intl.formatMessage({\n              id: this.props.Login.inputParam.displayName\n            }),\n            operation: deleteParam.operation\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\n      }\n    };\n\n    this.reloadData = () => {\n      const inputParam = {\n        inputData: {\n          \"userinfo\": this.props.Login.userInfo\n        },\n        classUrl: this.props.Login.inputParam.classUrl,\n        methodUrl: this.props.Login.inputParam.methodUrl,\n        displayName: \"IDS_SITE\",\n        userInfo: this.props.Login.userInfo\n      };\n      this.props.callService(inputParam);\n    };\n\n    this.onSaveClick = (saveType, formRef) => {\n      //add / edit\n      const isValidateEmail = this.state.selectedRecord[\"semail\"] ? validateEmail(this.state.selectedRecord[\"semail\"]) : true;\n\n      if (isValidateEmail) {\n        let dataState = undefined;\n        let operation = \"\";\n        let inputData = [];\n        let selectedId = null;\n        inputData[\"userinfo\"] = this.props.Login.userInfo;\n        let postParam = {\n          selectedObject: \"selectedSite\",\n          primaryKeyField: \"nsitecode\",\n          inputListName: \"Site\",\n          fecthInputObject: {\n            userinfo: this.props.Login.userInfo\n          }\n        };\n\n        if (this.props.Login.operation === \"update\") {\n          selectedId = this.props.Login.selectedRecord.nsitecode;\n          inputData[\"site\"] = {\n            \"nsitecode\": this.props.Login.selectedRecord.nsitecode,\n            \"nmastersitecode\": this.props.Login.userInfo.nmastersitecode,\n            \"scontactperson\": this.state.selectedRecord.scontactperson !== null ? this.state.selectedRecord.scontactperson : \"\",\n            \"ssiteaddress\": this.state.selectedRecord.ssiteaddress,\n            \"sphoneno\": this.state.selectedRecord.sphoneno,\n            \"ssitename\": this.state.selectedRecord.ssitename,\n            \"ssitecode\": this.state.selectedRecord.ssitecode !== null ? this.state.selectedRecord.ssitecode : \"-1\",\n            \"sfaxno\": this.state.selectedRecord.sfaxno,\n            \"semail\": this.state.selectedRecord.semail !== null ? this.state.selectedRecord.semail : \"\",\n            \"ndefaultstatus\": this.state.selectedRecord.ndefaultstatus,\n            \"ndateformatcode\": this.state.selectedRecord.ndateformatcode !== null ? this.state.selectedRecord.ndateformatcode.value : \"-1\"\n          };\n\n          if (this.state.selectedRecord.ndateformatcode.label !== undefined) {\n            inputData[\"sitedateformat\"] = {\n              \"ssitereportdatetime\": this.state.selectedRecord.ndateformatcode !== undefined ? this.state.selectedRecord.ndateformatcode.label + ' HH:mm:ss' : null,\n              \"ssitereportdate\": this.state.selectedRecord.ndateformatcode !== undefined ? this.state.selectedRecord.ndateformatcode.label : null,\n              \"ssitedate\": this.state.selectedRecord.ndateformatcode !== undefined ? this.state.selectedRecord.ndateformatcode.label : null,\n              \"spgdatetime\": this.state.selectedRecord.ndateformatcode !== undefined ? this.state.selectedRecord.ndateformatcode.label + ' HH24:mi:ss' : null,\n              \"spgreportdatetime\": this.state.selectedRecord.ndateformatcode !== undefined ? this.state.selectedRecord.ndateformatcode.label + ' HH24:mi:ss' : null,\n              \"ssitedatetime\": this.state.selectedRecord.ndateformatcode !== undefined ? this.state.selectedRecord.ndateformatcode.label + ' HH:mm:ss' : null,\n              \"nisdistributed\": this.state.selectedRecord.nisdistributed !== null ? this.state.selectedRecord.nisdistributed : 4\n            };\n          }\n\n          operation = \"update\";\n          dataState = this.state.dataState;\n          selectedId = this.props.Login.selectedId;\n        } else {\n          inputData[\"site\"] = {\n            \"nmastersitecode\": this.props.Login.userInfo.nmastersitecode,\n            \"scontactperson\": this.state.selectedRecord.scontactperson !== null ? this.state.selectedRecord.scontactperson : \"\",\n            \"ssiteaddress\": this.state.selectedRecord.ssiteaddress,\n            \"sphoneno\": this.state.selectedRecord.sphoneno,\n            \"ssitename\": this.state.selectedRecord.ssitename,\n            \"ssitecode\": this.state.selectedRecord.ssitecode !== null ? this.state.selectedRecord.ssitecode : \"-1\",\n            \"sfaxno\": this.state.selectedRecord.sfaxno,\n            \"semail\": this.state.selectedRecord.semail !== null ? this.state.selectedRecord.semail : \"\",\n            \"ndefaultstatus\": this.state.selectedRecord.ndefaultstatus,\n            \"ndateformatcode\": this.props.Login.settings['20'] === \"true\" ? this.state.selectedRecord.ndateformatcode.value : \"-1\"\n          }; //  if (this.state.selectedRecord.ndateformatcode && this.state.selectedRecord.ndateformatcode.label !== undefined) {\n\n          inputData[\"sitedateformat\"] = {\n            \"ssitereportdatetime\": this.state.selectedRecord.ndateformatcode !== undefined ? this.state.selectedRecord.ndateformatcode.label + ' HH:mm:ss' : null,\n            \"ssitereportdate\": this.state.selectedRecord.ndateformatcode !== undefined ? this.state.selectedRecord.ndateformatcode.label : null,\n            \"ssitedate\": this.state.selectedRecord.ndateformatcode !== undefined ? this.state.selectedRecord.ndateformatcode.label : null,\n            \"spgdatetime\": this.state.selectedRecord.ndateformatcode !== undefined ? this.state.selectedRecord.ndateformatcode.label + ' HH24:mi:ss' : null,\n            \"spgreportdatetime\": this.state.selectedRecord.ndateformatcode !== undefined ? this.state.selectedRecord.ndateformatcode.label + ' HH24:mi:ss' : null,\n            \"ssitedatetime\": this.state.selectedRecord.ndateformatcode !== undefined ? this.state.selectedRecord.ndateformatcode.label + ' HH:mm:ss' : null,\n            \"nisdistributed\": this.state.selectedRecord.nisdistributed !== null ? this.state.selectedRecord.nisdistributed : 4\n          }; // }\n\n          operation = \"create\";\n        }\n\n        inputData[\"site\"][\"ntimezonecode\"] = this.state.selectedRecord[\"ntimezonecode\"] ? this.state.selectedRecord[\"ntimezonecode\"].value : \"-1\";\n        inputData[\"site\"][\"nregioncode\"] = this.state.selectedRecord[\"nregioncode\"] ? this.state.selectedRecord[\"nregioncode\"].value : transactionStatus.NA;\n        inputData[\"site\"][\"ndistrictcode\"] = this.state.selectedRecord[\"ndistrictcode\"] ? this.state.selectedRecord[\"ndistrictcode\"].value : transactionStatus.NA;\n        const inputParam = {\n          classUrl: \"site\",\n          methodUrl: \"SiteScreen\",\n          displayName: this.props.Login.inputParam.displayName,\n          inputData: inputData,\n          postParam,\n          searchRef: this.searchRef,\n          operation: operation,\n          saveType,\n          formRef,\n          dataState,\n          selectedId\n        };\n        const masterData = this.props.Login.masterData;\n\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              loadEsign: true,\n              screenData: {\n                inputParam,\n                masterData\n              },\n              saveType\n            }\n          };\n          this.props.updateStore(updateInfo);\n        } else {\n          this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\n        }\n      } else {\n        toast.info(this.props.intl.formatMessage({\n          id: \"IDS_ENTERVALIDEMAIL\"\n        }));\n      }\n    };\n\n    this.validateEsign = () => {\n      const inputParam = {\n        inputData: {\n          \"userinfo\": { ...this.props.Login.userInfo,\n            sreason: this.state.selectedRecord[\"esigncomments\"],\n            nreasoncode: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].value,\n            spredefinedreason: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].label\n          },\n          password: this.state.selectedRecord[\"esignpassword\"]\n        },\n        screenData: this.props.Login.screenData\n      };\n      this.props.validateEsignCredential(inputParam, \"openModal\");\n    };\n\n    this.formRef = React.createRef();\n    const _dataState = {\n      skip: 0,\n      take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n    };\n    this.state = {\n      data: [],\n      masterStatus: \"\",\n      error: \"\",\n      selectedRecord: {},\n      dataResult: [],\n      dataState: _dataState,\n      userRoleControlRights: [],\n      controlMap: new Map()\n    };\n    this.extractedColumnList = [{\n      \"idsName\": \"IDS_SITE\",\n      \"dataField\": \"ssitename\",\n      \"width\": \"200px\"\n    }, //  { \"idsName\": \"IDS_SITECODE\", \"dataField\": \"ssitecode\", \"width\": \"200px\" },\n    {\n      \"idsName\": \"IDS_SCONTACTPERSON\",\n      \"dataField\": \"scontactperson\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_DEFAULTSTATUS\",\n      \"dataField\": \"stransdisplaystatus\",\n      \"width\": \"250px\"\n    }];\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\n      toast.warn(props.Login.masterStatus);\n      props.Login.masterStatus = \"\";\n    }\n\n    if (props.Login.error !== state.error) {\n      toast.error(props.Login.error);\n      props.Login.error = \"\";\n    }\n\n    return null;\n  }\n\n  render() {\n    const addId = this.state.controlMap.has(\"AddSite\") && this.state.controlMap.get(\"AddSite\").ncontrolcode;\n    const editId = this.state.controlMap.has(\"EditSite\") && this.state.controlMap.get(\"EditSite\").ncontrolcode;\n    const addParam = {\n      screenName: \"Site\",\n      primaryeyField: \"nsitecode\",\n      primaryKeyValue: undefined,\n      operation: \"create\",\n      inputParam: this.props.Login.inputParam,\n      userInfo: this.props.Login.userInfo,\n      ncontrolCode: addId\n    };\n    const editParam = {\n      screenName: \"Site\",\n      operation: \"update\",\n      primaryKeyField: \"nsitecode\",\n      inputParam: this.props.Login.inputParam,\n      userInfo: this.props.Login.userInfo,\n      ncontrolCode: editId\n    };\n    const deleteParam = {\n      operation: \"delete\"\n    }; // this.detailedFieldList = [\n    //     { \"idsName\": \"IDS_SITECODE\", \"dataField\": \"ssitecode\", \"width\": \"300px\",\"columnSize\": \"4\" },\n    //     { \"idsName\": \"IDS_REGION\", \"dataField\": \"sregionname\", \"width\": \"300px\",\"columnSize\": \"4\" },\n    //     { \"idsName\": \"IDS_DISTRICT\", \"dataField\": \"sdistrictname\", \"width\": \"300px\",\"columnSize\": \"4\" },\n    //     { \"idsName\": \"IDS_PHONENO\", \"dataField\": \"sphoneno\", \"width\": \"300px\",\"columnSize\": \"4\" },\n    //     { \"idsName\": \"IDS_FAXNO\", \"dataField\": \"sfaxno\", \"width\": \"250px\" ,\"columnSize\": \"4\"},\n    //     { \"idsName\": \"IDS_EMAIL\", \"dataField\": \"semail\", \"width\": \"250px\" ,\"columnSize\": \"4\"},\n    //     { \"idsName\": \"IDS_TIMEZONE\", \"dataField\": \"stimezoneid\", \"width\": \"250px\" ,\"columnSize\": \"4\"},\n    //     { \"idsName\": \"IDS_SITEDATE\", \"dataField\": \"sdateformat\", \"width\": \"250px\",\"columnSize\": \"4\" },\n    //     { \"idsName\": \"IDS_NEEDDISTRIBUTED\", \"dataField\": \"sdistributedstatus\", \"width\": \"250px\", \"columnSize\": \"4\" },\n    //     { \"idsName\": \"IDS_SITEADDRESS\", \"dataField\": \"ssiteaddress\", \"width\": \"200px\",\"columnSize\": \"4\" }\n    // ];\n\n    this.props.Login.settings && this.props.Login.settings['21'] == \"true\" ? this.detailedFieldList = [{\n      \"idsName\": \"IDS_SITECODE\",\n      \"dataField\": \"ssitecode\",\n      \"width\": \"300px\",\n      \"columnSize\": \"4\"\n    }, {\n      \"idsName\": \"IDS_REGIONNAME\",\n      \"dataField\": \"sregionname\",\n      \"width\": \"300px\",\n      \"columnSize\": \"4\"\n    }, {\n      \"idsName\": \"IDS_DISTRICTNAME\",\n      \"dataField\": \"sdistrictname\",\n      \"width\": \"300px\",\n      \"columnSize\": \"4\"\n    }, {\n      \"idsName\": \"IDS_NEEDDISTRIBUTED\",\n      \"dataField\": \"sdistributedstatus\",\n      \"width\": \"250px\",\n      \"columnSize\": \"4\"\n    }] : this.props.Login.settings && this.props.Login.settings['20'] === \"true\" ? this.detailedFieldList = [{\n      \"idsName\": \"IDS_TIMEZONE\",\n      \"dataField\": \"stimezoneid\",\n      \"width\": \"250px\",\n      \"columnSize\": \"4\"\n    }, {\n      \"idsName\": \"IDS_SITEDATE\",\n      \"dataField\": \"sdateformat\",\n      \"width\": \"250px\",\n      \"columnSize\": \"4\"\n    }] : this.detailedFieldList = [{\n      \"idsName\": \"IDS_PHONENO\",\n      \"dataField\": \"sphoneno\",\n      \"width\": \"300px\",\n      \"columnSize\": \"4\"\n    }, {\n      \"idsName\": \"IDS_FAXNO\",\n      \"dataField\": \"sfaxno\",\n      \"width\": \"250px\",\n      \"columnSize\": \"4\"\n    }, {\n      \"idsName\": \"IDS_EMAIL\",\n      \"dataField\": \"semail\",\n      \"width\": \"250px\",\n      \"columnSize\": \"4\"\n    }, {\n      \"idsName\": \"IDS_SITEADDRESS\",\n      \"dataField\": \"ssiteaddress\",\n      \"width\": \"200px\",\n      \"columnSize\": \"4\"\n    }];\n    let mandatoryFields = []; // mandatoryFields.push(\n    //     { \"mandatory\": true, \"idsName\": \"IDS_SITENAME\", \"dataField\": \"ssitename\", \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"textbox\" },\n    //    (this.props.Login.settings['21']==\"true\"?\n    //     { \"mandatory\": true, \"idsName\": \"IDS_SITECODE\", \"dataField\": \"ssitecode\", \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"textbox\" }:\"\")\n    //     )\n    //  if (this.props.Login.settings['20']==\"true\"){\n    //     mandatoryFields.push(\n    //     { \"mandatory\": true, \"idsName\": \"IDS_TIMEZONE\", \"dataField\": \"ntimezonecode\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" },\n    //     { \"mandatory\": true, \"idsName\": \"IDS_SITEDATE\", \"dataField\": \"ndateformatcode\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" }\n    // )}\n    //if(this.props.Login.settings['21']===\"true\"){\n\n    this.props.Login.settings && this.props.Login.settings['21'] == \"true\" ? mandatoryFields.push({\n      \"mandatory\": true,\n      \"idsName\": \"IDS_SITECODE\",\n      \"dataField\": \"ssitecode\",\n      \"mandatoryLabel\": \"IDS_ENTER\",\n      \"controlType\": \"textbox\"\n    }) : this.props.Login.settings && this.props.Login.settings['21'] === \"true\" ? mandatoryFields.push({\n      \"mandatory\": true,\n      \"idsName\": \"IDS_TIMEZONE\",\n      \"dataField\": \"ntimezonecode\",\n      \"mandatoryLabel\": \"IDS_SELECT\",\n      \"controlType\": \"selectbox\"\n    }, {\n      \"mandatory\": true,\n      \"idsName\": \"IDS_SITEDATE\",\n      \"dataField\": \"ndateformatcode\",\n      \"mandatoryLabel\": \"IDS_SELECT\",\n      \"controlType\": \"selectbox\"\n    }) : mandatoryFields.push({\n      \"mandatory\": true,\n      \"idsName\": \"IDS_SITENAME\",\n      \"dataField\": \"ssitename\",\n      \"mandatoryLabel\": \"IDS_ENTER\",\n      \"controlType\": \"textbox\"\n    });\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(ListWrapper, {\n      className: \"client-list-content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 25\n      }\n    }, this.state.data ? /*#__PURE__*/React.createElement(DataGrid, {\n      primaryKeyField: \"nsitecode\",\n      data: this.state.data,\n      dataResult: this.state.dataResult,\n      dataState: this.state.dataState,\n      dataStateChange: this.dataStateChange,\n      methodUrl: \"Site\",\n      extractedColumnList: this.extractedColumnList,\n      detailedFieldList: this.detailedFieldList,\n      expandField: \"expanded\",\n      fetchRecord: this.props.getSiteCombo,\n      editParam: editParam,\n      deleteRecord: this.deleteRecord,\n      deleteParam: deleteParam,\n      reloadData: this.reloadData,\n      controlMap: this.state.controlMap,\n      userRoleControlRights: this.state.userRoleControlRights,\n      inputParam: this.props.Login.inputParam,\n      userInfo: this.props.Login.userInfo,\n      pageable: true,\n      scrollable: 'scrollable',\n      gridHeight: '600px',\n      isActionRequired: true,\n      isToolBarRequired: true,\n      selectedId: this.props.Login.selectedId,\n      addRecord: () => this.props.getSiteCombo(addParam),\n      hasDynamicColSize: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 33\n      }\n    }) : \"\"))), this.props.Login.openModal ? /*#__PURE__*/React.createElement(SlideOutModal, {\n      show: this.props.Login.openModal,\n      closeModal: this.closeModal,\n      operation: this.props.Login.operation,\n      inputParam: this.props.Login.inputParam,\n      screenName: this.props.Login.screenName,\n      onSaveClick: this.onSaveClick,\n      esign: this.props.Login.loadEsign,\n      validateEsign: this.validateEsign,\n      masterStatus: this.props.Login.masterStatus,\n      updateStore: this.props.updateStore,\n      selectedRecord: this.state.selectedRecord || {},\n      mandatoryFields: mandatoryFields,\n      addComponent: this.props.Login.loadEsign ? /*#__PURE__*/React.createElement(Esign, {\n        operation: this.props.Login.operation,\n        onInputOnChange: this.onInputOnChange,\n        inputParam: this.props.Login.inputParam,\n        selectedRecord: this.state.selectedRecord || {},\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 230,\n          columnNumber: 29\n        }\n      }) : /*#__PURE__*/React.createElement(AddSite, {\n        selectedRecord: this.state.selectedRecord || {},\n        onInputOnChange: this.onInputOnChange,\n        onComboChange: this.onComboChange,\n        TimeZoneList: this.props.Login.TimeZoneList || [],\n        dateFormatList: this.props.Login.dateFormatList || [],\n        operation: this.props.Login.operation,\n        regionList: this.props.Login.regionList,\n        districtList: this.props.Login.districtList,\n        needUTCConversation: this.props.Login.settings[21],\n        needDistributedArchitecture: this.props.Login.settings[22],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 235,\n          columnNumber: 31\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 21\n      }\n    }) : \"\");\n  }\n\n  componentDidUpdate(previousProps) {\n    if (this.props.Login.masterData !== previousProps.Login.masterData) {\n      if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\n        const userRoleControlRights = [];\n\n        if (this.props.Login.userRoleControlRights) {\n          this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item => userRoleControlRights.push(item.ncontrolcode));\n        }\n\n        const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode);\n        this.setState({\n          userRoleControlRights,\n          controlMap,\n          data: this.props.Login.masterData,\n          dataResult: process(this.props.Login.masterData, this.state.dataState)\n        });\n      } else {\n        let {\n          dataState\n        } = this.state;\n\n        if (this.props.Login.dataState === undefined) {\n          dataState = {\n            skip: 0,\n            take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n          };\n        }\n\n        this.setState({\n          data: this.props.Login.masterData,\n          selectedRecord: this.props.Login.selectedRecord,\n          dataResult: process(this.props.Login.masterData, dataState),\n          dataState\n        });\n      }\n    } else if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\n      this.setState({\n        selectedRecord: this.props.Login.selectedRecord\n      });\n    }\n  }\n\n}\n\nexport default connect(mapStateToProps, {\n  callService,\n  crudMaster,\n  getSiteCombo,\n  updateStore,\n  validateEsignCredential,\n  getDistrictByRegion\n})(injectIntl(Site));","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/pages/basemaster/Site.jsx"],"names":["React","ListWrapper","Row","Col","toast","process","connect","injectIntl","callService","crudMaster","getSiteCombo","updateStore","validateEsignCredential","getDistrictByRegion","DataGrid","Esign","DEFAULT_RETURN","SlideOutModal","AddSite","showEsign","getControlMap","validateEmail","validatePhoneNumber","transactionStatus","mapStateToProps","state","Login","Site","Component","constructor","props","dataStateChange","event","setState","dataResult","data","dataState","closeModal","loadEsign","openModal","selectedRecord","selectedId","operation","districtList","updateInfo","typeName","onInputOnChange","target","type","name","checked","YES","NO","value","onComboChange","comboData","fieldName","inputData","userinfo","userInfo","sdisplayname","nregioncode","label","primarykey","deleteRecord","deleteParam","inputParam","classUrl","methodUrl","displayName","userRoleControlRights","nformcode","ncontrolCode","screenData","masterData","screenName","intl","formatMessage","id","reloadData","onSaveClick","saveType","formRef","isValidateEmail","undefined","postParam","selectedObject","primaryKeyField","inputListName","fecthInputObject","nsitecode","nmastersitecode","scontactperson","ssiteaddress","sphoneno","ssitename","ssitecode","sfaxno","semail","ndefaultstatus","ndateformatcode","nisdistributed","settings","NA","searchRef","info","validateEsign","sreason","nreasoncode","spredefinedreason","password","createRef","skip","take","parseInt","masterStatus","error","controlMap","Map","extractedColumnList","getDerivedStateFromProps","warn","render","addId","has","get","ncontrolcode","editId","addParam","primaryeyField","primaryKeyValue","editParam","detailedFieldList","mandatoryFields","push","TimeZoneList","dateFormatList","regionList","componentDidUpdate","previousProps","Object","values","map","item"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { ListWrapper } from '../../components/client-group.styles';\r\nimport { Row, Col } from 'react-bootstrap';\r\nimport { toast } from 'react-toastify';\r\nimport { process } from '@progress/kendo-data-query';\r\n\r\nimport { connect } from 'react-redux';\r\nimport { injectIntl } from 'react-intl';\r\nimport { callService, crudMaster, getSiteCombo, updateStore, validateEsignCredential, getDistrictByRegion} from '../../actions';\r\n\r\nimport DataGrid from '../../components/data-grid/data-grid.component';\r\n\r\nimport Esign from '../../pages/audittrail/Esign';\r\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\r\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\r\nimport AddSite from './AddSite';\r\n\r\nimport { showEsign, getControlMap, validateEmail, validatePhoneNumber } from '../../components/CommonScript';\r\nimport { transactionStatus } from '../../components/Enumeration';\r\n\r\n\r\nconst mapStateToProps = state => {\r\n    return ({ Login: state.Login })\r\n}\r\n\r\nclass Site extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.formRef = React.createRef();\r\n\r\n        const dataState = {\r\n            skip: 0,\r\n            take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5,\r\n        };\r\n        this.state = {\r\n            data: [], masterStatus: \"\", error: \"\", selectedRecord: {},\r\n            dataResult: [],\r\n            dataState: dataState,\r\n            userRoleControlRights: [],\r\n            controlMap: new Map()\r\n        };\r\n\r\n        this.extractedColumnList = [{ \"idsName\": \"IDS_SITE\", \"dataField\": \"ssitename\", \"width\": \"200px\" },\r\n      //  { \"idsName\": \"IDS_SITECODE\", \"dataField\": \"ssitecode\", \"width\": \"200px\" },\r\n        { \"idsName\": \"IDS_SCONTACTPERSON\", \"dataField\": \"scontactperson\", \"width\": \"200px\" },\r\n        { \"idsName\": \"IDS_DEFAULTSTATUS\", \"dataField\": \"stransdisplaystatus\", \"width\": \"250px\"  },\r\n\r\n        ];\r\n\r\n\r\n    }\r\n\r\n    dataStateChange = (event) => {\r\n        this.setState({\r\n            dataResult: process(this.state.data, event.dataState),\r\n            dataState: event.dataState\r\n        });\r\n    }\r\n\r\n    closeModal = () => {\r\n        let loadEsign = this.props.Login.loadEsign;\r\n        let openModal = this.props.Login.openModal;\r\n        let selectedRecord = this.props.Login.selectedRecord;\r\n        let selectedId = this.props.Login.selectedId;\r\n        if (this.props.Login.loadEsign) {\r\n            if (this.props.Login.operation === \"delete\") {\r\n                loadEsign = false;\r\n                openModal = false;\r\n                selectedRecord = {};\r\n            }\r\n            else {\r\n                loadEsign = false;\r\n                selectedRecord['esignpassword'] = \"\"\r\n                selectedRecord['esigncomments'] = \"\"\r\n                selectedRecord['esignreason']=\"\"\r\n            }\r\n        }\r\n        else {\r\n            openModal = false;\r\n            selectedRecord = {};\r\n            this.props.Login.districtList=[];\r\n            selectedId=null;\r\n        }\r\n\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { openModal, loadEsign, selectedRecord, selectedId }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n\r\n    }\r\n\r\n    static getDerivedStateFromProps(props, state) {\r\n\r\n        if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\r\n            toast.warn(props.Login.masterStatus);\r\n            props.Login.masterStatus = \"\";\r\n        }\r\n\r\n        if (props.Login.error !== state.error) {\r\n            toast.error(props.Login.error)\r\n            props.Login.error = \"\";\r\n        }\r\n        return null;\r\n    }\r\n\r\n\r\n    render() {\r\n\r\n        const addId = this.state.controlMap.has(\"AddSite\") && this.state.controlMap.get(\"AddSite\").ncontrolcode;\r\n        const editId = this.state.controlMap.has(\"EditSite\") && this.state.controlMap.get(\"EditSite\").ncontrolcode;\r\n\r\n        const addParam = {\r\n            screenName: \"Site\", primaryeyField: \"nsitecode\", primaryKeyValue: undefined,\r\n            operation: \"create\", inputParam: this.props.Login.inputParam, userInfo: this.props.Login.userInfo, ncontrolCode: addId\r\n        };\r\n\r\n        const editParam = {\r\n            screenName: \"Site\", operation: \"update\",\r\n            primaryKeyField: \"nsitecode\", inputParam: this.props.Login.inputParam, userInfo: this.props.Login.userInfo, ncontrolCode: editId\r\n        };\r\n\r\n        const deleteParam = { operation: \"delete\" };\r\n\r\n        // this.detailedFieldList = [\r\n        //     { \"idsName\": \"IDS_SITECODE\", \"dataField\": \"ssitecode\", \"width\": \"300px\",\"columnSize\": \"4\" },\r\n        //     { \"idsName\": \"IDS_REGION\", \"dataField\": \"sregionname\", \"width\": \"300px\",\"columnSize\": \"4\" },\r\n        //     { \"idsName\": \"IDS_DISTRICT\", \"dataField\": \"sdistrictname\", \"width\": \"300px\",\"columnSize\": \"4\" },\r\n        //     { \"idsName\": \"IDS_PHONENO\", \"dataField\": \"sphoneno\", \"width\": \"300px\",\"columnSize\": \"4\" },\r\n        //     { \"idsName\": \"IDS_FAXNO\", \"dataField\": \"sfaxno\", \"width\": \"250px\" ,\"columnSize\": \"4\"},\r\n        //     { \"idsName\": \"IDS_EMAIL\", \"dataField\": \"semail\", \"width\": \"250px\" ,\"columnSize\": \"4\"},\r\n        //     { \"idsName\": \"IDS_TIMEZONE\", \"dataField\": \"stimezoneid\", \"width\": \"250px\" ,\"columnSize\": \"4\"},\r\n        //     { \"idsName\": \"IDS_SITEDATE\", \"dataField\": \"sdateformat\", \"width\": \"250px\",\"columnSize\": \"4\" },\r\n        //     { \"idsName\": \"IDS_NEEDDISTRIBUTED\", \"dataField\": \"sdistributedstatus\", \"width\": \"250px\", \"columnSize\": \"4\" },\r\n        //     { \"idsName\": \"IDS_SITEADDRESS\", \"dataField\": \"ssiteaddress\", \"width\": \"200px\",\"columnSize\": \"4\" }\r\n\r\n        // ];\r\n        this.props.Login.settings &&  this.props.Login.settings['21']==\"true\" ? \r\n            this.detailedFieldList=[\r\n                { \"idsName\": \"IDS_SITECODE\", \"dataField\": \"ssitecode\", \"width\": \"300px\",\"columnSize\": \"4\" },\r\n                { \"idsName\": \"IDS_REGIONNAME\", \"dataField\": \"sregionname\", \"width\": \"300px\",\"columnSize\": \"4\" },\r\n                { \"idsName\": \"IDS_DISTRICTNAME\", \"dataField\": \"sdistrictname\", \"width\": \"300px\",\"columnSize\": \"4\" },\r\n                { \"idsName\": \"IDS_NEEDDISTRIBUTED\", \"dataField\": \"sdistributedstatus\", \"width\": \"250px\", \"columnSize\": \"4\" },\r\n         ] : this.props.Login.settings &&this.props.Login.settings['20']===\"true\"?\r\n            this.detailedFieldList=[\r\n                { \"idsName\": \"IDS_TIMEZONE\", \"dataField\": \"stimezoneid\", \"width\": \"250px\" ,\"columnSize\": \"4\"},\r\n                { \"idsName\": \"IDS_SITEDATE\", \"dataField\": \"sdateformat\", \"width\": \"250px\",\"columnSize\": \"4\" },\r\n            ]:\r\n            this.detailedFieldList=[\r\n            { \"idsName\": \"IDS_PHONENO\", \"dataField\": \"sphoneno\", \"width\": \"300px\",\"columnSize\": \"4\" },\r\n            { \"idsName\": \"IDS_FAXNO\", \"dataField\": \"sfaxno\", \"width\": \"250px\" ,\"columnSize\": \"4\"},\r\n            { \"idsName\": \"IDS_EMAIL\", \"dataField\": \"semail\", \"width\": \"250px\" ,\"columnSize\": \"4\"},\r\n            { \"idsName\": \"IDS_SITEADDRESS\", \"dataField\": \"ssiteaddress\", \"width\": \"200px\",\"columnSize\": \"4\" }\r\n            ];\r\n  \r\n        let mandatoryFields = []\r\n        // mandatoryFields.push(\r\n        //     { \"mandatory\": true, \"idsName\": \"IDS_SITENAME\", \"dataField\": \"ssitename\", \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"textbox\" },\r\n        //    (this.props.Login.settings['21']==\"true\"?\r\n        //     { \"mandatory\": true, \"idsName\": \"IDS_SITECODE\", \"dataField\": \"ssitecode\", \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"textbox\" }:\"\")\r\n        //     )\r\n        //  if (this.props.Login.settings['20']==\"true\"){\r\n        //     mandatoryFields.push(\r\n        //     { \"mandatory\": true, \"idsName\": \"IDS_TIMEZONE\", \"dataField\": \"ntimezonecode\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n        //     { \"mandatory\": true, \"idsName\": \"IDS_SITEDATE\", \"dataField\": \"ndateformatcode\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" }\r\n        // )}\r\n        //if(this.props.Login.settings['21']===\"true\"){\r\n            this.props.Login.settings &&  this.props.Login.settings['21']==\"true\" ?  \r\n            mandatoryFields.push(   { \"mandatory\": true, \"idsName\": \"IDS_SITECODE\", \"dataField\": \"ssitecode\", \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"textbox\" })\r\n            : this.props.Login.settings && this.props.Login.settings['21']===\"true\"?\r\n            mandatoryFields.push(\r\n                { \"mandatory\": true, \"idsName\": \"IDS_TIMEZONE\", \"dataField\": \"ntimezonecode\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n                { \"mandatory\": true, \"idsName\": \"IDS_SITEDATE\", \"dataField\": \"ndateformatcode\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" }\r\n            ):   mandatoryFields.push(\r\n                    { \"mandatory\": true, \"idsName\": \"IDS_SITENAME\", \"dataField\": \"ssitename\", \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"textbox\" })\r\n        return (\r\n            <>\r\n                <Row>\r\n                    <Col>\r\n                        <ListWrapper className=\"client-list-content\">\r\n\r\n                            {this.state.data ?\r\n                                <DataGrid\r\n                                    primaryKeyField={\"nsitecode\"}\r\n                                    data={this.state.data}\r\n                                    dataResult={this.state.dataResult}\r\n                                    dataState={this.state.dataState}\r\n                                    dataStateChange={this.dataStateChange}\r\n                                    methodUrl=\"Site\"\r\n                                    extractedColumnList={this.extractedColumnList}\r\n                                    detailedFieldList={this.detailedFieldList}\r\n                                    expandField=\"expanded\"\r\n                                    fetchRecord={this.props.getSiteCombo}\r\n                                    editParam={editParam}\r\n                                    deleteRecord={this.deleteRecord}\r\n                                    deleteParam={deleteParam}\r\n                                    reloadData={this.reloadData}\r\n                                    controlMap={this.state.controlMap}\r\n                                    userRoleControlRights={this.state.userRoleControlRights}\r\n                                    inputParam={this.props.Login.inputParam}\r\n                                    userInfo={this.props.Login.userInfo}\r\n                                    pageable={true}\r\n                                    scrollable={'scrollable'}\r\n                                    gridHeight={'600px'}\r\n                                    isActionRequired={true}\r\n                                    isToolBarRequired={true}\r\n                                    selectedId={this.props.Login.selectedId}\r\n                                    addRecord={() => this.props.getSiteCombo(addParam)}\r\n                                    hasDynamicColSize={true}\r\n                                />\r\n                                : \"\"}\r\n                        </ListWrapper>\r\n                    </Col>\r\n                </Row>\r\n                {/* Below Condition Added to avoid unwanted rendering of SlideOut */}\r\n                {this.props.Login.openModal ?\r\n                    <SlideOutModal show={this.props.Login.openModal}\r\n                        closeModal={this.closeModal}\r\n                        operation={this.props.Login.operation}\r\n                        inputParam={this.props.Login.inputParam}\r\n                        screenName={this.props.Login.screenName}\r\n                        onSaveClick={this.onSaveClick}\r\n                        esign={this.props.Login.loadEsign}\r\n                        validateEsign={this.validateEsign}\r\n                        masterStatus={this.props.Login.masterStatus}\r\n                        updateStore={this.props.updateStore}\r\n                        selectedRecord={this.state.selectedRecord || {}}\r\n                        mandatoryFields={mandatoryFields}\r\n                        addComponent={this.props.Login.loadEsign ?\r\n                            <Esign operation={this.props.Login.operation}\r\n                                onInputOnChange={this.onInputOnChange}\r\n                                inputParam={this.props.Login.inputParam}\r\n                                selectedRecord={this.state.selectedRecord || {}}\r\n                            />\r\n                            : <AddSite\r\n                                selectedRecord={this.state.selectedRecord || {}}\r\n                                onInputOnChange={this.onInputOnChange}\r\n                                onComboChange={this.onComboChange}\r\n                                TimeZoneList={this.props.Login.TimeZoneList || []}\r\n                                dateFormatList={this.props.Login.dateFormatList || []}\r\n                                operation={this.props.Login.operation}\r\n                                regionList={this.props.Login.regionList}\r\n                                districtList={this.props.Login.districtList}\r\n                                needUTCConversation={this.props.Login.settings[21]}\r\n                                needDistributedArchitecture={this.props.Login.settings[22]}\r\n                            />}\r\n                    />\r\n                    : \"\"}\r\n            </>\r\n        );\r\n    }\r\n\r\n    componentDidUpdate(previousProps) {\r\n        if (this.props.Login.masterData !== previousProps.Login.masterData) {\r\n            if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\r\n                const userRoleControlRights = [];\r\n                if (this.props.Login.userRoleControlRights) {\r\n                    this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item =>\r\n                        userRoleControlRights.push(item.ncontrolcode))\r\n                }\r\n                const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode)\r\n                this.setState({\r\n                    userRoleControlRights, controlMap, data: this.props.Login.masterData,\r\n                    dataResult: process(this.props.Login.masterData, this.state.dataState),\r\n                });\r\n            }\r\n            else {\r\n                let { dataState } = this.state;\r\n                if (this.props.Login.dataState === undefined) {\r\n                    dataState = { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 }\r\n                }\r\n                this.setState({\r\n                    data: this.props.Login.masterData, selectedRecord: this.props.Login.selectedRecord,\r\n                    dataResult: process(this.props.Login.masterData, dataState), dataState\r\n                });\r\n            }\r\n        }\r\n        else if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\r\n            this.setState({ selectedRecord: this.props.Login.selectedRecord });\r\n        }\r\n    }\r\n\r\n    onInputOnChange = (event) => {\r\n\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if (event.target.type === 'checkbox') {\r\n            selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\r\n        }\r\n        else {\r\n            if (event.target.name === \"sphoneno\") {\r\n                if (event.target.value !== \"\") {\r\n                    event.target.value = validatePhoneNumber(event.target.value);\r\n                    selectedRecord[event.target.name] = event.target.value !== \"\" ? event.target.value : selectedRecord[event.target.name];\r\n                } else {\r\n                    selectedRecord[event.target.name] = event.target.value\r\n                }\r\n            }\r\n\r\n            else {\r\n                selectedRecord[event.target.name] = event.target.value;\r\n            }\r\n        }\r\n        this.setState({ selectedRecord });\r\n    }\r\n    onComboChange = (comboData, fieldName) => {\r\n        if (comboData !== null) {\r\n            const selectedRecord = this.state.selectedRecord || {};\r\n            selectedRecord[fieldName] = comboData;\r\n            if(fieldName==\"nregioncode\")  {\r\n                this.props.getDistrictByRegion({\r\n                    inputData: {\r\n                        userinfo: this.props.Login.userInfo,\r\n                        sdisplayname: selectedRecord.nregioncode.label,\r\n                        primarykey: selectedRecord.nregioncode.value\r\n                   }\r\n                 })\r\n                 selectedRecord[\"ndistrictcode\"]=\"\"; \r\n            }\r\n            this.setState({ selectedRecord });\r\n        }\r\n\r\n    }\r\n\r\n    deleteRecord = (deleteParam) => {\r\n        const inputParam = {\r\n            classUrl: this.props.Login.inputParam.classUrl,\r\n            methodUrl: this.props.Login.inputParam.methodUrl,\r\n            displayName: this.props.Login.inputParam.displayName,\r\n            inputData: {\r\n                [\"site\"]: deleteParam.selectedRecord,\r\n                \"userinfo\": this.props.Login.userInfo\r\n            },\r\n            operation: deleteParam.operation,\r\n            dataState: this.state.dataState\r\n        }\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, deleteParam.ncontrolCode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData: this.props.Login.masterData },\r\n                    openModal: true, screenName: this.props.intl.formatMessage({ id: this.props.Login.inputParam.displayName }),\r\n                    operation: deleteParam.operation\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\r\n        }\r\n    }\r\n\r\n    reloadData = () => {\r\n        const inputParam = {\r\n            inputData: { \"userinfo\": this.props.Login.userInfo },\r\n            classUrl: this.props.Login.inputParam.classUrl,\r\n            methodUrl: this.props.Login.inputParam.methodUrl,\r\n            displayName: \"IDS_SITE\",\r\n            userInfo: this.props.Login.userInfo\r\n        };\r\n\r\n        this.props.callService(inputParam);\r\n    }\r\n\r\n    onSaveClick = (saveType, formRef) => {\r\n        //add / edit\r\n        const isValidateEmail = this.state.selectedRecord[\"semail\"] ? validateEmail(this.state.selectedRecord[\"semail\"]) : true;\r\n        if (isValidateEmail) {\r\n            let dataState = undefined;\r\n            let operation = \"\";\r\n            let inputData = [];\r\n            let selectedId = null;\r\n            inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n            let postParam = {\r\n                selectedObject: \"selectedSite\",\r\n                primaryKeyField: \"nsitecode\",\r\n                inputListName: \"Site\",\r\n                fecthInputObject: { userinfo: this.props.Login.userInfo }\r\n            }\r\n            if (this.props.Login.operation === \"update\") {\r\n                selectedId = this.props.Login.selectedRecord.nsitecode;\r\n\r\n                inputData[\"site\"] = {\r\n                    \"nsitecode\": this.props.Login.selectedRecord.nsitecode,\r\n                    \"nmastersitecode\": this.props.Login.userInfo.nmastersitecode,\r\n                    \"scontactperson\": this.state.selectedRecord.scontactperson !== null ? this.state.selectedRecord.scontactperson : \"\",\r\n                    \"ssiteaddress\": this.state.selectedRecord.ssiteaddress,\r\n                    \"sphoneno\": this.state.selectedRecord.sphoneno,\r\n                    \"ssitename\": this.state.selectedRecord.ssitename,\r\n                    \"ssitecode\": this.state.selectedRecord.ssitecode !==null? this.state.selectedRecord.ssitecode:\"-1\",\r\n                    \"sfaxno\": this.state.selectedRecord.sfaxno,\r\n                    \"semail\": this.state.selectedRecord.semail !== null ? this.state.selectedRecord.semail : \"\",\r\n                    \"ndefaultstatus\": this.state.selectedRecord.ndefaultstatus,\r\n                    \"ndateformatcode\": this.state.selectedRecord.ndateformatcode !== null? this.state.selectedRecord.ndateformatcode.value:\"-1\"\r\n                }\r\n                if (this.state.selectedRecord.ndateformatcode.label !== undefined) {\r\n                    inputData[\"sitedateformat\"] = {\r\n                        \"ssitereportdatetime\":this.state.selectedRecord.ndateformatcode !== undefined? this.state.selectedRecord.ndateformatcode.label + ' HH:mm:ss':null,\r\n                        \"ssitereportdate\":this.state.selectedRecord.ndateformatcode !== undefined? this.state.selectedRecord.ndateformatcode.label:null,\r\n                        \"ssitedate\":this.state.selectedRecord.ndateformatcode !== undefined? this.state.selectedRecord.ndateformatcode.label:null,\r\n                        \"spgdatetime\":this.state.selectedRecord.ndateformatcode !== undefined? this.state.selectedRecord.ndateformatcode.label + ' HH24:mi:ss':null,\r\n                        \"spgreportdatetime\":this.state.selectedRecord.ndateformatcode !== undefined? this.state.selectedRecord.ndateformatcode.label + ' HH24:mi:ss':null,\r\n                        \"ssitedatetime\":this.state.selectedRecord.ndateformatcode !== undefined? this.state.selectedRecord.ndateformatcode.label + ' HH:mm:ss':null,\r\n                        \"nisdistributed\": this.state.selectedRecord.nisdistributed !== null? this.state.selectedRecord.nisdistributed:4\r\n                    }\r\n                }\r\n\r\n\r\n\r\n                operation = \"update\";\r\n                dataState = this.state.dataState;\r\n                selectedId = this.props.Login.selectedId;\r\n            }\r\n            else {\r\n\r\n                inputData[\"site\"] = {\r\n                    \"nmastersitecode\": this.props.Login.userInfo.nmastersitecode,\r\n                    \"scontactperson\": this.state.selectedRecord.scontactperson !== null ? this.state.selectedRecord.scontactperson : \"\",\r\n                    \"ssiteaddress\": this.state.selectedRecord.ssiteaddress,\r\n                    \"sphoneno\": this.state.selectedRecord.sphoneno,\r\n                    \"ssitename\": this.state.selectedRecord.ssitename,\r\n                    \"ssitecode\": this.state.selectedRecord.ssitecode !== null ?this.state.selectedRecord.ssitecode:\"-1\",\r\n                    \"sfaxno\": this.state.selectedRecord.sfaxno,\r\n                    \"semail\": this.state.selectedRecord.semail !== null ? this.state.selectedRecord.semail : \"\",\r\n                    \"ndefaultstatus\": this.state.selectedRecord.ndefaultstatus,\r\n                    \"ndateformatcode\":this.props.Login.settings['20']===\"true\"? this.state.selectedRecord.ndateformatcode.value:\"-1\"\r\n\r\n\r\n                };\r\n              //  if (this.state.selectedRecord.ndateformatcode && this.state.selectedRecord.ndateformatcode.label !== undefined) {\r\n                    inputData[\"sitedateformat\"] = {\r\n                        \"ssitereportdatetime\":this.state.selectedRecord.ndateformatcode !== undefined? this.state.selectedRecord.ndateformatcode.label + ' HH:mm:ss':null,\r\n                        \"ssitereportdate\":this.state.selectedRecord.ndateformatcode !== undefined? this.state.selectedRecord.ndateformatcode.label:null,\r\n                        \"ssitedate\":this.state.selectedRecord.ndateformatcode !== undefined? this.state.selectedRecord.ndateformatcode.label:null,\r\n                        \"spgdatetime\":this.state.selectedRecord.ndateformatcode !== undefined? this.state.selectedRecord.ndateformatcode.label + ' HH24:mi:ss':null,\r\n                        \"spgreportdatetime\":this.state.selectedRecord.ndateformatcode !== undefined? this.state.selectedRecord.ndateformatcode.label + ' HH24:mi:ss':null,\r\n                        \"ssitedatetime\":this.state.selectedRecord.ndateformatcode !== undefined? this.state.selectedRecord.ndateformatcode.label + ' HH:mm:ss':null,\r\n                        \"nisdistributed\": this.state.selectedRecord.nisdistributed !== null? this.state.selectedRecord.nisdistributed:4\r\n                    }\r\n               // }\r\n\r\n\r\n                operation = \"create\";\r\n            } \r\n            inputData[\"site\"][\"ntimezonecode\"] = this.state.selectedRecord[\"ntimezonecode\"] ? this.state.selectedRecord[\"ntimezonecode\"].value : \"-1\";\r\n            inputData[\"site\"][\"nregioncode\"] = this.state.selectedRecord[\"nregioncode\"] ? this.state.selectedRecord[\"nregioncode\"].value : transactionStatus.NA;\r\n            inputData[\"site\"][\"ndistrictcode\"] = this.state.selectedRecord[\"ndistrictcode\"] ? this.state.selectedRecord[\"ndistrictcode\"].value : transactionStatus.NA;\r\n\r\n            const inputParam = {\r\n                classUrl: \"site\",\r\n                methodUrl: \"SiteScreen\",\r\n                displayName: this.props.Login.inputParam.displayName,\r\n                inputData: inputData,\r\n                postParam,\r\n                searchRef: this.searchRef,\r\n                operation: operation, saveType, formRef, dataState, selectedId\r\n            }\r\n\r\n            const masterData = this.props.Login.masterData;\r\n            if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        loadEsign: true, screenData: { inputParam, masterData }, saveType\r\n                    }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n            else {\r\n                this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\r\n            }\r\n        }\r\n        else {\r\n            toast.info(this.props.intl.formatMessage({ id: \"IDS_ENTERVALIDEMAIL\" }))\r\n        }\r\n    }\r\n    validateEsign = () => {\r\n        const inputParam = {\r\n            inputData: {\r\n                \"userinfo\": {\r\n                    ...this.props.Login.userInfo,\r\n                    sreason: this.state.selectedRecord[\"esigncomments\"],\r\n                    nreasoncode:this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].value,\r\n                    spredefinedreason:this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].label,\r\n               \r\n                },\r\n                password: this.state.selectedRecord[\"esignpassword\"]\r\n            },\r\n            screenData: this.props.Login.screenData\r\n        }\r\n        this.props.validateEsignCredential(inputParam, \"openModal\");\r\n    }\r\n\r\n}\r\nexport default connect(mapStateToProps, { callService, crudMaster, getSiteCombo, updateStore, validateEsignCredential ,getDistrictByRegion})(injectIntl(Site));"]},"metadata":{},"sourceType":"module"}