{"ast":null,"code":"import { toast } from 'react-toastify';\nimport React from 'react';\nimport rsapi from '../rsapi';\nimport { constructOptionList, sortData } from '../components/CommonScript';\nimport Axios from 'axios';\nimport { DEFAULT_RETURN } from './LoginTypes';\nimport { initRequest } from \"./LoginAction\";\nimport { intl } from '../components/App';\nexport function getSectionAndTest(screenName, operation, primaryKeyName, masterData, userInfo, ncontrolCode) {\n  return function (dispatch) {\n    if (masterData.SelectedInsCat !== null) {\n      let urlArray = [];\n      const Section = rsapi.post(\"worklist/getSectionAndTest\", {\n        \"ncontrolCode\": ncontrolCode,\n        \"userinfo\": userInfo,\n        \"nregtypecode\": masterData.defaultRegTypeValue.nregtypecode,\n        \"nregsubtypecode\": masterData.defaultRegSubTypeValue.nregsubtypecode\n      });\n      urlArray = [Section];\n      dispatch(initRequest(true));\n      Axios.all(urlArray).then(response => {\n        const SectionMap = constructOptionList(response[0].data || [], \"nsectioncode\", \"ssectionname\", undefined, undefined, false);\n        const Section = SectionMap.get(\"OptionList\");\n        let selectedRecord = {};\n        let instrumentCategory = [];\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            Section,\n            instrumentCategory: instrumentCategory,\n            isOpen: true,\n            selectedRecord: selectedRecord,\n            operation: operation,\n            screenName: screenName,\n            openModal: true,\n            ncontrolCode: ncontrolCode,\n            loading: false\n          }\n        });\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(intl.formatMessage({\n            id: error.message\n          }));\n        } else {\n          toast.warn(intl.formatMessage({\n            id: error.response.data\n          }));\n        }\n      });\n    } else {\n      toast.warn(intl.formatMessage({\n        id: \"IDS_SECTIONNOTAVALIABLE\"\n      }));\n    }\n  };\n}\nexport function getWorklistSample(screenName, operation, primaryKeyName, masterData, userInfo, ncontrolCode) {\n  return function (dispatch) {\n    let urlArray = [];\n    const InstrumentCategory = rsapi.post(\"/worklist/refreshGetForAddComponent\", {\n      [primaryKeyName]: masterData.selectedWorklist[primaryKeyName],\n      \"ntestcode\": masterData.selectedWorklist['ntestcode'],\n      \"ntransactionstatus\": masterData.defaultFilterStatusValue['ntransactionstatus'],\n      \"nsampletypecode\": masterData.selectedWorklist['nsampletypecode'],\n      \"nregtypecode\": masterData.selectedWorklist['nregtypecode'],\n      \"nregsubtypecode\": masterData.selectedWorklist['nregsubtypecode'],\n      \"napprovalconfigversioncode\": masterData.defaultApprovalVersionValue['napprovalconfigversioncode'],\n      \"userinfo\": userInfo,\n      \"ncontrolCode\": ncontrolCode,\n      \"nsectioncode\": masterData.selectedWorklist['nsectioncode']\n    });\n    urlArray = [InstrumentCategory];\n    dispatch(initRequest(true));\n    Axios.all(urlArray).then(response => {\n      let expiryDate = undefined;\n      let currentTime = undefined;\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          activeKey: \"IDS_WORKLISTSAMPLE\",\n          addedComponentList: [],\n          addComponentDataList: response[0].data || [],\n          isOpen: true,\n          operation: operation,\n          screenName: screenName,\n          openModal: true,\n          ncontrolCode: ncontrolCode,\n          loading: false,\n          currentTime,\n          expiryDate\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(intl.formatMessage({\n          id: error.message\n        }));\n      } else {\n        toast.warn(intl.formatMessage({\n          id: error.response.data\n        }));\n      }\n    });\n  };\n}\nexport function getRegTypeWorklist(inputData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"worklist/getRegistrationTypeBySampleType\", inputData).then(response => {\n      let responseData = { ...response.data\n      }; //responseData = sortData(responseData)\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputData.masterData,\n            ...responseData,\n            defaultSampleTypeValue: inputData.defaultSampleTypeValue\n          },\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getWorklistDetail(Worklist, userInfo, masterData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    return rsapi.post(\"worklist/getWorklistSample\", {\n      nworklistcode: Worklist.nworklistcode,\n      ndesigntemplatemappingcode: masterData.ndesigntemplatemappingcode,\n      userinfo: userInfo\n    }).then(response => {\n      delete masterData['selectedWorklist'];\n      masterData['selectedWorklist'] = {};\n      masterData['selectedWorklist'] = Worklist;\n      masterData = { ...masterData,\n        ...response.data\n      }; //sortData(masterData);\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          activeKey: \"IDS_WORKLISTSAMPLE\",\n          masterData,\n          operation: null,\n          modalName: undefined,\n          loading: false,\n          dataState: undefined\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getSectionbaseTest(inputParam, userInfo, masterData, addId) {\n  return function (dispatch) {\n    if (inputParam.SelectedInsCat !== null) {\n      let urlArray = [];\n      const Section = rsapi.post(\"worklist/getSectionbaseTest\", {\n        nsectionCode: inputParam.nsectioncode.value,\n        \"userinfo\": userInfo,\n        \"ncontrolCode\": addId,\n        \"nregtypecode\": masterData.defaultRegTypeValue.nregtypecode,\n        \"nregsubtypecode\": masterData.defaultRegSubTypeValue.nregsubtypecode\n      });\n      urlArray = [Section];\n      dispatch(initRequest(true));\n      Axios.all(urlArray).then(response => {\n        const TestMap = constructOptionList(response[0].data || [], \"ntestcode\", \"stestsynonym\", undefined, undefined, false);\n        const Test = TestMap.get(\"OptionList\");\n        let selectedRecord = { ...inputParam\n        };\n        let instrumentCategory = []; //nsectioncode=inputParam.nsectioncode,\n\n        masterData = { ...masterData\n        };\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            masterData,\n            Test,\n            instrumentCategory: instrumentCategory,\n            isOpen: true,\n            selectedRecord: selectedRecord,\n            // operation: operation,\n            //screenName: screenName,\n            //openModal: true,\n            //ncontrolCode: ncontrolCode,\n            loading: false\n          }\n        });\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(intl.formatMessage({\n            id: error.message\n          }));\n        } else {\n          toast.warn(intl.formatMessage({\n            id: error.response.data\n          }));\n        }\n      });\n    } else {\n      toast.warn(intl.formatMessage({\n        id: \"IDS_INSTRUMENTCATEGORYNOTAVALIABLE\"\n      }));\n    }\n  };\n}\nexport const getWorklistDetailFilter = inputParam => {\n  return dispatch => {\n    dispatch(initRequest(true));\n    rsapi.post(\"worklist/getWorklistDetailFilter\", inputParam.inputData).then(response => {\n      delete inputParam.masterData['Worklist'];\n      delete inputParam.masterData['WorklistSamples'];\n      delete inputParam.masterData['WorklistHistory'];\n      delete inputParam.masterData['selectedWorklist'];\n      inputParam.masterData['Worklist'] = {};\n      inputParam.masterData['WorklistSamples'] = {};\n      inputParam.masterData['WorklistHistory'] = {};\n      inputParam.masterData['selectedWorklist'] = {};\n      inputParam.masterData['Worklist'] = response.data.Worklist;\n      inputParam.masterData['WorklistSamples'] = response.data.WorklistSamples;\n      inputParam.masterData['WorklistHistory'] = response.data.WorklistHistory;\n      inputParam.masterData['selectedWorklist'] = response.data.selectedWorklist;\n      const masterData = response.data; //sortData(masterData);\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false,\n          dataState: undefined,\n          activeKey: \"IDS_WORKLISTSAMPLE\",\n          masterData: { ...inputParam.masterData,\n            defaultRegSubTypeValue: inputParam.masterData.RegSubTypeValue,\n            FilterStatusValue: inputParam.masterData.defaultFilterStatusValue\n          }\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n      toast.error(error.message);\n    });\n  };\n};\nexport const onWorklistApproveClick = (masterData, userInfo, ConfirmMessage, approvalId) => {\n  return dispatch => {\n    dispatch(initRequest(true)); //   rsapi.post(\"worklist/updateWorklistDetail\", { \"worklist\": masterData.selectedWorklist, \"userinfo\": userInfo, \"ncontrolCode\": approvalId,\"ndesigntemplatemappingcode\":masterData.ndesigntemplatemappingcode }\n\n    rsapi.post(\"worklist/approveWorklist\", {\n      \"worklist\": masterData.selectedWorklist,\n      \"userinfo\": userInfo,\n      \"ncontrolCode\": approvalId,\n      \"ndesigntemplatemappingcode\": masterData.ndesigntemplatemappingcode\n    }).then(response => {\n      let masterData1 = { ...masterData,\n        ...response.data\n      };\n      dispatch({\n        type: DEFAULT_RETURN,\n        activeKey: \"IDS_WORKLISTSAMPLE\",\n        payload: {\n          loading: false,\n          dataState: undefined,\n          masterData: { ...masterData1\n          }\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(intl.formatMessage({\n          id: error.message\n        }));\n      } else if (error.response.status === 417) {\n        ConfirmMessage.confirm(\"information\", \"Information!\", error.response.data, undefined, \"ok\", undefined, true, undefined);\n      } else {\n        toast.warn(intl.formatMessage({\n          id: error.response.data\n        }));\n      } //toast.error(error.message);\n\n    });\n  };\n};\nexport function getEditSectionAndTest(screenName, operation, primaryKeyName, masterData, userInfo, ncontrolCode) {\n  return function (dispatch) {\n    if (masterData.SelectedInsCat !== null) {\n      let urlArray = [];\n      const Section = rsapi.post(\"worklist/getSectionAndTest\", {\n        \"ncontrolCode\": ncontrolCode,\n        \"userinfo\": userInfo\n      }); // const GetEditSetionAndTest={}\n\n      if (operation === \"update\") {\n        const GetEditSetionAndTest = rsapi.post(\"/worklistpreparation/getEditSectionAndTest\", {\n          [primaryKeyName]: masterData.selectedWorklist[primaryKeyName],\n          \"userinfo\": userInfo\n        });\n        const TestGet = rsapi.post(\"worklist/getSectionbaseTest\", {\n          nsectionCode: masterData.selectedWorklist[\"nsectioncode\"],\n          \"userinfo\": userInfo\n        });\n        urlArray = [Section, GetEditSetionAndTest, TestGet];\n      } //urlArray = [Section,GetEditSetionAndTest];\n\n\n      dispatch(initRequest(true));\n      Axios.all(urlArray).then(response => {\n        const SectionMap = constructOptionList(response[0].data || [], \"nsectioncode\", \"ssectionname\", undefined, undefined, false);\n        const Section = SectionMap.get(\"OptionList\");\n        const TestMap = constructOptionList(response[2].data || [], \"ntestcode\", \"stestsynonym\", undefined, undefined, false);\n        const Test = TestMap.get(\"OptionList\");\n        let selectedRecord = {};\n        let instrumentCategory = [];\n        selectedRecord = {\n          \"nsectioncode\": {\n            \"value\": response[1].data.nsectioncode,\n            \"label\": response[1].data.ssectionname\n          },\n          \"ntestcode\": {\n            \"value\": response[1].data.ntestcode,\n            \"label\": response[1].data.stestsynonym\n          }\n        };\n        dispatch({\n          type: DEFAULT_RETURN,\n          activeKey: \"IDS_WORKLISTSAMPLE\",\n          payload: {\n            masterData: { ...masterData\n            },\n            Section,\n            Test,\n            instrumentCategory: instrumentCategory,\n            isOpen: true,\n            selectedRecord: selectedRecord,\n            operation: operation,\n            screenName: screenName,\n            openModal: true,\n            ncontrolCode: ncontrolCode,\n            loading: false\n          }\n        });\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(intl.formatMessage({\n            id: error.message\n          }));\n        } else {\n          toast.warn(intl.formatMessage({\n            id: error.response.data\n          }));\n        }\n      });\n    } else {\n      toast.warn(intl.formatMessage({\n        id: \"IDS_INSTRUMENTCATEGORYNOTAVALIABLE\"\n      }));\n    }\n  };\n}\nexport const createWorklistCreation = (inputParam, masterData) => {\n  return dispatch => {\n    dispatch(initRequest(true));\n    rsapi.post(\"worklist/createWorklistCreation\", inputParam.inputData).then(response => {\n      delete inputParam.masterData['WorklistSamples'];\n      inputParam.masterData['WorklistSamples'] = {};\n      inputParam.masterData['WorklistSamples'] = response.data.WorklistSamples;\n      delete inputParam.masterData['WorklistHistory'];\n      inputParam.masterData['WorklistHistory'] = {};\n      inputParam.masterData['WorklistHistory'] = response.data.WorklistHistory;\n      const masterData = response.data; //sortData(masterData);\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false,\n          openModal: false,\n          dataState: undefined,\n          addedComponentList: [],\n          masterData: { ...inputParam.masterData\n          }\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n      toast.error(error.message);\n    });\n  };\n};\nexport function getConfigVersionTestWise(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"worklist/getApprovalConfigVersionByRegSubType\", inputParam.inputData).then(response => {\n      let responseData = { ...response.data\n      };\n      responseData = sortData(responseData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputParam.masterData,\n            ...responseData,\n            RegSubTypeValue: inputParam.masterData.RegSubTypeValue,\n            RegistrationSubTypeList: inputParam.masterData.RegistrationSubTypeList //nneedsubsample:inputParam.masterData.realRegSubTypeValue.nneedsubsample\n\n          },\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function ViewSampleDetails(masterData, screenName, userInfo, viewdetails) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"worklist/getSampleViewDetails\", {\n      selectedRecord: masterData.selectedWorklist,\n      PatientId: viewdetails[\"Patient Id\"],\n      npreregno: viewdetails[\"npreregno\"],\n      userinfo: userInfo\n    }).then(response => {\n      //  masterData = {\n      //     ...masterData,\n      //     ...response.data\n      // }\n      masterData['AuditModifiedComments'] = [];\n      masterData['AuditModifiedComments'] = response.data['AuditModifiedComments'];\n      masterData['viewdetails'] = [];\n      masterData['viewdetails'] = response.data['viewdetails'][0]; //sortData(masterData);\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          //viewdetails:viewdetails,\n          masterData,\n          screenName: \"IDS_VIEWDETAILS\",\n          loading: false,\n          openModal: true\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getWorklisthistoryAction(inputData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"worklist/getWorklisthistory\", inputData).then(response => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputData.masterData,\n            ...response.data\n          },\n          loading: false,\n          openModal: false,\n          activeKey: \"IDS_WORKLISTHISTORY\"\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getRegSubTypeWise(inputData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"worklist/getRegistrationsubTypeByRegType\", inputData).then(response => {\n      let responseData = { ...response.data\n      };\n      responseData = sortData(responseData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputData.masterData,\n            ...responseData,\n            //defaultRegTypeValue: inputData.defaultRegTypeValue\n            RegTypeValue: inputData.masterData.RegTypeValue\n          },\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport const reportWorklist = inputParam => {\n  return dispatch => {\n    dispatch(initRequest(true));\n    rsapi.post(\"worklist/worklistReportGenerate\", { ...inputParam,\n      nworklistcode: inputParam.nworklistcode\n    }).then(response => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false,\n          loadEsign: false,\n          openModal: false,\n          showConfirmAlert: false\n        }\n      });\n      document.getElementById(\"download_data\").setAttribute(\"href\", response.data.filepath);\n      document.getElementById(\"download_data\").click();\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n};","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/actions/WorklistPreparationAction.js"],"names":["toast","React","rsapi","constructOptionList","sortData","Axios","DEFAULT_RETURN","initRequest","intl","getSectionAndTest","screenName","operation","primaryKeyName","masterData","userInfo","ncontrolCode","dispatch","SelectedInsCat","urlArray","Section","post","defaultRegTypeValue","nregtypecode","defaultRegSubTypeValue","nregsubtypecode","all","then","response","SectionMap","data","undefined","get","selectedRecord","instrumentCategory","type","payload","isOpen","openModal","loading","catch","error","status","formatMessage","id","message","warn","getWorklistSample","InstrumentCategory","selectedWorklist","defaultFilterStatusValue","defaultApprovalVersionValue","expiryDate","currentTime","activeKey","addedComponentList","addComponentDataList","getRegTypeWorklist","inputData","responseData","defaultSampleTypeValue","getWorklistDetail","Worklist","nworklistcode","ndesigntemplatemappingcode","userinfo","modalName","dataState","getSectionbaseTest","inputParam","addId","nsectionCode","nsectioncode","value","TestMap","Test","getWorklistDetailFilter","WorklistSamples","WorklistHistory","RegSubTypeValue","FilterStatusValue","onWorklistApproveClick","ConfirmMessage","approvalId","masterData1","confirm","getEditSectionAndTest","GetEditSetionAndTest","TestGet","ssectionname","ntestcode","stestsynonym","createWorklistCreation","getConfigVersionTestWise","RegistrationSubTypeList","ViewSampleDetails","viewdetails","PatientId","npreregno","getWorklisthistoryAction","getRegSubTypeWise","RegTypeValue","reportWorklist","loadEsign","showConfirmAlert","document","getElementById","setAttribute","filepath","click"],"mappings":"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","sourcesContent":["import {\r\n    toast\r\n} from 'react-toastify';\r\nimport React from 'react';\r\nimport rsapi from '../rsapi';\r\nimport { constructOptionList, sortData } from '../components/CommonScript';\r\nimport Axios from 'axios';\r\nimport {\r\n    DEFAULT_RETURN\r\n} from './LoginTypes';\r\nimport {\r\n    initRequest\r\n} from \"./LoginAction\";\r\nimport {\r\n    intl\r\n} from '../components/App';\r\n\r\nexport function getSectionAndTest(screenName, operation, primaryKeyName, masterData, userInfo, ncontrolCode) {\r\n    return function (dispatch) {\r\n        if (masterData.SelectedInsCat !== null) {\r\n            let urlArray = [];\r\n            const Section = rsapi.post(\"worklist/getSectionAndTest\", { \"ncontrolCode\": ncontrolCode, \"userinfo\": userInfo, \"nregtypecode\": masterData.defaultRegTypeValue.nregtypecode, \"nregsubtypecode\": masterData.defaultRegSubTypeValue.nregsubtypecode })\r\n            urlArray = [Section];\r\n\r\n\r\n            dispatch(initRequest(true));\r\n            Axios.all(urlArray)\r\n                .then(response => {\r\n                    const SectionMap = constructOptionList(response[0].data || [], \"nsectioncode\",\r\n                        \"ssectionname\", undefined, undefined, false);\r\n                    const Section = SectionMap.get(\"OptionList\");\r\n                    let selectedRecord = {};\r\n                    let instrumentCategory = [];\r\n\r\n\r\n\r\n\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            Section,\r\n                            instrumentCategory: instrumentCategory,\r\n                            isOpen: true,\r\n                            selectedRecord: selectedRecord,\r\n                            operation: operation,\r\n                            screenName: screenName,\r\n                            openModal: true,\r\n                            ncontrolCode: ncontrolCode,\r\n                            loading: false,\r\n\r\n                        }\r\n                    });\r\n                })\r\n                .catch(error => {\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            loading: false\r\n                        }\r\n                    })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(intl.formatMessage({\r\n                            id: error.message\r\n                        }));\r\n                    } else {\r\n                        toast.warn(intl.formatMessage({\r\n                            id: error.response.data\r\n                        }));\r\n                    }\r\n                })\r\n        }\r\n        else {\r\n            toast.warn(intl.formatMessage({ id: \"IDS_SECTIONNOTAVALIABLE\" }));\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\nexport function getWorklistSample(screenName, operation, primaryKeyName, masterData, userInfo, ncontrolCode) {\r\n    return function (dispatch) {\r\n\r\n        let urlArray = [];\r\n        const InstrumentCategory = rsapi.post(\"/worklist/refreshGetForAddComponent\", {\r\n            [primaryKeyName]: masterData.selectedWorklist[primaryKeyName],\r\n            \"ntestcode\": masterData.selectedWorklist['ntestcode'],\r\n            \"ntransactionstatus\": masterData.defaultFilterStatusValue['ntransactionstatus'],\r\n            \"nsampletypecode\": masterData.selectedWorklist['nsampletypecode'],\r\n            \"nregtypecode\": masterData.selectedWorklist['nregtypecode'],\r\n            \"nregsubtypecode\": masterData.selectedWorklist['nregsubtypecode'],\r\n            \"napprovalconfigversioncode\": masterData.defaultApprovalVersionValue['napprovalconfigversioncode'],\r\n            \"userinfo\": userInfo,\r\n            \"ncontrolCode\": ncontrolCode,\r\n            \"nsectioncode\": masterData.selectedWorklist['nsectioncode'],\r\n        });\r\n        urlArray = [InstrumentCategory];\r\n\r\n\r\n        dispatch(initRequest(true));\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n\r\n                let expiryDate = undefined;\r\n                let currentTime = undefined;\r\n\r\n\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        activeKey: \"IDS_WORKLISTSAMPLE\",\r\n                        addedComponentList: [],\r\n                        addComponentDataList: response[0].data || [],\r\n                        isOpen: true,\r\n\r\n                        operation: operation,\r\n                        screenName: screenName,\r\n                        openModal: true,\r\n                        ncontrolCode: ncontrolCode,\r\n                        loading: false,\r\n                        currentTime,\r\n                        expiryDate\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(intl.formatMessage({\r\n                        id: error.message\r\n                    }));\r\n                } else {\r\n                    toast.warn(intl.formatMessage({\r\n                        id: error.response.data\r\n                    }));\r\n                }\r\n            })\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport function getRegTypeWorklist(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"worklist/getRegistrationTypeBySampleType\", inputData)\r\n            .then(response => {\r\n                let responseData = { ...response.data }\r\n                //responseData = sortData(responseData)\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...responseData,\r\n                            defaultSampleTypeValue: inputData.defaultSampleTypeValue\r\n                        },\r\n                        loading: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\nexport function getWorklistDetail(Worklist, userInfo, masterData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"worklist/getWorklistSample\", {\r\n            nworklistcode: Worklist.nworklistcode,\r\n            ndesigntemplatemappingcode:masterData.ndesigntemplatemappingcode,\r\n            userinfo: userInfo\r\n        })\r\n            .then(response => {\r\n                delete masterData['selectedWorklist']\r\n                masterData['selectedWorklist'] = {}\r\n\r\n                masterData['selectedWorklist'] = Worklist\r\n\r\n\r\n                masterData = {\r\n                    ...masterData,\r\n                    ...response.data\r\n                };\r\n                //sortData(masterData);\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        activeKey: \"IDS_WORKLISTSAMPLE\",\r\n                        masterData,\r\n                        operation: null,\r\n                        modalName: undefined,\r\n                        loading: false,\r\n                        dataState: undefined\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n\r\n            })\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport function getSectionbaseTest(inputParam, userInfo, masterData,addId) {\r\n    return function (dispatch) {\r\n        if (inputParam.SelectedInsCat !== null) {\r\n            let urlArray = [];\r\n            const Section = rsapi.post(\"worklist/getSectionbaseTest\", { nsectionCode: inputParam.nsectioncode.value,\"userinfo\": userInfo,\"ncontrolCode\":addId,\"nregtypecode\": masterData.defaultRegTypeValue.nregtypecode, \"nregsubtypecode\": masterData.defaultRegSubTypeValue.nregsubtypecode  })\r\n            urlArray = [Section];\r\n\r\n\r\n            dispatch(initRequest(true));\r\n            Axios.all(urlArray)\r\n                .then(response => {\r\n                    const TestMap = constructOptionList(response[0].data || [], \"ntestcode\",\r\n                        \"stestsynonym\", undefined, undefined, false);\r\n                    const Test = TestMap.get(\"OptionList\");\r\n                    let selectedRecord = { ...inputParam };\r\n                    let instrumentCategory = [];\r\n                    //nsectioncode=inputParam.nsectioncode,\r\n                    masterData = {\r\n                        ...masterData,\r\n                    }\r\n\r\n\r\n\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            masterData,\r\n                            Test,\r\n                            instrumentCategory: instrumentCategory,\r\n                            isOpen: true,\r\n                            selectedRecord: selectedRecord,\r\n                            // operation: operation,\r\n                            //screenName: screenName,\r\n                            //openModal: true,\r\n                            //ncontrolCode: ncontrolCode,\r\n                            loading: false,\r\n\r\n                        }\r\n                    });\r\n                })\r\n                .catch(error => {\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            loading: false\r\n                        }\r\n                    })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(intl.formatMessage({\r\n                            id: error.message\r\n                        }));\r\n                    } else {\r\n                        toast.warn(intl.formatMessage({\r\n                            id: error.response.data\r\n                        }));\r\n                    }\r\n                })\r\n        }\r\n        else {\r\n            toast.warn(intl.formatMessage({ id: \"IDS_INSTRUMENTCATEGORYNOTAVALIABLE\" }));\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport const getWorklistDetailFilter = (inputParam) => {\r\n    return (dispatch) => {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"worklist/getWorklistDetailFilter\", inputParam.inputData)\r\n            .then(response => {\r\n\r\n                delete inputParam.masterData['Worklist']\r\n                delete inputParam.masterData['WorklistSamples']\r\n                delete inputParam.masterData['WorklistHistory']\r\n                delete inputParam.masterData['selectedWorklist']\r\n                inputParam.masterData['Worklist'] = {}\r\n                inputParam.masterData['WorklistSamples'] = {}\r\n                inputParam.masterData['WorklistHistory'] = {}\r\n                inputParam.masterData['selectedWorklist'] = {}\r\n                inputParam.masterData['Worklist'] = response.data.Worklist\r\n                inputParam.masterData['WorklistSamples'] = response.data.WorklistSamples\r\n                inputParam.masterData['WorklistHistory'] = response.data.WorklistHistory\r\n                inputParam.masterData['selectedWorklist'] = response.data.selectedWorklist\r\n                const masterData = response.data\r\n                //sortData(masterData);\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false,\r\n                        dataState: undefined,\r\n                        activeKey: \"IDS_WORKLISTSAMPLE\",\r\n                        masterData: {\r\n                            ...inputParam.masterData,\r\n                            defaultRegSubTypeValue: inputParam.masterData.RegSubTypeValue,\r\n                            FilterStatusValue: inputParam.masterData.defaultFilterStatusValue\r\n                        }\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                });\r\n                toast.error(error.message);\r\n            });\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport const onWorklistApproveClick = (masterData, userInfo, ConfirmMessage, approvalId) => {\r\n    return (dispatch) => {\r\n        dispatch(initRequest(true));\r\n     //   rsapi.post(\"worklist/updateWorklistDetail\", { \"worklist\": masterData.selectedWorklist, \"userinfo\": userInfo, \"ncontrolCode\": approvalId,\"ndesigntemplatemappingcode\":masterData.ndesigntemplatemappingcode }\r\n     rsapi.post(\"worklist/approveWorklist\", { \"worklist\": masterData.selectedWorklist, \"userinfo\": userInfo, \"ncontrolCode\": approvalId,\"ndesigntemplatemappingcode\":masterData.ndesigntemplatemappingcode }\r\n\r\n     )\r\n            .then(response => {\r\n                let masterData1 = {\r\n                    ...masterData,\r\n                    ...response.data\r\n                }\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    activeKey: \"IDS_WORKLISTSAMPLE\",\r\n                    payload: {\r\n                        loading: false,\r\n                        dataState: undefined,\r\n                        masterData: {\r\n                            ...masterData1\r\n                        }\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                });\r\n\r\n                if (error.response.status === 500) {\r\n                    toast.error(intl.formatMessage({\r\n                        id: error.message\r\n                    }));\r\n                }\r\n                else if (error.response.status === 417) {\r\n                    ConfirmMessage.confirm(\"information\", \"Information!\", error.response.data, undefined, \"ok\", undefined, true, undefined);\r\n                }\r\n                else {\r\n                    toast.warn(intl.formatMessage({\r\n                        id: error.response.data\r\n                    }));\r\n                }\r\n                //toast.error(error.message);\r\n            });\r\n    }\r\n}\r\n\r\n\r\n\r\nexport function getEditSectionAndTest(screenName, operation, primaryKeyName, masterData, userInfo, ncontrolCode) {\r\n    return function (dispatch) {\r\n        if (masterData.SelectedInsCat !== null) {\r\n            let urlArray = [];\r\n            const Section = rsapi.post(\"worklist/getSectionAndTest\", { \"ncontrolCode\": ncontrolCode, \"userinfo\": userInfo })\r\n            // const GetEditSetionAndTest={}\r\n            if (operation === \"update\") {\r\n                const GetEditSetionAndTest = rsapi.post(\"/worklistpreparation/getEditSectionAndTest\", {\r\n                    [primaryKeyName]: masterData.selectedWorklist[primaryKeyName],\r\n                    \"userinfo\": userInfo\r\n                });\r\n\r\n                const TestGet = rsapi.post(\"worklist/getSectionbaseTest\", { nsectionCode: masterData.selectedWorklist[\"nsectioncode\"], \"userinfo\": userInfo })\r\n                urlArray = [Section, GetEditSetionAndTest, TestGet];\r\n            }\r\n            //urlArray = [Section,GetEditSetionAndTest];\r\n\r\n\r\n            dispatch(initRequest(true));\r\n            Axios.all(urlArray)\r\n                .then(response => {\r\n                    const SectionMap = constructOptionList(response[0].data || [], \"nsectioncode\",\r\n                        \"ssectionname\", undefined, undefined, false);\r\n                    const Section = SectionMap.get(\"OptionList\");\r\n\r\n                    const TestMap = constructOptionList(response[2].data || [], \"ntestcode\",\r\n                        \"stestsynonym\", undefined, undefined, false);\r\n                    const Test = TestMap.get(\"OptionList\");\r\n\r\n\r\n                    let selectedRecord = {};\r\n                    let instrumentCategory = [];\r\n\r\n                    selectedRecord = {\r\n                        \"nsectioncode\": {\r\n                            \"value\": response[1].data.nsectioncode,\r\n                            \"label\": response[1].data.ssectionname\r\n                        },\r\n                        \"ntestcode\": {\r\n                            \"value\": response[1].data.ntestcode,\r\n                            \"label\": response[1].data.stestsynonym\r\n                        }\r\n                    };\r\n\r\n\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        activeKey: \"IDS_WORKLISTSAMPLE\",\r\n                        payload: {\r\n                            masterData: {\r\n                                ...masterData,\r\n                            },\r\n                            Section, Test,\r\n                            instrumentCategory: instrumentCategory,\r\n                            isOpen: true,\r\n                            selectedRecord: selectedRecord,\r\n                            operation: operation,\r\n                            screenName: screenName,\r\n                            openModal: true,\r\n                            ncontrolCode: ncontrolCode,\r\n                            loading: false,\r\n\r\n\r\n\r\n                        }\r\n                    });\r\n                })\r\n                .catch(error => {\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            loading: false\r\n                        }\r\n                    })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(intl.formatMessage({\r\n                            id: error.message\r\n                        }));\r\n                    } else {\r\n                        toast.warn(intl.formatMessage({\r\n                            id: error.response.data\r\n                        }));\r\n                    }\r\n                })\r\n        }\r\n        else {\r\n            toast.warn(intl.formatMessage({ id: \"IDS_INSTRUMENTCATEGORYNOTAVALIABLE\" }));\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport const createWorklistCreation = (inputParam, masterData) => {\r\n    return (dispatch) => {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"worklist/createWorklistCreation\", inputParam.inputData)\r\n            .then(response => {\r\n\r\n                delete inputParam.masterData['WorklistSamples']\r\n                inputParam.masterData['WorklistSamples'] = {}\r\n\r\n                inputParam.masterData['WorklistSamples'] = response.data.WorklistSamples\r\n                delete inputParam.masterData['WorklistHistory']\r\n                inputParam.masterData['WorklistHistory'] = {}\r\n\r\n                inputParam.masterData['WorklistHistory'] = response.data.WorklistHistory\r\n\r\n                const masterData = response.data\r\n                //sortData(masterData);\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false,\r\n                        openModal: false,\r\n                        dataState: undefined,\r\n                        addedComponentList: [],\r\n                        masterData: {\r\n                            ...inputParam.masterData,\r\n                        }\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                });\r\n                toast.error(error.message);\r\n            });\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\nexport function getConfigVersionTestWise(inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"worklist/getApprovalConfigVersionByRegSubType\", inputParam.inputData)\r\n            .then(response => {\r\n                let responseData = { ...response.data }\r\n                responseData = sortData(responseData)\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData: {\r\n                            ...inputParam.masterData,\r\n                            ...responseData,\r\n                            RegSubTypeValue: inputParam.masterData.RegSubTypeValue,\r\n                            RegistrationSubTypeList: inputParam.masterData.RegistrationSubTypeList\r\n                            //nneedsubsample:inputParam.masterData.realRegSubTypeValue.nneedsubsample\r\n                        },\r\n                        loading: false,\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\nexport function ViewSampleDetails(masterData, screenName, userInfo, viewdetails) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"worklist/getSampleViewDetails\", { selectedRecord: masterData.selectedWorklist, PatientId: viewdetails[\"Patient Id\"], npreregno: viewdetails[\"npreregno\"], userinfo: userInfo })\r\n            .then(response => {\r\n                //  masterData = {\r\n                //     ...masterData,\r\n                //     ...response.data\r\n                // }\r\n                masterData['AuditModifiedComments'] = [];\r\n                masterData['AuditModifiedComments'] = response.data['AuditModifiedComments']\r\n                masterData['viewdetails'] = [];\r\n                masterData['viewdetails'] = response.data['viewdetails'][0]\r\n                //sortData(masterData);\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        //viewdetails:viewdetails,\r\n                        masterData,\r\n                        screenName: \"IDS_VIEWDETAILS\",\r\n                        loading: false,\r\n                        openModal: true,\r\n\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\n\r\nexport function getWorklisthistoryAction(inputData) {\r\n\r\n    return function (dispatch) {\r\n\r\n\r\n\r\n        dispatch(initRequest(true));\r\n\r\n        rsapi.post(\"worklist/getWorklisthistory\", inputData)\r\n\r\n            .then(response => {\r\n\r\n                dispatch({\r\n\r\n                    type: DEFAULT_RETURN,\r\n\r\n                    payload: {\r\n\r\n                        masterData: {\r\n\r\n                            ...inputData.masterData,\r\n\r\n                            ...response.data,\r\n\r\n                        },\r\n\r\n                        loading: false,\r\n\r\n                        openModal: false,\r\n\r\n                        activeKey: \"IDS_WORKLISTHISTORY\"\r\n\r\n                    }\r\n\r\n                })\r\n\r\n            })\r\n\r\n            .catch(error => {\r\n\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n\r\n                if (error.response.status === 500) {\r\n\r\n                    toast.error(error.message);\r\n\r\n                }\r\n\r\n                else {\r\n\r\n                    toast.warn(error.response.data);\r\n\r\n                }\r\n\r\n            })\r\n\r\n    }\r\n\r\n}\r\n\r\nexport function getRegSubTypeWise(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"worklist/getRegistrationsubTypeByRegType\", inputData)\r\n            .then(response => {\r\n                let responseData = { ...response.data }\r\n                responseData = sortData(responseData)\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...responseData,\r\n                            //defaultRegTypeValue: inputData.defaultRegTypeValue\r\n                            RegTypeValue: inputData.masterData.RegTypeValue\r\n                        },\r\n                        loading: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\n\r\nexport const reportWorklist = (inputParam) => {\r\n    return (dispatch) => {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"worklist/worklistReportGenerate\", {\r\n            ...inputParam,\r\n            nworklistcode: inputParam.nworklistcode\r\n        })\r\n            .then(response => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false,\r\n                        loadEsign: false,\r\n                        openModal: false,\r\n                        showConfirmAlert: false\r\n                    }\r\n                })\r\n                document.getElementById(\"download_data\").setAttribute(\"href\", response.data.filepath);\r\n                document.getElementById(\"download_data\").click();\r\n            }).catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module"}