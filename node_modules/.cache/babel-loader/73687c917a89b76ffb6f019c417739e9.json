{"ast":null,"code":"var _jsxFileName = \"E:\\\\WorkingFolder\\\\React_Postgres\\\\ALPD\\\\branches\\\\SOURCE-513-FINAL\\\\SOURCE-513-ALPD-4991\\\\QuaLISWeb\\\\src\\\\pages\\\\testgroup\\\\AddTestGroupSpecification.jsx\";\nimport React from 'react';\nimport { Row, Col, Form, Card, FormGroup, FormLabel } from 'react-bootstrap';\nimport FormInput from '../../components/form-input/form-input.component';\nimport DateTimePicker from '../../components/date-time-picker/date-time-picker.component';\nimport CustomSwitch from '../../components/custom-switch/custom-switch.component';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport { SampleType, transactionStatus, MaterialType, formCode } from '../../components/Enumeration';\nimport FormSelectSearch from '../../components/form-select-search/form-select-search.component';\nimport { CONTAINERTYPE } from '../../components/Enumeration';\nimport { faClosedCaptioning } from '@fortawesome/free-solid-svg-icons';\nimport FormTreeMenu from '../../components/form-tree-menu/form-tree-menu.component';\nimport { useState, useEffect } from 'react';\nimport PerfectScrollbar from 'react-perfect-scrollbar';\nimport { TreeDesign } from '../registration/registration.styled';\n\nconst AddTestGroupSpecification = props => {\n  const [copyProfileName, setCopyProfileName] = useState(props.copyProfileName);\n  const [copyFocusKey, setCopyFocusKey] = useState(props.focusKey);\n  const [copyActiveKey, setCopyActiveKey] = useState(props.activeKey);\n  useEffect(() => {\n    setCopyProfileName(props.copyProfileName);\n    setCopyFocusKey(props.focusKey);\n    setCopyActiveKey(props.activeKey);\n  }, [props.copyProfileName, props.focusKey, props.activeKey]);\n\n  function onCopyTreeClick(event) {\n    setCopyFocusKey(event.key);\n    setCopyActiveKey(event.key);\n    let manipulationCode = -1;\n    let profileName = props.intl.formatMessage({\n      id: \"IDS_SELECTVALIDPROFILE\"\n    });\n\n    if (!event.hasNodes) {\n      manipulationCode = event.item.ntemplatemanipulationcode;\n      profileName = event.label;\n    }\n\n    setCopyProfileName(profileName);\n    props.onCopyTreeClick(manipulationCode, profileName, event.key, event.key);\n  } //Display selected spec details for copy action --ALPD-4099 ,work done by Dhanushya R I\n\n\n  if (props.operation === 'copy') return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    md: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(FormGroup, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 34\n    }\n  }, /*#__PURE__*/React.createElement(Card, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(Card.Header, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(FormattedMessage, {\n    id: \"IDS_COPYSPECIFICATION\",\n    message: \"Copy Specification\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 42\n    }\n  })), /*#__PURE__*/React.createElement(Card.Body, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    md: 4,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 37\n    }\n  }, props.tempFilterData.nsampletypecode && props.tempFilterData.nsampletypecode.item.ncategorybasedflowrequired === transactionStatus.NO && props.selectedRecord.ncategorybasedflow === transactionStatus.NO ? /*#__PURE__*/React.createElement(FormGroup, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 45\n    }\n  }, /*#__PURE__*/React.createElement(FormLabel, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 49\n    }\n  }, props.genericLabel && props.genericLabel[\"Product\"][\"jsondata\"][\"sdisplayname\"][props.userInfo.slanguagetypecode]), /*#__PURE__*/React.createElement(\"span\", {\n    className: \"readonly-text font-weight-normal\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 49\n    }\n  }, \" \", props.tempFilterData.nproductcode.label, \" \")) : /*#__PURE__*/React.createElement(FormGroup, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 45\n    }\n  }, /*#__PURE__*/React.createElement(FormLabel, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 49\n    }\n  }, props.genericLabel && props.genericLabel[\"ProductCategory\"][\"jsondata\"][\"sdisplayname\"][props.userInfo.slanguagetypecode]), /*#__PURE__*/React.createElement(\"span\", {\n    className: \"readonly-text font-weight-normal\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 49\n    }\n  }, \" \", props.tempFilterData.nproductcatcode.label, \" \"))), /*#__PURE__*/React.createElement(Col, {\n    md: 4,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 37\n    }\n  }, /*#__PURE__*/React.createElement(FormGroup, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 41\n    }\n  }, /*#__PURE__*/React.createElement(FormLabel, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 45\n    }\n  }, /*#__PURE__*/React.createElement(FormattedMessage, {\n    id: \"IDS_SELECTEDPROFILE\",\n    message: \"Selected Profile\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 56\n    }\n  })), /*#__PURE__*/React.createElement(\"span\", {\n    className: \"readonly-text font-weight-normal\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 45\n    }\n  }, \" \", props.initialProfile))), /*#__PURE__*/React.createElement(Col, {\n    md: 4,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 37\n    }\n  }, /*#__PURE__*/React.createElement(FormGroup, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 41\n    }\n  }, /*#__PURE__*/React.createElement(FormLabel, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 45\n    }\n  }, /*#__PURE__*/React.createElement(FormattedMessage, {\n    id: \"IDS_SELECTEDSPECNAME\",\n    message: \"Selected Spec Name\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 56\n    }\n  })), /*#__PURE__*/React.createElement(\"span\", {\n    className: \"readonly-text font-weight-normal\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 45\n    }\n  }, \" \", props.masterData && props.masterData[\"SelectedSpecification\"] ? props.masterData[\"SelectedSpecification\"].sspecname : \"\")))))), \" \"))), /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    md: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 21\n    }\n  }, props.tempFilterData.nsampletypecode && props.tempFilterData.nsampletypecode.item.ncategorybasedflowrequired === transactionStatus.NO && props.selectedRecord.ncategorybasedflow === transactionStatus.NO ? /*#__PURE__*/React.createElement(FormSelectSearch, {\n    formLabel: props.intl.formatMessage({\n      id: props.tempFilterData[\"nsampletypecode\"] ? props.tempFilterData[\"nsampletypecode\"] && props.tempFilterData[\"nsampletypecode\"].item.nformcode === formCode.PRODUCTCATEGORY ? props.genericLabel && props.genericLabel[\"Product\"][\"jsondata\"][\"sdisplayname\"][props.userInfo.slanguagetypecode] : props.tempFilterData[\"nsampletypecode\"] && props.tempFilterData[\"nsampletypecode\"].item.nformcode === formCode.INSTRUMENTCATEGORY ? \"IDS_INSTRUMENT\" : props.tempFilterData[\"nsampletypecode\"] && props.tempFilterData[\"nsampletypecode\"].item.nformcode === formCode.MATERIALCATEGORY ? \"IDS_MATERIAL\" : props.genericLabel && props.genericLabel[\"Product\"][\"jsondata\"][\"sdisplayname\"][props.userInfo.slanguagetypecode] : props.genericLabel[\"Product\"][\"jsondata\"][\"sdisplayname\"][props.userInfo.slanguagetypecode]\n    }),\n    name: \"nproductcode\",\n    placeholder: props.intl.formatMessage({\n      id: \"IDS_PLEASESELECT\"\n    }),\n    optionId: \"nproductcode\",\n    optionValue: \"sproductname\",\n    options: props.product || [],\n    showOption: true,\n    value: props.masterData.selectedRecordCopy && props.masterData.selectedRecordCopy.isCopy === true && props.masterData.selectedRecordCopy[\"nproductcode\"] ? props.masterData.selectedRecordCopy[\"nproductcode\"] : props.tempFilterData[\"nproductcode\"],\n    isSearchable: true,\n    onChange: event => props.changeProductOrProductCategory(event, \"nproductcode\", 1, props.masterData, props.selectedRecord) //, \"getTreeVersionTemplate\", \"product\"\n    ,\n    sortOrder: \"ascending\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 29\n    }\n  }) : /*#__PURE__*/React.createElement(FormSelectSearch, {\n    formLabel: props.intl.formatMessage({\n      id: props.tempFilterData[\"nsampletypecode\"] ? props.tempFilterData[\"nsampletypecode\"] && props.tempFilterData[\"nsampletypecode\"].item.nformcode === formCode.PRODUCTCATEGORY ? props.genericLabel && props.genericLabel[\"ProductCategory\"][\"jsondata\"][\"sdisplayname\"][props.userInfo.slanguagetypecode] : props.tempFilterData[\"nsampletypecode\"] && props.tempFilterData[\"nsampletypecode\"].item.nformcode === formCode.INSTRUMENTCATEGORY ? \"IDS_INSTRUMENTCATEGORY\" : props.tempFilterData[\"nsampletypecode\"] && props.tempFilterData[\"nsampletypecode\"].item.nformcode === formCode.MATERIALCATEGORY ? \"IDS_MATERIALCATEGORY\" : props.genericLabel && props.genericLabel[\"ProductCategory\"][\"jsondata\"][\"sdisplayname\"][props.userInfo.slanguagetypecode] : props.genericLabel[\"ProductCategory\"][\"jsondata\"][\"sdisplayname\"][props.userInfo.slanguagetypecode]\n    }),\n    name: \"nproductcatcode\",\n    placeholder: props.intl.formatMessage({\n      id: \"IDS_PLEASESELECT\"\n    }),\n    optionId: \"nproductcatcode\",\n    optionValue: \"sproductcatname\" //ALPD-4758 done by Dhanushya RI,to load sample category only for categorybasedflow yes\n    ,\n    options: props.productCategory && props.productCategory.filter(Data => Data.item.ncategorybasedflow === transactionStatus.YES) || [],\n    showOption: true,\n    value: props.masterData.selectedRecordCopy && props.masterData.selectedRecordCopy.isCopy === true && props.masterData.selectedRecordCopy && props.masterData.selectedRecordCopy[\"nproductcatcode\"] ? props.masterData.selectedRecordCopy[\"nproductcatcode\"] : props.tempFilterData[\"nproductcatcode\"],\n    isSearchable: true,\n    onChange: event => props.changeProductOrProductCategory(event, \"nproductcatcode\", 2, props.masterData, props.selectedRecord) //, \"getProduct\", \"productcategory\"\n    ,\n    sortOrder: \"ascending\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 29\n    }\n  }), /*#__PURE__*/React.createElement(FormInput, {\n    name: \"sselectedprofilename\",\n    label: props.intl.formatMessage({\n      id: \"IDS_SELECTEDPROFILE\"\n    }),\n    type: \"text\",\n    placeholder: props.intl.formatMessage({\n      id: \"IDS_SELECTEDPROFILE\"\n    }),\n    value: copyProfileName || \"\",\n    readOnly: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 25\n    }\n  }), /*#__PURE__*/React.createElement(FormInput, {\n    name: \"scopyspecname\",\n    label: props.intl.formatMessage({\n      id: \"IDS_SPECNAME\"\n    }),\n    type: \"text\",\n    onChange: event => props.onInputOnChange(event, 1),\n    placeholder: props.intl.formatMessage({\n      id: \"IDS_SPECNAME\"\n    }),\n    value: props.selectedRecord ? props.selectedRecord[\"scopyspecname\"] : \"\",\n    isMandatory: \"*\",\n    required: true,\n    maxLength: 100,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 25\n    }\n  }), /*#__PURE__*/React.createElement(TreeDesign, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(PerfectScrollbar, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(FormTreeMenu, {\n    data: props.Copydata === undefined ? props.data : props.Copydata,\n    hasSearch: false,\n    handleTreeClick: event => onCopyTreeClick(event),\n    initialOpenNodes: props.initialOpenNodes,\n    focusKey: copyFocusKey,\n    activeKey: copyActiveKey,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 33\n    }\n  }))))));else {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, \" \", /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 16\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 17\n      }\n    }, props.tempFilterData.nsampletypecode && props.tempFilterData.nsampletypecode.item.ncategorybasedflowrequired === transactionStatus.NO && props.selectedRecord.ncategorybasedflow === transactionStatus.NO ? /*#__PURE__*/React.createElement(FormInput, {\n      name: \"sproductname\",\n      label: props.genericLabel && props.genericLabel[\"Product\"][\"jsondata\"][\"sdisplayname\"][props.userInfo.slanguagetypecode],\n      type: \"text\",\n      onChange: event => props.onInputOnChange(event, 1),\n      placeholder: props.genericLabel && props.genericLabel[\"Product\"][\"jsondata\"][\"sdisplayname\"][props.userInfo.slanguagetypecode],\n      value: props.selectedRecord ? props.selectedRecord[\"sproductname\"] : \"\",\n      readOnly: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 25\n      }\n    }) : /*#__PURE__*/React.createElement(FormInput, {\n      name: \"sproductcatname\",\n      label: props.genericLabel && props.genericLabel[\"ProductCategory\"][\"jsondata\"][\"sdisplayname\"][props.userInfo.slanguagetypecode],\n      type: \"text\",\n      onChange: event => props.onInputOnChange(event, 1),\n      placeholder: props.genericLabel && props.genericLabel[\"ProductCategory\"][\"jsondata\"][\"sdisplayname\"][props.userInfo.slanguagetypecode],\n      value: props.selectedRecord ? props.selectedRecord[\"sproductcatname\"] : \"\",\n      readOnly: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 27\n      }\n    }), /*#__PURE__*/React.createElement(FormInput, {\n      name: \"sspecname\",\n      label: props.intl.formatMessage({\n        id: \"IDS_SPECNAME\"\n      }),\n      type: \"text\",\n      onChange: event => props.onInputOnChange(event, 1),\n      placeholder: props.intl.formatMessage({\n        id: \"IDS_SPECNAME\"\n      }),\n      value: props.selectedRecord ? props.selectedRecord[\"sspecname\"] : \"\",\n      isMandatory: \"*\",\n      required: true,\n      maxLength: 100,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 21\n      }\n    }))), /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 17\n      }\n    }, props.userInfo.istimezoneshow === transactionStatus.YES && /*#__PURE__*/React.createElement(Col, {\n      md: 6,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(FormSelectSearch, {\n      name: \"ntzexpirydate\",\n      formLabel: props.intl.formatMessage({\n        id: \"IDS_TIMEZONE\"\n      }),\n      placeholder: props.intl.formatMessage({\n        id: \"IDS_SELECTRECORD\"\n      }),\n      options: props.timeZoneList,\n      optionId: \"ntimezonecode\",\n      optionValue: \"stimezoneid\",\n      value: props.selectedRecord[\"ntzexpirydate\"],\n      defaultValue: props.selectedRecord[\"ntzexpirydate\"],\n      isMandatory: true,\n      isSearchable: true,\n      isClearable: false,\n      closeMenuOnSelect: true,\n      alphabeticalSort: true,\n      onChange: value => props.onComboChange(value, 'ntzexpirydate', 1),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 29\n      }\n    }))), /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 282,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 4,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 283,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(CustomSwitch, {\n      name: \"ntransactionstatus\",\n      label: props.intl.formatMessage({\n        id: \"IDS_ACTIVE\"\n      }),\n      type: \"switch\",\n      onChange: event => props.onInputOnChange(event, 1, [transactionStatus.ACTIVE, transactionStatus.DEACTIVE]),\n      placeholder: props.intl.formatMessage({\n        id: \"IDS_ACTIVE\"\n      }),\n      defaultValue: props.selectedRecord[\"ntransactionstatus\"] === transactionStatus.ACTIVE ? true : false,\n      checked: props.selectedRecord[\"ntransactionstatus\"] === transactionStatus.ACTIVE ? true : false,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 284,\n        columnNumber: 25\n      }\n    })), props.filterData && props.filterData.nproductcatcode.item.nmaterialtypecode == MaterialType.IQCSTANDARDMATERIALTYPE ? \"\" : /*#__PURE__*/React.createElement(Col, {\n      md: 4,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 300,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(CustomSwitch, {\n      name: \"ncomponentrequired\",\n      label: props.genericLabel && props.genericLabel[\"Component\"][\"jsondata\"][\"sdisplayname\"][props.userInfo.slanguagetypecode] + \" \" + props.intl.formatMessage({\n        id: \"IDS_REQUIRED\"\n      }),\n      type: \"switch\",\n      onChange: event => props.onInputOnChange(event, 1, [transactionStatus.YES, transactionStatus.NO]),\n      placeholder: props.genericLabel && props.genericLabel[\"Component\"][\"jsondata\"][\"sdisplayname\"][props.userInfo.slanguagetypecode] + \" \" + props.intl.formatMessage({\n        id: \"IDS_REQUIRED\"\n      }) // defaultValue={props.selectedRecord[\"ncomponentrequired\"] === transactionStatus.YES ? true : false}\n      //  checked={props.selectedRecord[\"ncomponentrequired\"] === transactionStatus.YES ? true : false}\n      ,\n      checked: props.selectedRecord ? props.selectedRecord[\"ncomponentrequired\"] === transactionStatus.YES ? true : false : false //disabled={ props.nsampletypecode  === SampleType.CLINICALTYPE && props.settings && parseInt(props.settings[22]) === transactionStatus.YES ? true : false }\n      //    disabled={props.tempFilterData && props.tempFilterData.nsampletypecode.item.ncategorybasedflowrequired === transactionStatus.YES ? true : false }\n      ,\n      disabled: props.tempFilterData && props.tempFilterData.nsampletypecode.item.ncomponentrequired === transactionStatus.YES ? true : false // disabled={true}//{props.operation===\"copy\"?true:false}\n      //   disabled={props.nsampletypecode === SampleType.CLINICALTYPE ? true : false}\n      ,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 301,\n        columnNumber: 33\n      }\n    }))));\n  }\n};\n\nexport default injectIntl(AddTestGroupSpecification);","map":{"version":3,"sources":["E:/WorkingFolder/React_Postgres/ALPD/branches/SOURCE-513-FINAL/SOURCE-513-ALPD-4991/QuaLISWeb/src/pages/testgroup/AddTestGroupSpecification.jsx"],"names":["React","Row","Col","Form","Card","FormGroup","FormLabel","FormInput","DateTimePicker","CustomSwitch","FormattedMessage","injectIntl","SampleType","transactionStatus","MaterialType","formCode","FormSelectSearch","CONTAINERTYPE","faClosedCaptioning","FormTreeMenu","useState","useEffect","PerfectScrollbar","TreeDesign","AddTestGroupSpecification","props","copyProfileName","setCopyProfileName","copyFocusKey","setCopyFocusKey","focusKey","copyActiveKey","setCopyActiveKey","activeKey","onCopyTreeClick","event","key","manipulationCode","profileName","intl","formatMessage","id","hasNodes","item","ntemplatemanipulationcode","label","operation","tempFilterData","nsampletypecode","ncategorybasedflowrequired","NO","selectedRecord","ncategorybasedflow","genericLabel","userInfo","slanguagetypecode","nproductcode","nproductcatcode","initialProfile","masterData","sspecname","nformcode","PRODUCTCATEGORY","INSTRUMENTCATEGORY","MATERIALCATEGORY","product","selectedRecordCopy","isCopy","changeProductOrProductCategory","productCategory","filter","Data","YES","onInputOnChange","Copydata","undefined","data","initialOpenNodes","istimezoneshow","timeZoneList","value","onComboChange","ACTIVE","DEACTIVE","filterData","nmaterialtypecode","IQCSTANDARDMATERIALTYPE","ncomponentrequired"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { Row, Col, Form, Card, FormGroup, FormLabel } from 'react-bootstrap';\r\nimport FormInput from '../../components/form-input/form-input.component';\r\nimport DateTimePicker from '../../components/date-time-picker/date-time-picker.component';\r\nimport CustomSwitch from '../../components/custom-switch/custom-switch.component';\r\nimport { FormattedMessage, injectIntl } from 'react-intl';\r\nimport { SampleType, transactionStatus, MaterialType, formCode } from '../../components/Enumeration';\r\nimport FormSelectSearch from '../../components/form-select-search/form-select-search.component';\r\nimport { CONTAINERTYPE } from '../../components/Enumeration';\r\nimport { faClosedCaptioning } from '@fortawesome/free-solid-svg-icons';\r\nimport FormTreeMenu from '../../components/form-tree-menu/form-tree-menu.component';\r\nimport { useState, useEffect } from 'react';\r\nimport PerfectScrollbar from 'react-perfect-scrollbar';\r\nimport { TreeDesign } from '../registration/registration.styled';\r\n\r\nconst AddTestGroupSpecification = props => {\r\n\r\n    const [copyProfileName, setCopyProfileName] = useState(props.copyProfileName);\r\n    const [copyFocusKey, setCopyFocusKey] = useState(props.focusKey)\r\n    const [copyActiveKey, setCopyActiveKey] = useState(props.activeKey)\r\n    useEffect(() => {\r\n        setCopyProfileName(props.copyProfileName);\r\n        setCopyFocusKey(props.focusKey);\r\n        setCopyActiveKey(props.activeKey);\r\n    }, [props.copyProfileName, props.focusKey, props.activeKey]);\r\n    function onCopyTreeClick(event) {\r\n        setCopyFocusKey(event.key);\r\n        setCopyActiveKey(event.key);\r\n        let manipulationCode = -1;\r\n        let profileName = props.intl.formatMessage({ id: \"IDS_SELECTVALIDPROFILE\" });\r\n        if (!event.hasNodes) {\r\n            manipulationCode = event.item.ntemplatemanipulationcode;\r\n            profileName = event.label;\r\n        }\r\n        setCopyProfileName(profileName);\r\n        props.onCopyTreeClick(manipulationCode, profileName, event.key, event.key);\r\n    }\r\n    //Display selected spec details for copy action --ALPD-4099 ,work done by Dhanushya R I\r\n    if (props.operation === 'copy')\r\n        return (\r\n            <>\r\n                <Row>\r\n\r\n                    <Col md={12}><FormGroup>\r\n                        <Card>\r\n                            <Card.Header><FormattedMessage id=\"IDS_COPYSPECIFICATION\" message=\"Copy Specification\" /></Card.Header>\r\n                            <Card.Body>\r\n                                <Row>\r\n                                    <Col md={4}>\r\n                                        {(props.tempFilterData.nsampletypecode && props.tempFilterData.nsampletypecode.item.ncategorybasedflowrequired === transactionStatus.NO) &&\r\n                                            (props.selectedRecord.ncategorybasedflow === transactionStatus.NO) ?\r\n                                            <FormGroup>\r\n                                                <FormLabel>{props.genericLabel && props.genericLabel[\"Product\"][\"jsondata\"][\"sdisplayname\"][props.userInfo.slanguagetypecode]}</FormLabel>\r\n                                                <span className=\"readonly-text font-weight-normal\"> {props.tempFilterData.nproductcode.label} </span>\r\n                                            </FormGroup> :\r\n                                            <FormGroup>\r\n                                                <FormLabel>{props.genericLabel && props.genericLabel[\"ProductCategory\"][\"jsondata\"][\"sdisplayname\"][props.userInfo.slanguagetypecode]}</FormLabel>\r\n                                                <span className=\"readonly-text font-weight-normal\"> {props.tempFilterData.nproductcatcode.label} </span>\r\n                                            </FormGroup>\r\n                                        }\r\n                                    </Col>\r\n                                    <Col md={4}>\r\n                                        <FormGroup>\r\n                                            <FormLabel><FormattedMessage id=\"IDS_SELECTEDPROFILE\" message=\"Selected Profile\" /></FormLabel>\r\n                                            <span className=\"readonly-text font-weight-normal\"> {props.initialProfile}</span>\r\n                                        </FormGroup>\r\n                                    </Col>\r\n                                    <Col md={4}>\r\n                                        <FormGroup>\r\n                                            <FormLabel><FormattedMessage id=\"IDS_SELECTEDSPECNAME\" message=\"Selected Spec Name\" /></FormLabel>\r\n                                            <span className=\"readonly-text font-weight-normal\"> {props.masterData && props.masterData[\"SelectedSpecification\"] ? props.masterData[\"SelectedSpecification\"].sspecname : \"\"}</span>\r\n                                        </FormGroup>\r\n                                    </Col>\r\n\r\n                                </Row>\r\n                            </Card.Body>\r\n                        </Card> </FormGroup>\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col md={12}>\r\n                        {(props.tempFilterData.nsampletypecode && props.tempFilterData.nsampletypecode.item.ncategorybasedflowrequired === transactionStatus.NO) &&\r\n                            (props.selectedRecord.ncategorybasedflow === transactionStatus.NO) ?\r\n                            <FormSelectSearch\r\n                                formLabel={props.intl.formatMessage({\r\n                                    id: props.tempFilterData[\"nsampletypecode\"] ? props.tempFilterData[\"nsampletypecode\"] && props.tempFilterData[\"nsampletypecode\"].item.nformcode === formCode.PRODUCTCATEGORY ? props.genericLabel && props.genericLabel[\"Product\"][\"jsondata\"][\"sdisplayname\"][props.userInfo.slanguagetypecode] :\r\n                                        props.tempFilterData[\"nsampletypecode\"] && props.tempFilterData[\"nsampletypecode\"].item.nformcode === formCode.INSTRUMENTCATEGORY ? \"IDS_INSTRUMENT\" :\r\n                                            props.tempFilterData[\"nsampletypecode\"] && props.tempFilterData[\"nsampletypecode\"].item.nformcode === formCode.MATERIALCATEGORY ? \"IDS_MATERIAL\" : props.genericLabel && props.genericLabel[\"Product\"][\"jsondata\"][\"sdisplayname\"][props.userInfo.slanguagetypecode] : props.genericLabel[\"Product\"][\"jsondata\"][\"sdisplayname\"][props.userInfo.slanguagetypecode]\r\n                                })}\r\n                                name={\"nproductcode\"}\r\n                                placeholder={props.intl.formatMessage({ id: \"IDS_PLEASESELECT\" })}\r\n                                optionId={\"nproductcode\"}\r\n                                optionValue={\"sproductname\"}\r\n                                options={props.product || []}\r\n                                showOption={true}\r\n                                value={props.masterData.selectedRecordCopy && props.masterData.selectedRecordCopy.isCopy === true && props.masterData.selectedRecordCopy[\"nproductcode\"]\r\n                                    ? props.masterData.selectedRecordCopy[\"nproductcode\"] : props.tempFilterData[\"nproductcode\"]}\r\n                                isSearchable={true}\r\n                                onChange={(event) => props.changeProductOrProductCategory(event, \"nproductcode\", 1, props.masterData, props.selectedRecord)}//, \"getTreeVersionTemplate\", \"product\"\r\n                                sortOrder=\"ascending\"\r\n                            >\r\n                            </FormSelectSearch> :\r\n                            <FormSelectSearch\r\n                                formLabel={props.intl.formatMessage({\r\n                                    id: props.tempFilterData[\"nsampletypecode\"] ? props.tempFilterData[\"nsampletypecode\"] && props.tempFilterData[\"nsampletypecode\"].item.nformcode === formCode.PRODUCTCATEGORY ? props.genericLabel && props.genericLabel[\"ProductCategory\"][\"jsondata\"][\"sdisplayname\"][props.userInfo.slanguagetypecode] :\r\n                                        props.tempFilterData[\"nsampletypecode\"] && props.tempFilterData[\"nsampletypecode\"].item.nformcode === formCode.INSTRUMENTCATEGORY ? \"IDS_INSTRUMENTCATEGORY\" :\r\n                                            props.tempFilterData[\"nsampletypecode\"] && props.tempFilterData[\"nsampletypecode\"].item.nformcode === formCode.MATERIALCATEGORY ? \"IDS_MATERIALCATEGORY\" : props.genericLabel && props.genericLabel[\"ProductCategory\"][\"jsondata\"][\"sdisplayname\"][props.userInfo.slanguagetypecode] : props.genericLabel[\"ProductCategory\"][\"jsondata\"][\"sdisplayname\"][props.userInfo.slanguagetypecode]\r\n                                })}\r\n                                name={\"nproductcatcode\"}\r\n                                placeholder={props.intl.formatMessage({ id: \"IDS_PLEASESELECT\" })}\r\n                                optionId={\"nproductcatcode\"}\r\n                                optionValue={\"sproductcatname\"}\r\n                                 //ALPD-4758 done by Dhanushya RI,to load sample category only for categorybasedflow yes\r\n                                 options={props.productCategory && props.productCategory.filter(Data =>\r\n                                    Data.item.ncategorybasedflow===transactionStatus.YES) || []}\r\n                                showOption={true}\r\n                                value={props.masterData.selectedRecordCopy && props.masterData.selectedRecordCopy.isCopy === true && props.masterData.selectedRecordCopy && props.masterData.selectedRecordCopy[\"nproductcatcode\"] ? props.masterData.selectedRecordCopy[\"nproductcatcode\"] : props.tempFilterData[\"nproductcatcode\"]}\r\n                                isSearchable={true}\r\n                                onChange={(event) => props.changeProductOrProductCategory(event, \"nproductcatcode\", 2, props.masterData, props.selectedRecord)}//, \"getProduct\", \"productcategory\"\r\n                                sortOrder=\"ascending\"\r\n                            >\r\n                            </FormSelectSearch>}\r\n                        <FormInput\r\n                            name={\"sselectedprofilename\"}\r\n                            label={props.intl.formatMessage({ id: \"IDS_SELECTEDPROFILE\" })}\r\n                            type=\"text\"\r\n                            placeholder={props.intl.formatMessage({ id: \"IDS_SELECTEDPROFILE\" })}\r\n                            value={copyProfileName || \"\"}\r\n                            readOnly={true}\r\n                        />\r\n                        <FormInput\r\n                            name={\"scopyspecname\"}\r\n                            label={props.intl.formatMessage({ id: \"IDS_SPECNAME\" })}\r\n                            type=\"text\"\r\n                            onChange={(event) => props.onInputOnChange(event, 1)}\r\n                            placeholder={props.intl.formatMessage({ id: \"IDS_SPECNAME\" })}\r\n                            value={props.selectedRecord ? props.selectedRecord[\"scopyspecname\"] : \"\"}\r\n                            isMandatory=\"*\"\r\n                            required={true}\r\n                            maxLength={100}\r\n                        />\r\n\r\n                        <TreeDesign>\r\n                            <PerfectScrollbar>\r\n\r\n                                <FormTreeMenu\r\n                                    data={props.Copydata === undefined ? props.data : props.Copydata}\r\n                                    hasSearch={false}\r\n                                    handleTreeClick={(event) => onCopyTreeClick(event)}\r\n                                    initialOpenNodes={props.initialOpenNodes}\r\n                                    focusKey={copyFocusKey}\r\n                                    activeKey={copyActiveKey}\r\n                                />\r\n\r\n                            </PerfectScrollbar>\r\n                        </TreeDesign>\r\n\r\n                    </Col>\r\n                </Row>\r\n            </>)\r\n\r\n    else {\r\n        return (\r\n            <> <Row>\r\n                <Col md={12}>\r\n                    {(props.tempFilterData.nsampletypecode && props.tempFilterData.nsampletypecode.item.ncategorybasedflowrequired === transactionStatus.NO) &&\r\n                        (props.selectedRecord.ncategorybasedflow === transactionStatus.NO) ?\r\n                        <FormInput\r\n                            name={\"sproductname\"}\r\n                            label={props.genericLabel && props.genericLabel[\"Product\"][\"jsondata\"][\"sdisplayname\"][props.userInfo.slanguagetypecode]}\r\n                            type=\"text\"\r\n                            onChange={(event) => props.onInputOnChange(event, 1)}\r\n                            placeholder={props.genericLabel && props.genericLabel[\"Product\"][\"jsondata\"][\"sdisplayname\"][props.userInfo.slanguagetypecode]}\r\n                            value={props.selectedRecord ? props.selectedRecord[\"sproductname\"] : \"\"}\r\n                            readOnly={true}\r\n                        />\r\n\r\n                        : <FormInput\r\n                            name={\"sproductcatname\"}\r\n                            label={props.genericLabel && props.genericLabel[\"ProductCategory\"][\"jsondata\"][\"sdisplayname\"][props.userInfo.slanguagetypecode]}\r\n                            type=\"text\"\r\n                            onChange={(event) => props.onInputOnChange(event, 1)}\r\n                            placeholder={props.genericLabel && props.genericLabel[\"ProductCategory\"][\"jsondata\"][\"sdisplayname\"][props.userInfo.slanguagetypecode]}\r\n                            value={props.selectedRecord ? props.selectedRecord[\"sproductcatname\"] : \"\"}\r\n                            readOnly={true}\r\n                        />\r\n                    }\r\n                    <FormInput\r\n                        name={\"sspecname\"}\r\n                        label={props.intl.formatMessage({ id: \"IDS_SPECNAME\" })}\r\n                        type=\"text\"\r\n                        onChange={(event) => props.onInputOnChange(event, 1)}\r\n                        placeholder={props.intl.formatMessage({ id: \"IDS_SPECNAME\" })}\r\n                        value={props.selectedRecord ? props.selectedRecord[\"sspecname\"] : \"\"}\r\n                        isMandatory=\"*\"\r\n                        required={true}\r\n                        maxLength={100}\r\n                    />\r\n                </Col>\r\n            </Row>\r\n                <Row>\r\n                    {/* <Col md={props.userInfo.istimezoneshow ? 6 : 12}> */}\r\n                    {/* <Row>\r\n                        <Col md={6}> */}\r\n\r\n\r\n                    {/* <DateTimePicker\r\n                        name={\"dexpirydate\"}\r\n                        label={props.intl.formatMessage({ id: \"IDS_EXPIRYDATEWOTIME\" })}\r\n                        className='form-control'\r\n                        placeholderText=\"Select date..\"\r\n                        selected={props.selectedRecord[\"dexpirydate\"]}\r\n                        //dateFormat={\"dd/MM/yyyy\"}\r\n                        dateFormat={props.userInfo.ssitedate}\r\n                        timeInputLabel={props.intl.formatMessage({ id: \"IDS_TIME\" })}\r\n                        showTimeInput={false}\r\n                        isClearable={false}\r\n                        onChange={date => props.handleDateChange(\"dexpirydate\", date)}\r\n                        value={props.selectedRecord[\"dexpirydate\"]}\r\n                        isMandatory={true}\r\n                        required={true}\r\n                    />\r\n                </Col> */}\r\n                    {props.userInfo.istimezoneshow === transactionStatus.YES &&\r\n                        <Col md={6}>\r\n                            <FormSelectSearch\r\n                                name={\"ntzexpirydate\"}\r\n                                formLabel={props.intl.formatMessage({ id: \"IDS_TIMEZONE\" })}\r\n                                placeholder={props.intl.formatMessage({ id: \"IDS_SELECTRECORD\" })}\r\n                                options={props.timeZoneList}\r\n                                optionId=\"ntimezonecode\"\r\n                                optionValue=\"stimezoneid\"\r\n                                value={props.selectedRecord[\"ntzexpirydate\"]}\r\n                                defaultValue={props.selectedRecord[\"ntzexpirydate\"]}\r\n                                isMandatory={true}\r\n                                isSearchable={true}\r\n                                isClearable={false}\r\n                                closeMenuOnSelect={true}\r\n                                alphabeticalSort={true}\r\n                                onChange={(value) => props.onComboChange(value, 'ntzexpirydate', 1)}\r\n                            />\r\n                            {/* </Col>\r\n                    </Row> */}\r\n                        </Col>\r\n                    }\r\n                    {/* <Col md={6}>\r\n                    <FormSelectSearch\r\n                            formLabel={props.intl.formatMessage({ id: \"IDS_PROJECTTYPE\" })}\r\n                            isSearchable={true}\r\n                            name={\"nprojecttypecode\"}\r\n                            isDisabled={false}\r\n                            placeholder={props.intl.formatMessage({ id: \"IDS_SELECTRECORD\" })}\r\n                            isMandatory={false}\r\n                            isClearable={true}\r\n                            options={props.projectTypeList}\r\n                            value={props.selectedRecord[\"nprojecttypecode\"] || \"\"}\r\n                            defaultValue={props.selectedRecord[\"nprojecttypecode\"]}\r\n                            onChange={(event) => props.onComboChange(event, \"nprojecttypecode\", 3)}\r\n                            closeMenuOnSelect={true}\r\n                        >\r\n                        </FormSelectSearch>\r\n                </Col>\r\n                 <Col md={6}>\r\n                        <FormSelectSearch\r\n                            name={\"nprojectcode\"}\r\n                            formLabel={props.intl.formatMessage({ id: \"IDS_PROJECTCODE\" })}\r\n                            placeholder={props.intl.formatMessage({ id: \"IDS_SELECTRECORD\" })}\r\n                            options={props.projectList}\r\n                            value={props.selectedRecord[\"nprojectcode\"]}\r\n                            defaultValue={props.selectedRecord[\"nprojectcode\"]}\r\n                            isMandatory={true}\r\n                            isSearchable={true}\r\n                            isClearable={false}\r\n                            closeMenuOnSelect={true}\r\n                            alphabeticalSort={true}\r\n                            onChange={(value) => props.onComboChange(value, 'nprojectcode', 1)}\r\n                        />\r\n                        \r\n                    </Col> */}\r\n                </Row>\r\n\r\n                <Row>\r\n                    <Col md={4}>\r\n                        <CustomSwitch\r\n                            name={\"ntransactionstatus\"}\r\n                            label={props.intl.formatMessage({ id: \"IDS_ACTIVE\" })}\r\n                            type=\"switch\"\r\n                            onChange={(event) => props.onInputOnChange(event, 1, [transactionStatus.ACTIVE, transactionStatus.DEACTIVE])}\r\n                            placeholder={props.intl.formatMessage({ id: \"IDS_ACTIVE\" })}\r\n                            defaultValue={props.selectedRecord[\"ntransactionstatus\"] === transactionStatus.ACTIVE ? true : false}\r\n                            checked={props.selectedRecord[\"ntransactionstatus\"] === transactionStatus.ACTIVE ? true : false}\r\n                        >\r\n                        </CustomSwitch>\r\n                    </Col>\r\n\r\n\r\n\r\n                    {\r\n                        props.filterData && props.filterData.nproductcatcode.item.nmaterialtypecode == MaterialType.IQCSTANDARDMATERIALTYPE ? \"\" :\r\n                            <Col md={4}>\r\n                                <CustomSwitch\r\n                                    name={\"ncomponentrequired\"}\r\n                                    label={props.genericLabel && props.genericLabel[\"Component\"][\"jsondata\"][\"sdisplayname\"][props.userInfo.slanguagetypecode] + \" \" + props.intl.formatMessage({ id: \"IDS_REQUIRED\" })}\r\n                                    type=\"switch\"\r\n                                    onChange={(event) => props.onInputOnChange(event, 1, [transactionStatus.YES, transactionStatus.NO])}\r\n                                    placeholder={props.genericLabel && props.genericLabel[\"Component\"][\"jsondata\"][\"sdisplayname\"][props.userInfo.slanguagetypecode] + \" \" + props.intl.formatMessage({ id: \"IDS_REQUIRED\" })}\r\n                                    // defaultValue={props.selectedRecord[\"ncomponentrequired\"] === transactionStatus.YES ? true : false}\r\n                                    //  checked={props.selectedRecord[\"ncomponentrequired\"] === transactionStatus.YES ? true : false}\r\n                                    checked={props.selectedRecord ? props.selectedRecord[\"ncomponentrequired\"] === transactionStatus.YES ? true : false : false}\r\n                                    //disabled={ props.nsampletypecode  === SampleType.CLINICALTYPE && props.settings && parseInt(props.settings[22]) === transactionStatus.YES ? true : false }\r\n                                    //    disabled={props.tempFilterData && props.tempFilterData.nsampletypecode.item.ncategorybasedflowrequired === transactionStatus.YES ? true : false }\r\n                                    disabled={props.tempFilterData && props.tempFilterData.nsampletypecode.item.ncomponentrequired === transactionStatus.YES ? true : false}\r\n\r\n                                // disabled={true}//{props.operation===\"copy\"?true:false}\r\n                                //   disabled={props.nsampletypecode === SampleType.CLINICALTYPE ? true : false}\r\n\r\n                                >\r\n                                </CustomSwitch>\r\n                            </Col>\r\n                    }\r\n\r\n\r\n                    {/* <Col md={4} >\r\n                    <CustomSwitch\r\n                        name={\"nclinicalspec\"}\r\n                        label={props.intl.formatMessage({ id: \"IDS_CLINICALSPEC\" })}\r\n                        type=\"switch\"\r\n                        onChange={(event) => props.onInputOnChange(event, 1, [transactionStatus.YES, transactionStatus.NO])}\r\n                        placeholder={props.intl.formatMessage({ id: \"IDS_CLINICALSPEC\" })}\r\n                        defaultValue={props.selectedRecord[\"nclinicalspec\"] === transactionStatus.YES ? true : false}\r\n                        checked={props.selectedRecord[\"nclinicalspec\"] === transactionStatus.YES ? true : false}\r\n                    // disabled={true}//{props.operation===\"copy\"?true:false}\r\n                    >\r\n                    </CustomSwitch>\r\n                </Col> */}\r\n\r\n\r\n                </Row>\r\n\r\n\r\n            </>\r\n        );\r\n    }\r\n\r\n};\r\n\r\nexport default injectIntl(AddTestGroupSpecification);"]},"metadata":{},"sourceType":"module"}