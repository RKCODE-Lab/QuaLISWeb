{"ast":null,"code":"import rsapi from '../rsapi';\nimport { DEFAULT_RETURN } from './LoginTypes';\nimport { toast } from 'react-toastify';\nimport { initRequest } from './LoginAction';\nimport { constructOptionList, fillRecordBasedOnCheckBoxSelection, getRecordBasedOnPrimaryKeyName, replaceUpdatedObject, sortData, getSameRecordFromTwoArrays, getSameRecordFromTwoDifferentArrays, filterRecordBasedOnPrimaryKeyName } from '../components/CommonScript';\nimport { postCRUDOrganiseTransSearch } from './ServiceAction';\nimport { REPORTTYPE, reportCOAType, transactionStatus } from '../components/Enumeration';\nimport { intl } from '../components/App';\nexport function getMyJobsubSampleDetail(inputData, isServiceRequired) {\n  return function (dispatch) {\n    let inputParamData = {\n      ntype: 2,\n      // nflag: 2,\n      nsampletypecode: inputData.nsampletypecode,\n      nregtypecode: inputData.nregtypecode,\n      nregsubtypecode: inputData.nregsubtypecode,\n      npreregno: inputData.npreregno,\n      ntransactionstatus: inputData.ntransactionstatus,\n      nsectioncode: inputData.nsectioncode,\n      ntestcode: inputData.ntestcode,\n      napprovalversioncode: inputData.napprovalversioncode,\n      napprovalconfigcode: inputData.napprovalconfigcode,\n      activeTestTab: inputData.activeTestTab,\n      activeSampleTab: inputData.activeSampleTab,\n      userinfo: inputData.userinfo,\n      nneedsubsample: inputData.masterData.realRegSubTypeValue.nneedsubsample,\n      ndesigntemplatemappingcode: inputData.masterData.ndesigntemplatemappingcode,\n      checkBoxOperation: inputData.masterData.searchedSubSample ? inputData.masterData.searchedSubSample.length > 0 ? inputData.checkBoxOperation : 3 : inputData.checkBoxOperation\n    };\n    let activeName = \"\";\n    let dataStateName = \"\";\n    const subSample = inputData.nneedsubsample;\n    dispatch(initRequest(true));\n\n    if (isServiceRequired) {\n      rsapi.post(\"myjobs/getMyJobsSubSampleDetails\", inputParamData).then(response => {\n        let responseData = { ...response.data,\n          MJSelectedSample: inputData.MJSelectedSample\n        };\n        responseData = sortData(responseData);\n        let oldSelectedTest = inputData.masterData.MJSelectedTest ? inputData.masterData.MJSelectedTest : [];\n        inputData.masterData.MJSelectedTest = responseData.MJSelectedTest ? responseData.MJSelectedTest : inputData.masterData.MJ_TEST.length > 0 ? [inputData.masterData.MJ_TEST[0]] : [];\n        let skipInfo = {};\n        let masterData = {};\n\n        if (inputData.searchTestRef !== undefined && inputData.searchTestRef.current !== null) {\n          inputData.searchTestRef.current.value = \"\";\n          masterData['searchedTests'] = undefined;\n        }\n\n        if (subSample) {\n          let oldSelectedSubSample = inputData.masterData.MJSelectedSubSample;\n          fillRecordBasedOnCheckBoxSelection(inputData.masterData, response.data, inputData.childTabsKey, inputData.checkBoxOperation, \"npreregno\", inputData.removeElementFromArray);\n          masterData = { ...inputData.masterData,\n            MJSelectedSample: inputData.MJSelectedSample,\n            selectedPreregno: inputData.npreregno,\n            MJSelectedSubSample: inputData.masterData.MJ_SUBSAMPLE.length > 0 ? [inputData.masterData.MJ_SUBSAMPLE[0]] : []\n          };\n\n          if (inputData.searchSubSampleRef !== undefined && inputData.searchSubSampleRef.current !== null) {\n            inputData.searchSubSampleRef.current.value = \"\";\n            masterData['searchedSubSample'] = undefined;\n          }\n\n          if (inputData.checkBoxOperation === 1 || inputData.checkBoxOperation === 7 || inputData.checkBoxOperation === 5) {\n            const wholeSubSampleList = masterData.MJ_SUBSAMPLE.map(b => b.ntransactionsamplecode);\n            oldSelectedSubSample.forEach((subsample, index) => {\n              if (!wholeSubSampleList.includes(subsample.ntransactionsamplecode)) {\n                oldSelectedSubSample.splice(index, 1);\n              }\n            });\n\n            if (oldSelectedSubSample.length > 0) {\n              masterData = { ...masterData,\n                MJSelectedSubSample: oldSelectedSubSample\n              };\n            }\n\n            const MJSelectedTest = oldSelectedTest.length > 0 ? getSameRecordFromTwoArrays(oldSelectedTest, masterData.MJSelectedSubSample, 'npreregno') : responseData.MJSelectedTest;\n            masterData = { ...masterData,\n              MJSelectedTest,\n              ApprovalParameter: responseData.ApprovalParameter ? responseData.ApprovalParameter.length > 0 ? responseData.ApprovalParameter : masterData.ApprovalParameter : masterData.ApprovalParameter\n            };\n          }\n\n          if (inputData.checkBoxOperation === 3) {\n            masterData = { ...masterData,\n              MJSelectedTest: masterData.MJ_TEST.length > 0 ? [masterData.MJ_TEST[0]] : [],\n              ApprovalParameter: responseData.ApprovalParameter ? responseData.ApprovalParameter.length > 0 ? responseData.ApprovalParameter : masterData.ApprovalParameter : masterData.ApprovalParameter\n            };\n          }\n\n          let {\n            testskip,\n            testtake,\n            subSampleSkip,\n            subSampleTake\n          } = inputData;\n          let bool = false;\n\n          if (inputData.masterData.MJ_SUBSAMPLE.length < inputData.subSampleSkip) {\n            testskip = 0;\n            subSampleSkip = 0;\n            bool = true;\n          }\n\n          if (bool) {\n            skipInfo = {\n              testskip,\n              testtake,\n              subSampleSkip,\n              subSampleTake\n            };\n          }\n        } else {\n          fillRecordBasedOnCheckBoxSelection(inputData.masterData, responseData, inputData.childTabsKey, inputData.checkBoxOperation, \"npreregno\", inputData.removeElementFromArray);\n          let masterData = { ...inputData.masterData,\n            MJSelectedSample: inputData.MJSelectedSample,\n            MJSelectedSubSample: inputData.masterData.MJSelectedSubSample,\n            MJSelectedTest: inputData.masterData.MJSelectedTest || [],\n            selectedPreregno: inputData.npreregno\n          };\n\n          if (inputData.searchSubSampleRef !== undefined && inputData.searchSubSampleRef.current !== null) {\n            inputData.searchSubSampleRef.current.value = \"\";\n            masterData['searchedSubSample'] = undefined;\n          }\n\n          if (inputData.searchTestRef !== undefined && inputData.searchTestRef.current !== null) {\n            inputData.searchTestRef.current.value = \"\";\n            masterData['searchedTests'] = undefined;\n          }\n\n          let {\n            testskip,\n            testtake\n          } = inputData;\n          let bool = false;\n\n          if (inputData.masterData.MJ_TEST.length <= inputData.testskip) {\n            testskip = 0;\n            bool = true;\n          }\n\n          if (bool) {\n            skipInfo = {\n              testskip,\n              testtake\n            };\n          }\n\n          let ApprovalParameter = [];\n          let ResultUsedInstrument = [];\n          let ResultUsedTasks = [];\n          let RegistrationTestAttachment = [];\n          let ApprovalResultChangeHistory = [];\n          let RegistrationTestComment = [];\n          let ApprovalHistory = [];\n\n          if (inputData.checkBoxOperation === 1) {\n            let wholeTestList = masterData.MJ_TEST.map(b => b.ntransactiontestcode);\n            oldSelectedTest.map((test, index) => {\n              if (!wholeTestList.includes(test.ntransactiontestcode)) {\n                oldSelectedTest.splice(index, 1);\n              }\n\n              return null;\n            });\n            let keepOld = false;\n            let ntransactiontestcode;\n\n            if (oldSelectedTest.length > 0) {\n              keepOld = true;\n              masterData = { ...masterData,\n                selectedTest: oldSelectedTest\n              };\n            } else {\n              ntransactiontestcode = masterData.selectedTest[0].ntransactiontestcode;\n            }\n\n            switch (inputData.activeTestTab) {\n              case \"IDS_TESTATTACHMENTS\":\n                RegistrationTestAttachment = keepOld ? inputData.masterData.RegistrationTestAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment, ntransactiontestcode, \"ntransactiontestcode\");\n                activeName = \"RegistrationTestAttachment\";\n                break;\n\n              case \"IDS_TESTCOMMENTS\":\n                RegistrationTestComment = keepOld ? inputData.masterData.RegistrationTestComment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment, ntransactiontestcode, \"ntransactiontestcode\");\n                activeName = \"RegistrationTestComment\";\n                dataStateName = \"testCommentDataState\";\n                break;\n\n              default:\n                RegistrationTestAttachment = keepOld ? inputData.masterData.RegistrationTestAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment, ntransactiontestcode, \"ntransactiontestcode\");\n                activeName = \"RegistrationTestAttachment\";\n                break;\n            }\n          } else if (inputData.checkBoxOperation === 5) {\n            masterData = { ...masterData,\n              selectedTest: inputData.masterData.MJ_TEST.length > 0 ? [inputData.masterData.MJ_TEST[0]] : []\n            }; // let ntransactiontestcode = inputData.masterData.MJ_TEST.length > 0 ? inputData.masterData.MJ_TEST[0].ntransactiontestcode : 0;\n\n            let list = [];\n            let dbData = [];\n\n            switch (inputData.activeTestTab) {\n              case \"IDS_TESTATTACHMENTS\":\n                dbData = response.data.RegistrationTestAttachment || [];\n                list = [...inputData.masterData.RegistrationTestAttachment, ...dbData];\n                RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.MJ_TEST.length > 0 ? inputData.masterData.MJ_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n                break;\n\n              case \"IDS_TESTCOMMENTS\":\n                dbData = response.data.RegistrationTestComment || [];\n                list = [...inputData.masterData.RegistrationTestComment, ...dbData];\n                RegistrationTestComment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.MJ_TEST.length > 0 ? inputData.masterData.MJ_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n                break;\n\n              default:\n                dbData = response.data.RegistrationTestAttachment || [];\n                list = [...inputData.masterData.RegistrationTestAttachment, ...dbData];\n                RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.MJ_TEST.length > 0 ? inputData.masterData.MJ_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n                break;\n            }\n          } else {\n            masterData = { ...masterData,\n              selectedTest: inputData.masterData.MJ_TEST.length > 0 ? [inputData.masterData.MJ_TEST[0]] : []\n            }; // let ntransactiontestcode = inputData.masterData.MJ_TEST.length > 0 ? inputData.masterData.MJ_TEST[0].ntransactiontestcode : 0\n\n            let list = [];\n\n            switch (inputData.activeTestTab) {\n              case \"IDS_TESTATTACHMENTS\":\n                list = response.data.RegistrationTestAttachment || [];\n                RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.MJ_TEST.length > 0 ? inputData.masterData.MJ_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n                activeName = \"RegistrationTestAttachment\";\n                break;\n\n              case \"IDS_TESTCOMMENTS\":\n                list = response.data.RegistrationTestComment || [];\n                RegistrationTestComment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.MJ_TEST.length > 0 ? inputData.masterData.MJ_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n                activeName = \"RegistrationTestComment\";\n                dataStateName = \"testCommentDataState\";\n                break;\n\n              default:\n                list = [...inputData.masterData.RegistrationTestAttachment, ...response.data.RegistrationTestAttachment];\n                RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.MJ_TEST.length > 0 ? inputData.masterData.MJ_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n                activeName = \"RegistrationTestComment\";\n                break;\n            }\n          }\n\n          masterData = { ...masterData,\n            ApprovalParameter,\n            ResultUsedInstrument,\n            ResultUsedTasks,\n            RegistrationTestAttachment,\n            ApprovalResultChangeHistory,\n            RegistrationTestComment,\n            ApprovalHistory\n          };\n        }\n\n        if (inputData[dataStateName] && masterData[activeName].length <= inputData[dataStateName].skip) {\n          skipInfo = { ...skipInfo,\n            [dataStateName]: { ...inputData[dataStateName],\n              skip: 0,\n              sort: undefined,\n              filter: undefined\n            }\n          };\n        } else {\n          skipInfo = { ...skipInfo,\n            [dataStateName]: { ...inputData[dataStateName],\n              sort: undefined,\n              filter: undefined\n            }\n          };\n        }\n\n        skipInfo = { ...skipInfo,\n          samplePrintHistoryDataState: { ...inputData[dataStateName],\n            sort: undefined,\n            filter: undefined\n          },\n          sampleHistoryDataState: { ...inputData[dataStateName],\n            sort: undefined,\n            filter: undefined\n          }\n        };\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            masterData,\n            loading: false,\n            showFilter: false,\n            activeTestTab: inputData.activeTestTab,\n            activeSampleTab: inputData.activeSampleTab,\n            skip: undefined,\n            take: undefined,\n            ...skipInfo\n          }\n        });\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(error.response.data);\n        }\n      });\n    } else {\n      let skipInfo = {};\n      let bool = false;\n      let {\n        testskip,\n        testtake,\n        subsampletake,\n        subsampleskip\n      } = inputData;\n      let oldSelectedTest = inputData.masterData.MJSelectedTest;\n      let oldSelectedSubSample = inputData.masterData.MJSelectedSubSample;\n      let TestSelected = [];\n      let subSampleSelected = [];\n\n      if (inputData[\"statusNone\"]) {\n        TestSelected = getRecordBasedOnPrimaryKeyName(inputData.masterData.MJSelectedTest, inputData.removeElementFromArray[0].npreregno, \"npreregno\");\n        subSampleSelected = getRecordBasedOnPrimaryKeyName(inputData.masterData.MJSelectedSubSample, inputData.removeElementFromArray[0].npreregno, \"npreregno\");\n      } else {\n        TestSelected = filterRecordBasedOnPrimaryKeyName(inputData.masterData.MJSelectedTest, inputData.removeElementFromArray[0].npreregno, \"npreregno\");\n        subSampleSelected = filterRecordBasedOnPrimaryKeyName(inputData.masterData.MJSelectedSubSample, inputData.removeElementFromArray[0].npreregno, \"npreregno\");\n      }\n\n      let isGrandChildGetRequired = false;\n      let ApprovalParameter = [];\n      let ResultUsedInstrument = [];\n      let ResultUsedTasks = [];\n      let RegistrationTestAttachment = [];\n      let ApprovalResultChangeHistory = [];\n      let RegistrationTestComment = [];\n      let ApprovalHistory = []; // if(subSample)\n      // {\n      //     if (TestSelected.length > 0) {\n      //         isGrandChildGetRequired = false;\n      //     } else {\n      // if( TestSelected.length == 0 && subSampleSelected.length == 0)\n      // {\n      //     isGrandChildGetRequired = true;\n      // }\n      // else if(TestSelected.length == 0){\n      //     isGrandChildGetRequired = true;\n      // }\n      //         else\n      //         {\n      //             isGrandChildGetRequired = false;\n      //         }\n      //          isGrandChildGetRequired = true;\n      //     }\n      // }\n      // else\n      // {\n\n      if (TestSelected.length > 0) {\n        isGrandChildGetRequired = false;\n      } else {\n        isGrandChildGetRequired = true;\n      } // }\n\n\n      fillRecordBasedOnCheckBoxSelection(inputData.masterData, inputData.MJSelectedSample, inputData.childTabsKey, inputData.checkBoxOperation, \"npreregno\", inputData.removeElementFromArray);\n\n      if (isGrandChildGetRequired) {\n        let ntransactiontestcode = inputData.masterData.MJ_TEST.length > 0 ? inputData.masterData.MJ_TEST[0].ntransactiontestcode.toString() : \"\";\n        let MJSelectedSample = inputData.MJSelectedSample;\n        let selectedPreregno = inputData.npreregno;\n        let MJSelectedTest = inputData.masterData.MJ_TEST.length > 0 ? [inputData.masterData.MJ_TEST[0]] : [];\n        let MJSelectedSubSample = inputData.masterData.MJ_SUBSAMPLE;\n\n        if (subSample) {\n          let filterSelectedSubSample = getSameRecordFromTwoArrays(oldSelectedSubSample, inputData.masterData.MJ_SUBSAMPLE, \"ntransactionsamplecode\");\n          MJSelectedSubSample = filterSelectedSubSample.length > 0 ? filterSelectedSubSample : [inputData.masterData.MJ_SUBSAMPLE[0]];\n\n          if (inputData.masterData.MJ_SUBSAMPLE.length <= inputData.subsampleskip) {\n            subsampleskip = 0;\n            skipInfo = {\n              subsampletake,\n              subsampleskip\n            };\n          }\n        }\n\n        let masterData = { ...inputData.masterData,\n          MJSelectedSample,\n          MJSelectedSubSample,\n          MJSelectedTest\n        };\n\n        if (inputData.masterData.MJ_TEST.length <= inputData.testskip) {\n          testskip = 0;\n          bool = true;\n        }\n\n        if (bool) {\n          skipInfo = { ...skipInfo,\n            testskip,\n            testtake\n          };\n        }\n\n        inputData = { ...inputData,\n          childTabsKey: [\"ApprovalParameter\", \"ApprovalResultChangeHistory\", \"ResultUsedInstrument\", \"ResultUsedTasks\", \"RegistrationTestAttachment\", \"RegistrationTestComment\"],\n          ntransactiontestcode,\n          MJSelectedSample,\n          selectedPreregno,\n          MJSelectedTest,\n          MJSelectedSubSample,\n          checkBoxOperation: 3,\n          masterData,\n          ...skipInfo\n        };\n\n        if (subSample) {\n          if (MJSelectedTest.length === 0) {\n            inputData[\"npreregno\"] = MJSelectedSubSample.map(x => x.npreregno).join(\",\");\n            inputData[\"ntransactionsamplecode\"] = MJSelectedSubSample.map(x => x.ntransactionsamplecode).join(\",\");\n            inputData[\"checkBoxOperation\"] = 3;\n            inputData[\"childTabsKey\"] = [\"MJ_TEST\"];\n            dispatch(getMyJobTestDetail(inputData, true));\n          } else {\n            dispatch(getMJTestChildTabDetail(inputData, true));\n          }\n        } else {\n          dispatch(getMJTestChildTabDetail(inputData, true));\n        } // dispatch(getMJTestChildTabDetail(inputData, true));\n\n      } else {\n        //added by sudharshanan for test select issue while sample click\n        let masterData = { ...inputData.masterData,\n          MJSelectedTest: TestSelected ? TestSelected : inputData.masterData.MJ_TEST.length > 0 ? [inputData.masterData.MJ_TEST[0]] : [],\n          MJSelectedSample: inputData.MJSelectedSample,\n          MJSelectedSubSample: subSampleSelected ? subSampleSelected : inputData.masterData.MJ_SUBSAMPLE.length > 0 ? [inputData.masterData.MJ_SUBSAMPLE[0]] : []\n        };\n        let wholeTestList = masterData.MJ_TEST.map(b => b.ntransactiontestcode);\n        oldSelectedTest.map((test, index) => {\n          if (!wholeTestList.includes(test.ntransactiontestcode)) {\n            oldSelectedTest.splice(index, 1);\n          }\n\n          return null;\n        });\n\n        if (subSample) {\n          if (inputData.masterData.MJ_SUBSAMPLE.length <= inputData.subsampleskip) {\n            subsampleskip = 0;\n            skipInfo = {\n              subsampletake,\n              subsampleskip\n            };\n          }\n        }\n\n        let keepOld = false;\n        let ntransactiontestcode;\n\n        if (inputData.masterData.MJ_TEST.length <= inputData.testskip) {\n          testskip = 0;\n          bool = true;\n        }\n\n        if (bool) {\n          skipInfo = { ...skipInfo,\n            testskip,\n            testtake\n          };\n        }\n\n        if (oldSelectedTest.length > 0) {\n          keepOld = true;\n          masterData = { ...masterData,\n            selectedTest: oldSelectedTest\n          };\n        } else {\n          ntransactiontestcode = inputData.masterData.MJ_TEST.length > 0 ? inputData.masterData.MJ_TEST[0].ntransactiontestcode : \"-1\";\n        }\n\n        switch (inputData.activeTestTab) {\n          case \"IDS_TESTATTACHMENTS\":\n            RegistrationTestAttachment = keepOld ? inputData.masterData.RegistrationTestAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment, ntransactiontestcode, \"ntransactiontestcode\");\n            break;\n\n          case \"IDS_TESTCOMMENTS\":\n            RegistrationTestComment = keepOld ? inputData.masterData.RegistrationTestComment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment, ntransactiontestcode, \"ntransactiontestcode\");\n            break;\n\n          default:\n            RegistrationTestAttachment = keepOld ? inputData.masterData.RegistrationTestAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment, ntransactiontestcode, \"ntransactiontestcode\");\n            break;\n        }\n\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            masterData: { ...masterData,\n              // wholeApprovalParameter,\n              ApprovalParameter,\n              // wholeResultUsedInstrument,\n              ResultUsedInstrument,\n              // wholeResultUsedTasks,\n              ResultUsedTasks,\n              // wholeRegistrationTestAttachment,\n              RegistrationTestAttachment,\n              // wholeApprovalResultChangeHistory,\n              ApprovalResultChangeHistory,\n              // wholeRegistrationTestComments,\n              RegistrationTestComment,\n              ApprovalHistory,\n              ...skipInfo\n            },\n            ...skipInfo,\n            loading: false,\n            showFilter: false,\n            activeSampleTab: inputData.activeSampleTab,\n            activeTestTab: inputData.activeTestTab\n          }\n        });\n      }\n    }\n  };\n}\nexport function getMyJobTestDetail(inputData, isServiceRequired) {\n  return function (dispatch) {\n    let inputParamData = {\n      ntype: 2,\n      // nflag: 3,\n      nsampletypecode: inputData.nsampletypecode,\n      nregtypecode: inputData.nregtypecode,\n      nregsubtypecode: inputData.nregsubtypecode,\n      npreregno: inputData.npreregno,\n      // ntranscode: inputData.ntransactionstatus,\n      napprovalversioncode: inputData.napprovalversioncode,\n      napprovalconfigcode: inputData.napprovalconfigcode,\n      ntransactionsamplecode: inputData.ntransactionsamplecode,\n      ntransactiontestcode: 0,\n      nsectioncode: inputData.nsectioncode,\n      ntestcode: inputData.ntestcode,\n      activeTestTab: inputData.activeTestTab,\n      activeSampleTab: inputData.activeSampleTab,\n      userinfo: inputData.userinfo,\n      ntransactionstatus: inputData.ntransactionstatus,\n      ndesigntemplatemappingcode: inputData.masterData.ndesigntemplatemappingcode,\n      checkBoxOperation: inputData.checkBoxOperation\n    };\n    let activeName = \"\";\n    let dataStateName = \"\"; //let masterData = {};\n    // let subSample = inputData.nneedsubsample;\n\n    dispatch(initRequest(true));\n\n    if (isServiceRequired) {\n      rsapi.post(\"myjobs/getMyJobsTestDetails\", inputParamData).then(response => {\n        let responseData = { ...response.data\n        };\n        responseData = sortData(responseData, 'descending', 'npreregno');\n        inputData.searchTestRef.current.null = \"\";\n        let oldSelectedTest = inputData.masterData.MJSelectedTest;\n        inputData.masterData.MJSelectedTest = oldSelectedTest.length > 0 ? oldSelectedTest : responseData.MJSelectedTest ? responseData.MJSelectedTest : inputData.masterData.MJ_TEST.length > 0 ? [inputData.masterData.MJ_TEST[0]] : [];\n        fillRecordBasedOnCheckBoxSelection(inputData.masterData, responseData, inputData.childTabsKey, inputData.checkBoxOperation, \"npreregno\", inputData.removeElementFromArray);\n        let masterData = { ...inputData.masterData,\n          MJSelectedTest: inputData.masterData.MJSelectedTest,\n          MJSelectedSubSample: inputData.MJSelectedSubSample,\n          selectedPreregno: inputData.npreregno\n        };\n\n        if (inputData.searchSubSampleRef !== undefined && inputData.searchSubSampleRef.current !== null) {\n          inputData.searchSubSampleRef.current.value = \"\";\n          masterData['searchedSubSample'] = undefined;\n        }\n\n        if (inputData.searchTestRef !== undefined && inputData.searchTestRef.current !== null) {\n          inputData.searchTestRef.current.value = \"\";\n          masterData['searchedTests'] = undefined;\n        }\n\n        let {\n          testskip,\n          testtake\n        } = inputData;\n        let bool = false;\n\n        if (inputData.masterData.MJ_TEST.length <= inputData.testskip) {\n          testskip = 0;\n          bool = true;\n        }\n\n        let skipInfo = {};\n\n        if (bool) {\n          skipInfo = {\n            testskip,\n            testtake\n          };\n        }\n\n        let ApprovalParameter = [];\n        let ResultUsedInstrument = [];\n        let ResultUsedTasks = [];\n        let RegistrationTestAttachment = [];\n        let ApprovalResultChangeHistory = [];\n        let RegistrationTestComment = [];\n        let ApprovalHistory = [];\n\n        if (inputData.checkBoxOperation === 1) {\n          let wholeTestList = masterData.MJ_TEST.map(b => b.ntransactiontestcode);\n          oldSelectedTest.map((test, index) => {\n            if (!wholeTestList.includes(test.ntransactiontestcode)) {\n              oldSelectedTest.splice(index, 1);\n            }\n\n            return null;\n          });\n          let keepOld = false;\n          let ntransactiontestcode; // if (oldSelectedTest.length > 0) {\n          //     keepOld = true\n          //     masterData = {\n          //         ...masterData,\n          //         selectedTest: oldSelectedTest\n          //     }\n          // } else {\n\n          ntransactiontestcode = masterData.MJSelectedTest[0].ntransactiontestcode; // }\n\n          switch (inputData.activeTestTab) {\n            case \"IDS_TESTATTACHMENTS\":\n              RegistrationTestAttachment = keepOld ? inputData.masterData.RegistrationTestAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment, ntransactiontestcode, \"ntransactiontestcode\");\n              activeName = \"RegistrationTestAttachment\";\n              break;\n\n            case \"IDS_TESTCOMMENTS\":\n              RegistrationTestComment = keepOld ? inputData.masterData.RegistrationTestComment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment, ntransactiontestcode, \"ntransactiontestcode\");\n              activeName = \"RegistrationTestComment\";\n              dataStateName = \"testCommentDataState\";\n              break;\n\n            default:\n              RegistrationTestAttachment = keepOld ? inputData.masterData.RegistrationTestAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment, ntransactiontestcode, \"ntransactiontestcode\");\n              activeName = \"RegistrationTestAttachment\";\n              break;\n          }\n        } else if (inputData.checkBoxOperation === 5) {\n          masterData = { ...masterData,\n            MJSelectedTest: inputData.masterData.MJ_TEST.length > 0 ? [inputData.masterData.MJ_TEST[0]] : []\n          }; //let ntransactiontestcode = inputData.masterData.MJ_TEST.length > 0 ? inputData.masterData.MJ_TEST[0].ntransactiontestcode : 0;\n\n          let list = [];\n          let dbData = [];\n\n          switch (inputData.activeTestTab) {\n            case \"IDS_TESTATTACHMENTS\":\n              dbData = response.data.RegistrationTestAttachment || [];\n              list = [...inputData.masterData.RegistrationTestAttachment, ...dbData];\n              RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.MJ_TEST.length > 0 ? inputData.masterData.MJ_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              break;\n\n            case \"IDS_TESTCOMMENTS\":\n              dbData = response.data.RegistrationTestComment || [];\n              list = [...inputData.masterData.RegistrationTestComment, ...dbData];\n              RegistrationTestComment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.MJ_TEST.length > 0 ? inputData.masterData.MJ_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              break;\n\n            default:\n              dbData = response.data.RegistrationTestAttachment || [];\n              list = [...inputData.masterData.RegistrationTestAttachment, ...dbData];\n              RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.MJ_TEST.length > 0 ? inputData.masterData.MJ_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              break;\n          }\n        } else if (inputData.checkBoxOperation === 7) {\n          // let wholeTestList = masterData.MJ_TEST.map(b => b.ntransactiontestcode)\n          //let wholeTestListForSelectAll = masterData.MJ_TEST\n          // let wholeTestListForSelectSingleSelect =\n          // oldSelectedTest.forEach((test, index) => {\n          //     if (!wholeTestList.includes(test.ntransactiontestcode)) {\n          //         oldSelectedTest.splice(index, 1)\n          //     }\n          // })\n          let keepOld = false;\n          let ntransactiontestcode;\n\n          if (oldSelectedTest.length > 0) {\n            keepOld = true;\n            masterData = { ...masterData,\n              MJSelectedTest: oldSelectedTest //oldSelectedTest\n\n            };\n          } else {\n            ntransactiontestcode = inputData.masterData.MJ_TEST.length > 0 ? inputData.masterData.MJ_TEST[0].ntransactiontestcode : \"\";\n          }\n\n          switch (inputData.activeTestTab) {\n            case \"IDS_TESTATTACHMENTS\":\n              RegistrationTestAttachment = keepOld ? inputData.masterData.RegistrationTestAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment, ntransactiontestcode, \"ntransactiontestcode\");\n              activeName = \"RegistrationTestAttachment\";\n              break;\n\n            case \"IDS_TESTCOMMENTS\":\n              RegistrationTestComment = keepOld ? inputData.masterData.RegistrationTestComment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment, ntransactiontestcode, \"ntransactiontestcode\");\n              activeName = \"RegistrationTestComment\";\n              dataStateName = \"testCommentDataState\";\n              break;\n\n            default:\n              RegistrationTestAttachment = keepOld ? inputData.masterData.RegistrationTestAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment, ntransactiontestcode, \"ntransactiontestcode\");\n              activeName = \"RegistrationTestAttachment\";\n              break;\n          }\n        } else {\n          masterData = { ...masterData,\n            MJSelectedTest: inputData.masterData.MJ_TEST.length > 0 ? [inputData.masterData.MJ_TEST[0]] : []\n          }; // let ntransactiontestcode = response.data.MJSelectedTest ? response.data.MJSelectedTest.length > 0 ? \n          //      response.data.MJSelectedTest[0].ntransactiontestcode : inputData.masterData.MJ_TEST ? inputData.masterData.MJ_TEST.length > 0 ?  inputData.masterData.MJ_TEST[0].ntransactiontestcode :-1:-1:-1\n          //inputData.masterData.MJ_TEST ? inputData.masterData.MJ_TEST.length > 0 ? inputData.masterData.MJ_TEST[0].ntransactiontestcode: -1 : -1\n\n          let list = [];\n\n          switch (inputData.activeTestTab) {\n            case \"IDS_TESTATTACHMENTS\":\n              list = response.data.RegistrationTestAttachment || [];\n              RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.MJ_TEST.length > 0 ? inputData.masterData.MJ_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              activeName = \"RegistrationTestAttachment\";\n              break;\n\n            case \"IDS_TESTCOMMENTS\":\n              list = response.data.RegistrationTestComment || [];\n              RegistrationTestComment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.MJ_TEST.length > 0 ? inputData.masterData.MJ_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              activeName = \"RegistrationTestComment\";\n              dataStateName = \"testCommentDataState\";\n              break;\n\n            default:\n              list = [...inputData.masterData.RegistrationTestAttachment, ...response.data.RegistrationTestAttachment];\n              RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.MJ_TEST.length > 0 ? inputData.masterData.MJ_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              activeName = \"RegistrationTestAttachment\";\n              break;\n          }\n        }\n\n        masterData = { ...masterData,\n          ApprovalParameter,\n          ResultUsedInstrument,\n          ResultUsedTasks,\n          RegistrationTestAttachment,\n          ApprovalResultChangeHistory,\n          RegistrationTestComment,\n          ApprovalHistory\n        };\n\n        if (inputData[dataStateName] && masterData[activeName].length <= inputData[dataStateName].skip) {\n          skipInfo = { ...skipInfo,\n            [dataStateName]: { ...inputData[dataStateName],\n              skip: 0,\n              sort: undefined,\n              filter: undefined\n            }\n          };\n        } else {\n          skipInfo = { ...skipInfo,\n            [dataStateName]: { ...inputData[dataStateName],\n              sort: undefined,\n              filter: undefined\n            }\n          };\n        }\n\n        skipInfo = { ...skipInfo,\n          samplePrintHistoryDataState: { ...inputData[dataStateName],\n            sort: undefined,\n            filter: undefined\n          },\n          sampleHistoryDataState: { ...inputData[dataStateName],\n            sort: undefined,\n            filter: undefined\n          }\n        };\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            masterData: { ...masterData,\n              MJSelectedSubSample: inputData.MJSelectedSubSample,\n              selectedPreregno: inputData.npreregno,\n              selectedSampleCode: inputData.ntransactionsamplecode,\n              activeTestTab: inputData.activeTestTab,\n              activeSampleTab: inputData.activeSampleTab,\n              skip: undefined,\n              take: undefined,\n              ...skipInfo\n            },\n            ...skipInfo,\n            loading: false,\n            showFilter: false,\n            activeTestTab: inputData.activeTestTab\n          }\n        });\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(error.response.data);\n        }\n      });\n    } else {\n      let bool = false;\n      let skipInfo = {};\n      let {\n        testskip,\n        testtake\n      } = inputData;\n      let oldSelectedTest = inputData.masterData.MJSelectedTest;\n      let TestSelected = inputData[\"statusNone\"] ? getRecordBasedOnPrimaryKeyName(inputData.masterData.MJSelectedTest, inputData.removeElementFromArray[0].ntransactionsamplecode, \"ntransactionsamplecode\") : filterRecordBasedOnPrimaryKeyName(inputData.masterData.MJSelectedTest, inputData.removeElementFromArray[0].ntransactionsamplecode, \"ntransactionsamplecode\");\n      let isGrandChildGetRequired = false;\n\n      if (TestSelected.length > 0) {\n        isGrandChildGetRequired = false;\n      } else {\n        isGrandChildGetRequired = true;\n      }\n\n      let ApprovalParameter = [];\n      let ResultUsedInstrument = [];\n      let ResultUsedTasks = [];\n      let RegistrationTestAttachment = [];\n      let ApprovalResultChangeHistory = [];\n      let RegistrationTestComment = [];\n      let ApprovalHistory = [];\n      fillRecordBasedOnCheckBoxSelection(inputData.masterData, inputData.MJSelectedSubSample, inputData.childTabsKey, inputData.checkBoxOperation, \"ntransactionsamplecode\", inputData.removeElementFromArray);\n\n      if (isGrandChildGetRequired) {\n        //let ntransactiontestcode = inputData.masterData.MJ_TEST.length > 0 ? inputData.masterData.MJ_TEST[0].ntransactiontestcode.toString() : \"\";\n        let MJSelectedSample = inputData.masterData.MJSelectedSample;\n        let selectedPreregno = inputData.npreregno; //let selectedTest = inputData.masterData.MJ_TEST.length > 0 ? [inputData.masterData.MJ_TEST[0]] : [];\n\n        let MJSelectedSubSample = inputData.MJSelectedSubSample;\n        let filterTestSameOldSelectedTest = getSameRecordFromTwoDifferentArrays(oldSelectedTest, inputData.masterData.MJ_TEST, \"ntransactiontestcode\");\n        let MJSelectedTest = filterTestSameOldSelectedTest.length > 0 ? filterTestSameOldSelectedTest : [inputData.masterData.MJ_TEST[0]];\n        let ntransactiontestcode = MJSelectedTest.length > 0 ? MJSelectedTest.map(x => x.ntransactiontestcode).join(\",\") : \"-1\";\n\n        if (inputData.masterData.MJ_TEST.length <= inputData.testskip) {\n          testskip = 0;\n          bool = true;\n        }\n\n        if (bool) {\n          skipInfo = {\n            testskip,\n            testtake\n          };\n        }\n\n        inputData = { ...inputData,\n          childTabsKey: [\"ApprovalParameter\", \"ApprovalResultChangeHistory\", \"ResultUsedInstrument\", \"ResultUsedTasks\", \"RegistrationTestAttachment\", \"RegistrationTestComment\"],\n          ntransactiontestcode,\n          MJSelectedSample,\n          selectedPreregno,\n          MJSelectedTest,\n          MJSelectedSubSample,\n          checkBoxOperation: 3,\n          skipInfo\n        };\n        dispatch(getMJTestChildTabDetail(inputData, true));\n      } else {\n        let keepOld = false;\n        let ntransactiontestcode;\n        let masterData = { ...inputData.masterData,\n          MJSelectedSubSample: inputData.MJSelectedSubSample,\n          selectedTransactioncode: inputData.ntransactionsamplecode,\n          MJSelectedTest: TestSelected ? TestSelected : inputData.masterData.MJ_TEST.length > 0 ? [inputData.masterData.MJ_TEST[0]] : []\n        };\n        const wholeTestList = masterData.MJ_TEST.map(b => b.ntransactiontestcode);\n        oldSelectedTest.forEach((test, index) => {\n          if (!wholeTestList.includes(test.ntransactiontestcode)) {\n            oldSelectedTest.splice(index, 1);\n          }\n\n          return null;\n        });\n\n        if (inputData.masterData.MJ_TEST.length <= inputData.testskip) {\n          testskip = 0;\n          bool = true;\n        }\n\n        let skipInfo = {};\n\n        if (bool) {\n          skipInfo = {\n            testskip,\n            testtake\n          };\n        }\n\n        if (oldSelectedTest.length > 0) {\n          keepOld = true;\n          masterData = { ...masterData,\n            MJSelectedTest: oldSelectedTest\n          };\n        } else {\n          ntransactiontestcode = inputData.masterData.MJ_TEST.length > 0 ? inputData.masterData.MJ_TEST[0].ntransactiontestcode : \"-1\";\n        }\n\n        switch (inputData.activeTestTab) {\n          case \"IDS_TESTATTACHMENTS\":\n            RegistrationTestAttachment = keepOld ? inputData.masterData.RegistrationTestAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment, ntransactiontestcode, \"ntransactiontestcode\");\n            break;\n\n          case \"IDS_TESTCOMMENTS\":\n            RegistrationTestComment = keepOld ? inputData.masterData.RegistrationTestComment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment, ntransactiontestcode, \"ntransactiontestcode\");\n            break;\n\n          default:\n            RegistrationTestAttachment = keepOld ? inputData.masterData.RegistrationTestAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment, ntransactiontestcode, \"ntransactiontestcode\");\n            break;\n        }\n\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            masterData: { ...masterData,\n              ApprovalParameter,\n              ResultUsedInstrument,\n              ResultUsedTasks,\n              RegistrationTestAttachment,\n              ApprovalResultChangeHistory,\n              RegistrationTestComment,\n              ApprovalHistory\n            },\n            loading: false,\n            showFilter: false,\n            ...skipInfo,\n            activeSampleTab: inputData.activeSampleTab,\n            activeTestTab: inputData.activeTestTab\n          }\n        });\n      }\n    } //}\n\n  };\n}\nexport function getMJTestChildTabDetail(inputData, isServiceRequired) {\n  return function (dispatch) {\n    if (inputData.ntransactiontestcode && inputData.ntransactiontestcode.length > 0) {\n      let inputParamData = {\n        ntransactiontestcode: inputData.ntransactiontestcode,\n        npreregno: inputData.npreregno,\n        userinfo: inputData.userinfo\n      };\n      let url = null;\n      let {\n        testtake\n      } = inputData;\n      let activeName = \"\";\n      let dataStateName = \"\";\n\n      switch (inputData.activeTestTab) {\n        case \"IDS_TESTATTACHMENTS\":\n          url = \"attachment/getTestAttachment\";\n          activeName = \"RegistrationTestAttachment\";\n          break;\n\n        case \"IDS_TESTCOMMENTS\":\n          url = \"comments/getTestComment\";\n          activeName = \"RegistrationTestComment\";\n          dataStateName = \"testCommentDataState\";\n          break;\n\n        case \"IDS_SAMPLEATTACHMENTS\":\n          url = \"attachment/getSampleAttachment\";\n          break;\n\n        default:\n          url = \"attachment/getTestAttachment\";\n          activeName = \"RegistrationTestAttachment\";\n          break;\n      }\n\n      if (url !== null) {\n        dispatch(initRequest(true));\n\n        if (isServiceRequired) {\n          rsapi.post(url, inputParamData).then(response => {\n            let skipInfo = {};\n            let responseData = { ...response.data,\n              MJSelectedSubSample: inputData.MJSelectedSubSample || inputData.masterData.MJSelectedSubSample,\n              selectedTest: inputData.MJSelectedTest\n            }; //responseData = sortData(responseData)\n            // fillRecordBasedOnCheckBoxSelection(inputData.masterData, inputData.selectedTest, inputData.childTabsKey, inputData.checkBoxOperation, \"ntransactiontestcode\",inputData.removeElementFromArray);\n\n            fillRecordBasedOnCheckBoxSelection(inputData.masterData, responseData, inputData.childTabsKey, inputData.checkBoxOperation, \"npreregno\", inputData.removeElementFromArray);\n            let masterData = { ...inputData.masterData,\n              MJSelectedSample: inputData.MJSelectedSample || inputData.masterData.MJSelectedSample,\n              MJSelectedSubSample: inputData.MJSelectedSubSample || inputData.masterData.MJSelectedSubSample,\n              MJSelectedTest: inputData.MJSelectedTest,\n              selectedPreregno: inputData.npreregno,\n              selectedSampleCode: inputData.ntransactionsamplecode,\n              selectedTestCode: inputData.ntransactiontestcode\n            };\n\n            if (inputData[dataStateName] && masterData[activeName].length <= inputData[dataStateName].skip) {\n              skipInfo = {\n                [dataStateName]: { ...inputData[dataStateName],\n                  skip: 0,\n                  sort: undefined,\n                  filter: undefined\n                }\n              };\n            } else {\n              skipInfo = { ...skipInfo,\n                [dataStateName]: { ...inputData[dataStateName],\n                  sort: undefined,\n                  filter: undefined\n                }\n              };\n            }\n\n            dispatch({\n              type: DEFAULT_RETURN,\n              payload: {\n                masterData,\n                loading: false,\n                showFilter: false,\n                activeTestTab: inputData.activeTestTab,\n                screenName: inputData.screenName,\n                testtake,\n                testskip: undefined,\n                ...skipInfo\n              }\n            });\n          }).catch(error => {\n            dispatch({\n              type: DEFAULT_RETURN,\n              payload: {\n                loading: false\n              }\n            });\n\n            if (error.response.status === 500) {\n              toast.error(error.message);\n            } else {\n              toast.warn(error.response.data);\n            }\n          });\n        } else {\n          fillRecordBasedOnCheckBoxSelection(inputData.masterData, inputData.MJSelectedTest, inputData.childTabsKey, inputData.checkBoxOperation, \"ntransactiontestcode\", inputData.removeElementFromArray);\n          let skipInfo = {};\n          let masterData = { ...inputData.masterData,\n            MJSelectedTest: inputData.MJSelectedTest,\n            selectedPreregno: inputData.npreregno,\n            selectedSampleCode: inputData.ntransactionsamplecode,\n            selectedTestCode: inputData.ntransactiontestcode\n          };\n\n          if (inputData[dataStateName] && masterData[activeName].length <= inputData[dataStateName].skip) {\n            skipInfo = {\n              [dataStateName]: { ...inputData[dataStateName],\n                skip: 0,\n                sort: undefined,\n                filter: undefined\n              }\n            };\n          } else {\n            skipInfo = { ...skipInfo,\n              [dataStateName]: { ...inputData[dataStateName],\n                sort: undefined,\n                filter: undefined\n              }\n            };\n          }\n\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              masterData,\n              loading: false,\n              showFilter: false,\n              activeTestTab: inputData.activeTestTab,\n              screenName: inputData.screenName,\n              testtake,\n              testskip: undefined,\n              ...skipInfo\n            }\n          });\n        }\n      } else {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            masterData: { ...inputData.masterData\n            },\n            loading: false,\n            showFilter: false,\n            activeSampleTab: inputData.activeSampleTab\n          }\n        });\n      }\n    } else {\n      let {\n        ApprovalParameter,\n        ResultUsedInstrument,\n        ResultUsedTasks,\n        RegistrationTestAttachment,\n        ApprovalResultChangeHistory,\n        RegistrationTestComment,\n        ApprovalHistory\n      } = inputData.masterData;\n\n      switch (inputData.activeTestTab) {\n        case \"IDS_TESTATTACHMENTS\":\n          RegistrationTestAttachment = [];\n          break;\n\n        case \"IDS_TESTCOMMENTS\":\n          RegistrationTestComment = [];\n          break;\n\n        default:\n          RegistrationTestAttachment = [];\n          break;\n      }\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputData.masterData,\n            selectedTest: [],\n            ApprovalParameter,\n            ResultUsedInstrument,\n            ResultUsedTasks,\n            RegistrationTestAttachment,\n            ApprovalResultChangeHistory,\n            RegistrationTestComment,\n            ApprovalHistory\n          },\n          loading: false\n        }\n      });\n    }\n  };\n}\nexport function getMJSampleChildTabDetail(inputData) {\n  return function (dispatch) {\n    if (inputData.npreregno.length > 0) {\n      let inputParamData = {\n        npreregno: inputData.npreregno,\n        userinfo: inputData.userinfo\n      };\n      let url = null;\n\n      switch (inputData.activeSampleTab) {\n        case \"IDS_SAMPLEATTACHMENTS\":\n          url = \"attachment/getSampleAttachment\";\n          break;\n\n        case \"IDS_SAMPLECOMMENTS\":\n          url = \"comments/getSampleComment\";\n          break;\n\n        case \"IDS_SUBSAMPLEATTACHMENTS\":\n          url = \"resultentrybysample/getResultUsedMaterial\";\n          break;\n\n        case \"IDS_SUBSAMPLECOMMENTS\":\n          url = \"resultentrybysample/getResultUsedTask\";\n          break;\n\n        case \"IDS_SOURCE\":\n          url = \"registration/getRegistrationSourceCountry\";\n          break;\n\n        case \"IDS_SAMPLEAPPROVALHISTORY\":\n          url = \"approval/getSampleApprovalHistory\";\n          break;\n\n        case \"IDS_PRINTHISTORY\":\n          url = \"approval/getPrintHistory\";\n          break;\n\n        case \"IDS_REPORTHISTORY\":\n          url = \"approval/getCOAHistory\";\n          break;\n\n        default:\n          url = null;\n          break;\n      }\n\n      if (url !== null) {\n        dispatch(initRequest(true));\n        rsapi.post(url, inputParamData).then(response => {\n          let responseData = { ...response.data\n          };\n          responseData = sortData(responseData);\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              masterData: { ...inputData.masterData,\n                ...responseData,\n                selectedSample: inputData.selectedSample,\n                selectedTestCode: inputData.ntransactiontestcode\n              },\n              loading: false,\n              showFilter: false,\n              activeSampleTab: inputData.activeSampleTab,\n              screenName: inputData.screenName\n            }\n          });\n        }).catch(error => {\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              loading: false\n            }\n          });\n\n          if (error.response.status === 500) {\n            toast.error(error.message);\n          } else {\n            toast.warn(error.response.data);\n          }\n        });\n      } else {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            masterData: { ...inputData.masterData,\n              selectedSample: inputData.selectedSample\n            },\n            loading: false,\n            showFilter: false,\n            activeSampleTab: inputData.activeSampleTab\n          }\n        });\n      }\n    } else {\n      toast.warn(\"Please Select a Sample\");\n    }\n  };\n}\nexport function performAction(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"approval/performAction\", inputParam.inputData).then(response => {\n      let masterData = { ...inputParam.masterData,\n        ...response.data,\n        MJ_SAMPLE: replaceUpdatedObject(response.data.updatedSample, inputParam.masterData.MJ_SAMPLE, 'npreregno'),\n        MJ_SUBSAMPLE: replaceUpdatedObject(response.data.updatedSubSample, inputParam.masterData.MJ_SUBSAMPLE, 'ntransactionsamplecode'),\n        MJ_TEST: replaceUpdatedObject(response.data.updatedTest, inputParam.masterData.MJ_TEST, 'ntransactiontestcode')\n      }; // dispatch({type: DEFAULT_RETURN, payload:{\n      // masterData:{\n      //     ...inputParam.inputData.masterData,\n      //     ...response.data, \n      //     MJ_SAMPLE:replaceUpdatedObject(response.data.updatedSample,inputParam   .inputData.masterData.MJ_SAMPLE,'npreregno'),\n      //     MJ_SUBSAMPLE:replaceUpdatedObject(response.data.updatedSubSample,inputParam.inputData.masterData.MJ_SUBSAMPLE,'ntransactionsamplecode'),\n      //     MJ_TEST:replaceUpdatedObject(response.data.updatedTest,inputParam.inputData.masterData.MJ_TEST,'ntransactiontestcode')\n      // },\n      //     loading:false ,\n      //     loadEsign:false,\n      //     openChildModal:false                     \n      // }}) \n\n      let respObject = {\n        masterData,\n        inputParam,\n        openChildModal: false,\n        operation: \"dynamic\",\n        masterStatus: \"\",\n        errorCode: undefined,\n        loadEsign: false,\n        showEsign: false,\n        selectedRecord: {},\n        loading: false\n      };\n      dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList, respObject));\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function updateDecision(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"approval/updateDecision\", inputParam.inputData).then(response => {\n      let responseData = { ...response.data\n      };\n      responseData = sortData(responseData); // dispatch({type: DEFAULT_RETURN, payload:{\n      //     masterData:{\n      //         ...inputParam.masterData,\n      //         ...responseData, \n      //         MJ_SAMPLE:replaceUpdatedObject(response.data.updatedSample,inputParam.masterData.MJ_SAMPLE,'npreregno'),\n      //         MJ_SUBSAMPLE:replaceUpdatedObject(response.data.updatedSubSample,inputParam.masterData.MJ_SUBSAMPLE,'ntransactionsamplecode'),\n      //         MJ_TEST:replaceUpdatedObject(response.data.updatedTest,inputParam.masterData.MJ_TEST,'ntransactiontestcode')\n      //     },\n      //     loading:false                      \n      // }}) \n\n      let masterData = { ...inputParam.masterData,\n        ...responseData,\n        MJ_SAMPLE: replaceUpdatedObject(response.data.updatedSample, inputParam.masterData.MJ_SAMPLE, 'npreregno'),\n        MJ_SUBSAMPLE: replaceUpdatedObject(response.data.updatedSubSample, inputParam.masterData.MJ_SUBSAMPLE, 'ntransactionsamplecode'),\n        MJ_TEST: replaceUpdatedObject(response.data.updatedTest, inputParam.masterData.MJ_TEST, 'ntransactiontestcode')\n      };\n      let respObject = {\n        masterData,\n        inputParam,\n        openChildModal: false,\n        operation: \"dynamic\",\n        masterStatus: \"\",\n        errorCode: undefined,\n        loadEsign: false,\n        showEsign: false,\n        selectedRecord: {},\n        loading: false\n      };\n      dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList, respObject));\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getRegType(inputData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"myjobs/getRegistrationType\", inputData).then(response => {\n      let responseData = { ...response.data\n      };\n      responseData = sortData(responseData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputData.masterData,\n            ...responseData,\n            realSampleTypeValue: inputData.realSampleTypeValue\n          },\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getRegSubType(inputData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"myjobs/getRegistrationsubType\", inputData).then(response => {\n      let responseData = { ...response.data\n      };\n      responseData = sortData(responseData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputData.masterData,\n            ...responseData,\n            realRegTypeValue: inputData.realRegTypeValue\n          },\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getTestStatus(inputData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"myjobs/getFilterStatus\", inputData).then(response => {\n      let responseData = { ...response.data\n      };\n      responseData = sortData(responseData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputData.masterData,\n            ...responseData,\n            RegSubTypeValue: inputData.RegSubTypeValue\n          },\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getAppConfigVersion(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"myjobs/getApprovalConfigVersion\", inputParam.inputData).then(response => {\n      let responseData = { ...response.data\n      };\n      responseData = sortData(responseData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputParam.masterData,\n            ...responseData,\n            realRegSubTypeValue: inputParam.masterData.realRegSubTypeValue // fromDate: inputParam.inputData.dfrom,\n            // toDate: inputParam.inputData.dto,\n\n          },\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getSection(inputData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"myjobs/getTestCombo\", inputData).then(response => {\n      let responseData = { ...response.data\n      };\n      responseData = sortData(responseData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputData.masterData,\n            ...responseData,\n            realUserSectionValue: inputData.masterData.realUserSectionValue\n          },\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getMyJobsSample(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"myjobs/getMyJobsDetails\", inputParam.inputData).then(response => {\n      let responseData = { ...response.data\n      }; // responseData = sortData(responseData)\n\n      let masterData = { ...inputParam.masterData,\n        ...responseData\n      };\n\n      if (inputParam.searchSampleRef !== undefined && inputParam.searchSampleRef.current !== null) {\n        inputParam.searchSampleRef.current.value = \"\";\n        masterData['searchedSample'] = undefined;\n      }\n\n      if (inputParam.searchSubSampleRef !== undefined && inputParam.searchSubSampleRef.current !== null) {\n        inputParam.searchSubSampleRef.current.value = \"\";\n        masterData['searchedSubSample'] = undefined;\n      }\n\n      if (inputParam.searchTestRef !== undefined && inputParam.searchTestRef.current !== null) {\n        inputParam.searchTestRef.current.value = \"\"; // masterData['searchedTest'] = undefined\n\n        masterData['searchedTests'] = undefined;\n      }\n\n      sortData(masterData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false,\n          showFilter: false,\n          skip: 0,\n          take: inputParam.take,\n          testskip: 0,\n          testtake: inputParam.testtake,\n          resultDataState: { ...inputParam.resultDataState,\n            sort: undefined,\n            filter: undefined\n          },\n          instrumentDataState: { ...inputParam.instrumentDataState,\n            sort: undefined,\n            filter: undefined\n          },\n          materialDataState: { ...inputParam.materialDataState,\n            sort: undefined,\n            filter: undefined\n          },\n          taskDataState: { ...inputParam.taskDataState,\n            sort: undefined,\n            filter: undefined\n          },\n          documentDataState: { ...inputParam.documentDataState,\n            sort: undefined,\n            filter: undefined\n          },\n          resultChangeDataState: { ...inputParam.resultChangeDataState,\n            sort: undefined,\n            filter: undefined\n          },\n          testCommentDataState: { ...inputParam.testCommentDataState,\n            sort: undefined,\n            filter: undefined\n          },\n          historyDataState: { ...inputParam.historyDataState,\n            sort: undefined,\n            filter: undefined\n          },\n          samplePrintHistoryDataState: { ...inputParam.samplePrintHistoryDataState,\n            sort: undefined,\n            filter: undefined\n          },\n          sampleHistoryDataState: { ...inputParam.sampleHistoryDataState,\n            sort: undefined,\n            filter: undefined\n          }\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getStatusCombo(inputParam) {\n  return function (dispatch) {\n    let inputData = {\n      ntransactionresultcode: inputParam.primaryKeyValue,\n      userinfo: inputParam.userInfo\n    };\n    dispatch(initRequest(true));\n    rsapi.post(\"approval/getStatusCombo\", inputData).then(response => {\n      let responseData = { ...response.data\n      }; //responseData = sortData(responseData)\n\n      const GradeListMap = constructOptionList(response.data.Grade || [], \"ngradecode\", \"sgradename\", 'ascending', 'ngradecode', false);\n      let Grade = GradeListMap.get(\"OptionList\");\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputParam.masterData,\n            ...responseData,\n            Grade,\n            selectedParamId: inputParam.primaryKeyValue\n          },\n          loading: false,\n          showFilter: false,\n          openChildModal: true,\n          ncontrolCode: inputParam.ncontrolCode,\n          selectedRecord: {\n            senforcestatuscomment: response.data.parameterComment && response.data.parameterComment.senforcestatuscomment,\n            ntransactionresultcode: response.data.parameterComment && response.data.parameterComment.ntransactionresultcode,\n            ntransactiontestcode: response.data.parameterComment && response.data.parameterComment.ntransactiontestcode\n          },\n          operation: \"enforce\",\n          screenName: \"IDS_STATUS\"\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getAcceptTest(inputParam) {\n  return function (dispatch) {\n    let inputData = {\n      nsampletypecode: inputParam.testGetParam.nsampletypecode,\n      nregtypecode: inputParam.testGetParam.nregtypecode,\n      nregsubtypecode: inputParam.testGetParam.nregsubtypecode,\n      ntransactionstatus: inputParam.testGetParam.ntransactionstatus,\n      napprovalversioncode: inputParam.testGetParam.napprovalversioncode,\n      nsectioncode: inputParam.testGetParam.nsectioncode,\n      ntestcode: inputParam.testGetParam.ntestcode,\n      fromdate: inputParam.testGetParam.dfrom,\n      todate: inputParam.testGetParam.dto,\n      npreregno: inputParam.testGetParam.masterData.MJSelectedSample ? inputParam.testGetParam.masterData.MJSelectedSample.map(sample => sample.npreregno).join(\",\") : \"\",\n      ntransactionsamplecode: inputParam.testGetParam.masterData.MJSelectedSubSample ? inputParam.testGetParam.masterData.MJSelectedSubSample.map(subsample => subsample.ntransactionsamplecode).join(\",\") : \"\",\n      //    npreregno :inputParam.MJSelectedTest ? inputParam.MJSelectedTest.map(sample => sample.npreregno).join(\",\") : \"\",\n      //    ntransactionsamplecode : inputParam.MJSelectedTest ? inputParam.MJSelectedTest.map(subsample => subsample.ntransactionsamplecode).join(\",\") : \"\",\n      transactiontestcode: inputParam.MJSelectedTest ? inputParam.MJSelectedTest.map(test => test.ntransactiontestcode).join(\",\") : \"\",\n      ntransactiontestcode: 0,\n      ncontrolcode: inputParam.ncontrolcode,\n      nneedsubsample: inputParam.testGetParam.masterData.nneedsubsample,\n      ndesigntemplatemappingcode: inputParam.testGetParam.ndesigntemplatemappingcode,\n      checkBoxOperation: 3,\n      userinfo: inputParam.userInfo\n    };\n\n    if (inputData.transactiontestcode && inputData.transactiontestcode.length > 0) {\n      dispatch(initRequest(true));\n      rsapi.post(\"myjobs/CreateAcceptTest\", inputData).then(response => {\n        let responseData = { ...response.data\n        };\n        responseData = sortData(responseData);\n        let MJ_TEST = [];\n        MJ_TEST = responseData[\"MJ_TEST\"]; // let searchedTests = undefined;\n        // if (inputParam.testGetParam.masterData[\"searchedTests\"]) {\n        //     let searchtestcode =inputParam.testGetParam.masterData.searchedTests.map(a => a.ntransactiontestcode)\n        //     let responsetestcode =responseData.MJ_TEST.map(b=>b.ntransactiontestcode)\n        //     searchtestcode.forEach((value, i) => {\n        //         if(value === responsetestcode[i]) {\n        //             inputParam.testGetParam.masterData[\"searchedTests\"] =MJ_TEST;\n        //             //MJ_TEST = inputParam.testGetParam.masterData[\"searchedTests\"] ;\n        //         }else{\n        //             inputParam.testGetParam.masterData[\"searchedTests\"]=[]; \n        //         }\n        //     });\n        // }\n\n        let masterData = { ...inputParam.testGetParam.masterData,\n          ...response.data,\n          MJ_TEST // searchedTests\n\n        };\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: { ...responseData,\n            masterData,\n            loading: false,\n            operation: \"update\"\n          }\n        });\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(error.response.data);\n        }\n      });\n    } else {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          multilingualMsg: \"IDS_SELECTTEST\"\n        }\n      });\n    }\n  };\n}\nexport function validateEsignforApproval(inputParam) {\n  return dispatch => {\n    dispatch(initRequest(true));\n    return rsapi.post(\"login/validateEsignCredential\", inputParam.inputData).then(response => {\n      if (response.data === \"Success\") {\n        if (inputParam.operation === 'dynamic') {\n          const methodUrl = \"performaction\";\n          inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][\"userinfo\"] = inputParam.inputData.userinfo;\n\n          if (inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()] && inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignpassword\"]) {\n            delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignpassword\"];\n            delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esigncomments\"];\n            delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"agree\"];\n          }\n\n          dispatch(performAction(inputParam[\"screenData\"][\"inputParam\"], inputParam[\"screenData\"][\"masterData\"]));\n        } else if (inputParam.operation === 'reportgeneration') {\n          delete inputParam[\"screenData\"][\"inputParam\"]['reporparam'][\"esignpassword\"];\n          delete inputParam[\"screenData\"][\"inputParam\"]['reporparam'][\"esigncomments\"];\n          delete inputParam[\"screenData\"][\"inputParam\"]['reporparam'][\"agree\"];\n          inputParam[\"screenData\"][\"inputParam\"][\"reporparam\"][\"userinfo\"] = inputParam.inputData.userinfo;\n          dispatch(generateCOAReport(inputParam[\"screenData\"][\"inputParam\"]['reporparam']));\n        } else if (inputParam.operation === 'decision') {\n          delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"]['updatedecision'][\"esignpassword\"];\n          delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"]['updatedecision'][\"esigncomments\"];\n          delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"]['updatedecision'][\"agree\"];\n          inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][\"userinfo\"] = inputParam.inputData.userinfo;\n          dispatch(updateDecision(inputParam[\"screenData\"][\"inputParam\"]));\n        }\n      }\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function previewSampleReport(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    let ndecisionStatus = inputParam.sample.ndecisionstatus;\n\n    if (inputParam.sample.ndecisionstatus === undefined || inputParam.sample.ndecisionstatus === transactionStatus.DRAFT) {\n      ndecisionStatus = transactionStatus.PASS;\n    }\n\n    const inputData = {\n      ndecisionstatus: ndecisionStatus,\n      userinfo: inputParam.userinfo,\n      nprimarykey: inputParam.sample.npreregno,\n      ncoareporttypecode: reportCOAType.SAMPLECERTIFICATEPRIVIEW,\n      nreporttypecode: REPORTTYPE.SAMPLEREPORT,\n      sprimarykeyname: \"npreregno\",\n      ncontrolcode: inputParam.ncontrolCode,\n      nregtypecode: inputParam.sample.nregtypecode,\n      nregsubtypecode: inputParam.sample.nregsubtypecode,\n      npreregno: inputParam.sample.npreregno\n    };\n    rsapi.post(\"approval/previewSampleReport\", inputData).then(response => {\n      if (response.data.rtn === \"Success\") {\n        document.getElementById(\"download_data\").setAttribute(\"href\", response.data.filepath);\n        document.getElementById(\"download_data\").click();\n      } else {\n        toast.warn(response.data.rtn);\n      }\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false,\n          openChildModal: false,\n          loadEsign: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function generateCOAReport(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    const inputData = {\n      npreregno: inputParam.sample.npreregno,\n      nsectioncode: inputParam.nsectioncode || -1,\n      userinfo: inputParam.userinfo,\n      nprimarykey: inputParam.sample.npreregno,\n      ncoareporttypecode: reportCOAType.SAMPLEWISE,\n      nreporttypecode: REPORTTYPE.COAREPORT,\n      sprimarykeyname: \"npreregno\",\n      ncontrolcode: inputParam.ncontrolCode,\n      nregtypecode: inputParam.nregtypecode,\n      nregsubtypecode: inputParam.nregsubtypecode\n    };\n    rsapi.post(\"approval/generateCOAReport\", inputData).then(response => {\n      if (response.data.rtn === \"Success\") {\n        document.getElementById(\"download_data\").setAttribute(\"href\", response.data.filepath);\n        document.getElementById(\"download_data\").click();\n      } else {\n        toast.warn(response.data.rtn);\n      }\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false,\n          openChildModal: false,\n          selectedRecord: {},\n          loadEsign: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getEnforceCommentsHistory(selectedParam, masterData, userInfo) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"approval/getEnforceCommentsHistory\", {\n      ntransactionresultcode: selectedParam.ntransactionresultcode,\n      userinfo: userInfo\n    }).then(response => {\n      if (response.data.length > 0) {\n        masterData = { ...masterData,\n          enforceCommentsHistory: response.data\n        };\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false,\n            masterData,\n            openChildModal: true,\n            operation: \"view\",\n            screenName: \"IDS_ENFORCECOMMENTHISTORY\"\n          }\n        });\n      } else {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false,\n            multilingualMsg: \"IDS_NOPREVIOUSCOMMENTSFOUND\"\n          }\n        });\n      }\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function reportGenerate(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    const inputData = {\n      npreregno: inputParam.sample.npreregno,\n      userinfo: inputParam.userinfo,\n      reportName: \"RJ_Samplewise_Report_QRCode\",\n      reportFormat: \"pdf\"\n    };\n    rsapi.post(\"reportjasper/generateCOAReport\", inputData).then(response => {\n      if (response.data.rtn === \"Success\") {\n        if (response.data.filePath) {\n          // let user = response;\n          let elnURL = response.data.filePath;\n          window.open(elnURL, '_blank');\n        } else {\n          toast.info(intl.FormattedMessage({\n            id: \"IDS_ELNUIURLNOTAVAILABLE\"\n          }));\n        } // document.getElementById(\"download_data\").setAttribute(\"href\", response.data.filePath);\n        // document.getElementById(\"download_data\").click();\n\n      } else {\n        toast.warn(response.data.rtn);\n      }\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false,\n          openChildModal: false,\n          selectedRecord: {},\n          loadEsign: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}","map":{"version":3,"sources":["E:/WorkingFolder/React_Postgres/ALPD/branches/SOURCE-513-PROD/SOURCE-513-ALPD-5304/QuaLISWeb/src/actions/MyJobsAction.js"],"names":["rsapi","DEFAULT_RETURN","toast","initRequest","constructOptionList","fillRecordBasedOnCheckBoxSelection","getRecordBasedOnPrimaryKeyName","replaceUpdatedObject","sortData","getSameRecordFromTwoArrays","getSameRecordFromTwoDifferentArrays","filterRecordBasedOnPrimaryKeyName","postCRUDOrganiseTransSearch","REPORTTYPE","reportCOAType","transactionStatus","intl","getMyJobsubSampleDetail","inputData","isServiceRequired","dispatch","inputParamData","ntype","nsampletypecode","nregtypecode","nregsubtypecode","npreregno","ntransactionstatus","nsectioncode","ntestcode","napprovalversioncode","napprovalconfigcode","activeTestTab","activeSampleTab","userinfo","nneedsubsample","masterData","realRegSubTypeValue","ndesigntemplatemappingcode","checkBoxOperation","searchedSubSample","length","activeName","dataStateName","subSample","post","then","response","responseData","data","MJSelectedSample","oldSelectedTest","MJSelectedTest","MJ_TEST","skipInfo","searchTestRef","undefined","current","value","oldSelectedSubSample","MJSelectedSubSample","childTabsKey","removeElementFromArray","selectedPreregno","MJ_SUBSAMPLE","searchSubSampleRef","wholeSubSampleList","map","b","ntransactionsamplecode","forEach","subsample","index","includes","splice","ApprovalParameter","testskip","testtake","subSampleSkip","subSampleTake","bool","ResultUsedInstrument","ResultUsedTasks","RegistrationTestAttachment","ApprovalResultChangeHistory","RegistrationTestComment","ApprovalHistory","wholeTestList","ntransactiontestcode","test","keepOld","selectedTest","list","dbData","skip","sort","filter","samplePrintHistoryDataState","sampleHistoryDataState","type","payload","loading","showFilter","take","catch","error","status","message","warn","subsampletake","subsampleskip","TestSelected","subSampleSelected","isGrandChildGetRequired","toString","filterSelectedSubSample","x","join","getMyJobTestDetail","getMJTestChildTabDetail","null","selectedSampleCode","filterTestSameOldSelectedTest","selectedTransactioncode","url","selectedTestCode","screenName","getMJSampleChildTabDetail","selectedSample","performAction","inputParam","MJ_SAMPLE","updatedSample","updatedSubSample","updatedTest","respObject","openChildModal","operation","masterStatus","errorCode","loadEsign","showEsign","selectedRecord","postParamList","updateDecision","getRegType","realSampleTypeValue","getRegSubType","realRegTypeValue","getTestStatus","RegSubTypeValue","getAppConfigVersion","getSection","realUserSectionValue","getMyJobsSample","searchSampleRef","resultDataState","instrumentDataState","materialDataState","taskDataState","documentDataState","resultChangeDataState","testCommentDataState","historyDataState","getStatusCombo","ntransactionresultcode","primaryKeyValue","userInfo","GradeListMap","Grade","get","selectedParamId","ncontrolCode","senforcestatuscomment","parameterComment","getAcceptTest","testGetParam","fromdate","dfrom","todate","dto","sample","transactiontestcode","ncontrolcode","multilingualMsg","validateEsignforApproval","methodUrl","toLowerCase","generateCOAReport","previewSampleReport","ndecisionStatus","ndecisionstatus","DRAFT","PASS","nprimarykey","ncoareporttypecode","SAMPLECERTIFICATEPRIVIEW","nreporttypecode","SAMPLEREPORT","sprimarykeyname","rtn","document","getElementById","setAttribute","filepath","click","SAMPLEWISE","COAREPORT","getEnforceCommentsHistory","selectedParam","enforceCommentsHistory","reportGenerate","reportName","reportFormat","filePath","elnURL","window","open","info","FormattedMessage","id"],"mappings":"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","sourcesContent":["import rsapi from '../rsapi';\r\nimport { DEFAULT_RETURN } from './LoginTypes';\r\nimport { toast } from 'react-toastify';\r\nimport { initRequest } from './LoginAction';\r\nimport { constructOptionList, fillRecordBasedOnCheckBoxSelection, getRecordBasedOnPrimaryKeyName, replaceUpdatedObject, sortData, getSameRecordFromTwoArrays, getSameRecordFromTwoDifferentArrays, filterRecordBasedOnPrimaryKeyName } from '../components/CommonScript';\r\nimport { postCRUDOrganiseTransSearch } from './ServiceAction';\r\nimport { REPORTTYPE, reportCOAType, transactionStatus } from '../components/Enumeration';\r\nimport { intl } from '../components/App';\r\n\r\nexport function getMyJobsubSampleDetail(inputData, isServiceRequired) {\r\n    return function (dispatch) {\r\n        let inputParamData = {\r\n            ntype: 2,\r\n           // nflag: 2,\r\n            nsampletypecode: inputData.nsampletypecode,\r\n            nregtypecode: inputData.nregtypecode,\r\n            nregsubtypecode: inputData.nregsubtypecode,\r\n            npreregno: inputData.npreregno,\r\n            ntransactionstatus: inputData.ntransactionstatus,\r\n            nsectioncode: inputData.nsectioncode,\r\n            ntestcode: inputData.ntestcode,\r\n            napprovalversioncode: inputData.napprovalversioncode,\r\n            napprovalconfigcode: inputData.napprovalconfigcode,\r\n            activeTestTab: inputData.activeTestTab,\r\n            activeSampleTab: inputData.activeSampleTab,\r\n            userinfo: inputData.userinfo,\r\n            nneedsubsample: inputData.masterData.realRegSubTypeValue.nneedsubsample,\r\n            ndesigntemplatemappingcode : inputData.masterData.ndesigntemplatemappingcode,\r\n            checkBoxOperation: inputData.masterData.searchedSubSample ?  \r\n                inputData.masterData.searchedSubSample.length > 0 ? inputData.checkBoxOperation:3:inputData.checkBoxOperation\r\n        }\r\n        let activeName = \"\";\r\n        let dataStateName = \"\";\r\n        const subSample = inputData.nneedsubsample\r\n        dispatch(initRequest(true));\r\n        if (isServiceRequired) {\r\n            rsapi.post(\"myjobs/getMyJobsSubSampleDetails\", inputParamData)\r\n                .then(response => {\r\n                    let responseData = { ...response.data, MJSelectedSample: inputData.MJSelectedSample }\r\n                    responseData = sortData(responseData)\r\n                    let oldSelectedTest = inputData.masterData.MJSelectedTest ? inputData.masterData.MJSelectedTest : []\r\n                    inputData.masterData.MJSelectedTest = responseData.MJSelectedTest ? responseData.MJSelectedTest : inputData.masterData.MJ_TEST.length > 0 ? [inputData.masterData.MJ_TEST[0]] : []\r\n                    let skipInfo = {}\r\n                    let masterData = {}\r\n                    \r\n                    if (inputData.searchTestRef !== undefined && inputData.searchTestRef.current !== null) {\r\n                        inputData.searchTestRef.current.value = \"\"\r\n                        masterData['searchedTests'] = undefined\r\n                    }\r\n                    if (subSample) {\r\n                        let oldSelectedSubSample = inputData.masterData.MJSelectedSubSample\r\n                        fillRecordBasedOnCheckBoxSelection(inputData.masterData, response.data, inputData.childTabsKey, inputData.checkBoxOperation, \"npreregno\", inputData.removeElementFromArray);\r\n                        masterData = {\r\n                            ...inputData.masterData,\r\n                            MJSelectedSample: inputData.MJSelectedSample,\r\n                            selectedPreregno: inputData.npreregno,\r\n                            MJSelectedSubSample: inputData.masterData.MJ_SUBSAMPLE.length > 0 ?\r\n                                [inputData.masterData.MJ_SUBSAMPLE[0]] : [],\r\n                        }\r\n                        if (inputData.searchSubSampleRef !== undefined && inputData.searchSubSampleRef.current !== null) {\r\n                            inputData.searchSubSampleRef.current.value = \"\";\r\n                            masterData['searchedSubSample'] = undefined\r\n                        }\r\n                        if (inputData.checkBoxOperation === 1 || inputData.checkBoxOperation === 7 || inputData.checkBoxOperation === 5) {\r\n\r\n                            const wholeSubSampleList = masterData.MJ_SUBSAMPLE.map(b => b.ntransactionsamplecode)\r\n                            oldSelectedSubSample.forEach((subsample, index) => {\r\n                                if (!wholeSubSampleList.includes(subsample.ntransactionsamplecode)) {\r\n                                    oldSelectedSubSample.splice(index, 1)\r\n                                }\r\n\r\n                            })\r\n                            if (oldSelectedSubSample.length > 0) {\r\n                                masterData = {\r\n                                    ...masterData,\r\n                                    MJSelectedSubSample: oldSelectedSubSample\r\n                                }\r\n                            }\r\n                            const MJSelectedTest = oldSelectedTest.length >0 ? getSameRecordFromTwoArrays(oldSelectedTest,\r\n                                masterData.MJSelectedSubSample, 'npreregno') : responseData.MJSelectedTest\r\n                            masterData = {\r\n                                ...masterData,\r\n                                MJSelectedTest,\r\n                                ApprovalParameter:responseData.ApprovalParameter ? responseData.ApprovalParameter.length > 0  ? responseData.ApprovalParameter : masterData.ApprovalParameter: masterData.ApprovalParameter\r\n                            }\r\n                        }\r\n                        if (inputData.checkBoxOperation === 3) {\r\n                            masterData = {\r\n                                ...masterData,\r\n                                MJSelectedTest: masterData.MJ_TEST.length > 0 ? [masterData.MJ_TEST[0]] : [],\r\n                                ApprovalParameter:responseData.ApprovalParameter ? responseData.ApprovalParameter.length > 0  ? responseData.ApprovalParameter :masterData.ApprovalParameter : masterData.ApprovalParameter\r\n                            }\r\n                        }\r\n\r\n\r\n                        let { testskip, testtake, subSampleSkip, subSampleTake } = inputData\r\n                        let bool = false;\r\n\r\n                        if (inputData.masterData.MJ_SUBSAMPLE.length < inputData.subSampleSkip) {\r\n                            testskip = 0;\r\n                            subSampleSkip = 0;\r\n                            bool = true\r\n                        }\r\n                        if (bool) {\r\n                            skipInfo = { testskip, testtake, subSampleSkip, subSampleTake }\r\n                        }\r\n                    }\r\n                    else {\r\n                        fillRecordBasedOnCheckBoxSelection(inputData.masterData, responseData, inputData.childTabsKey, inputData.checkBoxOperation, \"npreregno\", inputData.removeElementFromArray);\r\n\r\n                        let masterData = {\r\n                            ...inputData.masterData,\r\n                            MJSelectedSample: inputData.MJSelectedSample,\r\n                            MJSelectedSubSample: inputData.masterData.MJSelectedSubSample,\r\n                            MJSelectedTest: inputData.masterData.MJSelectedTest || [],\r\n                            selectedPreregno: inputData.npreregno,\r\n                        }\r\n                        if (inputData.searchSubSampleRef !== undefined && inputData.searchSubSampleRef.current !== null) {\r\n                            inputData.searchSubSampleRef.current.value = \"\";\r\n                            masterData['searchedSubSample'] = undefined\r\n                        }\r\n                        if (inputData.searchTestRef !== undefined && inputData.searchTestRef.current !== null) {\r\n                            inputData.searchTestRef.current.value = \"\"\r\n                            masterData['searchedTests'] = undefined\r\n                        }\r\n                        let { testskip, testtake } = inputData\r\n                        let bool = false;\r\n                        if (inputData.masterData.MJ_TEST.length <= inputData.testskip) {\r\n                            testskip = 0;\r\n                            bool = true\r\n                        }\r\n\r\n                        if (bool) {\r\n                            skipInfo = { testskip, testtake }\r\n                        }\r\n\r\n                        let ApprovalParameter = [];\r\n                        let ResultUsedInstrument = [];\r\n                        let ResultUsedTasks = [];\r\n                        let RegistrationTestAttachment = [];\r\n                        let ApprovalResultChangeHistory = [];\r\n                        let RegistrationTestComment = [];\r\n                        let ApprovalHistory = [];\r\n\r\n                        if (inputData.checkBoxOperation === 1) {\r\n\r\n                            let wholeTestList = masterData.MJ_TEST.map(b => b.ntransactiontestcode)\r\n                            oldSelectedTest.map((test, index) => {\r\n                                if (!wholeTestList.includes(test.ntransactiontestcode)) {\r\n                                    oldSelectedTest.splice(index, 1)\r\n                                }\r\n                                return null;\r\n                            })\r\n                            let keepOld = false;\r\n                            let ntransactiontestcode;\r\n                            if (oldSelectedTest.length > 0) {\r\n                                keepOld = true\r\n                                masterData = {\r\n                                    ...masterData,\r\n                                    selectedTest: oldSelectedTest\r\n                                }\r\n                            } else {\r\n                                ntransactiontestcode = masterData.selectedTest[0].ntransactiontestcode\r\n                            }\r\n                            switch (inputData.activeTestTab) {\r\n                                  \r\n                                case \"IDS_TESTATTACHMENTS\":\r\n                                    RegistrationTestAttachment = keepOld ? inputData.masterData.RegistrationTestAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                    activeName = \"RegistrationTestAttachment\"\r\n                                    break;\r\n                              \r\n                                case \"IDS_TESTCOMMENTS\":\r\n                                    RegistrationTestComment = keepOld ? inputData.masterData.RegistrationTestComment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                    activeName = \"RegistrationTestComment\"\r\n                                    dataStateName = \"testCommentDataState\"\r\n                                    break;\r\n                                \r\n                                default:\r\n                                    RegistrationTestAttachment = keepOld ? inputData.masterData.RegistrationTestAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                    activeName = \"RegistrationTestAttachment\"\r\n                                    break;\r\n                            }\r\n                        } else if (inputData.checkBoxOperation === 5) {\r\n                            masterData = {\r\n                                ...masterData,\r\n                                selectedTest: inputData.masterData.MJ_TEST.length > 0 ? [inputData.masterData.MJ_TEST[0]] : []\r\n                            }\r\n                           // let ntransactiontestcode = inputData.masterData.MJ_TEST.length > 0 ? inputData.masterData.MJ_TEST[0].ntransactiontestcode : 0;\r\n                            let list = [];\r\n                            let dbData = []\r\n                            switch (inputData.activeTestTab) {\r\n                               \r\n                                case \"IDS_TESTATTACHMENTS\":\r\n                                    dbData = response.data.RegistrationTestAttachment || []\r\n                                    list = [...inputData.masterData.RegistrationTestAttachment, ...dbData]\r\n                                    RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.MJ_TEST.length > 0 ? inputData.masterData.MJ_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                    break;\r\n                               \r\n                                case \"IDS_TESTCOMMENTS\":\r\n                                    dbData = response.data.RegistrationTestComment || []\r\n                                    list = [...inputData.masterData.RegistrationTestComment, ...dbData]\r\n                                    RegistrationTestComment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.MJ_TEST.length > 0 ? inputData.masterData.MJ_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                    break;\r\n                               \r\n                                default:\r\n                                    dbData = response.data.RegistrationTestAttachment || []\r\n                                    list = [...inputData.masterData.RegistrationTestAttachment, ...dbData]\r\n                                    RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.MJ_TEST.length > 0 ? inputData.masterData.MJ_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                    break;\r\n                            }\r\n                        } else {\r\n                            masterData = {\r\n                                ...masterData,\r\n                                selectedTest: inputData.masterData.MJ_TEST.length > 0 ? [inputData.masterData.MJ_TEST[0]] : []\r\n                            }\r\n                           // let ntransactiontestcode = inputData.masterData.MJ_TEST.length > 0 ? inputData.masterData.MJ_TEST[0].ntransactiontestcode : 0\r\n                            let list = [];\r\n                            switch (inputData.activeTestTab) {\r\n                               \r\n                               \r\n                                case \"IDS_TESTATTACHMENTS\":\r\n                                    list = response.data.RegistrationTestAttachment || []\r\n                                    RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.MJ_TEST.length > 0 ? inputData.masterData.MJ_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                    activeName = \"RegistrationTestAttachment\"\r\n                                    break;\r\n                                \r\n                                case \"IDS_TESTCOMMENTS\":\r\n                                    list = response.data.RegistrationTestComment || []\r\n                                    RegistrationTestComment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.MJ_TEST.length > 0 ? inputData.masterData.MJ_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                    activeName = \"RegistrationTestComment\"\r\n                                    dataStateName = \"testCommentDataState\"\r\n                                    break;\r\n                              \r\n                                default:\r\n                                    list = [...inputData.masterData.RegistrationTestAttachment, ...response.data.RegistrationTestAttachment]\r\n                                    RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.MJ_TEST.length > 0 ? inputData.masterData.MJ_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                    activeName = \"RegistrationTestComment\"\r\n                                    break;\r\n                            }\r\n                        }\r\n\r\n                        masterData = {\r\n                            ...masterData,\r\n                            ApprovalParameter,\r\n                            ResultUsedInstrument,\r\n                            ResultUsedTasks,\r\n                            RegistrationTestAttachment,\r\n                            ApprovalResultChangeHistory,\r\n                            RegistrationTestComment,\r\n                            ApprovalHistory\r\n                        }\r\n                    }\r\n                    if (inputData[dataStateName] && masterData[activeName].length <= inputData[dataStateName].skip) {\r\n\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            [dataStateName]: {\r\n                                ...inputData[dataStateName],\r\n                                skip: 0,\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    } else {\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            [dataStateName]: {\r\n                                ...inputData[dataStateName],\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    }\r\n                    skipInfo = {\r\n                        ...skipInfo,\r\n                        samplePrintHistoryDataState: {\r\n                            ...inputData[dataStateName],\r\n                            sort: undefined,\r\n                            filter: undefined\r\n                        },\r\n                        sampleHistoryDataState: {\r\n                            ...inputData[dataStateName],\r\n                            sort: undefined,\r\n                            filter: undefined\r\n                        }\r\n                    }\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN, payload: {\r\n                            masterData,\r\n                            loading: false,\r\n                            showFilter: false,\r\n                            activeTestTab: inputData.activeTestTab,\r\n                            activeSampleTab: inputData.activeSampleTab,\r\n                            skip: undefined,\r\n                            take: undefined,\r\n                            ...skipInfo\r\n                        }\r\n                    })\r\n                })\r\n                .catch(error => {\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    }\r\n                    else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                })\r\n        } else {\r\n            let skipInfo = {};\r\n            let bool = false;\r\n            let { testskip, testtake, subsampletake, subsampleskip } = inputData;\r\n            let oldSelectedTest = inputData.masterData.MJSelectedTest\r\n            let oldSelectedSubSample = inputData.masterData.MJSelectedSubSample\r\n            let TestSelected = [];\r\n            let subSampleSelected = [];\r\n            if(inputData[\"statusNone\"])\r\n            {\r\n             TestSelected = getRecordBasedOnPrimaryKeyName(inputData.masterData.MJSelectedTest, inputData.removeElementFromArray[0].npreregno, \"npreregno\");\r\n             subSampleSelected = getRecordBasedOnPrimaryKeyName(inputData.masterData.MJSelectedSubSample, inputData.removeElementFromArray[0].npreregno, \"npreregno\");\r\n            }\r\n            else\r\n            {\r\n                TestSelected = filterRecordBasedOnPrimaryKeyName(inputData.masterData.MJSelectedTest, inputData.removeElementFromArray[0].npreregno, \"npreregno\");\r\n                subSampleSelected = filterRecordBasedOnPrimaryKeyName(inputData.masterData.MJSelectedSubSample, inputData.removeElementFromArray[0].npreregno, \"npreregno\");\r\n            }\r\n          \r\n            let isGrandChildGetRequired = false;\r\n            let ApprovalParameter = [];\r\n            let ResultUsedInstrument = [];\r\n            let ResultUsedTasks = [];\r\n            let RegistrationTestAttachment = [];\r\n            let ApprovalResultChangeHistory = [];\r\n            let RegistrationTestComment = [];\r\n            let ApprovalHistory = [];\r\n\r\n            // if(subSample)\r\n            // {\r\n            //     if (TestSelected.length > 0) {\r\n            //         isGrandChildGetRequired = false;\r\n            //     } else {\r\n                   \r\n                    // if( TestSelected.length == 0 && subSampleSelected.length == 0)\r\n                    // {\r\n                    //     isGrandChildGetRequired = true;\r\n                    // }\r\n                    // else if(TestSelected.length == 0){\r\n                    //     isGrandChildGetRequired = true;\r\n                    // }\r\n            //         else\r\n            //         {\r\n            //             isGrandChildGetRequired = false;\r\n            //         }\r\n            //          isGrandChildGetRequired = true;\r\n                   \r\n            //     }\r\n            // }\r\n            // else\r\n            // {\r\n                if (TestSelected.length > 0) {\r\n                    isGrandChildGetRequired = false;\r\n                } else {\r\n                    isGrandChildGetRequired = true;\r\n                }\r\n           // }\r\n\r\n            fillRecordBasedOnCheckBoxSelection(inputData.masterData, inputData.MJSelectedSample, inputData.childTabsKey, inputData.checkBoxOperation, \"npreregno\", inputData.removeElementFromArray);\r\n        \r\n            if (isGrandChildGetRequired) {\r\n                let ntransactiontestcode = inputData.masterData.MJ_TEST.length > 0 ? inputData.masterData.MJ_TEST[0].ntransactiontestcode.toString() : \"\";\r\n                let MJSelectedSample = inputData.MJSelectedSample;\r\n                let selectedPreregno = inputData.npreregno;\r\n                let MJSelectedTest = inputData.masterData.MJ_TEST.length > 0 ? [inputData.masterData.MJ_TEST[0]] : [];\r\n                let MJSelectedSubSample = inputData.masterData.MJ_SUBSAMPLE\r\n\r\n                if (subSample) {\r\n                    let filterSelectedSubSample = getSameRecordFromTwoArrays(oldSelectedSubSample, inputData.masterData.MJ_SUBSAMPLE, \"ntransactionsamplecode\");\r\n                    MJSelectedSubSample = filterSelectedSubSample.length > 0 ? filterSelectedSubSample : [inputData.masterData.MJ_SUBSAMPLE[0]];\r\n                    if (inputData.masterData.MJ_SUBSAMPLE.length <= inputData.subsampleskip) {\r\n                        subsampleskip = 0;\r\n                        skipInfo = { subsampletake, subsampleskip }\r\n                    }\r\n\r\n                }\r\n                let masterData = { ...inputData.masterData, MJSelectedSample, MJSelectedSubSample, MJSelectedTest }\r\n                if (inputData.masterData.MJ_TEST.length <= inputData.testskip) {\r\n                    testskip = 0;\r\n                    bool = true\r\n                }\r\n                if (bool) {\r\n                    skipInfo = { ...skipInfo, testskip, testtake }\r\n                }\r\n                inputData = {\r\n                    ...inputData, childTabsKey: [\"ApprovalParameter\", \"ApprovalResultChangeHistory\", \"ResultUsedInstrument\",\r\n                        \"ResultUsedTasks\", \"RegistrationTestAttachment\", \"RegistrationTestComment\"], ntransactiontestcode, MJSelectedSample, selectedPreregno, MJSelectedTest,\r\n                        MJSelectedSubSample, checkBoxOperation: 3,masterData,...skipInfo\r\n                }\r\n\r\n                if (subSample) {\r\n                    if (MJSelectedTest.length === 0) {\r\n                        inputData[\"npreregno\"] = MJSelectedSubSample.map(x => x.npreregno).join(\",\")\r\n                        inputData[\"ntransactionsamplecode\"] = MJSelectedSubSample.map(x => x.ntransactionsamplecode).join(\",\")\r\n                        inputData[\"checkBoxOperation\"] = 3\r\n                        inputData[\"childTabsKey\"] = [\"MJ_TEST\"]\r\n                        dispatch(getMyJobTestDetail(inputData, true));\r\n                    } else {\r\n                        dispatch(getMJTestChildTabDetail(inputData, true));\r\n                    }\r\n                } else {\r\n                    dispatch(getMJTestChildTabDetail(inputData, true));\r\n                }\r\n\r\n                // dispatch(getMJTestChildTabDetail(inputData, true));\r\n            } else {\r\n                //added by sudharshanan for test select issue while sample click\r\n                let masterData = {\r\n                    ...inputData.masterData,\r\n                    MJSelectedTest: TestSelected ? TestSelected :inputData.masterData.MJ_TEST.length > 0 ? [inputData.masterData.MJ_TEST[0]] : [],\r\n                    MJSelectedSample: inputData.MJSelectedSample,\r\n                    MJSelectedSubSample: subSampleSelected ? subSampleSelected : inputData.masterData.MJ_SUBSAMPLE.length>0 ? [inputData.masterData.MJ_SUBSAMPLE[0]]:[]\r\n                }\r\n                let wholeTestList = masterData.MJ_TEST.map(b => b.ntransactiontestcode)\r\n                oldSelectedTest.map((test, index) => {\r\n                    if (!wholeTestList.includes(test.ntransactiontestcode)) {\r\n                        oldSelectedTest.splice(index, 1)\r\n                    }\r\n                    return null;\r\n                });\r\n\r\n                if(subSample)\r\n                {\r\n                    if (inputData.masterData.MJ_SUBSAMPLE.length <= inputData.subsampleskip) {\r\n                        subsampleskip = 0;\r\n                        skipInfo = { subsampletake, subsampleskip }\r\n                    }\r\n    \r\n                }\r\n                let keepOld = false;\r\n                let ntransactiontestcode;\r\n                if (inputData.masterData.MJ_TEST.length <= inputData.testskip) {\r\n                    testskip = 0;\r\n                    bool = true\r\n                }\r\n                if (bool) {\r\n                    skipInfo = { ...skipInfo, testskip, testtake }\r\n                }\r\n                if (oldSelectedTest.length > 0) {\r\n                    keepOld = true\r\n                    masterData = {\r\n                        ...masterData,\r\n                        selectedTest: oldSelectedTest\r\n                    }\r\n                } else {\r\n                    ntransactiontestcode = inputData.masterData.MJ_TEST.length > 0 ? inputData.masterData.MJ_TEST[0].ntransactiontestcode : \"-1\";\r\n                }\r\n                switch (inputData.activeTestTab) {\r\n                    \r\n                    case \"IDS_TESTATTACHMENTS\":\r\n                        RegistrationTestAttachment = keepOld ? inputData.masterData.RegistrationTestAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment, ntransactiontestcode, \"ntransactiontestcode\")\r\n                        break;\r\n                   \r\n                    case \"IDS_TESTCOMMENTS\":\r\n                        RegistrationTestComment = keepOld ? inputData.masterData.RegistrationTestComment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment, ntransactiontestcode, \"ntransactiontestcode\")\r\n                        break;\r\n                  \r\n                    default:\r\n                        RegistrationTestAttachment = keepOld ? inputData.masterData.RegistrationTestAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment, ntransactiontestcode, \"ntransactiontestcode\")\r\n                        break;\r\n                }\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData: {\r\n                            ...masterData,\r\n                            // wholeApprovalParameter,\r\n                            ApprovalParameter,\r\n                            // wholeResultUsedInstrument,\r\n                            ResultUsedInstrument,\r\n                            // wholeResultUsedTasks,\r\n                            ResultUsedTasks,\r\n                            // wholeRegistrationTestAttachment,\r\n                            RegistrationTestAttachment,\r\n                            // wholeApprovalResultChangeHistory,\r\n                            ApprovalResultChangeHistory,\r\n                            // wholeRegistrationTestComments,\r\n                            RegistrationTestComment,\r\n                            ApprovalHistory,\r\n                            ...skipInfo,\r\n                        },\r\n                        ...skipInfo,\r\n                        loading: false,\r\n                        showFilter: false,\r\n                        activeSampleTab: inputData.activeSampleTab,\r\n                        activeTestTab: inputData.activeTestTab\r\n                    }\r\n                })\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport function getMyJobTestDetail(inputData, isServiceRequired) {\r\n    return function (dispatch) {\r\n        let inputParamData = {\r\n            ntype: 2,\r\n           // nflag: 3,\r\n            nsampletypecode: inputData.nsampletypecode,\r\n            nregtypecode: inputData.nregtypecode,\r\n            nregsubtypecode: inputData.nregsubtypecode,\r\n            npreregno: inputData.npreregno,\r\n           // ntranscode: inputData.ntransactionstatus,\r\n            napprovalversioncode: inputData.napprovalversioncode,\r\n            napprovalconfigcode: inputData.napprovalconfigcode,\r\n            ntransactionsamplecode: inputData.ntransactionsamplecode,\r\n            ntransactiontestcode :0,\r\n            nsectioncode: inputData.nsectioncode,\r\n            ntestcode: inputData.ntestcode,\r\n            activeTestTab: inputData.activeTestTab,\r\n            activeSampleTab: inputData.activeSampleTab,\r\n            userinfo: inputData.userinfo,\r\n            ntransactionstatus:inputData.ntransactionstatus,\r\n            ndesigntemplatemappingcode : inputData.masterData.ndesigntemplatemappingcode,\r\n            checkBoxOperation: inputData.checkBoxOperation\r\n        }\r\n        let activeName = \"\";\r\n        let dataStateName = \"\";\r\n        //let masterData = {};\r\n       // let subSample = inputData.nneedsubsample;\r\n        dispatch(initRequest(true));\r\n        if (isServiceRequired) {\r\n            rsapi.post(\"myjobs/getMyJobsTestDetails\", inputParamData)\r\n                .then(response => {\r\n                    let responseData = { ...response.data }\r\n                    responseData = sortData(responseData,'descending', 'npreregno')\r\n                    inputData.searchTestRef.current.null = \"\"\r\n\r\n                    let oldSelectedTest = inputData.masterData.MJSelectedTest\r\n                    inputData.masterData.MJSelectedTest = oldSelectedTest.length > 0 ? oldSelectedTest : responseData.MJSelectedTest ? responseData.MJSelectedTest : inputData.masterData.MJ_TEST.length > 0 ? [inputData.masterData.MJ_TEST[0]] : []\r\n\r\n                    fillRecordBasedOnCheckBoxSelection(inputData.masterData, responseData, inputData.childTabsKey, inputData.checkBoxOperation, \"npreregno\", inputData.removeElementFromArray);\r\n                    let masterData = {\r\n                        ...inputData.masterData,\r\n                        MJSelectedTest: inputData.masterData.MJSelectedTest,\r\n                        MJSelectedSubSample: inputData.MJSelectedSubSample,\r\n                        selectedPreregno: inputData.npreregno,\r\n                    }\r\n\r\n                    if (inputData.searchSubSampleRef !== undefined && inputData.searchSubSampleRef.current !== null) {\r\n                        inputData.searchSubSampleRef.current.value = \"\";\r\n                        masterData['searchedSubSample'] = undefined\r\n                    }\r\n                    if (inputData.searchTestRef !== undefined && inputData.searchTestRef.current !== null) {\r\n                        inputData.searchTestRef.current.value = \"\"\r\n                        masterData['searchedTests'] = undefined\r\n                    }\r\n\r\n                    let { testskip, testtake } = inputData\r\n                    let bool = false;\r\n                    if (inputData.masterData.MJ_TEST.length <= inputData.testskip) {\r\n                        testskip = 0;\r\n                        bool = true\r\n                    }\r\n                    let skipInfo = {}\r\n                    if (bool) {\r\n                        skipInfo = { testskip, testtake }\r\n                    }\r\n\r\n                    let ApprovalParameter = [];\r\n                    let ResultUsedInstrument = [];\r\n                    let ResultUsedTasks = [];\r\n                    let RegistrationTestAttachment = [];\r\n                    let ApprovalResultChangeHistory = [];\r\n                    let RegistrationTestComment = [];\r\n                    let ApprovalHistory = [];\r\n\r\n\r\n                    if (inputData.checkBoxOperation === 1) {\r\n                        let wholeTestList = masterData.MJ_TEST.map(b => b.ntransactiontestcode)\r\n                        oldSelectedTest.map((test, index) => {\r\n                            if (!wholeTestList.includes(test.ntransactiontestcode)) {\r\n                                oldSelectedTest.splice(index, 1)\r\n                            }\r\n                            return null;\r\n                        })\r\n                        let keepOld = false;\r\n                        let ntransactiontestcode;\r\n                        // if (oldSelectedTest.length > 0) {\r\n                        //     keepOld = true\r\n                        //     masterData = {\r\n                        //         ...masterData,\r\n                        //         selectedTest: oldSelectedTest\r\n                        //     }\r\n                        // } else {\r\n                        ntransactiontestcode = masterData.MJSelectedTest[0].ntransactiontestcode\r\n                        // }\r\n                        switch (inputData.activeTestTab) {\r\n                            \r\n                            case \"IDS_TESTATTACHMENTS\":\r\n                                RegistrationTestAttachment = keepOld ? inputData.masterData.RegistrationTestAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestAttachment\"\r\n                                break;\r\n                           \r\n                            case \"IDS_TESTCOMMENTS\":\r\n                                RegistrationTestComment = keepOld ? inputData.masterData.RegistrationTestComment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestComment\"\r\n                                dataStateName = \"testCommentDataState\"\r\n                                break;\r\n                            \r\n                            default:\r\n                                RegistrationTestAttachment = keepOld ? inputData.masterData.RegistrationTestAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestAttachment\"\r\n                                break;\r\n                        }\r\n                    } else if (inputData.checkBoxOperation === 5) {\r\n                        masterData = {\r\n                            ...masterData,\r\n                            MJSelectedTest: inputData.masterData.MJ_TEST.length > 0 ? [inputData.masterData.MJ_TEST[0]] : []\r\n                        }\r\n                        //let ntransactiontestcode = inputData.masterData.MJ_TEST.length > 0 ? inputData.masterData.MJ_TEST[0].ntransactiontestcode : 0;\r\n                        let list = [];\r\n                        let dbData = []\r\n                        switch (inputData.activeTestTab) {\r\n                          \r\n                            case \"IDS_TESTATTACHMENTS\":\r\n                                dbData = response.data.RegistrationTestAttachment || []\r\n                                list = [...inputData.masterData.RegistrationTestAttachment, ...dbData]\r\n                                RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.MJ_TEST.length > 0 ? inputData.masterData.MJ_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                           \r\n                            case \"IDS_TESTCOMMENTS\":\r\n                                dbData = response.data.RegistrationTestComment || []\r\n                                list = [...inputData.masterData.RegistrationTestComment, ...dbData]\r\n                                RegistrationTestComment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.MJ_TEST.length > 0 ? inputData.masterData.MJ_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                            \r\n                            default:\r\n                                dbData = response.data.RegistrationTestAttachment || []\r\n                                list = [...inputData.masterData.RegistrationTestAttachment, ...dbData]\r\n                                RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.MJ_TEST.length > 0 ? inputData.masterData.MJ_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                        }\r\n                    } else if (inputData.checkBoxOperation === 7) {\r\n                       // let wholeTestList = masterData.MJ_TEST.map(b => b.ntransactiontestcode)\r\n                        //let wholeTestListForSelectAll = masterData.MJ_TEST\r\n                       // let wholeTestListForSelectSingleSelect =\r\n                            // oldSelectedTest.forEach((test, index) => {\r\n                            //     if (!wholeTestList.includes(test.ntransactiontestcode)) {\r\n                            //         oldSelectedTest.splice(index, 1)\r\n                            //     }\r\n\r\n                            // })\r\n\r\n                        let keepOld = false;\r\n                        let ntransactiontestcode;\r\n                        if (oldSelectedTest.length > 0) {\r\n                            keepOld = true\r\n                            masterData = {\r\n                                ...masterData,\r\n                                MJSelectedTest: oldSelectedTest\r\n                                //oldSelectedTest\r\n                            }\r\n                        } else {\r\n                            ntransactiontestcode = inputData.masterData.MJ_TEST.length > 0 ? inputData.masterData.MJ_TEST[0].ntransactiontestcode : \"\"\r\n                        }\r\n                        switch (inputData.activeTestTab) {\r\n                           \r\n                           \r\n                            \r\n                            case \"IDS_TESTATTACHMENTS\":\r\n                                RegistrationTestAttachment = keepOld ? inputData.masterData.RegistrationTestAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestAttachment\"\r\n                                break;\r\n                            \r\n                            case \"IDS_TESTCOMMENTS\":\r\n                                RegistrationTestComment = keepOld ? inputData.masterData.RegistrationTestComment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestComment\"\r\n                                dataStateName = \"testCommentDataState\"\r\n                                break;\r\n                            \r\n                            default:\r\n                                RegistrationTestAttachment = keepOld ? inputData.masterData.RegistrationTestAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestAttachment\"\r\n                                break;\r\n                        }\r\n\r\n                    } else {\r\n                        masterData = {\r\n                            ...masterData,\r\n                            MJSelectedTest: inputData.masterData.MJ_TEST.length > 0 ? [inputData.masterData.MJ_TEST[0]] : []\r\n                        }\r\n                       // let ntransactiontestcode = response.data.MJSelectedTest ? response.data.MJSelectedTest.length > 0 ? \r\n                          //      response.data.MJSelectedTest[0].ntransactiontestcode : inputData.masterData.MJ_TEST ? inputData.masterData.MJ_TEST.length > 0 ?  inputData.masterData.MJ_TEST[0].ntransactiontestcode :-1:-1:-1\r\n                                \r\n                                //inputData.masterData.MJ_TEST ? inputData.masterData.MJ_TEST.length > 0 ? inputData.masterData.MJ_TEST[0].ntransactiontestcode: -1 : -1\r\n                        let list = [];\r\n                        switch (inputData.activeTestTab) {\r\n                           \r\n                            case \"IDS_TESTATTACHMENTS\":\r\n                                list = response.data.RegistrationTestAttachment || []\r\n                                RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.MJ_TEST.length > 0 ? inputData.masterData.MJ_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestAttachment\"\r\n                                break;\r\n                            \r\n                            case \"IDS_TESTCOMMENTS\":\r\n                                list = response.data.RegistrationTestComment || []\r\n                                RegistrationTestComment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.MJ_TEST.length > 0 ? inputData.masterData.MJ_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestComment\"\r\n                                dataStateName = \"testCommentDataState\"\r\n                                break;\r\n                           \r\n                            default:\r\n                                list = [...inputData.masterData.RegistrationTestAttachment, ...response.data.RegistrationTestAttachment]\r\n                                RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.MJ_TEST.length > 0 ? inputData.masterData.MJ_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestAttachment\"\r\n                                break;\r\n                        }\r\n                    }\r\n\r\n                    masterData = {\r\n                        ...masterData,\r\n                        ApprovalParameter,\r\n                        ResultUsedInstrument,\r\n                        ResultUsedTasks,\r\n                        RegistrationTestAttachment,\r\n                        ApprovalResultChangeHistory,\r\n                        RegistrationTestComment,\r\n                        ApprovalHistory\r\n                    }\r\n                    if (inputData[dataStateName] && masterData[activeName].length <= inputData[dataStateName].skip) {\r\n\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            [dataStateName]: {\r\n                                ...inputData[dataStateName],\r\n                                skip: 0,\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    } else {\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            [dataStateName]: {\r\n                                ...inputData[dataStateName],\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    }\r\n                    skipInfo = {\r\n                        ...skipInfo,\r\n                        samplePrintHistoryDataState: {\r\n                            ...inputData[dataStateName],\r\n                            sort: undefined,\r\n                            filter: undefined\r\n                        },\r\n                        sampleHistoryDataState: {\r\n                            ...inputData[dataStateName],\r\n                            sort: undefined,\r\n                            filter: undefined\r\n                        }\r\n                    }\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN, payload: {\r\n                            masterData: {\r\n                                ...masterData,\r\n                                MJSelectedSubSample: inputData.MJSelectedSubSample,\r\n                                selectedPreregno: inputData.npreregno,\r\n                                selectedSampleCode: inputData.ntransactionsamplecode,\r\n                                activeTestTab: inputData.activeTestTab,\r\n                                activeSampleTab: inputData.activeSampleTab,\r\n                                skip: undefined,\r\n                                take: undefined,\r\n                                ...skipInfo\r\n                            },\r\n                            ...skipInfo,\r\n                            loading: false,\r\n                            showFilter: false,\r\n                            activeTestTab: inputData.activeTestTab\r\n                        }\r\n                    })\r\n                })\r\n                .catch(error => {\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    }\r\n                    else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                })\r\n        }\r\n        else {\r\n            let bool = false;\r\n            let skipInfo = {};\r\n            let { testskip, testtake } = inputData;\r\n            let oldSelectedTest = inputData.masterData.MJSelectedTest\r\n            let TestSelected = \r\n          inputData[\"statusNone\"] ?\r\n            getRecordBasedOnPrimaryKeyName(inputData.masterData.MJSelectedTest, inputData.removeElementFromArray[0].ntransactionsamplecode, \"ntransactionsamplecode\"):\r\n            filterRecordBasedOnPrimaryKeyName(inputData.masterData.MJSelectedTest, inputData.removeElementFromArray[0].ntransactionsamplecode, \"ntransactionsamplecode\");\r\n            let isGrandChildGetRequired = false;\r\n            if (TestSelected.length > 0) {\r\n                isGrandChildGetRequired = false;\r\n            } else {\r\n                isGrandChildGetRequired = true;\r\n            }\r\n\r\n            let ApprovalParameter = [];\r\n            let ResultUsedInstrument = [];\r\n            let ResultUsedTasks = [];\r\n            let RegistrationTestAttachment = [];\r\n            let ApprovalResultChangeHistory = [];\r\n            let RegistrationTestComment = [];\r\n\r\n            let ApprovalHistory = [];\r\n            fillRecordBasedOnCheckBoxSelection(inputData.masterData, inputData.MJSelectedSubSample, inputData.childTabsKey, inputData.checkBoxOperation, \"ntransactionsamplecode\", inputData.removeElementFromArray);\r\n            if (isGrandChildGetRequired) {\r\n                //let ntransactiontestcode = inputData.masterData.MJ_TEST.length > 0 ? inputData.masterData.MJ_TEST[0].ntransactiontestcode.toString() : \"\";\r\n                let MJSelectedSample = inputData.masterData.MJSelectedSample;\r\n                let selectedPreregno = inputData.npreregno;\r\n                //let selectedTest = inputData.masterData.MJ_TEST.length > 0 ? [inputData.masterData.MJ_TEST[0]] : [];\r\n                let MJSelectedSubSample = inputData.MJSelectedSubSample\r\n                let filterTestSameOldSelectedTest = getSameRecordFromTwoDifferentArrays(oldSelectedTest, inputData.masterData.MJ_TEST, \"ntransactiontestcode\");\r\n                let MJSelectedTest = filterTestSameOldSelectedTest.length > 0 ? filterTestSameOldSelectedTest : [inputData.masterData.MJ_TEST[0]];\r\n                let ntransactiontestcode = MJSelectedTest.length > 0 ? MJSelectedTest.map(x => x.ntransactiontestcode).join(\",\") : \"-1\";\r\n\r\n                if (inputData.masterData.MJ_TEST.length <= inputData.testskip) {\r\n                    testskip = 0;\r\n                    bool = true;\r\n                }\r\n                if (bool) {\r\n                    skipInfo = { testskip, testtake }\r\n                }\r\n                inputData = {\r\n                    ...inputData, childTabsKey: [\"ApprovalParameter\", \"ApprovalResultChangeHistory\", \"ResultUsedInstrument\",\r\n                        \"ResultUsedTasks\", \"RegistrationTestAttachment\", \"RegistrationTestComment\"], ntransactiontestcode, MJSelectedSample, selectedPreregno, MJSelectedTest,\r\n                        MJSelectedSubSample, checkBoxOperation: 3, skipInfo\r\n                }\r\n                dispatch(getMJTestChildTabDetail(inputData, true));\r\n            } \r\n            else {\r\n                    let keepOld = false;\r\n                    let ntransactiontestcode;\r\n\r\n                    let masterData = {\r\n                        ...inputData.masterData,\r\n                        MJSelectedSubSample: inputData.MJSelectedSubSample,\r\n                        selectedTransactioncode: inputData.ntransactionsamplecode,\r\n                        MJSelectedTest: TestSelected ? TestSelected : inputData.masterData.MJ_TEST.length > 0 ?\r\n                            [inputData.masterData.MJ_TEST[0]] : [],\r\n                    }\r\n\r\n                    const wholeTestList = masterData.MJ_TEST.map(b => b.ntransactiontestcode)\r\n                    oldSelectedTest.forEach((test, index) => {\r\n                        if (!wholeTestList.includes(test.ntransactiontestcode)) {\r\n                            oldSelectedTest.splice(index, 1)\r\n                        }\r\n                        return null;\r\n                    });\r\n                    if (inputData.masterData.MJ_TEST.length <= inputData.testskip) {\r\n                        testskip = 0;\r\n                        bool = true\r\n                    }\r\n                    let skipInfo = {}\r\n                    if (bool) {\r\n                        skipInfo = { testskip, testtake }\r\n                    }\r\n\r\n                    if (oldSelectedTest.length > 0) {\r\n                        keepOld = true\r\n                        masterData = {\r\n                            ...masterData,\r\n                            MJSelectedTest: oldSelectedTest,\r\n                        }\r\n                    } else {\r\n                        ntransactiontestcode = inputData.masterData.MJ_TEST.length > 0 ?\r\n                            inputData.masterData.MJ_TEST[0].ntransactiontestcode : \"-1\"\r\n                    }\r\n\r\n\r\n                    switch (inputData.activeTestTab) {\r\n                        \r\n                        case \"IDS_TESTATTACHMENTS\":\r\n                            RegistrationTestAttachment = keepOld ? inputData.masterData.RegistrationTestAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment, ntransactiontestcode, \"ntransactiontestcode\")\r\n                            break;\r\n                       \r\n                        case \"IDS_TESTCOMMENTS\":\r\n                            RegistrationTestComment = keepOld ? inputData.masterData.RegistrationTestComment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment, ntransactiontestcode, \"ntransactiontestcode\")\r\n                            break;\r\n                       \r\n                        default:\r\n                            RegistrationTestAttachment = keepOld ? inputData.masterData.RegistrationTestAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment, ntransactiontestcode, \"ntransactiontestcode\")\r\n                            break;\r\n                    }\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN, payload: {\r\n                            masterData: {\r\n                                ...masterData,\r\n                                ApprovalParameter,\r\n                                ResultUsedInstrument,\r\n                                ResultUsedTasks,\r\n                                RegistrationTestAttachment,\r\n                                ApprovalResultChangeHistory,\r\n                                RegistrationTestComment,\r\n                                ApprovalHistory\r\n                            },\r\n                            loading: false,\r\n                            showFilter: false,\r\n                            ...skipInfo,\r\n                            activeSampleTab: inputData.activeSampleTab,\r\n                            activeTestTab: inputData.activeTestTab\r\n                        }\r\n                    })\r\n                }\r\n            }\r\n        //}\r\n    }\r\n}\r\n\r\n\r\n\r\nexport function getMJTestChildTabDetail(inputData, isServiceRequired) {\r\n    return function (dispatch) {\r\n        if (inputData.ntransactiontestcode && inputData.ntransactiontestcode.length > 0) {\r\n            let inputParamData = {\r\n                ntransactiontestcode: inputData.ntransactiontestcode,\r\n                npreregno: inputData.npreregno,\r\n                userinfo: inputData.userinfo\r\n            }\r\n            let url = null\r\n            let { testtake } = inputData;\r\n            let activeName = \"\";\r\n            let dataStateName = \"\";\r\n            switch (inputData.activeTestTab) {\r\n                case \"IDS_TESTATTACHMENTS\":\r\n                    url = \"attachment/getTestAttachment\"\r\n                    activeName = \"RegistrationTestAttachment\"\r\n                    break;\r\n                case \"IDS_TESTCOMMENTS\":\r\n                    url = \"comments/getTestComment\"\r\n                    activeName = \"RegistrationTestComment\"\r\n                    dataStateName = \"testCommentDataState\"\r\n                    break;\r\n                case \"IDS_SAMPLEATTACHMENTS\":\r\n                    url = \"attachment/getSampleAttachment\"\r\n                    break;\r\n                default:\r\n                    url = \"attachment/getTestAttachment\"\r\n                    activeName = \"RegistrationTestAttachment\"\r\n                    break;\r\n            }\r\n            if (url !== null) {\r\n                dispatch(initRequest(true));\r\n                if (isServiceRequired) {\r\n                    rsapi.post(url, inputParamData)\r\n                        .then(response => {\r\n                            let skipInfo = {};\r\n                            let responseData = { ...response.data, MJSelectedSubSample: inputData.MJSelectedSubSample || inputData.masterData.MJSelectedSubSample, selectedTest: inputData.MJSelectedTest }\r\n                            //responseData = sortData(responseData)\r\n                            // fillRecordBasedOnCheckBoxSelection(inputData.masterData, inputData.selectedTest, inputData.childTabsKey, inputData.checkBoxOperation, \"ntransactiontestcode\",inputData.removeElementFromArray);\r\n                            fillRecordBasedOnCheckBoxSelection(inputData.masterData, responseData, inputData.childTabsKey, inputData.checkBoxOperation, \"npreregno\", inputData.removeElementFromArray);\r\n                            let masterData = {\r\n                                ...inputData.masterData,\r\n                                MJSelectedSample: inputData.MJSelectedSample || inputData.masterData.MJSelectedSample,\r\n                                MJSelectedSubSample: inputData.MJSelectedSubSample || inputData.masterData.MJSelectedSubSample,\r\n                                MJSelectedTest: inputData.MJSelectedTest,\r\n                                selectedPreregno: inputData.npreregno,\r\n                                selectedSampleCode: inputData.ntransactionsamplecode,\r\n                                selectedTestCode: inputData.ntransactiontestcode,\r\n                            }\r\n                            if (inputData[dataStateName] && masterData[activeName].length <= inputData[dataStateName].skip) {\r\n\r\n                                skipInfo = {\r\n\r\n                                    [dataStateName]: {\r\n                                        ...inputData[dataStateName],\r\n                                        skip: 0,\r\n                                        sort: undefined,\r\n                                        filter: undefined\r\n                                    }\r\n                                }\r\n                            } else {\r\n                                skipInfo = {\r\n                                    ...skipInfo,\r\n                                    [dataStateName]: {\r\n                                        ...inputData[dataStateName],\r\n                                        sort: undefined,\r\n                                        filter: undefined\r\n                                    }\r\n                                }\r\n                            }\r\n                            dispatch({\r\n                                type: DEFAULT_RETURN, payload: {\r\n                                    masterData,\r\n                                    loading: false,\r\n                                    showFilter: false,\r\n                                    activeTestTab: inputData.activeTestTab,\r\n                                    screenName: inputData.screenName,\r\n                                    testtake, testskip: undefined,\r\n                                    ...skipInfo\r\n                                }\r\n                            })\r\n                        })\r\n                        .catch(error => {\r\n                            dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                            if (error.response.status === 500) {\r\n                                toast.error(error.message);\r\n                            }\r\n                            else {\r\n                                toast.warn(error.response.data);\r\n                            }\r\n                        })\r\n                } else {\r\n                    fillRecordBasedOnCheckBoxSelection(inputData.masterData, inputData.MJSelectedTest, inputData.childTabsKey, inputData.checkBoxOperation, \"ntransactiontestcode\", inputData.removeElementFromArray);\r\n                    let skipInfo = {};\r\n                    let masterData = {\r\n                        ...inputData.masterData,\r\n                        MJSelectedTest: inputData.MJSelectedTest,\r\n                        selectedPreregno: inputData.npreregno,\r\n                        selectedSampleCode: inputData.ntransactionsamplecode,\r\n                        selectedTestCode: inputData.ntransactiontestcode,\r\n                    }\r\n                    if (inputData[dataStateName] && masterData[activeName].length <= inputData[dataStateName].skip) {\r\n\r\n                        skipInfo = {\r\n\r\n                            [dataStateName]: {\r\n                                ...inputData[dataStateName],\r\n                                skip: 0,\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    } else {\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            [dataStateName]: {\r\n                                ...inputData[dataStateName],\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    }\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN, payload: {\r\n                            masterData,\r\n                            loading: false,\r\n                            showFilter: false,\r\n                            activeTestTab: inputData.activeTestTab,\r\n                            screenName: inputData.screenName,\r\n                            testtake, testskip: undefined,\r\n                            ...skipInfo\r\n                        }\r\n                    })\r\n                }\r\n\r\n            } else {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData\r\n                        },\r\n                        loading: false,\r\n                        showFilter: false,\r\n                        activeSampleTab: inputData.activeSampleTab\r\n                    }\r\n                })\r\n            }\r\n        } else {\r\n            let { ApprovalParameter, ResultUsedInstrument, ResultUsedTasks, RegistrationTestAttachment, ApprovalResultChangeHistory,\r\n                RegistrationTestComment, ApprovalHistory } = inputData.masterData\r\n            switch (inputData.activeTestTab) {\r\n                \r\n                case \"IDS_TESTATTACHMENTS\":\r\n                    RegistrationTestAttachment = []\r\n                    break;\r\n               \r\n                case \"IDS_TESTCOMMENTS\":\r\n                    RegistrationTestComment = []\r\n                    break;\r\n               \r\n                default:\r\n                    RegistrationTestAttachment = []\r\n                    break;\r\n            }\r\n\r\n            dispatch({\r\n                type: DEFAULT_RETURN, payload: {\r\n                    masterData: {\r\n                        ...inputData.masterData,\r\n                        selectedTest: [],\r\n                        ApprovalParameter, ResultUsedInstrument, ResultUsedTasks, RegistrationTestAttachment,\r\n                        ApprovalResultChangeHistory, RegistrationTestComment, ApprovalHistory\r\n                    }, loading: false\r\n                }\r\n            })\r\n        }\r\n    }\r\n}\r\nexport function getMJSampleChildTabDetail(inputData) {\r\n    return function (dispatch) {\r\n        if (inputData.npreregno.length > 0) {\r\n            let inputParamData = {\r\n                npreregno: inputData.npreregno,\r\n                userinfo: inputData.userinfo\r\n            }\r\n            let url = null\r\n            switch (inputData.activeSampleTab) {\r\n                case \"IDS_SAMPLEATTACHMENTS\":\r\n                    url = \"attachment/getSampleAttachment\"\r\n                    break;\r\n                case \"IDS_SAMPLECOMMENTS\":\r\n                    url = \"comments/getSampleComment\"\r\n                    break;\r\n                case \"IDS_SUBSAMPLEATTACHMENTS\":\r\n                    url = \"resultentrybysample/getResultUsedMaterial\"\r\n                    break;\r\n                case \"IDS_SUBSAMPLECOMMENTS\":\r\n                    url = \"resultentrybysample/getResultUsedTask\"\r\n                    break;\r\n                case \"IDS_SOURCE\":\r\n                    url = \"registration/getRegistrationSourceCountry\"\r\n                    break;\r\n                case \"IDS_SAMPLEAPPROVALHISTORY\":\r\n                    url = \"approval/getSampleApprovalHistory\"\r\n                    break;\r\n\r\n                case \"IDS_PRINTHISTORY\":\r\n                    url = \"approval/getPrintHistory\"\r\n                    break;\r\n                case \"IDS_REPORTHISTORY\":\r\n                    url = \"approval/getCOAHistory\"\r\n                    break;\r\n                default:\r\n                    url = null\r\n                    break;\r\n            }\r\n            if (url !== null) {\r\n                dispatch(initRequest(true));\r\n                rsapi.post(url, inputParamData)\r\n                    .then(response => {\r\n                        let responseData = { ...response.data }\r\n                        responseData = sortData(responseData)\r\n                        dispatch({\r\n                            type: DEFAULT_RETURN, payload: {\r\n                                masterData: {\r\n                                    ...inputData.masterData,\r\n                                    ...responseData,\r\n                                    selectedSample: inputData.selectedSample,\r\n                                    selectedTestCode: inputData.ntransactiontestcode,\r\n                                },\r\n                                loading: false,\r\n                                showFilter: false,\r\n                                activeSampleTab: inputData.activeSampleTab,\r\n                                screenName: inputData.screenName\r\n                            }\r\n                        })\r\n                    })\r\n                    .catch(error => {\r\n                        dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                        if (error.response.status === 500) {\r\n                            toast.error(error.message);\r\n                        }\r\n                        else {\r\n                            toast.warn(error.response.data);\r\n                        }\r\n                    })\r\n            } else {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            selectedSample: inputData.selectedSample\r\n                        },\r\n                        loading: false,\r\n                        showFilter: false,\r\n                        activeSampleTab: inputData.activeSampleTab\r\n                    }\r\n                })\r\n            }\r\n        } else {\r\n            toast.warn(\"Please Select a Sample\");\r\n        }\r\n    }\r\n}\r\nexport function performAction(inputParam) {\r\n    return function (dispatch) {\r\n\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"approval/performAction\", inputParam.inputData)\r\n            .then(response => {\r\n                let masterData = {\r\n                    ...inputParam.masterData,\r\n                    ...response.data,\r\n                    MJ_SAMPLE: replaceUpdatedObject(response.data.updatedSample, inputParam.masterData.MJ_SAMPLE, 'npreregno'),\r\n                    MJ_SUBSAMPLE: replaceUpdatedObject(response.data.updatedSubSample, inputParam.masterData.MJ_SUBSAMPLE, 'ntransactionsamplecode'),\r\n                    MJ_TEST: replaceUpdatedObject(response.data.updatedTest, inputParam.masterData.MJ_TEST, 'ntransactiontestcode')\r\n                }\r\n                // dispatch({type: DEFAULT_RETURN, payload:{\r\n                // masterData:{\r\n                //     ...inputParam.inputData.masterData,\r\n                //     ...response.data, \r\n                //     MJ_SAMPLE:replaceUpdatedObject(response.data.updatedSample,inputParam   .inputData.masterData.MJ_SAMPLE,'npreregno'),\r\n                //     MJ_SUBSAMPLE:replaceUpdatedObject(response.data.updatedSubSample,inputParam.inputData.masterData.MJ_SUBSAMPLE,'ntransactionsamplecode'),\r\n                //     MJ_TEST:replaceUpdatedObject(response.data.updatedTest,inputParam.inputData.masterData.MJ_TEST,'ntransactiontestcode')\r\n                // },\r\n                //     loading:false ,\r\n                //     loadEsign:false,\r\n                //     openChildModal:false                     \r\n                // }}) \r\n                let respObject = {\r\n                    masterData,\r\n                    inputParam,\r\n                    openChildModal: false,\r\n                    operation: \"dynamic\",\r\n                    masterStatus: \"\",\r\n                    errorCode: undefined,\r\n                    loadEsign: false,\r\n                    showEsign: false,\r\n                    selectedRecord: {},\r\n                    loading: false\r\n                }\r\n\r\n                dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList, respObject))\r\n\r\n\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function updateDecision(inputParam) {\r\n\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"approval/updateDecision\", inputParam.inputData)\r\n            .then(response => {\r\n                let responseData = { ...response.data }\r\n                responseData = sortData(responseData)\r\n                // dispatch({type: DEFAULT_RETURN, payload:{\r\n                //     masterData:{\r\n                //         ...inputParam.masterData,\r\n                //         ...responseData, \r\n                //         MJ_SAMPLE:replaceUpdatedObject(response.data.updatedSample,inputParam.masterData.MJ_SAMPLE,'npreregno'),\r\n                //         MJ_SUBSAMPLE:replaceUpdatedObject(response.data.updatedSubSample,inputParam.masterData.MJ_SUBSAMPLE,'ntransactionsamplecode'),\r\n                //         MJ_TEST:replaceUpdatedObject(response.data.updatedTest,inputParam.masterData.MJ_TEST,'ntransactiontestcode')\r\n\r\n                //     },\r\n                //     loading:false                      \r\n                // }}) \r\n                let masterData = {\r\n                    ...inputParam.masterData,\r\n                    ...responseData,\r\n                    MJ_SAMPLE: replaceUpdatedObject(response.data.updatedSample, inputParam.masterData.MJ_SAMPLE, 'npreregno'),\r\n                    MJ_SUBSAMPLE: replaceUpdatedObject(response.data.updatedSubSample, inputParam.masterData.MJ_SUBSAMPLE, 'ntransactionsamplecode'),\r\n                    MJ_TEST: replaceUpdatedObject(response.data.updatedTest, inputParam.masterData.MJ_TEST, 'ntransactiontestcode')\r\n\r\n                }\r\n                let respObject = {\r\n                    masterData,\r\n                    inputParam,\r\n                    openChildModal: false,\r\n                    operation: \"dynamic\",\r\n                    masterStatus: \"\",\r\n                    errorCode: undefined,\r\n                    loadEsign: false,\r\n                    showEsign: false,\r\n                    selectedRecord: {},\r\n                    loading: false\r\n                }\r\n                dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList, respObject))\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function getRegType(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"myjobs/getRegistrationType\", inputData)\r\n            .then(response => {\r\n                let responseData = { ...response.data }\r\n                responseData = sortData(responseData)\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...responseData,\r\n                            realSampleTypeValue: inputData.realSampleTypeValue\r\n                        },\r\n                        loading: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function getRegSubType(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"myjobs/getRegistrationsubType\", inputData)\r\n            .then(response => {\r\n                let responseData = { ...response.data }\r\n                responseData = sortData(responseData)\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...responseData,\r\n                            realRegTypeValue: inputData.realRegTypeValue\r\n                        },\r\n                        loading: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function getTestStatus(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"myjobs/getFilterStatus\", inputData)\r\n            .then(response => {\r\n                let responseData = { ...response.data }\r\n                responseData = sortData(responseData)\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...responseData,\r\n                            RegSubTypeValue: inputData.RegSubTypeValue\r\n                        },\r\n                        loading: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getAppConfigVersion(inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"myjobs/getApprovalConfigVersion\", inputParam.inputData)\r\n            .then(response => {\r\n                let responseData = { ...response.data }\r\n                responseData = sortData(responseData)\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData: {\r\n                            ...inputParam.masterData,\r\n                            ...responseData,\r\n                            realRegSubTypeValue: inputParam.masterData.realRegSubTypeValue\r\n\r\n                            // fromDate: inputParam.inputData.dfrom,\r\n                            // toDate: inputParam.inputData.dto,\r\n                        },\r\n                        loading: false,\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function getSection(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"myjobs/getTestCombo\", inputData)\r\n            .then(response => {\r\n                let responseData = { ...response.data }\r\n                responseData = sortData(responseData)\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...responseData,\r\n                            realUserSectionValue: inputData.masterData.realUserSectionValue,\r\n                        },\r\n                        loading: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function getMyJobsSample(inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"myjobs/getMyJobsDetails\", inputParam.inputData)\r\n            .then(response => {\r\n                let responseData = { ...response.data }\r\n                // responseData = sortData(responseData)\r\n                let masterData = {\r\n                    ...inputParam.masterData,\r\n                    ...responseData,\r\n                }\r\n                if (inputParam.searchSampleRef !== undefined && inputParam.searchSampleRef.current !== null) {\r\n                    inputParam.searchSampleRef.current.value = \"\";\r\n                    masterData['searchedSample'] = undefined\r\n                }\r\n                if (inputParam.searchSubSampleRef !== undefined && inputParam.searchSubSampleRef.current !== null) {\r\n                    inputParam.searchSubSampleRef.current.value = \"\";\r\n                    masterData['searchedSubSample'] = undefined\r\n                }\r\n                if (inputParam.searchTestRef !== undefined && inputParam.searchTestRef.current !== null) {\r\n                    inputParam.searchTestRef.current.value = \"\"\r\n                    // masterData['searchedTest'] = undefined\r\n                    masterData['searchedTests'] = undefined\r\n\r\n                }\r\n                sortData(masterData);\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData,\r\n                        loading: false,\r\n                        showFilter: false,\r\n                        skip: 0,\r\n                        take: inputParam.take,\r\n                        testskip: 0,\r\n                        testtake: inputParam.testtake,\r\n                        resultDataState: { ...inputParam.resultDataState, sort: undefined, filter: undefined },\r\n                        instrumentDataState: { ...inputParam.instrumentDataState, sort: undefined, filter: undefined },\r\n                        materialDataState: { ...inputParam.materialDataState, sort: undefined, filter: undefined },\r\n                        taskDataState: { ...inputParam.taskDataState, sort: undefined, filter: undefined },\r\n                        documentDataState: { ...inputParam.documentDataState, sort: undefined, filter: undefined },\r\n                        resultChangeDataState: { ...inputParam.resultChangeDataState, sort: undefined, filter: undefined },\r\n                        testCommentDataState: { ...inputParam.testCommentDataState, sort: undefined, filter: undefined },\r\n                        historyDataState: { ...inputParam.historyDataState, sort: undefined, filter: undefined },\r\n                        samplePrintHistoryDataState: { ...inputParam.samplePrintHistoryDataState, sort: undefined, filter: undefined },\r\n                        sampleHistoryDataState: { ...inputParam.sampleHistoryDataState, sort: undefined, filter: undefined }\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function getStatusCombo(inputParam) {\r\n    return function (dispatch) {\r\n        let inputData = {\r\n            ntransactionresultcode: inputParam.primaryKeyValue,\r\n            userinfo: inputParam.userInfo\r\n        }\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"approval/getStatusCombo\", inputData)\r\n            .then(response => {\r\n                let responseData = { ...response.data }\r\n                //responseData = sortData(responseData)\r\n                const GradeListMap = constructOptionList(response.data.Grade || [], \"ngradecode\", \"sgradename\", 'ascending', 'ngradecode', false);\r\n                let Grade = GradeListMap.get(\"OptionList\");\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData: {\r\n                            ...inputParam.masterData,\r\n                            ...responseData,\r\n                            Grade,\r\n                            selectedParamId: inputParam.primaryKeyValue\r\n                        },\r\n                        loading: false,\r\n                        showFilter: false,\r\n                        openChildModal: true,\r\n                        ncontrolCode: inputParam.ncontrolCode,\r\n                        selectedRecord: {\r\n                            senforcestatuscomment: response.data.parameterComment && response.data.parameterComment.senforcestatuscomment,\r\n                            ntransactionresultcode: response.data.parameterComment && response.data.parameterComment.ntransactionresultcode,\r\n                            ntransactiontestcode: response.data.parameterComment && response.data.parameterComment.ntransactiontestcode\r\n                        },\r\n                        operation: \"enforce\",\r\n                        screenName: \"IDS_STATUS\"\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function getAcceptTest(inputParam) {\r\n    return function (dispatch) {\r\n        let inputData = {\r\n            nsampletypecode :inputParam.testGetParam.nsampletypecode,\r\n            nregtypecode :inputParam.testGetParam.nregtypecode,\r\n            nregsubtypecode : inputParam.testGetParam.nregsubtypecode,\r\n            ntransactionstatus :inputParam.testGetParam.ntransactionstatus,\r\n            napprovalversioncode :inputParam.testGetParam.napprovalversioncode,\r\n            nsectioncode :inputParam.testGetParam.nsectioncode,\r\n            ntestcode :inputParam.testGetParam.ntestcode,\r\n            fromdate: inputParam.testGetParam.dfrom,\r\n            todate: inputParam.testGetParam.dto,\r\n            npreregno :inputParam.testGetParam.masterData.MJSelectedSample ? inputParam.testGetParam.masterData.MJSelectedSample.map(sample => sample.npreregno).join(\",\") : \"\",\r\n            ntransactionsamplecode : inputParam.testGetParam.masterData.MJSelectedSubSample ? inputParam.testGetParam.masterData.MJSelectedSubSample.map(subsample => subsample.ntransactionsamplecode).join(\",\") : \"\",\r\n\r\n        //    npreregno :inputParam.MJSelectedTest ? inputParam.MJSelectedTest.map(sample => sample.npreregno).join(\",\") : \"\",\r\n        //    ntransactionsamplecode : inputParam.MJSelectedTest ? inputParam.MJSelectedTest.map(subsample => subsample.ntransactionsamplecode).join(\",\") : \"\",\r\n\r\n\r\n            transactiontestcode: inputParam.MJSelectedTest ? inputParam.MJSelectedTest.map(test => test.ntransactiontestcode).join(\",\") : \"\",\r\n            ntransactiontestcode: 0,\r\n            ncontrolcode : inputParam.ncontrolcode,\r\n            nneedsubsample:inputParam.testGetParam.masterData.nneedsubsample,\r\n            ndesigntemplatemappingcode :inputParam.testGetParam.ndesigntemplatemappingcode,\r\n            checkBoxOperation:3,\r\n\r\n            userinfo: inputParam.userInfo\r\n        }\r\n\r\n        if (inputData.transactiontestcode && inputData.transactiontestcode.length > 0) {\r\n            dispatch(initRequest(true));\r\n            rsapi.post(\"myjobs/CreateAcceptTest\", inputData)\r\n                .then(response => {\r\n                    let responseData = { ...response.data }\r\n                    responseData = sortData(responseData)\r\n                    let MJ_TEST =[];\r\n                    MJ_TEST =responseData[\"MJ_TEST\"]\r\n                    // let searchedTests = undefined;\r\n                    // if (inputParam.testGetParam.masterData[\"searchedTests\"]) {\r\n                    //     let searchtestcode =inputParam.testGetParam.masterData.searchedTests.map(a => a.ntransactiontestcode)\r\n                    //     let responsetestcode =responseData.MJ_TEST.map(b=>b.ntransactiontestcode)\r\n                    //     searchtestcode.forEach((value, i) => {\r\n                    //         if(value === responsetestcode[i]) {\r\n                    //             inputParam.testGetParam.masterData[\"searchedTests\"] =MJ_TEST;\r\n                    //             //MJ_TEST = inputParam.testGetParam.masterData[\"searchedTests\"] ;\r\n                    //         }else{\r\n                    //             inputParam.testGetParam.masterData[\"searchedTests\"]=[]; \r\n\r\n                    //         }\r\n                    //     });\r\n                    // }\r\n\r\n                   \r\n\r\n                    let masterData = {\r\n                        ...inputParam.testGetParam.masterData,\r\n                        ...response.data,\r\n                        MJ_TEST \r\n                       // searchedTests\r\n                    };\r\n\r\n                    \r\n                    \r\n                    dispatch({\r\n                        type: DEFAULT_RETURN, payload: {\r\n                            ...responseData,\r\n                            masterData,\r\n                           \r\n                            loading: false,\r\n                            operation: \"update\",\r\n                           \r\n                        }\r\n                    })\r\n                })\r\n                .catch(error => {\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    }\r\n                    else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                })\r\n        } else {\r\n            dispatch({\r\n                type: DEFAULT_RETURN,\r\n                payload: {\r\n                    multilingualMsg: \"IDS_SELECTTEST\",\r\n                }\r\n            });\r\n        }\r\n    }\r\n}\r\nexport function validateEsignforApproval(inputParam) {\r\n    return (dispatch) => {\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"login/validateEsignCredential\", inputParam.inputData)\r\n            .then(response => {\r\n                if (response.data === \"Success\") {\r\n\r\n                    if (inputParam.operation === 'dynamic') {\r\n                        const methodUrl = \"performaction\"\r\n                        inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][\"userinfo\"] = inputParam.inputData.userinfo;\r\n\r\n                        if (inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()] &&\r\n                            inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignpassword\"]) {\r\n                            delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignpassword\"]\r\n                            delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esigncomments\"]\r\n                            delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"agree\"]\r\n                        }\r\n                        dispatch(performAction(inputParam[\"screenData\"][\"inputParam\"], inputParam[\"screenData\"][\"masterData\"]))\r\n                    } else if (inputParam.operation === 'reportgeneration') {\r\n                        delete inputParam[\"screenData\"][\"inputParam\"]['reporparam'][\"esignpassword\"]\r\n                        delete inputParam[\"screenData\"][\"inputParam\"]['reporparam'][\"esigncomments\"]\r\n                        delete inputParam[\"screenData\"][\"inputParam\"]['reporparam'][\"agree\"]\r\n                        inputParam[\"screenData\"][\"inputParam\"][\"reporparam\"][\"userinfo\"] = inputParam.inputData.userinfo;\r\n                        dispatch(generateCOAReport(inputParam[\"screenData\"][\"inputParam\"]['reporparam']))\r\n                    }\r\n                    else if (inputParam.operation === 'decision') {\r\n                        delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"]['updatedecision'][\"esignpassword\"]\r\n                        delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"]['updatedecision'][\"esigncomments\"]\r\n                        delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"]['updatedecision'][\"agree\"]\r\n                        inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][\"userinfo\"] = inputParam.inputData.userinfo;\r\n                        dispatch(updateDecision(inputParam[\"screenData\"][\"inputParam\"]))\r\n                    }\r\n                }\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    };\r\n}\r\n\r\nexport function previewSampleReport(inputParam) {\r\n    return function (dispatch) {\r\n\r\n        dispatch(initRequest(true));\r\n        let ndecisionStatus = inputParam.sample.ndecisionstatus;\r\n        if (inputParam.sample.ndecisionstatus === undefined || inputParam.sample.ndecisionstatus === transactionStatus.DRAFT) {\r\n            ndecisionStatus = transactionStatus.PASS;\r\n        }\r\n        const inputData = {\r\n            ndecisionstatus: ndecisionStatus,\r\n            userinfo: inputParam.userinfo,\r\n            nprimarykey: inputParam.sample.npreregno,\r\n            ncoareporttypecode: reportCOAType.SAMPLECERTIFICATEPRIVIEW,\r\n            nreporttypecode: REPORTTYPE.SAMPLEREPORT,\r\n            sprimarykeyname: \"npreregno\",\r\n            ncontrolcode: inputParam.ncontrolCode,\r\n            nregtypecode: inputParam.sample.nregtypecode,\r\n            nregsubtypecode: inputParam.sample.nregsubtypecode,\r\n            npreregno: inputParam.sample.npreregno\r\n        }\r\n        rsapi.post(\"approval/previewSampleReport\", inputData)\r\n            .then(response => {\r\n\r\n                if (response.data.rtn === \"Success\") {\r\n                    document.getElementById(\"download_data\").setAttribute(\"href\", response.data.filepath);\r\n                    document.getElementById(\"download_data\").click();\r\n                } else {\r\n                    toast.warn(response.data.rtn);\r\n                }\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false, openChildModal: false, loadEsign: false } })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function generateCOAReport(inputParam) {\r\n    return function (dispatch) {\r\n\r\n        dispatch(initRequest(true));\r\n        const inputData = {\r\n            npreregno: inputParam.sample.npreregno,\r\n            nsectioncode: inputParam.nsectioncode || -1,\r\n            userinfo: inputParam.userinfo,\r\n            nprimarykey: inputParam.sample.npreregno,\r\n            ncoareporttypecode: reportCOAType.SAMPLEWISE,\r\n            nreporttypecode: REPORTTYPE.COAREPORT,\r\n            sprimarykeyname: \"npreregno\",\r\n            ncontrolcode: inputParam.ncontrolCode,\r\n            nregtypecode: inputParam.nregtypecode,\r\n            nregsubtypecode: inputParam.nregsubtypecode\r\n        }\r\n        rsapi.post(\"approval/generateCOAReport\", inputData)\r\n            .then(response => {\r\n\r\n                if (response.data.rtn === \"Success\") {\r\n                    document.getElementById(\"download_data\").setAttribute(\"href\", response.data.filepath);\r\n                    document.getElementById(\"download_data\").click();\r\n                } else {\r\n                    toast.warn(response.data.rtn);\r\n                }\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false, openChildModal: false, selectedRecord: {}, loadEsign: false } })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function getEnforceCommentsHistory(selectedParam, masterData, userInfo) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"approval/getEnforceCommentsHistory\", {\r\n            ntransactionresultcode: selectedParam.ntransactionresultcode,\r\n            userinfo: userInfo\r\n        })\r\n            .then(response => {\r\n                if (response.data.length > 0) {\r\n                    masterData = { ...masterData, enforceCommentsHistory: response.data }\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            loading: false,\r\n                            masterData,\r\n                            openChildModal: true,\r\n                            operation: \"view\",\r\n                            screenName: \"IDS_ENFORCECOMMENTHISTORY\"\r\n                        }\r\n                    })\r\n                } else {\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false, multilingualMsg: \"IDS_NOPREVIOUSCOMMENTSFOUND\" } })\r\n\r\n                }\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function reportGenerate(inputParam) {\r\n    return function (dispatch) {\r\n\r\n        dispatch(initRequest(true));\r\n        const inputData = {\r\n            npreregno: inputParam.sample.npreregno,\r\n            userinfo: inputParam.userinfo,\r\n            reportName:\"RJ_Samplewise_Report_QRCode\",\r\n            reportFormat:\"pdf\"\r\n           \r\n        }\r\n        rsapi.post(\"reportjasper/generateCOAReport\", inputData)\r\n            .then(response => {\r\n\r\n                if (response.data.rtn === \"Success\") {\r\n\r\n                    if (response.data.filePath) {\r\n                       // let user = response;\r\n                        let elnURL = response.data.filePath;\r\n                        window.open(elnURL, '_blank');\r\n                    } else {\r\n                        toast.info(intl.FormattedMessage({\r\n                            id: \"IDS_ELNUIURLNOTAVAILABLE\"\r\n                        }))\r\n                    }\r\n\r\n                    // document.getElementById(\"download_data\").setAttribute(\"href\", response.data.filePath);\r\n                    // document.getElementById(\"download_data\").click();\r\n                } else {\r\n                    toast.warn(response.data.rtn);\r\n                }\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false, openChildModal: false, selectedRecord: {}, loadEsign: false } })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}