{"ast":null,"code":"var _jsxFileName = \"D:\\\\LIMSWFH\\\\LIMSPOSTGRESQL\\\\QuaLISWeb\\\\src\\\\pages\\\\registration\\\\RegistrationDesigner.jsx\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { showUnderDevelopment, callService, crudMaster, updateStore, getSampleTypeChange, getRegTypeChange, getRegSubTypeChange, getAttachmentCombo, viewAttachment, getCommentsCombo, filterTransactionList, validateEsignCredential, ReloadData, getSampleChildTabDetail, getTestChildTabDetailRegistration, getPreviewTemplate, getChildValues, getRegistrationSample, getRegistrationsubSampleDetail, getRegistrationTestDetail, acceptRegistration, addMoreTest, createRegistrationTest, getEditRegistrationComboService, cancelTestAction, cancelSampleAction, addsubSampleRegistration, saveSubSample, onApprovalConfigVersionChange, getEditSubSampleComboService, onUpdateSubSampleRegistration, cancelSubSampleAction, //componentTestPackage,\npreregRecordToQuarantine, componentTest, getSubSampleChildTabDetail, validateEsignforRegistration, testPackageTest, getStorageCategoryForSendToStore, loadApprovedLocationOnCombo, loadApprovedLocationOnTreeData, sendToStoreSampleStorageMaster, addMasterRecord, getAddMasterCombo, getDynamicMasterTempalte, getOutSourceSiteAndTest, outsourceSampleTest, getChildComboMaster, getChildValuesForAddMaster, insertRegistration, getBarcodeAndPrinterService, getEditMaster, getOrderDetails, onUpdateCancelExternalOrder, outsourceTest, getOutSourceSite, getExternalOrderForMapping, orderMapping, getExternalOrderTypeForMapping, orderRecords, testSectionTest, openBarcodeModal, barcodeGeneration, getAdhocTest, createAdhocTest } from '../../actions';\nimport { Button, Card, Col, Nav, Row, FormLabel } from 'react-bootstrap';\nimport { toast } from 'react-toastify';\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\nimport { getControlMap, showEsign, sortData, constructOptionList, sortDataForDate, Lims_JSON_stringify, onDropAttachFileList, deleteAttachmentDropZone, comboChild, childComboClear, ageCalculate, extractFieldHeader, formatDate, formatInputDate, removeIndex } from '../../components/CommonScript';\nimport RegistrationFilter from './RegistrationFilter';\nimport Esign from '../audittrail/Esign';\nimport { injectIntl } from 'react-intl';\nimport { ProductList } from '../product/product.styled';\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\nimport SplitterLayout from \"react-splitter-layout\";\nimport AddTest from './AddTest';\nimport FormSelectSearch from '../../components/form-select-search/form-select-search.component';\nimport { designProperties, RegistrationType, transactionStatus, SideBarSeqno, SideBarTabIndex, SampleType, formCode, designComponents, checkBoxOperation } from '../../components/Enumeration'; // import BreadcrumbComponentToolbar from '../../components/ToolbarBreadcrumb.Component';\n\nimport BreadcrumbComponent from '../../components/Breadcrumb.Component';\nimport { ListWrapper } from '../../components/client-group.styles';\nimport TransactionListMasterJsonView from '../../components/TransactionListMasterJsonView';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faFileInvoice, faEye, faPlus, faSync, faBorderAll, faLink, faCommentDots, faChevronRight, faComments, faComment, faPaperclip, faFlask, faMicroscope, faHistory, faArrowRight, faBoxOpen, faBox, faLocationArrow, faFolderOpen, faFolder, faPrint, faFileImport } from '@fortawesome/free-solid-svg-icons';\nimport { ContentPanel, ReadOnlyText } from '../../components/App.styles';\nimport SampleInfoView from '../approval/SampleInfoView';\nimport CustomTabs from '../../components/custom-tabs/custom-tabs.component';\nimport ConfirmMessage from '../../components/confirm-alert/confirm-message.component';\nimport AddPrinter from './AddPrinter';\nimport SampleGridTab from './SampleGridTab';\nimport AddFile from './AddFile';\nimport Attachments from '../attachmentscomments/attachments/Attachments';\nimport Comments from '../attachmentscomments/comments/Comments';\nimport { onSaveSampleComments, onSaveSubSampleComments, onSaveTestComments } from '../attachmentscomments/comments/CommentFunctions';\nimport { onSaveSampleAttachment, onSaveSubSampleAttachment, onSaveTestAttachment } from '../attachmentscomments/attachments/AttachmentFunctions';\nimport { ReactComponent as Quarantine } from \"@svgr/webpack?-svgo,+titleProp,+ref!../../assets/image/Quarantine.svg\";\nimport { ReactComponent as Register } from \"@svgr/webpack?-svgo,+titleProp,+ref!../../assets/image/register.svg\";\nimport { ReactComponent as Reject } from \"@svgr/webpack?-svgo,+titleProp,+ref!../../assets/image/reject.svg\";\nimport { ReactComponent as Order } from \"@svgr/webpack?-svgo,+titleProp,+ref!../../assets/image/orders-icon.svg\";\nimport { getSameRecordFromTwoArrays, convertDateValuetoString, rearrangeDateFormat } from '../../components/CommonScript';\nimport RegistrationResultTab from './RegistrationResultTab';\nimport PortalModal from '../../PortalModal';\nimport PreRegisterSlideOutModal from './PreRegisterSlideOutModal';\nimport { getRegistrationSubSample } from './RegistrationValidation';\nimport AddSubSample from './AddSubSample';\nimport CustomSwitch from '../../components/custom-switch/custom-switch.component';\nimport QRCode from 'react-qr-code';\nimport MoveSampleOrContainers from '../basemaster/MoveSampleOrContainers';\nimport { mapTree } from \"@progress/kendo-react-treelist\";\nimport { getFieldSpecification } from '../../components/type2component/Type2FieldSpecificationList';\nimport { getFieldSpecification as getFieldSpecification1 } from '../../components/type1component/Type1FieldSpecificationList';\nimport { getFieldSpecification as getFieldSpecification3 } from '../../components/type3component/Type3FieldSpecificationList';\nimport AddMasterRecords from '../dynamicpreregdesign/AddMasterRecords';\nimport ExternalOrder from './ExternalOrder';\nimport fullviewExpand from \"../../assets/image/fullview-expand.svg\";\nimport fullviewCollapse from \"../../assets/image/fullview-collapse.svg\";\nimport FormTextarea from '../../components/form-textarea/form-textarea.component';\nimport FormMultiSelect from '../../components/form-multi-select/form-multi-select.component';\nimport FormInput from '../../components/form-input/form-input.component';\nimport DateTimePicker from '../../components/date-time-picker/date-time-picker.component';\nimport DataGrid from '../../components/data-grid/data-grid.component';\nimport { process } from '@progress/kendo-data-query';\nimport { getActionIcon } from '../../components/HoverIcons';\nimport MappingFields from '../registration/MappingFields';\nimport AddBarcode from '../../pages/BarcodeTemplate/AddBarcode';\nimport AddAdhocTest from './AddAdhocTest';\nimport BarcodeGeneratorComponent from '../../components/BarcodeGeneratorComponent';\n\nclass RegistrationDesigner extends Component {\n  constructor(_props) {\n    super(_props);\n\n    this.onReload = () => {\n      // let RealFromDate = new Date(this.props.Login.masterData.RealFromDate)\n      // let RealToDate = new Date(this.props.Login.masterData.RealToDate)\n      const obj = convertDateValuetoString(this.props.Login.masterData.RealFromDate, this.props.Login.masterData.RealToDate, this.props.Login.userInfo);\n      const RealFromDate = obj.fromDate;\n      const RealToDate = obj.toDate;\n      let RealSampleTypeValue = this.props.Login.masterData.RealSampleTypeValue && this.props.Login.masterData.RealSampleTypeValue;\n      let RealRegTypeValue = this.props.Login.masterData.RealRegTypeValue && this.props.Login.masterData.RealRegTypeValue;\n      let RealRegSubTypeValue = this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue;\n      let RealFilterStatusValue = this.props.Login.masterData.RealFilterStatusValue && this.props.Login.masterData.RealFilterStatusValue;\n      let RealDesignTemplateMappingValue = this.props.Login.masterData.RealDesignTemplateMappingValue && this.props.Login.masterData.RealDesignTemplateMappingValue;\n      let RealApprovalConfigVersionValue = this.props.Login.masterData.RealApprovalConfigVersionValue && this.props.Login.masterData.RealApprovalConfigVersionValue;\n      let activeSampleTab = this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\";\n      let activeSubSampleTab = this.props.Login.activeSubSampleTab || \"IDS_SUBSAMPLEATTACHMENTS\";\n      let activeTestTab = this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\";\n      let SampleTypeValue = RealSampleTypeValue;\n      let RegTypeValue = RealRegTypeValue;\n      let RegSubTypeValue = RealRegSubTypeValue;\n      let FilterStatusValue = RealFilterStatusValue;\n      let DesignTemplateMappingValue = RealDesignTemplateMappingValue;\n      let ApprovalConfigVersionValue = RealApprovalConfigVersionValue; // let FromDate = this.props.Login.masterData.FromDate\n      // let ToDate = this.props.Login.masterData.ToDate\n\n      const FromDate = rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.FromDate);\n      const ToDate = rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.ToDate);\n      let masterData = { ...this.props.Login.masterData,\n        RealSampleTypeValue,\n        RealRegTypeValue,\n        RealRegSubTypeValue,\n        FromDate,\n        ToDate,\n        RealFilterStatusValue,\n        RealFromDate,\n        RealToDate,\n        SampleTypeValue,\n        RegTypeValue,\n        RegSubTypeValue,\n        FilterStatusValue,\n        DesignTemplateMappingValue,\n        RealDesignTemplateMappingValue,\n        RealApprovalConfigVersionValue\n      };\n      let inputData = {\n        npreregno: \"\",\n        nsampletypecode: this.props.Login.masterData.RealSampleTypeValue && this.props.Login.masterData.RealSampleTypeValue.nsampletypecode,\n        nregtypecode: this.props.Login.masterData.RealRegTypeValue && this.props.Login.masterData.RealRegTypeValue.nregtypecode,\n        nregsubtypecode: this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode,\n        nfilterstatus: this.props.Login.masterData.RealFilterStatusValue && this.props.Login.masterData.RealFilterStatusValue.ntransactionstatus,\n        userinfo: this.props.Login.userInfo,\n        activeSampleTab,\n        activeTestTab,\n        activeSubSampleTab,\n        flag: 1,\n        nneedtemplatebasedflow: this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue.nneedtemplatebasedflow,\n        ndesigntemplatemappingcode: this.props.Login.masterData.RealDesignTemplateMappingValue && this.props.Login.masterData.RealDesignTemplateMappingValue.ndesigntemplatemappingcode,\n        napproveconfversioncode: this.props.Login.masterData.RealApprovalConfigVersionValue && this.props.Login.masterData.RealApprovalConfigVersionValue.napproveconfversioncode,\n        nneedsubsample: this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nneedsubsample,\n        //checkBoxOperation: 3,\n        checkBoxOperation: checkBoxOperation.SINGLESELECT,\n        noutsourcerequired: RealSampleTypeValue && RealSampleTypeValue.noutsourcerequired\n      };\n\n      if (inputData.nsampletypecode) {\n        // let obj = this.covertDatetoString(this.props.Login.masterData.RealFromDate, this.props.Login.masterData.RealToDate)\n        inputData['FromDate'] = obj.fromDate;\n        inputData['ToDate'] = obj.toDate;\n        let inputParam = {\n          masterData,\n          inputData,\n          searchSubSampleRef: this.searchSubSampleRef,\n          searchSampleRef: this.searchSampleRef,\n          searchTestRef: this.searchTestRef,\n          selectedFilter: this.state.selectedFilter\n        };\n        this.props.ReloadData(inputParam);\n      } else {\n        toast.info(this.props.intl.formatMessage({\n          id: \"IDS_PLSSELECTALLTHEVALUEINFILTER\"\n        }));\n      }\n    };\n\n    this.onFilterSubmit = () => {\n      const RealFromDate = rearrangeDateFormat(this.props.Login.userInfo, this.state.selectedFilter.fromdate || this.props.Login.masterData.FromDate);\n      const RealToDate = rearrangeDateFormat(this.props.Login.userInfo, this.state.selectedFilter.todate || this.props.Login.masterData.ToDate);\n      let RealSampleTypeValue = this.props.Login.masterData.SampleTypeValue && this.props.Login.masterData.SampleTypeValue;\n      let RealRegTypeValue = this.props.Login.masterData.RegTypeValue && this.props.Login.masterData.RegTypeValue;\n      let RealRegSubTypeValue = this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue;\n      let RealFilterStatusValue = this.props.Login.masterData.FilterStatusValue && this.props.Login.masterData.FilterStatusValue;\n      let RealDesignTemplateMappingValue = this.props.Login.masterData.DesignTemplateMappingValue && this.props.Login.masterData.DesignTemplateMappingValue; //let RealApprovalConfigVersionValue = this.props.Login.masterData.RealApprovalConfigVersionValue && this.props.Login.masterData.RealApprovalConfigVersionValue\n      //ALPD-1166\n\n      let RealApprovalConfigVersionValue = this.props.Login.masterData.ApprovalConfigVersionValue && this.props.Login.masterData.ApprovalConfigVersionValue;\n      let RealSampleTypeList = this.props.Login.masterData.SampleType || [];\n      let RealRegTypeList = this.props.Login.masterData.RegistrationType || [];\n      let RealRegSubTypeList = this.props.Login.masterData.RegistrationSubType || [];\n      let RealFilterStatuslist = this.props.Login.masterData.FilterStatus || [];\n      let RealDesignTemplateMappingList = this.props.Login.masterData.DesignTemplateMapping || [];\n      let RealApprovalConfigVersionList = this.props.Login.masterData.ApprovalConfigVersion || [];\n      let activeSampleTab = this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\";\n      let activeSubSampleTab = this.props.Login.activeSubSampleTab || \"IDS_SUBSAMPLEATTACHMENTS\";\n      let activeTestTab = this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\";\n      let masterData = { ...this.props.Login.masterData,\n        RealSampleTypeValue,\n        RealRegTypeValue,\n        RealRegSubTypeValue,\n        RealFilterStatusValue,\n        RealFromDate,\n        RealToDate,\n        RealDesignTemplateMappingValue,\n        RealApprovalConfigVersionValue,\n        RealSampleTypeList,\n        RealRegTypeList,\n        RealRegSubTypeList,\n        RealDesignTemplateMappingList,\n        RealApprovalConfigVersionList,\n        RealFilterStatuslist\n      };\n      let inputData = {\n        npreregno: \"\",\n        nsampletypecode: this.props.Login.masterData.SampleTypeValue && this.props.Login.masterData.SampleTypeValue.nsampletypecode,\n        nregtypecode: this.props.Login.masterData.RegTypeValue && this.props.Login.masterData.RegTypeValue.nregtypecode,\n        nregsubtypecode: this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nregsubtypecode,\n        nfilterstatus: this.props.Login.masterData.FilterStatusValue && this.props.Login.masterData.FilterStatusValue.ntransactionstatus,\n        userinfo: this.props.Login.userInfo,\n        activeSampleTab,\n        activeTestTab,\n        activeSubSampleTab,\n        nneedtemplatebasedflow: this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nneedtemplatebasedflow,\n        napproveconfversioncode: this.props.Login.masterData.ApprovalConfigVersion && this.props.Login.masterData.ApprovalConfigVersionValue.napproveconfversioncode,\n        ndesigntemplatemappingcode: this.props.Login.masterData.DesignTemplateMappingValue && this.props.Login.masterData.DesignTemplateMappingValue.ndesigntemplatemappingcode,\n        nneedtemplatebasedflow: this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nneedtemplatebasedflow,\n        nneedsubsample: this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nneedsubsample,\n        // checkBoxOperation: 3,\n        checkBoxOperation: checkBoxOperation.SINGLESELECT,\n        noutsourcerequired: RealSampleTypeValue && RealSampleTypeValue.noutsourcerequired\n      };\n\n      if (inputData.nsampletypecode) {\n        if (inputData.ndesigntemplatemappingcode) {\n          const obj = convertDateValuetoString(this.state.selectedFilter.fromdate || this.props.Login.masterData.FromDate, this.state.selectedFilter.todate || this.props.Login.masterData.ToDate, this.props.Login.userInfo);\n          inputData['FromDate'] = obj.fromDate;\n          inputData['ToDate'] = obj.toDate;\n          const selectedFilter = {};\n          selectedFilter[\"fromdate\"] = RealFromDate;\n          selectedFilter[\"todate\"] = RealToDate;\n          const inputParam = {\n            masterData,\n            inputData,\n            searchSubSampleRef: this.searchSubSampleRef,\n            searchSampleRef: this.searchSampleRef,\n            searchTestRef: this.searchTestRef,\n            selectedFilter\n          };\n          this.props.getRegistrationSample(inputParam);\n        } else {\n          toast.info(this.props.intl.formatMessage({\n            id: \"IDS_PLSSCONFIGREGISTRATIONTEMPLATE\"\n          }));\n        }\n      } else {\n        toast.info(this.props.intl.formatMessage({\n          id: \"IDS_PLSSELECTALLTHEVALUEINFILTER\"\n        }));\n      }\n    };\n\n    this.paneSizeChange = d => {\n      this.setState({// splitChangeWidthPercentage: d\n      });\n    };\n\n    this.verticalPaneSizeChange = val => {\n      if (this.state.enableAutoHeight) {\n        this.setState({\n          initialVerticalWidth: val - 150\n        });\n      }\n    };\n\n    this.changeSplitterOption = () => {\n      this.setState({\n        enableAutoHeight: !this.state.enableAutoHeight,\n        initialVerticalWidth: \"57vh\"\n      });\n    };\n\n    this.sideNavDetail = (screenName //, sampleGridSkip\n    ) => {\n      let testList = this.props.Login.masterData.RegistrationGetTest || [];\n      let {\n        testskip,\n        testtake\n      } = this.state;\n      testList = testList.slice(testskip, testskip + testtake);\n      let selectedTestList = getSameRecordFromTwoArrays(testList, this.props.Login.masterData.selectedTest, \"ntransactiontestcode\");\n      let ntransactiontestcode = this.props.Login.masterData.selectedTest ? this.props.Login.masterData.selectedTest.map(test => test.ntransactiontestcode).join(\",\") : \"-1\";\n      return screenName == \"IDS_PARAMETERRESULTS\" //&& this.props.Login.masterData.RealSampleTypeValue && this.props.Login.masterData.RealSampleTypeValue.nsampletypecode !== SampleType.CLINICALTYPE \n      ? /*#__PURE__*/React.createElement(RegistrationResultTab, {\n        userInfo: this.props.Login.userInfo,\n        genericLabel: this.props.Login.genericLabel,\n        masterData: this.props.Login.masterData,\n        inputParam: this.props.Login.inputParam,\n        dataState: this.state.resultDataState,\n        dataStateChange: this.testDataStateChange,\n        screenName: \"IDS_PARAMETERRESULTS\",\n        controlMap: this.state.controlMap,\n        userRoleControlRights: this.state.userRoleControlRights,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 469,\n          columnNumber: 18\n        }\n      }) : screenName == \"IDS_ATTACHMENTS\" ? /*#__PURE__*/React.createElement(CustomTabs, {\n        activeKey: this.props.Login.activeTestTab || \"IDS_TESTATTACHMENTS\",\n        tabDetail: this.attachmentTabDetail(),\n        destroyInactiveTabPane: true,\n        onTabChange: this.onTabChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 482,\n          columnNumber: 21\n        }\n      }) : screenName == \"IDS_COMMENTS\" ? /*#__PURE__*/React.createElement(CustomTabs, {\n        activeKey: this.props.Login.activeTestTab || \"IDS_TESTCOMMENTS\",\n        tabDetail: this.commentTabDetail(),\n        destroyInactiveTabPane: true,\n        onTabChange: this.onTabChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 484,\n          columnNumber: 25\n        }\n      }) : screenName == \"IDS_SAMPLEDETAILS\" ? this.props.Login.masterData.selectedSample && this.props.Login.masterData.selectedSample.length === 1 ? /*#__PURE__*/React.createElement(SampleInfoView, {\n        data: this.props.Login.masterData.selectedSample && this.props.Login.masterData.selectedSample.length > 0 ? this.props.Login.masterData.selectedSample[this.props.Login.masterData.selectedSample.length - 1] : {},\n        SingleItem: this.props.Login.masterData.selectedSample && this.props.Login.masterData.selectedSample ? this.state.SingleItem : [],\n        screenName: \"IDS_SAMPLEINFO\",\n        userInfo: this.props.Login.userInfo,\n        viewFile: this.viewFile,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 487,\n          columnNumber: 33\n        }\n      }) : /*#__PURE__*/React.createElement(SampleGridTab, {\n        userInfo: this.props.Login.masterData.userInfo || {},\n        GridData: this.props.Login.masterData.selectedSample || [],\n        masterData: this.props.Login.masterData,\n        inputParam: this.props.Login.inputParam //dataState={sampleGridSkip === 0 ? {...this.state.sampleGridDataState, skip:0} : this.state.sampleGridDataState}\n        ,\n        dataState: this.state.sampleGridDataState,\n        dataStateChange: this.sampleInfoDataStateChange,\n        extractedColumnList: this.gridfillingColumn(this.state.DynamicGridItem) || [],\n        detailedFieldList: this.gridfillingColumn(this.state.DynamicGridMoreField) || [],\n        primaryKeyField: \"npreregno\",\n        expandField: \"expanded\",\n        screenName: \"IDS_SAMPLEINFO\",\n        viewFile: this.viewFile //jsonField={\"jsondata\"}\n        ,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 498,\n          columnNumber: 33\n        }\n      }) : screenName == \"IDS_OUTSOURCEDETAILS\" ? /*#__PURE__*/React.createElement(CustomTabs, {\n        activeKey: this.props.Login.activeTestTab || \"IDS_OUTSOURCE\",\n        tabDetail: this.outSourceTabDetail(),\n        destroyInactiveTabPane: true,\n        onTabChange: this.onTabChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 516,\n          columnNumber: 33\n        }\n      }) : \"\";\n    };\n\n    this.requiredExternalOrderAttachment = [{\n      \"idsName\": \"IDS_ARNO\",\n      \"dataField\": \"sarno\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_RELEASENO\",\n      \"dataField\": \"sreleaseno\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_VERSIONNO\",\n      \"dataField\": \"nversionno\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_EXTERNALORDERID\",\n      \"dataField\": \"sexternalorderid\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_REPORTEDSITE\",\n      \"dataField\": \"ssitename\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_REPORTEDDATE\",\n      \"dataField\": \"sreleasedate\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_REPORTEDUSER\",\n      \"dataField\": \"susername\",\n      \"width\": \"200px\"\n    }];\n    this.requiredOutsourceDetails = [{\n      \"idsName\": \"IDS_ARNO\",\n      \"dataField\": \"sarno\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_SAMPLEARNO\",\n      \"dataField\": \"ssamplearno\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_SAMPLEID\",\n      \"dataField\": \"ssampleid\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_TOSITE\",\n      \"dataField\": \"ssourcesitename\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_TESTSYNONYM\",\n      \"dataField\": \"stestsynonym\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_OUTSOURCEDATE\",\n      \"dataField\": \"soutsourcedate\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_REMARKS\",\n      \"dataField\": \"sremarks\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_SHIPMENTTRACKING\",\n      \"dataField\": \"sshipmenttracking\",\n      \"width\": \"200px\"\n    }];\n\n    this.attachmentTabDetail = () => {\n      const attachmentTabMap = new Map();\n      let testList = this.props.Login.masterData.RegistrationGetTest || [];\n      let {\n        testskip,\n        testtake,\n        subsampleskip,\n        subsampletake,\n        skip,\n        take\n      } = this.state;\n      testList = testList.slice(testskip, testskip + testtake);\n      let subsampleList = this.props.Login.masterData.RegistrationGetSubSample || [];\n      subsampleList = subsampleList.slice(subsampleskip, subsampleskip + subsampletake);\n      let sampleList = this.props.Login.masterData.RegistrationGetSample || [];\n      sampleList = sampleList.slice(skip, skip + take);\n      attachmentTabMap.set(\"IDS_TESTATTACHMENTS\", /*#__PURE__*/React.createElement(Attachments, {\n        screenName: \"IDS_TESTATTACHMENTS\",\n        tabSequence: SideBarSeqno.TEST,\n        selectedMaster: \"selectedTest\",\n        onSaveClick: this.onAttachmentSaveClick,\n        controlMap: this.state.controlMap,\n        userRoleControlRights: this.state.userRoleControlRights,\n        masterList: getSameRecordFromTwoArrays(testList || [], this.props.Login.masterData.selectedTest, \"ntransactiontestcode\"),\n        masterAlertStatus: \"IDS_SELECTTESTTOADDATTACHEMENT\",\n        attachments: this.props.Login.masterData.RegistrationTestAttachment || [],\n        deleteRecord: this.props.deleteAttachment,\n        fetchRecord: this.props.getAttachmentCombo,\n        addName: \"AddTestAttachment\",\n        editName: \"EditTestAttachment\",\n        deleteName: \"DeleteTestAttachment\",\n        viewName: \"ViewTestAttachment\",\n        methodUrl: \"TestAttachment\",\n        dataState: this.state.testAttachmentDataState,\n        dataStateChange: this.testDataStateChange //added by neeraj for ALPD-1311\n        ,\n        nsubsampleneed: this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample,\n        userInfo: this.props.Login.userInfo,\n        deleteParam: {\n          methodUrl: \"TestAttachment\",\n          ntransactiontestcode: this.props.Login.masterData.selectedTest ? this.props.Login.masterData.selectedTest.map(test => test.ntransactiontestcode).join(\",\") : \"-1\",\n          userInfo: this.props.Login.userInfo,\n          masterData: this.props.Login.masterData,\n          esignRights: this.props.Login.userRoleControlRights,\n          screenName: \"IDS_TESTATTACHMENTS\"\n        },\n        editParam: {\n          methodUrl: \"TestAttachment\",\n          ntransactiontestcode: this.props.Login.masterData.selectedTest ? this.props.Login.masterData.selectedTest.map(test => test.ntransactiontestcode).join(\",\") : \"-1\",\n          userInfo: this.props.Login.userInfo,\n          masterData: this.props.Login.masterData,\n          esignRights: this.props.Login.userRoleControlRights,\n          screenName: \"IDS_TESTATTACHMENTS\",\n          masterList: this.props.Login.masterData.selectedTest\n        },\n        selectedListName: \"IDS_TESTS\",\n        displayName: \"stestsynonym\",\n        isneedHeader: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 552,\n          columnNumber: 53\n        }\n      }));\n      this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample && attachmentTabMap.set(\"IDS_SUBSAMPLEATTACHMENTS\", /*#__PURE__*/React.createElement(Attachments, {\n        screenName: \"IDS_SUBSAMPLEATTACHMENTS\",\n        tabSequence: SideBarSeqno.SUBSAMPLE,\n        onSaveClick: this.onAttachmentSaveClick,\n        selectedMaster: \"selectedSubSample\",\n        controlMap: this.state.controlMap,\n        userRoleControlRights: this.state.userRoleControlRights,\n        attachments: this.props.Login.masterData.RegistrationSampleAttachment || [],\n        deleteRecord: this.props.deleteAttachment,\n        masterList: getSameRecordFromTwoArrays(subsampleList || [], this.props.Login.masterData.selectedSubSample, \"ntransactionsamplecode\"),\n        masterAlertStatus: \"IDS_SELECTSUBSAMPLETOADDATTACHMENT\",\n        fetchRecord: this.props.getAttachmentCombo,\n        viewFile: this.props.viewAttachment,\n        addName: \"AddSubSampleAttachment\",\n        editName: \"EditSubSampleAttachment\",\n        deleteName: \"DeleteSubSampleAttachment\",\n        viewName: \"ViewSubSampleAttachment\",\n        methodUrl: \"SubSampleAttachment\",\n        skip: this.props.Login.inputParam ? this.props.Login.inputParam.attachmentskip || 0 : 0,\n        take: this.props.Login.inputParam ? this.props.Login.inputParam.attachmenttake || 10 : this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5,\n        userInfo: this.props.Login.userInfo,\n        deleteParam: {\n          methodUrl: \"SubSampleAttachment\",\n          ntransactionsamplecode: this.props.Login.masterData.selectedSubSample ? this.props.Login.masterData.selectedSubSample.map(sample => sample.ntransactionsamplecode).join(\",\") : '-1',\n          userInfo: this.props.Login.userInfo,\n          masterData: this.props.Login.masterData,\n          esignRights: this.props.Login.userRoleControlRights\n        },\n        editParam: {\n          methodUrl: \"SubSampleAttachment\",\n          ntransactionsamplecode: this.props.Login.masterData.selectedSubSample ? this.props.Login.masterData.selectedSubSample.map(sample => sample.ntransactionsamplecode).join(\",\") : '-1',\n          userInfo: this.props.Login.userInfo,\n          masterData: this.props.Login.masterData,\n          esignRights: this.props.Login.userRoleControlRights,\n          masterList: this.props.Login.masterData.RegistrationGetSubSample || []\n        },\n        selectedListName: \"IDS_SUBSAMPLE\",\n        displayName: \"ssamplearno\",\n        isneedHeader: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 599,\n          columnNumber: 62\n        }\n      }));\n      attachmentTabMap.set(\"IDS_SAMPLEATTACHMENTS\", /*#__PURE__*/React.createElement(Attachments, {\n        screenName: \"IDS_SAMPLEATTACHMENTS\",\n        tabSequence: SideBarSeqno.SAMPLE,\n        onSaveClick: this.onAttachmentSaveClick,\n        selectedMaster: \"selectedSample\",\n        controlMap: this.state.controlMap,\n        userRoleControlRights: this.state.userRoleControlRights,\n        attachments: this.props.Login.masterData.RegistrationAttachment || [],\n        deleteRecord: this.props.deleteAttachment,\n        masterList: getSameRecordFromTwoArrays(sampleList || [], this.props.Login.masterData.selectedSample, \"npreregno\"),\n        masterAlertStatus: \"IDS_SELECTSAMPLETOADDATTACHMENT\",\n        fetchRecord: this.props.getAttachmentCombo,\n        viewFile: this.props.viewAttachment,\n        addName: \"AddSampleAttachment\",\n        editName: \"EditSampleAttachment\",\n        deleteName: \"DeleteSampleAttachment\",\n        viewName: \"ViewSampleAttachment\",\n        methodUrl: \"SampleAttachment\",\n        userInfo: this.props.Login.userInfo,\n        skip: this.props.Login.inputParam ? this.props.Login.inputParam.attachmentskip || 0 : 0,\n        take: this.props.Login.inputParam ? this.props.Login.inputParam.attachmenttake || 10 : this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5,\n        deleteParam: {\n          methodUrl: \"SampleAttachment\",\n          npreregno: this.props.Login.masterData.selectedSample ? this.props.Login.masterData.selectedSample.map(sample => sample.npreregno).join(\",\") : \"-1\",\n          userInfo: this.props.Login.userInfo,\n          masterData: this.props.Login.masterData,\n          esignRights: this.props.Login.userRoleControlRights\n        },\n        editParam: {\n          methodUrl: \"SampleAttachment\",\n          npreregno: this.props.Login.masterData.selectedSample ? this.props.Login.masterData.selectedSample.map(sample => sample.npreregno).join(\",\") : \"-1\",\n          userInfo: this.props.Login.userInfo,\n          masterData: this.props.Login.masterData,\n          esignRights: this.props.Login.userRoleControlRights,\n          masterList: this.props.Login.masterData.RegistrationGetSample || []\n        },\n        selectedListName: \"IDS_SAMPLE\",\n        displayName: \"sarno\",\n        isneedHeader: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 644,\n          columnNumber: 13\n        }\n      }));\n      return attachmentTabMap;\n    };\n\n    this.commentTabDetail = () => {\n      const commentTabMap = new Map();\n      let testList = this.props.Login.masterData.RegistrationGetTest || [];\n      let {\n        testskip,\n        testtake\n      } = this.state;\n      testList = testList.slice(testskip, testskip + testtake);\n      let selectedTestList = getSameRecordFromTwoArrays(testList, this.props.Login.masterData.selectedTest, \"ntransactiontestcode\");\n      let ntransactiontestcode = this.props.Login.masterData.selectedTest ? this.props.Login.masterData.selectedTest.map(test => test.ntransactiontestcode).join(\",\") : \"-1\";\n      let sampleList = this.props.Login.masterData.RegistrationGetSample || [];\n      let npreregno = this.props.Login.masterData.selectedSample ? this.props.Login.masterData.selectedSample.map(sample => sample.npreregno).join(\",\") : \"-1\";\n      let {\n        skip,\n        take\n      } = this.state;\n      sampleList = sampleList.slice(skip, skip + take);\n      let selectedSampleList = getSameRecordFromTwoArrays(sampleList, this.props.Login.masterData.selectedSample, \"npreregno\");\n      let ntransactionsamplecode = this.props.Login.masterData.selectedSubSample ? this.props.Login.masterData.selectedSubSample.map(sample => sample.ntransactionsamplecode).join(\",\") : \"-1\";\n      let subsampleList = this.props.Login.masterData.RegistrationGetSubSample || [];\n      let {\n        subsampleskip,\n        subsampletake\n      } = this.state;\n      subsampleList = subsampleList.slice(subsampleskip, subsampleskip + subsampletake);\n      let selectedSubSampleList = getSameRecordFromTwoArrays(subsampleList, this.props.Login.masterData.selectedSubSample, \"ntransactionsamplecode\");\n      commentTabMap.set(\"IDS_TESTCOMMENTS\", /*#__PURE__*/React.createElement(Comments, {\n        screenName: \"IDS_TESTCOMMENTS\",\n        masterData: this.props.Login.masterData,\n        tabSequence: SideBarSeqno.TEST,\n        onSaveClick: this.onCommentsSaveClick,\n        selectedMaster: \"selectedTest\",\n        controlMap: this.state.controlMap,\n        userRoleControlRights: this.state.userRoleControlRights,\n        Comments: this.props.Login.masterData.RegistrationTestComment || [],\n        fetchRecord: this.props.getCommentsCombo,\n        addName: \"AddTestComment\",\n        editName: \"EditTestComment\",\n        deleteName: \"DeleteTestComment\",\n        methodUrl: \"TestComment\",\n        isTestComment: false,\n        masterList: getSameRecordFromTwoArrays(testList, this.props.Login.masterData.selectedTest, \"ntransactiontestcode\"),\n        masterAlertStatus: \"IDS_SELECTTESTTOADDCOMMENTS\",\n        primaryKeyField: \"ntestcommentcode\",\n        dataState: this.state.testCommentDataState,\n        dataStateChange: this.testDataStateChange,\n        deleteParam: {\n          methodUrl: \"TestComment\",\n          ntransactiontestcode: this.props.Login.masterData.selectedTest ? this.props.Login.masterData.selectedTest.map(test => test.ntransactiontestcode).join(\",\") : \"-1\",\n          userInfo: this.props.Login.userInfo,\n          masterData: this.props.Login.masterData,\n          esignRights: this.props.Login.userRoleControlRights,\n          screenName: \"IDS_TESTCOMMENTS\"\n        },\n        editParam: {\n          methodUrl: \"TestComment\",\n          ntransactiontestcode: this.props.Login.masterData.selectedTest ? this.props.Login.masterData.selectedTest.map(test => test.ntransactiontestcode).join(\",\") : \"-1\",\n          userInfo: this.props.Login.userInfo,\n          masterData: this.props.Login.masterData,\n          esignRights: this.props.Login.userRoleControlRights,\n          screenName: \"IDS_TESTCOMMENTS\",\n          operation: \"update\",\n          masterList: this.props.Login.masterData.RegistrationGetSample || [],\n          ncontrolCode: this.state.controlMap.has(\"EditTestComment\") && this.state.controlMap.get(\"EditTestComment\").ncontrolcode\n        },\n        selectedListName: \"IDS_TESTS\",\n        displayName: \"stestsynonym\",\n        selectedId: this.props.Login.selectedId || null,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 710,\n          columnNumber: 47\n        }\n      }));\n      this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample && commentTabMap.set(\"IDS_SUBSAMPLECOMMENTS\", /*#__PURE__*/React.createElement(Comments, {\n        screenName: \"IDS_SUBSAMPLECOMMENTS\",\n        masterData: this.props.Login.masterData,\n        tabSequence: SideBarSeqno.SUBSAMPLE,\n        onSaveClick: this.onCommentsSaveClick,\n        selectedMaster: \"selectedSubSample\",\n        controlMap: this.state.controlMap,\n        userRoleControlRights: this.state.userRoleControlRights,\n        Comments: this.props.Login.masterData.RegistrationSampleComment || [],\n        fetchRecord: this.props.getCommentsCombo,\n        addName: \"AddSubSampleComment\",\n        editName: \"EditSubSampleComment\",\n        deleteName: \"DeleteSubSampleComment\",\n        methodUrl: \"SubSampleComment\",\n        isTestComment: false,\n        masterList: selectedSubSampleList,\n        masterAlertStatus: \"IDS_SELECTSUBSAMPLETOADDCOMMENTS\",\n        primaryKeyField: \"nsamplecommentcode\",\n        dataState: this.state.subSampleCommentDataState,\n        dataStateChange: this.subSampledataStateChange,\n        deleteParam: {\n          methodUrl: \"SubSampleComment\",\n          ntransactionsamplecode,\n          userInfo: this.props.Login.userInfo,\n          masterData: this.props.Login.masterData,\n          esignRights: this.props.Login.userRoleControlRights,\n          screenName: \"IDS_SUBSAMPLECOMMENTS\"\n        },\n        editParam: {\n          methodUrl: \"SubSampleComment\",\n          ntransactionsamplecode,\n          userInfo: this.props.Login.userInfo,\n          masterData: this.props.Login.masterData,\n          esignRights: this.props.Login.userRoleControlRights,\n          screenName: \"IDS_SUBSAMPLECOMMENTS\",\n          operation: \"update\",\n          masterList: this.props.Login.masterData.RegistrationGetSubSample || [],\n          ncontrolCode: this.state.controlMap.has(\"EditSubSampleComment\") && this.state.controlMap.get(\"EditSubSampleComment\").ncontrolcode\n        },\n        selectedListName: \"IDS_SUBSAMPLES\",\n        displayName: \"ssamplearno\",\n        selectedId: this.props.Login.selectedId || null,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 757,\n          columnNumber: 56\n        }\n      }));\n      commentTabMap.set(\"IDS_SAMPLECOMMENTS\", /*#__PURE__*/React.createElement(Comments, {\n        screenName: \"IDS_SAMPLECOMMENTS\",\n        masterData: this.props.Login.masterData,\n        tabSequence: SideBarSeqno.SAMPLE,\n        onSaveClick: this.onCommentsSaveClick,\n        selectedMaster: \"selectedSample\",\n        controlMap: this.state.controlMap,\n        userRoleControlRights: this.state.userRoleControlRights,\n        Comments: this.props.Login.masterData.RegistrationComment || [],\n        fetchRecord: this.props.getCommentsCombo,\n        addName: \"AddSampleComment\",\n        editName: \"EditSampleComment\",\n        deleteName: \"DeleteSampleComment\",\n        methodUrl: \"SampleComment\",\n        isTestComment: false,\n        masterList: selectedSampleList,\n        masterAlertStatus: \"IDS_SELECTSAMPLETOADDCOMMENTS\",\n        primaryKeyField: \"nregcommentcode\",\n        dataState: this.state.sampleCommentDataState,\n        dataStateChange: this.dataStateChange,\n        deleteParam: {\n          methodUrl: \"SampleComment\",\n          npreregno,\n          userInfo: this.props.Login.userInfo,\n          masterData: this.props.Login.masterData,\n          esignRights: this.props.Login.userRoleControlRights,\n          screenName: \"IDS_SAMPLECOMMENTS\"\n        },\n        editParam: {\n          methodUrl: \"SampleComment\",\n          npreregno,\n          userInfo: this.props.Login.userInfo,\n          masterData: this.props.Login.masterData,\n          esignRights: this.props.Login.userRoleControlRights,\n          screenName: \"IDS_SAMPLECOMMENTS\",\n          operation: \"update\",\n          masterList: this.props.Login.masterData.RegistrationGetSample || [],\n          ncontrolCode: this.state.controlMap.has(\"EditSampleComment\") && this.state.controlMap.get(\"EditSampleComment\").ncontrolcode\n        },\n        selectedListName: \"IDS_SAMPLES\",\n        displayName: \"sarno\",\n        selectedId: this.props.Login.selectedId || null,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 803,\n          columnNumber: 49\n        }\n      }));\n      return commentTabMap;\n    };\n\n    this.outSourceTabDetail = () => {\n      const outSourceTabMap = new Map();\n      outSourceTabMap.set(\"IDS_OUTSOURCEDETAILS\", /*#__PURE__*/React.createElement(DataGrid, {\n        primaryKeyField: \"noutsourcedetailcode\",\n        screenName: \"IDS_OUTSOURCEDETAILS\",\n        tabSequence: SideBarSeqno.SUBSAMPLE,\n        data: this.props.Login.masterData.OutsourceDetailsList || [],\n        dataResult: process(this.props.Login.masterData.OutsourceDetailsList && this.props.Login.masterData.OutsourceDetailsList || [], this.state.outsourceDetailsDataState),\n        dataState: this.state.outsourceDetailsDataState,\n        isExportExcelRequired: false,\n        controlMap: this.state.controlMap,\n        userRoleControlRights: this.state.userRoleControlRights,\n        extractedColumnList: this.requiredOutsourceDetails,\n        pageable: true,\n        dataStateChange: this.outsourceDataStateChange,\n        scrollable: 'scrollable',\n        gridHeight: '350px',\n        isActionRequired: false,\n        selectedId: null,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 855,\n          columnNumber: 53\n        }\n      }));\n      outSourceTabMap.set(\"IDS_EXTERNALORDERREPORTS\", /*#__PURE__*/React.createElement(DataGrid, {\n        primaryKeyField: \"nreleaseoutsourceattachcode\",\n        screenName: \"IDS_EXTERNALORDERREPORTS\",\n        tabSequence: SideBarSeqno.SAMPLE,\n        data: this.props.Login.masterData.ExternalOrderAttachmentList || [],\n        dataResult: process(this.props.Login.masterData.ExternalOrderAttachmentList && this.props.Login.masterData.ExternalOrderAttachmentList || [], this.state.externalOrderAttachmentDataState),\n        dataState: this.state.externalOrderAttachmentDataState,\n        isExportExcelRequired: false,\n        controlMap: this.state.controlMap,\n        userRoleControlRights: this.state.userRoleControlRights,\n        extractedColumnList: this.requiredExternalOrderAttachment,\n        selectedId: null,\n        pageable: true,\n        dataStateChange: this.outsourceDataStateChange,\n        scrollable: 'scrollable',\n        gridHeight: '350px',\n        isActionRequired: true,\n        methodUrl: 'ExternalOrderAttachment',\n        viewDownloadFile: this.viewExternalOrderAttachmentFile,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 874,\n          columnNumber: 57\n        }\n      }));\n      return outSourceTabMap;\n    };\n\n    this.onTabChange = tabProps => {\n      const activeTestTab = tabProps.screenName;\n      const tabseqno = tabProps.tabSequence;\n\n      if (tabseqno === SideBarSeqno.TEST) {\n        let inputData = {\n          masterData: this.props.Login.masterData,\n          selectedTest: this.props.Login.masterData.selectedTest,\n          ntransactiontestcode: this.props.Login.masterData.selectedTest ? String(this.props.Login.masterData.selectedTest.map(item => item.ntransactiontestcode).join(\",\")) : \"-1\",\n          npreregno: this.props.Login.masterData.selectedSample ? this.props.Login.masterData.selectedSample.map(item => item.npreregno).join(\",\") : \"-1\",\n          userinfo: this.props.Login.userInfo,\n          activeTestTab,\n          screenName: activeTestTab,\n          resultDataState: this.state.resultDataState,\n          testCommentDataState: this.state.testCommentDataState,\n          testAttachmentDataState: this.state.testAttachmentDataState,\n          activeTabIndex: tabProps.activeTabIndex ? tabProps.activeTabIndex : this.state.activeTabIndex,\n          activeTabId: tabProps.activeTabId ? tabProps.activeTabId : this.state.activeTabId\n        };\n        this.props.getTestChildTabDetailRegistration(inputData, true); // } \n        // else {\n        //     toast.info(this.props.intl.formatMessage({ id: \"IDS_SELECTTEST\" }))\n        // }\n      } else if (tabseqno === SideBarSeqno.SUBSAMPLE) {\n        if (activeTestTab !== this.props.Login.activeTestTab) {\n          let inputData = {\n            masterData: this.props.Login.masterData,\n            selectedSubSample: this.props.Login.masterData.selectedSubSample,\n            ntransactionsamplecode: this.props.Login.masterData.selectedSubSample ? this.props.Login.masterData.selectedSubSample.map(item => item.ntransactionsamplecode).join(\",\") : \"-1\",\n            userinfo: this.props.Login.userInfo,\n            screenName: activeTestTab,\n            activeSubSampleTab: activeTestTab,\n            subSampleCommentDataState: this.state.subSampleCommentDataState,\n            subSampleAttachmentDataState: this.state.subSampleAttachmentDataState,\n            npreregno: this.props.Login.masterData.selectedSample && this.props.Login.masterData.selectedSample.map(item => item.npreregno).join(\",\"),\n            activeTabIndex: tabProps.activeTabIndex ? tabProps.activeTabIndex : this.state.activeTabIndex\n          };\n          this.props.getSubSampleChildTabDetail(inputData);\n        }\n      } else {\n        if (activeTestTab !== this.props.Login.activeTestTab) {\n          let inputData = {\n            masterData: this.props.Login.masterData,\n            selectedSample: this.props.Login.masterData.selectedSample,\n            npreregno: this.props.Login.masterData.selectedSample ? this.props.Login.masterData.selectedSample.map(item => item.npreregno).join(\",\") : \"-1\",\n            userinfo: this.props.Login.userInfo,\n            screenName: activeTestTab,\n            activeSampleTab: activeTestTab,\n            OrderCodeData: this.props.Login.masterData.selectedSample && this.props.Login.masterData.selectedSample.map(item => item.hasOwnProperty(\"OrderCodeData\") ? item.OrderCodeData : -1).join(\",\"),\n            activeTabIndex: tabProps.activeTabIndex ? tabProps.activeTabIndex : this.state.activeTabIndex\n          };\n          this.props.getSampleChildTabDetail(inputData);\n        }\n      }\n    };\n\n    this.changePropertyView = (index, event, status) => {\n      let id = false;\n\n      if (event && event.ntransactiontestcode) {\n        id = event.ntransactiontestcode;\n      } else if (event && event.ntransactionsamplecode) {\n        id = event.ntransactionsamplecode;\n      } else if (event && event.npreregno) {\n        id = event.npreregno;\n      }\n\n      let activeTabIndex;\n      let activeTabId;\n\n      if (window.innerWidth > 992 && event && this.state.enableAutoClick || !event) {\n        activeTabIndex = this.state.activeTabIndex !== index ? index : id ? index : false;\n      }\n\n      if (status !== \"click\") {\n        if (index === SideBarTabIndex.RESULT) {\n          const tabProps = {\n            tabSequence: SideBarSeqno.TEST,\n            screenName: \"IDS_PARAMETERRESULTS\",\n            activeTabIndex,\n            activeTabId\n          };\n          this.onTabChange(tabProps);\n        } else if (index === SideBarTabIndex.ATTACHMENTS) {\n          const tabProps = {\n            tabSequence: SideBarSeqno.TEST,\n            screenName: \"IDS_TESTATTACHMENTS\",\n            activeTabIndex,\n            activeTabId\n          };\n          this.onTabChange(tabProps);\n        } else if (index === SideBarTabIndex.COMMENTS) {\n          const tabProps = {\n            tabSequence: SideBarSeqno.TEST,\n            screenName: \"IDS_TESTCOMMENTS\",\n            activeTabIndex,\n            activeTabId\n          };\n          this.onTabChange(tabProps);\n        } else if (index === SideBarTabIndex.OUTSOURCE) {\n          const tabProps = {\n            tabSequence: SideBarSeqno.SUBSAMPLE,\n            screenName: \"IDS_OUTSOURCEDETAILS\",\n            activeTabIndex,\n            activeTabId\n          };\n          this.onTabChange(tabProps);\n        } else {\n          if (window.innerWidth > 992 && event && this.state.enableAutoClick || !event) {\n            const updateInfo = {\n              typeName: DEFAULT_RETURN,\n              data: {\n                activeTabIndex: this.state.activeTabIndex !== index ? index : id ? index : false,\n                activeTabId: id\n              }\n            };\n            this.props.updateStore(updateInfo);\n          }\n        }\n      } else {// if (window.innerWidth > 992 && event && this.state.enableAutoClick || !event) {\n        //     const updateInfo = {\n        //         typeName: DEFAULT_RETURN,\n        //         data: {\n        //             activeTabIndex :activeTabIndex\n        //            // activeTabId :  id\n        //         }\n        //     }\n        //     this.props.updateStore(updateInfo);\n        //     }\n      }\n    };\n\n    this.onInputSwitchOnChange = event => {\n      if (event.target.name === \"PopupNav\") {\n        this.setState({\n          enablePropertyPopup: !this.state.enablePropertyPopup\n        });\n      } else {\n        this.setState({\n          enableAutoClick: !this.state.enableAutoClick\n        });\n      }\n    };\n\n    this.changePropertyViewClose = id => {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          activeTabIndex: undefined,\n          activeTestTab: undefined,\n          activeTabId: id\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onOrderSearch = orderValue => {\n      let selectedRecord = this.state.selectedRecord;\n\n      if (selectedRecord.nexternalordertypecode) {\n        const inputData = {\n          sexternalorderid: orderValue,\n          userinfo: this.props.Login.userInfo,\n          masterData: this.props.Login.masterData,\n          selectedRecord: selectedRecord\n        };\n        this.props.getOrderDetails(inputData);\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTEXTERNALORDERTYPE\"\n        }));\n      }\n    };\n\n    this.headerSelectionChange = event => {\n      const checked = event.syntheticEvent.target.checked;\n      let orderList = this.state.sectedRecord.orders || [];\n      let selectedRecord = this.state.sectedRecord;\n      let addedOrderSampleList = [];\n\n      if (checked) {\n        const data = event.target.props.data.map(item => {\n          if (orderList.findIndex(x => x.nexternalordersamplecode === item.nexternalordersamplecode) === -1) {\n            orderList.push({ ...item,\n              selected: false\n            });\n            item.selected = checked;\n            let newItem = JSON.parse(JSON.stringify(item));\n            delete newItem['selected']; // newItem[\"jsondata\"]={};\n            // newItem[\"jsonuidata\"]={};\n            // newItem[\"jsondata\"]['orderList'] = item\n            // newItem[\"jsonuidata\"]['orderList'] = item    \n\n            addedOrderSampleList.push(newItem);\n            return item;\n          } else {\n            let olditem = JSON.parse(JSON.stringify(orderList[orderList.findIndex(x => x.nexternalordersamplecode === item.nexternalordersamplecode)]));\n            olditem.selected = checked;\n            let newItem = JSON.parse(JSON.stringify(olditem));\n            newItem.selected = false; // newItem[\"jsondata\"]={};\n            // newItem[\"jsonuidata\"]={};\n            // newItem[\"jsondata\"]['orderList'] = olditem\n            // newItem[\"jsonuidata\"]['orderList'] = olditem\n\n            addedOrderSampleList.push(newItem);\n            return olditem;\n          }\n        });\n        selectedRecord['orders'] = data;\n        this.setState({\n          selectedRecord,\n          addedOrderSampleList: addedOrderSampleList,\n          orderList,\n          addSelectAll: checked,\n          deleteSelectAll: false\n        });\n      } else {\n        let orderListData = this.state.orders || [];\n        let deletedListdData = this.state.orders || [];\n        const data = this.state.orders.map(item => {\n          orderListData = orderListData.filter(item1 => item1.nexternalordersamplecode !== item.nexternalordersamplecode);\n          deletedListdData = deletedListdData.filter(item1 => item1.nexternalordersamplecode !== item.nexternalordersamplecode);\n          item.selected = checked;\n          return item;\n        });\n        this.setState({\n          samples: data,\n          addedOrderSampleList: orderListData,\n          deletedList: deletedListdData,\n          addSelectAll: checked,\n          deleteSelectAll: false\n        });\n      }\n    };\n\n    this.selectionChange = event => {\n      let addedOrderSampleList = this.state.addedOrderSampleList || [];\n      let orders = this.state.selectedRecord.orders || [];\n      let selectedRecord = { ...this.state.selectedRecord\n      };\n      const orderList = this.state.selectedRecord.orders.map(item => {\n        if (item.nexternalordersamplecode === event.dataItem.nexternalordersamplecode) {\n          item.selected = !event.dataItem.selected;\n\n          if (item.selected) {\n            const newItem = JSON.parse(JSON.stringify(item)); //newItem.selected = false;\n\n            delete newItem['selected']; // newItem[\"jsondata\"]={};\n            // newItem[\"jsonuidata\"]={};\n            // newItem[\"jsondata\"]['orderList'] = item\n            // newItem[\"jsonuidata\"]['orderList'] = item\n\n            addedOrderSampleList.push(newItem);\n          } else {\n            addedOrderSampleList = addedOrderSampleList.filter(item1 => item1.nexternalordersamplecode !== item.nexternalordersamplecode);\n          }\n        }\n\n        return item;\n      });\n      selectedRecord['orders'] = orders;\n      this.setState({\n        orderList,\n        addedOrderSampleList,\n        selectedRecord,\n        initialList: addedOrderSampleList,\n        addSelectAll: this.valiateCheckAll(orderList),\n        deleteSelectAll: this.valiateCheckAll(orderList)\n      });\n    };\n\n    this.onNumericInputChangeSample = (value, name) => {\n      const selectedRecord = this.state.selectedRecord || {};\n      selectedRecord[name] = value; //  }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onComboChangeMaster = (comboData, fieldName, item) => {\n      const selectedMaster = this.state.selectedMaster || [];\n      const masterIndex = this.props.Login.masterIndex;\n      selectedMaster[masterIndex] = selectedMaster[masterIndex] && { ...selectedMaster[masterIndex]\n      } || {};\n\n      if (comboData !== null) {\n        if (this.props.Login.selectedControl[masterIndex].table.item.nformcode === 137) {\n          selectedMaster[masterIndex][item.tableDataField] = comboData.value;\n        } else if (item.foreignDataField) {\n          selectedMaster[masterIndex][item.foreignDataField] = comboData.value;\n        }\n      }\n\n      selectedMaster[masterIndex][fieldName] = comboData;\n\n      if (item.childIndex !== undefined) {\n        this.props.getChildComboMaster(selectedMaster, fieldName, item, this.props.Login.selectedControl, this.props.Login.masterfieldList, this.props.Login.masterdataList, this.props.Login.userInfo, masterIndex);\n      } else {\n        this.setState({\n          selectedMaster\n        });\n      }\n    };\n\n    this.onSaveOutSourceTest = () => {\n      const selectedRecord = this.state.selectedRecord || {};\n      const outSourceSiteData = this.props.Login.outSourceSiteData;\n      const destinationsitecode = selectedRecord[\"outsourcesite\"].value;\n      this.props.outsourceTest({ ...outSourceSiteData,\n        destinationsitecode\n      }, this.props.Login.masterData);\n    };\n\n    this.onSaveModalClick = () => {\n      const selectedRecord = this.state.selectedRecord || {};\n      let Map = {};\n      Map[\"npreregno\"] = this.props.Login.orderDetails && parseInt(this.props.Login.orderDetails.subSample.npreregno) || -1;\n      Map[\"ntransactionsamplecode\"] = this.props.Login.orderDetails && parseInt(this.props.Login.orderDetails.subSample.ntransactionsamplecode) || -1;\n      Map[\"nexternalordersamplecode\"] = selectedRecord.nexternalordercode && selectedRecord.nexternalordercode.value || -1;\n      Map[\"nexternalordercode\"] = selectedRecord.nexternalordercode && selectedRecord.nexternalordercode.item.nexternalordercode || -1;\n      Map[\"sexternalOrderID\"] = selectedRecord.nexternalordercode && selectedRecord.nexternalordercode.item.sexternalorderid;\n      Map[\"sexternalSampleID\"] = selectedRecord.nexternalordercode && selectedRecord.nexternalordercode.label;\n      Map[\"manualOrderData\"] = this.props.Login.orderDetails && parseInt(this.props.Login.orderDetails.selectedSample.OrderCodeData);\n      Map[\"userinfo\"] = this.props.Login.userInfo;\n      Map[\"FromDate\"] = this.props.Login.masterData.FromDate;\n      Map[\"ToDate\"] = this.props.Login.masterData.ToDate;\n      Map[\"nsampletypecode\"] = this.props.Login.masterData.nsampletypecode;\n      Map[\"nregtypecode\"] = this.props.Login.masterData.RegTypeValue.nregtypecode;\n      Map[\"nregsubtypecode\"] = this.props.Login.masterData.RegSubTypeValue.nregsubtypecode;\n      Map[\"nfilterstatus\"] = this.props.Login.masterData.nfilterstatus;\n      Map[\"ndesigntemplatemappingcode\"] = this.props.Login.masterData.ndesigntemplatemappingcode;\n      Map[\"napproveconfversioncode\"] = this.props.Login.masterData.napproveconfversioncode;\n      Map[\"nneedsubsample\"] = this.props.Login.masterData.nneedsubsample;\n      Map[\"activeSampleTab\"] = this.props.Login.masterData.activeSampleTab;\n      Map[\"checkBoxOperation\"] = this.props.Login.masterData.checkBoxOperation;\n      Map[\"activeSubSampleTab\"] = this.props.Login.masterData.activeSubSampleTab;\n      Map[\"activeTestTab\"] = this.props.Login.masterData.activeTestTab;\n      Map[\"ntype\"] = 5;\n      Map[\"url\"] = this.props.Login.settings[24];\n      const inputParam = {\n        inputData: Map,\n        searchRef: this.searchRef,\n        isClearSearch: this.props.Login.isClearSearch,\n        masterData: this.props.Login.masterData\n      };\n      this.props.orderMapping(inputParam);\n    };\n\n    this.outsourceTest = test => {\n      // console.log(\"test:\", test);\n      if (this.props.Login.masterData.RealSampleTypeValue && this.props.Login.masterData.RealSampleTypeValue.nsampletypecode === SampleType.CLINICALTYPE && this.props.Login.masterData.RealSampleTypeValue.nportalrequired === transactionStatus.YES) {\n        if (test.test.ntransactionstatus === transactionStatus.REGISTER) {\n          const inputData = {\n            \"registrationtest\": {\n              npreregno: test.test.npreregno,\n              ntransactionsamplecode: test.test.ntransactionsamplecode,\n              ntestcode: test.test.ntestcode,\n              ntransactiontestcode: test.test.ntransactiontestcode\n            },\n            userinfo: this.props.Login.userInfo,\n            ndesigntemplatemappingcode: this.props.Login.masterData.RealDesignTemplateMappingValue && this.props.Login.masterData.RealDesignTemplateMappingValue.ndesigntemplatemappingcode // destinationsitecode:2\n\n          };\n          const inputParam = {\n            inputData,\n            screenName: \"IDS_OUTSOURCETEST\"\n          };\n          this.props.getOutSourceSite(inputParam); // this.props.outsourceTest(inputData);\n        } else {\n          toast.info(this.props.intl.formatMessage({\n            id: \"IDS_SELECTREGISTEREDTEST\"\n          }));\n        }\n      } else {\n        toast.info(this.props.intl.formatMessage({\n          id: \"IDS_OUTSOURCEOPTIONNOTAVAIL\"\n        }));\n      }\n    };\n\n    this.onSaveOutSourceSample = () => {\n      if (Date.parse(this.props.Login.regDate) <= Date.parse(this.state.selectedRecord[\"doutsourcedate\"].toDateString())) {\n        const selectedRecord = this.state.selectedRecord || {};\n        const outSourceSiteData = this.props.Login.outSourceSiteData;\n        const destinationsitecode = selectedRecord[\"outsourcesite\"].value; //const selectedTest = selectedRecord[\"outSourceTestList\"].item;\n\n        const selectedTest = selectedRecord[\"outSourceTestList\"].map(item => item.item);\n        const otherdetails = {\n          doutsourcedate: selectedRecord[\"doutsourcedate\"],\n          sremarks: selectedRecord[\"sremarks\"],\n          ssampleid: selectedRecord[\"ssampleid\"],\n          sshipmenttracking: selectedRecord[\"sshipmenttracking\"]\n        }; // const doutsourcedate=selectedRecord[\"doutsourcedate\"];\n        // const sremarks=selectedRecord[\"sremarks\"];\n        // const ssampleid=selectedRecord[\"ssampleid\"];\n        // const sshipmenttracking=selectedRecord[\"sshipmenttracking\"];\n\n        this.props.outsourceSampleTest({ ...outSourceSiteData,\n          destinationsitecode,\n          selectedTest,\n          otherdetails\n        }, this.props.Login.masterData);\n      } else {\n        toast.info(this.props.intl.formatMessage({\n          id: \"IDS_OUTSOURCEDATEGRATERTHANREGDATE\"\n        }));\n      }\n    };\n\n    this.outsourceSample = test => {\n      // console.log(\"test:\", test);\n      if (this.props.Login.masterData.RealSampleTypeValue && this.props.Login.masterData.RealSampleTypeValue.nsampletypecode === SampleType.CLINICALTYPE && this.props.Login.masterData.RealSampleTypeValue.nportalrequired === transactionStatus.YES) {\n        // if(test.test.ntransactionstatus === transactionStatus.REGISTER || test.test.ntransactionstatus ===transactionStatus.PARTIAL)\n        if (test.test.ntransactionstatus !== transactionStatus.PREREGISTER && test.test.ntransactionstatus !== transactionStatus.REJECT && test.test.ntransactionstatus !== transactionStatus.CANCELLED && test.test.ntransactionstatus !== transactionStatus.RELEASED) {\n          const inputData = {\n            \"registrationtest\": {\n              npreregno: test.test.npreregno,\n              ntransactionsamplecode: test.test.ntransactionsamplecode,\n              ssamplearno: test.test.ssamplearno\n            },\n            userinfo: this.props.Login.userInfo,\n            ndesigntemplatemappingcode: this.props.Login.masterData.RealDesignTemplateMappingValue && this.props.Login.masterData.RealDesignTemplateMappingValue.ndesigntemplatemappingcode,\n            \"outSourceSampleData\": {\n              nsampletypecode: this.props.Login.masterData.RealSampleTypeValue.nsampletypecode,\n              nregtypecode: this.props.Login.masterData.RealRegTypeValue.nregtypecode,\n              nregsubtypecode: this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode,\n              napprovalversioncode: this.props.Login.masterData.RealApprovalConfigVersionValue.napproveconfversioncode,\n              npreregno: test.test.npreregno\n            }\n          };\n          const inputParam = {\n            inputData,\n            screenName: \"IDS_OUTSOURCETEST\"\n          };\n          this.props.getOutSourceSiteAndTest(inputParam); // this.props.outsourceTest(inputData);\n        } else {\n          toast.info(this.props.intl.formatMessage({\n            id: \"IDS_SELECTREGISTEREDTEST\"\n          }));\n        }\n      } else {\n        toast.info(this.props.intl.formatMessage({\n          id: \"IDS_OUTSOURCEOPTIONNOTAVAIL\"\n        }));\n      }\n    };\n\n    this.handleDateChangeMaster = (dateName, dateValue, item) => {\n      //   const { selectedMaster } = this.state;\n      const selectedMaster = this.state.selectedMaster || [];\n      const masterIndex = this.props.Login.masterIndex;\n      selectedMaster[masterIndex] = selectedMaster[masterIndex] && { ...selectedMaster[masterIndex]\n      } || {};\n      selectedMaster[masterIndex][dateName] = dateValue;\n      const age = ageCalculate(dateValue);\n      selectedMaster[masterIndex][\"sage\"] = age;\n      this.setState({\n        selectedMaster\n      });\n    };\n\n    this.onNumericInputOnChangeMaster = (value, name, item) => {\n      const selectedMaster = this.state.selectedMaster || [];\n      const masterIndex = this.props.Login.masterIndex;\n      selectedMaster[masterIndex] = selectedMaster[masterIndex] && { ...selectedMaster[masterIndex]\n      } || {};\n      selectedMaster[masterIndex][name] = value;\n      this.setState({\n        selectedMaster\n      });\n    };\n\n    this.onInputOnChangeMaster = event => {\n      const selectedMaster = this.state.selectedMaster || [];\n      const masterIndex = this.props.Login.masterIndex;\n      selectedMaster[masterIndex] = selectedMaster[masterIndex] && { ...selectedMaster[masterIndex]\n      } || {};\n\n      if (event.target.type === 'checkbox') {\n        selectedMaster[masterIndex][event.target.name] = event.target.checked === true ? 3 : 4;\n\n        if (this.props.Login.selectedControl[masterIndex].table.item.nformcode === 137) {\n          if (selectedMaster[masterIndex].nneedcurrentaddress === 3) {\n            selectedMaster[masterIndex].sflatnotemp = selectedMaster[masterIndex].sflatno;\n            selectedMaster[masterIndex].shousenotemp = selectedMaster[masterIndex].shouseno;\n            selectedMaster[masterIndex].spostalcodetemp = selectedMaster[masterIndex].spostalcode;\n            selectedMaster[masterIndex].sstreettemp = selectedMaster[masterIndex].sstreet;\n            selectedMaster[masterIndex].scitynametemp = selectedMaster[masterIndex].scityname;\n            selectedMaster[masterIndex].sdistrictnametemp = selectedMaster[masterIndex].sdistrictname;\n            selectedMaster[masterIndex].sregionnametemp = selectedMaster[masterIndex].sregionname;\n          } else {\n            selectedMaster[masterIndex].sflatnotemp = \"\";\n            selectedMaster[masterIndex].shousenotemp = \"\";\n            selectedMaster[masterIndex].spostalcodetemp = \"\";\n            selectedMaster[masterIndex].sstreettemp = \"\";\n            selectedMaster[masterIndex].scitynametemp = \"\";\n            selectedMaster[masterIndex].sdistrictnametemp = \"\";\n            selectedMaster[masterIndex].sregionnametemp = \"\";\n          }\n        }\n      } else {\n        selectedMaster[masterIndex][event.target.name] = event.target.value;\n      }\n\n      this.setState({\n        selectedMaster\n      });\n    };\n\n    this.onSaveMasterRecord = (saveType, formRef) => {\n      //add / edit            \n      const masterIndex = this.props.Login.masterIndex;\n      let inputData = [];\n      const selectedControl = this.props.Login.selectedControl;\n      const masterDesign = this.props.Login.masterDesign;\n      inputData[\"userinfo\"] = { ...this.props.Login.userInfo,\n        nformcode: selectedControl[masterIndex].table.item.nformcode\n      };\n      inputData[selectedControl[masterIndex].table.item.methodUrl.toLowerCase()] = {\n        \"nsitecode\": this.props.Login.userInfo.nmastersitecode\n      };\n      const methodUrl = selectedControl[masterIndex].table.item.methodUrl.toLowerCase();\n\n      if (this.props.Login.masterOperation[masterIndex] === 'update') {\n        if (selectedControl[masterIndex].table.item.component === 'Dynamic') {\n          inputData[methodUrl][\"ndynamicmastercode\"] = this.props.Login.masterEditObject[masterIndex].item ? this.props.Login.masterEditObject[masterIndex].item.jsondata.ndynamicmastercode : this.props.Login.masterEditObject[masterIndex].ndynamicmastercode;\n        } else {\n          inputData[methodUrl][selectedControl[masterIndex][\"valuemember\"]] = this.props.Login.masterEditObject[masterIndex].value;\n        }\n      }\n\n      if (selectedControl[masterIndex].table.item.component === 'Dynamic') {\n        const selectedMaster = this.state.selectedMaster;\n        inputData[\"userinfo\"] = { ...this.props.Login.userInfo,\n          nformcode: selectedControl[masterIndex].table.item.nformcode\n        };\n        inputData[\"masterdateconstraints\"] = masterDesign[masterIndex].screendesign.masterdateconstraints;\n        inputData[\"masterdatefields\"] = masterDesign[masterIndex].screendesign.masterdatefields;\n        inputData[\"mastercombinationunique\"] = masterDesign[masterIndex].screendesign.mastercombinationunique; //add                          \n\n        inputData[\"dynamicmaster\"] = { ...inputData[methodUrl],\n          nformcode: selectedControl[masterIndex].table.item.nformcode,\n          ndesigntemplatemappingcode: masterDesign[masterIndex].ndesigntemplatemappingcode,\n          jsondata: {},\n          jsonuidata: {}\n        };\n        const dateList = [];\n        const defaulttimezone = this.props.Login.defaulttimezone;\n        masterDesign[masterIndex] && masterDesign[masterIndex].slideoutdesign.map(row => {\n          row.children.map(column => {\n            column.children.map(component => {\n              if (component.hasOwnProperty(\"children\")) {\n                component.children.map(componentrow => {\n                  if (componentrow.inputtype === \"combo\") {\n                    inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label] = selectedMaster[componentrow.label] ? {\n                      value: selectedMaster[masterIndex][componentrow.label].value,\n                      label: selectedMaster[masterIndex][componentrow.label].label,\n                      pkey: componentrow.valuemember,\n                      nquerybuildertablecode: componentrow.nquerybuildertablecode,\n                      source: componentrow.source,\n                      [componentrow.table.item.component === 'Dynamic' ? 'ndynamicmastercode' : componentrow.valuemember]: this.props.Login.masterOperation[masterIndex] === 'update' ? selectedMaster[masterIndex][componentrow.label].item ? selectedMaster[masterIndex][componentrow.label].item.jsondata[componentrow.table.item.component === 'Dynamic' ? 'ndynamicmastercode' : componentrow.valuemember] : selectedMaster[masterIndex][componentrow.label][componentrow.table.item.component === 'Dynamic' ? 'ndynamicmastercode' : componentrow.valuemember] : selectedMaster[masterIndex][componentrow.label].item.jsondata[componentrow.table.item.component === 'Dynamic' ? 'ndynamicmastercode' : componentrow.valuemember]\n                    } : -1;\n                    inputData[\"dynamicmaster\"][\"jsonuidata\"][componentrow.label] = selectedMaster[masterIndex][componentrow.label] ? selectedMaster[masterIndex][componentrow.label].label : \"\";\n                  } else if (componentrow.inputtype === \"date\") {\n                    if (componentrow.mandatory) {\n                      inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label] = formatDate(selectedMaster[masterIndex][componentrow.label], false);\n                      inputData[\"dynamicmaster\"][\"jsonuidata\"][componentrow.label] = inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label]; //inputData[\"dynamicmaster\"][\"jsonuidata\"][componentrow.label] = convertDateTimetoString(selectedRecord[componentrow.label], userInfo);\n                    } else {\n                      inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label] = componentrow.loadcurrentdate ? formatDate(selectedMaster[masterIndex][componentrow.label] || new Date(), false) : selectedMaster[masterIndex][componentrow.label] ? formatDate(selectedMaster[masterIndex][componentrow.label], false) : \"\";\n                      inputData[\"dynamicmaster\"][\"jsonuidata\"][componentrow.label] = inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label]; //convertDateTimetoString(selectedRecord[componentrow.label], userInfo);\n                    }\n\n                    if (componentrow.timezone) {\n                      inputData[\"dynamicmaster\"][\"jsondata\"][`tz${componentrow.label}`] = selectedMaster[masterIndex][`tz${componentrow.label}`] ? {\n                        value: selectedMaster[masterIndex][`tz${componentrow.label}`].value,\n                        label: selectedMaster[masterIndex][`tz${componentrow.label}`].label\n                      } : defaulttimezone ? defaulttimezone : -1;\n                      inputData[\"dynamicmaster\"][\"jsonuidata\"][`tz${componentrow.label}`] = inputData[\"dynamicmaster\"][\"jsondata\"][`tz${componentrow.label}`];\n                    }\n\n                    dateList.push(componentrow.label);\n                  } else {\n                    inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label] = selectedMaster[masterIndex][componentrow.label] ? selectedMaster[masterIndex][componentrow.label] : \"\";\n                    inputData[\"dynamicmaster\"][\"jsonuidata\"][componentrow.label] = inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label]; // inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label]\n                  }\n\n                  return inputData[\"dynamicmaster\"];\n                });\n              } else {\n                if (component.inputtype === \"combo\") {\n                  inputData[\"dynamicmaster\"][\"jsondata\"][component.label] = selectedMaster[masterIndex][component.label] ? {\n                    value: selectedMaster[masterIndex][component.label].value,\n                    label: selectedMaster[masterIndex][component.label].label,\n                    pkey: component.valuemember,\n                    nquerybuildertablecode: component.nquerybuildertablecode,\n                    source: component.source,\n                    [component.table.item.component === 'Dynamic' ? 'ndynamicmastercode' : component.valuemember]: this.props.Login.masterOperation[masterIndex] === 'update' ? selectedMaster[masterIndex][component.label].item ? selectedMaster[masterIndex][component.label].item.jsondata[component.table.item.component === 'Dynamic' ? 'ndynamicmastercode' : component.valuemember] : selectedMaster[masterIndex][component.label][component.table.item.component === 'Dynamic' ? 'ndynamicmastercode' : component.valuemember] : selectedMaster[masterIndex][component.label].item.jsondata[component.table.item.component === 'Dynamic' ? 'ndynamicmastercode' : component.valuemember]\n                  } : -1;\n                  inputData[\"dynamicmaster\"][\"jsonuidata\"][component.label] = inputData[\"dynamicmaster\"][\"jsondata\"][component.label].label; //selectedRecord[component.label] ? selectedRecord[component.label].label : \"\"\n                } else if (component.inputtype === \"date\") {\n                  if (component.mandatory) {\n                    inputData[\"dynamicmaster\"][\"jsondata\"][component.label] = formatDate(selectedMaster[masterIndex][component.label], false); // convertDateTimetoString(selectedRecord[component.label] ?\n                    // selectedRecord[component.label] : new Date(), userInfo);\n\n                    inputData[\"dynamicmaster\"][\"jsonuidata\"][component.label] = inputData[\"dynamicmaster\"][\"jsondata\"][component.label]; //convertDateTimetoString(selectedRecord[component.label], userInfo);\n                  } else {\n                    inputData[\"dynamicmaster\"][\"jsondata\"][component.label] = component.loadcurrentdate ? //convertDateTimetoString(selectedRecord[component.label] ?                                      \n                    //    selectedRecord[component.label] : new Date(), userInfo) :\n                    formatDate(selectedMaster[masterIndex][component.label] || new Date(), false) : selectedMaster[masterIndex][component.label] ? // convertDateTimetoString(selectedRecord[component.label] ?\n                    //   selectedRecord[component.label] : new Date(), userInfo) : \"\";\n                    formatDate(selectedMaster[masterIndex][component.label], false) : \"\";\n                    inputData[\"dynamicmaster\"][\"jsonuidata\"][component.label] = inputData[\"dynamicmaster\"][\"jsondata\"][component.label]; //convertDateTimetoString(selectedRecord[component.label], userInfo)\n                  }\n\n                  if (component.timezone) {\n                    inputData[\"dynamicmaster\"][\"jsondata\"][`tz${component.label}`] = selectedMaster[masterIndex][`tz${component.label}`] ? {\n                      value: selectedMaster[masterIndex][`tz${component.label}`].value,\n                      label: selectedMaster[masterIndex][`tz${component.label}`].label\n                    } : defaulttimezone ? defaulttimezone : -1;\n                    inputData[\"dynamicmaster\"][\"jsonuidata\"][`tz${component.label}`] = inputData[\"dynamicmaster\"][\"jsondata\"][`tz${component.label}`];\n                  }\n\n                  dateList.push(component.label);\n                } else {\n                  inputData[\"dynamicmaster\"][\"jsondata\"][component.label] = selectedMaster[masterIndex][component.label] ? selectedMaster[masterIndex][component.label] : \"\";\n                  inputData[\"dynamicmaster\"][\"jsonuidata\"][component.label] = inputData[\"dynamicmaster\"][\"jsondata\"][component.label];\n                }\n              }\n\n              return inputData[\"dynamicmaster\"];\n            });\n            return inputData[\"dynamicmaster\"];\n          });\n          return inputData[\"dynamicmaster\"];\n        });\n        inputData[\"dynamicmaster\"][\"jsonstring\"] = JSON.stringify(inputData[\"dynamicmaster\"][\"jsondata\"]);\n        inputData[\"dynamicmaster\"][\"jsonuistring\"] = JSON.stringify(inputData[\"dynamicmaster\"][\"jsonuidata\"]);\n        inputData[\"masterdatelist\"] = dateList;\n      } else if (selectedControl[masterIndex].table.item.component === 'Type3Component' && selectedControl[masterIndex].table.item.nformcode === formCode.PATIENTMASTER) {\n        //ALPD-3347    \n        inputData[\"noneedfilter\"] = 1; //will dislplay all db records\n\n        if (selectedControl[masterIndex].inputtype === 'backendsearchfilter' || selectedControl[masterIndex].inputtype === 'frontendsearchfilter') {\n          inputData[\"noneedfilter\"] = 2; //will display will added record\n        }\n\n        this.props.Login.masterextractedColumnList[masterIndex].map(item => {\n          let fieldName = item.dataField;\n\n          if (item.isJsonField === true) {\n            return inputData[methodUrl][item.jsonObjectName] = { ...inputData[methodUrl][item.jsonObjectName],\n              [fieldName]: this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName] : \"\"\n            };\n          } else {\n            if (item.controlType === \"selectbox\") {\n              // inputData[methodUrl][fieldName] = this.state.selectedMaster[fieldName] ? this.state.selectedMaster[fieldName].label ? this.state.selectedMaster[fieldName].label : \"\" : -1;\n              inputData[methodUrl][item.tableDataField] = this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName].value ? this.state.selectedMaster[masterIndex][fieldName].value : \"\" : -1;\n              return inputData;\n            } else if (item.controlType === \"datepicker\") {\n              inputData[methodUrl][item.dateField] = formatInputDate(this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName] : \"\", false);\n            } else if (item.controlType === \"checkbox\") {\n              inputData[methodUrl][item.controlName] = this.state.selectedMaster[masterIndex][item.controlName] ? this.state.selectedMaster[masterIndex][item.controlName] : transactionStatus.NO;\n            } else {\n              inputData[methodUrl][fieldName] = this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName] : \"\";\n            } // inputData[methodUrl][selectedRecordPrimarykey] = this.props.Login.selectedId;\n\n\n            return inputData;\n          }\n        });\n      } else {\n        this.props.Login.masterextractedColumnList[masterIndex].map(item => {\n          let fieldName = item.dataField;\n\n          if (item.isJsonField === true) {\n            return inputData[methodUrl][item.jsonObjectName] = { ...inputData[methodUrl][item.jsonObjectName],\n              [fieldName]: this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName] : \"\"\n            };\n          } else {\n            if (item.controlType === \"selectbox\") {\n              inputData[methodUrl][fieldName] = this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName].label ? this.state.selectedMaster[masterIndex][fieldName].label : \"\" : -1;\n              inputData[methodUrl][item.foreignDataField] = this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName].value ? this.state.selectedMaster[masterIndex][fieldName].value : \"\" : -1;\n              return inputData;\n            } else if (item.controlType === \"datepicker\") {\n              inputData[methodUrl][item.dateField] = formatInputDate(this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName] : \"\", false);\n            } else if (item.controlType === \"checkbox\") {\n              inputData[methodUrl][item.controlName] = this.state.selectedMaster[masterIndex][item.controlName] ? this.state.selectedMaster[masterIndex][item.controlName] : transactionStatus.NO;\n            } else {\n              inputData[methodUrl][fieldName] = this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName] : \"\";\n            } // inputData[methodUrl][selectedRecordPrimarykey] = this.props.Login.selectedId;\n\n\n            return inputData;\n          }\n        });\n      } // }\n\n\n      const inputParam = {\n        withoutCombocomponent: this.state.regSubSamplewithoutCombocomponent,\n        comboComponents: this.state.regSubSamplecomboComponents,\n        selectedRecord: this.state.selectedRecord,\n        selectedRecordName: 'selectedRecord',\n        loadSubSample: false,\n        selectedControl: this.props.Login.selectedControl,\n        comboData: this.props.Login.regSubSamplecomboData,\n        comboName: 'regSubSamplecomboData',\n        classUrl: selectedControl[masterIndex].table.item.classUrl,\n        methodUrl: selectedControl[masterIndex].table.item.methodUrl,\n        // displayName: this.props.Login.selectedControl.table.item.sdisplayname,\n        inputData: inputData,\n        operation: this.props.Login.masterOperation[masterIndex],\n        masterEditObject: this.props.Login.masterEditObject,\n        masterOperation: this.props.Login.masterOperation,\n        saveType,\n        formRef,\n        screenName: \"IDS_SUBSAMPLE\",\n        masterIndex,\n        selectedMaster: this.state.selectedMaster,\n        mastercomboComponents: this.props.Login.mastercomboComponents,\n        masterwithoutCombocomponent: this.props.Login.masterwithoutCombocomponent,\n        masterComboColumnFiled: this.props.Login.masterComboColumnFiled,\n        masterextractedColumnList: this.props.Login.masterextractedColumnList,\n        masterdataList: this.props.Login.masterdataList,\n        masterDesign: this.props.Login.masterDesign,\n        masterfieldList: this.props.Login.masterfieldList,\n        userinfo: this.props.Login.userInfo\n      };\n      this.props.addMasterRecord(inputParam, this.props.Login.masterData);\n    };\n\n    this.addMasterRecord = control => {\n      let masterIndex = this.props.Login.masterIndex;\n\n      if (masterIndex !== undefined) {\n        masterIndex = masterIndex + 1;\n      } else {\n        masterIndex = 0;\n      }\n\n      let selectedControl = this.props.Login.selectedControl || [];\n      let selectedMaster = this.state.selectedMaster || [];\n      selectedMaster[masterIndex] = {};\n      selectedControl[masterIndex] = control;\n      let fieldList = this.props.Login.masterfieldList || [];\n      fieldList[masterIndex] = [];\n      let masterComboColumnFiled = this.props.Login.masterComboColumnFiled || [];\n      masterComboColumnFiled[masterIndex] = [];\n      let extractedColumnList = this.props.Login.masterextractedColumnList || [];\n      extractedColumnList[masterIndex] = [];\n      let masterdataList = this.props.Login.masterdataList || [];\n      let masterDesign = this.props.Login.masterDesign || [];\n      let masterwithoutCombocomponent = this.props.Login.masterwithoutCombocomponent || [];\n      let mastercomboComponents = this.props.Login.mastercomboComponents || [];\n      let masterOperation = this.props.Login.masterOperation || [];\n      masterdataList[masterIndex] = [];\n      masterDesign[masterIndex] = [];\n      masterwithoutCombocomponent[masterIndex] = [];\n      mastercomboComponents[masterIndex] = [];\n      masterOperation[masterIndex] = 'create';\n\n      if (control.table.item.component === 'Type2Component' || control.table.item.component === 'Type1Component') {\n        if (control.table.item.component === 'Type2Component') {\n          fieldList[masterIndex] = getFieldSpecification().get(control.table.item.methodUrl) || [];\n        } else {\n          fieldList[masterIndex] = getFieldSpecification1().get(control.table.item.methodUrl) || [];\n        }\n\n        extractedColumnList[masterIndex] = extractFieldHeader(Object.values(fieldList[masterIndex]));\n        const primaryKeyField = Object.keys(fieldList[masterIndex]).length > 0 ? fieldList[masterIndex][0].dataField : \"\";\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            selectedControl,\n            addMaster: true,\n            masterfieldList: fieldList,\n            masterextractedColumnList: extractedColumnList,\n            masterprimaryKeyField: primaryKeyField,\n            masterComboColumnFiled: masterComboColumnFiled,\n            masterIndex,\n            masterdataList,\n            masterDesign,\n            masterwithoutCombocomponent,\n            mastercomboComponents,\n            selectedMaster,\n            masterOperation,\n            screenName: selectedControl[masterIndex].displayname[this.props.Login.userInfo.slanguagetypecode]\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else if (control.table.item.component === 'Type3Component') {\n        fieldList[masterIndex] = getFieldSpecification3().get(control.table.item.methodUrl) || [];\n        extractedColumnList[masterIndex] = extractFieldHeader(Object.values(fieldList[masterIndex]));\n        masterComboColumnFiled[masterIndex] = extractedColumnList[masterIndex].filter(item => item.ndesigncomponentcode === designComponents.COMBOBOX);\n        const primaryKeyField = Object.keys(fieldList[masterIndex]).length > 0 ? fieldList[masterIndex][0].dataField : \"\";\n        const inputParam = {\n          userinfo: this.props.Login.userInfo,\n          selectedControl,\n          masterfieldList: fieldList,\n          masterextractedColumnList: extractedColumnList,\n          masterprimaryKeyField: primaryKeyField,\n          masterComboColumnFiled: masterComboColumnFiled,\n          masterIndex,\n          masterdataList,\n          masterDesign,\n          masterwithoutCombocomponent,\n          mastercomboComponents,\n          selectedMaster,\n          masterOperation,\n          screenName: selectedControl[masterIndex].displayname[this.props.Login.userInfo.slanguagetypecode]\n        };\n        this.props.getAddMasterCombo(inputParam);\n      } else if (control.table.item.component === 'Dynamic') {\n        const inputParam = {\n          userinfo: this.props.Login.userInfo,\n          selectedControl,\n          masterIndex,\n          masterdataList,\n          masterDesign,\n          masterComboColumnFiled,\n          masterwithoutCombocomponent,\n          mastercomboComponents,\n          masterfieldList: fieldList,\n          masterextractedColumnList: extractedColumnList,\n          masterOperation,\n          selectedMaster\n        };\n        this.props.getDynamicMasterTempalte(inputParam);\n      } // this.props.getMasterRecord(control);\n\n    };\n\n    this.editMasterRecord = (control, editObject) => {\n      if (editObject) {\n        let masterIndex = this.props.Login.masterIndex;\n\n        if (masterIndex !== undefined) {\n          masterIndex = masterIndex + 1;\n        } else {\n          masterIndex = 0;\n        }\n\n        let selectedControl = this.props.Login.selectedControl || [];\n        let selectedMaster = this.state.selectedMaster || [];\n        selectedMaster[masterIndex] = {};\n        selectedControl[masterIndex] = control;\n        let fieldList = this.props.Login.masterfieldList || [];\n        fieldList[masterIndex] = [];\n        let masterComboColumnFiled = this.props.Login.masterComboColumnFiled || [];\n        masterComboColumnFiled[masterIndex] = [];\n        let extractedColumnList = this.props.Login.masterextractedColumnList || [];\n        extractedColumnList[masterIndex] = [];\n        let masterdataList = this.props.Login.masterdataList || [];\n        let masterDesign = this.props.Login.masterDesign || [];\n        let masterwithoutCombocomponent = this.props.Login.masterwithoutCombocomponent || [];\n        let mastercomboComponents = this.props.Login.mastercomboComponents || [];\n        let masterOperation = this.props.Login.masterOperation || [];\n        let masterEditObject = this.props.Login.masterEditObject || [];\n        masterdataList[masterIndex] = [];\n        masterDesign[masterIndex] = [];\n        masterwithoutCombocomponent[masterIndex] = [];\n        mastercomboComponents[masterIndex] = [];\n        masterOperation[masterIndex] = 'update';\n        masterEditObject[masterIndex] = editObject;\n\n        if (control.table.item.component === 'Type2Component' || control.table.item.component === 'Type1Component') {\n          if (control.table.item.component === 'Type2Component') {\n            fieldList[masterIndex] = getFieldSpecification().get(control.table.item.methodUrl) || [];\n          } else {\n            fieldList[masterIndex] = getFieldSpecification1().get(control.table.item.methodUrl) || [];\n          }\n\n          extractedColumnList[masterIndex] = extractFieldHeader(Object.values(fieldList[masterIndex]));\n          const primaryKeyField = Object.keys(fieldList[masterIndex]).length > 0 ? fieldList[masterIndex][0].dataField : \"\";\n          const updateInfo = {\n            userinfo: this.props.Login.userInfo,\n            selectedControl,\n            addMaster: true,\n            masterfieldList: fieldList,\n            masterextractedColumnList: extractedColumnList,\n            masterprimaryKeyField: primaryKeyField,\n            masterComboColumnFiled: masterComboColumnFiled,\n            masterIndex,\n            masterdataList,\n            masterDesign,\n            masterwithoutCombocomponent,\n            mastercomboComponents,\n            selectedMaster,\n            masterEditObject,\n            masterOperation // editObject\n            //   screenName:selectedControl[masterIndex].displayname[this.props.Login.userInfo.slanguagetypecode]\n\n          };\n          this.props.getEditMaster(updateInfo);\n        } else if (control.table.item.component === 'Type3Component') {\n          fieldList[masterIndex] = getFieldSpecification3().get(control.table.item.methodUrl) || [];\n          extractedColumnList[masterIndex] = extractFieldHeader(Object.values(fieldList[masterIndex]));\n          masterComboColumnFiled[masterIndex] = extractedColumnList[masterIndex].filter(item => item.ndesigncomponentcode === designComponents.COMBOBOX);\n          const primaryKeyField = Object.keys(fieldList[masterIndex]).length > 0 ? fieldList[masterIndex][0].dataField : \"\";\n          const inputParam = {\n            userinfo: this.props.Login.userInfo,\n            selectedControl,\n            masterfieldList: fieldList,\n            masterextractedColumnList: extractedColumnList,\n            masterprimaryKeyField: primaryKeyField,\n            masterComboColumnFiled: masterComboColumnFiled,\n            masterIndex,\n            masterdataList,\n            masterDesign,\n            masterwithoutCombocomponent,\n            mastercomboComponents,\n            masterEditObject,\n            masterOperation,\n            selectedMaster,\n            screenName: selectedControl[masterIndex].displayname[this.props.Login.userInfo.slanguagetypecode] // editObject\n\n          };\n          this.props.getEditMaster(inputParam);\n        } else if (control.table.item.component === 'Dynamic') {\n          const inputParam = {\n            userinfo: this.props.Login.userInfo,\n            selectedControl,\n            masterIndex,\n            masterdataList,\n            masterDesign,\n            masterComboColumnFiled,\n            masterwithoutCombocomponent,\n            mastercomboComponents,\n            masterfieldList: fieldList,\n            masterextractedColumnList: extractedColumnList,\n            masterComboColumnFiled,\n            masterEditObject,\n            masterOperation,\n            selectedMaster //  editObject\n\n          };\n          this.props.getEditMaster(inputParam);\n        }\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTTHERECORD\"\n        }));\n      }\n    };\n\n    this.onComboChangeMasterDyanmic = (comboData, control, customName) => {\n      let comboName = customName || control.label;\n      let selectedMaster = this.state.selectedMaster || [];\n      const masterIndex = this.props.Login.masterIndex;\n      selectedMaster[masterIndex] = selectedMaster[masterIndex] && { ...selectedMaster[masterIndex]\n      } || {}; //if (comboData) {\n\n      comboData[\"item\"] = { ...comboData[\"item\"],\n        \"pkey\": control.valuemember,\n        \"nquerybuildertablecode\": control.nquerybuildertablecode,\n        \"source\": control.source\n      };\n      selectedMaster[masterIndex][comboName] = comboData; // console.log(\"selected:\", selectedMaster, comboData, control, customName);\n\n      if (control.child && control.child.length > 0) {\n        const childComboList = getSameRecordFromTwoArrays(this.props.Login.mastercomboComponents[masterIndex], control.child, \"label\");\n        let childColumnList = {};\n        childComboList.map(columnList => {\n          const val = this.comboChild(this.props.Login.mastercomboComponents[masterIndex], columnList, childColumnList, false);\n          childColumnList = val.childColumnList;\n        });\n        const parentList = getSameRecordFromTwoArrays(this.props.Login.masterwithoutCombocomponent[masterIndex], control.child, \"label\");\n\n        if (comboData) {\n          const inputParem = {\n            child: control.child,\n            source: control.source,\n            primarykeyField: control.valuemember,\n            value: comboData.value,\n            item: comboData.item\n          };\n          this.props.getChildValuesForAddMaster(inputParem, this.props.Login.userInfo, selectedMaster, this.props.Login.masterdataList, childComboList, childColumnList, this.props.Login.masterwithoutCombocomponent, [...childComboList, ...parentList], masterIndex);\n        } else {\n          let comboData = this.props.Login.masterdataList;\n          const withoutCombocomponent = this.props.Login.masterwithoutCombocomponent || [];\n          const inputParam = {\n            control,\n            comboComponents: this.props.Login.mastercomboComponents[masterIndex],\n            withoutCombocomponent: withoutCombocomponent[masterIndex],\n            selectedMaster: selectedMaster[masterIndex],\n            comboData: comboData[masterIndex]\n          };\n          const childParam = childComboClear(inputParam);\n          selectedMaster[masterIndex] = childParam.selectedRecord;\n          comboData[masterIndex] = childParam.comboData;\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              selectedMaster,\n              mastedataList: comboData\n            }\n          };\n          this.props.updateStore(updateInfo);\n        }\n      } else {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            selectedMaster\n          }\n        };\n        this.props.updateStore(updateInfo);\n      }\n    };\n\n    this.onInputOnChangeMasterDynamic = (event, radiotext) => {\n      let selectedMaster = this.state.selectedMaster || [];\n      const masterIndex = this.props.Login.masterIndex;\n      selectedMaster[masterIndex] = selectedMaster[masterIndex] && { ...selectedMaster[masterIndex]\n      } || {};\n\n      if (event.target.type === 'toggle') {\n        selectedMaster[masterIndex][event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\n      } else if (event.target.type === 'numeric') {\n        if (/\\D/.test(event.target.value)) selectedMaster[masterIndex][event.target.name] = event.target.value;\n      } else if (event.target.type === 'checkbox') {\n        const value = selectedMaster[masterIndex][event.target.name];\n\n        if (value !== '' && value !== undefined) {\n          if (value.includes(radiotext)) {\n            const index = value.indexOf(radiotext);\n\n            if (index !== -1) {\n              if (index === 0) {\n                const indexcomma = value.indexOf(\",\");\n\n                if (indexcomma !== -1) {\n                  selectedMaster[masterIndex][event.target.name] = value.slice(indexcomma + 1);\n                } else {\n                  selectedMaster[masterIndex][event.target.name] = \"\";\n                }\n              } else {\n                if (value.slice(index).indexOf(\",\") !== -1) {\n                  selectedMaster[masterIndex][event.target.name] = value.slice(0, index) + value.slice(index + value.slice(index).indexOf(\",\") + 1);\n                } else {\n                  selectedMaster[masterIndex][event.target.name] = value.slice(0, index - 1);\n                }\n              }\n            }\n          } else {\n            selectedMaster[masterIndex][event.target.name] = value + ',' + radiotext;\n          }\n        } else {\n          selectedMaster[masterIndex][event.target.name] = radiotext;\n        }\n      } else if (event.target.type === 'radio') {\n        selectedMaster[masterIndex][event.target.name] = radiotext;\n      } else {\n        selectedMaster[masterIndex][event.target.name] = event.target.value;\n      }\n\n      this.setState({\n        selectedMaster\n      });\n    };\n\n    this.handleDateChangeMasterDynamic = (dateValue, dateName) => {\n      let selectedMaster = this.state.selectedMaster || [];\n      const masterIndex = this.props.Login.masterIndex;\n      selectedMaster[masterIndex] = selectedMaster[masterIndex] && { ...selectedMaster[masterIndex]\n      } || {};\n      selectedMaster[masterIndex][dateName] = dateValue;\n      this.setState({\n        selectedMaster\n      });\n    };\n\n    this.onNumericInputChangeMasterDynamic = (value, name) => {\n      let selectedMaster = this.state.selectedMaster || [];\n      const masterIndex = this.props.Login.masterIndex;\n      selectedMaster[masterIndex] = selectedMaster[masterIndex] && { ...selectedMaster[masterIndex]\n      } || {};\n      selectedMaster[masterIndex][name] = value;\n      this.setState({\n        selectedMaster\n      });\n    };\n\n    this.onNumericBlurMasterDynamic = (value, control) => {\n      let selectedMaster = this.state.selectedMaster || [];\n      const masterIndex = this.props.Login.masterIndex;\n      selectedMaster[masterIndex] = selectedMaster[masterIndex] && { ...selectedMaster[masterIndex]\n      } || {};\n\n      if (selectedMaster[masterIndex][control.label]) {\n        if (control.max) {\n          if (!(selectedMaster[masterIndex][control.label] < parseFloat(control.max))) {\n            selectedMaster[masterIndex][control.label] = control.precision ? parseFloat(control.max) : parseInt(control.max);\n          }\n        }\n\n        if (control.min) {\n          if (!(selectedMaster[masterIndex][control.label] > parseFloat(control.min))) {\n            selectedMaster[masterIndex][control.label] = control.precision ? parseFloat(control.min) : parseInt(control.min);\n          }\n        }\n      }\n\n      this.setState({\n        selectedMaster\n      });\n    };\n\n    this.printBarcode = inputParam => {\n      this.setState({\n        selectedRecord: {\n          barcodevalue: inputParam.sample.sarno,\n          barcodeData: inputParam.sample\n        },\n        showQRCode: true,\n        openModal: true\n      });\n    };\n\n    this.generateBarcode = inputParam => {\n      let patientName = \"\";\n      let patientDOB = \"\";\n      let orderIdData = \"\";\n\n      if (this.props.Login.masterData.RealSampleTypeValue && this.props.Login.masterData.RealSampleTypeValue.nsampletypecode === SampleType.CLINICALTYPE) {\n        if (inputParam.test.ntransactionstatus !== transactionStatus.PREREGISTER && inputParam.test.ntransactionstatus !== transactionStatus.QUARANTINE && inputParam.test.ntransactionstatus !== transactionStatus.REJECT && inputParam.test.ntransactionstatus !== transactionStatus.CANCELLED) {\n          inputParam.masterData.selectedSample.map(sample => {\n            if (sample.npreregno === inputParam.test.npreregno) {\n              patientName = sample[\"Patient First Name\"] + \" \" + sample[\"Patient Last Name\"];\n              patientDOB = sample[\"Date of birth\"].replaceAll(\"/\", \"-\");\n              orderIdData = sample[\"OrderIdData\"];\n            }\n          });\n          let generateBarcodeValue = inputParam.test.ssamplearno;\n          let additionDesignToPrint = patientName + \"<br>\" + patientDOB + \"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\" + orderIdData;\n          this.setState({\n            selectedRecord: {\n              generateBarcodeValue,\n              additionDesignToPrint\n            },\n            showBarcode: true,\n            openModal: true\n          });\n        } else {\n          toast.info(this.props.intl.formatMessage({\n            id: \"IDS_SELECTREGISTERSUBSAMPLETOGENERATEBARCODE\"\n          }));\n        }\n      }\n    };\n\n    this.orderMapping = inputParam => {\n      const inputParem = {\n        userinfo: this.props.Login.userInfo,\n        inputParam,\n        npreregno: inputParam.subSample.npreregno,\n        sampleorderid: inputParam.subSample.sampleorderid,\n        masterData: this.props.Login.masterData\n      };\n      this.props.getExternalOrderTypeForMapping(inputParem);\n    };\n\n    this.handleDateSubSampleChange = (dateValue, dateName) => {\n      const {\n        selectedRecord\n      } = this.state;\n      selectedRecord[dateName] = dateValue;\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onTestPackageChange = (comboData, fieldName, nneedsubsample, specBasedComponent1, caseNo) => {\n      const selectedRecord = this.state.selectedRecord || {};\n      const selectSection = [];\n      selectSection['nsectioncode'] = this.state.selectedRecord.nsectioncode;\n\n      if (comboData !== null) {\n        const selectPackage = this.state.selectPackage || {};\n        selectPackage[fieldName] = comboData;\n        selectPackage[\"stestpackagename\"] = comboData.label;\n        selectPackage[\"nspecsampletypecode\"] = parseInt(this.state.selectedRecord.nspecsampletypecode);\n        selectedRecord[\"nallottedspeccode\"] = this.props.Login.masterData.RegistrationGetSample && this.props.Login.masterData.RegistrationGetSample[0].nallottedspeccode;\n        selectedRecord[fieldName] = comboData;\n        selectedRecord[\"stestpackagename\"] = comboData.label;\n        const specBasedComponent = specBasedComponent1;\n        selectedRecord[\"nspecsampletypecode\"] = this.state.selectedRecord.nspecsampletypecode && this.state.selectedRecord.nspecsampletypecode !== undefined ? this.state.selectedRecord.nspecsampletypecode : parseInt(this.props.Login.masterData.selectedSubSample && [...new Set(this.props.Login.masterData.selectedSubSample.map(x => x.nspecsampletypecode))].join(\",\")); // selectedRecord[\"nspecsampletypecode\"] = parseInt(this.props.Login.masterData.selectedSubSample &&\n        //     [...new Set(this.props.Login.masterData.selectedSubSample.map(x => x.nspecsampletypecode))].join(\",\"));\n\n        this.props.testPackageTest(selectedRecord, true, this.props.Login.specBasedComponent === undefined ? specBasedComponent : this.props.Login.specBasedComponent, this.props.Login.Conponent, this.props.Login.selectedComponent, this.props.Login.selectedComponent, this.props.Login, selectPackage, selectSection, true, selectedRecord.nspecsampletypecode, this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample); // selectedRecord[\"nspecsampletypecode\"] = this.state.selectedRecord.selectedSubSample!==undefined?this.state.selectedRecord.selectedSubSample &&\n        // [...new Set(this.state.selectedRecord.selectedSubSample.map(x => x.nspecsampletypecode))].join(\",\"):this.state.selectedRecord.nspecsampletypecode;\n        //     this.props.testPackageTest(selectedRecord, true, this.props.Login.specBasedComponent===undefined?specBasedComponent:this.props.Login.specBasedComponent,\n        //         this.props.Login.Conponent, this.props.Login.specBasedTestPackage, this.props.Login.specBasedTestPackage ? true : false, this.props.Login.Conponent,\n        //         this.props.Login.selectedComponent, this.props.Login,selectPackage,true,undefined,this.state.selectedRecord.selectedSample[0],this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample\n        //         );\n        // selectedRecord[\"nspecsampletypecode\"] = this.state.selectedRecord.selectedSubSample !== undefined\n        //             ? this.state.selectedRecord.selectedSubSample && [...new Set(this.state.selectedRecord.selectedSubSample.map(x => x.nspecsampletypecode))].join(\",\")\n        //             : this.state.selectedRecord.nspecsampletypecode;\n        // this.props.testPackageTest(Object.keys(this.props.Login.selectedComponent).length!==0?this.props.Login.selectedComponent:this.state.selectedSpec.nallottedspeccode.item, false, this.state.specBasedComponent,\n        // this.props.Login.Component, this.state.specBasedTestPackage, this.state.specBasedTestPackage ? true : false, this.state.selectComponent,\n        // this.props.Login.selectedComponent, this.props.Login,selectPackage,false,this.state.selectedSpec.nallottedspeccode,this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample\n        // );\n        // console.log(\"log RD:\",selectedRecord, specBasedComponent, this.props.Login.specBasedComponent,\n        //                             this.props.Login.Conponent, this.props.Login.specBasedTestPackage, \n        //                             this.props.Login.Conponent,\n        //                             this.props.Login.selectedComponent, this.props.Login,selectPackage,\n        //                             this.state.selectedRecord.selectedSample[0],\n        //                             this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample);\n        // this.props.testPackageTest(selectedRecord, true, \n        //                             this.props.Login.specBasedComponent === undefined ?  specBasedComponent :this.props.Login.specBasedComponent,\n        //                             this.props.Login.Component,\n        //                             // this.props.Login.specBasedTestPackage, \n        //                             //this.props.Login.specBasedTestPackage ? true : false, \n        //                             this.props.Login.Component, this.props.Login.selectedComponent,this.props.Login,\n        //                             selectPackage,true,undefined,\n        //                             this.state.selectedRecord.selectedSample[0],\n        //                             this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample\n        //                             );\n      } else {\n        //ALPD-3404\n        let availableTestSection = [];\n\n        if (selectedRecord[\"ntestpackagecode\"]) {\n          delete selectedRecord[\"ntestpackagecode\"];\n          delete selectedRecord[\"nsectioncode\"];\n          delete selectedRecord[\"ntestgrouptestcode\"];\n          availableTestSection = this.props.Login.AllSection || [];\n        }\n\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            selectedRecord,\n            availableTest: this.props.Login.AllTest,\n            TestCombined: this.props.Login.AllTest,\n            TestSection: availableTestSection\n          }\n        };\n        this.props.updateStore(updateInfo);\n      }\n    };\n\n    this.onTestSectionChange = (comboData, fieldName, nneedsubsample, specBasedComponent1, caseNo) => {\n      const selectedRecord = this.state.selectedRecord || {};\n      const selectSection = this.state.selectSection || {};\n      const selectPackage = [];\n      selectPackage['ntestpackagecode'] = this.state.selectedRecord.ntestpackagecode;\n\n      if (comboData !== null) {\n        selectSection[fieldName] = comboData;\n        selectSection[\"ssectionname\"] = comboData.label;\n        selectSection[\"nspecsampletypecode\"] = parseInt(this.state.selectedRecord.nspecsampletypecode);\n        selectedRecord[\"nallottedspeccode\"] = this.props.Login.masterData.RegistrationGetSample && this.props.Login.masterData.RegistrationGetSample[0].nallottedspeccode;\n        selectedRecord[fieldName] = comboData;\n        selectedRecord[\"ssectionname\"] = comboData.label;\n        const specBasedComponent = specBasedComponent1;\n        selectedRecord[\"nspecsampletypecode\"] = this.state.selectedRecord.nspecsampletypecode && this.state.selectedRecord.nspecsampletypecode !== undefined ? this.state.selectedRecord.nspecsampletypecode : parseInt(this.props.Login.masterData.selectedSubSample && [...new Set(this.props.Login.masterData.selectedSubSample.map(x => x.nspecsampletypecode))].join(\",\")); // selectedRecord[\"nspecsampletypecode\"] = parseInt(this.props.Login.masterData.selectedSubSample &&\n        //     [...new Set(this.props.Login.masterData.selectedSubSample.map(x => x.nspecsampletypecode))].join(\",\"));\n\n        this.props.testSectionTest(selectedRecord, true, this.props.Login.specBasedComponent === undefined ? specBasedComponent : this.props.Login.specBasedComponent, this.props.Login.Conponent, this.props.Login.selectedComponent, this.props.Login.selectedComponent, this.props.Login, selectPackage, selectSection, true, selectedRecord.nspecsampletypecode, this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample);\n      } else {\n        let availableTestData = [];\n\n        if (selectedRecord[\"nsectioncode\"]) {\n          delete selectedRecord[\"nsectioncode\"];\n          delete selectedRecord[\"ntestgrouptestcode\"];\n          availableTestData = selectPackage['ntestpackagecode'] ? this.props.Login.TestPakageTest || [] : this.props.Login.AllTest || [];\n        }\n\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            selectedRecord,\n            availableTest: this.props.Login.AllTest,\n            TestCombined: availableTestData,\n            TestSection: this.props.Login.TestSection || []\n          }\n        };\n        this.props.updateStore(updateInfo);\n      }\n    };\n\n    this.onComponentChange = (comboData, fieldName, nneedsubsample) => {\n      if (comboData !== null) {\n        //  if (!nneedsubsample) {\n        const selectedRecord = this.state.selectedRecord || {};\n\n        if (fieldName === 'ntzdreceivedate') {\n          selectedRecord[\"ntzdreceivedate\"] = comboData;\n          this.setState({\n            selectedRecord\n          });\n        } else {\n          // const oldspecsampletypecode = selectComponent.nspecsampletypecode\n          // if (oldspecsampletypecode !== comboData.item.nspecsampletypecode) {\n          //     //selectComponent[\"nneedservice\"] = true;\n          // }\n          selectedRecord[fieldName] = comboData;\n          selectedRecord[\"Sample Name\"] = comboData.label;\n          selectedRecord[\"nspecsampletypecode\"] = comboData.item.nspecsampletypecode;\n          selectedRecord[\"ntestgrouptestcode\"] = []; //selectedRecord[\"nneedsubsample\"] = nneedsubsample;\n\n          selectedRecord[\"nneedsubsample\"] = this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample;\n          this.props.componentTest(selectedRecord, true, this.props.Login.specBasedComponent, this.props.Login.Conponent, this.state.specBasedTestPackage, this.props.Login.specBasedTestPackage ? true : false);\n        } // const updateInfo = {\n        //     typeName: DEFAULT_RETURN,\n        //     data: {\n        //         selectComponent\n        //     }\n        // }\n        // this.props.updateStore(updateInfo);\n        // } else {\n        //     const selectComponent = this.state.selectComponent || {};\n        //     selectComponent[fieldName] = comboData;\n        //     // selectComponent[\"nspecsampletypecode\"] = comboData.item.nspecsampletypecode ?  comboData.item.nspecsampletypecode : -1;\n        //     this.setState({ selectComponent })\n        // }\n\n      }\n    };\n\n    this.onInputOnSubSampleChange = (event, control, radiotext) => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (event.target.type === 'checkbox') {\n        if (event.target.name === 'timeonly') {\n          selectedRecord['dateonly'] = false;\n        }\n\n        if (event.target.name === 'dateonly') {\n          selectedRecord['timeonly'] = false;\n        }\n\n        selectedRecord[event.target.name] = event.target.checked;\n      } else {\n        if (control.isnumeric === true && control.label === radiotext) {\n          selectedRecord[event.target.name] = event.target.value.replace(/[^0-9]/g, '');\n        } else {\n          selectedRecord[event.target.name] = event.target.value;\n        } // selectedRecord[event.target.name] = event.target.value;\n\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onComboSubSampleChange = (comboData, control, customName) => {\n      let selectedRecord = this.state.selectedRecord || {};\n\n      if (comboData) {\n        let parentList = [];\n        let childComboList = [];\n        let childColumnList = {};\n        let comboName = customName || control.label;\n        const inputParem = {\n          child: control.child,\n          source: control.source,\n          primarykeyField: control.valuemember,\n          value: comboData ? comboData.value : -1,\n          // item: comboData ? comboData.item : \"\",\n          item: comboData ? { ...comboData.item,\n            pkey: control.valuemember,\n            nquerybuildertablecode: control.nquerybuildertablecode,\n            \"source\": control.source\n          } : \"\",\n          label: comboName,\n          nameofdefaultcomp: control.name\n        };\n        comboData[\"item\"] = { ...comboData[\"item\"],\n          pkey: control.valuemember,\n          nquerybuildertablecode: control.nquerybuildertablecode,\n          \"source\": control.source\n        };\n\n        if (comboData) {\n          selectedRecord[comboName] = comboData;\n        } else {\n          selectedRecord[comboName] = [];\n        }\n\n        if (control.child && control.child.length > 0) {\n          childComboList = getSameRecordFromTwoArrays(this.state.regSubSamplecomboComponents, control.child, \"label\");\n          childColumnList = {};\n          childComboList.map(columnList => {\n            const val = comboChild(this.state.regSubSamplecomboComponents, columnList, childColumnList, false);\n            childColumnList = val.childColumnList;\n            return null;\n          });\n          parentList = getSameRecordFromTwoArrays(this.state.regSubSamplewithoutCombocomponent, control.child, \"label\");\n          this.props.getChildValues(inputParem, this.props.Login.userInfo, selectedRecord, this.props.Login.regSubSamplecomboData, childComboList, childColumnList, this.state.regSubSamplewithoutCombocomponent, [...childComboList, ...parentList]);\n        } else {\n          this.setState({\n            selectedRecord\n          });\n        }\n      } else {\n        let regSubSamplecomboData = this.props.Login.regSubSamplecomboData;\n        selectedRecord[control.label] = \"\";\n        const inputParam = {\n          control,\n          comboComponents: this.state.regSubSamplecomboData,\n          withoutCombocomponent: this.state.regSubSamplewithoutCombocomponent,\n          selectedRecord: selectedRecord,\n          comboData: regSubSamplecomboData\n        };\n        const childParam = childComboClear(inputParam);\n        selectedRecord = childParam.selectedRecord;\n        regSubSamplecomboData = childParam.comboData;\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            selectedRecord,\n            regSubSamplecomboData\n          }\n        };\n        this.props.updateStore(updateInfo);\n      }\n    };\n\n    this.onNumericInputSubSampleChange = (value, name) => {\n      let selectedRecord = this.state.selectedRecord;\n\n      if (value === 0) {\n        selectedRecord[name] = undefined;\n      } else {\n        selectedRecord[name] = value;\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onNumericBlurSubSample = (value, control) => {\n      let selectedRecord = this.state.selectedRecord;\n\n      if (selectedRecord[control.label]) {\n        if (control.max) {\n          if (!(selectedRecord[control.label] < parseFloat(control.max))) {\n            selectedRecord[control.label] = control.precision ? parseFloat(control.max) : parseInt(control.max);\n          }\n        }\n\n        if (control.min) {\n          if (!(selectedRecord[control.label] > parseFloat(control.min))) {\n            selectedRecord[control.label] = control.precision ? parseFloat(control.min) : parseInt(control.min);\n          }\n        }\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onSaveSubSampleClick = (saveType, formRef) => {\n      const operation = this.props.Login.operation;\n\n      if (operation === 'create') {\n        let objSubSample = this.state.selectedRecord;\n        const userInfo = this.props.Login.userInfo; //   let saveSubSample = {};\n\n        let sampleList = [];\n\n        if (this.props.Login.masterData.searchedSample !== undefined) {\n          //sampleList = getSameRecordFromTwoArrays(this.props.Login.masterData.searchedSample, this.props.Login.masterData.RegistrationGetSample.slice(this.state.skip, this.state.skip + this.state.take), \"npreregno\");\n          const list = this.props.Login.masterData.searchedSample ? this.props.Login.masterData.searchedSample : sortDataForDate(this.props.Login.masterData.RegistrationGetSample, 'dtransactiondate', 'npreregno');\n          sampleList = list ? list.slice(this.state.skip, this.state.skip + this.state.take) : [];\n        } else {\n          sampleList = this.props.Login.masterData.RegistrationGetSample && sortDataForDate(this.props.Login.masterData.RegistrationGetSample, 'dtransactiondate', 'npreregno').slice(this.state.skip, this.state.skip + this.state.take);\n        }\n\n        sampleList = getSameRecordFromTwoArrays(this.props.Login.masterData.selectedSample, sampleList, 'npreregno');\n        const findSampleAlloSpec = [...new Set(sampleList.map(item => item.nallottedspeccode))]; // if (this.props.Login.specBasedComponent) {\n        //     saveSubSample[\"nspecsampletypecode\"] = objSubSample[\"nspecsampletypecode\"] ? objSubSample[\"nspecsampletypecode\"] : -1\n        //     saveSubSample[\"ncomponentcode\"] = objSubSample[\"ncomponentcode\"] ? objSubSample[\"ncomponentcode\"].value : -1\n        // } else {\n        //     const findSampleSpec = [...new Set(sampleList.map(item => item.nspecsampletypecode))];\n        //     saveSubSample[\"nspecsampletypecode\"] = findSampleSpec[0] ? findSampleSpec[0] : -1;\n        //     saveSubSample[\"ncomponentcode\"] = -1\n        // }\n        // saveSubSample[\"jsondata\"] = {}\n        // saveSubSample[\"jsonuidata\"] = {}\n        // const dateList = []\n        // this.props.Login.masterData.SubSampleTemplate &&\n        //     this.props.Login.masterData.SubSampleTemplate.jsondata.map(row => {\n        //         row.children.map(column => {\n        //             column.children.map(component => {\n        //                 if (component.hasOwnProperty(\"children\")) {\n        //                     //let componentrowlabel = ''\n        //                     // let componentrowvalue = ''\n        //                     component.children.map(componentrow => {\n        //                         if (componentrow.inputtype === \"combo\") {\n        //                             saveSubSample[\"jsondata\"][componentrow.label] = objSubSample[componentrow.label] ?\n        //                                 { value: objSubSample[componentrow.label].value, label: objSubSample[componentrow.label].label } : -1\n        //                             saveSubSample[\"jsonuidata\"][componentrow.label] = objSubSample[componentrow.label] ? objSubSample[componentrow.label].label : \"\"\n        //                             // if (componentrow.mandatory || objSubSample[componentrow.label]) {\n        //                             //     componentrowlabel = componentrowlabel + '&' + componentrow.label\n        //                             //     componentrowvalue = componentrowvalue + ' ' + objSubSample[componentrow.label].label\n        //                             // }\n        //                         }\n        //                         else if (componentrow.inputtype === \"date\") {\n        //                             if (componentrow.mandatory) {\n        //                                 saveSubSample[\"jsondata\"][componentrow.label] = convertDateTimetoStringDBFormat(objSubSample[componentrow.label] ?\n        //                                     objSubSample[componentrow.label] : new Date(), userInfo);\n        //                                 saveSubSample[\"jsonuidata\"][componentrow.label] = saveSubSample[\"jsondata\"][componentrow.label]\n        //                             } else {\n        //                                 saveSubSample[\"jsondata\"][componentrow.label] = componentrow.loadcurrentdate ?\n        //                                 convertDateTimetoStringDBFormat(objSubSample[componentrow.label] ?\n        //                                         objSubSample[componentrow.label] : new Date(), userInfo) :\n        //                                     objSubSample[componentrow.label] ? convertDateTimetoStringDBFormat(objSubSample[componentrow.label] ?\n        //                                         objSubSample[componentrow.label] : new Date(), userInfo) : \"\";\n        //                                 saveSubSample[\"jsonuidata\"][componentrow.label] = saveSubSample[\"jsondata\"][componentrow.label]\n        //                             }\n        //                             if (componentrow.timezone) {\n        //                                 saveSubSample[\"jsondata\"][`tz${componentrow.label}`] = objSubSample[`tz${componentrow.label}`] ?\n        //                                     { value: objSubSample[`tz${componentrow.label}`].value, label: objSubSample[`tz${componentrow.label}`].label } :\n        //                                     defaulttimezone ? defaulttimezone : -1\n        //                                 saveSubSample[\"jsonuidata\"][`tz${componentrow.label}`] = saveSubSample[\"jsondata\"][`tz${componentrow.label}`]\n        //                             }\n        //                             dateList.push(componentrow.label)\n        //                         }\n        //                         else {\n        //                             saveSubSample[\"jsondata\"][componentrow.label] = objSubSample[componentrow.label] ?\n        //                                 objSubSample[componentrow.label] : \"\"\n        //                             saveSubSample[\"jsonuidata\"][componentrow.label] = saveSubSample[\"jsondata\"][componentrow.label]\n        //                             // if (objSubSample[componentrow.label]) {\n        //                             //     componentrowlabel = componentrowlabel + '&' + objSubSample.label\n        //                             //     componentrowvalue = componentrowvalue + ' ' + objSubSample[componentrow.label]\n        //                             // }\n        //                         }\n        //                         return saveSubSample;\n        //                     })\n        //                     //saveSubSample[\"jsondata\"][componentrowlabel.substring(1)] = componentrowvalue\n        //                 }\n        //                 else {\n        //                     if (component.inputtype === \"combo\") {\n        //                         saveSubSample[\"jsondata\"][component.label] = objSubSample[component.label] ?\n        //                             { value: objSubSample[component.label].value, label: objSubSample[component.label].label } : -1\n        //                         saveSubSample[\"jsonuidata\"][component.label] = objSubSample[component.label] ? objSubSample[component.label].label : \"\"\n        //                     }\n        //                     else if (component.inputtype === \"date\") {\n        //                         if (component.mandatory) {\n        //                             saveSubSample[\"jsondata\"][component.label] = convertDateTimetoStringDBFormat(objSubSample[component.label] ?\n        //                                 objSubSample[component.label] : new Date(), userInfo);\n        //                             saveSubSample[\"jsonuidata\"][component.label] = saveSubSample[\"jsondata\"][component.label]\n        //                         } else {\n        //                             saveSubSample[\"jsondata\"][component.label] = component.loadcurrentdate ?\n        //                             convertDateTimetoStringDBFormat(objSubSample[component.label] ?\n        //                                     objSubSample[component.label] : new Date(), userInfo) :\n        //                                 objSubSample[component.label] ? convertDateTimetoStringDBFormat(objSubSample[component.label] ?\n        //                                     objSubSample[component.label] : new Date(), userInfo) : \"\";\n        //                             saveSubSample[\"jsonuidata\"][component.label] = saveSubSample[\"jsondata\"][component.label]\n        //                         }\n        //                         if (component.timezone) {\n        //                             saveSubSample[\"jsondata\"][`tz${component.label}`] = objSubSample[`tz${component.label}`] ?\n        //                                 { value: objSubSample[`tz${component.label}`].value, label: objSubSample[`tz${component.label}`].label } :\n        //                                 defaulttimezone ? defaulttimezone : -1\n        //                             saveSubSample[\"jsonuidata\"][`tz${component.label}`] = saveSubSample[\"jsondata\"][`tz${component.label}`]\n        //                         }\n        //                         dateList.push(component.label)\n        //                     }\n        //                     else {\n        //                         saveSubSample[\"jsondata\"][component.label] = objSubSample[component.label] ?\n        //                             objSubSample[component.label] : \"\"\n        //                         saveSubSample[\"jsonuidata\"][component.label] = saveSubSample[\"jsondata\"][component.label]\n        //                     }\n        //                 }\n        //                 return saveSubSample;\n        //             }\n        //             )\n        //             return saveSubSample;\n        //         })\n        //         return saveSubSample;\n        //     })\n        //  saveSubSample[\"nallottedspeccode\"] = findSampleAlloSpec[0] ? findSampleAlloSpec[0] : -1;\n        // Component.unshift(saveSubSample);\n\n        let selectedTestData = objSubSample[\"ntestgrouptestcode\"];\n        const selectedTestArray = [];\n        selectedTestData && selectedTestData.map(item => {\n          return selectedTestArray.push(item.item);\n        }); // const Test = this.props.Login.Test || [];\n        // const ArrayTest = Test[saveComponent.slno] ? Test[saveComponent.slno] : [];\n        //Test[saveComponent.slno] = [...ArrayTest, ...selectedTestArray]\n        //  const saveSubSample = this.state.selectedRecord||{}\n        // if (this.props.Login.specBasedComponent) {\n        //   saveSubSample[\"nspecsampletypecode\"] = objSubSample[\"nspecsampletypecode\"] ? objSubSample[\"nspecsampletypecode\"] : -1\n        // saveSubSample[\"ncomponentcode\"] = objSubSample[\"ncomponentcode\"] ? objSubSample[\"ncomponentcode\"].value : -1\n        //  } \n        //   if(!this.props.Login.specBasedComponent) {\n        //  const findSampleSpec = [...new Set(sampleList.map(item => item.nspecsampletypecode))];\n        // objSubSample[\"nspecsampletypecode\"] = selectedTestData&&selectedTestData.length>0?selectedTestData[0]['item']['nspecsampletypecode']:-1;\n        // objSubSample[\"ncomponentcode\"] = -1\n        //  }\n\n        const map = {};\n        const param = getRegistrationSubSample(objSubSample, this.props.Login.masterData.SubSampleTemplate.jsondata, this.props.Login.userInfo, this.props.Login.defaulttimezone, false, this.props.Login.specBasedComponent, operation);\n        map[\"RegistrationSample\"] = param.sampleRegistration;\n\n        if (this.props.Login.masterData.RealSampleTypeValue && this.props.Login.masterData.RealSampleTypeValue.nsampletypecode === SampleType.CLINICALTYPE) {\n          map[\"RegistrationSample\"]['jsondata'] = { ...map[\"RegistrationSample\"]['jsondata'],\n            externalorderid: sampleList[0]['Order']\n          };\n          map[\"RegistrationSample\"]['jsonuidata'] = { ...map[\"RegistrationSample\"]['jsonuidata'],\n            externalorderid: sampleList[0]['Order']\n          };\n        }\n\n        map[\"subsampleDateList\"] = param.dateList;\n        map[\"RegistrationSample\"][\"nallottedspeccode\"] = findSampleAlloSpec[0] ? findSampleAlloSpec[0] : -1; // map['RegistrationSample'] = saveSubSample\n        //   map['subsampleDateList'] = dateList\n\n        map[\"subsamplecombinationunique\"] = this.state.subsampleCombinationUnique;\n        map['subsampledateconstraints'] = this.state.subsampledateconstraints;\n        map['testgrouptest'] = selectedTestArray;\n        map['npreregno'] = sampleList.map(item => item.npreregno).join(\",\");\n        map['userinfo'] = userInfo; // map['checkBoxOperation'] = 3;\n\n        map['checkBoxOperation'] = checkBoxOperation.SINGLESELECT;\n        map['ntype'] = 3;\n        map[\"ndesigntemplatemappingcode\"] = this.props.Login.masterData.RealDesignTemplateMappingValue && this.props.Login.masterData.RealDesignTemplateMappingValue.ndesigntemplatemappingcode;\n        map[\"napproveconfversioncode\"] = this.props.Login.masterData.RealApprovalConfigVersionValue && this.props.Login.masterData.RealApprovalConfigVersionValue.napproveconfversioncode;\n        map[\"nneedtemplatebasedflow\"] = this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nneedtemplatebasedflow;\n        map[\"nneedsubsample\"] = this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nneedsubsample;\n        map[\"nneedjoballocation\"] = this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nneedjoballocation;\n        map[\"masterData\"] = this.props.Login.masterData;\n        map[\"activeTestTab\"] = this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\";\n        map[\"activeSampleTab\"] = this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\";\n        map[\"activeSubSampleTab\"] = this.props.Login.activeSubSampleTab || \"IDS_SUBSAMPLEATTACHMENTS\";\n        map[\"specBasedComponent\"] = this.props.Login.specBasedComponent;\n        map[\"nsampletypecode\"] = this.props.Login.masterData.RealSampleTypeValue.nsampletypecode;\n        map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\n        map[\"nregsubtypecode\"] = this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode;\n        map[\"skipmethodvalidity\"] = false;\n        const obj = convertDateValuetoString(this.state.selectedFilter.fromdate || this.props.Login.masterData.FromDate, this.state.selectedFilter.todate || this.props.Login.masterData.ToDate, this.props.Login.userInfo);\n        map[\"FromDate\"] = obj.fromDate;\n        map[\"ToDate\"] = obj.toDate;\n        map[\"nfilterstatus\"] = this.props.Login.masterData.FilterStatusValue.ntransactionstatus;\n        map[\"loadAdhocTest\"] = false;\n\n        if (this.props.Login.masterData.RealSampleTypeValue.nsampletypecode === SampleType.CLINICALTYPE) {\n          map[\"order\"] = sampleList[0][\"OrderIdData\"];\n          const Layout = this.props.Login.masterData.registrationTemplate.jsondata;\n          const cTWithoutComboData = [];\n          let cTData = [];\n          Layout.map(row => {\n            return row.children.map(column => {\n              return column.children.map(component => {\n                return component.hasOwnProperty(\"children\") ? component.children.map(componentrow => {\n                  if (componentrow.inputtype === \"combo\") {\n                    cTData.push(componentrow);\n                  } else {\n                    cTWithoutComboData.push(componentrow);\n                  }\n\n                  return null;\n                }) : component.inputtype === \"combo\" ? cTData.push(component) : cTWithoutComboData.push(component);\n              });\n            });\n          });\n          let data = [];\n          sampleList.map(item => {\n            let dob = cTWithoutComboData.filter(x => x.name === \"Date Of Birth\");\n            let gender = cTData.filter(x => x.name === \"Gender\");\n            const age = parseInt(ageCalculate(rearrangeDateFormat(this.props.Login.userInfo, item[dob[0].label]), true));\n            data.push({\n              \"npreregno\": parseInt(item.npreregno),\n              \"nage\": age,\n              \"ngendercode\": item.ngendercode\n            });\n            map[\"ageData\"] = data;\n          });\n          map[\"skipmethodvalidity\"] = false;\n        }\n\n        let isFileupload = false;\n        const formData = new FormData();\n        this.props.Login.regSubSamplewithoutCombocomponent.map(item => {\n          if (item.inputtype === 'files') {\n            if (typeof objSubSample[item && item.label] === \"object\") {\n              objSubSample[item && item.label] && objSubSample[item && item.label].forEach((item1, index) => {\n                formData.append(\"uploadedFile\" + index, item1);\n                formData.append(\"uniquefilename\" + index, map[\"RegistrationSample\"].uniquefilename);\n                formData.append(\"filecount\", objSubSample[item && item.label].length);\n                formData.append(\"isFileEdited\", transactionStatus.YES);\n                formData.append(\"userinfo\", JSON.stringify(this.props.Login.userInfo));\n                delete map[\"RegistrationSample\"].uniquefilename;\n                delete map[\"RegistrationSample\"][item && item.label];\n                formData.append('Map', Lims_JSON_stringify(JSON.stringify(map)));\n                isFileupload = true;\n              });\n            }\n          }\n        });\n        const inputParam = {\n          inputData: map,\n          postParamList: this.postParamList,\n          formData: formData,\n          isFileupload\n        };\n        this.props.saveSubSample(inputParam);\n      } else {\n        this.onUpdateSubSampleRegistration(saveType, formRef, operation);\n      }\n    };\n\n    this.onSaveCancelOrderMandatoryFields = [{\n      \"mandatory\": true,\n      \"idsName\": \"IDS_EXTERNALORDERTYPE\",\n      \"dataField\": \"nexternalordertypecode\",\n      \"mandatoryLabel\": \"IDS_SELECT\",\n      \"controlType\": \"selectbox\"\n    }, {\n      \"mandatory\": true,\n      \"idsName\": \"IDS_ORDERSAMPLEID\",\n      \"dataField\": \"sexternalorderid\",\n      \"mandatoryLabel\": \"IDS_ENTER\",\n      \"controlType\": \"textbox\"\n    }];\n\n    this.mandatoryList = (prereg, printer, file, childtest, regSubSample, operation, outsourcetest, adhocTest) => {\n      let mandatory = [];\n\n      if (file) {\n        mandatory = [{\n          \"mandatory\": true,\n          \"idsName\": \"IDS_IMPORTFILE\",\n          \"dataField\": \"sfilename\",\n          \"mandatoryLabel\": \"IDS_CHOOSE\",\n          \"controlType\": \"file\"\n        }];\n      } else if (printer) {\n        mandatory = [{\n          \"mandatory\": true,\n          \"idsName\": \"IDS_PRINTER\",\n          \"dataField\": \"sprintername\",\n          \"mandatoryLabel\": \"IDS_SELECT\",\n          \"controlType\": \"selectbox\"\n        }, {\n          \"mandatory\": true,\n          \"idsName\": \"IDS_BARCODENAME\",\n          \"dataField\": \"sbarcodename\",\n          \"mandatoryLabel\": \"IDS_SELECT\",\n          \"controlType\": \"selectbox\"\n        }];\n      } else if (regSubSample) {\n        let sampleList = [];\n        const skip = this.state.skip;\n        const take = this.state.take;\n\n        if (this.props.Login.masterData.searchedSample !== undefined) {\n          //sampleList = getSameRecordFromTwoArrays(this.props.Login.masterData.searchedSample, this.props.Login.masterData.RegistrationGetSample.slice(skip, skip + take), \"npreregno\");\n          const list = this.props.Login.masterData.searchedSample ? this.props.Login.masterData.searchedSample : this.props.Login.masterData.RegistrationGetSample;\n          sampleList = list ? list.slice(skip, skip + take) : [];\n        } else {\n          sampleList = this.props.Login.masterData.RegistrationGetSample && this.props.Login.masterData.RegistrationGetSample.slice(skip, skip + take);\n        }\n\n        let addSubSampleList = getSameRecordFromTwoArrays(sampleList || [], this.props.Login.masterData.selectedSample, \"npreregno\");\n        const findComponentReqSpec = [...new Set(addSubSampleList.map(item => item.ncomponentrequired))];\n\n        if (findComponentReqSpec[0] === 3) {\n          mandatory = [{\n            \"idsName\": \"IDS_COMPONENT\",\n            \"dataField\": \"ncomponentcode\",\n            \"mandatoryLabel\": \"IDS_SELECT\",\n            \"controlType\": \"combo\"\n          }];\n        }\n\n        this.props.Login.masterData.SubSampleTemplate && this.props.Login.masterData.SubSampleTemplate.jsondata.map(row => {\n          return row.children.map(column => {\n            return column.children.map(component => {\n              return component.hasOwnProperty(\"children\") ? component.children.map(componentrow => {\n                if (componentrow.mandatory === true) {\n                  mandatory.push({\n                    \"mandatory\": true,\n                    \"idsName\": componentrow.displayname[this.props.Login.userInfo.slanguagetypecode],\n                    \"dataField\": componentrow.label,\n                    \"mandatoryLabel\": componentrow.inputtype === \"combo\" ? \"IDS_SELECT\" : \"IDS_ENTER\",\n                    \"controlType\": componentrow.inputtype === \"combo\" ? \"selectbox\" : \"textbox\"\n                  });\n                }\n\n                return mandatory;\n              }) : component.mandatory === true ? mandatory.push({\n                \"mandatory\": true,\n                \"idsName\": component.displayname[this.props.Login.userInfo.slanguagetypecode],\n                \"dataField\": component.label,\n                \"mandatoryLabel\": component.inputtype === \"combo\" ? \"IDS_SELECT\" : \"IDS_ENTER\",\n                \"controlType\": component.inputtype === \"combo\" ? \"selectbox\" : \"textbox\"\n              }) : \"\";\n            });\n          });\n        });\n\n        if (operation !== 'update') {\n          mandatory.push({\n            \"mandatory\": true,\n            \"idsName\": \"IDS_TESTNAME\",\n            \"dataField\": \"ntestgrouptestcode\",\n            \"mandatoryLabel\": \"IDS_SELECT\",\n            \"controlType\": \"selectbox\"\n          });\n        }\n      } else if (childtest) {\n        mandatory = [{\n          \"mandatory\": true,\n          \"idsName\": \"IDS_TESTNAME\",\n          \"dataField\": \"ntestgrouptestcode\",\n          \"mandatoryLabel\": \"IDS_SELECT\",\n          \"controlType\": \"selectbox\"\n        }];\n      } else if (outsourcetest) {\n        mandatory = [{\n          \"idsName\": \"IDS_SITE\",\n          \"dataField\": \"outsourcesite\",\n          \"mandatoryLabel\": \"IDS_SELECT\",\n          \"controlType\": \"combo\"\n        }, {\n          \"idsName\": \"IDS_TEST\",\n          \"dataField\": \"outSourceTestList\",\n          \"mandatoryLabel\": \"IDS_SELECT\",\n          \"controlType\": \"combo\"\n        }, {\n          \"idsName\": \"IDS_SAMPLEID\",\n          \"dataField\": \"ssampleid\",\n          \"mandatoryLabel\": \"IDS_ENTER\",\n          \"controlType\": \"textbox\"\n        }, {\n          \"idsName\": \"IDS_OUTSOURCEDATE\",\n          \"dataField\": \"doutsourcedate\",\n          \"mandatoryLabel\": \"IDS_CHOOSE\",\n          \"controlType\": \"selectbox\"\n        }];\n      } else if (adhocTest) {\n        mandatory = [{\n          \"mandatory\": true,\n          \"idsName\": \"IDS_TESTNAME\",\n          \"dataField\": \"ntestcode\",\n          \"mandatoryLabel\": \"IDS_SELECT\",\n          \"controlType\": \"selectbox\"\n        }];\n      }\n\n      return mandatory;\n    };\n\n    this.mandatoryMappingList = () => {\n      let mandatory = [];\n      mandatory = [, {\n        \"idsName\": \"IDS_ORDER\",\n        \"dataField\": \"nexternalordercode\",\n        \"mandatoryLabel\": \"IDS_SELECT\",\n        \"controlType\": \"combo\"\n      }];\n      return mandatory;\n    };\n\n    this.deleteAttachment = (event, file, fieldName) => {\n      let selectedFile = this.state.selectedFile || {};\n      selectedFile[fieldName] = deleteAttachmentDropZone(selectedFile[fieldName], file);\n      this.setState({\n        selectedFile,\n        actionType: \"delete\" //fileToDelete:file.name \n\n      });\n    };\n\n    this.onSaveChildTestClick = (saveType, formRef) => {\n      const masterData = this.props.Login.masterData; //console.log(\"test1:\", this.props.Login.masterData);\n\n      let sampleList = [];\n      const skip = this.state.skip;\n      const take = this.state.take;\n\n      if (this.props.Login.masterData.searchedSample !== undefined) {\n        const list = this.props.Login.masterData.searchedSample ? this.props.Login.masterData.searchedSample : this.props.Login.masterData.RegistrationGetSample;\n        sampleList = list ? list.slice(skip, skip + take) : [];\n      } else {\n        sampleList = this.props.Login.masterData.RegistrationGetSample && sortDataForDate(this.props.Login.masterData.RegistrationGetSample, 'dtransactiondate', 'npreregno').slice(skip, skip + take);\n      }\n\n      const selectedSample = getSameRecordFromTwoArrays(masterData.selectedSample, sampleList, \"npreregno\");\n      let subsampleList = [];\n      const subsampleskip = this.state.subsampleskip;\n      const subsampletake = this.state.subsampletake;\n\n      if (this.props.Login.masterData.searchedSubSample !== undefined) {\n        const list = this.props.Login.masterData.searchedSubSample ? this.props.Login.masterData.searchedSubSample : this.props.Login.masterData.RegistrationGetSubSample;\n        subsampleList = list ? list.slice(subsampleskip, subsampleskip + subsampletake) : [];\n      } else {\n        subsampleList = this.props.Login.masterData.RegistrationGetSubSample && this.props.Login.masterData.RegistrationGetSubSample.slice(subsampleskip, subsampleskip + subsampletake);\n      }\n\n      const selectedSubsample = getSameRecordFromTwoArrays(masterData.selectedSubSample, subsampleList, \"npreregno\"); //const selectedSubsample = getSameRecordFromTwoArrays(masterData.selectedSubSample, masterData.RegistrationGetSubSample.slice(this.state.subsampleskip, (this.state.subsampleskip + this.state.subsampletake)), \"npreregno\");\n      //const selectedSample = getSameRecordFromTwoArrays(masterData.selectedSample, masterData.RegistrationGetSample.slice(this.state.skip, (this.state.skip + this.state.take)), \"npreregno\");\n      ////  selectedSubsample =masterData.selectedSubSample.slice(this.state.skip, (this.state.skip + this.state.take));\n\n      const ntransactionsamplecode = selectedSubsample.map(x => x.ntransactionsamplecode).join(\",\");\n      let data = [];\n      let obj = convertDateValuetoString(this.props.Login.masterData.RealFromDate, this.props.Login.masterData.RealToDate, this.props.Login.userInfo);\n\n      if (this.props.Login.masterData.RealSampleTypeValue.nsampletypecode === SampleType.CLINICALTYPE) {\n        const Layout = this.props.Login.masterData.registrationTemplate.jsondata;\n        const cTWithoutComboData = [];\n        let cTData = [];\n        Layout.map(row => {\n          return row.children.map(column => {\n            return column.children.map(component => {\n              return component.hasOwnProperty(\"children\") ? component.children.map(componentrow => {\n                if (componentrow.inputtype === \"combo\") {\n                  cTData.push(componentrow);\n                } else {\n                  cTWithoutComboData.push(componentrow);\n                }\n\n                return null;\n              }) : component.inputtype === \"combo\" ? cTData.push(component) : cTWithoutComboData.push(component);\n            });\n          });\n        });\n        selectedSample.map(item => {\n          let dob = cTWithoutComboData.filter(x => x.name === \"Date Of Birth\");\n          let gender = cTData.filter(x => x.name === \"Gender\");\n          const ageCal = parseInt(ageCalculate(item[dob[0].label], true));\n          data.push({\n            \"npreregno\": parseInt(item.npreregno),\n            \"nage\": ageCal,\n            \"ngendercode\": item.ngendercode\n          });\n        });\n      }\n\n      const inputData = {\n        nneedjoballocation: masterData.RealRegSubTypeValue.nneedjoballocation ? masterData.RealRegSubTypeValue.nneedjoballocation : false,\n        TestGroupTest: this.state.selectedRecord.ntestgrouptestcode.map(value => value.item),\n        RegistrationSample: selectedSubsample.map(x => x.ntransactionsamplecode),\n        ntransactionsamplecode: ntransactionsamplecode,\n        userinfo: this.props.Login.userInfo,\n        nregtypecode: masterData.RealRegTypeValue.nregtypecode,\n        nregsubtypecode: masterData.RealRegSubTypeValue.nregsubtypecode,\n        nsampletypecode: masterData.RealSampleTypeValue.nsampletypecode,\n        ntype: 3,\n        nfilterstatus: this.props.Login.masterData.FilterStatusValue.ntransactionstatus,\n        npreregno: selectedSample && selectedSample.map(sample => sample.npreregno).join(\",\"),\n        // ntransactionsamplecode: selectedSubsample &&\n        // selectedSubsample.map(sample => sample.ntransactionsamplecode).join(\",\"),\n        FromDate: obj.fromDate,\n        ToDate: obj.toDate,\n        ndesigntemplatemappingcode: this.props.Login.masterData.RealDesignTemplateMappingValue && this.props.Login.masterData.RealDesignTemplateMappingValue.ndesigntemplatemappingcode,\n        nneedtemplatebasedflow: this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nneedtemplatebasedflow,\n        nneedsubsample: this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nneedsubsample,\n        //  checkBoxOperation: 3,\n        checkBoxOperation: checkBoxOperation.SINGLESELECT,\n        napproveconfversioncode: this.props.Login.masterData.RealApprovalConfigVersionValue && this.props.Login.masterData.RealApprovalConfigVersionValue.napproveconfversioncode || -1,\n        activeTestTab: this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\",\n        activeSampleTab: this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\",\n        activeSubSampleTab: this.props.Login.activeSubSampleTab || \"IDS_SUBSAMPLEATTACHMENTS\",\n        ageData: data,\n        nsampletypecode: this.props.Login.masterData.RealSampleTypeValue.nsampletypecode,\n        ntestpackagecode: this.state.selectedRecord['ntestpackagecode'] && this.state.selectedRecord['ntestpackagecode'],\n        skipmethodvalidity: false,\n        loadAdhocTest: false\n      };\n      const inputParam = {\n        inputData,\n        classUrl: \"registration\",\n        operation: this.props.Login.operation,\n        methodUrl: \"Test\",\n        responseKeyList: [{\n          \"responseKey\": \"selectedSample\",\n          \"masterDataKey\": \"RegistrationGetSample\",\n          \"primaryKey\": \"npreregno\",\n          \"dataAction\": \"update\"\n        }, {\n          \"responseKey\": \"selectedSubSample\",\n          \"masterDataKey\": \"RegistrationGetSubSample\",\n          \"primaryKey\": \"ntransactionsamplecode\",\n          \"dataAction\": \"update\"\n        }, {\n          \"responseKey\": \"selectedTest\",\n          \"masterDataKey\": \"RegistrationGetTest\",\n          \"primaryKey\": \"ntransactiontestcode\",\n          \"dataAction\": \"add\"\n        }],\n        saveType,\n        formRef,\n        postParamList: this.postParamList\n      };\n\n      if (showEsign(this.state.controlMap, this.props.Login.userInfo.nformcode, this.props.ncontrolCode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData\n            },\n            saveType\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.createRegistrationTest(inputParam, masterData, \"openModal\");\n      }\n    };\n\n    this.onSaveAdhocTestClick = (saveType, formRef) => {\n      const masterData = this.props.Login.masterData; //console.log(\"test1:\", this.props.Login.masterData);\n\n      let sampleList = [];\n      const skip = this.state.skip;\n      const take = this.state.take;\n\n      if (this.props.Login.masterData.searchedSample !== undefined) {\n        const list = this.props.Login.masterData.searchedSample ? this.props.Login.masterData.searchedSample : this.props.Login.masterData.RegistrationGetSample;\n        sampleList = list ? list.slice(skip, skip + take) : [];\n      } else {\n        sampleList = this.props.Login.masterData.RegistrationGetSample && sortDataForDate(this.props.Login.masterData.RegistrationGetSample, 'dtransactiondate', 'npreregno').slice(skip, skip + take);\n      }\n\n      const selectedSample = getSameRecordFromTwoArrays(masterData.selectedSample, sampleList, \"npreregno\");\n      let subsampleList = [];\n      const subsampleskip = this.state.subsampleskip;\n      const subsampletake = this.state.subsampletake;\n\n      if (this.props.Login.masterData.searchedSubSample !== undefined) {\n        const list = this.props.Login.masterData.searchedSubSample ? this.props.Login.masterData.searchedSubSample : this.props.Login.masterData.RegistrationGetSubSample;\n        subsampleList = list ? list.slice(subsampleskip, subsampleskip + subsampletake) : [];\n      } else {\n        subsampleList = this.props.Login.masterData.RegistrationGetSubSample && this.props.Login.masterData.RegistrationGetSubSample.slice(subsampleskip, subsampleskip + subsampletake);\n      }\n\n      const selectedSubsample = getSameRecordFromTwoArrays(masterData.selectedSubSample, subsampleList, \"npreregno\");\n      const selectedSampleSpecType = getSameRecordFromTwoArrays(masterData.selectedSubSample, masterData.selectedSample, \"npreregno\");\n      const ntransactionsamplecode = selectedSubsample.map(x => x.ntransactionsamplecode).join(\",\");\n      let data = [];\n      let obj = convertDateValuetoString(this.props.Login.masterData.RealFromDate, this.props.Login.masterData.RealToDate, this.props.Login.userInfo);\n\n      if (this.props.Login.masterData.RealSampleTypeValue.nsampletypecode === SampleType.CLINICALTYPE) {\n        const Layout = this.props.Login.masterData.registrationTemplate.jsondata;\n        const cTWithoutComboData = [];\n        let cTData = [];\n        Layout.map(row => {\n          return row.children.map(column => {\n            return column.children.map(component => {\n              return component.hasOwnProperty(\"children\") ? component.children.map(componentrow => {\n                if (componentrow.inputtype === \"combo\") {\n                  cTData.push(componentrow);\n                } else {\n                  cTWithoutComboData.push(componentrow);\n                }\n\n                return null;\n              }) : component.inputtype === \"combo\" ? cTData.push(component) : cTWithoutComboData.push(component);\n            });\n          });\n        });\n        selectedSample.map(item => {\n          let dob = cTWithoutComboData.filter(x => x.name === \"Date Of Birth\");\n          let gender = cTData.filter(x => x.name === \"Gender\");\n          const ageCal = parseInt(ageCalculate(item[dob[0].label], true));\n          data.push({\n            \"npreregno\": parseInt(item.npreregno),\n            \"nage\": ageCal,\n            \"ngendercode\": item.ngendercode\n          });\n        });\n      }\n\n      this.state.selectedRecord.ntestcode.item['nisvisible'] = this.state.selectedRecord.visibleadhoctest;\n      this.state.selectedRecord.ntestcode.item['nisadhoctest'] = transactionStatus.YES;\n      const inputData = {\n        nneedjoballocation: masterData.RealRegSubTypeValue.nneedjoballocation ? masterData.RealRegSubTypeValue.nneedjoballocation : false,\n        TestGroupTest: this.state.selectedRecord.ntestcode.item,\n        RegistrationSample: selectedSubsample.map(x => x.ntransactionsamplecode),\n        ntransactionsamplecode: ntransactionsamplecode,\n        userinfo: this.props.Login.userInfo,\n        nregtypecode: masterData.RealRegTypeValue.nregtypecode,\n        nregsubtypecode: masterData.RealRegSubTypeValue.nregsubtypecode,\n        nsampletypecode: masterData.RealSampleTypeValue.nsampletypecode,\n        ntype: 3,\n        nfilterstatus: this.props.Login.masterData.FilterStatusValue.ntransactionstatus,\n        npreregno: selectedSample && selectedSample.map(sample => sample.npreregno).join(\",\"),\n        // ntransactionsamplecode: selectedSubsample &&\n        // selectedSubsample.map(sample => sample.ntransactionsamplecode).join(\",\"),\n        FromDate: obj.fromDate,\n        ToDate: obj.toDate,\n        ndesigntemplatemappingcode: this.props.Login.masterData.RealDesignTemplateMappingValue && this.props.Login.masterData.RealDesignTemplateMappingValue.ndesigntemplatemappingcode,\n        nneedtemplatebasedflow: this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nneedtemplatebasedflow,\n        nneedsubsample: this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nneedsubsample,\n        checkBoxOperation: 3,\n        napproveconfversioncode: this.props.Login.masterData.RealApprovalConfigVersionValue && this.props.Login.masterData.RealApprovalConfigVersionValue.napproveconfversioncode || -1,\n        activeTestTab: this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\",\n        activeSampleTab: this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\",\n        activeSubSampleTab: this.props.Login.activeSubSampleTab || \"IDS_SUBSAMPLEATTACHMENTS\",\n        ageData: data,\n        nsampletypecode: this.props.Login.masterData.RealSampleTypeValue.nsampletypecode,\n        ntestpackagecode: this.state.selectedRecord['ntestpackagecode'] && this.state.selectedRecord['ntestpackagecode'],\n        skipmethodvalidity: false,\n        loadAdhocTest: this.props.Login.loadAdhocTest,\n        nspecsampletypecode: selectedSampleSpecType.map(item => ({\n          \"nspecsampletypecode\": item[\"nspecsampletypecode\"]\n        })),\n        ncontrolCode: this.state.adhocTestId\n      };\n      const inputParam = {\n        inputData,\n        classUrl: \"registration\",\n        operation: this.props.Login.operation,\n        methodUrl: \"AdhocTest\",\n        responseKeyList: [{\n          \"responseKey\": \"selectedSample\",\n          \"masterDataKey\": \"RegistrationGetSample\",\n          \"primaryKey\": \"npreregno\",\n          \"dataAction\": \"update\"\n        }, {\n          \"responseKey\": \"selectedSubSample\",\n          \"masterDataKey\": \"RegistrationGetSubSample\",\n          \"primaryKey\": \"ntransactionsamplecode\",\n          \"dataAction\": \"update\"\n        }, {\n          \"responseKey\": \"selectedTest\",\n          \"masterDataKey\": \"RegistrationGetTest\",\n          \"primaryKey\": \"ntransactiontestcode\",\n          \"dataAction\": \"add\"\n        }],\n        saveType,\n        formRef,\n        postParamList: this.postParamList,\n        action: 'adhocTest'\n      };\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData\n            },\n            saveType\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.createAdhocTest(inputParam, masterData, \"openModal\");\n      }\n    };\n\n    this.getRegistrationComboService = (ScreenName, operation, primaryKeyField, masterData, userInfo, editId, importData) => {\n      const ndesigntemplatemappingcodefilter = this.props.Login.masterData.DesignTemplateMappingValue && this.props.Login.masterData.DesignTemplateMappingValue.ndesigntemplatemappingcode;\n\n      if (ndesigntemplatemappingcodefilter === this.props.Login.masterData.ndesigntemplatemappingcode) {\n        let data = [];\n        const withoutCombocomponent = [];\n        const Layout = this.props.Login.masterData.registrationTemplate && this.props.Login.masterData.registrationTemplate.jsondata;\n\n        if (Layout !== undefined) {\n          Layout.map(row => {\n            return row.children.map(column => {\n              return column.children.map(component => {\n                return component.hasOwnProperty(\"children\") ? component.children.map(componentrow => {\n                  if (componentrow.inputtype === \"combo\" || componentrow.inputtype === \"backendsearchfilter\" || componentrow.inputtype === \"frontendsearchfilter\") {\n                    data.push(componentrow);\n                  } else {\n                    withoutCombocomponent.push(componentrow);\n                  }\n\n                  return null;\n                }) : component.inputtype === \"combo\" || component.inputtype === \"backendsearchfilter\" || component.inputtype === \"frontendsearchfilter\" ? data.push(component) : withoutCombocomponent.push(component);\n              });\n            });\n          });\n          const comboComponents = data;\n          let childColumnList = {};\n          data.map(columnList => {\n            const val = comboChild(data, columnList, childColumnList, true);\n            data = val.data;\n            childColumnList = val.childColumnList;\n            return null;\n          });\n          const mapOfFilterRegData = {\n            nsampletypecode: parseInt(this.props.Login.masterData.RealSampleTypeValue.nsampletypecode),\n            sampletypecategorybasedflow: parseInt(this.props.Login.masterData.RealSampleTypeValue.ncategorybasedflowrequired),\n            nneedsubsample: this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample === true ? transactionStatus.YES : transactionStatus.NO\n          };\n          this.props.getPreviewTemplate(masterData, userInfo, editId, data, this.state.selectedRecord, childColumnList, comboComponents, withoutCombocomponent, true, false, mapOfFilterRegData, false, \"create\", this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename, importData);\n        } else {\n          toast.info(this.props.intl.formatMessage({\n            id: \"IDS_CONFIGURETEMPLATE\"\n          }));\n        }\n      } else {\n        toast.info(this.props.intl.formatMessage({\n          id: \"IDS_SELECTAPPROVEDDESIGNTEMPLATE\"\n        }));\n      }\n    };\n\n    this.getBarcodeAndPrinter = (ScreenName, operation, primaryKeyField, masterData, userInfo, editId) => {\n      toast.info(this.props.intl.formatMessage({\n        id: \"IDS_SELECTAPPROVEDDESIGNTEMPLATE\"\n      }));\n    };\n\n    this.printBarcode = inputParam => {\n      this.setState({\n        selectedRecord: {\n          barcodevalue: inputParam.sample.sarno,\n          barcodeData: inputParam.sample\n        },\n        showQRCode: true,\n        openModal: true\n      });\n    };\n\n    this.comboChild = (data, columnList, childColumnList, slice) => {\n      let retunObj = {}; // if (data.findIndex(x => x.label === columnList.label) !== -1) {\n\n      if (!childColumnList.hasOwnProperty(columnList.label)) {\n        if (childColumnList[columnList.label] === undefined) {\n          if (columnList.hasOwnProperty(\"child\")) {\n            let childList = [];\n            columnList.child.map(childData => {\n              const index = data.findIndex(x => x.label === childData.label);\n\n              if (index !== -1) {\n                childList.push(data[index]);\n\n                if (slice) {\n                  data = [...data.slice(0, index), ...data.slice(index + 1)];\n                }\n              }\n\n              return data;\n            });\n            childColumnList[columnList.label] = childList;\n\n            if (childList.length > 0) {\n              childList.map(y => {\n                if (y.hasOwnProperty(\"child\")) {\n                  const val = comboChild(data, y, childColumnList, slice);\n                  retunObj[\"data\"] = val.data;\n                  retunObj[\"childColumnList\"] = val.childColumnList;\n                } else {\n                  retunObj[\"data\"] = data;\n                  retunObj[\"childColumnList\"] = childColumnList;\n                }\n\n                return null;\n              });\n            } else {\n              retunObj[\"data\"] = data;\n              retunObj[\"childColumnList\"] = childColumnList;\n            }\n          } else {\n            retunObj[\"data\"] = data;\n            retunObj[\"childColumnList\"] = childColumnList;\n          }\n        } else {\n          retunObj[\"data\"] = data;\n          retunObj[\"childColumnList\"] = childColumnList;\n        }\n      } else {\n        retunObj[\"data\"] = data;\n        retunObj[\"childColumnList\"] = childColumnList;\n      }\n\n      return retunObj;\n    };\n\n    this.handlePageChange = e => {\n      this.setState({\n        skip: e.skip,\n        take: e.take\n      }); //setTimeout(() => { this._scrollBarRef.updateScroll() })\n    };\n\n    this.handleTestPageChange = e => {\n      this.setState({\n        testskip: e.skip,\n        testtake: e.take\n      });\n    };\n\n    this.handleSubSamplePageChange = e => {\n      this.setState({\n        subsampleskip: e.skip,\n        subsampletake: e.take\n      });\n    };\n\n    this.openFilter = () => {\n      let showFilter = !this.props.Login.showFilter;\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          showFilter\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onFilterChange = (event, labelname) => {\n      let masterData = this.props.Login.masterData;\n      masterData = { ...masterData,\n        [labelname]: { ...event.item\n        }\n      };\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          masterData\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onSampleTabChange = tabProps => {\n      const activeSampleTab = tabProps.screenName;\n\n      if (activeSampleTab !== this.props.Login.activeSampleTab) {\n        let inputData = {\n          masterData: this.props.Login.masterData,\n          selectedSample: this.props.Login.masterData.selectedSample,\n          npreregno: this.props.Login.masterData.selectedSample ? this.props.Login.masterData.selectedSample.map(item => item.npreregno).join(\",\") : \"-1\",\n          userinfo: this.props.Login.userInfo,\n          screenName: activeSampleTab,\n          activeSampleTab,\n          activeTabIndex: tabProps.activeTabIndex ? tabProps.activeTabIndex : this.state.activeTabIndex\n        };\n        this.props.getSampleChildTabDetail(inputData);\n      }\n    };\n\n    this.onSubSampleTabChange = tabProps => {\n      const activeSubSampleTab = tabProps.screenName;\n\n      if (activeSubSampleTab !== this.props.Login.activeSubSampleTab) {\n        let inputData = {\n          masterData: this.props.Login.masterData,\n          selectedSubSample: this.props.Login.masterData.selectedSubSample,\n          ntransactionsamplecode: this.props.Login.masterData.selectedSubSample ? this.props.Login.masterData.selectedSubSample.map(item => item.ntransactionsamplecode).join(\",\") : \"-1\",\n          userinfo: this.props.Login.userInfo,\n          screenName: activeSubSampleTab,\n          activeSubSampleTab,\n          subSampleCommentDataState: this.state.subSampleCommentDataState,\n          subSampleAttachmentDataState: this.state.subSampleAttachmentDataState,\n          activeTabIndex: tabProps.activeTabIndex ? tabProps.activeTabIndex : this.state.activeTabIndex\n        };\n        this.props.getSubSampleChildTabDetail(inputData);\n      }\n    };\n\n    this.ontestTabChange = tabProps => {\n      const activeTestTab = tabProps.screenName;\n\n      if (activeTestTab !== this.props.Login.activeTestTab) {\n        if (this.props.Login.masterData.selectedTest && this.props.Login.masterData.selectedTest.length > 0) {\n          let inputData = {\n            masterData: this.props.Login.masterData,\n            selectedTest: this.props.Login.masterData.selectedTest,\n            ntransactiontestcode: this.props.Login.masterData.selectedTest ? String(this.props.Login.masterData.selectedTest.map(item => item.ntransactiontestcode).join(\",\")) : \"-1\",\n            npreregno: this.props.Login.masterData.selectedSample ? this.props.Login.masterData.selectedSample.map(item => item.npreregno).join(\",\") : \"-1\",\n            userinfo: this.props.Login.userInfo,\n            activeTestTab,\n            screenName: activeTestTab,\n            resultDataState: this.state.resultDataState,\n            testCommentDataState: this.state.testCommentDataState,\n            testAttachmentDataState: this.state.testAttachmentDataState\n          };\n          this.props.getTestChildTabDetailRegistration(inputData, true);\n        } else {\n          toast.info(this.props.intl.formatMessage({\n            id: \"IDS_SELECTTEST\"\n          }));\n        }\n      }\n    };\n\n    this.onDropComponentFile = (attachedFiles, fieldName, maxSize) => {\n      let selectedFile = this.state.selectedFile || {};\n      selectedFile[fieldName] = onDropAttachFileList(selectedFile[fieldName], attachedFiles, maxSize);\n      this.setState({\n        selectedFile,\n        actionType: \"new\"\n      });\n    };\n\n    this.handleFilterDateChange = (dateName, dateValue) => {\n      const {\n        selectedFilter\n      } = this.state;\n\n      if (dateValue === null) {\n        dateValue = new Date();\n      }\n\n      selectedFilter[dateName] = dateValue;\n      this.setState({\n        selectedFilter\n      });\n    };\n\n    this.onUpdateRegistrationConfirm = () => {\n      this.showAlert();\n      this.onUpdateRegistration(this.props.Login.regEditParam.saveType, this.props.Login.regEditParam.formRef, this.props.Login.regEditParam.operation, 2);\n    };\n\n    this.onCreateTestConfirm = () => {\n      this.showAlert();\n      const inputData = { ...this.props.Login.createTestConfirmParam.inputParam.inputData,\n        skipmethodvalidity: true\n      };\n\n      if (this.props.Login.loadAdhocTest) {\n        this.props.createAdhocTest({ ...this.props.Login.createTestConfirmParam.inputParam,\n          inputData\n        }, this.props.Login.createTestConfirmParam.masterData, this.props.Login.createTestConfirmParam.modalName);\n      } else {\n        this.props.createRegistrationTest({ ...this.props.Login.createTestConfirmParam.inputParam,\n          inputData\n        }, this.props.Login.createTestConfirmParam.masterData, this.props.Login.createTestConfirmParam.modalName);\n      }\n    };\n\n    this.onPreregConfirm = () => {\n      this.showAlert();\n      const inputData = { ...this.props.Login.preregConfirmParam.inputParam.inputData,\n        skipmethodvalidity: true\n      };\n      this.props.insertRegistration({ ...this.props.Login.preregConfirmParam.inputParam,\n        inputData\n      }, this.props.Login.preregConfirmParam.masterData);\n    };\n\n    this.onCreateSubSampleConfirm = () => {\n      this.showAlert();\n      const inputData = { ...this.props.Login.subSampleConfirmParam.inputParam.inputData,\n        skipmethodvalidity: true\n      };\n      this.props.saveSubSample({ ...this.props.Login.subSampleConfirmParam.inputParam,\n        inputData\n      });\n    };\n\n    this.onAcceptConfirm = () => {\n      this.showAlert();\n      let inputData = { ...this.props.Login.acceptConfirmParam.inputParam.inputData\n      };\n      inputData['url'] = this.props.Login.settings[24];\n      inputData = { ...inputData,\n        skipmethodvalidity: true\n      };\n      this.props.acceptRegistration({ ...this.props.Login.acceptConfirmParam.inputParam,\n        inputData\n      }, this.props.Login.acceptConfirmParam.masterData);\n    };\n\n    this.confirmAlert = () => {\n      if (this.state.showConfirmAlert) {\n        if (this.props.Login.regDateEditConfirmMessage) {\n          this.confirmMessage.confirm(this.props.intl.formatMessage({\n            id: \"IDS_WARNING\"\n          }), this.props.intl.formatMessage({\n            id: \"IDS_WARNING\"\n          }), this.props.Login.regDateEditConfirmMessage, this.props.intl.formatMessage({\n            id: \"IDS_OK\"\n          }), this.props.intl.formatMessage({\n            id: \"IDS_CANCEL\"\n          }), () => this.onUpdateRegistrationConfirm(), undefined, () => this.showAlert());\n        }\n\n        if (this.props.Login.createTestConfirmMessage) {\n          this.confirmMessage.confirm(this.props.intl.formatMessage({\n            id: \"IDS_WARNING\"\n          }), this.props.intl.formatMessage({\n            id: \"IDS_WARNING\"\n          }), this.props.Login.createTestConfirmMessage, this.props.intl.formatMessage({\n            id: \"IDS_OK\"\n          }), this.props.intl.formatMessage({\n            id: \"IDS_CANCEL\"\n          }), () => this.onCreateTestConfirm(), undefined, () => this.showAlert());\n        } else if (this.props.Login.preregConfirmMessage) {\n          this.confirmMessage.confirm(this.props.intl.formatMessage({\n            id: \"IDS_WARNING\"\n          }), this.props.intl.formatMessage({\n            id: \"IDS_WARNING\"\n          }), this.props.Login.preregConfirmMessage, this.props.intl.formatMessage({\n            id: \"IDS_OK\"\n          }), this.props.intl.formatMessage({\n            id: \"IDS_CANCEL\"\n          }), () => this.onPreregConfirm(), undefined, () => this.showAlert());\n        } else if (this.props.Login.subSampleConfirmMessage) {\n          this.confirmMessage.confirm(this.props.intl.formatMessage({\n            id: \"IDS_WARNING\"\n          }), this.props.intl.formatMessage({\n            id: \"IDS_WARNING\"\n          }), this.props.Login.subSampleConfirmMessage, this.props.intl.formatMessage({\n            id: \"IDS_OK\"\n          }), this.props.intl.formatMessage({\n            id: \"IDS_CANCEL\"\n          }), () => this.onCreateSubSampleConfirm(), undefined, () => this.showAlert());\n        } else if (this.props.Login.acceptConfirmMessage) {\n          this.confirmMessage.confirm(this.props.intl.formatMessage({\n            id: \"IDS_WARNING\"\n          }), this.props.intl.formatMessage({\n            id: \"IDS_WARNING\"\n          }), this.props.Login.acceptConfirmMessage, this.props.intl.formatMessage({\n            id: \"IDS_OK\"\n          }), this.props.intl.formatMessage({\n            id: \"IDS_CANCEL\"\n          }), () => this.onAcceptConfirm(), undefined, () => this.showAlert());\n        } else {\n          this.confirmMessage.confirm(this.props.intl.formatMessage({\n            id: \"IDS_WARNING\"\n          }), this.props.intl.formatMessage({\n            id: \"IDS_WARNING\"\n          }), this.props.Login.booleanFlag, \"ok\", \"Cancel\", () => this.insertRegistration(false), undefined, () => this.showAlert());\n        }\n      }\n    };\n\n    this.closeFilter = () => {\n      let Map = {}; //  selectedFilter[\"fromdate\"]\n\n      const obj = convertDateValuetoString(this.props.Login.masterData.RealFromDate, this.props.Login.masterData.RealToDate, this.props.Login.userInfo);\n      Map['inputValues'] = {\n        FromDate: this.props.Login.masterData.RealFromDate || new Date(),\n        ToDate: this.props.Login.masterData.RealToDate || new Date(),\n        fromdate: rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.RealFromDate) || new Date(),\n        todate: rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.RealToDate) || new Date(),\n        SampleType: this.props.Login.masterData.RealSampleTypeList || [],\n        SampleTypeValue: this.props.Login.masterData.RealSampleTypeValue || {},\n        RegistrationType: this.props.Login.masterData.RealRegTypeList || [],\n        RegistrationSubType: this.props.Login.masterData.RealRegSubTypeList || [],\n        FilterStatus: this.props.Login.masterData.RealFilterStatuslist || [],\n        DesignTemplateMapping: this.props.Login.masterData.RealDesignTemplateMappingList || [],\n        ApprovalConfigVersion: this.props.Login.masterData.RealApprovalConfigVersionList || [],\n        RegTypeValue: this.props.Login.masterData.RealRegTypeValue || {},\n        RegSubTypeValue: this.props.Login.masterData.RealRegSubTypeValue || {},\n        FilterStatusValue: this.props.Login.masterData.RealFilterStatusValue || {},\n        ApprovalConfigVersionValue: this.props.Login.masterData.RealApprovalConfigVersionValue || {},\n        DesignTemplateMappingValue: this.props.Login.masterData.RealDesignTemplateMappingValue || {},\n        ndesigntemplatemappingcode: this.props.Login.masterData.RealDesignTemplateMappingValue && this.props.Login.masterData.RealDesignTemplateMappingValue.ndesigntemplatemappingcode || -1,\n        napproveconfversioncode: this.props.Login.masterData.RealApprovalConfigVersionValue && this.props.Login.masterData.RealApprovalConfigVersionValue.napproveconfversioncode || -1\n      };\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          showFilter: false,\n          masterData: { ...this.props.Login.masterData,\n            ...Map.inputValues\n          },\n          selectedFilter: {\n            todate: Map.inputValues.todate,\n            fromdate: Map.inputValues.fromdate\n          }\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.showAlert = () => {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          showConfirmAlert: false\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.AddFile = () => {\n      let selectedRecord = this.state.selectedRecord;\n      let RealRegTypeValue = this.props.Login.masterData.RealRegTypeValue;\n      let booleanmanuf = true;\n\n      if (RealRegTypeValue === RegistrationType.PLASMA_POOL) {\n        booleanmanuf = selectedRecord[\"nmanufcode\"] > 0 && selectedRecord[\"nmanufcode\"] !== undefined ? true : false;\n      }\n\n      if (booleanmanuf) {\n        if (this.state.selectedRecord.nallottedspeccode !== undefined) {\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              loadFile: true,\n              ChildscreenName: \"File\",\n              childoperation: \"Import\",\n              parentPopUpSize: \"lg\",\n              selectedFile: undefined\n            }\n          };\n          this.props.updateStore(updateInfo);\n        } else {\n          toast.info(this.props.intl.formatMessage({\n            id: \"IDS_SELECTSPECIFICATION\"\n          }));\n        }\n      } else {\n        toast.info(this.props.intl.formatMessage({\n          id: \"IDS_SELECTMANUFACTURER\"\n        }));\n      }\n    };\n\n    this.onNumericInputChange = (value, name) => {\n      const selectComponent = this.state.selectComponent || {};\n\n      if (name !== \"nnoofcontainer\" && (value === 0 || value === 0.0)) {\n        selectComponent[name] = '';\n        this.setState({\n          selectComponent\n        });\n      } else if (name === 'nbarcodeprintcount') {\n        const selectedRecord = this.state.selectedRecord || {};\n        selectedRecord[name] = value;\n        this.setState({\n          selectedRecord\n        });\n      } else {\n        selectComponent[name] = value;\n        this.setState({\n          selectComponent\n        });\n      }\n    };\n\n    this.onSampleTypeChange = (event, fieldName, labelname) => {\n      if (event !== null) {\n        let Map = {};\n        Map[\"nsampletypecode\"] = parseInt(event.value);\n        Map['userinfo'] = this.props.Login.userInfo;\n        this.props.getSampleTypeChange(Map, this.props.Login.masterData, event, labelname);\n      }\n    };\n\n    this.ConfirmComponent = props => {\n      this.confirmMessage.confirm(\"confirmation\", \"Confirmation!\", \"Do You Want to Override the Existing Components ?\", \"ok\", \"cancel\", () => this.getComponentfromJava(props));\n    };\n\n    this.onRegTypeChange = (event, fieldName, labelname) => {\n      if (event !== null) {\n        let Map = {};\n        Map[\"nregtypecode\"] = parseInt(event.value);\n        Map['userinfo'] = this.props.Login.userInfo;\n        this.props.getRegTypeChange(Map, this.props.Login.masterData, event, labelname);\n      }\n    };\n\n    this.acceptRegistration = (registerId, skip, take) => {\n      let sampleList = [];\n\n      if (this.props.Login.masterData.searchedSample !== undefined) {\n        // sampleList = getSameRecordFromTwoArrays(this.props.Login.masterData.searchedSample, this.props.Login.masterData.RegistrationGetSample.slice(skip, skip + take), \"npreregno\");\n        const list = this.props.Login.masterData.searchedSample ? this.props.Login.masterData.searchedSample : this.props.Login.masterData.RegistrationGetSample;\n        sampleList = list ? list.slice(skip, skip + take) : [];\n      } else {\n        sampleList = this.props.Login.masterData.RegistrationGetSample && sortDataForDate(this.props.Login.masterData.RegistrationGetSample, 'dtransactiondate', 'npreregno').slice(skip, skip + take);\n      } // let sampleList = this.props.Login.masterData.searchedSample || [...this.props.Login.masterData.RegistrationGetSample].splice(skip, skip + take);\n\n\n      let acceptList = getSameRecordFromTwoArrays(sampleList || [], this.props.Login.masterData.selectedSample, \"npreregno\");\n\n      if (acceptList && acceptList.length > 0) {\n        if (acceptList.every(this.checkPreregisterAndQuarentine)) {\n          if (this.props.Login.masterData.selectedTest.length > 0) {\n            // if (checkTestPresent(this.props.Login.masterData.RegistrationGetTest, acceptList)) {\n            let Map = {};\n            Map[\"fromdate\"] = \"\";\n            Map[\"todate\"] = \"\";\n            Map[\"nsampletypecode\"] = this.props.Login.masterData.RealSampleTypeValue.nsampletypecode;\n            Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\n            Map[\"nregsubtypecode\"] = this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode;\n            Map[\"nneedjoballocation\"] = this.props.Login.masterData.RealRegSubTypeValue.nneedjoballocation ? this.props.Login.masterData.RealRegSubTypeValue.nneedjoballocation : false;\n            Map[\"nfilterstatus\"] = -1;\n            Map[\"npreregno\"] = acceptList && acceptList.map(sample => sample.npreregno).join(\",\"); // Map[\"npreregno\"] = this.props.Login.masterData.selectedSample &&\n            //     this.props.Login.masterData.selectedSample.map(sample => sample.npreregno).join(\",\");\n\n            Map[\"registrationsample\"] = this.props.Login.masterData.RegistrationGetSubSample;\n            let sampleCode = '';\n            this.props.Login.masterData.RegistrationGetSubSample && this.props.Login.masterData.RegistrationGetSubSample.map(sample => {\n              if (sample.ntransactionstatus != transactionStatus.CANCELLED && sample.ntransactionstatus != transactionStatus.REJECT) {\n                sampleCode += sample.ntransactionsamplecode + ',';\n              }\n            });\n            Map[\"ssamplecode\"] = sampleCode.substring(0, sampleCode.length - 1); // Map[\"ssamplecode\"] =  this.props.Login.masterData.RegistrationGetSubSample && (this.props.Login.masterData.RegistrationGetSubSample.map(x => x.ntransactionstatus != transactionStatus.CANCELLED &&  x.ntransactionstatus != transactionStatus.REJECT ? x.ntransactionsamplecode :\"\").join(\",\")).replace(/^,/, '');\n\n            Map[\"registration\"] = acceptList; //this.props.Login.masterData.selectedSample;\n\n            Map[\"registrationtest\"] = this.props.Login.masterData.selectedTest;\n            Map[\"ntransactionsamplecode\"] = this.props.Login.masterData.selectedSubSample.map(x => x.ntransactionsamplecode).join(\",\");\n            Map[\"ntransactiontestcode\"] = this.props.Login.masterData.selectedTest.map(x => x.ntransactiontestcode).join(\",\");\n            ;\n            Map[\"userinfo\"] = this.props.Login.userInfo;\n            Map[\"nflag\"] = 2;\n            Map[\"ntype\"] = 3;\n            Map[\"activeTestTab\"] = this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\";\n            Map[\"activeSampleTab\"] = this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\";\n            Map[\"activeSubSampleTab\"] = this.props.Login.activeSubSampleTab || \"IDS_SUBSAMPLEATTACHMENTS\";\n            Map[\"ndesigntemplatemappingcode\"] = this.props.Login.masterData.RealDesignTemplateMappingValue && this.props.Login.masterData.RealDesignTemplateMappingValue.ndesigntemplatemappingcode;\n            Map[\"napproveconfversioncode\"] = this.props.Login.masterData.RealApprovalConfigVersionValue && this.props.Login.masterData.RealApprovalConfigVersionValue.napproveconfversioncode;\n            Map[\"nneedtemplatebasedflow\"] = this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nneedtemplatebasedflow;\n            Map[\"nneedsubsample\"] = this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nneedsubsample; // Map[\"checkBoxOperation\"] = 3\n\n            Map[\"checkBoxOperation\"] = checkBoxOperation.SINGLESELECT;\n            Map[\"stransactiontestcode\"] = this.props.Login.masterData.selectedTest.map(sample => sample.ntransactiontestcode).join(\",\");\n            Map[\"url\"] = this.props.Login.settings[24];\n            Map[\"skipmethodvalidity\"] = false;\n            Map[\"OrderCodeData\"] = acceptList && acceptList.map(sample => sample.hasOwnProperty(\"OrderCodeData\") ? sample.OrderCodeData : -1).join(\",\");\n            Map[\"noutsourcerequired\"] = this.props.Login.masterData.RealSampleTypeValue.noutsourcerequired;\n            let inputParam = {\n              inputData: Map,\n              postParamList: this.postParamList,\n              action: 'accept'\n            };\n            this.confirmMessage.confirm(this.props.intl.formatMessage({\n              id: \"IDS_CONFIRMATION\"\n            }), this.props.intl.formatMessage({\n              id: \"IDS_CONFIRMATION\"\n            }), this.props.intl.formatMessage({\n              id: \"IDS_ACCEPTREGISTRATION\"\n            }), this.props.intl.formatMessage({\n              id: \"IDS_OK\"\n            }), this.props.intl.formatMessage({\n              id: \"IDS_CANCEL\"\n            }), () => this.acceptRegistrationConfirm(inputParam, registerId)); // } \n            // else {\n            //     let Map = {};\n            //     Map[\"fromdate\"] = \"\";\n            //     Map[\"todate\"] = \"\";\n            //     Map[\"nsampletypecode\"] = this.props.Login.masterData.RealSampleTypeValue.nsampletypecode;\n            //     Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\n            //     Map[\"nregsubtypecode\"] = this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode;\n            //     Map[\"nfilterstatus\"] = -1;\n            //     Map[\"npreregno\"] = acceptList &&\n            //         acceptList.map(sample => sample.npreregno).join(\",\");\n            //     // Map[\"npreregno\"] = this.props.Login.masterData.selectedSample &&\n            //     //     this.props.Login.masterData.selectedSample.map(sample => sample.npreregno).join(\",\");\n            //     Map[\"registrationsample\"] = this.props.Login.masterData.selectedSubSample;\n            //     Map[\"registrationtest\"] = this.props.Login.masterData.selectedTest;\n            //     Map[\"userinfo\"] = this.props.Login.userInfo;\n            //     Map[\"nflag\"] = 2;\n            //     Map[\"ntype\"] = 1;\n            //     Map[\"activeTestTab\"] = this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\";\n            //     Map[\"activeSampleTab\"] = this.props.Login.activeSubSampleTab || \"IDS_SUBSAMPLEATTACHMENTS\";\n            //     Map[\"activeSubSampleTab\"] = this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\";\n            //     Map[\"ndesigntemplatemappingcode\"] = this.props.Login.masterData.RealDesignTemplateMappingValue\n            //         && this.props.Login.masterData.RealDesignTemplateMappingValue.ndesigntemplatemappingcode;\n            //         Map[\"napproveconfversioncode\"] = this.props.Login.masterData.RealApprovalConfigVersionValue\n            //         && this.props.Login.masterData.RealApprovalConfigVersionValue.napproveconfversioncode;\n            //         Map[\"nneedtemplatebasedflow\"] = this.props.Login.masterData.RegSubTypeValue\n            //         && this.props.Login.masterData.RegSubTypeValue.nneedtemplatebasedflow;\n            //     Map[\"nneedsubsample\"] = this.props.Login.masterData.RegSubTypeValue\n            //         && this.props.Login.masterData.RegSubTypeValue.nneedsubsample;\n            //     Map[\"checkBoxOperation\"] = 3\n            //     Map[\"stransactiontestcode\"] = this.props.Login.masterData.selectedTest.map(sample => sample.ntransactiontestcode).join(\",\");\n            //     let inputParam = {\n            //         inputData: Map,\n            //         postParamList: this.postParamList,\n            //         action: 'accept'\n            //     }\n            //     this.confirmMessage.confirm(\"Confirmation\", \"Confirmation!\", \"IDS_REGISTERACTIONNEEDVALIDSTATUSTEST\",\n            //         \"OK\", \"Cancel\", () => this.acceptRegistrationConfirm(inputParam, registerId));\n            // }\n          } else {\n            toast.info(this.props.intl.formatMessage({\n              id: \"IDS_ADDTESTTOREGISTERSAMPLES\"\n            }));\n          }\n        } else {\n          toast.info(this.props.intl.formatMessage({\n            id: \"IDS_SELECTPREREGQUARANTINESAMPLES\"\n          }));\n        }\n      } else {\n        toast.info(this.props.intl.formatMessage({\n          id: \"IDS_SELECTPREREGQUARANTINESAMPLES\"\n        }));\n      }\n    };\n\n    this.acceptRegistrationConfirm = (inputParam, registerId) => {\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, registerId)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData: this.props.Login.masterData\n            },\n            openModal: true,\n            parentPopUpSize: 'lg',\n            screenName: this.props.Login.screenName,\n            operation: 'accept'\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.acceptRegistration(inputParam, this.props.Login.masterData);\n      }\n    };\n\n    this.selectQuarantine = (quarantineId, skip, take) => {\n      // let sampleList = this.props.Login.masterData.searchedSample || (this.props.Login.masterData.RegistrationGetSample ? [...this.props.Login.masterData.RegistrationGetSample].splice(skip, skip + take) : []);\n      let sampleList = [];\n      const list = this.props.Login.masterData.searchedSample ? this.props.Login.masterData.searchedSample : sortDataForDate(this.props.Login.masterData.RegistrationGetSample, 'dtransactiondate', 'npreregno');\n      sampleList = list ? list.slice(skip, skip + take) : [];\n      let quarentineList = getSameRecordFromTwoArrays(sampleList, this.props.Login.masterData.selectedSample, \"npreregno\");\n\n      if (quarentineList && quarentineList.length > 0) {\n        if (quarentineList.every(this.checkPreregisterRecordQuarantine)) {\n          // let ntransactionstatus = this.props.Login.masterData.selectedSample &&\n          //     this.props.Login.masterData.selectedSample.map(transactionStatus => transactionStatus.ntransactionstatus).join(\",\");\n          //if (ntransactionstatus === transactionStatus.PREREGISTER) {\n          let Map = {};\n          Map[\"fromdate\"] = \"\";\n          Map[\"todate\"] = \"\";\n          Map[\"nsampletypecode\"] = this.props.Login.masterData.RealSampleTypeValue.nsampletypecode;\n          Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\n          Map[\"nregsubtypecode\"] = this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode;\n          Map[\"nfilterstatus\"] = -1;\n          Map[\"npreregno\"] = quarentineList && quarentineList.map(sample => sample.npreregno).join(\",\");\n          Map[\"registrationsample\"] = this.props.Login.masterData.selectedSubSample;\n          Map[\"registrationtest\"] = this.props.Login.masterData.selectedTest;\n          Map[\"selectedSample\"] = quarentineList; //this.props.Login.masterData.selectedSample;\n\n          Map[\"userinfo\"] = this.props.Login.userInfo;\n          Map[\"nflag\"] = 2;\n          Map[\"ntype\"] = 1;\n          Map[\"activeTestTab\"] = this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\";\n          Map[\"activeSampleTab\"] = this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\";\n          Map[\"activeSubSampleTab\"] = this.props.Login.activeSubSampleTab || \"IDS_SUBSAMPLEATTACHMENTS\";\n          Map[\"withoutgetparameter\"] = 3;\n          Map[\"ndesigntemplatemappingcode\"] = this.props.Login.masterData.RealDesignTemplateMappingValue && this.props.Login.masterData.RealDesignTemplateMappingValue.ndesigntemplatemappingcode;\n          Map[\"napproveconfversioncode\"] = this.props.Login.masterData.RealApprovalConfigVersionValue && this.props.Login.masterData.RealApprovalConfigVersionValue.napproveconfversioncode;\n          Map[\"nneedtemplatebasedflow\"] = this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nneedtemplatebasedflow;\n          Map[\"nneedsubsample\"] = this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nneedsubsample; //Map[\"checkBoxOperation\"] = 3\n          // Map[\"checkBoxOperation\"] = 3\n\n          Map[\"checkBoxOperation\"] = checkBoxOperation.SINGLESELECT;\n          Map[\"stransactiontestcode\"] = this.props.Login.masterData.selectedTest.map(sample => sample.ntransactiontestcode).join(\",\");\n          Map[\"ntransactionstatus\"] = quarentineList && quarentineList.map(transactionStatus => transactionStatus.ntransactionstatus).join(\",\"); //Map[\"ninsertpreregno\"] = quarantineSample.quarantineSample.npreregno;\n\n          let inputParam = {\n            inputData: Map,\n            postParamList: this.postParamList,\n            action: 'quarantine'\n          }; //console.log(\"inputParam, quarantine:\", inputParam);\n\n          if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, quarantineId)) {\n            const updateInfo = {\n              typeName: DEFAULT_RETURN,\n              data: {\n                loadEsign: true,\n                screenData: {\n                  inputParam,\n                  masterData: this.props.Login.masterData\n                },\n                openModal: true,\n                parentPopUpSize: 'lg',\n                screenName: this.props.Login.screenName,\n                operation: 'quarantine'\n              }\n            };\n            this.props.updateStore(updateInfo);\n          } else {\n            this.props.preregRecordToQuarantine(inputParam, this.props.Login.masterData);\n          }\n        } else {\n          toast.info(this.props.intl.formatMessage({\n            id: \"IDS_SELECTPREREGISTERSAMPLES\"\n          }));\n        }\n      } else {\n        toast.info(this.props.intl.formatMessage({\n          id: \"IDS_SELECTPREREGISTERSAMPLES\"\n        }));\n      }\n    };\n\n    this.onRegSubTypeChange = (event, fieldName, labelname) => {\n      if (event !== null) {\n        let Map = {};\n        Map['nregtypecode'] = this.props.Login.masterData.RegTypeValue.nregtypecode;\n        Map[\"nregsubtypecode\"] = parseInt(event.value);\n        Map[\"nneedtemplatebasedflow\"] = event.item.nneedtemplatebasedflow;\n        Map['userinfo'] = this.props.Login.userInfo;\n        this.props.getRegSubTypeChange(Map, this.props.Login.masterData, event, labelname);\n      }\n    };\n\n    this.onApprovalConfigVersionChange = (event, fieldName, labelname) => {\n      if (event !== null) {\n        let Map = {};\n        Map['nregtypecode'] = this.props.Login.masterData.RegTypeValue.nregtypecode;\n        Map[\"nregsubtypecode\"] = this.props.Login.masterData.RegSubTypeValue.nregsubtypecode; //  Map[\"nneedtemplatebasedflow\"] = event.item.nneedtemplatebasedflow;\n\n        Map[\"napproveconfversioncode\"] = event.value;\n        Map['userinfo'] = this.props.Login.userInfo;\n        this.props.onApprovalConfigVersionChange(Map, this.props.Login.masterData, event, labelname);\n      }\n    };\n\n    this.onDesignTemplateChange = (event, fieldName, labelname) => {\n      let masterData = this.props.Login.masterData;\n      masterData = { ...masterData,\n        [labelname]: { ...event.item\n        }\n      };\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          masterData\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onInputOnChange = event => {\n      const selectedRecord = this.state.selectedRecord || {};\n      const selectedPrinterData = this.state.selectedPrinterData || {};\n\n      if (event.target.type === 'checkbox') {\n        selectedRecord[event.target.name] = event.target.checked === true ? 3 : 4;\n\n        if (event.target.name === 'nclientprinter' && event.target.checked === true) {//const printers =   window.navigator.printer.getPrinters();\n          /////const names = printers.map(printer => printer.name);\n          //selectedPrinterDatas {printername: { = names;\n          // this.setState({ selectedPrinterData });\n        }\n      } else {\n        selectedRecord[event.target.name] = event.target.value;\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onComboChange = (comboData, fieldName) => {\n      // if (comboData !== null) {\n      let selectedDetailField = {};\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (fieldName === 'nexternalordercode') {\n        // selectedRecord[fieldName] = comboData;\n        selectedDetailField = comboData && comboData.item; //   this.setState({ selectedRecord, selectedDetailField });\n      } //  else if (fieldName === \"nexternalordertypecode\") {\n      //     selectedRecord[fieldName] = comboData;\n      //     const inputParem = {\n      //         userinfo: this.props.Login.userInfo,\n      //         selectedRecord,\n      //         externalordertypecode: selectedRecord[\"nexternalordertypecode\"].value,\n      //         npreregno: this.props.Login.orderDetails && this.props.Login.orderDetails.subSample.npreregno,\n      //         sampleorderid: this.props.Login.orderDetails && this.props.Login.orderDetails.subSample.sampleorderid\n      //         , masterData: this.props.Login.masterData\n      //     }\n      //     this.props.getExternalOrderForMapping(inputParem)\n      // } \n      // else {\n\n\n      selectedRecord[fieldName] = comboData;\n      this.setState({\n        selectedRecord,\n        selectedDetailField\n      }); // }\n      // }\n    };\n\n    this.handleDateChange = (dateName, dateValue) => {\n      const {\n        selectedRecord\n      } = this.state;\n      selectedRecord[dateName] = dateValue;\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onComboTestPackageChange = (comboData, fieldName) => {\n      // if (comboData !== null) {\n      const selectedRecord = this.state.selectedRecord || {};\n      selectedRecord[fieldName] = comboData;\n      this.setState({\n        selectedRecord\n      }); // }\n    };\n\n    this.PrinterChange = (comboData, fieldName) => {\n      const selectedPrinterData = this.state.selectedPrinterData || {};\n      selectedPrinterData[fieldName] = comboData;\n      this.setState({\n        selectedPrinterData\n      });\n    };\n\n    this.closeChildModal = () => {\n      let loadEsign = this.props.Login.loadEsign;\n      let loadRegSubSample = this.props.Login.loadRegSubSample;\n      let loadFile = this.props.Login.loadFile;\n      let showSaveContinue = this.props.Login.showSaveContinue;\n      let screenName = this.props.Login.screenName;\n      let loadChildTest = this.props.Login.loadChildTest;\n      let loadAdhocTest = this.props.Login.loadAdhocTest;\n      let openModal = this.props.Login.openModal;\n      let selectedRecord = this.state.selectedRecord;\n      let TestCombined = [];\n      let TestPackage = [];\n      let availableTest = [];\n      let Test = this.props.Login.Test || [];\n      let selectedMaster = this.props.Login.selectedMaster;\n      let selectedControl = this.props.Login.selectedControl;\n      let masterextractedColumnList = this.props.Login.masterextractedColumnList;\n      let masterfieldList = this.props.Login.masterfieldList;\n      let masterdataList = this.props.Login.masterfieldList;\n      let mastercomboComponents = this.props.Login.masterfieldList;\n      let masterwithoutCombocomponent = this.props.Login.masterfieldList;\n      let masterComboColumnFiled = this.props.Login.masterComboColumnFiled;\n      let masterOperation = this.props.Login.masterOperation;\n      let masterEditObject = this.props.Login.masterEditObject;\n      let masterDesign = this.props.Login.masterDesign;\n      let addMaster = this.props.Login.addMaster;\n      let masterIndex = this.props.Login.masterIndex;\n      let availableAdhocTest = [];\n\n      if (this.props.Login.loadEsign) {\n        loadEsign = false;\n        selectedRecord[\"esigncomments\"] = \"\";\n        selectedRecord[\"esignpassword\"] = \"\";\n        selectedRecord['esignreason'] = '';\n      }\n\n      if (addMaster) {\n        if (masterIndex !== 0) {\n          screenName = selectedControl[masterIndex - 1].displayname[this.props.Login.userInfo.slanguagetypecode];\n          selectedMaster = removeIndex(selectedMaster, masterIndex);\n          selectedControl = removeIndex(selectedControl, masterIndex);\n          masterextractedColumnList = masterextractedColumnList && removeIndex(masterextractedColumnList, masterIndex);\n          masterfieldList = masterfieldList && removeIndex(masterfieldList, masterIndex);\n          masterdataList = masterdataList && removeIndex(masterdataList, masterIndex);\n          mastercomboComponents = mastercomboComponents && removeIndex(mastercomboComponents, masterIndex);\n          masterComboColumnFiled = masterComboColumnFiled && removeIndex(masterComboColumnFiled, masterIndex);\n          masterwithoutCombocomponent = masterwithoutCombocomponent && removeIndex(masterwithoutCombocomponent, masterIndex);\n          masterDesign = masterDesign && removeIndex(masterDesign, masterIndex);\n          masterOperation = masterOperation && removeIndex(masterOperation, masterIndex);\n          masterEditObject = masterEditObject && removeIndex(masterEditObject, masterIndex);\n          masterIndex = masterIndex - 1;\n        } else {\n          selectedMaster = [];\n          selectedControl = [];\n          masterextractedColumnList = [];\n          masterfieldList = [];\n          addMaster = false;\n          masterdataList = [];\n          mastercomboComponents = [];\n          masterwithoutCombocomponent = [];\n          masterComboColumnFiled = [];\n          masterDesign = [];\n          masterOperation = [];\n          masterEditObject = [];\n          masterIndex = undefined;\n          screenName = this.props.Login.inputParam.displayName;\n        }\n      } else if (this.props.Login.loadFile) {\n        loadFile = false;\n        screenName = this.props.Login.PopUpLabel;\n      } else if (this.props.Login.loadChildTest) {\n        loadChildTest = false;\n        openModal = false;\n        selectedRecord = {};\n        TestCombined = [];\n        TestPackage = [];\n        availableTest = [];\n        Test = [];\n      } else if (this.props.Login.loadRegSubSample) {\n        loadRegSubSample = false;\n        openModal = false;\n        selectedRecord = {};\n        TestCombined = [];\n        TestPackage = [];\n        availableTest = [];\n        Test = [];\n      } //ALPD-3615\n      else if (this.props.Login.loadAdhocTest) {\n        if (this.props.Login.loadEsign) {\n          loadEsign = false; // openModal = false;\n          // selectedRecord = {};\n          // availableAdhocTest = [];\n        } else {\n          loadAdhocTest = false;\n          openModal = false;\n          selectedRecord = {};\n          availableAdhocTest = [];\n        }\n      }\n\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          loadRegSubSample,\n          screenName,\n          showSaveContinue,\n          loadFile,\n          loadChildTest,\n          loadAdhocTest,\n          openModal,\n          selectedRecord,\n          TestCombined,\n          TestPackage,\n          availableTest,\n          Test,\n          selectedMaster,\n          selectedControl,\n          masterextractedColumnList,\n          masterfieldList,\n          addMaster,\n          masterIndex,\n          masterdataList,\n          mastercomboComponents,\n          masterwithoutCombocomponent,\n          masterOperation,\n          masterEditObject,\n          masterComboColumnFiled,\n          masterDesign,\n          loadEsign\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.closeModal = () => {\n      let loadEsign = this.props.Login.loadEsign;\n      let openModal = this.props.Login.openModal;\n      let selectedRecord = this.props.Login.selectedRecord;\n      let loadPreregister = this.props.Login.loadPreregister;\n      let openChildModal = this.props.Login.openChildModal;\n      let parentPopUpSize = this.props.Login.pare;\n      let screenName = this.props.Login.screenName;\n      let loadPrinter = this.props.Login.loadPrinter;\n      let openPortal = this.props.Login.openPortal;\n      let Component = this.props.Login.Component;\n      let subSampleDataGridList = this.props.Login.subSampleDataGridList;\n      let TestCombined = this.props.Login.TestCombined;\n      let selectedPrinterData = this.props.Login.selectedPrinterData;\n      let outsourcetest = this.props.Login.outsourcetest;\n\n      if (this.props.Login.loadEsign) {\n        if (this.props.Login.operation === \"accept\" || this.props.Login.operation === \"cancel\" || this.props.Login.operation === \"quarantine\") {\n          loadEsign = false;\n          openModal = false;\n          openChildModal = false;\n          loadPreregister = false;\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              loadEsign,\n              openModal,\n              openChildModal,\n              loadPreregister\n            }\n          };\n          this.props.updateStore(updateInfo);\n        } else {\n          loadEsign = false;\n          selectedRecord[\"esigncomments\"] = \"\";\n          selectedRecord[\"esignpassword\"] = \"\";\n          selectedRecord['esignreason'] = '';\n\n          if (loadPreregister) {\n            parentPopUpSize = 'xl';\n            openPortal = true;\n            openModal = false;\n          }\n\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              loadEsign,\n              parentPopUpSize,\n              openPortal,\n              openModal,\n              selectedRecord,\n              outsourcetest\n            }\n          };\n          this.props.updateStore(updateInfo);\n        }\n      } else {\n        openModal = false;\n        loadPrinter = false;\n        loadPreregister = false;\n        selectedRecord = {};\n        openPortal = false;\n        subSampleDataGridList = [];\n        selectedPrinterData = {};\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            openModal,\n            loadPreregister,\n            selectedRecord,\n            screenName,\n            insertSourcePreregno: undefined,\n            loadPrinter,\n            openPortal,\n            Component,\n            subSampleDataGridList,\n            selectedPrinterData,\n            outsourcetest\n          }\n        };\n        this.props.updateStore(updateInfo);\n      }\n    };\n\n    this.onSaveCancelOrder = () => {\n      if (this.state.addedOrderSampleList.length > 0) {\n        let sexternalordersamplecode = this.state.addedOrderSampleList && this.state.addedOrderSampleList.map(x => x.nexternalordersamplecode).join(\",\").replace(/,\\s*$/, \"\"); // let sexternalordercode = this.state.addedOrderSampleList && (this.state.addedOrderSampleList.map(x=>x.nexternalordercode).join(\",\")).replace(/,\\s*$/, \"\");\n\n        const unique = [...new Map(this.state.addedOrderSampleList.map(m => [m.nexternalordercode, m])).values()];\n        let sexternalordercode = unique.map(x => x.nexternalordercode).join(\",\").replace(/,\\s*$/, \"\");\n        const inputData = {\n          sexternalordersamplecode: sexternalordersamplecode,\n          sexternalordercode: sexternalordercode,\n          userinfo: this.props.Login.userInfo,\n          masterData: this.props.Login.masterData,\n          url: this.props.Login.settings[24]\n        };\n        const inputParam = {\n          inputData\n        };\n\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolcode)) {\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              loadEsign: true,\n              screenData: {\n                inputParam,\n                masterData: this.props.Login.masterData\n              },\n              openModal: true,\n              screenName: \"ExternalOrderSample\",\n              operation: \"cancel\"\n            }\n          };\n          this.props.updateStore(updateInfo);\n        } else {\n          this.props.onUpdateCancelExternalOrder(inputParam);\n        }\n      } else {\n        toast.info(this.props.intl.formatMessage({\n          id: \"IDS_SELECTEXTERNALSAMPLEID\"\n        }));\n      }\n    };\n\n    this.onSaveClick = (saveType, formRef) => {\n      let operation = this.props.Login.operation;\n\n      if (operation === \"update\") {\n        this.onUpdateRegistration(saveType, formRef, operation);\n      }\n    };\n\n    this.onSavePrinterClick = () => {\n      let insertlist = []; //this.state.selectedPrinterData.sprintername && this.state.selectedPrinterData.sprintername.map(source=>insertlist.push({npreregno:this.props.Login.insertSourcePreregno,sprintername:source.value}))\n\n      const inputParam = {\n        classUrl: 'barcode',\n        methodUrl: 'Barcode',\n        displayName: this.props.Login.inputParam.displayName,\n        inputData: {\n          npreregno: this.props.Login.insertPrinterPreregno,\n          sbarcodename: this.state.selectedPrinterData.sbarcodename ? this.state.selectedPrinterData.sbarcodename.value : '',\n          sprintername: this.state.selectedPrinterData.sprintername ? this.state.selectedPrinterData.sprintername.value : '',\n          insertlist,\n          npreregno: this.props.Login.masterData.selectedSample ? this.props.Login.masterData.selectedSample.map(x => x.npreregno).join(\",\") : \"-1\",\n          ntransactionsamplecode: this.props.Login.masterData.selectedSubSample ? this.props.Login.masterData.selectedSubSample.map(x => x.ntransactionsamplecode).join(\",\") : \"-1\",\n          userinfo: this.props.Login.userInfo,\n          ncontrolcode: this.props.Login.ncontrolcode\n        },\n        operation: 'printer',\n        // dataState:this.state.sourceDataState,\n        // activeSampleTab:\"IDS_SOURCE\",\n        action: 'printer'\n      };\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolcode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData: this.props.Login.masterData\n            },\n            openModal: true,\n            screenName: this.props.intl.formatMessage({\n              id: this.props.Login.inputParam.displayName\n            }),\n            operation: 'printer'\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\n      }\n    };\n\n    this.onSaveFileClick = (saveType, formRef) => {\n      const selectedFile = this.state.selectedFile;\n      const selectedRecord = this.state.selectedRecord;\n      const acceptedFiles = selectedFile.sfilename;\n      const formData = new FormData(); // if(nattachmenttypecode === attachmentType.FTP) {\n\n      if (acceptedFiles && acceptedFiles.length > 0) {\n        acceptedFiles.forEach((file, index) => {\n          formData.append(\"uploadedFile\" + index, file);\n        });\n        formData.append(\"filecount\", acceptedFiles.length);\n      } else {\n        toast.info(this.props.intl.formatMessage({\n          id: \"IDS_SELECTANYONEFILETOSUBMIT\"\n        }));\n      }\n\n      formData.append(\"userinfo\", JSON.stringify(this.props.Login.userInfo));\n      formData.append(\"nstudyplan\", JSON.stringify(selectedRecord.nallottedspeccode.value));\n      formData.append(\"testrequired\", JSON.stringify(selectedRecord.ntransactionstatus === 3 ? true : false));\n      formData.append(\"ntemplatemanipulationcode\", JSON.stringify(selectedRecord.ntemplatemanipulationcode));\n      formData.append(\"nregtypecode\", JSON.stringify(this.props.Login.masterData.RealRegTypeValue.nregtypecode));\n      formData.append(\"nregsubtypecode\", JSON.stringify(this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode));\n      this.props.ImportFile(formData, this.confirmMessage, this.props.Login);\n    };\n\n    this.sampleInfoDataStateChange = event => {\n      this.setState({\n        sampleGridDataState: event.dataState\n      }); //ALPD-657\n      //this.changePropertyView(1)\n    };\n\n    this.dataStateChange = event => {\n      switch (this.props.Login.activeSampleTab) {\n        case \"IDS_SOURCE\":\n          this.setState({\n            sourceDataState: event.dataState\n          });\n          break;\n\n        case \"IDS_SAMPLECOMMENTS\":\n          this.setState({\n            sampleCommentDataState: event.dataState\n          });\n          break;\n\n        default:\n          this.setState({\n            sourceDataState: event.dataState\n          });\n          break;\n      }\n    };\n\n    this.subSampledataStateChange = event => {\n      switch (this.props.Login.activeSubSampleTab) {\n        case \"IDS_SUBSAMPLECOMMENTS\":\n          this.setState({\n            subSampleCommentDataState: event.dataState\n          });\n          break;\n\n        case \"IDS_SUBSAMPLEATTACHMENTS\":\n          this.setState({\n            subSampleAttachmentDataState: event.dataState\n          });\n          break;\n\n        default:\n          this.setState({\n            popUptestDataState: event.dataState\n          });\n          break;\n      }\n    };\n\n    this.testdataStateChange = event => {\n      switch (this.props.Login.activeSampleTab) {\n        case \"IDS_TEST\":\n          this.setState({\n            popUptestDataState: event.dataState\n          });\n          break;\n\n        case \"IDS_TESTCOMMENTS\":\n          this.setState({\n            testCommentDataState: event.dataState\n          });\n          break;\n\n        case \"IDS_TESTATTACHMENTS\":\n          this.setState({\n            testAttachmentDataState: event.dataState\n          });\n          break;\n\n        default:\n          this.setState({\n            popUptestDataState: event.dataState\n          });\n          break;\n      }\n    };\n\n    this.testStateChange = event => {\n      this.setState({\n        testDataState: event.dataState\n      });\n    };\n\n    this.outsourceDataStateChange = event => {\n      switch (this.props.Login.activeSampleTab) {\n        case \"IDS_EXTERNALORDERREPORTS\":\n          this.setState({\n            externalOrderAttachmentDataState: event.dataState\n          });\n          break;\n\n        default:\n          this.setState({\n            outsourceDetailsDataState: event.dataState\n          });\n          break;\n      }\n    };\n\n    this.viewExternalOrderAttachmentFile = filedata => {\n      delete filedata.inputData.userinfo;\n      const inputParam = {\n        inputData: {\n          externalorderattachment: filedata.inputData,\n          userinfo: this.props.Login.userInfo,\n          ncontrolcode: filedata.ncontrolCode\n        },\n        classUrl: \"registration\",\n        operation: \"view\",\n        methodUrl: \"ExternalOrderAttachment\"\n      };\n      this.props.viewAttachment(inputParam);\n    };\n\n    this.sampleTabDetail = () => {\n      let npreregno = this.props.Login.masterData.selectedSample ? this.props.Login.masterData.selectedSample.map(sample => sample.npreregno).join(\",\") : \"-1\";\n      const tabMap = new Map();\n      let sampleList = this.props.Login.masterData.RegistrationGetSample || [];\n      let {\n        skip,\n        take\n      } = this.state;\n      sampleList = sampleList.slice(skip, skip + take);\n      let selectedSampleList = getSameRecordFromTwoArrays(sampleList, this.props.Login.masterData.selectedSample, \"npreregno\");\n      tabMap.set(\"IDS_ATTACHMENTS\", /*#__PURE__*/React.createElement(Attachments, {\n        screenName: \"IDS_SAMPLEATTACHMENTS\",\n        onSaveClick: this.onAttachmentSaveClick,\n        selectedMaster: \"selectedSample\",\n        controlMap: this.state.controlMap,\n        userRoleControlRights: this.state.userRoleControlRights,\n        attachments: this.props.Login.masterData.RegistrationAttachment || [],\n        deleteRecord: this.props.deleteAttachment,\n        masterList: this.props.Login.masterData.selectedSample,\n        masterAlertStatus: \"IDS_SELECTSAMPLETOADDATTACHMENT\",\n        fetchRecord: this.props.getAttachmentCombo,\n        viewFile: this.props.viewAttachment,\n        addName: \"AddSampleAttachment\",\n        editName: \"EditSampleAttachment\",\n        deleteName: \"DeleteSampleAttachment\",\n        viewName: \"ViewSampleAttachment\",\n        methodUrl: \"SampleAttachment\",\n        userInfo: this.props.Login.userInfo,\n        skip: this.props.Login.inputParam ? this.props.Login.inputParam.attachmentskip || 0 : 0,\n        take: this.props.Login.inputParam ? this.props.Login.inputParam.attachmenttake || 10 : this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5,\n        deleteParam: {\n          methodUrl: \"SampleAttachment\",\n          npreregno,\n          userInfo: this.props.Login.userInfo,\n          masterData: this.props.Login.masterData,\n          esignRights: this.props.Login.userRoleControlRights\n        },\n        editParam: {\n          methodUrl: \"SampleAttachment\",\n          npreregno,\n          userInfo: this.props.Login.userInfo,\n          masterData: this.props.Login.masterData,\n          esignRights: this.props.Login.userRoleControlRights,\n          masterList: this.props.Login.masterData.RegistrationGetSample || []\n        },\n        selectedListName: \"IDS_SAMPLE\",\n        displayName: \"sarno\",\n        isneedHeader: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 5918,\n          columnNumber: 39\n        }\n      }));\n      tabMap.set(\"IDS_SAMPLECOMMENTS\", /*#__PURE__*/React.createElement(Comments, {\n        screenName: \"IDS_SAMPLECOMMENTS\",\n        onSaveClick: this.onCommentsSaveClick,\n        selectedMaster: \"selectedSample\",\n        controlMap: this.state.controlMap,\n        userRoleControlRights: this.state.userRoleControlRights,\n        Comments: this.props.Login.masterData.RegistrationComment || [],\n        fetchRecord: this.props.getCommentsCombo,\n        addName: \"AddSampleComment\",\n        editName: \"EditSampleComment\",\n        deleteName: \"DeleteSampleComment\",\n        methodUrl: \"SampleComment\",\n        isTestComment: false,\n        masterList: selectedSampleList,\n        masterAlertStatus: \"IDS_SELECTSAMPLETOADDCOMMENTS\",\n        primaryKeyField: \"nregcommentcode\",\n        dataState: this.state.testCommentDataState,\n        dataStateChange: this.testDataStateChange,\n        deleteParam: {\n          methodUrl: \"SampleComment\",\n          npreregno,\n          userInfo: this.props.Login.userInfo,\n          masterData: this.props.Login.masterData,\n          esignRights: this.props.Login.userRoleControlRights,\n          screenName: \"IDS_SAMPLECOMMENTS\"\n        },\n        editParam: {\n          methodUrl: \"SampleComment\",\n          npreregno,\n          userInfo: this.props.Login.userInfo,\n          masterData: this.props.Login.masterData,\n          esignRights: this.props.Login.userRoleControlRights,\n          screenName: \"IDS_SAMPLECOMMENTS\",\n          operation: \"update\",\n          masterList: this.props.Login.masterData.RegistrationGetSample || [],\n          ncontrolCode: this.state.controlMap.has(\"EditSampleComment\") && this.state.controlMap.get(\"EditSampleComment\").ncontrolcode\n        },\n        selectedListName: \"IDS_SAMPLES\",\n        displayName: \"sarno\",\n        selectedId: this.props.Login.selectedId || null,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 5960,\n          columnNumber: 42\n        }\n      }));\n      return tabMap;\n    };\n\n    this.sampleComments = () => {\n      let npreregno = this.props.Login.masterData.selectedSample ? this.props.Login.masterData.selectedSample.map(sample => sample.npreregno).join(\",\") : \"-1\";\n      const tabMap = new Map();\n      let sampleList = this.props.Login.masterData.RegistrationGetSample || [];\n      let {\n        skip,\n        take\n      } = this.state;\n      sampleList = sampleList.slice(skip, skip + take);\n      let selectedSampleList = getSameRecordFromTwoArrays(sampleList, this.props.Login.masterData.selectedSample, \"npreregno\");\n      return /*#__PURE__*/React.createElement(Comments, {\n        screenName: \"IDS_SAMPLECOMMENTS\",\n        onSaveClick: this.onCommentsSaveClick,\n        selectedMaster: \"selectedSample\",\n        controlMap: this.state.controlMap,\n        userRoleControlRights: this.state.userRoleControlRights,\n        Comments: this.props.Login.masterData.RegistrationComment || [],\n        fetchRecord: this.props.getCommentsCombo,\n        addName: \"AddSampleComment\",\n        editName: \"EditSampleComment\",\n        deleteName: \"DeleteSampleComment\",\n        methodUrl: \"SampleComment\",\n        isTestComment: false,\n        masterList: selectedSampleList,\n        masterAlertStatus: \"IDS_SELECTSAMPLETOADDCOMMENTS\",\n        primaryKeyField: \"nregcommentcode\",\n        dataState: this.state.testCommentDataState,\n        dataStateChange: this.testDataStateChange,\n        deleteParam: {\n          methodUrl: \"SampleComment\",\n          npreregno,\n          userInfo: this.props.Login.userInfo,\n          masterData: this.props.Login.masterData,\n          esignRights: this.props.Login.userRoleControlRights,\n          screenName: \"IDS_SAMPLECOMMENTS\"\n        },\n        editParam: {\n          methodUrl: \"SampleComment\",\n          npreregno,\n          userInfo: this.props.Login.userInfo,\n          masterData: this.props.Login.masterData,\n          esignRights: this.props.Login.userRoleControlRights,\n          screenName: \"IDS_SAMPLECOMMENTS\",\n          operation: \"update\",\n          masterList: this.props.Login.masterData.RegistrationGetSample || [],\n          ncontrolCode: this.state.controlMap.has(\"EditSampleComment\") && this.state.controlMap.get(\"EditSampleComment\").ncontrolcode\n        },\n        selectedListName: \"IDS_SAMPLES\",\n        displayName: \"sarno\",\n        selectedId: this.props.Login.selectedId || null,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 6018,\n          columnNumber: 16\n        }\n      });\n    };\n\n    this.subsampleTabDetail = () => {\n      const ntransactionsamplecode = this.props.Login.masterData.selectedSubSample && this.props.Login.masterData.selectedSubSample.map(sample => sample.ntransactionsamplecode).join(\",\"); //console.log(\"ntransactionsamplecode\", ntransactionsamplecode)\n\n      const tabMap = new Map();\n      let subsampleList = this.props.Login.masterData.RegistrationGetSubSample || [];\n      let {\n        subsampleskip,\n        subsampletake\n      } = this.state;\n      subsampleList = subsampleList.slice(subsampleskip, subsampleskip + subsampletake);\n      let selectedSubSampleList = getSameRecordFromTwoArrays(subsampleList, this.props.Login.masterData.selectedSubSample, \"ntransactionsamplecode\");\n      tabMap.set(\"IDS_SUBSAMPLEATTACHMENTS\", /*#__PURE__*/React.createElement(Attachments, {\n        screenName: \"IDS_SUBSAMPLEATTACHMENTS\",\n        onSaveClick: this.onAttachmentSaveClick,\n        selectedMaster: \"selectedSubSample\",\n        controlMap: this.state.controlMap,\n        userRoleControlRights: this.state.userRoleControlRights,\n        attachments: this.props.Login.masterData.RegistrationSampleAttachment || [],\n        deleteRecord: this.props.deleteAttachment,\n        masterList: this.props.Login.masterData.selectedSubSample,\n        masterAlertStatus: \"IDS_SELECTSUBSAMPLETOADDATTACHMENT\",\n        fetchRecord: this.props.getAttachmentCombo,\n        viewFile: this.props.viewAttachment,\n        addName: \"AddSubSampleAttachment\",\n        editName: \"EditSubSampleAttachment\",\n        deleteName: \"DeleteSubSampleAttachment\",\n        viewName: \"ViewSubSampleAttachment\",\n        methodUrl: \"SubSampleAttachment\",\n        userInfo: this.props.Login.userInfo,\n        skip: this.props.Login.inputParam ? this.props.Login.inputParam.attachmentskip || 0 : 0,\n        take: this.props.Login.inputParam ? this.props.Login.inputParam.attachmenttake || 10 : this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5,\n        deleteParam: {\n          methodUrl: \"SubSampleAttachment\",\n          ntransactionsamplecode,\n          userInfo: this.props.Login.userInfo,\n          masterData: this.props.Login.masterData,\n          esignRights: this.props.Login.userRoleControlRights\n        },\n        editParam: {\n          methodUrl: \"SubSampleAttachment\",\n          ntransactionsamplecode,\n          userInfo: this.props.Login.userInfo,\n          masterData: this.props.Login.masterData,\n          esignRights: this.props.Login.userRoleControlRights,\n          masterList: this.props.Login.masterData.RegistrationGetSubSample || []\n        },\n        selectedListName: \"IDS_SUBSAMPLE\",\n        displayName: \"ssamplearno\",\n        isneedHeader: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 6074,\n          columnNumber: 48\n        }\n      }));\n      tabMap.set(\"IDS_SUBSAMPLECOMMENTS\", /*#__PURE__*/React.createElement(Comments, {\n        screenName: \"IDS_SUBSAMPLECOMMENTS\",\n        onSaveClick: this.onCommentsSaveClick,\n        selectedMaster: \"selectedSubSample\",\n        controlMap: this.state.controlMap,\n        userRoleControlRights: this.state.userRoleControlRights,\n        Comments: this.props.Login.masterData.RegistrationSampleComment || [],\n        fetchRecord: this.props.getCommentsCombo,\n        addName: \"AddSubSampleComment\",\n        editName: \"EditSubSampleComment\",\n        deleteName: \"DeleteSubSampleComment\",\n        methodUrl: \"SubSampleComment\",\n        isTestComment: false,\n        masterList: selectedSubSampleList,\n        masterAlertStatus: \"IDS_SELECTSUBSAMPLETOADDCOMMENTS\",\n        primaryKeyField: \"nsamplecommentcode\",\n        dataState: this.state.subSampleCommentDataState,\n        dataStateChange: this.subSampledataStateChange,\n        deleteParam: {\n          methodUrl: \"SubSampleComment\",\n          ntransactionsamplecode,\n          userInfo: this.props.Login.userInfo,\n          masterData: this.props.Login.masterData,\n          esignRights: this.props.Login.userRoleControlRights,\n          screenName: \"IDS_SUBSAMPLECOMMENTS\"\n        },\n        editParam: {\n          methodUrl: \"SubSampleComment\",\n          ntransactionsamplecode,\n          userInfo: this.props.Login.userInfo,\n          masterData: this.props.Login.masterData,\n          esignRights: this.props.Login.userRoleControlRights,\n          screenName: \"IDS_SUBSAMPLECOMMENTS\",\n          operation: \"update\",\n          masterList: this.props.Login.masterData.RegistrationGetSubSample || [],\n          ncontrolCode: this.state.controlMap.has(\"EditSubSampleComment\") && this.state.controlMap.get(\"EditSubSampleComment\").ncontrolcode\n        },\n        selectedListName: \"IDS_SUBSAMPLES\",\n        displayName: \"ssamplearno\",\n        selectedId: this.props.Login.selectedId || null,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 6116,\n          columnNumber: 45\n        }\n      }));\n      return tabMap;\n    };\n\n    this.subsampleComments = () => {\n      const ntransactionsamplecode = this.props.Login.masterData.selectedSubSample && this.props.Login.masterData.selectedSubSample.map(sample => sample.ntransactionsamplecode).join(\",\");\n      const tabMap = new Map();\n      let subsampleList = this.props.Login.masterData.RegistrationGetSubSample || [];\n      let {\n        subsampleskip,\n        subsampletake\n      } = this.state;\n      subsampleList = subsampleList.slice(subsampleskip, subsampleskip + subsampletake);\n      let selectedSubSampleList = getSameRecordFromTwoArrays(subsampleList, this.props.Login.masterData.selectedSubSample, \"ntransactionsamplecode\");\n      return /*#__PURE__*/React.createElement(Comments, {\n        screenName: \"IDS_SUBSAMPLECOMMENTS\",\n        onSaveClick: this.onCommentsSaveClick,\n        selectedMaster: \"selectedSubSample\",\n        controlMap: this.state.controlMap,\n        userRoleControlRights: this.state.userRoleControlRights,\n        Comments: this.props.Login.masterData.RegistrationSampleComment || [],\n        fetchRecord: this.props.getCommentsCombo,\n        addName: \"AddSubSampleComment\",\n        editName: \"EditSubSampleComment\",\n        deleteName: \"DeleteSubSampleComment\",\n        methodUrl: \"SubSampleComment\",\n        isTestComment: false,\n        masterList: selectedSubSampleList,\n        masterAlertStatus: \"IDS_SELECTSUBSAMPLETOADDCOMMENTS\",\n        primaryKeyField: \"nsamplecommentcode\",\n        dataState: this.state.subSampleCommentDataState,\n        dataStateChange: this.subSampledataStateChange,\n        deleteParam: {\n          methodUrl: \"SubSampleComment\",\n          ntransactionsamplecode,\n          userInfo: this.props.Login.userInfo,\n          masterData: this.props.Login.masterData,\n          esignRights: this.props.Login.userRoleControlRights,\n          screenName: \"IDS_SUBSAMPLECOMMENTS\"\n        },\n        editParam: {\n          methodUrl: \"SubSampleComment\",\n          ntransactionsamplecode,\n          userInfo: this.props.Login.userInfo,\n          masterData: this.props.Login.masterData,\n          esignRights: this.props.Login.userRoleControlRights,\n          screenName: \"IDS_SUBSAMPLECOMMENTS\",\n          operation: \"update\",\n          masterList: this.props.Login.masterData.RegistrationGetSubSample || [],\n          ncontrolCode: this.state.controlMap.has(\"EditSubSampleComment\") && this.state.controlMap.get(\"EditSubSampleComment\").ncontrolcode\n        },\n        selectedListName: \"IDS_SUBSAMPLES\",\n        displayName: \"ssamplearno\",\n        selectedId: this.props.Login.selectedId || null,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 6172,\n          columnNumber: 16\n        }\n      });\n    };\n\n    this.testTabDetail = () => {\n      const testTabMap = new Map();\n      let testList = this.props.Login.masterData.RegistrationGetTest || [];\n      let {\n        testskip,\n        testtake\n      } = this.state;\n      testList = testList.slice(testskip, testskip + testtake);\n      let selectedTestList = getSameRecordFromTwoArrays(testList, this.props.Login.masterData.selectedTest, \"ntransactiontestcode\"); // const cancelId = this.state.controlMap.has(\"CancelTest\") && this.state.controlMap.get(\"CancelTest\").ncontrolcode;\n\n      let ntransactiontestcode = this.props.Login.masterData.selectedTest ? this.props.Login.masterData.selectedTest.map(test => test.ntransactiontestcode).join(\",\") : \"-1\";\n      testTabMap.set(\"IDS_PARAMETERRESULTS\", /*#__PURE__*/React.createElement(RegistrationResultTab, {\n        userInfo: this.props.Login.userInfo,\n        genericLabel: this.props.Login.genericLabel,\n        masterData: this.props.Login.masterData,\n        inputParam: this.props.Login.inputParam,\n        dataState: this.state.resultDataState,\n        dataStateChange: this.testDataStateChange,\n        screenName: \"IDS_PARAMETERRESULTS\",\n        controlMap: this.state.controlMap,\n        userRoleControlRights: this.state.userRoleControlRights,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 6227,\n          columnNumber: 48\n        }\n      }));\n      testTabMap.set(\"IDS_TESTATTACHMENTS\", /*#__PURE__*/React.createElement(Attachments, {\n        screenName: \"IDS_TESTATTACHMENTS\",\n        selectedMaster: \"selectedTest\",\n        onSaveClick: this.onAttachmentSaveClick,\n        controlMap: this.state.controlMap,\n        userRoleControlRights: this.state.userRoleControlRights,\n        masterList: selectedTestList,\n        masterAlertStatus: \"IDS_SELECTTESTTOADDATTACHEMENT\",\n        attachments: this.props.Login.masterData.RegistrationTestAttachment || [],\n        deleteRecord: this.props.deleteAttachment,\n        fetchRecord: this.props.getAttachmentCombo,\n        addName: \"AddTestAttachment\",\n        editName: \"EditTestAttachment\",\n        deleteName: \"DeleteTestAttachment\",\n        viewName: \"ViewTestAttachment\",\n        methodUrl: \"TestAttachment\",\n        dataState: this.state.testAttachmentDataState,\n        dataStateChange: this.testDataStateChange,\n        userInfo: this.props.Login.userInfo,\n        deleteParam: {\n          methodUrl: \"TestAttachment\",\n          ntransactiontestcode,\n          userInfo: this.props.Login.userInfo,\n          masterData: this.props.Login.masterData,\n          esignRights: this.props.Login.userRoleControlRights,\n          screenName: \"IDS_TESTATTACHMENTS\"\n        },\n        editParam: {\n          methodUrl: \"TestAttachment\",\n          ntransactiontestcode,\n          userInfo: this.props.Login.userInfo,\n          masterData: this.props.Login.masterData,\n          esignRights: this.props.Login.userRoleControlRights,\n          screenName: \"IDS_TESTATTACHMENTS\",\n          masterList: this.props.Login.masterData.selectedTest\n        },\n        selectedListName: \"IDS_TESTS\",\n        displayName: \"stestsynonym\",\n        isneedHeader: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 6238,\n          columnNumber: 47\n        }\n      }));\n      testTabMap.set(\"IDS_TESTCOMMENTS\", /*#__PURE__*/React.createElement(Comments, {\n        screenName: \"IDS_TESTCOMMENTS\",\n        onSaveClick: this.onCommentsSaveClick,\n        selectedMaster: \"selectedTest\",\n        controlMap: this.state.controlMap,\n        userRoleControlRights: this.state.userRoleControlRights,\n        Comments: this.props.Login.masterData.RegistrationTestComment || [],\n        fetchRecord: this.props.getCommentsCombo,\n        addName: \"AddTestComment\",\n        editName: \"EditTestComment\",\n        deleteName: \"DeleteTestComment\",\n        methodUrl: \"TestComment\",\n        isTestComment: false,\n        masterList: selectedTestList,\n        masterAlertStatus: \"IDS_SELECTTESTTOADDCOMMENTS\",\n        primaryKeyField: \"ntestcommentcode\",\n        dataState: this.state.testCommentDataState,\n        dataStateChange: this.testDataStateChange,\n        deleteParam: {\n          methodUrl: \"TestComment\",\n          ntransactiontestcode,\n          userInfo: this.props.Login.userInfo,\n          masterData: this.props.Login.masterData,\n          esignRights: this.props.Login.userRoleControlRights,\n          screenName: \"IDS_TESTCOMMENTS\"\n        },\n        editParam: {\n          methodUrl: \"TestComment\",\n          ntransactiontestcode,\n          userInfo: this.props.Login.userInfo,\n          masterData: this.props.Login.masterData,\n          esignRights: this.props.Login.userRoleControlRights,\n          screenName: \"IDS_TESTCOMMENTS\",\n          operation: \"update\",\n          masterList: this.props.Login.masterData.RegistrationGetSample || [],\n          ncontrolCode: this.state.controlMap.has(\"EditTestComment\") && this.state.controlMap.get(\"EditTestComment\").ncontrolcode\n        },\n        selectedListName: \"IDS_TESTS\",\n        displayName: \"stestsynonym\",\n        selectedId: this.props.Login.selectedId || null,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 6281,\n          columnNumber: 44\n        }\n      }));\n      return testTabMap;\n    };\n\n    this.getCommentsCombo = event => {\n      if (this.props.Login.selectedTest && this.props.Login.selectedTest.length > 0) {\n        this.props.getCommentsCombo(...event);\n      } else {\n        toast.info(this.props.intl.formatMessage({\n          id: \"IDS_SELECTTESTTOADDCOMMENTS\"\n        }));\n      }\n    };\n\n    this.testDataStateChange = event => {\n      switch (this.props.Login.activeTestTab) {\n        case \"IDS_PARAMETERRESULTS\":\n          this.setState({\n            resultDataState: event.dataState\n          });\n          break;\n\n        case \"IDS_TEST\":\n          this.setState({\n            testDataState: event.dataState\n          });\n          break;\n\n        case \"IDS_TESTCOMMENTS\":\n          this.setState({\n            testCommentDataState: event.dataState\n          });\n          break;\n\n        case \"IDS_TESTATTACHMENTS\":\n          this.setState({\n            testAttachmentDataState: event.dataState\n          });\n          break;\n\n        default:\n          this.setState({\n            resultDataState: event.dataState\n          });\n          break;\n      }\n    };\n\n    this.onCommentsSaveClick = (saveType, formRef, selectedRecord) => {\n      const masterData = this.props.Login.masterData;\n      let inputData = {};\n      let inputParam = {};\n      inputData[\"userinfo\"] = this.props.Login.userInfo;\n\n      if (this.props.Login.screenName === \"IDS_SAMPLECOMMENTS\") {\n        let sampleList = [];\n\n        if (this.props.Login.masterData.searchedSample !== undefined) {\n          //sampleList = getSameRecordFromTwoArrays(this.props.Login.masterData.searchedSample, this.props.Login.masterData.RegistrationGetSample.slice(this.state.skip, this.state.skip + this.state.take), \"npreregno\");\n          const list = this.props.Login.masterData.searchedSample ? this.props.Login.masterData.searchedSample : this.props.Login.masterData.RegistrationGetSample;\n          sampleList = list ? list.slice(this.state.skip, this.state.skip + this.state.take) : [];\n        } else {\n          sampleList = this.props.Login.masterData.RegistrationGetSample.slice(this.state.skip, this.state.skip + this.state.take);\n        }\n\n        let acceptList = getSameRecordFromTwoArrays(sampleList, this.props.Login.masterData.selectedSample, \"npreregno\"); // let acceptList=getSameRecordFromTwoArrays(this.props.Login.masterData.searchedTest, this.props.Login.masterData.RegistrationGetTest.slice(this.state.testskip, this.state.testskip + this.state.testtake), \"npreregno\");\n\n        let saveParam = {\n          userInfo: this.props.Login.userInfo,\n          isTestComment: this.props.isTestComment,\n          selectedRecord,\n          masterData: this.props.Login.masterData,\n          saveType,\n          formRef,\n          operation: this.props.Login.operation,\n          npreregno: this.props.Login.masterData.selectedSample ? this.props.Login.masterData.selectedSample.map(x => x.npreregno).join(\",\") : \"-1\"\n        };\n        inputParam = onSaveSampleComments(saveParam, acceptList);\n      }\n\n      if (this.props.Login.screenName === \"IDS_SUBSAMPLECOMMENTS\") {\n        let sampleList = [];\n\n        if (this.props.Login.masterData.searchedSubSample !== undefined) {\n          //sampleList = getSameRecordFromTwoArrays(this.props.Login.masterData.searchedSubSample, this.props.Login.masterData.RegistrationGetSubSample.slice(this.state.subsampleskip, this.state.subsampleskip + this.state.subsampletake), \"npreregno\");\n          const list = this.props.Login.masterData.searchedSubSample ? this.props.Login.masterData.searchedSubSample : this.props.Login.masterData.RegistrationGetSubSample;\n          sampleList = list ? list.slice(this.state.subsampleskip, this.state.subsampleskip + this.state.subsampletake) : [];\n        } else {\n          sampleList = this.props.Login.masterData.RegistrationGetSubSample.slice(this.state.subsampleskip, this.state.subsampleskip + this.state.subsampletake);\n        }\n\n        let acceptList = getSameRecordFromTwoArrays(sampleList, this.props.Login.masterData.selectedSubSample, \"ntransactionsamplecode\"); // let acceptList=getSameRecordFromTwoArrays(this.props.Login.masterData.searchedTest, this.props.Login.masterData.RegistrationGetTest.slice(this.state.testskip, this.state.testskip + this.state.testtake), \"npreregno\");\n\n        let saveParam = {\n          userInfo: this.props.Login.userInfo,\n          isTestComment: this.props.isTestComment,\n          selectedRecord,\n          masterData: this.props.Login.masterData,\n          saveType,\n          formRef,\n          operation: this.props.Login.operation,\n          ntransactionsamplecode: this.props.Login.masterData.selectedSubSample ? this.props.Login.masterData.selectedSubSample.map(x => x.ntransactionsamplecode).join(\",\") : \"-1\"\n        };\n        inputParam = onSaveSubSampleComments(saveParam, acceptList);\n      }\n\n      if (this.props.Login.screenName === \"IDS_TESTCOMMENTS\") {\n        let testList = [];\n\n        if (this.props.Login.masterData.searchedTest !== undefined) {\n          testList = getSameRecordFromTwoArrays(this.props.Login.masterData.searchedTest, this.props.Login.masterData.RegistrationGetTest.slice(this.state.testskip, this.state.testskip + this.state.testtake), \"npreregno\");\n        } else {\n          testList = this.props.Login.masterData.RegistrationGetTest.slice(this.state.testskip, this.state.testskip + this.state.testtake);\n        }\n\n        let acceptList = getSameRecordFromTwoArrays(testList, this.props.Login.masterData.selectedTest, \"ntransactiontestcode\"); // let acceptList=getSameRecordFromTwoArrays(this.props.Login.masterData.searchedTest, this.props.Login.masterData.RegistrationGetTest.slice(this.state.testskip, this.state.testskip + this.state.testtake), \"npreregno\");\n\n        let saveParam = {\n          userInfo: this.props.Login.userInfo,\n          isTestComment: this.props.isTestComment,\n          selectedRecord,\n          masterData: this.props.Login.masterData,\n          saveType,\n          formRef,\n          operation: this.props.Login.operation,\n          ntransactiontestcode: this.props.Login.masterData.selectedTest ? this.props.Login.masterData.selectedTest.map(x => x.ntransactiontestcode).join(\",\") : \"-1\"\n        };\n        inputParam = onSaveTestComments(saveParam, acceptList);\n      }\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData\n            },\n            operation: this.props.Login.operation,\n            screenName: this.props.Login.screenName\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, masterData, \"openCommentModal\");\n      }\n    };\n\n    this.onAttachmentSaveClick = (saveType, formRef, selectedRecord) => {\n      const masterData = this.props.Login.masterData;\n      let inputData = {};\n      let inputParam = {};\n      let acceptList = [];\n      inputData[\"userinfo\"] = this.props.Login.userInfo;\n      let sampleList = [];\n\n      if (this.props.Login.masterData.searchedSample !== undefined) {\n        sampleList = getSameRecordFromTwoArrays(this.props.Login.masterData.searchedSample || [], sortDataForDate(this.props.Login.masterData.RegistrationGetSample, 'dtransactiondate', 'npreregno').slice(this.state.skip, this.state.skip + this.state.take), \"npreregno\");\n      } else {\n        sampleList = sortDataForDate(this.props.Login.masterData.RegistrationGetSample, 'dtransactiondate', 'npreregno').slice(this.state.skip, this.state.skip + this.state.take);\n      }\n\n      if (this.props.Login.operation === \"update\") {\n        acceptList.push(selectedRecord);\n      } else {\n        acceptList = getSameRecordFromTwoArrays(sampleList, this.props.Login.masterData.selectedSample, \"npreregno\");\n      }\n\n      if (this.props.Login.screenName === \"IDS_SAMPLEATTACHMENTS\") {\n        let saveParam = {\n          userInfo: this.props.Login.userInfo,\n          selectedRecord,\n          masterData: this.props.Login.masterData,\n          saveType,\n          formRef,\n          operation: this.props.Login.operation,\n          selectedMaster: this.props.selectedMaster,\n          npreregno: this.props.Login.masterData.selectedSample ? this.props.Login.masterData.selectedSample.map(x => x.npreregno).join(\",\") : \"-1\"\n        };\n        inputParam = onSaveSampleAttachment(saveParam, acceptList);\n      } else if (this.props.Login.screenName === \"IDS_TESTATTACHMENTS\") {\n        let saveParam = {\n          userInfo: this.props.Login.userInfo,\n          selectedRecord,\n          masterData: this.props.Login.masterData,\n          saveType,\n          formRef,\n          operation: this.props.Login.operation,\n          selectedMaster: this.props.selectedMaster,\n          ntransactiontestcode: this.props.Login.masterData.selectedTest ? this.props.Login.masterData.selectedTest.map(x => x.ntransactiontestcode).join(\",\") : \"-1\"\n        };\n        inputParam = onSaveTestAttachment(saveParam, this.props.Login.masterData.selectedTest);\n      } else if (this.props.Login.screenName === \"IDS_SUBSAMPLEATTACHMENTS\") {\n        let saveParam = {\n          userInfo: this.props.Login.userInfo,\n          selectedRecord,\n          masterData: this.props.Login.masterData,\n          saveType,\n          formRef,\n          operation: this.props.Login.operation,\n          selectedMaster: this.props.selectedMaster,\n          ntransactionsamplecode: this.props.Login.masterData.selectedSubSample ? this.props.Login.masterData.selectedSubSample.map(x => x.ntransactionsamplecode).join(\",\") : \"-1\"\n        };\n        inputParam = onSaveSubSampleAttachment(saveParam, this.props.Login.masterData.selectedSubSample);\n      }\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData\n            },\n            operation: this.props.Login.operation,\n            screenName: this.props.Login.screenName\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, masterData, \"openAttachmentModal\");\n      }\n    };\n\n    this.cancelSubSampleRecord = (controlcode, skip, take) => {\n      let testList = [];\n\n      if (this.props.Login.masterData.searchedSubSample !== undefined) {\n        //sampleList = getSameRecordFromTwoArrays(this.props.Login.masterData.searchedSubSample, this.props.Login.masterData.RegistrationGetSubSample.slice(this.state.subsampleskip, this.state.subsampleskip + this.state.subsampletake), \"npreregno\");\n        const list = this.props.Login.masterData.searchedSubSample ? this.props.Login.masterData.searchedSubSample : this.props.Login.masterData.RegistrationGetSubSample;\n        testList = list ? list.slice(this.state.subsampleskip, this.state.subsampleskip + this.state.subsampletake) : [];\n      } else {\n        testList = this.props.Login.masterData.RegistrationGetSubSample.slice(this.state.subsampleskip, this.state.subsampleskip + this.state.subsampletake);\n      } // let testList = this.props.Login.masterData.searchedSubSample ||\n      //     (this.props.Login.masterData.RegistrationGetSubSample ?\n      //         [...this.props.Login.masterData.RegistrationGetSubSample].splice(skip, skip + take) : []);\n\n\n      let acceptList = getSameRecordFromTwoArrays(testList, this.props.Login.masterData.selectedSubSample, \"ntransactionsamplecode\");\n\n      if (acceptList && acceptList.length > 0) {\n        // console.log(\"Success:\", dataitem);\n        if (this.transValidation(this.props.Login.transactionValidation, controlcode, acceptList)) {\n          let Map = {};\n          Map['npreregno'] = acceptList.map(x => x.npreregno).join(\",\");\n          Map['ntransactiontestcode'] = this.props.Login.masterData.selectedTest && this.props.Login.masterData.selectedTest.length > 0 ? this.props.Login.masterData.selectedTest.map(x => x.ntransactiontestcode).join(\",\") : \"-1\"; // Map['ntransactionstatus'] = dataitem.ntransactionstatus;\n          // Map[\"ntransactionsamplecode\"] = acceptList.map(x => x.ntransactionsamplecode).join(\",\");\n          //  Map[\"ninserttransactionsamplecode\"] = dataitem.ntransactionsamplecode\n\n          Map[\"userinfo\"] = this.props.Login.userInfo;\n          Map[\"ncontrolcode\"] = controlcode;\n          Map[\"nsampletypecode\"] = this.props.Login.masterData.RealSampleTypeValue.nsampletypecode;\n          Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\n          Map[\"nregsubtypecode\"] = this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode;\n          Map[\"nflag\"] = 2;\n          Map[\"ntype\"] = 3; // Map[\"withoutgetparameter\"] = 3;\n\n          Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\n          Map[\"nregsubtypecode\"] = this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode;\n          Map[\"nfilterstatus\"] = this.props.Login.masterData.FilterStatusValue.ntransactionstatus;\n          Map[\"npreregno\"] = acceptList && acceptList.map(sample => sample.npreregno).join(\",\");\n          Map[\"ntransactionsamplecode\"] = acceptList && acceptList.map(sample => sample.ntransactionsamplecode).join(\",\");\n          Map[\"registrationsample\"] = this.props.Login.masterData.selectedSample;\n          Map[\"registrationSubSample\"] = this.props.Login.masterData.selectedSubSample;\n          Map[\"registrationTest\"] = this.props.Login.masterData.selectedTest;\n          Map[\"selectedTest\"] = this.props.Login.masterData.RegistrationGetTest;\n          Map[\"ndesigntemplatemappingcode\"] = this.props.Login.masterData.RealDesignTemplateMappingValue && this.props.Login.masterData.RealDesignTemplateMappingValue.ndesigntemplatemappingcode;\n          Map[\"nneedtemplatebasedflow\"] = this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nneedtemplatebasedflow;\n          Map[\"nneedsubsample\"] = this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nneedsubsample; // Map[\"checkBoxOperation\"] = 3\n\n          Map[\"checkBoxOperation\"] = checkBoxOperation.SINGLESELECT;\n          Map[\"activeTestTab\"] = this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\";\n          Map[\"activeSampleTab\"] = this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\";\n          Map[\"activeSubSampleTab\"] = this.props.Login.activeSubSampleTab || \"IDS_SUBSAMPLEATTACHMENTS\";\n          Map[\"FromDate\"] = rearrangeDateFormat(this.props.Login.masterData.FromDate);\n          Map[\"napproveconfversioncode\"] = this.props.Login.masterData.napproveconfversioncode;\n          Map[\"ToDate\"] = rearrangeDateFormat(this.props.Login.masterData.ToDate);\n          let inputParam = {\n            inputData: Map,\n            postParamList: this.postParamList,\n            action: 'cancelSubSample'\n          };\n\n          if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, controlcode)) {\n            const updateInfo = {\n              typeName: DEFAULT_RETURN,\n              data: {\n                loadEsign: true,\n                screenData: {\n                  inputParam,\n                  masterData: this.props.Login.masterData\n                },\n                openModal: true,\n                parentPopUpSize: 'lg',\n                screenName: this.props.Login.screenName,\n                operation: 'cancel'\n              }\n            };\n            this.props.updateStore(updateInfo);\n          } else {\n            this.props.cancelSubSampleAction(inputParam, this.props.Login.masterData);\n          }\n        } else {\n          let value = [];\n          this.props.Login.transactionValidation[controlcode] && this.props.Login.transactionValidation[controlcode].map(sample => {\n            if (sample.nregsubtypecode === this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode) {\n              value.push(this.props.intl.formatMessage({\n                id: sample.stransdisplaystatus\n              }));\n            }\n          });\n          value = value.map(sample => sample).join(\"/\"); //toast.info(\"Select\" + \" \" + value + \" to Cancel/Reject Test\");\n\n          toast.info(this.props.intl.formatMessage({\n            id: \"IDS_SELECT\"\n          }) + value + this.props.intl.formatMessage({\n            id: \"IDS_TOCANCELREJECTSUBSAMPLE\"\n          }));\n        }\n      } else {\n        toast.info(this.props.intl.formatMessage({\n          id: \"IDS_SELECTSAMPLETOCANCELREJECT\"\n        }));\n      }\n    };\n\n    this.printbarcode = controlcode => {\n      if (this.transValidation(this.props.Login.transactionValidation, controlcode)) {\n        this.props.getBarcodeAndPrinterService({\n          masterData: this.props.Login.masterData,\n          ncontrolcode: this.state.subSampleBarcodeId,\n          userInfo: this.props.Login.userInfo,\n          control: \"subSampleBarcode\"\n        });\n      } else {\n        let value = [];\n        this.props.Login.transactionValidation[controlcode] && this.props.Login.transactionValidation[controlcode].map(sample => {\n          if (sample.nregsubtypecode === this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode) {\n            value.push(this.props.intl.formatMessage({\n              id: sample.stransdisplaystatus\n            }));\n          }\n        });\n        value = value.map(sample => sample).join(\"/\"); //toast.info(\"Select\" + \" \" + value + \" to Cancel/Reject Test\");\n\n        toast.info(this.props.intl.formatMessage({\n          id: \"IDS_SELECT\"\n        }) + value + this.props.intl.formatMessage({\n          id: \"IDS_TOCANCELREJECTSUBSAMPLE\"\n        }));\n      }\n    };\n\n    this.cancelRecord = (controlcode, skip, take) => {\n      let testList = this.props.Login.masterData.searchedTest || (this.props.Login.masterData.RegistrationGetTest ? [...this.props.Login.masterData.RegistrationGetTest].splice(skip, skip + take) : []);\n      let acceptList = getSameRecordFromTwoArrays(testList, this.props.Login.masterData.selectedTest, \"ntransactiontestcode\");\n\n      if (acceptList && acceptList.length > 0) {\n        // console.log(\"Success:\", dataitem);\n        if (this.transValidation(this.props.Login.transactionValidation, controlcode, acceptList)) {\n          let Map = {};\n          Map['ninsertpreregno'] = acceptList.map(x => x.npreregno).join(\",\"); // Map['ntransactionstatus'] = dataitem.ntransactionstatus;\n\n          Map[\"ntransactiontestcode\"] = acceptList.map(x => x.ntransactiontestcode).join(\",\"); //  Map[\"ninserttransactionsamplecode\"] = dataitem.ntransactionsamplecode\n\n          Map[\"userinfo\"] = this.props.Login.userInfo;\n          Map[\"ncontrolcode\"] = controlcode;\n          Map[\"nsampletypecode\"] = this.props.Login.masterData.RealSampleTypeValue.nsampletypecode;\n          Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\n          Map[\"nregsubtypecode\"] = this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode;\n          Map[\"nflag\"] = 2;\n          Map[\"ntype\"] = 3;\n          Map[\"withoutgetparameter\"] = 3;\n          Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\n          Map[\"nregsubtypecode\"] = this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode;\n          Map[\"nfilterstatus\"] = this.props.Login.masterData.FilterStatusValue.ntransactionstatus;\n          Map[\"npreregno\"] = acceptList && acceptList.map(sample => sample.npreregno).join(\",\");\n          Map[\"ntransactionsamplecode\"] = acceptList && acceptList.map(sample => sample.ntransactionsamplecode).join(\",\");\n          Map[\"registrationsample\"] = this.props.Login.masterData.selectedSample;\n          Map[\"registrationSubSample\"] = this.props.Login.masterData.selectedSubSample;\n          Map[\"registrationTest\"] = this.props.Login.masterData.selectedTest;\n          Map[\"ndesigntemplatemappingcode\"] = this.props.Login.masterData.RealDesignTemplateMappingValue && this.props.Login.masterData.RealDesignTemplateMappingValue.ndesigntemplatemappingcode;\n          Map[\"nneedtemplatebasedflow\"] = this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nneedtemplatebasedflow;\n          Map[\"nneedsubsample\"] = this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nneedsubsample;\n          let inputParam = {\n            inputData: Map,\n            postParamList: this.postParamList,\n            action: 'cancelTest'\n          };\n\n          if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, controlcode)) {\n            const updateInfo = {\n              typeName: DEFAULT_RETURN,\n              data: {\n                loadEsign: true,\n                screenData: {\n                  inputParam,\n                  masterData: this.props.Login.masterData\n                },\n                openModal: true,\n                parentPopUpSize: 'lg',\n                screenName: this.props.Login.screenName,\n                operation: 'cancel'\n              }\n            };\n            this.props.updateStore(updateInfo);\n          } else {\n            this.props.cancelTestAction(inputParam, this.props.Login.masterData);\n          }\n        } else {\n          let value = [];\n          this.props.Login.transactionValidation[controlcode] && this.props.Login.transactionValidation[controlcode].map(sample => {\n            if (sample.nregsubtypecode === this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode) {\n              value.push(this.props.intl.formatMessage({\n                id: sample.stransdisplaystatus\n              }));\n            }\n          });\n          value = value.map(item => item).join(\"/\"); //toast.info(\"Select\" + \" \" + value + \" to Cancel/Reject Test\");\n\n          toast.info(this.props.intl.formatMessage({\n            id: \"IDS_SELECT\"\n          }) + value + this.props.intl.formatMessage({\n            id: \"IDS_TOCANCELREJECTTEST\"\n          }));\n        }\n      } else {\n        toast.info(this.props.intl.formatMessage({\n          id: \"IDS_SELECTTESTTOCANCELREJECT\"\n        }));\n      }\n    };\n\n    this.addMoreTest = (inputParam, ncontrolCode) => {\n      let sampleList = [];\n      const skip = this.state.skip;\n      const take = this.state.take;\n\n      if (this.props.Login.masterData.searchedSample !== undefined) {\n        ///sampleList = getSameRecordFromTwoArrays(this.props.Login.masterData.searchedSample, this.props.Login.masterData.RegistrationGetSample.slice(skip, skip + take), \"npreregno\");\n        const list = this.props.Login.masterData.searchedSample ? this.props.Login.masterData.searchedSample : this.props.Login.masterData.RegistrationGetSample;\n        sampleList = list ? list.slice(skip, skip + take) : [];\n      } else {\n        sampleList = this.props.Login.masterData.RegistrationGetSample && sortDataForDate(this.props.Login.masterData.RegistrationGetSample, 'dtransactiondate', 'npreregno').slice(skip, skip + take);\n      }\n\n      let addSubSampleList = getSameRecordFromTwoArrays(sampleList || [], this.props.Login.masterData.selectedSample, \"npreregno\");\n\n      if (addSubSampleList && addSubSampleList.length > 0) {\n        inputParam[\"sampleList\"] = sampleList;\n        this.props.addMoreTest(inputParam, ncontrolCode);\n      } else {\n        toast.info(this.props.intl.formatMessage({\n          id: \"IDS_SELECTSAMPLETOADDTEST\"\n        }));\n      }\n    };\n\n    this.addAdhocTest = inputParam => {\n      let sampleList = [];\n      const skip = this.state.skip;\n      const take = this.state.take;\n\n      if (this.props.Login.masterData.searchedSample !== undefined) {\n        ///sampleList = getSameRecordFromTwoArrays(this.props.Login.masterData.searchedSample, this.props.Login.masterData.RegistrationGetSample.slice(skip, skip + take), \"npreregno\");\n        const list = this.props.Login.masterData.searchedSample ? this.props.Login.masterData.searchedSample : this.props.Login.masterData.RegistrationGetSample;\n        sampleList = list ? list.slice(skip, skip + take) : [];\n      } else {\n        sampleList = this.props.Login.masterData.RegistrationGetSample && sortDataForDate(this.props.Login.masterData.RegistrationGetSample, 'dtransactiondate', 'npreregno').slice(skip, skip + take);\n      }\n\n      let addSubSampleList = getSameRecordFromTwoArrays(sampleList || [], this.props.Login.masterData.selectedSample, \"npreregno\");\n\n      if (addSubSampleList && addSubSampleList.length > 0) {\n        inputParam[\"sampleList\"] = sampleList;\n        this.props.getAdhocTest(inputParam, this.props.Login.masterData, this.state.adhocTestId);\n      } else {\n        toast.info(this.props.intl.formatMessage({\n          id: \"IDS_SELECTSAMPLETOADDTEST\"\n        }));\n      }\n    };\n\n    this.addSubSample = (controlcode, skip, take) => {\n      let Map = {};\n      let sampleList = [];\n\n      if (this.props.Login.masterData.searchedSample !== undefined) {\n        // sampleList = getSameRecordFromTwoArrays(this.props.Login.masterData.searchedSample, this.props.Login.masterData.RegistrationGetSample.slice(skip, skip + take), \"npreregno\");\n        const list = this.props.Login.masterData.searchedSample ? this.props.Login.masterData.searchedSample : this.props.Login.masterData.RegistrationGetSample;\n        sampleList = list ? list.slice(skip, skip + take) : [];\n      } else {\n        sampleList = this.props.Login.masterData.RegistrationGetSample && sortDataForDate(this.props.Login.masterData.RegistrationGetSample, 'dtransactiondate', 'npreregno').slice(skip, skip + take);\n      }\n\n      let addSubSampleList = getSameRecordFromTwoArrays(sampleList || [], this.props.Login.masterData.selectedSample, \"npreregno\");\n      const nsampletypecode = this.props.Login.masterData.RealSampleTypeValue.nsampletypecode;\n      let check = true;\n\n      if (nsampletypecode === SampleType.CLINICALTYPE && addSubSampleList.length > 1) {\n        check = false;\n      }\n\n      if (addSubSampleList && addSubSampleList.length > 0 && check) {\n        const findTransactionStatus = [...new Set(addSubSampleList.map(item => item.ntransactionstatus))];\n\n        if (findTransactionStatus.length === 1) {\n          if (findTransactionStatus.indexOf(transactionStatus.REJECT) === -1 && findTransactionStatus.indexOf(transactionStatus.CANCELLED) === -1 && findTransactionStatus.indexOf(transactionStatus.RELEASED) === -1) {\n            // if (findTransactionStatus[0] === transactionStatus.PREREGISTER) {\n            //   const findApprovalVersion = [...new Set(addSubSampleList.map(item => item.napprovalversioncode))];\n            //   if (findApprovalVersion.length === 1) {\n            const findSampleSpec = [...new Set(addSubSampleList.map(item => item.nallottedspeccode))]; //const findComponentReqSpec = [...new Set(addSubSampleList.map(item => item.ncomponentrequired))];\n\n            const findSampleSpectemplate = [...new Set(addSubSampleList.map(item => item.ntemplatemanipulationcode))]; //const findComponent = [...new Set(selectsubsample.map(item => item.ncomponentcode))];\n\n            if (findSampleSpec.length === 1) //&& findComponent.length === 1 \n              {\n                const findComponentReqSpec = addSubSampleList[0].ncomponentrequired;\n                let data = [];\n                const regSubSamplewithoutCombocomponent = [];\n                const Layout = this.props.Login.masterData.SubSampleTemplate && this.props.Login.masterData.SubSampleTemplate.jsondata;\n\n                if (Layout !== undefined) {\n                  Layout.map(row => {\n                    return row.children.map(column => {\n                      return column.children.map(component => {\n                        return component.hasOwnProperty(\"children\") ? component.children.map(componentrow => {\n                          if (componentrow.inputtype === \"combo\" || componentrow.inputtype === \"backendsearchfilter\" || componentrow.inputtype === \"frontendsearchfilter\") {\n                            data.push(componentrow);\n                          } else {\n                            regSubSamplewithoutCombocomponent.push(componentrow);\n                          }\n\n                          return null;\n                        }) : component.inputtype === \"combo\" || component.inputtype === \"backendsearchfilter\" || component.inputtype === \"frontendsearchfilter\" ? data.push(component) : regSubSamplewithoutCombocomponent.push(component);\n                      });\n                    });\n                  });\n                  const regSubSamplecomboComponents = data;\n                  let regchildColumnList = {};\n                  data.map(columnList => {\n                    const val = comboChild(data, columnList, regchildColumnList, true);\n                    data = val.data;\n                    regchildColumnList = val.childColumnList;\n                    return null;\n                  }); //const Map={}\n                  // const findSamplentemplatemanipulationcode = [...new Set(addSubSampleList.map(item => item.ntemplatemanipulationcode))];\n                  // Map[\"ntemplatemanipulationcode\"] = findSamplentemplatemanipulationcode[0];\n\n                  Map[\"nallottedspeccode\"] = findSampleSpec[0];\n                  Map[\"ntemplatemanipulationcode\"] = findSampleSpectemplate[0];\n                  Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\n                  Map[\"nneedsubsample\"] = this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nneedsubsample;\n                  Map[\"npreregno\"] = addSubSampleList && addSubSampleList.map(sample => sample.npreregno).join(\",\");\n                  Map[\"registrationsample\"] = addSubSampleList; // console.log(\"spec jsx main:\", findComponentReqSpec,findSampleSpec[0] );\n\n                  this.props.addsubSampleRegistration(this.props.Login.masterData, this.props.Login.userInfo, data, this.state.selectedRecord, regchildColumnList, regSubSamplecomboComponents, regSubSamplewithoutCombocomponent, Map, controlcode, findComponentReqSpec === 3 ? true : false, this.state.specBasedTestPackage);\n                } else {\n                  toast.info(this.props.intl.formatMessage({\n                    id: \"IDS_PLEASECONFIGURETHESUBSAMPLETEMPLATE\"\n                  }));\n                }\n              } else {\n              toast.info(this.props.intl.formatMessage({\n                id: \"IDS_PLEASESELECTSAMPLEWITHSAMESPECANDCOMPONENT\"\n              }));\n            } // } else {\n            //    toast.info(this.props.intl.formatMessage({ id: \"IDS_PLEASESELECTSAMPLEWITHSAMEAPPROVALCONFIG\" }));\n            // }\n            // } else {\n            //     toast.info(this.props.intl.formatMessage({ id: \"IDS_SELECTPREREGISTERSAMPLETOADDSUBSAMPLE\" }));\n            // }\n\n          } else {\n            toast.info(this.props.intl.formatMessage({\n              id: \"IDS_CANNOTADDSUBSAMPLEASSAMPLEREJECTEDORCANCELLEDORRELEASED\"\n            }));\n          }\n        } else {\n          toast.info(this.props.intl.formatMessage({\n            id: \"IDS_PLEASESELECTSAMPLEWITHSAMESTATUS\"\n          }));\n        }\n      } else {\n        toast.info(this.props.intl.formatMessage({\n          id: check ? \"IDS_SELECTSAMPLETOSUBSAMPLE\" : \"IDS_SELECTONESAMPLE\"\n        }));\n      }\n    };\n\n    this.handleEditDateChange = (dateName, dateValue) => {\n      const selectComponent = this.state.selectedRecord;\n\n      if (dateValue === null) {\n        dateValue = new Date();\n      }\n\n      selectComponent[dateName] = dateValue;\n      this.setState({\n        selectedRecord: selectComponent\n      });\n    };\n\n    this.onNumericInputEditChange = (value, name) => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (name !== \"nnoofcontainer\" && (value === 0 || value === 0.0)) {\n        selectedRecord[name] = '';\n        this.setState({\n          selectedRecord\n        });\n      } else {\n        selectedRecord[name] = value;\n        this.setState({\n          selectedRecord\n        });\n      }\n    };\n\n    this.orderRecords = CancelExternalOrderSampleId => {\n      let inputData = {\n        userinfo: this.props.Login.userInfo,\n        ncontrolcode: CancelExternalOrderSampleId,\n        operation: 'Cancel',\n        loadPrinter: false,\n        openModal: true,\n        parentPopUpSize: 'xl',\n        screenName: \"External Sample\",\n        masterData: this.props.Login.masterData,\n        selectedRecord: this.state.selectedRecord\n      };\n      this.props.orderRecords(inputData);\n    };\n\n    this.cancelSampleRecords = (controlcode, skip, take) => {\n      let Map = {};\n      let sampleList = [];\n\n      if (this.props.Login.masterData.searchedSample !== undefined) {\n        //sampleList = getSameRecordFromTwoArrays(this.props.Login.masterData.searchedSample, this.props.Login.masterData.RegistrationGetSample.slice(skip, skip + take), \"npreregno\");\n        const list = this.props.Login.masterData.searchedSample ? this.props.Login.masterData.searchedSample : this.props.Login.masterData.RegistrationGetSample;\n        sampleList = list ? list.slice(skip, skip + take) : [];\n      } else {\n        sampleList = this.props.Login.masterData.RegistrationGetSample && sortDataForDate(this.props.Login.masterData.RegistrationGetSample, 'dtransactiondate', 'npreregno').slice(skip, skip + take);\n      } // let sampleList = this.props.Login.masterData.searchedSample || [...this.props.Login.masterData.RegistrationGetSample].splice(skip, skip + take);\n      // sampleList = sampleList.splice(skip, skip + take);\n\n\n      let cancelRejectSamplesList = getSameRecordFromTwoArrays(sampleList || [], this.props.Login.masterData.selectedSample, \"npreregno\");\n\n      if (cancelRejectSamplesList && cancelRejectSamplesList.length > 0) {\n        if (this.transValidation(this.props.Login.transactionValidation, controlcode, cancelRejectSamplesList)) {\n          //Map['ninsertpreregno']=dataitem.cancelSample.npreregno;\n          Map['ntransactionstatus'] = cancelRejectSamplesList && cancelRejectSamplesList.map(transactionstatus => transactionstatus.ntransactionstatus).join(\",\"); //Map[\"ntransactiontestcode\"]=dataitem.ntransactiontestcode;\n          //Map[\"ninserttransactionsamplecode\"]=dataitem.ntransactionsamplecode\n\n          Map[\"userinfo\"] = this.props.Login.userInfo;\n          Map[\"ncontrolcode\"] = controlcode;\n          Map[\"nsampletypecode\"] = this.props.Login.masterData.RealSampleTypeValue.nsampletypecode;\n          Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\n          Map[\"nregsubtypecode\"] = this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode;\n          Map[\"nflag\"] = 2;\n          Map[\"ntype\"] = 3;\n          Map[\"ndesigntemplatemappingcode\"] = this.props.Login.masterData.RealDesignTemplateMappingValue && this.props.Login.masterData.RealDesignTemplateMappingValue.ndesigntemplatemappingcode;\n          Map[\"napproveconfversioncode\"] = this.props.Login.masterData.RealApprovalConfigVersionValue && this.props.Login.masterData.RealApprovalConfigVersionValue.napproveconfversioncode;\n          Map[\"nneedtemplatebasedflow\"] = this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nneedtemplatebasedflow;\n          Map[\"nneedsubsample\"] = this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nneedsubsample; // Map[\"checkBoxOperation\"] = 3;\n\n          Map[\"checkBoxOperation\"] = checkBoxOperation.SINGLESELECT;\n          Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\n          Map[\"nregsubtypecode\"] = this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode;\n          Map[\"nfilterstatus\"] = -1;\n          Map[\"npreregno\"] = cancelRejectSamplesList && cancelRejectSamplesList.map(sample => sample.npreregno).join(\",\");\n          Map[\"ntransactionsamplecode\"] = this.props.Login.masterData.selectedSubSample && this.props.Login.masterData.selectedSubSample.length > 0 ? this.props.Login.masterData.selectedSubSample.map(sample => sample.ntransactionsamplecode).join(\",\") : \"-1\";\n          Map[\"ntransactiontestcode\"] = this.props.Login.masterData.selectedTest && this.props.Login.masterData.selectedTest.length > 0 ? this.props.Login.masterData.selectedTest.map(test => test.ntransactiontestcode).join(\",\") : \"-1\";\n          Map[\"registrationsample\"] = cancelRejectSamplesList;\n          let sampleCode = '';\n          this.props.Login.masterData.RegistrationGetSubSample && this.props.Login.masterData.RegistrationGetSubSample.map(sample => {\n            // if (sample.ntransactionstatus != transactionStatus.CANCELLED && sample.ntransactionstatus != transactionStatus.REJECT) {\n            sampleCode += sample.ntransactionsamplecode + ','; //}\n          });\n          Map[\"ssamplecode\"] = sampleCode.substring(0, sampleCode.length - 1); // ? return sample.ntransactionsamplecode : \"\").join(\",\")).replace(/^,/, '');;\n\n          Map[\"registrationtest\"] = this.props.Login.masterData.selectedSubSample;\n          Map[\"transactionValidation\"] = this.props.Login.transactionValidation;\n          Map[\"withoutgetparameter\"] = 3;\n          Map[\"activeTestTab\"] = this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\";\n          Map[\"activeSampleTab\"] = this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\";\n          Map[\"activeSubSampleTab\"] = this.props.Login.activeSubSampleTab || \"IDS_SUBSAMPLEATTACHMENTS\";\n          Map[\"url\"] = this.props.Login.settings[24]; // Map[\"selectedSample\"] = sortData(this.props.Login.masterData.selectedSample, \"ascending\", \"npreregno\")\n          // Map[\"RegistrationGetSubSample\"] = sortData(this.props.Login.masterData.RegistrationGetSubSample, \"ascending\", \"ntransactionsamplecode\")\n\n          Map[\"selectedSample\"] = cancelRejectSamplesList; //this.props.Login.masterData.selectedSample\n\n          Map[\"RegistrationGetSubSample\"] = this.props.Login.masterData.RegistrationGetSubSample;\n          let inputParam = {\n            inputData: Map,\n            postParamList: this.postParamList,\n            action: 'cancelSample'\n          };\n\n          if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, controlcode)) {\n            const updateInfo = {\n              typeName: DEFAULT_RETURN,\n              data: {\n                loadEsign: true,\n                screenData: {\n                  inputParam,\n                  masterData: this.props.Login.masterData\n                },\n                openModal: true,\n                parentPopUpSize: 'lg',\n                screenName: this.props.Login.screenName,\n                operation: 'cancel'\n              }\n            };\n            this.props.updateStore(updateInfo);\n          } else {\n            this.props.cancelSampleAction(inputParam, this.props.Login.masterData);\n          }\n        } else {\n          let value = []; // let value1 =[];\n          // let value2 = [];\n\n          this.props.Login.transactionValidation[controlcode] && this.props.Login.transactionValidation[controlcode].map(sample => {\n            if (sample.nregsubtypecode === this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode) {\n              value.push(this.props.intl.formatMessage({\n                id: sample.stransdisplaystatus\n              }));\n            }\n          });\n          value = value.map(sample => sample).join(\"/\"); // if(value.length>4){\n          //     value1 = value.slice.splice(0,4);\n          //     value2 = value.slice.splice(5);\n          //     toast.info(this.props.intl.formatMessage({ id: \"IDS_SELECT\" }) + value1 +\"\\n\" +value2 + this.props.intl.formatMessage({ id: \"IDS_TOCANCELREJECTSAMPLE\" }));\n          // }\n          // else{\n\n          toast.info(this.props.intl.formatMessage({\n            id: \"IDS_SELECT\"\n          }) + value + this.props.intl.formatMessage({\n            id: \"IDS_TOCANCELREJECTSAMPLE\"\n          })); //toast.info(\"Select\" + \" \" + value + \" to Cancel/Reject Sample\");\n        }\n      } else {\n        toast.info(this.props.intl.formatMessage({\n          id: \"IDS_SELECTSAMPLETOCANCELREJECT\"\n        }));\n      }\n    };\n\n    this.transValidation = (transactionValidation, ncontrolcode, selectedSample) => {\n      //  const transList=transactionValidation?Object.keys(transactionValidation):[];\n      //  const index=transList.findIndex(x=>x.ncontrolcode===ncontrolcode);\n      //let check=true;\n      //  let validate=false;\n      let ntransstatus = [];\n      let translist = transactionValidation[ncontrolcode];\n\n      if (translist) {\n        transactionValidation[ncontrolcode] && transactionValidation[ncontrolcode].map(sam => {\n          if (sam.nregsubtypecode === this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode) {\n            return ntransstatus.push(sam.ntransactionstatus);\n          } //return ntransstatus.push(sam.ntransactionstatus)\n\n        });\n        const selectdata = selectedSample ? selectedSample : [];\n        let check = selectdata.map(sam1 => {\n          return ntransstatus.includes(sam1.ntransactionstatus);\n        });\n\n        if (check.includes(false)) {\n          return false;\n        } else {\n          return true;\n        }\n      } else {\n        return true;\n      }\n    };\n\n    this.validateEsign = () => {\n      const inputParam = {\n        inputData: {\n          \"userinfo\": { ...this.props.Login.userInfo,\n            sreason: this.state.selectedRecord[\"esigncomments\"],\n            nreasoncode: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].value,\n            spredefinedreason: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].label\n          },\n          password: this.state.selectedRecord[\"esignpassword\"]\n        },\n        screenData: this.props.Login.screenData\n      };\n      this.props.validateEsignforRegistration(inputParam, \"openModal\");\n    };\n\n    this.editRegistration = inputParam => {\n      let data = [];\n      const withoutCombocomponent = [];\n      const Layout = this.props.Login.masterData.registrationTemplate && this.props.Login.masterData.registrationTemplate.jsondata;\n\n      if (Layout !== undefined) {\n        Layout.map(row => {\n          return row.children.map(column => {\n            return column.children.map(component => {\n              return component.hasOwnProperty(\"children\") ? component.children.map(componentrow => {\n                if (componentrow.inputtype === \"combo\") {\n                  data.push(componentrow);\n                } else {\n                  withoutCombocomponent.push(componentrow);\n                }\n\n                return null;\n              }) : component.inputtype === \"combo\" ? data.push(component) : withoutCombocomponent.push(component);\n            });\n          });\n        });\n        const comboComponents = data;\n        let childColumnList = {};\n        data.map(columnList => {\n          const val = comboChild(data, columnList, childColumnList, true);\n          data = val.data;\n          childColumnList = val.childColumnList;\n          return null;\n        });\n        this.props.getEditRegistrationComboService(inputParam, data, this.state.selectedRecord, childColumnList, comboComponents, withoutCombocomponent);\n      } else {\n        toast.info(\"Configure the preregister template for this registrationtype\");\n      }\n    };\n\n    this.editSubSampleRegistration = inputParam => {\n      let data = [];\n      const regSubSamplewithoutCombocomponent = [];\n\n      if (inputParam.mastertoedit.ntransactionstatus === transactionStatus.REJECT || inputParam.mastertoedit.ntransactionstatus === transactionStatus.CANCELLED || inputParam.mastertoedit.ntransactionstatus === transactionStatus.RELEASED) {\n        toast.info(this.props.intl.formatMessage({\n          id: \"IDS_CANNOTEDITCANCELLEDSUBSAMPLE\"\n        }));\n      } else {\n        const Layout = this.props.Login.masterData.SubSampleTemplate && this.props.Login.masterData.SubSampleTemplate.jsondata;\n\n        if (Layout !== undefined) {\n          Layout.map(row => {\n            return row.children.map(column => {\n              return column.children.map(component => {\n                return component.hasOwnProperty(\"children\") ? component.children.map(componentrow => {\n                  if (componentrow.inputtype === \"combo\") {\n                    data.push(componentrow);\n                  } else {\n                    regSubSamplewithoutCombocomponent.push(componentrow);\n                  }\n\n                  return null;\n                }) : component.inputtype === \"combo\" ? data.push(component) : regSubSamplewithoutCombocomponent.push(component);\n              });\n            });\n          });\n          const regSubSamplecomboComponents = data;\n          let regSubSamplechildColumnList = {};\n          data.map(columnList => {\n            const val = comboChild(data, columnList, regSubSamplechildColumnList, true);\n            data = val.data;\n            regSubSamplechildColumnList = val.childColumnList;\n            return null;\n          });\n          const sampleList = getSameRecordFromTwoArrays(inputParam.masterData.selectedSample, [inputParam.mastertoedit], \"npreregno\");\n          this.props.getEditSubSampleComboService(inputParam, data, this.state.selectedRecord, regSubSamplechildColumnList, regSubSamplecomboComponents, regSubSamplewithoutCombocomponent, sampleList[0].ncomponentrequired === 3 ? true : false);\n        } else {\n          toast.info(\"Configure the sub sample template for this registrationtype\");\n        }\n      }\n    };\n\n    this.closeSendToStoreChildModal = () => {\n      let loadEsign = this.props.Login.loadEsign;\n      let openChildModal = this.props.Login.openChildModal;\n      let selectedId = this.props.Login.selectedId;\n      let selectedRecord = this.state.selectedRecord; //this.props.Login.selectedRecord;\n\n      let selectedDetailField = this.state.selectedDetailField;\n\n      if (this.props.Login.loadEsign) {\n        loadEsign = false;\n      } else {\n        openChildModal = false;\n        selectedId = null;\n        selectedRecord = {};\n        selectedDetailField = {};\n      }\n\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          openChildModal,\n          loadEsign,\n          selectedRecord,\n          selectedId,\n          selectedDetailField\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.sendToStore = inputParam => {\n      let inputData = {\n        needSubSample: this.props.Login.masterData.RegSubTypeValue.nneedsubsample === true ? true : false,\n        npreregno: inputParam.mastersendtostore.npreregno,\n        ntransactionsamplecode: inputParam.mastersendtostore.ntransactionsamplecode,\n        sample: this.props.Login.masterData.RegSubTypeValue.nneedsubsample === true ? inputParam.mastersendtostore.ssamplearno : inputParam.mastersendtostore.sarno,\n        userinfo: inputParam.userInfo\n      }; // this.props.getStorageCategoryForSendToStore(inputParam.userInfo, inputParam.masterData, inputParam.controlcode, this.state.selectedRecord, inputData);\n\n      this.props.getStorageCategoryForSendToStore(inputParam, this.state.selectedRecord, inputData);\n    };\n\n    this.itemRender = clickedItem => {\n      let item = clickedItem.item;\n\n      if (!this.state.toggleAction) {\n        return /*#__PURE__*/React.createElement(React.Fragment, null, clickedItem.item ? /*#__PURE__*/React.createElement(\"span\", {\n          className: `normal-node\n                         ${clickedItem.item.editable ? \"active-node\" : \"\"}\n                         ${item.expanded ? \"expand-node\" : \"collapse-node\"}\n                         `,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 8065,\n            columnNumber: 25\n          }\n        }, item.containerfirstnode ? /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n          icon: faBoxOpen,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 8069,\n            columnNumber: 56\n          }\n        }) : item.locationlastnode ? /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n          icon: faLocationArrow,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 8070,\n            columnNumber: 57\n          }\n        }) : item.containerlastnode ? /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n          icon: faBox,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 8071,\n            columnNumber: 62\n          }\n        }) : item.expanded ? /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n          icon: faFolderOpen,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 8072,\n            columnNumber: 57\n          }\n        }) : /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n          icon: faFolder,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 8072,\n            columnNumber: 99\n          }\n        }), item.text) : \"\");\n      }\n    };\n\n    this.onItemClick = event => {\n      let newData = mapTree(this.state.treeData, \"items\", item => {\n        if (item.editable === true) {\n          item.editable = false;\n        } else if (item.id === event.item.id) {\n          item.editable = true;\n        }\n\n        return item;\n      });\n      let result = newData;\n      const indices = event.itemHierarchicalIndex.split('_').map(index => Number(index));\n      let itemText = \"\";\n\n      for (let i = 0; i < indices.length; i++) {\n        if (i === 0) {\n          result = result[0];\n        } else {\n          result = result.items[indices[i]];\n        }\n\n        itemText = i > 0 ? itemText + \" > \" + result.text : result.text;\n      }\n\n      this.setState({\n        treeData: newData,\n        clickedItem: event.item,\n        targetLocationHierarchy: itemText\n      });\n    };\n\n    this.onExpandChange = event => {\n      event.item.expanded = !event.item.expanded;\n      this.forceUpdate();\n    };\n\n    this.onComboChangeTree = (comboData, fieldName, caseNo) => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (caseNo === 3) {\n        let nfilterStorageCategory = this.state.nfilterStorageCategory || {};\n        nfilterStorageCategory = comboData;\n        this.searchRef.current.value = \"\";\n        this.setState({\n          nfilterStorageCategory\n        });\n      } else if (caseNo === 4) {\n        selectedRecord[fieldName] = comboData;\n        this.props.loadApprovedLocationOnCombo(this.props.Login.userInfo, this.props.Login.masterData, selectedRecord);\n      } else if (caseNo === 5) {\n        selectedRecord[fieldName] = comboData;\n        this.props.loadApprovedLocationOnTreeData(this.props.Login.userInfo, this.props.Login.masterData, selectedRecord);\n      } else {\n        selectedRecord[fieldName] = comboData;\n        this.setState({\n          selectedRecord\n        });\n      }\n    };\n\n    this.onDropFileSubSample = (attachedFiles, fieldName, maxSize) => {\n      let selectedRecord = this.state.selectedRecord || {};\n      selectedRecord[fieldName] = onDropAttachFileList(selectedRecord[fieldName], attachedFiles, maxSize);\n      this.setState({\n        selectedRecord,\n        actionType: \"new\"\n      });\n    };\n\n    this.deleteAttachmentSubSample = (event, file, fieldName) => {\n      let selectedRecord = this.state.selectedRecord || {};\n      selectedRecord[fieldName] = deleteAttachmentDropZone(selectedRecord[fieldName], file);\n      this.setState({\n        selectedRecord,\n        actionType: \"delete\" //fileToDelete:file.name \n\n      });\n    };\n\n    this.onSendToStoreSample = (saveType, formRef) => {\n      let inputData = [];\n\n      if (this.state.selectedRecord.nstoragecategorycode && this.state.selectedRecord.nstoragecategorycode.value !== undefined) {\n        if (this.state.selectedRecord.nsamplestoragelocationcode && this.state.selectedRecord.nsamplestoragelocationcode.value !== undefined) {\n          if (this.state.clickedItem && this.state.clickedItem.containerlastnode === true) {\n            inputData[\"userinfo\"] = this.props.Login.userInfo;\n            let ssampleArNO = \"\";\n\n            if (this.props.Login.masterData.RegSubTypeValue.nneedsubsample === true) {\n              ssampleArNO = this.props.Login.masterData.selectedSubSample[0].ssamplearno;\n            } else {\n              ssampleArNO = this.props.Login.masterData.selectedSample[0].sarno;\n            }\n\n            inputData[\"sampleStorageMaster\"] = {\n              \"ssampletraycode\": this.state.clickedItem ? this.state.clickedItem.id : \"\",\n              \"ssamplearno\": ssampleArNO,\n              \"nsamplestoragelocationcode\": this.state.selectedRecord.nsamplestoragelocationcode.value,\n              \"slocationhierarchy\": this.state.targetLocationHierarchy ? this.state.targetLocationHierarchy : \"\",\n              \"nstoragecategorycode\": this.state.selectedRecord.nstoragecategorycode.value,\n              \"nsampleqty\": this.state.selectedRecord.nsampleqty ? this.state.selectedRecord.nsampleqty : 0,\n              \"nunitcode\": this.state.selectedRecord.nunitcode ? this.state.selectedRecord.nunitcode.value : -1\n            };\n            const inputParam = {\n              methodUrl: this.props.Login.inputParam.methodUrl,\n              classUrl: this.props.Login.inputParam.classUrl,\n              displayName: this.props.Login.inputParam.displayName ? this.props.Login.inputParam.displayName : '',\n              inputData: { ...inputData,\n                npreregno: this.props.Login.npreregno,\n                ntransactionsamplecode: this.props.Login.ntransactionsamplecode,\n                needSubSample: this.props.Login.masterData.RegSubTypeValue.nneedsubsample === true ? true : false,\n                sample: ssampleArNO\n              },\n              operation: this.props.Login.operation,\n              saveType,\n              formRef\n            };\n            const masterData = this.props.Login.masterData;\n            const selectedRecord = this.state.selectedRecord || {};\n\n            if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolcode)) {\n              const updateInfo = {\n                typeName: DEFAULT_RETURN,\n                data: {\n                  loadEsign: true,\n                  screenData: {\n                    inputParam,\n                    masterData,\n                    selectedRecord\n                  },\n                  saveType,\n                  openModal: true\n                }\n              };\n              this.props.updateStore(updateInfo);\n            } else {\n              this.props.sendToStoreSampleStorageMaster(this.props.Login.userInfo, inputParam);\n            }\n          } else {\n            toast.info(this.props.intl.formatMessage({\n              id: \"IDS_SELECTSTORAGELOCATIONEND\"\n            }));\n          }\n        } else {\n          toast.info(this.props.intl.formatMessage({\n            id: \"IDS_SELECTSTORAGELOCATION\"\n          }));\n        }\n      } else {\n        toast.info(this.props.intl.formatMessage({\n          id: \"IDS_SELECTSTORAGECATEGORY\"\n        }));\n      }\n    };\n\n    this.viewFile = filedata => {\n      if (filedata.viewName === 'InfoView') {\n        if (filedata && filedata[filedata.field[2] + ['_ssystemfilename_Sample']] !== undefined && filedata[filedata.field[2]] !== \"\") {\n          const inputParam = {\n            inputData: {\n              viewFile: {\n                ssystemfilename: filedata[filedata.field[2] + ['_ssystemfilename_Sample']],\n                npreregno: filedata.npreregno\n              },\n              userinfo: this.props.Login.userInfo\n            },\n            classUrl: \"registration\",\n            operation: \"view\",\n            methodUrl: \"RegistrationFile\" //screenName: filedata.displayName\n\n          };\n          this.props.viewAttachment(inputParam);\n        } else {\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_FILENOTUPLOADED\"\n          }));\n        }\n      } else if (filedata.viewName === 'subSample') {\n        if (filedata && filedata[filedata.field[2] + ['_ssystemfilename_subSample']] !== undefined && filedata[filedata.field[2]] !== \"\") {\n          const inputParam = {\n            inputData: {\n              viewFile: {\n                ssystemfilename: filedata[filedata.field[2] + ['_ssystemfilename_subSample']],\n                npreregno: filedata.npreregno,\n                ntransactionsamplecode: filedata.ntransactionsamplecode\n              },\n              userinfo: this.props.Login.userInfo\n            },\n            classUrl: \"registration\",\n            operation: \"view\",\n            methodUrl: \"RegistrationSubSampleFile\" //screenName: filedata.displayName\n\n          };\n          this.props.viewAttachment(inputParam);\n        } else {\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_FILENOTUPLOADED\"\n          }));\n        }\n      } else {\n        if (filedata && filedata[filedata.dataField + ['_ssystemfilename_Sample']] !== undefined && filedata[filedata.dataField] !== \"\") {\n          const inputParam = {\n            inputData: {\n              viewFile: {\n                ssystemfilename: filedata[filedata.dataField + ['_ssystemfilename_Sample']],\n                npreregno: filedata.npreregno\n              },\n              userinfo: this.props.Login.userInfo\n            },\n            classUrl: \"registration\",\n            operation: \"view\",\n            methodUrl: \"RegistrationFile\" //screenName: filedata.displayName\n\n          };\n          this.props.viewAttachment(inputParam);\n        } else {\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_FILENOTUPLOADED\"\n          }));\n        }\n      }\n    };\n\n    this.searchSampleRef = React.createRef();\n    this.searchSubSampleRef = React.createRef();\n    this.searchTestRef = React.createRef();\n    this.PrevoiusLoginData = undefined;\n    this.breadCrumbData = []; //  this.sampleeditable=this.props.Login.masterData.DynamicDesign&& JSON.parse(this.props.Login.masterData.DynamicDesign.jsondata.value)\n\n    this.state = {\n      layout: 1,\n      openModal: false,\n      masterStatus: \"\",\n      error: \"\",\n      selectedRecord: {},\n      operation: \"\",\n      screenName: \"Product\",\n      userRoleControlRights: [],\n      controlMap: new Map(),\n      showAccordian: true,\n      showSaveContinue: false,\n      filterCollection: [],\n      selectedFilter: {},\n      breadCrumb: [],\n      showTest: true,\n      showSample: false,\n      showSubSample: false,\n      sampleSearchFied: [],\n      subsampleSearchFied: [],\n      testSearchFied: [],\n      showConfirmAlert: false,\n      dataState: {\n        skip: 0,\n        take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n      },\n      DynamicSampleColumns: [],\n      sampleGridDataState: {\n        skip: 0,\n        take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n      },\n      testDataState: {\n        skip: 0,\n        take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 //, group: [{ field: 'npreregno' }] \n\n      },\n      testCommentDataState: {\n        skip: 0,\n        take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 //, group: [{ field: 'groupingField' }] \n\n      },\n      subSampleCommentDataState: {\n        skip: 0,\n        take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 //, group: [{ field: 'groupingField' }] \n\n      },\n      subSampleAttachmentDataState: {\n        skip: 0,\n        take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 //, group: [{ field: 'groupingField' }] \n\n      },\n      testAttachmentDataState: {\n        skip: 0,\n        take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 //, group: [{ field: 'groupingField' }] \n\n      },\n      sampleCommentDataState: {\n        skip: 0,\n        take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 //, group: [{ field: 'groupingField' }]\n\n      },\n      resultDataState: {\n        skip: 0,\n        take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 //, group: [{ field: 'sarno' }] \n\n      },\n      historyDataState: {\n        skip: 0,\n        take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 //, group: [{ field: 'sarno' }, { field: 'stestsynonym' }] \n\n      },\n      externalOrderAttachmentDataState: {\n        skip: 0,\n        take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n      },\n      outsourceDetailsDataState: {\n        skip: 0,\n        take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n      },\n      selectedPrinterData: {},\n      grandparentheight: '150vh',\n      transactionValidation: [],\n      skip: 0,\n      take: this.props.Login.settings && parseInt(this.props.Login.settings[3]),\n      testskip: 0,\n      splitChangeWidthPercentage: 28.6,\n      testtake: this.props.Login.settings && this.props.Login.settings[12] ? this.props.Login.settings[12] : 10,\n      subsampleskip: 0,\n      subsampletake: this.props.Login.settings && this.props.Login.settings[3] ? this.props.Login.settings[3] : 10,\n      comboComponents: [],\n      withoutCombocomponent: [],\n      childColumnList: [],\n      columnList: [],\n      regSubSamplecomboComponents: [],\n      regSubSamplewithoutCombocomponent: [],\n      regparentSubSampleColumnList: [],\n      regchildSubSampleColumnList: [],\n      DynamicSubSampleColumns: [],\n      DynamicTestColumns: [],\n      DynamicGridItem: [],\n      DynamicGridMoreField: [],\n      SingleItem: [],\n      testMoreField: [],\n      testListColumns: [],\n      SubSampleDynamicGridItem: [],\n      SubSampleDynamicGridMoreField: [],\n      SubSampleSingleItem: [],\n      sampleCombinationUnique: [],\n      subsampleCombinationUnique: [],\n      cancelId: -1,\n      preRegisterId: -1,\n      sampleBarcodeId: -1,\n      subSampleBarcodeId: -1,\n      registerId: -1,\n      editSampleId: -1,\n      quarantineId: -1,\n      addTestId: -1,\n      adhocTestId: -1,\n      generateBarcodeId: -1,\n      printBarcodeId: -1,\n      cancelSampleId: -1,\n      addSubSampleId: -1,\n      editSubSampleId: -1,\n      cancelSubSampleId: -1,\n      CancelExternalOrderSampleId: -1,\n      exportTemplateId: -1,\n      importTemplateId: -1,\n      stateSampleType: [],\n      stateRegistrationType: [],\n      stateRegistrationSubType: [],\n      stateFilterStatus: [],\n      stateDynamicDesign: [],\n      testGetParam: {},\n      testChildGetParam: {},\n      subSampleGetParam: {},\n      filterSampleParam: {},\n      filterTestParam: {},\n      editRegParam: {},\n      editSubSampleRegParam: {},\n      addTestParam: {},\n      sampleSearchField: [],\n      subsampleSearchField: [],\n      testSearchField: [],\n      filterSubSampleParam: {},\n      initialVerticalWidth: \"57vh\",\n      enablePin: false,\n      fixefScrollHeight: window.outerHeight - 300,\n      enablePropertyPopup: false,\n      enableAutoClick: false,\n      //mention the property width in percentage based on window size\n      propertyPopupWidth: \"60\",\n      showQRCode: false,\n      showBarcode: false,\n      // specBasedComponent: this.props.Login.settings\n      //     && this.props.Login.settings[18] ? this.props.Login.settings[18] === \"true\" ? true : false : false,\n      treeData: [],\n      toggleAction: false,\n      selectedMaster: [],\n      outsourceId: -1\n    }; // this.onSecondaryPaneSizeChange = this.onSecondaryPaneSizeChange.bind(this);\n\n    this.myRef = React.createRef();\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\n      toast.info(props.Login.masterStatus);\n      props.Login.masterStatus = \"\";\n    }\n\n    if (props.Login.error !== state.error) {\n      toast.error(props.Login.error);\n      props.Login.error = \"\";\n    }\n\n    if (props.Login.showConfirmAlert !== state.showConfirmAlert) {\n      return {\n        showConfirmAlert: props.Login.showConfirmAlert\n      };\n    }\n\n    return null;\n  }\n\n  getActiveTestURL() {\n    let url = \"resultentrybysample/getTestbasedParameter\";\n\n    switch (this.props.Login.activeTestTab) {\n      case \"IDS_PARAMETERRESULTS\":\n        //url = \"resultentrybysample/getTestbasedParameter\";\n        url = \"registration/getregistrationparameter\";\n        break;\n\n      case \"IDS_TESTCOMMENTS\":\n        url = \"comments/getTestComment\";\n        break;\n\n      case \"IDS_TESTATTACHMENTS\":\n        url = \"attachment/getTestAttachment\";\n        break;\n\n      default:\n        url = \"registration/getregistrationparameter\"; // url = \"resultentrybysample/getTestbasedParameter\";\n\n        break;\n    }\n\n    return url;\n  }\n\n  valiateCheckAll(data) {\n    let selectAll = true; // let checkRepeatComponent;\n    //  let addedComponentList = this.state.addedComponentList || [];\n\n    if (data && data.length > 0) {\n      data.forEach(dataItem => {\n        if (dataItem.selected) {\n          if (dataItem.selected === false) {\n            selectAll = false;\n          }\n        } else {\n          selectAll = false;\n        }\n      });\n    } else {\n      selectAll = false;\n    }\n\n    return selectAll;\n  }\n\n  render() {\n    this.fromDate = this.state.selectedFilter[\"fromdate\"] !== \"\" && this.state.selectedFilter[\"fromdate\"] !== undefined ? this.state.selectedFilter[\"fromdate\"] : this.props.Login.masterData.FromDate;\n    this.toDate = this.state.selectedFilter[\"todate\"] !== \"\" && this.state.selectedFilter[\"todate\"] !== undefined ? this.state.selectedFilter[\"todate\"] : this.props.Login.masterData.ToDate;\n    let sampleList = this.props.Login.masterData.RegistrationGetSample ? this.props.Login.regSampleExisted ? sortDataForDate(this.props.Login.masterData.RegistrationGetSample, 'dtransactiondate', 'npreregno') : sortDataForDate(this.props.Login.masterData.RegistrationGetSample, 'dtransactiondate', 'npreregno') : [];\n    let subSampleList = this.props.Login.masterData.RegistrationGetSubSample ? this.props.Login.masterData.RegistrationGetSubSample : [];\n    let testList = this.props.Login.masterData.RegistrationGetTest ? this.props.Login.masterData.RegistrationGetTest : []; //\n\n    const sendToStore = this.state.controlMap.has(\"Sample SendToStore\") && this.state.controlMap.get(\"Sample SendToStore\").ncontrolcode;\n    const testDesign = /*#__PURE__*/React.createElement(ContentPanel, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1225,\n        columnNumber: 28\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1226,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Card.Header, {\n      style: {\n        borderBottom: \"0px\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1227,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      style: {\n        display: \"inline-block\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1228,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"h4\", {\n      className: \"card-title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1229,\n        columnNumber: 25\n      }\n    }, this.props.intl.formatMessage({\n      id: \"IDS_TEST\"\n    })))), /*#__PURE__*/React.createElement(Card.Body, {\n      className: \"p-0 sm-pager\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1239,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(TransactionListMasterJsonView, {\n      cardHead: 94,\n      clickIconGroup: true // paneHeight={this.state.initialVerticalWidth}\n      ,\n      masterList: this.props.Login.masterData.searchedTest || testList,\n      selectedMaster: this.props.Login.masterData.selectedTest,\n      primaryKeyField: \"ntransactiontestcode\",\n      getMasterDetail: (event, status) => {\n        this.props.getTestChildTabDetailRegistration(event, status);\n        this.changePropertyView(1, event, \"click\");\n      },\n      inputParam: { ...this.state.testChildGetParam,\n        resultDataState: this.state.resultDataState,\n        testCommentDataState: this.state.testCommentDataState,\n        testAttachmentDataState: this.state.testAttachmentDataState,\n        // activeTabIndex: this.state.enableAutoClick ? 1 : this.state.activeTabIndex ? this.state.activeTabIndex : undefined,\n        // activeTabIndex: this.state.enableAutoClick && this.state.activeTabIndex == undefined ?\n        //     this.props.Login.masterData.RealSampleTypeValue && this.props.Login.masterData.RealSampleTypeValue.nsampletypecode !== SampleType.CLINICALTYPE ? 1 : 0 : this.state.enableAutoClick && this.state.activeTabIndex == 0 ?\n        //         this.props.Login.masterData.RealSampleTypeValue && this.props.Login.masterData.RealSampleTypeValue.nsampletypecode !== SampleType.CLINICALTYPE ? 1 : 0 : this.state.enableAutoClick ? this.state.activeTabIndex : 0,\n        activeTabIndex: this.state.enableAutoClick && this.state.activeTabIndex == undefined ? 0 : this.state.enableAutoClick && this.state.activeTabIndex == 0 ? 0 : this.state.enableAutoClick ? this.state.activeTabIndex : 0\n      },\n      additionalParam: [],\n      mainField: \"stestsynonym\",\n      selectedListName: \"selectedTest\",\n      objectName: \"test\",\n      listName: \"IDS_TEST\" // jsonField={'jsondata'}\n      ,\n      pageSize: this.props.Login.settings && this.props.Login.settings[13].split(\",\").map(setting => parseInt(setting)),\n      showStatusLink: true,\n      subFieldsLabel: true,\n      statusFieldName: \"stransdisplaystatus\",\n      statusField: \"ntransactionstatus\",\n      needMultiSelect: true,\n      subFields: this.state.testListColumns || [],\n      moreField: this.state.testMoreField,\n      needValidation: false,\n      showStatusName: true,\n      needFilter: false,\n      filterColumnData: this.props.filterTransactionList,\n      searchListName: \"searchedTest\",\n      searchRef: this.searchTestRef,\n      filterParam: this.state.filterTestParam,\n      selectionField: \"ntransactionstatus\",\n      selectionFieldName: \"stransdisplaystatus\" // childTabsKey={[\"RegistrationTestComment\"]}\n      ,\n      childTabsKey: [\"RegistrationParameter\", \"RegistrationTestComment\", \"RegistrationTestAttachment\", \"ApprovalParameter\"],\n      handlePageChange: this.handleTestPageChange,\n      buttonCount: 5,\n      skip: this.state.testskip,\n      take: this.state.testtake,\n      showMoreResetList: true,\n      showMoreResetListName: \"RegistrationGetSample\",\n      selectionList: this.props.Login.masterData.RealFilterStatusValue && this.props.Login.masterData.RealFilterStatusValue.ntransactionstatus === transactionStatus.ALL ? this.props.Login.masterData.FilterStatus : [],\n      selectionColorField: \"scolorhexcode\" // selectionList=\n      // actionIcons={\n      //     [{ title: \"EditTest\", controlname: \"faPencilAlt\", hidden: this.state.userRoleControlRights.indexOf(editSourceMethodId) === -1, onClick: this.testMethodSourceEdit, objectName: \"test\", inputData: { masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo, editSourceMethodId } },\n      //     { title: \"Add Intrument\", controlname: \"faMicroscope\", hidden: this.state.userRoleControlRights.indexOf(addResultUsedInstrumentId) === -1, onClick: this.addREInstrument, objectName: \"test\", inputData: { masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo, addResultUsedInstrumentId } },\n      //     { title: \"Add Material\", controlname: \"faFlask\", hidden: this.state.userRoleControlRights.indexOf(addResultUsedMaterailId) === -1 },\n      //     { title: \"Add Task\", controlname: \"faTasks\", hidden: this.state.userRoleControlRights.indexOf(addResultUsedTaskId) === -1, onClick: this.addResultEntryTask, objectName: \"test\", inputData: { addResultUsedTaskId } }]\n      // }\n      // actionIcons={\n      //     [\n      //         {\n      //             title: this.props.intl.formatMessage({ id: \"IDS_OUTSOURCE\" }),\n      //             controlname: \"faOutsource\",\n      //             hidden: this.props.Login.masterData.RealSampleTypeValue && this.props.Login.masterData.RealSampleTypeValue.noutsourcerequired === transactionStatus.YES ? false : true,\n      //             // hidden:this.props.Login.masterData.RealSampleTypeValue && this.props.Login.masterData.RealSampleTypeValue.nsampletypecode === SampleType.CLINICALTYPE? false :true,\n      //             // hidden: this.state.userRoleControlRights.indexOf(openELNSheet) === -1, \n      //             onClick: this.outsourceTest, objectName: \"test\",\n      //             inputData: { masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo }\n      //         },\n      //     ]}\n      ,\n      commonActions: /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(ProductList, {\n        className: \"d-flex justify-content-end icon-group-wrap\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1313,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(Nav.Link, {\n        name: \"addtest\",\n        className: \"btn btn-circle outline-grey ml-2\" //title={\"Add Test\"}\n        //data-for=\"tooltip-common-wrap\"\n        ,\n        \"data-tip\": this.props.intl.formatMessage({\n          id: \"IDS_ADDTEST\"\n        }),\n        hidden: this.state.userRoleControlRights.indexOf(this.state.addTestId) === -1,\n        onClick: () => this.addMoreTest({ ...this.state.addTestParam,\n          skip: this.state.skip,\n          take: this.state.skip + this.state.take\n        }, this.state.addTestId),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1315,\n          columnNumber: 37\n        }\n      }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n        icon: faPlus,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1327,\n          columnNumber: 41\n        }\n      })), /*#__PURE__*/React.createElement(Nav.Link, {\n        className: \"btn btn-circle outline-grey ml-2\" //title={\"Cancel/Reject Test\"}\n        // data-for=\"tooltip-common-wrap\"\n        ,\n        \"data-tip\": this.props.intl.formatMessage({\n          id: \"IDS_CANCELREJECTTEST\"\n        }),\n        hidden: this.state.userRoleControlRights.indexOf(this.state.cancelId) === -1,\n        onClick: () => this.cancelRecord(this.state.cancelId, this.state.testskip, this.state.testtake),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1329,\n          columnNumber: 37\n        }\n      }, /*#__PURE__*/React.createElement(Reject, {\n        className: \"custom_icons\",\n        width: \"15\",\n        height: \"15\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1336,\n          columnNumber: 41\n        }\n      })))),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1240,\n        columnNumber: 21\n      }\n    }))));\n    let mainDesign = \"\";\n\n    if (this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample) {\n      mainDesign = /*#__PURE__*/React.createElement(SplitterLayout, {\n        borderColor: \"#999\",\n        primaryIndex: 1,\n        percentage: true,\n        secondaryInitialSize: this.state.splitChangeWidthPercentage,\n        onSecondaryPaneSizeChange: this.paneSizeChange,\n        primaryMinSize: 40,\n        secondaryMinSize: 30,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1353,\n          columnNumber: 26\n        }\n      }, /*#__PURE__*/React.createElement(Card, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1361,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(Card.Header, {\n        style: {\n          borderBottom: \"0px\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1362,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        style: {\n          display: \"inline-block\",\n          marginTop: \"1%\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1363,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(\"h4\", {\n        className: \"card-title\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1364,\n          columnNumber: 29\n        }\n      }, this.props.intl.formatMessage({\n        id: \"IDS_SUBSAMPLE\"\n      })))), /*#__PURE__*/React.createElement(Card.Body, {\n        className: \"p-0 sm-pager\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1367,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(TransactionListMasterJsonView, {\n        cardHead: 94 // paneHeight={this.state.initialVerticalWidth}\n        // splitChangeWidthPercentage={this.state.splitChangeWidthPercentage}\n        ,\n        clickIconGroup: true,\n        masterList: this.props.Login.masterData.searchedSubSample || subSampleList,\n        selectedMaster: this.props.Login.masterData.selectedSubSample,\n        primaryKeyField: \"ntransactionsamplecode\",\n        getMasterDetail: (event, status) => {\n          this.props.getRegistrationTestDetail(event, status); //  this.changePropertyView(6, event, status) \n        },\n        inputParam: { ...this.state.testGetParam,\n          searchTestRef: this.searchTestRef,\n          searchSubSampleRef: this.searchSubSampleRef,\n          testskip: this.state.testskip,\n          subsampleskip: this.state.subsampleskip,\n          testtake: this.state.testtake,\n          subsampletake: this.state.subsampletake,\n          resultDataState: this.state.resultDataState // activeTabIndex: this.state.enableAutoClick ? 1 : this.state.activeTabIndex ? this.state.activeTabIndex : undefined,\n          // activeTabIndex : this.state.enableAutoClick && this.state.activeTabIndex == undefined ? 1 : this.state.enableAutoClick && this.state.activeTabIndex == 0 ? 1 : this.state.enableAutoClick ? this.state.activeTabIndex : 0,\n\n        },\n        filterColumnData: this.props.filterTransactionList,\n        searchListName: \"searchedSubSample\",\n        searchRef: this.searchSubSampleRef,\n        filterParam: { ...this.state.filterSubSampleParam,\n          childRefs: [{\n            ref: this.searchTestRef,\n            childFilteredListName: \"searchedTest\"\n          }]\n        },\n        additionalParam: ['napprovalversioncode'],\n        showStatusLink: true,\n        showStatusName: true,\n        statusFieldName: \"stransdisplaystatus\",\n        statusField: \"ntransactionstatus\",\n        mainField: \"ssamplearno\",\n        selectedListName: \"selectedSubSample\",\n        objectName: \"subsample\",\n        listName: \"IDS_SUBSAMPLE\" // jsonField={'jsondata'}\n        //jsonDesignFields={true}\n        ,\n        needValidation: true,\n        validationKey: \"napprovalversioncode\",\n        validationFailMsg: \"IDS_SELECTSAMPLESOFSAMPLEAPPROVALVERSION\",\n        subFields: this.state.DynamicSubSampleColumns,\n        skip: this.state.subsampleskip,\n        take: this.state.subsampletake,\n        selectionField: \"ntransactionstatus\",\n        selectionFieldName: \"stransdisplaystatus\",\n        needMultiSelect: true,\n        selectionColorField: \"scolorhexcode\",\n        subFieldsLabel: false,\n        subFieldsFile: true,\n        handlePageChange: this.handleSubSamplePageChange // viewFile={this.viewFile}\n        ,\n        selectionList: this.props.Login.masterData.RealFilterStatusValue && this.props.Login.masterData.RealFilterStatusValue.ntransactionstatus === transactionStatus.ALL ? this.props.Login.masterData.FilterStatus : [],\n        childTabsKey: [// \"RegistrationAttachment\",\n        \"RegistrationGetTest\", \"RegistrationSampleComment\", \"RegistrationSampleAttachment\", \"OutsourceDetailsList\", \"RegistrationParameter\", \"RegistrationTestAttachment\", \"RegistrationTestComment\"],\n        actionIcons: this.props.Login.masterData && this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nneedsubsample === true ? [{\n          title: this.props.intl.formatMessage({\n            id: \"IDS_SENDTOSTORE\"\n          }),\n          controlname: \"faArrowRight\",\n          objectName: \"mastersendtostore\",\n          hidden: this.state.userRoleControlRights.indexOf(sendToStore) === -1,\n          onClick: this.sendToStore,\n          inputData: {\n            masterData: this.props.Login.masterData,\n            userInfo: this.props.Login.userInfo,\n            ncontrolCode: sendToStore,\n            subSampleRegParam: { ...this.state.editSubSampleRegParam\n            }\n          }\n        }, {\n          title: this.props.intl.formatMessage({\n            id: \"IDS_EDIT\"\n          }),\n          controlname: \"faPencilAlt\",\n          objectName: \"mastertoedit\",\n          hidden: this.state.userRoleControlRights.indexOf(this.state.editSubSampleId) === -1,\n          onClick: this.editSubSampleRegistration,\n          inputData: {\n            primaryKeyName: \"ntransactionsamplecode\",\n            operation: \"update\",\n            masterData: this.props.Login.masterData,\n            userInfo: this.props.Login.userInfo,\n            editSubSampleRegParam: { ...this.state.editSubSampleRegParam,\n              ncontrolCode: this.state.editSubSampleId\n            }\n          }\n        }, {\n          //ALPD-3615\n          title: this.props.intl.formatMessage({\n            id: \"IDS_ADHOCTEST\"\n          }),\n          controlname: \"faPrint\",\n          objectName: \"sampleadhoctest\",\n          hidden: this.state.userRoleControlRights.indexOf(this.state.adhocTestId) === -1,\n          //onClick: this.props.getPrinterComboService,\n          onClick: this.addAdhocTest,\n          inputData: { ...this.state.addTestParam,\n            primaryKeyName: \"ntransactionsamplecode\",\n            ncontrolcode: this.state.adhocTestId,\n            masterData: this.props.Login.masterData,\n            userInfo: this.props.Login.userInfo,\n            editRegParam: { ...this.state.editSubSampleRegParam,\n              ncontrolCode: this.state.adhocTestId\n            }\n          }\n        }, {\n          title: this.props.intl.formatMessage({\n            id: \"IDS_OUTSOURCE\"\n          }),\n          controlname: \"faOutsource\",\n          hidden: (this.props.Login.masterData.RealSampleTypeValue && this.props.Login.masterData.RealSampleTypeValue.noutsourcerequired === transactionStatus.NO ? false : true) && this.state.userRoleControlRights.indexOf(this.state.outsourceId) === -1,\n          // hidden:this.props.Login.masterData.RealSampleTypeValue && this.props.Login.masterData.RealSampleTypeValue.nsampletypecode === SampleType.CLINICALTYPE? false :true,\n          // hidden: this.state.userRoleControlRights.indexOf(openELNSheet) === -1, \n          onClick: this.outsourceSample,\n          objectName: \"test\",\n          inputData: {\n            masterData: this.props.Login.masterData,\n            userInfo: this.props.Login.userInfo\n          }\n        }, {\n          title: this.props.intl.formatMessage({\n            id: \"IDS_ORDERMAPPING\"\n          }),\n          controlname: \"mapping\",\n          objectName: \"subSample\",\n          hidden: this.props.Login.masterData.RealSampleTypeValue && this.props.Login.masterData.RealSampleTypeValue.nsampletypecode !== SampleType.CLINICALTYPE ? true : false,\n          //this.state.userRoleControlRights.indexOf(this.state.printBarcodeId) === -1,\n          //onClick: this.props.getPrinterComboService,\n          onClick: this.orderMapping,\n          inputData: {\n            primaryKeyName: \"ntransactionsamplecode\",\n            operation: \"prints\",\n            // ncontrolcode: this.state.printBarcodeId,\n            masterData: this.props.Login.masterData,\n            userInfo: this.props.Login.userInfo // editRegParam: {\n            //     ...this.state.editRegParam,\n            //     ncontrolCode: this.state.printBarcodeId\n            // }\n\n          }\n        }, {\n          // Control will be shown only for web technology\n          title: this.props.intl.formatMessage({\n            id: \"IDS_GENERATEBARCODE\"\n          }),\n          controlname: \"faBarcode\",\n          hidden: this.props.Login.masterData.RealSampleTypeValue && this.props.Login.masterData.RealSampleTypeValue.nsampletypecode === SampleType.CLINICALTYPE ? this.props.Login.userInfo.nisstandaloneserver === transactionStatus.NO && this.props.Login.userInfo.nissyncserver === transactionStatus.NO ? this.state.userRoleControlRights.indexOf(this.state.generateBarcodeId) === -1 : true : true,\n          onClick: this.generateBarcode,\n          objectName: \"test\",\n          inputData: {\n            masterData: this.props.Login.masterData,\n            userInfo: this.props.Login.userInfo\n          }\n        }] : [{\n          title: this.props.intl.formatMessage({\n            id: \"IDS_EDIT\"\n          }),\n          controlname: \"faPencilAlt\",\n          objectName: \"mastertoedit\",\n          hidden: this.state.userRoleControlRights.indexOf(this.state.editSubSampleId) === -1,\n          onClick: this.editSubSampleRegistration,\n          inputData: {\n            primaryKeyName: \"ntransactionsamplecode\",\n            operation: \"update\",\n            masterData: this.props.Login.masterData,\n            userInfo: this.props.Login.userInfo,\n            editSubSampleRegParam: { ...this.state.editSubSampleRegParam,\n              ncontrolCode: this.state.editSubSampleId\n            }\n          }\n        }, {\n          title: this.props.intl.formatMessage({\n            id: \"IDS_ORDERMAPPING\"\n          }),\n          controlname: \"mapping\",\n          objectName: \"subSample\",\n          hidden: this.props.Login.masterData.RealSampleTypeValue && this.props.Login.masterData.RealSampleTypeValue.nsampletypecode !== SampleType.CLINICALTYPE ? true : false,\n          //this.state.userRoleControlRights.indexOf(this.state.printBarcodeId) === -1,\n          //onClick: this.props.getPrinterComboService,\n          onClick: this.orderMapping,\n          inputData: {\n            primaryKeyName: \"ntransactionsamplecode\",\n            operation: \"prints\",\n            // ncontrolcode: this.state.printBarcodeId,\n            masterData: this.props.Login.masterData,\n            userInfo: this.props.Login.userInfo // editRegParam: {\n            //     ...this.state.editRegParam,\n            //     ncontrolCode: this.state.printBarcodeId\n            // }\n\n          }\n        }],\n        needFilter: false,\n        commonActions: /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(ProductList, {\n          className: \"d-flex justify-content-end icon-group-wrap\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1569,\n            columnNumber: 37\n          }\n        }, /*#__PURE__*/React.createElement(Nav.Link, {\n          name: \"adddeputy\",\n          className: \"btn btn-circle outline-grey ml-2\" //title={\"Add Test\"}\n          //  data-for=\"tooltip-common-wrap\"\n          ,\n          \"data-tip\": this.props.intl.formatMessage({\n            id: \"IDS_ADDSUBSAMPLE\"\n          }),\n          hidden: this.state.userRoleControlRights.indexOf(this.state.addSubSampleId) === -1 // onClick={() => this.addSubSample(this.state.addSubSampleId, this.state.subsampleskip, this.state.subsampletake)}\n          ,\n          onClick: () => this.addSubSample(this.state.addSubSampleId, this.state.skip, this.state.take),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1573,\n            columnNumber: 41\n          }\n        }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n          icon: faPlus,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1581,\n            columnNumber: 45\n          }\n        })), /*#__PURE__*/React.createElement(Nav.Link, {\n          className: \"btn btn-circle outline-grey ml-2\" //title={\"Cancel/Reject Test\"}\n          //data-for=\"tooltip-common-wrap\"\n          ,\n          \"data-tip\": this.props.intl.formatMessage({\n            id: \"IDS_CANCELREJECTSUBSAMPLE\"\n          }),\n          hidden: this.state.userRoleControlRights.indexOf(this.state.cancelSubSampleId) === -1,\n          onClick: () => this.cancelSubSampleRecord(this.state.cancelSubSampleId, this.state.subsampleskip, this.state.subsampletake),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1583,\n            columnNumber: 41\n          }\n        }, /*#__PURE__*/React.createElement(Reject, {\n          className: \"custom_icons\",\n          width: \"15\",\n          height: \"15\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1590,\n            columnNumber: 45\n          }\n        })), /*#__PURE__*/React.createElement(Button, {\n          className: \"btn btn-circle outline-grey ml-2\",\n          variant: \"link\",\n          \"data-tip\": this.props.intl.formatMessage({\n            id: \"IDS_PRINTBARCODE\"\n          }) //  data-for=\"tooltip-common-wrap\"\n          ,\n          hidden: this.state.userRoleControlRights.indexOf(this.state.subSampleBarcodeId) === -1 // onClick={() => this.getGoodsInPrinterComboService(\"Registration\", \"create\", \"npreregno\",\n          //     this.props.Login.masterData, this.props.Login.userInfo, this.state.preRegisterId)}>\n          ,\n          onClick: () => this.props.getBarcodeAndPrinterService({\n            masterData: this.props.Login.masterData,\n            ncontrolcode: this.state.subSampleBarcodeId,\n            userInfo: this.props.Login.userInfo,\n            control: \"subSampleBarcode\"\n          }),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1593,\n            columnNumber: 41\n          }\n        }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n          icon: faPrint,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1612,\n            columnNumber: 45\n          }\n        })))),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1368,\n          columnNumber: 25\n        }\n      }))), testDesign);\n    } else {\n      mainDesign = testDesign;\n    }\n\n    this.confirmMessage = new ConfirmMessage();\n    this.postParamList = [{\n      filteredListName: \"searchedSample\",\n      clearFilter: \"no\",\n      searchRef: this.searchSampleRef,\n      primaryKeyField: \"npreregno\",\n      fetchUrl: \"registration/getRegistrationSubSample\",\n      fecthInputObject: { ...this.state.subSampleGetParam,\n        testskip: this.state.testskip,\n        subsampleskip: this.state.subsampleskip,\n        searchSubSampleRef: this.searchSubSampleRef,\n        searchTestRef: this.searchTestRef,\n        resultDataState: this.state.resultDataState,\n        testCommentDataState: this.state.testCommentDataState,\n        testAttachmentDataState: this.state.testAttachmentDataState,\n        sampleGridDataState: this.state.sampleGridDataState\n      },\n      childRefs: [{\n        ref: this.searchSubSampleRef,\n        childFilteredListName: \"searchedSubSample\"\n      }, {\n        ref: this.searchTestRef,\n        childFilteredListName: \"searchedTest\"\n      }],\n      selectedObject: \"selectedSample\",\n      inputListName: \"AP_SAMPLE\",\n      updatedListname: \"selectedSample\",\n      unchangeList: [\"realSampleTypeValue\", \"SampleTypeValue\", \"realRegTypeValue\", \"RegTypeValue\", \"realRegSubTypeValue\", \"RegSubTypeValue\", \"realApprovalVersionValue\", \"ApprovalVersionValue\", \"realFilterStatusValue\", \"FilterStatusValue\", \"fromDate\", \"toDate\", \"UserSectionValue\", \"SampleType\", \"RegType\", \"RegSubType\", \"ApprovalVersion\", \"JobStatus\", \"JobStatusValue\", \"FilterStatus\"]\n    }, {\n      filteredListName: \"searchedSubSample\",\n      clearFilter: \"no\",\n      searchRef: this.searchSubSampleRef,\n      primaryKeyField: \"ntransactionsamplecode\",\n      fetchUrl: \"registration/getRegistrationTestSample\",\n      fecthInputObject: { ...this.state.testGetParam,\n        testskip: this.state.testskip,\n        subsampleskip: this.state.subsampleskip,\n        searchSubSampleRef: this.searchSubSampleRef,\n        searchTestRef: this.searchTestRef,\n        resultDataState: this.state.resultDataState,\n        testCommentDataState: this.state.testCommentDataState,\n        testAttachmentDataState: this.state.testAttachmentDataState,\n        sampleGridDataState: this.state.sampleGridDataState\n      },\n      childRefs: [{\n        ref: this.searchTestRef,\n        childFilteredListName: \"searchedTest\"\n      }],\n      selectedObject: \"selectedSubSample\",\n      inputListName: \"selectedSubSample\",\n      updatedListname: \"RegistrationGetSubSample\",\n      unchangeList: [\"realSampleTypeValue\", \"SampleTypeValue\", \"realRegTypeValue\", \"RegTypeValue\", \"realRegSubTypeValue\", \"RegSubTypeValue\", \"realApprovalVersionValue\", \"ApprovalVersionValue\", \"realFilterStatusValue\", \"FilterStatusValue\", \"fromDate\", \"toDate\", \"UserSectionValue\", \"SampleType\", \"RegType\", \"RegSubType\", \"ApprovalVersion\", \"JobStatus\", \"JobStatusValue\", \"FilterStatus\"]\n    }, {\n      filteredListName: \"searchedTest\",\n      updatedListname: \"RegistrationGetTest\",\n      clearFilter: \"no\",\n      searchRef: this.searchTestRef,\n      primaryKeyField: \"ntransactiontestcode\",\n      fetchUrl: \"approval/getApprovalTest\",\n      fecthInputObject: { ...this.state.testGetParam,\n        searchTestRef: this.searchTestRef,\n        testskip: this.state.testskip,\n        subsampleskip: this.state.subsampleskip,\n        resultDataState: this.state.resultDataState\n      },\n      selectedObject: \"selectedTest\",\n      inputListName: \"selectedTest\",\n      unchangeList: [\"realSampleTypeValue\", \"SampleTypeValue\", \"realRegTypeValue\", \"RegTypeValue\", \"realRegSubTypeValue\", \"RegSubTypeValue\", \"realApprovalVersionValue\", \"ApprovalVersionValue\", \"realFilterStatusValue\", \"FilterStatusValue\", \"fromDate\", \"toDate\", \"UserSectionValue\", \"SampleType\", \"RegType\", \"RegSubType\", \"ApprovalVersion\", \"JobStatus\", \"JobStatusValue\", \"FilterStatus\"]\n    }]; // let editRegParam = {\n    //     nfilterstatus: String(this.props.Login.masterData.RealFilterStatusValue && this.props.Login.masterData.RealFilterStatusValue.ntransactionstatus),\n    //     userinfo: this.props.Login.userInfo,\n    //     nsampletypecode: this.props.Login.masterData.RealSampleTypeValue && this.props.Login.masterData.RealSampleTypeValue.nsampletypecode,\n    //     nregtypecode: this.props.Login.masterData.RealRegTypeValue && this.props.Login.masterData.RealRegTypeValue.nregtypecode,\n    //     nregsubtypecode: this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode,\n    //     sfromdate: this.props.Login.masterData.RealFromDate,\n    //     stodate: this.props.Login.masterData.RealToDate,\n    //     ncontrolCode: this.state.editSampleId,\n    //     ndesigntemplatemappingcode: this.props.Login.masterData.registrationTemplate\n    //         && this.props.Login.masterData.registrationTemplate.ndesigntemplatemappingcode,\n    //     nneedsubsample: this.props.Login.masterData\n    //         && this.props.Login.masterData.nneedsubsample\n    // }\n    // let editSubSampleRegParam = {\n    //     nfilterstatus: String(this.props.Login.masterData.RealFilterStatusValue && this.props.Login.masterData.RealFilterStatusValue.ntransactionstatus),\n    //     userinfo: this.props.Login.userInfo,\n    //     nsampletypecode: this.props.Login.masterData.RealSampleTypeValue && this.props.Login.masterData.RealSampleTypeValue.nsampletypecode,\n    //     nregtypecode: this.props.Login.masterData.RealRegTypeValue && this.props.Login.masterData.RealRegTypeValue.nregtypecode,\n    //     nregsubtypecode: this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode,\n    //     sfromdate: this.props.Login.masterData.RealFromDate,\n    //     stodate: this.props.Login.masterData.RealToDate,\n    //     ncontrolCode: this.state.editSampleId,\n    //     ndesigntemplatemappingcode: this.props.Login.masterData.registrationTemplate\n    //         && this.props.Login.masterData.registrationTemplate.ndesigntemplatemappingcode,\n    //     nneedsubsample: this.props.Login.masterData\n    //         && this.props.Login.masterData.nneedsubsample\n    // }\n    // const addTestParam = {\n    //     selectedsample: this.props.Login.masterData.selectedSample,\n    //     selectedsubsample: this.props.Login.masterData.selectedSubSample,\n    //     skip: this.state.skip, take: (this.state.skip + this.state.take),\n    //     userinfo: this.props.Login.userInfo,\n    //     sampleList: this.props.Login.masterData.RegistrationGetSample,\n    //     snspecsampletypecode: this.props.Login.masterData.selectedSubSample &&\n    //         [...new Set(this.props.Login.masterData.selectedSubSample.map(x => x.nspecsampletypecode))].join(\",\")\n    // };\n\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(ListWrapper, {\n      className: \"client-listing-wrap toolbar-top-wrap mtop-4 screen-height-window\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1748,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(BreadcrumbComponent, {\n      breadCrumbItem: this.breadCrumbData,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1749,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(Row, {\n      noGutters: true,\n      className: \"toolbar-top\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1750,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      className: \"parent-port-height\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1751,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(ListWrapper, {\n      className: `vertical-tab-top ${this.state.enablePropertyPopup ? 'active-popup' : \"\"}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1752,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: `tab-left-area ${this.state.activeTabIndex ? 'active' : \"\"}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1754,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(SplitterLayout, {\n      borderColor: \"#999\",\n      primaryIndex: 1,\n      percentage: true,\n      secondaryInitialSize: this.state.splitChangeWidthPercentage,\n      onSecondaryPaneSizeChange: this.paneSizeChange,\n      primaryMinSize: 30,\n      secondaryMinSize: 20,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1755,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"toolbar-top-inner\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1762,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(TransactionListMasterJsonView, {\n      listMasterShowIcon: 1 // paneHeight={this.state.firstPane}\n      ,\n      clickIconGroup: true,\n      splitChangeWidthPercentage: this.state.splitChangeWidthPercentage,\n      masterList: this.props.Login.masterData.searchedSample || sampleList,\n      selectedMaster: this.props.Login.masterData.selectedSample,\n      primaryKeyField: \"npreregno\",\n      filterColumnData: this.props.filterTransactionList // getMasterDetail={(event, status) => { this.props.getRegistrationsubSampleDetail(event, status); this.changePropertyView(4, event, status) }}\n      ,\n      getMasterDetail: this.props.getRegistrationsubSampleDetail,\n      inputParam: { ...this.state.subSampleGetParam,\n        searchTestRef: this.searchTestRef,\n        searchSubSampleRef: this.searchSubSampleRef,\n        testskip: this.state.testskip,\n        subsampleskip: this.state.subsampleskip,\n        resultDataState: this.state.resultDataState,\n        activeTabIndex: this.state.enableAutoClick && this.state.activeTabIndex == undefined ? 4 : this.state.enableAutoClick && this.state.activeTabIndex == 0 ? 4 : this.state.enableAutoClick ? this.state.activeTabIndex : 0\n      },\n      selectionList: this.props.Login.masterData.RealFilterStatusValue && this.props.Login.masterData.RealFilterStatusValue.ntransactionstatus === transactionStatus.ALL ? this.props.Login.masterData.FilterStatus : [],\n      selectionColorField: \"scolorhexcode\",\n      mainField: \"sarno\",\n      showStatusLink: true,\n      showStatusName: true,\n      statusFieldName: \"stransdisplaystatus\",\n      statusField: \"ntransactionstatus\",\n      selectedListName: \"selectedSample\",\n      searchListName: \"searchedSample\",\n      searchRef: this.searchSampleRef,\n      objectName: \"sample\",\n      listName: \"IDS_SAMPLE\",\n      selectionField: \"ntransactionstatus\",\n      selectionFieldName: \"stransdisplaystatus\",\n      showFilter: this.props.Login.showFilter,\n      openFilter: this.openFilter,\n      closeFilter: this.closeFilter,\n      onFilterSubmit: this.onFilterSubmit,\n      subFields: this.state.DynamicSampleColumns // jsonField={'jsondata'}\n      //jsonDesignFields={true}\n      ,\n      needMultiSelect: true,\n      showStatusBlink: true,\n      callCloseFunction: true,\n      filterParam: { ...this.state.filterSampleParam,\n        childRefs: [{\n          ref: this.searchSubSampleRef,\n          childFilteredListName: \"searchedSubSample\"\n        }, {\n          ref: this.searchTestRef,\n          childFilteredListName: \"searchedTest\"\n        }]\n      },\n      subFieldsLabel: false,\n      handlePageChange: this.handlePageChange,\n      skip: this.state.skip,\n      take: this.state.take // splitModeClass={this.state.splitChangeWidthPercentage\n      //     && this.state.splitChangeWidthPercentage > 50 ? 'split-mode'\n      //     : this.state.splitChangeWidthPercentage > 40 ? 'split-md' : ''}\n      ,\n      childTabsKey: [\"RegistrationAttachment\", \"RegistrationGetSubSample\", \"RegistrationGetTest\", \"RegistrationSampleComment\", \"RegistrationSampleAttachment\", \"selectedSubSample\", \"selectedTest\", \"RegistrationComment\", \"ExternalOrderAttachmentList\", \"OutsourceDetailsList\", \"RegistrationParameter\", \"RegistrationTestAttachment\", \"RegistrationTestComment\"] //, \"RegistrationParameter\"\"RegistrationTestComment\"\n      ,\n      actionIcons: this.props.Login.masterData && this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nneedsubsample === false ? [{\n        title: this.props.intl.formatMessage({\n          id: \"IDS_SENDTOSTORE\"\n        }),\n        controlname: \"faArrowRight\",\n        objectName: \"mastersendtostore\",\n        hidden: this.state.userRoleControlRights.indexOf(sendToStore) === -1,\n        onClick: this.sendToStore,\n        inputData: {\n          masterData: this.props.Login.masterData,\n          userInfo: this.props.Login.userInfo,\n          ncontrolCode: sendToStore,\n          mainSampleRegParam: { ...this.state.editRegParam\n          }\n        }\n      }, {\n        title: this.props.intl.formatMessage({\n          id: \"IDS_EDIT\"\n        }),\n        controlname: \"faPencilAlt\",\n        objectName: \"mastertoedit\",\n        hidden: this.state.userRoleControlRights.indexOf(this.state.editSampleId) === -1,\n        onClick: this.editRegistration,\n        inputData: {\n          primaryKeyName: \"npreregno\",\n          operation: \"update\",\n          masterData: this.props.Login.masterData,\n          userInfo: this.props.Login.userInfo,\n          editRegParam: { ...this.state.editRegParam,\n            ncontrolCode: this.state.editSampleId,\n            nneedsubsample: this.props.Login.masterData && this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample //=== true ? transactionStatus.YES:transactionStatus.NO\n\n          }\n        }\n      }, {\n        //ALPD-3615\n        title: this.props.intl.formatMessage({\n          id: \"IDS_ADHOCTEST\"\n        }),\n        controlname: \"faPrint\",\n        objectName: \"sampleadhoctest\",\n        hidden: this.state.userRoleControlRights.indexOf(this.state.adhocTestId) === -1,\n        //onClick: this.props.getPrinterComboService,\n        onClick: this.addAdhocTest,\n        inputData: { ...this.state.addTestParam,\n          primaryKeyName: \"npreregno\",\n          ncontrolcode: this.state.adhocTestId,\n          masterData: this.props.Login.masterData,\n          userInfo: this.props.Login.userInfo,\n          editRegParam: { ...this.state.editRegParam,\n            ncontrolCode: this.state.adhocTestId,\n            nneedsubsample: this.props.Login.masterData && this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample //=== true ? transactionStatus.YES:transactionStatus.NO\n\n          }\n        }\n      }, {\n        title: this.props.intl.formatMessage({\n          id: \"IDS_PRINTBARCODE\"\n        }),\n        controlname: \"faPrint\",\n        objectName: \"sample\",\n        hidden: this.state.userRoleControlRights.indexOf(this.state.printBarcodeId) === -1,\n        //onClick: this.props.getPrinterComboService,\n        onClick: this.printBarcode,\n        inputData: {\n          primaryKeyName: \"npreregno\",\n          operation: \"print\",\n          ncontrolcode: this.state.printBarcodeId,\n          masterData: this.props.Login.masterData,\n          userInfo: this.props.Login.userInfo,\n          editRegParam: { ...this.state.editRegParam,\n            ncontrolCode: this.state.printBarcodeId\n          }\n        }\n      }] : [{\n        title: this.props.intl.formatMessage({\n          id: \"IDS_EDIT\"\n        }),\n        controlname: \"faPencilAlt\",\n        objectName: \"mastertoedit\",\n        hidden: this.state.userRoleControlRights.indexOf(this.state.editSampleId) === -1,\n        onClick: this.editRegistration,\n        inputData: {\n          primaryKeyName: \"npreregno\",\n          operation: \"update\",\n          masterData: this.props.Login.masterData,\n          userInfo: this.props.Login.userInfo,\n          editRegParam: { ...this.state.editRegParam,\n            ncontrolCode: this.state.editSampleId\n          }\n        }\n      }, //     {    title: this.props.intl.formatMessage({ id: \"IDS_OUTSOURCE\" }), \n      //     controlname: \"faOutsource\", \n      //     hidden: this.props.Login.masterData.RealSampleTypeValue && this.props.Login.masterData.RealSampleTypeValue.noutsourcerequired === transactionStatus.YES? false :true,\n      //    // hidden:this.props.Login.masterData.RealSampleTypeValue && this.props.Login.masterData.RealSampleTypeValue.nsampletypecode === SampleType.CLINICALTYPE? false :true,\n      //    // hidden: this.state.userRoleControlRights.indexOf(openELNSheet) === -1, \n      //     onClick: this.outsourceSample, objectName: \"test\",\n      //     inputData: { masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo} \n      // },\n      {\n        title: this.props.intl.formatMessage({\n          id: \"IDS_PRINTBARCODE\"\n        }),\n        controlname: \"faPrint\",\n        objectName: \"sample\",\n        hidden: this.state.userRoleControlRights.indexOf(this.state.printBarcodeId) === -1,\n        //onClick: this.props.getPrinterComboService,\n        onClick: this.printBarcode,\n        inputData: {\n          primaryKeyName: \"npreregno\",\n          operation: \"print\",\n          ncontrolcode: this.state.printBarcodeId,\n          masterData: this.props.Login.masterData,\n          userInfo: this.props.Login.userInfo,\n          editRegParam: { ...this.state.editRegParam,\n            ncontrolCode: this.state.printBarcodeId\n          }\n        }\n      }],\n      needFilter: true,\n      commonActions: /*#__PURE__*/React.createElement(ProductList, {\n        className: \"d-flex product-category float-right icon-group-wrap\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1954,\n          columnNumber: 53\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        className: \"btn btn-icon-rounded btn-circle solid-blue ml-2\",\n        role: \"button\",\n        \"data-tip\": this.props.intl.formatMessage({\n          id: \"IDS_PREREGISTER\"\n        }) //  data-for=\"tooltip-common-wrap\"\n        ,\n        hidden: this.state.userRoleControlRights.indexOf(this.state.preRegisterId) === -1,\n        onClick: () => this.getRegistrationComboService(\"Registration\", \"create\", \"npreregno\", this.props.Login.masterData, this.props.Login.userInfo, this.state.preRegisterId, false, true, true),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1957,\n          columnNumber: 57\n        }\n      }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n        icon: faPlus,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1963,\n          columnNumber: 61\n        }\n      })), /*#__PURE__*/React.createElement(Nav.Link, {\n        className: \"btn btn-circle outline-grey ml-2\",\n        \"data-tip\": this.props.intl.formatMessage({\n          id: \"IDS_REGISTER\"\n        }) // data-for=\"tooltip-common-wrap\"\n        ,\n        hidden: this.state.userRoleControlRights.indexOf(this.state.registerId) === -1,\n        onClick: () => this.acceptRegistration(this.state.registerId, this.state.skip, this.state.take),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1965,\n          columnNumber: 57\n        }\n      }, /*#__PURE__*/React.createElement(Register, {\n        className: \"custom_icons\",\n        width: \"15\",\n        height: \"15\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1971,\n          columnNumber: 61\n        }\n      })), /*#__PURE__*/React.createElement(Nav.Link, {\n        className: \"btn btn-circle outline-grey ml-2\",\n        \"data-tip\": this.props.intl.formatMessage({\n          id: \"IDS_QUARANTINE\"\n        }) //  data-for=\"tooltip-common-wrap\"\n        ,\n        hidden: this.state.userRoleControlRights.indexOf(this.state.quarantineId) === -1,\n        onClick: () => this.selectQuarantine(this.state.quarantineId, this.state.skip, this.state.take),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1973,\n          columnNumber: 57\n        }\n      }, /*#__PURE__*/React.createElement(Quarantine, {\n        className: \"custom_icons\",\n        width: \"15\",\n        height: \"15\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1979,\n          columnNumber: 61\n        }\n      })), /*#__PURE__*/React.createElement(Nav.Link, {\n        className: \"btn btn-circle outline-grey ml-2\",\n        \"data-tip\": this.props.intl.formatMessage({\n          id: \"IDS_CANCELREJECTSAMPLE\"\n        }) // data-for=\"tooltip-common-wrap\"\n        ,\n        hidden: this.state.userRoleControlRights.indexOf(this.state.cancelSampleId) === -1,\n        onClick: () => this.cancelSampleRecords(this.state.cancelSampleId, this.state.skip, this.state.take),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1981,\n          columnNumber: 57\n        }\n      }, /*#__PURE__*/React.createElement(Reject, {\n        className: \"custom_icons\",\n        width: \"20\",\n        height: \"20\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1987,\n          columnNumber: 61\n        }\n      })), this.props.Login.masterData && this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nneedsubsample === false ? /*#__PURE__*/React.createElement(Button, {\n        className: \"btn btn-circle outline-grey ml-2\",\n        variant: \"link\",\n        \"data-tip\": this.props.intl.formatMessage({\n          id: \"IDS_PRINTBARCODE\"\n        }) //  data-for=\"tooltip-common-wrap\"\n        ,\n        hidden: this.state.userRoleControlRights.indexOf(this.state.sampleBarcodeId) === -1,\n        onClick: () => this.props.getBarcodeAndPrinterService({\n          masterData: this.props.Login.masterData,\n          ncontrolcode: this.state.sampleBarcodeId,\n          userInfo: this.props.Login.userInfo,\n          control: \"sampleBarcode\"\n        }),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1990,\n          columnNumber: 57\n        }\n      }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n        icon: faPrint,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2008,\n          columnNumber: 61\n        }\n      })) : \"\", this.props.Login.masterData.RealSampleTypeValue && this.props.Login.masterData.RealSampleTypeValue.nportalrequired === transactionStatus.YES && /*#__PURE__*/React.createElement(Nav.Link, {\n        className: \"btn btn-circle outline-grey ml-2\",\n        \"data-tip\": this.props.intl.formatMessage({\n          id: \"IDS_CANCELEXTERNALSAMPLEORDER\"\n        }) // data-for=\"tooltip-common-wrap\"\n        ,\n        hidden: this.state.userRoleControlRights.indexOf(this.state.CancelExternalOrderSampleId) === -1 // onClick={() => this.orderRecords(this.state.CancelExternalOrderSampleId, this.state.skip, this.state.take)}\n        ,\n        onClick: () => this.orderRecords(this.state.CancelExternalOrderSampleId, this.props.Login.userInfo),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2013,\n          columnNumber: 61\n        }\n      }, /*#__PURE__*/React.createElement(Order, {\n        className: \"custom_icons\",\n        width: \"20\",\n        height: \"20\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2021,\n          columnNumber: 65\n        }\n      })), /*#__PURE__*/React.createElement(Nav.Link, {\n        className: \"btn btn-circle outline-grey\",\n        variant: \"link\",\n        \"data-tip\": this.props.intl.formatMessage({\n          id: \"IDS_SAMPLEIMPORT\"\n        }) // data-for=\"tooltip-grid-wrap\"\n        ,\n        hidden: this.state.userRoleControlRights.indexOf(this.state.SampleImportId) === -1,\n        onClick: () => this.getRegistrationComboService(\"Registration\", \"create\", \"npreregno\", this.props.Login.masterData, this.props.Login.userInfo, this.state.preRegisterId, true, false),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2023,\n          columnNumber: 57\n        }\n      }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n        icon: faFileImport,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2029,\n          columnNumber: 61\n        }\n      })), /*#__PURE__*/React.createElement(Button, {\n        className: \"btn btn-circle outline-grey ml-2\",\n        variant: \"link\",\n        \"data-tip\": this.props.intl.formatMessage({\n          id: \"IDS_REFRESH\"\n        }) //   data-for=\"tooltip-common-wrap\"\n        ,\n        onClick: () => this.onReload(),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2031,\n          columnNumber: 57\n        }\n      }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n        icon: faSync,\n        style: {\n          \"width\": \"0.6!important\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2035,\n          columnNumber: 61\n        }\n      }))),\n      filterComponent: [{\n        \"Sample Filter\": /*#__PURE__*/React.createElement(RegistrationFilter, {\n          SampleType: this.state.stateSampleType || [],\n          RegistrationType: this.state.stateRegistrationType || [],\n          RegistrationSubType: this.state.stateRegistrationSubType || [],\n          userInfo: this.props.Login.userInfo || {},\n          SampleTypeValue: this.props.Login.masterData.SampleTypeValue || {},\n          RegTypeValue: this.props.Login.masterData.RegTypeValue || {},\n          RegSubTypeValue: this.props.Login.masterData.RegSubTypeValue || {},\n          FilterStatusValue: this.props.Login.masterData.FilterStatusValue || {},\n          ApprovalConfigVersionValue: this.props.Login.masterData.ApprovalConfigVersionValue || {},\n          ApprovalConfigVersion: this.state.stateApprovalConfigVersion || {},\n          DesignTemplateMapping: this.props.Login.masterData.DesignTemplateMapping,\n          DesignTemplateMappingValue: this.props.Login.masterData.DesignTemplateMappingValue || {},\n          FilterStatus: this.state.stateFilterStatus || [],\n          FromDate: this.fromDate ? rearrangeDateFormat(this.props.Login.userInfo, this.fromDate) : new Date(),\n          ToDate: this.toDate ? rearrangeDateFormat(this.props.Login.userInfo, this.toDate) : new Date(),\n          onSampleTypeChange: this.onSampleTypeChange,\n          onRegTypeChange: this.onRegTypeChange,\n          onRegSubTypeChange: this.onRegSubTypeChange,\n          onDesignTemplateChange: this.onDesignTemplateChange,\n          onApprovalConfigVersionChange: this.onApprovalConfigVersionChange,\n          DynamicDesignMapping: this.state.stateDynamicDesign || [],\n          handleFilterDateChange: this.handleFilterDateChange,\n          onFilterChange: this.onFilterChange,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 2041,\n            columnNumber: 74\n          }\n        })\n      }],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1763,\n        columnNumber: 45\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2072,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      style: this.state.showTest === true || this.state.showSubSample === true ? {\n        display: \"block\"\n      } : {\n        display: \"none\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2073,\n        columnNumber: 45\n      }\n    }, mainDesign)))), /*#__PURE__*/React.createElement(\"div\", {\n      className: `${this.state.enablePropertyPopup ? 'active-popup' : \"\"} vertical-tab ${this.state.activeTabIndex ? 'active' : \"\"}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2137,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: `${this.state.enablePropertyPopup ? 'active-popup' : \"\"} vertical-tab-content pager_wrap wrap-class ${this.state.activeTabIndex ? 'active' : \"\"}`,\n      style: {\n        width: this.state.enablePropertyPopup ? this.state.propertyPopupWidth + '%' : \"\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2138,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      className: ` vertical-tab-close ${this.state.activeTabIndex ? 'active' : \"\"}`,\n      onClick: () => this.changePropertyViewClose(false),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2139,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faChevronRight,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2139,\n        columnNumber: 178\n      }\n    }), \" \"), /*#__PURE__*/React.createElement(\"div\", {\n      className: ` vertical-tab-content-common position-relative ${this.state.activeTabIndex && this.state.activeTabIndex == 4 ? 'active' : \"\"}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2140,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(Nav.Link, {\n      className: \"tab-expand-collapse-btn p-0\",\n      onClick: () => this.setState({\n        enablePropertyPopup: !this.state.enablePropertyPopup\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2141,\n        columnNumber: 45\n      }\n    }, !this.state.enablePropertyPopup ? /*#__PURE__*/React.createElement(\"img\", {\n      src: fullviewExpand,\n      alt: \"Fullview\",\n      width: \"20\",\n      height: \"20\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2143,\n        columnNumber: 53\n      }\n    }) : /*#__PURE__*/React.createElement(\"img\", {\n      src: fullviewCollapse,\n      alt: \"Collapse\",\n      width: \"24\",\n      height: \"24\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2144,\n        columnNumber: 53\n      }\n    })), /*#__PURE__*/React.createElement(\"h4\", {\n      className: \"inner_h4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2147,\n        columnNumber: 45\n      }\n    }, this.props.intl.formatMessage({\n      id: \"IDS_SAMPLEDETAILS\"\n    })), this.state.activeTabIndex && this.state.activeTabIndex === 4 ? this.sideNavDetail(\"IDS_SAMPLEDETAILS\", 0) : \"\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: ` vertical-tab-content-grid sm-view-v-t position-relative ${this.state.activeTabIndex && this.state.activeTabIndex == 1 ? 'active' : \"\"}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2153,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(Nav.Link, {\n      className: \"tab-expand-collapse-btn p-0\",\n      onClick: () => this.setState({\n        enablePropertyPopup: !this.state.enablePropertyPopup\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2154,\n        columnNumber: 49\n      }\n    }, !this.state.enablePropertyPopup ? /*#__PURE__*/React.createElement(\"img\", {\n      src: fullviewExpand,\n      alt: \"Fullview\",\n      width: \"20\",\n      height: \"20\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2156,\n        columnNumber: 57\n      }\n    }) : /*#__PURE__*/React.createElement(\"img\", {\n      src: fullviewCollapse,\n      alt: \"Collapse\",\n      width: \"24\",\n      height: \"24\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2157,\n        columnNumber: 57\n      }\n    })), /*#__PURE__*/React.createElement(\"h4\", {\n      className: \"inner_h4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2160,\n        columnNumber: 49\n      }\n    }, this.props.intl.formatMessage({\n      id: \"IDS_RESULT\"\n    })), this.state.activeTabIndex && this.state.activeTabIndex === 1 ? this.sideNavDetail(\"IDS_PARAMETERRESULTS\") : \"\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: ` vertical-tab-content-attachment position-relative ${this.state.activeTabIndex && this.state.activeTabIndex == 2 ? 'active' : \"\"}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2166,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(Nav.Link, {\n      className: \"tab-expand-collapse-btn p-0\",\n      onClick: () => this.setState({\n        enablePropertyPopup: !this.state.enablePropertyPopup\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2167,\n        columnNumber: 45\n      }\n    }, !this.state.enablePropertyPopup ? /*#__PURE__*/React.createElement(\"img\", {\n      src: fullviewExpand,\n      alt: \"Fullview\",\n      width: \"20\",\n      height: \"20\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2169,\n        columnNumber: 53\n      }\n    }) : /*#__PURE__*/React.createElement(\"img\", {\n      src: fullviewCollapse,\n      alt: \"Collapse\",\n      width: \"24\",\n      height: \"24\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2170,\n        columnNumber: 53\n      }\n    })), this.state.activeTabIndex && this.state.activeTabIndex === 2 ? this.sideNavDetail(\"IDS_ATTACHMENTS\") : \"\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: ` vertical-tab-content-grid-tab position-relative ${this.state.activeTabIndex && this.state.activeTabIndex == 3 ? 'active' : \"\"}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2175,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(Nav.Link, {\n      className: \"tab-expand-collapse-btn p-0\",\n      onClick: () => this.setState({\n        enablePropertyPopup: !this.state.enablePropertyPopup\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2176,\n        columnNumber: 45\n      }\n    }, !this.state.enablePropertyPopup ? /*#__PURE__*/React.createElement(\"img\", {\n      src: fullviewExpand,\n      alt: \"Fullview\",\n      width: \"20\",\n      height: \"20\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2178,\n        columnNumber: 53\n      }\n    }) : /*#__PURE__*/React.createElement(\"img\", {\n      src: fullviewCollapse,\n      alt: \"Collapse\",\n      width: \"24\",\n      height: \"24\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2179,\n        columnNumber: 53\n      }\n    })), this.state.activeTabIndex && this.state.activeTabIndex === 3 ? this.sideNavDetail(\"IDS_COMMENTS\") : \"\"), this.props.Login.masterData.RealSampleTypeValue && this.props.Login.masterData.RealSampleTypeValue.noutsourcerequired === transactionStatus.YES && /*#__PURE__*/React.createElement(\"div\", {\n      className: ` vertical-tab-content-common position-relative ${this.state.activeTabIndex && this.state.activeTabIndex == 9 ? 'active' : \"\"}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2185,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(Nav.Link, {\n      className: \"tab-expand-collapse-btn p-0\",\n      onClick: () => this.setState({\n        enablePropertyPopup: !this.state.enablePropertyPopup\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2186,\n        columnNumber: 49\n      }\n    }, !this.state.enablePropertyPopup ? /*#__PURE__*/React.createElement(\"img\", {\n      src: fullviewExpand,\n      alt: \"Fullview\",\n      width: \"20\",\n      height: \"20\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2188,\n        columnNumber: 57\n      }\n    }) : /*#__PURE__*/React.createElement(\"img\", {\n      src: fullviewCollapse,\n      alt: \"Collapse\",\n      width: \"24\",\n      height: \"24\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2189,\n        columnNumber: 57\n      }\n    })), this.state.activeTabIndex && this.state.activeTabIndex === 9 ? this.sideNavDetail(\"IDS_OUTSOURCEDETAILS\") : \"\")), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"tab-head\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2199,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(\"ul\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2200,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(\"li\", {\n      className: `${this.state.activeTabIndex && this.state.activeTabIndex === 4 ? 'active' : \"\"}`,\n      onClick: () => this.changePropertyView(4),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2201,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faEye,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2202,\n        columnNumber: 49\n      }\n    }), /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2203,\n        columnNumber: 49\n      }\n    }, this.props.intl.formatMessage({\n      id: \"IDS_SAMPLEDETAILS\"\n    }))), /*#__PURE__*/React.createElement(\"li\", {\n      className: `${this.state.activeTabIndex && this.state.activeTabIndex === 2 ? 'active' : \"\"}`,\n      onClick: () => this.changePropertyView(2),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2207,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faLink,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2208,\n        columnNumber: 49\n      }\n    }), /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2209,\n        columnNumber: 49\n      }\n    }, this.props.intl.formatMessage({\n      id: \"IDS_ATTACHMENTS\"\n    }))), /*#__PURE__*/React.createElement(\"li\", {\n      className: `${this.state.activeTabIndex && this.state.activeTabIndex === 3 ? 'active' : \"\"}`,\n      onClick: () => this.changePropertyView(3),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2213,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faComments,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2214,\n        columnNumber: 49\n      }\n    }), /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2215,\n        columnNumber: 49\n      }\n    }, this.props.intl.formatMessage({\n      id: \"IDS_COMMENTS\"\n    }))), /*#__PURE__*/React.createElement(\"li\", {\n      className: `${this.state.activeTabIndex && this.state.activeTabIndex === 1 ? 'active' : \"\"}`,\n      onClick: () => this.changePropertyView(1),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2220,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faFileInvoice //   data-for=\"tooltip-common-wrap\"\n      ,\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_RESULT\"\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2221,\n        columnNumber: 53\n      }\n    }), /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2224,\n        columnNumber: 53\n      }\n    }, this.props.intl.formatMessage({\n      id: \"IDS_RESULT\"\n    }))), this.props.Login.masterData.RealSampleTypeValue && this.props.Login.masterData.RealSampleTypeValue.noutsourcerequired === transactionStatus.YES && /*#__PURE__*/React.createElement(\"li\", {\n      className: `${this.state.activeTabIndex && this.state.activeTabIndex === 9 ? 'active' : \"\"}`,\n      onClick: () => this.changePropertyView(9),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2230,\n        columnNumber: 49\n      }\n    }, getActionIcon(\"faOutsource\"), /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2234,\n        columnNumber: 53\n      }\n    }, this.props.intl.formatMessage({\n      id: \"IDS_OUTSOURCE\"\n    })))), /*#__PURE__*/React.createElement(\"span\", {\n      className: \"tab-click-toggle-btn\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2240,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(CustomSwitch, {\n      label: this.props.intl.formatMessage({\n        id: \"IDS_AUTOSHOW\"\n      }),\n      type: \"switch\",\n      name: \"Auto Click\",\n      onChange: event => this.onInputSwitchOnChange(event),\n      defaultValue: this.state.enableAutoClick,\n      isMandatory: false,\n      required: true,\n      checked: this.state.enableAutoClick,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2241,\n        columnNumber: 45\n      }\n    })))))))), this.props.Login.openPortal ? /*#__PURE__*/React.createElement(PortalModal, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2272,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(PreRegisterSlideOutModal, {\n      postParamList: this.postParamList,\n      PrevoiusLoginData: this.PrevoiusLoginData,\n      closeModal: this.closeModal,\n      operation: \"create\",\n      screenName: \"IDS_REGISTRATION\",\n      onSaveClick: this.onSaveClick,\n      validateEsign: this.validateEsign,\n      updateStore: this.props.updateStore,\n      comboComponents: this.state.comboComponents,\n      withoutCombocomponent: this.state.withoutCombocomponent,\n      userRoleControlRights: this.state.userRoleControlRights,\n      fromDate: this.fromDate,\n      toDate: this.toDate,\n      samplecombinationunique: this.state.sampleCombinationUnique,\n      subsamplecombinationunique: this.state.subsampleCombinationUnique,\n      exportTemplateId: this.state.exportTemplateId,\n      importTemplateId: this.state.importTemplateId,\n      sampleexportfields: this.state.sampleexportfields,\n      subsampleexportfields: this.state.subsampleexportfields //  specBasedComponent={this.state.specBasedComponent}\n      ,\n      mandatoryFields: [{\n        \"idsName\": \"IDS_PRODUCTCATEGORY\",\n        \"dataField\": \"nproductcatcode\",\n        \"mandatoryLabel\": \"IDS_SELECT\",\n        \"controlType\": \"selectbox\"\n      }, {\n        \"idsName\": \"IDS_PRODUCTNAME\",\n        \"dataField\": \"sproductname\",\n        \"mandatoryLabel\": \"IDS_ENTER\",\n        \"controlType\": \"textbox\"\n      }],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2273,\n        columnNumber: 29\n      }\n    })) : \"\", (this.props.Login.openModal || this.state.showQRCode || this.state.showBarcode) && /*#__PURE__*/React.createElement(SlideOutModal, {\n      show: this.props.Login.openModal || this.state.showQRCode || this.state.showBarcode //|| this.props.Login.loadEsign}\n      ,\n      closeModal: this.state.showQRCode ? () => this.setState({\n        showQRCode: false,\n        openModal: false\n      }) : this.state.showBarcode ? () => this.setState({\n        showBarcode: false,\n        openModal: false\n      }) : this.props.Login.loadRegSubSample || this.props.Login.loadFile || this.props.Login.loadChildTest || this.props.Login.loadAdhocTest ? this.closeChildModal : this.closeModal,\n      hideSave: this.state.showBarcode ? true : false,\n      size: this.props.Login.parentPopUpSize,\n      loginoperation: this.props.Login.loadPrinter ? true : false,\n      buttonLabel: this.state.showQRCode || this.props.Login.loadPrinter ? \"print\" : undefined,\n      operation: this.props.Login.addMaster ? this.props.Login.masterOperation[this.props.Login.masterIndex] : this.state.showQRCode ? \"Preview\" : this.props.Login.loadComponent || this.props.Login.loadTest || this.props.Login.loadSource || this.props.Login.loadFile ? this.props.Login.childoperation : this.props.Login.operation,\n      inputParam: this.props.Login.inputParam,\n      screenName: this.state.showQRCode ? \"QR Code\" : this.state.showBarcode ? \"Barcode\" : this.props.Login.loadTest || this.props.Login.loadFile ? this.props.Login.ChildscreenName : this.props.Login.screenName,\n      esign: this.props.Login.loadEsign,\n      innerPopup: this.props.Login.loadComponent,\n      onSaveClick: this.props.Login.operation === 'barcode' ? () => this.props.barcodeGeneration(this.props.Login.barcodeSelectedRecord, this.props.Login.ncontrolcode, this.props.Login.userInfo, this.state.selectedRecord) : this.state.showQRCode ? () => this.setState({\n        showQRCode: false,\n        openModal: false\n      }) // : this.state.showBarcode ? \n      //     () => this.setState({ showBarcode: false, openModal: false })\n      : this.props.Login.addMaster ? this.onSaveMasterRecord : this.props.Login.loadRegSubSample ? this.onSaveSubSampleClick : this.props.Login.loadFile ? this.onSaveFileClick : this.props.Login.loadPrinter ? this.onSavePrinterClick : this.props.Login.loadChildTest ? this.onSaveChildTestClick : this.props.Login.loadAdhocTest ? this.onSaveAdhocTestClick //: this.props.Login.outsourcetest ? this.onSaveOutSourceTest\n      : this.props.Login.outsourcetest ? this.onSaveOutSourceSample : this.props.Login.screenName ? this.onSaveCancelOrder : this.onSaveClick,\n      validateEsign: this.validateEsign,\n      showSaveContinue: this.props.Login.showSaveContinue,\n      selectedRecord: !this.props.Login.loadEsign ? this.props.Login.addMaster ? this.state.selectedMaster[this.props.Login.masterIndex] : this.props.Login.loadComponent ? this.state.selectComponent : this.props.Login.loadPrinter ? this.state.selectedPrinterData : this.props.Login.loadTest ? this.state.selectedTestData : this.props.Login.loadFile ? this.state.selectedFile : this.props.Login.loadPoolSource ? this.state.selectedSourceData : this.state.selectedRecord : this.state.selectedRecord,\n      mandatoryFields: this.props.Login.screenName == \"External Sample\" ? this.onSaveCancelOrderMandatoryFields : this.props.Login.addMaster ? this.props.Login.masterextractedColumnList[this.props.Login.masterIndex].filter(x => x.mandatory === true) : this.mandatoryList(this.props.Login.loadPreregister, this.props.Login.loadPrinter, this.props.Login.loadFile, this.props.Login.loadChildTest, this.props.Login.loadRegSubSample, this.props.Login.operation, this.props.Login.outsourcetest, this.props.Login.loadAdhocTest),\n      addComponent: this.props.Login.loadEsign ? /*#__PURE__*/React.createElement(Esign, {\n        operation: this.props.Login.operation,\n        onInputOnChange: this.onInputOnChange,\n        inputParam: this.props.Login.inputParam,\n        selectedRecord: this.state.selectedRecord || {},\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2355,\n          columnNumber: 29\n        }\n      }) : this.props.Login.operation === \"barcode\" ? /*#__PURE__*/React.createElement(AddBarcode, {\n        selectedRecord: this.state.selectedRecord || {},\n        onInputOnChange: this.onInputOnChange,\n        onNumericInputChange: this.onNumericInputChange,\n        onComboChange: this.onComboChange,\n        BarcodeList: this.props.Login.BarcodeList,\n        Printer: this.props.Login.Printer,\n        nbarcodeprint: this.props.Login.nbarcodeprint // selectedPrinterData={this.state.selectedPrinterData}\n        ,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2361,\n          columnNumber: 33\n        }\n      }) : this.state.showQRCode ? /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2373,\n          columnNumber: 37\n        }\n      }, /*#__PURE__*/React.createElement(Col, {\n        md: 6,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2374,\n          columnNumber: 41\n        }\n      }, /*#__PURE__*/React.createElement(QRCode, {\n        value: this.state.selectedRecord.barcodevalue,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2375,\n          columnNumber: 45\n        }\n      })), /*#__PURE__*/React.createElement(Col, {\n        md: 6,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2378,\n          columnNumber: 41\n        }\n      }, /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2379,\n          columnNumber: 45\n        }\n      }, /*#__PURE__*/React.createElement(Col, {\n        md: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2380,\n          columnNumber: 49\n        }\n      }, /*#__PURE__*/React.createElement(FormLabel, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2381,\n          columnNumber: 53\n        }\n      }, this.props.intl.formatMessage({\n        id: \"IDS_ARNO\"\n      }), \":\"), /*#__PURE__*/React.createElement(ReadOnlyText, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2382,\n          columnNumber: 53\n        }\n      }, this.state.selectedRecord.barcodeData.sarno || '-')), /*#__PURE__*/React.createElement(Col, {\n        md: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2384,\n          columnNumber: 49\n        }\n      }, /*#__PURE__*/React.createElement(FormLabel, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2385,\n          columnNumber: 53\n        }\n      }, this.props.intl.formatMessage({\n        id: \"IDS_SAMPLETYPE\"\n      }), \":\"), /*#__PURE__*/React.createElement(ReadOnlyText, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2386,\n          columnNumber: 53\n        }\n      }, this.state.selectedRecord.barcodeData.Product || '-'))))) : this.state.showBarcode ? /*#__PURE__*/React.createElement(BarcodeGeneratorComponent, {\n        barcodeData: this.state.selectedRecord.generateBarcodeValue,\n        additionalDesignsToPrint: this.state.selectedRecord.additionDesignToPrint,\n        background: \"#ffffff\",\n        textAlign: \"center\",\n        fontSize: 38,\n        fontOption: \"bold\",\n        textPosition: \"bottom\",\n        lineColor: \"#000000\",\n        width: 3,\n        height: 100,\n        format: \"CODE128\",\n        margin: 10,\n        marginTop: 50,\n        marginBottom: undefined,\n        marginLeft: 20,\n        marginRight: undefined,\n        flat: true,\n        printBarcode: true,\n        displayValue: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2400,\n          columnNumber: 41\n        }\n      }) : this.props.Login.addMaster ? /*#__PURE__*/React.createElement(AddMasterRecords, {\n        selectedControl: this.props.Login.selectedControl[this.props.Login.masterIndex],\n        fieldList: this.props.Login.masterfieldList && this.props.Login.masterfieldList[this.props.Login.masterIndex],\n        extractedColumnList: this.props.Login.masterextractedColumnList[this.props.Login.masterIndex] // primaryKeyField={this.props.Login.masterprimaryKeyField}\n        ,\n        selectedRecord: this.state.selectedMaster[this.props.Login.masterIndex] || {},\n        onInputOnChange: this.onInputOnChangeMaster,\n        onComboChange: this.onComboChangeMaster,\n        handleDateChange: this.handleDateChangeMaster,\n        dataList: this.props.Login.masterdataList && this.props.Login.masterdataList[this.props.Login.masterIndex],\n        onNumericInputOnChange: this.onNumericInputOnChangeMaster,\n        masterDesign: this.props.Login.masterDesign && this.props.Login.masterDesign[this.props.Login.masterIndex],\n        mastertimeZoneList: this.props.Login.mastertimeZoneList,\n        masterdefaultTimeZone: this.props.Login.masterdefaultTimeZone,\n        onComboChangeMasterDyanmic: this.onComboChangeMasterDyanmic,\n        handleDateChangeMasterDynamic: this.handleDateChangeMasterDynamic,\n        onInputOnChangeMasterDynamic: this.onInputOnChangeMasterDynamic,\n        onNumericInputChangeMasterDynamic: this.onNumericInputChangeMasterDynamic,\n        onNumericBlurMasterDynamic: this.onNumericBlurMasterDynamic,\n        userInfo: this.props.Login.userInfo,\n        Login: this.props.Login,\n        addMasterRecord: this.addMasterRecord,\n        editMasterRecord: this.editMasterRecord,\n        userRoleControlRights: this.props.Login.userRoleControlRights,\n        masterIndex: this.props.Login.masterIndex,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2422,\n          columnNumber: 41\n        }\n      }) : this.props.Login.loadRegSubSample ? /*#__PURE__*/React.createElement(AddSubSample, {\n        editfield: this.props.Login.masterData.DynamicDesign && JSON.parse(this.props.Login.masterData.DynamicDesign.jsondata.value),\n        Component: this.props.Login.lstComponent || [],\n        selectComponent: this.state.selectedRecord,\n        templateData: this.props.Login.masterData.SubSampleTemplate && this.props.Login.masterData.SubSampleTemplate.jsondata,\n        userInfo: this.props.Login.userInfo,\n        timeZoneList: this.props.Login.timeZoneList,\n        defaultTimeZone: this.props.Login.defaultTimeZone,\n        handleDateChange: this.handleDateSubSampleChange,\n        onInputOnChange: this.onInputOnSubSampleChange,\n        onNumericInputChange: this.onNumericInputSubSampleChange,\n        onNumericBlur: this.onNumericBlurSubSample,\n        comboData: this.props.Login.regSubSamplecomboData,\n        onComboChange: this.onComboSubSampleChange,\n        onComponentChange: this.onComponentChange,\n        TestCombined: this.props.Login.TestCombined || [],\n        TestChange: this.onComboChange,\n        selectedTestData: this.state.selectedRecord,\n        selectedTestPackageData: this.state.selectedTestPackageData,\n        childoperation: this.props.Login.operation,\n        specBasedComponent: this.props.Login.specBasedComponent,\n        userRoleControlRights: this.props.Login.userRoleControlRights,\n        selectPackage: this.state.selectedRecord,\n        TestPackage: this.props.Login.TestPackage || [],\n        onTestPackageChange: this.onTestPackageChange,\n        operation: this.props.Login.operation,\n        hideQualisForms: this.props.Login.hideQualisForms,\n        addMasterRecord: this.addMasterRecord,\n        editMasterRecord: this.editMasterRecord,\n        hasTest: true,\n        onDropFile: this.onDropFileSubSample,\n        deleteAttachment: this.deleteAttachmentSubSample,\n        onTestSectionChange: this.onTestSectionChange,\n        TestSection: this.props.Login.TestSection || [],\n        selectSection: this.state.selectedRecord,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2448,\n          columnNumber: 45\n        }\n      }) : this.props.Login.loadFile ? /*#__PURE__*/React.createElement(AddFile, {\n        selectedFile: this.state.selectedFile || {},\n        onInputOnChange: this.onInputOnChange,\n        onDrop: this.onDropComponentFile,\n        deleteAttachment: this.deleteAttachment,\n        actionType: this.state.actionType,\n        maxSize: 20,\n        maxFiles: 1,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2487,\n          columnNumber: 49\n        }\n      }) : this.props.Login.loadPrinter ? /*#__PURE__*/React.createElement(AddPrinter, {\n        printer: this.props.Login.printer,\n        barcode: this.props.Login.barcode,\n        selectedPrinterData: this.state.selectedPrinterData,\n        PrinterChange: this.PrinterChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2497,\n          columnNumber: 49\n        }\n      }) : this.props.Login.loadChildTest ? /*#__PURE__*/React.createElement(AddTest, {\n        TestCombined: this.props.Login.TestCombined,\n        selectedTestData: this.state.selectedRecord,\n        TestChange: this.onComboChange,\n        TestPackageChange: this.onComboTestPackageChange,\n        userRoleControlRights: this.props.Login.userRoleControlRights,\n        selectPackage: this.state.selectedRecord,\n        selectSection: this.state.selectedRecord,\n        TestPackage: this.props.Login.TestPackage || [],\n        TestSection: this.props.Login.TestSection || [],\n        onTestPackageChange: this.onTestPackageChange,\n        onTestSectionChange: this.onTestSectionChange,\n        hideQualisForms: this.props.Login.hideQualisForms,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2504,\n          columnNumber: 53\n        }\n      }) : this.props.Login.loadChildTest ? /*#__PURE__*/React.createElement(AddTest, {\n        TestCombined: this.props.Login.availableTest,\n        selectedTestData: this.state.selectedRecord,\n        TestChange: this.onComboChange,\n        TestPackageChange: this.onComboTestPackageChange,\n        userRoleControlRights: this.props.Login.userRoleControlRights,\n        selectPackage: this.state.selectedRecord,\n        TestPackage: this.props.Login.TestPackage || [],\n        onTestPackageChange: this.onTestPackageChange,\n        hideQualisForms: this.props.Login.hideQualisForms,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2520,\n          columnNumber: 57\n        }\n      }) : this.props.Login.loadAdhocTest ?\n      /*#__PURE__*/\n      //ALPD-3615\n      React.createElement(AddAdhocTest, {\n        availableAdhocTest: this.props.Login.availableAdhocTest,\n        selectedAdhocTestData: this.state.selectedRecord,\n        TestChange: this.onComboChange,\n        userRoleControlRights: this.props.Login.userRoleControlRights,\n        onInputOnChange: this.onInputOnChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2532,\n          columnNumber: 57\n        }\n      }) : this.props.Login.screenName == \"External Sample\" ? /*#__PURE__*/React.createElement(ExternalOrder, {\n        orders: this.state.selectedRecord.orders || [] //headerSelectionChange={this.headerSelectionChange}\n        ,\n        selectionChange: this.selectionChange //addSelectAll={this.state.addSelectAll}\n        ,\n        onInputOnChange: this.onInputOnChange,\n        selectedRecord: this.state.selectedRecord || {},\n        onOrderSearch: this.onOrderSearch,\n        userInfo: this.props.Login.userInfo,\n        externalOrderTypeList: this.props.Login.externalOrderTypeList,\n        selectedExternalOrderType: this.props.Login.selectedExternalOrderType,\n        onComboChange: this.onComboChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2541,\n          columnNumber: 61\n        }\n      }) : this.props.Login.outsourcetest ? /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2555,\n          columnNumber: 65\n        }\n      }, /*#__PURE__*/React.createElement(Col, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2556,\n          columnNumber: 69\n        }\n      }, /*#__PURE__*/React.createElement(FormSelectSearch, {\n        name: \"outsourcesite\",\n        formLabel: this.props.intl.formatMessage({\n          id: \"IDS_SITE\"\n        }),\n        placeholder: \"Please Select...\",\n        options: this.props.Login.outSourceSiteList || [] //optionId={props.extractedColumnList[1].optionId}\n        //optionValue={props.extractedColumnList[1].optionValue}\n        ,\n        value: this.props.Login.selectedRecord ? this.props.Login.selectedRecord[\"outsourcesite\"] : \"\",\n        isMandatory: true,\n        required: true,\n        isMulti: false,\n        isClearable: true,\n        isSearchable: true,\n        isDisabled: false,\n        closeMenuOnSelect: true,\n        alphabeticalSort: true,\n        onChange: event => this.onComboChange(event, \"outsourcesite\") //isInvalid={props.failedControls.indexOf(props.extractedColumnList[1].dataField) !==-1}\n        ,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2557,\n          columnNumber: 73\n        }\n      }), /*#__PURE__*/React.createElement(FormMultiSelect, {\n        name: \"outsourcetestlist\",\n        label: this.props.intl.formatMessage({\n          id: \"IDS_TESTNAME\"\n        }),\n        options: this.props.Login.outSourceTestList || [],\n        optionId: \"ntransactiontestcode\",\n        optionValue: \"stestsynonym\",\n        value: this.props.Login.selectedRecord && this.props.Login.selectedRecord[\"outSourceTestList\"] ? this.props.Login.selectedRecord[\"outSourceTestList\"] : [],\n        isMandatory: true,\n        isClearable: true,\n        disableSearch: false,\n        disabled: false,\n        closeMenuOnSelect: false,\n        alphabeticalSort: true,\n        onChange: event => this.onComboChange(event, \"outSourceTestList\"),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2578,\n          columnNumber: 73\n        }\n      }), /*#__PURE__*/React.createElement(DateTimePicker, {\n        name: \"doutsourcedate\",\n        label: this.props.intl.formatMessage({\n          id: \"IDS_OUTSOURCEDATE\"\n        }),\n        className: \"form-control\",\n        placeholderText: this.props.intl.formatMessage({\n          id: \"IDS_SELECTDATE\"\n        }),\n        selected: this.props.Login.selectedRecord[\"doutsourcedate\"] ? this.props.Login.selectedRecord[\"doutsourcedate\"] : new Date(),\n        dateFormat: this.props.Login.userInfo.ssitedate,\n        timeInputLabel: this.props.intl.formatMessage({\n          id: \"IDS_TIME\"\n        }),\n        showTimeInput: false,\n        isClearable: true,\n        isMandatory: true,\n        required: true //maxDate={props.currentTime}\n        //maxTime={this.props.Login.currentTime}\n        ,\n        onChange: date => this.handleDateChange(\"doutsourcedate\", date),\n        value: this.props.Login.selectedRecord ? this.props.Login.selectedRecord[\"doutsourcedate\"] : \"\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2595,\n          columnNumber: 73\n        }\n      }), /*#__PURE__*/React.createElement(FormInput, {\n        label: this.props.intl.formatMessage({\n          id: \"IDS_SAMPLEID\"\n        }),\n        name: \"ssampleid\",\n        type: \"text\",\n        onChange: event => this.onInputOnChange(event),\n        placeholder: this.props.intl.formatMessage({\n          id: \"IDS_SAMPLEID\"\n        }),\n        value: this.props.Login.selectedRecord ? this.props.Login.selectedRecord[\"ssampleid\"] : \"\",\n        isMandatory: true,\n        required: true,\n        maxLength: 100,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2617,\n          columnNumber: 73\n        }\n      }), /*#__PURE__*/React.createElement(FormTextarea, {\n        name: \"sremarks\",\n        label: this.props.intl.formatMessage({\n          id: \"IDS_REMARKS\"\n        }),\n        onChange: event => this.onInputOnChange(event),\n        placeholder: this.props.intl.formatMessage({\n          id: \"IDS_REMARKS\"\n        }),\n        value: this.props.Login.selectedRecord ? this.props.Login.selectedRecord[\"sremarks\"] : \"\",\n        rows: \"2\",\n        required: false,\n        maxLength: 255,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2629,\n          columnNumber: 73\n        }\n      }), /*#__PURE__*/React.createElement(FormTextarea, {\n        name: \"sshipmenttracking\",\n        label: this.props.intl.formatMessage({\n          id: \"IDS_SHIPMENTTRACKING\"\n        }),\n        onChange: event => this.onInputOnChange(event),\n        placeholder: this.props.intl.formatMessage({\n          id: \"IDS_SHIPMENTTRACKING\"\n        }),\n        value: this.props.Login.selectedRecord ? this.props.Login.selectedRecord[\"sshipmenttracking\"] : \"\",\n        rows: \"2\",\n        required: false,\n        maxLength: 255,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2641,\n          columnNumber: 73\n        }\n      }))) : \"\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2303,\n        columnNumber: 21\n      }\n    }), this.props.Login.openChildModal && /*#__PURE__*/React.createElement(SlideOutModal, {\n      show: this.props.Login.openChildModal,\n      closeModal: this.closeSendToStoreChildModal,\n      operation: this.props.Login.MappingFields ? \"\" : \"Store\",\n      inputParam: this.props.Login.inputParam,\n      screenName: this.props.Login.MappingFields ? this.props.intl.formatMessage({\n        id: \"IDS_ORDERMAPPING\"\n      }) : this.props.intl.formatMessage({\n        id: \"IDS_SAMPLE\"\n      }),\n      onSaveClick: this.props.Login.MappingFields ? this.onSaveModalClick : this.onSendToStoreSample,\n      esign: this.props.Login.loadEsign,\n      validateEsign: this.validateEsign,\n      masterStatus: this.props.Login.masterStatus,\n      updateStore: this.props.updateStore,\n      selectedRecord: this.state.selectedRecord || {},\n      mandatoryFields: this.props.Login.MappingFields && this.mandatoryMappingList(),\n      addComponent: this.props.Login.loadEsign ? /*#__PURE__*/React.createElement(Esign, {\n        operation: this.props.Login.operation,\n        formatMessage: this.props.intl.formatMessage,\n        onInputOnChange: this.onInputOnChange,\n        inputParam: this.props.Login.inputParam,\n        selectedRecord: this.state.selectedRecord || {},\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2674,\n          columnNumber: 29\n        }\n      }) : this.props.Login.MappingFields ? /*#__PURE__*/React.createElement(MappingFields, {\n        selectedRecord: this.state.selectedRecord,\n        selectedDetailField: this.state.selectedDetailField,\n        orderTypeList: this.props.Login.orderTypeList,\n        orderList: this.props.Login.orderList,\n        onComboChange: this.onComboChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2681,\n          columnNumber: 33\n        }\n      }) : /*#__PURE__*/React.createElement(MoveSampleOrContainers, {\n        treeData: this.state.treeData,\n        selectedRecord: this.state.selectedRecord || {},\n        itemRender: this.itemRender,\n        onExpandChange: this.onExpandChange,\n        onItemClick: this.onItemClick,\n        onComboChange: this.onComboChangeTree,\n        onNumericInputChange: this.onNumericInputChangeSample,\n        storageCategory: this.props.Login.masterData.storageCategory || [],\n        unitMaster: this.props.Login.masterData.unitMaster || [],\n        approvedLocation: this.props.Login.masterData.approvedLocation || [],\n        isSendToStore: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2689,\n          columnNumber: 33\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2661,\n        columnNumber: 21\n      }\n    }), this.state.showConfirmAlert ? this.confirmAlert() : \"\");\n  }\n\n  showSampleInfo() {\n    this.setState({\n      showSample: true,\n      showTest: false\n    });\n  }\n\n  showSample() {\n    let fixefScrollHeight = this.state.fixefScrollHeight;\n    let disableSplit = false;\n\n    if (this.myRef && this.myRef.current && this.myRef.current.clientHeight + 20 !== this.state.fixefScrollHeight) {\n      fixefScrollHeight = this.myRef.current.clientHeight + 20;\n      let disableSplit = true;\n    }\n\n    this.setState({\n      showSample: true,\n      showSubSample: false,\n      showTest: false,\n      fixefScrollHeight: fixefScrollHeight,\n      disableSplit: disableSplit\n    });\n  }\n\n  showTest() {\n    let fixefScrollHeight = this.state.fixefScrollHeight;\n    let disableSplit = false;\n\n    if (this.myRef && this.myRef.current && this.myRef.current.clientHeight + 20 !== this.state.fixefScrollHeight) {\n      fixefScrollHeight = this.myRef.current.clientHeight + 20;\n      let disableSplit = true;\n    }\n\n    this.setState({\n      showSample: false,\n      showSubSample: false,\n      showTest: true,\n      fixefScrollHeight: fixefScrollHeight,\n      disableSplit: disableSplit\n    }); // setTimeout(()=>{\n    //     this.setState({\n    //         disableSplit :false\n    //     })  \n    // },100)\n  }\n\n  showSubSample() {\n    this.setState({\n      showSample: false,\n      showTest: false,\n      showSubSample: !this.state.showSubSample\n    });\n  }\n\n  showTestDetails() {\n    const updateInfo = {\n      typeName: DEFAULT_RETURN,\n      data: {\n        showSample: !this.state.showSample,\n        showTest: !this.state.showTest\n      }\n    };\n    this.props.updateStore(updateInfo);\n  }\n\n  checkPreregisterAndQuarentine(sample) {\n    return sample.ntransactionstatus === transactionStatus.PREREGISTER || sample.ntransactionstatus === transactionStatus.QUARANTINE;\n  }\n\n  checkPreregisterRecordQuarantine(sample) {\n    return sample.ntransactionstatus === transactionStatus.PREREGISTER;\n  }\n\n  gridfillingColumn(data) {\n    //  const tempArray = [];\n    const temparray = data && data.map(option => {\n      return {\n        \"idsName\": option[designProperties.LABEL][this.props.Login.userInfo.slanguagetypecode] || \"-\",\n        \"dataField\": option[designProperties.VALUE],\n        \"width\": \"200px\",\n        \"columnSize\": \"3\",\n        \"dataType\": [option[designProperties.LISTITEM]]\n      };\n    });\n    return temparray;\n  }\n\n  componentWillUnmount() {\n    let activeTabIndex = this.props.Login.activeTabIndex;\n    const updateInfo = {\n      typeName: DEFAULT_RETURN,\n      data: {\n        activeTabIndex: undefined\n      }\n    };\n    this.props.updateStore(updateInfo);\n  }\n\n  componentDidUpdate(previousProps) {\n    if (this.props.Login.columnList !== previousProps.Login.columnList) {\n      this.setState({\n        columnList: this.props.Login.columnList,\n        childColumnList: this.props.Login.childColumnList,\n        withoutCombocomponent: this.props.Login.withoutCombocomponent,\n        comboComponents: this.props.Login.comboComponents\n      });\n    }\n\n    if (this.props.Login.regparentSubSampleColumnList !== previousProps.Login.regparentSubSampleColumnList) {\n      this.setState({\n        regparentSubSampleColumnList: this.props.Login.regparentSubSampleColumnList,\n        regchildSubSampleColumnList: this.props.Login.regchildSubSampleColumnList,\n        regSubSamplecomboComponents: this.props.Login.regSubSamplecomboComponents,\n        regSubSamplewithoutCombocomponent: this.props.Login.regSubSamplewithoutCombocomponent\n      });\n    }\n\n    if (this.props.Login.showSaveContinue !== previousProps.Login.showSaveContinue) {\n      this.setState({\n        showSaveContinue: this.props.Login.showSaveContinue\n      });\n    }\n\n    if (this.props.Login !== previousProps.Login) {\n      this.PrevoiusLoginData = previousProps;\n    }\n\n    if (this.props.Login.selectedDetailField !== previousProps.Login.selectedDetailField) {\n      this.setState({\n        selectedDetailField: this.props.Login.selectedDetailField\n      });\n    }\n\n    if (this.props.Login.selectedMaster !== previousProps.Login.selectedMaster) {\n      this.setState({\n        selectedMaster: this.props.Login.selectedMaster\n      });\n    }\n\n    if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\n      this.setState({\n        selectedRecord: this.props.Login.selectedRecord\n      });\n    } else if (this.props.Login.selectedPrinterData !== previousProps.Login.selectedPrinterData) {\n      this.setState({\n        selectedPrinterData: this.props.Login.selectedPrinterData\n      });\n    } else if (this.props.Login.loadFile !== previousProps.Login.loadFile && this.props.Login.loadFile === false) {\n      this.setState({\n        selectedFile: undefined\n      });\n    } else if (this.props.Login.selectedFilter !== previousProps.Login.selectedFilter) {\n      this.setState({\n        selectedFilter: this.props.Login.selectedFilter\n      });\n    }\n\n    if (this.props.Login.popUptestDataState && this.props.Login.popUptestDataState !== previousProps.Login.popUptestDataState) {\n      this.setState({\n        popUptestDataState: this.props.Login.popUptestDataState\n      });\n    }\n\n    if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\n      const userRoleControlRights = [];\n\n      if (this.props.Login.userRoleControlRights) {\n        this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item => userRoleControlRights.push(item.ncontrolcode));\n      }\n\n      const specBasedTestPackage = this.props.Login.userRoleControlRights && this.props.Login.userRoleControlRights[formCode.TESTPACKAGE] !== undefined ? true : false;\n      const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode);\n      const cancelId = controlMap.has(\"CancelTest\") ? controlMap.get(\"CancelTest\").ncontrolcode : -1;\n      const preRegisterId = controlMap.has(\"AddPreregister\") ? controlMap.get(\"AddPreregister\").ncontrolcode : -1;\n      const registerId = controlMap.has(\"RegisterAccept\") ? controlMap.get(\"RegisterAccept\").ncontrolcode : -1;\n      const editSampleId = controlMap.has(\"EditSample\") ? controlMap.get(\"EditSample\").ncontrolcode : -1;\n      const quarantineId = controlMap.has(\"RegisterQuarantine\") ? controlMap.get(\"RegisterQuarantine\").ncontrolcode : -1;\n      const addTestId = controlMap.has(\"AddNewTest\") ? controlMap.get(\"AddNewTest\").ncontrolcode : -1;\n      const printBarcodeId = controlMap.has(\"PrintBarcode\") ? controlMap.get(\"PrintBarcode\").ncontrolcode : -1;\n      const cancelSampleId = controlMap.has(\"CancelReject\") ? controlMap.get(\"CancelReject\").ncontrolcode : -1;\n      const addSubSampleId = controlMap.has(\"AddSubSample\") ? controlMap.get(\"AddSubSample\").ncontrolcode : -1;\n      const editSubSampleId = controlMap.has(\"EditSubSample\") ? controlMap.get(\"EditSubSample\").ncontrolcode : -1;\n      const cancelSubSampleId = controlMap.has(\"CancelSubSample\") ? controlMap.get(\"CancelSubSample\").ncontrolcode : -1;\n      const sampleBarcodeId = controlMap.has(\"SamplePrintBarcode\") ? controlMap.get(\"SamplePrintBarcode\").ncontrolcode : -1;\n      const subSampleBarcodeId = controlMap.has(\"SubSamplePrintBarcode\") ? controlMap.get(\"SubSamplePrintBarcode\").ncontrolcode : -1;\n      const CancelExternalOrderSampleId = controlMap.has(\"CancelExternalOrderSample\") ? controlMap.get(\"CancelExternalOrderSample\").ncontrolcode : -1;\n      const SampleImportId = controlMap.has(\"ImportSample\") ? controlMap.get(\"ImportSample\").ncontrolcode : -1;\n      const SampleCountId = controlMap.has(\"SampleCount\") ? controlMap.get(\"SampleCount\").ncontrolcode : -1;\n      const outsourceId = controlMap.has(\"Outsource\") ? controlMap.get(\"Outsource\").ncontrolcode : -1;\n      const exportTemplateId = controlMap.has(\"Export Template\") ? controlMap.get(\"Export Template\").ncontrolcode : -1;\n      const importTemplateId = controlMap.has(\"Import Template\") ? controlMap.get(\"Import Template\").ncontrolcode : -1;\n      const adhocTestId = controlMap.has(\"AdhocTest\") ? controlMap.get(\"AdhocTest\").ncontrolcode : -1;\n      const generateBarcodeId = controlMap.has(\"GenerateBarcode\") ? controlMap.get(\"GenerateBarcode\").ncontrolcode : -1;\n      this.setState({\n        userRoleControlRights,\n        controlMap,\n        cancelId,\n        preRegisterId,\n        registerId,\n        editSampleId,\n        quarantineId,\n        addTestId,\n        printBarcodeId,\n        cancelSampleId,\n        addSubSampleId,\n        editSubSampleId,\n        cancelSubSampleId,\n        specBasedTestPackage,\n        sampleBarcodeId,\n        subSampleBarcodeId,\n        CancelExternalOrderSampleId,\n        SampleImportId,\n        SampleCountId,\n        exportTemplateId,\n        importTemplateId,\n        outsourceId,\n        adhocTestId,\n        generateBarcodeId\n      });\n    }\n\n    let activeTabIndex = this.state.activeTabIndex || undefined;\n    let activeTabId = this.state.activeTabId || undefined; // console.log(\"this.props.Login.masterData.selectedSample:\", this.props.Login.masterData.selectedSample);\n\n    if (this.props.Login.activeTabIndex !== previousProps.Login.activeTabIndex || this.props.Login.masterData !== previousProps.Login.masterData) {\n      let {\n        skip,\n        take,\n        testskip,\n        testtake,\n        subsampleskip,\n        subsampletake,\n        testCommentDataState,\n        resultDataState,\n        sampleGridDataState,\n        popUptestDataState,\n        DynamicSampleColumns,\n        DynamicSubSampleColumns,\n        DynamicTestColumns,\n        DynamicGridItem,\n        DynamicGridMoreField,\n        SingleItem,\n        testMoreField,\n        testListColumns,\n        SubSampleDynamicGridItem,\n        SubSampleDynamicGridMoreField,\n        SubSampleSingleItem,\n        sampleSearchField,\n        subsampleSearchField,\n        testSearchField,\n        testAttachmentDataState,\n        sampleCommentDataState,\n        sampledateconstraints,\n        subsampledateconstraints,\n        activeTabIndex,\n        activeTabId,\n        sampleCombinationUnique,\n        subsampleCombinationUnique,\n        addedOrderSampleList,\n        sampleexportfields,\n        subsampleexportfields\n      } = this.state;\n      addedOrderSampleList = []; // if(this.props.Login.masterData.orders !==  previousProps.Login.masterData.orders)\n      // {\n      //     orders = this.props.Login.masterData.orders;\n      // }\n\n      if (this.props.Login.activeTabIndex !== previousProps.Login.activeTabIndex) {\n        activeTabIndex = this.props.Login.activeTabIndex;\n        activeTabId = this.props.Login.activeTabId;\n      }\n\n      if (this.props.Login.masterData.DynamicDesign && this.props.Login.masterData.DynamicDesign !== previousProps.Login.masterData.DynamicDesign) {\n        const dynamicColumn = JSON.parse(this.props.Login.masterData.DynamicDesign.jsondata.value);\n        DynamicSampleColumns = dynamicColumn.samplelistitem ? dynamicColumn.samplelistitem : [];\n        DynamicSubSampleColumns = dynamicColumn.subsamplelistitem ? dynamicColumn.subsamplelistitem : [];\n        DynamicTestColumns = dynamicColumn.testlistitem ? dynamicColumn.testlistitem : [];\n        DynamicGridItem = dynamicColumn.samplegriditem ? dynamicColumn.samplegriditem : [];\n        DynamicGridMoreField = dynamicColumn.samplegridmoreitem ? dynamicColumn.samplegridmoreitem : [];\n        SingleItem = dynamicColumn.sampledisplayfields ? dynamicColumn.sampledisplayfields : [];\n        SubSampleDynamicGridItem = dynamicColumn.subsamplegriditem ? dynamicColumn.subsamplegriditem : [];\n        SubSampleDynamicGridMoreField = dynamicColumn.subsamplegridmoreitem ? dynamicColumn.subsamplegridmoreitem : [];\n        SubSampleSingleItem = dynamicColumn.subsampledisplayfields ? dynamicColumn.subsampledisplayfields : [];\n        testMoreField = dynamicColumn.testListFields.testlistmoreitems ? dynamicColumn.testListFields.testlistmoreitems : [];\n        testListColumns = dynamicColumn.testListFields.testlistitem ? dynamicColumn.testListFields.testlistitem : [];\n        sampleSearchField = dynamicColumn.samplesearchfields ? dynamicColumn.samplesearchfields : [];\n        subsampleSearchField = dynamicColumn.subsamplesearchfields ? dynamicColumn.subsamplesearchfields : [];\n        testSearchField = dynamicColumn.testListFields.testsearchfields ? dynamicColumn.testListFields.testsearchfields : [];\n        sampledateconstraints = dynamicColumn.sampledateconstraints || [];\n        subsampledateconstraints = dynamicColumn.subsampledateconstraints || [];\n        sampleCombinationUnique = dynamicColumn.samplecombinationunique || [];\n        subsampleCombinationUnique = dynamicColumn.subsamplecombinationunique || [];\n        sampleexportfields = dynamicColumn.sampleExportFields || [];\n        subsampleexportfields = dynamicColumn.subSampleExportFields || []; // specBasedComponent = true;\n\n        this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nneedsubsample && this.props.Login.masterData.RegistrationGetSample.length > 0 && this.props.Login.masterData.RegistrationGetSample[0].ncomponentrequired === transactionStatus.YES && DynamicSubSampleColumns.push({\n          1: {\n            'en-US': 'Specimen',\n            'ru-RU': 'Образец',\n            'tg-TG': 'Намуна'\n          },\n          2: \"scomponentname\"\n        });\n\n        if (this.props.Login.masterData.RealSampleTypeValue && this.props.Login.masterData.RealSampleTypeValue.nsampletypecode === SampleType.CLINICALTYPE) {\n          DynamicSubSampleColumns.push({\n            1: {\n              'en-US': 'Order Type',\n              'ru-RU': 'Тип заказа',\n              'tg-TG': 'Навъи фармоиш'\n            },\n            2: \"sordertypename\"\n          });\n        }\n      } // DynamicSubSampleColumns.push({\n      // \"1\":{`${this.props.Login.userInfo.slanguagetypecode}`}= this.props.intl.formatMessage({ id: \"IDS_COMPONENT\" }),\n      // \"2\":\"scomponentname\"});\n      // let objCompoent = {1:`${this.props.Login.userInfo.slanguagetypecode}`= this.props.intl.formatMessage({ id: \"IDS_COMPONENT\" }),\n      //                     2:\"scomponentname\"\n\n\n      let showSample = this.props.Login.showSample === this.state.showTest || this.state.showSample;\n      let showTest = showSample ? false : true;\n      let stateSampleType = this.state.stateSampleType;\n      let stateRegistrationType = this.state.stateRegistrationType;\n      let stateRegistrationSubType = this.state.stateRegistrationSubType;\n      let stateFilterStatus = this.state.stateFilterStatus;\n      let stateDynamicDesign = this.state.stateDynamicDesign;\n      let stateApprovalConfigVersion = this.state.stateApprovalConfigVersion;\n\n      if (this.props.Login.masterData.SampleType !== previousProps.Login.masterData.SampleType) {\n        const sampleTypeMap = constructOptionList(this.props.Login.masterData.SampleType || [], \"nsampletypecode\", \"ssampletypename\", \"nsorter\", \"ascending\", false);\n        stateSampleType = sampleTypeMap.get(\"OptionList\");\n      }\n\n      if (this.props.Login.masterData.RegistrationType !== previousProps.Login.masterData.RegistrationType) {\n        const registrationTypeMap = constructOptionList(this.props.Login.masterData.RegistrationType || [], \"nregtypecode\", \"sregtypename\", \"nsorter\", \"ascending\", false);\n        stateRegistrationType = registrationTypeMap.get(\"OptionList\");\n      }\n\n      if (this.props.Login.masterData.RegistrationSubType !== previousProps.Login.masterData.RegistrationSubType) {\n        const registrationSubTypeMap = constructOptionList(this.props.Login.masterData.RegistrationSubType || [], \"nregsubtypecode\", \"sregsubtypename\", \"nsorter\", \"ascending\", false);\n        stateRegistrationSubType = registrationSubTypeMap.get(\"OptionList\");\n      }\n\n      if (this.props.Login.masterData.FilterStatus !== previousProps.Login.masterData.FilterStatus) {\n        const filterStatusMap = constructOptionList(this.props.Login.masterData.FilterStatus || [], \"ntransactionstatus\", \"stransdisplaystatus\", \"nsorter\", \"ascending\", false);\n        stateFilterStatus = filterStatusMap.get(\"OptionList\");\n      }\n\n      if (this.props.Login.masterData.ApprovalConfigVersion !== previousProps.Login.masterData.ApprovalConfigVersion) {\n        const DesignTemplateMappingMap = constructOptionList(this.props.Login.masterData.ApprovalConfigVersion || [], \"napproveconfversioncode\", \"sversionname\", undefined, undefined, false);\n        stateApprovalConfigVersion = DesignTemplateMappingMap.get(\"OptionList\");\n      }\n\n      if (this.props.Login.masterData.DesignTemplateMapping !== previousProps.Login.masterData.DesignTemplateMapping) {\n        const DesignTemplateMappingMap = constructOptionList(this.props.Login.masterData.DesignTemplateMapping || [], \"ndesigntemplatemappingcode\", \"sregtemplatename\", undefined, undefined, false);\n        stateDynamicDesign = DesignTemplateMappingMap.get(\"OptionList\");\n      } // const stateSampleType = sampleTypeMap.get(\"OptionList\");\n\n\n      skip = this.props.Login.skip === undefined ? skip : this.props.Login.skip;\n      take = this.props.Login.take || take;\n      testskip = this.props.Login.testskip === undefined ? testskip : this.props.Login.testskip;\n      testtake = this.props.Login.testtake || testtake;\n      subsampleskip = this.props.Login.subsampleskip === undefined ? subsampleskip : this.props.Login.subsampleskip;\n      subsampletake = this.props.Login.subsampletake || subsampletake;\n\n      if (this.props.Login.resultDataState && this.props.Login.resultDataState !== previousProps.Login.resultDataState) {\n        resultDataState = this.props.Login.resultDataState;\n      }\n\n      if (this.props.Login.testCommentDataState && this.props.Login.testCommentDataState !== previousProps.Login.testCommentDataState) {\n        testCommentDataState = this.props.Login.testCommentDataState;\n      }\n\n      if (this.props.Login.testAttachmentDataState && this.props.Login.testAttachmentDataState !== previousProps.Login.testAttachmentDataState) {\n        testAttachmentDataState = this.props.Login.testAttachmentDataState;\n      }\n\n      if (this.props.Login.sampleGridDataState && this.props.Login.sampleGridDataState !== previousProps.Login.sampleGridDataState) {\n        sampleGridDataState = this.props.Login.sampleGridDataState;\n      }\n\n      if (this.props.Login.popUptestDataState && this.props.Login.popUptestDataState !== previousProps.Login.popUptestDataState) {\n        popUptestDataState = this.props.Login.popUptestDataState;\n      }\n\n      const testGetParam = {\n        masterData: this.props.Login.masterData,\n        userinfo: this.props.Login.userInfo,\n        ntransactionstatus: String(this.props.Login.masterData.RealFilterStatusValue && this.props.Login.masterData.RealFilterStatusValue.ntransactionstatus),\n        nsampletypecode: this.props.Login.masterData.RealSampleTypeValue && this.props.Login.masterData.RealSampleTypeValue.nsampletypecode,\n        nregtypecode: this.props.Login.masterData.RealRegTypeValue && this.props.Login.masterData.RealRegTypeValue.nregtypecode,\n        nregsubtypecode: this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode,\n        activeTestTab: this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\",\n        activeSampleTab: this.props.Login.activeTestTab || \"IDS_SAMPLEATTACHMENTS\",\n        activeSubSampleTab: this.props.Login.activeTestTab || \"IDS_SUBSAMPLEATTACHMENTS\",\n        npreregno: this.props.Login.masterData.selectedSample && this.props.Login.masterData.selectedSample.map(sample => sample.npreregno).join(\",\"),\n        sfromdate: this.props.Login.masterData.RealFromDate,\n        stodate: this.props.Login.masterData.RealToDate,\n        //searchTestRef: this.searchTestRef,\n        // testskip: testskip,\n        //subsampleskip: subsampleskip,\n        // resultDataState: resultDataState,\n        ndesigntemplatemappingcode: this.props.Login.masterData.RealDesignTemplateMappingValue && this.props.Login.masterData.RealDesignTemplateMappingValue.ndesigntemplatemappingcode,\n        nneedtemplatebasedflow: this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nneedtemplatebasedflow,\n        nneedsubsample: this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nneedsubsample //activeTabIndex: this.state.enableAutoClick ? 1 : this.state.activeTabIndex ? this.state.activeTabIndex : undefined\n\n      };\n      const testChildGetParam = {\n        masterData: this.props.Login.masterData,\n        userinfo: this.props.Login.userInfo,\n        ntransactionstatus: String(this.props.Login.masterData.RealFilterStatusValue && this.props.Login.masterData.RealFilterStatusValue.ntransactionstatus),\n        nsampletypecode: this.props.Login.masterData.RealSampleTypeValue && this.props.Login.masterData.RealSampleTypeValue.nsampletypecode,\n        nregtypecode: this.props.Login.masterData.RealRegTypeValue && this.props.Login.masterData.RealRegTypeValue.nregtypecode,\n        nregsubtypecode: this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode,\n        activeTestTab: this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\",\n        activeSampleTab: this.props.Login.activeTestTab || \"IDS_SAMPLEATTACHMENTS\",\n        activeSubSampleTab: this.props.Login.activeTestTab || \"IDS_SUBSAMPLEATTACHMENTS\",\n        npreregno: this.props.Login.masterData.selectedSample && this.props.Login.masterData.selectedSample.map(sample => sample.npreregno).join(\",\"),\n        ntransactionsamplecode: this.props.Login.masterData.selectedSubSample && this.props.Login.masterData.selectedSubSample.map(sample => sample.ntransactionsamplecode).join(\",\"),\n        sfromdate: this.props.Login.masterData.RealFromDate,\n        stodate: this.props.Login.masterData.RealToDate,\n        // resultDataState: resultDataState,\n        // testCommentDataState: testCommentDataState,\n        ndesigntemplatemappingcode: this.props.Login.masterData.RealDesignTemplateMappingValue && this.props.Login.masterData.RealDesignTemplateMappingValue.ndesigntemplatemappingcode,\n        nneedtemplatebasedflow: this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nneedtemplatebasedflow,\n        activeTabIndex: this.state.enableAutoClick ? 1 : this.state.activeTabIndex ? this.state.activeTabIndex : undefined\n      };\n      const subSampleGetParam = {\n        masterData: this.props.Login.masterData,\n        ntransactionstatus: String(this.props.Login.masterData.RealFilterStatusValue && this.props.Login.masterData.RealFilterStatusValue.ntransactionstatus),\n        userinfo: this.props.Login.userInfo,\n        nsampletypecode: this.props.Login.masterData.RealSampleTypeValue && this.props.Login.masterData.RealSampleTypeValue.nsampletypecode,\n        nregtypecode: this.props.Login.masterData.RealRegTypeValue && this.props.Login.masterData.RealRegTypeValue.nregtypecode,\n        nregsubtypecode: this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode,\n        activeTestTab: this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\",\n        activeSampleTab: this.props.Login.activeTestTab || \"IDS_SAMPLEATTACHMENTS\",\n        activeSubSampleTab: this.props.Login.activeTestTab || \"IDS_SUBSAMPLEATTACHMENTS\",\n        // testskip: testskip,\n        // subsampleskip: subsampleskip,\n        // searchTestRef: this.searchTestRef,\n        //resultDataState: resultDataState,\n        // testCommentDataState: testCommentDataState,\n        //sampleGridDataState: sampleGridDataState,\n        ndesigntemplatemappingcode: this.props.Login.masterData.RealDesignTemplateMappingValue && this.props.Login.masterData.RealDesignTemplateMappingValue.ndesigntemplatemappingcode,\n        nneedtemplatebasedflow: this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nneedtemplatebasedflow,\n        nneedsubsample: this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nneedsubsample\n      };\n      const filterSampleParam = {\n        inputListName: \"RegistrationGetSample\",\n        selectedObject: \"selectedSample\",\n        primaryKeyField: \"npreregno\",\n        fetchUrl: \"registration/getRegistrationSubSample\",\n        // isSortable: true,\n        // sortValue: 'ntransactionsamplecode',\n        // sortList: ['RegistrationGetSubSample'],\n        isMultiSort: true,\n        multiSortData: [{\n          pkey: 'ntransactionsamplecode',\n          list: 'RegistrationGetSubSample'\n        }, {\n          pkey: 'ntransactiontestcode',\n          list: 'RegistrationGetTest'\n        }],\n        //ALPD-1518\n        skip: 0,\n        take: this.props.Login.settings && parseInt(this.props.Login.settings[3]),\n        subsampleskip: 0,\n        subsampletake: this.props.Login.settings && this.props.Login.settings[12] ? this.props.Login.settings[12] : 10,\n        testskip: 0,\n        testtake: this.props.Login.settings && this.props.Login.settings[12] ? this.props.Login.settings[12] : 10,\n        //childRefs: [{ ref: this.searchTestRef, childFilteredListName: \"searchedSubSample\" }],\n        fecthInputObject: {\n          //nflag: 2,\n          // ntype: 2,\n          masterData: this.props.Login.masterData,\n          ntransactionstatus: String(this.props.Login.masterData.RealFilterStatusValue && this.props.Login.masterData.RealFilterStatusValue.ntransactionstatus),\n          userinfo: this.props.Login.userInfo,\n          nsampletypecode: this.props.Login.masterData.RealSampleTypeValue && this.props.Login.masterData.RealSampleTypeValue.nsampletypecode,\n          nregtypecode: this.props.Login.masterData.RealRegTypeValue && this.props.Login.masterData.RealRegTypeValue.nregtypecode,\n          nregsubtypecode: this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode,\n          activeTestTab: this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\",\n          activeSampleTab: this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\",\n          activeSubSampleTab: this.props.Login.activeSubSampleTab || \"IDS_SUBSAMPLEATTACHMENTS\",\n          ndesigntemplatemappingcode: this.props.Login.masterData.RealDesignTemplateMappingValue && this.props.Login.masterData.RealDesignTemplateMappingValue.ndesigntemplatemappingcode,\n          nneedtemplatebasedflow: this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nneedtemplatebasedflow,\n          nneedsubsample: this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nneedsubsample,\n          // checkBoxOperation: 3,\n          checkBoxOperation: checkBoxOperation.SINGLESELECT\n        },\n        masterData: this.props.Login.masterData,\n        searchFieldList: sampleSearchField,\n        changeList: [\"RegistrationGetSubSample\", \"RegistrationGetTest\", \"RegistrationTestAttachment\", \"RegistrationTestComment\", \"RegistrationAttachment\", \"selectedSample\", \"selectedSubSample\", \"selectedTest\", \"RegistrationParameter\"]\n      };\n      const filterSubSampleParam = {\n        inputListName: \"RegistrationGetSubSample\",\n        selectedObject: \"selectedSubSample\",\n        primaryKeyField: \"ntransactionsamplecode\",\n        fetchUrl: \"registration/getRegistrationTest\",\n        skip: this.state.skip,\n        take: this.props.Login.settings && parseInt(this.props.Login.settings[3]),\n        subsampleskip: 0,\n        subsampletake: this.props.Login.settings && this.props.Login.settings[12] ? this.props.Login.settings[12] : 10,\n        testskip: 0,\n        testtake: this.props.Login.settings && this.props.Login.settings[12] ? this.props.Login.settings[12] : 10,\n        isMultiSort: true,\n        multiSortData: [{\n          pkey: 'ntransactiontestcode',\n          list: 'RegistrationGetTest'\n        }],\n        //childRefs: [{ ref: this.searchTestRef, childFilteredListName: \"searchedSubSample\" }],\n        fecthInputObject: {\n          //nflag: 2,\n          // ntype: 2,\n          masterData: this.props.Login.masterData,\n          //  ntransactionstatus: String(this.props.Login.masterData.RealFilterStatusValue && this.props.Login.masterData.RealFilterStatusValue.ntransactionstatus),\n          userinfo: this.props.Login.userInfo,\n          nsampletypecode: this.props.Login.masterData.RealSampleTypeValue && this.props.Login.masterData.RealSampleTypeValue.nsampletypecode,\n          nregtypecode: this.props.Login.masterData.RealRegTypeValue && this.props.Login.masterData.RealRegTypeValue.nregtypecode,\n          nregsubtypecode: this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode,\n          activeTestTab: this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\",\n          activeSampleTab: this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\",\n          activeSubSampleTab: this.props.Login.activeSubSampleTab || \"IDS_SUBSAMPLEATTACHMENTS\",\n          ndesigntemplatemappingcode: this.props.Login.masterData.RealDesignTemplateMappingValue && this.props.Login.masterData.RealDesignTemplateMappingValue.ndesigntemplatemappingcode,\n          nneedtemplatebasedflow: this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nneedtemplatebasedflow,\n          nneedsubsample: this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nneedsubsample,\n          // checkBoxOperation: 3,\n          checkBoxOperation: checkBoxOperation.SINGLESELECT,\n          npreregno: this.props.Login.masterData.selectedSample && this.props.Login.masterData.selectedSample.map(x => x.npreregno).join(\",\")\n        },\n        masterData: this.props.Login.masterData,\n        searchFieldList: subsampleSearchField,\n        changeList: [\"RegistrationGetTest\", \"RegistrationTestAttachment\", \"RegistrationTestComment\", \"RegistrationAttachment\", \"selectedSubSample\", \"selectedTest\", \"RegistrationParameter\"]\n      };\n      const filterTestParam = {\n        inputListName: \"RegistrationGetTest\",\n        selectedObject: \"selectedTest\",\n        primaryKeyField: \"ntransactiontestcode\",\n        fetchUrl: this.getActiveTestURL(),\n        skip: this.state.skip,\n        take: this.props.Login.settings && parseInt(this.props.Login.settings[3]),\n        subsampleskip: this.state.subsampleskip,\n        subsampletake: this.props.Login.settings && this.props.Login.settings[12] ? this.props.Login.settings[12] : 10,\n        testskip: 0,\n        testtake: this.props.Login.settings && this.props.Login.settings[12] ? this.props.Login.settings[12] : 10,\n        fecthInputObject: {\n          ntransactiontestcode: this.props.Login.masterData && this.props.Login.masterData.selectedTest && this.props.Login.masterData.selectedTest ? this.props.Login.masterData.selectedTest.map(test => test.ntransactiontestcode).join(\",\") : \"-1\",\n          userinfo: this.props.Login.userInfo,\n          ndesigntemplatemappingcode: this.props.Login.masterData.RealDesignTemplateMappingValue && this.props.Login.masterData.RealDesignTemplateMappingValue.ndesigntemplatemappingcode,\n          nneedtemplatebasedflow: this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nneedtemplatebasedflow,\n          nneedsubsample: this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nneedsubsample,\n          // checkBoxOperation: 3,\n          checkBoxOperation: checkBoxOperation.SINGLESELECT,\n          activeTestTab: this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\",\n          activeSampleTab: this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\",\n          activeSubSampleTab: this.props.Login.activeSubSampleTab || \"IDS_SUBSAMPLEATTACHMENTS\"\n        },\n        masterData: this.props.Login.masterData,\n        searchFieldList: testSearchField,\n        changeList: [\"RegistrationTestComment\", \"RegistrationParameter\"],\n        childTabsKey: [\"RegistrationParameter\", \"RegistrationTestComment\", \"RegistrationTestAttachment\", \"ApprovalParameter\"]\n      }; // let postParamList = [\n      //     {\n      //         filteredListName: \"searchedSample\",\n      //         clearFilter: \"no\",\n      //         searchRef: this.searchSampleRef,\n      //         primaryKeyField: \"npreregno\",\n      //         fetchUrl: \"registration/getRegistrationSubSample\",\n      //         fecthInputObject: subSampleGetParam,\n      //        // childRefs: [{ ref: this.searchTestRef, childFilteredListName: \"searchedSubSample\" }],\n      //         selectedObject: \"selectedSample\",\n      //         inputListName: \"AP_SAMPLE\",\n      //         updatedListname: \"selectedSample\",\n      //         unchangeList: [\"realSampleTypeValue\", \"SampleTypeValue\", \"realRegTypeValue\", \"RegTypeValue\", \"realRegSubTypeValue\", \"RegSubTypeValue\",\n      //             \"realApprovalVersionValue\", \"ApprovalVersionValue\", \"realFilterStatusValue\", \"FilterStatusValue\", \"fromDate\", \"toDate\",\n      //             \"UserSectionValue\", \"SampleType\", \"RegType\", \"RegSubType\", \"ApprovalVersion\", \"JobStatus\", \"JobStatusValue\", \"FilterStatus\"]\n      //     }\n      //     , {\n      //         filteredListName: \"searchedTest\",\n      //         updatedListname: \"selectedTest\",\n      //         clearFilter: \"no\",\n      //         searchRef: this.searchTestRef,\n      //         primaryKeyField: \"ntransactiontestcode\",\n      //         fetchUrl: \"approval/getApprovalTest\",\n      //         fecthInputObject: testGetParam,\n      //         selectedObject: \"selectedTest\",\n      //         inputListName: \"RegistrationGetTest\",\n      //         unchangeList: [\"realSampleTypeValue\", \"SampleTypeValue\", \"realRegTypeValue\", \"RegTypeValue\", \"realRegSubTypeValue\", \"RegSubTypeValue\",\n      //             \"realApprovalVersionValue\", \"ApprovalVersionValue\", \"realFilterStatusValue\", \"FilterStatusValue\", \"fromDate\", \"toDate\",\n      //             \"UserSectionValue\", \"SampleType\", \"RegType\", \"RegSubType\", \"ApprovalVersion\", \"JobStatus\", \"JobStatusValue\", \"FilterStatus\"]\n      //     }\n      // ];\n\n      const editRegParam = {\n        nfilterstatus: String(this.props.Login.masterData.RealFilterStatusValue && this.props.Login.masterData.RealFilterStatusValue.ntransactionstatus),\n        userinfo: this.props.Login.userInfo,\n        nsampletypecode: this.props.Login.masterData.RealSampleTypeValue && this.props.Login.masterData.RealSampleTypeValue.nsampletypecode,\n        nregtypecode: this.props.Login.masterData.RealRegTypeValue && this.props.Login.masterData.RealRegTypeValue.nregtypecode,\n        nregsubtypecode: this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode,\n        sfromdate: this.props.Login.masterData.RealFromDate,\n        stodate: this.props.Login.masterData.RealToDate,\n        // ncontrolCode: this.state.editSampleId,\n        ndesigntemplatemappingcode: this.props.Login.masterData.RealDesignTemplateMappingValue && this.props.Login.masterData.RealDesignTemplateMappingValue.ndesigntemplatemappingcode,\n        nneedtemplatebasedflow: this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nneedtemplatebasedflow,\n        nneedsubsample: this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nneedsubsample,\n        //=== true\n        //? transactionStatus.YES:transactionStatus.NO :transactionStatus.NO,\n        activeTestTab: this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\",\n        activeSampleTab: this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\",\n        activeSubSampleTab: this.props.Login.activeSubSampleTab || \"IDS_SUBSAMPLEATTACHMENTS\",\n        // checkBoxOperation: 3\n        checkBoxOperation: checkBoxOperation.SINGLESELECT\n      };\n      const editSubSampleRegParam = {\n        nfilterstatus: String(this.props.Login.masterData.RealFilterStatusValue && this.props.Login.masterData.RealFilterStatusValue.ntransactionstatus),\n        userinfo: this.props.Login.userInfo,\n        nsampletypecode: this.props.Login.masterData.RealSampleTypeValue && this.props.Login.masterData.RealSampleTypeValue.nsampletypecode,\n        nregtypecode: this.props.Login.masterData.RealRegTypeValue && this.props.Login.masterData.RealRegTypeValue.nregtypecode,\n        nregsubtypecode: this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode,\n        sfromdate: this.props.Login.masterData.RealFromDate,\n        stodate: this.props.Login.masterData.RealToDate,\n        //ncontrolCode: this.state.editSampleId,\n        ndesigntemplatemappingcode: this.props.Login.masterData.RealDesignTemplateMappingValue && this.props.Login.masterData.RealDesignTemplateMappingValue.ndesigntemplatemappingcode,\n        nneedtemplatebasedflow: this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nneedtemplatebasedflow,\n        nneedsubsample: this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nneedsubsample,\n        activeTestTab: this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\",\n        activeSampleTab: this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\",\n        activeSubSampleTab: this.props.Login.activeSubSampleTab || \"IDS_SUBSAMPLEATTACHMENTS\"\n      };\n      const addTestParam = {\n        selectedSample: this.props.Login.masterData.selectedSample,\n        selectedSubSample: this.props.Login.masterData.selectedSubSample,\n        // skip: skip, take: (skip + take),\n        userinfo: this.props.Login.userInfo,\n        sampleList: this.props.Login.masterData.RegistrationGetSample,\n        subsampleList: this.props.Login.masterData.RegistrationGetSubSample,\n        snspecsampletypecode: this.props.Login.masterData.selectedSubSample && [...new Set(this.props.Login.masterData.selectedSubSample.map(x => x.nspecsampletypecode))].join(\",\")\n      };\n      const breadCrumbobj = convertDateValuetoString(this.props.Login.masterData.RealFromDate, this.props.Login.masterData.RealToDate, this.props.Login.userInfo); //  if (this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue.nneedtemplatebasedflow) {\n\n      this.breadCrumbData = [{\n        \"label\": \"IDS_FROM\",\n        \"value\": breadCrumbobj.breadCrumbFrom\n      }, {\n        \"label\": \"IDS_TO\",\n        \"value\": breadCrumbobj.breadCrumbto\n      }, // {\n      //     \"label\": \"IDS_SAMPLETYPE\",\n      //     \"value\": this.props.Login.masterData.RealSampleTypeValue \n      //     && this.props.Login.masterData.RealSampleTypeValue.ssampletypename\n      // }, \n      {\n        \"label\": \"IDS_REGTYPE\",\n        \"value\": this.props.Login.masterData.RealRegTypeValue && this.props.Login.masterData.RealRegTypeValue.sregtypename\n      }, {\n        \"label\": \"IDS_REGSUBTYPE\",\n        \"value\": this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename\n      }, // {\n      //     \"label\": \"IDS_APPROVALCONFIGVERSION\",\n      //     \"value\": this.props.Login.masterData.RealApprovalConfigVersionValue \n      //     && this.props.Login.masterData.RealApprovalConfigVersionValue.sversionname\n      // },\n      // {\n      //     \"label\": \"IDS_DESIGNTEMPLATE\",\n      //     \"value\": this.props.Login.masterData.RealDesignTemplateMappingValue \n      //     && this.props.Login.masterData.RealDesignTemplateMappingValue.sregtemplatename\n      // },\n      {\n        \"label\": \"IDS_SAMPLESTATUS\",\n        \"value\": this.props.Login.masterData.RealFilterStatusValue && this.props.Login.masterData.RealFilterStatusValue.stransdisplaystatus\n      }]; // } else {\n      //     this.breadCrumbData = [\n      //         {\n      //             \"label\": \"IDS_FROM\",\n      //             \"value\": breadCrumbobj.breadCrumbFrom\n      //         }, {\n      //             \"label\": \"IDS_TO\",\n      //             \"value\": breadCrumbobj.breadCrumbto\n      //         }, {\n      //             \"label\": \"IDS_SAMPLETYPE\",\n      //             \"value\": this.props.Login.masterData.RealSampleTypeValue && this.props.Login.masterData.RealSampleTypeValue.ssampletypename\n      //         }, {\n      //             \"label\": \"IDS_REGTYPE\",\n      //             \"value\": this.props.Login.masterData.RealRegTypeValue && this.props.Login.masterData.RealRegTypeValue.sregtypename\n      //         }, {\n      //             \"label\": \"IDS_REGSUBTYPE\",\n      //             \"value\": this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename\n      //         },\n      //         {\n      //             \"label\": \"IDS_FILTERSTATUS\",\n      //             \"value\": this.props.Login.masterData.RealFilterStatusValue && this.props.Login.masterData.RealFilterStatusValue.stransdisplaystatus\n      //         }\n      //     ]\n      //  }\n\n      if (this.props.Login.masterData.approvedTreeData !== previousProps.Login.masterData.approvedTreeData) {\n        if (this.props.Login.masterData.approvedTreeData && this.props.Login.masterData.approvedTreeData !== undefined) {\n          this.setState({\n            treeData: this.props.Login.masterData.approvedTreeData\n          });\n        }\n      }\n\n      this.setState({\n        DynamicSampleColumns,\n        DynamicSubSampleColumns,\n        DynamicTestColumns,\n        SingleItem,\n        testMoreField,\n        DynamicGridItem,\n        DynamicGridMoreField,\n        testListColumns,\n        stateSampleType,\n        stateRegistrationType,\n        stateRegistrationSubType,\n        stateFilterStatus,\n        stateDynamicDesign,\n        stateApprovalConfigVersion,\n        popUptestDataState,\n        showSample,\n        showTest,\n        skip,\n        take,\n        testskip,\n        subsampleskip,\n        subsampletake,\n        testtake,\n        testCommentDataState,\n        testAttachmentDataState,\n        resultDataState,\n        sampleGridDataState,\n        SubSampleDynamicGridItem,\n        SubSampleDynamicGridMoreField,\n        SubSampleSingleItem,\n        testGetParam,\n        testChildGetParam,\n        subSampleGetParam,\n        filterSampleParam,\n        filterTestParam,\n        editRegParam,\n        editSubSampleRegParam,\n        addTestParam,\n        sampleSearchField,\n        subsampleSearchField,\n        testSearchField,\n        filterSubSampleParam,\n        sampledateconstraints,\n        subsampledateconstraints,\n        activeTabIndex,\n        activeTabId,\n        sampleCombinationUnique,\n        subsampleCombinationUnique,\n        addedOrderSampleList,\n        sampleexportfields,\n        subsampleexportfields\n      });\n    }\n  }\n\n  onUpdateSubSampleRegistration(saveType, formRef, operation, flag) {\n    const inputData = {\n      userinfo: this.props.Login.userInfo\n    };\n    let initialParam = {\n      nfilterstatus: this.props.Login.masterData.FilterStatusValue.ntransactionstatus,\n      userinfo: this.props.Login.userInfo,\n      nsampletypecode: this.props.Login.masterData.RealSampleTypeValue.nsampletypecode,\n      nregtypecode: this.props.Login.masterData.RealRegTypeValue.nregtypecode,\n      nregsubtypecode: this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode,\n      fromdate: \"\",\n      todate: \"\",\n      nflag: 2,\n      ntype: 5,\n      npreregno: String(this.state.selectedRecord.npreregno),\n      ntransactionsamplecode: String(this.state.selectedRecord.ntransactionsamplecode),\n      ndesigntemplatemappingcode: this.props.Login.masterData.RealDesignTemplateMappingValue && this.props.Login.masterData.RealDesignTemplateMappingValue.ndesigntemplatemappingcode,\n      nneedtemplatebasedflow: this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nneedtemplatebasedflow,\n      nneedsubsample: this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nneedsubsample,\n      // checkBoxOperation: 3,\n      checkBoxOperation: checkBoxOperation.SINGLESELECT,\n      activeTestTab: this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\",\n      activeSampleTab: this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\",\n      activeSubSampleTab: this.props.Login.activeSubSampleTab || \"IDS_SUBSAMPLEATTACHMENTS\"\n    };\n    inputData[\"initialparam\"] = initialParam; // inputData[\"samplebeforeedit\"] = JSON.parse(JSON.stringify(this.props.Login.regRecordToEdit));\n    //inputData[\"registration\"] = JSON.parse(JSON.stringify(this.state.selectedRecord));\n\n    const param = getRegistrationSubSample(this.state.selectedRecord, this.props.Login.masterData.SubSampleTemplate.jsondata, this.props.Login.userInfo, this.props.Login.defaulttimezone, false, this.props.Login.specBasedComponent, undefined, operation);\n    inputData[\"registrationsample\"] = param.sampleRegistration;\n\n    if (this.props.Login.masterData.RealSampleTypeValue && this.props.Login.masterData.RealSampleTypeValue.nsampletypecode === SampleType.CLINICALTYPE) {\n      inputData[\"registrationsample\"]['jsondata'] = { ...inputData[\"registrationsample\"]['jsondata'],\n        externalorderid: this.state.selectedRecord && this.state.selectedRecord.externalorderid\n      };\n      inputData[\"registrationsample\"]['jsonuidata'] = { ...inputData[\"registrationsample\"]['jsonuidata'],\n        externalorderid: this.state.selectedRecord && this.state.selectedRecord.externalorderid\n      };\n    }\n\n    inputData[\"SubSampleDateList\"] = param.dateList;\n    inputData['subsampledateconstraints'] = this.state.subsampledateconstraints;\n    inputData[\"flag\"] = flag === undefined ? 1 : flag;\n    inputData[\"ndesigntemplatemappingcode\"] = this.props.Login.masterData.RealDesignTemplateMappingValue && this.props.Login.masterData.RealDesignTemplateMappingValue.ndesigntemplatemappingcode;\n    inputData[\"napproveconfversioncode\"] = this.props.Login.masterData.RealApprovalConfigVersionValue && this.props.Login.masterData.RealApprovalConfigVersionValue.napproveconfversioncode;\n    inputData[\"nneedtemplatebasedflow\"] = this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nneedtemplatebasedflow;\n    inputData[\"nneedsubsample\"] = this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nneedsubsample; // inputData[\"checkBoxOperation\"] = 3;\n\n    inputData[\"checkBoxOperation\"] = checkBoxOperation.SINGLESELECT;\n    inputData[\"subsamplecombinationunique\"] = this.state.subsampleCombinationUnique;\n    inputData[\"activeTestTab\"] = this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\";\n    inputData[\"activeSampleTab\"] = this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\";\n    inputData[\"activeSubSampleTab\"] = this.props.Login.activeSubSampleTab || \"IDS_SUBSAMPLEATTACHMENTS\";\n    let isFileupload = false;\n    const formData = new FormData();\n    this.props.Login.withoutCombocomponent.map(item => {\n      if (item.inputtype === 'files') {\n        if (typeof this.state.selectedRecord[item && item.label] === \"object\") {\n          this.state.selectedRecord[item && item.label] && this.state.selectedRecord[item && item.label].forEach((item1, index) => {\n            formData.append(\"uploadedFile\" + index, item1);\n            formData.append(\"uniquefilename\" + index, inputData[\"registrationsample\"].uniquefilename);\n            formData.append(\"filecount\", this.state.selectedRecord[item && item.label].length);\n            formData.append(\"isFileEdited\", transactionStatus.YES);\n            formData.append(\"userinfo\", JSON.stringify(this.props.Login.userInfo)); // formDataValue={...map[\"RegistrationSample\"].formData,formData};\n\n            delete inputData[\"registrationsample\"].uniquefilename;\n            delete inputData[\"registrationsample\"][item && item.label];\n            formData.append('Map', Lims_JSON_stringify(JSON.stringify(inputData)));\n            isFileupload = true;\n          });\n        }\n      }\n    });\n    const inputParam = {\n      classUrl: this.props.Login.inputParam.classUrl,\n      methodUrl: \"SubSampleRegistration\",\n      displayName: this.props.Login.inputParam.displayName,\n      inputData: inputData,\n      operation: operation,\n      saveType,\n      formRef,\n      action: 'editSubSample',\n      showConfirmAlert: false,\n      resultDataState: this.state.resultDataState,\n      testCommentDataState: this.state.testCommentDataState,\n      testAttachmentDataState: this.state.testAttachmentDataState,\n      formData: formData,\n      isFileupload // dataState:undefined, selectedId\n\n    };\n\n    if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          loadEsign: true,\n          screenData: {\n            inputParam,\n            masterData: this.props.Login.masterData\n          },\n          saveType,\n          parentPopUpSize: \"lg\"\n        }\n      };\n      this.props.updateStore(updateInfo);\n    } else {\n      //this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\n      this.props.onUpdateSubSampleRegistration(inputParam, this.props.Login.masterData, \"openModal\");\n    }\n  }\n\n  clearSelected(innerObj, selectedItem) {\n    if (innerObj.id == selectedItem.id) {\n      innerObj.selected = true;\n    } else {\n      innerObj.selected = false;\n    }\n\n    if (innerObj.items && innerObj.items.length > 0) {\n      innerObj.items.map(childObj => {\n        this.clearSelected(childObj, selectedItem);\n      });\n    }\n\n    return innerObj;\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    Login: state.Login\n  };\n};\n\nexport default connect(mapStateToProps, {\n  callService,\n  crudMaster,\n  updateStore,\n  getSampleTypeChange,\n  getRegTypeChange,\n  getRegSubTypeChange,\n  getAttachmentCombo,\n  viewAttachment,\n  getCommentsCombo,\n  filterTransactionList,\n  validateEsignCredential,\n  getSampleChildTabDetail,\n  getTestChildTabDetailRegistration,\n  ReloadData,\n  showUnderDevelopment,\n  getPreviewTemplate,\n  getChildValues,\n  getRegistrationSample,\n  onApprovalConfigVersionChange,\n  getRegistrationsubSampleDetail,\n  getRegistrationTestDetail,\n  acceptRegistration,\n  addMoreTest,\n  createRegistrationTest,\n  getEditRegistrationComboService,\n  cancelTestAction,\n  cancelSampleAction,\n  addsubSampleRegistration,\n  saveSubSample,\n  getEditSubSampleComboService,\n  onUpdateSubSampleRegistration,\n  validateEsignforRegistration,\n  //componentTestPackage,\n  cancelSubSampleAction,\n  preregRecordToQuarantine,\n  componentTest,\n  getSubSampleChildTabDetail,\n  testPackageTest,\n  getStorageCategoryForSendToStore,\n  loadApprovedLocationOnCombo,\n  loadApprovedLocationOnTreeData,\n  sendToStoreSampleStorageMaster,\n  addMasterRecord,\n  getAddMasterCombo,\n  getDynamicMasterTempalte,\n  getChildComboMaster,\n  getChildValuesForAddMaster,\n  insertRegistration,\n  getBarcodeAndPrinterService,\n  getEditMaster,\n  outsourceTest,\n  getOutSourceSite,\n  getOutSourceSiteAndTest,\n  outsourceSampleTest,\n  getOrderDetails,\n  onUpdateCancelExternalOrder,\n  orderMapping,\n  getExternalOrderForMapping,\n  getExternalOrderTypeForMapping,\n  orderRecords,\n  testSectionTest,\n  openBarcodeModal,\n  barcodeGeneration,\n  getAdhocTest,\n  createAdhocTest\n})(injectIntl(RegistrationDesigner));","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/pages/registration/RegistrationDesigner.jsx"],"names":["React","Component","connect","showUnderDevelopment","callService","crudMaster","updateStore","getSampleTypeChange","getRegTypeChange","getRegSubTypeChange","getAttachmentCombo","viewAttachment","getCommentsCombo","filterTransactionList","validateEsignCredential","ReloadData","getSampleChildTabDetail","getTestChildTabDetailRegistration","getPreviewTemplate","getChildValues","getRegistrationSample","getRegistrationsubSampleDetail","getRegistrationTestDetail","acceptRegistration","addMoreTest","createRegistrationTest","getEditRegistrationComboService","cancelTestAction","cancelSampleAction","addsubSampleRegistration","saveSubSample","onApprovalConfigVersionChange","getEditSubSampleComboService","onUpdateSubSampleRegistration","cancelSubSampleAction","preregRecordToQuarantine","componentTest","getSubSampleChildTabDetail","validateEsignforRegistration","testPackageTest","getStorageCategoryForSendToStore","loadApprovedLocationOnCombo","loadApprovedLocationOnTreeData","sendToStoreSampleStorageMaster","addMasterRecord","getAddMasterCombo","getDynamicMasterTempalte","getOutSourceSiteAndTest","outsourceSampleTest","getChildComboMaster","getChildValuesForAddMaster","insertRegistration","getBarcodeAndPrinterService","getEditMaster","getOrderDetails","onUpdateCancelExternalOrder","outsourceTest","getOutSourceSite","getExternalOrderForMapping","orderMapping","getExternalOrderTypeForMapping","orderRecords","testSectionTest","openBarcodeModal","barcodeGeneration","getAdhocTest","createAdhocTest","Button","Card","Col","Nav","Row","FormLabel","toast","SlideOutModal","getControlMap","showEsign","sortData","constructOptionList","sortDataForDate","Lims_JSON_stringify","onDropAttachFileList","deleteAttachmentDropZone","comboChild","childComboClear","ageCalculate","extractFieldHeader","formatDate","formatInputDate","removeIndex","RegistrationFilter","Esign","injectIntl","ProductList","DEFAULT_RETURN","SplitterLayout","AddTest","FormSelectSearch","designProperties","RegistrationType","transactionStatus","SideBarSeqno","SideBarTabIndex","SampleType","formCode","designComponents","checkBoxOperation","BreadcrumbComponent","ListWrapper","TransactionListMasterJsonView","FontAwesomeIcon","faFileInvoice","faEye","faPlus","faSync","faBorderAll","faLink","faCommentDots","faChevronRight","faComments","faComment","faPaperclip","faFlask","faMicroscope","faHistory","faArrowRight","faBoxOpen","faBox","faLocationArrow","faFolderOpen","faFolder","faPrint","faFileImport","ContentPanel","ReadOnlyText","SampleInfoView","CustomTabs","ConfirmMessage","AddPrinter","SampleGridTab","AddFile","Attachments","Comments","onSaveSampleComments","onSaveSubSampleComments","onSaveTestComments","onSaveSampleAttachment","onSaveSubSampleAttachment","onSaveTestAttachment","getSameRecordFromTwoArrays","convertDateValuetoString","rearrangeDateFormat","RegistrationResultTab","PortalModal","PreRegisterSlideOutModal","getRegistrationSubSample","AddSubSample","CustomSwitch","QRCode","MoveSampleOrContainers","mapTree","getFieldSpecification","getFieldSpecification1","getFieldSpecification3","AddMasterRecords","ExternalOrder","FormTextarea","FormMultiSelect","FormInput","DateTimePicker","DataGrid","process","getActionIcon","MappingFields","AddBarcode","AddAdhocTest","BarcodeGeneratorComponent","RegistrationDesigner","constructor","props","onReload","obj","Login","masterData","RealFromDate","RealToDate","userInfo","fromDate","toDate","RealSampleTypeValue","RealRegTypeValue","RealRegSubTypeValue","RealFilterStatusValue","RealDesignTemplateMappingValue","RealApprovalConfigVersionValue","activeSampleTab","activeSubSampleTab","activeTestTab","SampleTypeValue","RegTypeValue","RegSubTypeValue","FilterStatusValue","DesignTemplateMappingValue","ApprovalConfigVersionValue","FromDate","ToDate","inputData","npreregno","nsampletypecode","nregtypecode","nregsubtypecode","nfilterstatus","ntransactionstatus","userinfo","flag","nneedtemplatebasedflow","ndesigntemplatemappingcode","napproveconfversioncode","nneedsubsample","SINGLESELECT","noutsourcerequired","inputParam","searchSubSampleRef","searchSampleRef","searchTestRef","selectedFilter","state","info","intl","formatMessage","id","onFilterSubmit","fromdate","todate","RealSampleTypeList","RealRegTypeList","RealRegSubTypeList","RegistrationSubType","RealFilterStatuslist","FilterStatus","RealDesignTemplateMappingList","DesignTemplateMapping","RealApprovalConfigVersionList","ApprovalConfigVersion","paneSizeChange","d","setState","verticalPaneSizeChange","val","enableAutoHeight","initialVerticalWidth","changeSplitterOption","sideNavDetail","screenName","testList","RegistrationGetTest","testskip","testtake","slice","selectedTestList","selectedTest","ntransactiontestcode","map","test","join","genericLabel","resultDataState","testDataStateChange","controlMap","userRoleControlRights","attachmentTabDetail","onTabChange","commentTabDetail","selectedSample","length","SingleItem","viewFile","sampleGridDataState","sampleInfoDataStateChange","gridfillingColumn","DynamicGridItem","DynamicGridMoreField","outSourceTabDetail","requiredExternalOrderAttachment","requiredOutsourceDetails","attachmentTabMap","Map","subsampleskip","subsampletake","skip","take","subsampleList","RegistrationGetSubSample","sampleList","RegistrationGetSample","set","TEST","onAttachmentSaveClick","RegistrationTestAttachment","deleteAttachment","testAttachmentDataState","methodUrl","esignRights","masterList","SUBSAMPLE","RegistrationSampleAttachment","selectedSubSample","attachmentskip","attachmenttake","settings","parseInt","ntransactionsamplecode","sample","SAMPLE","RegistrationAttachment","commentTabMap","selectedSampleList","selectedSubSampleList","onCommentsSaveClick","RegistrationTestComment","testCommentDataState","operation","ncontrolCode","has","get","ncontrolcode","selectedId","RegistrationSampleComment","subSampleCommentDataState","subSampledataStateChange","RegistrationComment","sampleCommentDataState","dataStateChange","outSourceTabMap","OutsourceDetailsList","outsourceDetailsDataState","outsourceDataStateChange","ExternalOrderAttachmentList","externalOrderAttachmentDataState","viewExternalOrderAttachmentFile","tabProps","tabseqno","tabSequence","String","item","activeTabIndex","activeTabId","subSampleAttachmentDataState","OrderCodeData","hasOwnProperty","changePropertyView","index","event","status","window","innerWidth","enableAutoClick","RESULT","ATTACHMENTS","COMMENTS","OUTSOURCE","updateInfo","typeName","data","onInputSwitchOnChange","target","name","enablePropertyPopup","changePropertyViewClose","undefined","onOrderSearch","orderValue","selectedRecord","nexternalordertypecode","sexternalorderid","warn","headerSelectionChange","checked","syntheticEvent","orderList","sectedRecord","orders","addedOrderSampleList","findIndex","x","nexternalordersamplecode","push","selected","newItem","JSON","parse","stringify","olditem","addSelectAll","deleteSelectAll","orderListData","deletedListdData","filter","item1","samples","deletedList","selectionChange","dataItem","initialList","valiateCheckAll","onNumericInputChangeSample","value","onComboChangeMaster","comboData","fieldName","selectedMaster","masterIndex","selectedControl","table","nformcode","tableDataField","foreignDataField","childIndex","masterfieldList","masterdataList","onSaveOutSourceTest","outSourceSiteData","destinationsitecode","onSaveModalClick","orderDetails","subSample","nexternalordercode","label","searchRef","isClearSearch","CLINICALTYPE","nportalrequired","YES","REGISTER","ntestcode","onSaveOutSourceSample","Date","regDate","toDateString","otherdetails","doutsourcedate","sremarks","ssampleid","sshipmenttracking","outsourceSample","PREREGISTER","REJECT","CANCELLED","RELEASED","ssamplearno","napprovalversioncode","handleDateChangeMaster","dateName","dateValue","age","onNumericInputOnChangeMaster","onInputOnChangeMaster","type","nneedcurrentaddress","sflatnotemp","sflatno","shousenotemp","shouseno","spostalcodetemp","spostalcode","sstreettemp","sstreet","scitynametemp","scityname","sdistrictnametemp","sdistrictname","sregionnametemp","sregionname","onSaveMasterRecord","saveType","formRef","masterDesign","toLowerCase","nmastersitecode","masterOperation","component","masterEditObject","jsondata","ndynamicmastercode","screendesign","masterdateconstraints","masterdatefields","mastercombinationunique","jsonuidata","dateList","defaulttimezone","slideoutdesign","row","children","column","componentrow","inputtype","pkey","valuemember","nquerybuildertablecode","source","mandatory","loadcurrentdate","timezone","PATIENTMASTER","masterextractedColumnList","dataField","isJsonField","jsonObjectName","controlType","dateField","controlName","NO","withoutCombocomponent","regSubSamplewithoutCombocomponent","comboComponents","regSubSamplecomboComponents","selectedRecordName","loadSubSample","regSubSamplecomboData","comboName","classUrl","mastercomboComponents","masterwithoutCombocomponent","masterComboColumnFiled","control","fieldList","extractedColumnList","Object","values","primaryKeyField","keys","addMaster","masterprimaryKeyField","displayname","slanguagetypecode","ndesigncomponentcode","COMBOBOX","editMasterRecord","editObject","onComboChangeMasterDyanmic","customName","child","childComboList","childColumnList","columnList","parentList","inputParem","primarykeyField","childParam","mastedataList","onInputOnChangeMasterDynamic","radiotext","includes","indexOf","indexcomma","handleDateChangeMasterDynamic","onNumericInputChangeMasterDynamic","onNumericBlurMasterDynamic","max","parseFloat","precision","min","printBarcode","barcodevalue","sarno","barcodeData","showQRCode","openModal","generateBarcode","patientName","patientDOB","orderIdData","QUARANTINE","replaceAll","generateBarcodeValue","additionDesignToPrint","showBarcode","sampleorderid","handleDateSubSampleChange","onTestPackageChange","specBasedComponent1","caseNo","selectSection","nsectioncode","selectPackage","nspecsampletypecode","nallottedspeccode","specBasedComponent","Set","Conponent","selectedComponent","availableTestSection","AllSection","availableTest","AllTest","TestCombined","TestSection","onTestSectionChange","ntestpackagecode","availableTestData","TestPakageTest","onComponentChange","specBasedTestPackage","onInputOnSubSampleChange","isnumeric","replace","onComboSubSampleChange","nameofdefaultcomp","onNumericInputSubSampleChange","onNumericBlurSubSample","onSaveSubSampleClick","objSubSample","searchedSample","list","findSampleAlloSpec","selectedTestData","selectedTestArray","param","SubSampleTemplate","sampleRegistration","externalorderid","subsampleCombinationUnique","subsampledateconstraints","nneedjoballocation","Layout","registrationTemplate","cTWithoutComboData","cTData","dob","gender","ngendercode","isFileupload","formData","FormData","forEach","append","uniquefilename","postParamList","onSaveCancelOrderMandatoryFields","mandatoryList","prereg","printer","file","childtest","regSubSample","outsourcetest","adhocTest","addSubSampleList","findComponentReqSpec","ncomponentrequired","mandatoryMappingList","selectedFile","actionType","onSaveChildTestClick","searchedSubSample","selectedSubsample","ageCal","TestGroupTest","ntestgrouptestcode","RegistrationSample","ntype","ageData","skipmethodvalidity","loadAdhocTest","responseKeyList","loadEsign","screenData","onSaveAdhocTestClick","selectedSampleSpecType","visibleadhoctest","adhocTestId","action","getRegistrationComboService","ScreenName","editId","importData","ndesigntemplatemappingcodefilter","mapOfFilterRegData","sampletypecategorybasedflow","ncategorybasedflowrequired","sregsubtypename","getBarcodeAndPrinter","retunObj","childList","childData","y","handlePageChange","e","handleTestPageChange","handleSubSamplePageChange","openFilter","showFilter","onFilterChange","labelname","onSampleTabChange","onSubSampleTabChange","ontestTabChange","onDropComponentFile","attachedFiles","maxSize","handleFilterDateChange","onUpdateRegistrationConfirm","showAlert","onUpdateRegistration","regEditParam","onCreateTestConfirm","createTestConfirmParam","modalName","onPreregConfirm","preregConfirmParam","onCreateSubSampleConfirm","subSampleConfirmParam","onAcceptConfirm","acceptConfirmParam","confirmAlert","showConfirmAlert","regDateEditConfirmMessage","confirmMessage","confirm","createTestConfirmMessage","preregConfirmMessage","subSampleConfirmMessage","acceptConfirmMessage","booleanFlag","closeFilter","inputValues","booleanmanuf","PLASMA_POOL","loadFile","ChildscreenName","childoperation","parentPopUpSize","onNumericInputChange","selectComponent","onSampleTypeChange","ConfirmComponent","getComponentfromJava","onRegTypeChange","registerId","acceptList","every","checkPreregisterAndQuarentine","sampleCode","substring","acceptRegistrationConfirm","selectQuarantine","quarantineId","quarentineList","checkPreregisterRecordQuarantine","onRegSubTypeChange","onDesignTemplateChange","onInputOnChange","selectedPrinterData","onComboChange","selectedDetailField","handleDateChange","onComboTestPackageChange","PrinterChange","closeChildModal","loadRegSubSample","showSaveContinue","loadChildTest","TestPackage","Test","availableAdhocTest","displayName","PopUpLabel","closeModal","loadPreregister","openChildModal","pare","loadPrinter","openPortal","subSampleDataGridList","insertSourcePreregno","onSaveCancelOrder","sexternalordersamplecode","unique","m","sexternalordercode","url","onSaveClick","onSavePrinterClick","insertlist","insertPrinterPreregno","sbarcodename","sprintername","onSaveFileClick","acceptedFiles","sfilename","ntemplatemanipulationcode","ImportFile","dataState","sourceDataState","popUptestDataState","testdataStateChange","testStateChange","testDataState","filedata","externalorderattachment","sampleTabDetail","tabMap","sampleComments","subsampleTabDetail","subsampleComments","testTabDetail","testTabMap","saveParam","isTestComment","searchedTest","cancelSubSampleRecord","controlcode","transValidation","transactionValidation","stransdisplaystatus","printbarcode","subSampleBarcodeId","cancelRecord","splice","addAdhocTest","addSubSample","check","findTransactionStatus","findSampleSpec","findSampleSpectemplate","regchildColumnList","handleEditDateChange","onNumericInputEditChange","CancelExternalOrderSampleId","cancelSampleRecords","cancelRejectSamplesList","transactionstatus","ntransstatus","translist","sam","selectdata","sam1","validateEsign","sreason","nreasoncode","spredefinedreason","password","editRegistration","editSubSampleRegistration","mastertoedit","regSubSamplechildColumnList","closeSendToStoreChildModal","sendToStore","needSubSample","mastersendtostore","itemRender","clickedItem","toggleAction","editable","expanded","containerfirstnode","locationlastnode","containerlastnode","text","onItemClick","newData","treeData","result","indices","itemHierarchicalIndex","split","Number","itemText","i","items","targetLocationHierarchy","onExpandChange","forceUpdate","onComboChangeTree","nfilterStorageCategory","current","onDropFileSubSample","deleteAttachmentSubSample","onSendToStoreSample","nstoragecategorycode","nsamplestoragelocationcode","ssampleArNO","nsampleqty","nunitcode","viewName","field","ssystemfilename","createRef","PrevoiusLoginData","breadCrumbData","layout","masterStatus","error","showAccordian","filterCollection","breadCrumb","showTest","showSample","showSubSample","sampleSearchFied","subsampleSearchFied","testSearchFied","DynamicSampleColumns","historyDataState","grandparentheight","splitChangeWidthPercentage","regparentSubSampleColumnList","regchildSubSampleColumnList","DynamicSubSampleColumns","DynamicTestColumns","testMoreField","testListColumns","SubSampleDynamicGridItem","SubSampleDynamicGridMoreField","SubSampleSingleItem","sampleCombinationUnique","cancelId","preRegisterId","sampleBarcodeId","editSampleId","addTestId","generateBarcodeId","printBarcodeId","cancelSampleId","addSubSampleId","editSubSampleId","cancelSubSampleId","exportTemplateId","importTemplateId","stateSampleType","stateRegistrationType","stateRegistrationSubType","stateFilterStatus","stateDynamicDesign","testGetParam","testChildGetParam","subSampleGetParam","filterSampleParam","filterTestParam","editRegParam","editSubSampleRegParam","addTestParam","sampleSearchField","subsampleSearchField","testSearchField","filterSubSampleParam","enablePin","fixefScrollHeight","outerHeight","propertyPopupWidth","outsourceId","myRef","getDerivedStateFromProps","getActiveTestURL","selectAll","render","regSampleExisted","subSampleList","testDesign","borderBottom","display","setting","ALL","mainDesign","marginTop","childRefs","ref","childFilteredListName","title","controlname","objectName","hidden","onClick","subSampleRegParam","primaryKeyName","nisstandaloneserver","nissyncserver","filteredListName","clearFilter","fetchUrl","fecthInputObject","selectedObject","inputListName","updatedListname","unchangeList","mainSampleRegParam","SampleImportId","stateApprovalConfigVersion","width","fullviewExpand","fullviewCollapse","sampleexportfields","subsampleexportfields","loadComponent","loadTest","loadSource","barcodeSelectedRecord","loadPoolSource","selectedSourceData","BarcodeList","Printer","nbarcodeprint","Product","mastertimeZoneList","masterdefaultTimeZone","DynamicDesign","lstComponent","timeZoneList","defaultTimeZone","selectedTestPackageData","hideQualisForms","barcode","externalOrderTypeList","selectedExternalOrderType","outSourceSiteList","outSourceTestList","ssitedate","date","orderTypeList","storageCategory","unitMaster","approvedLocation","showSampleInfo","disableSplit","clientHeight","showTestDetails","temparray","option","LABEL","VALUE","LISTITEM","componentWillUnmount","componentDidUpdate","previousProps","TESTPACKAGE","SampleCountId","sampledateconstraints","dynamicColumn","samplelistitem","subsamplelistitem","testlistitem","samplegriditem","samplegridmoreitem","sampledisplayfields","subsamplegriditem","subsamplegridmoreitem","subsampledisplayfields","testListFields","testlistmoreitems","samplesearchfields","subsamplesearchfields","testsearchfields","samplecombinationunique","subsamplecombinationunique","sampleExportFields","subSampleExportFields","sampleTypeMap","registrationTypeMap","registrationSubTypeMap","filterStatusMap","DesignTemplateMappingMap","sfromdate","stodate","isMultiSort","multiSortData","searchFieldList","changeList","childTabsKey","snspecsampletypecode","breadCrumbobj","breadCrumbFrom","breadCrumbto","sregtypename","approvedTreeData","initialParam","nflag","clearSelected","innerObj","selectedItem","childObj","mapStateToProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\n\r\nimport { connect } from 'react-redux';\r\nimport {\r\n    showUnderDevelopment,\r\n    callService, crudMaster, updateStore, getSampleTypeChange, getRegTypeChange,\r\n    getRegSubTypeChange, getAttachmentCombo, viewAttachment, getCommentsCombo,\r\n    filterTransactionList, validateEsignCredential, ReloadData, getSampleChildTabDetail,\r\n    getTestChildTabDetailRegistration, getPreviewTemplate, getChildValues,\r\n    getRegistrationSample, getRegistrationsubSampleDetail, getRegistrationTestDetail,\r\n    acceptRegistration, addMoreTest, createRegistrationTest, getEditRegistrationComboService,\r\n    cancelTestAction, cancelSampleAction, addsubSampleRegistration, saveSubSample, onApprovalConfigVersionChange,\r\n    getEditSubSampleComboService, onUpdateSubSampleRegistration, cancelSubSampleAction,//componentTestPackage,\r\n    preregRecordToQuarantine, componentTest, getSubSampleChildTabDetail, validateEsignforRegistration, testPackageTest,\r\n    getStorageCategoryForSendToStore, loadApprovedLocationOnCombo,\r\n    loadApprovedLocationOnTreeData, sendToStoreSampleStorageMaster,\r\n    addMasterRecord, getAddMasterCombo, getDynamicMasterTempalte,\r\n    getOutSourceSiteAndTest, outsourceSampleTest,\r\n    getChildComboMaster, getChildValuesForAddMaster, insertRegistration, getBarcodeAndPrinterService\r\n    , getEditMaster, getOrderDetails, onUpdateCancelExternalOrder, outsourceTest, getOutSourceSite, getExternalOrderForMapping, orderMapping, getExternalOrderTypeForMapping,\r\n    orderRecords, testSectionTest, openBarcodeModal, barcodeGeneration,getAdhocTest,createAdhocTest\r\n} from '../../actions'\r\nimport { Button, Card, Col, Nav, Row, FormLabel } from 'react-bootstrap';\r\nimport { toast } from 'react-toastify';\r\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\r\nimport {\r\n    getControlMap, showEsign, sortData, constructOptionList, sortDataForDate, Lims_JSON_stringify,\r\n    onDropAttachFileList, deleteAttachmentDropZone, comboChild, childComboClear, ageCalculate, extractFieldHeader, formatDate, formatInputDate, removeIndex\r\n} from '../../components/CommonScript';\r\nimport RegistrationFilter from './RegistrationFilter';\r\nimport Esign from '../audittrail/Esign';\r\nimport { injectIntl } from 'react-intl';\r\nimport { ProductList } from '../product/product.styled';\r\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\r\nimport SplitterLayout from \"react-splitter-layout\";\r\nimport AddTest from './AddTest';\r\nimport FormSelectSearch from '../../components/form-select-search/form-select-search.component';\r\n\r\nimport { designProperties, RegistrationType, transactionStatus, SideBarSeqno, SideBarTabIndex, SampleType, formCode, designComponents, checkBoxOperation } from '../../components/Enumeration';\r\n// import BreadcrumbComponentToolbar from '../../components/ToolbarBreadcrumb.Component';\r\nimport BreadcrumbComponent from '../../components/Breadcrumb.Component';\r\nimport { ListWrapper } from '../../components/client-group.styles';\r\nimport TransactionListMasterJsonView from '../../components/TransactionListMasterJsonView';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport {\r\n    faFileInvoice, faEye, faPlus, faSync, faBorderAll, faLink, faCommentDots, faChevronRight, faComments, faComment, faPaperclip,\r\n    faFlask, faMicroscope, faHistory, faArrowRight, faBoxOpen, faBox, faLocationArrow, faFolderOpen, faFolder, faPrint, faFileImport\r\n\r\n} from '@fortawesome/free-solid-svg-icons';\r\nimport { ContentPanel, ReadOnlyText } from '../../components/App.styles';\r\nimport SampleInfoView from '../approval/SampleInfoView';\r\nimport CustomTabs from '../../components/custom-tabs/custom-tabs.component';\r\nimport ConfirmMessage from '../../components/confirm-alert/confirm-message.component';\r\nimport AddPrinter from './AddPrinter';\r\nimport SampleGridTab from './SampleGridTab';\r\nimport AddFile from './AddFile';\r\nimport Attachments from '../attachmentscomments/attachments/Attachments';\r\nimport Comments from '../attachmentscomments/comments/Comments';\r\nimport { onSaveSampleComments, onSaveSubSampleComments, onSaveTestComments } from '../attachmentscomments/comments/CommentFunctions';\r\nimport { onSaveSampleAttachment, onSaveSubSampleAttachment, onSaveTestAttachment } from '../attachmentscomments/attachments/AttachmentFunctions';\r\nimport { ReactComponent as Quarantine } from '../../assets/image/Quarantine.svg'\r\nimport { ReactComponent as Register } from '../../assets/image/register.svg'\r\nimport { ReactComponent as Reject } from '../../assets/image/reject.svg'\r\nimport { ReactComponent as Order } from '../../assets/image/orders-icon.svg';\r\n\r\nimport { getSameRecordFromTwoArrays, convertDateValuetoString, rearrangeDateFormat } from '../../components/CommonScript'\r\nimport RegistrationResultTab from './RegistrationResultTab';\r\nimport PortalModal from '../../PortalModal';\r\nimport PreRegisterSlideOutModal from './PreRegisterSlideOutModal';\r\nimport { getRegistrationSubSample } from './RegistrationValidation';\r\nimport AddSubSample from './AddSubSample';\r\nimport CustomSwitch from '../../components/custom-switch/custom-switch.component';\r\nimport QRCode from 'react-qr-code';\r\nimport MoveSampleOrContainers from '../basemaster/MoveSampleOrContainers';\r\nimport { mapTree } from \"@progress/kendo-react-treelist\";\r\nimport { getFieldSpecification } from '../../components/type2component/Type2FieldSpecificationList';\r\nimport { getFieldSpecification as getFieldSpecification1 } from '../../components/type1component/Type1FieldSpecificationList';\r\nimport { getFieldSpecification as getFieldSpecification3 } from '../../components/type3component/Type3FieldSpecificationList';\r\nimport AddMasterRecords from '../dynamicpreregdesign/AddMasterRecords'\r\nimport ExternalOrder from './ExternalOrder';\r\nimport fullviewExpand from '../../assets/image/fullview-expand.svg';\r\nimport fullviewCollapse from '../../assets/image/fullview-collapse.svg';\r\nimport FormTextarea from '../../components/form-textarea/form-textarea.component';\r\nimport FormMultiSelect from '../../components/form-multi-select/form-multi-select.component';\r\nimport FormInput from '../../components/form-input/form-input.component';\r\nimport DateTimePicker from '../../components/date-time-picker/date-time-picker.component';\r\nimport DataGrid from '../../components/data-grid/data-grid.component';\r\nimport { process } from '@progress/kendo-data-query';\r\nimport { getActionIcon } from '../../components/HoverIcons';\r\nimport MappingFields from '../registration/MappingFields';\r\nimport AddBarcode from '../../pages/BarcodeTemplate/AddBarcode';\r\nimport AddAdhocTest from './AddAdhocTest';\r\nimport BarcodeGeneratorComponent from '../../components/BarcodeGeneratorComponent';\r\n\r\nclass RegistrationDesigner extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.searchSampleRef = React.createRef();\r\n        this.searchSubSampleRef = React.createRef();\r\n        this.searchTestRef = React.createRef();\r\n        this.PrevoiusLoginData = undefined;\r\n        this.breadCrumbData = [];\r\n        //  this.sampleeditable=this.props.Login.masterData.DynamicDesign&& JSON.parse(this.props.Login.masterData.DynamicDesign.jsondata.value)\r\n        this.state = {\r\n            layout: 1,\r\n            openModal: false,\r\n            masterStatus: \"\",\r\n            error: \"\",\r\n            selectedRecord: {},\r\n            operation: \"\",\r\n            screenName: \"Product\",\r\n            userRoleControlRights: [],\r\n            controlMap: new Map(),\r\n            showAccordian: true,\r\n            showSaveContinue: false,\r\n            filterCollection: [],\r\n            selectedFilter: {},\r\n            breadCrumb: [],\r\n            showTest: true,\r\n            showSample: false,\r\n            showSubSample: false,\r\n            sampleSearchFied: [],\r\n            subsampleSearchFied: [],\r\n            testSearchFied: [],\r\n            showConfirmAlert: false,\r\n            dataState: { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 },\r\n            DynamicSampleColumns: [],\r\n            sampleGridDataState: { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 },\r\n            testDataState: {\r\n                skip: 0, take: this.props.Login.settings ?\r\n                    parseInt(this.props.Login.settings[14]) : 5//, group: [{ field: 'npreregno' }] \r\n            },\r\n            testCommentDataState: {\r\n                skip: 0, take: this.props.Login.settings ?\r\n                    parseInt(this.props.Login.settings[14]) : 5//, group: [{ field: 'groupingField' }] \r\n            },\r\n            subSampleCommentDataState: {\r\n                skip: 0, take: this.props.Login.settings ?\r\n                    parseInt(this.props.Login.settings[14]) : 5//, group: [{ field: 'groupingField' }] \r\n            },\r\n            subSampleAttachmentDataState: {\r\n                skip: 0, take: this.props.Login.settings ?\r\n                    parseInt(this.props.Login.settings[14]) : 5//, group: [{ field: 'groupingField' }] \r\n            },\r\n            testAttachmentDataState: {\r\n                skip: 0, take: this.props.Login.settings ?\r\n                    parseInt(this.props.Login.settings[14]) : 5//, group: [{ field: 'groupingField' }] \r\n            },\r\n            sampleCommentDataState: {\r\n                skip: 0, take: this.props.Login.settings ?\r\n                    parseInt(this.props.Login.settings[14]) : 5//, group: [{ field: 'groupingField' }]\r\n            },\r\n            resultDataState: {\r\n                skip: 0, take: this.props.Login.settings ?\r\n                    parseInt(this.props.Login.settings[14]) : 5//, group: [{ field: 'sarno' }] \r\n            },\r\n            historyDataState: {\r\n                skip: 0, take: this.props.Login.settings ?\r\n                    parseInt(this.props.Login.settings[14]) : 5\r\n                //, group: [{ field: 'sarno' }, { field: 'stestsynonym' }] \r\n            },\r\n            externalOrderAttachmentDataState: {\r\n                skip: 0, take: this.props.Login.settings ?\r\n                    parseInt(this.props.Login.settings[14]) : 5\r\n            },\r\n            outsourceDetailsDataState: {\r\n                skip: 0, take: this.props.Login.settings ?\r\n                    parseInt(this.props.Login.settings[14]) : 5\r\n            }\r\n            ,\r\n            selectedPrinterData: {},\r\n            grandparentheight: '150vh',\r\n            transactionValidation: [],\r\n            skip: 0,\r\n            take: this.props.Login.settings && parseInt(this.props.Login.settings[3]),\r\n            testskip: 0,\r\n            splitChangeWidthPercentage: 28.6,\r\n            testtake: this.props.Login.settings\r\n                && this.props.Login.settings[12] ? this.props.Login.settings[12] : 10,\r\n            subsampleskip: 0,\r\n            subsampletake: this.props.Login.settings\r\n                && this.props.Login.settings[3] ? this.props.Login.settings[3] : 10,\r\n            comboComponents: [],\r\n            withoutCombocomponent: [],\r\n            childColumnList: [],\r\n            columnList: [],\r\n            regSubSamplecomboComponents: [],\r\n            regSubSamplewithoutCombocomponent: [],\r\n            regparentSubSampleColumnList: [],\r\n            regchildSubSampleColumnList: [],\r\n            DynamicSubSampleColumns: [],\r\n            DynamicTestColumns: [],\r\n            DynamicGridItem: [],\r\n            DynamicGridMoreField: [],\r\n            SingleItem: [],\r\n            testMoreField: [],\r\n            testListColumns: [],\r\n            SubSampleDynamicGridItem: [],\r\n            SubSampleDynamicGridMoreField: [],\r\n            SubSampleSingleItem: [],\r\n            sampleCombinationUnique: [], subsampleCombinationUnique: [],\r\n            cancelId: -1,\r\n            preRegisterId: -1,\r\n            sampleBarcodeId: -1,\r\n            subSampleBarcodeId: -1,\r\n            registerId: -1,\r\n            editSampleId: -1,\r\n            quarantineId: -1,\r\n            addTestId: -1,\r\n            adhocTestId:-1,\r\n            generateBarcodeId:-1,\r\n            printBarcodeId: -1,\r\n            cancelSampleId: -1,\r\n            addSubSampleId: -1,\r\n            editSubSampleId: -1,\r\n            cancelSubSampleId: -1,\r\n            CancelExternalOrderSampleId: -1,\r\n            exportTemplateId: -1,\r\n            importTemplateId: -1,\r\n            stateSampleType: [],\r\n            stateRegistrationType: [],\r\n            stateRegistrationSubType: [],\r\n            stateFilterStatus: [],\r\n            stateDynamicDesign: [],\r\n            testGetParam: {},\r\n            testChildGetParam: {},\r\n            subSampleGetParam: {},\r\n            filterSampleParam: {},\r\n            filterTestParam: {},\r\n            editRegParam: {},\r\n            editSubSampleRegParam: {},\r\n            addTestParam: {},\r\n            sampleSearchField: [],\r\n            subsampleSearchField: [],\r\n            testSearchField: [],\r\n            filterSubSampleParam: {},\r\n            initialVerticalWidth: \"57vh\",\r\n            enablePin: false,\r\n            fixefScrollHeight: window.outerHeight - 300,\r\n            enablePropertyPopup: false,\r\n            enableAutoClick: false,\r\n            //mention the property width in percentage based on window size\r\n            propertyPopupWidth: \"60\",\r\n            showQRCode: false,\r\n            showBarcode: false,\r\n            // specBasedComponent: this.props.Login.settings\r\n            //     && this.props.Login.settings[18] ? this.props.Login.settings[18] === \"true\" ? true : false : false,\r\n            treeData: [],\r\n            toggleAction: false,\r\n            selectedMaster: [],\r\n            outsourceId: -1\r\n        };\r\n        // this.onSecondaryPaneSizeChange = this.onSecondaryPaneSizeChange.bind(this);\r\n        this.myRef = React.createRef();\r\n    }\r\n\r\n    static getDerivedStateFromProps(props, state) {\r\n\r\n        if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\r\n            toast.info(props.Login.masterStatus);\r\n            props.Login.masterStatus = \"\";\r\n        }\r\n\r\n        if (props.Login.error !== state.error) {\r\n            toast.error(props.Login.error)\r\n            props.Login.error = \"\";\r\n        }\r\n        if (props.Login.showConfirmAlert !== state.showConfirmAlert) {\r\n            return {\r\n                showConfirmAlert: props.Login.showConfirmAlert\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    onReload = () => {\r\n\r\n        // let RealFromDate = new Date(this.props.Login.masterData.RealFromDate)\r\n        // let RealToDate = new Date(this.props.Login.masterData.RealToDate)\r\n        const obj = convertDateValuetoString(this.props.Login.masterData.RealFromDate, this.props.Login.masterData.RealToDate, this.props.Login.userInfo);\r\n        const RealFromDate = obj.fromDate;\r\n        const RealToDate = obj.toDate;\r\n        let RealSampleTypeValue = this.props.Login.masterData.RealSampleTypeValue && this.props.Login.masterData.RealSampleTypeValue\r\n        let RealRegTypeValue = this.props.Login.masterData.RealRegTypeValue && this.props.Login.masterData.RealRegTypeValue\r\n        let RealRegSubTypeValue = this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue\r\n        let RealFilterStatusValue = this.props.Login.masterData.RealFilterStatusValue && this.props.Login.masterData.RealFilterStatusValue\r\n        let RealDesignTemplateMappingValue = this.props.Login.masterData.RealDesignTemplateMappingValue && this.props.Login.masterData.RealDesignTemplateMappingValue\r\n        let RealApprovalConfigVersionValue = this.props.Login.masterData.RealApprovalConfigVersionValue && this.props.Login.masterData.RealApprovalConfigVersionValue\r\n        let activeSampleTab = this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\";\r\n        let activeSubSampleTab = this.props.Login.activeSubSampleTab || \"IDS_SUBSAMPLEATTACHMENTS\";\r\n        let activeTestTab = this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\";\r\n\r\n        let SampleTypeValue = RealSampleTypeValue\r\n        let RegTypeValue = RealRegTypeValue\r\n        let RegSubTypeValue = RealRegSubTypeValue\r\n        let FilterStatusValue = RealFilterStatusValue\r\n        let DesignTemplateMappingValue = RealDesignTemplateMappingValue\r\n        let ApprovalConfigVersionValue = RealApprovalConfigVersionValue\r\n        // let FromDate = this.props.Login.masterData.FromDate\r\n        // let ToDate = this.props.Login.masterData.ToDate\r\n        const FromDate = rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.FromDate);\r\n        const ToDate = rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.ToDate);\r\n        let masterData = {\r\n            ...this.props.Login.masterData, RealSampleTypeValue, RealRegTypeValue, RealRegSubTypeValue, FromDate, ToDate,\r\n            RealFilterStatusValue, RealFromDate, RealToDate, SampleTypeValue, RegTypeValue,\r\n            RegSubTypeValue, FilterStatusValue, DesignTemplateMappingValue, RealDesignTemplateMappingValue, RealApprovalConfigVersionValue\r\n        }\r\n        let inputData = {\r\n            npreregno: \"\",\r\n            nsampletypecode: this.props.Login.masterData.RealSampleTypeValue && this.props.Login.masterData.RealSampleTypeValue.nsampletypecode,\r\n            nregtypecode: this.props.Login.masterData.RealRegTypeValue && this.props.Login.masterData.RealRegTypeValue.nregtypecode,\r\n            nregsubtypecode: this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode,\r\n            nfilterstatus: this.props.Login.masterData.RealFilterStatusValue && this.props.Login.masterData.RealFilterStatusValue.ntransactionstatus,\r\n            userinfo: this.props.Login.userInfo, activeSampleTab, activeTestTab, activeSubSampleTab,\r\n            flag: 1,\r\n            nneedtemplatebasedflow: this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue.nneedtemplatebasedflow,\r\n            ndesigntemplatemappingcode: this.props.Login.masterData.RealDesignTemplateMappingValue\r\n                && this.props.Login.masterData.RealDesignTemplateMappingValue.ndesigntemplatemappingcode,\r\n            napproveconfversioncode: this.props.Login.masterData.RealApprovalConfigVersionValue\r\n                && this.props.Login.masterData.RealApprovalConfigVersionValue.napproveconfversioncode,\r\n            nneedsubsample: this.props.Login.masterData.RegSubTypeValue\r\n                && this.props.Login.masterData.RegSubTypeValue.nneedsubsample,\r\n            //checkBoxOperation: 3,\r\n            checkBoxOperation: checkBoxOperation.SINGLESELECT,\r\n            noutsourcerequired: RealSampleTypeValue && RealSampleTypeValue.noutsourcerequired\r\n        }\r\n        if (inputData.nsampletypecode) {\r\n            // let obj = this.covertDatetoString(this.props.Login.masterData.RealFromDate, this.props.Login.masterData.RealToDate)\r\n            inputData['FromDate'] = obj.fromDate;\r\n            inputData['ToDate'] = obj.toDate;\r\n\r\n            let inputParam = { masterData, inputData, searchSubSampleRef: this.searchSubSampleRef, searchSampleRef: this.searchSampleRef, searchTestRef: this.searchTestRef, selectedFilter: this.state.selectedFilter }\r\n            this.props.ReloadData(inputParam);\r\n        }\r\n        else {\r\n            toast.info(this.props.intl.formatMessage({ id: \"IDS_PLSSELECTALLTHEVALUEINFILTER\" }));\r\n        }\r\n    }\r\n\r\n    onFilterSubmit = () => {\r\n        const RealFromDate = rearrangeDateFormat(this.props.Login.userInfo, this.state.selectedFilter.fromdate || this.props.Login.masterData.FromDate);\r\n        const RealToDate = rearrangeDateFormat(this.props.Login.userInfo, this.state.selectedFilter.todate || this.props.Login.masterData.ToDate)\r\n        let RealSampleTypeValue = this.props.Login.masterData.SampleTypeValue && this.props.Login.masterData.SampleTypeValue\r\n        let RealRegTypeValue = this.props.Login.masterData.RegTypeValue && this.props.Login.masterData.RegTypeValue\r\n        let RealRegSubTypeValue = this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue\r\n        let RealFilterStatusValue = this.props.Login.masterData.FilterStatusValue && this.props.Login.masterData.FilterStatusValue\r\n        let RealDesignTemplateMappingValue = this.props.Login.masterData.DesignTemplateMappingValue && this.props.Login.masterData.DesignTemplateMappingValue\r\n        //let RealApprovalConfigVersionValue = this.props.Login.masterData.RealApprovalConfigVersionValue && this.props.Login.masterData.RealApprovalConfigVersionValue\r\n        //ALPD-1166\r\n        let RealApprovalConfigVersionValue = this.props.Login.masterData.ApprovalConfigVersionValue && this.props.Login.masterData.ApprovalConfigVersionValue\r\n        let RealSampleTypeList = this.props.Login.masterData.SampleType || []\r\n        let RealRegTypeList = this.props.Login.masterData.RegistrationType || []\r\n        let RealRegSubTypeList = this.props.Login.masterData.RegistrationSubType || []\r\n        let RealFilterStatuslist = this.props.Login.masterData.FilterStatus || []\r\n        let RealDesignTemplateMappingList = this.props.Login.masterData.DesignTemplateMapping || []\r\n        let RealApprovalConfigVersionList = this.props.Login.masterData.ApprovalConfigVersion || []\r\n\r\n        let activeSampleTab = this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\";\r\n        let activeSubSampleTab = this.props.Login.activeSubSampleTab || \"IDS_SUBSAMPLEATTACHMENTS\";\r\n\r\n        let activeTestTab = this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\";\r\n        let masterData = {\r\n            ...this.props.Login.masterData, RealSampleTypeValue, RealRegTypeValue, RealRegSubTypeValue,\r\n            RealFilterStatusValue, RealFromDate, RealToDate, RealDesignTemplateMappingValue, RealApprovalConfigVersionValue,\r\n            RealSampleTypeList, RealRegTypeList, RealRegSubTypeList, RealDesignTemplateMappingList, RealApprovalConfigVersionList,\r\n            RealFilterStatuslist\r\n        }\r\n        let inputData = {\r\n            npreregno: \"\",\r\n            nsampletypecode: this.props.Login.masterData.SampleTypeValue && this.props.Login.masterData.SampleTypeValue.nsampletypecode,\r\n            nregtypecode: this.props.Login.masterData.RegTypeValue && this.props.Login.masterData.RegTypeValue.nregtypecode,\r\n            nregsubtypecode: this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nregsubtypecode,\r\n            nfilterstatus: this.props.Login.masterData.FilterStatusValue && this.props.Login.masterData.FilterStatusValue.ntransactionstatus,\r\n            userinfo: this.props.Login.userInfo, activeSampleTab, activeTestTab, activeSubSampleTab,\r\n            nneedtemplatebasedflow: this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nneedtemplatebasedflow,\r\n            napproveconfversioncode: this.props.Login.masterData.ApprovalConfigVersion\r\n                && this.props.Login.masterData.ApprovalConfigVersionValue.napproveconfversioncode,\r\n            ndesigntemplatemappingcode: this.props.Login.masterData.DesignTemplateMappingValue\r\n                && this.props.Login.masterData.DesignTemplateMappingValue.ndesigntemplatemappingcode,\r\n            nneedtemplatebasedflow: this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nneedtemplatebasedflow,\r\n            nneedsubsample: this.props.Login.masterData.RegSubTypeValue\r\n                && this.props.Login.masterData.RegSubTypeValue.nneedsubsample,\r\n           // checkBoxOperation: 3,\r\n            checkBoxOperation: checkBoxOperation.SINGLESELECT,  \r\n            noutsourcerequired: RealSampleTypeValue && RealSampleTypeValue.noutsourcerequired\r\n        }\r\n\r\n        if (inputData.nsampletypecode) {\r\n            if (inputData.ndesigntemplatemappingcode) {\r\n                const obj = convertDateValuetoString(this.state.selectedFilter.fromdate || this.props.Login.masterData.FromDate,\r\n                    this.state.selectedFilter.todate || this.props.Login.masterData.ToDate, this.props.Login.userInfo)\r\n                inputData['FromDate'] = obj.fromDate;\r\n                inputData['ToDate'] = obj.toDate;\r\n                const selectedFilter = {};\r\n                selectedFilter[\"fromdate\"] = RealFromDate;\r\n                selectedFilter[\"todate\"] = RealToDate;\r\n                const inputParam = {\r\n                    masterData, inputData, searchSubSampleRef: this.searchSubSampleRef,\r\n                    searchSampleRef: this.searchSampleRef,\r\n                    searchTestRef: this.searchTestRef, selectedFilter\r\n                }\r\n                this.props.getRegistrationSample(inputParam);\r\n            } else {\r\n                toast.info(this.props.intl.formatMessage({ id: \"IDS_PLSSCONFIGREGISTRATIONTEMPLATE\" }));\r\n            }\r\n        }\r\n        else {\r\n            toast.info(this.props.intl.formatMessage({ id: \"IDS_PLSSELECTALLTHEVALUEINFILTER\" }));\r\n        }\r\n    }\r\n\r\n    getActiveTestURL() {\r\n\r\n        let url = \"resultentrybysample/getTestbasedParameter\"\r\n        switch (this.props.Login.activeTestTab) {\r\n\r\n            case \"IDS_PARAMETERRESULTS\":\r\n                //url = \"resultentrybysample/getTestbasedParameter\";\r\n                url = \"registration/getregistrationparameter\";\r\n                break;\r\n            case \"IDS_TESTCOMMENTS\":\r\n                url = \"comments/getTestComment\";\r\n                break;\r\n            case \"IDS_TESTATTACHMENTS\":\r\n                url = \"attachment/getTestAttachment\"\r\n                break;\r\n            default:\r\n                url = \"registration/getregistrationparameter\";\r\n                // url = \"resultentrybysample/getTestbasedParameter\";\r\n                break;\r\n        }\r\n        return url;\r\n    }\r\n\r\n\r\n    paneSizeChange = (d) => {\r\n        this.setState({\r\n            // splitChangeWidthPercentage: d\r\n        })\r\n    }\r\n\r\n    verticalPaneSizeChange = (val) => {\r\n        if (this.state.enableAutoHeight) {\r\n            this.setState({\r\n                initialVerticalWidth: val - 150\r\n            })\r\n        }\r\n    }\r\n\r\n    changeSplitterOption = () => {\r\n        this.setState({\r\n            enableAutoHeight: !this.state.enableAutoHeight,\r\n            initialVerticalWidth: \"57vh\"\r\n\r\n        })\r\n    }\r\n\r\n    sideNavDetail = (screenName//, sampleGridSkip\r\n    ) => {\r\n        let testList = this.props.Login.masterData.RegistrationGetTest || [];\r\n        let { testskip, testtake } = this.state\r\n        testList = testList.slice(testskip, testskip + testtake);\r\n        let selectedTestList = getSameRecordFromTwoArrays(testList, this.props.Login.masterData.selectedTest, \"ntransactiontestcode\");\r\n        let ntransactiontestcode = this.props.Login.masterData.selectedTest ? this.props.Login.masterData.selectedTest.map(test => test.ntransactiontestcode).join(\",\") : \"-1\";\r\n        return (\r\n            screenName == \"IDS_PARAMETERRESULTS\" \r\n            //&& this.props.Login.masterData.RealSampleTypeValue && this.props.Login.masterData.RealSampleTypeValue.nsampletypecode !== SampleType.CLINICALTYPE \r\n              ?  <RegistrationResultTab\r\n                    userInfo={this.props.Login.userInfo}\r\n                    genericLabel={this.props.Login.genericLabel}\r\n                    masterData={this.props.Login.masterData}\r\n                    inputParam={this.props.Login.inputParam}\r\n                    dataState={this.state.resultDataState}\r\n                    dataStateChange={this.testDataStateChange}\r\n                    screenName=\"IDS_PARAMETERRESULTS\"\r\n                    controlMap={this.state.controlMap}\r\n                    userRoleControlRights={this.state.userRoleControlRights}\r\n                />\r\n                :\r\n                screenName == \"IDS_ATTACHMENTS\" ?\r\n                    <CustomTabs activeKey={this.props.Login.activeTestTab || \"IDS_TESTATTACHMENTS\"} tabDetail={this.attachmentTabDetail()} destroyInactiveTabPane={true} onTabChange={this.onTabChange} />\r\n                    : screenName == \"IDS_COMMENTS\" ?\r\n                        <CustomTabs activeKey={this.props.Login.activeTestTab || \"IDS_TESTCOMMENTS\"} tabDetail={this.commentTabDetail()} destroyInactiveTabPane={true} onTabChange={this.onTabChange} />\r\n                        : screenName == \"IDS_SAMPLEDETAILS\" ?\r\n                            this.props.Login.masterData.selectedSample && this.props.Login.masterData.selectedSample.length === 1 ?\r\n                                <SampleInfoView\r\n                                    data={(this.props.Login.masterData.selectedSample && this.props.Login.masterData.selectedSample.length > 0) ?\r\n                                        this.props.Login.masterData.selectedSample[this.props.Login.masterData.selectedSample.length - 1] : {}}\r\n                                    SingleItem={this.props.Login.masterData.selectedSample && this.props.Login.masterData.selectedSample ?\r\n                                        this.state.SingleItem : []}\r\n                                    screenName=\"IDS_SAMPLEINFO\"\r\n                                    userInfo={this.props.Login.userInfo}\r\n                                    viewFile={this.viewFile}\r\n\r\n                                />\r\n                                :\r\n                                <SampleGridTab\r\n                                    userInfo={this.props.Login.masterData.userInfo || {}}\r\n                                    GridData={this.props.Login.masterData.selectedSample || []}\r\n                                    masterData={this.props.Login.masterData}\r\n                                    inputParam={this.props.Login.inputParam}\r\n                                    //dataState={sampleGridSkip === 0 ? {...this.state.sampleGridDataState, skip:0} : this.state.sampleGridDataState}\r\n                                    dataState={this.state.sampleGridDataState}\r\n                                    dataStateChange={this.sampleInfoDataStateChange}\r\n                                    extractedColumnList={this.gridfillingColumn(this.state.DynamicGridItem) || []}\r\n                                    detailedFieldList={this.gridfillingColumn(this.state.DynamicGridMoreField) || []}\r\n                                    primaryKeyField={\"npreregno\"}\r\n                                    expandField=\"expanded\"\r\n                                    screenName=\"IDS_SAMPLEINFO\"\r\n                                    viewFile={this.viewFile}\r\n                                //jsonField={\"jsondata\"}\r\n                                />\r\n                            :\r\n                            screenName == \"IDS_OUTSOURCEDETAILS\" ?\r\n                                <CustomTabs activeKey={this.props.Login.activeTestTab || \"IDS_OUTSOURCE\"} tabDetail={this.outSourceTabDetail()} destroyInactiveTabPane={true} onTabChange={this.onTabChange} />\r\n                                : \"\"\r\n        )\r\n    }\r\n\r\n    requiredExternalOrderAttachment = [\r\n        { \"idsName\": \"IDS_ARNO\", \"dataField\": \"sarno\", \"width\": \"200px\" },\r\n        { \"idsName\": \"IDS_RELEASENO\", \"dataField\": \"sreleaseno\", \"width\": \"200px\" },\r\n        { \"idsName\": \"IDS_VERSIONNO\", \"dataField\": \"nversionno\", \"width\": \"200px\" },\r\n        { \"idsName\": \"IDS_EXTERNALORDERID\", \"dataField\": \"sexternalorderid\", \"width\": \"200px\" },\r\n        { \"idsName\": \"IDS_REPORTEDSITE\", \"dataField\": \"ssitename\", \"width\": \"200px\" },\r\n        { \"idsName\": \"IDS_REPORTEDDATE\", \"dataField\": \"sreleasedate\", \"width\": \"200px\" },\r\n        { \"idsName\": \"IDS_REPORTEDUSER\", \"dataField\": \"susername\", \"width\": \"200px\" }\r\n    ];\r\n\r\n    requiredOutsourceDetails = [\r\n        { \"idsName\": \"IDS_ARNO\", \"dataField\": \"sarno\", \"width\": \"200px\" },\r\n        { \"idsName\": \"IDS_SAMPLEARNO\", \"dataField\": \"ssamplearno\", \"width\": \"200px\" },\r\n        { \"idsName\": \"IDS_SAMPLEID\", \"dataField\": \"ssampleid\", \"width\": \"200px\" },\r\n        { \"idsName\": \"IDS_TOSITE\", \"dataField\": \"ssourcesitename\", \"width\": \"200px\" },\r\n        { \"idsName\": \"IDS_TESTSYNONYM\", \"dataField\": \"stestsynonym\", \"width\": \"200px\" },\r\n        { \"idsName\": \"IDS_OUTSOURCEDATE\", \"dataField\": \"soutsourcedate\", \"width\": \"200px\" },\r\n        { \"idsName\": \"IDS_REMARKS\", \"dataField\": \"sremarks\", \"width\": \"200px\" },\r\n        { \"idsName\": \"IDS_SHIPMENTTRACKING\", \"dataField\": \"sshipmenttracking\", \"width\": \"200px\" }\r\n    ];\r\n\r\n    attachmentTabDetail = () => {\r\n        const attachmentTabMap = new Map();\r\n        let testList = this.props.Login.masterData.RegistrationGetTest || [];\r\n        let { testskip, testtake, subsampleskip, subsampletake, skip, take } = this.state\r\n        testList = testList.slice(testskip, testskip + testtake);\r\n        let subsampleList = this.props.Login.masterData.RegistrationGetSubSample || [];\r\n        subsampleList = subsampleList.slice(subsampleskip, subsampleskip + subsampletake);\r\n        let sampleList = this.props.Login.masterData.RegistrationGetSample || [];\r\n        sampleList = sampleList.slice(skip, skip + take);\r\n\r\n        attachmentTabMap.set(\"IDS_TESTATTACHMENTS\", <Attachments\r\n            screenName=\"IDS_TESTATTACHMENTS\"\r\n            tabSequence={SideBarSeqno.TEST}\r\n            selectedMaster=\"selectedTest\"\r\n            onSaveClick={this.onAttachmentSaveClick}\r\n            controlMap={this.state.controlMap}\r\n            userRoleControlRights={this.state.userRoleControlRights}\r\n            masterList={getSameRecordFromTwoArrays(testList || [], this.props.Login.masterData.selectedTest, \"ntransactiontestcode\")}\r\n            masterAlertStatus={\"IDS_SELECTTESTTOADDATTACHEMENT\"}\r\n            attachments={this.props.Login.masterData.RegistrationTestAttachment || []}\r\n            deleteRecord={this.props.deleteAttachment}\r\n            fetchRecord={this.props.getAttachmentCombo}\r\n            addName={\"AddTestAttachment\"}\r\n            editName={\"EditTestAttachment\"}\r\n            deleteName={\"DeleteTestAttachment\"}\r\n            viewName={\"ViewTestAttachment\"}\r\n            methodUrl={\"TestAttachment\"}\r\n            dataState={this.state.testAttachmentDataState}\r\n            dataStateChange={this.testDataStateChange}\r\n            //added by neeraj for ALPD-1311\r\n            nsubsampleneed={this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample}\r\n            userInfo={this.props.Login.userInfo}\r\n            deleteParam={\r\n                {\r\n                    methodUrl: \"TestAttachment\",\r\n                    ntransactiontestcode: this.props.Login.masterData.selectedTest ? this.props.Login.masterData.selectedTest.map(test => test.ntransactiontestcode).join(\",\") : \"-1\",\r\n                    userInfo: this.props.Login.userInfo,\r\n                    masterData: this.props.Login.masterData,\r\n                    esignRights: this.props.Login.userRoleControlRights,\r\n                    screenName: \"IDS_TESTATTACHMENTS\"\r\n\r\n                }\r\n            }\r\n            editParam={{\r\n                methodUrl: \"TestAttachment\",\r\n                ntransactiontestcode: this.props.Login.masterData.selectedTest ? this.props.Login.masterData.selectedTest.map(test => test.ntransactiontestcode).join(\",\") : \"-1\",\r\n                userInfo: this.props.Login.userInfo,\r\n                masterData: this.props.Login.masterData,\r\n                esignRights: this.props.Login.userRoleControlRights,\r\n                screenName: \"IDS_TESTATTACHMENTS\",\r\n                masterList: this.props.Login.masterData.selectedTest\r\n            }}\r\n            selectedListName=\"IDS_TESTS\"\r\n            displayName=\"stestsynonym\"\r\n            isneedHeader={true}\r\n        />)\r\n        this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample &&\r\n            attachmentTabMap.set(\"IDS_SUBSAMPLEATTACHMENTS\", <Attachments\r\n                screenName=\"IDS_SUBSAMPLEATTACHMENTS\"\r\n                tabSequence={SideBarSeqno.SUBSAMPLE}\r\n                onSaveClick={this.onAttachmentSaveClick}\r\n                selectedMaster=\"selectedSubSample\"\r\n                controlMap={this.state.controlMap}\r\n                userRoleControlRights={this.state.userRoleControlRights}\r\n                attachments={this.props.Login.masterData.RegistrationSampleAttachment || []}\r\n                deleteRecord={this.props.deleteAttachment}\r\n                masterList={getSameRecordFromTwoArrays(subsampleList || [], this.props.Login.masterData.selectedSubSample, \"ntransactionsamplecode\")}\r\n                masterAlertStatus={\"IDS_SELECTSUBSAMPLETOADDATTACHMENT\"}\r\n                fetchRecord={this.props.getAttachmentCombo}\r\n                viewFile={this.props.viewAttachment}\r\n                addName={\"AddSubSampleAttachment\"}\r\n                editName={\"EditSubSampleAttachment\"}\r\n                deleteName={\"DeleteSubSampleAttachment\"}\r\n                viewName={\"ViewSubSampleAttachment\"}\r\n                methodUrl={\"SubSampleAttachment\"}\r\n                skip={this.props.Login.inputParam ? this.props.Login.inputParam.attachmentskip || 0 : 0}\r\n                take={this.props.Login.inputParam ? this.props.Login.inputParam.attachmenttake || 10 : this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5}\r\n                userInfo={this.props.Login.userInfo}\r\n                deleteParam={\r\n                    {\r\n                        methodUrl: \"SubSampleAttachment\",\r\n                        ntransactionsamplecode:\r\n                            this.props.Login.masterData.selectedSubSample ? this.props.Login.masterData.selectedSubSample.map(sample => sample.ntransactionsamplecode).join(\",\") : '-1',\r\n                        userInfo: this.props.Login.userInfo,\r\n                        masterData: this.props.Login.masterData,\r\n                        esignRights: this.props.Login.userRoleControlRights\r\n                    }\r\n                }\r\n                editParam={{\r\n                    methodUrl: \"SubSampleAttachment\",\r\n                    ntransactionsamplecode: this.props.Login.masterData.selectedSubSample ? this.props.Login.masterData.selectedSubSample.map(sample => sample.ntransactionsamplecode).join(\",\") : '-1',\r\n                    userInfo: this.props.Login.userInfo,\r\n                    masterData: this.props.Login.masterData,\r\n                    esignRights: this.props.Login.userRoleControlRights,\r\n                    masterList: this.props.Login.masterData.RegistrationGetSubSample || []\r\n\r\n                }}\r\n                selectedListName=\"IDS_SUBSAMPLE\"\r\n                displayName=\"ssamplearno\"\r\n                isneedHeader={true}\r\n            />)\r\n        attachmentTabMap.set(\"IDS_SAMPLEATTACHMENTS\",\r\n            <Attachments\r\n                screenName=\"IDS_SAMPLEATTACHMENTS\"\r\n                tabSequence={SideBarSeqno.SAMPLE}\r\n                onSaveClick={this.onAttachmentSaveClick}\r\n                selectedMaster=\"selectedSample\"\r\n                controlMap={this.state.controlMap}\r\n                userRoleControlRights={this.state.userRoleControlRights}\r\n                attachments={this.props.Login.masterData.RegistrationAttachment || []}\r\n                deleteRecord={this.props.deleteAttachment}\r\n                masterList={getSameRecordFromTwoArrays(sampleList || [], this.props.Login.masterData.selectedSample, \"npreregno\")}\r\n                masterAlertStatus={\"IDS_SELECTSAMPLETOADDATTACHMENT\"}\r\n                fetchRecord={this.props.getAttachmentCombo}\r\n                viewFile={this.props.viewAttachment}\r\n                addName={\"AddSampleAttachment\"}\r\n                editName={\"EditSampleAttachment\"}\r\n                deleteName={\"DeleteSampleAttachment\"}\r\n                viewName={\"ViewSampleAttachment\"}\r\n                methodUrl={\"SampleAttachment\"}\r\n                userInfo={this.props.Login.userInfo}\r\n                skip={this.props.Login.inputParam ? this.props.Login.inputParam.attachmentskip || 0 : 0}\r\n                take={this.props.Login.inputParam ? this.props.Login.inputParam.attachmenttake || 10 : this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5}\r\n                deleteParam={\r\n                    {\r\n                        methodUrl: \"SampleAttachment\",\r\n                        npreregno: this.props.Login.masterData.selectedSample ? this.props.Login.masterData.selectedSample.map(sample => sample.npreregno).join(\",\") : \"-1\",\r\n                        userInfo: this.props.Login.userInfo,\r\n                        masterData: this.props.Login.masterData,\r\n                        esignRights: this.props.Login.userRoleControlRights\r\n                    }\r\n                }\r\n                editParam={{\r\n                    methodUrl: \"SampleAttachment\",\r\n                    npreregno: this.props.Login.masterData.selectedSample ? this.props.Login.masterData.selectedSample.map(sample => sample.npreregno).join(\",\") : \"-1\",\r\n                    userInfo: this.props.Login.userInfo,\r\n                    masterData: this.props.Login.masterData,\r\n                    esignRights: this.props.Login.userRoleControlRights,\r\n                    masterList: this.props.Login.masterData.RegistrationGetSample || []\r\n\r\n                }}\r\n                selectedListName=\"IDS_SAMPLE\"\r\n                displayName=\"sarno\"\r\n                isneedHeader={true}\r\n            />)\r\n        return attachmentTabMap;\r\n    }\r\n\r\n    commentTabDetail = () => {\r\n        const commentTabMap = new Map();\r\n        let testList = this.props.Login.masterData.RegistrationGetTest || [];\r\n        let { testskip, testtake } = this.state\r\n        testList = testList.slice(testskip, testskip + testtake);\r\n        let selectedTestList = getSameRecordFromTwoArrays(testList, this.props.Login.masterData.selectedTest, \"ntransactiontestcode\");\r\n        let ntransactiontestcode = this.props.Login.masterData.selectedTest ? this.props.Login.masterData.selectedTest.map(test => test.ntransactiontestcode).join(\",\") : \"-1\";\r\n        let sampleList = this.props.Login.masterData.RegistrationGetSample || [];\r\n        let npreregno = this.props.Login.masterData.selectedSample ? this.props.Login.masterData.selectedSample.map(sample => sample.npreregno).join(\",\") : \"-1\";\r\n        let { skip, take } = this.state\r\n        sampleList = sampleList.slice(skip, skip + take);\r\n        let selectedSampleList = getSameRecordFromTwoArrays(sampleList, this.props.Login.masterData.selectedSample, \"npreregno\");\r\n        let ntransactionsamplecode = this.props.Login.masterData.selectedSubSample ?\r\n            this.props.Login.masterData.selectedSubSample.map(sample => sample.ntransactionsamplecode).join(\",\") : \"-1\";\r\n        let subsampleList = this.props.Login.masterData.RegistrationGetSubSample || [];\r\n        let { subsampleskip, subsampletake } = this.state\r\n        subsampleList = subsampleList.slice(subsampleskip, subsampleskip + subsampletake);\r\n        let selectedSubSampleList = getSameRecordFromTwoArrays(subsampleList, this.props.Login.masterData.selectedSubSample, \"ntransactionsamplecode\");\r\n\r\n\r\n        commentTabMap.set(\"IDS_TESTCOMMENTS\", <Comments\r\n            screenName=\"IDS_TESTCOMMENTS\"\r\n            masterData={this.props.Login.masterData}\r\n            tabSequence={SideBarSeqno.TEST}\r\n            onSaveClick={this.onCommentsSaveClick}\r\n            selectedMaster=\"selectedTest\"\r\n            controlMap={this.state.controlMap}\r\n            userRoleControlRights={this.state.userRoleControlRights}\r\n            Comments={this.props.Login.masterData.RegistrationTestComment || []}\r\n            fetchRecord={this.props.getCommentsCombo}\r\n            addName={\"AddTestComment\"}\r\n            editName={\"EditTestComment\"}\r\n            deleteName={\"DeleteTestComment\"}\r\n            methodUrl={\"TestComment\"}\r\n            isTestComment={false}\r\n            masterList={getSameRecordFromTwoArrays(testList, this.props.Login.masterData.selectedTest, \"ntransactiontestcode\")}\r\n            masterAlertStatus=\"IDS_SELECTTESTTOADDCOMMENTS\"\r\n            primaryKeyField={\"ntestcommentcode\"}\r\n            dataState={this.state.testCommentDataState}\r\n            dataStateChange={this.testDataStateChange}\r\n            deleteParam={\r\n                {\r\n                    methodUrl: \"TestComment\",\r\n                    ntransactiontestcode: this.props.Login.masterData.selectedTest ? this.props.Login.masterData.selectedTest.map(test => test.ntransactiontestcode).join(\",\") : \"-1\",\r\n                    userInfo: this.props.Login.userInfo,\r\n                    masterData: this.props.Login.masterData,\r\n                    esignRights: this.props.Login.userRoleControlRights,\r\n                    screenName: \"IDS_TESTCOMMENTS\"\r\n\r\n                }\r\n            }\r\n            editParam={{\r\n                methodUrl: \"TestComment\",\r\n                ntransactiontestcode: this.props.Login.masterData.selectedTest ? this.props.Login.masterData.selectedTest.map(test => test.ntransactiontestcode).join(\",\") : \"-1\",\r\n                userInfo: this.props.Login.userInfo,\r\n                masterData: this.props.Login.masterData,\r\n                esignRights: this.props.Login.userRoleControlRights,\r\n                screenName: \"IDS_TESTCOMMENTS\",\r\n                operation: \"update\",\r\n                masterList: this.props.Login.masterData.RegistrationGetSample || [],\r\n                ncontrolCode: this.state.controlMap.has(\"EditTestComment\") && this.state.controlMap.get(\"EditTestComment\").ncontrolcode\r\n            }}\r\n            selectedListName=\"IDS_TESTS\"\r\n            displayName=\"stestsynonym\"\r\n            selectedId={this.props.Login.selectedId || null}\r\n        />)\r\n        this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample &&\r\n            commentTabMap.set(\"IDS_SUBSAMPLECOMMENTS\", <Comments\r\n                screenName=\"IDS_SUBSAMPLECOMMENTS\"\r\n                masterData={this.props.Login.masterData}\r\n                tabSequence={SideBarSeqno.SUBSAMPLE}\r\n                onSaveClick={this.onCommentsSaveClick}\r\n                selectedMaster=\"selectedSubSample\"\r\n                controlMap={this.state.controlMap}\r\n                userRoleControlRights={this.state.userRoleControlRights}\r\n                Comments={this.props.Login.masterData.RegistrationSampleComment || []}\r\n                fetchRecord={this.props.getCommentsCombo}\r\n                addName={\"AddSubSampleComment\"}\r\n                editName={\"EditSubSampleComment\"}\r\n                deleteName={\"DeleteSubSampleComment\"}\r\n                methodUrl={\"SubSampleComment\"}\r\n                isTestComment={false}\r\n                masterList={selectedSubSampleList}\r\n                masterAlertStatus=\"IDS_SELECTSUBSAMPLETOADDCOMMENTS\"\r\n                primaryKeyField={\"nsamplecommentcode\"}\r\n                dataState={this.state.subSampleCommentDataState}\r\n                dataStateChange={this.subSampledataStateChange}\r\n                deleteParam={\r\n                    {\r\n                        methodUrl: \"SubSampleComment\",\r\n                        ntransactionsamplecode,\r\n                        userInfo: this.props.Login.userInfo,\r\n                        masterData: this.props.Login.masterData,\r\n                        esignRights: this.props.Login.userRoleControlRights,\r\n                        screenName: \"IDS_SUBSAMPLECOMMENTS\"\r\n\r\n                    }\r\n                }\r\n                editParam={{\r\n                    methodUrl: \"SubSampleComment\",\r\n                    ntransactionsamplecode,\r\n                    userInfo: this.props.Login.userInfo,\r\n                    masterData: this.props.Login.masterData,\r\n                    esignRights: this.props.Login.userRoleControlRights,\r\n                    screenName: \"IDS_SUBSAMPLECOMMENTS\",\r\n                    operation: \"update\",\r\n                    masterList: this.props.Login.masterData.RegistrationGetSubSample || [],\r\n                    ncontrolCode: this.state.controlMap.has(\"EditSubSampleComment\") && this.state.controlMap.get(\"EditSubSampleComment\").ncontrolcode\r\n                }}\r\n                selectedListName=\"IDS_SUBSAMPLES\"\r\n                displayName=\"ssamplearno\"\r\n                selectedId={this.props.Login.selectedId || null}\r\n            />)\r\n        commentTabMap.set(\"IDS_SAMPLECOMMENTS\", <Comments\r\n            screenName=\"IDS_SAMPLECOMMENTS\"\r\n            masterData={this.props.Login.masterData}\r\n            tabSequence={SideBarSeqno.SAMPLE}\r\n            onSaveClick={this.onCommentsSaveClick}\r\n            selectedMaster=\"selectedSample\"\r\n            controlMap={this.state.controlMap}\r\n            userRoleControlRights={this.state.userRoleControlRights}\r\n            Comments={this.props.Login.masterData.RegistrationComment || []}\r\n            fetchRecord={this.props.getCommentsCombo}\r\n            addName={\"AddSampleComment\"}\r\n            editName={\"EditSampleComment\"}\r\n            deleteName={\"DeleteSampleComment\"}\r\n            methodUrl={\"SampleComment\"}\r\n            isTestComment={false}\r\n            masterList={selectedSampleList}\r\n            masterAlertStatus=\"IDS_SELECTSAMPLETOADDCOMMENTS\"\r\n            primaryKeyField={\"nregcommentcode\"}\r\n            dataState={this.state.sampleCommentDataState}\r\n            dataStateChange={this.dataStateChange}\r\n            deleteParam={\r\n                {\r\n                    methodUrl: \"SampleComment\",\r\n                    npreregno,\r\n                    userInfo: this.props.Login.userInfo,\r\n                    masterData: this.props.Login.masterData,\r\n                    esignRights: this.props.Login.userRoleControlRights,\r\n                    screenName: \"IDS_SAMPLECOMMENTS\"\r\n\r\n                }\r\n            }\r\n            editParam={{\r\n                methodUrl: \"SampleComment\",\r\n                npreregno,\r\n                userInfo: this.props.Login.userInfo,\r\n                masterData: this.props.Login.masterData,\r\n                esignRights: this.props.Login.userRoleControlRights,\r\n                screenName: \"IDS_SAMPLECOMMENTS\",\r\n                operation: \"update\",\r\n                masterList: this.props.Login.masterData.RegistrationGetSample || [],\r\n                ncontrolCode: this.state.controlMap.has(\"EditSampleComment\") && this.state.controlMap.get(\"EditSampleComment\").ncontrolcode\r\n            }}\r\n            selectedListName=\"IDS_SAMPLES\"\r\n            displayName=\"sarno\"\r\n            selectedId={this.props.Login.selectedId || null}\r\n        />)\r\n\r\n        return commentTabMap;\r\n    }\r\n\r\n    outSourceTabDetail = () => {\r\n        const outSourceTabMap = new Map();\r\n        outSourceTabMap.set(\"IDS_OUTSOURCEDETAILS\", <DataGrid\r\n            primaryKeyField=\"noutsourcedetailcode\"\r\n            screenName=\"IDS_OUTSOURCEDETAILS\"\r\n            tabSequence={SideBarSeqno.SUBSAMPLE}\r\n            data={this.props.Login.masterData.OutsourceDetailsList || []}\r\n            dataResult={process(this.props.Login.masterData.OutsourceDetailsList && this.props.Login.masterData.OutsourceDetailsList || [], this.state.outsourceDetailsDataState)}\r\n            dataState={this.state.outsourceDetailsDataState}\r\n            isExportExcelRequired={false}\r\n            controlMap={this.state.controlMap}\r\n            userRoleControlRights={this.state.userRoleControlRights}\r\n            extractedColumnList={this.requiredOutsourceDetails}\r\n            pageable={true}\r\n            dataStateChange={this.outsourceDataStateChange}\r\n            scrollable={'scrollable'}\r\n            gridHeight={'350px'}\r\n            isActionRequired={false}\r\n            selectedId={null}\r\n        />\r\n        )\r\n        outSourceTabMap.set(\"IDS_EXTERNALORDERREPORTS\", <DataGrid\r\n            primaryKeyField=\"nreleaseoutsourceattachcode\"\r\n            screenName=\"IDS_EXTERNALORDERREPORTS\"\r\n            tabSequence={SideBarSeqno.SAMPLE}\r\n            data={this.props.Login.masterData.ExternalOrderAttachmentList || []}\r\n            dataResult={process(this.props.Login.masterData.ExternalOrderAttachmentList && this.props.Login.masterData.ExternalOrderAttachmentList || [], this.state.externalOrderAttachmentDataState)}\r\n            dataState={this.state.externalOrderAttachmentDataState}\r\n            isExportExcelRequired={false}\r\n            controlMap={this.state.controlMap}\r\n            userRoleControlRights={this.state.userRoleControlRights}\r\n            extractedColumnList={this.requiredExternalOrderAttachment}\r\n            selectedId={null}\r\n            pageable={true}\r\n            dataStateChange={this.outsourceDataStateChange}\r\n            scrollable={'scrollable'}\r\n            gridHeight={'350px'}\r\n            isActionRequired={true}\r\n            methodUrl={'ExternalOrderAttachment'}\r\n            viewDownloadFile={this.viewExternalOrderAttachmentFile}\r\n        />)\r\n        return outSourceTabMap;\r\n    }\r\n\r\n    onTabChange = (tabProps) => {\r\n        const activeTestTab = tabProps.screenName;\r\n        const tabseqno = tabProps.tabSequence;\r\n        if (tabseqno === SideBarSeqno.TEST) {\r\n            let inputData = {\r\n                masterData: this.props.Login.masterData,\r\n                selectedTest: this.props.Login.masterData.selectedTest,\r\n                ntransactiontestcode: this.props.Login.masterData.selectedTest ?\r\n                    String(this.props.Login.masterData.selectedTest.map(item => item.ntransactiontestcode).join(\",\")) : \"-1\",\r\n                npreregno: this.props.Login.masterData.selectedSample ?\r\n                    this.props.Login.masterData.selectedSample.map(item => item.npreregno).join(\",\") : \"-1\",\r\n                userinfo: this.props.Login.userInfo,\r\n                activeTestTab,\r\n                screenName: activeTestTab,\r\n                resultDataState: this.state.resultDataState,\r\n                testCommentDataState: this.state.testCommentDataState,\r\n                testAttachmentDataState: this.state.testAttachmentDataState,\r\n                activeTabIndex: tabProps.activeTabIndex ? tabProps.activeTabIndex : this.state.activeTabIndex,\r\n                activeTabId: tabProps.activeTabId ? tabProps.activeTabId : this.state.activeTabId,\r\n            }\r\n            this.props.getTestChildTabDetailRegistration(inputData, true)\r\n            // } \r\n            // else {\r\n            //     toast.info(this.props.intl.formatMessage({ id: \"IDS_SELECTTEST\" }))\r\n            // }\r\n        }\r\n        else if (tabseqno === SideBarSeqno.SUBSAMPLE) {\r\n            if (activeTestTab !== this.props.Login.activeTestTab) {\r\n                let inputData = {\r\n                    masterData: this.props.Login.masterData,\r\n                    selectedSubSample: this.props.Login.masterData.selectedSubSample,\r\n                    ntransactionsamplecode: this.props.Login.masterData.selectedSubSample ? this.props.Login.masterData.selectedSubSample.map(item => item.ntransactionsamplecode).join(\",\") : \"-1\",\r\n                    userinfo: this.props.Login.userInfo,\r\n                    screenName: activeTestTab,\r\n                    activeSubSampleTab: activeTestTab,\r\n                    subSampleCommentDataState: this.state.subSampleCommentDataState,\r\n                    subSampleAttachmentDataState: this.state.subSampleAttachmentDataState,\r\n                    npreregno: this.props.Login.masterData.selectedSample &&\r\n                        this.props.Login.masterData.selectedSample.map(item => item.npreregno).join(\",\"),\r\n                    activeTabIndex: tabProps.activeTabIndex ? tabProps.activeTabIndex : this.state.activeTabIndex,\r\n                }\r\n                this.props.getSubSampleChildTabDetail(inputData)\r\n            }\r\n        }\r\n        else {\r\n\r\n            if (activeTestTab !== this.props.Login.activeTestTab) {\r\n                let inputData = {\r\n                    masterData: this.props.Login.masterData,\r\n                    selectedSample: this.props.Login.masterData.selectedSample,\r\n                    npreregno: this.props.Login.masterData.selectedSample ? this.props.Login.masterData.selectedSample.map(item => item.npreregno).join(\",\") : \"-1\",\r\n                    userinfo: this.props.Login.userInfo,\r\n                    screenName: activeTestTab,\r\n                    activeSampleTab: activeTestTab,\r\n                    OrderCodeData: this.props.Login.masterData.selectedSample &&\r\n                        this.props.Login.masterData.selectedSample.map(item => item.hasOwnProperty(\"OrderCodeData\") ? item.OrderCodeData : -1).join(\",\"),\r\n                    activeTabIndex: tabProps.activeTabIndex ? tabProps.activeTabIndex : this.state.activeTabIndex,\r\n                }\r\n                this.props.getSampleChildTabDetail(inputData)\r\n            }\r\n        }\r\n    }\r\n\r\n    changePropertyView = (index, event, status) => {\r\n\r\n        let id = false;\r\n        if (event && event.ntransactiontestcode) {\r\n            id = event.ntransactiontestcode\r\n        } else if (event && event.ntransactionsamplecode) {\r\n            id = event.ntransactionsamplecode\r\n        } else if (event && event.npreregno) {\r\n            id = event.npreregno\r\n        }\r\n\r\n        let activeTabIndex\r\n        let activeTabId\r\n        if (window.innerWidth > 992 && event && this.state.enableAutoClick || !event) {\r\n            activeTabIndex = this.state.activeTabIndex !== index ? index : id ? index : false;\r\n        }\r\n        if (status !== \"click\") {\r\n            if (index === SideBarTabIndex.RESULT) {\r\n                const tabProps = {\r\n                    tabSequence: SideBarSeqno.TEST,\r\n                    screenName: \"IDS_PARAMETERRESULTS\",\r\n                    activeTabIndex,\r\n                    activeTabId\r\n                }\r\n                this.onTabChange(tabProps);\r\n            }\r\n            else if (index === SideBarTabIndex.ATTACHMENTS) {\r\n                const tabProps = {\r\n                    tabSequence: SideBarSeqno.TEST,\r\n                    screenName: \"IDS_TESTATTACHMENTS\",\r\n                    activeTabIndex,\r\n                    activeTabId\r\n                }\r\n                this.onTabChange(tabProps);\r\n            }\r\n            else if (index === SideBarTabIndex.COMMENTS) {\r\n                const tabProps = {\r\n                    tabSequence: SideBarSeqno.TEST,\r\n                    screenName: \"IDS_TESTCOMMENTS\",\r\n                    activeTabIndex,\r\n                    activeTabId\r\n                }\r\n                this.onTabChange(tabProps);\r\n            }\r\n            else if (index === SideBarTabIndex.OUTSOURCE) {\r\n                const tabProps = {\r\n                    tabSequence: SideBarSeqno.SUBSAMPLE,\r\n                    screenName: \"IDS_OUTSOURCEDETAILS\",\r\n                    activeTabIndex,\r\n                    activeTabId\r\n                }\r\n                this.onTabChange(tabProps);\r\n            }\r\n            else {\r\n                if (window.innerWidth > 992 && event && this.state.enableAutoClick || !event) {\r\n\r\n                    const updateInfo = {\r\n                        typeName: DEFAULT_RETURN,\r\n                        data: {\r\n                            activeTabIndex: this.state.activeTabIndex !== index ? index : id ? index : false,\r\n                            activeTabId: id\r\n                        }\r\n                    }\r\n                    this.props.updateStore(updateInfo);\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            // if (window.innerWidth > 992 && event && this.state.enableAutoClick || !event) {\r\n\r\n            //     const updateInfo = {\r\n            //         typeName: DEFAULT_RETURN,\r\n            //         data: {\r\n            //             activeTabIndex :activeTabIndex\r\n            //            // activeTabId :  id\r\n            //         }\r\n            //     }\r\n            //     this.props.updateStore(updateInfo);\r\n\r\n            //     }\r\n        }\r\n    }\r\n\r\n\r\n    onInputSwitchOnChange = (event) => {\r\n        if (event.target.name === \"PopupNav\") {\r\n            this.setState({\r\n                enablePropertyPopup: !this.state.enablePropertyPopup\r\n            })\r\n        }\r\n        else {\r\n            this.setState({\r\n                enableAutoClick: !this.state.enableAutoClick\r\n            })\r\n        }\r\n\r\n    }\r\n\r\n    changePropertyViewClose = (id) => {\r\n\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                activeTabIndex: undefined,\r\n                activeTestTab: undefined,\r\n                activeTabId: id\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    onOrderSearch = (orderValue) => {\r\n        let selectedRecord = this.state.selectedRecord;\r\n        if (selectedRecord.nexternalordertypecode) {\r\n            const inputData = {\r\n                sexternalorderid: orderValue,\r\n                userinfo: this.props.Login.userInfo,\r\n                masterData: this.props.Login.masterData,\r\n                selectedRecord: selectedRecord\r\n            }\r\n            this.props.getOrderDetails(inputData);\r\n        } else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTEXTERNALORDERTYPE\" }));\r\n        }\r\n    }\r\n\r\n    headerSelectionChange = (event) => {\r\n\r\n        const checked = event.syntheticEvent.target.checked;\r\n        let orderList = this.state.sectedRecord.orders || [];\r\n        let selectedRecord = this.state.sectedRecord\r\n        let addedOrderSampleList = [];\r\n\r\n        if (checked) {\r\n\r\n            const data = event.target.props.data.map(item => {\r\n                if (orderList.findIndex(x => x.nexternalordersamplecode === item.nexternalordersamplecode) === -1) {\r\n                    orderList.push({ ...item, selected: false });\r\n                    item.selected = checked;\r\n                    let newItem = JSON.parse(JSON.stringify(item));\r\n                    delete newItem['selected']\r\n                    // newItem[\"jsondata\"]={};\r\n                    // newItem[\"jsonuidata\"]={};\r\n                    // newItem[\"jsondata\"]['orderList'] = item\r\n                    // newItem[\"jsonuidata\"]['orderList'] = item    \r\n                    addedOrderSampleList.push(newItem);\r\n                    return item;\r\n                } else {\r\n                    let olditem = JSON.parse(JSON.stringify(orderList[orderList.findIndex(x => x.nexternalordersamplecode === item.nexternalordersamplecode)]))\r\n                    olditem.selected = checked;\r\n                    let newItem = JSON.parse(JSON.stringify(olditem));\r\n                    newItem.selected = false;\r\n                    // newItem[\"jsondata\"]={};\r\n                    // newItem[\"jsonuidata\"]={};\r\n                    // newItem[\"jsondata\"]['orderList'] = olditem\r\n                    // newItem[\"jsonuidata\"]['orderList'] = olditem\r\n                    addedOrderSampleList.push(newItem);\r\n                    return olditem;\r\n\r\n                }\r\n\r\n            });\r\n            selectedRecord['orders'] = data\r\n            this.setState({\r\n                selectedRecord,\r\n                addedOrderSampleList: addedOrderSampleList,\r\n                orderList,\r\n                addSelectAll: checked,\r\n                deleteSelectAll: false\r\n            });\r\n\r\n        }\r\n        else {\r\n\r\n            let orderListData = this.state.orders || [];\r\n            let deletedListdData = this.state.orders || [];\r\n\r\n            const data = this.state.orders.map(item => {\r\n                orderListData = orderListData.filter(item1 => item1.nexternalordersamplecode !== item.nexternalordersamplecode);\r\n                deletedListdData = deletedListdData.filter(item1 => item1.nexternalordersamplecode !== item.nexternalordersamplecode);\r\n                item.selected = checked;\r\n                return item;\r\n            });\r\n\r\n\r\n            this.setState({\r\n                samples: data,\r\n                addedOrderSampleList: orderListData,\r\n                deletedList: deletedListdData,\r\n                addSelectAll: checked,\r\n                deleteSelectAll: false\r\n            });\r\n        }\r\n    }\r\n\r\n    selectionChange = (event) => {\r\n        let addedOrderSampleList = this.state.addedOrderSampleList || [];\r\n        let orders = this.state.selectedRecord.orders || [];\r\n        let selectedRecord = { ...this.state.selectedRecord }\r\n\r\n        const orderList = this.state.selectedRecord.orders.map(item => {\r\n            if (item.nexternalordersamplecode === event.dataItem.nexternalordersamplecode) {\r\n                item.selected = !event.dataItem.selected;\r\n                if (item.selected) {\r\n                    const newItem = JSON.parse(JSON.stringify(item));\r\n                    //newItem.selected = false;\r\n                    delete newItem['selected']\r\n                    // newItem[\"jsondata\"]={};\r\n                    // newItem[\"jsonuidata\"]={};\r\n                    // newItem[\"jsondata\"]['orderList'] = item\r\n                    // newItem[\"jsonuidata\"]['orderList'] = item\r\n                    addedOrderSampleList.push(newItem);\r\n                }\r\n                else {\r\n                    addedOrderSampleList = addedOrderSampleList.filter(item1 => item1.nexternalordersamplecode !== item.nexternalordersamplecode)\r\n                }\r\n            }\r\n            return item;\r\n        });\r\n\r\n        selectedRecord['orders'] = orders;\r\n\r\n        this.setState({\r\n            orderList,\r\n            addedOrderSampleList,\r\n            selectedRecord,\r\n            initialList: addedOrderSampleList,\r\n            addSelectAll: this.valiateCheckAll(orderList),\r\n            deleteSelectAll: this.valiateCheckAll(orderList)\r\n        });\r\n    }\r\n\r\n\r\n    valiateCheckAll(data) {\r\n        let selectAll = true;\r\n        // let checkRepeatComponent;\r\n        //  let addedComponentList = this.state.addedComponentList || [];\r\n        if (data && data.length > 0) {\r\n            data.forEach(dataItem => {\r\n                if (dataItem.selected) {\r\n                    if (dataItem.selected === false) {\r\n                        selectAll = false;\r\n                    }\r\n                }\r\n                else {\r\n                    selectAll = false;\r\n                }\r\n            })\r\n        }\r\n        else {\r\n            selectAll = false;\r\n        }\r\n        return selectAll;\r\n    }\r\n\r\n    render() {\r\n        this.fromDate = this.state.selectedFilter[\"fromdate\"] !== \"\" && this.state.selectedFilter[\"fromdate\"] !== undefined ? this.state.selectedFilter[\"fromdate\"] : this.props.Login.masterData.FromDate;\r\n        this.toDate = this.state.selectedFilter[\"todate\"] !== \"\" && this.state.selectedFilter[\"todate\"] !== undefined ? this.state.selectedFilter[\"todate\"] : this.props.Login.masterData.ToDate;\r\n        let sampleList = this.props.Login.masterData.RegistrationGetSample ? this.props.Login.regSampleExisted ? sortDataForDate(this.props.Login.masterData.RegistrationGetSample, 'dtransactiondate', 'npreregno') :\r\n            sortDataForDate(this.props.Login.masterData.RegistrationGetSample, 'dtransactiondate', 'npreregno') : [];\r\n        let subSampleList = this.props.Login.masterData.RegistrationGetSubSample ? this.props.Login.masterData.RegistrationGetSubSample : [];\r\n        let testList = this.props.Login.masterData.RegistrationGetTest ? this.props.Login.masterData.RegistrationGetTest : []; //\r\n\r\n        const sendToStore = this.state.controlMap.has(\"Sample SendToStore\") && this.state.controlMap.get(\"Sample SendToStore\").ncontrolcode;\r\n\r\n        const testDesign = <ContentPanel>\r\n            <Card>\r\n                <Card.Header style={{ borderBottom: \"0px\" }}>\r\n                    <span style={{ display: \"inline-block\" }}>\r\n                        <h4 className=\"card-title\">{this.props.intl.formatMessage({ id: \"IDS_TEST\" })}</h4>\r\n                    </span>\r\n                    {/* <button className=\"btn btn-primary btn-padd-custom\" style={{ float: \"right\" }}\r\n                        onClick={() => this.showSample()}\r\n                    >\r\n                        <FontAwesomeIcon icon={faEye}></FontAwesomeIcon>{\"  \"}\r\n                        {this.props.intl.formatMessage({ id: \"IDS_SAMPLE\" })}\r\n                    </button> */}\r\n\r\n                </Card.Header>\r\n                <Card.Body className='p-0 sm-pager' >\r\n                    <TransactionListMasterJsonView\r\n                        cardHead={94}\r\n                        clickIconGroup={true}\r\n                        // paneHeight={this.state.initialVerticalWidth}\r\n                        masterList={this.props.Login.masterData.searchedTest || testList}\r\n                        selectedMaster={this.props.Login.masterData.selectedTest}\r\n                        primaryKeyField=\"ntransactiontestcode\"\r\n                        getMasterDetail={(event, status) => { this.props.getTestChildTabDetailRegistration(event, status); this.changePropertyView(1, event, \"click\") }}\r\n                        inputParam={{\r\n                            ...this.state.testChildGetParam, resultDataState: this.state.resultDataState,\r\n                            testCommentDataState: this.state.testCommentDataState,\r\n                            testAttachmentDataState: this.state.testAttachmentDataState,\r\n                            // activeTabIndex: this.state.enableAutoClick ? 1 : this.state.activeTabIndex ? this.state.activeTabIndex : undefined,\r\n                            // activeTabIndex: this.state.enableAutoClick && this.state.activeTabIndex == undefined ?\r\n                            //     this.props.Login.masterData.RealSampleTypeValue && this.props.Login.masterData.RealSampleTypeValue.nsampletypecode !== SampleType.CLINICALTYPE ? 1 : 0 : this.state.enableAutoClick && this.state.activeTabIndex == 0 ?\r\n                            //         this.props.Login.masterData.RealSampleTypeValue && this.props.Login.masterData.RealSampleTypeValue.nsampletypecode !== SampleType.CLINICALTYPE ? 1 : 0 : this.state.enableAutoClick ? this.state.activeTabIndex : 0,\r\n                            activeTabIndex: this.state.enableAutoClick && this.state.activeTabIndex == undefined ? 0 : this.state.enableAutoClick && this.state.activeTabIndex == 0 ? 0 : this.state.enableAutoClick ? this.state.activeTabIndex : 0,\r\n                        }}\r\n                        additionalParam={[]}\r\n                        mainField=\"stestsynonym\"\r\n                        selectedListName=\"selectedTest\"\r\n                        objectName=\"test\"\r\n                        listName=\"IDS_TEST\"\r\n                        // jsonField={'jsondata'}\r\n                        pageSize={this.props.Login.settings && this.props.Login.settings[13].split(\",\").map(setting => parseInt(setting))}\r\n                        showStatusLink={true}\r\n                        subFieldsLabel={true}\r\n                        statusFieldName=\"stransdisplaystatus\"\r\n                        statusField=\"ntransactionstatus\"\r\n                        needMultiSelect={true}\r\n                        subFields={this.state.testListColumns || []}\r\n                        moreField={this.state.testMoreField}\r\n                        needValidation={false}\r\n                        showStatusName={true}\r\n                        needFilter={false}\r\n                        filterColumnData={this.props.filterTransactionList}\r\n                        searchListName=\"searchedTest\"\r\n                        searchRef={this.searchTestRef}\r\n                        filterParam={this.state.filterTestParam}\r\n                        selectionField=\"ntransactionstatus\"\r\n                        selectionFieldName=\"stransdisplaystatus\"\r\n                        // childTabsKey={[\"RegistrationTestComment\"]}\r\n                        childTabsKey={[\"RegistrationParameter\", \"RegistrationTestComment\", \"RegistrationTestAttachment\", \"ApprovalParameter\"]}\r\n                        handlePageChange={this.handleTestPageChange}\r\n                        buttonCount={5}\r\n                        skip={this.state.testskip}\r\n                        take={this.state.testtake}\r\n                        showMoreResetList={true}\r\n                        showMoreResetListName=\"RegistrationGetSample\"\r\n                        selectionList={this.props.Login.masterData.RealFilterStatusValue && this.props.Login.masterData.RealFilterStatusValue.ntransactionstatus === transactionStatus.ALL ? this.props.Login.masterData.FilterStatus : []}\r\n                        selectionColorField=\"scolorhexcode\"\r\n                        // selectionList=\r\n                        // actionIcons={\r\n                        //     [{ title: \"EditTest\", controlname: \"faPencilAlt\", hidden: this.state.userRoleControlRights.indexOf(editSourceMethodId) === -1, onClick: this.testMethodSourceEdit, objectName: \"test\", inputData: { masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo, editSourceMethodId } },\r\n                        //     { title: \"Add Intrument\", controlname: \"faMicroscope\", hidden: this.state.userRoleControlRights.indexOf(addResultUsedInstrumentId) === -1, onClick: this.addREInstrument, objectName: \"test\", inputData: { masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo, addResultUsedInstrumentId } },\r\n                        //     { title: \"Add Material\", controlname: \"faFlask\", hidden: this.state.userRoleControlRights.indexOf(addResultUsedMaterailId) === -1 },\r\n                        //     { title: \"Add Task\", controlname: \"faTasks\", hidden: this.state.userRoleControlRights.indexOf(addResultUsedTaskId) === -1, onClick: this.addResultEntryTask, objectName: \"test\", inputData: { addResultUsedTaskId } }]\r\n                        // }\r\n                        // actionIcons={\r\n                        //     [\r\n                        //         {\r\n                        //             title: this.props.intl.formatMessage({ id: \"IDS_OUTSOURCE\" }),\r\n                        //             controlname: \"faOutsource\",\r\n                        //             hidden: this.props.Login.masterData.RealSampleTypeValue && this.props.Login.masterData.RealSampleTypeValue.noutsourcerequired === transactionStatus.YES ? false : true,\r\n                        //             // hidden:this.props.Login.masterData.RealSampleTypeValue && this.props.Login.masterData.RealSampleTypeValue.nsampletypecode === SampleType.CLINICALTYPE? false :true,\r\n                        //             // hidden: this.state.userRoleControlRights.indexOf(openELNSheet) === -1, \r\n                        //             onClick: this.outsourceTest, objectName: \"test\",\r\n                        //             inputData: { masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo }\r\n                        //         },\r\n                        //     ]}\r\n                        commonActions={\r\n                            <>\r\n                                {/* <Tooltip position=\"bottom\" anchorElement=\"target\" openDelay={100} parentTitle={true}> */}\r\n                                <ProductList className=\"d-flex justify-content-end icon-group-wrap\">\r\n                                    {/* <ReactTooltip place=\"bottom\" /> */}\r\n                                    <Nav.Link name=\"addtest\" className=\"btn btn-circle outline-grey ml-2\"\r\n                                        //title={\"Add Test\"}\r\n                                        //data-for=\"tooltip-common-wrap\"\r\n                                        data-tip={this.props.intl.formatMessage({ id: \"IDS_ADDTEST\" })}\r\n                                        hidden={this.state.userRoleControlRights.indexOf(this.state.addTestId) === -1}\r\n                                        onClick={() => this.addMoreTest({\r\n                                            ...this.state.addTestParam,\r\n                                            skip: this.state.skip,\r\n                                            take: (this.state.skip + this.state.take)\r\n                                        },\r\n                                            this.state.addTestId)}\r\n                                    >\r\n                                        <FontAwesomeIcon icon={faPlus} />\r\n                                    </Nav.Link>\r\n                                    <Nav.Link\r\n                                        className=\"btn btn-circle outline-grey ml-2\"\r\n                                        //title={\"Cancel/Reject Test\"}\r\n                                        // data-for=\"tooltip-common-wrap\"\r\n                                        data-tip={this.props.intl.formatMessage({ id: \"IDS_CANCELREJECTTEST\" })}\r\n                                        hidden={this.state.userRoleControlRights.indexOf(this.state.cancelId) === -1}\r\n                                        onClick={() => this.cancelRecord(this.state.cancelId, this.state.testskip, this.state.testtake)}>\r\n                                        <Reject className=\"custom_icons\" width=\"15\" height=\"15\" />\r\n                                    </Nav.Link>\r\n                                </ProductList>\r\n                                {/* </Tooltip> */}\r\n                            </>\r\n                        }\r\n                    />\r\n                </Card.Body>\r\n            </Card>\r\n        </ContentPanel>\r\n\r\n\r\n        let mainDesign = \"\"\r\n\r\n        if (this.props.Login.masterData.RealRegSubTypeValue &&\r\n            this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample) {\r\n\r\n            mainDesign = <SplitterLayout borderColor=\"#999\"\r\n                primaryIndex={1} percentage={true}\r\n                secondaryInitialSize={this.state.splitChangeWidthPercentage}\r\n                onSecondaryPaneSizeChange={this.paneSizeChange}\r\n                primaryMinSize={40}\r\n                secondaryMinSize={30}\r\n            >\r\n\r\n                <Card >\r\n                    <Card.Header style={{ borderBottom: \"0px\" }}>\r\n                        <span style={{ display: \"inline-block\", marginTop: \"1%\" }}>\r\n                            <h4 className=\"card-title\">{this.props.intl.formatMessage({ id: \"IDS_SUBSAMPLE\" })}</h4>\r\n                        </span>\r\n                    </Card.Header>\r\n                    <Card.Body className='p-0 sm-pager'>\r\n                        <TransactionListMasterJsonView\r\n                            cardHead={94}\r\n                            // paneHeight={this.state.initialVerticalWidth}\r\n                            // splitChangeWidthPercentage={this.state.splitChangeWidthPercentage}\r\n\r\n                            clickIconGroup={true}\r\n                            masterList={this.props.Login.masterData.searchedSubSample || subSampleList}\r\n                            selectedMaster={this.props.Login.masterData.selectedSubSample}\r\n                            primaryKeyField=\"ntransactionsamplecode\"\r\n                            getMasterDetail={(event, status) => {\r\n                                this.props.getRegistrationTestDetail(event, status);\r\n                                //  this.changePropertyView(6, event, status) \r\n                            }}\r\n                            inputParam={{\r\n                                ...this.state.testGetParam,\r\n                                searchTestRef: this.searchTestRef,\r\n                                searchSubSampleRef: this.searchSubSampleRef,\r\n                                testskip: this.state.testskip,\r\n                                subsampleskip: this.state.subsampleskip,\r\n                                testtake: this.state.testtake,\r\n                                subsampletake: this.state.subsampletake,\r\n                                resultDataState: this.state.resultDataState,\r\n                                // activeTabIndex: this.state.enableAutoClick ? 1 : this.state.activeTabIndex ? this.state.activeTabIndex : undefined,\r\n                                // activeTabIndex : this.state.enableAutoClick && this.state.activeTabIndex == undefined ? 1 : this.state.enableAutoClick && this.state.activeTabIndex == 0 ? 1 : this.state.enableAutoClick ? this.state.activeTabIndex : 0,\r\n                            }}\r\n                            filterColumnData={this.props.filterTransactionList}\r\n                            searchListName=\"searchedSubSample\"\r\n                            searchRef={this.searchSubSampleRef}\r\n                            filterParam={{\r\n                                ...this.state.filterSubSampleParam,\r\n                                childRefs: [{ ref: this.searchTestRef, childFilteredListName: \"searchedTest\" }]\r\n                            }}\r\n                            additionalParam={['napprovalversioncode']}\r\n                            showStatusLink={true}\r\n                            showStatusName={true}\r\n                            statusFieldName=\"stransdisplaystatus\"\r\n                            statusField=\"ntransactionstatus\"\r\n                            mainField=\"ssamplearno\"\r\n                            selectedListName=\"selectedSubSample\"\r\n                            objectName=\"subsample\"\r\n                            listName=\"IDS_SUBSAMPLE\"\r\n                            // jsonField={'jsondata'}\r\n                            //jsonDesignFields={true}\r\n                            needValidation={true}\r\n                            validationKey=\"napprovalversioncode\"\r\n                            validationFailMsg=\"IDS_SELECTSAMPLESOFSAMPLEAPPROVALVERSION\"\r\n                            subFields={this.state.DynamicSubSampleColumns}\r\n                            skip={this.state.subsampleskip}\r\n                            take={this.state.subsampletake}\r\n                            selectionField=\"ntransactionstatus\"\r\n                            selectionFieldName=\"stransdisplaystatus\"\r\n                            needMultiSelect={true}\r\n                            selectionColorField=\"scolorhexcode\"\r\n                            subFieldsLabel={false}\r\n                            subFieldsFile={true}\r\n                            handlePageChange={this.handleSubSamplePageChange}\r\n                            // viewFile={this.viewFile}\r\n                            selectionList={this.props.Login.masterData.RealFilterStatusValue\r\n                                && this.props.Login.masterData.RealFilterStatusValue.ntransactionstatus === transactionStatus.ALL ? this.props.Login.masterData.FilterStatus : []}\r\n                            childTabsKey={[\r\n                                // \"RegistrationAttachment\",\r\n                                \"RegistrationGetTest\", \"RegistrationSampleComment\", \"RegistrationSampleAttachment\", \"OutsourceDetailsList\", \"RegistrationParameter\", \"RegistrationTestAttachment\", \"RegistrationTestComment\"]}\r\n                            actionIcons={\r\n                                this.props.Login.masterData && this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nneedsubsample === true ?\r\n                                    [\r\n                                        {\r\n                                            title: this.props.intl.formatMessage({ id: \"IDS_SENDTOSTORE\" }),\r\n                                            controlname: \"faArrowRight\",\r\n                                            objectName: \"mastersendtostore\",\r\n                                            hidden: this.state.userRoleControlRights.indexOf(sendToStore) === -1,\r\n                                            onClick: this.sendToStore,\r\n                                            inputData: {\r\n                                                masterData: this.props.Login.masterData,\r\n                                                userInfo: this.props.Login.userInfo,\r\n                                                ncontrolCode: sendToStore,\r\n                                                subSampleRegParam: { ...this.state.editSubSampleRegParam }\r\n                                            },\r\n                                        },\r\n                                        {\r\n                                            title: this.props.intl.formatMessage({ id: \"IDS_EDIT\" }),\r\n                                            controlname: \"faPencilAlt\",\r\n                                            objectName: \"mastertoedit\",\r\n                                            hidden: this.state.userRoleControlRights.indexOf(this.state.editSubSampleId) === -1,\r\n                                            onClick: this.editSubSampleRegistration,\r\n                                            inputData: {\r\n                                                primaryKeyName: \"ntransactionsamplecode\",\r\n                                                operation: \"update\",\r\n                                                masterData: this.props.Login.masterData,\r\n                                                userInfo: this.props.Login.userInfo,\r\n                                                editSubSampleRegParam: { ...this.state.editSubSampleRegParam, ncontrolCode: this.state.editSubSampleId }\r\n                                            },\r\n                                        },\r\n                                        {\r\n                                            //ALPD-3615\r\n                                            title: this.props.intl.formatMessage({ id: \"IDS_ADHOCTEST\" }),\r\n                                            controlname: \"faPrint\",\r\n                                            objectName: \"sampleadhoctest\",\r\n                                            hidden: this.state.userRoleControlRights.indexOf(this.state.adhocTestId) === -1,\r\n                                            //onClick: this.props.getPrinterComboService,\r\n                                            onClick: this.addAdhocTest,\r\n                                            inputData: ({\r\n                                                ...this.state.addTestParam,\r\n                                                primaryKeyName: \"ntransactionsamplecode\",\r\n                                                ncontrolcode: this.state.adhocTestId,\r\n                                                masterData: this.props.Login.masterData,\r\n                                                userInfo: this.props.Login.userInfo,\r\n                                                editRegParam: {\r\n                                                    ...this.state.editSubSampleRegParam,\r\n                                                    ncontrolCode: this.state.adhocTestId\r\n                                                }\r\n                                            }),\r\n                                        },\r\n                                        {\r\n                                            title: this.props.intl.formatMessage({ id: \"IDS_OUTSOURCE\" }),\r\n                                            controlname: \"faOutsource\",\r\n                                            hidden: ((this.props.Login.masterData.RealSampleTypeValue && this.props.Login.masterData.RealSampleTypeValue.noutsourcerequired === transactionStatus.NO ? false : true) && (this.state.userRoleControlRights.indexOf(this.state.outsourceId) === -1)),\r\n                                            // hidden:this.props.Login.masterData.RealSampleTypeValue && this.props.Login.masterData.RealSampleTypeValue.nsampletypecode === SampleType.CLINICALTYPE? false :true,\r\n                                            // hidden: this.state.userRoleControlRights.indexOf(openELNSheet) === -1, \r\n                                            onClick: this.outsourceSample, objectName: \"test\",\r\n                                            inputData: { masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo }\r\n                                        },\r\n\r\n                                        {\r\n                                            title: this.props.intl.formatMessage({ id: \"IDS_ORDERMAPPING\" }),\r\n                                            controlname: \"mapping\",\r\n                                            objectName: \"subSample\",\r\n                                            hidden: this.props.Login.masterData.RealSampleTypeValue && this.props.Login.masterData.RealSampleTypeValue.nsampletypecode !== SampleType.CLINICALTYPE ? true : false,//this.state.userRoleControlRights.indexOf(this.state.printBarcodeId) === -1,\r\n                                            //onClick: this.props.getPrinterComboService,\r\n                                            onClick: this.orderMapping,\r\n                                            inputData: {\r\n                                                primaryKeyName: \"ntransactionsamplecode\",\r\n                                                operation: \"prints\",\r\n                                                // ncontrolcode: this.state.printBarcodeId,\r\n                                                masterData: this.props.Login.masterData,\r\n                                                userInfo: this.props.Login.userInfo,\r\n                                                // editRegParam: {\r\n                                                //     ...this.state.editRegParam,\r\n                                                //     ncontrolCode: this.state.printBarcodeId\r\n                                                // }\r\n                                            },\r\n                                        },\r\n                                        {\r\n                                            // Control will be shown only for web technology\r\n                                            title: this.props.intl.formatMessage({ id: \"IDS_GENERATEBARCODE\" }),\r\n                                            controlname: \"faBarcode\",\r\n                                            hidden: \r\n                                                (this.props.Login.masterData.RealSampleTypeValue && \r\n                                                this.props.Login.masterData.RealSampleTypeValue.nsampletypecode  === SampleType.CLINICALTYPE ? \r\n                                                (this.props.Login.userInfo.nisstandaloneserver === transactionStatus.NO && \r\n                                                this.props.Login.userInfo.nissyncserver === transactionStatus.NO)\r\n                                                ? this.state.userRoleControlRights.indexOf(this.state.generateBarcodeId) === -1 : true : true) ,\r\n                                            onClick: this.generateBarcode, \r\n                                            objectName: \"test\",\r\n                                            inputData: { masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo }\r\n                                        }\r\n\r\n\r\n                                    ]\r\n                                    :\r\n                                    [\r\n                                        {\r\n                                            title: this.props.intl.formatMessage({ id: \"IDS_EDIT\" }),\r\n                                            controlname: \"faPencilAlt\",\r\n                                            objectName: \"mastertoedit\",\r\n                                            hidden: this.state.userRoleControlRights.indexOf(this.state.editSubSampleId) === -1,\r\n                                            onClick: this.editSubSampleRegistration,\r\n                                            inputData: {\r\n                                                primaryKeyName: \"ntransactionsamplecode\",\r\n                                                operation: \"update\",\r\n                                                masterData: this.props.Login.masterData,\r\n                                                userInfo: this.props.Login.userInfo,\r\n                                                editSubSampleRegParam: { ...this.state.editSubSampleRegParam, ncontrolCode: this.state.editSubSampleId }\r\n                                            },\r\n                                        },\r\n                                        {\r\n                                            title: this.props.intl.formatMessage({ id: \"IDS_ORDERMAPPING\" }),\r\n                                            controlname: \"mapping\",\r\n                                            objectName: \"subSample\",\r\n                                            hidden: this.props.Login.masterData.RealSampleTypeValue && this.props.Login.masterData.RealSampleTypeValue.nsampletypecode !== SampleType.CLINICALTYPE ? true : false,//this.state.userRoleControlRights.indexOf(this.state.printBarcodeId) === -1,\r\n                                            //onClick: this.props.getPrinterComboService,\r\n                                            onClick: this.orderMapping,\r\n                                            inputData: {\r\n                                                primaryKeyName: \"ntransactionsamplecode\",\r\n                                                operation: \"prints\",\r\n                                                // ncontrolcode: this.state.printBarcodeId,\r\n                                                masterData: this.props.Login.masterData,\r\n                                                userInfo: this.props.Login.userInfo,\r\n                                                // editRegParam: {\r\n                                                //     ...this.state.editRegParam,\r\n                                                //     ncontrolCode: this.state.printBarcodeId\r\n                                                // }\r\n                                            },\r\n                                        },\r\n\r\n\r\n                                    ]\r\n                            }\r\n                            needFilter={false}\r\n                            commonActions={\r\n                                <>\r\n                                    {/* <Tooltip position=\"bottom\" anchorElement=\"target\" openDelay={100} parentTitle={true}> */}\r\n                                    <ProductList className=\"d-flex justify-content-end icon-group-wrap\">\r\n                                        {/* <ReactTooltip place=\"bottom\" /> */}\r\n\r\n\r\n                                        <Nav.Link name=\"adddeputy\" className=\"btn btn-circle outline-grey ml-2\"\r\n                                            //title={\"Add Test\"}\r\n                                            //  data-for=\"tooltip-common-wrap\"\r\n                                            data-tip={this.props.intl.formatMessage({ id: \"IDS_ADDSUBSAMPLE\" })}\r\n                                            hidden={this.state.userRoleControlRights.indexOf(this.state.addSubSampleId) === -1}\r\n                                            // onClick={() => this.addSubSample(this.state.addSubSampleId, this.state.subsampleskip, this.state.subsampletake)}\r\n                                            onClick={() => this.addSubSample(this.state.addSubSampleId, this.state.skip, this.state.take)}\r\n                                        >\r\n                                            <FontAwesomeIcon icon={faPlus} />\r\n                                        </Nav.Link>\r\n                                        <Nav.Link\r\n                                            className=\"btn btn-circle outline-grey ml-2\"\r\n                                            //title={\"Cancel/Reject Test\"}\r\n                                            //data-for=\"tooltip-common-wrap\"\r\n                                            data-tip={this.props.intl.formatMessage({ id: \"IDS_CANCELREJECTSUBSAMPLE\" })}\r\n                                            hidden={this.state.userRoleControlRights.indexOf(this.state.cancelSubSampleId) === -1}\r\n                                            onClick={() => this.cancelSubSampleRecord(this.state.cancelSubSampleId, this.state.subsampleskip, this.state.subsampletake)}>\r\n                                            <Reject className=\"custom_icons\" width=\"15\" height=\"15\" />\r\n                                        </Nav.Link>\r\n\r\n                                        <Button className=\"btn btn-circle outline-grey ml-2\" variant=\"link\"\r\n                                            data-tip={this.props.intl.formatMessage({ id: \"IDS_PRINTBARCODE\" })}\r\n                                            //  data-for=\"tooltip-common-wrap\"\r\n                                            hidden={this.state.userRoleControlRights.indexOf(this.state.subSampleBarcodeId) === -1}\r\n                                            // onClick={() => this.getGoodsInPrinterComboService(\"Registration\", \"create\", \"npreregno\",\r\n                                            //     this.props.Login.masterData, this.props.Login.userInfo, this.state.preRegisterId)}>\r\n                                            onClick={() => this.props.getBarcodeAndPrinterService({\r\n                                                masterData: this.props.Login.masterData,\r\n                                                ncontrolcode: this.state.subSampleBarcodeId,\r\n                                                userInfo: this.props.Login.userInfo,\r\n                                                control: \"subSampleBarcode\"\r\n                                            })}>\r\n                                            \r\n                                                    {/* onClick={() => this.props.openBarcodeModal(\r\n                                                this.props.Login.masterData.selectedSubSample,\r\n                                                this.state.subSampleBarcodeId,\r\n                                                this.props.Login.userInfo, true,\r\n                                                \"subSampleBarcode\"\r\n                                            )} */}\r\n                                            <FontAwesomeIcon icon={faPrint} />\r\n                                        </Button>\r\n                                    </ProductList>\r\n                                    {/* </Tooltip> */}\r\n                                </>\r\n                            }\r\n\r\n                        />\r\n                    </Card.Body>\r\n                </Card>\r\n                {testDesign}\r\n            </SplitterLayout>\r\n\r\n        } else {\r\n            mainDesign = testDesign\r\n        }\r\n\r\n\r\n\r\n        this.confirmMessage = new ConfirmMessage();\r\n\r\n        this.postParamList = [\r\n            {\r\n                filteredListName: \"searchedSample\",\r\n                clearFilter: \"no\",\r\n                searchRef: this.searchSampleRef,\r\n                primaryKeyField: \"npreregno\",\r\n                fetchUrl: \"registration/getRegistrationSubSample\",\r\n                fecthInputObject: {\r\n                    ...this.state.subSampleGetParam, testskip: this.state.testskip,\r\n                    subsampleskip: this.state.subsampleskip,\r\n                    searchSubSampleRef: this.searchSubSampleRef,\r\n                    searchTestRef: this.searchTestRef,\r\n                    resultDataState: this.state.resultDataState,\r\n                    testCommentDataState: this.state.testCommentDataState,\r\n                    testAttachmentDataState: this.state.testAttachmentDataState,\r\n                    sampleGridDataState: this.state.sampleGridDataState\r\n                },\r\n                childRefs: [{ ref: this.searchSubSampleRef, childFilteredListName: \"searchedSubSample\" },\r\n                { ref: this.searchTestRef, childFilteredListName: \"searchedTest\" }],\r\n                selectedObject: \"selectedSample\",\r\n                inputListName: \"AP_SAMPLE\",\r\n                updatedListname: \"selectedSample\",\r\n                unchangeList: [\"realSampleTypeValue\", \"SampleTypeValue\", \"realRegTypeValue\", \"RegTypeValue\", \"realRegSubTypeValue\", \"RegSubTypeValue\",\r\n                    \"realApprovalVersionValue\", \"ApprovalVersionValue\", \"realFilterStatusValue\", \"FilterStatusValue\", \"fromDate\", \"toDate\",\r\n                    \"UserSectionValue\", \"SampleType\", \"RegType\", \"RegSubType\", \"ApprovalVersion\", \"JobStatus\", \"JobStatusValue\", \"FilterStatus\"]\r\n            },\r\n            {\r\n                filteredListName: \"searchedSubSample\",\r\n                clearFilter: \"no\",\r\n                searchRef: this.searchSubSampleRef,\r\n                primaryKeyField: \"ntransactionsamplecode\",\r\n                fetchUrl: \"registration/getRegistrationTestSample\",\r\n                fecthInputObject: {\r\n                    ...this.state.testGetParam, testskip: this.state.testskip,\r\n                    subsampleskip: this.state.subsampleskip,\r\n                    searchSubSampleRef: this.searchSubSampleRef,\r\n                    searchTestRef: this.searchTestRef,\r\n                    resultDataState: this.state.resultDataState,\r\n                    testCommentDataState: this.state.testCommentDataState,\r\n                    testAttachmentDataState: this.state.testAttachmentDataState,\r\n                    sampleGridDataState: this.state.sampleGridDataState\r\n                },\r\n                childRefs: [{ ref: this.searchTestRef, childFilteredListName: \"searchedTest\" }],\r\n                selectedObject: \"selectedSubSample\",\r\n                inputListName: \"selectedSubSample\",\r\n                updatedListname: \"RegistrationGetSubSample\",\r\n                unchangeList: [\"realSampleTypeValue\", \"SampleTypeValue\", \"realRegTypeValue\", \"RegTypeValue\", \"realRegSubTypeValue\", \"RegSubTypeValue\",\r\n                    \"realApprovalVersionValue\", \"ApprovalVersionValue\", \"realFilterStatusValue\", \"FilterStatusValue\", \"fromDate\", \"toDate\",\r\n                    \"UserSectionValue\", \"SampleType\", \"RegType\", \"RegSubType\", \"ApprovalVersion\", \"JobStatus\", \"JobStatusValue\", \"FilterStatus\"]\r\n            },\r\n            {\r\n                filteredListName: \"searchedTest\",\r\n                updatedListname: \"RegistrationGetTest\",\r\n                clearFilter: \"no\",\r\n                searchRef: this.searchTestRef,\r\n                primaryKeyField: \"ntransactiontestcode\",\r\n                fetchUrl: \"approval/getApprovalTest\",\r\n                fecthInputObject: {\r\n                    ...this.state.testGetParam,\r\n                    searchTestRef: this.searchTestRef,\r\n                    testskip: this.state.testskip,\r\n                    subsampleskip: this.state.subsampleskip,\r\n                    resultDataState: this.state.resultDataState\r\n                },\r\n                selectedObject: \"selectedTest\",\r\n                inputListName: \"selectedTest\",\r\n                unchangeList: [\"realSampleTypeValue\", \"SampleTypeValue\", \"realRegTypeValue\", \"RegTypeValue\", \"realRegSubTypeValue\", \"RegSubTypeValue\",\r\n                    \"realApprovalVersionValue\", \"ApprovalVersionValue\", \"realFilterStatusValue\", \"FilterStatusValue\", \"fromDate\", \"toDate\",\r\n                    \"UserSectionValue\", \"SampleType\", \"RegType\", \"RegSubType\", \"ApprovalVersion\", \"JobStatus\", \"JobStatusValue\", \"FilterStatus\"]\r\n            }\r\n        ];\r\n\r\n\r\n        // let editRegParam = {\r\n        //     nfilterstatus: String(this.props.Login.masterData.RealFilterStatusValue && this.props.Login.masterData.RealFilterStatusValue.ntransactionstatus),\r\n        //     userinfo: this.props.Login.userInfo,\r\n        //     nsampletypecode: this.props.Login.masterData.RealSampleTypeValue && this.props.Login.masterData.RealSampleTypeValue.nsampletypecode,\r\n        //     nregtypecode: this.props.Login.masterData.RealRegTypeValue && this.props.Login.masterData.RealRegTypeValue.nregtypecode,\r\n        //     nregsubtypecode: this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode,\r\n        //     sfromdate: this.props.Login.masterData.RealFromDate,\r\n        //     stodate: this.props.Login.masterData.RealToDate,\r\n        //     ncontrolCode: this.state.editSampleId,\r\n        //     ndesigntemplatemappingcode: this.props.Login.masterData.registrationTemplate\r\n        //         && this.props.Login.masterData.registrationTemplate.ndesigntemplatemappingcode,\r\n        //     nneedsubsample: this.props.Login.masterData\r\n        //         && this.props.Login.masterData.nneedsubsample\r\n        // }\r\n\r\n        // let editSubSampleRegParam = {\r\n        //     nfilterstatus: String(this.props.Login.masterData.RealFilterStatusValue && this.props.Login.masterData.RealFilterStatusValue.ntransactionstatus),\r\n        //     userinfo: this.props.Login.userInfo,\r\n        //     nsampletypecode: this.props.Login.masterData.RealSampleTypeValue && this.props.Login.masterData.RealSampleTypeValue.nsampletypecode,\r\n        //     nregtypecode: this.props.Login.masterData.RealRegTypeValue && this.props.Login.masterData.RealRegTypeValue.nregtypecode,\r\n        //     nregsubtypecode: this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode,\r\n        //     sfromdate: this.props.Login.masterData.RealFromDate,\r\n        //     stodate: this.props.Login.masterData.RealToDate,\r\n        //     ncontrolCode: this.state.editSampleId,\r\n        //     ndesigntemplatemappingcode: this.props.Login.masterData.registrationTemplate\r\n        //         && this.props.Login.masterData.registrationTemplate.ndesigntemplatemappingcode,\r\n        //     nneedsubsample: this.props.Login.masterData\r\n        //         && this.props.Login.masterData.nneedsubsample\r\n        // }\r\n\r\n        // const addTestParam = {\r\n        //     selectedsample: this.props.Login.masterData.selectedSample,\r\n        //     selectedsubsample: this.props.Login.masterData.selectedSubSample,\r\n        //     skip: this.state.skip, take: (this.state.skip + this.state.take),\r\n        //     userinfo: this.props.Login.userInfo,\r\n        //     sampleList: this.props.Login.masterData.RegistrationGetSample,\r\n        //     snspecsampletypecode: this.props.Login.masterData.selectedSubSample &&\r\n        //         [...new Set(this.props.Login.masterData.selectedSubSample.map(x => x.nspecsampletypecode))].join(\",\")\r\n        // };\r\n\r\n        return (\r\n            <>\r\n                <ListWrapper className=\"client-listing-wrap toolbar-top-wrap mtop-4 screen-height-window\">\r\n                    <BreadcrumbComponent breadCrumbItem={this.breadCrumbData} />\r\n                    <Row noGutters={true} className=\"toolbar-top\">\r\n                        <Col md={12} className=\"parent-port-height\">\r\n                            <ListWrapper className={`vertical-tab-top ${this.state.enablePropertyPopup ? 'active-popup' : \"\"}`}>\r\n                                {/* className={this.state.splitChangeWidthPercentage && this.state.splitChangeWidthPercentage > 60 ? 'split-mode' : ''} */}\r\n                                <div className={`tab-left-area ${this.state.activeTabIndex ? 'active' : \"\"}`}>\r\n                                    <SplitterLayout borderColor=\"#999\"\r\n                                        primaryIndex={1} percentage={true}\r\n                                        secondaryInitialSize={this.state.splitChangeWidthPercentage}\r\n                                        onSecondaryPaneSizeChange={this.paneSizeChange}\r\n                                        primaryMinSize={30}\r\n                                        secondaryMinSize={20}\r\n                                    >\r\n                                        <div className='toolbar-top-inner'>\r\n                                            <TransactionListMasterJsonView\r\n                                                listMasterShowIcon={1}\r\n                                                // paneHeight={this.state.firstPane}\r\n                                                clickIconGroup={true}\r\n                                                splitChangeWidthPercentage={this.state.splitChangeWidthPercentage}\r\n                                                masterList={this.props.Login.masterData.searchedSample || sampleList}\r\n                                                selectedMaster={this.props.Login.masterData.selectedSample}\r\n                                                primaryKeyField=\"npreregno\"\r\n                                                filterColumnData={this.props.filterTransactionList}\r\n                                                // getMasterDetail={(event, status) => { this.props.getRegistrationsubSampleDetail(event, status); this.changePropertyView(4, event, status) }}\r\n                                                getMasterDetail={this.props.getRegistrationsubSampleDetail}\r\n                                                inputParam={{\r\n                                                    ...this.state.subSampleGetParam,\r\n                                                    searchTestRef: this.searchTestRef,\r\n                                                    searchSubSampleRef: this.searchSubSampleRef,\r\n                                                    testskip: this.state.testskip,\r\n                                                    subsampleskip: this.state.subsampleskip,\r\n                                                    resultDataState: this.state.resultDataState,\r\n                                                    activeTabIndex: this.state.enableAutoClick && this.state.activeTabIndex == undefined ? 4 : this.state.enableAutoClick && this.state.activeTabIndex == 0 ? 4 : this.state.enableAutoClick ? this.state.activeTabIndex : 0,\r\n                                                }}\r\n                                                selectionList={this.props.Login.masterData.RealFilterStatusValue\r\n                                                    && this.props.Login.masterData.RealFilterStatusValue.ntransactionstatus === transactionStatus.ALL ? this.props.Login.masterData.FilterStatus : []}\r\n                                                selectionColorField=\"scolorhexcode\"\r\n                                                mainField={\"sarno\"}\r\n                                                showStatusLink={true}\r\n                                                showStatusName={true}\r\n                                                statusFieldName=\"stransdisplaystatus\"\r\n                                                statusField=\"ntransactionstatus\"\r\n                                                selectedListName=\"selectedSample\"\r\n                                                searchListName=\"searchedSample\"\r\n                                                searchRef={this.searchSampleRef}\r\n                                                objectName=\"sample\"\r\n                                                listName=\"IDS_SAMPLE\"\r\n                                                selectionField=\"ntransactionstatus\"\r\n                                                selectionFieldName=\"stransdisplaystatus\"\r\n                                                showFilter={this.props.Login.showFilter}\r\n                                                openFilter={this.openFilter}\r\n                                                closeFilter={this.closeFilter}\r\n                                                onFilterSubmit={this.onFilterSubmit}\r\n                                                subFields={this.state.DynamicSampleColumns}\r\n                                                // jsonField={'jsondata'}\r\n                                                //jsonDesignFields={true}\r\n                                                needMultiSelect={true}\r\n                                                showStatusBlink={true}\r\n                                                callCloseFunction={true}\r\n                                                filterParam={{\r\n                                                    ...this.state.filterSampleParam,\r\n                                                    childRefs: [{ ref: this.searchSubSampleRef, childFilteredListName: \"searchedSubSample\" },\r\n                                                    { ref: this.searchTestRef, childFilteredListName: \"searchedTest\" }],\r\n                                                }}\r\n                                                subFieldsLabel={false}\r\n                                                handlePageChange={this.handlePageChange}\r\n                                                skip={this.state.skip}\r\n                                                take={this.state.take}\r\n                                                // splitModeClass={this.state.splitChangeWidthPercentage\r\n                                                //     && this.state.splitChangeWidthPercentage > 50 ? 'split-mode'\r\n                                                //     : this.state.splitChangeWidthPercentage > 40 ? 'split-md' : ''}\r\n                                                childTabsKey={[\"RegistrationAttachment\", \"RegistrationGetSubSample\",\r\n                                                    \"RegistrationGetTest\", \"RegistrationSampleComment\", \"RegistrationSampleAttachment\", \"selectedSubSample\", \"selectedTest\", \r\n                                                    \"RegistrationComment\", \"ExternalOrderAttachmentList\", \"OutsourceDetailsList\", \"RegistrationParameter\", \"RegistrationTestAttachment\", \r\n                                                    \"RegistrationTestComment\"]} //, \"RegistrationParameter\"\"RegistrationTestComment\"\r\n                                                actionIcons={\r\n                                                    this.props.Login.masterData && this.props.Login.masterData.RegSubTypeValue\r\n                                                        && this.props.Login.masterData.RegSubTypeValue.nneedsubsample === false ?\r\n                                                        [\r\n                                                            {\r\n                                                                title: this.props.intl.formatMessage({ id: \"IDS_SENDTOSTORE\" }),\r\n                                                                controlname: \"faArrowRight\",\r\n                                                                objectName: \"mastersendtostore\",\r\n                                                                hidden: this.state.userRoleControlRights.indexOf(sendToStore) === -1,\r\n                                                                onClick: this.sendToStore,\r\n                                                                inputData: {\r\n                                                                    masterData: this.props.Login.masterData,\r\n                                                                    userInfo: this.props.Login.userInfo,\r\n                                                                    ncontrolCode: sendToStore,\r\n                                                                    mainSampleRegParam: { ...this.state.editRegParam }\r\n                                                                },\r\n                                                            },\r\n                                                            {\r\n                                                                title: this.props.intl.formatMessage({ id: \"IDS_EDIT\" }),\r\n                                                                controlname: \"faPencilAlt\",\r\n                                                                objectName: \"mastertoedit\",\r\n                                                                hidden: this.state.userRoleControlRights.indexOf(this.state.editSampleId) === -1,\r\n                                                                onClick: this.editRegistration,\r\n                                                                inputData: {\r\n                                                                    primaryKeyName: \"npreregno\",\r\n                                                                    operation: \"update\",\r\n                                                                    masterData: this.props.Login.masterData,\r\n                                                                    userInfo: this.props.Login.userInfo,\r\n                                                                    editRegParam: {\r\n                                                                        ...this.state.editRegParam,\r\n                                                                        ncontrolCode: this.state.editSampleId,\r\n                                                                        nneedsubsample: this.props.Login.masterData && this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample //=== true ? transactionStatus.YES:transactionStatus.NO\r\n                                                                    }\r\n                                                                },\r\n                                                            },\r\n                                                            {\r\n                                                                //ALPD-3615\r\n                                                                title: this.props.intl.formatMessage({ id: \"IDS_ADHOCTEST\" }),\r\n                                                                controlname: \"faPrint\",\r\n                                                                objectName: \"sampleadhoctest\",\r\n                                                                hidden: this.state.userRoleControlRights.indexOf(this.state.adhocTestId) === -1,\r\n                                                                //onClick: this.props.getPrinterComboService,\r\n                                                                onClick: this.addAdhocTest,\r\n                                                                inputData: ({\r\n                                                                    ...this.state.addTestParam,\r\n                                                                    primaryKeyName: \"npreregno\",\r\n                                                                    ncontrolcode: this.state.adhocTestId,\r\n                                                                    masterData: this.props.Login.masterData,\r\n                                                                    userInfo: this.props.Login.userInfo,\r\n                                                                    editRegParam: {\r\n                                                                        ...this.state.editRegParam,\r\n                                                                        ncontrolCode: this.state.adhocTestId,\r\n                                                                        nneedsubsample: this.props.Login.masterData && this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample //=== true ? transactionStatus.YES:transactionStatus.NO\r\n                                                                    }\r\n                                                                }),\r\n                                                            },\r\n                                                            {\r\n                                                                title: this.props.intl.formatMessage({ id: \"IDS_PRINTBARCODE\" }),\r\n                                                                controlname: \"faPrint\",\r\n                                                                objectName: \"sample\",\r\n                                                                hidden: this.state.userRoleControlRights.indexOf(this.state.printBarcodeId) === -1,\r\n                                                                //onClick: this.props.getPrinterComboService,\r\n                                                                onClick: this.printBarcode,\r\n                                                                inputData: {\r\n                                                                    primaryKeyName: \"npreregno\",\r\n                                                                    operation: \"print\",\r\n                                                                    ncontrolcode: this.state.printBarcodeId,\r\n                                                                    masterData: this.props.Login.masterData,\r\n                                                                    userInfo: this.props.Login.userInfo,\r\n                                                                    editRegParam: {\r\n                                                                        ...this.state.editRegParam,\r\n                                                                        ncontrolCode: this.state.printBarcodeId\r\n                                                                    }\r\n                                                                },\r\n                                                            },\r\n\r\n                                                        ]\r\n                                                        :\r\n                                                        [\r\n                                                            {\r\n                                                                title: this.props.intl.formatMessage({ id: \"IDS_EDIT\" }),\r\n                                                                controlname: \"faPencilAlt\",\r\n                                                                objectName: \"mastertoedit\",\r\n                                                                hidden: this.state.userRoleControlRights.indexOf(this.state.editSampleId) === -1,\r\n                                                                onClick: this.editRegistration,\r\n                                                                inputData: {\r\n                                                                    primaryKeyName: \"npreregno\",\r\n                                                                    operation: \"update\",\r\n                                                                    masterData: this.props.Login.masterData,\r\n                                                                    userInfo: this.props.Login.userInfo,\r\n                                                                    editRegParam: {\r\n                                                                        ...this.state.editRegParam,\r\n                                                                        ncontrolCode: this.state.editSampleId\r\n                                                                    }\r\n                                                                },\r\n                                                            },\r\n                                                            //     {    title: this.props.intl.formatMessage({ id: \"IDS_OUTSOURCE\" }), \r\n                                                            //     controlname: \"faOutsource\", \r\n                                                            //     hidden: this.props.Login.masterData.RealSampleTypeValue && this.props.Login.masterData.RealSampleTypeValue.noutsourcerequired === transactionStatus.YES? false :true,\r\n                                                            //    // hidden:this.props.Login.masterData.RealSampleTypeValue && this.props.Login.masterData.RealSampleTypeValue.nsampletypecode === SampleType.CLINICALTYPE? false :true,\r\n                                                            //    // hidden: this.state.userRoleControlRights.indexOf(openELNSheet) === -1, \r\n                                                            //     onClick: this.outsourceSample, objectName: \"test\",\r\n                                                            //     inputData: { masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo} \r\n                                                            // },\r\n                                                            \r\n                                                            {\r\n                                                                title: this.props.intl.formatMessage({ id: \"IDS_PRINTBARCODE\" }),\r\n                                                                controlname: \"faPrint\",\r\n                                                                objectName: \"sample\",\r\n                                                                hidden: this.state.userRoleControlRights.indexOf(this.state.printBarcodeId) === -1,\r\n                                                                //onClick: this.props.getPrinterComboService,\r\n                                                                onClick: this.printBarcode,\r\n                                                                inputData: {\r\n                                                                    primaryKeyName: \"npreregno\",\r\n                                                                    operation: \"print\",\r\n                                                                    ncontrolcode: this.state.printBarcodeId,\r\n                                                                    masterData: this.props.Login.masterData,\r\n                                                                    userInfo: this.props.Login.userInfo,\r\n                                                                    editRegParam: {\r\n                                                                        ...this.state.editRegParam,\r\n                                                                        ncontrolCode: this.state.printBarcodeId\r\n                                                                    }\r\n                                                                },\r\n                                                            },\r\n\r\n                                                        ]\r\n                                                }\r\n                                                needFilter={true}\r\n                                                commonActions={\r\n\r\n                                                    <ProductList className=\"d-flex product-category float-right icon-group-wrap\">\r\n                                                        {/* <ReactTooltip place=\"bottom\" /> */}\r\n\r\n                                                        <Button className=\"btn btn-icon-rounded btn-circle solid-blue ml-2\" role=\"button\"\r\n                                                            data-tip={this.props.intl.formatMessage({ id: \"IDS_PREREGISTER\" })}\r\n                                                            //  data-for=\"tooltip-common-wrap\"\r\n                                                            hidden={this.state.userRoleControlRights.indexOf(this.state.preRegisterId) === -1}\r\n                                                            onClick={() => this.getRegistrationComboService(\"Registration\", \"create\", \"npreregno\",\r\n                                                                this.props.Login.masterData, this.props.Login.userInfo, this.state.preRegisterId, false, true, true)}>\r\n                                                            <FontAwesomeIcon icon={faPlus} />\r\n                                                        </Button>\r\n                                                        <Nav.Link\r\n                                                            className=\"btn btn-circle outline-grey ml-2\"\r\n                                                            data-tip={this.props.intl.formatMessage({ id: \"IDS_REGISTER\" })}\r\n                                                            // data-for=\"tooltip-common-wrap\"\r\n                                                            hidden={this.state.userRoleControlRights.indexOf(this.state.registerId) === -1}\r\n                                                            onClick={() => this.acceptRegistration(this.state.registerId, this.state.skip, this.state.take)} >\r\n                                                            <Register className=\"custom_icons\" width=\"15\" height=\"15\" />\r\n                                                        </Nav.Link>\r\n                                                        <Nav.Link\r\n                                                            className=\"btn btn-circle outline-grey ml-2\"\r\n                                                            data-tip={this.props.intl.formatMessage({ id: \"IDS_QUARANTINE\" })}\r\n                                                            //  data-for=\"tooltip-common-wrap\"\r\n                                                            hidden={this.state.userRoleControlRights.indexOf(this.state.quarantineId) === -1}\r\n                                                            onClick={() => this.selectQuarantine(this.state.quarantineId, this.state.skip, this.state.take)} >\r\n                                                            <Quarantine className=\"custom_icons\" width=\"15\" height=\"15\" />\r\n                                                        </Nav.Link>\r\n                                                        <Nav.Link\r\n                                                            className=\"btn btn-circle outline-grey ml-2\"\r\n                                                            data-tip={this.props.intl.formatMessage({ id: \"IDS_CANCELREJECTSAMPLE\" })}\r\n                                                            // data-for=\"tooltip-common-wrap\"\r\n                                                            hidden={this.state.userRoleControlRights.indexOf(this.state.cancelSampleId) === -1}\r\n                                                            onClick={() => this.cancelSampleRecords(this.state.cancelSampleId, this.state.skip, this.state.take)}>\r\n                                                            <Reject className=\"custom_icons\" width=\"20\" height=\"20\" />\r\n                                                        </Nav.Link>\r\n                                                        {this.props.Login.masterData && this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nneedsubsample === false ?\r\n                                                        <Button className=\"btn btn-circle outline-grey ml-2\" variant=\"link\"\r\n                                                            data-tip={this.props.intl.formatMessage({ id: \"IDS_PRINTBARCODE\" })}\r\n                                                            //  data-for=\"tooltip-common-wrap\"\r\n                                                            hidden={this.state.userRoleControlRights.indexOf(this.state.sampleBarcodeId) === -1}\r\n                                                            onClick={() => this.props.getBarcodeAndPrinterService({\r\n                                                                masterData: this.props.Login.masterData,\r\n                                                                ncontrolcode: this.state.sampleBarcodeId,\r\n                                                                userInfo: this.props.Login.userInfo,\r\n                                                                control: \"sampleBarcode\"\r\n                                                            })} \r\n                                                            >\r\n\r\n                                                            {/* onClick={() => this.props.openBarcodeModal(\r\n                                                                this.props.Login.masterData.selectedSample,\r\n                                                                this.state.sampleBarcodeId,\r\n                                                                this.props.Login.userInfo, true,\r\n                                                                \"sampleBarcode\"\r\n                                                            )} > */}\r\n                                                            <FontAwesomeIcon icon={faPrint} />\r\n                                                        </Button>\r\n                                                     : \"\"} \r\n\r\n                                                        {this.props.Login.masterData.RealSampleTypeValue && this.props.Login.masterData.RealSampleTypeValue.nportalrequired === transactionStatus.YES &&\r\n                                                            <Nav.Link\r\n                                                                className=\"btn btn-circle outline-grey ml-2\"\r\n                                                                data-tip={this.props.intl.formatMessage({ id: \"IDS_CANCELEXTERNALSAMPLEORDER\" })}\r\n                                                                // data-for=\"tooltip-common-wrap\"\r\n                                                                hidden={this.state.userRoleControlRights.indexOf(this.state.CancelExternalOrderSampleId) === -1}\r\n                                                                // onClick={() => this.orderRecords(this.state.CancelExternalOrderSampleId, this.state.skip, this.state.take)}\r\n                                                                onClick={() => this.orderRecords(this.state.CancelExternalOrderSampleId, this.props.Login.userInfo)}\r\n                                                            >\r\n                                                                <Order className=\"custom_icons\" width=\"20\" height=\"20\" />\r\n                                                            </Nav.Link>}\r\n                                                        <Nav.Link className=\"btn btn-circle outline-grey\" variant=\"link\"\r\n                                                            data-tip={this.props.intl.formatMessage({ id: \"IDS_SAMPLEIMPORT\" })}\r\n                                                            // data-for=\"tooltip-grid-wrap\"\r\n                                                            hidden={this.state.userRoleControlRights.indexOf(this.state.SampleImportId) === -1}\r\n                                                            onClick={() => this.getRegistrationComboService(\"Registration\", \"create\", \"npreregno\",\r\n                                                                this.props.Login.masterData, this.props.Login.userInfo, this.state.preRegisterId, true, false)}>\r\n                                                            <FontAwesomeIcon icon={faFileImport} />\r\n                                                        </Nav.Link>\r\n                                                        <Button className=\"btn btn-circle outline-grey ml-2\" variant=\"link\"\r\n                                                            data-tip={this.props.intl.formatMessage({ id: \"IDS_REFRESH\" })}\r\n                                                            //   data-for=\"tooltip-common-wrap\"\r\n                                                            onClick={() => this.onReload()} >\r\n                                                            <FontAwesomeIcon icon={faSync} style={{ \"width\": \"0.6!important\" }} />\r\n                                                        </Button>\r\n                                                    </ProductList>\r\n                                                }\r\n                                                filterComponent={[\r\n                                                    {\r\n                                                        \"Sample Filter\": <RegistrationFilter\r\n                                                            SampleType={this.state.stateSampleType || []}\r\n                                                            RegistrationType={this.state.stateRegistrationType || []}\r\n                                                            RegistrationSubType={this.state.stateRegistrationSubType || []}\r\n                                                            userInfo={this.props.Login.userInfo || {}}\r\n                                                            SampleTypeValue={this.props.Login.masterData.SampleTypeValue || {}}\r\n                                                            RegTypeValue={this.props.Login.masterData.RegTypeValue || {}}\r\n                                                            RegSubTypeValue={this.props.Login.masterData.RegSubTypeValue || {}}\r\n                                                            FilterStatusValue={this.props.Login.masterData.FilterStatusValue || {}}\r\n                                                            ApprovalConfigVersionValue={this.props.Login.masterData.ApprovalConfigVersionValue || {}}\r\n                                                            ApprovalConfigVersion={this.state.stateApprovalConfigVersion || {}}\r\n                                                            DesignTemplateMapping={this.props.Login.masterData.DesignTemplateMapping}\r\n                                                            DesignTemplateMappingValue={this.props.Login.masterData.DesignTemplateMappingValue || {}}\r\n                                                            FilterStatus={this.state.stateFilterStatus || []}\r\n                                                            FromDate={this.fromDate ? rearrangeDateFormat(this.props.Login.userInfo, this.fromDate) : new Date()}\r\n                                                            ToDate={this.toDate ? rearrangeDateFormat(this.props.Login.userInfo, this.toDate) : new Date()}\r\n                                                            onSampleTypeChange={this.onSampleTypeChange}\r\n                                                            onRegTypeChange={this.onRegTypeChange}\r\n                                                            onRegSubTypeChange={this.onRegSubTypeChange}\r\n                                                            onDesignTemplateChange={this.onDesignTemplateChange}\r\n                                                            onApprovalConfigVersionChange={this.onApprovalConfigVersionChange}\r\n                                                            DynamicDesignMapping={this.state.stateDynamicDesign || []}\r\n                                                            handleFilterDateChange={this.handleFilterDateChange}\r\n                                                            onFilterChange={this.onFilterChange}\r\n                                                        />\r\n                                                    }\r\n                                                ]}\r\n\r\n                                            />\r\n                                        </div>\r\n\r\n                                        <div>\r\n                                            <div style={this.state.showTest === true || this.state.showSubSample === true ?\r\n                                                { display: \"block\" } : { display: \"none\"}} >\r\n                                                {mainDesign}\r\n                                            </div>\r\n                                            {/* <ContentPanel ref={this.myRef} style={this.state.showSample === true ? { display: \"block\" } : { display: \"none\" }}>\r\n                                                <Card ref={this.myRef} className=\"border-0\">\r\n                                                    <Card.Body className='p-0'>\r\n                                                        <Row>\r\n                                                            <Col md={12}>\r\n                                                                <Card className='p-0'>\r\n                                                                    <Card.Header style={{ borderBottom: \"0px\" }}>\r\n                                                                        <span style={{ display: \"inline-block\", marginTop: \"1%\" }} >\r\n                                                                            <h4 >{this.props.intl.formatMessage({ id: \"IDS_SAMPLE\" })}</h4>\r\n                                                                        </span>\r\n                                                                      \r\n                                                                        <button className=\"btn btn-primary btn-padd-custom\" style={{ \"float\": \"right\", \"margin-right\": \"6px\" }}\r\n                                                                            onClick={() => this.showTest()}\r\n                                                                        >\r\n                                                                            <FontAwesomeIcon icon={faEye}></FontAwesomeIcon> { }\r\n                                                                            {this.props.intl.formatMessage({ id: \"IDS_TEST\" })}\r\n                                                                        </button>\r\n                                                                    </Card.Header>\r\n                                                                    <Card.Body>\r\n                                                                        <PerfectScrollbar>\r\n                                                                            <div ref={this.myRef} style={{ height: this.state.initialVerticalWidth + 30 }}>\r\n                                                                                {this.props.Login.masterData.selectedSample && this.props.Login.masterData.selectedSample.length === 1 ?\r\n                                                                                    <SampleInfoView\r\n                                                                                        data={(this.props.Login.masterData.selectedSample && this.props.Login.masterData.selectedSample.length > 0) ?\r\n                                                                                            this.props.Login.masterData.selectedSample[this.props.Login.masterData.selectedSample.length - 1] : {}}\r\n                                                                                        SingleItem={this.props.Login.masterData.selectedSample && this.props.Login.masterData.selectedSample ?\r\n                                                                                            this.state.SingleItem : []}\r\n                                                                                        screenName=\"IDS_SAMPLEINFO\"\r\n                                                                                        userInfo={this.props.Login.userInfo}\r\n\r\n                                                                                    />\r\n\r\n                                                                                    :\r\n                                                                                    <SampleGridTab\r\n                                                                                        userInfo={this.props.Login.masterData.userInfo || {}}\r\n                                                                                        GridData={this.props.Login.masterData.selectedSample || []}\r\n                                                                                        masterData={this.props.Login.masterData}\r\n                                                                                        inputParam={this.props.Login.inputParam}\r\n                                                                                        dataState={this.state.sampleGridDataState}\r\n                                                                                        dataStateChange={this.sampleInfoDataStateChange}\r\n                                                                                        extractedColumnList={this.gridfillingColumn(this.state.DynamicGridItem) || []}\r\n                                                                                        detailedFieldList={this.gridfillingColumn(this.state.DynamicGridMoreField) || []}\r\n                                                                                        primaryKeyField={\"npreregno\"}\r\n                                                                                        expandField=\"expanded\"\r\n                                                                                        screenName=\"IDS_SAMPLEINFO\"\r\n                                                                                    //jsonField={\"jsondata\"}\r\n                                                                                    />\r\n                                                                                }\r\n                                                                            </div>\r\n                                                                        </PerfectScrollbar>\r\n                                                                    </Card.Body>\r\n                                                                </Card>\r\n                                                            </Col>\r\n                                                        </Row>\r\n                                                    </Card.Body>\r\n                                                </Card>\r\n                                            </ContentPanel> */}\r\n                                        </div>\r\n                                    </SplitterLayout>\r\n                                </div>\r\n                                <div className={`${this.state.enablePropertyPopup ? 'active-popup' : \"\"} vertical-tab ${this.state.activeTabIndex ? 'active' : \"\"}`} >\r\n                                    <div className={`${this.state.enablePropertyPopup ? 'active-popup' : \"\"} vertical-tab-content pager_wrap wrap-class ${this.state.activeTabIndex ? 'active' : \"\"}`} style={{ width: this.state.enablePropertyPopup ? this.state.propertyPopupWidth + '%' : \"\" }}>\r\n                                        <span className={` vertical-tab-close ${this.state.activeTabIndex ? 'active' : \"\"}`} onClick={() => this.changePropertyViewClose(false)}><FontAwesomeIcon icon={faChevronRight} /> </span>\r\n                                        <div className={` vertical-tab-content-common position-relative ${this.state.activeTabIndex && this.state.activeTabIndex == 4 ? 'active' : \"\"}`}>\r\n                                            <Nav.Link className='tab-expand-collapse-btn p-0' onClick={() => this.setState({ enablePropertyPopup: !this.state.enablePropertyPopup })}>\r\n                                                {!this.state.enablePropertyPopup ?\r\n                                                    <img src={fullviewExpand} alt=\"Fullview\" width=\"20\" height=\"20\" /> :\r\n                                                    <img src={fullviewCollapse} alt=\"Collapse\" width=\"24\" height=\"24\" />\r\n                                                }\r\n                                            </Nav.Link>\r\n                                            <h4 className='inner_h4'>\r\n                                                {this.props.intl.formatMessage({ id: \"IDS_SAMPLEDETAILS\" })}\r\n                                            </h4>\r\n                                            {this.state.activeTabIndex && this.state.activeTabIndex === 4 ? this.sideNavDetail(\"IDS_SAMPLEDETAILS\", 0) : \"\"}\r\n                                        </div>\r\n                                        {/* {this.props.Login.masterData.RealSampleTypeValue && this.props.Login.masterData.RealSampleTypeValue.nsampletypecode !== SampleType.CLINICALTYPE && */}\r\n                                            <div className={` vertical-tab-content-grid sm-view-v-t position-relative ${this.state.activeTabIndex && this.state.activeTabIndex == 1 ? 'active' : \"\"}`}>\r\n                                                <Nav.Link className='tab-expand-collapse-btn p-0' onClick={() => this.setState({ enablePropertyPopup: !this.state.enablePropertyPopup })}>\r\n                                                    {!this.state.enablePropertyPopup ?\r\n                                                        <img src={fullviewExpand} alt=\"Fullview\" width=\"20\" height=\"20\" /> :\r\n                                                        <img src={fullviewCollapse} alt=\"Collapse\" width=\"24\" height=\"24\" />\r\n                                                    }\r\n                                                </Nav.Link>\r\n                                                <h4 className='inner_h4'>\r\n                                                    {this.props.intl.formatMessage({ id: \"IDS_RESULT\" })}\r\n                                                </h4>\r\n                                                {this.state.activeTabIndex && this.state.activeTabIndex === 1 ? this.sideNavDetail(\"IDS_PARAMETERRESULTS\") : \"\"}\r\n                                            </div>\r\n                                        {/* } */}\r\n                                        <div className={` vertical-tab-content-attachment position-relative ${this.state.activeTabIndex && this.state.activeTabIndex == 2 ? 'active' : \"\"}`}>\r\n                                            <Nav.Link className='tab-expand-collapse-btn p-0' onClick={() => this.setState({ enablePropertyPopup: !this.state.enablePropertyPopup })}>\r\n                                                {!this.state.enablePropertyPopup ?\r\n                                                    <img src={fullviewExpand} alt=\"Fullview\" width=\"20\" height=\"20\" /> :\r\n                                                    <img src={fullviewCollapse} alt=\"Collapse\" width=\"24\" height=\"24\" />\r\n                                                }\r\n                                            </Nav.Link>\r\n                                            {this.state.activeTabIndex && this.state.activeTabIndex === 2 ? this.sideNavDetail(\"IDS_ATTACHMENTS\") : \"\"}\r\n                                        </div>\r\n                                        <div className={` vertical-tab-content-grid-tab position-relative ${this.state.activeTabIndex && this.state.activeTabIndex == 3 ? 'active' : \"\"}`}>\r\n                                            <Nav.Link className='tab-expand-collapse-btn p-0' onClick={() => this.setState({ enablePropertyPopup: !this.state.enablePropertyPopup })}>\r\n                                                {!this.state.enablePropertyPopup ?\r\n                                                    <img src={fullviewExpand} alt=\"Fullview\" width=\"20\" height=\"20\" /> :\r\n                                                    <img src={fullviewCollapse} alt=\"Collapse\" width=\"24\" height=\"24\" />\r\n                                                }\r\n                                            </Nav.Link>\r\n                                            {this.state.activeTabIndex && this.state.activeTabIndex === 3 ? this.sideNavDetail(\"IDS_COMMENTS\") : \"\"}\r\n                                        </div>\r\n                                        {this.props.Login.masterData.RealSampleTypeValue && this.props.Login.masterData.RealSampleTypeValue.noutsourcerequired === transactionStatus.YES &&\r\n                                            <div className={` vertical-tab-content-common position-relative ${this.state.activeTabIndex && this.state.activeTabIndex == 9 ? 'active' : \"\"}`}>\r\n                                                <Nav.Link className='tab-expand-collapse-btn p-0' onClick={() => this.setState({ enablePropertyPopup: !this.state.enablePropertyPopup })}>\r\n                                                    {!this.state.enablePropertyPopup ?\r\n                                                        <img src={fullviewExpand} alt=\"Fullview\" width=\"20\" height=\"20\" /> :\r\n                                                        <img src={fullviewCollapse} alt=\"Collapse\" width=\"24\" height=\"24\" />\r\n                                                    }\r\n                                                </Nav.Link>\r\n                                                {/* <h4 className='inner_h4'>\r\n                                                {this.props.intl.formatMessage({ id: \"IDS_OUTSOURCEDETAILS\" })}\r\n                                            </h4> */}\r\n                                                {this.state.activeTabIndex && this.state.activeTabIndex === 9 ? this.sideNavDetail(\"IDS_OUTSOURCEDETAILS\") : \"\"}\r\n                                            </div>\r\n                                        }\r\n                                    </div>\r\n                                    <div className='tab-head'>\r\n                                        <ul>\r\n                                            <li className={`${this.state.activeTabIndex && this.state.activeTabIndex === 4 ? 'active' : \"\"}`} onClick={() => this.changePropertyView(4)}>\r\n                                                <FontAwesomeIcon icon={faEye} />\r\n                                                <span>\r\n                                                    {this.props.intl.formatMessage({ id: \"IDS_SAMPLEDETAILS\" })}\r\n                                                </span>\r\n                                            </li>\r\n                                            <li className={`${this.state.activeTabIndex && this.state.activeTabIndex === 2 ? 'active' : \"\"}`} onClick={() => this.changePropertyView(2)}>\r\n                                                <FontAwesomeIcon icon={faLink} />\r\n                                                <span>\r\n                                                    {this.props.intl.formatMessage({ id: \"IDS_ATTACHMENTS\" })}\r\n                                                </span>\r\n                                            </li>\r\n                                            <li className={`${this.state.activeTabIndex && this.state.activeTabIndex === 3 ? 'active' : \"\"}`} onClick={() => this.changePropertyView(3)}>\r\n                                                <FontAwesomeIcon icon={faComments} />\r\n                                                <span>\r\n                                                    {this.props.intl.formatMessage({ id: \"IDS_COMMENTS\" })}\r\n                                                </span>\r\n                                            </li>\r\n                                            {/* {this.props.Login.masterData.RealSampleTypeValue && this.props.Login.masterData.RealSampleTypeValue.nsampletypecode !== SampleType.CLINICALTYPE && */}\r\n                                                <li className={`${this.state.activeTabIndex && this.state.activeTabIndex === 1 ? 'active' : \"\"}`} onClick={() => this.changePropertyView(1)}>\r\n                                                    <FontAwesomeIcon icon={faFileInvoice}\r\n                                                        //   data-for=\"tooltip-common-wrap\"\r\n                                                        data-tip={this.props.intl.formatMessage({ id: \"IDS_RESULT\" })} />\r\n                                                    <span>\r\n                                                        {this.props.intl.formatMessage({ id: \"IDS_RESULT\" })}\r\n                                                    </span>\r\n                                                </li>\r\n                                            {/* } */}\r\n                                            {this.props.Login.masterData.RealSampleTypeValue && this.props.Login.masterData.RealSampleTypeValue.noutsourcerequired === transactionStatus.YES &&\r\n                                                <li className={`${this.state.activeTabIndex && this.state.activeTabIndex === 9 ? 'active' : \"\"}`} onClick={() => this.changePropertyView(9)}>\r\n                                                    {/* <FontAwesomeIcon icon= */}\r\n                                                    {getActionIcon(\"faOutsource\")}\r\n                                                    {/* /> */}\r\n                                                    <span>\r\n                                                        {this.props.intl.formatMessage({ id: \"IDS_OUTSOURCE\" })}\r\n                                                    </span>\r\n                                                </li>\r\n                                            }\r\n                                        </ul>\r\n                                        <span className='tab-click-toggle-btn'>\r\n                                            <CustomSwitch\r\n                                                label={this.props.intl.formatMessage({ id: \"IDS_AUTOSHOW\" })}\r\n                                                type=\"switch\"\r\n                                                name={\"Auto Click\"}\r\n                                                onChange={(event) => this.onInputSwitchOnChange(event)}\r\n                                                defaultValue={this.state.enableAutoClick}\r\n                                                isMandatory={false}\r\n                                                required={true}\r\n                                                checked={this.state.enableAutoClick}\r\n                                            />\r\n                                        </span>\r\n                                        {/* <span className='tab-click-toggle-btn'>\r\n                                            <CustomSwitch\r\n                                                label={this.props.intl.formatMessage({ id: \"IDS_POPUPNAV\" })}\r\n                                                type=\"switch\"\r\n                                                name={\"PopupNav\"}\r\n                                                onChange={(event) => this.onInputSwitchOnChange(event)}\r\n                                                defaultValue={this.state.enablePropertyPopup}\r\n                                                isMandatory={false}\r\n                                                required={true}\r\n                                                checked={this.state.enablePropertyPopup}\r\n                                            />\r\n                                        </span> */}\r\n                                    </div>\r\n                                </div>\r\n                            </ListWrapper>\r\n                        </Col>\r\n                    </Row>\r\n                </ListWrapper >\r\n                {\r\n                    this.props.Login.openPortal ?\r\n                        <PortalModal>\r\n                            <PreRegisterSlideOutModal\r\n                                postParamList={this.postParamList}\r\n                                PrevoiusLoginData={this.PrevoiusLoginData}\r\n                                closeModal={this.closeModal}\r\n                                operation={\"create\"}\r\n                                screenName={\"IDS_REGISTRATION\"}\r\n                                onSaveClick={this.onSaveClick}\r\n                                validateEsign={this.validateEsign}\r\n                                updateStore={this.props.updateStore}\r\n                                comboComponents={this.state.comboComponents}\r\n                                withoutCombocomponent={this.state.withoutCombocomponent}\r\n                                userRoleControlRights={this.state.userRoleControlRights}\r\n                                fromDate={this.fromDate}\r\n                                toDate={this.toDate}\r\n                                samplecombinationunique={this.state.sampleCombinationUnique}\r\n                                subsamplecombinationunique={this.state.subsampleCombinationUnique}\r\n                                exportTemplateId={this.state.exportTemplateId}\r\n                                importTemplateId={this.state.importTemplateId}\r\n                                sampleexportfields={this.state.sampleexportfields}\r\n                                subsampleexportfields={this.state.subsampleexportfields}\r\n                                //  specBasedComponent={this.state.specBasedComponent}\r\n                                mandatoryFields={[\r\n                                    { \"idsName\": \"IDS_PRODUCTCATEGORY\", \"dataField\": \"nproductcatcode\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n                                    { \"idsName\": \"IDS_PRODUCTNAME\", \"dataField\": \"sproductname\", \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"textbox\" }]}\r\n                            />\r\n                        </PortalModal>\r\n                        : \"\"\r\n                }\r\n                {\r\n                    (this.props.Login.openModal || this.state.showQRCode || this.state.showBarcode) &&\r\n                    <SlideOutModal show={this.props.Login.openModal || this.state.showQRCode || this.state.showBarcode}\r\n                        //|| this.props.Login.loadEsign}\r\n                        closeModal={this.state.showQRCode ? () => this.setState({ showQRCode: false, openModal: false })\r\n                            : this.state.showBarcode ? () => this.setState({ showBarcode: false, openModal: false })\r\n                            : this.props.Login.loadRegSubSample || this.props.Login.loadFile\r\n                                || this.props.Login.loadChildTest ||  this.props.Login.loadAdhocTest ? this.closeChildModal\r\n                                : this.closeModal}\r\n                        hideSave = {this.state.showBarcode ? true : false}\r\n                        size={this.props.Login.parentPopUpSize}\r\n                        loginoperation={this.props.Login.loadPrinter ? true : false}\r\n                        buttonLabel={this.state.showQRCode || this.props.Login.loadPrinter ? \"print\" : undefined}\r\n                        operation={this.props.Login.addMaster ? this.props.Login.masterOperation[this.props.Login.masterIndex] : this.state.showQRCode ? \"Preview\" :\r\n                            this.props.Login.loadComponent ||\r\n                                this.props.Login.loadTest || this.props.Login.loadSource ||\r\n                                this.props.Login.loadFile ? this.props.Login.childoperation : this.props.Login.operation}\r\n                        inputParam={this.props.Login.inputParam}\r\n                        screenName={this.state.showQRCode ? \"QR Code\"\r\n                            : this.state.showBarcode ? \"Barcode\"\r\n                            : this.props.Login.loadTest || this.props.Login.loadFile ?\r\n                                this.props.Login.ChildscreenName : this.props.Login.screenName}\r\n                        esign={this.props.Login.loadEsign}\r\n                        innerPopup={this.props.Login.loadComponent}\r\n                        onSaveClick={this.props.Login.operation === 'barcode' ?\r\n                            () => this.props.barcodeGeneration(this.props.Login.barcodeSelectedRecord,\r\n                                this.props.Login.ncontrolcode, this.props.Login.userInfo, this.state.selectedRecord)\r\n                            : this.state.showQRCode ?\r\n                                () => this.setState({ showQRCode: false, openModal: false })\r\n                                // : this.state.showBarcode ? \r\n                                //     () => this.setState({ showBarcode: false, openModal: false })\r\n                                : this.props.Login.addMaster ? this.onSaveMasterRecord\r\n                                    : this.props.Login.loadRegSubSample ? this.onSaveSubSampleClick\r\n                                        : this.props.Login.loadFile ? this.onSaveFileClick\r\n                                            : this.props.Login.loadPrinter ? this.onSavePrinterClick\r\n                                                : this.props.Login.loadChildTest  ? this.onSaveChildTestClick\r\n                                                    : this.props.Login.loadAdhocTest ? this.onSaveAdhocTestClick\r\n                                                    //: this.props.Login.outsourcetest ? this.onSaveOutSourceTest\r\n                                                    : this.props.Login.outsourcetest ? this.onSaveOutSourceSample\r\n                                                        : this.props.Login.screenName ? this.onSaveCancelOrder\r\n                                                            : this.onSaveClick}\r\n                        validateEsign={this.validateEsign}\r\n                        showSaveContinue={this.props.Login.showSaveContinue}\r\n                        selectedRecord={!this.props.Login.loadEsign ? this.props.Login.addMaster ? this.state.selectedMaster[this.props.Login.masterIndex] :\r\n                            this.props.Login.loadComponent ? this.state.selectComponent : this.props.Login.loadPrinter ? this.state.selectedPrinterData\r\n                                : this.props.Login.loadTest ? this.state.selectedTestData : this.props.Login.loadFile ? this.state.selectedFile\r\n                                    : this.props.Login.loadPoolSource ? this.state.selectedSourceData : this.state.selectedRecord : this.state.selectedRecord}\r\n                        mandatoryFields={this.props.Login.screenName == \"External Sample\" ? this.onSaveCancelOrderMandatoryFields : this.props.Login.addMaster ?\r\n                            this.props.Login.masterextractedColumnList[this.props.Login.masterIndex].filter(x => x.mandatory === true)\r\n                            : this.mandatoryList(this.props.Login.loadPreregister,\r\n                                this.props.Login.loadPrinter, this.props.Login.loadFile,\r\n                                this.props.Login.loadChildTest, this.props.Login.loadRegSubSample,\r\n                                this.props.Login.operation, this.props.Login.outsourcetest,this.props.Login.loadAdhocTest)}\r\n                        addComponent={this.props.Login.loadEsign ?\r\n                            <Esign operation={this.props.Login.operation}\r\n                                onInputOnChange={this.onInputOnChange}\r\n                                inputParam={this.props.Login.inputParam}\r\n                                selectedRecord={this.state.selectedRecord || {}}\r\n                            />\r\n                            : this.props.Login.operation === \"barcode\" ?\r\n                                <AddBarcode\r\n                                    selectedRecord={this.state.selectedRecord || {}}\r\n                                    onInputOnChange={this.onInputOnChange}\r\n                                    onNumericInputChange={this.onNumericInputChange}\r\n                                    onComboChange={this.onComboChange}\r\n                                    BarcodeList={this.props.Login.BarcodeList}\r\n                                    Printer={this.props.Login.Printer}\r\n                                    nbarcodeprint={this.props.Login.nbarcodeprint}\r\n                                // selectedPrinterData={this.state.selectedPrinterData}\r\n\r\n                                >\r\n                                </AddBarcode> : this.state.showQRCode ?\r\n                                    <Row>\r\n                                        <Col md={6}>\r\n                                            <QRCode value={this.state.selectedRecord.barcodevalue} />\r\n                                        </Col>\r\n\r\n                                        <Col md={6}>\r\n                                            <Row>\r\n                                                <Col md={12}>\r\n                                                    <FormLabel>{this.props.intl.formatMessage({ id: \"IDS_ARNO\" })}:</FormLabel>\r\n                                                    <ReadOnlyText>{this.state.selectedRecord.barcodeData.sarno || '-'}</ReadOnlyText>\r\n                                                </Col>\r\n                                                <Col md={12}>\r\n                                                    <FormLabel>{this.props.intl.formatMessage({ id: \"IDS_SAMPLETYPE\" })}:</FormLabel>\r\n                                                    <ReadOnlyText>{this.state.selectedRecord.barcodeData.Product || '-'}</ReadOnlyText>\r\n                                                </Col>\r\n                                                {/* <Col md={12}>\r\n                                            <FormLabel>{this.props.intl.formatMessage({ id: \"IDS_COLLECTIONDATE\" })}:</FormLabel>\r\n                                            <ReadOnlyText>{this.state.selectedRecord.barcodeData.scollectiondate || '-'}</ReadOnlyText>\r\n                                        </Col>\r\n                                        <Col md={12}>\r\n                                            <FormLabel>{this.props.intl.formatMessage({ id: \"IDS_SUBMITTER\" })}:</FormLabel>\r\n                                            <ReadOnlyText>{this.state.selectedRecord.barcodeData.submitter || '-'}</ReadOnlyText>\r\n                                        </Col> */}\r\n                                            </Row>\r\n                                        </Col>\r\n                                    </Row>\r\n                                    : this.state.showBarcode ?\r\n                                        <BarcodeGeneratorComponent\r\n                                            barcodeData={this.state.selectedRecord.generateBarcodeValue}\r\n                                            additionalDesignsToPrint={this.state.selectedRecord.additionDesignToPrint}\r\n                                            background=\"#ffffff\"\r\n                                            textAlign=\"center\"\r\n                                            fontSize={38}\r\n                                            fontOption=\"bold\"\r\n                                            textPosition=\"bottom\"\r\n                                            lineColor=\"#000000\"\r\n                                            width={3}\r\n                                            height={100}\r\n                                            format=\"CODE128\"\r\n                                            margin={10}\r\n                                            marginTop={50}\r\n                                            marginBottom={undefined}\r\n                                            marginLeft={20}\r\n                                            marginRight={undefined}\r\n                                            flat={true}\r\n                                            printBarcode={true}\r\n                                            displayValue={true}\r\n                                        />\r\n                                    :this.props.Login.addMaster ?\r\n                                        <AddMasterRecords\r\n                                            selectedControl={this.props.Login.selectedControl[this.props.Login.masterIndex]}\r\n                                            fieldList={this.props.Login.masterfieldList && this.props.Login.masterfieldList[this.props.Login.masterIndex]}\r\n                                            extractedColumnList={this.props.Login.masterextractedColumnList[this.props.Login.masterIndex]}\r\n                                            // primaryKeyField={this.props.Login.masterprimaryKeyField}\r\n                                            selectedRecord={this.state.selectedMaster[this.props.Login.masterIndex] || {}}\r\n                                            onInputOnChange={this.onInputOnChangeMaster}\r\n                                            onComboChange={this.onComboChangeMaster}\r\n                                            handleDateChange={this.handleDateChangeMaster}\r\n                                            dataList={this.props.Login.masterdataList && this.props.Login.masterdataList[this.props.Login.masterIndex]}\r\n                                            onNumericInputOnChange={this.onNumericInputOnChangeMaster}\r\n                                            masterDesign={this.props.Login.masterDesign && this.props.Login.masterDesign[this.props.Login.masterIndex]}\r\n                                            mastertimeZoneList={this.props.Login.mastertimeZoneList}\r\n                                            masterdefaultTimeZone={this.props.Login.masterdefaultTimeZone}\r\n                                            onComboChangeMasterDyanmic={this.onComboChangeMasterDyanmic}\r\n                                            handleDateChangeMasterDynamic={this.handleDateChangeMasterDynamic}\r\n                                            onInputOnChangeMasterDynamic={this.onInputOnChangeMasterDynamic}\r\n                                            onNumericInputChangeMasterDynamic={this.onNumericInputChangeMasterDynamic}\r\n                                            onNumericBlurMasterDynamic={this.onNumericBlurMasterDynamic}\r\n                                            userInfo={this.props.Login.userInfo}\r\n                                            Login={this.props.Login}\r\n                                            addMasterRecord={this.addMasterRecord}\r\n                                            editMasterRecord={this.editMasterRecord}\r\n                                            userRoleControlRights={this.props.Login.userRoleControlRights}\r\n                                            masterIndex={this.props.Login.masterIndex} />\r\n                                        : this.props.Login.loadRegSubSample ?\r\n                                            <AddSubSample\r\n                                                editfield={this.props.Login.masterData.DynamicDesign && JSON.parse(this.props.Login.masterData.DynamicDesign.jsondata.value)}\r\n                                                Component={this.props.Login.lstComponent || []}\r\n                                                selectComponent={this.state.selectedRecord}\r\n                                                templateData={this.props.Login.masterData.SubSampleTemplate &&\r\n                                                    this.props.Login.masterData.SubSampleTemplate.jsondata}\r\n                                                userInfo={this.props.Login.userInfo}\r\n                                                timeZoneList={this.props.Login.timeZoneList}\r\n                                                defaultTimeZone={this.props.Login.defaultTimeZone}\r\n                                                handleDateChange={this.handleDateSubSampleChange}\r\n                                                onInputOnChange={this.onInputOnSubSampleChange}\r\n                                                onNumericInputChange={this.onNumericInputSubSampleChange}\r\n                                                onNumericBlur={this.onNumericBlurSubSample}\r\n                                                comboData={this.props.Login.regSubSamplecomboData}\r\n                                                onComboChange={this.onComboSubSampleChange}\r\n                                                onComponentChange={this.onComponentChange}\r\n                                                TestCombined={this.props.Login.TestCombined || []}\r\n                                                TestChange={this.onComboChange}\r\n                                                selectedTestData={this.state.selectedRecord}\r\n                                                selectedTestPackageData={this.state.selectedTestPackageData}\r\n                                                childoperation={this.props.Login.operation}\r\n                                                specBasedComponent={this.props.Login.specBasedComponent}\r\n                                                userRoleControlRights={this.props.Login.userRoleControlRights}\r\n                                                selectPackage={this.state.selectedRecord}\r\n                                                TestPackage={this.props.Login.TestPackage || []}\r\n                                                onTestPackageChange={this.onTestPackageChange}\r\n                                                operation={this.props.Login.operation}\r\n                                                hideQualisForms={this.props.Login.hideQualisForms}\r\n                                                addMasterRecord={this.addMasterRecord}\r\n                                                editMasterRecord={this.editMasterRecord}\r\n                                                hasTest={true}\r\n                                                onDropFile={this.onDropFileSubSample}\r\n                                                deleteAttachment={this.deleteAttachmentSubSample}\r\n                                                onTestSectionChange={this.onTestSectionChange}\r\n                                                TestSection={this.props.Login.TestSection || []}\r\n                                                selectSection={this.state.selectedRecord}\r\n\r\n                                            />\r\n                                            : this.props.Login.loadFile ?\r\n                                                <AddFile\r\n                                                    selectedFile={this.state.selectedFile || {}}\r\n                                                    onInputOnChange={this.onInputOnChange}\r\n                                                    onDrop={this.onDropComponentFile}\r\n                                                    deleteAttachment={this.deleteAttachment}\r\n                                                    actionType={this.state.actionType}\r\n                                                    maxSize={20}\r\n                                                    maxFiles={1}\r\n                                                />  :\r\n                                                this.props.Login.loadPrinter ?\r\n                                                <AddPrinter\r\n                                                    printer={this.props.Login.printer}\r\n                                                    barcode={this.props.Login.barcode}\r\n                                                    selectedPrinterData={this.state.selectedPrinterData}\r\n                                                    PrinterChange={this.PrinterChange}\r\n                                                />:\r\n                                                this.props.Login.loadChildTest ?\r\n                                                    <AddTest\r\n                                                        TestCombined={this.props.Login.TestCombined}\r\n                                                        selectedTestData={this.state.selectedRecord}\r\n                                                        TestChange={this.onComboChange}\r\n                                                        TestPackageChange={this.onComboTestPackageChange}\r\n                                                        userRoleControlRights={this.props.Login.userRoleControlRights}\r\n                                                        selectPackage={this.state.selectedRecord}\r\n                                                        selectSection={this.state.selectedRecord}\r\n                                                        TestPackage={this.props.Login.TestPackage || []}\r\n                                                        TestSection={this.props.Login.TestSection || []}\r\n                                                        onTestPackageChange={this.onTestPackageChange}\r\n                                                        onTestSectionChange={this.onTestSectionChange}\r\n                                                        hideQualisForms={this.props.Login.hideQualisForms}\r\n\r\n                                                    /> :\r\n                                                    this.props.Login.loadChildTest ?\r\n                                                        <AddTest\r\n                                                            TestCombined={this.props.Login.availableTest}\r\n                                                            selectedTestData={this.state.selectedRecord}\r\n                                                            TestChange={this.onComboChange}\r\n                                                            TestPackageChange={this.onComboTestPackageChange}\r\n                                                            userRoleControlRights={this.props.Login.userRoleControlRights}\r\n                                                            selectPackage={this.state.selectedRecord}\r\n                                                            TestPackage={this.props.Login.TestPackage || []}\r\n                                                            onTestPackageChange={this.onTestPackageChange}\r\n                                                            hideQualisForms={this.props.Login.hideQualisForms}\r\n                                                            /> : this.props.Login.loadAdhocTest ?\r\n                                                        //ALPD-3615\r\n                                                        <AddAdhocTest\r\n                                                            availableAdhocTest={this.props.Login.availableAdhocTest}\r\n                                                            selectedAdhocTestData={this.state.selectedRecord}\r\n                                                            TestChange={this.onComboChange}\r\n                                                            userRoleControlRights={this.props.Login.userRoleControlRights}\r\n                                                            onInputOnChange={this.onInputOnChange}\r\n    \r\n                                                        />:\r\n                                                        this.props.Login.screenName == \"External Sample\" ?\r\n                                                            <ExternalOrder\r\n                                                                orders={this.state.selectedRecord.orders || []}\r\n                                                                //headerSelectionChange={this.headerSelectionChange}\r\n                                                                selectionChange={this.selectionChange}\r\n                                                                //addSelectAll={this.state.addSelectAll}\r\n                                                                onInputOnChange={this.onInputOnChange}\r\n                                                                selectedRecord={this.state.selectedRecord || {}}\r\n                                                                onOrderSearch={this.onOrderSearch}\r\n                                                                userInfo={this.props.Login.userInfo}\r\n                                                                externalOrderTypeList={this.props.Login.externalOrderTypeList}\r\n                                                                selectedExternalOrderType={this.props.Login.selectedExternalOrderType}\r\n                                                                onComboChange={this.onComboChange}\r\n                                                            />\r\n                                                            : this.props.Login.outsourcetest ?\r\n                                                                <Row>\r\n                                                                    <Col>\r\n                                                                        <FormSelectSearch\r\n                                                                            name={\"outsourcesite\"}\r\n                                                                            formLabel={this.props.intl.formatMessage({ id: \"IDS_SITE\" })}\r\n                                                                            placeholder=\"Please Select...\"\r\n                                                                            options={this.props.Login.outSourceSiteList || []}\r\n                                                                            //optionId={props.extractedColumnList[1].optionId}\r\n                                                                            //optionValue={props.extractedColumnList[1].optionValue}\r\n                                                                            value={this.props.Login.selectedRecord ? this.props.Login.selectedRecord[\"outsourcesite\"] : \"\"}\r\n                                                                            isMandatory={true}\r\n                                                                            required={true}\r\n                                                                            isMulti={false}\r\n                                                                            isClearable={true}\r\n                                                                            isSearchable={true}\r\n                                                                            isDisabled={false}\r\n                                                                            closeMenuOnSelect={true}\r\n                                                                            alphabeticalSort={true}\r\n                                                                            onChange={(event) => this.onComboChange(event, \"outsourcesite\")}\r\n                                                                        //isInvalid={props.failedControls.indexOf(props.extractedColumnList[1].dataField) !==-1}\r\n\r\n                                                                        />\r\n\r\n                                                                        <FormMultiSelect\r\n                                                                            name={\"outsourcetestlist\"}\r\n                                                                            label={this.props.intl.formatMessage({ id: \"IDS_TESTNAME\" })}\r\n                                                                            options={this.props.Login.outSourceTestList || []}\r\n                                                                            optionId={\"ntransactiontestcode\"}\r\n                                                                            optionValue=\"stestsynonym\"\r\n                                                                            value={this.props.Login.selectedRecord && this.props.Login.selectedRecord[\"outSourceTestList\"] ? this.props.Login.selectedRecord[\"outSourceTestList\"] : []}\r\n                                                                            isMandatory={true}\r\n                                                                            isClearable={true}\r\n                                                                            disableSearch={false}\r\n                                                                            disabled={false}\r\n                                                                            closeMenuOnSelect={false}\r\n                                                                            alphabeticalSort={true}\r\n                                                                            onChange={(event) => this.onComboChange(event, \"outSourceTestList\")}\r\n\r\n                                                                        />\r\n\r\n                                                                        <DateTimePicker\r\n                                                                            name={\"doutsourcedate\"}\r\n                                                                            label={this.props.intl.formatMessage({ id: \"IDS_OUTSOURCEDATE\" })}\r\n                                                                            className='form-control'\r\n                                                                            placeholderText={this.props.intl.formatMessage({ id: \"IDS_SELECTDATE\" })}\r\n                                                                            selected={this.props.Login.selectedRecord[\"doutsourcedate\"] ? this.props.Login.selectedRecord[\"doutsourcedate\"] : new Date()}\r\n                                                                            dateFormat={this.props.Login.userInfo.ssitedate}\r\n                                                                            timeInputLabel={this.props.intl.formatMessage({ id: \"IDS_TIME\" })}\r\n                                                                            showTimeInput={false}\r\n                                                                            isClearable={true}\r\n                                                                            isMandatory={true}\r\n                                                                            required={true}\r\n                                                                            //maxDate={props.currentTime}\r\n                                                                            //maxTime={this.props.Login.currentTime}\r\n                                                                            onChange={date => this.handleDateChange(\"doutsourcedate\", date)}\r\n                                                                            value={this.props.Login.selectedRecord ? this.props.Login.selectedRecord[\"doutsourcedate\"] : \"\"}\r\n\r\n\r\n\r\n\r\n\r\n                                                                        />\r\n                                                                        <FormInput\r\n                                                                            label={this.props.intl.formatMessage({ id: \"IDS_SAMPLEID\" })}\r\n                                                                            name=\"ssampleid\"\r\n                                                                            type=\"text\"\r\n                                                                            onChange={(event) => this.onInputOnChange(event)}\r\n                                                                            placeholder={this.props.intl.formatMessage({ id: \"IDS_SAMPLEID\" })}\r\n                                                                            value={this.props.Login.selectedRecord ? this.props.Login.selectedRecord[\"ssampleid\"] : \"\"}\r\n                                                                            isMandatory={true}\r\n                                                                            required={true}\r\n                                                                            maxLength={100}\r\n                                                                        />\r\n\r\n                                                                        <FormTextarea\r\n                                                                            name={\"sremarks\"}\r\n                                                                            label={this.props.intl.formatMessage({ id: \"IDS_REMARKS\" })}\r\n                                                                            onChange={(event) => this.onInputOnChange(event)}\r\n                                                                            placeholder={this.props.intl.formatMessage({ id: \"IDS_REMARKS\" })}\r\n                                                                            value={this.props.Login.selectedRecord ? this.props.Login.selectedRecord[\"sremarks\"] : \"\"}\r\n                                                                            rows=\"2\"\r\n                                                                            required={false}\r\n                                                                            maxLength={255}\r\n                                                                        >\r\n                                                                        </FormTextarea>\r\n\r\n                                                                        <FormTextarea\r\n                                                                            name={\"sshipmenttracking\"}\r\n                                                                            label={this.props.intl.formatMessage({ id: \"IDS_SHIPMENTTRACKING\" })}\r\n                                                                            onChange={(event) => this.onInputOnChange(event)}\r\n                                                                            placeholder={this.props.intl.formatMessage({ id: \"IDS_SHIPMENTTRACKING\" })}\r\n                                                                            value={this.props.Login.selectedRecord ? this.props.Login.selectedRecord[\"sshipmenttracking\"] : \"\"}\r\n                                                                            rows=\"2\"\r\n                                                                            required={false}\r\n                                                                            maxLength={255}\r\n                                                                        >\r\n                                                                        </FormTextarea>\r\n                                                                    </Col>\r\n                                                                </Row>\r\n\r\n                                                                : \"\"\r\n                        }\r\n                    />\r\n                }\r\n\r\n                {this.props.Login.openChildModal &&\r\n                    <SlideOutModal show={this.props.Login.openChildModal}\r\n                        closeModal={this.closeSendToStoreChildModal}\r\n                        operation={this.props.Login.MappingFields ? \"\" : \"Store\"}\r\n                        inputParam={this.props.Login.inputParam}\r\n                        screenName={this.props.Login.MappingFields ? this.props.intl.formatMessage({ id: \"IDS_ORDERMAPPING\" }) : this.props.intl.formatMessage({ id: \"IDS_SAMPLE\" })}\r\n                        onSaveClick={this.props.Login.MappingFields ? this.onSaveModalClick : this.onSendToStoreSample}\r\n                        esign={this.props.Login.loadEsign}\r\n                        validateEsign={this.validateEsign}\r\n                        masterStatus={this.props.Login.masterStatus}\r\n                        updateStore={this.props.updateStore}\r\n                        selectedRecord={this.state.selectedRecord || {}}\r\n                        mandatoryFields={this.props.Login.MappingFields && this.mandatoryMappingList()}\r\n                        addComponent={this.props.Login.loadEsign ?\r\n                            <Esign operation={this.props.Login.operation}\r\n                                formatMessage={this.props.intl.formatMessage}\r\n                                onInputOnChange={this.onInputOnChange}\r\n                                inputParam={this.props.Login.inputParam}\r\n                                selectedRecord={this.state.selectedRecord || {}}\r\n                            />\r\n                            : this.props.Login.MappingFields ?\r\n                                <MappingFields\r\n                                    selectedRecord={this.state.selectedRecord}\r\n                                    selectedDetailField={this.state.selectedDetailField}\r\n                                    orderTypeList={this.props.Login.orderTypeList}\r\n                                    orderList={this.props.Login.orderList}\r\n\r\n                                    onComboChange={this.onComboChange}\r\n                                /> :\r\n                                <MoveSampleOrContainers\r\n                                    treeData={this.state.treeData}\r\n                                    selectedRecord={this.state.selectedRecord || {}}\r\n                                    itemRender={this.itemRender}\r\n                                    onExpandChange={this.onExpandChange}\r\n                                    onItemClick={this.onItemClick}\r\n                                    onComboChange={this.onComboChangeTree}\r\n                                    onNumericInputChange={this.onNumericInputChangeSample}\r\n                                    storageCategory={this.props.Login.masterData.storageCategory || []}\r\n                                    unitMaster={this.props.Login.masterData.unitMaster || []}\r\n                                    approvedLocation={this.props.Login.masterData.approvedLocation || []}\r\n                                    isSendToStore={true}\r\n                                />\r\n                        }\r\n                    />\r\n                }\r\n\r\n                {this.state.showConfirmAlert ? this.confirmAlert() : \"\"}\r\n            </>\r\n        );\r\n    }\r\n\r\n    onNumericInputChangeSample = (value, name) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n\r\n        selectedRecord[name] = value;\r\n        //  }\r\n\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    onComboChangeMaster = (comboData, fieldName, item) => {\r\n        const selectedMaster = this.state.selectedMaster || [];\r\n        const masterIndex = this.props.Login.masterIndex\r\n        selectedMaster[masterIndex] = selectedMaster[masterIndex] && { ...selectedMaster[masterIndex] } || {}\r\n        if (comboData !== null) {\r\n            if (this.props.Login.selectedControl[masterIndex].table.item.nformcode === 137) {\r\n                selectedMaster[masterIndex][item.tableDataField] = comboData.value;\r\n            }\r\n            else if (item.foreignDataField) {\r\n                selectedMaster[masterIndex][item.foreignDataField] = comboData.value;\r\n            }\r\n        }\r\n        selectedMaster[masterIndex][fieldName] = comboData;\r\n        if (item.childIndex !== undefined) {\r\n            this.props.getChildComboMaster(selectedMaster, fieldName, item,\r\n                this.props.Login.selectedControl,\r\n                this.props.Login.masterfieldList,\r\n                this.props.Login.masterdataList, this.props.Login.userInfo, masterIndex)\r\n        } else {\r\n            this.setState({ selectedMaster });\r\n        }\r\n\r\n    }\r\n\r\n    onSaveOutSourceTest = () => {\r\n\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        const outSourceSiteData = this.props.Login.outSourceSiteData;\r\n        const destinationsitecode = selectedRecord[\"outsourcesite\"].value;\r\n\r\n        this.props.outsourceTest({ ...outSourceSiteData, destinationsitecode }, this.props.Login.masterData);\r\n    }\r\n\r\n    onSaveModalClick = () => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        let Map = {};\r\n        Map[\"npreregno\"] = this.props.Login.orderDetails && parseInt(this.props.Login.orderDetails.subSample.npreregno) || -1;\r\n        Map[\"ntransactionsamplecode\"] = this.props.Login.orderDetails && parseInt(this.props.Login.orderDetails.subSample.ntransactionsamplecode) || -1;\r\n        Map[\"nexternalordersamplecode\"] = selectedRecord.nexternalordercode && selectedRecord.nexternalordercode.value || -1;\r\n        Map[\"nexternalordercode\"] = selectedRecord.nexternalordercode && selectedRecord.nexternalordercode.item.nexternalordercode || -1;\r\n        Map[\"sexternalOrderID\"] = selectedRecord.nexternalordercode && selectedRecord.nexternalordercode.item.sexternalorderid;\r\n        Map[\"sexternalSampleID\"] = selectedRecord.nexternalordercode && selectedRecord.nexternalordercode.label;\r\n        Map[\"manualOrderData\"] = this.props.Login.orderDetails && parseInt(this.props.Login.orderDetails.selectedSample.OrderCodeData);\r\n        Map[\"userinfo\"] = this.props.Login.userInfo;\r\n        Map[\"FromDate\"] = this.props.Login.masterData.FromDate;\r\n        Map[\"ToDate\"] = this.props.Login.masterData.ToDate;\r\n        Map[\"nsampletypecode\"] = this.props.Login.masterData.nsampletypecode;\r\n        Map[\"nregtypecode\"] = this.props.Login.masterData.RegTypeValue.nregtypecode;\r\n        Map[\"nregsubtypecode\"] = this.props.Login.masterData.RegSubTypeValue.nregsubtypecode;\r\n        Map[\"nfilterstatus\"] = this.props.Login.masterData.nfilterstatus;\r\n        Map[\"ndesigntemplatemappingcode\"] = this.props.Login.masterData.ndesigntemplatemappingcode;\r\n        Map[\"napproveconfversioncode\"] = this.props.Login.masterData.napproveconfversioncode;\r\n        Map[\"nneedsubsample\"] = this.props.Login.masterData.nneedsubsample;\r\n        Map[\"activeSampleTab\"] = this.props.Login.masterData.activeSampleTab;\r\n        Map[\"checkBoxOperation\"] = this.props.Login.masterData.checkBoxOperation;\r\n        Map[\"activeSubSampleTab\"] = this.props.Login.masterData.activeSubSampleTab;\r\n        Map[\"activeTestTab\"] = this.props.Login.masterData.activeTestTab;\r\n        Map[\"ntype\"] = 5;\r\n        Map[\"url\"] = this.props.Login.settings[24];\r\n        const inputParam = {\r\n            inputData: Map,\r\n            searchRef: this.searchRef,\r\n            isClearSearch: this.props.Login.isClearSearch, masterData: this.props.Login.masterData\r\n        };\r\n        this.props.orderMapping(inputParam);\r\n    }\r\n\r\n    outsourceTest = (test) => {\r\n        // console.log(\"test:\", test);\r\n        if (this.props.Login.masterData.RealSampleTypeValue\r\n            && this.props.Login.masterData.RealSampleTypeValue.nsampletypecode === SampleType.CLINICALTYPE\r\n            && this.props.Login.masterData.RealSampleTypeValue.nportalrequired === transactionStatus.YES) {\r\n            if (test.test.ntransactionstatus === transactionStatus.REGISTER) {\r\n                const inputData = {\r\n                    \"registrationtest\": {\r\n                        npreregno: test.test.npreregno,\r\n                        ntransactionsamplecode: test.test.ntransactionsamplecode,\r\n                        ntestcode: test.test.ntestcode,\r\n                        ntransactiontestcode: test.test.ntransactiontestcode\r\n                    },\r\n                    userinfo: this.props.Login.userInfo,\r\n                    ndesigntemplatemappingcode: this.props.Login.masterData.RealDesignTemplateMappingValue\r\n                        && this.props.Login.masterData.RealDesignTemplateMappingValue.ndesigntemplatemappingcode,\r\n                    // destinationsitecode:2\r\n                }\r\n                const inputParam = { inputData, screenName: \"IDS_OUTSOURCETEST\" };\r\n                this.props.getOutSourceSite(inputParam);\r\n                // this.props.outsourceTest(inputData);\r\n            }\r\n            else {\r\n                toast.info(this.props.intl.formatMessage({ id: \"IDS_SELECTREGISTEREDTEST\" }));\r\n            }\r\n        }\r\n        else {\r\n            toast.info(this.props.intl.formatMessage({ id: \"IDS_OUTSOURCEOPTIONNOTAVAIL\" }));\r\n        }\r\n    }\r\n    onSaveOutSourceSample = () => {\r\n\r\n        if (Date.parse(this.props.Login.regDate) <= Date.parse(this.state.selectedRecord[\"doutsourcedate\"].toDateString())) {\r\n            const selectedRecord = this.state.selectedRecord || {};\r\n            const outSourceSiteData = this.props.Login.outSourceSiteData;\r\n            const destinationsitecode = selectedRecord[\"outsourcesite\"].value;\r\n            //const selectedTest = selectedRecord[\"outSourceTestList\"].item;\r\n            const selectedTest = selectedRecord[\"outSourceTestList\"].map(item => item.item);\r\n\r\n\r\n\r\n\r\n            const otherdetails = {\r\n                doutsourcedate: selectedRecord[\"doutsourcedate\"],\r\n                sremarks: selectedRecord[\"sremarks\"],\r\n                ssampleid: selectedRecord[\"ssampleid\"],\r\n                sshipmenttracking: selectedRecord[\"sshipmenttracking\"]\r\n            };\r\n            // const doutsourcedate=selectedRecord[\"doutsourcedate\"];\r\n            // const sremarks=selectedRecord[\"sremarks\"];\r\n            // const ssampleid=selectedRecord[\"ssampleid\"];\r\n            // const sshipmenttracking=selectedRecord[\"sshipmenttracking\"];\r\n            this.props.outsourceSampleTest({ ...outSourceSiteData, destinationsitecode, selectedTest, otherdetails }, this.props.Login.masterData);\r\n        }\r\n        else {\r\n            toast.info(this.props.intl.formatMessage({ id: \"IDS_OUTSOURCEDATEGRATERTHANREGDATE\" }));\r\n        }\r\n    }\r\n\r\n    outsourceSample = (test) => {\r\n        // console.log(\"test:\", test);\r\n        if (this.props.Login.masterData.RealSampleTypeValue\r\n            && this.props.Login.masterData.RealSampleTypeValue.nsampletypecode === SampleType.CLINICALTYPE\r\n            && this.props.Login.masterData.RealSampleTypeValue.nportalrequired === transactionStatus.YES) {\r\n            // if(test.test.ntransactionstatus === transactionStatus.REGISTER || test.test.ntransactionstatus ===transactionStatus.PARTIAL)\r\n            if (test.test.ntransactionstatus !== transactionStatus.PREREGISTER\r\n                && test.test.ntransactionstatus !== transactionStatus.REJECT\r\n                && test.test.ntransactionstatus !== transactionStatus.CANCELLED\r\n                && test.test.ntransactionstatus !== transactionStatus.RELEASED) {\r\n                const inputData = {\r\n                    \"registrationtest\": {\r\n                        npreregno: test.test.npreregno,\r\n                        ntransactionsamplecode: test.test.ntransactionsamplecode,\r\n                        ssamplearno: test.test.ssamplearno\r\n                    },\r\n                    userinfo: this.props.Login.userInfo,\r\n                    ndesigntemplatemappingcode: this.props.Login.masterData.RealDesignTemplateMappingValue\r\n                        && this.props.Login.masterData.RealDesignTemplateMappingValue.ndesigntemplatemappingcode,\r\n                    \"outSourceSampleData\": {\r\n                        nsampletypecode: this.props.Login.masterData.RealSampleTypeValue.nsampletypecode,\r\n                        nregtypecode: this.props.Login.masterData.RealRegTypeValue.nregtypecode,\r\n                        nregsubtypecode: this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode,\r\n                        napprovalversioncode: this.props.Login.masterData.RealApprovalConfigVersionValue.napproveconfversioncode,\r\n                        npreregno: test.test.npreregno\r\n\r\n                    }\r\n                }\r\n\r\n                const inputParam = { inputData, screenName: \"IDS_OUTSOURCETEST\" };\r\n                this.props.getOutSourceSiteAndTest(inputParam);\r\n                // this.props.outsourceTest(inputData);\r\n            }\r\n            else {\r\n                toast.info(this.props.intl.formatMessage({ id: \"IDS_SELECTREGISTEREDTEST\" }));\r\n            }\r\n        }\r\n        else {\r\n            toast.info(this.props.intl.formatMessage({ id: \"IDS_OUTSOURCEOPTIONNOTAVAIL\" }));\r\n        }\r\n    }\r\n\r\n\r\n    handleDateChangeMaster = (dateName, dateValue, item) => {\r\n        //   const { selectedMaster } = this.state;\r\n        const selectedMaster = this.state.selectedMaster || [];\r\n        const masterIndex = this.props.Login.masterIndex\r\n        selectedMaster[masterIndex] = selectedMaster[masterIndex] && { ...selectedMaster[masterIndex] } || {}\r\n\r\n        selectedMaster[masterIndex][dateName] = dateValue;\r\n        const age = ageCalculate(dateValue);\r\n        selectedMaster[masterIndex][\"sage\"] = age;\r\n        this.setState({ selectedMaster });\r\n\r\n    }\r\n\r\n    onNumericInputOnChangeMaster = (value, name, item) => {\r\n        const selectedMaster = this.state.selectedMaster || [];\r\n        const masterIndex = this.props.Login.masterIndex\r\n        selectedMaster[masterIndex] = selectedMaster[masterIndex] && { ...selectedMaster[masterIndex] } || {}\r\n\r\n        selectedMaster[masterIndex][name] = value;\r\n        this.setState({ selectedMaster });\r\n    }\r\n\r\n    onInputOnChangeMaster = (event) => {\r\n        const selectedMaster = this.state.selectedMaster || [];\r\n        const masterIndex = this.props.Login.masterIndex\r\n        selectedMaster[masterIndex] = selectedMaster[masterIndex] && { ...selectedMaster[masterIndex] } || {}\r\n\r\n        if (event.target.type === 'checkbox') {\r\n            selectedMaster[masterIndex][event.target.name] = event.target.checked === true ? 3 : 4;\r\n            if (this.props.Login.selectedControl[masterIndex].table.item.nformcode === 137) {\r\n                if (selectedMaster[masterIndex].nneedcurrentaddress === 3) {\r\n                    selectedMaster[masterIndex].sflatnotemp = selectedMaster[masterIndex].sflatno;\r\n                    selectedMaster[masterIndex].shousenotemp = selectedMaster[masterIndex].shouseno;\r\n                    selectedMaster[masterIndex].spostalcodetemp = selectedMaster[masterIndex].spostalcode;\r\n                    selectedMaster[masterIndex].sstreettemp = selectedMaster[masterIndex].sstreet;\r\n                    selectedMaster[masterIndex].scitynametemp = selectedMaster[masterIndex].scityname;\r\n                    selectedMaster[masterIndex].sdistrictnametemp = selectedMaster[masterIndex].sdistrictname;\r\n                    selectedMaster[masterIndex].sregionnametemp = selectedMaster[masterIndex].sregionname;\r\n                }\r\n                else {\r\n                    selectedMaster[masterIndex].sflatnotemp = \"\";\r\n                    selectedMaster[masterIndex].shousenotemp = \"\";\r\n                    selectedMaster[masterIndex].spostalcodetemp = \"\";\r\n                    selectedMaster[masterIndex].sstreettemp = \"\";\r\n                    selectedMaster[masterIndex].scitynametemp = \"\";\r\n                    selectedMaster[masterIndex].sdistrictnametemp = \"\";\r\n                    selectedMaster[masterIndex].sregionnametemp = \"\";\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            selectedMaster[masterIndex][event.target.name] = event.target.value;\r\n        }\r\n        this.setState({ selectedMaster });\r\n    }\r\n\r\n    onSaveMasterRecord = (saveType, formRef) => {\r\n        //add / edit            \r\n        const masterIndex = this.props.Login.masterIndex;\r\n        let inputData = [];\r\n        const selectedControl = this.props.Login.selectedControl\r\n        const masterDesign = this.props.Login.masterDesign\r\n        inputData[\"userinfo\"] = { ...this.props.Login.userInfo, nformcode: selectedControl[masterIndex].table.item.nformcode };\r\n        inputData[selectedControl[masterIndex].table.item.methodUrl.toLowerCase()] = { \"nsitecode\": this.props.Login.userInfo.nmastersitecode };\r\n\r\n        const methodUrl = selectedControl[masterIndex].table.item.methodUrl.toLowerCase()\r\n        if (this.props.Login.masterOperation[masterIndex] === 'update') {\r\n            if (selectedControl[masterIndex].table.item.component === 'Dynamic') {\r\n                inputData[methodUrl][\"ndynamicmastercode\"] = this.props.Login.masterEditObject[masterIndex].item ?\r\n                    this.props.Login.masterEditObject[masterIndex].item.jsondata.ndynamicmastercode : this.props.Login.masterEditObject[masterIndex].ndynamicmastercode\r\n            }\r\n            else {\r\n                inputData[methodUrl][selectedControl[masterIndex][\"valuemember\"]] = this.props.Login.masterEditObject[masterIndex].value\r\n            }\r\n\r\n        }\r\n\r\n\r\n        if (selectedControl[masterIndex].table.item.component === 'Dynamic') {\r\n            const selectedMaster = this.state.selectedMaster;\r\n            inputData[\"userinfo\"] = { ...this.props.Login.userInfo, nformcode: selectedControl[masterIndex].table.item.nformcode };\r\n            inputData[\"masterdateconstraints\"] = masterDesign[masterIndex].screendesign.masterdateconstraints;\r\n            inputData[\"masterdatefields\"] = masterDesign[masterIndex].screendesign.masterdatefields;\r\n            inputData[\"mastercombinationunique\"] = masterDesign[masterIndex].screendesign.mastercombinationunique;\r\n            //add                          \r\n            inputData[\"dynamicmaster\"] = {\r\n                ...inputData[methodUrl],\r\n                nformcode: selectedControl[masterIndex].table.item.nformcode,\r\n                ndesigntemplatemappingcode: masterDesign[masterIndex].ndesigntemplatemappingcode,\r\n                jsondata: {}, jsonuidata: {}\r\n            };\r\n\r\n            const dateList = [];\r\n            const defaulttimezone = this.props.Login.defaulttimezone;\r\n\r\n            masterDesign[masterIndex] &&\r\n                masterDesign[masterIndex].slideoutdesign.map(row => {\r\n                    row.children.map(column => {\r\n                        column.children.map(component => {\r\n                            if (component.hasOwnProperty(\"children\")) {\r\n\r\n                                component.children.map(componentrow => {\r\n                                    if (componentrow.inputtype === \"combo\") {\r\n                                        inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label] = selectedMaster[componentrow.label] ?\r\n                                            {\r\n                                                value: selectedMaster[masterIndex][componentrow.label].value,\r\n                                                label: selectedMaster[masterIndex][componentrow.label].label,\r\n                                                pkey: componentrow.valuemember,\r\n                                                nquerybuildertablecode: componentrow.nquerybuildertablecode,\r\n                                                source: componentrow.source,\r\n                                                [componentrow.table.item.component === 'Dynamic' ? 'ndynamicmastercode' : componentrow.valuemember]: this.props.Login.masterOperation[masterIndex] === 'update' ?\r\n                                                    selectedMaster[masterIndex][componentrow.label].item ? selectedMaster[masterIndex][componentrow.label].item.jsondata[componentrow.table.item.component === 'Dynamic' ? 'ndynamicmastercode' : componentrow.valuemember] :\r\n                                                        selectedMaster[masterIndex][componentrow.label][componentrow.table.item.component === 'Dynamic' ? 'ndynamicmastercode' : componentrow.valuemember]\r\n                                                    :\r\n                                                    selectedMaster[masterIndex][componentrow.label].item.jsondata[componentrow.table.item.component === 'Dynamic' ? 'ndynamicmastercode' : componentrow.valuemember]\r\n                                            } : -1\r\n\r\n                                        inputData[\"dynamicmaster\"][\"jsonuidata\"][componentrow.label] = selectedMaster[masterIndex][componentrow.label] ? selectedMaster[masterIndex][componentrow.label].label : \"\"\r\n\r\n                                    }\r\n                                    else if (componentrow.inputtype === \"date\") {\r\n                                        if (componentrow.mandatory) {\r\n                                            inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label] = formatDate(selectedMaster[masterIndex][componentrow.label], false)\r\n\r\n                                            inputData[\"dynamicmaster\"][\"jsonuidata\"][componentrow.label] = inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label]\r\n                                            //inputData[\"dynamicmaster\"][\"jsonuidata\"][componentrow.label] = convertDateTimetoString(selectedRecord[componentrow.label], userInfo);\r\n                                        }\r\n                                        else {\r\n                                            inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label] = componentrow.loadcurrentdate ?\r\n                                                formatDate(selectedMaster[masterIndex][componentrow.label] || new Date(), false) :\r\n                                                selectedMaster[masterIndex][componentrow.label] ? formatDate(selectedMaster[masterIndex][componentrow.label], false)\r\n                                                    : \"\";\r\n\r\n                                            inputData[\"dynamicmaster\"][\"jsonuidata\"][componentrow.label] = inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label];\r\n                                            //convertDateTimetoString(selectedRecord[componentrow.label], userInfo);\r\n                                        }\r\n                                        if (componentrow.timezone) {\r\n                                            inputData[\"dynamicmaster\"][\"jsondata\"][`tz${componentrow.label}`] = selectedMaster[masterIndex][`tz${componentrow.label}`] ?\r\n                                                { value: selectedMaster[masterIndex][`tz${componentrow.label}`].value, label: selectedMaster[masterIndex][`tz${componentrow.label}`].label } :\r\n                                                defaulttimezone ? defaulttimezone : -1\r\n\r\n                                            inputData[\"dynamicmaster\"][\"jsonuidata\"][`tz${componentrow.label}`] = inputData[\"dynamicmaster\"][\"jsondata\"][`tz${componentrow.label}`]\r\n                                        }\r\n                                        dateList.push(componentrow.label)\r\n                                    }\r\n\r\n                                    else {\r\n                                        inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label] = selectedMaster[masterIndex][componentrow.label] ?\r\n                                            selectedMaster[masterIndex][componentrow.label] : \"\"\r\n\r\n                                        inputData[\"dynamicmaster\"][\"jsonuidata\"][componentrow.label] = inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label]\r\n                                        // inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label]\r\n\r\n                                    }\r\n                                    return inputData[\"dynamicmaster\"];\r\n                                })\r\n                            }\r\n                            else {\r\n                                if (component.inputtype === \"combo\") {\r\n                                    inputData[\"dynamicmaster\"][\"jsondata\"][component.label] = selectedMaster[masterIndex][component.label] ?\r\n                                        {\r\n                                            value: selectedMaster[masterIndex][component.label].value,\r\n                                            label: selectedMaster[masterIndex][component.label].label,\r\n                                            pkey: component.valuemember,\r\n                                            nquerybuildertablecode: component.nquerybuildertablecode,\r\n                                            source: component.source,\r\n                                            [component.table.item.component === 'Dynamic' ? 'ndynamicmastercode' : component.valuemember]: this.props.Login.masterOperation[masterIndex] === 'update' ?\r\n                                                selectedMaster[masterIndex][component.label].item ? selectedMaster[masterIndex][component.label].item.jsondata[component.table.item.component === 'Dynamic' ? 'ndynamicmastercode' : component.valuemember] : selectedMaster[masterIndex][component.label][component.table.item.component === 'Dynamic' ? 'ndynamicmastercode' : component.valuemember]\r\n                                                :\r\n                                                selectedMaster[masterIndex][component.label].item.jsondata[component.table.item.component === 'Dynamic' ? 'ndynamicmastercode' : component.valuemember]\r\n                                        } : -1\r\n\r\n                                    inputData[\"dynamicmaster\"][\"jsonuidata\"][component.label] = inputData[\"dynamicmaster\"][\"jsondata\"][component.label].label;\r\n                                    //selectedRecord[component.label] ? selectedRecord[component.label].label : \"\"\r\n                                }\r\n                                else if (component.inputtype === \"date\") {\r\n                                    if (component.mandatory) {\r\n                                        inputData[\"dynamicmaster\"][\"jsondata\"][component.label] = formatDate(selectedMaster[masterIndex][component.label], false);\r\n                                        // convertDateTimetoString(selectedRecord[component.label] ?\r\n                                        // selectedRecord[component.label] : new Date(), userInfo);\r\n\r\n                                        inputData[\"dynamicmaster\"][\"jsonuidata\"][component.label] = inputData[\"dynamicmaster\"][\"jsondata\"][component.label]\r\n                                        //convertDateTimetoString(selectedRecord[component.label], userInfo);\r\n\r\n                                    } else {\r\n                                        inputData[\"dynamicmaster\"][\"jsondata\"][component.label] = component.loadcurrentdate ?\r\n                                            //convertDateTimetoString(selectedRecord[component.label] ?                                      \r\n                                            //    selectedRecord[component.label] : new Date(), userInfo) :\r\n                                            formatDate(selectedMaster[masterIndex][component.label] || new Date(), false) :\r\n                                            selectedMaster[masterIndex][component.label] ?\r\n                                                // convertDateTimetoString(selectedRecord[component.label] ?\r\n                                                //   selectedRecord[component.label] : new Date(), userInfo) : \"\";\r\n                                                formatDate(selectedMaster[masterIndex][component.label], false) : \"\";\r\n                                        inputData[\"dynamicmaster\"][\"jsonuidata\"][component.label] = inputData[\"dynamicmaster\"][\"jsondata\"][component.label]\r\n                                        //convertDateTimetoString(selectedRecord[component.label], userInfo)\r\n\r\n                                    }\r\n                                    if (component.timezone) {\r\n                                        inputData[\"dynamicmaster\"][\"jsondata\"][`tz${component.label}`] = selectedMaster[masterIndex][`tz${component.label}`] ?\r\n                                            { value: selectedMaster[masterIndex][`tz${component.label}`].value, label: selectedMaster[masterIndex][`tz${component.label}`].label } :\r\n                                            defaulttimezone ? defaulttimezone : -1\r\n\r\n                                        inputData[\"dynamicmaster\"][\"jsonuidata\"][`tz${component.label}`] = inputData[\"dynamicmaster\"][\"jsondata\"][`tz${component.label}`]\r\n                                    }\r\n                                    dateList.push(component.label)\r\n                                }\r\n                                else {\r\n                                    inputData[\"dynamicmaster\"][\"jsondata\"][component.label] = selectedMaster[masterIndex][component.label] ?\r\n                                        selectedMaster[masterIndex][component.label] : \"\"\r\n\r\n                                    inputData[\"dynamicmaster\"][\"jsonuidata\"][component.label] = inputData[\"dynamicmaster\"][\"jsondata\"][component.label]\r\n                                }\r\n                            }\r\n                            return inputData[\"dynamicmaster\"];\r\n                        }\r\n                        )\r\n                        return inputData[\"dynamicmaster\"];\r\n                    })\r\n                    return inputData[\"dynamicmaster\"];\r\n                })\r\n\r\n\r\n            inputData[\"dynamicmaster\"][\"jsonstring\"] = JSON.stringify(inputData[\"dynamicmaster\"][\"jsondata\"]);\r\n            inputData[\"dynamicmaster\"][\"jsonuistring\"] = JSON.stringify(inputData[\"dynamicmaster\"][\"jsonuidata\"]);\r\n            inputData[\"masterdatelist\"] = dateList;\r\n\r\n\r\n        }\r\n        else if (selectedControl[masterIndex].table.item.component === 'Type3Component'\r\n            && selectedControl[masterIndex].table.item.nformcode === formCode.PATIENTMASTER) {\r\n            //ALPD-3347    \r\n            inputData[\"noneedfilter\"] = 1; //will dislplay all db records\r\n            if (selectedControl[masterIndex].inputtype === 'backendsearchfilter' || selectedControl[masterIndex].inputtype === 'frontendsearchfilter') {\r\n                inputData[\"noneedfilter\"] = 2; //will display will added record\r\n            }\r\n            this.props.Login.masterextractedColumnList[masterIndex].map(item => {\r\n                let fieldName = item.dataField;\r\n                if (item.isJsonField === true) {\r\n                    return inputData[methodUrl][item.jsonObjectName] = { ...inputData[methodUrl][item.jsonObjectName], [fieldName]: this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName] : \"\" }\r\n                }\r\n                else {\r\n                    if (item.controlType === \"selectbox\") {\r\n                        // inputData[methodUrl][fieldName] = this.state.selectedMaster[fieldName] ? this.state.selectedMaster[fieldName].label ? this.state.selectedMaster[fieldName].label : \"\" : -1;\r\n                        inputData[methodUrl][item.tableDataField] = this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName].value ? this.state.selectedMaster[masterIndex][fieldName].value : \"\" : -1;\r\n                        return inputData;\r\n                    }\r\n                    else if (item.controlType === \"datepicker\") {\r\n                        inputData[methodUrl][item.dateField] = formatInputDate(this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName] : \"\", false);\r\n                    }\r\n                    else if (item.controlType === \"checkbox\") {\r\n                        inputData[methodUrl][item.controlName] = this.state.selectedMaster[masterIndex][item.controlName] ? this.state.selectedMaster[masterIndex][item.controlName] : transactionStatus.NO;\r\n                    }\r\n                    else {\r\n                        inputData[methodUrl][fieldName] = this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName] : \"\";\r\n                    }\r\n                    // inputData[methodUrl][selectedRecordPrimarykey] = this.props.Login.selectedId;\r\n                    return inputData;\r\n                }\r\n            })\r\n        }\r\n        else {\r\n\r\n            this.props.Login.masterextractedColumnList[masterIndex].map(item => {\r\n                let fieldName = item.dataField;\r\n                if (item.isJsonField === true) {\r\n                    return inputData[methodUrl][item.jsonObjectName] = { ...inputData[methodUrl][item.jsonObjectName], [fieldName]: this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName] : \"\" }\r\n                }\r\n                else {\r\n                    if (item.controlType === \"selectbox\") {\r\n                        inputData[methodUrl][fieldName] = this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName].label ? this.state.selectedMaster[masterIndex][fieldName].label : \"\" : -1;\r\n                        inputData[methodUrl][item.foreignDataField] = this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName].value ? this.state.selectedMaster[masterIndex][fieldName].value : \"\" : -1;\r\n                        return inputData;\r\n                    }\r\n                    else if (item.controlType === \"datepicker\") {\r\n                        inputData[methodUrl][item.dateField] = formatInputDate(this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName] : \"\", false);\r\n                    }\r\n                    else if (item.controlType === \"checkbox\") {\r\n                        inputData[methodUrl][item.controlName] = this.state.selectedMaster[masterIndex][item.controlName] ? this.state.selectedMaster[masterIndex][item.controlName] : transactionStatus.NO;\r\n                    }\r\n                    else {\r\n                        inputData[methodUrl][fieldName] = this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName] : \"\";\r\n                    }\r\n                    // inputData[methodUrl][selectedRecordPrimarykey] = this.props.Login.selectedId;\r\n                    return inputData;\r\n                }\r\n            })\r\n        }\r\n        // }\r\n\r\n        const inputParam = {\r\n            withoutCombocomponent:\r\n                this.state.regSubSamplewithoutCombocomponent,\r\n            comboComponents: this.state.regSubSamplecomboComponents,\r\n            selectedRecord: this.state.selectedRecord,\r\n            selectedRecordName: 'selectedRecord',\r\n            loadSubSample: false,\r\n            selectedControl: this.props.Login.selectedControl,\r\n            comboData: this.props.Login.regSubSamplecomboData,\r\n            comboName: 'regSubSamplecomboData',\r\n            classUrl: selectedControl[masterIndex].table.item.classUrl,\r\n            methodUrl: selectedControl[masterIndex].table.item.methodUrl,\r\n            // displayName: this.props.Login.selectedControl.table.item.sdisplayname,\r\n            inputData: inputData,\r\n            operation: this.props.Login.masterOperation[masterIndex],\r\n            masterEditObject: this.props.Login.masterEditObject,\r\n            masterOperation: this.props.Login.masterOperation,\r\n            saveType, formRef,\r\n            screenName: \"IDS_SUBSAMPLE\",\r\n            masterIndex,\r\n            selectedMaster: this.state.selectedMaster,\r\n            mastercomboComponents: this.props.Login.mastercomboComponents,\r\n            masterwithoutCombocomponent: this.props.Login.masterwithoutCombocomponent,\r\n            masterComboColumnFiled: this.props.Login.masterComboColumnFiled,\r\n            masterextractedColumnList: this.props.Login.masterextractedColumnList,\r\n            masterdataList: this.props.Login.masterdataList,\r\n            masterDesign: this.props.Login.masterDesign,\r\n            masterfieldList: this.props.Login.masterfieldList,\r\n            userinfo: this.props.Login.userInfo\r\n        }\r\n\r\n        this.props.addMasterRecord(inputParam, this.props.Login.masterData)\r\n\r\n    }\r\n\r\n    addMasterRecord = (control) => {\r\n        let masterIndex = this.props.Login.masterIndex\r\n        if (masterIndex !== undefined) {\r\n            masterIndex = masterIndex + 1;\r\n        } else {\r\n            masterIndex = 0\r\n        }\r\n        let selectedControl = this.props.Login.selectedControl || []\r\n        let selectedMaster = this.state.selectedMaster || []\r\n        selectedMaster[masterIndex] = {}\r\n        selectedControl[masterIndex] = control\r\n\r\n        let fieldList = this.props.Login.masterfieldList || []\r\n        fieldList[masterIndex] = []\r\n\r\n        let masterComboColumnFiled = this.props.Login.masterComboColumnFiled || []\r\n        masterComboColumnFiled[masterIndex] = []\r\n\r\n        let extractedColumnList = this.props.Login.masterextractedColumnList || []\r\n        extractedColumnList[masterIndex] = []\r\n\r\n        let masterdataList = this.props.Login.masterdataList || []\r\n        let masterDesign = this.props.Login.masterDesign || []\r\n        let masterwithoutCombocomponent = this.props.Login.masterwithoutCombocomponent || []\r\n        let mastercomboComponents = this.props.Login.mastercomboComponents || []\r\n        let masterOperation = this.props.Login.masterOperation || []\r\n\r\n        masterdataList[masterIndex] = []\r\n        masterDesign[masterIndex] = []\r\n        masterwithoutCombocomponent[masterIndex] = []\r\n        mastercomboComponents[masterIndex] = []\r\n        masterOperation[masterIndex] = 'create'\r\n\r\n        if (control.table.item.component === 'Type2Component' || control.table.item.component === 'Type1Component') {\r\n            if (control.table.item.component === 'Type2Component') {\r\n                fieldList[masterIndex] = getFieldSpecification().get(control.table.item.methodUrl) || [];\r\n            } else {\r\n                fieldList[masterIndex] = getFieldSpecification1().get(control.table.item.methodUrl) || [];\r\n            }\r\n\r\n\r\n            extractedColumnList[masterIndex] = extractFieldHeader(Object.values(fieldList[masterIndex]));\r\n\r\n            const primaryKeyField = Object.keys(fieldList[masterIndex]).length > 0 ? fieldList[masterIndex][0].dataField : \"\";\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    selectedControl,\r\n                    addMaster: true,\r\n                    masterfieldList: fieldList,\r\n                    masterextractedColumnList: extractedColumnList,\r\n                    masterprimaryKeyField: primaryKeyField,\r\n                    masterComboColumnFiled: masterComboColumnFiled,\r\n                    masterIndex,\r\n                    masterdataList,\r\n                    masterDesign,\r\n                    masterwithoutCombocomponent,\r\n                    mastercomboComponents,\r\n                    selectedMaster,\r\n                    masterOperation,\r\n                    screenName: selectedControl[masterIndex].displayname[this.props.Login.userInfo.slanguagetypecode]\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo)\r\n        }\r\n        else if (control.table.item.component === 'Type3Component') {\r\n            fieldList[masterIndex] = getFieldSpecification3().get(control.table.item.methodUrl) || [];\r\n            extractedColumnList[masterIndex] = extractFieldHeader(Object.values(fieldList[masterIndex]));\r\n            masterComboColumnFiled[masterIndex] = extractedColumnList[masterIndex].filter(item =>\r\n                item.ndesigncomponentcode === designComponents.COMBOBOX)\r\n            const primaryKeyField = Object.keys(fieldList[masterIndex]).length > 0 ? fieldList[masterIndex][0].dataField : \"\";\r\n            const inputParam = {\r\n                userinfo: this.props.Login.userInfo,\r\n                selectedControl,\r\n                masterfieldList: fieldList,\r\n                masterextractedColumnList: extractedColumnList,\r\n                masterprimaryKeyField: primaryKeyField,\r\n                masterComboColumnFiled: masterComboColumnFiled,\r\n                masterIndex,\r\n                masterdataList,\r\n                masterDesign,\r\n                masterwithoutCombocomponent,\r\n                mastercomboComponents,\r\n                selectedMaster,\r\n                masterOperation,\r\n                screenName: selectedControl[masterIndex].displayname[this.props.Login.userInfo.slanguagetypecode]\r\n            }\r\n\r\n            this.props.getAddMasterCombo(inputParam);\r\n\r\n        }\r\n        else if (control.table.item.component === 'Dynamic') {\r\n            const inputParam = {\r\n                userinfo: this.props.Login.userInfo,\r\n                selectedControl,\r\n                masterIndex,\r\n                masterdataList,\r\n                masterDesign,\r\n                masterComboColumnFiled,\r\n                masterwithoutCombocomponent,\r\n                mastercomboComponents,\r\n                masterfieldList: fieldList,\r\n                masterextractedColumnList: extractedColumnList,\r\n                masterOperation,\r\n                selectedMaster\r\n            }\r\n            this.props.getDynamicMasterTempalte(inputParam);\r\n        }\r\n\r\n        // this.props.getMasterRecord(control);\r\n    }\r\n\r\n\r\n    editMasterRecord = (control, editObject) => {\r\n        if (editObject) {\r\n            let masterIndex = this.props.Login.masterIndex\r\n            if (masterIndex !== undefined) {\r\n                masterIndex = masterIndex + 1;\r\n            } else {\r\n                masterIndex = 0\r\n            }\r\n            let selectedControl = this.props.Login.selectedControl || []\r\n            let selectedMaster = this.state.selectedMaster || []\r\n            selectedMaster[masterIndex] = {}\r\n            selectedControl[masterIndex] = control\r\n\r\n            let fieldList = this.props.Login.masterfieldList || []\r\n            fieldList[masterIndex] = []\r\n\r\n            let masterComboColumnFiled = this.props.Login.masterComboColumnFiled || []\r\n            masterComboColumnFiled[masterIndex] = []\r\n\r\n            let extractedColumnList = this.props.Login.masterextractedColumnList || []\r\n            extractedColumnList[masterIndex] = []\r\n\r\n            let masterdataList = this.props.Login.masterdataList || []\r\n            let masterDesign = this.props.Login.masterDesign || []\r\n            let masterwithoutCombocomponent = this.props.Login.masterwithoutCombocomponent || []\r\n            let mastercomboComponents = this.props.Login.mastercomboComponents || []\r\n            let masterOperation = this.props.Login.masterOperation || []\r\n            let masterEditObject = this.props.Login.masterEditObject || []\r\n\r\n            masterdataList[masterIndex] = []\r\n            masterDesign[masterIndex] = []\r\n            masterwithoutCombocomponent[masterIndex] = []\r\n            mastercomboComponents[masterIndex] = []\r\n            masterOperation[masterIndex] = 'update'\r\n            masterEditObject[masterIndex] = editObject\r\n\r\n            if (control.table.item.component === 'Type2Component' || control.table.item.component === 'Type1Component') {\r\n                if (control.table.item.component === 'Type2Component') {\r\n                    fieldList[masterIndex] = getFieldSpecification().get(control.table.item.methodUrl) || [];\r\n                } else {\r\n                    fieldList[masterIndex] = getFieldSpecification1().get(control.table.item.methodUrl) || [];\r\n                }\r\n                extractedColumnList[masterIndex] = extractFieldHeader(Object.values(fieldList[masterIndex]));\r\n\r\n                const primaryKeyField = Object.keys(fieldList[masterIndex]).length > 0 ? fieldList[masterIndex][0].dataField : \"\";\r\n\r\n                const updateInfo = {\r\n                    userinfo: this.props.Login.userInfo,\r\n                    selectedControl,\r\n                    addMaster: true,\r\n                    masterfieldList: fieldList,\r\n                    masterextractedColumnList: extractedColumnList,\r\n                    masterprimaryKeyField: primaryKeyField,\r\n                    masterComboColumnFiled: masterComboColumnFiled,\r\n                    masterIndex,\r\n                    masterdataList,\r\n                    masterDesign,\r\n                    masterwithoutCombocomponent,\r\n                    mastercomboComponents,\r\n                    selectedMaster,\r\n                    masterEditObject,\r\n                    masterOperation\r\n                    // editObject\r\n                    //   screenName:selectedControl[masterIndex].displayname[this.props.Login.userInfo.slanguagetypecode]\r\n\r\n                }\r\n                this.props.getEditMaster(updateInfo)\r\n            }\r\n            else if (control.table.item.component === 'Type3Component') {\r\n                fieldList[masterIndex] = getFieldSpecification3().get(control.table.item.methodUrl) || [];\r\n                extractedColumnList[masterIndex] = extractFieldHeader(Object.values(fieldList[masterIndex]));\r\n                masterComboColumnFiled[masterIndex] = extractedColumnList[masterIndex].filter(item =>\r\n                    item.ndesigncomponentcode === designComponents.COMBOBOX)\r\n                const primaryKeyField = Object.keys(fieldList[masterIndex]).length > 0 ? fieldList[masterIndex][0].dataField : \"\";\r\n                const inputParam = {\r\n                    userinfo: this.props.Login.userInfo,\r\n                    selectedControl,\r\n                    masterfieldList: fieldList,\r\n                    masterextractedColumnList: extractedColumnList,\r\n                    masterprimaryKeyField: primaryKeyField,\r\n                    masterComboColumnFiled: masterComboColumnFiled,\r\n                    masterIndex,\r\n                    masterdataList,\r\n                    masterDesign,\r\n                    masterwithoutCombocomponent,\r\n                    mastercomboComponents,\r\n                    masterEditObject,\r\n                    masterOperation,\r\n                    selectedMaster,\r\n                    screenName: selectedControl[masterIndex].displayname[this.props.Login.userInfo.slanguagetypecode],\r\n                    // editObject\r\n                }\r\n\r\n                this.props.getEditMaster(inputParam);\r\n\r\n            }\r\n            else if (control.table.item.component === 'Dynamic') {\r\n                const inputParam = {\r\n                    userinfo: this.props.Login.userInfo,\r\n                    selectedControl,\r\n                    masterIndex,\r\n                    masterdataList,\r\n                    masterDesign,\r\n                    masterComboColumnFiled,\r\n                    masterwithoutCombocomponent,\r\n                    mastercomboComponents,\r\n                    masterfieldList: fieldList,\r\n                    masterextractedColumnList: extractedColumnList,\r\n                    masterComboColumnFiled,\r\n                    masterEditObject,\r\n                    masterOperation,\r\n                    selectedMaster,\r\n                    //  editObject\r\n                }\r\n                this.props.getEditMaster(inputParam);\r\n            }\r\n\r\n        } else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTTHERECORD\" }))\r\n        }\r\n\r\n    }\r\n\r\n    onComboChangeMasterDyanmic = (comboData, control, customName) => {\r\n\r\n        let comboName = customName || control.label;\r\n        let selectedMaster = this.state.selectedMaster || [];\r\n        const masterIndex = this.props.Login.masterIndex\r\n        selectedMaster[masterIndex] = selectedMaster[masterIndex] && { ...selectedMaster[masterIndex] } || {}\r\n        //if (comboData) {\r\n        comboData[\"item\"] = {\r\n            ...comboData[\"item\"], \"pkey\": control.valuemember, \"nquerybuildertablecode\": control.nquerybuildertablecode,\r\n            \"source\": control.source\r\n        };\r\n        selectedMaster[masterIndex][comboName] = comboData;\r\n\r\n        // console.log(\"selected:\", selectedMaster, comboData, control, customName);\r\n        if (control.child && control.child.length > 0) {\r\n            const childComboList = getSameRecordFromTwoArrays(this.props.Login.mastercomboComponents[masterIndex], control.child, \"label\")\r\n            let childColumnList = {};\r\n            childComboList.map(columnList => {\r\n                const val = this.comboChild(this.props.Login.mastercomboComponents[masterIndex], columnList, childColumnList, false);\r\n                childColumnList = val.childColumnList\r\n            })\r\n\r\n            const parentList = getSameRecordFromTwoArrays(this.props.Login.masterwithoutCombocomponent[masterIndex], control.child, \"label\")\r\n\r\n            if (comboData) {\r\n                const inputParem = {\r\n                    child: control.child,\r\n                    source: control.source,\r\n                    primarykeyField: control.valuemember,\r\n                    value: comboData.value,\r\n                    item: comboData.item\r\n                }\r\n                this.props.getChildValuesForAddMaster(inputParem,\r\n                    this.props.Login.userInfo, selectedMaster, this.props.Login.masterdataList,\r\n                    childComboList, childColumnList,\r\n                    this.props.Login.masterwithoutCombocomponent,\r\n                    [...childComboList, ...parentList], masterIndex)\r\n            } else {\r\n                let comboData = this.props.Login.masterdataList\r\n                const withoutCombocomponent = this.props.Login.masterwithoutCombocomponent || []\r\n                const inputParam = { control, comboComponents: this.props.Login.mastercomboComponents[masterIndex], withoutCombocomponent: withoutCombocomponent[masterIndex], selectedMaster: selectedMaster[masterIndex], comboData: comboData[masterIndex] }\r\n                const childParam = childComboClear(inputParam)\r\n                selectedMaster[masterIndex] = childParam.selectedRecord\r\n                comboData[masterIndex] = childParam.comboData\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: { selectedMaster, mastedataList: comboData }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n        } else {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: { selectedMaster }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n    }\r\n\r\n    onInputOnChangeMasterDynamic = (event, radiotext) => {\r\n        let selectedMaster = this.state.selectedMaster || [];\r\n        const masterIndex = this.props.Login.masterIndex\r\n        selectedMaster[masterIndex] = selectedMaster[masterIndex] && { ...selectedMaster[masterIndex] } || {}\r\n\r\n        if (event.target.type === 'toggle') {\r\n            selectedMaster[masterIndex][event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\r\n        } else if (event.target.type === 'numeric') {\r\n            if (/\\D/.test(event.target.value))\r\n                selectedMaster[masterIndex][event.target.name] = event.target.value;\r\n        } else if (event.target.type === 'checkbox') {\r\n            const value = selectedMaster[masterIndex][event.target.name];\r\n            if (value !== '' && value !== undefined) {\r\n                if (value.includes(radiotext)) {\r\n                    const index = value.indexOf(radiotext);\r\n                    if (index !== -1) {\r\n                        if (index === 0) {\r\n                            const indexcomma = value.indexOf(\",\")\r\n                            if (indexcomma !== -1) {\r\n                                selectedMaster[masterIndex][event.target.name] = value.slice(indexcomma + 1)\r\n                            } else {\r\n                                selectedMaster[masterIndex][event.target.name] = \"\"\r\n                            }\r\n                        } else {\r\n                            if (value.slice(index).indexOf(\",\") !== -1) {\r\n                                selectedMaster[masterIndex][event.target.name] = value.slice(0, index) + value.slice(index + value.slice(index).indexOf(\",\") + 1)\r\n                            } else {\r\n                                selectedMaster[masterIndex][event.target.name] = value.slice(0, index - 1)\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                } else {\r\n                    selectedMaster[masterIndex][event.target.name] = value + ',' + radiotext;\r\n                }\r\n\r\n            } else {\r\n                selectedMaster[masterIndex][event.target.name] = radiotext;\r\n            }\r\n        } else if (event.target.type === 'radio') {\r\n            selectedMaster[masterIndex][event.target.name] = radiotext\r\n        } else {\r\n            selectedMaster[masterIndex][event.target.name] = event.target.value;\r\n        }\r\n        this.setState({ selectedMaster });\r\n    }\r\n\r\n    handleDateChangeMasterDynamic = (dateValue, dateName) => {\r\n        let selectedMaster = this.state.selectedMaster || [];\r\n        const masterIndex = this.props.Login.masterIndex\r\n        selectedMaster[masterIndex] = selectedMaster[masterIndex] && { ...selectedMaster[masterIndex] } || {}\r\n\r\n        selectedMaster[masterIndex][dateName] = dateValue;\r\n\r\n        this.setState({ selectedMaster });\r\n    }\r\n\r\n    onNumericInputChangeMasterDynamic = (value, name) => {\r\n        let selectedMaster = this.state.selectedMaster || [];\r\n        const masterIndex = this.props.Login.masterIndex\r\n        selectedMaster[masterIndex] = selectedMaster[masterIndex] && { ...selectedMaster[masterIndex] } || {}\r\n\r\n        selectedMaster[masterIndex][name] = value;\r\n        this.setState({ selectedMaster });\r\n    }\r\n\r\n    onNumericBlurMasterDynamic = (value, control) => {\r\n        let selectedMaster = this.state.selectedMaster || [];\r\n        const masterIndex = this.props.Login.masterIndex\r\n        selectedMaster[masterIndex] = selectedMaster[masterIndex] && { ...selectedMaster[masterIndex] } || {}\r\n\r\n        if (selectedMaster[masterIndex][control.label]) {\r\n            if (control.max) {\r\n                if (!(selectedMaster[masterIndex][control.label] < parseFloat(control.max))) {\r\n                    selectedMaster[masterIndex][control.label] = control.precision ? parseFloat(control.max) : parseInt(control.max)\r\n                }\r\n            }\r\n            if (control.min) {\r\n                if (!(selectedMaster[masterIndex][control.label] > parseFloat(control.min))) {\r\n                    selectedMaster[masterIndex][control.label] = control.precision ? parseFloat(control.min) : parseInt(control.min)\r\n                }\r\n            }\r\n\r\n\r\n        }\r\n        this.setState({ selectedMaster });\r\n    }\r\n\r\n    printBarcode = (inputParam) => {\r\n\r\n        this.setState({\r\n            selectedRecord: {\r\n                barcodevalue: inputParam.sample.sarno,\r\n                barcodeData: inputParam.sample\r\n            },\r\n            showQRCode: true, openModal: true\r\n        })\r\n    }\r\n\r\n    generateBarcode = (inputParam) => {\r\n        let patientName = \"\";\r\n        let patientDOB = \"\";\r\n        let orderIdData = \"\";\r\n        if(this.props.Login.masterData.RealSampleTypeValue && this.props.Login.masterData.RealSampleTypeValue.nsampletypecode === SampleType.CLINICALTYPE){\r\n            if(inputParam.test.ntransactionstatus !== transactionStatus.PREREGISTER && inputParam.test.ntransactionstatus !== transactionStatus.QUARANTINE\r\n                && inputParam.test.ntransactionstatus !== transactionStatus.REJECT && inputParam.test.ntransactionstatus !== transactionStatus.CANCELLED){\r\n                inputParam.masterData.selectedSample.map(sample => {\r\n                    if(sample.npreregno === inputParam.test.npreregno){\r\n                        patientName = sample[\"Patient First Name\"]+\" \"+sample[\"Patient Last Name\"];\r\n                        patientDOB = sample[\"Date of birth\"].replaceAll(\"/\", \"-\");\r\n                        orderIdData = sample[\"OrderIdData\"];\r\n                    }\r\n                })\r\n                let generateBarcodeValue = inputParam.test.ssamplearno;\r\n                let additionDesignToPrint = patientName+\"<br>\"+patientDOB+\"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"+orderIdData;\r\n                this.setState({\r\n                    selectedRecord: {\r\n                        generateBarcodeValue,\r\n                        additionDesignToPrint\r\n                    },\r\n                    showBarcode: true, openModal: true\r\n                })\r\n            } else {\r\n                toast.info(this.props.intl.formatMessage({ id: \"IDS_SELECTREGISTERSUBSAMPLETOGENERATEBARCODE\" }));\r\n            }\r\n        }\r\n    }\r\n\r\n    orderMapping = (inputParam) => {\r\n        const inputParem = {\r\n            userinfo: this.props.Login.userInfo,\r\n            inputParam, npreregno: inputParam.subSample.npreregno,\r\n            sampleorderid: inputParam.subSample.sampleorderid\r\n            , masterData: this.props.Login.masterData\r\n        }\r\n        this.props.getExternalOrderTypeForMapping(inputParem)\r\n    }\r\n\r\n    handleDateSubSampleChange = (dateValue, dateName) => {\r\n        const { selectedRecord } = this.state;\r\n        selectedRecord[dateName] = dateValue;\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    onTestPackageChange = (comboData, fieldName, nneedsubsample, specBasedComponent1, caseNo) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        const selectSection = [];\r\n        selectSection['nsectioncode'] = this.state.selectedRecord.nsectioncode;\r\n        if (comboData !== null) {\r\n            const selectPackage = this.state.selectPackage || {};\r\n\r\n            selectPackage[fieldName] = comboData;\r\n            selectPackage[\"stestpackagename\"] = comboData.label;\r\n            selectPackage[\"nspecsampletypecode\"] = parseInt(this.state.selectedRecord.nspecsampletypecode);\r\n\r\n            selectedRecord[\"nallottedspeccode\"] = this.props.Login.masterData.RegistrationGetSample && this.props.Login.masterData.RegistrationGetSample[0].nallottedspeccode;\r\n\r\n            selectedRecord[fieldName] = comboData;\r\n            selectedRecord[\"stestpackagename\"] = comboData.label;\r\n            const specBasedComponent = specBasedComponent1;\r\n            selectedRecord[\"nspecsampletypecode\"] = this.state.selectedRecord.nspecsampletypecode && this.state.selectedRecord.nspecsampletypecode !== undefined ? this.state.selectedRecord.nspecsampletypecode :\r\n                parseInt(this.props.Login.masterData.selectedSubSample &&\r\n                    [...new Set(this.props.Login.masterData.selectedSubSample.map(x => x.nspecsampletypecode))].join(\",\"));\r\n            // selectedRecord[\"nspecsampletypecode\"] = parseInt(this.props.Login.masterData.selectedSubSample &&\r\n            //     [...new Set(this.props.Login.masterData.selectedSubSample.map(x => x.nspecsampletypecode))].join(\",\"));\r\n\r\n            this.props.testPackageTest(selectedRecord, true, this.props.Login.specBasedComponent === undefined ? specBasedComponent : this.props.Login.specBasedComponent,\r\n                this.props.Login.Conponent, this.props.Login.selectedComponent, this.props.Login.selectedComponent,\r\n                this.props.Login, selectPackage, selectSection, true, selectedRecord.nspecsampletypecode,\r\n                this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample\r\n            );\r\n            // selectedRecord[\"nspecsampletypecode\"] = this.state.selectedRecord.selectedSubSample!==undefined?this.state.selectedRecord.selectedSubSample &&\r\n            // [...new Set(this.state.selectedRecord.selectedSubSample.map(x => x.nspecsampletypecode))].join(\",\"):this.state.selectedRecord.nspecsampletypecode;\r\n            //     this.props.testPackageTest(selectedRecord, true, this.props.Login.specBasedComponent===undefined?specBasedComponent:this.props.Login.specBasedComponent,\r\n            //         this.props.Login.Conponent, this.props.Login.specBasedTestPackage, this.props.Login.specBasedTestPackage ? true : false, this.props.Login.Conponent,\r\n            //         this.props.Login.selectedComponent, this.props.Login,selectPackage,true,undefined,this.state.selectedRecord.selectedSample[0],this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample\r\n            //         );\r\n            // selectedRecord[\"nspecsampletypecode\"] = this.state.selectedRecord.selectedSubSample !== undefined\r\n            //             ? this.state.selectedRecord.selectedSubSample && [...new Set(this.state.selectedRecord.selectedSubSample.map(x => x.nspecsampletypecode))].join(\",\")\r\n            //             : this.state.selectedRecord.nspecsampletypecode;\r\n\r\n            // this.props.testPackageTest(Object.keys(this.props.Login.selectedComponent).length!==0?this.props.Login.selectedComponent:this.state.selectedSpec.nallottedspeccode.item, false, this.state.specBasedComponent,\r\n            // this.props.Login.Component, this.state.specBasedTestPackage, this.state.specBasedTestPackage ? true : false, this.state.selectComponent,\r\n            // this.props.Login.selectedComponent, this.props.Login,selectPackage,false,this.state.selectedSpec.nallottedspeccode,this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample\r\n            // );\r\n            // console.log(\"log RD:\",selectedRecord, specBasedComponent, this.props.Login.specBasedComponent,\r\n            //                             this.props.Login.Conponent, this.props.Login.specBasedTestPackage, \r\n            //                             this.props.Login.Conponent,\r\n            //                             this.props.Login.selectedComponent, this.props.Login,selectPackage,\r\n            //                             this.state.selectedRecord.selectedSample[0],\r\n            //                             this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample);\r\n\r\n            // this.props.testPackageTest(selectedRecord, true, \r\n            //                             this.props.Login.specBasedComponent === undefined ?  specBasedComponent :this.props.Login.specBasedComponent,\r\n            //                             this.props.Login.Component,\r\n            //                             // this.props.Login.specBasedTestPackage, \r\n            //                             //this.props.Login.specBasedTestPackage ? true : false, \r\n            //                             this.props.Login.Component, this.props.Login.selectedComponent,this.props.Login,\r\n            //                             selectPackage,true,undefined,\r\n            //                             this.state.selectedRecord.selectedSample[0],\r\n            //                             this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample\r\n            //                             );\r\n        }\r\n        else {\r\n            //ALPD-3404\r\n            let availableTestSection = [];\r\n            if (selectedRecord[\"ntestpackagecode\"]) {\r\n                delete selectedRecord[\"ntestpackagecode\"];\r\n                delete selectedRecord[\"nsectioncode\"];\r\n                delete selectedRecord[\"ntestgrouptestcode\"];\r\n                availableTestSection = this.props.Login.AllSection || [];\r\n            }\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: { selectedRecord, availableTest: this.props.Login.AllTest, TestCombined: this.props.Login.AllTest, TestSection: availableTestSection }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n\r\n\r\n    }\r\n    //ALPD-3404\r\n    onTestSectionChange = (comboData, fieldName, nneedsubsample, specBasedComponent1, caseNo) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        const selectSection = this.state.selectSection || {};\r\n        const selectPackage = [];\r\n        selectPackage['ntestpackagecode'] = this.state.selectedRecord.ntestpackagecode;\r\n        if (comboData !== null) {\r\n            selectSection[fieldName] = comboData;\r\n            selectSection[\"ssectionname\"] = comboData.label;\r\n            selectSection[\"nspecsampletypecode\"] = parseInt(this.state.selectedRecord.nspecsampletypecode);\r\n\r\n            selectedRecord[\"nallottedspeccode\"] = this.props.Login.masterData.RegistrationGetSample && this.props.Login.masterData.RegistrationGetSample[0].nallottedspeccode;\r\n\r\n            selectedRecord[fieldName] = comboData;\r\n            selectedRecord[\"ssectionname\"] = comboData.label;\r\n            const specBasedComponent = specBasedComponent1;\r\n            selectedRecord[\"nspecsampletypecode\"] = this.state.selectedRecord.nspecsampletypecode && this.state.selectedRecord.nspecsampletypecode !== undefined ? this.state.selectedRecord.nspecsampletypecode :\r\n                parseInt(this.props.Login.masterData.selectedSubSample &&\r\n                    [...new Set(this.props.Login.masterData.selectedSubSample.map(x => x.nspecsampletypecode))].join(\",\"));\r\n            // selectedRecord[\"nspecsampletypecode\"] = parseInt(this.props.Login.masterData.selectedSubSample &&\r\n            //     [...new Set(this.props.Login.masterData.selectedSubSample.map(x => x.nspecsampletypecode))].join(\",\"));\r\n\r\n            this.props.testSectionTest(selectedRecord, true, this.props.Login.specBasedComponent === undefined ? specBasedComponent : this.props.Login.specBasedComponent,\r\n                this.props.Login.Conponent, this.props.Login.selectedComponent, this.props.Login.selectedComponent,\r\n                this.props.Login, selectPackage, selectSection, true, selectedRecord.nspecsampletypecode,\r\n                this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample\r\n            );\r\n\r\n        }\r\n        else {\r\n            let availableTestData = [];\r\n            if (selectedRecord[\"nsectioncode\"]) {\r\n                delete selectedRecord[\"nsectioncode\"];\r\n                delete selectedRecord[\"ntestgrouptestcode\"];\r\n\r\n                availableTestData = selectPackage['ntestpackagecode'] ? this.props.Login.TestPakageTest || [] : this.props.Login.AllTest || []\r\n            }\r\n\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: { selectedRecord, availableTest: this.props.Login.AllTest, TestCombined: availableTestData, TestSection: this.props.Login.TestSection || [] }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n\r\n\r\n    }\r\n\r\n    onComponentChange = (comboData, fieldName, nneedsubsample) => {\r\n        if (comboData !== null) {\r\n            //  if (!nneedsubsample) {\r\n            const selectedRecord = this.state.selectedRecord || {};\r\n            if (fieldName === 'ntzdreceivedate') {\r\n                selectedRecord[\"ntzdreceivedate\"] = comboData;\r\n                this.setState({ selectedRecord })\r\n            } else {\r\n                // const oldspecsampletypecode = selectComponent.nspecsampletypecode\r\n                // if (oldspecsampletypecode !== comboData.item.nspecsampletypecode) {\r\n                //     //selectComponent[\"nneedservice\"] = true;\r\n                // }\r\n                selectedRecord[fieldName] = comboData;\r\n                selectedRecord[\"Sample Name\"] = comboData.label;\r\n                selectedRecord[\"nspecsampletypecode\"] = comboData.item.nspecsampletypecode;\r\n                selectedRecord[\"ntestgrouptestcode\"] = [];\r\n                //selectedRecord[\"nneedsubsample\"] = nneedsubsample;\r\n                selectedRecord[\"nneedsubsample\"] = this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample;\r\n                this.props.componentTest(selectedRecord, true, this.props.Login.specBasedComponent,\r\n                    this.props.Login.Conponent, this.state.specBasedTestPackage, this.props.Login.specBasedTestPackage ? true : false)\r\n            }\r\n\r\n            // const updateInfo = {\r\n            //     typeName: DEFAULT_RETURN,\r\n            //     data: {\r\n            //         selectComponent\r\n            //     }\r\n            // }\r\n            // this.props.updateStore(updateInfo);\r\n            // } else {\r\n            //     const selectComponent = this.state.selectComponent || {};\r\n            //     selectComponent[fieldName] = comboData;\r\n            //     // selectComponent[\"nspecsampletypecode\"] = comboData.item.nspecsampletypecode ?  comboData.item.nspecsampletypecode : -1;\r\n            //     this.setState({ selectComponent })\r\n            // }\r\n        }\r\n\r\n    }\r\n\r\n    onInputOnSubSampleChange = (event, control, radiotext) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if (event.target.type === 'checkbox') {\r\n            if (event.target.name === 'timeonly') {\r\n                selectedRecord['dateonly'] = false;\r\n            }\r\n            if (event.target.name === 'dateonly') {\r\n                selectedRecord['timeonly'] = false;\r\n            }\r\n            selectedRecord[event.target.name] = event.target.checked;\r\n        }\r\n        else {\r\n            if (control.isnumeric === true\r\n                && control.label === radiotext) {\r\n                selectedRecord[event.target.name] = event.target.value.replace(/[^0-9]/g, '');\r\n            } else {\r\n                selectedRecord[event.target.name] = event.target.value;\r\n            }\r\n            // selectedRecord[event.target.name] = event.target.value;\r\n        }\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    onComboSubSampleChange = (comboData, control, customName) => {\r\n        let selectedRecord = this.state.selectedRecord || {};\r\n        if (comboData) {\r\n            let parentList = []\r\n            let childComboList = []\r\n            let childColumnList = {}\r\n\r\n            let comboName = customName || control.label;\r\n\r\n            const inputParem = {\r\n                child: control.child,\r\n                source: control.source,\r\n                primarykeyField: control.valuemember,\r\n                value: comboData ? comboData.value : -1,\r\n                // item: comboData ? comboData.item : \"\",\r\n                item: comboData ? { ...comboData.item, pkey: control.valuemember, nquerybuildertablecode: control.nquerybuildertablecode, \"source\": control.source } : \"\",\r\n                label: comboName,\r\n                nameofdefaultcomp: control.name\r\n            }\r\n            comboData[\"item\"] = {\r\n                ...comboData[\"item\"], pkey: control.valuemember,\r\n                nquerybuildertablecode: control.nquerybuildertablecode, \"source\": control.source\r\n            };\r\n            if (comboData) {\r\n                selectedRecord[comboName] = comboData;\r\n            } else {\r\n                selectedRecord[comboName] = []\r\n            }\r\n            if (control.child && control.child.length > 0) {\r\n                childComboList = getSameRecordFromTwoArrays(this.state.regSubSamplecomboComponents,\r\n                    control.child, \"label\")\r\n                childColumnList = {};\r\n                childComboList.map(columnList => {\r\n                    const val = comboChild(this.state.regSubSamplecomboComponents,\r\n                        columnList, childColumnList, false);\r\n                    childColumnList = val.childColumnList\r\n                    return null;\r\n                })\r\n\r\n                parentList = getSameRecordFromTwoArrays(this.state.regSubSamplewithoutCombocomponent,\r\n                    control.child, \"label\")\r\n\r\n                this.props.getChildValues(inputParem,\r\n                    this.props.Login.userInfo, selectedRecord, this.props.Login.regSubSamplecomboData,\r\n                    childComboList, childColumnList, this.state.regSubSamplewithoutCombocomponent,\r\n                    [...childComboList, ...parentList])\r\n            } else {\r\n                this.setState({ selectedRecord })\r\n            }\r\n        } else {\r\n            let regSubSamplecomboData = this.props.Login.regSubSamplecomboData\r\n            selectedRecord[control.label] = \"\";\r\n\r\n            const inputParam = {\r\n                control, comboComponents: this.state.regSubSamplecomboData,\r\n                withoutCombocomponent: this.state.regSubSamplewithoutCombocomponent, selectedRecord: selectedRecord, comboData: regSubSamplecomboData\r\n            }\r\n            const childParam = childComboClear(inputParam)\r\n            selectedRecord = childParam.selectedRecord\r\n            regSubSamplecomboData = childParam.comboData\r\n\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: { selectedRecord, regSubSamplecomboData }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n    }\r\n\r\n    onNumericInputSubSampleChange = (value, name) => {\r\n        let selectedRecord = this.state.selectedRecord\r\n        if (value === 0) {\r\n            selectedRecord[name] = undefined;\r\n        } else {\r\n            selectedRecord[name] = value;\r\n        }\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    onNumericBlurSubSample = (value, control) => {\r\n        let selectedRecord = this.state.selectedRecord\r\n        if (selectedRecord[control.label]) {\r\n            if (control.max) {\r\n                if (!(selectedRecord[control.label] < parseFloat(control.max))) {\r\n                    selectedRecord[control.label] = control.precision ? parseFloat(control.max) : parseInt(control.max)\r\n                }\r\n            }\r\n            if (control.min) {\r\n                if (!(selectedRecord[control.label] > parseFloat(control.min))) {\r\n                    selectedRecord[control.label] = control.precision ? parseFloat(control.min) : parseInt(control.min)\r\n                }\r\n            }\r\n\r\n\r\n        }\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    onSaveSubSampleClick = (saveType, formRef) => {\r\n        const operation = this.props.Login.operation;\r\n        if (operation === 'create') {\r\n            let objSubSample = this.state.selectedRecord;\r\n            const userInfo = this.props.Login.userInfo;\r\n\r\n            //   let saveSubSample = {};\r\n            let sampleList = [];\r\n            if (this.props.Login.masterData.searchedSample !== undefined) {\r\n                //sampleList = getSameRecordFromTwoArrays(this.props.Login.masterData.searchedSample, this.props.Login.masterData.RegistrationGetSample.slice(this.state.skip, this.state.skip + this.state.take), \"npreregno\");\r\n                const list = this.props.Login.masterData.searchedSample ? this.props.Login.masterData.searchedSample\r\n                    : sortDataForDate(this.props.Login.masterData.RegistrationGetSample, 'dtransactiondate', 'npreregno');\r\n\r\n                sampleList = list ? list.slice(this.state.skip, this.state.skip + this.state.take) : [];\r\n            } else {\r\n                sampleList = this.props.Login.masterData.RegistrationGetSample && sortDataForDate(this.props.Login.masterData.RegistrationGetSample, 'dtransactiondate', 'npreregno').slice(this.state.skip, this.state.skip + this.state.take);\r\n            }\r\n            sampleList = getSameRecordFromTwoArrays(this.props.Login.masterData.selectedSample, sampleList, 'npreregno')\r\n\r\n            const findSampleAlloSpec = [...new Set(sampleList.map(item => item.nallottedspeccode))];\r\n            // if (this.props.Login.specBasedComponent) {\r\n            //     saveSubSample[\"nspecsampletypecode\"] = objSubSample[\"nspecsampletypecode\"] ? objSubSample[\"nspecsampletypecode\"] : -1\r\n            //     saveSubSample[\"ncomponentcode\"] = objSubSample[\"ncomponentcode\"] ? objSubSample[\"ncomponentcode\"].value : -1\r\n            // } else {\r\n            //     const findSampleSpec = [...new Set(sampleList.map(item => item.nspecsampletypecode))];\r\n            //     saveSubSample[\"nspecsampletypecode\"] = findSampleSpec[0] ? findSampleSpec[0] : -1;\r\n            //     saveSubSample[\"ncomponentcode\"] = -1\r\n            // }\r\n\r\n            // saveSubSample[\"jsondata\"] = {}\r\n            // saveSubSample[\"jsonuidata\"] = {}\r\n            // const dateList = []\r\n            // this.props.Login.masterData.SubSampleTemplate &&\r\n            //     this.props.Login.masterData.SubSampleTemplate.jsondata.map(row => {\r\n            //         row.children.map(column => {\r\n            //             column.children.map(component => {\r\n            //                 if (component.hasOwnProperty(\"children\")) {\r\n            //                     //let componentrowlabel = ''\r\n            //                     // let componentrowvalue = ''\r\n            //                     component.children.map(componentrow => {\r\n            //                         if (componentrow.inputtype === \"combo\") {\r\n            //                             saveSubSample[\"jsondata\"][componentrow.label] = objSubSample[componentrow.label] ?\r\n            //                                 { value: objSubSample[componentrow.label].value, label: objSubSample[componentrow.label].label } : -1\r\n\r\n            //                             saveSubSample[\"jsonuidata\"][componentrow.label] = objSubSample[componentrow.label] ? objSubSample[componentrow.label].label : \"\"\r\n\r\n            //                             // if (componentrow.mandatory || objSubSample[componentrow.label]) {\r\n            //                             //     componentrowlabel = componentrowlabel + '&' + componentrow.label\r\n            //                             //     componentrowvalue = componentrowvalue + ' ' + objSubSample[componentrow.label].label\r\n            //                             // }\r\n            //                         }\r\n            //                         else if (componentrow.inputtype === \"date\") {\r\n            //                             if (componentrow.mandatory) {\r\n            //                                 saveSubSample[\"jsondata\"][componentrow.label] = convertDateTimetoStringDBFormat(objSubSample[componentrow.label] ?\r\n            //                                     objSubSample[componentrow.label] : new Date(), userInfo);\r\n\r\n            //                                 saveSubSample[\"jsonuidata\"][componentrow.label] = saveSubSample[\"jsondata\"][componentrow.label]\r\n            //                             } else {\r\n            //                                 saveSubSample[\"jsondata\"][componentrow.label] = componentrow.loadcurrentdate ?\r\n            //                                 convertDateTimetoStringDBFormat(objSubSample[componentrow.label] ?\r\n            //                                         objSubSample[componentrow.label] : new Date(), userInfo) :\r\n            //                                     objSubSample[componentrow.label] ? convertDateTimetoStringDBFormat(objSubSample[componentrow.label] ?\r\n            //                                         objSubSample[componentrow.label] : new Date(), userInfo) : \"\";\r\n\r\n            //                                 saveSubSample[\"jsonuidata\"][componentrow.label] = saveSubSample[\"jsondata\"][componentrow.label]\r\n            //                             }\r\n            //                             if (componentrow.timezone) {\r\n            //                                 saveSubSample[\"jsondata\"][`tz${componentrow.label}`] = objSubSample[`tz${componentrow.label}`] ?\r\n            //                                     { value: objSubSample[`tz${componentrow.label}`].value, label: objSubSample[`tz${componentrow.label}`].label } :\r\n            //                                     defaulttimezone ? defaulttimezone : -1\r\n\r\n            //                                 saveSubSample[\"jsonuidata\"][`tz${componentrow.label}`] = saveSubSample[\"jsondata\"][`tz${componentrow.label}`]\r\n            //                             }\r\n            //                             dateList.push(componentrow.label)\r\n            //                         }\r\n\r\n            //                         else {\r\n            //                             saveSubSample[\"jsondata\"][componentrow.label] = objSubSample[componentrow.label] ?\r\n            //                                 objSubSample[componentrow.label] : \"\"\r\n\r\n            //                             saveSubSample[\"jsonuidata\"][componentrow.label] = saveSubSample[\"jsondata\"][componentrow.label]\r\n\r\n            //                             // if (objSubSample[componentrow.label]) {\r\n            //                             //     componentrowlabel = componentrowlabel + '&' + objSubSample.label\r\n            //                             //     componentrowvalue = componentrowvalue + ' ' + objSubSample[componentrow.label]\r\n            //                             // }\r\n            //                         }\r\n            //                         return saveSubSample;\r\n            //                     })\r\n            //                     //saveSubSample[\"jsondata\"][componentrowlabel.substring(1)] = componentrowvalue\r\n            //                 }\r\n            //                 else {\r\n            //                     if (component.inputtype === \"combo\") {\r\n            //                         saveSubSample[\"jsondata\"][component.label] = objSubSample[component.label] ?\r\n            //                             { value: objSubSample[component.label].value, label: objSubSample[component.label].label } : -1\r\n\r\n            //                         saveSubSample[\"jsonuidata\"][component.label] = objSubSample[component.label] ? objSubSample[component.label].label : \"\"\r\n            //                     }\r\n            //                     else if (component.inputtype === \"date\") {\r\n            //                         if (component.mandatory) {\r\n            //                             saveSubSample[\"jsondata\"][component.label] = convertDateTimetoStringDBFormat(objSubSample[component.label] ?\r\n            //                                 objSubSample[component.label] : new Date(), userInfo);\r\n\r\n            //                             saveSubSample[\"jsonuidata\"][component.label] = saveSubSample[\"jsondata\"][component.label]\r\n            //                         } else {\r\n            //                             saveSubSample[\"jsondata\"][component.label] = component.loadcurrentdate ?\r\n            //                             convertDateTimetoStringDBFormat(objSubSample[component.label] ?\r\n            //                                     objSubSample[component.label] : new Date(), userInfo) :\r\n            //                                 objSubSample[component.label] ? convertDateTimetoStringDBFormat(objSubSample[component.label] ?\r\n            //                                     objSubSample[component.label] : new Date(), userInfo) : \"\";\r\n            //                             saveSubSample[\"jsonuidata\"][component.label] = saveSubSample[\"jsondata\"][component.label]\r\n            //                         }\r\n            //                         if (component.timezone) {\r\n            //                             saveSubSample[\"jsondata\"][`tz${component.label}`] = objSubSample[`tz${component.label}`] ?\r\n            //                                 { value: objSubSample[`tz${component.label}`].value, label: objSubSample[`tz${component.label}`].label } :\r\n            //                                 defaulttimezone ? defaulttimezone : -1\r\n\r\n            //                             saveSubSample[\"jsonuidata\"][`tz${component.label}`] = saveSubSample[\"jsondata\"][`tz${component.label}`]\r\n            //                         }\r\n            //                         dateList.push(component.label)\r\n            //                     }\r\n            //                     else {\r\n            //                         saveSubSample[\"jsondata\"][component.label] = objSubSample[component.label] ?\r\n            //                             objSubSample[component.label] : \"\"\r\n\r\n            //                         saveSubSample[\"jsonuidata\"][component.label] = saveSubSample[\"jsondata\"][component.label]\r\n            //                     }\r\n            //                 }\r\n            //                 return saveSubSample;\r\n            //             }\r\n            //             )\r\n            //             return saveSubSample;\r\n            //         })\r\n            //         return saveSubSample;\r\n            //     })\r\n\r\n\r\n\r\n\r\n            //  saveSubSample[\"nallottedspeccode\"] = findSampleAlloSpec[0] ? findSampleAlloSpec[0] : -1;\r\n            // Component.unshift(saveSubSample);\r\n            let selectedTestData = objSubSample[\"ntestgrouptestcode\"];\r\n            const selectedTestArray = [];\r\n            selectedTestData && selectedTestData.map((item) => {\r\n                return selectedTestArray.push(item.item);\r\n            });\r\n\r\n            // const Test = this.props.Login.Test || [];\r\n            // const ArrayTest = Test[saveComponent.slno] ? Test[saveComponent.slno] : [];\r\n            //Test[saveComponent.slno] = [...ArrayTest, ...selectedTestArray]\r\n\r\n            //  const saveSubSample = this.state.selectedRecord||{}\r\n\r\n            // if (this.props.Login.specBasedComponent) {\r\n            //   saveSubSample[\"nspecsampletypecode\"] = objSubSample[\"nspecsampletypecode\"] ? objSubSample[\"nspecsampletypecode\"] : -1\r\n            // saveSubSample[\"ncomponentcode\"] = objSubSample[\"ncomponentcode\"] ? objSubSample[\"ncomponentcode\"].value : -1\r\n            //  } \r\n            //   if(!this.props.Login.specBasedComponent) {\r\n            //  const findSampleSpec = [...new Set(sampleList.map(item => item.nspecsampletypecode))];\r\n            // objSubSample[\"nspecsampletypecode\"] = selectedTestData&&selectedTestData.length>0?selectedTestData[0]['item']['nspecsampletypecode']:-1;\r\n            // objSubSample[\"ncomponentcode\"] = -1\r\n            //  }\r\n\r\n            const map = {}\r\n            const param = getRegistrationSubSample(\r\n                objSubSample,\r\n                this.props.Login.masterData.SubSampleTemplate.jsondata,\r\n                this.props.Login.userInfo, this.props.Login.defaulttimezone, false,\r\n                this.props.Login.specBasedComponent, operation);\r\n\r\n            map[\"RegistrationSample\"] = param.sampleRegistration\r\n            if (this.props.Login.masterData.RealSampleTypeValue && this.props.Login.masterData.RealSampleTypeValue.nsampletypecode === SampleType.CLINICALTYPE) {\r\n                map[\"RegistrationSample\"]['jsondata'] = { ...map[\"RegistrationSample\"]['jsondata'], externalorderid: sampleList[0]['Order'] }\r\n                map[\"RegistrationSample\"]['jsonuidata'] = { ...map[\"RegistrationSample\"]['jsonuidata'], externalorderid: sampleList[0]['Order'] }\r\n            }\r\n            map[\"subsampleDateList\"] = param.dateList\r\n            map[\"RegistrationSample\"][\"nallottedspeccode\"] = findSampleAlloSpec[0] ? findSampleAlloSpec[0] : -1;\r\n            // map['RegistrationSample'] = saveSubSample\r\n            //   map['subsampleDateList'] = dateList\r\n            map[\"subsamplecombinationunique\"] = this.state.subsampleCombinationUnique;\r\n            map['subsampledateconstraints'] = this.state.subsampledateconstraints;\r\n            map['testgrouptest'] = selectedTestArray\r\n            map['npreregno'] = sampleList.map(item => item.npreregno).join(\",\")\r\n            map['userinfo'] = userInfo;\r\n           // map['checkBoxOperation'] = 3;\r\n            map['checkBoxOperation']= checkBoxOperation.SINGLESELECT;\r\n            map['ntype'] = 3;\r\n            map[\"ndesigntemplatemappingcode\"] = this.props.Login.masterData.RealDesignTemplateMappingValue\r\n                && this.props.Login.masterData.RealDesignTemplateMappingValue.ndesigntemplatemappingcode;\r\n            map[\"napproveconfversioncode\"] = this.props.Login.masterData.RealApprovalConfigVersionValue\r\n                && this.props.Login.masterData.RealApprovalConfigVersionValue.napproveconfversioncode;\r\n            map[\"nneedtemplatebasedflow\"] = this.props.Login.masterData.RegSubTypeValue\r\n                && this.props.Login.masterData.RegSubTypeValue.nneedtemplatebasedflow;\r\n            map[\"nneedsubsample\"] = this.props.Login.masterData.RegSubTypeValue\r\n                && this.props.Login.masterData.RegSubTypeValue.nneedsubsample;\r\n            map[\"nneedjoballocation\"] = this.props.Login.masterData.RegSubTypeValue\r\n                && this.props.Login.masterData.RegSubTypeValue.nneedjoballocation;\r\n\r\n            map[\"masterData\"] = this.props.Login.masterData;\r\n            map[\"activeTestTab\"] = this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\";\r\n            map[\"activeSampleTab\"] = this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\";\r\n            map[\"activeSubSampleTab\"] = this.props.Login.activeSubSampleTab || \"IDS_SUBSAMPLEATTACHMENTS\";\r\n            map[\"specBasedComponent\"] = this.props.Login.specBasedComponent;\r\n            map[\"nsampletypecode\"] = this.props.Login.masterData.RealSampleTypeValue.nsampletypecode;\r\n            map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\r\n            map[\"nregsubtypecode\"] = this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode;\r\n            map[\"skipmethodvalidity\"] = false;\r\n            const obj = convertDateValuetoString(this.state.selectedFilter.fromdate || this.props.Login.masterData.FromDate,\r\n                this.state.selectedFilter.todate || this.props.Login.masterData.ToDate, this.props.Login.userInfo)\r\n            map[\"FromDate\"] = obj.fromDate;\r\n            map[\"ToDate\"] = obj.toDate;\r\n            map[\"nfilterstatus\"] = this.props.Login.masterData.FilterStatusValue.ntransactionstatus;\r\n            map[\"loadAdhocTest\"] = false;\r\n\r\n\r\n            if (this.props.Login.masterData.RealSampleTypeValue.nsampletypecode === SampleType.CLINICALTYPE) {\r\n                map[\"order\"] = sampleList[0][\"OrderIdData\"]\r\n                const Layout = this.props.Login.masterData.registrationTemplate.jsondata;\r\n                const cTWithoutComboData = []\r\n                let cTData = [];\r\n\r\n\r\n                Layout.map(row => {\r\n                    return row.children.map(column => {\r\n                        return column.children.map(component => {\r\n                            return component.hasOwnProperty(\"children\") ?\r\n                                component.children.map(componentrow => {\r\n                                    if (componentrow.inputtype === \"combo\") {\r\n                                        cTData.push(componentrow)\r\n                                    } else {\r\n                                        cTWithoutComboData.push(componentrow)\r\n                                    }\r\n                                    return null;\r\n                                })\r\n                                : component.inputtype === \"combo\" ?\r\n                                    cTData.push(component) : cTWithoutComboData.push(component)\r\n                        })\r\n                    })\r\n\r\n                })\r\n                let data = []\r\n                sampleList.map(item => {\r\n                    let dob = cTWithoutComboData.filter(x => x.name === \"Date Of Birth\");\r\n                    let gender = cTData.filter(x => x.name === \"Gender\");\r\n                    const age = parseInt(ageCalculate(rearrangeDateFormat(this.props.Login.userInfo, item[dob[0].label]), true));\r\n                    data.push({ \"npreregno\": parseInt(item.npreregno), \"nage\": age, \"ngendercode\": item.ngendercode });\r\n                    map[\"ageData\"] = data;\r\n                }\r\n                )\r\n\r\n                map[\"skipmethodvalidity\"] = false;\r\n\r\n\r\n            }\r\n            let isFileupload = false;\r\n            const formData = new FormData();\r\n            this.props.Login.regSubSamplewithoutCombocomponent.map((item) => {\r\n                if (item.inputtype === 'files') {\r\n                    if (typeof objSubSample[item && item.label] === \"object\") {\r\n                        objSubSample[item && item.label] && objSubSample[item && item.label].forEach((item1, index) => {\r\n                            formData.append(\"uploadedFile\" + index, item1);\r\n                            formData.append(\"uniquefilename\" + index, map[\"RegistrationSample\"].uniquefilename);\r\n                            formData.append(\"filecount\", objSubSample[item && item.label].length);\r\n                            formData.append(\"isFileEdited\", transactionStatus.YES);\r\n                            formData.append(\"userinfo\", JSON.stringify(this.props.Login.userInfo));\r\n                            delete (map[\"RegistrationSample\"].uniquefilename);\r\n                            delete (map[\"RegistrationSample\"][item && item.label]);\r\n                            formData.append('Map', Lims_JSON_stringify(JSON.stringify(map)));\r\n                            isFileupload = true;\r\n                        })\r\n                    }\r\n                }\r\n            })\r\n\r\n            const inputParam = {\r\n                inputData: map,\r\n                postParamList: this.postParamList,\r\n                formData: formData, isFileupload\r\n            }\r\n\r\n            this.props.saveSubSample(inputParam);\r\n        } else {\r\n            this.onUpdateSubSampleRegistration(saveType, formRef, operation);\r\n        }\r\n    }\r\n\r\n    onSaveCancelOrderMandatoryFields = [{ \"mandatory\": true, \"idsName\": \"IDS_EXTERNALORDERTYPE\", \"dataField\": \"nexternalordertypecode\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n    { \"mandatory\": true, \"idsName\": \"IDS_ORDERSAMPLEID\", \"dataField\": \"sexternalorderid\", \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"textbox\" }];\r\n\r\n    mandatoryList = (prereg, printer, file, childtest, regSubSample, operation, outsourcetest,adhocTest) => {\r\n        let mandatory = [];\r\n        if (file) {\r\n            mandatory = [\r\n                { \"mandatory\": true, \"idsName\": \"IDS_IMPORTFILE\", \"dataField\": \"sfilename\", \"mandatoryLabel\": \"IDS_CHOOSE\", \"controlType\": \"file\" }\r\n            ];\r\n        }\r\n        else if (printer) {\r\n            mandatory = [\r\n                { \"mandatory\": true, \"idsName\": \"IDS_PRINTER\", \"dataField\": \"sprintername\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n                { \"mandatory\": true, \"idsName\": \"IDS_BARCODENAME\", \"dataField\": \"sbarcodename\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" }\r\n            ]\r\n        }\r\n        else if (regSubSample) {\r\n\r\n            let sampleList = [];\r\n            const skip = this.state.skip\r\n            const take = this.state.take\r\n            if (this.props.Login.masterData.searchedSample !== undefined) {\r\n                //sampleList = getSameRecordFromTwoArrays(this.props.Login.masterData.searchedSample, this.props.Login.masterData.RegistrationGetSample.slice(skip, skip + take), \"npreregno\");\r\n                const list = this.props.Login.masterData.searchedSample ? this.props.Login.masterData.searchedSample\r\n                    : this.props.Login.masterData.RegistrationGetSample;\r\n\r\n                sampleList = list ? list.slice(skip, skip + take) : [];\r\n            } else {\r\n                sampleList = this.props.Login.masterData.RegistrationGetSample && this.props.Login.masterData.RegistrationGetSample.slice(skip, skip + take);\r\n            }\r\n\r\n            let addSubSampleList = getSameRecordFromTwoArrays(sampleList || [], this.props.Login.masterData.selectedSample, \"npreregno\");\r\n            const findComponentReqSpec = [...new Set(addSubSampleList.map(item => item.ncomponentrequired))];\r\n            if (findComponentReqSpec[0] === 3) {\r\n                mandatory = [{ \"idsName\": \"IDS_COMPONENT\", \"dataField\": \"ncomponentcode\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"combo\" }]\r\n            }\r\n\r\n            this.props.Login.masterData.SubSampleTemplate &&\r\n                this.props.Login.masterData.SubSampleTemplate.jsondata.map(row => {\r\n                    return row.children.map(column => {\r\n                        return column.children.map(component => {\r\n                            return component.hasOwnProperty(\"children\") ?\r\n                                component.children.map(componentrow => {\r\n                                    if (componentrow.mandatory === true) {\r\n                                        mandatory.push({ \"mandatory\": true, \"idsName\": componentrow.displayname[this.props.Login.userInfo.slanguagetypecode], \"dataField\": componentrow.label, \"mandatoryLabel\": componentrow.inputtype === \"combo\" ? \"IDS_SELECT\" : \"IDS_ENTER\", \"controlType\": componentrow.inputtype === \"combo\" ? \"selectbox\" : \"textbox\" })\r\n\r\n                                    }\r\n                                    return mandatory;\r\n                                })\r\n                                : component.mandatory === true ?\r\n                                    mandatory.push({ \"mandatory\": true, \"idsName\": component.displayname[this.props.Login.userInfo.slanguagetypecode], \"dataField\": component.label, \"mandatoryLabel\": component.inputtype === \"combo\" ? \"IDS_SELECT\" : \"IDS_ENTER\", \"controlType\": component.inputtype === \"combo\" ? \"selectbox\" : \"textbox\" }) : \"\"\r\n\r\n                        })\r\n                    })\r\n                })\r\n            if (operation !== 'update') {\r\n                mandatory.push({ \"mandatory\": true, \"idsName\": \"IDS_TESTNAME\", \"dataField\": \"ntestgrouptestcode\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" })\r\n            }\r\n        }\r\n        else if (childtest) {\r\n            mandatory = [\r\n                { \"mandatory\": true, \"idsName\": \"IDS_TESTNAME\", \"dataField\": \"ntestgrouptestcode\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" }\r\n            ];\r\n        }\r\n        else if (outsourcetest) {\r\n            mandatory = [{ \"idsName\": \"IDS_SITE\", \"dataField\": \"outsourcesite\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"combo\" }\r\n                , { \"idsName\": \"IDS_TEST\", \"dataField\": \"outSourceTestList\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"combo\" }\r\n                , { \"idsName\": \"IDS_SAMPLEID\", \"dataField\": \"ssampleid\", \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"textbox\" }\r\n                , { \"idsName\": \"IDS_OUTSOURCEDATE\", \"dataField\": \"doutsourcedate\", \"mandatoryLabel\": \"IDS_CHOOSE\", \"controlType\": \"selectbox\", }\r\n            ]\r\n\r\n        }\r\n        else if (adhocTest) {\r\n            mandatory = [\r\n                { \"mandatory\": true, \"idsName\": \"IDS_TESTNAME\", \"dataField\": \"ntestcode\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" }\r\n            ];\r\n        }\r\n        return mandatory;\r\n    }\r\n    mandatoryMappingList = () => {\r\n        let mandatory = [];\r\n        mandatory = [\r\n            , { \"idsName\": \"IDS_ORDER\", \"dataField\": \"nexternalordercode\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"combo\" }\r\n\r\n        ]\r\n\r\n\r\n        return mandatory;\r\n    }\r\n\r\n    deleteAttachment = (event, file, fieldName) => {\r\n        let selectedFile = this.state.selectedFile || {};\r\n        selectedFile[fieldName] = deleteAttachmentDropZone(selectedFile[fieldName], file)\r\n        this.setState({\r\n            selectedFile, actionType: \"delete\" //fileToDelete:file.name \r\n        });\r\n    }\r\n\r\n    onSaveChildTestClick = (saveType, formRef) => {\r\n        const masterData = this.props.Login.masterData;\r\n\r\n        //console.log(\"test1:\", this.props.Login.masterData);\r\n\r\n        let sampleList = [];\r\n        const skip = this.state.skip;\r\n        const take = this.state.take;\r\n        if (this.props.Login.masterData.searchedSample !== undefined) {\r\n            const list = this.props.Login.masterData.searchedSample ? this.props.Login.masterData.searchedSample\r\n                : this.props.Login.masterData.RegistrationGetSample;\r\n\r\n            sampleList = list ? list.slice(skip, skip + take) : [];\r\n        } else {\r\n            sampleList = this.props.Login.masterData.RegistrationGetSample && sortDataForDate(this.props.Login.masterData.RegistrationGetSample, 'dtransactiondate', 'npreregno').slice(skip, skip + take);\r\n        }\r\n        const selectedSample = getSameRecordFromTwoArrays(masterData.selectedSample, sampleList, \"npreregno\");\r\n\r\n\r\n        let subsampleList = [];\r\n        const subsampleskip = this.state.subsampleskip;\r\n        const subsampletake = this.state.subsampletake;\r\n        if (this.props.Login.masterData.searchedSubSample !== undefined) {\r\n            const list = this.props.Login.masterData.searchedSubSample ? this.props.Login.masterData.searchedSubSample\r\n                : this.props.Login.masterData.RegistrationGetSubSample;\r\n\r\n            subsampleList = list ? list.slice(subsampleskip, subsampleskip + subsampletake) : [];\r\n        } else {\r\n            subsampleList = this.props.Login.masterData.RegistrationGetSubSample && this.props.Login.masterData.RegistrationGetSubSample.slice(subsampleskip, subsampleskip + subsampletake);\r\n        }\r\n        const selectedSubsample = getSameRecordFromTwoArrays(masterData.selectedSubSample, subsampleList, \"npreregno\");\r\n\r\n\r\n        //const selectedSubsample = getSameRecordFromTwoArrays(masterData.selectedSubSample, masterData.RegistrationGetSubSample.slice(this.state.subsampleskip, (this.state.subsampleskip + this.state.subsampletake)), \"npreregno\");\r\n        //const selectedSample = getSameRecordFromTwoArrays(masterData.selectedSample, masterData.RegistrationGetSample.slice(this.state.skip, (this.state.skip + this.state.take)), \"npreregno\");\r\n        ////  selectedSubsample =masterData.selectedSubSample.slice(this.state.skip, (this.state.skip + this.state.take));\r\n\r\n\r\n        const ntransactionsamplecode = selectedSubsample.map(x => x.ntransactionsamplecode).join(\",\");\r\n        let data = [];\r\n\r\n        let obj = convertDateValuetoString(this.props.Login.masterData.RealFromDate,\r\n            this.props.Login.masterData.RealToDate, this.props.Login.userInfo);\r\n\r\n        if (this.props.Login.masterData.RealSampleTypeValue.nsampletypecode === SampleType.CLINICALTYPE) {\r\n\r\n            const Layout = this.props.Login.masterData.registrationTemplate.jsondata;\r\n            const cTWithoutComboData = []\r\n            let cTData = [];\r\n\r\n\r\n            Layout.map(row => {\r\n                return row.children.map(column => {\r\n                    return column.children.map(component => {\r\n                        return component.hasOwnProperty(\"children\") ?\r\n                            component.children.map(componentrow => {\r\n                                if (componentrow.inputtype === \"combo\") {\r\n                                    cTData.push(componentrow)\r\n                                } else {\r\n                                    cTWithoutComboData.push(componentrow)\r\n                                }\r\n                                return null;\r\n                            })\r\n                            : component.inputtype === \"combo\" ?\r\n                                cTData.push(component) : cTWithoutComboData.push(component)\r\n                    })\r\n                })\r\n\r\n            })\r\n            selectedSample.map(item => {\r\n                let dob = cTWithoutComboData.filter(x => x.name === \"Date Of Birth\")\r\n                let gender = cTData.filter(x => x.name === \"Gender\")\r\n                const ageCal = parseInt(ageCalculate(item[dob[0].label], true));\r\n                data.push({ \"npreregno\": parseInt(item.npreregno), \"nage\": ageCal, \"ngendercode\": item.ngendercode })\r\n            }\r\n            )\r\n\r\n        }\r\n        const inputData = {\r\n            nneedjoballocation: masterData.RealRegSubTypeValue.nneedjoballocation ? masterData.RealRegSubTypeValue.nneedjoballocation : false,\r\n            TestGroupTest: this.state.selectedRecord.ntestgrouptestcode.map(value => value.item),\r\n            RegistrationSample: selectedSubsample.map(x => x.ntransactionsamplecode),\r\n            ntransactionsamplecode: ntransactionsamplecode,\r\n            userinfo: this.props.Login.userInfo,\r\n            nregtypecode: masterData.RealRegTypeValue.nregtypecode,\r\n            nregsubtypecode: masterData.RealRegSubTypeValue.nregsubtypecode,\r\n            nsampletypecode: masterData.RealSampleTypeValue.nsampletypecode,\r\n            ntype: 3,\r\n            nfilterstatus: this.props.Login.masterData.FilterStatusValue.ntransactionstatus,\r\n            npreregno: selectedSample &&\r\n                selectedSample.map(sample => sample.npreregno).join(\",\"),\r\n            // ntransactionsamplecode: selectedSubsample &&\r\n            // selectedSubsample.map(sample => sample.ntransactionsamplecode).join(\",\"),\r\n            FromDate: obj.fromDate,\r\n            ToDate: obj.toDate,\r\n            ndesigntemplatemappingcode: this.props.Login.masterData.RealDesignTemplateMappingValue\r\n                && this.props.Login.masterData.RealDesignTemplateMappingValue.ndesigntemplatemappingcode,\r\n            nneedtemplatebasedflow: this.props.Login.masterData.RegSubTypeValue\r\n                && this.props.Login.masterData.RegSubTypeValue.nneedtemplatebasedflow,\r\n            nneedsubsample: this.props.Login.masterData.RegSubTypeValue\r\n                && this.props.Login.masterData.RegSubTypeValue.nneedsubsample,\r\n          //  checkBoxOperation: 3,\r\n            checkBoxOperation: checkBoxOperation.SINGLESELECT,\r\n            napproveconfversioncode: this.props.Login.masterData.RealApprovalConfigVersionValue\r\n                && this.props.Login.masterData.RealApprovalConfigVersionValue.napproveconfversioncode || -1,\r\n            activeTestTab: this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\",\r\n            activeSampleTab: this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\",\r\n            activeSubSampleTab: this.props.Login.activeSubSampleTab || \"IDS_SUBSAMPLEATTACHMENTS\",\r\n            ageData: data,\r\n            nsampletypecode: this.props.Login.masterData.RealSampleTypeValue.nsampletypecode,\r\n            ntestpackagecode: this.state.selectedRecord['ntestpackagecode'] && this.state.selectedRecord['ntestpackagecode'],\r\n            skipmethodvalidity: false,\r\n            loadAdhocTest:false\r\n        }\r\n\r\n\r\n        const inputParam = {\r\n            inputData,\r\n            classUrl: \"registration\",\r\n            operation: this.props.Login.operation,\r\n            methodUrl: \"Test\",\r\n            responseKeyList: [\r\n                { \"responseKey\": \"selectedSample\", \"masterDataKey\": \"RegistrationGetSample\", \"primaryKey\": \"npreregno\", \"dataAction\": \"update\" },\r\n                { \"responseKey\": \"selectedSubSample\", \"masterDataKey\": \"RegistrationGetSubSample\", \"primaryKey\": \"ntransactionsamplecode\", \"dataAction\": \"update\" },\r\n                { \"responseKey\": \"selectedTest\", \"masterDataKey\": \"RegistrationGetTest\", \"primaryKey\": \"ntransactiontestcode\", \"dataAction\": \"add\" }],\r\n            saveType, formRef,\r\n            postParamList: this.postParamList,\r\n\r\n        }\r\n        if (showEsign(this.state.controlMap, this.props.Login.userInfo.nformcode, this.props.ncontrolCode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData }, saveType\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        } else {\r\n            this.props.createRegistrationTest(inputParam, masterData, \"openModal\");\r\n        }\r\n    }\r\n   //ALPD-3615--Start\r\n    onSaveAdhocTestClick = (saveType, formRef) => {\r\n        const masterData = this.props.Login.masterData;\r\n\r\n        //console.log(\"test1:\", this.props.Login.masterData);\r\n\r\n        let sampleList = [];\r\n        const skip = this.state.skip;\r\n        const take = this.state.take;\r\n        if (this.props.Login.masterData.searchedSample !== undefined) {\r\n            const list = this.props.Login.masterData.searchedSample ? this.props.Login.masterData.searchedSample\r\n                : this.props.Login.masterData.RegistrationGetSample;\r\n\r\n            sampleList = list ? list.slice(skip, skip + take) : [];\r\n        } else {\r\n            sampleList = this.props.Login.masterData.RegistrationGetSample && sortDataForDate(this.props.Login.masterData.RegistrationGetSample, 'dtransactiondate', 'npreregno').slice(skip, skip + take);\r\n        }\r\n        const selectedSample = getSameRecordFromTwoArrays(masterData.selectedSample, sampleList, \"npreregno\");\r\n\r\n\r\n        let subsampleList = [];\r\n        const subsampleskip = this.state.subsampleskip;\r\n        const subsampletake = this.state.subsampletake;\r\n        if (this.props.Login.masterData.searchedSubSample !== undefined) {\r\n            const list = this.props.Login.masterData.searchedSubSample ? this.props.Login.masterData.searchedSubSample\r\n                : this.props.Login.masterData.RegistrationGetSubSample;\r\n\r\n            subsampleList = list ? list.slice(subsampleskip, subsampleskip + subsampletake) : [];\r\n        } else {\r\n            subsampleList = this.props.Login.masterData.RegistrationGetSubSample && this.props.Login.masterData.RegistrationGetSubSample.slice(subsampleskip, subsampleskip + subsampletake);\r\n        }\r\n        const selectedSubsample = getSameRecordFromTwoArrays(masterData.selectedSubSample, subsampleList, \"npreregno\");\r\n        const selectedSampleSpecType = getSameRecordFromTwoArrays(masterData.selectedSubSample, masterData.selectedSample, \"npreregno\");\r\n\r\n        const ntransactionsamplecode = selectedSubsample.map(x => x.ntransactionsamplecode).join(\",\");\r\n        let data = [];\r\n\r\n        let obj = convertDateValuetoString(this.props.Login.masterData.RealFromDate,\r\n            this.props.Login.masterData.RealToDate, this.props.Login.userInfo);\r\n\r\n        if (this.props.Login.masterData.RealSampleTypeValue.nsampletypecode === SampleType.CLINICALTYPE) {\r\n\r\n            const Layout = this.props.Login.masterData.registrationTemplate.jsondata;\r\n            const cTWithoutComboData = []\r\n            let cTData = [];\r\n\r\n\r\n            Layout.map(row => {\r\n                return row.children.map(column => {\r\n                    return column.children.map(component => {\r\n                        return component.hasOwnProperty(\"children\") ?\r\n                            component.children.map(componentrow => {\r\n                                if (componentrow.inputtype === \"combo\") {\r\n                                    cTData.push(componentrow)\r\n                                } else {\r\n                                    cTWithoutComboData.push(componentrow)\r\n                                }\r\n                                return null;\r\n                            })\r\n                            : component.inputtype === \"combo\" ?\r\n                                cTData.push(component) : cTWithoutComboData.push(component)\r\n                    })\r\n                })\r\n\r\n            })\r\n            selectedSample.map(item => {\r\n                let dob = cTWithoutComboData.filter(x => x.name === \"Date Of Birth\")\r\n                let gender = cTData.filter(x => x.name === \"Gender\")\r\n                const ageCal = parseInt(ageCalculate(item[dob[0].label], true));\r\n                data.push({ \"npreregno\": parseInt(item.npreregno), \"nage\": ageCal, \"ngendercode\": item.ngendercode })\r\n            }\r\n            )\r\n\r\n        }\r\n        this.state.selectedRecord.ntestcode.item['nisvisible'] = this.state.selectedRecord.visibleadhoctest;\r\n        this.state.selectedRecord.ntestcode.item['nisadhoctest'] = transactionStatus.YES;\r\n        const inputData = {\r\n            nneedjoballocation: masterData.RealRegSubTypeValue.nneedjoballocation ? masterData.RealRegSubTypeValue.nneedjoballocation : false,\r\n            TestGroupTest: this.state.selectedRecord.ntestcode.item,\r\n            RegistrationSample: selectedSubsample.map(x => x.ntransactionsamplecode),\r\n            ntransactionsamplecode: ntransactionsamplecode,\r\n            userinfo: this.props.Login.userInfo,\r\n            nregtypecode: masterData.RealRegTypeValue.nregtypecode,\r\n            nregsubtypecode: masterData.RealRegSubTypeValue.nregsubtypecode,\r\n            nsampletypecode: masterData.RealSampleTypeValue.nsampletypecode,\r\n            ntype: 3,\r\n            nfilterstatus: this.props.Login.masterData.FilterStatusValue.ntransactionstatus,\r\n            npreregno: selectedSample &&\r\n                selectedSample.map(sample => sample.npreregno).join(\",\"),\r\n            // ntransactionsamplecode: selectedSubsample &&\r\n            // selectedSubsample.map(sample => sample.ntransactionsamplecode).join(\",\"),\r\n            FromDate: obj.fromDate,\r\n            ToDate: obj.toDate,\r\n            ndesigntemplatemappingcode: this.props.Login.masterData.RealDesignTemplateMappingValue\r\n                && this.props.Login.masterData.RealDesignTemplateMappingValue.ndesigntemplatemappingcode,\r\n            nneedtemplatebasedflow: this.props.Login.masterData.RegSubTypeValue\r\n                && this.props.Login.masterData.RegSubTypeValue.nneedtemplatebasedflow,\r\n            nneedsubsample: this.props.Login.masterData.RegSubTypeValue\r\n                && this.props.Login.masterData.RegSubTypeValue.nneedsubsample,\r\n            checkBoxOperation: 3,\r\n            napproveconfversioncode: this.props.Login.masterData.RealApprovalConfigVersionValue\r\n                && this.props.Login.masterData.RealApprovalConfigVersionValue.napproveconfversioncode || -1,\r\n            activeTestTab: this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\",\r\n            activeSampleTab: this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\",\r\n            activeSubSampleTab: this.props.Login.activeSubSampleTab || \"IDS_SUBSAMPLEATTACHMENTS\",\r\n            ageData: data,\r\n            nsampletypecode: this.props.Login.masterData.RealSampleTypeValue.nsampletypecode,\r\n            ntestpackagecode: this.state.selectedRecord['ntestpackagecode'] && this.state.selectedRecord['ntestpackagecode'],\r\n            skipmethodvalidity: false,\r\n            loadAdhocTest: this.props.Login.loadAdhocTest,\r\n            nspecsampletypecode: selectedSampleSpecType.map(item => ({ \"nspecsampletypecode\": item[\"nspecsampletypecode\"] })),\r\n            ncontrolCode: this.state.adhocTestId\r\n        }\r\n\r\n        const inputParam = {\r\n            inputData,\r\n            classUrl: \"registration\",\r\n            operation: this.props.Login.operation,\r\n            methodUrl: \"AdhocTest\",\r\n            responseKeyList: [\r\n                { \"responseKey\": \"selectedSample\", \"masterDataKey\": \"RegistrationGetSample\", \"primaryKey\": \"npreregno\", \"dataAction\": \"update\" },\r\n                { \"responseKey\": \"selectedSubSample\", \"masterDataKey\": \"RegistrationGetSubSample\", \"primaryKey\": \"ntransactionsamplecode\", \"dataAction\": \"update\" },\r\n                { \"responseKey\": \"selectedTest\", \"masterDataKey\": \"RegistrationGetTest\", \"primaryKey\": \"ntransactiontestcode\", \"dataAction\": \"add\" }],\r\n            saveType, formRef,\r\n            postParamList: this.postParamList,\r\n            action: 'adhocTest'\r\n\r\n        }\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData }, saveType\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        } else {\r\n            this.props.createAdhocTest(inputParam, masterData, \"openModal\");\r\n        }\r\n    }\r\n//ALPD-3615--End\r\n    getRegistrationComboService = (ScreenName, operation,\r\n        primaryKeyField, masterData, userInfo, editId, importData) => {\r\n\r\n        const ndesigntemplatemappingcodefilter = this.props.Login.masterData.DesignTemplateMappingValue &&\r\n            this.props.Login.masterData.DesignTemplateMappingValue.ndesigntemplatemappingcode;\r\n        if (ndesigntemplatemappingcodefilter === this.props.Login.masterData.ndesigntemplatemappingcode) {\r\n            let data = [];\r\n            const withoutCombocomponent = []\r\n            const Layout = this.props.Login.masterData.registrationTemplate\r\n                && this.props.Login.masterData.registrationTemplate.jsondata\r\n            if (Layout !== undefined) {\r\n                Layout.map(row => {\r\n                    return row.children.map(column => {\r\n                        return column.children.map(component => {\r\n                            return component.hasOwnProperty(\"children\") ?\r\n                                component.children.map(componentrow => {\r\n                                    if (componentrow.inputtype === \"combo\" || componentrow.inputtype === \"backendsearchfilter\"\r\n                                        || componentrow.inputtype === \"frontendsearchfilter\") {\r\n                                        data.push(componentrow)\r\n                                    } else {\r\n                                        withoutCombocomponent.push(componentrow)\r\n                                    }\r\n                                    return null;\r\n                                })\r\n                                : component.inputtype === \"combo\" || component.inputtype === \"backendsearchfilter\"\r\n                                    || component.inputtype === \"frontendsearchfilter\" ?\r\n                                    data.push(component) : withoutCombocomponent.push(component)\r\n                        })\r\n                    })\r\n\r\n                })\r\n                const comboComponents = data\r\n                let childColumnList = {};\r\n                data.map(columnList => {\r\n                    const val = comboChild(data, columnList, childColumnList, true);\r\n                    data = val.data;\r\n                    childColumnList = val.childColumnList\r\n                    return null;\r\n                })\r\n                const mapOfFilterRegData = {\r\n                    nsampletypecode: parseInt(this.props.Login.masterData.RealSampleTypeValue.nsampletypecode),\r\n                    sampletypecategorybasedflow: parseInt(this.props.Login.masterData.RealSampleTypeValue.ncategorybasedflowrequired),\r\n                    nneedsubsample: this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample === true ? transactionStatus.YES : transactionStatus.NO\r\n\r\n                }\r\n                this.props.getPreviewTemplate(masterData, userInfo, editId,\r\n                    data, this.state.selectedRecord, childColumnList,\r\n                    comboComponents, withoutCombocomponent, true, false,\r\n                    mapOfFilterRegData, false, \"create\", this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename, importData)\r\n            } else {\r\n                toast.info(this.props.intl.formatMessage({ id: \"IDS_CONFIGURETEMPLATE\" }));\r\n            }\r\n        } else {\r\n            toast.info(this.props.intl.formatMessage({ id: \"IDS_SELECTAPPROVEDDESIGNTEMPLATE\" }));\r\n        }\r\n    }\r\n    getBarcodeAndPrinter = (ScreenName, operation,\r\n        primaryKeyField, masterData, userInfo, editId) => {\r\n        toast.info(this.props.intl.formatMessage({ id: \"IDS_SELECTAPPROVEDDESIGNTEMPLATE\" }));\r\n    }\r\n\r\n\r\n    printBarcode = (inputParam) => {\r\n\r\n        this.setState({\r\n            selectedRecord: {\r\n                barcodevalue: inputParam.sample.sarno,\r\n                barcodeData: inputParam.sample\r\n            },\r\n            showQRCode: true, openModal: true\r\n        })\r\n    }\r\n    comboChild = (data, columnList, childColumnList, slice) => {\r\n        let retunObj = {}\r\n        // if (data.findIndex(x => x.label === columnList.label) !== -1) {\r\n        if (!childColumnList.hasOwnProperty(columnList.label)) {\r\n            if (childColumnList[columnList.label] === undefined) {\r\n                if (columnList.hasOwnProperty(\"child\")) {\r\n                    let childList = []\r\n                    columnList.child.map(childData => {\r\n                        const index = data.findIndex(x => x.label === childData.label)\r\n                        if (index !== -1) {\r\n                            childList.push(data[index])\r\n                            if (slice) {\r\n                                data = [...data.slice(0, index), ...data.slice(index + 1)]\r\n                            }\r\n                        }\r\n                        return data;\r\n                    })\r\n                    childColumnList[columnList.label] = childList;\r\n                    if (childList.length > 0) {\r\n                        childList.map(y => {\r\n                            if (y.hasOwnProperty(\"child\")) {\r\n                                const val = comboChild(data, y, childColumnList, slice)\r\n                                retunObj[\"data\"] = val.data;\r\n                                retunObj[\"childColumnList\"] = val.childColumnList;\r\n                            } else {\r\n                                retunObj[\"data\"] = data;\r\n                                retunObj[\"childColumnList\"] = childColumnList;\r\n                            }\r\n                            return null;\r\n                        })\r\n                    } else {\r\n                        retunObj[\"data\"] = data;\r\n                        retunObj[\"childColumnList\"] = childColumnList;\r\n                    }\r\n                } else {\r\n                    retunObj[\"data\"] = data;\r\n                    retunObj[\"childColumnList\"] = childColumnList;\r\n                }\r\n            } else {\r\n                retunObj[\"data\"] = data;\r\n                retunObj[\"childColumnList\"] = childColumnList;\r\n\r\n            }\r\n        } else {\r\n            retunObj[\"data\"] = data;\r\n            retunObj[\"childColumnList\"] = childColumnList;\r\n\r\n        }\r\n        return retunObj;\r\n    }\r\n\r\n    handlePageChange = e => {\r\n        this.setState({\r\n            skip: e.skip,\r\n            take: e.take\r\n        });\r\n        //setTimeout(() => { this._scrollBarRef.updateScroll() })\r\n    };\r\n\r\n    handleTestPageChange = e => {\r\n        this.setState({\r\n            testskip: e.skip,\r\n            testtake: e.take\r\n        });\r\n    };\r\n\r\n    handleSubSamplePageChange = e => {\r\n        this.setState({\r\n            subsampleskip: e.skip,\r\n            subsampletake: e.take\r\n        });\r\n    };\r\n\r\n    openFilter = () => {\r\n        let showFilter = !this.props.Login.showFilter\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { showFilter }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    onFilterChange = (event, labelname) => {\r\n        let masterData = this.props.Login.masterData;\r\n        masterData = {\r\n            ...masterData,\r\n            [labelname]: { ...event.item }\r\n        }\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { masterData }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    onSampleTabChange = (tabProps) => {\r\n        const activeSampleTab = tabProps.screenName;\r\n        if (activeSampleTab !== this.props.Login.activeSampleTab) {\r\n            let inputData = {\r\n                masterData: this.props.Login.masterData,\r\n                selectedSample: this.props.Login.masterData.selectedSample,\r\n                npreregno: this.props.Login.masterData.selectedSample ? this.props.Login.masterData.selectedSample.map(item => item.npreregno).join(\",\") : \"-1\",\r\n                userinfo: this.props.Login.userInfo,\r\n                screenName: activeSampleTab,\r\n                activeSampleTab,\r\n                activeTabIndex: tabProps.activeTabIndex ? tabProps.activeTabIndex : this.state.activeTabIndex,\r\n            }\r\n            this.props.getSampleChildTabDetail(inputData)\r\n        }\r\n    }\r\n\r\n    onSubSampleTabChange = (tabProps) => {\r\n        const activeSubSampleTab = tabProps.screenName;\r\n        if (activeSubSampleTab !== this.props.Login.activeSubSampleTab) {\r\n            let inputData = {\r\n                masterData: this.props.Login.masterData,\r\n                selectedSubSample: this.props.Login.masterData.selectedSubSample,\r\n                ntransactionsamplecode: this.props.Login.masterData.selectedSubSample ? this.props.Login.masterData.selectedSubSample.map(item => item.ntransactionsamplecode).join(\",\") : \"-1\",\r\n                userinfo: this.props.Login.userInfo,\r\n                screenName: activeSubSampleTab,\r\n                activeSubSampleTab,\r\n                subSampleCommentDataState: this.state.subSampleCommentDataState,\r\n                subSampleAttachmentDataState: this.state.subSampleAttachmentDataState,\r\n                activeTabIndex: tabProps.activeTabIndex ? tabProps.activeTabIndex : this.state.activeTabIndex\r\n            }\r\n            this.props.getSubSampleChildTabDetail(inputData)\r\n        }\r\n    }\r\n\r\n    ontestTabChange = (tabProps) => {\r\n        const activeTestTab = tabProps.screenName;\r\n        if (activeTestTab !== this.props.Login.activeTestTab) {\r\n            if (this.props.Login.masterData.selectedTest && this.props.Login.masterData.selectedTest.length > 0) {\r\n                let inputData = {\r\n                    masterData: this.props.Login.masterData,\r\n                    selectedTest: this.props.Login.masterData.selectedTest,\r\n                    ntransactiontestcode: this.props.Login.masterData.selectedTest ?\r\n                        String(this.props.Login.masterData.selectedTest.map(item => item.ntransactiontestcode).join(\",\")) : \"-1\",\r\n                    npreregno: this.props.Login.masterData.selectedSample ?\r\n                        this.props.Login.masterData.selectedSample.map(item => item.npreregno).join(\",\") : \"-1\",\r\n                    userinfo: this.props.Login.userInfo,\r\n                    activeTestTab,\r\n                    screenName: activeTestTab,\r\n                    resultDataState: this.state.resultDataState,\r\n                    testCommentDataState: this.state.testCommentDataState,\r\n                    testAttachmentDataState: this.state.testAttachmentDataState,\r\n                }\r\n                this.props.getTestChildTabDetailRegistration(inputData, true)\r\n            } else {\r\n                toast.info(this.props.intl.formatMessage({ id: \"IDS_SELECTTEST\" }))\r\n            }\r\n        }\r\n    }\r\n\r\n    onDropComponentFile = (attachedFiles, fieldName, maxSize) => {\r\n        let selectedFile = this.state.selectedFile || {};\r\n        selectedFile[fieldName] = onDropAttachFileList(selectedFile[fieldName], attachedFiles, maxSize)\r\n        this.setState({ selectedFile, actionType: \"new\" });\r\n    }\r\n\r\n    handleFilterDateChange = (dateName, dateValue) => {\r\n        const { selectedFilter } = this.state;\r\n        if (dateValue === null) {\r\n            dateValue = new Date();\r\n        }\r\n        selectedFilter[dateName] = dateValue;\r\n        this.setState({ selectedFilter });\r\n    }\r\n\r\n    onUpdateRegistrationConfirm = () => {\r\n        this.showAlert();\r\n        this.onUpdateRegistration(this.props.Login.regEditParam.saveType,\r\n            this.props.Login.regEditParam.formRef,\r\n            this.props.Login.regEditParam.operation, 2)\r\n    }\r\n\r\n    onCreateTestConfirm = () => {\r\n        this.showAlert();\r\n        const inputData = {\r\n            ...this.props.Login.createTestConfirmParam.inputParam.inputData,\r\n            skipmethodvalidity: true\r\n        }\r\n        if (this.props.Login.loadAdhocTest) {\r\n            this.props.createAdhocTest({ ...this.props.Login.createTestConfirmParam.inputParam, inputData },\r\n                this.props.Login.createTestConfirmParam.masterData,\r\n                this.props.Login.createTestConfirmParam.modalName)\r\n        } else {\r\n            this.props.createRegistrationTest({ ...this.props.Login.createTestConfirmParam.inputParam, inputData },\r\n                this.props.Login.createTestConfirmParam.masterData,\r\n                this.props.Login.createTestConfirmParam.modalName)\r\n        }\r\n    }\r\n\r\n    onPreregConfirm = () => {\r\n        this.showAlert();\r\n        const inputData = {\r\n            ...this.props.Login.preregConfirmParam.inputParam.inputData,\r\n            skipmethodvalidity: true\r\n        }\r\n        this.props.insertRegistration({ ...this.props.Login.preregConfirmParam.inputParam, inputData },\r\n            this.props.Login.preregConfirmParam.masterData);\r\n    }\r\n\r\n    onCreateSubSampleConfirm = () => {\r\n        this.showAlert();\r\n        const inputData = {\r\n            ...this.props.Login.subSampleConfirmParam.inputParam.inputData,\r\n            skipmethodvalidity: true\r\n        }\r\n        this.props.saveSubSample({ ...this.props.Login.subSampleConfirmParam.inputParam, inputData });\r\n    }\r\n\r\n    onAcceptConfirm = () => {\r\n        this.showAlert();\r\n\r\n        let inputData = { ...this.props.Login.acceptConfirmParam.inputParam.inputData }\r\n        inputData['url'] = this.props.Login.settings[24];\r\n        inputData = {\r\n            ...inputData,\r\n            skipmethodvalidity: true\r\n        }\r\n        this.props.acceptRegistration({ ...this.props.Login.acceptConfirmParam.inputParam, inputData },\r\n            this.props.Login.acceptConfirmParam.masterData);\r\n    }\r\n\r\n    confirmAlert = () => {\r\n        if (this.state.showConfirmAlert) {\r\n            if (this.props.Login.regDateEditConfirmMessage) {\r\n                this.confirmMessage.confirm(this.props.intl.formatMessage({ id: \"IDS_WARNING\" }),\r\n                    this.props.intl.formatMessage({ id: \"IDS_WARNING\" }),\r\n                    this.props.Login.regDateEditConfirmMessage,\r\n                    this.props.intl.formatMessage({ id: \"IDS_OK\" }),\r\n                    this.props.intl.formatMessage({ id: \"IDS_CANCEL\" }),\r\n                    () => this.onUpdateRegistrationConfirm(),\r\n                    undefined,\r\n                    () => this.showAlert());\r\n            }\r\n            if (this.props.Login.createTestConfirmMessage) {\r\n                this.confirmMessage.confirm(this.props.intl.formatMessage({ id: \"IDS_WARNING\" }),\r\n                    this.props.intl.formatMessage({ id: \"IDS_WARNING\" }),\r\n                    this.props.Login.createTestConfirmMessage,\r\n                    this.props.intl.formatMessage({ id: \"IDS_OK\" }),\r\n                    this.props.intl.formatMessage({ id: \"IDS_CANCEL\" }),\r\n                    () => this.onCreateTestConfirm(),\r\n                    undefined,\r\n                    () => this.showAlert());\r\n            }\r\n            else if (this.props.Login.preregConfirmMessage) {\r\n                this.confirmMessage.confirm(this.props.intl.formatMessage({ id: \"IDS_WARNING\" }),\r\n                    this.props.intl.formatMessage({ id: \"IDS_WARNING\" }),\r\n                    this.props.Login.preregConfirmMessage,\r\n                    this.props.intl.formatMessage({ id: \"IDS_OK\" }),\r\n                    this.props.intl.formatMessage({ id: \"IDS_CANCEL\" }),\r\n                    () => this.onPreregConfirm(),\r\n                    undefined,\r\n                    () => this.showAlert());\r\n            }\r\n            else if (this.props.Login.subSampleConfirmMessage) {\r\n                this.confirmMessage.confirm(this.props.intl.formatMessage({ id: \"IDS_WARNING\" }),\r\n                    this.props.intl.formatMessage({ id: \"IDS_WARNING\" }),\r\n                    this.props.Login.subSampleConfirmMessage,\r\n                    this.props.intl.formatMessage({ id: \"IDS_OK\" }),\r\n                    this.props.intl.formatMessage({ id: \"IDS_CANCEL\" }),\r\n                    () => this.onCreateSubSampleConfirm(),\r\n                    undefined,\r\n                    () => this.showAlert());\r\n            }\r\n            else if (this.props.Login.acceptConfirmMessage) {\r\n                this.confirmMessage.confirm(this.props.intl.formatMessage({ id: \"IDS_WARNING\" }),\r\n                    this.props.intl.formatMessage({ id: \"IDS_WARNING\" }),\r\n                    this.props.Login.acceptConfirmMessage,\r\n                    this.props.intl.formatMessage({ id: \"IDS_OK\" }),\r\n                    this.props.intl.formatMessage({ id: \"IDS_CANCEL\" }),\r\n                    () => this.onAcceptConfirm(),\r\n                    undefined,\r\n                    () => this.showAlert());\r\n            }\r\n            else {\r\n                this.confirmMessage.confirm(this.props.intl.formatMessage({ id: \"IDS_WARNING\" }),\r\n                    this.props.intl.formatMessage({ id: \"IDS_WARNING\" }),\r\n                    this.props.Login.booleanFlag, \"ok\", \"Cancel\",\r\n                    () => this.insertRegistration(false), undefined, () => this.showAlert());\r\n            }\r\n        }\r\n    }\r\n\r\n    closeFilter = () => {\r\n        let Map = {};\r\n        //  selectedFilter[\"fromdate\"]\r\n        const obj = convertDateValuetoString(this.props.Login.masterData.RealFromDate, this.props.Login.masterData.RealToDate, this.props.Login.userInfo);\r\n        Map['inputValues'] = {\r\n            FromDate: this.props.Login.masterData.RealFromDate || new Date(),\r\n            ToDate: this.props.Login.masterData.RealToDate || new Date(),\r\n            fromdate: rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.RealFromDate) || new Date(),\r\n            todate: rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.RealToDate) || new Date(),\r\n            SampleType: this.props.Login.masterData.RealSampleTypeList || [],\r\n            SampleTypeValue: this.props.Login.masterData.RealSampleTypeValue || {},\r\n            RegistrationType: this.props.Login.masterData.RealRegTypeList || [],\r\n            RegistrationSubType: this.props.Login.masterData.RealRegSubTypeList || [],\r\n            FilterStatus: this.props.Login.masterData.RealFilterStatuslist || [],\r\n            DesignTemplateMapping: this.props.Login.masterData.RealDesignTemplateMappingList || [],\r\n            ApprovalConfigVersion: this.props.Login.masterData.RealApprovalConfigVersionList || [],\r\n            RegTypeValue: this.props.Login.masterData.RealRegTypeValue || {},\r\n            RegSubTypeValue: this.props.Login.masterData.RealRegSubTypeValue || {},\r\n            FilterStatusValue: this.props.Login.masterData.RealFilterStatusValue || {},\r\n            ApprovalConfigVersionValue: this.props.Login.masterData.RealApprovalConfigVersionValue || {},\r\n            DesignTemplateMappingValue: this.props.Login.masterData.RealDesignTemplateMappingValue || {},\r\n            ndesigntemplatemappingcode: this.props.Login.masterData.RealDesignTemplateMappingValue\r\n                && this.props.Login.masterData.RealDesignTemplateMappingValue.ndesigntemplatemappingcode || -1,\r\n            napproveconfversioncode: this.props.Login.masterData.RealApprovalConfigVersionValue\r\n                && this.props.Login.masterData.RealApprovalConfigVersionValue.napproveconfversioncode || -1\r\n        }\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { showFilter: false, masterData: { ...this.props.Login.masterData, ...Map.inputValues }, selectedFilter: { todate: Map.inputValues.todate, fromdate: Map.inputValues.fromdate } }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    showAlert = () => {\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { showConfirmAlert: false }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    showSampleInfo() {\r\n        this.setState({ showSample: true, showTest: false })\r\n    }\r\n\r\n    showSample() {\r\n        let fixefScrollHeight = this.state.fixefScrollHeight\r\n        let disableSplit = false;\r\n        if (this.myRef && this.myRef.current && this.myRef.current.clientHeight + 20 !== this.state.fixefScrollHeight) {\r\n\r\n\r\n            fixefScrollHeight = this.myRef.current.clientHeight + 20;\r\n            let disableSplit = true;\r\n        }\r\n        this.setState({\r\n            showSample: true, showSubSample: false,\r\n            showTest: false,\r\n            fixefScrollHeight: fixefScrollHeight,\r\n            disableSplit: disableSplit\r\n        })\r\n    }\r\n\r\n    showTest() {\r\n        let fixefScrollHeight = this.state.fixefScrollHeight\r\n        let disableSplit = false;\r\n        if (this.myRef && this.myRef.current && this.myRef.current.clientHeight + 20 !== this.state.fixefScrollHeight) {\r\n\r\n\r\n            fixefScrollHeight = this.myRef.current.clientHeight + 20;\r\n            let disableSplit = true;\r\n        }\r\n\r\n        this.setState({\r\n            showSample: false, showSubSample: false,\r\n            showTest: true,\r\n            fixefScrollHeight: fixefScrollHeight,\r\n            disableSplit: disableSplit\r\n        })\r\n\r\n        // setTimeout(()=>{\r\n        //     this.setState({\r\n        //         disableSplit :false\r\n        //     })  \r\n        // },100)\r\n    }\r\n\r\n    showSubSample() {\r\n        this.setState({\r\n            showSample: false, showTest: false,\r\n            showSubSample: !this.state.showSubSample\r\n        })\r\n    }\r\n\r\n    showTestDetails() {\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { showSample: !this.state.showSample, showTest: !this.state.showTest }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    AddFile = () => {\r\n        let selectedRecord = this.state.selectedRecord;\r\n        let RealRegTypeValue = this.props.Login.masterData.RealRegTypeValue;\r\n        let booleanmanuf = true;\r\n        if (RealRegTypeValue === RegistrationType.PLASMA_POOL) {\r\n            booleanmanuf = selectedRecord[\"nmanufcode\"] > 0 && selectedRecord[\"nmanufcode\"] !== undefined ? true : false\r\n        }\r\n        if (booleanmanuf) {\r\n            if (this.state.selectedRecord.nallottedspeccode !== undefined) {\r\n\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        loadFile: true,\r\n                        ChildscreenName: \"File\", childoperation: \"Import\",\r\n                        parentPopUpSize: \"lg\", selectedFile: undefined\r\n                    }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            } else {\r\n                toast.info(this.props.intl.formatMessage({ id: \"IDS_SELECTSPECIFICATION\" }));\r\n            }\r\n        } else {\r\n            toast.info(this.props.intl.formatMessage({ id: \"IDS_SELECTMANUFACTURER\" }));\r\n        }\r\n    }\r\n\r\n    onNumericInputChange = (value, name) => {\r\n        const selectComponent = this.state.selectComponent || {};\r\n        if ((name !== \"nnoofcontainer\") && (value === 0 || value === 0.0)) {\r\n            selectComponent[name] = '';\r\n            this.setState({ selectComponent });\r\n        }\r\n        else if (name === 'nbarcodeprintcount') {\r\n            const selectedRecord = this.state.selectedRecord || {};\r\n            selectedRecord[name] = value;\r\n            this.setState({ selectedRecord });\r\n        }\r\n\r\n        else {\r\n            selectComponent[name] = value;\r\n            this.setState({ selectComponent });\r\n        }\r\n    }\r\n\r\n    onSampleTypeChange = (event, fieldName, labelname) => {\r\n        if (event !== null) {\r\n            let Map = {};\r\n            Map[\"nsampletypecode\"] = parseInt(event.value);\r\n            Map['userinfo'] = this.props.Login.userInfo;\r\n            this.props.getSampleTypeChange(Map, this.props.Login.masterData, event, labelname);\r\n        }\r\n    }\r\n\r\n\r\n    ConfirmComponent = (props) => {\r\n        this.confirmMessage.confirm(\"confirmation\", \"Confirmation!\", \"Do You Want to Override the Existing Components ?\",\r\n            \"ok\", \"cancel\", () => this.getComponentfromJava(props));\r\n    }\r\n\r\n    onRegTypeChange = (event, fieldName, labelname) => {\r\n        if (event !== null) {\r\n            let Map = {};\r\n            Map[\"nregtypecode\"] = parseInt(event.value);\r\n            Map['userinfo'] = this.props.Login.userInfo;\r\n            this.props.getRegTypeChange(Map, this.props.Login.masterData, event, labelname);\r\n        }\r\n    }\r\n\r\n    acceptRegistration = (registerId, skip, take) => {\r\n        let sampleList = [];\r\n        if (this.props.Login.masterData.searchedSample !== undefined) {\r\n            // sampleList = getSameRecordFromTwoArrays(this.props.Login.masterData.searchedSample, this.props.Login.masterData.RegistrationGetSample.slice(skip, skip + take), \"npreregno\");\r\n            const list = this.props.Login.masterData.searchedSample ? this.props.Login.masterData.searchedSample\r\n                : this.props.Login.masterData.RegistrationGetSample;\r\n\r\n            sampleList = list ? list.slice(skip, skip + take) : [];\r\n        } else {\r\n            sampleList = this.props.Login.masterData.RegistrationGetSample\r\n                && sortDataForDate(this.props.Login.masterData.RegistrationGetSample, 'dtransactiondate', 'npreregno').slice(skip, skip + take);\r\n        }\r\n\r\n        // let sampleList = this.props.Login.masterData.searchedSample || [...this.props.Login.masterData.RegistrationGetSample].splice(skip, skip + take);\r\n        let acceptList = getSameRecordFromTwoArrays(sampleList || [], this.props.Login.masterData.selectedSample, \"npreregno\");\r\n        if (acceptList && acceptList.length > 0) {\r\n            if (acceptList.every(this.checkPreregisterAndQuarentine)) {\r\n                if (this.props.Login.masterData.selectedTest.length > 0) {\r\n                    // if (checkTestPresent(this.props.Login.masterData.RegistrationGetTest, acceptList)) {\r\n                    let Map = {};\r\n                    Map[\"fromdate\"] = \"\";\r\n                    Map[\"todate\"] = \"\";\r\n                    Map[\"nsampletypecode\"] = this.props.Login.masterData.RealSampleTypeValue.nsampletypecode;\r\n                    Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\r\n                    Map[\"nregsubtypecode\"] = this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode;\r\n                    Map[\"nneedjoballocation\"] = this.props.Login.masterData.RealRegSubTypeValue.nneedjoballocation ?\r\n                        this.props.Login.masterData.RealRegSubTypeValue.nneedjoballocation : false;\r\n                    Map[\"nfilterstatus\"] = -1;\r\n                    Map[\"npreregno\"] = acceptList &&\r\n                        acceptList.map(sample => sample.npreregno).join(\",\");\r\n                    // Map[\"npreregno\"] = this.props.Login.masterData.selectedSample &&\r\n                    //     this.props.Login.masterData.selectedSample.map(sample => sample.npreregno).join(\",\");\r\n                    Map[\"registrationsample\"] = this.props.Login.masterData.RegistrationGetSubSample;\r\n\r\n                    let sampleCode = '';\r\n                    this.props.Login.masterData.RegistrationGetSubSample && (this.props.Login.masterData.RegistrationGetSubSample.map(sample => {\r\n                        if (sample.ntransactionstatus != transactionStatus.CANCELLED && sample.ntransactionstatus != transactionStatus.REJECT) {\r\n                            sampleCode += sample.ntransactionsamplecode + ','\r\n                        }\r\n                    }))\r\n                    Map[\"ssamplecode\"] = sampleCode.substring(0, sampleCode.length - 1);\r\n                    // Map[\"ssamplecode\"] =  this.props.Login.masterData.RegistrationGetSubSample && (this.props.Login.masterData.RegistrationGetSubSample.map(x => x.ntransactionstatus != transactionStatus.CANCELLED &&  x.ntransactionstatus != transactionStatus.REJECT ? x.ntransactionsamplecode :\"\").join(\",\")).replace(/^,/, '');\r\n                    Map[\"registration\"] = acceptList;//this.props.Login.masterData.selectedSample;\r\n                    Map[\"registrationtest\"] = this.props.Login.masterData.selectedTest;\r\n                    Map[\"ntransactionsamplecode\"] = this.props.Login.masterData.selectedSubSample.map(x => x.ntransactionsamplecode).join(\",\");\r\n                    Map[\"ntransactiontestcode\"] = this.props.Login.masterData.selectedTest.map(x => x.ntransactiontestcode).join(\",\");;\r\n                    Map[\"userinfo\"] = this.props.Login.userInfo;\r\n                    Map[\"nflag\"] = 2;\r\n                    Map[\"ntype\"] = 3;\r\n                    Map[\"activeTestTab\"] = this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\";\r\n                    Map[\"activeSampleTab\"] = this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\";\r\n                    Map[\"activeSubSampleTab\"] = this.props.Login.activeSubSampleTab || \"IDS_SUBSAMPLEATTACHMENTS\";\r\n                    Map[\"ndesigntemplatemappingcode\"] = this.props.Login.masterData.RealDesignTemplateMappingValue\r\n                        && this.props.Login.masterData.RealDesignTemplateMappingValue.ndesigntemplatemappingcode;\r\n\r\n                    Map[\"napproveconfversioncode\"] = this.props.Login.masterData.RealApprovalConfigVersionValue\r\n                        && this.props.Login.masterData.RealApprovalConfigVersionValue.napproveconfversioncode;\r\n                    Map[\"nneedtemplatebasedflow\"] = this.props.Login.masterData.RegSubTypeValue\r\n                        && this.props.Login.masterData.RegSubTypeValue.nneedtemplatebasedflow;\r\n                    Map[\"nneedsubsample\"] = this.props.Login.masterData.RegSubTypeValue\r\n                        && this.props.Login.masterData.RegSubTypeValue.nneedsubsample;\r\n                   // Map[\"checkBoxOperation\"] = 3\r\n                    Map[\"checkBoxOperation\"]=checkBoxOperation.SINGLESELECT;\r\n\r\n                    Map[\"stransactiontestcode\"] = this.props.Login.masterData.selectedTest.map(sample => sample.ntransactiontestcode).join(\",\");\r\n                    Map[\"url\"] = this.props.Login.settings[24];\r\n                    Map[\"skipmethodvalidity\"] = false;\r\n                    Map[\"OrderCodeData\"] = acceptList &&\r\n                        acceptList.map(sample => sample.hasOwnProperty(\"OrderCodeData\") ? sample.OrderCodeData : -1).join(\",\");\r\n                    Map[\"noutsourcerequired\"] = this.props.Login.masterData.RealSampleTypeValue.noutsourcerequired;\r\n                    let inputParam = {\r\n                        inputData: Map,\r\n                        postParamList: this.postParamList,\r\n                        action: 'accept'\r\n                    }\r\n                    this.confirmMessage.confirm(\r\n                        this.props.intl.formatMessage({ id: \"IDS_CONFIRMATION\" }),\r\n                        this.props.intl.formatMessage({ id: \"IDS_CONFIRMATION\" }),\r\n                        this.props.intl.formatMessage({ id: \"IDS_ACCEPTREGISTRATION\" }),\r\n                        this.props.intl.formatMessage({ id: \"IDS_OK\" }),\r\n                        this.props.intl.formatMessage({ id: \"IDS_CANCEL\" }),\r\n                        () => this.acceptRegistrationConfirm(inputParam, registerId));\r\n                    // } \r\n                    // else {\r\n                    //     let Map = {};\r\n                    //     Map[\"fromdate\"] = \"\";\r\n                    //     Map[\"todate\"] = \"\";\r\n                    //     Map[\"nsampletypecode\"] = this.props.Login.masterData.RealSampleTypeValue.nsampletypecode;\r\n                    //     Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\r\n                    //     Map[\"nregsubtypecode\"] = this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode;\r\n                    //     Map[\"nfilterstatus\"] = -1;\r\n                    //     Map[\"npreregno\"] = acceptList &&\r\n                    //         acceptList.map(sample => sample.npreregno).join(\",\");\r\n                    //     // Map[\"npreregno\"] = this.props.Login.masterData.selectedSample &&\r\n                    //     //     this.props.Login.masterData.selectedSample.map(sample => sample.npreregno).join(\",\");\r\n                    //     Map[\"registrationsample\"] = this.props.Login.masterData.selectedSubSample;\r\n                    //     Map[\"registrationtest\"] = this.props.Login.masterData.selectedTest;\r\n                    //     Map[\"userinfo\"] = this.props.Login.userInfo;\r\n                    //     Map[\"nflag\"] = 2;\r\n                    //     Map[\"ntype\"] = 1;\r\n                    //     Map[\"activeTestTab\"] = this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\";\r\n                    //     Map[\"activeSampleTab\"] = this.props.Login.activeSubSampleTab || \"IDS_SUBSAMPLEATTACHMENTS\";\r\n                    //     Map[\"activeSubSampleTab\"] = this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\";\r\n                    //     Map[\"ndesigntemplatemappingcode\"] = this.props.Login.masterData.RealDesignTemplateMappingValue\r\n                    //         && this.props.Login.masterData.RealDesignTemplateMappingValue.ndesigntemplatemappingcode;\r\n\r\n                    //         Map[\"napproveconfversioncode\"] = this.props.Login.masterData.RealApprovalConfigVersionValue\r\n                    //         && this.props.Login.masterData.RealApprovalConfigVersionValue.napproveconfversioncode;\r\n                    //         Map[\"nneedtemplatebasedflow\"] = this.props.Login.masterData.RegSubTypeValue\r\n                    //         && this.props.Login.masterData.RegSubTypeValue.nneedtemplatebasedflow;\r\n                    //     Map[\"nneedsubsample\"] = this.props.Login.masterData.RegSubTypeValue\r\n                    //         && this.props.Login.masterData.RegSubTypeValue.nneedsubsample;\r\n                    //     Map[\"checkBoxOperation\"] = 3\r\n                    //     Map[\"stransactiontestcode\"] = this.props.Login.masterData.selectedTest.map(sample => sample.ntransactiontestcode).join(\",\");\r\n                    //     let inputParam = {\r\n                    //         inputData: Map,\r\n                    //         postParamList: this.postParamList,\r\n                    //         action: 'accept'\r\n                    //     }\r\n                    //     this.confirmMessage.confirm(\"Confirmation\", \"Confirmation!\", \"IDS_REGISTERACTIONNEEDVALIDSTATUSTEST\",\r\n                    //         \"OK\", \"Cancel\", () => this.acceptRegistrationConfirm(inputParam, registerId));\r\n                    // }\r\n                } else {\r\n                    toast.info(this.props.intl.formatMessage({ id: \"IDS_ADDTESTTOREGISTERSAMPLES\" }));\r\n                }\r\n            } else {\r\n                toast.info(this.props.intl.formatMessage({ id: \"IDS_SELECTPREREGQUARANTINESAMPLES\" }));\r\n            }\r\n        } else {\r\n            toast.info(this.props.intl.formatMessage({ id: \"IDS_SELECTPREREGQUARANTINESAMPLES\" }));\r\n        }\r\n    }\r\n\r\n    acceptRegistrationConfirm = (inputParam, registerId) => {\r\n        if (showEsign(this.props.Login.userRoleControlRights,\r\n            this.props.Login.userInfo.nformcode, registerId)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true,\r\n                    screenData: { inputParam, masterData: this.props.Login.masterData },\r\n                    openModal: true,\r\n                    parentPopUpSize: 'lg',\r\n                    screenName: this.props.Login.screenName,\r\n                    operation: 'accept'\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        } else {\r\n            this.props.acceptRegistration(inputParam, this.props.Login.masterData)\r\n        }\r\n\r\n    }\r\n\r\n    selectQuarantine = (quarantineId, skip, take) => {\r\n        // let sampleList = this.props.Login.masterData.searchedSample || (this.props.Login.masterData.RegistrationGetSample ? [...this.props.Login.masterData.RegistrationGetSample].splice(skip, skip + take) : []);\r\n\r\n        let sampleList = [];\r\n        const list = this.props.Login.masterData.searchedSample ? this.props.Login.masterData.searchedSample\r\n            : sortDataForDate(this.props.Login.masterData.RegistrationGetSample, 'dtransactiondate', 'npreregno');\r\n\r\n        sampleList = list ? list.slice(skip, skip + take) : [];\r\n        let quarentineList = getSameRecordFromTwoArrays(sampleList, this.props.Login.masterData.selectedSample, \"npreregno\");\r\n\r\n        if (quarentineList && quarentineList.length > 0) {\r\n            if (quarentineList.every(this.checkPreregisterRecordQuarantine)) {\r\n\r\n                // let ntransactionstatus = this.props.Login.masterData.selectedSample &&\r\n                //     this.props.Login.masterData.selectedSample.map(transactionStatus => transactionStatus.ntransactionstatus).join(\",\");\r\n                //if (ntransactionstatus === transactionStatus.PREREGISTER) {\r\n                let Map = {};\r\n                Map[\"fromdate\"] = \"\";\r\n                Map[\"todate\"] = \"\";\r\n                Map[\"nsampletypecode\"] = this.props.Login.masterData.RealSampleTypeValue.nsampletypecode;\r\n                Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\r\n                Map[\"nregsubtypecode\"] = this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode;\r\n                Map[\"nfilterstatus\"] = -1;\r\n                Map[\"npreregno\"] = quarentineList && quarentineList.map(sample => sample.npreregno).join(\",\");\r\n                Map[\"registrationsample\"] = this.props.Login.masterData.selectedSubSample;\r\n                Map[\"registrationtest\"] = this.props.Login.masterData.selectedTest;\r\n                Map[\"selectedSample\"] = quarentineList;//this.props.Login.masterData.selectedSample;\r\n                Map[\"userinfo\"] = this.props.Login.userInfo;\r\n                Map[\"nflag\"] = 2;\r\n                Map[\"ntype\"] = 1;\r\n                Map[\"activeTestTab\"] = this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\";\r\n                Map[\"activeSampleTab\"] = this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\";\r\n                Map[\"activeSubSampleTab\"] = this.props.Login.activeSubSampleTab || \"IDS_SUBSAMPLEATTACHMENTS\";\r\n                Map[\"withoutgetparameter\"] = 3;\r\n                Map[\"ndesigntemplatemappingcode\"] = this.props.Login.masterData.RealDesignTemplateMappingValue\r\n                    && this.props.Login.masterData.RealDesignTemplateMappingValue.ndesigntemplatemappingcode;\r\n\r\n                Map[\"napproveconfversioncode\"] = this.props.Login.masterData.RealApprovalConfigVersionValue\r\n                    && this.props.Login.masterData.RealApprovalConfigVersionValue.napproveconfversioncode;\r\n                Map[\"nneedtemplatebasedflow\"] = this.props.Login.masterData.RegSubTypeValue\r\n                    && this.props.Login.masterData.RegSubTypeValue.nneedtemplatebasedflow;\r\n                Map[\"nneedsubsample\"] = this.props.Login.masterData.RegSubTypeValue\r\n                    && this.props.Login.masterData.RegSubTypeValue.nneedsubsample;\r\n                //Map[\"checkBoxOperation\"] = 3\r\n               // Map[\"checkBoxOperation\"] = 3\r\n                Map[\"checkBoxOperation\"]= checkBoxOperation.SINGLESELECT;\r\n\r\n                Map[\"stransactiontestcode\"] = this.props.Login.masterData.selectedTest.map(sample => sample.ntransactiontestcode).join(\",\");\r\n                Map[\"ntransactionstatus\"] = quarentineList &&\r\n                    quarentineList.map(transactionStatus => transactionStatus.ntransactionstatus).join(\",\");\r\n                //Map[\"ninsertpreregno\"] = quarantineSample.quarantineSample.npreregno;\r\n                let inputParam = {\r\n                    inputData: Map,\r\n                    postParamList: this.postParamList,\r\n                    action: 'quarantine'\r\n                }\r\n                //console.log(\"inputParam, quarantine:\", inputParam);\r\n                if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, quarantineId)) {\r\n                    const updateInfo = {\r\n                        typeName: DEFAULT_RETURN,\r\n                        data: {\r\n                            loadEsign: true,\r\n                            screenData: { inputParam, masterData: this.props.Login.masterData },\r\n                            openModal: true,\r\n                            parentPopUpSize: 'lg',\r\n                            screenName: this.props.Login.screenName,\r\n                            operation: 'quarantine'\r\n                        }\r\n                    }\r\n                    this.props.updateStore(updateInfo);\r\n                } else {\r\n                    this.props.preregRecordToQuarantine(inputParam, this.props.Login.masterData)\r\n                }\r\n            } else {\r\n                toast.info(this.props.intl.formatMessage({ id: \"IDS_SELECTPREREGISTERSAMPLES\" }))\r\n            }\r\n        } else {\r\n            toast.info(this.props.intl.formatMessage({ id: \"IDS_SELECTPREREGISTERSAMPLES\" }))\r\n        }\r\n\r\n    }\r\n\r\n    checkPreregisterAndQuarentine(sample) {\r\n        return (sample.ntransactionstatus === transactionStatus.PREREGISTER || sample.ntransactionstatus === transactionStatus.QUARANTINE)\r\n    }\r\n\r\n    checkPreregisterRecordQuarantine(sample) {\r\n        return (sample.ntransactionstatus === transactionStatus.PREREGISTER)\r\n    }\r\n\r\n    onRegSubTypeChange = (event, fieldName, labelname) => {\r\n        if (event !== null) {\r\n            let Map = {};\r\n            Map['nregtypecode'] = this.props.Login.masterData.RegTypeValue.nregtypecode;\r\n            Map[\"nregsubtypecode\"] = parseInt(event.value);\r\n            Map[\"nneedtemplatebasedflow\"] = event.item.nneedtemplatebasedflow;\r\n            Map['userinfo'] = this.props.Login.userInfo;\r\n            this.props.getRegSubTypeChange(Map, this.props.Login.masterData, event, labelname);\r\n        }\r\n    }\r\n\r\n    onApprovalConfigVersionChange = (event, fieldName, labelname) => {\r\n        if (event !== null) {\r\n            let Map = {};\r\n            Map['nregtypecode'] = this.props.Login.masterData.RegTypeValue.nregtypecode;\r\n            Map[\"nregsubtypecode\"] = this.props.Login.masterData.RegSubTypeValue.nregsubtypecode;\r\n            //  Map[\"nneedtemplatebasedflow\"] = event.item.nneedtemplatebasedflow;\r\n            Map[\"napproveconfversioncode\"] = event.value;\r\n            Map['userinfo'] = this.props.Login.userInfo;\r\n            this.props.onApprovalConfigVersionChange(Map, this.props.Login.masterData, event, labelname);\r\n        }\r\n    }\r\n\r\n\r\n    onDesignTemplateChange = (event, fieldName, labelname) => {\r\n        let masterData = this.props.Login.masterData;\r\n        masterData = {\r\n            ...masterData,\r\n            [labelname]: { ...event.item }\r\n        }\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { masterData }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    onInputOnChange = (event) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        const selectedPrinterData = this.state.selectedPrinterData || {};\r\n\r\n        if (event.target.type === 'checkbox') {\r\n            selectedRecord[event.target.name] = event.target.checked === true ? 3 : 4;\r\n            if (event.target.name === 'nclientprinter' && event.target.checked === true) {\r\n\r\n                //const printers =   window.navigator.printer.getPrinters();\r\n                /////const names = printers.map(printer => printer.name);\r\n\r\n                //selectedPrinterDatas {printername: { = names;\r\n                // this.setState({ selectedPrinterData });\r\n\r\n            }\r\n        }\r\n        else {\r\n            selectedRecord[event.target.name] = event.target.value;\r\n        }\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    onComboChange = (comboData, fieldName) => {\r\n        // if (comboData !== null) {\r\n        let selectedDetailField = {};\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if (fieldName === 'nexternalordercode') {\r\n            // selectedRecord[fieldName] = comboData;\r\n            selectedDetailField = comboData && comboData.item\r\n            //   this.setState({ selectedRecord, selectedDetailField });\r\n        }\r\n        //  else if (fieldName === \"nexternalordertypecode\") {\r\n        //     selectedRecord[fieldName] = comboData;\r\n        //     const inputParem = {\r\n        //         userinfo: this.props.Login.userInfo,\r\n        //         selectedRecord,\r\n        //         externalordertypecode: selectedRecord[\"nexternalordertypecode\"].value,\r\n        //         npreregno: this.props.Login.orderDetails && this.props.Login.orderDetails.subSample.npreregno,\r\n        //         sampleorderid: this.props.Login.orderDetails && this.props.Login.orderDetails.subSample.sampleorderid\r\n        //         , masterData: this.props.Login.masterData\r\n        //     }\r\n        //     this.props.getExternalOrderForMapping(inputParem)\r\n        // } \r\n        // else {\r\n        selectedRecord[fieldName] = comboData;\r\n        this.setState({ selectedRecord, selectedDetailField });\r\n        // }\r\n\r\n        // }\r\n    }\r\n    handleDateChange = (dateName, dateValue) => {\r\n        const { selectedRecord } = this.state;\r\n        selectedRecord[dateName] = dateValue;\r\n        this.setState({ selectedRecord });\r\n    };\r\n\r\n    onComboTestPackageChange = (comboData, fieldName) => {\r\n        // if (comboData !== null) {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        selectedRecord[fieldName] = comboData;\r\n        this.setState({ selectedRecord });\r\n        // }\r\n    }\r\n\r\n    PrinterChange = (comboData, fieldName) => {\r\n        const selectedPrinterData = this.state.selectedPrinterData || {};\r\n        selectedPrinterData[fieldName] = comboData;\r\n        this.setState({ selectedPrinterData });\r\n    }\r\n\r\n\r\n\r\n    closeChildModal = () => {\r\n        let loadEsign = this.props.Login.loadEsign;\r\n        let loadRegSubSample = this.props.Login.loadRegSubSample;\r\n        let loadFile = this.props.Login.loadFile;\r\n        let showSaveContinue = this.props.Login.showSaveContinue;\r\n        let screenName = this.props.Login.screenName;\r\n        let loadChildTest = this.props.Login.loadChildTest;\r\n        let loadAdhocTest = this.props.Login.loadAdhocTest;\r\n        let openModal = this.props.Login.openModal;\r\n        let selectedRecord = this.state.selectedRecord;\r\n        let TestCombined = [];\r\n        let TestPackage = [];\r\n        let availableTest = [];\r\n        let Test = this.props.Login.Test || [];\r\n        let selectedMaster = this.props.Login.selectedMaster;\r\n        let selectedControl = this.props.Login.selectedControl;\r\n        let masterextractedColumnList = this.props.Login.masterextractedColumnList;\r\n        let masterfieldList = this.props.Login.masterfieldList;\r\n        let masterdataList = this.props.Login.masterfieldList;\r\n        let mastercomboComponents = this.props.Login.masterfieldList;\r\n        let masterwithoutCombocomponent = this.props.Login.masterfieldList;\r\n        let masterComboColumnFiled = this.props.Login.masterComboColumnFiled;\r\n        let masterOperation = this.props.Login.masterOperation\r\n        let masterEditObject = this.props.Login.masterEditObject\r\n        let masterDesign = this.props.Login.masterDesign;\r\n        let addMaster = this.props.Login.addMaster\r\n        let masterIndex = this.props.Login.masterIndex\r\n        let availableAdhocTest = [];\r\n\r\n        if (this.props.Login.loadEsign) {\r\n            loadEsign = false;\r\n            selectedRecord[\"esigncomments\"] = \"\";\r\n            selectedRecord[\"esignpassword\"] = \"\";\r\n            selectedRecord['esignreason'] = '';\r\n        }\r\n\r\n        if (addMaster) {\r\n            if (masterIndex !== 0) {\r\n                screenName = selectedControl[masterIndex - 1].displayname[this.props.Login.userInfo.slanguagetypecode]\r\n                selectedMaster = removeIndex(selectedMaster, masterIndex)\r\n                selectedControl = removeIndex(selectedControl, masterIndex)\r\n                masterextractedColumnList = masterextractedColumnList && removeIndex(masterextractedColumnList, masterIndex)\r\n                masterfieldList = masterfieldList && removeIndex(masterfieldList, masterIndex)\r\n                masterdataList = masterdataList && removeIndex(masterdataList, masterIndex)\r\n                mastercomboComponents = mastercomboComponents && removeIndex(mastercomboComponents, masterIndex)\r\n                masterComboColumnFiled = masterComboColumnFiled && removeIndex(masterComboColumnFiled, masterIndex)\r\n                masterwithoutCombocomponent = masterwithoutCombocomponent && removeIndex(masterwithoutCombocomponent, masterIndex)\r\n                masterDesign = masterDesign && removeIndex(masterDesign, masterIndex)\r\n                masterOperation = masterOperation && removeIndex(masterOperation, masterIndex)\r\n                masterEditObject = masterEditObject && removeIndex(masterEditObject, masterIndex)\r\n                masterIndex = masterIndex - 1;\r\n            } else {\r\n                selectedMaster = []\r\n                selectedControl = []\r\n                masterextractedColumnList = []\r\n                masterfieldList = []\r\n                addMaster = false\r\n                masterdataList = []\r\n                mastercomboComponents = []\r\n                masterwithoutCombocomponent = []\r\n                masterComboColumnFiled = []\r\n                masterDesign = []\r\n                masterOperation = []\r\n                masterEditObject = []\r\n                masterIndex = undefined\r\n                screenName = this.props.Login.inputParam.displayName\r\n            }\r\n        }\r\n        else if (this.props.Login.loadFile) {\r\n            loadFile = false;\r\n            screenName = this.props.Login.PopUpLabel\r\n        } else if (this.props.Login.loadChildTest) {\r\n            loadChildTest = false;\r\n            openModal = false;\r\n            selectedRecord = {};\r\n            TestCombined = [];\r\n            TestPackage = [];\r\n            availableTest = [];\r\n            Test = [];\r\n\r\n        }\r\n        else if (this.props.Login.loadRegSubSample) {\r\n            loadRegSubSample = false;\r\n            openModal = false;\r\n            selectedRecord = {}\r\n            TestCombined = [];\r\n            TestPackage = [];\r\n            availableTest = [];\r\n            Test = [];\r\n\r\n\r\n\r\n        }\r\n        //ALPD-3615\r\n        else if (this.props.Login.loadAdhocTest) {\r\n            if (this.props.Login.loadEsign) {\r\n                loadEsign = false;\r\n                // openModal = false;\r\n                // selectedRecord = {};\r\n                // availableAdhocTest = [];\r\n            }\r\n            else {\r\n                \r\n                loadAdhocTest = false;\r\n                openModal = false;\r\n                selectedRecord = {};\r\n                availableAdhocTest = [];\r\n            }\r\n\r\n        }\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                loadRegSubSample, screenName, showSaveContinue,\r\n                loadFile, loadChildTest,loadAdhocTest,\r\n                openModal,\r\n                selectedRecord, TestCombined,\r\n                TestPackage, availableTest, Test,\r\n                selectedMaster, selectedControl,\r\n                masterextractedColumnList, masterfieldList\r\n                , addMaster, masterIndex, masterdataList,\r\n                mastercomboComponents,\r\n                masterwithoutCombocomponent, masterOperation,\r\n                masterEditObject,\r\n                masterComboColumnFiled, masterDesign, loadEsign\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    closeModal = () => {\r\n        let loadEsign = this.props.Login.loadEsign;\r\n        let openModal = this.props.Login.openModal;\r\n        let selectedRecord = this.props.Login.selectedRecord;\r\n        let loadPreregister = this.props.Login.loadPreregister;\r\n        let openChildModal = this.props.Login.openChildModal;\r\n        let parentPopUpSize = this.props.Login.pare\r\n        let screenName = this.props.Login.screenName;\r\n        let loadPrinter = this.props.Login.loadPrinter;\r\n        let openPortal = this.props.Login.openPortal;\r\n        let Component = this.props.Login.Component;\r\n        let subSampleDataGridList = this.props.Login.subSampleDataGridList;\r\n        let TestCombined = this.props.Login.TestCombined;\r\n        let selectedPrinterData = this.props.Login.selectedPrinterData;\r\n\r\n        let outsourcetest = this.props.Login.outsourcetest;\r\n\r\n        if (this.props.Login.loadEsign) {\r\n            if (this.props.Login.operation === \"accept\" || this.props.Login.operation === \"cancel\" || this.props.Login.operation === \"quarantine\") {\r\n                loadEsign = false;\r\n                openModal = false;\r\n                openChildModal = false\r\n                loadPreregister = false;\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: { loadEsign, openModal, openChildModal, loadPreregister }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n            else {\r\n                loadEsign = false;\r\n                selectedRecord[\"esigncomments\"] = \"\";\r\n                selectedRecord[\"esignpassword\"] = \"\";\r\n                selectedRecord['esignreason'] = '';\r\n\r\n                if (loadPreregister) {\r\n                    parentPopUpSize = 'xl';\r\n                    openPortal = true;\r\n                    openModal = false;\r\n                }\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        loadEsign, parentPopUpSize, openPortal, openModal, selectedRecord,\r\n                        outsourcetest\r\n                    }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n        }\r\n        else {\r\n            openModal = false;\r\n            loadPrinter = false;\r\n            loadPreregister = false;\r\n            selectedRecord = {};\r\n            openPortal = false;\r\n            subSampleDataGridList = [];\r\n            selectedPrinterData = {};\r\n\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    openModal, loadPreregister, selectedRecord,\r\n                    screenName, insertSourcePreregno: undefined,\r\n                    loadPrinter, openPortal,\r\n                    Component, subSampleDataGridList, selectedPrinterData, outsourcetest\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n    }\r\n\r\n    onSaveCancelOrder = () => {\r\n        if (this.state.addedOrderSampleList.length > 0) {\r\n            let sexternalordersamplecode = this.state.addedOrderSampleList && (this.state.addedOrderSampleList.map(x => x.nexternalordersamplecode).join(\",\")).replace(/,\\s*$/, \"\");\r\n            // let sexternalordercode = this.state.addedOrderSampleList && (this.state.addedOrderSampleList.map(x=>x.nexternalordercode).join(\",\")).replace(/,\\s*$/, \"\");\r\n            const unique = [...new Map(this.state.addedOrderSampleList.map((m) => [m.nexternalordercode, m])).values()];\r\n            let sexternalordercode = unique.map(x => x.nexternalordercode).join(\",\").replace(/,\\s*$/, \"\");\r\n\r\n            const inputData = {\r\n                sexternalordersamplecode: sexternalordersamplecode,\r\n                sexternalordercode: sexternalordercode,\r\n                userinfo: this.props.Login.userInfo,\r\n                masterData: this.props.Login.masterData,\r\n                url: this.props.Login.settings[24]\r\n            }\r\n\r\n            const inputParam = { inputData }\r\n\r\n            if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolcode)) {\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        loadEsign: true,\r\n                        screenData: { inputParam, masterData: this.props.Login.masterData },\r\n                        openModal: true,\r\n                        screenName: \"ExternalOrderSample\",\r\n                        operation: \"cancel\"\r\n                    }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n            else {\r\n                this.props.onUpdateCancelExternalOrder(inputParam);\r\n            }\r\n\r\n        }\r\n        else {\r\n            toast.info(this.props.intl.formatMessage({ id: \"IDS_SELECTEXTERNALSAMPLEID\" }));\r\n        }\r\n    }\r\n\r\n    onSaveClick = (saveType, formRef) => {\r\n        let operation = this.props.Login.operation;\r\n        if (operation === \"update\") {\r\n            this.onUpdateRegistration(saveType, formRef, operation);\r\n        }\r\n    }\r\n\r\n\r\n    onSavePrinterClick = () => {\r\n        let insertlist = [];\r\n        //this.state.selectedPrinterData.sprintername && this.state.selectedPrinterData.sprintername.map(source=>insertlist.push({npreregno:this.props.Login.insertSourcePreregno,sprintername:source.value}))\r\n        const inputParam = {\r\n            classUrl: 'barcode',\r\n            methodUrl: 'Barcode',\r\n            displayName: this.props.Login.inputParam.displayName,\r\n            inputData: {\r\n                npreregno: this.props.Login.insertPrinterPreregno,\r\n                sbarcodename: this.state.selectedPrinterData.sbarcodename ? this.state.selectedPrinterData.sbarcodename.value : '',\r\n                sprintername: this.state.selectedPrinterData.sprintername ? this.state.selectedPrinterData.sprintername.value : '',\r\n                insertlist,\r\n                npreregno: this.props.Login.masterData.selectedSample ? this.props.Login.masterData.selectedSample.map(x => x.npreregno).join(\",\") : \"-1\",\r\n                ntransactionsamplecode: this.props.Login.masterData.selectedSubSample ? this.props.Login.masterData.selectedSubSample.map(x => x.ntransactionsamplecode).join(\",\") : \"-1\",\r\n                userinfo: this.props.Login.userInfo,\r\n                ncontrolcode: this.props.Login.ncontrolcode\r\n            },\r\n            operation: 'printer',\r\n            // dataState:this.state.sourceDataState,\r\n            // activeSampleTab:\"IDS_SOURCE\",\r\n            action: 'printer'\r\n        }\r\n\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolcode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData: this.props.Login.masterData },\r\n                    openModal: true, screenName: this.props.intl.formatMessage({ id: this.props.Login.inputParam.displayName }),\r\n                    operation: 'printer'\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\r\n        }\r\n    }\r\n\r\n    onSaveFileClick = (saveType, formRef) => {\r\n        const selectedFile = this.state.selectedFile;\r\n        const selectedRecord = this.state.selectedRecord;\r\n        const acceptedFiles = selectedFile.sfilename;\r\n        const formData = new FormData();\r\n        // if(nattachmenttypecode === attachmentType.FTP) {\r\n        if (acceptedFiles && acceptedFiles.length > 0) {\r\n            acceptedFiles.forEach((file, index) => {\r\n                formData.append(\"uploadedFile\" + index, file);\r\n            });\r\n            formData.append(\"filecount\", acceptedFiles.length);\r\n        } else {\r\n            toast.info(this.props.intl.formatMessage({ id: \"IDS_SELECTANYONEFILETOSUBMIT\" }));\r\n        }\r\n\r\n        formData.append(\"userinfo\", JSON.stringify(this.props.Login.userInfo));\r\n        formData.append(\"nstudyplan\", JSON.stringify(selectedRecord.nallottedspeccode.value));\r\n        formData.append(\"testrequired\", JSON.stringify(selectedRecord.ntransactionstatus === 3 ? true : false));\r\n        formData.append(\"ntemplatemanipulationcode\", JSON.stringify(selectedRecord.ntemplatemanipulationcode));\r\n        formData.append(\"nregtypecode\", JSON.stringify(this.props.Login.masterData.RealRegTypeValue.nregtypecode));\r\n        formData.append(\"nregsubtypecode\", JSON.stringify(this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode));\r\n        this.props.ImportFile(formData, this.confirmMessage, this.props.Login);\r\n    }\r\n\r\n    sampleInfoDataStateChange = (event) => {\r\n        this.setState({\r\n            sampleGridDataState: event.dataState\r\n        });\r\n        //ALPD-657\r\n        //this.changePropertyView(1)\r\n    }\r\n\r\n    dataStateChange = (event) => {\r\n        switch (this.props.Login.activeSampleTab) {\r\n            case \"IDS_SOURCE\":\r\n                this.setState({\r\n                    sourceDataState: event.dataState\r\n                });\r\n                break;\r\n            case \"IDS_SAMPLECOMMENTS\":\r\n                this.setState({\r\n                    sampleCommentDataState: event.dataState\r\n                });\r\n                break;\r\n            default:\r\n                this.setState({\r\n                    sourceDataState: event.dataState\r\n                });\r\n                break;\r\n        }\r\n    }\r\n\r\n    subSampledataStateChange = (event) => {\r\n        switch (this.props.Login.activeSubSampleTab) {\r\n            case \"IDS_SUBSAMPLECOMMENTS\":\r\n                this.setState({\r\n                    subSampleCommentDataState: event.dataState\r\n                });\r\n                break;\r\n            case \"IDS_SUBSAMPLEATTACHMENTS\":\r\n                this.setState({\r\n                    subSampleAttachmentDataState: event.dataState\r\n                });\r\n                break;\r\n            default:\r\n                this.setState({\r\n                    popUptestDataState: event.dataState\r\n                });\r\n                break;\r\n        }\r\n\r\n    }\r\n\r\n    testdataStateChange = (event) => {\r\n        switch (this.props.Login.activeSampleTab) {\r\n            case \"IDS_TEST\":\r\n                this.setState({\r\n                    popUptestDataState: event.dataState\r\n                });\r\n                break;\r\n            case \"IDS_TESTCOMMENTS\":\r\n                this.setState({\r\n                    testCommentDataState: event.dataState\r\n                });\r\n                break;\r\n            case \"IDS_TESTATTACHMENTS\":\r\n                this.setState({\r\n                    testAttachmentDataState: event.dataState\r\n                });\r\n                break;\r\n            default:\r\n                this.setState({\r\n                    popUptestDataState: event.dataState\r\n                });\r\n                break;\r\n        }\r\n\r\n    }\r\n\r\n    testStateChange = (event) => {\r\n        this.setState({\r\n            testDataState: event.dataState\r\n        });\r\n    }\r\n\r\n    outsourceDataStateChange = (event) => {\r\n        switch (this.props.Login.activeSampleTab) {\r\n            case \"IDS_EXTERNALORDERREPORTS\":\r\n                this.setState({\r\n                    externalOrderAttachmentDataState: event.dataState\r\n                });\r\n                break;\r\n            default:\r\n                this.setState({\r\n                    outsourceDetailsDataState: event.dataState\r\n                });\r\n                break;\r\n        }\r\n    }\r\n\r\n    viewExternalOrderAttachmentFile = (filedata) => {\r\n        delete (filedata.inputData.userinfo);\r\n        const inputParam = {\r\n            inputData: {\r\n                externalorderattachment: filedata.inputData,\r\n                userinfo: this.props.Login.userInfo,\r\n                ncontrolcode: filedata.ncontrolCode\r\n            },\r\n            classUrl: \"registration\",\r\n            operation: \"view\",\r\n            methodUrl: \"ExternalOrderAttachment\",\r\n        }\r\n        this.props.viewAttachment(inputParam);\r\n    }\r\n\r\n    sampleTabDetail = () => {\r\n        let npreregno = this.props.Login.masterData.selectedSample ? this.props.Login.masterData.selectedSample.map(sample => sample.npreregno).join(\",\") : \"-1\";\r\n        const tabMap = new Map();\r\n\r\n\r\n        let sampleList = this.props.Login.masterData.RegistrationGetSample || [];\r\n        let { skip, take } = this.state\r\n        sampleList = sampleList.slice(skip, skip + take);\r\n        let selectedSampleList = getSameRecordFromTwoArrays(sampleList, this.props.Login.masterData.selectedSample, \"npreregno\");\r\n\r\n        tabMap.set(\"IDS_ATTACHMENTS\", <Attachments\r\n            screenName=\"IDS_SAMPLEATTACHMENTS\"\r\n            onSaveClick={this.onAttachmentSaveClick}\r\n            selectedMaster=\"selectedSample\"\r\n            controlMap={this.state.controlMap}\r\n            userRoleControlRights={this.state.userRoleControlRights}\r\n            attachments={this.props.Login.masterData.RegistrationAttachment || []}\r\n            deleteRecord={this.props.deleteAttachment}\r\n            masterList={this.props.Login.masterData.selectedSample}\r\n            masterAlertStatus={\"IDS_SELECTSAMPLETOADDATTACHMENT\"}\r\n            fetchRecord={this.props.getAttachmentCombo}\r\n            viewFile={this.props.viewAttachment}\r\n            addName={\"AddSampleAttachment\"}\r\n            editName={\"EditSampleAttachment\"}\r\n            deleteName={\"DeleteSampleAttachment\"}\r\n            viewName={\"ViewSampleAttachment\"}\r\n            methodUrl={\"SampleAttachment\"}\r\n            userInfo={this.props.Login.userInfo}\r\n            skip={this.props.Login.inputParam ? this.props.Login.inputParam.attachmentskip || 0 : 0}\r\n            take={this.props.Login.inputParam ? this.props.Login.inputParam.attachmenttake || 10 : this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5}\r\n            deleteParam={\r\n                {\r\n                    methodUrl: \"SampleAttachment\",\r\n                    npreregno,\r\n                    userInfo: this.props.Login.userInfo,\r\n                    masterData: this.props.Login.masterData,\r\n                    esignRights: this.props.Login.userRoleControlRights\r\n                }\r\n            }\r\n            editParam={{\r\n                methodUrl: \"SampleAttachment\",\r\n                npreregno,\r\n                userInfo: this.props.Login.userInfo,\r\n                masterData: this.props.Login.masterData,\r\n                esignRights: this.props.Login.userRoleControlRights,\r\n                masterList: this.props.Login.masterData.RegistrationGetSample || []\r\n\r\n            }}\r\n            selectedListName=\"IDS_SAMPLE\"\r\n            displayName=\"sarno\"\r\n            isneedHeader={true}\r\n        />)\r\n        tabMap.set(\"IDS_SAMPLECOMMENTS\", <Comments\r\n            screenName=\"IDS_SAMPLECOMMENTS\"\r\n            onSaveClick={this.onCommentsSaveClick}\r\n            selectedMaster=\"selectedSample\"\r\n            controlMap={this.state.controlMap}\r\n            userRoleControlRights={this.state.userRoleControlRights}\r\n            Comments={this.props.Login.masterData.RegistrationComment || []}\r\n            fetchRecord={this.props.getCommentsCombo}\r\n            addName={\"AddSampleComment\"}\r\n            editName={\"EditSampleComment\"}\r\n            deleteName={\"DeleteSampleComment\"}\r\n            methodUrl={\"SampleComment\"}\r\n            isTestComment={false}\r\n            masterList={selectedSampleList}\r\n            masterAlertStatus=\"IDS_SELECTSAMPLETOADDCOMMENTS\"\r\n            primaryKeyField={\"nregcommentcode\"}\r\n            dataState={this.state.testCommentDataState}\r\n            dataStateChange={this.testDataStateChange}\r\n            deleteParam={\r\n                {\r\n                    methodUrl: \"SampleComment\",\r\n                    npreregno,\r\n                    userInfo: this.props.Login.userInfo,\r\n                    masterData: this.props.Login.masterData,\r\n                    esignRights: this.props.Login.userRoleControlRights,\r\n                    screenName: \"IDS_SAMPLECOMMENTS\"\r\n\r\n                }\r\n            }\r\n            editParam={{\r\n                methodUrl: \"SampleComment\",\r\n                npreregno,\r\n                userInfo: this.props.Login.userInfo,\r\n                masterData: this.props.Login.masterData,\r\n                esignRights: this.props.Login.userRoleControlRights,\r\n                screenName: \"IDS_SAMPLECOMMENTS\",\r\n                operation: \"update\",\r\n                masterList: this.props.Login.masterData.RegistrationGetSample || [],\r\n                ncontrolCode: this.state.controlMap.has(\"EditSampleComment\") && this.state.controlMap.get(\"EditSampleComment\").ncontrolcode\r\n            }}\r\n            selectedListName=\"IDS_SAMPLES\"\r\n            displayName=\"sarno\"\r\n            selectedId={this.props.Login.selectedId || null}\r\n        />)\r\n\r\n        return tabMap;\r\n    }\r\n\r\n    sampleComments = () => {\r\n        let npreregno = this.props.Login.masterData.selectedSample ? this.props.Login.masterData.selectedSample.map(sample => sample.npreregno).join(\",\") : \"-1\";\r\n        const tabMap = new Map();\r\n\r\n\r\n        let sampleList = this.props.Login.masterData.RegistrationGetSample || [];\r\n        let { skip, take } = this.state\r\n        sampleList = sampleList.slice(skip, skip + take);\r\n        let selectedSampleList = getSameRecordFromTwoArrays(sampleList, this.props.Login.masterData.selectedSample, \"npreregno\");\r\n\r\n        return <Comments\r\n            screenName=\"IDS_SAMPLECOMMENTS\"\r\n            onSaveClick={this.onCommentsSaveClick}\r\n            selectedMaster=\"selectedSample\"\r\n            controlMap={this.state.controlMap}\r\n            userRoleControlRights={this.state.userRoleControlRights}\r\n            Comments={this.props.Login.masterData.RegistrationComment || []}\r\n            fetchRecord={this.props.getCommentsCombo}\r\n            addName={\"AddSampleComment\"}\r\n            editName={\"EditSampleComment\"}\r\n            deleteName={\"DeleteSampleComment\"}\r\n            methodUrl={\"SampleComment\"}\r\n            isTestComment={false}\r\n            masterList={selectedSampleList}\r\n            masterAlertStatus=\"IDS_SELECTSAMPLETOADDCOMMENTS\"\r\n            primaryKeyField={\"nregcommentcode\"}\r\n            dataState={this.state.testCommentDataState}\r\n            dataStateChange={this.testDataStateChange}\r\n            deleteParam={\r\n                {\r\n                    methodUrl: \"SampleComment\",\r\n                    npreregno,\r\n                    userInfo: this.props.Login.userInfo,\r\n                    masterData: this.props.Login.masterData,\r\n                    esignRights: this.props.Login.userRoleControlRights,\r\n                    screenName: \"IDS_SAMPLECOMMENTS\"\r\n\r\n                }\r\n            }\r\n            editParam={{\r\n                methodUrl: \"SampleComment\",\r\n                npreregno,\r\n                userInfo: this.props.Login.userInfo,\r\n                masterData: this.props.Login.masterData,\r\n                esignRights: this.props.Login.userRoleControlRights,\r\n                screenName: \"IDS_SAMPLECOMMENTS\",\r\n                operation: \"update\",\r\n                masterList: this.props.Login.masterData.RegistrationGetSample || [],\r\n                ncontrolCode: this.state.controlMap.has(\"EditSampleComment\") && this.state.controlMap.get(\"EditSampleComment\").ncontrolcode\r\n            }}\r\n            selectedListName=\"IDS_SAMPLES\"\r\n            displayName=\"sarno\"\r\n            selectedId={this.props.Login.selectedId || null}\r\n        />\r\n    }\r\n\r\n    subsampleTabDetail = () => {\r\n        const ntransactionsamplecode = this.props.Login.masterData.selectedSubSample &&\r\n            this.props.Login.masterData.selectedSubSample.map(sample => sample.ntransactionsamplecode).join(\",\");\r\n        //console.log(\"ntransactionsamplecode\", ntransactionsamplecode)\r\n        const tabMap = new Map();\r\n        let subsampleList = this.props.Login.masterData.RegistrationGetSubSample || [];\r\n        let { subsampleskip, subsampletake } = this.state\r\n        subsampleList = subsampleList.slice(subsampleskip, subsampleskip + subsampletake);\r\n        let selectedSubSampleList = getSameRecordFromTwoArrays(subsampleList, this.props.Login.masterData.selectedSubSample, \"ntransactionsamplecode\");\r\n\r\n        tabMap.set(\"IDS_SUBSAMPLEATTACHMENTS\", <Attachments\r\n            screenName=\"IDS_SUBSAMPLEATTACHMENTS\"\r\n            onSaveClick={this.onAttachmentSaveClick}\r\n            selectedMaster=\"selectedSubSample\"\r\n            controlMap={this.state.controlMap}\r\n            userRoleControlRights={this.state.userRoleControlRights}\r\n            attachments={this.props.Login.masterData.RegistrationSampleAttachment || []}\r\n            deleteRecord={this.props.deleteAttachment}\r\n            masterList={this.props.Login.masterData.selectedSubSample}\r\n            masterAlertStatus={\"IDS_SELECTSUBSAMPLETOADDATTACHMENT\"}\r\n            fetchRecord={this.props.getAttachmentCombo}\r\n            viewFile={this.props.viewAttachment}\r\n            addName={\"AddSubSampleAttachment\"}\r\n            editName={\"EditSubSampleAttachment\"}\r\n            deleteName={\"DeleteSubSampleAttachment\"}\r\n            viewName={\"ViewSubSampleAttachment\"}\r\n            methodUrl={\"SubSampleAttachment\"}\r\n            userInfo={this.props.Login.userInfo}\r\n            skip={this.props.Login.inputParam ? this.props.Login.inputParam.attachmentskip || 0 : 0}\r\n            take={this.props.Login.inputParam ? this.props.Login.inputParam.attachmenttake || 10 : this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5}\r\n            deleteParam={\r\n                {\r\n                    methodUrl: \"SubSampleAttachment\",\r\n                    ntransactionsamplecode,\r\n                    userInfo: this.props.Login.userInfo,\r\n                    masterData: this.props.Login.masterData,\r\n                    esignRights: this.props.Login.userRoleControlRights\r\n                }\r\n            }\r\n            editParam={{\r\n                methodUrl: \"SubSampleAttachment\",\r\n                ntransactionsamplecode,\r\n                userInfo: this.props.Login.userInfo,\r\n                masterData: this.props.Login.masterData,\r\n                esignRights: this.props.Login.userRoleControlRights,\r\n                masterList: this.props.Login.masterData.RegistrationGetSubSample || []\r\n\r\n            }}\r\n            selectedListName=\"IDS_SUBSAMPLE\"\r\n            displayName=\"ssamplearno\"\r\n            isneedHeader={true}\r\n        />)\r\n        tabMap.set(\"IDS_SUBSAMPLECOMMENTS\", <Comments\r\n            screenName=\"IDS_SUBSAMPLECOMMENTS\"\r\n            onSaveClick={this.onCommentsSaveClick}\r\n            selectedMaster=\"selectedSubSample\"\r\n            controlMap={this.state.controlMap}\r\n            userRoleControlRights={this.state.userRoleControlRights}\r\n            Comments={this.props.Login.masterData.RegistrationSampleComment || []}\r\n            fetchRecord={this.props.getCommentsCombo}\r\n            addName={\"AddSubSampleComment\"}\r\n            editName={\"EditSubSampleComment\"}\r\n            deleteName={\"DeleteSubSampleComment\"}\r\n            methodUrl={\"SubSampleComment\"}\r\n            isTestComment={false}\r\n            masterList={selectedSubSampleList}\r\n            masterAlertStatus=\"IDS_SELECTSUBSAMPLETOADDCOMMENTS\"\r\n            primaryKeyField={\"nsamplecommentcode\"}\r\n            dataState={this.state.subSampleCommentDataState}\r\n            dataStateChange={this.subSampledataStateChange}\r\n            deleteParam={\r\n                {\r\n                    methodUrl: \"SubSampleComment\",\r\n                    ntransactionsamplecode,\r\n                    userInfo: this.props.Login.userInfo,\r\n                    masterData: this.props.Login.masterData,\r\n                    esignRights: this.props.Login.userRoleControlRights,\r\n                    screenName: \"IDS_SUBSAMPLECOMMENTS\"\r\n\r\n                }\r\n            }\r\n            editParam={{\r\n                methodUrl: \"SubSampleComment\",\r\n                ntransactionsamplecode,\r\n                userInfo: this.props.Login.userInfo,\r\n                masterData: this.props.Login.masterData,\r\n                esignRights: this.props.Login.userRoleControlRights,\r\n                screenName: \"IDS_SUBSAMPLECOMMENTS\",\r\n                operation: \"update\",\r\n                masterList: this.props.Login.masterData.RegistrationGetSubSample || [],\r\n                ncontrolCode: this.state.controlMap.has(\"EditSubSampleComment\") && this.state.controlMap.get(\"EditSubSampleComment\").ncontrolcode\r\n            }}\r\n            selectedListName=\"IDS_SUBSAMPLES\"\r\n            displayName=\"ssamplearno\"\r\n            selectedId={this.props.Login.selectedId || null}\r\n        />)\r\n\r\n        return tabMap;\r\n    }\r\n\r\n    subsampleComments = () => {\r\n        const ntransactionsamplecode = this.props.Login.masterData.selectedSubSample &&\r\n            this.props.Login.masterData.selectedSubSample.map(sample => sample.ntransactionsamplecode).join(\",\");\r\n        const tabMap = new Map();\r\n        let subsampleList = this.props.Login.masterData.RegistrationGetSubSample || [];\r\n        let { subsampleskip, subsampletake } = this.state\r\n        subsampleList = subsampleList.slice(subsampleskip, subsampleskip + subsampletake);\r\n        let selectedSubSampleList = getSameRecordFromTwoArrays(subsampleList, this.props.Login.masterData.selectedSubSample, \"ntransactionsamplecode\");\r\n        return <Comments\r\n            screenName=\"IDS_SUBSAMPLECOMMENTS\"\r\n            onSaveClick={this.onCommentsSaveClick}\r\n            selectedMaster=\"selectedSubSample\"\r\n            controlMap={this.state.controlMap}\r\n            userRoleControlRights={this.state.userRoleControlRights}\r\n            Comments={this.props.Login.masterData.RegistrationSampleComment || []}\r\n            fetchRecord={this.props.getCommentsCombo}\r\n            addName={\"AddSubSampleComment\"}\r\n            editName={\"EditSubSampleComment\"}\r\n            deleteName={\"DeleteSubSampleComment\"}\r\n            methodUrl={\"SubSampleComment\"}\r\n            isTestComment={false}\r\n            masterList={selectedSubSampleList}\r\n            masterAlertStatus=\"IDS_SELECTSUBSAMPLETOADDCOMMENTS\"\r\n            primaryKeyField={\"nsamplecommentcode\"}\r\n            dataState={this.state.subSampleCommentDataState}\r\n            dataStateChange={this.subSampledataStateChange}\r\n            deleteParam={\r\n                {\r\n                    methodUrl: \"SubSampleComment\",\r\n                    ntransactionsamplecode,\r\n                    userInfo: this.props.Login.userInfo,\r\n                    masterData: this.props.Login.masterData,\r\n                    esignRights: this.props.Login.userRoleControlRights,\r\n                    screenName: \"IDS_SUBSAMPLECOMMENTS\"\r\n\r\n                }\r\n            }\r\n            editParam={{\r\n                methodUrl: \"SubSampleComment\",\r\n                ntransactionsamplecode,\r\n                userInfo: this.props.Login.userInfo,\r\n                masterData: this.props.Login.masterData,\r\n                esignRights: this.props.Login.userRoleControlRights,\r\n                screenName: \"IDS_SUBSAMPLECOMMENTS\",\r\n                operation: \"update\",\r\n                masterList: this.props.Login.masterData.RegistrationGetSubSample || [],\r\n                ncontrolCode: this.state.controlMap.has(\"EditSubSampleComment\") && this.state.controlMap.get(\"EditSubSampleComment\").ncontrolcode\r\n            }}\r\n            selectedListName=\"IDS_SUBSAMPLES\"\r\n            displayName=\"ssamplearno\"\r\n            selectedId={this.props.Login.selectedId || null}\r\n        />\r\n    }\r\n\r\n    testTabDetail = () => {\r\n\r\n        const testTabMap = new Map();\r\n        let testList = this.props.Login.masterData.RegistrationGetTest || [];\r\n        let { testskip, testtake } = this.state\r\n        testList = testList.slice(testskip, testskip + testtake);\r\n        let selectedTestList = getSameRecordFromTwoArrays(testList, this.props.Login.masterData.selectedTest, \"ntransactiontestcode\");\r\n        // const cancelId = this.state.controlMap.has(\"CancelTest\") && this.state.controlMap.get(\"CancelTest\").ncontrolcode;\r\n        let ntransactiontestcode = this.props.Login.masterData.selectedTest ? this.props.Login.masterData.selectedTest.map(test => test.ntransactiontestcode).join(\",\") : \"-1\";\r\n        testTabMap.set(\"IDS_PARAMETERRESULTS\", <RegistrationResultTab\r\n            userInfo={this.props.Login.userInfo}\r\n            genericLabel={this.props.Login.genericLabel}\r\n            masterData={this.props.Login.masterData}\r\n            inputParam={this.props.Login.inputParam}\r\n            dataState={this.state.resultDataState}\r\n            dataStateChange={this.testDataStateChange}\r\n            screenName=\"IDS_PARAMETERRESULTS\"\r\n            controlMap={this.state.controlMap}\r\n            userRoleControlRights={this.state.userRoleControlRights}\r\n        />)\r\n        testTabMap.set(\"IDS_TESTATTACHMENTS\", <Attachments\r\n            screenName=\"IDS_TESTATTACHMENTS\"\r\n            selectedMaster=\"selectedTest\"\r\n            onSaveClick={this.onAttachmentSaveClick}\r\n            controlMap={this.state.controlMap}\r\n            userRoleControlRights={this.state.userRoleControlRights}\r\n            masterList={selectedTestList}\r\n            masterAlertStatus={\"IDS_SELECTTESTTOADDATTACHEMENT\"}\r\n            attachments={this.props.Login.masterData.RegistrationTestAttachment || []}\r\n            deleteRecord={this.props.deleteAttachment}\r\n            fetchRecord={this.props.getAttachmentCombo}\r\n            addName={\"AddTestAttachment\"}\r\n            editName={\"EditTestAttachment\"}\r\n            deleteName={\"DeleteTestAttachment\"}\r\n            viewName={\"ViewTestAttachment\"}\r\n            methodUrl={\"TestAttachment\"}\r\n            dataState={this.state.testAttachmentDataState}\r\n            dataStateChange={this.testDataStateChange}\r\n            userInfo={this.props.Login.userInfo}\r\n            deleteParam={\r\n                {\r\n                    methodUrl: \"TestAttachment\",\r\n                    ntransactiontestcode,\r\n                    userInfo: this.props.Login.userInfo,\r\n                    masterData: this.props.Login.masterData,\r\n                    esignRights: this.props.Login.userRoleControlRights,\r\n                    screenName: \"IDS_TESTATTACHMENTS\"\r\n\r\n                }\r\n            }\r\n            editParam={{\r\n                methodUrl: \"TestAttachment\",\r\n                ntransactiontestcode,\r\n                userInfo: this.props.Login.userInfo,\r\n                masterData: this.props.Login.masterData,\r\n                esignRights: this.props.Login.userRoleControlRights,\r\n                screenName: \"IDS_TESTATTACHMENTS\",\r\n                masterList: this.props.Login.masterData.selectedTest\r\n            }}\r\n            selectedListName=\"IDS_TESTS\"\r\n            displayName=\"stestsynonym\"\r\n            isneedHeader={true}\r\n        />)\r\n        testTabMap.set(\"IDS_TESTCOMMENTS\", <Comments\r\n            screenName=\"IDS_TESTCOMMENTS\"\r\n            onSaveClick={this.onCommentsSaveClick}\r\n            selectedMaster=\"selectedTest\"\r\n            controlMap={this.state.controlMap}\r\n            userRoleControlRights={this.state.userRoleControlRights}\r\n            Comments={this.props.Login.masterData.RegistrationTestComment || []}\r\n            fetchRecord={this.props.getCommentsCombo}\r\n            addName={\"AddTestComment\"}\r\n            editName={\"EditTestComment\"}\r\n            deleteName={\"DeleteTestComment\"}\r\n            methodUrl={\"TestComment\"}\r\n            isTestComment={false}\r\n            masterList={selectedTestList}\r\n            masterAlertStatus=\"IDS_SELECTTESTTOADDCOMMENTS\"\r\n            primaryKeyField={\"ntestcommentcode\"}\r\n            dataState={this.state.testCommentDataState}\r\n            dataStateChange={this.testDataStateChange}\r\n            deleteParam={\r\n                {\r\n                    methodUrl: \"TestComment\",\r\n                    ntransactiontestcode,\r\n                    userInfo: this.props.Login.userInfo,\r\n                    masterData: this.props.Login.masterData,\r\n                    esignRights: this.props.Login.userRoleControlRights,\r\n                    screenName: \"IDS_TESTCOMMENTS\"\r\n\r\n                }\r\n            }\r\n            editParam={{\r\n                methodUrl: \"TestComment\",\r\n                ntransactiontestcode,\r\n                userInfo: this.props.Login.userInfo,\r\n                masterData: this.props.Login.masterData,\r\n                esignRights: this.props.Login.userRoleControlRights,\r\n                screenName: \"IDS_TESTCOMMENTS\",\r\n                operation: \"update\",\r\n                masterList: this.props.Login.masterData.RegistrationGetSample || [],\r\n                ncontrolCode: this.state.controlMap.has(\"EditTestComment\") && this.state.controlMap.get(\"EditTestComment\").ncontrolcode\r\n            }}\r\n            selectedListName=\"IDS_TESTS\"\r\n            displayName=\"stestsynonym\"\r\n            selectedId={this.props.Login.selectedId || null}\r\n        />)\r\n        return testTabMap;\r\n    }\r\n\r\n    getCommentsCombo = (event) => {\r\n\r\n        if (this.props.Login.selectedTest && this.props.Login.selectedTest.length > 0) {\r\n            this.props.getCommentsCombo(...event);\r\n        } else {\r\n            toast.info(this.props.intl.formatMessage({ id: \"IDS_SELECTTESTTOADDCOMMENTS\" }))\r\n        }\r\n    }\r\n\r\n    testDataStateChange = (event) => {\r\n        switch (this.props.Login.activeTestTab) {\r\n            case \"IDS_PARAMETERRESULTS\":\r\n                this.setState({\r\n                    resultDataState: event.dataState\r\n                });\r\n                break;\r\n            case \"IDS_TEST\":\r\n                this.setState({\r\n                    testDataState: event.dataState\r\n                });\r\n                break;\r\n            case \"IDS_TESTCOMMENTS\":\r\n                this.setState({\r\n                    testCommentDataState: event.dataState\r\n                });\r\n                break;\r\n            case \"IDS_TESTATTACHMENTS\":\r\n                this.setState({\r\n                    testAttachmentDataState: event.dataState\r\n                });\r\n                break;\r\n            default:\r\n                this.setState({\r\n                    resultDataState: event.dataState\r\n                });\r\n                break;\r\n        }\r\n\r\n    }\r\n\r\n    onCommentsSaveClick = (saveType, formRef, selectedRecord) => {\r\n\r\n        const masterData = this.props.Login.masterData;\r\n        let inputData = {}\r\n        let inputParam = {}\r\n        inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n        if (this.props.Login.screenName === \"IDS_SAMPLECOMMENTS\") {\r\n            let sampleList = [];\r\n            if (this.props.Login.masterData.searchedSample !== undefined) {\r\n                //sampleList = getSameRecordFromTwoArrays(this.props.Login.masterData.searchedSample, this.props.Login.masterData.RegistrationGetSample.slice(this.state.skip, this.state.skip + this.state.take), \"npreregno\");\r\n\r\n                const list = this.props.Login.masterData.searchedSample ? this.props.Login.masterData.searchedSample\r\n                    : this.props.Login.masterData.RegistrationGetSample;\r\n\r\n                sampleList = list ? list.slice(this.state.skip, this.state.skip + this.state.take) : [];\r\n            } else {\r\n                sampleList = this.props.Login.masterData.RegistrationGetSample.slice(this.state.skip, this.state.skip + this.state.take);\r\n            }\r\n            let acceptList = getSameRecordFromTwoArrays(sampleList, this.props.Login.masterData.selectedSample, \"npreregno\");\r\n            // let acceptList=getSameRecordFromTwoArrays(this.props.Login.masterData.searchedTest, this.props.Login.masterData.RegistrationGetTest.slice(this.state.testskip, this.state.testskip + this.state.testtake), \"npreregno\");\r\n\r\n            let saveParam = {\r\n                userInfo: this.props.Login.userInfo,\r\n                isTestComment: this.props.isTestComment,\r\n                selectedRecord,\r\n                masterData: this.props.Login.masterData,\r\n                saveType, formRef,\r\n                operation: this.props.Login.operation,\r\n                npreregno: this.props.Login.masterData.selectedSample ? this.props.Login.masterData.selectedSample.map(x => x.npreregno).join(\",\") : \"-1\"\r\n            }\r\n            inputParam = onSaveSampleComments(saveParam, acceptList);\r\n        }\r\n\r\n        if (this.props.Login.screenName === \"IDS_SUBSAMPLECOMMENTS\") {\r\n            let sampleList = [];\r\n            if (this.props.Login.masterData.searchedSubSample !== undefined) {\r\n\r\n                //sampleList = getSameRecordFromTwoArrays(this.props.Login.masterData.searchedSubSample, this.props.Login.masterData.RegistrationGetSubSample.slice(this.state.subsampleskip, this.state.subsampleskip + this.state.subsampletake), \"npreregno\");\r\n                const list = this.props.Login.masterData.searchedSubSample ? this.props.Login.masterData.searchedSubSample\r\n                    : this.props.Login.masterData.RegistrationGetSubSample;\r\n\r\n                sampleList = list ? list.slice(this.state.subsampleskip, this.state.subsampleskip + this.state.subsampletake) : [];\r\n            } else {\r\n                sampleList = this.props.Login.masterData.RegistrationGetSubSample.slice(this.state.subsampleskip, this.state.subsampleskip + this.state.subsampletake);\r\n            }\r\n            let acceptList = getSameRecordFromTwoArrays(sampleList, this.props.Login.masterData.selectedSubSample, \"ntransactionsamplecode\");\r\n            // let acceptList=getSameRecordFromTwoArrays(this.props.Login.masterData.searchedTest, this.props.Login.masterData.RegistrationGetTest.slice(this.state.testskip, this.state.testskip + this.state.testtake), \"npreregno\");\r\n\r\n            let saveParam = {\r\n                userInfo: this.props.Login.userInfo,\r\n                isTestComment: this.props.isTestComment,\r\n                selectedRecord,\r\n                masterData: this.props.Login.masterData,\r\n                saveType, formRef,\r\n                operation: this.props.Login.operation,\r\n                ntransactionsamplecode: this.props.Login.masterData.selectedSubSample ? this.props.Login.masterData.selectedSubSample.map(x => x.ntransactionsamplecode).join(\",\") : \"-1\"\r\n            }\r\n            inputParam = onSaveSubSampleComments(saveParam, acceptList);\r\n        }\r\n        if (this.props.Login.screenName === \"IDS_TESTCOMMENTS\") {\r\n            let testList = [];\r\n            if (this.props.Login.masterData.searchedTest !== undefined) {\r\n                testList = getSameRecordFromTwoArrays(this.props.Login.masterData.searchedTest, this.props.Login.masterData.RegistrationGetTest.slice(this.state.testskip, this.state.testskip + this.state.testtake), \"npreregno\");\r\n            } else {\r\n                testList = this.props.Login.masterData.RegistrationGetTest.slice(this.state.testskip, this.state.testskip + this.state.testtake);\r\n            }\r\n            let acceptList = getSameRecordFromTwoArrays(testList, this.props.Login.masterData.selectedTest, \"ntransactiontestcode\");\r\n            // let acceptList=getSameRecordFromTwoArrays(this.props.Login.masterData.searchedTest, this.props.Login.masterData.RegistrationGetTest.slice(this.state.testskip, this.state.testskip + this.state.testtake), \"npreregno\");\r\n\r\n            let saveParam = {\r\n                userInfo: this.props.Login.userInfo,\r\n                isTestComment: this.props.isTestComment,\r\n                selectedRecord,\r\n                masterData: this.props.Login.masterData,\r\n                saveType, formRef,\r\n                operation: this.props.Login.operation,\r\n                ntransactiontestcode: this.props.Login.masterData.selectedTest ? this.props.Login.masterData.selectedTest.map(x => x.ntransactiontestcode).join(\",\") : \"-1\"\r\n            }\r\n            inputParam = onSaveTestComments(saveParam, acceptList);\r\n        }\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true,\r\n                    screenData: { inputParam, masterData },\r\n                    operation: this.props.Login.operation,\r\n                    screenName: this.props.Login.screenName,\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.crudMaster(inputParam, masterData, \"openCommentModal\");\r\n        }\r\n    }\r\n\r\n    onAttachmentSaveClick = (saveType, formRef, selectedRecord) => {\r\n        const masterData = this.props.Login.masterData;\r\n        let inputData = {}\r\n        let inputParam = {}\r\n        let acceptList = []\r\n        inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n        let sampleList = [];\r\n        if (this.props.Login.masterData.searchedSample !== undefined) {\r\n            sampleList = getSameRecordFromTwoArrays(this.props.Login.masterData.searchedSample || [],  sortDataForDate(this.props.Login.masterData.RegistrationGetSample, 'dtransactiondate', 'npreregno').slice(this.state.skip, this.state.skip + this.state.take), \"npreregno\");\r\n        } else {\r\n            sampleList = sortDataForDate(this.props.Login.masterData.RegistrationGetSample, 'dtransactiondate', 'npreregno').slice(this.state.skip, this.state.skip + this.state.take);\r\n        }\r\n        if (this.props.Login.operation === \"update\") {\r\n            acceptList.push(selectedRecord);\r\n        }\r\n        else {\r\n            acceptList = getSameRecordFromTwoArrays(sampleList, this.props.Login.masterData.selectedSample, \"npreregno\");\r\n        }\r\n\r\n\r\n        if (this.props.Login.screenName === \"IDS_SAMPLEATTACHMENTS\") {\r\n            let saveParam = {\r\n                userInfo: this.props.Login.userInfo,\r\n                selectedRecord,\r\n                masterData: this.props.Login.masterData,\r\n                saveType, formRef,\r\n                operation: this.props.Login.operation,\r\n                selectedMaster: this.props.selectedMaster,\r\n                npreregno: this.props.Login.masterData.selectedSample ? this.props.Login.masterData.selectedSample.map(x => x.npreregno).join(\",\") : \"-1\"\r\n            }\r\n            inputParam = onSaveSampleAttachment(saveParam, acceptList);\r\n        } else if (this.props.Login.screenName === \"IDS_TESTATTACHMENTS\") {\r\n            let saveParam = {\r\n                userInfo: this.props.Login.userInfo,\r\n                selectedRecord,\r\n                masterData: this.props.Login.masterData,\r\n                saveType, formRef,\r\n                operation: this.props.Login.operation,\r\n                selectedMaster: this.props.selectedMaster,\r\n                ntransactiontestcode: this.props.Login.masterData.selectedTest ? this.props.Login.masterData.selectedTest.map(x => x.ntransactiontestcode).join(\",\") : \"-1\"\r\n            }\r\n            inputParam = onSaveTestAttachment(saveParam, this.props.Login.masterData.selectedTest);\r\n        }\r\n        else if (this.props.Login.screenName === \"IDS_SUBSAMPLEATTACHMENTS\") {\r\n            let saveParam = {\r\n                userInfo: this.props.Login.userInfo,\r\n                selectedRecord,\r\n                masterData: this.props.Login.masterData,\r\n                saveType, formRef,\r\n                operation: this.props.Login.operation,\r\n                selectedMaster: this.props.selectedMaster,\r\n                ntransactionsamplecode: this.props.Login.masterData.selectedSubSample ? this.props.Login.masterData.selectedSubSample.map(x => x.ntransactionsamplecode).join(\",\") : \"-1\"\r\n            }\r\n            inputParam = onSaveSubSampleAttachment(saveParam, this.props.Login.masterData.selectedSubSample);\r\n        }\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true,\r\n                    screenData: { inputParam, masterData },\r\n                    operation: this.props.Login.operation,\r\n                    screenName: this.props.Login.screenName,\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.crudMaster(inputParam, masterData, \"openAttachmentModal\");\r\n        }\r\n    }\r\n\r\n    gridfillingColumn(data) {\r\n        //  const tempArray = [];\r\n        const temparray = data && data.map((option) => {\r\n            return { \"idsName\": option[designProperties.LABEL][this.props.Login.userInfo.slanguagetypecode] || \"-\", \"dataField\": option[designProperties.VALUE], \"width\": \"200px\", \"columnSize\": \"3\", \"dataType\": [option[designProperties.LISTITEM]] };\r\n        });\r\n        return temparray;\r\n    }\r\n\r\n    cancelSubSampleRecord = (controlcode, skip, take) => {\r\n\r\n        let testList = [];\r\n        if (this.props.Login.masterData.searchedSubSample !== undefined) {\r\n\r\n            //sampleList = getSameRecordFromTwoArrays(this.props.Login.masterData.searchedSubSample, this.props.Login.masterData.RegistrationGetSubSample.slice(this.state.subsampleskip, this.state.subsampleskip + this.state.subsampletake), \"npreregno\");\r\n            const list = this.props.Login.masterData.searchedSubSample ? this.props.Login.masterData.searchedSubSample\r\n                : this.props.Login.masterData.RegistrationGetSubSample;\r\n\r\n            testList = list ? list.slice(this.state.subsampleskip, this.state.subsampleskip + this.state.subsampletake) : [];\r\n        } else {\r\n            testList = this.props.Login.masterData.RegistrationGetSubSample.slice(this.state.subsampleskip, this.state.subsampleskip + this.state.subsampletake);\r\n        }\r\n\r\n        // let testList = this.props.Login.masterData.searchedSubSample ||\r\n        //     (this.props.Login.masterData.RegistrationGetSubSample ?\r\n        //         [...this.props.Login.masterData.RegistrationGetSubSample].splice(skip, skip + take) : []);\r\n\r\n        let acceptList = getSameRecordFromTwoArrays(testList, this.props.Login.masterData.selectedSubSample, \"ntransactionsamplecode\");\r\n        if (acceptList && acceptList.length > 0) {\r\n            // console.log(\"Success:\", dataitem);\r\n            if (this.transValidation(this.props.Login.transactionValidation, controlcode, acceptList)) {\r\n                let Map = {};\r\n                Map['npreregno'] = acceptList.map(x => x.npreregno).join(\",\");\r\n                Map['ntransactiontestcode'] = this.props.Login.masterData.selectedTest && this.props.Login.masterData.selectedTest.length > 0 ?\r\n                    this.props.Login.masterData.selectedTest.map(x => x.ntransactiontestcode).join(\",\") : \"-1\";\r\n                // Map['ntransactionstatus'] = dataitem.ntransactionstatus;\r\n                // Map[\"ntransactionsamplecode\"] = acceptList.map(x => x.ntransactionsamplecode).join(\",\");\r\n                //  Map[\"ninserttransactionsamplecode\"] = dataitem.ntransactionsamplecode\r\n                Map[\"userinfo\"] = this.props.Login.userInfo;\r\n                Map[\"ncontrolcode\"] = controlcode;\r\n                Map[\"nsampletypecode\"] = this.props.Login.masterData.RealSampleTypeValue.nsampletypecode;\r\n                Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\r\n                Map[\"nregsubtypecode\"] = this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode;\r\n                Map[\"nflag\"] = 2;\r\n                Map[\"ntype\"] = 3;\r\n                // Map[\"withoutgetparameter\"] = 3;\r\n                Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\r\n                Map[\"nregsubtypecode\"] = this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode;\r\n                Map[\"nfilterstatus\"] = this.props.Login.masterData.FilterStatusValue.ntransactionstatus;\r\n                Map[\"npreregno\"] = acceptList &&\r\n                    acceptList.map(sample => sample.npreregno).join(\",\");\r\n                Map[\"ntransactionsamplecode\"] = acceptList &&\r\n                    acceptList.map(sample => sample.ntransactionsamplecode).join(\",\");\r\n                Map[\"registrationsample\"] = this.props.Login.masterData.selectedSample;\r\n                Map[\"registrationSubSample\"] = this.props.Login.masterData.selectedSubSample;\r\n                Map[\"registrationTest\"] = this.props.Login.masterData.selectedTest;\r\n                Map[\"selectedTest\"] = this.props.Login.masterData.RegistrationGetTest;\r\n                Map[\"ndesigntemplatemappingcode\"] = this.props.Login.masterData.RealDesignTemplateMappingValue\r\n                    && this.props.Login.masterData.RealDesignTemplateMappingValue.ndesigntemplatemappingcode;\r\n                Map[\"nneedtemplatebasedflow\"] = this.props.Login.masterData.RegSubTypeValue\r\n                    && this.props.Login.masterData.RegSubTypeValue.nneedtemplatebasedflow;\r\n                Map[\"nneedsubsample\"] = this.props.Login.masterData.RegSubTypeValue\r\n                    && this.props.Login.masterData.RegSubTypeValue.nneedsubsample;\r\n               // Map[\"checkBoxOperation\"] = 3\r\n                Map[\"checkBoxOperation\"]=checkBoxOperation.SINGLESELECT;\r\n                Map[\"activeTestTab\"] = this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\";\r\n                Map[\"activeSampleTab\"] = this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\";\r\n                Map[\"activeSubSampleTab\"] = this.props.Login.activeSubSampleTab || \"IDS_SUBSAMPLEATTACHMENTS\";\r\n                Map[\"FromDate\"] = rearrangeDateFormat(this.props.Login.masterData.FromDate);\r\n                Map[\"napproveconfversioncode\"] = this.props.Login.masterData.napproveconfversioncode;\r\n                Map[\"ToDate\"] = rearrangeDateFormat(this.props.Login.masterData.ToDate);\r\n\r\n                let inputParam = {\r\n                    inputData: Map,\r\n                    postParamList: this.postParamList,\r\n                    action: 'cancelSubSample'\r\n                }\r\n                if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, controlcode)) {\r\n                    const updateInfo = {\r\n                        typeName: DEFAULT_RETURN,\r\n                        data: {\r\n                            loadEsign: true,\r\n                            screenData: { inputParam, masterData: this.props.Login.masterData },\r\n                            openModal: true,\r\n                            parentPopUpSize: 'lg',\r\n                            screenName: this.props.Login.screenName,\r\n                            operation: 'cancel'\r\n                        }\r\n                    }\r\n                    this.props.updateStore(updateInfo);\r\n                } else {\r\n                    this.props.cancelSubSampleAction(inputParam, this.props.Login.masterData)\r\n                }\r\n            } else {\r\n                let value = []\r\n                this.props.Login.transactionValidation[controlcode] &&\r\n                    this.props.Login.transactionValidation[controlcode].map(sample => {\r\n                        if (sample.nregsubtypecode === this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode) {\r\n                            value.push(this.props.intl.formatMessage({ id: sample.stransdisplaystatus }))\r\n                        }\r\n                    })\r\n                value = value.map(sample => sample).join(\"/\")\r\n\r\n                //toast.info(\"Select\" + \" \" + value + \" to Cancel/Reject Test\");\r\n                toast.info(this.props.intl.formatMessage({ id: \"IDS_SELECT\" }) + value + this.props.intl.formatMessage({ id: \"IDS_TOCANCELREJECTSUBSAMPLE\" }));\r\n            }\r\n        } else {\r\n            toast.info(this.props.intl.formatMessage({ id: \"IDS_SELECTSAMPLETOCANCELREJECT\" }));\r\n        }\r\n    }\r\n\r\n\r\n\r\n    printbarcode = (controlcode) => {\r\n\r\n        if (this.transValidation(this.props.Login.transactionValidation, controlcode)) {\r\n            this.props.getBarcodeAndPrinterService({\r\n                masterData: this.props.Login.masterData,\r\n                ncontrolcode: this.state.subSampleBarcodeId,\r\n                userInfo: this.props.Login.userInfo,\r\n                control: \"subSampleBarcode\"\r\n            })\r\n        } else {\r\n            let value = []\r\n            this.props.Login.transactionValidation[controlcode] &&\r\n                this.props.Login.transactionValidation[controlcode].map(sample => {\r\n                    if (sample.nregsubtypecode === this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode) {\r\n                        value.push(this.props.intl.formatMessage({ id: sample.stransdisplaystatus }))\r\n                    }\r\n                })\r\n            value = value.map(sample => sample).join(\"/\")\r\n\r\n            //toast.info(\"Select\" + \" \" + value + \" to Cancel/Reject Test\");\r\n            toast.info(this.props.intl.formatMessage({ id: \"IDS_SELECT\" }) + value + this.props.intl.formatMessage({ id: \"IDS_TOCANCELREJECTSUBSAMPLE\" }));\r\n        }\r\n    }\r\n\r\n    cancelRecord = (controlcode, skip, take) => {\r\n        let testList = this.props.Login.masterData.searchedTest ||\r\n            (this.props.Login.masterData.RegistrationGetTest ?\r\n                [...this.props.Login.masterData.RegistrationGetTest].splice(skip, skip + take) : []);\r\n        let acceptList = getSameRecordFromTwoArrays(testList, this.props.Login.masterData.selectedTest, \"ntransactiontestcode\");\r\n\r\n        if (acceptList && acceptList.length > 0) {\r\n            // console.log(\"Success:\", dataitem);\r\n            if (this.transValidation(this.props.Login.transactionValidation, controlcode, acceptList)) {\r\n                let Map = {};\r\n                Map['ninsertpreregno'] = acceptList.map(x => x.npreregno).join(\",\");\r\n                // Map['ntransactionstatus'] = dataitem.ntransactionstatus;\r\n                Map[\"ntransactiontestcode\"] = acceptList.map(x => x.ntransactiontestcode).join(\",\");\r\n                //  Map[\"ninserttransactionsamplecode\"] = dataitem.ntransactionsamplecode\r\n                Map[\"userinfo\"] = this.props.Login.userInfo;\r\n                Map[\"ncontrolcode\"] = controlcode;\r\n                Map[\"nsampletypecode\"] = this.props.Login.masterData.RealSampleTypeValue.nsampletypecode;\r\n                Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\r\n                Map[\"nregsubtypecode\"] = this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode;\r\n                Map[\"nflag\"] = 2;\r\n                Map[\"ntype\"] = 3;\r\n                Map[\"withoutgetparameter\"] = 3;\r\n                Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\r\n                Map[\"nregsubtypecode\"] = this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode;\r\n                Map[\"nfilterstatus\"] = this.props.Login.masterData.FilterStatusValue.ntransactionstatus;\r\n                Map[\"npreregno\"] = acceptList &&\r\n                    acceptList.map(sample => sample.npreregno).join(\",\");\r\n                Map[\"ntransactionsamplecode\"] = acceptList &&\r\n                    acceptList.map(sample => sample.ntransactionsamplecode).join(\",\");\r\n                Map[\"registrationsample\"] = this.props.Login.masterData.selectedSample;\r\n                Map[\"registrationSubSample\"] = this.props.Login.masterData.selectedSubSample;\r\n                Map[\"registrationTest\"] = this.props.Login.masterData.selectedTest;\r\n                Map[\"ndesigntemplatemappingcode\"] = this.props.Login.masterData.RealDesignTemplateMappingValue\r\n                    && this.props.Login.masterData.RealDesignTemplateMappingValue.ndesigntemplatemappingcode;\r\n                Map[\"nneedtemplatebasedflow\"] = this.props.Login.masterData.RegSubTypeValue\r\n                    && this.props.Login.masterData.RegSubTypeValue.nneedtemplatebasedflow;\r\n                Map[\"nneedsubsample\"] = this.props.Login.masterData.RegSubTypeValue\r\n                    && this.props.Login.masterData.RegSubTypeValue.nneedsubsample;\r\n                let inputParam = {\r\n                    inputData: Map,\r\n                    postParamList: this.postParamList,\r\n                    action: 'cancelTest'\r\n                }\r\n                if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, controlcode)) {\r\n                    const updateInfo = {\r\n                        typeName: DEFAULT_RETURN,\r\n                        data: {\r\n                            loadEsign: true,\r\n                            screenData: { inputParam, masterData: this.props.Login.masterData },\r\n                            openModal: true,\r\n                            parentPopUpSize: 'lg',\r\n                            screenName: this.props.Login.screenName,\r\n                            operation: 'cancel'\r\n                        }\r\n                    }\r\n                    this.props.updateStore(updateInfo);\r\n                } else {\r\n                    this.props.cancelTestAction(inputParam, this.props.Login.masterData)\r\n                }\r\n            } else {\r\n                let value = []\r\n                this.props.Login.transactionValidation[controlcode] &&\r\n                    this.props.Login.transactionValidation[controlcode].map(sample => {\r\n                        if (sample.nregsubtypecode === this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode) {\r\n                            value.push(this.props.intl.formatMessage({ id: sample.stransdisplaystatus }))\r\n                        }\r\n                    })\r\n                value = value.map(item => item).join(\"/\")\r\n\r\n                //toast.info(\"Select\" + \" \" + value + \" to Cancel/Reject Test\");\r\n                toast.info(this.props.intl.formatMessage({ id: \"IDS_SELECT\" }) + value + this.props.intl.formatMessage({ id: \"IDS_TOCANCELREJECTTEST\" }));\r\n            }\r\n        } else {\r\n            toast.info(this.props.intl.formatMessage({ id: \"IDS_SELECTTESTTOCANCELREJECT\" }));\r\n        }\r\n    }\r\n\r\n    addMoreTest = (inputParam, ncontrolCode) => {\r\n        let sampleList = [];\r\n        const skip = this.state.skip;\r\n        const take = this.state.take;\r\n        if (this.props.Login.masterData.searchedSample !== undefined) {\r\n\r\n            ///sampleList = getSameRecordFromTwoArrays(this.props.Login.masterData.searchedSample, this.props.Login.masterData.RegistrationGetSample.slice(skip, skip + take), \"npreregno\");\r\n            const list = this.props.Login.masterData.searchedSample ? this.props.Login.masterData.searchedSample\r\n                : this.props.Login.masterData.RegistrationGetSample;\r\n\r\n            sampleList = list ? list.slice(skip, skip + take) : [];\r\n        } else {\r\n            sampleList = this.props.Login.masterData.RegistrationGetSample && sortDataForDate(this.props.Login.masterData.RegistrationGetSample, 'dtransactiondate', 'npreregno').slice(skip, skip + take);\r\n        }\r\n        let addSubSampleList = getSameRecordFromTwoArrays(sampleList || [], this.props.Login.masterData.selectedSample, \"npreregno\");\r\n\r\n        if (addSubSampleList && addSubSampleList.length > 0) {\r\n\r\n            inputParam[\"sampleList\"] = sampleList;\r\n            this.props.addMoreTest(inputParam, ncontrolCode);\r\n        }\r\n        else {\r\n            toast.info(this.props.intl.formatMessage({ id: \"IDS_SELECTSAMPLETOADDTEST\" }));\r\n        }\r\n    }\r\n    //ALPD-3615--Start\r\n    addAdhocTest = (inputParam) => {\r\n        let sampleList = [];\r\n        const skip = this.state.skip;\r\n        const take = this.state.take;\r\n        if (this.props.Login.masterData.searchedSample !== undefined) {\r\n\r\n            ///sampleList = getSameRecordFromTwoArrays(this.props.Login.masterData.searchedSample, this.props.Login.masterData.RegistrationGetSample.slice(skip, skip + take), \"npreregno\");\r\n            const list = this.props.Login.masterData.searchedSample ? this.props.Login.masterData.searchedSample\r\n                : this.props.Login.masterData.RegistrationGetSample;\r\n\r\n            sampleList = list ? list.slice(skip, skip + take) : [];\r\n        } else {\r\n            sampleList = this.props.Login.masterData.RegistrationGetSample && sortDataForDate(this.props.Login.masterData.RegistrationGetSample, 'dtransactiondate', 'npreregno').slice(skip, skip + take);\r\n        }\r\n        let addSubSampleList = getSameRecordFromTwoArrays(sampleList || [], this.props.Login.masterData.selectedSample, \"npreregno\");\r\n\r\n        if (addSubSampleList && addSubSampleList.length > 0) {\r\n\r\n            inputParam[\"sampleList\"] = sampleList;\r\n            this.props.getAdhocTest(inputParam, this.props.Login.masterData,this.state.adhocTestId);\r\n        }\r\n        else {\r\n            toast.info(this.props.intl.formatMessage({ id: \"IDS_SELECTSAMPLETOADDTEST\" }));\r\n        }\r\n    }\r\n    //ALPD-3615--End\r\n    addSubSample = (controlcode, skip, take) => {\r\n        let Map = {};\r\n        let sampleList = [];\r\n        if (this.props.Login.masterData.searchedSample !== undefined) {\r\n            // sampleList = getSameRecordFromTwoArrays(this.props.Login.masterData.searchedSample, this.props.Login.masterData.RegistrationGetSample.slice(skip, skip + take), \"npreregno\");\r\n            const list = this.props.Login.masterData.searchedSample ? this.props.Login.masterData.searchedSample\r\n                : this.props.Login.masterData.RegistrationGetSample;\r\n\r\n            sampleList = list ? list.slice(skip, skip + take) : [];\r\n\r\n        } else {\r\n            sampleList = this.props.Login.masterData.RegistrationGetSample && sortDataForDate(this.props.Login.masterData.RegistrationGetSample, 'dtransactiondate', 'npreregno').slice(skip, skip + take);\r\n        }\r\n\r\n        let addSubSampleList = getSameRecordFromTwoArrays(sampleList || [], this.props.Login.masterData.selectedSample, \"npreregno\");\r\n\r\n        const nsampletypecode = this.props.Login.masterData.RealSampleTypeValue.nsampletypecode;\r\n        let check = true;\r\n        if (nsampletypecode === SampleType.CLINICALTYPE && addSubSampleList.length > 1) {\r\n            check = false\r\n        }\r\n        if (addSubSampleList && addSubSampleList.length > 0 && check) {\r\n            const findTransactionStatus = [...new Set(addSubSampleList.map(item => item.ntransactionstatus))];\r\n\r\n            if (findTransactionStatus.length === 1) {\r\n                if (findTransactionStatus.indexOf(transactionStatus.REJECT) === -1\r\n                    && findTransactionStatus.indexOf(transactionStatus.CANCELLED) === -1\r\n                    && findTransactionStatus.indexOf(transactionStatus.RELEASED) === -1) {\r\n                    // if (findTransactionStatus[0] === transactionStatus.PREREGISTER) {\r\n                    //   const findApprovalVersion = [...new Set(addSubSampleList.map(item => item.napprovalversioncode))];\r\n                    //   if (findApprovalVersion.length === 1) {\r\n                    const findSampleSpec = [...new Set(addSubSampleList.map(item => item.nallottedspeccode))];\r\n                    //const findComponentReqSpec = [...new Set(addSubSampleList.map(item => item.ncomponentrequired))];\r\n                    const findSampleSpectemplate = [...new Set(addSubSampleList.map(item => item.ntemplatemanipulationcode))];\r\n                    //const findComponent = [...new Set(selectsubsample.map(item => item.ncomponentcode))];\r\n                    if (findSampleSpec.length === 1)//&& findComponent.length === 1 \r\n                    {\r\n                        const findComponentReqSpec = addSubSampleList[0].ncomponentrequired;\r\n                        let data = [];\r\n                        const regSubSamplewithoutCombocomponent = [];\r\n                        const Layout = this.props.Login.masterData.SubSampleTemplate\r\n                            && this.props.Login.masterData.SubSampleTemplate.jsondata\r\n                        if (Layout !== undefined) {\r\n                            Layout.map(row => {\r\n                                return row.children.map(column => {\r\n                                    return column.children.map(component => {\r\n                                        return component.hasOwnProperty(\"children\") ?\r\n                                            component.children.map(componentrow => {\r\n                                                if (componentrow.inputtype === \"combo\" || componentrow.inputtype === \"backendsearchfilter\"\r\n                                                    || componentrow.inputtype === \"frontendsearchfilter\") {\r\n                                                    data.push(componentrow)\r\n                                                } else {\r\n                                                    regSubSamplewithoutCombocomponent.push(componentrow)\r\n                                                }\r\n                                                return null;\r\n                                            })\r\n                                            : component.inputtype === \"combo\" || component.inputtype === \"backendsearchfilter\"\r\n                                                || component.inputtype === \"frontendsearchfilter\" ? data.push(component) :\r\n                                                regSubSamplewithoutCombocomponent.push(component)\r\n                                    })\r\n                                })\r\n\r\n                            })\r\n                            const regSubSamplecomboComponents = data\r\n                            let regchildColumnList = {};\r\n                            data.map(columnList => {\r\n                                const val = comboChild(data, columnList, regchildColumnList, true);\r\n                                data = val.data;\r\n                                regchildColumnList = val.childColumnList\r\n                                return null;\r\n                            })\r\n                            //const Map={}\r\n                            // const findSamplentemplatemanipulationcode = [...new Set(addSubSampleList.map(item => item.ntemplatemanipulationcode))];\r\n                            // Map[\"ntemplatemanipulationcode\"] = findSamplentemplatemanipulationcode[0];\r\n                            Map[\"nallottedspeccode\"] = findSampleSpec[0];\r\n                            Map[\"ntemplatemanipulationcode\"] = findSampleSpectemplate[0];\r\n                            Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\r\n                            Map[\"nneedsubsample\"] = this.props.Login.masterData.RegSubTypeValue\r\n                                && this.props.Login.masterData.RegSubTypeValue.nneedsubsample;\r\n                            Map[\"npreregno\"] = addSubSampleList &&\r\n                                addSubSampleList.map(sample => sample.npreregno).join(\",\");\r\n                            Map[\"registrationsample\"] = addSubSampleList;\r\n                            // console.log(\"spec jsx main:\", findComponentReqSpec,findSampleSpec[0] );\r\n                            this.props.addsubSampleRegistration(this.props.Login.masterData,\r\n                                this.props.Login.userInfo, data, this.state.selectedRecord,\r\n                                regchildColumnList, regSubSamplecomboComponents,\r\n                                regSubSamplewithoutCombocomponent,\r\n                                Map, controlcode, findComponentReqSpec === 3 ? true : false, this.state.specBasedTestPackage)\r\n                        } else {\r\n                            toast.info(this.props.intl.formatMessage({ id: \"IDS_PLEASECONFIGURETHESUBSAMPLETEMPLATE\" }));\r\n                        }\r\n\r\n                    } else {\r\n                        toast.info(this.props.intl.formatMessage({ id: \"IDS_PLEASESELECTSAMPLEWITHSAMESPECANDCOMPONENT\" }));\r\n                    }\r\n                    // } else {\r\n                    //    toast.info(this.props.intl.formatMessage({ id: \"IDS_PLEASESELECTSAMPLEWITHSAMEAPPROVALCONFIG\" }));\r\n                    // }\r\n                    // } else {\r\n                    //     toast.info(this.props.intl.formatMessage({ id: \"IDS_SELECTPREREGISTERSAMPLETOADDSUBSAMPLE\" }));\r\n                    // }\r\n                }\r\n                else {\r\n                    toast.info(this.props.intl.formatMessage({ id: \"IDS_CANNOTADDSUBSAMPLEASSAMPLEREJECTEDORCANCELLEDORRELEASED\" }));\r\n                }\r\n            }\r\n            else {\r\n                toast.info(this.props.intl.formatMessage({ id: \"IDS_PLEASESELECTSAMPLEWITHSAMESTATUS\" }));\r\n            }\r\n        } else {\r\n            toast.info(this.props.intl.formatMessage({ id: check ? \"IDS_SELECTSAMPLETOSUBSAMPLE\" : \"IDS_SELECTONESAMPLE\" }));\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        let activeTabIndex = this.props.Login.activeTabIndex\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                activeTabIndex: undefined\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    componentDidUpdate(previousProps) {\r\n\r\n        if (this.props.Login.columnList !== previousProps.Login.columnList) {\r\n\r\n            this.setState({\r\n                columnList: this.props.Login.columnList,\r\n                childColumnList: this.props.Login.childColumnList,\r\n                withoutCombocomponent: this.props.Login.withoutCombocomponent,\r\n                comboComponents: this.props.Login.comboComponents\r\n            });\r\n\r\n        }\r\n\r\n        if (this.props.Login.regparentSubSampleColumnList !== previousProps.Login.regparentSubSampleColumnList) {\r\n            this.setState({\r\n                regparentSubSampleColumnList: this.props.Login.regparentSubSampleColumnList,\r\n                regchildSubSampleColumnList: this.props.Login.regchildSubSampleColumnList,\r\n                regSubSamplecomboComponents: this.props.Login.regSubSamplecomboComponents,\r\n                regSubSamplewithoutCombocomponent: this.props.Login.regSubSamplewithoutCombocomponent\r\n            });\r\n\r\n        }\r\n\r\n\r\n        if (this.props.Login.showSaveContinue !== previousProps.Login.showSaveContinue) {\r\n            this.setState({ showSaveContinue: this.props.Login.showSaveContinue });\r\n\r\n        }\r\n        if (this.props.Login !== previousProps.Login) {\r\n            this.PrevoiusLoginData = previousProps\r\n        }\r\n        if (this.props.Login.selectedDetailField !== previousProps.Login.selectedDetailField) {\r\n            this.setState({ selectedDetailField: this.props.Login.selectedDetailField });\r\n        }\r\n        if (this.props.Login.selectedMaster !== previousProps.Login.selectedMaster) {\r\n            this.setState({ selectedMaster: this.props.Login.selectedMaster });\r\n        }\r\n        if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\r\n            this.setState({ selectedRecord: this.props.Login.selectedRecord });\r\n        }\r\n        else if (this.props.Login.selectedPrinterData !== previousProps.Login.selectedPrinterData) {\r\n            this.setState({ selectedPrinterData: this.props.Login.selectedPrinterData });\r\n        }\r\n        else if (this.props.Login.loadFile !== previousProps.Login.loadFile && (this.props.Login.loadFile === false)) {\r\n            this.setState({ selectedFile: undefined })\r\n        }\r\n        else if (this.props.Login.selectedFilter !== previousProps.Login.selectedFilter) {\r\n            this.setState({ selectedFilter: this.props.Login.selectedFilter });\r\n        }\r\n        if (this.props.Login.popUptestDataState && this.props.Login.popUptestDataState !== previousProps.Login.popUptestDataState) {\r\n            this.setState({ popUptestDataState: this.props.Login.popUptestDataState });\r\n        }\r\n\r\n        if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\r\n            const userRoleControlRights = [];\r\n            if (this.props.Login.userRoleControlRights) {\r\n                this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item =>\r\n                    userRoleControlRights.push(item.ncontrolcode))\r\n            }\r\n            const specBasedTestPackage = this.props.Login.userRoleControlRights &&\r\n                this.props.Login.userRoleControlRights[formCode.TESTPACKAGE] !== undefined ? true : false\r\n\r\n            const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode)\r\n\r\n            const cancelId = controlMap.has(\"CancelTest\") ? controlMap.get(\"CancelTest\").ncontrolcode : -1;\r\n            const preRegisterId = controlMap.has(\"AddPreregister\") ? controlMap.get(\"AddPreregister\").ncontrolcode : -1;\r\n            const registerId = controlMap.has(\"RegisterAccept\") ? controlMap.get(\"RegisterAccept\").ncontrolcode : -1;\r\n            const editSampleId = controlMap.has(\"EditSample\") ? controlMap.get(\"EditSample\").ncontrolcode : -1;\r\n            const quarantineId = controlMap.has(\"RegisterQuarantine\") ? controlMap.get(\"RegisterQuarantine\").ncontrolcode : -1;\r\n            const addTestId = controlMap.has(\"AddNewTest\") ? controlMap.get(\"AddNewTest\").ncontrolcode : -1;\r\n            const printBarcodeId = controlMap.has(\"PrintBarcode\") ? controlMap.get(\"PrintBarcode\").ncontrolcode : -1;\r\n            const cancelSampleId = controlMap.has(\"CancelReject\") ? controlMap.get(\"CancelReject\").ncontrolcode : -1;\r\n            const addSubSampleId = controlMap.has(\"AddSubSample\") ? controlMap.get(\"AddSubSample\").ncontrolcode : -1;\r\n            const editSubSampleId = controlMap.has(\"EditSubSample\") ? controlMap.get(\"EditSubSample\").ncontrolcode : -1;\r\n            const cancelSubSampleId = controlMap.has(\"CancelSubSample\") ? controlMap.get(\"CancelSubSample\").ncontrolcode : -1;\r\n            const sampleBarcodeId = controlMap.has(\"SamplePrintBarcode\") ? controlMap.get(\"SamplePrintBarcode\").ncontrolcode : -1;\r\n            const subSampleBarcodeId = controlMap.has(\"SubSamplePrintBarcode\") ? controlMap.get(\"SubSamplePrintBarcode\").ncontrolcode : -1;\r\n            const CancelExternalOrderSampleId = controlMap.has(\"CancelExternalOrderSample\") ? controlMap.get(\"CancelExternalOrderSample\").ncontrolcode : -1;\r\n            const SampleImportId = controlMap.has(\"ImportSample\") ? controlMap.get(\"ImportSample\").ncontrolcode : -1;\r\n            const SampleCountId = controlMap.has(\"SampleCount\") ? controlMap.get(\"SampleCount\").ncontrolcode : -1;\r\n            const outsourceId = controlMap.has(\"Outsource\") ? controlMap.get(\"Outsource\").ncontrolcode : -1;\r\n\r\n            const exportTemplateId = controlMap.has(\"Export Template\") ? controlMap.get(\"Export Template\").ncontrolcode : -1;\r\n            const importTemplateId = controlMap.has(\"Import Template\") ? controlMap.get(\"Import Template\").ncontrolcode : -1;\r\n            const adhocTestId = controlMap.has(\"AdhocTest\") ? controlMap.get(\"AdhocTest\").ncontrolcode : -1;\r\n            const generateBarcodeId = controlMap.has(\"GenerateBarcode\") ?  controlMap.get(\"GenerateBarcode\").ncontrolcode : -1;\r\n\r\n            this.setState({\r\n                userRoleControlRights, controlMap, cancelId,\r\n                preRegisterId, registerId, editSampleId, quarantineId, addTestId, printBarcodeId,\r\n                cancelSampleId, addSubSampleId, editSubSampleId, cancelSubSampleId, specBasedTestPackage, sampleBarcodeId, subSampleBarcodeId\r\n                , CancelExternalOrderSampleId, SampleImportId, SampleCountId, exportTemplateId, importTemplateId, outsourceId,adhocTestId, generateBarcodeId\r\n            });\r\n\r\n        }\r\n        let activeTabIndex = this.state.activeTabIndex || undefined;\r\n        let activeTabId = this.state.activeTabId || undefined;\r\n\r\n\r\n        // console.log(\"this.props.Login.masterData.selectedSample:\", this.props.Login.masterData.selectedSample);\r\n\r\n        if (this.props.Login.activeTabIndex !== previousProps.Login.activeTabIndex || this.props.Login.masterData !== previousProps.Login.masterData) {\r\n\r\n\r\n            let { skip, take, testskip, testtake, subsampleskip, subsampletake, testCommentDataState,\r\n                resultDataState, sampleGridDataState, popUptestDataState, DynamicSampleColumns, DynamicSubSampleColumns,\r\n                DynamicTestColumns, DynamicGridItem, DynamicGridMoreField, SingleItem, testMoreField, testListColumns,\r\n                SubSampleDynamicGridItem, SubSampleDynamicGridMoreField, SubSampleSingleItem, sampleSearchField, subsampleSearchField,\r\n                testSearchField, testAttachmentDataState, sampleCommentDataState,\r\n                sampledateconstraints, subsampledateconstraints, activeTabIndex,\r\n                activeTabId, sampleCombinationUnique, subsampleCombinationUnique,\r\n                addedOrderSampleList, sampleexportfields, subsampleexportfields } = this.state\r\n\r\n            addedOrderSampleList = [];\r\n            // if(this.props.Login.masterData.orders !==  previousProps.Login.masterData.orders)\r\n            // {\r\n            //     orders = this.props.Login.masterData.orders;\r\n            // }\r\n\r\n\r\n            if (this.props.Login.activeTabIndex !== previousProps.Login.activeTabIndex) {\r\n                activeTabIndex = this.props.Login.activeTabIndex;\r\n                activeTabId = this.props.Login.activeTabId;\r\n            }\r\n\r\n            if (this.props.Login.masterData.DynamicDesign && this.props.Login.masterData.DynamicDesign !== previousProps.Login.masterData.DynamicDesign) {\r\n                const dynamicColumn = JSON.parse(this.props.Login.masterData.DynamicDesign.jsondata.value)\r\n                DynamicSampleColumns = dynamicColumn.samplelistitem ? dynamicColumn.samplelistitem : [];\r\n                DynamicSubSampleColumns = dynamicColumn.subsamplelistitem ? dynamicColumn.subsamplelistitem : [];\r\n                DynamicTestColumns = dynamicColumn.testlistitem ? dynamicColumn.testlistitem : []\r\n                DynamicGridItem = dynamicColumn.samplegriditem ? dynamicColumn.samplegriditem : [];\r\n                DynamicGridMoreField = dynamicColumn.samplegridmoreitem ? dynamicColumn.samplegridmoreitem : [];\r\n                SingleItem = dynamicColumn.sampledisplayfields ? dynamicColumn.sampledisplayfields : [];\r\n                SubSampleDynamicGridItem = dynamicColumn.subsamplegriditem ? dynamicColumn.subsamplegriditem : [];\r\n                SubSampleDynamicGridMoreField = dynamicColumn.subsamplegridmoreitem ? dynamicColumn.subsamplegridmoreitem : [];\r\n                SubSampleSingleItem = dynamicColumn.subsampledisplayfields ? dynamicColumn.subsampledisplayfields : [];\r\n                testMoreField = dynamicColumn.testListFields.testlistmoreitems ? dynamicColumn.testListFields.testlistmoreitems : [];\r\n                testListColumns = dynamicColumn.testListFields.testlistitem ? dynamicColumn.testListFields.testlistitem : [];\r\n                sampleSearchField = dynamicColumn.samplesearchfields ? dynamicColumn.samplesearchfields : [];\r\n                subsampleSearchField = dynamicColumn.subsamplesearchfields ? dynamicColumn.subsamplesearchfields : [];\r\n                testSearchField = dynamicColumn.testListFields.testsearchfields ? dynamicColumn.testListFields.testsearchfields : [];\r\n                sampledateconstraints = dynamicColumn.sampledateconstraints || [];\r\n                subsampledateconstraints = dynamicColumn.subsampledateconstraints || [];\r\n                sampleCombinationUnique = dynamicColumn.samplecombinationunique || [];\r\n                subsampleCombinationUnique = dynamicColumn.subsamplecombinationunique || [];\r\n                sampleexportfields = dynamicColumn.sampleExportFields || [];\r\n                subsampleexportfields = dynamicColumn.subSampleExportFields || [];\r\n\r\n                // specBasedComponent = true;\r\n\r\n                this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nneedsubsample &&\r\n                    this.props.Login.masterData.RegistrationGetSample.length > 0 &&\r\n                    (this.props.Login.masterData.RegistrationGetSample[0].ncomponentrequired === transactionStatus.YES) &&\r\n                    DynamicSubSampleColumns.push({\r\n                        1: { 'en-US': 'Specimen', 'ru-RU': 'Образец', 'tg-TG': 'Намуна' },\r\n                        2: \"scomponentname\"\r\n                    }\r\n\r\n                    );\r\n                if (this.props.Login.masterData.RealSampleTypeValue &&\r\n                    this.props.Login.masterData.RealSampleTypeValue.nsampletypecode === SampleType.CLINICALTYPE) {\r\n                    DynamicSubSampleColumns.push(\r\n                        {\r\n                            1: { 'en-US': 'Order Type', 'ru-RU': 'Тип заказа', 'tg-TG': 'Навъи фармоиш' },\r\n                            2: \"sordertypename\"\r\n                        }\r\n                    );\r\n                }\r\n            }\r\n\r\n            // DynamicSubSampleColumns.push({\r\n            // \"1\":{`${this.props.Login.userInfo.slanguagetypecode}`}= this.props.intl.formatMessage({ id: \"IDS_COMPONENT\" }),\r\n            // \"2\":\"scomponentname\"});\r\n            // let objCompoent = {1:`${this.props.Login.userInfo.slanguagetypecode}`= this.props.intl.formatMessage({ id: \"IDS_COMPONENT\" }),\r\n            //                     2:\"scomponentname\"\r\n\r\n\r\n\r\n            let showSample = this.props.Login.showSample === this.state.showTest || this.state.showSample\r\n            let showTest = showSample ? false : true\r\n            let stateSampleType = this.state.stateSampleType\r\n            let stateRegistrationType = this.state.stateRegistrationType\r\n            let stateRegistrationSubType = this.state.stateRegistrationSubType\r\n            let stateFilterStatus = this.state.stateFilterStatus\r\n            let stateDynamicDesign = this.state.stateDynamicDesign\r\n            let stateApprovalConfigVersion = this.state.stateApprovalConfigVersion\r\n\r\n            if (this.props.Login.masterData.SampleType !== previousProps.Login.masterData.SampleType) {\r\n\r\n                const sampleTypeMap = constructOptionList(this.props.Login.masterData.SampleType || [], \"nsampletypecode\",\r\n                    \"ssampletypename\", \"nsorter\", \"ascending\", false);\r\n                stateSampleType = sampleTypeMap.get(\"OptionList\")\r\n\r\n            }\r\n\r\n            if (this.props.Login.masterData.RegistrationType !== previousProps.Login.masterData.RegistrationType) {\r\n\r\n                const registrationTypeMap = constructOptionList(this.props.Login.masterData.RegistrationType || [], \"nregtypecode\",\r\n                    \"sregtypename\", \"nsorter\", \"ascending\", false);\r\n\r\n                stateRegistrationType = registrationTypeMap.get(\"OptionList\")\r\n            }\r\n\r\n            if (this.props.Login.masterData.RegistrationSubType !== previousProps.Login.masterData.RegistrationSubType) {\r\n                const registrationSubTypeMap = constructOptionList(this.props.Login.masterData.RegistrationSubType || [], \"nregsubtypecode\",\r\n                    \"sregsubtypename\", \"nsorter\", \"ascending\", false);\r\n\r\n                stateRegistrationSubType = registrationSubTypeMap.get(\"OptionList\")\r\n\r\n            }\r\n\r\n            if (this.props.Login.masterData.FilterStatus !== previousProps.Login.masterData.FilterStatus) {\r\n\r\n\r\n                const filterStatusMap = constructOptionList(this.props.Login.masterData.FilterStatus || [], \"ntransactionstatus\",\r\n                    \"stransdisplaystatus\", \"nsorter\", \"ascending\", false);\r\n\r\n                stateFilterStatus = filterStatusMap.get(\"OptionList\")\r\n            }\r\n            if (this.props.Login.masterData.ApprovalConfigVersion !== previousProps.Login.masterData.ApprovalConfigVersion) {\r\n                const DesignTemplateMappingMap = constructOptionList(this.props.Login.masterData.ApprovalConfigVersion || [], \"napproveconfversioncode\",\r\n                    \"sversionname\", undefined, undefined, false);\r\n\r\n                stateApprovalConfigVersion = DesignTemplateMappingMap.get(\"OptionList\")\r\n            }\r\n\r\n            if (this.props.Login.masterData.DesignTemplateMapping !== previousProps.Login.masterData.DesignTemplateMapping) {\r\n\r\n\r\n                const DesignTemplateMappingMap = constructOptionList(this.props.Login.masterData.DesignTemplateMapping || [], \"ndesigntemplatemappingcode\",\r\n                    \"sregtemplatename\", undefined, undefined, false);\r\n\r\n                stateDynamicDesign = DesignTemplateMappingMap.get(\"OptionList\")\r\n            }\r\n\r\n\r\n            // const stateSampleType = sampleTypeMap.get(\"OptionList\");\r\n            skip = this.props.Login.skip === undefined ? skip : this.props.Login.skip\r\n            take = this.props.Login.take || take\r\n            testskip = this.props.Login.testskip === undefined ? testskip : this.props.Login.testskip\r\n            testtake = this.props.Login.testtake || testtake\r\n            subsampleskip = this.props.Login.subsampleskip === undefined ? subsampleskip : this.props.Login.subsampleskip\r\n            subsampletake = this.props.Login.subsampletake || subsampletake\r\n\r\n            if (this.props.Login.resultDataState && this.props.Login.resultDataState !== previousProps.Login.resultDataState) {\r\n                resultDataState = this.props.Login.resultDataState;\r\n            }\r\n            if (this.props.Login.testCommentDataState && this.props.Login.testCommentDataState !== previousProps.Login.testCommentDataState) {\r\n                testCommentDataState = this.props.Login.testCommentDataState;\r\n            }\r\n            if (this.props.Login.testAttachmentDataState && this.props.Login.testAttachmentDataState !== previousProps.Login.testAttachmentDataState) {\r\n                testAttachmentDataState = this.props.Login.testAttachmentDataState;\r\n            }\r\n            if (this.props.Login.sampleGridDataState && this.props.Login.sampleGridDataState !== previousProps.Login.sampleGridDataState) {\r\n                sampleGridDataState = this.props.Login.sampleGridDataState;\r\n            }\r\n            if (this.props.Login.popUptestDataState && this.props.Login.popUptestDataState !== previousProps.Login.popUptestDataState) {\r\n                popUptestDataState = this.props.Login.popUptestDataState;\r\n            }\r\n\r\n            const testGetParam = {\r\n                masterData: this.props.Login.masterData,\r\n                userinfo: this.props.Login.userInfo,\r\n                ntransactionstatus: String(this.props.Login.masterData.RealFilterStatusValue && this.props.Login.masterData.RealFilterStatusValue.ntransactionstatus),\r\n                nsampletypecode: this.props.Login.masterData.RealSampleTypeValue && this.props.Login.masterData.RealSampleTypeValue.nsampletypecode,\r\n                nregtypecode: this.props.Login.masterData.RealRegTypeValue && this.props.Login.masterData.RealRegTypeValue.nregtypecode,\r\n                nregsubtypecode: this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode,\r\n                activeTestTab: this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\",\r\n                activeSampleTab: this.props.Login.activeTestTab || \"IDS_SAMPLEATTACHMENTS\",\r\n                activeSubSampleTab: this.props.Login.activeTestTab || \"IDS_SUBSAMPLEATTACHMENTS\",\r\n                npreregno: this.props.Login.masterData.selectedSample &&\r\n                    this.props.Login.masterData.selectedSample.map(sample => sample.npreregno).join(\",\"),\r\n                sfromdate: this.props.Login.masterData.RealFromDate,\r\n                stodate: this.props.Login.masterData.RealToDate,\r\n                //searchTestRef: this.searchTestRef,\r\n                // testskip: testskip,\r\n                //subsampleskip: subsampleskip,\r\n                // resultDataState: resultDataState,\r\n                ndesigntemplatemappingcode: this.props.Login.masterData.RealDesignTemplateMappingValue\r\n                    && this.props.Login.masterData.RealDesignTemplateMappingValue.ndesigntemplatemappingcode,\r\n                nneedtemplatebasedflow: this.props.Login.masterData.RegSubTypeValue\r\n                    && this.props.Login.masterData.RegSubTypeValue.nneedtemplatebasedflow,\r\n                nneedsubsample: this.props.Login.masterData.RegSubTypeValue\r\n                    && this.props.Login.masterData.RegSubTypeValue.nneedsubsample,\r\n                //activeTabIndex: this.state.enableAutoClick ? 1 : this.state.activeTabIndex ? this.state.activeTabIndex : undefined\r\n            }\r\n            const testChildGetParam = {\r\n                masterData: this.props.Login.masterData,\r\n                userinfo: this.props.Login.userInfo,\r\n                ntransactionstatus: String(this.props.Login.masterData.RealFilterStatusValue && this.props.Login.masterData.RealFilterStatusValue.ntransactionstatus),\r\n                nsampletypecode: this.props.Login.masterData.RealSampleTypeValue && this.props.Login.masterData.RealSampleTypeValue.nsampletypecode,\r\n                nregtypecode: this.props.Login.masterData.RealRegTypeValue && this.props.Login.masterData.RealRegTypeValue.nregtypecode,\r\n                nregsubtypecode: this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode,\r\n                activeTestTab: this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\",\r\n                activeSampleTab: this.props.Login.activeTestTab || \"IDS_SAMPLEATTACHMENTS\",\r\n                activeSubSampleTab: this.props.Login.activeTestTab || \"IDS_SUBSAMPLEATTACHMENTS\",\r\n                npreregno: this.props.Login.masterData.selectedSample && this.props.Login.masterData.selectedSample.map(sample => sample.npreregno).join(\",\"),\r\n                ntransactionsamplecode: this.props.Login.masterData.selectedSubSample &&\r\n                    this.props.Login.masterData.selectedSubSample.map(sample => sample.ntransactionsamplecode).join(\",\"),\r\n                sfromdate: this.props.Login.masterData.RealFromDate,\r\n                stodate: this.props.Login.masterData.RealToDate,\r\n                // resultDataState: resultDataState,\r\n                // testCommentDataState: testCommentDataState,\r\n                ndesigntemplatemappingcode: this.props.Login.masterData.RealDesignTemplateMappingValue && this.props.Login.masterData.RealDesignTemplateMappingValue.ndesigntemplatemappingcode,\r\n                nneedtemplatebasedflow: this.props.Login.masterData.RegSubTypeValue\r\n                    && this.props.Login.masterData.RegSubTypeValue.nneedtemplatebasedflow,\r\n                activeTabIndex: this.state.enableAutoClick ? 1 : this.state.activeTabIndex ? this.state.activeTabIndex : undefined,\r\n\r\n            }\r\n\r\n            const subSampleGetParam = {\r\n                masterData: this.props.Login.masterData,\r\n                ntransactionstatus: String(this.props.Login.masterData.RealFilterStatusValue && this.props.Login.masterData.RealFilterStatusValue.ntransactionstatus),\r\n                userinfo: this.props.Login.userInfo,\r\n                nsampletypecode: this.props.Login.masterData.RealSampleTypeValue && this.props.Login.masterData.RealSampleTypeValue.nsampletypecode,\r\n                nregtypecode: this.props.Login.masterData.RealRegTypeValue && this.props.Login.masterData.RealRegTypeValue.nregtypecode,\r\n                nregsubtypecode: this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode,\r\n                activeTestTab: this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\",\r\n                activeSampleTab: this.props.Login.activeTestTab || \"IDS_SAMPLEATTACHMENTS\",\r\n                activeSubSampleTab: this.props.Login.activeTestTab || \"IDS_SUBSAMPLEATTACHMENTS\",\r\n                // testskip: testskip,\r\n                // subsampleskip: subsampleskip,\r\n                // searchTestRef: this.searchTestRef,\r\n                //resultDataState: resultDataState,\r\n                // testCommentDataState: testCommentDataState,\r\n                //sampleGridDataState: sampleGridDataState,\r\n                ndesigntemplatemappingcode: this.props.Login.masterData.RealDesignTemplateMappingValue\r\n                    && this.props.Login.masterData.RealDesignTemplateMappingValue.ndesigntemplatemappingcode,\r\n                nneedtemplatebasedflow: this.props.Login.masterData.RegSubTypeValue\r\n                    && this.props.Login.masterData.RegSubTypeValue.nneedtemplatebasedflow,\r\n                nneedsubsample: this.props.Login.masterData.RegSubTypeValue\r\n                    && this.props.Login.masterData.RegSubTypeValue.nneedsubsample\r\n            }\r\n\r\n\r\n            const filterSampleParam = {\r\n                inputListName: \"RegistrationGetSample\",\r\n                selectedObject: \"selectedSample\",\r\n                primaryKeyField: \"npreregno\",\r\n                fetchUrl: \"registration/getRegistrationSubSample\",\r\n\r\n                // isSortable: true,\r\n                // sortValue: 'ntransactionsamplecode',\r\n                // sortList: ['RegistrationGetSubSample'],\r\n                isMultiSort: true,\r\n                multiSortData: [{ pkey: 'ntransactionsamplecode', list: 'RegistrationGetSubSample' },\r\n                { pkey: 'ntransactiontestcode', list: 'RegistrationGetTest' }],\r\n\r\n                //ALPD-1518\r\n                skip: 0,\r\n                take: this.props.Login.settings && parseInt(this.props.Login.settings[3]),\r\n                subsampleskip: 0,\r\n                subsampletake: this.props.Login.settings && this.props.Login.settings[12] ? this.props.Login.settings[12] : 10,\r\n                testskip: 0,\r\n                testtake: this.props.Login.settings && this.props.Login.settings[12] ? this.props.Login.settings[12] : 10,\r\n\r\n                //childRefs: [{ ref: this.searchTestRef, childFilteredListName: \"searchedSubSample\" }],\r\n                fecthInputObject: {\r\n                    //nflag: 2,\r\n                    // ntype: 2,\r\n                    masterData: this.props.Login.masterData,\r\n                    ntransactionstatus: String(this.props.Login.masterData.RealFilterStatusValue && this.props.Login.masterData.RealFilterStatusValue.ntransactionstatus),\r\n                    userinfo: this.props.Login.userInfo,\r\n                    nsampletypecode: this.props.Login.masterData.RealSampleTypeValue && this.props.Login.masterData.RealSampleTypeValue.nsampletypecode,\r\n                    nregtypecode: this.props.Login.masterData.RealRegTypeValue && this.props.Login.masterData.RealRegTypeValue.nregtypecode,\r\n                    nregsubtypecode: this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode,\r\n                    activeTestTab: this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\",\r\n                    activeSampleTab: this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\",\r\n                    activeSubSampleTab: this.props.Login.activeSubSampleTab || \"IDS_SUBSAMPLEATTACHMENTS\",\r\n                    ndesigntemplatemappingcode: this.props.Login.masterData.RealDesignTemplateMappingValue\r\n                        && this.props.Login.masterData.RealDesignTemplateMappingValue.ndesigntemplatemappingcode,\r\n                    nneedtemplatebasedflow: this.props.Login.masterData.RegSubTypeValue\r\n                        && this.props.Login.masterData.RegSubTypeValue.nneedtemplatebasedflow,\r\n                    nneedsubsample: this.props.Login.masterData.RegSubTypeValue\r\n                        && this.props.Login.masterData.RegSubTypeValue.nneedsubsample,\r\n                   // checkBoxOperation: 3,\r\n                    checkBoxOperation: checkBoxOperation.SINGLESELECT,\r\n\r\n\r\n                },\r\n                masterData: this.props.Login.masterData,\r\n                searchFieldList: sampleSearchField,\r\n                changeList: [\r\n                    \"RegistrationGetSubSample\", \"RegistrationGetTest\", \"RegistrationTestAttachment\",\r\n                    \"RegistrationTestComment\", \"RegistrationAttachment\", \"selectedSample\", \"selectedSubSample\",\r\n                    \"selectedTest\", \"RegistrationParameter\"\r\n                ]\r\n            };\r\n\r\n            const filterSubSampleParam = {\r\n                inputListName: \"RegistrationGetSubSample\",\r\n                selectedObject: \"selectedSubSample\",\r\n                primaryKeyField: \"ntransactionsamplecode\",\r\n                fetchUrl: \"registration/getRegistrationTest\",\r\n\r\n                skip: this.state.skip,\r\n                take: this.props.Login.settings && parseInt(this.props.Login.settings[3]),\r\n                subsampleskip: 0,\r\n                subsampletake: this.props.Login.settings && this.props.Login.settings[12] ? this.props.Login.settings[12] : 10,\r\n                testskip: 0,\r\n                testtake: this.props.Login.settings && this.props.Login.settings[12] ? this.props.Login.settings[12] : 10,\r\n\r\n                isMultiSort: true,\r\n                multiSortData: [{ pkey: 'ntransactiontestcode', list: 'RegistrationGetTest' }],\r\n                //childRefs: [{ ref: this.searchTestRef, childFilteredListName: \"searchedSubSample\" }],\r\n                fecthInputObject: {\r\n                    //nflag: 2,\r\n                    // ntype: 2,\r\n                    masterData: this.props.Login.masterData,\r\n                    //  ntransactionstatus: String(this.props.Login.masterData.RealFilterStatusValue && this.props.Login.masterData.RealFilterStatusValue.ntransactionstatus),\r\n                    userinfo: this.props.Login.userInfo,\r\n                    nsampletypecode: this.props.Login.masterData.RealSampleTypeValue && this.props.Login.masterData.RealSampleTypeValue.nsampletypecode,\r\n                    nregtypecode: this.props.Login.masterData.RealRegTypeValue && this.props.Login.masterData.RealRegTypeValue.nregtypecode,\r\n                    nregsubtypecode: this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode,\r\n                    activeTestTab: this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\",\r\n                    activeSampleTab: this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\",\r\n                    activeSubSampleTab: this.props.Login.activeSubSampleTab || \"IDS_SUBSAMPLEATTACHMENTS\",\r\n                    ndesigntemplatemappingcode: this.props.Login.masterData.RealDesignTemplateMappingValue\r\n                        && this.props.Login.masterData.RealDesignTemplateMappingValue.ndesigntemplatemappingcode,\r\n                    nneedtemplatebasedflow: this.props.Login.masterData.RegSubTypeValue\r\n                        && this.props.Login.masterData.RegSubTypeValue.nneedtemplatebasedflow,\r\n                    nneedsubsample: this.props.Login.masterData.RegSubTypeValue\r\n                        && this.props.Login.masterData.RegSubTypeValue.nneedsubsample,\r\n                   // checkBoxOperation: 3,\r\n                    checkBoxOperation: checkBoxOperation.SINGLESELECT,\r\n                    npreregno: this.props.Login.masterData.selectedSample &&\r\n                        this.props.Login.masterData.selectedSample.map(x => x.npreregno).join(\",\")\r\n\r\n                },\r\n                masterData: this.props.Login.masterData,\r\n                searchFieldList: subsampleSearchField,\r\n                changeList: [\r\n                    \"RegistrationGetTest\", \"RegistrationTestAttachment\",\r\n                    \"RegistrationTestComment\", \"RegistrationAttachment\",\r\n                    \"selectedSubSample\", \"selectedTest\", \"RegistrationParameter\"\r\n                ]\r\n            };\r\n\r\n            const filterTestParam = {\r\n                inputListName: \"RegistrationGetTest\",\r\n                selectedObject: \"selectedTest\",\r\n                primaryKeyField: \"ntransactiontestcode\",\r\n                fetchUrl: this.getActiveTestURL(),\r\n                skip: this.state.skip,\r\n                take: this.props.Login.settings && parseInt(this.props.Login.settings[3]),\r\n                subsampleskip: this.state.subsampleskip,\r\n                subsampletake: this.props.Login.settings && this.props.Login.settings[12] ? this.props.Login.settings[12] : 10,\r\n                testskip: 0,\r\n                testtake: this.props.Login.settings && this.props.Login.settings[12] ? this.props.Login.settings[12] : 10,\r\n\r\n                fecthInputObject: {\r\n                    ntransactiontestcode: this.props.Login.masterData && this.props.Login.masterData.selectedTest && this.props.Login.masterData.selectedTest ? this.props.Login.masterData.selectedTest.map(test => test.ntransactiontestcode).join(\",\") : \"-1\",\r\n                    userinfo: this.props.Login.userInfo,\r\n                    ndesigntemplatemappingcode: this.props.Login.masterData.RealDesignTemplateMappingValue\r\n                        && this.props.Login.masterData.RealDesignTemplateMappingValue.ndesigntemplatemappingcode,\r\n                    nneedtemplatebasedflow: this.props.Login.masterData.RegSubTypeValue\r\n                        && this.props.Login.masterData.RegSubTypeValue.nneedtemplatebasedflow,\r\n                    nneedsubsample: this.props.Login.masterData.RegSubTypeValue\r\n                        && this.props.Login.masterData.RegSubTypeValue.nneedsubsample,\r\n                   // checkBoxOperation: 3,\r\n                    checkBoxOperation: checkBoxOperation.SINGLESELECT,\r\n                    activeTestTab: this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\",\r\n                    activeSampleTab: this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\",\r\n                    activeSubSampleTab: this.props.Login.activeSubSampleTab || \"IDS_SUBSAMPLEATTACHMENTS\",\r\n                },\r\n                masterData: this.props.Login.masterData,\r\n                searchFieldList: testSearchField,\r\n                changeList: [\"RegistrationTestComment\", \"RegistrationParameter\"],\r\n                childTabsKey: [\"RegistrationParameter\", \"RegistrationTestComment\", \"RegistrationTestAttachment\", \"ApprovalParameter\"]\r\n\r\n            }\r\n\r\n            // let postParamList = [\r\n            //     {\r\n            //         filteredListName: \"searchedSample\",\r\n            //         clearFilter: \"no\",\r\n            //         searchRef: this.searchSampleRef,\r\n            //         primaryKeyField: \"npreregno\",\r\n            //         fetchUrl: \"registration/getRegistrationSubSample\",\r\n            //         fecthInputObject: subSampleGetParam,\r\n            //        // childRefs: [{ ref: this.searchTestRef, childFilteredListName: \"searchedSubSample\" }],\r\n            //         selectedObject: \"selectedSample\",\r\n            //         inputListName: \"AP_SAMPLE\",\r\n            //         updatedListname: \"selectedSample\",\r\n            //         unchangeList: [\"realSampleTypeValue\", \"SampleTypeValue\", \"realRegTypeValue\", \"RegTypeValue\", \"realRegSubTypeValue\", \"RegSubTypeValue\",\r\n            //             \"realApprovalVersionValue\", \"ApprovalVersionValue\", \"realFilterStatusValue\", \"FilterStatusValue\", \"fromDate\", \"toDate\",\r\n            //             \"UserSectionValue\", \"SampleType\", \"RegType\", \"RegSubType\", \"ApprovalVersion\", \"JobStatus\", \"JobStatusValue\", \"FilterStatus\"]\r\n            //     }\r\n            //     , {\r\n            //         filteredListName: \"searchedTest\",\r\n            //         updatedListname: \"selectedTest\",\r\n            //         clearFilter: \"no\",\r\n            //         searchRef: this.searchTestRef,\r\n            //         primaryKeyField: \"ntransactiontestcode\",\r\n            //         fetchUrl: \"approval/getApprovalTest\",\r\n            //         fecthInputObject: testGetParam,\r\n            //         selectedObject: \"selectedTest\",\r\n            //         inputListName: \"RegistrationGetTest\",\r\n            //         unchangeList: [\"realSampleTypeValue\", \"SampleTypeValue\", \"realRegTypeValue\", \"RegTypeValue\", \"realRegSubTypeValue\", \"RegSubTypeValue\",\r\n            //             \"realApprovalVersionValue\", \"ApprovalVersionValue\", \"realFilterStatusValue\", \"FilterStatusValue\", \"fromDate\", \"toDate\",\r\n            //             \"UserSectionValue\", \"SampleType\", \"RegType\", \"RegSubType\", \"ApprovalVersion\", \"JobStatus\", \"JobStatusValue\", \"FilterStatus\"]\r\n            //     }\r\n            // ];\r\n\r\n\r\n            const editRegParam = {\r\n                nfilterstatus: String(this.props.Login.masterData.RealFilterStatusValue && this.props.Login.masterData.RealFilterStatusValue.ntransactionstatus),\r\n                userinfo: this.props.Login.userInfo,\r\n                nsampletypecode: this.props.Login.masterData.RealSampleTypeValue && this.props.Login.masterData.RealSampleTypeValue.nsampletypecode,\r\n                nregtypecode: this.props.Login.masterData.RealRegTypeValue && this.props.Login.masterData.RealRegTypeValue.nregtypecode,\r\n                nregsubtypecode: this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode,\r\n                sfromdate: this.props.Login.masterData.RealFromDate,\r\n                stodate: this.props.Login.masterData.RealToDate,\r\n                // ncontrolCode: this.state.editSampleId,\r\n                ndesigntemplatemappingcode: this.props.Login.masterData.RealDesignTemplateMappingValue\r\n                    && this.props.Login.masterData.RealDesignTemplateMappingValue.ndesigntemplatemappingcode,\r\n                nneedtemplatebasedflow: this.props.Login.masterData.RegSubTypeValue\r\n                    && this.props.Login.masterData.RegSubTypeValue.nneedtemplatebasedflow,\r\n                nneedsubsample: this.props.Login.masterData.RegSubTypeValue &&\r\n                    this.props.Login.masterData.RegSubTypeValue.nneedsubsample, //=== true\r\n                //? transactionStatus.YES:transactionStatus.NO :transactionStatus.NO,\r\n\r\n\r\n                activeTestTab: this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\",\r\n                activeSampleTab: this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\",\r\n                activeSubSampleTab: this.props.Login.activeSubSampleTab || \"IDS_SUBSAMPLEATTACHMENTS\",\r\n               // checkBoxOperation: 3\r\n                checkBoxOperation: checkBoxOperation.SINGLESELECT\r\n\r\n            }\r\n\r\n            const editSubSampleRegParam = {\r\n                nfilterstatus: String(this.props.Login.masterData.RealFilterStatusValue && this.props.Login.masterData.RealFilterStatusValue.ntransactionstatus),\r\n                userinfo: this.props.Login.userInfo,\r\n                nsampletypecode: this.props.Login.masterData.RealSampleTypeValue && this.props.Login.masterData.RealSampleTypeValue.nsampletypecode,\r\n                nregtypecode: this.props.Login.masterData.RealRegTypeValue && this.props.Login.masterData.RealRegTypeValue.nregtypecode,\r\n                nregsubtypecode: this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode,\r\n                sfromdate: this.props.Login.masterData.RealFromDate,\r\n                stodate: this.props.Login.masterData.RealToDate,\r\n                //ncontrolCode: this.state.editSampleId,\r\n                ndesigntemplatemappingcode: this.props.Login.masterData.RealDesignTemplateMappingValue\r\n                    && this.props.Login.masterData.RealDesignTemplateMappingValue.ndesigntemplatemappingcode,\r\n                nneedtemplatebasedflow: this.props.Login.masterData.RegSubTypeValue\r\n                    && this.props.Login.masterData.RegSubTypeValue.nneedtemplatebasedflow,\r\n                nneedsubsample: this.props.Login.masterData.RegSubTypeValue\r\n                    && this.props.Login.masterData.RegSubTypeValue.nneedsubsample,\r\n\r\n                activeTestTab: this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\",\r\n                activeSampleTab: this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\",\r\n                activeSubSampleTab: this.props.Login.activeSubSampleTab || \"IDS_SUBSAMPLEATTACHMENTS\",\r\n            }\r\n\r\n            const addTestParam = {\r\n                selectedSample: this.props.Login.masterData.selectedSample,\r\n                selectedSubSample: this.props.Login.masterData.selectedSubSample,\r\n                // skip: skip, take: (skip + take),\r\n                userinfo: this.props.Login.userInfo,\r\n                sampleList: this.props.Login.masterData.RegistrationGetSample,\r\n                subsampleList: this.props.Login.masterData.RegistrationGetSubSample,\r\n                snspecsampletypecode: this.props.Login.masterData.selectedSubSample &&\r\n                    [...new Set(this.props.Login.masterData.selectedSubSample.map(x => x.nspecsampletypecode))].join(\",\")\r\n            };\r\n\r\n            const breadCrumbobj = convertDateValuetoString(this.props.Login.masterData.RealFromDate, this.props.Login.masterData.RealToDate, this.props.Login.userInfo)\r\n            //  if (this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue.nneedtemplatebasedflow) {\r\n            this.breadCrumbData = [\r\n                {\r\n                    \"label\": \"IDS_FROM\",\r\n                    \"value\": breadCrumbobj.breadCrumbFrom\r\n                }, {\r\n                    \"label\": \"IDS_TO\",\r\n                    \"value\": breadCrumbobj.breadCrumbto\r\n                },\r\n                // {\r\n                //     \"label\": \"IDS_SAMPLETYPE\",\r\n                //     \"value\": this.props.Login.masterData.RealSampleTypeValue \r\n                //     && this.props.Login.masterData.RealSampleTypeValue.ssampletypename\r\n                // }, \r\n                {\r\n                    \"label\": \"IDS_REGTYPE\",\r\n                    \"value\": this.props.Login.masterData.RealRegTypeValue\r\n                        && this.props.Login.masterData.RealRegTypeValue.sregtypename\r\n                }, {\r\n                    \"label\": \"IDS_REGSUBTYPE\",\r\n                    \"value\": this.props.Login.masterData.RealRegSubTypeValue\r\n                        && this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename\r\n                },\r\n                // {\r\n                //     \"label\": \"IDS_APPROVALCONFIGVERSION\",\r\n                //     \"value\": this.props.Login.masterData.RealApprovalConfigVersionValue \r\n                //     && this.props.Login.masterData.RealApprovalConfigVersionValue.sversionname\r\n                // },\r\n                // {\r\n                //     \"label\": \"IDS_DESIGNTEMPLATE\",\r\n                //     \"value\": this.props.Login.masterData.RealDesignTemplateMappingValue \r\n                //     && this.props.Login.masterData.RealDesignTemplateMappingValue.sregtemplatename\r\n                // },\r\n                {\r\n                    \"label\": \"IDS_SAMPLESTATUS\",\r\n                    \"value\": this.props.Login.masterData.RealFilterStatusValue\r\n                        && this.props.Login.masterData.RealFilterStatusValue.stransdisplaystatus\r\n                },\r\n            ]\r\n            // } else {\r\n            //     this.breadCrumbData = [\r\n            //         {\r\n            //             \"label\": \"IDS_FROM\",\r\n            //             \"value\": breadCrumbobj.breadCrumbFrom\r\n            //         }, {\r\n            //             \"label\": \"IDS_TO\",\r\n            //             \"value\": breadCrumbobj.breadCrumbto\r\n            //         }, {\r\n            //             \"label\": \"IDS_SAMPLETYPE\",\r\n            //             \"value\": this.props.Login.masterData.RealSampleTypeValue && this.props.Login.masterData.RealSampleTypeValue.ssampletypename\r\n            //         }, {\r\n            //             \"label\": \"IDS_REGTYPE\",\r\n            //             \"value\": this.props.Login.masterData.RealRegTypeValue && this.props.Login.masterData.RealRegTypeValue.sregtypename\r\n            //         }, {\r\n            //             \"label\": \"IDS_REGSUBTYPE\",\r\n            //             \"value\": this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename\r\n            //         },\r\n            //         {\r\n            //             \"label\": \"IDS_FILTERSTATUS\",\r\n            //             \"value\": this.props.Login.masterData.RealFilterStatusValue && this.props.Login.masterData.RealFilterStatusValue.stransdisplaystatus\r\n            //         }\r\n            //     ]\r\n            //  }\r\n\r\n            if (this.props.Login.masterData.approvedTreeData !== previousProps.Login.masterData.approvedTreeData) {\r\n                if (this.props.Login.masterData.approvedTreeData && this.props.Login.masterData.approvedTreeData !== undefined) {\r\n                    this.setState({\r\n                        treeData: this.props.Login.masterData.approvedTreeData\r\n                    });\r\n                }\r\n            }\r\n\r\n            this.setState({\r\n                DynamicSampleColumns, DynamicSubSampleColumns, DynamicTestColumns,\r\n                SingleItem, testMoreField,\r\n                DynamicGridItem, DynamicGridMoreField,\r\n                testListColumns, stateSampleType,\r\n                stateRegistrationType,\r\n                stateRegistrationSubType,\r\n                stateFilterStatus,\r\n                stateDynamicDesign,\r\n                stateApprovalConfigVersion,\r\n                popUptestDataState,\r\n                showSample, showTest, skip, take, testskip,\r\n                subsampleskip, subsampletake,\r\n                testtake, testCommentDataState, testAttachmentDataState,\r\n                resultDataState, sampleGridDataState,\r\n                SubSampleDynamicGridItem, SubSampleDynamicGridMoreField,\r\n                SubSampleSingleItem,\r\n                testGetParam, testChildGetParam, subSampleGetParam,\r\n                filterSampleParam, filterTestParam,\r\n                editRegParam, editSubSampleRegParam,\r\n                addTestParam, sampleSearchField, subsampleSearchField,\r\n                testSearchField, filterSubSampleParam, sampledateconstraints, subsampledateconstraints,\r\n                activeTabIndex, activeTabId, sampleCombinationUnique, subsampleCombinationUnique, addedOrderSampleList,\r\n                sampleexportfields, subsampleexportfields\r\n\r\n            })\r\n        }\r\n    }\r\n\r\n    handleEditDateChange = (dateName, dateValue) => {\r\n        const selectComponent = this.state.selectedRecord;\r\n        if (dateValue === null) {\r\n            dateValue = new Date();\r\n        }\r\n        selectComponent[dateName] = dateValue;\r\n        this.setState({ selectedRecord: selectComponent });\r\n    }\r\n\r\n    onNumericInputEditChange = (value, name) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if ((name !== \"nnoofcontainer\") && (value === 0 || value === 0.0)) {\r\n            selectedRecord[name] = '';\r\n            this.setState({ selectedRecord });\r\n        } else {\r\n            selectedRecord[name] = value;\r\n            this.setState({ selectedRecord });\r\n        }\r\n    }\r\n\r\n    // orderRecords = (CancelExternalOrderSampleId) => {\r\n\r\n    //     const updateInfo = {\r\n    //         typeName: DEFAULT_RETURN,\r\n    //         data: {\r\n    //             //screenData: { inputParam, masterData: this.props.Login.masterData },\r\n    //             openModal: true,\r\n    //             parentPopUpSize: 'xl',\r\n    //             screenName: \"External Sample\",\r\n    //             operation: 'Cancel',\r\n    //             ncontrolcode: CancelExternalOrderSampleId,\r\n    //             loadPrinter: false\r\n\r\n    //         }\r\n    //     }\r\n    //     this.props.updateStore(updateInfo);\r\n    // }\r\n\r\n    orderRecords = (CancelExternalOrderSampleId) => {\r\n\r\n        let inputData = {\r\n            userinfo: this.props.Login.userInfo,\r\n            ncontrolcode: CancelExternalOrderSampleId,\r\n            operation: 'Cancel',\r\n            loadPrinter: false,\r\n            openModal: true,\r\n            parentPopUpSize: 'xl',\r\n            screenName: \"External Sample\",\r\n            masterData: this.props.Login.masterData,\r\n            selectedRecord: this.state.selectedRecord\r\n        }\r\n        this.props.orderRecords(inputData);\r\n    }\r\n\r\n    cancelSampleRecords = (controlcode, skip, take) => {\r\n        let Map = {};\r\n        let sampleList = [];\r\n        if (this.props.Login.masterData.searchedSample !== undefined) {\r\n            //sampleList = getSameRecordFromTwoArrays(this.props.Login.masterData.searchedSample, this.props.Login.masterData.RegistrationGetSample.slice(skip, skip + take), \"npreregno\");\r\n            const list = this.props.Login.masterData.searchedSample ? this.props.Login.masterData.searchedSample\r\n                : this.props.Login.masterData.RegistrationGetSample;\r\n\r\n            sampleList = list ? list.slice(skip, skip + take) : [];\r\n        } else {\r\n            sampleList = this.props.Login.masterData.RegistrationGetSample && sortDataForDate(this.props.Login.masterData.RegistrationGetSample, 'dtransactiondate', 'npreregno').slice(skip, skip + take);\r\n        }\r\n        // let sampleList = this.props.Login.masterData.searchedSample || [...this.props.Login.masterData.RegistrationGetSample].splice(skip, skip + take);\r\n        // sampleList = sampleList.splice(skip, skip + take);\r\n        let cancelRejectSamplesList = getSameRecordFromTwoArrays(sampleList || [], this.props.Login.masterData.selectedSample, \"npreregno\");\r\n\r\n        if (cancelRejectSamplesList && cancelRejectSamplesList.length > 0) {\r\n            if (this.transValidation(this.props.Login.transactionValidation, controlcode, cancelRejectSamplesList)) {\r\n                //Map['ninsertpreregno']=dataitem.cancelSample.npreregno;\r\n                Map['ntransactionstatus'] = cancelRejectSamplesList &&\r\n                    cancelRejectSamplesList.map(transactionstatus => transactionstatus.ntransactionstatus).join(\",\");\r\n                //Map[\"ntransactiontestcode\"]=dataitem.ntransactiontestcode;\r\n                //Map[\"ninserttransactionsamplecode\"]=dataitem.ntransactionsamplecode\r\n                Map[\"userinfo\"] = this.props.Login.userInfo;\r\n                Map[\"ncontrolcode\"] = controlcode;\r\n                Map[\"nsampletypecode\"] = this.props.Login.masterData.RealSampleTypeValue.nsampletypecode;\r\n                Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\r\n                Map[\"nregsubtypecode\"] = this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode;\r\n                Map[\"nflag\"] = 2;\r\n                Map[\"ntype\"] = 3;\r\n                Map[\"ndesigntemplatemappingcode\"] = this.props.Login.masterData.RealDesignTemplateMappingValue\r\n                    && this.props.Login.masterData.RealDesignTemplateMappingValue.ndesigntemplatemappingcode;\r\n                Map[\"napproveconfversioncode\"] = this.props.Login.masterData.RealApprovalConfigVersionValue\r\n                    && this.props.Login.masterData.RealApprovalConfigVersionValue.napproveconfversioncode;\r\n                Map[\"nneedtemplatebasedflow\"] = this.props.Login.masterData.RegSubTypeValue\r\n                    && this.props.Login.masterData.RegSubTypeValue.nneedtemplatebasedflow;\r\n                Map[\"nneedsubsample\"] = this.props.Login.masterData.RegSubTypeValue\r\n                    && this.props.Login.masterData.RegSubTypeValue.nneedsubsample;\r\n               // Map[\"checkBoxOperation\"] = 3;\r\n                Map[\"checkBoxOperation\"] = checkBoxOperation.SINGLESELECT;\r\n\r\n                Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\r\n                Map[\"nregsubtypecode\"] = this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode;\r\n                Map[\"nfilterstatus\"] = -1;\r\n                Map[\"npreregno\"] = cancelRejectSamplesList &&\r\n                    cancelRejectSamplesList.map(sample => sample.npreregno).join(\",\");\r\n                Map[\"ntransactionsamplecode\"] = this.props.Login.masterData.selectedSubSample && this.props.Login.masterData.selectedSubSample.length > 0 ?\r\n                    this.props.Login.masterData.selectedSubSample.map(sample => sample.ntransactionsamplecode).join(\",\") : \"-1\";\r\n                Map[\"ntransactiontestcode\"] = this.props.Login.masterData.selectedTest && this.props.Login.masterData.selectedTest.length > 0 ?\r\n                    this.props.Login.masterData.selectedTest.map(test => test.ntransactiontestcode).join(\",\") : \"-1\";\r\n                Map[\"registrationsample\"] = cancelRejectSamplesList;\r\n                let sampleCode = '';\r\n                this.props.Login.masterData.RegistrationGetSubSample && (this.props.Login.masterData.RegistrationGetSubSample.map(sample => {\r\n                    // if (sample.ntransactionstatus != transactionStatus.CANCELLED && sample.ntransactionstatus != transactionStatus.REJECT) {\r\n                    sampleCode += sample.ntransactionsamplecode + ','\r\n                    //}\r\n                }))\r\n                Map[\"ssamplecode\"] = sampleCode.substring(0, sampleCode.length - 1);\r\n                // ? return sample.ntransactionsamplecode : \"\").join(\",\")).replace(/^,/, '');;\r\n                Map[\"registrationtest\"] = this.props.Login.masterData.selectedSubSample;\r\n                Map[\"transactionValidation\"] = this.props.Login.transactionValidation;\r\n                Map[\"withoutgetparameter\"] = 3\r\n                Map[\"activeTestTab\"] = this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\";\r\n                Map[\"activeSampleTab\"] = this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\";\r\n                Map[\"activeSubSampleTab\"] = this.props.Login.activeSubSampleTab || \"IDS_SUBSAMPLEATTACHMENTS\";\r\n                Map[\"url\"] = this.props.Login.settings[24];\r\n                // Map[\"selectedSample\"] = sortData(this.props.Login.masterData.selectedSample, \"ascending\", \"npreregno\")\r\n                // Map[\"RegistrationGetSubSample\"] = sortData(this.props.Login.masterData.RegistrationGetSubSample, \"ascending\", \"ntransactionsamplecode\")\r\n                Map[\"selectedSample\"] = cancelRejectSamplesList;//this.props.Login.masterData.selectedSample\r\n                Map[\"RegistrationGetSubSample\"] = this.props.Login.masterData.RegistrationGetSubSample\r\n\r\n\r\n                let inputParam = {\r\n                    inputData: Map,\r\n                    postParamList: this.postParamList,\r\n                    action: 'cancelSample'\r\n                }\r\n                if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, controlcode)) {\r\n                    const updateInfo = {\r\n                        typeName: DEFAULT_RETURN,\r\n                        data: {\r\n                            loadEsign: true,\r\n                            screenData: { inputParam, masterData: this.props.Login.masterData },\r\n                            openModal: true,\r\n                            parentPopUpSize: 'lg',\r\n                            screenName: this.props.Login.screenName,\r\n                            operation: 'cancel'\r\n                        }\r\n                    }\r\n                    this.props.updateStore(updateInfo);\r\n                } else {\r\n                    this.props.cancelSampleAction(inputParam, this.props.Login.masterData)\r\n                }\r\n            } else {\r\n                let value = [];\r\n                // let value1 =[];\r\n                // let value2 = [];\r\n                this.props.Login.transactionValidation[controlcode] &&\r\n                    this.props.Login.transactionValidation[controlcode].map(sample => {\r\n                        if (sample.nregsubtypecode === this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode) {\r\n                            value.push(this.props.intl.formatMessage({ id: sample.stransdisplaystatus }))\r\n                        }\r\n                    })\r\n\r\n                value = value.map(sample => sample).join(\"/\")\r\n                // if(value.length>4){\r\n                //     value1 = value.slice.splice(0,4);\r\n                //     value2 = value.slice.splice(5);\r\n                //     toast.info(this.props.intl.formatMessage({ id: \"IDS_SELECT\" }) + value1 +\"\\n\" +value2 + this.props.intl.formatMessage({ id: \"IDS_TOCANCELREJECTSAMPLE\" }));\r\n\r\n                // }\r\n                // else{\r\n                toast.info(this.props.intl.formatMessage({ id: \"IDS_SELECT\" }) + value + this.props.intl.formatMessage({ id: \"IDS_TOCANCELREJECTSAMPLE\" }));\r\n\r\n\r\n                //toast.info(\"Select\" + \" \" + value + \" to Cancel/Reject Sample\");\r\n            }\r\n        } else {\r\n            toast.info(this.props.intl.formatMessage({ id: \"IDS_SELECTSAMPLETOCANCELREJECT\" }));\r\n        }\r\n\r\n    }\r\n\r\n    transValidation = (transactionValidation, ncontrolcode, selectedSample) => {\r\n        //  const transList=transactionValidation?Object.keys(transactionValidation):[];\r\n        //  const index=transList.findIndex(x=>x.ncontrolcode===ncontrolcode);\r\n        //let check=true;\r\n        //  let validate=false;\r\n        let ntransstatus = [];\r\n\r\n        let translist = transactionValidation[ncontrolcode];\r\n        if (translist) {\r\n            transactionValidation[ncontrolcode] && transactionValidation[ncontrolcode].map(sam => {\r\n                if (sam.nregsubtypecode === this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode) {\r\n                    return ntransstatus.push(sam.ntransactionstatus)\r\n                }\r\n                //return ntransstatus.push(sam.ntransactionstatus)\r\n            });\r\n            const selectdata = selectedSample ? selectedSample : [];\r\n            let check = selectdata.map(sam1 => {\r\n                return ntransstatus.includes(sam1.ntransactionstatus)\r\n            })\r\n            if (check.includes(false)) {\r\n                return false;\r\n            } else {\r\n                return true;\r\n            }\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    onUpdateSubSampleRegistration(saveType, formRef, operation, flag) {\r\n        const inputData = { userinfo: this.props.Login.userInfo };\r\n\r\n        let initialParam = {\r\n            nfilterstatus: this.props.Login.masterData.FilterStatusValue.ntransactionstatus,\r\n            userinfo: this.props.Login.userInfo,\r\n            nsampletypecode: this.props.Login.masterData.RealSampleTypeValue.nsampletypecode,\r\n            nregtypecode: this.props.Login.masterData.RealRegTypeValue.nregtypecode,\r\n            nregsubtypecode: this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode,\r\n            fromdate: \"\",\r\n            todate: \"\",\r\n            nflag: 2,\r\n            ntype: 5,\r\n            npreregno: String(this.state.selectedRecord.npreregno),\r\n            ntransactionsamplecode: String(this.state.selectedRecord.ntransactionsamplecode),\r\n            ndesigntemplatemappingcode: this.props.Login.masterData.RealDesignTemplateMappingValue\r\n                && this.props.Login.masterData.RealDesignTemplateMappingValue.ndesigntemplatemappingcode,\r\n            nneedtemplatebasedflow: this.props.Login.masterData.RegSubTypeValue\r\n                && this.props.Login.masterData.RegSubTypeValue.nneedtemplatebasedflow,\r\n            nneedsubsample: this.props.Login.masterData.RegSubTypeValue\r\n                && this.props.Login.masterData.RegSubTypeValue.nneedsubsample,\r\n           // checkBoxOperation: 3,\r\n            checkBoxOperation: checkBoxOperation.SINGLESELECT,\r\n            activeTestTab: this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\",\r\n            activeSampleTab: this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\",\r\n            activeSubSampleTab: this.props.Login.activeSubSampleTab || \"IDS_SUBSAMPLEATTACHMENTS\"\r\n        }\r\n\r\n        inputData[\"initialparam\"] = initialParam;\r\n        // inputData[\"samplebeforeedit\"] = JSON.parse(JSON.stringify(this.props.Login.regRecordToEdit));\r\n        //inputData[\"registration\"] = JSON.parse(JSON.stringify(this.state.selectedRecord));\r\n        const param = getRegistrationSubSample(\r\n            this.state.selectedRecord,\r\n            this.props.Login.masterData.SubSampleTemplate.jsondata,\r\n            this.props.Login.userInfo, this.props.Login.defaulttimezone, false, this.props.Login.specBasedComponent,\r\n            undefined, operation);\r\n\r\n        inputData[\"registrationsample\"] = param.sampleRegistration\r\n\r\n        if (this.props.Login.masterData.RealSampleTypeValue && this.props.Login.masterData.RealSampleTypeValue.nsampletypecode === SampleType.CLINICALTYPE) {\r\n            inputData[\"registrationsample\"]['jsondata'] = { ...inputData[\"registrationsample\"]['jsondata'], externalorderid: this.state.selectedRecord && this.state.selectedRecord.externalorderid }\r\n            inputData[\"registrationsample\"]['jsonuidata'] = { ...inputData[\"registrationsample\"]['jsonuidata'], externalorderid: this.state.selectedRecord && this.state.selectedRecord.externalorderid }\r\n        }\r\n        inputData[\"SubSampleDateList\"] = param.dateList\r\n        inputData['subsampledateconstraints'] = this.state.subsampledateconstraints;\r\n        inputData[\"flag\"] = flag === undefined ? 1 : flag;\r\n        inputData[\"ndesigntemplatemappingcode\"] = this.props.Login.masterData.RealDesignTemplateMappingValue\r\n            && this.props.Login.masterData.RealDesignTemplateMappingValue.ndesigntemplatemappingcode;\r\n        inputData[\"napproveconfversioncode\"] = this.props.Login.masterData.RealApprovalConfigVersionValue\r\n            && this.props.Login.masterData.RealApprovalConfigVersionValue.napproveconfversioncode;\r\n        inputData[\"nneedtemplatebasedflow\"] = this.props.Login.masterData.RegSubTypeValue\r\n            && this.props.Login.masterData.RegSubTypeValue.nneedtemplatebasedflow;\r\n        inputData[\"nneedsubsample\"] = this.props.Login.masterData.RegSubTypeValue\r\n            && this.props.Login.masterData.RegSubTypeValue.nneedsubsample;\r\n       // inputData[\"checkBoxOperation\"] = 3;\r\n        inputData[\"checkBoxOperation\"] = checkBoxOperation.SINGLESELECT;\r\n        inputData[\"subsamplecombinationunique\"] = this.state.subsampleCombinationUnique;\r\n        inputData[\"activeTestTab\"] = this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\";\r\n        inputData[\"activeSampleTab\"] = this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\";\r\n        inputData[\"activeSubSampleTab\"] = this.props.Login.activeSubSampleTab || \"IDS_SUBSAMPLEATTACHMENTS\"\r\n\r\n        let isFileupload = false;\r\n        const formData = new FormData();\r\n        this.props.Login.withoutCombocomponent.map((item) => {\r\n            if (item.inputtype === 'files') {\r\n                if (typeof this.state.selectedRecord[item && item.label] === \"object\") {\r\n                    this.state.selectedRecord[item && item.label] && this.state.selectedRecord[item && item.label].forEach((item1, index) => {\r\n                        formData.append(\"uploadedFile\" + index, item1);\r\n                        formData.append(\"uniquefilename\" + index, inputData[\"registrationsample\"].uniquefilename);\r\n                        formData.append(\"filecount\", this.state.selectedRecord[item && item.label].length);\r\n                        formData.append(\"isFileEdited\", transactionStatus.YES);\r\n                        formData.append(\"userinfo\", JSON.stringify(this.props.Login.userInfo));\r\n                        // formDataValue={...map[\"RegistrationSample\"].formData,formData};\r\n                        delete (inputData[\"registrationsample\"].uniquefilename);\r\n                        delete (inputData[\"registrationsample\"][item && item.label]);\r\n                        formData.append('Map', Lims_JSON_stringify(JSON.stringify(inputData)));\r\n                        isFileupload = true;\r\n                    })\r\n                }\r\n            }\r\n        })\r\n\r\n        const inputParam = {\r\n            classUrl: this.props.Login.inputParam.classUrl,\r\n            methodUrl: \"SubSampleRegistration\",\r\n            displayName: this.props.Login.inputParam.displayName,\r\n            inputData: inputData,\r\n            operation: operation, saveType, formRef,\r\n            action: 'editSubSample',\r\n            showConfirmAlert: false,\r\n            resultDataState: this.state.resultDataState,\r\n            testCommentDataState: this.state.testCommentDataState,\r\n            testAttachmentDataState: this.state.testAttachmentDataState, formData: formData, isFileupload\r\n            // dataState:undefined, selectedId\r\n        }\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData: this.props.Login.masterData },\r\n                    saveType, parentPopUpSize: \"lg\",\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            //this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\r\n            this.props.onUpdateSubSampleRegistration(inputParam,\r\n                this.props.Login.masterData, \"openModal\");\r\n        }\r\n    }\r\n\r\n    validateEsign = () => {\r\n        const inputParam = {\r\n            inputData: {\r\n                \"userinfo\": {\r\n                    ...this.props.Login.userInfo,\r\n                    sreason: this.state.selectedRecord[\"esigncomments\"],\r\n                    nreasoncode: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].value,\r\n                    spredefinedreason: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].label,\r\n\r\n                },\r\n                password: this.state.selectedRecord[\"esignpassword\"]\r\n            },\r\n            screenData: this.props.Login.screenData\r\n        }\r\n\r\n        this.props.validateEsignforRegistration(inputParam, \"openModal\");\r\n\r\n    }\r\n\r\n    editRegistration = (inputParam) => {\r\n        let data = [];\r\n        const withoutCombocomponent = []\r\n        const Layout = this.props.Login.masterData.registrationTemplate\r\n            && this.props.Login.masterData.registrationTemplate.jsondata\r\n        if (Layout !== undefined) {\r\n            Layout.map(row => {\r\n                return row.children.map(column => {\r\n                    return column.children.map(component => {\r\n                        return component.hasOwnProperty(\"children\") ?\r\n                            component.children.map(componentrow => {\r\n                                if (componentrow.inputtype === \"combo\") {\r\n                                    data.push(componentrow)\r\n                                } else {\r\n                                    withoutCombocomponent.push(componentrow)\r\n                                }\r\n\r\n                                return null;\r\n                            })\r\n                            : component.inputtype === \"combo\" ?\r\n                                data.push(component) : withoutCombocomponent.push(component)\r\n                    })\r\n                })\r\n            })\r\n            const comboComponents = data\r\n            let childColumnList = {};\r\n            data.map(columnList => {\r\n                const val = comboChild(data, columnList, childColumnList, true);\r\n                data = val.data;\r\n                childColumnList = val.childColumnList\r\n                return null;\r\n            })\r\n\r\n            this.props.getEditRegistrationComboService(inputParam,\r\n                data, this.state.selectedRecord, childColumnList,\r\n                comboComponents, withoutCombocomponent)\r\n        } else {\r\n            toast.info(\"Configure the preregister template for this registrationtype\")\r\n        }\r\n\r\n    }\r\n\r\n    editSubSampleRegistration = (inputParam) => {\r\n        let data = [];\r\n        const regSubSamplewithoutCombocomponent = []\r\n                if ((inputParam.mastertoedit.ntransactionstatus===transactionStatus.REJECT) ||\r\n                     (inputParam.mastertoedit.ntransactionstatus===transactionStatus.CANCELLED) ||\r\n                     (inputParam.mastertoedit.ntransactionstatus===transactionStatus.RELEASED)) {\r\n                            toast.info(this.props.intl.formatMessage({ id: \"IDS_CANNOTEDITCANCELLEDSUBSAMPLE\" }));\r\n                        }     else {\r\n                    const Layout = this.props.Login.masterData.SubSampleTemplate\r\n                        && this.props.Login.masterData.SubSampleTemplate.jsondata\r\n                    if (Layout !== undefined) {\r\n                        Layout.map(row => {\r\n                            return row.children.map(column => {\r\n                                return column.children.map(component => {\r\n                                    return component.hasOwnProperty(\"children\") ?\r\n                                        component.children.map(componentrow => {\r\n                                            if (componentrow.inputtype === \"combo\") {\r\n                                                data.push(componentrow)\r\n                                            } else {\r\n                                                regSubSamplewithoutCombocomponent.push(componentrow)\r\n                                            }\r\n                                            return null;\r\n                                        })\r\n                                        : component.inputtype === \"combo\" ?\r\n                                            data.push(component) : regSubSamplewithoutCombocomponent.push(component)\r\n                                })\r\n                            })\r\n                        })\r\n                        const regSubSamplecomboComponents = data\r\n                        let regSubSamplechildColumnList = {};\r\n                        data.map(columnList => {\r\n                            const val = comboChild(data, columnList, regSubSamplechildColumnList, true);\r\n                            data = val.data;\r\n                            regSubSamplechildColumnList = val.childColumnList\r\n                            return null;\r\n                        })\r\n\r\n\r\n                        const sampleList = getSameRecordFromTwoArrays(inputParam.masterData.selectedSample, [inputParam.mastertoedit], \"npreregno\")\r\n\r\n                        this.props.getEditSubSampleComboService(inputParam,\r\n                            data, this.state.selectedRecord, regSubSamplechildColumnList,\r\n                            regSubSamplecomboComponents, regSubSamplewithoutCombocomponent,\r\n                            sampleList[0].ncomponentrequired === 3 ? true : false)\r\n                    } else {\r\n                        toast.info(\"Configure the sub sample template for this registrationtype\")\r\n                    }\r\n                }\r\n               \r\n    }\r\n\r\n    closeSendToStoreChildModal = () => {\r\n\r\n        let loadEsign = this.props.Login.loadEsign;\r\n        let openChildModal = this.props.Login.openChildModal;\r\n        let selectedId = this.props.Login.selectedId;\r\n        let selectedRecord = this.state.selectedRecord; //this.props.Login.selectedRecord;\r\n        let selectedDetailField = this.state.selectedDetailField;\r\n        if (this.props.Login.loadEsign) {\r\n            loadEsign = false;\r\n        }\r\n        else {\r\n            openChildModal = false;\r\n            selectedId = null;\r\n            selectedRecord = {};\r\n            selectedDetailField = {};\r\n        }\r\n\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { openChildModal, loadEsign, selectedRecord, selectedId, selectedDetailField }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    sendToStore = (inputParam) => {\r\n        let inputData = {\r\n            needSubSample: this.props.Login.masterData.RegSubTypeValue.nneedsubsample === true ? true : false,\r\n            npreregno: inputParam.mastersendtostore.npreregno,\r\n            ntransactionsamplecode: inputParam.mastersendtostore.ntransactionsamplecode,\r\n            sample: this.props.Login.masterData.RegSubTypeValue.nneedsubsample === true ? inputParam.mastersendtostore.ssamplearno :\r\n                inputParam.mastersendtostore.sarno,\r\n            userinfo: inputParam.userInfo\r\n        }\r\n        // this.props.getStorageCategoryForSendToStore(inputParam.userInfo, inputParam.masterData, inputParam.controlcode, this.state.selectedRecord, inputData);\r\n        this.props.getStorageCategoryForSendToStore(inputParam, this.state.selectedRecord, inputData);\r\n    }\r\n\r\n    itemRender = (clickedItem) => {\r\n        let item = clickedItem.item;\r\n        if (!this.state.toggleAction) {\r\n            return (\r\n                <>\r\n                    {clickedItem.item ? (\r\n                        <span className={`normal-node\r\n                         ${clickedItem.item.editable ? \"active-node\" : \"\"}\r\n                         ${item.expanded ? \"expand-node\" : \"collapse-node\"}\r\n                         `}>\r\n                            {item.containerfirstnode ? <FontAwesomeIcon icon={faBoxOpen} /> :\r\n                                item.locationlastnode ? <FontAwesomeIcon icon={faLocationArrow} /> :\r\n                                    item.containerlastnode ? <FontAwesomeIcon icon={faBox} /> :\r\n                                        item.expanded ? <FontAwesomeIcon icon={faFolderOpen} /> : <FontAwesomeIcon icon={faFolder} />}\r\n                            {item.text}\r\n                        </span>\r\n                    ) : (\r\n                        \"\"\r\n                    )}\r\n                </>\r\n            );\r\n        }\r\n    };\r\n\r\n    onItemClick = (event) => {\r\n\r\n        let newData = mapTree(this.state.treeData, \"items\", (item) => {\r\n            if (item.editable === true) {\r\n                item.editable = false;\r\n            } else if (item.id === event.item.id) {\r\n                item.editable = true;\r\n            }\r\n            return item;\r\n        });\r\n\r\n        let result = newData;\r\n        const indices = event.itemHierarchicalIndex.split('_').map(index => Number(index));\r\n        let itemText = \"\";\r\n        for (let i = 0; i < indices.length; i++) {\r\n            if (i === 0) {\r\n                result = result[0];\r\n            } else {\r\n                result = result.items[indices[i]];\r\n            }\r\n            itemText = i > 0 ? itemText + \" > \" + result.text : result.text;\r\n        }\r\n\r\n        this.setState({ treeData: newData, clickedItem: event.item, targetLocationHierarchy: itemText });\r\n    };\r\n\r\n    clearSelected(innerObj, selectedItem) {\r\n        if (innerObj.id == selectedItem.id) {\r\n            innerObj.selected = true;\r\n        } else {\r\n            innerObj.selected = false;\r\n        }\r\n        if (innerObj.items && innerObj.items.length > 0) {\r\n            innerObj.items.map((childObj) => {\r\n                this.clearSelected(childObj, selectedItem)\r\n            })\r\n        }\r\n        return innerObj\r\n    }\r\n\r\n    onExpandChange = (event) => {\r\n        event.item.expanded = !event.item.expanded;\r\n        this.forceUpdate();\r\n    };\r\n\r\n    onComboChangeTree = (comboData, fieldName, caseNo) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if (caseNo === 3) {\r\n\r\n            let nfilterStorageCategory = this.state.nfilterStorageCategory || {}\r\n            nfilterStorageCategory = comboData;\r\n            this.searchRef.current.value = \"\";\r\n            this.setState({ nfilterStorageCategory })\r\n\r\n        } else if (caseNo === 4) {\r\n\r\n            selectedRecord[fieldName] = comboData;\r\n            this.props.loadApprovedLocationOnCombo(this.props.Login.userInfo, this.props.Login.masterData, selectedRecord);\r\n\r\n        } else if (caseNo === 5) {\r\n\r\n            selectedRecord[fieldName] = comboData;\r\n            this.props.loadApprovedLocationOnTreeData(this.props.Login.userInfo, this.props.Login.masterData, selectedRecord);\r\n        } else {\r\n\r\n            selectedRecord[fieldName] = comboData;\r\n            this.setState({ selectedRecord });\r\n        }\r\n    }\r\n    onDropFileSubSample = (attachedFiles, fieldName, maxSize) => {\r\n        let selectedRecord = this.state.selectedRecord || {};\r\n        selectedRecord[fieldName] = onDropAttachFileList(selectedRecord[fieldName], attachedFiles, maxSize)\r\n        this.setState({ selectedRecord, actionType: \"new\" });\r\n    }\r\n\r\n    deleteAttachmentSubSample = (event, file, fieldName) => {\r\n        let selectedRecord = this.state.selectedRecord || {};\r\n        selectedRecord[fieldName] = deleteAttachmentDropZone(selectedRecord[fieldName], file)\r\n\r\n        this.setState({\r\n            selectedRecord, actionType: \"delete\" //fileToDelete:file.name \r\n        });\r\n    }\r\n\r\n    onSendToStoreSample = (saveType, formRef) => {\r\n        let inputData = [];\r\n\r\n        if (this.state.selectedRecord.nstoragecategorycode && this.state.selectedRecord.nstoragecategorycode.value !== undefined) {\r\n\r\n            if (this.state.selectedRecord.nsamplestoragelocationcode && this.state.selectedRecord.nsamplestoragelocationcode.value !== undefined) {\r\n\r\n                if (this.state.clickedItem && this.state.clickedItem.containerlastnode === true) {\r\n\r\n                    inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n\r\n                    let ssampleArNO = \"\";\r\n                    if (this.props.Login.masterData.RegSubTypeValue.nneedsubsample === true) {\r\n\r\n                        ssampleArNO = this.props.Login.masterData.selectedSubSample[0].ssamplearno;\r\n                    } else {\r\n                        ssampleArNO = this.props.Login.masterData.selectedSample[0].sarno;\r\n                    }\r\n\r\n\r\n                    inputData[\"sampleStorageMaster\"] = {\r\n                        \"ssampletraycode\": this.state.clickedItem ? this.state.clickedItem.id : \"\",\r\n                        \"ssamplearno\": ssampleArNO,\r\n                        \"nsamplestoragelocationcode\": this.state.selectedRecord.nsamplestoragelocationcode.value,\r\n                        \"slocationhierarchy\": this.state.targetLocationHierarchy ? this.state.targetLocationHierarchy : \"\",\r\n                        \"nstoragecategorycode\": this.state.selectedRecord.nstoragecategorycode.value,\r\n                        \"nsampleqty\": this.state.selectedRecord.nsampleqty ? this.state.selectedRecord.nsampleqty : 0,\r\n                        \"nunitcode\": this.state.selectedRecord.nunitcode ? this.state.selectedRecord.nunitcode.value : -1\r\n                    }\r\n\r\n\r\n                    const inputParam = {\r\n                        methodUrl: this.props.Login.inputParam.methodUrl,\r\n                        classUrl: this.props.Login.inputParam.classUrl,\r\n                        displayName: this.props.Login.inputParam.displayName ? this.props.Login.inputParam.displayName : '',\r\n                        inputData: {\r\n                            ...inputData, npreregno: this.props.Login.npreregno, ntransactionsamplecode: this.props.Login.ntransactionsamplecode,\r\n                            needSubSample: this.props.Login.masterData.RegSubTypeValue.nneedsubsample === true ? true : false,\r\n                            sample: ssampleArNO\r\n                        },\r\n                        operation: this.props.Login.operation,\r\n                        saveType, formRef\r\n                    }\r\n                    const masterData = this.props.Login.masterData;\r\n                    const selectedRecord = this.state.selectedRecord || {};\r\n\r\n                    if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolcode)) {\r\n                        const updateInfo = {\r\n                            typeName: DEFAULT_RETURN,\r\n                            data: {\r\n                                loadEsign: true, screenData: { inputParam, masterData, selectedRecord }, saveType, openModal: true\r\n                            }\r\n                        }\r\n                        this.props.updateStore(updateInfo);\r\n                    } else {\r\n                        this.props.sendToStoreSampleStorageMaster(this.props.Login.userInfo, inputParam);\r\n                    }\r\n                } else {\r\n                    toast.info(this.props.intl.formatMessage({ id: \"IDS_SELECTSTORAGELOCATIONEND\" }));\r\n                }\r\n\r\n            } else {\r\n                toast.info(this.props.intl.formatMessage({ id: \"IDS_SELECTSTORAGELOCATION\" }));\r\n\r\n            }\r\n\r\n        } else {\r\n            toast.info(this.props.intl.formatMessage({ id: \"IDS_SELECTSTORAGECATEGORY\" }));\r\n\r\n        }\r\n    }\r\n    viewFile = (filedata) => {\r\n        if (filedata.viewName === 'InfoView') {\r\n            if (filedata && filedata[filedata.field[2] + ['_ssystemfilename_Sample']] !== undefined && filedata[filedata.field[2]] !== \"\") {\r\n                const inputParam = {\r\n                    inputData: {\r\n                        viewFile: {\r\n                            ssystemfilename: filedata[filedata.field[2] + ['_ssystemfilename_Sample']],\r\n                            npreregno: filedata.npreregno,\r\n                        },\r\n                        userinfo: this.props.Login.userInfo\r\n                    },\r\n                    classUrl: \"registration\",\r\n                    operation: \"view\",\r\n                    methodUrl: \"RegistrationFile\",\r\n                    //screenName: filedata.displayName\r\n                }\r\n                this.props.viewAttachment(inputParam);\r\n            } else {\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_FILENOTUPLOADED\" }))\r\n            }\r\n        } else if (filedata.viewName === 'subSample') {\r\n            if (filedata && filedata[filedata.field[2] + ['_ssystemfilename_subSample']] !== undefined && filedata[filedata.field[2]] !== \"\") {\r\n                const inputParam = {\r\n                    inputData: {\r\n                        viewFile: {\r\n                            ssystemfilename: filedata[filedata.field[2] + ['_ssystemfilename_subSample']],\r\n                            npreregno: filedata.npreregno,\r\n                            ntransactionsamplecode: filedata.ntransactionsamplecode\r\n                        },\r\n                        userinfo: this.props.Login.userInfo\r\n                    },\r\n                    classUrl: \"registration\",\r\n                    operation: \"view\",\r\n                    methodUrl: \"RegistrationSubSampleFile\",\r\n                    //screenName: filedata.displayName\r\n                }\r\n                this.props.viewAttachment(inputParam);\r\n            } else {\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_FILENOTUPLOADED\" }))\r\n            }\r\n        } else {\r\n            if (filedata && filedata[filedata.dataField + ['_ssystemfilename_Sample']] !== undefined && filedata[filedata.dataField] !== \"\") {\r\n                const inputParam = {\r\n                    inputData: {\r\n                        viewFile: {\r\n                            ssystemfilename: filedata[filedata.dataField + ['_ssystemfilename_Sample']],\r\n                            npreregno: filedata.npreregno,\r\n                        },\r\n                        userinfo: this.props.Login.userInfo\r\n                    },\r\n                    classUrl: \"registration\",\r\n                    operation: \"view\",\r\n                    methodUrl: \"RegistrationFile\",\r\n                    //screenName: filedata.displayName\r\n                }\r\n                this.props.viewAttachment(inputParam);\r\n            } else {\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_FILENOTUPLOADED\" }))\r\n            }\r\n        }\r\n    }\r\n\r\n}\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        Login: state.Login\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, {\r\n    callService, crudMaster, updateStore,\r\n    getSampleTypeChange, getRegTypeChange, getRegSubTypeChange,\r\n    getAttachmentCombo, viewAttachment, getCommentsCombo,\r\n    filterTransactionList, validateEsignCredential,\r\n    getSampleChildTabDetail, getTestChildTabDetailRegistration,\r\n    ReloadData, showUnderDevelopment, getPreviewTemplate,\r\n    getChildValues, getRegistrationSample, onApprovalConfigVersionChange,\r\n    getRegistrationsubSampleDetail, getRegistrationTestDetail,\r\n    acceptRegistration, addMoreTest, createRegistrationTest,\r\n    getEditRegistrationComboService, cancelTestAction,\r\n    cancelSampleAction, addsubSampleRegistration, saveSubSample,\r\n    getEditSubSampleComboService, onUpdateSubSampleRegistration, validateEsignforRegistration,//componentTestPackage,\r\n    cancelSubSampleAction, preregRecordToQuarantine, componentTest, getSubSampleChildTabDetail, testPackageTest,\r\n    getStorageCategoryForSendToStore, loadApprovedLocationOnCombo,\r\n    loadApprovedLocationOnTreeData, sendToStoreSampleStorageMaster,\r\n    addMasterRecord, getAddMasterCombo, getDynamicMasterTempalte,\r\n    getChildComboMaster, getChildValuesForAddMaster, insertRegistration, getBarcodeAndPrinterService,\r\n    getEditMaster, outsourceTest, getOutSourceSite, getOutSourceSiteAndTest, outsourceSampleTest,\r\n    getOrderDetails, onUpdateCancelExternalOrder, orderMapping, getExternalOrderForMapping, getExternalOrderTypeForMapping,\r\n    orderRecords, testSectionTest, openBarcodeModal, barcodeGeneration,getAdhocTest,createAdhocTest\r\n})(injectIntl(RegistrationDesigner));"]},"metadata":{},"sourceType":"module"}