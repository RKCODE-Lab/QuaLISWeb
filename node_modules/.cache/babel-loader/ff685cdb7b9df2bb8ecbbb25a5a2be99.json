{"ast":null,"code":"import rsapi from '../rsapi';\nimport { DEFAULT_RETURN } from './LoginTypes';\nimport { sortData, constructOptionList, rearrangeDateFormat } from '../components/CommonScript';\nimport { toast } from 'react-toastify';\nimport Axios from 'axios';\nimport { initRequest } from './LoginAction';\nimport { intl } from '../components/App';\nexport function getDesignTemplateMappingDetail(designtemplatemapping, userInfo, masterData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    return rsapi.post(\"designtemplatemapping/getDesignTemplateMapping\", {\n      ndesigntemplatemappingcode: designtemplatemapping.ndesigntemplatemappingcode,\n      nsampletypecode: designtemplatemapping.nsampletypecode,\n      nregtypecode: designtemplatemapping.nregtypecode,\n      nregsubtypecode: designtemplatemapping.nregsubtypecode,\n      \"userinfo\": userInfo\n    }).then(response => {\n      masterData = { ...masterData,\n        ...response.data\n      };\n      sortData(masterData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(intl.formatMessage({\n          id: error.message\n        }));\n      } else {\n        toast.warn(intl.formatMessage({\n          id: error.response\n        }));\n      }\n    });\n  };\n}\nexport function getDesignTemplateMappingComboService(screenName, operation, userInfo, nsampletypecode, nregtypecode, nregsubtypecode, ncontrolCode) {\n  return function (dispatch) {\n    if (operation === \"create\" && nsampletypecode != -1 && nregtypecode != -1 && nregsubtypecode != -1) {\n      const designtemplatemappingService = rsapi.post(\"designtemplatemapping/getDynamicPreRegDesign\", {\n        userinfo: userInfo,\n        nsampletypecode,\n        nregtypecode,\n        nregsubtypecode\n      });\n      let urlArray = [designtemplatemappingService];\n      dispatch(initRequest(true));\n      Axios.all(urlArray).then(response => {\n        let selectedRecord = {};\n        const designtemplatemappingMap = constructOptionList(response[0].data.DesignTemplateMapping || [], \"nreactregtemplatecode\", \"sregtemplatename\", undefined, undefined, true);\n        const designtemplatemappingList = designtemplatemappingMap.get(\"OptionList\"); // selectedRecord[\"ntransactionstatus\"] = transactionStatus.ACTIVE;\n        //  selectedRecord[\"nreactregtemplatecode\"] = designtemplatemappingMap//.get(\"DefaultValue\");\n\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            designtemplatemappingList,\n            operation,\n            screenName,\n            selectedRecord,\n            openModal: true,\n            ncontrolCode,\n            loading: false\n          }\n        });\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(intl.formatMessage({\n            id: error.message\n          }));\n        } else {\n          toast.warn(intl.formatMessage({\n            id: error.response.data\n          }));\n        }\n      });\n    } else {\n      toast.warn(intl.formatMessage({\n        id: \"IDS_SELECTFILTER\"\n      }));\n    }\n  };\n}\nexport function reloadDesignTemplateMapping(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"designtemplatemapping/getDesignTemplateMapping\", { ...inputParam.inputData\n    }).then(response => {\n      let responseData = { ...response.data\n      };\n      responseData = sortData(responseData);\n      let masterData = { ...inputParam.masterData,\n        ...responseData\n      };\n\n      if (inputParam.searchRef !== undefined && inputParam.searchRef.current !== null) {\n        inputParam.searchRef.current.value = \"\";\n        masterData['searchedData'] = undefined;\n      }\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false,\n          showFilter: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getTMPFilterRegType(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    return rsapi.post(\"designtemplatemapping/getTemplateRegType\", inputParam.inputData).then(response => {\n      let masterData = { ...inputParam.masterData,\n        ...response.data\n      };\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(intl.formatMessage({\n          id: error.message\n        }));\n      } else {\n        toast.warn(intl.formatMessage({\n          id: error.response.data\n        }));\n      }\n    });\n  };\n}\nexport function getTMPFilterRegSubType(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    return rsapi.post(\"designtemplatemapping/getTemplateRegType\", inputParam.inputData).then(response => {\n      let masterData = { ...inputParam.masterData,\n        ...response.data\n      };\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(intl.formatMessage({\n          id: error.message\n        }));\n      } else {\n        toast.warn(intl.formatMessage({\n          id: error.response.data\n        }));\n      }\n    });\n  };\n}\nexport function getTMPFilterSubmit(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    return rsapi.post(\"designtemplatemapping/getFilterSubmit\", inputParam.inputData).then(response => {\n      let masterData = { ...inputParam.masterData,\n        ...response.data\n      };\n      let listdesigntemplatemapping = sortData(response.data.listdesigntemplatemapping);\n      masterData = { ...masterData,\n        listdesigntemplatemapping\n      };\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(intl.formatMessage({\n          id: error.message\n        }));\n      } else {\n        toast.warn(intl.formatMessage({\n          id: error.response.data\n        }));\n      }\n    });\n  };\n}","map":{"version":3,"sources":["D:/Postgres_workingFolder/QuaLISWeb/src/actions/DesignTemplateMappingAction.js"],"names":["rsapi","DEFAULT_RETURN","sortData","constructOptionList","rearrangeDateFormat","toast","Axios","initRequest","intl","getDesignTemplateMappingDetail","designtemplatemapping","userInfo","masterData","dispatch","post","ndesigntemplatemappingcode","nsampletypecode","nregtypecode","nregsubtypecode","then","response","data","type","payload","loading","catch","error","status","formatMessage","id","message","warn","getDesignTemplateMappingComboService","screenName","operation","ncontrolCode","designtemplatemappingService","userinfo","urlArray","all","selectedRecord","designtemplatemappingMap","DesignTemplateMapping","undefined","designtemplatemappingList","get","openModal","reloadDesignTemplateMapping","inputParam","inputData","responseData","searchRef","current","value","showFilter","getTMPFilterRegType","getTMPFilterRegSubType","getTMPFilterSubmit","listdesigntemplatemapping"],"mappings":"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","sourcesContent":["import rsapi from '../rsapi';\r\nimport { DEFAULT_RETURN } from './LoginTypes';\r\nimport { sortData, constructOptionList, rearrangeDateFormat } from '../components/CommonScript'\r\nimport { toast } from 'react-toastify';\r\nimport Axios from 'axios';\r\nimport { initRequest } from './LoginAction';\r\nimport { intl } from '../components/App';\r\n\r\n\r\nexport function getDesignTemplateMappingDetail(designtemplatemapping, userInfo, masterData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n\r\n        return rsapi.post(\"designtemplatemapping/getDesignTemplateMapping\", {\r\n            ndesigntemplatemappingcode: designtemplatemapping.ndesigntemplatemappingcode, \r\n            nsampletypecode:designtemplatemapping.nsampletypecode,\r\n            nregtypecode:designtemplatemapping.nregtypecode,\r\n            nregsubtypecode:designtemplatemapping.nregsubtypecode,\r\n            \"userinfo\": userInfo\r\n        })\r\n            .then(response => {\r\n\r\n                masterData = { ...masterData, ...response.data };\r\n                sortData(masterData);\r\n                dispatch({ type: DEFAULT_RETURN, payload: { masterData, loading: false } });\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(intl.formatMessage({ id: error.message }));\r\n                }\r\n                else {\r\n\r\n                    toast.warn(intl.formatMessage({ id: error.response }));\r\n                }\r\n\r\n            })\r\n    }\r\n}\r\n\r\nexport function getDesignTemplateMappingComboService(screenName, operation,  userInfo,nsampletypecode,nregtypecode,nregsubtypecode, ncontrolCode) {\r\n    return function (dispatch) {\r\n\r\n        if ((operation === \"create\") &&(nsampletypecode!=-1)&&(nregtypecode!=-1)&&(nregsubtypecode!=-1) ) {\r\n          \r\n            const designtemplatemappingService = rsapi.post(\"designtemplatemapping/getDynamicPreRegDesign\", { userinfo: userInfo,nsampletypecode,nregtypecode,nregsubtypecode});\r\n\r\n\r\n            let urlArray = [designtemplatemappingService];\r\n\r\n\r\n           \r\n\r\n            dispatch(initRequest(true));\r\n            Axios.all(urlArray)\r\n                .then(response => {\r\n\r\n\r\n                   \r\n                    let selectedRecord = {};\r\n                   \r\n\r\n                    const designtemplatemappingMap = constructOptionList(response[0].data.DesignTemplateMapping || [], \"nreactregtemplatecode\",\r\n                        \"sregtemplatename\", undefined, undefined, true);\r\n                   \r\n                    const designtemplatemappingList = designtemplatemappingMap.get(\"OptionList\");\r\n                  \r\n\r\n                   \r\n                  \r\n                        // selectedRecord[\"ntransactionstatus\"] = transactionStatus.ACTIVE;\r\n                        //  selectedRecord[\"nreactregtemplatecode\"] = designtemplatemappingMap//.get(\"DefaultValue\");\r\n                    \r\n\r\n\r\n\r\n\r\n\r\n\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN, payload: {\r\n                            \r\n                            designtemplatemappingList, \r\n\r\n                            operation, screenName, selectedRecord, openModal: true,\r\n                            ncontrolCode, loading: false\r\n                        }\r\n                    });\r\n                })\r\n                .catch(error => {\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(intl.formatMessage({ id: error.message }));\r\n                    }\r\n                    else {\r\n\r\n                        toast.warn(intl.formatMessage({ id: error.response.data }));\r\n                    }\r\n                })\r\n        }\r\n        else\r\n        {\r\n\r\n            toast.warn(intl.formatMessage({ id: \"IDS_SELECTFILTER\" }));\r\n        }\r\n\r\n    }\r\n}\r\n\r\n\r\nexport function reloadDesignTemplateMapping(inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"designtemplatemapping/getDesignTemplateMapping\", { ...inputParam.inputData })\r\n            .then(response => {\r\n                let responseData = { ...response.data }\r\n                responseData = sortData(responseData)\r\n                let masterData = {\r\n                    ...inputParam.masterData,\r\n                    ...responseData,\r\n                }\r\n                if (inputParam.searchRef !== undefined && inputParam.searchRef.current !== null) {\r\n                    inputParam.searchRef.current.value = \"\";\r\n                    masterData['searchedData'] = undefined\r\n                }\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData,\r\n                        loading: false,\r\n                        showFilter: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getTMPFilterRegType(inputParam){\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"designtemplatemapping/getTemplateRegType\", inputParam.inputData)\r\n        .then(response=> {\r\n            let masterData = {...inputParam.masterData,...response.data}\r\n            dispatch({\r\n                type: DEFAULT_RETURN,\r\n                payload: {\r\n                    masterData, loading: false\r\n                }\r\n            });\r\n        })\r\n        .catch(error=> {\r\n            dispatch({type: DEFAULT_RETURN, payload: {loading: false}}); \r\n            if (error.response.status === 500) {\r\n                toast.error(intl.formatMessage({\r\n                    id: error.message\r\n                }));\r\n            } else {\r\n                toast.warn(intl.formatMessage({\r\n                    id: error.response.data\r\n                }));\r\n            }\r\n        })\r\n    }\r\n}\r\nexport function getTMPFilterRegSubType(inputParam){\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"designtemplatemapping/getTemplateRegType\", inputParam.inputData)\r\n        .then(response=> {\r\n            let masterData = {...inputParam.masterData,...response.data}\r\n            dispatch({\r\n                type: DEFAULT_RETURN,\r\n                payload: {\r\n                    masterData, loading: false\r\n                }\r\n            });\r\n        })\r\n        .catch(error=> {\r\n            dispatch({type: DEFAULT_RETURN, payload: {loading: false}}); \r\n            if (error.response.status === 500) {\r\n                toast.error(intl.formatMessage({\r\n                    id: error.message\r\n                }));\r\n            } else {\r\n                toast.warn(intl.formatMessage({\r\n                    id: error.response.data\r\n                }));\r\n            }\r\n        })\r\n    }\r\n}\r\nexport function getTMPFilterSubmit(inputParam){\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"designtemplatemapping/getFilterSubmit\", inputParam.inputData)\r\n        .then(response=> {\r\n            let masterData = {...inputParam.masterData,...response.data}\r\n            let listdesigntemplatemapping = sortData(response.data.listdesigntemplatemapping);\r\n            masterData ={...masterData,listdesigntemplatemapping}\r\n            dispatch({\r\n                type: DEFAULT_RETURN,\r\n                payload: {\r\n                    masterData, loading: false\r\n                }\r\n            });\r\n        })\r\n        .catch(error=> {\r\n            dispatch({type: DEFAULT_RETURN, payload: {loading: false}}); \r\n            if (error.response.status === 500) {\r\n                toast.error(intl.formatMessage({\r\n                    id: error.message\r\n                }));\r\n            } else {\r\n                toast.warn(intl.formatMessage({\r\n                    id: error.response.data\r\n                }));\r\n            }\r\n        })\r\n    }\r\n\r\n}"]},"metadata":{},"sourceType":"module"}