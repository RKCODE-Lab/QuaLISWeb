{"ast":null,"code":"var _jsxFileName = \"D:\\\\Postgres_workingFolder\\\\QuaLISWeb\\\\src\\\\pages\\\\contactmaster\\\\PatientMaster.jsx\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { toast } from 'react-toastify';\nimport { injectIntl, FormattedMessage } from 'react-intl';\nimport { Row, Col, Card, Nav, FormGroup, FormLabel } from 'react-bootstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faPencilAlt, faTrashAlt } from '@fortawesome/free-solid-svg-icons';\nimport DataGrid from '../../components/data-grid/data-grid.component';\nimport { callService, crudMaster, validateEsignCredential, updateStore, getPatientDetail, getPatientComboService, filterColumnData, getTestParameter, getPatientReport } from '../../actions';\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\nimport { showEsign, getControlMap, validatePhoneNumber, ageCalculate, formatInputDate } from '../../components/CommonScript';\nimport { transactionStatus } from '../../components/Enumeration';\nimport ListMaster from '../../components/list-master/list-master.component';\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\nimport { ReactComponent as Reports } from \"@svgr/webpack?-svgo,+titleProp,+ref!../../assets/image/report-Icon.svg\";\nimport { ReadOnlyText, ContentPanel } from '../../components/App.styles';\nimport AddPatient from './AddPatient';\nimport Esign from '../audittrail/Esign';\nimport ConfirmMessage from '../../components/confirm-alert/confirm-message.component';\nimport ReactTooltip from 'react-tooltip';\nimport { process } from '@progress/kendo-data-query';\n\nconst mapStateToProps = state => {\n  return {\n    Login: state.Login\n  };\n};\n\nclass PatientMaster extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.ConfirmDelete = deleteId => {\n      this.confirmMessage.confirm(\"deleteMessage\", this.props.intl.formatMessage({\n        id: \"IDS_DELETE\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_DEFAULTCONFIRMMSG\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_OK\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_CANCEL\"\n      }), () => this.deletePatient(\"Patient\", this.props.Login.masterData.SelectedPatient, \"delete\", deleteId));\n    };\n\n    this.closeModal = () => {\n      let loadEsign = this.props.Login.loadEsign;\n      let openModal = this.props.Login.openModal;\n      let selectedRecord = this.props.Login.selectedRecord;\n\n      if (this.props.Login.loadEsign) {\n        if (this.props.Login.operation === \"delete\") {\n          loadEsign = false;\n          openModal = false;\n          selectedRecord = {};\n        } else {\n          loadEsign = false;\n        }\n      } else {\n        openModal = false;\n        selectedRecord = {};\n      }\n\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          openModal,\n          loadEsign,\n          selectedRecord,\n          selectedId: null\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onComboChange = (comboData, fieldName) => {\n      const selectedRecord = this.state.selectedRecord || {};\n      selectedRecord[fieldName] = comboData;\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onNumericInputOnChange = (value, name) => {\n      const selectedRecord = this.state.selectedRecord || {};\n      selectedRecord[name] = value;\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onInputOnChange = event => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (event.target.type === 'checkbox') {\n        selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\n      } else {\n        if (event.target.name === \"sphoneno\") {\n          if (event.target.value !== \"\") {\n            event.target.value = validatePhoneNumber(event.target.value);\n            selectedRecord[event.target.name] = event.target.value !== \"\" ? event.target.value : selectedRecord[event.target.name];\n          } else {\n            selectedRecord[event.target.name] = event.target.value;\n          }\n        } else {\n          selectedRecord[event.target.name] = event.target.value;\n        }\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.handleDateChange = (dateName, dateValue) => {\n      const {\n        selectedRecord\n      } = this.state;\n      selectedRecord[dateName] = dateValue;\n      const age = ageCalculate(dateValue);\n      selectedRecord[\"sage\"] = age;\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onSaveClick = (saveType, formRef) => {\n      let patientData = [];\n      patientData[\"userinfo\"] = this.props.Login.userInfo;\n      let postParam = {\n        inputListName: \"PatientList\",\n        selectedObject: \"SelectedPatient\",\n        primaryKeyField: \"npatientcode\"\n      };\n\n      if (this.props.Login.operation === \"update\") {\n        postParam['primaryKeyValue'] = this.props.Login.masterData.SelectedPatient.npatientcode;\n        patientData[\"patient\"] = {\n          \"npatientcode\": this.props.Login.masterData.SelectedPatient.npatientcode,\n          \"sfirstname\": this.state.selectedRecord.sfirstname,\n          \"slastname\": this.state.selectedRecord.slastname,\n          \"snationalid\": this.state.selectedRecord.snationalid,\n          \"sage\": this.state.selectedRecord.sage,\n          \"sphoneno\": this.state.selectedRecord.sphoneno,\n          \"saddress\": this.state.selectedRecord.saddress,\n          \"sfathername\": this.state.selectedRecord.sfathername //    \"ddob\": formatInputDate(\n          //     this.state.selectedRecord[\"ddob\"],false)        \n\n        };\n      } else {\n        patientData[\"patient\"] = {\n          \"nsitecode\": this.props.Login.userInfo.nmastersitecode\n        };\n        this.patientFieldList.map(item => {\n          return patientData[\"patient\"][item] = this.state.selectedRecord[item];\n        });\n      }\n\n      patientData[\"patient\"][\"ngendercode\"] = this.state.selectedRecord[\"ngendercode\"] ? this.state.selectedRecord[\"ngendercode\"].value : transactionStatus.NA; // if (patientData[\"patient\"][\"ddob\"] !== undefined\n      //     && patientData[\"patient\"][\"ddob\"] !== null && patientData[\"patient\"][\"ddob\"] !== \"\") {\n      //     patientData[\"patient\"][\"ddob\"] = formatInputDate(patientData[\"patient\"][\"ddob\"],false);\n      // }\n\n      if (this.state.selectedRecord[\"ddob\"]) {\n        patientData[\"patient\"][\"ddob\"] = formatInputDate(this.state.selectedRecord[\"ddob\"], false);\n      }\n\n      const inputParam = {\n        classUrl: \"patient\",\n        methodUrl: \"Patient\",\n        inputData: patientData,\n        operation: this.props.Login.operation,\n        saveType,\n        formRef,\n        postParam,\n        searchRef: this.searchRef,\n        isClearSearch: this.props.Login.isClearSearch\n      };\n      const masterData = this.props.Login.masterData;\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData\n            },\n            saveType\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, masterData, \"openModal\");\n      }\n    };\n\n    this.deletePatient = (methodUrl, selectedPatient, operation, ncontrolCode) => {\n      const postParam = {\n        inputListName: \"PatientList\",\n        selectedObject: \"SelectedPatient\",\n        primaryKeyField: \"npatientcode\",\n        primaryKeyValue: selectedPatient.npatientcode,\n        fetchUrl: \"patient/getPatient\",\n        fecthInputObject: {\n          userinfo: this.props.Login.userInfo\n        }\n      };\n      const inputParam = {\n        classUrl: this.props.Login.inputParam.classUrl,\n        methodUrl,\n        postParam,\n        inputData: {\n          \"userinfo\": this.props.Login.userInfo,\n          \"patient\": selectedPatient\n        },\n        operation,\n        isClearSearch: this.props.Login.isClearSearch\n      };\n      const masterData = this.props.Login.masterData;\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, ncontrolCode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData\n            },\n            openModal: true,\n            screenName: \"IDS_PATIENTMASTER\",\n            operation\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, masterData, \"openModal\");\n      }\n    };\n\n    this.validateEsign = () => {\n      const inputParam = {\n        inputData: {\n          \"userinfo\": { ...this.props.Login.userInfo,\n            sreason: this.state.selectedRecord[\"esigncomments\"]\n          },\n          password: this.state.selectedRecord[\"esignpassword\"]\n        },\n        screenData: this.props.Login.screenData\n      };\n      this.props.validateEsignCredential(inputParam, \"openModal\");\n    };\n\n    this.handleExpandChange = (row, dataState) => {\n      const viewParam = {\n        userInfo: this.props.Login.userInfo,\n        primaryKeyField: \"npreregno\",\n        masterData: this.props.Login.masterData\n      };\n      this.props.getTestParameter({ ...viewParam,\n        dataState,\n        primaryKeyValue: row[\"dataItem\"][viewParam.primaryKeyField],\n        viewRow: row[\"dataItem\"]\n      });\n    };\n\n    this.reloadData = () => {\n      this.searchRef.current.value = \"\";\n      const inputParam = {\n        inputData: {\n          \"userinfo\": this.props.Login.userInfo\n        },\n        classUrl: \"patient\",\n        methodUrl: \"Patient\",\n        displayName: \"IDS_PATIENTMASTER\",\n        userInfo: this.props.Login.userInfo,\n        isClearSearch: this.props.Login.isClearSearch\n      };\n      this.props.callService(inputParam);\n    };\n\n    this.state = {\n      masterStatus: \"\",\n      error: \"\",\n      selectedRecord: {},\n      operation: \"\",\n      selectedPatient: undefined,\n      screenName: undefined,\n      userRoleControlRights: [],\n      controlMap: new Map(),\n      isClearSearch: false,\n      dataState: {\n        skip: 0,\n        take: 5\n      }\n    };\n    this.searchRef = React.createRef();\n    this.emailRef = React.createRef();\n    this.confirmMessage = new ConfirmMessage();\n    this.patientFieldList = ['sfirstname', 'slastname', 'sfathername', 'sage', 'ddob', 'sphoneno', 'saddress', \"snationalid\"];\n    this.searchFieldList = [\"saddress\", \"sage\", \"sdob\", \"sgendername\", \"sfirstname\", \"sfathername\", \"slastname\", \"spatientid\", \"sphoneno\"];\n    this.columnList = [{\n      \"idsName\": \"IDS_ARNO\",\n      \"dataField\": \"sarno\",\n      \"width\": \"150px\"\n    }, {\n      \"idsName\": \"IDS_PRODUCT\",\n      \"dataField\": \"sproductname\",\n      \"width\": \"250px\"\n    }, {\n      \"idsName\": \"IDS_SPECIFICATION\",\n      \"dataField\": \"sspecname\",\n      \"width\": \"150px\"\n    }, {\n      \"idsName\": \"IDS_SPECIMENCOLLECTIONTIME\",\n      \"dataField\": \"scolleciondate\",\n      \"width\": \"100px\"\n    }, {\n      \"idsName\": \"IDS_RECEIVEDDATE\",\n      \"dataField\": \"sreceiveddate\",\n      \"width\": \"100px\"\n    }, {\n      \"idsName\": \"IDS_STATUS\",\n      \"dataField\": \"stransdisplaystatus\",\n      \"width\": \"100px\"\n    }];\n    this.childColumnList = [{\n      \"idsName\": \"IDS_TESTNAME\",\n      \"dataField\": \"stestsynonym\",\n      \"width\": \"250px\"\n    }, {\n      \"idsName\": \"IDS_PARAMETERNAME\",\n      \"dataField\": \"sparametersynonym\",\n      \"width\": \"250px\"\n    }, {\n      \"idsName\": \"IDS_RESULT\",\n      \"dataField\": \"sresult\",\n      \"width\": \"150px\"\n    }, {\n      \"idsName\": \"IDS_RESULTFLAG\",\n      \"dataField\": \"sgradename\",\n      \"width\": \"100px\"\n    }, {\n      \"idsName\": \"IDS_RESULTDATE\",\n      \"dataField\": \"sentereddate\",\n      \"width\": \"100px\"\n    }, {\n      \"idsName\": \"IDS_STATUS\",\n      \"dataField\": \"stransdisplaystatus\",\n      \"width\": \"100px\"\n    }];\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\n      toast.warn(props.Login.masterStatus);\n      props.Login.masterStatus = \"\";\n    }\n\n    if (props.Login.error !== state.error) {\n      toast.error(props.Login.error);\n      props.Login.error = \"\";\n    }\n\n    if (props.Login.selectedRecord === undefined) {\n      return {\n        selectedRecord: {}\n      };\n    }\n\n    return null;\n  }\n\n  render() {\n    const addId = this.state.controlMap.has(\"AddPatient\") && this.state.controlMap.get(\"AddPatient\").ncontrolcode;\n    const editId = this.state.controlMap.has(\"EditPatient\") && this.state.controlMap.get(\"EditPatient\").ncontrolcode;\n    const deleteId = this.state.controlMap.has(\"DeletePatient\") && this.state.controlMap.get(\"DeletePatient\").ncontrolcode;\n    const patientReportId = this.state.controlMap.has(\"PatientReport\") && this.state.controlMap.get(\"PatientReport\").ncontrolcode;\n    const filterParam = {\n      inputListName: \"PatientList\",\n      selectedObject: \"SelectedPatient\",\n      primaryKeyField: \"npatientcode\",\n      fetchUrl: \"patient/getPatient\",\n      fecthInputObject: {\n        userinfo: this.props.Login.userInfo\n      },\n      masterData: this.props.Login.masterData,\n      searchFieldList: this.searchFieldList\n    };\n    const addParam = {\n      screenName: \"IDS_PATIENTMASTER\",\n      operation: \"create\",\n      primaryKeyName: \"npatientcode\",\n      masterData: this.props.Login.masterData,\n      userInfo: this.props.Login.userInfo,\n      ncontrolcode: addId\n    };\n    const editParam = {\n      screenName: \"IDS_PATIENTMASTER\",\n      operation: \"update\",\n      primaryKeyName: \"npatientcode\",\n      masterData: this.props.Login.masterData,\n      userInfo: this.props.Login.userInfo,\n      ncontrolcode: editId,\n      inputListName: \"PatientList\",\n      selectedObject: \"SelectedPatient\"\n    };\n    const mandatoryFields = [{\n      \"idsName\": \"IDS_FIRSTNAME\",\n      \"dataField\": \"sfirstname\",\n      \"mandatoryLabel\": \"IDS_ENTER\",\n      \"controlType\": \"textbox\"\n    }, {\n      \"idsName\": \"IDS_LASTNAME\",\n      \"dataField\": \"slastname\",\n      \"mandatoryLabel\": \"IDS_ENTER\",\n      \"controlType\": \"textbox\"\n    }, {\n      \"idsName\": \"IDS_FATHERGUARDIANNAME\",\n      \"dataField\": \"sfathername\",\n      \"mandatoryLabel\": \"IDS_ENTER\",\n      \"controlType\": \"textbox\"\n    }, {\n      \"idsName\": \"IDS_DATEOFBIRTH\",\n      \"dataField\": \"ddob\",\n      \"mandatoryLabel\": \"IDS_SELECT\",\n      \"controlType\": \"selectbox\"\n    }, {\n      \"idsName\": \"IDS_AGE\",\n      \"dataField\": \"sage\",\n      \"mandatoryLabel\": \"IDS_ENTER\",\n      \"controlType\": \"textbox\"\n    }, {\n      \"idsName\": \"IDS_SEX\",\n      \"dataField\": \"ngendercode\",\n      \"mandatoryLabel\": \"IDS_SELECT\",\n      \"controlType\": \"selectbox\"\n    }, {\n      \"idsName\": \"IDS_ADDRESS\",\n      \"dataField\": \"saddress\",\n      \"mandatoryLabel\": \"IDS_ENTER\",\n      \"controlType\": \"textbox\"\n    }, {\n      \"idsName\": \"IDS_PHONENO\",\n      \"dataField\": \"sphoneno\",\n      \"mandatoryLabel\": \"IDS_ENTER\",\n      \"controlType\": \"textbox\"\n    }];\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"client-listing-wrap  mtop-4 mtop-fixed-breadcrumb\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      noGutters: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 4,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(ListMaster, {\n      screenName: this.props.intl.formatMessage({\n        id: \"IDS_PATIENTMASTER\"\n      }),\n      masterData: this.props.Login.masterData,\n      userInfo: this.props.Login.userInfo,\n      masterList: this.props.Login.masterData.searchedData || this.props.Login.masterData.PatientList,\n      getMasterDetail: user => this.props.getPatientDetail(user, this.props.Login.userInfo, this.props.Login.masterData),\n      selectedMaster: this.props.Login.masterData.SelectedPatient,\n      primaryKeyField: \"npatientcode\",\n      mainField: \"spatientname\",\n      firstField: \"sfathername\",\n      filterColumnData: this.props.filterColumnData,\n      filterParam: filterParam,\n      userRoleControlRights: this.state.userRoleControlRights,\n      addId: addId,\n      searchRef: this.searchRef,\n      reloadData: this.reloadData,\n      openModal: () => this.props.getPatientComboService(addParam),\n      isMultiSelecct: false,\n      hidePaging: false,\n      isClearSearch: this.props.Login.isClearSearch,\n      showMicIcon: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 25\n      }\n    })), /*#__PURE__*/React.createElement(Col, {\n      md: 8,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(ContentPanel, {\n      className: \"panel-main-content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      className: \"border-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 29\n      }\n    }, this.props.Login.masterData.PatientList && this.props.Login.masterData.PatientList.length > 0 && this.props.Login.masterData.SelectedPatient ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Card.Header, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(ReactTooltip, {\n      place: \"bottom\",\n      globalEventOff: \"click\",\n      id: \"tooltip_list_wrap\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 45\n      }\n    }), /*#__PURE__*/React.createElement(Card.Title, {\n      className: \"product-title-main\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 45\n      }\n    }, this.props.Login.masterData.SelectedPatient.spatientname), /*#__PURE__*/React.createElement(Card.Subtitle, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"d-flex product-category\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      className: \"product-title-sub flex-grow-1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 53\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"d-inline\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(Nav.Link, {\n      name: \"editPatient\",\n      hidden: this.state.userRoleControlRights.indexOf(editId) === -1,\n      className: \"btn btn-circle outline-grey mr-2\",\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_EDIT\"\n      }),\n      \"data-for\": \"tooltip_list_wrap\",\n      onClick: () => this.props.getPatientComboService(editParam),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 55\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faPencilAlt,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 65\n      }\n    })), /*#__PURE__*/React.createElement(Nav.Link, {\n      name: \"deletePatient\",\n      className: \"btn btn-circle outline-grey mr-2 action-icons-wrap\",\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_DELETE\"\n      }),\n      \"data-for\": \"tooltip_list_wrap\",\n      hidden: this.state.userRoleControlRights.indexOf(deleteId) === -1,\n      onClick: () => this.ConfirmDelete(deleteId),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faTrashAlt,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 61\n      }\n    })), /*#__PURE__*/React.createElement(Nav.Link, {\n      className: \"btn btn-circle outline-grey mr-2\",\n      name: \"patientReport\",\n      hidden: this.state.userRoleControlRights.indexOf(patientReportId) === -1,\n      onClick: () => this.props.getPatientReport(this.props.Login.masterData.SelectedPatient, this.props.Login.userInfo, patientReportId),\n      \"data-for\": \"tooltip_list_wrap\",\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_PATIENTREPORT\"\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(Reports, {\n      className: \"custom_icons\",\n      width: \"20\",\n      height: \"20\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 61\n      }\n    })))))), /*#__PURE__*/React.createElement(Card.Body, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 4,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(FormLabel, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_PATIENTID\",\n      message: \"Patient ID\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 68\n      }\n    })), /*#__PURE__*/React.createElement(ReadOnlyText, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 57\n      }\n    }, this.props.Login.masterData.SelectedPatient.spatientid))), /*#__PURE__*/React.createElement(Col, {\n      md: 4,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(FormLabel, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_NATIONALID\",\n      message: \"National ID\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 68\n      }\n    })), /*#__PURE__*/React.createElement(ReadOnlyText, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 57\n      }\n    }, this.props.Login.masterData.SelectedPatient.snationalid))), /*#__PURE__*/React.createElement(Col, {\n      md: 4,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(FormLabel, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_DATEOFBIRTH\",\n      message: \"Date Of Birth\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 68\n      }\n    })), /*#__PURE__*/React.createElement(ReadOnlyText, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 57\n      }\n    }, this.props.Login.masterData.SelectedPatient.sdob === null || this.props.Login.masterData.SelectedPatient.sdob.length === 0 ? '-' : this.props.Login.masterData.SelectedPatient.sdob))), /*#__PURE__*/React.createElement(Col, {\n      md: 4,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(FormLabel, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_AGE\",\n      message: \"Age\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 68\n      }\n    })), /*#__PURE__*/React.createElement(ReadOnlyText, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 57\n      }\n    }, this.props.Login.masterData.SelectedPatient.sage === null || this.props.Login.masterData.SelectedPatient.sage.length === 0 ? '-' : this.props.Login.masterData.SelectedPatient.sage))), /*#__PURE__*/React.createElement(Col, {\n      md: 4,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(FormLabel, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_SEX\",\n      message: \"Sex\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 68\n      }\n    })), /*#__PURE__*/React.createElement(ReadOnlyText, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 57\n      }\n    }, this.props.Login.masterData.SelectedPatient.sgendername === null || this.props.Login.masterData.SelectedPatient.sgendername.length === 0 ? '-' : this.props.Login.masterData.SelectedPatient.sgendername))), /*#__PURE__*/React.createElement(Col, {\n      md: 4,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(FormLabel, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_FATHERGUARDIANNAME\",\n      message: \"Father/Guardian Name\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 68\n      }\n    })), /*#__PURE__*/React.createElement(ReadOnlyText, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 57\n      }\n    }, this.props.Login.masterData.SelectedPatient.sfathername))), /*#__PURE__*/React.createElement(Col, {\n      md: 4,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(FormLabel, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_PHONENO\",\n      message: \"Phone No\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 68\n      }\n    })), /*#__PURE__*/React.createElement(ReadOnlyText, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 57\n      }\n    }, this.props.Login.masterData.SelectedPatient.sphoneno))), /*#__PURE__*/React.createElement(Col, {\n      md: 8,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 254,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(FormLabel, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 255,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_ADDRESS\",\n      message: \"Address\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 255,\n        columnNumber: 68\n      }\n    })), /*#__PURE__*/React.createElement(ReadOnlyText, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 256,\n        columnNumber: 57\n      }\n    }, this.props.Login.masterData.SelectedPatient.saddress === null || this.props.Login.masterData.SelectedPatient.saddress.length === 0 ? '-' : this.props.Login.masterData.SelectedPatient.saddress)))), /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 265,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 266,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(DataGrid, {\n      userRoleControlRights: this.state.userRoleControlRights,\n      controlMap: this.state.controlMap,\n      primaryKeyField: \"npreregno\",\n      data: this.props.Login.masterData && this.props.Login.masterData[\"PatientHistory\"],\n      dataResult: process(this.props.Login.masterData && (this.props.Login.masterData[\"PatientHistory\"] || []), this.state.dataState),\n      dataState: this.state.dataState,\n      dataStateChange: event => this.setState({\n        dataState: event.dataState\n      }),\n      extractedColumnList: this.columnList,\n      inputParam: this.props.Login.inputParam,\n      userInfo: this.props.Login.userInfo,\n      methodUrl: this.props.Login.inputParam.methodUrl,\n      pageable: true,\n      scrollable: \"scrollable\",\n      isActionRequired: false,\n      isToolBarRequired: false,\n      selectedId: null,\n      hideColumnFilter: false,\n      expandField: \"expanded\",\n      handleExpandChange: this.handleExpandChange,\n      hasChild: true,\n      childColumnList: this.childColumnList,\n      childMappingField: \"npreregno\",\n      childList: this.props.Login.testMap || new Map(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 267,\n        columnNumber: 53\n      }\n    }))))) : \"\"))))), this.props.Login.openModal ? /*#__PURE__*/React.createElement(SlideOutModal, {\n      show: this.props.Login.openModal,\n      closeModal: this.closeModal,\n      operation: this.props.Login.operation,\n      inputParam: this.props.Login.inputParam,\n      screenName: this.props.Login.screenName,\n      onSaveClick: this.onSaveClick,\n      esign: this.props.Login.loadEsign,\n      validateEsign: this.validateEsign,\n      masterStatus: this.props.Login.masterStatus,\n      updateStore: this.props.updateStore,\n      selectedRecord: this.state.selectedRecord || {},\n      mandatoryFields: mandatoryFields,\n      addComponent: this.props.Login.loadEsign ? /*#__PURE__*/React.createElement(Esign, {\n        operation: this.props.Login.operation,\n        onInputOnChange: this.onInputOnChange,\n        inputParam: this.props.Login.inputParam,\n        selectedRecord: this.state.selectedRecord || {},\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 318,\n          columnNumber: 25\n        }\n      }) : /*#__PURE__*/React.createElement(AddPatient, {\n        selectedRecord: this.state.selectedRecord || {},\n        onInputOnChange: this.onInputOnChange,\n        onComboChange: this.onComboChange,\n        onNumericInputOnChange: this.onNumericInputOnChange,\n        handleDateChange: this.handleDateChange,\n        genderList: this.props.Login.genderList || [],\n        selectedPatient: this.props.Login.masterData.SelectedPatient || {},\n        operation: this.props.Login.operation,\n        inputParam: this.props.Login.inputParam,\n        userInfo: this.props.Login.userInfo,\n        currentTime: this.props.Login.currentTime,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 323,\n          columnNumber: 27\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 305,\n        columnNumber: 17\n      }\n    }) : \"\");\n  }\n\n  componentDidUpdate(previousProps) {\n    if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\n      this.setState({\n        selectedRecord: this.props.Login.selectedRecord\n      });\n    }\n\n    if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\n      const userRoleControlRights = [];\n\n      if (this.props.Login.userRoleControlRights) {\n        this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item => userRoleControlRights.push(item.ncontrolcode));\n      }\n\n      const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode);\n      this.setState({\n        userRoleControlRights,\n        controlMap\n      });\n    }\n  }\n\n}\n\nexport default connect(mapStateToProps, {\n  callService,\n  crudMaster,\n  validateEsignCredential,\n  updateStore,\n  getPatientDetail,\n  getPatientComboService,\n  filterColumnData,\n  getTestParameter,\n  getPatientReport\n})(injectIntl(PatientMaster));","map":{"version":3,"sources":["D:/Postgres_workingFolder/QuaLISWeb/src/pages/contactmaster/PatientMaster.jsx"],"names":["React","connect","toast","injectIntl","FormattedMessage","Row","Col","Card","Nav","FormGroup","FormLabel","FontAwesomeIcon","faPencilAlt","faTrashAlt","DataGrid","callService","crudMaster","validateEsignCredential","updateStore","getPatientDetail","getPatientComboService","filterColumnData","getTestParameter","getPatientReport","DEFAULT_RETURN","showEsign","getControlMap","validatePhoneNumber","ageCalculate","formatInputDate","transactionStatus","ListMaster","SlideOutModal","ReadOnlyText","ContentPanel","AddPatient","Esign","ConfirmMessage","ReactTooltip","process","mapStateToProps","state","Login","PatientMaster","Component","constructor","props","ConfirmDelete","deleteId","confirmMessage","confirm","intl","formatMessage","id","deletePatient","masterData","SelectedPatient","closeModal","loadEsign","openModal","selectedRecord","operation","updateInfo","typeName","data","selectedId","onComboChange","comboData","fieldName","setState","onNumericInputOnChange","value","name","onInputOnChange","event","target","type","checked","YES","NO","handleDateChange","dateName","dateValue","age","onSaveClick","saveType","formRef","patientData","userInfo","postParam","inputListName","selectedObject","primaryKeyField","npatientcode","sfirstname","slastname","snationalid","sage","sphoneno","saddress","sfathername","nmastersitecode","patientFieldList","map","item","NA","inputParam","classUrl","methodUrl","inputData","searchRef","isClearSearch","userRoleControlRights","nformcode","ncontrolCode","screenData","selectedPatient","primaryKeyValue","fetchUrl","fecthInputObject","userinfo","screenName","validateEsign","sreason","password","handleExpandChange","row","dataState","viewParam","viewRow","reloadData","current","displayName","masterStatus","error","undefined","controlMap","Map","skip","take","createRef","emailRef","searchFieldList","columnList","childColumnList","getDerivedStateFromProps","warn","render","addId","has","get","ncontrolcode","editId","patientReportId","filterParam","addParam","primaryKeyName","editParam","mandatoryFields","searchedData","PatientList","user","length","spatientname","indexOf","spatientid","sdob","sgendername","testMap","genderList","currentTime","componentDidUpdate","previousProps","Object","values","push"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { toast } from 'react-toastify';\r\nimport { injectIntl, FormattedMessage } from 'react-intl';\r\nimport { Row, Col, Card, Nav, FormGroup, FormLabel} from 'react-bootstrap';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faPencilAlt, faTrashAlt } from '@fortawesome/free-solid-svg-icons';\r\nimport DataGrid from '../../components/data-grid/data-grid.component';\r\nimport {\r\n    callService, crudMaster, validateEsignCredential, updateStore, getPatientDetail,\r\n    getPatientComboService, filterColumnData, getTestParameter, getPatientReport\r\n} from '../../actions';\r\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\r\nimport { showEsign, getControlMap, validatePhoneNumber, ageCalculate, formatInputDate } from '../../components/CommonScript';\r\nimport { transactionStatus } from '../../components/Enumeration';\r\nimport ListMaster from '../../components/list-master/list-master.component';\r\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\r\nimport { ReactComponent as Reports } from '../../assets/image/report-Icon.svg'\r\nimport { ReadOnlyText, ContentPanel } from '../../components/App.styles';\r\nimport AddPatient from './AddPatient';\r\nimport Esign from '../audittrail/Esign';\r\nimport ConfirmMessage from '../../components/confirm-alert/confirm-message.component';\r\nimport ReactTooltip from 'react-tooltip';\r\nimport { process } from '@progress/kendo-data-query';\r\n\r\n\r\nconst mapStateToProps = state => {\r\n    return ({ Login: state.Login })\r\n}\r\n\r\nclass PatientMaster extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n\r\n            masterStatus: \"\",\r\n            error: \"\",\r\n            selectedRecord: {},\r\n            operation: \"\",\r\n            selectedPatient: undefined,\r\n            screenName: undefined,\r\n            userRoleControlRights: [],\r\n            controlMap: new Map(),\r\n            isClearSearch: false,\r\n            dataState:{skip:0, take:5}\r\n\r\n        };\r\n        this.searchRef = React.createRef();\r\n        this.emailRef = React.createRef();\r\n        this.confirmMessage = new ConfirmMessage();\r\n\r\n        this.patientFieldList = ['sfirstname', 'slastname', 'sfathername',\r\n            'sage', 'ddob', 'sphoneno', 'saddress', \"snationalid\"];\r\n\r\n        this.searchFieldList = [\"saddress\", \"sage\", \"sdob\", \"sgendername\",\r\n            \"sfirstname\", \"sfathername\", \"slastname\", \"spatientid\", \"sphoneno\"];\r\n\r\n        this.columnList = [{ \"idsName\": \"IDS_ARNO\", \"dataField\": \"sarno\", \"width\": \"150px\" },\r\n                            { \"idsName\": \"IDS_PRODUCT\", \"dataField\": \"sproductname\", \"width\": \"250px\" },\r\n                            { \"idsName\": \"IDS_SPECIFICATION\", \"dataField\": \"sspecname\", \"width\": \"150px\" },\r\n                            { \"idsName\": \"IDS_SPECIMENCOLLECTIONTIME\", \"dataField\": \"scolleciondate\", \"width\": \"100px\" },\r\n                            { \"idsName\": \"IDS_RECEIVEDDATE\", \"dataField\": \"sreceiveddate\", \"width\": \"100px\" },\r\n                            { \"idsName\": \"IDS_STATUS\", \"dataField\": \"stransdisplaystatus\", \"width\": \"100px\" },];\r\n\r\n        this.childColumnList= [{ \"idsName\": \"IDS_TESTNAME\", \"dataField\": \"stestsynonym\", \"width\": \"250px\" },\r\n                            { \"idsName\": \"IDS_PARAMETERNAME\", \"dataField\": \"sparametersynonym\", \"width\": \"250px\" },\r\n                            { \"idsName\": \"IDS_RESULT\", \"dataField\": \"sresult\", \"width\": \"150px\" },\r\n                            { \"idsName\": \"IDS_RESULTFLAG\", \"dataField\": \"sgradename\", \"width\": \"100px\" },\r\n                            { \"idsName\": \"IDS_RESULTDATE\", \"dataField\": \"sentereddate\", \"width\": \"100px\" },\r\n                            { \"idsName\": \"IDS_STATUS\", \"dataField\": \"stransdisplaystatus\", \"width\": \"100px\" },]\r\n    }\r\n\r\n    static getDerivedStateFromProps(props, state) {\r\n\r\n        if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\r\n            toast.warn(props.Login.masterStatus);\r\n            props.Login.masterStatus = \"\";\r\n        }\r\n        if (props.Login.error !== state.error) {\r\n            toast.error(props.Login.error)\r\n            props.Login.error = \"\";\r\n        }\r\n        if (props.Login.selectedRecord === undefined) {\r\n            return { selectedRecord: {} }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    render() {\r\n\r\n        const addId = this.state.controlMap.has(\"AddPatient\") && this.state.controlMap.get(\"AddPatient\").ncontrolcode;\r\n        const editId = this.state.controlMap.has(\"EditPatient\") && this.state.controlMap.get(\"EditPatient\").ncontrolcode;\r\n        const deleteId = this.state.controlMap.has(\"DeletePatient\") && this.state.controlMap.get(\"DeletePatient\").ncontrolcode;\r\n        const patientReportId = this.state.controlMap.has(\"PatientReport\") && this.state.controlMap.get(\"PatientReport\").ncontrolcode;\r\n        \r\n        const filterParam = {\r\n            inputListName: \"PatientList\", selectedObject: \"SelectedPatient\", primaryKeyField: \"npatientcode\",\r\n            fetchUrl: \"patient/getPatient\", fecthInputObject: { userinfo: this.props.Login.userInfo },\r\n            masterData: this.props.Login.masterData, searchFieldList: this.searchFieldList\r\n        };\r\n\r\n        const addParam = {\r\n            screenName: \"IDS_PATIENTMASTER\", operation: \"create\", primaryKeyName: \"npatientcode\",\r\n            masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo,\r\n            ncontrolcode: addId\r\n        }\r\n        const editParam = {\r\n            screenName: \"IDS_PATIENTMASTER\", operation: \"update\", primaryKeyName: \"npatientcode\",\r\n            masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo,\r\n            ncontrolcode: editId, inputListName: \"PatientList\", selectedObject: \"SelectedPatient\"\r\n        };\r\n        const mandatoryFields = [\r\n            { \"idsName\": \"IDS_FIRSTNAME\", \"dataField\": \"sfirstname\", \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"textbox\" },\r\n            { \"idsName\": \"IDS_LASTNAME\", \"dataField\": \"slastname\", \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"textbox\" },\r\n            { \"idsName\": \"IDS_FATHERGUARDIANNAME\", \"dataField\": \"sfathername\", \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"textbox\" },\r\n            { \"idsName\": \"IDS_DATEOFBIRTH\", \"dataField\": \"ddob\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n            { \"idsName\": \"IDS_AGE\", \"dataField\": \"sage\", \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"textbox\" },\r\n            { \"idsName\": \"IDS_SEX\", \"dataField\": \"ngendercode\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n            { \"idsName\": \"IDS_ADDRESS\", \"dataField\": \"saddress\", \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"textbox\" },\r\n            { \"idsName\": \"IDS_PHONENO\", \"dataField\": \"sphoneno\", \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"textbox\" },\r\n        ];\r\n        return (<>\r\n            <div className=\"client-listing-wrap  mtop-4 mtop-fixed-breadcrumb\">\r\n                <Row noGutters>\r\n                    <Col md={4}>\r\n                        <ListMaster\r\n                            screenName={this.props.intl.formatMessage({ id: \"IDS_PATIENTMASTER\" })}\r\n                            masterData={this.props.Login.masterData}\r\n                            userInfo={this.props.Login.userInfo}\r\n                            masterList={this.props.Login.masterData.searchedData || this.props.Login.masterData.PatientList}\r\n                            getMasterDetail={(user) => this.props.getPatientDetail(user, this.props.Login.userInfo, this.props.Login.masterData)}\r\n                            selectedMaster={this.props.Login.masterData.SelectedPatient}\r\n                            primaryKeyField=\"npatientcode\"\r\n                            mainField=\"spatientname\"\r\n                            firstField=\"sfathername\"\r\n                            filterColumnData={this.props.filterColumnData}\r\n                            filterParam={filterParam}\r\n                            userRoleControlRights={this.state.userRoleControlRights}\r\n                            addId={addId}\r\n                            searchRef={this.searchRef}\r\n                            reloadData={this.reloadData}\r\n                            openModal={() => this.props.getPatientComboService(addParam)}\r\n                            isMultiSelecct={false}\r\n                            hidePaging={false}\r\n                            isClearSearch={this.props.Login.isClearSearch}\r\n                            showMicIcon={true}\r\n                        />\r\n                    </Col>\r\n                    <Col md={8}>\r\n                        <ContentPanel className=\"panel-main-content\">\r\n                            <Card className=\"border-0\">\r\n                                {this.props.Login.masterData.PatientList && this.props.Login.masterData.PatientList.length > 0 && this.props.Login.masterData.SelectedPatient ?\r\n                                    <>\r\n                                        <Card.Header>\r\n                                            <ReactTooltip place=\"bottom\" globalEventOff='click' id=\"tooltip_list_wrap\" />\r\n                                            <Card.Title className=\"product-title-main\">\r\n                                                {this.props.Login.masterData.SelectedPatient.spatientname}\r\n                                            </Card.Title>\r\n                                            <Card.Subtitle>\r\n                                                <div className=\"d-flex product-category\">\r\n                                                    <h2 className=\"product-title-sub flex-grow-1\"></h2>\r\n                                                    <div className=\"d-inline\">\r\n                                                      <Nav.Link name=\"editPatient\" hidden={this.state.userRoleControlRights.indexOf(editId) === -1}\r\n                                                                className=\"btn btn-circle outline-grey mr-2\"\r\n                                                                data-tip={this.props.intl.formatMessage({ id: \"IDS_EDIT\" })}\r\n                                                                data-for=\"tooltip_list_wrap\"\r\n                                                                onClick={() => this.props.getPatientComboService(editParam)}\r\n                                                            >\r\n                                                                <FontAwesomeIcon icon={faPencilAlt} />\r\n                                                        </Nav.Link>\r\n\r\n                                                        <Nav.Link name=\"deletePatient\" className=\"btn btn-circle outline-grey mr-2 action-icons-wrap\"\r\n                                                            data-tip={this.props.intl.formatMessage({ id: \"IDS_DELETE\" })}\r\n                                                            data-for=\"tooltip_list_wrap\"\r\n                                                            hidden={this.state.userRoleControlRights.indexOf(deleteId) === -1}\r\n                                                            onClick={() => this.ConfirmDelete(deleteId)}>\r\n                                                            <FontAwesomeIcon icon={faTrashAlt} />\r\n                                                        </Nav.Link>\r\n\r\n                                                        <Nav.Link className=\"btn btn-circle outline-grey mr-2\" name=\"patientReport\"\r\n                                                            hidden={this.state.userRoleControlRights.indexOf(patientReportId) === -1}\r\n                                                            onClick={() => this.props.getPatientReport(this.props.Login.masterData.SelectedPatient, this.props.Login.userInfo, patientReportId)}\r\n                                                            data-for=\"tooltip_list_wrap\"\r\n                                                            data-tip={this.props.intl.formatMessage({ id: \"IDS_PATIENTREPORT\" })}>\r\n                                                            <Reports className=\"custom_icons\" width=\"20\" height=\"20\" />\r\n                                                        </Nav.Link>\r\n\r\n                                                    </div>\r\n\r\n                                                </div>\r\n\r\n                                            </Card.Subtitle>\r\n                                        </Card.Header>\r\n                                        <Card.Body>\r\n                                            <Row>\r\n                                                <Col md={4}>\r\n                                                    <FormGroup>\r\n                                                        <FormLabel><FormattedMessage id=\"IDS_PATIENTID\" message=\"Patient ID\" /></FormLabel>\r\n                                                        <ReadOnlyText>{this.props.Login.masterData.SelectedPatient.spatientid}</ReadOnlyText>\r\n                                                    </FormGroup>\r\n                                                </Col>\r\n\r\n                                                <Col md={4}>\r\n                                                    <FormGroup>\r\n                                                        <FormLabel><FormattedMessage id=\"IDS_NATIONALID\" message=\"National ID\" /></FormLabel>\r\n                                                        <ReadOnlyText>{this.props.Login.masterData.SelectedPatient.snationalid}</ReadOnlyText>\r\n                                                    </FormGroup>\r\n                                                </Col>\r\n                                                <Col md={4}>\r\n                                                    <FormGroup>\r\n                                                        <FormLabel><FormattedMessage id=\"IDS_DATEOFBIRTH\" message=\"Date Of Birth\" /></FormLabel>\r\n                                                        <ReadOnlyText>\r\n                                                            {this.props.Login.masterData.SelectedPatient.sdob === null || this.props.Login.masterData.SelectedPatient.sdob.length === 0 ? '-' :\r\n                                                                this.props.Login.masterData.SelectedPatient.sdob}\r\n                                                        </ReadOnlyText>\r\n                                                    </FormGroup>\r\n                                                </Col>\r\n\r\n                                                <Col md={4}>\r\n                                                    <FormGroup>\r\n                                                        <FormLabel><FormattedMessage id=\"IDS_AGE\" message=\"Age\" /></FormLabel>\r\n                                                        <ReadOnlyText>\r\n                                                            {this.props.Login.masterData.SelectedPatient.sage === null || this.props.Login.masterData.SelectedPatient.sage.length === 0 ? '-' :\r\n                                                                this.props.Login.masterData.SelectedPatient.sage}\r\n                                                        </ReadOnlyText>\r\n                                                    </FormGroup>\r\n                                                </Col>\r\n\r\n                                                <Col md={4}>\r\n                                                    <FormGroup>\r\n                                                        <FormLabel><FormattedMessage id=\"IDS_SEX\" message=\"Sex\" /></FormLabel>\r\n                                                        <ReadOnlyText>\r\n                                                            {this.props.Login.masterData.SelectedPatient.sgendername === null || this.props.Login.masterData.SelectedPatient.sgendername.length === 0 ? '-' :\r\n                                                                this.props.Login.masterData.SelectedPatient.sgendername}\r\n                                                        </ReadOnlyText>\r\n                                                    </FormGroup>\r\n                                                </Col>\r\n\r\n                                                <Col md={4}>\r\n                                                    <FormGroup>\r\n                                                        <FormLabel><FormattedMessage id=\"IDS_FATHERGUARDIANNAME\" message=\"Father/Guardian Name\" /></FormLabel>\r\n                                                        <ReadOnlyText>{this.props.Login.masterData.SelectedPatient.sfathername}</ReadOnlyText>\r\n                                                    </FormGroup>\r\n                                                </Col>\r\n                                                <Col md={4}>\r\n                                                    <FormGroup>\r\n                                                        <FormLabel><FormattedMessage id=\"IDS_PHONENO\" message=\"Phone No\" /></FormLabel>\r\n                                                        <ReadOnlyText>{this.props.Login.masterData.SelectedPatient.sphoneno}</ReadOnlyText>\r\n                                                    </FormGroup>\r\n                                                </Col>\r\n\r\n                                                <Col md={8}>\r\n                                                    <FormGroup>\r\n                                                        <FormLabel><FormattedMessage id=\"IDS_ADDRESS\" message=\"Address\" /></FormLabel>\r\n                                                        <ReadOnlyText>\r\n                                                            {this.props.Login.masterData.SelectedPatient.saddress === null || this.props.Login.masterData.SelectedPatient.saddress.length === 0 ? '-' :\r\n                                                                this.props.Login.masterData.SelectedPatient.saddress}\r\n                                                        </ReadOnlyText>\r\n                                                    </FormGroup>\r\n                                                </Col>\r\n\r\n\r\n                                            </Row>\r\n                                            <Row>\r\n                                                <Col>\r\n                                                    <DataGrid\r\n                                                        userRoleControlRights={this.state.userRoleControlRights}\r\n                                                        controlMap={this.state.controlMap}\r\n                                                        primaryKeyField={\"npreregno\"}\r\n                                                        data={this.props.Login.masterData && this.props.Login.masterData[\"PatientHistory\"]}\r\n                                                        dataResult={process(this.props.Login.masterData && (this.props.Login.masterData[\"PatientHistory\"] || []), this.state.dataState)}\r\n                                                        dataState={this.state.dataState}\r\n                                                        dataStateChange={(event)=>this.setState({dataState:event.dataState})}\r\n                                                        extractedColumnList={this.columnList}\r\n                                                        inputParam={this.props.Login.inputParam}\r\n                                                        userInfo={this.props.Login.userInfo}\r\n                                                        methodUrl={this.props.Login.inputParam.methodUrl}\r\n                                                        pageable={true}\r\n                                                        scrollable={\"scrollable\"}\r\n                                                        isActionRequired={false}\r\n                                                        isToolBarRequired={false}\r\n                                                        selectedId={null}\r\n                                                        hideColumnFilter={false}\r\n                                                        expandField={\"expanded\"}\r\n                                                        handleExpandChange={this.handleExpandChange}\r\n                                                        hasChild={true}\r\n                                                        childColumnList={this.childColumnList}\r\n                                                        childMappingField={\"npreregno\"}\r\n                                                        childList={this.props.Login.testMap || new Map()}\r\n                                                    />\r\n                                                </Col>\r\n                                            </Row>\r\n\r\n                                        </Card.Body>\r\n                                    </>\r\n                                    : \"\"\r\n                                }\r\n                            </Card>\r\n                        </ContentPanel>\r\n                    </Col></Row>\r\n            </div>\r\n\r\n            {this.props.Login.openModal ?\r\n                <SlideOutModal show={this.props.Login.openModal}\r\n                    closeModal={this.closeModal}\r\n                    operation={this.props.Login.operation}\r\n                    inputParam={this.props.Login.inputParam}\r\n                    screenName={this.props.Login.screenName}\r\n                    onSaveClick={this.onSaveClick}\r\n                    esign={this.props.Login.loadEsign}\r\n                    validateEsign={this.validateEsign}\r\n                    masterStatus={this.props.Login.masterStatus}\r\n                    updateStore={this.props.updateStore}\r\n                    selectedRecord={this.state.selectedRecord || {}}\r\n                    mandatoryFields={mandatoryFields}\r\n                    addComponent={this.props.Login.loadEsign ?\r\n                        <Esign operation={this.props.Login.operation}\r\n                            onInputOnChange={this.onInputOnChange}\r\n                            inputParam={this.props.Login.inputParam}\r\n                            selectedRecord={this.state.selectedRecord || {}}\r\n                        />\r\n                        : <AddPatient\r\n                            selectedRecord={this.state.selectedRecord || {}}\r\n                            onInputOnChange={this.onInputOnChange}\r\n                            onComboChange={this.onComboChange}\r\n                            onNumericInputOnChange={this.onNumericInputOnChange}\r\n                            handleDateChange={this.handleDateChange}\r\n                            genderList={this.props.Login.genderList || []}\r\n                            selectedPatient={this.props.Login.masterData.SelectedPatient || {}}\r\n                            operation={this.props.Login.operation}\r\n                            inputParam={this.props.Login.inputParam}\r\n                            userInfo={this.props.Login.userInfo}\r\n                            currentTime={this.props.Login.currentTime}\r\n\r\n                        />}\r\n                /> : \"\"}\r\n        </>\r\n        );\r\n    }\r\n\r\n    componentDidUpdate(previousProps) {\r\n        if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\r\n            this.setState({ selectedRecord: this.props.Login.selectedRecord });\r\n        }\r\n        if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\r\n            const userRoleControlRights = [];\r\n            if (this.props.Login.userRoleControlRights) {\r\n                this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item =>\r\n                    userRoleControlRights.push(item.ncontrolcode))\r\n            }\r\n            const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode)\r\n            this.setState({ userRoleControlRights, controlMap });\r\n        }\r\n    }\r\n\r\n    ConfirmDelete = (deleteId) => {\r\n        this.confirmMessage.confirm(\"deleteMessage\", this.props.intl.formatMessage({ id: \"IDS_DELETE\" }), this.props.intl.formatMessage({ id: \"IDS_DEFAULTCONFIRMMSG\" }),\r\n            this.props.intl.formatMessage({ id: \"IDS_OK\" }), this.props.intl.formatMessage({ id: \"IDS_CANCEL\" }),\r\n            () => this.deletePatient(\"Patient\", this.props.Login.masterData.SelectedPatient, \"delete\", deleteId));\r\n    }\r\n\r\n    closeModal = () => {\r\n        let loadEsign = this.props.Login.loadEsign;\r\n        let openModal = this.props.Login.openModal;\r\n        let selectedRecord = this.props.Login.selectedRecord;\r\n\r\n        if (this.props.Login.loadEsign) {\r\n            if (this.props.Login.operation === \"delete\") {\r\n                loadEsign = false;\r\n                openModal = false;\r\n                selectedRecord = {};\r\n            }\r\n            else {\r\n                loadEsign = false;\r\n            }\r\n        }\r\n        else {\r\n            openModal = false;\r\n            selectedRecord = {};\r\n        }\r\n\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { openModal, loadEsign, selectedRecord, selectedId: null }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n\r\n    }\r\n\r\n    onComboChange = (comboData, fieldName) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        selectedRecord[fieldName] = comboData;\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    onNumericInputOnChange = (value, name) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        selectedRecord[name] = value;\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    onInputOnChange = (event) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n\r\n        if (event.target.type === 'checkbox') {\r\n            selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\r\n\r\n        }\r\n        else {\r\n            if (event.target.name === \"sphoneno\") {\r\n                if (event.target.value !== \"\") {\r\n                    event.target.value = validatePhoneNumber(event.target.value);\r\n                    selectedRecord[event.target.name] = event.target.value !== \"\" ? event.target.value : selectedRecord[event.target.name];\r\n                }\r\n                else {\r\n                    selectedRecord[event.target.name] = event.target.value;\r\n                }\r\n            }\r\n            else {\r\n                selectedRecord[event.target.name] = event.target.value;\r\n            }\r\n        }\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    handleDateChange = (dateName, dateValue) => {\r\n        const { selectedRecord } = this.state;\r\n        selectedRecord[dateName] = dateValue;\r\n        const age = ageCalculate(dateValue);\r\n        selectedRecord[\"sage\"] = age;\r\n\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    onSaveClick = (saveType, formRef) => {\r\n\r\n        let patientData = [];\r\n        patientData[\"userinfo\"] = this.props.Login.userInfo;\r\n\r\n        let postParam = { inputListName: \"PatientList\", selectedObject: \"SelectedPatient\", primaryKeyField: \"npatientcode\" };\r\n\r\n        if (this.props.Login.operation === \"update\") {\r\n            postParam['primaryKeyValue'] = this.props.Login.masterData.SelectedPatient.npatientcode;\r\n            patientData[\"patient\"] = {\"npatientcode\": this.props.Login.masterData.SelectedPatient.npatientcode,\r\n                           \"sfirstname\": this.state.selectedRecord.sfirstname,\r\n                           \"slastname\": this.state.selectedRecord.slastname ,\r\n                           \"snationalid\": this.state.selectedRecord.snationalid, \r\n                           \"sage\": this.state.selectedRecord.sage,\r\n                           \"sphoneno\": this.state.selectedRecord.sphoneno ,\r\n                           \"saddress\":this.state.selectedRecord.saddress ,\r\n                           \"sfathername\":this.state.selectedRecord.sfathername\r\n                        //    \"ddob\": formatInputDate(\r\n                        //     this.state.selectedRecord[\"ddob\"],false)        \r\n                            }\r\n        }\r\n        else {\r\n            patientData[\"patient\"] = { \"nsitecode\": this.props.Login.userInfo.nmastersitecode };\r\n\r\n            this.patientFieldList.map(item => {\r\n                return patientData[\"patient\"][item] = this.state.selectedRecord[item]\r\n            });\r\n        }\r\n\r\n        patientData[\"patient\"][\"ngendercode\"] = this.state.selectedRecord[\"ngendercode\"] ? this.state.selectedRecord[\"ngendercode\"].value : transactionStatus.NA;\r\n\r\n\r\n        // if (patientData[\"patient\"][\"ddob\"] !== undefined\r\n        //     && patientData[\"patient\"][\"ddob\"] !== null && patientData[\"patient\"][\"ddob\"] !== \"\") {\r\n        //     patientData[\"patient\"][\"ddob\"] = formatInputDate(patientData[\"patient\"][\"ddob\"],false);\r\n\r\n        // }\r\n        if (this.state.selectedRecord[\"ddob\"]) {\r\n            patientData[\"patient\"][\"ddob\"] = formatInputDate(\r\n              this.state.selectedRecord[\"ddob\"],\r\n              false\r\n            );\r\n          }\r\n        const inputParam = {\r\n            classUrl: \"patient\",\r\n            methodUrl: \"Patient\",\r\n            inputData: patientData,\r\n            operation: this.props.Login.operation,\r\n            saveType, formRef, postParam, searchRef: this.searchRef,\r\n            isClearSearch: this.props.Login.isClearSearch\r\n        }\r\n        const masterData = this.props.Login.masterData;\r\n\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\r\n\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData }, saveType\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.crudMaster(inputParam, masterData, \"openModal\");\r\n        }\r\n\r\n    }\r\n\r\n    deletePatient = (methodUrl, selectedPatient, operation, ncontrolCode) => {\r\n\r\n        const postParam = {\r\n            inputListName: \"PatientList\", selectedObject: \"SelectedPatient\",\r\n            primaryKeyField: \"npatientcode\",\r\n            primaryKeyValue: selectedPatient.npatientcode,\r\n            fetchUrl: \"patient/getPatient\",\r\n            fecthInputObject: { userinfo: this.props.Login.userInfo },\r\n        }\r\n\r\n        const inputParam = {\r\n            classUrl: this.props.Login.inputParam.classUrl,\r\n            methodUrl, postParam,\r\n            inputData: {\r\n                \"userinfo\": this.props.Login.userInfo,\r\n                \"patient\": selectedPatient\r\n            },\r\n            operation,\r\n            isClearSearch: this.props.Login.isClearSearch\r\n        }\r\n\r\n        const masterData = this.props.Login.masterData;\r\n\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, ncontrolCode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData },\r\n                    openModal: true, screenName: \"IDS_PATIENTMASTER\", operation\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.crudMaster(inputParam, masterData, \"openModal\");\r\n        }\r\n\r\n    }\r\n\r\n    validateEsign = () => {\r\n        const inputParam = {\r\n            inputData: {\r\n                \"userinfo\": {\r\n                    ...this.props.Login.userInfo,\r\n                    sreason: this.state.selectedRecord[\"esigncomments\"]\r\n                },\r\n                password: this.state.selectedRecord[\"esignpassword\"]\r\n            },\r\n            screenData: this.props.Login.screenData\r\n        }\r\n        this.props.validateEsignCredential(inputParam, \"openModal\");\r\n    }\r\n\r\n    handleExpandChange = (row, dataState) => {\r\n        const viewParam = {\r\n            userInfo: this.props.Login.userInfo, primaryKeyField: \"npreregno\",\r\n            masterData: this.props.Login.masterData\r\n        };\r\n\r\n        this.props.getTestParameter({\r\n            ...viewParam, dataState,\r\n            primaryKeyValue: row[\"dataItem\"][viewParam.primaryKeyField],\r\n            viewRow: row[\"dataItem\"]\r\n        });\r\n\r\n    }\r\n\r\n    reloadData = () => {\r\n        this.searchRef.current.value = \"\";\r\n\r\n        const inputParam = {\r\n            inputData: { \"userinfo\": this.props.Login.userInfo },\r\n            classUrl: \"patient\",\r\n            methodUrl: \"Patient\",\r\n            displayName: \"IDS_PATIENTMASTER\",\r\n            userInfo: this.props.Login.userInfo,\r\n            isClearSearch: this.props.Login.isClearSearch\r\n\r\n        };\r\n\r\n        this.props.callService(inputParam);\r\n    }\r\n}\r\nexport default connect(mapStateToProps, {\r\n    callService, crudMaster, validateEsignCredential,\r\n    updateStore, getPatientDetail, getPatientComboService,\r\n    filterColumnData, getTestParameter, getPatientReport\r\n})(injectIntl(PatientMaster));\r\n\r\n"]},"metadata":{},"sourceType":"module"}