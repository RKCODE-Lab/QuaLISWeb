{"ast":null,"code":"var _jsxFileName = \"D:\\\\LIMSWFH\\\\LIMSPOSTGRESQL\\\\QuaLISWeb\\\\src\\\\pages\\\\dynamicmaster\\\\DynamicMaster.jsx\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { injectIntl } from 'react-intl';\nimport { Row, Col } from 'react-bootstrap';\nimport { toast } from 'react-toastify';\nimport { process } from '@progress/kendo-data-query';\nimport DynamicDataGrid from '../../components/data-grid/data-grid.component';\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\nimport Esign from '../../pages/audittrail/Esign';\nimport { callService, crudMaster, updateStore, validateEsignCredential, getEditDynamicMasterCombo, //fetchRecord,\ngetDynamicMasterCombo, getChildValues, addMasterRecord, getAddMasterCombo, getDynamicMasterTempalte, getChildComboMaster, getChildValuesForAddMaster } from '../../actions';\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\nimport { showEsign, getControlMap, deleteAttachmentDropZone, getSameRecordFromTwoArrays, onDropAttachFileList, convertDateTimetoString, validateEmail, formatDate, sortData, ageCalculate, formatInputDate, extractFieldHeader, childComboClear, Lims_JSON_stringify } from '../../components/CommonScript';\nimport { ListWrapper } from '../../components/client-group.styles';\nimport DynamicSlideout from '../dynamicpreregdesign/DynamicSlideout.jsx';\nimport { designComponents, transactionStatus } from '../../components/Enumeration';\nimport { getFieldSpecification } from '../../components/type2component/Type2FieldSpecificationList';\nimport AddMasterRecords from '../dynamicpreregdesign/AddMasterRecords';\nimport { getFieldSpecification as getFieldSpecification1 } from '../../components/type1component/Type1FieldSpecificationList';\nimport { getFieldSpecification as getFieldSpecification3 } from '../../components/type3component/Type3FieldSpecificationList';\nimport ImportTemplate from './ImportTemplate';\n\nconst mapStateToProps = state => {\n  return {\n    Login: state.Login\n  };\n};\n\nclass DynamicMaster extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.dataStateChange = event => {\n      this.setState({\n        dataResult: process(this.state.data || [], event.dataState),\n        dataState: event.dataState\n      });\n    };\n\n    this.removeIndex = (data, removeIndex) => {\n      const data1 = [...data.splice(0, removeIndex), ...data.splice(removeIndex + 1)];\n      return data1;\n    };\n\n    this.closeModal = () => {\n      let loadEsign = this.props.Login.loadEsign;\n      let openModal = this.props.Login.openModal;\n      let selectedRecord = this.props.Login.selectedRecord;\n      let selectedMaster = this.props.Login.selectedMaster;\n      let selectedControl = this.props.Login.selectedControl;\n      let masterextractedColumnList = this.props.Login.masterextractedColumnList;\n      let masterfieldList = this.props.Login.masterfieldList;\n      let masterdataList = this.props.Login.masterfieldList;\n      let mastercomboComponents = this.props.Login.masterfieldList;\n      let masterwithoutCombocomponent = this.props.Login.masterfieldList;\n      let masterComboColumnFiled = this.props.Login.masterComboColumnFiled;\n      let masterDesign = this.props.Login.masterDesign;\n      let addMaster = this.props.Login.addMaster;\n      let masterIndex = this.props.Login.masterIndex;\n      let screenName = this.props.Login.screenName;\n\n      if (this.props.Login.loadEsign) {\n        if (this.props.Login.operation === \"delete\") {\n          loadEsign = false;\n          openModal = false;\n          selectedRecord = {};\n        } else {\n          loadEsign = false;\n          selectedRecord['esignpassword'] = \"\";\n          selectedRecord['esigncomments'] = \"\";\n          selectedRecord['esignreason'] = \"\";\n        }\n      } else if (this.props.Login.addMaster) {\n        if (masterIndex !== 0) {\n          screenName = selectedControl[masterIndex - 1].displayname[this.props.Login.userInfo.slanguagetypecode];\n          selectedMaster = this.removeIndex(selectedMaster, masterIndex);\n          selectedControl = this.removeIndex(selectedControl, masterIndex);\n          masterextractedColumnList = masterextractedColumnList && this.removeIndex(masterextractedColumnList, masterIndex);\n          masterfieldList = masterfieldList && this.removeIndex(masterfieldList, masterIndex);\n          masterdataList = masterdataList && this.removeIndex(masterdataList, masterIndex);\n          mastercomboComponents = mastercomboComponents && this.removeIndex(mastercomboComponents, masterIndex);\n          masterComboColumnFiled = masterComboColumnFiled && this.removeIndex(masterComboColumnFiled, masterIndex);\n          masterwithoutCombocomponent = masterwithoutCombocomponent && this.removeIndex(masterwithoutCombocomponent, masterIndex);\n          masterDesign = masterDesign && this.removeIndex(masterDesign, masterIndex);\n          masterIndex = masterIndex - 1; //  masterprimaryKeyField = \"\"\n          //addMaster = false\n        } else {\n          selectedMaster = [];\n          selectedControl = [];\n          masterextractedColumnList = [];\n          masterfieldList = [];\n          addMaster = false;\n          masterdataList = [];\n          mastercomboComponents = [];\n          masterwithoutCombocomponent = [];\n          masterComboColumnFiled = [];\n          masterDesign = [];\n          masterIndex = undefined;\n          screenName = this.props.Login.inputParam.displayName;\n        }\n      } else {\n        openModal = false;\n        selectedRecord = {};\n        selectedMaster = [];\n        selectedControl = [];\n        masterextractedColumnList = [];\n        masterfieldList = [];\n        addMaster = false;\n        masterdataList = [];\n        mastercomboComponents = [];\n        masterwithoutCombocomponent = [];\n        masterComboColumnFiled = [];\n        masterDesign = [];\n        masterIndex = undefined;\n      }\n\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          openModal,\n          loadEsign,\n          selectedRecord,\n          selectedId: null,\n          selectedMaster,\n          selectedControl,\n          masterextractedColumnList,\n          masterfieldList,\n          addMaster,\n          masterIndex,\n          masterdataList,\n          mastercomboComponents,\n          masterwithoutCombocomponent,\n          masterComboColumnFiled,\n          masterDesign,\n          screenName\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onSaveClickImportFile = (saveType, formRef) => {\n      //add \n      let inputFileData = {\n        nsitecode: this.props.Login.userInfo.nmastersitecode\n      };\n      let editData = {};\n      const formData = new FormData();\n      const selectedRecord = this.state.selectedRecord;\n      const acceptedFiles = selectedRecord.stemplatefilename;\n\n      if (acceptedFiles && acceptedFiles.length === 1) {\n        inputFileData['userinfo'] = this.props.Login.userInfo;\n\n        if (acceptedFiles && acceptedFiles.length === 1) {\n          acceptedFiles.forEach((file, index) => {\n            formData.append(\"uploadedFile\", file);\n          });\n        }\n\n        const dateList = [];\n        this.props.Login.masterData.DynamicMasterDesign.screendesign.masterdatefields.map(x => {\n          dateList.push(x['2']);\n        });\n        formData.append('comboComponents', Lims_JSON_stringify(JSON.stringify(this.state.comboComponents), false));\n        formData.append('masterdateconstraints', Lims_JSON_stringify(JSON.stringify(this.props.Login.masterData.DynamicMasterDesign.screendesign.masterdateconstraints), false));\n        formData.append('masterdatelist', Lims_JSON_stringify(JSON.stringify(dateList), false));\n        formData.append('mastercombinationunique', Lims_JSON_stringify(JSON.stringify(this.props.Login.masterData.DynamicMasterDesign.screendesign.mastercombinationunique), false));\n        formData.append('ndesigntemplatemappingcode', this.props.Login.masterData.DynamicMasterDesign.ndesigntemplatemappingcode);\n        const inputParam = {\n          classUrl: this.props.Login.inputParam.classUrl,\n          methodUrl: this.props.Login.inputParam.methodUrl,\n          inputData: {\n            userinfo: this.props.Login.userInfo\n          },\n          formData: formData,\n          editData: editData,\n          isFileupload: true,\n          operation: this.props.Login.operation,\n          displayName: this.props.Login.inputParam.displayName,\n          saveType,\n          formRef\n        };\n        const esignNeeded = showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode);\n\n        if (esignNeeded) {\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              loadEsign: true,\n              screenData: {\n                inputParam,\n                masterData: this.props.Login.masterData\n              },\n              openModal: true,\n              screenName: this.props.intl.formatMessage({\n                id: this.props.Login.inputParam.displayName\n              }),\n              operation: this.props.Login.operation\n            }\n          };\n          this.props.updateStore(updateInfo);\n        } else {\n          this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\n        }\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_PLEASESELECTTHEFILE\"\n        }));\n      }\n    };\n\n    this.onComboChangeMasterDyanmic = (comboData, control, customName) => {\n      let comboName = customName || control.label;\n      let selectedMaster = this.state.selectedMaster || [];\n      const masterIndex = this.props.Login.masterIndex;\n      selectedMaster[masterIndex] = selectedMaster[masterIndex] && { ...selectedMaster[masterIndex]\n      } || {}; //if (comboData) {\n\n      comboData[\"item\"] = { ...comboData[\"item\"],\n        \"pkey\": control.valuemember,\n        \"nquerybuildertablecode\": control.nquerybuildertablecode,\n        \"source\": control.source\n      };\n      selectedMaster[masterIndex][comboName] = comboData; // console.log(\"selected:\", selectedMaster, comboData, control, customName);\n\n      if (control.child && control.child.length > 0) {\n        const childComboList = getSameRecordFromTwoArrays(this.props.Login.mastercomboComponents[masterIndex], control.child, \"label\");\n        let childColumnList = {};\n        childComboList.map(columnList => {\n          const val = this.comboChild(this.props.Login.mastercomboComponents[masterIndex], columnList, childColumnList, false);\n          childColumnList = val.childColumnList;\n        });\n        const parentList = getSameRecordFromTwoArrays(this.props.Login.masterwithoutCombocomponent[masterIndex], control.child, \"label\");\n\n        if (comboData) {\n          const inputParem = {\n            child: control.child,\n            source: control.source,\n            primarykeyField: control.valuemember,\n            value: comboData.value,\n            item: comboData.item\n          };\n          this.props.getChildValuesForAddMaster(inputParem, this.props.Login.userInfo, selectedMaster, this.props.Login.masterdataList, childComboList, childColumnList, this.props.Login.masterwithoutCombocomponent, [...childComboList, ...parentList], masterIndex);\n        } else {\n          let comboData = this.props.Login.masterdataList;\n          const withoutCombocomponent = this.props.Login.masterwithoutCombocomponent || [];\n          const inputParam = {\n            control,\n            comboComponents: this.props.Login.mastercomboComponents[masterIndex],\n            withoutCombocomponent: withoutCombocomponent[masterIndex],\n            selectedMaster: selectedMaster[masterIndex],\n            comboData: comboData[masterIndex]\n          };\n          const childParam = childComboClear(inputParam);\n          selectedMaster[masterIndex] = childParam.selectedRecord;\n          comboData[masterIndex] = childParam.comboData;\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              selectedMaster,\n              mastedataList: comboData\n            }\n          };\n          this.props.updateStore(updateInfo);\n        }\n      } else {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            selectedMaster\n          }\n        };\n        this.props.updateStore(updateInfo);\n      }\n    };\n\n    this.onInputOnChangeMasterDynamic = (event, radiotext) => {\n      let selectedMaster = this.state.selectedMaster || [];\n      const masterIndex = this.props.Login.masterIndex;\n      selectedMaster[masterIndex] = selectedMaster[masterIndex] && { ...selectedMaster[masterIndex]\n      } || {};\n\n      if (event.target.type === 'toggle') {\n        selectedMaster[masterIndex][event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\n      } else if (event.target.type === 'numeric') {\n        if (/\\D/.test(event.target.value)) selectedMaster[masterIndex][event.target.name] = event.target.value;\n      } else if (event.target.type === 'checkbox') {\n        const value = selectedMaster[masterIndex][event.target.name];\n\n        if (value !== '' && value !== undefined) {\n          if (value.includes(radiotext)) {\n            const index = value.indexOf(radiotext);\n\n            if (index !== -1) {\n              if (index === 0) {\n                const indexcomma = value.indexOf(\",\");\n\n                if (indexcomma !== -1) {\n                  selectedMaster[masterIndex][event.target.name] = value.slice(indexcomma + 1);\n                } else {\n                  selectedMaster[masterIndex][event.target.name] = \"\";\n                }\n              } else {\n                if (value.slice(index).indexOf(\",\") !== -1) {\n                  selectedMaster[masterIndex][event.target.name] = value.slice(0, index) + value.slice(index + value.slice(index).indexOf(\",\") + 1);\n                } else {\n                  selectedMaster[masterIndex][event.target.name] = value.slice(0, index - 1);\n                }\n              }\n            }\n          } else {\n            selectedMaster[masterIndex][event.target.name] = value + ',' + radiotext;\n          }\n        } else {\n          selectedMaster[masterIndex][event.target.name] = radiotext;\n        }\n      } else if (event.target.type === 'radio') {\n        selectedMaster[masterIndex][event.target.name] = radiotext;\n      } else {\n        selectedMaster[masterIndex][event.target.name] = event.target.value;\n      }\n\n      this.setState({\n        selectedMaster\n      });\n    };\n\n    this.handleDateChangeMasterDynamic = (dateValue, dateName) => {\n      let selectedMaster = this.state.selectedMaster || [];\n      const masterIndex = this.props.Login.masterIndex;\n      selectedMaster[masterIndex] = selectedMaster[masterIndex] && { ...selectedMaster[masterIndex]\n      } || {};\n      selectedMaster[masterIndex][dateName] = dateValue;\n      this.setState({\n        selectedMaster\n      });\n    };\n\n    this.onNumericInputChangeMasterDynamic = (value, name) => {\n      let selectedMaster = this.state.selectedMaster || [];\n      const masterIndex = this.props.Login.masterIndex;\n      selectedMaster[masterIndex] = selectedMaster[masterIndex] && { ...selectedMaster[masterIndex]\n      } || {};\n      selectedMaster[masterIndex][name] = value;\n      this.setState({\n        selectedMaster\n      });\n    };\n\n    this.onNumericBlurMasterDynamic = (value, control) => {\n      let selectedMaster = this.state.selectedMaster || [];\n      const masterIndex = this.props.Login.masterIndex;\n      selectedMaster[masterIndex] = selectedMaster[masterIndex] && { ...selectedMaster[masterIndex]\n      } || {};\n\n      if (selectedMaster[masterIndex][control.label]) {\n        if (control.max) {\n          if (!(selectedMaster[masterIndex][control.label] < parseFloat(control.max))) {\n            selectedMaster[masterIndex][control.label] = control.precision ? parseFloat(control.max) : parseInt(control.max);\n          }\n        }\n\n        if (control.min) {\n          if (!(selectedMaster[masterIndex][control.label] > parseFloat(control.min))) {\n            selectedMaster[masterIndex][control.label] = control.precision ? parseFloat(control.min) : parseInt(control.min);\n          }\n        }\n      }\n\n      this.setState({\n        selectedMaster\n      });\n    };\n\n    this.onComboChangeMaster = (comboData, fieldName, item) => {\n      const selectedMaster = this.state.selectedMaster || [];\n      const masterIndex = this.props.Login.masterIndex;\n      selectedMaster[masterIndex] = selectedMaster[masterIndex] && { ...selectedMaster[masterIndex]\n      } || {};\n\n      if (comboData !== null) {\n        if (this.props.Login.selectedControl[masterIndex].table.item.nformcode === 137) {\n          selectedMaster[masterIndex][item.tableDataField] = comboData.value;\n        } else if (item.foreignDataField) {\n          selectedMaster[masterIndex][item.foreignDataField] = comboData.value;\n        }\n      }\n\n      selectedMaster[masterIndex][fieldName] = comboData;\n\n      if (item.childIndex !== undefined) {\n        this.props.getChildComboMaster(selectedMaster, fieldName, item, this.props.Login.selectedControl, this.props.Login.masterfieldList, this.props.Login.masterdataList, this.props.Login.userInfo, masterIndex);\n      } else {\n        this.setState({\n          selectedMaster\n        });\n      }\n    };\n\n    this.handleDateChangeMaster = (dateName, dateValue, item) => {\n      //   const { selectedMaster } = this.state;\n      const selectedMaster = this.state.selectedMaster || [];\n      const masterIndex = this.props.Login.masterIndex;\n      selectedMaster[masterIndex] = selectedMaster[masterIndex] && { ...selectedMaster[masterIndex]\n      } || {};\n      selectedMaster[masterIndex][dateName] = dateValue;\n      const age = ageCalculate(dateValue);\n      selectedMaster[masterIndex][\"sage\"] = age;\n      this.setState({\n        selectedMaster\n      });\n    };\n\n    this.onNumericInputOnChangeMaster = (value, name, item) => {\n      const selectedMaster = this.state.selectedMaster || [];\n      const masterIndex = this.props.Login.masterIndex;\n      selectedMaster[masterIndex] = selectedMaster[masterIndex] && { ...selectedMaster[masterIndex]\n      } || {};\n      selectedMaster[masterIndex][name] = value;\n      this.setState({\n        selectedMaster\n      });\n    };\n\n    this.onInputOnChangeMaster = event => {\n      const selectedMaster = this.state.selectedMaster || [];\n      const masterIndex = this.props.Login.masterIndex;\n      selectedMaster[masterIndex] = selectedMaster[masterIndex] && { ...selectedMaster[masterIndex]\n      } || {};\n\n      if (event.target.type === 'checkbox') {\n        selectedMaster[masterIndex][event.target.name] = event.target.checked === true ? 3 : 4;\n\n        if (this.props.Login.selectedControl[masterIndex].table.item.nformcode === 137) {\n          if (selectedMaster[masterIndex].nneedcurrentaddress === 3) {\n            selectedMaster[masterIndex].sflatnotemp = selectedMaster[masterIndex].sflatno;\n            selectedMaster[masterIndex].shousenotemp = selectedMaster[masterIndex].shouseno;\n            selectedMaster[masterIndex].spostalcodetemp = selectedMaster[masterIndex].spostalcode;\n            selectedMaster[masterIndex].sstreettemp = selectedMaster[masterIndex].sstreet;\n            selectedMaster[masterIndex].scitynametemp = selectedMaster[masterIndex].scityname;\n            selectedMaster[masterIndex].sdistrictnametemp = selectedMaster[masterIndex].sdistrictname;\n            selectedMaster[masterIndex].sregionnametemp = selectedMaster[masterIndex].sregionname;\n          } else {\n            selectedMaster[masterIndex].sflatnotemp = \"\";\n            selectedMaster[masterIndex].shousenotemp = \"\";\n            selectedMaster[masterIndex].spostalcodetemp = \"\";\n            selectedMaster[masterIndex].sstreettemp = \"\";\n            selectedMaster[masterIndex].scitynametemp = \"\";\n            selectedMaster[masterIndex].sdistrictnametemp = \"\";\n            selectedMaster[masterIndex].sregionnametemp = \"\";\n          }\n        }\n      } else {\n        selectedMaster[masterIndex][event.target.name] = event.target.value;\n      }\n\n      this.setState({\n        selectedMaster\n      });\n    };\n\n    this.onSaveMasterRecord = (saveType, formRef) => {\n      //add / edit            \n      const masterIndex = this.props.Login.masterIndex;\n      let inputData = [];\n      const selectedControl = this.props.Login.selectedControl;\n      const masterDesign = this.props.Login.masterDesign;\n      inputData[\"userinfo\"] = { ...this.props.Login.userInfo,\n        nformcode: selectedControl[masterIndex].table.item.nformcode\n      };\n      inputData[selectedControl[masterIndex].table.item.methodUrl.toLowerCase()] = {\n        \"nsitecode\": this.props.Login.userInfo.nmastersitecode\n      };\n      const methodUrl = selectedControl[masterIndex].table.item.methodUrl.toLowerCase();\n\n      if (selectedControl[masterIndex].table.item.component === 'Dynamic') {\n        const selectedMaster = this.state.selectedMaster;\n        inputData[\"userinfo\"] = { ...this.props.Login.userInfo,\n          nformcode: selectedControl[masterIndex].table.item.nformcode\n        };\n        inputData[\"masterdateconstraints\"] = masterDesign[masterIndex].screendesign.masterdateconstraints;\n        inputData[\"masterdatefields\"] = masterDesign[masterIndex].screendesign.masterdatefields;\n        inputData[\"mastercombinationunique\"] = masterDesign[masterIndex].screendesign.mastercombinationunique; //add                          \n\n        inputData[\"dynamicmaster\"] = {\n          nformcode: selectedControl[masterIndex].table.item.nformcode,\n          ndesigntemplatemappingcode: masterDesign[masterIndex].ndesigntemplatemappingcode,\n          jsondata: {},\n          jsonuidata: {}\n        };\n        const dateList = [];\n        const defaulttimezone = this.props.Login.defaulttimezone;\n        masterDesign[masterIndex] && masterDesign[masterIndex].slideoutdesign.map(row => {\n          row.children.map(column => {\n            column.children.map(component => {\n              if (component.hasOwnProperty(\"children\")) {\n                component.children.map(componentrow => {\n                  if (componentrow.inputtype === \"combo\") {\n                    inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label] = selectedMaster[componentrow.label] ? {\n                      value: selectedMaster[masterIndex][componentrow.label].value,\n                      label: selectedMaster[masterIndex][componentrow.label].label,\n                      pkey: selectedMaster[masterIndex][componentrow.label].item.pkey,\n                      nquerybuildertablecode: selectedMaster[masterIndex][componentrow.label].item.nquerybuildertablecode,\n                      source: selectedMaster[masterIndex][componentrow.label].item.source\n                    } : -1;\n                    inputData[\"dynamicmaster\"][\"jsonuidata\"][componentrow.label] = selectedMaster[masterIndex][componentrow.label] ? selectedMaster[masterIndex][componentrow.label].label : \"\";\n                  } else if (componentrow.inputtype === \"date\") {\n                    if (componentrow.mandatory) {\n                      inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label] = formatDate(selectedMaster[masterIndex][componentrow.label], false);\n                      inputData[\"dynamicmaster\"][\"jsonuidata\"][componentrow.label] = inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label]; //inputData[\"dynamicmaster\"][\"jsonuidata\"][componentrow.label] = convertDateTimetoString(selectedRecord[componentrow.label], userInfo);\n                    } else {\n                      inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label] = componentrow.loadcurrentdate ? formatDate(selectedMaster[masterIndex][componentrow.label] || new Date(), false) : selectedMaster[masterIndex][componentrow.label] ? formatDate(selectedMaster[masterIndex][componentrow.label], false) : \"\";\n                      inputData[\"dynamicmaster\"][\"jsonuidata\"][componentrow.label] = inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label]; //convertDateTimetoString(selectedRecord[componentrow.label], userInfo);\n                    }\n\n                    if (componentrow.timezone) {\n                      inputData[\"dynamicmaster\"][\"jsondata\"][`tz${componentrow.label}`] = selectedMaster[masterIndex][`tz${componentrow.label}`] ? {\n                        value: selectedMaster[masterIndex][`tz${componentrow.label}`].value,\n                        label: selectedMaster[masterIndex][`tz${componentrow.label}`].label\n                      } : defaulttimezone ? defaulttimezone : -1;\n                      inputData[\"dynamicmaster\"][\"jsonuidata\"][`tz${componentrow.label}`] = inputData[\"dynamicmaster\"][\"jsondata\"][`tz${componentrow.label}`];\n                    }\n\n                    dateList.push(componentrow.label);\n                  } else {\n                    inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label] = selectedMaster[masterIndex][componentrow.label] ? selectedMaster[masterIndex][componentrow.label] : \"\";\n                    inputData[\"dynamicmaster\"][\"jsonuidata\"][componentrow.label] = inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label]; // inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label]\n                  }\n\n                  return inputData[\"dynamicmaster\"];\n                });\n              } else {\n                if (component.inputtype === \"combo\") {\n                  inputData[\"dynamicmaster\"][\"jsondata\"][component.label] = selectedMaster[masterIndex][component.label] ? {\n                    value: selectedMaster[masterIndex][component.label].value,\n                    label: selectedMaster[masterIndex][component.label].label,\n                    pkey: selectedMaster[masterIndex][component.label].item.pkey,\n                    nquerybuildertablecode: selectedMaster[masterIndex][component.label].item.nquerybuildertablecode,\n                    source: selectedMaster[masterIndex][component.label].item.source\n                  } : -1;\n                  inputData[\"dynamicmaster\"][\"jsonuidata\"][component.label] = inputData[\"dynamicmaster\"][\"jsondata\"][component.label].label; //selectedRecord[component.label] ? selectedRecord[component.label].label : \"\"\n                } else if (component.inputtype === \"date\") {\n                  if (component.mandatory) {\n                    inputData[\"dynamicmaster\"][\"jsondata\"][component.label] = formatDate(selectedMaster[masterIndex][component.label], false); // convertDateTimetoString(selectedRecord[component.label] ?\n                    // selectedRecord[component.label] : new Date(), userInfo);\n\n                    inputData[\"dynamicmaster\"][\"jsonuidata\"][component.label] = inputData[\"dynamicmaster\"][\"jsondata\"][component.label]; //convertDateTimetoString(selectedRecord[component.label], userInfo);\n                  } else {\n                    inputData[\"dynamicmaster\"][\"jsondata\"][component.label] = component.loadcurrentdate ? //convertDateTimetoString(selectedRecord[component.label] ?                                      \n                    //    selectedRecord[component.label] : new Date(), userInfo) :\n                    formatDate(selectedMaster[masterIndex][component.label] || new Date(), false) : selectedMaster[masterIndex][component.label] ? // convertDateTimetoString(selectedRecord[component.label] ?\n                    //   selectedRecord[component.label] : new Date(), userInfo) : \"\";\n                    formatDate(selectedMaster[masterIndex][component.label], false) : \"\";\n                    inputData[\"dynamicmaster\"][\"jsonuidata\"][component.label] = inputData[\"dynamicmaster\"][\"jsondata\"][component.label]; //convertDateTimetoString(selectedRecord[component.label], userInfo)\n                  }\n\n                  if (component.timezone) {\n                    inputData[\"dynamicmaster\"][\"jsondata\"][`tz${component.label}`] = selectedMaster[masterIndex][`tz${component.label}`] ? {\n                      value: selectedMaster[masterIndex][`tz${component.label}`].value,\n                      label: selectedMaster[masterIndex][`tz${component.label}`].label\n                    } : defaulttimezone ? defaulttimezone : -1;\n                    inputData[\"dynamicmaster\"][\"jsonuidata\"][`tz${component.label}`] = inputData[\"dynamicmaster\"][\"jsondata\"][`tz${component.label}`];\n                  }\n\n                  dateList.push(component.label);\n                } else {\n                  inputData[\"dynamicmaster\"][\"jsondata\"][component.label] = selectedMaster[masterIndex][component.label] ? selectedMaster[masterIndex][component.label] : \"\";\n                  inputData[\"dynamicmaster\"][\"jsonuidata\"][component.label] = inputData[\"dynamicmaster\"][\"jsondata\"][component.label];\n                }\n              }\n\n              return inputData[\"dynamicmaster\"];\n            });\n            return inputData[\"dynamicmaster\"];\n          });\n          return inputData[\"dynamicmaster\"];\n        });\n        inputData[\"dynamicmaster\"][\"jsonstring\"] = JSON.stringify(inputData[\"dynamicmaster\"][\"jsondata\"]);\n        inputData[\"dynamicmaster\"][\"jsonuistring\"] = JSON.stringify(inputData[\"dynamicmaster\"][\"jsonuidata\"]);\n        inputData[\"masterdatelist\"] = dateList;\n      } else if (selectedControl[masterIndex].table.item.component === 'Type3Component' && selectedControl[masterIndex].table.item.nformcode === 137) {\n        inputData[\"noneedfilter\"] = true;\n        this.props.Login.masterextractedColumnList[masterIndex].map(item => {\n          let fieldName = item.dataField;\n\n          if (item.isJsonField === true) {\n            return inputData[methodUrl][item.jsonObjectName] = { ...inputData[methodUrl][item.jsonObjectName],\n              [fieldName]: this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName] : \"\"\n            };\n          } else {\n            if (item.controlType === \"selectbox\") {\n              // inputData[methodUrl][fieldName] = this.state.selectedMaster[fieldName] ? this.state.selectedMaster[fieldName].label ? this.state.selectedMaster[fieldName].label : \"\" : -1;\n              inputData[methodUrl][item.tableDataField] = this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName].value ? this.state.selectedMaster[masterIndex][fieldName].value : \"\" : -1;\n              return inputData;\n            } else if (item.controlType === \"datepicker\") {\n              inputData[methodUrl][item.dateField] = formatInputDate(this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName] : \"\", false);\n            } else if (item.controlType === \"checkbox\") {\n              inputData[methodUrl][item.controlName] = this.state.selectedMaster[masterIndex][item.controlName] ? this.state.selectedMaster[masterIndex][item.controlName] : transactionStatus.NO;\n            } else {\n              inputData[methodUrl][fieldName] = this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName] : \"\";\n            } // inputData[methodUrl][selectedRecordPrimarykey] = this.props.Login.selectedId;\n\n\n            return inputData;\n          }\n        });\n      } else {\n        this.props.Login.masterextractedColumnList[masterIndex].map(item => {\n          let fieldName = item.dataField;\n\n          if (item.isJsonField === true) {\n            return inputData[methodUrl][item.jsonObjectName] = { ...inputData[methodUrl][item.jsonObjectName],\n              [fieldName]: this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName] : \"\"\n            };\n          } else {\n            if (item.controlType === \"selectbox\") {\n              inputData[methodUrl][fieldName] = this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName].label ? this.state.selectedMaster[masterIndex][fieldName].label : \"\" : -1;\n              inputData[methodUrl][item.foreignDataField] = this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName].value ? this.state.selectedMaster[masterIndex][fieldName].value : \"\" : -1;\n              return inputData;\n            } else if (item.controlType === \"datepicker\") {\n              inputData[methodUrl][item.dateField] = formatInputDate(this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName] : \"\", false);\n            } else if (item.controlType === \"checkbox\") {\n              inputData[methodUrl][item.controlName] = this.state.selectedMaster[masterIndex][item.controlName] ? this.state.selectedMaster[masterIndex][item.controlName] : transactionStatus.NO;\n            } else {\n              inputData[methodUrl][fieldName] = this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName] : \"\";\n            } // inputData[methodUrl][selectedRecordPrimarykey] = this.props.Login.selectedId;\n\n\n            return inputData;\n          }\n        });\n      } // }\n\n\n      const inputParam = {\n        userinfo: this.props.Login.userInfo,\n        withoutCombocomponent: this.state.withoutCombocomponent,\n        comboComponents: this.state.comboComponents,\n        selectedRecord: this.state.selectedRecord,\n        selectedRecordName: 'selectedRecord',\n        loadSubSample: false,\n        selectedControl: this.props.Login.selectedControl,\n        comboData: this.props.Login.comboData,\n        comboName: 'comboData',\n        classUrl: selectedControl[masterIndex].table.item.classUrl,\n        methodUrl: selectedControl[masterIndex].table.item.methodUrl,\n        displayName: this.props.Login.inputParam.displayName,\n        // selectedControl[masterIndex].table.item.sdisplayname,\n        screenName: masterIndex !== 0 ? selectedControl[masterIndex - 1].displayname[this.props.Login.userInfo.slanguagetypecode] : this.props.Login.inputParam.displayName,\n        inputData: inputData,\n        operation: \"create\",\n        saveType,\n        formRef,\n        masterIndex,\n        selectedMaster: this.state.selectedMaster,\n        mastercomboComponents: this.props.Login.mastercomboComponents,\n        masterwithoutCombocomponent: this.props.Login.masterwithoutCombocomponent,\n        masterComboColumnFiled: this.props.Login.masterComboColumnFiled,\n        masterextractedColumnList: this.props.Login.masterextractedColumnList,\n        masterdataList: this.props.Login.masterdataList,\n        masterDesign: this.props.Login.masterDesign,\n        masterfieldList: this.props.Login.masterfieldList\n      };\n      this.props.addMasterRecord(inputParam, this.props.Login.masterData);\n    };\n\n    this.addMasterRecord = control => {\n      let masterIndex = this.props.Login.masterIndex;\n\n      if (masterIndex !== undefined) {\n        masterIndex = masterIndex + 1;\n      } else {\n        masterIndex = 0;\n      }\n\n      let selectedControl = this.props.Login.selectedControl || [];\n      let selectedMaster = this.state.selectedMaster || [];\n      selectedMaster[masterIndex] = {};\n      selectedControl[masterIndex] = control;\n      let fieldList = this.props.Login.masterfieldList || [];\n      fieldList[masterIndex] = [];\n      let masterComboColumnFiled = this.props.Login.masterComboColumnFiled || [];\n      masterComboColumnFiled[masterIndex] = [];\n      let extractedColumnList = this.props.Login.masterextractedColumnList || [];\n      extractedColumnList[masterIndex] = [];\n      let masterdataList = this.props.Login.masterdataList || [];\n      let masterDesign = this.props.Login.masterDesign || [];\n      let masterwithoutCombocomponent = this.props.Login.masterwithoutCombocomponent || [];\n      let mastercomboComponents = this.props.Login.mastercomboComponents || [];\n      masterdataList[masterIndex] = [];\n      masterDesign[masterIndex] = [];\n      masterwithoutCombocomponent[masterIndex] = [];\n      mastercomboComponents[masterIndex] = [];\n\n      if (control.table.item.component === 'Type2Component' || control.table.item.component === 'Type1Component') {\n        if (control.table.item.component === 'Type2Component') {\n          fieldList[masterIndex] = getFieldSpecification().get(control.table.item.methodUrl) || [];\n        } else {\n          fieldList[masterIndex] = getFieldSpecification1().get(control.table.item.methodUrl) || [];\n        }\n\n        extractedColumnList[masterIndex] = extractFieldHeader(Object.values(fieldList[masterIndex]));\n        const primaryKeyField = Object.keys(fieldList[masterIndex]).length > 0 ? fieldList[masterIndex][0].dataField : \"\";\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            selectedControl,\n            addMaster: true,\n            masterfieldList: fieldList,\n            masterextractedColumnList: extractedColumnList,\n            masterprimaryKeyField: primaryKeyField,\n            masterComboColumnFiled: masterComboColumnFiled,\n            masterIndex,\n            masterdataList,\n            masterDesign,\n            masterwithoutCombocomponent,\n            mastercomboComponents,\n            selectedMaster,\n            screenName: selectedControl[masterIndex].displayname[this.props.Login.userInfo.slanguagetypecode]\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else if (control.table.item.component === 'Type3Component') {\n        fieldList[masterIndex] = getFieldSpecification3().get(control.table.item.methodUrl) || [];\n        extractedColumnList[masterIndex] = extractFieldHeader(Object.values(fieldList[masterIndex]));\n        masterComboColumnFiled[masterIndex] = extractedColumnList[masterIndex].filter(item => item.ndesigncomponentcode === designComponents.COMBOBOX);\n        const primaryKeyField = Object.keys(fieldList[masterIndex]).length > 0 ? fieldList[masterIndex][0].dataField : \"\";\n        const inputParam = {\n          userinfo: this.props.Login.userInfo,\n          selectedControl,\n          masterfieldList: fieldList,\n          masterextractedColumnList: extractedColumnList,\n          masterprimaryKeyField: primaryKeyField,\n          masterComboColumnFiled: masterComboColumnFiled,\n          masterIndex,\n          masterdataList,\n          masterDesign,\n          masterwithoutCombocomponent,\n          mastercomboComponents,\n          selectedMaster,\n          screenName: selectedControl[masterIndex].displayname[this.props.Login.userInfo.slanguagetypecode]\n        };\n        this.props.getAddMasterCombo(inputParam);\n      } else if (control.table.item.component === 'Dynamic') {\n        const inputParam = {\n          userinfo: this.props.Login.userInfo,\n          selectedControl,\n          masterIndex,\n          masterdataList,\n          masterDesign,\n          masterComboColumnFiled,\n          masterwithoutCombocomponent,\n          mastercomboComponents,\n          masterfieldList: fieldList,\n          masterextractedColumnList: extractedColumnList,\n          masterComboColumnFiled,\n          selectedMaster\n        };\n        this.props.getDynamicMasterTempalte(inputParam);\n      } // this.props.getMasterRecord(control);\n\n    };\n\n    this.openModal = () => {\n      const addId = this.props.Login.inputParam && this.state.controlMap.has(\"Add\") && this.state.controlMap.get(\"Add\").ncontrolcode;\n      this.props.getDynamicMasterCombo(this.props.Login.masterData, this.props.Login.userInfo, addId, this.state.designData, this.state.selectedRecord, this.state.childColumnList, this.state.comboComponents, this.state.withoutCombocomponent, false, true, new Map(), true, \"create\", this.props.Login.displayName);\n    };\n\n    this.fetchRecord = fetchRecordParam => {\n      this.props.getEditDynamicMasterCombo(fetchRecordParam, this.state.designData, this.state.selectedRecord, this.state.childColumnList, this.state.comboComponents, this.state.withoutCombocomponent);\n    };\n\n    this.onNumericBlur = (value, control) => {\n      let selectedRecord = this.state.selectedRecord;\n\n      if (selectedRecord[control.label]) {\n        if (control.max) {\n          if (!(selectedRecord[control.label] < parseFloat(control.max))) {\n            selectedRecord[control.label] = control.precision ? parseFloat(control.max) : parseInt(control.max);\n          }\n        }\n\n        if (control.min) {\n          if (!(selectedRecord[control.label] > parseFloat(control.min))) {\n            selectedRecord[control.label] = control.precision ? parseFloat(control.min) : parseInt(control.min);\n          }\n        }\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.comboChild = (data, columnList, childColumnList, slice) => {\n      let retunObj = {}; // if (data.findIndex(x => x.label === columnList.label) !== -1) {\n\n      if (!childColumnList.hasOwnProperty(columnList.label)) {\n        if (childColumnList[columnList.label] === undefined) {\n          if (columnList.hasOwnProperty(\"child\")) {\n            let childList = [];\n            columnList.child.map(childData => {\n              const index = data.findIndex(x => x.label === childData.label);\n\n              if (index !== -1) {\n                childList.push(data[index]);\n\n                if (slice) {\n                  data = [...data.slice(0, index), ...data.slice(index + 1)];\n                }\n              }\n            });\n            childColumnList[columnList.label] = childList;\n\n            if (childList.length > 0) {\n              childList.map(y => {\n                if (y.hasOwnProperty(\"child\")) {\n                  const val = this.comboChild(data, y, childColumnList, slice);\n                  retunObj[\"data\"] = val.data;\n                  retunObj[\"childColumnList\"] = val.childColumnList;\n                } else {\n                  retunObj[\"data\"] = data;\n                  retunObj[\"childColumnList\"] = childColumnList;\n                }\n              });\n            } else {\n              retunObj[\"data\"] = data;\n              retunObj[\"childColumnList\"] = childColumnList;\n            }\n          } else {\n            retunObj[\"data\"] = data;\n            retunObj[\"childColumnList\"] = childColumnList;\n          }\n        } else {\n          retunObj[\"data\"] = data;\n          retunObj[\"childColumnList\"] = childColumnList;\n        }\n      } else {\n        retunObj[\"data\"] = data;\n        retunObj[\"childColumnList\"] = childColumnList;\n      }\n\n      return retunObj;\n    };\n\n    this.onComboChange = (comboData, control, customName) => {\n      let comboName = customName || control.label;\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (comboData) {\n        comboData[\"item\"] = { ...comboData[\"item\"],\n          \"pkey\": control.valuemember,\n          \"nquerybuildertablecode\": control.nquerybuildertablecode,\n          \"source\": control.source\n        };\n        selectedRecord[comboName] = comboData;\n      } else {\n        selectedRecord[comboName] = [];\n      }\n\n      if (control.child && control.child.length > 0) {\n        const childComboList = getSameRecordFromTwoArrays(this.state.comboComponents, control.child, \"label\");\n        let childColumnList = {};\n        childComboList.map(columnList => {\n          const val = this.comboChild(this.state.comboComponents, columnList, childColumnList, false);\n          childColumnList = val.childColumnList;\n        });\n        const parentList = getSameRecordFromTwoArrays(this.state.withoutCombocomponent, control.child, \"label\");\n        const inputParem = {\n          child: control.child,\n          source: control.source,\n          primarykeyField: control.valuemember,\n          value: comboData.value,\n          item: comboData.item\n        };\n        this.props.getChildValues(inputParem, this.props.Login.userInfo, selectedRecord, this.props.Login.comboData, childComboList, childColumnList, this.state.withoutCombocomponent, [...childComboList, ...parentList]);\n      } else {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            selectedRecord\n          }\n        };\n        this.props.updateStore(updateInfo);\n      }\n    };\n\n    this.onNumericInputChange = (value, name) => {\n      let selectedRecord = this.state.selectedRecord;\n      selectedRecord[name] = value;\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.handleDateChange = (dateValue, dateName) => {\n      const {\n        selectedRecord\n      } = this.state;\n      selectedRecord[dateName] = dateValue;\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onDrop = (value, type, oldVlaue) => {\n      const design = this.state.design;\n      let columns = design[0].children;\n      let designData = this.props.Login.ReactInputFields;\n      value = JSON.parse(value.fields);\n      value = { ...value,\n        type: \"component\"\n      };\n      let designDataIndex = designData.findIndex(item => item.label === value.label);\n      let firstIndex = columns[0] ? columns[0].children.findIndex(item => item.label === value.label) : -1;\n      let secondIndex = columns[1] ? columns[1].children.findIndex(item => item.label === value.label) : -1;\n      if (designDataIndex >= 0) designData.splice(designDataIndex, 1);\n\n      if (firstIndex >= 0) {\n        if (type !== 1) {\n          columns[0].children.splice(firstIndex, 1); // columns[0].splice(to, 0, columns[0].splice(from, 1)[0]);\n        } else {\n          if (oldVlaue) {\n            oldVlaue = JSON.parse(oldVlaue);\n            let from = columns[0].children.findIndex(item => item.label === value.label);\n            let to = columns[0].children.findIndex(item => item.label === oldVlaue.label);\n            columns[0].children.splice(to, 0, columns[0].children.splice(from, 1)[0]);\n          }\n        }\n      } else if (type === 1) {\n        if (columns[0]) {\n          columns[0].children.push(value);\n        } else {\n          columns[0] = {\n            id: \"1\",\n            type: \"column\",\n            children: []\n          };\n          columns[0].children.push(value);\n        }\n      }\n\n      if (secondIndex >= 0) {\n        if (type !== 2) {\n          columns[1].splice(secondIndex, 1);\n        } else {\n          if (oldVlaue) {\n            oldVlaue = JSON.parse(oldVlaue);\n            let from = columns[1].children.findIndex(item => item.label === value.label);\n            let to = columns[1].children.findIndex(item => item.label === oldVlaue.label);\n            columns[1].children.splice(to, 0, columns[1].children.splice(from, 1)[0]);\n          }\n        }\n      } else if (type === 2) {\n        if (columns[1]) {\n          columns[1].children.push(value);\n        } else {\n          columns[1] = {\n            id: \"2\",\n            type: \"column\",\n            children: []\n          };\n          columns[1].children.push(value);\n        }\n      } // design.push(columns)\n\n\n      this.setState({\n        designData,\n        design\n      });\n    };\n\n    this.onDropFile = (attachedFiles, fieldName, maxSize) => {\n      let selectedRecord = this.state.selectedRecord || {};\n      selectedRecord[fieldName] = onDropAttachFileList(selectedRecord[fieldName], attachedFiles, maxSize);\n      this.setState({\n        selectedRecord,\n        actionType: \"new\"\n      });\n    };\n\n    this.deleteAttachment = (event, file, fieldName) => {\n      let selectedRecord = this.state.selectedRecord || {};\n      selectedRecord[fieldName] = deleteAttachmentDropZone(selectedRecord[fieldName], file);\n      this.setState({\n        selectedRecord,\n        actionType: \"delete\" //fileToDelete:file.name \n\n      });\n    };\n\n    this.onInputOnChange = (event, value) => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (event.target.type === 'toggle') {\n        selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\n      } else if (event.target.type === 'numeric') {\n        if (/\\D/.test(event.target.value)) selectedRecord[event.target.name] = event.target.value;\n      } else if (event.target.type === 'checkbox') {\n        const value1 = selectedRecord[event.target.name];\n\n        if (value1 !== '' && value1 !== undefined) {\n          if (value1.toLowerCase().includes(value.toLowerCase())) {\n            const index = value1.toLowerCase().indexOf(value.toLowerCase());\n\n            if (index !== -1) {\n              if (index === 0) {\n                const indexcomma = value1.indexOf(\",\");\n\n                if (indexcomma !== -1) {\n                  selectedRecord[event.target.name] = value1.slice(indexcomma + 1);\n                } else {\n                  selectedRecord[event.target.name] = \"\";\n                }\n              } else {\n                if (value1.slice(index).indexOf(\",\") !== -1) {\n                  selectedRecord[event.target.name] = value1.slice(0, index) + value1.slice(index + value1.slice(index).indexOf(\",\") + 1);\n                } else {\n                  selectedRecord[event.target.name] = value1.slice(0, index - 1);\n                }\n              }\n            }\n          } else {\n            selectedRecord[event.target.name] = value1 + ',' + value;\n          }\n        } else {\n          selectedRecord[event.target.name] = value;\n        }\n      } else if (event.target.type === 'radio') {\n        selectedRecord[event.target.name] = value;\n      } else {\n        selectedRecord[event.target.name] = event.target.value;\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.import = () => {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          openModal: true,\n          screenName: this.props.Login.displayName,\n          operation: \"import\"\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.deleteRecord = deleteParam => {\n      const inputParam = {\n        classUrl: \"dynamicmaster\",\n        methodUrl: \"DynamicMaster\",\n        displayName: this.props.Login.displayName,\n        inputData: {\n          [\"dynamicmaster\"]: {\n            \"ndynamicmastercode\": deleteParam.selectedRecord.ndynamicmastercode\n          },\n          //.dataItem,\n          \"userinfo\": this.props.Login.userInfo\n        },\n        operation: \"delete\",\n        dataState: this.state.dataState\n      };\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, deleteParam.ncontrolCode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData: this.props.Login.masterData\n            },\n            openModal: true,\n            screenName: this.props.Login.displayName,\n            operation: \"delete\"\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\n      }\n    };\n\n    this.reloadData = () => {\n      const inputParam = {\n        inputData: {\n          \"userinfo\": this.props.Login.userInfo\n        },\n        classUrl: this.props.Login.inputParam.classUrl,\n        methodUrl: this.props.Login.inputParam.methodUrl,\n        userInfo: this.props.Login.userInfo,\n        displayName: this.props.Login.inputParam.displayName\n      };\n      this.props.callService(inputParam);\n    };\n\n    this.onSaveClick = (saveType, formRef) => {\n      //add / edit  \n      let inputData = [];\n      let dataState = undefined;\n      inputData[\"userinfo\"] = this.props.Login.userInfo;\n      inputData[\"masterdateconstraints\"] = this.props.Login.masterData.DynamicMasterDesign.screendesign.masterdateconstraints;\n      inputData[\"masterdatefields\"] = this.props.Login.masterData.DynamicMasterDesign.screendesign.masterdatefields;\n      inputData[\"mastercombinationunique\"] = this.props.Login.masterData.DynamicMasterDesign.screendesign.mastercombinationunique;\n      let selectedId = null;\n      let operation = \"\";\n      let selectedRecord = this.state.selectedRecord;\n\n      if (this.props.Login.operation === \"update\") {\n        // edit\n        dataState = this.state.dataState;\n        inputData[\"dynamicmaster\"] = {\n          ndynamicmastercode: this.state.selectedRecord[\"ndynamicmastercode\"]\n        }; //this.state.selectedRecord;\n\n        inputData[\"dynamicmaster\"][\"jsondata\"] = {};\n        inputData[\"dynamicmaster\"][\"jsonuidata\"] = {};\n        selectedId = this.props.Login.selectedId;\n        operation = \"update\";\n      } else {\n        //add                          \n        inputData[\"dynamicmaster\"] = {\n          //\"nsitecode\": this.props.Login.userInfo.nmastersitecode, \n          nformcode: this.props.Login.userInfo.nformcode,\n          ndesigntemplatemappingcode: this.props.Login.masterData.DynamicMasterDesign.ndesigntemplatemappingcode,\n          jsondata: {},\n          jsonuidata: {}\n        };\n        operation = \"create\";\n      }\n\n      const dateList = [];\n      const defaulttimezone = this.props.Login.defaulttimezone;\n      const userInfo = this.props.Login.userInfo;\n      this.props.Login.masterData.DynamicMasterDesign && this.props.Login.masterData.DynamicMasterDesign.slideoutdesign.map(row => {\n        row.children.map(column => {\n          column.children.map(component => {\n            if (component.hasOwnProperty(\"children\")) {\n              component.children.map(componentrow => {\n                if (componentrow.inputtype === \"combo\") {\n                  inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label] = selectedRecord[componentrow.label] ? {\n                    value: selectedRecord[componentrow.label].value,\n                    label: selectedRecord[componentrow.label].label,\n                    pkey: operation === \"create\" ? selectedRecord[componentrow.label].item.pkey : selectedRecord[componentrow.label].item ? selectedRecord[componentrow.label].item.pkey : selectedRecord[componentrow.label].pkey,\n                    nquerybuildertablecode: operation === \"create\" ? selectedRecord[componentrow.label].item.nquerybuildertablecode : selectedRecord[componentrow.label].item ? selectedRecord[componentrow.label].item.nquerybuildertablecode : selectedRecord[componentrow.label].nquerybuildertablecode,\n                    source: operation === \"create\" ? selectedRecord[componentrow.label].item.source : selectedRecord[componentrow.label].item ? selectedRecord[componentrow.label].item.source : selectedRecord[componentrow.label].source\n                  } : -1;\n                  inputData[\"dynamicmaster\"][\"jsonuidata\"][componentrow.label] = selectedRecord[componentrow.label] ? selectedRecord[componentrow.label].label : \"\";\n                } else if (componentrow.inputtype === \"date\") {\n                  if (componentrow.mandatory) {\n                    inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label] = formatDate(selectedRecord[componentrow.label], false);\n                    inputData[\"dynamicmaster\"][\"jsonuidata\"][componentrow.label] = inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label]; //inputData[\"dynamicmaster\"][\"jsonuidata\"][componentrow.label] = convertDateTimetoString(selectedRecord[componentrow.label], userInfo);\n                  } else {\n                    inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label] = componentrow.loadcurrentdate ? formatDate(selectedRecord[componentrow.label] || new Date(), false) : selectedRecord[componentrow.label] ? formatDate(selectedRecord[componentrow.label], false) : \"\";\n                    inputData[\"dynamicmaster\"][\"jsonuidata\"][componentrow.label] = inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label]; //convertDateTimetoString(selectedRecord[componentrow.label], userInfo);\n                  }\n\n                  if (componentrow.timezone) {\n                    inputData[\"dynamicmaster\"][\"jsondata\"][`tz${componentrow.label}`] = selectedRecord[`tz${componentrow.label}`] ? {\n                      value: selectedRecord[`tz${componentrow.label}`].value,\n                      label: selectedRecord[`tz${componentrow.label}`].label\n                    } : defaulttimezone ? defaulttimezone : -1;\n                    inputData[\"dynamicmaster\"][\"jsonuidata\"][`tz${componentrow.label}`] = inputData[\"dynamicmaster\"][\"jsondata\"][`tz${componentrow.label}`];\n                  }\n\n                  dateList.push(componentrow.label);\n                } else {\n                  inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label] = selectedRecord[componentrow.label] ? selectedRecord[componentrow.label] : \"\";\n                  inputData[\"dynamicmaster\"][\"jsonuidata\"][componentrow.label] = inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label]; // inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label]\n                }\n\n                return inputData[\"dynamicmaster\"];\n              });\n            } else {\n              if (component.inputtype === \"combo\") {\n                inputData[\"dynamicmaster\"][\"jsondata\"][component.label] = selectedRecord[component.label] ? {\n                  value: selectedRecord[component.label].value,\n                  label: selectedRecord[component.label].label,\n                  pkey: operation === \"create\" ? selectedRecord[component.label].item.pkey : selectedRecord[component.label].item ? selectedRecord[component.label].item.pkey : selectedRecord[component.label].pkey,\n                  nquerybuildertablecode: operation === \"create\" ? selectedRecord[component.label].item.nquerybuildertablecode : selectedRecord[component.label].item ? selectedRecord[component.label].item.nquerybuildertablecode : selectedRecord[component.label].nquerybuildertablecode,\n                  source: operation === \"create\" ? selectedRecord[component.label].item.source : selectedRecord[component.label].item ? selectedRecord[component.label].item.source : selectedRecord[component.label].source\n                } : -1;\n                inputData[\"dynamicmaster\"][\"jsonuidata\"][component.label] = inputData[\"dynamicmaster\"][\"jsondata\"][component.label].label; //selectedRecord[component.label] ? selectedRecord[component.label].label : \"\"\n              } else if (component.inputtype === \"date\") {\n                if (component.mandatory) {\n                  inputData[\"dynamicmaster\"][\"jsondata\"][component.label] = formatDate(selectedRecord[component.label], false); // convertDateTimetoString(selectedRecord[component.label] ?\n                  // selectedRecord[component.label] : new Date(), userInfo);\n\n                  inputData[\"dynamicmaster\"][\"jsonuidata\"][component.label] = inputData[\"dynamicmaster\"][\"jsondata\"][component.label]; //convertDateTimetoString(selectedRecord[component.label], userInfo);\n                } else {\n                  inputData[\"dynamicmaster\"][\"jsondata\"][component.label] = component.loadcurrentdate ? //convertDateTimetoString(selectedRecord[component.label] ?                                      \n                  //    selectedRecord[component.label] : new Date(), userInfo) :\n                  formatDate(selectedRecord[component.label] || new Date(), false) : selectedRecord[component.label] ? // convertDateTimetoString(selectedRecord[component.label] ?\n                  //   selectedRecord[component.label] : new Date(), userInfo) : \"\";\n                  formatDate(selectedRecord[component.label], false) : \"\";\n                  inputData[\"dynamicmaster\"][\"jsonuidata\"][component.label] = inputData[\"dynamicmaster\"][\"jsondata\"][component.label]; //convertDateTimetoString(selectedRecord[component.label], userInfo)\n                }\n\n                if (component.timezone) {\n                  inputData[\"dynamicmaster\"][\"jsondata\"][`tz${component.label}`] = selectedRecord[`tz${component.label}`] ? {\n                    value: selectedRecord[`tz${component.label}`].value,\n                    label: selectedRecord[`tz${component.label}`].label\n                  } : defaulttimezone ? defaulttimezone : -1;\n                  inputData[\"dynamicmaster\"][\"jsonuidata\"][`tz${component.label}`] = inputData[\"dynamicmaster\"][\"jsondata\"][`tz${component.label}`];\n                }\n\n                dateList.push(component.label);\n              } else {\n                inputData[\"dynamicmaster\"][\"jsondata\"][component.label] = selectedRecord[component.label] ? selectedRecord[component.label] : \"\";\n                inputData[\"dynamicmaster\"][\"jsonuidata\"][component.label] = inputData[\"dynamicmaster\"][\"jsondata\"][component.label];\n              }\n            }\n\n            return inputData[\"dynamicmaster\"];\n          });\n          return inputData[\"dynamicmaster\"];\n        });\n        return inputData[\"dynamicmaster\"];\n      });\n      inputData[\"dynamicmaster\"][\"jsonstring\"] = JSON.stringify(inputData[\"dynamicmaster\"][\"jsondata\"]);\n      inputData[\"dynamicmaster\"][\"jsonuistring\"] = JSON.stringify(inputData[\"dynamicmaster\"][\"jsonuidata\"]);\n      inputData[\"masterdatelist\"] = dateList;\n      const inputParam = {\n        classUrl: \"dynamicmaster\",\n        methodUrl: \"DynamicMaster\",\n        displayName: this.props.Login.displayName,\n        inputData: inputData,\n        operation: operation,\n        saveType,\n        formRef,\n        selectedId,\n        dataState\n      };\n      const esignNeeded = showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode);\n\n      if (esignNeeded) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData: this.props.Login.masterData\n            },\n            openModal: true,\n            screenName: this.props.Login.displayName,\n            operation: \"create\"\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\n      }\n    };\n\n    this.validateEsign = () => {\n      const inputParam = {\n        inputData: {\n          \"userinfo\": { ...this.props.Login.userInfo,\n            sreason: this.state.selectedRecord[\"esigncomments\"],\n            nreasoncode: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].value,\n            spredefinedreason: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].label\n          },\n          password: this.state.selectedRecord[\"esignpassword\"]\n        },\n        screenData: this.props.Login.screenData\n      };\n      this.props.validateEsignCredential(inputParam, \"openModal\");\n    };\n\n    this.formRef = React.createRef();\n    this.extractedColumnList = [];\n    this.detailedColumnList = [];\n    const _dataState = {\n      skip: 0,\n      take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n    };\n    this.state = {\n      data: [],\n      masterStatus: \"\",\n      error: \"\",\n      selectedRecord: {},\n      dataResult: [],\n      dataState: _dataState,\n      userRoleControlRights: [],\n      controlMap: new Map(),\n      comboComponents: [],\n      withoutCombocomponent: [],\n      selectedMaster: []\n    };\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\n      toast.warn(props.Login.masterStatus);\n      props.Login.masterStatus = \"\";\n    }\n\n    if (props.Login.error !== state.error) {\n      toast.error(props.Login.error);\n      props.Login.error = \"\";\n    }\n\n    return null;\n  }\n\n  render() {\n    let primaryKeyField = \"ndynamicmastercode\";\n    const editId = this.props.Login.inputParam && this.state.controlMap.has(\"Edit\") && this.state.controlMap.get(\"Edit\").ncontrolcode;\n    const editParam = {\n      screenName: this.props.Login.inputParam && this.props.Login.inputParam.displayName && this.props.intl.formatMessage({\n        id: this.props.Login.inputParam.displayName\n      }),\n      operation: \"update\",\n      primaryKeyField,\n      inputParam: this.props.Login.inputParam,\n      userInfo: this.props.Login.userInfo,\n      ncontrolCode: editId\n    };\n    const deleteParam = {\n      operation: \"delete\"\n    }; // const mandatoryFields=[];\n    // this.extractedColumnList.forEach(item=>item.mandatory === true ? \n    //     mandatoryFields.push(item) :\"\"\n    // );   \n\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(ListWrapper, {\n      className: \"client-list-content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 21\n      }\n    }, this.state.data ? /*#__PURE__*/React.createElement(DynamicDataGrid, {\n      primaryKeyField: primaryKeyField,\n      data: this.state.data,\n      dataResult: this.state.dataResult,\n      dataState: this.state.dataState,\n      dataStateChange: this.dataStateChange,\n      extractedColumnList: this.extractedColumnList,\n      detailedFieldList: this.detailedColumnList,\n      expandField: this.detailedColumnList.length > 0 ? \"expanded\" : false,\n      methodUrl: \"\",\n      controlMap: this.state.controlMap,\n      userRoleControlRights: this.state.userRoleControlRights,\n      inputParam: this.props.Login.inputParam,\n      userInfo: this.props.Login.userInfo,\n      fetchRecord: this.fetchRecord,\n      editParam: editParam,\n      deleteRecord: this.deleteRecord,\n      deleteParam: deleteParam,\n      reloadData: this.reloadData,\n      addRecord: this.openModal,\n      pageable: true,\n      scrollable: 'scrollable',\n      gridHeight: '600px',\n      isActionRequired: true,\n      isToolBarRequired: true,\n      selectedId: this.props.Login.selectedId,\n      import: this.import,\n      screenName: this.props.Login.displayName,\n      isImportRequired: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 29\n      }\n    }) : \"\"))), this.props.Login.openModal ? /*#__PURE__*/React.createElement(SlideOutModal, {\n      show: this.props.Login.openModal,\n      closeModal: this.closeModal,\n      operation: this.props.Login.operation ? this.props.Login.operation : \"create\",\n      inputParam: this.props.Login.inputParam,\n      screenName: this.props.Login.screenName,\n      onSaveClick: this.props.Login.addMaster ? this.onSaveMasterRecord : this.props.Login.operation === 'import' ? this.onSaveClickImportFile : this.onSaveClick,\n      esign: this.props.Login.loadEsign,\n      validateEsign: this.validateEsign,\n      masterStatus: this.props.Login.masterStatus,\n      updateStore: this.props.updateStore,\n      selectedRecord: this.props.Login.addMaster ? this.state.selectedMaster[this.props.Login.masterIndex] : this.state.selectedRecord || {},\n      mandatoryFields: this.props.Login.addMaster ? this.props.Login.masterextractedColumnList[this.props.Login.masterIndex].filter(x => x.mandatory === true) : this.props.Login.operation === 'import' ? [{\n        \"mandatory\": true,\n        \"idsName\": \"IDS_FILE\",\n        \"dataField\": 'stemplatefilename',\n        \"mandatoryLabel\": \"IDS_SELECT\",\n        \"controlType\": \"textbox\"\n      }] : this.state.mandatoryFields || [],\n      addComponent: this.props.Login.loadEsign ? /*#__PURE__*/React.createElement(Esign, {\n        operation: this.props.Login.operation,\n        onInputOnChange: this.onInputOnChange,\n        inputParam: this.props.Login.inputParam,\n        selectedRecord: this.state.selectedRecord || {},\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 263,\n          columnNumber: 25\n        }\n      }) : this.props.Login.addMaster ? /*#__PURE__*/React.createElement(AddMasterRecords, {\n        selectedControl: this.props.Login.selectedControl[this.props.Login.masterIndex],\n        fieldList: this.props.Login.masterfieldList && this.props.Login.masterfieldList[this.props.Login.masterIndex],\n        extractedColumnList: this.props.Login.masterextractedColumnList[this.props.Login.masterIndex] // primaryKeyField={this.props.Login.masterprimaryKeyField}\n        ,\n        selectedRecord: this.state.selectedMaster[this.props.Login.masterIndex] || {},\n        onInputOnChange: this.onInputOnChangeMaster,\n        onComboChange: this.onComboChangeMaster,\n        handleDateChange: this.handleDateChangeMaster,\n        dataList: this.props.Login.masterdataList && this.props.Login.masterdataList[this.props.Login.masterIndex],\n        onNumericInputOnChange: this.onNumericInputOnChangeMaster,\n        masterDesign: this.props.Login.masterDesign && this.props.Login.masterDesign[this.props.Login.masterIndex],\n        mastertimeZoneList: this.props.Login.mastertimeZoneList,\n        masterdefaultTimeZone: this.props.Login.masterdefaultTimeZone,\n        onComboChangeMasterDyanmic: this.onComboChangeMasterDyanmic,\n        handleDateChangeMasterDynamic: this.handleDateChangeMasterDynamic,\n        onInputOnChangeMasterDynamic: this.onInputOnChangeMasterDynamic,\n        onNumericInputChangeMasterDynamic: this.onNumericInputChangeMasterDynamic,\n        onNumericBlurMasterDynamic: this.onNumericBlurMasterDynamic,\n        userInfo: this.props.Login.userInfo,\n        Login: this.props.Login,\n        addMasterRecord: this.addMasterRecord,\n        userRoleControlRights: this.props.Login.userRoleControlRights,\n        masterIndex: this.props.Login.masterIndex,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 268,\n          columnNumber: 29\n        }\n      }) : this.props.Login.operation === 'import' ? /*#__PURE__*/React.createElement(ImportTemplate, {\n        selectedRecord: this.state.selectedRecord || {} //onInputOnChange={this.onInputOnChange}\n        ,\n        onDrop: this.onDropFile,\n        deleteAttachment: this.deleteAttachment,\n        actionType: this.state.actionType,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 293,\n          columnNumber: 29\n        }\n      }) : /*#__PURE__*/React.createElement(DynamicSlideout, {\n        selectedRecord: this.props.Login.selectedRecord,\n        templateData: this.props.Login.masterData.DynamicMasterDesign && this.props.Login.masterData.DynamicMasterDesign.slideoutdesign // handleChange={this.handleChange}\n        ,\n        handleDateChange: this.handleDateChange,\n        onInputOnChange: this.onInputOnChange,\n        onNumericInputChange: this.onNumericInputChange,\n        comboData: this.props.Login.comboData,\n        onComboChange: this.onComboChange,\n        onDropFile: this.onDropFile,\n        deleteAttachment: this.deleteAttachment,\n        onNumericBlur: this.onNumericBlur,\n        userInfo: this.props.Login.userInfo,\n        timeZoneList: this.props.Login.timeZoneList,\n        defaultTimeZone: this.props.Login.defaultTimeZone,\n        Login: this.props.Login,\n        addMasterRecord: this.addMasterRecord,\n        userRoleControlRights: this.props.Login.userRoleControlRights,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 301,\n          columnNumber: 29\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 17\n      }\n    }) : \"\");\n  }\n\n  componentDidUpdate(previousProps) {\n    if (this.props.Login.masterData !== previousProps.Login.masterData) {\n      if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\n        const userRoleControlRights = [];\n\n        if (this.props.Login.userRoleControlRights) {\n          this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item => userRoleControlRights.push(item.ncontrolcode));\n        }\n\n        const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode);\n        this.extractedColumnList = [];\n        this.detailedColumnList = [];\n        let data = [];\n        const withoutCombocomponent = [];\n        const mandatoryFields = [];\n        const Layout = this.props.Login.masterData.DynamicMasterDesign && this.props.Login.masterData.DynamicMasterDesign.slideoutdesign || [];\n        Layout.map(row => {\n          row.children.map(column => {\n            column.children.map(component => {\n              if (component.hasOwnProperty(\"children\")) {\n                component.children.map(componentrow => {\n                  if (componentrow.inputtype === \"combo\" || componentrow.inputtype === \"backendsearchfilter\" || componentrow.inputtype === \"frontendsearchfilter\") {\n                    data.push(componentrow);\n                  } else {\n                    withoutCombocomponent.push(componentrow);\n                  }\n\n                  if (componentrow.mandatory === true) {\n                    if (componentrow.inputtype === \"email\") {\n                      mandatoryFields.push({\n                        \"mandatory\": true,\n                        \"idsName\": componentrow.label,\n                        \"dataField\": componentrow.label,\n                        \"alertPreFix\": this.props.intl.formatMessage({\n                          id: \"IDS_VALID\"\n                        }),\n                        \"validateFunction\": validateEmail,\n                        \"mandatoryLabel\": \"IDS_ENTER\",\n                        \"controlType\": \"textbox\"\n                      });\n                    } else {\n                      mandatoryFields.push({\n                        \"mandatory\": true,\n                        \"idsName\": componentrow.label,\n                        \"dataField\": componentrow.label,\n                        \"mandatoryLabel\": componentrow.inputtype === \"combo\" ? \"IDS_SELECT\" : \"IDS_ENTER\",\n                        \"controlType\": componentrow.inputtype === \"combo\" ? \"selectbox\" : \"textbox\"\n                      });\n                    }\n                  }\n                });\n              } else {\n                component.inputtype === \"combo\" || component.inputtype === \"backendsearchfilter\" || component.inputtype === \"frontendsearchfilter\" ? data.push(component) : withoutCombocomponent.push(component);\n\n                if (component.mandatory === true) {\n                  if (component.inputtype === \"email\") {\n                    mandatoryFields.push({\n                      \"mandatory\": true,\n                      \"idsName\": component.label,\n                      \"dataField\": component.label,\n                      \"alertPreFix\": this.props.intl.formatMessage({\n                        id: \"IDS_VALID\"\n                      }),\n                      \"validateFunction\": validateEmail,\n                      \"mandatoryLabel\": \"IDS_ENTER\",\n                      \"controlType\": \"textbox\"\n                    });\n                  } else {\n                    mandatoryFields.push({\n                      \"mandatory\": true,\n                      \"idsName\": component.label,\n                      \"dataField\": component.label,\n                      \"mandatoryLabel\": component.inputtype === \"combo\" ? \"IDS_SELECT\" : \"IDS_ENTER\",\n                      \"controlType\": component.inputtype === \"combo\" ? \"selectbox\" : \"textbox\"\n                    });\n                  }\n                }\n              }\n            });\n          });\n        });\n\n        if (this.props.Login.masterData && this.props.Login.masterData.DynamicMasterDesign && this.props.Login.masterData.DynamicMasterDesign.screendesign) {\n          this.props.Login.masterData.DynamicMasterDesign.screendesign.griditem.map(row => {\n            this.extractedColumnList.push({\n              \"idsName\": row[\"1\"][this.props.Login.userInfo.slanguagetypecode],\n              \"dataField\": row[\"2\"],\n              \"dateField\": withoutCombocomponent.findIndex(x => x.label === row[\"2\"] && x.inputtype === 'date') !== -1 ? true : false\n            });\n          });\n          this.props.Login.masterData.DynamicMasterDesign.screendesign.gridmoreitem.map(row => {\n            this.detailedColumnList.push({\n              \"idsName\": row[\"1\"][this.props.Login.userInfo.slanguagetypecode],\n              \"dataField\": row[\"2\"],\n              \"dateField\": withoutCombocomponent.findIndex(x => x.label === row[\"2\"] && x.inputtype === 'date') !== -1 ? true : false\n            });\n          });\n        }\n\n        const comboComponents = data;\n        let childColumnList = {};\n        data.map(columnList => {\n          const val = this.comboChild(data, columnList, childColumnList, true);\n          data = val.data;\n          childColumnList = val.childColumnList;\n        });\n        const masterData = this.props.Login.masterData.DynamicMasterData ? sortData(this.props.Login.masterData.DynamicMasterData, \"descending\", \"ndynamicmastercode\") : [];\n        this.setState({\n          withoutCombocomponent,\n          comboComponents,\n          childColumnList,\n          designData: data,\n          mandatoryFields,\n          userRoleControlRights,\n          controlMap,\n          data: this.props.Login.masterData.DynamicMasterData || [],\n          dataResult: process(masterData || [], this.state.dataState)\n        });\n      } else {\n        let {\n          dataState\n        } = this.state;\n\n        if (this.props.Login.dataState === undefined) {\n          dataState = {\n            skip: 0,\n            take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n          };\n        }\n\n        const masterData = this.props.Login.masterData.DynamicMasterData ? sortData(this.props.Login.masterData.DynamicMasterData, \"descending\", \"ndynamicmastercode\") : [];\n        this.setState({\n          data: this.props.Login.masterData.DynamicMasterData || [],\n          selectedRecord: this.props.Login.selectedRecord,\n          dataResult: process(masterData || [], dataState),\n          dataState //, comboComponents, withoutCombocomponent\n\n        });\n      }\n    }\n\n    if (this.props.Login.selectedMaster !== previousProps.Login.selectedMaster) {\n      this.setState({\n        selectedMaster: this.props.Login.selectedMaster\n      });\n    }\n\n    if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\n      this.setState({\n        selectedRecord: this.props.Login.selectedRecord\n      });\n    }\n  }\n\n}\n\nexport default connect(mapStateToProps, {\n  callService,\n  crudMaster,\n  updateStore,\n  validateEsignCredential,\n  getChildValues,\n  getEditDynamicMasterCombo,\n  //fetchRecord,\n  getDynamicMasterCombo,\n  addMasterRecord,\n  getAddMasterCombo,\n  getDynamicMasterTempalte,\n  getChildComboMaster,\n  getChildValuesForAddMaster\n})(injectIntl(DynamicMaster));","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/pages/dynamicmaster/DynamicMaster.jsx"],"names":["React","connect","injectIntl","Row","Col","toast","process","DynamicDataGrid","SlideOutModal","Esign","callService","crudMaster","updateStore","validateEsignCredential","getEditDynamicMasterCombo","getDynamicMasterCombo","getChildValues","addMasterRecord","getAddMasterCombo","getDynamicMasterTempalte","getChildComboMaster","getChildValuesForAddMaster","DEFAULT_RETURN","showEsign","getControlMap","deleteAttachmentDropZone","getSameRecordFromTwoArrays","onDropAttachFileList","convertDateTimetoString","validateEmail","formatDate","sortData","ageCalculate","formatInputDate","extractFieldHeader","childComboClear","Lims_JSON_stringify","ListWrapper","DynamicSlideout","designComponents","transactionStatus","getFieldSpecification","AddMasterRecords","getFieldSpecification1","getFieldSpecification3","ImportTemplate","mapStateToProps","state","Login","DynamicMaster","Component","constructor","props","dataStateChange","event","setState","dataResult","data","dataState","removeIndex","data1","splice","closeModal","loadEsign","openModal","selectedRecord","selectedMaster","selectedControl","masterextractedColumnList","masterfieldList","masterdataList","mastercomboComponents","masterwithoutCombocomponent","masterComboColumnFiled","masterDesign","addMaster","masterIndex","screenName","operation","displayname","userInfo","slanguagetypecode","undefined","inputParam","displayName","updateInfo","typeName","selectedId","onSaveClickImportFile","saveType","formRef","inputFileData","nsitecode","nmastersitecode","editData","formData","FormData","acceptedFiles","stemplatefilename","length","forEach","file","index","append","dateList","masterData","DynamicMasterDesign","screendesign","masterdatefields","map","x","push","JSON","stringify","comboComponents","masterdateconstraints","mastercombinationunique","ndesigntemplatemappingcode","classUrl","methodUrl","inputData","userinfo","isFileupload","esignNeeded","userRoleControlRights","nformcode","ncontrolCode","screenData","intl","formatMessage","id","warn","onComboChangeMasterDyanmic","comboData","control","customName","comboName","label","valuemember","nquerybuildertablecode","source","child","childComboList","childColumnList","columnList","val","comboChild","parentList","inputParem","primarykeyField","value","item","withoutCombocomponent","childParam","mastedataList","onInputOnChangeMasterDynamic","radiotext","target","type","name","checked","YES","NO","test","includes","indexOf","indexcomma","slice","handleDateChangeMasterDynamic","dateValue","dateName","onNumericInputChangeMasterDynamic","onNumericBlurMasterDynamic","max","parseFloat","precision","parseInt","min","onComboChangeMaster","fieldName","table","tableDataField","foreignDataField","childIndex","handleDateChangeMaster","age","onNumericInputOnChangeMaster","onInputOnChangeMaster","nneedcurrentaddress","sflatnotemp","sflatno","shousenotemp","shouseno","spostalcodetemp","spostalcode","sstreettemp","sstreet","scitynametemp","scityname","sdistrictnametemp","sdistrictname","sregionnametemp","sregionname","onSaveMasterRecord","toLowerCase","component","jsondata","jsonuidata","defaulttimezone","slideoutdesign","row","children","column","hasOwnProperty","componentrow","inputtype","pkey","mandatory","loadcurrentdate","Date","timezone","dataField","isJsonField","jsonObjectName","controlType","dateField","controlName","selectedRecordName","loadSubSample","fieldList","extractedColumnList","get","Object","values","primaryKeyField","keys","masterprimaryKeyField","filter","ndesigncomponentcode","COMBOBOX","addId","controlMap","has","ncontrolcode","designData","Map","fetchRecord","fetchRecordParam","onNumericBlur","retunObj","childList","childData","findIndex","y","onComboChange","onNumericInputChange","handleDateChange","onDrop","oldVlaue","design","columns","ReactInputFields","parse","fields","designDataIndex","firstIndex","secondIndex","from","to","onDropFile","attachedFiles","maxSize","actionType","deleteAttachment","onInputOnChange","value1","import","deleteRecord","deleteParam","ndynamicmastercode","reloadData","onSaveClick","validateEsign","sreason","nreasoncode","spredefinedreason","password","createRef","detailedColumnList","skip","take","settings","masterStatus","error","getDerivedStateFromProps","render","editId","editParam","mandatoryFields","mastertimeZoneList","masterdefaultTimeZone","timeZoneList","defaultTimeZone","componentDidUpdate","previousProps","Layout","griditem","gridmoreitem","DynamicMasterData"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { injectIntl } from 'react-intl';\r\nimport { Row, Col } from 'react-bootstrap';\r\nimport { toast } from 'react-toastify';\r\nimport { process } from '@progress/kendo-data-query';\r\nimport DynamicDataGrid from '../../components/data-grid/data-grid.component';\r\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\r\nimport Esign from '../../pages/audittrail/Esign';\r\nimport {\r\n    callService, crudMaster, updateStore, validateEsignCredential,\r\n    getEditDynamicMasterCombo,\r\n    //fetchRecord,\r\n    getDynamicMasterCombo, getChildValues,\r\n    addMasterRecord, getAddMasterCombo, getDynamicMasterTempalte,\r\n    getChildComboMaster,getChildValuesForAddMaster\r\n} from '../../actions';\r\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\r\nimport {\r\n    showEsign, getControlMap, deleteAttachmentDropZone,\r\n    getSameRecordFromTwoArrays, onDropAttachFileList, convertDateTimetoString,\r\n    validateEmail, formatDate, sortData, ageCalculate, formatInputDate, extractFieldHeader, childComboClear, Lims_JSON_stringify\r\n} from '../../components/CommonScript';\r\nimport { ListWrapper } from '../../components/client-group.styles';\r\nimport DynamicSlideout from '../dynamicpreregdesign/DynamicSlideout.jsx';\r\nimport { designComponents, transactionStatus } from '../../components/Enumeration';\r\nimport { getFieldSpecification } from '../../components/type2component/Type2FieldSpecificationList';\r\nimport AddMasterRecords from '../dynamicpreregdesign/AddMasterRecords'\r\nimport { getFieldSpecification as getFieldSpecification1 } from '../../components/type1component/Type1FieldSpecificationList';\r\nimport { getFieldSpecification as getFieldSpecification3 } from '../../components/type3component/Type3FieldSpecificationList';\r\nimport ImportTemplate from './ImportTemplate';\r\n\r\nconst mapStateToProps = state => {\r\n    return ({ Login: state.Login })\r\n}\r\n\r\nclass DynamicMaster extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.formRef = React.createRef();\r\n        this.extractedColumnList = [];\r\n        this.detailedColumnList = [];\r\n        const dataState = {\r\n            skip: 0,\r\n            take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5,\r\n        };\r\n        this.state = {\r\n            data: [], masterStatus: \"\", error: \"\", selectedRecord: {},\r\n            dataResult: [],\r\n            dataState: dataState,\r\n            userRoleControlRights: [],\r\n            controlMap: new Map(),\r\n            comboComponents: [],\r\n            withoutCombocomponent: [],\r\n            selectedMaster: []\r\n        };\r\n    }\r\n\r\n    dataStateChange = (event) => {\r\n        this.setState({\r\n            dataResult: process(this.state.data || [], event.dataState),\r\n            dataState: event.dataState\r\n        });\r\n    }\r\n\r\n    removeIndex = (data, removeIndex) => {\r\n        const data1 = [...data.splice(0, removeIndex), ...data.splice(removeIndex + 1)]\r\n        return data1\r\n    }\r\n\r\n    closeModal = () => {\r\n        let loadEsign = this.props.Login.loadEsign;\r\n        let openModal = this.props.Login.openModal;\r\n        let selectedRecord = this.props.Login.selectedRecord;\r\n        let selectedMaster = this.props.Login.selectedMaster;\r\n        let selectedControl = this.props.Login.selectedControl;\r\n        let masterextractedColumnList = this.props.Login.masterextractedColumnList;\r\n        let masterfieldList = this.props.Login.masterfieldList;\r\n        let masterdataList = this.props.Login.masterfieldList;\r\n        let mastercomboComponents = this.props.Login.masterfieldList;\r\n        let masterwithoutCombocomponent = this.props.Login.masterfieldList;\r\n        let masterComboColumnFiled = this.props.Login.masterComboColumnFiled;\r\n        let masterDesign = this.props.Login.masterDesign;\r\n        let addMaster = this.props.Login.addMaster\r\n        let masterIndex = this.props.Login.masterIndex\r\n        let screenName=this.props.Login.screenName\r\n\r\n        if (this.props.Login.loadEsign) {\r\n            if (this.props.Login.operation === \"delete\") {\r\n                loadEsign = false;\r\n                openModal = false;\r\n                selectedRecord = {};\r\n            }\r\n            else {\r\n                loadEsign = false;\r\n                selectedRecord['esignpassword'] = \"\"\r\n                selectedRecord['esigncomments'] = \"\"\r\n                selectedRecord['esignreason'] = \"\"\r\n            }\r\n        } else if (this.props.Login.addMaster) {\r\n            if (masterIndex !== 0) {\r\n                screenName=selectedControl[masterIndex - 1].displayname[this.props.Login.userInfo.slanguagetypecode]\r\n                selectedMaster = this.removeIndex(selectedMaster, masterIndex)\r\n                selectedControl = this.removeIndex(selectedControl, masterIndex)\r\n                masterextractedColumnList = masterextractedColumnList && this.removeIndex(masterextractedColumnList, masterIndex)\r\n                masterfieldList = masterfieldList && this.removeIndex(masterfieldList, masterIndex)\r\n                masterdataList = masterdataList && this.removeIndex(masterdataList, masterIndex)\r\n                mastercomboComponents = mastercomboComponents && this.removeIndex(mastercomboComponents, masterIndex)\r\n                masterComboColumnFiled = masterComboColumnFiled && this.removeIndex(masterComboColumnFiled, masterIndex)\r\n                masterwithoutCombocomponent = masterwithoutCombocomponent && this.removeIndex(masterwithoutCombocomponent, masterIndex)\r\n                masterDesign = masterDesign && this.removeIndex(masterDesign, masterIndex)\r\n                masterIndex = masterIndex - 1;\r\n                //  masterprimaryKeyField = \"\"\r\n                //addMaster = false\r\n            } else {\r\n                selectedMaster = []\r\n                selectedControl = []\r\n                masterextractedColumnList = []\r\n                masterfieldList = []\r\n                addMaster = false\r\n                masterdataList = []\r\n                mastercomboComponents = []\r\n                masterwithoutCombocomponent = []\r\n                masterComboColumnFiled = []\r\n                masterDesign = []\r\n                masterIndex=undefined\r\n                screenName=this.props.Login.inputParam.displayName\r\n            }\r\n\r\n        }\r\n        else {\r\n            openModal = false;\r\n            selectedRecord = {};\r\n            selectedMaster = []\r\n            selectedControl = []\r\n            masterextractedColumnList = []\r\n            masterfieldList = []\r\n            addMaster = false\r\n            masterdataList = []\r\n            mastercomboComponents = []\r\n            masterwithoutCombocomponent = []\r\n            masterComboColumnFiled = []\r\n            masterDesign = []\r\n            masterIndex=undefined\r\n        }\r\n\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                openModal, loadEsign,\r\n                selectedRecord, selectedId: null, selectedMaster, selectedControl,\r\n                masterextractedColumnList, masterfieldList\r\n                , addMaster, masterIndex, masterdataList,\r\n                mastercomboComponents,\r\n                masterwithoutCombocomponent,\r\n                masterComboColumnFiled, masterDesign,screenName\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n\r\n    }\r\n\r\n    static getDerivedStateFromProps(props, state) {\r\n        if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\r\n            toast.warn(props.Login.masterStatus);\r\n            props.Login.masterStatus = \"\";\r\n        }\r\n\r\n        if (props.Login.error !== state.error) {\r\n            toast.error(props.Login.error)\r\n            props.Login.error = \"\";\r\n        }\r\n        return null;\r\n    }\r\n\r\n    render() {\r\n\r\n        let primaryKeyField = \"ndynamicmastercode\";\r\n\r\n        const editId = this.props.Login.inputParam && this.state.controlMap.has(\"Edit\")\r\n            && this.state.controlMap.get(\"Edit\").ncontrolcode;\r\n\r\n        const editParam = {\r\n            screenName: this.props.Login.inputParam && this.props.Login.inputParam.displayName\r\n                && this.props.intl.formatMessage({ id: this.props.Login.inputParam.displayName }), operation: \"update\", primaryKeyField,\r\n            inputParam: this.props.Login.inputParam, userInfo: this.props.Login.userInfo, ncontrolCode: editId\r\n        };\r\n\r\n        const deleteParam = { operation: \"delete\" };\r\n\r\n        // const mandatoryFields=[];\r\n        // this.extractedColumnList.forEach(item=>item.mandatory === true ? \r\n        //     mandatoryFields.push(item) :\"\"\r\n        // );   \r\n\r\n        return (<>\r\n            <Row>\r\n                <Col>\r\n                    <ListWrapper className=\"client-list-content\">\r\n                        {this.state.data ?\r\n                            <DynamicDataGrid\r\n                                primaryKeyField={primaryKeyField}\r\n                                data={this.state.data}\r\n                                dataResult={this.state.dataResult}\r\n                                dataState={this.state.dataState}\r\n                                dataStateChange={this.dataStateChange}\r\n                                extractedColumnList={this.extractedColumnList}\r\n                                detailedFieldList={this.detailedColumnList}\r\n                                expandField={this.detailedColumnList.length > 0 ? \"expanded\" : false}\r\n                                methodUrl={\"\"}\r\n                                controlMap={this.state.controlMap}\r\n                                userRoleControlRights={this.state.userRoleControlRights}\r\n                                inputParam={this.props.Login.inputParam}\r\n                                userInfo={this.props.Login.userInfo}\r\n                                fetchRecord={this.fetchRecord}\r\n                                editParam={editParam}\r\n                                deleteRecord={this.deleteRecord}\r\n                                deleteParam={deleteParam}\r\n                                reloadData={this.reloadData}\r\n                                addRecord={this.openModal}\r\n                                pageable={true}\r\n                                scrollable={'scrollable'}\r\n                                gridHeight={'600px'}\r\n                                isActionRequired={true}\r\n                                isToolBarRequired={true}\r\n                                selectedId={this.props.Login.selectedId}\r\n                                import={this.import}\r\n                                screenName={this.props.Login.displayName}\r\n                                isImportRequired={true}\r\n                            />\r\n                            : \"\"}\r\n                    </ListWrapper>\r\n                </Col>\r\n            </Row>\r\n\r\n            {/* Below Condition Added to avoid unwanted rendering of SlideOut */}\r\n            {this.props.Login.openModal ?\r\n                <SlideOutModal show={this.props.Login.openModal}\r\n                    closeModal={this.closeModal}\r\n                    operation={this.props.Login.operation ? this.props.Login.operation : \"create\"}\r\n                    inputParam={this.props.Login.inputParam}\r\n                    screenName={this.props.Login.screenName}\r\n                    onSaveClick={this.props.Login.addMaster ?\r\n                        this.onSaveMasterRecord :this.props.Login.operation==='import'?\r\n                        this.onSaveClickImportFile : this.onSaveClick}\r\n                    esign={this.props.Login.loadEsign}\r\n                    validateEsign={this.validateEsign}\r\n                    masterStatus={this.props.Login.masterStatus}\r\n                    updateStore={this.props.updateStore}\r\n                    selectedRecord={this.props.Login.addMaster ?\r\n                        this.state.selectedMaster[this.props.Login.masterIndex] : this.state.selectedRecord || {}}\r\n                    mandatoryFields={this.props.Login.addMaster ?\r\n                        this.props.Login.masterextractedColumnList[this.props.Login.masterIndex].filter(x => x.mandatory === true)\r\n                        :this.props.Login.operation==='import'?[{\r\n                            \"mandatory\": true,\r\n                            \"idsName\":\"IDS_FILE\" ,\r\n                            \"dataField\": 'stemplatefilename',\r\n                            \"mandatoryLabel\": \"IDS_SELECT\" ,\r\n                            \"controlType\": \"textbox\"\r\n                        }]: this.state.mandatoryFields || []}\r\n                    addComponent={this.props.Login.loadEsign ?\r\n                        <Esign operation={this.props.Login.operation}\r\n                            onInputOnChange={this.onInputOnChange}\r\n                            inputParam={this.props.Login.inputParam}\r\n                            selectedRecord={this.state.selectedRecord || {}}\r\n                        /> : this.props.Login.addMaster ?\r\n                            <AddMasterRecords\r\n                                selectedControl={this.props.Login.selectedControl[this.props.Login.masterIndex]}\r\n                                fieldList={this.props.Login.masterfieldList && this.props.Login.masterfieldList[this.props.Login.masterIndex]}\r\n                                extractedColumnList={this.props.Login.masterextractedColumnList[this.props.Login.masterIndex]}\r\n                                // primaryKeyField={this.props.Login.masterprimaryKeyField}\r\n                                selectedRecord={this.state.selectedMaster[this.props.Login.masterIndex] || {}}\r\n                                onInputOnChange={this.onInputOnChangeMaster}\r\n                                onComboChange={this.onComboChangeMaster}\r\n                                handleDateChange={this.handleDateChangeMaster}\r\n                                dataList={this.props.Login.masterdataList && this.props.Login.masterdataList[this.props.Login.masterIndex]}\r\n                                onNumericInputOnChange={this.onNumericInputOnChangeMaster}\r\n                                masterDesign={this.props.Login.masterDesign && this.props.Login.masterDesign[this.props.Login.masterIndex]}\r\n                                mastertimeZoneList={this.props.Login.mastertimeZoneList}\r\n                                masterdefaultTimeZone={this.props.Login.masterdefaultTimeZone}\r\n                                onComboChangeMasterDyanmic={this.onComboChangeMasterDyanmic}\r\n                                handleDateChangeMasterDynamic={this.handleDateChangeMasterDynamic}\r\n                                onInputOnChangeMasterDynamic={this.onInputOnChangeMasterDynamic}\r\n                                onNumericInputChangeMasterDynamic={this.onNumericInputChangeMasterDynamic}\r\n                                onNumericBlurMasterDynamic={this.onNumericBlurMasterDynamic}\r\n                                userInfo={this.props.Login.userInfo}\r\n                                Login={this.props.Login}\r\n                                addMasterRecord={this.addMasterRecord}\r\n                                userRoleControlRights={this.props.Login.userRoleControlRights}\r\n                                masterIndex={this.props.Login.masterIndex}\r\n                            /> : this.props.Login.operation === 'import' ?\r\n                            <ImportTemplate\r\n                                selectedRecord={this.state.selectedRecord || {}}\r\n                                //onInputOnChange={this.onInputOnChange}\r\n                                onDrop={this.onDropFile}\r\n                                deleteAttachment={this.deleteAttachment}\r\n                                actionType={this.state.actionType}\r\n                            />\r\n                            : \r\n                            <DynamicSlideout\r\n                                selectedRecord={this.props.Login.selectedRecord}\r\n                                templateData={this.props.Login.masterData.DynamicMasterDesign &&\r\n                                    this.props.Login.masterData.DynamicMasterDesign.slideoutdesign}\r\n                                // handleChange={this.handleChange}\r\n                                handleDateChange={this.handleDateChange}\r\n                                onInputOnChange={this.onInputOnChange}\r\n                                onNumericInputChange={this.onNumericInputChange}\r\n                                comboData={this.props.Login.comboData}\r\n                                onComboChange={this.onComboChange}\r\n                                onDropFile={this.onDropFile}\r\n                                deleteAttachment={this.deleteAttachment}\r\n                                onNumericBlur={this.onNumericBlur}\r\n                                userInfo={this.props.Login.userInfo}\r\n                                timeZoneList={this.props.Login.timeZoneList}\r\n                                defaultTimeZone={this.props.Login.defaultTimeZone}\r\n                                Login={this.props.Login}\r\n                                addMasterRecord={this.addMasterRecord}\r\n                                userRoleControlRights={this.props.Login.userRoleControlRights}\r\n                            />\r\n                    }\r\n\r\n                /> : \"\"}\r\n        </>\r\n        );\r\n    }\r\n\r\n    onSaveClickImportFile = (saveType, formRef) => {\r\n        //add \r\n        let inputFileData = { nsitecode: this.props.Login.userInfo.nmastersitecode };\r\n        let editData = {};\r\n        const formData = new FormData();\r\n        const selectedRecord = this.state.selectedRecord;\r\n        const acceptedFiles = selectedRecord.stemplatefilename;\r\n        if (acceptedFiles && acceptedFiles.length === 1) {\r\n            inputFileData['userinfo'] = this.props.Login.userInfo\r\n            if (acceptedFiles && acceptedFiles.length === 1) {\r\n                acceptedFiles.forEach((file, index) => {\r\n                    formData.append(\"uploadedFile\", file);\r\n                });\r\n            }\r\n            const dateList=[];\r\n            this.props.Login.masterData.DynamicMasterDesign.screendesign.masterdatefields.map(x=>{\r\n                dateList.push(x['2'])\r\n            })\r\n            formData.append('comboComponents',Lims_JSON_stringify(JSON.stringify( this.state.comboComponents),false))\r\n            formData.append('masterdateconstraints',Lims_JSON_stringify(JSON.stringify(this.props.Login.masterData.DynamicMasterDesign.screendesign.masterdateconstraints),false))\r\n            formData.append('masterdatelist',Lims_JSON_stringify(JSON.stringify(dateList),false))\r\n            formData.append('mastercombinationunique', Lims_JSON_stringify(JSON.stringify(this.props.Login.masterData.DynamicMasterDesign.screendesign.mastercombinationunique),false))\r\n            formData.append('ndesigntemplatemappingcode', this.props.Login.masterData.DynamicMasterDesign.ndesigntemplatemappingcode)\r\n            const inputParam = {\r\n                classUrl: this.props.Login.inputParam.classUrl,\r\n                methodUrl: this.props.Login.inputParam.methodUrl,\r\n                inputData: { userinfo: this.props.Login.userInfo },\r\n                formData: formData,\r\n                editData: editData,\r\n                isFileupload: true,\r\n                operation: this.props.Login.operation,\r\n                displayName: this.props.Login.inputParam.displayName,\r\n                saveType, formRef\r\n\r\n            }\r\n            const esignNeeded = showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode);\r\n            if (esignNeeded) {\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        loadEsign: true, screenData: { inputParam, masterData: this.props.Login.masterData },\r\n                        openModal: true, screenName: this.props.intl.formatMessage({ id: this.props.Login.inputParam.displayName }),\r\n                        operation: this.props.Login.operation,\r\n                    },\r\n\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n            else {\r\n                this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\r\n            }\r\n        } else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_PLEASESELECTTHEFILE\" }))\r\n        }\r\n    }\r\n\r\n    onComboChangeMasterDyanmic = (comboData, control, customName) => {\r\n\r\n        let comboName = customName || control.label;\r\n        let selectedMaster = this.state.selectedMaster || [];\r\n        const masterIndex = this.props.Login.masterIndex\r\n        selectedMaster[masterIndex] = selectedMaster[masterIndex] && { ...selectedMaster[masterIndex] } || {}\r\n        //if (comboData) {\r\n        comboData[\"item\"] = {\r\n            ...comboData[\"item\"], \"pkey\": control.valuemember, \"nquerybuildertablecode\": control.nquerybuildertablecode,\r\n            \"source\": control.source\r\n        };\r\n        selectedMaster[masterIndex][comboName] = comboData;\r\n\r\n        // console.log(\"selected:\", selectedMaster, comboData, control, customName);\r\n        if (control.child && control.child.length > 0) {\r\n            const childComboList = getSameRecordFromTwoArrays(this.props.Login.mastercomboComponents[masterIndex], control.child, \"label\")\r\n            let childColumnList = {};\r\n            childComboList.map(columnList => {\r\n                const val = this.comboChild(this.props.Login.mastercomboComponents[masterIndex], columnList, childColumnList, false);\r\n                childColumnList = val.childColumnList\r\n            })\r\n\r\n            const parentList = getSameRecordFromTwoArrays(this.props.Login.masterwithoutCombocomponent[masterIndex], control.child, \"label\")\r\n\r\n            if (comboData) {\r\n                const inputParem = {\r\n                    child: control.child,\r\n                    source: control.source,\r\n                    primarykeyField: control.valuemember,\r\n                    value: comboData.value,\r\n                    item: comboData.item\r\n                }\r\n                this.props.getChildValuesForAddMaster(inputParem,\r\n                    this.props.Login.userInfo, selectedMaster, this.props.Login.masterdataList,\r\n                    childComboList, childColumnList,\r\n                    this.props.Login.masterwithoutCombocomponent,\r\n                    [...childComboList, ...parentList], masterIndex)\r\n            } else {\r\n                let comboData = this.props.Login.masterdataList\r\n                const withoutCombocomponent = this.props.Login.masterwithoutCombocomponent || []\r\n                const inputParam = { control, comboComponents: this.props.Login.mastercomboComponents[masterIndex], withoutCombocomponent: withoutCombocomponent[masterIndex], selectedMaster: selectedMaster[masterIndex], comboData: comboData[masterIndex] }\r\n                const childParam = childComboClear(inputParam)\r\n                selectedMaster[masterIndex] = childParam.selectedRecord\r\n                comboData[masterIndex] = childParam.comboData\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: { selectedMaster, mastedataList: comboData }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n        } else {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: { selectedMaster }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n    }\r\n\r\n\r\n    onInputOnChangeMasterDynamic = (event, radiotext) => {\r\n        let selectedMaster = this.state.selectedMaster || [];\r\n        const masterIndex = this.props.Login.masterIndex\r\n        selectedMaster[masterIndex] = selectedMaster[masterIndex] && { ...selectedMaster[masterIndex] } || {}\r\n\r\n        if (event.target.type === 'toggle') {\r\n            selectedMaster[masterIndex][event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\r\n        } else if (event.target.type === 'numeric') {\r\n            if (/\\D/.test(event.target.value))\r\n                selectedMaster[masterIndex][event.target.name] = event.target.value;\r\n        } else if (event.target.type === 'checkbox') {\r\n            const value = selectedMaster[masterIndex][event.target.name];\r\n            if (value !== '' && value !== undefined) {\r\n                if (value.includes(radiotext)) {\r\n                    const index = value.indexOf(radiotext);\r\n                    if (index !== -1) {\r\n                        if (index === 0) {\r\n                            const indexcomma = value.indexOf(\",\")\r\n                            if (indexcomma !== -1) {\r\n                                selectedMaster[masterIndex][event.target.name] = value.slice(indexcomma + 1)\r\n                            } else {\r\n                                selectedMaster[masterIndex][event.target.name] = \"\"\r\n                            }\r\n                        } else {\r\n                            if (value.slice(index).indexOf(\",\") !== -1) {\r\n                                selectedMaster[masterIndex][event.target.name] = value.slice(0, index) + value.slice(index + value.slice(index).indexOf(\",\") + 1)\r\n                            } else {\r\n                                selectedMaster[masterIndex][event.target.name] = value.slice(0, index - 1)\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                } else {\r\n                    selectedMaster[masterIndex][event.target.name] = value + ',' + radiotext;\r\n                }\r\n\r\n            } else {\r\n                selectedMaster[masterIndex][event.target.name] = radiotext;\r\n            }\r\n        } else if (event.target.type === 'radio') {\r\n            selectedMaster[masterIndex][event.target.name] = radiotext\r\n        } else {\r\n            selectedMaster[masterIndex][event.target.name] = event.target.value;\r\n        }\r\n        this.setState({ selectedMaster });\r\n    }\r\n\r\n\r\n    handleDateChangeMasterDynamic = (dateValue, dateName) => {\r\n        let selectedMaster = this.state.selectedMaster || [];\r\n        const masterIndex = this.props.Login.masterIndex\r\n        selectedMaster[masterIndex] = selectedMaster[masterIndex] && { ...selectedMaster[masterIndex] } || {}\r\n\r\n        selectedMaster[masterIndex][dateName] = dateValue;\r\n\r\n        this.setState({ selectedMaster });\r\n    }\r\n\r\n    onNumericInputChangeMasterDynamic = (value, name) => {\r\n        let selectedMaster = this.state.selectedMaster || [];\r\n        const masterIndex = this.props.Login.masterIndex\r\n        selectedMaster[masterIndex] = selectedMaster[masterIndex] && { ...selectedMaster[masterIndex] } || {}\r\n\r\n        selectedMaster[masterIndex][name] = value;\r\n        this.setState({ selectedMaster });\r\n    }\r\n\r\n    onNumericBlurMasterDynamic = (value, control) => {\r\n        let selectedMaster = this.state.selectedMaster || [];\r\n        const masterIndex = this.props.Login.masterIndex\r\n        selectedMaster[masterIndex] = selectedMaster[masterIndex] && { ...selectedMaster[masterIndex] } || {}\r\n\r\n        if (selectedMaster[masterIndex][control.label]) {\r\n            if (control.max) {\r\n                if (!(selectedMaster[masterIndex][control.label] < parseFloat(control.max))) {\r\n                    selectedMaster[masterIndex][control.label] = control.precision ? parseFloat(control.max) : parseInt(control.max)\r\n                }\r\n            }\r\n            if (control.min) {\r\n                if (!(selectedMaster[masterIndex][control.label] > parseFloat(control.min))) {\r\n                    selectedMaster[masterIndex][control.label] = control.precision ? parseFloat(control.min) : parseInt(control.min)\r\n                }\r\n            }\r\n\r\n\r\n        }\r\n        this.setState({ selectedMaster });\r\n    }\r\n    onComboChangeMaster = (comboData, fieldName, item) => {\r\n        const selectedMaster = this.state.selectedMaster || [];\r\n        const masterIndex = this.props.Login.masterIndex\r\n        selectedMaster[masterIndex] = selectedMaster[masterIndex] && { ...selectedMaster[masterIndex] } || {}\r\n        if (comboData !== null) {\r\n            if (this.props.Login.selectedControl[masterIndex].table.item.nformcode === 137) {\r\n                selectedMaster[masterIndex][item.tableDataField] = comboData.value;\r\n            }\r\n            else if (item.foreignDataField) {\r\n                selectedMaster[masterIndex][item.foreignDataField] = comboData.value;\r\n            }\r\n        }\r\n        selectedMaster[masterIndex][fieldName] = comboData;\r\n        if (item.childIndex !== undefined) {\r\n            this.props.getChildComboMaster(selectedMaster, fieldName, item,\r\n                this.props.Login.selectedControl,\r\n                this.props.Login.masterfieldList,\r\n                this.props.Login.masterdataList, this.props.Login.userInfo, masterIndex)\r\n        } else {\r\n            this.setState({ selectedMaster });\r\n        }\r\n\r\n    }\r\n\r\n    handleDateChangeMaster = (dateName, dateValue, item) => {\r\n        //   const { selectedMaster } = this.state;\r\n        const selectedMaster = this.state.selectedMaster || [];\r\n        const masterIndex = this.props.Login.masterIndex\r\n        selectedMaster[masterIndex] = selectedMaster[masterIndex] && { ...selectedMaster[masterIndex] } || {}\r\n\r\n        selectedMaster[masterIndex][dateName] = dateValue;\r\n        const age = ageCalculate(dateValue);\r\n        selectedMaster[masterIndex][\"sage\"] = age;\r\n        this.setState({ selectedMaster });\r\n\r\n    }\r\n\r\n    onNumericInputOnChangeMaster = (value, name, item) => {\r\n        const selectedMaster = this.state.selectedMaster || [];\r\n        const masterIndex = this.props.Login.masterIndex\r\n        selectedMaster[masterIndex] = selectedMaster[masterIndex] && { ...selectedMaster[masterIndex] } || {}\r\n\r\n        selectedMaster[masterIndex][name] = value;\r\n        this.setState({ selectedMaster });\r\n    }\r\n\r\n\r\n\r\n    onInputOnChangeMaster = (event) => {\r\n        const selectedMaster = this.state.selectedMaster || [];\r\n        const masterIndex = this.props.Login.masterIndex\r\n        selectedMaster[masterIndex] = selectedMaster[masterIndex] && { ...selectedMaster[masterIndex] } || {}\r\n\r\n        if (event.target.type === 'checkbox') {\r\n            selectedMaster[masterIndex][event.target.name] = event.target.checked === true ? 3 : 4;\r\n            if (this.props.Login.selectedControl[masterIndex].table.item.nformcode === 137) {\r\n                if (selectedMaster[masterIndex].nneedcurrentaddress === 3) {\r\n                    selectedMaster[masterIndex].sflatnotemp = selectedMaster[masterIndex].sflatno;\r\n                    selectedMaster[masterIndex].shousenotemp = selectedMaster[masterIndex].shouseno;\r\n                    selectedMaster[masterIndex].spostalcodetemp = selectedMaster[masterIndex].spostalcode;\r\n                    selectedMaster[masterIndex].sstreettemp = selectedMaster[masterIndex].sstreet;\r\n                    selectedMaster[masterIndex].scitynametemp = selectedMaster[masterIndex].scityname;\r\n                    selectedMaster[masterIndex].sdistrictnametemp = selectedMaster[masterIndex].sdistrictname;\r\n                    selectedMaster[masterIndex].sregionnametemp = selectedMaster[masterIndex].sregionname;\r\n                }\r\n                else {\r\n                    selectedMaster[masterIndex].sflatnotemp = \"\";\r\n                    selectedMaster[masterIndex].shousenotemp = \"\";\r\n                    selectedMaster[masterIndex].spostalcodetemp = \"\";\r\n                    selectedMaster[masterIndex].sstreettemp = \"\";\r\n                    selectedMaster[masterIndex].scitynametemp = \"\";\r\n                    selectedMaster[masterIndex].sdistrictnametemp = \"\";\r\n                    selectedMaster[masterIndex].sregionnametemp = \"\";\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            selectedMaster[masterIndex][event.target.name] = event.target.value;\r\n        }\r\n        this.setState({ selectedMaster });\r\n    }\r\n\r\n    onSaveMasterRecord = (saveType, formRef) => {\r\n        //add / edit            \r\n        const masterIndex = this.props.Login.masterIndex;\r\n        let inputData = [];\r\n        const selectedControl = this.props.Login.selectedControl\r\n        const masterDesign = this.props.Login.masterDesign\r\n        inputData[\"userinfo\"] = { ...this.props.Login.userInfo, nformcode: selectedControl[masterIndex].table.item.nformcode };\r\n        inputData[selectedControl[masterIndex].table.item.methodUrl.toLowerCase()] = { \"nsitecode\": this.props.Login.userInfo.nmastersitecode };\r\n\r\n        const methodUrl = selectedControl[masterIndex].table.item.methodUrl.toLowerCase()\r\n\r\n\r\n        if (selectedControl[masterIndex].table.item.component === 'Dynamic') {\r\n            const selectedMaster = this.state.selectedMaster;\r\n            inputData[\"userinfo\"] = { ...this.props.Login.userInfo, nformcode: selectedControl[masterIndex].table.item.nformcode };\r\n            inputData[\"masterdateconstraints\"] = masterDesign[masterIndex].screendesign.masterdateconstraints;\r\n            inputData[\"masterdatefields\"] = masterDesign[masterIndex].screendesign.masterdatefields;\r\n            inputData[\"mastercombinationunique\"] = masterDesign[masterIndex].screendesign.mastercombinationunique;\r\n            //add                          \r\n            inputData[\"dynamicmaster\"] = {\r\n                nformcode: selectedControl[masterIndex].table.item.nformcode,\r\n                ndesigntemplatemappingcode: masterDesign[masterIndex].ndesigntemplatemappingcode,\r\n                jsondata: {}, jsonuidata: {}\r\n            };\r\n\r\n            const dateList = [];\r\n            const defaulttimezone = this.props.Login.defaulttimezone;\r\n\r\n            masterDesign[masterIndex] &&\r\n                masterDesign[masterIndex].slideoutdesign.map(row => {\r\n                    row.children.map(column => {\r\n                        column.children.map(component => {\r\n                            if (component.hasOwnProperty(\"children\")) {\r\n\r\n                                component.children.map(componentrow => {\r\n                                    if (componentrow.inputtype === \"combo\") {\r\n                                        inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label] = selectedMaster[componentrow.label] ?\r\n                                            {\r\n                                                value: selectedMaster[masterIndex][componentrow.label].value,\r\n                                                label: selectedMaster[masterIndex][componentrow.label].label,\r\n                                                pkey: selectedMaster[masterIndex][componentrow.label].item.pkey,\r\n                                                nquerybuildertablecode: selectedMaster[masterIndex][componentrow.label].item.nquerybuildertablecode,\r\n                                                source: selectedMaster[masterIndex][componentrow.label].item.source\r\n                                            } : -1\r\n\r\n                                        inputData[\"dynamicmaster\"][\"jsonuidata\"][componentrow.label] = selectedMaster[masterIndex][componentrow.label] ? selectedMaster[masterIndex][componentrow.label].label : \"\"\r\n\r\n                                    }\r\n                                    else if (componentrow.inputtype === \"date\") {\r\n                                        if (componentrow.mandatory) {\r\n                                            inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label] = formatDate(selectedMaster[masterIndex][componentrow.label], false)\r\n\r\n                                            inputData[\"dynamicmaster\"][\"jsonuidata\"][componentrow.label] = inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label]\r\n                                            //inputData[\"dynamicmaster\"][\"jsonuidata\"][componentrow.label] = convertDateTimetoString(selectedRecord[componentrow.label], userInfo);\r\n                                        }\r\n                                        else {\r\n                                            inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label] = componentrow.loadcurrentdate ?\r\n                                                formatDate(selectedMaster[masterIndex][componentrow.label] || new Date(), false) :\r\n                                                selectedMaster[masterIndex][componentrow.label] ? formatDate(selectedMaster[masterIndex][componentrow.label], false)\r\n                                                    : \"\";\r\n\r\n                                            inputData[\"dynamicmaster\"][\"jsonuidata\"][componentrow.label] = inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label];\r\n                                            //convertDateTimetoString(selectedRecord[componentrow.label], userInfo);\r\n                                        }\r\n                                        if (componentrow.timezone) {\r\n                                            inputData[\"dynamicmaster\"][\"jsondata\"][`tz${componentrow.label}`] = selectedMaster[masterIndex][`tz${componentrow.label}`] ?\r\n                                                { value: selectedMaster[masterIndex][`tz${componentrow.label}`].value, label: selectedMaster[masterIndex][`tz${componentrow.label}`].label } :\r\n                                                defaulttimezone ? defaulttimezone : -1\r\n\r\n                                            inputData[\"dynamicmaster\"][\"jsonuidata\"][`tz${componentrow.label}`] = inputData[\"dynamicmaster\"][\"jsondata\"][`tz${componentrow.label}`]\r\n                                        }\r\n                                        dateList.push(componentrow.label)\r\n                                    }\r\n\r\n                                    else {\r\n                                        inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label] = selectedMaster[masterIndex][componentrow.label] ?\r\n                                            selectedMaster[masterIndex][componentrow.label] : \"\"\r\n\r\n                                        inputData[\"dynamicmaster\"][\"jsonuidata\"][componentrow.label] = inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label]\r\n                                        // inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label]\r\n\r\n                                    }\r\n                                    return inputData[\"dynamicmaster\"];\r\n                                })\r\n                            }\r\n                            else {\r\n                                if (component.inputtype === \"combo\") {\r\n                                    inputData[\"dynamicmaster\"][\"jsondata\"][component.label] = selectedMaster[masterIndex][component.label] ?\r\n                                        {\r\n                                            value: selectedMaster[masterIndex][component.label].value,\r\n                                            label: selectedMaster[masterIndex][component.label].label,\r\n                                            pkey: selectedMaster[masterIndex][component.label].item.pkey,\r\n                                            nquerybuildertablecode: selectedMaster[masterIndex][component.label].item.nquerybuildertablecode,\r\n                                            source: selectedMaster[masterIndex][component.label].item.source\r\n                                        } : -1\r\n\r\n                                    inputData[\"dynamicmaster\"][\"jsonuidata\"][component.label] = inputData[\"dynamicmaster\"][\"jsondata\"][component.label].label;\r\n                                    //selectedRecord[component.label] ? selectedRecord[component.label].label : \"\"\r\n                                }\r\n                                else if (component.inputtype === \"date\") {\r\n                                    if (component.mandatory) {\r\n                                        inputData[\"dynamicmaster\"][\"jsondata\"][component.label] = formatDate(selectedMaster[masterIndex][component.label], false);\r\n                                        // convertDateTimetoString(selectedRecord[component.label] ?\r\n                                        // selectedRecord[component.label] : new Date(), userInfo);\r\n\r\n                                        inputData[\"dynamicmaster\"][\"jsonuidata\"][component.label] = inputData[\"dynamicmaster\"][\"jsondata\"][component.label]\r\n                                        //convertDateTimetoString(selectedRecord[component.label], userInfo);\r\n\r\n                                    } else {\r\n                                        inputData[\"dynamicmaster\"][\"jsondata\"][component.label] = component.loadcurrentdate ?\r\n                                            //convertDateTimetoString(selectedRecord[component.label] ?                                      \r\n                                            //    selectedRecord[component.label] : new Date(), userInfo) :\r\n                                            formatDate(selectedMaster[masterIndex][component.label] || new Date(), false) :\r\n                                            selectedMaster[masterIndex][component.label] ?\r\n                                                // convertDateTimetoString(selectedRecord[component.label] ?\r\n                                                //   selectedRecord[component.label] : new Date(), userInfo) : \"\";\r\n                                                formatDate(selectedMaster[masterIndex][component.label], false) : \"\";\r\n                                        inputData[\"dynamicmaster\"][\"jsonuidata\"][component.label] = inputData[\"dynamicmaster\"][\"jsondata\"][component.label]\r\n                                        //convertDateTimetoString(selectedRecord[component.label], userInfo)\r\n\r\n                                    }\r\n                                    if (component.timezone) {\r\n                                        inputData[\"dynamicmaster\"][\"jsondata\"][`tz${component.label}`] = selectedMaster[masterIndex][`tz${component.label}`] ?\r\n                                            { value: selectedMaster[masterIndex][`tz${component.label}`].value, label: selectedMaster[masterIndex][`tz${component.label}`].label } :\r\n                                            defaulttimezone ? defaulttimezone : -1\r\n\r\n                                        inputData[\"dynamicmaster\"][\"jsonuidata\"][`tz${component.label}`] = inputData[\"dynamicmaster\"][\"jsondata\"][`tz${component.label}`]\r\n                                    }\r\n                                    dateList.push(component.label)\r\n                                }\r\n                                else {\r\n                                    inputData[\"dynamicmaster\"][\"jsondata\"][component.label] = selectedMaster[masterIndex][component.label] ?\r\n                                        selectedMaster[masterIndex][component.label] : \"\"\r\n\r\n                                    inputData[\"dynamicmaster\"][\"jsonuidata\"][component.label] = inputData[\"dynamicmaster\"][\"jsondata\"][component.label]\r\n                                }\r\n                            }\r\n                            return inputData[\"dynamicmaster\"];\r\n                        }\r\n                        )\r\n                        return inputData[\"dynamicmaster\"];\r\n                    })\r\n                    return inputData[\"dynamicmaster\"];\r\n                })\r\n\r\n\r\n            inputData[\"dynamicmaster\"][\"jsonstring\"] = JSON.stringify(inputData[\"dynamicmaster\"][\"jsondata\"]);\r\n            inputData[\"dynamicmaster\"][\"jsonuistring\"] = JSON.stringify(inputData[\"dynamicmaster\"][\"jsonuidata\"]);\r\n            inputData[\"masterdatelist\"] = dateList;\r\n\r\n\r\n        }\r\n        else if (selectedControl[masterIndex].table.item.component === 'Type3Component'\r\n            && selectedControl[masterIndex].table.item.nformcode === 137) {\r\n            inputData[\"noneedfilter\"] = true\r\n            this.props.Login.masterextractedColumnList[masterIndex].map(item => {\r\n                let fieldName = item.dataField;\r\n                if (item.isJsonField === true) {\r\n                    return inputData[methodUrl][item.jsonObjectName] = { ...inputData[methodUrl][item.jsonObjectName], [fieldName]: this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName] : \"\" }\r\n                }\r\n                else {\r\n                    if (item.controlType === \"selectbox\") {\r\n                        // inputData[methodUrl][fieldName] = this.state.selectedMaster[fieldName] ? this.state.selectedMaster[fieldName].label ? this.state.selectedMaster[fieldName].label : \"\" : -1;\r\n                        inputData[methodUrl][item.tableDataField] = this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName].value ? this.state.selectedMaster[masterIndex][fieldName].value : \"\" : -1;\r\n                        return inputData;\r\n                    }\r\n                    else if (item.controlType === \"datepicker\") {\r\n                        inputData[methodUrl][item.dateField] = formatInputDate(this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName] : \"\", false);\r\n                    }\r\n                    else if (item.controlType === \"checkbox\") {\r\n                        inputData[methodUrl][item.controlName] = this.state.selectedMaster[masterIndex][item.controlName] ? this.state.selectedMaster[masterIndex][item.controlName] : transactionStatus.NO;\r\n                    }\r\n                    else {\r\n                        inputData[methodUrl][fieldName] = this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName] : \"\";\r\n                    }\r\n                    // inputData[methodUrl][selectedRecordPrimarykey] = this.props.Login.selectedId;\r\n                    return inputData;\r\n                }\r\n            })\r\n        }\r\n        else {\r\n\r\n            this.props.Login.masterextractedColumnList[masterIndex].map(item => {\r\n                let fieldName = item.dataField;\r\n                if (item.isJsonField === true) {\r\n                    return inputData[methodUrl][item.jsonObjectName] = { ...inputData[methodUrl][item.jsonObjectName], [fieldName]: this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName] : \"\" }\r\n                }\r\n                else {\r\n                    if (item.controlType === \"selectbox\") {\r\n                        inputData[methodUrl][fieldName] = this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName].label ? this.state.selectedMaster[masterIndex][fieldName].label : \"\" : -1;\r\n                        inputData[methodUrl][item.foreignDataField] = this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName].value ? this.state.selectedMaster[masterIndex][fieldName].value : \"\" : -1;\r\n                        return inputData;\r\n                    }\r\n                    else if (item.controlType === \"datepicker\") {\r\n                        inputData[methodUrl][item.dateField] = formatInputDate(this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName] : \"\", false);\r\n                    }\r\n                    else if (item.controlType === \"checkbox\") {\r\n                        inputData[methodUrl][item.controlName] = this.state.selectedMaster[masterIndex][item.controlName] ? this.state.selectedMaster[masterIndex][item.controlName] : transactionStatus.NO;\r\n                    }\r\n                    else {\r\n                        inputData[methodUrl][fieldName] = this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName] : \"\";\r\n                    }\r\n                    // inputData[methodUrl][selectedRecordPrimarykey] = this.props.Login.selectedId;\r\n                    return inputData;\r\n                }\r\n            })\r\n        }\r\n        // }\r\n\r\n        const inputParam = {\r\n            userinfo: this.props.Login.userInfo,\r\n            withoutCombocomponent: this.state.withoutCombocomponent,\r\n            comboComponents: this.state.comboComponents,\r\n            selectedRecord: this.state.selectedRecord,\r\n            selectedRecordName: 'selectedRecord',\r\n            loadSubSample: false,\r\n            selectedControl: this.props.Login.selectedControl,\r\n            comboData: this.props.Login.comboData,\r\n            comboName: 'comboData',\r\n            classUrl: selectedControl[masterIndex].table.item.classUrl,\r\n            methodUrl: selectedControl[masterIndex].table.item.methodUrl,\r\n            displayName: this.props.Login.inputParam.displayName,// selectedControl[masterIndex].table.item.sdisplayname,\r\n            screenName: masterIndex !== 0 ?\r\n                selectedControl[masterIndex - 1].displayname[this.props.Login.userInfo.slanguagetypecode] : this.props.Login.inputParam.displayName,\r\n            inputData: inputData,\r\n            operation: \"create\", saveType, formRef,\r\n            masterIndex,\r\n            selectedMaster: this.state.selectedMaster,\r\n            mastercomboComponents: this.props.Login.mastercomboComponents,\r\n            masterwithoutCombocomponent: this.props.Login.masterwithoutCombocomponent,\r\n            masterComboColumnFiled: this.props.Login.masterComboColumnFiled,\r\n            masterextractedColumnList: this.props.Login.masterextractedColumnList,\r\n            masterdataList: this.props.Login.masterdataList,\r\n            masterDesign: this.props.Login.masterDesign,\r\n            masterfieldList: this.props.Login.masterfieldList,\r\n\r\n        }\r\n\r\n        this.props.addMasterRecord(inputParam, this.props.Login.masterData)\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n    addMasterRecord = (control) => {\r\n        let masterIndex = this.props.Login.masterIndex\r\n        if (masterIndex !== undefined) {\r\n            masterIndex = masterIndex + 1;\r\n        } else {\r\n            masterIndex = 0\r\n        }\r\n        let selectedControl = this.props.Login.selectedControl || []\r\n        let selectedMaster = this.state.selectedMaster || []\r\n        selectedMaster[masterIndex]={}\r\n        selectedControl[masterIndex] = control\r\n\r\n        let fieldList = this.props.Login.masterfieldList || []\r\n        fieldList[masterIndex] = []\r\n\r\n        let masterComboColumnFiled = this.props.Login.masterComboColumnFiled || []\r\n        masterComboColumnFiled[masterIndex] = []\r\n\r\n        let extractedColumnList = this.props.Login.masterextractedColumnList || []\r\n        extractedColumnList[masterIndex] = []\r\n\r\n        let  masterdataList = this.props.Login.masterdataList|| []\r\n        let  masterDesign = this.props.Login.masterDesign|| []\r\n        let  masterwithoutCombocomponent = this.props.Login.masterwithoutCombocomponent|| []\r\n        let  mastercomboComponents = this.props.Login.mastercomboComponents|| []\r\n\r\n        masterdataList[masterIndex] = []\r\n        masterDesign[masterIndex] = []\r\n        masterwithoutCombocomponent[masterIndex] = []\r\n        mastercomboComponents[masterIndex] = []\r\n\r\n        if (control.table.item.component === 'Type2Component' || control.table.item.component === 'Type1Component') {\r\n            if (control.table.item.component === 'Type2Component') {\r\n                fieldList[masterIndex] = getFieldSpecification().get(control.table.item.methodUrl) || [];\r\n            } else {\r\n                fieldList[masterIndex] = getFieldSpecification1().get(control.table.item.methodUrl) || [];\r\n            }\r\n\r\n\r\n            extractedColumnList[masterIndex] = extractFieldHeader(Object.values(fieldList[masterIndex]));\r\n\r\n            const primaryKeyField = Object.keys(fieldList[masterIndex]).length > 0 ? fieldList[masterIndex][0].dataField : \"\";\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    selectedControl,\r\n                    addMaster: true,\r\n                    masterfieldList: fieldList,\r\n                    masterextractedColumnList: extractedColumnList,\r\n                    masterprimaryKeyField: primaryKeyField,\r\n                    masterComboColumnFiled: masterComboColumnFiled,\r\n                    masterIndex,\r\n                    masterdataList,\r\n                    masterDesign,\r\n                    masterwithoutCombocomponent,\r\n                    mastercomboComponents,\r\n                    selectedMaster,\r\n                    screenName:selectedControl[masterIndex].displayname[this.props.Login.userInfo.slanguagetypecode]\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo)\r\n        }\r\n        else if (control.table.item.component === 'Type3Component') {\r\n            fieldList[masterIndex] = getFieldSpecification3().get(control.table.item.methodUrl) || [];\r\n            extractedColumnList[masterIndex] = extractFieldHeader(Object.values(fieldList[masterIndex]));\r\n            masterComboColumnFiled[masterIndex] = extractedColumnList[masterIndex].filter(item =>\r\n                item.ndesigncomponentcode === designComponents.COMBOBOX)\r\n            const primaryKeyField = Object.keys(fieldList[masterIndex]).length > 0 ? fieldList[masterIndex][0].dataField : \"\";\r\n            const inputParam = {\r\n                userinfo: this.props.Login.userInfo,\r\n                selectedControl,\r\n                masterfieldList: fieldList,\r\n                masterextractedColumnList: extractedColumnList,\r\n                masterprimaryKeyField: primaryKeyField,\r\n                masterComboColumnFiled: masterComboColumnFiled,\r\n                masterIndex,\r\n                masterdataList,\r\n                masterDesign,\r\n                masterwithoutCombocomponent,\r\n                mastercomboComponents,\r\n                selectedMaster,\r\n                screenName:selectedControl[masterIndex].displayname[this.props.Login.userInfo.slanguagetypecode]\r\n            }\r\n\r\n            this.props.getAddMasterCombo(inputParam);\r\n\r\n        }\r\n        else if (control.table.item.component === 'Dynamic') {\r\n            const inputParam = {\r\n                userinfo: this.props.Login.userInfo,\r\n                selectedControl,\r\n                masterIndex,\r\n                masterdataList,\r\n                masterDesign,\r\n                masterComboColumnFiled,\r\n                masterwithoutCombocomponent,\r\n                mastercomboComponents,\r\n                masterfieldList: fieldList,\r\n                masterextractedColumnList: extractedColumnList,\r\n                masterComboColumnFiled,\r\n                selectedMaster\r\n            }\r\n            this.props.getDynamicMasterTempalte(inputParam);\r\n        }\r\n\r\n        // this.props.getMasterRecord(control);\r\n    }\r\n\r\n    openModal = () => {\r\n\r\n        const addId = this.props.Login.inputParam && this.state.controlMap.has(\"Add\")\r\n            && this.state.controlMap.get(\"Add\").ncontrolcode;\r\n\r\n        this.props.getDynamicMasterCombo(this.props.Login.masterData, this.props.Login.userInfo, addId,\r\n            this.state.designData, this.state.selectedRecord, this.state.childColumnList,\r\n            this.state.comboComponents, this.state.withoutCombocomponent,\r\n            false, true, new Map(), true, \"create\", this.props.Login.displayName);\r\n    }\r\n\r\n    fetchRecord = (fetchRecordParam) => {\r\n\r\n        this.props.getEditDynamicMasterCombo(fetchRecordParam,\r\n            this.state.designData, this.state.selectedRecord, this.state.childColumnList,\r\n            this.state.comboComponents, this.state.withoutCombocomponent)\r\n\r\n    }\r\n\r\n\r\n    onNumericBlur = (value, control) => {\r\n        let selectedRecord = this.state.selectedRecord\r\n        if (selectedRecord[control.label]) {\r\n            if (control.max) {\r\n                if (!(selectedRecord[control.label] < parseFloat(control.max))) {\r\n                    selectedRecord[control.label] = control.precision ? parseFloat(control.max) : parseInt(control.max)\r\n                }\r\n            }\r\n            if (control.min) {\r\n                if (!(selectedRecord[control.label] > parseFloat(control.min))) {\r\n                    selectedRecord[control.label] = control.precision ? parseFloat(control.min) : parseInt(control.min)\r\n                }\r\n            }\r\n\r\n\r\n        }\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    comboChild = (data, columnList, childColumnList, slice) => {\r\n        let retunObj = {}\r\n        // if (data.findIndex(x => x.label === columnList.label) !== -1) {\r\n        if (!childColumnList.hasOwnProperty(columnList.label)) {\r\n            if (childColumnList[columnList.label] === undefined) {\r\n                if (columnList.hasOwnProperty(\"child\")) {\r\n                    let childList = []\r\n                    columnList.child.map(childData => {\r\n                        const index = data.findIndex(x => x.label === childData.label)\r\n                        if (index !== -1) {\r\n                            childList.push(data[index])\r\n                            if (slice) {\r\n                                data = [...data.slice(0, index), ...data.slice(index + 1)]\r\n                            }\r\n                        }\r\n                    })\r\n                    childColumnList[columnList.label] = childList;\r\n                    if (childList.length > 0) {\r\n                        childList.map(y => {\r\n                            if (y.hasOwnProperty(\"child\")) {\r\n                                const val = this.comboChild(data, y, childColumnList, slice)\r\n                                retunObj[\"data\"] = val.data;\r\n                                retunObj[\"childColumnList\"] = val.childColumnList;\r\n                            } else {\r\n                                retunObj[\"data\"] = data;\r\n                                retunObj[\"childColumnList\"] = childColumnList;\r\n                            }\r\n                        })\r\n                    } else {\r\n                        retunObj[\"data\"] = data;\r\n                        retunObj[\"childColumnList\"] = childColumnList;\r\n                    }\r\n                } else {\r\n                    retunObj[\"data\"] = data;\r\n                    retunObj[\"childColumnList\"] = childColumnList;\r\n                }\r\n            } else {\r\n                retunObj[\"data\"] = data;\r\n                retunObj[\"childColumnList\"] = childColumnList;\r\n\r\n            }\r\n        } else {\r\n            retunObj[\"data\"] = data;\r\n            retunObj[\"childColumnList\"] = childColumnList;\r\n\r\n        }\r\n        return retunObj;\r\n    }\r\n\r\n    onComboChange = (comboData, control, customName) => {\r\n\r\n        let comboName = customName || control.label;\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if (comboData) {\r\n            comboData[\"item\"] = {\r\n                ...comboData[\"item\"], \"pkey\": control.valuemember, \"nquerybuildertablecode\": control.nquerybuildertablecode,\r\n                \"source\": control.source\r\n            };\r\n            selectedRecord[comboName] = comboData;\r\n        } else {\r\n            selectedRecord[comboName] = [];\r\n        }\r\n        if (control.child && control.child.length > 0) {\r\n            const childComboList = getSameRecordFromTwoArrays(this.state.comboComponents, control.child, \"label\")\r\n            let childColumnList = {};\r\n            childComboList.map(columnList => {\r\n                const val = this.comboChild(this.state.comboComponents, columnList, childColumnList, false);\r\n                childColumnList = val.childColumnList\r\n            })\r\n\r\n            const parentList = getSameRecordFromTwoArrays(this.state.withoutCombocomponent, control.child, \"label\")\r\n\r\n            const inputParem = {\r\n                child: control.child,\r\n                source: control.source,\r\n                primarykeyField: control.valuemember,\r\n                value: comboData.value,\r\n                item: comboData.item\r\n            }\r\n            this.props.getChildValues(inputParem,\r\n                this.props.Login.userInfo, selectedRecord, this.props.Login.comboData,\r\n                childComboList, childColumnList, this.state.withoutCombocomponent, [...childComboList, ...parentList])\r\n        } else {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: { selectedRecord }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n    }\r\n\r\n    onNumericInputChange = (value, name) => {\r\n        let selectedRecord = this.state.selectedRecord\r\n        selectedRecord[name] = value;\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    handleDateChange = (dateValue, dateName) => {\r\n        const { selectedRecord } = this.state;\r\n        selectedRecord[dateName] = dateValue;\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    onDrop = (value, type, oldVlaue) => {\r\n        const design = this.state.design;\r\n        let columns = design[0].children;\r\n        let designData = this.props.Login.ReactInputFields;\r\n        value = JSON.parse(value.fields);\r\n        value = { ...value, type: \"component\" }\r\n        let designDataIndex = designData.findIndex(item => item.label === value.label);\r\n        let firstIndex = columns[0] ? columns[0].children.findIndex(item => item.label === value.label) : -1;\r\n        let secondIndex = columns[1] ? columns[1].children.findIndex(item => item.label === value.label) : -1;\r\n\r\n        if (designDataIndex >= 0)\r\n            designData.splice(designDataIndex, 1);\r\n        if (firstIndex >= 0) {\r\n            if (type !== 1) {\r\n                columns[0].children.splice(firstIndex, 1);\r\n                // columns[0].splice(to, 0, columns[0].splice(from, 1)[0]);\r\n            } else {\r\n                if (oldVlaue) {\r\n                    oldVlaue = JSON.parse(oldVlaue);\r\n                    let from = columns[0].children.findIndex(item => item.label === value.label);\r\n                    let to = columns[0].children.findIndex(item => item.label === oldVlaue.label);\r\n                    columns[0].children.splice(to, 0, columns[0].children.splice(from, 1)[0]);\r\n                }\r\n            }\r\n\r\n        } else if (type === 1) {\r\n            if (columns[0]) {\r\n                columns[0].children.push(value);\r\n            } else {\r\n                columns[0] = {\r\n                    id: \"1\",\r\n                    type: \"column\",\r\n                    children: []\r\n                }\r\n\r\n                columns[0].children.push(value);\r\n            }\r\n        }\r\n        if (secondIndex >= 0) {\r\n            if (type !== 2) {\r\n                columns[1].splice(secondIndex, 1);\r\n            } else {\r\n                if (oldVlaue) {\r\n                    oldVlaue = JSON.parse(oldVlaue);\r\n                    let from = columns[1].children.findIndex(item => item.label === value.label);\r\n                    let to = columns[1].children.findIndex(item => item.label === oldVlaue.label);\r\n                    columns[1].children.splice(to, 0, columns[1].children.splice(from, 1)[0]);\r\n                }\r\n            }\r\n        } else if (type === 2) {\r\n            if (columns[1]) {\r\n                columns[1].children.push(value);\r\n            } else {\r\n                columns[1] = {\r\n                    id: \"2\",\r\n                    type: \"column\",\r\n                    children: []\r\n                }\r\n                columns[1].children.push(value);\r\n            }\r\n        }\r\n\r\n        // design.push(columns)\r\n        this.setState({ designData, design })\r\n    }\r\n\r\n    onDropFile = (attachedFiles, fieldName, maxSize) => {\r\n        let selectedRecord = this.state.selectedRecord || {};\r\n        selectedRecord[fieldName] = onDropAttachFileList(selectedRecord[fieldName], attachedFiles, maxSize)\r\n        this.setState({ selectedRecord, actionType: \"new\" });\r\n    }\r\n\r\n    deleteAttachment = (event, file, fieldName) => {\r\n        let selectedRecord = this.state.selectedRecord || {};\r\n        selectedRecord[fieldName] = deleteAttachmentDropZone(selectedRecord[fieldName], file)\r\n\r\n        this.setState({\r\n            selectedRecord, actionType: \"delete\" //fileToDelete:file.name \r\n        });\r\n    }\r\n\r\n    componentDidUpdate(previousProps) {\r\n\r\n        if (this.props.Login.masterData !== previousProps.Login.masterData) {\r\n            if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\r\n                const userRoleControlRights = [];\r\n\r\n                if (this.props.Login.userRoleControlRights) {\r\n                    this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item =>\r\n                        userRoleControlRights.push(item.ncontrolcode))\r\n                }\r\n                const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode)\r\n                this.extractedColumnList = [];\r\n                this.detailedColumnList = [];\r\n\r\n               \r\n\r\n                let data = [];\r\n                const withoutCombocomponent = [];\r\n                const mandatoryFields = [];\r\n                const Layout = (this.props.Login.masterData.DynamicMasterDesign && this.props.Login.masterData.DynamicMasterDesign.slideoutdesign) || [];\r\n                Layout.map(row => {\r\n                    row.children.map(column => {\r\n                        column.children.map(component => {\r\n                            if (component.hasOwnProperty(\"children\")) {\r\n                                component.children.map(componentrow => {\r\n                                    if (componentrow.inputtype === \"combo\" || componentrow.inputtype === \"backendsearchfilter\"\r\n                                    || componentrow.inputtype === \"frontendsearchfilter\") {\r\n                                        data.push(componentrow)\r\n                                    } else {\r\n                                        withoutCombocomponent.push(componentrow)\r\n                                    }\r\n                                    if (componentrow.mandatory === true) {\r\n                                        if (componentrow.inputtype === \"email\") {\r\n                                            mandatoryFields.push({\r\n                                                \"mandatory\": true, \"idsName\": componentrow.label,\r\n                                                \"dataField\": componentrow.label,\r\n                                                \"alertPreFix\": this.props.intl.formatMessage({ id: \"IDS_VALID\" }),\r\n                                                \"validateFunction\": validateEmail,\r\n                                                \"mandatoryLabel\": \"IDS_ENTER\",\r\n                                                \"controlType\": \"textbox\"\r\n                                            })\r\n                                        }\r\n                                        else {\r\n                                            mandatoryFields.push({\r\n                                                \"mandatory\": true,\r\n                                                \"idsName\": componentrow.label,\r\n                                                \"dataField\": componentrow.label,\r\n                                                \"mandatoryLabel\": componentrow.inputtype === \"combo\" ?\r\n                                                    \"IDS_SELECT\" : \"IDS_ENTER\",\r\n                                                \"controlType\": componentrow.inputtype === \"combo\" ?\r\n                                                    \"selectbox\" : \"textbox\"\r\n                                            })\r\n                                        }\r\n                                    }\r\n                                })\r\n                            }\r\n                            else {\r\n                                component.inputtype === \"combo\" || component.inputtype === \"backendsearchfilter\"\r\n                                || component.inputtype === \"frontendsearchfilter\" ?\r\n                                    data.push(component)\r\n                                    : withoutCombocomponent.push(component)\r\n\r\n                                if (component.mandatory === true) {\r\n                                    if (component.inputtype === \"email\") {\r\n                                        mandatoryFields.push({\r\n                                            \"mandatory\": true, \"idsName\": component.label,\r\n                                            \"dataField\": component.label,\r\n                                            \"alertPreFix\": this.props.intl.formatMessage({ id: \"IDS_VALID\" }),\r\n                                            \"validateFunction\": validateEmail,\r\n                                            \"mandatoryLabel\": \"IDS_ENTER\",\r\n                                            \"controlType\": \"textbox\"\r\n                                        })\r\n                                    }\r\n                                    else {\r\n                                        mandatoryFields.push({\r\n                                            \"mandatory\": true,\r\n                                            \"idsName\": component.label,\r\n                                            \"dataField\": component.label,\r\n                                            \"mandatoryLabel\": component.inputtype === \"combo\" ?\r\n                                                \"IDS_SELECT\" : \"IDS_ENTER\",\r\n                                            \"controlType\": component.inputtype === \"combo\" ?\r\n                                                \"selectbox\" : \"textbox\"\r\n                                        })\r\n                                    }\r\n                                }\r\n                            }\r\n                        })\r\n                    })\r\n                })\r\n\r\n                if (this.props.Login.masterData && this.props.Login.masterData.DynamicMasterDesign &&\r\n                    this.props.Login.masterData.DynamicMasterDesign.screendesign) {\r\n                    this.props.Login.masterData.DynamicMasterDesign.screendesign.griditem.map(row => {\r\n                        this.extractedColumnList.push({ \"idsName\": row[\"1\"][this.props.Login.userInfo.slanguagetypecode], \"dataField\": row[\"2\"] ,\"dateField\":withoutCombocomponent.findIndex(x=>x.label===row[\"2\"]&&x.inputtype==='date')!==-1?true:false});\r\n                    })\r\n                    this.props.Login.masterData.DynamicMasterDesign.screendesign.gridmoreitem.map(row => {\r\n                        this.detailedColumnList.push({ \"idsName\": row[\"1\"][this.props.Login.userInfo.slanguagetypecode], \"dataField\": row[\"2\"],\"dateField\":withoutCombocomponent.findIndex(x=>x.label===row[\"2\"]&&x.inputtype==='date')!==-1?true:false });\r\n                    })\r\n\r\n                }\r\n                const comboComponents = data;\r\n                let childColumnList = {};\r\n                data.map(columnList => {\r\n                    const val = this.comboChild(data, columnList, childColumnList, true);\r\n                    data = val.data;\r\n                    childColumnList = val.childColumnList\r\n                })\r\n\r\n                const masterData = this.props.Login.masterData.DynamicMasterData ? sortData(this.props.Login.masterData.DynamicMasterData, \"descending\", \"ndynamicmastercode\") : [];\r\n\r\n                this.setState({\r\n                    withoutCombocomponent, comboComponents, childColumnList, designData: data, mandatoryFields,\r\n                    userRoleControlRights, controlMap, data: this.props.Login.masterData.DynamicMasterData || [],\r\n                    dataResult: process(masterData || [], this.state.dataState),\r\n                });\r\n            }\r\n            else {\r\n                let { dataState } = this.state;\r\n                if (this.props.Login.dataState === undefined) {\r\n                    dataState = { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 }\r\n                }\r\n\r\n                const masterData = this.props.Login.masterData.DynamicMasterData ? sortData(this.props.Login.masterData.DynamicMasterData, \"descending\", \"ndynamicmastercode\") : [];\r\n\r\n                this.setState({\r\n                    data: this.props.Login.masterData.DynamicMasterData || [], selectedRecord: this.props.Login.selectedRecord,\r\n                    dataResult: process(masterData || [], dataState),\r\n                    dataState//, comboComponents, withoutCombocomponent\r\n                });\r\n            }\r\n        }\r\n\r\n        if (this.props.Login.selectedMaster !== previousProps.Login.selectedMaster) {\r\n            this.setState({ selectedMaster: this.props.Login.selectedMaster });\r\n        }\r\n        if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\r\n            this.setState({ selectedRecord: this.props.Login.selectedRecord });\r\n        }\r\n    }\r\n\r\n    onInputOnChange = (event, value) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n\r\n        if (event.target.type === 'toggle') {\r\n            selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\r\n        } else if (event.target.type === 'numeric') {\r\n            if (/\\D/.test(event.target.value))\r\n                selectedRecord[event.target.name] = event.target.value;\r\n        } else if (event.target.type === 'checkbox') {\r\n            const value1 = selectedRecord[event.target.name];\r\n            if (value1 !== '' && value1 !== undefined) {\r\n                if (value1.toLowerCase().includes(value.toLowerCase())) {\r\n                    const index = value1.toLowerCase().indexOf(value.toLowerCase());\r\n                    if (index !== -1) {\r\n                        if (index === 0) {\r\n                            const indexcomma = value1.indexOf(\",\")\r\n                            if (indexcomma !== -1) {\r\n                                selectedRecord[event.target.name] = value1.slice(indexcomma + 1)\r\n                            } else {\r\n                                selectedRecord[event.target.name] = \"\"\r\n                            }\r\n                        } else {\r\n                            if (value1.slice(index).indexOf(\",\") !== -1) {\r\n                                selectedRecord[event.target.name] = value1.slice(0, index) + value1.slice(index + value1.slice(index).indexOf(\",\") + 1)\r\n                            } else {\r\n                                selectedRecord[event.target.name] = value1.slice(0, index - 1)\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                } else {\r\n                    selectedRecord[event.target.name] = value1 + ',' + value;\r\n                }\r\n\r\n            } else {\r\n                selectedRecord[event.target.name] = value;\r\n            }\r\n        } else if (event.target.type === 'radio') {\r\n            selectedRecord[event.target.name] = value\r\n        } else {\r\n            selectedRecord[event.target.name] = event.target.value;\r\n        }\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    import = () => {\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { openModal: true,screenName:this.props.Login.displayName, operation: \"import\" }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n    //deleteRecord = (selectedRecord, operation, ncontrolCode) => {\r\n    deleteRecord = (deleteParam) => {\r\n        const inputParam = {\r\n            classUrl: \"dynamicmaster\",\r\n            methodUrl: \"DynamicMaster\",\r\n            displayName: this.props.Login.displayName,\r\n            inputData: {\r\n                [\"dynamicmaster\"]: { \"ndynamicmastercode\": deleteParam.selectedRecord.ndynamicmastercode },//.dataItem,\r\n                \"userinfo\": this.props.Login.userInfo\r\n            },\r\n            operation: \"delete\",\r\n            dataState: this.state.dataState\r\n        }\r\n\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, deleteParam.ncontrolCode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData: this.props.Login.masterData },\r\n                    openModal: true, screenName: this.props.Login.displayName,\r\n                    operation: \"delete\"\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\r\n        }\r\n    }\r\n\r\n    reloadData = () => {\r\n        const inputParam = {\r\n            inputData: { \"userinfo\": this.props.Login.userInfo },\r\n            classUrl: this.props.Login.inputParam.classUrl,\r\n            methodUrl: this.props.Login.inputParam.methodUrl,\r\n            userInfo: this.props.Login.userInfo,\r\n            displayName: this.props.Login.inputParam.displayName\r\n        };\r\n        this.props.callService(inputParam);\r\n    }\r\n\r\n    onSaveClick = (saveType, formRef) => {\r\n        //add / edit  \r\n\r\n        let inputData = [];\r\n        let dataState = undefined;\r\n        inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n        inputData[\"masterdateconstraints\"] = this.props.Login.masterData.DynamicMasterDesign.screendesign.masterdateconstraints;\r\n        inputData[\"masterdatefields\"] = this.props.Login.masterData.DynamicMasterDesign.screendesign.masterdatefields;\r\n        inputData[\"mastercombinationunique\"] = this.props.Login.masterData.DynamicMasterDesign.screendesign.mastercombinationunique;\r\n        let selectedId = null;\r\n        let operation = \"\";\r\n        let selectedRecord = this.state.selectedRecord;\r\n        if (this.props.Login.operation === \"update\") {    // edit\r\n            dataState = this.state.dataState\r\n            inputData[\"dynamicmaster\"] = { ndynamicmastercode: this.state.selectedRecord[\"ndynamicmastercode\"] };//this.state.selectedRecord;\r\n            inputData[\"dynamicmaster\"][\"jsondata\"] = {};\r\n            inputData[\"dynamicmaster\"][\"jsonuidata\"] = {};\r\n            selectedId = this.props.Login.selectedId;\r\n            operation = \"update\";\r\n        }\r\n        else {\r\n            //add                          \r\n            inputData[\"dynamicmaster\"] = { //\"nsitecode\": this.props.Login.userInfo.nmastersitecode, \r\n                nformcode: this.props.Login.userInfo.nformcode,\r\n                ndesigntemplatemappingcode: this.props.Login.masterData.DynamicMasterDesign.ndesigntemplatemappingcode,\r\n                jsondata: {}, jsonuidata: {}\r\n            };\r\n\r\n            operation = \"create\";\r\n\r\n        }\r\n\r\n        const dateList = [];\r\n        const defaulttimezone = this.props.Login.defaulttimezone;\r\n        const userInfo = this.props.Login.userInfo;\r\n\r\n        this.props.Login.masterData.DynamicMasterDesign &&\r\n            this.props.Login.masterData.DynamicMasterDesign.slideoutdesign.map(row => {\r\n                row.children.map(column => {\r\n                    column.children.map(component => {\r\n                        if (component.hasOwnProperty(\"children\")) {\r\n\r\n                            component.children.map(componentrow => {\r\n                                if (componentrow.inputtype === \"combo\") {\r\n                                    inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label] = selectedRecord[componentrow.label] ?\r\n                                        {\r\n                                            value: selectedRecord[componentrow.label].value,\r\n                                            label: selectedRecord[componentrow.label].label,\r\n                                            pkey: operation===\"create\"?selectedRecord[componentrow.label].item.pkey:selectedRecord[componentrow.label].item?selectedRecord[componentrow.label].item.pkey:selectedRecord[componentrow.label].pkey,\r\n                                            nquerybuildertablecode:operation===\"create\"?selectedRecord[componentrow.label].item.nquerybuildertablecode:selectedRecord[componentrow.label].item?selectedRecord[componentrow.label].item.nquerybuildertablecode:selectedRecord[componentrow.label].nquerybuildertablecode,\r\n                                            source:operation===\"create\"? selectedRecord[componentrow.label].item.source: selectedRecord[componentrow.label].item? selectedRecord[componentrow.label].item.source:selectedRecord[componentrow.label].source\r\n                                        } : -1\r\n\r\n                                    inputData[\"dynamicmaster\"][\"jsonuidata\"][componentrow.label] = selectedRecord[componentrow.label] ? selectedRecord[componentrow.label].label : \"\"\r\n\r\n                                }\r\n                                else if (componentrow.inputtype === \"date\") {\r\n                                    if (componentrow.mandatory) {\r\n                                        inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label] = formatDate(selectedRecord[componentrow.label], false)\r\n\r\n                                        inputData[\"dynamicmaster\"][\"jsonuidata\"][componentrow.label] = inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label]\r\n                                        //inputData[\"dynamicmaster\"][\"jsonuidata\"][componentrow.label] = convertDateTimetoString(selectedRecord[componentrow.label], userInfo);\r\n                                    }\r\n                                    else {\r\n                                        inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label] = componentrow.loadcurrentdate ?\r\n                                            formatDate(selectedRecord[componentrow.label] || new Date(), false) :\r\n                                            selectedRecord[componentrow.label] ? formatDate(selectedRecord[componentrow.label], false)\r\n                                                : \"\";\r\n\r\n                                        inputData[\"dynamicmaster\"][\"jsonuidata\"][componentrow.label] = inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label];\r\n                                        //convertDateTimetoString(selectedRecord[componentrow.label], userInfo);\r\n                                    }\r\n                                    if (componentrow.timezone) {\r\n                                        inputData[\"dynamicmaster\"][\"jsondata\"][`tz${componentrow.label}`] = selectedRecord[`tz${componentrow.label}`] ?\r\n                                            { value: selectedRecord[`tz${componentrow.label}`].value, label: selectedRecord[`tz${componentrow.label}`].label } :\r\n                                            defaulttimezone ? defaulttimezone : -1\r\n\r\n                                        inputData[\"dynamicmaster\"][\"jsonuidata\"][`tz${componentrow.label}`] = inputData[\"dynamicmaster\"][\"jsondata\"][`tz${componentrow.label}`]\r\n                                    }\r\n                                    dateList.push(componentrow.label)\r\n                                }\r\n\r\n                                else {\r\n                                    inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label] = selectedRecord[componentrow.label] ?\r\n                                        selectedRecord[componentrow.label] : \"\"\r\n\r\n                                    inputData[\"dynamicmaster\"][\"jsonuidata\"][componentrow.label] = inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label]\r\n                                    // inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label]\r\n\r\n                                }\r\n                                return inputData[\"dynamicmaster\"];\r\n                            })\r\n                        }\r\n                        else {\r\n                            if (component.inputtype === \"combo\") {\r\n                                inputData[\"dynamicmaster\"][\"jsondata\"][component.label] = selectedRecord[component.label] ?\r\n                                    {\r\n                                        value: selectedRecord[component.label].value,\r\n                                        label: selectedRecord[component.label].label,\r\n                                        pkey: operation===\"create\"?selectedRecord[component.label].item.pkey:selectedRecord[component.label].item?selectedRecord[component.label].item.pkey:selectedRecord[component.label].pkey,\r\n                                        nquerybuildertablecode:operation===\"create\"?selectedRecord[component.label].item.nquerybuildertablecode:selectedRecord[component.label].item?selectedRecord[component.label].item.nquerybuildertablecode:selectedRecord[component.label].nquerybuildertablecode,\r\n                                        source:operation===\"create\"? selectedRecord[component.label].item.source: selectedRecord[component.label].item? selectedRecord[component.label].item.source:selectedRecord[component.label].source\r\n                                    } : -1\r\n\r\n                                inputData[\"dynamicmaster\"][\"jsonuidata\"][component.label] = inputData[\"dynamicmaster\"][\"jsondata\"][component.label].label;\r\n                                //selectedRecord[component.label] ? selectedRecord[component.label].label : \"\"\r\n                            }\r\n                            else if (component.inputtype === \"date\") {\r\n                                if (component.mandatory) {\r\n                                    inputData[\"dynamicmaster\"][\"jsondata\"][component.label] = formatDate(selectedRecord[component.label], false);\r\n                                    // convertDateTimetoString(selectedRecord[component.label] ?\r\n                                    // selectedRecord[component.label] : new Date(), userInfo);\r\n\r\n                                    inputData[\"dynamicmaster\"][\"jsonuidata\"][component.label] = inputData[\"dynamicmaster\"][\"jsondata\"][component.label]\r\n                                    //convertDateTimetoString(selectedRecord[component.label], userInfo);\r\n\r\n                                } else {\r\n                                    inputData[\"dynamicmaster\"][\"jsondata\"][component.label] = component.loadcurrentdate ?\r\n                                        //convertDateTimetoString(selectedRecord[component.label] ?                                      \r\n                                        //    selectedRecord[component.label] : new Date(), userInfo) :\r\n                                        formatDate(selectedRecord[component.label] || new Date(), false) :\r\n                                        selectedRecord[component.label] ?\r\n                                            // convertDateTimetoString(selectedRecord[component.label] ?\r\n                                            //   selectedRecord[component.label] : new Date(), userInfo) : \"\";\r\n                                            formatDate(selectedRecord[component.label], false) : \"\";\r\n                                    inputData[\"dynamicmaster\"][\"jsonuidata\"][component.label] = inputData[\"dynamicmaster\"][\"jsondata\"][component.label]\r\n                                    //convertDateTimetoString(selectedRecord[component.label], userInfo)\r\n\r\n                                }\r\n                                if (component.timezone) {\r\n                                    inputData[\"dynamicmaster\"][\"jsondata\"][`tz${component.label}`] = selectedRecord[`tz${component.label}`] ?\r\n                                        { value: selectedRecord[`tz${component.label}`].value, label: selectedRecord[`tz${component.label}`].label } :\r\n                                        defaulttimezone ? defaulttimezone : -1\r\n\r\n                                    inputData[\"dynamicmaster\"][\"jsonuidata\"][`tz${component.label}`] = inputData[\"dynamicmaster\"][\"jsondata\"][`tz${component.label}`]\r\n                                }\r\n                                dateList.push(component.label)\r\n                            }\r\n                            else {\r\n                                inputData[\"dynamicmaster\"][\"jsondata\"][component.label] = selectedRecord[component.label] ?\r\n                                    selectedRecord[component.label] : \"\"\r\n\r\n                                inputData[\"dynamicmaster\"][\"jsonuidata\"][component.label] = inputData[\"dynamicmaster\"][\"jsondata\"][component.label]\r\n                            }\r\n                        }\r\n                        return inputData[\"dynamicmaster\"];\r\n                    }\r\n                    )\r\n                    return inputData[\"dynamicmaster\"];\r\n                })\r\n                return inputData[\"dynamicmaster\"];\r\n            })\r\n\r\n\r\n        inputData[\"dynamicmaster\"][\"jsonstring\"] = JSON.stringify(inputData[\"dynamicmaster\"][\"jsondata\"]);\r\n        inputData[\"dynamicmaster\"][\"jsonuistring\"] = JSON.stringify(inputData[\"dynamicmaster\"][\"jsonuidata\"]);\r\n        inputData[\"masterdatelist\"] = dateList;\r\n\r\n        const inputParam = {\r\n            classUrl: \"dynamicmaster\",\r\n            methodUrl: \"DynamicMaster\",\r\n            displayName: this.props.Login.displayName,\r\n            inputData: inputData, operation: operation,\r\n            saveType, formRef, selectedId, dataState\r\n\r\n        }\r\n        const esignNeeded = showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode);\r\n        if (esignNeeded) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData: this.props.Login.masterData },\r\n                    openModal: true, screenName: this.props.Login.displayName,\r\n                    operation: \"create\"\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\r\n        }\r\n    }\r\n\r\n    validateEsign = () => {\r\n        const inputParam = {\r\n            inputData: {\r\n                \"userinfo\": {\r\n                    ...this.props.Login.userInfo,\r\n                    sreason: this.state.selectedRecord[\"esigncomments\"],\r\n                    nreasoncode: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].value,\r\n                    spredefinedreason: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].label,\r\n\r\n                },\r\n                password: this.state.selectedRecord[\"esignpassword\"]\r\n            },\r\n            screenData: this.props.Login.screenData\r\n        }\r\n        this.props.validateEsignCredential(inputParam, \"openModal\");\r\n    }\r\n\r\n}\r\nexport default connect(mapStateToProps, {\r\n    callService, crudMaster, updateStore, validateEsignCredential,\r\n    getChildValues, getEditDynamicMasterCombo,//fetchRecord,\r\n    getDynamicMasterCombo,\r\n    addMasterRecord, getAddMasterCombo, getDynamicMasterTempalte,\r\n    getChildComboMaster,getChildValuesForAddMaster\r\n})(injectIntl(DynamicMaster));\r\n"]},"metadata":{},"sourceType":"module"}