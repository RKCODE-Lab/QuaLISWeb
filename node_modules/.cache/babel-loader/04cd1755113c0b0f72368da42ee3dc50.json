{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nimport { defaultValue } from \"../utils/stuff\";\nimport { getFieldConfig, getOperatorConfig } from \"../utils/configUtils\";\nimport { defaultConjunction } from \"../utils/defaultUtils\";\nimport { formatFieldName } from \"../utils/ruleUtils\";\nimport { completeValue } from \"../utils/funcUtils\";\nimport { Map } from \"immutable\";\n/*\n Build tree to http://querybuilder.js.org/ like format\n\n Example:\n {\n    \"condition\": \"AND\",\n    \"rules\": [\n        {\n            \"id\": \"price\",\n            \"field\": \"price\",\n            \"type\": \"double\",\n            \"input\": \"text\",\n            \"operator\": \"less\",\n            \"value\": \"10.25\"\n        },\n        {\n            \"condition\": \"OR\",\n            \"rules\": [\n                {\n                    \"id\": \"category\",\n                    \"field\": \"category\",\n                    \"type\": \"integer\",\n                    \"input\": \"select\",\n                    \"operator\": \"equal\",\n                    \"value\": \"2\"\n                },\n                {\n                    \"id\": \"category\",\n                    \"field\": \"category\",\n                    \"type\": \"integer\",\n                    \"input\": \"select\",\n                    \"operator\": \"equal\",\n                    \"value\": \"1\"\n                }\n            ]\n        }\n    ]\n }\n */\n\nexport var queryBuilderFormat = function queryBuilderFormat(item, config) {\n  //meta is mutable\n  var meta = {\n    usedFields: []\n  };\n  var res = formatItem(item, config, meta);\n  if (!res) return undefined;\n  return _objectSpread(_objectSpread({}, res), meta);\n};\n\nvar formatItem = function formatItem(item, config, meta) {\n  if (!item) return undefined;\n  var type = item.get(\"type\");\n  var children = item.get(\"children1\");\n\n  if ((type === \"group\" || type === \"rule_group\") && children && children.size) {\n    return formatGroup(item, config, meta);\n  } else if (type === \"rule\") {\n    return formatRule(item, config, meta);\n  }\n\n  return undefined;\n};\n\nvar formatGroup = function formatGroup(item, config, meta) {\n  var properties = item.get(\"properties\") || new Map();\n  var children = item.get(\"children1\");\n  var id = item.get(\"id\");\n  var list = children.map(function (currentChild) {\n    return formatItem(currentChild, config, meta);\n  }).filter(function (currentChild) {\n    return typeof currentChild !== \"undefined\";\n  });\n  if (!list.size) return undefined;\n  var conjunction = properties.get(\"conjunction\");\n  if (!conjunction) conjunction = defaultConjunction(config);\n  var not = properties.get(\"not\");\n  var resultQuery = {\n    id: id,\n    rules: list.toList(),\n    condition: conjunction.toUpperCase(),\n    not: not\n  };\n  return resultQuery;\n};\n\nvar formatRule = function formatRule(item, config, meta) {\n  var properties = item.get(\"properties\") || new Map();\n  var id = item.get(\"id\");\n  var operator = properties.get(\"operator\");\n  var options = properties.get(\"operatorOptions\");\n  var field = properties.get(\"field\");\n  var value = properties.get(\"value\");\n  var valueSrc = properties.get(\"valueSrc\");\n  var valueType = properties.get(\"valueType\");\n  var hasUndefinedValues = value.filter(function (v) {\n    return v === undefined;\n  }).size > 0;\n  if (field == null || operator == null || hasUndefinedValues) return undefined;\n  var fieldDefinition = getFieldConfig(config, field) || {};\n  var operatorDefinition = getOperatorConfig(config, operator, field) || {};\n  var fieldType = fieldDefinition.type || \"undefined\";\n  var cardinality = defaultValue(operatorDefinition.cardinality, 1);\n  var typeConfig = config.types[fieldDefinition.type] || {};\n  var fieldName = formatFieldName(field, config, meta);\n  if (value.size < cardinality) return undefined;\n  if (meta.usedFields.indexOf(field) == -1) meta.usedFields.push(field);\n  value = value.toArray();\n  valueSrc = valueSrc.toArray();\n  valueType = valueType.toArray();\n  var values = [];\n\n  for (var i = 0; i < value.length; i++) {\n    var val = {\n      type: valueType[i],\n      value: value[i]\n    };\n    values.push(val);\n\n    if (valueSrc[i] == \"field\") {\n      var secondField = value[i];\n      if (meta.usedFields.indexOf(secondField) == -1) meta.usedFields.push(secondField);\n    }\n  }\n\n  var operatorOptions = options ? options.toJS() : null;\n  if (operatorOptions && !Object.keys(operatorOptions).length) operatorOptions = null;\n  var ruleQuery = {\n    id: id,\n    fieldName: fieldName,\n    type: fieldType,\n    input: typeConfig.mainWidget,\n    operator: operator\n  };\n  if (operatorOptions) ruleQuery.operatorOptions = operatorOptions;\n  ruleQuery.values = values;\n  return ruleQuery;\n};","map":{"version":3,"sources":["E:/WorkingFolder/React_Postgres/ALPD/SOURCE-512/QuaLISWeb/node_modules/@react-awesome-query-builder/core/esm/export/queryBuilder.js"],"names":["_defineProperty","ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","getOwnPropertyDescriptors","defineProperties","defineProperty","defaultValue","getFieldConfig","getOperatorConfig","defaultConjunction","formatFieldName","completeValue","Map","queryBuilderFormat","item","config","meta","usedFields","res","formatItem","undefined","type","get","children","size","formatGroup","formatRule","properties","id","list","map","currentChild","conjunction","not","resultQuery","rules","toList","condition","toUpperCase","operator","options","field","value","valueSrc","valueType","hasUndefinedValues","v","fieldDefinition","operatorDefinition","fieldType","cardinality","typeConfig","types","fieldName","indexOf","toArray","values","val","secondField","operatorOptions","toJS","ruleQuery","input","mainWidget"],"mappings":"AAAA,OAAOA,eAAP,MAA4B,uCAA5B;;AACA,SAASC,OAAT,CAAiBC,MAAjB,EAAyBC,cAAzB,EAAyC;AAAE,MAAIC,IAAI,GAAGC,MAAM,CAACD,IAAP,CAAYF,MAAZ,CAAX;;AAAgC,MAAIG,MAAM,CAACC,qBAAX,EAAkC;AAAE,QAAIC,OAAO,GAAGF,MAAM,CAACC,qBAAP,CAA6BJ,MAA7B,CAAd;AAAoDC,IAAAA,cAAc,KAAKI,OAAO,GAAGA,OAAO,CAACC,MAAR,CAAe,UAAUC,GAAV,EAAe;AAAE,aAAOJ,MAAM,CAACK,wBAAP,CAAgCR,MAAhC,EAAwCO,GAAxC,EAA6CE,UAApD;AAAiE,KAAjG,CAAf,CAAd,EAAkIP,IAAI,CAACQ,IAAL,CAAUC,KAAV,CAAgBT,IAAhB,EAAsBG,OAAtB,CAAlI;AAAmK;;AAAC,SAAOH,IAAP;AAAc;;AACrV,SAASU,aAAT,CAAuBC,MAAvB,EAA+B;AAAE,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGC,SAAS,CAACC,MAA9B,EAAsCF,CAAC,EAAvC,EAA2C;AAAE,QAAIG,MAAM,GAAG,QAAQF,SAAS,CAACD,CAAD,CAAjB,GAAuBC,SAAS,CAACD,CAAD,CAAhC,GAAsC,EAAnD;AAAuDA,IAAAA,CAAC,GAAG,CAAJ,GAAQf,OAAO,CAACI,MAAM,CAACc,MAAD,CAAP,EAAiB,CAAC,CAAlB,CAAP,CAA4BC,OAA5B,CAAoC,UAAUC,GAAV,EAAe;AAAErB,MAAAA,eAAe,CAACe,MAAD,EAASM,GAAT,EAAcF,MAAM,CAACE,GAAD,CAApB,CAAf;AAA4C,KAAjG,CAAR,GAA6GhB,MAAM,CAACiB,yBAAP,GAAmCjB,MAAM,CAACkB,gBAAP,CAAwBR,MAAxB,EAAgCV,MAAM,CAACiB,yBAAP,CAAiCH,MAAjC,CAAhC,CAAnC,GAA+GlB,OAAO,CAACI,MAAM,CAACc,MAAD,CAAP,CAAP,CAAwBC,OAAxB,CAAgC,UAAUC,GAAV,EAAe;AAAEhB,MAAAA,MAAM,CAACmB,cAAP,CAAsBT,MAAtB,EAA8BM,GAA9B,EAAmChB,MAAM,CAACK,wBAAP,CAAgCS,MAAhC,EAAwCE,GAAxC,CAAnC;AAAmF,KAApI,CAA5N;AAAoW;;AAAC,SAAON,MAAP;AAAgB;;AAC1f,SAASU,YAAT,QAA6B,gBAA7B;AACA,SAASC,cAAT,EAAyBC,iBAAzB,QAAkD,sBAAlD;AACA,SAASC,kBAAT,QAAmC,uBAAnC;AACA,SAASC,eAAT,QAAgC,oBAAhC;AACA,SAASC,aAAT,QAA8B,oBAA9B;AACA,SAASC,GAAT,QAAoB,WAApB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,IAAIC,kBAAkB,GAAG,SAASA,kBAAT,CAA4BC,IAA5B,EAAkCC,MAAlC,EAA0C;AACxE;AACA,MAAIC,IAAI,GAAG;AACTC,IAAAA,UAAU,EAAE;AADH,GAAX;AAGA,MAAIC,GAAG,GAAGC,UAAU,CAACL,IAAD,EAAOC,MAAP,EAAeC,IAAf,CAApB;AACA,MAAI,CAACE,GAAL,EAAU,OAAOE,SAAP;AACV,SAAOzB,aAAa,CAACA,aAAa,CAAC,EAAD,EAAKuB,GAAL,CAAd,EAAyBF,IAAzB,CAApB;AACD,CARM;;AASP,IAAIG,UAAU,GAAG,SAASA,UAAT,CAAoBL,IAApB,EAA0BC,MAA1B,EAAkCC,IAAlC,EAAwC;AACvD,MAAI,CAACF,IAAL,EAAW,OAAOM,SAAP;AACX,MAAIC,IAAI,GAAGP,IAAI,CAACQ,GAAL,CAAS,MAAT,CAAX;AACA,MAAIC,QAAQ,GAAGT,IAAI,CAACQ,GAAL,CAAS,WAAT,CAAf;;AACA,MAAI,CAACD,IAAI,KAAK,OAAT,IAAoBA,IAAI,KAAK,YAA9B,KAA+CE,QAA/C,IAA2DA,QAAQ,CAACC,IAAxE,EAA8E;AAC5E,WAAOC,WAAW,CAACX,IAAD,EAAOC,MAAP,EAAeC,IAAf,CAAlB;AACD,GAFD,MAEO,IAAIK,IAAI,KAAK,MAAb,EAAqB;AAC1B,WAAOK,UAAU,CAACZ,IAAD,EAAOC,MAAP,EAAeC,IAAf,CAAjB;AACD;;AACD,SAAOI,SAAP;AACD,CAVD;;AAWA,IAAIK,WAAW,GAAG,SAASA,WAAT,CAAqBX,IAArB,EAA2BC,MAA3B,EAAmCC,IAAnC,EAAyC;AACzD,MAAIW,UAAU,GAAGb,IAAI,CAACQ,GAAL,CAAS,YAAT,KAA0B,IAAIV,GAAJ,EAA3C;AACA,MAAIW,QAAQ,GAAGT,IAAI,CAACQ,GAAL,CAAS,WAAT,CAAf;AACA,MAAIM,EAAE,GAAGd,IAAI,CAACQ,GAAL,CAAS,IAAT,CAAT;AACA,MAAIO,IAAI,GAAGN,QAAQ,CAACO,GAAT,CAAa,UAAUC,YAAV,EAAwB;AAC9C,WAAOZ,UAAU,CAACY,YAAD,EAAehB,MAAf,EAAuBC,IAAvB,CAAjB;AACD,GAFU,EAER3B,MAFQ,CAED,UAAU0C,YAAV,EAAwB;AAChC,WAAO,OAAOA,YAAP,KAAwB,WAA/B;AACD,GAJU,CAAX;AAKA,MAAI,CAACF,IAAI,CAACL,IAAV,EAAgB,OAAOJ,SAAP;AAChB,MAAIY,WAAW,GAAGL,UAAU,CAACL,GAAX,CAAe,aAAf,CAAlB;AACA,MAAI,CAACU,WAAL,EAAkBA,WAAW,GAAGvB,kBAAkB,CAACM,MAAD,CAAhC;AAClB,MAAIkB,GAAG,GAAGN,UAAU,CAACL,GAAX,CAAe,KAAf,CAAV;AACA,MAAIY,WAAW,GAAG;AAChBN,IAAAA,EAAE,EAAEA,EADY;AAEhBO,IAAAA,KAAK,EAAEN,IAAI,CAACO,MAAL,EAFS;AAGhBC,IAAAA,SAAS,EAAEL,WAAW,CAACM,WAAZ,EAHK;AAIhBL,IAAAA,GAAG,EAAEA;AAJW,GAAlB;AAMA,SAAOC,WAAP;AACD,CApBD;;AAqBA,IAAIR,UAAU,GAAG,SAASA,UAAT,CAAoBZ,IAApB,EAA0BC,MAA1B,EAAkCC,IAAlC,EAAwC;AACvD,MAAIW,UAAU,GAAGb,IAAI,CAACQ,GAAL,CAAS,YAAT,KAA0B,IAAIV,GAAJ,EAA3C;AACA,MAAIgB,EAAE,GAAGd,IAAI,CAACQ,GAAL,CAAS,IAAT,CAAT;AACA,MAAIiB,QAAQ,GAAGZ,UAAU,CAACL,GAAX,CAAe,UAAf,CAAf;AACA,MAAIkB,OAAO,GAAGb,UAAU,CAACL,GAAX,CAAe,iBAAf,CAAd;AACA,MAAImB,KAAK,GAAGd,UAAU,CAACL,GAAX,CAAe,OAAf,CAAZ;AACA,MAAIoB,KAAK,GAAGf,UAAU,CAACL,GAAX,CAAe,OAAf,CAAZ;AACA,MAAIqB,QAAQ,GAAGhB,UAAU,CAACL,GAAX,CAAe,UAAf,CAAf;AACA,MAAIsB,SAAS,GAAGjB,UAAU,CAACL,GAAX,CAAe,WAAf,CAAhB;AACA,MAAIuB,kBAAkB,GAAGH,KAAK,CAACrD,MAAN,CAAa,UAAUyD,CAAV,EAAa;AACjD,WAAOA,CAAC,KAAK1B,SAAb;AACD,GAFwB,EAEtBI,IAFsB,GAEf,CAFV;AAGA,MAAIiB,KAAK,IAAI,IAAT,IAAiBF,QAAQ,IAAI,IAA7B,IAAqCM,kBAAzC,EAA6D,OAAOzB,SAAP;AAC7D,MAAI2B,eAAe,GAAGxC,cAAc,CAACQ,MAAD,EAAS0B,KAAT,CAAd,IAAiC,EAAvD;AACA,MAAIO,kBAAkB,GAAGxC,iBAAiB,CAACO,MAAD,EAASwB,QAAT,EAAmBE,KAAnB,CAAjB,IAA8C,EAAvE;AACA,MAAIQ,SAAS,GAAGF,eAAe,CAAC1B,IAAhB,IAAwB,WAAxC;AACA,MAAI6B,WAAW,GAAG5C,YAAY,CAAC0C,kBAAkB,CAACE,WAApB,EAAiC,CAAjC,CAA9B;AACA,MAAIC,UAAU,GAAGpC,MAAM,CAACqC,KAAP,CAAaL,eAAe,CAAC1B,IAA7B,KAAsC,EAAvD;AACA,MAAIgC,SAAS,GAAG3C,eAAe,CAAC+B,KAAD,EAAQ1B,MAAR,EAAgBC,IAAhB,CAA/B;AACA,MAAI0B,KAAK,CAAClB,IAAN,GAAa0B,WAAjB,EAA8B,OAAO9B,SAAP;AAC9B,MAAIJ,IAAI,CAACC,UAAL,CAAgBqC,OAAhB,CAAwBb,KAAxB,KAAkC,CAAC,CAAvC,EAA0CzB,IAAI,CAACC,UAAL,CAAgBxB,IAAhB,CAAqBgD,KAArB;AAC1CC,EAAAA,KAAK,GAAGA,KAAK,CAACa,OAAN,EAAR;AACAZ,EAAAA,QAAQ,GAAGA,QAAQ,CAACY,OAAT,EAAX;AACAX,EAAAA,SAAS,GAAGA,SAAS,CAACW,OAAV,EAAZ;AACA,MAAIC,MAAM,GAAG,EAAb;;AACA,OAAK,IAAI3D,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG6C,KAAK,CAAC3C,MAA1B,EAAkCF,CAAC,EAAnC,EAAuC;AACrC,QAAI4D,GAAG,GAAG;AACRpC,MAAAA,IAAI,EAAEuB,SAAS,CAAC/C,CAAD,CADP;AAER6C,MAAAA,KAAK,EAAEA,KAAK,CAAC7C,CAAD;AAFJ,KAAV;AAIA2D,IAAAA,MAAM,CAAC/D,IAAP,CAAYgE,GAAZ;;AACA,QAAId,QAAQ,CAAC9C,CAAD,CAAR,IAAe,OAAnB,EAA4B;AAC1B,UAAI6D,WAAW,GAAGhB,KAAK,CAAC7C,CAAD,CAAvB;AACA,UAAImB,IAAI,CAACC,UAAL,CAAgBqC,OAAhB,CAAwBI,WAAxB,KAAwC,CAAC,CAA7C,EAAgD1C,IAAI,CAACC,UAAL,CAAgBxB,IAAhB,CAAqBiE,WAArB;AACjD;AACF;;AACD,MAAIC,eAAe,GAAGnB,OAAO,GAAGA,OAAO,CAACoB,IAAR,EAAH,GAAoB,IAAjD;AACA,MAAID,eAAe,IAAI,CAACzE,MAAM,CAACD,IAAP,CAAY0E,eAAZ,EAA6B5D,MAArD,EAA6D4D,eAAe,GAAG,IAAlB;AAC7D,MAAIE,SAAS,GAAG;AACdjC,IAAAA,EAAE,EAAEA,EADU;AAEdyB,IAAAA,SAAS,EAAEA,SAFG;AAGdhC,IAAAA,IAAI,EAAE4B,SAHQ;AAIda,IAAAA,KAAK,EAAEX,UAAU,CAACY,UAJJ;AAKdxB,IAAAA,QAAQ,EAAEA;AALI,GAAhB;AAOA,MAAIoB,eAAJ,EAAqBE,SAAS,CAACF,eAAV,GAA4BA,eAA5B;AACrBE,EAAAA,SAAS,CAACL,MAAV,GAAmBA,MAAnB;AACA,SAAOK,SAAP;AACD,CAhDD","sourcesContent":["import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport { defaultValue } from \"../utils/stuff\";\nimport { getFieldConfig, getOperatorConfig } from \"../utils/configUtils\";\nimport { defaultConjunction } from \"../utils/defaultUtils\";\nimport { formatFieldName } from \"../utils/ruleUtils\";\nimport { completeValue } from \"../utils/funcUtils\";\nimport { Map } from \"immutable\";\n\n/*\n Build tree to http://querybuilder.js.org/ like format\n\n Example:\n {\n    \"condition\": \"AND\",\n    \"rules\": [\n        {\n            \"id\": \"price\",\n            \"field\": \"price\",\n            \"type\": \"double\",\n            \"input\": \"text\",\n            \"operator\": \"less\",\n            \"value\": \"10.25\"\n        },\n        {\n            \"condition\": \"OR\",\n            \"rules\": [\n                {\n                    \"id\": \"category\",\n                    \"field\": \"category\",\n                    \"type\": \"integer\",\n                    \"input\": \"select\",\n                    \"operator\": \"equal\",\n                    \"value\": \"2\"\n                },\n                {\n                    \"id\": \"category\",\n                    \"field\": \"category\",\n                    \"type\": \"integer\",\n                    \"input\": \"select\",\n                    \"operator\": \"equal\",\n                    \"value\": \"1\"\n                }\n            ]\n        }\n    ]\n }\n */\n\nexport var queryBuilderFormat = function queryBuilderFormat(item, config) {\n  //meta is mutable\n  var meta = {\n    usedFields: []\n  };\n  var res = formatItem(item, config, meta);\n  if (!res) return undefined;\n  return _objectSpread(_objectSpread({}, res), meta);\n};\nvar formatItem = function formatItem(item, config, meta) {\n  if (!item) return undefined;\n  var type = item.get(\"type\");\n  var children = item.get(\"children1\");\n  if ((type === \"group\" || type === \"rule_group\") && children && children.size) {\n    return formatGroup(item, config, meta);\n  } else if (type === \"rule\") {\n    return formatRule(item, config, meta);\n  }\n  return undefined;\n};\nvar formatGroup = function formatGroup(item, config, meta) {\n  var properties = item.get(\"properties\") || new Map();\n  var children = item.get(\"children1\");\n  var id = item.get(\"id\");\n  var list = children.map(function (currentChild) {\n    return formatItem(currentChild, config, meta);\n  }).filter(function (currentChild) {\n    return typeof currentChild !== \"undefined\";\n  });\n  if (!list.size) return undefined;\n  var conjunction = properties.get(\"conjunction\");\n  if (!conjunction) conjunction = defaultConjunction(config);\n  var not = properties.get(\"not\");\n  var resultQuery = {\n    id: id,\n    rules: list.toList(),\n    condition: conjunction.toUpperCase(),\n    not: not\n  };\n  return resultQuery;\n};\nvar formatRule = function formatRule(item, config, meta) {\n  var properties = item.get(\"properties\") || new Map();\n  var id = item.get(\"id\");\n  var operator = properties.get(\"operator\");\n  var options = properties.get(\"operatorOptions\");\n  var field = properties.get(\"field\");\n  var value = properties.get(\"value\");\n  var valueSrc = properties.get(\"valueSrc\");\n  var valueType = properties.get(\"valueType\");\n  var hasUndefinedValues = value.filter(function (v) {\n    return v === undefined;\n  }).size > 0;\n  if (field == null || operator == null || hasUndefinedValues) return undefined;\n  var fieldDefinition = getFieldConfig(config, field) || {};\n  var operatorDefinition = getOperatorConfig(config, operator, field) || {};\n  var fieldType = fieldDefinition.type || \"undefined\";\n  var cardinality = defaultValue(operatorDefinition.cardinality, 1);\n  var typeConfig = config.types[fieldDefinition.type] || {};\n  var fieldName = formatFieldName(field, config, meta);\n  if (value.size < cardinality) return undefined;\n  if (meta.usedFields.indexOf(field) == -1) meta.usedFields.push(field);\n  value = value.toArray();\n  valueSrc = valueSrc.toArray();\n  valueType = valueType.toArray();\n  var values = [];\n  for (var i = 0; i < value.length; i++) {\n    var val = {\n      type: valueType[i],\n      value: value[i]\n    };\n    values.push(val);\n    if (valueSrc[i] == \"field\") {\n      var secondField = value[i];\n      if (meta.usedFields.indexOf(secondField) == -1) meta.usedFields.push(secondField);\n    }\n  }\n  var operatorOptions = options ? options.toJS() : null;\n  if (operatorOptions && !Object.keys(operatorOptions).length) operatorOptions = null;\n  var ruleQuery = {\n    id: id,\n    fieldName: fieldName,\n    type: fieldType,\n    input: typeConfig.mainWidget,\n    operator: operator\n  };\n  if (operatorOptions) ruleQuery.operatorOptions = operatorOptions;\n  ruleQuery.values = values;\n  return ruleQuery;\n};"]},"metadata":{},"sourceType":"module"}