{"ast":null,"code":"import rsapi from \"../rsapi\";\nimport { toast } from \"react-toastify\";\nimport { constructOptionList, sortData } from \"../components/CommonScript\";\nimport { DEFAULT_RETURN } from \"./LoginTypes\";\nimport Axios from \"axios\";\nimport { initRequest } from \"./LoginAction\";\nimport { transactionStatus, attachmentType } from \"../components/Enumeration\";\nimport { intl } from \"../components/App\"; //Test click\n\nexport const getTestMaster = (testItem, userInfo, masterData) => {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"/testmaster/getTestById\", {\n      ntestcode: testItem.ntestcode,\n      userinfo: userInfo\n    }).then(response => {\n      masterData = { ...masterData,\n        ...response.data\n      };\n      sortData(masterData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false,\n          dataState: undefined\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n      toast.error(error.message);\n    });\n  };\n}; //tab click\n\nexport const getTestDetails = inputParam => {\n  return function (dispatch) {\n    const testParameter = inputParam.testParameter;\n    dispatch(initRequest(true));\n    rsapi.post(\"/testmaster/getothertestdetails\", {\n      ntestcode: testParameter.ntestcode,\n      \"nFlag\": inputParam.nFlag,\n      ntestparametercode: testParameter.ntestparametercode,\n      userinfo: inputParam.userInfo\n    }).then(response => {\n      let masterData = inputParam.masterData;\n      masterData = { ...masterData,\n        ...response.data\n      };\n      sortData(masterData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}; //Add Test\n\nexport const addTest = (operation, testmaster, userInfo, ncontrolCode, nfilterTestCategory) => {\n  return function (dispatch) {\n    if (nfilterTestCategory && Object.values(nfilterTestCategory).length > 0) {\n      dispatch(initRequest(true));\n      const urlArray = [rsapi.post(\"testcategory/getTestCategory\", {\n        \"userinfo\": userInfo\n      }), rsapi.post(\"checklist/getApprovedChecklist\", {\n        \"userinfo\": userInfo\n      })];\n\n      if (operation === \"update\") {\n        urlArray.push(rsapi.post(\"testmaster/getActiveTestById\", {\n          \"userinfo\": userInfo,\n          ntestcode: testmaster.ntestcode\n        }));\n        urlArray.push(rsapi.post(\"testmaster/getPeriod\", {\n          \"userinfo\": userInfo\n        }));\n      } else if (operation === \"create\") {\n        urlArray.push(rsapi.post(\"parametertype/getParameterType\", {\n          \"userinfo\": userInfo\n        }));\n        urlArray.push(rsapi.post(\"grade/getGrade\", {\n          \"userinfo\": userInfo\n        }));\n        urlArray.push(rsapi.post(\"section/getSection\", {\n          \"userinfo\": userInfo\n        }));\n        urlArray.push(rsapi.post(\"method/getMethod\", {\n          \"userinfo\": userInfo\n        }));\n        urlArray.push(rsapi.post(\"unit/getUnit\", {\n          \"userinfo\": userInfo\n        }));\n        urlArray.push(rsapi.post(\"instrumentcategory/fetchinstrumentcategory\", {\n          \"userinfo\": userInfo\n        }));\n        urlArray.push(rsapi.post(\"testmaster/getAddTest\", {\n          \"userinfo\": userInfo\n        }));\n        urlArray.push(rsapi.post(\"containertype/getContainerType\", {\n          \"userinfo\": userInfo\n        }));\n        urlArray.push(rsapi.post(\"testpackage/getTestPackage\", {\n          \"userinfo\": userInfo\n        }));\n        urlArray.push(rsapi.post(\"testmaster/getPeriod\", {\n          \"userinfo\": userInfo\n        }));\n      } else if (operation === \"copy\") {\n        urlArray.push(rsapi.post(\"testmaster/validateCopyTest\", {\n          \"userinfo\": userInfo,\n          ntestcode: testmaster.ntestcode\n        }));\n        urlArray.push(rsapi.post(\"testmaster/getPeriod\", {\n          \"userinfo\": userInfo\n        }));\n      }\n\n      Axios.all(urlArray).then(response => {\n        let selectedRecord = {};\n        const testCategoryMap = constructOptionList(response[0].data || [], \"ntestcategorycode\", \"stestcategoryname\", false, false, true);\n        const testCategory = testCategoryMap.get(\"OptionList\");\n        const checklistMap = constructOptionList(response[0].data || [], \"nchecklistversioncode\", \"schecklistname\", false, false, true);\n        const ChecklistVersion = checklistMap.get(\"OptionList\"); //const periodMap=[];\n\n        const testData = {\n          testCategory,\n          ChecklistVersion\n        };\n        let parameterData = {};\n        let otherTestData = {};\n        let needOtherTest = false;\n\n        if (operation === \"update\") {\n          const editData = response[2].data;\n          selectedRecord = editData;\n          const periodMap = constructOptionList(response[3].data || [], \"ntatunitcode\", \"statunitname\", false, false, true);\n          parameterData = {\n            period: periodMap.get(\"OptionList\")\n          };\n          selectedRecord[\"ntestcategorycode\"] = {\n            \"value\": editData[\"ntestcategorycode\"],\n            \"label\": editData[\"stestcategoryname\"]\n          };\n          selectedRecord[\"nchecklistversioncode\"] = {\n            \"value\": editData[\"nchecklistversioncode\"],\n            \"label\": editData[\"schecklistname\"]\n          };\n          selectedRecord[\"ntatunitcode\"] = {\n            \"value\": editData[\"ntatunitcode\"],\n            \"label\": editData[\"statunitname\"]\n          };\n        } else if (operation === \"copy\") {\n          const periodMap = constructOptionList(response[3].data || [], \"ntatunitcode\", \"statunitname\", false, false, true); //period:periodMap.get(\"OptionList\")\n\n          parameterData = {\n            period: periodMap.get(\"OptionList\")\n          };\n          selectedRecord = {\n            ntestcategorycode: nfilterTestCategory.value === -2 ? testCategory.length > 0 ? // {\"label\": testCategory[0].stestcategoryname, \"value\": testCategory[0].ntestcategorycode}\n            testCategory[0] : \"\" : nfilterTestCategory,\n            ntransactionstatus: transactionStatus.ACTIVE,\n            naccredited: transactionStatus.NOTACCREDITED,\n            stestsynonym: \"\",\n            stestname: \"\",\n            sdescription: \"\",\n            ncost: \"\" //period:periodMap.get(\"OptionList\"),\n\n          };\n        } else {\n          // const { Grade } = response[7].data; //ParameterType\n          const parameterMap = constructOptionList(response[2].data || [], \"nparametertypecode\", \"sdisplaystatus\", false, false, true); // const parameterType = parameterMap.get(\"OptionList\");//response[2].data;\n\n          const gradeMap = constructOptionList(response[3].data || [], \"ngradecode\", \"sdisplaystatus\", false, false, true); // const grade = gradeMap.get(\"OptionList\");// response[3].data;\n\n          const parameterItem = parameterMap.get(\"DefaultValue\") ? parameterMap.get(\"DefaultValue\") : \"\"; //parameterType.filter(item=>{ return item.nparametertypecode === 3 });//ParameterType[0];\n\n          selectedRecord = {\n            // nsectioncode: {\"value\": response[2].data[0].nsectioncode, \"label\": response[2].data[0].ssectionname},\n            nunitcode: -1,\n            nparametertypecode: parameterItem,\n            //{\"value\": parameterItem[0].nparametertypecode, \"label\": parameterItem[0].sdisplaystatus},\n            ntestcategorycode: nfilterTestCategory.value === -2 ? testCategory.length > 0 ? // {\"label\": testCategory[0].stestcategoryname, \"value\": testCategory[0].ntestcategorycode}: \"\")\n            testCategory[0] : \"\" : nfilterTestCategory,\n            ntransactionstatus: transactionStatus.ACTIVE,\n            naccredited: transactionStatus.NOTACCREDITED,\n            stestsynonym: \"\",\n            stestname: \"\",\n            sdescription: \"\",\n            ncost: \"\"\n          };\n          let needUnit = true;\n          let needRoundingDigit = true;\n          let needCodedResult = true;\n          let needActualResult = true;\n          let npredefinedcode = transactionStatus.NO;\n          const unitMap = constructOptionList(response[6].data || [], \"nunitcode\", \"sunitname\", false, false, true);\n          const periodMap = constructOptionList(response[11].data || [], \"ntatunitcode\", \"statunitname\", false, false, true);\n          const deltaperiodMap = constructOptionList(response[11].data || [], \"ndeltaunitcode\", \"sdeltaunitname\", false, false, true);\n\n          if (parameterItem && parameterItem.item) {\n            if (parameterItem.item[\"nunit\"] === transactionStatus.YES) {\n              needUnit = false;\n              selectedRecord[\"nunitcode\"] = unitMap.get(\"DefaultValue\") ? unitMap.get(\"DefaultValue\") : \"\"; //{\"value\": response[4].data[0][\"nunitcode\"], \"label\": response[4].data[0][\"sunitname\"]};\n            }\n\n            if (parameterItem.item[\"nroundingdigit\"] === transactionStatus.YES) {\n              needRoundingDigit = false;\n            }\n\n            if (parameterItem.item[\"npredefinedcode\"] === transactionStatus.YES) {\n              needCodedResult = false;\n              npredefinedcode = parameterItem.item[\"npredefinedcode\"];\n            }\n\n            if (parameterItem.item[\"ngrade\"] === transactionStatus.YES) {\n              needActualResult = false;\n              selectedRecord[\"ngradecode\"] = gradeMap.get(\"DefaultValue\") ? gradeMap.get(\"DefaultValue\") : \"\"; //{\"value\": Grade.ngradecode, \"label\": Grade[\"sdisplaystatus\"]};\n            }\n          } // const testParameterMap = constructOptionList(response[8].data[\"TestParameter\"] || [], \"nparametertypecode\", \"sdisplaystatus\", false, false, true);\n\n\n          parameterData = {\n            grade: gradeMap.get(\"OptionList\"),\n            parameterType: parameterMap.get(\"OptionList\"),\n            unit: unitMap.get(\"OptionList\"),\n            period: periodMap.get(\"OptionList\"),\n            deltaperiod: deltaperiodMap.get(\"OptionList\"),\n            needRoundingDigit,\n            needUnit,\n            needCodedResult,\n            needActualResult,\n            npredefinedcode,\n            testParameter: constructOptionList(response[8].data[\"TestParameter\"] || [], 'sparametername', 'sparametername', false, false, true).get(\"OptionList\"),\n            defaultUnit: unitMap.get(\"DefaultValue\") ? unitMap.get(\"DefaultValue\") : \"\",\n            defaultGrade: gradeMap.get(\"DefaultValue\") ? gradeMap.get(\"DefaultValue\") : \"\" //testParameterMap.get(\"OptionList\")\n\n          };\n          const sectionMap = constructOptionList(response[4].data || [], \"nsectioncode\", \"ssectionname\", false, false, true);\n          const methodMap = constructOptionList(response[5].data.Method.length > 0 ? response[5].data.Method : [] || [], \"nmethodcode\", \"smethodname\", false, false, true);\n          const instCatMap = constructOptionList(response[7].data || [], \"ninstrumentcatcode\", \"sinstrumentcatname\", false, false, true);\n          const continerType = constructOptionList(response[9].data || [], \"ncontainertypecode\", \"scontainertype\", false, false, true);\n          const packageMap = constructOptionList(response[10].data || [], \"ntestpackagecode\", \"stestpackagename\", false, false, true);\n          otherTestData = {\n            package: packageMap.get(\"OptionList\"),\n            section: sectionMap.get(\"OptionList\"),\n            method: methodMap.get(\"OptionList\"),\n            instrumentcategory: instCatMap.get(\"OptionList\"),\n            containertype: continerType.get(\"OptionList\")\n          };\n          needOtherTest = true;\n        }\n\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            // parameterData: {\n            //     period: periodMap.get(\"OptionList\")\n            // },   \n            openModal: true,\n            needOtherTest,\n            operation: operation,\n            screenName: \"IDS_TEST\",\n            selectedRecord,\n            ncontrolCode,\n            testData,\n            parameterData,\n            otherTestData,\n            loading: false\n          }\n        });\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(error.response.data);\n        }\n      });\n    } else {\n      toast.warn(intl.formatMessage({\n        id: \"IDS_TESTCATEGORYNOTAVAILABLE\"\n      }));\n    }\n  };\n}; //Add Test Parameter\n\nexport const addParameter = (operation, ntestparametercode, userInfo, ncontrolCode) => {\n  return dispatch => {\n    dispatch(initRequest(true));\n    const urlArray = [rsapi.post(\"unit/getUnit\", {\n      \"userinfo\": userInfo\n    }), rsapi.post(\"parametertype/getParameterType\", {\n      \"userinfo\": userInfo\n    }), rsapi.post(\"grade/getGrade\", {\n      \"userinfo\": userInfo\n    }), rsapi.post(\"testmaster/getAddTest\", {\n      \"userinfo\": userInfo\n    }), rsapi.post(\"testmaster/getPeriod\", {\n      \"userinfo\": userInfo\n    })];\n\n    if (operation === \"update\") {\n      urlArray.push(rsapi.post(\"testmaster/getActiveParameterById\", {\n        ntestparametercode: ntestparametercode,\n        \"userinfo\": userInfo\n      }));\n    }\n\n    Axios.all(urlArray).then(response => {\n      // const { Grade, ParameterType } = response[1].data;\n      const parameterMap = constructOptionList(response[1].data || [], \"nparametertypecode\", \"sdisplaystatus\", false, false, true);\n      const gradeMap = constructOptionList(response[2].data || [], \"ngradecode\", \"sdisplaystatus\", false, false, true);\n      const unitMap = constructOptionList(response[0].data || [], \"nunitcode\", \"sunitname\", false, false, true);\n      const deltaperiodMap = constructOptionList(response[4].data || [], \"ndeltaunitcode\", \"sdeltaunitname\", false, false, true); //response[2].data;\n      // const grade = response[2].data;\n      // const parameterType = response[1].data;\n\n      let selectedRecord = {};\n      let needUnit = true;\n      let needRoundingDigit = true;\n      let needCodedResult = true;\n      let needActualResult = true;\n      let npredefinedcode = transactionStatus.No;\n\n      if (operation === \"update\") {\n        const editTestParameter = response[5].data.TestParameter[0];\n        selectedRecord = editTestParameter;\n        const nparametertypecode = editTestParameter[\"nparametertypecode\"];\n        const parameterItem = parameterMap.get(\"OptionList\").filter(function (item) {\n          return item.value === nparametertypecode;\n        });\n        selectedRecord[\"sparametername\"] = {\n          value: editTestParameter[\"sparametername\"],\n          label: editTestParameter[\"sparametername\"]\n        };\n        selectedRecord[\"ndeltaunitcode\"] = {\n          \"value\": editTestParameter[\"ndeltaunitcode\"],\n          \"label\": editTestParameter[\"sdeltaunitname\"]\n        };\n        selectedRecord[\"nparametertypecode\"] = {\n          value: nparametertypecode,\n          label: editTestParameter[\"sdisplaystatus\"]\n        };\n\n        if (parameterItem && parameterItem[0].item) {\n          const selectedParameterItem = parameterItem[0].item;\n\n          if (selectedParameterItem[\"nunitrequired\"] === transactionStatus.YES) {\n            needUnit = false;\n            selectedRecord[\"nunitcode\"] = {\n              value: editTestParameter[\"nunitcode\"],\n              label: editTestParameter[\"sunitname\"]\n            };\n          }\n\n          if (selectedParameterItem[\"nroundingrequired\"] === transactionStatus.YES) {\n            needRoundingDigit = false;\n          }\n\n          if (selectedParameterItem[\"npredefinedrequired\"] === transactionStatus.YES || selectedParameterItem[\"ngraderequired\"] === transactionStatus.YES) {\n            const editCodedResult = response[5].data.TestPredefinedParameter;\n\n            if (editCodedResult.length > 0) {\n              const defaultCodedResult = editCodedResult.filter(function (item) {\n                return item.ndefaultstatus === transactionStatus.YES;\n              });\n\n              if (defaultCodedResult.length > 0) {\n                selectedRecord[\"spredefinedname\"] = defaultCodedResult[0].spredefinedname;\n                selectedRecord[\"ntestpredefinedcode\"] = defaultCodedResult[0].ntestpredefinedcode;\n                ;\n                selectedRecord[\"ngradecode\"] = {\n                  value: defaultCodedResult[0].ngradecode,\n                  label: defaultCodedResult[0][\"sdisplaystatus\"]\n                };\n              } else {\n                selectedRecord[\"spredefinedname\"] = editCodedResult[0].spredefinedname;\n                selectedRecord[\"ntestpredefinedcode\"] = editCodedResult[0].ntestpredefinedcode;\n                selectedRecord[\"ngradecode\"] = {\n                  value: editCodedResult[0].ngradecode,\n                  label: editCodedResult[0][\"sdisplaystatus\"]\n                };\n              }\n            }\n          } else {\n            selectedRecord[\"spredefinedname\"] = \"\";\n            selectedRecord[\"ngradecode\"] = -1;\n          }\n\n          if (selectedParameterItem[\"npredefinedrequired\"] === transactionStatus.YES) {\n            needCodedResult = false;\n            npredefinedcode = selectedParameterItem[\"npredefinedrequired\"];\n          }\n\n          if (selectedParameterItem[\"ngraderequired\"] === transactionStatus.YES) {\n            needActualResult = false;\n          }\n        }\n      } else {\n        const parameterItem = parameterMap.get(\"DefaultValue\") ? parameterMap.get(\"DefaultValue\").item : {}; // parameterType.filter(item=>{ return item.nparametertypecode === transactionStatus.YES });\n\n        if (parameterItem[\"nunitrequired\"] === transactionStatus.YES) {\n          needUnit = false;\n          selectedRecord[\"nunitcode\"] = unitMap.get(\"DefaultValue\") ? unitMap.get(\"DefaultValue\") : \"\"; //{\"value\": response[0].data[0][\"nunitcode\"], \"label\": response[0].data[0][\"sunitname\"]};\n        }\n\n        if (parameterItem[\"nroundingrequired\"] === transactionStatus.YES) {\n          needRoundingDigit = false;\n        }\n\n        if (parameterItem[\"npredefinedcrequired\"] === transactionStatus.YES) {\n          needCodedResult = false;\n          npredefinedcode = parameterItem[\"npredefinedcode\"];\n        }\n\n        if (parameterItem[\"ngraderequired\"] === transactionStatus.YES) {\n          needActualResult = false; // selectedRecord[\"ngradecode\"] = {\"value\": Grade.ngradecode, \"label\": Grade[\"sdisplaystatus\"]};\n        }\n\n        selectedRecord[\"nparametertypecode\"] = parameterMap.get(\"DefaultValue\"); //{value: parameterItem[0].nparametertypecode, label: parameterItem[0].sdisplaystatus};\n\n        selectedRecord[\"nroundingdigits\"] = \"\";\n        selectedRecord[\"nunitcode\"] = \"\";\n      }\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          openChildModal: true,\n          showSaveContinue: true,\n          operation: operation,\n          screenName: \"IDS_PARAMETER\",\n          selectedRecord,\n          parameterData: {\n            unit: unitMap.get(\"OptionList\"),\n            grade: gradeMap.get(\"OptionList\"),\n            deltaperiod: deltaperiodMap.get(\"OptionList\"),\n            parameterType: parameterMap.get(\"OptionList\"),\n            needUnit,\n            needRoundingDigit,\n            needCodedResult,\n            needActualResult,\n            npredefinedcode,\n            testParameter: constructOptionList(response[3].data[\"TestParameter\"] || [], 'sparametername', 'sparametername', false, false, true).get(\"OptionList\"),\n            defaultUnit: unitMap.get(\"DefaultValue\") ? unitMap.get(\"DefaultValue\") : \"\",\n            defaultGrade: gradeMap.get(\"DefaultValue\") ? gradeMap.get(\"DefaultValue\") : \"\"\n          },\n          ncontrolCode,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}; //Add Coded result\n\nexport const addCodedResult = (operation, paramdata, userInfo, ncontrolCode) => {\n  return dispatch => {\n    dispatch(initRequest(true));\n    const urlArray = [rsapi.post(\"testmaster/getAddTest\", {\n      \"userinfo\": userInfo\n    }), rsapi.post(\"grade/getGrade\", {\n      \"userinfo\": userInfo\n    })];\n\n    if (operation === \"update\") {\n      urlArray.push(rsapi.post(\"testmaster/getActivePredefinedParameterById\", {\n        ntestpredefinedcode: paramdata[\"ntestpredefinedcode\"],\n        \"userinfo\": userInfo\n      }));\n    }\n\n    Axios.all(urlArray).then(response => {\n      let selectedRecord = {}; // const grade = response[1].data;\n\n      const gradeMap = constructOptionList(response[1].data || [], \"ngradecode\", \"sdisplaystatus\", false, false, true);\n\n      if (operation === \"update\") {\n        const editCodedResult = response[2].data;\n        selectedRecord = {\n          ntestpredefinedcode: paramdata[\"ntestpredefinedcode\"],\n          ntestparametercode: paramdata[\"ntestparametercode\"],\n          ngradecode: {\n            \"label\": editCodedResult[\"sdisplaystatus\"],\n            \"value\": editCodedResult[\"ngradecode\"]\n          },\n          spredefinedname: editCodedResult[\"spredefinedname\"],\n          ndefaultstatus: editCodedResult[\"ndefaultstatus\"]\n        };\n      } else {\n        selectedRecord = {\n          ntestparametercode: paramdata[\"ntestparametercode\"],\n          ngradecode: gradeMap.get(\"DefaultValue\") ? gradeMap.get(\"DefaultValue\") : \"\" //{\"value\": grade[0].ngradecode, \"label\": grade[0][\"sdisplaystatus\"]}\n\n        };\n      }\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          openChildModal: true,\n          showSaveContinue: false,\n          operation: operation,\n          screenName: \"IDS_CODEDRESULT\",\n          parameterData: {\n            grade: gradeMap.get(\"OptionList\"),\n            defaultGrade: gradeMap.get(\"DefaultValue\") ? gradeMap.get(\"DefaultValue\") : \"\"\n          },\n          selectedRecord,\n          ncontrolCode,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}; //Add parameter specification\n\nexport const addParameterSpecification = (operation, paramdata, userInfo, ncontrolCode) => {\n  return dispatch => {\n    dispatch(initRequest(true));\n    let inputparam = [];\n    let surl = \"\";\n\n    if (operation === \"update\") {\n      surl = \"getParameterSpecificationById\";\n      inputparam = {\n        userinfo: userInfo,\n        ntestparamnumericcode: paramdata[\"ntestparamnumericcode\"]\n      };\n    } else {\n      surl = \"getParameterSpecificationByCount\";\n      inputparam = {\n        userinfo: userInfo,\n        ntestparametercode: paramdata[\"ntestparametercode\"]\n      };\n    }\n\n    rsapi.post(\"testmaster/\" + surl, inputparam).then(response => {\n      let selectedRecord = {};\n\n      if (operation === \"update\") {\n        selectedRecord = { ...response.data\n        };\n      } else {\n        selectedRecord = {\n          ntestparametercode: paramdata[\"ntestparametercode\"]\n        };\n      }\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          openChildModal: true,\n          showSaveContinue: false,\n          operation: operation,\n          screenName: \"IDS_SPECIFICATION\",\n          selectedRecord,\n          ncontrolCode,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n};\nexport const getAvailableData = (testItem, url, key, screenName, userInfo, ncontrolCode) => {\n  return dispatch => {\n    const inputParam = {\n      TestMaster: testItem,\n      \"userinfo\": userInfo\n    };\n    dispatch(initRequest(true));\n    rsapi.post(\"testmaster/\" + url, inputParam).then(response => {\n      const availableDataMap = constructOptionList(response.data, key === \"section\" ? \"nsectioncode\" : key === \"method\" ? \"nmethodcode\" : key == \"instrumentcategory\" ? \"ninstrumentcatcode\" : key == \"package\" ? \"ntestpackagecode\" : \"ncontainertypecode\", key === \"section\" ? \"ssectionname\" : key === \"method\" ? \"smethodname\" : key == \"instrumentcategory\" ? \"sinstrumentcatname\" : key == \"package\" ? \"stestpackagename\" : \"scontainertype\", false, false, true);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          openChildModal: true,\n          showSaveContinue: false,\n          otherTestData: {\n            [key]: availableDataMap.get(\"OptionList\")\n          },\n          screenName: screenName,\n          selectedRecord: {\n            availableData: \"\"\n          },\n          operation: \"create\",\n          ncontrolCode,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 417) {\n        toast.info(error.response.data);\n      } else {\n        toast.error(error.message);\n      }\n    });\n  };\n}; //Add formula\n\nexport const addFormula = (paramdata, userInfo, ncontrolCode) => {\n  return dispatch => {\n    dispatch(initRequest(true));\n    rsapi.post(\"testmaster/addTestFormula\", {\n      userinfo: userInfo,\n      nFlag: 1\n    }).then(response => {\n      const responseData = response.data;\n      const testMasterMap = constructOptionList(responseData[\"TestMaster\"], \"ntestcode\", \"stestname\", false, false, false);\n      const testCategoryMap = constructOptionList(responseData[\"TestCategory\"], \"ntestcategorycode\", \"stestcategoryname\", 'descending', false, true);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          openChildModal: true,\n          showSaveContinue: false,\n          operation: \"create\",\n          screenName: \"IDS_FORMULA\",\n          formulaData: {\n            operators: responseData[\"Operators\"],\n            functions: responseData[\"Functions\"],\n            testCategory: testCategoryMap.get(\"OptionList\"),\n            testMaster: testMasterMap.get(\"OptionList\"),\n            dynamicFormulaFields: responseData[\"DynamicFormulaFields\"]\n          },\n          isFormulaOpen: true,\n          selectedRecord: {\n            ntestcategorycode: testCategoryMap.get(\"OptionList\") && testCategoryMap.get(\"OptionList\").length > 0 ? testCategoryMap.get(\"OptionList\")[0] : \"\",\n            //responseData[\"TestCategory\"].length>0? {\"label\": responseData[\"TestCategory\"][0][\"stestcategoryname\"], \"value\": responseData[\"TestCategory\"][0][\"ntestcategorycode\"]}: \"\",\n            ntestcode: testMasterMap.get(\"OptionList\") && testMasterMap.get(\"OptionList\").length > 0 ? testMasterMap.get(\"OptionList\")[0] : \"\",\n            //responseData[\"TestMaster\"].length>0? {\"label\": responseData[\"TestMaster\"][0][\"stestname\"], \"value\": responseData[\"TestMaster\"][0][\"ntestcode\"]}: \"\",\n            ntestparametercode: paramdata[\"ntestparametercode\"]\n          },\n          ncontrolCode,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}; //Formula test category and test change event function\n\nexport const formulaChangeFunction = (inputParam, formulaData, caseNo, selectedRecordData, methodUrl) => {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"/testmaster\" + methodUrl, inputParam).then(response => {\n      const masterData = response.data;\n      const testMasterMap = constructOptionList(masterData[\"TestMaster\"] || [], \"ntestcode\", \"stestname\", 'descending', 'ntestcode', false);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: caseNo === 1 ? {\n          formulaData: { ...formulaData,\n            testMaster: testMasterMap.get(\"OptionList\"),\n            dynamicFormulaFields: masterData[\"DynamicFormulaFields\"] || []\n          },\n          selectedRecord: { ...selectedRecordData,\n            ntestcode: testMasterMap.get(\"OptionList\") && testMasterMap.get(\"OptionList\").length > 0 ? testMasterMap.get(\"OptionList\")[0] : \"\" // masterData[\"TestMaster\"].length>0? {\"label\": masterData[\"TestMaster\"][0][\"stestname\"], \"value\": masterData[\"TestMaster\"][0][\"ntestcode\"]}: \"\"\n\n          },\n          loading: false\n        } : {\n          formulaData: { ...formulaData,\n            dynamicFormulaFields: masterData[\"DynamicFormulaFields\"]\n          },\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n      toast.error(error.message);\n    });\n  };\n};\nexport const changeTestCategoryFilter = (inputParam, filterTestCategory) => {\n  return dispatch => {\n    dispatch(initRequest(true));\n    rsapi.post(\"/testmaster/get\" + inputParam.methodUrl, inputParam.inputData).then(response => {\n      const masterData = response.data;\n      sortData(masterData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false,\n          masterData: { ...masterData,\n            filterTestCategory,\n            nfilterTestCategory: inputParam.inputData.nfilterTestCategory\n          }\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n      toast.error(error.message);\n    });\n  };\n};\nexport const addTestFile = inputParam => {\n  return dispatch => {\n    dispatch(initRequest(true));\n    let urlArray = [rsapi.post(\"/linkmaster/getLinkMaster\", {\n      userinfo: inputParam.userInfo\n    })];\n\n    if (inputParam.operation === \"update\") {\n      urlArray.push(rsapi.post(\"/testmaster/editTestFile\", {\n        userinfo: inputParam.userInfo,\n        testfile: inputParam.selectedRecord\n      }));\n    }\n\n    Axios.all(urlArray).then(response => {\n      const linkMap = constructOptionList(response[0].data.LinkMaster, \"nlinkcode\", \"slinkname\", false, false, true);\n      const linkmaster = linkMap.get(\"OptionList\");\n      let selectedRecord = {};\n      const defaultLink = linkmaster.filter(items => items.item.ndefaultlink === transactionStatus.YES);\n      let disabled = false;\n      let editObject = {};\n\n      if (inputParam.operation === \"update\") {\n        editObject = response[1].data;\n        let nlinkcode = {};\n        let link = {};\n\n        if (editObject.nattachmenttypecode === attachmentType.LINK) {\n          nlinkcode = {\n            \"label\": editObject.slinkname,\n            \"value\": editObject.nlinkcode\n          };\n          link = {\n            slinkfilename: editObject.sfilename,\n            slinkdescription: editObject.sdescription,\n            nlinkdefaultstatus: editObject.ndefaultstatus,\n            sfilesize: '',\n            nfilesize: 0,\n            ndefaultstatus: 4,\n            sfilename: ''\n          };\n        } else {\n          nlinkcode = defaultLink.length > 0 ? defaultLink[0] : \"\"; //{\"label\": defaultLink[0].slinkname, \"value\": defaultLink[0].nlinkcode}:\"\"\n\n          link = {\n            slinkfilename: '',\n            slinkdescription: '',\n            nlinkdefaultstatus: 4,\n            sfilesize: editObject.sfilesize,\n            nfilesize: editObject.nfilesize,\n            ndefaultstatus: editObject.ndefaultstatus,\n            sfilename: editObject.sfilename\n          };\n        }\n\n        selectedRecord = { ...link,\n          ntestfilecode: editObject.ntestfilecode,\n          nattachmenttypecode: editObject.nattachmenttypecode,\n          ...editObject,\n          nlinkcode // disabled: true\n\n        };\n      } else {\n        selectedRecord = {\n          nattachmenttypecode: response[0].data.AttachmentType.length > 0 ? response[0].data.AttachmentType[0].nattachmenttypecode : attachmentType.FTP,\n          nlinkcode: defaultLink.length > 0 ? defaultLink[0] : \"\",\n          //{\"label\": defaultLink[0].slinkname, \"value\": defaultLink[0].nlinkcode}:\"\",\n          disabled\n        };\n      }\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          [inputParam.modalName]: true,\n          operation: inputParam.operation,\n          screenName: inputParam.screenName,\n          ncontrolCode: inputParam.ncontrolCode,\n          selectedRecord,\n          loading: false,\n          linkMaster: linkmaster,\n          showSaveContinue: false,\n          editFiles: editObject.nattachmenttypecode === attachmentType.FTP ? editObject : {}\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n};\nexport const getActiveTestContainerTypeById = containerParam => {\n  return function (dispatch) {\n    let urlArray = [];\n    const containerTypeById = rsapi.post(\"containertype/getContainerType\", {\n      \"userinfo\": containerParam.userInfo\n    });\n    const containerById = rsapi.post(\"testmaster/getActiveTestContainerTypeById\", {\n      [containerParam.primaryKeyField]: containerParam.primaryKeyValue,\n      \"userinfo\": containerParam.userInfo\n    });\n    const units = rsapi.post(\"unit/getUnit\", {\n      \"userinfo\": containerParam.userInfo\n    });\n    urlArray = [containerTypeById, containerById, units];\n    dispatch(initRequest(true));\n    Axios.all(urlArray).then(response => {\n      let selectedRecord = {};\n      const continerType = constructOptionList(response[0].data || [], \"ncontainertypecode\", \"scontainertype\", false, false, true);\n      const unitMap = constructOptionList(response[2].data || [], \"nunitcode\", \"sunitname\", false, false, true);\n      let otherTestData = {\n        containertype: continerType.get(\"OptionList\"),\n        unit: unitMap.get(\"OptionList\")\n      };\n      let ContainerType = [];\n      let unit = [];\n      ContainerType.push({\n        \"value\": response[1].data[\"ncontainertypecode\"],\n        \"label\": response[1].data[\"scontainertype\"]\n      });\n      selectedRecord = response[1].data;\n      selectedRecord[\"ncontainertypecode\"] = ContainerType[0];\n      unit.push({\n        \"value\": response[1].data[\"nunitcode\"],\n        \"label\": response[1].data[\"sunitname\"]\n      });\n      selectedRecord = response[1].data;\n      selectedRecord[\"nunitcode\"] = unit[0];\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          otherTestData: otherTestData,\n          selectedRecord: selectedRecord,\n          isOpen: true,\n          operation: containerParam.operation,\n          screenName: \"IDS_CONTAINERTYPE\",\n          openChildModal: true,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(intl.formatMessage({\n          id: error.message\n        }));\n      } else {\n        toast.warn(intl.formatMessage({\n          id: error.response.data\n        }));\n      }\n    });\n  };\n};\nexport const addContainerType = (operation, testparametercode, userInfo, ncontrolCode) => {\n  return function (dispatch) {\n    let urlArray = [];\n    const containerTypeById = rsapi.post(\"unit/getUnit\", {\n      \"userinfo\": userInfo\n    });\n    const containerById = rsapi.post(\"testmaster/getAvailableContainerType\", {\n      \"TestMaster\": testparametercode,\n      \"userinfo\": userInfo\n    });\n    urlArray = [containerTypeById, containerById];\n    dispatch(initRequest(true));\n    Axios.all(urlArray).then(response => {\n      let selectedRecord = {};\n      const unitMap = constructOptionList(response[0].data || [], \"nunitcode\", \"sunitname\", false, false, true);\n      const continerType = constructOptionList(response[1].data || [], \"ncontainertypecode\", \"scontainertype\", false, false, true);\n      let otherTestData = {\n        containertype: continerType.get(\"OptionList\"),\n        unit: unitMap.get(\"OptionList\")\n      };\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          otherTestData: otherTestData,\n          selectedRecord: selectedRecord,\n          isOpen: true,\n          operation: operation,\n          screenName: \"IDS_CONTAINERTYPE\",\n          openChildModal: true,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(intl.formatMessage({\n          id: error.message\n        }));\n      } else {\n        toast.warn(intl.formatMessage({\n          id: error.response.data\n        }));\n      }\n    });\n  };\n};","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/actions/TestMasterAction.js"],"names":["rsapi","toast","constructOptionList","sortData","DEFAULT_RETURN","Axios","initRequest","transactionStatus","attachmentType","intl","getTestMaster","testItem","userInfo","masterData","dispatch","post","ntestcode","userinfo","then","response","data","type","payload","loading","dataState","undefined","catch","error","message","getTestDetails","inputParam","testParameter","nFlag","ntestparametercode","status","warn","addTest","operation","testmaster","ncontrolCode","nfilterTestCategory","Object","values","length","urlArray","push","all","selectedRecord","testCategoryMap","testCategory","get","checklistMap","ChecklistVersion","testData","parameterData","otherTestData","needOtherTest","editData","periodMap","period","ntestcategorycode","value","ntransactionstatus","ACTIVE","naccredited","NOTACCREDITED","stestsynonym","stestname","sdescription","ncost","parameterMap","gradeMap","parameterItem","nunitcode","nparametertypecode","needUnit","needRoundingDigit","needCodedResult","needActualResult","npredefinedcode","NO","unitMap","deltaperiodMap","item","YES","grade","parameterType","unit","deltaperiod","defaultUnit","defaultGrade","sectionMap","methodMap","Method","instCatMap","continerType","packageMap","package","section","method","instrumentcategory","containertype","openModal","screenName","formatMessage","id","addParameter","No","editTestParameter","TestParameter","filter","label","selectedParameterItem","editCodedResult","TestPredefinedParameter","defaultCodedResult","ndefaultstatus","spredefinedname","ntestpredefinedcode","ngradecode","openChildModal","showSaveContinue","addCodedResult","paramdata","addParameterSpecification","inputparam","surl","ntestparamnumericcode","getAvailableData","url","key","TestMaster","availableDataMap","availableData","info","addFormula","responseData","testMasterMap","formulaData","operators","functions","testMaster","dynamicFormulaFields","isFormulaOpen","formulaChangeFunction","caseNo","selectedRecordData","methodUrl","changeTestCategoryFilter","filterTestCategory","inputData","addTestFile","testfile","linkMap","LinkMaster","linkmaster","defaultLink","items","ndefaultlink","disabled","editObject","nlinkcode","link","nattachmenttypecode","LINK","slinkname","slinkfilename","sfilename","slinkdescription","nlinkdefaultstatus","sfilesize","nfilesize","ntestfilecode","AttachmentType","FTP","modalName","linkMaster","editFiles","getActiveTestContainerTypeById","containerParam","containerTypeById","containerById","primaryKeyField","primaryKeyValue","units","ContainerType","isOpen","addContainerType","testparametercode"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,UAAlB;AACA,SACIC,KADJ,QAEO,gBAFP;AAGA,SACIC,mBADJ,EAEIC,QAFJ,QAGO,4BAHP;AAIA,SACIC,cADJ,QAEO,cAFP;AAGA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SACIC,WADJ,QAEO,eAFP;AAGA,SACIC,iBADJ,EAEIC,cAFJ,QAGO,2BAHP;AAIA,SACIC,IADJ,QAEO,mBAFP,C,CAIA;;AACA,OAAO,MAAMC,aAAa,GAAG,CAACC,QAAD,EAAWC,QAAX,EAAqBC,UAArB,KAAoC;AAC7D,SAAO,UAAUC,QAAV,EAAoB;AACvBA,IAAAA,QAAQ,CAACR,WAAW,CAAC,IAAD,CAAZ,CAAR;AACAN,IAAAA,KAAK,CAACe,IAAN,CAAW,yBAAX,EAAsC;AAC9BC,MAAAA,SAAS,EAAEL,QAAQ,CAACK,SADU;AAE9BC,MAAAA,QAAQ,EAAEL;AAFoB,KAAtC,EAIKM,IAJL,CAIUC,QAAQ,IAAI;AACdN,MAAAA,UAAU,GAAG,EACT,GAAGA,UADM;AAET,WAAGM,QAAQ,CAACC;AAFH,OAAb;AAIAjB,MAAAA,QAAQ,CAACU,UAAD,CAAR;AACAC,MAAAA,QAAQ,CAAC;AACLO,QAAAA,IAAI,EAAEjB,cADD;AAELkB,QAAAA,OAAO,EAAE;AACLT,UAAAA,UADK;AAELU,UAAAA,OAAO,EAAE,KAFJ;AAGLC,UAAAA,SAAS,EAAEC;AAHN;AAFJ,OAAD,CAAR;AAQH,KAlBL,EAmBKC,KAnBL,CAmBWC,KAAK,IAAI;AACZb,MAAAA,QAAQ,CAAC;AACLO,QAAAA,IAAI,EAAEjB,cADD;AAELkB,QAAAA,OAAO,EAAE;AACLC,UAAAA,OAAO,EAAE;AADJ;AAFJ,OAAD,CAAR;AAMAtB,MAAAA,KAAK,CAAC0B,KAAN,CAAYA,KAAK,CAACC,OAAlB;AACH,KA3BL;AA4BH,GA9BD;AA+BH,CAhCM,C,CAkCP;;AACA,OAAO,MAAMC,cAAc,GAAIC,UAAD,IAAgB;AAC1C,SAAO,UAAUhB,QAAV,EAAoB;AACvB,UAAMiB,aAAa,GAAGD,UAAU,CAACC,aAAjC;AACAjB,IAAAA,QAAQ,CAACR,WAAW,CAAC,IAAD,CAAZ,CAAR;AACAN,IAAAA,KAAK,CAACe,IAAN,CAAW,iCAAX,EAA8C;AACtCC,MAAAA,SAAS,EAAEe,aAAa,CAACf,SADa;AAEtC,eAASc,UAAU,CAACE,KAFkB;AAGtCC,MAAAA,kBAAkB,EAAEF,aAAa,CAACE,kBAHI;AAItChB,MAAAA,QAAQ,EAAEa,UAAU,CAAClB;AAJiB,KAA9C,EAMKM,IANL,CAMUC,QAAQ,IAAI;AACd,UAAIN,UAAU,GAAGiB,UAAU,CAACjB,UAA5B;AACAA,MAAAA,UAAU,GAAG,EACT,GAAGA,UADM;AAET,WAAGM,QAAQ,CAACC;AAFH,OAAb;AAIAjB,MAAAA,QAAQ,CAACU,UAAD,CAAR;AACAC,MAAAA,QAAQ,CAAC;AACLO,QAAAA,IAAI,EAAEjB,cADD;AAELkB,QAAAA,OAAO,EAAE;AACLT,UAAAA,UADK;AAELU,UAAAA,OAAO,EAAE;AAFJ;AAFJ,OAAD,CAAR;AAOH,KApBL,EAqBKG,KArBL,CAqBWC,KAAK,IAAI;AACZb,MAAAA,QAAQ,CAAC;AACLO,QAAAA,IAAI,EAAEjB,cADD;AAELkB,QAAAA,OAAO,EAAE;AACLC,UAAAA,OAAO,EAAE;AADJ;AAFJ,OAAD,CAAR;;AAMA,UAAII,KAAK,CAACR,QAAN,CAAee,MAAf,KAA0B,GAA9B,EAAmC;AAC/BjC,QAAAA,KAAK,CAAC0B,KAAN,CAAYA,KAAK,CAACC,OAAlB;AACH,OAFD,MAEO;AACH3B,QAAAA,KAAK,CAACkC,IAAN,CAAWR,KAAK,CAACR,QAAN,CAAeC,IAA1B;AACH;AACJ,KAjCL;AAkCH,GArCD;AAsCH,CAvCM,C,CA2CP;;AACA,OAAO,MAAMgB,OAAO,GAAG,CAACC,SAAD,EAAYC,UAAZ,EAAwB1B,QAAxB,EAAkC2B,YAAlC,EAAgDC,mBAAhD,KAAwE;AAC3F,SAAO,UAAU1B,QAAV,EAAoB;AACvB,QAAI0B,mBAAmB,IAAIC,MAAM,CAACC,MAAP,CAAcF,mBAAd,EAAmCG,MAAnC,GAA4C,CAAvE,EAA0E;AACtE7B,MAAAA,QAAQ,CAACR,WAAW,CAAC,IAAD,CAAZ,CAAR;AACA,YAAMsC,QAAQ,GAAG,CACb5C,KAAK,CAACe,IAAN,CAAW,8BAAX,EAA2C;AACvC,oBAAYH;AAD2B,OAA3C,CADa,EAIbZ,KAAK,CAACe,IAAN,CAAW,gCAAX,EAA6C;AACzC,oBAAYH;AAD6B,OAA7C,CAJa,CAAjB;;AAQA,UAAIyB,SAAS,KAAK,QAAlB,EAA4B;AACxBO,QAAAA,QAAQ,CAACC,IAAT,CAAc7C,KAAK,CAACe,IAAN,CAAW,8BAAX,EAA2C;AACrD,sBAAYH,QADyC;AAErDI,UAAAA,SAAS,EAAEsB,UAAU,CAACtB;AAF+B,SAA3C,CAAd;AAKA4B,QAAAA,QAAQ,CAACC,IAAT,CAAc7C,KAAK,CAACe,IAAN,CAAW,sBAAX,EAAmC;AAC7C,sBAAYH;AADiC,SAAnC,CAAd;AAGH,OATD,MASO,IAAIyB,SAAS,KAAK,QAAlB,EAA4B;AAC/BO,QAAAA,QAAQ,CAACC,IAAT,CAAc7C,KAAK,CAACe,IAAN,CAAW,gCAAX,EAA6C;AACvD,sBAAYH;AAD2C,SAA7C,CAAd;AAGAgC,QAAAA,QAAQ,CAACC,IAAT,CAAc7C,KAAK,CAACe,IAAN,CAAW,gBAAX,EAA6B;AACvC,sBAAYH;AAD2B,SAA7B,CAAd;AAGAgC,QAAAA,QAAQ,CAACC,IAAT,CAAc7C,KAAK,CAACe,IAAN,CAAW,oBAAX,EAAiC;AAC3C,sBAAYH;AAD+B,SAAjC,CAAd;AAGAgC,QAAAA,QAAQ,CAACC,IAAT,CAAc7C,KAAK,CAACe,IAAN,CAAW,kBAAX,EAA+B;AACzC,sBAAYH;AAD6B,SAA/B,CAAd;AAGAgC,QAAAA,QAAQ,CAACC,IAAT,CAAc7C,KAAK,CAACe,IAAN,CAAW,cAAX,EAA2B;AACrC,sBAAYH;AADyB,SAA3B,CAAd;AAGAgC,QAAAA,QAAQ,CAACC,IAAT,CAAc7C,KAAK,CAACe,IAAN,CAAW,4CAAX,EAAyD;AACnE,sBAAYH;AADuD,SAAzD,CAAd;AAGAgC,QAAAA,QAAQ,CAACC,IAAT,CAAc7C,KAAK,CAACe,IAAN,CAAW,uBAAX,EAAoC;AAC9C,sBAAYH;AADkC,SAApC,CAAd;AAGAgC,QAAAA,QAAQ,CAACC,IAAT,CAAc7C,KAAK,CAACe,IAAN,CAAW,gCAAX,EAA6C;AACvD,sBAAYH;AAD2C,SAA7C,CAAd;AAGAgC,QAAAA,QAAQ,CAACC,IAAT,CAAc7C,KAAK,CAACe,IAAN,CAAW,4BAAX,EAAyC;AACnD,sBAAYH;AADuC,SAAzC,CAAd;AAIAgC,QAAAA,QAAQ,CAACC,IAAT,CAAc7C,KAAK,CAACe,IAAN,CAAW,sBAAX,EAAmC;AAC7C,sBAAYH;AADiC,SAAnC,CAAd;AAGH,OAhCM,MAgCA,IAAIyB,SAAS,KAAK,MAAlB,EAA0B;AAC7BO,QAAAA,QAAQ,CAACC,IAAT,CAAc7C,KAAK,CAACe,IAAN,CAAW,6BAAX,EAA0C;AACpD,sBAAYH,QADwC;AAEpDI,UAAAA,SAAS,EAAEsB,UAAU,CAACtB;AAF8B,SAA1C,CAAd;AAKA4B,QAAAA,QAAQ,CAACC,IAAT,CAAc7C,KAAK,CAACe,IAAN,CAAW,sBAAX,EAAmC;AAC7C,sBAAYH;AADiC,SAAnC,CAAd;AAGH;;AACDP,MAAAA,KAAK,CAACyC,GAAN,CAAUF,QAAV,EACK1B,IADL,CACUC,QAAQ,IAAI;AACd,YAAI4B,cAAc,GAAG,EAArB;AACA,cAAMC,eAAe,GAAG9C,mBAAmB,CAACiB,QAAQ,CAAC,CAAD,CAAR,CAAYC,IAAZ,IAAoB,EAArB,EAAyB,mBAAzB,EAA8C,mBAA9C,EAAmE,KAAnE,EAA0E,KAA1E,EAAiF,IAAjF,CAA3C;AACA,cAAM6B,YAAY,GAAGD,eAAe,CAACE,GAAhB,CAAoB,YAApB,CAArB;AACA,cAAMC,YAAY,GAAGjD,mBAAmB,CAACiB,QAAQ,CAAC,CAAD,CAAR,CAAYC,IAAZ,IAAoB,EAArB,EAAyB,uBAAzB,EAAkD,gBAAlD,EAAoE,KAApE,EAA2E,KAA3E,EAAkF,IAAlF,CAAxC;AACA,cAAMgC,gBAAgB,GAAGD,YAAY,CAACD,GAAb,CAAiB,YAAjB,CAAzB,CALc,CAMd;;AACA,cAAMG,QAAQ,GAAG;AACbJ,UAAAA,YADa;AAEbG,UAAAA;AAFa,SAAjB;AAIA,YAAIE,aAAa,GAAG,EAApB;AACA,YAAIC,aAAa,GAAG,EAApB;AACA,YAAIC,aAAa,GAAG,KAApB;;AACA,YAAInB,SAAS,KAAK,QAAlB,EAA4B;AACxB,gBAAMoB,QAAQ,GAAGtC,QAAQ,CAAC,CAAD,CAAR,CAAYC,IAA7B;AACA2B,UAAAA,cAAc,GAAGU,QAAjB;AACA,gBAAMC,SAAS,GAAGxD,mBAAmB,CAACiB,QAAQ,CAAC,CAAD,CAAR,CAAYC,IAAZ,IAAoB,EAArB,EAAyB,cAAzB,EAAyC,cAAzC,EAAyD,KAAzD,EAAgE,KAAhE,EAAuE,IAAvE,CAArC;AACAkC,UAAAA,aAAa,GAAG;AACZK,YAAAA,MAAM,EAACD,SAAS,CAACR,GAAV,CAAc,YAAd;AADK,WAAhB;AAGAH,UAAAA,cAAc,CAAC,mBAAD,CAAd,GAAsC;AAClC,qBAASU,QAAQ,CAAC,mBAAD,CADiB;AAElC,qBAASA,QAAQ,CAAC,mBAAD;AAFiB,WAAtC;AAIAV,UAAAA,cAAc,CAAC,uBAAD,CAAd,GAA0C;AACtC,qBAASU,QAAQ,CAAC,uBAAD,CADqB;AAEtC,qBAASA,QAAQ,CAAC,gBAAD;AAFqB,WAA1C;AAIAV,UAAAA,cAAc,CAAC,cAAD,CAAd,GAAiC;AAC7B,qBAASU,QAAQ,CAAC,cAAD,CADY;AAE7B,qBAASA,QAAQ,CAAC,cAAD;AAFY,WAAjC;AAKH,SApBD,MAoBO,IAAIpB,SAAS,KAAK,MAAlB,EAA0B;AAC7B,gBAAMqB,SAAS,GAAGxD,mBAAmB,CAACiB,QAAQ,CAAC,CAAD,CAAR,CAAYC,IAAZ,IAAoB,EAArB,EAAyB,cAAzB,EAAyC,cAAzC,EAAyD,KAAzD,EAAgE,KAAhE,EAAuE,IAAvE,CAArC,CAD6B,CAE7B;;AACAkC,UAAAA,aAAa,GAAC;AACVK,YAAAA,MAAM,EAAED,SAAS,CAACR,GAAV,CAAc,YAAd;AADE,WAAd;AAGAH,UAAAA,cAAc,GAAG;AACba,YAAAA,iBAAiB,EAAEpB,mBAAmB,CAACqB,KAApB,KAA8B,CAAC,CAA/B,GAAoCZ,YAAY,CAACN,MAAb,GAAsB,CAAtB,GACnD;AACAM,YAAAA,YAAY,CAAC,CAAD,CAFuC,GAEjC,EAFH,GAEST,mBAHf;AAIbsB,YAAAA,kBAAkB,EAAEvD,iBAAiB,CAACwD,MAJzB;AAKbC,YAAAA,WAAW,EAAEzD,iBAAiB,CAAC0D,aALlB;AAMbC,YAAAA,YAAY,EAAE,EAND;AAObC,YAAAA,SAAS,EAAE,EAPE;AAQbC,YAAAA,YAAY,EAAE,EARD;AASbC,YAAAA,KAAK,EAAE,EATM,CAUb;;AAVa,WAAjB;AAcH,SApBM,MAoBA;AACH;AACA,gBAAMC,YAAY,GAAGpE,mBAAmB,CAACiB,QAAQ,CAAC,CAAD,CAAR,CAAYC,IAAZ,IAAoB,EAArB,EAAyB,oBAAzB,EAA+C,gBAA/C,EAAiE,KAAjE,EAAwE,KAAxE,EAA+E,IAA/E,CAAxC,CAFG,CAGH;;AACA,gBAAMmD,QAAQ,GAAGrE,mBAAmB,CAACiB,QAAQ,CAAC,CAAD,CAAR,CAAYC,IAAZ,IAAoB,EAArB,EAAyB,YAAzB,EAAuC,gBAAvC,EAAyD,KAAzD,EAAgE,KAAhE,EAAuE,IAAvE,CAApC,CAJG,CAKH;;AACA,gBAAMoD,aAAa,GAAGF,YAAY,CAACpB,GAAb,CAAiB,cAAjB,IAAmCoB,YAAY,CAACpB,GAAb,CAAiB,cAAjB,CAAnC,GAAsE,EAA5F,CANG,CAM6F;;AAChGH,UAAAA,cAAc,GAAG;AACb;AACA0B,YAAAA,SAAS,EAAE,CAAC,CAFC;AAGbC,YAAAA,kBAAkB,EAAEF,aAHP;AAGsB;AACnCZ,YAAAA,iBAAiB,EAAEpB,mBAAmB,CAACqB,KAApB,KAA8B,CAAC,CAA/B,GAAoCZ,YAAY,CAACN,MAAb,GAAsB,CAAtB,GACnD;AACAM,YAAAA,YAAY,CAAC,CAAD,CAFuC,GAEjC,EAFH,GAEST,mBANf;AAObsB,YAAAA,kBAAkB,EAAEvD,iBAAiB,CAACwD,MAPzB;AAQbC,YAAAA,WAAW,EAAEzD,iBAAiB,CAAC0D,aARlB;AASbC,YAAAA,YAAY,EAAE,EATD;AAUbC,YAAAA,SAAS,EAAE,EAVE;AAWbC,YAAAA,YAAY,EAAE,EAXD;AAYbC,YAAAA,KAAK,EAAE;AAZM,WAAjB;AAcA,cAAIM,QAAQ,GAAG,IAAf;AACA,cAAIC,iBAAiB,GAAG,IAAxB;AACA,cAAIC,eAAe,GAAG,IAAtB;AACA,cAAIC,gBAAgB,GAAG,IAAvB;AACA,cAAIC,eAAe,GAAGxE,iBAAiB,CAACyE,EAAxC;AACA,gBAAMC,OAAO,GAAG/E,mBAAmB,CAACiB,QAAQ,CAAC,CAAD,CAAR,CAAYC,IAAZ,IAAoB,EAArB,EAAyB,WAAzB,EAAsC,WAAtC,EAAmD,KAAnD,EAA0D,KAA1D,EAAiE,IAAjE,CAAnC;AACA,gBAAMsC,SAAS,GAAGxD,mBAAmB,CAACiB,QAAQ,CAAC,EAAD,CAAR,CAAaC,IAAb,IAAqB,EAAtB,EAA0B,cAA1B,EAA0C,cAA1C,EAA0D,KAA1D,EAAiE,KAAjE,EAAwE,IAAxE,CAArC;AACA,gBAAM8D,cAAc,GAAGhF,mBAAmB,CAACiB,QAAQ,CAAC,EAAD,CAAR,CAAaC,IAAb,IAAqB,EAAtB,EAA0B,gBAA1B,EAA4C,gBAA5C,EAA8D,KAA9D,EAAqE,KAArE,EAA4E,IAA5E,CAA1C;;AAEA,cAAIoD,aAAa,IAAIA,aAAa,CAACW,IAAnC,EAAyC;AACrC,gBAAIX,aAAa,CAACW,IAAd,CAAmB,OAAnB,MAAgC5E,iBAAiB,CAAC6E,GAAtD,EAA2D;AACvDT,cAAAA,QAAQ,GAAG,KAAX;AACA5B,cAAAA,cAAc,CAAC,WAAD,CAAd,GAA8BkC,OAAO,CAAC/B,GAAR,CAAY,cAAZ,IAA8B+B,OAAO,CAAC/B,GAAR,CAAY,cAAZ,CAA9B,GAA4D,EAA1F,CAFuD,CAGvD;AACH;;AACD,gBAAIsB,aAAa,CAACW,IAAd,CAAmB,gBAAnB,MAAyC5E,iBAAiB,CAAC6E,GAA/D,EAAoE;AAChER,cAAAA,iBAAiB,GAAG,KAApB;AACH;;AACD,gBAAIJ,aAAa,CAACW,IAAd,CAAmB,iBAAnB,MAA0C5E,iBAAiB,CAAC6E,GAAhE,EAAqE;AACjEP,cAAAA,eAAe,GAAG,KAAlB;AACAE,cAAAA,eAAe,GAAGP,aAAa,CAACW,IAAd,CAAmB,iBAAnB,CAAlB;AACH;;AACD,gBAAIX,aAAa,CAACW,IAAd,CAAmB,QAAnB,MAAiC5E,iBAAiB,CAAC6E,GAAvD,EAA4D;AACxDN,cAAAA,gBAAgB,GAAG,KAAnB;AACA/B,cAAAA,cAAc,CAAC,YAAD,CAAd,GAA+BwB,QAAQ,CAACrB,GAAT,CAAa,cAAb,IAA+BqB,QAAQ,CAACrB,GAAT,CAAa,cAAb,CAA/B,GAA8D,EAA7F,CAFwD,CAGxD;AACH;AACJ,WAhDE,CAiDH;;;AACAI,UAAAA,aAAa,GAAG;AACZ+B,YAAAA,KAAK,EAAEd,QAAQ,CAACrB,GAAT,CAAa,YAAb,CADK;AAEZoC,YAAAA,aAAa,EAAEhB,YAAY,CAACpB,GAAb,CAAiB,YAAjB,CAFH;AAGZqC,YAAAA,IAAI,EAAEN,OAAO,CAAC/B,GAAR,CAAY,YAAZ,CAHM;AAIZS,YAAAA,MAAM,EAACD,SAAS,CAACR,GAAV,CAAc,YAAd,CAJK;AAKZsC,YAAAA,WAAW,EAACN,cAAc,CAAChC,GAAf,CAAmB,YAAnB,CALA;AAMZ0B,YAAAA,iBANY;AAOZD,YAAAA,QAPY;AAQZE,YAAAA,eARY;AASZC,YAAAA,gBATY;AAUZC,YAAAA,eAVY;AAWZhD,YAAAA,aAAa,EAAE7B,mBAAmB,CAACiB,QAAQ,CAAC,CAAD,CAAR,CAAYC,IAAZ,CAAiB,eAAjB,KAAqC,EAAtC,EAA0C,gBAA1C,EAA4D,gBAA5D,EAA8E,KAA9E,EAAqF,KAArF,EAA4F,IAA5F,CAAnB,CAAqH8B,GAArH,CAAyH,YAAzH,CAXH;AAYZuC,YAAAA,WAAW,EAAER,OAAO,CAAC/B,GAAR,CAAY,cAAZ,IAA8B+B,OAAO,CAAC/B,GAAR,CAAY,cAAZ,CAA9B,GAA4D,EAZ7D;AAaZwC,YAAAA,YAAY,EAAEnB,QAAQ,CAACrB,GAAT,CAAa,cAAb,IAA+BqB,QAAQ,CAACrB,GAAT,CAAa,cAAb,CAA/B,GAA8D,EAbhE,CAcZ;;AAdY,WAAhB;AAgBA,gBAAMyC,UAAU,GAAGzF,mBAAmB,CAACiB,QAAQ,CAAC,CAAD,CAAR,CAAYC,IAAZ,IAAoB,EAArB,EAAyB,cAAzB,EAAyC,cAAzC,EAAyD,KAAzD,EAAgE,KAAhE,EAAuE,IAAvE,CAAtC;AACA,gBAAMwE,SAAS,GAAG1F,mBAAmB,CAACiB,QAAQ,CAAC,CAAD,CAAR,CAAYC,IAAZ,CAAiByE,MAAjB,CAAwBlD,MAAxB,GAA+B,CAA/B,GAAiCxB,QAAQ,CAAC,CAAD,CAAR,CAAYC,IAAZ,CAAiByE,MAAlD,GAAyD,MAAM,EAAhE,EAAoE,aAApE,EAAmF,aAAnF,EAAkG,KAAlG,EAAyG,KAAzG,EAAgH,IAAhH,CAArC;AACA,gBAAMC,UAAU,GAAG5F,mBAAmB,CAACiB,QAAQ,CAAC,CAAD,CAAR,CAAYC,IAAZ,IAAoB,EAArB,EAAyB,oBAAzB,EAA+C,oBAA/C,EAAqE,KAArE,EAA4E,KAA5E,EAAmF,IAAnF,CAAtC;AACA,gBAAM2E,YAAY,GAAG7F,mBAAmB,CAACiB,QAAQ,CAAC,CAAD,CAAR,CAAYC,IAAZ,IAAoB,EAArB,EAAyB,oBAAzB,EAA+C,gBAA/C,EAAiE,KAAjE,EAAwE,KAAxE,EAA+E,IAA/E,CAAxC;AACA,gBAAM4E,UAAU,GAAG9F,mBAAmB,CAACiB,QAAQ,CAAC,EAAD,CAAR,CAAaC,IAAb,IAAqB,EAAtB,EAA0B,kBAA1B,EAA8C,kBAA9C,EAAkE,KAAlE,EAAyE,KAAzE,EAAgF,IAAhF,CAAtC;AACAmC,UAAAA,aAAa,GAAG;AACZ0C,YAAAA,OAAO,EAAED,UAAU,CAAC9C,GAAX,CAAe,YAAf,CADG;AAEZgD,YAAAA,OAAO,EAAEP,UAAU,CAACzC,GAAX,CAAe,YAAf,CAFG;AAGZiD,YAAAA,MAAM,EAAEP,SAAS,CAAC1C,GAAV,CAAc,YAAd,CAHI;AAIZkD,YAAAA,kBAAkB,EAAEN,UAAU,CAAC5C,GAAX,CAAe,YAAf,CAJR;AAKZmD,YAAAA,aAAa,EAAEN,YAAY,CAAC7C,GAAb,CAAiB,YAAjB;AALH,WAAhB;AAQAM,UAAAA,aAAa,GAAG,IAAhB;AACH;;AACD1C,QAAAA,QAAQ,CAAC;AACLO,UAAAA,IAAI,EAAEjB,cADD;AAELkB,UAAAA,OAAO,EAAE;AACL;AACA;AACA;AACAgF,YAAAA,SAAS,EAAE,IAJN;AAKL9C,YAAAA,aALK;AAMLnB,YAAAA,SAAS,EAAEA,SANN;AAOLkE,YAAAA,UAAU,EAAE,UAPP;AAQLxD,YAAAA,cARK;AASLR,YAAAA,YATK;AAULc,YAAAA,QAVK;AAWLC,YAAAA,aAXK;AAYLC,YAAAA,aAZK;AAaLhC,YAAAA,OAAO,EAAE;AAbJ;AAFJ,SAAD,CAAR;AAkBH,OA1JL,EA2JKG,KA3JL,CA2JWC,KAAK,IAAI;AACZb,QAAAA,QAAQ,CAAC;AACLO,UAAAA,IAAI,EAAEjB,cADD;AAELkB,UAAAA,OAAO,EAAE;AACLC,YAAAA,OAAO,EAAE;AADJ;AAFJ,SAAD,CAAR;;AAMA,YAAII,KAAK,CAACR,QAAN,CAAee,MAAf,KAA0B,GAA9B,EAAmC;AAC/BjC,UAAAA,KAAK,CAAC0B,KAAN,CAAYA,KAAK,CAACC,OAAlB;AACH,SAFD,MAEO;AACH3B,UAAAA,KAAK,CAACkC,IAAN,CAAWR,KAAK,CAACR,QAAN,CAAeC,IAA1B;AACH;AACJ,OAvKL;AAwKH,KArOD,MAqOO;AACHnB,MAAAA,KAAK,CAACkC,IAAN,CAAW1B,IAAI,CAAC+F,aAAL,CAAmB;AAC1BC,QAAAA,EAAE,EAAE;AADsB,OAAnB,CAAX;AAGH;AACJ,GA3OD;AA4OH,CA7OM,C,CA+OP;;AACA,OAAO,MAAMC,YAAY,GAAG,CAACrE,SAAD,EAAYJ,kBAAZ,EAAgCrB,QAAhC,EAA0C2B,YAA1C,KAA2D;AACnF,SAAQzB,QAAD,IAAc;AACjBA,IAAAA,QAAQ,CAACR,WAAW,CAAC,IAAD,CAAZ,CAAR;AACA,UAAMsC,QAAQ,GAAG,CACb5C,KAAK,CAACe,IAAN,CAAW,cAAX,EAA2B;AACvB,kBAAYH;AADW,KAA3B,CADa,EAIbZ,KAAK,CAACe,IAAN,CAAW,gCAAX,EAA6C;AACzC,kBAAYH;AAD6B,KAA7C,CAJa,EAObZ,KAAK,CAACe,IAAN,CAAW,gBAAX,EAA6B;AACzB,kBAAYH;AADa,KAA7B,CAPa,EAUbZ,KAAK,CAACe,IAAN,CAAW,uBAAX,EAAoC;AAChC,kBAAYH;AADoB,KAApC,CAVa,EAabZ,KAAK,CAACe,IAAN,CAAW,sBAAX,EAAmC;AAC/B,kBAAYH;AADmB,KAAnC,CAba,CAAjB;;AAkBA,QAAIyB,SAAS,KAAK,QAAlB,EAA4B;AACxBO,MAAAA,QAAQ,CAACC,IAAT,CAAc7C,KAAK,CAACe,IAAN,CAAW,mCAAX,EAAgD;AAC1DkB,QAAAA,kBAAkB,EAAEA,kBADsC;AAE1D,oBAAYrB;AAF8C,OAAhD,CAAd;AAIH;;AACDP,IAAAA,KAAK,CAACyC,GAAN,CAAUF,QAAV,EACK1B,IADL,CACUC,QAAQ,IAAI;AACd;AACA,YAAMmD,YAAY,GAAGpE,mBAAmB,CAACiB,QAAQ,CAAC,CAAD,CAAR,CAAYC,IAAZ,IAAoB,EAArB,EAAyB,oBAAzB,EAA+C,gBAA/C,EAAiE,KAAjE,EAAwE,KAAxE,EAA+E,IAA/E,CAAxC;AACA,YAAMmD,QAAQ,GAAGrE,mBAAmB,CAACiB,QAAQ,CAAC,CAAD,CAAR,CAAYC,IAAZ,IAAoB,EAArB,EAAyB,YAAzB,EAAuC,gBAAvC,EAAyD,KAAzD,EAAgE,KAAhE,EAAuE,IAAvE,CAApC;AACA,YAAM6D,OAAO,GAAG/E,mBAAmB,CAACiB,QAAQ,CAAC,CAAD,CAAR,CAAYC,IAAZ,IAAoB,EAArB,EAAyB,WAAzB,EAAsC,WAAtC,EAAmD,KAAnD,EAA0D,KAA1D,EAAiE,IAAjE,CAAnC;AACA,YAAM8D,cAAc,GAAGhF,mBAAmB,CAACiB,QAAQ,CAAC,CAAD,CAAR,CAAYC,IAAZ,IAAoB,EAArB,EAAyB,gBAAzB,EAA2C,gBAA3C,EAA6D,KAA7D,EAAoE,KAApE,EAA2E,IAA3E,CAA1C,CALc,CAOd;AACA;AACA;;AACA,UAAI2B,cAAc,GAAG,EAArB;AACA,UAAI4B,QAAQ,GAAG,IAAf;AACA,UAAIC,iBAAiB,GAAG,IAAxB;AACA,UAAIC,eAAe,GAAG,IAAtB;AACA,UAAIC,gBAAgB,GAAG,IAAvB;AACA,UAAIC,eAAe,GAAGxE,iBAAiB,CAACoG,EAAxC;;AACA,UAAItE,SAAS,KAAK,QAAlB,EAA4B;AACxB,cAAMuE,iBAAiB,GAAGzF,QAAQ,CAAC,CAAD,CAAR,CAAYC,IAAZ,CAAiByF,aAAjB,CAA+B,CAA/B,CAA1B;AACA9D,QAAAA,cAAc,GAAG6D,iBAAjB;AACA,cAAMlC,kBAAkB,GAAGkC,iBAAiB,CAAC,oBAAD,CAA5C;AACA,cAAMpC,aAAa,GAAGF,YAAY,CAACpB,GAAb,CAAiB,YAAjB,EAA+B4D,MAA/B,CAAsC,UAAU3B,IAAV,EAAgB;AACxE,iBAAOA,IAAI,CAACtB,KAAL,KAAea,kBAAtB;AACH,SAFqB,CAAtB;AAGA3B,QAAAA,cAAc,CAAC,gBAAD,CAAd,GAAmC;AAC/Bc,UAAAA,KAAK,EAAE+C,iBAAiB,CAAC,gBAAD,CADO;AAE/BG,UAAAA,KAAK,EAAEH,iBAAiB,CAAC,gBAAD;AAFO,SAAnC;AAKA7D,QAAAA,cAAc,CAAC,gBAAD,CAAd,GAAmC;AAC/B,mBAAS6D,iBAAiB,CAAC,gBAAD,CADK;AAE/B,mBAASA,iBAAiB,CAAC,gBAAD;AAFK,SAAnC;AAIA7D,QAAAA,cAAc,CAAC,oBAAD,CAAd,GAAuC;AACnCc,UAAAA,KAAK,EAAEa,kBAD4B;AAEnCqC,UAAAA,KAAK,EAAEH,iBAAiB,CAAC,gBAAD;AAFW,SAAvC;;AAIA,YAAIpC,aAAa,IAAIA,aAAa,CAAC,CAAD,CAAb,CAAiBW,IAAtC,EAA4C;AACxC,gBAAM6B,qBAAqB,GAAGxC,aAAa,CAAC,CAAD,CAAb,CAAiBW,IAA/C;;AACA,cAAI6B,qBAAqB,CAAC,eAAD,CAArB,KAA2CzG,iBAAiB,CAAC6E,GAAjE,EAAsE;AAClET,YAAAA,QAAQ,GAAG,KAAX;AACA5B,YAAAA,cAAc,CAAC,WAAD,CAAd,GAA8B;AAC1Bc,cAAAA,KAAK,EAAE+C,iBAAiB,CAAC,WAAD,CADE;AAE1BG,cAAAA,KAAK,EAAEH,iBAAiB,CAAC,WAAD;AAFE,aAA9B;AAIH;;AACD,cAAII,qBAAqB,CAAC,mBAAD,CAArB,KAA+CzG,iBAAiB,CAAC6E,GAArE,EAA0E;AACtER,YAAAA,iBAAiB,GAAG,KAApB;AACH;;AAED,cAAIoC,qBAAqB,CAAC,qBAAD,CAArB,KAAiDzG,iBAAiB,CAAC6E,GAAnE,IAA0E4B,qBAAqB,CAAC,gBAAD,CAArB,KAA4CzG,iBAAiB,CAAC6E,GAA5I,EAAiJ;AAC7I,kBAAM6B,eAAe,GAAG9F,QAAQ,CAAC,CAAD,CAAR,CAAYC,IAAZ,CAAiB8F,uBAAzC;;AACA,gBAAID,eAAe,CAACtE,MAAhB,GAAyB,CAA7B,EAAgC;AAC5B,oBAAMwE,kBAAkB,GAAGF,eAAe,CAACH,MAAhB,CAAuB,UAAU3B,IAAV,EAAgB;AAC9D,uBAAOA,IAAI,CAACiC,cAAL,KAAwB7G,iBAAiB,CAAC6E,GAAjD;AACH,eAF0B,CAA3B;;AAGA,kBAAI+B,kBAAkB,CAACxE,MAAnB,GAA4B,CAAhC,EAAmC;AAC/BI,gBAAAA,cAAc,CAAC,iBAAD,CAAd,GAAoCoE,kBAAkB,CAAC,CAAD,CAAlB,CAAsBE,eAA1D;AACAtE,gBAAAA,cAAc,CAAC,qBAAD,CAAd,GAAwCoE,kBAAkB,CAAC,CAAD,CAAlB,CAAsBG,mBAA9D;AAAkF;AAClFvE,gBAAAA,cAAc,CAAC,YAAD,CAAd,GAA+B;AAC3Bc,kBAAAA,KAAK,EAAEsD,kBAAkB,CAAC,CAAD,CAAlB,CAAsBI,UADF;AAE3BR,kBAAAA,KAAK,EAAEI,kBAAkB,CAAC,CAAD,CAAlB,CAAsB,gBAAtB;AAFoB,iBAA/B;AAIH,eAPD,MAOO;AACHpE,gBAAAA,cAAc,CAAC,iBAAD,CAAd,GAAoCkE,eAAe,CAAC,CAAD,CAAf,CAAmBI,eAAvD;AACAtE,gBAAAA,cAAc,CAAC,qBAAD,CAAd,GAAwCkE,eAAe,CAAC,CAAD,CAAf,CAAmBK,mBAA3D;AACAvE,gBAAAA,cAAc,CAAC,YAAD,CAAd,GAA+B;AAC3Bc,kBAAAA,KAAK,EAAEoD,eAAe,CAAC,CAAD,CAAf,CAAmBM,UADC;AAE3BR,kBAAAA,KAAK,EAAEE,eAAe,CAAC,CAAD,CAAf,CAAmB,gBAAnB;AAFoB,iBAA/B;AAIH;AACJ;AACJ,WAtBD,MAsBO;AACHlE,YAAAA,cAAc,CAAC,iBAAD,CAAd,GAAoC,EAApC;AACAA,YAAAA,cAAc,CAAC,YAAD,CAAd,GAA+B,CAAC,CAAhC;AACH;;AACD,cAAIiE,qBAAqB,CAAC,qBAAD,CAArB,KAAiDzG,iBAAiB,CAAC6E,GAAvE,EAA4E;AACxEP,YAAAA,eAAe,GAAG,KAAlB;AACAE,YAAAA,eAAe,GAAGiC,qBAAqB,CAAC,qBAAD,CAAvC;AACH;;AACD,cAAIA,qBAAqB,CAAC,gBAAD,CAArB,KAA4CzG,iBAAiB,CAAC6E,GAAlE,EAAuE;AACnEN,YAAAA,gBAAgB,GAAG,KAAnB;AACH;AACJ;AACJ,OAnED,MAmEO;AACH,cAAMN,aAAa,GAAGF,YAAY,CAACpB,GAAb,CAAiB,cAAjB,IAAmCoB,YAAY,CAACpB,GAAb,CAAiB,cAAjB,EAAiCiC,IAApE,GAA2E,EAAjG,CADG,CAEH;;AACA,YAAIX,aAAa,CAAC,eAAD,CAAb,KAAmCjE,iBAAiB,CAAC6E,GAAzD,EAA8D;AAC1DT,UAAAA,QAAQ,GAAG,KAAX;AACA5B,UAAAA,cAAc,CAAC,WAAD,CAAd,GAA8BkC,OAAO,CAAC/B,GAAR,CAAY,cAAZ,IAA8B+B,OAAO,CAAC/B,GAAR,CAAY,cAAZ,CAA9B,GAA4D,EAA1F,CAF0D,CAEoC;AACjG;;AACD,YAAIsB,aAAa,CAAC,mBAAD,CAAb,KAAuCjE,iBAAiB,CAAC6E,GAA7D,EAAkE;AAC9DR,UAAAA,iBAAiB,GAAG,KAApB;AACH;;AACD,YAAIJ,aAAa,CAAC,sBAAD,CAAb,KAA0CjE,iBAAiB,CAAC6E,GAAhE,EAAqE;AACjEP,UAAAA,eAAe,GAAG,KAAlB;AACAE,UAAAA,eAAe,GAAGP,aAAa,CAAC,iBAAD,CAA/B;AACH;;AACD,YAAIA,aAAa,CAAC,gBAAD,CAAb,KAAoCjE,iBAAiB,CAAC6E,GAA1D,EAA+D;AAC3DN,UAAAA,gBAAgB,GAAG,KAAnB,CAD2D,CAE3D;AACH;;AACD/B,QAAAA,cAAc,CAAC,oBAAD,CAAd,GAAuCuB,YAAY,CAACpB,GAAb,CAAiB,cAAjB,CAAvC,CAlBG,CAkBsE;;AACzEH,QAAAA,cAAc,CAAC,iBAAD,CAAd,GAAkC,EAAlC;AACAA,QAAAA,cAAc,CAAC,WAAD,CAAd,GAA4B,EAA5B;AACH;;AACDjC,MAAAA,QAAQ,CAAC;AACLO,QAAAA,IAAI,EAAEjB,cADD;AAELkB,QAAAA,OAAO,EAAE;AACLkG,UAAAA,cAAc,EAAE,IADX;AAELC,UAAAA,gBAAgB,EAAE,IAFb;AAGLpF,UAAAA,SAAS,EAAEA,SAHN;AAILkE,UAAAA,UAAU,EAAE,eAJP;AAKLxD,UAAAA,cALK;AAMLO,UAAAA,aAAa,EAAE;AACXiC,YAAAA,IAAI,EAAEN,OAAO,CAAC/B,GAAR,CAAY,YAAZ,CADK;AAEXmC,YAAAA,KAAK,EAAEd,QAAQ,CAACrB,GAAT,CAAa,YAAb,CAFI;AAGXsC,YAAAA,WAAW,EAACN,cAAc,CAAChC,GAAf,CAAmB,YAAnB,CAHD;AAIXoC,YAAAA,aAAa,EAAEhB,YAAY,CAACpB,GAAb,CAAiB,YAAjB,CAJJ;AAKXyB,YAAAA,QALW;AAMXC,YAAAA,iBANW;AAOXC,YAAAA,eAPW;AAQXC,YAAAA,gBARW;AASXC,YAAAA,eATW;AAUXhD,YAAAA,aAAa,EAAE7B,mBAAmB,CAACiB,QAAQ,CAAC,CAAD,CAAR,CAAYC,IAAZ,CAAiB,eAAjB,KAAqC,EAAtC,EAA0C,gBAA1C,EAA4D,gBAA5D,EAA8E,KAA9E,EAAqF,KAArF,EAA4F,IAA5F,CAAnB,CAAqH8B,GAArH,CAAyH,YAAzH,CAVJ;AAWXuC,YAAAA,WAAW,EAAER,OAAO,CAAC/B,GAAR,CAAY,cAAZ,IAA8B+B,OAAO,CAAC/B,GAAR,CAAY,cAAZ,CAA9B,GAA4D,EAX9D;AAYXwC,YAAAA,YAAY,EAAEnB,QAAQ,CAACrB,GAAT,CAAa,cAAb,IAA+BqB,QAAQ,CAACrB,GAAT,CAAa,cAAb,CAA/B,GAA8D;AAZjE,WANV;AAoBLX,UAAAA,YApBK;AAqBLhB,UAAAA,OAAO,EAAE;AArBJ;AAFJ,OAAD,CAAR;AA0BH,KApIL,EAqIKG,KArIL,CAqIWC,KAAK,IAAI;AACZb,MAAAA,QAAQ,CAAC;AACLO,QAAAA,IAAI,EAAEjB,cADD;AAELkB,QAAAA,OAAO,EAAE;AACLC,UAAAA,OAAO,EAAE;AADJ;AAFJ,OAAD,CAAR;;AAMA,UAAII,KAAK,CAACR,QAAN,CAAee,MAAf,KAA0B,GAA9B,EAAmC;AAC/BjC,QAAAA,KAAK,CAAC0B,KAAN,CAAYA,KAAK,CAACC,OAAlB;AACH,OAFD,MAEO;AACH3B,QAAAA,KAAK,CAACkC,IAAN,CAAWR,KAAK,CAACR,QAAN,CAAeC,IAA1B;AACH;AACJ,KAjJL;AAkJH,GA5KD;AA6KH,CA9KM,C,CAgLP;;AACA,OAAO,MAAMsG,cAAc,GAAG,CAACrF,SAAD,EAAYsF,SAAZ,EAAuB/G,QAAvB,EAAiC2B,YAAjC,KAAkD;AAC5E,SAAQzB,QAAD,IAAc;AACjBA,IAAAA,QAAQ,CAACR,WAAW,CAAC,IAAD,CAAZ,CAAR;AACA,UAAMsC,QAAQ,GAAG,CACb5C,KAAK,CAACe,IAAN,CAAW,uBAAX,EAAoC;AAChC,kBAAYH;AADoB,KAApC,CADa,EAIbZ,KAAK,CAACe,IAAN,CAAW,gBAAX,EAA6B;AACzB,kBAAYH;AADa,KAA7B,CAJa,CAAjB;;AAQA,QAAIyB,SAAS,KAAK,QAAlB,EAA4B;AACxBO,MAAAA,QAAQ,CAACC,IAAT,CAAc7C,KAAK,CAACe,IAAN,CAAW,6CAAX,EAA0D;AACpEuG,QAAAA,mBAAmB,EAAEK,SAAS,CAAC,qBAAD,CADsC;AAEpE,oBAAY/G;AAFwD,OAA1D,CAAd;AAIH;;AACDP,IAAAA,KAAK,CAACyC,GAAN,CAAUF,QAAV,EACK1B,IADL,CACUC,QAAQ,IAAI;AACd,UAAI4B,cAAc,GAAG,EAArB,CADc,CAEd;;AACA,YAAMwB,QAAQ,GAAGrE,mBAAmB,CAACiB,QAAQ,CAAC,CAAD,CAAR,CAAYC,IAAZ,IAAoB,EAArB,EAAyB,YAAzB,EAAuC,gBAAvC,EAAyD,KAAzD,EAAgE,KAAhE,EAAuE,IAAvE,CAApC;;AACA,UAAIiB,SAAS,KAAK,QAAlB,EAA4B;AACxB,cAAM4E,eAAe,GAAG9F,QAAQ,CAAC,CAAD,CAAR,CAAYC,IAApC;AACA2B,QAAAA,cAAc,GAAG;AACbuE,UAAAA,mBAAmB,EAAEK,SAAS,CAAC,qBAAD,CADjB;AAEb1F,UAAAA,kBAAkB,EAAE0F,SAAS,CAAC,oBAAD,CAFhB;AAGbJ,UAAAA,UAAU,EAAE;AACR,qBAASN,eAAe,CAAC,gBAAD,CADhB;AAER,qBAASA,eAAe,CAAC,YAAD;AAFhB,WAHC;AAObI,UAAAA,eAAe,EAAEJ,eAAe,CAAC,iBAAD,CAPnB;AAQbG,UAAAA,cAAc,EAAEH,eAAe,CAAC,gBAAD;AARlB,SAAjB;AAUH,OAZD,MAYO;AACHlE,QAAAA,cAAc,GAAG;AACbd,UAAAA,kBAAkB,EAAE0F,SAAS,CAAC,oBAAD,CADhB;AAEbJ,UAAAA,UAAU,EAAEhD,QAAQ,CAACrB,GAAT,CAAa,cAAb,IAA+BqB,QAAQ,CAACrB,GAAT,CAAa,cAAb,CAA/B,GAA8D,EAF7D,CAEgE;;AAFhE,SAAjB;AAIH;;AAEDpC,MAAAA,QAAQ,CAAC;AACLO,QAAAA,IAAI,EAAEjB,cADD;AAELkB,QAAAA,OAAO,EAAE;AACLkG,UAAAA,cAAc,EAAE,IADX;AAELC,UAAAA,gBAAgB,EAAE,KAFb;AAGLpF,UAAAA,SAAS,EAAEA,SAHN;AAILkE,UAAAA,UAAU,EAAE,iBAJP;AAKLjD,UAAAA,aAAa,EAAE;AACX+B,YAAAA,KAAK,EAAEd,QAAQ,CAACrB,GAAT,CAAa,YAAb,CADI;AAEXwC,YAAAA,YAAY,EAAEnB,QAAQ,CAACrB,GAAT,CAAa,cAAb,IAA+BqB,QAAQ,CAACrB,GAAT,CAAa,cAAb,CAA/B,GAA8D;AAFjE,WALV;AASLH,UAAAA,cATK;AAULR,UAAAA,YAVK;AAWLhB,UAAAA,OAAO,EAAE;AAXJ;AAFJ,OAAD,CAAR;AAgBH,KAxCL,EAyCKG,KAzCL,CAyCWC,KAAK,IAAI;AACZb,MAAAA,QAAQ,CAAC;AACLO,QAAAA,IAAI,EAAEjB,cADD;AAELkB,QAAAA,OAAO,EAAE;AACLC,UAAAA,OAAO,EAAE;AADJ;AAFJ,OAAD,CAAR;;AAMA,UAAII,KAAK,CAACR,QAAN,CAAee,MAAf,KAA0B,GAA9B,EAAmC;AAC/BjC,QAAAA,KAAK,CAAC0B,KAAN,CAAYA,KAAK,CAACC,OAAlB;AACH,OAFD,MAEO;AACH3B,QAAAA,KAAK,CAACkC,IAAN,CAAWR,KAAK,CAACR,QAAN,CAAeC,IAA1B;AACH;AACJ,KArDL;AAsDH,GAtED;AAuEH,CAxEM,C,CA0EP;;AACA,OAAO,MAAMwG,yBAAyB,GAAG,CAACvF,SAAD,EAAYsF,SAAZ,EAAuB/G,QAAvB,EAAiC2B,YAAjC,KAAkD;AACvF,SAAQzB,QAAD,IAAc;AACjBA,IAAAA,QAAQ,CAACR,WAAW,CAAC,IAAD,CAAZ,CAAR;AACA,QAAIuH,UAAU,GAAG,EAAjB;AACA,QAAIC,IAAI,GAAG,EAAX;;AACA,QAAIzF,SAAS,KAAK,QAAlB,EAA4B;AACxByF,MAAAA,IAAI,GAAG,+BAAP;AACAD,MAAAA,UAAU,GAAG;AACT5G,QAAAA,QAAQ,EAAEL,QADD;AAETmH,QAAAA,qBAAqB,EAAEJ,SAAS,CAAC,uBAAD;AAFvB,OAAb;AAIH,KAND,MAMO;AACHG,MAAAA,IAAI,GAAG,kCAAP;AACAD,MAAAA,UAAU,GAAG;AACT5G,QAAAA,QAAQ,EAAEL,QADD;AAETqB,QAAAA,kBAAkB,EAAE0F,SAAS,CAAC,oBAAD;AAFpB,OAAb;AAIH;;AACD3H,IAAAA,KAAK,CAACe,IAAN,CAAW,gBAAgB+G,IAA3B,EAAiCD,UAAjC,EACK3G,IADL,CACUC,QAAQ,IAAI;AACd,UAAI4B,cAAc,GAAG,EAArB;;AACA,UAAIV,SAAS,KAAK,QAAlB,EAA4B;AACxBU,QAAAA,cAAc,GAAG,EACb,GAAG5B,QAAQ,CAACC;AADC,SAAjB;AAGH,OAJD,MAIO;AACH2B,QAAAA,cAAc,GAAG;AACbd,UAAAA,kBAAkB,EAAE0F,SAAS,CAAC,oBAAD;AADhB,SAAjB;AAGH;;AACD7G,MAAAA,QAAQ,CAAC;AACLO,QAAAA,IAAI,EAAEjB,cADD;AAELkB,QAAAA,OAAO,EAAE;AACLkG,UAAAA,cAAc,EAAE,IADX;AAELC,UAAAA,gBAAgB,EAAE,KAFb;AAGLpF,UAAAA,SAAS,EAAEA,SAHN;AAILkE,UAAAA,UAAU,EAAE,mBAJP;AAKLxD,UAAAA,cALK;AAMLR,UAAAA,YANK;AAOLhB,UAAAA,OAAO,EAAE;AAPJ;AAFJ,OAAD,CAAR;AAYH,KAxBL,EAyBKG,KAzBL,CAyBWC,KAAK,IAAI;AACZb,MAAAA,QAAQ,CAAC;AACLO,QAAAA,IAAI,EAAEjB,cADD;AAELkB,QAAAA,OAAO,EAAE;AACLC,UAAAA,OAAO,EAAE;AADJ;AAFJ,OAAD,CAAR;;AAMA,UAAII,KAAK,CAACR,QAAN,CAAee,MAAf,KAA0B,GAA9B,EAAmC;AAC/BjC,QAAAA,KAAK,CAAC0B,KAAN,CAAYA,KAAK,CAACC,OAAlB;AACH,OAFD,MAEO;AACH3B,QAAAA,KAAK,CAACkC,IAAN,CAAWR,KAAK,CAACR,QAAN,CAAeC,IAA1B;AACH;AACJ,KArCL;AAsCH,GAvDD;AAwDH,CAzDM;AA2DP,OAAO,MAAM4G,gBAAgB,GAAG,CAACrH,QAAD,EAAWsH,GAAX,EAAgBC,GAAhB,EAAqB3B,UAArB,EAAiC3F,QAAjC,EAA2C2B,YAA3C,KAA4D;AACxF,SAAQzB,QAAD,IAAc;AACjB,UAAMgB,UAAU,GAAG;AACfqG,MAAAA,UAAU,EAAExH,QADG;AAEf,kBAAYC;AAFG,KAAnB;AAIAE,IAAAA,QAAQ,CAACR,WAAW,CAAC,IAAD,CAAZ,CAAR;AACAN,IAAAA,KAAK,CAACe,IAAN,CAAW,gBAAgBkH,GAA3B,EAAgCnG,UAAhC,EACKZ,IADL,CACUC,QAAQ,IAAI;AACd,YAAMiH,gBAAgB,GAAGlI,mBAAmB,CAACiB,QAAQ,CAACC,IAAV,EAAgB8G,GAAG,KAAK,SAAR,GAAoB,cAApB,GAAqCA,GAAG,KAAK,QAAR,GAAmB,aAAnB,GAAmCA,GAAG,IAAI,oBAAP,GAA6B,oBAA7B,GAAoDA,GAAG,IAAI,SAAP,GAAkB,kBAAlB,GAAuC,oBAAnL,EACxCA,GAAG,KAAK,SAAR,GAAoB,cAApB,GAAqCA,GAAG,KAAK,QAAR,GAAmB,aAAnB,GAAoCA,GAAG,IAAI,oBAAP,GAA8B,oBAA9B,GAAuDA,GAAG,IAAI,SAAP,GAAmB,kBAAnB,GAAwC,gBADhI,EACkJ,KADlJ,EACyJ,KADzJ,EACgK,IADhK,CAA5C;AAEApH,MAAAA,QAAQ,CAAC;AACLO,QAAAA,IAAI,EAAEjB,cADD;AAELkB,QAAAA,OAAO,EAAE;AACLkG,UAAAA,cAAc,EAAE,IADX;AAELC,UAAAA,gBAAgB,EAAE,KAFb;AAGLlE,UAAAA,aAAa,EAAE;AACX,aAAC2E,GAAD,GAAOE,gBAAgB,CAAClF,GAAjB,CAAqB,YAArB;AADI,WAHV;AAMLqD,UAAAA,UAAU,EAAEA,UANP;AAOLxD,UAAAA,cAAc,EAAE;AACZsF,YAAAA,aAAa,EAAE;AADH,WAPX;AAULhG,UAAAA,SAAS,EAAE,QAVN;AAWLE,UAAAA,YAXK;AAYLhB,UAAAA,OAAO,EAAE;AAZJ;AAFJ,OAAD,CAAR;AAiBH,KArBL,EAsBKG,KAtBL,CAsBWC,KAAK,IAAI;AACZb,MAAAA,QAAQ,CAAC;AACLO,QAAAA,IAAI,EAAEjB,cADD;AAELkB,QAAAA,OAAO,EAAE;AACLC,UAAAA,OAAO,EAAE;AADJ;AAFJ,OAAD,CAAR;;AAMA,UAAII,KAAK,CAACR,QAAN,CAAee,MAAf,KAA0B,GAA9B,EAAmC;AAC/BjC,QAAAA,KAAK,CAACqI,IAAN,CAAW3G,KAAK,CAACR,QAAN,CAAeC,IAA1B;AACH,OAFD,MAEO;AACHnB,QAAAA,KAAK,CAAC0B,KAAN,CAAYA,KAAK,CAACC,OAAlB;AACH;AACJ,KAlCL;AAmCH,GAzCD;AA0CH,CA3CM,C,CA6CP;;AACA,OAAO,MAAM2G,UAAU,GAAG,CAACZ,SAAD,EAAY/G,QAAZ,EAAsB2B,YAAtB,KAAuC;AAC7D,SAAQzB,QAAD,IAAc;AACjBA,IAAAA,QAAQ,CAACR,WAAW,CAAC,IAAD,CAAZ,CAAR;AACAN,IAAAA,KAAK,CAACe,IAAN,CAAW,2BAAX,EAAwC;AAChCE,MAAAA,QAAQ,EAAEL,QADsB;AAEhCoB,MAAAA,KAAK,EAAE;AAFyB,KAAxC,EAIKd,IAJL,CAIUC,QAAQ,IAAI;AACd,YAAMqH,YAAY,GAAGrH,QAAQ,CAACC,IAA9B;AACA,YAAMqH,aAAa,GAAGvI,mBAAmB,CAACsI,YAAY,CAAC,YAAD,CAAb,EAA6B,WAA7B,EAA0C,WAA1C,EAAuD,KAAvD,EAA8D,KAA9D,EAAqE,KAArE,CAAzC;AACA,YAAMxF,eAAe,GAAG9C,mBAAmB,CAACsI,YAAY,CAAC,cAAD,CAAb,EAC3C,mBAD2C,EACtB,mBADsB,EACD,YADC,EACa,KADb,EACoB,IADpB,CAA3C;AAGA1H,MAAAA,QAAQ,CAAC;AACLO,QAAAA,IAAI,EAAEjB,cADD;AAELkB,QAAAA,OAAO,EAAE;AACLkG,UAAAA,cAAc,EAAE,IADX;AAELC,UAAAA,gBAAgB,EAAE,KAFb;AAGLpF,UAAAA,SAAS,EAAE,QAHN;AAILkE,UAAAA,UAAU,EAAE,aAJP;AAKLmC,UAAAA,WAAW,EAAE;AACTC,YAAAA,SAAS,EAAEH,YAAY,CAAC,WAAD,CADd;AAETI,YAAAA,SAAS,EAAEJ,YAAY,CAAC,WAAD,CAFd;AAGTvF,YAAAA,YAAY,EAAED,eAAe,CAACE,GAAhB,CAAoB,YAApB,CAHL;AAIT2F,YAAAA,UAAU,EAAEJ,aAAa,CAACvF,GAAd,CAAkB,YAAlB,CAJH;AAKT4F,YAAAA,oBAAoB,EAAEN,YAAY,CAAC,sBAAD;AALzB,WALR;AAYLO,UAAAA,aAAa,EAAE,IAZV;AAaLhG,UAAAA,cAAc,EAAE;AACZa,YAAAA,iBAAiB,EAAEZ,eAAe,CAACE,GAAhB,CAAoB,YAApB,KAAqCF,eAAe,CAACE,GAAhB,CAAoB,YAApB,EAAkCP,MAAlC,GAA2C,CAAhF,GAAoFK,eAAe,CAACE,GAAhB,CAAoB,YAApB,EAAkC,CAAlC,CAApF,GAA2H,EADlI;AACsI;AAClJlC,YAAAA,SAAS,EAAEyH,aAAa,CAACvF,GAAd,CAAkB,YAAlB,KAAmCuF,aAAa,CAACvF,GAAd,CAAkB,YAAlB,EAAgCP,MAAhC,GAAyC,CAA5E,GAAgF8F,aAAa,CAACvF,GAAd,CAAkB,YAAlB,EAAgC,CAAhC,CAAhF,GAAqH,EAFpH;AAEwH;AACpIjB,YAAAA,kBAAkB,EAAE0F,SAAS,CAAC,oBAAD;AAHjB,WAbX;AAkBLpF,UAAAA,YAlBK;AAmBLhB,UAAAA,OAAO,EAAE;AAnBJ;AAFJ,OAAD,CAAR;AAwBH,KAlCL,EAmCKG,KAnCL,CAmCWC,KAAK,IAAI;AACZb,MAAAA,QAAQ,CAAC;AACLO,QAAAA,IAAI,EAAEjB,cADD;AAELkB,QAAAA,OAAO,EAAE;AACLC,UAAAA,OAAO,EAAE;AADJ;AAFJ,OAAD,CAAR;;AAMA,UAAII,KAAK,CAACR,QAAN,CAAee,MAAf,KAA0B,GAA9B,EAAmC;AAC/BjC,QAAAA,KAAK,CAAC0B,KAAN,CAAYA,KAAK,CAACC,OAAlB;AACH,OAFD,MAEO;AACH3B,QAAAA,KAAK,CAACkC,IAAN,CAAWR,KAAK,CAACR,QAAN,CAAeC,IAA1B;AACH;AACJ,KA/CL;AAgDH,GAlDD;AAmDH,CApDM,C,CAsDP;;AACA,OAAO,MAAM4H,qBAAqB,GAAG,CAAClH,UAAD,EAAa4G,WAAb,EAA0BO,MAA1B,EAAkCC,kBAAlC,EAAsDC,SAAtD,KAAoE;AACrG,SAAO,UAAUrI,QAAV,EAAoB;AACvBA,IAAAA,QAAQ,CAACR,WAAW,CAAC,IAAD,CAAZ,CAAR;AACAN,IAAAA,KAAK,CAACe,IAAN,CAAW,gBAAgBoI,SAA3B,EAAsCrH,UAAtC,EACKZ,IADL,CACUC,QAAQ,IAAI;AACd,YAAMN,UAAU,GAAGM,QAAQ,CAACC,IAA5B;AACA,YAAMqH,aAAa,GAAGvI,mBAAmB,CAACW,UAAU,CAAC,YAAD,CAAV,IAA4B,EAA7B,EAAiC,WAAjC,EAA8C,WAA9C,EAA2D,YAA3D,EAAyE,WAAzE,EAAsF,KAAtF,CAAzC;AACAC,MAAAA,QAAQ,CAAC;AACLO,QAAAA,IAAI,EAAEjB,cADD;AAGLkB,QAAAA,OAAO,EAAE2H,MAAM,KAAK,CAAX,GAAe;AACpBP,UAAAA,WAAW,EAAE,EACT,GAAGA,WADM;AAETG,YAAAA,UAAU,EAAEJ,aAAa,CAACvF,GAAd,CAAkB,YAAlB,CAFH;AAGT4F,YAAAA,oBAAoB,EAAEjI,UAAU,CAAC,sBAAD,CAAV,IAAsC;AAHnD,WADO;AAMpBkC,UAAAA,cAAc,EAAE,EACZ,GAAGmG,kBADS;AAEZlI,YAAAA,SAAS,EAAEyH,aAAa,CAACvF,GAAd,CAAkB,YAAlB,KAAmCuF,aAAa,CAACvF,GAAd,CAAkB,YAAlB,EAAgCP,MAAhC,GAAyC,CAA5E,GAAgF8F,aAAa,CAACvF,GAAd,CAAkB,YAAlB,EAAgC,CAAhC,CAAhF,GAAqH,EAFpH,CAGZ;;AAHY,WANI;AAWpB3B,UAAAA,OAAO,EAAE;AAXW,SAAf,GAYL;AACAmH,UAAAA,WAAW,EAAE,EACT,GAAGA,WADM;AAETI,YAAAA,oBAAoB,EAAEjI,UAAU,CAAC,sBAAD;AAFvB,WADb;AAKAU,UAAAA,OAAO,EAAE;AALT;AAfC,OAAD,CAAR;AAuBH,KA3BL,EA4BKG,KA5BL,CA4BWC,KAAK,IAAI;AACZb,MAAAA,QAAQ,CAAC;AACLO,QAAAA,IAAI,EAAEjB,cADD;AAELkB,QAAAA,OAAO,EAAE;AACLC,UAAAA,OAAO,EAAE;AADJ;AAFJ,OAAD,CAAR;AAMAtB,MAAAA,KAAK,CAAC0B,KAAN,CAAYA,KAAK,CAACC,OAAlB;AACH,KApCL;AAqCH,GAvCD;AAwCH,CAzCM;AA2CP,OAAO,MAAMwH,wBAAwB,GAAG,CAACtH,UAAD,EAAauH,kBAAb,KAAoC;AACxE,SAAQvI,QAAD,IAAc;AACjBA,IAAAA,QAAQ,CAACR,WAAW,CAAC,IAAD,CAAZ,CAAR;AACAN,IAAAA,KAAK,CAACe,IAAN,CAAW,oBAAoBe,UAAU,CAACqH,SAA1C,EAAqDrH,UAAU,CAACwH,SAAhE,EACKpI,IADL,CACUC,QAAQ,IAAI;AACd,YAAMN,UAAU,GAAGM,QAAQ,CAACC,IAA5B;AACAjB,MAAAA,QAAQ,CAACU,UAAD,CAAR;AACAC,MAAAA,QAAQ,CAAC;AACLO,QAAAA,IAAI,EAAEjB,cADD;AAELkB,QAAAA,OAAO,EAAE;AACLC,UAAAA,OAAO,EAAE,KADJ;AAELV,UAAAA,UAAU,EAAE,EACR,GAAGA,UADK;AAERwI,YAAAA,kBAFQ;AAGR7G,YAAAA,mBAAmB,EAAEV,UAAU,CAACwH,SAAX,CAAqB9G;AAHlC;AAFP;AAFJ,OAAD,CAAR;AAWH,KAfL,EAgBKd,KAhBL,CAgBWC,KAAK,IAAI;AACZb,MAAAA,QAAQ,CAAC;AACLO,QAAAA,IAAI,EAAEjB,cADD;AAELkB,QAAAA,OAAO,EAAE;AACLC,UAAAA,OAAO,EAAE;AADJ;AAFJ,OAAD,CAAR;AAMAtB,MAAAA,KAAK,CAAC0B,KAAN,CAAYA,KAAK,CAACC,OAAlB;AACH,KAxBL;AAyBH,GA3BD;AA4BH,CA7BM;AA+BP,OAAO,MAAM2H,WAAW,GAAIzH,UAAD,IAAgB;AACvC,SAAQhB,QAAD,IAAc;AACjBA,IAAAA,QAAQ,CAACR,WAAW,CAAC,IAAD,CAAZ,CAAR;AACA,QAAIsC,QAAQ,GAAG,CAAC5C,KAAK,CAACe,IAAN,CAAW,2BAAX,EAAwC;AACpDE,MAAAA,QAAQ,EAAEa,UAAU,CAAClB;AAD+B,KAAxC,CAAD,CAAf;;AAGA,QAAIkB,UAAU,CAACO,SAAX,KAAyB,QAA7B,EAAuC;AACnCO,MAAAA,QAAQ,CAACC,IAAT,CAAc7C,KAAK,CAACe,IAAN,CAAW,0BAAX,EAAuC;AACjDE,QAAAA,QAAQ,EAAEa,UAAU,CAAClB,QAD4B;AAEjD4I,QAAAA,QAAQ,EAAE1H,UAAU,CAACiB;AAF4B,OAAvC,CAAd;AAIH;;AACD1C,IAAAA,KAAK,CAACyC,GAAN,CAAUF,QAAV,EACK1B,IADL,CACUC,QAAQ,IAAI;AACd,YAAMsI,OAAO,GAAGvJ,mBAAmB,CAACiB,QAAQ,CAAC,CAAD,CAAR,CAAYC,IAAZ,CAAiBsI,UAAlB,EAA8B,WAA9B,EAA2C,WAA3C,EAAwD,KAAxD,EAA+D,KAA/D,EAAsE,IAAtE,CAAnC;AACA,YAAMC,UAAU,GAAGF,OAAO,CAACvG,GAAR,CAAY,YAAZ,CAAnB;AACA,UAAIH,cAAc,GAAG,EAArB;AACA,YAAM6G,WAAW,GAAGD,UAAU,CAAC7C,MAAX,CAAkB+C,KAAK,IAAIA,KAAK,CAAC1E,IAAN,CAAW2E,YAAX,KAA4BvJ,iBAAiB,CAAC6E,GAAzE,CAApB;AACA,UAAI2E,QAAQ,GAAG,KAAf;AACA,UAAIC,UAAU,GAAG,EAAjB;;AACA,UAAIlI,UAAU,CAACO,SAAX,KAAyB,QAA7B,EAAuC;AACnC2H,QAAAA,UAAU,GAAG7I,QAAQ,CAAC,CAAD,CAAR,CAAYC,IAAzB;AACA,YAAI6I,SAAS,GAAG,EAAhB;AACA,YAAIC,IAAI,GAAG,EAAX;;AACA,YAAIF,UAAU,CAACG,mBAAX,KAAmC3J,cAAc,CAAC4J,IAAtD,EAA4D;AACxDH,UAAAA,SAAS,GAAG;AACR,qBAASD,UAAU,CAACK,SADZ;AAER,qBAASL,UAAU,CAACC;AAFZ,WAAZ;AAKAC,UAAAA,IAAI,GAAG;AACHI,YAAAA,aAAa,EAACN,UAAU,CAACO,SADtB;AAEHC,YAAAA,gBAAgB,EAACR,UAAU,CAAC5F,YAFzB;AAGHqG,YAAAA,kBAAkB,EAACT,UAAU,CAAC5C,cAH3B;AAIHsD,YAAAA,SAAS,EAAC,EAJP;AAKHC,YAAAA,SAAS,EAAC,CALP;AAMHvD,YAAAA,cAAc,EAAC,CANZ;AAOHmD,YAAAA,SAAS,EAAC;AAPP,WAAP;AAUH,SAhBD,MAgBO;AACHN,UAAAA,SAAS,GAAGL,WAAW,CAACjH,MAAZ,GAAqB,CAArB,GAAyBiH,WAAW,CAAC,CAAD,CAApC,GAA0C,EAAtD,CADG,CACsD;;AACzDM,UAAAA,IAAI,GAAG;AACHI,YAAAA,aAAa,EAAC,EADX;AAEHE,YAAAA,gBAAgB,EAAC,EAFd;AAGHC,YAAAA,kBAAkB,EAAC,CAHhB;AAIHC,YAAAA,SAAS,EAACV,UAAU,CAACU,SAJlB;AAKHC,YAAAA,SAAS,EAACX,UAAU,CAACW,SALlB;AAMHvD,YAAAA,cAAc,EAAC4C,UAAU,CAAC5C,cANvB;AAOHmD,YAAAA,SAAS,EAACP,UAAU,CAACO;AAPlB,WAAP;AASH;;AAIDxH,QAAAA,cAAc,GAAG,EACb,GAAGmH,IADU;AAEbU,UAAAA,aAAa,EAACZ,UAAU,CAACY,aAFZ;AAGbT,UAAAA,mBAAmB,EAACH,UAAU,CAACG,mBAHlB;AAIb,aAAGH,UAJU;AAKbC,UAAAA,SALa,CAOd;;AAPc,SAAjB;AASH,OA5CD,MA4CO;AACHlH,QAAAA,cAAc,GAAG;AACboH,UAAAA,mBAAmB,EAAChJ,QAAQ,CAAC,CAAD,CAAR,CAAYC,IAAZ,CAAiByJ,cAAjB,CAAgClI,MAAhC,GAAuC,CAAvC,GACpBxB,QAAQ,CAAC,CAAD,CAAR,CAAYC,IAAZ,CAAiByJ,cAAjB,CAAgC,CAAhC,EAAmCV,mBADf,GACmC3J,cAAc,CAACsK,GAFzD;AAGbb,UAAAA,SAAS,EAAEL,WAAW,CAACjH,MAAZ,GAAqB,CAArB,GAAyBiH,WAAW,CAAC,CAAD,CAApC,GAA0C,EAHxC;AAG4C;AACzDG,UAAAA;AAJa,SAAjB;AAMH;;AACDjJ,MAAAA,QAAQ,CAAC;AACLO,QAAAA,IAAI,EAAEjB,cADD;AAELkB,QAAAA,OAAO,EAAE;AACL,WAACQ,UAAU,CAACiJ,SAAZ,GAAwB,IADnB;AAEL1I,UAAAA,SAAS,EAAEP,UAAU,CAACO,SAFjB;AAGLkE,UAAAA,UAAU,EAAEzE,UAAU,CAACyE,UAHlB;AAILhE,UAAAA,YAAY,EAAET,UAAU,CAACS,YAJpB;AAKLQ,UAAAA,cALK;AAMLxB,UAAAA,OAAO,EAAE,KANJ;AAOLyJ,UAAAA,UAAU,EAAErB,UAPP;AAQLlC,UAAAA,gBAAgB,EAAE,KARb;AASLwD,UAAAA,SAAS,EAAEjB,UAAU,CAACG,mBAAX,KAAmC3J,cAAc,CAACsK,GAAlD,GAAwDd,UAAxD,GAAqE;AAT3E;AAFJ,OAAD,CAAR;AAcH,KA1EL,EA2EKtI,KA3EL,CA2EWC,KAAK,IAAI;AACZb,MAAAA,QAAQ,CAAC;AACLO,QAAAA,IAAI,EAAEjB,cADD;AAELkB,QAAAA,OAAO,EAAE;AACLC,UAAAA,OAAO,EAAE;AADJ;AAFJ,OAAD,CAAR;;AAMA,UAAII,KAAK,CAACR,QAAN,CAAee,MAAf,KAA0B,GAA9B,EAAmC;AAC/BjC,QAAAA,KAAK,CAAC0B,KAAN,CAAYA,KAAK,CAACC,OAAlB;AACH,OAFD,MAEO;AACH3B,QAAAA,KAAK,CAACkC,IAAN,CAAWR,KAAK,CAACR,QAAN,CAAeC,IAA1B;AACH;AACJ,KAvFL;AAwFH,GAnGD;AAoGH,CArGM;AAwGP,OAAO,MAAM8J,8BAA8B,GAAIC,cAAD,IAAoB;AAC9D,SAAO,UAAUrK,QAAV,EAAoB;AACvB,QAAI8B,QAAQ,GAAG,EAAf;AACA,UAAMwI,iBAAiB,GAAEpL,KAAK,CAACe,IAAN,CAAW,gCAAX,EAA6C;AAClE,kBAAYoK,cAAc,CAACvK;AADuC,KAA7C,CAAzB;AAII,UAAMyK,aAAa,GAACrL,KAAK,CAACe,IAAN,CAAW,2CAAX,EAAwD;AACxE,OAACoK,cAAc,CAACG,eAAhB,GAAkCH,cAAc,CAACI,eADuB;AAExE,kBAAYJ,cAAc,CAACvK;AAF6C,KAAxD,CAApB;AAII,UAAM4K,KAAK,GAAExL,KAAK,CAACe,IAAN,CAAW,cAAX,EAA2B;AACpC,kBAAYoK,cAAc,CAACvK;AADS,KAA3B,CAAb;AAEJgC,IAAAA,QAAQ,GAAG,CAACwI,iBAAD,EAAoBC,aAApB,EAAkCG,KAAlC,CAAX;AAGJ1K,IAAAA,QAAQ,CAACR,WAAW,CAAC,IAAD,CAAZ,CAAR;AACAD,IAAAA,KAAK,CAACyC,GAAN,CAAUF,QAAV,EACK1B,IADL,CACUC,QAAQ,IAAI;AACd,UAAI4B,cAAc,GAAG,EAArB;AAEA,YAAMgD,YAAY,GAAG7F,mBAAmB,CAACiB,QAAQ,CAAC,CAAD,CAAR,CAAYC,IAAZ,IAAoB,EAArB,EAAyB,oBAAzB,EAA+C,gBAA/C,EAAiE,KAAjE,EAAwE,KAAxE,EAA+E,IAA/E,CAAxC;AACA,YAAM6D,OAAO,GAAG/E,mBAAmB,CAACiB,QAAQ,CAAC,CAAD,CAAR,CAAYC,IAAZ,IAAoB,EAArB,EAAyB,WAAzB,EAAsC,WAAtC,EAAmD,KAAnD,EAA0D,KAA1D,EAAiE,IAAjE,CAAnC;AAEA,UAAImC,aAAa,GAAG;AAChB8C,QAAAA,aAAa,EAAEN,YAAY,CAAC7C,GAAb,CAAiB,YAAjB,CADC;AAEhBqC,QAAAA,IAAI,EAAEN,OAAO,CAAC/B,GAAR,CAAY,YAAZ;AAFU,OAApB;AAIA,UAAIuI,aAAa,GAAG,EAApB;AACA,UAAIlG,IAAI,GAAC,EAAT;AAEAkG,MAAAA,aAAa,CAAC5I,IAAd,CAAmB;AACf,iBAAS1B,QAAQ,CAAC,CAAD,CAAR,CAAYC,IAAZ,CAAiB,oBAAjB,CADM;AAEf,iBAASD,QAAQ,CAAC,CAAD,CAAR,CAAYC,IAAZ,CAAiB,gBAAjB;AAFM,OAAnB;AAIA2B,MAAAA,cAAc,GAAG5B,QAAQ,CAAC,CAAD,CAAR,CAAYC,IAA7B;AAEA2B,MAAAA,cAAc,CAAC,oBAAD,CAAd,GAAuC0I,aAAa,CAAC,CAAD,CAApD;AAEAlG,MAAAA,IAAI,CAAC1C,IAAL,CAAU;AACN,iBAAS1B,QAAQ,CAAC,CAAD,CAAR,CAAYC,IAAZ,CAAiB,WAAjB,CADH;AAEN,iBAASD,QAAQ,CAAC,CAAD,CAAR,CAAYC,IAAZ,CAAiB,WAAjB;AAFH,OAAV;AAIA2B,MAAAA,cAAc,GAAG5B,QAAQ,CAAC,CAAD,CAAR,CAAYC,IAA7B;AACA2B,MAAAA,cAAc,CAAC,WAAD,CAAd,GAA8BwC,IAAI,CAAC,CAAD,CAAlC;AACAzE,MAAAA,QAAQ,CAAC;AACLO,QAAAA,IAAI,EAAEjB,cADD;AAELkB,QAAAA,OAAO,EAAE;AACLiC,UAAAA,aAAa,EAACA,aADT;AAENR,UAAAA,cAAc,EAAEA,cAFV;AAGL2I,UAAAA,MAAM,EAAE,IAHH;AAILrJ,UAAAA,SAAS,EAAE8I,cAAc,CAAC9I,SAJrB;AAKLkE,UAAAA,UAAU,EAAE,mBALP;AAMLiB,UAAAA,cAAc,EAAE,IANX;AAOLjG,UAAAA,OAAO,EAAE;AAPJ;AAFJ,OAAD,CAAR;AAYH,KAxCL,EAyCKG,KAzCL,CAyCWC,KAAK,IAAI;AACZb,MAAAA,QAAQ,CAAC;AACLO,QAAAA,IAAI,EAAEjB,cADD;AAELkB,QAAAA,OAAO,EAAE;AACLC,UAAAA,OAAO,EAAE;AADJ;AAFJ,OAAD,CAAR;;AAMA,UAAII,KAAK,CAACR,QAAN,CAAee,MAAf,KAA0B,GAA9B,EAAmC;AAC/BjC,QAAAA,KAAK,CAAC0B,KAAN,CAAYlB,IAAI,CAAC+F,aAAL,CAAmB;AAC3BC,UAAAA,EAAE,EAAE9E,KAAK,CAACC;AADiB,SAAnB,CAAZ;AAGH,OAJD,MAIO;AACH3B,QAAAA,KAAK,CAACkC,IAAN,CAAW1B,IAAI,CAAC+F,aAAL,CAAmB;AAC1BC,UAAAA,EAAE,EAAE9E,KAAK,CAACR,QAAN,CAAeC;AADO,SAAnB,CAAX;AAGH;AACJ,KAzDL;AA0DH,GA1ED;AA2EH,CA5EM;AAiFP,OAAO,MAAMuK,gBAAgB,GAAG,CAACtJ,SAAD,EAAYuJ,iBAAZ,EAA+BhL,QAA/B,EAAyC2B,YAAzC,KAA0D;AACtF,SAAO,UAAUzB,QAAV,EAAoB;AACvB,QAAI8B,QAAQ,GAAG,EAAf;AACA,UAAMwI,iBAAiB,GAAEpL,KAAK,CAACe,IAAN,CAAW,cAAX,EAA2B;AAChD,kBAAYH;AADoC,KAA3B,CAAzB;AAIK,UAAMyK,aAAa,GAACrL,KAAK,CAACe,IAAN,CAAW,sCAAX,EAAmD;AACpE,oBAAc6K,iBADsD;AAEnE,kBAAYhL;AAFuD,KAAnD,CAApB;AAIAgC,IAAAA,QAAQ,GAAG,CAACwI,iBAAD,EAAmBC,aAAnB,CAAX;AAGLvK,IAAAA,QAAQ,CAACR,WAAW,CAAC,IAAD,CAAZ,CAAR;AACAD,IAAAA,KAAK,CAACyC,GAAN,CAAUF,QAAV,EACK1B,IADL,CACUC,QAAQ,IAAI;AACd,UAAI4B,cAAc,GAAG,EAArB;AACA,YAAMkC,OAAO,GAAG/E,mBAAmB,CAACiB,QAAQ,CAAC,CAAD,CAAR,CAAYC,IAAZ,IAAoB,EAArB,EAAyB,WAAzB,EAAsC,WAAtC,EAAmD,KAAnD,EAA0D,KAA1D,EAAiE,IAAjE,CAAnC;AAEA,YAAM2E,YAAY,GAAG7F,mBAAmB,CAACiB,QAAQ,CAAC,CAAD,CAAR,CAAYC,IAAZ,IAAoB,EAArB,EAAyB,oBAAzB,EAA+C,gBAA/C,EAAiE,KAAjE,EAAwE,KAAxE,EAA+E,IAA/E,CAAxC;AAEA,UAAImC,aAAa,GAAG;AAChB8C,QAAAA,aAAa,EAAEN,YAAY,CAAC7C,GAAb,CAAiB,YAAjB,CADC;AAEhBqC,QAAAA,IAAI,EAAEN,OAAO,CAAC/B,GAAR,CAAY,YAAZ;AAFU,OAApB;AAMApC,MAAAA,QAAQ,CAAC;AACLO,QAAAA,IAAI,EAAEjB,cADD;AAELkB,QAAAA,OAAO,EAAE;AACLiC,UAAAA,aAAa,EAACA,aADT;AAENR,UAAAA,cAAc,EAAEA,cAFV;AAGL2I,UAAAA,MAAM,EAAE,IAHH;AAILrJ,UAAAA,SAAS,EAAEA,SAJN;AAKLkE,UAAAA,UAAU,EAAE,mBALP;AAMLiB,UAAAA,cAAc,EAAE,IANX;AAOLjG,UAAAA,OAAO,EAAE;AAPJ;AAFJ,OAAD,CAAR;AAYH,KAzBL,EA0BKG,KA1BL,CA0BWC,KAAK,IAAI;AACZb,MAAAA,QAAQ,CAAC;AACLO,QAAAA,IAAI,EAAEjB,cADD;AAELkB,QAAAA,OAAO,EAAE;AACLC,UAAAA,OAAO,EAAE;AADJ;AAFJ,OAAD,CAAR;;AAMA,UAAII,KAAK,CAACR,QAAN,CAAee,MAAf,KAA0B,GAA9B,EAAmC;AAC/BjC,QAAAA,KAAK,CAAC0B,KAAN,CAAYlB,IAAI,CAAC+F,aAAL,CAAmB;AAC3BC,UAAAA,EAAE,EAAE9E,KAAK,CAACC;AADiB,SAAnB,CAAZ;AAGH,OAJD,MAIO;AACH3B,QAAAA,KAAK,CAACkC,IAAN,CAAW1B,IAAI,CAAC+F,aAAL,CAAmB;AAC1BC,UAAAA,EAAE,EAAE9E,KAAK,CAACR,QAAN,CAAeC;AADO,SAAnB,CAAX;AAGH;AACJ,KA1CL;AA2CH,GAzDD;AA0DH,CA3DM","sourcesContent":["import rsapi from \"../rsapi\";\r\nimport {\r\n    toast\r\n} from \"react-toastify\";\r\nimport {\r\n    constructOptionList,\r\n    sortData\r\n} from \"../components/CommonScript\";\r\nimport {\r\n    DEFAULT_RETURN\r\n} from \"./LoginTypes\";\r\nimport Axios from \"axios\";\r\nimport {\r\n    initRequest\r\n} from \"./LoginAction\";\r\nimport {\r\n    transactionStatus,\r\n    attachmentType\r\n} from \"../components/Enumeration\";\r\nimport {\r\n    intl\r\n} from \"../components/App\";\r\n\r\n//Test click\r\nexport const getTestMaster = (testItem, userInfo, masterData) => {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/testmaster/getTestById\", {\r\n                ntestcode: testItem.ntestcode,\r\n                userinfo: userInfo\r\n            })\r\n            .then(response => {\r\n                masterData = {\r\n                    ...masterData,\r\n                    ...response.data\r\n                }\r\n                sortData(masterData);\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData,\r\n                        loading: false,\r\n                        dataState: undefined\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                });\r\n                toast.error(error.message);\r\n            });\r\n    }\r\n}\r\n\r\n//tab click\r\nexport const getTestDetails = (inputParam) => {\r\n    return function (dispatch) {\r\n        const testParameter = inputParam.testParameter;\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/testmaster/getothertestdetails\", {\r\n                ntestcode: testParameter.ntestcode,\r\n                \"nFlag\": inputParam.nFlag,\r\n                ntestparametercode: testParameter.ntestparametercode,\r\n                userinfo: inputParam.userInfo\r\n            })\r\n            .then(response => {\r\n                let masterData = inputParam.masterData\r\n                masterData = {\r\n                    ...masterData,\r\n                    ...response.data\r\n                };\r\n                sortData(masterData);\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData,\r\n                        loading: false\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                });\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            });\r\n    }\r\n}\r\n\r\n\r\n\r\n//Add Test\r\nexport const addTest = (operation, testmaster, userInfo, ncontrolCode, nfilterTestCategory) => {\r\n    return function (dispatch) {\r\n        if (nfilterTestCategory && Object.values(nfilterTestCategory).length > 0) {\r\n            dispatch(initRequest(true));\r\n            const urlArray = [\r\n                rsapi.post(\"testcategory/getTestCategory\", {\r\n                    \"userinfo\": userInfo\r\n                }),\r\n                rsapi.post(\"checklist/getApprovedChecklist\", {\r\n                    \"userinfo\": userInfo\r\n                })\r\n            ];\r\n            if (operation === \"update\") {\r\n                urlArray.push(rsapi.post(\"testmaster/getActiveTestById\", {\r\n                    \"userinfo\": userInfo,\r\n                    ntestcode: testmaster.ntestcode\r\n                }))\r\n\r\n                urlArray.push(rsapi.post(\"testmaster/getPeriod\", {\r\n                    \"userinfo\": userInfo\r\n                }));\r\n            } else if (operation === \"create\") {\r\n                urlArray.push(rsapi.post(\"parametertype/getParameterType\", {\r\n                    \"userinfo\": userInfo\r\n                }));\r\n                urlArray.push(rsapi.post(\"grade/getGrade\", {\r\n                    \"userinfo\": userInfo\r\n                }));\r\n                urlArray.push(rsapi.post(\"section/getSection\", {\r\n                    \"userinfo\": userInfo\r\n                }));\r\n                urlArray.push(rsapi.post(\"method/getMethod\", {\r\n                    \"userinfo\": userInfo\r\n                }));\r\n                urlArray.push(rsapi.post(\"unit/getUnit\", {\r\n                    \"userinfo\": userInfo\r\n                }));\r\n                urlArray.push(rsapi.post(\"instrumentcategory/fetchinstrumentcategory\", {\r\n                    \"userinfo\": userInfo\r\n                }));\r\n                urlArray.push(rsapi.post(\"testmaster/getAddTest\", {\r\n                    \"userinfo\": userInfo\r\n                }));\r\n                urlArray.push(rsapi.post(\"containertype/getContainerType\", {\r\n                    \"userinfo\": userInfo\r\n                }));\r\n                urlArray.push(rsapi.post(\"testpackage/getTestPackage\", {\r\n                    \"userinfo\": userInfo\r\n                }));\r\n\r\n                urlArray.push(rsapi.post(\"testmaster/getPeriod\", {\r\n                    \"userinfo\": userInfo\r\n                }));\r\n            } else if (operation === \"copy\") {\r\n                urlArray.push(rsapi.post(\"testmaster/validateCopyTest\", {\r\n                    \"userinfo\": userInfo,\r\n                    ntestcode: testmaster.ntestcode\r\n                }));\r\n\r\n                urlArray.push(rsapi.post(\"testmaster/getPeriod\", {\r\n                    \"userinfo\": userInfo\r\n                }));\r\n            }\r\n            Axios.all(urlArray)\r\n                .then(response => {\r\n                    let selectedRecord = {};\r\n                    const testCategoryMap = constructOptionList(response[0].data || [], \"ntestcategorycode\", \"stestcategoryname\", false, false, true);\r\n                    const testCategory = testCategoryMap.get(\"OptionList\");\r\n                    const checklistMap = constructOptionList(response[0].data || [], \"nchecklistversioncode\", \"schecklistname\", false, false, true);\r\n                    const ChecklistVersion = checklistMap.get(\"OptionList\");\r\n                    //const periodMap=[];\r\n                    const testData = {\r\n                        testCategory,\r\n                        ChecklistVersion\r\n                    };\r\n                    let parameterData = {};\r\n                    let otherTestData = {}\r\n                    let needOtherTest = false;\r\n                    if (operation === \"update\") {\r\n                        const editData = response[2].data;\r\n                        selectedRecord = editData;\r\n                        const periodMap = constructOptionList(response[3].data || [], \"ntatunitcode\", \"statunitname\", false, false, true);\r\n                        parameterData = {\r\n                            period:periodMap.get(\"OptionList\"),\r\n                        }\r\n                        selectedRecord[\"ntestcategorycode\"] = {\r\n                            \"value\": editData[\"ntestcategorycode\"],\r\n                            \"label\": editData[\"stestcategoryname\"]\r\n                        };\r\n                        selectedRecord[\"nchecklistversioncode\"] = {\r\n                            \"value\": editData[\"nchecklistversioncode\"],\r\n                            \"label\": editData[\"schecklistname\"]\r\n                        };\r\n                        selectedRecord[\"ntatunitcode\"] = {\r\n                            \"value\": editData[\"ntatunitcode\"],\r\n                            \"label\": editData[\"statunitname\"]\r\n                        };\r\n                       \r\n                    } else if (operation === \"copy\") {\r\n                        const periodMap = constructOptionList(response[3].data || [], \"ntatunitcode\", \"statunitname\", false, false, true);\r\n                        //period:periodMap.get(\"OptionList\")\r\n                        parameterData={\r\n                            period: periodMap.get(\"OptionList\")\r\n                        } ;\r\n                        selectedRecord = {\r\n                            ntestcategorycode: nfilterTestCategory.value === -2 ? (testCategory.length > 0 ?\r\n                                // {\"label\": testCategory[0].stestcategoryname, \"value\": testCategory[0].ntestcategorycode}\r\n                                testCategory[0] : \"\") : nfilterTestCategory,\r\n                            ntransactionstatus: transactionStatus.ACTIVE,\r\n                            naccredited: transactionStatus.NOTACCREDITED,\r\n                            stestsynonym: \"\",\r\n                            stestname: \"\",\r\n                            sdescription: \"\",\r\n                            ncost: \"\",\r\n                            //period:periodMap.get(\"OptionList\"),\r\n                           \r\n                        }\r\n                        \r\n                    } else {\r\n                        // const { Grade } = response[7].data; //ParameterType\r\n                        const parameterMap = constructOptionList(response[2].data || [], \"nparametertypecode\", \"sdisplaystatus\", false, false, true);\r\n                        // const parameterType = parameterMap.get(\"OptionList\");//response[2].data;\r\n                        const gradeMap = constructOptionList(response[3].data || [], \"ngradecode\", \"sdisplaystatus\", false, false, true);\r\n                        // const grade = gradeMap.get(\"OptionList\");// response[3].data;\r\n                        const parameterItem = parameterMap.get(\"DefaultValue\") ? parameterMap.get(\"DefaultValue\") : \"\"; //parameterType.filter(item=>{ return item.nparametertypecode === 3 });//ParameterType[0];\r\n                        selectedRecord = {\r\n                            // nsectioncode: {\"value\": response[2].data[0].nsectioncode, \"label\": response[2].data[0].ssectionname},\r\n                            nunitcode: -1,\r\n                            nparametertypecode: parameterItem, //{\"value\": parameterItem[0].nparametertypecode, \"label\": parameterItem[0].sdisplaystatus},\r\n                            ntestcategorycode: nfilterTestCategory.value === -2 ? (testCategory.length > 0 ?\r\n                                // {\"label\": testCategory[0].stestcategoryname, \"value\": testCategory[0].ntestcategorycode}: \"\")\r\n                                testCategory[0] : \"\") : nfilterTestCategory,\r\n                            ntransactionstatus: transactionStatus.ACTIVE,\r\n                            naccredited: transactionStatus.NOTACCREDITED,\r\n                            stestsynonym: \"\",\r\n                            stestname: \"\",\r\n                            sdescription: \"\",\r\n                            ncost: \"\"\r\n                        }\r\n                        let needUnit = true;\r\n                        let needRoundingDigit = true;\r\n                        let needCodedResult = true;\r\n                        let needActualResult = true;\r\n                        let npredefinedcode = transactionStatus.NO;\r\n                        const unitMap = constructOptionList(response[6].data || [], \"nunitcode\", \"sunitname\", false, false, true);\r\n                        const periodMap = constructOptionList(response[11].data || [], \"ntatunitcode\", \"statunitname\", false, false, true);\r\n                        const deltaperiodMap = constructOptionList(response[11].data || [], \"ndeltaunitcode\", \"sdeltaunitname\", false, false, true);\r\n\r\n                        if (parameterItem && parameterItem.item) {\r\n                            if (parameterItem.item[\"nunit\"] === transactionStatus.YES) {\r\n                                needUnit = false;\r\n                                selectedRecord[\"nunitcode\"] = unitMap.get(\"DefaultValue\") ? unitMap.get(\"DefaultValue\") : \"\";\r\n                                //{\"value\": response[4].data[0][\"nunitcode\"], \"label\": response[4].data[0][\"sunitname\"]};\r\n                            }\r\n                            if (parameterItem.item[\"nroundingdigit\"] === transactionStatus.YES) {\r\n                                needRoundingDigit = false;\r\n                            }\r\n                            if (parameterItem.item[\"npredefinedcode\"] === transactionStatus.YES) {\r\n                                needCodedResult = false;\r\n                                npredefinedcode = parameterItem.item[\"npredefinedcode\"];\r\n                            }\r\n                            if (parameterItem.item[\"ngrade\"] === transactionStatus.YES) {\r\n                                needActualResult = false;\r\n                                selectedRecord[\"ngradecode\"] = gradeMap.get(\"DefaultValue\") ? gradeMap.get(\"DefaultValue\") : \"\";\r\n                                //{\"value\": Grade.ngradecode, \"label\": Grade[\"sdisplaystatus\"]};\r\n                            }\r\n                        }\r\n                        // const testParameterMap = constructOptionList(response[8].data[\"TestParameter\"] || [], \"nparametertypecode\", \"sdisplaystatus\", false, false, true);\r\n                        parameterData = {\r\n                            grade: gradeMap.get(\"OptionList\"),\r\n                            parameterType: parameterMap.get(\"OptionList\"),\r\n                            unit: unitMap.get(\"OptionList\"),\r\n                            period:periodMap.get(\"OptionList\"),\r\n                            deltaperiod:deltaperiodMap.get(\"OptionList\"),\r\n                            needRoundingDigit,\r\n                            needUnit,\r\n                            needCodedResult,\r\n                            needActualResult,\r\n                            npredefinedcode,\r\n                            testParameter: constructOptionList(response[8].data[\"TestParameter\"] || [], 'sparametername', 'sparametername', false, false, true).get(\"OptionList\"),\r\n                            defaultUnit: unitMap.get(\"DefaultValue\") ? unitMap.get(\"DefaultValue\") : \"\",\r\n                            defaultGrade: gradeMap.get(\"DefaultValue\") ? gradeMap.get(\"DefaultValue\") : \"\"\r\n                            //testParameterMap.get(\"OptionList\")\r\n                        };\r\n                        const sectionMap = constructOptionList(response[4].data || [], \"nsectioncode\", \"ssectionname\", false, false, true);\r\n                        const methodMap = constructOptionList(response[5].data.Method.length>0?response[5].data.Method:[] || [], \"nmethodcode\", \"smethodname\", false, false, true);\r\n                        const instCatMap = constructOptionList(response[7].data || [], \"ninstrumentcatcode\", \"sinstrumentcatname\", false, false, true);\r\n                        const continerType = constructOptionList(response[9].data || [], \"ncontainertypecode\", \"scontainertype\", false, false, true);\r\n                        const packageMap = constructOptionList(response[10].data || [], \"ntestpackagecode\", \"stestpackagename\", false, false, true);\r\n                        otherTestData = {\r\n                            package: packageMap.get(\"OptionList\"),\r\n                            section: sectionMap.get(\"OptionList\"),\r\n                            method: methodMap.get(\"OptionList\"),\r\n                            instrumentcategory: instCatMap.get(\"OptionList\"),\r\n                            containertype: continerType.get(\"OptionList\")\r\n\r\n                        }\r\n                        needOtherTest = true;\r\n                    }\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            // parameterData: {\r\n                            //     period: periodMap.get(\"OptionList\")\r\n                            // },   \r\n                            openModal: true,\r\n                            needOtherTest,\r\n                            operation: operation,\r\n                            screenName: \"IDS_TEST\",\r\n                            selectedRecord,\r\n                            ncontrolCode,\r\n                            testData,\r\n                            parameterData,\r\n                            otherTestData,\r\n                            loading: false\r\n                        }\r\n                    });\r\n                })\r\n                .catch(error => {\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            loading: false\r\n                        }\r\n                    });\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    } else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                });\r\n        } else {\r\n            toast.warn(intl.formatMessage({\r\n                id: \"IDS_TESTCATEGORYNOTAVAILABLE\"\r\n            }))\r\n        }\r\n    }\r\n}\r\n\r\n//Add Test Parameter\r\nexport const addParameter = (operation, ntestparametercode, userInfo, ncontrolCode) => {\r\n    return (dispatch) => {\r\n        dispatch(initRequest(true));\r\n        const urlArray = [\r\n            rsapi.post(\"unit/getUnit\", {\r\n                \"userinfo\": userInfo\r\n            }),\r\n            rsapi.post(\"parametertype/getParameterType\", {\r\n                \"userinfo\": userInfo\r\n            }),\r\n            rsapi.post(\"grade/getGrade\", {\r\n                \"userinfo\": userInfo\r\n            }),\r\n            rsapi.post(\"testmaster/getAddTest\", {\r\n                \"userinfo\": userInfo\r\n            }),\r\n            rsapi.post(\"testmaster/getPeriod\", {\r\n                \"userinfo\": userInfo\r\n            })\r\n            \r\n        ];\r\n        if (operation === \"update\") {\r\n            urlArray.push(rsapi.post(\"testmaster/getActiveParameterById\", {\r\n                ntestparametercode: ntestparametercode,\r\n                \"userinfo\": userInfo\r\n            }));\r\n        }\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                // const { Grade, ParameterType } = response[1].data;\r\n                const parameterMap = constructOptionList(response[1].data || [], \"nparametertypecode\", \"sdisplaystatus\", false, false, true);\r\n                const gradeMap = constructOptionList(response[2].data || [], \"ngradecode\", \"sdisplaystatus\", false, false, true);\r\n                const unitMap = constructOptionList(response[0].data || [], \"nunitcode\", \"sunitname\", false, false, true);\r\n                const deltaperiodMap = constructOptionList(response[4].data || [], \"ndeltaunitcode\", \"sdeltaunitname\", false, false, true);\r\n\r\n                //response[2].data;\r\n                // const grade = response[2].data;\r\n                // const parameterType = response[1].data;\r\n                let selectedRecord = {};\r\n                let needUnit = true;\r\n                let needRoundingDigit = true;\r\n                let needCodedResult = true;\r\n                let needActualResult = true;\r\n                let npredefinedcode = transactionStatus.No;\r\n                if (operation === \"update\") {\r\n                    const editTestParameter = response[5].data.TestParameter[0];\r\n                    selectedRecord = editTestParameter;\r\n                    const nparametertypecode = editTestParameter[\"nparametertypecode\"];\r\n                    const parameterItem = parameterMap.get(\"OptionList\").filter(function (item) {\r\n                        return item.value === nparametertypecode;\r\n                    });\r\n                    selectedRecord[\"sparametername\"] = {\r\n                        value: editTestParameter[\"sparametername\"],\r\n                        label: editTestParameter[\"sparametername\"]\r\n                    };\r\n\r\n                    selectedRecord[\"ndeltaunitcode\"] = {\r\n                        \"value\": editTestParameter[\"ndeltaunitcode\"],\r\n                        \"label\": editTestParameter[\"sdeltaunitname\"]\r\n                    };\r\n                    selectedRecord[\"nparametertypecode\"] = {\r\n                        value: nparametertypecode,\r\n                        label: editTestParameter[\"sdisplaystatus\"]\r\n                    };\r\n                    if (parameterItem && parameterItem[0].item) {\r\n                        const selectedParameterItem = parameterItem[0].item;\r\n                        if (selectedParameterItem[\"nunitrequired\"] === transactionStatus.YES) {\r\n                            needUnit = false;\r\n                            selectedRecord[\"nunitcode\"] = {\r\n                                value: editTestParameter[\"nunitcode\"],\r\n                                label: editTestParameter[\"sunitname\"]\r\n                            };\r\n                        }\r\n                        if (selectedParameterItem[\"nroundingrequired\"] === transactionStatus.YES) {\r\n                            needRoundingDigit = false;\r\n                        }\r\n\r\n                        if (selectedParameterItem[\"npredefinedrequired\"] === transactionStatus.YES || selectedParameterItem[\"ngraderequired\"] === transactionStatus.YES) {\r\n                            const editCodedResult = response[5].data.TestPredefinedParameter;\r\n                            if (editCodedResult.length > 0) {\r\n                                const defaultCodedResult = editCodedResult.filter(function (item) {\r\n                                    return item.ndefaultstatus === transactionStatus.YES;\r\n                                });\r\n                                if (defaultCodedResult.length > 0) {\r\n                                    selectedRecord[\"spredefinedname\"] = defaultCodedResult[0].spredefinedname;\r\n                                    selectedRecord[\"ntestpredefinedcode\"] = defaultCodedResult[0].ntestpredefinedcode;;\r\n                                    selectedRecord[\"ngradecode\"] = {\r\n                                        value: defaultCodedResult[0].ngradecode,\r\n                                        label: defaultCodedResult[0][\"sdisplaystatus\"]\r\n                                    };\r\n                                } else {\r\n                                    selectedRecord[\"spredefinedname\"] = editCodedResult[0].spredefinedname;\r\n                                    selectedRecord[\"ntestpredefinedcode\"] = editCodedResult[0].ntestpredefinedcode;\r\n                                    selectedRecord[\"ngradecode\"] = {\r\n                                        value: editCodedResult[0].ngradecode,\r\n                                        label: editCodedResult[0][\"sdisplaystatus\"]\r\n                                    };\r\n                                }\r\n                            }\r\n                        } else {\r\n                            selectedRecord[\"spredefinedname\"] = \"\";\r\n                            selectedRecord[\"ngradecode\"] = -1;\r\n                        }\r\n                        if (selectedParameterItem[\"npredefinedrequired\"] === transactionStatus.YES) {\r\n                            needCodedResult = false;\r\n                            npredefinedcode = selectedParameterItem[\"npredefinedrequired\"];\r\n                        }\r\n                        if (selectedParameterItem[\"ngraderequired\"] === transactionStatus.YES) {\r\n                            needActualResult = false;\r\n                        }\r\n                    }\r\n                } else {\r\n                    const parameterItem = parameterMap.get(\"DefaultValue\") ? parameterMap.get(\"DefaultValue\").item : {};\r\n                    // parameterType.filter(item=>{ return item.nparametertypecode === transactionStatus.YES });\r\n                    if (parameterItem[\"nunitrequired\"] === transactionStatus.YES) {\r\n                        needUnit = false;\r\n                        selectedRecord[\"nunitcode\"] = unitMap.get(\"DefaultValue\") ? unitMap.get(\"DefaultValue\") : \"\"; //{\"value\": response[0].data[0][\"nunitcode\"], \"label\": response[0].data[0][\"sunitname\"]};\r\n                    }\r\n                    if (parameterItem[\"nroundingrequired\"] === transactionStatus.YES) {\r\n                        needRoundingDigit = false;\r\n                    }\r\n                    if (parameterItem[\"npredefinedcrequired\"] === transactionStatus.YES) {\r\n                        needCodedResult = false;\r\n                        npredefinedcode = parameterItem[\"npredefinedcode\"];\r\n                    }\r\n                    if (parameterItem[\"ngraderequired\"] === transactionStatus.YES) {\r\n                        needActualResult = false;\r\n                        // selectedRecord[\"ngradecode\"] = {\"value\": Grade.ngradecode, \"label\": Grade[\"sdisplaystatus\"]};\r\n                    }\r\n                    selectedRecord[\"nparametertypecode\"] = parameterMap.get(\"DefaultValue\"); //{value: parameterItem[0].nparametertypecode, label: parameterItem[0].sdisplaystatus};\r\n                    selectedRecord[\"nroundingdigits\"]=\"\";\r\n                    selectedRecord[\"nunitcode\"]=\"\";\r\n                }\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        openChildModal: true,\r\n                        showSaveContinue: true,\r\n                        operation: operation,\r\n                        screenName: \"IDS_PARAMETER\",\r\n                        selectedRecord,\r\n                        parameterData: {\r\n                            unit: unitMap.get(\"OptionList\"),\r\n                            grade: gradeMap.get(\"OptionList\"),\r\n                            deltaperiod:deltaperiodMap.get(\"OptionList\"),\r\n                            parameterType: parameterMap.get(\"OptionList\"),\r\n                            needUnit,\r\n                            needRoundingDigit,\r\n                            needCodedResult,\r\n                            needActualResult,\r\n                            npredefinedcode,\r\n                            testParameter: constructOptionList(response[3].data[\"TestParameter\"] || [], 'sparametername', 'sparametername', false, false, true).get(\"OptionList\"),\r\n                            defaultUnit: unitMap.get(\"DefaultValue\") ? unitMap.get(\"DefaultValue\") : \"\",\r\n                            defaultGrade: gradeMap.get(\"DefaultValue\") ? gradeMap.get(\"DefaultValue\") : \"\"\r\n                        },\r\n                        ncontrolCode,\r\n                        loading: false\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                });\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            });\r\n    }\r\n}\r\n\r\n//Add Coded result\r\nexport const addCodedResult = (operation, paramdata, userInfo, ncontrolCode) => {\r\n    return (dispatch) => {\r\n        dispatch(initRequest(true));\r\n        const urlArray = [\r\n            rsapi.post(\"testmaster/getAddTest\", {\r\n                \"userinfo\": userInfo\r\n            }),\r\n            rsapi.post(\"grade/getGrade\", {\r\n                \"userinfo\": userInfo\r\n            })\r\n        ];\r\n        if (operation === \"update\") {\r\n            urlArray.push(rsapi.post(\"testmaster/getActivePredefinedParameterById\", {\r\n                ntestpredefinedcode: paramdata[\"ntestpredefinedcode\"],\r\n                \"userinfo\": userInfo\r\n            }));\r\n        }\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                let selectedRecord = {};\r\n                // const grade = response[1].data;\r\n                const gradeMap = constructOptionList(response[1].data || [], \"ngradecode\", \"sdisplaystatus\", false, false, true);\r\n                if (operation === \"update\") {\r\n                    const editCodedResult = response[2].data;\r\n                    selectedRecord = {\r\n                        ntestpredefinedcode: paramdata[\"ntestpredefinedcode\"],\r\n                        ntestparametercode: paramdata[\"ntestparametercode\"],\r\n                        ngradecode: {\r\n                            \"label\": editCodedResult[\"sdisplaystatus\"],\r\n                            \"value\": editCodedResult[\"ngradecode\"]\r\n                        },\r\n                        spredefinedname: editCodedResult[\"spredefinedname\"],\r\n                        ndefaultstatus: editCodedResult[\"ndefaultstatus\"],\r\n                    }\r\n                } else {\r\n                    selectedRecord = {\r\n                        ntestparametercode: paramdata[\"ntestparametercode\"],\r\n                        ngradecode: gradeMap.get(\"DefaultValue\") ? gradeMap.get(\"DefaultValue\") : \"\" //{\"value\": grade[0].ngradecode, \"label\": grade[0][\"sdisplaystatus\"]}\r\n                    }\r\n                }\r\n              \r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        openChildModal: true,\r\n                        showSaveContinue: false,\r\n                        operation: operation,\r\n                        screenName: \"IDS_CODEDRESULT\",\r\n                        parameterData: {\r\n                            grade: gradeMap.get(\"OptionList\"),\r\n                            defaultGrade: gradeMap.get(\"DefaultValue\") ? gradeMap.get(\"DefaultValue\") : \"\"\r\n                        },\r\n                        selectedRecord,\r\n                        ncontrolCode,\r\n                        loading: false\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                });\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            });\r\n    }\r\n}\r\n\r\n//Add parameter specification\r\nexport const addParameterSpecification = (operation, paramdata, userInfo, ncontrolCode) => {\r\n    return (dispatch) => {\r\n        dispatch(initRequest(true));\r\n        let inputparam = [];\r\n        let surl = \"\";\r\n        if (operation === \"update\") {\r\n            surl = \"getParameterSpecificationById\";\r\n            inputparam = {\r\n                userinfo: userInfo,\r\n                ntestparamnumericcode: paramdata[\"ntestparamnumericcode\"]\r\n            };\r\n        } else {\r\n            surl = \"getParameterSpecificationByCount\";\r\n            inputparam = {\r\n                userinfo: userInfo,\r\n                ntestparametercode: paramdata[\"ntestparametercode\"]\r\n            };\r\n        }\r\n        rsapi.post(\"testmaster/\" + surl, inputparam)\r\n            .then(response => {\r\n                let selectedRecord = {};\r\n                if (operation === \"update\") {\r\n                    selectedRecord = {\r\n                        ...response.data\r\n                    }\r\n                } else {\r\n                    selectedRecord = {\r\n                        ntestparametercode: paramdata[\"ntestparametercode\"]\r\n                    }\r\n                }\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        openChildModal: true,\r\n                        showSaveContinue: false,\r\n                        operation: operation,\r\n                        screenName: \"IDS_SPECIFICATION\",\r\n                        selectedRecord,\r\n                        ncontrolCode,\r\n                        loading: false\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                });\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            });\r\n    }\r\n}\r\n\r\nexport const getAvailableData = (testItem, url, key, screenName, userInfo, ncontrolCode) => {\r\n    return (dispatch) => {\r\n        const inputParam = {\r\n            TestMaster: testItem,\r\n            \"userinfo\": userInfo\r\n        }\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"testmaster/\" + url, inputParam)\r\n            .then(response => {\r\n                const availableDataMap = constructOptionList(response.data, key === \"section\" ? \"nsectioncode\" : key === \"method\" ? \"nmethodcode\" : key == \"instrumentcategory\" ?\"ninstrumentcatcode\" : key == \"package\" ?\"ntestpackagecode\" : \"ncontainertypecode\",\r\n                    key === \"section\" ? \"ssectionname\" : key === \"method\" ? \"smethodname\" :  key == \"instrumentcategory\" ? \"sinstrumentcatname\"  :  key == \"package\" ? \"stestpackagename\" : \"scontainertype\", false, false, true);\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        openChildModal: true,\r\n                        showSaveContinue: false,\r\n                        otherTestData: {\r\n                            [key]: availableDataMap.get(\"OptionList\")\r\n                        },\r\n                        screenName: screenName,\r\n                        selectedRecord: {\r\n                            availableData: \"\"\r\n                        },\r\n                        operation: \"create\",\r\n                        ncontrolCode,\r\n                        loading: false\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                });\r\n                if (error.response.status === 417) {\r\n                    toast.info(error.response.data)\r\n                } else {\r\n                    toast.error(error.message)\r\n                }\r\n            });\r\n    }\r\n}\r\n\r\n//Add formula\r\nexport const addFormula = (paramdata, userInfo, ncontrolCode) => {\r\n    return (dispatch) => {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"testmaster/addTestFormula\", {\r\n                userinfo: userInfo,\r\n                nFlag: 1\r\n            })\r\n            .then(response => {\r\n                const responseData = response.data;\r\n                const testMasterMap = constructOptionList(responseData[\"TestMaster\"], \"ntestcode\", \"stestname\", false, false, false);\r\n                const testCategoryMap = constructOptionList(responseData[\"TestCategory\"], \r\n                \"ntestcategorycode\", \"stestcategoryname\", 'descending', false, true);\r\n            \r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        openChildModal: true,\r\n                        showSaveContinue: false,\r\n                        operation: \"create\",\r\n                        screenName: \"IDS_FORMULA\",\r\n                        formulaData: {\r\n                            operators: responseData[\"Operators\"],\r\n                            functions: responseData[\"Functions\"],\r\n                            testCategory: testCategoryMap.get(\"OptionList\"),\r\n                            testMaster: testMasterMap.get(\"OptionList\"),\r\n                            dynamicFormulaFields: responseData[\"DynamicFormulaFields\"]\r\n                        },\r\n                        isFormulaOpen: true,\r\n                        selectedRecord: {\r\n                            ntestcategorycode: testCategoryMap.get(\"OptionList\") && testCategoryMap.get(\"OptionList\").length > 0 ? testCategoryMap.get(\"OptionList\")[0] : \"\", //responseData[\"TestCategory\"].length>0? {\"label\": responseData[\"TestCategory\"][0][\"stestcategoryname\"], \"value\": responseData[\"TestCategory\"][0][\"ntestcategorycode\"]}: \"\",\r\n                            ntestcode: testMasterMap.get(\"OptionList\") && testMasterMap.get(\"OptionList\").length > 0 ? testMasterMap.get(\"OptionList\")[0] : \"\", //responseData[\"TestMaster\"].length>0? {\"label\": responseData[\"TestMaster\"][0][\"stestname\"], \"value\": responseData[\"TestMaster\"][0][\"ntestcode\"]}: \"\",\r\n                            ntestparametercode: paramdata[\"ntestparametercode\"]\r\n                        },\r\n                        ncontrolCode,\r\n                        loading: false\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                });\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            });\r\n    }\r\n}\r\n\r\n//Formula test category and test change event function\r\nexport const formulaChangeFunction = (inputParam, formulaData, caseNo, selectedRecordData, methodUrl) => {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/testmaster\" + methodUrl, inputParam)\r\n            .then(response => {\r\n                const masterData = response.data;\r\n                const testMasterMap = constructOptionList(masterData[\"TestMaster\"] || [], \"ntestcode\", \"stestname\", 'descending', 'ntestcode', false);\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n\r\n                    payload: caseNo === 1 ? {\r\n                        formulaData: {\r\n                            ...formulaData,\r\n                            testMaster: testMasterMap.get(\"OptionList\"),\r\n                            dynamicFormulaFields: masterData[\"DynamicFormulaFields\"] || []\r\n                        },\r\n                        selectedRecord: {\r\n                            ...selectedRecordData,\r\n                            ntestcode: testMasterMap.get(\"OptionList\") && testMasterMap.get(\"OptionList\").length > 0 ? testMasterMap.get(\"OptionList\")[0] : \"\"\r\n                            // masterData[\"TestMaster\"].length>0? {\"label\": masterData[\"TestMaster\"][0][\"stestname\"], \"value\": masterData[\"TestMaster\"][0][\"ntestcode\"]}: \"\"\r\n                        },\r\n                        loading: false\r\n                    } : {\r\n                        formulaData: {\r\n                            ...formulaData,\r\n                            dynamicFormulaFields: masterData[\"DynamicFormulaFields\"]\r\n                        },\r\n                        loading: false\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                });\r\n                toast.error(error.message);\r\n            });\r\n    }\r\n}\r\n\r\nexport const changeTestCategoryFilter = (inputParam, filterTestCategory) => {\r\n    return (dispatch) => {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/testmaster/get\" + inputParam.methodUrl, inputParam.inputData)\r\n            .then(response => {\r\n                const masterData = response.data\r\n                sortData(masterData);\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false,\r\n                        masterData: {\r\n                            ...masterData,\r\n                            filterTestCategory,\r\n                            nfilterTestCategory: inputParam.inputData.nfilterTestCategory\r\n                        }\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                });\r\n                toast.error(error.message);\r\n            });\r\n    }\r\n}\r\n\r\nexport const addTestFile = (inputParam) => {\r\n    return (dispatch) => {\r\n        dispatch(initRequest(true));\r\n        let urlArray = [rsapi.post(\"/linkmaster/getLinkMaster\", {\r\n            userinfo: inputParam.userInfo\r\n        })];\r\n        if (inputParam.operation === \"update\") {\r\n            urlArray.push(rsapi.post(\"/testmaster/editTestFile\", {\r\n                userinfo: inputParam.userInfo,\r\n                testfile: inputParam.selectedRecord\r\n            }))\r\n        }\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                const linkMap = constructOptionList(response[0].data.LinkMaster, \"nlinkcode\", \"slinkname\", false, false, true);\r\n                const linkmaster = linkMap.get(\"OptionList\");\r\n                let selectedRecord = {};\r\n                const defaultLink = linkmaster.filter(items => items.item.ndefaultlink === transactionStatus.YES);\r\n                let disabled = false;\r\n                let editObject = {};\r\n                if (inputParam.operation === \"update\") {\r\n                    editObject = response[1].data;\r\n                    let nlinkcode = {};\r\n                    let link = {};\r\n                    if (editObject.nattachmenttypecode === attachmentType.LINK) {\r\n                        nlinkcode = {\r\n                            \"label\": editObject.slinkname,\r\n                            \"value\": editObject.nlinkcode\r\n                        }\r\n\r\n                        link = {\r\n                            slinkfilename:editObject.sfilename,\r\n                            slinkdescription:editObject.sdescription,\r\n                            nlinkdefaultstatus:editObject.ndefaultstatus,\r\n                            sfilesize:'',\r\n                            nfilesize:0,\r\n                            ndefaultstatus:4,\r\n                            sfilename:'',\r\n                        }\r\n\r\n                    } else {\r\n                        nlinkcode = defaultLink.length > 0 ? defaultLink[0] : \"\" //{\"label\": defaultLink[0].slinkname, \"value\": defaultLink[0].nlinkcode}:\"\"\r\n                        link = {\r\n                            slinkfilename:'',\r\n                            slinkdescription:'',\r\n                            nlinkdefaultstatus:4,\r\n                            sfilesize:editObject.sfilesize,\r\n                            nfilesize:editObject.nfilesize,\r\n                            ndefaultstatus:editObject.ndefaultstatus,\r\n                            sfilename:editObject.sfilename,\r\n                        }\r\n                    }\r\n\r\n\r\n\r\n                    selectedRecord = {\r\n                        ...link,\r\n                        ntestfilecode:editObject.ntestfilecode,\r\n                        nattachmenttypecode:editObject.nattachmenttypecode,\r\n                        ...editObject,\r\n                        nlinkcode,\r\n        \r\n                       // disabled: true\r\n                    };\r\n                } else {\r\n                    selectedRecord = {\r\n                        nattachmenttypecode:response[0].data.AttachmentType.length>0?\r\n                        response[0].data.AttachmentType[0].nattachmenttypecode:attachmentType.FTP,\r\n                        nlinkcode: defaultLink.length > 0 ? defaultLink[0] : \"\", //{\"label\": defaultLink[0].slinkname, \"value\": defaultLink[0].nlinkcode}:\"\",\r\n                        disabled\r\n                    };\r\n                }\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        [inputParam.modalName]: true,\r\n                        operation: inputParam.operation,\r\n                        screenName: inputParam.screenName,\r\n                        ncontrolCode: inputParam.ncontrolCode,\r\n                        selectedRecord,\r\n                        loading: false,\r\n                        linkMaster: linkmaster,\r\n                        showSaveContinue: false,\r\n                        editFiles: editObject.nattachmenttypecode === attachmentType.FTP ? editObject : {}\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                });\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            });\r\n    }\r\n}\r\n \r\n\r\nexport const getActiveTestContainerTypeById = (containerParam) => {\r\n    return function (dispatch) {\r\n        let urlArray = [];\r\n        const containerTypeById =rsapi.post(\"containertype/getContainerType\", {\r\n            \"userinfo\": containerParam.userInfo});\r\n        \r\n          \r\n            const containerById=rsapi.post(\"testmaster/getActiveTestContainerTypeById\", {\r\n                [containerParam.primaryKeyField] :containerParam.primaryKeyValue,\r\n                \"userinfo\": containerParam.userInfo\r\n                });\r\n                const units =rsapi.post(\"unit/getUnit\", {\r\n                    \"userinfo\": containerParam.userInfo});\r\n            urlArray = [containerTypeById, containerById,units];\r\n\r\n\r\n        dispatch(initRequest(true));\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                let selectedRecord = {};\r\n               \r\n                const continerType = constructOptionList(response[0].data || [], \"ncontainertypecode\", \"scontainertype\", false, false, true);\r\n                const unitMap = constructOptionList(response[2].data || [], \"nunitcode\", \"sunitname\", false, false, true);\r\n\r\n                let otherTestData = {\r\n                    containertype: continerType.get(\"OptionList\"),\r\n                    unit: unitMap.get(\"OptionList\")\r\n                }\r\n                let ContainerType = [];\r\n                let unit=[];\r\n\r\n                ContainerType.push({\r\n                    \"value\": response[1].data[\"ncontainertypecode\"],\r\n                    \"label\": response[1].data[\"scontainertype\"]\r\n                });\r\n                selectedRecord = response[1].data;\r\n\r\n                selectedRecord[\"ncontainertypecode\"] = ContainerType[0];\r\n                   \r\n                unit.push({\r\n                    \"value\": response[1].data[\"nunitcode\"],\r\n                    \"label\": response[1].data[\"sunitname\"]\r\n                });\r\n                selectedRecord = response[1].data;\r\n                selectedRecord[\"nunitcode\"] = unit[0];\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        otherTestData:otherTestData,\r\n                       selectedRecord: selectedRecord,\r\n                        isOpen: true,\r\n                        operation: containerParam.operation,\r\n                        screenName: \"IDS_CONTAINERTYPE\",\r\n                        openChildModal: true,\r\n                        loading: false\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(intl.formatMessage({\r\n                        id: error.message\r\n                    }));\r\n                } else {\r\n                    toast.warn(intl.formatMessage({\r\n                        id: error.response.data\r\n                    }));\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\nexport const addContainerType = (operation, testparametercode, userInfo, ncontrolCode) => {\r\n    return function (dispatch) {\r\n        let urlArray = [];\r\n        const containerTypeById =rsapi.post(\"unit/getUnit\", {\r\n            \"userinfo\": userInfo});\r\n        \r\n          \r\n             const containerById=rsapi.post(\"testmaster/getAvailableContainerType\", {\r\n                \"TestMaster\": testparametercode,\r\n                 \"userinfo\": userInfo\r\n                 });\r\n             urlArray = [containerTypeById,containerById];\r\n\r\n\r\n        dispatch(initRequest(true));\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                let selectedRecord = {};\r\n                const unitMap = constructOptionList(response[0].data || [], \"nunitcode\", \"sunitname\", false, false, true);\r\n \r\n                const continerType = constructOptionList(response[1].data || [], \"ncontainertypecode\", \"scontainertype\", false, false, true);\r\n\r\n                let otherTestData = {\r\n                    containertype: continerType.get(\"OptionList\"),\r\n                    unit: unitMap.get(\"OptionList\")\r\n\r\n                }\r\n                \r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        otherTestData:otherTestData,\r\n                       selectedRecord: selectedRecord,\r\n                        isOpen: true,\r\n                        operation: operation,\r\n                        screenName: \"IDS_CONTAINERTYPE\",\r\n                        openChildModal: true,\r\n                        loading: false\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(intl.formatMessage({\r\n                        id: error.message\r\n                    }));\r\n                } else {\r\n                    toast.warn(intl.formatMessage({\r\n                        id: error.response.data\r\n                    }));\r\n                }\r\n            })\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}