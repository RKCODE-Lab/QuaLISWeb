{"ast":null,"code":"var _jsxFileName = \"E:\\\\WorkingFolder\\\\React_Postgres\\\\ALPD\\\\branches\\\\SOURCE-513-PROD\\\\SOURCE-513-ALPD-5294\\\\QuaLISWeb\\\\src\\\\pages\\\\credentialmanagement\\\\UserRoleScreenHide.jsx\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { injectIntl } from 'react-intl';\nimport { Row, Col, Nav, Card, Button } from 'react-bootstrap';\nimport { Grid, GridColumn } from '@progress/kendo-react-grid';\nimport { process } from '@progress/kendo-data-query';\nimport { toast } from 'react-toastify';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faTrashAlt, faSave, faCopy, faPlus } from '@fortawesome/free-solid-svg-icons';\nimport FormSelectSearch from '../../components/form-select-search/form-select-search.component';\nimport CustomSwitch from '../../components/custom-switch/custom-switch.component';\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\nimport Esign from '../audittrail/Esign';\nimport AddScreenRights from './AddScreenRights';\nimport { showEsign, getControlMap, constructOptionList, sortData } from '../../components/CommonScript';\nimport { callService, crudMaster, validateEsignCredential, updateStore, getScreenRightsDetail, copyScreenRights, filterTransactionList, comboChangeUserRoleScreenRights, handleClickDelete, filterColumnData, getCopyUseRoleScreenRights, checkUserRoleScreenRights, reload } from '../../actions';\nimport { initialcombochangeget, getUserScreenhideComboService, comboChangeUserRoleScreenRightsHide, getUserScreenhideDetail, ListSwitchUpdate } from '../../actions/UserRoleScreenHideAction';\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\nimport { transactionStatus } from '../../components/Enumeration';\nimport { ContentPanel, AtSubCard } from '../../components/App.styles';\nimport { AtTableWrap } from '../../components/data-grid/data-grid.styles';\nimport TransactionListMaster from '../../components/TransactionListMaster';\nimport { ProductList } from '../product/product.styled';\nimport ConfirmMessage from '../../components/confirm-alert/confirm-message.component';\nimport PerfectScrollbar from 'react-perfect-scrollbar';\nimport SplitterLayout from 'react-splitter-layout'; // import { Tooltip } from '@progress/kendo-react-tooltip';\n\nimport BreadcrumbComponent from '../../components/Breadcrumb.Component';\nimport ReactTooltip from 'react-tooltip';\nimport UserRoleScreenHideFilter from './UserRoleScreenHideFilter';\nimport { ReactComponent as RefreshIcon } from \"@svgr/webpack?-svgo,+titleProp,+ref!../../assets/image/refresh.svg\";\n\nconst mapStateToProps = state => {\n  return {\n    Login: state.Login\n  };\n};\n\nclass UserRoleScreenHide extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.dataStateChange = event => {\n      // if (event.dataState.group.length === 1 && event.dataState.group[0].field === 'screenname')\n      // {\n      this.setState({\n        dataResult: process(this.props.Login.masterData.ControlRights || [], event.dataState),\n        dataState: event.dataState\n      }); //}\n    };\n\n    this.expandChange = event => {\n      const isExpanded = event.dataItem.expanded === undefined ? event.dataItem.aggregates : event.dataItem.expanded;\n      event.dataItem.expanded = !isExpanded;\n      this.setState({ ...this.state\n      }); //this.setState({ ...this.state.dataState });\n    };\n\n    this.paneSizeChange = d => {\n      this.setState({\n        splitChangeWidthPercentage: d\n      });\n    };\n\n    this.ListmasterSwitch = (event, nusersrolehidescreencode) => {\n      // let inputData = [];\n      //  inputData[\"nuserrolecode\"] = this.state.selectedcombo[\"nuserrolecode\"];\n      // inputData[\"nusercodemain\"] = this.state.selectedcombouser[\"nusercode\"];\n      const selectedSwitch = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\n      const inputParam = {\n        needrights: selectedSwitch,\n        nusersrolehidescreencode: nusersrolehidescreencode,\n        nuserrolecode: this.state.selectedcombo[\"nuserrolecode\"].value,\n        nusercodemain: this.state.selectedcombouser[\"nusercode\"].value\n      };\n      this.props.ListSwitchUpdate(inputParam, this.props.Login.masterData, this.props.Login.userInfo); // this.setState({selectedListmasterSwitch:selectedSwitch});\n    };\n\n    this.switchGroupBy = event => {\n      const selectedSwitch = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\n      let dataState = this.state.dataState || {};\n\n      if (selectedSwitch === transactionStatus.YES) {\n        dataState = { ...dataState,\n          group: [{\n            field: 'screenname'\n          }]\n        };\n      } else {\n        dataState = {\n          skip: dataState.skip,\n          take: dataState.take\n        };\n      }\n\n      this.setState({\n        selectedSwitch,\n        dataState\n      });\n    };\n\n    this.ConfirmDelete = deleteId => {\n      this.confirmMessage.confirm(\"deleteMessage\", this.props.intl.formatMessage({\n        id: \"IDS_DELETE\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_DEFAULTCONFIRMMSG\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_OK\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_CANCEL\"\n      }), () => this.handleClickDelete(this.props.Login.masterData, deleteId, \"openModal\"));\n    };\n\n    this.openFilter = () => {\n      let showFilter = !this.props.Login.showFilter;\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          showFilter\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.closeFilter = () => {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          showFilter: false\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onFilterSubmit = () => {\n      this.searchRef.current.value = \"\"; // this.reloadData(this.state.selectedRecord, true);\n\n      let inputData = [];\n      inputData[\"nuserrolecode\"] = this.state.selectedcombo[\"nuserrolecode\"];\n      inputData[\"nusercodemain\"] = this.state.selectedcombouser[\"nusercode\"]; // const inputParam = {\n      //     classUrl: \"userscreenhide\",\n      //     methodUrl: \"UserScreenhide\",\n      //     displayName: \"IDS_USERSCREENHIDE\",\n      //     inputData: inputData\n      //     //,\n      //     // operation: operation, saveType, formRef, searchRef: this.searchRef, postParam,dataState: this.state.dataState\n      // }\n\n      if (this.state.selectedcombo[\"nuserrolecode\"]) {\n        this.props.comboChangeUserRoleScreenRightsHide(this.state.selectedcombo, this.state.selectedcombouser, this.props.Login.masterData, this.props.Login.userInfo); // this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\n        //  this.props.callService(inputParam);\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTUSERROLE\"\n        }));\n      }\n    };\n\n    this.handlePageChange = e => {\n      console.log('zzzzzzzzzz', e.skip);\n      console.log('zzzzzzzzzz1', e.take);\n      this.setState({\n        skip: e.skip,\n        take: e.take\n      }); //setTimeout(() => { this._scrollBarRef.updateScroll() })\n    };\n\n    this.validateEsign = () => {\n      const inputParam = {\n        inputData: {\n          \"userinfo\": { ...this.props.Login.userInfo,\n            sreason: this.state.selectedRecord[\"esigncomments\"],\n            nreasoncode: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].value,\n            spredefinedreason: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].label\n          },\n          password: this.state.selectedRecord[\"esignpassword\"]\n        },\n        screenData: this.props.Login.screenData\n      };\n      this.props.validateEsignCredential(inputParam, \"openModal\");\n    };\n\n    this.closeModal = () => {\n      let loadEsign = this.props.Login.loadEsign;\n      let openModal = this.props.Login.openModal;\n      let selectedRecord = this.props.Login.selectedRecord;\n\n      if (this.props.Login.loadEsign) {\n        if (this.props.Login.operation === \"delete\" || this.props.Login.operation === \"retire\") {\n          loadEsign = false;\n          openModal = false;\n          selectedRecord = {};\n        } else {\n          loadEsign = false;\n          selectedRecord['esignpassword'] = \"\";\n          selectedRecord['esigncomments'] = \"\";\n          selectedRecord['esignreason'] = \"\";\n        }\n      } else {\n        openModal = false;\n        selectedRecord = {};\n      }\n\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          openModal,\n          loadEsign,\n          selectedRecord,\n          selectedId: null\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onComboChange = (comboData, fieldName) => {\n      if (comboData != null) {\n        if (fieldName === \"nuserrolecode\") {\n          const selectedcombo = this.state.selectedcombo || {};\n          selectedcombo[fieldName] = comboData;\n          this.searchRef.current.value = \"\"; //Added by Allwin for Combo Change Get\n          // const inputParamcombo = {\n          //     nuserrolecode: comboData.item.nuserrolecode\n          // };\n          // const selectedcombouser = this.state.selectedcombouser || {};\n          // selectedcombouser= this.props.initialcombochangeget(comboData.item.nuserrolecode);\n\n          this.props.initialcombochangeget(comboData.item.nuserrolecode, this.props.Login.masterData, this.props.Login.userInfo); //    this.props.initialcombochangeget(comboData.item.nuserrolecode);\n          //  this.props.initialcombochangeget(comboData.item.nuserrolecode,this.props.Login.masterData, this.props.Login.userInfo);\n          //this.setState({ selectedcombo});\n          // let dataState = this.state.dataState || {};\n          // dataState= {...dataState, group: [{ field: 'screenname' }]} ;\n          // masterData[\"ControlRights\"]=[]\n          // this.props.comboChangeUserRoleScreenRights(comboData.value, this.props.Login.masterData, this.props.Login.userInfo, selectedcombo);\n        } else if (fieldName === \"nusercode\") {\n          const selectedcombouser = this.state.selectedcombouser || {};\n          selectedcombouser[fieldName] = comboData;\n          this.setState({\n            selectedcombouser\n          });\n        } else if (fieldName === \"value\") {\n          const comboitem = this.state.comboitem || {};\n          comboitem[fieldName] = comboData;\n          this.setState({\n            comboitem\n          });\n        } else if (fieldName === \"nformcode\") {\n          const selectedRecord = this.state.selectedRecord || {};\n          selectedRecord[\"nformcode\"] = comboData;\n          let availableDatas = [];\n          this.state.selectedRecord.nformcode.map(data => {\n            return availableDatas.push(data.item);\n          });\n          this.setState({\n            selectedRecord,\n            availableDatas\n          });\n        }\n      }\n    };\n\n    this.onComboChangeUserRole = (comboData, fieldName) => {\n      if (comboData != null) {\n        const selectedRecord = this.state.selectedRecord || {}; //this.state.selectedRecord || {};\n\n        selectedRecord[\"nuserrole\"] = comboData;\n\n        if (fieldName === \"nuserrole\") {\n          this.props.checkUserRoleScreenRights(comboData.value, this.props.Login.masterData, this.props.Login.userInfo, selectedRecord);\n        }\n      }\n    };\n\n    this.onInputOnChange = event => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (event.target.type === 'checkbox') {\n        if (event.target.name === \"ntransactionstatus\") selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.ACTIVE : transactionStatus.DEACTIVE;else selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\n      } else {\n        selectedRecord[event.target.name] = event.target.value;\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.saveClick = (selectedRecord, saveType, formRef) => {\n      let operation = \"update\"; // let methodUrl = \"\";\n\n      let inputData = [];\n      let postParam = {\n        inputListName: \"ScreenRights\",\n        selectedObject: \"SelectedScreenRights\",\n        primaryKeyField: \"nusersrolehidescreencode\"\n      };\n      inputData[\"userinfo\"] = this.props.Login.userInfo;\n      inputData[\"selectedscreenrights\"] = this.props.Login.masterData.SelectedScreenRights;\n      inputData[\"nflag\"] = transactionStatus.ACTIVE;\n      inputData[\"screenrights\"] = selectedRecord;\n\n      if (saveType === 1) {\n        inputData[\"needrights\"] = selectedRecord[\"needrights\"];\n        inputData[\"nneedesign\"] = null; //methodUrl = \"ControlRights\";\n      } else {\n        inputData[\"nneedesign\"] = selectedRecord[\"nneedesign\"]; // methodUrl = \"Esign\";\n      }\n\n      const inputParam = {\n        classUrl: \"userscreenhide\",\n        methodUrl: \"ScreenHideControlRights\",\n        displayName: this.props.Login.inputParam.displayName,\n        inputData: inputData,\n        operation: operation,\n        saveType,\n        formRef,\n        searchRef: this.searchRef,\n        postParam,\n        dataState: this.state.dataState\n      };\n      this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\n    };\n\n    this.onSaveClick = (saveType, formRef) => {\n      let inputData = [];\n      let inputParam = {};\n      inputData[\"userinfo\"] = this.props.Login.userInfo;\n      let postParam = undefined;\n      inputData[\"userscreenhide\"] = this.state.availableDatas;\n      inputData[\"nuserrolecode\"] = this.state.selectedcombo[\"nuserrolecode\"] ? this.state.selectedcombo[\"nuserrolecode\"].value : \"\";\n      inputData[\"userrolecode\"] = this.state.selectedRecord[\"nuserrole\"] ? this.state.selectedRecord[\"nuserrole\"].value : \"\";\n      inputData[\"usercode\"] = this.state.selectedcombouser[\"nusercode\"] ? this.state.selectedcombouser[\"nusercode\"].value : \"\"; // inputData[\"nusercode\"] = this.state.selectedcombouser[\"nusercode\"] ? this.state.selectedcombouser[\"nusercode\"].value : \"\";\n\n      inputParam = {\n        classUrl: this.props.Login.inputParam.classUrl,\n        methodUrl: \"UserScreenhide\",\n        inputData: inputData,\n        operation: this.props.Login.operation,\n        saveType,\n        formRef,\n        postParam,\n        selectedRecord: this.state.selectedRecord,\n        searchRef: this.searchRef,\n        dataState: this.state.dataState\n      };\n      const masterData = this.props.Login.masterData;\n\n      if (this.props.Login.screenName === \"IDS_SCREENRIGHTS\") {\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              loadEsign: true,\n              screenData: {\n                inputParam,\n                masterData\n              },\n              saveType\n            }\n          };\n          this.props.updateStore(updateInfo);\n        } else {\n          this.props.crudMaster(inputParam, masterData, \"openModal\");\n        }\n      } else {\n        if (this.props.Login.masterData.copyScreenRights ? this.props.Login.masterData.copyScreenRights.length > 0 : false) {\n          this.ConfirmComponent();\n        } else {\n          if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\n            const updateInfo = {\n              typeName: DEFAULT_RETURN,\n              data: {\n                loadEsign: true,\n                screenData: {\n                  inputParam,\n                  masterData\n                },\n                saveType\n              }\n            };\n            this.props.updateStore(updateInfo);\n          } else {\n            this.props.copyScreenRights(this.state.selectedRecord ? this.state.selectedRecord[\"nuserrole\"].value : \"\", this.state.selectedcombo[\"nuserrolecode\"] ? this.state.selectedcombo[\"nuserrolecode\"].value : \"\", this.props.Login.userInfo, this.props.Login.masterData);\n          }\n        }\n      }\n    };\n\n    this.copyAlertSave = () => {\n      let inputData = [];\n      let inputParam = {};\n      inputData[\"userinfo\"] = this.props.Login.userInfo;\n      let postParam = undefined;\n      inputData[\"screenrights\"] = this.state.availableDatas;\n      inputData[\"nuserrolecode\"] = this.state.selectedcombo[\"nuserrolecode\"] ? this.state.selectedcombo[\"nuserrolecode\"].value : \"\";\n      inputData[\"userrolecode\"] = this.state.selectedRecord ? this.state.selectedRecord[\"nuserrole\"].value : \"\";\n      inputParam = {\n        classUrl: this.props.Login.inputParam.classUrl,\n        methodUrl: \"ScreenRights\",\n        inputData: inputData,\n        operation: this.props.Login.operation,\n        postParam,\n        searchRef: this.searchRef\n      };\n      const masterData = this.props.Login.masterData;\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData\n            }\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.copyScreenRights(this.state.selectedRecord ? this.state.selectedRecord[\"nuserrole\"].value : \"\", this.state.selectedcombo[\"nuserrolecode\"] ? this.state.selectedcombo[\"nuserrolecode\"].value : \"\", this.props.Login.userInfo, this.props.Login.masterData);\n      }\n    };\n\n    this.onSaveAllControlAndEsign = (skip, take, saveType, formRef) => {\n      let value = this.state.comboitem ? this.state.comboitem.value.value : this.ControlButton[0].value;\n      let operation = \"\"; // let methodUrl = \"\";\n\n      let inputData = [];\n      let postParam = undefined;\n      inputData[\"userinfo\"] = this.props.Login.userInfo; // inputData[\"selectedscreenrights\"] = this.props.Login.masterData.SelectedScreenRights.slice(skip, skip + take);\n\n      inputData[\"selectedscreenrights\"] = this.props.Login.masterData.SelectedScreenRights;\n      inputData[\"nflag\"] = transactionStatus.DEACTIVE;\n      postParam = {\n        inputListName: \"ScreenRights\",\n        selectedObject: \"SelectedScreenRights\",\n        primaryKeyField: \"nusersrolehidescreencode\"\n      };\n\n      if (value === 1) {\n        inputData[\"needrights\"] = transactionStatus.YES;\n        inputData[\"nneedesign\"] = null;\n        operation = \"update\"; // methodUrl = \"ControlRights\";\n      } else if (value === 2) {\n        inputData[\"needrights\"] = transactionStatus.NO;\n        inputData[\"nneedesign\"] = null;\n        operation = \"update\"; //  methodUrl = \"ControlRights\";\n      } else if (value === 3) {\n        inputData[\"nneedesign\"] = transactionStatus.YES;\n        operation = \"update\"; //  methodUrl = \"Esign\";\n      } else if (value === 4) {\n        inputData[\"nneedesign\"] = transactionStatus.NO;\n        operation = \"update\"; //  methodUrl = \"Esign\";\n      }\n\n      const inputParam = {\n        classUrl: \"userscreenhide\",\n        methodUrl: \"ScreenHideControlRights\",\n        displayName: this.props.Login.inputParam.displayName,\n        inputData: inputData,\n        operation: operation,\n        saveType,\n        formRef,\n        postParam,\n        searchRef: this.searchRef,\n        selectedcombo: this.props.Login.selectedcombo\n      };\n      this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\n    };\n\n    this.ConfirmComponent = () => {\n      this.confirmMessage.confirm(\"confirmation\", \"Confiramtion!\", this.props.intl.formatMessage({\n        id: \"IDS_OVERWRITRTHEEXISTINGSCREENRIGHTS\"\n      }), \"ok\", \"cancel\", () => this.copyAlertSave());\n    };\n\n    this.reloadData = () => {\n      this.searchRef.current.value = \"\";\n\n      if (this.props.Login.masterData.SelectedUserRole) {\n        let comboitem = {}; //let selectedcombo= this.state.selectedcombo;\n\n        comboitem[\"value\"] = this.ControlButton[0];\n        this.searchRef.current.value = \"\";\n        const inputParam = {\n          inputData: {\n            \"userinfo\": this.props.Login.userInfo\n          },\n          classUrl: \"userscreenhide\",\n          methodUrl: \"getUserScreenhide\",\n          displayName: \"UserScreenhide\",\n          userInfo: this.props.Login.userInfo,\n          comboitem,\n          nuserrolecode: this.props.Login.masterData.SelectedUserRole,\n          masterData: this.props.Login.masterData,\n          skip: this.state.skip,\n          take: this.state.take\n        };\n        this.props.reload(inputParam);\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTUSERROLE\"\n        }));\n      }\n    };\n\n    const _dataState = {\n      skip: 0,\n      take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 //, group: [{ field: 'screenname' }]\n\n    };\n    this.searchFieldList = [\"sdisplayname\"];\n    this.state = {\n      masterStatus: \"\",\n      error: \"\",\n      isOpen: false,\n      ScreenRightsData: [],\n      userRoleData: [],\n      availableDatas: [],\n      selectedRecord: {},\n      userroleList: [],\n      operation: \"\",\n      comboitem: undefined,\n      screenName: undefined,\n      SelectedScreenrights: undefined,\n      selectedcombo: undefined,\n      selectedcomboUserRole: undefined,\n      selectedcombouser: undefined,\n      userrnameList: [],\n      selectedListmasterSwitch: undefined,\n      custombuttonstate: false,\n      ControlRightsParent: [],\n      userRoleControlRights: [],\n      ControlRights: undefined,\n      ConfirmDialogScreen: false,\n      controlMap: new Map(),\n      showAccordian: true,\n      dataResult: [],\n      skip: 0,\n      take: this.props.Login.settings && this.props.Login.settings[3],\n      dataState: _dataState,\n      columnName: '',\n      rowIndex: 0,\n      data: [],\n      splitChangeWidthPercentage: 30\n    };\n    this.searchRef = React.createRef();\n    this.ControlButton = [{\n      value: 1,\n      label: this.props.intl.formatMessage({\n        id: \"IDS_ENABLEALLCONTROLRIGHTS\"\n      })\n    }, {\n      value: 2,\n      label: this.props.intl.formatMessage({\n        id: \"IDS_DISABLEALLCONTROLRIGHTS\"\n      })\n    }, {\n      value: 3,\n      label: this.props.intl.formatMessage({\n        id: \"IDS_ENABLEALLESIGNRIGHTS\"\n      })\n    }, {\n      value: 4,\n      label: this.props.intl.formatMessage({\n        id: \"IDS_DISABLEALLESIGNRIGHTS\"\n      })\n    }];\n    this.confirmMessage = new ConfirmMessage();\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\n      toast.warn(props.Login.masterStatus);\n      props.Login.masterStatus = \"\";\n    }\n\n    if (props.Login.error !== state.error) {\n      toast.error(props.Login.error);\n      props.Login.error = \"\";\n    }\n\n    return null;\n  }\n\n  render() {\n    // console.log(\"master:\", this.props.Login.masterData, this.state.dataResult)\n    //added by allwin \n    ///FOR SORTING DATa BASED ON nusersrolehidescreencode***************************************************************\n    this.props.Login.masterData.ScreenRights && sortData(this.props.Login.masterData.ScreenRights, '', 'nusersrolehidescreencode');\n    const searchedData = this.props.Login.masterData.searchedData;\n    const ScreenRights = this.props.Login.masterData.ScreenRights || [];\n    const addId = this.state.controlMap.has(\"AddUserScreenhide\") && this.state.controlMap.get(\"AddUserScreenhide\").ncontrolcode;\n    const deleteId = this.state.controlMap.has(\"DeleteUserScreenhide\") && this.state.controlMap.get(\"DeleteUserScreenhide\").ncontrolcode;\n    const copyId = this.state.controlMap.has(\"CopyScreenRights\") && this.state.controlMap.get(\"CopyScreenRights\").ncontrolcode; //const ListScreenHideId = this.state.controlMap.has(\"ListScreenHide\") && this.state.controlMap.get(\"ListScreenHide\").ncontrolcode;\n    //console.log('kkkkk',this.props.Login.masterData.SelectedUserName)\n\n    const filterParam = {\n      inputListName: \"ScreenRights\",\n      selectedObject: \"SelectedScreenRights\",\n      primaryKeyField: \"nformcode\",\n      fetchUrl: \"userscreenhide/getSearchScreenHide\",\n      //  fetchUrl: \"screenrights/getSearchScreenRights\",\n      userinfo: this.props.Login.userInfo,\n      fecthInputObject: {\n        userinfo: this.props.Login.userInfo,\n        nusercode: this.props.Login.masterData.SelectedUserName && this.props.Login.masterData.SelectedUserName.nusercode\n      },\n      masterData: this.props.Login.masterData,\n      searchFieldList: this.searchFieldList,\n      changeList: [],\n      isSingleSelect: false\n    }; // const filterParam = {\n    //     inputListName: \"ScreenRights\",\n    //     selectedObject: \"SelectedScreenRights\",\n    //     primaryKeyField: \"nuserrolescreencode\",\n    //     fetchUrl: \"screenrights/getSearchScreenRights\",\n    //     userinfo: this.props.Login.userInfo,\n    //     fecthInputObject: { userinfo: this.props.Login.userInfo },\n    //     masterData: this.props.Login.masterData,\n    //     searchFieldList: this.searchFieldList, changeList: [], isSingleSelect: false\n    // };\n\n    const mandatoryFieldsScreenRights = [{\n      \"mandatory\": true,\n      \"idsName\": \"IDS_USERSCREENHIDE\",\n      \"dataField\": \"nusersrolehidescreencode\",\n      \"mandatoryLabel\": \"IDS_SELECT\",\n      \"controlType\": \"selectbox\"\n    }];\n    const mandatoryFieldsUsers = [{\n      \"mandatory\": true,\n      \"idsName\": \"IDS_SCREENRIGHTS\",\n      \"dataField\": \"nformcode\",\n      \"mandatoryLabel\": \"IDS_SELECT\",\n      \"controlType\": \"selectbox\"\n    }]; // let screenlen = searchedData ? searchedData.length : ScreenRights.length\n    // const demo=[];\n    // this.props.Login.masterData.UsersMain&&          \n    // demo.push(\n    //     {\n    //         \"label\": \"IDS_USER\",\n    //         \"value\": this.props.Login.masterData.UsersMain[0].susername\n    //     },\n    // );\n\n    const breadCrumbData = this.state.filterData || [];\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"client-listing-wrap mtop-4 screen-height-window\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 17\n      }\n    }, breadCrumbData.length > 0 ?\n    /*#__PURE__*/\n    // <Affix top={64}>\n    React.createElement(BreadcrumbComponent, {\n      breadCrumbItem: breadCrumbData,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 25\n      }\n    }) // </Affix> \n    : \"\", /*#__PURE__*/React.createElement(Row, {\n      noGutters: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      className: \"parent-port-height sticky_head_parent\",\n      ref: parentHeight => {\n        this.parentHeight = parentHeight;\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(SplitterLayout, {\n      borderColor: \"#999\",\n      percentage: true,\n      primaryIndex: 1,\n      secondaryInitialSize: this.state.splitChangeWidthPercentage,\n      onSecondaryPaneSizeChange: this.paneSizeChange,\n      primaryMinSize: 40,\n      secondaryMinSize: 20,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(TransactionListMaster, {\n      splitChangeWidthPercentage: this.state.splitChangeWidthPercentage,\n      masterList: searchedData || ScreenRights || [],\n      selectedMaster: this.props.Login.masterData.SelectedScreenRights,\n      primaryKeyField: \"nusersrolehidescreencode\",\n      getMasterDetail: this.props.getUserScreenhideDetail,\n      inputParam: {\n        userinfo: this.props.Login.userInfo,\n        masterData: this.props.Login.masterData,\n        dataState: this.state.dataState,\n        skip: this.state.skip,\n        take: this.state.take\n      },\n      additionalParam: ['napprovalversioncode'],\n      mainField: \"sdisplayname\",\n      selectedListName: \"SelectedScreenRights\",\n      filterColumnData: this.props.filterTransactionList,\n      searchListName: \"searchedData\",\n      searchRef: this.searchRef,\n      filterParam: filterParam,\n      objectName: \"screenrights\",\n      listName: \"IDS_SCREENRIGHTS\",\n      hideQuickSearch: true,\n      skip: this.state.skip,\n      take: this.state.take,\n      handlePageChange: this.handlePageChange,\n      hidePaging: false,\n      needFilter: true,\n      needAccordianFilter: false,\n      childTabsKey: [\"ControlRights\"],\n      openFilter: this.openFilter,\n      closeFilter: this.closeFilter,\n      onFilterSubmit: this.onFilterSubmit //ListmasterSwitch\n      ,\n      ListmasterSwitch: this.ListmasterSwitch,\n      selectedListmasterSwitch: this.state.selectedListmasterSwitch,\n      ListScreenHidebtn: this.state.controlMap.has(\"ListScreenHide\") && this.state.controlMap.get(\"ListScreenHide\").ncontrolcode //  needrightsList={this.props.Login}\n      ,\n      filterComponent: [{\n        \"IDS_FILTER\": /*#__PURE__*/React.createElement(UserRoleScreenHideFilter, {\n          filterUserRole: this.state.userroleList || [],\n          userrnameList: this.state.userrnameList || [],\n          selectedRecord: this.state.selectedcombo || {} //\n          ,\n          selectedcombouser: this.state.selectedcombouser || {},\n          onComboChange: this.onComboChange,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 249,\n            columnNumber: 49\n          }\n        })\n      }] // accordianfilterComponent={[\n      //     {\n      //         \"IDS_USERROLE\":\n      //             <ScreenRightsFilter\n      //                 filterUserRole={this.state.userroleList || []}\n      //                 selectedRecord={this.state.selectedcombo || {}}//\n      //                 onComboChange={this.onComboChange}\n      //             />\n      //     }\n      // ]}\n      ,\n      needMultiSelect: true,\n      commonActions:\n      /*#__PURE__*/\n      // <Tooltip position=\"bottom\" anchorElement=\"target\" openDelay={100} parentTitle={true}>\n      React.createElement(ProductList, {\n        className: \"d-flex product-category float-right\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 271,\n          columnNumber: 41\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        className: \"btn btn-icon-rounded btn-circle solid-blue\",\n        \"data-tip\": this.props.intl.formatMessage({\n          id: \"IDS_ADD\"\n        }) //    data-for=\"tooltip_list_wrap\"\n        ,\n        role: \"button\",\n        hidden: this.state.userRoleControlRights.indexOf(addId) === -1,\n        onClick: () => this.props.getUserScreenhideComboService(\"IDS_SCREENRIGHTS\", \"create\", this.props.Login.userInfo, this.state.selectedcombo, this.state.selectedcombouser, addId),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 273,\n          columnNumber: 45\n        }\n      }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n        icon: faPlus,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 280,\n          columnNumber: 49\n        }\n      })), /*#__PURE__*/React.createElement(Button, {\n        className: \"btn btn-circle outline-grey ml-2 p-0\",\n        variant: \"link\",\n        \"data-tip\": this.props.intl.formatMessage({\n          id: \"IDS_RELOAD\"\n        }) //  data-for=\"tooltip_list_wrap\"\n        ,\n        onClick: () => this.onFilterSubmit(),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 282,\n          columnNumber: 45\n        }\n      }, /*#__PURE__*/React.createElement(RefreshIcon, {\n        className: \"custom_icons\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 286,\n          columnNumber: 53\n        }\n      }))) // </Tooltip>\n      ,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 33\n      }\n    }), /*#__PURE__*/React.createElement(PerfectScrollbar, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 295,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"fixed_list_height\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 296,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 297,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 298,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(ContentPanel, {\n      className: \"panel-main-content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 299,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      className: \"border-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 300,\n        columnNumber: 53\n      }\n    }, this.props.Login.masterData.ScreenRights && this.props.Login.masterData.ScreenRights.length > 0 && this.props.Login.masterData.SelectedScreenRights ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Card.Header, {\n      className: \"pb-4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 304,\n        columnNumber: 65\n      }\n    }, /*#__PURE__*/React.createElement(Card.Title, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 306,\n        columnNumber: 69\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      className: \"product-title-main\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 307,\n        columnNumber: 73\n      }\n    }, this.props.intl.formatMessage({\n      id: \"IDS_HIDESCREENCONTROLRIGHTS\"\n    }))), /*#__PURE__*/React.createElement(ContentPanel, {\n      className: \"d-flex justify-content-end d-inline\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 311,\n        columnNumber: 69\n      }\n    }, /*#__PURE__*/React.createElement(Nav.Link, {\n      className: \"btn btn-circle outline-grey mr-2 action-icons-wrap\",\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_DELETE\"\n      }),\n      hidden: this.state.userRoleControlRights.indexOf(deleteId) === -1,\n      role: \"button\" // data-for=\"tooltip_list_wrap\"\n      ,\n      onClick: () => this.ConfirmDelete(deleteId),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 313,\n        columnNumber: 73\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faTrashAlt,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 319,\n        columnNumber: 77\n      }\n    })), /*#__PURE__*/React.createElement(Nav.Link, {\n      className: \"btn btn-circle outline-grey mr-2\",\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_COPY\"\n      }),\n      hidden: this.state.userRoleControlRights.indexOf(copyId) === -1 //     data-for=\"tooltip_list_wrap\"\n      ,\n      onClick: () => this.props.getCopyUseRoleScreenRights(\"User Role ScreenRights\", \"copy\", copyId, this.state.selectedcombo, this.props.Login.userInfo, this.props.Login.masterData, 2),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 330,\n        columnNumber: 73\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faCopy,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 335,\n        columnNumber: 77\n      }\n    })))), /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 340,\n        columnNumber: 65\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: \"6\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 341,\n        columnNumber: 69\n      }\n    }, /*#__PURE__*/React.createElement(AtSubCard, {\n      className: \"d-flex justify-content-start\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 342,\n        columnNumber: 73\n      }\n    }, /*#__PURE__*/React.createElement(FormSelectSearch, {\n      name: \"value\",\n      placeholder: this.props.intl.formatMessage({\n        id: \"IDS_SELECT\"\n      }),\n      value: this.state.comboitem ? this.state.comboitem[\"value\"] : this.ControlButton[0],\n      options: this.ControlButton,\n      optionId: \"label\",\n      optionValue: \"label\",\n      isMandatory: false,\n      isMulti: false,\n      isSearchable: false,\n      closeMenuOnSelect: true,\n      alphabeticalSort: false,\n      as: \"select\",\n      onChange: event => this.onComboChange(event, \"value\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 344,\n        columnNumber: 77\n      }\n    }), /*#__PURE__*/React.createElement(Nav.Link, {\n      className: \"btn btn-circle outline-grey ml-2 \",\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_SAVE\"\n      }) //   data-for=\"tooltip_list_wrap\"\n      ,\n      onClick: () => this.onSaveAllControlAndEsign(this.state.skip, this.state.take),\n      role: \"button\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 360,\n        columnNumber: 77\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faSave,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 365,\n        columnNumber: 81\n      }\n    }), \" \"))), /*#__PURE__*/React.createElement(Col, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 377,\n        columnNumber: 69\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      headerClassName: \"text-center\" //   data-for=\"screenrights_wrap\"\n      ,\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_ENABLEDISABLEGROUPING\"\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 378,\n        columnNumber: 73\n      }\n    }, /*#__PURE__*/React.createElement(CustomSwitch, {\n      type: \"switch\",\n      id: \"groupbyswitch\",\n      onChange: event => this.switchGroupBy(event),\n      checked: this.state.selectedSwitch === transactionStatus.YES ? true : false,\n      name: \"groupbyswitch\" //data-tip={\"Enable to group by screen name\"}\n      // data-for=\"screenrights_wrap\"\n      ,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 382,\n        columnNumber: 77\n      }\n    }))))) : \"\", this.props.Login.masterData.ScreenRights && this.props.Login.masterData.ScreenRights.length > 0 && this.props.Login.masterData.SelectedScreenRights ? /*#__PURE__*/React.createElement(AtTableWrap, {\n      className: \"at-list-table\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 399,\n        columnNumber: 61\n      }\n    }, /*#__PURE__*/React.createElement(Grid, Object.assign({\n      sortable: true,\n      resizable: true,\n      reorderable: false,\n      scrollable: \"scrollable\",\n      onExpandChange: this.expandChange,\n      expandField: \"expanded\",\n      pageable: {\n        buttonCount: 4,\n        pageSizes: this.props.Login.settings && this.props.Login.settings[15].split(\",\").map(setting => parseInt(setting)),\n        previousNext: false\n      } //data={this.state.dataResult}\n      ,\n      data: process(this.props.Login.masterData.ControlRights || [], this.state.dataState)\n    }, this.state.dataState, {\n      selectedField: \"selected\",\n      onDataStateChange: this.dataStateChange //  groupable={true}\n      ,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 400,\n        columnNumber: 65\n      }\n    }), /*#__PURE__*/React.createElement(GridColumn, {\n      width: \"300px\",\n      field: \"screenname\",\n      title: this.props.intl.formatMessage({\n        id: \"IDS_SCREENNAME\"\n      }) //headerClassName=\"text-center\"\n      //groupable={this.isGroupable(\"screenname\")}\n      ,\n      cell: row => row.rowType === \"groupHeader\" ? null : /*#__PURE__*/React.createElement(\"td\", {\n        // className={selectedId === row[\"dataItem\"][\"screenname\"] ? 'active' : ''}\n        \"data-tip\": row[\"dataItem\"][\"screenname\"],\n        style: {\n          textAlign: 'left'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 423,\n          columnNumber: 81\n        }\n      }, row[\"dataItem\"][\"screenname\"]),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 415,\n        columnNumber: 69\n      }\n    }), /*#__PURE__*/React.createElement(GridColumn, {\n      width: \"300px\",\n      field: \"scontrolids\",\n      title: this.props.intl.formatMessage({\n        id: \"IDS_CONTROLNAME\"\n      }) //headerClassName=\"text-center\"\n      ,\n      cell: row => row.rowType === \"groupHeader\" ? null : /*#__PURE__*/React.createElement(\"td\", {\n        style: {\n          textAlign: 'left'\n        },\n        \"data-tip\": row[\"dataItem\"][\"scontrolids\"],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 437,\n          columnNumber: 81\n        }\n      }, row[\"dataItem\"][\"scontrolids\"]),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 431,\n        columnNumber: 69\n      }\n    }), /*#__PURE__*/React.createElement(GridColumn, {\n      width: \"250px\",\n      field: \"nneedrights\",\n      title: this.props.intl.formatMessage({\n        id: \"IDS_CONTROLRIGHTS\"\n      }),\n      headerClassName: \"text-center\",\n      cell: row => row.rowType === \"groupHeader\" ? null : /*#__PURE__*/React.createElement(\"td\", {\n        style: {\n          textAlign: \"center\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 451,\n          columnNumber: 81\n        }\n      }, /*#__PURE__*/React.createElement(CustomSwitch, {\n        type: \"switch\",\n        id: row[\"dataItem\"][\"nneedrights\"],\n        onChange: event => this.onInputOnControlRights(event, row[\"dataItem\"], \"nneedrights\", row.dataIndex, 1),\n        checked: row[\"dataItem\"][\"nneedrights\"] === transactionStatus.YES ? true : false,\n        name: row[\"dataItem\"][\"nusersrolehidescreencode\"] + \"_\" + row.dataIndex + \"_\" + row.columnIndex // disabled={this.state.custombuttonstate}\n        ,\n        disabled: row[\"dataItem\"][\"needrights\"] === transactionStatus.YES ? true : false,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 452,\n          columnNumber: 85\n        }\n      })),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 445,\n        columnNumber: 69\n      }\n    }), /*#__PURE__*/React.createElement(GridColumn, {\n      width: \"230px\",\n      field: \"nneedesign\",\n      title: this.props.intl.formatMessage({\n        id: \"IDS_ESIGN\"\n      }),\n      headerClassName: \"text-center\",\n      cell: row => row.rowType === \"groupHeader\" ? null : /*#__PURE__*/React.createElement(\"td\", {\n        style: {\n          textAlign: \"center\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 468,\n          columnNumber: 81\n        }\n      }, row[\"dataItem\"][\"nisesigncontrol\"] === 3 ? /*#__PURE__*/React.createElement(CustomSwitch, {\n        type: \"switch\",\n        id: row[\"dataItem\"][\"nneedesign\"],\n        onChange: event => this.onInputOnControlRights(event, row[\"dataItem\"], \"nneedesign\", row.dataIndex, undefined, row[\"dataItem\"][\"needesignsparent\"]),\n        checked: row[\"dataItem\"][\"nneedesign\"] === transactionStatus.YES ? true : false,\n        name: row[\"dataItem\"][\"nusersrolehidescreencode\"] + \"_\" + row.dataIndex + \"_\" + row.columnIndex //  disabled={row[\"dataItem\"][\"needrights\"] === transactionStatus.YES ? true : false}\n        //  disabled={row[\"dataItem\"][\"needesignsparent\"] === transactionStatus.NO ? true : false}\n        ,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 470,\n          columnNumber: 89\n        }\n      }) : \"\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 462,\n        columnNumber: 69\n      }\n    }))) : \"\")))))))))), this.props.Login.openModal && /*#__PURE__*/React.createElement(SlideOutModal, {\n      show: this.props.Login.openModal,\n      closeModal: this.closeModal,\n      operation: this.props.Login.operation,\n      inputParam: this.props.Login.inputParam,\n      screenName: 'IDS_USERSCREENHIDE',\n      onSaveClick: this.onSaveClick,\n      esign: this.props.Login.loadEsign,\n      validateEsign: this.validateEsign,\n      masterStatus: this.props.Login.masterStatus,\n      selectedRecord: this.state.selectedRecord || {},\n      mandatoryFields: this.props.Login.screenName === \"IDS_USERSCREENHIDE\" ? mandatoryFieldsScreenRights : mandatoryFieldsUsers,\n      updateStore: this.props.updateStore,\n      addComponent: this.props.Login.loadEsign ? /*#__PURE__*/React.createElement(Esign, {\n        operation: this.props.Login.operation,\n        onInputOnChange: this.onInputOnChange,\n        inputParam: this.props.Login.inputParam,\n        selectedRecord: this.state.selectedRecord || {},\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 516,\n          columnNumber: 29\n        }\n      }) // : this.props.Login.screenName === \"IDS_USERSCREENHIDE\" ?\n      : /*#__PURE__*/React.createElement(AddScreenRights, {\n        selectedRecord: this.state.selectedRecord || {},\n        onInputOnChange: this.onInputOnChange,\n        onComboChange: this.onComboChange,\n        avaliableScreen: this.props.Login.AvaliableScreen,\n        operation: this.props.operation,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 522,\n          columnNumber: 31\n        }\n      }) // :\n      // <UserRoleScreenRights selectedRecord={this.props.Login.masterData.selectedRecord || {}}\n      //     onInputOnChange={this.onInputOnChange}\n      //     onComboChange={this.onComboChangeUserRole}\n      //     operation={this.props.operation}\n      //     UserRole={this.props.Login.masterData.Userrole || []}\n      //     SelectedUserRole={this.state.selectedcombo}\n      // />\n      ,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 502,\n        columnNumber: 21\n      }\n    }));\n  }\n\n  componentDidMount() {\n    if (this.parentHeight) {\n      const height = this.parentHeight.clientHeight;\n      this.setState({\n        firstPane: height - 80,\n        parentHeight: height\n      });\n    }\n  }\n\n  generateBreadCrumData() {\n    const breadCrumbData = []; //   if (this.props.Login.masterData && this.props.Login.masterData.userrole) {\n\n    breadCrumbData.push({\n      \"label\": \"IDS_USERROLE\",\n      \"value\": this.props.Login.masterData.SelectedUserRole ? this.props.Login.masterData.SelectedUserRole.suserrolename : \"NA\" // \"label\": \"IDS_USERNAME\",\n      //  \"value\": this.props.Login.masterData.SelectedUserName ? this.props.Login.masterData.SelectedUserName.susername : \"NA\",\n\n    }, {\n      //  \"label\": \"IDS_USERROLE\",\n      // \"value\": this.props.Login.masterData.SelectedUserRole ? this.props.Login.masterData.SelectedUserRole.suserrolename : \"NA\",\n      \"label\": \"IDS_USERNAME\",\n      \"value\": this.props.Login.masterData.SelectedUserName ? this.props.Login.masterData.SelectedUserName.susername : \"NA\"\n    }); // } else {\n    //     breadCrumbData.push(\n    //         {\n    //             \"label\": \"IDS_USERROLE\",\n    //             \"value\": \"NA\"\n    //         },\n    //     );\n    // }\n\n    return breadCrumbData;\n  }\n\n  componentDidUpdate(previousProps) {\n    ReactTooltip.rebuild();\n    const masterData = this.props.Login.masterData;\n\n    if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\n      this.setState({\n        selectedRecord: this.props.Login.selectedRecord\n      });\n    }\n\n    if (this.props.Login.selectedcombo !== previousProps.Login.selectedcombo) {\n      this.setState({\n        selectedcombo: this.props.Login.selectedcombo\n      });\n    }\n\n    if (this.props.Login.comboitem !== previousProps.Login.comboitem) {\n      this.setState({\n        comboitem: this.props.Login.comboitem\n      });\n    }\n\n    if (this.props.Login.masterData.AvaliableScreen !== previousProps.Login.masterData.AvaliableScreen) {\n      let skip = this.state.skip;\n      let take = this.state.take;\n      skip = this.props.Login.skip === undefined ? skip : this.props.Login.skip;\n      take = this.props.Login.take || take;\n      this.setState({\n        skip,\n        take\n      });\n    }\n\n    if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\n      const userRoleControlRights = [];\n\n      if (this.props.Login.userRoleControlRights) {\n        this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item => userRoleControlRights.push(item.ncontrolcode));\n      }\n\n      const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode);\n      this.setState({\n        userRoleControlRights,\n        controlMap,\n        data: this.props.Login.masterData.ControlRights\n      });\n    }\n\n    if (this.props.Login.masterData.userrole !== undefined) {\n      if (this.props.Login.masterData.userrole !== previousProps.Login.masterData.userrole) {\n        const userrole = constructOptionList(this.props.Login.masterData.userrole || [], \"nuserrolecode\", \"suserrolename\", undefined, undefined, undefined);\n        const userroleList = userrole.get(\"OptionList\");\n        const selectedcombo = {\n          nuserrolecode: masterData.userrole && masterData.userrole.length > 0 ? {\n            \"value\": masterData.userrole[0].nuserrolecode,\n            \"label\": masterData.userrole[0].suserrolename\n          } : \"\"\n        };\n        this.setState({\n          selectedcombo: selectedcombo,\n          userroleList: userroleList\n        });\n      }\n    } //Added by Allwin\n\n\n    if (this.props.Login.masterData.UsersMain !== previousProps.Login.masterData.UsersMain) {\n      const UsersMain = constructOptionList(this.props.Login.masterData.UsersMain || [], \"nusercode\", \"susername\", undefined, undefined, undefined);\n      const userrnameList = UsersMain.get(\"OptionList\");\n      const selectedcombouser = {\n        nusercode: masterData.UsersMain && masterData.UsersMain.length > 0 ? {\n          \"value\": masterData.UsersMain[0].nusercode,\n          \"label\": masterData.UsersMain[0].susername\n        } : \"\"\n      };\n      this.setState({\n        selectedcombouser: selectedcombouser,\n        userrnameList: userrnameList\n      });\n    } //         if('SelectedScreenRights' in this.props.Login.masterData)\n    //         {\n    //             if(this.props.Login.masterData.SelectedScreenRights.length>0)\n    //             {\n    //                 if('SelectedScreenRights' in previousProps.Login.masterData)\n    //                 {\n    //                     if(previousProps.Login.masterData.SelectedScreenRights.length>0)\n    //            {\n    //             if(this.props.Login.masterData.SelectedScreenRights[0].needrights!==\n    //                 previousProps.Login.masterData.SelectedScreenRights[0].needrights)\n    //                 {\n    // if( this.props.Login.masterData.SelectedScreenRights[0].needrights===3)\n    // {\n    //     this.setState({custombuttonstate:true})\n    // }\n    // else\n    // {\n    //     this.setState({custombuttonstate:false}) \n    // }\n    //                 }\n    //             }\n    //             }\n    //             }\n    //         }\n\n\n    if (this.props.Login.masterData !== previousProps.Login.masterData) {\n      const filterData = this.generateBreadCrumData(); // let dataState = this.state.dataState || {};\n      // dataState= {...dataState, group: [{ field: 'screenname' }]} ;\n\n      this.setState({\n        filterData //, dataState\n\n      });\n    } // if(this.props.Login.masterData.searchedData !== this.props.Login.masterData.ScreenRights){\n    //    if (this.props.Login.masterData.searchedData) \n    //    {\n    //     if(this.props.Login.masterData.searchedData.length<= this.state.skip){\n    //         this.setState({skip:0});\n    //     }\n    // }\n    // }\n\n  }\n\n  onInputOnControlRights(event, rowItem, columnName, rowIndex, saveType, needesignparent) {\n    //  const selectedRecord = rowItem || {};\n    // selectedRecord[]\n    const selectedRecord = {};\n\n    if (needesignparent === 4) {\n      toast.warn(this.props.intl.formatMessage({\n        id: \"IDS_ITISDEACTIVEINSCREENRIGHTS\"\n      }));\n    } else {\n      if (rowItem[\"needrights\"] !== 3) {\n        selectedRecord[\"ncontrolcode\"] = rowItem[\"ncontrolcode\"];\n        selectedRecord[\"nformcode\"] = rowItem[\"nformcode\"]; //    selectedRecord[\"needrights\"]= rowItem[\"needrights\"]\n\n        selectedRecord[\"nstatus\"] = rowItem[\"nstatus\"];\n        selectedRecord[\"nuserrolecode\"] = this.state.selectedcombo[\"nuserrolecode\"].value;\n        selectedRecord[\"nusercode\"] = this.state.selectedcombouser[\"nusercode\"].value;\n        selectedRecord[\"scontrolids\"] = rowItem[\"scontrolids\"];\n        selectedRecord[\"scontrolname\"] = rowItem[\"scontrolname\"];\n        selectedRecord[\"screenname\"] = rowItem[\"screenname\"]; //    if(columnName===\"nneedesign\")  \n        //    {\n        //    selectedRecord[\"nneedesign\"]=rowItem[\"nneedesign\"]\n        //    }\n        // ncontrolcode: 133\n        // nformcode: 44\n        // nneedrights: 3\n        // nstatus: 1\n        // nuserrolecode: 0\n        // scontrolids: \"Delete Charge Band\"\n        // scontrolname: \"DeleteChargeBand\"\n        // screenname: \"Charge Band\"\n\n        if (columnName === \"nneedesign\") {\n          selectedRecord[\"nneedesign\"] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\n        } else {\n          selectedRecord[\"needrights\"] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\n        }\n\n        this.saveClick(selectedRecord, saveType, undefined);\n      }\n    }\n  }\n\n  componentWillUnmount() {\n    const updateInfo = {\n      typeName: DEFAULT_RETURN,\n      data: {\n        masterData: [],\n        inputParam: undefined,\n        operation: null,\n        modalName: undefined\n      }\n    };\n    this.props.updateStore(updateInfo);\n  }\n\n  handleClickDelete(masterData, ncontrolcode, modalName) {\n    const fieldArray = [];\n    this.props.Login.masterData.SelectedScreenRights.map(item => fieldArray.push(item.nusersrolehidescreencode));\n    let postParam = {\n      inputListName: \"UserScreenhide\",\n      selectedObject: \"SelectedScreenRights\",\n      primaryKeyField: \"nusersrolehidescreencode\",\n      primaryKeyValue: fieldArray,\n      fetchUrl: \"userscreenhide/getUserScreenhide\",\n      fecthInputObject: {\n        userinfo: this.props.Login.userInfo\n      }\n    };\n    modalName = 'openModal';\n    const inputParam = {\n      methodUrl: \"UserScreenhide\",\n      classUrl: \"userscreenhide\",\n      inputData: {\n        \"screenrights\": this.props.Login.masterData.SelectedScreenRights,\n        \"userinfo\": this.props.Login.userInfo,\n        \"nuserrolecode\": this.state.selectedcombo[\"nuserrolecode\"] ? this.state.selectedcombo[\"nuserrolecode\"].value : \"\",\n        \"usercode\": this.state.selectedcombouser[\"nusercode\"] ? this.state.selectedcombouser[\"nusercode\"].value : \"\"\n      },\n      operation: \"delete\",\n      postParam,\n      displayName: \"IDS_USERSCREENHIDE\" // dataState: this.state.dataState\n\n    };\n\n    if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, ncontrolcode)) {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          loadEsign: true,\n          screenData: {\n            inputParam,\n            masterData\n          },\n          [modalName]: true,\n          operation: 'delete',\n          screenName: \"ScreenRights\",\n          id: \"screenrights\"\n        }\n      };\n      this.props.updateStore(updateInfo);\n    } else {\n      this.props.crudMaster(inputParam, masterData, modalName);\n    }\n  }\n\n}\n\nexport default connect(mapStateToProps, {\n  callService,\n  reload,\n  crudMaster,\n  validateEsignCredential,\n  filterTransactionList,\n  updateStore,\n  getScreenRightsDetail,\n  getUserScreenhideComboService,\n  comboChangeUserRoleScreenRights,\n  handleClickDelete,\n  filterColumnData,\n  getCopyUseRoleScreenRights,\n  copyScreenRights,\n  checkUserRoleScreenRights,\n  sortData,\n  initialcombochangeget,\n  comboChangeUserRoleScreenRightsHide,\n  getUserScreenhideDetail,\n  ListSwitchUpdate\n})(injectIntl(UserRoleScreenHide));","map":{"version":3,"sources":["E:/WorkingFolder/React_Postgres/ALPD/branches/SOURCE-513-PROD/SOURCE-513-ALPD-5294/QuaLISWeb/src/pages/credentialmanagement/UserRoleScreenHide.jsx"],"names":["React","connect","injectIntl","Row","Col","Nav","Card","Button","Grid","GridColumn","process","toast","FontAwesomeIcon","faTrashAlt","faSave","faCopy","faPlus","FormSelectSearch","CustomSwitch","SlideOutModal","Esign","AddScreenRights","showEsign","getControlMap","constructOptionList","sortData","callService","crudMaster","validateEsignCredential","updateStore","getScreenRightsDetail","copyScreenRights","filterTransactionList","comboChangeUserRoleScreenRights","handleClickDelete","filterColumnData","getCopyUseRoleScreenRights","checkUserRoleScreenRights","reload","initialcombochangeget","getUserScreenhideComboService","comboChangeUserRoleScreenRightsHide","getUserScreenhideDetail","ListSwitchUpdate","DEFAULT_RETURN","transactionStatus","ContentPanel","AtSubCard","AtTableWrap","TransactionListMaster","ProductList","ConfirmMessage","PerfectScrollbar","SplitterLayout","BreadcrumbComponent","ReactTooltip","UserRoleScreenHideFilter","mapStateToProps","state","Login","UserRoleScreenHide","Component","constructor","props","dataStateChange","event","setState","dataResult","masterData","ControlRights","dataState","expandChange","isExpanded","dataItem","expanded","undefined","aggregates","paneSizeChange","d","splitChangeWidthPercentage","ListmasterSwitch","nusersrolehidescreencode","selectedSwitch","target","checked","YES","NO","inputParam","needrights","nuserrolecode","selectedcombo","value","nusercodemain","selectedcombouser","userInfo","switchGroupBy","group","field","skip","take","ConfirmDelete","deleteId","confirmMessage","confirm","intl","formatMessage","id","openFilter","showFilter","updateInfo","typeName","data","closeFilter","onFilterSubmit","searchRef","current","inputData","warn","handlePageChange","e","console","log","validateEsign","sreason","selectedRecord","nreasoncode","spredefinedreason","label","password","screenData","closeModal","loadEsign","openModal","operation","selectedId","onComboChange","comboData","fieldName","item","comboitem","availableDatas","nformcode","map","push","onComboChangeUserRole","onInputOnChange","type","name","ACTIVE","DEACTIVE","saveClick","saveType","formRef","postParam","inputListName","selectedObject","primaryKeyField","SelectedScreenRights","classUrl","methodUrl","displayName","onSaveClick","screenName","userRoleControlRights","ncontrolCode","length","ConfirmComponent","copyAlertSave","onSaveAllControlAndEsign","ControlButton","reloadData","SelectedUserRole","settings","parseInt","searchFieldList","masterStatus","error","isOpen","ScreenRightsData","userRoleData","userroleList","SelectedScreenrights","selectedcomboUserRole","userrnameList","selectedListmasterSwitch","custombuttonstate","ControlRightsParent","ConfirmDialogScreen","controlMap","Map","showAccordian","columnName","rowIndex","createRef","getDerivedStateFromProps","render","ScreenRights","searchedData","addId","has","get","ncontrolcode","copyId","filterParam","fetchUrl","userinfo","fecthInputObject","nusercode","SelectedUserName","changeList","isSingleSelect","mandatoryFieldsScreenRights","mandatoryFieldsUsers","breadCrumbData","filterData","parentHeight","indexOf","buttonCount","pageSizes","split","setting","previousNext","row","rowType","textAlign","onInputOnControlRights","dataIndex","columnIndex","AvaliableScreen","componentDidMount","height","clientHeight","firstPane","generateBreadCrumData","suserrolename","susername","componentDidUpdate","previousProps","rebuild","Object","values","userrole","UsersMain","rowItem","needesignparent","componentWillUnmount","modalName","fieldArray","primaryKeyValue"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport { connect } from 'react-redux';\r\nimport { injectIntl } from 'react-intl';\r\nimport { Row, Col, Nav, Card, Button } from 'react-bootstrap';\r\nimport { Grid, GridColumn } from '@progress/kendo-react-grid';\r\nimport { process } from '@progress/kendo-data-query';\r\nimport { toast } from 'react-toastify';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faTrashAlt, faSave, faCopy, faPlus } from '@fortawesome/free-solid-svg-icons';\r\nimport FormSelectSearch from '../../components/form-select-search/form-select-search.component';\r\nimport CustomSwitch from '../../components/custom-switch/custom-switch.component';\r\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\r\nimport Esign from '../audittrail/Esign';\r\nimport AddScreenRights from './AddScreenRights';\r\nimport { showEsign, getControlMap, constructOptionList, sortData } from '../../components/CommonScript';\r\n\r\nimport {\r\n    callService, crudMaster, validateEsignCredential, updateStore, getScreenRightsDetail, copyScreenRights, filterTransactionList,\r\n    comboChangeUserRoleScreenRights, handleClickDelete, filterColumnData, getCopyUseRoleScreenRights, checkUserRoleScreenRights, reload\r\n\r\n} from '../../actions';\r\nimport {\r\n    initialcombochangeget, getUserScreenhideComboService, comboChangeUserRoleScreenRightsHide, getUserScreenhideDetail, ListSwitchUpdate\r\n} from '../../actions/UserRoleScreenHideAction';\r\n\r\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\r\nimport { transactionStatus } from '../../components/Enumeration';\r\nimport { ContentPanel, AtSubCard } from '../../components/App.styles';\r\nimport { AtTableWrap } from '../../components/data-grid/data-grid.styles';\r\nimport TransactionListMaster from '../../components/TransactionListMaster';\r\nimport { ProductList } from '../product/product.styled';\r\nimport ConfirmMessage from '../../components/confirm-alert/confirm-message.component';\r\nimport PerfectScrollbar from 'react-perfect-scrollbar';\r\nimport SplitterLayout from 'react-splitter-layout';\r\n// import { Tooltip } from '@progress/kendo-react-tooltip';\r\nimport BreadcrumbComponent from '../../components/Breadcrumb.Component';\r\nimport ReactTooltip from 'react-tooltip';\r\nimport UserRoleScreenHideFilter from './UserRoleScreenHideFilter';\r\nimport { ReactComponent as RefreshIcon } from '../../assets/image/refresh.svg';\r\nconst mapStateToProps = state => {\r\n    return ({ Login: state.Login })\r\n}\r\n\r\nclass UserRoleScreenHide extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        const dataState = {\r\n            skip: 0,\r\n            take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\r\n            //, group: [{ field: 'screenname' }]\r\n        };\r\n        this.searchFieldList = [\"sdisplayname\"]\r\n        this.state = {\r\n            masterStatus: \"\",\r\n            error: \"\",\r\n            isOpen: false,\r\n            ScreenRightsData: [], userRoleData: [],\r\n            availableDatas: [],\r\n            selectedRecord: {},\r\n            userroleList: [],\r\n            operation: \"\",\r\n            comboitem: undefined,\r\n            screenName: undefined,\r\n            SelectedScreenrights: undefined,\r\n            selectedcombo: undefined, selectedcomboUserRole: undefined,\r\n            \r\n            selectedcombouser: undefined,\r\n            userrnameList: [],\r\n            selectedListmasterSwitch: undefined,\r\n            custombuttonstate: false,\r\n            ControlRightsParent:[],\r\n\r\n\r\n            userRoleControlRights: [],\r\n            ControlRights: undefined,\r\n            ConfirmDialogScreen: false,\r\n            controlMap: new Map(),\r\n            showAccordian: true,\r\n            dataResult: [],\r\n            skip: 0,\r\n            take: this.props.Login.settings && this.props.Login.settings[3],\r\n            dataState: dataState,\r\n            columnName: '',\r\n            rowIndex: 0,\r\n            data: [],\r\n            splitChangeWidthPercentage: 30,\r\n        };\r\n        this.searchRef = React.createRef();\r\n        this.ControlButton = [{ value: 1, label: this.props.intl.formatMessage({ id: \"IDS_ENABLEALLCONTROLRIGHTS\" }) },\r\n        { value: 2, label: this.props.intl.formatMessage({ id: \"IDS_DISABLEALLCONTROLRIGHTS\" }) },\r\n             { value: 3, label: this.props.intl.formatMessage({ id: \"IDS_ENABLEALLESIGNRIGHTS\" }) },\r\n           { value: 4, label: this.props.intl.formatMessage({ id: \"IDS_DISABLEALLESIGNRIGHTS\" }) }\r\n        ];\r\n        this.confirmMessage = new ConfirmMessage();\r\n    }\r\n    dataStateChange = (event) => {\r\n        // if (event.dataState.group.length === 1 && event.dataState.group[0].field === 'screenname')\r\n        // {\r\n        this.setState({\r\n            dataResult: process(this.props.Login.masterData.ControlRights || [], event.dataState),\r\n            dataState: event.dataState\r\n        });\r\n        //}\r\n    }\r\n\r\n\r\n    expandChange = event => {\r\n        const isExpanded =\r\n            event.dataItem.expanded === undefined\r\n                ? event.dataItem.aggregates\r\n                : event.dataItem.expanded;\r\n        event.dataItem.expanded = !isExpanded;\r\n        this.setState({ ...this.state });\r\n        //this.setState({ ...this.state.dataState });\r\n    };\r\n\r\n    static getDerivedStateFromProps(props, state) {\r\n        if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\r\n            toast.warn(props.Login.masterStatus);\r\n            props.Login.masterStatus = \"\";\r\n        }\r\n        if (props.Login.error !== state.error) {\r\n            toast.error(props.Login.error)\r\n            props.Login.error = \"\";\r\n        }\r\n        return null;\r\n    }\r\n\r\n\r\n    paneSizeChange = (d) => {\r\n        this.setState({\r\n            splitChangeWidthPercentage: d\r\n        })\r\n    }\r\n    render() {\r\n\r\n        // console.log(\"master:\", this.props.Login.masterData, this.state.dataResult)\r\n        //added by allwin \r\n        ///FOR SORTING DATa BASED ON nusersrolehidescreencode***************************************************************\r\n        this.props.Login.masterData.ScreenRights && sortData(this.props.Login.masterData.ScreenRights, '', 'nusersrolehidescreencode')\r\n        const searchedData = this.props.Login.masterData.searchedData\r\n        const ScreenRights = this.props.Login.masterData.ScreenRights || [];\r\n        const addId = this.state.controlMap.has(\"AddUserScreenhide\") && this.state.controlMap.get(\"AddUserScreenhide\").ncontrolcode;\r\n        const deleteId = this.state.controlMap.has(\"DeleteUserScreenhide\") && this.state.controlMap.get(\"DeleteUserScreenhide\").ncontrolcode;\r\n        const copyId = this.state.controlMap.has(\"CopyScreenRights\") && this.state.controlMap.get(\"CopyScreenRights\").ncontrolcode;\r\n        //const ListScreenHideId = this.state.controlMap.has(\"ListScreenHide\") && this.state.controlMap.get(\"ListScreenHide\").ncontrolcode;\r\n       //console.log('kkkkk',this.props.Login.masterData.SelectedUserName)\r\n        const filterParam = {\r\n            inputListName: \"ScreenRights\",\r\n            selectedObject: \"SelectedScreenRights\",\r\n            primaryKeyField: \"nformcode\",\r\n           \r\n            fetchUrl: \"userscreenhide/getSearchScreenHide\",\r\n            //  fetchUrl: \"screenrights/getSearchScreenRights\",\r\n            userinfo: this.props.Login.userInfo,\r\n\r\n            fecthInputObject: { userinfo: this.props.Login.userInfo, nusercode:this.props.Login.masterData.SelectedUserName&&\r\n                this.props.Login.masterData.SelectedUserName.nusercode },\r\n            masterData: this.props.Login.masterData,\r\n            searchFieldList: this.searchFieldList, changeList: []\r\n            , isSingleSelect: false,\r\n        };\r\n        // const filterParam = {\r\n        //     inputListName: \"ScreenRights\",\r\n        //     selectedObject: \"SelectedScreenRights\",\r\n        //     primaryKeyField: \"nuserrolescreencode\",\r\n        //     fetchUrl: \"screenrights/getSearchScreenRights\",\r\n        //     userinfo: this.props.Login.userInfo,\r\n        //     fecthInputObject: { userinfo: this.props.Login.userInfo },\r\n        //     masterData: this.props.Login.masterData,\r\n        //     searchFieldList: this.searchFieldList, changeList: [], isSingleSelect: false\r\n        // };\r\n        const mandatoryFieldsScreenRights = [\r\n            { \"mandatory\": true, \"idsName\": \"IDS_USERSCREENHIDE\", \"dataField\": \"nusersrolehidescreencode\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" }\r\n        ];\r\n\r\n        const mandatoryFieldsUsers = [{ \"mandatory\": true, \"idsName\": \"IDS_SCREENRIGHTS\", \"dataField\": \"nformcode\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" }\r\n        ];\r\n        // let screenlen = searchedData ? searchedData.length : ScreenRights.length\r\n        // const demo=[];\r\n        // this.props.Login.masterData.UsersMain&&          \r\n        // demo.push(\r\n        //     {\r\n        //         \"label\": \"IDS_USER\",\r\n        //         \"value\": this.props.Login.masterData.UsersMain[0].susername\r\n\r\n        //     },\r\n        // );\r\n\r\n        const breadCrumbData = this.state.filterData || [];\r\n        return (\r\n            <>\r\n                {/* <ReactTooltip place=\"bottom\" globalEventOff='click' id=\"tooltip_list_wrap\" /> */}\r\n                <div className=\"client-listing-wrap mtop-4 screen-height-window\">\r\n                    {breadCrumbData.length > 0 ?\r\n                        // <Affix top={64}>\r\n                        <BreadcrumbComponent breadCrumbItem={breadCrumbData} />\r\n                        // </Affix> \r\n                        : \"\"\r\n                    }\r\n                    <Row noGutters>\r\n                        <Col md={12} className=\"parent-port-height sticky_head_parent\" ref={(parentHeight) => { this.parentHeight = parentHeight }}>\r\n                            <SplitterLayout borderColor=\"#999\"\r\n                                percentage={true} primaryIndex={1}\r\n                                secondaryInitialSize={this.state.splitChangeWidthPercentage}\r\n                                onSecondaryPaneSizeChange={this.paneSizeChange}\r\n                                primaryMinSize={40}\r\n                                secondaryMinSize={20}\r\n                            >\r\n                                <TransactionListMaster\r\n                                    splitChangeWidthPercentage={this.state.splitChangeWidthPercentage}\r\n                                    masterList={searchedData || ScreenRights || []}\r\n                                    selectedMaster={this.props.Login.masterData.SelectedScreenRights}\r\n                                    primaryKeyField=\"nusersrolehidescreencode\"\r\n                                    getMasterDetail={this.props.getUserScreenhideDetail}\r\n                                    inputParam={{\r\n                                        userinfo: this.props.Login.userInfo,\r\n                                        masterData: this.props.Login.masterData,\r\n                                        dataState: this.state.dataState, skip: this.state.skip, take: this.state.take\r\n                                    }}\r\n                                    additionalParam={['napprovalversioncode']}\r\n                                    mainField=\"sdisplayname\"\r\n                                    selectedListName=\"SelectedScreenRights\"\r\n                                    filterColumnData={this.props.filterTransactionList}\r\n                                    searchListName=\"searchedData\"\r\n                                    searchRef={this.searchRef}\r\n                                    filterParam={filterParam}\r\n                                    objectName=\"screenrights\"\r\n                                    listName=\"IDS_SCREENRIGHTS\"\r\n                                    hideQuickSearch={true}\r\n                                    skip={this.state.skip}\r\n                                    take={this.state.take}\r\n                                    handlePageChange={this.handlePageChange}\r\n                                    hidePaging={false}\r\n                                    needFilter={true}\r\n                                    needAccordianFilter={false}\r\n                                    childTabsKey={[\"ControlRights\"]}\r\n                                    openFilter={this.openFilter}\r\n                                    closeFilter={this.closeFilter}\r\n                                    onFilterSubmit={this.onFilterSubmit}\r\n                                    //ListmasterSwitch\r\n                                    ListmasterSwitch={this.ListmasterSwitch}\r\n                                    selectedListmasterSwitch={this.state.selectedListmasterSwitch}\r\n                                    ListScreenHidebtn= {this.state.controlMap.has(\"ListScreenHide\") && this.state.controlMap.get(\"ListScreenHide\").ncontrolcode}\r\n                                    //  needrightsList={this.props.Login}\r\n                                    filterComponent={[\r\n                                        {\r\n                                            \"IDS_FILTER\":\r\n                                                <UserRoleScreenHideFilter\r\n                                                    filterUserRole={this.state.userroleList || []}\r\n                                                    userrnameList={this.state.userrnameList || []}\r\n                                                    selectedRecord={this.state.selectedcombo || {}}//\r\n                                                    selectedcombouser={this.state.selectedcombouser || {}}\r\n                                                    onComboChange={this.onComboChange}\r\n                                                />\r\n                                        }\r\n                                    ]}\r\n                                    // accordianfilterComponent={[\r\n                                    //     {\r\n                                    //         \"IDS_USERROLE\":\r\n                                    //             <ScreenRightsFilter\r\n                                    //                 filterUserRole={this.state.userroleList || []}\r\n                                    //                 selectedRecord={this.state.selectedcombo || {}}//\r\n                                    //                 onComboChange={this.onComboChange}\r\n                                    //             />\r\n                                    //     }\r\n                                    // ]}\r\n                                    needMultiSelect={true}\r\n                                    commonActions={\r\n                                        // <Tooltip position=\"bottom\" anchorElement=\"target\" openDelay={100} parentTitle={true}>\r\n                                        <ProductList className=\"d-flex product-category float-right\">\r\n                                            {/* <ReactTooltip place=\"bottom\" globalEventOff='click' /> */}\r\n                                            <Button className=\"btn btn-icon-rounded btn-circle solid-blue\"\r\n                                                data-tip={this.props.intl.formatMessage({ id: \"IDS_ADD\" })}\r\n                                            //    data-for=\"tooltip_list_wrap\"\r\n                                                role=\"button\"\r\n                                                hidden={this.state.userRoleControlRights.indexOf(addId) === -1}\r\n                                                onClick={() => this.props.getUserScreenhideComboService(\"IDS_SCREENRIGHTS\",\r\n                                                    \"create\", this.props.Login.userInfo, this.state.selectedcombo, this.state.selectedcombouser, addId)}>\r\n                                                <FontAwesomeIcon icon={faPlus} />\r\n                                            </Button>\r\n                                            <Button className=\"btn btn-circle outline-grey ml-2 p-0\" variant=\"link\"\r\n                                                data-tip={this.props.intl.formatMessage({ id: \"IDS_RELOAD\"})}\r\n                                              //  data-for=\"tooltip_list_wrap\"\r\n                                                onClick={() => this.onFilterSubmit()} >\r\n                                                    <RefreshIcon className='custom_icons'/>\r\n                                            </Button>\r\n                                        </ProductList>\r\n                                        // </Tooltip>\r\n                                    }\r\n                                />\r\n                                {/* <PerfectScrollbar> */}\r\n                                {/* <SplitterLayout vertical borderColor=\"#999\" percentage={true} primaryIndex={1} secondaryInitialSize={400} customClassName=\"fixed_list_height\"> */}\r\n                                {/* <Col md={9}> */}\r\n                                <PerfectScrollbar>\r\n                                    <div className=\"fixed_list_height\">\r\n                                        <Row >\r\n                                            <Col md={12}>\r\n                                                <ContentPanel className=\"panel-main-content\">\r\n                                                    <Card className=\"border-0\">\r\n                                                        {this.props.Login.masterData.ScreenRights && this.props.Login.masterData.ScreenRights.length > 0 && this.props.Login.masterData.SelectedScreenRights ?\r\n                                                            <>\r\n\r\n                                                                <Card.Header className=\"pb-4\" >\r\n                                                                    {/* <ReactTooltip place=\"bottom\" globalEventOff='click' id=\"screenrights_wrap\" /> */}\r\n                                                                    <Card.Title>\r\n                                                                        <p className=\"product-title-main\">\r\n                                                                            {this.props.intl.formatMessage({ id: \"IDS_HIDESCREENCONTROLRIGHTS\" })}\r\n                                                                        </p>\r\n                                                                    </Card.Title>\r\n                                                                    <ContentPanel className=\"d-flex justify-content-end d-inline\">\r\n                                                                        {/* <Tooltip position=\"bottom\" anchorElement=\"target\" openDelay={100} parentTitle={true}> */}\r\n                                                                        <Nav.Link className=\"btn btn-circle outline-grey mr-2 action-icons-wrap\"\r\n                                                                            data-tip={this.props.intl.formatMessage({ id: \"IDS_DELETE\" })}\r\n                                                                            hidden={this.state.userRoleControlRights.indexOf(deleteId) === -1}\r\n                                                                            role=\"button\"\r\n                                                                           // data-for=\"tooltip_list_wrap\"\r\n                                                                            onClick={() => this.ConfirmDelete(deleteId)}>\r\n                                                                            <FontAwesomeIcon icon={faTrashAlt} />\r\n                                                                            {/* <ConfirmDialog\r\n                                                                                    name=\"deleteMessage\"\r\n                                                                                    message={this.props.intl.formatMessage({ id: \"IDS_DEFAULTCONFIRMMSG\" })}\r\n                                                                                    doLabel={this.props.intl.formatMessage({ id: \"IDS_OK\" })}\r\n                                                                                    doNotLabel={this.props.intl.formatMessage({ id: \"IDS_CANCEL\" })}\r\n                                                                                    icon={faTrashAlt}\r\n                                                                                    //title={this.props.intl.formatMessage({ id: \"IDS_DELETE\" })}\r\n                                                                                    handleClickDelete={() => this.handleClickDelete(this.props.Login.masterData, deleteId, \"openModal\")}\r\n                                                                                /> */}\r\n                                                                        </Nav.Link>\r\n                                                                        <Nav.Link className=\"btn btn-circle outline-grey mr-2\"\r\n                                                                            data-tip={this.props.intl.formatMessage({ id: \"IDS_COPY\" })}\r\n                                                                            hidden={this.state.userRoleControlRights.indexOf(copyId) === -1}\r\n                                                                       //     data-for=\"tooltip_list_wrap\"\r\n                                                                            onClick={() => this.props.getCopyUseRoleScreenRights(\"User Role ScreenRights\", \"copy\", copyId, this.state.selectedcombo, this.props.Login.userInfo, this.props.Login.masterData, 2)}>\r\n                                                                            <FontAwesomeIcon icon={faCopy} />\r\n                                                                        </Nav.Link>\r\n                                                                        {/* </Tooltip> */}\r\n                                                                    </ContentPanel>\r\n                                                                </Card.Header>\r\n                                                                <Row>\r\n                                                                    <Col md='6'>\r\n                                                                        <AtSubCard className=\"d-flex justify-content-start\">\r\n                                                                            {/* <ReactTooltip place=\"bottom\" globalEventOff='click' /> */}\r\n                                                                            <FormSelectSearch\r\n                                                                                name={\"value\"}\r\n                                                                                placeholder={this.props.intl.formatMessage({ id: \"IDS_SELECT\" })}\r\n                                                                                value={this.state.comboitem ? this.state.comboitem[\"value\"] : this.ControlButton[0]}\r\n                                                                                options={this.ControlButton}\r\n                                                                                optionId=\"label\"\r\n                                                                                optionValue=\"label\"\r\n                                                                                isMandatory={false}\r\n                                                                                isMulti={false}\r\n                                                                                isSearchable={false}\r\n                                                                                closeMenuOnSelect={true}\r\n                                                                                alphabeticalSort={false}\r\n                                                                                as={\"select\"}\r\n                                                                                onChange={(event) => this.onComboChange(event, \"value\")}\r\n                                                                            />\r\n                                                                            {/* <Tooltip position=\"bottom\" anchorElement=\"target\" openDelay={100} parentTitle={true}> */}\r\n                                                                            <Nav.Link className=\"btn btn-circle outline-grey ml-2 \"\r\n                                                                                data-tip={this.props.intl.formatMessage({ id: \"IDS_SAVE\" })}\r\n                                                                             //   data-for=\"tooltip_list_wrap\"\r\n                                                                                onClick={() => this.onSaveAllControlAndEsign(this.state.skip, this.state.take)}\r\n                                                                                role=\"button\">\r\n                                                                                <FontAwesomeIcon icon={faSave} /> { }\r\n                                                                            </Nav.Link>\r\n                                                                            {/* </Tooltip> */}\r\n                                                                        </AtSubCard>\r\n                                                                    </Col>\r\n                                                                    {/* <Col md='6' >\r\n                                                                        <Row>\r\n                                                                            <Col md={12}>\r\n                                                                                <strong>\r\n                                                                                    {this.props.intl.formatMessage({ id: \"Enable/Disable Grouping\" })}\r\n                                                                                </strong>\r\n                                                                            </Col> */}\r\n                                                                    <Col>\r\n                                                                        <span headerClassName=\"text-center\"\r\n                                                                         //   data-for=\"screenrights_wrap\"\r\n                                                                            data-tip={this.props.intl.formatMessage({ id: \"IDS_ENABLEDISABLEGROUPING\" })}>\r\n\r\n                                                                            <CustomSwitch type=\"switch\"\r\n                                                                                id={\"groupbyswitch\"}\r\n                                                                                onChange={(event) => this.switchGroupBy(event)}\r\n                                                                                checked={this.state.selectedSwitch === transactionStatus.YES ? true : false}\r\n                                                                                name={\"groupbyswitch\"}\r\n                                                                            //data-tip={\"Enable to group by screen name\"}\r\n                                                                            // data-for=\"screenrights_wrap\"\r\n                                                                            />\r\n                                                                        </span>\r\n                                                                    </Col>\r\n                                                                    \r\n                                                                    {/* </Row>\r\n                                                                    </Col>*/}\r\n                                                                </Row>\r\n                                                            </> :\r\n                                                            \"\"}\r\n                                                        {this.props.Login.masterData.ScreenRights && this.props.Login.masterData.ScreenRights.length > 0 && this.props.Login.masterData.SelectedScreenRights ?\r\n                                                            <AtTableWrap className=\"at-list-table\">\r\n                                                                <Grid\r\n                                                                    sortable\r\n                                                                    resizable\r\n                                                                    reorderable={false}\r\n                                                                    scrollable={\"scrollable\"}\r\n                                                                    onExpandChange={this.expandChange}\r\n                                                                    expandField=\"expanded\"\r\n                                                                    pageable={{ buttonCount: 4, pageSizes: this.props.Login.settings && this.props.Login.settings[15].split(\",\").map(setting => parseInt(setting)), previousNext: false }}\r\n                                                                    //data={this.state.dataResult}\r\n                                                                    data={process(this.props.Login.masterData.ControlRights || [], this.state.dataState)}\r\n                                                                    {...this.state.dataState}\r\n                                                                    selectedField=\"selected\"\r\n                                                                    onDataStateChange={this.dataStateChange}\r\n                                                                //  groupable={true}\r\n                                                                >\r\n                                                                    <GridColumn width=\"300px\"\r\n                                                                        field=\"screenname\"\r\n                                                                        title={this.props.intl.formatMessage({ id: \"IDS_SCREENNAME\" })}\r\n                                                                        //headerClassName=\"text-center\"\r\n                                                                        //groupable={this.isGroupable(\"screenname\")}\r\n                                                                        cell={(row) => (\r\n                                                                            row.rowType === \"groupHeader\" ? null :\r\n\r\n                                                                                <td\r\n                                                                                    // className={selectedId === row[\"dataItem\"][\"screenname\"] ? 'active' : ''}\r\n                                                                                    data-tip={row[\"dataItem\"][\"screenname\"]}\r\n                                                                                    style={{ textAlign: 'left' }}>\r\n                                                                                    {/* <ReactTooltip place=\"bottom\" globalEventOff='click' /> */}\r\n                                                                                    {row[\"dataItem\"][\"screenname\"]}\r\n                                                                                </td>)}\r\n                                                                    />\r\n                                                                    <GridColumn width=\"300px\"\r\n                                                                        field=\"scontrolids\"\r\n                                                                        title={this.props.intl.formatMessage({ id: \"IDS_CONTROLNAME\" })}\r\n                                                                        //headerClassName=\"text-center\"\r\n                                                                        cell={(row) => (\r\n                                                                            row.rowType === \"groupHeader\" ? null :\r\n                                                                                <td\r\n                                                                                    style={{ textAlign: 'left' }}\r\n                                                                                    data-tip={row[\"dataItem\"][\"scontrolids\"]} >\r\n                                                                                    {/* <ReactTooltip place=\"bottom\" globalEventOff='click' /> */}\r\n                                                                                    {row[\"dataItem\"][\"scontrolids\"]}\r\n                                                                                </td>)}\r\n                                                                    />\r\n\r\n                                                                    <GridColumn width=\"250px\"\r\n                                                                        field={\"nneedrights\"}\r\n                                                                        title={this.props.intl.formatMessage({ id: \"IDS_CONTROLRIGHTS\" })}\r\n                                                                        headerClassName=\"text-center\"\r\n                                                                        cell={(row) => (\r\n                                                                            row.rowType === \"groupHeader\" ? null :\r\n                                                                                <td style={{ textAlign: \"center\" }} >\r\n                                                                                    <CustomSwitch type=\"switch\" id={row[\"dataItem\"][\"nneedrights\"]}\r\n                                                                                        onChange={(event) => this.onInputOnControlRights(event, row[\"dataItem\"], \"nneedrights\", row.dataIndex, 1)}\r\n                                                                                        checked={row[\"dataItem\"][\"nneedrights\"] === transactionStatus.YES ? true : false}\r\n                                                                                        name={row[\"dataItem\"][\"nusersrolehidescreencode\"] + \"_\" + row.dataIndex + \"_\" + row.columnIndex}\r\n                                                                                        // disabled={this.state.custombuttonstate}\r\n\r\n                                                                                        disabled={row[\"dataItem\"][\"needrights\"] === transactionStatus.YES ? true : false}\r\n                                                                                    />\r\n                                                                                </td>)}\r\n                                                                    />\r\n                                                                    <GridColumn width=\"230px\"\r\n                                                                        field={\"nneedesign\"}\r\n                                                                        title={this.props.intl.formatMessage({ id: \"IDS_ESIGN\" })}\r\n                                                                        headerClassName=\"text-center\"\r\n                                                                        cell={(row) => (\r\n                                                                            row.rowType === \"groupHeader\" ? null :\r\n                                                                                <td style={{ textAlign: \"center\" }} >\r\n                                                                                    {row[\"dataItem\"][\"nisesigncontrol\"] === 3 ?\r\n                                                                                        <CustomSwitch type=\"switch\" id={row[\"dataItem\"][\"nneedesign\"]}\r\n                                                                                          onChange={(event) => this.onInputOnControlRights(event, row[\"dataItem\"], \"nneedesign\", row.dataIndex, undefined,row[\"dataItem\"][\"needesignsparent\"])}\r\n                                                                                            checked={row[\"dataItem\"][\"nneedesign\"] === transactionStatus.YES ? true : false}\r\n                                                                                            name={row[\"dataItem\"][\"nusersrolehidescreencode\"] + \"_\" + row.dataIndex + \"_\" + row.columnIndex}\r\n                                                                                          //  disabled={row[\"dataItem\"][\"needrights\"] === transactionStatus.YES ? true : false}\r\n                                                                                          //  disabled={row[\"dataItem\"][\"needesignsparent\"] === transactionStatus.NO ? true : false}\r\n                                                                                        /> :\r\n                                                                                        \"\"\r\n                                                                                    }\r\n                                                                                </td>\r\n                                                                        )\r\n                                                                        }\r\n                                                                    /> \r\n                                                                </Grid>\r\n                                                            </AtTableWrap>\r\n                                                            : \"\"}\r\n                                                    </Card>\r\n                                                </ContentPanel>\r\n                                            </Col>\r\n                                        </Row>\r\n                                    </div>\r\n                                </PerfectScrollbar>\r\n                                {/* </SplitterLayout> */}\r\n                                {/* </PerfectScrollbar> */}\r\n                            </SplitterLayout >\r\n                        </Col>\r\n                    </Row>\r\n                </div>\r\n                {/* End of get display*/}\r\n                { }\r\n                {\r\n                    this.props.Login.openModal &&\r\n                    <SlideOutModal show={this.props.Login.openModal}\r\n                        closeModal={this.closeModal}\r\n                        operation={this.props.Login.operation}\r\n                        inputParam={this.props.Login.inputParam}\r\n                        screenName={'IDS_USERSCREENHIDE'}\r\n                        onSaveClick={this.onSaveClick}\r\n                        esign={this.props.Login.loadEsign}\r\n                        validateEsign={this.validateEsign}\r\n                        masterStatus={this.props.Login.masterStatus}\r\n                        selectedRecord={this.state.selectedRecord || {}}\r\n                        mandatoryFields={this.props.Login.screenName === \"IDS_USERSCREENHIDE\" ? mandatoryFieldsScreenRights : mandatoryFieldsUsers}\r\n                        updateStore={this.props.updateStore}\r\n                        addComponent={\r\n                            this.props.Login.loadEsign ?\r\n                            <Esign operation={this.props.Login.operation}\r\n                                onInputOnChange={this.onInputOnChange}\r\n                                inputParam={this.props.Login.inputParam}\r\n                                selectedRecord={this.state.selectedRecord || {}}\r\n                            />\r\n                            // : this.props.Login.screenName === \"IDS_USERSCREENHIDE\" ?\r\n                            : <AddScreenRights selectedRecord={this.state.selectedRecord || {}}\r\n                                onInputOnChange={this.onInputOnChange}\r\n                                onComboChange={this.onComboChange}\r\n                                avaliableScreen={this.props.Login.AvaliableScreen}\r\n                                operation={this.props.operation}\r\n                            />\r\n                            // :\r\n                            // <UserRoleScreenRights selectedRecord={this.props.Login.masterData.selectedRecord || {}}\r\n                            //     onInputOnChange={this.onInputOnChange}\r\n                            //     onComboChange={this.onComboChangeUserRole}\r\n                            //     operation={this.props.operation}\r\n                            //     UserRole={this.props.Login.masterData.Userrole || []}\r\n                            //     SelectedUserRole={this.state.selectedcombo}\r\n                            // />\r\n                        }\r\n                    />\r\n                }\r\n                { }\r\n            </>\r\n        );\r\n    }\r\n\r\n    ListmasterSwitch = (event, nusersrolehidescreencode) => {\r\n       // let inputData = [];\r\n        //  inputData[\"nuserrolecode\"] = this.state.selectedcombo[\"nuserrolecode\"];\r\n        // inputData[\"nusercodemain\"] = this.state.selectedcombouser[\"nusercode\"];\r\n        const selectedSwitch = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\r\n        const inputParam = {\r\n            needrights: selectedSwitch,\r\n            nusersrolehidescreencode: nusersrolehidescreencode,\r\n            nuserrolecode: this.state.selectedcombo[\"nuserrolecode\"].value,\r\n            nusercodemain: this.state.selectedcombouser[\"nusercode\"].value\r\n        }\r\n        this.props.ListSwitchUpdate(inputParam, this.props.Login.masterData, this.props.Login.userInfo);\r\n        // this.setState({selectedListmasterSwitch:selectedSwitch});\r\n    }\r\n    switchGroupBy = (event) => {\r\n\r\n        const selectedSwitch = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\r\n        let dataState = this.state.dataState || {};\r\n        if (selectedSwitch === transactionStatus.YES) {\r\n            dataState = { ...dataState, group: [{ field: 'screenname' }] };\r\n        }\r\n        else {\r\n            dataState = { skip: dataState.skip, take: dataState.take }\r\n        }\r\n        this.setState({ selectedSwitch, dataState });\r\n    }\r\n\r\n    ConfirmDelete = (deleteId) => {\r\n        this.confirmMessage.confirm(\"deleteMessage\", this.props.intl.formatMessage({ id: \"IDS_DELETE\" }), this.props.intl.formatMessage({ id: \"IDS_DEFAULTCONFIRMMSG\" }),\r\n            this.props.intl.formatMessage({ id: \"IDS_OK\" }), this.props.intl.formatMessage({ id: \"IDS_CANCEL\" }),\r\n            () => this.handleClickDelete(this.props.Login.masterData, deleteId, \"openModal\"));\r\n    }\r\n\r\n    openFilter = () => {\r\n        let showFilter = !this.props.Login.showFilter\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { showFilter }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    closeFilter = () => {\r\n\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { showFilter: false }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    onFilterSubmit = () => {\r\n        this.searchRef.current.value = \"\";\r\n        // this.reloadData(this.state.selectedRecord, true);\r\n        let inputData = [];\r\n        inputData[\"nuserrolecode\"] = this.state.selectedcombo[\"nuserrolecode\"];\r\n        inputData[\"nusercodemain\"] = this.state.selectedcombouser[\"nusercode\"];\r\n        // const inputParam = {\r\n        //     classUrl: \"userscreenhide\",\r\n        //     methodUrl: \"UserScreenhide\",\r\n        //     displayName: \"IDS_USERSCREENHIDE\",\r\n        //     inputData: inputData\r\n        //     //,\r\n        //     // operation: operation, saveType, formRef, searchRef: this.searchRef, postParam,dataState: this.state.dataState\r\n        // }\r\n        if (this.state.selectedcombo[\"nuserrolecode\"]) {\r\n            this.props.comboChangeUserRoleScreenRightsHide(this.state.selectedcombo, this.state.selectedcombouser, this.props.Login.masterData, this.props.Login.userInfo);\r\n\r\n            // this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\r\n            //  this.props.callService(inputParam);\r\n\r\n\r\n        } else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTUSERROLE\" }));\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (this.parentHeight) {\r\n            const height = this.parentHeight.clientHeight;\r\n            this.setState({\r\n                firstPane: height - 80,\r\n                parentHeight: height\r\n            });\r\n        }\r\n    }\r\n\r\n    generateBreadCrumData() {\r\n        const breadCrumbData = [];\r\n        //   if (this.props.Login.masterData && this.props.Login.masterData.userrole) {\r\n\r\n        breadCrumbData.push(\r\n            {\r\n                \"label\": \"IDS_USERROLE\",\r\n                \"value\": this.props.Login.masterData.SelectedUserRole ? this.props.Login.masterData.SelectedUserRole.suserrolename : \"NA\",\r\n               // \"label\": \"IDS_USERNAME\",\r\n              //  \"value\": this.props.Login.masterData.SelectedUserName ? this.props.Login.masterData.SelectedUserName.susername : \"NA\",\r\n            },{\r\n              //  \"label\": \"IDS_USERROLE\",\r\n               // \"value\": this.props.Login.masterData.SelectedUserRole ? this.props.Login.masterData.SelectedUserRole.suserrolename : \"NA\",\r\n               \"label\": \"IDS_USERNAME\",\r\n                \"value\": this.props.Login.masterData.SelectedUserName ? this.props.Login.masterData.SelectedUserName.susername : \"NA\",\r\n            }\r\n        );\r\n        // } else {\r\n        //     breadCrumbData.push(\r\n        //         {\r\n        //             \"label\": \"IDS_USERROLE\",\r\n        //             \"value\": \"NA\"\r\n\r\n        //         },\r\n        //     );\r\n        // }\r\n        return breadCrumbData;\r\n    }\r\n\r\n    componentDidUpdate(previousProps) {\r\n        ReactTooltip.rebuild();\r\n        const masterData = this.props.Login.masterData;\r\n        if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\r\n            this.setState({ selectedRecord: this.props.Login.selectedRecord });\r\n\r\n        }\r\n\r\n        if (this.props.Login.selectedcombo !== previousProps.Login.selectedcombo) {\r\n            this.setState({ selectedcombo: this.props.Login.selectedcombo });\r\n        }\r\n\r\n        if (this.props.Login.comboitem !== previousProps.Login.comboitem) {\r\n            this.setState({ comboitem: this.props.Login.comboitem });\r\n        }\r\n        if (this.props.Login.masterData.AvaliableScreen !== previousProps.Login.masterData.AvaliableScreen) {\r\n            let skip = this.state.skip;\r\n            let take = this.state.take;\r\n            skip = this.props.Login.skip === undefined ? skip : this.props.Login.skip;\r\n            take = this.props.Login.take || take;\r\n\r\n            this.setState({ skip, take });\r\n        }\r\n\r\n        if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\r\n            const userRoleControlRights = [];\r\n            if (this.props.Login.userRoleControlRights) {\r\n                this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item =>\r\n                    userRoleControlRights.push(item.ncontrolcode))\r\n            }\r\n\r\n            const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode)\r\n            this.setState({\r\n                userRoleControlRights, controlMap, data: this.props.Login.masterData.ControlRights\r\n            });\r\n        }\r\n        if (this.props.Login.masterData.userrole !== undefined) {\r\n            if (this.props.Login.masterData.userrole !== previousProps.Login.masterData.userrole) {\r\n                const userrole = constructOptionList(this.props.Login.masterData.userrole || [], \"nuserrolecode\",\r\n                    \"suserrolename\", undefined, undefined, undefined);\r\n                const userroleList = userrole.get(\"OptionList\");\r\n\r\n                const selectedcombo = {\r\n                    nuserrolecode: masterData.userrole && masterData.userrole.length > 0 ? {\r\n                        \"value\": masterData.userrole[0].nuserrolecode,\r\n                        \"label\": masterData.userrole[0].suserrolename\r\n                    } : \"\"\r\n                }\r\n                this.setState({\r\n                    selectedcombo: selectedcombo,\r\n                    userroleList: userroleList\r\n                });\r\n            }\r\n        }\r\n        //Added by Allwin\r\n        if (this.props.Login.masterData.UsersMain !== previousProps.Login.masterData.UsersMain) {\r\n            const UsersMain = constructOptionList(this.props.Login.masterData.UsersMain || [], \"nusercode\",\r\n                \"susername\", undefined, undefined, undefined);\r\n            const userrnameList = UsersMain.get(\"OptionList\");\r\n\r\n            const selectedcombouser = {\r\n                nusercode: masterData.UsersMain && masterData.UsersMain.length > 0 ? {\r\n                    \"value\": masterData.UsersMain[0].nusercode,\r\n                    \"label\": masterData.UsersMain[0].susername\r\n                } : \"\"\r\n            }\r\n            this.setState({\r\n                selectedcombouser: selectedcombouser,\r\n                userrnameList: userrnameList\r\n            });\r\n        }\r\n        //         if('SelectedScreenRights' in this.props.Login.masterData)\r\n        //         {\r\n        //             if(this.props.Login.masterData.SelectedScreenRights.length>0)\r\n        //             {\r\n        //                 if('SelectedScreenRights' in previousProps.Login.masterData)\r\n        //                 {\r\n        //                     if(previousProps.Login.masterData.SelectedScreenRights.length>0)\r\n        //            {\r\n        //             if(this.props.Login.masterData.SelectedScreenRights[0].needrights!==\r\n        //                 previousProps.Login.masterData.SelectedScreenRights[0].needrights)\r\n        //                 {\r\n        // if( this.props.Login.masterData.SelectedScreenRights[0].needrights===3)\r\n        // {\r\n        //     this.setState({custombuttonstate:true})\r\n        // }\r\n        // else\r\n        // {\r\n        //     this.setState({custombuttonstate:false}) \r\n        // }\r\n        //                 }\r\n        //             }\r\n        //             }\r\n        //             }\r\n        //         }\r\n        if (this.props.Login.masterData !== previousProps.Login.masterData) {\r\n            const filterData = this.generateBreadCrumData();\r\n\r\n            // let dataState = this.state.dataState || {};\r\n            // dataState= {...dataState, group: [{ field: 'screenname' }]} ;\r\n\r\n            this.setState({\r\n                filterData//, dataState\r\n            });\r\n        }\r\n\r\n\r\n        // if(this.props.Login.masterData.searchedData !== this.props.Login.masterData.ScreenRights){\r\n        //    if (this.props.Login.masterData.searchedData) \r\n        //    {\r\n        //     if(this.props.Login.masterData.searchedData.length<= this.state.skip){\r\n        //         this.setState({skip:0});\r\n        //     }\r\n        // }\r\n        // }\r\n\r\n\r\n    }\r\n\r\n\r\n    handlePageChange = e => {\r\n        console.log('zzzzzzzzzz',e.skip)\r\n        console.log('zzzzzzzzzz1',e.take)\r\n        this.setState({\r\n            skip: e.skip,\r\n            take: e.take\r\n        });\r\n        //setTimeout(() => { this._scrollBarRef.updateScroll() })\r\n    };\r\n\r\n    validateEsign = () => {\r\n        const inputParam = {\r\n            inputData: {\r\n                \"userinfo\": {\r\n                    ...this.props.Login.userInfo,\r\n                    sreason: this.state.selectedRecord[\"esigncomments\"],\r\n                    nreasoncode:this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].value,\r\n                    spredefinedreason:this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].label,\r\n               \r\n                },\r\n                password: this.state.selectedRecord[\"esignpassword\"]\r\n            },\r\n            screenData: this.props.Login.screenData\r\n        }\r\n        this.props.validateEsignCredential(inputParam, \"openModal\");\r\n    }\r\n\r\n    closeModal = () => {\r\n        let loadEsign = this.props.Login.loadEsign;\r\n        let openModal = this.props.Login.openModal;\r\n        let selectedRecord = this.props.Login.selectedRecord;\r\n        if (this.props.Login.loadEsign) {\r\n            if (this.props.Login.operation === \"delete\" || this.props.Login.operation === \"retire\") {\r\n                loadEsign = false;\r\n                openModal = false;\r\n                selectedRecord = {}\r\n            }\r\n            else {\r\n                loadEsign = false;\r\n                selectedRecord['esignpassword'] = \"\"\r\n                selectedRecord['esigncomments'] = \"\"\r\n                selectedRecord['esignreason']=\"\"\r\n                \r\n            }\r\n        }\r\n        else {\r\n            openModal = false;\r\n            selectedRecord = {};\r\n        }\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { openModal, loadEsign, selectedRecord, selectedId: null }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n\r\n    onComboChange = (comboData, fieldName) => {\r\n        if (comboData != null) {\r\n            if (fieldName === \"nuserrolecode\") {\r\n                const selectedcombo = this.state.selectedcombo || {};\r\n                selectedcombo[fieldName] = comboData;\r\n                this.searchRef.current.value = \"\";\r\n\r\n                //Added by Allwin for Combo Change Get\r\n                // const inputParamcombo = {\r\n                //     nuserrolecode: comboData.item.nuserrolecode\r\n                // };\r\n\r\n               // const selectedcombouser = this.state.selectedcombouser || {};\r\n                // selectedcombouser= this.props.initialcombochangeget(comboData.item.nuserrolecode);\r\n                this.props.initialcombochangeget(comboData.item.nuserrolecode,this.props.Login.masterData,this.props.Login.userInfo);\r\n            //    this.props.initialcombochangeget(comboData.item.nuserrolecode);\r\n               \r\n              //  this.props.initialcombochangeget(comboData.item.nuserrolecode,this.props.Login.masterData, this.props.Login.userInfo);\r\n               \r\n               \r\n                //this.setState({ selectedcombo});\r\n\r\n                // let dataState = this.state.dataState || {};\r\n                // dataState= {...dataState, group: [{ field: 'screenname' }]} ;\r\n\r\n\r\n                // masterData[\"ControlRights\"]=[]\r\n                // this.props.comboChangeUserRoleScreenRights(comboData.value, this.props.Login.masterData, this.props.Login.userInfo, selectedcombo);\r\n            }\r\n            else if (fieldName === \"nusercode\") {\r\n                const selectedcombouser = this.state.selectedcombouser || {};\r\n                selectedcombouser[fieldName] = comboData;\r\n                this.setState({ selectedcombouser });\r\n            }\r\n            else if (fieldName === \"value\") {\r\n                const comboitem = this.state.comboitem || {};\r\n                comboitem[fieldName] = comboData;\r\n                this.setState({ comboitem });\r\n            }\r\n            else if (fieldName === \"nformcode\") {\r\n                const selectedRecord = this.state.selectedRecord || {};\r\n                selectedRecord[\"nformcode\"] = comboData;\r\n                let availableDatas = [];\r\n                this.state.selectedRecord.nformcode.map(data => {\r\n                    return availableDatas.push(data.item);\r\n                });\r\n                this.setState({ selectedRecord, availableDatas });\r\n            }\r\n        }\r\n    }\r\n\r\n    onComboChangeUserRole = (comboData, fieldName) => {\r\n        if (comboData != null) {\r\n            const selectedRecord = this.state.selectedRecord || {}; //this.state.selectedRecord || {};\r\n            selectedRecord[\"nuserrole\"] = comboData;\r\n            if (fieldName === \"nuserrole\") {\r\n                this.props.checkUserRoleScreenRights(comboData.value, this.props.Login.masterData, this.props.Login.userInfo, selectedRecord);\r\n            }\r\n        }\r\n    }\r\n\r\n    onInputOnChange = (event) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if (event.target.type === 'checkbox') {\r\n            if (event.target.name === \"ntransactionstatus\")\r\n                selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.ACTIVE : transactionStatus.DEACTIVE;\r\n            else\r\n                selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\r\n        }\r\n        else {\r\n            selectedRecord[event.target.name] = event.target.value;\r\n        }\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    onInputOnControlRights(event, rowItem, columnName, rowIndex, saveType,needesignparent) {\r\n        //  const selectedRecord = rowItem || {};\r\n        // selectedRecord[]\r\n        const selectedRecord = {};\r\n         if(needesignparent===4)\r\n         {\r\n             toast.warn(this.props.intl.formatMessage({ id: \"IDS_ITISDEACTIVEINSCREENRIGHTS\" }))\r\n       }\r\n        else\r\n    {\r\n        if (rowItem[\"needrights\"] !== 3) {\r\n            selectedRecord[\"ncontrolcode\"] = rowItem[\"ncontrolcode\"]\r\n            selectedRecord[\"nformcode\"] = rowItem[\"nformcode\"]\r\n            //    selectedRecord[\"needrights\"]= rowItem[\"needrights\"]\r\n            selectedRecord[\"nstatus\"] = rowItem[\"nstatus\"]\r\n            selectedRecord[\"nuserrolecode\"] = this.state.selectedcombo[\"nuserrolecode\"].value\r\n            selectedRecord[\"nusercode\"] = this.state.selectedcombouser[\"nusercode\"].value\r\n            selectedRecord[\"scontrolids\"] = rowItem[\"scontrolids\"]\r\n            selectedRecord[\"scontrolname\"] = rowItem[\"scontrolname\"]\r\n            selectedRecord[\"screenname\"] = rowItem[\"screenname\"]\r\n        //    if(columnName===\"nneedesign\")  \r\n        //    {\r\n        //    selectedRecord[\"nneedesign\"]=rowItem[\"nneedesign\"]\r\n        //    }\r\n            // ncontrolcode: 133\r\n            // nformcode: 44\r\n\r\n            // nneedrights: 3\r\n            // nstatus: 1\r\n            // nuserrolecode: 0\r\n            // scontrolids: \"Delete Charge Band\"\r\n            // scontrolname: \"DeleteChargeBand\"\r\n            // screenname: \"Charge Band\"\r\n\r\n            if(columnName===\"nneedesign\")  \r\n            {\r\n                selectedRecord[\"nneedesign\"] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\r\n            }\r\n            else\r\n            {\r\n            selectedRecord[\"needrights\"] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\r\n            }\r\n            this.saveClick(selectedRecord, saveType, undefined);\r\n        }\r\n    }\r\n    }\r\n\r\n    saveClick = (selectedRecord, saveType, formRef) => {\r\n        let operation = \"update\";\r\n       // let methodUrl = \"\";\r\n        let inputData = [];\r\n        let postParam = {\r\n            inputListName: \"ScreenRights\", selectedObject: \"SelectedScreenRights\",\r\n            primaryKeyField: \"nusersrolehidescreencode\"\r\n        }\r\n        inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n        inputData[\"selectedscreenrights\"] = this.props.Login.masterData.SelectedScreenRights;\r\n        inputData[\"nflag\"] = transactionStatus.ACTIVE;\r\n        inputData[\"screenrights\"] = selectedRecord;\r\n        if (saveType === 1) {\r\n            inputData[\"needrights\"] = selectedRecord[\"needrights\"];\r\n            inputData[\"nneedesign\"] = null;\r\n            //methodUrl = \"ControlRights\";\r\n        }\r\n        else {\r\n            inputData[\"nneedesign\"] = selectedRecord[\"nneedesign\"];\r\n           // methodUrl = \"Esign\";\r\n        }\r\n        const inputParam = {\r\n            classUrl: \"userscreenhide\",\r\n            methodUrl: \"ScreenHideControlRights\",\r\n            displayName: this.props.Login.inputParam.displayName,\r\n            inputData: inputData,\r\n            operation: operation, saveType, formRef, searchRef: this.searchRef, postParam, dataState: this.state.dataState\r\n        }\r\n        this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\r\n    }\r\n\r\n\r\n    onSaveClick = (saveType, formRef) => {\r\n        let inputData = [];\r\n        let inputParam = {};\r\n        inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n        let postParam = undefined;\r\n        inputData[\"userscreenhide\"] = this.state.availableDatas;\r\n        inputData[\"nuserrolecode\"] = this.state.selectedcombo[\"nuserrolecode\"] ? this.state.selectedcombo[\"nuserrolecode\"].value : \"\";\r\n        inputData[\"userrolecode\"] = this.state.selectedRecord[\"nuserrole\"] ? this.state.selectedRecord[\"nuserrole\"].value : \"\";\r\n        inputData[\"usercode\"] = this.state.selectedcombouser[\"nusercode\"] ? this.state.selectedcombouser[\"nusercode\"].value : \"\";\r\n        // inputData[\"nusercode\"] = this.state.selectedcombouser[\"nusercode\"] ? this.state.selectedcombouser[\"nusercode\"].value : \"\";\r\n        inputParam = {\r\n            classUrl: this.props.Login.inputParam.classUrl,\r\n            methodUrl: \"UserScreenhide\",\r\n            inputData: inputData,\r\n            operation: this.props.Login.operation,\r\n            saveType, formRef, postParam, selectedRecord: this.state.selectedRecord,\r\n            searchRef: this.searchRef,\r\n            dataState: this.state.dataState\r\n        }\r\n        const masterData = this.props.Login.masterData;\r\n        if (this.props.Login.screenName === \"IDS_SCREENRIGHTS\") {\r\n            if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        loadEsign: true, screenData: { inputParam, masterData }, saveType\r\n                    }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n            else {\r\n                this.props.crudMaster(inputParam, masterData, \"openModal\");\r\n            }\r\n        } else {\r\n            if (this.props.Login.masterData.copyScreenRights ? this.props.Login.masterData.copyScreenRights.length > 0 : false) {\r\n                this.ConfirmComponent()\r\n            }\r\n            else {\r\n                if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\r\n                    const updateInfo = {\r\n                        typeName: DEFAULT_RETURN,\r\n                        data: {\r\n                            loadEsign: true, screenData: { inputParam, masterData }, saveType\r\n                        }\r\n                    }\r\n                    this.props.updateStore(updateInfo);\r\n                }\r\n                else {\r\n                    this.props.copyScreenRights(this.state.selectedRecord ? this.state.selectedRecord[\"nuserrole\"].value : \"\", this.state.selectedcombo[\"nuserrolecode\"] ? this.state.selectedcombo[\"nuserrolecode\"].value : \"\", this.props.Login.userInfo, this.props.Login.masterData);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    copyAlertSave = () => {\r\n        let inputData = [];\r\n        let inputParam = {};\r\n        inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n        let postParam = undefined;\r\n        inputData[\"screenrights\"] = this.state.availableDatas;\r\n        inputData[\"nuserrolecode\"] = this.state.selectedcombo[\"nuserrolecode\"] ? this.state.selectedcombo[\"nuserrolecode\"].value : \"\";\r\n        inputData[\"userrolecode\"] = this.state.selectedRecord ? this.state.selectedRecord[\"nuserrole\"].value : \"\";\r\n        inputParam = {\r\n            classUrl: this.props.Login.inputParam.classUrl,\r\n            methodUrl: \"ScreenRights\",\r\n            inputData: inputData,\r\n            operation: this.props.Login.operation,\r\n            postParam, searchRef: this.searchRef\r\n        }\r\n        const masterData = this.props.Login.masterData;\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData }\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.copyScreenRights(this.state.selectedRecord ? this.state.selectedRecord[\"nuserrole\"].value : \"\", this.state.selectedcombo[\"nuserrolecode\"] ? this.state.selectedcombo[\"nuserrolecode\"].value : \"\", this.props.Login.userInfo, this.props.Login.masterData);\r\n        }\r\n    }\r\n\r\n    onSaveAllControlAndEsign = (skip, take, saveType, formRef) => {\r\n        let value = this.state.comboitem ? this.state.comboitem.value.value : this.ControlButton[0].value\r\n        let operation = \"\";\r\n       // let methodUrl = \"\";\r\n        let inputData = [];\r\n        let postParam = undefined;\r\n        inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n        // inputData[\"selectedscreenrights\"] = this.props.Login.masterData.SelectedScreenRights.slice(skip, skip + take);\r\n        inputData[\"selectedscreenrights\"] = this.props.Login.masterData.SelectedScreenRights;\r\n        inputData[\"nflag\"] = transactionStatus.DEACTIVE;\r\n        postParam = {\r\n            inputListName: \"ScreenRights\", selectedObject: \"SelectedScreenRights\",\r\n            primaryKeyField: \"nusersrolehidescreencode\"\r\n        }\r\n        if (value === 1) {\r\n            inputData[\"needrights\"] = transactionStatus.YES;\r\n            inputData[\"nneedesign\"] = null;\r\n            operation = \"update\";\r\n           // methodUrl = \"ControlRights\";\r\n        }\r\n        else if (value === 2) {\r\n            inputData[\"needrights\"] = transactionStatus.NO;\r\n            inputData[\"nneedesign\"] = null;\r\n            operation = \"update\";\r\n          //  methodUrl = \"ControlRights\";\r\n        }\r\n        else if (value === 3) {\r\n            inputData[\"nneedesign\"] = transactionStatus.YES;\r\n            operation = \"update\";\r\n          //  methodUrl = \"Esign\";\r\n        }\r\n        else if (value === 4) {\r\n            inputData[\"nneedesign\"] = transactionStatus.NO;\r\n            operation = \"update\";\r\n          //  methodUrl = \"Esign\";\r\n        }\r\n\r\n        const inputParam = {\r\n            classUrl: \"userscreenhide\",\r\n            methodUrl: \"ScreenHideControlRights\",\r\n            displayName: this.props.Login.inputParam.displayName,\r\n            inputData: inputData,\r\n            operation: operation, saveType,\r\n            formRef, postParam,\r\n            searchRef: this.searchRef,\r\n            selectedcombo: this.props.Login.selectedcombo,\r\n        }\r\n        this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\r\n    }\r\n\r\n    ConfirmComponent = () => {\r\n        this.confirmMessage.confirm(\"confirmation\", \"Confiramtion!\", this.props.intl.formatMessage({ id: \"IDS_OVERWRITRTHEEXISTINGSCREENRIGHTS\" }),\r\n            \"ok\", \"cancel\", () => this.copyAlertSave());\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                masterData: [], inputParam: undefined, operation: null, modalName: undefined\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    handleClickDelete(masterData, ncontrolcode, modalName) {\r\n        const fieldArray = [];\r\n        this.props.Login.masterData.SelectedScreenRights.map(item => fieldArray.push(item.nusersrolehidescreencode));\r\n        let postParam = {\r\n            inputListName: \"UserScreenhide\", selectedObject: \"SelectedScreenRights\",\r\n            primaryKeyField: \"nusersrolehidescreencode\",\r\n            primaryKeyValue: fieldArray,\r\n            fetchUrl: \"userscreenhide/getUserScreenhide\",\r\n            fecthInputObject: { userinfo: this.props.Login.userInfo },\r\n        }\r\n        modalName = 'openModal'\r\n\r\n        const inputParam = {\r\n            methodUrl: \"UserScreenhide\",\r\n            classUrl: \"userscreenhide\",\r\n            inputData: {\r\n                \"screenrights\": this.props.Login.masterData.SelectedScreenRights,\r\n                \"userinfo\": this.props.Login.userInfo,\r\n                \"nuserrolecode\": this.state.selectedcombo[\"nuserrolecode\"]\r\n                    ? this.state.selectedcombo[\"nuserrolecode\"].value : \"\"\r\n                , \"usercode\": this.state.selectedcombouser[\"nusercode\"]\r\n                    ? this.state.selectedcombouser[\"nusercode\"].value : \"\"\r\n            },\r\n            operation: \"delete\", postParam,\r\n            displayName: \"IDS_USERSCREENHIDE\",\r\n            // dataState: this.state.dataState\r\n        }\r\n\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, ncontrolcode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData }, [modalName]: true,\r\n                    operation: 'delete', screenName: \"ScreenRights\", id: \"screenrights\"\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.crudMaster(inputParam, masterData, modalName);\r\n        }\r\n    }\r\n\r\n    reloadData = () => {\r\n        this.searchRef.current.value = \"\";\r\n        if (this.props.Login.masterData.SelectedUserRole) {\r\n            let comboitem = {}\r\n            //let selectedcombo= this.state.selectedcombo;\r\n            comboitem[\"value\"] = this.ControlButton[0];\r\n            this.searchRef.current.value = \"\";\r\n            const inputParam = {\r\n                inputData: { \"userinfo\": this.props.Login.userInfo },\r\n                classUrl: \"userscreenhide\",\r\n                methodUrl: \"getUserScreenhide\",\r\n                displayName: \"UserScreenhide\",\r\n                userInfo: this.props.Login.userInfo,\r\n                comboitem,\r\n                nuserrolecode: this.props.Login.masterData.SelectedUserRole,\r\n                masterData: this.props.Login.masterData,\r\n                skip: this.state.skip,\r\n                take: this.state.take\r\n\r\n            };\r\n            this.props.reload(inputParam);\r\n        } else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTUSERROLE\" }))\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, {\r\n    callService, reload, crudMaster, validateEsignCredential, filterTransactionList,\r\n    updateStore, getScreenRightsDetail, getUserScreenhideComboService, comboChangeUserRoleScreenRights, handleClickDelete, filterColumnData, getCopyUseRoleScreenRights, copyScreenRights, checkUserRoleScreenRights,\r\n    sortData, initialcombochangeget, comboChangeUserRoleScreenRightsHide, getUserScreenhideDetail, ListSwitchUpdate\r\n})(injectIntl(UserRoleScreenHide));\r\n\r\n"]},"metadata":{},"sourceType":"module"}