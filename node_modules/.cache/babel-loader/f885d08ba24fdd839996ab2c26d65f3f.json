{"ast":null,"code":"import rsapi from '../rsapi';\nimport { DEFAULT_RETURN } from './LoginTypes';\nimport { toast } from 'react-toastify';\nimport { initRequest } from './LoginAction';\nimport { sortData, constructOptionList, parentChildComboLoad } from '../components/CommonScript';\nimport { getcomponentdata, getValidComponent, replaceChildFromChildren } from '../components/droparea/helpers';\nimport { ReactComponents, transactionStatus } from '../components/Enumeration';\nimport Axios from 'axios';\nimport { getTreeByProduct } from './RegistrationAction';\nexport function getReactInputFields(userinfo, operation, respObj) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    const listURL = [];\n    listURL[0] = rsapi.post(\"dynamicpreregdesign/getReactComponents\", {\n      userinfo\n    });\n    listURL[1] = rsapi.post(\"dynamicpreregdesign/getReactInputFields\", {\n      userinfo\n    });\n    Axios.all(listURL).then(response => {\n      respObj = respObj ? { ...respObj\n      } : {};\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          ReactInputFields: response[1].data,\n          ReactComponents: response[0].data.components,\n          ReactTables: constructOptionList(response[0].data.tables, 'nquerybuildertablecode', 'displayname').get(\"OptionList\"),\n          selectedFieldRecord: {},\n          openModal: false,\n          loading: false,\n          openPortal: true,\n          operation,\n          ...respObj\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function selectRegistrationTemplate(template, masterData, userinfo) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"dynamicpreregdesign/getRegistrationTemplateById\", {\n      nreactregtemplatecode: template.nreactregtemplatecode,\n      userinfo\n    }).then(response => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...masterData,\n            selectedTemplate: response.data\n          },\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getRegistrationTemplate(selectedSampleType, masterData, userinfo) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"dynamicpreregdesign/getDynamicPreRegDesign\", {\n      nsampletypecode: selectedSampleType.value,\n      userinfo\n    }).then(response => {\n      masterData = { ...masterData,\n        ...response.data,\n        searchedData: undefined\n      };\n      sortData(masterData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          realSampleType: [{\n            \"label\": \"IDS_SAMPLETYPE\",\n            \"value\": selectedSampleType.label,\n            \"item\": selectedSampleType\n          }],\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getEditRegTemplate(masterData, userinfo, editId) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"dynamicpreregdesign/getRegistrationTemplateById\", {\n      nreactregtemplatecode: masterData.selectedTemplate.nreactregtemplatecode,\n      userinfo\n    }).then(response => {\n      if (response.data.ntransactionstatus === transactionStatus.DRAFT) {\n        let jsonData = response.data.jsondata;\n        sortData(masterData);\n        const respObj = {\n          masterData,\n          ncontrolcode: editId,\n          openPortal: true,\n          loading: false,\n          openModal: false,\n          design: jsonData,\n          selectedRecord: {\n            templateName: response.data.sregtemplatename\n          }\n        }; // dispatch({\n        //     type: DEFAULT_RETURN,\n        //     payload: {\n        //         masterData,\n        //         ncontrolcode: editId,\n        //         // openPortal: true,\n        //         // loading: false,\n        //         design: jsonData,\n        //         selectedRecord: { templateName: response.data.sregtemplatename }\n        //     }\n        // })\n\n        dispatch(getReactInputFields(userinfo, \"update\", respObj));\n      } else {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false,\n            masterStatus: \"IDS_SELECTDRAFTRECORD\"\n          }\n        });\n      }\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getJsonValue(PGjsonData) {\n  if (Array.isArray(PGjsonData)) {\n    let JSONData = [];\n    PGjsonData.map(data => {\n      return JSONData.push(JSON.parse(data.jsondata));\n    });\n    return JSONData;\n  } else {\n    return JSON.parse(PGjsonData);\n  }\n}\nexport function getTableColumns(design, selectedFieldRecord, stablename, userinfo, path, columnInfo, componentData, updateComponents, showFilter) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"dynamicpreregdesign/getTableColumns\", {\n      \"nquerybuildertablecode\": stablename,\n      userinfo\n    }).then(response => {\n      columnInfo = columnInfo || {};\n      const staicColumns = response.data.jstaticcolumns || [];\n      const dynamicColumns = response.data.jdynamiccolumns || [];\n      const multilingualColumns = response.data.jmultilingualcolumn || [];\n      const numericColumns = response.data.jnumericcolumns || [];\n      const primaryKeyName = response.data.sprimarykeyname;\n      columnInfo = { ...columnInfo,\n        [stablename]: {\n          staicColumns,\n          dynamicColumns,\n          multilingualColumns,\n          numericColumns,\n          primaryKeyName\n        }\n      };\n      let defaultColumn = {};\n      let comboData = [];\n      let filterColumns = [];\n      staicColumns.map(item => {\n        comboData.push({\n          label: item.displayname[userinfo.slanguagetypecode] || item.displayname['en-US'],\n          value: item.columnname,\n          type: \"static\",\n          item\n        });\n\n        if (item.default) {\n          defaultColumn = {\n            label: item.displayname[userinfo.slanguagetypecode] || item.displayname['en-US'],\n            value: item.columnname,\n            type: \"static\",\n            item\n          };\n        }\n      });\n      dynamicColumns.map(item => {\n        comboData.push({\n          label: item.displayname[userinfo.slanguagetypecode] || item.displayname['en-US'],\n          value: item.columnname,\n          type: \"dynamic\",\n          item\n        });\n\n        if (item.default) {\n          defaultColumn = {\n            label: item.displayname[userinfo.slanguagetypecode] || item.displayname['en-US'],\n            value: item.columnname,\n            type: \"dynamic\",\n            item\n          };\n        }\n      });\n      multilingualColumns.map(item => {\n        comboData.push({\n          label: item.displayname[userinfo.slanguagetypecode] || item.displayname['en-US'],\n          value: item.columnname,\n          type: \"static\",\n          item\n        });\n\n        if (item.default) {\n          defaultColumn = {\n            label: item.displayname[userinfo.slanguagetypecode] || item.displayname['en-US'],\n            value: item.columnname,\n            type: \"static\",\n            item\n          };\n        }\n      });\n      filterColumns = [...comboData];\n      numericColumns.map(item => {\n        filterColumns.push({\n          label: item.displayname[userinfo.slanguagetypecode] || item.displayname['en-US'],\n          value: item.columnname,\n          type: \"numeric\",\n          item\n        });\n      });\n\n      if (defaultColumn.item && defaultColumn.item.ismultilingual) {\n        selectedFieldRecord['isMultiLingual'] = true;\n      }\n\n      if (updateComponents) {\n        componentData = componentData || {};\n        selectedFieldRecord = { ...selectedFieldRecord,\n          column: defaultColumn,\n          displaymember: defaultColumn.value,\n          valuemember: primaryKeyName\n        };\n        design = replaceChildFromChildren(design, path, selectedFieldRecord);\n\n        if (selectedFieldRecord.componentcode !== ReactComponents.COMBO && selectedFieldRecord.componentcode !== ReactComponents.FRONTENDSEARCHFILTER && selectedFieldRecord.componentcode !== ReactComponents.BACKENDSEARCHFILTER) {\n          let validComponents = getValidComponent(selectedFieldRecord, componentData.components, columnInfo);\n          componentData = { ...componentData,\n            validComponents\n          };\n        }\n      } else if (componentData === undefined || componentData.components === undefined) {\n        componentData = componentData || {};\n\n        if (selectedFieldRecord.componentcode === ReactComponents.FRONTENDSEARCHFILTER || selectedFieldRecord.componentcode === ReactComponents.BACKENDSEARCHFILTER) {\n          selectedFieldRecord = { ...selectedFieldRecord,\n            filterfields: [defaultColumn.item],\n            customsearchfilter: [defaultColumn],\n            displaymember: defaultColumn.value,\n            valuemember: primaryKeyName\n          };\n        } else {\n          selectedFieldRecord = { ...selectedFieldRecord,\n            column: defaultColumn,\n            displaymember: defaultColumn.value,\n            valuemember: primaryKeyName\n          };\n        }\n\n        design = replaceChildFromChildren(design, path, selectedFieldRecord);\n\n        if (selectedFieldRecord.componentcode !== ReactComponents.COMBO && selectedFieldRecord.componentcode !== ReactComponents.FRONTENDSEARCHFILTER && selectedFieldRecord.componentcode !== ReactComponents.BACKENDSEARCHFILTER) {\n          let validComponents = getValidComponent(selectedFieldRecord, componentData.components, columnInfo);\n          componentData = { ...componentData,\n            validComponents\n          };\n        }\n      } else {\n        let validComponents = getValidComponent(selectedFieldRecord, componentData.components, columnInfo);\n        let parentRadioValue = [];\n\n        if (selectedFieldRecord.componentcode === ReactComponents.FRONTENDSEARCHFILTER || selectedFieldRecord.componentcode === ReactComponents.BACKENDSEARCHFILTER) {\n          if (selectedFieldRecord.parentPath) {\n            let oldParentData = getcomponentdata(design, selectedFieldRecord.parentPath.split(\"-\"));\n\n            if (oldParentData.hasOwnProperty('child')) {\n              oldParentData.child.map(item => {\n                if (item.label === selectedFieldRecord.label) {\n                  parentRadioValue = oldParentData.radioOptions.tags.map(item => {\n                    return {\n                      value: item.id,\n                      label: item.text,\n                      item\n                    };\n                  });\n                }\n              });\n            }\n          }\n        }\n\n        componentData = { ...componentData,\n          validComponents,\n          parentRadioValue\n        };\n      }\n\n      columnInfo = { ...columnInfo,\n        [stablename]: { ...columnInfo[stablename],\n          tableColumn: comboData,\n          filterColumns\n        }\n      };\n      let optionalPayload = {\n        selectedComponentpath: Array.isArray(path) ? path.join(\"-\") : undefined\n      };\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false,\n          design,\n          selectedFieldRecord,\n          ...optionalPayload,\n          tableColumn: comboData,\n          filterColumns,\n          columnInfo,\n          primaryKeyName,\n          ...componentData,\n          showFilter: showFilter\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getForeignTableData(design, selectedFieldRecord, stablename, userinfo, path, columnInfo, componentData, updateComponents) {\n  return function (dispatch) {\n    let parentcolumnlist = [{\n      source: selectedFieldRecord.filtercolumn.item.foriegntablename,\n      valuemember: selectedFieldRecord.filtercolumn.item.tablecolumnname,\n      displaymember: selectedFieldRecord.filtercolumn.item.columnname,\n      conditionstring: selectedFieldRecord.filtercolumn.item.conditionstring,\n      label: \"filterData\",\n      inputtype: \"combo\",\n      isMultiLingual: selectedFieldRecord.filtercolumn.item.ismultilingual\n    }];\n    rsapi.post(\"dynamicpreregdesign/getComboValues\", {\n      parentcolumnlist,\n      userinfo\n    }).then(response => {\n      let comboData = [];\n      let selectedRecord = {};\n      const newcomboData = parentChildComboLoad(parentcolumnlist, response.data, selectedRecord, [], [], undefined, userinfo.slanguagetypecode); // sortData(masterData)\n\n      const comboData1 = newcomboData.comboData;\n      const selectedRecord1 = newcomboData.selectedRecord;\n\n      if (updateComponents) {\n        componentData = componentData || {}; // selectedFieldRecord = { ...selectedFieldRecord };\n\n        design = replaceChildFromChildren(design, path, selectedFieldRecord);\n\n        if (selectedFieldRecord.componentcode !== ReactComponents.COMBO) {\n          let validComponents = getValidComponent(selectedFieldRecord, componentData.components, columnInfo);\n          componentData = { ...componentData,\n            validComponents\n          };\n        }\n      }\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false,\n          design,\n          selectedFieldRecord,\n          masterDataValue: comboData,\n          columnInfo,\n          ...componentData,\n          ...comboData1\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getPreviewTemplate(masterData, userinfo, editId, columnList, selectedRecord, childColumnList, comboComponents, withoutCombocomponent, openPortal, openModal, mapOfFilterRegData, preview, operation, screenName) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    const timeZoneService = rsapi.post(\"timezone/getTimeZone\");\n    const actualService = rsapi.post(\"dynamicpreregdesign/getComboValues\", {\n      parentcolumnlist: columnList,\n      childcolumnlist: childColumnList,\n      userinfo\n    });\n    Axios.all([timeZoneService, actualService]).then(response => {\n      const timeZoneMap = constructOptionList(response[0].data || [], \"ntimezonecode\", \"stimezoneid\", undefined, undefined, true);\n      const timeZoneList = timeZoneMap.get(\"OptionList\");\n      const defaultTimeZone = {\n        label: userinfo.stimezoneid,\n        value: userinfo.ntimezonecode\n      };\n      const newcomboData = parentChildComboLoad(columnList, response[1].data, selectedRecord, childColumnList, withoutCombocomponent, undefined, userinfo.slanguagetypecode); // sortData(masterData)\n\n      const comboData1 = newcomboData.comboData;\n      const selectedRecord1 = newcomboData.selectedRecord;\n      withoutCombocomponent.map(componentrow => {\n        if (componentrow.inputtype === \"date\") {\n          //  if (componentrow.mandatory) {\n          selectedRecord1[componentrow.label] = componentrow.loadcurrentdate ? new Date() : \"\"; // }else{\n          //     selectedRecord1[componentrow.label] = componentrow.loadcurrentdate ? new Date() : \"\";\n          // }\n          // if (componentrow.timezone) {\n          //     sampleRegistration[\"jsondata\"][`tz${componentrow.label}`] = selectedRecord[`tz${componentrow.label}`] ?\n          //         { value: selectedRecord[`tz${componentrow.label}`].value, label: selectedRecord[`tz${componentrow.label}`].label } :\n          //         defaulttimezone ? defaulttimezone : -1\n          // }\n        } else if (componentrow.inputtype === \"radio\") {\n          selectedRecord1[componentrow.label] = componentrow.radioOptions ? componentrow.radioOptions.tags[0].text : \"\";\n        }\n      });\n\n      if (preview) {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            timeZoneList,\n            defaultTimeZone,\n            masterData,\n            ncontrolcode: editId,\n            openModal,\n            loading: false,\n            comboData: comboData1,\n            selectedRecord: selectedRecord1,\n            comboComponents,\n            withoutCombocomponent,\n            openPortal,\n            columnList,\n            childColumnList,\n            screenName // childOperation:true\n\n          }\n        });\n      } else {\n        if (mapOfFilterRegData.nsampletypecode === 1) {\n          const ProductCategory = comboComponents.filter(x => x.name === 'Product Category');\n\n          if (ProductCategory.length > 0) {\n            const nproductcatcode = selectedRecord1[ProductCategory[0].label] && selectedRecord1[ProductCategory[0].label].value;\n            const ncategorybasedFlow = selectedRecord1[ProductCategory[0].label] && selectedRecord1[ProductCategory[0].label]['item']['jsondata']['ncategorybasedflow'];\n\n            if (ncategorybasedFlow !== undefined) {\n              if (ncategorybasedFlow === 3) {\n                mapOfFilterRegData['nproductcode'] = -1;\n                mapOfFilterRegData['nproductcatcode'] = nproductcatcode;\n                const inputParam = {\n                  timeZoneList,\n                  defaultTimeZone,\n                  masterData,\n                  ncontrolcode: editId,\n                  openModal,\n                  comboComponents,\n                  withoutCombocomponent,\n                  openPortal,\n                  columnList,\n                  childColumnList,\n                  operation,\n                  screenName\n                };\n                dispatch(getTreeByProduct(mapOfFilterRegData, selectedRecord1, newcomboData.comboData, inputParam));\n              } else {\n                const Product = comboComponents.filter(x => x.name === 'Product');\n\n                if (Product.length > 0) {\n                  const nproductcode = selectedRecord1[Product[0].label] && selectedRecord1[Product[0].label].value;\n                  mapOfFilterRegData['nproductcode'] = nproductcode !== undefined ? nproductcode : -1;\n                  mapOfFilterRegData['nproductcatcode'] = nproductcatcode;\n                  const inputParam = {\n                    timeZoneList,\n                    defaultTimeZone,\n                    masterData,\n                    ncontrolcode: editId,\n                    openModal,\n                    comboComponents,\n                    withoutCombocomponent,\n                    openPortal,\n                    columnList,\n                    childColumnList,\n                    operation,\n                    screenName\n                  };\n                  dispatch(getTreeByProduct(mapOfFilterRegData, selectedRecord1, newcomboData.comboData, inputParam));\n                } else {\n                  dispatch({\n                    type: DEFAULT_RETURN,\n                    payload: {\n                      timeZoneList,\n                      defaultTimeZone,\n                      masterData,\n                      ncontrolcode: editId,\n                      openModal,\n                      loading: false,\n                      comboData: newcomboData.comboData,\n                      selectedRecord: selectedRecord1,\n                      comboComponents,\n                      withoutCombocomponent,\n                      openPortal,\n                      columnList,\n                      childColumnList,\n                      operation,\n                      screenName\n                    }\n                  });\n                }\n              }\n            } else {\n              dispatch({\n                type: DEFAULT_RETURN,\n                payload: {\n                  timeZoneList,\n                  defaultTimeZone,\n                  masterData,\n                  ncontrolcode: editId,\n                  openModal,\n                  loading: false,\n                  comboData: newcomboData.comboData,\n                  selectedRecord: selectedRecord1,\n                  comboComponents,\n                  withoutCombocomponent,\n                  openPortal,\n                  columnList,\n                  childColumnList,\n                  operation,\n                  screenName\n                }\n              });\n            }\n          } else {\n            dispatch({\n              type: DEFAULT_RETURN,\n              payload: {\n                timeZoneList,\n                defaultTimeZone,\n                masterData,\n                ncontrolcode: editId,\n                openModal,\n                loading: false,\n                comboData: newcomboData.comboData,\n                selectedRecord: selectedRecord1,\n                comboComponents,\n                withoutCombocomponent,\n                openPortal,\n                operation,\n                screenName\n              }\n            });\n          }\n        } else if (mapOfFilterRegData.nsampletypecode === 2) {\n          const InstrumentCategory = comboComponents.filter(x => x.name === 'Instrument Category');\n\n          if (InstrumentCategory.length > 0) {\n            const ninstrumentcatcode = selectedRecord1[InstrumentCategory[0].label] && selectedRecord1[InstrumentCategory[0].label].value;\n            const ncategorybasedFlow = selectedRecord1[InstrumentCategory[0].label] && selectedRecord1[InstrumentCategory[0].label]['item']['jsondata']['ncategorybasedflow'];\n\n            if (ncategorybasedFlow !== undefined) {\n              if (ncategorybasedFlow === 3) {\n                mapOfFilterRegData['nproductcode'] = -1;\n                mapOfFilterRegData['nproductcatcode'] = ninstrumentcatcode;\n                const inputParam = {\n                  timeZoneList,\n                  defaultTimeZone,\n                  masterData,\n                  ncontrolcode: editId,\n                  openModal,\n                  comboComponents,\n                  withoutCombocomponent,\n                  openPortal,\n                  columnList,\n                  childColumnList,\n                  operation,\n                  screenName\n                };\n                dispatch(getTreeByProduct(mapOfFilterRegData, selectedRecord1, newcomboData.comboData, inputParam));\n              } else {\n                const Instrument = comboComponents.filter(x => x.name === 'Instrument');\n\n                if (Instrument.length > 0) {\n                  const ninstrumentcode = selectedRecord1[Instrument[0].label] && selectedRecord1[Instrument[0].label].value;\n                  mapOfFilterRegData['nproductcode'] = ninstrumentcode !== undefined ? ninstrumentcode : -1;\n                  mapOfFilterRegData['nproductcatcode'] = ninstrumentcatcode;\n                  const inputParam = {\n                    timeZoneList,\n                    defaultTimeZone,\n                    masterData,\n                    ncontrolcode: editId,\n                    openModal,\n                    comboComponents,\n                    withoutCombocomponent,\n                    openPortal,\n                    columnList,\n                    childColumnList,\n                    operation,\n                    screenName\n                  };\n                  dispatch(getTreeByProduct(mapOfFilterRegData, selectedRecord1, newcomboData.comboData, inputParam));\n                } else {\n                  dispatch({\n                    type: DEFAULT_RETURN,\n                    payload: {\n                      timeZoneList,\n                      defaultTimeZone,\n                      masterData,\n                      ncontrolcode: editId,\n                      openModal,\n                      loading: false,\n                      comboData: newcomboData.comboData,\n                      selectedRecord: selectedRecord1,\n                      comboComponents,\n                      withoutCombocomponent,\n                      openPortal,\n                      columnList,\n                      childColumnList,\n                      operation,\n                      screenName\n                    }\n                  });\n                }\n              }\n            } else {\n              dispatch({\n                type: DEFAULT_RETURN,\n                payload: {\n                  timeZoneList,\n                  defaultTimeZone,\n                  masterData,\n                  ncontrolcode: editId,\n                  openModal,\n                  loading: false,\n                  comboData: newcomboData.comboData,\n                  selectedRecord: selectedRecord1,\n                  comboComponents,\n                  withoutCombocomponent,\n                  openPortal,\n                  columnList,\n                  childColumnList,\n                  operation,\n                  screenName\n                }\n              });\n            }\n          } else {\n            dispatch({\n              type: DEFAULT_RETURN,\n              payload: {\n                timeZoneList,\n                defaultTimeZone,\n                masterData,\n                ncontrolcode: editId,\n                openModal,\n                loading: false,\n                comboData: newcomboData.comboData,\n                selectedRecord: selectedRecord1,\n                comboComponents,\n                withoutCombocomponent,\n                openPortal,\n                operation,\n                screenName\n              }\n            });\n          }\n        } else if (mapOfFilterRegData.nsampletypecode === 3) {\n          const MaterialType = comboComponents.filter(x => x.name === 'Material Type');\n\n          if (MaterialType.length > 0) {\n            const nmaterialtypecode = selectedRecord1[MaterialType[0].label] && selectedRecord1[MaterialType[0].label].value;\n\n            if (nmaterialtypecode !== undefined) {\n              const MaterialCategory = comboComponents.filter(x => x.name === 'Material Category');\n\n              if (MaterialCategory.length > 0) {\n                const nmaterialcatcode = selectedRecord1[MaterialCategory[0].label] && selectedRecord1[MaterialCategory[0].label].value;\n                const ncategorybasedFlow = selectedRecord1[MaterialCategory[0].label] && selectedRecord1[MaterialCategory[0].label]['item']['jsondata']['ncategorybasedflow'];\n\n                if (ncategorybasedFlow !== undefined) {\n                  if (ncategorybasedFlow === 3) {\n                    mapOfFilterRegData['nproductcode'] = -1;\n                    mapOfFilterRegData['nproductcatcode'] = nmaterialcatcode;\n                    const inputParam = {\n                      timeZoneList,\n                      defaultTimeZone,\n                      masterData,\n                      ncontrolcode: editId,\n                      openModal,\n                      comboComponents,\n                      withoutCombocomponent,\n                      openPortal,\n                      columnList,\n                      childColumnList,\n                      operation,\n                      screenName\n                    };\n                    dispatch(getTreeByProduct(mapOfFilterRegData, selectedRecord1, newcomboData.comboData, inputParam));\n                  } else {\n                    const Material = comboComponents.filter(x => x.name === 'Material');\n\n                    if (Material.length > 0) {\n                      const nmaterialcode = selectedRecord1[Material[0].label] && selectedRecord1[Material[0].label].value;\n                      mapOfFilterRegData['nproductcode'] = nmaterialcode !== undefined ? nmaterialcode : -1;\n                      mapOfFilterRegData['nproductcatcode'] = nmaterialcatcode;\n                      const inputParam = {\n                        timeZoneList,\n                        defaultTimeZone,\n                        masterData,\n                        ncontrolcode: editId,\n                        openModal,\n                        comboComponents,\n                        withoutCombocomponent,\n                        openPortal,\n                        columnList,\n                        childColumnList,\n                        operation,\n                        screenName\n                      };\n                      dispatch(getTreeByProduct(mapOfFilterRegData, selectedRecord1, newcomboData.comboData, inputParam));\n                    } else {\n                      dispatch({\n                        type: DEFAULT_RETURN,\n                        payload: {\n                          timeZoneList,\n                          defaultTimeZone,\n                          masterData,\n                          ncontrolcode: editId,\n                          openModal,\n                          loading: false,\n                          comboData: newcomboData.comboData,\n                          selectedRecord: selectedRecord1,\n                          comboComponents,\n                          withoutCombocomponent,\n                          openPortal,\n                          columnList,\n                          childColumnList,\n                          operation,\n                          screenName\n                        }\n                      });\n                    }\n                  }\n                } else {\n                  dispatch({\n                    type: DEFAULT_RETURN,\n                    payload: {\n                      timeZoneList,\n                      defaultTimeZone,\n                      masterData,\n                      ncontrolcode: editId,\n                      openModal,\n                      loading: false,\n                      comboData: newcomboData.comboData,\n                      selectedRecord: selectedRecord1,\n                      comboComponents,\n                      withoutCombocomponent,\n                      openPortal,\n                      columnList,\n                      childColumnList,\n                      operation,\n                      screenName\n                    }\n                  });\n                }\n              } else {\n                dispatch({\n                  type: DEFAULT_RETURN,\n                  payload: {\n                    timeZoneList,\n                    defaultTimeZone,\n                    masterData,\n                    ncontrolcode: editId,\n                    openModal,\n                    loading: false,\n                    comboData: newcomboData.comboData,\n                    selectedRecord: selectedRecord1,\n                    comboComponents,\n                    withoutCombocomponent,\n                    openPortal,\n                    operation,\n                    screenName\n                  }\n                });\n              }\n            }\n          } else {\n            dispatch({\n              type: DEFAULT_RETURN,\n              payload: {\n                timeZoneList,\n                defaultTimeZone,\n                masterData,\n                ncontrolcode: editId,\n                openModal,\n                loading: false,\n                comboData: newcomboData.comboData,\n                selectedRecord: selectedRecord1,\n                comboComponents,\n                withoutCombocomponent,\n                openPortal,\n                columnList,\n                childColumnList,\n                operation,\n                screenName\n              }\n            });\n          }\n        }\n      }\n    }).catch(error => {\n      console.log(\"error:\", error);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getChildValues(inputParem, userinfo, selectedRecord, comboData, parentcolumnlist, childcolumnlist, withoutCombocomponent, parentListWithReadonly, productCategory, product, mapOfRegFilterData, instrumentCategory, instrument, materialCategory, material, materialType) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post('dynamicpreregdesign/getChildValues', {\n      child: inputParem.child,\n      parentdata: inputParem.item.jsondata,\n      parentsource: inputParem.source,\n      [inputParem.primarykeyField]: inputParem.value,\n      valuemember: inputParem.primarykeyField,\n      childcolumnlist,\n      userinfo,\n      parentcolumnlist\n    }).then(response => {\n      let returnObj = { ...comboData,\n        ...response.data\n      };\n      returnObj = parentChildComboLoad(parentListWithReadonly, returnObj, selectedRecord, childcolumnlist, withoutCombocomponent, inputParem, userinfo.slanguagetypecode);\n      selectedRecord = { ...selectedRecord,\n        ...returnObj.selectedRecord\n      };\n\n      if (productCategory) {\n        dispatch(getTreeByProduct(mapOfRegFilterData, selectedRecord, { ...returnObj.comboData\n        }));\n      } else if (product) {\n        if (selectedRecord[inputParem.nameofdefaultcomp === \"Product\" ? inputParem.label : inputParem.ProductName]) {\n          mapOfRegFilterData[\"nproductcode\"] = selectedRecord[inputParem.nameofdefaultcomp === \"Product\" ? inputParem.label : inputParem.ProductName] ? selectedRecord[inputParem.nameofdefaultcomp === \"Product\" ? inputParem.label : inputParem.ProductName].value : -1;\n          dispatch(getTreeByProduct(mapOfRegFilterData, selectedRecord, { ...returnObj.comboData\n          }));\n        } else {\n          selectedRecord[\"nallottedspeccode\"] = \"\";\n          selectedRecord[\"sversion\"] = \"\";\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              loading: false,\n              comboData: { ...returnObj.comboData\n              },\n              selectedRecord,\n              AgaramTree: [],\n              ActiveKey: [],\n              FocusKey: [],\n              OpenNodes: [],\n              Test: [],\n              SelectedTest: [],\n              selectedSpec: {},\n              Component: [],\n              selectComponent: {},\n              selectedComponent: {},\n              Specification: []\n            }\n          });\n        }\n      } else if (instrumentCategory) {\n        dispatch(getTreeByProduct(mapOfRegFilterData, selectedRecord, { ...returnObj.comboData\n        }));\n      } else if (materialCategory) {\n        dispatch(getTreeByProduct(mapOfRegFilterData, selectedRecord, { ...returnObj.comboData\n        }));\n      } else if (instrument) {\n        if (selectedRecord[inputParem.nameofdefaultcomp === \"Instrument\" ? inputParem.label : inputParem.InstrumentName]) {\n          mapOfRegFilterData[\"nproductcode\"] = selectedRecord[inputParem.nameofdefaultcomp === \"Instrument\" ? inputParem.label : inputParem.InstrumentName] ? selectedRecord[inputParem.nameofdefaultcomp === \"Instrument\" ? inputParem.label : inputParem.InstrumentName].value : -1;\n          dispatch(getTreeByProduct(mapOfRegFilterData, selectedRecord, { ...returnObj.comboData\n          }));\n        } else {\n          selectedRecord[\"nallottedspeccode\"] = \"\";\n          selectedRecord[\"sversion\"] = \"\";\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              loading: false,\n              comboData: { ...returnObj.comboData\n              },\n              selectedRecord,\n              AgaramTree: [],\n              ActiveKey: [],\n              FocusKey: [],\n              OpenNodes: [],\n              Test: [],\n              SelectedTest: [],\n              selectedSpec: {},\n              Component: [],\n              selectComponent: {},\n              selectedComponent: {},\n              Specification: []\n            }\n          });\n        }\n      } else if (material) {\n        if (selectedRecord[inputParem.nameofdefaultcomp === \"Material\" ? inputParem.label : inputParem.MaterialName]) {\n          mapOfRegFilterData[\"nproductcode\"] = selectedRecord[inputParem.nameofdefaultcomp === \"Material\" ? inputParem.label : inputParem.MaterialName] ? selectedRecord[inputParem.nameofdefaultcomp === \"Material\" ? inputParem.label : inputParem.MaterialName].value : -1;\n          dispatch(getTreeByProduct(mapOfRegFilterData, selectedRecord, { ...returnObj.comboData\n          }));\n        } else {\n          selectedRecord[\"nallottedspeccode\"] = \"\";\n          selectedRecord[\"sversion\"] = \"\";\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              loading: false,\n              comboData: { ...returnObj.comboData\n              },\n              selectedRecord,\n              AgaramTree: [],\n              ActiveKey: [],\n              FocusKey: [],\n              OpenNodes: [],\n              Test: [],\n              SelectedTest: [],\n              selectedSpec: {},\n              Component: [],\n              selectComponent: {},\n              selectedComponent: {},\n              Specification: []\n            }\n          });\n        }\n      } else if (materialType) {\n        if (selectedRecord[inputParem.nameofdefaultcomp === \"Material Type\" ? inputParem.MaterialCategoryName : inputParem.label]) {\n          const productCategory = selectedRecord[inputParem.nameofdefaultcomp === \"Material Type\" ? inputParem.MaterialCategoryName : inputParem.label] ? selectedRecord[inputParem.nameofdefaultcomp === \"Material Type\" ? inputParem.MaterialCategoryName : inputParem.label] : undefined; //  mapOfRegFilterData[\"nproductcatcode\"]\n\n          if (productCategory !== undefined) {\n            if (productCategory.item.ncategorybasedflow === 3) {\n              mapOfRegFilterData[\"nproductcatcode\"] = productCategory.value;\n              mapOfRegFilterData[\"nproductcode\"] = -1;\n              dispatch(getTreeByProduct(mapOfRegFilterData, selectedRecord, { ...returnObj.comboData\n              }));\n            } else {\n              const product = selectedRecord[inputParem.nameofdefaultcomp === \"Material Type\" ? inputParem.MaterialName : inputParem.label] ? selectedRecord[inputParem.nameofdefaultcomp === \"Material Type\" ? inputParem.MaterialName : inputParem.label] : undefined;\n\n              if (product !== undefined) {\n                mapOfRegFilterData[\"nproductcatcode\"] = productCategory.value;\n                mapOfRegFilterData[\"nproductcode\"] = product.value;\n                dispatch(getTreeByProduct(mapOfRegFilterData, selectedRecord, { ...returnObj.comboData\n                }));\n              } else {\n                const product = selectedRecord[inputParem.nameofdefaultcomp === \"MaterialType\" ? inputParem.MaterialName : inputParem.label] ? selectedRecord[inputParem.nameofdefaultcomp === \"MaterialType\" ? inputParem.MaterialName : inputParem.label] : undefined;\n\n                if (product !== undefined) {\n                  mapOfRegFilterData[\"nproductcatcode\"] = productCategory.value;\n                  mapOfRegFilterData[\"nproductcode\"] = product.value;\n                  dispatch(getTreeByProduct(mapOfRegFilterData, selectedRecord, { ...returnObj.comboData\n                  }));\n                } else {\n                  selectedRecord[\"nallottedspeccode\"] = \"\";\n                  selectedRecord[\"sversion\"] = \"\";\n                  dispatch({\n                    type: DEFAULT_RETURN,\n                    payload: {\n                      loading: false,\n                      comboData: { ...returnObj.comboData\n                      },\n                      selectedRecord,\n                      AgaramTree: [],\n                      ActiveKey: [],\n                      FocusKey: [],\n                      OpenNodes: [],\n                      Test: [],\n                      SelectedTest: [],\n                      selectedSpec: {},\n                      Component: [],\n                      selectComponent: {},\n                      selectedComponent: {},\n                      Specification: []\n                    }\n                  });\n                }\n              }\n            }\n          } else {\n            selectedRecord[\"nallottedspeccode\"] = \"\";\n            selectedRecord[\"sversion\"] = \"\";\n            dispatch({\n              type: DEFAULT_RETURN,\n              payload: {\n                loading: false,\n                comboData: { ...returnObj.comboData\n                },\n                selectedRecord,\n                AgaramTree: [],\n                ActiveKey: [],\n                FocusKey: [],\n                OpenNodes: [],\n                Test: [],\n                SelectedTest: [],\n                selectedSpec: {},\n                Component: [],\n                selectComponent: {},\n                selectedComponent: {},\n                Specification: []\n              }\n            });\n          }\n        } else {\n          selectedRecord[\"nallottedspeccode\"] = \"\";\n          selectedRecord[\"sversion\"] = \"\";\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              loading: false,\n              comboData: { ...returnObj.comboData\n              },\n              selectedRecord,\n              AgaramTree: [],\n              ActiveKey: [],\n              FocusKey: [],\n              OpenNodes: [],\n              Test: [],\n              SelectedTest: [],\n              selectedSpec: {},\n              Component: [],\n              selectComponent: {},\n              selectedComponent: {},\n              Specification: []\n            }\n          });\n        }\n      } else {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false,\n            comboData: { ...returnObj.comboData\n            },\n            selectedRecord\n          }\n        });\n      }\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/actions/DynamicPreRegDesignAction.js"],"names":["rsapi","DEFAULT_RETURN","toast","initRequest","sortData","constructOptionList","parentChildComboLoad","getcomponentdata","getValidComponent","replaceChildFromChildren","ReactComponents","transactionStatus","Axios","getTreeByProduct","getReactInputFields","userinfo","operation","respObj","dispatch","listURL","post","all","then","response","type","payload","ReactInputFields","data","components","ReactTables","tables","get","selectedFieldRecord","openModal","loading","openPortal","catch","error","status","message","warn","selectRegistrationTemplate","template","masterData","nreactregtemplatecode","selectedTemplate","getRegistrationTemplate","selectedSampleType","nsampletypecode","value","searchedData","undefined","realSampleType","label","getEditRegTemplate","editId","ntransactionstatus","DRAFT","jsonData","jsondata","ncontrolcode","design","selectedRecord","templateName","sregtemplatename","masterStatus","getJsonValue","PGjsonData","Array","isArray","JSONData","map","push","JSON","parse","getTableColumns","stablename","path","columnInfo","componentData","updateComponents","showFilter","staicColumns","jstaticcolumns","dynamicColumns","jdynamiccolumns","multilingualColumns","jmultilingualcolumn","numericColumns","jnumericcolumns","primaryKeyName","sprimarykeyname","defaultColumn","comboData","filterColumns","item","displayname","slanguagetypecode","columnname","default","ismultilingual","column","displaymember","valuemember","componentcode","COMBO","FRONTENDSEARCHFILTER","BACKENDSEARCHFILTER","validComponents","filterfields","customsearchfilter","parentRadioValue","parentPath","oldParentData","split","hasOwnProperty","child","radioOptions","tags","id","text","tableColumn","optionalPayload","selectedComponentpath","join","getForeignTableData","parentcolumnlist","source","filtercolumn","foriegntablename","tablecolumnname","conditionstring","inputtype","isMultiLingual","newcomboData","comboData1","selectedRecord1","masterDataValue","getPreviewTemplate","columnList","childColumnList","comboComponents","withoutCombocomponent","mapOfFilterRegData","preview","screenName","timeZoneService","actualService","childcolumnlist","timeZoneMap","timeZoneList","defaultTimeZone","stimezoneid","ntimezonecode","componentrow","loadcurrentdate","Date","ProductCategory","filter","x","name","length","nproductcatcode","ncategorybasedFlow","inputParam","Product","nproductcode","InstrumentCategory","ninstrumentcatcode","Instrument","ninstrumentcode","MaterialType","nmaterialtypecode","MaterialCategory","nmaterialcatcode","Material","nmaterialcode","console","log","getChildValues","inputParem","parentListWithReadonly","productCategory","product","mapOfRegFilterData","instrumentCategory","instrument","materialCategory","material","materialType","parentdata","parentsource","primarykeyField","returnObj","nameofdefaultcomp","ProductName","AgaramTree","ActiveKey","FocusKey","OpenNodes","Test","SelectedTest","selectedSpec","Component","selectComponent","selectedComponent","Specification","InstrumentName","MaterialName","MaterialCategoryName","ncategorybasedflow"],"mappings":"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","sourcesContent":["import rsapi from '../rsapi';\r\nimport { DEFAULT_RETURN } from './LoginTypes';\r\nimport { toast } from 'react-toastify';\r\nimport { initRequest } from './LoginAction';\r\nimport { sortData, constructOptionList, parentChildComboLoad } from '../components/CommonScript';\r\nimport { getcomponentdata, getValidComponent, replaceChildFromChildren } from '../components/droparea/helpers';\r\nimport { ReactComponents, transactionStatus } from '../components/Enumeration';\r\nimport Axios from 'axios';\r\nimport { getTreeByProduct } from './RegistrationAction';\r\n\r\nexport function getReactInputFields(userinfo, operation, respObj) {\r\n\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        const listURL = [];\r\n        listURL[0] = rsapi.post(\"dynamicpreregdesign/getReactComponents\", { userinfo })\r\n        listURL[1] = rsapi.post(\"dynamicpreregdesign/getReactInputFields\", { userinfo })\r\n        Axios.all(listURL)\r\n            .then(response => {\r\n                respObj = respObj ? { ...respObj } : {}\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        ReactInputFields: response[1].data,\r\n                        ReactComponents: response[0].data.components,\r\n                        ReactTables: constructOptionList(response[0].data.tables, 'nquerybuildertablecode', 'displayname').get(\"OptionList\"),\r\n                        selectedFieldRecord: {},\r\n                        openModal: false,\r\n                        loading: false,\r\n                        openPortal: true,\r\n                        operation,\r\n                        ...respObj\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function selectRegistrationTemplate(template, masterData, userinfo) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"dynamicpreregdesign/getRegistrationTemplateById\", {\r\n            nreactregtemplatecode: template.nreactregtemplatecode,\r\n            userinfo\r\n        })\r\n            .then(response => {\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: { masterData: { ...masterData, selectedTemplate: response.data }, loading: false }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function getRegistrationTemplate(selectedSampleType, masterData, userinfo) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"dynamicpreregdesign/getDynamicPreRegDesign\", {\r\n            nsampletypecode: selectedSampleType.value,\r\n            userinfo\r\n        })\r\n            .then(response => {\r\n                masterData = { ...masterData, ...response.data, searchedData: undefined }\r\n                sortData(masterData)\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData,\r\n                        realSampleType: [{\r\n                            \"label\": \"IDS_SAMPLETYPE\",\r\n                            \"value\": selectedSampleType.label,\r\n                            \"item\": selectedSampleType\r\n                        }],\r\n                        loading: false,\r\n\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function getEditRegTemplate(masterData, userinfo, editId) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"dynamicpreregdesign/getRegistrationTemplateById\", {\r\n            nreactregtemplatecode: masterData.selectedTemplate.nreactregtemplatecode,\r\n            userinfo\r\n        })\r\n            .then(response => {\r\n                if (response.data.ntransactionstatus === transactionStatus.DRAFT) {\r\n                    let jsonData = response.data.jsondata;\r\n                    sortData(masterData)\r\n\r\n                    const respObj = {\r\n                        masterData,\r\n                        ncontrolcode: editId,\r\n                        openPortal: true,\r\n                        loading: false,\r\n                        openModal: false,\r\n                        design: jsonData,\r\n                        selectedRecord: { templateName: response.data.sregtemplatename }\r\n                    }\r\n                    // dispatch({\r\n                    //     type: DEFAULT_RETURN,\r\n                    //     payload: {\r\n                    //         masterData,\r\n                    //         ncontrolcode: editId,\r\n                    //         // openPortal: true,\r\n                    //         // loading: false,\r\n                    //         design: jsonData,\r\n                    //         selectedRecord: { templateName: response.data.sregtemplatename }\r\n                    //     }\r\n                    // })\r\n                    dispatch(getReactInputFields(userinfo, \"update\", respObj))\r\n                } else {\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false, masterStatus: \"IDS_SELECTDRAFTRECORD\" } })\r\n                }\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getJsonValue(PGjsonData) {\r\n\r\n    if (Array.isArray(PGjsonData)) {\r\n        let JSONData = [];\r\n        PGjsonData.map(data => {\r\n            return JSONData.push(JSON.parse(data.jsondata))\r\n        })\r\n        return JSONData;\r\n    } else {\r\n        return JSON.parse(PGjsonData);\r\n    }\r\n\r\n}\r\nexport function getTableColumns(design, selectedFieldRecord, stablename,\r\n     userinfo, path, columnInfo, componentData, updateComponents,showFilter) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"dynamicpreregdesign/getTableColumns\", { \"nquerybuildertablecode\":stablename, userinfo })\r\n            .then(response => {\r\n                columnInfo = columnInfo || {}\r\n                const staicColumns = response.data.jstaticcolumns || []\r\n                const dynamicColumns = response.data.jdynamiccolumns || []\r\n                const multilingualColumns = response.data.jmultilingualcolumn || []\r\n                const numericColumns = response.data.jnumericcolumns || []\r\n                const primaryKeyName = response.data.sprimarykeyname\r\n                columnInfo = {\r\n                    ...columnInfo,\r\n                    [stablename]: {\r\n                        staicColumns,\r\n                        dynamicColumns,\r\n                        multilingualColumns,\r\n                        numericColumns,\r\n                        primaryKeyName\r\n                    }\r\n                }\r\n                let defaultColumn = {};\r\n                let comboData = []\r\n                let filterColumns = [];\r\n                staicColumns.map(item => {\r\n                    comboData.push({\r\n                        label: item.displayname[userinfo.slanguagetypecode] || item.displayname['en-US'],\r\n                        value: item.columnname,\r\n                        type: \"static\",\r\n                        item\r\n                    })\r\n                    if (item.default) {\r\n                        defaultColumn = {\r\n                            label: item.displayname[userinfo.slanguagetypecode] || item.displayname['en-US'],\r\n                            value: item.columnname,\r\n                            type: \"static\",\r\n                            item\r\n                        }\r\n                    }\r\n                })\r\n                dynamicColumns.map(item => {\r\n                    comboData.push({\r\n                        label: item.displayname[userinfo.slanguagetypecode] || item.displayname['en-US'],\r\n                        value: item.columnname,\r\n                        type: \"dynamic\",\r\n                        item\r\n                    })\r\n                    if (item.default) {\r\n                        defaultColumn = {\r\n                            label: item.displayname[userinfo.slanguagetypecode] || item.displayname['en-US'],\r\n                            value: item.columnname,\r\n                            type: \"dynamic\",\r\n                            item\r\n                        }\r\n                    }\r\n                })\r\n                multilingualColumns.map(item => {\r\n                    comboData.push({\r\n                        label: item.displayname[userinfo.slanguagetypecode] || item.displayname['en-US'],\r\n                        value: item.columnname,\r\n                        type: \"static\",\r\n                        item\r\n                    })\r\n                    if (item.default) {\r\n                        defaultColumn = {\r\n                            label: item.displayname[userinfo.slanguagetypecode] || item.displayname['en-US'],\r\n                            value: item.columnname,\r\n                            type: \"static\",\r\n                            item\r\n                        }\r\n                    }\r\n                })\r\n                filterColumns = [...comboData];\r\n                numericColumns.map(item => {\r\n                    filterColumns.push({\r\n                        label: item.displayname[userinfo.slanguagetypecode] || item.displayname['en-US'],\r\n                        value: item.columnname,\r\n                        type: \"numeric\",\r\n                        item\r\n                    })\r\n                })\r\n                if (defaultColumn.item && defaultColumn.item.ismultilingual) {\r\n                    selectedFieldRecord['isMultiLingual'] = true;\r\n                }\r\n                if (updateComponents) {\r\n                    componentData = componentData || {}\r\n                    selectedFieldRecord = { ...selectedFieldRecord, column: defaultColumn, displaymember: defaultColumn.value, valuemember: primaryKeyName };\r\n                    design = replaceChildFromChildren(design, path, selectedFieldRecord)\r\n                    if (selectedFieldRecord.componentcode !== ReactComponents.COMBO\r\n                        &&selectedFieldRecord.componentcode !== ReactComponents.FRONTENDSEARCHFILTER \r\n                         &&selectedFieldRecord.componentcode !== ReactComponents.BACKENDSEARCHFILTER) {\r\n                        let validComponents = getValidComponent(selectedFieldRecord, componentData.components, columnInfo);\r\n                        componentData = { ...componentData, validComponents }\r\n                    }\r\n                } else if (componentData===undefined||componentData.components === undefined) {\r\n                    componentData = componentData || {}\r\n                    if(selectedFieldRecord.componentcode === ReactComponents.FRONTENDSEARCHFILTER||selectedFieldRecord.componentcode === ReactComponents.BACKENDSEARCHFILTER){\r\n                        selectedFieldRecord = { ...selectedFieldRecord,filterfields:[defaultColumn.item], customsearchfilter: [defaultColumn], displaymember: defaultColumn.value, valuemember: primaryKeyName };\r\n                    }else{\r\n                        selectedFieldRecord = { ...selectedFieldRecord, column: defaultColumn, displaymember: defaultColumn.value, valuemember: primaryKeyName };\r\n                    }\r\n                   \r\n                    design = replaceChildFromChildren(design, path, selectedFieldRecord)\r\n\r\n                    if (selectedFieldRecord.componentcode !== ReactComponents.COMBO\r\n                        &&selectedFieldRecord.componentcode !== ReactComponents.FRONTENDSEARCHFILTER\r\n                        &&selectedFieldRecord.componentcode !== ReactComponents.BACKENDSEARCHFILTER) {\r\n                        let validComponents = getValidComponent(selectedFieldRecord, componentData.components, columnInfo);\r\n                        componentData = { ...componentData, validComponents }\r\n                    }\r\n                } else {\r\n                    let validComponents = getValidComponent(selectedFieldRecord, componentData.components, columnInfo);\r\n                    let parentRadioValue=[]\r\n                    if(selectedFieldRecord.componentcode === ReactComponents.FRONTENDSEARCHFILTER||selectedFieldRecord.componentcode === ReactComponents.BACKENDSEARCHFILTER){\r\n                        if(selectedFieldRecord.parentPath){\r\n                        let oldParentData = getcomponentdata(design, selectedFieldRecord.parentPath.split(\"-\"))\r\n                        if(oldParentData.hasOwnProperty('child')){\r\n                            oldParentData.child.map(item=>{\r\n                                if(item.label===selectedFieldRecord.label){\r\n                                    parentRadioValue = oldParentData.radioOptions.tags.map(item => {\r\n                                        return { value: item.id, label: item.text, item }\r\n                                    })\r\n                                }\r\n                            })\r\n                        }\r\n                    }\r\n                    }\r\n                    componentData = { ...componentData, validComponents,parentRadioValue }\r\n                }\r\n                \r\n                columnInfo = {\r\n                    ...columnInfo,\r\n                    [stablename]: { ...columnInfo[stablename], tableColumn: comboData, filterColumns }\r\n                }\r\n                let optionalPayload = {\r\n                    selectedComponentpath: Array.isArray(path) ? path.join(\"-\") : undefined,\r\n                }\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false,\r\n                        design,\r\n                        selectedFieldRecord,\r\n                        ...optionalPayload,\r\n                        tableColumn: comboData,\r\n                        filterColumns,\r\n                        columnInfo,\r\n                        primaryKeyName,\r\n                        ...componentData,\r\n                        showFilter:showFilter\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function getForeignTableData(design, selectedFieldRecord, stablename, userinfo, path, columnInfo, componentData, updateComponents) {\r\n    return function (dispatch) {\r\n        let parentcolumnlist = [{\r\n            source: selectedFieldRecord.filtercolumn.item.foriegntablename,\r\n            valuemember: selectedFieldRecord.filtercolumn.item.tablecolumnname,\r\n            displaymember: selectedFieldRecord.filtercolumn.item.columnname,\r\n            conditionstring: selectedFieldRecord.filtercolumn.item.conditionstring,\r\n            label: \"filterData\",\r\n            inputtype: \"combo\",\r\n            isMultiLingual: selectedFieldRecord.filtercolumn.item.ismultilingual\r\n        }]\r\n        rsapi.post(\"dynamicpreregdesign/getComboValues\", { parentcolumnlist, userinfo })\r\n            .then(response => {\r\n                let comboData = [];\r\n                let selectedRecord = {};\r\n                const newcomboData = parentChildComboLoad(parentcolumnlist, response.data, selectedRecord, [], [], undefined, userinfo.slanguagetypecode)\r\n                // sortData(masterData)\r\n\r\n                const comboData1 = newcomboData.comboData\r\n                const selectedRecord1 = newcomboData.selectedRecord\r\n                if (updateComponents) {\r\n                    componentData = componentData || {}\r\n                    // selectedFieldRecord = { ...selectedFieldRecord };\r\n                    design = replaceChildFromChildren(design, path, selectedFieldRecord)\r\n                    if (selectedFieldRecord.componentcode !== ReactComponents.COMBO) {\r\n                        let validComponents = getValidComponent(selectedFieldRecord, componentData.components, columnInfo);\r\n                        componentData = { ...componentData, validComponents }\r\n                    }\r\n                }\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false,\r\n                        design,\r\n                        selectedFieldRecord,\r\n                        masterDataValue: comboData,\r\n                        columnInfo,\r\n                        ...componentData,\r\n                        ...comboData1\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function getPreviewTemplate(masterData, userinfo,\r\n    editId, columnList, selectedRecord, childColumnList, comboComponents,\r\n    withoutCombocomponent, openPortal, openModal, mapOfFilterRegData, preview, operation, screenName) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        const timeZoneService = rsapi.post(\"timezone/getTimeZone\");\r\n        const actualService = rsapi.post(\"dynamicpreregdesign/getComboValues\", {\r\n            parentcolumnlist: columnList,\r\n            childcolumnlist: childColumnList,\r\n            userinfo\r\n        })\r\n        Axios.all([timeZoneService, actualService])\r\n            .then(response => {\r\n                const timeZoneMap = constructOptionList(response[0].data || [], \"ntimezonecode\", \"stimezoneid\", undefined, undefined, true);\r\n                const timeZoneList = timeZoneMap.get(\"OptionList\");\r\n                const defaultTimeZone = { label: userinfo.stimezoneid, value: userinfo.ntimezonecode }\r\n                const newcomboData = parentChildComboLoad(columnList, response[1].data, selectedRecord, childColumnList, withoutCombocomponent, undefined, userinfo.slanguagetypecode)\r\n                // sortData(masterData)\r\n\r\n                const comboData1 = newcomboData.comboData\r\n                const selectedRecord1 = newcomboData.selectedRecord\r\n                withoutCombocomponent.map(componentrow => {\r\n                    if (componentrow.inputtype === \"date\") {\r\n                      //  if (componentrow.mandatory) {\r\n                            selectedRecord1[componentrow.label] = componentrow.loadcurrentdate ? new Date() : \"\";\r\n                        // }else{\r\n                        //     selectedRecord1[componentrow.label] = componentrow.loadcurrentdate ? new Date() : \"\";\r\n                        // }\r\n                        // if (componentrow.timezone) {\r\n                        //     sampleRegistration[\"jsondata\"][`tz${componentrow.label}`] = selectedRecord[`tz${componentrow.label}`] ?\r\n                        //         { value: selectedRecord[`tz${componentrow.label}`].value, label: selectedRecord[`tz${componentrow.label}`].label } :\r\n                        //         defaulttimezone ? defaulttimezone : -1\r\n                        // }\r\n                    }\r\n                    else if (componentrow.inputtype === \"radio\") {\r\n                        selectedRecord1[componentrow.label] = componentrow.radioOptions ?\r\n                            componentrow.radioOptions.tags[0].text : \"\";\r\n                    }\r\n\r\n                })\r\n\r\n                if (preview) {\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            timeZoneList,\r\n                            defaultTimeZone,\r\n                            masterData,\r\n                            ncontrolcode: editId,\r\n                            openModal,\r\n                            loading: false,\r\n                            comboData: comboData1,\r\n                            selectedRecord: selectedRecord1,\r\n                            comboComponents,\r\n                            withoutCombocomponent,\r\n                            openPortal,\r\n                            columnList,\r\n                            childColumnList,\r\n                            screenName\r\n                            // childOperation:true\r\n                        }\r\n                    })\r\n                }\r\n                else {\r\n                    if (mapOfFilterRegData.nsampletypecode === 1) {\r\n                        const ProductCategory = comboComponents.filter(x => x.name === 'Product Category');\r\n                        if (ProductCategory.length > 0) {\r\n                            const nproductcatcode = selectedRecord1[ProductCategory[0].label] &&\r\n                                selectedRecord1[ProductCategory[0].label].value\r\n                            const ncategorybasedFlow = selectedRecord1[ProductCategory[0].label]\r\n                                && selectedRecord1[ProductCategory[0].label]['item']['jsondata']['ncategorybasedflow'];\r\n                            if (ncategorybasedFlow !== undefined) {\r\n                                if (ncategorybasedFlow === 3) {\r\n                                    mapOfFilterRegData['nproductcode'] = -1;\r\n                                    mapOfFilterRegData['nproductcatcode'] = nproductcatcode\r\n                                    const inputParam = {\r\n                                        timeZoneList,\r\n                                        defaultTimeZone,\r\n                                        masterData,\r\n                                        ncontrolcode: editId,\r\n                                        openModal,\r\n                                        comboComponents,\r\n                                        withoutCombocomponent,\r\n                                        openPortal,\r\n                                        columnList,\r\n                                        childColumnList,\r\n                                        operation,\r\n                                        screenName\r\n                                    }\r\n                                    dispatch(getTreeByProduct(mapOfFilterRegData,\r\n                                        selectedRecord1,\r\n                                        newcomboData.comboData, inputParam))\r\n                                }\r\n                                else {\r\n                                    const Product = comboComponents.filter(x => x.name === 'Product');\r\n                                    if (Product.length > 0) {\r\n                                        const nproductcode = selectedRecord1[Product[0].label]\r\n                                            && selectedRecord1[Product[0].label].value;\r\n\r\n                                        mapOfFilterRegData['nproductcode'] = nproductcode !== undefined ? nproductcode : -1;\r\n                                        mapOfFilterRegData['nproductcatcode'] = nproductcatcode\r\n\r\n                                        const inputParam = {\r\n                                            timeZoneList,\r\n                                            defaultTimeZone,\r\n                                            masterData,\r\n                                            ncontrolcode: editId,\r\n                                            openModal,\r\n                                            comboComponents,\r\n                                            withoutCombocomponent,\r\n                                            openPortal,\r\n                                            columnList,\r\n                                            childColumnList,\r\n                                            operation,\r\n                                            screenName\r\n                                        }\r\n                                        dispatch(getTreeByProduct(mapOfFilterRegData,\r\n                                            selectedRecord1,\r\n                                            newcomboData.comboData, inputParam))\r\n                                    } else {\r\n                                        dispatch({\r\n                                            type: DEFAULT_RETURN,\r\n                                            payload: {\r\n                                                timeZoneList,\r\n                                                defaultTimeZone,\r\n                                                masterData,\r\n                                                ncontrolcode: editId,\r\n                                                openModal,\r\n                                                loading: false,\r\n                                                comboData: newcomboData.comboData,\r\n                                                selectedRecord: selectedRecord1,\r\n                                                comboComponents,\r\n                                                withoutCombocomponent,\r\n                                                openPortal,\r\n                                                columnList,\r\n                                                childColumnList,\r\n                                                operation,\r\n                                                screenName\r\n                                            }\r\n                                        })\r\n                                    }\r\n                                }\r\n\r\n                            } else {\r\n                                dispatch({\r\n                                    type: DEFAULT_RETURN,\r\n                                    payload: {\r\n                                        timeZoneList,\r\n                                        defaultTimeZone,\r\n                                        masterData,\r\n                                        ncontrolcode: editId,\r\n                                        openModal,\r\n                                        loading: false,\r\n                                        comboData: newcomboData.comboData,\r\n                                        selectedRecord: selectedRecord1,\r\n                                        comboComponents,\r\n                                        withoutCombocomponent,\r\n                                        openPortal,\r\n                                        columnList,\r\n                                        childColumnList,\r\n                                        operation,\r\n                                        screenName\r\n                                    }\r\n                                })\r\n                            }\r\n                        } else {\r\n                            dispatch({\r\n                                type: DEFAULT_RETURN,\r\n                                payload: {\r\n                                    timeZoneList,\r\n                                    defaultTimeZone,\r\n                                    masterData,\r\n                                    ncontrolcode: editId,\r\n                                    openModal,\r\n                                    loading: false,\r\n                                    comboData: newcomboData.comboData,\r\n                                    selectedRecord: selectedRecord1,\r\n                                    comboComponents,\r\n                                    withoutCombocomponent,\r\n                                    openPortal,\r\n                                    operation,\r\n                                    screenName\r\n                                }\r\n                            })\r\n                        }\r\n                    } else if (mapOfFilterRegData.nsampletypecode === 2) {\r\n                        const InstrumentCategory = comboComponents.filter(x => x.name === 'Instrument Category');\r\n                        if (InstrumentCategory.length > 0) {\r\n                            const ninstrumentcatcode = selectedRecord1[InstrumentCategory[0].label] &&\r\n                                selectedRecord1[InstrumentCategory[0].label].value\r\n                            const ncategorybasedFlow = selectedRecord1[InstrumentCategory[0].label]\r\n                                && selectedRecord1[InstrumentCategory[0].label]['item']['jsondata']['ncategorybasedflow'];\r\n                            if (ncategorybasedFlow !== undefined) {\r\n                                if (ncategorybasedFlow === 3) {\r\n                                    mapOfFilterRegData['nproductcode'] = -1;\r\n                                    mapOfFilterRegData['nproductcatcode'] = ninstrumentcatcode\r\n                                    const inputParam = {\r\n                                        timeZoneList,\r\n                                        defaultTimeZone,\r\n                                        masterData,\r\n                                        ncontrolcode: editId,\r\n                                        openModal,\r\n                                        comboComponents,\r\n                                        withoutCombocomponent,\r\n                                        openPortal,\r\n                                        columnList,\r\n                                        childColumnList,\r\n                                        operation,\r\n                                        screenName\r\n                                    }\r\n                                    dispatch(getTreeByProduct(mapOfFilterRegData,\r\n                                        selectedRecord1,\r\n                                        newcomboData.comboData, inputParam))\r\n                                }\r\n                                else {\r\n                                    const Instrument = comboComponents.filter(x => x.name === 'Instrument');\r\n                                    if (Instrument.length > 0) {\r\n                                        const ninstrumentcode = selectedRecord1[Instrument[0].label]\r\n                                            && selectedRecord1[Instrument[0].label].value;\r\n\r\n                                        mapOfFilterRegData['nproductcode'] = ninstrumentcode !== undefined ? ninstrumentcode : -1;\r\n                                        mapOfFilterRegData['nproductcatcode'] = ninstrumentcatcode\r\n\r\n                                        const inputParam = {\r\n                                            timeZoneList,\r\n                                            defaultTimeZone,\r\n                                            masterData,\r\n                                            ncontrolcode: editId,\r\n                                            openModal,\r\n                                            comboComponents,\r\n                                            withoutCombocomponent,\r\n                                            openPortal,\r\n                                            columnList,\r\n                                            childColumnList,\r\n                                            operation,\r\n                                            screenName\r\n                                        }\r\n                                        dispatch(getTreeByProduct(mapOfFilterRegData,\r\n                                            selectedRecord1,\r\n                                            newcomboData.comboData, inputParam))\r\n                                    } else {\r\n                                        dispatch({\r\n                                            type: DEFAULT_RETURN,\r\n                                            payload: {\r\n                                                timeZoneList,\r\n                                                defaultTimeZone,\r\n                                                masterData,\r\n                                                ncontrolcode: editId,\r\n                                                openModal,\r\n                                                loading: false,\r\n                                                comboData: newcomboData.comboData,\r\n                                                selectedRecord: selectedRecord1,\r\n                                                comboComponents,\r\n                                                withoutCombocomponent,\r\n                                                openPortal,\r\n                                                columnList,\r\n                                                childColumnList,\r\n                                                operation,\r\n                                                screenName\r\n                                            }\r\n                                        })\r\n                                    }\r\n                                }\r\n\r\n                            } else {\r\n                                dispatch({\r\n                                    type: DEFAULT_RETURN,\r\n                                    payload: {\r\n                                        timeZoneList,\r\n                                        defaultTimeZone,\r\n                                        masterData,\r\n                                        ncontrolcode: editId,\r\n                                        openModal,\r\n                                        loading: false,\r\n                                        comboData: newcomboData.comboData,\r\n                                        selectedRecord: selectedRecord1,\r\n                                        comboComponents,\r\n                                        withoutCombocomponent,\r\n                                        openPortal,\r\n                                        columnList,\r\n                                        childColumnList,\r\n                                        operation,\r\n                                        screenName\r\n                                    }\r\n                                })\r\n                            }\r\n                        } else {\r\n                            dispatch({\r\n                                type: DEFAULT_RETURN,\r\n                                payload: {\r\n                                    timeZoneList,\r\n                                    defaultTimeZone,\r\n                                    masterData,\r\n                                    ncontrolcode: editId,\r\n                                    openModal,\r\n                                    loading: false,\r\n                                    comboData: newcomboData.comboData,\r\n                                    selectedRecord: selectedRecord1,\r\n                                    comboComponents,\r\n                                    withoutCombocomponent,\r\n                                    openPortal,\r\n                                    operation,\r\n                                    screenName\r\n                                }\r\n                            })\r\n                        }\r\n                    } else if (mapOfFilterRegData.nsampletypecode === 3) {\r\n                        const MaterialType = comboComponents.filter(x => x.name === 'Material Type');\r\n                        if (MaterialType.length > 0) {\r\n                            const nmaterialtypecode = selectedRecord1[MaterialType[0].label] &&\r\n                                selectedRecord1[MaterialType[0].label].value\r\n                            if (nmaterialtypecode !== undefined) {\r\n                                const MaterialCategory = comboComponents.filter(x => x.name === 'Material Category');\r\n                                if (MaterialCategory.length > 0) {\r\n                                    const nmaterialcatcode = selectedRecord1[MaterialCategory[0].label] &&\r\n                                        selectedRecord1[MaterialCategory[0].label].value\r\n                                    const ncategorybasedFlow = selectedRecord1[MaterialCategory[0].label]\r\n                                        && selectedRecord1[MaterialCategory[0].label]['item']['jsondata']['ncategorybasedflow'];\r\n                                    if (ncategorybasedFlow !== undefined) {\r\n                                        if (ncategorybasedFlow === 3) {\r\n                                            mapOfFilterRegData['nproductcode'] = -1;\r\n                                            mapOfFilterRegData['nproductcatcode'] = nmaterialcatcode\r\n                                            const inputParam = {\r\n                                                timeZoneList,\r\n                                                defaultTimeZone,\r\n                                                masterData,\r\n                                                ncontrolcode: editId,\r\n                                                openModal,\r\n                                                comboComponents,\r\n                                                withoutCombocomponent,\r\n                                                openPortal,\r\n                                                columnList,\r\n                                                childColumnList,\r\n                                                operation,\r\n                                                screenName\r\n                                            }\r\n                                            dispatch(getTreeByProduct(mapOfFilterRegData,\r\n                                                selectedRecord1,\r\n                                                newcomboData.comboData, inputParam))\r\n                                        }\r\n                                        else {\r\n                                            const Material = comboComponents.filter(x => x.name === 'Material');\r\n                                            if (Material.length > 0) {\r\n                                                const nmaterialcode = selectedRecord1[Material[0].label]\r\n                                                    && selectedRecord1[Material[0].label].value;\r\n\r\n                                                mapOfFilterRegData['nproductcode'] = nmaterialcode !== undefined ? nmaterialcode : -1;\r\n                                                mapOfFilterRegData['nproductcatcode'] = nmaterialcatcode\r\n\r\n                                                const inputParam = {\r\n                                                    timeZoneList,\r\n                                                    defaultTimeZone,\r\n                                                    masterData,\r\n                                                    ncontrolcode: editId,\r\n                                                    openModal,\r\n                                                    comboComponents,\r\n                                                    withoutCombocomponent,\r\n                                                    openPortal,\r\n                                                    columnList,\r\n                                                    childColumnList,\r\n                                                    operation,\r\n                                                    screenName\r\n                                                }\r\n                                                dispatch(getTreeByProduct(mapOfFilterRegData,\r\n                                                    selectedRecord1,\r\n                                                    newcomboData.comboData, inputParam))\r\n                                            } else {\r\n                                                dispatch({\r\n                                                    type: DEFAULT_RETURN,\r\n                                                    payload: {\r\n                                                        timeZoneList,\r\n                                                        defaultTimeZone,\r\n                                                        masterData,\r\n                                                        ncontrolcode: editId,\r\n                                                        openModal,\r\n                                                        loading: false,\r\n                                                        comboData: newcomboData.comboData,\r\n                                                        selectedRecord: selectedRecord1,\r\n                                                        comboComponents,\r\n                                                        withoutCombocomponent,\r\n                                                        openPortal,\r\n                                                        columnList,\r\n                                                        childColumnList,\r\n                                                        operation,\r\n                                                        screenName\r\n                                                    }\r\n                                                })\r\n                                            }\r\n                                        }\r\n\r\n                                    } else {\r\n                                        dispatch({\r\n                                            type: DEFAULT_RETURN,\r\n                                            payload: {\r\n                                                timeZoneList,\r\n                                                defaultTimeZone,\r\n                                                masterData,\r\n                                                ncontrolcode: editId,\r\n                                                openModal,\r\n                                                loading: false,\r\n                                                comboData: newcomboData.comboData,\r\n                                                selectedRecord: selectedRecord1,\r\n                                                comboComponents,\r\n                                                withoutCombocomponent,\r\n                                                openPortal,\r\n                                                columnList,\r\n                                                childColumnList,\r\n                                                operation,\r\n                                                screenName\r\n                                            }\r\n                                        })\r\n                                    }\r\n                                } else {\r\n                                    dispatch({\r\n                                        type: DEFAULT_RETURN,\r\n                                        payload: {\r\n                                            timeZoneList,\r\n                                            defaultTimeZone,\r\n                                            masterData,\r\n                                            ncontrolcode: editId,\r\n                                            openModal,\r\n                                            loading: false,\r\n                                            comboData: newcomboData.comboData,\r\n                                            selectedRecord: selectedRecord1,\r\n                                            comboComponents,\r\n                                            withoutCombocomponent,\r\n                                            openPortal,\r\n                                            operation,\r\n                                            screenName\r\n                                        }\r\n                                    })\r\n                                }\r\n\r\n                            }\r\n\r\n                        } else {\r\n                            dispatch({\r\n                                type: DEFAULT_RETURN,\r\n                                payload: {\r\n                                    timeZoneList,\r\n                                    defaultTimeZone,\r\n                                    masterData,\r\n                                    ncontrolcode: editId,\r\n                                    openModal,\r\n                                    loading: false,\r\n                                    comboData: newcomboData.comboData,\r\n                                    selectedRecord: selectedRecord1,\r\n                                    comboComponents,\r\n                                    withoutCombocomponent,\r\n                                    openPortal,\r\n                                    columnList,\r\n                                    childColumnList,\r\n                                    operation,\r\n                                    screenName\r\n                                }\r\n                            })\r\n                        }\r\n\r\n                    }\r\n                }\r\n            })\r\n            .catch(error => {\r\n                console.log(\"error:\", error);\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getChildValues(inputParem,\r\n    userinfo, selectedRecord, comboData, parentcolumnlist,\r\n    childcolumnlist, withoutCombocomponent, parentListWithReadonly,\r\n    productCategory, product, mapOfRegFilterData,\r\n    instrumentCategory, instrument, materialCategory, material, materialType) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post('dynamicpreregdesign/getChildValues', {\r\n            child: inputParem.child,\r\n            parentdata: inputParem.item.jsondata,\r\n            parentsource: inputParem.source,\r\n            [inputParem.primarykeyField]: inputParem.value,\r\n            valuemember: inputParem.primarykeyField,\r\n            childcolumnlist,\r\n            userinfo,\r\n            parentcolumnlist\r\n        })\r\n            .then(response => {\r\n                let returnObj = { ...comboData, ...response.data }\r\n                returnObj = parentChildComboLoad(parentListWithReadonly, returnObj, selectedRecord, childcolumnlist, withoutCombocomponent, inputParem, userinfo.slanguagetypecode)\r\n                selectedRecord = { ...selectedRecord, ...returnObj.selectedRecord }\r\n                if (productCategory) {\r\n                    dispatch(getTreeByProduct(mapOfRegFilterData, selectedRecord, { ...returnObj.comboData }))\r\n                } else if (product) {\r\n                    if (selectedRecord[inputParem.nameofdefaultcomp === \"Product\" ? inputParem.label : inputParem.ProductName]) {\r\n                        mapOfRegFilterData[\"nproductcode\"] = selectedRecord[inputParem.nameofdefaultcomp === \"Product\" ? inputParem.label : inputParem.ProductName] ? selectedRecord[inputParem.nameofdefaultcomp === \"Product\" ? inputParem.label : inputParem.ProductName].value : -1\r\n                        dispatch(getTreeByProduct(mapOfRegFilterData, selectedRecord, { ...returnObj.comboData }))\r\n                    } else {\r\n                        selectedRecord[\"nallottedspeccode\"] = \"\"\r\n                        selectedRecord[\"sversion\"] = \"\"\r\n                        dispatch({\r\n                            type: DEFAULT_RETURN,\r\n                            payload: {\r\n                                loading: false,\r\n                                comboData: { ...returnObj.comboData },\r\n                                selectedRecord,\r\n                                AgaramTree: [],\r\n                                ActiveKey: [],\r\n                                FocusKey: [],\r\n                                OpenNodes: [],\r\n                                Test: [],\r\n                                SelectedTest: [],\r\n                                selectedSpec: {},\r\n                                Component: [],\r\n                                selectComponent: {},\r\n                                selectedComponent: {},\r\n                                Specification: []\r\n                            }\r\n                        })\r\n                    }\r\n                }\r\n                else if (instrumentCategory) {\r\n                    dispatch(getTreeByProduct(mapOfRegFilterData, selectedRecord, { ...returnObj.comboData }))\r\n                }\r\n                else if (materialCategory) {\r\n                    dispatch(getTreeByProduct(mapOfRegFilterData, selectedRecord, { ...returnObj.comboData }))\r\n                }\r\n                else if (instrument) {\r\n                    if (selectedRecord[inputParem.nameofdefaultcomp === \"Instrument\" ? inputParem.label : inputParem.InstrumentName]) {\r\n                        mapOfRegFilterData[\"nproductcode\"] = selectedRecord[inputParem.nameofdefaultcomp === \"Instrument\" ?\r\n                            inputParem.label : inputParem.InstrumentName] ? selectedRecord[inputParem.nameofdefaultcomp === \"Instrument\" ? inputParem.label : inputParem.InstrumentName].value : -1\r\n                        dispatch(getTreeByProduct(mapOfRegFilterData, selectedRecord, { ...returnObj.comboData }))\r\n                    } else {\r\n                        selectedRecord[\"nallottedspeccode\"] = \"\"\r\n                        selectedRecord[\"sversion\"] = \"\"\r\n                        dispatch({\r\n                            type: DEFAULT_RETURN,\r\n                            payload: {\r\n                                loading: false,\r\n                                comboData: { ...returnObj.comboData },\r\n                                selectedRecord,\r\n                                AgaramTree: [],\r\n                                ActiveKey: [],\r\n                                FocusKey: [],\r\n                                OpenNodes: [],\r\n                                Test: [],\r\n                                SelectedTest: [],\r\n                                selectedSpec: {},\r\n                                Component: [],\r\n                                selectComponent: {},\r\n                                selectedComponent: {},\r\n                                Specification: []\r\n                            }\r\n                        })\r\n                    }\r\n                }\r\n                else if (material) {\r\n                    if (selectedRecord[inputParem.nameofdefaultcomp === \"Material\" ? inputParem.label : inputParem.MaterialName]) {\r\n                        mapOfRegFilterData[\"nproductcode\"] = selectedRecord[inputParem.nameofdefaultcomp === \"Material\" ?\r\n                            inputParem.label : inputParem.MaterialName] ? selectedRecord[inputParem.nameofdefaultcomp === \"Material\" ? inputParem.label : inputParem.MaterialName].value : -1\r\n                        dispatch(getTreeByProduct(mapOfRegFilterData, selectedRecord, { ...returnObj.comboData }))\r\n                    } else {\r\n                        selectedRecord[\"nallottedspeccode\"] = \"\"\r\n                        selectedRecord[\"sversion\"] = \"\"\r\n                        dispatch({\r\n                            type: DEFAULT_RETURN,\r\n                            payload: {\r\n                                loading: false,\r\n                                comboData: { ...returnObj.comboData },\r\n                                selectedRecord,\r\n                                AgaramTree: [],\r\n                                ActiveKey: [],\r\n                                FocusKey: [],\r\n                                OpenNodes: [],\r\n                                Test: [],\r\n                                SelectedTest: [],\r\n                                selectedSpec: {},\r\n                                Component: [],\r\n                                selectComponent: {},\r\n                                selectedComponent: {},\r\n                                Specification: []\r\n                            }\r\n                        })\r\n                    }\r\n                }\r\n                else if (materialType) {\r\n                    if (selectedRecord[inputParem.nameofdefaultcomp === \"Material Type\" ? inputParem.MaterialCategoryName : inputParem.label]) {\r\n                        const productCategory = selectedRecord[inputParem.nameofdefaultcomp === \"Material Type\" ?\r\n                            inputParem.MaterialCategoryName : inputParem.label] ? selectedRecord[inputParem.nameofdefaultcomp === \"Material Type\" ?\r\n                                inputParem.MaterialCategoryName : inputParem.label] : undefined\r\n\r\n                        //  mapOfRegFilterData[\"nproductcatcode\"]\r\n                        if (productCategory !== undefined) {\r\n                            if (productCategory.item.ncategorybasedflow === 3) {\r\n                                mapOfRegFilterData[\"nproductcatcode\"] = productCategory.value\r\n                                mapOfRegFilterData[\"nproductcode\"] = -1\r\n                                dispatch(getTreeByProduct(mapOfRegFilterData, selectedRecord, { ...returnObj.comboData }))\r\n                            } else {\r\n\r\n                                const product = selectedRecord[inputParem.nameofdefaultcomp === \"Material Type\" ?\r\n                                    inputParem.MaterialName : inputParem.label] ? selectedRecord[inputParem.nameofdefaultcomp === \"Material Type\" ?\r\n                                        inputParem.MaterialName : inputParem.label] : undefined\r\n                                if (product !== undefined) {\r\n                                    mapOfRegFilterData[\"nproductcatcode\"] = productCategory.value\r\n                                    mapOfRegFilterData[\"nproductcode\"] = product.value\r\n                                    dispatch(getTreeByProduct(mapOfRegFilterData, selectedRecord, { ...returnObj.comboData }))\r\n                                } else {\r\n\r\n                                    const product = selectedRecord[inputParem.nameofdefaultcomp === \"MaterialType\" ?\r\n                                        inputParem.MaterialName : inputParem.label] ? selectedRecord[inputParem.nameofdefaultcomp === \"MaterialType\" ?\r\n                                            inputParem.MaterialName : inputParem.label] : undefined\r\n                                    if (product !== undefined) {\r\n                                        mapOfRegFilterData[\"nproductcatcode\"] = productCategory.value\r\n                                        mapOfRegFilterData[\"nproductcode\"] = product.value\r\n                                        dispatch(getTreeByProduct(mapOfRegFilterData, selectedRecord, { ...returnObj.comboData }))\r\n                                    } else {\r\n                                        selectedRecord[\"nallottedspeccode\"] = \"\"\r\n                                        selectedRecord[\"sversion\"] = \"\"\r\n                                        dispatch({\r\n                                            type: DEFAULT_RETURN,\r\n                                            payload: {\r\n                                                loading: false,\r\n                                                comboData: { ...returnObj.comboData },\r\n                                                selectedRecord,\r\n                                                AgaramTree: [],\r\n                                                ActiveKey: [],\r\n                                                FocusKey: [],\r\n                                                OpenNodes: [],\r\n                                                Test: [],\r\n                                                SelectedTest: [],\r\n                                                selectedSpec: {},\r\n                                                Component: [],\r\n                                                selectComponent: {},\r\n                                                selectedComponent: {},\r\n                                                Specification: []\r\n                                            }\r\n                                        })\r\n                                    }\r\n                                }\r\n\r\n                            }\r\n                        } else {\r\n                            selectedRecord[\"nallottedspeccode\"] = \"\"\r\n                            selectedRecord[\"sversion\"] = \"\"\r\n                            dispatch({\r\n                                type: DEFAULT_RETURN,\r\n                                payload: {\r\n                                    loading: false,\r\n                                    comboData: { ...returnObj.comboData },\r\n                                    selectedRecord,\r\n                                    AgaramTree: [],\r\n                                    ActiveKey: [],\r\n                                    FocusKey: [],\r\n                                    OpenNodes: [],\r\n                                    Test: [],\r\n                                    SelectedTest: [],\r\n                                    selectedSpec: {},\r\n                                    Component: [],\r\n                                    selectComponent: {},\r\n                                    selectedComponent: {},\r\n                                    Specification: []\r\n                                }\r\n                            })\r\n                        }\r\n                    } else {\r\n                        selectedRecord[\"nallottedspeccode\"] = \"\"\r\n                        selectedRecord[\"sversion\"] = \"\"\r\n                        dispatch({\r\n                            type: DEFAULT_RETURN,\r\n                            payload: {\r\n                                loading: false,\r\n                                comboData: { ...returnObj.comboData },\r\n                                selectedRecord,\r\n                                AgaramTree: [],\r\n                                ActiveKey: [],\r\n                                FocusKey: [],\r\n                                OpenNodes: [],\r\n                                Test: [],\r\n                                SelectedTest: [],\r\n                                selectedSpec: {},\r\n                                Component: [],\r\n                                selectComponent: {},\r\n                                selectedComponent: {},\r\n                                Specification: []\r\n                            }\r\n                        })\r\n                    }\r\n                }\r\n                else {\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            loading: false,\r\n                            comboData: { ...returnObj.comboData },\r\n                            selectedRecord\r\n                        }\r\n                    })\r\n                }\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}