{"ast":null,"code":"var _jsxFileName = \"D:\\\\LIMSWFH\\\\LIMSPOSTGRESQL\\\\QuaLISWeb\\\\src\\\\pages\\\\dynamicmaster\\\\DynamicMaster.jsx\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { injectIntl } from 'react-intl';\nimport { Row, Col } from 'react-bootstrap';\nimport { toast } from 'react-toastify';\nimport { process } from '@progress/kendo-data-query';\nimport DynamicDataGrid from '../../components/data-grid/data-grid.component';\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\nimport Esign from '../../pages/audittrail/Esign';\nimport { callService, crudMaster, updateStore, validateEsignCredential, getEditDynamicMasterCombo, //fetchRecord,\ngetDynamicMasterCombo, getChildValues, addMasterRecord, getAddMasterCombo, getDynamicMasterTempalte, getChildComboMaster } from '../../actions';\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\nimport { showEsign, getControlMap, deleteAttachmentDropZone, getSameRecordFromTwoArrays, onDropAttachFileList, convertDateTimetoString, validateEmail, formatDate, sortData, ageCalculate, formatInputDate, extractFieldHeader, childComboClear } from '../../components/CommonScript';\nimport { ListWrapper } from '../../components/client-group.styles';\nimport DynamicSlideout from '../dynamicpreregdesign/DynamicSlideout.jsx';\nimport { designComponents, transactionStatus } from '../../components/Enumeration';\nimport { getFieldSpecification } from '../../components/type2component/Type2FieldSpecificationList';\nimport AddMasterRecords from '../dynamicpreregdesign/AddMasterRecords';\nimport { getFieldSpecification as getFieldSpecification1 } from '../../components/type1component/Type1FieldSpecificationList';\nimport { getFieldSpecification as getFieldSpecification3 } from '../../components/type3component/Type3FieldSpecificationList';\n\nconst mapStateToProps = state => {\n  return {\n    Login: state.Login\n  };\n};\n\nclass DynamicMaster extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.dataStateChange = event => {\n      this.setState({\n        dataResult: process(this.state.data || [], event.dataState),\n        dataState: event.dataState\n      });\n    };\n\n    this.closeModal = () => {\n      let loadEsign = this.props.Login.loadEsign;\n      let openModal = this.props.Login.openModal;\n      let selectedRecord = this.props.Login.selectedRecord;\n      let selectedMaster = this.props.Login.selectedMaster;\n      let selectedControl = this.props.Login.selectedControl;\n      let masterextractedColumnList = this.props.Login.masterextractedColumnList;\n      let masterfieldList = this.props.Login.masterfieldList;\n      let masterprimaryKeyField = this.props.Login.masterprimaryKeyField;\n      let addMaster = this.props.Login.addMaster;\n\n      if (this.props.Login.loadEsign) {\n        if (this.props.Login.operation === \"delete\") {\n          loadEsign = false;\n          openModal = false;\n          selectedRecord = {};\n        } else {\n          loadEsign = false;\n          selectedRecord['esignpassword'] = \"\";\n          selectedRecord['esigncomments'] = \"\";\n          selectedRecord['esignreason'] = \"\";\n        }\n      } else if (this.props.Login.addMaster) {\n        selectedMaster = {};\n        selectedControl = {};\n        masterextractedColumnList = [];\n        masterfieldList = {};\n        masterprimaryKeyField = \"\";\n        addMaster = false;\n      } else {\n        openModal = false;\n        selectedRecord = {};\n      }\n\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          openModal,\n          loadEsign,\n          selectedRecord,\n          selectedId: null,\n          selectedMaster,\n          selectedControl,\n          masterextractedColumnList,\n          masterfieldList,\n          masterprimaryKeyField,\n          addMaster\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onComboChangeMasterDyanmic = (comboData, control, customName) => {\n      let comboName = customName || control.label;\n      let selectedMaster = this.state.selectedMaster || {}; //if (comboData) {\n\n      comboData[\"item\"] = { ...comboData[\"item\"],\n        \"pkey\": control.valuemember,\n        \"nquerybuildertablecode\": control.nquerybuildertablecode,\n        \"source\": control.source\n      };\n      selectedMaster[comboName] = comboData; // console.log(\"selected:\", selectedMaster, comboData, control, customName);\n\n      if (control.child && control.child.length > 0) {\n        const childComboList = getSameRecordFromTwoArrays(this.props.Login.mastercomboComponents, control.child, \"label\");\n        let childColumnList = {};\n        childComboList.map(columnList => {\n          const val = this.comboChild(this.props.Login.mastercomboComponents, columnList, childColumnList, false);\n          childColumnList = val.childColumnList;\n        });\n        const parentList = getSameRecordFromTwoArrays(this.props.Login.masterwithoutCombocomponent, control.child, \"label\");\n\n        if (comboData) {\n          const inputParem = {\n            child: control.child,\n            source: control.source,\n            primarykeyField: control.valuemember,\n            value: comboData.value,\n            item: comboData.item\n          };\n          this.props.getChildValuesForAddMaster(inputParem, this.props.Login.userInfo, selectedMaster, this.props.Login.mastedataList, childComboList, childColumnList, this.props.Login.masterwithoutCombocomponent, [...childComboList, ...parentList]);\n        } else {\n          let comboData = this.props.Login.mastedataList;\n          const withoutCombocomponent = this.props.Login.masterwithoutCombocomponent || [];\n          const inputParam = {\n            control,\n            comboComponents: this.props.Login.mastercomboComponents,\n            withoutCombocomponent,\n            selectedMaster,\n            comboData\n          };\n          const childParam = childComboClear(inputParam);\n          selectedMaster = childParam.selectedRecord;\n          comboData = childParam.comboData;\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              selectedMaster,\n              mastedataList: comboData\n            }\n          };\n          this.props.updateStore(updateInfo);\n        }\n      } else {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            selectedMaster\n          }\n        };\n        this.props.updateStore(updateInfo);\n      }\n    };\n\n    this.onInputOnChangeMasterDynamic = (event, radiotext) => {\n      const selectedMaster = this.state.selectedMaster || {};\n\n      if (event.target.type === 'toggle') {\n        selectedMaster[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\n      } else if (event.target.type === 'numeric') {\n        if (/\\D/.test(event.target.value)) selectedMaster[event.target.name] = event.target.value;\n      } else if (event.target.type === 'checkbox') {\n        const value = selectedMaster[event.target.name];\n\n        if (value !== '' && value !== undefined) {\n          if (value.includes(radiotext)) {\n            const index = value.indexOf(radiotext);\n\n            if (index !== -1) {\n              if (index === 0) {\n                const indexcomma = value.indexOf(\",\");\n\n                if (indexcomma !== -1) {\n                  selectedMaster[event.target.name] = value.slice(indexcomma + 1);\n                } else {\n                  selectedMaster[event.target.name] = \"\";\n                }\n              } else {\n                if (value.slice(index).indexOf(\",\") !== -1) {\n                  selectedMaster[event.target.name] = value.slice(0, index) + value.slice(index + value.slice(index).indexOf(\",\") + 1);\n                } else {\n                  selectedMaster[event.target.name] = value.slice(0, index - 1);\n                }\n              }\n            }\n          } else {\n            selectedMaster[event.target.name] = value + ',' + radiotext;\n          }\n        } else {\n          selectedMaster[event.target.name] = radiotext;\n        }\n      } else if (event.target.type === 'radio') {\n        selectedMaster[event.target.name] = radiotext;\n      } else {\n        selectedMaster[event.target.name] = event.target.value;\n      }\n\n      this.setState({\n        selectedMaster\n      });\n    };\n\n    this.handleDateChangeMasterDynamic = (dateValue, dateName) => {\n      const {\n        selectedMaster\n      } = this.state;\n      selectedMaster[dateName] = dateValue;\n      this.setState({\n        selectedMaster\n      });\n    };\n\n    this.onNumericInputChangeMasterDynamic = (value, name) => {\n      let selectedMaster = this.state.selectedMaster;\n      selectedMaster[name] = value;\n      this.setState({\n        selectedMaster\n      });\n    };\n\n    this.onNumericBlurMasterDynamic = (value, control) => {\n      let selectedMaster = this.state.selectedMaster;\n\n      if (selectedMaster[control.label]) {\n        if (control.max) {\n          if (!(selectedMaster[control.label] < parseFloat(control.max))) {\n            selectedMaster[control.label] = control.precision ? parseFloat(control.max) : parseInt(control.max);\n          }\n        }\n\n        if (control.min) {\n          if (!(selectedMaster[control.label] > parseFloat(control.min))) {\n            selectedMaster[control.label] = control.precision ? parseFloat(control.min) : parseInt(control.min);\n          }\n        }\n      }\n\n      this.setState({\n        selectedMaster\n      });\n    };\n\n    this.onComboChangeMaster = (comboData, fieldName, item) => {\n      const selectedMaster = this.state.selectedMaster || {};\n\n      if (comboData !== null) {\n        if (this.props.Login.selectedControl.table.item.nformcode === 137) {\n          selectedMaster[item.tableDataField] = comboData.value;\n        } else if (item.foreignDataField) {\n          selectedMaster[item.foreignDataField] = comboData.value;\n        }\n      }\n\n      selectedMaster[fieldName] = comboData;\n\n      if (item.childIndex !== undefined) {\n        this.props.getChildComboMaster(selectedMaster, fieldName, item, this.props.Login.selectedControl, this.props.Login.masterfieldList, this.props.Login.masterdataList, this.props.Login.userInfo);\n      } else {\n        this.setState({\n          selectedMaster\n        });\n      }\n    };\n\n    this.handleDateChangeMaster = (dateName, dateValue, item) => {\n      const {\n        selectedMaster\n      } = this.state;\n      selectedMaster[dateName] = dateValue;\n      const age = ageCalculate(dateValue);\n      selectedMaster[\"sage\"] = age;\n      this.setState({\n        selectedMaster\n      });\n    };\n\n    this.onNumericInputOnChangeMaster = (value, name, item) => {\n      const selectedMaster = this.state.selectedMaster || {};\n      selectedMaster[name] = value;\n      this.setState({\n        selectedMaster\n      });\n    };\n\n    this.onInputOnChangeMaster = event => {\n      const selectedMaster = this.state.selectedMaster || {};\n\n      if (event.target.type === 'checkbox') {\n        selectedMaster[event.target.name] = event.target.checked === true ? 3 : 4;\n\n        if (this.props.Login.selectedControl.table.item.nformcode === 137) {\n          if (selectedMaster.nneedcurrentaddress === 3) {\n            selectedMaster.sflatnotemp = selectedMaster.sflatno;\n            selectedMaster.shousenotemp = selectedMaster.shouseno;\n            selectedMaster.spostalcodetemp = selectedMaster.spostalcode;\n            selectedMaster.sstreettemp = selectedMaster.sstreet;\n            selectedMaster.scitynametemp = selectedMaster.scityname;\n            selectedMaster.sdistrictnametemp = selectedMaster.sdistrictname;\n            selectedMaster.sregionnametemp = selectedMaster.sregionname;\n          } else {\n            selectedMaster.sflatnotemp = \"\";\n            selectedMaster.shousenotemp = \"\";\n            selectedMaster.spostalcodetemp = \"\";\n            selectedMaster.sstreettemp = \"\";\n            selectedMaster.scitynametemp = \"\";\n            selectedMaster.sdistrictnametemp = \"\";\n            selectedMaster.sregionnametemp = \"\";\n          }\n        }\n      } else {\n        selectedMaster[event.target.name] = event.target.value;\n      }\n\n      this.setState({\n        selectedMaster\n      });\n    };\n\n    this.onSaveMasterRecord = (saveType, formRef) => {\n      //add / edit            \n      let inputData = [];\n      inputData[\"userinfo\"] = { ...this.props.Login.userInfo,\n        nformcode: this.props.Login.selectedControl.table.item.nformcode\n      };\n      inputData[this.props.Login.selectedControl.table.item.methodUrl.toLowerCase()] = {\n        \"nsitecode\": this.props.Login.userInfo.nmastersitecode\n      };\n      const methodUrl = this.props.Login.selectedControl.table.item.methodUrl.toLowerCase();\n\n      if (this.props.Login.selectedControl.table.item.component === 'Dynamic') {\n        const selectedMaster = this.state.selectedMaster;\n        inputData[\"userinfo\"] = { ...this.props.Login.userInfo,\n          nformcode: this.props.Login.selectedControl.table.item.nformcode\n        };\n        inputData[\"masterdateconstraints\"] = this.props.Login.masterDesign.screendesign.masterdateconstraints;\n        inputData[\"masterdatefields\"] = this.props.Login.masterDesign.screendesign.masterdatefields;\n        inputData[\"mastercombinationunique\"] = this.props.Login.masterDesign.screendesign.mastercombinationunique; //add                          \n\n        inputData[\"dynamicmaster\"] = {\n          nformcode: this.props.Login.selectedControl.table.item.nformcode,\n          ndesigntemplatemappingcode: this.props.Login.masterDesign.ndesigntemplatemappingcode,\n          jsondata: {},\n          jsonuidata: {}\n        };\n        const dateList = [];\n        const defaulttimezone = this.props.Login.defaulttimezone;\n        this.props.Login.masterDesign && this.props.Login.masterDesign.slideoutdesign.map(row => {\n          row.children.map(column => {\n            column.children.map(component => {\n              if (component.hasOwnProperty(\"children\")) {\n                component.children.map(componentrow => {\n                  if (componentrow.inputtype === \"combo\") {\n                    inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label] = selectedMaster[componentrow.label] ? {\n                      value: selectedMaster[componentrow.label].value,\n                      label: selectedMaster[componentrow.label].label,\n                      pkey: selectedMaster[componentrow.label].item.pkey,\n                      nquerybuildertablecode: selectedMaster[componentrow.label].item.nquerybuildertablecode,\n                      source: selectedMaster[componentrow.label].item.source\n                    } : -1;\n                    inputData[\"dynamicmaster\"][\"jsonuidata\"][componentrow.label] = selectedMaster[componentrow.label] ? selectedMaster[componentrow.label].label : \"\";\n                  } else if (componentrow.inputtype === \"date\") {\n                    if (componentrow.mandatory) {\n                      inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label] = formatDate(selectedMaster[componentrow.label], false);\n                      inputData[\"dynamicmaster\"][\"jsonuidata\"][componentrow.label] = inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label]; //inputData[\"dynamicmaster\"][\"jsonuidata\"][componentrow.label] = convertDateTimetoString(selectedRecord[componentrow.label], userInfo);\n                    } else {\n                      inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label] = componentrow.loadcurrentdate ? formatDate(selectedMaster[componentrow.label] || new Date(), false) : selectedMaster[componentrow.label] ? formatDate(selectedMaster[componentrow.label], false) : \"\";\n                      inputData[\"dynamicmaster\"][\"jsonuidata\"][componentrow.label] = inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label]; //convertDateTimetoString(selectedRecord[componentrow.label], userInfo);\n                    }\n\n                    if (componentrow.timezone) {\n                      inputData[\"dynamicmaster\"][\"jsondata\"][`tz${componentrow.label}`] = selectedMaster[`tz${componentrow.label}`] ? {\n                        value: selectedMaster[`tz${componentrow.label}`].value,\n                        label: selectedMaster[`tz${componentrow.label}`].label\n                      } : defaulttimezone ? defaulttimezone : -1;\n                      inputData[\"dynamicmaster\"][\"jsonuidata\"][`tz${componentrow.label}`] = inputData[\"dynamicmaster\"][\"jsondata\"][`tz${componentrow.label}`];\n                    }\n\n                    dateList.push(componentrow.label);\n                  } else {\n                    inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label] = selectedMaster[componentrow.label] ? selectedMaster[componentrow.label] : \"\";\n                    inputData[\"dynamicmaster\"][\"jsonuidata\"][componentrow.label] = inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label]; // inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label]\n                  }\n\n                  return inputData[\"dynamicmaster\"];\n                });\n              } else {\n                if (component.inputtype === \"combo\") {\n                  inputData[\"dynamicmaster\"][\"jsondata\"][component.label] = selectedMaster[component.label] ? {\n                    value: selectedMaster[component.label].value,\n                    label: selectedMaster[component.label].label,\n                    pkey: selectedMaster[component.label].item.pkey,\n                    nquerybuildertablecode: selectedMaster[component.label].item.nquerybuildertablecode,\n                    source: selectedMaster[component.label].item.source\n                  } : -1;\n                  inputData[\"dynamicmaster\"][\"jsonuidata\"][component.label] = inputData[\"dynamicmaster\"][\"jsondata\"][component.label].label; //selectedRecord[component.label] ? selectedRecord[component.label].label : \"\"\n                } else if (component.inputtype === \"date\") {\n                  if (component.mandatory) {\n                    inputData[\"dynamicmaster\"][\"jsondata\"][component.label] = formatDate(selectedMaster[component.label], false); // convertDateTimetoString(selectedRecord[component.label] ?\n                    // selectedRecord[component.label] : new Date(), userInfo);\n\n                    inputData[\"dynamicmaster\"][\"jsonuidata\"][component.label] = inputData[\"dynamicmaster\"][\"jsondata\"][component.label]; //convertDateTimetoString(selectedRecord[component.label], userInfo);\n                  } else {\n                    inputData[\"dynamicmaster\"][\"jsondata\"][component.label] = component.loadcurrentdate ? //convertDateTimetoString(selectedRecord[component.label] ?                                      \n                    //    selectedRecord[component.label] : new Date(), userInfo) :\n                    formatDate(selectedMaster[component.label] || new Date(), false) : selectedMaster[component.label] ? // convertDateTimetoString(selectedRecord[component.label] ?\n                    //   selectedRecord[component.label] : new Date(), userInfo) : \"\";\n                    formatDate(selectedMaster[component.label], false) : \"\";\n                    inputData[\"dynamicmaster\"][\"jsonuidata\"][component.label] = inputData[\"dynamicmaster\"][\"jsondata\"][component.label]; //convertDateTimetoString(selectedRecord[component.label], userInfo)\n                  }\n\n                  if (component.timezone) {\n                    inputData[\"dynamicmaster\"][\"jsondata\"][`tz${component.label}`] = selectedMaster[`tz${component.label}`] ? {\n                      value: selectedMaster[`tz${component.label}`].value,\n                      label: selectedMaster[`tz${component.label}`].label\n                    } : defaulttimezone ? defaulttimezone : -1;\n                    inputData[\"dynamicmaster\"][\"jsonuidata\"][`tz${component.label}`] = inputData[\"dynamicmaster\"][\"jsondata\"][`tz${component.label}`];\n                  }\n\n                  dateList.push(component.label);\n                } else {\n                  inputData[\"dynamicmaster\"][\"jsondata\"][component.label] = selectedMaster[component.label] ? selectedMaster[component.label] : \"\";\n                  inputData[\"dynamicmaster\"][\"jsonuidata\"][component.label] = inputData[\"dynamicmaster\"][\"jsondata\"][component.label];\n                }\n              }\n\n              return inputData[\"dynamicmaster\"];\n            });\n            return inputData[\"dynamicmaster\"];\n          });\n          return inputData[\"dynamicmaster\"];\n        });\n        inputData[\"dynamicmaster\"][\"jsonstring\"] = JSON.stringify(inputData[\"dynamicmaster\"][\"jsondata\"]);\n        inputData[\"dynamicmaster\"][\"jsonuistring\"] = JSON.stringify(inputData[\"dynamicmaster\"][\"jsonuidata\"]);\n        inputData[\"masterdatelist\"] = dateList;\n      } else if (this.props.Login.selectedControl.table.item.component === 'Type3Component' && this.props.Login.selectedControl.table.item.nformcode === 137) {\n        inputData[\"noneedfilter\"] = true;\n        this.props.Login.masterextractedColumnList.map(item => {\n          let fieldName = item.dataField;\n\n          if (item.isJsonField === true) {\n            return inputData[methodUrl][item.jsonObjectName] = { ...inputData[methodUrl][item.jsonObjectName],\n              [fieldName]: this.state.selectedMaster[fieldName] ? this.state.selectedMaster[fieldName] : \"\"\n            };\n          } else {\n            if (item.controlType === \"selectbox\") {\n              // inputData[methodUrl][fieldName] = this.state.selectedMaster[fieldName] ? this.state.selectedMaster[fieldName].label ? this.state.selectedMaster[fieldName].label : \"\" : -1;\n              inputData[methodUrl][item.tableDataField] = this.state.selectedMaster[fieldName] ? this.state.selectedMaster[fieldName].value ? this.state.selectedMaster[fieldName].value : \"\" : -1;\n              return inputData;\n            } else if (item.controlType === \"datepicker\") {\n              inputData[methodUrl][item.dateField] = formatInputDate(this.state.selectedMaster[fieldName] ? this.state.selectedMaster[fieldName] : \"\", false);\n            } else if (item.controlType === \"checkbox\") {\n              inputData[methodUrl][item.controlName] = this.state.selectedMaster[item.controlName] ? this.state.selectedMaster[item.controlName] : transactionStatus.NO;\n            } else {\n              inputData[methodUrl][fieldName] = this.state.selectedMaster[fieldName] ? this.state.selectedMaster[fieldName] : \"\";\n            } // inputData[methodUrl][selectedRecordPrimarykey] = this.props.Login.selectedId;\n\n\n            return inputData;\n          }\n        });\n      } else {\n        this.props.Login.masterextractedColumnList.map(item => {\n          let fieldName = item.dataField;\n\n          if (item.isJsonField === true) {\n            return inputData[methodUrl][item.jsonObjectName] = { ...inputData[methodUrl][item.jsonObjectName],\n              [fieldName]: this.state.selectedMaster[fieldName] ? this.state.selectedMaster[fieldName] : \"\"\n            };\n          } else {\n            if (item.controlType === \"selectbox\") {\n              inputData[methodUrl][fieldName] = this.state.selectedMaster[fieldName] ? this.state.selectedMaster[fieldName].label ? this.state.selectedMaster[fieldName].label : \"\" : -1;\n              inputData[methodUrl][item.foreignDataField] = this.state.selectedMaster[fieldName] ? this.state.selectedMaster[fieldName].value ? this.state.selectedMaster[fieldName].value : \"\" : -1;\n              return inputData;\n            } else if (item.controlType === \"datepicker\") {\n              inputData[methodUrl][item.dateField] = formatInputDate(this.state.selectedMaster[fieldName] ? this.state.selectedMaster[fieldName] : \"\", false);\n            } else if (item.controlType === \"checkbox\") {\n              inputData[methodUrl][item.controlName] = this.state.selectedMaster[item.controlName] ? this.state.selectedMaster[item.controlName] : transactionStatus.NO;\n            } else {\n              inputData[methodUrl][fieldName] = this.state.selectedMaster[fieldName] ? this.state.selectedMaster[fieldName] : \"\";\n            } // inputData[methodUrl][selectedRecordPrimarykey] = this.props.Login.selectedId;\n\n\n            return inputData;\n          }\n        });\n      } // }\n\n\n      const inputParam = {\n        withoutCombocomponent: this.state.withoutCombocomponent,\n        comboComponents: this.state.comboComponents,\n        selectedRecord: this.state.selectedRecord,\n        selectedRecordName: 'selectedRecord',\n        loadSubSample: false,\n        selectedControl: this.props.Login.selectedControl,\n        comboData: this.props.Login.comboData,\n        comboName: 'comboData',\n        classUrl: this.props.Login.selectedControl.table.item.classUrl,\n        methodUrl: this.props.Login.selectedControl.table.item.methodUrl,\n        displayName: this.props.Login.selectedControl.table.item.sdisplayname,\n        inputData: inputData,\n        operation: \"create\",\n        saveType,\n        formRef\n      };\n      this.props.addMasterRecord(inputParam, this.props.Login.masterData); // if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\n      //     const updateInfo = {\n      //         typeName: DEFAULT_RETURN,\n      //         data: {\n      //             loadEsign: true, screenData: { inputParam, masterData: this.props.Login.masterData },\n      //             openModal: true, screenName: this.props.intl.formatMessage({ id: this.props.Login.inputParam.displayName }),\n      //             operation: this.props.Login.operation\n      //         }\n      //     }\n      //     this.props.updateStore(updateInfo);\n      // }\n      // else {\n      //  this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\n      //  }\n    };\n\n    this.addMasterRecord = control => {\n      let fieldList = [];\n      let masterComboColumnFiled = [];\n      let extractedColumnList = [];\n\n      if (control.table.item.component === 'Type2Component' || control.table.item.component === 'Type1Component') {\n        if (control.table.item.component === 'Type2Component') {\n          fieldList = getFieldSpecification().get(control.table.item.methodUrl) || [];\n        } else {\n          fieldList = getFieldSpecification1().get(control.table.item.methodUrl) || [];\n        }\n\n        extractedColumnList = extractFieldHeader(Object.values(fieldList));\n        const primaryKeyField = Object.keys(fieldList).length > 0 ? fieldList[0].dataField : \"\";\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            selectedControl: control,\n            addMaster: true,\n            masterfieldList: fieldList,\n            masterextractedColumnList: extractedColumnList,\n            masterprimaryKeyField: primaryKeyField,\n            masterComboColumnFiled: masterComboColumnFiled\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else if (control.table.item.component === 'Type3Component') {\n        fieldList = getFieldSpecification3().get(control.table.item.methodUrl) || [];\n        extractedColumnList = extractFieldHeader(Object.values(fieldList));\n        masterComboColumnFiled = extractedColumnList.filter(item => item.ndesigncomponentcode === designComponents.COMBOBOX);\n        const primaryKeyField = Object.keys(fieldList).length > 0 ? fieldList[0].dataField : \"\";\n        const inputParam = {\n          userinfo: this.props.Login.userInfo,\n          selectedControl: control,\n          masterfieldList: fieldList,\n          masterextractedColumnList: extractedColumnList,\n          masterprimaryKeyField: primaryKeyField,\n          masterComboColumnFiled: masterComboColumnFiled\n        };\n        this.props.getAddMasterCombo(inputParam);\n      } else if (control.table.item.component === 'Dynamic') {\n        const inputParam = {\n          userinfo: this.props.Login.userInfo,\n          selectedControl: control\n        };\n        this.props.getDynamicMasterTempalte(inputParam);\n      } // this.props.getMasterRecord(control);\n\n    };\n\n    this.openModal = () => {\n      const addId = this.props.Login.inputParam && this.state.controlMap.has(\"Add\") && this.state.controlMap.get(\"Add\").ncontrolcode;\n      this.props.getDynamicMasterCombo(this.props.Login.masterData, this.props.Login.userInfo, addId, this.state.designData, this.state.selectedRecord, this.state.childColumnList, this.state.comboComponents, this.state.withoutCombocomponent, false, true, new Map(), true, \"create\", this.props.Login.displayName);\n    };\n\n    this.fetchRecord = fetchRecordParam => {\n      this.props.getEditDynamicMasterCombo(fetchRecordParam, this.state.designData, this.state.selectedRecord, this.state.childColumnList, this.state.comboComponents, this.state.withoutCombocomponent);\n    };\n\n    this.onNumericBlur = (value, control) => {\n      let selectedRecord = this.state.selectedRecord;\n\n      if (selectedRecord[control.label]) {\n        if (control.max) {\n          if (!(selectedRecord[control.label] < parseFloat(control.max))) {\n            selectedRecord[control.label] = control.precision ? parseFloat(control.max) : parseInt(control.max);\n          }\n        }\n\n        if (control.min) {\n          if (!(selectedRecord[control.label] > parseFloat(control.min))) {\n            selectedRecord[control.label] = control.precision ? parseFloat(control.min) : parseInt(control.min);\n          }\n        }\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.comboChild = (data, columnList, childColumnList, slice) => {\n      let retunObj = {}; // if (data.findIndex(x => x.label === columnList.label) !== -1) {\n\n      if (!childColumnList.hasOwnProperty(columnList.label)) {\n        if (childColumnList[columnList.label] === undefined) {\n          if (columnList.hasOwnProperty(\"child\")) {\n            let childList = [];\n            columnList.child.map(childData => {\n              const index = data.findIndex(x => x.label === childData.label);\n\n              if (index !== -1) {\n                childList.push(data[index]);\n\n                if (slice) {\n                  data = [...data.slice(0, index), ...data.slice(index + 1)];\n                }\n              }\n            });\n            childColumnList[columnList.label] = childList;\n\n            if (childList.length > 0) {\n              childList.map(y => {\n                if (y.hasOwnProperty(\"child\")) {\n                  const val = this.comboChild(data, y, childColumnList, slice);\n                  retunObj[\"data\"] = val.data;\n                  retunObj[\"childColumnList\"] = val.childColumnList;\n                } else {\n                  retunObj[\"data\"] = data;\n                  retunObj[\"childColumnList\"] = childColumnList;\n                }\n              });\n            } else {\n              retunObj[\"data\"] = data;\n              retunObj[\"childColumnList\"] = childColumnList;\n            }\n          } else {\n            retunObj[\"data\"] = data;\n            retunObj[\"childColumnList\"] = childColumnList;\n          }\n        } else {\n          retunObj[\"data\"] = data;\n          retunObj[\"childColumnList\"] = childColumnList;\n        }\n      } else {\n        retunObj[\"data\"] = data;\n        retunObj[\"childColumnList\"] = childColumnList;\n      }\n\n      return retunObj;\n    };\n\n    this.onComboChange = (comboData, control, customName) => {\n      let comboName = customName || control.label;\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (comboData) {\n        comboData[\"item\"] = { ...comboData[\"item\"],\n          \"pkey\": control.valuemember,\n          \"nquerybuildertablecode\": control.nquerybuildertablecode,\n          \"source\": control.source\n        };\n        selectedRecord[comboName] = comboData;\n      } else {\n        selectedRecord[comboName] = [];\n      }\n\n      if (control.child && control.child.length > 0) {\n        const childComboList = getSameRecordFromTwoArrays(this.state.comboComponents, control.child, \"label\");\n        let childColumnList = {};\n        childComboList.map(columnList => {\n          const val = this.comboChild(this.state.comboComponents, columnList, childColumnList, false);\n          childColumnList = val.childColumnList;\n        });\n        const parentList = getSameRecordFromTwoArrays(this.state.withoutCombocomponent, control.child, \"label\");\n        const inputParem = {\n          child: control.child,\n          source: control.source,\n          primarykeyField: control.valuemember,\n          value: comboData.value,\n          item: comboData.item\n        };\n        this.props.getChildValues(inputParem, this.props.Login.userInfo, selectedRecord, this.props.Login.comboData, childComboList, childColumnList, this.state.withoutCombocomponent, [...childComboList, ...parentList]);\n      } else {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            selectedRecord\n          }\n        };\n        this.props.updateStore(updateInfo);\n      }\n    };\n\n    this.onNumericInputChange = (value, name) => {\n      let selectedRecord = this.state.selectedRecord;\n      selectedRecord[name] = value;\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.handleDateChange = (dateValue, dateName) => {\n      const {\n        selectedRecord\n      } = this.state;\n      selectedRecord[dateName] = dateValue;\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onDrop = (value, type, oldVlaue) => {\n      const design = this.state.design;\n      let columns = design[0].children;\n      let designData = this.props.Login.ReactInputFields;\n      value = JSON.parse(value.fields);\n      value = { ...value,\n        type: \"component\"\n      };\n      let designDataIndex = designData.findIndex(item => item.label === value.label);\n      let firstIndex = columns[0] ? columns[0].children.findIndex(item => item.label === value.label) : -1;\n      let secondIndex = columns[1] ? columns[1].children.findIndex(item => item.label === value.label) : -1;\n      if (designDataIndex >= 0) designData.splice(designDataIndex, 1);\n\n      if (firstIndex >= 0) {\n        if (type !== 1) {\n          columns[0].children.splice(firstIndex, 1); // columns[0].splice(to, 0, columns[0].splice(from, 1)[0]);\n        } else {\n          if (oldVlaue) {\n            oldVlaue = JSON.parse(oldVlaue);\n            let from = columns[0].children.findIndex(item => item.label === value.label);\n            let to = columns[0].children.findIndex(item => item.label === oldVlaue.label);\n            columns[0].children.splice(to, 0, columns[0].children.splice(from, 1)[0]);\n          }\n        }\n      } else if (type === 1) {\n        if (columns[0]) {\n          columns[0].children.push(value);\n        } else {\n          columns[0] = {\n            id: \"1\",\n            type: \"column\",\n            children: []\n          };\n          columns[0].children.push(value);\n        }\n      }\n\n      if (secondIndex >= 0) {\n        if (type !== 2) {\n          columns[1].splice(secondIndex, 1);\n        } else {\n          if (oldVlaue) {\n            oldVlaue = JSON.parse(oldVlaue);\n            let from = columns[1].children.findIndex(item => item.label === value.label);\n            let to = columns[1].children.findIndex(item => item.label === oldVlaue.label);\n            columns[1].children.splice(to, 0, columns[1].children.splice(from, 1)[0]);\n          }\n        }\n      } else if (type === 2) {\n        if (columns[1]) {\n          columns[1].children.push(value);\n        } else {\n          columns[1] = {\n            id: \"2\",\n            type: \"column\",\n            children: []\n          };\n          columns[1].children.push(value);\n        }\n      } // design.push(columns)\n\n\n      this.setState({\n        designData,\n        design\n      });\n    };\n\n    this.onDropFile = (attachedFiles, fieldName, maxSize) => {\n      let selectedRecord = this.state.selectedRecord || {};\n      selectedRecord[fieldName] = onDropAttachFileList(selectedRecord[fieldName], attachedFiles, maxSize);\n      this.setState({\n        selectedRecord,\n        actionType: \"new\"\n      });\n    };\n\n    this.deleteAttachment = (event, file, fieldName) => {\n      let selectedRecord = this.state.selectedRecord || {};\n      selectedRecord[fieldName] = deleteAttachmentDropZone(selectedRecord[fieldName], file);\n      this.setState({\n        selectedRecord,\n        actionType: \"delete\" //fileToDelete:file.name \n\n      });\n    };\n\n    this.onInputOnChange = (event, value) => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (event.target.type === 'toggle') {\n        selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\n      } else if (event.target.type === 'numeric') {\n        if (/\\D/.test(event.target.value)) selectedRecord[event.target.name] = event.target.value;\n      } else if (event.target.type === 'checkbox') {\n        selectedRecord[event.target.name] = value;\n      } else if (event.target.type === 'radio') {\n        selectedRecord[event.target.name] = value;\n      } else {\n        selectedRecord[event.target.name] = event.target.value;\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.deleteRecord = deleteParam => {\n      const inputParam = {\n        classUrl: \"dynamicmaster\",\n        methodUrl: \"DynamicMaster\",\n        displayName: this.props.Login.displayName,\n        inputData: {\n          [\"dynamicmaster\"]: {\n            \"ndynamicmastercode\": deleteParam.selectedRecord.ndynamicmastercode\n          },\n          //.dataItem,\n          \"userinfo\": this.props.Login.userInfo\n        },\n        operation: \"delete\",\n        dataState: this.state.dataState\n      };\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, deleteParam.ncontrolCode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData: this.props.Login.masterData\n            },\n            openModal: true,\n            screenName: this.props.Login.displayName,\n            operation: \"delete\"\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\n      }\n    };\n\n    this.reloadData = () => {\n      const inputParam = {\n        inputData: {\n          \"userinfo\": this.props.Login.userInfo\n        },\n        classUrl: this.props.Login.inputParam.classUrl,\n        methodUrl: this.props.Login.inputParam.methodUrl,\n        userInfo: this.props.Login.userInfo,\n        displayName: this.props.Login.inputParam.displayName\n      };\n      this.props.callService(inputParam);\n    };\n\n    this.onSaveClick = (saveType, formRef) => {\n      //add / edit  \n      let inputData = [];\n      let dataState = undefined;\n      inputData[\"userinfo\"] = this.props.Login.userInfo;\n      inputData[\"masterdateconstraints\"] = this.props.Login.masterData.DynamicMasterDesign.screendesign.masterdateconstraints;\n      inputData[\"masterdatefields\"] = this.props.Login.masterData.DynamicMasterDesign.screendesign.masterdatefields;\n      inputData[\"mastercombinationunique\"] = this.props.Login.masterData.DynamicMasterDesign.screendesign.mastercombinationunique;\n      let selectedId = null;\n      let operation = \"\";\n      let selectedRecord = this.state.selectedRecord;\n\n      if (this.props.Login.operation === \"update\") {\n        // edit\n        dataState = this.state.dataState;\n        inputData[\"dynamicmaster\"] = {\n          ndynamicmastercode: this.state.selectedRecord[\"ndynamicmastercode\"]\n        }; //this.state.selectedRecord;\n\n        inputData[\"dynamicmaster\"][\"jsondata\"] = {};\n        inputData[\"dynamicmaster\"][\"jsonuidata\"] = {};\n        selectedId = this.props.Login.selectedId;\n        operation = \"update\";\n      } else {\n        //add                          \n        inputData[\"dynamicmaster\"] = {\n          //\"nsitecode\": this.props.Login.userInfo.nmastersitecode, \n          nformcode: this.props.Login.userInfo.nformcode,\n          ndesigntemplatemappingcode: this.props.Login.masterData.DynamicMasterDesign.ndesigntemplatemappingcode,\n          jsondata: {},\n          jsonuidata: {}\n        };\n        operation = \"create\";\n      }\n\n      const dateList = [];\n      const defaulttimezone = this.props.Login.defaulttimezone;\n      const userInfo = this.props.Login.userInfo;\n      this.props.Login.masterData.DynamicMasterDesign && this.props.Login.masterData.DynamicMasterDesign.slideoutdesign.map(row => {\n        row.children.map(column => {\n          column.children.map(component => {\n            if (component.hasOwnProperty(\"children\")) {\n              component.children.map(componentrow => {\n                if (componentrow.inputtype === \"combo\") {\n                  inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label] = selectedRecord[componentrow.label] ? {\n                    value: selectedRecord[componentrow.label].value,\n                    label: selectedRecord[componentrow.label].label,\n                    pkey: selectedRecord[componentrow.label].item.pkey,\n                    nquerybuildertablecode: selectedRecord[componentrow.label].item.nquerybuildertablecode,\n                    source: selectedRecord[componentrow.label].item.source\n                  } : -1;\n                  inputData[\"dynamicmaster\"][\"jsonuidata\"][componentrow.label] = selectedRecord[componentrow.label] ? selectedRecord[componentrow.label].label : \"\";\n                } else if (componentrow.inputtype === \"date\") {\n                  if (componentrow.mandatory) {\n                    inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label] = formatDate(selectedRecord[componentrow.label], false);\n                    inputData[\"dynamicmaster\"][\"jsonuidata\"][componentrow.label] = inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label]; //inputData[\"dynamicmaster\"][\"jsonuidata\"][componentrow.label] = convertDateTimetoString(selectedRecord[componentrow.label], userInfo);\n                  } else {\n                    inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label] = componentrow.loadcurrentdate ? formatDate(selectedRecord[componentrow.label] || new Date(), false) : selectedRecord[componentrow.label] ? formatDate(selectedRecord[componentrow.label], false) : \"\";\n                    inputData[\"dynamicmaster\"][\"jsonuidata\"][componentrow.label] = inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label]; //convertDateTimetoString(selectedRecord[componentrow.label], userInfo);\n                  }\n\n                  if (componentrow.timezone) {\n                    inputData[\"dynamicmaster\"][\"jsondata\"][`tz${componentrow.label}`] = selectedRecord[`tz${componentrow.label}`] ? {\n                      value: selectedRecord[`tz${componentrow.label}`].value,\n                      label: selectedRecord[`tz${componentrow.label}`].label\n                    } : defaulttimezone ? defaulttimezone : -1;\n                    inputData[\"dynamicmaster\"][\"jsonuidata\"][`tz${componentrow.label}`] = inputData[\"dynamicmaster\"][\"jsondata\"][`tz${componentrow.label}`];\n                  }\n\n                  dateList.push(componentrow.label);\n                } else {\n                  inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label] = selectedRecord[componentrow.label] ? selectedRecord[componentrow.label] : \"\";\n                  inputData[\"dynamicmaster\"][\"jsonuidata\"][componentrow.label] = inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label]; // inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label]\n                }\n\n                return inputData[\"dynamicmaster\"];\n              });\n            } else {\n              if (component.inputtype === \"combo\") {\n                inputData[\"dynamicmaster\"][\"jsondata\"][component.label] = selectedRecord[component.label] ? {\n                  value: selectedRecord[component.label].value,\n                  label: selectedRecord[component.label].label,\n                  pkey: selectedRecord[component.label].item.pkey,\n                  nquerybuildertablecode: selectedRecord[component.label].item.nquerybuildertablecode,\n                  source: selectedRecord[component.label].item.source\n                } : -1;\n                inputData[\"dynamicmaster\"][\"jsonuidata\"][component.label] = inputData[\"dynamicmaster\"][\"jsondata\"][component.label].label; //selectedRecord[component.label] ? selectedRecord[component.label].label : \"\"\n              } else if (component.inputtype === \"date\") {\n                if (component.mandatory) {\n                  inputData[\"dynamicmaster\"][\"jsondata\"][component.label] = formatDate(selectedRecord[component.label], false); // convertDateTimetoString(selectedRecord[component.label] ?\n                  // selectedRecord[component.label] : new Date(), userInfo);\n\n                  inputData[\"dynamicmaster\"][\"jsonuidata\"][component.label] = inputData[\"dynamicmaster\"][\"jsondata\"][component.label]; //convertDateTimetoString(selectedRecord[component.label], userInfo);\n                } else {\n                  inputData[\"dynamicmaster\"][\"jsondata\"][component.label] = component.loadcurrentdate ? //convertDateTimetoString(selectedRecord[component.label] ?                                      \n                  //    selectedRecord[component.label] : new Date(), userInfo) :\n                  formatDate(selectedRecord[component.label] || new Date(), false) : selectedRecord[component.label] ? // convertDateTimetoString(selectedRecord[component.label] ?\n                  //   selectedRecord[component.label] : new Date(), userInfo) : \"\";\n                  formatDate(selectedRecord[component.label], false) : \"\";\n                  inputData[\"dynamicmaster\"][\"jsonuidata\"][component.label] = inputData[\"dynamicmaster\"][\"jsondata\"][component.label]; //convertDateTimetoString(selectedRecord[component.label], userInfo)\n                }\n\n                if (component.timezone) {\n                  inputData[\"dynamicmaster\"][\"jsondata\"][`tz${component.label}`] = selectedRecord[`tz${component.label}`] ? {\n                    value: selectedRecord[`tz${component.label}`].value,\n                    label: selectedRecord[`tz${component.label}`].label\n                  } : defaulttimezone ? defaulttimezone : -1;\n                  inputData[\"dynamicmaster\"][\"jsonuidata\"][`tz${component.label}`] = inputData[\"dynamicmaster\"][\"jsondata\"][`tz${component.label}`];\n                }\n\n                dateList.push(component.label);\n              } else {\n                inputData[\"dynamicmaster\"][\"jsondata\"][component.label] = selectedRecord[component.label] ? selectedRecord[component.label] : \"\";\n                inputData[\"dynamicmaster\"][\"jsonuidata\"][component.label] = inputData[\"dynamicmaster\"][\"jsondata\"][component.label];\n              }\n            }\n\n            return inputData[\"dynamicmaster\"];\n          });\n          return inputData[\"dynamicmaster\"];\n        });\n        return inputData[\"dynamicmaster\"];\n      });\n      inputData[\"dynamicmaster\"][\"jsonstring\"] = JSON.stringify(inputData[\"dynamicmaster\"][\"jsondata\"]);\n      inputData[\"dynamicmaster\"][\"jsonuistring\"] = JSON.stringify(inputData[\"dynamicmaster\"][\"jsonuidata\"]);\n      inputData[\"masterdatelist\"] = dateList;\n      const inputParam = {\n        classUrl: \"dynamicmaster\",\n        methodUrl: \"DynamicMaster\",\n        displayName: this.props.Login.displayName,\n        inputData: inputData,\n        operation: operation,\n        saveType,\n        formRef,\n        selectedId,\n        dataState\n      };\n      const esignNeeded = showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode);\n\n      if (esignNeeded) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData: this.props.Login.masterData\n            },\n            openModal: true,\n            screenName: this.props.Login.displayName,\n            operation: \"create\"\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\n      }\n    };\n\n    this.validateEsign = () => {\n      const inputParam = {\n        inputData: {\n          \"userinfo\": { ...this.props.Login.userInfo,\n            sreason: this.state.selectedRecord[\"esigncomments\"],\n            nreasoncode: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].value,\n            spredefinedreason: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].label\n          },\n          password: this.state.selectedRecord[\"esignpassword\"]\n        },\n        screenData: this.props.Login.screenData\n      };\n      this.props.validateEsignCredential(inputParam, \"openModal\");\n    };\n\n    this.formRef = React.createRef();\n    this.extractedColumnList = [];\n    this.detailedColumnList = [];\n    const _dataState = {\n      skip: 0,\n      take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n    };\n    this.state = {\n      data: [],\n      masterStatus: \"\",\n      error: \"\",\n      selectedRecord: {},\n      dataResult: [],\n      dataState: _dataState,\n      userRoleControlRights: [],\n      controlMap: new Map(),\n      comboComponents: [],\n      withoutCombocomponent: [],\n      selectedMaster: {}\n    };\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\n      toast.warn(props.Login.masterStatus);\n      props.Login.masterStatus = \"\";\n    }\n\n    if (props.Login.error !== state.error) {\n      toast.error(props.Login.error);\n      props.Login.error = \"\";\n    }\n\n    return null;\n  }\n\n  render() {\n    let primaryKeyField = \"ndynamicmastercode\";\n    const editId = this.props.Login.inputParam && this.state.controlMap.has(\"Edit\") && this.state.controlMap.get(\"Edit\").ncontrolcode;\n    const editParam = {\n      screenName: this.props.Login.inputParam && this.props.Login.inputParam.displayName && this.props.intl.formatMessage({\n        id: this.props.Login.inputParam.displayName\n      }),\n      operation: \"update\",\n      primaryKeyField,\n      inputParam: this.props.Login.inputParam,\n      userInfo: this.props.Login.userInfo,\n      ncontrolCode: editId\n    };\n    const deleteParam = {\n      operation: \"delete\"\n    }; // const mandatoryFields=[];\n    // this.extractedColumnList.forEach(item=>item.mandatory === true ? \n    //     mandatoryFields.push(item) :\"\"\n    // );   \n\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(ListWrapper, {\n      className: \"client-list-content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 21\n      }\n    }, this.state.data ? /*#__PURE__*/React.createElement(DynamicDataGrid, {\n      primaryKeyField: primaryKeyField,\n      data: this.state.data,\n      dataResult: this.state.dataResult,\n      dataState: this.state.dataState,\n      dataStateChange: this.dataStateChange,\n      extractedColumnList: this.extractedColumnList,\n      detailedFieldList: this.detailedColumnList,\n      expandField: this.detailedColumnList.length > 0 ? \"expanded\" : false,\n      methodUrl: \"\",\n      controlMap: this.state.controlMap,\n      userRoleControlRights: this.state.userRoleControlRights,\n      inputParam: this.props.Login.inputParam,\n      userInfo: this.props.Login.userInfo,\n      fetchRecord: this.fetchRecord,\n      editParam: editParam,\n      deleteRecord: this.deleteRecord,\n      deleteParam: deleteParam,\n      reloadData: this.reloadData,\n      addRecord: this.openModal,\n      pageable: true,\n      scrollable: 'scrollable',\n      gridHeight: '600px',\n      isActionRequired: true,\n      isToolBarRequired: true,\n      selectedId: this.props.Login.selectedId,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 29\n      }\n    }) : \"\"))), this.props.Login.openModal ? /*#__PURE__*/React.createElement(SlideOutModal, {\n      show: this.props.Login.openModal,\n      closeModal: this.closeModal,\n      operation: this.props.Login.operation ? this.props.Login.operation : \"create\",\n      inputParam: this.props.Login.inputParam,\n      screenName: this.props.Login.screenName,\n      onSaveClick: this.props.Login.addMaster ? this.onSaveMasterRecord : this.onSaveClick,\n      esign: this.props.Login.loadEsign,\n      validateEsign: this.validateEsign,\n      masterStatus: this.props.Login.masterStatus,\n      updateStore: this.props.updateStore,\n      selectedRecord: this.props.Login.addMaster ? this.state.selectedMaster : this.state.selectedRecord || {},\n      mandatoryFields: this.props.Login.addMaster ? this.props.Login.masterextractedColumnList.filter(x => x.mandatory === true) : this.state.mandatoryFields || [],\n      addComponent: this.props.Login.loadEsign ? /*#__PURE__*/React.createElement(Esign, {\n        operation: this.props.Login.operation,\n        onInputOnChange: this.onInputOnChange,\n        inputParam: this.props.Login.inputParam,\n        selectedRecord: this.state.selectedRecord || {},\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 203,\n          columnNumber: 25\n        }\n      }) : this.props.Login.addMaster ? /*#__PURE__*/React.createElement(AddMasterRecords, {\n        selectedControl: this.props.Login.selectedControl,\n        fieldList: this.props.Login.masterfieldList,\n        extractedColumnList: this.props.Login.masterextractedColumnList,\n        primaryKeyField: this.props.Login.masterprimaryKeyField,\n        selectedRecord: this.state.selectedMaster || {},\n        onInputOnChange: this.onInputOnChangeMaster,\n        onComboChange: this.onComboChangeMaster,\n        handleDateChange: this.handleDateChangeMaster,\n        dataList: this.props.Login.masterdataList,\n        onNumericInputOnChange: this.onNumericInputOnChangeMaster,\n        masterDesign: this.props.Login.masterDesign,\n        mastertimeZoneList: this.props.Login.mastertimeZoneList,\n        masterdefaultTimeZone: this.props.Login.masterdefaultTimeZone,\n        onComboChangeMasterDyanmic: this.onComboChangeMasterDyanmic,\n        handleDateChangeMasterDynamic: this.handleDateChangeMasterDynamic,\n        onInputOnChangeMasterDynamic: this.onInputOnChangeMasterDynamic,\n        onNumericInputChangeMasterDynamic: this.onNumericInputChangeMasterDynamic,\n        onNumericBlurMasterDynamic: this.onNumericBlurMasterDynamic,\n        userInfo: this.props.Login.userInfo,\n        Login: this.props.Login,\n        addMasterRecord: this.addMasterRecord,\n        userRoleControlRights: this.props.Login.userRoleControlRights,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 208,\n          columnNumber: 29\n        }\n      }) : /*#__PURE__*/React.createElement(DynamicSlideout, {\n        selectedRecord: this.props.Login.selectedRecord,\n        templateData: this.props.Login.masterData.DynamicMasterDesign && this.props.Login.masterData.DynamicMasterDesign.slideoutdesign // handleChange={this.handleChange}\n        ,\n        handleDateChange: this.handleDateChange,\n        onInputOnChange: this.onInputOnChange,\n        onNumericInputChange: this.onNumericInputChange,\n        comboData: this.props.Login.comboData,\n        onComboChange: this.onComboChange,\n        onDropFile: this.onDropFile,\n        deleteAttachment: this.deleteAttachment,\n        onNumericBlur: this.onNumericBlur,\n        userInfo: this.props.Login.userInfo,\n        timeZoneList: this.props.Login.timeZoneList,\n        defaultTimeZone: this.props.Login.defaultTimeZone,\n        Login: this.props.Login,\n        addMasterRecord: this.addMasterRecord,\n        userRoleControlRights: this.props.Login.userRoleControlRights,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 232,\n          columnNumber: 29\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 17\n      }\n    }) : \"\");\n  }\n\n  componentDidUpdate(previousProps) {\n    if (this.props.Login.masterData !== previousProps.Login.masterData) {\n      if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\n        const userRoleControlRights = [];\n\n        if (this.props.Login.userRoleControlRights) {\n          this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item => userRoleControlRights.push(item.ncontrolcode));\n        }\n\n        const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode);\n        this.extractedColumnList = [];\n        this.detailedColumnList = [];\n\n        if (this.props.Login.masterData && this.props.Login.masterData.DynamicMasterDesign && this.props.Login.masterData.DynamicMasterDesign.screendesign) {\n          this.props.Login.masterData.DynamicMasterDesign.screendesign.griditem.map(row => {\n            // console.log(\"data:\", row);\n            this.extractedColumnList.push({\n              \"idsName\": row[\"1\"][this.props.Login.userInfo.slanguagetypecode],\n              \"dataField\": row[\"2\"]\n            });\n          });\n          this.props.Login.masterData.DynamicMasterDesign.screendesign.gridmoreitem.map(row => {\n            this.detailedColumnList.push({\n              \"idsName\": row[\"1\"][this.props.Login.userInfo.slanguagetypecode],\n              \"dataField\": row[\"2\"]\n            });\n          });\n        }\n\n        let data = [];\n        const withoutCombocomponent = [];\n        const mandatoryFields = [];\n        const Layout = this.props.Login.masterData.DynamicMasterDesign && this.props.Login.masterData.DynamicMasterDesign.slideoutdesign || [];\n        Layout.map(row => {\n          row.children.map(column => {\n            column.children.map(component => {\n              if (component.hasOwnProperty(\"children\")) {\n                component.children.map(componentrow => {\n                  if (componentrow.inputtype === \"combo\") {\n                    data.push(componentrow);\n                  } else {\n                    withoutCombocomponent.push(componentrow);\n                  }\n\n                  if (componentrow.mandatory === true) {\n                    if (componentrow.inputtype === \"email\") {\n                      mandatoryFields.push({\n                        \"mandatory\": true,\n                        \"idsName\": componentrow.label,\n                        \"dataField\": componentrow.label,\n                        \"alertPreFix\": this.props.intl.formatMessage({\n                          id: \"IDS_VALID\"\n                        }),\n                        \"validateFunction\": validateEmail,\n                        \"mandatoryLabel\": \"IDS_ENTER\",\n                        \"controlType\": \"textbox\"\n                      });\n                    } else {\n                      mandatoryFields.push({\n                        \"mandatory\": true,\n                        \"idsName\": componentrow.label,\n                        \"dataField\": componentrow.label,\n                        \"mandatoryLabel\": componentrow.inputtype === \"combo\" ? \"IDS_SELECT\" : \"IDS_ENTER\",\n                        \"controlType\": componentrow.inputtype === \"combo\" ? \"selectbox\" : \"textbox\"\n                      });\n                    }\n                  }\n                });\n              } else {\n                component.inputtype === \"combo\" ? data.push(component) : withoutCombocomponent.push(component);\n\n                if (component.mandatory === true) {\n                  if (component.inputtype === \"email\") {\n                    mandatoryFields.push({\n                      \"mandatory\": true,\n                      \"idsName\": component.label,\n                      \"dataField\": component.label,\n                      \"alertPreFix\": this.props.intl.formatMessage({\n                        id: \"IDS_VALID\"\n                      }),\n                      \"validateFunction\": validateEmail,\n                      \"mandatoryLabel\": \"IDS_ENTER\",\n                      \"controlType\": \"textbox\"\n                    });\n                  } else {\n                    mandatoryFields.push({\n                      \"mandatory\": true,\n                      \"idsName\": component.label,\n                      \"dataField\": component.label,\n                      \"mandatoryLabel\": component.inputtype === \"combo\" ? \"IDS_SELECT\" : \"IDS_ENTER\",\n                      \"controlType\": component.inputtype === \"combo\" ? \"selectbox\" : \"textbox\"\n                    });\n                  }\n                }\n              }\n            });\n          });\n        });\n        const comboComponents = data;\n        let childColumnList = {};\n        data.map(columnList => {\n          const val = this.comboChild(data, columnList, childColumnList, true);\n          data = val.data;\n          childColumnList = val.childColumnList;\n        });\n        const masterData = this.props.Login.masterData.DynamicMasterData ? sortData(this.props.Login.masterData.DynamicMasterData, \"descending\", \"ndynamicmastercode\") : [];\n        this.setState({\n          withoutCombocomponent,\n          comboComponents,\n          childColumnList,\n          designData: data,\n          mandatoryFields,\n          userRoleControlRights,\n          controlMap,\n          data: this.props.Login.masterData.DynamicMasterData || [],\n          dataResult: process(masterData || [], this.state.dataState)\n        });\n      } else {\n        let {\n          dataState\n        } = this.state;\n\n        if (this.props.Login.dataState === undefined) {\n          dataState = {\n            skip: 0,\n            take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n          };\n        }\n\n        const masterData = this.props.Login.masterData.DynamicMasterData ? sortData(this.props.Login.masterData.DynamicMasterData, \"descending\", \"ndynamicmastercode\") : [];\n        this.setState({\n          data: this.props.Login.masterData.DynamicMasterData || [],\n          selectedRecord: this.props.Login.selectedRecord,\n          dataResult: process(masterData || [], dataState),\n          dataState //, comboComponents, withoutCombocomponent\n\n        });\n      }\n    }\n\n    if (this.props.Login.selectedMaster !== previousProps.Login.selectedMaster) {\n      this.setState({\n        selectedMaster: this.props.Login.selectedMaster\n      });\n    }\n\n    if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\n      this.setState({\n        selectedRecord: this.props.Login.selectedRecord\n      });\n    }\n  }\n\n}\n\nexport default connect(mapStateToProps, {\n  callService,\n  crudMaster,\n  updateStore,\n  validateEsignCredential,\n  getChildValues,\n  getEditDynamicMasterCombo,\n  //fetchRecord,\n  getDynamicMasterCombo,\n  addMasterRecord,\n  getAddMasterCombo,\n  getDynamicMasterTempalte,\n  getChildComboMaster\n})(injectIntl(DynamicMaster));","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/pages/dynamicmaster/DynamicMaster.jsx"],"names":["React","connect","injectIntl","Row","Col","toast","process","DynamicDataGrid","SlideOutModal","Esign","callService","crudMaster","updateStore","validateEsignCredential","getEditDynamicMasterCombo","getDynamicMasterCombo","getChildValues","addMasterRecord","getAddMasterCombo","getDynamicMasterTempalte","getChildComboMaster","DEFAULT_RETURN","showEsign","getControlMap","deleteAttachmentDropZone","getSameRecordFromTwoArrays","onDropAttachFileList","convertDateTimetoString","validateEmail","formatDate","sortData","ageCalculate","formatInputDate","extractFieldHeader","childComboClear","ListWrapper","DynamicSlideout","designComponents","transactionStatus","getFieldSpecification","AddMasterRecords","getFieldSpecification1","getFieldSpecification3","mapStateToProps","state","Login","DynamicMaster","Component","constructor","props","dataStateChange","event","setState","dataResult","data","dataState","closeModal","loadEsign","openModal","selectedRecord","selectedMaster","selectedControl","masterextractedColumnList","masterfieldList","masterprimaryKeyField","addMaster","operation","updateInfo","typeName","selectedId","onComboChangeMasterDyanmic","comboData","control","customName","comboName","label","valuemember","nquerybuildertablecode","source","child","length","childComboList","mastercomboComponents","childColumnList","map","columnList","val","comboChild","parentList","masterwithoutCombocomponent","inputParem","primarykeyField","value","item","getChildValuesForAddMaster","userInfo","mastedataList","withoutCombocomponent","inputParam","comboComponents","childParam","onInputOnChangeMasterDynamic","radiotext","target","type","name","checked","YES","NO","test","undefined","includes","index","indexOf","indexcomma","slice","handleDateChangeMasterDynamic","dateValue","dateName","onNumericInputChangeMasterDynamic","onNumericBlurMasterDynamic","max","parseFloat","precision","parseInt","min","onComboChangeMaster","fieldName","table","nformcode","tableDataField","foreignDataField","childIndex","masterdataList","handleDateChangeMaster","age","onNumericInputOnChangeMaster","onInputOnChangeMaster","nneedcurrentaddress","sflatnotemp","sflatno","shousenotemp","shouseno","spostalcodetemp","spostalcode","sstreettemp","sstreet","scitynametemp","scityname","sdistrictnametemp","sdistrictname","sregionnametemp","sregionname","onSaveMasterRecord","saveType","formRef","inputData","methodUrl","toLowerCase","nmastersitecode","component","masterDesign","screendesign","masterdateconstraints","masterdatefields","mastercombinationunique","ndesigntemplatemappingcode","jsondata","jsonuidata","dateList","defaulttimezone","slideoutdesign","row","children","column","hasOwnProperty","componentrow","inputtype","pkey","mandatory","loadcurrentdate","Date","timezone","push","JSON","stringify","dataField","isJsonField","jsonObjectName","controlType","dateField","controlName","selectedRecordName","loadSubSample","classUrl","displayName","sdisplayname","masterData","fieldList","masterComboColumnFiled","extractedColumnList","get","Object","values","primaryKeyField","keys","filter","ndesigncomponentcode","COMBOBOX","userinfo","addId","controlMap","has","ncontrolcode","designData","Map","fetchRecord","fetchRecordParam","onNumericBlur","retunObj","childList","childData","findIndex","x","y","onComboChange","onNumericInputChange","handleDateChange","onDrop","oldVlaue","design","columns","ReactInputFields","parse","fields","designDataIndex","firstIndex","secondIndex","splice","from","to","id","onDropFile","attachedFiles","maxSize","actionType","deleteAttachment","file","onInputOnChange","deleteRecord","deleteParam","ndynamicmastercode","userRoleControlRights","ncontrolCode","screenData","screenName","reloadData","onSaveClick","DynamicMasterDesign","esignNeeded","validateEsign","sreason","nreasoncode","spredefinedreason","password","createRef","detailedColumnList","skip","take","settings","masterStatus","error","getDerivedStateFromProps","warn","render","editId","editParam","intl","formatMessage","mandatoryFields","mastertimeZoneList","masterdefaultTimeZone","timeZoneList","defaultTimeZone","componentDidUpdate","previousProps","griditem","slanguagetypecode","gridmoreitem","Layout","DynamicMasterData"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { injectIntl } from 'react-intl';\r\nimport { Row, Col } from 'react-bootstrap';\r\nimport { toast } from 'react-toastify';\r\nimport { process } from '@progress/kendo-data-query';\r\nimport DynamicDataGrid from '../../components/data-grid/data-grid.component';\r\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\r\nimport Esign from '../../pages/audittrail/Esign';\r\nimport {\r\n    callService, crudMaster, updateStore, validateEsignCredential,\r\n    getEditDynamicMasterCombo,\r\n    //fetchRecord,\r\n    getDynamicMasterCombo, getChildValues,\r\n    addMasterRecord, getAddMasterCombo, getDynamicMasterTempalte,\r\n    getChildComboMaster\r\n} from '../../actions';\r\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\r\nimport {\r\n    showEsign, getControlMap, deleteAttachmentDropZone,\r\n    getSameRecordFromTwoArrays, onDropAttachFileList, convertDateTimetoString,\r\n    validateEmail, formatDate, sortData, ageCalculate, formatInputDate, extractFieldHeader, childComboClear\r\n} from '../../components/CommonScript';\r\nimport { ListWrapper } from '../../components/client-group.styles';\r\nimport DynamicSlideout from '../dynamicpreregdesign/DynamicSlideout.jsx';\r\nimport { designComponents, transactionStatus } from '../../components/Enumeration';\r\nimport { getFieldSpecification } from '../../components/type2component/Type2FieldSpecificationList';\r\nimport AddMasterRecords from '../dynamicpreregdesign/AddMasterRecords'\r\nimport { getFieldSpecification as getFieldSpecification1 } from '../../components/type1component/Type1FieldSpecificationList';\r\nimport { getFieldSpecification as getFieldSpecification3 } from '../../components/type3component/Type3FieldSpecificationList';\r\n\r\nconst mapStateToProps = state => {\r\n    return ({ Login: state.Login })\r\n}\r\n\r\nclass DynamicMaster extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.formRef = React.createRef();\r\n        this.extractedColumnList = [];\r\n        this.detailedColumnList = [];\r\n        const dataState = {\r\n            skip: 0,\r\n            take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5,\r\n        };\r\n        this.state = {\r\n            data: [], masterStatus: \"\", error: \"\", selectedRecord: {},\r\n            dataResult: [],\r\n            dataState: dataState,\r\n            userRoleControlRights: [],\r\n            controlMap: new Map(),\r\n            comboComponents: [],\r\n            withoutCombocomponent: [],\r\n            selectedMaster:{}\r\n        };\r\n    }\r\n\r\n    dataStateChange = (event) => {\r\n        this.setState({\r\n            dataResult: process(this.state.data || [], event.dataState),\r\n            dataState: event.dataState\r\n        });\r\n    }\r\n\r\n    closeModal = () => {\r\n        let loadEsign = this.props.Login.loadEsign;\r\n        let openModal = this.props.Login.openModal;\r\n        let selectedRecord = this.props.Login.selectedRecord;\r\n        let selectedMaster = this.props.Login.selectedMaster;\r\n        let selectedControl = this.props.Login.selectedControl;\r\n        let masterextractedColumnList = this.props.Login.masterextractedColumnList;\r\n        let masterfieldList = this.props.Login.masterfieldList;\r\n        let masterprimaryKeyField = this.props.Login.masterprimaryKeyField;\r\n        let addMaster = this.props.Login.addMaster\r\n\r\n        if (this.props.Login.loadEsign) {\r\n            if (this.props.Login.operation === \"delete\") {\r\n                loadEsign = false;\r\n                openModal = false;\r\n                selectedRecord = {};\r\n            }\r\n            else {\r\n                loadEsign = false;\r\n                selectedRecord['esignpassword'] = \"\"\r\n                selectedRecord['esigncomments'] = \"\"\r\n                selectedRecord['esignreason'] = \"\"\r\n            }\r\n        } else if (this.props.Login.addMaster) {\r\n            selectedMaster = {}\r\n            selectedControl = {}\r\n            masterextractedColumnList = []\r\n            masterfieldList = {}\r\n            masterprimaryKeyField = \"\"\r\n            addMaster = false\r\n        }\r\n        else {\r\n            openModal = false;\r\n            selectedRecord = {};\r\n        }\r\n\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                openModal, loadEsign,\r\n                selectedRecord, selectedId: null, selectedMaster, selectedControl,\r\n                masterextractedColumnList, masterfieldList,\r\n                masterprimaryKeyField, addMaster\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n\r\n    }\r\n\r\n    static getDerivedStateFromProps(props, state) {\r\n        if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\r\n            toast.warn(props.Login.masterStatus);\r\n            props.Login.masterStatus = \"\";\r\n        }\r\n\r\n        if (props.Login.error !== state.error) {\r\n            toast.error(props.Login.error)\r\n            props.Login.error = \"\";\r\n        }\r\n        return null;\r\n    }\r\n\r\n    render() {\r\n\r\n        let primaryKeyField = \"ndynamicmastercode\";\r\n\r\n        const editId = this.props.Login.inputParam && this.state.controlMap.has(\"Edit\")\r\n            && this.state.controlMap.get(\"Edit\").ncontrolcode;\r\n\r\n        const editParam = {\r\n            screenName: this.props.Login.inputParam && this.props.Login.inputParam.displayName\r\n                && this.props.intl.formatMessage({ id: this.props.Login.inputParam.displayName }), operation: \"update\", primaryKeyField,\r\n            inputParam: this.props.Login.inputParam, userInfo: this.props.Login.userInfo, ncontrolCode: editId\r\n        };\r\n\r\n        const deleteParam = { operation: \"delete\" };\r\n\r\n        // const mandatoryFields=[];\r\n        // this.extractedColumnList.forEach(item=>item.mandatory === true ? \r\n        //     mandatoryFields.push(item) :\"\"\r\n        // );   \r\n\r\n        return (<>\r\n            <Row>\r\n                <Col>\r\n                    <ListWrapper className=\"client-list-content\">\r\n                        {this.state.data ?\r\n                            <DynamicDataGrid\r\n                                primaryKeyField={primaryKeyField}\r\n                                data={this.state.data}\r\n                                dataResult={this.state.dataResult}\r\n                                dataState={this.state.dataState}\r\n                                dataStateChange={this.dataStateChange}\r\n                                extractedColumnList={this.extractedColumnList}\r\n                                detailedFieldList={this.detailedColumnList}\r\n                                expandField={this.detailedColumnList.length > 0 ? \"expanded\" : false}\r\n                                methodUrl={\"\"}\r\n                                controlMap={this.state.controlMap}\r\n                                userRoleControlRights={this.state.userRoleControlRights}\r\n                                inputParam={this.props.Login.inputParam}\r\n                                userInfo={this.props.Login.userInfo}\r\n                                fetchRecord={this.fetchRecord}\r\n                                editParam={editParam}\r\n                                deleteRecord={this.deleteRecord}\r\n                                deleteParam={deleteParam}\r\n                                reloadData={this.reloadData}\r\n                                addRecord={this.openModal}\r\n                                pageable={true}\r\n                                scrollable={'scrollable'}\r\n                                gridHeight={'600px'}\r\n                                isActionRequired={true}\r\n                                isToolBarRequired={true}\r\n                                selectedId={this.props.Login.selectedId}\r\n                            />\r\n                            : \"\"}\r\n                    </ListWrapper>\r\n                </Col>\r\n            </Row>\r\n\r\n            {/* Below Condition Added to avoid unwanted rendering of SlideOut */}\r\n            {this.props.Login.openModal ?\r\n                <SlideOutModal show={this.props.Login.openModal}\r\n                    closeModal={this.closeModal}\r\n                    operation={this.props.Login.operation ? this.props.Login.operation : \"create\"}\r\n                    inputParam={this.props.Login.inputParam}\r\n                    screenName={this.props.Login.screenName}\r\n                    onSaveClick={this.props.Login.addMaster ? this.onSaveMasterRecord : this.onSaveClick}\r\n                    esign={this.props.Login.loadEsign}\r\n                    validateEsign={this.validateEsign}\r\n                    masterStatus={this.props.Login.masterStatus}\r\n                    updateStore={this.props.updateStore}\r\n                    selectedRecord={this.props.Login.addMaster ?\r\n                        this.state.selectedMaster : this.state.selectedRecord || {}}\r\n                    mandatoryFields={this.props.Login.addMaster ?\r\n                        this.props.Login.masterextractedColumnList.filter(x => x.mandatory === true)\r\n                        : this.state.mandatoryFields || []}\r\n                    addComponent={this.props.Login.loadEsign ?\r\n                        <Esign operation={this.props.Login.operation}\r\n                            onInputOnChange={this.onInputOnChange}\r\n                            inputParam={this.props.Login.inputParam}\r\n                            selectedRecord={this.state.selectedRecord || {}}\r\n                        /> : this.props.Login.addMaster ?\r\n                            <AddMasterRecords\r\n                                selectedControl={this.props.Login.selectedControl}\r\n                                fieldList={this.props.Login.masterfieldList}\r\n                                extractedColumnList={this.props.Login.masterextractedColumnList}\r\n                                primaryKeyField={this.props.Login.masterprimaryKeyField}\r\n                                selectedRecord={this.state.selectedMaster || {}}\r\n                                onInputOnChange={this.onInputOnChangeMaster}\r\n                                onComboChange={this.onComboChangeMaster}\r\n                                handleDateChange={this.handleDateChangeMaster}\r\n                                dataList={this.props.Login.masterdataList}\r\n                                onNumericInputOnChange={this.onNumericInputOnChangeMaster}\r\n                                masterDesign={this.props.Login.masterDesign}\r\n                                mastertimeZoneList={this.props.Login.mastertimeZoneList}\r\n                                masterdefaultTimeZone={this.props.Login.masterdefaultTimeZone}\r\n                                onComboChangeMasterDyanmic={this.onComboChangeMasterDyanmic}\r\n                                handleDateChangeMasterDynamic={this.handleDateChangeMasterDynamic}\r\n                                onInputOnChangeMasterDynamic={this.onInputOnChangeMasterDynamic}\r\n                                onNumericInputChangeMasterDynamic={this.onNumericInputChangeMasterDynamic}\r\n                                onNumericBlurMasterDynamic={this.onNumericBlurMasterDynamic}\r\n                                userInfo={this.props.Login.userInfo}\r\n                                Login={this.props.Login}\r\n                                addMasterRecord={this.addMasterRecord}\r\n                                userRoleControlRights={this.props.Login.userRoleControlRights}\r\n                            /> :\r\n                            <DynamicSlideout\r\n                                selectedRecord={this.props.Login.selectedRecord}\r\n                                templateData={this.props.Login.masterData.DynamicMasterDesign &&\r\n                                    this.props.Login.masterData.DynamicMasterDesign.slideoutdesign}\r\n                                // handleChange={this.handleChange}\r\n                                handleDateChange={this.handleDateChange}\r\n                                onInputOnChange={this.onInputOnChange}\r\n                                onNumericInputChange={this.onNumericInputChange}\r\n                                comboData={this.props.Login.comboData}\r\n                                onComboChange={this.onComboChange}\r\n                                onDropFile={this.onDropFile}\r\n                                deleteAttachment={this.deleteAttachment}\r\n                                onNumericBlur={this.onNumericBlur}\r\n                                userInfo={this.props.Login.userInfo}\r\n                                timeZoneList={this.props.Login.timeZoneList}\r\n                                defaultTimeZone={this.props.Login.defaultTimeZone}\r\n                                Login={this.props.Login}\r\n                                addMasterRecord={this.addMasterRecord}\r\n                                userRoleControlRights={this.props.Login.userRoleControlRights}\r\n                            />\r\n                    }\r\n\r\n                /> : \"\"}\r\n        </>\r\n        );\r\n    }\r\n\r\n\r\n    onComboChangeMasterDyanmic = (comboData, control, customName) => {\r\n\r\n        let comboName = customName || control.label;\r\n        let selectedMaster = this.state.selectedMaster || {};\r\n        //if (comboData) {\r\n        comboData[\"item\"] = {\r\n            ...comboData[\"item\"], \"pkey\": control.valuemember, \"nquerybuildertablecode\": control.nquerybuildertablecode,\r\n            \"source\": control.source\r\n        };\r\n        selectedMaster[comboName] = comboData;\r\n\r\n        // console.log(\"selected:\", selectedMaster, comboData, control, customName);\r\n        if (control.child && control.child.length > 0) {\r\n            const childComboList = getSameRecordFromTwoArrays(this.props.Login.mastercomboComponents, control.child, \"label\")\r\n            let childColumnList = {};\r\n            childComboList.map(columnList => {\r\n                const val = this.comboChild(this.props.Login.mastercomboComponents, columnList, childColumnList, false);\r\n                childColumnList = val.childColumnList\r\n            })\r\n\r\n            const parentList = getSameRecordFromTwoArrays(this.props.Login.masterwithoutCombocomponent, control.child, \"label\")\r\n\r\n            if (comboData) {\r\n                const inputParem = {\r\n                    child: control.child,\r\n                    source: control.source,\r\n                    primarykeyField: control.valuemember,\r\n                    value: comboData.value,\r\n                    item: comboData.item\r\n                }\r\n                this.props.getChildValuesForAddMaster(inputParem,\r\n                    this.props.Login.userInfo, selectedMaster, this.props.Login.mastedataList,\r\n                    childComboList, childColumnList, this.props.Login.masterwithoutCombocomponent, [...childComboList, ...parentList])\r\n            } else {\r\n                let comboData = this.props.Login.mastedataList\r\n                const withoutCombocomponent = this.props.Login.masterwithoutCombocomponent || []\r\n                const inputParam = { control, comboComponents: this.props.Login.mastercomboComponents, withoutCombocomponent, selectedMaster, comboData }\r\n                const childParam = childComboClear(inputParam)\r\n                selectedMaster = childParam.selectedRecord\r\n                comboData = childParam.comboData\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: { selectedMaster, mastedataList: comboData }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n        } else {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: { selectedMaster }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n    }\r\n\r\n\r\n    onInputOnChangeMasterDynamic = (event, radiotext) => {\r\n        const selectedMaster = this.state.selectedMaster || {};\r\n        if (event.target.type === 'toggle') {\r\n            selectedMaster[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\r\n        } else if (event.target.type === 'numeric') {\r\n            if (/\\D/.test(event.target.value))\r\n                selectedMaster[event.target.name] = event.target.value;\r\n        } else if (event.target.type === 'checkbox') {\r\n            const value = selectedMaster[event.target.name];\r\n            if (value !== '' && value !== undefined) {\r\n                if (value.includes(radiotext)) {\r\n                    const index = value.indexOf(radiotext);\r\n                    if (index !== -1) {\r\n                        if (index === 0) {\r\n                            const indexcomma = value.indexOf(\",\")\r\n                            if (indexcomma !== -1) {\r\n                                selectedMaster[event.target.name] = value.slice(indexcomma + 1)\r\n                            } else {\r\n                                selectedMaster[event.target.name] = \"\"\r\n                            }\r\n                        } else {\r\n                            if (value.slice(index).indexOf(\",\") !== -1) {\r\n                                selectedMaster[event.target.name] = value.slice(0, index) + value.slice(index + value.slice(index).indexOf(\",\") + 1)\r\n                            } else {\r\n                                selectedMaster[event.target.name] = value.slice(0, index - 1)\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                } else {\r\n                    selectedMaster[event.target.name] = value + ',' + radiotext;\r\n                }\r\n\r\n            } else {\r\n                selectedMaster[event.target.name] = radiotext;\r\n            }\r\n        } else if (event.target.type === 'radio') {\r\n            selectedMaster[event.target.name] = radiotext\r\n        } else {\r\n            selectedMaster[event.target.name] = event.target.value;\r\n        }\r\n        this.setState({ selectedMaster });\r\n    }\r\n\r\n\r\n    handleDateChangeMasterDynamic = (dateValue, dateName) => {\r\n        const { selectedMaster } = this.state;\r\n        selectedMaster[dateName] = dateValue;\r\n\r\n        this.setState({ selectedMaster });\r\n    }\r\n\r\n    onNumericInputChangeMasterDynamic = (value, name) => {\r\n        let selectedMaster = this.state.selectedMaster\r\n        selectedMaster[name] = value;\r\n        this.setState({ selectedMaster });\r\n    }\r\n\r\n    onNumericBlurMasterDynamic = (value, control) => {\r\n        let selectedMaster = this.state.selectedMaster\r\n        if (selectedMaster[control.label]) {\r\n            if (control.max) {\r\n                if (!(selectedMaster[control.label] < parseFloat(control.max))) {\r\n                    selectedMaster[control.label] = control.precision ? parseFloat(control.max) : parseInt(control.max)\r\n                }\r\n            }\r\n            if (control.min) {\r\n                if (!(selectedMaster[control.label] > parseFloat(control.min))) {\r\n                    selectedMaster[control.label] = control.precision ? parseFloat(control.min) : parseInt(control.min)\r\n                }\r\n            }\r\n\r\n\r\n        }\r\n        this.setState({ selectedMaster });\r\n    }\r\n    onComboChangeMaster = (comboData, fieldName, item) => {\r\n        const selectedMaster = this.state.selectedMaster || {};\r\n        if (comboData !== null) {\r\n            if (this.props.Login.selectedControl.table.item.nformcode === 137) {\r\n                selectedMaster[item.tableDataField] = comboData.value;\r\n            }\r\n            else if (item.foreignDataField) {\r\n                selectedMaster[item.foreignDataField] = comboData.value;\r\n            }\r\n        }\r\n        selectedMaster[fieldName] = comboData;\r\n        if (item.childIndex !== undefined) {\r\n            this.props.getChildComboMaster(selectedMaster, fieldName, item,\r\n                this.props.Login.selectedControl,\r\n                this.props.Login.masterfieldList,\r\n                this.props.Login.masterdataList, this.props.Login.userInfo)\r\n        } else {\r\n            this.setState({ selectedMaster });\r\n        }\r\n\r\n    }\r\n\r\n    handleDateChangeMaster = (dateName, dateValue, item) => {\r\n        const { selectedMaster } = this.state;\r\n        selectedMaster[dateName] = dateValue;\r\n        const age = ageCalculate(dateValue);\r\n        selectedMaster[\"sage\"] = age;\r\n        this.setState({ selectedMaster });\r\n\r\n    }\r\n\r\n    onNumericInputOnChangeMaster = (value, name, item) => {\r\n        const selectedMaster = this.state.selectedMaster || {};\r\n        selectedMaster[name] = value;\r\n        this.setState({ selectedMaster });\r\n    }\r\n\r\n\r\n\r\n    onInputOnChangeMaster = (event) => {\r\n        const selectedMaster = this.state.selectedMaster || {};\r\n        if (event.target.type === 'checkbox') {\r\n            selectedMaster[event.target.name] = event.target.checked === true ? 3 : 4;\r\n            if (this.props.Login.selectedControl.table.item.nformcode === 137) {\r\n                if (selectedMaster.nneedcurrentaddress === 3) {\r\n                    selectedMaster.sflatnotemp = selectedMaster.sflatno;\r\n                    selectedMaster.shousenotemp = selectedMaster.shouseno;\r\n                    selectedMaster.spostalcodetemp = selectedMaster.spostalcode;\r\n                    selectedMaster.sstreettemp = selectedMaster.sstreet;\r\n                    selectedMaster.scitynametemp = selectedMaster.scityname;\r\n                    selectedMaster.sdistrictnametemp = selectedMaster.sdistrictname;\r\n                    selectedMaster.sregionnametemp = selectedMaster.sregionname;\r\n                }\r\n                else {\r\n                    selectedMaster.sflatnotemp = \"\";\r\n                    selectedMaster.shousenotemp = \"\";\r\n                    selectedMaster.spostalcodetemp = \"\";\r\n                    selectedMaster.sstreettemp = \"\";\r\n                    selectedMaster.scitynametemp = \"\";\r\n                    selectedMaster.sdistrictnametemp = \"\";\r\n                    selectedMaster.sregionnametemp = \"\";\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            selectedMaster[event.target.name] = event.target.value;\r\n        }\r\n        this.setState({ selectedMaster });\r\n    }\r\n\r\n    onSaveMasterRecord = (saveType, formRef) => {\r\n        //add / edit            \r\n\r\n        let inputData = [];\r\n        inputData[\"userinfo\"] = { ...this.props.Login.userInfo, nformcode: this.props.Login.selectedControl.table.item.nformcode };\r\n        inputData[this.props.Login.selectedControl.table.item.methodUrl.toLowerCase()] = { \"nsitecode\": this.props.Login.userInfo.nmastersitecode };\r\n\r\n        const methodUrl = this.props.Login.selectedControl.table.item.methodUrl.toLowerCase()\r\n\r\n\r\n        if (this.props.Login.selectedControl.table.item.component === 'Dynamic') {\r\n            const selectedMaster = this.state.selectedMaster;\r\n            inputData[\"userinfo\"] = { ...this.props.Login.userInfo, nformcode: this.props.Login.selectedControl.table.item.nformcode };\r\n            inputData[\"masterdateconstraints\"] = this.props.Login.masterDesign.screendesign.masterdateconstraints;\r\n            inputData[\"masterdatefields\"] = this.props.Login.masterDesign.screendesign.masterdatefields;\r\n            inputData[\"mastercombinationunique\"] = this.props.Login.masterDesign.screendesign.mastercombinationunique;\r\n            //add                          \r\n            inputData[\"dynamicmaster\"] = {\r\n                nformcode: this.props.Login.selectedControl.table.item.nformcode,\r\n                ndesigntemplatemappingcode: this.props.Login.masterDesign.ndesigntemplatemappingcode,\r\n                jsondata: {}, jsonuidata: {}\r\n            };\r\n\r\n\r\n\r\n            const dateList = [];\r\n            const defaulttimezone = this.props.Login.defaulttimezone;\r\n\r\n            this.props.Login.masterDesign &&\r\n                this.props.Login.masterDesign.slideoutdesign.map(row => {\r\n                    row.children.map(column => {\r\n                        column.children.map(component => {\r\n                            if (component.hasOwnProperty(\"children\")) {\r\n\r\n                                component.children.map(componentrow => {\r\n                                    if (componentrow.inputtype === \"combo\") {\r\n                                        inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label] = selectedMaster[componentrow.label] ?\r\n                                            {\r\n                                                value: selectedMaster[componentrow.label].value,\r\n                                                label: selectedMaster[componentrow.label].label,\r\n                                                pkey: selectedMaster[componentrow.label].item.pkey,\r\n                                                nquerybuildertablecode: selectedMaster[componentrow.label].item.nquerybuildertablecode,\r\n                                                source: selectedMaster[componentrow.label].item.source\r\n                                            } : -1\r\n\r\n                                        inputData[\"dynamicmaster\"][\"jsonuidata\"][componentrow.label] = selectedMaster[componentrow.label] ? selectedMaster[componentrow.label].label : \"\"\r\n\r\n                                    }\r\n                                    else if (componentrow.inputtype === \"date\") {\r\n                                        if (componentrow.mandatory) {\r\n                                            inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label] = formatDate(selectedMaster[componentrow.label], false)\r\n\r\n                                            inputData[\"dynamicmaster\"][\"jsonuidata\"][componentrow.label] = inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label]\r\n                                            //inputData[\"dynamicmaster\"][\"jsonuidata\"][componentrow.label] = convertDateTimetoString(selectedRecord[componentrow.label], userInfo);\r\n                                        }\r\n                                        else {\r\n                                            inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label] = componentrow.loadcurrentdate ?\r\n                                                formatDate(selectedMaster[componentrow.label] || new Date(), false) :\r\n                                                selectedMaster[componentrow.label] ? formatDate(selectedMaster[componentrow.label], false)\r\n                                                    : \"\";\r\n\r\n                                            inputData[\"dynamicmaster\"][\"jsonuidata\"][componentrow.label] = inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label];\r\n                                            //convertDateTimetoString(selectedRecord[componentrow.label], userInfo);\r\n                                        }\r\n                                        if (componentrow.timezone) {\r\n                                            inputData[\"dynamicmaster\"][\"jsondata\"][`tz${componentrow.label}`] = selectedMaster[`tz${componentrow.label}`] ?\r\n                                                { value: selectedMaster[`tz${componentrow.label}`].value, label: selectedMaster[`tz${componentrow.label}`].label } :\r\n                                                defaulttimezone ? defaulttimezone : -1\r\n\r\n                                            inputData[\"dynamicmaster\"][\"jsonuidata\"][`tz${componentrow.label}`] = inputData[\"dynamicmaster\"][\"jsondata\"][`tz${componentrow.label}`]\r\n                                        }\r\n                                        dateList.push(componentrow.label)\r\n                                    }\r\n\r\n                                    else {\r\n                                        inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label] = selectedMaster[componentrow.label] ?\r\n                                            selectedMaster[componentrow.label] : \"\"\r\n\r\n                                        inputData[\"dynamicmaster\"][\"jsonuidata\"][componentrow.label] = inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label]\r\n                                        // inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label]\r\n\r\n                                    }\r\n                                    return inputData[\"dynamicmaster\"];\r\n                                })\r\n                            }\r\n                            else {\r\n                                if (component.inputtype === \"combo\") {\r\n                                    inputData[\"dynamicmaster\"][\"jsondata\"][component.label] = selectedMaster[component.label] ?\r\n                                        {\r\n                                            value: selectedMaster[component.label].value,\r\n                                            label: selectedMaster[component.label].label,\r\n                                            pkey: selectedMaster[component.label].item.pkey,\r\n                                            nquerybuildertablecode: selectedMaster[component.label].item.nquerybuildertablecode,\r\n                                            source: selectedMaster[component.label].item.source\r\n                                        } : -1\r\n\r\n                                    inputData[\"dynamicmaster\"][\"jsonuidata\"][component.label] = inputData[\"dynamicmaster\"][\"jsondata\"][component.label].label;\r\n                                    //selectedRecord[component.label] ? selectedRecord[component.label].label : \"\"\r\n                                }\r\n                                else if (component.inputtype === \"date\") {\r\n                                    if (component.mandatory) {\r\n                                        inputData[\"dynamicmaster\"][\"jsondata\"][component.label] = formatDate(selectedMaster[component.label], false);\r\n                                        // convertDateTimetoString(selectedRecord[component.label] ?\r\n                                        // selectedRecord[component.label] : new Date(), userInfo);\r\n\r\n                                        inputData[\"dynamicmaster\"][\"jsonuidata\"][component.label] = inputData[\"dynamicmaster\"][\"jsondata\"][component.label]\r\n                                        //convertDateTimetoString(selectedRecord[component.label], userInfo);\r\n\r\n                                    } else {\r\n                                        inputData[\"dynamicmaster\"][\"jsondata\"][component.label] = component.loadcurrentdate ?\r\n                                            //convertDateTimetoString(selectedRecord[component.label] ?                                      \r\n                                            //    selectedRecord[component.label] : new Date(), userInfo) :\r\n                                            formatDate(selectedMaster[component.label] || new Date(), false) :\r\n                                            selectedMaster[component.label] ?\r\n                                                // convertDateTimetoString(selectedRecord[component.label] ?\r\n                                                //   selectedRecord[component.label] : new Date(), userInfo) : \"\";\r\n                                                formatDate(selectedMaster[component.label], false) : \"\";\r\n                                        inputData[\"dynamicmaster\"][\"jsonuidata\"][component.label] = inputData[\"dynamicmaster\"][\"jsondata\"][component.label]\r\n                                        //convertDateTimetoString(selectedRecord[component.label], userInfo)\r\n\r\n                                    }\r\n                                    if (component.timezone) {\r\n                                        inputData[\"dynamicmaster\"][\"jsondata\"][`tz${component.label}`] = selectedMaster[`tz${component.label}`] ?\r\n                                            { value: selectedMaster[`tz${component.label}`].value, label: selectedMaster[`tz${component.label}`].label } :\r\n                                            defaulttimezone ? defaulttimezone : -1\r\n\r\n                                        inputData[\"dynamicmaster\"][\"jsonuidata\"][`tz${component.label}`] = inputData[\"dynamicmaster\"][\"jsondata\"][`tz${component.label}`]\r\n                                    }\r\n                                    dateList.push(component.label)\r\n                                }\r\n                                else {\r\n                                    inputData[\"dynamicmaster\"][\"jsondata\"][component.label] = selectedMaster[component.label] ?\r\n                                        selectedMaster[component.label] : \"\"\r\n\r\n                                    inputData[\"dynamicmaster\"][\"jsonuidata\"][component.label] = inputData[\"dynamicmaster\"][\"jsondata\"][component.label]\r\n                                }\r\n                            }\r\n                            return inputData[\"dynamicmaster\"];\r\n                        }\r\n                        )\r\n                        return inputData[\"dynamicmaster\"];\r\n                    })\r\n                    return inputData[\"dynamicmaster\"];\r\n                })\r\n\r\n\r\n            inputData[\"dynamicmaster\"][\"jsonstring\"] = JSON.stringify(inputData[\"dynamicmaster\"][\"jsondata\"]);\r\n            inputData[\"dynamicmaster\"][\"jsonuistring\"] = JSON.stringify(inputData[\"dynamicmaster\"][\"jsonuidata\"]);\r\n            inputData[\"masterdatelist\"] = dateList;\r\n\r\n\r\n        }\r\n        else if (this.props.Login.selectedControl.table.item.component === 'Type3Component'\r\n            && this.props.Login.selectedControl.table.item.nformcode === 137) {\r\n            inputData[\"noneedfilter\"] = true\r\n            this.props.Login.masterextractedColumnList.map(item => {\r\n                let fieldName = item.dataField;\r\n                if (item.isJsonField === true) {\r\n                    return inputData[methodUrl][item.jsonObjectName] = { ...inputData[methodUrl][item.jsonObjectName], [fieldName]: this.state.selectedMaster[fieldName] ? this.state.selectedMaster[fieldName] : \"\" }\r\n                }\r\n                else {\r\n                    if (item.controlType === \"selectbox\") {\r\n                        // inputData[methodUrl][fieldName] = this.state.selectedMaster[fieldName] ? this.state.selectedMaster[fieldName].label ? this.state.selectedMaster[fieldName].label : \"\" : -1;\r\n                        inputData[methodUrl][item.tableDataField] = this.state.selectedMaster[fieldName] ? this.state.selectedMaster[fieldName].value ? this.state.selectedMaster[fieldName].value : \"\" : -1;\r\n                        return inputData;\r\n                    }\r\n                    else if (item.controlType === \"datepicker\") {\r\n                        inputData[methodUrl][item.dateField] = formatInputDate(this.state.selectedMaster[fieldName] ? this.state.selectedMaster[fieldName] : \"\", false);\r\n                    }\r\n                    else if (item.controlType === \"checkbox\") {\r\n                        inputData[methodUrl][item.controlName] = this.state.selectedMaster[item.controlName] ? this.state.selectedMaster[item.controlName] : transactionStatus.NO;\r\n                    }\r\n                    else {\r\n                        inputData[methodUrl][fieldName] = this.state.selectedMaster[fieldName] ? this.state.selectedMaster[fieldName] : \"\";\r\n                    }\r\n                    // inputData[methodUrl][selectedRecordPrimarykey] = this.props.Login.selectedId;\r\n                    return inputData;\r\n                }\r\n            })\r\n        }\r\n        else {\r\n\r\n            this.props.Login.masterextractedColumnList.map(item => {\r\n                let fieldName = item.dataField;\r\n                if (item.isJsonField === true) {\r\n                    return inputData[methodUrl][item.jsonObjectName] = { ...inputData[methodUrl][item.jsonObjectName], [fieldName]: this.state.selectedMaster[fieldName] ? this.state.selectedMaster[fieldName] : \"\" }\r\n                }\r\n                else {\r\n                    if (item.controlType === \"selectbox\") {\r\n                        inputData[methodUrl][fieldName] = this.state.selectedMaster[fieldName] ? this.state.selectedMaster[fieldName].label ? this.state.selectedMaster[fieldName].label : \"\" : -1;\r\n                        inputData[methodUrl][item.foreignDataField] = this.state.selectedMaster[fieldName] ? this.state.selectedMaster[fieldName].value ? this.state.selectedMaster[fieldName].value : \"\" : -1;\r\n                        return inputData;\r\n                    }\r\n                    else if (item.controlType === \"datepicker\") {\r\n                        inputData[methodUrl][item.dateField] = formatInputDate(this.state.selectedMaster[fieldName] ? this.state.selectedMaster[fieldName] : \"\", false);\r\n                    }\r\n                    else if (item.controlType === \"checkbox\") {\r\n                        inputData[methodUrl][item.controlName] = this.state.selectedMaster[item.controlName] ? this.state.selectedMaster[item.controlName] : transactionStatus.NO;\r\n                    }\r\n                    else {\r\n                        inputData[methodUrl][fieldName] = this.state.selectedMaster[fieldName] ? this.state.selectedMaster[fieldName] : \"\";\r\n                    }\r\n                    // inputData[methodUrl][selectedRecordPrimarykey] = this.props.Login.selectedId;\r\n                    return inputData;\r\n                }\r\n            })\r\n        }\r\n        // }\r\n\r\n        const inputParam = {\r\n            withoutCombocomponent: this.state.withoutCombocomponent,\r\n            comboComponents: this.state.comboComponents,\r\n            selectedRecord: this.state.selectedRecord,\r\n            selectedRecordName: 'selectedRecord',\r\n            loadSubSample: false,\r\n            selectedControl: this.props.Login.selectedControl,\r\n            comboData: this.props.Login.comboData,\r\n            comboName: 'comboData',\r\n            classUrl: this.props.Login.selectedControl.table.item.classUrl,\r\n            methodUrl: this.props.Login.selectedControl.table.item.methodUrl,\r\n            displayName: this.props.Login.selectedControl.table.item.sdisplayname,\r\n            inputData: inputData,\r\n            operation: \"create\", saveType, formRef\r\n        }\r\n\r\n        this.props.addMasterRecord(inputParam, this.props.Login.masterData)\r\n\r\n\r\n        // if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\r\n\r\n        //     const updateInfo = {\r\n        //         typeName: DEFAULT_RETURN,\r\n        //         data: {\r\n        //             loadEsign: true, screenData: { inputParam, masterData: this.props.Login.masterData },\r\n        //             openModal: true, screenName: this.props.intl.formatMessage({ id: this.props.Login.inputParam.displayName }),\r\n        //             operation: this.props.Login.operation\r\n        //         }\r\n        //     }\r\n        //     this.props.updateStore(updateInfo);\r\n        // }\r\n        // else {\r\n        //  this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\r\n        //  }\r\n\r\n    }\r\n\r\n\r\n    addMasterRecord = (control) => {\r\n        let fieldList = []\r\n        let masterComboColumnFiled = []\r\n        let extractedColumnList = []\r\n        if (control.table.item.component === 'Type2Component' || control.table.item.component === 'Type1Component') {\r\n            if (control.table.item.component === 'Type2Component') {\r\n                fieldList = getFieldSpecification().get(control.table.item.methodUrl) || [];\r\n            } else {\r\n                fieldList = getFieldSpecification1().get(control.table.item.methodUrl) || [];\r\n            }\r\n\r\n\r\n            extractedColumnList = extractFieldHeader(Object.values(fieldList));\r\n\r\n            const primaryKeyField = Object.keys(fieldList).length > 0 ? fieldList[0].dataField : \"\";\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    selectedControl: control,\r\n                    addMaster: true,\r\n                    masterfieldList: fieldList,\r\n                    masterextractedColumnList: extractedColumnList,\r\n                    masterprimaryKeyField: primaryKeyField,\r\n                    masterComboColumnFiled: masterComboColumnFiled\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo)\r\n        }\r\n        else if (control.table.item.component === 'Type3Component') {\r\n            fieldList = getFieldSpecification3().get(control.table.item.methodUrl) || [];\r\n            extractedColumnList = extractFieldHeader(Object.values(fieldList));\r\n            masterComboColumnFiled = extractedColumnList.filter(item =>\r\n                item.ndesigncomponentcode === designComponents.COMBOBOX)\r\n            const primaryKeyField = Object.keys(fieldList).length > 0 ? fieldList[0].dataField : \"\";\r\n            const inputParam = {\r\n                userinfo: this.props.Login.userInfo,\r\n                selectedControl: control,\r\n                masterfieldList: fieldList,\r\n                masterextractedColumnList: extractedColumnList,\r\n                masterprimaryKeyField: primaryKeyField,\r\n                masterComboColumnFiled: masterComboColumnFiled\r\n            }\r\n\r\n            this.props.getAddMasterCombo(inputParam);\r\n\r\n        }\r\n        else if (control.table.item.component === 'Dynamic') {\r\n            const inputParam = {\r\n                userinfo: this.props.Login.userInfo,\r\n                selectedControl: control\r\n            }\r\n            this.props.getDynamicMasterTempalte(inputParam);\r\n        }\r\n\r\n        // this.props.getMasterRecord(control);\r\n    }\r\n\r\n    openModal = () => {\r\n\r\n        const addId = this.props.Login.inputParam && this.state.controlMap.has(\"Add\")\r\n            && this.state.controlMap.get(\"Add\").ncontrolcode;\r\n\r\n        this.props.getDynamicMasterCombo(this.props.Login.masterData, this.props.Login.userInfo, addId,\r\n            this.state.designData, this.state.selectedRecord, this.state.childColumnList,\r\n            this.state.comboComponents, this.state.withoutCombocomponent,\r\n            false, true, new Map(), true, \"create\", this.props.Login.displayName);\r\n    }\r\n\r\n    fetchRecord = (fetchRecordParam) => {\r\n\r\n        this.props.getEditDynamicMasterCombo(fetchRecordParam,\r\n            this.state.designData, this.state.selectedRecord, this.state.childColumnList,\r\n            this.state.comboComponents, this.state.withoutCombocomponent)\r\n\r\n    }\r\n\r\n\r\n    onNumericBlur = (value, control) => {\r\n        let selectedRecord = this.state.selectedRecord\r\n        if (selectedRecord[control.label]) {\r\n            if (control.max) {\r\n                if (!(selectedRecord[control.label] < parseFloat(control.max))) {\r\n                    selectedRecord[control.label] = control.precision ? parseFloat(control.max) : parseInt(control.max)\r\n                }\r\n            }\r\n            if (control.min) {\r\n                if (!(selectedRecord[control.label] > parseFloat(control.min))) {\r\n                    selectedRecord[control.label] = control.precision ? parseFloat(control.min) : parseInt(control.min)\r\n                }\r\n            }\r\n\r\n\r\n        }\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    comboChild = (data, columnList, childColumnList, slice) => {\r\n        let retunObj = {}\r\n        // if (data.findIndex(x => x.label === columnList.label) !== -1) {\r\n        if (!childColumnList.hasOwnProperty(columnList.label)) {\r\n            if (childColumnList[columnList.label] === undefined) {\r\n                if (columnList.hasOwnProperty(\"child\")) {\r\n                    let childList = []\r\n                    columnList.child.map(childData => {\r\n                        const index = data.findIndex(x => x.label === childData.label)\r\n                        if (index !== -1) {\r\n                            childList.push(data[index])\r\n                            if (slice) {\r\n                                data = [...data.slice(0, index), ...data.slice(index + 1)]\r\n                            }\r\n                        }\r\n                    })\r\n                    childColumnList[columnList.label] = childList;\r\n                    if (childList.length > 0) {\r\n                        childList.map(y => {\r\n                            if (y.hasOwnProperty(\"child\")) {\r\n                                const val = this.comboChild(data, y, childColumnList, slice)\r\n                                retunObj[\"data\"] = val.data;\r\n                                retunObj[\"childColumnList\"] = val.childColumnList;\r\n                            } else {\r\n                                retunObj[\"data\"] = data;\r\n                                retunObj[\"childColumnList\"] = childColumnList;\r\n                            }\r\n                        })\r\n                    } else {\r\n                        retunObj[\"data\"] = data;\r\n                        retunObj[\"childColumnList\"] = childColumnList;\r\n                    }\r\n                } else {\r\n                    retunObj[\"data\"] = data;\r\n                    retunObj[\"childColumnList\"] = childColumnList;\r\n                }\r\n            } else {\r\n                retunObj[\"data\"] = data;\r\n                retunObj[\"childColumnList\"] = childColumnList;\r\n\r\n            }\r\n        } else {\r\n            retunObj[\"data\"] = data;\r\n            retunObj[\"childColumnList\"] = childColumnList;\r\n\r\n        }\r\n        return retunObj;\r\n    }\r\n\r\n    onComboChange = (comboData, control, customName) => {\r\n\r\n        let comboName = customName || control.label;\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if (comboData) {\r\n            comboData[\"item\"] = {\r\n                ...comboData[\"item\"], \"pkey\": control.valuemember, \"nquerybuildertablecode\": control.nquerybuildertablecode,\r\n                \"source\": control.source\r\n            };\r\n            selectedRecord[comboName] = comboData;\r\n        } else {\r\n            selectedRecord[comboName] = [];\r\n        }\r\n        if (control.child && control.child.length > 0) {\r\n            const childComboList = getSameRecordFromTwoArrays(this.state.comboComponents, control.child, \"label\")\r\n            let childColumnList = {};\r\n            childComboList.map(columnList => {\r\n                const val = this.comboChild(this.state.comboComponents, columnList, childColumnList, false);\r\n                childColumnList = val.childColumnList\r\n            })\r\n\r\n            const parentList = getSameRecordFromTwoArrays(this.state.withoutCombocomponent, control.child, \"label\")\r\n\r\n            const inputParem = {\r\n                child: control.child,\r\n                source: control.source,\r\n                primarykeyField: control.valuemember,\r\n                value: comboData.value,\r\n                item: comboData.item\r\n            }\r\n            this.props.getChildValues(inputParem,\r\n                this.props.Login.userInfo, selectedRecord, this.props.Login.comboData,\r\n                childComboList, childColumnList, this.state.withoutCombocomponent, [...childComboList, ...parentList])\r\n        } else {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: { selectedRecord }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n    }\r\n\r\n    onNumericInputChange = (value, name) => {\r\n        let selectedRecord = this.state.selectedRecord\r\n        selectedRecord[name] = value;\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    handleDateChange = (dateValue, dateName) => {\r\n        const { selectedRecord } = this.state;\r\n        selectedRecord[dateName] = dateValue;\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    onDrop = (value, type, oldVlaue) => {\r\n        const design = this.state.design;\r\n        let columns = design[0].children;\r\n        let designData = this.props.Login.ReactInputFields;\r\n        value = JSON.parse(value.fields);\r\n        value = { ...value, type: \"component\" }\r\n        let designDataIndex = designData.findIndex(item => item.label === value.label);\r\n        let firstIndex = columns[0] ? columns[0].children.findIndex(item => item.label === value.label) : -1;\r\n        let secondIndex = columns[1] ? columns[1].children.findIndex(item => item.label === value.label) : -1;\r\n\r\n        if (designDataIndex >= 0)\r\n            designData.splice(designDataIndex, 1);\r\n        if (firstIndex >= 0) {\r\n            if (type !== 1) {\r\n                columns[0].children.splice(firstIndex, 1);\r\n                // columns[0].splice(to, 0, columns[0].splice(from, 1)[0]);\r\n            } else {\r\n                if (oldVlaue) {\r\n                    oldVlaue = JSON.parse(oldVlaue);\r\n                    let from = columns[0].children.findIndex(item => item.label === value.label);\r\n                    let to = columns[0].children.findIndex(item => item.label === oldVlaue.label);\r\n                    columns[0].children.splice(to, 0, columns[0].children.splice(from, 1)[0]);\r\n                }\r\n            }\r\n\r\n        } else if (type === 1) {\r\n            if (columns[0]) {\r\n                columns[0].children.push(value);\r\n            } else {\r\n                columns[0] = {\r\n                    id: \"1\",\r\n                    type: \"column\",\r\n                    children: []\r\n                }\r\n\r\n                columns[0].children.push(value);\r\n            }\r\n        }\r\n        if (secondIndex >= 0) {\r\n            if (type !== 2) {\r\n                columns[1].splice(secondIndex, 1);\r\n            } else {\r\n                if (oldVlaue) {\r\n                    oldVlaue = JSON.parse(oldVlaue);\r\n                    let from = columns[1].children.findIndex(item => item.label === value.label);\r\n                    let to = columns[1].children.findIndex(item => item.label === oldVlaue.label);\r\n                    columns[1].children.splice(to, 0, columns[1].children.splice(from, 1)[0]);\r\n                }\r\n            }\r\n        } else if (type === 2) {\r\n            if (columns[1]) {\r\n                columns[1].children.push(value);\r\n            } else {\r\n                columns[1] = {\r\n                    id: \"2\",\r\n                    type: \"column\",\r\n                    children: []\r\n                }\r\n                columns[1].children.push(value);\r\n            }\r\n        }\r\n\r\n        // design.push(columns)\r\n        this.setState({ designData, design })\r\n    }\r\n\r\n    onDropFile = (attachedFiles, fieldName, maxSize) => {\r\n        let selectedRecord = this.state.selectedRecord || {};\r\n        selectedRecord[fieldName] = onDropAttachFileList(selectedRecord[fieldName], attachedFiles, maxSize)\r\n        this.setState({ selectedRecord, actionType: \"new\" });\r\n    }\r\n\r\n    deleteAttachment = (event, file, fieldName) => {\r\n        let selectedRecord = this.state.selectedRecord || {};\r\n        selectedRecord[fieldName] = deleteAttachmentDropZone(selectedRecord[fieldName], file)\r\n\r\n        this.setState({\r\n            selectedRecord, actionType: \"delete\" //fileToDelete:file.name \r\n        });\r\n    }\r\n\r\n    componentDidUpdate(previousProps) {\r\n\r\n        if (this.props.Login.masterData !== previousProps.Login.masterData) {\r\n            if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\r\n                const userRoleControlRights = [];\r\n\r\n                if (this.props.Login.userRoleControlRights) {\r\n                    this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item =>\r\n                        userRoleControlRights.push(item.ncontrolcode))\r\n                }\r\n                const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode)\r\n                this.extractedColumnList = [];\r\n                this.detailedColumnList = [];\r\n\r\n                if (this.props.Login.masterData && this.props.Login.masterData.DynamicMasterDesign &&\r\n                    this.props.Login.masterData.DynamicMasterDesign.screendesign) {\r\n                    this.props.Login.masterData.DynamicMasterDesign.screendesign.griditem.map(row => {\r\n                        // console.log(\"data:\", row);\r\n                        this.extractedColumnList.push({ \"idsName\": row[\"1\"][this.props.Login.userInfo.slanguagetypecode], \"dataField\": row[\"2\"] });\r\n                    })\r\n                    this.props.Login.masterData.DynamicMasterDesign.screendesign.gridmoreitem.map(row => {\r\n                        this.detailedColumnList.push({ \"idsName\": row[\"1\"][this.props.Login.userInfo.slanguagetypecode], \"dataField\": row[\"2\"] });\r\n                    })\r\n                }\r\n\r\n                let data = [];\r\n                const withoutCombocomponent = [];\r\n                const mandatoryFields = [];\r\n                const Layout = (this.props.Login.masterData.DynamicMasterDesign && this.props.Login.masterData.DynamicMasterDesign.slideoutdesign) || [];\r\n                Layout.map(row => {\r\n                    row.children.map(column => {\r\n                        column.children.map(component => {\r\n                            if (component.hasOwnProperty(\"children\")) {\r\n                                component.children.map(componentrow => {\r\n                                    if (componentrow.inputtype === \"combo\") {\r\n                                        data.push(componentrow)\r\n                                    } else {\r\n                                        withoutCombocomponent.push(componentrow)\r\n                                    }\r\n                                    if (componentrow.mandatory === true) {\r\n                                        if (componentrow.inputtype === \"email\") {\r\n                                            mandatoryFields.push({\r\n                                                \"mandatory\": true, \"idsName\": componentrow.label,\r\n                                                \"dataField\": componentrow.label,\r\n                                                \"alertPreFix\": this.props.intl.formatMessage({ id: \"IDS_VALID\" }),\r\n                                                \"validateFunction\": validateEmail,\r\n                                                \"mandatoryLabel\": \"IDS_ENTER\",\r\n                                                \"controlType\": \"textbox\"\r\n                                            })\r\n                                        }\r\n                                        else {\r\n                                            mandatoryFields.push({\r\n                                                \"mandatory\": true,\r\n                                                \"idsName\": componentrow.label,\r\n                                                \"dataField\": componentrow.label,\r\n                                                \"mandatoryLabel\": componentrow.inputtype === \"combo\" ?\r\n                                                    \"IDS_SELECT\" : \"IDS_ENTER\",\r\n                                                \"controlType\": componentrow.inputtype === \"combo\" ?\r\n                                                    \"selectbox\" : \"textbox\"\r\n                                            })\r\n                                        }\r\n                                    }\r\n                                })\r\n                            }\r\n                            else {\r\n                                component.inputtype === \"combo\" ?\r\n                                    data.push(component)\r\n                                    : withoutCombocomponent.push(component)\r\n\r\n                                if (component.mandatory === true) {\r\n                                    if (component.inputtype === \"email\") {\r\n                                        mandatoryFields.push({\r\n                                            \"mandatory\": true, \"idsName\": component.label,\r\n                                            \"dataField\": component.label,\r\n                                            \"alertPreFix\": this.props.intl.formatMessage({ id: \"IDS_VALID\" }),\r\n                                            \"validateFunction\": validateEmail,\r\n                                            \"mandatoryLabel\": \"IDS_ENTER\",\r\n                                            \"controlType\": \"textbox\"\r\n                                        })\r\n                                    }\r\n                                    else {\r\n                                        mandatoryFields.push({\r\n                                            \"mandatory\": true,\r\n                                            \"idsName\": component.label,\r\n                                            \"dataField\": component.label,\r\n                                            \"mandatoryLabel\": component.inputtype === \"combo\" ?\r\n                                                \"IDS_SELECT\" : \"IDS_ENTER\",\r\n                                            \"controlType\": component.inputtype === \"combo\" ?\r\n                                                \"selectbox\" : \"textbox\"\r\n                                        })\r\n                                    }\r\n                                }\r\n                            }\r\n                        })\r\n                    })\r\n                })\r\n                const comboComponents = data;\r\n                let childColumnList = {};\r\n                data.map(columnList => {\r\n                    const val = this.comboChild(data, columnList, childColumnList, true);\r\n                    data = val.data;\r\n                    childColumnList = val.childColumnList\r\n                })\r\n\r\n                const masterData = this.props.Login.masterData.DynamicMasterData ? sortData(this.props.Login.masterData.DynamicMasterData, \"descending\", \"ndynamicmastercode\") : [];\r\n\r\n                this.setState({\r\n                    withoutCombocomponent, comboComponents, childColumnList, designData: data, mandatoryFields,\r\n                    userRoleControlRights, controlMap, data: this.props.Login.masterData.DynamicMasterData || [],\r\n                    dataResult: process(masterData || [], this.state.dataState),\r\n                });\r\n            }\r\n            else {\r\n                let { dataState } = this.state;\r\n                if (this.props.Login.dataState === undefined) {\r\n                    dataState = { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 }\r\n                }\r\n\r\n                const masterData = this.props.Login.masterData.DynamicMasterData ? sortData(this.props.Login.masterData.DynamicMasterData, \"descending\", \"ndynamicmastercode\") : [];\r\n\r\n                this.setState({\r\n                    data: this.props.Login.masterData.DynamicMasterData || [], selectedRecord: this.props.Login.selectedRecord,\r\n                    dataResult: process(masterData || [], dataState),\r\n                    dataState//, comboComponents, withoutCombocomponent\r\n                });\r\n            }\r\n        }\r\n\r\n        if (this.props.Login.selectedMaster !== previousProps.Login.selectedMaster) {\r\n            this.setState({ selectedMaster: this.props.Login.selectedMaster });\r\n        }\r\n        if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\r\n            this.setState({ selectedRecord: this.props.Login.selectedRecord });\r\n        }\r\n    }\r\n\r\n    onInputOnChange = (event, value) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n\r\n        if (event.target.type === 'toggle') {\r\n            selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\r\n        } else if (event.target.type === 'numeric') {\r\n            if (/\\D/.test(event.target.value))\r\n                selectedRecord[event.target.name] = event.target.value;\r\n        } else if (event.target.type === 'checkbox') {\r\n            selectedRecord[event.target.name] = value;\r\n        } else if (event.target.type === 'radio') {\r\n            selectedRecord[event.target.name] = value\r\n        } else {\r\n            selectedRecord[event.target.name] = event.target.value;\r\n        }\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    //deleteRecord = (selectedRecord, operation, ncontrolCode) => {\r\n    deleteRecord = (deleteParam) => {\r\n        const inputParam = {\r\n            classUrl: \"dynamicmaster\",\r\n            methodUrl: \"DynamicMaster\",\r\n            displayName: this.props.Login.displayName,\r\n            inputData: {\r\n                [\"dynamicmaster\"]: { \"ndynamicmastercode\": deleteParam.selectedRecord.ndynamicmastercode },//.dataItem,\r\n                \"userinfo\": this.props.Login.userInfo\r\n            },\r\n            operation: \"delete\",\r\n            dataState: this.state.dataState\r\n        }\r\n\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, deleteParam.ncontrolCode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData: this.props.Login.masterData },\r\n                    openModal: true, screenName: this.props.Login.displayName,\r\n                    operation: \"delete\"\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\r\n        }\r\n    }\r\n\r\n    reloadData = () => {\r\n        const inputParam = {\r\n            inputData: { \"userinfo\": this.props.Login.userInfo },\r\n            classUrl: this.props.Login.inputParam.classUrl,\r\n            methodUrl: this.props.Login.inputParam.methodUrl,\r\n            userInfo: this.props.Login.userInfo,\r\n            displayName: this.props.Login.inputParam.displayName\r\n        };\r\n        this.props.callService(inputParam);\r\n    }\r\n\r\n    onSaveClick = (saveType, formRef) => {\r\n        //add / edit  \r\n\r\n        let inputData = [];\r\n        let dataState = undefined;\r\n        inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n        inputData[\"masterdateconstraints\"] = this.props.Login.masterData.DynamicMasterDesign.screendesign.masterdateconstraints;\r\n        inputData[\"masterdatefields\"] = this.props.Login.masterData.DynamicMasterDesign.screendesign.masterdatefields;\r\n        inputData[\"mastercombinationunique\"] = this.props.Login.masterData.DynamicMasterDesign.screendesign.mastercombinationunique;\r\n        let selectedId = null;\r\n        let operation = \"\";\r\n        let selectedRecord = this.state.selectedRecord;\r\n        if (this.props.Login.operation === \"update\") {    // edit\r\n            dataState = this.state.dataState\r\n            inputData[\"dynamicmaster\"] = { ndynamicmastercode: this.state.selectedRecord[\"ndynamicmastercode\"] };//this.state.selectedRecord;\r\n            inputData[\"dynamicmaster\"][\"jsondata\"] = {};\r\n            inputData[\"dynamicmaster\"][\"jsonuidata\"] = {};\r\n            selectedId = this.props.Login.selectedId;\r\n            operation = \"update\";\r\n        }\r\n        else {\r\n            //add                          \r\n            inputData[\"dynamicmaster\"] = { //\"nsitecode\": this.props.Login.userInfo.nmastersitecode, \r\n                nformcode: this.props.Login.userInfo.nformcode,\r\n                ndesigntemplatemappingcode: this.props.Login.masterData.DynamicMasterDesign.ndesigntemplatemappingcode,\r\n                jsondata: {}, jsonuidata: {}\r\n            };\r\n\r\n            operation = \"create\";\r\n\r\n        }\r\n\r\n        const dateList = [];\r\n        const defaulttimezone = this.props.Login.defaulttimezone;\r\n        const userInfo = this.props.Login.userInfo;\r\n\r\n        this.props.Login.masterData.DynamicMasterDesign &&\r\n            this.props.Login.masterData.DynamicMasterDesign.slideoutdesign.map(row => {\r\n                row.children.map(column => {\r\n                    column.children.map(component => {\r\n                        if (component.hasOwnProperty(\"children\")) {\r\n\r\n                            component.children.map(componentrow => {\r\n                                if (componentrow.inputtype === \"combo\") {\r\n                                    inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label] = selectedRecord[componentrow.label] ?\r\n                                        {\r\n                                            value: selectedRecord[componentrow.label].value,\r\n                                            label: selectedRecord[componentrow.label].label,\r\n                                            pkey: selectedRecord[componentrow.label].item.pkey,\r\n                                            nquerybuildertablecode: selectedRecord[componentrow.label].item.nquerybuildertablecode,\r\n                                            source: selectedRecord[componentrow.label].item.source\r\n                                        } : -1\r\n\r\n                                    inputData[\"dynamicmaster\"][\"jsonuidata\"][componentrow.label] = selectedRecord[componentrow.label] ? selectedRecord[componentrow.label].label : \"\"\r\n\r\n                                }\r\n                                else if (componentrow.inputtype === \"date\") {\r\n                                    if (componentrow.mandatory) {\r\n                                        inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label] = formatDate(selectedRecord[componentrow.label], false)\r\n\r\n                                        inputData[\"dynamicmaster\"][\"jsonuidata\"][componentrow.label] = inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label]\r\n                                        //inputData[\"dynamicmaster\"][\"jsonuidata\"][componentrow.label] = convertDateTimetoString(selectedRecord[componentrow.label], userInfo);\r\n                                    }\r\n                                    else {\r\n                                        inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label] = componentrow.loadcurrentdate ?\r\n                                            formatDate(selectedRecord[componentrow.label] || new Date(), false) :\r\n                                            selectedRecord[componentrow.label] ? formatDate(selectedRecord[componentrow.label], false)\r\n                                                : \"\";\r\n\r\n                                        inputData[\"dynamicmaster\"][\"jsonuidata\"][componentrow.label] = inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label];\r\n                                        //convertDateTimetoString(selectedRecord[componentrow.label], userInfo);\r\n                                    }\r\n                                    if (componentrow.timezone) {\r\n                                        inputData[\"dynamicmaster\"][\"jsondata\"][`tz${componentrow.label}`] = selectedRecord[`tz${componentrow.label}`] ?\r\n                                            { value: selectedRecord[`tz${componentrow.label}`].value, label: selectedRecord[`tz${componentrow.label}`].label } :\r\n                                            defaulttimezone ? defaulttimezone : -1\r\n\r\n                                        inputData[\"dynamicmaster\"][\"jsonuidata\"][`tz${componentrow.label}`] = inputData[\"dynamicmaster\"][\"jsondata\"][`tz${componentrow.label}`]\r\n                                    }\r\n                                    dateList.push(componentrow.label)\r\n                                }\r\n\r\n                                else {\r\n                                    inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label] = selectedRecord[componentrow.label] ?\r\n                                        selectedRecord[componentrow.label] : \"\"\r\n\r\n                                    inputData[\"dynamicmaster\"][\"jsonuidata\"][componentrow.label] = inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label]\r\n                                    // inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label]\r\n\r\n                                }\r\n                                return inputData[\"dynamicmaster\"];\r\n                            })\r\n                        }\r\n                        else {\r\n                            if (component.inputtype === \"combo\") {\r\n                                inputData[\"dynamicmaster\"][\"jsondata\"][component.label] = selectedRecord[component.label] ?\r\n                                    {\r\n                                        value: selectedRecord[component.label].value,\r\n                                        label: selectedRecord[component.label].label,\r\n                                        pkey: selectedRecord[component.label].item.pkey,\r\n                                        nquerybuildertablecode: selectedRecord[component.label].item.nquerybuildertablecode,\r\n                                        source: selectedRecord[component.label].item.source\r\n                                    } : -1\r\n\r\n                                inputData[\"dynamicmaster\"][\"jsonuidata\"][component.label] = inputData[\"dynamicmaster\"][\"jsondata\"][component.label].label;\r\n                                //selectedRecord[component.label] ? selectedRecord[component.label].label : \"\"\r\n                            }\r\n                            else if (component.inputtype === \"date\") {\r\n                                if (component.mandatory) {\r\n                                    inputData[\"dynamicmaster\"][\"jsondata\"][component.label] = formatDate(selectedRecord[component.label], false);\r\n                                    // convertDateTimetoString(selectedRecord[component.label] ?\r\n                                    // selectedRecord[component.label] : new Date(), userInfo);\r\n\r\n                                    inputData[\"dynamicmaster\"][\"jsonuidata\"][component.label] = inputData[\"dynamicmaster\"][\"jsondata\"][component.label]\r\n                                    //convertDateTimetoString(selectedRecord[component.label], userInfo);\r\n\r\n                                } else {\r\n                                    inputData[\"dynamicmaster\"][\"jsondata\"][component.label] = component.loadcurrentdate ?\r\n                                        //convertDateTimetoString(selectedRecord[component.label] ?                                      \r\n                                        //    selectedRecord[component.label] : new Date(), userInfo) :\r\n                                        formatDate(selectedRecord[component.label] || new Date(), false) :\r\n                                        selectedRecord[component.label] ?\r\n                                            // convertDateTimetoString(selectedRecord[component.label] ?\r\n                                            //   selectedRecord[component.label] : new Date(), userInfo) : \"\";\r\n                                            formatDate(selectedRecord[component.label], false) : \"\";\r\n                                    inputData[\"dynamicmaster\"][\"jsonuidata\"][component.label] = inputData[\"dynamicmaster\"][\"jsondata\"][component.label]\r\n                                    //convertDateTimetoString(selectedRecord[component.label], userInfo)\r\n\r\n                                }\r\n                                if (component.timezone) {\r\n                                    inputData[\"dynamicmaster\"][\"jsondata\"][`tz${component.label}`] = selectedRecord[`tz${component.label}`] ?\r\n                                        { value: selectedRecord[`tz${component.label}`].value, label: selectedRecord[`tz${component.label}`].label } :\r\n                                        defaulttimezone ? defaulttimezone : -1\r\n\r\n                                    inputData[\"dynamicmaster\"][\"jsonuidata\"][`tz${component.label}`] = inputData[\"dynamicmaster\"][\"jsondata\"][`tz${component.label}`]\r\n                                }\r\n                                dateList.push(component.label)\r\n                            }\r\n                            else {\r\n                                inputData[\"dynamicmaster\"][\"jsondata\"][component.label] = selectedRecord[component.label] ?\r\n                                    selectedRecord[component.label] : \"\"\r\n\r\n                                inputData[\"dynamicmaster\"][\"jsonuidata\"][component.label] = inputData[\"dynamicmaster\"][\"jsondata\"][component.label]\r\n                            }\r\n                        }\r\n                        return inputData[\"dynamicmaster\"];\r\n                    }\r\n                    )\r\n                    return inputData[\"dynamicmaster\"];\r\n                })\r\n                return inputData[\"dynamicmaster\"];\r\n            })\r\n\r\n\r\n        inputData[\"dynamicmaster\"][\"jsonstring\"] = JSON.stringify(inputData[\"dynamicmaster\"][\"jsondata\"]);\r\n        inputData[\"dynamicmaster\"][\"jsonuistring\"] = JSON.stringify(inputData[\"dynamicmaster\"][\"jsonuidata\"]);\r\n        inputData[\"masterdatelist\"] = dateList;\r\n\r\n        const inputParam = {\r\n            classUrl: \"dynamicmaster\",\r\n            methodUrl: \"DynamicMaster\",\r\n            displayName: this.props.Login.displayName,\r\n            inputData: inputData, operation: operation,\r\n            saveType, formRef, selectedId, dataState\r\n\r\n        }\r\n        const esignNeeded = showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode);\r\n        if (esignNeeded) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData: this.props.Login.masterData },\r\n                    openModal: true, screenName: this.props.Login.displayName,\r\n                    operation: \"create\"\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\r\n        }\r\n    }\r\n\r\n    validateEsign = () => {\r\n        const inputParam = {\r\n            inputData: {\r\n                \"userinfo\": {\r\n                    ...this.props.Login.userInfo,\r\n                    sreason: this.state.selectedRecord[\"esigncomments\"],\r\n                    nreasoncode: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].value,\r\n                    spredefinedreason: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].label,\r\n\r\n                },\r\n                password: this.state.selectedRecord[\"esignpassword\"]\r\n            },\r\n            screenData: this.props.Login.screenData\r\n        }\r\n        this.props.validateEsignCredential(inputParam, \"openModal\");\r\n    }\r\n\r\n}\r\nexport default connect(mapStateToProps, {\r\n    callService, crudMaster, updateStore, validateEsignCredential,\r\n    getChildValues, getEditDynamicMasterCombo,//fetchRecord,\r\n    getDynamicMasterCombo,\r\n    addMasterRecord, getAddMasterCombo, getDynamicMasterTempalte,\r\n    getChildComboMaster\r\n})(injectIntl(DynamicMaster));\r\n"]},"metadata":{},"sourceType":"module"}