{"ast":null,"code":"var _jsxFileName = \"D:\\\\Postgres_workingFolder\\\\QuaLISWeb\\\\src\\\\pages\\\\dynamicpreregdesign\\\\registrationsubtype\\\\RegistrationSubType.jsx\";\nimport { faPencilAlt, faPlus, faTrashAlt } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport React from 'react';\nimport { Card, Col, FormGroup, FormLabel, Nav, Row } from 'react-bootstrap';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { toast } from 'react-toastify';\nimport { Affix } from 'rsuite';\nimport { updateStore, crudMaster, filterColumnData, selectRegistrationSubType, getVersionById, getRegistrationSubTypeMaster, getRegSubTypeDetails, getSeqNoFormats, getEditRegSubType, getRegistrationTypeBySampleType, getRegistrationSubTypeOnReload } from '../../../actions';\nimport { DEFAULT_RETURN } from '../../../actions/LoginTypes';\nimport { ContentPanel, ReadOnlyText } from '../../../components/App.styles';\nimport BreadcrumbComponent from '../../../components/Breadcrumb.Component';\nimport { constructOptionList, getControlMap, showEsign } from '../../../components/CommonScript';\nimport ConfirmMessage from '../../../components/confirm-alert/confirm-message.component';\nimport CustomAccordion from '../../../components/custom-accordion/custom-accordion.component';\nimport { transactionStatus } from '../../../components/Enumeration';\nimport FormInput from '../../../components/form-input/form-input.component';\nimport FormSelectSearch from '../../../components/form-select-search/form-select-search.component';\nimport FormTextarea from '../../../components/form-textarea/form-textarea.component';\nimport ListMaster from '../../../components/list-master/list-master.component';\nimport SlideOutModal from '../../../components/slide-out-modal/SlideOutModal';\nimport Esign from '../../audittrail/Esign';\nimport AddSeqNoFormatPopup from './AddSeqNoFormatPopup';\nimport RegistrationSubTypeAccordion from './RegistrationSubTypeAccordion';\n\nconst mapStateToProps = state => {\n  return {\n    Login: state.Login\n  };\n};\n\nclass RegistrationSubType extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.registrationSubTypeAccordion = verisonList => {\n      const actionParam = {\n        // nregsubtypecode: this.props.Login.masterData.selectedRegistrationSubType.nregsubtypecode,\n        // nregtypecode: this.props.Login.masterData.selectedRegistrationSubType.nregtypecode,\n        nregsubtypeversioncode: this.props.Login.masterData.selectedVersion ? this.props.Login.masterData.selectedVersion.nregsubtypeversioncode : -1,\n        napprovalconfigcode: this.props.Login.masterData.selectedVersion ? this.props.Login.masterData.selectedVersion.napprovalconfigcode : -1\n      };\n      const accordionMap = new Map();\n      verisonList.map(version => accordionMap.set(version.nregsubtypeversioncode, /*#__PURE__*/React.createElement(RegistrationSubTypeAccordion, {\n        version: version,\n        editVersionId: this.state.editVersionId,\n        deleteVersionId: this.state.deleteVersionId,\n        approveVersionId: this.state.approveVersionId,\n        userRoleControlRights: this.state.userRoleControlRights,\n        actionParam: actionParam,\n        getVersionById: this.getVersionById,\n        approvrVersion: this.doAction,\n        ConfirmDelete: this.ConfirmDelete // approvalConfig={this.props.Login.masterData.ApprovalConfig}\n        ,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 442,\n          columnNumber: 62\n        }\n      })));\n      return accordionMap;\n    };\n\n    this.filterComboChange = (comboData, name) => {\n      if (name === 'nsampletypecode') this.props.getRegistrationTypeBySampleType(comboData, this.props.Login.masterData, this.props.Login.userInfo, this.state.breadCrumbRegType);else {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            showFilter: false,\n            selectedRegType: comboData,\n            reloadData: false\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } // this.setState({ selectedRegType: comboData })\n    };\n\n    this.closeFilter = () => {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          showFilter: false\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onFilterSubmit = () => {\n      if (this.state.selectedSampleType) {\n        this.reloadData(this.state.selectedSampleType, this.state.selectedRegType);\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SAMPLETYPENOTAVALIABLE\"\n        }));\n      }\n    };\n\n    this.reloadData = (selectedSampleType, selectedRegType) => {\n      this.searchRef.current.value = \"\";\n\n      if (selectedSampleType !== undefined) {\n        this.props.getRegistrationSubTypeMaster(selectedSampleType, selectedRegType, this.props.Login.masterData, this.props.Login.userInfo);\n      } else {\n        this.props.getRegistrationSubTypeOnReload(this.props.Login.userInfo);\n      }\n    };\n\n    this.ConfirmDelete = (deleteId, methodURL, selectedRecord) => {\n      this.confirmMessage.confirm(\"deleteMessage\", this.props.intl.formatMessage({\n        id: \"IDS_DELETE\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_DEFAULTCONFIRMMSG\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_OK\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_CANCEL\"\n      }), () => this.doAction('delete', deleteId, methodURL, selectedRecord));\n    };\n\n    this.openModal = screenName => {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          openModal: true,\n          operation: \"create\",\n          screenName\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.closeModal = () => {\n      let loadEsign = this.props.Login.loadEsign;\n      let openModal = this.props.Login.openModal;\n      let selectedRecord = this.props.Login.selectedRecord;\n\n      if (this.props.Login.loadEsign) {\n        if (this.props.Login.operation === \"delete\") {\n          loadEsign = false;\n          openModal = false;\n          selectedRecord = {};\n        } else {\n          loadEsign = false;\n        }\n      } else {\n        openModal = false;\n        selectedRecord = {};\n      }\n\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          openModal,\n          loadEsign,\n          selectedRecord,\n          selectedId: null,\n          selectedFieldRecord: {},\n          showConfirmAlert: false\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onSaveClick = (saveType, formRef) => {\n      if (this.props.Login.screenName === 'RegistrationSubType') {\n        this.saveRegSubType(saveType, formRef);\n      } else {\n        this.saveVersion(saveType, formRef);\n      }\n    };\n\n    this.saveRegSubType = (saveType, formRef) => {\n      //add \n      let registrationSubType = {\n        nregtypecode: this.state.breadCrumbData[1].item.value,\n        sregsubtypename: this.state.selectedRecord.sregsubtypename,\n        sdescription: this.state.selectedRecord.sdescription\n      };\n      const postParam = {\n        inputListName: \"RegistrationSubType\",\n        selectedObject: \"selectedRegistrationSubType\",\n        primaryKeyField: \"nregtypecode\",\n        fetchUrl: \"registrationsubtype/getRegistrationSubTypeMaster\",\n        fecthInputObject: {\n          userinfo: this.props.Login.userInfo,\n          nregtypecode: this.state.breadCrumbData[1] ? this.state.breadCrumbData[1].item.value : -1\n        },\n        masterData: this.props.Login.masterData\n      };\n      let selectedId = null;\n\n      if (this.props.Login.operation === \"update\") {\n        // edit\n        selectedId = this.state.selectedRecord.nregsubtypecode;\n        registrationSubType = { ...registrationSubType,\n          nregsubtypecode: selectedId\n        };\n      }\n\n      const inputParam = {\n        classUrl: this.props.Login.inputParam.classUrl,\n        methodUrl: 'RegistrationSubType',\n        postParam,\n        searchRef: this.searchRef,\n        displayName: this.props.Login.inputParam.displayName,\n        inputData: {\n          userinfo: this.props.Login.userInfo,\n          registrationsubtype: registrationSubType\n        },\n        operation: this.props.Login.operation,\n        saveType,\n        formRef\n      };\n      const masterData = this.props.Login.masterData;\n      const esignNeeded = showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolcode);\n\n      if (esignNeeded) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData\n            },\n            saveType,\n            operation: this.props.Login.operation,\n            openModal: true,\n            screenName: this.props.Login.inputParam.displayName\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, masterData, \"openModal\");\n      }\n    };\n\n    this.saveVersion = (saveType, formRef) => {\n      let version = {\n        napprovalconfigcode: this.props.Login.masterData.selectedRegistrationSubType.napprovalconfigcode,\n        jsondata: { ...this.state.selectedRecord,\n          // nneedscheduler:false,\n          sversiondesc: '-',\n          nversionno: -1\n        },\n        nperiodcode: this.state.selectedRecord.nperiodcode ? this.state.selectedRecord.nperiodcode.value : 4,\n        ntransactionstatus: transactionStatus.DRAFT,\n        nsitecode: this.props.Login.userInfo.nmastersitecode,\n        nstatus: transactionStatus.ACTIVE\n      };\n      let selectedId = null;\n      let operation = 'create';\n\n      if (this.props.Login.operation === \"update\") {\n        // edit\n        operation = 'update';\n        selectedId = this.state.selectedRecord.nregsubtypeversioncode;\n        version = { ...version,\n          nregsubtypeversioncode: selectedId\n        };\n      }\n\n      const postParam = {\n        inputListName: \"RegistrationSubType\",\n        selectedObject: \"selectedRegistrationSubType\",\n        primaryKeyField: \"nregtypecode\",\n        fetchUrl: \"registrationsubtype/getRegistrationSubTypeMaster\",\n        fecthInputObject: {\n          userinfo: this.props.Login.userInfo,\n          nregtypecode: this.state.breadCrumbData[1] ? this.state.breadCrumbData[1].item.value : -1\n        },\n        masterData: this.props.Login.masterData\n      };\n      const inputParam = {\n        classUrl: this.props.Login.inputParam.classUrl,\n        methodUrl: 'Version',\n        postParam,\n        searchRef: this.searchRef,\n        displayName: this.props.Login.inputParam.displayName,\n        inputData: {\n          userinfo: this.props.Login.userInfo,\n          version: version\n        },\n        operation,\n        saveType,\n        formRef\n      };\n      const masterData = this.props.Login.masterData;\n      const esignNeeded = showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolcode);\n\n      if (esignNeeded) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData\n            },\n            saveType,\n            operation,\n            openModal: true,\n            screenName: this.props.Login.inputParam.displayName\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, masterData, \"openModal\");\n      }\n    };\n\n    this.getVersionById = ncontrolcode => {\n      this.props.getVersionById(this.props.Login.masterData.selectedVersion.nregsubtypeversioncode, this.props.Login.userInfo, ncontrolcode);\n    };\n\n    this.doAction = (operation, controlCode, methodURL, selectedRecord) => {\n      const postParam = {\n        inputListName: \"RegistrationSubType\",\n        selectedObject: \"selectedRegistrationSubType\",\n        primaryKeyField: \"nregtypecode\",\n        fetchUrl: \"registrationsubtype/getRegistrationSubTypeMaster\",\n        fecthInputObject: {\n          userinfo: this.props.Login.userInfo,\n          nregtypecode: this.state.breadCrumbData[1] ? this.state.breadCrumbData[1].item.value : -1\n        },\n        masterData: this.props.Login.masterData\n      };\n      const inputParam = {\n        classUrl: this.props.Login.inputParam.classUrl,\n        methodUrl: methodURL,\n        postParam,\n        searchRef: this.searchRef,\n        inputData: {\n          [methodURL.toLowerCase()]: selectedRecord,\n          \"userinfo\": this.props.Login.userInfo\n        },\n        operation,\n        displayName: this.props.Login.inputParam.displayName\n      };\n      const esignNeeded = showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, controlCode);\n\n      if (esignNeeded) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData: this.props.Login.masterData\n            },\n            openModal: true,\n            screenName: this.props.intl.formatMessage({\n              id: this.props.Login.inputParam.displayName\n            }),\n            operation\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\n      }\n    };\n\n    this.onInputOnChange = event => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (event.target.type === 'checkbox') {\n        selectedRecord[event.target.name] = event.target.checked;\n      } else {\n        selectedRecord[event.target.name] = event.target.value;\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onNumericInputChange = (value, name) => {\n      let selectedRecord = this.state.selectedRecord;\n\n      if (value === 0 || value === 0.0) {\n        selectedRecord[name] = \"\";\n        this.setState({\n          selectedRecord\n        });\n      } else {\n        if (name === 'seqnolength') {\n          let str = '{9999}';\n          str = str.substring(1, str.length - 2);\n          str = str.padStart(value, 9);\n          selectedRecord.sseqno = '{' + str + '}';\n        }\n\n        selectedRecord[name] = value;\n        this.setState({\n          selectedRecord\n        });\n      }\n    };\n\n    this.onComboChange = (comboData, name) => {\n      this.setState({\n        selectedRecord: { ...this.state.selectedRecord,\n          [name]: comboData\n        }\n      });\n    };\n\n    this.onClickBackspace = () => {\n      let {\n        selectedRecord\n      } = this.state;\n      let formatArray = selectedRecord.formatArray || [];\n      formatArray.pop();\n      let formatString = '';\n      formatArray.map(comp => formatString += comp);\n      selectedRecord.formatArray = formatArray;\n      selectedRecord.ssampleformat = formatString;\n      selectedRecord.exampleformat = this.replaceFormat(formatString);\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onClickClear = () => {\n      let {\n        selectedRecord\n      } = this.state;\n      selectedRecord.formatArray = [];\n      selectedRecord.ssampleformat = \"\";\n      selectedRecord.exampleformat = \"\";\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.replaceFormat = formatString => {\n      const month = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\n      const date = new Date();\n      let replacedString = formatString;\n      let seqno = \"1\";\n\n      while (replacedString.includes('}')) {\n        let comp = replacedString.substring(replacedString.indexOf('{'), replacedString.indexOf('}') + 1);\n\n        switch (comp) {\n          case '{yyyy}':\n            replacedString = replacedString.replace('{yyyy}', date.getFullYear());\n            break;\n\n          case '{yy}':\n            replacedString = replacedString.replace('{yy}', date.getFullYear().toString().substring(2, 4));\n            break;\n\n          case '{MM}':\n            replacedString = replacedString.replace('{MM}', date.getMonth() + 1);\n            break;\n\n          case '{MMM}':\n            replacedString = replacedString.replace('{MMM}', month[date.getMonth()]);\n            break;\n\n          case '{DD}':\n            replacedString = replacedString.replace('{DD}', date.getDate());\n            break;\n\n          case this.state.selectedRecord.sseqno || '{9999}':\n            seqno = seqno.padStart(this.state.selectedRecord.seqnolength || 4, \"0\");\n            replacedString = replacedString.replace(this.state.selectedRecord.sseqno || '{9999}', seqno);\n            break;\n\n          default:\n            if (comp.includes('9')) {\n              seqno = seqno.padStart(comp.length - 2, \"0\");\n              replacedString = replacedString.replace(comp, seqno);\n            }\n\n            break;\n        }\n      }\n\n      return replacedString;\n    };\n\n    this.searchRef = React.createRef();\n    this.confirmMessage = new ConfirmMessage();\n    this.state = {\n      userRoleControlRights: [],\n      controlMap: new Map(),\n      addVersionId: -1,\n      editVersionId: -1,\n      deleteVersionId: -1,\n      approveVersionId: -1,\n      addRegistrationSubTypeId: -1,\n      editRegistrationSubTypeId: -1,\n      deleteRegistrationSubTypeId: -1,\n      selectedRecord: {},\n      sampleTypeOptions: [],\n      selectedSampleType: {},\n      breadCrumbSampleType: {},\n      selectedRegType: {},\n      breadCrumbRegType: {},\n      breadCrumbData: [],\n      design: [],\n      comboComponents: [],\n      withoutCombocomponent: []\n    };\n    this.regSubTypeMandatoryFields = [{\n      \"idsName\": \"IDS_REGISTRATIONSUBTYPE\",\n      \"dataField\": \"sregsubtypename\",\n      \"mandatoryLabel\": \"IDS_ENTER\"\n    }];\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\n      toast.warn(props.intl.formatMessage({\n        id: props.Login.masterStatus\n      }));\n      props.Login.masterStatus = \"\";\n    }\n\n    if (props.Login.error !== \"\" && props.Login.error !== state.error) {\n      toast.error(props.Login.error);\n      props.Login.error = \"\";\n    }\n\n    return null;\n  }\n\n  render() {\n    const filterParam = {\n      inputListName: \"RegistrationSubType\",\n      selectedObject: \"selectedRegistrationSubType\",\n      primaryKeyField: \"nregtypecode\",\n      fetchUrl: \"registrationsubtype/getRegistrationSubTypeMaster\",\n      fecthInputObject: {\n        userinfo: this.props.Login.userInfo,\n        nregtypecode: this.state.breadCrumbData[1] ? this.state.breadCrumbData[1].item.value : -1\n      },\n      masterData: this.props.Login.masterData,\n      unchangeList: [\"realSampleType\", \"SampleTypes\", \"realRegtype\", \"RegistrationTypes\"],\n      searchFieldList: [\"sregsubtypename\", \"sdescription\"]\n    };\n    this.versionMandatoryFields = [{\n      \"idsName\": \"IDS_FORMAT\",\n      \"dataField\": \"ssampleformat\",\n      \"mandatoryLabel\": \"IDS_SELECT\"\n    }];\n    const deleteParam = this.props.Login.masterData.selectedRegistrationSubType ? {\n      nregsubtypecode: this.props.Login.masterData.selectedRegistrationSubType.nregsubtypecode,\n      nregtypecode: this.props.Login.masterData.selectedRegistrationSubType.nregtypecode\n    } : {};\n\n    if (this.state.selectedRecord.nisnewformat) {\n      this.versionMandatoryFields.push({\n        \"idsName\": \"IDS_RESETDURATION\",\n        \"dataField\": \"nresetduration\",\n        \"mandatoryLabel\": \"IDS_ENTER\"\n      });\n      this.versionMandatoryFields.push({\n        \"idsName\": \"IDS_PERIOD\",\n        \"dataField\": \"nperiodcode\",\n        \"mandatoryLabel\": \"IDS_SELECT\"\n      });\n    }\n\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"client-listing-wrap mtop-fixed-breadcrumb fixed_breadcrumd\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 17\n      }\n    }, this.state.breadCrumbData.length > 0 ? /*#__PURE__*/React.createElement(Affix, {\n      top: 53,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(BreadcrumbComponent, {\n      breadCrumbItem: this.state.breadCrumbData,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 29\n      }\n    })) : \"\", /*#__PURE__*/React.createElement(Row, {\n      noGutters: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 4,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(ListMaster, {\n      filterColumnData: this.props.filterColumnData,\n      screenName: \"RegistrationSubType\",\n      masterList: this.props.Login.masterData.searchedData || this.props.Login.masterData.RegistrationSubType || [],\n      masterData: this.props.Login.masterData,\n      userInfo: this.props.Login.userInfo,\n      getMasterDetail: regType => this.props.selectRegistrationSubType(regType, this.props.Login.masterData, this.props.Login.userInfo),\n      selectedMaster: this.props.Login.masterData.selectedRegistrationSubType,\n      primaryKeyField: \"nregsubtypecode\",\n      mainField: \"sregsubtypename\" // firstField=\"stransdisplaystatus\"\n      // secondField=\"stransdisplaystatus\"\n      ,\n      userRoleControlRights: this.state.userRoleControlRights,\n      addId: this.state.addRegistrationSubTypeId,\n      filterParam: filterParam,\n      hidePaging: false,\n      searchRef: this.searchRef,\n      reloadData: this.reloadData,\n      openModal: () => this.openModal(\"RegistrationSubType\"),\n      openFilter: this.openFilter,\n      closeFilter: this.closeFilter,\n      onFilterSubmit: this.onFilterSubmit,\n      showFilterIcon: true,\n      showFilter: this.props.Login.showFilter,\n      filterComponent: [{\n        \"IDS_SAMPLETYPEFILTER\": /*#__PURE__*/React.createElement(Row, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 137,\n            columnNumber: 45\n          }\n        }, /*#__PURE__*/React.createElement(Col, {\n          md: 12,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 138,\n            columnNumber: 49\n          }\n        }, /*#__PURE__*/React.createElement(FormSelectSearch, {\n          name: \"nsampletypecode\",\n          formLabel: this.props.intl.formatMessage({\n            id: \"IDS_SAMPLETYPE\"\n          }),\n          isSearchable: false,\n          placeholder: \"Please Select...\",\n          options: this.state.sampleTypeOptions,\n          value: this.state.selectedSampleType ? this.state.selectedSampleType : \"\",\n          onChange: value => this.filterComboChange(value, 'nsampletypecode'),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 139,\n            columnNumber: 53\n          }\n        }), /*#__PURE__*/React.createElement(FormSelectSearch, {\n          name: \"nregtypecode\",\n          formLabel: this.props.intl.formatMessage({\n            id: \"IDS_REGTYPE\"\n          }),\n          isSearchable: false,\n          placeholder: \"Please Select...\",\n          options: this.state.regTypeOptions,\n          value: this.state.selectedRegType || \"\",\n          onChange: value => this.filterComboChange(value, 'nregtypecode'),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 148,\n            columnNumber: 53\n          }\n        })))\n      }],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 29\n      }\n    })), /*#__PURE__*/React.createElement(Col, {\n      md: \"8\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 25\n      }\n    }, this.props.Login.masterData.selectedRegistrationSubType ? /*#__PURE__*/React.createElement(ContentPanel, {\n      className: \"panel-main-content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      className: \"border-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(Card.Header, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(Card.Title, {\n      className: \"product-title-main\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 45\n      }\n    }, this.props.Login.masterData.selectedRegistrationSubType.sregsubtypename), /*#__PURE__*/React.createElement(Card.Subtitle, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"d-flex product-category\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      className: \"product-title-sub flex-grow-1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 53\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"d-inline\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(Nav.Link, {\n      name: \"editInstrument\",\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_EDIT\"\n      }),\n      \"data-for\": \"tooltip_list_wrap\",\n      hidden: this.state.userRoleControlRights.indexOf(this.state.editRegistrationSubTypeId) === -1,\n      className: \"btn btn-circle outline-grey mr-2\",\n      onClick: e => this.props.getEditRegSubType(this.props.Login.masterData.selectedRegistrationSubType.nregsubtypecode, this.props.Login.userInfo, this.state.editRegistrationSubTypeId),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faPencilAlt,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 61\n      }\n    })), /*#__PURE__*/React.createElement(Nav.Link, {\n      name: \"deleteInstrument\",\n      className: \"btn btn-circle outline-grey mr-2 action-icons-wrap\",\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_DELETE\"\n      }),\n      \"data-for\": \"tooltip_list_wrap\",\n      hidden: this.state.userRoleControlRights.indexOf(this.state.deleteRegistrationSubTypeId) === -1,\n      onClick: () => this.ConfirmDelete(this.state.deleteRegistrationSubTypeId, 'RegistrationSubType', deleteParam),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faTrashAlt,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 61\n      }\n    })))))), /*#__PURE__*/React.createElement(Card.Body, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(FormLabel, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_DESCRIPTION\",\n      message: \"Description\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 68\n      }\n    })), /*#__PURE__*/React.createElement(ReadOnlyText, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 57\n      }\n    }, this.props.Login.masterData.selectedRegistrationSubType.sdescription || '-')))), /*#__PURE__*/React.createElement(Row, {\n      noGutters: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"d-flex justify-content-end\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(Nav.Link, {\n      className: \"add-txt-btn\",\n      hidden: this.state.userRoleControlRights.indexOf(this.state.addVersionId) === -1,\n      onClick: () => this.props.getSeqNoFormats({\n        userInfo: this.props.Login.userInfo,\n        ncontrolcode: this.state.addVersionId\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faPlus,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 61\n      }\n    }), \" \", /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_VERSION\",\n      defaultMessage: \"Version\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 61\n      }\n    }))))), /*#__PURE__*/React.createElement(Row, {\n      noGutters: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 49\n      }\n    }, this.props.Login.masterData.versions && this.props.Login.masterData.versions.length > 0 ? /*#__PURE__*/React.createElement(CustomAccordion, {\n      key: \"FormatVersion\",\n      titlePrefix: this.props.intl.formatMessage({\n        id: \"IDS_VERSION\"\n      }) + \" : \",\n      isJSONdata: true,\n      jsonFieldName: 'jsondata',\n      accordionTitle: 'sversiondesc',\n      accordionComponent: this.registrationSubTypeAccordion(this.props.Login.masterData.versions),\n      inputParam: {\n        masterData: this.props.Login.masterData,\n        userInfo: this.props.Login.userInfo\n      },\n      accordionClick: this.props.getRegSubTypeDetails,\n      accordionPrimaryKey: \"nregsubtypeversioncode\",\n      accordionObjectName: \"version\",\n      selectedKey: this.props.Login.masterData.selectedVersion.nregsubtypeversioncode,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 57\n      }\n    }) : \"\"))))) : \"\"))), this.props.Login.openModal ? /*#__PURE__*/React.createElement(SlideOutModal, {\n      size: \"lg\",\n      onSaveClick: this.onSaveClick,\n      operation: this.props.Login.operation,\n      screenName: this.props.Login.screenName,\n      closeModal: this.closeModal,\n      show: this.props.Login.openModal,\n      inputParam: this.props.Login.inputParam,\n      esign: this.props.Login.loadEsign,\n      validateEsign: this.validateEsign,\n      mandatoryFields: this.props.Login.screenName === 'RegistrationSubType' ? this.regSubTypeMandatoryFields : this.versionMandatoryFields,\n      selectedRecord: this.state.selectedRecord || {},\n      addComponent: this.props.Login.loadEsign ? /*#__PURE__*/React.createElement(Esign, {\n        operation: this.props.Login.operation,\n        onInputOnChange: event => this.onInputOnChange(event),\n        inputParam: this.props.Login.inputParam,\n        selectedRecord: this.state.selectedRecord || {},\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 261,\n          columnNumber: 29\n        }\n      }) : this.props.Login.screenName === 'RegistrationSubType' ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(FormInput, {\n        name: \"sregsubtypename\",\n        label: this.props.intl.formatMessage({\n          id: \"IDS_REGISTRATIONSUBTYPE\"\n        }),\n        type: \"text\",\n        value: this.state.selectedRecord.sregsubtypename || \"\",\n        isMandatory: true,\n        required: true,\n        maxLength: 100,\n        onChange: event => this.onInputOnChange(event),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 270,\n          columnNumber: 37\n        }\n      }), /*#__PURE__*/React.createElement(FormTextarea, {\n        name: \"sdescription\",\n        label: this.props.intl.formatMessage({\n          id: \"IDS_DESCRIPTION\"\n        }),\n        type: \"text\",\n        value: this.state.selectedRecord.sdescription || \"\",\n        isMandatory: false,\n        required: true,\n        maxLength: 255,\n        onChange: event => this.onInputOnChange(event),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 280,\n          columnNumber: 37\n        }\n      })) : /*#__PURE__*/React.createElement(AddSeqNoFormatPopup, {\n        selectedRecord: this.state.selectedRecord,\n        existingFormats: this.props.Login.existingFormats,\n        periodList: this.props.Login.periodList,\n        onInputOnChange: this.onInputOnChange,\n        onNumericInputChange: this.onNumericInputChange,\n        onComboChange: this.onComboChange,\n        onDrop: this.onDrop.bind(this),\n        onClickBackspace: this.onClickBackspace,\n        onClickClear: this.onClickClear,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 292,\n          columnNumber: 33\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 21\n      }\n    }) : \"\");\n  }\n\n  componentDidUpdate(previousProps) {\n    let updateState = false;\n    let {\n      userRoleControlRights,\n      controlMap,\n      addVersionId,\n      editVersionId,\n      deleteVersionId,\n      approveVersionId,\n      addRegistrationSubTypeId,\n      editRegistrationSubTypeId,\n      deleteRegistrationSubTypeId,\n      breadCrumbSampleType,\n      breadCrumbRegType,\n      sampleTypeOptions,\n      regTypeOptions,\n      breadCrumbData,\n      selectedSampleType,\n      selectedRegType,\n      selectedRecord,\n      comboComponents,\n      withoutCombocomponent\n    } = this.state;\n\n    if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\n      userRoleControlRights = [];\n\n      if (this.props.Login.userRoleControlRights) {\n        this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item => userRoleControlRights.push(item.ncontrolcode));\n      }\n\n      controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode);\n      updateState = true;\n      addVersionId = controlMap.has(\"AddSeqNoFormatVersion\") && controlMap.get(\"AddSeqNoFormatVersion\").ncontrolcode;\n      editVersionId = controlMap.has(\"EditSeqNoFormatVersion\") && controlMap.get(\"EditSeqNoFormatVersion\").ncontrolcode;\n      deleteVersionId = controlMap.has(\"DeleteSeqNoFormatVersion\") && controlMap.get(\"DeleteSeqNoFormatVersion\").ncontrolcode;\n      approveVersionId = controlMap.has(\"ApproveSeqNoFormatVersion\") && controlMap.get(\"ApproveSeqNoFormatVersion\").ncontrolcode;\n      addRegistrationSubTypeId = controlMap.has(\"AddRegistrationSubType\") && controlMap.get(\"AddRegistrationSubType\").ncontrolcode;\n      editRegistrationSubTypeId = controlMap.has(\"EditRegistrationSubType\") && controlMap.get(\"EditRegistrationSubType\").ncontrolcode;\n      deleteRegistrationSubTypeId = controlMap.has(\"DeleteRegistrationSubType\") && controlMap.get(\"DeleteRegistrationSubType\").ncontrolcode;\n      sampleTypeOptions = constructOptionList(this.props.Login.masterData.SampleTypes || [], 'nsampletypecode', 'ssampletypename', 'nsampletypecode', \"ascending\").get(\"OptionList\");\n      selectedSampleType = sampleTypeOptions.length > 0 ? sampleTypeOptions[0] : {};\n      regTypeOptions = constructOptionList(this.props.Login.masterData.RegistrationTypes || [], 'nregtypecode', 'sregtypename', 'nregtypecode', \"ascending\").get(\"OptionList\");\n      selectedRegType = regTypeOptions.length > 0 ? regTypeOptions[0] : {};\n      breadCrumbData = [];\n      breadCrumbSampleType = sampleTypeOptions[0] || {};\n      breadCrumbRegType = regTypeOptions[0] || {};\n      sampleTypeOptions.length > 0 && breadCrumbData.push({\n        \"label\": \"IDS_SAMPLETYPE\",\n        \"value\": breadCrumbSampleType.label,\n        \"item\": sampleTypeOptions\n      });\n      regTypeOptions.length > 0 && breadCrumbData.push({\n        \"label\": \"IDS_REGTYPE\",\n        \"value\": breadCrumbRegType.label,\n        \"item\": breadCrumbRegType\n      });\n      updateState = true;\n    }\n\n    if (this.props.Login.realSampleType !== previousProps.Login.realSampleType) {\n      breadCrumbData = [{\n        \"label\": \"IDS_SAMPLETYPE\",\n        \"value\": selectedSampleType.label,\n        \"item\": selectedSampleType\n      }, {\n        \"label\": \"IDS_REGTYPE\",\n        \"value\": selectedRegType.label,\n        \"item\": selectedRegType\n      }];\n      breadCrumbSampleType = this.props.Login.realSampleType;\n      breadCrumbRegType = this.props.Login.realRegtype;\n      updateState = true;\n    }\n\n    if (this.props.Login.realRegtype !== previousProps.Login.realRegtype) {\n      breadCrumbSampleType = this.props.Login.realSampleType || breadCrumbSampleType;\n      breadCrumbRegType = this.props.Login.realRegtype;\n      breadCrumbData = [{\n        \"label\": \"IDS_SAMPLETYPE\",\n        \"value\": breadCrumbSampleType.label,\n        \"item\": breadCrumbSampleType\n      }, {\n        \"label\": \"IDS_REGTYPE\",\n        \"value\": breadCrumbRegType.label,\n        \"item\": breadCrumbRegType\n      }];\n      updateState = true;\n    }\n\n    if (this.props.Login.selectedSampleType !== previousProps.Login.selectedSampleType) {\n      selectedSampleType = this.props.Login.selectedSampleType;\n      regTypeOptions = constructOptionList(this.props.Login.masterData.RegistrationTypes || [], 'nregtypecode', 'sregtypename', 'nregtypecode', \"ascending\").get(\"OptionList\");\n      selectedRegType = regTypeOptions[0];\n      updateState = true;\n    }\n\n    if (this.props.Login.reloadData && this.props.Login.reloadData !== previousProps.Login.reloadData) {\n      sampleTypeOptions = constructOptionList(this.props.Login.masterData.SampleTypes || [], 'nsampletypecode', 'ssampletypename', 'nsampletypecode', \"ascending\").get(\"OptionList\");\n      selectedSampleType = sampleTypeOptions.length > 0 ? sampleTypeOptions[0] : {};\n      regTypeOptions = constructOptionList(this.props.Login.masterData.RegistrationTypes || [], 'nregtypecode', 'sregtypename', 'nregtypecode', \"ascending\").get(\"OptionList\");\n      selectedRegType = regTypeOptions.length > 0 ? regTypeOptions[0] : {};\n      breadCrumbData = [];\n      breadCrumbSampleType = sampleTypeOptions[0] || {};\n      breadCrumbRegType = regTypeOptions[0] || {};\n      sampleTypeOptions.length > 0 && breadCrumbData.push({\n        \"label\": \"IDS_SAMPLETYPE\",\n        \"value\": breadCrumbSampleType.label,\n        \"item\": sampleTypeOptions\n      });\n      regTypeOptions.length > 0 && breadCrumbData.push({\n        \"label\": \"IDS_REGTYPE\",\n        \"value\": breadCrumbRegType.label,\n        \"item\": breadCrumbRegType\n      });\n      updateState = true;\n    }\n\n    if (this.props.Login.selectedRegType !== previousProps.Login.selectedRegType) {\n      selectedRegType = this.props.Login.selectedRegType;\n      updateState = true;\n    }\n\n    if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\n      updateState = true;\n      selectedRecord = this.props.Login.selectedRecord;\n    }\n\n    if (updateState) {\n      this.setState({\n        userRoleControlRights,\n        controlMap,\n        addVersionId,\n        editVersionId,\n        deleteVersionId,\n        approveVersionId,\n        addRegistrationSubTypeId,\n        editRegistrationSubTypeId,\n        deleteRegistrationSubTypeId,\n        sampleTypeOptions,\n        regTypeOptions,\n        breadCrumbData,\n        selectedSampleType,\n        selectedRegType,\n        selectedRecord,\n        comboComponents,\n        withoutCombocomponent,\n        breadCrumbSampleType,\n        breadCrumbRegType\n      });\n    }\n  }\n\n  onDrop(data) {\n    const selectedRecord = JSON.parse(JSON.stringify(this.state.selectedRecord));\n    let formatArray = selectedRecord.formatArray || [];\n    formatArray.push(data.formatcomponents);\n    let formatString = '';\n    formatArray.map(comp => formatString += comp);\n    selectedRecord.formatArray = formatArray;\n    selectedRecord.ssampleformat = formatString;\n    selectedRecord.exampleformat = this.replaceFormat(formatString);\n\n    if (selectedRecord.ssampleformat.length < 30) {\n      this.setState({\n        selectedRecord\n      });\n    } else {\n      toast.info(this.props.intl.formatMessage({\n        id: \"IDS_EXCEEDSMAXCHARS\"\n      }));\n    }\n\n    ;\n  }\n\n}\n\nexport default connect(mapStateToProps, {\n  updateStore,\n  crudMaster,\n  getRegistrationSubTypeMaster,\n  filterColumnData,\n  getRegSubTypeDetails,\n  getSeqNoFormats,\n  selectRegistrationSubType,\n  getEditRegSubType,\n  getVersionById,\n  getRegistrationTypeBySampleType,\n  getRegistrationSubTypeOnReload\n})(injectIntl(RegistrationSubType));","map":{"version":3,"sources":["D:/Postgres_workingFolder/QuaLISWeb/src/pages/dynamicpreregdesign/registrationsubtype/RegistrationSubType.jsx"],"names":["faPencilAlt","faPlus","faTrashAlt","FontAwesomeIcon","React","Card","Col","FormGroup","FormLabel","Nav","Row","FormattedMessage","injectIntl","connect","toast","Affix","updateStore","crudMaster","filterColumnData","selectRegistrationSubType","getVersionById","getRegistrationSubTypeMaster","getRegSubTypeDetails","getSeqNoFormats","getEditRegSubType","getRegistrationTypeBySampleType","getRegistrationSubTypeOnReload","DEFAULT_RETURN","ContentPanel","ReadOnlyText","BreadcrumbComponent","constructOptionList","getControlMap","showEsign","ConfirmMessage","CustomAccordion","transactionStatus","FormInput","FormSelectSearch","FormTextarea","ListMaster","SlideOutModal","Esign","AddSeqNoFormatPopup","RegistrationSubTypeAccordion","mapStateToProps","state","Login","RegistrationSubType","Component","constructor","props","registrationSubTypeAccordion","verisonList","actionParam","nregsubtypeversioncode","masterData","selectedVersion","napprovalconfigcode","accordionMap","Map","map","version","set","editVersionId","deleteVersionId","approveVersionId","userRoleControlRights","doAction","ConfirmDelete","filterComboChange","comboData","name","userInfo","breadCrumbRegType","updateInfo","typeName","data","showFilter","selectedRegType","reloadData","closeFilter","onFilterSubmit","selectedSampleType","warn","intl","formatMessage","id","searchRef","current","value","undefined","deleteId","methodURL","selectedRecord","confirmMessage","confirm","openModal","screenName","operation","closeModal","loadEsign","selectedId","selectedFieldRecord","showConfirmAlert","onSaveClick","saveType","formRef","saveRegSubType","saveVersion","registrationSubType","nregtypecode","breadCrumbData","item","sregsubtypename","sdescription","postParam","inputListName","selectedObject","primaryKeyField","fetchUrl","fecthInputObject","userinfo","nregsubtypecode","inputParam","classUrl","methodUrl","displayName","inputData","registrationsubtype","esignNeeded","nformcode","ncontrolcode","screenData","selectedRegistrationSubType","jsondata","sversiondesc","nversionno","nperiodcode","ntransactionstatus","DRAFT","nsitecode","nmastersitecode","nstatus","ACTIVE","controlCode","toLowerCase","onInputOnChange","event","target","type","checked","setState","onNumericInputChange","str","substring","length","padStart","sseqno","onComboChange","onClickBackspace","formatArray","pop","formatString","comp","ssampleformat","exampleformat","replaceFormat","onClickClear","month","date","Date","replacedString","seqno","includes","indexOf","replace","getFullYear","toString","getMonth","getDate","seqnolength","createRef","controlMap","addVersionId","addRegistrationSubTypeId","editRegistrationSubTypeId","deleteRegistrationSubTypeId","sampleTypeOptions","breadCrumbSampleType","design","comboComponents","withoutCombocomponent","regSubTypeMandatoryFields","getDerivedStateFromProps","masterStatus","error","render","filterParam","unchangeList","searchFieldList","versionMandatoryFields","deleteParam","nisnewformat","push","searchedData","regType","openFilter","regTypeOptions","e","versions","validateEsign","existingFormats","periodList","onDrop","bind","componentDidUpdate","previousProps","updateState","Object","values","has","get","SampleTypes","RegistrationTypes","label","realSampleType","realRegtype","JSON","parse","stringify","formatcomponents","info"],"mappings":"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","sourcesContent":["import { faPencilAlt, faPlus, faTrashAlt } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React from 'react';\r\nimport { Card, Col, FormGroup, FormLabel, Nav, Row } from 'react-bootstrap';\r\nimport { FormattedMessage, injectIntl } from 'react-intl';\r\nimport { connect } from 'react-redux';\r\nimport { toast } from 'react-toastify';\r\nimport { Affix } from 'rsuite';\r\nimport {\r\n    updateStore, crudMaster, filterColumnData, selectRegistrationSubType, getVersionById,\r\n    getRegistrationSubTypeMaster, getRegSubTypeDetails, getSeqNoFormats, getEditRegSubType,\r\n    getRegistrationTypeBySampleType, getRegistrationSubTypeOnReload\r\n} from '../../../actions';\r\nimport { DEFAULT_RETURN } from '../../../actions/LoginTypes';\r\nimport { ContentPanel, ReadOnlyText } from '../../../components/App.styles';\r\nimport BreadcrumbComponent from '../../../components/Breadcrumb.Component';\r\nimport { constructOptionList, getControlMap, showEsign } from '../../../components/CommonScript';\r\nimport ConfirmMessage from '../../../components/confirm-alert/confirm-message.component';\r\nimport CustomAccordion from '../../../components/custom-accordion/custom-accordion.component';\r\nimport { transactionStatus } from '../../../components/Enumeration';\r\nimport FormInput from '../../../components/form-input/form-input.component';\r\nimport FormSelectSearch from '../../../components/form-select-search/form-select-search.component';\r\nimport FormTextarea from '../../../components/form-textarea/form-textarea.component';\r\nimport ListMaster from '../../../components/list-master/list-master.component';\r\nimport SlideOutModal from '../../../components/slide-out-modal/SlideOutModal';\r\nimport Esign from '../../audittrail/Esign';\r\nimport AddSeqNoFormatPopup from './AddSeqNoFormatPopup';\r\nimport RegistrationSubTypeAccordion from './RegistrationSubTypeAccordion';\r\nconst mapStateToProps = state => {\r\n    return ({ Login: state.Login })\r\n}\r\nclass RegistrationSubType extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.searchRef = React.createRef();\r\n        this.confirmMessage = new ConfirmMessage();\r\n        this.state = {\r\n            userRoleControlRights: [],\r\n            controlMap: new Map(),\r\n            addVersionId: -1,\r\n            editVersionId: -1,\r\n            deleteVersionId: -1,\r\n            approveVersionId: -1,\r\n            addRegistrationSubTypeId: -1,\r\n            editRegistrationSubTypeId: -1,\r\n            deleteRegistrationSubTypeId: -1,\r\n            selectedRecord: {},\r\n            sampleTypeOptions: [],\r\n            selectedSampleType: {},\r\n            breadCrumbSampleType: {},\r\n            selectedRegType: {},\r\n            breadCrumbRegType: {},\r\n            breadCrumbData: [],\r\n            design: [],\r\n            comboComponents: [],\r\n            withoutCombocomponent: []\r\n        };\r\n        this.regSubTypeMandatoryFields = [\r\n            { \"idsName\": \"IDS_REGISTRATIONSUBTYPE\", \"dataField\": \"sregsubtypename\", \"mandatoryLabel\": \"IDS_ENTER\" }\r\n        ]\r\n    }\r\n    static getDerivedStateFromProps(props, state) {\r\n        if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\r\n            toast.warn(props.intl.formatMessage({ id: props.Login.masterStatus }));\r\n            props.Login.masterStatus = \"\";\r\n        }\r\n\r\n        if (props.Login.error !== \"\" && props.Login.error !== state.error) {\r\n            toast.error(props.Login.error)\r\n            props.Login.error = \"\";\r\n        }\r\n        return null;\r\n    }\r\n    render() {\r\n        const filterParam = {\r\n            inputListName: \"RegistrationSubType\",\r\n            selectedObject: \"selectedRegistrationSubType\",\r\n            primaryKeyField: \"nregtypecode\",\r\n            fetchUrl: \"registrationsubtype/getRegistrationSubTypeMaster\",\r\n            fecthInputObject: {\r\n                userinfo: this.props.Login.userInfo,\r\n                nregtypecode: this.state.breadCrumbData[1] ? this.state.breadCrumbData[1].item.value : -1\r\n            },\r\n            masterData: this.props.Login.masterData,\r\n            unchangeList: [\"realSampleType\", \"SampleTypes\", \"realRegtype\", \"RegistrationTypes\"],\r\n            searchFieldList: [\"sregsubtypename\", \"sdescription\"]\r\n        };\r\n        this.versionMandatoryFields = [\r\n            { \"idsName\": \"IDS_FORMAT\", \"dataField\": \"ssampleformat\", \"mandatoryLabel\": \"IDS_SELECT\" },\r\n        ]\r\n        const deleteParam = this.props.Login.masterData.selectedRegistrationSubType ? {\r\n            nregsubtypecode: this.props.Login.masterData.selectedRegistrationSubType.nregsubtypecode,\r\n            nregtypecode: this.props.Login.masterData.selectedRegistrationSubType.nregtypecode\r\n        } : {}\r\n        if (this.state.selectedRecord.nisnewformat) {\r\n\r\n            this.versionMandatoryFields.push({ \"idsName\": \"IDS_RESETDURATION\", \"dataField\": \"nresetduration\", \"mandatoryLabel\": \"IDS_ENTER\" })\r\n            this.versionMandatoryFields.push({ \"idsName\": \"IDS_PERIOD\", \"dataField\": \"nperiodcode\", \"mandatoryLabel\": \"IDS_SELECT\" })\r\n        }\r\n        return (\r\n            <>\r\n                <div className=\"client-listing-wrap mtop-fixed-breadcrumb fixed_breadcrumd\">\r\n                    {this.state.breadCrumbData.length > 0 ?\r\n                        <Affix top={53}>\r\n                            <BreadcrumbComponent breadCrumbItem={this.state.breadCrumbData} />\r\n                        </Affix> : \"\"\r\n                    }\r\n                    <Row noGutters={true}>\r\n                        <Col md={4}>\r\n                            <ListMaster\r\n                                filterColumnData={this.props.filterColumnData}\r\n                                screenName={\"RegistrationSubType\"}\r\n                                masterList={this.props.Login.masterData.searchedData || this.props.Login.masterData.RegistrationSubType || []}\r\n                                masterData={this.props.Login.masterData}\r\n                                userInfo={this.props.Login.userInfo}\r\n                                getMasterDetail={(regType) => this.props.selectRegistrationSubType(regType, this.props.Login.masterData, this.props.Login.userInfo)}\r\n                                selectedMaster={this.props.Login.masterData.selectedRegistrationSubType}\r\n                                primaryKeyField=\"nregsubtypecode\"\r\n                                mainField=\"sregsubtypename\"\r\n                                // firstField=\"stransdisplaystatus\"\r\n                                // secondField=\"stransdisplaystatus\"\r\n                                userRoleControlRights={this.state.userRoleControlRights}\r\n                                addId={this.state.addRegistrationSubTypeId}\r\n                                filterParam={filterParam}\r\n                                hidePaging={false}\r\n                                searchRef={this.searchRef}\r\n                                reloadData={this.reloadData}\r\n                                openModal={() => this.openModal(\"RegistrationSubType\")}\r\n                                openFilter={this.openFilter}\r\n                                closeFilter={this.closeFilter}\r\n                                onFilterSubmit={this.onFilterSubmit}\r\n                                showFilterIcon={true}\r\n                                showFilter={this.props.Login.showFilter}\r\n                                filterComponent={[\r\n                                    {\r\n                                        \"IDS_SAMPLETYPEFILTER\":\r\n                                            <Row>\r\n                                                <Col md={12}>\r\n                                                    <FormSelectSearch\r\n                                                        name={\"nsampletypecode\"}\r\n                                                        formLabel={this.props.intl.formatMessage({ id: \"IDS_SAMPLETYPE\" })}\r\n                                                        isSearchable={false}\r\n                                                        placeholder=\"Please Select...\"\r\n                                                        options={this.state.sampleTypeOptions}\r\n                                                        value={this.state.selectedSampleType ? this.state.selectedSampleType : \"\"}\r\n                                                        onChange={value => this.filterComboChange(value, 'nsampletypecode')}\r\n                                                    />\r\n                                                    <FormSelectSearch\r\n                                                        name={\"nregtypecode\"}\r\n                                                        formLabel={this.props.intl.formatMessage({ id: \"IDS_REGTYPE\" })}\r\n                                                        isSearchable={false}\r\n                                                        placeholder=\"Please Select...\"\r\n                                                        options={this.state.regTypeOptions}\r\n                                                        value={this.state.selectedRegType || \"\"}\r\n                                                        onChange={value => this.filterComboChange(value, 'nregtypecode')}\r\n                                                    />\r\n                                                </Col>\r\n                                            </Row>\r\n                                    }\r\n                                ]}\r\n                            />\r\n                        </Col>\r\n                        <Col md='8'>\r\n                            {this.props.Login.masterData.selectedRegistrationSubType ?\r\n                                <ContentPanel className=\"panel-main-content\">\r\n                                    <Card className=\"border-0\">\r\n                                        <Card.Header>\r\n                                            <Card.Title className=\"product-title-main\">\r\n                                                {this.props.Login.masterData.selectedRegistrationSubType.sregsubtypename}\r\n                                            </Card.Title>\r\n                                            <Card.Subtitle>\r\n                                                <div className=\"d-flex product-category\">\r\n                                                    <h2 className=\"product-title-sub flex-grow-1\">\r\n\r\n                                                    </h2>\r\n                                                    <div className=\"d-inline\">\r\n                                                        <Nav.Link name=\"editInstrument\"\r\n                                                            data-tip={this.props.intl.formatMessage({ id: \"IDS_EDIT\" })}\r\n                                                            data-for=\"tooltip_list_wrap\"\r\n                                                            hidden={this.state.userRoleControlRights.indexOf(this.state.editRegistrationSubTypeId) === -1}\r\n                                                            className=\"btn btn-circle outline-grey mr-2\"\r\n                                                            onClick={(e) => this.props.getEditRegSubType(this.props.Login.masterData.selectedRegistrationSubType.nregsubtypecode,\r\n                                                                this.props.Login.userInfo, this.state.editRegistrationSubTypeId\r\n                                                            )}\r\n                                                        >\r\n                                                            <FontAwesomeIcon icon={faPencilAlt} />\r\n                                                        </Nav.Link>\r\n                                                        <Nav.Link name=\"deleteInstrument\" className=\"btn btn-circle outline-grey mr-2 action-icons-wrap\"\r\n                                                            data-tip={this.props.intl.formatMessage({ id: \"IDS_DELETE\" })}\r\n                                                            data-for=\"tooltip_list_wrap\"\r\n                                                            hidden={this.state.userRoleControlRights.indexOf(this.state.deleteRegistrationSubTypeId) === -1}\r\n                                                            onClick={() => this.ConfirmDelete(this.state.deleteRegistrationSubTypeId, 'RegistrationSubType', deleteParam)}>\r\n                                                            <FontAwesomeIcon icon={faTrashAlt} />\r\n                                                        </Nav.Link>\r\n                                                    </div>\r\n                                                </div>\r\n                                            </Card.Subtitle>\r\n                                        </Card.Header>\r\n                                        <Card.Body>\r\n                                            <Row>\r\n                                                <Col md={12}>\r\n                                                    <FormGroup>\r\n                                                        <FormLabel><FormattedMessage id={\"IDS_DESCRIPTION\"} message={\"Description\"} /></FormLabel>\r\n                                                        <ReadOnlyText>{this.props.Login.masterData.selectedRegistrationSubType.sdescription ||'-'}</ReadOnlyText>\r\n                                                    </FormGroup>\r\n                                                </Col>\r\n                                            </Row>\r\n                                            <Row noGutters={true} >\r\n                                                <Col md={12}>\r\n                                                    <div className=\"d-flex justify-content-end\">\r\n                                                        <Nav.Link className=\"add-txt-btn\"\r\n                                                            hidden={this.state.userRoleControlRights.indexOf(this.state.addVersionId) === -1}\r\n                                                            onClick={() => this.props.getSeqNoFormats({ userInfo: this.props.Login.userInfo, ncontrolcode: this.state.addVersionId })}\r\n                                                        >\r\n                                                            <FontAwesomeIcon icon={faPlus} /> { }\r\n                                                            <FormattedMessage id='IDS_VERSION' defaultMessage='Version' />\r\n                                                        </Nav.Link>\r\n                                                    </div>\r\n                                                </Col>\r\n                                            </Row>\r\n                                            <Row noGutters={true}>\r\n                                                <Col md={12}>\r\n                                                    {this.props.Login.masterData.versions && this.props.Login.masterData.versions.length > 0 ?\r\n                                                        <CustomAccordion\r\n                                                            key=\"FormatVersion\"\r\n                                                            titlePrefix={this.props.intl.formatMessage({ id: \"IDS_VERSION\" }) + \" : \"}\r\n                                                            isJSONdata={true}\r\n                                                            jsonFieldName={'jsondata'}\r\n                                                            accordionTitle={'sversiondesc'}\r\n                                                            accordionComponent={this.registrationSubTypeAccordion(this.props.Login.masterData.versions)}\r\n                                                            inputParam={{ masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo }}\r\n                                                            accordionClick={this.props.getRegSubTypeDetails}\r\n                                                            accordionPrimaryKey={\"nregsubtypeversioncode\"}\r\n                                                            accordionObjectName={\"version\"}\r\n                                                            selectedKey={this.props.Login.masterData.selectedVersion.nregsubtypeversioncode}\r\n                                                        />\r\n                                                        : \"\"}\r\n                                                </Col>\r\n                                            </Row>\r\n                                        </Card.Body>\r\n                                    </Card>\r\n                                </ContentPanel>\r\n                                : \"\"}\r\n                        </Col>\r\n                    </Row>\r\n                </div>\r\n                {this.props.Login.openModal ?\r\n                    <SlideOutModal\r\n                        size={\"lg\"}\r\n                        onSaveClick={this.onSaveClick}\r\n                        operation={this.props.Login.operation}\r\n                        screenName={this.props.Login.screenName}\r\n                        closeModal={this.closeModal}\r\n                        show={this.props.Login.openModal}\r\n                        inputParam={this.props.Login.inputParam}\r\n                        esign={this.props.Login.loadEsign}\r\n                        validateEsign={this.validateEsign}\r\n                        mandatoryFields={this.props.Login.screenName === 'RegistrationSubType' ? this.regSubTypeMandatoryFields : this.versionMandatoryFields}\r\n                        selectedRecord={this.state.selectedRecord || {}}\r\n                        addComponent={this.props.Login.loadEsign ?\r\n                            <Esign\r\n                                operation={this.props.Login.operation}\r\n                                onInputOnChange={(event) => this.onInputOnChange(event)}\r\n                                inputParam={this.props.Login.inputParam}\r\n                                selectedRecord={this.state.selectedRecord || {}}\r\n                            />\r\n                            :\r\n                            this.props.Login.screenName === 'RegistrationSubType' ?\r\n                                <>\r\n                                    <FormInput\r\n                                        name={\"sregsubtypename\"}\r\n                                        label={this.props.intl.formatMessage({ id: \"IDS_REGISTRATIONSUBTYPE\" })}\r\n                                        type=\"text\"\r\n                                        value={this.state.selectedRecord.sregsubtypename || \"\"}\r\n                                        isMandatory={true}\r\n                                        required={true}\r\n                                        maxLength={100}\r\n                                        onChange={(event) => this.onInputOnChange(event)}\r\n                                    />\r\n                                    <FormTextarea\r\n                                        name={\"sdescription\"}\r\n                                        label={this.props.intl.formatMessage({ id: \"IDS_DESCRIPTION\" })}\r\n                                        type=\"text\"\r\n                                        value={this.state.selectedRecord.sdescription || \"\"}\r\n                                        isMandatory={false}\r\n                                        required={true}\r\n                                        maxLength={255}\r\n                                        onChange={(event) => this.onInputOnChange(event)}\r\n                                    />\r\n                                </>\r\n                                :\r\n                                <AddSeqNoFormatPopup\r\n                                    selectedRecord={this.state.selectedRecord}\r\n                                    existingFormats={this.props.Login.existingFormats}\r\n                                    periodList={this.props.Login.periodList}\r\n                                    onInputOnChange={this.onInputOnChange}\r\n                                    onNumericInputChange={this.onNumericInputChange}\r\n                                    onComboChange={this.onComboChange}\r\n                                    onDrop={this.onDrop.bind(this)}\r\n                                    onClickBackspace={this.onClickBackspace}\r\n                                    onClickClear={this.onClickClear}\r\n                                />\r\n                        } />\r\n                    : \"\"}\r\n            </>\r\n        )\r\n    }\r\n    componentDidUpdate(previousProps) {\r\n        let updateState = false;\r\n        let { userRoleControlRights, controlMap, addVersionId, editVersionId, deleteVersionId, approveVersionId,\r\n            addRegistrationSubTypeId, editRegistrationSubTypeId, deleteRegistrationSubTypeId, breadCrumbSampleType, breadCrumbRegType,\r\n            sampleTypeOptions, regTypeOptions, breadCrumbData, selectedSampleType, selectedRegType,\r\n            selectedRecord, comboComponents, withoutCombocomponent\r\n        } = this.state;\r\n        if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\r\n            userRoleControlRights = [];\r\n            if (this.props.Login.userRoleControlRights) {\r\n                this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item =>\r\n                    userRoleControlRights.push(item.ncontrolcode))\r\n            }\r\n            controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode)\r\n            updateState = true;\r\n            addVersionId = controlMap.has(\"AddSeqNoFormatVersion\") && controlMap.get(\"AddSeqNoFormatVersion\").ncontrolcode;\r\n            editVersionId = controlMap.has(\"EditSeqNoFormatVersion\") && controlMap.get(\"EditSeqNoFormatVersion\").ncontrolcode;\r\n            deleteVersionId = controlMap.has(\"DeleteSeqNoFormatVersion\") && controlMap.get(\"DeleteSeqNoFormatVersion\").ncontrolcode;\r\n            approveVersionId = controlMap.has(\"ApproveSeqNoFormatVersion\") && controlMap.get(\"ApproveSeqNoFormatVersion\").ncontrolcode\r\n            addRegistrationSubTypeId = controlMap.has(\"AddRegistrationSubType\") && controlMap.get(\"AddRegistrationSubType\").ncontrolcode;\r\n            editRegistrationSubTypeId = controlMap.has(\"EditRegistrationSubType\") && controlMap.get(\"EditRegistrationSubType\").ncontrolcode;\r\n            deleteRegistrationSubTypeId = controlMap.has(\"DeleteRegistrationSubType\") && controlMap.get(\"DeleteRegistrationSubType\").ncontrolcode;\r\n            sampleTypeOptions = constructOptionList(this.props.Login.masterData.SampleTypes || [], 'nsampletypecode', 'ssampletypename', 'nsampletypecode', \"ascending\").get(\"OptionList\")\r\n            selectedSampleType = sampleTypeOptions.length > 0 ? sampleTypeOptions[0] : {};\r\n            regTypeOptions = constructOptionList(this.props.Login.masterData.RegistrationTypes || [], 'nregtypecode', 'sregtypename', 'nregtypecode', \"ascending\").get(\"OptionList\")\r\n            selectedRegType = regTypeOptions.length > 0 ? regTypeOptions[0] : {};\r\n            breadCrumbData = [];\r\n            breadCrumbSampleType = sampleTypeOptions[0] || {};\r\n            breadCrumbRegType = regTypeOptions[0] || {};\r\n            sampleTypeOptions.length > 0 && breadCrumbData.push(\r\n                {\r\n                    \"label\": \"IDS_SAMPLETYPE\",\r\n                    \"value\": breadCrumbSampleType.label,\r\n                    \"item\": sampleTypeOptions\r\n                }\r\n            );\r\n            regTypeOptions.length > 0 && breadCrumbData.push(\r\n                {\r\n                    \"label\": \"IDS_REGTYPE\",\r\n                    \"value\": breadCrumbRegType.label,\r\n                    \"item\": breadCrumbRegType\r\n                }\r\n            );\r\n            updateState = true;\r\n        }\r\n        if (this.props.Login.realSampleType !== previousProps.Login.realSampleType) {\r\n            breadCrumbData = [\r\n                {\r\n                    \"label\": \"IDS_SAMPLETYPE\",\r\n                    \"value\": selectedSampleType.label,\r\n                    \"item\": selectedSampleType\r\n                },\r\n                {\r\n                    \"label\": \"IDS_REGTYPE\",\r\n                    \"value\": selectedRegType.label,\r\n                    \"item\": selectedRegType\r\n                }\r\n            ];\r\n            breadCrumbSampleType = this.props.Login.realSampleType;\r\n            breadCrumbRegType = this.props.Login.realRegtype;\r\n            updateState = true;\r\n        } if (this.props.Login.realRegtype !== previousProps.Login.realRegtype) {\r\n            breadCrumbSampleType = this.props.Login.realSampleType || breadCrumbSampleType;\r\n            breadCrumbRegType = this.props.Login.realRegtype;\r\n            breadCrumbData = [\r\n                {\r\n                    \"label\": \"IDS_SAMPLETYPE\",\r\n                    \"value\": breadCrumbSampleType.label,\r\n                    \"item\": breadCrumbSampleType\r\n                },\r\n                {\r\n                    \"label\": \"IDS_REGTYPE\",\r\n                    \"value\": breadCrumbRegType.label,\r\n                    \"item\": breadCrumbRegType\r\n                }\r\n            ];\r\n            updateState = true;\r\n        }\r\n        if (this.props.Login.selectedSampleType !== previousProps.Login.selectedSampleType) {\r\n            selectedSampleType = this.props.Login.selectedSampleType;\r\n            regTypeOptions = constructOptionList(this.props.Login.masterData.RegistrationTypes || [], 'nregtypecode', 'sregtypename', 'nregtypecode', \"ascending\").get(\"OptionList\")\r\n            selectedRegType = regTypeOptions[0];\r\n            updateState = true;\r\n        }\r\n        if (this.props.Login.reloadData && this.props.Login.reloadData !== previousProps.Login.reloadData) {\r\n            sampleTypeOptions = constructOptionList(this.props.Login.masterData.SampleTypes || [], 'nsampletypecode', 'ssampletypename', 'nsampletypecode', \"ascending\").get(\"OptionList\")\r\n            selectedSampleType = sampleTypeOptions.length > 0 ? sampleTypeOptions[0] : {};\r\n            regTypeOptions = constructOptionList(this.props.Login.masterData.RegistrationTypes || [], 'nregtypecode', 'sregtypename', 'nregtypecode', \"ascending\").get(\"OptionList\")\r\n            selectedRegType = regTypeOptions.length > 0 ? regTypeOptions[0] : {};\r\n            breadCrumbData = [];\r\n            breadCrumbSampleType = sampleTypeOptions[0] || {};\r\n            breadCrumbRegType = regTypeOptions[0] || {};\r\n            sampleTypeOptions.length > 0 && breadCrumbData.push(\r\n                {\r\n                    \"label\": \"IDS_SAMPLETYPE\",\r\n                    \"value\": breadCrumbSampleType.label,\r\n                    \"item\": sampleTypeOptions\r\n                }\r\n            );\r\n            regTypeOptions.length > 0 && breadCrumbData.push(\r\n                {\r\n                    \"label\": \"IDS_REGTYPE\",\r\n                    \"value\": breadCrumbRegType.label,\r\n                    \"item\": breadCrumbRegType\r\n                }\r\n            );\r\n            updateState = true;\r\n        }\r\n        if (this.props.Login.selectedRegType !== previousProps.Login.selectedRegType) {\r\n            selectedRegType = this.props.Login.selectedRegType;\r\n            updateState = true;\r\n        }\r\n        if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\r\n            updateState = true;\r\n            selectedRecord = this.props.Login.selectedRecord\r\n        }\r\n        if (updateState) {\r\n            this.setState({\r\n                userRoleControlRights, controlMap, addVersionId, editVersionId, deleteVersionId, approveVersionId,\r\n                addRegistrationSubTypeId, editRegistrationSubTypeId, deleteRegistrationSubTypeId,\r\n                sampleTypeOptions, regTypeOptions, breadCrumbData, selectedSampleType, selectedRegType,\r\n                selectedRecord, comboComponents, withoutCombocomponent, breadCrumbSampleType, breadCrumbRegType\r\n            });\r\n        }\r\n    }\r\n    registrationSubTypeAccordion = (verisonList) => {\r\n        const actionParam = {\r\n            // nregsubtypecode: this.props.Login.masterData.selectedRegistrationSubType.nregsubtypecode,\r\n            // nregtypecode: this.props.Login.masterData.selectedRegistrationSubType.nregtypecode,\r\n            nregsubtypeversioncode: this.props.Login.masterData.selectedVersion ? this.props.Login.masterData.selectedVersion.nregsubtypeversioncode : -1,\r\n            napprovalconfigcode: this.props.Login.masterData.selectedVersion ? this.props.Login.masterData.selectedVersion.napprovalconfigcode : -1\r\n        }\r\n        const accordionMap = new Map();\r\n        verisonList.map(version =>\r\n            accordionMap.set(version.nregsubtypeversioncode, <RegistrationSubTypeAccordion\r\n                version={version}\r\n                editVersionId={this.state.editVersionId}\r\n                deleteVersionId={this.state.deleteVersionId}\r\n                approveVersionId={this.state.approveVersionId}\r\n                userRoleControlRights={this.state.userRoleControlRights}\r\n                actionParam={actionParam}\r\n                getVersionById={this.getVersionById}\r\n                approvrVersion={this.doAction}\r\n                ConfirmDelete={this.ConfirmDelete}\r\n\r\n            // approvalConfig={this.props.Login.masterData.ApprovalConfig}\r\n            />)\r\n        )\r\n        return accordionMap;\r\n    }\r\n    filterComboChange = (comboData, name) => {\r\n        if (name === 'nsampletypecode')\r\n            this.props.getRegistrationTypeBySampleType(comboData, this.props.Login.masterData, this.props.Login.userInfo, this.state.breadCrumbRegType)\r\n        else {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    showFilter: false,\r\n                    selectedRegType: comboData,\r\n                    reloadData: false\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        // this.setState({ selectedRegType: comboData })\r\n    }\r\n    closeFilter = () => {\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { showFilter: false }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n    onFilterSubmit = () => {\r\n        if (this.state.selectedSampleType) {\r\n            this.reloadData(this.state.selectedSampleType, this.state.selectedRegType);\r\n        } else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SAMPLETYPENOTAVALIABLE\" }));\r\n        }\r\n    }\r\n    reloadData = (selectedSampleType, selectedRegType) => {\r\n        this.searchRef.current.value = \"\";\r\n        if (selectedSampleType !== undefined) {\r\n            this.props.getRegistrationSubTypeMaster(selectedSampleType, selectedRegType, this.props.Login.masterData, this.props.Login.userInfo);\r\n        } else {\r\n            this.props.getRegistrationSubTypeOnReload(this.props.Login.userInfo);\r\n        }\r\n\r\n    }\r\n    ConfirmDelete = (deleteId, methodURL, selectedRecord) => {\r\n        this.confirmMessage.confirm(\"deleteMessage\", this.props.intl.formatMessage({ id: \"IDS_DELETE\" }), this.props.intl.formatMessage({ id: \"IDS_DEFAULTCONFIRMMSG\" }),\r\n            this.props.intl.formatMessage({ id: \"IDS_OK\" }), this.props.intl.formatMessage({ id: \"IDS_CANCEL\" }),\r\n            () => this.doAction('delete', deleteId, methodURL, selectedRecord));\r\n    }\r\n    openModal = (screenName) => {\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { openModal: true, operation: \"create\", screenName }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n    closeModal = () => {\r\n        let loadEsign = this.props.Login.loadEsign;\r\n        let openModal = this.props.Login.openModal;\r\n        let selectedRecord = this.props.Login.selectedRecord;\r\n        if (this.props.Login.loadEsign) {\r\n            if (this.props.Login.operation === \"delete\") {\r\n                loadEsign = false;\r\n                openModal = false;\r\n                selectedRecord = {};\r\n\r\n            }\r\n            else {\r\n                loadEsign = false;\r\n            }\r\n        }\r\n        else {\r\n            openModal = false;\r\n            selectedRecord = {};\r\n        }\r\n\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { openModal, loadEsign, selectedRecord, selectedId: null, selectedFieldRecord: {}, showConfirmAlert: false }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n    onSaveClick = (saveType, formRef) => {\r\n        if (this.props.Login.screenName === 'RegistrationSubType') {\r\n            this.saveRegSubType(saveType, formRef)\r\n        } else {\r\n            this.saveVersion(saveType, formRef)\r\n        }\r\n    }\r\n    saveRegSubType = (saveType, formRef) => {\r\n        //add \r\n        let registrationSubType = {\r\n            nregtypecode: this.state.breadCrumbData[1].item.value,\r\n            sregsubtypename: this.state.selectedRecord.sregsubtypename,\r\n            sdescription: this.state.selectedRecord.sdescription\r\n        }\r\n        const postParam = {\r\n            inputListName: \"RegistrationSubType\",\r\n            selectedObject: \"selectedRegistrationSubType\",\r\n            primaryKeyField: \"nregtypecode\",\r\n            fetchUrl: \"registrationsubtype/getRegistrationSubTypeMaster\",\r\n            fecthInputObject: {\r\n                userinfo: this.props.Login.userInfo,\r\n                nregtypecode: this.state.breadCrumbData[1] ? this.state.breadCrumbData[1].item.value : -1\r\n            },\r\n            masterData: this.props.Login.masterData\r\n        }\r\n        let selectedId = null;\r\n        if (this.props.Login.operation === \"update\") {\r\n            // edit\r\n            selectedId = this.state.selectedRecord.nregsubtypecode\r\n            registrationSubType = {\r\n                ...registrationSubType,\r\n                nregsubtypecode: selectedId\r\n            }\r\n        }\r\n        const inputParam = {\r\n            classUrl: this.props.Login.inputParam.classUrl,\r\n            methodUrl: 'RegistrationSubType',\r\n            postParam,\r\n            searchRef: this.searchRef,\r\n            displayName: this.props.Login.inputParam.displayName,\r\n            inputData: {\r\n                userinfo: this.props.Login.userInfo,\r\n                registrationsubtype: registrationSubType\r\n            },\r\n            operation: this.props.Login.operation,\r\n            saveType, formRef\r\n        }\r\n        const masterData = this.props.Login.masterData;\r\n        const esignNeeded = showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolcode);\r\n        if (esignNeeded) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData }, saveType,\r\n                    operation: this.props.Login.operation, openModal: true,\r\n                    screenName: this.props.Login.inputParam.displayName\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.crudMaster(inputParam, masterData, \"openModal\");\r\n        }\r\n    }\r\n    saveVersion = (saveType, formRef) => {\r\n        let version = {\r\n            napprovalconfigcode: this.props.Login.masterData.selectedRegistrationSubType.napprovalconfigcode,\r\n            jsondata: {\r\n                ...this.state.selectedRecord,\r\n                // nneedscheduler:false,\r\n                sversiondesc: '-',\r\n                nversionno: -1\r\n            },\r\n            nperiodcode: this.state.selectedRecord.nperiodcode ? this.state.selectedRecord.nperiodcode.value : 4,\r\n            ntransactionstatus: transactionStatus.DRAFT,\r\n            nsitecode: this.props.Login.userInfo.nmastersitecode,\r\n            nstatus: transactionStatus.ACTIVE\r\n        }\r\n        let selectedId = null;\r\n        let operation = 'create';\r\n        if (this.props.Login.operation === \"update\") {\r\n            // edit\r\n            operation = 'update'\r\n            selectedId = this.state.selectedRecord.nregsubtypeversioncode\r\n            version = {\r\n                ...version,\r\n                nregsubtypeversioncode: selectedId\r\n            }\r\n        }\r\n        const postParam = {\r\n            inputListName: \"RegistrationSubType\",\r\n            selectedObject: \"selectedRegistrationSubType\",\r\n            primaryKeyField: \"nregtypecode\",\r\n            fetchUrl: \"registrationsubtype/getRegistrationSubTypeMaster\",\r\n            fecthInputObject: {\r\n                userinfo: this.props.Login.userInfo,\r\n                nregtypecode: this.state.breadCrumbData[1] ? this.state.breadCrumbData[1].item.value : -1\r\n            },\r\n            masterData: this.props.Login.masterData\r\n        }\r\n        const inputParam = {\r\n            classUrl: this.props.Login.inputParam.classUrl,\r\n            methodUrl: 'Version',\r\n            postParam,\r\n            searchRef: this.searchRef,\r\n            displayName: this.props.Login.inputParam.displayName,\r\n            inputData: {\r\n                userinfo: this.props.Login.userInfo,\r\n                version: version\r\n            },\r\n            operation,\r\n            saveType, formRef\r\n        }\r\n        const masterData = this.props.Login.masterData;\r\n        const esignNeeded = showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolcode);\r\n        if (esignNeeded) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true,\r\n                    screenData: { inputParam, masterData },\r\n                    saveType,\r\n                    operation,\r\n                    openModal: true,\r\n                    screenName: this.props.Login.inputParam.displayName\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.crudMaster(inputParam, masterData, \"openModal\");\r\n        }\r\n    }\r\n    getVersionById = (ncontrolcode) => {\r\n        this.props.getVersionById(this.props.Login.masterData.selectedVersion.nregsubtypeversioncode, this.props.Login.userInfo, ncontrolcode)\r\n    }\r\n    doAction = (operation, controlCode, methodURL, selectedRecord) => {\r\n        const postParam = {\r\n            inputListName: \"RegistrationSubType\",\r\n            selectedObject: \"selectedRegistrationSubType\",\r\n            primaryKeyField: \"nregtypecode\",\r\n            fetchUrl: \"registrationsubtype/getRegistrationSubTypeMaster\",\r\n            fecthInputObject: {\r\n                userinfo: this.props.Login.userInfo,\r\n                nregtypecode: this.state.breadCrumbData[1] ? this.state.breadCrumbData[1].item.value : -1\r\n            },\r\n            masterData: this.props.Login.masterData\r\n        }\r\n        const inputParam = {\r\n            classUrl: this.props.Login.inputParam.classUrl,\r\n            methodUrl: methodURL,\r\n            postParam,\r\n            searchRef: this.searchRef,\r\n            inputData: {\r\n                [methodURL.toLowerCase()]: selectedRecord,\r\n                \"userinfo\": this.props.Login.userInfo\r\n            },\r\n            operation,\r\n            displayName: this.props.Login.inputParam.displayName\r\n        }\r\n        const esignNeeded = showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, controlCode);\r\n        if (esignNeeded) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true,\r\n                    screenData: { inputParam, masterData: this.props.Login.masterData },\r\n                    openModal: true,\r\n                    screenName: this.props.intl.formatMessage({ id: this.props.Login.inputParam.displayName }),\r\n                    operation\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\r\n        }\r\n    }\r\n    onInputOnChange = (event) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if (event.target.type === 'checkbox') {\r\n            selectedRecord[event.target.name] = event.target.checked;\r\n        }\r\n        else {\r\n            selectedRecord[event.target.name] = event.target.value;\r\n        }\r\n        this.setState({ selectedRecord });\r\n    }\r\n    onNumericInputChange = (value, name) => {\r\n        let selectedRecord = this.state.selectedRecord\r\n        if (value === 0 || value === 0.0) {\r\n            selectedRecord[name] = \"\";\r\n            this.setState({ selectedRecord });\r\n        } else {\r\n            if (name === 'seqnolength') {\r\n                let str = '{9999}'\r\n                str = str.substring(1, str.length - 2)\r\n                str = str.padStart(value, 9)\r\n                selectedRecord.sseqno = '{' + str + '}'\r\n            }\r\n            selectedRecord[name] = value;\r\n            this.setState({ selectedRecord });\r\n\r\n        }\r\n    }\r\n    onComboChange = (comboData, name) => {\r\n        this.setState({ selectedRecord: { ...this.state.selectedRecord, [name]: comboData } })\r\n    }\r\n    onDrop(data) {\r\n        const selectedRecord = JSON.parse(JSON.stringify(this.state.selectedRecord));\r\n        let formatArray = selectedRecord.formatArray || []\r\n        formatArray.push(data.formatcomponents)\r\n        let formatString = '';\r\n        formatArray.map(comp => formatString += comp)\r\n        selectedRecord.formatArray = formatArray\r\n        selectedRecord.ssampleformat = formatString;\r\n        selectedRecord.exampleformat = this.replaceFormat(formatString)\r\n        if (selectedRecord.ssampleformat.length < 30) {\r\n            this.setState({ selectedRecord });\r\n        } else {            \r\n            toast.info(this.props.intl.formatMessage({ id: \"IDS_EXCEEDSMAXCHARS\" }));\r\n        }\r\n;    }\r\n    onClickBackspace = () => {\r\n        let { selectedRecord } = this.state;\r\n        let formatArray = selectedRecord.formatArray || []\r\n        formatArray.pop()\r\n        let formatString = '';\r\n        formatArray.map(comp => formatString += comp)\r\n        selectedRecord.formatArray = formatArray\r\n        selectedRecord.ssampleformat = formatString;\r\n        selectedRecord.exampleformat = this.replaceFormat(formatString)\r\n        this.setState({ selectedRecord });\r\n    }\r\n    onClickClear = () => {\r\n        let { selectedRecord } = this.state;\r\n        selectedRecord.formatArray = [];\r\n        selectedRecord.ssampleformat = \"\";\r\n        selectedRecord.exampleformat = \"\"\r\n        this.setState({ selectedRecord });\r\n    }\r\n    replaceFormat = (formatString) => {\r\n        const month = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\r\n        const date = new Date();\r\n        let replacedString = formatString;\r\n        let seqno = \"1\"\r\n\r\n        while (replacedString.includes('}')) {\r\n            let comp = replacedString.substring(replacedString.indexOf('{'), replacedString.indexOf('}') + 1)\r\n            switch (comp) {\r\n                case '{yyyy}':\r\n                    replacedString = replacedString.replace('{yyyy}', date.getFullYear())\r\n                    break;\r\n                case '{yy}':\r\n                    replacedString = replacedString.replace('{yy}', date.getFullYear().toString().substring(2, 4))\r\n                    break;\r\n                case '{MM}':\r\n                    replacedString = replacedString.replace('{MM}', date.getMonth() + 1)\r\n                    break;\r\n                case '{MMM}':\r\n                    replacedString = replacedString.replace('{MMM}', month[date.getMonth()])\r\n                    break;\r\n                case '{DD}':\r\n                    replacedString = replacedString.replace('{DD}', date.getDate())\r\n                    break;\r\n                case this.state.selectedRecord.sseqno || '{9999}':\r\n                    seqno = seqno.padStart(this.state.selectedRecord.seqnolength || 4, \"0\")\r\n                    replacedString = replacedString.replace(this.state.selectedRecord.sseqno || '{9999}', seqno)\r\n                    break;\r\n                default:\r\n                    if (comp.includes('9')) {\r\n                        seqno = seqno.padStart(comp.length - 2, \"0\")\r\n                        replacedString = replacedString.replace(comp, seqno)\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n        return replacedString;\r\n    }\r\n\r\n}\r\nexport default connect(mapStateToProps, {\r\n    updateStore, crudMaster, getRegistrationSubTypeMaster,\r\n    filterColumnData, getRegSubTypeDetails, getSeqNoFormats, selectRegistrationSubType, getEditRegSubType,\r\n    getVersionById, getRegistrationTypeBySampleType, getRegistrationSubTypeOnReload\r\n})(injectIntl(RegistrationSubType))"]},"metadata":{},"sourceType":"module"}