{"ast":null,"code":"import rsapi from '../rsapi';\nimport Axios from 'axios';\nimport { toast } from 'react-toastify';\nimport { rearrangeDateFormat } from '../components/CommonScript';\nimport { DEFAULT_RETURN } from './LoginTypes';\nimport { initRequest } from './LoginAction';\nexport function getComboTemporaryStorage(addParam) {\n  return function (dispatch) {\n    let urlArray = [];\n    const service1 = rsapi.post(\"unit/getUnit\", {\n      userinfo: addParam.userInfo\n    });\n    let userInfo = addParam.userInfo;\n    const service2 = rsapi.post(\"timezone/getLocalTimeByZone\", {\n      userinfo: userInfo\n    });\n    urlArray = [service1, service2];\n    dispatch(initRequest(true));\n    Axios.all(urlArray).then(response => {\n      let selectedId = null;\n      let date = rearrangeDateFormat(userInfo, response[1].data);\n      let selectedRecord = { ...addParam.selectedRecord,\n        \"dstoragedatetime\": date\n      };\n      let masterData = { ...addParam.masterData,\n        \"jsondataBarcodeData\": undefined\n      };\n      selectedId = addParam.primaryKeyField;\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          //  unit,\n          masterData,\n          operation: addParam.operation,\n          screenName: addParam.screenName,\n          selectedRecord: selectedRecord,\n          openModal: true,\n          ncontrolcode: addParam.ncontrolCode,\n          loading: false,\n          selectedId\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getBarcodeDataTemporaryStorage(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"temporarystorage/getBarcodeConfigData\", {\n      userinfo: inputParam.userinfo,\n      nprojecttypecode: inputParam.nprojecttypecode,\n      spositionvalue: inputParam.spositionvalue,\n      nbarcodeLength: inputParam.nbarcodeLength,\n      jsondata: inputParam.jsondata\n    }).then(response => {\n      let masterData = { ...inputParam.masterData,\n        \"jsondataBarcodeData\": response.data.jsondataBarcodeData,\n        \"jsondataBarcodeFields\": response.data.jsondataBarcodeFields\n      };\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          ...inputParam.selectedRecord,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    }); // }\n  };\n}\nexport function saveTemporaryStorage(inputParam, masterData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    const service1 = rsapi.post(\"temporarystorage/\" + inputParam.operation + \"TemporaryStorage\", inputParam.inputData);\n    const service2 = rsapi.post(\"timezone/getLocalTimeByZone\", {\n      userinfo: inputParam.inputData.userinfo\n    });\n    let urlArray = [];\n    urlArray = [service1, service2];\n    Axios.all(urlArray).then(response => {\n      let openModal = false;\n\n      if (inputParam.saveType === 2) {\n        openModal = true;\n      }\n\n      let date = rearrangeDateFormat(inputParam.inputData.userinfo, response[1].data);\n      masterData = { ...masterData,\n        \"TemporaryStorage\": response[0].data.TemporaryStorage,\n        \"jsondataBarcodeData\": \"\"\n      };\n      let selectedRecord = { ...inputParam.selectedRecord,\n        \"sbarcodeid\": \"\",\n        \"nsampleqty\": \"\",\n        \"nunitcode\": \"\",\n        \"scomments\": \"\",\n        \"dstoragedatetime\": date\n      };\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          selectedRecord,\n          openModal: openModal,\n          loading: false,\n          loadEsign: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getActiveTemporaryStorageById(editParam) {\n  return function (dispatch) {\n    let selectedId = null;\n    rsapi.post(\"temporarystorage/getActiveTemporaryStorageById\", {\n      [editParam.primaryKeyField]: editParam.primaryKeyValue,\n      \"nprojecttypecode\": editParam.editRow.nprojecttypecode,\n      \"userinfo\": editParam.userInfo\n    }).then(response => {\n      selectedId = editParam.primaryKeyValue;\n      /*let instname = [];\r\n      instname.push({\r\n          \"value\": response.data.activeSampleColletionByID[\"nunitcode\"],\r\n          \"label\": response.data.activeSampleColletionByID[\"sunitname\"]\r\n      });*/\n\n      let date = rearrangeDateFormat(editParam.userInfo, response.data.activeTemporaryStorageByID['sstoragedatetime']);\n      let jsondataBarcodeFields = response.data.jsondataBarcodeFields;\n      let barcodedata = response.data && response.data.activeTemporaryStorageByID.jsondata;\n      let masterData = { ...editParam.masterData,\n        \"jsondataBarcodeData\": barcodedata,\n        \"jsondataBarcodeFields\": jsondataBarcodeFields\n      };\n      let selectedRecord = { ...editParam.selectedRecord,\n        \"sbarcodeid\": response.data.activeTemporaryStorageByID['sbarcodeid'],\n        // \"nsampleqty\": response.data.activeSampleColletionByID['nsampleqty'],\n        \"dstoragedatetime\": date,\n        \"scomments\": response.data.activeTemporaryStorageByID['scomments']\n      }; //selectedRecord[\"nunitcode\"] = instname[0];\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          selectedRecord,\n          operation: editParam.operation,\n          ncontrolcode: editParam.ncontrolCode,\n          openModal: true,\n          loading: false,\n          selectedId,\n          screenName: editParam.screenName,\n          dataState: editParam.dataState\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getTemporaryStorage(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    return rsapi.post(\"temporarystorage/getTemporaryStorage\", inputParam.inputData).then(response => {\n      let selectedId = null;\n      let masterData = { ...inputParam.masterData,\n        ...response.data\n      };\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          selectedId,\n          masterData,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function validateEsignCredentialTemporaryStorage(inputParam) {\n  return dispatch => {\n    dispatch(initRequest(true));\n    return rsapi.post(\"login/validateEsignCredential\", inputParam.inputData).then(response => {\n      if (response.data === \"Success\") {\n        inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][\"userinfo\"] = inputParam.inputData.userinfo; // if (inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()] &&\n        //     inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignpassword\"]) {\n        //     delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignpassword\"];\n        //     delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esigncomments\"];\n        //     delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignreason\"];\n        //     delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"agree\"];\n        // }\n\n        dispatch(saveTemporaryStorage(inputParam[\"screenData\"][\"inputParam\"], inputParam[\"screenData\"][\"masterData\"]));\n      }\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}","map":{"version":3,"sources":["E:/WorkingFolder/React_Postgres/ALPD/branches/SOURCE-513-FINAL/SOURCE-513-ALPD-4991/QuaLISWeb/src/actions/TemporaryStorageAction.js"],"names":["rsapi","Axios","toast","rearrangeDateFormat","DEFAULT_RETURN","initRequest","getComboTemporaryStorage","addParam","dispatch","urlArray","service1","post","userinfo","userInfo","service2","all","then","response","selectedId","date","data","selectedRecord","masterData","undefined","primaryKeyField","type","payload","operation","screenName","openModal","ncontrolcode","ncontrolCode","loading","catch","error","status","message","warn","getBarcodeDataTemporaryStorage","inputParam","nprojecttypecode","spositionvalue","nbarcodeLength","jsondata","jsondataBarcodeData","jsondataBarcodeFields","saveTemporaryStorage","inputData","saveType","TemporaryStorage","loadEsign","getActiveTemporaryStorageById","editParam","primaryKeyValue","editRow","activeTemporaryStorageByID","barcodedata","dataState","getTemporaryStorage","validateEsignCredentialTemporaryStorage"],"mappings":"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","sourcesContent":["import rsapi from '../rsapi';\r\nimport Axios from 'axios';\r\nimport { toast } from 'react-toastify';\r\n\r\nimport {\r\n    rearrangeDateFormat\r\n} from '../components/CommonScript'\r\nimport {\r\n    DEFAULT_RETURN\r\n} from './LoginTypes';\r\nimport { initRequest } from './LoginAction';\r\n\r\n\r\nexport function getComboTemporaryStorage(addParam) {\r\n    return function (dispatch) {\r\n\r\n        let urlArray = [];\r\n        const service1 = rsapi.post(\"unit/getUnit\", { userinfo: addParam.userInfo });\r\n        let userInfo = addParam.userInfo;\r\n        const service2 = rsapi.post(\"timezone/getLocalTimeByZone\", {\r\n            userinfo: userInfo\r\n        });\r\n\r\n\r\n\r\n        urlArray = [service1, service2]\r\n\r\n        dispatch(initRequest(true));\r\n\r\n        Axios.all(urlArray).then(response => {\r\n\r\n\r\n            let selectedId = null;\r\n         \r\n\r\n            let date = rearrangeDateFormat(userInfo, response[1].data);\r\n\r\n            let selectedRecord = { ...addParam.selectedRecord, \"dstoragedatetime\": date }\r\n\r\n            let masterData = { ...addParam.masterData, \"jsondataBarcodeData\": undefined }\r\n\r\n\r\n            selectedId = addParam.primaryKeyField;\r\n            dispatch({\r\n                type: DEFAULT_RETURN, payload: {\r\n                    //  unit,\r\n                 masterData,\r\n                    operation: addParam.operation, screenName: addParam.screenName,\r\n                    selectedRecord: selectedRecord,\r\n                    openModal: true,\r\n                    ncontrolcode: addParam.ncontrolCode,\r\n                    loading: false, selectedId\r\n                }\r\n            });\r\n        })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\nexport function getBarcodeDataTemporaryStorage(inputParam) {\r\n    return function (dispatch) {\r\n      \r\n            dispatch(initRequest(true));\r\n\r\n            rsapi.post(\"temporarystorage/getBarcodeConfigData\", { userinfo: inputParam.userinfo, nprojecttypecode: inputParam.nprojecttypecode, spositionvalue: inputParam.spositionvalue, nbarcodeLength: inputParam.nbarcodeLength, jsondata: inputParam.jsondata }).then(response => {\r\n\r\n                let masterData = { ...inputParam.masterData, \"jsondataBarcodeData\": response.data.jsondataBarcodeData, \"jsondataBarcodeFields\": response.data.jsondataBarcodeFields }\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData,\r\n                        ...inputParam.selectedRecord,\r\n                        loading: false\r\n                    }\r\n                });\r\n            }\r\n            )\r\n                .catch(error => {\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    }\r\n                    else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                })\r\n       // }\r\n    }\r\n}\r\n\r\nexport function saveTemporaryStorage(inputParam, masterData) {\r\n    return function (dispatch) {\r\n\r\n\r\n        dispatch(initRequest(true));\r\n\r\n        const service1 = rsapi.post(\"temporarystorage/\" + inputParam.operation + \"TemporaryStorage\", inputParam.inputData);\r\n\r\n        const service2 = rsapi.post(\"timezone/getLocalTimeByZone\", {\r\n            userinfo:inputParam.inputData.userinfo\r\n        });\r\n        let urlArray=[];\r\n        urlArray = [service1, service2];\r\n\r\n        Axios.all(urlArray).then(response => {\r\n\r\n            let openModal=false;\r\n            if(inputParam.saveType===2){\r\n             openModal=true;\r\n            }\r\n\r\n            let date = rearrangeDateFormat(inputParam.inputData.userinfo, response[1].data);\r\n\r\n            masterData = { ...masterData, \"TemporaryStorage\": response[0].data.TemporaryStorage, \"jsondataBarcodeData\": \"\" }\r\n            let selectedRecord = { ...inputParam.selectedRecord, \"sbarcodeid\": \"\", \"nsampleqty\": \"\", \"nunitcode\": \"\", \"scomments\": \"\" ,\"dstoragedatetime\":date}\r\n\r\n            dispatch({\r\n                type: DEFAULT_RETURN, payload: {\r\n                    masterData,\r\n                    selectedRecord,\r\n                    openModal: openModal,\r\n                    loading: false,\r\n                    loadEsign: false\r\n                }\r\n            });\r\n        })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n\r\n}\r\n\r\nexport function getActiveTemporaryStorageById(editParam) {\r\n    return function (dispatch) {\r\n\r\n        let selectedId = null;\r\n        rsapi.post(\"temporarystorage/getActiveTemporaryStorageById\", { [editParam.primaryKeyField]: editParam.primaryKeyValue,\"nprojecttypecode\":editParam.editRow.nprojecttypecode, \"userinfo\": editParam.userInfo }).then(response => {\r\n            selectedId = editParam.primaryKeyValue;\r\n            /*let instname = [];\r\n            instname.push({\r\n                \"value\": response.data.activeSampleColletionByID[\"nunitcode\"],\r\n                \"label\": response.data.activeSampleColletionByID[\"sunitname\"]\r\n            });*/\r\n            let date = rearrangeDateFormat(editParam.userInfo, response.data.activeTemporaryStorageByID['sstoragedatetime']);\r\n            let jsondataBarcodeFields = response.data.jsondataBarcodeFields;\r\n            let barcodedata = response.data && response.data.activeTemporaryStorageByID.jsondata;\r\n            let masterData = { ...editParam.masterData, \"jsondataBarcodeData\": barcodedata ,\"jsondataBarcodeFields\":jsondataBarcodeFields}\r\n            let selectedRecord = {\r\n                ...editParam.selectedRecord, \"sbarcodeid\": response.data.activeTemporaryStorageByID['sbarcodeid'],// \"nsampleqty\": response.data.activeSampleColletionByID['nsampleqty'],\r\n\r\n                \"dstoragedatetime\": date, \"scomments\": response.data.activeTemporaryStorageByID['scomments']\r\n            }\r\n            //selectedRecord[\"nunitcode\"] = instname[0];\r\n            dispatch({\r\n                type: DEFAULT_RETURN, payload: {\r\n                    masterData,\r\n                    selectedRecord,\r\n                    operation: editParam.operation,\r\n                    ncontrolcode: editParam.ncontrolCode,\r\n                    openModal: true,\r\n                    loading: false,\r\n                    selectedId,\r\n                    screenName: editParam.screenName,\r\n                    dataState:editParam.dataState\r\n                }\r\n            });\r\n        })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n\r\n}\r\n\r\n\r\nexport function getTemporaryStorage(inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"temporarystorage/getTemporaryStorage\", inputParam.inputData)\r\n            .then(response => {\r\n                let selectedId=null;\r\n                let masterData = { ...inputParam.masterData, ...response.data }\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        selectedId,\r\n                        masterData, loading: false,\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\n\r\nexport function validateEsignCredentialTemporaryStorage(inputParam) {\r\n    return (dispatch) => {\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"login/validateEsignCredential\", inputParam.inputData)\r\n            .then(response => {\r\n                if (response.data === \"Success\") {\r\n                    inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][\"userinfo\"] = inputParam.inputData.userinfo;\r\n\r\n                    // if (inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()] &&\r\n                    //     inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignpassword\"]) {\r\n                    //     delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignpassword\"];\r\n                    //     delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esigncomments\"];\r\n                    //     delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignreason\"];\r\n                    //     delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"agree\"];\r\n                    // }\r\n\r\n\r\n                    dispatch(saveTemporaryStorage(inputParam[\"screenData\"][\"inputParam\"], inputParam[\"screenData\"][\"masterData\"]))\r\n\r\n\r\n                }\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    };\r\n}"]},"metadata":{},"sourceType":"module"}