{"ast":null,"code":"var _jsxFileName = \"D:\\\\LIMSWFH\\\\LIMSPOSTGRESQL\\\\QuaLISWeb\\\\src\\\\pages\\\\configurationmaster\\\\FTPConfig.jsx\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { injectIntl } from 'react-intl';\nimport DataGrid from '../../components/data-grid/data-grid.component';\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\nimport CustomSwitch from '../../components/custom-switch/custom-switch.component';\nimport FormInput from '../../components/form-input/form-input.component';\nimport { callService, crudMaster, openFTPConfigModal, fetchFTPConfigByID, updateStore, validateEsignCredential } from '../../actions';\nimport { toast } from 'react-toastify';\nimport { Row, Col } from 'react-bootstrap';\nimport { process } from '@progress/kendo-data-query';\nimport { ListWrapper } from '../../components/client-group.styles';\nimport { showEsign, getControlMap } from '../../components/CommonScript';\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\nimport Esign from '../audittrail/Esign';\nimport { transactionStatus } from '../../components/Enumeration';\nimport FormNumericInput from '../../components/form-numeric-input/form-numeric-input.component';\nimport FormSelectSearch from '../../components/form-select-search/form-select-search.component';\n\nconst mapStateToProps = state => {\n  return {\n    Login: state.Login\n  };\n};\n\nclass FTPConfig extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.dataStateChange = event => {\n      this.setState({\n        dataResult: process(this.state.data, event.dataState),\n        dataState: event.dataState\n      });\n    };\n\n    this.reloadData = () => {\n      const inputParam = {\n        inputData: {\n          userinfo: this.props.Login.userInfo\n        },\n        methodUrl: this.props.Login.inputParam.methodUrl,\n        displayName: this.props.Login.inputParam.displayName ? this.props.Login.inputParam.displayName : '',\n        classUrl: this.props.Login.inputParam.classUrl,\n        userInfo: this.props.Login.userInfo\n      };\n      this.props.callService(inputParam);\n    };\n\n    this.closeModal = () => {\n      let loadEsign = this.props.Login.loadEsign;\n      let openModal = this.props.Login.openModal;\n      let selectedRecord = this.props.Login.selectedRecord;\n      let selectedId = this.props.Login.selectedId;\n\n      if (this.props.Login.loadEsign) {\n        if (this.props.Login.operation === \"delete\") {\n          loadEsign = false;\n          openModal = false;\n          selectedRecord = {};\n        } else {\n          loadEsign = false;\n          selectedRecord['esignpassword'] = \"\";\n          selectedRecord['esigncomments'] = \"\";\n          selectedRecord['esignreason'] = \"\";\n        }\n      } else {\n        openModal = false;\n        selectedRecord = {};\n        selectedId = null;\n      }\n\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          openModal,\n          loadEsign,\n          selectedRecord,\n          optionsChecklistComponent: [],\n          optionsQBCategory: [],\n          selectedId\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onSaveClick = (saveType, formRef) => {\n      let inputData = [];\n      inputData[\"userinfo\"] = this.props.Login.userInfo;\n      let dataState = undefined;\n      let selectedId = null;\n\n      if (this.props.Login.operation === \"update\") {\n        // edit\n        selectedId = this.state.selectedRecord.nftpno;\n        dataState = this.state.dataState;\n        inputData[\"ftpconfig\"] = {\n          \"nftpno\": this.state.selectedRecord.nftpno,\n          \"susername\": this.state.selectedRecord.susername,\n          \"spassword\": this.state.selectedRecord.spassword,\n          \"nsitecode\": this.props.Login.userInfo.nmastersitecode,\n          //this.state.selectedRecord.nsitecode,\n          \"shost\": this.state.selectedRecord.shost,\n          \"nportno\": this.state.selectedRecord.nportno,\n          \"nsslrequired\": this.state.selectedRecord.nsslrequired,\n          \"nchecksumrequired\": this.state.selectedRecord.nchecksumrequired,\n          \"ndefaultstatus\": this.state.selectedRecord.ndefaultstatus,\n          \"sphysicalpath\": this.state.selectedRecord.sphysicalpath,\n          \"nftptypecode\": this.state.selectedRecord.nftptypecode.value //\"nregionsitecode\":this.state.selectedRecord.nsitecode.value,\n\n        };\n      } else {\n        //add               \n        inputData[\"ftpconfig\"] = {\n          \"susername\": this.state.selectedRecord.susername,\n          \"spassword\": this.state.selectedRecord.spassword,\n          \"nsitecode\": this.props.Login.userInfo.nmastersitecode,\n          //this.state.selectedRecord.nsitecode,\n          \"shost\": this.state.selectedRecord.shost,\n          \"nportno\": this.state.selectedRecord.nportno,\n          \"nsslrequired\": this.state.selectedRecord.nsslrequired,\n          \"nchecksumrequired\": this.state.selectedRecord.nchecksumrequired,\n          \"ndefaultstatus\": this.state.selectedRecord.ndefaultstatus,\n          \"sphysicalpath\": this.state.selectedRecord.sphysicalpath,\n          \"nftptypecode\": this.state.selectedRecord.nftptypecode.value // \"nregionsitecode\":this.state.selectedRecord.nsitecode.value,\n\n        };\n      } //   inputData[\"ftpconfig\"][\"sphysicalpath\"] =this.state.selectedRecord.sphysicalpath+\"\\\\\";\n\n\n      const inputParam = {\n        methodUrl: this.props.Login.inputParam.methodUrl,\n        classUrl: this.props.Login.inputParam.classUrl,\n        displayName: this.props.Login.inputParam.displayName ? this.props.Login.inputParam.displayName : \"\",\n        inputData: inputData,\n        operation: this.props.Login.operation,\n        formRef,\n        saveType,\n        dataState,\n        selectedId,\n        selectedRecord: { ...this.state.selectedRecord\n        }\n      };\n      const masterData = this.props.Login.masterData;\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolcode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData\n            },\n            saveType\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, masterData, \"openModal\");\n      }\n    };\n\n    this.deleteRecord = deleteParam => {\n      const inputParam = {\n        methodUrl: this.props.Login.inputParam.methodUrl,\n        classUrl: this.props.Login.inputParam.classUrl,\n        displayName: this.props.Login.inputParam.displayName ? this.props.Login.inputParam.displayName : \"\",\n        inputData: {\n          \"ftpconfig\": deleteParam.selectedRecord,\n          \"userinfo\": this.props.Login.userInfo\n        },\n        operation: deleteParam.operation,\n        dataState: this.state.dataState,\n        selectedRecord: { ...this.state.selectedRecord\n        }\n      };\n      const masterData = this.props.Login.masterData;\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, deleteParam.ncontrolCode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData\n            },\n            operation: deleteParam.operation,\n            openModal: true,\n            screenName: this.props.Login.inputParam.displayName,\n            optionsQBCategory: this.props.Login.optionsQBCategory,\n            optionsChecklistComponent: this.props.Login.optionsChecklistComponent\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, masterData, \"openModal\");\n      }\n    };\n\n    this.validateEsign = () => {\n      const inputParam = {\n        inputData: {\n          \"userinfo\": { ...this.props.Login.userInfo,\n            sreason: this.state.selectedRecord[\"esigncomments\"],\n            nreasoncode: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].value,\n            spredefinedreason: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].label\n          },\n          password: this.state.selectedRecord[\"esignpassword\"]\n        },\n        screenData: this.props.Login.screenData\n      };\n      this.props.validateEsignCredential(inputParam, \"openModal\");\n    };\n\n    this.onNumericInputOnChange = (value, name) => {\n      const selectedRecord = this.state.selectedRecord || {};\n      selectedRecord[name] = value;\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onInputOnChange = event => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (event.target.type === 'checkbox') {\n        selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\n      } else {\n        selectedRecord[event.target.name] = event.target.value;\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onComboChange = (comboData, fieldName) => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (fieldName === 'nftptypecode') {\n        selectedRecord[fieldName] = comboData;\n      } else {\n        if (comboData) {\n          selectedRecord['siteValue'] = comboData; //selectedRecord[fieldName] = comboData.value;\n\n          selectedRecord[fieldName] = comboData;\n        } else {\n          selectedRecord['siteValue'] = [];\n          selectedRecord[fieldName] = \"\";\n        }\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.formRef = React.createRef();\n    this.extractedColumnList = [];\n    const _dataState = {\n      skip: 0,\n      take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n    };\n    this.state = {\n      data: [],\n      masterStatus: \"\",\n      error: \"\",\n      selectedRecord: {},\n      dataResult: [],\n      dataState: _dataState,\n      userRoleControlRights: [],\n      controlMap: new Map()\n    };\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\n      toast.warn(props.Login.masterStatus);\n      props.Login.masterStatus = \"\";\n    }\n\n    if (props.Login.error !== state.error) {\n      toast.error(props.Login.error);\n      props.Login.error = \"\";\n    }\n\n    return null;\n  }\n\n  render() {\n    let primaryKeyField = \"\";\n    this.extractedColumnList = [// {\"idsName\":\"IDS_SITE\",\"dataField\":\"ssitename\",\"width\":\"200px\"},\n    {\n      \"idsName\": \"IDS_FTPTYPE\",\n      \"dataField\": \"sftptypename\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_USERNAME\",\n      \"dataField\": \"susername\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_HOST\",\n      \"dataField\": \"shost\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_PORTNO\",\n      \"dataField\": \"nportno\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_DEFAULTSTATUS\",\n      \"dataField\": \"sdefaultstatus\",\n      \"width\": \"200px\"\n    }];\n    primaryKeyField = \"nftpno\";\n    const addID = this.props.Login.inputParam && this.state.controlMap.has(\"AddFTPConfig\") && this.state.controlMap.get('AddFTPConfig').ncontrolcode;\n    const editID = this.props.Login.inputParam && this.state.controlMap.has(\"EditFTPConfig\") && this.state.controlMap.get('EditFTPConfig').ncontrolcode;\n    const editParam = {\n      screenName: this.props.Login.inputParam ? this.props.Login.inputParam.displayName : '',\n      operation: \"update\",\n      primaryKeyField,\n      masterData: this.props.Login.masterData,\n      userInfo: this.props.Login.userInfo,\n      ncontrolCode: editID,\n      inputparam: this.props.Login.inputparam\n    };\n    const deleteParam = {\n      screenName: this.props.Login.inputParam ? this.props.Login.inputParam.displayName : '',\n      methodUrl: \"UserMultiRole\",\n      operation: \"delete\"\n    };\n    const mandatoryFields = [{\n      \"idsName\": \"IDS_FTPTYPE\",\n      \"dataField\": \"nftptypecode\",\n      \"mandatoryLabel\": \"IDS_SELECT\",\n      \"controlType\": \"combo\"\n    }, // {\"idsName\": \"IDS_SITE\", \"dataField\": \"nsitecode\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"combo\" },\n    {\n      \"idsName\": \"IDS_USERNAME\",\n      \"dataField\": \"susername\",\n      \"mandatoryLabel\": \"IDS_ENTER\",\n      \"controlType\": \"textbox\"\n    }, {\n      \"idsName\": \"IDS_PASSWORD\",\n      \"dataField\": \"spassword\",\n      \"mandatoryLabel\": \"IDS_ENTER\",\n      \"controlType\": \"textbox\"\n    }, {\n      \"idsName\": \"IDS_HOST\",\n      \"dataField\": \"shost\",\n      \"mandatoryLabel\": \"IDS_ENTER\",\n      \"controlType\": \"textbox\"\n    }, {\n      \"idsName\": \"IDS_PORTNO\",\n      \"dataField\": \"nportno\",\n      \"mandatoryLabel\": \"IDS_ENTER\",\n      \"controlType\": \"textbox\"\n    }, {\n      \"idsName\": \"IDS_PHYSICALPATH\",\n      \"dataField\": \"sphysicalpath\",\n      \"mandatoryLabel\": \"IDS_ENTER\",\n      \"controlType\": \"textbox\"\n    }];\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 261,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 262,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(ListWrapper, {\n      className: \"client-list-content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 263,\n        columnNumber: 25\n      }\n    }, this.state.data ? /*#__PURE__*/React.createElement(DataGrid, {\n      primaryKeyField: primaryKeyField,\n      data: this.state.data,\n      dataResult: this.state.dataResult,\n      dataState: this.state.dataState,\n      dataStateChange: this.dataStateChange,\n      extractedColumnList: this.extractedColumnList,\n      fetchRecord: this.props.fetchFTPConfigByID,\n      deleteRecord: this.deleteRecord,\n      reloadData: this.reloadData,\n      pageable: {\n        buttonCount: 4,\n        pageSizes: true\n      },\n      controlMap: this.state.controlMap,\n      userRoleControlRights: this.state.userRoleControlRights,\n      inputParam: this.props.Login.inputParam,\n      userInfo: this.props.Login.userInfo,\n      isActionRequired: true,\n      isToolBarRequired: true,\n      editParam: editParam,\n      deleteParam: deleteParam,\n      scrollable: \"scrollable\",\n      gridHeight: \"600px\",\n      selectedId: this.props.Login.selectedId,\n      addRecord: () => this.props.openFTPConfigModal(this.props.Login.userInfo, addID),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 279,\n        columnNumber: 33\n      }\n    }) : \"\"))), this.props.Login.openModal ? /*#__PURE__*/React.createElement(SlideOutModal, {\n      onSaveClick: this.onSaveClick,\n      operation: this.props.Login.operation,\n      screenName: \"IDS_FTPCONFIG\",\n      closeModal: this.closeModal,\n      show: this.props.Login.openModal,\n      inputParam: this.props.Login.inputParam,\n      esign: this.props.Login.loadEsign,\n      validateEsign: this.validateEsign,\n      selectedRecord: this.state.selectedRecord || {},\n      mandatoryFields: mandatoryFields,\n      addComponent: this.props.Login.loadEsign ? /*#__PURE__*/React.createElement(Esign, {\n        operation: this.props.Login.operation,\n        onInputOnChange: this.onInputOnChange,\n        inputParam: this.props.Login.inputParam,\n        selectedRecord: this.state.selectedRecord || {},\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 321,\n          columnNumber: 29\n        }\n      }) : /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 327,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(Col, {\n        md: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 348,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(FormSelectSearch, {\n        name: \"nsitecode\",\n        formLabel: this.props.intl.formatMessage({\n          id: \"IDS_FTPTYPE\"\n        }),\n        placeholder: this.props.intl.formatMessage({\n          id: \"IDS_FTPTYPE\"\n        }),\n        value: this.state.selectedRecord.nftptypecode ? this.state.selectedRecord.nftptypecode : \"\",\n        options: this.props.Login.ftpTypeList ? this.props.Login.ftpTypeList : [] // optionId=\"nsitecode\"\n        // optionValue=\"ssitename\"\n        ,\n        isMandatory: true,\n        isMulti: false,\n        isDisabled: false,\n        isSearchable: false,\n        isClearable: false,\n        as: \"select\",\n        onChange: event => this.onComboChange(event, \"nftptypecode\"),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 349,\n          columnNumber: 37\n        }\n      })), /*#__PURE__*/React.createElement(Col, {\n        md: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 366,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(FormInput, {\n        label: this.props.intl.formatMessage({\n          id: \"IDS_USERNAME\"\n        }),\n        name: \"susername\",\n        type: \"text\",\n        onChange: event => this.onInputOnChange(event),\n        placeholder: this.props.intl.formatMessage({\n          id: \"IDS_USERNAME\"\n        }),\n        value: this.state.selectedRecord ? this.state.selectedRecord[\"susername\"] : \"\",\n        isMandatory: true,\n        required: true,\n        maxLength: 100,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 367,\n          columnNumber: 37\n        }\n      }), /*#__PURE__*/React.createElement(FormInput, {\n        label: this.props.intl.formatMessage({\n          id: \"IDS_PASSWORD\"\n        }),\n        name: \"spassword\",\n        type: \"password\",\n        onChange: event => this.onInputOnChange(event),\n        placeholder: this.props.intl.formatMessage({\n          id: \"IDS_PASSWORD\"\n        }),\n        isMandatory: true,\n        required: true,\n        value: this.state.selectedRecord ? this.state.selectedRecord[\"spassword\"] : \"\",\n        maxLength: 100,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 378,\n          columnNumber: 37\n        }\n      }), /*#__PURE__*/React.createElement(FormInput, {\n        label: this.props.intl.formatMessage({\n          id: \"IDS_HOST\"\n        }),\n        name: \"shost\",\n        type: \"text\",\n        onChange: event => this.onInputOnChange(event),\n        placeholder: this.props.intl.formatMessage({\n          id: \"IDS_HOST\"\n        }),\n        value: this.state.selectedRecord ? this.state.selectedRecord[\"shost\"] : \"\",\n        isMandatory: true,\n        required: true,\n        maxLength: 100,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 407,\n          columnNumber: 37\n        }\n      }), /*#__PURE__*/React.createElement(FormNumericInput, {\n        label: this.props.intl.formatMessage({\n          id: \"IDS_PORTNO\"\n        }),\n        name: \"nportno\",\n        type: \"number\",\n        onChange: event => this.onNumericInputOnChange(event, \"nportno\"),\n        placeholder: this.props.intl.formatMessage({\n          id: \"IDS_PORTNO\"\n        }),\n        isMandatory: true,\n        required: true,\n        noStyle: true,\n        strict: true,\n        className: \"form-control\" // max={10000000}\n        ,\n        errors: \"Please provide a valid number.\" // min={0}\n        ,\n        maxLength: 10 //maxLength={100}\n        ,\n        value: this.state.selectedRecord[\"nportno\"],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 418,\n          columnNumber: 37\n        }\n      }), /*#__PURE__*/React.createElement(FormInput, {\n        label: this.props.intl.formatMessage({\n          id: \"IDS_PHYSICALPATH\"\n        }),\n        name: \"sphysicalpath\",\n        type: \"text\",\n        onChange: event => this.onInputOnChange(event),\n        placeholder: this.props.intl.formatMessage({\n          id: \"IDS_PHYSICALPATH\"\n        }),\n        value: this.state.selectedRecord ? this.state.selectedRecord[\"sphysicalpath\"] : \"\",\n        isMandatory: true,\n        required: false,\n        maxLength: 100,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 436,\n          columnNumber: 37\n        }\n      })), /*#__PURE__*/React.createElement(Col, {\n        md: 6,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 448,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(CustomSwitch, {\n        name: \"ndefaultstatus\",\n        type: \"switch\",\n        label: this.props.intl.formatMessage({\n          id: \"IDS_DEFAULTSTATUS\"\n        }),\n        placeholder: this.props.intl.formatMessage({\n          id: \"IDS_DEFAULTSTATUS\"\n        }),\n        defaultValue: this.state.selectedRecord ? this.state.selectedRecord[\"ndefaultstatus\"] === transactionStatus.YES ? true : false : false,\n        isMandatory: false,\n        required: false,\n        checked: this.state.selectedRecord ? this.state.selectedRecord[\"ndefaultstatus\"] === transactionStatus.YES ? true : false : false,\n        onChange: event => this.onInputOnChange(event),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 449,\n          columnNumber: 37\n        }\n      })), this.state.selectedRecord.nftptypecode && this.state.selectedRecord.nftptypecode.value === 1 ? /*#__PURE__*/React.createElement(Col, {\n        md: 6,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 462,\n          columnNumber: 37\n        }\n      }, /*#__PURE__*/React.createElement(CustomSwitch, {\n        name: \"nsslrequired\",\n        type: \"switch\",\n        label: this.props.intl.formatMessage({\n          id: \"IDS_SSL\"\n        }),\n        placeholder: this.props.intl.formatMessage({\n          id: \"IDS_SSL\"\n        }),\n        defaultValue: this.state.selectedRecord ? this.state.selectedRecord[\"nsslrequired\"] === transactionStatus.YES ? true : false : false,\n        isMandatory: false,\n        required: false,\n        checked: this.state.selectedRecord ? this.state.selectedRecord[\"nsslrequired\"] === transactionStatus.YES ? true : false : false,\n        onChange: event => this.onInputOnChange(event),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 463,\n          columnNumber: 41\n        }\n      })) : \"\", /*#__PURE__*/React.createElement(Col, {\n        md: 6,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 477,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(CustomSwitch, {\n        name: \"nchecksumrequired\",\n        type: \"switch\",\n        label: this.props.intl.formatMessage({\n          id: \"IDS_CHECKSUM\"\n        }),\n        placeholder: this.props.intl.formatMessage({\n          id: \"IDS_CHECKSUM\"\n        }),\n        defaultValue: this.state.selectedRecord ? this.state.selectedRecord[\"nchecksumrequired\"] === transactionStatus.YES ? true : false : false,\n        isMandatory: false,\n        required: false,\n        checked: this.state.selectedRecord ? this.state.selectedRecord[\"nchecksumrequired\"] === transactionStatus.YES ? true : false : false,\n        onChange: event => this.onInputOnChange(event),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 478,\n          columnNumber: 37\n        }\n      }))),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 309,\n        columnNumber: 21\n      }\n    }) : \"\");\n  }\n\n  componentDidUpdate(previousProps) {\n    if (this.props.Login.masterData !== previousProps.Login.masterData) {\n      if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\n        const userRoleControlRights = [];\n\n        if (this.props.Login.userRoleControlRights) {\n          this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item => userRoleControlRights.push(item.ncontrolcode));\n        }\n\n        const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode);\n        this.setState({\n          userRoleControlRights,\n          controlMap,\n          data: this.props.Login.masterData,\n          dataResult: process(this.props.Login.masterData, this.state.dataState)\n        });\n      } else {\n        let {\n          dataState\n        } = this.state;\n\n        if (this.props.Login.dataState === undefined) {\n          dataState = {\n            skip: 0,\n            take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n          };\n        }\n\n        this.setState({\n          data: this.props.Login.masterData,\n          dataResult: process(this.props.Login.masterData, dataState),\n          dataState\n        });\n      }\n    }\n\n    if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\n      this.setState({\n        selectedRecord: this.props.Login.selectedRecord\n      });\n    }\n  }\n\n  componentWillUnmount() {\n    const updateInfo = {\n      typeName: DEFAULT_RETURN,\n      data: {\n        masterData: [],\n        inputParam: undefined,\n        operation: null,\n        modalName: undefined\n      }\n    };\n    this.props.updateStore(updateInfo);\n  }\n\n}\n\nexport default connect(mapStateToProps, {\n  callService,\n  crudMaster,\n  openFTPConfigModal,\n  fetchFTPConfigByID,\n  updateStore,\n  validateEsignCredential\n})(injectIntl(FTPConfig));","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/pages/configurationmaster/FTPConfig.jsx"],"names":["React","connect","injectIntl","DataGrid","SlideOutModal","CustomSwitch","FormInput","callService","crudMaster","openFTPConfigModal","fetchFTPConfigByID","updateStore","validateEsignCredential","toast","Row","Col","process","ListWrapper","showEsign","getControlMap","DEFAULT_RETURN","Esign","transactionStatus","FormNumericInput","FormSelectSearch","mapStateToProps","state","Login","FTPConfig","Component","constructor","props","dataStateChange","event","setState","dataResult","data","dataState","reloadData","inputParam","inputData","userinfo","userInfo","methodUrl","displayName","classUrl","closeModal","loadEsign","openModal","selectedRecord","selectedId","operation","updateInfo","typeName","optionsChecklistComponent","optionsQBCategory","onSaveClick","saveType","formRef","undefined","nftpno","susername","spassword","nmastersitecode","shost","nportno","nsslrequired","nchecksumrequired","ndefaultstatus","sphysicalpath","nftptypecode","value","masterData","userRoleControlRights","nformcode","ncontrolcode","screenData","deleteRecord","deleteParam","ncontrolCode","screenName","validateEsign","sreason","nreasoncode","spredefinedreason","label","password","onNumericInputOnChange","name","onInputOnChange","target","type","checked","YES","NO","onComboChange","comboData","fieldName","createRef","extractedColumnList","skip","take","settings","parseInt","masterStatus","error","controlMap","Map","getDerivedStateFromProps","warn","render","primaryKeyField","addID","has","get","editID","editParam","inputparam","mandatoryFields","buttonCount","pageSizes","intl","formatMessage","id","ftpTypeList","componentDidUpdate","previousProps","Object","values","map","item","push","componentWillUnmount","modalName"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { injectIntl } from 'react-intl';\r\nimport DataGrid from '../../components/data-grid/data-grid.component';\r\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\r\nimport CustomSwitch from '../../components/custom-switch/custom-switch.component';\r\nimport FormInput from '../../components/form-input/form-input.component';\r\nimport { callService, crudMaster, openFTPConfigModal, fetchFTPConfigByID, updateStore, validateEsignCredential } from '../../actions';\r\nimport { toast } from 'react-toastify';\r\nimport { Row, Col } from 'react-bootstrap';\r\nimport { process } from '@progress/kendo-data-query';\r\nimport { ListWrapper } from '../../components/client-group.styles'\r\nimport { showEsign, getControlMap } from '../../components/CommonScript';\r\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes'\r\nimport Esign from '../audittrail/Esign';\r\nimport { transactionStatus } from '../../components/Enumeration';\r\nimport FormNumericInput from '../../components/form-numeric-input/form-numeric-input.component';\r\nimport FormSelectSearch from '../../components/form-select-search/form-select-search.component';\r\n\r\nconst mapStateToProps = state => {\r\n    return ({ Login: state.Login })\r\n}\r\n\r\nclass FTPConfig extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.formRef = React.createRef();\r\n        this.extractedColumnList = [];\r\n        const dataState = {\r\n            skip: 0,\r\n            take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5,\r\n        };\r\n        this.state = {\r\n            data: [], masterStatus: \"\", error: \"\", selectedRecord: {},\r\n            dataResult: [],\r\n            dataState: dataState,\r\n            userRoleControlRights: [],\r\n            controlMap: new Map()\r\n        }\r\n    }\r\n    dataStateChange = (event) => {\r\n        this.setState({\r\n            dataResult: process(this.state.data, event.dataState),\r\n            dataState: event.dataState\r\n        });\r\n    }\r\n    reloadData = () => {\r\n        const inputParam = {\r\n            inputData: { userinfo: this.props.Login.userInfo },\r\n            methodUrl: this.props.Login.inputParam.methodUrl,\r\n            displayName: this.props.Login.inputParam.displayName ? this.props.Login.inputParam.displayName : '',\r\n            classUrl: this.props.Login.inputParam.classUrl,\r\n            userInfo: this.props.Login.userInfo\r\n        };\r\n\r\n        this.props.callService(inputParam);\r\n    }\r\n\r\n\r\n    closeModal = () => {\r\n        let loadEsign = this.props.Login.loadEsign;\r\n        let openModal = this.props.Login.openModal;\r\n        let selectedRecord = this.props.Login.selectedRecord;\r\n        let selectedId = this.props.Login.selectedId;\r\n\r\n        if (this.props.Login.loadEsign) {\r\n            if (this.props.Login.operation === \"delete\") {\r\n                loadEsign = false;\r\n                openModal = false;\r\n                selectedRecord = {};\r\n            }\r\n            else {\r\n                loadEsign = false;\r\n                selectedRecord['esignpassword'] = \"\"\r\n                selectedRecord['esigncomments'] = \"\"\r\n                selectedRecord['esignreason'] = \"\"\r\n            }\r\n        }\r\n        else {\r\n            openModal = false;\r\n            selectedRecord = {};\r\n            selectedId = null;\r\n        }\r\n\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { openModal, loadEsign, selectedRecord, optionsChecklistComponent: [], optionsQBCategory: [], selectedId }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    };\r\n\r\n    onSaveClick = (saveType, formRef) => {\r\n        let inputData = [];\r\n        inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n        let dataState = undefined;\r\n        let selectedId = null;\r\n        if (this.props.Login.operation === \"update\") {\r\n            // edit\r\n            selectedId = this.state.selectedRecord.nftpno\r\n            dataState = this.state.dataState\r\n            inputData[\"ftpconfig\"] = {\r\n                \"nftpno\": this.state.selectedRecord.nftpno,\r\n                \"susername\": this.state.selectedRecord.susername,\r\n                \"spassword\": this.state.selectedRecord.spassword,\r\n                \"nsitecode\": this.props.Login.userInfo.nmastersitecode,//this.state.selectedRecord.nsitecode,\r\n                \"shost\": this.state.selectedRecord.shost,\r\n                \"nportno\": this.state.selectedRecord.nportno,\r\n                \"nsslrequired\": this.state.selectedRecord.nsslrequired,\r\n                \"nchecksumrequired\": this.state.selectedRecord.nchecksumrequired,\r\n                \"ndefaultstatus\": this.state.selectedRecord.ndefaultstatus,\r\n                \"sphysicalpath\": this.state.selectedRecord.sphysicalpath,\r\n                \"nftptypecode\": this.state.selectedRecord.nftptypecode.value,\r\n                //\"nregionsitecode\":this.state.selectedRecord.nsitecode.value,\r\n            }\r\n        }\r\n        else {\r\n            //add               \r\n            inputData[\"ftpconfig\"] =\r\n            {\r\n                \"susername\": this.state.selectedRecord.susername,\r\n                \"spassword\": this.state.selectedRecord.spassword,\r\n                \"nsitecode\": this.props.Login.userInfo.nmastersitecode,//this.state.selectedRecord.nsitecode,\r\n                \"shost\": this.state.selectedRecord.shost,\r\n                \"nportno\": this.state.selectedRecord.nportno,\r\n                \"nsslrequired\": this.state.selectedRecord.nsslrequired,\r\n                \"nchecksumrequired\": this.state.selectedRecord.nchecksumrequired,\r\n                \"ndefaultstatus\": this.state.selectedRecord.ndefaultstatus,\r\n                \"sphysicalpath\": this.state.selectedRecord.sphysicalpath,\r\n                \"nftptypecode\": this.state.selectedRecord.nftptypecode.value,\r\n               // \"nregionsitecode\":this.state.selectedRecord.nsitecode.value,\r\n            };\r\n        }\r\n\r\n        //   inputData[\"ftpconfig\"][\"sphysicalpath\"] =this.state.selectedRecord.sphysicalpath+\"\\\\\";\r\n        const inputParam = {\r\n            methodUrl: this.props.Login.inputParam.methodUrl,\r\n            classUrl: this.props.Login.inputParam.classUrl,\r\n            displayName: this.props.Login.inputParam.displayName ? this.props.Login.inputParam.displayName : \"\",\r\n            inputData: inputData,\r\n            operation: this.props.Login.operation,\r\n            formRef, saveType, dataState, selectedId,\r\n            selectedRecord:{...this.state.selectedRecord}\r\n        }\r\n        const masterData = this.props.Login.masterData;\r\n\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolcode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData }, saveType\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.crudMaster(inputParam, masterData, \"openModal\");\r\n        }\r\n    }\r\n\r\n    deleteRecord = (deleteParam) => {\r\n\r\n        const inputParam = {\r\n            methodUrl: this.props.Login.inputParam.methodUrl,\r\n            classUrl: this.props.Login.inputParam.classUrl,\r\n            displayName: this.props.Login.inputParam.displayName ? this.props.Login.inputParam.displayName : \"\",\r\n            inputData: { \"ftpconfig\": deleteParam.selectedRecord, \"userinfo\": this.props.Login.userInfo },\r\n            operation: deleteParam.operation,\r\n            dataState: this.state.dataState,\r\n            selectedRecord:{...this.state.selectedRecord}\r\n        }\r\n        const masterData = this.props.Login.masterData;\r\n        if (\r\n            showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, deleteParam.ncontrolCode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true,\r\n                    screenData: { inputParam, masterData },\r\n                    operation: deleteParam.operation,\r\n                    openModal: true,\r\n                    screenName: this.props.Login.inputParam.displayName,\r\n                    optionsQBCategory: this.props.Login.optionsQBCategory,\r\n                    optionsChecklistComponent: this.props.Login.optionsChecklistComponent\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.crudMaster(inputParam, masterData, \"openModal\");\r\n        }\r\n    }\r\n    static getDerivedStateFromProps(props, state) {\r\n\r\n        if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\r\n            toast.warn(props.Login.masterStatus);\r\n            props.Login.masterStatus = \"\";\r\n        }\r\n\r\n        if (props.Login.error !== state.error) {\r\n            toast.error(props.Login.error)\r\n            props.Login.error = \"\";\r\n        }\r\n        return null;\r\n    }\r\n    validateEsign = () => {\r\n        const inputParam = {\r\n            inputData: {\r\n                \"userinfo\": {\r\n                    ...this.props.Login.userInfo,\r\n                    sreason: this.state.selectedRecord[\"esigncomments\"],\r\n                    nreasoncode: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].value,\r\n                    spredefinedreason: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].label,\r\n                },\r\n                password: this.state.selectedRecord[\"esignpassword\"]\r\n            },\r\n            screenData: this.props.Login.screenData\r\n        }\r\n        this.props.validateEsignCredential(inputParam, \"openModal\");\r\n    }\r\n    render() {\r\n        let primaryKeyField = \"\";\r\n        this.extractedColumnList = [\r\n           // {\"idsName\":\"IDS_SITE\",\"dataField\":\"ssitename\",\"width\":\"200px\"},\r\n            { \"idsName\": \"IDS_FTPTYPE\", \"dataField\": \"sftptypename\", \"width\": \"200px\" },\r\n            { \"idsName\": \"IDS_USERNAME\", \"dataField\": \"susername\", \"width\": \"200px\" },            \r\n            { \"idsName\": \"IDS_HOST\", \"dataField\": \"shost\", \"width\": \"200px\" },\r\n            { \"idsName\": \"IDS_PORTNO\", \"dataField\": \"nportno\", \"width\": \"200px\" },\r\n            { \"idsName\": \"IDS_DEFAULTSTATUS\", \"dataField\": \"sdefaultstatus\", \"width\": \"200px\" }\r\n        ];\r\n        primaryKeyField = \"nftpno\";\r\n        const addID = this.props.Login.inputParam && this.state.controlMap.has(\"AddFTPConfig\")\r\n            && this.state.controlMap.get('AddFTPConfig').ncontrolcode;\r\n        const editID = this.props.Login.inputParam && this.state.controlMap.has(\"EditFTPConfig\")\r\n            && this.state.controlMap.get('EditFTPConfig').ncontrolcode;\r\n        const editParam = {\r\n            screenName: this.props.Login.inputParam ? this.props.Login.inputParam.displayName : '',\r\n            operation: \"update\",\r\n            primaryKeyField,\r\n            masterData: this.props.Login.masterData,\r\n            userInfo: this.props.Login.userInfo,\r\n            ncontrolCode: editID,\r\n            inputparam: this.props.Login.inputparam,\r\n        };\r\n        const deleteParam = {\r\n            screenName: this.props.Login.inputParam ? this.props.Login.inputParam.displayName : '',\r\n            methodUrl: \"UserMultiRole\",\r\n            operation: \"delete\"\r\n        };\r\n        const mandatoryFields = [{ \"idsName\": \"IDS_FTPTYPE\", \"dataField\": \"nftptypecode\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"combo\" },\r\n       // {\"idsName\": \"IDS_SITE\", \"dataField\": \"nsitecode\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"combo\" },\r\n        { \"idsName\": \"IDS_USERNAME\", \"dataField\": \"susername\", \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"textbox\" },\r\n        { \"idsName\": \"IDS_PASSWORD\", \"dataField\": \"spassword\", \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"textbox\" },\r\n        { \"idsName\": \"IDS_HOST\", \"dataField\": \"shost\", \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"textbox\" },\r\n        { \"idsName\": \"IDS_PORTNO\", \"dataField\": \"nportno\", \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"textbox\" },\r\n        { \"idsName\": \"IDS_PHYSICALPATH\", \"dataField\": \"sphysicalpath\", \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"textbox\"}\r\n        ]\r\n\r\n        return (\r\n            <>\r\n                <Row>\r\n                    <Col>\r\n                        <ListWrapper className=\"client-list-content\">\r\n                            {/* <PrimaryHeader className=\"d-flex justify-content-between mb-3\">\r\n                            <HeaderName className=\"header-primary-md\">\r\n                                {this.props.Login.inputParam&&this.props.Login.inputParam.displayName ?\r\n                                    <FormattedMessage id={this.props.Login.inputParam.displayName} /> : \"\"}\r\n                            </HeaderName>\r\n                            <Button className=\"btn btn-user btn-primary-blue\" \r\n                             hidden={this.state.userRoleControlRights.indexOf(addID) === -1}\r\n                            onClick={()=>this.props.openFTPConfigModal(this.props.userInfo,addID)} \r\n                            role=\"button\">\r\n                                <FontAwesomeIcon icon={faPlus} /> { }                          \r\n                                <FormattedMessage id=\"IDS_ADD\" defaultMessage='Add'/> \r\n                            </Button>\r\n                        </PrimaryHeader> */}\r\n\r\n                            {this.state.data ?\r\n                                <DataGrid\r\n                                    primaryKeyField={primaryKeyField}\r\n                                    data={this.state.data}\r\n                                    dataResult={this.state.dataResult}\r\n                                    dataState={this.state.dataState}\r\n                                    dataStateChange={this.dataStateChange}\r\n                                    extractedColumnList={this.extractedColumnList}\r\n                                    fetchRecord={this.props.fetchFTPConfigByID}\r\n                                    deleteRecord={this.deleteRecord}\r\n                                    reloadData={this.reloadData}\r\n                                    pageable={{ buttonCount: 4, pageSizes: true }}\r\n                                    controlMap={this.state.controlMap}\r\n                                    userRoleControlRights={this.state.userRoleControlRights}\r\n                                    inputParam={this.props.Login.inputParam}\r\n                                    userInfo={this.props.Login.userInfo}\r\n                                    isActionRequired={true}\r\n                                    isToolBarRequired={true}\r\n                                    editParam={editParam}\r\n                                    deleteParam={deleteParam}\r\n                                    scrollable={\"scrollable\"}\r\n                                    gridHeight={\"600px\"}\r\n                                    selectedId={this.props.Login.selectedId}\r\n                                    addRecord={() => this.props.openFTPConfigModal(this.props.Login.userInfo, addID)}\r\n\r\n                                />\r\n                                : \"\"}\r\n                        </ListWrapper>\r\n                    </Col>\r\n                </Row>\r\n                {this.props.Login.openModal ?\r\n                    <SlideOutModal\r\n                        onSaveClick={this.onSaveClick}\r\n                        operation={this.props.Login.operation}\r\n                        screenName=\"IDS_FTPCONFIG\"\r\n                        closeModal={this.closeModal}\r\n                        show={this.props.Login.openModal}\r\n                        inputParam={this.props.Login.inputParam}\r\n                        esign={this.props.Login.loadEsign}\r\n                        validateEsign={this.validateEsign}\r\n                        selectedRecord={this.state.selectedRecord || {}}\r\n                        mandatoryFields={mandatoryFields}\r\n                        addComponent={this.props.Login.loadEsign ?\r\n                            <Esign operation={this.props.Login.operation}\r\n                                onInputOnChange={this.onInputOnChange}\r\n                                inputParam={this.props.Login.inputParam}\r\n                                selectedRecord={this.state.selectedRecord || {}}\r\n                            />\r\n                            :\r\n                            <Row>\r\n                                {/* <Col md={12}>\r\n                                    <FormSelectSearch\r\n                                        name={\"nsitecode\"}\r\n                                        formLabel={this.props.intl.formatMessage({ id: \"IDS_SITE\" })}\r\n                                        placeholder={this.props.intl.formatMessage({ id: \"IDS_SITE\" })}\r\n                                        value={this.state.selectedRecord ? this.state.selectedRecord.nsitecode : []}\r\n                                        options={this.props.Login.siteOptions ? this.props.Login.siteOptions : []}\r\n                                        // optionId=\"nsitecode\"\r\n                                        // optionValue=\"ssitename\"\r\n                                        isMandatory={true}\r\n                                        isMulti={false}\r\n                                        isDisabled={false}\r\n                                        isSearchable={false}\r\n                                        isClearable={false}\r\n                                        as={\"select\"}\r\n                                        onChange={(event) => this.onComboChange(event, \"nsitecode\")}\r\n                                    />\r\n                                </Col> */}\r\n\r\n\r\n                                <Col md={12}>\r\n                                    <FormSelectSearch\r\n                                        name={\"nsitecode\"}\r\n                                        formLabel={this.props.intl.formatMessage({ id: \"IDS_FTPTYPE\" })}\r\n                                        placeholder={this.props.intl.formatMessage({ id: \"IDS_FTPTYPE\" })}\r\n                                        value={this.state.selectedRecord.nftptypecode ? this.state.selectedRecord.nftptypecode : \"\"}\r\n                                        options={this.props.Login.ftpTypeList ? this.props.Login.ftpTypeList : []}\r\n                                        // optionId=\"nsitecode\"\r\n                                        // optionValue=\"ssitename\"\r\n                                        isMandatory={true}\r\n                                        isMulti={false}\r\n                                        isDisabled={false}\r\n                                        isSearchable={false}\r\n                                        isClearable={false}\r\n                                        as={\"select\"}\r\n                                        onChange={(event) => this.onComboChange(event, \"nftptypecode\")}\r\n                                    />\r\n                                </Col>\r\n                                <Col md={12}>\r\n                                    <FormInput\r\n                                        label={this.props.intl.formatMessage({ id: \"IDS_USERNAME\" })}\r\n                                        name={\"susername\"}\r\n                                        type=\"text\"\r\n                                        onChange={(event) => this.onInputOnChange(event)}\r\n                                        placeholder={this.props.intl.formatMessage({ id: \"IDS_USERNAME\" })}\r\n                                        value={this.state.selectedRecord ? this.state.selectedRecord[\"susername\"] : \"\"}\r\n                                        isMandatory={true}\r\n                                        required={true}\r\n                                        maxLength={100}\r\n                                    />\r\n                                    <FormInput\r\n                                        label={this.props.intl.formatMessage({ id: \"IDS_PASSWORD\" })}\r\n                                        name={\"spassword\"}\r\n                                        type=\"password\"\r\n                                        onChange={(event) => this.onInputOnChange(event)}\r\n                                        placeholder={this.props.intl.formatMessage({ id: \"IDS_PASSWORD\" })}\r\n                                        isMandatory={true}\r\n                                        required={true}\r\n                                        value={this.state.selectedRecord ? this.state.selectedRecord[\"spassword\"] : \"\"}\r\n                                        maxLength={100}\r\n                                    />\r\n                                    {/* <Col md={12}>/site commented/\r\n                            <FormSelectSearch\r\n                                name={\"nsitecode\"}\r\n                                formLabel={this.props.intl.formatMessage({ id:\"IDS_SITE\"})}\r\n                                placeholder={this.props.intl.formatMessage({ id:\"IDS_SITE\"})}\r\n                                value={this.state.selectedRecord?this.state.selectedRecord.siteValue:[]}\r\n                                options={this.props.Login.siteOptions?this.props.Login.siteOptions:[]}\r\n                                optionId=\"nsitecode\"\r\n                                optionValue=\"ssitename\"\r\n                                isMandatory={true}\r\n                                isMulti={false}\r\n                                isDisabled={false}\r\n                                isSearchable={false}\r\n                                isClearable={false}\r\n                                as={\"select\"}\r\n                                onChange={(event)=>this.onComboChange(event,\"nsitecode\")}\r\n                            />\r\n                        </Col> */}\r\n                                    <FormInput\r\n                                        label={this.props.intl.formatMessage({ id: \"IDS_HOST\" })}\r\n                                        name={\"shost\"}\r\n                                        type=\"text\"\r\n                                        onChange={(event) => this.onInputOnChange(event)}\r\n                                        placeholder={this.props.intl.formatMessage({ id: \"IDS_HOST\" })}\r\n                                        value={this.state.selectedRecord ? this.state.selectedRecord[\"shost\"] : \"\"}\r\n                                        isMandatory={true}\r\n                                        required={true}\r\n                                        maxLength={100}\r\n                                    />\r\n                                    <FormNumericInput\r\n                                        label={this.props.intl.formatMessage({ id: \"IDS_PORTNO\" })}\r\n                                        name={\"nportno\"}\r\n                                        type=\"number\"\r\n                                        onChange={(event) => this.onNumericInputOnChange(event, \"nportno\")}\r\n                                        placeholder={this.props.intl.formatMessage({ id: \"IDS_PORTNO\" })}\r\n                                        isMandatory={true}\r\n                                        required={true}\r\n                                        noStyle={true}\r\n                                        strict={true}\r\n                                        className=\"form-control\"\r\n                                        // max={10000000}\r\n                                        errors=\"Please provide a valid number.\"\r\n                                        // min={0}\r\n                                        maxLength={10}\r\n                                        //maxLength={100}\r\n                                        value={this.state.selectedRecord[\"nportno\"]}\r\n                                    />\r\n                                    <FormInput\r\n                                        label={this.props.intl.formatMessage({ id: \"IDS_PHYSICALPATH\" })}\r\n                                        name={\"sphysicalpath\"}\r\n                                        type=\"text\"\r\n                                        onChange={(event) => this.onInputOnChange(event)}\r\n                                        placeholder={this.props.intl.formatMessage({ id: \"IDS_PHYSICALPATH\" })}\r\n                                        value={this.state.selectedRecord ? this.state.selectedRecord[\"sphysicalpath\"] : \"\"}\r\n                                        isMandatory={true}\r\n                                        required={false}\r\n                                        maxLength={100}\r\n                                    />\r\n                                </Col>\r\n                                <Col md={6}>\r\n                                    <CustomSwitch\r\n                                        name={\"ndefaultstatus\"}\r\n                                        type=\"switch\"\r\n                                        label={this.props.intl.formatMessage({ id: \"IDS_DEFAULTSTATUS\" })}\r\n                                        placeholder={this.props.intl.formatMessage({ id: \"IDS_DEFAULTSTATUS\" })}\r\n                                        defaultValue={this.state.selectedRecord ? this.state.selectedRecord[\"ndefaultstatus\"] === transactionStatus.YES ? true : false : false}\r\n                                        isMandatory={false}\r\n                                        required={false}\r\n                                        checked={this.state.selectedRecord ? this.state.selectedRecord[\"ndefaultstatus\"] === transactionStatus.YES ? true : false : false}\r\n                                        onChange={(event) => this.onInputOnChange(event)}\r\n                                    />\r\n                                </Col>\r\n                                {this.state.selectedRecord.nftptypecode && this.state.selectedRecord.nftptypecode.value === 1 ?\r\n                                    <Col md={6}>\r\n                                        <CustomSwitch\r\n                                            name={\"nsslrequired\"}\r\n                                            type=\"switch\"\r\n                                            label={this.props.intl.formatMessage({ id: \"IDS_SSL\" })}\r\n                                            placeholder={this.props.intl.formatMessage({ id: \"IDS_SSL\" })}\r\n                                            defaultValue={this.state.selectedRecord ? this.state.selectedRecord[\"nsslrequired\"] === transactionStatus.YES ? true : false : false}\r\n                                            isMandatory={false}\r\n                                            required={false}\r\n                                            checked={this.state.selectedRecord ? this.state.selectedRecord[\"nsslrequired\"] === transactionStatus.YES ? true : false : false}\r\n                                            onChange={(event) => this.onInputOnChange(event)}\r\n                                        />\r\n                                    </Col>\r\n                                    : \"\"}\r\n\r\n                                <Col md={6}>\r\n                                    <CustomSwitch\r\n                                        name={\"nchecksumrequired\"}\r\n                                        type=\"switch\"\r\n                                        label={this.props.intl.formatMessage({ id: \"IDS_CHECKSUM\" })}\r\n                                        placeholder={this.props.intl.formatMessage({ id: \"IDS_CHECKSUM\" })}\r\n                                        defaultValue={this.state.selectedRecord ? this.state.selectedRecord[\"nchecksumrequired\"] === transactionStatus.YES ? true : false : false}\r\n                                        isMandatory={false}\r\n                                        required={false}\r\n                                        checked={this.state.selectedRecord ? this.state.selectedRecord[\"nchecksumrequired\"] === transactionStatus.YES ? true : false : false}\r\n                                        onChange={(event) => this.onInputOnChange(event)}\r\n                                    />\r\n                                </Col>\r\n                            </Row>\r\n                        } /> : \"\"}\r\n\r\n            </>\r\n        );\r\n    }\r\n\r\n    onNumericInputOnChange = (value, name) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        selectedRecord[name] = value;\r\n        this.setState({ selectedRecord });\r\n\r\n    }\r\n    componentDidUpdate(previousProps) {\r\n\r\n        if (this.props.Login.masterData !== previousProps.Login.masterData) {\r\n            if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\r\n                const userRoleControlRights = [];\r\n                if (this.props.Login.userRoleControlRights) {\r\n                    this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item =>\r\n                        userRoleControlRights.push(item.ncontrolcode))\r\n                }\r\n                const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode)\r\n                this.setState({\r\n                    userRoleControlRights, controlMap, data: this.props.Login.masterData,\r\n                    dataResult: process(this.props.Login.masterData, this.state.dataState),\r\n                });\r\n            }\r\n            else {\r\n                let { dataState } = this.state;\r\n                if (this.props.Login.dataState === undefined) {\r\n                    dataState = { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 }\r\n                }\r\n                this.setState({\r\n                    data: this.props.Login.masterData,\r\n                    dataResult: process(this.props.Login.masterData, dataState),\r\n                    dataState\r\n                });\r\n            }\r\n        }\r\n        if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\r\n            this.setState({ selectedRecord: this.props.Login.selectedRecord });\r\n        }\r\n    }\r\n    componentWillUnmount() {\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                masterData: [], inputParam: undefined, operation: null, modalName: undefined\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n    onInputOnChange = (event) => {\r\n\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if (event.target.type === 'checkbox') {\r\n            selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\r\n        }\r\n        else {\r\n            selectedRecord[event.target.name] = event.target.value;\r\n        }\r\n        this.setState({ selectedRecord });\r\n\r\n    }\r\n    onComboChange = (comboData, fieldName) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if (fieldName === 'nftptypecode') {\r\n            selectedRecord[fieldName] = comboData;\r\n        } else {\r\n            if (comboData) {\r\n                selectedRecord['siteValue'] = comboData\r\n                //selectedRecord[fieldName] = comboData.value;\r\n                selectedRecord[fieldName] = comboData;\r\n            } else {\r\n                selectedRecord['siteValue'] = []\r\n                selectedRecord[fieldName] = \"\";\r\n            }\r\n        }\r\n\r\n        this.setState({ selectedRecord });\r\n    }\r\n}\r\nexport default connect(mapStateToProps, { callService, crudMaster, openFTPConfigModal, fetchFTPConfigByID, updateStore, validateEsignCredential })(injectIntl(FTPConfig));"]},"metadata":{},"sourceType":"module"}