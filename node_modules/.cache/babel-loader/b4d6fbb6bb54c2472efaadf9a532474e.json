{"ast":null,"code":"var _jsxFileName = \"E:\\\\WorkingFolder\\\\React_Postgres\\\\ALPD\\\\SOURCE-512\\\\QuaLISWeb\\\\src\\\\components\\\\ListBoxDraggable.jsx\";\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { ListBox, ListBoxToolbar, processListBoxData, processListBoxDragAndDrop } from '@progress/kendo-react-listbox';\nimport { useLayoutEffect, useRef, useState } from 'react';\nimport { ClientList, SearchAdd, MediaHeader, MediaSubHeader, MediaLabel, MediaSubHeaderText, SearchIcon, ContentPanel } from '../components/App.styles';\nimport PerfectScrollbar from 'react-perfect-scrollbar';\nimport { connect } from 'react-redux';\nimport '@progress/kendo-theme-default/dist/all.css';\nimport { injectIntl } from 'react-intl';\nimport { getActionIcon } from '../components/HoverIcons';\nimport { FormControl, ListGroup, Media, Nav } from 'react-bootstrap';\nimport { faArrowsAlt, faArrowsAltH, faArrowsAltV, faEquals, faEye, faGift, faGripVertical, faSearch, faSort, faTimes } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { ListMasterWrapper } from '../components/list-master/list-master.styles';\nimport { designProperties } from '../components/Enumeration';\nimport '../pages/registration/registration.css';\nconst SELECTED_FIELD = 'selected';\n\nclass ListBoxDraggable extends React.Component {\n  constructor(_props) {\n    console.log('eeeee222');\n    super(_props);\n\n    this.handleItemClick = (event, data, connectedData) => {\n      this.props.getMasterDetail(event.dataItem, this.props.userInfo, this.props.masterData); // this.setState({\n      //     ...this.state,\n      //     [data]: this.state[data].map(item => {\n      //         if (item.srulename === event.dataItem.srulename) {\n      //             item[SELECTED_FIELD] = true;// !item[SELECTED_FIELD];\n      //         }\n      //         else //if (!event.nativeEvent.ctrlKey)\n      //         {\n      //             item[SELECTED_FIELD] = false;\n      //         }\n      //         return item;\n      //     })\n      //     // ,\n      //     // [connectedData]: this.state[connectedData].map(item => {\n      //     //     item[SELECTED_FIELD] = false;\n      //     //     return item;\n      //     // })\n      // });\n    };\n\n    this.handleToolBarClick = e => {\n      let toolName = e.toolName || ''; // let sortableField = this.props.sortableField\n      // let sourceSortValue = (this.state.masterList.filter(x => x[SELECTED_FIELD] === true))[0][sortableField]  \n      // if (toolName === 'moveDown') {\n      //     let index=this.state.masterList.findIndex(x => x[SELECTED_FIELD]=== true);\n      //     let destinationSortValue = (this.state.masterList[index+1])[sortableField];\n      //     (this.state.masterList[index+1])[sortableField]=sourceSortValue;\n      //     (this.state.masterList.filter(x => x[SELECTED_FIELD] === true))[0][sortableField]=destinationSortValue;\n      // }else{\n      //     let index=this.state.masterList.findIndex(x => x[SELECTED_FIELD]=== true);\n      //     let destinationSortValue = (this.state.masterList[index-1])[sortableField];\n      //     (this.state.masterList[index-1])[sortableField]=sourceSortValue;\n      //     (this.state.masterList.filter(x => x[SELECTED_FIELD] === true))[0][sortableField]=destinationSortValue;\n      // }   \n\n      let result = processListBoxData(this.state.masterList, this.state.developers, toolName, SELECTED_FIELD);\n      let sortedList = result['listBoxOneData'];\n      let sortableField = this.props.sortableField;\n      sortedList.map((item, i) => item[sortableField] = i + 1);\n      this.props.saveExecutionOrder(sortedList); // this.setState({\n      //     ...this.state, sortedList,\n      //     masterList: sortedList//result.listBoxOneData//,\n      //     //  developers: result.listBoxTwoData\n      // });\n    };\n\n    this.handleDragStart = e => {\n      this.setState({ ...this.state,\n        draggedItem: e.dataItem\n      });\n    };\n\n    this.saveExecutionOrder = sortedArray => {\n      let sortableField = this.props.sortableField;\n      sortedArray.map((item, i) => item[sortableField] = i + 1);\n      this.props.saveExecutionOrder(sortedArray);\n    };\n\n    this.handleDrop = e => {\n      // let sortableField = this.props.sortableField\n      // let destinationSortValue = e.dataItem[sortableField]\n      // let sourceSortValue = this.state.draggedItem[sortableField]\n      // let sourceindex=this.state.masterList.findIndex(x => x===this.state.draggedItem);\n      // let destinationindex=this.state.masterList.findIndex(x => x=== e.dataItem);\n      // this.state.masterList[sourceindex][sortableField]=destinationSortValue\n      // this.state.masterList[destinationindex][sortableField]=sourceSortValue\n      // this.state.draggedItem[sortableField] = destinationSortValue\n      // e.dataItem[sortableField] = sourceSortValue\n      let result = processListBoxDragAndDrop(this.state.masterList, this.state.developers, this.state.draggedItem, e.dataItem, this.props.mainField);\n      let sortedList = result['listBoxOneData'];\n      let sortableField = this.props.sortableField;\n      sortedList.map((item, i) => item[sortableField] = i + 1);\n      this.props.saveExecutionOrder(sortedList); // this.setState({\n      //     ...this.state, sortedList,\n      //     masterList: sortedList//result.listBoxOneData//,\n      //     //    developers: result.listBoxTwoData\n      // });\n    };\n\n    this.toggleSearch = () => {\n      this.setState({\n        showSearch: !this.state.showSearch\n      });\n    };\n\n    this.filterColumn = event => {\n      let filterValue = event.target.value;\n\n      if (event.keyCode === 13) {\n        this.props.filterColumnData(filterValue, this.props.filterParam, this.props.searchListName);\n      }\n    };\n\n    this.MyCustomItem = props => {\n      let {\n        dataItem,\n        selected,\n        ...others\n      } = props;\n      let sortableField = this.props.sortableField;\n      let index = dataItem[sortableField];\n      const ref = useRef(null);\n      const [width, setWidth] = useState(0);\n      useLayoutEffect(() => {\n        function updateSize() {\n          setWidth(ref.current.offsetWidth - 200);\n        }\n\n        window.addEventListener('resize', updateSize);\n        updateSize();\n        return () => window.removeEventListener('resize', updateSize);\n      }, []);\n      return /*#__PURE__*/React.createElement(ListGroup.Item, Object.assign({\n        as: \"li\",\n        ref: ref\n      }, others, {\n        className: `${this.state.showList === props.index ? \"hover\" : \"\"}  list-custom-ico-on-hover list-bgcolor \n             ${this.props && this.props.selectedMaster && this.props.selectedMaster[this.props.primaryKeyField] === dataItem[this.props.primaryKeyField] ? \"active\" : \"\"}`,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 13\n        }\n      }), /*#__PURE__*/React.createElement(Media, {\n        onClick: e => this.props.getMasterDetail ? this.handleItemClick(props, 'masterList', 'developers') : \"\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 17\n        }\n      }, this.props.isSearchedDataPresent ? \"\" : /*#__PURE__*/React.createElement(MediaHeader, {\n        style: {\n          marginTop: \"10px\",\n          marginRight: \"5px\",\n          content: \"||\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 62\n        }\n      }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n        icon: faGripVertical,\n        className: \"dragicon\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 25\n        }\n      })), /*#__PURE__*/React.createElement(MediaHeader, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(MediaHeader, {\n        \"data-tip\": props.dataItem[this.props.mainField] //data-for=\"tooltip-common-wrap\"\n        ,\n        style: this.props.subFields ? {\n          maxWidth: \"15rem\",\n          marginLeft: \"10px\",\n          fontSize: \"1.10rem\"\n        } : {\n          maxWidth: \"15rem\",\n          marginLeft: \"10px\",\n          fontSize: \"1.10rem\",\n          marginTop: '10px'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 182,\n          columnNumber: 29\n        }\n      }, props.dataItem[this.props.mainField])), /*#__PURE__*/React.createElement(MediaSubHeader, {\n        style: {\n          padding: \"0.1rem\",\n          marginLeft: \"9px\"\n        },\n        className: \"text-wrap\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 185,\n          columnNumber: 25\n        }\n      }, this.props.subFields && this.props.subFields.map((field, index) => this.props.subFieldsLabel ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(MediaLabel, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 41\n        }\n      }, `${field[designProperties.LABEL][this.props.userInfo.slanguagetypecode] || this.props.intl.formatMessage({\n        id: field[designProperties.LABEL]\n      }) + \" : \"}`), /*#__PURE__*/React.createElement(MediaLabel, {\n        style: {\n          color: field[designProperties.COLOUR] ? dataItem.scolorhexcode || dataItem[field[designProperties.COLOUR]] : \"\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 41\n        }\n      }, dataItem[field[designProperties.VALUE]] === undefined ? '-' : dataItem[field[designProperties.VALUE]]), index !== this.props.subFields.length - 1 ? /*#__PURE__*/React.createElement(MediaLabel, {\n        className: \"seperator\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 86\n        }\n      }, \"|\") : \"\") : /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(MediaLabel, {\n        style: {\n          color: field[designProperties.COLOUR] ? dataItem.scolorhexcode || dataItem[field[designProperties.COLOUR]] : \"\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 199,\n          columnNumber: 41\n        }\n      }, `${dataItem[field[designProperties.VALUE]] === undefined ? '-' : dataItem[field[designProperties.VALUE]]}`), index !== this.props.subFields.length - 1 ? /*#__PURE__*/React.createElement(MediaLabel, {\n        className: \"seperator\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 201,\n          columnNumber: 86\n        }\n      }, \"|\") : \"\")))), /*#__PURE__*/React.createElement(Media.Body, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 211,\n          columnNumber: 21\n        }\n      })), /*#__PURE__*/React.createElement(\"div\", {\n        className: `icon-group-wrap ${this.props.actionIcons && this.props.listMasterShowIcon ? \"enable-view\" : \"\"} ${this.props.clickIconGroup ? \"click-view\" : \"hover-view\"}\n                         ${this.state.activeIconIndex == index ? \"active\" : \"\"}`,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 216,\n          columnNumber: 17\n        }\n      }, this.props.actionIcons && this.props.actionIcons.length > 0 && this.props.actionIcons.map((action, index) => /*#__PURE__*/React.createElement(\"span\", {\n        className: `${this.props.listMasterShowIcon && index + 1 > this.props.listMasterShowIcon ? 'disable-view' : \"\"}`,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 220,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(Nav.Link, {\n        className: \"btn btn-circle outline-grey ml-2\" // data-for=\"tooltip-common-wrap\"\n        ,\n        \"data-tip\": action.title,\n        \"data-place\": action.dataplace && action.dataplace ? action.dataplace : \"\",\n        hidden: action.hidden === undefined ? true : action.hidden,\n        onClick: event => action.onClick({\n          [this.props.selectedListName]: [dataItem]\n        }),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 221,\n          columnNumber: 29\n        }\n      }, getActionIcon(action.controlname))))), this.props.clickIconGroup ? this.props.listMasterShowIcon && this.props.actionIcons && this.props.actionIcons.length <= this.props.listMasterShowIcon ? \"\" : /*#__PURE__*/React.createElement(\"span\", {\n        className: \"vertical-dots end-icon\",\n        onClick: () => this.iconGroupView(index),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 236,\n          columnNumber: 25\n        }\n      }) : \"\");\n    };\n\n    this.state = {\n      masterList: //data\n      this.props.masterList.length > 0 ? this.props.masterList.map((item, index) => {\n        if (index === 0) {\n          if (item['selected']) {\n            item['selected'] = true;\n          } else {\n            item['selected'] = {};\n            item['selected'] = true;\n          }\n        }\n\n        return item;\n      }) : [],\n      developers: [],\n      draggedItem: {}\n    };\n  }\n\n  iconGroupView(index) {\n    this.setState({\n      activeIconIndex: this.state.activeIconIndex == index ? null : index\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(ListMasterWrapper, {\n      className: `${this.state.showModalBg ? 'show_modal_bg' : ''} ${this.props.splitModeClass}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 244,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(SearchAdd, {\n      className: `d-flex filter-wrap-group justify-content-between pad-15`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 17\n      }\n    }, this.props.hideSearch ? /*#__PURE__*/React.createElement(\"div\", {\n      className: `list-group-search tool-search ${this.state.showSearch ? 'activesearch' : \"\"}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 46\n      }\n    }) : !this.props.disableToolBarItems ?\n    /*#__PURE__*/\n    // <FormControl ref={this.props.searchRef} autoComplete=\"off\" placeholder={`${this.props.intl.formatMessage({ id: \"IDS_SEARCH\" })} ${this.props.intl.formatMessage({ id: this.props.listName })}`} name={\"search\"} onKeyUp={(e) => this.filterColumn(e)} />\n    React.createElement(\"div\", {\n      className: `list-group-search tool-search ${this.state.showSearch ? 'activesearch' : \"\"}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 251,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(SearchIcon, {\n      className: \"search-icon\",\n      onClick: this.toggleSearch,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 252,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faSearch,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 37\n      }\n    })), /*#__PURE__*/React.createElement(FormControl, {\n      ref: this.props.searchRef,\n      autoComplete: \"off\",\n      placeholder: `${this.props.intl.formatMessage({\n        id: \"IDS_SEARCH\"\n      })}`,\n      name: \"search\",\n      onKeyUp: e => this.filterColumn(e),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 255,\n        columnNumber: 33\n      }\n    }), this.state.showSearch ? /*#__PURE__*/React.createElement(SearchIcon, {\n      className: \"close-right-icon\",\n      onClick: this.toggleSearch,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 259,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faTimes,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 260,\n        columnNumber: 41\n      }\n    })) : \"\") : \"\", /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 267,\n        columnNumber: 25\n      }\n    }, this.props.commonActions))), /*#__PURE__*/React.createElement(PerfectScrollbar, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 272,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(ClientList, {\n      className: \"product-list sm-list-view port-height-inner\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 273,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(ListBox, {\n      draggable: this.props.isSearchedDataPresent ? false : true,\n      style: {\n        height: 400,\n        width: '100%'\n      },\n      size: 'large',\n      data: this.state.masterList || [],\n      item: this.MyCustomItem,\n      textField: this.props.mainField,\n      selectedField: SELECTED_FIELD //   onItemClick={e => this.handleItemClick(e, 'masterList', 'developers')}\n      ,\n      onDragStart: this.handleDragStart,\n      onDrop: this.handleDrop // toolbar={() => {\n      //     return <ListBoxToolbar\n      //         tools={['moveUp', 'moveDown'//, 'transferTo', 'transferFrom', 'transferAllTo', 'transferAllFrom', 'remove'\n      //         ]}\n      //         data={this.state.masterList}\n      //         //   dataConnected={state.developers}\n      //         onToolClick={this.handleToolBarClick}\n      //     />;\n      // }} \n      ,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 277,\n        columnNumber: 29\n      }\n    }))));\n  } // static getDerivedStateFromProps(nextProps, prevState) {\n  //     if (nextProps.selectedTestGroupTestCode !== prevState.selectedTestGroupTestCode) {\n  //         return {sortedList: [] };\n  //     }else{\n  //         return{ masterList: this.state.sortedList } ;\n  //     }\n  // }\n\n\n  componentDidUpdate(previousProps) {\n    console.log('previousProps--->>>');\n\n    if (this.props.selectedTestGroupTestCode !== previousProps.selectedTestGroupTestCode) {\n      this.setState({\n        sortedList: [],\n        selectedTestGroupTestCode: this.props.selectedTestGroupTestCode\n      });\n    }\n\n    if (this.props.masterList !== previousProps.masterList) {\n      // let selectedIndex = this.props.masterList.findIndex(y => y['selected'] && y['selected'] === true);\n      // if (selectedIndex !== -1) {\n      //     this.props.masterList[0]['selected'] = {};\n      //     this.props.masterList[0]['selected'] = false;\n      // }\n      // const updateInfo = {\n      //     typeName: DEFAULT_RETURN,\n      //     data: { masterList: this.props.masterList }\n      // }\n      // this.props.updateStore(updateInfo);\n      this.setState({\n        masterList: this.props.masterList\n      });\n    } // if (this.props.Login.masterList !== previousProps.Login.masterList) {\n    //     // let selectedIndex = this.props.masterList.findIndex(y => y['selected'] && y['selected'] === true);\n    //     // if (selectedIndex !== -1) {\n    //     //     this.props.masterList[0]['selected'] = {};\n    //     //     this.props.masterList[0]['selected'] = false;\n    //     // }\n    //     this.setState({ masterList: this.props.Login.masterList });\n    // }\n    // if (this.props.selectedMaster !== previousProps.selectedMaster) {\n    //     if (this.props.Login.masterList.length>0) {\n    //         let primaryKeyField = this.props.primaryKeyField\n    //         let oldselectedIndex = this.props.Login.masterList.findIndex(x =>\n    //             x['selected'] && x['selected'] === true\n    //         );\n    //         let newselectedIndex = this.props.Login.masterList.findIndex(y => y[primaryKeyField] === this.props.selectedMaster[primaryKeyField]);\n    //         if (oldselectedIndex !== -1) {\n    //             this.props.Login.masterList[oldselectedIndex]['selected'] = false;\n    //         }\n    //         this.props.Login.masterList[newselectedIndex]['selected'] = {};\n    //         this.props.Login.masterList[newselectedIndex]['selected'] = true;\n    //     }\n    //     this.setState({ masterList: this.props.Login.masterList });\n    // }\n\n\n    if (this.props.selectedMaster !== previousProps.selectedMaster) {\n      if (this.props.masterList.length > 0) {\n        let primaryKeyField = this.props.primaryKeyField;\n        let oldselectedIndex = this.props.masterList.findIndex(x => x['selected'] && x['selected'] === true);\n        let newselectedIndex = this.props.masterList.findIndex(y => y[primaryKeyField] === this.props.selectedMaster[primaryKeyField]);\n\n        if (oldselectedIndex !== -1) {\n          this.props.masterList[oldselectedIndex]['selected'] = false;\n        }\n\n        this.props.masterList[newselectedIndex]['selected'] = {};\n        this.props.masterList[newselectedIndex]['selected'] = true;\n      }\n\n      this.setState({\n        masterList: this.props.masterList,\n        activeIconIndex: null\n      });\n    }\n  }\n\n}\n\n;\nexport default injectIntl(ListBoxDraggable);","map":{"version":3,"sources":["E:/WorkingFolder/React_Postgres/ALPD/SOURCE-512/QuaLISWeb/src/components/ListBoxDraggable.jsx"],"names":["React","ReactDOM","ListBox","ListBoxToolbar","processListBoxData","processListBoxDragAndDrop","useLayoutEffect","useRef","useState","ClientList","SearchAdd","MediaHeader","MediaSubHeader","MediaLabel","MediaSubHeaderText","SearchIcon","ContentPanel","PerfectScrollbar","connect","injectIntl","getActionIcon","FormControl","ListGroup","Media","Nav","faArrowsAlt","faArrowsAltH","faArrowsAltV","faEquals","faEye","faGift","faGripVertical","faSearch","faSort","faTimes","FontAwesomeIcon","ListMasterWrapper","designProperties","SELECTED_FIELD","ListBoxDraggable","Component","constructor","props","console","log","handleItemClick","event","data","connectedData","getMasterDetail","dataItem","userInfo","masterData","handleToolBarClick","e","toolName","result","state","masterList","developers","sortedList","sortableField","map","item","i","saveExecutionOrder","handleDragStart","setState","draggedItem","sortedArray","handleDrop","mainField","toggleSearch","showSearch","filterColumn","filterValue","target","value","keyCode","filterColumnData","filterParam","searchListName","MyCustomItem","selected","others","index","ref","width","setWidth","updateSize","current","offsetWidth","window","addEventListener","removeEventListener","showList","selectedMaster","primaryKeyField","isSearchedDataPresent","marginTop","marginRight","content","subFields","maxWidth","marginLeft","fontSize","padding","field","subFieldsLabel","LABEL","slanguagetypecode","intl","formatMessage","id","color","COLOUR","scolorhexcode","VALUE","undefined","length","actionIcons","listMasterShowIcon","clickIconGroup","activeIconIndex","action","title","dataplace","hidden","onClick","selectedListName","controlname","iconGroupView","render","showModalBg","splitModeClass","hideSearch","disableToolBarItems","searchRef","commonActions","height","componentDidUpdate","previousProps","selectedTestGroupTestCode","oldselectedIndex","findIndex","x","newselectedIndex","y"],"mappings":"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","sourcesContent":["import * as React from 'react';\r\nimport * as ReactDOM from 'react-dom';\r\nimport { ListBox, ListBoxToolbar, processListBoxData, processListBoxDragAndDrop }\r\n    from '@progress/kendo-react-listbox';\r\nimport { useLayoutEffect, useRef, useState } from 'react';\r\nimport { ClientList, SearchAdd, MediaHeader, MediaSubHeader, MediaLabel, MediaSubHeaderText, SearchIcon, ContentPanel } from '../components/App.styles';\r\nimport PerfectScrollbar from 'react-perfect-scrollbar';\r\n\r\nimport { connect } from 'react-redux';\r\nimport '@progress/kendo-theme-default/dist/all.css';\r\nimport { injectIntl } from 'react-intl';\r\nimport { getActionIcon } from '../components/HoverIcons';\r\nimport { FormControl, ListGroup, Media, Nav } from 'react-bootstrap';\r\nimport { faArrowsAlt, faArrowsAltH, faArrowsAltV, faEquals, faEye, faGift, faGripVertical, faSearch, faSort, faTimes } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { ListMasterWrapper } from '../components/list-master/list-master.styles';\r\n\r\nimport { designProperties } from '../components/Enumeration';\r\nimport '../pages/registration/registration.css'\r\n\r\nconst SELECTED_FIELD = 'selected';\r\n\r\nclass ListBoxDraggable extends React.Component {\r\n\r\n    constructor(props) {\r\n        console.log('eeeee222')\r\n        super(props)\r\n        this.state = {\r\n            masterList: //data\r\n                this.props.masterList.length > 0 ? this.props.masterList.map((item, index) => {\r\n                    if (index === 0) {\r\n                        if (item['selected']) {\r\n                            item['selected'] = true;\r\n                        } else {\r\n                            item['selected'] = {};\r\n                            item['selected'] = true;\r\n                        }\r\n                    }\r\n                    return item;\r\n                }) :\r\n                    [],\r\n            developers: [],\r\n            draggedItem: {}\r\n        }\r\n    }\r\n    handleItemClick = (event, data, connectedData) => {\r\n        this.props.getMasterDetail(event.dataItem, this.props.userInfo, this.props.masterData)\r\n        // this.setState({\r\n        //     ...this.state,\r\n        //     [data]: this.state[data].map(item => {\r\n        //         if (item.srulename === event.dataItem.srulename) {\r\n        //             item[SELECTED_FIELD] = true;// !item[SELECTED_FIELD];\r\n        //         }\r\n        //         else //if (!event.nativeEvent.ctrlKey)\r\n        //         {\r\n        //             item[SELECTED_FIELD] = false;\r\n        //         }\r\n\r\n        //         return item;\r\n        //     })\r\n        //     // ,\r\n        //     // [connectedData]: this.state[connectedData].map(item => {\r\n        //     //     item[SELECTED_FIELD] = false;\r\n        //     //     return item;\r\n        //     // })\r\n        // });\r\n    };\r\n\r\n    handleToolBarClick = e => {\r\n        let toolName = e.toolName || '';\r\n        // let sortableField = this.props.sortableField\r\n        // let sourceSortValue = (this.state.masterList.filter(x => x[SELECTED_FIELD] === true))[0][sortableField]  \r\n        // if (toolName === 'moveDown') {\r\n        //     let index=this.state.masterList.findIndex(x => x[SELECTED_FIELD]=== true);\r\n        //     let destinationSortValue = (this.state.masterList[index+1])[sortableField];\r\n        //     (this.state.masterList[index+1])[sortableField]=sourceSortValue;\r\n        //     (this.state.masterList.filter(x => x[SELECTED_FIELD] === true))[0][sortableField]=destinationSortValue;\r\n        // }else{\r\n        //     let index=this.state.masterList.findIndex(x => x[SELECTED_FIELD]=== true);\r\n        //     let destinationSortValue = (this.state.masterList[index-1])[sortableField];\r\n        //     (this.state.masterList[index-1])[sortableField]=sourceSortValue;\r\n        //     (this.state.masterList.filter(x => x[SELECTED_FIELD] === true))[0][sortableField]=destinationSortValue;\r\n        // }   \r\n        let result = processListBoxData(this.state.masterList, this.state.developers, toolName, SELECTED_FIELD);\r\n\r\n        let sortedList = result['listBoxOneData'];\r\n        let sortableField = this.props.sortableField;\r\n        sortedList.map((item, i) => item[sortableField] = i + 1);\r\n        this.props.saveExecutionOrder(sortedList);\r\n        // this.setState({\r\n        //     ...this.state, sortedList,\r\n        //     masterList: sortedList//result.listBoxOneData//,\r\n        //     //  developers: result.listBoxTwoData\r\n        // });\r\n    };\r\n\r\n    handleDragStart = e => {\r\n        this.setState({\r\n            ...this.state,\r\n            draggedItem: e.dataItem\r\n        });\r\n    };\r\n    saveExecutionOrder = (sortedArray) => {\r\n        let sortableField = this.props.sortableField;\r\n        sortedArray.map((item, i) => item[sortableField] = i + 1);\r\n        this.props.saveExecutionOrder(sortedArray);\r\n    };\r\n    //this.props.saveExecutionOrder(this.state.masterList);\r\n    handleDrop = e => {\r\n        // let sortableField = this.props.sortableField\r\n        // let destinationSortValue = e.dataItem[sortableField]\r\n        // let sourceSortValue = this.state.draggedItem[sortableField]\r\n        // let sourceindex=this.state.masterList.findIndex(x => x===this.state.draggedItem);\r\n        // let destinationindex=this.state.masterList.findIndex(x => x=== e.dataItem);\r\n        // this.state.masterList[sourceindex][sortableField]=destinationSortValue\r\n        // this.state.masterList[destinationindex][sortableField]=sourceSortValue\r\n        // this.state.draggedItem[sortableField] = destinationSortValue\r\n        // e.dataItem[sortableField] = sourceSortValue\r\n        let result = processListBoxDragAndDrop(this.state.masterList, this.state.developers, this.state.draggedItem, e.dataItem, this.props.mainField);\r\n\r\n        let sortedList = result['listBoxOneData'];\r\n        let sortableField = this.props.sortableField;\r\n        sortedList.map((item, i) => item[sortableField] = i + 1);\r\n\r\n        this.props.saveExecutionOrder(sortedList);\r\n        // this.setState({\r\n        //     ...this.state, sortedList,\r\n        //     masterList: sortedList//result.listBoxOneData//,\r\n        //     //    developers: result.listBoxTwoData\r\n        // });\r\n    };\r\n    iconGroupView(index) {\r\n        this.setState({ activeIconIndex: this.state.activeIconIndex == index ? null : index })\r\n    }\r\n    toggleSearch = () => {\r\n        this.setState({\r\n            showSearch: !this.state.showSearch\r\n        })\r\n    }\r\n    filterColumn = (event) => {\r\n        let filterValue = event.target.value;\r\n        if (event.keyCode === 13) {\r\n            this.props.filterColumnData(filterValue, this.props.filterParam, this.props.searchListName);\r\n        }\r\n    }\r\n    MyCustomItem = (props) => {\r\n        let { dataItem, selected, ...others } = props;\r\n        let sortableField = this.props.sortableField;\r\n        let index = dataItem[sortableField];\r\n        const ref = useRef(null);\r\n        const [width, setWidth] = useState(0);\r\n        useLayoutEffect(() => {\r\n            function updateSize() {\r\n                setWidth(ref.current.offsetWidth - 200);\r\n            }\r\n            window.addEventListener('resize', updateSize);\r\n            updateSize();\r\n            return () => window.removeEventListener('resize', updateSize)\r\n        }, []);\r\n\r\n        return (\r\n            <ListGroup.Item as=\"li\" ref={ref} {...others}\r\n                className={`${this.state.showList === props.index ? \"hover\" : \"\"}  list-custom-ico-on-hover list-bgcolor \r\n             ${this.props && this.props.selectedMaster && this.props.selectedMaster[this.props.primaryKeyField] ===\r\n                        dataItem[this.props.primaryKeyField] ? \"active\" : \"\"}`}>\r\n                {/* <li {...others} className={`${this.state.showList === props.index ? \"hover\" : \"\"}  list-custom-ico-on-hover list-bgcolor \r\n            ${this.props.selectedMaster && this.props.selectedMaster[this.props.primaryKeyField] ===\r\n                        dataItem[this.props.primaryKeyField] ? \"active\" : \"\"}`} > */}\r\n\r\n\r\n                <Media onClick={(e) => this.props.getMasterDetail ? this.handleItemClick(props, 'masterList', 'developers') : \"\"}>\r\n                    {this.props.isSearchedDataPresent ? \"\" : <MediaHeader style={{ marginTop: \"10px\", marginRight: \"5px\", content: \"||\" }} >\r\n                        <FontAwesomeIcon icon={faGripVertical} className=\"dragicon\" ></FontAwesomeIcon>\r\n                    </MediaHeader>}\r\n\r\n                    <MediaHeader  >\r\n                        <MediaHeader data-tip={props.dataItem[this.props.mainField]}  //data-for=\"tooltip-common-wrap\"\r\n                            style={this.props.subFields ?\r\n                                { maxWidth: \"15rem\", marginLeft: \"10px\", fontSize: \"1.10rem\" }\r\n                                : { maxWidth: \"15rem\", marginLeft: \"10px\", fontSize: \"1.10rem\", marginTop: '10px' }}\r\n                        >\r\n                            <span  >{props.dataItem[this.props.mainField]}</span>\r\n\r\n                        </MediaHeader>\r\n                        <MediaSubHeader style={{ padding: \"0.1rem\", marginLeft: \"9px\" }} className=\"text-wrap\">\r\n                            {/* <span>Status: {props.dataItem.stransdisplaystatus}</span> */}\r\n                            {this.props.subFields && this.props.subFields.map((field, index) =>\r\n                                this.props.subFieldsLabel ?\r\n                                    <>\r\n                                        <MediaLabel >{`${field[designProperties.LABEL][this.props.userInfo.slanguagetypecode] ||\r\n                                            this.props.intl.formatMessage({ id: field[designProperties.LABEL] }) + \" : \"}`}</MediaLabel>\r\n                                        <MediaLabel style={{ color: field[designProperties.COLOUR] ? dataItem.scolorhexcode || dataItem[field[designProperties.COLOUR]] : \"\" }}>\r\n                                            {dataItem[field[designProperties.VALUE]] === undefined ? '-' : dataItem[field[designProperties.VALUE]]}</MediaLabel>\r\n                                        {index !== this.props.subFields.length - 1 ? <MediaLabel className=\"seperator\">|</MediaLabel> : \"\"}\r\n                                        {/* {(index + 1) % 2 === 0 ? <br></br> : \"\"} */}\r\n                                        {/* index % 2 === 0 && */}\r\n                                    </> :\r\n                                    <>\r\n                                        <MediaLabel style={{ color: field[designProperties.COLOUR] ? dataItem.scolorhexcode || dataItem[field[designProperties.COLOUR]] : \"\" }}>\r\n                                            {`${dataItem[field[designProperties.VALUE]] === undefined ? '-' : dataItem[field[designProperties.VALUE]]}`}</MediaLabel>\r\n                                        {index !== this.props.subFields.length - 1 ? <MediaLabel className=\"seperator\">|</MediaLabel> : \"\"}\r\n                                        {/* {(index + 1) % 2 === 0 ? <br></br> : \"\"} */}\r\n                                        {/* index % 2 === 0 &&  */}\r\n                                    </>\r\n                            )}\r\n                        </MediaSubHeader>\r\n\r\n                    </MediaHeader>\r\n\r\n\r\n                    <Media.Body >\r\n\r\n                    </Media.Body>\r\n\r\n                </Media>\r\n                <div className={`icon-group-wrap ${this.props.actionIcons && this.props.listMasterShowIcon\r\n                    ? \"enable-view\" : \"\"} ${this.props.clickIconGroup ? \"click-view\" : \"hover-view\"}\r\n                         ${this.state.activeIconIndex == index ? \"active\" : \"\"}`}>\r\n                    {this.props.actionIcons && this.props.actionIcons.length > 0 && this.props.actionIcons.map((action, index) =>\r\n                        <span className={`${this.props.listMasterShowIcon && index + 1 > this.props.listMasterShowIcon ? 'disable-view' : \"\"}`}>\r\n                            <Nav.Link\r\n                                className=\"btn btn-circle outline-grey ml-2\"\r\n                                // data-for=\"tooltip-common-wrap\"\r\n                                data-tip={action.title}\r\n                                data-place={action.dataplace && action.dataplace ? action.dataplace : \"\"}\r\n                                hidden={action.hidden === undefined ? true : action.hidden}\r\n                                onClick={(event) => action.onClick({ [this.props.selectedListName]: [dataItem] })}\r\n                            >\r\n                                {getActionIcon(action.controlname)}\r\n                            </Nav.Link>\r\n                        </span>\r\n                    )}\r\n                </div>\r\n                {this.props.clickIconGroup ?\r\n                    (this.props.listMasterShowIcon && this.props.actionIcons && this.props.actionIcons.length <= this.props.listMasterShowIcon) ? \"\" :\r\n                        <span className='vertical-dots end-icon' onClick={() => this.iconGroupView(index)}></span> : \"\"}\r\n                {/* </li > */}\r\n            </ListGroup.Item >\r\n\r\n        );\r\n    };\r\n    render() {\r\n        return (\r\n            <ListMasterWrapper className={`${this.state.showModalBg ? 'show_modal_bg' : ''} ${this.props.splitModeClass}`}>\r\n                <SearchAdd className={`d-flex filter-wrap-group justify-content-between pad-15`} >\r\n                    {this.props.hideSearch ? <div className={`list-group-search tool-search ${this.state.showSearch ? 'activesearch' : \"\"}`}>\r\n\r\n                    </div> :\r\n                        !this.props.disableToolBarItems ?\r\n                            // <FormControl ref={this.props.searchRef} autoComplete=\"off\" placeholder={`${this.props.intl.formatMessage({ id: \"IDS_SEARCH\" })} ${this.props.intl.formatMessage({ id: this.props.listName })}`} name={\"search\"} onKeyUp={(e) => this.filterColumn(e)} />\r\n                            <div className={`list-group-search tool-search ${this.state.showSearch ? 'activesearch' : \"\"}`}>\r\n                                <SearchIcon className=\"search-icon\" onClick={this.toggleSearch}>\r\n                                    <FontAwesomeIcon icon={faSearch} />\r\n                                </SearchIcon>\r\n                                <FormControl ref={this.props.searchRef} autoComplete=\"off\"\r\n                                    placeholder={`${this.props.intl.formatMessage({ id: \"IDS_SEARCH\" })}`} name={\"search\"}\r\n                                    onKeyUp={(e) => this.filterColumn(e)} />\r\n                                {this.state.showSearch ?\r\n                                    <SearchIcon className=\"close-right-icon\" onClick={this.toggleSearch}>\r\n                                        <FontAwesomeIcon icon={faTimes} />\r\n                                    </SearchIcon>\r\n                                    : \"\"}\r\n                            </div> : \"\"\r\n\r\n                    }\r\n                    <>\r\n                        <span>\r\n                            {this.props.commonActions}\r\n                        </span>\r\n                    </>\r\n                </SearchAdd>\r\n                <PerfectScrollbar >\r\n                    <ClientList className=\"product-list sm-list-view port-height-inner\"\r\n                       >\r\n\r\n                         \r\n                            <ListBox\r\n                                draggable={this.props.isSearchedDataPresent ? false : true}\r\n                                style={{\r\n                                    height: 400,\r\n                                    width: '100%'\r\n                                }}\r\n                                size={'large'}\r\n                                data={this.state.masterList || []}\r\n                                item={this.MyCustomItem}\r\n\r\n                                textField={this.props.mainField}\r\n                                selectedField={SELECTED_FIELD}\r\n                                //   onItemClick={e => this.handleItemClick(e, 'masterList', 'developers')}\r\n                                onDragStart={this.handleDragStart}\r\n                                onDrop={this.handleDrop}\r\n                            // toolbar={() => {\r\n                            //     return <ListBoxToolbar\r\n                            //         tools={['moveUp', 'moveDown'//, 'transferTo', 'transferFrom', 'transferAllTo', 'transferAllFrom', 'remove'\r\n                            //         ]}\r\n                            //         data={this.state.masterList}\r\n                            //         //   dataConnected={state.developers}\r\n                            //         onToolClick={this.handleToolBarClick}\r\n                            //     />;\r\n                            // }} \r\n                            /> \r\n\r\n                    </ClientList>\r\n                </PerfectScrollbar>\r\n\r\n\r\n            </ListMasterWrapper >\r\n\r\n        );\r\n\r\n    }\r\n    // static getDerivedStateFromProps(nextProps, prevState) {\r\n    //     if (nextProps.selectedTestGroupTestCode !== prevState.selectedTestGroupTestCode) {\r\n    //         return {sortedList: [] };\r\n    //     }else{\r\n    //         return{ masterList: this.state.sortedList } ;\r\n    //     }\r\n    // }\r\n    componentDidUpdate(previousProps) {\r\n        console.log('previousProps--->>>')\r\n        if (this.props.selectedTestGroupTestCode !== previousProps.selectedTestGroupTestCode) {\r\n            this.setState({ sortedList: [], selectedTestGroupTestCode: this.props.selectedTestGroupTestCode });\r\n        }\r\n        if (this.props.masterList !== previousProps.masterList) {\r\n            // let selectedIndex = this.props.masterList.findIndex(y => y['selected'] && y['selected'] === true);\r\n            // if (selectedIndex !== -1) {\r\n            //     this.props.masterList[0]['selected'] = {};\r\n            //     this.props.masterList[0]['selected'] = false;\r\n            // }\r\n            // const updateInfo = {\r\n            //     typeName: DEFAULT_RETURN,\r\n            //     data: { masterList: this.props.masterList }\r\n            // }\r\n            // this.props.updateStore(updateInfo);\r\n\r\n            this.setState({ masterList: this.props.masterList });\r\n        }\r\n\r\n        // if (this.props.Login.masterList !== previousProps.Login.masterList) {\r\n        //     // let selectedIndex = this.props.masterList.findIndex(y => y['selected'] && y['selected'] === true);\r\n        //     // if (selectedIndex !== -1) {\r\n        //     //     this.props.masterList[0]['selected'] = {};\r\n        //     //     this.props.masterList[0]['selected'] = false;\r\n        //     // }\r\n        //     this.setState({ masterList: this.props.Login.masterList });\r\n        // }\r\n        // if (this.props.selectedMaster !== previousProps.selectedMaster) {\r\n        //     if (this.props.Login.masterList.length>0) {\r\n        //         let primaryKeyField = this.props.primaryKeyField\r\n        //         let oldselectedIndex = this.props.Login.masterList.findIndex(x =>\r\n        //             x['selected'] && x['selected'] === true\r\n        //         );\r\n        //         let newselectedIndex = this.props.Login.masterList.findIndex(y => y[primaryKeyField] === this.props.selectedMaster[primaryKeyField]);\r\n        //         if (oldselectedIndex !== -1) {\r\n        //             this.props.Login.masterList[oldselectedIndex]['selected'] = false;\r\n        //         }\r\n        //         this.props.Login.masterList[newselectedIndex]['selected'] = {};\r\n        //         this.props.Login.masterList[newselectedIndex]['selected'] = true;\r\n        //     }\r\n        //     this.setState({ masterList: this.props.Login.masterList });\r\n        // }\r\n        if (this.props.selectedMaster !== previousProps.selectedMaster) {\r\n            if (this.props.masterList.length > 0) {\r\n                let primaryKeyField = this.props.primaryKeyField\r\n                let oldselectedIndex = this.props.masterList.findIndex(x =>\r\n                    x['selected'] && x['selected'] === true\r\n                );\r\n                let newselectedIndex = this.props.masterList.findIndex(y => y[primaryKeyField] === this.props.selectedMaster[primaryKeyField]);\r\n                if (oldselectedIndex !== -1) {\r\n                    this.props.masterList[oldselectedIndex]['selected'] = false;\r\n                }\r\n                this.props.masterList[newselectedIndex]['selected'] = {};\r\n                this.props.masterList[newselectedIndex]['selected'] = true;\r\n            }\r\n            this.setState({ masterList: this.props.masterList, activeIconIndex: null });\r\n        }\r\n    }\r\n};\r\n\r\n\r\n\r\nexport default injectIntl(ListBoxDraggable);\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}