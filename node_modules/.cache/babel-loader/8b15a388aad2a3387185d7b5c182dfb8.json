{"ast":null,"code":"import rsapi from '../rsapi';\nimport { DEFAULT_RETURN } from './LoginTypes';\nimport { sortData, constructOptionList, rearrangeDateFormat } from '../components/CommonScript';\nimport { toast } from 'react-toastify';\nimport Axios from 'axios';\nimport { initRequest } from './LoginAction';\nimport { intl } from '../components/App';\nimport { designProperties, TemplateType } from '../components/Enumeration';\nexport function getDesignTemplateMappingDetail(designtemplatemapping, userInfo, masterData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    return rsapi.post(\"designtemplatemapping/getDesignTemplateMapping\", {\n      ndesigntemplatemappingcode: designtemplatemapping.ndesigntemplatemappingcode,\n      nsampletypecode: designtemplatemapping.nsampletypecode,\n      nregtypecode: designtemplatemapping.nregtypecode,\n      nregsubtypecode: designtemplatemapping.nregsubtypecode,\n      \"userinfo\": userInfo\n    }).then(response => {\n      masterData = { ...masterData,\n        ...response.data\n      };\n      sortData(masterData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(intl.formatMessage({\n          id: error.message\n        }));\n      } else {\n        toast.warn(intl.formatMessage({\n          id: error.response\n        }));\n      }\n    });\n  };\n}\nexport function getDesignTemplateMappingComboService(param) {\n  return function (dispatch) {\n    const screenName = param.screenName;\n    const operation = param.operation;\n    const userInfo = param.userInfo;\n    const nsampletypecode = param.realSampleValue;\n    const nregtypecode = param.realRegTypeValue;\n    const nregsubtypecode = param.realRegSubTypeValue;\n    const ncontrolCode = param.controlId;\n    const moduleTypeArray = param.moduleTypeArray; //if (//(operation === \"create\") && (nsampletypecode != -1) && (nregtypecode != -1) && (nregsubtypecode != -1)) {\n\n    let isValid = true;\n\n    if (nsampletypecode !== 4) {\n      if (nsampletypecode != -1 && nregtypecode != -1 && nregsubtypecode != -1) {\n        isValid = true;\n      } else {\n        isValid = false;\n      }\n    }\n\n    if (isValid) {\n      const designtemplatemappingService = rsapi.post(\"designtemplatemapping/getDynamicPreRegDesign\", {\n        userinfo: userInfo,\n        nsampletypecode,\n        nregtypecode,\n        nregsubtypecode\n      });\n      let urlArray = [designtemplatemappingService];\n      dispatch(initRequest(true));\n      Axios.all(urlArray).then(response => {\n        let selectedRecord = {\n          nnewmodule: moduleTypeArray[0]\n        };\n        let designtemplatemappingMap = constructOptionList(response[0].data.DesignTemplateMapping || [], \"nreactregtemplatecode\", \"sregtemplatename\", undefined, undefined, true);\n        const designtemplatemappingList = designtemplatemappingMap.get(\"OptionList\");\n        designtemplatemappingMap = constructOptionList(response[0].data.SubSampleTemplate || [], \"nreactregtemplatecode\", \"sregtemplatename\", undefined, undefined, true);\n        const subSampleTemplateList = designtemplatemappingMap.get(\"OptionList\");\n        const qualisModuleMap = constructOptionList(response[0].data.DT_QualisModule || [], \"nmodulecode\", \"sdisplayname\", undefined, undefined, true);\n        const qualisModuleList = qualisModuleMap.get(\"OptionList\");\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            designtemplatemappingList,\n            subSampleTemplateList,\n            testListFields: response[0].data.TestListFields.jsondata,\n            operation,\n            screenName,\n            selectedRecord,\n            openModal: true,\n            ncontrolCode,\n            loading: false,\n            designTemplateQualisModule: qualisModuleList\n          }\n        });\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(intl.formatMessage({\n            id: error.message\n          }));\n        } else {\n          toast.warn(intl.formatMessage({\n            id: error.response.data\n          }));\n        }\n      });\n    } else {\n      toast.warn(intl.formatMessage({\n        id: \"IDS_SELECTALLVALUESINFILTER\"\n      }));\n    }\n  };\n}\nexport function reloadDesignTemplateMapping(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"designtemplatemapping/getDesignTemplateMapping\", { ...inputParam.inputData\n    }).then(response => {\n      let responseData = { ...response.data\n      };\n      responseData = sortData(responseData);\n      let masterData = { ...inputParam.masterData,\n        ...responseData\n      }; //if (inputParam.searchRef !== undefined && inputParam.searchRef.current !== null) {\n      //    inputParam.searchRef.current.value = \"\";\n\n      masterData['searchedData'] = undefined; //}\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false,\n          showFilter: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getTMPFilterRegType(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    return rsapi.post(\"designtemplatemapping/getTemplateRegType\", inputParam.inputData).then(response => {\n      let masterData = { ...inputParam.masterData,\n        ...response.data\n      };\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(intl.formatMessage({\n          id: error.message\n        }));\n      } else {\n        toast.warn(intl.formatMessage({\n          id: error.response.data\n        }));\n      }\n    });\n  };\n}\nexport function getTMPFilterRegSubType(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    return rsapi.post(\"designtemplatemapping/getTemplateRegSubType\", inputParam.inputData).then(response => {\n      let masterData = { ...inputParam.masterData,\n        ...response.data\n      };\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(intl.formatMessage({\n          id: error.message\n        }));\n      } else {\n        toast.warn(intl.formatMessage({\n          id: error.response.data\n        }));\n      }\n    });\n  };\n}\nexport function getTMPFilterSubmit(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    return rsapi.post(\"designtemplatemapping/getFilterSubmit\", inputParam.inputData).then(response => {\n      let masterData = { ...inputParam.masterData,\n        ...response.data\n      };\n      let listdesigntemplatemapping = sortData(response.data.DesignTemplateMapping);\n      masterData = { ...masterData,\n        listdesigntemplatemapping\n      };\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(intl.formatMessage({\n          id: error.message\n        }));\n      } else {\n        toast.warn(intl.formatMessage({\n          id: error.response.data\n        }));\n      }\n    });\n  };\n}\nexport function getMappedFieldProps(inputParam) {\n  return function (dispatch) {\n    const fieldService = rsapi.post('designtemplatemapping/getMappedFieldProps', {\n      designtemplatemapping: inputParam.inputData.designtemplatemapping,\n      userinfo: inputParam.inputData.userinfo\n    });\n    let urlArray = [fieldService];\n\n    if (inputParam.inputData[\"napprovalconfigcode\"]) {\n      const regSubTypeVersionService = rsapi.post(\"registrationsubtype/getApprovedVersion\", {\n        napprovalconfigcode: inputParam.inputData.napprovalconfigcode\n      });\n      urlArray.push(regSubTypeVersionService);\n    }\n\n    dispatch(initRequest(true));\n    Axios.all(urlArray).then(response => {\n      let dataResult = {};\n      let designData = response[0].data.jsondataobj || {}; //console.log(\"design:\", designData);\n\n      if (inputParam[\"TemplateType\"] === TemplateType.Masters) {\n        // Object.keys(designData).map(formcode => {\n        dataResult = [];\n        designData.mastertemplatefields.map(field => dataResult.push({\n          label: field[designProperties.VALUE],\n          griditem: designData.griditem.find(val => val[\"2\"] === field[designProperties.VALUE]) !== undefined,\n          gridmoreitem: designData.gridmoreitem.find(val => val[\"2\"] === field[designProperties.VALUE]) !== undefined,\n          realData: field\n        })); // })                   \n      } else {\n        // const regSubTypeVersionData = response[1].data;\n        //if(regSubTypeVersionData &&  regSubTypeVersionData.jsondata.nneedsubsample === true){\n        if (inputParam.operation === \"configuresubsample\") {\n          Object.keys(designData).map(formcode => {\n            dataResult[formcode] = [];\n            designData.subsampletemplatefields.map(field => !Array.isArray(designData[formcode]) && dataResult[formcode].push({\n              label: field[designProperties.VALUE],\n              subsamplelistitem: designData[formcode].subsamplelistitem.find(val => val[\"2\"] === field[designProperties.VALUE]) !== undefined,\n              realData: field\n            }));\n          });\n        } else {\n          Object.keys(designData).map(formcode => {\n            dataResult[formcode] = [];\n            designData.sampletemplatefields.map(field => !Array.isArray(designData[formcode]) && dataResult[formcode].push({\n              label: field[designProperties.VALUE],\n              sampledisplayfields: designData[formcode].sampledisplayfields.find(val => val[\"2\"] === field[designProperties.VALUE]) !== undefined,\n              // samplelistitem: designData[formcode].samplelistitem.find(val => val[\"2\"] === field[designProperties.VALUE]) === undefined ? \"none\" : true,\n              samplelistitem: designData[formcode].samplelistitem.find(val => val[\"2\"] === field[designProperties.VALUE]) !== undefined,\n              samplelistmoreitems: designData[formcode].samplelistmoreitems ? designData[formcode].samplelistmoreitems.find(val => val[\"2\"] === field[designProperties.VALUE]) !== undefined : false,\n              samplegriditem: designData[formcode].samplegriditem.find(val => val[\"2\"] === field[designProperties.VALUE]) !== undefined,\n              samplegridmoreitem: designData[formcode].samplegridmoreitem.find(val => val[\"2\"] === field[designProperties.VALUE]) !== undefined,\n              realData: field\n            }));\n          });\n        }\n      } // console.log(\"response[1].data:\", response[1].data);\n\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          openModal: true,\n          loading: false,\n          designData: designData,\n          //response[0].data.jsondataobj,\n          approvedRegSubTypeVersion: inputParam.inputData[\"napprovalconfigcode\"] ? response[1].data : undefined,\n          dataResult,\n          operation: inputParam.operation,\n          screenName: inputParam.screenName,\n          ncontrolCode: inputParam.ncontrolcode\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(intl.formatMessage({\n          id: error.message\n        }));\n      } else {\n        toast.warn(intl.formatMessage({\n          id: error.response.data\n        }));\n      }\n    });\n  };\n}\nexport function combinationUniqueConfigService(inputParam) {\n  return function (dispatch) {\n    const fieldService = rsapi.post('designtemplatemapping/getMappedFieldProps', {\n      designtemplatemapping: inputParam.inputData.designtemplatemapping,\n      userinfo: inputParam.inputData.userinfo\n    });\n    let urlArray = [fieldService];\n\n    if (inputParam.inputData[\"napprovalconfigcode\"]) {\n      const regSubTypeVersionService = rsapi.post(\"registrationsubtype/getApprovedVersion\", {\n        napprovalconfigcode: inputParam.inputData.napprovalconfigcode\n      });\n      urlArray.push(regSubTypeVersionService);\n    }\n\n    dispatch(initRequest(true));\n    Axios.all(urlArray).then(response => {\n      let dataList = [];\n      let dataListCount = [];\n      let designData = response[0].data.jsondataobj || {};\n      let dataListSubSample = [];\n      let dataListCountSubSample = [];\n\n      if (inputParam[\"TemplateType\"] === TemplateType.Masters) {\n        dataList = designData.mastercombinationunique && [...designData.mastercombinationunique] || [];\n        designData.mastercombinationunique && designData.mastercombinationunique.map((item, index) => {\n          dataListCount.push(index);\n        });\n      } else {\n        dataList = designData.samplecombinationunique && [...designData.samplecombinationunique] || [];\n        designData.samplecombinationunique && designData.samplecombinationunique.map((item, index) => {\n          dataListCount.push(index);\n        });\n        dataListSubSample = designData.subsamplecombinationunique && [...designData.subsamplecombinationunique] || [];\n        designData.subsamplecombinationunique && designData.subsamplecombinationunique.map((item, index) => {\n          dataListCountSubSample.push(index);\n        });\n      }\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          openModal: true,\n          loading: false,\n          designData: designData,\n          //response[0].data.jsondataobj,\n          approvedRegSubTypeVersion: inputParam.inputData[\"napprovalconfigcode\"] ? response[1].data : undefined,\n          dataList,\n          dataListCount,\n          dataListSubSample,\n          dataListCountSubSample,\n          operation: inputParam.operation,\n          screenName: inputParam.screenName,\n          ncontrolcode: inputParam.ncontrolcode\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(intl.formatMessage({\n          id: error.message\n        }));\n      } else {\n        toast.warn(intl.formatMessage({\n          id: error.response.data\n        }));\n      }\n    });\n  };\n}\nexport function editFieldConfigService(inputParam) {\n  return function (dispatch) {\n    const fieldService = rsapi.post('designtemplatemapping/getMappedFieldProps', {\n      designtemplatemapping: inputParam.inputData.designtemplatemapping,\n      userinfo: inputParam.inputData.userinfo\n    });\n    const filterStatusService = rsapi.post('registration/getRegistrationFilterStatus', {\n      nregtypecode: inputParam.inputData.nregtypecode,\n      nregsubtypecode: inputParam.inputData.nregsubtypecode,\n      userinfo: { ...inputParam.inputData.userinfo,\n        nformcode: 43\n      }\n    });\n    let urlArray = [fieldService, filterStatusService];\n    dispatch(initRequest(true));\n    Axios.all(urlArray).then(response => {\n      let dataResult = {};\n      let designData = response[0].data.jsondataobj || {};\n      let filterStatus = response[1].data || [];\n      const list = filterStatus.filter(item => item[\"ntransactionstatus\"] !== 0);\n      filterStatus = list;\n      let selectedRecord = {};\n\n      if (inputParam[\"TemplateType\"] === TemplateType.Masters) {\n        dataResult = [];\n        designData.mastertemplatefields.map(field => dataResult.push({\n          label: field[designProperties.VALUE],\n          editablestatus: filterStatus,\n          realData: field\n        }));\n      } else {\n        if (inputParam.operation === \"configuresubsampleedit\") {\n          Object.keys(designData).map(formcode => {\n            dataResult[formcode] = [];\n            selectedRecord[formcode] = {};\n            const editArray = designData[formcode][\"subsampleeditable\"] || [];\n            designData.subsampletemplatefields.map(field => {\n              if (!Array.isArray(designData[formcode])) {\n                const index = editArray.findIndex(x => x.label === field[designProperties.VALUE]);\n\n                if (index !== -1) {\n                  const fieldEditStatus = editArray[index];\n\n                  if (fieldEditStatus.editableuntill.length > 0) {\n                    const statusArray = [];\n                    filterStatus.map(item1 => {\n                      const foundIndex = fieldEditStatus.editableuntill.findIndex(x => x === item1.ntransactionstatus);\n\n                      if (foundIndex !== -1) {\n                        statusArray.push({\n                          label: item1.stransdisplaystatus,\n                          value: item1.ntransactionstatus,\n                          item: item1\n                        });\n                      }\n                    });\n                    selectedRecord[formcode][field[designProperties.VALUE]] = statusArray;\n                    dataResult[formcode].push({\n                      label: field[designProperties.VALUE],\n                      editablestatus: filterStatus,\n                      realData: field\n                    });\n                  } else {\n                    dataResult[formcode].push({\n                      label: field[designProperties.VALUE],\n                      editablestatus: filterStatus,\n                      realData: field\n                    });\n                  }\n                }\n              }\n            });\n          });\n        } else {\n          Object.keys(designData).map(formcode => {\n            dataResult[formcode] = [];\n            selectedRecord[formcode] = {};\n            const editArray = designData[formcode][\"sampleeditable\"] || [];\n            designData.sampletemplatefields.map(field => {\n              if (!Array.isArray(designData[formcode])) {\n                const index = editArray.findIndex(x => x.label === field[designProperties.VALUE]);\n\n                if (index !== -1) {\n                  const fieldEditStatus = editArray[index];\n\n                  if (fieldEditStatus.editableuntill.length > 0) {\n                    const statusArray = [];\n                    filterStatus.map(item1 => {\n                      const foundIndex = fieldEditStatus.editableuntill.findIndex(x => x === item1.ntransactionstatus);\n\n                      if (foundIndex !== -1) {\n                        statusArray.push({\n                          label: item1.stransdisplaystatus,\n                          value: item1.ntransactionstatus,\n                          item: item1\n                        });\n                      }\n                    });\n                    selectedRecord[formcode][field[designProperties.VALUE]] = statusArray;\n                    dataResult[formcode].push({\n                      label: field[designProperties.VALUE],\n                      editablestatus: filterStatus,\n                      realData: field\n                    });\n                  } else {\n                    dataResult[formcode].push({\n                      label: field[designProperties.VALUE],\n                      editablestatus: filterStatus,\n                      realData: field\n                    });\n                  }\n                }\n              }\n            });\n          });\n        }\n      } // console.log(\"selectedRecord:\", selectedRecord);\n\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          openModal: true,\n          loading: false,\n          editFieldDesignData: designData,\n          //response[0].data.jsondataobj,\n          //approvedRegSubTypeVersion: inputParam.inputData[\"napprovalconfigcode\"] ? response[1].data :undefined,\n          editFieldDataResult: dataResult,\n          operation: inputParam.operation,\n          screenName: inputParam.screenName,\n          ncontrolCode: inputParam.ncontrolcode,\n          selectedRecord\n        }\n      });\n    }).catch(error => {\n      //console.log(\"error:\", error);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(intl.formatMessage({\n          id: error.message\n        }));\n      } else {\n        toast.warn(intl.formatMessage({\n          id: error.response.data\n        }));\n      }\n    });\n  };\n}\nexport function auditFieldConfigService(inputParam) {\n  return function (dispatch) {\n    const fieldService = rsapi.post('designtemplatemapping/getMappedFieldProps', {\n      designtemplatemapping: inputParam.inputData.designtemplatemapping,\n      userinfo: inputParam.inputData.userinfo\n    });\n    let urlArray = [fieldService];\n\n    if (inputParam.inputData[\"napprovalconfigcode\"]) {\n      const regSubTypeVersionService = rsapi.post(\"registrationsubtype/getApprovedVersion\", {\n        napprovalconfigcode: inputParam.inputData.napprovalconfigcode\n      });\n      urlArray.push(regSubTypeVersionService);\n    }\n\n    dispatch(initRequest(true));\n    Axios.all(urlArray).then(response => {\n      let dataResult = {};\n      let designData = response[0].data.jsondataobj || {};\n      console.log(\"design:\", designData, inputParam.inputData.designtemplatemapping.ndesigntemplatemappingcode);\n\n      if (inputParam[\"TemplateType\"] === TemplateType.Masters) {\n        // Object.keys(designData).map(formcode => {\n        dataResult = [];\n        designData.mastertemplatefields.map(field => dataResult.push({\n          label: field[designProperties.VALUE],\n          griditem: designData.griditem.find(val => val[\"2\"] === field[designProperties.VALUE]) !== undefined,\n          gridmoreitem: designData.gridmoreitem.find(val => val[\"2\"] === field[designProperties.VALUE]) !== undefined,\n          realData: field\n        })); // })                   \n      } else {\n        if (inputParam.operation === \"configuresubsampleaudit\") {\n          Object.keys(designData).map(formcode => {\n            dataResult[formcode] = [];\n            designData.subsampletemplatefields.map(field => !Array.isArray(designData[formcode]) && dataResult[formcode].push({\n              label: field[designProperties.VALUE],\n              subsamplelistitem: designData[formcode].subsamplelistitem.find(val => val[\"2\"] === field[designProperties.VALUE]) !== undefined,\n              realData: field\n            }));\n          });\n        } else {\n          //designData[formcode].sampleauditfields ?  \"\" : designData[formcode].sampleauditfields =[];\n          console.log();\n          Object.keys(designData).map(formcode => {\n            dataResult[formcode] = [];\n            designData.sampletemplatefields.map(field => !Array.isArray(designData[formcode]) && dataResult[formcode].push({\n              label: field[designProperties.VALUE],\n              sampleauditfields: designData[formcode].sampleauditfields.find(val => val[\"2\"] === field[designProperties.VALUE]) !== undefined,\n              sampleauditeditfields: designData[formcode].sampleauditeditfields.find(val => val[\"2\"] === field[designProperties.VALUE]) !== undefined,\n              realData: field\n            }));\n          });\n        }\n      } // console.log(\"response[1].data:\", response[1].data);\n\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          openModal: true,\n          loading: false,\n          auditFieldDesignData: designData,\n          //response[0].data.jsondataobj,\n          approvedRegSubTypeVersion: inputParam.inputData[\"napprovalconfigcode\"] ? response[1].data : undefined,\n          auditFieldDataResult: dataResult,\n          operation: inputParam.operation,\n          screenName: inputParam.screenName,\n          ncontrolCode: inputParam.ncontrolcode\n        }\n      });\n    }).catch(error => {\n      console.log(\"error:\", error);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(intl.formatMessage({\n          id: error.message\n        }));\n      } else {\n        toast.warn(intl.formatMessage({\n          id: error.response.data\n        }));\n      }\n    });\n  };\n}","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/actions/DesignTemplateMappingAction.js"],"names":["rsapi","DEFAULT_RETURN","sortData","constructOptionList","rearrangeDateFormat","toast","Axios","initRequest","intl","designProperties","TemplateType","getDesignTemplateMappingDetail","designtemplatemapping","userInfo","masterData","dispatch","post","ndesigntemplatemappingcode","nsampletypecode","nregtypecode","nregsubtypecode","then","response","data","type","payload","loading","catch","error","status","formatMessage","id","message","warn","getDesignTemplateMappingComboService","param","screenName","operation","realSampleValue","realRegTypeValue","realRegSubTypeValue","ncontrolCode","controlId","moduleTypeArray","isValid","designtemplatemappingService","userinfo","urlArray","all","selectedRecord","nnewmodule","designtemplatemappingMap","DesignTemplateMapping","undefined","designtemplatemappingList","get","SubSampleTemplate","subSampleTemplateList","qualisModuleMap","DT_QualisModule","qualisModuleList","testListFields","TestListFields","jsondata","openModal","designTemplateQualisModule","reloadDesignTemplateMapping","inputParam","inputData","responseData","showFilter","getTMPFilterRegType","getTMPFilterRegSubType","getTMPFilterSubmit","listdesigntemplatemapping","getMappedFieldProps","fieldService","regSubTypeVersionService","napprovalconfigcode","push","dataResult","designData","jsondataobj","Masters","mastertemplatefields","map","field","label","VALUE","griditem","find","val","gridmoreitem","realData","Object","keys","formcode","subsampletemplatefields","Array","isArray","subsamplelistitem","sampletemplatefields","sampledisplayfields","samplelistitem","samplelistmoreitems","samplegriditem","samplegridmoreitem","approvedRegSubTypeVersion","ncontrolcode","combinationUniqueConfigService","dataList","dataListCount","dataListSubSample","dataListCountSubSample","mastercombinationunique","item","index","samplecombinationunique","subsamplecombinationunique","editFieldConfigService","filterStatusService","nformcode","filterStatus","list","filter","editablestatus","editArray","findIndex","x","fieldEditStatus","editableuntill","length","statusArray","item1","foundIndex","ntransactionstatus","stransdisplaystatus","value","editFieldDesignData","editFieldDataResult","auditFieldConfigService","console","log","sampleauditfields","sampleauditeditfields","auditFieldDesignData","auditFieldDataResult"],"mappings":"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","sourcesContent":["import rsapi from '../rsapi';\r\nimport { DEFAULT_RETURN } from './LoginTypes';\r\nimport { sortData, constructOptionList, rearrangeDateFormat } from '../components/CommonScript'\r\nimport { toast } from 'react-toastify';\r\nimport Axios from 'axios';\r\nimport { initRequest } from './LoginAction';\r\nimport { intl } from '../components/App';\r\nimport { designProperties , TemplateType} from '../components/Enumeration';\r\n\r\nexport function getDesignTemplateMappingDetail(designtemplatemapping, userInfo, masterData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n\r\n        return rsapi.post(\"designtemplatemapping/getDesignTemplateMapping\", {\r\n            ndesigntemplatemappingcode: designtemplatemapping.ndesigntemplatemappingcode,\r\n            nsampletypecode: designtemplatemapping.nsampletypecode,\r\n            nregtypecode: designtemplatemapping.nregtypecode,\r\n            nregsubtypecode: designtemplatemapping.nregsubtypecode,\r\n            \"userinfo\": userInfo\r\n        })\r\n            .then(response => {\r\n\r\n                masterData = { ...masterData, ...response.data };\r\n                sortData(masterData);\r\n                dispatch({ type: DEFAULT_RETURN, payload: { masterData, loading: false } });\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(intl.formatMessage({ id: error.message }));\r\n                }\r\n                else {\r\n\r\n                    toast.warn(intl.formatMessage({ id: error.response }));\r\n                }\r\n\r\n            })\r\n    }\r\n}\r\n\r\nexport function getDesignTemplateMappingComboService(param) {\r\n    return function (dispatch) {\r\n\r\n        const screenName =  param.screenName;\r\n        const operation= param.operation;\r\n        const userInfo = param.userInfo;\r\n        const nsampletypecode = param.realSampleValue;\r\n        const nregtypecode = param.realRegTypeValue;\r\n        const nregsubtypecode = param.realRegSubTypeValue;\r\n        const ncontrolCode = param.controlId;\r\n        const moduleTypeArray= param.moduleTypeArray;\r\n        //if (//(operation === \"create\") && (nsampletypecode != -1) && (nregtypecode != -1) && (nregsubtypecode != -1)) {\r\n            \r\n        let isValid = true;\r\n        if (nsampletypecode !== 4){\r\n           if((nsampletypecode != -1) && (nregtypecode != -1) && (nregsubtypecode != -1))\r\n           {\r\n             isValid = true;\r\n           }\r\n           else{\r\n               isValid = false;\r\n           }\r\n        }\r\n        \r\n        if(isValid){\r\n            const designtemplatemappingService = rsapi.post(\"designtemplatemapping/getDynamicPreRegDesign\", { userinfo: userInfo, nsampletypecode, nregtypecode, nregsubtypecode });\r\n            let urlArray = [designtemplatemappingService];\r\n            dispatch(initRequest(true));\r\n            Axios.all(urlArray)\r\n                .then(response => {\r\n                    let selectedRecord = {nnewmodule:moduleTypeArray[0]};\r\n                    let designtemplatemappingMap = constructOptionList(response[0].data.DesignTemplateMapping || [], \"nreactregtemplatecode\",\r\n                        \"sregtemplatename\", undefined, undefined, true);\r\n\r\n                    const designtemplatemappingList = designtemplatemappingMap.get(\"OptionList\");\r\n                    designtemplatemappingMap = constructOptionList(response[0].data.SubSampleTemplate || [], \"nreactregtemplatecode\",\r\n                        \"sregtemplatename\", undefined, undefined, true);\r\n\r\n                    const subSampleTemplateList = designtemplatemappingMap.get(\"OptionList\");\r\n\r\n                    const qualisModuleMap = constructOptionList(response[0].data.DT_QualisModule || [], \"nmodulecode\",\r\n                                            \"sdisplayname\", undefined, undefined, true);\r\n\r\n                    const qualisModuleList = qualisModuleMap.get(\"OptionList\");\r\n               \r\n\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN, payload: {\r\n\r\n                            designtemplatemappingList,\r\n                            subSampleTemplateList,\r\n                            testListFields: response[0].data.TestListFields.jsondata,\r\n                            operation, screenName, selectedRecord, openModal: true,\r\n                            ncontrolCode, loading: false,\r\n                            designTemplateQualisModule:qualisModuleList\r\n                        }\r\n                    });\r\n                })\r\n                .catch(error => {\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(intl.formatMessage({ id: error.message }));\r\n                    }\r\n                    else {\r\n\r\n                        toast.warn(intl.formatMessage({ id: error.response.data }));\r\n                    }\r\n                })\r\n        }\r\n        else {\r\n\r\n            toast.warn(intl.formatMessage({ id: \"IDS_SELECTALLVALUESINFILTER\" }));\r\n        }\r\n\r\n    }\r\n}\r\n\r\n\r\nexport function reloadDesignTemplateMapping(inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"designtemplatemapping/getDesignTemplateMapping\", { ...inputParam.inputData })\r\n            .then(response => {\r\n                let responseData = { ...response.data }\r\n                responseData = sortData(responseData)\r\n                let masterData = {\r\n                    ...inputParam.masterData,\r\n                    ...responseData,\r\n                }\r\n                //if (inputParam.searchRef !== undefined && inputParam.searchRef.current !== null) {\r\n                //    inputParam.searchRef.current.value = \"\";\r\n                    masterData['searchedData'] = undefined\r\n                //}\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData,\r\n                        loading: false,\r\n                        showFilter: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getTMPFilterRegType(inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"designtemplatemapping/getTemplateRegType\", inputParam.inputData)\r\n            .then(response => {\r\n                let masterData = { ...inputParam.masterData, ...response.data }\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData, loading: false\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } });\r\n                if (error.response.status === 500) {\r\n                    toast.error(intl.formatMessage({\r\n                        id: error.message\r\n                    }));\r\n                } else {\r\n                    toast.warn(intl.formatMessage({\r\n                        id: error.response.data\r\n                    }));\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getTMPFilterRegSubType(inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"designtemplatemapping/getTemplateRegSubType\", inputParam.inputData)\r\n            .then(response => {\r\n                let masterData = { ...inputParam.masterData, ...response.data }\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData, loading: false\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } });\r\n                if (error.response.status === 500) {\r\n                    toast.error(intl.formatMessage({\r\n                        id: error.message\r\n                    }));\r\n                } else {\r\n                    toast.warn(intl.formatMessage({\r\n                        id: error.response.data\r\n                    }));\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getTMPFilterSubmit(inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"designtemplatemapping/getFilterSubmit\", inputParam.inputData)\r\n            .then(response => {\r\n                let masterData = { ...inputParam.masterData, ...response.data }\r\n                let listdesigntemplatemapping = sortData(response.data.DesignTemplateMapping);\r\n                masterData = { ...masterData, listdesigntemplatemapping }\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData, loading: false\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } });\r\n                if (error.response.status === 500) {\r\n                    toast.error(intl.formatMessage({\r\n                        id: error.message\r\n                    }));\r\n                } else {\r\n                    toast.warn(intl.formatMessage({\r\n                        id: error.response.data\r\n                    }));\r\n                }\r\n            })\r\n    }\r\n\r\n}\r\n\r\nexport function getMappedFieldProps(inputParam) {\r\n    return function (dispatch) {\r\n        const fieldService = rsapi.post('designtemplatemapping/getMappedFieldProps', \r\n                                        {designtemplatemapping:inputParam.inputData.designtemplatemapping,\r\n                                        userinfo:inputParam.inputData.userinfo});\r\n        let urlArray = [fieldService];\r\n        \r\n        if (inputParam.inputData[\"napprovalconfigcode\"]){\r\n            const regSubTypeVersionService = rsapi.post(\"registrationsubtype/getApprovedVersion\", \r\n                                                        { napprovalconfigcode:inputParam.inputData.napprovalconfigcode });\r\n        \r\n            urlArray.push(regSubTypeVersionService);\r\n        }\r\n        dispatch(initRequest(true));\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                let dataResult = {};\r\n                let designData =  response[0].data.jsondataobj || {} ;\r\n                //console.log(\"design:\", designData);\r\n                \r\n                if (inputParam[\"TemplateType\"] ===  TemplateType.Masters){\r\n                   // Object.keys(designData).map(formcode => {\r\n                        dataResult = [];                       \r\n                            designData.mastertemplatefields.map(field =>                              \r\n                                dataResult.push({\r\n                                    label: field[designProperties.VALUE],\r\n                                    griditem: designData.griditem.find(val => val[\"2\"] === field[designProperties.VALUE]) !== undefined,\r\n                                    gridmoreitem: designData.gridmoreitem.find(val => val[\"2\"] === field[designProperties.VALUE]) !== undefined,\r\n                                    realData : field\r\n                                })\r\n                            )                           \r\n                   // })                   \r\n                } \r\n                else\r\n                {\r\n                   // const regSubTypeVersionData = response[1].data;\r\n                    //if(regSubTypeVersionData &&  regSubTypeVersionData.jsondata.nneedsubsample === true){\r\n                    if(inputParam.operation === \"configuresubsample\"){\r\n                        Object.keys(designData).map(formcode => {         \r\n                            dataResult[formcode] = [];\r\n                            designData.subsampletemplatefields.map(field =>\r\n                                !Array.isArray(designData[formcode])&&\r\n                                dataResult[formcode].push({\r\n                                    label: field[designProperties.VALUE],\r\n                                    subsamplelistitem: designData[formcode].subsamplelistitem.find(val => val[\"2\"] === field[designProperties.VALUE]) !== undefined ,\r\n                                    realData : field\r\n                                })\r\n                            )                              \r\n                        })\r\n                    }\r\n                    else\r\n                    {\r\n                        Object.keys(designData).map(formcode => {         \r\n                            dataResult[formcode] = [];\r\n                            designData.sampletemplatefields.map(field =>\r\n                                !Array.isArray(designData[formcode])&&\r\n                                dataResult[formcode].push({\r\n                                    label: field[designProperties.VALUE],\r\n                                    sampledisplayfields: designData[formcode].sampledisplayfields.find(val => val[\"2\"] === field[designProperties.VALUE]) !== undefined,\r\n                                // samplelistitem: designData[formcode].samplelistitem.find(val => val[\"2\"] === field[designProperties.VALUE]) === undefined ? \"none\" : true,\r\n                                    samplelistitem: designData[formcode].samplelistitem.find(val => val[\"2\"] === field[designProperties.VALUE]) !== undefined ,\r\n                                    samplelistmoreitems: designData[formcode].samplelistmoreitems ? designData[formcode].samplelistmoreitems.find(val => val[\"2\"] === field[designProperties.VALUE]) !== undefined : false,\r\n                                    samplegriditem: designData[formcode].samplegriditem.find(val => val[\"2\"] === field[designProperties.VALUE]) !== undefined,\r\n                                    samplegridmoreitem: designData[formcode].samplegridmoreitem.find(val => val[\"2\"] === field[designProperties.VALUE]) !== undefined,\r\n                                    realData : field\r\n                                })\r\n                            )                              \r\n                        })\r\n                    }\r\n                }\r\n               // console.log(\"response[1].data:\", response[1].data);\r\n               \r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        openModal: true,\r\n                        loading: false,\r\n                        designData: designData,//response[0].data.jsondataobj,\r\n                        approvedRegSubTypeVersion: inputParam.inputData[\"napprovalconfigcode\"] ? response[1].data :undefined,\r\n                        dataResult,\r\n                        operation: inputParam.operation,\r\n                        screenName: inputParam.screenName,\r\n                        ncontrolCode: inputParam.ncontrolcode\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                \r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } });\r\n                if (error.response.status === 500) {\r\n                    toast.error(intl.formatMessage({\r\n                        id: error.message\r\n                    }));\r\n                } else {\r\n                    toast.warn(intl.formatMessage({\r\n                        id: error.response.data\r\n                    }));\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function combinationUniqueConfigService(inputParam) {\r\n    return function (dispatch) {\r\n        const fieldService = rsapi.post('designtemplatemapping/getMappedFieldProps', \r\n                                        {designtemplatemapping:inputParam.inputData.designtemplatemapping,\r\n                                        userinfo:inputParam.inputData.userinfo});\r\n        let urlArray = [fieldService];\r\n        \r\n        if (inputParam.inputData[\"napprovalconfigcode\"]){\r\n            const regSubTypeVersionService = rsapi.post(\"registrationsubtype/getApprovedVersion\", \r\n                                                        { napprovalconfigcode:inputParam.inputData.napprovalconfigcode });\r\n        \r\n            urlArray.push(regSubTypeVersionService);\r\n        }\r\n        dispatch(initRequest(true));\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                let dataList = [];\r\n                let dataListCount = [];\r\n                let designData =  response[0].data.jsondataobj || {} ;\r\n\r\n                let dataListSubSample=[]\r\n                let dataListCountSubSample = [];\r\n\r\n                if (inputParam[\"TemplateType\"] ===  TemplateType.Masters){\r\n                    dataList=designData.mastercombinationunique&&[...designData.mastercombinationunique]||[]\r\n                    designData.mastercombinationunique&&designData.mastercombinationunique.map((item,index)=>{dataListCount.push(index)}) \r\n                }else{\r\n                    dataList=designData.samplecombinationunique&&[...designData.samplecombinationunique]||[]\r\n                    designData.samplecombinationunique&&designData.samplecombinationunique.map((item,index)=>{dataListCount.push(index)}) \r\n\r\n                    dataListSubSample=designData.subsamplecombinationunique&&[...designData.subsamplecombinationunique]||[]\r\n                    designData.subsamplecombinationunique&&designData.subsamplecombinationunique.map((item,index)=>{dataListCountSubSample.push(index)}) \r\n                }  \r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        openModal: true,\r\n                        loading: false,\r\n                        designData: designData,//response[0].data.jsondataobj,\r\n                        approvedRegSubTypeVersion: inputParam.inputData[\"napprovalconfigcode\"] ? response[1].data :undefined,\r\n                        dataList,dataListCount,dataListSubSample,dataListCountSubSample,\r\n                        operation: inputParam.operation,\r\n                        screenName: inputParam.screenName,\r\n                        ncontrolcode: inputParam.ncontrolcode\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                \r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } });\r\n                if (error.response.status === 500) {\r\n                    toast.error(intl.formatMessage({\r\n                        id: error.message\r\n                    }));\r\n                } else {\r\n                    toast.warn(intl.formatMessage({\r\n                        id: error.response.data\r\n                    }));\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function editFieldConfigService(inputParam) {\r\n    return function (dispatch) {\r\n        const fieldService = rsapi.post('designtemplatemapping/getMappedFieldProps', \r\n                                        {designtemplatemapping:inputParam.inputData.designtemplatemapping,\r\n                                        userinfo:inputParam.inputData.userinfo});\r\n\r\n        const filterStatusService = rsapi.post('registration/getRegistrationFilterStatus', \r\n                                        {   nregtypecode:inputParam.inputData.nregtypecode,\r\n                                            nregsubtypecode:inputParam.inputData.nregsubtypecode,\r\n                                            userinfo:{...inputParam.inputData.userinfo, nformcode:43}});\r\n        let urlArray = [fieldService, filterStatusService];\r\n      \r\n        dispatch(initRequest(true));\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                let dataResult = {};\r\n                let designData =  response[0].data.jsondataobj || {} ;\r\n                let filterStatus = response[1].data || [];\r\n             \r\n                const list = filterStatus.filter(item => item[\"ntransactionstatus\"] !== 0)\r\n                filterStatus = list;  \r\n                \r\n                let selectedRecord = {};\r\n                if (inputParam[\"TemplateType\"] ===  TemplateType.Masters){\r\n                        dataResult = [];                       \r\n                        designData.mastertemplatefields.map(field =>                              \r\n                            dataResult.push({label: field[designProperties.VALUE], editablestatus: filterStatus,   realData : field })\r\n                        )                           \r\n                 } \r\n                else\r\n                {                  \r\n                    if(inputParam.operation === \"configuresubsampleedit\"){\r\n                        Object.keys(designData).map(formcode => {         \r\n                            dataResult[formcode] = [];\r\n                            selectedRecord[formcode] = {};\r\n                            const editArray = designData[formcode][\"subsampleeditable\"]  || [];\r\n\r\n                            designData.subsampletemplatefields.map(field =>{\r\n                                if (!Array.isArray(designData[formcode]))\r\n                                {\r\n                                    const index = editArray.findIndex(x => x.label === field[designProperties.VALUE]);\r\n                                    if (index !== -1){\r\n                                        const fieldEditStatus = editArray[index];\r\n                                        if(fieldEditStatus.editableuntill.length > 0){\r\n                                            const statusArray = [];\r\n                                            filterStatus.map(item1=>{  \r\n                                                                        \r\n                                                const foundIndex = fieldEditStatus.editableuntill.findIndex(x => x === item1.ntransactionstatus);\r\n                    \r\n                                                if (foundIndex !== -1){\r\n                                                    statusArray.push({label:item1.stransdisplaystatus, value:item1.ntransactionstatus, item:item1});\r\n                                                }                                            \r\n                                            })\r\n                                            selectedRecord[formcode][field[designProperties.VALUE]]= statusArray;\r\n\r\n                                            dataResult[formcode].push({\r\n                                                                        label: field[designProperties.VALUE],\r\n                                                                        editablestatus: filterStatus,\r\n                                                                        realData : field\r\n                                                                    })\r\n                                        }else{\r\n                                            \r\n                                            dataResult[formcode].push({\r\n                                                                        label: field[designProperties.VALUE],\r\n                                                                        editablestatus: filterStatus,\r\n                                                                        realData : field\r\n                                                                    })\r\n                                    }  \r\n                                        \r\n                                    }                              \r\n                                }                           \r\n                            })                       \r\n                                        \r\n                        })\r\n                    }\r\n                    else{\r\n                        Object.keys(designData).map(formcode => {         \r\n                            dataResult[formcode] = [];\r\n                            selectedRecord[formcode] = {};\r\n                            const editArray = designData[formcode][\"sampleeditable\"]  || [];\r\n                       \r\n                            designData.sampletemplatefields.map(field =>{\r\n                                if (!Array.isArray(designData[formcode]))\r\n                                {                                  \r\n\r\n                                    const index = editArray.findIndex(x => x.label === field[designProperties.VALUE]);\r\n                                    if (index !== -1){\r\n                                        const fieldEditStatus = editArray[index];\r\n                                        if(fieldEditStatus.editableuntill.length > 0){\r\n                                            const statusArray = [];\r\n                                            filterStatus.map(item1=>{  \r\n                                                                        \r\n                                                const foundIndex = fieldEditStatus.editableuntill.findIndex(x => x === item1.ntransactionstatus);\r\n                    \r\n                                                if (foundIndex !== -1){\r\n                                                    statusArray.push({label:item1.stransdisplaystatus, value:item1.ntransactionstatus, item:item1});\r\n                                                }                                            \r\n                                            })\r\n                                            selectedRecord[formcode][field[designProperties.VALUE]]= statusArray;\r\n\r\n                                            dataResult[formcode].push({\r\n                                                                        label: field[designProperties.VALUE],\r\n                                                                        editablestatus: filterStatus,\r\n                                                                        realData : field\r\n                                                                    })\r\n                                        }else{\r\n                                            \r\n                                            dataResult[formcode].push({\r\n                                                                        label: field[designProperties.VALUE],\r\n                                                                        editablestatus: filterStatus,\r\n                                                                        realData : field\r\n                                                                    })\r\n                                    }  \r\n                                        \r\n                                    }                               \r\n                                }                           \r\n                            })                       \r\n                                        \r\n                        })\r\n                    }\r\n                }\r\n           \r\n              // console.log(\"selectedRecord:\", selectedRecord);\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        openModal: true,\r\n                        loading: false,\r\n                        editFieldDesignData: designData,//response[0].data.jsondataobj,\r\n                        //approvedRegSubTypeVersion: inputParam.inputData[\"napprovalconfigcode\"] ? response[1].data :undefined,\r\n                        editFieldDataResult:dataResult,\r\n                        operation: inputParam.operation,\r\n                        screenName: inputParam.screenName,\r\n                        ncontrolCode: inputParam.ncontrolcode,\r\n                        selectedRecord\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                //console.log(\"error:\", error);\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } });\r\n                if (error.response.status === 500) {\r\n                    toast.error(intl.formatMessage({\r\n                        id: error.message\r\n                    }));\r\n                } else {\r\n                    toast.warn(intl.formatMessage({\r\n                        id: error.response.data\r\n                    }));\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function auditFieldConfigService(inputParam) {\r\n    return function (dispatch) {\r\n        const fieldService = rsapi.post('designtemplatemapping/getMappedFieldProps', \r\n                                        {designtemplatemapping:inputParam.inputData.designtemplatemapping,\r\n                                        userinfo:inputParam.inputData.userinfo});\r\n        let urlArray = [fieldService];\r\n        \r\n        if (inputParam.inputData[\"napprovalconfigcode\"]){\r\n            const regSubTypeVersionService = rsapi.post(\"registrationsubtype/getApprovedVersion\", \r\n                                                        { napprovalconfigcode:inputParam.inputData.napprovalconfigcode });\r\n        \r\n            urlArray.push(regSubTypeVersionService);\r\n        }\r\n        dispatch(initRequest(true));\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                let dataResult = {};\r\n                let designData =  response[0].data.jsondataobj || {} ;\r\n                console.log(\"design:\", designData, inputParam.inputData.designtemplatemapping.ndesigntemplatemappingcode);\r\n                \r\n                if (inputParam[\"TemplateType\"] ===  TemplateType.Masters){\r\n                   // Object.keys(designData).map(formcode => {\r\n                        dataResult = [];                       \r\n                            designData.mastertemplatefields.map(field =>                              \r\n                                dataResult.push({\r\n                                    label: field[designProperties.VALUE],\r\n                                    griditem: designData.griditem.find(val => val[\"2\"] === field[designProperties.VALUE]) !== undefined,\r\n                                    gridmoreitem: designData.gridmoreitem.find(val => val[\"2\"] === field[designProperties.VALUE]) !== undefined,\r\n                                    realData : field\r\n                                })\r\n                            )                           \r\n                   // })                   \r\n                } \r\n                else\r\n                {\r\n                    if(inputParam.operation === \"configuresubsampleaudit\"){\r\n                        Object.keys(designData).map(formcode => {         \r\n                            dataResult[formcode] = [];\r\n                            designData.subsampletemplatefields.map(field =>\r\n                                !Array.isArray(designData[formcode])&&\r\n                                dataResult[formcode].push({\r\n                                    label: field[designProperties.VALUE],\r\n                                    subsamplelistitem: designData[formcode].subsamplelistitem.find(val => val[\"2\"] === field[designProperties.VALUE]) !== undefined ,\r\n                                    realData : field\r\n                                })\r\n                            )                              \r\n                        })\r\n                    }\r\n                    else\r\n                    {\r\n                        //designData[formcode].sampleauditfields ?  \"\" : designData[formcode].sampleauditfields =[];\r\n                        console.log()\r\n                        Object.keys(designData).map(formcode => {         \r\n                            dataResult[formcode] = [];\r\n                            designData.sampletemplatefields.map(field =>\r\n                                !Array.isArray(designData[formcode])&&\r\n                                dataResult[formcode].push({\r\n                                    label: field[designProperties.VALUE],\r\n                                    sampleauditfields: designData[formcode].sampleauditfields.find(val => val[\"2\"] === field[designProperties.VALUE]) !== undefined,\r\n                                    sampleauditeditfields: designData[formcode].sampleauditeditfields.find(val => val[\"2\"] === field[designProperties.VALUE]) !== undefined,\r\n                                    \r\n                                    realData : field\r\n                                })\r\n                            )                              \r\n                        })\r\n                    }\r\n                }\r\n               // console.log(\"response[1].data:\", response[1].data);\r\n               \r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        openModal: true,\r\n                        loading: false,\r\n                        auditFieldDesignData: designData,//response[0].data.jsondataobj,\r\n                        approvedRegSubTypeVersion: inputParam.inputData[\"napprovalconfigcode\"] ? response[1].data :undefined,\r\n                        auditFieldDataResult:dataResult,\r\n                        operation: inputParam.operation,\r\n                        screenName: inputParam.screenName,\r\n                        ncontrolCode: inputParam.ncontrolcode\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                console.log(\"error:\", error);\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } });\r\n                if (error.response.status === 500) {\r\n                    toast.error(intl.formatMessage({\r\n                        id: error.message\r\n                    }));\r\n                } else {\r\n                    toast.warn(intl.formatMessage({\r\n                        id: error.response.data\r\n                    }));\r\n                }\r\n            })\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}