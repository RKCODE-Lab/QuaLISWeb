{"ast":null,"code":"var _jsxFileName = \"E:\\\\WorkingFolder\\\\React_Postgres\\\\ALPD\\\\branches\\\\SOURCE-513-FINAL\\\\SOURCE-513-ALPD-4991\\\\QuaLISWeb\\\\src\\\\pages\\\\product\\\\ProductCategory.jsx\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { injectIntl } from 'react-intl';\nimport { ListWrapper } from '../../components/client-group.styles';\nimport { Row, Col } from 'react-bootstrap';\nimport { toast } from 'react-toastify';\nimport { process } from '@progress/kendo-data-query';\nimport { callService, crudMaster, fetchRecord, validateEsignCredential, openProductCategoryModal, updateStore } from '../../actions';\nimport DataGrid from '../../components/data-grid/data-grid.component';\nimport { getControlMap, showEsign } from '../../components/CommonScript';\nimport AddProductCategory from './AddProductCategory';\nimport Esign from '../audittrail/Esign';\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\nimport { transactionStatus } from '../../components/Enumeration';\n\nconst mapStateToProps = state => {\n  return {\n    Login: state.Login\n  };\n};\n\nclass ProductCategory extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.dataStateChange = event => {\n      this.setState({\n        dataResult: process(this.state.data, event.dataState),\n        dataState: event.dataState\n      });\n    };\n\n    this.closeModal = () => {\n      let loadEsign = this.props.Login.loadEsign;\n      let openModal = this.props.Login.openModal;\n      let selectedRecord = this.props.Login.selectedRecord;\n      let selectedId = this.props.Login.selectedId;\n\n      if (this.props.Login.loadEsign) {\n        if (this.props.Login.operation === \"delete\") {\n          loadEsign = false;\n          openModal = false;\n          selectedRecord = {};\n        } else {\n          loadEsign = false;\n          selectedRecord['esignpassword'] = \"\";\n          selectedRecord['esigncomments'] = \"\";\n          selectedRecord['esignreason'] = \"\";\n        }\n      } else {\n        openModal = false;\n        selectedRecord = {};\n        selectedId = null;\n      }\n\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          openModal,\n          loadEsign,\n          selectedRecord,\n          selectedId\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onInputOnChange = event => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (event.target.type === 'checkbox') {\n        selectedRecord[event.target.name] = event.target.checked === true ? 3 : 4;\n      } else {\n        selectedRecord[event.target.name] = event.target.value;\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.deleteRecord = inputData => {\n      const inputParam = {\n        classUrl: this.props.Login.inputParam.classUrl,\n        methodUrl: this.props.Login.inputParam.methodUrl,\n        inputData: {\n          [this.props.Login.inputParam.methodUrl.toLowerCase()]: inputData.selectedRecord,\n          \"userinfo\": this.props.Login.userInfo,\n          \"genericlabel\": this.props.Login.genericLabel\n        },\n        operation: inputData.operation,\n        displayName: this.props.Login.inputParam.displayName,\n        dataState: this.state.dataState\n      };\n      const esignNeeded = showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, inputData.ncontrolCode);\n\n      if (esignNeeded) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData: this.props.Login.masterData\n            },\n            openModal: true,\n            screenName: this.props.Login.inputParam.displayName && this.props.Login.genericLabel[\"ProductCategory\"][\"jsondata\"][\"sdisplayname\"][this.props.Login.userInfo.slanguagetypecode],\n            operation: inputData.operation\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\n      }\n    };\n\n    this.reloadData = () => {\n      const inputParam = {\n        inputData: {\n          \"userinfo\": this.props.Login.userInfo\n        },\n        classUrl: this.props.Login.inputParam.classUrl,\n        methodUrl: this.props.Login.inputParam.methodUrl,\n        userInfo: this.props.Login.userInfo,\n        displayName: this.props.Login.inputParam.displayName\n      };\n      this.props.callService(inputParam);\n    };\n\n    this.onSaveClick = (saveType, formRef) => {\n      //add \n      let inputData = [];\n      inputData[\"userinfo\"] = this.props.Login.userInfo;\n      inputData[\"genericlabel\"] = this.props.Login.genericLabel;\n      let dataState = undefined;\n      let selectedId = null;\n\n      if (this.props.Login.operation === \"update\") {\n        // edit\n        dataState = this.state.dataState;\n        selectedId = this.props.Login.selectedId;\n        inputData[this.props.Login.inputParam.methodUrl.toLowerCase()] = this.state.selectedRecord; //  inputData[this.props.Login.inputParam.methodUrl.toLowerCase()] = { \"ncategorybasedflow\": this.props.Login.settings&&parseInt(this.props.Login.settings[20])===transactionStatus.YES?transactionStatus.YES:transactionStatus.NO};\n\n        this.fieldList.map(item => {\n          return inputData[this.props.Login.inputParam.methodUrl.toLowerCase()][item] = this.state.selectedRecord[item] ? this.state.selectedRecord[item] : \"\";\n        });\n      } else {\n        //add               \n        inputData[this.props.Login.inputParam.methodUrl.toLowerCase()] = {\n          \"nsitecode\": this.props.Login.userInfo.nmastersitecode\n        }; // inputData[this.props.Login.inputParam.methodUrl.toLowerCase()] = { \"ncategorybasedflow\": this.props.Login.settings&&parseInt(this.props.Login.settings[20])===transactionStatus.YES?transactionStatus.YES:transactionStatus.NO};\n\n        this.fieldList.map(item => {\n          return inputData[this.props.Login.inputParam.methodUrl.toLowerCase()][item] = this.state.selectedRecord[item];\n        });\n      }\n\n      const inputParam = {\n        classUrl: this.props.Login.inputParam.classUrl,\n        methodUrl: this.props.Login.inputParam.methodUrl,\n        inputData: inputData,\n        operation: this.props.Login.operation,\n        displayName: this.props.Login.inputParam.displayName,\n        saveType,\n        formRef,\n        selectedId,\n        dataState\n      };\n      const esignNeeded = showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode);\n\n      if (esignNeeded) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData: this.props.Login.masterData\n            },\n            openModal: true,\n            screenName: this.props.Login.inputParam.displayName && this.props.Login.genericLabel[\"ProductCategory\"][\"jsondata\"][\"sdisplayname\"][this.props.Login.userInfo.slanguagetypecode],\n            operation: this.props.Login.operation\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\n      }\n    };\n\n    this.validateEsign = () => {\n      const inputParam = {\n        inputData: {\n          \"userinfo\": { ...this.props.Login.userInfo,\n            sreason: this.state.selectedRecord[\"esigncomments\"],\n            nreasoncode: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].value,\n            spredefinedreason: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].label\n          },\n          password: this.state.selectedRecord[\"esignpassword\"]\n        },\n        screenData: this.props.Login.screenData\n      };\n      this.props.validateEsignCredential(inputParam, \"openModal\");\n    };\n\n    this.formRef = React.createRef();\n    this.extractedColumnList = [];\n    this.fieldList = [];\n    const _dataState = {\n      skip: 0,\n      take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n    };\n    this.state = {\n      data: [],\n      masterStatus: \"\",\n      error: \"\",\n      selectedRecord: {},\n      dataResult: [],\n      dataState: _dataState,\n      isOpen: false,\n      userRoleControlRights: [],\n      controlMap: new Map()\n    };\n    this.extractedColumnList = [{\n      \"controlType\": \"textbox\",\n      \"idsName\": this.props.Login.genericLabel ? this.props.Login.genericLabel[\"ProductCategory\"][\"jsondata\"][\"sdisplayname\"][this.props.Login.userInfo.slanguagetypecode] : \"IDS_PRODUCTCATEGORY\",\n      \"dataField\": \"sproductcatname\",\n      \"width\": \"200px\",\n      \"mandatory\": true,\n      \"mandatoryLabel\": \"IDS_ENTER\"\n    }, // { \"controlType\": \"textbox\", \"idsName\": \"IDS_PRODUCTCATEGORY\", \"dataField\": \"sproductcatname\", \"width\": \"200px\", \"mandatory\": true, \"mandatoryLabel\": \"IDS_ENTER\" },\n    {\n      \"controlType\": \"textarea\",\n      \"idsName\": \"IDS_DESCRIPTION\",\n      \"dataField\": \"sdescription\",\n      \"width\": \"400px\",\n      \"mandatoryLabel\": \"IDS_ENTER\"\n    }, {\n      \"controlType\": \"checkbox\",\n      \"idsName\": \"IDS_CATEGORYBASEDFLOW\",\n      \"dataField\": \"scategorybasedflow\",\n      \"width\": \"200px\",\n      \"controlName\": \"ncategorybasedflow\"\n    }, {\n      \"controlType\": \"checkbox\",\n      \"idsName\": \"IDS_DEFAULTSTATUS\",\n      \"dataField\": \"sdisplaystatus\",\n      \"width\": \"150px\",\n      \"controlName\": \"ndefaultstatus\",\n      \"mandatoryLabel\": \"IDS_SELECT\"\n    }];\n    this.primaryKeyField = \"nproductcatcode\";\n    this.fieldList = [\"sproductcatname\", \"sdescription\", \"ndefaultstatus\", \"ncategorybasedflow\"];\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\n      toast.warn(props.Login.masterStatus);\n      props.Login.masterStatus = \"\";\n    }\n\n    if (props.Login.error !== state.error) {\n      toast.error(props.Login.error);\n      props.Login.error = \"\";\n    }\n\n    return null;\n  }\n\n  render() {\n    const addId = this.props.Login.inputParam && this.state.controlMap.has(\"Add\".concat(this.props.Login.inputParam.methodUrl)) && this.state.controlMap.get(\"Add\".concat(this.props.Login.inputParam.methodUrl)).ncontrolcode;\n    const editID = this.props.Login.inputParam && this.state.controlMap.has(\"Edit\".concat(this.props.Login.inputParam.methodUrl)) && this.state.controlMap.get(\"Edit\".concat(this.props.Login.inputParam.methodUrl)).ncontrolcode;\n    const editParam = {\n      screenName: this.props.Login.inputParam && this.props.Login.inputParam.displayName && this.props.Login.genericLabel[\"ProductCategory\"][\"jsondata\"][\"sdisplayname\"][this.props.Login.userInfo.slanguagetypecode],\n      primaryKeyField: \"nproductcatcode\",\n      operation: \"update\",\n      inputParam: this.props.Login.inputParam,\n      userInfo: this.props.Login.userInfo,\n      ncontrolCode: editID\n    };\n    const deleteParam = {\n      operation: \"delete\"\n    };\n    const mandatoryFields = [];\n    this.extractedColumnList.forEach(item => item.mandatory === true ? mandatoryFields.push(item) : \"\");\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(ListWrapper, {\n      className: \"client-list-content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 25\n      }\n    }, this.state.data ? /*#__PURE__*/React.createElement(DataGrid, {\n      primaryKeyField: this.primaryKeyField,\n      selectedId: this.props.Login.selectedId,\n      data: this.state.data,\n      dataResult: this.state.dataResult,\n      dataState: this.state.dataState,\n      dataStateChange: this.dataStateChange,\n      extractedColumnList: this.extractedColumnList,\n      controlMap: this.state.controlMap,\n      userRoleControlRights: this.state.userRoleControlRights,\n      inputParam: this.props.Login.inputParam,\n      userInfo: this.props.Login.userInfo,\n      fetchRecord: this.props.fetchRecord,\n      deleteRecord: this.deleteRecord,\n      reloadData: this.reloadData,\n      addRecord: () => this.props.openProductCategoryModal(\"IDS_PRODUCTCATEGORY\", addId, this.props.Login.settings),\n      editParam: editParam,\n      deleteParam: deleteParam,\n      scrollable: 'scrollable',\n      gridHeight: '600px',\n      isActionRequired: true,\n      isToolBarRequired: true,\n      pageable: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 33\n      }\n    }) : \"\"))), this.props.Login.openModal && /*#__PURE__*/React.createElement(SlideOutModal, {\n      show: this.props.Login.openModal,\n      closeModal: this.closeModal,\n      operation: this.props.Login.operation,\n      inputParam: this.props.Login.inputParam // screenName={this.props.Login.screenName}\n      ,\n      screenName: this.props.Login.genericLabel[\"ProductCategory\"][\"jsondata\"][\"sdisplayname\"][this.props.Login.userInfo.slanguagetypecode],\n      onSaveClick: this.onSaveClick,\n      esign: this.props.Login.loadEsign,\n      validateEsign: this.validateEsign,\n      masterStatus: this.props.Login.masterStatus,\n      updateStore: this.props.updateStore,\n      selectedRecord: this.state.selectedRecord || {},\n      mandatoryFields: mandatoryFields,\n      addComponent: this.props.Login.loadEsign ? /*#__PURE__*/React.createElement(Esign, {\n        operation: this.props.Login.operation,\n        formatMessage: this.props.intl.formatMessage,\n        onInputOnChange: this.onInputOnChange,\n        inputParam: this.props.Login.inputParam,\n        selectedRecord: this.state.selectedRecord || {},\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 29\n        }\n      }) : /*#__PURE__*/React.createElement(AddProductCategory, {\n        selectedRecord: this.state.selectedRecord || {},\n        onInputOnChange: this.onInputOnChange,\n        onComboChange: this.onComboChange,\n        formatMessage: this.props.intl.formatMessage,\n        genericLabel: this.props.Login.genericLabel,\n        userInfo: this.props.Login.userInfo,\n        settings: this.props.Login.settings,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 31\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 21\n      }\n    }));\n  }\n\n  componentDidUpdate(previousProps) {\n    if (this.props.Login.masterData !== previousProps.Login.masterData) {\n      if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\n        const userRoleControlRights = [];\n\n        if (this.props.Login.userRoleControlRights) {\n          this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item => userRoleControlRights.push(item.ncontrolcode));\n        }\n\n        const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode);\n        this.setState({\n          userRoleControlRights,\n          controlMap,\n          data: this.props.Login.masterData,\n          dataResult: process(this.props.Login.masterData, this.state.dataState)\n        });\n      } else {\n        let {\n          dataState\n        } = this.state;\n\n        if (this.props.Login.dataState === undefined) {\n          dataState = {\n            skip: 0,\n            take: this.state.dataState.take\n          };\n        }\n\n        if (this.state.dataResult.data) {\n          if (this.state.dataResult.data.length === 1) {\n            let skipcount = this.state.dataState.skip > 0 ? this.state.dataState.skip - this.state.dataState.take : this.state.dataState.skip;\n            dataState = {\n              skip: skipcount,\n              take: this.state.dataState.take\n            };\n          }\n        }\n\n        this.setState({\n          data: this.props.Login.masterData,\n          isOpen: false,\n          dataResult: process(this.props.Login.masterData, dataState),\n          dataState\n        });\n      }\n    } else if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\n      this.setState({\n        selectedRecord: this.props.Login.selectedRecord\n      });\n    }\n  }\n\n}\n\nexport default connect(mapStateToProps, {\n  callService,\n  crudMaster,\n  fetchRecord,\n  validateEsignCredential,\n  openProductCategoryModal,\n  updateStore\n})(injectIntl(ProductCategory));","map":{"version":3,"sources":["E:/WorkingFolder/React_Postgres/ALPD/branches/SOURCE-513-FINAL/SOURCE-513-ALPD-4991/QuaLISWeb/src/pages/product/ProductCategory.jsx"],"names":["React","connect","injectIntl","ListWrapper","Row","Col","toast","process","callService","crudMaster","fetchRecord","validateEsignCredential","openProductCategoryModal","updateStore","DataGrid","getControlMap","showEsign","AddProductCategory","Esign","SlideOutModal","DEFAULT_RETURN","transactionStatus","mapStateToProps","state","Login","ProductCategory","Component","constructor","props","dataStateChange","event","setState","dataResult","data","dataState","closeModal","loadEsign","openModal","selectedRecord","selectedId","operation","updateInfo","typeName","onInputOnChange","target","type","name","checked","value","deleteRecord","inputData","inputParam","classUrl","methodUrl","toLowerCase","userInfo","genericLabel","displayName","esignNeeded","userRoleControlRights","nformcode","ncontrolCode","screenData","masterData","screenName","slanguagetypecode","reloadData","onSaveClick","saveType","formRef","undefined","fieldList","map","item","nmastersitecode","validateEsign","sreason","nreasoncode","spredefinedreason","label","password","createRef","extractedColumnList","skip","take","settings","parseInt","masterStatus","error","isOpen","controlMap","Map","primaryKeyField","getDerivedStateFromProps","warn","render","addId","has","concat","get","ncontrolcode","editID","editParam","deleteParam","mandatoryFields","forEach","mandatory","push","intl","formatMessage","onComboChange","componentDidUpdate","previousProps","Object","values","length","skipcount"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { injectIntl } from 'react-intl';\r\nimport { ListWrapper } from '../../components/client-group.styles';\r\nimport { Row, Col } from 'react-bootstrap';\r\nimport { toast } from 'react-toastify';\r\nimport { process } from '@progress/kendo-data-query';\r\nimport { callService, crudMaster, fetchRecord, validateEsignCredential, openProductCategoryModal, updateStore } from '../../actions';\r\nimport DataGrid from '../../components/data-grid/data-grid.component';\r\nimport { getControlMap, showEsign } from '../../components/CommonScript';\r\nimport AddProductCategory from './AddProductCategory';\r\nimport Esign from '../audittrail/Esign';\r\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\r\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\r\nimport { transactionStatus } from '../../components/Enumeration';\r\n\r\nconst mapStateToProps = state => {\r\n    return ({ Login: state.Login })\r\n}\r\n\r\nclass ProductCategory extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.formRef = React.createRef();\r\n        this.extractedColumnList = [];\r\n        this.fieldList = [];\r\n\r\n        const dataState = {\r\n            skip: 0,\r\n            take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5,\r\n        };\r\n        this.state = {\r\n            data: [], masterStatus: \"\", error: \"\", selectedRecord: {},\r\n            dataResult: [],\r\n            dataState: dataState,\r\n            isOpen: false,\r\n            userRoleControlRights: [],\r\n            controlMap: new Map()\r\n        };\r\n        this.extractedColumnList = [\r\n            { \"controlType\": \"textbox\", \"idsName\":this.props.Login.genericLabel ? this.props.Login.genericLabel[\"ProductCategory\"][\"jsondata\"][\"sdisplayname\"][this.props.Login.userInfo.slanguagetypecode] : \"IDS_PRODUCTCATEGORY\", \"dataField\": \"sproductcatname\", \"width\": \"200px\", \"mandatory\": true, \"mandatoryLabel\": \"IDS_ENTER\" },\r\n\r\n           // { \"controlType\": \"textbox\", \"idsName\": \"IDS_PRODUCTCATEGORY\", \"dataField\": \"sproductcatname\", \"width\": \"200px\", \"mandatory\": true, \"mandatoryLabel\": \"IDS_ENTER\" },\r\n            { \"controlType\": \"textarea\", \"idsName\": \"IDS_DESCRIPTION\", \"dataField\": \"sdescription\", \"width\": \"400px\", \"mandatoryLabel\": \"IDS_ENTER\" },\r\n            { \"controlType\": \"checkbox\", \"idsName\": \"IDS_CATEGORYBASEDFLOW\", \"dataField\": \"scategorybasedflow\", \"width\": \"200px\", \"controlName\": \"ncategorybasedflow\" },\r\n            { \"controlType\": \"checkbox\", \"idsName\": \"IDS_DEFAULTSTATUS\", \"dataField\": \"sdisplaystatus\", \"width\": \"150px\",\"controlName\": \"ndefaultstatus\", \"mandatoryLabel\": \"IDS_SELECT\" }\r\n        ]\r\n        this.primaryKeyField = \"nproductcatcode\";\r\n        this.fieldList = [\"sproductcatname\", \"sdescription\", \"ndefaultstatus\",\"ncategorybasedflow\"];\r\n    }\r\n\r\n    static getDerivedStateFromProps(props, state) {\r\n\r\n        if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\r\n            toast.warn(props.Login.masterStatus);\r\n            props.Login.masterStatus = \"\";\r\n        }\r\n\r\n        if (props.Login.error !== state.error) {\r\n            toast.error(props.Login.error)\r\n            props.Login.error = \"\";\r\n        }\r\n        return null;\r\n    }\r\n\r\n    dataStateChange = (event) => {\r\n        this.setState({\r\n\r\n            dataResult: process(this.state.data, event.dataState),\r\n            dataState: event.dataState\r\n\r\n        });\r\n    }\r\n\r\n    closeModal = () => {\r\n        let loadEsign = this.props.Login.loadEsign;\r\n        let openModal = this.props.Login.openModal;\r\n        let selectedRecord = this.props.Login.selectedRecord;\r\n        let selectedId = this.props.Login.selectedId;\r\n        if (this.props.Login.loadEsign) {\r\n            if (this.props.Login.operation === \"delete\") {\r\n                loadEsign = false;\r\n                openModal = false;\r\n                selectedRecord = {};\r\n\r\n            } else {\r\n                loadEsign = false;\r\n                selectedRecord['esignpassword'] = \"\"\r\n                selectedRecord['esigncomments'] = \"\"\r\n                selectedRecord['esignreason']=\"\"\r\n            }\r\n        } else {\r\n            openModal = false;\r\n            selectedRecord = {};\r\n            selectedId=null;\r\n        }\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { openModal, loadEsign, selectedRecord, selectedId }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n\r\n    render() {\r\n\r\n        const addId = this.props.Login.inputParam && this.state.controlMap.has(\"Add\".concat(this.props.Login.inputParam.methodUrl))\r\n            && this.state.controlMap.get(\"Add\".concat(this.props.Login.inputParam.methodUrl)).ncontrolcode;\r\n\r\n        const editID = this.props.Login.inputParam && this.state.controlMap.has(\"Edit\".concat(this.props.Login.inputParam.methodUrl))\r\n            && this.state.controlMap.get(\"Edit\".concat(this.props.Login.inputParam.methodUrl)).ncontrolcode;\r\n\r\n        const editParam = {\r\n            screenName: this.props.Login.inputParam && this.props.Login.inputParam.displayName && this.props.Login.genericLabel[\"ProductCategory\"][\"jsondata\"][\"sdisplayname\"][this.props.Login.userInfo.slanguagetypecode], primaryKeyField: \"nproductcatcode\", operation: \"update\",\r\n            inputParam: this.props.Login.inputParam, userInfo: this.props.Login.userInfo, ncontrolCode: editID\r\n        };\r\n        const deleteParam = { operation: \"delete\" };\r\n\r\n        const mandatoryFields = [];\r\n        this.extractedColumnList.forEach(item => item.mandatory === true ?\r\n            mandatoryFields.push(item) : \"\"\r\n        );\r\n        return (\r\n            <>\r\n                <Row>\r\n                    <Col>\r\n                        <ListWrapper className=\"client-list-content\">\r\n                            {this.state.data ?\r\n                                <DataGrid\r\n                                    primaryKeyField={this.primaryKeyField}\r\n                                    selectedId={this.props.Login.selectedId}\r\n                                    data={this.state.data}\r\n                                    dataResult={this.state.dataResult}\r\n                                    dataState={this.state.dataState}\r\n                                    dataStateChange={this.dataStateChange}\r\n                                    extractedColumnList={this.extractedColumnList}\r\n                                    controlMap={this.state.controlMap}\r\n                                    userRoleControlRights={this.state.userRoleControlRights}\r\n                                    inputParam={this.props.Login.inputParam}\r\n                                    userInfo={this.props.Login.userInfo}\r\n                                    fetchRecord={this.props.fetchRecord}\r\n                                    deleteRecord={this.deleteRecord}\r\n                                    reloadData={this.reloadData}\r\n                                    addRecord={() => this.props.openProductCategoryModal(\"IDS_PRODUCTCATEGORY\", addId,this.props.Login.settings)}\r\n                                    editParam={editParam}\r\n                                    deleteParam={deleteParam}\r\n                                    scrollable={'scrollable'}\r\n                                    gridHeight={'600px'}\r\n                                    isActionRequired={true}\r\n                                    isToolBarRequired={true}\r\n                                    pageable={true}\r\n                                />\r\n                                : \"\"}\r\n                        </ListWrapper>\r\n                    </Col>\r\n                </Row>\r\n                {\r\n                    this.props.Login.openModal &&\r\n                    <SlideOutModal\r\n                        show={this.props.Login.openModal}\r\n                        closeModal={this.closeModal}\r\n                        operation={this.props.Login.operation}\r\n                        inputParam={this.props.Login.inputParam}\r\n                        // screenName={this.props.Login.screenName}\r\n                        screenName={this.props.Login.genericLabel[\"ProductCategory\"][\"jsondata\"][\"sdisplayname\"][this.props.Login.userInfo.slanguagetypecode]}\r\n                        onSaveClick={this.onSaveClick}\r\n                        esign={this.props.Login.loadEsign}\r\n                        validateEsign={this.validateEsign}\r\n                        masterStatus={this.props.Login.masterStatus}\r\n                        updateStore={this.props.updateStore}\r\n                        selectedRecord={this.state.selectedRecord || {}}\r\n                        mandatoryFields={mandatoryFields}\r\n                        addComponent={this.props.Login.loadEsign ?\r\n                            <Esign\r\n                                operation={this.props.Login.operation}\r\n                                formatMessage={this.props.intl.formatMessage}\r\n                                onInputOnChange={this.onInputOnChange}\r\n                                inputParam={this.props.Login.inputParam}\r\n                                selectedRecord={this.state.selectedRecord || {}}\r\n                            />\r\n                            : <AddProductCategory\r\n                                selectedRecord={this.state.selectedRecord || {}}\r\n                                onInputOnChange={this.onInputOnChange}\r\n                                onComboChange={this.onComboChange}\r\n                                formatMessage={this.props.intl.formatMessage}\r\n                                genericLabel={this.props.Login.genericLabel}\r\n                                userInfo={this.props.Login.userInfo}\r\n                                settings={this.props.Login.settings}\r\n                            />\r\n                        }\r\n                    />\r\n                }\r\n            </>\r\n        );\r\n    }\r\n\r\n    componentDidUpdate(previousProps) {\r\n        if (this.props.Login.masterData !== previousProps.Login.masterData) {\r\n            if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\r\n                const userRoleControlRights = [];\r\n                if (this.props.Login.userRoleControlRights) {\r\n                    this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item =>\r\n                        userRoleControlRights.push(item.ncontrolcode))\r\n                }\r\n                const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode)\r\n                this.setState({\r\n                    userRoleControlRights, controlMap, data: this.props.Login.masterData,\r\n                    dataResult: process(this.props.Login.masterData, this.state.dataState),\r\n                });\r\n            }\r\n            else {\r\n                let { dataState } = this.state;\r\n                if (this.props.Login.dataState === undefined) {\r\n                    dataState = {skip:0,take:this.state.dataState.take }\r\n                }\r\n                if(this.state.dataResult.data){\r\n                    if(this.state.dataResult.data.length ===1){\r\n                       let skipcount=this.state.dataState.skip>0?(this.state.dataState.skip-this.state.dataState.take):\r\n                       this.state.dataState.skip\r\n                        dataState={skip:skipcount,take:this.state.dataState.take}\r\n                    }\r\n                }\r\n\r\n                this.setState({\r\n                    data: this.props.Login.masterData,\r\n                    isOpen: false,\r\n                    dataResult: process(this.props.Login.masterData, dataState),\r\n                    dataState\r\n                });\r\n            }\r\n        } else if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\r\n            this.setState({ selectedRecord: this.props.Login.selectedRecord });\r\n        }\r\n    }\r\n\r\n    onInputOnChange = (event) => {\r\n\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if (event.target.type === 'checkbox') {\r\n            selectedRecord[event.target.name] = event.target.checked === true ? 3 : 4;\r\n        }\r\n        else {\r\n            selectedRecord[event.target.name] = event.target.value;\r\n        }\r\n\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    deleteRecord = (inputData) => {\r\n        const inputParam = {\r\n            classUrl: this.props.Login.inputParam.classUrl,\r\n            methodUrl: this.props.Login.inputParam.methodUrl,\r\n\r\n            inputData: {\r\n                [this.props.Login.inputParam.methodUrl.toLowerCase()]: inputData.selectedRecord,\r\n                \"userinfo\": this.props.Login.userInfo,\"genericlabel\":this.props.Login.genericLabel\r\n            },\r\n            operation: inputData.operation,\r\n            displayName: this.props.Login.inputParam.displayName,\r\n            dataState: this.state.dataState\r\n        }\r\n        const esignNeeded = showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, inputData.ncontrolCode);\r\n        if (esignNeeded) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData: this.props.Login.masterData },\r\n                    openModal: true, screenName: this.props.Login.inputParam.displayName && this.props.Login.genericLabel[\"ProductCategory\"][\"jsondata\"][\"sdisplayname\"][this.props.Login.userInfo.slanguagetypecode],\r\n                    operation: inputData.operation\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\r\n        }\r\n    }\r\n\r\n    reloadData = () => {\r\n        const inputParam = {\r\n            inputData: { \"userinfo\": this.props.Login.userInfo },\r\n\r\n            classUrl: this.props.Login.inputParam.classUrl,\r\n            methodUrl: this.props.Login.inputParam.methodUrl,\r\n            userInfo: this.props.Login.userInfo,\r\n            displayName: this.props.Login.inputParam.displayName\r\n        };\r\n\r\n        this.props.callService(inputParam);\r\n    }\r\n\r\n    onSaveClick = (saveType, formRef) => {\r\n        //add \r\n        let inputData = [];\r\n        inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n        inputData[\"genericlabel\"] =this.props.Login.genericLabel;\r\n\r\n        let dataState = undefined;\r\n        let selectedId = null;\r\n        if (this.props.Login.operation === \"update\") {\r\n            // edit\r\n            dataState = this.state.dataState;\r\n            selectedId = this.props.Login.selectedId;\r\n            inputData[this.props.Login.inputParam.methodUrl.toLowerCase()] = this.state.selectedRecord;\r\n          //  inputData[this.props.Login.inputParam.methodUrl.toLowerCase()] = { \"ncategorybasedflow\": this.props.Login.settings&&parseInt(this.props.Login.settings[20])===transactionStatus.YES?transactionStatus.YES:transactionStatus.NO};\r\n\r\n            this.fieldList.map(item => {\r\n                return inputData[this.props.Login.inputParam.methodUrl.toLowerCase()][item] = this.state.selectedRecord[item] ? this.state.selectedRecord[item] : \"\";\r\n            })\r\n            \r\n        }\r\n        else {\r\n            //add               \r\n            inputData[this.props.Login.inputParam.methodUrl.toLowerCase()] = { \"nsitecode\": this.props.Login.userInfo.nmastersitecode };\r\n           // inputData[this.props.Login.inputParam.methodUrl.toLowerCase()] = { \"ncategorybasedflow\": this.props.Login.settings&&parseInt(this.props.Login.settings[20])===transactionStatus.YES?transactionStatus.YES:transactionStatus.NO};\r\n            this.fieldList.map(item => {\r\n                return inputData[this.props.Login.inputParam.methodUrl.toLowerCase()][item] = this.state.selectedRecord[item]\r\n            })\r\n        }\r\n        const inputParam = {\r\n            classUrl: this.props.Login.inputParam.classUrl,\r\n            methodUrl: this.props.Login.inputParam.methodUrl,\r\n            inputData: inputData,\r\n            operation: this.props.Login.operation,\r\n            displayName: this.props.Login.inputParam.displayName, saveType, formRef, selectedId, dataState\r\n        }\r\n        const esignNeeded = showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode);\r\n        if (esignNeeded) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData: this.props.Login.masterData },\r\n                    openModal: true, screenName: this.props.Login.inputParam.displayName && this.props.Login.genericLabel[\"ProductCategory\"][\"jsondata\"][\"sdisplayname\"][this.props.Login.userInfo.slanguagetypecode],\r\n                    operation: this.props.Login.operation\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\r\n        }\r\n    }\r\n\r\n    validateEsign = () => {\r\n        const inputParam = {\r\n            inputData: {\r\n                \"userinfo\": {\r\n                    ...this.props.Login.userInfo,\r\n                    sreason: this.state.selectedRecord[\"esigncomments\"],\r\n                    nreasoncode:this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].value,\r\n                    spredefinedreason:this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].label,\r\n               \r\n                },\r\n                password: this.state.selectedRecord[\"esignpassword\"]\r\n            },\r\n            screenData: this.props.Login.screenData\r\n        }\r\n        this.props.validateEsignCredential(inputParam, \"openModal\");\r\n    }\r\n\r\n}\r\nexport default connect(mapStateToProps, { callService, crudMaster, fetchRecord, validateEsignCredential, openProductCategoryModal, updateStore })(injectIntl(ProductCategory));"]},"metadata":{},"sourceType":"module"}