{"ast":null,"code":"import rsapi from '../rsapi';\nimport Axios from 'axios';\nimport { toast } from 'react-toastify'; // import {\n//     getComboLabelValue\n// } from '../components/CommonScript'\n\nimport { DEFAULT_RETURN } from './LoginTypes';\nimport { initRequest } from './LoginAction'; //import { intl } from '../components/App';\n//import { transactionStatus } from './../components/Enumeration';\n// export function openInstrumentCategoryModal(screenName, operation, primaryKeyName, masterData, userInfo, ncontrolcode) {\n//     return function (dispatch) {\n//         if (operation === \"create\" || operation === \"update\" ) {\n//             // const Technique = rsapi.post(\"/technique/getTechnique\", {\n//             //     \"userinfo\": userInfo\n//             // });\n//             // const Interfacetype = rsapi.post(\"/instrumentcategory/getInterfacetype\", {\n//             //     \"userinfo\": userInfo\n//             // });\n//             let urlArray = [];\n//             if (operation === \"create\") {\n//                 urlArray = [Interfacetype];\n//             } \n//             dispatch(initRequest(true));\n//             Axios.all(urlArray)\n//                 .then(response => {\n//                       let selectedRecord = {};\n//                         selectedRecord[\"nstatus\"] = 1;\n//                         selectedRecord[\"ninstrumentcatcode\"] = 0;\n//                         selectedRecord[\"ncalibrationreq\"] = transactionStatus.NO;\n//                         selectedRecord[\"ncategorybasedflow\"] = transactionStatus.NO;\n//                         selectedRecord[\"ndefaultstatus\"] = transactionStatus.NO;\n//                     dispatch({\n//                         type: DEFAULT_RETURN,\n//                         payload: {\n//                           //  Technique: response[0].data || [],\n//                             Interfacetype: response[0].data || [],\n//                             operation,\n//                             screenName,\n//                             selectedRecord,\n//                             openModal: true,\n//                             ncontrolcode, loading: false\n//                         }\n//                     })\n//                 })\n//                 .catch(error => {\n//                     dispatch(initRequest(false));\n//                     if (error.response.status === 500) {\n//                         toast.error(error.message);\n//                     } else {\n//                         toast.warn(intl.formatMessage({\n//                             id: error.response.data\n//                         }));\n//                     }\n//                 })\n//         }\n//     }\n// }\n\nexport function fetchInstrumentCategoryById(editParam) {\n  return function (dispatch) {\n    // const URL1= rsapi.post('technique/getTechnique',{\"userinfo\":editParam.userInfo})\n    const URL2 = rsapi.post(\"instrumentcategory/getActiveInstrumentCategoryById\", {\n      [editParam.primaryKeyField]: editParam.primaryKeyValue,\n      \"userinfo\": editParam.userInfo\n    }); //   const URL3= rsapi.post('instrumentcategory/getInterfacetype',{\"userinfo\":editParam.userInfo})\n\n    dispatch(initRequest(true));\n    Axios.all([URL2]).then(response => {\n      let selectedRecord = {};\n      let selectedId = editParam.primaryKeyValue;\n      selectedRecord = response[0].data; // let Technique = response[0].data;\n      // let Interfacetype = response[2].data;\n      //   selectedRecord['ntechniquecode']={value:response[1].data.ntechniquecode,label:response[1].data.stechniquename}\n      //   selectedRecord['ninterfacetypecode']={value:response[1].data.ninterfacetypecode,label:response[1].data.sinterfacetypename}\n      // getComboLabelValue(selectedRecord, Technique, \"ntechniquecode\", \"stechniquename\");\n      //  getComboLabelValue(selectedRecord, Interfacetype, \"ninterfacetype\", \"sinterfacetypename\");\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          selectedRecord,\n          // Technique: response[0].data || [],\n          //  Interfacetype: response[2].data || [],\n          operation: editParam.operation,\n          openModal: true,\n          screenName: editParam.screenName,\n          ncontrolcode: editParam.ncontrolCode,\n          loading: false,\n          selectedId\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}","map":{"version":3,"sources":["E:/WorkingFolder/React_Postgres/ALPD/branches/SOURCE-513-PROD/SOURCE-513-ALPD-5500/QuaLISWeb/src/actions/InstrumentCategoryAction.js"],"names":["rsapi","Axios","toast","DEFAULT_RETURN","initRequest","fetchInstrumentCategoryById","editParam","dispatch","URL2","post","primaryKeyField","primaryKeyValue","userInfo","all","then","response","selectedRecord","selectedId","data","type","payload","operation","openModal","screenName","ncontrolcode","ncontrolCode","loading","catch","error","status","message","warn"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,UAAlB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAAQC,KAAR,QAAoB,gBAApB,C,CACA;AACA;AACA;;AACA,SAASC,cAAT,QAA8B,cAA9B;AACA,SAASC,WAAT,QAA4B,eAA5B,C,CACA;AACA;AAGI;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASC,2BAAT,CAAsCC,SAAtC,EAAgD;AACnD,SAAO,UAASC,QAAT,EAAkB;AACtB;AACC,UAAMC,IAAI,GAACR,KAAK,CAACS,IAAN,CAAW,oDAAX,EAAiE;AAAE,OAACH,SAAS,CAACI,eAAX,GAA6BJ,SAAS,CAACK,eAAzC;AAA2D,kBAAYL,SAAS,CAACM;AAAjF,KAAjE,CAAX,CAFqB,CAGxB;;AACGL,IAAAA,QAAQ,CAACH,WAAW,CAAC,IAAD,CAAZ,CAAR;AACAH,IAAAA,KAAK,CAACY,GAAN,CAAU,CAACL,IAAD,CAAV,EACCM,IADD,CACMC,QAAQ,IAAG;AACb,UAAIC,cAAc,GAAC,EAAnB;AACA,UAAIC,UAAU,GAAGX,SAAS,CAACK,eAA3B;AACAK,MAAAA,cAAc,GAACD,QAAQ,CAAC,CAAD,CAAR,CAAYG,IAA3B,CAHa,CAId;AACA;AAEF;AACA;AAEC;AACA;;AACEX,MAAAA,QAAQ,CAAC;AACLY,QAAAA,IAAI,EAAEhB,cADD;AACiBiB,QAAAA,OAAO,EAAC;AAC9BJ,UAAAA,cAD8B;AAE/B;AACD;AACEK,UAAAA,SAAS,EAACf,SAAS,CAACe,SAJU;AAK9BC,UAAAA,SAAS,EAAE,IALmB;AAM9BC,UAAAA,UAAU,EAACjB,SAAS,CAACiB,UANS;AAO9BC,UAAAA,YAAY,EAAClB,SAAS,CAACmB,YAPO;AAQ9BC,UAAAA,OAAO,EAAC,KARsB;AAQhBT,UAAAA;AARgB;AADzB,OAAD,CAAR;AAaH,KA1BD,EA2BCU,KA3BD,CA2BOC,KAAK,IAAI;AACZrB,MAAAA,QAAQ,CAAC;AAACY,QAAAA,IAAI,EAAEhB,cAAP;AAAuBiB,QAAAA,OAAO,EAAE;AAACM,UAAAA,OAAO,EAAC;AAAT;AAAhC,OAAD,CAAR;;AACA,UAAIE,KAAK,CAACb,QAAN,CAAec,MAAf,KAA0B,GAA9B,EAAkC;AAC9B3B,QAAAA,KAAK,CAAC0B,KAAN,CAAYA,KAAK,CAACE,OAAlB;AACH,OAFD,MAGI;AACA5B,QAAAA,KAAK,CAAC6B,IAAN,CAAWH,KAAK,CAACb,QAAN,CAAeG,IAA1B;AACH;AACJ,KAnCD;AAoCH,GAzCD;AA0CF","sourcesContent":["import rsapi from '../rsapi';\r\nimport Axios from 'axios';\r\nimport {toast} from 'react-toastify';\r\n// import {\r\n//     getComboLabelValue\r\n// } from '../components/CommonScript'\r\nimport { DEFAULT_RETURN} from './LoginTypes';\r\nimport { initRequest } from './LoginAction';\r\n//import { intl } from '../components/App';\r\n//import { transactionStatus } from './../components/Enumeration';\r\n\r\n\r\n    // export function openInstrumentCategoryModal(screenName, operation, primaryKeyName, masterData, userInfo, ncontrolcode) {\r\n    //     return function (dispatch) {\r\n    //         if (operation === \"create\" || operation === \"update\" ) {\r\n    //             // const Technique = rsapi.post(\"/technique/getTechnique\", {\r\n    //             //     \"userinfo\": userInfo\r\n    //             // });\r\n    \r\n    //             // const Interfacetype = rsapi.post(\"/instrumentcategory/getInterfacetype\", {\r\n    //             //     \"userinfo\": userInfo\r\n    //             // });\r\n               \r\n    \r\n    //             let urlArray = [];\r\n    //             if (operation === \"create\") {\r\n                   \r\n    //                 urlArray = [Interfacetype];\r\n    //             } \r\n    //             dispatch(initRequest(true));\r\n    //             Axios.all(urlArray)\r\n    //                 .then(response => {\r\n    //                       let selectedRecord = {};\r\n    //                         selectedRecord[\"nstatus\"] = 1;\r\n    //                         selectedRecord[\"ninstrumentcatcode\"] = 0;\r\n    //                         selectedRecord[\"ncalibrationreq\"] = transactionStatus.NO;\r\n    //                         selectedRecord[\"ncategorybasedflow\"] = transactionStatus.NO;\r\n    //                         selectedRecord[\"ndefaultstatus\"] = transactionStatus.NO;\r\n    //                     dispatch({\r\n    //                         type: DEFAULT_RETURN,\r\n    //                         payload: {\r\n    //                           //  Technique: response[0].data || [],\r\n    //                             Interfacetype: response[0].data || [],\r\n    //                             operation,\r\n    //                             screenName,\r\n    //                             selectedRecord,\r\n    //                             openModal: true,\r\n    //                             ncontrolcode, loading: false\r\n    //                         }\r\n    //                     })\r\n    //                 })\r\n    //                 .catch(error => {\r\n    //                     dispatch(initRequest(false));\r\n    //                     if (error.response.status === 500) {\r\n    //                         toast.error(error.message);\r\n    //                     } else {\r\n    //                         toast.warn(intl.formatMessage({\r\n    //                             id: error.response.data\r\n    //                         }));\r\n    //                     }\r\n    //                 })\r\n    //         }\r\n    //     }\r\n    // }\r\n    \r\n    export function fetchInstrumentCategoryById (editParam){  \r\n        return function(dispatch){\r\n           // const URL1= rsapi.post('technique/getTechnique',{\"userinfo\":editParam.userInfo})\r\n            const URL2=rsapi.post(\"instrumentcategory/getActiveInstrumentCategoryById\", { [editParam.primaryKeyField] :editParam.primaryKeyValue , \"userinfo\": editParam.userInfo} )\r\n         //   const URL3= rsapi.post('instrumentcategory/getInterfacetype',{\"userinfo\":editParam.userInfo})\r\n            dispatch(initRequest(true));\r\n            Axios.all([URL2])\r\n            .then(response=> { \r\n                let selectedRecord={}\r\n                let selectedId = editParam.primaryKeyValue;\r\n                selectedRecord=response[0].data\r\n               // let Technique = response[0].data;\r\n               // let Interfacetype = response[2].data;\r\n\r\n             //   selectedRecord['ntechniquecode']={value:response[1].data.ntechniquecode,label:response[1].data.stechniquename}\r\n             //   selectedRecord['ninterfacetypecode']={value:response[1].data.ninterfacetypecode,label:response[1].data.sinterfacetypename}\r\n\r\n              // getComboLabelValue(selectedRecord, Technique, \"ntechniquecode\", \"stechniquename\");\r\n              //  getComboLabelValue(selectedRecord, Interfacetype, \"ninterfacetype\", \"sinterfacetypename\");\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload:{\r\n                    selectedRecord ,\r\n                   // Technique: response[0].data || [],\r\n                  //  Interfacetype: response[2].data || [],\r\n                    operation:editParam.operation,\r\n                    openModal: true,\r\n                    screenName:editParam.screenName,\r\n                    ncontrolcode:editParam.ncontrolCode,\r\n                    loading:false,selectedId\r\n                }\r\n                }); \r\n                \r\n            })\r\n            .catch(error => {\r\n                dispatch({type: DEFAULT_RETURN, payload: {loading:false}})\r\n                if (error.response.status === 500){\r\n                    toast.error(error.message);\r\n                } \r\n                else{               \r\n                    toast.warn(error.response.data);\r\n                }         \r\n            })\r\n        }\r\n     }\r\n"]},"metadata":{},"sourceType":"module"}