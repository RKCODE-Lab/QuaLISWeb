{"ast":null,"code":"var _jsxFileName = \"E:\\\\WorkingFolder\\\\React_Postgres\\\\ALPD\\\\branches\\\\SOURCE-513-PROD\\\\SOURCE-513-ALPD-5500\\\\QuaLISWeb\\\\src\\\\pages\\\\basemaster\\\\SampleStorageListPreperation.jsx\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { injectIntl } from 'react-intl';\nimport { Row, Col } from 'react-bootstrap';\nimport { toast } from 'react-toastify';\nimport { constructOptionList, getControlMap, onSaveMandatoryValidation, searchData, searchJsonData, showEsign, sortData, deleteAttachmentDropZone, onDropAttachFileList, Lims_JSON_stringify } from '../../components/CommonScript'; //import SortableTree from 'react-sortable-tree'; \n\nimport FormSelectSearch from '../../components/form-select-search/form-select-search.component';\nimport DataGrid from '../../components/data-grid/data-grid.component';\nimport { Utils as QbUtils } from \"@react-awesome-query-builder/ui\";\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\nimport { callService } from '../../actions';\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\nimport { ListWrapper } from '../../components/client-group.styles'; // import ReactTooltip from 'react-tooltip';\n\nimport { uuid } from \"uuidv4\";\nimport ConfirmMessage from '../../components/confirm-alert/confirm-message.component';\nimport { transactionStatus } from '../../components/Enumeration';\nimport Esign from '../audittrail/Esign';\nimport rsapi from '../../rsapi';\nimport AddSampleStorageMapping from './AddSampleStorageMapping';\nimport Axios from 'axios';\nimport Preloader from '../../components/preloader/preloader.component';\nimport { process } from '@progress/kendo-data-query'; //import Spreadsheet from '../../components/Spreadsheet/Spreadsheet';\n\nimport MatrixComponent from '../../components/MatrixComponent';\nimport FilterQueryBuilder from '../../components/FilterQueryBuilder';\nimport { ExcelExport, ExcelExportColumn } from '@progress/kendo-react-excel-export';\nimport { LocalizationProvider } from '@progress/kendo-react-intl';\nimport AddFile from \"../goodsin/AddFile\";\n\nclass SampleStorageListPreperation extends Component {\n  constructor(props) {\n    super(props);\n    this.dragOverCnt = 0;\n    this.isDragDrop = false;\n    this.SEPARATOR = '_';\n    this.uniqueIDArr = [];\n    this.countforTree = 0;\n    this.pointedItem = undefined;\n    this.getitemPath = {};\n\n    this.openModal = () => {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          openModal: true,\n          selectedRecord: {},\n          loadTreeProperties: false,\n          treeData: [{\n            text: \"root\",\n            expanded: true,\n            editable: true,\n            root: true,\n            id: uuid()\n          }],\n          operation: \"create\"\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.closeModal = () => {\n      // const updateInfo = {\n      //     typeName: DEFAULT_RETURN,\n      //     data: {\n      //         openModal: false, selectedRecord: {}\n      //     }\n      // }\n      // this.props.updateStore(updateInfo);\n      let loadEsign = this.props.Login.loadEsign;\n      let openModal = this.props.Login.openModal;\n      let selectedId = this.props.Login.selectedId;\n      let selectedRecord = this.state.selectedRecord; //this.props.Login.selectedRecord;\n\n      if (this.props.Login.loadEsign) {\n        if (this.props.Login.operation === \"delete\" || this.props.Login.operation === \"Approve\" || this.props.Login.operation === \"copy\") {\n          loadEsign = false;\n          openModal = false;\n          selectedRecord = {};\n          selectedId = null;\n        } else {\n          loadEsign = false;\n        }\n      } else {\n        openModal = false;\n        selectedId = null;\n        selectedRecord = {};\n      } // const updateInfo = {\n      //     typeName: DEFAULT_RETURN,\n      //     data: { openModal, loadEsign, selectedRecord, selectedId }\n      // }\n      // this.props.updateStore(updateInfo);\n      // this.getsamplestoragetransaction({}, this.props.Login.userInfo);\n      // if (!this.state.isFilterPopup) {\n      //     this.getDynamicFilterExecuteData()\n      // }\n\n\n      this.setState({\n        selectedRecord,\n        openModal: false,\n        isInitialRender: true,\n        importTemplate: false,\n        isFilterPopup: false\n      });\n    };\n\n    this.onInputChange = event => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (event.target.type === \"checkbox\") {\n        selectedRecord[event.target.name] = event.target.checked;\n      } else {\n        selectedRecord[event.target.name] = event.target.value;\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onSaveClick = (saveType, formRef) => {\n      if (this.props.Login.loadTreeProperties === true) {\n        this.onSaveProperties(saveType, formRef);\n      } else if (this.state.openSpreadSheet) {\n        this.CRUDSampleStorageTransaction({ ...this.state.editedsheetData,\n          nsamplestoragemappingcode: this.state.isMultiSampleAdd ? Object.keys(this.state.sheetData).map(nsamplestoragemappingcode => nsamplestoragemappingcode).join(\",\") : this.state.editedsheetData.nsamplestoragemappingcode.toString(),\n          nsamplestoragelocationcode: this.state.editedsheetData.nsamplestoragelocationcode,\n          sheetData: JSON.stringify(this.state.sheetData ? this.state.sheetData : {}),\n          sheetUpdate: true,\n          userinfo: this.props.Login.userInfo,\n          isMultiSampleAdd: this.state.isMultiSampleAdd\n        }, 'create');\n      } else {\n        this.onSaveSampleStorageTransaction(saveType, formRef);\n      }\n    };\n\n    this.paneSizeChange = d => {\n      this.setState({\n        splitChangeWidthPercentage: d\n      });\n    };\n\n    this.handlePageChange = e => {\n      this.setState({\n        skip: e.skip,\n        take: e.take\n      });\n    };\n\n    this.handleDetailPageChange = e => {\n      this.setState({\n        skip: e.skip,\n        take: e.take\n      });\n    };\n\n    this.openFilter = () => {\n      let showFilter = !this.props.Login.showFilter;\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          showFilter\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.closeFilter = () => {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          showFilter: false\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.reloadData = () => {\n      this.onFilterSubmit();\n    };\n\n    this.onEditSampleStorageLocation = (selectedSampleStorageVersion, userInfo, editId) => {\n      this.handleSearch();\n      this.setState({\n        searchedTreeData: undefined\n      });\n\n      if (this.searchRef.current) {\n        this.searchRef.current.value = \"\";\n      }\n\n      let isOnlyDraft = false;\n\n      if (this.props.Login.masterData.sampleStorageVersion && this.props.Login.masterData.sampleStorageVersion.length > 1) {\n        isOnlyDraft = true;\n      }\n\n      this.props.editSampleStorageLocation(selectedSampleStorageVersion, userInfo, isOnlyDraft, editId);\n    };\n\n    this.openStorageMapping = addId => {\n      this.addSampleStorageMapping({\n        userInfo: this.props.Login.userInfo,\n        addId\n      });\n    };\n\n    this.deletesamplestoragemapping = param => {\n      this.CRUDSampleStorageTransaction({\n        'nsamplestoragelocationcode': this.state.masterData.selectedSampleStorageLocation.nsamplestoragelocationcode,\n        'nsamplestoragemappingcode': param.nsamplestoragemappingcode,\n        userinfo: this.props.Login.userInfo\n      }, 'delete');\n    };\n\n    this.addMultipleSample = param => {\n      this.setState({\n        //sheetData: JSON.parse(response[0].data.sheetData),\n        openModal: true,\n        isMultiSampleAdd: true,\n        openSpreadSheet: true,\n        //, editedsheetData: param, Rows: param.nrow, columns: param.ncolumn,\n        loading: false\n      });\n    };\n\n    this.opensearch = () => {\n      this.setState({\n        openModal: true,\n        isFilterPopup: true,\n        selectedRecord: { ...this.state.submittedselectedRecord\n        } || { ...this.state.selectedRecord\n        }\n      });\n    };\n\n    this.handleExportClick = () => {\n      let exportField = [{\n        \"idsName\": \"IDS_SAMPLEID\",\n        \"dataField\": \"spositionvalue\",\n        \"width\": \"200px\",\n        \"staticField\": true\n      }];\n      this.setState({\n        exportField,\n        export: true\n      });\n    };\n\n    this.handleImportTemplate = () => {\n      this.setState({\n        importTemplate: true,\n        openModal: true,\n        loading: false,\n        selectedRecord: {}\n      });\n    };\n\n    this.onDropFile = (attachedFiles, fieldName, maxSize) => {\n      let selectedRecord = this.state.selectedRecord || {};\n      selectedRecord[fieldName] = onDropAttachFileList(selectedRecord[fieldName], attachedFiles, maxSize);\n      this.setState({\n        selectedRecord,\n        actionType: \"new\"\n      });\n    };\n\n    this.deleteAttachment = (event, file, fieldName) => {\n      let selectedRecord = this.state.selectedRecord || {};\n      selectedRecord[fieldName] = deleteAttachmentDropZone(selectedRecord[fieldName], file);\n      this.setState({\n        selectedRecord,\n        actionType: \"delete\" //fileToDelete:file.name \n\n      });\n    };\n\n    this.getImportSampleIDData = () => {\n      let selectedRecord = this.state.selectedRecord; // ALPD-5582 Added by Abdul on 19 Mar 2025 for validating whether a file has been uploaded or not\n\n      if (selectedRecord['stemplatefilename'] && selectedRecord['stemplatefilename'][0] !== undefined) {\n        const formData = new FormData();\n        formData.append(\"ImportFile\", selectedRecord['stemplatefilename'][0]);\n        formData.append(\"nformcode\", this.props.Login.userInfo && this.props.Login.userInfo.nformcode);\n        formData.append(\"userinfo\", JSON.stringify(this.props.Login.userInfo));\n        formData.append(\"nprojecttypecode\", this.state.selectedProjectType && this.state.selectedProjectType.value ? this.state.selectedProjectType.value : -1);\n        formData.append(\"source\", 'view_samplelistprep_');\n        formData.append(\"fieldName\", Lims_JSON_stringify(this.props.intl.formatMessage({\n          id: \"IDS_SAMPLEID\"\n        })));\n        formData.append(\"label\", 'samplestoragelistpreperation');\n        formData.append(\"valuemember\", 'nsamplestoragetransactioncode');\n        this.setState({\n          loading: true\n        });\n        const requestUrl = rsapi.post(\"/samplestoragelistpreperation/getimportsampleiddata\", formData);\n        return requestUrl.then(response => {\n          let masterData = this.state.masterData;\n          masterData = { ...masterData,\n            ...response.data\n          };\n          this.setState({\n            masterData: { ...masterData\n            },\n            loading: false,\n            openModal: false,\n            isFilterPopup: false,\n            importTemplate: false,\n            submittedselectedRecord: { ...this.state.submittedselectedRecord\n            },\n            dataStateChange: {\n              take: 10,\n              skip: 0\n            },\n            selectedRecord: {}\n          });\n        }).catch(error => {\n          this.setState({\n            loading: false\n          });\n\n          if (error.response.status === 500) {\n            toast.error(error.message);\n          } else {\n            toast.info(error.response.data);\n          }\n        });\n      } // ALPD-5582 Added by Abdul on 19 Mar 2025 for validating whether a file has been uploaded or not\n      else {\n        toast.info(`${this.props.intl.formatMessage({\n          id: \"IDS_CHOOSE\"\n        })} ${this.props.intl.formatMessage({\n          id: \"IDS_FILE\"\n        })}`);\n      }\n    };\n\n    this.addSample = (param, nflag) => {\n      this.setState({\n        loading: true\n      });\n      let urlArray = [];\n      const url1 = rsapi.post(\"samplestoragelistpreperation/getsamplestoragemappingSheetData\", {\n        isMultiSampleAdd: nflag === 2 ? true : false,\n        nsamplestoragemappingcode: nflag === 2 ? this.state.masterData.samplestoragelistpreperation.map(item => item.nsamplestoragemappingcode).join(\",\") : param.nsamplestoragemappingcode.toString()\n      });\n      urlArray = [url1];\n      Axios.all(urlArray).then(response => {\n        if (nflag === 2) {\n          this.setState({\n            sheetData: JSON.parse(response[0].data.sheetData),\n            openModal: true,\n            isMultiSampleAdd: true,\n            openSpreadSheet: true,\n            //, editedsheetData: param, Rows: param.nrow, columns: param.ncolumn,\n            loading: false\n          });\n        } else {\n          this.setState({\n            sheetData: JSON.parse(response[0].data.sheetData),\n            openModal: true,\n            isMultiSampleAdd: false,\n            openSpreadSheet: true,\n            editedsheetData: param,\n            Rows: param.nrow,\n            columns: param.ncolumn,\n            loading: false\n          });\n        }\n      }).catch(error => {\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(error.response.data);\n        }\n\n        this.setState({\n          loading: false\n        });\n      });\n    };\n\n    this.onComboChange = (comboData, fieldName) => {\n      const selectedRecord = this.state.selectedRecord || {};\n      let selectedRecordFilter = this.state.selectedRecordFilter || {};\n\n      if (fieldName === 'nstoragecategorycode') {\n        return this.getSampleStorageLocation({\n          userinfo: this.props.Login.userInfo,\n          nstoragecategorycode: comboData.value\n        }, fieldName, comboData);\n      } else if (fieldName === 'ncontainertypecode') {\n        return this.getContainerStructure({\n          userinfo: this.props.Login.userInfo,\n          ncontainertypecode: comboData.value\n        }, fieldName, comboData);\n      } else if (fieldName === 'nprojecttypecode') {\n        return this.getprojectbarcodeconfig(comboData);\n      } else if (fieldName === 'ncontainerstructurecode') {\n        selectedRecord['nrow'] = comboData.item.nrow ? comboData.item.nrow : 1;\n        selectedRecord['ncolumn'] = comboData.item.ncolumn ? comboData.item.ncolumn : 1;\n      } else if (fieldName === 'nsamplestoragelocationcode') {\n        return this.getSampleStorageLocation({\n          userinfo: this.props.Login.userInfo,\n          nstoragecategorycode: this.state.selectedRecordFilter['nstoragecategorycode'].value,\n          nsamplestoragelocationcode: comboData.value\n        }, fieldName, comboData);\n      }\n\n      if (fieldName === 'nsamplestorageversioncode') {\n        selectedRecordFilter[fieldName] = comboData;\n        this.setState({\n          selectedRecordFilter\n        });\n      } else {\n        selectedRecord[fieldName] = comboData;\n        this.setState({\n          selectedRecord,\n          selectedRecordFilter\n        });\n      }\n    };\n\n    this.onSaveSampleStorageTransaction = saveType => {\n      let selectedRecord = this.state.selectedRecord;\n      let containerpathCodeArray = [];\n\n      if (this.state.operation === 'create') {\n        containerpathCodeArray = selectedRecord['nsamplestoragecontainerpathcode'].map(item => item.value);\n      }\n\n      const inputParam = {\n        nsamplestoragetransactioncode: selectedRecord['nsamplestoragetransactioncode'] ? parseInt(selectedRecord['nsamplestoragetransactioncode']) : 0,\n        nsamplestoragelocationcode: this.state.masterData.selectedSampleStorageLocation.nsamplestoragelocationcode,\n        nsamplestoragemappingcode: selectedRecord['nsamplestoragemappingcode'] ? parseInt(selectedRecord['nsamplestoragemappingcode']) : 0,\n        ncontainertypecode: -1,\n        nproductcode: selectedRecord['nproductcode'].value,\n        ndirectionmastercode: -1,\n        ssamplestoragemappingname: \"-\",\n        nsamplestoragecontainerpathcode: this.state.operation === 'create' ? JSON.stringify(containerpathCodeArray) : parseInt(selectedRecord['nsamplestoragecontainerpathcode'].value),\n        containerpathsize: containerpathCodeArray.length,\n        nneedposition: 4,\n        ncontainerstructurecode: -1,\n        nquantity: selectedRecord['nquantity'] ? parseInt(selectedRecord['nquantity']) : 1,\n        userinfo: this.props.Login.userInfo\n      };\n      const masterData = this.props.Login.masterData;\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolcode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData\n            },\n            saveType\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.CRUDSampleStorageTransaction(inputParam, this.state.operation);\n      }\n    };\n\n    this.getsamplestoragetransaction = (inputParam, userinfo) => {\n      this.setState({\n        loading: true\n      });\n      let urlArray = [];\n      const url1 = rsapi.post(\"samplestoragelistpreperation/getsamplestoragetransaction\", {\n        userinfo: this.props.Login.userInfo\n      });\n      urlArray = [url1];\n      Axios.all(urlArray).then(response => {\n        this.setState({\n          masterData: { ...this.state.masterData,\n            ...response[0].data\n          },\n          loading: false\n        });\n      }).catch(error => {\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(error.response.data);\n        }\n\n        this.setState({\n          loading: false\n        });\n      });\n    };\n\n    this.childDataChange = selectedRecord => {\n      this.setState({\n        selectedRecord: { ...selectedRecord\n        },\n        isInitialRender: false\n      });\n    };\n\n    this.childSheetDataChange = sheetData => {\n      this.setState({\n        // selectedRecord: {\n        //     ...this.state.selectedRecord,\n        //     sheetData: {\n        //         ...this.state.selectedRecord.sheetData,\n        //         ...sheetData\n        //     }\n        // },\n        sheetData: { ...sheetData\n        },\n        isInitialRender: false\n      });\n    };\n\n    this.getActiveSampleStorageMappingById = (inputParam, userinfo) => {\n      this.setState({\n        loading: true\n      });\n      let urlArray = [];\n      const url1 = rsapi.post(\"samplestoragelistpreperation/getActiveSampleStorageMappingById\", {\n        nsamplestoragelocationcode: inputParam['selectedSampleStorageLocation'][0].nsamplestoragelocationcode,\n        userinfo: userinfo\n      });\n      urlArray = [url1];\n      Axios.all(urlArray).then(response => {\n        this.setState({\n          masterData: { ...this.state.masterData,\n            ...response[0].data\n          } //,\n          // selectedRecord: {\n          //     ...this.state.selectedRecord\n          //    // , sheetData: JSON.parse(response[0].data.selectedSampleStoragemapping.jsondata.value)\n          // }\n          ,\n          loading: false\n        });\n      }).catch(error => {\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(error.response.data);\n        }\n\n        this.setState({\n          loading: false\n        });\n      });\n    };\n\n    this.filterColumnData = (filterValue, filterParam) => {\n      let masterData = filterParam.masterData;\n      let primaryKeyValue = 0;\n      let searchedData = undefined;\n\n      if (filterValue === \"\") {\n        if (masterData[filterParam.inputListName] && masterData[filterParam.inputListName].length > 0) {\n          primaryKeyValue = masterData[filterParam.inputListName][0][filterParam.primaryKeyField];\n        }\n      } else {\n        if (filterParam.isjsondata) {\n          searchedData = searchJsonData(filterValue, masterData[filterParam.inputListName], filterParam.searchFieldList || []);\n        } else {\n          searchedData = searchData(filterValue, masterData[filterParam.inputListName], filterParam.searchFieldList || []);\n        }\n\n        if (searchedData.length > 0) {\n          primaryKeyValue = searchedData[0][filterParam.primaryKeyField];\n        }\n      }\n\n      if (primaryKeyValue !== 0) {\n        this.setState({\n          loading: true\n        });\n        return rsapi.post(filterParam.fetchUrl, { ...filterParam.fecthInputObject,\n          [filterParam.primaryKeyField]: primaryKeyValue\n        }).then(response => {\n          masterData[\"searchedData\"] = searchedData;\n          masterData = { ...masterData,\n            ...response.data\n          };\n\n          if (filterParam.sortField) {\n            sortData(masterData, filterParam.sortOrder, filterParam.sortField);\n          } else {\n            sortData(masterData);\n          }\n\n          this.setState({\n            masterData,\n            loading: false,\n            skip: 0,\n            take: 10,\n            selectedId: null\n          });\n        }).catch(error => {\n          this.setState({\n            loading: false\n          });\n\n          if (error.response.status === 500) {\n            toast.error(this.props.intl.formatMessage({\n              id: error.message\n            }));\n          } else {\n            toast.warn(this.props.intl.formatMessage({\n              id: error.response.data\n            }));\n          }\n        });\n      } else {\n        masterData[filterParam.selectedObject] = undefined;\n        masterData[\"searchedData\"] = [];\n        Object.keys(masterData).forEach(item => {\n          if (item !== filterParam.inputListName && item !== filterParam.selectedObject && filterParam.unchangeList && filterParam.unchangeList.indexOf(item) === -1) masterData[item] = [];\n        });\n        this.setState({\n          masterData,\n          operation: null,\n          modalName: undefined,\n          loading: false\n        });\n      }\n    };\n\n    this.CRUDSampleStorageTransaction = (inputParam, operation) => {\n      this.setState({\n        loading: true\n      });\n      let urlArray = [];\n      const url1 = rsapi.post(\"samplestoragelistpreperation/\" + operation + \"samplestoragelistpreperation\", inputParam);\n      urlArray = [url1];\n      Axios.all(urlArray).then(response => {\n        this.setState({\n          isInitialRender: true,\n          selectedRecord: {},\n          masterData: { ...this.state.masterData,\n            ...response[0].data\n          },\n          openModal: false,\n          loading: false\n        });\n      }).catch(error => {\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(error.response.data);\n        }\n\n        this.setState({\n          loading: false\n        });\n      });\n    };\n\n    this.onFilterSubmit = () => {\n      this.setState({\n        loading: true\n      });\n      let inputParamData = {\n        nstoragecategorycode: this.state.selectedRecordFilter[\"nstoragecategorycode\"].value,\n        // nsamplestoragelocationcode: this.state.selectedRecordFilter[\"nsamplestoragelocationcode\"].value,\n        // nsamplestorageversioncode: this.state.selectedRecordFilter[\"nsamplestorageversioncode\"].value,\n        userinfo: this.props.Login.userInfo\n      };\n      let urlArray = [];\n      const url1 = rsapi.post(\"samplestoragelistpreperation/getsamplestoragemapping\", inputParamData);\n      urlArray = [url1];\n      Axios.all(urlArray).then(response => {\n        let object = {\n          selectedStorageCategoryName: this.state.selectedRecordFilter[\"nstoragecategorycode\"].item.sstoragecategoryname // ssamplestoragelocationname: this.state.selectedRecordFilter[\"nsamplestoragelocationcode\"].item.ssamplestoragelocationname,\n          // selectedSampleStorageVersion: this.state.selectedRecordFilter[\"nsamplestorageversioncode\"].item.nversionno,\n\n        };\n        let filterData = this.generateBreadCrumData(object);\n        this.setState({\n          filterData,\n          masterData: { ...this.state.masterData,\n            ...response[0].data //   samplestoragelistpreperation: response[0].data['samplestoragelistpreperation'],\n\n          },\n          loading: false\n        });\n      }).catch(error => {\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(error.response.data);\n        }\n\n        this.setState({\n          loading: false\n        });\n      });\n    };\n\n    this.onSampleMappingSaveClick = () => {\n      const mandatoryFields = this.state.openSpreadSheet ? [] : this.state.selectedRecord[\"nneedposition\"] === undefined || this.state.selectedRecord[\"nneedposition\"] === false ? [{\n        \"idsName\": \"IDS_SAMPLESTORAGEMAPPING\",\n        \"dataField\": \"nsamplestoragecontainerpathcode\",\n        \"mandatoryLabel\": \"IDS_SELECT\",\n        \"controlType\": \"selectbox\"\n      }, {\n        \"idsName\": \"IDS_PRODUCT\",\n        \"dataField\": \"nproductcode\",\n        \"mandatoryLabel\": \"IDS_SELECT\",\n        \"controlType\": \"selectbox\"\n      }, {\n        \"idsName\": \"IDS_AVAILABLESPACE\",\n        \"dataField\": \"nquantity\",\n        \"mandatoryLabel\": \"IDS_ENTER\",\n        \"controlType\": \"selectbox\"\n      }] : [{\n        \"idsName\": \"IDS_SAMPLESTORAGEMAPPING\",\n        \"dataField\": \"nsamplestoragecontainerpathcode\",\n        \"mandatoryLabel\": \"IDS_SELECT\",\n        \"controlType\": \"selectbox\"\n      }, {\n        \"idsName\": \"IDS_PRODUCT\",\n        \"dataField\": \"nproductcode\",\n        \"mandatoryLabel\": \"IDS_SELECT\",\n        \"controlType\": \"selectbox\"\n      }, {\n        \"idsName\": \"IDS_CONTAINERTYPE\",\n        \"dataField\": \"ncontainertypecode\",\n        \"mandatoryLabel\": \"IDS_SELECT\",\n        \"controlType\": \"selectbox\"\n      }, {\n        \"idsName\": \"IDS_CONTAINERSTRUCTURENAME\",\n        \"dataField\": \"ncontainerstructurecode\",\n        \"mandatoryLabel\": \"IDS_SELECT\",\n        \"controlType\": \"selectbox\"\n      }, {\n        \"idsName\": \"IDS_DIRECTION\",\n        \"dataField\": \"ndirectionmastercode\",\n        \"mandatoryLabel\": \"IDS_ENTER\",\n        \"controlType\": \"selectbox\"\n      }, {\n        \"idsName\": \"IDS_AVAILABLESPACE\",\n        \"dataField\": \"nquantity\",\n        \"mandatoryLabel\": \"IDS_ENTER\",\n        \"controlType\": \"selectbox\"\n      }];\n      onSaveMandatoryValidation(this.state.selectedRecord, mandatoryFields, this.onSaveClick);\n    };\n\n    this.dataStateChange = event => {\n      this.setState({\n        dataStateChange: event.dataState\n      });\n    };\n\n    this.approveSampleStorageMapping = event => {\n      let inputParamData = {};\n      this.setState({\n        loading: true\n      });\n      inputParamData = {\n        nsamplestoragelocationcode: this.state.masterData.selectedSampleStorageLocation.nsamplestoragelocationcode,\n        userinfo: this.props.Login.userInfo\n      };\n      let urlArray = [];\n      const url1 = rsapi.post(\"samplestoragelistpreperation/approveSampleStorageMapping\", inputParamData);\n      urlArray = [url1];\n      Axios.all(urlArray).then(response => {\n        this.setState({\n          masterData: { ...this.state.masterData,\n            ...response[0].data\n          },\n          loading: false\n        });\n      }).catch(error => {\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(error.response.data);\n        }\n\n        this.setState({\n          loading: false\n        });\n      });\n    };\n\n    this.checkFilterIsEmptyQueryBuilder = treeData => {\n      //this condition is handle for bulk record only \n      if (this.props.Login && this.props.Login.settings && parseInt(this.props.Login.settings['69']) === transactionStatus.YES) {\n        let isFilterEmpty = true;\n        return isFilterEmpty;\n      } else {\n        let ParentItem = { ...treeData\n        };\n        let isFilterEmpty = false;\n        let childArray = ParentItem.children1;\n\n        if (childArray && childArray.length > 0 && childArray !== undefined) {\n          for (var i = 0; i < childArray.length; i++) {\n            let childData = childArray[i];\n\n            if (!childData.hasOwnProperty('children1')) {\n              if (childData.properties.operator !== \"is_empty\" && childData.properties.operator !== \"is_not_empty\" && childData.properties.operator !== \"is_null\" && childData.properties.operator !== \"is_not_null\") {\n                isFilterEmpty = true;\n                return isFilterEmpty;\n              }\n            } else {\n              if (childData) {\n                ParentItem = this.checkFilterIsEmptyQueryBuilder(childData);\n\n                if (!ParentItem) {\n                  return ParentItem;\n                }\n              }\n            }\n          }\n        }\n\n        return isFilterEmpty;\n      }\n    };\n\n    this.fetchRecord = data => {\n      this.setState({\n        loading: true\n      });\n      let selectedRecord = this.state.selectedRecord;\n      let inputParamData = {\n        nsamplestoragelocationcode: this.state.masterData.selectedSampleStorageLocation.nsamplestoragelocationcode,\n        userinfo: this.props.Login.userInfo\n      };\n      let urlArray = [];\n      const url1 = rsapi.post(\"samplestoragelistpreperation/addSampleStorageMapping\", inputParamData);\n      const url2 = rsapi.post(\"product/getProduct\", {\n        'userinfo': this.props.Login.userInfo\n      });\n      const url3 = rsapi.post(\"samplestoragelistpreperation/getEditSampleStorageMapping\", {\n        'nsamplestoragemappingcode': data.nsamplestoragemappingcode,\n        'userinfo': this.props.Login.userInfo\n      });\n      urlArray = [url1, url2, url3];\n      Axios.all(urlArray).then(response => {\n        const storageMappingMap = constructOptionList(response[0].data['samplestoragecontainerpath'] || [], \"nsamplestoragecontainerpathcode\", \"scontainerpath\", undefined, undefined, true);\n        const storageMappingMapList = storageMappingMap.get(\"OptionList\");\n        let containerStructure = response[0].data['containerStructure'];\n        const containerTypeMap = constructOptionList(response[0].data['containerType'] || [], \"ncontainertypecode\", \"scontainertype\", undefined, undefined, true);\n        const containerTypeList = containerTypeMap.get(\"OptionList\");\n        const directionmasterMap = constructOptionList(response[0].data['directionmaster'] || [], \"ndirectionmastercode\", \"sdirection\", undefined, undefined, true);\n        const directionmasterList = directionmasterMap.get(\"OptionList\");\n        const containerstructureMap = constructOptionList(response[2].data['containerStructure'] || [], \"ncontainerstructurecode\", \"scontainerstructurename\", undefined, undefined, true);\n        const containerstructureList = containerstructureMap.get(\"OptionList\");\n        const productMap = constructOptionList(response[1].data['Product'] || [], \"nproductcode\", \"sproductname\", undefined, undefined, true);\n        const productList = productMap.get(\"OptionList\");\n        const editedObject = response[2].data.editsampleStorageMapping;\n        storageMappingMapList.unshift({\n          label: editedObject.scontainerpath,\n          value: editedObject.nsamplestoragecontainerpathcode\n        });\n        selectedRecord = {\n          ndirectionmastercode: {\n            label: editedObject.sdirection,\n            value: editedObject.ndirectionmastercode\n          },\n          nsamplestoragecontainerpathcode: {\n            label: editedObject.scontainerpath,\n            value: editedObject.nsamplestoragecontainerpathcode\n          },\n          nproductcode: {\n            label: editedObject.sproductname,\n            value: editedObject.nproductcode\n          },\n          ncontainertypecode: {\n            label: editedObject.scontainertype,\n            value: editedObject.ncontainertypecode\n          },\n          ncontainerstructurecode: {\n            label: editedObject.scontainerstructurename,\n            value: editedObject.ncontainerstructurecode\n          },\n          nneedposition: editedObject.nneedposition === 3 ? true : false,\n          directionmasterOptions: directionmasterList,\n          nquantity: editedObject.nquantity,\n          nrow: editedObject.nrow,\n          ncolumn: editedObject.ncolumn,\n          nsamplestoragemappingcode: editedObject.nsamplestoragemappingcode\n        };\n        this.setState({\n          openSpreadSheet: false,\n          openModal: true,\n          selectedRecord: { ...selectedRecord,\n            storageMappingMapOptions: storageMappingMapList,\n            productOptions: productList,\n            containerTypeOptions: containerTypeList,\n            containerStructureOptions: containerstructureList,\n            isInitialRender: true\n          },\n          operation: 'update',\n          loading: false\n        });\n      }).catch(error => {\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(error.response.data);\n        }\n\n        this.setState({\n          loading: false\n        });\n      });\n    };\n\n    this.retrievalType = () => {\n      let retrievalType = this.state.retrievalType;\n\n      if (retrievalType === 1) {\n        retrievalType = 2;\n      } else {\n        retrievalType = 1;\n      }\n\n      this.setState({\n        retrievalType: retrievalType\n      });\n    };\n\n    this.onInputOnChange = event => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (event.target.type === 'checkbox') {\n        if (event.target.name === \"agree\") {\n          selectedRecord[event.target.name] = event.target.checked === true ? 3 : 4;\n        }\n      } else if (event.target.type === 'select-one') {\n        selectedRecord[event.target.name] = event.target.value;\n      } else {\n        selectedRecord[event.target.name] = event.target.value;\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.handlePageChangeFilter = event => {\n      this.setState({\n        kendoSkip: event.skip,\n        kendoTake: event.take\n      });\n    };\n\n    this.onChange = (immutableTree, config) => {\n      let selectedRecord = this.state.selectedRecord || {};\n      selectedRecord[\"tree\"] = immutableTree;\n      selectedRecord[\"config\"] = config;\n      selectedRecord[\"filterQueryTreeStr\"] = QbUtils.getTree(immutableTree);\n      selectedRecord['filterquery'] = QbUtils.sqlFormat(immutableTree, config);\n      this.setState({\n        tree: immutableTree,\n        config: config,\n        selectedRecord: selectedRecord\n      });\n    };\n\n    this.processWithGroups = (data, dataState) => {\n      const aggregates = [{\n        field: \"navailablespace\",\n        aggregate: \"sum\"\n      }];\n      const groups = dataState.group;\n\n      if (groups) {\n        groups.map(group => group.aggregates = aggregates);\n      }\n\n      dataState.group = groups;\n      const newDataState = process(data, dataState); // setGroupIds({\n      //     data: newDataState.data,\n      //     group: dataState.group,\n      // });\n\n      return newDataState;\n    };\n\n    this.validateEsign = () => {\n      const inputParam = {\n        inputData: {\n          \"userinfo\": { ...this.props.Login.userInfo,\n            sreason: this.state.selectedRecord[\"esigncomments\"],\n            nreasoncode: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].value,\n            spredefinedreason: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].label\n          },\n          password: this.state.selectedRecord[\"esignpassword\"]\n        },\n        screenData: this.props.Login.screenData\n      };\n      this.props.validateEsignCredential(inputParam, \"openModal\");\n    };\n\n    this.state = {\n      queryBuilderFreezer: [],\n      retrievalType: 1,\n      // extractedColumnList: [   \n      //     { \"idsName\": \"IDS_STORAGESTRUCTURE\", \"dataField\": \"ssamplestoragelocationname\", \"width\": \"200px\" },\n      //     { \"idsName\": \"IDS_SAMPLESTORAGEPATH\", \"dataField\": \"scontainerpath\", \"width\": \"450px\" },\n      //     { \"idsName\": \"IDS_POSITION\", \"dataField\": \"sposition\", \"width\": \"100px\" },\n      //     { \"idsName\": \"IDS_SAMPLEID\", \"dataField\": \"spositionvalue\", \"width\": \"100px\" },\n      //     //{ \"idsName\": \"IDS_PROJECTTYPE\", \"dataField\": \"sprojecttypename\", \"width\": \"100px\" },\n      //     //{ \"idsName\": \"IDS_PRODUCT\", \"dataField\": \"sproductname\", \"width\": \"100px\" },\n      //     { \"idsName\": \"IDS_PARTICIPANTS\", \"dataField\": \"sparticipantid\", \"width\": \"100px\" },\n      //     //{ \"idsName\": \"IDS_VISITNUMBER\", \"dataField\": \"svisitnumber\", \"width\": \"100px\" },\n      //     { \"dataField\": \"svisitnumbershortcode\", \"idsName\": \"IDS_VISITNUMBERCODE\", \"width\": \"100px\" }, \n      //     { \"dataField\": \"sprojectshortcode\", \"idsName\": \"IDS_PROJECTTYPECODE\" , \"width\": \"100px\"} ,\n      //     { \"dataField\": \"sproductshortcode\", \"idsName\": \"IDS_PRODUCTCODE\", \"width\": \"100px\" } ,\n      //     { \"dataField\": \"ssampledonorshortcode\", \"idsName\": \"IDS_SAMPLEDONORCODE\", \"width\": \"100px\" }  ,\n      //     { \"dataField\": \"scollectiontubetypeshortcode\", \"idsName\": \"IDS_COLLECTIONTUBETYPECODE\", \"width\": \"100px\" }\n      // ],\n      sheetData: {},\n      selectedRecordFilter: {},\n      treeData: [{\n        title: 'Chicken',\n        children: [{\n          title: 'Egg'\n        }]\n      }],\n      toggleAction: false,\n      treeDataView: undefined,\n      toggleActionView: false,\n      treeData: [{\n        //  text: \"root\",\n        text: this.props.intl.formatMessage({\n          id: \"IDS_ROOT\"\n        }),\n        expanded: true,\n        editable: true,\n        root: true,\n        id: uuid()\n      }],\n      panes: [{\n        size: '50%',\n        scrollable: false\n      }],\n      selectedRecord: {},\n      userRoleControlRights: [],\n      controlMap: new Map(),\n      skip: 0,\n      detailSkip: 0,\n      detailTake: 10,\n      take: this.props.Login.settings ? this.props.Login.settings[3] : 25,\n      splitChangeWidthPercentage: 22,\n      selectedItem: undefined,\n      loading: false,\n      dataStateChange: {\n        take: 10,\n        skip: 0 // group: [\n        //     {\n        //         field: \"ssamplestoragelocationname\",\n        //     },\n        // ],\n\n      }\n    };\n    let fields = {}; // if (this.state.extractedColumnList) {\n    //     // let newArr=[...[  { \"dataField\": \"svisitnumbershortcode\", \"idsName\": \"IDS_VISITNUMBERCODE\", \"width\": \"100px\" }, \n    //     // { \"dataField\": \"sprojectshortcode\", \"idsName\": \"IDS_PROJECTTYPECODE\" , \"width\": \"100px\"} ,\n    //     // { \"dataField\": \"sproductshortcode\", \"idsName\": \"IDS_PRODUCTCODE\", \"width\": \"100px\" } ,\n    //     // { \"dataField\": \"ssampledonorshortcode\", \"idsName\": \"IDS_SAMPLEDONORCODE\", \"width\": \"100px\" }  ,\n    //     // { \"dataField\": \"scollectiontubetypeshortcode\", \"idsName\": \"IDS_COLLECTIONTUBETYPECODE\", \"width\": \"100px\" }]\n    //     // ,...this.state.extractedColumnList]\n    //     this.state.extractedColumnList.map(field => {\n    //         if (field.dataField !== 'ssamplestoragelocationname' && field.dataField !== 'sproductname'\n    //             && field.dataField !== 'sprojecttypename' && field.dataField !== 'svisitnumber') {\n    //             fields = {\n    //                 ...fields,\n    //                 [field.dataField]: {\n    //                     \"label\":\n    //                         this.props.intl.formatMessage({\n    //                             id: field.idsName,\n    //                         })\n    //                     ,\n    //                     \"type\": field.dataField === 'navailablespace' ? \"number\" : \"text\",\n    //                     \"valueSources\": [\"value\", \"func\"],\n    //                     \"mainWidgetProps\": {\n    //                         \"valueLabel\": \"Name\",\n    //                         \"valuePlaceholder\": this.props.intl.formatMessage({\n    //                             id: field.idsName\n    //                         })\n    //                     }\n    //                 }\n    //             }\n    //         }\n    //     });\n    // }\n\n    this.state = { ...this.state,\n      'fields': fields\n    };\n    this.searchRef = React.createRef();\n    this.dragClue = React.createRef();\n    this.confirmMessage = new ConfirmMessage();\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\n      toast.warn(props.Login.masterStatus);\n      props.Login.masterStatus = \"\";\n    }\n\n    if (props.Login.error !== \"\" && props.Login.error !== state.error) {\n      toast.error(props.Login.error);\n      props.Login.error = \"\";\n    }\n\n    return null;\n  }\n\n  componentDidUpdate(previousProps, previousState) {\n    let {\n      filterData,\n      storageCategoryOptions,\n      selectedRecord,\n      controlMap,\n      userRoleControlRights,\n      storageLocationOptions,\n      sampleStorageVersionOptions,\n      masterData,\n      selectedRecordFilter,\n      fields,\n      selectedProjectType,\n      selectedProjectTypeList,\n      queryBuilderFreezer\n    } = this.state;\n    let bool = false; ///////////////////////////////\n\n    if (this.props.Login.masterData.sampleStorageLocation !== previousProps.Login.masterData.sampleStorageLocation) {\n      bool = true;\n      this.props.Login.masterData.sampleStorageLocation && this.props.Login.masterData.sampleStorageLocation.map(item => queryBuilderFreezer.push({\n        \"value\": item.nsamplestoragelocationcode,\n        \"title\": item.ssamplestoragelocationname\n      }));\n      fields = { ...fields,\n        'nsamplestoragelocationcode': {\n          \"label\": this.props.intl.formatMessage({\n            id: \"IDS_STORAGESTRUCTURENAME\"\n          }),\n          \"type\": \"select\",\n          \"valueSources\": [\"value\"],\n          \"fieldSettings\": {\n            \"listValues\": queryBuilderFreezer\n          }\n        }\n      };\n    } // if (this.props.Login.masterData.sampleType !== previousProps.Login.masterData.sampleType) {\n    //     let queryBuilderFreezer = [];\n    //     bool = true;\n    //     this.props.Login.masterData.sampleType && this.props.Login.masterData.sampleType.map(\n    //         (item) => queryBuilderFreezer.push({ \"value\": item.nproductcode, \"title\": item.sproductname })\n    //     )\n    //     fields = {\n    //         ...fields,\n    //         'nproductcode': {\n    //             \"label\": this.props.intl.formatMessage({\n    //                 id: \"IDS_PRODUCT\",\n    //             }),\n    //             \"type\": \"select\",\n    //             \"valueSources\": [\"value\"],\n    //             \"fieldSettings\": {\n    //                 \"listValues\": queryBuilderFreezer\n    //             }\n    //         }\n    //     }\n    // }\n    // if (this.props.Login.masterData.ProjectType !== previousProps.Login.masterData.ProjectType) {\n    //     let queryBuilderFreezer = [];\n    //     bool = true;\n    //     this.props.Login.masterData.ProjectType && this.props.Login.masterData.ProjectType.map(\n    //         (item) => queryBuilderFreezer.push({ \"value\": item.nprojecttypecode, \"title\": item.sprojecttypename })\n    //     )\n    //     fields = {\n    //         ...fields,\n    //         'nprojecttypecode': {\n    //             \"label\": this.props.intl.formatMessage({\n    //                 id: \"IDS_PROJECTTYPE\",\n    //             }),\n    //             \"type\": \"select\",\n    //             \"valueSources\": [\"value\"],\n    //             \"fieldSettings\": {\n    //                 \"listValues\": queryBuilderFreezer\n    //             }\n    //         }\n    //     }\n    // } if (this.props.Login.masterData.VisitNumber !== previousProps.Login.masterData.VisitNumber) {\n    //     let queryBuilderFreezer = [];\n    //     bool = true;\n    //     this.props.Login.masterData.VisitNumber && this.props.Login.masterData.VisitNumber.map(\n    //         (item) => queryBuilderFreezer.push({ \"value\": item.nvisitnumbercode, \"title\": item.svisitnumber })\n    //     )\n    //     fields = {\n    //         ...fields,\n    //         'nvisitnumbercode': {\n    //             \"label\": this.props.intl.formatMessage({\n    //                 id: \"IDS_VISITNUMBER\",\n    //             }),\n    //             \"type\": \"select\",\n    //             \"valueSources\": [\"value\"],\n    //             \"fieldSettings\": {\n    //                 \"listValues\": queryBuilderFreezer\n    //             }\n    //         }\n    //     }\n    // }\n    ///////////////////////////////\n\n\n    if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\n      bool = true;\n      userRoleControlRights = [];\n\n      if (this.props.Login.userRoleControlRights) {\n        this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item => userRoleControlRights.push(item.ncontrolcode));\n      }\n\n      controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode);\n    }\n\n    if (this.props.Login.masterData.filterStorageCategory !== previousProps.Login.masterData.filterStorageCategory) {\n      bool = true;\n      const filterStorageCategorylist = constructOptionList(this.props.Login.masterData.filterStorageCategory || [], \"nstoragecategorycode\", \"sstoragecategoryname\", undefined, undefined, undefined);\n      storageCategoryOptions = filterStorageCategorylist.get(\"OptionList\");\n\n      if (this.props.Login.masterData.selectedStorageCategory) {\n        selectedRecordFilter = { ...selectedRecordFilter,\n          nstoragecategorycode: storageCategoryOptions.filter(item => item.value === this.props.Login.masterData.selectedStorageCategory.nstoragecategorycode)[0]\n        };\n      }\n    }\n\n    if (this.props.Login.masterData.sampleStorageLocation !== previousProps.Login.masterData.sampleStorageLocation) {\n      bool = true;\n      const sampleStorageLocationList = constructOptionList(this.props.Login.masterData.sampleStorageLocation || [], \"nsamplestoragelocationcode\", \"ssamplestoragelocationname\", undefined, undefined, undefined);\n      storageLocationOptions = sampleStorageLocationList.get(\"OptionList\");\n\n      if (this.props.Login.masterData.selectedSampleStorageLocation) {\n        selectedRecordFilter = { ...selectedRecordFilter,\n          nsamplestoragelocationcode: storageLocationOptions.filter(item => item.value === this.props.Login.masterData.selectedSampleStorageLocation.nsamplestoragelocationcode)[0]\n        };\n      }\n    }\n\n    if (this.props.Login.masterData.sampleStorageVersion !== previousProps.Login.masterData.sampleStorageVersion) {\n      bool = true;\n      const sampleStorageVersionList = constructOptionList(this.props.Login.masterData.sampleStorageVersion || [], \"nsamplestorageversioncode\", \"nversionno\", undefined, undefined, undefined);\n      sampleStorageVersionOptions = sampleStorageVersionList.get(\"OptionList\");\n\n      if (this.props.Login.masterData.selectedSampleStorageVersion) {\n        selectedRecordFilter = { ...selectedRecordFilter,\n          nsamplestorageversioncode: sampleStorageVersionOptions.filter(item => item.value === this.props.Login.masterData.selectedSampleStorageVersion.nsamplestorageversioncode)[0]\n        };\n      }\n    }\n\n    if (this.props.Login.masterData !== previousProps.Login.masterData) {\n      bool = true;\n      masterData = this.props.Login.masterData;\n      selectedProjectType = {\n        label: this.props.Login.masterData.selectedProjectType && this.props.Login.masterData.selectedProjectType.sprojecttypename,\n        value: this.props.Login.masterData.selectedProjectType && this.props.Login.masterData.selectedProjectType.nprojecttypecode\n      };\n      selectedProjectTypeList = this.props.Login.masterData.selectedProjectTypeList;\n      const filterStorageCategorylist = constructOptionList(this.props.Login.masterData.projectbarcodeconfig || [], \"nprojecttypecode\", \"sprojecttypename\", undefined, undefined, undefined);\n      masterData['projectbarcodeconfig'] = filterStorageCategorylist.get(\"OptionList\");\n\n      if (masterData.samplestoragelistpreperation === undefined) {\n        masterData['samplestoragelistpreperation'] = [];\n      }\n\n      filterData = this.generateBreadCrumData(this.props.Login.masterData);\n    }\n\n    if (this.state.masterData !== previousState.masterData) {\n      bool = true;\n      filterData = this.generateBreadCrumData(this.state.masterData);\n    } // ALPD-5531 added by Abdul 07-Mar-2025 for Handling Export template Click\n\n\n    if (this.state.export) {\n      this._excelExportHeader.save();\n\n      this.setState({\n        export: false\n      });\n    } // ALPD-5531 End\n\n\n    if (bool) {\n      this.setState({\n        storageCategoryOptions,\n        filterData,\n        selectedRecord,\n        controlMap,\n        userRoleControlRights,\n        storageLocationOptions,\n        sampleStorageVersionOptions,\n        masterData,\n        selectedRecordFilter,\n        fields,\n        selectedProjectType,\n        selectedProjectTypeList,\n        queryBuilderFreezer\n      });\n    }\n  }\n\n  componentDidMount() {\n    if (this.parentHeight) {\n      const height = this.parentHeight.clientHeight;\n      this.setState({\n        firstPane: height - 80,\n        parentHeight: height - 50\n      });\n    }\n  }\n\n  generateBreadCrumData(obj) {\n    const breadCrumbData = [];\n\n    if (this.state.masterData && this.state.masterData.filterStorageCategory) {\n      breadCrumbData.push({\n        \"label\": \"IDS_STORAGECATEGORY\",\n        \"value\": obj.selectedStorageCategoryName && obj.selectedStorageCategoryName !== null ? obj.selectedStorageCategoryName : \"NA\"\n      } // ,\n      // {\n      //     \"label\": \"IDS_STORAGECATEGORYLOCATION\",\n      //     \"value\": obj.selectedSampleStorageLocation &&\n      //         obj.selectedSampleStorageLocation.ssamplestoragelocationname !== null ?\n      //         obj.selectedSampleStorageLocation.ssamplestoragelocationname : \"NA\"\n      // },\n      // {\n      //     \"label\": \"IDS_STORAGECATEGORYVERSION\",\n      //     \"value\": obj.selectedSampleStorageVersion &&\n      //         obj.selectedSampleStorageVersion.nversionno !== null ?\n      //         obj.selectedSampleStorageVersion.nversionno : \"NA\"\n      // }\n      );\n    }\n\n    return breadCrumbData;\n  }\n\n  getSampleStorageLocation(inputData, fieldName, comboData) {\n    let selectedRecordFilter = this.state.selectedRecordFilter || {};\n    let inputParamData = {};\n    this.setState({\n      loading: true\n    });\n\n    if (fieldName === 'nsamplestoragelocationcode') {\n      inputParamData = {\n        nstoragecategorycode: selectedRecordFilter['nstoragecategorycode'].value,\n        nsamplestoragelocationcode: comboData.value,\n        userinfo: inputData.userinfo\n      };\n    } else {\n      inputParamData = {\n        nstoragecategorycode: comboData.value,\n        userinfo: inputData.userinfo\n      };\n    }\n\n    let urlArray = [];\n    const url1 = rsapi.post(\"samplestoragelistpreperation/getsamplestoragemapping\", inputParamData);\n    urlArray = [url1];\n    Axios.all(urlArray).then(response => {\n      let {\n        storageLocationOptions,\n        sampleStorageVersionOptions\n      } = this.state;\n      let sampleStorageLocationList = constructOptionList(response[0].data.sampleStorageLocation || [], \"nsamplestoragelocationcode\", \"ssamplestoragelocationname\", undefined, undefined, undefined);\n      storageLocationOptions = sampleStorageLocationList.get(\"OptionList\");\n      let sampleStorageVersionList = constructOptionList(response[0].data.sampleStorageVersion || [], \"nsamplestorageversioncode\", \"nversionno\", undefined, undefined, undefined);\n      sampleStorageVersionOptions = sampleStorageVersionList.get(\"OptionList\");\n      selectedRecordFilter = { ...selectedRecordFilter,\n        nsamplestoragelocationcode: storageLocationOptions.length > 0 ? storageLocationOptions[0] : [],\n        nsamplestorageversioncode: sampleStorageVersionOptions.length > 0 ? sampleStorageVersionOptions[0] : []\n      };\n      this.setState({\n        storageLocationOptions,\n        sampleStorageVersionOptions,\n        selectedRecordFilter: { ...selectedRecordFilter,\n          [fieldName]: comboData\n        },\n        loading: false\n      });\n    }).catch(error => {\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n\n      this.setState({\n        loading: false\n      });\n    });\n  }\n\n  addSampleStorageMapping() {\n    this.setState({\n      loading: true\n    });\n    let selectedRecord = this.state.selectedRecord;\n    let inputParamData = {\n      // nstoragecategorycode: this.state.selectedRecordFilter[\"nstoragecategorycode\"].value,\n      nsamplestoragelocationcode: this.state.masterData.selectedSampleStorageLocation.nsamplestoragelocationcode,\n      // nsamplestorageversioncode: this.state.selectedRecordFilter[\"nsamplestorageversioncode\"].value,\n      userinfo: this.props.Login.userInfo\n    };\n    let urlArray = [];\n    const url1 = rsapi.post(\"samplestoragelistpreperation/addSampleStorageMapping\", inputParamData);\n    const url2 = rsapi.post(\"product/getProduct\", {\n      'userinfo': this.props.Login.userInfo\n    });\n    const url3 = rsapi.post(\"containertype/getContainerType\", {\n      'userinfo': this.props.Login.userInfo\n    });\n    urlArray = [url1, url2];\n    Axios.all(urlArray).then(response => {\n      const storageMappingMap = constructOptionList(response[0].data['samplestoragecontainerpath'] || [], \"nsamplestoragecontainerpathcode\", \"scontainerpath\", undefined, undefined, true);\n      const storageMappingMapList = storageMappingMap.get(\"OptionList\");\n      let containerStructure = response[0].data['containerStructure'];\n      const containerTypeMap = constructOptionList(response[0].data['containerType'] || [], \"ncontainertypecode\", \"scontainertype\", undefined, undefined, true);\n      const containerTypeList = containerTypeMap.get(\"OptionList\");\n      const directionmasterMap = constructOptionList(response[0].data['directionmaster'] || [], \"ndirectionmastercode\", \"sdirection\", undefined, undefined, true);\n      const directionmasterList = directionmasterMap.get(\"OptionList\");\n      const containerstructureMap = constructOptionList(response[0].data['containerStructure'] || [], \"ncontainerstructurecode\", \"scontainerstructurename\", undefined, undefined, true);\n      const containerstructureList = containerstructureMap.get(\"OptionList\");\n      const productMap = constructOptionList(response[1].data['Product'] || [], \"nproductcode\", \"sproductname\", undefined, undefined, true);\n      const productList = productMap.get(\"OptionList\");\n      this.setState({\n        openModal: true,\n        selectedRecord: { ...selectedRecord,\n          storageMappingMapOptions: storageMappingMapList,\n          productOptions: productList,\n          containerTypeOptions: containerTypeList,\n          directionmasterOptions: directionmasterList,\n          // ncontainertypecode: containerTypeList[0],\n          // containerStructureOptions: containerstructureList,\n          // ncontainerstructurecode: containerstructureList[0],\n          nrow: containerStructure.length > 0 ? containerStructure[0].nrow : 1,\n          ncolumn: containerStructure.length > 0 ? containerStructure[0].ncolumn : 1,\n          isInitialRender: true\n        },\n        openSpreadSheet: false,\n        operation: 'create',\n        loading: false\n      });\n    }).catch(error => {\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n\n      this.setState({\n        loading: false\n      });\n    });\n  }\n\n  getprojectbarcodeconfig(comboData) {\n    let inputParamData = {};\n    this.setState({\n      loading: true\n    });\n    inputParamData = {\n      nprojecttypecode: comboData.value,\n      userinfo: this.props.Login.userInfo\n    };\n    let urlArray = [];\n    const url1 = rsapi.post(\"samplestoragelistpreperation/getProjectbarcodeconfig\", inputParamData);\n    urlArray = [url1];\n    Axios.all(urlArray).then(response => {\n      let masterData = this.state.masterData;\n      let submittedselectedRecord = this.state.submittedselectedRecord;\n\n      if (this.state.selectedProjectType.value !== comboData.value) {\n        masterData = { ...masterData,\n          samplestoragelistpreperation: []\n        };\n        submittedselectedRecord = {};\n      }\n\n      this.setState({\n        masterData,\n        submittedselectedRecord,\n        selectedProjectTypeList: sortData(response[0].data.selectedProjectTypeList),\n        selectedProjectType: {\n          label: comboData.label,\n          value: comboData.value\n        },\n        selectedRecord: {\n          nprojecttypecode: {\n            label: comboData.label,\n            value: comboData.value\n          }\n        },\n        loading: false\n      });\n    }).catch(error => {\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n\n      this.setState({\n        loading: false\n      });\n    });\n  }\n\n  getContainerStructure(inputData, fieldName, comboData) {\n    let inputParamData = {};\n    this.setState({\n      loading: true\n    });\n    inputParamData = {\n      ncontainertypecode: comboData.value,\n      userinfo: inputData.userinfo\n    };\n    let urlArray = [];\n    const url1 = rsapi.post(\"samplestoragelistpreperation/getContainerStructure\", inputParamData);\n    urlArray = [url1];\n    Axios.all(urlArray).then(response => {\n      let {\n        containerStructureOptions,\n        selectedRecord\n      } = this.state;\n      let containerStructureList = constructOptionList(response[0].data.containerStructure || [], \"ncontainerstructurecode\", \"scontainerstructurename\", undefined, undefined, undefined);\n      containerStructureOptions = containerStructureList.get(\"OptionList\");\n      selectedRecord = { ...selectedRecord,\n        nrow: containerStructureOptions.length > 0 ? containerStructureOptions[0].item.nrow : 1,\n        ncolumn: containerStructureOptions.length > 0 ? containerStructureOptions[0].item.ncolumn : 1,\n        ncontainerstructurecode: containerStructureOptions.length > 0 ? containerStructureOptions[0] : [],\n        containerStructureOptions: containerStructureOptions.length > 0 ? [...containerStructureOptions] : []\n      };\n      this.setState({\n        selectedRecord: { ...selectedRecord,\n          [fieldName]: comboData\n        },\n        loading: false\n      });\n    }).catch(error => {\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n\n      this.setState({\n        loading: false\n      });\n    });\n  }\n\n  getSelectedBarcodeData(inputParam) {\n    this.setState({\n      loading: true\n    });\n    let selectedRecord = this.state.selectedRecord || {};\n    let urlArray = [];\n    const url1 = rsapi.post(\"/samplestoragelistpreperation/getSelectedBarcodeData\", {\n      nprojecttypecode: this.state.selectedProjectType.value,\n      spositionvalue: inputParam.spositionvalue\n    });\n    urlArray = [url1];\n    Axios.all(urlArray).then(response => {\n      this.setState({\n        selectedBarcodeValue: { ...response[0].data['selectedBarcodeValue']\n        },\n        loading: false\n      });\n    }).catch(error => {\n      this.setState({\n        loading: false\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.info(error.response.data.rtn);\n      }\n    });\n  } //ALPD-4635\n\n\n  getDynamicFilterExecuteData(nflag) {\n    let selectedRecord = this.state.selectedRecord || {};\n\n    if (nflag === 2 ? true : selectedRecord.filterquery && selectedRecord.filterquery !== \"\") {\n      let isFilterEmpty = this.checkFilterIsEmptyQueryBuilder(selectedRecord.filterQueryTreeStr);\n\n      if (isFilterEmpty) {\n        this.setState({\n          loading: true\n        });\n        let obj = {\n          // ...inputParam.component, \n          label: 'samplestoragelistpreperation',\n          valuemember: 'nsamplestoragetransactioncode',\n          filterquery: nflag === 2 ? this.state.submittedselectedRecord.filterquery + \" and nprojecttypecode=\" + this.state.selectedProjectType.value : selectedRecord.filterquery + \" and nprojecttypecode=\" + this.state.selectedProjectType.value // , source: 'view_samplelistprep_' + this.state.selectedProjectType.value\n          ,\n          source: 'view_samplelistprep_',\n          userinfo: this.props.Login.userInfo,\n          nprojecttypecode: this.state.selectedProjectType.value\n        };\n        let urlArray = [];\n        const url1 = rsapi.post(\"/samplestoragelistpreperation/getdynamicfilterexecutedata\", obj);\n        urlArray = [url1];\n        Axios.all(urlArray).then(response => {\n          let masterData = this.state.masterData;\n          masterData = { ...masterData,\n            ...response[0].data\n          };\n          this.setState({\n            masterData: { ...masterData\n            },\n            loading: false,\n            openModal: false,\n            isFilterPopup: false,\n            submittedselectedRecord: nflag === 2 ? { ...this.state.submittedselectedRecord\n            } : { ...selectedRecord\n            },\n            dataStateChange: {\n              take: 10,\n              skip: 0\n            },\n            selectedRecord: {},\n            displayQuery: this.state.tree ? QbUtils.queryString(this.state.tree, this.state.config, true) : \"\"\n          });\n        }).catch(error => {\n          this.setState({\n            loading: false\n          });\n\n          if (error.response.status === 500) {\n            toast.error(error.message);\n          } else {\n            toast.info(error.response.data.rtn);\n          }\n        });\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_PROVIDEONEMOREFILTERDATAWITHNOTNULLOPERATOR\"\n        }));\n      }\n    } else {\n      toast.warn(this.props.intl.formatMessage({\n        id: \"IDS_SELECTAFILTER\"\n      }));\n    }\n  } // getDynamicFilterExecuteData(nflag) {\n  //     this.setState({ loading: true })\n  //     let selectedRecord = this.state.selectedRecord || {};\n  //     let obj = {// ...inputParam.component, \n  //         label: 'samplestoragelistpreperation', valuemember: 'nsamplestoragetransactioncode',\n  //         filterquery:   \n  //         selectedRecord.filterquery, source: 'view_sampleretrieval', userinfo: this.props.Login.userInfo\n  //     }\n  //     let urlArray = [];\n  //     const url1 = rsapi.post(\"/samplestoragelistpreperation/getdynamicfilterexecutedata\", obj);\n  //     urlArray = [url1];\n  //     Axios.all(urlArray)\n  //         .then(response => {\n  //             console.log(response)\n  //             let masterData = this.state.masterData\n  //             masterData = { ...masterData, ...response[0].data }\n  //             this.setState({\n  //                 masterData: { ...masterData },\n  //                 loading: false,\n  //                 openModal: false,\n  //                 submittedselectedRecord: nflag === 2 ?\n  //                     { ...this.state.submittedselectedRecord }\n  //                     :\n  //                     { ...selectedRecord }\n  //                 ,\n  //                 isFilterPopup: false,\n  //                 selectedRecord: {}\n  //             })\n  //         })\n  //         .catch(error => {\n  //             this.setState({\n  //                 loading: false\n  //             });\n  //             if (error.response.status === 500) {\n  //                 toast.error(error.message);\n  //             }\n  //             else {\n  //                 toast.info(error.response.data.rtn);\n  //             }\n  //         })\n  // }\n\n\n  shouldComponentUpdate(nextProps, nextState) {\n    if (this.state.openModal && nextState.isInitialRender === false && nextState.selectedRecord !== this.state.selectedRecord) {\n      return false;\n    } else if (this.state.openModal && nextState.isInitialRender === false && nextState.sheetData !== this.state.sheetData) {\n      return false;\n    } else {\n      return true;\n    }\n  }\n\n  gridfillingColumn(data) {\n    //  const tempArray = [];\n    // const temparray = data && data.map((option) => {\n    //     return { \"idsName\": option.sfieldname, \"dataField\": option.sfieldname, \"width\": \"200px\" };\n    // });\n    // return temparray;\n    const temparray1 = [{\n      \"idsName\": \"IDS_SAMPLEID\",\n      \"dataField\": \"spositionvalue\",\n      \"width\": \"200px\",\n      \"staticField\": true\n    }, {\n      \"idsName\": \"IDS_STORAGESTRUCTURE\",\n      \"dataField\": \"ssamplestoragelocationname\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_PATHWITHPOSITION\",\n      \"dataField\": \"scontainerpathwithposition\",\n      \"width\": \"500px\",\n      \"staticField\": true\n    }, {\n      \"idsName\": \"IDS_CONTAINERID\",\n      \"dataField\": \"sboxid\",\n      \"width\": \"200px\",\n      \"staticField\": true\n    }, // { \"idsName\": \"IDS_POSITION\", \"dataField\": \"sposition\", \"width\": \"200px\", \"staticField\": true },\n    {\n      \"idsName\": \"IDS_QUANTITY\",\n      \"dataField\": \"nquantity\",\n      \"width\": \"200px\",\n      \"staticField\": true\n    }, {\n      \"idsName\": \"IDS_UNIT\",\n      \"dataField\": \"sunitname\",\n      \"width\": \"200px\",\n      \"staticField\": true\n    }];\n    const temparray2 = data && data.map(option => {\n      return {\n        \"idsName\": option.sfieldname,\n        \"dataField\": option.sfieldname,\n        \"width\": \"200px\"\n      };\n    });\n    const newArray = [...temparray1, ...temparray2];\n    return newArray;\n  }\n\n  render() {\n    const addId = this.state.controlMap.has(\"Add samplestoragelistpreperation\") && this.state.controlMap.get(\"Add samplestoragelistpreperation\").ncontrolcode;\n    const editId = this.state.controlMap.has(\"Edit SampleStorageLocation\") && this.state.controlMap.get(\"Edit SampleStorageLocation\").ncontrolcode;\n    const deleteId = this.state.controlMap.has(\"Delete SampleStorageLocation\") && this.state.controlMap.get(\"Delete SampleStorageLocation\").ncontrolcode;\n    const copyId = this.state.controlMap.has(\"Copy SampleStorageLocation\") && this.state.controlMap.get(\"Copy SampleStorageLocation\").ncontrolcode;\n    const approveId = this.state.controlMap.has(\"Approve SampleStorageLocation\") && this.state.controlMap.get(\"Approve SampleStorageLocation\").ncontrolcode;\n    const extractedColumnList = this.state.selectedProjectTypeList ? this.gridfillingColumn(this.state.selectedProjectTypeList) : [];\n    let fields = {};\n\n    if (extractedColumnList.length > 0) {\n      extractedColumnList.map(field => {\n        field.hasOwnProperty(\"staticField\") ? fields = { ...fields,\n          [field.dataField]: {\n            \"label\": this.props.intl.formatMessage({\n              id: field.idsName\n            }),\n            \"type\": \"text\",\n            \"valueSources\": [\"value\", \"func\"],\n            \"mainWidgetProps\": {\n              \"valueLabel\": \"Name\",\n              \"valuePlaceholder\": this.props.intl.formatMessage({\n                id: field.idsName\n              })\n            }\n          }\n        } : field.dataField === 'ssamplestoragelocationname' && this.state.queryBuilderFreezer.length > 0 ? fields = { ...fields,\n          'nsamplestoragelocationcode': {\n            \"label\": this.props.intl.formatMessage({\n              id: \"IDS_STORAGESTRUCTURENAME\"\n            }),\n            \"type\": \"select\",\n            \"valueSources\": [\"value\"],\n            \"fieldSettings\": {\n              \"listValues\": this.state.queryBuilderFreezer\n            }\n          }\n        } : fields = { ...fields,\n          ['\"' + field.dataField + '\"']: {\n            \"label\": field.dataField,\n            \"type\": \"text\",\n            \"valueSources\": [\"value\", \"func\"],\n            \"mainWidgetProps\": {\n              \"valueLabel\": \"Name\",\n              \"valuePlaceholder\": field.dataField\n            }\n          }\n        };\n      });\n    }\n\n    const filterParam = {\n      inputListName: \"sampleStorageLocation\",\n      selectedObject: \"selectedSampleStorageLocation\",\n      primaryKeyField: \"nsamplestoragelocationcode\",\n      fetchUrl: \"samplestoragelistpreperation/getActiveSampleStorageMappingById\",\n      fecthInputObject: {\n        userinfo: this.props.Login.userInfo\n      },\n      masterData: this.props.Login.masterData,\n      searchFieldList: [\"ssamplestoragelocationname\"]\n    };\n    const breadCrumbData = this.state.filterData || [];\n    const confirmMessage = new ConfirmMessage();\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Preloader, {\n      loading: this.state.loading,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1755,\n        columnNumber: 17\n      }\n    }),\n    /*#__PURE__*/\n    //this.state.retrievalType === 1 ?\n    React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(ListWrapper, {\n      className: \"client-list-content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1759,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1762,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1763,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 3,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1764,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(FormSelectSearch, {\n      name: \"nprojecttypecode\",\n      as: \"select\",\n      onChange: event => this.onComboChange(event, 'nprojecttypecode'),\n      formLabel: this.props.intl.formatMessage({\n        id: \"IDS_PROJECTTYPE\"\n      }),\n      isMandatory: this.state.selectedRecord[\"nneedposition\"],\n      value: this.state.selectedProjectType ? this.state.selectedProjectType || [] : [],\n      options: this.state.masterData && this.state.masterData.projectbarcodeconfig || [],\n      optionId: \"value\",\n      optionValue: \"label\",\n      isMulti: false,\n      isDisabled: false,\n      isSearchable: false,\n      isClearable: false,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1765,\n        columnNumber: 45\n      }\n    }))), this.state.selectedProjectTypeList && /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1783,\n        columnNumber: 76\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1784,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(DataGrid // isDownloadPDFRequired={this.state.masterData && this.state.masterData.samplestoragelistpreperation &&\n    //     this.processWithGroups(this.state.masterData.samplestoragelistpreperation || [],\n    //         this.state.dataStateChange ? this.state.dataStateChange : {\n    //             take: 10,\n    //             skip: 0\n    //         }).data.length > 0 ?\n    //     true : false}\n    // isDownloadExcelRequired={this.state.masterData && this.state.masterData.samplestoragelistpreperation &&\n    //     this.processWithGroups(this.state.masterData.samplestoragelistpreperation || [],\n    //         this.state.dataStateChange ? this.state.dataStateChange : {\n    //             take: 10,\n    //             skip: 0\n    //         }).data.length > 0 ?\n    //     true : false}\n    , {\n      isCustomButton: true,\n      customButtonlist: [{\n        label: 'IDS_SEARCH',\n        id: {},\n        onClick: () => this.opensearch(),\n        controlname: 'faSearch'\n      }, // ALPD 5531 Start Button from export and bulk search Added by Abdul Gaffoor A on 07/03/2025\n      {\n        label: 'IDS_EXPORTTEMPLATE',\n        // id: {},\n        onClick: () => this.handleExportClick(),\n        controlname: 'faFileExcel'\n      }, {\n        label: 'IDS_BULKSEARCH',\n        // id: {},\n        onClick: () => this.handleImportTemplate(),\n        controlname: 'faFileImport'\n      } // ALPD 5531 End\n      ],\n      isRefreshRequired: false // onGroupChange={this.handleGroupChange}\n      ,\n      primaryKeyField: 'nsamplestoragetransactioncode'\n      /*data={this.state.masterData &&\r\n          this.state.masterData.samplestoragelistpreperation}*/\n      //ALPD-4767--Vignesh R(29-08-2024)\n      ,\n      data: this.state.masterData && this.state.masterData.samplestoragelistpreperation ? this.state.masterData.samplestoragelistpreperation.map(item => {\n        return { ...item,\n          ...(JSON.parse(item.jsondata.value) || {})\n        };\n      }) : []\n      /*dataResult={this.state.masterData &&\r\n          this.state.masterData.samplestoragelistpreperation ?\r\n          process(this.state.masterData.samplestoragelistpreperation || [],\r\n              this.state.dataStateChange ? this.state.dataStateChange : { skip: 0, take: 10 }) : []\r\n          // this.processWithGroups(this.state.masterData.samplestoragelistpreperation || [],\r\n          //     this.state.dataStateChange ? this.state.dataStateChange : {\r\n          //         take: 10,\r\n          //         skip: 0\r\n          //     })\r\n      }*/\n      //ALPD-4767--Vignesh R(29-08-2024)\n      ,\n      dataResult: this.state.masterData && this.state.masterData.samplestoragelistpreperation ? process(this.state.masterData.samplestoragelistpreperation.map(item => {\n        return { ...item,\n          ...JSON.parse(item.jsondata.value)\n        };\n      }) || [], this.state.dataStateChange ? this.state.dataStateChange : {\n        skip: 0,\n        take: 10\n      }) : [] // this.processWithGroups(this.state.masterData.samplestoragelistpreperation || [],\n      //     this.state.dataStateChange ? this.state.dataStateChange : {\n      //         take: 10,\n      //         skip: 0\n      //     })\n      ,\n      dataState: this.state.dataStateChange ? this.state.dataStateChange : {\n        skip: 0,\n        take: 10\n      },\n      dataStateChange: this.dataStateChange,\n      extractedColumnList: extractedColumnList,\n      controlMap: this.state.controlMap,\n      userRoleControlRights: this.state.userRoleControlRights,\n      userInfo: this.props.Login.userInfo,\n      deleteRecord: this.deleteRecord,\n      addRecord: () => this.openStorageMapping(),\n      pageable: true,\n      scrollable: 'scrollable' // isComponent={true}\n      ,\n      gridHeight: '600px' // isActionRequired={true}\n      ,\n      isToolBarRequired: true //ATE234 Janakumar ALPD-5577 Sample Storage-->while download the pdf, screen getting freezed\n      ,\n      isDownloadPDFRequired: false,\n      isDownloadExcelRequired: true // actionIcons={\n      //     [{\n      //         title: this.props.intl.formatMessage({ id: \"IDS_ADDSAMPLE\" }),\n      //         controlname: \"faPenSquare\",\n      //         hidden: false,\n      //         objectName: \"add\",\n      //         onClick: (param) => this.addSample(param, 1)\n      //     }]}\n      ,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1784,\n        columnNumber: 54\n      }\n    }), \" \")), this.state.export ? /*#__PURE__*/React.createElement(LocalizationProvider, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1882,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(ExcelExport, {\n      data: [],\n      collapsible: true,\n      fileName: this.props.Login.displayName && this.props.Login.displayName,\n      ref: exporter => {\n        this._excelExportHeader = exporter;\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1883,\n        columnNumber: 45\n      }\n    }, [...this.state.exportField].map(item => /*#__PURE__*/React.createElement(ExcelExportColumn, {\n      field: item.dataField,\n      title: this.props.intl.formatMessage({\n        id: item.idsName\n      }),\n      width: 200,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1891,\n        columnNumber: 53\n      }\n    })))) : \"\"))), this.state.openModal && /*#__PURE__*/React.createElement(SlideOutModal, {\n      show: this.state.openModal,\n      closeModal: this.closeModal,\n      hideSave: true,\n      showSubmit: true,\n      size: this.state.openSpreadSheet || this.state.isFilterPopup ? 'xl' : \"\",\n      operation: \"\",\n      inputParam: this.props.Login.inputParam,\n      screenName: this.state.isFilterPopup ? \"\" : this.state.isMultiSampleAdd ? this.props.intl.formatMessage({\n        id: \"IDS_STORAGESTRUCTURE\"\n      }) : this.state.importTemplate ? this.props.intl.formatMessage({\n        id: \"IDS_IMPORTSAMPLEID\"\n      }) : this.state.editedsheetData.scontainerpath,\n      onSaveClick: this.state.isFilterPopup ? this.getDynamicFilterExecuteData.bind(this) : this.state.importTemplate ? this.getImportSampleIDData : this.onSampleMappingSaveClick,\n      esign: this.props.Login.loadEsign // className={\"wide-popup\"}\n      ,\n      validateEsign: this.validateEsign,\n      masterStatus: this.props.Login.masterStatus,\n      updateStore: this.props.updateStore,\n      selectedRecord: this.state.selectedRecord || {},\n      addComponent: this.state.isFilterPopup ? /*#__PURE__*/React.createElement(FilterQueryBuilder, {\n        fields: fields,\n        isSampleStorage: true,\n        queryArray: this.state.queryArray,\n        skip: this.state.kendoSkip,\n        take: this.state.kendoTake,\n        onChange: this.onChange,\n        tree: this.props.Login.tree !== undefined ? this.props.Login.tree : this.state.selectedRecord.tree,\n        gridColumns: this.slideList,\n        filterData: this.props.Login.slideResult || [],\n        handlePageChange: this.handlePageChangeFilter,\n        static: true,\n        userInfo: this.props.Login.userInfo,\n        updateStore: this.props.updateStore,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1973,\n          columnNumber: 29\n        }\n      }) : this.props.Login.loadEsign ? /*#__PURE__*/React.createElement(Esign, {\n        operation: this.props.Login.operation,\n        formatMessage: this.props.intl.formatMessage,\n        onInputOnChange: this.onInputOnChange,\n        inputParam: this.props.Login.inputParam,\n        selectedRecord: this.state.selectedRecord || {},\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1990,\n          columnNumber: 33\n        }\n      }) : this.state.openSpreadSheet ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(MatrixComponent, {\n        Rows: this.state.Rows || 1,\n        userInfo: this.props.Login.userInfo,\n        columns: this.state.columns || 1,\n        selectedRecord: this.state.selectedRecord.sheetData || {},\n        sheetData: this.state.sheetData || {},\n        isMultiSampleAdd: this.state.isMultiSampleAdd,\n        childSheetDataChange: this.childSheetDataChange,\n        editedsheetData: this.state.editedsheetData,\n        multipleSheetData: this.state.masterData && this.state.masterData.samplestoragelistpreperation && process(this.state.masterData.samplestoragelistpreperation || [], this.state.dataStateChange ? this.state.dataStateChange : {\n          skip: 0,\n          take: 10\n        }).data,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1998,\n          columnNumber: 37\n        }\n      })) : // ALPD-5531 added by Abdul 07-Mar-2025 for Handling Export template Click\n      this.state.importTemplate ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(AddFile, {\n        selectedRecord: this.state.selectedRecord,\n        onDrop: this.onDropFile,\n        deleteAttachment: this.deleteAttachment,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2014,\n          columnNumber: 35\n        }\n      })) :\n      /*#__PURE__*/\n      // ALPD-5531 End\n      React.createElement(AddSampleStorageMapping, {\n        operation: this.state.operation,\n        selectedRecordFilter: this.state.selectedRecordFilter,\n        onInputChange: e => this.onInputChange(e),\n        onComboChange: this.onComboChange,\n        selectedRecord: this.state.selectedRecord || {},\n        childDataChange: this.childDataChange,\n        userInfo: this.props.Login.userInfo,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2021,\n          columnNumber: 37\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1954,\n        columnNumber: 21\n      }\n    }));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    Login: state.Login\n  };\n};\n\nexport default connect(mapStateToProps, {\n  callService\n})(injectIntl(SampleStorageListPreperation));","map":{"version":3,"sources":["E:/WorkingFolder/React_Postgres/ALPD/branches/SOURCE-513-PROD/SOURCE-513-ALPD-5500/QuaLISWeb/src/pages/basemaster/SampleStorageListPreperation.jsx"],"names":["React","Component","connect","injectIntl","Row","Col","toast","constructOptionList","getControlMap","onSaveMandatoryValidation","searchData","searchJsonData","showEsign","sortData","deleteAttachmentDropZone","onDropAttachFileList","Lims_JSON_stringify","FormSelectSearch","DataGrid","Utils","QbUtils","SlideOutModal","callService","DEFAULT_RETURN","ListWrapper","uuid","ConfirmMessage","transactionStatus","Esign","rsapi","AddSampleStorageMapping","Axios","Preloader","process","MatrixComponent","FilterQueryBuilder","ExcelExport","ExcelExportColumn","LocalizationProvider","AddFile","SampleStorageListPreperation","constructor","props","dragOverCnt","isDragDrop","SEPARATOR","uniqueIDArr","countforTree","pointedItem","undefined","getitemPath","openModal","updateInfo","typeName","data","selectedRecord","loadTreeProperties","treeData","text","expanded","editable","root","id","operation","updateStore","closeModal","loadEsign","Login","selectedId","state","setState","isInitialRender","importTemplate","isFilterPopup","onInputChange","event","target","type","name","checked","value","onSaveClick","saveType","formRef","onSaveProperties","openSpreadSheet","CRUDSampleStorageTransaction","editedsheetData","nsamplestoragemappingcode","isMultiSampleAdd","Object","keys","sheetData","map","join","toString","nsamplestoragelocationcode","JSON","stringify","sheetUpdate","userinfo","userInfo","onSaveSampleStorageTransaction","paneSizeChange","d","splitChangeWidthPercentage","handlePageChange","e","skip","take","handleDetailPageChange","openFilter","showFilter","closeFilter","reloadData","onFilterSubmit","onEditSampleStorageLocation","selectedSampleStorageVersion","editId","handleSearch","searchedTreeData","searchRef","current","isOnlyDraft","masterData","sampleStorageVersion","length","editSampleStorageLocation","openStorageMapping","addId","addSampleStorageMapping","deletesamplestoragemapping","param","selectedSampleStorageLocation","addMultipleSample","loading","opensearch","submittedselectedRecord","handleExportClick","exportField","export","handleImportTemplate","onDropFile","attachedFiles","fieldName","maxSize","actionType","deleteAttachment","file","getImportSampleIDData","formData","FormData","append","nformcode","selectedProjectType","intl","formatMessage","requestUrl","post","then","response","dataStateChange","catch","error","status","message","info","addSample","nflag","urlArray","url1","samplestoragelistpreperation","item","all","parse","Rows","nrow","columns","ncolumn","warn","onComboChange","comboData","selectedRecordFilter","getSampleStorageLocation","nstoragecategorycode","getContainerStructure","ncontainertypecode","getprojectbarcodeconfig","containerpathCodeArray","inputParam","nsamplestoragetransactioncode","parseInt","nproductcode","ndirectionmastercode","ssamplestoragemappingname","nsamplestoragecontainerpathcode","containerpathsize","nneedposition","ncontainerstructurecode","nquantity","userRoleControlRights","ncontrolcode","screenData","getsamplestoragetransaction","childDataChange","childSheetDataChange","getActiveSampleStorageMappingById","filterColumnData","filterValue","filterParam","primaryKeyValue","searchedData","inputListName","primaryKeyField","isjsondata","searchFieldList","fetchUrl","fecthInputObject","sortField","sortOrder","selectedObject","forEach","unchangeList","indexOf","modalName","inputParamData","object","selectedStorageCategoryName","sstoragecategoryname","filterData","generateBreadCrumData","onSampleMappingSaveClick","mandatoryFields","dataState","approveSampleStorageMapping","checkFilterIsEmptyQueryBuilder","settings","YES","isFilterEmpty","ParentItem","childArray","children1","i","childData","hasOwnProperty","properties","operator","fetchRecord","url2","url3","storageMappingMap","storageMappingMapList","get","containerStructure","containerTypeMap","containerTypeList","directionmasterMap","directionmasterList","containerstructureMap","containerstructureList","productMap","productList","editedObject","editsampleStorageMapping","unshift","label","scontainerpath","sdirection","sproductname","scontainertype","scontainerstructurename","directionmasterOptions","storageMappingMapOptions","productOptions","containerTypeOptions","containerStructureOptions","retrievalType","onInputOnChange","handlePageChangeFilter","kendoSkip","kendoTake","onChange","immutableTree","config","getTree","sqlFormat","tree","processWithGroups","aggregates","field","aggregate","groups","group","newDataState","validateEsign","inputData","sreason","nreasoncode","spredefinedreason","password","validateEsignCredential","queryBuilderFreezer","title","children","toggleAction","treeDataView","toggleActionView","panes","size","scrollable","controlMap","Map","detailSkip","detailTake","selectedItem","fields","createRef","dragClue","confirmMessage","getDerivedStateFromProps","masterStatus","componentDidUpdate","previousProps","previousState","storageCategoryOptions","storageLocationOptions","sampleStorageVersionOptions","selectedProjectTypeList","bool","sampleStorageLocation","push","ssamplestoragelocationname","values","filterStorageCategory","filterStorageCategorylist","selectedStorageCategory","filter","sampleStorageLocationList","sampleStorageVersionList","nsamplestorageversioncode","sprojecttypename","nprojecttypecode","projectbarcodeconfig","_excelExportHeader","save","componentDidMount","parentHeight","height","clientHeight","firstPane","obj","breadCrumbData","containerStructureList","getSelectedBarcodeData","spositionvalue","selectedBarcodeValue","rtn","getDynamicFilterExecuteData","filterquery","filterQueryTreeStr","valuemember","source","displayQuery","queryString","shouldComponentUpdate","nextProps","nextState","gridfillingColumn","temparray1","temparray2","option","sfieldname","newArray","render","has","deleteId","copyId","approveId","extractedColumnList","dataField","idsName","onClick","controlname","jsondata","deleteRecord","displayName","exporter","bind","queryArray","slideList","slideResult","mapStateToProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { injectIntl,  } from 'react-intl';\r\nimport { Row, Col } from 'react-bootstrap';\r\nimport { toast } from 'react-toastify';\r\nimport { constructOptionList, getControlMap, onSaveMandatoryValidation, searchData,\r\n     searchJsonData, showEsign, sortData, deleteAttachmentDropZone, onDropAttachFileList,\r\n     Lims_JSON_stringify\r\n    } from '../../components/CommonScript';\r\n//import SortableTree from 'react-sortable-tree'; \r\nimport FormSelectSearch from '../../components/form-select-search/form-select-search.component';\r\nimport DataGrid from '../../components/data-grid/data-grid.component';\r\nimport {\r\n    Utils as QbUtils,\r\n} from \"@react-awesome-query-builder/ui\";\r\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\r\nimport {\r\n    callService\r\n} from '../../actions';\r\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\r\nimport { ListWrapper } from '../../components/client-group.styles';\r\n// import ReactTooltip from 'react-tooltip';\r\nimport { uuid } from \"uuidv4\";\r\nimport ConfirmMessage from '../../components/confirm-alert/confirm-message.component';\r\nimport { transactionStatus } from '../../components/Enumeration';\r\nimport Esign from '../audittrail/Esign';\r\nimport rsapi from '../../rsapi';\r\nimport AddSampleStorageMapping from './AddSampleStorageMapping';\r\nimport Axios from 'axios';\r\nimport Preloader from '../../components/preloader/preloader.component';\r\nimport {  process } from '@progress/kendo-data-query';\r\n//import Spreadsheet from '../../components/Spreadsheet/Spreadsheet';\r\nimport MatrixComponent from '../../components/MatrixComponent';\r\nimport FilterQueryBuilder from '../../components/FilterQueryBuilder';\r\nimport { ExcelExport, ExcelExportColumn } from '@progress/kendo-react-excel-export';\r\nimport { LocalizationProvider } from '@progress/kendo-react-intl';\r\nimport AddFile from \"../goodsin/AddFile\";\r\n\r\n\r\nclass SampleStorageListPreperation extends Component {\r\n    dragOverCnt = 0;\r\n    isDragDrop = false;\r\n    SEPARATOR = '_';\r\n    uniqueIDArr = [];\r\n    countforTree = 0;\r\n    pointedItem = undefined\r\n    getitemPath = {};\r\n\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            queryBuilderFreezer:[],\r\n            retrievalType: 1,\r\n            // extractedColumnList: [   \r\n            //     { \"idsName\": \"IDS_STORAGESTRUCTURE\", \"dataField\": \"ssamplestoragelocationname\", \"width\": \"200px\" },\r\n            //     { \"idsName\": \"IDS_SAMPLESTORAGEPATH\", \"dataField\": \"scontainerpath\", \"width\": \"450px\" },\r\n            //     { \"idsName\": \"IDS_POSITION\", \"dataField\": \"sposition\", \"width\": \"100px\" },\r\n            //     { \"idsName\": \"IDS_SAMPLEID\", \"dataField\": \"spositionvalue\", \"width\": \"100px\" },\r\n            //     //{ \"idsName\": \"IDS_PROJECTTYPE\", \"dataField\": \"sprojecttypename\", \"width\": \"100px\" },\r\n            //     //{ \"idsName\": \"IDS_PRODUCT\", \"dataField\": \"sproductname\", \"width\": \"100px\" },\r\n            //     { \"idsName\": \"IDS_PARTICIPANTS\", \"dataField\": \"sparticipantid\", \"width\": \"100px\" },\r\n            //     //{ \"idsName\": \"IDS_VISITNUMBER\", \"dataField\": \"svisitnumber\", \"width\": \"100px\" },\r\n            //     { \"dataField\": \"svisitnumbershortcode\", \"idsName\": \"IDS_VISITNUMBERCODE\", \"width\": \"100px\" }, \r\n            //     { \"dataField\": \"sprojectshortcode\", \"idsName\": \"IDS_PROJECTTYPECODE\" , \"width\": \"100px\"} ,\r\n            //     { \"dataField\": \"sproductshortcode\", \"idsName\": \"IDS_PRODUCTCODE\", \"width\": \"100px\" } ,\r\n            //     { \"dataField\": \"ssampledonorshortcode\", \"idsName\": \"IDS_SAMPLEDONORCODE\", \"width\": \"100px\" }  ,\r\n            //     { \"dataField\": \"scollectiontubetypeshortcode\", \"idsName\": \"IDS_COLLECTIONTUBETYPECODE\", \"width\": \"100px\" }\r\n            // ],\r\n            sheetData: {},\r\n            selectedRecordFilter: {},\r\n            treeData: [{ title: 'Chicken', children: [{ title: 'Egg' }] }],\r\n            toggleAction: false,\r\n            treeDataView: undefined,\r\n            toggleActionView: false,\r\n            treeData: [\r\n                {\r\n                    //  text: \"root\",\r\n                    text: this.props.intl.formatMessage({ id: \"IDS_ROOT\" }),\r\n                    expanded: true,\r\n                    editable: true,\r\n                    root: true,\r\n                    id: uuid(),\r\n                }],\r\n            panes: [{\r\n                size: '50%',\r\n                scrollable: false\r\n            }],\r\n            selectedRecord: {},\r\n            userRoleControlRights: [],\r\n            controlMap: new Map(),\r\n            skip: 0,\r\n            detailSkip: 0,\r\n            detailTake: 10,\r\n            take: this.props.Login.settings ?\r\n                this.props.Login.settings[3] : 25,\r\n            splitChangeWidthPercentage: 22,\r\n            selectedItem: undefined,\r\n            loading: false,\r\n            dataStateChange: {\r\n                take: 10,\r\n                skip: 0,\r\n                // group: [\r\n                //     {\r\n                //         field: \"ssamplestoragelocationname\",\r\n                //     },\r\n                // ],\r\n            }\r\n        };\r\n        let fields = {};\r\n        // if (this.state.extractedColumnList) {\r\n        //     // let newArr=[...[  { \"dataField\": \"svisitnumbershortcode\", \"idsName\": \"IDS_VISITNUMBERCODE\", \"width\": \"100px\" }, \r\n        //     // { \"dataField\": \"sprojectshortcode\", \"idsName\": \"IDS_PROJECTTYPECODE\" , \"width\": \"100px\"} ,\r\n        //     // { \"dataField\": \"sproductshortcode\", \"idsName\": \"IDS_PRODUCTCODE\", \"width\": \"100px\" } ,\r\n        //     // { \"dataField\": \"ssampledonorshortcode\", \"idsName\": \"IDS_SAMPLEDONORCODE\", \"width\": \"100px\" }  ,\r\n        //     // { \"dataField\": \"scollectiontubetypeshortcode\", \"idsName\": \"IDS_COLLECTIONTUBETYPECODE\", \"width\": \"100px\" }]\r\n        //     // ,...this.state.extractedColumnList]\r\n        //     this.state.extractedColumnList.map(field => {\r\n        //         if (field.dataField !== 'ssamplestoragelocationname' && field.dataField !== 'sproductname'\r\n        //             && field.dataField !== 'sprojecttypename' && field.dataField !== 'svisitnumber') {\r\n        //             fields = {\r\n        //                 ...fields,\r\n        //                 [field.dataField]: {\r\n        //                     \"label\":\r\n        //                         this.props.intl.formatMessage({\r\n        //                             id: field.idsName,\r\n        //                         })\r\n        //                     ,\r\n        //                     \"type\": field.dataField === 'navailablespace' ? \"number\" : \"text\",\r\n        //                     \"valueSources\": [\"value\", \"func\"],\r\n\r\n        //                     \"mainWidgetProps\": {\r\n        //                         \"valueLabel\": \"Name\",\r\n        //                         \"valuePlaceholder\": this.props.intl.formatMessage({\r\n        //                             id: field.idsName\r\n        //                         })\r\n        //                     }\r\n        //                 }\r\n        //             }\r\n        //         }\r\n        //     });\r\n        // }\r\n        this.state = { ... this.state, 'fields': fields }\r\n        this.searchRef = React.createRef();\r\n        this.dragClue = React.createRef();\r\n        this.confirmMessage = new ConfirmMessage();\r\n    }\r\n    static getDerivedStateFromProps(props, state) {\r\n\r\n        if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\r\n            toast.warn(props.Login.masterStatus);\r\n            props.Login.masterStatus = \"\";\r\n        }\r\n\r\n        if (props.Login.error !== \"\" && props.Login.error !== state.error) {\r\n            toast.error(props.Login.error)\r\n            props.Login.error = \"\";\r\n        }\r\n        return null;\r\n    }\r\n    componentDidUpdate(previousProps, previousState) {\r\n        let { filterData, storageCategoryOptions,\r\n            selectedRecord, controlMap,\r\n            userRoleControlRights, storageLocationOptions,\r\n            sampleStorageVersionOptions, masterData, selectedRecordFilter, fields, selectedProjectType, selectedProjectTypeList,queryBuilderFreezer } = this.state\r\n        let bool = false;\r\n        ///////////////////////////////\r\n        if (this.props.Login.masterData.sampleStorageLocation !== previousProps.Login.masterData.sampleStorageLocation) { \r\n            bool = true;\r\n            this.props.Login.masterData.sampleStorageLocation && this.props.Login.masterData.sampleStorageLocation.map(\r\n                (item) => queryBuilderFreezer.push({ \"value\": item.nsamplestoragelocationcode, \"title\": item.ssamplestoragelocationname })\r\n            )\r\n            fields = {\r\n                ...fields,\r\n                'nsamplestoragelocationcode': {\r\n                    \"label\": this.props.intl.formatMessage({\r\n                        id: \"IDS_STORAGESTRUCTURENAME\",\r\n                    }),\r\n                    \"type\": \"select\",\r\n                    \"valueSources\": [\"value\"],\r\n                    \"fieldSettings\": {\r\n                        \"listValues\": queryBuilderFreezer\r\n                    }\r\n                }\r\n            }\r\n\r\n        }\r\n        // if (this.props.Login.masterData.sampleType !== previousProps.Login.masterData.sampleType) {\r\n        //     let queryBuilderFreezer = [];\r\n        //     bool = true;\r\n        //     this.props.Login.masterData.sampleType && this.props.Login.masterData.sampleType.map(\r\n        //         (item) => queryBuilderFreezer.push({ \"value\": item.nproductcode, \"title\": item.sproductname })\r\n        //     )\r\n        //     fields = {\r\n        //         ...fields,\r\n        //         'nproductcode': {\r\n        //             \"label\": this.props.intl.formatMessage({\r\n        //                 id: \"IDS_PRODUCT\",\r\n        //             }),\r\n        //             \"type\": \"select\",\r\n        //             \"valueSources\": [\"value\"],\r\n        //             \"fieldSettings\": {\r\n        //                 \"listValues\": queryBuilderFreezer\r\n        //             }\r\n        //         }\r\n        //     }\r\n\r\n        // }\r\n        // if (this.props.Login.masterData.ProjectType !== previousProps.Login.masterData.ProjectType) {\r\n        //     let queryBuilderFreezer = [];\r\n        //     bool = true;\r\n        //     this.props.Login.masterData.ProjectType && this.props.Login.masterData.ProjectType.map(\r\n        //         (item) => queryBuilderFreezer.push({ \"value\": item.nprojecttypecode, \"title\": item.sprojecttypename })\r\n        //     )\r\n        //     fields = {\r\n        //         ...fields,\r\n        //         'nprojecttypecode': {\r\n        //             \"label\": this.props.intl.formatMessage({\r\n        //                 id: \"IDS_PROJECTTYPE\",\r\n        //             }),\r\n        //             \"type\": \"select\",\r\n        //             \"valueSources\": [\"value\"],\r\n        //             \"fieldSettings\": {\r\n        //                 \"listValues\": queryBuilderFreezer\r\n        //             }\r\n        //         }\r\n        //     }\r\n\r\n        // } if (this.props.Login.masterData.VisitNumber !== previousProps.Login.masterData.VisitNumber) {\r\n        //     let queryBuilderFreezer = [];\r\n        //     bool = true;\r\n        //     this.props.Login.masterData.VisitNumber && this.props.Login.masterData.VisitNumber.map(\r\n        //         (item) => queryBuilderFreezer.push({ \"value\": item.nvisitnumbercode, \"title\": item.svisitnumber })\r\n        //     )\r\n        //     fields = {\r\n        //         ...fields,\r\n        //         'nvisitnumbercode': {\r\n        //             \"label\": this.props.intl.formatMessage({\r\n        //                 id: \"IDS_VISITNUMBER\",\r\n        //             }),\r\n        //             \"type\": \"select\",\r\n        //             \"valueSources\": [\"value\"],\r\n        //             \"fieldSettings\": {\r\n        //                 \"listValues\": queryBuilderFreezer\r\n        //             }\r\n        //         }\r\n        //     }\r\n\r\n        // }\r\n        ///////////////////////////////\r\n        if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\r\n            bool = true;\r\n            userRoleControlRights = [];\r\n            if (this.props.Login.userRoleControlRights) {\r\n                this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item =>\r\n                    userRoleControlRights.push(item.ncontrolcode))\r\n            }\r\n            controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode)\r\n\r\n        }\r\n\r\n        if (this.props.Login.masterData.filterStorageCategory !== previousProps.Login.masterData.filterStorageCategory) {\r\n            bool = true;\r\n            const filterStorageCategorylist = constructOptionList(this.props.Login.masterData.filterStorageCategory || [], \"nstoragecategorycode\",\r\n                \"sstoragecategoryname\", undefined, undefined, undefined);\r\n            storageCategoryOptions = filterStorageCategorylist.get(\"OptionList\");\r\n            if (this.props.Login.masterData.selectedStorageCategory) {\r\n                selectedRecordFilter = {\r\n                    ...selectedRecordFilter,\r\n                    nstoragecategorycode: storageCategoryOptions.filter(item =>\r\n                        item.value === this.props.Login.masterData.selectedStorageCategory.nstoragecategorycode)[0]\r\n                }\r\n            }\r\n\r\n        }\r\n        if (this.props.Login.masterData.sampleStorageLocation !== previousProps.Login.masterData.sampleStorageLocation) {\r\n            bool = true;\r\n            const sampleStorageLocationList = constructOptionList(this.props.Login.masterData.sampleStorageLocation || [], \"nsamplestoragelocationcode\",\r\n                \"ssamplestoragelocationname\", undefined, undefined, undefined);\r\n            storageLocationOptions = sampleStorageLocationList.get(\"OptionList\");\r\n            if (this.props.Login.masterData.selectedSampleStorageLocation) {\r\n                selectedRecordFilter = {\r\n                    ...selectedRecordFilter,\r\n                    nsamplestoragelocationcode: storageLocationOptions.filter(item =>\r\n                        item.value === this.props.Login.masterData.selectedSampleStorageLocation.nsamplestoragelocationcode)[0]\r\n                }\r\n            }\r\n\r\n\r\n        }\r\n\r\n        if (this.props.Login.masterData.sampleStorageVersion !== previousProps.Login.masterData.sampleStorageVersion) {\r\n            bool = true;\r\n            const sampleStorageVersionList = constructOptionList(this.props.Login.masterData.sampleStorageVersion || [], \"nsamplestorageversioncode\",\r\n                \"nversionno\", undefined, undefined, undefined);\r\n            sampleStorageVersionOptions = sampleStorageVersionList.get(\"OptionList\");\r\n            if (this.props.Login.masterData.selectedSampleStorageVersion) {\r\n                selectedRecordFilter = {\r\n                    ...selectedRecordFilter,\r\n                    nsamplestorageversioncode: sampleStorageVersionOptions.filter(item =>\r\n                        item.value === this.props.Login.masterData.selectedSampleStorageVersion.nsamplestorageversioncode)[0]\r\n                }\r\n            }\r\n        }\r\n\r\n        if (this.props.Login.masterData !== previousProps.Login.masterData) {\r\n            bool = true;\r\n            masterData = this.props.Login.masterData;\r\n            selectedProjectType = {\r\n                label: this.props.Login.masterData.selectedProjectType &&\r\n                    this.props.Login.masterData.selectedProjectType.sprojecttypename, value:\r\n                    this.props.Login.masterData.selectedProjectType &&\r\n                    this.props.Login.masterData.selectedProjectType.nprojecttypecode\r\n            };\r\n            selectedProjectTypeList = this.props.Login.masterData.selectedProjectTypeList;\r\n            const filterStorageCategorylist = constructOptionList(this.props.Login.masterData.projectbarcodeconfig || [], \"nprojecttypecode\",\r\n                \"sprojecttypename\", undefined, undefined, undefined);\r\n            masterData['projectbarcodeconfig'] = filterStorageCategorylist.get(\"OptionList\");\r\n            if(masterData.samplestoragelistpreperation===undefined){\r\n                masterData['samplestoragelistpreperation']=[]\r\n            } \r\n            filterData = this.generateBreadCrumData(this.props.Login.masterData);\r\n\r\n        }\r\n        if (this.state.masterData !== previousState.masterData) {\r\n            bool = true;\r\n            filterData = this.generateBreadCrumData(this.state.masterData);\r\n\r\n        }\r\n// ALPD-5531 added by Abdul 07-Mar-2025 for Handling Export template Click\r\n        if (this.state.export) {\r\n            this._excelExportHeader.save()\r\n            this.setState({ export: false })\r\n        }\r\n// ALPD-5531 End\r\n\r\n\r\n        if (bool) {\r\n            this.setState({\r\n                storageCategoryOptions, filterData,\r\n                selectedRecord, controlMap,\r\n                userRoleControlRights, storageLocationOptions,\r\n                sampleStorageVersionOptions, masterData, selectedRecordFilter, fields, selectedProjectType, selectedProjectTypeList,queryBuilderFreezer\r\n            });\r\n        }\r\n\r\n    }\r\n\r\n\r\n    openModal = () => {\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                openModal: true, selectedRecord: {}, loadTreeProperties: false,\r\n                treeData: [\r\n                    {\r\n                        text: \"root\",\r\n                        expanded: true,\r\n                        editable: true,\r\n                        root: true,\r\n                        id: uuid(),\r\n                    },\r\n                ], operation: \"create\"\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n    closeModal = () => {\r\n        // const updateInfo = {\r\n        //     typeName: DEFAULT_RETURN,\r\n        //     data: {\r\n        //         openModal: false, selectedRecord: {}\r\n        //     }\r\n        // }\r\n        // this.props.updateStore(updateInfo);\r\n        let loadEsign = this.props.Login.loadEsign;\r\n        let openModal = this.props.Login.openModal;\r\n        let selectedId = this.props.Login.selectedId;\r\n        let selectedRecord = this.state.selectedRecord; //this.props.Login.selectedRecord;\r\n        if (this.props.Login.loadEsign) {\r\n            if (this.props.Login.operation === \"delete\" || this.props.Login.operation === \"Approve\" || this.props.Login.operation === \"copy\") {\r\n                loadEsign = false;\r\n                openModal = false;\r\n                selectedRecord = {};\r\n                selectedId = null;\r\n            }\r\n            else {\r\n                loadEsign = false;\r\n\r\n            }\r\n        }\r\n        else {\r\n            openModal = false;\r\n            selectedId = null;\r\n            selectedRecord = {};\r\n        }\r\n\r\n        // const updateInfo = {\r\n        //     typeName: DEFAULT_RETURN,\r\n        //     data: { openModal, loadEsign, selectedRecord, selectedId }\r\n        // }\r\n        // this.props.updateStore(updateInfo);\r\n        // this.getsamplestoragetransaction({}, this.props.Login.userInfo);\r\n        // if (!this.state.isFilterPopup) {\r\n        //     this.getDynamicFilterExecuteData()\r\n\r\n        // }\r\n        this.setState({\r\n            selectedRecord,\r\n            openModal: false, isInitialRender: true, importTemplate: false\r\n            , isFilterPopup: false\r\n        })\r\n    }\r\n    onInputChange = (event) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if (event.target.type === \"checkbox\") {\r\n            selectedRecord[event.target.name] = event.target.checked;\r\n        } else {\r\n            selectedRecord[event.target.name] = event.target.value;\r\n        }\r\n\r\n        this.setState({ selectedRecord });\r\n    };\r\n\r\n    onSaveClick = (saveType, formRef) => {\r\n        if (this.props.Login.loadTreeProperties === true) {\r\n            this.onSaveProperties(saveType, formRef);\r\n        } else if (this.state.openSpreadSheet) {\r\n            this.CRUDSampleStorageTransaction({\r\n                ...this.state.editedsheetData,\r\n                nsamplestoragemappingcode: this.state.isMultiSampleAdd ?\r\n                    Object.keys(this.state.sheetData).map(nsamplestoragemappingcode => nsamplestoragemappingcode).join(\",\")\r\n                    : this.state.editedsheetData.nsamplestoragemappingcode.toString(),\r\n                nsamplestoragelocationcode: this.state.editedsheetData.nsamplestoragelocationcode,\r\n                sheetData: JSON.stringify(this.state.sheetData ? this.state.sheetData : {}),\r\n                sheetUpdate: true,\r\n                userinfo: this.props.Login.userInfo,\r\n                isMultiSampleAdd: this.state.isMultiSampleAdd\r\n            }, 'create');\r\n        } else {\r\n            this.onSaveSampleStorageTransaction(saveType, formRef);\r\n        }\r\n    };\r\n\r\n\r\n    paneSizeChange = (d) => {\r\n        this.setState({\r\n            splitChangeWidthPercentage: d\r\n        })\r\n    }\r\n    handlePageChange = e => {\r\n        this.setState({\r\n            skip: e.skip,\r\n            take: e.take\r\n        });\r\n    };\r\n    handleDetailPageChange = e => {\r\n        this.setState({\r\n            skip: e.skip,\r\n            take: e.take\r\n        });\r\n    };\r\n    componentDidMount() {\r\n        if (this.parentHeight) {\r\n            const height = this.parentHeight.clientHeight;\r\n            this.setState({\r\n                firstPane: height - 80,\r\n                parentHeight: height - 50\r\n            });\r\n        }\r\n    }\r\n    generateBreadCrumData(obj) {\r\n        const breadCrumbData = [];\r\n        if (this.state.masterData && this.state.masterData.filterStorageCategory) {\r\n\r\n            breadCrumbData.push(\r\n                {\r\n                    \"label\": \"IDS_STORAGECATEGORY\",\r\n                    \"value\": obj.selectedStorageCategoryName &&\r\n                        obj.selectedStorageCategoryName !== null ?\r\n                        obj.selectedStorageCategoryName : \"NA\"\r\n\r\n                }\r\n                // ,\r\n                // {\r\n                //     \"label\": \"IDS_STORAGECATEGORYLOCATION\",\r\n                //     \"value\": obj.selectedSampleStorageLocation &&\r\n                //         obj.selectedSampleStorageLocation.ssamplestoragelocationname !== null ?\r\n                //         obj.selectedSampleStorageLocation.ssamplestoragelocationname : \"NA\"\r\n                // },\r\n                // {\r\n                //     \"label\": \"IDS_STORAGECATEGORYVERSION\",\r\n                //     \"value\": obj.selectedSampleStorageVersion &&\r\n                //         obj.selectedSampleStorageVersion.nversionno !== null ?\r\n                //         obj.selectedSampleStorageVersion.nversionno : \"NA\"\r\n                // }\r\n            );\r\n        }\r\n        return breadCrumbData;\r\n    }\r\n\r\n    openFilter = () => {\r\n        let showFilter = !this.props.Login.showFilter\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { showFilter }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    closeFilter = () => {\r\n\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { showFilter: false }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n    reloadData = () => {\r\n        this.onFilterSubmit();\r\n    }\r\n    onEditSampleStorageLocation = (selectedSampleStorageVersion, userInfo, editId) => {\r\n        this.handleSearch();\r\n        this.setState({ searchedTreeData: undefined })\r\n        if (this.searchRef.current) {\r\n            this.searchRef.current.value = \"\";\r\n        }\r\n\r\n        let isOnlyDraft = false;\r\n        if (this.props.Login.masterData.sampleStorageVersion && this.props.Login.masterData.sampleStorageVersion.length > 1) {\r\n            isOnlyDraft = true;\r\n        }\r\n        this.props.editSampleStorageLocation(selectedSampleStorageVersion, userInfo, isOnlyDraft, editId);\r\n    }\r\n    openStorageMapping = (addId) => {\r\n        this.addSampleStorageMapping({ userInfo: this.props.Login.userInfo, addId });\r\n    }\r\n    deletesamplestoragemapping = (param) => {\r\n        this.CRUDSampleStorageTransaction({\r\n            'nsamplestoragelocationcode': this.state.masterData.selectedSampleStorageLocation.nsamplestoragelocationcode,\r\n            'nsamplestoragemappingcode': param.nsamplestoragemappingcode,\r\n            userinfo: this.props.Login.userInfo\r\n        }, 'delete');\r\n    }\r\n    addMultipleSample = (param) => {\r\n        this.setState({\r\n            //sheetData: JSON.parse(response[0].data.sheetData),\r\n            openModal: true, isMultiSampleAdd: true, openSpreadSheet: true,//, editedsheetData: param, Rows: param.nrow, columns: param.ncolumn,\r\n            loading: false\r\n        })\r\n    }\r\n    opensearch = () => {\r\n        this.setState({\r\n            openModal: true, isFilterPopup: true, selectedRecord: { ...this.state.submittedselectedRecord } ||\r\n                { ...this.state.selectedRecord }\r\n        })\r\n    }\r\n    // ALPD 5531 Start Added by Abdul for handling Export and Import clicks, file drop and delete in drop zone of Bulk Search SlideOut 07/03/2025\r\n    handleExportClick = () => {\r\n        let exportField = [{ \"idsName\": \"IDS_SAMPLEID\", \"dataField\": \"spositionvalue\", \"width\": \"200px\", \"staticField\": true }];\r\n        this.setState({ exportField, export: true });\r\n    }\r\n    handleImportTemplate = () => {\r\n        this.setState({\r\n            importTemplate: true,\r\n            openModal: true,\r\n            loading: false,\r\n            selectedRecord: {},\r\n        });\r\n    }\r\n    onDropFile = (attachedFiles, fieldName, maxSize) => {\r\n      let selectedRecord = this.state.selectedRecord || {};\r\n        selectedRecord[fieldName] = onDropAttachFileList(selectedRecord[fieldName], attachedFiles, maxSize)\r\n        this.setState({ selectedRecord, actionType: \"new\" });\r\n    }\r\n    \r\n    deleteAttachment = (event, file, fieldName) => {\r\n        let selectedRecord = this.state.selectedRecord || {};\r\n        selectedRecord[fieldName] = deleteAttachmentDropZone(selectedRecord[fieldName], file)\r\n        this.setState({\r\n            selectedRecord, actionType: \"delete\" //fileToDelete:file.name \r\n        });\r\n    }\r\n    getImportSampleIDData = () =>{\r\n        let selectedRecord = this.state.selectedRecord;\r\n        // ALPD-5582 Added by Abdul on 19 Mar 2025 for validating whether a file has been uploaded or not\r\n        if(selectedRecord['stemplatefilename'] && (selectedRecord['stemplatefilename'][0] !== undefined)){\r\n        const formData = new FormData();\r\n        formData.append(\"ImportFile\", selectedRecord['stemplatefilename'][0]);\r\n        formData.append( \"nformcode\",this.props.Login.userInfo && this.props.Login.userInfo.nformcode);\r\n        formData.append(\"userinfo\",JSON.stringify(this.props.Login.userInfo));\r\n        formData.append(\"nprojecttypecode\",this.state.selectedProjectType && this.state.selectedProjectType.value ? this.state.selectedProjectType.value : -1 );\r\n        formData.append(\"source\",'view_samplelistprep_');\r\n        formData.append(\"fieldName\", Lims_JSON_stringify(this.props.intl.formatMessage({ id: \"IDS_SAMPLEID\" })));\r\n        formData.append(\"label\", 'samplestoragelistpreperation');\r\n        formData.append(\"valuemember\", 'nsamplestoragetransactioncode');\r\n        this.setState({ loading: true });\r\n            const requestUrl = rsapi.post(\"/samplestoragelistpreperation/getimportsampleiddata\", formData);\r\n            return requestUrl\r\n                .then(response => {\r\n                    let masterData = this.state.masterData\r\n                    masterData = { ...masterData, ...response.data }\r\n                    this.setState({\r\n                        masterData: { ...masterData },\r\n                        loading: false,\r\n                        openModal: false,\r\n                        isFilterPopup: false,\r\n                        importTemplate:false,\r\n                        submittedselectedRecord:\r\n                            { ...this.state.submittedselectedRecord }\r\n                         ,\r\n                        dataStateChange:{\r\n                              take: 10,\r\n                              skip: 0\r\n                             },\r\n                        selectedRecord: {},\r\n                    })\r\n                })\r\n                .catch(error => {\r\n                    this.setState({\r\n                        loading: false\r\n                    });\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    }\r\n                    else {\r\n                        toast.info(error.response.data);\r\n                    }\r\n\r\n                })\r\n\r\n        }\r\n         // ALPD-5582 Added by Abdul on 19 Mar 2025 for validating whether a file has been uploaded or not\r\n        else {\r\n            toast.info(`${this.props.intl.formatMessage({ id: \"IDS_CHOOSE\" })} ${this.props.intl.formatMessage({ id: \"IDS_FILE\" })}`);\r\n        }\r\n                    \r\n    }\r\n    // ALPD 5531 End\r\n\r\n    addSample = (param, nflag) => {\r\n        this.setState({ loading: true })\r\n        let urlArray = [];\r\n        const url1 = rsapi.post(\"samplestoragelistpreperation/getsamplestoragemappingSheetData\",\r\n            {\r\n                isMultiSampleAdd: (nflag === 2) ? true : false,\r\n                nsamplestoragemappingcode:\r\n                    (nflag === 2) ? this.state.masterData.samplestoragelistpreperation.map(item => item.nsamplestoragemappingcode).join(\",\")\r\n                        : param.nsamplestoragemappingcode.toString()\r\n            });\r\n        urlArray = [url1];\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                if (nflag === 2) {\r\n                    this.setState({\r\n                        sheetData: JSON.parse(response[0].data.sheetData),\r\n                        openModal: true, isMultiSampleAdd: true, openSpreadSheet: true,//, editedsheetData: param, Rows: param.nrow, columns: param.ncolumn,\r\n                        loading: false\r\n                    })\r\n                } else {\r\n                    this.setState({\r\n                        sheetData: JSON.parse(response[0].data.sheetData),\r\n                        openModal: true, isMultiSampleAdd: false, openSpreadSheet: true,\r\n                        editedsheetData: param, Rows: param.nrow, columns: param.ncolumn,\r\n                        loading: false\r\n                    })\r\n                }\r\n            }).catch(error => {\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n                this.setState({\r\n                    loading: false\r\n                });\r\n            });\r\n\r\n\r\n    }\r\n    onComboChange = (comboData, fieldName) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        let selectedRecordFilter = this.state.selectedRecordFilter || {};\r\n\r\n        if (fieldName === 'nstoragecategorycode') {\r\n            return this.getSampleStorageLocation({\r\n                userinfo: this.props.Login.userInfo,\r\n                nstoragecategorycode: comboData.value\r\n            }, fieldName, comboData);\r\n        } else if (fieldName === 'ncontainertypecode') {\r\n            return this.getContainerStructure({\r\n                userinfo: this.props.Login.userInfo,\r\n                ncontainertypecode: comboData.value\r\n            }, fieldName, comboData);\r\n\r\n        } else if (fieldName === 'nprojecttypecode') {\r\n            return this.getprojectbarcodeconfig(comboData);\r\n\r\n        }\r\n        else if (fieldName === 'ncontainerstructurecode') {\r\n            selectedRecord['nrow'] = comboData.item.nrow ? comboData.item.nrow : 1;\r\n            selectedRecord['ncolumn'] = comboData.item.ncolumn ? comboData.item.ncolumn : 1;\r\n        } else if (fieldName === 'nsamplestoragelocationcode') {\r\n            return this.getSampleStorageLocation({\r\n                userinfo: this.props.Login.userInfo,\r\n                nstoragecategorycode: this.state.selectedRecordFilter['nstoragecategorycode'].value,\r\n                nsamplestoragelocationcode: comboData.value\r\n\r\n            }, fieldName, comboData);\r\n        }\r\n        if (fieldName === 'nsamplestorageversioncode') {\r\n            selectedRecordFilter[fieldName] = comboData;\r\n            this.setState({ selectedRecordFilter });\r\n\r\n        } else {\r\n            selectedRecord[fieldName] = comboData;\r\n            this.setState({ selectedRecord, selectedRecordFilter });\r\n        }\r\n\r\n\r\n    }\r\n\r\n    onSaveSampleStorageTransaction = (saveType) => {\r\n        let selectedRecord = this.state.selectedRecord;\r\n        let containerpathCodeArray = [];\r\n        if (this.state.operation === 'create') {\r\n            containerpathCodeArray = selectedRecord['nsamplestoragecontainerpathcode'].map(item => item.value);\r\n        }\r\n        const inputParam =\r\n        {\r\n            nsamplestoragetransactioncode: selectedRecord['nsamplestoragetransactioncode'] ?\r\n                parseInt(selectedRecord['nsamplestoragetransactioncode']) : 0,\r\n            nsamplestoragelocationcode: this.state.masterData.selectedSampleStorageLocation.nsamplestoragelocationcode,\r\n            nsamplestoragemappingcode: selectedRecord['nsamplestoragemappingcode'] ?\r\n                parseInt(selectedRecord['nsamplestoragemappingcode']) : 0,\r\n            ncontainertypecode: -1,\r\n            nproductcode: selectedRecord['nproductcode'].value,\r\n            ndirectionmastercode: -1,\r\n            ssamplestoragemappingname: \"-\",\r\n            nsamplestoragecontainerpathcode: this.state.operation === 'create' ?\r\n                JSON.stringify(containerpathCodeArray) : parseInt(selectedRecord['nsamplestoragecontainerpathcode'].value),\r\n            containerpathsize: containerpathCodeArray.length,\r\n            nneedposition: 4,\r\n            ncontainerstructurecode: -1, nquantity: selectedRecord['nquantity'] ?\r\n                parseInt(selectedRecord['nquantity']) : 1,\r\n            userinfo: this.props.Login.userInfo\r\n        }\r\n        const masterData = this.props.Login.masterData;\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolcode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData }, saveType\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.CRUDSampleStorageTransaction(inputParam, this.state.operation);\r\n        }\r\n    }\r\n    getsamplestoragetransaction = (inputParam, userinfo) => {\r\n        this.setState({ loading: true })\r\n        let urlArray = [];\r\n        const url1 = rsapi.post(\"samplestoragelistpreperation/getsamplestoragetransaction\", {\r\n            userinfo: this.props.Login.userInfo\r\n        });\r\n        urlArray = [url1];\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                this.setState({\r\n                    masterData: {\r\n                        ...this.state.masterData, ...response[0].data\r\n                    },\r\n                    loading: false\r\n                });\r\n\r\n            }).catch(error => {\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n                this.setState({\r\n                    loading: false\r\n                });\r\n            });\r\n\r\n    }\r\n\r\n    childDataChange = (selectedRecord) => {\r\n        this.setState({\r\n            selectedRecord: {\r\n                ...selectedRecord\r\n            },\r\n            isInitialRender: false\r\n        });\r\n    }\r\n    childSheetDataChange = (sheetData) => {\r\n\r\n        this.setState({\r\n            // selectedRecord: {\r\n            //     ...this.state.selectedRecord,\r\n            //     sheetData: {\r\n            //         ...this.state.selectedRecord.sheetData,\r\n            //         ...sheetData\r\n            //     }\r\n            // },\r\n            sheetData: {\r\n                ...sheetData\r\n            },\r\n            isInitialRender: false\r\n        });\r\n    }\r\n    // Actions start\r\n    getActiveSampleStorageMappingById = (inputParam, userinfo) => {\r\n        this.setState({ loading: true })\r\n        let urlArray = [];\r\n        const url1 = rsapi.post(\"samplestoragelistpreperation/getActiveSampleStorageMappingById\", {\r\n            nsamplestoragelocationcode: inputParam['selectedSampleStorageLocation'][0].nsamplestoragelocationcode,\r\n            userinfo: userinfo\r\n        });\r\n        urlArray = [url1];\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                this.setState({\r\n                    masterData: {\r\n                        ...this.state.masterData, ...response[0].data\r\n                    }//,\r\n                    // selectedRecord: {\r\n                    //     ...this.state.selectedRecord\r\n                    //    // , sheetData: JSON.parse(response[0].data.selectedSampleStoragemapping.jsondata.value)\r\n                    // }\r\n                    ,\r\n                    loading: false\r\n                });\r\n\r\n            }).catch(error => {\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n                this.setState({\r\n                    loading: false\r\n                });\r\n            });\r\n\r\n    }\r\n    filterColumnData = (filterValue, filterParam) => {\r\n        let masterData = filterParam.masterData;\r\n        let primaryKeyValue = 0;\r\n        let searchedData = undefined;\r\n        if (filterValue === \"\") {\r\n            if (masterData[filterParam.inputListName] && masterData[filterParam.inputListName].length > 0) {\r\n                primaryKeyValue = masterData[filterParam.inputListName][0][filterParam.primaryKeyField];\r\n            }\r\n        }\r\n        else {\r\n            if (filterParam.isjsondata) {\r\n                searchedData = searchJsonData(filterValue, masterData[filterParam.inputListName], filterParam.searchFieldList || []);\r\n            }\r\n            else {\r\n                searchedData = searchData(filterValue, masterData[filterParam.inputListName], filterParam.searchFieldList || []);\r\n\r\n            }\r\n            if (searchedData.length > 0) {\r\n                primaryKeyValue = searchedData[0][filterParam.primaryKeyField];\r\n            }\r\n        }\r\n\r\n        if (primaryKeyValue !== 0) {\r\n            this.setState({ loading: true });\r\n            return rsapi.post(filterParam.fetchUrl, { ...filterParam.fecthInputObject, [filterParam.primaryKeyField]: primaryKeyValue })\r\n                .then(response => {\r\n                    masterData[\"searchedData\"] = searchedData;\r\n                    masterData = { ...masterData, ...response.data };\r\n\r\n                    if (filterParam.sortField) {\r\n                        sortData(masterData, filterParam.sortOrder, filterParam.sortField);\r\n                    }\r\n                    else {\r\n                        sortData(masterData);\r\n                    }\r\n                    this.setState({ masterData, loading: false, skip: 0, take: 10, selectedId: null });\r\n                })\r\n                .catch(error => {\r\n                    this.setState({ loading: false });\r\n                    if (error.response.status === 500) {\r\n                        toast.error(this.props.intl.formatMessage({ id: error.message }));\r\n                    }\r\n                    else {\r\n                        toast.warn(this.props.intl.formatMessage({ id: error.response.data }));\r\n                    }\r\n                })\r\n        }\r\n        else {\r\n            masterData[filterParam.selectedObject] = undefined;\r\n            masterData[\"searchedData\"] = [];\r\n            Object.keys(masterData).forEach(item => {\r\n                if (item !== filterParam.inputListName && item !== filterParam.selectedObject\r\n                    && filterParam.unchangeList && filterParam.unchangeList.indexOf(item) === -1)\r\n                    masterData[item] = [];\r\n            })\r\n            this.setState({\r\n                masterData, operation: null, modalName: undefined,\r\n                loading: false\r\n            });\r\n\r\n        }\r\n    }\r\n\r\n\r\n    CRUDSampleStorageTransaction = (inputParam, operation) => {\r\n        this.setState({ loading: true })\r\n        let urlArray = [];\r\n        const url1 = rsapi.post(\"samplestoragelistpreperation/\" + operation + \"samplestoragelistpreperation\", inputParam);\r\n        urlArray = [url1];\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                this.setState({\r\n                    isInitialRender: true,\r\n                    selectedRecord: {},\r\n                    masterData: {\r\n                        ...this.state.masterData, ...response[0].data\r\n                    },\r\n                    openModal: false,\r\n                    loading: false\r\n                });\r\n\r\n            }).catch(error => {\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n                this.setState({\r\n                    loading: false\r\n                });\r\n            });\r\n\r\n    }\r\n\r\n    getSampleStorageLocation(inputData, fieldName, comboData) {\r\n        let selectedRecordFilter = this.state.selectedRecordFilter || {};\r\n        let inputParamData = {}\r\n        this.setState({ loading: true })\r\n        if (fieldName === 'nsamplestoragelocationcode') {\r\n            inputParamData = {\r\n                nstoragecategorycode: selectedRecordFilter['nstoragecategorycode'].value,\r\n                nsamplestoragelocationcode: comboData.value,\r\n                userinfo: inputData.userinfo\r\n            }\r\n        } else {\r\n            inputParamData = {\r\n                nstoragecategorycode: comboData.value,\r\n                userinfo: inputData.userinfo\r\n            }\r\n        }\r\n        let urlArray = [];\r\n        const url1 = rsapi.post(\"samplestoragelistpreperation/getsamplestoragemapping\", inputParamData);\r\n\r\n        urlArray = [url1];\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                let { storageLocationOptions,\r\n                    sampleStorageVersionOptions } = this.state\r\n\r\n                let sampleStorageLocationList = constructOptionList(response[0].data.sampleStorageLocation || [], \"nsamplestoragelocationcode\",\r\n                    \"ssamplestoragelocationname\", undefined, undefined, undefined);\r\n                storageLocationOptions = sampleStorageLocationList.get(\"OptionList\");\r\n                let sampleStorageVersionList = constructOptionList(response[0].data.sampleStorageVersion || [], \"nsamplestorageversioncode\",\r\n                    \"nversionno\", undefined, undefined, undefined);\r\n                sampleStorageVersionOptions = sampleStorageVersionList.get(\"OptionList\");\r\n                selectedRecordFilter = {\r\n                    ...selectedRecordFilter,\r\n                    nsamplestoragelocationcode: storageLocationOptions.length > 0 ?\r\n                        storageLocationOptions[0] : [],\r\n                    nsamplestorageversioncode: sampleStorageVersionOptions.length > 0 ?\r\n                        sampleStorageVersionOptions[0] : [],\r\n\r\n                }\r\n                this.setState({\r\n                    storageLocationOptions, sampleStorageVersionOptions,\r\n                    selectedRecordFilter: {\r\n                        ...selectedRecordFilter,\r\n                        [fieldName]: comboData\r\n                    },\r\n                    loading: false\r\n                });\r\n            }).catch(error => {\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n                this.setState({\r\n                    loading: false\r\n                });\r\n            });\r\n    }\r\n\r\n    onFilterSubmit = () => {\r\n        this.setState({ loading: true })\r\n        let inputParamData = {\r\n            nstoragecategorycode: this.state.selectedRecordFilter[\"nstoragecategorycode\"].value,\r\n            // nsamplestoragelocationcode: this.state.selectedRecordFilter[\"nsamplestoragelocationcode\"].value,\r\n            // nsamplestorageversioncode: this.state.selectedRecordFilter[\"nsamplestorageversioncode\"].value,\r\n            userinfo: this.props.Login.userInfo,\r\n        }\r\n        let urlArray = [];\r\n        const url1 = rsapi.post(\"samplestoragelistpreperation/getsamplestoragemapping\", inputParamData);\r\n        urlArray = [url1];\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                let object = {\r\n                    selectedStorageCategoryName: this.state.selectedRecordFilter[\"nstoragecategorycode\"].item.sstoragecategoryname,\r\n                    // ssamplestoragelocationname: this.state.selectedRecordFilter[\"nsamplestoragelocationcode\"].item.ssamplestoragelocationname,\r\n                    // selectedSampleStorageVersion: this.state.selectedRecordFilter[\"nsamplestorageversioncode\"].item.nversionno,\r\n                }\r\n                let filterData = this.generateBreadCrumData(object);\r\n\r\n                this.setState({\r\n                    filterData,\r\n                    masterData: {\r\n                        ...this.state.masterData,\r\n                        ...response[0].data,\r\n                        //   samplestoragelistpreperation: response[0].data['samplestoragelistpreperation'],\r\n                    },\r\n                    loading: false\r\n                });\r\n            }).catch(error => {\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n                this.setState({\r\n                    loading: false\r\n                });\r\n            });\r\n    }\r\n    addSampleStorageMapping() {\r\n        this.setState({ loading: true })\r\n        let selectedRecord = this.state.selectedRecord\r\n        let inputParamData = {\r\n            // nstoragecategorycode: this.state.selectedRecordFilter[\"nstoragecategorycode\"].value,\r\n            nsamplestoragelocationcode: this.state.masterData.selectedSampleStorageLocation.nsamplestoragelocationcode,\r\n            // nsamplestorageversioncode: this.state.selectedRecordFilter[\"nsamplestorageversioncode\"].value,\r\n            userinfo: this.props.Login.userInfo,\r\n        }\r\n\r\n        let urlArray = [];\r\n        const url1 = rsapi.post(\"samplestoragelistpreperation/addSampleStorageMapping\", inputParamData);\r\n\r\n        const url2 = rsapi.post(\"product/getProduct\",\r\n            { 'userinfo': this.props.Login.userInfo });\r\n\r\n        const url3 = rsapi.post(\"containertype/getContainerType\",\r\n            { 'userinfo': this.props.Login.userInfo });\r\n\r\n        urlArray = [url1, url2];\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                const storageMappingMap = constructOptionList(response[0].data['samplestoragecontainerpath'] || [],\r\n                    \"nsamplestoragecontainerpathcode\",\r\n                    \"scontainerpath\", undefined, undefined, true);\r\n                const storageMappingMapList = storageMappingMap.get(\"OptionList\");\r\n                let containerStructure = response[0].data['containerStructure'];\r\n\r\n                const containerTypeMap = constructOptionList(response[0].data['containerType'] || [],\r\n                    \"ncontainertypecode\",\r\n                    \"scontainertype\", undefined, undefined, true);\r\n                const containerTypeList = containerTypeMap.get(\"OptionList\");\r\n\r\n\r\n                const directionmasterMap = constructOptionList(response[0].data['directionmaster'] || [],\r\n                    \"ndirectionmastercode\",\r\n                    \"sdirection\", undefined, undefined, true);\r\n                const directionmasterList = directionmasterMap.get(\"OptionList\");\r\n\r\n                const containerstructureMap = constructOptionList(response[0].data['containerStructure']\r\n                    || [],\r\n                    \"ncontainerstructurecode\",\r\n                    \"scontainerstructurename\", undefined, undefined, true);\r\n                const containerstructureList = containerstructureMap.get(\"OptionList\");\r\n\r\n                const productMap = constructOptionList(response[1].data['Product'] || [],\r\n                    \"nproductcode\",\r\n                    \"sproductname\", undefined, undefined, true);\r\n                const productList = productMap.get(\"OptionList\");\r\n\r\n                this.setState({\r\n                    openModal: true,\r\n                    selectedRecord: {\r\n                        ...selectedRecord,\r\n                        storageMappingMapOptions: storageMappingMapList,\r\n                        productOptions: productList,\r\n                        containerTypeOptions: containerTypeList,\r\n                        directionmasterOptions: directionmasterList,\r\n                        // ncontainertypecode: containerTypeList[0],\r\n                        // containerStructureOptions: containerstructureList,\r\n                        // ncontainerstructurecode: containerstructureList[0],\r\n                        nrow: containerStructure.length > 0 ? containerStructure[0].nrow : 1,\r\n                        ncolumn: containerStructure.length > 0 ? containerStructure[0].ncolumn : 1,\r\n                        isInitialRender: true\r\n\r\n                    },\r\n                    openSpreadSheet: false,\r\n                    operation: 'create',\r\n                    loading: false\r\n                });\r\n            }).catch(error => {\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n                this.setState({\r\n                    loading: false\r\n                });\r\n            });\r\n    }\r\n    getprojectbarcodeconfig(comboData) {\r\n        let inputParamData = {}\r\n        this.setState({ loading: true })\r\n        inputParamData = {\r\n            nprojecttypecode: comboData.value,\r\n            userinfo: this.props.Login.userInfo\r\n        }\r\n        let urlArray = [];\r\n        const url1 = rsapi.post(\"samplestoragelistpreperation/getProjectbarcodeconfig\", inputParamData);\r\n\r\n        urlArray = [url1];\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                let masterData = this.state.masterData;\r\n                let submittedselectedRecord = this.state.submittedselectedRecord;\r\n                if (this.state.selectedProjectType.value !== comboData.value) {\r\n                    masterData = {\r\n                        ...masterData,\r\n                        samplestoragelistpreperation: []\r\n                    }\r\n                    submittedselectedRecord = {}\r\n                }\r\n                this.setState({\r\n                    masterData,\r\n                    submittedselectedRecord,\r\n                    selectedProjectTypeList: sortData(response[0].data.selectedProjectTypeList),\r\n                    selectedProjectType: { label: comboData.label, value: comboData.value },\r\n                    selectedRecord: {\r\n                        nprojecttypecode: { label: comboData.label, value: comboData.value }\r\n                    },\r\n                    loading: false\r\n                });\r\n            }).catch(error => {\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n                this.setState({\r\n                    loading: false\r\n                });\r\n            });\r\n    }\r\n\r\n    getContainerStructure(inputData, fieldName, comboData) {\r\n        let inputParamData = {}\r\n        this.setState({ loading: true })\r\n        inputParamData = {\r\n            ncontainertypecode: comboData.value,\r\n            userinfo: inputData.userinfo\r\n        }\r\n        let urlArray = [];\r\n        const url1 = rsapi.post(\"samplestoragelistpreperation/getContainerStructure\", inputParamData);\r\n\r\n        urlArray = [url1];\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                let { containerStructureOptions, selectedRecord } = this.state\r\n\r\n                let containerStructureList = constructOptionList(response[0].data.containerStructure || [], \"ncontainerstructurecode\",\r\n                    \"scontainerstructurename\", undefined, undefined, undefined);\r\n                containerStructureOptions = containerStructureList.get(\"OptionList\");\r\n                selectedRecord = {\r\n                    ...selectedRecord,\r\n                    nrow: containerStructureOptions.length > 0 ?\r\n                        containerStructureOptions[0].item.nrow : 1,\r\n                    ncolumn: containerStructureOptions.length > 0 ?\r\n                        containerStructureOptions[0].item.ncolumn : 1,\r\n                    ncontainerstructurecode: containerStructureOptions.length > 0 ?\r\n                        containerStructureOptions[0] : [],\r\n                    containerStructureOptions: containerStructureOptions.length > 0 ?\r\n                        [...containerStructureOptions] : [],\r\n                }\r\n\r\n                this.setState({\r\n\r\n                    selectedRecord: {\r\n                        ...selectedRecord,\r\n                        [fieldName]: comboData\r\n                    },\r\n                    loading: false\r\n                });\r\n            }).catch(error => {\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n                this.setState({\r\n                    loading: false\r\n                });\r\n            });\r\n    }\r\n    onSampleMappingSaveClick = () => {\r\n        const mandatoryFields = this.state.openSpreadSheet ? [] : this.state.selectedRecord[\"nneedposition\"] === undefined ||\r\n            this.state.selectedRecord[\"nneedposition\"] === false ? [\r\n            {\r\n                \"idsName\": \"IDS_SAMPLESTORAGEMAPPING\", \"dataField\": \"nsamplestoragecontainerpathcode\",\r\n                \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\"\r\n            },\r\n            {\r\n                \"idsName\": \"IDS_PRODUCT\",\r\n                \"dataField\": \"nproductcode\", \"mandatoryLabel\":\r\n                    \"IDS_SELECT\", \"controlType\": \"selectbox\"\r\n            },\r\n            {\r\n                \"idsName\": \"IDS_AVAILABLESPACE\",\r\n                \"dataField\": \"nquantity\", \"mandatoryLabel\":\r\n                    \"IDS_ENTER\", \"controlType\": \"selectbox\"\r\n            }\r\n        ] : [\r\n            {\r\n                \"idsName\": \"IDS_SAMPLESTORAGEMAPPING\", \"dataField\": \"nsamplestoragecontainerpathcode\",\r\n                \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\"\r\n            },\r\n            {\r\n                \"idsName\": \"IDS_PRODUCT\",\r\n                \"dataField\": \"nproductcode\", \"mandatoryLabel\":\r\n                    \"IDS_SELECT\", \"controlType\": \"selectbox\"\r\n            }\r\n            ,\r\n            {\r\n                \"idsName\": \"IDS_CONTAINERTYPE\",\r\n                \"dataField\": \"ncontainertypecode\", \"mandatoryLabel\":\r\n                    \"IDS_SELECT\", \"controlType\": \"selectbox\"\r\n            },\r\n            {\r\n                \"idsName\": \"IDS_CONTAINERSTRUCTURENAME\",\r\n                \"dataField\": \"ncontainerstructurecode\", \"mandatoryLabel\":\r\n                    \"IDS_SELECT\", \"controlType\": \"selectbox\"\r\n            },\r\n            {\r\n                \"idsName\": \"IDS_DIRECTION\",\r\n                \"dataField\": \"ndirectionmastercode\", \"mandatoryLabel\":\r\n                    \"IDS_ENTER\", \"controlType\": \"selectbox\"\r\n            },\r\n            {\r\n                \"idsName\": \"IDS_AVAILABLESPACE\",\r\n                \"dataField\": \"nquantity\", \"mandatoryLabel\":\r\n                    \"IDS_ENTER\", \"controlType\": \"selectbox\"\r\n            }\r\n        ]\r\n        onSaveMandatoryValidation(this.state.selectedRecord, mandatoryFields,\r\n            this.onSaveClick)\r\n    }\r\n    dataStateChange = (event) => {\r\n        this.setState({\r\n            dataStateChange: event.dataState\r\n        });\r\n    }\r\n\r\n    approveSampleStorageMapping = (event) => {\r\n        let inputParamData = {}\r\n        this.setState({ loading: true })\r\n        inputParamData = {\r\n            nsamplestoragelocationcode: this.state.masterData.selectedSampleStorageLocation.nsamplestoragelocationcode,\r\n            userinfo: this.props.Login.userInfo\r\n        }\r\n        let urlArray = [];\r\n        const url1 = rsapi.post(\"samplestoragelistpreperation/approveSampleStorageMapping\", inputParamData);\r\n\r\n        urlArray = [url1];\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                this.setState({\r\n                    masterData: {\r\n                        ...this.state.masterData,\r\n                        ...response[0].data\r\n                    },\r\n                    loading: false\r\n                });\r\n            }).catch(error => {\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n                this.setState({\r\n                    loading: false\r\n                });\r\n            });\r\n    }\r\n    getSelectedBarcodeData(inputParam) {\r\n        this.setState({ loading: true })\r\n        let selectedRecord = this.state.selectedRecord || {};\r\n        let urlArray = [];\r\n        const url1 = rsapi.post(\"/samplestoragelistpreperation/getSelectedBarcodeData\", {\r\n            nprojecttypecode: this.state.selectedProjectType.value,\r\n            spositionvalue: inputParam.spositionvalue\r\n        });\r\n        urlArray = [url1];\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                this.setState({\r\n                    selectedBarcodeValue: { ...response[0].data['selectedBarcodeValue'] },\r\n                    loading: false\r\n                })\r\n            })\r\n            .catch(error => {\r\n                this.setState({\r\n                    loading: false\r\n                });\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.info(error.response.data.rtn);\r\n                }\r\n\r\n            })\r\n    }\r\n    //ALPD-4635\r\n    checkFilterIsEmptyQueryBuilder=(treeData)=> {\r\n        //this condition is handle for bulk record only \r\n        if(this.props.Login && this.props.Login.settings && parseInt(this.props.Login.settings['69'])===transactionStatus.YES){\r\n            let isFilterEmpty=true;\r\n            return isFilterEmpty;\r\n        }else{\r\n        let ParentItem = { ...treeData };\r\n        let isFilterEmpty=false;\r\n            let childArray = ParentItem.children1;\r\n            if (childArray && childArray.length > 0 && childArray !== undefined) {\r\n                for (var i = 0; i < childArray.length; i++) {\r\n                    let childData = childArray[i]\r\n                    if (!childData.hasOwnProperty('children1')) {\r\n                        if(  childData.properties.operator!==\"is_empty\"\r\n                          && childData.properties.operator!==\"is_not_empty\"\r\n                          && childData.properties.operator!==\"is_null\"\r\n                          && childData.properties.operator!==\"is_not_null\" ){\r\n                            isFilterEmpty=true;\r\n                            return isFilterEmpty;\r\n                    }\r\n                    } else {\r\n                        if (childData) {\r\n                            ParentItem = this.checkFilterIsEmptyQueryBuilder(childData)\r\n                            if(!ParentItem){\r\n                                return ParentItem;\r\n                            }\r\n                        } \r\n                    }\r\n                }\r\n            }\r\n            return isFilterEmpty;\r\n        }\r\n      }\r\n    getDynamicFilterExecuteData(nflag) {\r\n        let selectedRecord = this.state.selectedRecord || {};\r\n        if (nflag === 2 ? true : (selectedRecord.filterquery && selectedRecord.filterquery !== \"\")) {\r\n            let isFilterEmpty = this.checkFilterIsEmptyQueryBuilder(selectedRecord.filterQueryTreeStr);\r\n            if(isFilterEmpty){\r\n            this.setState({ loading: true })\r\n            let obj = {// ...inputParam.component, \r\n                label: 'samplestoragelistpreperation', valuemember: 'nsamplestoragetransactioncode',\r\n                filterquery: nflag === 2 ?\r\n                    this.state.submittedselectedRecord.filterquery + \" and nprojecttypecode=\" + this.state.selectedProjectType.value\r\n                    :\r\n                    selectedRecord.filterquery + \" and nprojecttypecode=\" + this.state.selectedProjectType.value\r\n               // , source: 'view_samplelistprep_' + this.state.selectedProjectType.value\r\n               , source: 'view_samplelistprep_'\r\n                , userinfo: this.props.Login.userInfo,\r\n                nprojecttypecode: this.state.selectedProjectType.value\r\n            }\r\n            let urlArray = [];\r\n            const url1 = rsapi.post(\"/samplestoragelistpreperation/getdynamicfilterexecutedata\", obj);\r\n            urlArray = [url1];\r\n            Axios.all(urlArray)\r\n                .then(response => {\r\n                    let masterData = this.state.masterData\r\n                    masterData = { ...masterData, ...response[0].data }\r\n                    this.setState({\r\n                        masterData: { ...masterData },\r\n                        loading: false,\r\n                        openModal: false,\r\n                        isFilterPopup: false,\r\n                        submittedselectedRecord: nflag === 2 ?\r\n                            { ...this.state.submittedselectedRecord }\r\n                            :\r\n                            { ...selectedRecord }\r\n                         ,\r\n                        dataStateChange:{\r\n                              take: 10,\r\n                              skip: 0\r\n                             },\r\n                        selectedRecord: {},\r\n                        displayQuery: this.state.tree ? QbUtils.queryString(this.state.tree, this.state.config, true) : \"\"\r\n                    })\r\n                })\r\n                .catch(error => {\r\n                    this.setState({\r\n                        loading: false\r\n                    });\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    }\r\n                    else {\r\n                        toast.info(error.response.data.rtn);\r\n                    }\r\n\r\n                })\r\n            }else{\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_PROVIDEONEMOREFILTERDATAWITHNOTNULLOPERATOR\" }));\r\n            }\r\n        } else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTAFILTER\" }));\r\n\r\n        }\r\n    }\r\n    // getDynamicFilterExecuteData(nflag) {\r\n    //     this.setState({ loading: true })\r\n    //     let selectedRecord = this.state.selectedRecord || {};\r\n    //     let obj = {// ...inputParam.component, \r\n    //         label: 'samplestoragelistpreperation', valuemember: 'nsamplestoragetransactioncode',\r\n    //         filterquery:   \r\n    //         selectedRecord.filterquery, source: 'view_sampleretrieval', userinfo: this.props.Login.userInfo\r\n    //     }\r\n    //     let urlArray = [];\r\n    //     const url1 = rsapi.post(\"/samplestoragelistpreperation/getdynamicfilterexecutedata\", obj);\r\n    //     urlArray = [url1];\r\n    //     Axios.all(urlArray)\r\n    //         .then(response => {\r\n    //             console.log(response)\r\n    //             let masterData = this.state.masterData\r\n    //             masterData = { ...masterData, ...response[0].data }\r\n    //             this.setState({\r\n    //                 masterData: { ...masterData },\r\n    //                 loading: false,\r\n    //                 openModal: false,\r\n    //                 submittedselectedRecord: nflag === 2 ?\r\n    //                     { ...this.state.submittedselectedRecord }\r\n    //                     :\r\n    //                     { ...selectedRecord }\r\n    //                 ,\r\n    //                 isFilterPopup: false,\r\n    //                 selectedRecord: {}\r\n    //             })\r\n    //         })\r\n    //         .catch(error => {\r\n    //             this.setState({\r\n    //                 loading: false\r\n    //             });\r\n    //             if (error.response.status === 500) {\r\n    //                 toast.error(error.message);\r\n    //             }\r\n    //             else {\r\n    //                 toast.info(error.response.data.rtn);\r\n    //             }\r\n\r\n    //         })\r\n    // }\r\n\r\n    fetchRecord = (data) => {\r\n        this.setState({ loading: true })\r\n        let selectedRecord = this.state.selectedRecord\r\n        let inputParamData = {\r\n            nsamplestoragelocationcode: this.state.masterData.selectedSampleStorageLocation.nsamplestoragelocationcode,\r\n            userinfo: this.props.Login.userInfo,\r\n        }\r\n        let urlArray = [];\r\n        const url1 = rsapi.post(\"samplestoragelistpreperation/addSampleStorageMapping\", inputParamData);\r\n\r\n        const url2 = rsapi.post(\"product/getProduct\",\r\n            { 'userinfo': this.props.Login.userInfo });\r\n\r\n        const url3 = rsapi.post(\"samplestoragelistpreperation/getEditSampleStorageMapping\",\r\n            { 'nsamplestoragemappingcode': data.nsamplestoragemappingcode, 'userinfo': this.props.Login.userInfo });\r\n\r\n        urlArray = [url1, url2, url3];\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                const storageMappingMap = constructOptionList(response[0].data['samplestoragecontainerpath'] || [],\r\n                    \"nsamplestoragecontainerpathcode\",\r\n                    \"scontainerpath\", undefined, undefined, true);\r\n                const storageMappingMapList = storageMappingMap.get(\"OptionList\");\r\n                let containerStructure = response[0].data['containerStructure'];\r\n\r\n                const containerTypeMap = constructOptionList(response[0].data['containerType'] || [],\r\n                    \"ncontainertypecode\",\r\n                    \"scontainertype\", undefined, undefined, true);\r\n                const containerTypeList = containerTypeMap.get(\"OptionList\");\r\n\r\n                const directionmasterMap = constructOptionList(response[0].data['directionmaster'] || [],\r\n                    \"ndirectionmastercode\",\r\n                    \"sdirection\", undefined, undefined, true);\r\n                const directionmasterList = directionmasterMap.get(\"OptionList\");\r\n\r\n\r\n                const containerstructureMap = constructOptionList(response[2].data['containerStructure']\r\n                    || [],\r\n                    \"ncontainerstructurecode\",\r\n                    \"scontainerstructurename\", undefined, undefined, true);\r\n                const containerstructureList = containerstructureMap.get(\"OptionList\");\r\n\r\n                const productMap = constructOptionList(response[1].data['Product'] || [],\r\n                    \"nproductcode\",\r\n                    \"sproductname\", undefined, undefined, true);\r\n                const productList = productMap.get(\"OptionList\");\r\n\r\n                const editedObject = response[2].data.editsampleStorageMapping;\r\n\r\n                storageMappingMapList.unshift({ label: editedObject.scontainerpath, value: editedObject.nsamplestoragecontainerpathcode })\r\n                selectedRecord = {\r\n                    ndirectionmastercode: { label: editedObject.sdirection, value: editedObject.ndirectionmastercode },\r\n                    nsamplestoragecontainerpathcode: { label: editedObject.scontainerpath, value: editedObject.nsamplestoragecontainerpathcode },\r\n                    nproductcode: { label: editedObject.sproductname, value: editedObject.nproductcode },\r\n                    ncontainertypecode: { label: editedObject.scontainertype, value: editedObject.ncontainertypecode },\r\n                    ncontainerstructurecode: { label: editedObject.scontainerstructurename, value: editedObject.ncontainerstructurecode },\r\n                    nneedposition: editedObject.nneedposition === 3 ? true : false,\r\n                    directionmasterOptions: directionmasterList,\r\n                    nquantity: editedObject.nquantity,\r\n                    nrow: editedObject.nrow,\r\n                    ncolumn: editedObject.ncolumn,\r\n                    nsamplestoragemappingcode: editedObject.nsamplestoragemappingcode\r\n                }\r\n                this.setState({\r\n                    openSpreadSheet: false,\r\n                    openModal: true,\r\n                    selectedRecord: {\r\n                        ...selectedRecord,\r\n                        storageMappingMapOptions: storageMappingMapList,\r\n                        productOptions: productList,\r\n                        containerTypeOptions: containerTypeList,\r\n                        containerStructureOptions: containerstructureList,\r\n                        isInitialRender: true\r\n                    },\r\n                    operation: 'update',\r\n                    loading: false\r\n                });\r\n            }).catch(error => {\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n                this.setState({\r\n                    loading: false\r\n                });\r\n            });\r\n    }\r\n    // Actions End\r\n    retrievalType = () => {\r\n        let retrievalType = this.state.retrievalType;\r\n        if (retrievalType === 1) {\r\n            retrievalType = 2;\r\n        } else {\r\n            retrievalType = 1;\r\n        }\r\n        this.setState({ retrievalType: retrievalType })\r\n    }\r\n    onInputOnChange = (event) => {\r\n\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if (event.target.type === 'checkbox') {\r\n            if (event.target.name === \"agree\") {\r\n                selectedRecord[event.target.name] = event.target.checked === true ? 3 : 4;\r\n            }\r\n        }\r\n        else if (event.target.type === 'select-one') {\r\n\r\n            selectedRecord[event.target.name] = event.target.value;\r\n\r\n        }\r\n        else {\r\n            selectedRecord[event.target.name] = event.target.value;\r\n        }\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    shouldComponentUpdate(nextProps, nextState) {\r\n        if (this.state.openModal && nextState.isInitialRender === false &&\r\n            (nextState.selectedRecord !== this.state.selectedRecord)) {\r\n            return false;\r\n        } else if (this.state.openModal && nextState.isInitialRender === false &&\r\n            (nextState.sheetData !== this.state.sheetData)) {\r\n            return false;\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n    handlePageChangeFilter = (event) => {\r\n        this.setState({ kendoSkip: event.skip, kendoTake: event.take });\r\n    };\r\n    onChange = (immutableTree, config) => {\r\n        let selectedRecord = this.state.selectedRecord || {};\r\n        selectedRecord[\"tree\"] = immutableTree;\r\n        selectedRecord[\"config\"] = config;\r\n        selectedRecord[\"filterQueryTreeStr\"] = QbUtils.getTree(immutableTree);\r\n        selectedRecord['filterquery'] = QbUtils.sqlFormat(immutableTree, config);\r\n        this.setState({ tree: immutableTree, config: config, selectedRecord: selectedRecord });\r\n\r\n    };\r\n    // cellRender(tdElement, cellProps) {\r\n\r\n    //     if (cellProps.rowType === \"groupFooter\") {\r\n    //         console.log('cellProps.field', cellProps)\r\n    //         if (cellProps.dataItem.field === \"ssamplestoragelocationname\") {\r\n    //             console.log('tdElement', tdElement, 'cellProps', cellProps)\r\n    //             return (\r\n    //                 <td aria-colindex={cellProps.columnIndex} role={\"gridcell\"}>\r\n    //                     Sum: {cellProps.dataItem.aggregates.navailablespace.sum}\r\n    //                 </td>\r\n    //             );\r\n    //         }\r\n    //     }\r\n    //     return tdElement;\r\n    // }\r\n    // handleGroupChange = (event) => {\r\n    //     const newDataState = this.processWithGroups(this.state.masterData.samplestoragelistpreperation || [], this.state.dataStateChange, event.group);\r\n    //     this.setState({\r\n    //         masterData: { ...this.state.masterData, samplestoragelistpreperation: newDataState },\r\n    //         group: event.group,\r\n    //     });\r\n    // };\r\n    // processWithGroups = (data, group) => {\r\n    //     const newDataState = groupBy(data, group);\r\n    //     return newDataState;\r\n    // };\r\n    processWithGroups = (data, dataState) => {\r\n        const aggregates = [\r\n            {\r\n                field: \"navailablespace\",\r\n                aggregate: \"sum\",\r\n            }\r\n        ];\r\n        const groups = dataState.group;\r\n        if (groups) {\r\n            groups.map((group) => (group.aggregates = aggregates));\r\n        }\r\n        dataState.group = groups;\r\n        const newDataState = process(data, dataState);\r\n        // setGroupIds({\r\n        //     data: newDataState.data,\r\n        //     group: dataState.group,\r\n        // });\r\n        return newDataState;\r\n    };\r\n    gridfillingColumn(data) {\r\n        //  const tempArray = [];\r\n        // const temparray = data && data.map((option) => {\r\n        //     return { \"idsName\": option.sfieldname, \"dataField\": option.sfieldname, \"width\": \"200px\" };\r\n        // });\r\n        // return temparray;\r\n        const temparray1 = [{ \"idsName\": \"IDS_SAMPLEID\", \"dataField\": \"spositionvalue\", \"width\": \"200px\", \"staticField\": true },\r\n        { \"idsName\": \"IDS_STORAGESTRUCTURE\", \"dataField\": \"ssamplestoragelocationname\", \"width\": \"200px\"  },\r\n        { \"idsName\": \"IDS_PATHWITHPOSITION\", \"dataField\": \"scontainerpathwithposition\", \"width\": \"500px\", \"staticField\": true },\r\n        { \"idsName\": \"IDS_CONTAINERID\", \"dataField\": \"sboxid\", \"width\": \"200px\", \"staticField\": true },\r\n        // { \"idsName\": \"IDS_POSITION\", \"dataField\": \"sposition\", \"width\": \"200px\", \"staticField\": true },\r\n        { \"idsName\": \"IDS_QUANTITY\", \"dataField\": \"nquantity\", \"width\": \"200px\", \"staticField\": true },\r\n        { \"idsName\": \"IDS_UNIT\", \"dataField\": \"sunitname\", \"width\": \"200px\", \"staticField\": true }];\r\n        const temparray2 = data && data.map((option) => {\r\n            return { \"idsName\": option.sfieldname, \"dataField\": option.sfieldname, \"width\": \"200px\" };\r\n        });\r\n        const newArray = [...temparray1, ...temparray2]\r\n        return newArray;\r\n    }\r\n    render() {\r\n        const addId = this.state.controlMap.has(\"Add samplestoragelistpreperation\") && this.state.controlMap.get(\"Add samplestoragelistpreperation\").ncontrolcode;\r\n        const editId = this.state.controlMap.has(\"Edit SampleStorageLocation\") && this.state.controlMap.get(\"Edit SampleStorageLocation\").ncontrolcode;\r\n        const deleteId = this.state.controlMap.has(\"Delete SampleStorageLocation\") && this.state.controlMap.get(\"Delete SampleStorageLocation\").ncontrolcode;\r\n        const copyId = this.state.controlMap.has(\"Copy SampleStorageLocation\") && this.state.controlMap.get(\"Copy SampleStorageLocation\").ncontrolcode;\r\n        const approveId = this.state.controlMap.has(\"Approve SampleStorageLocation\") && this.state.controlMap.get(\"Approve SampleStorageLocation\").ncontrolcode;\r\n\r\n        const extractedColumnList = this.state.selectedProjectTypeList ? this.gridfillingColumn(this.state.selectedProjectTypeList) : [];\r\n\r\n        let fields = {};\r\n        if (extractedColumnList.length > 0) {\r\n            extractedColumnList.map(field => {\r\n                field.hasOwnProperty(\"staticField\") ?\r\n                    fields = {\r\n                        ...fields,\r\n                        [field.dataField]: {\r\n                            \"label\": this.props.intl.formatMessage({\r\n                                id: field.idsName,\r\n                            })\r\n                            ,\r\n                            \"type\": \"text\",\r\n                            \"valueSources\": [\"value\", \"func\"],\r\n\r\n                            \"mainWidgetProps\": {\r\n                                \"valueLabel\": \"Name\",\r\n                                \"valuePlaceholder\": this.props.intl.formatMessage({\r\n                                    id: field.idsName\r\n                                })\r\n                            }\r\n                        }\r\n                    }\r\n                    :\r\n                    field.dataField==='ssamplestoragelocationname'&&this.state.queryBuilderFreezer.length>0?\r\n                    fields = {\r\n                        ...fields,\r\n                        'nsamplestoragelocationcode': {\r\n                            \"label\": this.props.intl.formatMessage({\r\n                                id: \"IDS_STORAGESTRUCTURENAME\",\r\n                            }),\r\n                            \"type\": \"select\",\r\n                            \"valueSources\": [\"value\"],\r\n                            \"fieldSettings\": {\r\n                                \"listValues\": this.state.queryBuilderFreezer\r\n                            }\r\n                        }\r\n                    }\r\n                    :\r\n                    fields = {\r\n                        ...fields,\r\n                        ['\"' + field.dataField + '\"']: {\r\n                            \"label\": field.dataField\r\n                            ,\r\n                            \"type\": \"text\",\r\n                            \"valueSources\": [\"value\", \"func\"],\r\n\r\n                            \"mainWidgetProps\": {\r\n                                \"valueLabel\": \"Name\",\r\n                                \"valuePlaceholder\": field.dataField\r\n                            }\r\n                        }\r\n                    }\r\n            });\r\n        }\r\n        const filterParam = {\r\n            inputListName: \"sampleStorageLocation\", selectedObject: \"selectedSampleStorageLocation\", primaryKeyField: \"nsamplestoragelocationcode\",\r\n            fetchUrl: \"samplestoragelistpreperation/getActiveSampleStorageMappingById\",\r\n            fecthInputObject: { userinfo: this.props.Login.userInfo },\r\n            masterData: this.props.Login.masterData,\r\n            searchFieldList: [\"ssamplestoragelocationname\"]\r\n        };\r\n\r\n        const breadCrumbData = this.state.filterData || [];\r\n\r\n        const confirmMessage = new ConfirmMessage();\r\n        return (\r\n            <>\r\n\r\n                <Preloader loading={this.state.loading} />\r\n                {//this.state.retrievalType === 1 ?\r\n                    <>\r\n\r\n                        <ListWrapper className=\"client-list-content\">\r\n\r\n                            {\r\n                                <Col md={12}>\r\n                                    <Row>\r\n                                        <Col md={3}>\r\n                                            <FormSelectSearch\r\n                                                name={\"nprojecttypecode\"}\r\n                                                as={\"select\"}\r\n                                                onChange={(event) => this.onComboChange(event, 'nprojecttypecode')}\r\n                                                formLabel={this.props.intl.formatMessage({ id: \"IDS_PROJECTTYPE\" })}\r\n                                                isMandatory={this.state.selectedRecord[\"nneedposition\"]}\r\n                                                value={this.state.selectedProjectType ? this.state.selectedProjectType || [] : []}\r\n                                                options={this.state.masterData && this.state.masterData.projectbarcodeconfig || []}\r\n                                                optionId={\"value\"}\r\n                                                optionValue={\"label\"}\r\n                                                isMulti={false}\r\n                                                isDisabled={false}\r\n                                                isSearchable={false}\r\n                                                isClearable={false}\r\n                                            />\r\n                                        </Col>\r\n                                    </Row>\r\n\r\n                                    {this.state.selectedProjectTypeList && <Row>\r\n                                        <Col md={12}><DataGrid\r\n                                            // isDownloadPDFRequired={this.state.masterData && this.state.masterData.samplestoragelistpreperation &&\r\n                                            //     this.processWithGroups(this.state.masterData.samplestoragelistpreperation || [],\r\n                                            //         this.state.dataStateChange ? this.state.dataStateChange : {\r\n                                            //             take: 10,\r\n                                            //             skip: 0\r\n                                            //         }).data.length > 0 ?\r\n                                            //     true : false}\r\n                                            // isDownloadExcelRequired={this.state.masterData && this.state.masterData.samplestoragelistpreperation &&\r\n                                            //     this.processWithGroups(this.state.masterData.samplestoragelistpreperation || [],\r\n                                            //         this.state.dataStateChange ? this.state.dataStateChange : {\r\n                                            //             take: 10,\r\n                                            //             skip: 0\r\n                                            //         }).data.length > 0 ?\r\n                                            //     true : false}\r\n                                            isCustomButton={true}\r\n                                            customButtonlist={[{\r\n                                                label: 'IDS_SEARCH',\r\n                                                id: {},\r\n                                                onClick: () => this.opensearch(),\r\n                                                controlname: 'faSearch'\r\n                                            },\r\n                                            // ALPD 5531 Start Button from export and bulk search Added by Abdul Gaffoor A on 07/03/2025\r\n                                            {\r\n                                                 label: 'IDS_EXPORTTEMPLATE',\r\n                                                // id: {},\r\n                                                onClick: () => this.handleExportClick(),\r\n                                                controlname: 'faFileExcel'\r\n                                            },\r\n                                            {\r\n                                                 label: 'IDS_BULKSEARCH',\r\n                                                // id: {},\r\n                                                onClick: () => this.handleImportTemplate(),\r\n                                                controlname: 'faFileImport'\r\n                                            }\r\n                                            // ALPD 5531 End\r\n                                        ]}\r\n                                            isRefreshRequired={false}\r\n                                            // onGroupChange={this.handleGroupChange}\r\n                                            primaryKeyField={'nsamplestoragetransactioncode'}\r\n                                            /*data={this.state.masterData &&\r\n                                                this.state.masterData.samplestoragelistpreperation}*/\r\n                                                \r\n                                                //ALPD-4767--Vignesh R(29-08-2024)\r\n                                                data={\r\n                                                    this.state.masterData && this.state.masterData.samplestoragelistpreperation? this.state.masterData.samplestoragelistpreperation.map(item => {\r\n                                                    return {...item,...JSON.parse(item.jsondata.value)||{}};}) : []  }\r\n                                            /*dataResult={this.state.masterData &&\r\n                                                this.state.masterData.samplestoragelistpreperation ?\r\n                                                process(this.state.masterData.samplestoragelistpreperation || [],\r\n                                                    this.state.dataStateChange ? this.state.dataStateChange : { skip: 0, take: 10 }) : []\r\n                                                // this.processWithGroups(this.state.masterData.samplestoragelistpreperation || [],\r\n                                                //     this.state.dataStateChange ? this.state.dataStateChange : {\r\n                                                //         take: 10,\r\n                                                //         skip: 0\r\n                                                //     })\r\n                                            }*/\r\n\r\n                                                //ALPD-4767--Vignesh R(29-08-2024)\r\n                                                dataResult={this.state.masterData &&\r\n                                                    this.state.masterData.samplestoragelistpreperation ?\r\n                                                    process(this.state.masterData.samplestoragelistpreperation.map(item => {\r\n                                                        return {...item,...JSON.parse(item.jsondata.value)};}) || [],\r\n                                                        this.state.dataStateChange ? this.state.dataStateChange : { skip: 0, take: 10 }) : []\r\n                                                    // this.processWithGroups(this.state.masterData.samplestoragelistpreperation || [],\r\n                                                    //     this.state.dataStateChange ? this.state.dataStateChange : {\r\n                                                    //         take: 10,\r\n                                                    //         skip: 0\r\n                                                    //     })\r\n                                                }    \r\n                                            dataState={this.state.dataStateChange ? this.state.dataStateChange : { skip: 0, take: 10 }}\r\n                                            dataStateChange={this.dataStateChange}\r\n                                            extractedColumnList={extractedColumnList}\r\n                                            controlMap={this.state.controlMap}\r\n                                            userRoleControlRights={this.state.userRoleControlRights}\r\n                                            userInfo={this.props.Login.userInfo}\r\n                                            deleteRecord={this.deleteRecord}\r\n                                            addRecord={() => this.openStorageMapping()}\r\n                                            pageable={true}\r\n                                            scrollable={'scrollable'}\r\n                                            // isComponent={true}\r\n                                            gridHeight={'600px'}\r\n                                            // isActionRequired={true}\r\n                                            isToolBarRequired={true}\r\n                                            //ATE234 Janakumar ALPD-5577 Sample Storage-->while download the pdf, screen getting freezed\r\n                                            isDownloadPDFRequired={false}\r\n                                            isDownloadExcelRequired={true}\r\n                                        // actionIcons={\r\n                                        //     [{\r\n                                        //         title: this.props.intl.formatMessage({ id: \"IDS_ADDSAMPLE\" }),\r\n                                        //         controlname: \"faPenSquare\",\r\n                                        //         hidden: false,\r\n                                        //         objectName: \"add\",\r\n                                        //         onClick: (param) => this.addSample(param, 1)\r\n                                        //     }]}\r\n                                        /> </Col></Row>}\r\n                                         {/* ALPD-5531 added by Abdul 07-Mar-2025 for Handling Export template Click */}\r\n                                        {this.state.export ?\r\n                                        <LocalizationProvider>\r\n                                            <ExcelExport\r\n                                                data={[]}\r\n                                                collapsible={true}\r\n                                                fileName={(this.props.Login.displayName && this.props.Login.displayName)}\r\n                                                ref={(exporter) => {\r\n                                                    this._excelExportHeader = exporter;\r\n                                                }}>\r\n                                                {[...this.state.exportField].map((item) =>\r\n                                                    <ExcelExportColumn\r\n                                                        field={item.dataField} title={this.props.intl.formatMessage({ id: item.idsName })} width={200} />\r\n                                                )\r\n\r\n                                                }\r\n                                            </ExcelExport>\r\n                                        </LocalizationProvider > : \"\" }\r\n                                        {/* ALPD-5531 End */}\r\n\r\n                                </Col>\r\n\r\n\r\n                            }\r\n\r\n                        </ListWrapper>\r\n\r\n                        {/* < ListWrapper className=\"client-list-content\" ><Row>\r\n                        \r\n                        </Row>\r\n                            <Col md={12}>\r\n                                <Col md={6}>\r\n                                    <Row>\r\n                                        <FormInput\r\n                                            name={'spositionvalue'}\r\n                                            onb\r\n                                            label={this.props.intl.formatMessage({ id: \"IDS_POSITIONVALUE\" })}\r\n                                            placeholder={this.props.intl.formatMessage({ id: \"IDS_POSITIONVALUE\" })}\r\n                                            value={this.state.selectedRecord['spositionvalue']\r\n                                                ? this.state.selectedRecord['spositionvalue'] : \"\"}\r\n                                            maxLength={255}\r\n                                            isDisabled={this.props.isDisabled}\r\n                                            onKeyDown={(event) => this.getSelectedBarcodeData(this.state.selectedRecord)}\r\n                                            onChange={(event) => this.onInputOnChange(event)}\r\n                                        />\r\n                                    </Row>\r\n                                </Col>\r\n                                <Col md={6}>\r\n                                    {this.state.selectedBarcodeValue && <div className=\"d-flex justify-content-end mr-3\">\r\n                                        <Row>\r\n                                            {\r\n                                                extractedColumnList.map((item, index) => {\r\n                                                    return (\r\n                                                        <>\r\n                                                            <Col md={6} key={`specInfo_${index}`}>\r\n                                                                <FormGroup>\r\n                                                                    <FormLabel>{this.props.intl.formatMessage({ id: item.idsName })}</FormLabel>\r\n                                                                    <ReadOnlyText>{this.state.selectedBarcodeValue[item.dataField]}</ReadOnlyText>\r\n                                                                </FormGroup>\r\n                                                            </Col>\r\n                                                        </>\r\n                                                    )\r\n                                                })\r\n                                            }\r\n                                        </Row>\r\n                                    </div>}\r\n                                </Col>\r\n                            </Col>\r\n                            </ListWrapper> */}\r\n                    </>}\r\n\r\n\r\n                {\r\n                    this.state.openModal &&\r\n                    <SlideOutModal show={this.state.openModal}\r\n                        closeModal={this.closeModal}\r\n                        hideSave={true}\r\n                        showSubmit={true}\r\n                        size={this.state.openSpreadSheet || this.state.isFilterPopup ? 'xl' : \"\"}\r\n                        operation={\"\"}\r\n                        inputParam={this.props.Login.inputParam}\r\n                        screenName={this.state.isFilterPopup ? \"\" : this.state.isMultiSampleAdd ? this.props.intl.formatMessage({ id: \"IDS_STORAGESTRUCTURE\" })\r\n                        : this.state.importTemplate ? this.props.intl.formatMessage({ id: \"IDS_IMPORTSAMPLEID\" })\r\n                            : this.state.editedsheetData.scontainerpath}\r\n                        onSaveClick={this.state.isFilterPopup ? this.getDynamicFilterExecuteData.bind(this) : this.state.importTemplate ? this.getImportSampleIDData : this.onSampleMappingSaveClick}\r\n                        esign={this.props.Login.loadEsign}\r\n                        // className={\"wide-popup\"}\r\n\r\n                        validateEsign={this.validateEsign}\r\n                        masterStatus={this.props.Login.masterStatus}\r\n                        updateStore={this.props.updateStore}\r\n                        selectedRecord={this.state.selectedRecord || {}}\r\n                        addComponent={this.state.isFilterPopup ?\r\n                            <FilterQueryBuilder\r\n                                fields={fields}\r\n                                isSampleStorage={true}\r\n\r\n                                queryArray={this.state.queryArray}\r\n                                skip={this.state.kendoSkip}\r\n                                take={this.state.kendoTake}\r\n                                onChange={this.onChange}\r\n                                tree={this.props.Login.tree !== undefined ? this.props.Login.tree : this.state.selectedRecord.tree}\r\n                                gridColumns={this.slideList}\r\n                                filterData={this.props.Login.slideResult || []}\r\n                                handlePageChange={this.handlePageChangeFilter}\r\n                                static={true}\r\n                                userInfo={this.props.Login.userInfo}\r\n                                updateStore={this.props.updateStore}\r\n                            />\r\n                            : this.props.Login.loadEsign ?\r\n                                <Esign operation={this.props.Login.operation}\r\n                                    formatMessage={this.props.intl.formatMessage}\r\n                                    onInputOnChange={this.onInputOnChange}\r\n                                    inputParam={this.props.Login.inputParam}\r\n                                    selectedRecord={this.state.selectedRecord || {}}\r\n                                />\r\n                                :\r\n                                this.state.openSpreadSheet ? <>\r\n                                    <MatrixComponent\r\n                                        Rows={this.state.Rows || 1}\r\n                                        userInfo={this.props.Login.userInfo}\r\n                                        columns={this.state.columns || 1}\r\n                                        selectedRecord={this.state.selectedRecord.sheetData || {}}\r\n                                        sheetData={this.state.sheetData || {}}\r\n                                        isMultiSampleAdd={this.state.isMultiSampleAdd}\r\n                                        childSheetDataChange={this.childSheetDataChange}\r\n                                        editedsheetData={this.state.editedsheetData}\r\n                                        multipleSheetData={this.state.masterData &&\r\n                                            this.state.masterData.samplestoragelistpreperation &&\r\n                                            process(this.state.masterData.samplestoragelistpreperation || [],\r\n                                                this.state.dataStateChange ? this.state.dataStateChange : { skip: 0, take: 10 }).data} />\r\n                                </> :\r\n// ALPD-5531 added by Abdul 07-Mar-2025 for Handling Export template Click\r\n                                this.state.importTemplate ? <>\r\n                                  <AddFile\r\n                                    selectedRecord={this.state.selectedRecord}\r\n                                    onDrop={this.onDropFile}\r\n                                    deleteAttachment={this.deleteAttachment}\r\n                                  />\r\n                                </> :\r\n// ALPD-5531 End\r\n                                    <AddSampleStorageMapping\r\n                                        operation={this.state.operation}\r\n                                        selectedRecordFilter={this.state.selectedRecordFilter}\r\n                                        onInputChange={(e) => this.onInputChange(e)}\r\n                                        onComboChange={this.onComboChange}\r\n                                        selectedRecord={this.state.selectedRecord || {}}\r\n                                        childDataChange={this.childDataChange}\r\n                                        userInfo={this.props.Login.userInfo}\r\n                                    />\r\n                        }\r\n                    />\r\n                }\r\n            </>\r\n        )\r\n    }\r\n\r\n    validateEsign = () => {\r\n        const inputParam = {\r\n            inputData: {\r\n                \"userinfo\": {\r\n                    ...this.props.Login.userInfo,\r\n                    sreason: this.state.selectedRecord[\"esigncomments\"],\r\n                    nreasoncode: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].value,\r\n                    spredefinedreason: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].label,\r\n\r\n                },\r\n                password: this.state.selectedRecord[\"esignpassword\"]\r\n            },\r\n            screenData: this.props.Login.screenData\r\n        }\r\n        this.props.validateEsignCredential(inputParam, \"openModal\");\r\n    }\r\n\r\n}\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        Login: state.Login\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, {\r\n    callService\r\n})(injectIntl(SampleStorageListPreperation));"]},"metadata":{},"sourceType":"module"}