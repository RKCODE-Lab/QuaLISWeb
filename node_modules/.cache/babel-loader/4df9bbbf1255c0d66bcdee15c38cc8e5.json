{"ast":null,"code":"var _jsxFileName = \"D:\\\\LIMSWFH\\\\LIMSPOSTGRESQL\\\\QuaLISWeb\\\\src\\\\pages\\\\configurationmaster\\\\APIService.jsx\";\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport FormSelectSearch from '../../components/form-select-search/form-select-search.component';\nimport { getControlMap, constructOptionList, copyText, convertDateTimetoStringDBFormat } from '../../components/CommonScript';\nimport { connect } from 'react-redux';\nimport { Alert, Button, Card, Col, Form, Row } from 'react-bootstrap';\nimport { ListWrapper } from '../../components/client-group.styles';\nimport FormTextarea from '../../components/form-textarea/form-textarea.component';\nimport { stringOperatorData, numericOperatorData, dateConditionData } from '../dashboard/SqlBuilderFilterType';\nimport FormInput from '../../components/form-input/form-input.component';\nimport FormNumericInput from '../../components/form-numeric-input/form-numeric-input.component';\nimport DateTimePicker from '../../components/date-time-picker/date-time-picker.component';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faCopy, faMinus, faPlus } from '@fortawesome/free-solid-svg-icons';\nimport { toast } from 'react-toastify';\nimport ReactJson from \"react-json-view\";\nimport { sendRequest, getQualisFormsFields, getQualisForms, updateStore } from \"../../actions\";\nimport { ContentPanel } from '../../components/App.styles';\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes'; //import APIConsole from \"./APIConsole\"\n\nconst mapStateToProps = state => {\n  return {\n    Login: state.Login\n  };\n};\n\nclass APIService extends React.Component {\n  constructor(props) {\n    super(props); //  this.console = React.createRef();\n\n    this.onInputOnChange = (event, value, variant) => {\n      if (event.target.type === \"checkbox\") {\n        let constructApiData = this.state.constructApiData;\n        const selectedRecord = this.state.selectedRecord; // selectedRecord['check'] = label\n        // constructApiData={...constructApiData,[variant.item.scolumn]:\"\"}\n\n        const value1 = selectedRecord[event.target.name];\n\n        if (value1 !== '' && value1 !== undefined) {\n          if (value1.toLowerCase().includes(value.toLowerCase())) {\n            const index = value1.toLowerCase().indexOf(value.toLowerCase());\n            delete constructApiData[variant.item.scolumn];\n\n            if (index !== -1) {\n              if (index === 0) {\n                const indexcomma = value1.indexOf(\",\");\n\n                if (indexcomma !== -1) {\n                  selectedRecord[event.target.name] = value1.slice(indexcomma + 1);\n                } else {\n                  selectedRecord[event.target.name] = \"\";\n                }\n              } else {\n                if (value1.slice(index).indexOf(\",\") !== -1) {\n                  selectedRecord[event.target.name] = value1.slice(0, index) + value1.slice(index + value1.slice(index).indexOf(\",\") + 1);\n                } else {\n                  selectedRecord[event.target.name] = value1.slice(0, index - 1);\n                }\n              }\n            }\n          } else {\n            selectedRecord[event.target.name] = value1 + ',' + value;\n            constructApiData = [...constructApiData, {\n              [variant.item.scolumn]: \"\"\n            }];\n          }\n        } else {\n          selectedRecord[event.target.name] = value1 + ',' + value;\n          constructApiData = [...constructApiData, {\n            [variant.item.scolumn]: \"\"\n          }];\n        }\n\n        this.setState({\n          selectedRecord,\n          constructApiData,\n          constructApiDataString: constructApiData.map(e => JSON.stringify(e).replace(/{|}/g, '')).join(',\\n')\n        });\n      } else {\n        // const selectedRecord = this.state.selectedRecord;\n        let text = event.target.value.replaceAll('\\n', '');\n        text = text.replace(/\\s+/g, '');\n        let constructApiData1 = JSON.parse(text);\n        let constructApiData = Object.keys(constructApiData1).map(x => {\n          return {\n            [x]: constructApiData1[x]\n          };\n        });\n        this.setState({\n          constructApiData,\n          constructApiDataString: constructApiData.map(e => JSON.stringify(e).replace(/{|}/g, '')).join(',\\n')\n        });\n      }\n    };\n\n    this.onComboChange = (event, colunName) => {\n      const selectedRecord = this.state.selectedRecord;\n      const oldValue = { ...selectedRecord[colunName]\n      };\n      selectedRecord[colunName] = event;\n      const map1 = new Map();\n      map1['userinfo'] = this.props.Login.userInfo;\n      map1['selectedRecord'] = selectedRecord;\n      map1['masterData'] = this.props.Login.masterData;\n\n      if (colunName === 'napiservicecode') {\n        this.props.getQualisForms(map1); // this.setState({ selectedRecord })\n      } else {\n        if (oldValue && oldValue.value !== event.value) {\n          this.props.getQualisFormsFields(map1);\n        }\n      } //  this.setState({ selectedRecord })\n\n    };\n\n    this.checkFilter = filterList => {\n      let check = [];\n      filterList.map((item, index) => {\n        if (item.filterColumn) {\n          if (item.filterCondition) {\n            if (item.filterColumn.item.columndatatype === 'string') {\n              if (item.filterCondition.value === '=' || item.filterCondition.value === 'IN' || item.filterCondition.value === 'NOT') {\n                if (item.filterValue && item.filterValue !== \"\") {\n                  check.push(true);\n                }\n              } else {\n                if (item.filterCondition) {\n                  check.push(true);\n                }\n              }\n            } else if (item.filterColumn.item.columndatatype === 'numeric') {\n              if (item.filterCondition.value === '=' || item.filterCondition.value === '!=' || item.filterCondition.value === '>' || item.filterCondition.value === '<' || item.filterCondition.value === '>=' || item.filterCondition.value === '<=') {\n                if (item.filterValue && item.filterValue !== \"\") {\n                  check.push(true);\n                }\n              } else {\n                if (item.filterCondition) {\n                  check.push(true);\n                }\n              }\n            } else if (item.filterColumn.item.columndatatype === 'date') {\n              if (item.filterCondition.value === '=' || item.filterCondition.value === 'NOT') {\n                if (item.filterValue && item.filterValue !== \"\") {\n                  check.push(true);\n                }\n              } else {\n                if (item.filterCondition) {\n                  check.push(true);\n                }\n              }\n            }\n          }\n        }\n      });\n      return check.length === filterList.length ? true : false;\n    };\n\n    this.onMoreClick = e => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (this.checkFilter(selectedRecord['filterNew'] || [])) {\n        if (this.props.Login.masterData.SelectedForm) {\n          if (selectedRecord['filterNew'] === undefined) {\n            selectedRecord['filterNew'] = [];\n          }\n\n          selectedRecord['filterNew'][selectedRecord['filterNew'].length] = {};\n          const lstQryColumn = this.removeSameRecordFromTwoDifferentArrays(this.state.lstQueryBuilder, selectedRecord['filterNew']);\n\n          if (lstQryColumn.length > 0) {\n            this.setState({\n              selectedRecord,\n              lstQryColumn\n            });\n          } else {\n            toast.warn(this.props.intl.formatMessage({\n              id: \"IDS_COLUMNSNOTAVALIABLE\"\n            }));\n          }\n        } else {\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_SELECTTHEFORM\"\n          }));\n        }\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_PLEASEFILLTHEVALUE\"\n        }));\n      }\n    };\n\n    this.onFilterInputOnChange = (event, index) => {\n      const selectedRecord = this.state.selectedRecord || {}; //  const constructApiData = this.state.constructApiData\n\n      const filterTableNewAddedList = [...selectedRecord['filterNew']];\n      const change = { ...filterTableNewAddedList[index],\n        [event.target.name]: event.target.value\n      };\n      const changeData = [...filterTableNewAddedList.splice(0, index), { ...change\n      }, ...filterTableNewAddedList.splice(index + 1)]; // const index1 = constructApiData.findIndex(x => Object.keys(x).toString() === change.filterColumn.item.scolumn)\n      // if (index1 === -1) {\n      //     constructApiData.push({ [change.filterColumn.item.scolumn]: change.filterCondition.value + \" \" + change.filterValue })\n      // } else {\n      //     constructApiData[index1] = { [change.filterColumn.item.scolumn]: change.filterCondition.value + \" \" + change.filterValue }\n      // }\n\n      this.setState({\n        selectedRecord: { ...selectedRecord,\n          filterNew: changeData\n        }\n      });\n    };\n\n    this.onFilterNumericInputChange = (value, name, index) => {\n      const selectedRecord = this.state.selectedRecord || {}; //   const constructApiData = this.state.constructApiData\n\n      const filterTableNewAddedList = [...selectedRecord['filterNew']];\n      const change = { ...filterTableNewAddedList[index],\n        [name]: value\n      }; // constructApiData.push({ [change.filterColumn.item.scolumn]: change.filterValue })\n      // const index1 = constructApiData.findIndex(x => Object.keys(x).toString() === change.filterColumn.item.scolumn)\n      // if (index1 === -1) {\n      //     constructApiData.push({ [change.filterColumn.item.scolumn]: change.filterCondition.value + \" \" + change.filterValue })\n      // } else {\n      //     constructApiData[index1] = { [change.filterColumn.item.scolumn]: change.filterCondition.value + \" \" + change.filterValue }\n      // }\n\n      const changeData = [...filterTableNewAddedList.splice(0, index), { ...change\n      }, ...filterTableNewAddedList.splice(index + 1)];\n      this.setState({\n        selectedRecord: { ...selectedRecord,\n          filterNew: changeData\n        }\n      });\n    };\n\n    this.handleDateChange = (columnLabel, value, index) => {\n      const selectedRecord = this.state.selectedRecord || {}; // const constructApiData = this.state.constructApiData\n\n      const filterTableNewAddedList = [...selectedRecord['filterNew']];\n      const change = { ...filterTableNewAddedList[index],\n        [columnLabel]: value\n      }; // const index1 = constructApiData.findIndex(x => Object.keys(x).toString() === change.filterColumn.item.scolumn)\n      // if (index1 === -1) {\n      //     constructApiData.push({ [change.filterColumn.item.scolumn]: change.filterCondition.value + \" \" + change.filterValue })\n      // } else {\n      //     constructApiData[index1] = { [change.filterColumn.item.scolumn]: change.filterCondition.value + \" \" + change.filterValue }\n      // }\n\n      const changeData = [...filterTableNewAddedList.splice(0, index), { ...change\n      }, ...filterTableNewAddedList.splice(index + 1)];\n      this.setState({\n        selectedRecord: { ...selectedRecord,\n          filterNew: changeData\n        }\n      });\n    };\n\n    this.onfilterChange = (comboValue, columnLabel, conditionType, index) => {\n      const selectedRecord = this.state.selectedRecord;\n\n      if (conditionType === 'column') {\n        const filterTableNewAddedList = [...selectedRecord['filterNew']];\n        const change = { ...filterTableNewAddedList[index],\n          [columnLabel]: comboValue,\n          filterCondition: undefined,\n          filterValueType: undefined,\n          filterValue: undefined\n        };\n        const changeData = [...filterTableNewAddedList.splice(0, index), { ...change\n        }, ...filterTableNewAddedList.splice(index + 1)];\n        this.setState({\n          selectedRecord: { ...selectedRecord,\n            filterNew: changeData\n          }\n        });\n      } else if (conditionType === 'condition') {\n        const filterTableNewAddedList = [...selectedRecord['filterNew']];\n        const change = { ...filterTableNewAddedList[index],\n          [columnLabel]: comboValue\n        };\n        const changeData = [...filterTableNewAddedList.splice(0, index), { ...change,\n          filterValue: undefined\n        }, ...filterTableNewAddedList.splice(index + 1)]; // let constructApiData = this.state.constructApiData\n        // if (change[\"filterCondition\"].value === 'IS NULL' ||\n        //     change[\"filterCondition\"].value === 'IS NOT NULL' ||\n        //     change[\"filterCondition\"].value === 'PRESENT' ||\n        //     change[\"filterCondition\"].value === 'BLANK' ||\n        //     change[\"filterCondition\"].value !== 'NULL' ||\n        //     change[\"filterCondition\"].value !== 'NOT NULL' ||\n        //     change[\"filterCondition\"].value === 'IN') {\n        //     // constructApiData.push({ [change.filterColumn.item.scolumn]: change.filterCondition.value })\n        //     const index1 = constructApiData.findIndex(x => Object.keys(x).toString() === change.filterColumn.item.scolumn)\n        //     if (index1 === -1) {\n        //         constructApiData.push({ [change.filterColumn.item.scolumn]: change.filterCondition.value })\n        //     } else {\n        //         constructApiData[index1] = { [change.filterColumn.item.scolumn]: change.filterCondition.value }\n        //     }\n        // }\n        // else if(change[\"filterColumn\"].item.columndatatype === 'date'&& \n        // (change.filterCondition.value === '=' || change.filterCondition.value === '<' \n        // || change.filterCondition.value === '>')){\n        //     const index1 = constructApiData.findIndex(x => Object.keys(x).toString() === change.filterColumn.item.scolumn)\n        //     if (index1 === -1) {\n        //         constructApiData.push({ [change.filterColumn.item.scolumn]: change.filterCondition.value+\" '\"+convertDateTimetoStringDBFormat(new Date(),this.props.Login.userInfo)+\"'\" })\n        //     } else {\n        //         constructApiData[index1] = { [change.filterColumn.item.scolumn]: change.filterCondition.value+\" '\"+convertDateTimetoStringDBFormat(new Date(),this.props.Login.userInfo)+\"'\"  }\n        //     }\n        // }\n        // else if(change[\"filterColumn\"].item.columndatatype === 'date'&& \n        //  (item.filterCondition.value === 'NOT')){\n        //     const index1 = constructApiData.findIndex(x => Object.keys(x).toString() === change.filterColumn.item.scolumn)\n        //     if (index1 === -1) {\n        //         constructApiData.push({ [change.filterColumn.item.scolumn]: change.filterCondition.value+\" '\"+convertDateTimetoStringDBFormat(new Date(),this.props.Login.userInfo)+\"'\" })\n        //     } else {\n        //         constructApiData[index1] = { [change.filterColumn.item.scolumn]: change.filterCondition.value+\" '\"+convertDateTimetoStringDBFormat(new Date(),this.props.Login.userInfo)+\"'\"  }\n        //     }\n        // }\n\n        this.setState({\n          selectedRecord: { ...selectedRecord,\n            filterNew: changeData\n          }\n        });\n      }\n    };\n\n    this.onFilterModalDelete = childIndex => {\n      // let constructApiData1 = [{ ...this.state.constructApiData[0] }, { ...this.state.constructApiData[1] }]\n      // let constructApiData2 = [...this.state.constructApiData]\n      // constructApiData2 = constructApiData2.splice(2)\n      // constructApiData2 = constructApiData2.splice(0, childIndex)\n      // let constructApiData3 = [...this.state.constructApiData]\n      // constructApiData3 = constructApiData3.splice(2)\n      // constructApiData3 = constructApiData3.splice(childIndex + 1)\n      const selectedRecord = this.state.selectedRecord;\n      selectedRecord['filterNew'] = [...selectedRecord['filterNew'].slice(0, childIndex), ...selectedRecord['filterNew'].slice(childIndex + 1)]; // constructApiData1 = [...constructApiData1, ...constructApiData2, ...constructApiData3]\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.filterQueryFormation = selectedRecord => {\n      let str = \"\";\n      let strform = \"\";\n      selectedRecord['filterNew'] && selectedRecord['filterNew'].length > 0 && selectedRecord['filterNew'].map((item, index) => {\n        if (item.filterCondition) {\n          if (item.filterCondition.value === 'IN') {\n            str = str + (item.filterColumn.item.isjsoncolumn ? item.filterColumn.item.ismultilingual ? item.filterColumn.item.jsoncolumnname + \"->'\" + item.filterColumn.item.scolumn + \"'->>'\" + this.props.Login.userInfo.slanguagetypecode + \"'\" : item.filterColumn.item.jsoncolumnname + \"->>'\" + item.filterColumn.item.scolumn + \"'\" : \"\\\"\" + item.filterColumn.item.scolumn + \"\\\"\") + \" \" + item.filterCondition.value + \" ('\" + (item.filterValue ? item.filterValue : \"\") + \"') \";\n          } else if (item.filterCondition.value === 'PRESENT') {\n            str = str + \" NOT \" + (item.filterColumn.item.isjsoncolumn ? item.filterColumn.item.ismultilingual ? item.filterColumn.item.jsoncolumnname + \"->'\" + item.filterColumn.item.scolumn + \"'->>'\" + this.props.Login.userInfo.slanguagetypecode + \"'\" : item.filterColumn.item.jsoncolumnname + \"->>'\" + item.filterColumn.item.scolumn + \"'\" : \"\\\"\" + item.filterColumn.item.scolumn + \"\\\"\") + \" ='' \";\n          } else if (item.filterCondition.value === 'BLANK') {\n            str = str + (item.filterColumn.item.isjsoncolumn ? item.filterColumn.item.ismultilingual ? item.filterColumn.item.jsoncolumnname + \"->'\" + item.filterColumn.item.scolumn + \"'->>'\" + this.props.Login.userInfo.slanguagetypecode + \"'\" : item.filterColumn.item.jsoncolumnname + \"->>'\" + item.filterColumn.item.scolumn + \"'\" : \"\\\"\" + item.filterColumn.item.scolumn + \"\\\"\") + \" ='' \";\n          } else if (item.filterCondition.value === 'NULL' || item.filterCondition.value === 'NOT NULL') {\n            str = str + (item.filterColumn.item.isjsoncolumn ? item.filterColumn.item.ismultilingual ? item.filterColumn.item.jsoncolumnname + \"->'\" + item.filterColumn.item.scolumn + \"'->>'\" + this.props.Login.userInfo.slanguagetypecode + \"'\" : item.filterColumn.item.jsoncolumnname + \"->>'\" + item.filterColumn.item.scolumn + \"'\" : \"\\\"\" + item.filterColumn.item.scolumn + \"\\\"\") + \" IS '\" + item.filterCondition.value + \"' \";\n          } else if (item.filterCondition.value === 'IS NULL') {\n            str = str + (item.filterColumn.item.isjsoncolumn ? item.filterColumn.item.ismultilingual ? item.filterColumn.item.jsoncolumnname + \"->'\" + item.filterColumn.item.scolumn + \"'->>'\" + this.props.Login.userInfo.slanguagetypecode + \"'\" : item.filterColumn.item.jsoncolumnname + \"->>'\" + item.filterColumn.item.scolumn + \"'\" : \"\\\"\" + item.filterColumn.item.scolumn + \"\\\"\") + \" \" + item.filterCondition.value + \" \";\n          } else if (item.filterCondition.value === 'IS NOT NULL') {\n            str = str + (item.filterColumn.item.isjsoncolumn ? item.filterColumn.item.ismultilingual ? item.filterColumn.item.jsoncolumnname + \"->'\" + item.filterColumn.item.scolumn + \"'->>'\" + this.props.Login.userInfo.slanguagetypecode + \"'\" : item.filterColumn.item.jsoncolumnname + \"->>'\" + item.filterColumn.item.scolumn + \"'\" : \"\\\"\" + item.filterColumn.item.scolumn + \"\\\"\") + \" \" + item.filterCondition.value + \" \";\n          } else if (item.filterCondition.value === 'STARTS WITH') {\n            str = str + (item.filterColumn.item.isjsoncolumn ? item.filterColumn.item.ismultilingual ? item.filterColumn.item.jsoncolumnname + \"->'\" + item.filterColumn.item.scolumn + \"'->>'\" + this.props.Login.userInfo.slanguagetypecode + \"'\" : item.filterColumn.item.jsoncolumnname + \"->>'\" + item.filterColumn.item.scolumn + \"'\" : \"\\\"\" + item.filterColumn.item.scolumn + \"\\\"\") + \"ILIKE\" + \" '\" + (item.filterValue ? item.filterValue : \"\") + \"%' collate \\\"default\\\"\";\n          } else if (item.filterCondition.value === 'ENDS WITH') {\n            str = str + (item.filterColumn.item.isjsoncolumn ? item.filterColumn.item.ismultilingual ? item.filterColumn.item.jsoncolumnname + \"->'\" + item.filterColumn.item.scolumn + \"'->>'\" + this.props.Login.userInfo.slanguagetypecode + \"'\" : item.filterColumn.item.jsoncolumnname + \"->>'\" + item.filterColumn.item.scolumn + \"'\" : \"\\\"\" + item.filterColumn.item.scolumn + \"\\\"\") + \"ILIKE\" + \" '%\" + (item.filterValue ? item.filterValue : \"\") + \"' collate \\\"default\\\"\";\n          } else if (item.filterCondition.value === 'CONTAINS') {\n            str = str + (item.filterColumn.item.isjsoncolumn ? item.filterColumn.item.ismultilingual ? item.filterColumn.item.jsoncolumnname + \"->'\" + item.filterColumn.item.scolumn + \"'->>'\" + this.props.Login.userInfo.slanguagetypecode + \"'\" : item.filterColumn.item.jsoncolumnname + \"->>'\" + item.filterColumn.item.scolumn + \"'\" : \"\\\"\" + item.filterColumn.item.scolumn + \"\\\"\") + \"ILIKE\" + \" '\" + (item.filterValue ? item.filterValue : \"\") + \"%' collate \\\"default\\\"\";\n          } else if (item.filterColumn.item.columndatatype === 'date' && (item.filterCondition.value === '=' || item.filterCondition.value === '<' || item.filterCondition.value === '>')) {\n            str = str + (item.filterColumn.item.isjsoncolumn ? item.filterColumn.item.ismultilingual ? item.filterColumn.item.jsoncolumnname + \"->'\" + item.filterColumn.item.scolumn + \"'->>'\" + this.props.Login.userInfo.slanguagetypecode + \"'\" : item.filterColumn.item.jsoncolumnname + \"->>'\" + item.filterColumn.item.scolumn + \"'\" : \"\\\"\" + item.filterColumn.item.scolumn + \"\\\"\") + \" \" + item.filterCondition.value + (\"'\" + (item.filterValue ? convertDateTimetoStringDBFormat(item.filterValue, this.props.Login.userInfo) : convertDateTimetoStringDBFormat(new Date(), this.props.Login.userInfo)) + \"' \");\n          } else if (item.filterColumn.item.columndatatype === 'date' && item.filterCondition.value === 'NOT') {\n            str = str + \"(NOT \" + (item.filterColumn.item.isjsoncolumn ? item.filterColumn.item.ismultilingual ? item.filterColumn.item.jsoncolumnname + \"->'\" + item.filterColumn.item.scolumn + \"'->>'\" + this.props.Login.userInfo.slanguagetypecode + \"'\" : item.filterColumn.item.jsoncolumnname + \"->>'\" + item.filterColumn.item.scolumn + \"'\" : \"\\\"\" + item.filterColumn.item.scolumn + \"\\\"\") + \" = \" + (\"'\" + (item.filterValue ? convertDateTimetoStringDBFormat(item.filterValue, this.props.Login.userInfo) : convertDateTimetoStringDBFormat(new Date(), this.props.Login.userInfo)) + \"')\");\n          } else if (item.filterColumn.item.columndatatype === 'string' && item.filterCondition.value === 'NOT') {\n            str = str + \"(NOT \" + (item.filterColumn.item.isjsoncolumn ? item.filterColumn.item.ismultilingual ? item.filterColumn.item.jsoncolumnname + \"->'\" + item.filterColumn.item.scolumn + \"'->>'\" + this.props.Login.userInfo.slanguagetypecode + \"'\" : item.filterColumn.item.jsoncolumnname + \"->>'\" + item.filterColumn.item.scolumn + \"'\" : \"\\\"\" + item.filterColumn.item.scolumn + \"\\\"\") + \" = \" + (\"'\" + item.filterValue ? item.filterValue : \"\" + \"')\");\n          } else {\n            str = str + \" \" + (item.filterColumn.item.isjsoncolumn ? item.filterColumn.item.ismultilingual ? item.filterColumn.item.jsoncolumnname + \"->'\" + item.filterColumn.item.scolumn + \"'->>'\" + this.props.Login.userInfo.slanguagetypecode + \"'\" : item.filterColumn.item.jsoncolumnname + \"->>'\" + item.filterColumn.item.scolumn + \"'\" : \"\\\"\" + item.filterColumn.item.scolumn + \"\\\"\") + \" \" + item.filterCondition.value + (\"'\" + (item.filterValue ? item.filterValue : \"\") + \"' \");\n          }\n\n          if (index !== selectedRecord['filterNew'].length - 1) {\n            str = str + \" and \";\n          }\n        } //  })\n\n      });\n      strform = strform + \" \" + str;\n      return strform;\n    };\n\n    this.copyToClipboard = () => {\n      copyText(this.copyParameter());\n      toast.info(this.props.intl.formatMessage({\n        id: \"IDS_COPIEDSUCCESSFULLY\"\n      }));\n    };\n\n    this.sendRequest = () => {\n      const selectedRecord = this.state.selectedRecord;\n\n      if (this.props.Login.masterData.SelectedApi) {\n        if (this.props.Login.masterData.SelectedForm) {\n          const url = this.props.Login.masterData.SelectedApi.item.sapiservice;\n          let obj = this.sendObject();\n          let obj1 = {\n            \"inputData\": obj,\n            url,\n            masterData: this.props.Login.masterData\n          };\n          this.props.sendRequest(obj1);\n        } else {\n          toast.info(this.props.intl.formatMessage({\n            id: \"IDS_SELECTTHEFORM\"\n          }));\n        }\n      } else {\n        toast.info(this.props.intl.formatMessage({\n          id: \"IDS_SELECTTHEAPI\"\n        }));\n      }\n    };\n\n    this.removeSameRecordFromTwoDifferentArrays = (firstArray, secondArray) => {\n      let filterArray = [];\n\n      if (Array.isArray(secondArray) && secondArray.length > 0) {\n        secondArray.map((x, index1) => {\n          firstArray.map(y => {\n            if (x.filterColumn) {\n              if (x.filterColumn.item.scolumn === y.item.scolumn) {\n                const index = firstArray.findIndex(x1 => x1.item.scolumn === y.item.scolumn);\n                let firstArray1 = [...firstArray];\n                firstArray1 = [...firstArray1.splice(0, index)];\n                let firstArray2 = [...firstArray];\n                firstArray2 = [...firstArray2.splice(index + 1)];\n                filterArray = [...firstArray1, ...firstArray2];\n                firstArray = [...filterArray];\n              }\n            } else {\n              if (index1 === 0) {\n                filterArray = [...firstArray];\n              }\n            }\n          });\n        });\n      } else {\n        filterArray = [...firstArray];\n      }\n\n      return filterArray;\n    };\n\n    this.showQueryParameter = () => {\n      //   let newObject = {}\n      let returnString = \"{\";\n      this.state.constructApiData.map((e, index) => {\n        if (index < 2) {\n          returnString = returnString + \" \\n \\\"\" + Object.keys(e) + \"\\\":\\\"\" + Object.values(e) + \"\\\"\";\n        }\n      });\n      let text = this.filterQueryFormation(this.state.selectedRecord);\n      returnString = returnString + \"\\n\" + \" \\\"whereCondition\\\":\\\"\" + text + \"\\\"\\n}\"; // const object = {\n      //     ...newObject,\n      //     \"whereCondition\": text\n      // }\n\n      return returnString;\n    };\n\n    this.copyParameter = () => {\n      let newObject = {};\n      this.state.constructApiData.map((e, index) => {\n        if (index < 2) {\n          newObject = { ...newObject,\n            ...e\n          };\n        }\n      });\n      let text = this.filterQueryFormation(this.state.selectedRecord);\n      const object = { ...newObject,\n        \"whereCondition\": text\n      };\n      return JSON.stringify(object);\n    };\n\n    this.sendObject = () => {\n      let newObject = {};\n      this.state.constructApiData.map(e => {\n        newObject = { ...newObject,\n          ...e\n        };\n      });\n      let text = this.filterQueryFormation(this.state.selectedRecord);\n      const object = { ...newObject,\n        \"whereCondition\": text\n      };\n      return object;\n    };\n\n    this.state = {\n      selectedRecord: {},\n      constructApiData: [],\n      consoleData: [],\n      controlMap: {},\n      userRoleControlRights: [],\n      masterStatus: \"\",\n      error: \"\"\n    };\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\n      toast.warn(props.Login.masterStatus);\n      props.Login.masterStatus = \"\";\n    }\n\n    if (props.Login.error !== state.error) {\n      toast.error(props.Login.error);\n      props.Login.error = \"\";\n    }\n\n    return null;\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(ListWrapper, {\n      className: \"client-list-content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 534,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      noGutters: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 535,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 5,\n      className: \"pr-3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 536,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 537,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 9,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 538,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(FormSelectSearch, {\n      name: \"napiservicecode\",\n      formLabel: this.props.intl.formatMessage({\n        id: \"IDS_API\"\n      }),\n      placeholder: this.props.intl.formatMessage({\n        id: \"IDS_SELECTRECORD\"\n      }),\n      options: this.state.apiServiceList || [],\n      value: this.props.Login.masterData.SelectedApi && this.props.Login.masterData.SelectedApi,\n      isMandatory: true,\n      isClearable: false,\n      isMulti: false,\n      isSearchable: false,\n      closeMenuOnSelect: true,\n      onChange: event => this.onComboChange(event, 'napiservicecode'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 539,\n        columnNumber: 33\n      }\n    })), /*#__PURE__*/React.createElement(Col, {\n      md: 1,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 553,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      className: \"btn-user btn-primary-blue\",\n      onClick: e => this.sendRequest(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 554,\n        columnNumber: 33\n      }\n    }, this.props.intl.formatMessage({\n      id: \"IDS_SENT\"\n    })))), /*#__PURE__*/React.createElement(Row, {\n      noGutters: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 559,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 9,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 560,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(FormSelectSearch, {\n      name: \"nformcode\",\n      formLabel: this.props.intl.formatMessage({\n        id: \"IDS_FORMS\"\n      }),\n      placeholder: this.props.intl.formatMessage({\n        id: \"IDS_SELECTRECORD\"\n      }),\n      options: this.state.qualisList || [],\n      value: this.props.Login.masterData.SelectedForm && this.props.Login.masterData.SelectedForm,\n      isMandatory: true,\n      isClearable: false,\n      isMulti: false,\n      isSearchable: false,\n      closeMenuOnSelect: true,\n      onChange: event => this.onComboChange(event, 'nformcode'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 561,\n        columnNumber: 33\n      }\n    }))), /*#__PURE__*/React.createElement(Card, {\n      className: \"api-filter-condition-card\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 576,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Card.Body, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 577,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"form\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 578,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(\"section\", {\n      className: 'modal-card-body',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 579,\n        columnNumber: 37\n      }\n    }, this.state.selectedRecord['filterNew'] && this.state.selectedRecord['filterNew'].map((item, index) => {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: 'field has-addons filterheight',\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 581,\n          columnNumber: 52\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        class: \"control is-expanded\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 582,\n          columnNumber: 49\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        class: \"select is-fullwidth\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 583,\n          columnNumber: 53\n        }\n      }, /*#__PURE__*/React.createElement(FormSelectSearch, {\n        formGroupClassName: \"remove-floating-label-margin\",\n        formLabel: this.props.intl.formatMessage({\n          id: \"IDS_FIELDS\"\n        }),\n        isSearchable: true,\n        name: \"filterColumn\",\n        placeholder: this.props.intl.formatMessage({\n          id: \"IDS_FIELDS\"\n        }),\n        showOption: true,\n        options: this.state.lstQryColumn || [],\n        value: item[\"filterColumn\"] && item[\"filterColumn\"] || \"\",\n        onChange: value => this.onfilterChange(value, \"filterColumn\", 'column', index),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 584,\n          columnNumber: 57\n        }\n      }))), /*#__PURE__*/React.createElement(\"div\", {\n        class: \"control is-expanded\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 597,\n          columnNumber: 49\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        class: \"select is-fullwidth\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 598,\n          columnNumber: 53\n        }\n      }, /*#__PURE__*/React.createElement(FormSelectSearch, {\n        formGroupClassName: \"remove-floating-label-margin\",\n        formLabel: this.props.intl.formatMessage({\n          id: \"IDS_CONDITION\"\n        }),\n        isSearchable: true,\n        name: \"sviewname\",\n        placeholder: this.props.intl.formatMessage({\n          id: \"IDS_CONDITION\"\n        }),\n        showOption: true,\n        options: item[\"filterColumn\"] && item[\"filterColumn\"].item ? item[\"filterColumn\"].item.columndatatype === 'string' ? stringOperatorData : item[\"filterColumn\"].item.columndatatype === 'numeric' ? numericOperatorData : item[\"filterColumn\"].item.columndatatype === 'date' ? dateConditionData : stringOperatorData : \"\",\n        value: item[\"filterCondition\"] !== undefined ? item[\"filterCondition\"] : \"\",\n        onChange: value => this.onfilterChange(value, \"filterCondition\", 'condition', index),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 599,\n          columnNumber: 57\n        }\n      }))), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"control \",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 621,\n          columnNumber: 49\n        }\n      }, item[\"filterCondition\"] && item[\"filterCondition\"].value && item[\"filterColumn\"] ? item[\"filterColumn\"].item.columndatatype === 'string' ? item[\"filterCondition\"].value !== 'IS NULL' && item[\"filterCondition\"].value !== 'IS NOT NULL' && item[\"filterCondition\"].value !== 'PRESENT' && item[\"filterCondition\"].value !== 'BLANK' ? /*#__PURE__*/React.createElement(FormInput, {\n        label: this.props.intl.formatMessage({\n          id: \"IDS_VALUE\"\n        }),\n        name: \"filterValue\",\n        type: \"text\",\n        onChange: event => this.onFilterInputOnChange(event, index),\n        placeholder: this.props.intl.formatMessage({\n          id: \"IDS_VALUE\"\n        }),\n        value: item[\"filterValue\"] ? item[\"filterValue\"] : \"\",\n        isMandatory: true,\n        required: true,\n        maxLength: 100,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 629,\n          columnNumber: 65\n        }\n      }) : \"\" : item[\"filterColumn\"].item.columndatatype === 'numeric' ? item[\"filterCondition\"].value !== 'NULL' && item[\"filterCondition\"].value !== 'NOT NULL' ? item[\"filterCondition\"].value === 'IN' ? /*#__PURE__*/React.createElement(FormInput, {\n        label: this.props.intl.formatMessage({\n          id: \"IDS_VALUE\"\n        }),\n        name: \"filterValue\",\n        type: \"text\",\n        onChange: event => this.onFilterInputOnChange(event, index),\n        placeholder: this.props.intl.formatMessage({\n          id: \"IDS_VALUE\"\n        }),\n        value: item[\"filterValue\"] ? item[\"filterValue\"] : \"\",\n        isMandatory: true,\n        required: true,\n        maxLength: 100,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 645,\n          columnNumber: 73\n        }\n      }) : /*#__PURE__*/React.createElement(FormNumericInput, {\n        name: \"filterValue\",\n        label: this.props.intl.formatMessage({\n          id: \"IDS_VALUE\"\n        }),\n        type: \"number\",\n        value: item[\"filterValue\"],\n        placeholder: this.props.intl.formatMessage({\n          id: \"IDS_VALUE\"\n        }),\n        strict: true //min={0}\n        //max={99999999.99}\n        ,\n        maxLength: 10,\n        onChange: value => this.onFilterNumericInputChange(value, \"filterValue\", index),\n        noStyle: true //precision={2}\n        //isMandatory={true}\n        ,\n        className: \"form-control\",\n        errors: \"Please provide a valid number.\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 657,\n          columnNumber: 73\n        }\n      }) : \"\" : item[\"filterColumn\"].item.columndatatype === 'date' ? item[\"filterCondition\"].value === '=' || item[\"filterCondition\"].value === '<' || item[\"filterCondition\"].value === '>' || item[\"filterCondition\"].value === 'NOT' ? /*#__PURE__*/React.createElement(DateTimePicker, {\n        name: \"filterValue\",\n        label: this.props.intl.formatMessage({\n          id: \"IDS_VALUE\"\n        }),\n        className: \"form-control\",\n        placeholderText: this.props.intl.formatMessage({\n          id: \"IDS_SELECTDATE\"\n        }),\n        selected: item[\"filterValue\"] ? item[\"filterValue\"] : new Date(),\n        dateFormat: this.props.Login.userInfo[\"ssitedatetime\"],\n        timeInputLabel: this.props.intl.formatMessage({\n          id: \"IDS_TIME\"\n        }),\n        showTimeInput: true,\n        onChange: date => this.handleDateChange(\"filterValue\", date, index),\n        value: item[\"filterValue\"] ? item[\"filterValue\"] : \"\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 682,\n          columnNumber: 73\n        }\n      }) : \"\" : \"\" : \"\"), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"control\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 701,\n          columnNumber: 49\n        }\n      }, this.state.selectedRecord['filterNew'].length > 0 && /*#__PURE__*/React.createElement(Button, {\n        className: \"button is-light is-danger\",\n        onClick: () => this.onFilterModalDelete(index),\n        type: \"button\",\n        tabindex: \"0\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 703,\n          columnNumber: 57\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        className: \"icon\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 706,\n          columnNumber: 61\n        }\n      }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n        icon: faMinus,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 707,\n          columnNumber: 65\n        }\n      })))));\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: 'buttons is-right',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 714,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      className: 'button is-light is-info is-small',\n      onClick: e => this.onMoreClick(e),\n      type: \"button\",\n      tabindex: \"0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 715,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      className: \"icon\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 718,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faPlus,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 719,\n        columnNumber: 53\n      }\n    })), /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 721,\n        columnNumber: 49\n      }\n    }, this.props.intl.formatMessage({\n      id: \"IDS_ADDMORE\"\n    }))))))))), /*#__PURE__*/React.createElement(Col, {\n      md: 7,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 731,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(ContentPanel, {\n      className: \"panel-main-content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 732,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      className: \"my-2 \",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 733,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Card.Header, {\n      className: \"product-title-main\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 734,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(Card.Title, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 735,\n        columnNumber: 37\n      }\n    }, this.props.intl.formatMessage({\n      id: \"IDS_QUERYPARAMS\"\n    }))), /*#__PURE__*/React.createElement(Card.Body, {\n      className: \"api-card-body-scrollable-element\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 739,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(\"pre\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 741,\n        columnNumber: 37\n      }\n    }, this.showQueryParameter()), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"buttons is-right\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 742,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      className: \"btn-user btn-primary-blue\",\n      onClick: e => this.copyToClipboard(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 743,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      className: \"\",\n      icon: faCopy,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 744,\n        columnNumber: 45\n      }\n    }), '  ', this.props.intl.formatMessage({\n      id: \"IDS_COPYQUERYPARAMS\"\n    })))))), /*#__PURE__*/React.createElement(ContentPanel, {\n      className: \"panel-main-content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 751,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 752,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Card.Header, {\n      className: \"product-title-main\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 753,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(Card.Title, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 754,\n        columnNumber: 37\n      }\n    }, this.props.intl.formatMessage({\n      id: \"IDS_RESPONSE\"\n    }))), /*#__PURE__*/React.createElement(Card.Body, {\n      className: \"api-card-body\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 758,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(ReactJson, {\n      src: this.props.Login.masterData.consoleData && this.props.Login.masterData.consoleData,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 759,\n        columnNumber: 37\n      }\n    }))))))));\n  }\n\n  componentDidUpdate(previousProps) {\n    if (this.props.Login.masterData !== previousProps.Login.masterData) {\n      console.log(this.props.Login.masterData !== previousProps.Login.masterData);\n      let {\n        userRoleControlRights,\n        controlMap,\n        apiServiceList,\n        selectedRecord,\n        constructApiData,\n        lstQueryBuilder,\n        qualisList\n      } = { ...this.state\n      };\n\n      if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\n        if (this.props.Login.userRoleControlRights) {\n          this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item => userRoleControlRights.push(item.ncontrolcode));\n        }\n\n        controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode);\n      }\n\n      if (this.props.Login.masterData.lstApiService !== previousProps.Login.masterData.lstApiService) {\n        const apiServiceMap = constructOptionList(this.props.Login.masterData.lstApiService || [], \"napiservicecode\", \"sapiservicename\", \"nsorter\", \"ascending\", false);\n        apiServiceList = apiServiceMap.get(\"OptionList\");\n      }\n\n      if (this.props.Login.masterData.lstqueryForm !== previousProps.Login.masterData.lstqueryForm) {\n        const qualisMap = constructOptionList(this.props.Login.masterData.lstqueryForm || [], \"nformcode\", \"sdisplayname\", \"nsorter\", \"ascending\", false);\n        qualisList = qualisMap.get(\"OptionList\"); // this.setState({\n        //     qualisList\n        // });\n      }\n\n      if (this.props.Login.masterData.SelectedForm !== previousProps.Login.masterData.SelectedForm) {\n        if (this.props.Login.masterData.SelectedForm && this.props.Login.masterData.SelectedForm.value) {\n          constructApiData = [{\n            \"nformcode\": this.props.Login.masterData.SelectedForm.value\n          }, {\n            \"sformname\": this.props.Login.masterData.SelectedForm.label\n          }];\n        }\n\n        let constructData = this.props.Login.masterData.lstquerybilderColumns.map((item, index) => {\n          return {\n            label: item.scolumndisplayname,\n            value: index,\n            item: { ...item\n            }\n          };\n        });\n        lstQueryBuilder = constructData;\n        selectedRecord['filterNew'] = [];\n      }\n\n      this.setState({\n        userRoleControlRights,\n        controlMap,\n        apiServiceList,\n        selectedRecord,\n        constructApiData,\n        lstQueryBuilder,\n        qualisList\n      });\n    } // if (this.props.Login.masterData.lstqueryForm !== previousProps.Login.masterData.lstqueryForm) {\n    //     const qualisMap = constructOptionList(this.props.Login.masterData.lstqueryForm || [], \"nformcode\",\n    //         \"sdisplayname\", \"nsorter\", \"ascending\", false);\n    //     const qualisList = qualisMap.get(\"OptionList\")\n    //     this.setState({\n    //         qualisList\n    //     });\n    // }\n    // if (this.props.Login.masterData.SelectedForm !== previousProps.Login.masterData.SelectedForm) {\n    //     const constructApiData = [\n    //         { \"nformcode\": this.props.Login.masterData.SelectedForm.value },\n    //         { \"sformname\": this.props.Login.masterData.SelectedForm.label }\n    //     ]\n    //     let constructData = this.props.Login.masterData.lstquerybilderColumns.map((item, index) => {\n    //         return { label: item.scolumndisplayname, value: index, item: { ...item } }\n    //     })\n    //     this.setState({\n    //         constructApiData, lstQueryBuilder: constructData\n    //     });\n    // }\n\n\n    if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\n      this.setState({\n        selectedRecord: this.props.Login.selectedRecord\n      });\n    }\n  }\n\n  componentWillUnmount() {\n    const updateInfo = {\n      typeName: DEFAULT_RETURN,\n      data: {\n        masterData: [],\n        inputParam: undefined,\n        operation: null,\n        modalName: undefined\n      }\n    };\n    this.props.updateStore(updateInfo);\n  }\n\n}\n\nexport default connect(mapStateToProps, {\n  sendRequest,\n  getQualisFormsFields,\n  getQualisForms,\n  updateStore\n})(injectIntl(APIService));","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/pages/configurationmaster/APIService.jsx"],"names":["React","injectIntl","FormSelectSearch","getControlMap","constructOptionList","copyText","convertDateTimetoStringDBFormat","connect","Alert","Button","Card","Col","Form","Row","ListWrapper","FormTextarea","stringOperatorData","numericOperatorData","dateConditionData","FormInput","FormNumericInput","DateTimePicker","FontAwesomeIcon","faCopy","faMinus","faPlus","toast","ReactJson","sendRequest","getQualisFormsFields","getQualisForms","updateStore","ContentPanel","DEFAULT_RETURN","mapStateToProps","state","Login","APIService","Component","constructor","props","onInputOnChange","event","value","variant","target","type","constructApiData","selectedRecord","value1","name","undefined","toLowerCase","includes","index","indexOf","item","scolumn","indexcomma","slice","setState","constructApiDataString","map","e","JSON","stringify","replace","join","text","replaceAll","constructApiData1","parse","Object","keys","x","onComboChange","colunName","oldValue","map1","Map","userInfo","masterData","checkFilter","filterList","check","filterColumn","filterCondition","columndatatype","filterValue","push","length","onMoreClick","SelectedForm","lstQryColumn","removeSameRecordFromTwoDifferentArrays","lstQueryBuilder","warn","intl","formatMessage","id","onFilterInputOnChange","filterTableNewAddedList","change","changeData","splice","filterNew","onFilterNumericInputChange","handleDateChange","columnLabel","onfilterChange","comboValue","conditionType","filterValueType","onFilterModalDelete","childIndex","filterQueryFormation","str","strform","isjsoncolumn","ismultilingual","jsoncolumnname","slanguagetypecode","Date","copyToClipboard","copyParameter","info","SelectedApi","url","sapiservice","obj","sendObject","obj1","firstArray","secondArray","filterArray","Array","isArray","index1","y","findIndex","x1","firstArray1","firstArray2","showQueryParameter","returnString","values","newObject","object","consoleData","controlMap","userRoleControlRights","masterStatus","error","getDerivedStateFromProps","render","apiServiceList","qualisList","date","componentDidUpdate","previousProps","console","log","nformcode","ncontrolcode","lstApiService","apiServiceMap","get","lstqueryForm","qualisMap","label","constructData","lstquerybilderColumns","scolumndisplayname","componentWillUnmount","updateInfo","typeName","data","inputParam","operation","modalName"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { injectIntl } from 'react-intl';\r\nimport FormSelectSearch from '../../components/form-select-search/form-select-search.component';\r\nimport {\r\n    getControlMap, constructOptionList, copyText, convertDateTimetoStringDBFormat\r\n} from '../../components/CommonScript';\r\nimport { connect } from 'react-redux';\r\nimport { Alert, Button, Card, Col, Form, Row } from 'react-bootstrap';\r\nimport { ListWrapper } from '../../components/client-group.styles';\r\nimport FormTextarea from '../../components/form-textarea/form-textarea.component';\r\nimport {\r\n    stringOperatorData, numericOperatorData\r\n    , dateConditionData\r\n} from '../dashboard/SqlBuilderFilterType'\r\n\r\nimport FormInput from '../../components/form-input/form-input.component';\r\nimport FormNumericInput from '../../components/form-numeric-input/form-numeric-input.component';\r\nimport DateTimePicker from '../../components/date-time-picker/date-time-picker.component';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faCopy, faMinus, faPlus } from '@fortawesome/free-solid-svg-icons';\r\nimport { toast } from 'react-toastify';\r\nimport ReactJson from \"react-json-view\";\r\nimport { sendRequest, getQualisFormsFields, getQualisForms, updateStore } from \"../../actions\";\r\nimport { ContentPanel } from '../../components/App.styles';\r\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\r\n//import APIConsole from \"./APIConsole\"\r\n\r\nconst mapStateToProps = (state) => {\r\n    return { Login: state.Login };\r\n};\r\nclass APIService extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        //  this.console = React.createRef();\r\n        this.state = {\r\n            selectedRecord: {},\r\n            constructApiData: [],\r\n            consoleData: [],\r\n            controlMap: {},\r\n            userRoleControlRights: [],\r\n            masterStatus: \"\", error: \"\"\r\n        }\r\n    }\r\n\r\n    static getDerivedStateFromProps(props, state) {\r\n\r\n        if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\r\n            toast.warn(props.Login.masterStatus);\r\n            props.Login.masterStatus = \"\";\r\n        }\r\n\r\n        if (props.Login.error !== state.error) {\r\n            toast.error(props.Login.error)\r\n            props.Login.error = \"\";\r\n        }\r\n        return null;\r\n    }\r\n\r\n    onInputOnChange = (event, value, variant) => {\r\n        if (event.target.type === \"checkbox\") {\r\n            let constructApiData = this.state.constructApiData\r\n            const selectedRecord = this.state.selectedRecord;\r\n            // selectedRecord['check'] = label\r\n\r\n            // constructApiData={...constructApiData,[variant.item.scolumn]:\"\"}\r\n\r\n            const value1 = selectedRecord[event.target.name];\r\n            if (value1 !== '' && value1 !== undefined) {\r\n                if (value1.toLowerCase().includes(value.toLowerCase())) {\r\n                    const index = value1.toLowerCase().indexOf(value.toLowerCase());\r\n                    delete constructApiData[variant.item.scolumn]\r\n                    if (index !== -1) {\r\n                        if (index === 0) {\r\n                            const indexcomma = value1.indexOf(\",\")\r\n                            if (indexcomma !== -1) {\r\n                                selectedRecord[event.target.name] = value1.slice(indexcomma + 1)\r\n                            } else {\r\n                                selectedRecord[event.target.name] = \"\"\r\n                            }\r\n                        } else {\r\n                            if (value1.slice(index).indexOf(\",\") !== -1) {\r\n                                selectedRecord[event.target.name] = value1.slice(0, index) + value1.slice(index + value1.slice(index).indexOf(\",\") + 1)\r\n                            } else {\r\n                                selectedRecord[event.target.name] = value1.slice(0, index - 1)\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                } else {\r\n                    selectedRecord[event.target.name] = value1 + ',' + value;\r\n                    constructApiData = [...constructApiData, { [variant.item.scolumn]: \"\" }]\r\n                }\r\n            } else {\r\n                selectedRecord[event.target.name] = value1 + ',' + value;\r\n                constructApiData = [...constructApiData, { [variant.item.scolumn]: \"\" }]\r\n            }\r\n            this.setState({\r\n                selectedRecord, constructApiData,\r\n                constructApiDataString: constructApiData.map(e => JSON.stringify(e).replace(/{|}/g, '')).join(',\\n')\r\n            })\r\n        } else {\r\n            // const selectedRecord = this.state.selectedRecord;\r\n            let text = event.target.value.replaceAll('\\n', '')\r\n            text = text.replace(/\\s+/g, '');\r\n            let constructApiData1 = JSON.parse(text)\r\n            let constructApiData = Object.keys(constructApiData1).map(x => {\r\n                return { [x]: constructApiData1[x] }\r\n            })\r\n            this.setState({\r\n                constructApiData,\r\n                constructApiDataString: constructApiData.map(e => JSON.stringify(e).replace(/{|}/g, '')).join(',\\n'),\r\n            })\r\n        }\r\n\r\n    }\r\n\r\n    onComboChange = (event, colunName) => {\r\n        const selectedRecord = this.state.selectedRecord\r\n        const oldValue = { ...selectedRecord[colunName] }\r\n        selectedRecord[colunName] = event\r\n        const map1 = new Map();\r\n        map1['userinfo'] = this.props.Login.userInfo;\r\n        map1['selectedRecord'] = selectedRecord\r\n        map1['masterData'] = this.props.Login.masterData\r\n        if (colunName === 'napiservicecode') {\r\n            this.props.getQualisForms(map1)\r\n            // this.setState({ selectedRecord })\r\n        } else {\r\n            if (oldValue && oldValue.value !== event.value) {\r\n                this.props.getQualisFormsFields(map1)\r\n            }\r\n        }\r\n        //  this.setState({ selectedRecord })\r\n    }\r\n    checkFilter = (filterList) => {\r\n        let check = [];\r\n        filterList.map((item, index) => {\r\n            if (item.filterColumn) {\r\n                if (item.filterCondition) {\r\n                    if (item.filterColumn.item.columndatatype === 'string') {\r\n                        if (item.filterCondition.value === '='\r\n                            || item.filterCondition.value === 'IN'\r\n                            || item.filterCondition.value === 'NOT') {\r\n\r\n                            if (item.filterValue && item.filterValue !== \"\") {\r\n                                check.push(true)\r\n                            }\r\n\r\n                        }\r\n                        else {\r\n                            if (item.filterCondition) {\r\n                                check.push(true)\r\n                            }\r\n                        }\r\n                    }\r\n                    else if (item.filterColumn.item.columndatatype === 'numeric') {\r\n                        if (item.filterCondition.value === '='\r\n                            || item.filterCondition.value === '!=' ||\r\n                            item.filterCondition.value === '>' ||\r\n                            item.filterCondition.value === '<' ||\r\n                            item.filterCondition.value === '>=' ||\r\n                            item.filterCondition.value === '<='\r\n                        ) {\r\n                            if (item.filterValue && item.filterValue !== \"\") {\r\n                                check.push(true)\r\n                            }\r\n\r\n                        }\r\n                        else {\r\n                            if (item.filterCondition) {\r\n                                check.push(true)\r\n                            }\r\n                        }\r\n                    }\r\n                    else if (item.filterColumn.item.columndatatype === 'date') {\r\n                        if (item.filterCondition.value === '='\r\n                            || item.filterCondition.value === 'NOT'\r\n                        ) {\r\n\r\n                            if (item.filterValue && item.filterValue !== \"\") {\r\n                                check.push(true)\r\n                            }\r\n\r\n                        }\r\n                        else {\r\n                            if (item.filterCondition) {\r\n                                check.push(true)\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n        })\r\n        return check.length === filterList.length ? true : false;\r\n    }\r\n\r\n\r\n    onMoreClick = (e) => {\r\n        const selectedRecord = this.state.selectedRecord || {}\r\n        if (this.checkFilter(selectedRecord['filterNew'] || [])) {\r\n            if (this.props.Login.masterData.SelectedForm) {\r\n                if (selectedRecord['filterNew'] === undefined) {\r\n                    selectedRecord['filterNew'] = []\r\n                }\r\n                selectedRecord['filterNew'][selectedRecord['filterNew'].length] = {}\r\n\r\n                const lstQryColumn = this.removeSameRecordFromTwoDifferentArrays(this.state.lstQueryBuilder, selectedRecord['filterNew'])\r\n\r\n                if (lstQryColumn.length > 0) {\r\n                    this.setState({\r\n                        selectedRecord, lstQryColumn\r\n                    })\r\n                } else {\r\n                    toast.warn(this.props.intl.formatMessage({ id: \"IDS_COLUMNSNOTAVALIABLE\" }))\r\n                }\r\n            } else {\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTTHEFORM\" }))\r\n            }\r\n        } else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_PLEASEFILLTHEVALUE\" }))\r\n        }\r\n    }\r\n\r\n    onFilterInputOnChange = (event, index) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n      //  const constructApiData = this.state.constructApiData\r\n\r\n        const filterTableNewAddedList = [...selectedRecord['filterNew']]\r\n        const change = { ...filterTableNewAddedList[index], [event.target.name]: event.target.value }\r\n        const changeData = [...filterTableNewAddedList.splice(0, index), { ...change }, ...filterTableNewAddedList.splice(index + 1)]\r\n\r\n        // const index1 = constructApiData.findIndex(x => Object.keys(x).toString() === change.filterColumn.item.scolumn)\r\n\r\n        // if (index1 === -1) {\r\n        //     constructApiData.push({ [change.filterColumn.item.scolumn]: change.filterCondition.value + \" \" + change.filterValue })\r\n        // } else {\r\n        //     constructApiData[index1] = { [change.filterColumn.item.scolumn]: change.filterCondition.value + \" \" + change.filterValue }\r\n        // }\r\n\r\n\r\n        this.setState({ selectedRecord: { ...selectedRecord, filterNew: changeData } });\r\n    }\r\n\r\n    onFilterNumericInputChange = (value, name, index) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n     //   const constructApiData = this.state.constructApiData\r\n        const filterTableNewAddedList = [...selectedRecord['filterNew']]\r\n        const change = { ...filterTableNewAddedList[index], [name]: value }\r\n        // constructApiData.push({ [change.filterColumn.item.scolumn]: change.filterValue })\r\n        // const index1 = constructApiData.findIndex(x => Object.keys(x).toString() === change.filterColumn.item.scolumn)\r\n        // if (index1 === -1) {\r\n        //     constructApiData.push({ [change.filterColumn.item.scolumn]: change.filterCondition.value + \" \" + change.filterValue })\r\n        // } else {\r\n        //     constructApiData[index1] = { [change.filterColumn.item.scolumn]: change.filterCondition.value + \" \" + change.filterValue }\r\n        // }\r\n        const changeData = [...filterTableNewAddedList.splice(0, index), { ...change }, ...filterTableNewAddedList.splice(index + 1)]\r\n        this.setState({ selectedRecord: { ...selectedRecord, filterNew: changeData } });\r\n\r\n    }\r\n\r\n    handleDateChange = (columnLabel, value, index) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n       // const constructApiData = this.state.constructApiData\r\n        const filterTableNewAddedList = [...selectedRecord['filterNew']]\r\n        const change = { ...filterTableNewAddedList[index], [columnLabel]: value }\r\n       // const index1 = constructApiData.findIndex(x => Object.keys(x).toString() === change.filterColumn.item.scolumn)\r\n        // if (index1 === -1) {\r\n        //     constructApiData.push({ [change.filterColumn.item.scolumn]: change.filterCondition.value + \" \" + change.filterValue })\r\n        // } else {\r\n        //     constructApiData[index1] = { [change.filterColumn.item.scolumn]: change.filterCondition.value + \" \" + change.filterValue }\r\n        // }\r\n        const changeData = [...filterTableNewAddedList.splice(0, index), { ...change }, ...filterTableNewAddedList.splice(index + 1)]\r\n        this.setState({ selectedRecord: { ...selectedRecord, filterNew: changeData } });\r\n    }\r\n\r\n    onfilterChange = (comboValue, columnLabel, conditionType, index) => {\r\n        const selectedRecord = this.state.selectedRecord;\r\n\r\n        if (conditionType === 'column') {\r\n            const filterTableNewAddedList = [...selectedRecord['filterNew']]\r\n            const change = {\r\n                ...filterTableNewAddedList[index], [columnLabel]: comboValue,\r\n                filterCondition: undefined, filterValueType: undefined, filterValue: undefined\r\n            }\r\n            const changeData = [...filterTableNewAddedList.splice(0, index), { ...change }, ...filterTableNewAddedList.splice(index + 1)]\r\n            this.setState({ selectedRecord: { ...selectedRecord, filterNew: changeData } })\r\n        }\r\n        else if (conditionType === 'condition') {\r\n            const filterTableNewAddedList = [...selectedRecord['filterNew']]\r\n            const change = { ...filterTableNewAddedList[index], [columnLabel]: comboValue }\r\n            const changeData = [...filterTableNewAddedList.splice(0, index), { ...change, filterValue: undefined }, ...filterTableNewAddedList.splice(index + 1)]\r\n            // let constructApiData = this.state.constructApiData\r\n            // if (change[\"filterCondition\"].value === 'IS NULL' ||\r\n            //     change[\"filterCondition\"].value === 'IS NOT NULL' ||\r\n            //     change[\"filterCondition\"].value === 'PRESENT' ||\r\n            //     change[\"filterCondition\"].value === 'BLANK' ||\r\n            //     change[\"filterCondition\"].value !== 'NULL' ||\r\n            //     change[\"filterCondition\"].value !== 'NOT NULL' ||\r\n            //     change[\"filterCondition\"].value === 'IN') {\r\n            //     // constructApiData.push({ [change.filterColumn.item.scolumn]: change.filterCondition.value })\r\n\r\n            //     const index1 = constructApiData.findIndex(x => Object.keys(x).toString() === change.filterColumn.item.scolumn)\r\n            //     if (index1 === -1) {\r\n            //         constructApiData.push({ [change.filterColumn.item.scolumn]: change.filterCondition.value })\r\n            //     } else {\r\n            //         constructApiData[index1] = { [change.filterColumn.item.scolumn]: change.filterCondition.value }\r\n            //     }\r\n\r\n            // }\r\n            // else if(change[\"filterColumn\"].item.columndatatype === 'date'&& \r\n            // (change.filterCondition.value === '=' || change.filterCondition.value === '<' \r\n            // || change.filterCondition.value === '>')){\r\n\r\n            //     const index1 = constructApiData.findIndex(x => Object.keys(x).toString() === change.filterColumn.item.scolumn)\r\n            //     if (index1 === -1) {\r\n            //         constructApiData.push({ [change.filterColumn.item.scolumn]: change.filterCondition.value+\" '\"+convertDateTimetoStringDBFormat(new Date(),this.props.Login.userInfo)+\"'\" })\r\n            //     } else {\r\n            //         constructApiData[index1] = { [change.filterColumn.item.scolumn]: change.filterCondition.value+\" '\"+convertDateTimetoStringDBFormat(new Date(),this.props.Login.userInfo)+\"'\"  }\r\n            //     }\r\n\r\n            // }\r\n            // else if(change[\"filterColumn\"].item.columndatatype === 'date'&& \r\n            //  (item.filterCondition.value === 'NOT')){\r\n\r\n\r\n            //     const index1 = constructApiData.findIndex(x => Object.keys(x).toString() === change.filterColumn.item.scolumn)\r\n            //     if (index1 === -1) {\r\n            //         constructApiData.push({ [change.filterColumn.item.scolumn]: change.filterCondition.value+\" '\"+convertDateTimetoStringDBFormat(new Date(),this.props.Login.userInfo)+\"'\" })\r\n            //     } else {\r\n            //         constructApiData[index1] = { [change.filterColumn.item.scolumn]: change.filterCondition.value+\" '\"+convertDateTimetoStringDBFormat(new Date(),this.props.Login.userInfo)+\"'\"  }\r\n            //     }\r\n            // }\r\n\r\n\r\n            this.setState({ selectedRecord: { ...selectedRecord, filterNew: changeData } })\r\n        }\r\n\r\n    }\r\n\r\n    onFilterModalDelete = (childIndex) => {\r\n        // let constructApiData1 = [{ ...this.state.constructApiData[0] }, { ...this.state.constructApiData[1] }]\r\n        // let constructApiData2 = [...this.state.constructApiData]\r\n        // constructApiData2 = constructApiData2.splice(2)\r\n        // constructApiData2 = constructApiData2.splice(0, childIndex)\r\n        // let constructApiData3 = [...this.state.constructApiData]\r\n        // constructApiData3 = constructApiData3.splice(2)\r\n        // constructApiData3 = constructApiData3.splice(childIndex + 1)\r\n        const selectedRecord = this.state.selectedRecord;\r\n        selectedRecord['filterNew'] = [...selectedRecord['filterNew'].slice(0, childIndex), ...selectedRecord['filterNew'].slice(childIndex + 1)]\r\n       // constructApiData1 = [...constructApiData1, ...constructApiData2, ...constructApiData3]\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    filterQueryFormation = (selectedRecord) => {\r\n        let str = \"\";\r\n        let strform = \"\";\r\n        selectedRecord['filterNew'] && selectedRecord['filterNew'].length > 0 && selectedRecord['filterNew'].map((item, index) => {\r\n            if (item.filterCondition) {\r\n                if (item.filterCondition.value === 'IN') {\r\n\r\n                    str = str + (item.filterColumn.item.isjsoncolumn ?\r\n                        item.filterColumn.item.ismultilingual ?\r\n                            item.filterColumn.item.jsoncolumnname + \"->'\" + item.filterColumn.item.scolumn + \"'->>'\" + this.props.Login.userInfo.slanguagetypecode + \"'\"\r\n                            : item.filterColumn.item.jsoncolumnname + \"->>'\" + item.filterColumn.item.scolumn + \"'\"\r\n                        : \"\\\"\" + item.filterColumn.item.scolumn + \"\\\"\") + \" \" + item.filterCondition.value + \" ('\" + (item.filterValue ? item.filterValue : \"\") + \"') \"\r\n\r\n                }\r\n                else if (item.filterCondition.value === 'PRESENT') {\r\n\r\n                    str = str + \" NOT \" + (item.filterColumn.item.isjsoncolumn ?\r\n                        item.filterColumn.item.ismultilingual ?\r\n                            item.filterColumn.item.jsoncolumnname + \"->'\" + item.filterColumn.item.scolumn + \"'->>'\" + this.props.Login.userInfo.slanguagetypecode + \"'\"\r\n                            : item.filterColumn.item.jsoncolumnname + \"->>'\" + item.filterColumn.item.scolumn + \"'\"\r\n                        : \"\\\"\" + item.filterColumn.item.scolumn + \"\\\"\") + \" ='' \"\r\n\r\n                }\r\n                else if (item.filterCondition.value === 'BLANK') {\r\n\r\n                    str = str + (item.filterColumn.item.isjsoncolumn ?\r\n                        item.filterColumn.item.ismultilingual ?\r\n                            item.filterColumn.item.jsoncolumnname + \"->'\" + item.filterColumn.item.scolumn + \"'->>'\" + this.props.Login.userInfo.slanguagetypecode + \"'\"\r\n                            : item.filterColumn.item.jsoncolumnname + \"->>'\" + item.filterColumn.item.scolumn + \"'\"\r\n                        : \"\\\"\" + item.filterColumn.item.scolumn + \"\\\"\") + \" ='' \"\r\n\r\n                }\r\n                else if (item.filterCondition.value === 'NULL'\r\n                    || item.filterCondition.value === 'NOT NULL') {\r\n\r\n                    str = str + (item.filterColumn.item.isjsoncolumn ?\r\n                        item.filterColumn.item.ismultilingual ?\r\n                            item.filterColumn.item.jsoncolumnname + \"->'\" + item.filterColumn.item.scolumn + \"'->>'\" + this.props.Login.userInfo.slanguagetypecode + \"'\"\r\n                            : item.filterColumn.item.jsoncolumnname + \"->>'\" + item.filterColumn.item.scolumn + \"'\"\r\n                        : \"\\\"\" + item.filterColumn.item.scolumn + \"\\\"\") + \" IS '\" + item.filterCondition.value + \"' \"\r\n\r\n                }\r\n                else if (item.filterCondition.value === 'IS NULL') {\r\n\r\n                    str = str + (item.filterColumn.item.isjsoncolumn ?\r\n                        item.filterColumn.item.ismultilingual ?\r\n                            item.filterColumn.item.jsoncolumnname + \"->'\" + item.filterColumn.item.scolumn + \"'->>'\" + this.props.Login.userInfo.slanguagetypecode + \"'\"\r\n                            : item.filterColumn.item.jsoncolumnname + \"->>'\" + item.filterColumn.item.scolumn + \"'\"\r\n                        : \"\\\"\" + item.filterColumn.item.scolumn + \"\\\"\") + \" \" + item.filterCondition.value + \" \"\r\n\r\n                }\r\n                else if (item.filterCondition.value === 'IS NOT NULL') {\r\n\r\n                    str = str + (item.filterColumn.item.isjsoncolumn ?\r\n                        item.filterColumn.item.ismultilingual ?\r\n                            item.filterColumn.item.jsoncolumnname + \"->'\" + item.filterColumn.item.scolumn + \"'->>'\" + this.props.Login.userInfo.slanguagetypecode + \"'\"\r\n                            : item.filterColumn.item.jsoncolumnname + \"->>'\" + item.filterColumn.item.scolumn + \"'\"\r\n                        : \"\\\"\" + item.filterColumn.item.scolumn + \"\\\"\") + \" \" + item.filterCondition.value + \" \"\r\n\r\n                }\r\n                else if (item.filterCondition.value === 'STARTS WITH') {\r\n                    str = str + (item.filterColumn.item.isjsoncolumn ?\r\n                        item.filterColumn.item.ismultilingual ?\r\n                            item.filterColumn.item.jsoncolumnname + \"->'\" + item.filterColumn.item.scolumn + \"'->>'\" + this.props.Login.userInfo.slanguagetypecode + \"'\"\r\n                            : item.filterColumn.item.jsoncolumnname + \"->>'\" + item.filterColumn.item.scolumn + \"'\"\r\n                        : \"\\\"\" + item.filterColumn.item.scolumn + \"\\\"\") + \"ILIKE\" + \" '\" + (item.filterValue ? item.filterValue : \"\") + \"%' collate \\\"default\\\"\"\r\n                }\r\n                else if (item.filterCondition.value === 'ENDS WITH') {\r\n                    str = str + (item.filterColumn.item.isjsoncolumn ?\r\n                        item.filterColumn.item.ismultilingual ?\r\n                            item.filterColumn.item.jsoncolumnname + \"->'\" + item.filterColumn.item.scolumn + \"'->>'\" + this.props.Login.userInfo.slanguagetypecode + \"'\"\r\n                            : item.filterColumn.item.jsoncolumnname + \"->>'\" + item.filterColumn.item.scolumn + \"'\"\r\n                        : \"\\\"\" + item.filterColumn.item.scolumn + \"\\\"\") + \"ILIKE\" + \" '%\" + (item.filterValue ? item.filterValue : \"\") + \"' collate \\\"default\\\"\"\r\n                }\r\n                else if (item.filterCondition.value === 'CONTAINS') {\r\n                    str = str + (item.filterColumn.item.isjsoncolumn ?\r\n                        item.filterColumn.item.ismultilingual ?\r\n                            item.filterColumn.item.jsoncolumnname + \"->'\" + item.filterColumn.item.scolumn + \"'->>'\" + this.props.Login.userInfo.slanguagetypecode + \"'\"\r\n                            : item.filterColumn.item.jsoncolumnname + \"->>'\" + item.filterColumn.item.scolumn + \"'\"\r\n                        : \"\\\"\" + item.filterColumn.item.scolumn + \"\\\"\") + \"ILIKE\" + \" '\" + (item.filterValue ? item.filterValue : \"\") + \"%' collate \\\"default\\\"\"\r\n                }\r\n                else if (item.filterColumn.item.columndatatype === 'date' && (item.filterCondition.value === '=' || item.filterCondition.value === '<' || item.filterCondition.value === '>')) {\r\n                    str = str + (item.filterColumn.item.isjsoncolumn ?\r\n                        item.filterColumn.item.ismultilingual ?\r\n                            item.filterColumn.item.jsoncolumnname + \"->'\" + item.filterColumn.item.scolumn + \"'->>'\" + this.props.Login.userInfo.slanguagetypecode + \"'\"\r\n                            : item.filterColumn.item.jsoncolumnname + \"->>'\" + item.filterColumn.item.scolumn + \"'\"\r\n                        : \"\\\"\" + item.filterColumn.item.scolumn + \"\\\"\") + \" \" + item.filterCondition.value + (\"'\" + (item.filterValue ? convertDateTimetoStringDBFormat(item.filterValue, this.props.Login.userInfo) : convertDateTimetoStringDBFormat(new Date(), this.props.Login.userInfo)) + \"' \")\r\n                }\r\n\r\n                else if (item.filterColumn.item.columndatatype === 'date' && (item.filterCondition.value === 'NOT')) {\r\n                    str = str + \"(NOT \" + (item.filterColumn.item.isjsoncolumn ?\r\n                        item.filterColumn.item.ismultilingual ?\r\n                            item.filterColumn.item.jsoncolumnname + \"->'\" + item.filterColumn.item.scolumn + \"'->>'\" + this.props.Login.userInfo.slanguagetypecode + \"'\"\r\n                            : item.filterColumn.item.jsoncolumnname + \"->>'\" + item.filterColumn.item.scolumn + \"'\"\r\n                        : \"\\\"\" + item.filterColumn.item.scolumn + \"\\\"\") + \" = \" + (\"'\" + (item.filterValue ? convertDateTimetoStringDBFormat(item.filterValue, this.props.Login.userInfo) : convertDateTimetoStringDBFormat(new Date(), this.props.Login.userInfo)) + \"')\")\r\n                }\r\n                else if (item.filterColumn.item.columndatatype === 'string' && (item.filterCondition.value === 'NOT')) {\r\n                    str = str + \"(NOT \" + (item.filterColumn.item.isjsoncolumn ?\r\n                        item.filterColumn.item.ismultilingual ?\r\n                            item.filterColumn.item.jsoncolumnname + \"->'\" + item.filterColumn.item.scolumn + \"'->>'\" + this.props.Login.userInfo.slanguagetypecode + \"'\"\r\n                            : item.filterColumn.item.jsoncolumnname + \"->>'\" + item.filterColumn.item.scolumn + \"'\"\r\n                        : \"\\\"\" + item.filterColumn.item.scolumn + \"\\\"\") + \" = \" + (\"'\" + item.filterValue ? item.filterValue : \"\" + \"')\")\r\n                }\r\n                else {\r\n                    str = str + \" \" + (item.filterColumn.item.isjsoncolumn ?\r\n                        item.filterColumn.item.ismultilingual ?\r\n                            item.filterColumn.item.jsoncolumnname + \"->'\" + item.filterColumn.item.scolumn + \"'->>'\" + this.props.Login.userInfo.slanguagetypecode + \"'\"\r\n                            : item.filterColumn.item.jsoncolumnname + \"->>'\" + item.filterColumn.item.scolumn + \"'\"\r\n                        : \"\\\"\" + item.filterColumn.item.scolumn + \"\\\"\") + \" \" + item.filterCondition.value + (\"'\" + (item.filterValue ? item.filterValue : \"\") + \"' \")\r\n                }\r\n\r\n                if (index !== selectedRecord['filterNew'].length - 1) {\r\n                    str = str + \" and \";\r\n                }\r\n            }\r\n            //  })\r\n        })\r\n        strform = strform + \" \" + str\r\n        return strform;\r\n    }\r\n\r\n\r\n\r\n    copyToClipboard = () => {\r\n        copyText(this.copyParameter())\r\n        toast.info(this.props.intl.formatMessage({ id: \"IDS_COPIEDSUCCESSFULLY\" }))\r\n    }\r\n\r\n\r\n    sendRequest = () => {\r\n        const selectedRecord = this.state.selectedRecord;\r\n        if (this.props.Login.masterData.SelectedApi) {\r\n            if (this.props.Login.masterData.SelectedForm) {\r\n                const url = this.props.Login.masterData.SelectedApi.item.sapiservice\r\n                let obj = this.sendObject()\r\n                let obj1 = { \"inputData\": obj, url, masterData: this.props.Login.masterData }\r\n                this.props.sendRequest(obj1)\r\n            } else {\r\n                toast.info(this.props.intl.formatMessage({ id: \"IDS_SELECTTHEFORM\" }))\r\n            }\r\n        } else {\r\n            toast.info(this.props.intl.formatMessage({ id: \"IDS_SELECTTHEAPI\" }))\r\n        }\r\n    }\r\n\r\n\r\n    removeSameRecordFromTwoDifferentArrays = (firstArray, secondArray) => {\r\n        let filterArray = []\r\n        if (Array.isArray(secondArray) && secondArray.length > 0) {\r\n            secondArray.map((x, index1) => {\r\n                firstArray.map(y => {\r\n                    if (x.filterColumn) {\r\n                        if (x.filterColumn.item.scolumn === y.item.scolumn) {\r\n                            const index = firstArray.findIndex(x1 => x1.item.scolumn === y.item.scolumn)\r\n                            let firstArray1 = [...firstArray];\r\n                            firstArray1 = [...firstArray1.splice(0, index)];\r\n\r\n                            let firstArray2 = [...firstArray];\r\n                            firstArray2 = [...firstArray2.splice(index + 1)];\r\n                            filterArray = [...firstArray1, ...firstArray2]\r\n                            firstArray = [...filterArray]\r\n                        }\r\n                    } else {\r\n                        if (index1 === 0) {\r\n                            filterArray = [...firstArray]\r\n                        }\r\n\r\n                    }\r\n                })\r\n            })\r\n        } else {\r\n            filterArray = [...firstArray];\r\n        }\r\n        return filterArray;\r\n\r\n    }\r\n\r\n    render() {\r\n        return (<>\r\n            <ListWrapper className=\"client-list-content\">\r\n                <Row noGutters>\r\n                    <Col md={5} className=\"pr-3\">\r\n                        <Row>\r\n                            <Col md={9}>\r\n                                <FormSelectSearch\r\n                                    name={\"napiservicecode\"}\r\n                                    formLabel={this.props.intl.formatMessage({ id: \"IDS_API\" })}\r\n                                    placeholder={this.props.intl.formatMessage({ id: \"IDS_SELECTRECORD\" })}\r\n                                    options={this.state.apiServiceList || []}\r\n                                    value={this.props.Login.masterData.SelectedApi && this.props.Login.masterData.SelectedApi}\r\n                                    isMandatory={true}\r\n                                    isClearable={false}\r\n                                    isMulti={false}\r\n                                    isSearchable={false}\r\n                                    closeMenuOnSelect={true}\r\n                                    onChange={(event) => this.onComboChange(event, 'napiservicecode')}\r\n                                />\r\n                            </Col>\r\n                            <Col md={1}>\r\n                                <Button className='btn-user btn-primary-blue' onClick={(e) => this.sendRequest()}>\r\n                                    {this.props.intl.formatMessage({ id: \"IDS_SENT\" })}\r\n                                </Button>\r\n                            </Col>\r\n                        </Row>\r\n                        <Row noGutters>\r\n                            <Col md={9}>\r\n                                <FormSelectSearch\r\n                                    name={\"nformcode\"}\r\n                                    formLabel={this.props.intl.formatMessage({ id: \"IDS_FORMS\" })}\r\n                                    placeholder={this.props.intl.formatMessage({ id: \"IDS_SELECTRECORD\" })}\r\n                                    options={this.state.qualisList || []}\r\n                                    value={this.props.Login.masterData.SelectedForm && this.props.Login.masterData.SelectedForm}\r\n                                    isMandatory={true}\r\n                                    isClearable={false}\r\n                                    isMulti={false}\r\n                                    isSearchable={false}\r\n                                    closeMenuOnSelect={true}\r\n                                    onChange={(event) => this.onComboChange(event, 'nformcode')}\r\n                                />\r\n                            </Col>\r\n                        </Row>\r\n                        <Card className='api-filter-condition-card'>\r\n                            <Card.Body>\r\n                                <form>\r\n                                    <section className={'modal-card-body'}>\r\n                                        {this.state.selectedRecord['filterNew'] && this.state.selectedRecord['filterNew'].map((item, index) => {\r\n                                            return <div className={'field has-addons filterheight'}>\r\n                                                <div class=\"control is-expanded\">\r\n                                                    <div class=\"select is-fullwidth\">\r\n                                                        <FormSelectSearch\r\n                                                            formGroupClassName=\"remove-floating-label-margin\"\r\n                                                            formLabel={this.props.intl.formatMessage({ id: \"IDS_FIELDS\" })}\r\n                                                            isSearchable={true}\r\n                                                            name={\"filterColumn\"}\r\n                                                            placeholder={this.props.intl.formatMessage({ id: \"IDS_FIELDS\" })}\r\n                                                            showOption={true}\r\n                                                            options={this.state.lstQryColumn || []}\r\n                                                            value={item[\"filterColumn\"] && item[\"filterColumn\"] || \"\"}\r\n                                                            onChange={value => this.onfilterChange(value, \"filterColumn\", 'column', index)}\r\n                                                        ></FormSelectSearch>\r\n                                                    </div>\r\n                                                </div>\r\n                                                <div class=\"control is-expanded\">\r\n                                                    <div class=\"select is-fullwidth\">\r\n                                                        <FormSelectSearch\r\n                                                            formGroupClassName=\"remove-floating-label-margin\"\r\n                                                            formLabel={this.props.intl.formatMessage({ id: \"IDS_CONDITION\" })}\r\n                                                            isSearchable={true}\r\n                                                            name={\"sviewname\"}\r\n                                                            placeholder={this.props.intl.formatMessage({ id: \"IDS_CONDITION\" })}\r\n                                                            showOption={true}\r\n                                                            options={item[\"filterColumn\"] && item[\"filterColumn\"].item ?\r\n                                                                item[\"filterColumn\"].item.columndatatype === 'string' ?\r\n                                                                    stringOperatorData :\r\n                                                                    item[\"filterColumn\"].item.columndatatype === 'numeric' ?\r\n                                                                        numericOperatorData\r\n                                                                        : item[\"filterColumn\"].item.columndatatype === 'date' ?\r\n                                                                            dateConditionData\r\n                                                                            : stringOperatorData : \"\"}\r\n\r\n                                                            value={item[\"filterCondition\"] !== undefined ? item[\"filterCondition\"] : \"\"}\r\n                                                            onChange={value => this.onfilterChange(value, \"filterCondition\", 'condition', index)}\r\n                                                        ></FormSelectSearch>\r\n                                                    </div>\r\n                                                </div>\r\n\r\n                                                <div className={\"control \"}>\r\n                                                    {(item[\"filterCondition\"] && item[\"filterCondition\"].value\r\n                                                        && item[\"filterColumn\"]) ?\r\n                                                        item[\"filterColumn\"].item.columndatatype === 'string' ?\r\n                                                            (item[\"filterCondition\"].value !== 'IS NULL' &&\r\n                                                                item[\"filterCondition\"].value !== 'IS NOT NULL' &&\r\n                                                                item[\"filterCondition\"].value !== 'PRESENT' &&\r\n                                                                item[\"filterCondition\"].value !== 'BLANK') ?\r\n                                                                <FormInput\r\n                                                                    label={this.props.intl.formatMessage({ id: \"IDS_VALUE\" })}\r\n                                                                    name=\"filterValue\"\r\n                                                                    type=\"text\"\r\n                                                                    onChange={(event) => this.onFilterInputOnChange(event, index)}\r\n                                                                    placeholder={this.props.intl.formatMessage({ id: \"IDS_VALUE\" })}\r\n                                                                    value={item[\"filterValue\"] ? item[\"filterValue\"] : \"\"}\r\n                                                                    isMandatory={true}\r\n                                                                    required={true}\r\n                                                                    maxLength={100}\r\n                                                                /> : \"\"\r\n                                                            :\r\n                                                            item[\"filterColumn\"].item.columndatatype === 'numeric' ?\r\n                                                                (item[\"filterCondition\"].value !== 'NULL' &&\r\n                                                                    item[\"filterCondition\"].value !== 'NOT NULL') ?\r\n                                                                    item[\"filterCondition\"].value === 'IN' ?\r\n                                                                        <FormInput\r\n                                                                            label={this.props.intl.formatMessage({ id: \"IDS_VALUE\" })}\r\n                                                                            name=\"filterValue\"\r\n                                                                            type=\"text\"\r\n                                                                            onChange={(event) => this.onFilterInputOnChange(event, index)}\r\n                                                                            placeholder={this.props.intl.formatMessage({ id: \"IDS_VALUE\" })}\r\n                                                                            value={item[\"filterValue\"] ? item[\"filterValue\"] : \"\"}\r\n                                                                            isMandatory={true}\r\n                                                                            required={true}\r\n                                                                            maxLength={100}\r\n                                                                        />\r\n                                                                        :\r\n                                                                        <FormNumericInput\r\n                                                                            name={\"filterValue\"}\r\n                                                                            label={this.props.intl.formatMessage({ id: \"IDS_VALUE\" })}\r\n                                                                            type=\"number\"\r\n                                                                            value={item[\"filterValue\"]}\r\n                                                                            placeholder={this.props.intl.formatMessage({ id: \"IDS_VALUE\" })}\r\n                                                                            strict={true}\r\n                                                                            //min={0}\r\n                                                                            //max={99999999.99}\r\n                                                                            maxLength={10}\r\n                                                                            onChange={(value) => this.onFilterNumericInputChange(value, \"filterValue\", index)}\r\n                                                                            noStyle={true}\r\n                                                                            //precision={2}\r\n                                                                            //isMandatory={true}\r\n                                                                            className=\"form-control\"\r\n                                                                            errors=\"Please provide a valid number.\"\r\n                                                                        />\r\n\r\n                                                                    : \"\"\r\n                                                                : item[\"filterColumn\"].item.columndatatype === 'date' ?\r\n                                                                    (item[\"filterCondition\"].value === '=' ||\r\n                                                                        item[\"filterCondition\"].value === '<'\r\n                                                                        || item[\"filterCondition\"].value === '>'\r\n                                                                        || item[\"filterCondition\"].value === 'NOT'\r\n                                                                    ) ?\r\n                                                                        <DateTimePicker\r\n                                                                            name={\"filterValue\"}\r\n                                                                            label={this.props.intl.formatMessage({ id: \"IDS_VALUE\" })}\r\n                                                                            className='form-control'\r\n                                                                            placeholderText={this.props.intl.formatMessage({ id: \"IDS_SELECTDATE\" })}\r\n                                                                            selected={item[\"filterValue\"] ? item[\"filterValue\"] : new Date()}\r\n                                                                            dateFormat={this.props.Login.userInfo[\"ssitedatetime\"]}\r\n                                                                            timeInputLabel={this.props.intl.formatMessage({ id: \"IDS_TIME\" })}\r\n                                                                            showTimeInput={true}\r\n                                                                            onChange={date => this.handleDateChange(\"filterValue\", date, index)}\r\n                                                                            value={item[\"filterValue\"] ? item[\"filterValue\"] : \"\"}\r\n                                                                        />\r\n                                                                        : \"\"\r\n                                                                    : \"\"\r\n                                                        : \"\"\r\n\r\n\r\n                                                    }\r\n                                                </div>\r\n                                                <div className={\"control\"}>\r\n                                                    {this.state.selectedRecord['filterNew'].length > 0 &&\r\n                                                        <Button className={\"button is-light is-danger\"}\r\n                                                            onClick={() => this.onFilterModalDelete(index)}\r\n                                                            type=\"button\" tabindex=\"0\">\r\n                                                            <span className={\"icon\"}>\r\n                                                                <FontAwesomeIcon icon={faMinus} />\r\n                                                            </span>\r\n                                                        </Button>\r\n                                                    }\r\n                                                </div>\r\n                                            </div>\r\n                                        })}\r\n                                        <div className={'buttons is-right'}>\r\n                                            <Button className={'button is-light is-info is-small'}\r\n                                                onClick={(e) => this.onMoreClick(e)} type=\"button\" tabindex=\"0\">\r\n\r\n                                                <span className={\"icon\"}>\r\n                                                    <FontAwesomeIcon icon={faPlus} />\r\n                                                </span>\r\n                                                <span>{this.props.intl.formatMessage({ id: \"IDS_ADDMORE\" })}</span>\r\n                                            </Button>\r\n                                        </div>\r\n\r\n                                    </section>\r\n                                </form >\r\n\r\n                            </Card.Body>\r\n                        </Card>\r\n                    </Col>\r\n                    <Col md={7}>\r\n                        <ContentPanel className=\"panel-main-content\" >\r\n                            <Card className='my-2 ' >\r\n                                <Card.Header className=\"product-title-main\">\r\n                                    <Card.Title>\r\n                                        {this.props.intl.formatMessage({ id: \"IDS_QUERYPARAMS\" })}\r\n                                    </Card.Title>\r\n                                </Card.Header>\r\n                                <Card.Body className='api-card-body-scrollable-element'>\r\n                                    {/* <pre style={{ \"height\": \"200px\", \"overflow\": \"scroll\" }}>{\"{\\n\"}{this.state.constructApiData.map(e => JSON.stringify(e, null, 2).replace(/{|}/g, ''))}{\"\\n}\"}</pre> */}\r\n                                    <pre>{this.showQueryParameter()}</pre>\r\n                                    <div className='buttons is-right'>\r\n                                        <Button className='btn-user btn-primary-blue' onClick={(e) => this.copyToClipboard()}>\r\n                                            <FontAwesomeIcon className='' icon={faCopy}></FontAwesomeIcon>{'  '}\r\n                                            {this.props.intl.formatMessage({ id: \"IDS_COPYQUERYPARAMS\" })}\r\n                                        </Button>\r\n                                    </div>\r\n                                </Card.Body>\r\n                            </Card>\r\n                        </ContentPanel>\r\n                        <ContentPanel className=\"panel-main-content\" >\r\n                            <Card >\r\n                                <Card.Header className=\"product-title-main\">\r\n                                    <Card.Title>\r\n                                        {this.props.intl.formatMessage({ id: \"IDS_RESPONSE\" })}\r\n                                    </Card.Title>\r\n                                </Card.Header>\r\n                                <Card.Body className='api-card-body'>\r\n                                    <ReactJson src={this.props.Login.masterData.consoleData && this.props.Login.masterData.consoleData} />\r\n                                </Card.Body>\r\n                            </Card>\r\n                        </ContentPanel>\r\n\r\n                    </Col>\r\n                </Row>\r\n            </ListWrapper>\r\n        </>)\r\n    }\r\n\r\n    showQueryParameter = () => {\r\n     //   let newObject = {}\r\n        let returnString = \"{\";\r\n        this.state.constructApiData.map((e, index) => {\r\n            if (index < 2) {\r\n                returnString = returnString + \" \\n \\\"\" + Object.keys(e) + \"\\\":\\\"\" + Object.values(e)+\"\\\"\"\r\n            }\r\n\r\n        })\r\n        let text = this.filterQueryFormation(this.state.selectedRecord)\r\n\r\n        returnString = returnString + \"\\n\" + \" \\\"whereCondition\\\":\\\"\" + text+\"\\\"\\n}\"\r\n        // const object = {\r\n        //     ...newObject,\r\n        //     \"whereCondition\": text\r\n        // }\r\n\r\n        return returnString;\r\n    }\r\n\r\n    copyParameter = () => {\r\n        let newObject = {}\r\n        this.state.constructApiData.map((e, index) => {\r\n            if (index < 2) {\r\n                newObject = {\r\n                    ...newObject,\r\n                    ...e\r\n                }\r\n            }\r\n\r\n        })\r\n        let text = this.filterQueryFormation(this.state.selectedRecord)\r\n        const object = {\r\n            ...newObject,\r\n            \"whereCondition\": text\r\n        }\r\n\r\n        return JSON.stringify(object);\r\n    }\r\n\r\n    sendObject = () => {\r\n        let newObject = {}\r\n        this.state.constructApiData.map(e => {\r\n            newObject = {\r\n                ...newObject,\r\n                ...e\r\n            }\r\n        })\r\n        let text = this.filterQueryFormation(this.state.selectedRecord)\r\n        const object = {\r\n            ...newObject,\r\n            \"whereCondition\": text\r\n        }\r\n\r\n        return object;\r\n    }\r\n\r\n    componentDidUpdate(previousProps) {\r\n        if (this.props.Login.masterData !== previousProps.Login.masterData) {\r\n            console.log(this.props.Login.masterData !== previousProps.Login.masterData)\r\n            let { userRoleControlRights, controlMap, apiServiceList,\r\n                selectedRecord, constructApiData, lstQueryBuilder, qualisList\r\n            } = { ...this.state }\r\n\r\n            if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\r\n                if (this.props.Login.userRoleControlRights) {\r\n                    this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item =>\r\n                        userRoleControlRights.push(item.ncontrolcode))\r\n                }\r\n                controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode)\r\n            }\r\n\r\n            if (this.props.Login.masterData.lstApiService !== previousProps.Login.masterData.lstApiService) {\r\n                const apiServiceMap = constructOptionList(this.props.Login.masterData.lstApiService || [], \"napiservicecode\",\r\n                    \"sapiservicename\", \"nsorter\", \"ascending\", false);\r\n                apiServiceList = apiServiceMap.get(\"OptionList\")\r\n            }\r\n\r\n            if (this.props.Login.masterData.lstqueryForm !== previousProps.Login.masterData.lstqueryForm) {\r\n                const qualisMap = constructOptionList(this.props.Login.masterData.lstqueryForm || [], \"nformcode\",\r\n                    \"sdisplayname\", \"nsorter\", \"ascending\", false);\r\n                qualisList = qualisMap.get(\"OptionList\")\r\n                // this.setState({\r\n                //     qualisList\r\n                // });\r\n            }\r\n\r\n            if (this.props.Login.masterData.SelectedForm !== previousProps.Login.masterData.SelectedForm) {\r\n\r\n                if(this.props.Login.masterData.SelectedForm&&this.props.Login.masterData.SelectedForm.value){\r\n                    constructApiData = [\r\n                        { \"nformcode\": this.props.Login.masterData.SelectedForm.value },\r\n                        { \"sformname\": this.props.Login.masterData.SelectedForm.label }\r\n                    ]\r\n                }\r\n               \r\n                let constructData = this.props.Login.masterData.lstquerybilderColumns.map((item, index) => {\r\n                    return { label: item.scolumndisplayname, value: index, item: { ...item } }\r\n\r\n                })\r\n                lstQueryBuilder = constructData;\r\n                selectedRecord['filterNew'] = []\r\n            }\r\n\r\n            this.setState({\r\n                userRoleControlRights,\r\n                controlMap, apiServiceList,\r\n                selectedRecord, constructApiData,\r\n                lstQueryBuilder, qualisList\r\n            });\r\n        }\r\n\r\n        // if (this.props.Login.masterData.lstqueryForm !== previousProps.Login.masterData.lstqueryForm) {\r\n        //     const qualisMap = constructOptionList(this.props.Login.masterData.lstqueryForm || [], \"nformcode\",\r\n        //         \"sdisplayname\", \"nsorter\", \"ascending\", false);\r\n        //     const qualisList = qualisMap.get(\"OptionList\")\r\n        //     this.setState({\r\n        //         qualisList\r\n        //     });\r\n        // }\r\n\r\n        // if (this.props.Login.masterData.SelectedForm !== previousProps.Login.masterData.SelectedForm) {\r\n        //     const constructApiData = [\r\n        //         { \"nformcode\": this.props.Login.masterData.SelectedForm.value },\r\n        //         { \"sformname\": this.props.Login.masterData.SelectedForm.label }\r\n        //     ]\r\n        //     let constructData = this.props.Login.masterData.lstquerybilderColumns.map((item, index) => {\r\n        //         return { label: item.scolumndisplayname, value: index, item: { ...item } }\r\n\r\n        //     })\r\n\r\n        //     this.setState({\r\n        //         constructApiData, lstQueryBuilder: constructData\r\n        //     });\r\n\r\n        // }\r\n\r\n        if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\r\n            this.setState({\r\n                selectedRecord: this.props.Login.selectedRecord\r\n            });\r\n        }\r\n\r\n    }\r\n    componentWillUnmount() {\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                masterData: [], inputParam: undefined, operation: null, modalName: undefined\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n}\r\nexport default connect(mapStateToProps, {\r\n    sendRequest,\r\n    getQualisFormsFields, getQualisForms, updateStore\r\n})(injectIntl(APIService));"]},"metadata":{},"sourceType":"module"}