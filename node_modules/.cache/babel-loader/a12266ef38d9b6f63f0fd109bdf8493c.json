{"ast":null,"code":"import rsapi from '../rsapi';\nimport { DEFAULT_RETURN } from './LoginTypes';\nimport { constructOptionList, sortData } from '../components/CommonScript';\nimport { toast } from 'react-toastify';\nimport { initRequest, updateStore } from './LoginAction';\nimport { transactionStatus } from '../components/Enumeration';\nimport { intl } from \"../components/App\";\nexport function openModal(operation, napprovalconfigcode, napprovalsubtypecode, userInfo, ncontrolcode, ntreeversiontempcode) {\n  return function (dispatch) {\n    if (userInfo) {\n      const inputData = {\n        napprovalconfigcode: napprovalconfigcode,\n        napprovalsubtypecode: napprovalsubtypecode,\n        ntreeversiontempcode,\n        userinfo: userInfo\n      };\n      dispatch(initRequest(true));\n      rsapi.post(\"approvalconfig/getUserRoleApprovalConfig\", inputData).then(response => {\n        const filterStatusOptionsMap = constructOptionList(response.data.availableFilterStatus || [], \"ntranscode\", \"stransstatus\", undefined, undefined, true);\n        const validationStatusOptionsMap = constructOptionList(response.data.availableValidStatus || [], \"ntranscode\", \"stransstatus\", undefined, undefined, true);\n        const approvalStatusOptionsMap = constructOptionList(response.data.approvalStatus || [], \"ntranscode\", \"stransdisplaystatus\", undefined, undefined, true);\n        const decisionStatusOptionsMap = constructOptionList(response.data.availableDecisionStatus || [], \"ntranscode\", \"stransstatus\", undefined, undefined, true);\n        const checklistOptionsMap = constructOptionList(response.data.checklist || [], \"nchecklistcode\", \"schecklistname\", undefined, undefined, true);\n        const filterStatusOptions = filterStatusOptionsMap.get(\"OptionList\");\n        const validationStatusOptions = validationStatusOptionsMap.get(\"OptionList\");\n        const approvalStatusOptions = approvalStatusOptionsMap.get(\"OptionList\");\n        const decisionStatusOptions = decisionStatusOptionsMap.get(\"OptionList\");\n        const checklistOptions = checklistOptionsMap.get(\"OptionList\"); // const userRoleTree = response.data.userroletree ?  response.data.userroletree.reverse() :[];\n\n        const userRoleTree = response.data.userroletree;\n        const validStatusList = response.data.availableValidStatus || [];\n        const topLevelValidStatus = validStatusList.filter(item => item.ntranscode !== transactionStatus.COMPLETED);\n        const topLevelValidStatusMap = constructOptionList(topLevelValidStatus || [], \"ntranscode\", \"stransstatus\", undefined, undefined, true);\n        const topLevelValidStatusOptions = topLevelValidStatusMap.get(\"OptionList\");\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            openModal: true,\n            operation,\n            userRoleTree,\n            //:response.data.userroletree,\n            filterStatusOptions,\n            validationStatusOptions,\n            topLevelValidStatusOptions,\n            approvalStatusOptions,\n            decisionStatusOptions,\n            checklistOptions,\n            approvalStatusValue: response.data.AvailableDecisionStatus ? response.data.AvailableDecisionStatus : [],\n            checklistValues: [],\n            checklistVersionValues: [],\n            actionStatus: response.data.actionStatus ? response.data.actionStatus : [],\n            roleConfig: response.data.roleConfig ? sortData(response.data.roleConfig, 'ascending', 'nsorter') : [],\n            versionConfig: response.data.versionConfig ? response.data.versionConfig : [],\n            ncontrolcode,\n            loading: false\n          }\n        });\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(error.response.data);\n        }\n      });\n    }\n  };\n}\nexport function getApprovalConfigVersion(version, napprovalsubtypecode, userInfo, masterData) {\n  return function (dispatch) {\n    const inputData = {\n      \"napprovalconfigversioncode\": version.napproveconfversioncode,\n      napprovalsubtypecode: napprovalsubtypecode,\n      userinfo: userInfo\n    };\n    dispatch(initRequest(true));\n    rsapi.post(\"approvalconfig/getApprovalConfigVersion\", inputData).then(response => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...masterData,\n            selectedVersion: response.data.selectedVersion,\n            showAccordion: true,\n            approvalconfigRoleNames: response.data.approvalconfigRoleNames,\n            selectedRole: response.data.approvalconfigRoleNames ? response.data.approvalconfigRoleNames.length > 0 ? sortData(response.data.approvalconfigRoleNames, 'ascending', 'nlevelno')[0] : {} : {},\n            roleFilters: response.data.roleFilters,\n            roleValidations: response.data.roleValidations,\n            roleDecisions: response.data.roleDecisions,\n            roleActions: response.data.roleActions,\n            roleConfig: sortData(response.data.roleConfig, 'ascending', 'nsorter'),\n            versionConfig: response.data.versionConfig\n          },\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getRoleDetails(inputData) {\n  return function (dispatch) {\n    let {\n      role,\n      masterData,\n      napprovalsubtypecode,\n      userinfo\n    } = inputData; //console.log(\"role:\", role);\n\n    let inputParamData = {\n      napprovalconfigrolecode: role.napprovalconfigrolecode,\n      napprovalsubtypecode,\n      userinfo\n    };\n    dispatch(initRequest(true));\n    rsapi.post(\"approvalconfig/getApprovalConfigRoleDetails\", inputParamData).then(response => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...masterData,\n            selectedRole: role,\n            showAccordion: true,\n            roleFilters: response.data.roleFilters,\n            roleValidations: response.data.roleValidations,\n            roleDecisions: response.data.roleDecisions,\n            roleActions: response.data.roleActions,\n            roleConfig: sortData(response.data.roleConfig, 'ascending', 'nsorter'),\n            versionConfig: response.data.versionConfig\n          },\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getApprovalConfigEditData(napprovalconfigversioncode, napprovalsubtypecode, userInfo, masterData, ncontrolcode) {\n  return function (dispatch) {\n    if (masterData.selectedVersion[\"ntransactionstatus\"] === transactionStatus.APPROVED || masterData.selectedVersion[\"ntransactionstatus\"] === transactionStatus.RETIRED) {\n      toast.warn(intl.formatMessage({\n        id: \"IDS_SELECTDRAFTRECORDTOEDIT\"\n      }));\n    } else {\n      if (userInfo) {\n        const inputData = {\n          napprovalconfigversioncode: napprovalconfigversioncode,\n          napprovalsubtypecode: napprovalsubtypecode,\n          userinfo: userInfo\n        };\n        dispatch(initRequest(true));\n        rsapi.post(\"approvalconfig/getApprovalConfigEditData\", inputData).then(response => {\n          const filterStatusOptionsMap = constructOptionList(response.data.availableFilterStatus || [], \"ntranscode\", \"stransstatus\", undefined, undefined, true);\n          const validationStatusOptionsMap = constructOptionList(response.data.availableValidStatus || [], \"ntranscode\", \"stransstatus\", undefined, undefined, true);\n          const approvalStatusOptionsMap = constructOptionList(response.data.approvalStatus || [], \"ntranscode\", \"stransdisplaystatus\", undefined, undefined, true);\n          const decisionStatusOptionsMap = constructOptionList(response.data.availableDecisionStatus || [], \"ntranscode\", \"stransstatus\", undefined, undefined, true);\n          const checklistOptionsMap = constructOptionList(response.data.checklist || [], \"nchecklistcode\", \"schecklistname\", undefined, undefined, true);\n          const filterStatusOptions = filterStatusOptionsMap.get(\"OptionList\");\n          const validationStatusOptions = validationStatusOptionsMap.get(\"OptionList\");\n          const approvalStatusOptions = approvalStatusOptionsMap.get(\"OptionList\");\n          const decisionStatusOptions = decisionStatusOptionsMap.get(\"OptionList\");\n          const checklistOptions = checklistOptionsMap.get(\"OptionList\"); //const userRoleTree = response.data.userroletree ?  response.data.userroletree.reverse() :[];\n\n          const userRoleTree = response.data.userroletree ? response.data.userroletree : [];\n          let selectedRecord = {};\n          userRoleTree.map(role => {\n            let filterStatus = [];\n            let validationStatus = [];\n            let decisionStatus = [];\n            let actionArray = [];\n            let filterStatusValues = [];\n            response.data[`filterstatus_${role.nuserrolecode}`].map(data => {\n              filterStatusValues.push({\n                value: data.ntranscode,\n                label: data.stransstatus,\n                item: data\n              });\n              filterStatus.push(data.ntranscode);\n              return null;\n            });\n            let validationStatusValues = [];\n            response.data[`validationstatus_${role.nuserrolecode}`].map(data => {\n              validationStatusValues.push({\n                value: data.ntranscode,\n                label: data.stransstatus,\n                item: data\n              });\n              validationStatus.push(data.ntranscode);\n              return null;\n            });\n            let decisionStatusValues = [];\n            response.data[`decisionstatus_${role.nuserrolecode}`] && response.data[`decisionstatus_${role.nuserrolecode}`].map(data => {\n              decisionStatusValues.push({\n                value: data.ntranscode,\n                label: data.stransstatus,\n                item: data\n              });\n              decisionStatus.push(data.ntranscode);\n              return null;\n            });\n            let checklistValues = [];\n            response.data[`checklist_${role.nuserrolecode}`].map(data => checklistValues.push({\n              value: data.nchecklistcode,\n              label: data.schecklistname,\n              item: data\n            }));\n            let checklistVersionValues = [];\n            response.data[`checklist_${role.nuserrolecode}`].map(data => checklistVersionValues.push({\n              value: data.nchecklistversioncode,\n              label: data.schecklistversionname,\n              item: data\n            }));\n            let nrecomretestneed = response.data[`roledetails_${role.nuserrolecode}`][0].nrecomretestneed;\n            let nrecomrecalcneed = response.data[`roledetails_${role.nuserrolecode}`][0].nrecomrecalcneed;\n            let nretestneed = response.data[`roledetails_${role.nuserrolecode}`][0].nretestneed;\n            let nrecalcneed = response.data[`roledetails_${role.nuserrolecode}`][0].nrecalcneed;\n            let ncorrectionneed = response.data[`roledetails_${role.nuserrolecode}`][0].ncorrectionneed;\n            nrecomretestneed === transactionStatus.YES ? actionArray.push(transactionStatus.RECOMMENDRETEST) : actionArray.push();\n            nrecomrecalcneed === transactionStatus.YES ? actionArray.push(transactionStatus.RECOMMENDRECALC) : actionArray.push();\n            nretestneed === transactionStatus.YES ? actionArray.push(transactionStatus.RETEST) : actionArray.push();\n            nrecalcneed === transactionStatus.YES ? actionArray.push(transactionStatus.RECALC) : actionArray.push();\n            ncorrectionneed === transactionStatus.YES ? actionArray.push(transactionStatus.CORRECTION) : actionArray.push();\n            selectedRecord[role.nuserrolecode] = {\n              // 'IDS_PARTIALAPPROVAL':response.data[`roledetails_${role.nuserrolecode}`][0].npartialapprovalneed,\n              // 'IDS_SECTIONWISEAPPROVE':response.data[`roledetails_${role.nuserrolecode}`][0].nsectionwiseapprovalneed,\n              // 'IDS_RECOMMENDRETEST':response.data[`roledetails_${role.nuserrolecode}`][0].nrecomretestneed,\n              // 'IDS_RECOMMENDRECALC':response.data[`roledetails_${role.nuserrolecode}`][0].nrecomrecalcneed,\n              // 'IDS_RETEST':response.data[`roledetails_${role.nuserrolecode}`][0].nretestneed,\n              // 'IDS_RECALC':response.data[`roledetails_${role.nuserrolecode}`][0].nrecalcneed,\n              // 'IDS_AUTOAPPROVAL':response.data[`roledetails_${role.nuserrolecode}`][0].nautoapproval,\n              // 'IDS_CORRECTION':response.data[`roledetails_${role.nuserrolecode}`][0].ncorrectionneed,\n              // 'IDS_ESIGN':response.data[`roledetails_${role.nuserrolecode}`][0].nesignneed,\n              // 'filterstatus':filterStatus,\n              // 'decisionstatus':decisionStatus,\n              // 'validationstatus':validationStatus,\n              // 'approvalstatus':response.data[`roledetails_${role.nuserrolecode}`][0].napprovalstatuscode,\n              // 'checklist':response.data[`checklist_${role.nuserrolecode}`][0].nchecklistversioncode\n              [`Partial Approval_${role.nuserrolecode}`]: response.data[`roledetails_${role.nuserrolecode}`][0].npartialapprovalneed,\n              'IDS_SECTIONWISEAPPROVE': response.data[`roledetails_${role.nuserrolecode}`][0].nsectionwiseapprovalneed,\n              [`Recommend Retest_${role.nuserrolecode}`]: response.data[`roledetails_${role.nuserrolecode}`][0].nrecomretestneed,\n              [`Recommend Recalc_${role.nuserrolecode}`]: response.data[`roledetails_${role.nuserrolecode}`][0].nrecomrecalcneed,\n              [`ReTest_${role.nuserrolecode}`]: response.data[`roledetails_${role.nuserrolecode}`][0].nretestneed,\n              [`ReCalc_${role.nuserrolecode}`]: response.data[`roledetails_${role.nuserrolecode}`][0].nrecalcneed,\n              'IDS_AUTOAPPROVAL': response.data[`roledetails_${role.nuserrolecode}`][0].nautoapproval,\n              [`Correction_${role.nuserrolecode}`]: response.data[`roledetails_${role.nuserrolecode}`][0].ncorrectionneed,\n              [`Esign_${role.nuserrolecode}`]: response.data[`roledetails_${role.nuserrolecode}`][0].nesignneed,\n              'filterstatus': filterStatus,\n              'decisionstatus': decisionStatus,\n              'validationstatus': validationStatus,\n              'approvalstatus': response.data[`roledetails_${role.nuserrolecode}`][0].napprovalstatuscode,\n              'checklist': response.data[`checklist_${role.nuserrolecode}`][0].nchecklistversioncode\n            };\n            selectedRecord['sversionname'] = response.data.versiondetails.sversionname; //ALPD-4833--Vignesh R(08-10-2024)\n\n            selectedRecord['nneedautoinnerband'] = response.data.versiondetails.nneedautoinnerband;\n            selectedRecord['nneedautoouterband'] = response.data.versiondetails.nneedautoouterband;\n            response.data.versionConfig.map(action => {\n              if (action.ntranscode === transactionStatus.AUTOAPPROVAL) {\n                selectedRecord[action.stransdisplaystatus] = response.data.versiondetails.nneedautoapproval;\n              } else if (action.ntranscode === transactionStatus.AUTOCOMPLETE) {\n                selectedRecord[action.stransdisplaystatus] = response.data.versiondetails.nneedautocomplete;\n              }\n            });\n            selectedRecord['IDS_JOBALLOCATION'] = response.data.versiondetails.nneedjoballocation;\n            selectedRecord['IDS_AUTOALLOT'] = response.data.versiondetails.nautoallot;\n            selectedRecord[`approvalstatus_${role.nuserrolecode}`] = [{\n              value: response.data[`roledetails_${role.nuserrolecode}`][0].napprovalstatuscode,\n              label: response.data[`roledetails_${role.nuserrolecode}`][0].sapprovalstatus\n            }];\n            selectedRecord[`filterstatus_${role.nuserrolecode}`] = filterStatusValues;\n            selectedRecord[`validationstatus_${role.nuserrolecode}`] = validationStatusValues;\n            selectedRecord[`decisionstatus_${role.nuserrolecode}`] = decisionStatusValues;\n            selectedRecord[`checklist_${role.nuserrolecode}`] = checklistValues;\n            selectedRecord[`checklistVersion_${role.nuserrolecode}`] = checklistVersionValues;\n            selectedRecord[`actionStatus_${role.nuserrolecode}`] = actionArray; //selectedRecord[role.nuserrolecode]=response.data[`roledetails_${role.nuserrolecode}`][0]\n\n            return null;\n          });\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              openModal: true,\n              operation: \"update\",\n              userRoleTree,\n              //userRoleTree:sortData(response.data.userroletree,'ascending','nlevelno'),\n              filterStatusOptions,\n              validationStatusOptions,\n              approvalStatusOptions,\n              decisionStatusOptions,\n              checklistOptions,\n              actionStatus: response.data.actionStatus ? response.data.actionStatus : [],\n              roleConfig: sortData(response.data.roleConfig, 'ascending', 'nsorter'),\n              versionConfig: response.data.versionConfig,\n              selectedRecord,\n              masterData,\n              ncontrolcode,\n              loading: false\n            }\n          });\n        }).catch(error => {\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              loading: false\n            }\n          });\n\n          if (error.response.status === 500) {\n            toast.error(error.message);\n          } else {\n            toast.warn(error.response.data);\n          }\n        });\n      }\n    }\n  };\n}\nexport function getFilterChange(inputParamData, oldState) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"approvalconfig/getApprovalConfigFilter\", inputParamData.inputData).then(response => {\n      const RegistrationTypeListMap = constructOptionList(response.data.registrationtype || [], \"nregtypecode\", \"sregtypename\", 'ascending', 'nsorter', false);\n      const RegistrationSubTypeListMap = constructOptionList(response.data.registrationsubtype || [], \"nregsubtypecode\", \"sregsubtypename\", 'ascending', 'nsorter', false);\n      let RegistrationTypeList = RegistrationTypeListMap.get(\"OptionList\");\n      let RegistrationSubTypeList = RegistrationSubTypeListMap.get(\"OptionList\");\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputParamData.masterData,\n            approvalsubtype: oldState.approvalsubtype,\n            approvalSubTypeValue: oldState.approvalSubTypeValue,\n            RegistrationTypeList: response.data.registrationtype ? RegistrationTypeList : oldState.RegistrationTypeList,\n            RegistrationSubTypeList: response.data.registrationsubtype ? RegistrationSubTypeList : oldState.RegistrationSubTypeList,\n            registrationType: response.data.registrationtype && response.data.registrationtype.length > 0 ? response.data.registrationtype : oldState.registrationtype,\n            //registrationType:response.data.registrationtype&&response.data.registrationtype.length>0?sortData(response.data.registrationtype,\"ascending\",\"nregtypecode\"):oldState.registrationtype,\n            registrationTypeValue: response.data.registrationtype ? response.data.registrationtype.length > 0 ? {\n              value: response.data.registrationtype[0].nregtypecode,\n              label: response.data.registrationtype[0].sregtypename\n            } : oldState.registrationTypeValue : oldState.registrationTypeValue,\n            //registrationSubType:response.data.registrationsubtype&&response.data.registrationsubtype.length>0?sortData(response.data.registrationsubtype,\"descending\",\"nregsubtypecode\"):oldState.registrationsubtype,\n            registrationSubType: response.data.registrationsubtype && response.data.registrationsubtype.length > 0 ? response.data.registrationsubtype : oldState.registrationsubtype,\n            registrationSubTypeValue: response.data.registrationsubtype ? response.data.registrationsubtype.length > 0 ? {\n              value: response.data.registrationsubtype[0].nregsubtypecode,\n              label: response.data.registrationsubtype[0].sregsubtypename\n            } : oldState.registrationSubTypeValue : oldState.registrationSubTypeValue,\n            approvalConfigCode: response.data.approvalConfigCode,\n            treeVersionTemplate: response.data.treeVersionTemplate,\n            userroleTemplateValue: response.data.userroleTemplateValue // versionData:sortData(response.data.versionData),\n            // selectedVersion:response.data.selectedVersion,\n            // approvalconfigRoleNames:response.data.approvalconfigRoleNames,\n            // showAccordion:true,\n            // roleFilters:response.data.roleFilters,\n            // roleValidations:response.data.roleValidations,\n            // roleDecisions:response.data.roleDecisions,\n            // roleActions:response.data.roleActions,\n            // roleConfig:response.data.roleConfig&&response.data.roleConfig.length>0&&sortData(response.data.roleConfig,'ascending','nsorter'),\n            // versionConfig:response.data.versionConfig,\n            // searchedData:undefined\n\n          },\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getApprovalConfigurationVersion(inputParamData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"approvalconfig/getApprovalConfigVersion\", inputParamData.inputData).then(response => {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          masterData: [],\n          organisation: undefined\n        }\n      };\n      dispatch(updateStore(updateInfo)); //ALPD-4803 done by Dhanushya RI,To check searchref key is present or not\n\n      if (inputParamData.searchRef !== undefined && inputParamData.searchRef && inputParamData.searchRef.current && inputParamData.searchRef.current.value !== \"\") {\n        inputParamData.searchRef.current.value = \"\";\n        inputParamData.masterData[\"searchedData\"] = undefined;\n      }\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputParamData.masterData,\n            versionData: sortData(response.data.versionData),\n            selectedVersion: response.data.selectedVersion,\n            approvalconfigRoleNames: response.data.approvalconfigRoleNames,\n            selectedRole: response.data.approvalconfigRoleNames ? response.data.approvalconfigRoleNames.length > 0 ? sortData(response.data.approvalconfigRoleNames, 'ascending', 'nlevelno')[0] : {} : {},\n            showAccordion: true,\n            roleFilters: response.data.roleFilters,\n            roleValidations: response.data.roleValidations,\n            roleDecisions: response.data.roleDecisions,\n            roleActions: response.data.roleActions,\n            roleConfig: response.data.roleConfig && response.data.roleConfig.length > 0 && sortData(response.data.roleConfig, 'ascending', 'nsorter'),\n            versionConfig: response.data.versionConfig,\n            searchedData: undefined\n          },\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function copyVersion(napprovalsubtypecode, userInfo, masterData, ncontrolcode) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post('approvalconfig/getCopyRegType', {\n      napprovalconfigversioncode: masterData.selectedVersion.napproveconfversioncode,\n      napprovalsubtypecode: napprovalsubtypecode,\n      userinfo: userInfo\n    }).then(response => {\n      let selectedRecord = {};\n      const RegistrationTypeListMap = constructOptionList(response.data.CopyRegType || [], \"nregtypecode\", \"sregtypename\", 'ascending', 'nsorter', false);\n      const RegistrationSubTypeListMap = constructOptionList(response.data.CopyRegSubType || [], \"nregsubtypecode\", \"sregsubtypename\", 'ascending', 'nsorter', false);\n      let optCopyRegType = RegistrationTypeListMap.get(\"OptionList\");\n      let optCopyRegSubType = RegistrationSubTypeListMap.get(\"OptionList\");\n      selectedRecord['regtype'] = response.data.CopyRegType.length > 0 ? {\n        value: response.data.CopyRegType[0].nregtypecode,\n        label: response.data.CopyRegType[0].sregtypename\n      } : [];\n      selectedRecord['regsubtype'] = response.data.CopyRegSubType ? response.data.CopyRegSubType.length > 0 ? {\n        value: response.data.CopyRegSubType[0].nregsubtypecode,\n        label: response.data.CopyRegSubType[0].sregsubtypename\n      } : [] : [];\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          operation: \"copy\",\n          openModal: true,\n          optCopyRegSubType,\n          optCopyRegType,\n          selectedRecord,\n          masterData,\n          ncontrolcode,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getCopySubType(comboData, selectedRecord, userInfo, masterData, optCopyRegType) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post('approvalconfig/getCopyRegSubType', {\n      nregtypecode: comboData.value,\n      userinfo: userInfo\n    }).then(response => {\n      const RegistrationSubTypeListMap = constructOptionList(response.data.CopyRegSubType || [], \"nregsubtypecode\", \"sregsubtypename\", 'ascending', 'nsorter', false);\n      let optCopyRegSubType = RegistrationSubTypeListMap.get(\"OptionList\");\n      selectedRecord['regsubtype'] = response.data.CopyRegSubType.length > 0 ? {\n        value: response.data.CopyRegSubType[0].nregsubtypecode,\n        label: response.data.CopyRegSubType[0].sregsubtypename\n      } : [];\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          operation: \"copy\",\n          openModal: true,\n          loading: false,\n          optCopyRegType,\n          optCopyRegSubType,\n          selectedRecord,\n          masterData\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function setDefault(inputObj, event) {\n  let {\n    flag,\n    napprovalconfigrolecode,\n    napprovalsubtypecode,\n    userInfo,\n    masterData\n  } = inputObj;\n  let rowData = inputObj.selectedRecord;\n  return function (dispatch) {\n    if (event.target.checked) {\n      let inputData = {};\n      let url = '';\n\n      if (flag === 1) {\n        inputData = {\n          napprovalconfigrolecode: napprovalconfigrolecode,\n          napprovalfiltercode: rowData.napprovalfiltercode,\n          napprovalsubtypecode: napprovalsubtypecode,\n          ntransactionstatus: rowData.ntransactionstatus,\n          napprovalconfigversioncode: masterData.selectedVersion.napprovalconfigversioncode,\n          userinfo: userInfo\n        };\n        url = 'approvalconfig/setDefaultFilterStatus';\n      } else {\n        inputData = {\n          napprovalconfigrolecode: napprovalconfigrolecode,\n          napprovaldecisioncode: rowData.napprovaldecisioncode,\n          napprovalsubtypecode: napprovalsubtypecode,\n          ntransactionstatus: rowData.ntransactionstatus,\n          napprovalconfigversioncode: masterData.selectedVersion.napprovalconfigversioncode,\n          userinfo: userInfo\n        };\n        url = 'approvalconfig/setDefaultDecisionStatus';\n      }\n\n      dispatch(initRequest(true));\n      rsapi.post(url, inputData).then(response => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            masterData: { ...masterData,\n              showAccordion: true,\n              roleFilters: response.data.roleFilters,\n              roleValidations: response.data.roleValidations,\n              roleDecisions: response.data.roleDecisions,\n              roleActions: response.data.roleActions,\n              roleConfig: sortData(response.data.roleConfig, 'ascending', 'nsorter'),\n              versionConfig: response.data.versionConfig\n            },\n            loading: false\n          }\n        });\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(error.response.data);\n        }\n      });\n    }\n  };\n}\nexport function approveVersion(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"approvalconfig/getDesignTemplateMapping\", { ...inputParam.inputData\n    }).then(response => {\n      const designTemplateMapping = constructOptionList(response.data.DesignTemplateMapping, \"ndesigntemplatemappingcode\", \"sregtemplatename\");\n      const data = designTemplateMapping.get(\"OptionList\");\n      const selectedRecord = data[0] ? {\n        'ndesigntemplatemappingcode': { ...data[0]\n        }\n      } : {};\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false,\n          designTemplateMapping: data,\n          selectedTemplate: data.length > 0 && data[0].item.jsondata,\n          openModal: true,\n          subSampleCheck: response.data.subSampleCheck,\n          subSampleTemplate: response.data.subSampleTemplate,\n          operation: inputParam.operation,\n          ncontrolcode: inputParam.ncontrolcode,\n          // selectedRecord:{'ndesigntemplatemappingcode':{...data[0]}}\n          selectedRecord\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}","map":{"version":3,"sources":["E:/WorkingFolder/React_Postgres/ALPD/branches/SOURCE-513-FINAL/SOURCE-513-ALPD-4991/QuaLISWeb/src/actions/ApprovalConfigAction.js"],"names":["rsapi","DEFAULT_RETURN","constructOptionList","sortData","toast","initRequest","updateStore","transactionStatus","intl","openModal","operation","napprovalconfigcode","napprovalsubtypecode","userInfo","ncontrolcode","ntreeversiontempcode","dispatch","inputData","userinfo","post","then","response","filterStatusOptionsMap","data","availableFilterStatus","undefined","validationStatusOptionsMap","availableValidStatus","approvalStatusOptionsMap","approvalStatus","decisionStatusOptionsMap","availableDecisionStatus","checklistOptionsMap","checklist","filterStatusOptions","get","validationStatusOptions","approvalStatusOptions","decisionStatusOptions","checklistOptions","userRoleTree","userroletree","validStatusList","topLevelValidStatus","filter","item","ntranscode","COMPLETED","topLevelValidStatusMap","topLevelValidStatusOptions","type","payload","approvalStatusValue","AvailableDecisionStatus","checklistValues","checklistVersionValues","actionStatus","roleConfig","versionConfig","loading","catch","error","status","message","warn","getApprovalConfigVersion","version","masterData","napproveconfversioncode","selectedVersion","showAccordion","approvalconfigRoleNames","selectedRole","length","roleFilters","roleValidations","roleDecisions","roleActions","getRoleDetails","role","inputParamData","napprovalconfigrolecode","getApprovalConfigEditData","napprovalconfigversioncode","APPROVED","RETIRED","formatMessage","id","selectedRecord","map","filterStatus","validationStatus","decisionStatus","actionArray","filterStatusValues","nuserrolecode","push","value","label","stransstatus","validationStatusValues","decisionStatusValues","nchecklistcode","schecklistname","nchecklistversioncode","schecklistversionname","nrecomretestneed","nrecomrecalcneed","nretestneed","nrecalcneed","ncorrectionneed","YES","RECOMMENDRETEST","RECOMMENDRECALC","RETEST","RECALC","CORRECTION","npartialapprovalneed","nsectionwiseapprovalneed","nautoapproval","nesignneed","napprovalstatuscode","versiondetails","sversionname","nneedautoinnerband","nneedautoouterband","action","AUTOAPPROVAL","stransdisplaystatus","nneedautoapproval","AUTOCOMPLETE","nneedautocomplete","nneedjoballocation","nautoallot","sapprovalstatus","getFilterChange","oldState","RegistrationTypeListMap","registrationtype","RegistrationSubTypeListMap","registrationsubtype","RegistrationTypeList","RegistrationSubTypeList","approvalsubtype","approvalSubTypeValue","registrationType","registrationTypeValue","nregtypecode","sregtypename","registrationSubType","registrationSubTypeValue","nregsubtypecode","sregsubtypename","approvalConfigCode","treeVersionTemplate","userroleTemplateValue","getApprovalConfigurationVersion","updateInfo","typeName","organisation","searchRef","current","versionData","searchedData","copyVersion","CopyRegType","CopyRegSubType","optCopyRegType","optCopyRegSubType","getCopySubType","comboData","setDefault","inputObj","event","flag","rowData","target","checked","url","napprovalfiltercode","ntransactionstatus","napprovaldecisioncode","approveVersion","inputParam","designTemplateMapping","DesignTemplateMapping","selectedTemplate","jsondata","subSampleCheck","subSampleTemplate"],"mappings":"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","sourcesContent":["\r\nimport rsapi from '../rsapi';\r\nimport {DEFAULT_RETURN} from './LoginTypes';\r\nimport {constructOptionList, sortData} from '../components/CommonScript'\r\nimport { toast } from 'react-toastify';\r\nimport { initRequest,updateStore } from './LoginAction';\r\nimport { transactionStatus } from '../components/Enumeration';\r\nimport { intl } from \"../components/App\";\r\n\r\n\r\nexport function openModal(operation,napprovalconfigcode,napprovalsubtypecode, userInfo, ncontrolcode,ntreeversiontempcode){\r\n    return function (dispatch) {  \r\n        \r\n        if(userInfo){\r\n\r\n            const inputData={\r\n                napprovalconfigcode:napprovalconfigcode,\r\n                napprovalsubtypecode:napprovalsubtypecode,\r\n                ntreeversiontempcode,\r\n                userinfo:userInfo\r\n            };\r\n            dispatch(initRequest(true));\r\n            rsapi.post(\"approvalconfig/getUserRoleApprovalConfig\",inputData)\r\n            .then(response=> { \r\n                const filterStatusOptionsMap = constructOptionList(response.data.availableFilterStatus || [], \"ntranscode\", \"stransstatus\", undefined, undefined, true);\r\n                const validationStatusOptionsMap = constructOptionList(response.data.availableValidStatus || [], \"ntranscode\", \"stransstatus\", undefined, undefined, true);\r\n                const approvalStatusOptionsMap = constructOptionList(response.data.approvalStatus || [], \"ntranscode\", \"stransdisplaystatus\", undefined, undefined, true);\r\n                const decisionStatusOptionsMap = constructOptionList(response.data.availableDecisionStatus || [], \"ntranscode\", \"stransstatus\", undefined, undefined, true);\r\n                const checklistOptionsMap = constructOptionList(response.data.checklist || [], \"nchecklistcode\", \"schecklistname\", undefined, undefined, true);\r\n                const filterStatusOptions = filterStatusOptionsMap.get(\"OptionList\");\r\n                const validationStatusOptions = validationStatusOptionsMap.get(\"OptionList\");\r\n                const approvalStatusOptions = approvalStatusOptionsMap.get(\"OptionList\");\r\n                const decisionStatusOptions = decisionStatusOptionsMap.get(\"OptionList\");\r\n                const checklistOptions = checklistOptionsMap.get(\"OptionList\");\r\n\r\n               // const userRoleTree = response.data.userroletree ?  response.data.userroletree.reverse() :[];\r\n                const userRoleTree = response.data.userroletree;\r\n                const validStatusList = response.data.availableValidStatus || [];\r\n                const topLevelValidStatus = validStatusList.filter(item=>\r\n                              item.ntranscode !== transactionStatus.COMPLETED)\r\n                const topLevelValidStatusMap = constructOptionList(topLevelValidStatus || [], \"ntranscode\", \"stransstatus\", undefined, undefined, true);\r\n                const topLevelValidStatusOptions = topLevelValidStatusMap.get(\"OptionList\");\r\n\r\n\r\n                dispatch({type: DEFAULT_RETURN, payload:{\r\n                    openModal:true,operation,\r\n                     userRoleTree,//:response.data.userroletree,\r\n                                filterStatusOptions,\r\n                                validationStatusOptions,\r\n                                topLevelValidStatusOptions,\r\n                                approvalStatusOptions,\r\n                                decisionStatusOptions,\r\n                                checklistOptions,\r\n                                approvalStatusValue:response.data.AvailableDecisionStatus?response.data.AvailableDecisionStatus:[],\r\n                                checklistValues:[],\r\n                                checklistVersionValues:[],\r\n                                actionStatus:response.data.actionStatus?response.data.actionStatus:[],\r\n                                roleConfig:response.data.roleConfig?sortData(response.data.roleConfig,'ascending','nsorter'):[],\r\n                                versionConfig:response.data.versionConfig?response.data.versionConfig:[],                                \r\n                                ncontrolcode,loading:false\r\n                                }});\r\n                \r\n            })\r\n            .catch(error => {\r\n                dispatch({type: DEFAULT_RETURN, payload: {loading:false}})\r\n                if (error.response.status === 500){\r\n                    toast.error(error.message);\r\n                } \r\n                else{               \r\n                    toast.warn(error.response.data);\r\n                }         \r\n            })\r\n            \r\n        }\r\n    }\r\n    \r\n}\r\nexport function getApprovalConfigVersion(version,napprovalsubtypecode,userInfo,masterData){\r\n    return function (dispatch) {  \r\n        const  inputData = {\"napprovalconfigversioncode\":version.napproveconfversioncode,\r\n                            napprovalsubtypecode:napprovalsubtypecode,\r\n                            userinfo:userInfo\r\n                        }\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"approvalconfig/getApprovalConfigVersion\",inputData)\r\n        .then(response=> { \r\n            dispatch({type: DEFAULT_RETURN, payload:{\r\n                masterData:{\r\n                ...masterData,\r\n                selectedVersion:response.data.selectedVersion,\r\n                showAccordion:true,\r\n                approvalconfigRoleNames:response.data.approvalconfigRoleNames,\r\n                selectedRole:response.data.approvalconfigRoleNames?response.data.approvalconfigRoleNames.length>0?sortData(response.data.approvalconfigRoleNames,'ascending','nlevelno')[0]:{}:{},\r\n                roleFilters:response.data.roleFilters,\r\n                roleValidations:response.data.roleValidations,\r\n                roleDecisions:response.data.roleDecisions,\r\n                roleActions:response.data.roleActions,\r\n                roleConfig:sortData(response.data.roleConfig,'ascending','nsorter'),\r\n                versionConfig:response.data.versionConfig\r\n                },loading:false  \r\n            }}) \r\n        })\r\n        .catch(error => {\r\n            dispatch({type: DEFAULT_RETURN, payload: {loading:false}})\r\n            if (error.response.status === 500){\r\n                toast.error(error.message);\r\n            } \r\n            else{               \r\n                toast.warn(error.response.data);\r\n            }         \r\n        })     \r\n    }\r\n\r\n}\r\nexport function getRoleDetails(inputData){\r\n    return function (dispatch) {  \r\n        let {role,masterData,napprovalsubtypecode,userinfo}=inputData\r\n        //console.log(\"role:\", role);\r\n        let inputParamData={\r\n            napprovalconfigrolecode:role.napprovalconfigrolecode,\r\n            napprovalsubtypecode,\r\n            userinfo\r\n        }\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"approvalconfig/getApprovalConfigRoleDetails\",inputParamData)\r\n        .then(response=> { \r\n            dispatch({type: DEFAULT_RETURN, payload:{\r\n                masterData:{\r\n                    ...masterData,\r\n                selectedRole:role,\r\n                showAccordion:true,\r\n                roleFilters:response.data.roleFilters,\r\n                roleValidations:response.data.roleValidations,\r\n                roleDecisions:response.data.roleDecisions,\r\n                roleActions:response.data.roleActions,\r\n                roleConfig:sortData(response.data.roleConfig,'ascending','nsorter'),\r\n                versionConfig:response.data.versionConfig\r\n                },loading:false  \r\n\r\n                                    \r\n            }}) \r\n        })\r\n        .catch(error => {\r\n            dispatch({type: DEFAULT_RETURN, payload: {loading:false}})\r\n            if (error.response.status === 500){\r\n                toast.error(error.message);\r\n            } \r\n            else{               \r\n                toast.warn(error.response.data);\r\n            }         \r\n        })\r\n    }\r\n    \r\n    \r\n}\r\nexport function getApprovalConfigEditData(napprovalconfigversioncode,napprovalsubtypecode,userInfo,masterData, ncontrolcode){\r\n    return function (dispatch) { \r\n        if(masterData.selectedVersion[\"ntransactionstatus\"]===transactionStatus.APPROVED || \r\n                 masterData.selectedVersion[\"ntransactionstatus\"] === transactionStatus.RETIRED){\r\n                    toast.warn(intl.formatMessage({ id: \"IDS_SELECTDRAFTRECORDTOEDIT\" }));\r\n         }else{ \r\n           if(userInfo){\r\n            const inputData={\r\n                napprovalconfigversioncode:napprovalconfigversioncode,\r\n                napprovalsubtypecode:napprovalsubtypecode,\r\n                userinfo:userInfo\r\n            }\r\n            dispatch(initRequest(true));\r\n            rsapi.post(\"approvalconfig/getApprovalConfigEditData\",inputData)\r\n            .then(response=> { \r\n               \r\n                const filterStatusOptionsMap = constructOptionList(response.data.availableFilterStatus || [], \"ntranscode\", \"stransstatus\", undefined, undefined, true);\r\n                const validationStatusOptionsMap = constructOptionList(response.data.availableValidStatus || [], \"ntranscode\", \"stransstatus\", undefined, undefined, true);\r\n                const approvalStatusOptionsMap = constructOptionList(response.data.approvalStatus || [], \"ntranscode\", \"stransdisplaystatus\", undefined, undefined, true);\r\n                const decisionStatusOptionsMap = constructOptionList(response.data.availableDecisionStatus || [], \"ntranscode\", \"stransstatus\", undefined, undefined, true);\r\n                const checklistOptionsMap = constructOptionList(response.data.checklist || [], \"nchecklistcode\", \"schecklistname\", undefined, undefined, true);\r\n                const filterStatusOptions = filterStatusOptionsMap.get(\"OptionList\");\r\n                const validationStatusOptions = validationStatusOptionsMap.get(\"OptionList\");\r\n                const approvalStatusOptions = approvalStatusOptionsMap.get(\"OptionList\");\r\n                const decisionStatusOptions = decisionStatusOptionsMap.get(\"OptionList\");\r\n                const checklistOptions = checklistOptionsMap.get(\"OptionList\");\r\n\r\n                //const userRoleTree = response.data.userroletree ?  response.data.userroletree.reverse() :[];\r\n                const userRoleTree = response.data.userroletree ?  response.data.userroletree :[];\r\n\r\n                let selectedRecord={}\r\n                userRoleTree.map( role=>{\r\n                    let filterStatus=[];\r\n                    let validationStatus=[];\r\n                    let decisionStatus=[];\r\n                    let actionArray=[];\r\n                    let filterStatusValues=[];\r\n                    \r\n                    response.data[`filterstatus_${role.nuserrolecode}`].map(data=>\r\n                        {\r\n                        filterStatusValues.push({value:data.ntranscode,label:data.stransstatus,item:data})\r\n                        filterStatus.push(data.ntranscode)\r\n                        return null;\r\n                        }\r\n                    )\r\n                    let validationStatusValues=[];\r\n                    response.data[`validationstatus_${role.nuserrolecode}`].map(data=>{\r\n                        validationStatusValues.push({value:data.ntranscode,label:data.stransstatus,item:data})\r\n                        validationStatus.push(data.ntranscode)\r\n                        return null;\r\n                    }\r\n                        \r\n                    )\r\n                    let decisionStatusValues=[];\r\n                    response.data[`decisionstatus_${role.nuserrolecode}`]&&response.data[`decisionstatus_${role.nuserrolecode}`].map(data=>\r\n                        {\r\n                        decisionStatusValues.push({value:data.ntranscode,label:data.stransstatus,item:data});\r\n                        decisionStatus.push(data.ntranscode);\r\n                        return null;\r\n                        }\r\n                    )\r\n                    let checklistValues=[];\r\n                    response.data[`checklist_${role.nuserrolecode}`].map(data=>\r\n                        checklistValues.push({value:data.nchecklistcode,label:data.schecklistname,item:data})\r\n                        \r\n                    )\r\n                    let checklistVersionValues=[];\r\n                    response.data[`checklist_${role.nuserrolecode}`].map(data=>\r\n                        checklistVersionValues.push({value:data.nchecklistversioncode,label:data.schecklistversionname,item:data})\r\n                        \r\n                    )\r\n                    let nrecomretestneed=response.data[`roledetails_${role.nuserrolecode}`][0].nrecomretestneed\r\n                    let nrecomrecalcneed=response.data[`roledetails_${role.nuserrolecode}`][0].nrecomrecalcneed\r\n                    let nretestneed=response.data[`roledetails_${role.nuserrolecode}`][0].nretestneed\r\n                    let nrecalcneed=response.data[`roledetails_${role.nuserrolecode}`][0].nrecalcneed\r\n                    let ncorrectionneed=response.data[`roledetails_${role.nuserrolecode}`][0].ncorrectionneed\r\n\r\n                    nrecomretestneed===transactionStatus.YES?actionArray.push(transactionStatus.RECOMMENDRETEST):actionArray.push()\r\n                    nrecomrecalcneed===transactionStatus.YES?actionArray.push(transactionStatus.RECOMMENDRECALC):actionArray.push()\r\n                    nretestneed===transactionStatus.YES?actionArray.push(transactionStatus.RETEST):actionArray.push()\r\n                    nrecalcneed===transactionStatus.YES?actionArray.push(transactionStatus.RECALC):actionArray.push()\r\n                    ncorrectionneed===transactionStatus.YES?actionArray.push(transactionStatus.CORRECTION):actionArray.push()\r\n\r\n                    selectedRecord[role.nuserrolecode]={\r\n                        // 'IDS_PARTIALAPPROVAL':response.data[`roledetails_${role.nuserrolecode}`][0].npartialapprovalneed,\r\n                        // 'IDS_SECTIONWISEAPPROVE':response.data[`roledetails_${role.nuserrolecode}`][0].nsectionwiseapprovalneed,\r\n                        // 'IDS_RECOMMENDRETEST':response.data[`roledetails_${role.nuserrolecode}`][0].nrecomretestneed,\r\n                        // 'IDS_RECOMMENDRECALC':response.data[`roledetails_${role.nuserrolecode}`][0].nrecomrecalcneed,\r\n                        // 'IDS_RETEST':response.data[`roledetails_${role.nuserrolecode}`][0].nretestneed,\r\n                        // 'IDS_RECALC':response.data[`roledetails_${role.nuserrolecode}`][0].nrecalcneed,\r\n                        // 'IDS_AUTOAPPROVAL':response.data[`roledetails_${role.nuserrolecode}`][0].nautoapproval,\r\n                        // 'IDS_CORRECTION':response.data[`roledetails_${role.nuserrolecode}`][0].ncorrectionneed,\r\n                        // 'IDS_ESIGN':response.data[`roledetails_${role.nuserrolecode}`][0].nesignneed,\r\n                        // 'filterstatus':filterStatus,\r\n                        // 'decisionstatus':decisionStatus,\r\n                        // 'validationstatus':validationStatus,\r\n                        // 'approvalstatus':response.data[`roledetails_${role.nuserrolecode}`][0].napprovalstatuscode,\r\n                        // 'checklist':response.data[`checklist_${role.nuserrolecode}`][0].nchecklistversioncode\r\n                        [`Partial Approval_${role.nuserrolecode}`]:response.data[`roledetails_${role.nuserrolecode}`][0].npartialapprovalneed,\r\n                        'IDS_SECTIONWISEAPPROVE':response.data[`roledetails_${role.nuserrolecode}`][0].nsectionwiseapprovalneed,\r\n                        [`Recommend Retest_${role.nuserrolecode}`]:response.data[`roledetails_${role.nuserrolecode}`][0].nrecomretestneed,\r\n                        [`Recommend Recalc_${role.nuserrolecode}`]:response.data[`roledetails_${role.nuserrolecode}`][0].nrecomrecalcneed,\r\n                        [`ReTest_${role.nuserrolecode}`]:response.data[`roledetails_${role.nuserrolecode}`][0].nretestneed,\r\n                        [`ReCalc_${role.nuserrolecode}`]:response.data[`roledetails_${role.nuserrolecode}`][0].nrecalcneed,\r\n                        'IDS_AUTOAPPROVAL':response.data[`roledetails_${role.nuserrolecode}`][0].nautoapproval,\r\n                        [`Correction_${role.nuserrolecode}`]:response.data[`roledetails_${role.nuserrolecode}`][0].ncorrectionneed,\r\n                        [`Esign_${role.nuserrolecode}`]:response.data[`roledetails_${role.nuserrolecode}`][0].nesignneed,\r\n                        'filterstatus':filterStatus,\r\n                        'decisionstatus':decisionStatus,\r\n                        'validationstatus':validationStatus,\r\n                        'approvalstatus':response.data[`roledetails_${role.nuserrolecode}`][0].napprovalstatuscode,\r\n                        'checklist':response.data[`checklist_${role.nuserrolecode}`][0].nchecklistversioncode\r\n                    }\r\n                    selectedRecord['sversionname']=response.data.versiondetails.sversionname\r\n                    //ALPD-4833--Vignesh R(08-10-2024)\r\n                    selectedRecord['nneedautoinnerband']=response.data.versiondetails.nneedautoinnerband\r\n                    selectedRecord['nneedautoouterband']=response.data.versiondetails.nneedautoouterband\r\n\r\n                    response.data.versionConfig.map(action =>{\r\nif(action.ntranscode===transactionStatus.AUTOAPPROVAL)\r\n{\r\n    selectedRecord[action.stransdisplaystatus]=response.data.versiondetails.nneedautoapproval\r\n}\r\nelse if(action.ntranscode===transactionStatus.AUTOCOMPLETE)\r\n{\r\n    selectedRecord[action.stransdisplaystatus]=response.data.versiondetails.nneedautocomplete\r\n}\r\n\r\n                    })\r\n                   \r\n                  \r\n                    selectedRecord['IDS_JOBALLOCATION']=response.data.versiondetails.nneedjoballocation\r\n                    selectedRecord['IDS_AUTOALLOT']=response.data.versiondetails.nautoallot\r\n                    selectedRecord[`approvalstatus_${role.nuserrolecode}`]=[{value:response.data[`roledetails_${role.nuserrolecode}`][0].napprovalstatuscode,label:response.data[`roledetails_${role.nuserrolecode}`][0].sapprovalstatus}]\r\n                    selectedRecord[`filterstatus_${role.nuserrolecode}`]=filterStatusValues\r\n                    selectedRecord[`validationstatus_${role.nuserrolecode}`]=validationStatusValues\r\n                    selectedRecord[`decisionstatus_${role.nuserrolecode}`]=decisionStatusValues\r\n                    selectedRecord[`checklist_${role.nuserrolecode}`]=checklistValues\r\n                    selectedRecord[`checklistVersion_${role.nuserrolecode}`]=checklistVersionValues\r\n                    selectedRecord[`actionStatus_${role.nuserrolecode}`]=actionArray\r\n                    //selectedRecord[role.nuserrolecode]=response.data[`roledetails_${role.nuserrolecode}`][0]\r\n\r\n                    return null;\r\n                });\r\n                dispatch({type: DEFAULT_RETURN, payload:{\r\n                    openModal:true,operation:\"update\",\r\n                    userRoleTree,\r\n                    //userRoleTree:sortData(response.data.userroletree,'ascending','nlevelno'),\r\n                    filterStatusOptions,\r\n                    validationStatusOptions,\r\n                    approvalStatusOptions,\r\n                    decisionStatusOptions,\r\n                    checklistOptions,\r\n                    actionStatus:response.data.actionStatus?response.data.actionStatus:[],\r\n                    roleConfig:sortData(response.data.roleConfig,'ascending','nsorter'),\r\n                    versionConfig:response.data.versionConfig,\r\n                    selectedRecord,masterData,ncontrolcode,loading:false  \r\n\r\n                }})\r\n            })\r\n            .catch(error => {\r\n                dispatch({type: DEFAULT_RETURN, payload: {loading:false}})\r\n                if (error.response.status === 500){\r\n                    toast.error(error.message);\r\n                } \r\n                else{               \r\n                    toast.warn(error.response.data);\r\n                }         \r\n            })\r\n        } \r\n      }\r\n    }\r\n}\r\nexport function getFilterChange(inputParamData,oldState){\r\n    return function(dispatch){\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"approvalconfig/getApprovalConfigFilter\",inputParamData.inputData)\r\n            .then(response =>{\r\n                \r\n                const RegistrationTypeListMap = constructOptionList( response.data.registrationtype || [], \"nregtypecode\", \"sregtypename\", 'ascending', 'nsorter', false);\r\n                const RegistrationSubTypeListMap = constructOptionList( response.data.registrationsubtype || [], \"nregsubtypecode\", \"sregsubtypename\", 'ascending', 'nsorter', false);\r\n                let RegistrationTypeList = RegistrationTypeListMap.get(\"OptionList\");\r\n                let RegistrationSubTypeList = RegistrationSubTypeListMap.get(\"OptionList\");\r\n                dispatch({type: DEFAULT_RETURN, payload:{\r\n                    masterData:{\r\n                        ...inputParamData.masterData,\r\n                        approvalsubtype:oldState.approvalsubtype,\r\n                        approvalSubTypeValue:oldState.approvalSubTypeValue,\r\n                        RegistrationTypeList:response.data.registrationtype?RegistrationTypeList:oldState.RegistrationTypeList,\r\n                        RegistrationSubTypeList:response.data.registrationsubtype?RegistrationSubTypeList:oldState.RegistrationSubTypeList,\r\n                        registrationType:response.data.registrationtype&&response.data.registrationtype.length>0?response.data.registrationtype:oldState.registrationtype,\r\n                        //registrationType:response.data.registrationtype&&response.data.registrationtype.length>0?sortData(response.data.registrationtype,\"ascending\",\"nregtypecode\"):oldState.registrationtype,\r\n                        registrationTypeValue:response.data.registrationtype?response.data.registrationtype.length>0?{value:response.data.registrationtype[0].nregtypecode,label:response.data.registrationtype[0].sregtypename}:oldState.registrationTypeValue:oldState.registrationTypeValue,\r\n                        //registrationSubType:response.data.registrationsubtype&&response.data.registrationsubtype.length>0?sortData(response.data.registrationsubtype,\"descending\",\"nregsubtypecode\"):oldState.registrationsubtype,\r\n                        registrationSubType:response.data.registrationsubtype&&response.data.registrationsubtype.length>0?response.data.registrationsubtype:oldState.registrationsubtype,\r\n                        registrationSubTypeValue:response.data.registrationsubtype?response.data.registrationsubtype.length>0?{value:response.data.registrationsubtype[0].nregsubtypecode,label:response.data.registrationsubtype[0].sregsubtypename}:oldState.registrationSubTypeValue:oldState.registrationSubTypeValue,\r\n                        approvalConfigCode:response.data.approvalConfigCode,\r\n                        treeVersionTemplate:response.data.treeVersionTemplate,\r\n                        userroleTemplateValue: response.data.userroleTemplateValue,\r\n\r\n                        // versionData:sortData(response.data.versionData),\r\n                        // selectedVersion:response.data.selectedVersion,\r\n                        // approvalconfigRoleNames:response.data.approvalconfigRoleNames,\r\n                        // showAccordion:true,\r\n                        // roleFilters:response.data.roleFilters,\r\n                        // roleValidations:response.data.roleValidations,\r\n                        // roleDecisions:response.data.roleDecisions,\r\n                        // roleActions:response.data.roleActions,\r\n                        // roleConfig:response.data.roleConfig&&response.data.roleConfig.length>0&&sortData(response.data.roleConfig,'ascending','nsorter'),\r\n                        // versionConfig:response.data.versionConfig,\r\n                        // searchedData:undefined\r\n                    },loading:false\r\n                    \r\n\r\n                }})\r\n            })\r\n            .catch(error=>{\r\n                dispatch({type: DEFAULT_RETURN, payload: {loading:false}})\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function getApprovalConfigurationVersion(inputParamData){\r\n    return function(dispatch){\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"approvalconfig/getApprovalConfigVersion\",inputParamData.inputData)\r\n            .then(response =>{\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: { masterData: [], organisation: undefined, }\r\n                  }\r\n                dispatch(updateStore(updateInfo))\r\n                //ALPD-4803 done by Dhanushya RI,To check searchref key is present or not\r\n                if(inputParamData.searchRef!==undefined && inputParamData.searchRef && inputParamData.searchRef.current && inputParamData.searchRef.current.value!==\"\" ){\r\n                    inputParamData.searchRef.current.value=\"\"\r\n                    inputParamData.masterData[\"searchedData\"]=undefined\r\n                }\r\n\r\n                dispatch({type: DEFAULT_RETURN, payload:{\r\n                    masterData:{\r\n                        ...inputParamData.masterData,\r\n                        versionData:sortData(response.data.versionData),\r\n                        selectedVersion:response.data.selectedVersion,\r\n                        approvalconfigRoleNames:response.data.approvalconfigRoleNames,\r\n                        selectedRole:response.data.approvalconfigRoleNames?response.data.approvalconfigRoleNames.length>0?sortData(response.data.approvalconfigRoleNames,'ascending','nlevelno')[0]:{}:{},\r\n                        showAccordion:true,\r\n                        roleFilters:response.data.roleFilters,\r\n                        roleValidations:response.data.roleValidations,\r\n                        roleDecisions:response.data.roleDecisions,\r\n                        roleActions:response.data.roleActions,\r\n                        roleConfig:response.data.roleConfig&&response.data.roleConfig.length>0&&sortData(response.data.roleConfig,'ascending','nsorter'),\r\n                        versionConfig:response.data.versionConfig,\r\n                        searchedData:undefined\r\n                    },loading:false\r\n                    \r\n\r\n                }})\r\n            })\r\n            .catch(error=>{\r\n                dispatch({type: DEFAULT_RETURN, payload: {loading:false}})\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function copyVersion(napprovalsubtypecode,userInfo,masterData,ncontrolcode){\r\n    return function(dispatch){\r\n        dispatch(initRequest(true)); \r\n        rsapi.post('approvalconfig/getCopyRegType',{napprovalconfigversioncode: masterData.selectedVersion.napproveconfversioncode,napprovalsubtypecode:napprovalsubtypecode,userinfo:userInfo})\r\n                .then(response =>{\r\n                    let selectedRecord={};\r\n                    const RegistrationTypeListMap = constructOptionList(response.data.CopyRegType || [], \"nregtypecode\", \"sregtypename\", 'ascending', 'nsorter', false);\r\n                    const RegistrationSubTypeListMap = constructOptionList(response.data.CopyRegSubType || [], \"nregsubtypecode\", \"sregsubtypename\", 'ascending', 'nsorter', false);\r\n                    let optCopyRegType = RegistrationTypeListMap.get(\"OptionList\");\r\n                    let optCopyRegSubType = RegistrationSubTypeListMap.get(\"OptionList\");\r\n                    selectedRecord['regtype']=response.data.CopyRegType.length>0?{value:response.data.CopyRegType[0].nregtypecode,label:response.data.CopyRegType[0].sregtypename}:[]\r\n                    selectedRecord['regsubtype']=response.data.CopyRegSubType?response.data.CopyRegSubType.length>0?{value:response.data.CopyRegSubType[0].nregsubtypecode,label:response.data.CopyRegSubType[0].sregsubtypename}:[]:[]\r\n                    dispatch({type: DEFAULT_RETURN, payload:{\r\n                        operation:\"copy\",openModal:true,\r\n                        optCopyRegSubType,\r\n                        optCopyRegType,\r\n                        selectedRecord,\r\n                        masterData,ncontrolcode,loading:false  \r\n                    }})\r\n                })\r\n                .catch(error=>{\r\n                    dispatch({type: DEFAULT_RETURN, payload: {loading:false}})\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    }\r\n                    else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                })\r\n    }\r\n\r\n}\r\nexport function getCopySubType(comboData,selectedRecord,userInfo,masterData,optCopyRegType){\r\n    return function(dispatch){\r\n        dispatch(initRequest(true));\r\n        rsapi.post('approvalconfig/getCopyRegSubType',{nregtypecode:comboData.value,userinfo:userInfo})\r\n        .then(response =>{\r\n            const RegistrationSubTypeListMap = constructOptionList(response.data.CopyRegSubType || [], \"nregsubtypecode\", \"sregsubtypename\", 'ascending', 'nsorter', false);\r\n            let optCopyRegSubType = RegistrationSubTypeListMap.get(\"OptionList\");\r\n            selectedRecord['regsubtype']=response.data.CopyRegSubType.length>0?{value:response.data.CopyRegSubType[0].nregsubtypecode,label:response.data.CopyRegSubType[0].sregsubtypename}:[]\r\n            dispatch({type: DEFAULT_RETURN, payload:{\r\n                operation:\"copy\",openModal:true,loading:false  ,\r\n                optCopyRegType,\r\n                optCopyRegSubType,\r\n                selectedRecord,\r\n                masterData\r\n            }})\r\n        })\r\n        .catch(error=>{\r\n            dispatch({type: DEFAULT_RETURN, payload: {loading:false}})\r\n            if (error.response.status === 500) {\r\n                toast.error(error.message);\r\n            }\r\n            else {\r\n                toast.warn(error.response.data);\r\n            }\r\n        })\r\n    }\r\n}\r\nexport function setDefault(inputObj,event){\r\n    let {flag,napprovalconfigrolecode,napprovalsubtypecode,userInfo,masterData}=inputObj;\r\n    let rowData=inputObj.selectedRecord\r\n    return function(dispatch){\r\n        if(event.target.checked){\r\n            let inputData={}\r\n            let url='';\r\n            if(flag===1){\r\n                inputData={\r\n                    napprovalconfigrolecode:napprovalconfigrolecode,\r\n                    napprovalfiltercode:rowData.napprovalfiltercode,\r\n                    napprovalsubtypecode:napprovalsubtypecode,\r\n                    ntransactionstatus:rowData.ntransactionstatus,\r\n                    napprovalconfigversioncode:masterData.selectedVersion.napprovalconfigversioncode,\r\n                    userinfo:userInfo\r\n                }\r\n                url='approvalconfig/setDefaultFilterStatus'\r\n            }else{\r\n                inputData={\r\n                    napprovalconfigrolecode:napprovalconfigrolecode,\r\n                    napprovaldecisioncode:rowData.napprovaldecisioncode,\r\n                    napprovalsubtypecode:napprovalsubtypecode,\r\n                    ntransactionstatus:rowData.ntransactionstatus,\r\n                    napprovalconfigversioncode:masterData.selectedVersion.napprovalconfigversioncode,\r\n                    userinfo:userInfo\r\n                }\r\n                url='approvalconfig/setDefaultDecisionStatus'\r\n            }\r\n            dispatch(initRequest(true));\r\n            rsapi.post(url,inputData)\r\n            .then(response =>{\r\n                dispatch({type: DEFAULT_RETURN, payload:{\r\n                \r\n                    masterData:{\r\n                        ...masterData,\r\n                        showAccordion:true,\r\n                        roleFilters:response.data.roleFilters,\r\n                        roleValidations:response.data.roleValidations,\r\n                        roleDecisions:response.data.roleDecisions,\r\n                        roleActions:response.data.roleActions,\r\n                        roleConfig:sortData(response.data.roleConfig,'ascending','nsorter'),\r\n                        versionConfig:response.data.versionConfig\r\n                    },loading:false  \r\n                }})\r\n            })\r\n            .catch(error=>{\r\n                dispatch({type: DEFAULT_RETURN, payload: {loading:false}})\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport function approveVersion(inputParam){\r\n    return function(dispatch){\r\n            dispatch(initRequest(true));\r\n            rsapi.post(\"approvalconfig/getDesignTemplateMapping\",{...inputParam.inputData})\r\n            .then(response =>{\r\n                const designTemplateMapping=constructOptionList(response.data.DesignTemplateMapping,\r\n                    \"ndesigntemplatemappingcode\",\"sregtemplatename\");\r\n                    const data=designTemplateMapping.get(\"OptionList\");\r\n\r\n                const selectedRecord = data[0] ? {'ndesigntemplatemappingcode':{...data[0]}} : {};\r\n\r\n                dispatch({type: DEFAULT_RETURN, payload:{\r\n                loading:false ,designTemplateMapping: data,\r\n                selectedTemplate:data.length>0&&data[0].item.jsondata,openModal:true,subSampleCheck:response.data.subSampleCheck,\r\n                subSampleTemplate:response.data.subSampleTemplate,\r\n                operation:inputParam.operation,ncontrolcode:inputParam.ncontrolcode,\r\n                // selectedRecord:{'ndesigntemplatemappingcode':{...data[0]}}\r\n                selectedRecord\r\n                }})\r\n            })\r\n            .catch(error=>{\r\n                dispatch({type: DEFAULT_RETURN, payload: {loading:false}})\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n"]},"metadata":{},"sourceType":"module"}