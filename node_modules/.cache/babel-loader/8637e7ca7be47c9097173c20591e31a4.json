{"ast":null,"code":"import Axios from \"axios\";\nimport { toast } from \"react-toastify\";\nimport { intl } from \"../components/App\";\nimport { constructOptionList, replaceUpdatedObject, sortData, getFilterConditionsBasedonDataType, getSameRecordFromTwoArrays } from \"../components/CommonScript\";\nimport { designProperties, reportCOAType, REPORTTYPE, SampleType, transactionStatus } from \"../components/Enumeration\";\nimport TrainingUpdateChildTab from \"../pages/competencemanagement/trainingupdate/TrainingUpdateChildTab\";\nimport rsapi from \"../rsapi\";\nimport { initRequest } from \"./LoginAction\";\nimport { DEFAULT_RETURN } from \"./LoginTypes\";\nimport { crudMaster } from \"./ServiceAction\";\nimport { getFieldSpecification as getFieldSpecification3 } from '../components/type3component/Type3FieldSpecificationList';\nimport { filterObjectForReactAwesomeFilter } from \"./RegistrationAction\";\nimport { fileViewUrl, reportUrl } from '../rsapi'; // export function getReleasedSelectedSampleSubSampleTest(userInfo, Data1, inputData) {\n\nimport { Utils as QbUtils } from \"@react-awesome-query-builder/ui\";\nconst {\n  checkTree,\n  loadTree\n} = QbUtils; //     return function (dispatch) {\n//       if (inputData !== undefined &&inputData.npreregno!==\"\") {\n//         dispatch(initRequest(true));\n//         return rsapi.post(\"release/updateRelease\",\n//             inputData\n//         )\n//             .then(response => {\n//                 if (response.data.statusCodeValue !== 200) {\n//                     toast.warn(intl.formatMessage({\n//                         id: response.data.body\n//                     }));\n//                     dispatch({\n//                         type: DEFAULT_RETURN,\n//                         payload: {\n//                             loading: false\n//                         }\n//                     });\n//                 }\n//                 else {\n//                     if (response.data.body[\"PortalStatus\"] && response.data.body[\"PortalStatus\"].length > 0) {\n//                         dispatch(UpdateExternalOrderStatus(response.data.body[\"PortalStatus\"],inputData));\n//                     }\n//                     let masterData = {\n//                         ...Data1, ...response.data.body,\n//                     };\n//                     console.log(\"ReleasedTest,\", masterData);\n//                      sortData(masterData.ReleaseHistory,\"\",'sreportno');\n//                   //  dispatch(generateReport(inputData,masterData))\n//                     dispatch({\n//                         type: DEFAULT_RETURN, payload: {\n//                             masterData,\n//                             change: inputData.change,\n//                             loading: false,\n//                             openModal:false\n//                         }\n//                     });\n//                 }\n//             })\n//             .catch(error => {\n//                 dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\n//                 if (error.response.status === 500) {\n//                     toast.error(error.message);\n//                     console.log(\"ErrorRelease,\", error);\n//                 }\n//                 else {\n//                     toast.warn(error.response.data);\n//                 }\n//             })\n//         }\n//         else {\n//             toast.warn(intl.formatMessage({\n//                 id: \"IDS_SELECTANYONESAMPLE\"\n//             }));\n//         }\n//     }\n// }\n\nexport function getReleasedRegistrationType(inputData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"release/getRegistrationType\", inputData).then(response => {\n      let responseData = { ...response.data\n      };\n      responseData = sortData(responseData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputData.masterData,\n            ...responseData,\n            SampleTypeValue: inputData.SampleTypeValue,\n            realSampleTypeList: inputData.realSampleTypeList || [],\n            realReportTypeList: inputData.realReportTypeList || [],\n            realRegTypeList: inputData.realRegTypeList || [],\n            realRegSubTypeList: inputData.realRegSubTypeList || [],\n            realFilterStatusList: inputData.realFilterStatusList || [],\n            realApprovalVersionList: inputData.realApprovalVersionList || [],\n            realDesignTemplateMappingList: inputData.realDesignTemplateMappingList || []\n          },\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getReleasedRegistrationSubType(inputData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"release/getRegistrationSubType\", inputData).then(response => {\n      let responseData = { ...response.data\n      };\n      responseData = sortData(responseData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputData.masterData,\n            ...responseData,\n            RegTypeValue: inputData.RegTypeValue,\n            realSampleTypeList: inputData.realSampleTypeList || [],\n            realReportTypeList: inputData.realReportTypeList || [],\n            realRegTypeList: inputData.realRegTypeList || [],\n            realRegSubTypeList: inputData.realRegSubTypeList || [],\n            realFilterStatusList: inputData.realFilterStatusList || [],\n            realApprovalVersionList: inputData.realApprovalVersionList || [],\n            realDesignTemplateMappingList: inputData.realDesignTemplateMappingList || []\n          },\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getReleasedFilterBasedTest(inputData) {\n  return function (dispatch) {\n    if (inputData.napprovalversioncode) {\n      dispatch(initRequest(true));\n      rsapi.post(\"release/getFilterBasedTest\", inputData).then(response => {\n        let responseData = { ...response.data\n        };\n        responseData = sortData(responseData);\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            masterData: { ...inputData.masterData,\n              ...responseData,\n              RegSubTypeValue: inputData.RegSubTypeValue,\n              ndesigntemplatemappingcode: inputData.ndesigntemplatemappingcode,\n              DesignTemplateMappingValue: inputData.DesignTemplateMappingValue\n            },\n            loading: false\n          }\n        });\n\n        if (response.data.rtn) {\n          toast.warn(response.data.rtn);\n        }\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(error.response.data);\n        }\n      });\n    } else {\n      toast.warn(intl.formatMessage({\n        id: \"IDS_PLSSELECTALLVALUESINFILTER\"\n      }));\n    }\n  };\n}\nexport function getReleasedApprovalVersion(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"release/getApprovalVersion\", inputParam.inputData).then(response => {\n      let responseData = { ...response.data\n      };\n      responseData = sortData(responseData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputParam.masterData,\n            ...responseData,\n            realSampleTypeList: inputParam.inputData.realSampleTypeList || [],\n            realReportTypeList: inputParam.inputData.realReportTypeList || [],\n            realRegTypeList: inputParam.inputData.realRegTypeList || [],\n            realRegSubTypeList: inputParam.inputData.realRegSubTypeList || [],\n            realFilterStatusList: inputParam.inputData.realFilterStatusList || [],\n            realApprovalVersionList: inputParam.inputData.realApprovalVersionList || [],\n            realDesignTemplateMappingList: inputParam.inputData.realDesignTemplateMappingList || [] // fromDate: inputParam.inputData.dfrom,\n            // toDate: inputParam.inputData.dto,\n\n          },\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getReleasedSample(inputParam, selectedRecordLogin, selectedRecordState, LoginData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    let urlArray = [];\n    const approvedReportTemplate = rsapi.post(\"release/getApprovedReportTemplate\", inputParam.inputData);\n    const filteredSample = rsapi.post(\"release/getReleaseSample\", inputParam.inputData);\n    urlArray = [filteredSample, approvedReportTemplate];\n    Axios.all(urlArray).then(response => {\n      let reportTemplateList = [];\n      const reportTemplateMap = constructOptionList(response[1].data || [], \"nreporttemplatecode\", \"sreporttemplatename\", \"nreporttemplatecode\", \"ascending\", false);\n      reportTemplateList = reportTemplateMap.get(\"OptionList\");\n      let responseData = { ...response[0].data\n      }; // responseData = sortData(responseData)\n\n      let masterData = {};\n      let nsectioncode = {};\n      let selectedRecord = {};\n      let slideOutClose = true; // if (response.data.ReleasedSampleDetails && response.data.ReleasedSampleDetails.length !== 0 ||\n      //     response.data.ReleaseSample && response.data.ReleaseSample.length === 0) {\n\n      masterData = { ...inputParam.masterData,\n        ...responseData\n      };\n\n      if (nsectioncode !== undefined) {\n        nsectioncode = inputParam.inputData.nsectioncode;\n      }\n\n      if (selectedRecordState !== undefined) {\n        delete selectedRecordState.nreporttemplatecode;\n      }\n\n      selectedRecord = { ...selectedRecordLogin,\n        ...selectedRecordState\n      };\n      masterData[\"reportTemplateList\"] = reportTemplateList;\n      sortData(masterData, \"\", \"ncoaparentcode\");\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false,\n          showFilter: false,\n          nsectioncode: nsectioncode,\n          FilterQueryBuilder: false,\n          screenName: inputParam.inputData.screenName,\n          awesomeTree: inputParam.inputData.isClear ? undefined : inputParam.inputData.awesomeTree,\n          filterquery: inputParam.inputData.isClear ? undefined : inputParam.inputData.filterquery,\n          slideOutClose: slideOutClose,\n          selectedRecord,\n          awesomeTree: LoginData && LoginData.awesomeTree,\n          filterquery: LoginData && LoginData.filterquery,\n          fields: LoginData && LoginData.fields,\n          filterQueryTreeStr: LoginData && LoginData.filterQueryTreeStr\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getApprovedSample(inputParam, ncontrolCode) {\n  if (inputParam.masterData.realReportTypeValue.ncoareporttypecode === reportCOAType.PATIENTWISE) {\n    let fieldList = [];\n    fieldList = getFieldSpecification3().get(\"ExternalOrder\") || [];\n    const languageTypeCode = inputParam.inputData.userinfo.slanguagetypecode;\n    const {\n      fields,\n      gridColumns\n    } = filterObjectForReactAwesomeFilter(fieldList[0].filterfields, languageTypeCode, undefined, undefined);\n    let awesomeTree = fieldList[0].awesomeTree ? checkTree(loadTree(fieldList[0].awesomeTree), fieldList[0].awesomeConfig) : undefined;\n    return function (dispatch) {\n      let urlArray = [];\n      dispatch(initRequest(true));\n      Axios.all(urlArray).then(response => {\n        let ProjectTypeList = [];\n        let sectionList = [];\n        let masterData = {};\n        let openModal = true;\n        masterData = { ...inputParam.masterData\n        };\n        sortData(masterData);\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            fields,\n            gridColumns,\n            awesomeTree,\n            seletedFilterComponent: fieldList[0],\n            // awesomeTree:fieldList[0].awesomeTree,\n            awesomeConfig: undefined,\n            lstPatient: [],\n            kendoSkip: 0,\n            kendoTake: 5,\n            masterData,\n            expandCheck: false,\n            ProjectTypeList,\n            ncontrolCode,\n            isDeletePopup: false,\n            isComboCheck: false,\n            isEditPopup: false,\n            screenName: \"IDS_PATIENTSEARCH\",\n            sectionList,\n            loading: false,\n            showFilter: false,\n            openModal: openModal,\n            isAddPopup: true,\n            operation: \"save\",\n            slideOutClose: false // ALPD-4208 (22-05-2024) Changes done for expand function in add sample popup\n\n          }\n        });\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(error.response.data);\n        }\n      });\n    };\n  } else {\n    return function (dispatch) {\n      let ismandatory = false;\n      inputParam.DynamicReportFilterTypeItem && inputParam.DynamicReportFilterTypeItem.map(x => {\n        if (x.ismandatory) {\n          ismandatory = true;\n        }\n      });\n\n      if (ismandatory) {\n        inputParam['inputData'] = { ...inputParam.inputData,\n          ismandatory: true\n        };\n      }\n\n      const screenName = \"\";\n      let urlArray = [];\n      inputParam.inputData['isAddPopup'] = true;\n      const releaseSample = rsapi.post(\"release/getReleaseSample\", inputParam.inputData); //  const reportType = rsapi.post(\"release/getCOAReportType\", { userinfo: inputParam.inputData.userinfo });\n\n      const projectType = rsapi.post(\"release/getApprovedProjectType\", inputParam.inputData);\n      const sectionType = rsapi.post(\"release/getSection\", inputParam.inputData);\n      const testList = rsapi.post(\"release/getTest\", inputParam.inputData);\n      const approvedReportTemplate = rsapi.post(\"release/getApprovedReportTemplate\", inputParam.inputData); // if (inputParam.inputData.ncoareporttypecode === reportCOAType.PROJECTWISE ||\n      //     inputParam.inputData.nsampletypecode === SampleType.PROJECTSAMPLETYPE && inputParam.inputData.ncoareporttypecode === reportCOAType.SECTIONWISEMULTIPLESAMPLE) {\n      //     urlArray = [projectType,sectionType];\n      // }\n      // else if (inputParam.inputData.isneedsection === transactionStatus.YES || inputParam.inputData.ncoareporttypecode === reportCOAType.SECTIONWISE || inputParam.inputData.ncoareporttypecode === reportCOAType.SECTIONWISEMULTIPLESAMPLE) {\n      //     urlArray = [sectionType];\n      // }\n      // else {\n      //     urlArray = [releaseSample\n      //         //,reportType\n      //     ];\n      // }\n\n      urlArray = [releaseSample, projectType, sectionType, testList, approvedReportTemplate];\n\n      if (inputParam.DynamicReportFilterTypeItem && inputParam.DynamicReportFilterTypeItem.length > 0) {\n        let itemList = [];\n        inputParam.DynamicReportFilterTypeItem.map(x => {\n          if (x[designProperties.LISTITEM] === \"combo\") {\n            itemList.push({\n              \"Pkey\": x[designProperties.PRIMARYKEY],\n              \"nquerybuildertablecode\": x[designProperties.QUERYBUILDERTABLECODE],\n              \"tablename\": x[designProperties.TABLENAME],\n              \"columnname\": x[designProperties.COLUMNNAME],\n              \"keyName\": x[designProperties.VALUE],\n              \"isMultiLingual\": x[designProperties.MULTILINGUAL],\n              \"languageTypeCode\": inputParam.inputData.userinfo.slanguagetypecode,\n              \"recordType\": x[designProperties.RECORDTYPE]\n            });\n          }\n        });\n        inputParam[\"inputData\"][\"itemList\"] = itemList;\n        const reportFilterType = rsapi.post(\"release/getComboValues\", { ...inputParam.inputData,\n          'userInfo': inputParam.inputData.userinfo\n        });\n        urlArray.push(reportFilterType);\n      }\n\n      dispatch(initRequest(true));\n      Axios.all(urlArray).then(response => {\n        // const reportTypeMap = constructOptionList(response[1].data.ReportType || [], \"ncoareporttypecode\",\n        //     \"scoareporttypename\", undefined, undefined, false);\n        // const ReportTypeList = reportTypeMap.get(\"OptionList\");\n        let ProjectTypeList = [];\n        let sectionList = []; // let selectedRecord = {\"ncoareporttypecode\": {\n        //     \"value\": response[1].data.ReportType[0].ncoareporttypecode,\n        //      \"label\": response[1].data.ReportType[0].scoareporttypename\n        // }\n        // };\n\n        let masterData = {};\n        let openModal = true;\n        let sectionvalue = [];\n        let comboValues = {};\n        let reportTemplateList = [];\n        let selectedRecord = {};\n        delete selectedRecord[\"nsectioncode\"];\n        delete selectedRecord[\"nreporttemplatecode\"]; // let selectedRecord = inputParam.inputData.selectedRecord;\n        // let selectedRecord = inputParam.selectedRecord;\n        // selectedRecord[\"nmultiplesampleinsinglerelease\"] = inputParam.realReportTypeValue[\"nmultiplesampleinsinglerelease\"];\n\n        const sectionTypeMap = constructOptionList(response[2].data.sectionList || [], \"nsectioncode\", \"ssectionname\", undefined, undefined, false);\n        sectionList = sectionTypeMap.get(\"OptionList\");\n        sectionList.map(x => sectionvalue.push({\n          \"value\": x.value,\n          \"title\": x.label\n        }));\n        let testListMap = response[3] && response[3].data;\n\n        if (inputParam.inputData.isneedsection !== transactionStatus.YES) {\n          const reportTemplateMap = constructOptionList(response[4].data || [], \"nreporttemplatecode\", \"sreporttemplatename\", \"nreporttemplatecode\", \"ascending\", false);\n          reportTemplateList = reportTemplateMap.get(\"OptionList\");\n        }\n\n        let combovaluesListMap = response[5] && response[5].data;\n        let comboValueList = { ...testListMap,\n          ...combovaluesListMap\n        } || {};\n        comboValues = {\n          \"s.nsectioncode\": sectionvalue,\n          ...comboValueList\n        }; // if (inputParam.inputData.ncoareporttypecode === reportCOAType.PROJECTWISE ||\n        //     inputParam.inputData.nsampletypecode === SampleType.PROJECTSAMPLETYPE && inputParam.inputData.ncoareporttypecode === reportCOAType.SECTIONWISEMULTIPLESAMPLE) {\n        //     const projectTypeMap = constructOptionList(response[0].data || [], \"nprojecttypecode\",\n        //         \"sprojecttypename\", undefined, undefined, false);\n        //     ProjectTypeList = projectTypeMap.get(\"OptionList\");\n        //     masterData = { ...inputParam.masterData, ReleaseSubSample: [], ReleaseTest: [], ReleaseSample: [] };\n        //     if (inputParam.inputData.selectedRecord.nprojecttypecode) {\n        //         delete inputParam.inputData.selectedRecord.nprojecttypecode\n        //     }\n        //     if (inputParam.inputData.selectedRecord.nprojectmastercode) {\n        //         delete inputParam.inputData.selectedRecord.nprojectmastercode\n        //     }\n        //     const sectionTypeMap = constructOptionList(response[1].data.sectionList || [], \"nsectioncode\",\n        //     \"ssectionname\", undefined, undefined, false);\n        // sectionList = sectionTypeMap.get(\"OptionList\");\n        // sectionList.map(x=>sectionvalue.push({\"value\":x.value,\"title\":x.label}));\n        // let comboValueList=response[2] && response[2].data ||{};\n        //  comboValues={\"s.nsectioncode\":sectionvalue,...comboValueList}\n        // }\n        // else \n        // if (inputParam.inputData.isneedsection === transactionStatus.YES || inputParam.inputData.ncoareporttypecode === reportCOAType.SECTIONWISE || inputParam.inputData.ncoareporttypecode === reportCOAType.SECTIONWISEMULTIPLESAMPLE) {\n        //     const sectionTypeMap = constructOptionList(response[0].data.sectionList || [], \"nsectioncode\",\n        //         \"ssectionname\", undefined, undefined, false);\n        //     sectionList = sectionTypeMap.get(\"OptionList\");\n        //     sectionList.map(x=>sectionvalue.push({\"value\":x.value,\"title\":x.label}));\n        //     let comboValueList=response[1] && response[1].data ||{};\n        //      comboValues={\"s.nsectioncode\":sectionvalue,...comboValueList}\n        //     masterData = { ...inputParam.masterData, ReleaseSubSample: [], ReleaseTest: [], ReleaseSample: [] };\n        //     if (inputParam.inputData.selectedRecord.nsectioncode) {\n        //         delete inputParam.inputData.selectedRecord.nsectioncode\n        //     }\n        // }\n        // else {\n\n        if (ismandatory) {\n          masterData = { ...inputParam.masterData,\n            ReleaseSubSample: [],\n            ReleaseTest: [],\n            ReleaseSample: []\n          };\n        } else {\n          if (response[0].data && response[0].data.ReleaseSample.length !== 0) {\n            let responseData = { ...response[0].data\n            };\n            masterData = { ...inputParam.masterData,\n              ...responseData\n            };\n          } else {\n            let responseData = { ...response[0].data\n            };\n            masterData = { ...inputParam.masterData,\n              ...responseData\n            };\n            openModal = false;\n            toast.warn(intl.formatMessage({\n              id: \"IDS_NOSAMPLESAREAVAILABLE\"\n            }));\n          }\n        } // }\n\n\n        let awesomeTree;\n        let filterquery;\n        let filterQueryTreeStr;\n        let fields = getFilterConditionsBasedonDataType(inputParam.extractedColumnList, comboValues);\n\n        if (inputParam.DynamicDefaultStructureItem && inputParam.DynamicDefaultStructureItem.nsampletypecode === inputParam.inputData.nsampletypecode && inputParam.DynamicDefaultStructureItem.nregtypecode === inputParam.inputData.nregtypecode && inputParam.DynamicDefaultStructureItem.nregsubtypecode === inputParam.inputData.nregsubtypecode) {\n          awesomeTree = inputParam.DynamicDefaultStructureItem && inputParam.DynamicDefaultStructureItem.awesomeTree && checkTree(loadTree(inputParam.DynamicDefaultStructureItem.awesomeTree), inputParam.DynamicDefaultStructureItem.awesomeConfig);\n          filterquery = inputParam.DynamicDefaultStructureItem.filterquery;\n          filterQueryTreeStr = inputParam.DynamicDefaultStructureItem.filterQueryTreeStr;\n        } else {\n          awesomeTree = undefined;\n        }\n\n        sortData(masterData);\n        masterData[\"reportTemplateList\"] = reportTemplateList;\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            masterData,\n            selectedRecord,\n            expandCheck: false,\n            ProjectTypeList,\n            ncontrolCode,\n            isDeletePopup: false,\n            isComboCheck: false,\n            isEditPopup: false,\n            screenName: inputParam.inputData.screenName,\n            sectionList,\n            loading: false,\n            showFilter: false,\n            openModal: openModal,\n            isAddPopup: true,\n            operation: \"save\",\n            kendoSkip: 0,\n            kendoTake: 5,\n            sectionvalue,\n            comboValues,\n            awesomeTree: awesomeTree,\n            filterquery,\n            fields,\n            filterQueryTreeStr,\n            FilterQueryBuilder: false,\n            screenNameCopy: inputParam.inputData.screenName,\n            ismandatory,\n            slideOutClose: false // ALPD-4208 (22-05-2024) Changes done for expand function in add sample popup\n            //awesomeConfig:undefined\n\n          }\n        });\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(error.response.data);\n        }\n      });\n    };\n  }\n}\nexport function generateReleasedReport(inputData, Data, preventtb) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    let urlArray = []; //   const releaseSample = rsapi.post(\"release/updateRelease\", inputData)  ;\n    //   const afterCorrection = rsapi.post(\"release/updateReleaseAfterCorrection\", inputData)  ;\n\n    inputData['preventTbFlow'] = preventtb === true ? preventtb : false;\n\n    if (inputData.listStatus === transactionStatus.CORRECTION) {\n      const afterCorrection = rsapi.post(\"release/updateReleaseAfterCorrection\", inputData);\n      urlArray = [afterCorrection];\n    } else {\n      const releaseSample = rsapi.post(\"release/updateRelease\", inputData);\n      urlArray = [releaseSample];\n    }\n\n    Axios.all(urlArray).then(response => {\n      if (response[0].data.rtn === \"MappingNeeded\") {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false,\n            modalShow: false,\n            // selectedRecord: {}, \n            loadEsign: false //openModal: false,\n            // preventTbCheck:true\n\n          }\n        });\n        inputData.confirmMessage.confirm(\"PortalMapping\", intl.formatMessage({\n          id: \"IDS_SUBSAMPLEWASNOTMAPPED\"\n        }), intl.formatMessage({\n          id: \"IDS_DOYOUWANTTOCONTINUEWITHOUTSENDRESULTTOPREVENTTB\"\n        }), intl.formatMessage({\n          id: \"IDS_OK\"\n        }), intl.formatMessage({\n          id: \"IDS_CANCEL\"\n        }), () => dispatch(generateReleasedReport(inputData, Data, true)), false, () => dispatch(cancelPopUp(inputData, Data)));\n      } else {\n        // if (response[0].data[\"isPortalData\"] && response[0].data[\"PortalStatus\"] && response[0].data[\"PortalStatus\"].length > 0) {\n        //     dispatch(UpdateExternalOrderStatus(response[0].data[\"PortalStatus\"], inputData));\n        // }\n        if (response[0].data[\"PreventTb\"]) {\n          toast.warn(response[0].data[\"PreventTb\"]);\n        } // ALPD-4229 (30-05-2024) Added code when search and do action\n\n\n        let searchedData = Data.searchedData;\n\n        if (Data.searchedData && Data.searchedData !== undefined && Data.searchedData.length > 0) {\n          searchedData = response[0].data && response[0].data.ReleaseHistory && getSameRecordFromTwoArrays(response[0].data.ReleaseHistory, Data.searchedData, \"ncoaparentcode\");\n        }\n\n        sortData(searchedData, '', 'ncoaparentcode'); // ALPD-4229 (12-06-2024) Added sortData for searchedData\n\n        let masterData = { ...Data,\n          ...response[0].data,\n          searchedData\n        }; //Added by sonia on 11-06-2024 for JIRA ID:4360  Auto Download reports\n\n        if (inputData.autoDownloadReport) {\n          if (response[0].data && response[0].data.rtn) {\n            if (response[0].data.rtn === \"Success\") {\n              let value = \"\";\n              value = response[0][\"data\"][\"reportViewURL\"];\n              var win = window.open(value);\n\n              if (win) {\n                win.focus();\n              } else {\n                intl.warn('IDS_PLEASEALLOWPOPUPSFORTHISWEBSITE');\n              } // Commented by sonia on 11-06-2024 for JIRA ID:4360  Auto Download reports\n              // document.getElementById(\"download_data\").setAttribute(\"href\", response[0].data.filepath);\n              // document.getElementById(\"download_data\").click();\n\n            } else {\n              toast.warn(response[0].data.rtn);\n            }\n          }\n        }\n\n        sortData(masterData.ReleaseHistory, \"\", 'ncoaparentcode');\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false,\n            change: inputData.change,\n            masterData,\n            modalShow: false,\n            selectedRecord: {},\n            loadEsign: false,\n            openModal: false\n          }\n        });\n      }\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        //toast.warn(error.response.data['rtn']);\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function cancelPopUp(inputData, Data) {\n  return function (dispatch) {\n    dispatch({\n      type: DEFAULT_RETURN,\n      payload: {\n        loading: false,\n        modalShow: false,\n        selectedRecord: {},\n        loadEsign: false,\n        openModal: false\n      }\n    });\n  };\n}\nexport function getReleasedFilterStatus(inputData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"release/getReleaseConfigVersionRegTemplateDesign\", inputData).then(response => {\n      let responseData = { ...response.data\n      };\n      responseData = sortData(responseData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputData.masterData,\n            ...responseData,\n            RegSubTypeValue: inputData.RegSubTypeValue\n          },\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getReleasedDataDetails(inputParam, isServiceRequired) {\n  return function (dispatch) {\n    let inputParamData = {\n      dfrom: inputParam.inputData.dfrom,\n      dto: inputParam.inputData.dto,\n      nsampletypecode: inputParam.inputData.nsampletypecode,\n      nregtypecode: inputParam.inputData.nregtypecode,\n      nregsubtypecode: inputParam.inputData.nregsubtypecode,\n      ntransactionstatus: inputParam.inputData.ntransactionstatus,\n      nsectioncode: inputParam.inputData.nsectioncode,\n      ntestcode: inputParam.inputData.ntestcode,\n      napprovalversioncode: inputParam.inputData.napprovalversioncode,\n      napprovalconfigcode: inputParam.inputData.napprovalconfigcode,\n      userinfo: inputParam.inputData.userinfo,\n      nneedsubsample: inputParam.inputData.nneedsubsample,\n      // ncoaparentcode: inputParam.ncoaparentcode,\n      ncoaparentcode: inputParam.releaseno ? inputParam.releaseno.map(item => item.ncoaparentcode).join(\",\") : \"-1\",\n      npreregno: inputParam.npreregno,\n      ncoareporttypecode: inputParam.inputData.ncoareporttypecode,\n      isneedsection: inputParam.inputData.isneedsection,\n      ndesigntemplatemappingcode: inputParam.masterData.ndesigntemplatemappingcode,\n      isAddPopup: false\n    };\n    dispatch(initRequest(true));\n    rsapi.post(\"release/getReleaseSample\", inputParamData).then(response => {\n      let responseData = { ...response.data\n      }; // responseData = sortData(responseData)\n\n      let masterData = { ...inputParam.masterData,\n        ...responseData\n      };\n      sortData(masterData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false,\n          showFilter: false,\n          expandCheck: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getApprovedProjectByProjectType(inputData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"release/getApprovedProjectByProjectType\", inputData).then(response => {\n      const projectMasterMap = constructOptionList(response.data.projectMasterList || [], \"nprojectmastercode\", \"sprojectcode\", undefined, undefined, false);\n      const projectMasterList = projectMasterMap.get(\"OptionList\");\n      let responseData = { ...response.data\n      };\n      responseData = sortData(responseData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          projectMasterList,\n          masterData: { ...inputData.masterData,\n            ...responseData,\n            ReleaseSample: []\n          },\n          // selectedRecord: {},\n          loading: false,\n          expandCheck: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getApprovedProjectType(inputData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"release/getApprovedProjectType\", inputData).then(response => {\n      const projectTypeMap = constructOptionList(response.data || [], \"nprojecttypecode\", \"sprojecttypename\", undefined, undefined, false);\n      const ProjectTypeList = projectTypeMap.get(\"OptionList\"); //     const projectMasterMap = constructOptionList(response.data || [], \"nprojecttypecode\",\n      //     \"sprojecttypename\", undefined, undefined, false);\n      // const projectMasterList = projectMasterMap.get(\"OptionList\");\n\n      let responseData = { ...response.data\n      };\n      responseData = sortData(responseData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          ProjectTypeList,\n          masterData: { ...inputData.masterData,\n            ...responseData,\n            ProjectTypeValue: inputData.ProjectTypeValue\n          },\n          loading: false,\n          expandCheck: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getSectionForSectionWise(inputData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"release/getSection\", inputData.inputData).then(response => {\n      const sectionMap = constructOptionList(response.data.sectionList || [], \"nsectioncode\", \"ssectionname\", undefined, undefined, false);\n      const sectionList = sectionMap.get(\"OptionList\");\n      let responseData = { ...response.data\n      };\n      responseData = sortData(responseData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          sectionList,\n          masterData: { ...inputData.masterData,\n            ...responseData,\n            ReleaseSample: []\n          },\n          loading: false,\n          expandCheck: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getReportForPortal(inputData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"release/SendToPortalReport\", inputData).then(response => {\n      if (response.data[\"rtn\"]) {\n        toast.warn(response.data.rtn);\n      }\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\n\nfunction UpdateExternalOrderStatus(portallist, inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(String(inputParam[\"url\"]) + \"/portal/UpdateMultiSampleStatus\", JSON.stringify(portallist), {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(response => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response !== undefined && error.response.status === 500) {\n        toast.error(error.message);\n      } else if (error.response === undefined) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\n\nexport function getApprovedRecordsAsDraft(inputData, Data1, seletedRecord) {\n  return function (dispatch) {\n    if (inputData !== undefined && inputData.npreregno !== \"\") {\n      // ALPD-4229 (30-05-2024) Added searchRef to clear search text in search filter\n      let searchRef = inputData.searchRef;\n      delete inputData.searchRef;\n      dispatch(initRequest(true));\n      return rsapi.post(\"release/saveRelease\", inputData).then(response => {\n        if (response.data.rtn === \"Success\") {\n          //SearchRef undefined issue fixed - L.Subashini\n          if (searchRef !== undefined) searchRef.current.value = \"\";\n          let masterData = { ...Data1,\n            ...response.data,\n            searchedData: undefined\n          };\n          delete seletedRecord.nreporttemplatecode;\n          seletedRecord[\"nisarnowiserelease\"] = transactionStatus.NO;\n          sortData(masterData.ReleaseHistory, \"\", 'ncoaparentcode');\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              masterData,\n              change: inputData.change,\n              loading: false,\n              loadEsign: false,\n              openModal: false,\n              expandCheck: false,\n              slideOutClose: true // ALPD-4208 (22-05-2024) Changes done for expand function in add sample popup\n\n            }\n          });\n        } else {\n          toast.warn(response.data.rtn);\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              //  masterData,\n              change: inputData.change,\n              loading: false,\n              // loadEsign: false,\n              //openModal: false,\n              slideOutClose: false,\n              expandCheck: false\n            }\n          });\n        }\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(error.message); //  console.log(\"ErrorRelease,\", error);\n        } else {\n          toast.warn(error.response.data);\n        }\n      });\n    } else {\n      toast.warn(intl.formatMessage({\n        id: \"IDS_SELECTANYONESAMPLE\"\n      }));\n    }\n  };\n}\nexport function preliminaryReport(inputParam, Data, screenName) {\n  return function (dispatch) {\n    dispatch(initRequest(true)); // const inputData = {\n    //     npreregno: inputParam.npreregno,\n    //  //   nsectioncode: inputParam.nsectioncode || -1,\n    //     userinfo: inputParam.userinfo,\n    //     nprimarykey: inputParam.npreregno,\n    //     nreporttypecode: REPORTTYPE.COAREPORT,\n    //     sprimarykeyname: \"npreregno\",\n    //     ncontrolcode: inputParam.ncontrolCode,\n    //     nregtypecode: inputParam.nregtypecode,\n    //     nregsubtypecode: inputParam.nregsubtypecode,\n    //     ntransactiontestcode:inputParam.ntransactiontestcode,\n    //     napproveconfversioncode: inputParam.napprovalversioncode,\n    //     ncoaparentcode: inputParam.ncoaparentcode,\n    //     ntransactionstatus:inputParam.ntransactionstatus\n    // }\n    // rsapi.post(\"release/generateReleasedReport\", inputParam.inputData)\n\n    rsapi.post(\"release/preliminaryRegenerateReport\", inputParam.inputData).then(response => {\n      // ALPD-4229 (30-05-2024) Added code when search and do action\n      let searchedData = Data.searchedData;\n\n      if (Data.searchedData && Data.searchedData !== undefined && Data.searchedData.length > 0) {\n        searchedData = response.data && response.data.ReleaseHistory && getSameRecordFromTwoArrays(response.data.ReleaseHistory, Data.searchedData, \"ncoaparentcode\");\n      }\n\n      sortData(searchedData, '', 'ncoaparentcode'); // ALPD-4229 (12-06-2024) Added sortData for searchedData\n\n      let masterData = { ...Data,\n        ...response.data,\n        searchedData\n      };\n      sortData(masterData.ReleaseHistory, \"\", 'ncoaparentcode'); //Added by sonia on 11-06-2024 for JIRA ID:4360  Auto Download reports\n\n      if (inputParam.inputData.autoDownloadReport) {\n        if (response.data.rtn === \"Success\") {\n          let value = \"\";\n          value = response.data[\"reportViewURL\"];\n          var win = window.open(value);\n\n          if (win) {\n            win.focus();\n          } else {\n            intl.warn('IDS_PLEASEALLOWPOPUPSFORTHISWEBSITE');\n          } //Commented by sonia on 11-06-2024 for JIRA ID:4360  Auto Download reports\n          //document.getElementById(\"download_data\").setAttribute(\"href\", response.data.filepath);\n          //document.getElementById(\"download_data\").click();\n\n        } else {\n          toast.warn(response.data.rtn);\n        }\n      }\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false,\n          change: inputParam.change,\n          masterData,\n          screenName: screenName,\n          modalShow: false,\n          selectedRecord: {},\n          loadEsign: false,\n          openModal: inputParam.inputData.openModal\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data['rtn']);\n      }\n    });\n  };\n}\nexport function previewAndFinalReport(inputParam, Data, screenName) {\n  return function (dispatch) {\n    dispatch(initRequest(true)); // const inputData = {\n    //     npreregno: inputParam.npreregno,\n    //  //   nsectioncode: inputParam.nsectioncode || -1,\n    //     userinfo: inputParam.userinfo,\n    //     nprimarykey: inputParam.npreregno,\n    //     nreporttypecode: REPORTTYPE.COAREPORT,\n    //     sprimarykeyname: \"npreregno\",\n    //     ncontrolcode: inputParam.ncontrolCode,\n    //     nregtypecode: inputParam.nregtypecode,\n    //     nregsubtypecode: inputParam.nregsubtypecode,\n    //     ntransactiontestcode:inputParam.ntransactiontestcode,\n    //     napproveconfversioncode: inputParam.napprovalversioncode,\n    //     ncoaparentcode: inputParam.ncoaparentcode,\n    //     ntransactionstatus:inputParam.ntransactionstatus\n    // }\n    // rsapi.post(\"release/generateReleasedReport\", inputParam.inputData)\n\n    rsapi.post(\"release/preliminaryRegenerateReport\", inputParam.inputData).then(response => {\n      if (response.data.sexporttype === \"viewer\") {\n        if (response.data.sourceparameter != undefined && response.data.sourceparameter != \"\") {\n          let mrtfilePath = reportUrl() + \"?name=\" + inputParam.userinfo.sreportingtoolfilename //en-xml\n          + \"&slanguagetypecode=\" + inputParam.userinfo.sreportlanguagecode //en-us\n          + \"&foldername=\" + response.data.sreportname //\"Quotation-002\"//this.props.Login.masterData.SelectedReportDetails.sreportname\n          + \"&filename=\" + response.data.ssystemfilename //\"a6008692-3e1a-422b-b4da-5e9ad9cf3be6.mrt\"//\"b701dbc4-d90e-4840-b8e1-942649d6ec25.mrt\"//this.props.Login.masterData.SelectedReportDetails.ssystemfilename\n          + \"&sconnectionstring=\" + inputParam.userinfo.sconnectionString + \"&sreportlink=\" + inputParam.Login.reportSettings[15] //inputParam.sreportlink //\"//localhost:8090/SharedFolder/QuaLISjrxml\"//this.props.Login.reportSettings[15] //this.props.Login.userInfo.sreportLink  \n          + \"&smrttemplatelink=\" + inputParam.Login.reportSettings[16] //inputParam.smrttemplatelink //\"//localhost:8090//SharedFolder//ReportJSON//ReportTemplate.json\"//this.props.Login.reportSettings[16]//this.props.Login.userInfo.smrttemplateLink\n          + \"&sourceparameter=\" + encodeURIComponent(response.data.sourceparameter);\n          window.open(mrtfilePath);\n        }\n      }\n\n      let masterData = { ...Data,\n        ...response.data\n      }; //Added by sonia on 11-06-2024 for JIRA ID:4360  Auto Download reports\n\n      if (inputParam.inputData.autoDownloadReport) {\n        if (response.data.rtn === \"Success\") {\n          let value = \"\";\n          value = response.data[\"reportViewURL\"];\n          var win = window.open(value);\n\n          if (win) {\n            win.focus();\n          } else {\n            intl.warn('IDS_PLEASEALLOWPOPUPSFORTHISWEBSITE');\n          } //Commented by sonia on 11-06-2024 for JIRA ID:4360  Auto Download reports\n          //document.getElementById(\"download_data\").setAttribute(\"href\", response.data.filepath);\n          //document.getElementById(\"download_data\").click();\n\n        } else {\n          toast.warn(response.data.rtn);\n        }\n      }\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false,\n          change: inputParam.change,\n          masterData,\n          screenName: screenName,\n          modalShow: false,\n          selectedRecord: {},\n          loadEsign: false,\n          openModal: inputParam.inputData.openModal\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data['rtn']);\n      }\n    });\n  };\n}\nexport function getRemoveApprovedSample(inputParam, ncontrolCode) {\n  return function (dispatch) {\n    if (inputParam.masterData && inputParam.masterData.selectedReleaseHistory && inputParam.masterData.selectedReleaseHistory.length > 1) {\n      toast.warn(intl.formatMessage({\n        id: \"IDS_MULTISELECTAPPLICABLEONLYFORRELEASEACTION\"\n      }));\n    } else {\n      let urlArray = [];\n      inputParam.inputData['isPopup'] = true;\n\n      if (inputParam.inputData['allowAppendRemoveSamples'] === transactionStatus.YES) {\n        // if(inputParam.inputData['allowAppendRemoveSamples'] === transactionStatus.YES && \n        // (inputParam.inputData['nneedsubsample'] === false || \n        // (inputParam.inputData['nneedsubsample'] === true && inputParam.inputData['ncoaparenttranscode'] === transactionStatus.DRAFT))){\n        const releaseSample = rsapi.post(\"release/getReleaseSample\", inputParam.inputData); //  const reportType = rsapi.post(\"release/getCOAReportType\", { userinfo: inputParam.inputData.userinfo });\n        // const projectType = rsapi.post(\"release/getApprovedProjectType\", inputParam.inputData);\n\n        const statusService = rsapi.post(\"release/getStatusAlert\", inputParam.inputData);\n        urlArray = [releaseSample, statusService //,reportType\n        ];\n        dispatch(initRequest(true));\n        Axios.all(urlArray).then(response => {\n          if (response[1].data.Status === \"Success\") {\n            let masterData = {};\n            let selectedRecord = inputParam.inputData.selectedRecord;\n            let responseData = { ...response[0].data\n            };\n            masterData = { ...inputParam.masterData,\n              ...responseData\n            }; // responseData = sortData(responseData)\n\n            sortData(masterData);\n            dispatch({\n              type: DEFAULT_RETURN,\n              payload: {\n                masterData,\n                // selectedRecord,\n                isDeletePopup: true,\n                isComboCheck: true,\n                isEditPopup: false,\n                ncontrolCode,\n                loading: false,\n                showFilter: false,\n                openModal: true,\n                isAddPopup: false,\n                operation: \"delete\",\n                ncontrolCode: inputParam.inputData.ncontrolCode,\n                expandCheck: false,\n                screenName: inputParam.inputData.screenName,\n                slideOutClose: false // ALPD-4208 (22-05-2024) Changes done for expand function in add sample popup\n\n              }\n            });\n          } else {\n            toast.warn(intl.formatMessage({\n              id: response[1].data.ValidationStatus\n            }));\n            dispatch({\n              type: DEFAULT_RETURN,\n              payload: {\n                ncontrolCode: ncontrolCode,\n                loading: false\n              }\n            });\n          }\n        }).catch(error => {\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              loading: false\n            }\n          });\n\n          if (error.response.status === 500) {\n            toast.error(error.message);\n          } else {\n            toast.warn(error.response.data);\n          }\n        }); // } else if(inputParam.inputData['allowAppendRemoveSamples'] === transactionStatus.NO || \n        //     (inputParam.inputData['allowAppendRemoveSamples'] === transactionStatus.YES && inputParam.inputData['ncoaparenttranscode'] !== transactionStatus.DRAFT)){\n        //         toast.warn(intl.formatMessage({ id: \"IDS_SAMPLESARENOTALLOWEDTODELETE\" }));\n      } else {\n        toast.warn(intl.formatMessage({\n          id: \"IDS_SAMPLESARENOTALLOWEDTODELETE\"\n        }));\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        }); // toast.warn(intl.formatMessage({ id: \"IDS_SAMPLESARENOTALLOWEDTODELETE\" })+ \" \"+ intl.formatMessage({ id: \"IDS_FOR\" })+ \" \"+ inputParam.inputData['sregsubtypename']);\n      }\n    }\n  };\n}\nexport function getDeleteApprovedSample(inputData, Data1) {\n  return function (dispatch) {\n    if (inputData !== undefined && inputData.npreregno !== \"\") {\n      // ALPD-4229 (12-06-2024) Deleted searchRef from inputData\n      delete inputData.searchRef;\n      dispatch(initRequest(true));\n      return rsapi.post(\"release/deleteRelease\", inputData).then(response => {\n        if (response.data.rtn === \"Success\") {\n          let masterData = { ...Data1,\n            ...response.data\n          };\n          sortData(masterData.ReleaseHistory, \"\", 'ncoaparentcode');\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              masterData,\n              change: inputData.change,\n              loading: false,\n              loadEsign: false,\n              openModal: false,\n              expandCheck: false,\n              slideOutClose: true // ALPD-4208 (22-05-2024) Changes done for expand function in add sample popup\n\n            }\n          });\n        } else {\n          toast.warn(response.data.rtn);\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              //    masterData,\n              change: inputData.change,\n              loading: false,\n              // loadEsign: false,\n              // openModal: false,\n              expandCheck: false,\n              slideOutClose: false\n            }\n          });\n        }\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(error.message); //  console.log(\"ErrorRelease,\", error);\n        } else {\n          toast.warn(error.response.data);\n        }\n      });\n    } else {\n      toast.warn(intl.formatMessage({\n        id: \"IDS_SELECTANYONESAMPLE\"\n      }));\n    }\n  };\n} //Added by sonia on 11-06-2024 for JIRA ID:4122 Sample Count Validation\n\nexport function validationforAppendSamples(inputParam, ncontrolCode) {\n  return function (dispatch) {\n    if (inputParam.masterData && inputParam.masterData.selectedReleaseHistory && inputParam.masterData.selectedReleaseHistory.length > 1) {\n      toast.warn(intl.formatMessage({\n        id: \"IDS_MULTISELECTAPPLICABLEONLYFORRELEASEACTION\"\n      }));\n    } else {\n      let urlArray = [];\n      const sampleCountValidation = rsapi.post(\"release/sampleCountValidation\", inputParam.inputData);\n      urlArray = [sampleCountValidation];\n      dispatch(initRequest(true));\n      Axios.all(urlArray).then(response => {\n        if (response[0].data.rtn === \"Success\") {\n          dispatch(getEditApprovedSample(inputParam, ncontrolCode));\n        } else {\n          toast.warn(intl.formatMessage({\n            id: \"IDS_MAXIMUMSAMPLESAPPENDED\"\n          }));\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              ncontrolCode: ncontrolCode,\n              loading: false\n            }\n          });\n        }\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(error.response.data);\n        }\n      });\n    }\n  };\n} //Modified by sonia on 11-06-2024 for JIRA ID:4122 Sample Count Validation\n\nexport function getEditApprovedSample(inputParam, ncontrolCode) {\n  return function (dispatch) {\n    let urlArray = [];\n    inputParam.inputData['isPopup'] = true;\n\n    if (inputParam.inputData['allowAppendRemoveSamples'] === transactionStatus.YES) {\n      // const sampleCountValidation = rsapi.post(\"release/sampleCountValidation\", inputParam.inputData);\n      const releaseSample = rsapi.post(\"release/getReleaseSample\", inputParam.inputData); //  const reportType = rsapi.post(\"release/getCOAReportType\", { userinfo: inputParam.inputData.userinfo });\n      //  const projectType = rsapi.post(\"release/getApprovedProjectType\", inputParam.inputData);\n\n      const statusService = rsapi.post(\"release/getStatusAlert\", inputParam.inputData); // const projectStatus = rsapi.post(\"release/getProjectBasedAlert\", inputParam.inputData);\n\n      const testList = rsapi.post(\"release/getTest\", inputParam.inputData);\n      const sectionType = rsapi.post(\"release/getSection\", inputParam.inputData); // if (inputParam.inputData.ncoareporttypecode === 7) {\n      //     urlArray = [ projectType,statusService];\n      // }\n      // else if (inputParam.inputData.ncoareporttypecode === 8) {\n      //     urlArray = [ releaseSample,statusService];\n      // }\n      // else {\n\n      urlArray = [releaseSample, statusService, testList, sectionType //,reportType\n      ];\n\n      if (inputParam.DynamicReportFilterTypeItem && inputParam.DynamicReportFilterTypeItem.length > 0) {\n        let itemList = [];\n        inputParam.DynamicReportFilterTypeItem.map(x => {\n          if (x[designProperties.LISTITEM] === \"combo\") {\n            itemList.push({\n              \"Pkey\": x[designProperties.PRIMARYKEY],\n              \"nquerybuildertablecode\": x[designProperties.QUERYBUILDERTABLECODE],\n              \"tablename\": x[designProperties.TABLENAME],\n              \"columnname\": x[designProperties.COLUMNNAME],\n              \"keyName\": x[designProperties.VALUE],\n              \"isMultiLingual\": x[designProperties.MULTILINGUAL],\n              \"languageTypeCode\": inputParam.inputData.userinfo.slanguagetypecode,\n              \"recordType\": x[designProperties.RECORDTYPE]\n            });\n          }\n        });\n        inputParam[\"inputData\"][\"itemList\"] = itemList;\n        const reportFilterType = rsapi.post(\"release/getComboValues\", { ...inputParam.inputData,\n          'userInfo': inputParam.inputData.userinfo\n        });\n        urlArray.push(reportFilterType);\n      } // }\n\n\n      dispatch(initRequest(true));\n      Axios.all(urlArray).then(response => {\n        // const reportTypeMap = constructOptionList(response[1].data.ReportType || [], \"ncoareporttypecode\",\n        //     \"scoareporttypename\", undefined, undefined, false);\n        // const ReportTypeList = reportTypeMap.get(\"OptionList\");                   \n        if (response[1].data.Status === \"Success\") {\n          let ProjectTypeList = [];\n          let sectionList = [];\n          let comboValues = {};\n          let sectionvalue = [];\n          const sectionTypeMap = constructOptionList(response[3].data.sectionList || [], \"nsectioncode\", \"ssectionname\", undefined, undefined, false);\n          sectionList = sectionTypeMap.get(\"OptionList\");\n          sectionList.map(x => sectionvalue.push({\n            \"value\": x.value,\n            \"title\": x.label\n          }));\n          let testListMap = response[2] && response[2].data;\n          let combovaluesListMap = response[4] && response[4].data;\n          let comboValueList = { ...testListMap,\n            ...combovaluesListMap\n          } || {};\n          comboValues = {\n            \"s.nsectioncode\": sectionvalue,\n            ...comboValueList\n          }; // let selectedRecord = {\"ncoareporttypecode\": {\n          //     \"value\": response[1].data.ReportType[0].ncoareporttypecode,\n          //      \"label\": response[1].data.ReportType[0].scoareporttypename\n          // }\n          // };\n\n          let masterData = {};\n          let openModal = true;\n          let selectedRecord = inputParam.inputData.selectedRecord;\n\n          if (response[0].data && response[0].data.ReleaseSample.length !== 0) {\n            let responseData = { ...response[0].data\n            };\n            masterData = { ...inputParam.masterData,\n              ...responseData\n            };\n          } else {\n            let responseData = { ...response[0].data\n            };\n            masterData = { ...inputParam.masterData,\n              ...responseData\n            };\n            openModal = false;\n            toast.warn(intl.formatMessage({\n              id: \"IDS_NOSAMPLESAREAVAILABLE\"\n            }));\n          } // responseData = sortData(responseData)\n\n\n          let awesomeTree;\n          let filterquery;\n          let fields = getFilterConditionsBasedonDataType(inputParam.extractedColumnList, comboValues);\n\n          if (inputParam.DynamicDefaultStructureItem && inputParam.DynamicDefaultStructureItem.nsampletypecode === inputParam.inputData.nsampletypecode && inputParam.DynamicDefaultStructureItem.nregtypecode === inputParam.inputData.nregtypecode && inputParam.DynamicDefaultStructureItem.nregsubtypecode === inputParam.inputData.nregsubtypecode) {\n            awesomeTree = inputParam.DynamicDefaultStructureItem && inputParam.DynamicDefaultStructureItem.awesomeTree && checkTree(loadTree(inputParam.DynamicDefaultStructureItem.awesomeTree), inputParam.DynamicDefaultStructureItem.awesomeConfig);\n            filterquery = inputParam.DynamicDefaultStructureItem.filterquery;\n          } else {\n            awesomeTree = undefined;\n          }\n\n          sortData(masterData);\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              masterData,\n              // selectedRecord,\n              sectionList,\n              ncontrolCode: inputParam.inputData.ncontrolCode,\n              isDeletePopup: false,\n              isComboCheck: false,\n              isEditPopup: true,\n              ProjectTypeList,\n              loading: false,\n              showFilter: false,\n              openModal: openModal,\n              isAddPopup: false,\n              operation: \"append\",\n              expandCheck: false,\n              screenName: inputParam.inputData.screenName,\n              sectionvalue,\n              comboValues,\n              awesomeTree: awesomeTree,\n              filterquery,\n              fields,\n              screenNameCopy: inputParam.inputData.screenName,\n              slideOutClose: false // ALPD-4208 (22-05-2024) Changes done for expand function in add sample popup\n\n            }\n          });\n        } else {\n          toast.warn(intl.formatMessage({\n            id: response[1].data.ValidationStatus\n          }));\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              ncontrolCode: ncontrolCode,\n              loading: false\n            }\n          });\n        }\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(error.response.data);\n        }\n      }); // }  else if(inputParam.inputData['allowAppendRemoveSamples'] === transactionStatus.NO || \n      // (inputParam.inputData['allowAppendRemoveSamples'] === transactionStatus.YES && inputParam.inputData['ncoaparenttranscode'] !== transactionStatus.DRAFT)){\n      //     toast.warn(intl.formatMessage({ id: \"IDS_SAMPLESARENOTALLOWEDTODELETE\" }));\n    } else {\n      toast.warn(intl.formatMessage({\n        id: \"IDS_SAMPLESARENOTALLOWEDTODELETE\"\n      }));\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      }); // toast.warn(intl.formatMessage({ id: \"IDS_SAMPLESARENOTALLOWEDTODELETE\" })+ \" \"+ intl.formatMessage({ id: \"IDS_FOR\" })+ \" \"+ inputParam.inputData['sregsubtypename']);\n    }\n  };\n}\nexport function UpdateApprovedSample(inputData, Data1) {\n  return function (dispatch) {\n    if (inputData !== undefined && inputData.npreregno !== \"\") {\n      // ALPD-4229 (12-06-2024) Deleted searchRef from inputData\n      delete inputData.searchRef;\n      dispatch(initRequest(true));\n      return rsapi.post(\"release/appendRelease\", inputData).then(response => {\n        if (response.data.rtn === \"Success\") {\n          let masterData = { ...Data1,\n            ...response.data\n          };\n          sortData(masterData.ReleaseHistory, \"\", 'ncoaparentcode');\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              masterData,\n              change: inputData.change,\n              loading: false,\n              loadEsign: false,\n              openModal: false,\n              expandCheck: false,\n              slideOutClose: true // ALPD-4208 (22-05-2024) Changes done for expand function in add sample popup\n\n            }\n          });\n        } else {\n          toast.warn(response.data.rtn);\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              //  masterData,\n              change: inputData.change,\n              loading: false,\n              //loadEsign: false,\n              // openModal: false,\n              slideOutClose: false,\n              expandCheck: false\n            }\n          });\n        }\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(error.message); // console.log(\"ErrorRelease,\", error);\n        } else {\n          toast.warn(error.response.data);\n        }\n      });\n    } else {\n      toast.warn(intl.formatMessage({\n        id: \"IDS_SELECTANYONESAMPLE\"\n      }));\n    }\n  };\n}\nexport function getreportcomments(inputData, Data) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"release/getreportcomments\", inputData).then(response => {\n      let masterData = { ...Data,\n        ...response.data\n      };\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false,\n          change: inputData.change,\n          masterData,\n          screenName: \"IDS_REPORTINFOCOMMENT\",\n          openModal: true,\n          selectedRecord: {},\n          loadEsign: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function fetchReportInfoReleaseById(editParam) {\n  return function (dispatch) {\n    let additionalInfo = [];\n    let inputParamData = {\n      nreportinforeleasecode: editParam.editRow.nreportinforeleasecode,\n      userinfo: editParam.userInfo\n    };\n    dispatch(initRequest(true));\n    rsapi.post(\"release/getActiveReportInfoReleaseById\", inputParamData).then(response => {\n      // const parameterResults = response.data.ReleaseParameter\n      let selectedId = editParam.editRow.nreportinforeleasecode;\n      const selectedComment = { ...response.data\n      };\n      const masterData = { ...editParam.masterData,\n        selectedComment\n      };\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          screenName: \"IDS_REPORTINFOCOMMENTS\",\n          selectedId,\n          masterData,\n          //isParameterInitialRender: true,\n          loading: false,\n          openModal: true,\n          // modalShow: true,\n          ReportmodalShow: true,\n          operation: \"update\",\n          modalTitle: intl.formatMessage({\n            id: \"IDS_COMMENTS\"\n          })\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    }); //}\n  };\n}\nexport function UpdateReportComments(userInfo, Data1, inputData) {\n  let inputParamData = {\n    selectedComment: Data1.selectedComment,\n    userinfo: userInfo\n  };\n  return function (dispatch) {\n    //if (inputData !== undefined &&inputData.npreregno!==\"\") {\n    dispatch(initRequest(true));\n    return rsapi.post(\"release/updateReportComment\", inputParamData).then(response => {\n      let masterData = { ...Data1,\n        ...response.data,\n        selectedComment: {}\n      };\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          screenName: \"IDS_REPORTINFOCOMMENT\",\n          loading: false,\n          openModal: true,\n          expandCheck: false,\n          modalShow: false,\n          ReportmodalShow: false,\n          isComboCheck: true\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message); // console.log(\"ErrorRelease,\", error);\n      } else {\n        toast.warn(error.response.data);\n      }\n    }); // }\n    // else {\n    //     toast.warn(intl.formatMessage({\n    //         id: \"IDS_SELECTANYONESAMPLE\"\n    //     }));\n    //}\n  };\n}\nexport function getResultCorrectionData(inputParam, ncontrolCode) {\n  return function (dispatch) {\n    if (inputParam.masterData && inputParam.masterData.selectedReleaseHistory && inputParam.masterData.selectedReleaseHistory.length > 1) {\n      toast.warn(intl.formatMessage({\n        id: \"IDS_MULTISELECTAPPLICABLEONLYFORRELEASEACTION\"\n      }));\n    } else {\n      let urlArray = [];\n      inputParam.inputData['isPopup'] = true;\n      const resultCorrection = rsapi.post(\"release/getResultCorrection\", inputParam.inputData); //  const reportType = rsapi.post(\"release/getCOAReportType\", { userinfo: inputParam.inputData.userinfo });\n      // const projectType = rsapi.post(\"release/getApprovedProjectType\", inputParam.inputData);\n\n      const statusService = rsapi.post(\"release/getStatusAlert\", inputParam.inputData);\n      urlArray = [resultCorrection, statusService //,reportType\n      ];\n      dispatch(initRequest(true));\n      Axios.all(urlArray).then(response => {\n        if (response[1].data.Status === \"Success\") {\n          let masterData = {};\n          let selectedRecord = inputParam.inputData.selectedRecord;\n          let responseData = { ...response[0].data\n          };\n          masterData = { ...inputParam.masterData,\n            ...responseData\n          };\n          sortData(masterData);\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              masterData,\n              // selectedRecord,\n              isDeletePopup: true,\n              isComboCheck: true,\n              isEditPopup: false,\n              loadEsign: false,\n              ncontrolCode,\n              loading: false,\n              showFilter: false,\n              openModal: true,\n              isCorrectionNeed: true,\n              isAddPopup: false,\n              operation: \"delete\",\n              ncontrolCode: inputParam.inputData.ncontrolCode,\n              expandCheck: false,\n              hideSave: true,\n              screenName: inputParam.inputData.screenName\n            }\n          });\n        } else {\n          toast.warn(intl.formatMessage({\n            id: response[1].data.ValidationStatus\n          }));\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              ncontrolCode: ncontrolCode,\n              loading: false,\n              expandCheck: false,\n              loadEsign: false,\n              openModal: false\n            }\n          });\n        }\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(error.response.data);\n        }\n      });\n    }\n  };\n}\nexport function fetchParameterById(editParam) {\n  return function (dispatch) {\n    let additionalInfo = [];\n    let inputParamData = {\n      ntransactionresultcode: editParam.primaryKeyValue,\n      userinfo: editParam.userInfo\n    };\n    dispatch(initRequest(true));\n    rsapi.post(\"release/getReleaseResults\", inputParamData).then(response => {\n      let selectedResultGrade = [];\n      let paremterResultcode = [];\n      const parameterResults = response.data.ReleaseParameter;\n      let predefDefaultFlag = false;\n      parameterResults.map((param, index) => {\n        selectedResultGrade[index] = {\n          ngradecode: param.ngradecode\n        };\n        paremterResultcode[index] = param.ntransactionresultcode;\n        let jsondata = JSON.parse(param.jsondata['value']);\n\n        if (jsondata.hasOwnProperty('additionalInfo')) {\n          additionalInfo[param.ntransactionresultcode] = jsondata['additionalInfo'];\n        }\n\n        predefDefaultFlag = false;\n        response.data.PredefinedValues && response.data.PredefinedValues[parameterResults[index].ntransactionresultcode] && response.data.PredefinedValues[parameterResults[index].ntransactionresultcode].map(predefinedvalue => {\n          // if (predefinedvalue.ndefaultstatus === transactionStatus.YES) {\n          //     if (!predefDefaultFlag) {\n          //         predefDefaultFlag = true;\n          //         response.data.PredefinedValues[parameterResults[index].ntransactionresultcode] = constructOptionList(response.data.PredefinedValues[parameterResults[index].ntransactionresultcode] || [], 'sresultpredefinedname', 'sresultpredefinedname', undefined,\n          //             undefined, undefined).get(\"OptionList\");\n          //     }\n          // response.data.PredefinedValues[parameterResults[index].ntransactionresultcode] =\n          //     constructOptionList(response.data.PredefinedValues[parameterResults[index].ntransactionresultcode] || [], 'spredefinedname', 'spredefinedname', undefined,\n          //         undefined, undefined).get(\"OptionList\");\n          //     if (response.data.ResultParameter[index].sresult === null) {\n          //         response.data.ResultParameter[index].sresult = predefinedvalue.spredefinedname;\n          //         response.data.ResultParameter[index].sresultpredefinedname = predefinedvalue.sresultpredefinedname;\n          //         response.data.ResultParameter[index].sfinal = predefinedvalue.spredefinedsynonym;\n          //         response.data.ResultParameter[index].editable = true;\n          //         response.data.ResultParameter[index].ngradecode = predefinedvalue.ngradecode;\n          //         if(predefinedvalue.spredefinedcomments&&predefinedvalue.spredefinedcomments!==null){\n          //             response.data.ResultParameter[index].sresultcomment = predefinedvalue.spredefinedcomments\n          //             &&predefinedvalue.spredefinedcomments;\n          //         }\n          //     }\n          // }\n          //  else {\n          if (!predefDefaultFlag) {\n            predefDefaultFlag = true;\n            response.data.PredefinedValues[parameterResults[index].ntransactionresultcode] = constructOptionList(response.data.PredefinedValues[parameterResults[index].ntransactionresultcode] || [], 'sresultpredefinedname', 'sresultpredefinedname', undefined, undefined, undefined).get(\"OptionList\");\n          } //   }\n          //return null;\n\n        });\n\n        if (parameterResults[index][\"nparametertypecode\"] == 1) {\n          parameterResults[index][\"nresultaccuracycode\"] = {\n            \"value\": parameterResults[index][\"nresultaccuracycode\"],\n            \"label\": parameterResults[index][\"sresultaccuracyname\"]\n          };\n          parameterResults[index][\"nunitcode\"] = {\n            \"value\": parameterResults[index][\"nunitcode\"],\n            \"label\": parameterResults[index][\"sunitname\"]\n          };\n        }\n\n        param['editable'] = false; //return null;\n        // response.data.PredefinedValues[parameterResults[index].ntransactionresultcode] =  constructOptionList(response.data.PredefinedValues[parameterResults[index].ntransactionresultcode] || [], 'spredefinedname', 'spredefinedname', undefined,\n        // undefined, undefined).get(\"OptionList\");\n\n        parameterResults[index] = { ...parameterResults[index],\n          ...jsondata\n        };\n      });\n      const ResultAccuracyList = constructOptionList(response.data[\"ResultAccuracy\"] || [], \"nresultaccuracycode\", \"sresultaccuracyname\", undefined, undefined, false);\n      const ResultAccuracy = ResultAccuracyList.get(\"OptionList\");\n      const UnitList = constructOptionList(response.data[\"Unit\"] || [], \"nunitcode\", \"sunitname\", undefined, undefined, false);\n      const Unit = UnitList.get(\"OptionList\"); //ALPD-4387\n\n      let formFields = [];\n\n      if (response.data.FormFields && response.data.FormFields.length > 0) {\n        let formFieldJSON = JSON.parse(response.data.FormFields[0].jsondata['value']);\n        Object.entries(formFieldJSON).map(([key, value]) => formFields.push(value));\n      }\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...editParam.masterData,\n            //...sortData(response.data,\"desc\",\"ntransactiontestcode\"),\n            ...response.data,\n            paremterResultcode,\n            //,\n            selectedResultGrade,\n            ResultAccuracy,\n            Unit,\n            formFields\n          },\n          selectedRecord: {\n            additionalInfo: additionalInfo.length > 0 ? additionalInfo : [],\n            selectedResultGrade: selectedResultGrade,\n            ReleaseParameter: response.data.ReleaseParameter\n          },\n          parameterResults: response.data.ReleaseParameter,\n          isParameterInitialRender: true,\n          loading: false,\n          // screenName: \"IDS_RESULTENTRY\",\n          openModal: true,\n          modalShow: true,\n          operation: \"update\",\n          modalTitle: intl.formatMessage({\n            id: \"IDS_CHANGERESULT\"\n          }),\n          selectedId: editParam.primaryKeyValue,\n          //activeTestKey: \"IDS_RESULTS\",\n          ncontrolcode: editParam.editResultId\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    }); //}\n  };\n}\nexport function updateCorrectionStatus(inputData, Data, screenname) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    return rsapi.post(\"release/updateCorrectionStatus\", inputData).then(response => {\n      if (response.data.rtn === \"Success\") {\n        // ALPD-4229 (30-05-2024) Added code when search and do action\n        let searchedData = Data.searchedData;\n\n        if (Data.searchedData && Data.searchedData !== undefined && Data.searchedData.length > 0) {\n          searchedData = response.data && response.data.ReleaseHistory && getSameRecordFromTwoArrays(response.data.ReleaseHistory, Data.searchedData, \"ncoaparentcode\");\n        }\n\n        sortData(searchedData, '', 'ncoaparentcode'); // ALPD-4229 (12-06-2024) Added sortData for searchedData\n\n        let masterData = { ...Data,\n          ...response.data,\n          searchedData\n        };\n        sortData(masterData.ReleaseHistory, \"\", 'ncoaparentcode');\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            masterData,\n            change: inputData.change,\n            openModal: false,\n            loading: false,\n            loadEsign: false,\n            screenName: screenname\n          }\n        });\n      } else {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            // masterData,\n            //  change: inputData.change,\n            openModal: false,\n            loading: false,\n            loadEsign: false //  screenName:screenname\n\n          }\n        });\n        toast.warn(intl.formatMessage({\n          id: response.data\n        }));\n      } // }\n\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message); //  console.log(\"ErrorRelease,\", error);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function validateEsignforRelease(inputParam) {\n  return dispatch => {\n    dispatch(initRequest(true));\n    return rsapi.post(\"login/validateEsignCredential\", inputParam.inputData).then(response => {\n      if (response.data === \"Success\") {\n        const methodUrl = \"release\";\n        inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][\"userinfo\"] = inputParam.inputData.userinfo;\n\n        if (inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()] && inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignpassword\"]) {\n          delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignpassword\"];\n          delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esigncomments\"];\n          delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignreason\"];\n          delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"agree\"];\n        } //dispatch(inputParam[\"screenData\"][\"inputParam\"].performAction(inputParam[\"screenData\"][\"inputParam\"], inputParam[\"screenData\"][\"masterData\"]))\n\n\n        dispatch(dispatchMethods(inputParam[\"screenData\"]));\n      }\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.info(error.response.data);\n      }\n    });\n  };\n}\n\nfunction dispatchMethods(screenData) {\n  return dispatch => {\n    let doAction = screenData.inputParam.inputData.doAction;\n\n    switch (doAction) {\n      case \"appendsample\":\n        dispatch(UpdateApprovedSample(screenData.inputParam.inputData, screenData.masterData));\n        break;\n\n      case \"removesample\":\n        dispatch(getDeleteApprovedSample(screenData.inputParam.inputData, screenData.masterData, 'openModal'));\n        break;\n\n      case \"generate\":\n        dispatch(generateReleasedReport(screenData.inputParam.inputData, screenData.masterData));\n        break;\n\n      case \"download\":\n        dispatch(previewAndFinalReport(screenData.inputParam, screenData.masterData));\n        break;\n\n      case \"correction\":\n        dispatch(updateCorrectionStatus(screenData.inputParam.inputData, screenData.masterData, screenData.inputParam.inputData.screenName));\n        break;\n\n      case \"saveasdraft\":\n        dispatch(getApprovedRecordsAsDraft(screenData.inputParam.inputData, screenData.masterData, screenData.seletedRecord));\n        break;\n\n      case \"editresult\":\n        dispatch(crudMaster(screenData.inputParam, screenData.masterData, \"modalShow\"));\n        break;\n\n      case \"preliminary\":\n        dispatch(preliminaryReport(screenData.inputParam, screenData.masterData));\n        break;\n\n      case \"editReleaseTestAttachment\":\n        dispatch(onSaveReleaseTestAttachment(screenData.inputParam));\n        break;\n\n      case \"deleteReleaseTestAttachment\":\n        dispatch(onDeleteReleaseTestAttachment(screenData.inputParam));\n        break;\n\n      case \"editReleaseTestComment\":\n        dispatch(onSaveReleaseTestComment(screenData.inputParam));\n        break;\n\n      case \"deleteReleaseTestComment\":\n        dispatch(onDeleteReleaseTestComment(screenData.inputParam));\n        break;\n\n      case \"editReportTemplate\":\n        dispatch(SaveReportTemplate(screenData.inputParam));\n\n      default:\n        break;\n    }\n  };\n}\n\nexport function viewReportHistory(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"release/viewReportHistory\", inputParam.inputData).then(response => {\n      let masterData = inputParam.masterData;\n      let PatientReports = response.data.PatientReports;\n      masterData = { ...masterData,\n        PatientReports\n      };\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          isPatientReports: true,\n          openModal: true,\n          hideSave: true,\n          isAddPopup: false,\n          isEditPopup: false,\n          isDeletePopup: false,\n          masterData,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.info(error.response.data);\n      }\n    });\n  };\n}\nexport function viewReleaseTestAttachment(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    let methodUrl = \"\";\n\n    if (inputParam.inputData.actionName === \"IDS_RELEASETESTATTACHMENT\") {\n      methodUrl = \"getReleaseTestAttachment\";\n    } else {\n      methodUrl = \"getReleaseTestComment\";\n    }\n\n    rsapi.post(\"release/\" + methodUrl, inputParam.inputData).then(response => {\n      let masterData = inputParam.masterData;\n      const ReleaseTestAttachmentDetails = response.data.ReleaseTestAttachmentDetails;\n      const ReleaseTestCommentDetails = response.data.ReleaseTestCommentDetails;\n      const isReleaseTestAttachment = inputParam.inputData.actionName === \"IDS_RELEASETESTATTACHMENT\";\n      const isReleaseTestComment = inputParam.inputData.actionName === \"IDS_RELEASETESTCOMMENT\";\n      const lstRegistrationArno = constructOptionList(response.data.RegistrationArno || [], \"npreregno\", \"sarno\", false, false, true);\n      const RegistrationArno = lstRegistrationArno.get(\"OptionList\");\n      const lstRegistrationSampleArno = constructOptionList(response.data.RegistrationSampleArno || [], \"ntransactionsamplecode\", \"ssamplearno\", false, false, true);\n      const RegistrationSampleArno = lstRegistrationSampleArno.get(\"OptionList\");\n      const lstRegistrationTest = constructOptionList(response.data.RegistrationTest || [], \"ntransactiontestcode\", \"stestsynonym\", false, false, true);\n      const RegistrationTest = lstRegistrationTest.get(\"OptionList\");\n      const lstCommentSubType = constructOptionList(response.data.CommentSubType || [], \"ncommentsubtypecode\", \"scommentsubtype\", false, false, true);\n      const CommentSubType = lstCommentSubType.get(\"OptionList\");\n      masterData = { ...masterData,\n        ReleaseTestAttachmentDetails,\n        ReleaseTestCommentDetails,\n        RegistrationArno,\n        RegistrationSampleArno,\n        RegistrationTest,\n        CommentSubType\n      };\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          isReleaseTestAttachment,\n          isReleaseTestComment,\n          openModal: true,\n          isAddPopup: false,\n          isEditPopup: false,\n          isDeletePopup: false,\n          masterData,\n          loading: false,\n          isAddReleaseTestAttachment: false,\n          isInitialRender: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.info(error.response.data);\n      }\n    });\n  };\n} // export function writeJSONTemplate(inputParam){ \n//     return function (dispatch) {    \n//         return rsapi.post(\"release/writeJSONTemplate\",\n//         { [inputParam.primaryKeyName] :inputParam.selectedReleaseHistory.ncoaparentcode , \n//             \"userinfo\": inputParam.userInfo}\n//     )\n//         .then(response => {\n//                 dispatch({\n//                     type: DEFAULT_RETURN, payload: {\n//                         loading: false,\n//                         openModal: false,\n//                         expandCheck: false,\n//                     }\n//                 });\n//         })\n//         .catch(error => {\n//             dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\n//             if (error.response.status === 500) {\n//                 toast.error(error.message);\n//             }\n//             else {\n//                 toast.warn(error.response.data);\n//             }\n//         })\n// }\n// }\n\nexport function releaseReportHistory(inputParam) {\n  return dispatch => {\n    dispatch(initRequest(true));\n    return rsapi.post(\"release/getPreliminaryReportHistory\", inputParam).then(response => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputParam.masterData,\n            ...response.data\n          },\n          //hange: inputData.change,\n          openModal: true,\n          loading: false,\n          loadEsign: false,\n          screenName: inputParam.screenName\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function versionHistory(inputParam) {\n  return dispatch => {\n    dispatch(initRequest(true));\n    return rsapi.post(\"release/getVersionHistory\", inputParam).then(response => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputParam.masterData,\n            ...response.data\n          },\n          //hange: inputData.change,\n          openModal: true,\n          loading: false,\n          loadEsign: false,\n          openModalTitle: \"IDS_VERSIONHISTORY\"\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function downloadVersionReport(inputParam, Data, screenName) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"release/downloadVersionHistory\", inputParam.inputData).then(response => {\n      let masterData = { ...Data,\n        ...response.data\n      };\n\n      if (response.data.rtn === \"Success\") {\n        document.getElementById(\"download_data\").setAttribute(\"href\", response.data.FilePath);\n        document.getElementById(\"download_data\").click();\n      } else {\n        toast.warn(response.data.rtn);\n      }\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false,\n          change: inputParam.change,\n          masterData,\n          screenName: screenName,\n          modalShow: false,\n          selectedRecord: {},\n          loadEsign: false,\n          openModal: inputParam.inputData.openModal\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function downloadHistory(inputParam, Data, screenName) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"release/downloadHistory\", inputParam.inputData).then(response => {\n      let masterData = { ...Data,\n        ...response.data\n      };\n\n      if (response.data.rtn === \"Success\") {\n        document.getElementById(\"download_data\").setAttribute(\"href\", response.data.FilePath);\n        document.getElementById(\"download_data\").click();\n      } else {\n        toast.warn(response.data.rtn);\n      }\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false,\n          change: inputParam.change,\n          masterData,\n          screenName: screenName,\n          modalShow: false,\n          selectedRecord: {},\n          loadEsign: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data['rtn']);\n      }\n    });\n  };\n}\nexport function getPatientFilterExecuteData(inputParam) {\n  return function (dispatch) {\n    let obj = { ...inputParam.component,\n      filterquery: inputParam.filterquery,\n      userinfo: inputParam.userinfo\n    };\n    dispatch(initRequest(true));\n    rsapi.post(\"/dynamicpreregdesign/getdynamicfilterexecutedata\", obj).then(response => {\n      const source = inputParam.component.source;\n      const languageTypeCode = inputParam.userinfo.slanguagetypecode;\n      const lstData = response.data[inputParam.component.label];\n      const multilingual = [];\n      inputParam.component.filterfields.map(item => {\n        if (item.ismultilingual) {\n          multilingual.push(item.columnname);\n        }\n      });\n      const optionList = lstData.map(item => {\n        const jsondata = item[source] ? item[source].value ? JSON.parse(item[source].value) : item.jsondata : item.jsondata;\n        multilingual.map(mul => {\n          jsondata[mul] = jsondata[mul][languageTypeCode] || jsondata[mul]['en-US'];\n        }); // let label = isMultiLingual ?\n        //   jsondata[optionValue]\n        //   [languageTypeCode] || jsondata[optionValue]['en-US']\n        //   : jsondata[optionValue];\n\n        return jsondata;\n      });\n\n      if (inputParam.userinfo.nformcode === 161) {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            lstPatient: optionList,\n            onExecute: false,\n            loading: false,\n            screenName: \"IDS_PATIENTSEARCH\"\n          }\n        });\n      } else {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            lstPatient: optionList,\n            // onExecute: false,\n            loading: false,\n            screenName: \"IDS_PATIENTSEARCH\"\n          }\n        });\n      }\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.info(error.response.data.rtn);\n      }\n    });\n  };\n}\nexport function getPatientWiseSample(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"release/getPatientWiseSample\", inputParam).then(response => {\n      let openModal = true;\n      let screenName = \"IDS_ADDSAMPLE\";\n      let responseData = { ...response.data\n      };\n      let masterData = {};\n      let lstPatient = [];\n      masterData = { ...inputParam.masterData,\n        ...responseData\n      };\n\n      if (responseData && responseData.ReleaseSample.length !== 0) {\n        let responseData = { ...response.data\n        };\n        masterData = { ...inputParam.masterData,\n          ...responseData\n        };\n      } else {\n        let responseData = { ...response.data\n        };\n        masterData = { ...inputParam.masterData,\n          ...responseData\n        };\n        lstPatient = inputParam.Login.lstPatient; //openModal = false;\n\n        screenName = \"IDS_PATIENTSEARCH\";\n        toast.warn(intl.formatMessage({\n          id: \"IDS_NOSAMPLESAREAVAILABLE\"\n        }));\n      }\n\n      sortData(masterData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          // awesomeTree:fieldList[0].awesomeTree,\n          awesomeConfig: undefined,\n          lstPatient: lstPatient,\n          //lstPatient:[],\n          kendoSkip: 0,\n          kendoTake: 5,\n          masterData,\n          expandCheck: false,\n          isDeletePopup: false,\n          isComboCheck: false,\n          isEditPopup: false,\n          screenName: screenName,\n          //\"IDS_ADDSAMPLE\",\n          loading: false,\n          showFilter: false,\n          openModal: openModal,\n          isAddPopup: true,\n          operation: \"save\"\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function onSaveReleaseTestAttachment(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(inputParam.inputData.classUrl + \"/\" + inputParam.inputData.operation + inputParam.inputData.methodUrl, inputParam.inputData.formData).then(response => {\n      let ReleaseTestAttachmentDetails = response.data.ReleaseTestAttachmentDetails;\n      let masterData = { ...inputParam.inputData.masterData,\n        ReleaseTestAttachmentDetails\n      };\n      let selectedRecord = {};\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          selectedRecord,\n          isAddReleaseTestAttachment: false,\n          isReleaseTestAttachment: true,\n          loading: false,\n          screenName: inputParam.inputData.screenName,\n          masterData,\n          isInitialRender: false,\n          loadEsign: false,\n          loadEsignStateHandle: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response && error.response.status === 500) {\n        toast.error(error.message);\n      } else if (error.response === undefined) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function onDeleteReleaseTestAttachment(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(inputParam.inputData.url, {\n      \"releasetestattachment\": inputParam.inputData.releasetestattachment,\n      \"userinfo\": inputParam.inputData.userinfo\n    }).then(response => {\n      let ReleaseTestAttachmentDetails = response.data.ReleaseTestAttachmentDetails;\n      let selectedRecord = { ...inputParam.inputData.selectedRecord,\n        ...response.data\n      };\n      let masterData = inputParam.inputData.masterData;\n      masterData[\"ReleaseTestAttachmentDetails\"] = ReleaseTestAttachmentDetails;\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          selectedRecord,\n          isReleaseTestAttachment: true,\n          loading: false,\n          screenName: inputParam.inputData.screenName,\n          masterData,\n          loadEsignStateHandle: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response && error.response.status === 500) {\n        toast.error(error.message);\n      } else if (error.response === undefined) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function onSaveReleaseTestComment(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(inputParam.inputData.classUrl + \"/\" + inputParam.inputData.operation + inputParam.inputData.methodUrl, inputParam.inputData.formData).then(response => {\n      let ReleaseTestCommentDetails = response.data.ReleaseTestCommentDetails;\n      let masterData = { ...inputParam.inputData.masterData,\n        ReleaseTestCommentDetails\n      };\n      let selectedRecord = {};\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          selectedRecord,\n          isAddReleaseTestComment: false,\n          isReleaseTestComment: true,\n          loading: false,\n          screenName: inputParam.inputData.screenName,\n          masterData,\n          isInitialRender: false,\n          loadEsignStateHandle: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response && error.response.status === 500) {\n        toast.error(error.message);\n      } else if (error.response === undefined) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function onDeleteReleaseTestComment(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(inputParam.inputData.url, {\n      \"releasetestcomment\": inputParam.inputData.releasetestcomment,\n      \"userinfo\": inputParam.inputData.userinfo\n    }).then(response => {\n      let ReleaseTestCommentDetails = response.data.ReleaseTestCommentDetails;\n      let selectedRecord = { ...inputParam.inputData.selectedRecord,\n        ...response.data\n      };\n      let masterData = inputParam.inputData.masterData;\n      masterData[\"ReleaseTestCommentDetails\"] = ReleaseTestCommentDetails;\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          selectedRecord,\n          isReleaseTestComment: true,\n          loading: false,\n          screenName: inputParam.inputData.screenName,\n          masterData,\n          loadEsignStateHandle: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response && error.response.status === 500) {\n        toast.error(error.message);\n      } else if (error.response === undefined) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function generatereport(inputParam, Data, screenName) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"release/generateReport\", inputParam.inputData).then(response => {\n      // let masterData = {\n      //     ...Data,\n      //     ...response.data,\n      // }\n      // if (response.data.rtn === \"Success\") {\n      //     document.getElementById(\"download_data\").setAttribute(\"href\", response.data.FilePath);\n      //     document.getElementById(\"download_data\").click();\n      // } else {\n      //     toast.warn(response.data.rtn);\n      // }\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false,\n          change: inputParam.change,\n          screenName: screenName,\n          modalShow: false,\n          selectedRecord: {},\n          loadEsign: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data['rtn']);\n      }\n    });\n  };\n}\nexport function editReportTemplate(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"release/getApprovedReportTemplateById\", inputParam.inputData).then(response => {\n      let responseData = response.data;\n      let selectedRecord = inputParam.selectedRecord;\n      selectedRecord[\"nreporttemplatecode\"] = responseData.nreporttemplatecode;\n      const reportTemplateMap = constructOptionList(responseData.reportTemplateList || [], \"nreporttemplatecode\", \"sreporttemplatename\", \"nreporttemplatecode\", \"ascending\", false);\n      const reportTemplateList = reportTemplateMap.get(\"OptionList\");\n      let masterData = inputParam.masterData;\n      masterData[\"reportTemplateList\"] = reportTemplateList;\n      masterData[\"selectedReleaseHistory\"] = masterData.selectedReleaseHistory && masterData.selectedReleaseHistory.length > 0 && masterData.selectedReleaseHistory.filter(item => item.ncoaparentcode === inputParam.ncoaparentcode);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false,\n          masterData,\n          screenName: intl.formatMessage({\n            id: \"IDS_REPORTTEMPLATE\"\n          }),\n          modalTitle: intl.formatMessage({\n            id: \"IDS_EDITREPORTTEMPLATE\"\n          }),\n          modalShow: true,\n          loadEsign: false,\n          selectedRecord\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function SaveReportTemplate(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"release/updateReportTemplate\", inputParam.inputData).then(response => {\n      let masterData = inputParam.masterData; // ALPD-4229 (30-05-2024) Added code when search and do action\n\n      if (masterData.searchedData && masterData.searchedData !== undefined && masterData.searchedData.length > 0) {\n        masterData.searchedData.map(item => {\n          if (item.ncoaparentcode === inputParam.inputData.ncoaparentcode) {\n            item[\"nreporttemplatecode\"] = inputParam.inputData.nreporttemplatecode;\n            item[\"sreporttemplatename\"] = inputParam.inputData.sreporttemplatename;\n          }\n        });\n      }\n\n      masterData.selectedReleaseHistory[0][\"nreporttemplatecode\"] = inputParam.inputData.nreporttemplatecode;\n      masterData.selectedReleaseHistory[0][\"sreporttemplatename\"] = inputParam.inputData.sreporttemplatename;\n      masterData.ReleaseHistory.map(item => {\n        if (item.ncoaparentcode === inputParam.inputData.ncoaparentcode) {\n          item[\"nreporttemplatecode\"] = inputParam.inputData.nreporttemplatecode;\n          item[\"sreporttemplatename\"] = inputParam.inputData.sreporttemplatename;\n        }\n      });\n      delete inputParam.selectedRecord.nreporttemplatecode;\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false,\n          masterData,\n          modalShow: false,\n          loadEsign: false,\n          openModal: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function deleteSamples(inputParam, data) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"release/deleteSamples\", inputParam.inputData).then(response => {\n      // ALPD-4229 (30-05-2024) Added searchedData as undefined\n      inputParam.searchRef.current.value = \"\";\n      let masterData = { ...data,\n        ...response.data,\n        searchedData: undefined\n      };\n      sortData(masterData.ReleaseHistory, \"\", 'ncoaparentcode');\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}","map":{"version":3,"sources":["E:/WorkingFolder/React_Postgres/ALPD/SOURCE-512/QuaLISWeb/src/actions/ReleaseAction.js"],"names":["Axios","toast","intl","constructOptionList","replaceUpdatedObject","sortData","getFilterConditionsBasedonDataType","getSameRecordFromTwoArrays","designProperties","reportCOAType","REPORTTYPE","SampleType","transactionStatus","TrainingUpdateChildTab","rsapi","initRequest","DEFAULT_RETURN","crudMaster","getFieldSpecification","getFieldSpecification3","filterObjectForReactAwesomeFilter","fileViewUrl","reportUrl","Utils","QbUtils","checkTree","loadTree","getReleasedRegistrationType","inputData","dispatch","post","then","response","responseData","data","type","payload","masterData","SampleTypeValue","realSampleTypeList","realReportTypeList","realRegTypeList","realRegSubTypeList","realFilterStatusList","realApprovalVersionList","realDesignTemplateMappingList","loading","catch","error","status","message","warn","getReleasedRegistrationSubType","RegTypeValue","getReleasedFilterBasedTest","napprovalversioncode","RegSubTypeValue","ndesigntemplatemappingcode","DesignTemplateMappingValue","rtn","formatMessage","id","getReleasedApprovalVersion","inputParam","getReleasedSample","selectedRecordLogin","selectedRecordState","LoginData","urlArray","approvedReportTemplate","filteredSample","all","reportTemplateList","reportTemplateMap","get","nsectioncode","selectedRecord","slideOutClose","undefined","nreporttemplatecode","showFilter","FilterQueryBuilder","screenName","awesomeTree","isClear","filterquery","fields","filterQueryTreeStr","getApprovedSample","ncontrolCode","realReportTypeValue","ncoareporttypecode","PATIENTWISE","fieldList","languageTypeCode","userinfo","slanguagetypecode","gridColumns","filterfields","awesomeConfig","ProjectTypeList","sectionList","openModal","seletedFilterComponent","lstPatient","kendoSkip","kendoTake","expandCheck","isDeletePopup","isComboCheck","isEditPopup","isAddPopup","operation","ismandatory","DynamicReportFilterTypeItem","map","x","releaseSample","projectType","sectionType","testList","length","itemList","LISTITEM","push","PRIMARYKEY","QUERYBUILDERTABLECODE","TABLENAME","COLUMNNAME","VALUE","MULTILINGUAL","RECORDTYPE","reportFilterType","sectionvalue","comboValues","sectionTypeMap","value","label","testListMap","isneedsection","YES","combovaluesListMap","comboValueList","ReleaseSubSample","ReleaseTest","ReleaseSample","extractedColumnList","DynamicDefaultStructureItem","nsampletypecode","nregtypecode","nregsubtypecode","screenNameCopy","generateReleasedReport","Data","preventtb","listStatus","CORRECTION","afterCorrection","modalShow","loadEsign","confirmMessage","confirm","cancelPopUp","searchedData","ReleaseHistory","autoDownloadReport","win","window","open","focus","change","getReleasedFilterStatus","getReleasedDataDetails","isServiceRequired","inputParamData","dfrom","dto","ntransactionstatus","ntestcode","napprovalconfigcode","nneedsubsample","ncoaparentcode","releaseno","item","join","npreregno","getApprovedProjectByProjectType","projectMasterMap","projectMasterList","getApprovedProjectType","projectTypeMap","ProjectTypeValue","getSectionForSectionWise","sectionMap","getReportForPortal","UpdateExternalOrderStatus","portallist","String","JSON","stringify","headers","getApprovedRecordsAsDraft","Data1","seletedRecord","searchRef","current","NO","preliminaryReport","previewAndFinalReport","sexporttype","sourceparameter","mrtfilePath","sreportingtoolfilename","sreportlanguagecode","sreportname","ssystemfilename","sconnectionString","Login","reportSettings","encodeURIComponent","getRemoveApprovedSample","selectedReleaseHistory","statusService","Status","ValidationStatus","getDeleteApprovedSample","validationforAppendSamples","sampleCountValidation","getEditApprovedSample","UpdateApprovedSample","getreportcomments","fetchReportInfoReleaseById","editParam","additionalInfo","nreportinforeleasecode","editRow","userInfo","selectedId","selectedComment","ReportmodalShow","modalTitle","UpdateReportComments","getResultCorrectionData","resultCorrection","isCorrectionNeed","hideSave","fetchParameterById","ntransactionresultcode","primaryKeyValue","selectedResultGrade","paremterResultcode","parameterResults","ReleaseParameter","predefDefaultFlag","param","index","ngradecode","jsondata","parse","hasOwnProperty","PredefinedValues","predefinedvalue","ResultAccuracyList","ResultAccuracy","UnitList","Unit","formFields","FormFields","formFieldJSON","Object","entries","key","isParameterInitialRender","ncontrolcode","editResultId","updateCorrectionStatus","screenname","validateEsignforRelease","methodUrl","toLowerCase","dispatchMethods","info","screenData","doAction","onSaveReleaseTestAttachment","onDeleteReleaseTestAttachment","onSaveReleaseTestComment","onDeleteReleaseTestComment","SaveReportTemplate","viewReportHistory","PatientReports","isPatientReports","viewReleaseTestAttachment","actionName","ReleaseTestAttachmentDetails","ReleaseTestCommentDetails","isReleaseTestAttachment","isReleaseTestComment","lstRegistrationArno","RegistrationArno","lstRegistrationSampleArno","RegistrationSampleArno","lstRegistrationTest","RegistrationTest","lstCommentSubType","CommentSubType","isAddReleaseTestAttachment","isInitialRender","releaseReportHistory","versionHistory","openModalTitle","downloadVersionReport","document","getElementById","setAttribute","FilePath","click","downloadHistory","getPatientFilterExecuteData","obj","component","source","lstData","multilingual","ismultilingual","columnname","optionList","mul","nformcode","onExecute","getPatientWiseSample","classUrl","formData","loadEsignStateHandle","url","releasetestattachment","isAddReleaseTestComment","releasetestcomment","generatereport","editReportTemplate","filter","sreporttemplatename","deleteSamples"],"mappings":"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","sourcesContent":["import Axios from \"axios\";\r\nimport { toast } from \"react-toastify\";\r\nimport { intl } from \"../components/App\";\r\nimport { constructOptionList, replaceUpdatedObject, sortData ,getFilterConditionsBasedonDataType, getSameRecordFromTwoArrays} from \"../components/CommonScript\";\r\nimport { designProperties, reportCOAType, REPORTTYPE, SampleType, transactionStatus } from \"../components/Enumeration\";\r\nimport TrainingUpdateChildTab from \"../pages/competencemanagement/trainingupdate/TrainingUpdateChildTab\";\r\nimport rsapi from \"../rsapi\";\r\nimport { initRequest } from \"./LoginAction\";\r\nimport { DEFAULT_RETURN } from \"./LoginTypes\";\r\nimport { crudMaster } from \"./ServiceAction\";\r\nimport { getFieldSpecification as getFieldSpecification3 } from '../components/type3component/Type3FieldSpecificationList';\r\nimport { filterObjectForReactAwesomeFilter } from \"./RegistrationAction\";\r\nimport {fileViewUrl, reportUrl} from '../rsapi'\r\n\r\n// export function getReleasedSelectedSampleSubSampleTest(userInfo, Data1, inputData) {\r\n    import { Utils as QbUtils } from \"@react-awesome-query-builder/ui\";\r\n    const { checkTree, loadTree } = QbUtils;\r\n\r\n//     return function (dispatch) {\r\n//       if (inputData !== undefined &&inputData.npreregno!==\"\") {\r\n\r\n//         dispatch(initRequest(true));\r\n//         return rsapi.post(\"release/updateRelease\",\r\n\r\n//             inputData\r\n//         )\r\n//             .then(response => {\r\n//                 if (response.data.statusCodeValue !== 200) {\r\n//                     toast.warn(intl.formatMessage({\r\n//                         id: response.data.body\r\n//                     }));\r\n//                     dispatch({\r\n//                         type: DEFAULT_RETURN,\r\n//                         payload: {\r\n//                             loading: false\r\n//                         }\r\n//                     });\r\n\r\n\r\n//                 }\r\n//                 else {\r\n\r\n//                     if (response.data.body[\"PortalStatus\"] && response.data.body[\"PortalStatus\"].length > 0) {\r\n//                         dispatch(UpdateExternalOrderStatus(response.data.body[\"PortalStatus\"],inputData));\r\n//                     }\r\n//                     let masterData = {\r\n\r\n//                         ...Data1, ...response.data.body,\r\n\r\n\r\n//                     };\r\n\r\n//                     console.log(\"ReleasedTest,\", masterData);\r\n//                      sortData(masterData.ReleaseHistory,\"\",'sreportno');\r\n//                   //  dispatch(generateReport(inputData,masterData))\r\n\r\n//                     dispatch({\r\n//                         type: DEFAULT_RETURN, payload: {\r\n//                             masterData,\r\n//                             change: inputData.change,\r\n//                             loading: false,\r\n//                             openModal:false\r\n//                         }\r\n//                     });\r\n//                 }\r\n//             })\r\n\r\n//             .catch(error => {\r\n//                 dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n//                 if (error.response.status === 500) {\r\n//                     toast.error(error.message);\r\n//                     console.log(\"ErrorRelease,\", error);\r\n\r\n//                 }\r\n//                 else {\r\n//                     toast.warn(error.response.data);\r\n//                 }\r\n//             })\r\n\r\n\r\n//         }\r\n//         else {\r\n//             toast.warn(intl.formatMessage({\r\n//                 id: \"IDS_SELECTANYONESAMPLE\"\r\n//             }));\r\n//         }\r\n//     }\r\n// }\r\nexport function getReleasedRegistrationType(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"release/getRegistrationType\", inputData)\r\n            .then(response => {\r\n                let responseData = { ...response.data }\r\n                responseData = sortData(responseData)\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...responseData,\r\n                            SampleTypeValue: inputData.SampleTypeValue,\r\n                            realSampleTypeList: inputData.realSampleTypeList || [],\r\n                            realReportTypeList: inputData.realReportTypeList || [],\r\n                            realRegTypeList: inputData.realRegTypeList || [],\r\n                            realRegSubTypeList: inputData.realRegSubTypeList || [],\r\n                            realFilterStatusList: inputData.realFilterStatusList || [],\r\n                            realApprovalVersionList: inputData.realApprovalVersionList || [],\r\n                            realDesignTemplateMappingList: inputData.realDesignTemplateMappingList || []\r\n                        },\r\n                        loading: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function getReleasedRegistrationSubType(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"release/getRegistrationSubType\", inputData)\r\n            .then(response => {\r\n                let responseData = { ...response.data }\r\n                responseData = sortData(responseData)\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...responseData,\r\n                            RegTypeValue: inputData.RegTypeValue,\r\n                            realSampleTypeList: inputData.realSampleTypeList || [],\r\n                            realReportTypeList: inputData.realReportTypeList || [],\r\n                            realRegTypeList: inputData.realRegTypeList || [],\r\n                            realRegSubTypeList: inputData.realRegSubTypeList || [],\r\n                            realFilterStatusList: inputData.realFilterStatusList || [],\r\n                            realApprovalVersionList: inputData.realApprovalVersionList || [],\r\n                            realDesignTemplateMappingList: inputData.realDesignTemplateMappingList || []\r\n                        },\r\n                        loading: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getReleasedFilterBasedTest(inputData) {\r\n    return function (dispatch) {\r\n        if (inputData.napprovalversioncode) {\r\n            dispatch(initRequest(true));\r\n            rsapi.post(\"release/getFilterBasedTest\", inputData)\r\n                .then(response => {\r\n\r\n\r\n                    let responseData = { ...response.data }\r\n                    responseData = sortData(responseData)\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN, payload: {\r\n                            masterData: {\r\n                                ...inputData.masterData,\r\n                                ...responseData,\r\n                                RegSubTypeValue: inputData.RegSubTypeValue,\r\n                                ndesigntemplatemappingcode: inputData.ndesigntemplatemappingcode,\r\n                                DesignTemplateMappingValue: inputData.DesignTemplateMappingValue\r\n                            },\r\n                            loading: false\r\n                        }\r\n                    })\r\n                    if (response.data.rtn) {\r\n                        toast.warn(response.data.rtn);\r\n                    }\r\n\r\n                })\r\n                .catch(error => {\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    }\r\n                    else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                })\r\n        }\r\n        else {\r\n            toast.warn(intl.formatMessage({\r\n                id: \"IDS_PLSSELECTALLVALUESINFILTER\"\r\n            }));\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport function getReleasedApprovalVersion(inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"release/getApprovalVersion\", inputParam.inputData)\r\n            .then(response => {\r\n                let responseData = { ...response.data }\r\n                responseData = sortData(responseData)\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData: {\r\n                            ...inputParam.masterData,\r\n                            ...responseData,\r\n                            realSampleTypeList: inputParam.inputData.realSampleTypeList || [],\r\n                            realReportTypeList: inputParam.inputData.realReportTypeList || [],\r\n                            realRegTypeList: inputParam.inputData.realRegTypeList || [],\r\n                            realRegSubTypeList: inputParam.inputData.realRegSubTypeList || [],\r\n                            realFilterStatusList: inputParam.inputData.realFilterStatusList || [],\r\n                            realApprovalVersionList: inputParam.inputData.realApprovalVersionList || [],\r\n                            realDesignTemplateMappingList: inputParam.inputData.realDesignTemplateMappingList || []\r\n                            // fromDate: inputParam.inputData.dfrom,\r\n                            // toDate: inputParam.inputData.dto,\r\n                        },\r\n                        loading: false,\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function getReleasedSample(inputParam,selectedRecordLogin,selectedRecordState,LoginData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        let urlArray = [];\r\n        const approvedReportTemplate = rsapi.post(\"release/getApprovedReportTemplate\", inputParam.inputData);\r\n        const filteredSample = rsapi.post(\"release/getReleaseSample\", inputParam.inputData);\r\n        urlArray = [filteredSample,approvedReportTemplate];\r\n        Axios.all(urlArray) .then(response => {\r\n                let reportTemplateList = [];\r\n                const reportTemplateMap = constructOptionList(response[1].data || [], \"nreporttemplatecode\", \"sreporttemplatename\", \"nreporttemplatecode\", \r\n                    \"ascending\", false);\r\n                reportTemplateList = reportTemplateMap.get(\"OptionList\");\r\n                let responseData = { ...response[0].data }\r\n                // responseData = sortData(responseData)\r\n                let masterData = {}\r\n                let nsectioncode = {};\r\n                let selectedRecord = {};\r\n                let slideOutClose = true;\r\n                // if (response.data.ReleasedSampleDetails && response.data.ReleasedSampleDetails.length !== 0 ||\r\n                //     response.data.ReleaseSample && response.data.ReleaseSample.length === 0) {\r\n                masterData = {\r\n                    ...inputParam.masterData,\r\n                    ...responseData,\r\n                }\r\n                if (nsectioncode !== undefined) {\r\n                    nsectioncode = inputParam.inputData.nsectioncode;\r\n            }\r\n           \r\n            if (selectedRecordState !== undefined) {\r\n                delete selectedRecordState.nreporttemplatecode;\r\n            }\r\n            selectedRecord={...selectedRecordLogin,...selectedRecordState}\r\n                masterData[\"reportTemplateList\"] = reportTemplateList;\r\n                sortData(masterData, \"\", \"ncoaparentcode\");\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData,\r\n                        loading: false,\r\n                        showFilter: false,\r\n                        nsectioncode: nsectioncode,\r\n                        FilterQueryBuilder:false,\r\n                        screenName:inputParam.inputData.screenName,\r\n                        awesomeTree:inputParam.inputData.isClear?undefined:inputParam.inputData.awesomeTree,\r\n                        filterquery:inputParam.inputData.isClear?undefined:inputParam.inputData.filterquery,\r\n                        slideOutClose: slideOutClose,\r\n                        selectedRecord,\r\n                        awesomeTree: LoginData && LoginData.awesomeTree,\r\n                        filterquery:LoginData && LoginData.filterquery,\r\n                        fields:LoginData && LoginData.fields,\r\n                        filterQueryTreeStr:LoginData && LoginData.filterQueryTreeStr\r\n\r\n\r\n                        \r\n\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function getApprovedSample(inputParam, ncontrolCode) {\r\n        if(inputParam.masterData.realReportTypeValue.ncoareporttypecode===reportCOAType.PATIENTWISE)\r\n        {\r\n          \r\n            let fieldList = [];\r\n            fieldList = getFieldSpecification3().get(\"ExternalOrder\") || [];\r\n            \r\n            const languageTypeCode = inputParam.inputData.userinfo.slanguagetypecode;\r\n            const { fields, gridColumns } = filterObjectForReactAwesomeFilter(fieldList[0].filterfields, languageTypeCode, undefined, undefined)\r\n            let awesomeTree = fieldList[0].awesomeTree ? checkTree(loadTree(fieldList[0].awesomeTree), fieldList[0].awesomeConfig) : undefined\r\n           \r\n            return function (dispatch) {\r\n                let urlArray = []; \r\n\r\n              \r\n                dispatch(initRequest(true));\r\n                Axios.all(urlArray)\r\n        \r\n                    .then(response => {\r\n                       \r\n                        let ProjectTypeList = [];\r\n                        let sectionList = [];\r\n\r\n                        \r\n                        let masterData = {};\r\n                        let openModal = true;\r\n                      \r\n                masterData = {\r\n                    ...inputParam.masterData\r\n                }\r\n\r\n        \r\n                        \r\n                        sortData(masterData);\r\n                        dispatch({\r\n                            type: DEFAULT_RETURN, payload: {\r\n                                fields,\r\n                                gridColumns,\r\n                                awesomeTree,\r\n                                seletedFilterComponent: fieldList[0],\r\n                                // awesomeTree:fieldList[0].awesomeTree,\r\n                                 awesomeConfig:undefined,\r\n                                lstPatient:[],\r\n                                kendoSkip: 0,\r\n                                kendoTake: 5,\r\n                                masterData,\r\n                                expandCheck: false,\r\n                                ProjectTypeList,\r\n                                ncontrolCode,\r\n                                isDeletePopup: false,\r\n                                isComboCheck: false,\r\n                                isEditPopup: false,\r\n                                screenName:\"IDS_PATIENTSEARCH\",\r\n                                sectionList,\r\n                                loading: false,\r\n                                showFilter: false,\r\n                                openModal: openModal,\r\n                                isAddPopup: true,\r\n                                operation:\"save\",\r\n                                slideOutClose: false    // ALPD-4208 (22-05-2024) Changes done for expand function in add sample popup\r\n                            }\r\n                        })\r\n                    })\r\n                    .catch(error => {\r\n                        dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                        if (error.response.status === 500) {\r\n                            toast.error(error.message);\r\n                        }\r\n                        else {\r\n                            toast.warn(error.response.data);\r\n                        }\r\n                    })\r\n            }\r\n\r\n}\r\nelse{\r\n    return function (dispatch) {\r\n        let ismandatory=false\r\n        inputParam.DynamicReportFilterTypeItem && inputParam.DynamicReportFilterTypeItem.map(x=>{\r\n            if(x.ismandatory){\r\n                ismandatory=true\r\n            }})\r\n            if(ismandatory){\r\n                inputParam['inputData']={...inputParam.inputData,ismandatory:true}\r\n            }\r\n        const screenName=\"\";\r\n        let urlArray = [];\r\n        \r\n        inputParam.inputData['isAddPopup'] = true\r\n        const releaseSample = rsapi.post(\"release/getReleaseSample\", inputParam.inputData);\r\n        //  const reportType = rsapi.post(\"release/getCOAReportType\", { userinfo: inputParam.inputData.userinfo });\r\n        const projectType = rsapi.post(\"release/getApprovedProjectType\", inputParam.inputData);\r\n        const sectionType = rsapi.post(\"release/getSection\", inputParam.inputData);\r\n        const testList=rsapi.post(\"release/getTest\", inputParam.inputData);\r\n        const approvedReportTemplate = rsapi.post(\"release/getApprovedReportTemplate\", inputParam.inputData);\r\n\r\n        // if (inputParam.inputData.ncoareporttypecode === reportCOAType.PROJECTWISE ||\r\n        //     inputParam.inputData.nsampletypecode === SampleType.PROJECTSAMPLETYPE && inputParam.inputData.ncoareporttypecode === reportCOAType.SECTIONWISEMULTIPLESAMPLE) {\r\n\r\n        //     urlArray = [projectType,sectionType];\r\n        // }\r\n        // else if (inputParam.inputData.isneedsection === transactionStatus.YES || inputParam.inputData.ncoareporttypecode === reportCOAType.SECTIONWISE || inputParam.inputData.ncoareporttypecode === reportCOAType.SECTIONWISEMULTIPLESAMPLE) {\r\n        //     urlArray = [sectionType];\r\n        // }\r\n        // else {\r\n        //     urlArray = [releaseSample\r\n        //         //,reportType\r\n        //     ];\r\n        // }\r\n        urlArray = [releaseSample,projectType,sectionType,testList,approvedReportTemplate];\r\n        if(inputParam.DynamicReportFilterTypeItem && inputParam.DynamicReportFilterTypeItem.length>0){\r\n            let itemList=[];\r\n            inputParam.DynamicReportFilterTypeItem.map(x=>{\r\n                if(x[designProperties.LISTITEM]===\"combo\"){\r\n                    itemList.push(\r\n                        {\"Pkey\":x[designProperties.PRIMARYKEY],\r\n                        \"nquerybuildertablecode\":x[designProperties.QUERYBUILDERTABLECODE],\r\n                     \"tablename\":x[designProperties.TABLENAME],\r\n                    \"columnname\":x[designProperties.COLUMNNAME],\r\n                \"keyName\":x[designProperties.VALUE],\r\n            \"isMultiLingual\":x[designProperties.MULTILINGUAL],\r\n             \"languageTypeCode\" :inputParam.inputData.userinfo.slanguagetypecode,\r\n            \"recordType\":x[designProperties.RECORDTYPE]})\r\n                }\r\n            })\r\n            inputParam[\"inputData\"][\"itemList\"]=itemList;\r\n             const reportFilterType = rsapi.post(\"release/getComboValues\", {...inputParam.inputData,'userInfo':inputParam.inputData.userinfo});\r\n            urlArray.push(reportFilterType);\r\n        }\r\n        dispatch(initRequest(true));\r\n        Axios.all(urlArray)\r\n\r\n            .then(response => {\r\n                // const reportTypeMap = constructOptionList(response[1].data.ReportType || [], \"ncoareporttypecode\",\r\n                //     \"scoareporttypename\", undefined, undefined, false);\r\n\r\n                // const ReportTypeList = reportTypeMap.get(\"OptionList\");\r\n                let ProjectTypeList = [];\r\n                let sectionList = [];\r\n\r\n                // let selectedRecord = {\"ncoareporttypecode\": {\r\n                //     \"value\": response[1].data.ReportType[0].ncoareporttypecode,\r\n                //      \"label\": response[1].data.ReportType[0].scoareporttypename\r\n                // }\r\n                // };\r\n                let masterData = {};\r\n                let openModal = true;\r\n                let sectionvalue=[];\r\n                let comboValues={};\r\n                let reportTemplateList = [];\r\n                let selectedRecord={};\r\n\r\n                delete selectedRecord[\"nsectioncode\"];\r\n                        delete selectedRecord[\"nreporttemplatecode\"];\r\n               // let selectedRecord = inputParam.inputData.selectedRecord;\r\n                // let selectedRecord = inputParam.selectedRecord;\r\n                // selectedRecord[\"nmultiplesampleinsinglerelease\"] = inputParam.realReportTypeValue[\"nmultiplesampleinsinglerelease\"];\r\n                const sectionTypeMap = constructOptionList(response[2].data.sectionList || [], \"nsectioncode\",\r\n                \"ssectionname\", undefined, undefined, false);\r\n               sectionList = sectionTypeMap.get(\"OptionList\");\r\n                sectionList.map(x=>sectionvalue.push({\"value\":x.value,\"title\":x.label}));\r\n                let testListMap = response[3] && response[3].data;\r\n                if (inputParam.inputData.isneedsection!==transactionStatus.YES) {\r\n                    const reportTemplateMap = constructOptionList(response[4].data || [], \"nreporttemplatecode\", \"sreporttemplatename\", \"nreporttemplatecode\",\r\n                        \"ascending\", false);\r\n                    reportTemplateList = reportTemplateMap.get(\"OptionList\");\r\n                }\r\n                let combovaluesListMap=response[5] && response[5].data;\r\n                let comboValueList={...testListMap, ...combovaluesListMap} ||{};\r\n             comboValues={\"s.nsectioncode\":sectionvalue,...comboValueList};\r\n                // if (inputParam.inputData.ncoareporttypecode === reportCOAType.PROJECTWISE ||\r\n                //     inputParam.inputData.nsampletypecode === SampleType.PROJECTSAMPLETYPE && inputParam.inputData.ncoareporttypecode === reportCOAType.SECTIONWISEMULTIPLESAMPLE) {\r\n                //     const projectTypeMap = constructOptionList(response[0].data || [], \"nprojecttypecode\",\r\n                //         \"sprojecttypename\", undefined, undefined, false);\r\n\r\n                //     ProjectTypeList = projectTypeMap.get(\"OptionList\");\r\n                //     masterData = { ...inputParam.masterData, ReleaseSubSample: [], ReleaseTest: [], ReleaseSample: [] };\r\n                //     if (inputParam.inputData.selectedRecord.nprojecttypecode) {\r\n                //         delete inputParam.inputData.selectedRecord.nprojecttypecode\r\n                //     }\r\n                //     if (inputParam.inputData.selectedRecord.nprojectmastercode) {\r\n                //         delete inputParam.inputData.selectedRecord.nprojectmastercode\r\n                //     }\r\n                //     const sectionTypeMap = constructOptionList(response[1].data.sectionList || [], \"nsectioncode\",\r\n                //     \"ssectionname\", undefined, undefined, false);\r\n                // sectionList = sectionTypeMap.get(\"OptionList\");\r\n                // sectionList.map(x=>sectionvalue.push({\"value\":x.value,\"title\":x.label}));\r\n                // let comboValueList=response[2] && response[2].data ||{};\r\n                //  comboValues={\"s.nsectioncode\":sectionvalue,...comboValueList}\r\n                \r\n                // }\r\n                // else \r\n                // if (inputParam.inputData.isneedsection === transactionStatus.YES || inputParam.inputData.ncoareporttypecode === reportCOAType.SECTIONWISE || inputParam.inputData.ncoareporttypecode === reportCOAType.SECTIONWISEMULTIPLESAMPLE) {\r\n                //     const sectionTypeMap = constructOptionList(response[0].data.sectionList || [], \"nsectioncode\",\r\n                //         \"ssectionname\", undefined, undefined, false);\r\n                //     sectionList = sectionTypeMap.get(\"OptionList\");\r\n                //     sectionList.map(x=>sectionvalue.push({\"value\":x.value,\"title\":x.label}));\r\n                //     let comboValueList=response[1] && response[1].data ||{};\r\n                //      comboValues={\"s.nsectioncode\":sectionvalue,...comboValueList}\r\n                //     masterData = { ...inputParam.masterData, ReleaseSubSample: [], ReleaseTest: [], ReleaseSample: [] };\r\n                //     if (inputParam.inputData.selectedRecord.nsectioncode) {\r\n                //         delete inputParam.inputData.selectedRecord.nsectioncode\r\n                //     }\r\n\r\n                // }\r\n                // else {\r\n                    if(ismandatory){\r\n                        masterData = { ...inputParam.masterData, ReleaseSubSample: [], ReleaseTest: [], ReleaseSample: [] };\r\n                    }else{\r\n                    if (response[0].data && response[0].data.ReleaseSample.length !== 0) {\r\n\r\n                        let responseData = { ...response[0].data }\r\n                        masterData = {\r\n                            ...inputParam.masterData, ...responseData\r\n                        }\r\n                    }\r\n                    else {\r\n                        let responseData = { ...response[0].data }\r\n                        masterData = {\r\n                            ...inputParam.masterData, ...responseData\r\n                        }\r\n                        openModal = false;\r\n                        toast.warn(intl.formatMessage({ id: \"IDS_NOSAMPLESAREAVAILABLE\" }));\r\n                    }\r\n                }\r\n\r\n               // }\r\n               let awesomeTree;\r\n               let filterquery;\r\n               let filterQueryTreeStr;\r\n               let fields =getFilterConditionsBasedonDataType(inputParam.extractedColumnList,comboValues);\r\n               if(inputParam.DynamicDefaultStructureItem && inputParam.DynamicDefaultStructureItem.nsampletypecode ===inputParam.inputData.nsampletypecode\r\n                && inputParam.DynamicDefaultStructureItem.nregtypecode ===inputParam.inputData.nregtypecode\r\n                 && inputParam.DynamicDefaultStructureItem.nregsubtypecode===inputParam.inputData.nregsubtypecode ){\r\n                awesomeTree=inputParam.DynamicDefaultStructureItem && inputParam.DynamicDefaultStructureItem.awesomeTree && checkTree(loadTree(inputParam.DynamicDefaultStructureItem.awesomeTree), inputParam.DynamicDefaultStructureItem.awesomeConfig) \r\n                filterquery=inputParam.DynamicDefaultStructureItem.filterquery\r\n                filterQueryTreeStr=inputParam.DynamicDefaultStructureItem.filterQueryTreeStr\r\n                \r\n                 }else{\r\n                    awesomeTree=undefined;\r\n                 }\r\n\r\n                sortData(masterData);\r\n                masterData[\"reportTemplateList\"] = reportTemplateList;\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData,\r\n                        selectedRecord,\r\n                        expandCheck: false,\r\n                        ProjectTypeList,\r\n                        ncontrolCode,\r\n                        isDeletePopup: false,\r\n                        isComboCheck: false,\r\n                        isEditPopup: false,\r\n                        screenName:inputParam.inputData.screenName,\r\n                        sectionList,\r\n                        loading: false,\r\n                        showFilter: false,\r\n                        openModal: openModal,\r\n                        isAddPopup: true,\r\n                        operation: \"save\",\r\n                        kendoSkip: 0,\r\n                        kendoTake: 5,\r\n                        sectionvalue,\r\n                        comboValues,\r\n                        awesomeTree:awesomeTree,filterquery,fields,filterQueryTreeStr,\r\n                        FilterQueryBuilder:false,\r\n                        screenNameCopy:inputParam.inputData.screenName,\r\n                        ismandatory,\r\n                        slideOutClose: false    // ALPD-4208 (22-05-2024) Changes done for expand function in add sample popup\r\n                        //awesomeConfig:undefined\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n}\r\n\r\nexport function generateReleasedReport(inputData, Data,preventtb) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n\r\n        let urlArray = [];\r\n        //   const releaseSample = rsapi.post(\"release/updateRelease\", inputData)  ;\r\n        //   const afterCorrection = rsapi.post(\"release/updateReleaseAfterCorrection\", inputData)  ;\r\n        inputData['preventTbFlow']=preventtb===true?preventtb:false\r\n        if (inputData.listStatus === transactionStatus.CORRECTION) {\r\n\r\n            const afterCorrection = rsapi.post(\"release/updateReleaseAfterCorrection\", inputData);\r\n            urlArray = [afterCorrection];\r\n        }\r\n\r\n        else {\r\n            const releaseSample = rsapi.post(\"release/updateRelease\", inputData);\r\n\r\n            urlArray = [releaseSample];\r\n        }\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                if (response[0].data.rtn === \"MappingNeeded\") {\r\n                    \r\n\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN, payload: {\r\n                            loading: false,\r\n                            modalShow: false, \r\n                           // selectedRecord: {}, \r\n                            loadEsign: false,\r\n                            //openModal: false,\r\n                           // preventTbCheck:true\r\n                        }\r\n                    })\r\n\r\n                    inputData.confirmMessage.confirm(\"PortalMapping\", intl.formatMessage({ id: \"IDS_SUBSAMPLEWASNOTMAPPED\" }), intl.formatMessage({ id: \"IDS_DOYOUWANTTOCONTINUEWITHOUTSENDRESULTTOPREVENTTB\" }),\r\n                    intl.formatMessage({ id: \"IDS_OK\" }), intl.formatMessage({ id: \"IDS_CANCEL\" }),\r\n                     () => dispatch(generateReleasedReport(inputData, Data,true))  ,false,()=>dispatch(cancelPopUp(inputData, Data)) )\r\n\r\n                } else {\r\n                    // if (response[0].data[\"isPortalData\"] && response[0].data[\"PortalStatus\"] && response[0].data[\"PortalStatus\"].length > 0) {\r\n                    //     dispatch(UpdateExternalOrderStatus(response[0].data[\"PortalStatus\"], inputData));\r\n                    // }\r\n\r\n                    if (response[0].data[\"PreventTb\"]) {\r\n                        toast.warn(response[0].data[\"PreventTb\"])\r\n                    }\r\n\r\n                    // ALPD-4229 (30-05-2024) Added code when search and do action\r\n                    let searchedData = Data.searchedData;\r\n                    if(Data.searchedData && Data.searchedData !== undefined && Data.searchedData.length > 0){\r\n                        searchedData = response[0].data && response[0].data.ReleaseHistory && \r\n                            getSameRecordFromTwoArrays(response[0].data.ReleaseHistory, Data.searchedData, \"ncoaparentcode\");\r\n                    }\r\n                    sortData(searchedData, '', 'ncoaparentcode');   // ALPD-4229 (12-06-2024) Added sortData for searchedData\r\n                    let masterData = {\r\n                        ...Data,\r\n                        ...response[0].data,\r\n                        searchedData\r\n                    }\r\n                    //Added by sonia on 11-06-2024 for JIRA ID:4360  Auto Download reports\r\n                    if (inputData.autoDownloadReport){\r\n                        if(response[0].data && response[0].data.rtn){\r\n                            if (response[0].data.rtn === \"Success\") {\r\n                                let value = \"\";\r\n                                value = response[0][\"data\"][\"reportViewURL\"];\r\n                                var win = window.open(value);\r\n                                if (win) {\r\n                                    win.focus();\r\n                                } else {\r\n                                    intl.warn('IDS_PLEASEALLOWPOPUPSFORTHISWEBSITE');\r\n                                }\r\n                               // Commented by sonia on 11-06-2024 for JIRA ID:4360  Auto Download reports\r\n                               // document.getElementById(\"download_data\").setAttribute(\"href\", response[0].data.filepath);\r\n                               // document.getElementById(\"download_data\").click();\r\n                            }\r\n                            else {\r\n                                toast.warn(response[0].data.rtn);\r\n                            }\r\n                        }\r\n                    }\r\n                   \r\n                    sortData(masterData.ReleaseHistory, \"\", 'ncoaparentcode');\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN, payload: {\r\n                            loading: false, change: inputData.change, masterData,\r\n                            modalShow: false, selectedRecord: {}, loadEsign: false, openModal: false\r\n                        }\r\n                    })\r\n                }\r\n\r\n\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    //toast.warn(error.response.data['rtn']);\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function cancelPopUp(inputData,Data) {\r\n    return function (dispatch) {\r\n        dispatch({\r\n            type: DEFAULT_RETURN, payload: {\r\n                loading: false,\r\n                modalShow: false, selectedRecord: {}, loadEsign: false, openModal: false\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\nexport function getReleasedFilterStatus(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"release/getReleaseConfigVersionRegTemplateDesign\", inputData)\r\n            .then(response => {\r\n                let responseData = { ...response.data }\r\n                responseData = sortData(responseData)\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...responseData,\r\n                            RegSubTypeValue: inputData.RegSubTypeValue\r\n                        },\r\n                        loading: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function getReleasedDataDetails(inputParam, isServiceRequired) {\r\n    return function (dispatch) {\r\n        let inputParamData = {\r\n            dfrom: inputParam.inputData.dfrom,\r\n            dto: inputParam.inputData.dto,\r\n\r\n            nsampletypecode: inputParam.inputData.nsampletypecode,\r\n            nregtypecode: inputParam.inputData.nregtypecode,\r\n            nregsubtypecode: inputParam.inputData.nregsubtypecode,\r\n            ntransactionstatus: inputParam.inputData.ntransactionstatus,\r\n            nsectioncode: inputParam.inputData.nsectioncode,\r\n            ntestcode: inputParam.inputData.ntestcode,\r\n            napprovalversioncode: inputParam.inputData.napprovalversioncode,\r\n            napprovalconfigcode: inputParam.inputData.napprovalconfigcode,\r\n            userinfo: inputParam.inputData.userinfo,\r\n            nneedsubsample: inputParam.inputData.nneedsubsample,\r\n            // ncoaparentcode: inputParam.ncoaparentcode,\r\n            ncoaparentcode: inputParam.releaseno ? inputParam.releaseno.map(item => item.ncoaparentcode).join(\",\") : \"-1\",\r\n            npreregno: inputParam.npreregno,\r\n            ncoareporttypecode: inputParam.inputData.ncoareporttypecode,\r\n            isneedsection: inputParam.inputData.isneedsection,\r\n            ndesigntemplatemappingcode: inputParam.masterData.ndesigntemplatemappingcode,\r\n            isAddPopup: false\r\n        }\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"release/getReleaseSample\", inputParamData)\r\n            .then(response => {\r\n                let responseData = { ...response.data }\r\n                // responseData = sortData(responseData)\r\n                let masterData = {\r\n                    ...inputParam.masterData,\r\n                    ...responseData,\r\n                }\r\n\r\n                sortData(masterData);\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData,\r\n                        loading: false,\r\n                        showFilter: false,\r\n                        expandCheck: false,\r\n\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function getApprovedProjectByProjectType(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"release/getApprovedProjectByProjectType\", inputData)\r\n            .then(response => {\r\n                const projectMasterMap = constructOptionList(response.data.projectMasterList || [], \"nprojectmastercode\",\r\n                    \"sprojectcode\", undefined, undefined, false);\r\n\r\n                const projectMasterList = projectMasterMap.get(\"OptionList\");\r\n                let responseData = { ...response.data }\r\n                responseData = sortData(responseData)\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        projectMasterList,\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...responseData,\r\n                            ReleaseSample:[]\r\n                        },\r\n                       // selectedRecord: {},\r\n                        loading: false,\r\n                        expandCheck: false,\r\n\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function getApprovedProjectType(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"release/getApprovedProjectType\", inputData)\r\n            .then(response => {\r\n                const projectTypeMap = constructOptionList(response.data || [], \"nprojecttypecode\",\r\n                    \"sprojecttypename\", undefined, undefined, false);\r\n\r\n                const ProjectTypeList = projectTypeMap.get(\"OptionList\");\r\n\r\n                //     const projectMasterMap = constructOptionList(response.data || [], \"nprojecttypecode\",\r\n                //     \"sprojecttypename\", undefined, undefined, false);\r\n\r\n                // const projectMasterList = projectMasterMap.get(\"OptionList\");\r\n                let responseData = { ...response.data }\r\n                responseData = sortData(responseData)\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        ProjectTypeList,\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...responseData,\r\n                            ProjectTypeValue: inputData.ProjectTypeValue\r\n                        },\r\n                        loading: false,\r\n                        expandCheck: false,\r\n\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function getSectionForSectionWise(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"release/getSection\", inputData.inputData)\r\n            .then(response => {\r\n                const sectionMap = constructOptionList(response.data.sectionList || [], \"nsectioncode\",\r\n                    \"ssectionname\", undefined, undefined, false);\r\n\r\n                const sectionList = sectionMap.get(\"OptionList\");\r\n                let responseData = { ...response.data }\r\n                responseData = sortData(responseData)\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        sectionList,\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...responseData,\r\n                            ReleaseSample:[]\r\n                            \r\n                        },\r\n                        loading: false,\r\n                        expandCheck: false,\r\n\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function getReportForPortal(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"release/SendToPortalReport\", inputData)\r\n            .then(response => {\r\n\r\n                if (response.data[\"rtn\"]) {\r\n                    toast.warn(response.data.rtn);\r\n                }\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nfunction UpdateExternalOrderStatus(portallist, inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post((String)(inputParam[\"url\"]) + \"/portal/UpdateMultiSampleStatus\", JSON.stringify(portallist), {\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            }\r\n        })\r\n            .then(response => {\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response !== undefined && error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else if (error.response === undefined) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function getApprovedRecordsAsDraft(inputData, Data1, seletedRecord) {\r\n\r\n\r\n    return function (dispatch) {\r\n        if (inputData !== undefined && inputData.npreregno !== \"\") {\r\n            // ALPD-4229 (30-05-2024) Added searchRef to clear search text in search filter\r\n            let searchRef = inputData.searchRef;\r\n            delete(inputData.searchRef);\r\n\r\n            dispatch(initRequest(true));\r\n            return rsapi.post(\"release/saveRelease\", inputData)\r\n                .then(response => {\r\n                    if (response.data.rtn === \"Success\") {\r\n                        //SearchRef undefined issue fixed - L.Subashini\r\n                        if(searchRef !== undefined)\r\n                            searchRef.current.value = \"\";\r\n                        let masterData = {\r\n                            ...Data1, ...response.data, searchedData: undefined\r\n                        };\r\n                        delete(seletedRecord.nreporttemplatecode);\r\n                        seletedRecord[\"nisarnowiserelease\"] = transactionStatus.NO;\r\n                        sortData(masterData.ReleaseHistory, \"\", 'ncoaparentcode');\r\n                        dispatch({\r\n                            type: DEFAULT_RETURN, payload: {\r\n                                masterData,\r\n                                change: inputData.change,\r\n                                loading: false,\r\n                                loadEsign: false,\r\n                                openModal: false,\r\n                                expandCheck: false,\r\n                                slideOutClose: true             // ALPD-4208 (22-05-2024) Changes done for expand function in add sample popup\r\n                            }\r\n                        });\r\n                    }\r\n                    else {\r\n                        toast.warn(response.data.rtn);\r\n                        dispatch({\r\n                            type: DEFAULT_RETURN, payload: {\r\n                                //  masterData,\r\n                                change: inputData.change,\r\n                                loading: false,\r\n                               // loadEsign: false,\r\n                                //openModal: false,\r\n                                slideOutClose: false,\r\n                                expandCheck: false\r\n                            }\r\n                        });\r\n                    }\r\n                })\r\n\r\n                .catch(error => {\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                        //  console.log(\"ErrorRelease,\", error);\r\n\r\n                    }\r\n                    else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                })\r\n\r\n\r\n        }\r\n        else {\r\n            toast.warn(intl.formatMessage({\r\n                id: \"IDS_SELECTANYONESAMPLE\"\r\n            }));\r\n        }\r\n    }\r\n} \r\nexport function preliminaryReport(inputParam, Data, screenName) {\r\n    return function (dispatch) {\r\n\r\n        dispatch(initRequest(true));\r\n        // const inputData = {\r\n        //     npreregno: inputParam.npreregno,\r\n        //  //   nsectioncode: inputParam.nsectioncode || -1,\r\n        //     userinfo: inputParam.userinfo,\r\n        //     nprimarykey: inputParam.npreregno,\r\n        //     nreporttypecode: REPORTTYPE.COAREPORT,\r\n        //     sprimarykeyname: \"npreregno\",\r\n        //     ncontrolcode: inputParam.ncontrolCode,\r\n        //     nregtypecode: inputParam.nregtypecode,\r\n        //     nregsubtypecode: inputParam.nregsubtypecode,\r\n        //     ntransactiontestcode:inputParam.ntransactiontestcode,\r\n        //     napproveconfversioncode: inputParam.napprovalversioncode,\r\n        //     ncoaparentcode: inputParam.ncoaparentcode,\r\n        //     ntransactionstatus:inputParam.ntransactionstatus\r\n        // }\r\n        // rsapi.post(\"release/generateReleasedReport\", inputParam.inputData)\r\n        rsapi.post(\"release/preliminaryRegenerateReport\", inputParam.inputData)\r\n            .then(response => {\r\n                // ALPD-4229 (30-05-2024) Added code when search and do action\r\n                let searchedData = Data.searchedData;\r\n                if(Data.searchedData && Data.searchedData !== undefined && Data.searchedData.length > 0){\r\n                    searchedData = response.data && response.data.ReleaseHistory && \r\n                        getSameRecordFromTwoArrays(response.data.ReleaseHistory, Data.searchedData, \"ncoaparentcode\");\r\n                }\r\n                sortData(searchedData, '', 'ncoaparentcode');   // ALPD-4229 (12-06-2024) Added sortData for searchedData\r\n                let masterData = {\r\n                    ...Data,\r\n                    ...response.data,\r\n                    searchedData\r\n                }\r\n                sortData(masterData.ReleaseHistory, \"\", 'ncoaparentcode');\r\n                //Added by sonia on 11-06-2024 for JIRA ID:4360  Auto Download reports\r\n                if(inputParam.inputData.autoDownloadReport){\r\n                    if (response.data.rtn === \"Success\") {\r\n                        let value = \"\";\r\n                        value = response.data[\"reportViewURL\"];\r\n                        var win = window.open(value);\r\n                        if (win) {\r\n                            win.focus();\r\n                        } else {\r\n                            intl.warn('IDS_PLEASEALLOWPOPUPSFORTHISWEBSITE');\r\n                        }\r\n                        //Commented by sonia on 11-06-2024 for JIRA ID:4360  Auto Download reports\r\n                        //document.getElementById(\"download_data\").setAttribute(\"href\", response.data.filepath);\r\n                        //document.getElementById(\"download_data\").click();\r\n                    } else {\r\n                        toast.warn(response.data.rtn);\r\n                    }\r\n                }\r\n                \r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload:\r\n                    {\r\n                        loading: false, change: inputParam.change, masterData, screenName: screenName,\r\n                        modalShow: false, selectedRecord: {}, loadEsign: false, openModal: inputParam.inputData.openModal\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data['rtn']);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function previewAndFinalReport(inputParam, Data, screenName) {\r\n    return function (dispatch) {\r\n\r\n        dispatch(initRequest(true));\r\n        // const inputData = {\r\n        //     npreregno: inputParam.npreregno,\r\n        //  //   nsectioncode: inputParam.nsectioncode || -1,\r\n        //     userinfo: inputParam.userinfo,\r\n        //     nprimarykey: inputParam.npreregno,\r\n        //     nreporttypecode: REPORTTYPE.COAREPORT,\r\n        //     sprimarykeyname: \"npreregno\",\r\n        //     ncontrolcode: inputParam.ncontrolCode,\r\n        //     nregtypecode: inputParam.nregtypecode,\r\n        //     nregsubtypecode: inputParam.nregsubtypecode,\r\n        //     ntransactiontestcode:inputParam.ntransactiontestcode,\r\n        //     napproveconfversioncode: inputParam.napprovalversioncode,\r\n        //     ncoaparentcode: inputParam.ncoaparentcode,\r\n        //     ntransactionstatus:inputParam.ntransactionstatus\r\n        // }\r\n        // rsapi.post(\"release/generateReleasedReport\", inputParam.inputData)\r\n        rsapi.post(\"release/preliminaryRegenerateReport\", inputParam.inputData)\r\n            .then(response => {\r\n\r\n                if(response.data.sexporttype === \"viewer\")\r\n                {\r\n                if(response.data.sourceparameter!=undefined && response.data.sourceparameter!=\"\")\r\n                {\r\n                let mrtfilePath = reportUrl()\r\n                + \"?name=\" + inputParam.userinfo.sreportingtoolfilename     //en-xml\r\n                + \"&slanguagetypecode=\" + inputParam.userinfo.sreportlanguagecode    //en-us\r\n                + \"&foldername=\" + response.data.sreportname   //\"Quotation-002\"//this.props.Login.masterData.SelectedReportDetails.sreportname\r\n                + \"&filename=\" + response.data.ssystemfilename  //\"a6008692-3e1a-422b-b4da-5e9ad9cf3be6.mrt\"//\"b701dbc4-d90e-4840-b8e1-942649d6ec25.mrt\"//this.props.Login.masterData.SelectedReportDetails.ssystemfilename\r\n                + \"&sconnectionstring=\" + inputParam.userinfo.sconnectionString\r\n                + \"&sreportlink=\" + inputParam.Login.reportSettings[15] //inputParam.sreportlink //\"//localhost:8090/SharedFolder/QuaLISjrxml\"//this.props.Login.reportSettings[15] //this.props.Login.userInfo.sreportLink  \r\n                + \"&smrttemplatelink=\" + inputParam.Login.reportSettings[16]  //inputParam.smrttemplatelink //\"//localhost:8090//SharedFolder//ReportJSON//ReportTemplate.json\"//this.props.Login.reportSettings[16]//this.props.Login.userInfo.smrttemplateLink\r\n                + \"&sourceparameter=\" + encodeURIComponent(response.data.sourceparameter);\r\n\r\n             window.open(mrtfilePath);\r\n    }\r\n}\r\n\r\n\r\n                let masterData = {\r\n                    ...Data,\r\n                    ...response.data,\r\n                }\r\n\r\n                //Added by sonia on 11-06-2024 for JIRA ID:4360  Auto Download reports\r\n                 if(inputParam.inputData.autoDownloadReport){\r\n                    if (response.data.rtn === \"Success\") {\r\n                        let value = \"\";\r\n                        value = response.data[\"reportViewURL\"];\r\n                        var win = window.open(value);\r\n                        if (win) {\r\n                            win.focus();\r\n                        } else {\r\n                            intl.warn('IDS_PLEASEALLOWPOPUPSFORTHISWEBSITE');\r\n                        }\r\n                        //Commented by sonia on 11-06-2024 for JIRA ID:4360  Auto Download reports\r\n                        //document.getElementById(\"download_data\").setAttribute(\"href\", response.data.filepath);\r\n                        //document.getElementById(\"download_data\").click();\r\n                    } else {\r\n                        toast.warn(response.data.rtn);\r\n                    }\r\n                 }\r\n                \r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload:\r\n                    {\r\n                        loading: false, change: inputParam.change, masterData, screenName: screenName,\r\n                        modalShow: false, selectedRecord: {}, loadEsign: false, openModal: inputParam.inputData.openModal\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data['rtn']);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function getRemoveApprovedSample(inputParam, ncontrolCode) {\r\n    return function (dispatch) {\r\n        if(inputParam.masterData && inputParam.masterData.selectedReleaseHistory && inputParam.masterData.selectedReleaseHistory.length > 1){\r\n            toast.warn(intl.formatMessage({ id: \"IDS_MULTISELECTAPPLICABLEONLYFORRELEASEACTION\" }));\r\n        } else {\r\n            let urlArray = [];\r\n            inputParam.inputData['isPopup'] = true\r\n            if(inputParam.inputData['allowAppendRemoveSamples'] === transactionStatus.YES){\r\n            // if(inputParam.inputData['allowAppendRemoveSamples'] === transactionStatus.YES && \r\n            // (inputParam.inputData['nneedsubsample'] === false || \r\n            // (inputParam.inputData['nneedsubsample'] === true && inputParam.inputData['ncoaparenttranscode'] === transactionStatus.DRAFT))){\r\n                const releaseSample = rsapi.post(\"release/getReleaseSample\", inputParam.inputData);\r\n                //  const reportType = rsapi.post(\"release/getCOAReportType\", { userinfo: inputParam.inputData.userinfo });\r\n                // const projectType = rsapi.post(\"release/getApprovedProjectType\", inputParam.inputData);\r\n                const statusService = rsapi.post(\"release/getStatusAlert\", inputParam.inputData);\r\n\r\n                urlArray = [releaseSample, statusService\r\n                    //,reportType\r\n                ];\r\n\r\n                dispatch(initRequest(true));\r\n                Axios.all(urlArray)\r\n\r\n                .then(response => {\r\n                    if (response[1].data.Status === \"Success\") {\r\n\r\n                        let masterData = {};\r\n                        let selectedRecord = inputParam.inputData.selectedRecord;\r\n\r\n                        let responseData = { ...response[0].data }\r\n                        masterData = {\r\n                            ...inputParam.masterData, ...responseData\r\n                        }\r\n\r\n\r\n                        // responseData = sortData(responseData)\r\n\r\n\r\n                        sortData(masterData);\r\n                        dispatch({\r\n                            type: DEFAULT_RETURN, payload: {\r\n                                masterData,\r\n                                // selectedRecord,\r\n                                isDeletePopup: true,\r\n                                isComboCheck: true,\r\n                                isEditPopup: false,\r\n                                ncontrolCode,\r\n                                loading: false,\r\n                                showFilter: false,\r\n                                openModal: true,\r\n                                isAddPopup: false,\r\n                                operation: \"delete\",\r\n                                ncontrolCode: inputParam.inputData.ncontrolCode,\r\n                                expandCheck: false,\r\n                                screenName: inputParam.inputData.screenName,\r\n                                slideOutClose: false    // ALPD-4208 (22-05-2024) Changes done for expand function in add sample popup\r\n                            }\r\n                        })\r\n                    }\r\n                    else {\r\n                        toast.warn(intl.formatMessage({\r\n                            id: response[1].data.ValidationStatus\r\n                        }));\r\n                        dispatch({\r\n                            type: DEFAULT_RETURN,\r\n                            payload: {\r\n                                ncontrolCode: ncontrolCode,\r\n                                loading: false\r\n                            }\r\n                        });\r\n\r\n                    }\r\n                })\r\n                .catch(error => {\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    }\r\n                    else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                })\r\n            // } else if(inputParam.inputData['allowAppendRemoveSamples'] === transactionStatus.NO || \r\n            //     (inputParam.inputData['allowAppendRemoveSamples'] === transactionStatus.YES && inputParam.inputData['ncoaparenttranscode'] !== transactionStatus.DRAFT)){\r\n            //         toast.warn(intl.formatMessage({ id: \"IDS_SAMPLESARENOTALLOWEDTODELETE\" }));\r\n            } else {\r\n                toast.warn(intl.formatMessage({ id: \"IDS_SAMPLESARENOTALLOWEDTODELETE\" }));\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                });\r\n                // toast.warn(intl.formatMessage({ id: \"IDS_SAMPLESARENOTALLOWEDTODELETE\" })+ \" \"+ intl.formatMessage({ id: \"IDS_FOR\" })+ \" \"+ inputParam.inputData['sregsubtypename']);\r\n            }\r\n        }\r\n    }\r\n}\r\nexport function getDeleteApprovedSample(inputData, Data1) {\r\n\r\n\r\n    return function (dispatch) {\r\n        if (inputData !== undefined && inputData.npreregno !== \"\") {\r\n            // ALPD-4229 (12-06-2024) Deleted searchRef from inputData\r\n            delete(inputData.searchRef);\r\n            dispatch(initRequest(true));\r\n            return rsapi.post(\"release/deleteRelease\",\r\n\r\n                inputData\r\n            )\r\n                .then(response => {\r\n                    if (response.data.rtn === \"Success\") {\r\n\r\n                        let masterData = {\r\n                            ...Data1, ...response.data,\r\n                        };\r\n                        sortData(masterData.ReleaseHistory, \"\", 'ncoaparentcode');\r\n                        dispatch({\r\n                            type: DEFAULT_RETURN, payload: {\r\n                                masterData,\r\n                                change: inputData.change,\r\n                                loading: false,\r\n                                loadEsign: false,\r\n                                openModal: false,\r\n                                expandCheck: false,\r\n                                slideOutClose: true // ALPD-4208 (22-05-2024) Changes done for expand function in add sample popup\r\n                            }\r\n                        });\r\n                    }\r\n                    else {\r\n                        toast.warn(response.data.rtn);\r\n\r\n                        dispatch({\r\n                            type: DEFAULT_RETURN, payload: {\r\n                                //    masterData,\r\n                                change: inputData.change,\r\n                                loading: false,\r\n                               // loadEsign: false,\r\n                               // openModal: false,\r\n                                expandCheck: false,\r\n                                slideOutClose: false\r\n\r\n\r\n                            }\r\n                        });\r\n                    }\r\n                })\r\n                .catch(error => {\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                        //  console.log(\"ErrorRelease,\", error);\r\n\r\n                    }\r\n                    else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                })\r\n        }\r\n        else {\r\n            toast.warn(intl.formatMessage({\r\n                id: \"IDS_SELECTANYONESAMPLE\"\r\n            }));\r\n        }\r\n    }\r\n}\r\n\r\n //Added by sonia on 11-06-2024 for JIRA ID:4122 Sample Count Validation\r\nexport function validationforAppendSamples(inputParam, ncontrolCode) {\r\n   return function (dispatch){\r\n        if(inputParam.masterData && inputParam.masterData.selectedReleaseHistory && inputParam.masterData.selectedReleaseHistory.length > 1){\r\n            toast.warn(intl.formatMessage({ id: \"IDS_MULTISELECTAPPLICABLEONLYFORRELEASEACTION\" }));\r\n        } else {\r\n            let urlArray = [];\r\n            const sampleCountValidation = rsapi.post(\"release/sampleCountValidation\", inputParam.inputData);\r\n            urlArray = [sampleCountValidation];\r\n            dispatch(initRequest(true));\r\n            Axios.all(urlArray)\r\n                .then(response => {\r\n                    if(response[0].data.rtn===\"Success\"){\r\n                        dispatch(getEditApprovedSample(inputParam, ncontrolCode));\r\n                    }else{\r\n                        toast.warn(intl.formatMessage({id: \"IDS_MAXIMUMSAMPLESAPPENDED\"}));\r\n                        dispatch({\r\n                            type: DEFAULT_RETURN,\r\n                            payload: {\r\n                            ncontrolCode: ncontrolCode,\r\n                            loading: false\r\n                            }\r\n                        });\r\n                    }\r\n                })\r\n                .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n                })    \r\n        } \r\n    }\r\n}\r\n//Modified by sonia on 11-06-2024 for JIRA ID:4122 Sample Count Validation\r\nexport function getEditApprovedSample(inputParam, ncontrolCode) {\r\n    return function (dispatch) {       \r\n        let urlArray = [];\r\n        inputParam.inputData['isPopup'] = true\r\n        if(inputParam.inputData['allowAppendRemoveSamples'] === transactionStatus.YES){\r\n           // const sampleCountValidation = rsapi.post(\"release/sampleCountValidation\", inputParam.inputData);\r\n            const releaseSample = rsapi.post(\"release/getReleaseSample\", inputParam.inputData);\r\n            //  const reportType = rsapi.post(\"release/getCOAReportType\", { userinfo: inputParam.inputData.userinfo });\r\n            //  const projectType = rsapi.post(\"release/getApprovedProjectType\", inputParam.inputData);\r\n            const statusService = rsapi.post(\"release/getStatusAlert\", inputParam.inputData);\r\n           // const projectStatus = rsapi.post(\"release/getProjectBasedAlert\", inputParam.inputData);\r\n\r\n            const testList=rsapi.post(\"release/getTest\", inputParam.inputData)\r\n            const sectionType = rsapi.post(\"release/getSection\", inputParam.inputData);\r\n\r\n                    // if (inputParam.inputData.ncoareporttypecode === 7) {\r\n\r\n            //     urlArray = [ projectType,statusService];\r\n            // }\r\n            // else if (inputParam.inputData.ncoareporttypecode === 8) {\r\n            //     urlArray = [ releaseSample,statusService];\r\n            // }\r\n            // else {\r\n            urlArray = [releaseSample,statusService,testList,sectionType\r\n                //,reportType\r\n            ];\r\n            if(inputParam.DynamicReportFilterTypeItem && inputParam.DynamicReportFilterTypeItem.length>0){\r\n                let itemList=[];\r\n                inputParam.DynamicReportFilterTypeItem.map(x=>{\r\n                    if(x[designProperties.LISTITEM]===\"combo\"){\r\n                        itemList.push(\r\n                            {\"Pkey\":x[designProperties.PRIMARYKEY],\r\n                            \"nquerybuildertablecode\":x[designProperties.QUERYBUILDERTABLECODE],\r\n                        \"tablename\":x[designProperties.TABLENAME],\r\n                        \"columnname\":x[designProperties.COLUMNNAME],\r\n                    \"keyName\":x[designProperties.VALUE],\r\n                \"isMultiLingual\":x[designProperties.MULTILINGUAL],\r\n                \"languageTypeCode\" :inputParam.inputData.userinfo.slanguagetypecode,\r\n                \"recordType\":x[designProperties.RECORDTYPE]})\r\n                    }\r\n                })\r\n                inputParam[\"inputData\"][\"itemList\"]=itemList;\r\n                const reportFilterType = rsapi.post(\"release/getComboValues\", {...inputParam.inputData,'userInfo':inputParam.inputData.userinfo});\r\n                urlArray.push(reportFilterType);\r\n            }\r\n            // }\r\n            dispatch(initRequest(true));\r\n            Axios.all(urlArray)\r\n\r\n                .then(response => {\r\n                    // const reportTypeMap = constructOptionList(response[1].data.ReportType || [], \"ncoareporttypecode\",\r\n                    //     \"scoareporttypename\", undefined, undefined, false);\r\n\r\n                    // const ReportTypeList = reportTypeMap.get(\"OptionList\");                   \r\n                        if (response[1].data.Status === \"Success\") {\r\n                            let ProjectTypeList = [];\r\n                            let sectionList = [];\r\n                            let comboValues={};\r\n                            let sectionvalue=[];\r\n                            const sectionTypeMap = constructOptionList(response[3].data.sectionList || [], \"nsectioncode\",\r\n                                                   \"ssectionname\", undefined, undefined, false);\r\n                            sectionList = sectionTypeMap.get(\"OptionList\");\r\n                            sectionList.map(x=>sectionvalue.push({\"value\":x.value,\"title\":x.label}));\r\n                            let testListMap=response[2] && response[2].data\r\n                            let combovaluesListMap=response[4] && response[4].data\r\n                            let comboValueList={...testListMap, ...combovaluesListMap} ||{};\r\n                            comboValues={\"s.nsectioncode\":sectionvalue,...comboValueList}\r\n                            // let selectedRecord = {\"ncoareporttypecode\": {\r\n                            //     \"value\": response[1].data.ReportType[0].ncoareporttypecode,\r\n                            //      \"label\": response[1].data.ReportType[0].scoareporttypename\r\n                            // }\r\n                            // };\r\n                            let masterData = {};\r\n                            let openModal = true;\r\n    \r\n                            let selectedRecord = inputParam.inputData.selectedRecord;\r\n    \r\n                            if (response[0].data && response[0].data.ReleaseSample.length !== 0) {\r\n    \r\n                                let responseData = { ...response[0].data }\r\n                                masterData = {\r\n                                    ...inputParam.masterData, ...responseData\r\n                                }\r\n                            }\r\n                            else {\r\n                                let responseData = { ...response[0].data }\r\n                                masterData = {\r\n                                    ...inputParam.masterData, ...responseData\r\n                                }\r\n                                openModal = false;\r\n                                toast.warn(intl.formatMessage({ id: \"IDS_NOSAMPLESAREAVAILABLE\" }));\r\n                            }\r\n                            // responseData = sortData(responseData)\r\n                            let awesomeTree;\r\n                            let filterquery;\r\n                            let fields =getFilterConditionsBasedonDataType(inputParam.extractedColumnList,comboValues);\r\n                            if(inputParam.DynamicDefaultStructureItem && \r\n                               inputParam.DynamicDefaultStructureItem.nsampletypecode ===inputParam.inputData.nsampletypecode\r\n                               && inputParam.DynamicDefaultStructureItem.nregtypecode ===inputParam.inputData.nregtypecode\r\n                               && inputParam.DynamicDefaultStructureItem.nregsubtypecode===inputParam.inputData.nregsubtypecode ){\r\n                                    awesomeTree=inputParam.DynamicDefaultStructureItem && inputParam.DynamicDefaultStructureItem.awesomeTree && checkTree(loadTree(inputParam.DynamicDefaultStructureItem.awesomeTree), inputParam.DynamicDefaultStructureItem.awesomeConfig) \r\n                                    filterquery=inputParam.DynamicDefaultStructureItem.filterquery\r\n                                }else{\r\n                                    awesomeTree=undefined;\r\n                                }\r\n    \r\n                                sortData(masterData);\r\n                                dispatch({\r\n                                    type: DEFAULT_RETURN, payload: {\r\n                                        masterData,\r\n                                        // selectedRecord,\r\n                                        sectionList,\r\n                                        ncontrolCode: inputParam.inputData.ncontrolCode,\r\n                                        isDeletePopup: false,\r\n                                        isComboCheck: false,\r\n                                        isEditPopup: true,\r\n                                        ProjectTypeList,\r\n                                        loading: false,\r\n                                        showFilter: false,\r\n                                        openModal: openModal,\r\n                                        isAddPopup: false,\r\n                                        operation: \"append\",\r\n                                        expandCheck: false,\r\n                                        screenName: inputParam.inputData.screenName,\r\n                                        sectionvalue,\r\n                                        comboValues,\r\n                                        awesomeTree:awesomeTree,filterquery,fields,\r\n                                        screenNameCopy:inputParam.inputData.screenName,\r\n                                        slideOutClose: false    // ALPD-4208 (22-05-2024) Changes done for expand function in add sample popup\r\n                                    }\r\n                                })\r\n                        }\r\n                        else {\r\n                            toast.warn(intl.formatMessage({id: response[1].data.ValidationStatus}));\r\n                            dispatch({\r\n                                type: DEFAULT_RETURN,\r\n                                payload: {\r\n                                    ncontrolCode: ncontrolCode,\r\n                                    loading: false\r\n                                }\r\n                            });\r\n    \r\n                        }                   \r\n                })\r\n                .catch(error => {\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    }\r\n                    else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                })\r\n                // }  else if(inputParam.inputData['allowAppendRemoveSamples'] === transactionStatus.NO || \r\n                // (inputParam.inputData['allowAppendRemoveSamples'] === transactionStatus.YES && inputParam.inputData['ncoaparenttranscode'] !== transactionStatus.DRAFT)){\r\n                //     toast.warn(intl.formatMessage({ id: \"IDS_SAMPLESARENOTALLOWEDTODELETE\" }));\r\n            } else {\r\n            toast.warn(intl.formatMessage({ id: \"IDS_SAMPLESARENOTALLOWEDTODELETE\" }));\r\n            dispatch({\r\n                type: DEFAULT_RETURN,\r\n                payload: {\r\n                    loading: false\r\n                }\r\n            });\r\n                // toast.warn(intl.formatMessage({ id: \"IDS_SAMPLESARENOTALLOWEDTODELETE\" })+ \" \"+ intl.formatMessage({ id: \"IDS_FOR\" })+ \" \"+ inputParam.inputData['sregsubtypename']);\r\n            }\r\n      \r\n    }\r\n}\r\nexport function UpdateApprovedSample(inputData, Data1) {\r\n\r\n\r\n    return function (dispatch) {\r\n        if (inputData !== undefined && inputData.npreregno !== \"\") {\r\n            // ALPD-4229 (12-06-2024) Deleted searchRef from inputData\r\n            delete(inputData.searchRef);\r\n            dispatch(initRequest(true));\r\n            return rsapi.post(\"release/appendRelease\",inputData)\r\n                .then(response => {\r\n                    if (response.data.rtn === \"Success\") {\r\n\r\n                        let masterData = {\r\n                            ...Data1, ...response.data,\r\n                        };\r\n                        sortData(masterData.ReleaseHistory, \"\", 'ncoaparentcode');\r\n                        dispatch({\r\n                            type: DEFAULT_RETURN, payload: {\r\n                                masterData,\r\n                                change: inputData.change,\r\n                                loading: false,\r\n                                loadEsign: false,\r\n                                openModal: false,\r\n                                expandCheck: false,                              \r\n                                slideOutClose: true // ALPD-4208 (22-05-2024) Changes done for expand function in add sample popup\r\n                            }\r\n                        });\r\n                    }\r\n                    else {\r\n                        toast.warn(response.data.rtn);\r\n                        dispatch({\r\n                            type: DEFAULT_RETURN, payload: {\r\n                                //  masterData,\r\n                                change: inputData.change,\r\n                                loading: false,\r\n                                //loadEsign: false,\r\n                                // openModal: false,\r\n                                slideOutClose: false,\r\n                                expandCheck: false\r\n                            }\r\n                        });\r\n                    }\r\n                })\r\n                .catch(error => {\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                        // console.log(\"ErrorRelease,\", error);\r\n\r\n                    }\r\n                    else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                })\r\n        }\r\n        else {\r\n            toast.warn(intl.formatMessage({\r\n                id: \"IDS_SELECTANYONESAMPLE\"\r\n            }));\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\nexport function getreportcomments(inputData, Data) {\r\n    return function (dispatch) {\r\n\r\n        dispatch(initRequest(true));\r\n\r\n        rsapi.post(\"release/getreportcomments\", inputData)\r\n            .then(response => {\r\n                let masterData = {\r\n                    ...Data,\r\n                    ...response.data,\r\n                }\r\n\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        loading: false, change: inputData.change, masterData,\r\n                        screenName: \"IDS_REPORTINFOCOMMENT\",\r\n                        openModal: true, selectedRecord: {}, loadEsign: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function fetchReportInfoReleaseById(editParam) {\r\n    return function (dispatch) {\r\n        let additionalInfo = [];\r\n\r\n        let inputParamData = {\r\n            nreportinforeleasecode: editParam.editRow.nreportinforeleasecode,\r\n            userinfo: editParam.userInfo\r\n        }\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"release/getActiveReportInfoReleaseById\", inputParamData)\r\n            .then(response => {\r\n\r\n                // const parameterResults = response.data.ReleaseParameter\r\n                let selectedId = editParam.editRow.nreportinforeleasecode;\r\n                const selectedComment = { ...response.data };\r\n                const masterData = {\r\n                    ...editParam.masterData,\r\n                    selectedComment\r\n                }\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n\r\n                    payload: {\r\n                        screenName: \"IDS_REPORTINFOCOMMENTS\",\r\n                        selectedId,\r\n                        masterData,\r\n                        //isParameterInitialRender: true,\r\n                        loading: false,\r\n                        openModal: true,\r\n                        // modalShow: true,\r\n                        ReportmodalShow: true,\r\n                        operation: \"update\",\r\n                        modalTitle: intl.formatMessage({ id: \"IDS_COMMENTS\" }),\r\n\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n        //}\r\n\r\n\r\n    }\r\n}\r\n\r\n\r\nexport function UpdateReportComments(userInfo, Data1, inputData) {\r\n    let inputParamData = {\r\n        selectedComment: Data1.selectedComment,\r\n        userinfo: userInfo\r\n    }\r\n\r\n    return function (dispatch) {\r\n        //if (inputData !== undefined &&inputData.npreregno!==\"\") {\r\n\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"release/updateReportComment\",\r\n\r\n            inputParamData\r\n        )\r\n            .then(response => {\r\n                let masterData = {\r\n\r\n                    ...Data1, ...response.data,\r\n                    selectedComment: {},\r\n                };\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData,\r\n                        screenName: \"IDS_REPORTINFOCOMMENT\",\r\n                        loading: false,\r\n                        openModal: true,\r\n                        expandCheck: false,\r\n                        modalShow: false,\r\n                        ReportmodalShow: false,\r\n                        isComboCheck: true,\r\n\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                    // console.log(\"ErrorRelease,\", error);\r\n\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n        // }\r\n        // else {\r\n        //     toast.warn(intl.formatMessage({\r\n        //         id: \"IDS_SELECTANYONESAMPLE\"\r\n        //     }));\r\n        //}\r\n    }\r\n}\r\nexport function getResultCorrectionData(inputParam, ncontrolCode) {\r\n    return function (dispatch) {\r\n        if(inputParam.masterData && inputParam.masterData.selectedReleaseHistory && inputParam.masterData.selectedReleaseHistory.length > 1){\r\n            toast.warn(intl.formatMessage({ id: \"IDS_MULTISELECTAPPLICABLEONLYFORRELEASEACTION\" }));\r\n        } else {\r\n            let urlArray = [];\r\n            inputParam.inputData['isPopup'] = true\r\n            const resultCorrection = rsapi.post(\"release/getResultCorrection\", inputParam.inputData);\r\n            //  const reportType = rsapi.post(\"release/getCOAReportType\", { userinfo: inputParam.inputData.userinfo });\r\n            // const projectType = rsapi.post(\"release/getApprovedProjectType\", inputParam.inputData);\r\n            const statusService = rsapi.post(\"release/getStatusAlert\", inputParam.inputData);\r\n\r\n            urlArray = [resultCorrection, statusService\r\n                //,reportType\r\n            ];\r\n\r\n            dispatch(initRequest(true));\r\n            Axios.all(urlArray)\r\n\r\n            .then(response => {\r\n                if (response[1].data.Status === \"Success\") {\r\n\r\n                    let masterData = {};\r\n                    let selectedRecord = inputParam.inputData.selectedRecord;\r\n\r\n                    let responseData = { ...response[0].data }\r\n                    masterData = {\r\n                        ...inputParam.masterData, ...responseData\r\n                    }\r\n\r\n                    sortData(masterData);\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN, payload: {\r\n                            masterData,\r\n                            // selectedRecord,\r\n                            isDeletePopup: true,\r\n                            isComboCheck: true,\r\n                            isEditPopup: false,\r\n                            loadEsign: false,\r\n                            ncontrolCode,\r\n                            loading: false,\r\n                            showFilter: false,\r\n                            openModal: true,\r\n                            isCorrectionNeed: true,\r\n                            isAddPopup: false,\r\n                            operation: \"delete\",\r\n                            ncontrolCode: inputParam.inputData.ncontrolCode,\r\n                            expandCheck: false,\r\n                            hideSave: true,\r\n                            screenName: inputParam.inputData.screenName,\r\n\r\n\r\n                        }\r\n                    })\r\n                }\r\n                else {\r\n                    toast.warn(intl.formatMessage({\r\n                        id: response[1].data.ValidationStatus\r\n                    }));\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            ncontrolCode: ncontrolCode,\r\n                            loading: false,\r\n                            expandCheck: false,\r\n                            loadEsign: false,\r\n                            openModal: false\r\n                        }\r\n                    });\r\n\r\n                }\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n        }\r\n    }\r\n}\r\nexport function fetchParameterById(editParam) {\r\n    return function (dispatch) {\r\n        let additionalInfo = [];\r\n\r\n        let inputParamData = {\r\n            ntransactionresultcode: editParam.primaryKeyValue,\r\n            userinfo: editParam.userInfo\r\n        }\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"release/getReleaseResults\", inputParamData)\r\n            .then(response => {\r\n                let selectedResultGrade = [];\r\n                let paremterResultcode = [];\r\n                const parameterResults = response.data.ReleaseParameter\r\n                let predefDefaultFlag = false;\r\n                parameterResults.map((param, index) => {\r\n                    selectedResultGrade[index] = { ngradecode: param.ngradecode };\r\n                    paremterResultcode[index] = param.ntransactionresultcode;\r\n                    let jsondata = JSON.parse(param.jsondata['value'])\r\n                    if (jsondata.hasOwnProperty('additionalInfo')) {\r\n                        additionalInfo[param.ntransactionresultcode] = jsondata['additionalInfo']\r\n                    }\r\n                    predefDefaultFlag = false;\r\n                    (response.data.PredefinedValues && response.data.PredefinedValues[parameterResults[index].ntransactionresultcode]) &&\r\n                        response.data.PredefinedValues[parameterResults[index].ntransactionresultcode].map(predefinedvalue => {\r\n                            // if (predefinedvalue.ndefaultstatus === transactionStatus.YES) {\r\n                            //     if (!predefDefaultFlag) {\r\n                            //         predefDefaultFlag = true;\r\n                            //         response.data.PredefinedValues[parameterResults[index].ntransactionresultcode] = constructOptionList(response.data.PredefinedValues[parameterResults[index].ntransactionresultcode] || [], 'sresultpredefinedname', 'sresultpredefinedname', undefined,\r\n                            //             undefined, undefined).get(\"OptionList\");\r\n                            //     }\r\n                            // response.data.PredefinedValues[parameterResults[index].ntransactionresultcode] =\r\n                            //     constructOptionList(response.data.PredefinedValues[parameterResults[index].ntransactionresultcode] || [], 'spredefinedname', 'spredefinedname', undefined,\r\n                            //         undefined, undefined).get(\"OptionList\");\r\n                            //     if (response.data.ResultParameter[index].sresult === null) {\r\n                            //         response.data.ResultParameter[index].sresult = predefinedvalue.spredefinedname;\r\n                            //         response.data.ResultParameter[index].sresultpredefinedname = predefinedvalue.sresultpredefinedname;\r\n                            //         response.data.ResultParameter[index].sfinal = predefinedvalue.spredefinedsynonym;\r\n                            //         response.data.ResultParameter[index].editable = true;\r\n                            //         response.data.ResultParameter[index].ngradecode = predefinedvalue.ngradecode;\r\n                            //         if(predefinedvalue.spredefinedcomments&&predefinedvalue.spredefinedcomments!==null){\r\n                            //             response.data.ResultParameter[index].sresultcomment = predefinedvalue.spredefinedcomments\r\n                            //             &&predefinedvalue.spredefinedcomments;\r\n                            //         }\r\n                            //     }\r\n                            // }\r\n                            //  else {\r\n                            if (!predefDefaultFlag) {\r\n                                predefDefaultFlag = true;\r\n                                response.data.PredefinedValues[parameterResults[index].ntransactionresultcode] = constructOptionList(response.data.PredefinedValues[parameterResults[index].ntransactionresultcode] || [], 'sresultpredefinedname', 'sresultpredefinedname', undefined,\r\n                                    undefined, undefined).get(\"OptionList\");\r\n                            }\r\n\r\n                            //   }\r\n                            //return null;\r\n\r\n                        });\r\n                        if( parameterResults[index][\"nparametertypecode\"] ==1) {\r\n                            parameterResults[index][\"nresultaccuracycode\"] ={\r\n                                \"value\": parameterResults[index][\"nresultaccuracycode\"],\r\n                                \"label\": parameterResults[index][\"sresultaccuracyname\"],\r\n                            };\r\n\r\n                            parameterResults[index][\"nunitcode\"] ={\r\n                                \"value\": parameterResults[index][\"nunitcode\"],\r\n                                \"label\": parameterResults[index][\"sunitname\"],\r\n                            };\r\n                        }\r\n                    param['editable'] = false;\r\n                    //return null;\r\n                    // response.data.PredefinedValues[parameterResults[index].ntransactionresultcode] =  constructOptionList(response.data.PredefinedValues[parameterResults[index].ntransactionresultcode] || [], 'spredefinedname', 'spredefinedname', undefined,\r\n                    // undefined, undefined).get(\"OptionList\");\r\n                    parameterResults[index]={...parameterResults[index],...jsondata}\r\n                });\r\n\r\n                const ResultAccuracyList = constructOptionList(response.data[\"ResultAccuracy\"] || [], \"nresultaccuracycode\",\"sresultaccuracyname\", undefined, undefined, false);   \r\n                const ResultAccuracy = ResultAccuracyList.get(\"OptionList\");\r\n\r\n                const UnitList = constructOptionList(response.data[\"Unit\"] || [], \"nunitcode\",\"sunitname\", undefined, undefined, false);   \r\n                const Unit = UnitList.get(\"OptionList\");\r\n                //ALPD-4387\r\n                let formFields=[];\r\n                if(response.data.FormFields && response.data.FormFields.length>0){\r\n                let formFieldJSON=JSON.parse(response.data.FormFields[0].jsondata['value'])\r\n                Object.entries(formFieldJSON).map(([key, value])=>(\r\n                    formFields.push(value)\r\n                ))\r\n            }\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...editParam.masterData,\r\n                            //...sortData(response.data,\"desc\",\"ntransactiontestcode\"),\r\n                            ...response.data,\r\n                            paremterResultcode,//,\r\n                            selectedResultGrade,\r\n                            ResultAccuracy,\r\n                            Unit,formFields\r\n\r\n                        },\r\n                        selectedRecord: {\r\n                            additionalInfo: additionalInfo.length > 0 ? additionalInfo : [],\r\n                            selectedResultGrade: selectedResultGrade,\r\n                            ReleaseParameter: response.data.ReleaseParameter\r\n\r\n                        },\r\n                        parameterResults: response.data.ReleaseParameter,\r\n                        isParameterInitialRender: true,\r\n                        loading: false,\r\n                        // screenName: \"IDS_RESULTENTRY\",\r\n                        openModal: true,\r\n                        modalShow: true,\r\n                        operation: \"update\",\r\n                        modalTitle: intl.formatMessage({ id: \"IDS_CHANGERESULT\" }),\r\n                        selectedId: editParam.primaryKeyValue,\r\n                        //activeTestKey: \"IDS_RESULTS\",\r\n                        ncontrolcode: editParam.editResultId\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n        //}\r\n\r\n\r\n    }\r\n\r\n}\r\nexport function updateCorrectionStatus(inputData, Data, screenname) {\r\n\r\n\r\n    return function (dispatch) {\r\n\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"release/updateCorrectionStatus\",\r\n\r\n            inputData\r\n        )\r\n            .then(response => {\r\n\r\n                if (response.data.rtn === \"Success\") {\r\n                    // ALPD-4229 (30-05-2024) Added code when search and do action\r\n                    let searchedData = Data.searchedData;\r\n                    if(Data.searchedData && Data.searchedData !== undefined && Data.searchedData.length > 0){\r\n                        searchedData = response.data && response.data.ReleaseHistory && \r\n                            getSameRecordFromTwoArrays(response.data.ReleaseHistory, Data.searchedData, \"ncoaparentcode\");\r\n                    }\r\n                    sortData(searchedData, '', 'ncoaparentcode');   // ALPD-4229 (12-06-2024) Added sortData for searchedData\r\n                    let masterData = {\r\n                        ...Data, ...response.data, searchedData\r\n                    };\r\n                    sortData(masterData.ReleaseHistory, \"\", 'ncoaparentcode');\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN, payload: {\r\n                            masterData,\r\n                            change: inputData.change,\r\n                            openModal: false,\r\n                            loading: false,\r\n                            loadEsign: false,\r\n                            screenName: screenname\r\n\r\n                        }\r\n                    });\r\n                }\r\n                else {\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN, payload: {\r\n                            // masterData,\r\n                            //  change: inputData.change,\r\n                            openModal: false,\r\n                            loading: false,\r\n                            loadEsign: false,\r\n\r\n                            //  screenName:screenname\r\n\r\n                        }\r\n                    });\r\n                    toast.warn(intl.formatMessage({ id: response.data }));\r\n\r\n                }\r\n\r\n                // }\r\n            })\r\n\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                    //  console.log(\"ErrorRelease,\", error);\r\n\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n\r\n\r\n\r\n    }\r\n}\r\nexport function validateEsignforRelease(inputParam) {\r\n    return (dispatch) => {\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"login/validateEsignCredential\", inputParam.inputData)\r\n            .then(response => {\r\n                if (response.data === \"Success\") {\r\n\r\n                    const methodUrl = \"release\";\r\n                    inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][\"userinfo\"] = inputParam.inputData.userinfo;\r\n\r\n                    if (inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()] &&\r\n                        inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignpassword\"]) {\r\n                        delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignpassword\"]\r\n                        delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esigncomments\"]\r\n                        delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignreason\"]\r\n                        delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"agree\"]\r\n                    }\r\n                    //dispatch(inputParam[\"screenData\"][\"inputParam\"].performAction(inputParam[\"screenData\"][\"inputParam\"], inputParam[\"screenData\"][\"masterData\"]))\r\n                    dispatch(dispatchMethods(inputParam[\"screenData\"]))\r\n                }\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.info(error.response.data);\r\n                }\r\n            })\r\n    };\r\n}\r\nfunction dispatchMethods(screenData) {\r\n    return (dispatch) => {\r\n        let doAction = screenData.inputParam.inputData.doAction\r\n        switch (doAction) {\r\n            case \"appendsample\":\r\n                dispatch(UpdateApprovedSample(screenData.inputParam.inputData, screenData.masterData));\r\n                break;\r\n            case \"removesample\":\r\n                dispatch(getDeleteApprovedSample(screenData.inputParam.inputData, screenData.masterData, 'openModal'));\r\n                break;\r\n            case \"generate\":\r\n                dispatch(generateReleasedReport(screenData.inputParam.inputData, screenData.masterData));\r\n                break;\r\n            case \"download\":\r\n                dispatch(previewAndFinalReport(screenData.inputParam, screenData.masterData));\r\n                break;\r\n            case \"correction\":\r\n                dispatch(updateCorrectionStatus(screenData.inputParam.inputData, screenData.masterData, screenData.inputParam.inputData.screenName));\r\n                break;\r\n            case \"saveasdraft\":\r\n                dispatch(getApprovedRecordsAsDraft(screenData.inputParam.inputData, screenData.masterData, screenData.seletedRecord));\r\n                break;\r\n            case \"editresult\":\r\n                dispatch(crudMaster(screenData.inputParam, screenData.masterData, \"modalShow\"))\r\n                break;\r\n            case \"preliminary\":\r\n                dispatch(preliminaryReport(screenData.inputParam, screenData.masterData))\r\n                break;\r\n            case \"editReleaseTestAttachment\":\r\n                dispatch(onSaveReleaseTestAttachment(screenData.inputParam))\r\n                break;\r\n            case \"deleteReleaseTestAttachment\":\r\n                dispatch(onDeleteReleaseTestAttachment(screenData.inputParam))\r\n                break;\r\n            case \"editReleaseTestComment\":\r\n                dispatch(onSaveReleaseTestComment(screenData.inputParam))\r\n                break;\r\n            case \"deleteReleaseTestComment\":\r\n                dispatch(onDeleteReleaseTestComment(screenData.inputParam))\r\n                break;\r\n            case \"editReportTemplate\":\r\n                dispatch(SaveReportTemplate(screenData.inputParam))\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n}\r\n\r\nexport function viewReportHistory(inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"release/viewReportHistory\", inputParam.inputData)\r\n            .then(response => {\r\n                let masterData = inputParam.masterData;\r\n                let PatientReports = response.data.PatientReports;\r\n                masterData = { ...masterData, PatientReports };\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        isPatientReports: true,\r\n                        openModal: true,\r\n                        hideSave: true,\r\n                        isAddPopup: false,\r\n                        isEditPopup: false,\r\n                        isDeletePopup: false,\r\n                        masterData,\r\n                        loading: false\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.info(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function viewReleaseTestAttachment(inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        let methodUrl = \"\";\r\n        if(inputParam.inputData.actionName === \"IDS_RELEASETESTATTACHMENT\"){\r\n            methodUrl=\"getReleaseTestAttachment\";\r\n        } else {\r\n            methodUrl=\"getReleaseTestComment\";\r\n        }\r\n        rsapi.post(\"release/\"+methodUrl, inputParam.inputData)\r\n            .then(response => {\r\n                let masterData = inputParam.masterData;\r\n                const ReleaseTestAttachmentDetails = response.data.ReleaseTestAttachmentDetails;\r\n                const ReleaseTestCommentDetails = response.data.ReleaseTestCommentDetails;\r\n                const isReleaseTestAttachment = inputParam.inputData.actionName === \"IDS_RELEASETESTATTACHMENT\";\r\n                const isReleaseTestComment = inputParam.inputData.actionName === \"IDS_RELEASETESTCOMMENT\";\r\n\r\n                const lstRegistrationArno = constructOptionList(response.data.RegistrationArno || [], \"npreregno\", \"sarno\", false, false, true);\r\n                const RegistrationArno = lstRegistrationArno.get(\"OptionList\");\r\n\r\n                const lstRegistrationSampleArno = constructOptionList(response.data.RegistrationSampleArno || [], \"ntransactionsamplecode\", \"ssamplearno\", false, false, true);\r\n                const RegistrationSampleArno = lstRegistrationSampleArno.get(\"OptionList\");\r\n\r\n                const lstRegistrationTest = constructOptionList(response.data.RegistrationTest || [], \"ntransactiontestcode\", \"stestsynonym\", false, false, true);\r\n                const RegistrationTest = lstRegistrationTest.get(\"OptionList\");\r\n\r\n                const lstCommentSubType = constructOptionList(response.data.CommentSubType || [], \"ncommentsubtypecode\", \"scommentsubtype\", false, false, true);\r\n                const CommentSubType = lstCommentSubType.get(\"OptionList\");\r\n\r\n                masterData = { ...masterData, ReleaseTestAttachmentDetails, ReleaseTestCommentDetails, RegistrationArno, RegistrationSampleArno, RegistrationTest, CommentSubType };\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        isReleaseTestAttachment,\r\n                        isReleaseTestComment,\r\n                        openModal: true,\r\n                        isAddPopup: false,\r\n                        isEditPopup: false,\r\n                        isDeletePopup: false,\r\n                        masterData,\r\n                        loading: false,\r\n                        isAddReleaseTestAttachment:false,\r\n                        isInitialRender : false\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.info(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\n// export function writeJSONTemplate(inputParam){ \r\n//     return function (dispatch) {    \r\n\r\n//         return rsapi.post(\"release/writeJSONTemplate\",\r\n\r\n//         { [inputParam.primaryKeyName] :inputParam.selectedReleaseHistory.ncoaparentcode , \r\n//             \"userinfo\": inputParam.userInfo}\r\n//     )\r\n//         .then(response => {\r\n\r\n//                 dispatch({\r\n//                     type: DEFAULT_RETURN, payload: {\r\n//                         loading: false,\r\n//                         openModal: false,\r\n//                         expandCheck: false,\r\n\r\n\r\n//                     }\r\n//                 });\r\n//         })\r\n//         .catch(error => {\r\n//             dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n//             if (error.response.status === 500) {\r\n//                 toast.error(error.message);\r\n\r\n\r\n//             }\r\n//             else {\r\n//                 toast.warn(error.response.data);\r\n//             }\r\n//         })\r\n\r\n// }\r\n// }\r\n\r\nexport function releaseReportHistory(inputParam) {\r\n    return (dispatch) => {\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"release/getPreliminaryReportHistory\", inputParam)\r\n            .then(response => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData: {\r\n                            ...inputParam.masterData,\r\n                            ...response.data\r\n                        },\r\n                        //hange: inputData.change,\r\n                        openModal: true,\r\n                        loading: false,\r\n                        loadEsign: false,\r\n                        screenName: inputParam.screenName\r\n                    }\r\n                });\r\n            }\r\n            )\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    };\r\n}\r\nexport function versionHistory(inputParam) {\r\n    return (dispatch) => {\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"release/getVersionHistory\", inputParam)\r\n            .then(response => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData: {\r\n                            ...inputParam.masterData,\r\n                            ...response.data\r\n                        },\r\n                        //hange: inputData.change,\r\n                        openModal: true,\r\n                        loading: false,\r\n                        loadEsign: false,\r\n                        openModalTitle: \"IDS_VERSIONHISTORY\"\r\n                    }\r\n                });\r\n            }\r\n            )\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    };\r\n}\r\n\r\n\r\nexport function downloadVersionReport(inputParam, Data, screenName) {\r\n    return function (dispatch) {\r\n\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"release/downloadVersionHistory\", inputParam.inputData)\r\n            .then(response => {\r\n                let masterData = {\r\n                    ...Data,\r\n                    ...response.data,\r\n                }\r\n                if (response.data.rtn === \"Success\") {\r\n                    document.getElementById(\"download_data\").setAttribute(\"href\", response.data.FilePath);\r\n                    document.getElementById(\"download_data\").click();\r\n                } else {\r\n                    toast.warn(response.data.rtn);\r\n                }\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload:\r\n                    {\r\n                        loading: false, change: inputParam.change, masterData, screenName: screenName,\r\n                        modalShow: false, selectedRecord: {}, loadEsign: false, openModal: inputParam.inputData.openModal\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function downloadHistory(inputParam, Data, screenName) {\r\n    return function (dispatch) {\r\n\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"release/downloadHistory\", inputParam.inputData)\r\n            .then(response => {\r\n                let masterData = {\r\n                    ...Data,\r\n                    ...response.data,\r\n                }\r\n                if (response.data.rtn === \"Success\") {\r\n                    document.getElementById(\"download_data\").setAttribute(\"href\", response.data.FilePath);\r\n                    document.getElementById(\"download_data\").click();\r\n                } else {\r\n                    toast.warn(response.data.rtn);\r\n                }\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload:\r\n                    {\r\n                        loading: false, change: inputParam.change, masterData, screenName: screenName,\r\n                        modalShow: false, selectedRecord: {}, loadEsign: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data['rtn']);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getPatientFilterExecuteData(inputParam) {\r\n    return function (dispatch) {\r\n\r\n        let obj = { ...inputParam.component, filterquery: inputParam.filterquery, userinfo: inputParam.userinfo }\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/dynamicpreregdesign/getdynamicfilterexecutedata\", obj)\r\n            .then(response => {\r\n                const source = inputParam.component.source\r\n                const languageTypeCode = inputParam.userinfo.slanguagetypecode\r\n                const lstData = response.data[inputParam.component.label]\r\n                const multilingual = []\r\n                inputParam.component.filterfields.map(item => {\r\n                    if (item.ismultilingual) {\r\n                        multilingual.push(item.columnname)\r\n                    }\r\n                })\r\n                const optionList = lstData.map(item => {\r\n                    const jsondata = item[source] ? item[source].value ?\r\n                        JSON.parse(item[source].value) : item.jsondata : item.jsondata\r\n\r\n                    multilingual.map(mul => {\r\n                        jsondata[mul] =\r\n                            jsondata[mul][languageTypeCode] || jsondata[mul]['en-US'];\r\n                    })\r\n                    // let label = isMultiLingual ?\r\n                    //   jsondata[optionValue]\r\n                    //   [languageTypeCode] || jsondata[optionValue]['en-US']\r\n                    //   : jsondata[optionValue];\r\n\r\n                    return jsondata\r\n                });\r\n                if (inputParam.userinfo.nformcode === 161) {\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN, payload: {\r\n                            lstPatient: optionList,\r\n                            onExecute: false,\r\n                            loading: false,\r\n                            screenName:\"IDS_PATIENTSEARCH\"\r\n                        }\r\n                    })\r\n                }\r\n                else {\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN, payload: {\r\n                            lstPatient: optionList,\r\n                            // onExecute: false,\r\n                            loading: false,\r\n                            screenName:\"IDS_PATIENTSEARCH\"\r\n                        }\r\n                    })\r\n                }\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.info(error.response.data.rtn);\r\n                }\r\n\r\n            })\r\n    }\r\n}\r\n\r\nexport function getPatientWiseSample(inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"release/getPatientWiseSample\", inputParam)\r\n            .then(response => {\r\n                let openModal = true;\r\n                let screenName=\"IDS_ADDSAMPLE\";\r\n                let responseData = { ...response.data }\r\n            \r\n                let masterData = {} \r\n                let lstPatient=[]\r\n   masterData = {\r\n                        ...inputParam.masterData,\r\n                        ...responseData,\r\n                }\r\n               \r\n                    if (responseData && responseData.ReleaseSample.length !== 0) {\r\n                        \r\n                        let responseData = {  ...response.data }\r\n                        masterData = {\r\n                            ...inputParam.masterData, ...responseData\r\n                        }\r\n                    }\r\n                    else {\r\n                        let responseData = {  ...response.data }\r\n                        masterData = {\r\n                            ...inputParam.masterData, ...responseData\r\n                        }\r\n                        lstPatient=inputParam.Login.lstPatient\r\n                         //openModal = false;\r\n                          screenName=\"IDS_PATIENTSEARCH\";\r\n                        toast.warn(intl.formatMessage({ id: \"IDS_NOSAMPLESAREAVAILABLE\" }));\r\n                        }\r\n\r\n                \r\n\r\n            \r\n            sortData(masterData);\r\n            dispatch({\r\n                type: DEFAULT_RETURN, payload: {\r\n                    \r\n                  \r\n                    // awesomeTree:fieldList[0].awesomeTree,\r\n                     awesomeConfig:undefined,\r\n                     lstPatient:lstPatient,\r\n                    //lstPatient:[],\r\n                    kendoSkip: 0,\r\n                    kendoTake: 5,\r\n                    masterData,\r\n                    expandCheck: false,\r\n                    \r\n                    \r\n                    isDeletePopup: false,\r\n                    isComboCheck: false,\r\n                    isEditPopup: false,\r\n                    screenName:screenName,//\"IDS_ADDSAMPLE\",\r\n                    \r\n                    loading: false,\r\n                    showFilter: false,\r\n                    openModal: openModal,\r\n                    isAddPopup: true,\r\n                    operation:\"save\"\r\n                }\r\n            })\r\n        })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function onSaveReleaseTestAttachment(inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n       rsapi.post(inputParam.inputData.classUrl +\"/\" + inputParam.inputData.operation + inputParam.inputData.methodUrl, inputParam.inputData.formData)\r\n            .then(response => {\r\n                let ReleaseTestAttachmentDetails = response.data.ReleaseTestAttachmentDetails;\r\n                let masterData = {...inputParam.inputData.masterData, ReleaseTestAttachmentDetails};\r\n                    let selectedRecord = {};\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN, payload: {\r\n                            selectedRecord,\r\n                            isAddReleaseTestAttachment: false,\r\n                            isReleaseTestAttachment: true,\r\n                            loading: false,\r\n                            screenName: inputParam.inputData.screenName,\r\n                            masterData,\r\n                            isInitialRender: false,\r\n                            loadEsign: false,\r\n                            loadEsignStateHandle: false\r\n                        }\r\n                    })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response && error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else if(error.response === undefined){\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function onDeleteReleaseTestAttachment(inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(inputParam.inputData.url, {\r\n            \"releasetestattachment\" : inputParam.inputData.releasetestattachment, \"userinfo\": inputParam.inputData.userinfo\r\n        })\r\n        .then(response => {\r\n            let ReleaseTestAttachmentDetails = response.data.ReleaseTestAttachmentDetails;\r\n            let selectedRecord = {\r\n                ...inputParam.inputData.selectedRecord, ...response.data\r\n            };\r\n            let masterData = inputParam.inputData.masterData;\r\n            masterData[\"ReleaseTestAttachmentDetails\"] = ReleaseTestAttachmentDetails;\r\n            dispatch({\r\n                type: DEFAULT_RETURN, payload: {\r\n                    selectedRecord,\r\n                    isReleaseTestAttachment: true,\r\n                    loading: false,\r\n                    screenName: inputParam.inputData.screenName,\r\n                    masterData,\r\n                    loadEsignStateHandle: false\r\n                }\r\n            })\r\n        })\r\n        .catch(error => {\r\n            dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n            if (error.response && error.response.status === 500) {\r\n                toast.error(error.message);\r\n            }\r\n            else if(error.response === undefined){\r\n                toast.error(error.message);\r\n            } \r\n            else {\r\n                toast.warn(error.response.data);\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\nexport function onSaveReleaseTestComment(inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(inputParam.inputData.classUrl +\"/\" + inputParam.inputData.operation + inputParam.inputData.methodUrl, inputParam.inputData.formData)\r\n        .then(response => {\r\n            let ReleaseTestCommentDetails = response.data.ReleaseTestCommentDetails;\r\n            let masterData = {...inputParam.inputData.masterData, ReleaseTestCommentDetails};\r\n            let selectedRecord = {};\r\n            dispatch({\r\n                type: DEFAULT_RETURN, payload: {\r\n                    selectedRecord,\r\n                    isAddReleaseTestComment: false,\r\n                    isReleaseTestComment: true,\r\n                    loading: false,\r\n                    screenName: inputParam.inputData.screenName,\r\n                    masterData,\r\n                    isInitialRender: false,\r\n                    loadEsignStateHandle: false\r\n                }\r\n            })\r\n        })\r\n        .catch(error => {\r\n            dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n            if (error.response && error.response.status === 500) {\r\n                toast.error(error.message);\r\n            } else if (error.response === undefined){\r\n                toast.error(error.message);\r\n            }\r\n            else {\r\n                toast.warn(error.response.data);\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\nexport function onDeleteReleaseTestComment(inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(inputParam.inputData.url, {\r\n            \"releasetestcomment\" : inputParam.inputData.releasetestcomment, \"userinfo\": inputParam.inputData.userinfo\r\n        })\r\n        .then(response => {\r\n            let ReleaseTestCommentDetails = response.data.ReleaseTestCommentDetails;\r\n            let selectedRecord = {\r\n                ...inputParam.inputData.selectedRecord, ...response.data\r\n            };\r\n            let masterData = inputParam.inputData.masterData;\r\n            masterData[\"ReleaseTestCommentDetails\"] = ReleaseTestCommentDetails;\r\n            dispatch({\r\n                type: DEFAULT_RETURN, payload: {\r\n                    selectedRecord,\r\n                    isReleaseTestComment: true,\r\n                    loading: false,\r\n                    screenName: inputParam.inputData.screenName,\r\n                    masterData,\r\n                    loadEsignStateHandle: false\r\n                }\r\n            })\r\n        })\r\n        .catch(error => {\r\n            dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n            if (error.response && error.response.status === 500) {\r\n                toast.error(error.message);\r\n            }\r\n            else if (error.response === undefined){\r\n                toast.error(error.message);\r\n            }\r\n            else {\r\n                toast.warn(error.response.data);\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\nexport function generatereport(inputParam, Data, screenName) {\r\n    return function (dispatch) {\r\n\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"release/generateReport\", inputParam.inputData)\r\n            .then(response => {\r\n                // let masterData = {\r\n                //     ...Data,\r\n                //     ...response.data,\r\n                // }\r\n                // if (response.data.rtn === \"Success\") {\r\n                //     document.getElementById(\"download_data\").setAttribute(\"href\", response.data.FilePath);\r\n                //     document.getElementById(\"download_data\").click();\r\n                // } else {\r\n                //     toast.warn(response.data.rtn);\r\n                // }\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload:\r\n                    {\r\n                        loading: false, change: inputParam.change, screenName: screenName,\r\n                        modalShow: false, selectedRecord: {}, loadEsign: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data['rtn']);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function editReportTemplate(inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"release/getApprovedReportTemplateById\", inputParam.inputData)\r\n        .then(response => {\r\n            let responseData = response.data;\r\n            let selectedRecord = inputParam.selectedRecord;\r\n            selectedRecord[\"nreporttemplatecode\"] = responseData.nreporttemplatecode;\r\n            const reportTemplateMap = constructOptionList(responseData.reportTemplateList || [], \"nreporttemplatecode\", \"sreporttemplatename\", \"nreporttemplatecode\", \r\n                    \"ascending\", false);\r\n            const reportTemplateList = reportTemplateMap.get(\"OptionList\");\r\n            let masterData = inputParam.masterData;\r\n            masterData[\"reportTemplateList\"] = reportTemplateList;\r\n            masterData[\"selectedReleaseHistory\"] = masterData.selectedReleaseHistory && masterData.selectedReleaseHistory.length > 0 && \r\n                masterData.selectedReleaseHistory.filter(item => item.ncoaparentcode === inputParam.ncoaparentcode)\r\n            dispatch({\r\n                type: DEFAULT_RETURN, payload: {\r\n                    loading: false,\r\n                    masterData,\r\n                    screenName: intl.formatMessage({ id: \"IDS_REPORTTEMPLATE\" }),\r\n                    modalTitle: intl.formatMessage({ id: \"IDS_EDITREPORTTEMPLATE\" }),\r\n                    modalShow: true,\r\n                    loadEsign: false,\r\n                    selectedRecord\r\n            }\r\n            })\r\n        })\r\n        .catch(error => {\r\n            dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n            if (error.response.status === 500) {\r\n                toast.error(error.message);\r\n            }\r\n            else {\r\n                toast.warn(error.response.data);\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\nexport function SaveReportTemplate(inputParam){\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"release/updateReportTemplate\", inputParam.inputData)\r\n        .then(response => {\r\n            let masterData = inputParam.masterData;\r\n            // ALPD-4229 (30-05-2024) Added code when search and do action\r\n            if(masterData.searchedData && masterData.searchedData !== undefined && masterData.searchedData.length > 0){\r\n                masterData.searchedData.map(item => {\r\n                    if(item.ncoaparentcode === inputParam.inputData.ncoaparentcode){\r\n                        item[\"nreporttemplatecode\"] = inputParam.inputData.nreporttemplatecode;\r\n                        item[\"sreporttemplatename\"] = inputParam.inputData.sreporttemplatename;\r\n                    }\r\n                });\r\n            }\r\n            masterData.selectedReleaseHistory[0][\"nreporttemplatecode\"] = inputParam.inputData.nreporttemplatecode;\r\n            masterData.selectedReleaseHistory[0][\"sreporttemplatename\"] = inputParam.inputData.sreporttemplatename;\r\n            masterData.ReleaseHistory.map(item => {\r\n                if(item.ncoaparentcode === inputParam.inputData.ncoaparentcode){\r\n                    item[\"nreporttemplatecode\"] = inputParam.inputData.nreporttemplatecode;\r\n                    item[\"sreporttemplatename\"] = inputParam.inputData.sreporttemplatename;\r\n                }\r\n            });\r\n            delete(inputParam.selectedRecord.nreporttemplatecode);\r\n            dispatch({\r\n                type: DEFAULT_RETURN, payload: {\r\n                    loading: false,\r\n                    masterData,\r\n                    modalShow: false,\r\n                    loadEsign: false,\r\n                    openModal: false\r\n            }\r\n            })\r\n        })\r\n        .catch(error => {\r\n            dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n            if (error.response.status === 500) {\r\n                toast.error(error.message);\r\n            }\r\n            else {\r\n                toast.warn(error.response.data);\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\nexport function deleteSamples(inputParam, data){\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"release/deleteSamples\", inputParam.inputData)\r\n        .then(response => {\r\n            // ALPD-4229 (30-05-2024) Added searchedData as undefined\r\n            inputParam.searchRef.current.value = \"\";\r\n            let masterData = {\r\n                ...data, ...response.data, searchedData: undefined\r\n            };\r\n            sortData(masterData.ReleaseHistory, \"\", 'ncoaparentcode');\r\n            dispatch({\r\n                type: DEFAULT_RETURN, payload: {\r\n                    masterData,\r\n                    loading: false\r\n                }\r\n            });\r\n        })\r\n        .catch(error => {\r\n            dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n            if (error.response.status === 500) {\r\n                toast.error(error.message);\r\n            }\r\n            else {\r\n                toast.warn(error.response.data);\r\n            }\r\n        })\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}