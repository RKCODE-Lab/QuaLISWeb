{"ast":null,"code":"var _jsxFileName = \"E:\\\\WorkingFolder\\\\React_Postgres\\\\ALPD\\\\branches\\\\SOURCE-513-PROD\\\\SOURCE-513-ALPD-5304\\\\QuaLISWeb\\\\src\\\\pages\\\\subcontractsamples\\\\SubContractTestDetail.jsx\";\nimport React, { Component } from 'react';\nimport { Col, Row } from 'react-bootstrap';\nimport { injectIntl } from 'react-intl';\nimport 'react-perfect-scrollbar/dist/css/styles.css';\nimport { connect } from 'react-redux';\nimport { toast } from 'react-toastify';\nimport { callService, crudMaster, getSubContractorComboService, updateStore, updateSubContractSamplesdetails, updateReceiveSTTSubContractTest, updateReceiveResultSubContractTest } from '../../actions';\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\nimport { getControlMap, showEsign } from '../../components/CommonScript';\nimport { transactionStatus } from '../../components/Enumeration';\nimport ConfirmMessage from '../../components/confirm-alert/confirm-message.component';\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\nimport Esign from '../audittrail/Esign'; // import './product.css';\n\nimport { process } from '@progress/kendo-data-query';\nimport DataGrid from '../../components/data-grid/data-grid.component';\nimport { ListWrapper } from '../userroletemplate/userroletemplate.styles';\nimport SendSubContractor from './SendSubContractor';\n\nclass SubContractTestDetail extends Component {\n  constructor(props) {\n    super(props);\n\n    this.closeModal = () => {\n      let loadEsign = this.props.Login.loadEsign;\n      let openModal = this.props.Login.openModal;\n      let openChildModal = this.props.Login.openChildModal;\n      let selectedRecord = this.props.Login.selectedRecord;\n      let selectedId = this.props.Login.selectedId;\n\n      if (this.props.Login.loadEsign) {\n        if (this.props.Login.operation === \"sendsubcontractor\") {\n          loadEsign = false;\n          openModal = false;\n          openChildModal = false;\n          selectedRecord = {};\n        } else {\n          loadEsign = false;\n          selectedRecord['esignpassword'] = \"\";\n          selectedRecord['esigncomments'] = \"\";\n          selectedRecord['esignreason'] = \"\";\n        }\n      } else {\n        openModal = false;\n        openChildModal = false;\n        selectedRecord = {};\n        selectedId = null;\n      }\n\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          openModal,\n          openChildModal,\n          loadEsign,\n          selectedRecord,\n          selectedId\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.dataStateChange = event => {\n      this.setState({\n        dataResult: process(this.state.data, event.dataState),\n        dataState: event.dataState\n      });\n    };\n\n    this.onInputOnChange = (event, optional) => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (event.target.type === 'checkbox') {\n        selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\n      } else if (event.target.type === \"radio\") {\n        selectedRecord[event.target.name] = optional;\n      } else {\n        selectedRecord[event.target.name] = event.target.value;\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onComboChange = (comboData, fieldName) => {\n      const selectedRecord = this.state.selectedRecord || {};\n      selectedRecord[fieldName] = comboData;\n      ;\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.reloadData = () => {\n      const inputParam = {\n        inputData: {\n          \"userinfo\": this.props.Login.userInfo\n        },\n        classUrl: this.props.Login.inputParam.classUrl,\n        methodUrl: this.props.Login.inputParam.methodUrl,\n        displayName: this.props.Login.displayName,\n        userInfo: this.props.Login.userInfo\n      };\n      this.props.callService(inputParam);\n    };\n\n    this.onSaveClick = (saveType, formRef) => {\n      let inputData = [];\n      let dataState = undefined;\n      let selectedId = null;\n      dataState = this.state.dataState;\n      selectedId = this.props.Login.selectedRecord['subcontractortestdetail'].nsubcontractortestdetailcode;\n      inputData[\"userinfo\"] = this.props.Login.userInfo;\n      inputData[\"subcontractortestdetail\"] = this.state.selectedRecord['subcontractortestdetail'];\n      inputData[\"subcontractortestdetail\"]['nsuppliercode'] = this.state.selectedRecord['nsuppliercode'].value;\n      inputData[\"subcontractortestdetail\"]['ncontrolleadtime'] = this.state.selectedRecord['nsuppliercode'].item.ncontrolleadtime;\n      inputData[\"subcontractortestdetail\"]['nperiodcode'] = this.state.selectedRecord['nsuppliercode'].item.nperiodcode;\n      inputData[\"subcontractortestdetail\"]['sremarks'] = this.state.selectedRecord['sremarks']; // if (inputData[\"subcontractordetails\"].hasOwnProperty('esignpassword')) {\n      //     if (inputData[\"subcontractordetails\"]['esignpassword'] === '') {\n      //         delete inputData[\"subcontractordetails\"]['esigncomments']\n      //         delete inputData[\"subcontractordetails\"]['esignpassword']\n      //     }\n      // }\n\n      const inputParam = {\n        classUrl: this.props.Login.inputParam.classUrl,\n        methodUrl: \"updateSubContractSamplesdetails\",\n        displayName: this.props.Login.inputParam.displayName,\n        inputData: inputData,\n        selectedId,\n        dataState,\n        operation: this.props.Login.operation,\n        saveType,\n        formRef,\n        searchRef: this.searchRef,\n        selectedRecord: { ...this.state.selectedRecord\n        }\n      };\n      const esignNeeded = showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode);\n\n      if (esignNeeded) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData: this.props.Login.masterData\n            },\n            openModal: true,\n            screenName: \"IDS_SENDSUBCONTRACTOR\",\n            operation: this.props.Login.operation\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.updateSubContractSamplesdetails(inputParam, this.props.Login.masterData, \"openModal\", \"\", \"\");\n      }\n    };\n\n    this.validateEsign = () => {\n      let modalName = this.props.Login.screenName === this.props.Login.genericLabel[\"Product\"][\"jsondata\"][\"sdisplayname\"][this.props.Login.userInfo.slanguagetypecode].concat(\" \" + this.props.intl.formatMessage({\n        id: \"IDS_FILE\"\n      })) ? \"openChildModal\" : \"openModal\";\n      const inputParam = {\n        inputData: {\n          \"userinfo\": { ...this.props.Login.userInfo,\n            sreason: this.state.selectedRecord[\"esigncomments\"],\n            nreasoncode: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].value,\n            spredefinedreason: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].label\n          },\n          password: this.state.selectedRecord[\"esignpassword\"]\n        },\n        screenData: this.props.Login.screenData\n      };\n      this.props.validateEsignCredential(inputParam, modalName);\n    };\n\n    this.formRef = React.createRef();\n    const _dataState = {\n      skip: 0,\n      take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n    };\n    this.state = {\n      data: [],\n      masterStatus: \"\",\n      error: \"\",\n      selectedRecord: {},\n      dataResult: [],\n      dataState: _dataState,\n      userRoleControlRights: [],\n      controlMap: new Map()\n    };\n    this.searchRef = React.createRef();\n    this.confirmMessage = new ConfirmMessage();\n    this.extractedColumnList = [{\n      \"idsName\": \"IDS_TEST\",\n      \"dataField\": \"stestsynonym\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_SUBCONTRACTOR\",\n      \"dataField\": \"ssuppliername\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_EXPECTEDDATE\",\n      \"dataField\": \"sexpecteddate\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_CONTROLLEADTIME\",\n      \"dataField\": \"scontrolleaddate\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_ARNO\",\n      \"dataField\": \"sarno\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_SAMPLEARNO\",\n      \"dataField\": \"ssamplearno\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_DISPLAYSTATUS\",\n      \"dataField\": \"stransdisplaystatus\",\n      \"width\": \"200px\"\n    }];\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\n      toast.warn(props.Login.masterStatus);\n      props.Login.masterStatus = \"\";\n    }\n\n    if (props.Login.error !== state.error) {\n      toast.error(props.Login.error);\n      props.Login.error = \"\";\n    }\n\n    return null;\n  }\n\n  render() {\n    const addId = this.props.Login.inputParam && this.state.controlMap.has(\"Add\".concat(this.props.Login.inputParam.methodUrl)) && this.state.controlMap.get(\"Add\".concat(this.props.Login.inputParam.methodUrl)).ncontrolcode;\n    const editId = this.props.Login.inputParam && this.state.controlMap.has(\"Edit\".concat(this.props.Login.inputParam.methodUrl)) && this.state.controlMap.get(\"Edit\".concat(this.props.Login.inputParam.methodUrl)).ncontrolcode;\n    const deleteId = this.props.Login.inputParam && this.state.controlMap.has(\"Delete\".concat(this.props.Login.inputParam.methodUrl)) && this.state.controlMap.get(\"Delete\".concat(this.props.Login.inputParam.methodUrl)).ncontrolcode;\n    const addParam = {\n      screenName: this.props.Login.genericLabel ? this.props.Login.genericLabel[\"Product\"][\"jsondata\"][\"sdisplayname\"][this.props.Login.userInfo.slanguagetypecode] : \"IDS_PRODUCT\",\n      primaryeyField: \"nproductcode\",\n      primaryKeyValue: undefined,\n      operation: \"create\",\n      inputParam: this.props.Login.inputParam,\n      userInfo: this.props.Login.userInfo,\n      ncontrolCode: addId\n    };\n    const filterParam = {\n      inputListName: \"Product\",\n      selectedObject: \"SelectedProduct\",\n      primaryKeyField: \"nproductcode\",\n      fetchUrl: \"product/getProduct\",\n      fecthInputObject: {\n        userinfo: this.props.Login.userInfo\n      },\n      masterData: this.props.Login.masterData,\n      searchFieldList: this.searchFieldList\n    };\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(ListWrapper, {\n      className: \"client-list-content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 25\n      }\n    }, this.state.data ? /*#__PURE__*/React.createElement(DataGrid, {\n      primaryKeyField: \"nsubcontractortestdetailcode\",\n      data: this.state.data,\n      dataResult: this.state.dataResult,\n      dataState: this.state.dataState,\n      dataStateChange: this.dataStateChange,\n      extractedColumnList: this.extractedColumnList,\n      fetchRecord: this.props.getProductComboService,\n      editParam: [],\n      deleteRecord: this.deleteRecord,\n      deleteParam: [],\n      reloadData: this.reloadData,\n      controlMap: this.state.controlMap,\n      userRoleControlRights: this.state.userRoleControlRights,\n      inputParam: this.props.Login.inputParam,\n      userInfo: this.props.Login.userInfo,\n      pageable: true,\n      scrollable: 'scrollable',\n      gridHeight: '600px',\n      isActionRequired: true,\n      isToolBarRequired: true,\n      selectedId: this.props.Login.selectedId,\n      listMasterShowIcon: 0,\n      masterdata: this.props.Login.masterData || [],\n      sendRecord: this.props.getSubContractorComboService,\n      updateReceiveSTTSubContractTest: this.props.updateReceiveSTTSubContractTest,\n      updateReceiveResultSubContractTest: this.props.updateReceiveResultSubContractTest,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 33\n      }\n    }) : \"\"))), this.props.Login.openModal || this.props.Login.openChildModal ? /*#__PURE__*/React.createElement(SlideOutModal, {\n      show: this.props.Login.screenName === this.props.Login.genericLabel[\"Product\"][\"jsondata\"][\"sdisplayname\"][this.props.Login.userInfo.slanguagetypecode].concat(\" \" + this.props.intl.formatMessage({\n        id: \"IDS_FILE\"\n      })) ? this.props.Login.openChildModal : this.props.Login.openModal,\n      closeModal: this.closeModal,\n      operation: this.props.Login.operation,\n      inputParam: this.props.Login.inputParam,\n      showSaveContinue: true,\n      screenName: this.props.Login.screenName,\n      onSaveClick: this.onSaveClick,\n      esign: this.props.Login.loadEsign,\n      validateEsign: this.validateEsign,\n      masterStatus: this.props.Login.masterStatus,\n      updateStore: this.props.updateStore,\n      selectedRecord: this.state.selectedRecord || {},\n      addComponent: this.props.Login.loadEsign ? /*#__PURE__*/React.createElement(Esign, {\n        operation: this.props.Login.operation,\n        onInputOnChange: this.onInputOnChange,\n        inputParam: this.props.Login.inputParam,\n        selectedRecord: this.state.selectedRecord || {},\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 29\n        }\n      }) : this.props.Login.operation === \"sendsubcontractor\" ? /*#__PURE__*/React.createElement(SendSubContractor, {\n        selectedRecord: this.state.selectedRecord || {},\n        onInputOnChange: this.onInputOnChange,\n        onComboChange: this.onComboChange,\n        subContracorMapList: this.props.Login.subContracorMapList || [],\n        operation: this.props.Login.operation,\n        userInfo: this.props.Login.userInfo,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 201,\n          columnNumber: 29\n        }\n      }) : \"\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 21\n      }\n    }) : \"\");\n  }\n\n  componentDidUpdate(previousProps) {\n    if (this.props.Login.masterData !== previousProps.Login.masterData) {\n      if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\n        const userRoleControlRights = [];\n\n        if (this.props.Login.userRoleControlRights) {\n          this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item => userRoleControlRights.push(item.ncontrolcode));\n        }\n\n        const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode);\n        let dataState = {\n          skip: 0,\n          take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n        };\n        this.setState({\n          userRoleControlRights,\n          controlMap,\n          data: this.props.Login.masterData[\"SubContractSamples\"],\n          dataResult: process(this.props.Login.masterData[\"SubContractSamples\"], dataState)\n        });\n      } else {\n        let {\n          dataState\n        } = this.state;\n\n        if (this.props.Login.dataState === undefined) {\n          dataState = {\n            skip: 0,\n            take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n          };\n        }\n\n        this.setState({\n          data: this.props.Login.masterData[\"SubContractSamples\"],\n          selectedRecord: this.props.Login.selectedRecord,\n          dataResult: this.props.Login.masterData[\"SubContractSamples\"]\n        });\n      }\n    } else if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\n      this.setState({\n        selectedRecord: this.props.Login.selectedRecord\n      });\n    }\n  }\n\n  componentWillUnmount() {\n    const updateInfo = {\n      typeName: DEFAULT_RETURN,\n      data: {\n        masterData: [],\n        inputParam: undefined,\n        operation: null,\n        modalName: undefined\n      }\n    };\n    this.props.updateStore(updateInfo);\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    Login: state.Login\n  };\n};\n\nexport default connect(mapStateToProps, {\n  callService,\n  crudMaster,\n  updateStore,\n  getSubContractorComboService,\n  updateSubContractSamplesdetails,\n  updateReceiveSTTSubContractTest,\n  updateReceiveResultSubContractTest\n})(injectIntl(SubContractTestDetail));","map":{"version":3,"sources":["E:/WorkingFolder/React_Postgres/ALPD/branches/SOURCE-513-PROD/SOURCE-513-ALPD-5304/QuaLISWeb/src/pages/subcontractsamples/SubContractTestDetail.jsx"],"names":["React","Component","Col","Row","injectIntl","connect","toast","callService","crudMaster","getSubContractorComboService","updateStore","updateSubContractSamplesdetails","updateReceiveSTTSubContractTest","updateReceiveResultSubContractTest","DEFAULT_RETURN","getControlMap","showEsign","transactionStatus","ConfirmMessage","SlideOutModal","Esign","process","DataGrid","ListWrapper","SendSubContractor","SubContractTestDetail","constructor","props","closeModal","loadEsign","Login","openModal","openChildModal","selectedRecord","selectedId","operation","updateInfo","typeName","data","dataStateChange","event","setState","dataResult","state","dataState","onInputOnChange","optional","target","type","name","checked","YES","NO","value","onComboChange","comboData","fieldName","reloadData","inputParam","inputData","userInfo","classUrl","methodUrl","displayName","onSaveClick","saveType","formRef","undefined","nsubcontractortestdetailcode","item","ncontrolleadtime","nperiodcode","searchRef","esignNeeded","userRoleControlRights","nformcode","ncontrolCode","screenData","masterData","screenName","validateEsign","modalName","genericLabel","slanguagetypecode","concat","intl","formatMessage","id","sreason","nreasoncode","spredefinedreason","label","password","validateEsignCredential","createRef","skip","take","settings","parseInt","masterStatus","error","controlMap","Map","confirmMessage","extractedColumnList","getDerivedStateFromProps","warn","render","addId","has","get","ncontrolcode","editId","deleteId","addParam","primaryeyField","primaryKeyValue","filterParam","inputListName","selectedObject","primaryKeyField","fetchUrl","fecthInputObject","userinfo","searchFieldList","getProductComboService","deleteRecord","subContracorMapList","componentDidUpdate","previousProps","Object","values","map","push","componentWillUnmount","mapStateToProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { Col, Row } from 'react-bootstrap';\r\nimport { injectIntl } from 'react-intl';\r\nimport 'react-perfect-scrollbar/dist/css/styles.css';\r\nimport { connect } from 'react-redux';\r\nimport { toast } from 'react-toastify';\r\nimport {\r\n    callService, crudMaster,getSubContractorComboService,updateStore,updateSubContractSamplesdetails,\r\n    updateReceiveSTTSubContractTest,updateReceiveResultSubContractTest\r\n} from '../../actions';\r\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\r\nimport { getControlMap, showEsign } from '../../components/CommonScript';\r\nimport { transactionStatus } from '../../components/Enumeration';\r\nimport ConfirmMessage from '../../components/confirm-alert/confirm-message.component';\r\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\r\nimport Esign from '../audittrail/Esign';\r\n// import './product.css';\r\nimport { process } from '@progress/kendo-data-query';\r\nimport DataGrid from '../../components/data-grid/data-grid.component';\r\nimport { ListWrapper } from '../userroletemplate/userroletemplate.styles';\r\nimport SendSubContractor from './SendSubContractor';\r\n\r\nclass SubContractTestDetail extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.formRef = React.createRef();\r\n\r\n        const dataState = {\r\n            skip: 0,\r\n            take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5,\r\n        };\r\n        this.state = {\r\n            data: [], masterStatus: \"\", error: \"\", selectedRecord: {},\r\n            dataResult: [],\r\n            dataState: dataState,\r\n            userRoleControlRights: [],\r\n            controlMap: new Map()\r\n        };\r\n        this.searchRef = React.createRef();\r\n        this.confirmMessage = new ConfirmMessage();\r\n        this.extractedColumnList = [\r\n            { \"idsName\": \"IDS_TEST\", \"dataField\": \"stestsynonym\", \"width\": \"200px\" },\r\n            {\"idsName\": \"IDS_SUBCONTRACTOR\", \"dataField\": \"ssuppliername\", \"width\": \"200px\"},\r\n            {\"idsName\": \"IDS_EXPECTEDDATE\", \"dataField\": \"sexpecteddate\", \"width\": \"200px\"},\r\n            {\"idsName\": \"IDS_CONTROLLEADTIME\", \"dataField\": \"scontrolleaddate\", \"width\": \"200px\"},\r\n            { \"idsName\": \"IDS_ARNO\" , \"dataField\": \"sarno\", \"width\": \"200px\" },\r\n            { \"idsName\": \"IDS_SAMPLEARNO\" , \"dataField\": \"ssamplearno\", \"width\": \"200px\" },\r\n            { \"idsName\": \"IDS_DISPLAYSTATUS\", \"dataField\": \"stransdisplaystatus\", \"width\": \"200px\" }\r\n        ];\r\n    }\r\n\r\n   \r\n\r\n    closeModal = () => {\r\n        let loadEsign = this.props.Login.loadEsign;\r\n        let openModal = this.props.Login.openModal;\r\n        let openChildModal = this.props.Login.openChildModal;\r\n        let selectedRecord = this.props.Login.selectedRecord;\r\n        let selectedId = this.props.Login.selectedId;\r\n        if (this.props.Login.loadEsign) {\r\n            if (this.props.Login.operation === \"sendsubcontractor\") {\r\n                loadEsign = false;\r\n                openModal = false;\r\n                openChildModal=false;\r\n                selectedRecord = {};\r\n            }\r\n            else {\r\n                loadEsign = false;\r\n                selectedRecord['esignpassword'] = \"\"\r\n                selectedRecord['esigncomments'] = \"\"\r\n                selectedRecord['esignreason']=\"\"\r\n            }\r\n        }\r\n        else {\r\n            openModal = false;\r\n            openChildModal=false;\r\n            selectedRecord = {};\r\n            selectedId=null\r\n        }\r\n\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { openModal,openChildModal, loadEsign, selectedRecord, selectedId }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n\r\n    }\r\n\r\n    static getDerivedStateFromProps(props, state) {\r\n\r\n        if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\r\n            toast.warn(props.Login.masterStatus);\r\n            props.Login.masterStatus = \"\";\r\n        }\r\n\r\n        if (props.Login.error !== state.error) {\r\n            toast.error(props.Login.error)\r\n            props.Login.error = \"\";\r\n        }\r\n        return null;\r\n    }\r\n\r\n    dataStateChange = (event) => {\r\n        this.setState({\r\n            dataResult: process(this.state.data, event.dataState),\r\n            dataState: event.dataState\r\n        });\r\n    }\r\n\r\n    \r\n    render() {\r\n        const addId = this.props.Login.inputParam && this.state.controlMap.has(\"Add\".concat(this.props.Login.inputParam.methodUrl))\r\n            && this.state.controlMap.get(\"Add\".concat(this.props.Login.inputParam.methodUrl)).ncontrolcode;\r\n\r\n        const editId = this.props.Login.inputParam && this.state.controlMap.has(\"Edit\".concat(this.props.Login.inputParam.methodUrl))\r\n            && this.state.controlMap.get(\"Edit\".concat(this.props.Login.inputParam.methodUrl)).ncontrolcode;\r\n\r\n        const deleteId = this.props.Login.inputParam && this.state.controlMap.has(\"Delete\".concat(this.props.Login.inputParam.methodUrl))\r\n            && this.state.controlMap.get(\"Delete\".concat(this.props.Login.inputParam.methodUrl)).ncontrolcode;\r\n\r\n        const addParam = {\r\n            screenName: this.props.Login.genericLabel ? this.props.Login.genericLabel[\"Product\"][\"jsondata\"][\"sdisplayname\"][this.props.Login.userInfo.slanguagetypecode] : \"IDS_PRODUCT\" , primaryeyField: \"nproductcode\", primaryKeyValue: undefined,\r\n            operation: \"create\", inputParam: this.props.Login.inputParam, userInfo: this.props.Login.userInfo, ncontrolCode: addId\r\n        };\r\n\r\n\r\n        const filterParam = {\r\n            inputListName: \"Product\", selectedObject: \"SelectedProduct\", primaryKeyField: \"nproductcode\",\r\n            fetchUrl: \"product/getProduct\", fecthInputObject: { userinfo: this.props.Login.userInfo },\r\n            masterData: this.props.Login.masterData, searchFieldList: this.searchFieldList\r\n        };\r\n\r\n       \r\n\r\n        return (\r\n            <>\r\n                <Row>\r\n                    <Col>\r\n                        <ListWrapper className=\"client-list-content\">\r\n\r\n                            {this.state.data ?\r\n                                <DataGrid\r\n                                    primaryKeyField={\"nsubcontractortestdetailcode\"}\r\n                                    data={this.state.data}\r\n                                    dataResult={this.state.dataResult}\r\n                                    dataState={this.state.dataState}\r\n                                    dataStateChange={this.dataStateChange}\r\n                                    extractedColumnList={this.extractedColumnList}\r\n                                    fetchRecord={this.props.getProductComboService}\r\n                                    editParam={[]}\r\n                                    deleteRecord={this.deleteRecord}\r\n                                    deleteParam={[]}\r\n                                    reloadData={this.reloadData}\r\n                                    controlMap={this.state.controlMap}\r\n                                    userRoleControlRights={this.state.userRoleControlRights}\r\n                                    inputParam={this.props.Login.inputParam}\r\n                                    userInfo={this.props.Login.userInfo}\r\n                                    pageable={true}\r\n                                    scrollable={'scrollable'}\r\n                                    gridHeight={'600px'}\r\n                                    isActionRequired={true}\r\n                                    isToolBarRequired={true}\r\n                                    selectedId={this.props.Login.selectedId}\r\n                                    listMasterShowIcon = {0}\r\n                                    masterdata = {this.props.Login.masterData || []}\r\n                                    sendRecord = {this.props.getSubContractorComboService}\r\n                                    updateReceiveSTTSubContractTest = {this.props.updateReceiveSTTSubContractTest}\r\n                                    updateReceiveResultSubContractTest = {this.props.updateReceiveResultSubContractTest}\r\n                                />\r\n                                : \"\"}\r\n                        </ListWrapper>\r\n                    </Col>\r\n                </Row>\r\n                \r\n                {/* Below Condition Added to avoid unwanted rendering of SlideOut */}\r\n                {this.props.Login.openModal || this.props.Login.openChildModal ?\r\n                    <SlideOutModal\r\n                        show={this.props.Login.screenName === this.props.Login.genericLabel[\"Product\"][\"jsondata\"][\"sdisplayname\"][this.props.Login.userInfo.slanguagetypecode].concat(\" \"+this.props.intl.formatMessage({id : \"IDS_FILE\"})) ?\r\n                        this.props.Login.openChildModal:\r\n                        this.props.Login.openModal}\r\n                        closeModal={this.closeModal}\r\n                        operation={this.props.Login.operation}\r\n                        inputParam={this.props.Login.inputParam}\r\n                        showSaveContinue={true}\r\n                        screenName={this.props.Login.screenName}\r\n                        onSaveClick={this.onSaveClick}\r\n                        esign={this.props.Login.loadEsign}\r\n                        validateEsign={this.validateEsign}\r\n                        masterStatus={this.props.Login.masterStatus}\r\n                        updateStore={this.props.updateStore}\r\n                        selectedRecord={this.state.selectedRecord || {}}\r\n                        addComponent={this.props.Login.loadEsign ?\r\n                            <Esign operation={this.props.Login.operation}\r\n                                onInputOnChange={this.onInputOnChange}\r\n                                inputParam={this.props.Login.inputParam}\r\n                                selectedRecord={this.state.selectedRecord || {}}\r\n                            /> \r\n                            :\r\n                            this.props.Login.operation === \"sendsubcontractor\" ?\r\n                            <SendSubContractor\r\n                                selectedRecord={this.state.selectedRecord || {}}\r\n                                onInputOnChange={this.onInputOnChange}\r\n                                onComboChange={this.onComboChange}\r\n                                subContracorMapList={this.props.Login.subContracorMapList || []}\r\n                                operation={this.props.Login.operation}\r\n                                userInfo={this.props.Login.userInfo}\r\n                            />\r\n                            \r\n                            :\"\"\r\n                        }\r\n                    />\r\n                    : \"\"}\r\n            </>\r\n        );\r\n    }\r\n    \r\n\r\n    componentDidUpdate(previousProps) {\r\n        if (this.props.Login.masterData !== previousProps.Login.masterData) {\r\n            if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\r\n                const userRoleControlRights = [];\r\n                if (this.props.Login.userRoleControlRights) {\r\n                    this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item =>\r\n                        userRoleControlRights.push(item.ncontrolcode))\r\n                }\r\n                const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode)\r\n                let dataState = { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 }\r\n                \r\n                this.setState({\r\n                    userRoleControlRights, controlMap, data: this.props.Login.masterData[\"SubContractSamples\"],\r\n                    dataResult: process(this.props.Login.masterData[\"SubContractSamples\"],dataState)\r\n                });\r\n            }\r\n            else {\r\n                let { dataState } = this.state;\r\n                if (this.props.Login.dataState === undefined) {\r\n                    dataState = { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 }\r\n                }\r\n                this.setState({\r\n                    data: this.props.Login.masterData[\"SubContractSamples\"], selectedRecord: this.props.Login.selectedRecord,\r\n                    dataResult:this.props.Login.masterData[\"SubContractSamples\"]\r\n                });\r\n            }\r\n        }\r\n        else if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\r\n            this.setState({ selectedRecord: this.props.Login.selectedRecord });\r\n        }\r\n    }\r\n\r\n    onInputOnChange = (event,optional) => {\r\n\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if (event.target.type === 'checkbox') {\r\n            selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\r\n        }\r\n        else if (event.target.type === \"radio\"){\r\n            selectedRecord[event.target.name] = optional;\r\n        }\r\n        else {\r\n            selectedRecord[event.target.name] = event.target.value;\r\n        }\r\n\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    onComboChange = (comboData, fieldName) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        selectedRecord[fieldName] = comboData;;\r\n\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n   \r\n    \r\n    reloadData = () => {\r\n\r\n        const inputParam = {\r\n            inputData: { \"userinfo\": this.props.Login.userInfo },\r\n            classUrl: this.props.Login.inputParam.classUrl,\r\n            methodUrl: this.props.Login.inputParam.methodUrl, \r\n            displayName: this.props.Login.displayName,\r\n            userInfo: this.props.Login.userInfo\r\n        };\r\n        this.props.callService(inputParam);\r\n    }\r\n    \r\n    onSaveClick = (saveType, formRef) => {\r\n           \r\n        let inputData = [];\r\n        let dataState = undefined;\r\n        let selectedId = null;\r\n        dataState = this.state.dataState;\r\n        selectedId = this.props.Login.selectedRecord['subcontractortestdetail'].nsubcontractortestdetailcode;\r\n\r\n\r\n        inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n        inputData[\"subcontractortestdetail\"] = this.state.selectedRecord['subcontractortestdetail'];\r\n        inputData[\"subcontractortestdetail\"]['nsuppliercode'] = this.state.selectedRecord['nsuppliercode'].value;\r\n        inputData[\"subcontractortestdetail\"]['ncontrolleadtime'] = this.state.selectedRecord['nsuppliercode'].item.ncontrolleadtime;\r\n         inputData[\"subcontractortestdetail\"]['nperiodcode'] = this.state.selectedRecord['nsuppliercode'].item.nperiodcode;\r\n        inputData[\"subcontractortestdetail\"]['sremarks'] = this.state.selectedRecord['sremarks'];\r\n\r\n        // if (inputData[\"subcontractordetails\"].hasOwnProperty('esignpassword')) {\r\n        //     if (inputData[\"subcontractordetails\"]['esignpassword'] === '') {\r\n        //         delete inputData[\"subcontractordetails\"]['esigncomments']\r\n        //         delete inputData[\"subcontractordetails\"]['esignpassword']\r\n        //     }\r\n        // }\r\n\r\n        \r\n        const inputParam = {\r\n            classUrl: this.props.Login.inputParam.classUrl,\r\n            methodUrl: \"updateSubContractSamplesdetails\",\r\n            displayName: this.props.Login.inputParam.displayName,\r\n            inputData: inputData, selectedId, dataState,\r\n            operation: this.props.Login.operation, saveType, formRef, searchRef: this.searchRef,\r\n            selectedRecord:{...this.state.selectedRecord}\r\n        }\r\n\r\n        const esignNeeded = showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode);\r\n        if (esignNeeded) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData: this.props.Login.masterData },\r\n                    openModal: true, screenName: \"IDS_SENDSUBCONTRACTOR\",\r\n                    operation: this.props.Login.operation\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.updateSubContractSamplesdetails(inputParam, this.props.Login.masterData, \"openModal\",\"\",\"\");\r\n        }\r\n\r\n    }\r\n    validateEsign = () => {\r\n        let modalName = this.props.Login.screenName === this.props.Login.genericLabel[\"Product\"][\"jsondata\"][\"sdisplayname\"][this.props.Login.userInfo.slanguagetypecode].concat(\" \"+this.props.intl.formatMessage({id : \"IDS_FILE\"})) ? \"openChildModal\" : \"openModal\";\r\n        const inputParam = {\r\n            inputData: {\r\n                \"userinfo\": {\r\n                    ...this.props.Login.userInfo,\r\n                    sreason: this.state.selectedRecord[\"esigncomments\"],\r\n                    nreasoncode:this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].value,\r\n                    spredefinedreason:this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].label,\r\n               \r\n                },\r\n                password: this.state.selectedRecord[\"esignpassword\"]\r\n            },\r\n            screenData: this.props.Login.screenData\r\n        }\r\n        this.props.validateEsignCredential(inputParam, modalName);\r\n    }\r\n    componentWillUnmount() {\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                masterData: [], inputParam: undefined, operation: null, modalName: undefined\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n}\r\n\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        Login: state.Login\r\n    }\r\n}\r\nexport default connect(mapStateToProps, {\r\n    callService, crudMaster,updateStore, getSubContractorComboService,updateSubContractSamplesdetails,\r\n    updateReceiveSTTSubContractTest,updateReceiveResultSubContractTest\r\n})(injectIntl(SubContractTestDetail));"]},"metadata":{},"sourceType":"module"}