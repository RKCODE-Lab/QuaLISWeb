{"ast":null,"code":"import { DEFAULT_RETURN, UPDATE_LANGUAGE, REQUEST_INIT } from './LoginTypes';\nimport rsapi from \"../rsapi\";\nimport { intl } from '../components/App';\nimport { toast } from 'react-toastify';\nimport { constructjsonOptionList, constructOptionList, rearrangeDateFormat } from '../components/CommonScript';\nimport { getHomeDashBoard } from './DashBoardTypeAction';\nimport { getListStaticDashBoard } from './StaticDashBoardAction';\nimport { getListAlert } from './AlertViewAction';\nimport { getRandomColor } from '../components/header/headerutils';\nimport { loadMessages, LocalizationProvider } from '@progress/kendo-react-intl';\nimport messages_ru from '../assets/translations/ru.json';\nimport messages_tg from '../assets/translations/tg.json';\nimport messages_en from '../assets/translations/en.json';\nimport messages_de from '../assets/translations/de.json';\nconst messages = {\n  'en-US': messages_en,\n  'ko-KR': messages_de,\n  'ru-RU': messages_ru,\n  'tg-TG': messages_tg\n};\nexport const initRequest = loading => {\n  return {\n    type: REQUEST_INIT,\n    payload: loading\n  };\n};\nexport const navPage = data => dispatch => {\n  dispatch({\n    type: DEFAULT_RETURN,\n    payload: {\n      navigation: data\n    }\n  });\n};\nexport const changeLanguage = (language, selectedRecord, loginType) => dispatch => {\n  const loginTypeMap = constructjsonOptionList(loginType || [], \"nlogintypecode\", \"sdisplayname\", false, false, true, undefined, 'jsondata', true, language);\n  dispatch({\n    type: UPDATE_LANGUAGE,\n    payload: {\n      language,\n      selectedRecord,\n      loginTypeList: loginTypeMap.get(\"OptionList\"),\n      selectedRecord: { ...selectedRecord,\n        nlogintypecode: loginTypeMap.get(\"DefaultValue\") ? loginTypeMap.get(\"DefaultValue\") : \"\"\n      }\n    }\n  });\n};\nexport const clickOnLoginButton = (inputData, languageList) => {\n  return dispatch => {\n    dispatch(initRequest(true));\n    rsapi.post(inputData.url, inputData).then(response => {\n      const returnStr = response.data[\"rtn\"];\n\n      if (returnStr.toUpperCase() === \"SUCCESS\") {\n        const responseData = response.data;\n        const PassFlag = responseData.PassFlag;\n        languageList && languageList.map(x => {\n          loadMessages(messages[inputData.slanguagetypecode], inputData.slanguagetypecode);\n        });\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            openCPModal: response.data.PassFlag === 6 || PassFlag === 55 ? true : false,\n            passwordPolicy: response.data.PasswordPolicy,\n            screenName: PassFlag === 6 ? \"IDS_CREATEPASSWORD\" : PassFlag === 55 ? \"IDS_CHANGEPASSWORD\" : \"\",\n            PassFlag,\n            userInfo: {\n              nlogintypecode: inputData.nlogintypecode\n            }\n          }\n        });\n\n        if (responseData.PassFlag !== 6 && responseData.PassFlag !== 55) {\n          const inputParam = {\n            userInfo: responseData.UserInfo,\n            menuDesign: responseData.MenuDesign,\n            navigation: inputData.navigation,\n            userRoleControlRights: responseData.UserRoleControlRights,\n            userFormControlProperties: responseData.UserFormControlproperties,\n            transactionValidation: responseData.TransactionValidation,\n            displayName: \"\",\n            userMultiRole: responseData.UserMultiRole,\n            settings: responseData.Settings,\n            sdmselnsettings: responseData.SDMSELNSettings,\n            deputyUser: response.data.DeputyUser,\n            deputyUserRole: response.data.DeputyUserRole,\n            isDeputyLogin: false,\n            loading: false,\n            userImagePath: responseData.UserImagePath,\n            //profileColor: \"#002699\",\n            profileColor: responseData.UserImagePath === \"\" ? getRandomColor([240, 360], [90, 100], [0, 95], [1, 1]) : \"#ff0000\",\n            idleneed: true\n          };\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: inputParam\n          });\n          dispatch(getListStaticDashBoard(responseData.UserInfo, 1)); // dispatch(getHomeDashBoard(responseData.UserInfo, 0, false));\n\n          dispatch(getListAlert(responseData.UserInfo, true));\n\n          if (responseData.PasswordAlertDay) {\n            toast.info(intl.formatMessage({\n              id: \"IDS_PASSWORDEXPIRY\"\n            }) + \" \" + responseData.PasswordAlertDay + \" \" + intl.formatMessage({\n              id: \"IDS_DAY\"\n            }));\n          }\n        }\n      } else {\n        toast.warn(intl.formatMessage({\n          id: returnStr\n        }));\n      }\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(intl.formatMessage({\n          id: error.message\n        }));\n      } else {\n        toast.warn(intl.formatMessage({\n          id: error.response.data\n        }));\n      }\n    });\n  };\n};\nexport const submitChangeRole = inputParam => {\n  return dispatch => {\n    dispatch(initRequest(true));\n    rsapi.post(\"/login/getuserscreenrightsmenu\", inputParam).then(response => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          userInfo: response.data.UserInfo,\n          menuDesign: response.data.MenuDesign,\n          userRoleControlRights: response.data.UserRoleControlRights,\n          userMultiRole: response.data.UserMultiRole,\n          deputyUser: response.data.DeputyUser,\n          deputyUserRole: response.data.DeputyUserRole,\n          loading: false,\n          masterData: [],\n          displayName: \"\",\n          navigation: \"home\",\n          inputParam: {},\n          openRoleBox: false\n        }\n      });\n      dispatch(getListStaticDashBoard(response.data.UserInfo, 1));\n      dispatch(getHomeDashBoard(response.data.UserInfo, 0, false));\n      dispatch(getListAlert(response.data.UserInfo));\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(intl.formatMessage({\n          id: error.message\n        }));\n      } else {\n        toast.warn(intl.formatMessage({\n          id: error.response.data\n        }));\n      }\n    });\n  };\n};\nexport const updateStore = updateInfo => dispatch => {\n  if (updateInfo.data.loadEsign === true) {\n    dispatch(initRequest(true));\n    rsapi.post(\"/timezone/getLocalTimeByZone\", {\n      \"userinfo\": updateInfo.data.screenData.inputParam.inputData.userinfo\n    }).then(response => {\n      dispatch({\n        type: updateInfo.typeName,\n        payload: {\n          serverTime: rearrangeDateFormat(updateInfo.data.screenData.inputParam.inputData.userinfo, response.data),\n          ...updateInfo.data,\n          masterStatus: \"\",\n          errorCode: undefined,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(intl.formatMessage({\n          id: error.message\n        }));\n      } else {\n        toast.warn(intl.formatMessage({\n          id: error.response.data\n        }));\n      }\n    });\n  } else {\n    dispatch({\n      type: updateInfo.typeName,\n      payload: { ...updateInfo.data,\n        masterStatus: \"\",\n        errorCode: undefined\n      }\n    });\n  }\n};\nexport const getChangeUserRole = userInfo => {\n  return dispatch => {\n    dispatch(initRequest(true));\n    rsapi.post(\"/login/getchangerole\", {\n      \"userinfo\": userInfo\n    }).then(response => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: { ...response.data,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(intl.formatMessage({\n          id: error.message\n        }));\n      } else {\n        toast.warn(intl.formatMessage({\n          id: error.response.data\n        }));\n      }\n    });\n  };\n};\nexport const getLoginDetails = () => {\n  return dispatch => {\n    dispatch(initRequest(true));\n    rsapi.post(\"/login/getloginInfo\", {}).then(response => {\n      // let loginType = [];\n      // response.data.LoginType.map(type => {\n      //     loginType\n      // })\n      const languageMap = constructOptionList(response.data.Language || [], \"slanguagetypecode\", \"slanguagename\", false, false, true);\n      let defaultLanguage = languageMap.get(\"DefaultValue\") ? languageMap.get(\"DefaultValue\") : undefined;\n      let languageCode = defaultLanguage ? defaultLanguage.value : \"en-US\";\n      const loginTypeMap = constructjsonOptionList(response.data.LoginType || [], \"nlogintypecode\", \"sdisplayname\", false, false, true, undefined, 'jsondata', true, languageCode);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loginTypes: response.data.LoginType,\n          loginTypeList: loginTypeMap.get(\"OptionList\"),\n          languageList: languageMap.get(\"OptionList\"),\n          selectedRecord: {\n            nlogintypecode: loginTypeMap.get(\"DefaultValue\") ? loginTypeMap.get(\"DefaultValue\") : \"\",\n            nlanguagecode: defaultLanguage || \"\"\n          },\n          language: defaultLanguage.value,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(intl.formatMessage({\n          id: error.message\n        }));\n      } else {\n        toast.warn(intl.formatMessage({\n          id: error.response.data\n        }));\n      }\n    });\n  };\n};\nexport const getUserSiteAndRole = (inputParam, selectedRecord) => {\n  return dispatch => {\n    dispatch(initRequest(true));\n    rsapi.post(\"/login/getloginvalidation\", { ...inputParam\n    }).then(response => {\n      const roleMap = constructOptionList(response.data.UserMultiRole || [], \"nusermultirolecode\", \"suserrolename\", false, false, true, \"ndefaultrole\");\n      const siteMap = constructOptionList(response.data.Site || [], \"nusersitecode\", \"ssitename\", false, false, true, \"ndefaultsite\");\n      let loggeInLoginTypeCode = response.data.Users.nlogintypecode;\n      let logintypecode = inputParam.logintype.filter(x => x.value === loggeInLoginTypeCode);\n\n      if (inputParam.logintype.length > 0 && logintypecode.length === 0) {\n        logintypecode = inputParam.logintype;\n        loggeInLoginTypeCode = logintypecode[0].value;\n      }\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loginUserRole: roleMap.get(\"OptionList\"),\n          loginUserSite: siteMap.get(\"OptionList\"),\n          selectedRecord: { ...selectedRecord,\n            nusermultirolecode: roleMap.get(\"DefaultValue\") ? roleMap.get(\"DefaultValue\") : roleMap.get(\"OptionList\") ? roleMap.get(\"OptionList\")[0] : \"\",\n            nusersitecode: siteMap.get(\"DefaultValue\") ? siteMap.get(\"DefaultValue\") : siteMap.get(\"OptionList\") ? siteMap.get(\"OptionList\")[0] : \"\",\n            nusercode: response.data.Users.nusercode,\n            nlogintypecode: logintypecode ? logintypecode[0] : \"\"\n          },\n          openCPModal: response.data.PassFlag === 6 ? true : false,\n          passwordPolicy: response.data.PasswordPolicy,\n          screenName: \"IDS_CREATEPASSWORD\",\n          loading: false,\n          PassFlag: response.data.PassFlag,\n          createPwdRecord: {},\n          userInfo: {\n            nlogintypecode: loggeInLoginTypeCode\n          }\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false,\n          loginUserRole: [],\n          loginUserSite: [],\n          selectedRecord: { ...selectedRecord,\n            nusermultirolecode: \"\",\n            nusersitecode: \"\"\n          }\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(intl.formatMessage({\n          id: error.message\n        }));\n      } else {\n        toast.warn(intl.formatMessage({\n          id: error.response.data\n        }));\n      }\n    });\n  };\n};\nexport const createPassword = inputParam => {\n  return dispatch => {\n    dispatch(initRequest(true));\n    rsapi.post(\"/login/createnewpassword\", { ...inputParam\n    }).then(response => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          openCPModal: false,\n          loading: false,\n          createPwdRecord: {}\n        }\n      });\n      toast.success(intl.formatMessage({\n        id: \"IDS_PASSWORDCREATEDSUCCESSFULLY\"\n      }));\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(intl.formatMessage({\n          id: error.message\n        }));\n      } else {\n        toast.warn(intl.formatMessage({\n          id: error.response.data\n        }));\n      }\n    });\n  };\n};\nexport const changepassword = inputParam => {\n  return dispatch => {\n    dispatch(initRequest(true));\n    rsapi.post(\"/login/changepassword\", { ...inputParam\n    }).then(response => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          openCPModal: false,\n          loading: false,\n          createPwdRecord: {},\n          navigation: \"login\"\n        }\n      });\n      toast.success(intl.formatMessage({\n        id: \"IDS_PASSWORDCHANGEDSUCCESSFULLY\"\n      }));\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(intl.formatMessage({\n          id: error.message\n        }));\n      } else {\n        toast.warn(intl.formatMessage({\n          id: error.response.data\n        }));\n      }\n    });\n  };\n};\nexport const getPassWordPolicy = nuserrolecode => {\n  return dispatch => {\n    dispatch(initRequest(true));\n    rsapi.post(\"/login/getPassWordPolicy\", {\n      nuserrolecode\n    }).then(response => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          openCPModal: true,\n          loading: false,\n          createPwdRecord: {},\n          screenName: \"IDS_CHANGEPASSWORD\",\n          passwordPolicy: response.data.PasswordPolicy\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(intl.formatMessage({\n          id: error.message\n        }));\n      } else {\n        toast.warn(intl.formatMessage({\n          id: error.response.data\n        }));\n      }\n    });\n  };\n};\nexport const changeOwner = inputData => {\n  return dispatch => {\n    dispatch(initRequest(true));\n    rsapi.post(\"/login/changeOwner\", { ...inputData\n    }).then(response => {\n      const responseData = response.data;\n      const inputParam = {\n        userInfo: responseData.UserInfo,\n        menuDesign: responseData.MenuDesign,\n        userRoleControlRights: responseData.UserRoleControlRights,\n        userFormControlProperties: responseData.UserFormControlproperties,\n        transactionValidation: responseData.TransactionValidation,\n        displayName: \"\",\n        userMultiRole: responseData.UserMultiRole,\n        isDeputyLogin: true,\n        // settings: responseData.Settings,\n        // deputyUser: response.data.DeputyUser,\n        // deputyUserRole: response.data.DeputyUserRole,\n        loading: false,\n        masterData: [],\n        navigation: \"home\",\n        inputParam: {},\n        openRoleBox: false,\n        userImagePath: responseData.UserImagePath,\n        profileColor: responseData.UserImagePath === \"\" ? getRandomColor([240, 360], [90, 100], [0, 95], [1, 1]) : \"#ff0000\",\n        idleneed: true\n      };\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: inputParam\n      });\n      dispatch(getListStaticDashBoard(response.data.UserInfo, 1));\n      dispatch(getHomeDashBoard(response.data.UserInfo, 0, false));\n      dispatch(getListAlert(response.data.UserInfo));\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(intl.formatMessage({\n          id: error.message\n        }));\n      } else {\n        toast.warn(intl.formatMessage({\n          id: error.response.data\n        }));\n      }\n    });\n  };\n};\nexport const logOutAuditAction = inputData => {\n  return dispatch => {\n    dispatch(initRequest(true));\n    rsapi.post('login/insertAuditAction', { ...inputData,\n      nFlag: 2\n    }).then(response => {\n      dispatch(navPage(\"login\"));\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n};\nexport const elnLoginAction = (inputParam, serverUrl, uiUrl) => {\n  return dispatch => {\n    dispatch(initRequest(true));\n    rsapi.post(serverUrl, { ...inputParam\n    }).then(response => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (response !== null && response.data.objResponse !== null) {\n        if (response.data.objResponse.status) {\n          if (uiUrl) {\n            let user = response;\n            let elnURL = uiUrl + \"#\" + user.data.username + \"$\" + user.data.password;\n            window.open(elnURL, '_blank');\n          } else {\n            toast.info(intl.FormattedMessage({\n              id: \"IDS_ELNUIURLNOTAVAILABLE\"\n            }));\n          }\n        } else {\n          toast.info(response.data.objResponse.information);\n        } // if(!$(\"#appsdetails\").is(\":hidden\")){\n        //     $('#appsdetails').addClass(\"dp-none\");\n        // }\n\n      }\n\n      ;\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n      toast.error(error.message);\n    });\n  };\n};\nexport const sdmsLoginAction = (inputParam, serverUrl, sdmsUIUrl) => {\n  return dispatch => {\n    dispatch(initRequest(true));\n    rsapi.post(serverUrl, { ...inputParam\n    }).then(response => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (response !== null && response.data.status) {\n        if (response.data.status) {\n          const sdmsURL = sdmsUIUrl + \"?un=\" + response.data.username + \"&pd=\" + response.data.password + \"&sc=\" + inputParam.sSiteCode;\n          window.open(sdmsURL, '_blank');\n        } else {\n          toast.info(response.Message);\n        }\n      } else {\n        toast.info(intl.FormattedMessage({\n          id: \"IDS_CHECKSYNCSERVICE\"\n        }));\n      }\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n      toast.error(error.message);\n    });\n  };\n};\nexport const getUsersiteRole = inputParam => {\n  return dispatch => {\n    dispatch(initRequest(true));\n    rsapi.post('login/changeSite', {\n      \"usersSite\": inputParam.selectedRecord.nusersitecode.item\n    }).then(response => {\n      const roleMap = constructOptionList(response.data.UserMultiRole || [], \"nusermultirolecode\", \"suserrolename\", false, false, true, \"ndefaultrole\");\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false,\n          loginUserRole: roleMap.get(\"OptionList\"),\n          selectedRecord: { ...inputParam.selectedRecord,\n            nusermultirolecode: roleMap.get(\"DefaultValue\") ? roleMap.get(\"DefaultValue\") : roleMap.get(\"OptionList\") ? roleMap.get(\"OptionList\")[0] : \"\"\n          }\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n      toast.error(error.message);\n    });\n  };\n};\nexport const checkPassword = (inputParam, selectedRecord) => {\n  return dispatch => {\n    dispatch(initRequest(true));\n    rsapi.post(\"/login/getlogintypevalidation\", { ...inputParam\n    }).then(response => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          selectedRecord: { ...selectedRecord,\n            nusercode: response.data.Users.nusercode\n          },\n          userInfo: {\n            nlogintypecode: inputParam.nlogintypecode\n          },\n          openCPModal: response.data.PassFlag === 6 ? true : false,\n          passwordPolicy: response.data.PasswordPolicy,\n          screenName: \"IDS_CREATEPASSWORD\",\n          loading: false,\n          PassFlag: response.data.PassFlag,\n          createPwdRecord: {}\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(intl.formatMessage({\n          id: error.message\n        }));\n      } else {\n        toast.warn(intl.formatMessage({\n          id: error.response.data\n        }));\n      }\n    });\n  };\n};","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/actions/LoginAction.js"],"names":["DEFAULT_RETURN","UPDATE_LANGUAGE","REQUEST_INIT","rsapi","intl","toast","constructjsonOptionList","constructOptionList","rearrangeDateFormat","getHomeDashBoard","getListStaticDashBoard","getListAlert","getRandomColor","loadMessages","LocalizationProvider","messages_ru","messages_tg","messages_en","messages_de","messages","initRequest","loading","type","payload","navPage","data","dispatch","navigation","changeLanguage","language","selectedRecord","loginType","loginTypeMap","undefined","loginTypeList","get","nlogintypecode","clickOnLoginButton","inputData","languageList","post","url","then","response","returnStr","toUpperCase","responseData","PassFlag","map","x","slanguagetypecode","openCPModal","passwordPolicy","PasswordPolicy","screenName","userInfo","inputParam","UserInfo","menuDesign","MenuDesign","userRoleControlRights","UserRoleControlRights","userFormControlProperties","UserFormControlproperties","transactionValidation","TransactionValidation","displayName","userMultiRole","UserMultiRole","settings","Settings","sdmselnsettings","SDMSELNSettings","deputyUser","DeputyUser","deputyUserRole","DeputyUserRole","isDeputyLogin","userImagePath","UserImagePath","profileColor","idleneed","PasswordAlertDay","info","formatMessage","id","warn","catch","error","status","message","submitChangeRole","masterData","openRoleBox","updateStore","updateInfo","loadEsign","screenData","userinfo","typeName","serverTime","masterStatus","errorCode","getChangeUserRole","getLoginDetails","languageMap","Language","defaultLanguage","languageCode","value","LoginType","loginTypes","nlanguagecode","getUserSiteAndRole","roleMap","siteMap","Site","loggeInLoginTypeCode","Users","logintypecode","logintype","filter","length","loginUserRole","loginUserSite","nusermultirolecode","nusersitecode","nusercode","createPwdRecord","createPassword","success","changepassword","getPassWordPolicy","nuserrolecode","changeOwner","logOutAuditAction","nFlag","elnLoginAction","serverUrl","uiUrl","objResponse","user","elnURL","username","password","window","open","FormattedMessage","information","sdmsLoginAction","sdmsUIUrl","sdmsURL","sSiteCode","Message","getUsersiteRole","item","checkPassword"],"mappings":"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","sourcesContent":["import {\r\n    DEFAULT_RETURN,\r\n    UPDATE_LANGUAGE,\r\n    REQUEST_INIT\r\n} from './LoginTypes';\r\nimport rsapi from \"../rsapi\";\r\nimport {\r\n    intl\r\n} from '../components/App';\r\nimport {\r\n    toast\r\n} from 'react-toastify';\r\nimport {\r\n    constructjsonOptionList,\r\n    constructOptionList, rearrangeDateFormat\r\n} from '../components/CommonScript';\r\nimport {\r\n    getHomeDashBoard\r\n} from './DashBoardTypeAction';\r\nimport {\r\n    getListStaticDashBoard\r\n} from './StaticDashBoardAction';\r\nimport {\r\n    getListAlert\r\n} from './AlertViewAction'\r\nimport {\r\n    getRandomColor\r\n} from '../components/header/headerutils';\r\n\r\nimport { loadMessages, LocalizationProvider } from '@progress/kendo-react-intl';\r\n\r\nimport messages_ru from '../assets/translations/ru.json';\r\nimport messages_tg from '../assets/translations/tg.json';\r\nimport messages_en from '../assets/translations/en.json';\r\nimport messages_de from '../assets/translations/de.json';\r\n\r\nconst messages = {\r\n    'en-US': messages_en,\r\n    'ko-KR': messages_de,\r\n    'ru-RU': messages_ru,\r\n    'tg-TG': messages_tg\r\n}\r\n\r\n\r\nexport const initRequest = (loading) => {\r\n    return {\r\n        type: REQUEST_INIT,\r\n        payload: loading\r\n    }\r\n}\r\n\r\nexport const navPage = (data) => dispatch => {\r\n    dispatch({\r\n        type: DEFAULT_RETURN,\r\n        payload: {\r\n            navigation: data\r\n        }\r\n    });\r\n}\r\n\r\nexport const changeLanguage = (language, selectedRecord, loginType) => (dispatch) => {\r\n    const loginTypeMap = constructjsonOptionList(loginType || [], \"nlogintypecode\",\r\n        \"sdisplayname\", false, false, true, undefined, 'jsondata', true, language);\r\n    dispatch({\r\n        type: UPDATE_LANGUAGE,\r\n        payload: {\r\n            language,\r\n            selectedRecord,\r\n            loginTypeList: loginTypeMap.get(\"OptionList\"),\r\n            selectedRecord: {\r\n                ...selectedRecord,\r\n                nlogintypecode: loginTypeMap.get(\"DefaultValue\") ? loginTypeMap.get(\"DefaultValue\") : \"\"\r\n            }\r\n        }\r\n    })\r\n}\r\n\r\nexport const clickOnLoginButton = (inputData, languageList) => {\r\n    return (dispatch) => {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(inputData.url, inputData)\r\n            .then(response => {\r\n                const returnStr = response.data[\"rtn\"];\r\n                if (returnStr.toUpperCase() === \"SUCCESS\") {\r\n                    const responseData = response.data;\r\n                    const PassFlag = responseData.PassFlag;\r\n\r\n                    languageList &&\r\n                        languageList.map(x => {\r\n                            loadMessages(messages[inputData.slanguagetypecode], inputData.slanguagetypecode);\r\n                        })\r\n\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            openCPModal: response.data.PassFlag === 6 || PassFlag === 55 ? true : false,\r\n                            passwordPolicy: response.data.PasswordPolicy,\r\n                            screenName: PassFlag === 6 ? \"IDS_CREATEPASSWORD\" : PassFlag === 55 ? \"IDS_CHANGEPASSWORD\" : \"\",\r\n                            PassFlag,\r\n                            userInfo: {\r\n                                nlogintypecode: inputData.nlogintypecode\r\n                            }\r\n                        }\r\n                    });\r\n                    if (responseData.PassFlag !== 6 && responseData.PassFlag !== 55) {\r\n                        const inputParam = {\r\n                            userInfo: responseData.UserInfo,\r\n                            menuDesign: responseData.MenuDesign,\r\n                            navigation: inputData.navigation,\r\n                            userRoleControlRights: responseData.UserRoleControlRights,\r\n                            userFormControlProperties: responseData.UserFormControlproperties,\r\n                            transactionValidation: responseData.TransactionValidation,\r\n                            displayName: \"\",\r\n                            userMultiRole: responseData.UserMultiRole,\r\n                            settings: responseData.Settings,\r\n                            sdmselnsettings: responseData.SDMSELNSettings,\r\n                            deputyUser: response.data.DeputyUser,\r\n                            deputyUserRole: response.data.DeputyUserRole,\r\n                            isDeputyLogin: false,\r\n                            loading: false,\r\n                            userImagePath: responseData.UserImagePath,\r\n                            //profileColor: \"#002699\",\r\n                            profileColor: responseData.UserImagePath === \"\" ? getRandomColor([240, 360], [90, 100], [0, 95], [1, 1]) : \"#ff0000\",\r\n                            idleneed: true\r\n                        }\r\n                        dispatch({\r\n                            type: DEFAULT_RETURN,\r\n                            payload: inputParam\r\n                        });\r\n\r\n                        dispatch(getListStaticDashBoard(responseData.UserInfo, 1));\r\n                        // dispatch(getHomeDashBoard(responseData.UserInfo, 0, false));\r\n                        dispatch(getListAlert(responseData.UserInfo, true));\r\n                        if (responseData.PasswordAlertDay) {\r\n                            toast.info(intl.formatMessage({\r\n                                id: \"IDS_PASSWORDEXPIRY\"\r\n                            }) + \" \" + responseData.PasswordAlertDay + \" \" + intl.formatMessage({\r\n                                id: \"IDS_DAY\"\r\n                            }))\r\n                        }\r\n                    }\r\n                } else {\r\n                    toast.warn(intl.formatMessage({\r\n                        id: returnStr\r\n                    }));\r\n                }\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                });\r\n                if (error.response.status === 500) {\r\n                    toast.error(intl.formatMessage({\r\n                        id: error.message\r\n                    }));\r\n                } else {\r\n                    toast.warn(intl.formatMessage({\r\n                        id: error.response.data\r\n                    }));\r\n                }\r\n            });\r\n    }\r\n}\r\n\r\nexport const submitChangeRole = (inputParam) => {\r\n    return (dispatch) => {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/login/getuserscreenrightsmenu\", inputParam)\r\n            .then(response => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        userInfo: response.data.UserInfo,\r\n                        menuDesign: response.data.MenuDesign,\r\n                        userRoleControlRights: response.data.UserRoleControlRights,\r\n                        userMultiRole: response.data.UserMultiRole,\r\n                        deputyUser: response.data.DeputyUser,\r\n                        deputyUserRole: response.data.DeputyUserRole,\r\n                        loading: false,\r\n                        masterData: [],\r\n                        displayName: \"\",\r\n                        navigation: \"home\",\r\n                        inputParam: {},\r\n                        openRoleBox: false\r\n                    }\r\n                });\r\n                dispatch(getListStaticDashBoard(response.data.UserInfo, 1));\r\n                dispatch(getHomeDashBoard(response.data.UserInfo, 0, false));\r\n                dispatch(getListAlert(response.data.UserInfo));\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                });\r\n                if (error.response.status === 500) {\r\n                    toast.error(intl.formatMessage({\r\n                        id: error.message\r\n                    }));\r\n                } else {\r\n                    toast.warn(intl.formatMessage({\r\n                        id: error.response.data\r\n                    }));\r\n                }\r\n            });\r\n    }\r\n}\r\n\r\nexport const updateStore = (updateInfo) => dispatch => {\r\n    if (updateInfo.data.loadEsign === true) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/timezone/getLocalTimeByZone\", {\r\n            \"userinfo\": updateInfo.data.screenData.inputParam.inputData.userinfo\r\n        })\r\n            .then(response => {\r\n                dispatch({\r\n                    type: updateInfo.typeName,\r\n                    payload: {\r\n                        serverTime: rearrangeDateFormat(updateInfo.data.screenData.inputParam.inputData.userinfo, response.data),\r\n                        ...updateInfo.data,\r\n                        masterStatus: \"\",\r\n                        errorCode: undefined,\r\n                        loading: false\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                });\r\n                if (error.response.status === 500) {\r\n                    toast.error(intl.formatMessage({\r\n                        id: error.message\r\n                    }));\r\n                } else {\r\n                    toast.warn(intl.formatMessage({\r\n                        id: error.response.data\r\n                    }));\r\n                }\r\n            });\r\n    } else {\r\n        dispatch({\r\n            type: updateInfo.typeName,\r\n            payload: {\r\n                ...updateInfo.data,\r\n                masterStatus: \"\",\r\n                errorCode: undefined\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nexport const getChangeUserRole = (userInfo) => {\r\n    return (dispatch) => {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/login/getchangerole\", {\r\n            \"userinfo\": userInfo\r\n        })\r\n            .then(response => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        ...response.data,\r\n                        loading: false\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                });\r\n                if (error.response.status === 500) {\r\n                    toast.error(intl.formatMessage({\r\n                        id: error.message\r\n                    }));\r\n                } else {\r\n                    toast.warn(intl.formatMessage({\r\n                        id: error.response.data\r\n                    }));\r\n                }\r\n            });\r\n    }\r\n}\r\n\r\nexport const getLoginDetails = () => {\r\n    return (dispatch) => {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/login/getloginInfo\", {})\r\n            .then(response => {\r\n                // let loginType = [];\r\n                // response.data.LoginType.map(type => {\r\n                //     loginType\r\n                // })\r\n                const languageMap = constructOptionList(response.data.Language || [], \"slanguagetypecode\", \"slanguagename\", false, false, true);\r\n                let defaultLanguage = languageMap.get(\"DefaultValue\") ? languageMap.get(\"DefaultValue\") : undefined;\r\n                let languageCode = defaultLanguage ? defaultLanguage.value : \"en-US\";\r\n                const loginTypeMap = constructjsonOptionList(response.data.LoginType || [], \"nlogintypecode\", \"sdisplayname\", false, false, true, undefined, 'jsondata', true, languageCode);\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loginTypes: response.data.LoginType,\r\n                        loginTypeList: loginTypeMap.get(\"OptionList\"),\r\n                        languageList: languageMap.get(\"OptionList\"),\r\n                        selectedRecord: {\r\n                            nlogintypecode: loginTypeMap.get(\"DefaultValue\") ? loginTypeMap.get(\"DefaultValue\") : \"\",\r\n                            nlanguagecode: defaultLanguage || \"\"\r\n                        },\r\n                        language: defaultLanguage.value,\r\n                        loading: false\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                });\r\n                if (error.response.status === 500) {\r\n                    toast.error(intl.formatMessage({\r\n                        id: error.message\r\n                    }));\r\n                } else {\r\n                    toast.warn(intl.formatMessage({\r\n                        id: error.response.data\r\n                    }));\r\n                }\r\n            });\r\n    }\r\n}\r\n\r\nexport const getUserSiteAndRole = (inputParam, selectedRecord) => {\r\n    return (dispatch) => {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/login/getloginvalidation\", {\r\n            ...inputParam\r\n        })\r\n            .then(response => {\r\n                const roleMap = constructOptionList(response.data.UserMultiRole || [], \"nusermultirolecode\", \"suserrolename\", false, false, true, \"ndefaultrole\");\r\n                const siteMap = constructOptionList(response.data.Site || [], \"nusersitecode\", \"ssitename\", false, false, true, \"ndefaultsite\");\r\n                let loggeInLoginTypeCode = response.data.Users.nlogintypecode;\r\n                let logintypecode = inputParam.logintype.filter(x => x.value === loggeInLoginTypeCode);\r\n                if (inputParam.logintype.length > 0 && logintypecode.length === 0) {\r\n                    logintypecode = inputParam.logintype;\r\n                    loggeInLoginTypeCode = logintypecode[0].value;\r\n                }\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loginUserRole: roleMap.get(\"OptionList\"),\r\n                        loginUserSite: siteMap.get(\"OptionList\"),\r\n                        selectedRecord: {\r\n                            ...selectedRecord,\r\n                            nusermultirolecode: roleMap.get(\"DefaultValue\") ?\r\n                                roleMap.get(\"DefaultValue\") : roleMap.get(\"OptionList\") ? roleMap.get(\"OptionList\")[0] : \"\",\r\n                            nusersitecode: siteMap.get(\"DefaultValue\") ?\r\n                                siteMap.get(\"DefaultValue\") : siteMap.get(\"OptionList\") ? siteMap.get(\"OptionList\")[0] : \"\",\r\n                            nusercode: response.data.Users.nusercode,\r\n                            nlogintypecode: logintypecode ? logintypecode[0] : \"\"\r\n                        },\r\n                        openCPModal: response.data.PassFlag === 6 ? true : false,\r\n                        passwordPolicy: response.data.PasswordPolicy,\r\n                        screenName: \"IDS_CREATEPASSWORD\",\r\n                        loading: false,\r\n                        PassFlag: response.data.PassFlag,\r\n                        createPwdRecord: {},\r\n                        userInfo: {\r\n                            nlogintypecode: loggeInLoginTypeCode\r\n                        }\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false,\r\n                        loginUserRole: [],\r\n                        loginUserSite: [],\r\n                        selectedRecord: {\r\n                            ...selectedRecord,\r\n                            nusermultirolecode: \"\",\r\n                            nusersitecode: \"\"\r\n                        }\r\n                    }\r\n                });\r\n                if (error.response.status === 500) {\r\n                    toast.error(intl.formatMessage({\r\n                        id: error.message\r\n                    }));\r\n                } else {\r\n                    toast.warn(intl.formatMessage({\r\n                        id: error.response.data\r\n                    }));\r\n                }\r\n            });\r\n    }\r\n}\r\n\r\nexport const createPassword = (inputParam) => {\r\n    return (dispatch) => {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/login/createnewpassword\", {\r\n            ...inputParam\r\n        })\r\n            .then(response => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        openCPModal: false,\r\n                        loading: false,\r\n                        createPwdRecord: {}\r\n                    }\r\n                });\r\n                toast.success(intl.formatMessage({\r\n                    id: \"IDS_PASSWORDCREATEDSUCCESSFULLY\"\r\n                }));\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                });\r\n                if (error.response.status === 500) {\r\n                    toast.error(intl.formatMessage({\r\n                        id: error.message\r\n                    }));\r\n                } else {\r\n                    toast.warn(intl.formatMessage({\r\n                        id: error.response.data\r\n                    }));\r\n                }\r\n            });\r\n    }\r\n}\r\n\r\nexport const changepassword = (inputParam) => {\r\n    return (dispatch) => {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/login/changepassword\", {\r\n            ...inputParam\r\n        })\r\n            .then(response => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        openCPModal: false,\r\n                        loading: false,\r\n                        createPwdRecord: {},\r\n                        navigation: \"login\"\r\n                    }\r\n                });\r\n                toast.success(intl.formatMessage({\r\n                    id: \"IDS_PASSWORDCHANGEDSUCCESSFULLY\"\r\n                }));\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                });\r\n                if (error.response.status === 500) {\r\n                    toast.error(intl.formatMessage({\r\n                        id: error.message\r\n                    }));\r\n                } else {\r\n                    toast.warn(intl.formatMessage({\r\n                        id: error.response.data\r\n                    }));\r\n                }\r\n            });\r\n    }\r\n}\r\n\r\nexport const getPassWordPolicy = (nuserrolecode) => {\r\n    return (dispatch) => {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/login/getPassWordPolicy\", {\r\n            nuserrolecode\r\n        })\r\n            .then(response => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        openCPModal: true,\r\n                        loading: false,\r\n                        createPwdRecord: {},\r\n                        screenName: \"IDS_CHANGEPASSWORD\",\r\n                        passwordPolicy: response.data.PasswordPolicy\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                });\r\n                if (error.response.status === 500) {\r\n                    toast.error(intl.formatMessage({\r\n                        id: error.message\r\n                    }));\r\n                } else {\r\n                    toast.warn(intl.formatMessage({\r\n                        id: error.response.data\r\n                    }));\r\n                }\r\n            });\r\n    }\r\n}\r\n\r\nexport const changeOwner = (inputData) => {\r\n    return (dispatch) => {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/login/changeOwner\", {\r\n            ...inputData\r\n        })\r\n            .then(response => {\r\n                const responseData = response.data;\r\n                const inputParam = {\r\n                    userInfo: responseData.UserInfo,\r\n                    menuDesign: responseData.MenuDesign,\r\n                    userRoleControlRights: responseData.UserRoleControlRights,\r\n                    userFormControlProperties: responseData.UserFormControlproperties,\r\n                    transactionValidation: responseData.TransactionValidation,\r\n                    displayName: \"\",\r\n                    userMultiRole: responseData.UserMultiRole,\r\n                    isDeputyLogin: true,\r\n                    // settings: responseData.Settings,\r\n                    // deputyUser: response.data.DeputyUser,\r\n                    // deputyUserRole: response.data.DeputyUserRole,\r\n                    loading: false,\r\n                    masterData: [],\r\n                    navigation: \"home\",\r\n                    inputParam: {},\r\n                    openRoleBox: false,\r\n                    userImagePath: responseData.UserImagePath,\r\n                    profileColor: responseData.UserImagePath === \"\" ? getRandomColor([240, 360], [90, 100], [0, 95], [1, 1]) : \"#ff0000\",\r\n                    idleneed: true\r\n                }\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: inputParam\r\n                });\r\n                dispatch(getListStaticDashBoard(response.data.UserInfo, 1));\r\n                dispatch(getHomeDashBoard(response.data.UserInfo, 0, false));\r\n                dispatch(getListAlert(response.data.UserInfo));\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                });\r\n                if (error.response.status === 500) {\r\n                    toast.error(intl.formatMessage({\r\n                        id: error.message\r\n                    }));\r\n                } else {\r\n                    toast.warn(intl.formatMessage({\r\n                        id: error.response.data\r\n                    }));\r\n                }\r\n            });\r\n    }\r\n}\r\n\r\nexport const logOutAuditAction = (inputData) => {\r\n    return (dispatch) => {\r\n        dispatch(initRequest(true));\r\n        rsapi.post('login/insertAuditAction', {\r\n            ...inputData,\r\n            nFlag: 2\r\n        })\r\n            .then(response => {\r\n\r\n                dispatch(navPage(\"login\"))\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                });\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            });\r\n    }\r\n}\r\n\r\nexport const elnLoginAction = (inputParam, serverUrl, uiUrl) => {\r\n    return (dispatch) => {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(serverUrl, {\r\n            ...inputParam\r\n        })\r\n            .then(response => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                });\r\n                if (response !== null && response.data.objResponse !== null) {\r\n                    if (response.data.objResponse.status) {\r\n                        if (uiUrl) {\r\n                            let user = response;\r\n                            let elnURL = uiUrl + \"#\" + user.data.username + \"$\" + user.data.password;\r\n                            window.open(elnURL, '_blank');\r\n                        } else {\r\n                            toast.info(intl.FormattedMessage({\r\n                                id: \"IDS_ELNUIURLNOTAVAILABLE\"\r\n                            }))\r\n                        }\r\n                    } else {\r\n                        toast.info(response.data.objResponse.information);\r\n                    }\r\n                    // if(!$(\"#appsdetails\").is(\":hidden\")){\r\n                    //     $('#appsdetails').addClass(\"dp-none\");\r\n                    // }\r\n                };\r\n\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                });\r\n                toast.error(error.message);\r\n            });\r\n    }\r\n}\r\n\r\nexport const sdmsLoginAction = (inputParam, serverUrl, sdmsUIUrl) => {\r\n    return (dispatch) => {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(serverUrl, {\r\n            ...inputParam\r\n        })\r\n            .then(response => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                });\r\n                if (response !== null && response.data.status) {\r\n                    if (response.data.status) {\r\n                        const sdmsURL = sdmsUIUrl + \"?un=\" + response.data.username + \"&pd=\" + response.data.password + \"&sc=\" + inputParam.sSiteCode;\r\n                        window.open(sdmsURL, '_blank');\r\n                    } else {\r\n                        toast.info(response.Message);\r\n                    }\r\n                } else {\r\n                    toast.info(intl.FormattedMessage({\r\n                        id: \"IDS_CHECKSYNCSERVICE\"\r\n                    }));\r\n                }\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                });\r\n                toast.error(error.message);\r\n            });\r\n    }\r\n}\r\n\r\n\r\nexport const getUsersiteRole = (inputParam) => {\r\n    return (dispatch) => {\r\n        dispatch(initRequest(true));\r\n        rsapi.post('login/changeSite', {\r\n            \"usersSite\": inputParam.selectedRecord.nusersitecode.item\r\n        })\r\n            .then(response => {\r\n                const roleMap = constructOptionList(response.data.UserMultiRole || [], \"nusermultirolecode\", \"suserrolename\", false, false, true, \"ndefaultrole\");\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false,\r\n                        loginUserRole: roleMap.get(\"OptionList\"),\r\n                        selectedRecord: {\r\n                            ...inputParam.selectedRecord,\r\n                            nusermultirolecode: roleMap.get(\"DefaultValue\") ?\r\n                                roleMap.get(\"DefaultValue\") : roleMap.get(\"OptionList\") ? roleMap.get(\"OptionList\")[0] : \"\"\r\n\r\n\r\n                        },\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                });\r\n                toast.error(error.message);\r\n            });\r\n    }\r\n}\r\n\r\nexport const checkPassword = (inputParam, selectedRecord) => {\r\n    return (dispatch) => {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/login/getlogintypevalidation\", {\r\n            ...inputParam\r\n        })\r\n            .then(response => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        selectedRecord: {\r\n                            ...selectedRecord,\r\n                            nusercode: response.data.Users.nusercode\r\n                        },\r\n                        userInfo: {\r\n                            nlogintypecode: inputParam.nlogintypecode\r\n                        },\r\n                        openCPModal: response.data.PassFlag === 6 ? true : false,\r\n                        passwordPolicy: response.data.PasswordPolicy,\r\n                        screenName: \"IDS_CREATEPASSWORD\",\r\n                        loading: false,\r\n                        PassFlag: response.data.PassFlag,\r\n                        createPwdRecord: {}\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                });\r\n                if (error.response.status === 500) {\r\n                    toast.error(intl.formatMessage({\r\n                        id: error.message\r\n                    }));\r\n                } else {\r\n                    toast.warn(intl.formatMessage({\r\n                        id: error.response.data\r\n                    }));\r\n                }\r\n            });\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}