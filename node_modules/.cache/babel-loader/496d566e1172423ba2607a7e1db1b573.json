{"ast":null,"code":"import rsapi from '../rsapi';\nimport { DEFAULT_RETURN } from './LoginTypes';\nimport { constructOptionList } from '../components/CommonScript';\nimport { toast } from 'react-toastify';\nimport Axios from 'axios';\nimport { initRequest } from './LoginAction'; //import { intl } from '../components/App';\n\nimport { getComboLabelValue } from \"../components/CommonScript\";\nexport function projectytpe(addsampleprocesstypeId, userInfo) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    const getprojectytpe = rsapi.post(\"sampleprocesstype/getProjectType\", {\n      \"addsampleprocesstypeId\": addsampleprocesstypeId,\n      userinfo: userInfo\n    });\n    const getperiod = rsapi.post(\"/period/getPeriodByControl\", {\n      \"ncontrolcode\": addsampleprocesstypeId,\n      \"userinfo\": userInfo\n    });\n    let urlArray = [];\n    urlArray = [getprojectytpe, getperiod];\n    dispatch(initRequest(true));\n    Axios.all(urlArray).then(response => {\n      let selectedRecord = [];\n      const constructType = constructOptionList(response[0].data || [], \"nprojectcode\", \"sprojecttypename\", undefined, undefined, false);\n      const periodconstructType = constructOptionList(response[1].data || [], \"nperiodcode\", \"speriodname\", undefined, undefined, false);\n      selectedRecord[\"processperiodtime\"] = {\n        label: response[1].data[0].speriodname,\n        value: response[1].data[0].nperiodcode\n      };\n      selectedRecord[\"graceperiodtime\"] = {\n        label: response[1].data[0].speriodname,\n        value: response[1].data[0].nperiodcode\n      };\n      const projecttypeList = constructType.get(\"OptionList\");\n      const periodList = periodconstructType.get(\"OptionList\");\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false,\n          openModal: true,\n          projecttypeList: projecttypeList,\n          periodList: periodList,\n          selectedRecord: selectedRecord,\n          screenName: \"IDS_SAMPLEPROCESSTYPE\",\n          operation: \"create\"\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getSampleType(sampletypevalue, sampletypename, userInfo) {\n  return function (dispatch) {\n    const sampletypeList = rsapi.post(\"sampleprocesstype/getSampleType\", {\n      \"sampletypevalue\": sampletypevalue,\n      \"sampletypename\": sampletypename,\n      userinfo: userInfo\n    });\n    const collectiontubeList = rsapi.post(\"sampleprocesstype/getCollectionTubeType\", {\n      \"sampletypevalue\": sampletypevalue,\n      \"sampletypename\": sampletypename,\n      userinfo: userInfo\n    });\n    const processtypeList = rsapi.post(\"sampleprocesstype/getProcessType\", {\n      \"sampletypevalue\": sampletypevalue,\n      \"sampletypename\": sampletypename,\n      userinfo: userInfo\n    });\n    let urlArray = [];\n    urlArray = [sampletypeList, collectiontubeList, processtypeList];\n    dispatch(initRequest(true));\n    Axios.all(urlArray).then(response => {\n      const sampletypeListconstruct = constructOptionList(response[0].data || [], \"nproductsamplecode\", \"sproductname\", undefined, undefined, false);\n      const collectiontubeListconstruct = constructOptionList(response[1].data || [], \"ncollectiontubecode\", \"stubename\", undefined, undefined, false);\n      const processtypeListconstruct = constructOptionList(response[2].data || [], \"nprocesscode\", \"sprocesstypename\", undefined, undefined, false);\n      const sampletypeListconstructList = sampletypeListconstruct.get(\"OptionList\");\n      const collectiontubeListconstructList = collectiontubeListconstruct.get(\"OptionList\");\n      const processtypeListconstructList = processtypeListconstruct.get(\"OptionList\");\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false,\n          openModal: true,\n          sampletypeList: sampletypeListconstructList,\n          collectiontubeList: collectiontubeListconstructList,\n          processtypeList: processtypeListconstructList,\n          screenName: \"IDS_SAMPLEPROCESSTYPE\"\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n} // export function getCollectionTubeType(sampletypevalue, sampletypename, userInfo) {\n//     return function (dispatch) {\n//         dispatch(initRequest(true));\n//         return rsapi.post(\"sampleprocesstype/getCollectionTubeType\", { \"sampletypevalue\": sampletypevalue, \"sampletypename\": sampletypename, userinfo: userInfo })\n//             .then(response => {\n//                 const constructType = constructOptionList(response.data || [], \"ncollectiontubecode\",\n//                     \"stubename\", undefined, undefined, false);\n//                 const collectiontubeList = constructType.get(\"OptionList\");\n//                 dispatch({\n//                     type: DEFAULT_RETURN, payload: {\n//                         loading: false, openModal: true,\n//                         collectiontubeList: collectiontubeList\n//                     }\n//                 });\n//             })\n//             .catch(error => {\n//                 dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\n//                 if (error.response.status === 500) {\n//                     toast.error(error.message);\n//                 }\n//                 else {\n//                     toast.warn(error.response.data);\n//                 }\n//             })\n//     }\n// }\n// export function getProcessType(sampletypevalue, sampletypename, userInfo) {\n//     return function (dispatch) {\n//         dispatch(initRequest(true));\n//         return rsapi.post(\"sampleprocesstype/getProcessType\", { \"sampletypevalue\": sampletypevalue, \"sampletypename\": sampletypename, userinfo: userInfo })\n//             .then(response => {\n//                 const constructType = constructOptionList(response.data || [], \"nprocesscode\",\n//                     \"sprocesstypename\", undefined, undefined, false);\n//                 const processtypeList = constructType.get(\"OptionList\");\n//                 dispatch({\n//                     type: DEFAULT_RETURN, payload: {\n//                         loading: false, openModal: true,\n//                         processtypeList: processtypeList\n//                     }\n//                 });\n//             })\n//             .catch(error => {\n//                 dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\n//                 if (error.response.status === 500) {\n//                     toast.error(error.message);\n//                 }\n//                 else {\n//                     toast.warn(error.response.data);\n//                 }\n//             })\n//     }\n// }\n\nexport function getActiveSampleProcessTypeById(editParam, userInfo) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    const ncontrolCode = editParam.ncontrolCode;\n    const sampletypevalue = editParam.editRow.nprojectcode;\n    const sampletypename = editParam.editRow.sprojecttypename;\n    const userInfoPass = editParam.userInfo;\n    const projectytpe = rsapi.post(\"sampleprocesstype/getProjectType\", {\n      \"editSampleProcessType\": ncontrolCode,\n      userinfo: userInfoPass\n    });\n    const sampletypeList = rsapi.post(\"sampleprocesstype/getSampleType\", {\n      \"sampletypevalue\": sampletypevalue,\n      \"sampletypename\": sampletypename,\n      userinfo: userInfoPass\n    });\n    const collectiontubeList = rsapi.post(\"sampleprocesstype/getCollectionTubeType\", {\n      \"sampletypevalue\": sampletypevalue,\n      \"sampletypename\": sampletypename,\n      userinfo: userInfoPass\n    });\n    const processtypeList = rsapi.post(\"sampleprocesstype/getProcessType\", {\n      \"sampletypevalue\": sampletypevalue,\n      \"sampletypename\": sampletypename,\n      userinfo: userInfoPass\n    });\n    const getActiveSampleProcessTypeById = rsapi.post(\"sampleprocesstype/getActiveSampleProcessTypeById\", {\n      nsampleprocesstypecode: editParam.editRow.nsampleprocesstypecode,\n      userinfo: userInfoPass\n    });\n    let urlArray = [];\n    urlArray = [getActiveSampleProcessTypeById, projectytpe, sampletypeList, collectiontubeList, processtypeList];\n    dispatch(initRequest(true));\n    Axios.all(urlArray).then(response => {\n      const selectedRecord = response[0].data;\n      const projectytpeconstruct = constructOptionList(response[1].data || [], \"nprojectcode\", \"sprojecttypename\", undefined, undefined, false);\n      const sampletypeListconstruct = constructOptionList(response[2].data || [], \"nproductsamplecode\", \"sproductname\", undefined, undefined, false);\n      const collectiontubeListconstruct = constructOptionList(response[3].data || [], \"ncollectiontubecode\", \"stubename\", undefined, undefined, false);\n      const processtypeListconstruct = constructOptionList(response[4].data || [], \"nprocesscode\", \"sprocesstypename\", undefined, undefined, false);\n      selectedRecord[\"sprojecttypename\"] = getComboLabelValue(response[0].data, response[1].data, \"nprojectcode\", \"sprojecttypename\");\n      selectedRecord[\"sproductname\"] = getComboLabelValue(response[0].data, response[2].data, \"nproductsamplecode\", \"sproductname\");\n      selectedRecord[\"stubename\"] = getComboLabelValue(response[0].data, response[3].data, \"ncollectiontubecode\", \"stubename\");\n      selectedRecord[\"sprocesstypename\"] = getComboLabelValue(response[0].data, response[4].data, \"nprocesscode\", \"sprocesstypename\");\n      selectedRecord[\"processtime\"] = response[0].data.nprocesstime;\n      selectedRecord[\"gracetime\"] = response[0].data.ngracetime;\n      selectedRecord[\"executionorder\"] = response[0].data.nexecutionorder;\n      selectedRecord[\"sdescription\"] = response[0].data.sdescription;\n      selectedRecord[\"processperiodtime\"] = {\n        label: response[0].data.ngracetimeresult,\n        value: response[0].data.nperiodcode\n      };\n      selectedRecord[\"graceperiodtime\"] = {\n        label: response[0].data.ngracetimeresult,\n        value: response[0].data.nperiodcode\n      }; //response[0].data[0].ngracetimeresult;\n\n      const projectytpeconstructList = projectytpeconstruct.get(\"OptionList\");\n      const sampletypeListconstructList = sampletypeListconstruct.get(\"OptionList\");\n      const collectiontubeListconstructList = collectiontubeListconstruct.get(\"OptionList\");\n      const processtypeListconstructList = processtypeListconstruct.get(\"OptionList\");\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false,\n          openModal: true,\n          projecttypeList: projectytpeconstructList,\n          sampletypeList: sampletypeListconstructList,\n          collectiontubeList: collectiontubeListconstructList,\n          processtypeList: processtypeListconstructList,\n          selectedRecord: selectedRecord,\n          selectedId: editParam.editRow.nsampleprocesstypecode,\n          ncontrolCode: editParam.ncontrolCode,\n          screenName: \"IDS_SAMPLEPROCESSTYPE\",\n          operation: \"update\"\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}","map":{"version":3,"sources":["E:/WorkingFolder/React_Postgres/ALPD/branches/SOURCE-513-PROD/QuaLISWeb/src/actions/SampleProcessTypeAction.js"],"names":["rsapi","DEFAULT_RETURN","constructOptionList","toast","Axios","initRequest","getComboLabelValue","projectytpe","addsampleprocesstypeId","userInfo","dispatch","getprojectytpe","post","userinfo","getperiod","urlArray","all","then","response","selectedRecord","constructType","data","undefined","periodconstructType","label","speriodname","value","nperiodcode","projecttypeList","get","periodList","type","payload","loading","openModal","screenName","operation","catch","error","status","message","warn","getSampleType","sampletypevalue","sampletypename","sampletypeList","collectiontubeList","processtypeList","sampletypeListconstruct","collectiontubeListconstruct","processtypeListconstruct","sampletypeListconstructList","collectiontubeListconstructList","processtypeListconstructList","getActiveSampleProcessTypeById","editParam","ncontrolCode","editRow","nprojectcode","sprojecttypename","userInfoPass","nsampleprocesstypecode","projectytpeconstruct","nprocesstime","ngracetime","nexecutionorder","sdescription","ngracetimeresult","projectytpeconstructList","selectedId"],"mappings":"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","sourcesContent":["import rsapi from '../rsapi';\r\nimport { DEFAULT_RETURN } from './LoginTypes';\r\nimport { constructOptionList } from '../components/CommonScript'\r\nimport { toast } from 'react-toastify';\r\nimport Axios from 'axios';\r\nimport { initRequest } from './LoginAction';\r\n//import { intl } from '../components/App';\r\nimport {  getComboLabelValue } from \"../components/CommonScript\";\r\n\r\nexport function projectytpe(addsampleprocesstypeId,userInfo) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n\r\n        const getprojectytpe= rsapi.post(\"sampleprocesstype/getProjectType\",{\"addsampleprocesstypeId\":addsampleprocesstypeId,userinfo: userInfo});\r\n\r\n        const getperiod = rsapi.post(\"/period/getPeriodByControl\", {\"ncontrolcode\": addsampleprocesstypeId,\"userinfo\": userInfo});\r\n\r\n        let urlArray = [];\r\n        urlArray = [getprojectytpe,getperiod];\r\n\r\n        dispatch(initRequest(true));\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                let selectedRecord=[];\r\n\r\n                const constructType = constructOptionList(response[0].data || [], \"nprojectcode\",\r\n                \"sprojecttypename\", undefined, undefined, false);\r\n\r\n\r\n                const periodconstructType = constructOptionList(response[1].data || [], \"nperiodcode\",\r\n                \"speriodname\", undefined, undefined, false);\r\n\r\n                selectedRecord[\"processperiodtime\"]={label:response[1].data[0].speriodname,value:response[1].data[0].nperiodcode};\r\n\r\n                selectedRecord[\"graceperiodtime\"]={label:response[1].data[0].speriodname,value:response[1].data[0].nperiodcode};\r\n\r\n                 const projecttypeList = constructType.get(\"OptionList\");\r\n                const periodList=periodconstructType.get(\"OptionList\");\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        loading: false, openModal:true,\r\n                        projecttypeList: projecttypeList,\r\n                        periodList:periodList,\r\n                        selectedRecord:selectedRecord,\r\n                        screenName: \"IDS_SAMPLEPROCESSTYPE\",\r\n                        operation: \"create\"\r\n\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n\r\n            })\r\n    }  \r\n}\r\n\r\n\r\nexport function getSampleType(sampletypevalue, sampletypename, userInfo) {\r\n    return function (dispatch) {\r\n        \r\n        const sampletypeList = rsapi.post(\"sampleprocesstype/getSampleType\", { \"sampletypevalue\": sampletypevalue, \"sampletypename\": sampletypename, userinfo: userInfo });\r\n\r\n        const collectiontubeList = rsapi.post(\"sampleprocesstype/getCollectionTubeType\", { \"sampletypevalue\": sampletypevalue, \"sampletypename\": sampletypename, userinfo: userInfo });\r\n\r\n        const processtypeList = rsapi.post(\"sampleprocesstype/getProcessType\", { \"sampletypevalue\": sampletypevalue, \"sampletypename\": sampletypename, userinfo: userInfo });\r\n\r\n\r\n        let urlArray = [];\r\n        urlArray = [sampletypeList, collectiontubeList, processtypeList];\r\n\r\n        dispatch(initRequest(true));\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n\r\n                const sampletypeListconstruct = constructOptionList(response[0].data || [], \"nproductsamplecode\",\r\n                    \"sproductname\", undefined, undefined, false);\r\n\r\n                const collectiontubeListconstruct = constructOptionList(response[1].data || [], \"ncollectiontubecode\",\r\n                    \"stubename\", undefined, undefined, false);\r\n\r\n                const processtypeListconstruct = constructOptionList(response[2].data || [], \"nprocesscode\",\r\n                    \"sprocesstypename\", undefined, undefined, false);\r\n\r\n                const sampletypeListconstructList = sampletypeListconstruct.get(\"OptionList\");\r\n                const collectiontubeListconstructList = collectiontubeListconstruct.get(\"OptionList\");\r\n                const processtypeListconstructList = processtypeListconstruct.get(\"OptionList\");\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        loading: false, openModal: true,\r\n                        sampletypeList: sampletypeListconstructList,\r\n                        collectiontubeList: collectiontubeListconstructList,\r\n                        processtypeList: processtypeListconstructList,\r\n                        screenName: \"IDS_SAMPLEPROCESSTYPE\"\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n\r\n            })\r\n    }\r\n}\r\n\r\n\r\n// export function getCollectionTubeType(sampletypevalue, sampletypename, userInfo) {\r\n//     return function (dispatch) {\r\n//         dispatch(initRequest(true));\r\n//         return rsapi.post(\"sampleprocesstype/getCollectionTubeType\", { \"sampletypevalue\": sampletypevalue, \"sampletypename\": sampletypename, userinfo: userInfo })\r\n//             .then(response => {\r\n//                 const constructType = constructOptionList(response.data || [], \"ncollectiontubecode\",\r\n//                     \"stubename\", undefined, undefined, false);\r\n\r\n//                 const collectiontubeList = constructType.get(\"OptionList\");\r\n//                 dispatch({\r\n//                     type: DEFAULT_RETURN, payload: {\r\n//                         loading: false, openModal: true,\r\n//                         collectiontubeList: collectiontubeList\r\n\r\n//                     }\r\n//                 });\r\n//             })\r\n//             .catch(error => {\r\n//                 dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n//                 if (error.response.status === 500) {\r\n//                     toast.error(error.message);\r\n//                 }\r\n//                 else {\r\n//                     toast.warn(error.response.data);\r\n//                 }\r\n\r\n//             })\r\n//     }\r\n// }\r\n\r\n// export function getProcessType(sampletypevalue, sampletypename, userInfo) {\r\n//     return function (dispatch) {\r\n//         dispatch(initRequest(true));\r\n//         return rsapi.post(\"sampleprocesstype/getProcessType\", { \"sampletypevalue\": sampletypevalue, \"sampletypename\": sampletypename, userinfo: userInfo })\r\n//             .then(response => {\r\n//                 const constructType = constructOptionList(response.data || [], \"nprocesscode\",\r\n//                     \"sprocesstypename\", undefined, undefined, false);\r\n\r\n//                 const processtypeList = constructType.get(\"OptionList\");\r\n//                 dispatch({\r\n//                     type: DEFAULT_RETURN, payload: {\r\n//                         loading: false, openModal: true,\r\n//                         processtypeList: processtypeList\r\n\r\n//                     }\r\n//                 });\r\n//             })\r\n//             .catch(error => {\r\n//                 dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n//                 if (error.response.status === 500) {\r\n//                     toast.error(error.message);\r\n//                 }\r\n//                 else {\r\n//                     toast.warn(error.response.data);\r\n//                 }\r\n\r\n//             })\r\n//     }\r\n// }\r\n\r\n\r\n\r\nexport function getActiveSampleProcessTypeById(editParam, userInfo) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        const ncontrolCode = editParam.ncontrolCode;\r\n\r\n        const sampletypevalue = editParam.editRow.nprojectcode;\r\n\r\n        const sampletypename = editParam.editRow.sprojecttypename;\r\n\r\n        const userInfoPass = editParam.userInfo;\r\n\r\n        const projectytpe = rsapi.post(\"sampleprocesstype/getProjectType\", { \"editSampleProcessType\": ncontrolCode, userinfo: userInfoPass });\r\n\r\n        const sampletypeList = rsapi.post(\"sampleprocesstype/getSampleType\", { \"sampletypevalue\": sampletypevalue, \"sampletypename\": sampletypename, userinfo: userInfoPass });\r\n\r\n        const collectiontubeList = rsapi.post(\"sampleprocesstype/getCollectionTubeType\", { \"sampletypevalue\": sampletypevalue, \"sampletypename\": sampletypename, userinfo: userInfoPass });\r\n\r\n        const processtypeList = rsapi.post(\"sampleprocesstype/getProcessType\", { \"sampletypevalue\": sampletypevalue, \"sampletypename\": sampletypename, userinfo: userInfoPass });\r\n\r\n        const getActiveSampleProcessTypeById = rsapi.post(\"sampleprocesstype/getActiveSampleProcessTypeById\",\r\n            { nsampleprocesstypecode: editParam.editRow.nsampleprocesstypecode, userinfo: userInfoPass });\r\n\r\n        let urlArray = [];\r\n        urlArray = [getActiveSampleProcessTypeById, projectytpe, sampletypeList, collectiontubeList, processtypeList];\r\n\r\n        dispatch(initRequest(true));\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n\r\n                const selectedRecord = response[0].data;\r\n\r\n                const projectytpeconstruct = constructOptionList(response[1].data || [], \"nprojectcode\",\r\n                    \"sprojecttypename\", undefined, undefined, false);\r\n\r\n                const sampletypeListconstruct = constructOptionList(response[2].data || [], \"nproductsamplecode\",\r\n                    \"sproductname\", undefined, undefined, false);\r\n\r\n                const collectiontubeListconstruct = constructOptionList(response[3].data || [], \"ncollectiontubecode\",\r\n                    \"stubename\", undefined, undefined, false);\r\n\r\n                const processtypeListconstruct = constructOptionList(response[4].data || [], \"nprocesscode\",\r\n                    \"sprocesstypename\", undefined, undefined, false);\r\n\r\n                selectedRecord[\"sprojecttypename\"] = getComboLabelValue(response[0].data, response[1].data,\r\n                    \"nprojectcode\", \"sprojecttypename\");\r\n\r\n                selectedRecord[\"sproductname\"] = getComboLabelValue(response[0].data, response[2].data,\r\n                    \"nproductsamplecode\", \"sproductname\");\r\n\r\n                selectedRecord[\"stubename\"] = getComboLabelValue(response[0].data, response[3].data,\r\n                    \"ncollectiontubecode\", \"stubename\");\r\n\r\n                selectedRecord[\"sprocesstypename\"] = getComboLabelValue(response[0].data, response[4].data,\r\n                    \"nprocesscode\", \"sprocesstypename\");\r\n\r\n                selectedRecord[\"processtime\"] = response[0].data.nprocesstime;\r\n\r\n                selectedRecord[\"gracetime\"] = response[0].data.ngracetime;\r\n\r\n                selectedRecord[\"executionorder\"] = response[0].data.nexecutionorder;\r\n\r\n                selectedRecord[\"sdescription\"] = response[0].data.sdescription;\r\n\r\n                selectedRecord[\"processperiodtime\"]={label:response[0].data.ngracetimeresult,value:response[0].data.nperiodcode};\r\n\r\n                selectedRecord[\"graceperiodtime\"]={label:response[0].data.ngracetimeresult,value:response[0].data.nperiodcode};\r\n                //response[0].data[0].ngracetimeresult;\r\n\r\n\r\n                const projectytpeconstructList = projectytpeconstruct.get(\"OptionList\");\r\n                const sampletypeListconstructList = sampletypeListconstruct.get(\"OptionList\");\r\n                const collectiontubeListconstructList = collectiontubeListconstruct.get(\"OptionList\");\r\n                const processtypeListconstructList = processtypeListconstruct.get(\"OptionList\");\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        loading: false, openModal: true,\r\n                        projecttypeList: projectytpeconstructList,\r\n                        sampletypeList: sampletypeListconstructList,\r\n                        collectiontubeList: collectiontubeListconstructList,\r\n                        processtypeList: processtypeListconstructList,\r\n                        selectedRecord: selectedRecord,\r\n                        selectedId:editParam.editRow.nsampleprocesstypecode,\r\n                        ncontrolCode: editParam.ncontrolCode,\r\n                        screenName: \"IDS_SAMPLEPROCESSTYPE\",\r\n                        operation: \"update\"\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n\r\n            })\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}