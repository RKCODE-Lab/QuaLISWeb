{"ast":null,"code":"import rsapi from '../rsapi';\nimport { DEFAULT_RETURN } from './LoginTypes';\nimport { toast } from 'react-toastify';\nimport Axios from 'axios';\nimport { initRequest } from './LoginAction';\nimport { transactionStatus } from '../components/Enumeration';\nimport { constructOptionList } from '../components/CommonScript';\nexport function openFTPConfigModal(userInfo, ncontrolcode) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    const uiArray = [rsapi.post(\"site/getSiteForFTP\", {\n      \"userinfo\": userInfo\n    })];\n    uiArray.push(rsapi.post(\"ftpconfig/getFTPType\", {\n      \"userinfo\": userInfo\n    }));\n    Axios.all(uiArray).then(response => {\n      const selectedRecord = {}; //const siteList = response[0].data[\"SiteList\"] || [];\n\n      const siteListMap = constructOptionList(response[0].data.SiteList, 'nsitecode', 'ssitename', undefined, undefined, undefined, 'ndefaultstatus') || [];\n      const ftpTypeListMap = constructOptionList(response[1].data, 'nftptypecode', 'sftptypename', undefined, undefined, undefined, 'ndefaultstatus') || [];\n      const ftpTypeList = ftpTypeListMap.get(\"OptionList\");\n      const defaultftpTypeList = ftpTypeListMap.get(\"DefaultValue\");\n      const siteList = siteListMap.get(\"OptionList\"); // const defaultsiteList =siteListMap.get(\"DefaultValue\");\n\n      selectedRecord['nftptypecode'] = defaultftpTypeList; //selectedRecord['nsitecode']= defaultsiteList\n      // selectedRecord['nsitecode']=siteList.length>0?\n      //                             siteList[0].ndefaultstatus===transactionStatus.YES?\n      //                             siteList[0].nsitecode\n      //                             :-1:-1\n\n      selectedRecord['siteValue'] = siteList.length > 0 ? siteList[0].ndefaultstatus === transactionStatus.YES ? [{\n        value: siteList[0].nsitecode,\n        label: siteList[0].ssitename,\n        item: siteList[0]\n      }] : [] : [];\n      selectedRecord[\"sphysicalpath\"] = response[0].data[\"CheckSumDefaultPath\"];\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          openModal: true,\n          operation: \"create\",\n          siteOptions: siteList,\n          ftpTypeList,\n          checkSumDefaultPath: response[0].data[\"CheckSumDefaultPath\"],\n          selectedRecord,\n          ncontrolcode,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\n;\nexport function fetchFTPConfigByID(editParam) {\n  return function (dispatch) {\n    const url1 = rsapi.post(\"site/getSiteForFTP\", {\n      \"userinfo\": editParam.userInfo\n    });\n    const url2 = rsapi.post(\"ftpconfig/getActiveFTPConfigById\", {\n      [editParam.primaryKeyField]: editParam.primaryKeyValue,\n      \"userinfo\": editParam.userInfo\n    });\n    const url3 = rsapi.post(\"ftpconfig/getFTPType\", {\n      \"userinfo\": editParam.userInfo\n    });\n    dispatch(initRequest(true));\n    Axios.all([url1, url2, url3]).then(response => {\n      let selectedId = editParam.primaryKeyValue;\n      let selectedRecord = response[1].data; // const siteListMap = constructOptionList(response[0].data.SiteList,'nsitecode','ssitename',undefined, undefined, undefined,\n      // false) || [];\n      // const siteList = siteListMap.get(\"OptionList\");\n\n      selectedRecord['nsitecode'] = {\n        value: response[1].data.nsitecode,\n        label: response[1].data.ssitename\n      };\n      selectedRecord['nftptypecode'] = {\n        value: response[1].data.nftptypecode,\n        label: response[1].data.sftptypename\n      };\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          openModal: true,\n          selectedRecord,\n          ftpTypeList: constructOptionList(response[2].data, 'nftptypecode', 'sftptypename').get(\"OptionList\"),\n          operation: editParam.operation,\n          screenName: editParam.screenName,\n          //siteOptions:response[0].data,\n          siteOptions: constructOptionList(response[0].data.SiteList, 'nsitecode', 'ssitename').get(\"OptionList\"),\n          //:siteList,\n          ncontrolcode: editParam.ncontrolCode,\n          inputparam: editParam.inputparam,\n          loading: false,\n          selectedId\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/actions/FTPConfigAction.js"],"names":["rsapi","DEFAULT_RETURN","toast","Axios","initRequest","transactionStatus","constructOptionList","openFTPConfigModal","userInfo","ncontrolcode","dispatch","uiArray","post","push","all","then","response","selectedRecord","siteListMap","data","SiteList","undefined","ftpTypeListMap","ftpTypeList","get","defaultftpTypeList","siteList","length","ndefaultstatus","YES","value","nsitecode","label","ssitename","item","type","payload","openModal","operation","siteOptions","checkSumDefaultPath","loading","catch","error","status","message","warn","fetchFTPConfigByID","editParam","url1","url2","primaryKeyField","primaryKeyValue","url3","selectedId","nftptypecode","sftptypename","screenName","ncontrolCode","inputparam"],"mappings":"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","sourcesContent":["import rsapi from '../rsapi';\r\nimport {DEFAULT_RETURN} from './LoginTypes';\r\nimport { toast } from 'react-toastify';\r\nimport Axios from 'axios'\r\nimport { initRequest } from './LoginAction';\r\nimport { transactionStatus } from '../components/Enumeration';\r\nimport { constructOptionList } from '../components/CommonScript';\r\n\r\nexport function openFTPConfigModal  (userInfo,ncontrolcode)  {\r\n\r\n    return function(dispatch){\r\n    dispatch(initRequest(true));\r\n   const uiArray=[rsapi.post(\"site/getSiteForFTP\",{\"userinfo\": userInfo})]\r\n   uiArray.push(rsapi.post(\"ftpconfig/getFTPType\",{\"userinfo\": userInfo}))\r\n   Axios.all(uiArray).then(response=> { \r\n        const selectedRecord={};\r\n        //const siteList = response[0].data[\"SiteList\"] || [];\r\n        const siteListMap = constructOptionList(response[0].data.SiteList,'nsitecode','ssitename',undefined, undefined, undefined,\r\n        'ndefaultstatus') || [];\r\n        const ftpTypeListMap =constructOptionList(response[1].data,'nftptypecode','sftptypename',undefined, undefined, undefined,\r\n        'ndefaultstatus') || [];\r\n        const ftpTypeList =ftpTypeListMap.get(\"OptionList\");\r\n        const defaultftpTypeList =ftpTypeListMap.get(\"DefaultValue\");\r\n\r\n        const siteList = siteListMap.get(\"OptionList\");\r\n       // const defaultsiteList =siteListMap.get(\"DefaultValue\");\r\n      \r\n        selectedRecord['nftptypecode']=defaultftpTypeList\r\n\r\n        //selectedRecord['nsitecode']= defaultsiteList\r\n        \r\n        // selectedRecord['nsitecode']=siteList.length>0?\r\n        //                             siteList[0].ndefaultstatus===transactionStatus.YES?\r\n        //                             siteList[0].nsitecode\r\n        //                             :-1:-1\r\n        selectedRecord['siteValue']=siteList.length>0? siteList[0].ndefaultstatus===transactionStatus.YES?  \r\n                                    [{value:siteList[0].nsitecode,label:siteList[0].ssitename,item:siteList[0]}]\r\n                                    :[]:[]\r\n        selectedRecord[\"sphysicalpath\"]= response[0].data[\"CheckSumDefaultPath\"];\r\n        dispatch({\r\n            type: DEFAULT_RETURN, payload:{\r\n                openModal:true,\r\n                operation:\"create\",\r\n                siteOptions:siteList,\r\n                ftpTypeList,\r\n                checkSumDefaultPath: response[0].data[\"CheckSumDefaultPath\"],\r\n                selectedRecord,ncontrolcode    \r\n                ,loading:false           \r\n                }\r\n            }) \r\n    })\r\n    .catch(error => {\r\n        dispatch({type: DEFAULT_RETURN, payload: {loading:false}})\r\n        if (error.response.status === 500){\r\n            toast.error(error.message);\r\n        } \r\n        else{               \r\n            toast.warn(error.response.data);\r\n        }         \r\n    })\r\n}\r\n};\r\n\r\nexport function fetchFTPConfigByID(editParam){\r\n\r\n    return function(dispatch){\r\n    const url1=rsapi.post(\"site/getSiteForFTP\",{\"userinfo\": editParam.userInfo})\r\n    const url2=rsapi.post(\"ftpconfig/getActiveFTPConfigById\",\r\n            { [editParam.primaryKeyField] :editParam.primaryKeyValue,\"userinfo\":editParam.userInfo} )\r\n     const url3=rsapi.post(\"ftpconfig/getFTPType\",{\"userinfo\": editParam.userInfo})\r\n    dispatch(initRequest(true));\r\n    Axios.all([url1,url2,url3])\r\n    .then(response=> { \r\n        let selectedId=editParam.primaryKeyValue\r\n        let selectedRecord=response[1].data\r\n        // const siteListMap = constructOptionList(response[0].data.SiteList,'nsitecode','ssitename',undefined, undefined, undefined,\r\n        // false) || [];\r\n        // const siteList = siteListMap.get(\"OptionList\");\r\n        selectedRecord['nsitecode']={value:response[1].data.nsitecode,label:response[1].data.ssitename}\r\n        selectedRecord['nftptypecode']={value:response[1].data.nftptypecode,label:response[1].data.sftptypename}\r\n        \r\n        dispatch({\r\n            type: DEFAULT_RETURN, payload:{\r\n            openModal:true, \r\n            selectedRecord ,\r\n            ftpTypeList:constructOptionList(response[2].data,'nftptypecode','sftptypename').get(\"OptionList\"),\r\n            operation:editParam.operation,\r\n            screenName:editParam.screenName,\r\n            //siteOptions:response[0].data,\r\n            siteOptions:constructOptionList(response[0].data.SiteList,'nsitecode','ssitename').get(\"OptionList\"),//:siteList,\r\n            ncontrolcode:editParam.ncontrolCode,\r\n            inputparam:editParam.inputparam,\r\n            loading:false,selectedId\r\n        }}) \r\n    })\r\n    .catch(error => {\r\n        dispatch({type: DEFAULT_RETURN, payload: {loading:false}})\r\n        if (error.response.status === 500){\r\n            toast.error(error.message);\r\n        } \r\n        else{               \r\n            toast.warn(error.response.data);\r\n        }         \r\n    })\r\n}\r\n}"]},"metadata":{},"sourceType":"module"}