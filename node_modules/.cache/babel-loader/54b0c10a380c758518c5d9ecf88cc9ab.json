{"ast":null,"code":"var _jsxFileName = \"D:\\\\LIMSWFH\\\\LIMSPOSTGRESQL\\\\QuaLISWeb\\\\src\\\\pages\\\\basemaster\\\\SampleStorageLocation.jsx\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { injectIntl, FormattedMessage } from 'react-intl';\nimport { Row, Col, Card, Nav, FormGroup, FormLabel, Form, Button } from 'react-bootstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport PerfectScrollbar from 'react-perfect-scrollbar';\nimport { faTrashAlt, faCopy, faPencilAlt, faSync, faPlus, faThumbsUp } from '@fortawesome/free-solid-svg-icons';\nimport { toast } from 'react-toastify';\nimport ListMaster from '../../components/list-master/list-master.component';\nimport { constructOptionList, getControlMap, showEsign } from '../../components/CommonScript';\nimport { ReadOnlyText, ContentPanel } from '../../components/App.styles';\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\nimport { callService, crudMaster, validateEsignCredential, updateStore, getSelectedSampleStorageLocation, openPropertyModal, editSampleStorageLocation } from '../../actions';\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\nimport { ListWrapper } from '../../components/client-group.styles';\nimport { ProductList } from '../product/product.styled';\nimport ReactTooltip from 'react-tooltip';\nimport { uuid } from \"uuidv4\";\nimport TreeEditable from \"../../components/form-tree-editable/TreeEditable\";\nimport TreeViewEditable from \"../../components/form-tree-editable/form-tree-editable.component\";\nimport { mapTree, removeItems } from \"@progress/kendo-react-treelist\";\nimport ConfirmMessage from '../../components/confirm-alert/confirm-message.component';\nimport AddTreeview from './AddTreeview';\nimport AddTreeProperties from './AddTreeProperties';\nimport { Splitter } from '@progress/kendo-react-layout';\nimport TransactionListMaster from '../../components/TransactionListMaster';\nimport BreadcrumbComponent from '../../components/Breadcrumb.Component';\nimport SplitterLayout from 'react-splitter-layout';\n\nclass SampleStorageLocation extends Component {\n  constructor(_props) {\n    super(_props);\n\n    this.onChange = event => {\n      this.setState({\n        panes: event.newState\n      });\n    };\n\n    this.addChildNode = (e, clickedItem) => {\n      let newData = mapTree(this.state.treeData, \"items\", item => {\n        if (item.id === clickedItem.id) {\n          item.items = item.items || [];\n          item.items.push({\n            id: uuid(),\n            text: uuid(),\n            expanded: true,\n            editable: false,\n            locationlastnode: false,\n            containerfirstnode: false,\n            containerlastnode: false\n          });\n        }\n\n        return item;\n      });\n      this.setState({\n        treeData: newData\n      });\n    };\n\n    this.equalNode = (e, clickedItem) => {\n      let parentItem = {};\n      let parentFound = false;\n      let newData = [...this.state.treeData];\n      mapTree(this.state.treeData, \"items\", item => {\n        if (item.items) {\n          if (parentFound) {\n            parentItem = item;\n            parentFound = false;\n          }\n        }\n\n        if (item.id === clickedItem.id) {\n          parentFound = true;\n        }\n\n        return item;\n      });\n\n      if (parentItem.text === undefined) {\n        newData.push({\n          id: uuid(),\n          text: uuid(),\n          expanded: true,\n          editable: false,\n          locationlastnode: false,\n          containerfirstnode: false,\n          containerlastnode: false\n        });\n        this.setState({\n          treeData: newData\n        });\n      } else {\n        newData = mapTree(this.state.treeData, \"items\", item => {\n          if (item.id === parentItem.id) {\n            item.items.push({\n              id: uuid(),\n              text: uuid(),\n              expanded: true,\n              editable: false,\n              locationlastnode: false,\n              containerfirstnode: false,\n              containerlastnode: false\n            });\n          }\n\n          return item;\n        });\n        this.setState({\n          treeData: newData\n        });\n      }\n    };\n\n    this.deleteNode = clickedItem => {\n      const newData = removeItems(this.state.treeData, \"items\", item => {\n        return item.id === clickedItem.id;\n      });\n      this.setState({\n        treeData: newData\n      });\n    };\n\n    this.editRecord = (e, clickedItem) => {\n      this.setState({\n        toggleAction: !this.state.toggleAction\n      });\n    };\n\n    this.openModal = () => {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          openModal: true,\n          selectedRecord: {},\n          loadTreeProperties: false,\n          treeData: [{\n            text: \"root\",\n            expanded: true,\n            editable: true,\n            root: true,\n            id: uuid()\n          }],\n          operation: \"create\"\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.closeModal = () => {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          openModal: false,\n          selectedRecord: {}\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onInputChange = event => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (event.target.type === \"checkbox\") {\n        selectedRecord[event.target.name] = event.target.checked;\n      } else {\n        selectedRecord[event.target.name] = event.target.value;\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.itemRender = props => {\n      if (this.state.toggleAction) {\n        return /*#__PURE__*/React.createElement(React.Fragment, null, props.item.editable ? /*#__PURE__*/React.createElement(Form.Group, {\n          className: \"k-editable-text-wrap\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 220,\n            columnNumber: 25\n          }\n        }, /*#__PURE__*/React.createElement(Form.Control, {\n          id: \"nodename\",\n          name: \"nodename\",\n          type: \"text\",\n          onKeyDown: e => e.stopPropagation(),\n          value: props.item.text,\n          autoFocus: true,\n          autoComplete: \"off\",\n          onChange: e => this.handleChange(e, props.item),\n          onBlur: e => this.handleBlur(e, props.item),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 221,\n            columnNumber: 29\n          }\n        })) : /*#__PURE__*/React.createElement(\"span\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 234,\n            columnNumber: 25\n          }\n        }, props.item.text));\n      } else {\n        return /*#__PURE__*/React.createElement(React.Fragment, null, props.item ? /*#__PURE__*/React.createElement(\"ul\", {\n          className: \"list-inline mb-0\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 242,\n            columnNumber: 25\n          }\n        }, /*#__PURE__*/React.createElement(\"li\", {\n          className: \"list-inline-item mr-3\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 243,\n            columnNumber: 29\n          }\n        }, props.item.text), props.item.editable ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"li\", {\n          className: \"list-inline-item\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 246,\n            columnNumber: 37\n          }\n        }, /*#__PURE__*/React.createElement(\"span\", {\n          className: \"action-icon tree-level1\",\n          onClick: e => {\n            e.stopPropagation();\n            this.equalNode(e, props.item);\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 247,\n            columnNumber: 41\n          }\n        })), /*#__PURE__*/React.createElement(\"li\", {\n          className: \"list-inline-item\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 255,\n            columnNumber: 37\n          }\n        }, /*#__PURE__*/React.createElement(\"span\", {\n          className: \"action-icon tree-level2\",\n          onClick: e => {\n            e.stopPropagation();\n            this.addChildNode(e, props.item);\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 256,\n            columnNumber: 41\n          }\n        })), /*#__PURE__*/React.createElement(\"li\", {\n          className: \"list-inline-item\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 264,\n            columnNumber: 37\n          }\n        }, /*#__PURE__*/React.createElement(\"span\", {\n          className: \"k-icon k-i-edit k-i-pencil\",\n          onClick: e => {\n            e.stopPropagation();\n            this.editRecord(e, props.item);\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 265,\n            columnNumber: 41\n          }\n        })), !props.item.isRoot ? /*#__PURE__*/React.createElement(\"li\", {\n          className: \"list-inline-item\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 275,\n            columnNumber: 41\n          }\n        }, /*#__PURE__*/React.createElement(\"span\", {\n          className: \"k-icon k-i-delete\",\n          onClick: e => {\n            e.stopPropagation();\n            this.deleteNode(props.item);\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 276,\n            columnNumber: 45\n          }\n        })) : null) : null) : \"\");\n      }\n    };\n\n    this.onItemClick = event => {\n      let newData = mapTree(this.state.treeData, \"items\", item => {\n        if (item.editable === true) {\n          item.editable = false;\n        } else if (item.id === event.item.id) {\n          item.editable = true;\n        }\n\n        return item;\n      });\n      this.setState({\n        treeData: newData\n      });\n    };\n\n    this.onExpandChange = event => {\n      event.item.expanded = !event.item.expanded;\n      this.forceUpdate();\n    };\n\n    this.itemRenderView = clickedItem => {\n      if (!this.state.toggleActionView) {\n        return /*#__PURE__*/React.createElement(React.Fragment, null, clickedItem.item ? /*#__PURE__*/React.createElement(\"ul\", {\n          className: \"list-inline mb-0\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 317,\n            columnNumber: 25\n          }\n        }, /*#__PURE__*/React.createElement(\"li\", {\n          className: \"list-inline-item mr-3\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 318,\n            columnNumber: 29\n          }\n        }, clickedItem.item.text), clickedItem.item.editable ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"li\", {\n          className: \"list-inline-item\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 321,\n            columnNumber: 37\n          }\n        }, /*#__PURE__*/React.createElement(\"span\", {\n          className: \"action-icon tree-toggle\",\n          onClick: e => this.setProperties(e, clickedItem),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 322,\n            columnNumber: 41\n          }\n        }))) : null) : \"\");\n      }\n    };\n\n    this.onItemClickView = event => {\n      let newData = mapTree(this.state.treeDataView, \"items\", item => {\n        if (item.editable === true) {\n          item.editable = false;\n        } else if (item.id === event.item.id) {\n          item.editable = true;\n        }\n\n        return item;\n      });\n      this.setState({\n        treeDataView: newData\n      });\n    };\n\n    this.onExpandChangeView = event => {\n      event.item.expanded = !event.item.expanded;\n      this.forceUpdate();\n    };\n\n    this.setProperties = (event, clickedItem) => {\n      this.props.openPropertyModal(clickedItem);\n    };\n\n    this.handleChange = (e, clickedItem) => {\n      let newData = mapTree(this.state.treeData, \"items\", item => {\n        if (item.id === clickedItem.id) {\n          item.text = e.target.value;\n        }\n\n        return item;\n      });\n      this.setState({\n        treeData: newData\n      });\n    };\n\n    this.handleBlur = (e, item) => {\n      item.editable = false;\n      this.setState({\n        toggleAction: !this.state.toggleAction\n      });\n    };\n\n    this.onSaveClick = () => {\n      if (this.props.Login.loadTreeProperties === true) {\n        this.onSaveProperties();\n      } else {\n        this.onSaveSampleStorageLocation();\n      }\n    };\n\n    this.onSaveProperties = (saveType, formRef) => {\n      const {\n        selectedRecord\n      } = this.state;\n\n      if (this.props.Login.clickedItem && this.props.Login.clickedItem !== undefined) {\n        let inputData = [];\n        let jsondata = {};\n        let postParam = undefined;\n        let newData = mapTree(this.state.treeDataView, \"items\", item => {\n          if (item.id === this.props.Login.clickedItem.item.id) {\n            item.locationlastnode = selectedRecord[\"locationlastnode\"] !== undefined ? selectedRecord[\"locationlastnode\"] : false;\n            item.containerfirstnode = selectedRecord[\"containerfirstnode\"] !== undefined ? selectedRecord[\"containerfirstnode\"] : false;\n            item.containerlastnode = selectedRecord[\"containerlastnode\"] !== undefined ? selectedRecord[\"containerlastnode\"] : false;\n          }\n\n          return item;\n        });\n        postParam = {\n          inputListName: \"sampleStorageLocation\",\n          selectedObject: \"selectedSampleStorageLocation\",\n          primaryKeyField: \"nsamplestoragelocationcode\"\n        };\n        jsondata[\"data\"] = newData;\n        inputData[\"userinfo\"] = this.props.Login.userInfo;\n        inputData[\"sampleStorageLocation\"] = {\n          \"nstatus\": 1\n        };\n        inputData[\"sampleStorageLocation\"][\"nsamplestoragelocationcode\"] = this.props.Login.masterData.selectedSampleStorageLocation[\"nsamplestoragelocationcode\"];\n        inputData[\"sampleStorageLocation\"][\"ssamplestoragelocationname\"] = this.props.Login.masterData.selectedSampleStorageLocation[\"ssamplestoragelocationname\"];\n        inputData[\"sampleStorageLocation\"][\"jsondata\"] = jsondata;\n        const inputParam = {\n          classUrl: \"samplestoragelocation\",\n          methodUrl: \"SampleStorageLocation\",\n          displayName: this.props.Login.inputParam.displayName,\n          inputData: inputData,\n          operation: \"update\",\n          saveType,\n          formRef,\n          postParam\n        };\n        this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\n      }\n    };\n\n    this.onSaveSampleStorageLocation = (saveType, formRef) => {\n      const {\n        selectedRecord\n      } = this.state;\n\n      if (selectedRecord[\"ssamplestoragelocationname\"] && selectedRecord[\"ssamplestoragelocationname\"].length > 0) {\n        let inputData = [];\n        let jsondata = {};\n        let postParam = undefined;\n        let newData = mapTree(this.state.treeData, \"items\", item => {\n          if (item.editable === true) {\n            item.editable = false;\n          }\n\n          return item;\n        }); // postParam = { inputListName: \"SampleStorageLocation\", selectedObject: \"selectedSampleStorageLocation\", primaryKeyField: \"nsamplestoragelocationcode\" };\n\n        jsondata[\"data\"] = newData;\n        inputData[\"userinfo\"] = this.props.Login.userInfo;\n        inputData[\"sampleStorageLocation\"] = {\n          \"nstatus\": 1\n        };\n        inputData[\"sampleStorageVersion\"] = {\n          \"nstatus\": 1\n        };\n        inputData[\"sampleStorageLocation\"][\"ssamplestoragelocationname\"] = selectedRecord[\"ssamplestoragelocationname\"];\n        inputData[\"sampleStorageVersion\"][\"jsondata\"] = jsondata;\n\n        if (this.props.Login.operation === \"create\") {\n          const inputParam = {\n            classUrl: \"samplestoragelocation\",\n            methodUrl: \"SampleStorageLocation\",\n            displayName: this.props.Login.inputParam.displayName,\n            inputData: inputData,\n            operation: \"create\",\n            saveType,\n            formRef\n          };\n          this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\n        } else {\n          inputData[\"sampleStorageLocation\"][\"nsamplestoragelocationcode\"] = this.props.Login.masterData.selectedSampleStorageLocation[\"nsamplestoragelocationcode\"];\n          const inputParam = {\n            classUrl: \"samplestoragelocation\",\n            methodUrl: \"SampleStorageLocation\",\n            displayName: this.props.Login.inputParam.displayName,\n            inputData: inputData,\n            operation: \"update\",\n            saveType,\n            formRef\n          };\n          this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\n        }\n      } else {\n        toast.info(this.props.intl.formatMessage({\n          id: \"IDS_INVALIDSAMPLESTORAGELOCATIONNAME\"\n        }));\n      }\n    };\n\n    this.deleteSampleStorageLocation = () => {\n      let inputData = [];\n      inputData[\"sampleStorageLocation\"] = this.props.Login.masterData.selectedSampleStorageLocation;\n      inputData[\"userinfo\"] = this.props.Login.userInfo;\n      const inputParam = {\n        methodUrl: \"SampleStorageLocation\",\n        classUrl: \"samplestoragelocation\",\n        inputData: inputData,\n        operation: \"delete\",\n        searchRef: this.searchRef\n      };\n      this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\n    };\n\n    this.confirmDelete = ncontrolCode => {\n      this.confirmMessage.confirm(\"deleteMessage\", this.props.intl.formatMessage({\n        id: \"IDS_DELETE\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_DEFAULTCONFIRMMSG\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_OK\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_CANCEL\"\n      }), () => this.deleteSampleStorageLocation(\"delete\", ncontrolCode));\n    };\n\n    this.paneSizeChange = d => {\n      this.setState({\n        splitChangeWidthPercentage: d\n      });\n    };\n\n    this.handlePageChange = e => {\n      this.setState({\n        skip: e.skip,\n        take: e.take\n      });\n    };\n\n    this.handleDetailPageChange = e => {\n      this.setState({\n        skip: e.skip,\n        take: e.take\n      });\n    };\n\n    this.state = {\n      toggleAction: false,\n      treeDataView: undefined,\n      toggleActionView: false,\n      treeData: [{\n        text: \"root\",\n        expanded: true,\n        editable: true,\n        root: true,\n        id: uuid()\n      }],\n      panes: [{\n        size: '50%',\n        scrollable: false\n      }],\n      selectedRecord: {},\n      userRoleControlRights: [],\n      controlMap: new Map(),\n      skip: 0,\n      detailSkip: 0,\n      detailTake: 10,\n      take: this.props.Login.settings ? this.props.Login.settings[3] : 25,\n      splitChangeWidthPercentage: 22\n    };\n    this.searchRef = React.createRef();\n    this.confirmMessage = new ConfirmMessage();\n  }\n\n  componentDidUpdate(previousProps) {\n    let {\n      filterData\n    } = this.state;\n\n    if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\n      const userRoleControlRights = [];\n\n      if (this.props.Login.userRoleControlRights) {\n        this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item => userRoleControlRights.push(item.ncontrolcode));\n      }\n\n      const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode);\n      this.setState({\n        controlMap,\n        userRoleControlRights\n      });\n    }\n\n    if (this.props.Login.treeData !== previousProps.Login.treeData) {\n      this.setState({\n        treeData: this.props.Login.treeData\n      });\n    }\n\n    if (this.props.Login.masterData.selectedSampleStorageVersion !== previousProps.Login.masterData.selectedSampleStorageVersion) {\n      this.setState({\n        treeDataView: JSON.parse(this.props.Login.masterData.selectedSampleStorageVersion[\"jsondata\"].value).data\n      });\n    }\n\n    if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\n      this.setState({\n        selectedRecord: this.props.Login.selectedRecord\n      });\n    }\n  }\n\n  componentDidMount() {\n    if (this.parentHeight) {\n      const height = this.parentHeight.clientHeight;\n      this.setState({\n        firstPane: height - 80,\n        parentHeight: height - 50\n      });\n    }\n  }\n\n  render() {\n    const addId = this.state.controlMap.has(\"Add SampleStorageLocation\") && this.state.controlMap.get(\"Add SampleStorageLocation\").ncontrolcode;\n    const editId = this.state.controlMap.has(\"Edit SampleStorageLocation\") && this.state.controlMap.get(\"Edit SampleStorageLocation\").ncontrolcode;\n    const deleteId = this.state.controlMap.has(\"Delete SampleStorageLocation\") && this.state.controlMap.get(\"Delete SampleStorageLocation\").ncontrolcode;\n    const breadCrumbData = [];\n    const confirmMessage = new ConfirmMessage();\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(ListWrapper, {\n      className: \"client-listing-wrap mtop-4 screen-height-window\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 532,\n        columnNumber: 17\n      }\n    }, breadCrumbData.length > 0 ? /*#__PURE__*/React.createElement(BreadcrumbComponent, {\n      breadCrumbItem: breadCrumbData,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 534,\n        columnNumber: 25\n      }\n    }) : \"\", /*#__PURE__*/React.createElement(Row, {\n      noGutters: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 536,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      className: \"parent-port-height\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 537,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(SplitterLayout, {\n      borderColor: \"#999\",\n      percentage: true,\n      primaryIndex: 1,\n      onSecondaryPaneSizeChange: this.paneSizeChange,\n      secondaryInitialSize: 25,\n      primaryMinSize: 40,\n      secondaryMinSize: 20,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 540,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(TransactionListMaster, {\n      paneHeight: this.state.parentHeight,\n      needMultiSelect: false,\n      masterList: this.props.Login.masterData.sampleStorageLocation || [],\n      selectedMaster: [this.props.Login.masterData.selectedSampleStorageLocation],\n      primaryKeyField: \"nsamplestoragelocationcode\",\n      getMasterDetail: selectedItem => this.props.getSelectedSampleStorageLocation(selectedItem, this.props.Login.userInfo, this.props.Login.masterData),\n      inputParam: {\n        userInfo: this.props.Login.userInfo,\n        masterData: this.props.Login.masterData\n      },\n      mainField: \"ssamplestoragelocationname\",\n      selectedListName: \"selectedSampleStorageLocation\",\n      objectName: \"LocationMaster\",\n      listName: \"IDS_SAMPLESTORAGELOCATION\" // filterColumnData={this.props.filterTransactionList}\n      ,\n      searchListName: \"searchedData\",\n      searchRef: this.searchRef // filterParam={filterParam}\n      // showFilter={this.props.Login.showFilter}\n      // openFilter={this.openFilter}\n      // closeFilter={this.closeFilter}\n      // onFilterSubmit={this.onFilterSubmit}                                       \n      ,\n      needFilter: false //skip={this.state.masterSkip}\n      //take={this.state.masterTake}\n      ,\n      hidePaging: false,\n      handlePageChange: this.handlePageChange,\n      skip: this.state.skip,\n      take: this.state.take,\n      commonActions: /*#__PURE__*/React.createElement(ProductList, {\n        className: \"d-flex product-category float-right\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 578,\n          columnNumber: 41\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        className: \"btn btn-icon-rounded btn-circle solid-blue\",\n        role: \"button\",\n        \"data-tip\": this.props.intl.formatMessage({\n          id: \"IDS_ADD\"\n        }),\n        \"data-for\": \"tooltip-common-wrap\",\n        hidden: this.state.userRoleControlRights.indexOf(addId) === -1,\n        onClick: () => this.openModal(),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 579,\n          columnNumber: 45\n        }\n      }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n        icon: faPlus,\n        title: this.props.intl.formatMessage({\n          id: \"IDS_ADD\"\n        }),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 584,\n          columnNumber: 49\n        }\n      })), /*#__PURE__*/React.createElement(Button, {\n        className: \"btn btn-circle outline-grey ml-2\",\n        variant: \"link\",\n        onClick: () => this.reloadData(),\n        \"data-for\": \"tooltip-common-wrap\",\n        \"data-tip\": this.props.intl.formatMessage({\n          id: \"IDS_REFRESH\"\n        }),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 586,\n          columnNumber: 45\n        }\n      }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n        icon: faSync,\n        style: {\n          \"width\": \"0.6!important\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 590,\n          columnNumber: 49\n        }\n      }))),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 542,\n        columnNumber: 33\n      }\n    }), /*#__PURE__*/React.createElement(SplitterLayout, {\n      vertical: true,\n      borderColor: \"#999\",\n      percentage: true,\n      primaryIndex: 1 //secondaryInitialSize={400}\n      ,\n      customClassName: \"fixed_list_height\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 598,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(PerfectScrollbar, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 600,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"card_group\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 602,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 603,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 3,\n      style: {\n        paddingRight: '0'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 604,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(TransactionListMaster, {\n      masterList: this.props.Login.masterData.sampleStorageVersion || [],\n      needMultiSelect: false,\n      selectedMaster: [this.props.Login.masterData.selectedSampleStorageVersion],\n      primaryKeyField: \"nsamplestorageversioncode\",\n      getMasterDetail: selectedItem => this.props.getSelectedSampleStorageVersion(selectedItem, this.props.Login.userInfo, this.props.Login.masterData),\n      inputParam: {\n        userInfo: this.props.Login.userInfo,\n        masterData: this.props.Login.masterData\n      },\n      mainField: \"nversionno\",\n      mainFieldLabel: this.props.intl.formatMessage({\n        id: \"IDS_VERSION\"\n      }),\n      selectedListName: \"selectedSampleStorageVersion\",\n      objectName: \"Version\",\n      listName: \"IDS_SAMPLESTORAGEVersion\",\n      hideSearch: true,\n      needValidation: false,\n      needFilter: false,\n      moreField: [],\n      skip: this.state.detailSkip,\n      take: this.state.detailTake,\n      hidePaging: true,\n      handlePageChange: this.handleDetailPageChange,\n      splitModeClass: this.state.splitChangeWidthPercentage && this.state.splitChangeWidthPercentage > 50 ? 'split-mode' : this.state.splitChangeWidthPercentage > 40 ? 'split-md' : '',\n      actionIcons: [{\n        title: this.props.intl.formatMessage({\n          id: \"IDS_EDIT\"\n        }),\n        controlname: \"faPencilAlt\",\n        objectName: \"detailtoedit\",\n        hidden: this.state.userRoleControlRights.indexOf(editId) === -1,\n        onClick: e => this.props.editSampleStorageLocation(this.props.Login.masterData.selectedSampleStorageVersion, this.props.Login.userInfo, this.props.Login.masterData)\n      }, {\n        title: this.props.intl.formatMessage({\n          id: \"IDS_DELETE\"\n        }),\n        controlname: \"faTrashAlt\",\n        objectName: \"mastertodelete\",\n        hidden: this.state.userRoleControlRights.indexOf(deleteId) === -1,\n        onClick: () => this.confirmDelete(deleteId)\n      }],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 606,\n        columnNumber: 53\n      }\n    })), /*#__PURE__*/React.createElement(Col, {\n      md: 9,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 655,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(ProductList, {\n      className: \"panel-main-content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 657,\n        columnNumber: 53\n      }\n    }, this.props.Login.masterData.sampleStorageLocation && this.props.Login.masterData.sampleStorageLocation.length > 0 && this.props.Login.masterData.selectedSampleStorageLocation ? /*#__PURE__*/React.createElement(Card, {\n      className: \"border-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 659,\n        columnNumber: 61\n      }\n    }, /*#__PURE__*/React.createElement(Card.Header, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 660,\n        columnNumber: 65\n      }\n    }, /*#__PURE__*/React.createElement(Card.Title, {\n      className: \"product-title-main\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 661,\n        columnNumber: 69\n      }\n    }, this.props.Login.masterData.selectedSampleStorageLocation.ssamplestoragelocationname), /*#__PURE__*/React.createElement(Card.Subtitle, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 662,\n        columnNumber: 69\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      className: \"product-title-sub flex-grow-1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 663,\n        columnNumber: 73\n      }\n    }, /*#__PURE__*/React.createElement(Nav.Link, {\n      className: \"action-icons-wrap mr-2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 664,\n        columnNumber: 77\n      }\n    }, this.props.Login.masterData.selectedSampleStorageVersion.napprovalstatus === 8 ? /*#__PURE__*/React.createElement(\"span\", {\n      className: `btn btn-outlined  outline-secondary btn-sm ml-3`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 667,\n        columnNumber: 85\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_DRAFT\",\n      defaultMessage: \"Draft\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 668,\n        columnNumber: 89\n      }\n    })) : this.props.Login.masterData.selectedSampleStorageVersion.napprovalstatus === 7 ? /*#__PURE__*/React.createElement(\"span\", {\n      className: `btn btn-outlined outline-secondary btn-sm ml-3`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 673,\n        columnNumber: 89\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_RETIRED\",\n      defaultMessage: \"Retired\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 674,\n        columnNumber: 93\n      }\n    })) : /*#__PURE__*/React.createElement(\"span\", {\n      className: `btn btn-outlined outline-success btn-sm ml-3`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 677,\n        columnNumber: 89\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_APPROVED\",\n      defaultMessage: \"Approved\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 678,\n        columnNumber: 93\n      }\n    }))))), /*#__PURE__*/React.createElement(ContentPanel, {\n      className: \"d-flex product-category\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 684,\n        columnNumber: 69\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: \"6\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 685,\n        columnNumber: 73\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"d-flex product-category\",\n      style: {\n        float: \"right\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 686,\n        columnNumber: 77\n      }\n    }, /*#__PURE__*/React.createElement(ReactTooltip, {\n      place: \"bottom\",\n      globalEventOff: \"click\",\n      id: \"tooltip_list_wrap\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 687,\n        columnNumber: 81\n      }\n    }), /*#__PURE__*/React.createElement(ProductList, {\n      className: \"d-inline dropdown badget_menu\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 688,\n        columnNumber: 81\n      }\n    }, /*#__PURE__*/React.createElement(Nav.Link, {\n      className: \"btn btn-circle outline-grey mr-2 \",\n      href: \"#\" // hidden={this.state.userRoleControlRights.indexOf(editId) === -1}\n      ,\n      \"data-for\": \"tooltip_list_wrap\",\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_EDIT\"\n      }),\n      onClick: e => this.props.editSampleStorageLocation(this.props.Login.masterData.selectedSampleStorageVersion, this.props.Login.userInfo, this.props.Login.masterData),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 689,\n        columnNumber: 85\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faPencilAlt,\n      className: \"ActionIconColor\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 695,\n        columnNumber: 89\n      }\n    })), /*#__PURE__*/React.createElement(Nav.Link, {\n      name: \"QB\",\n      className: \"btn btn-circle outline-grey mr-2\" // hidden={this.state.userRoleControlRights.indexOf(deleteId) === -1}\n      ,\n      \"data-for\": \"tooltip_list_wrap\",\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_DELETE\"\n      }),\n      onClick: () => this.confirmDelete(deleteId),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 698,\n        columnNumber: 85\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faTrashAlt,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 704,\n        columnNumber: 89\n      }\n    })), /*#__PURE__*/React.createElement(Nav.Link, {\n      name: \"QB\",\n      className: \"btn btn-circle outline-grey mr-2\" // hidden={this.state.userRoleControlRights.indexOf(deleteId) === -1}\n      ,\n      \"data-for\": \"tooltip_list_wrap\",\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_APPROVE\"\n      }) // onClick={() => this.confirmDelete(deleteId)}\n      ,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 706,\n        columnNumber: 85\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faThumbsUp,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 712,\n        columnNumber: 89\n      }\n    }))))))), /*#__PURE__*/React.createElement(Card.Body, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 719,\n        columnNumber: 65\n      }\n    }, /*#__PURE__*/React.createElement(TreeViewEditable, {\n      id: \"samplestoragelocation\",\n      name: \"samplestoragelocation\" // label=\"Sample Storage Location\"\n      ,\n      data: this.state.treeDataView,\n      expandIcons: true,\n      item: this.itemRenderView,\n      onExpandChange: this.onExpandChangeView,\n      onItemClick: this.onItemClickView,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 720,\n        columnNumber: 69\n      }\n    }))) : \"\")))))))))), this.props.Login.openModal && /*#__PURE__*/React.createElement(SlideOutModal, {\n      show: this.props.Login.openModal,\n      closeModal: this.closeModal,\n      operation: this.props.Login.operation,\n      inputParam: this.props.Login.inputParam,\n      screenName: this.props.intl.formatMessage({\n        id: \"IDS_SAMPLESTORAGELOCATION\"\n      }),\n      onSaveClick: this.onSaveClick,\n      selectedRecord: this.state.selectedRecord || {},\n      addComponent: this.props.Login.loadTreeProperties ? /*#__PURE__*/React.createElement(AddTreeProperties, {\n        onInputChange: e => this.onInputChange(e),\n        selectedRecord: this.state.selectedRecord || {},\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 965,\n          columnNumber: 33\n        }\n      }) : this.state.treeData ? /*#__PURE__*/React.createElement(AddTreeview, {\n        treeData: this.state.treeData,\n        onInputChange: e => this.onInputChange(e),\n        selectedRecord: this.state.selectedRecord || {},\n        itemRender: this.itemRender,\n        onExpandChange: this.onExpandChange,\n        onItemClick: this.onItemClick,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 970,\n          columnNumber: 33\n        }\n      }) : /*#__PURE__*/React.createElement(React.Fragment, null),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 956,\n        columnNumber: 21\n      }\n    }));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    Login: state.Login\n  };\n};\n\nexport default connect(mapStateToProps, {\n  callService,\n  crudMaster,\n  updateStore,\n  validateEsignCredential,\n  getSelectedSampleStorageLocation,\n  openPropertyModal,\n  editSampleStorageLocation\n})(injectIntl(SampleStorageLocation));","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/pages/basemaster/SampleStorageLocation.jsx"],"names":["React","Component","connect","injectIntl","FormattedMessage","Row","Col","Card","Nav","FormGroup","FormLabel","Form","Button","FontAwesomeIcon","PerfectScrollbar","faTrashAlt","faCopy","faPencilAlt","faSync","faPlus","faThumbsUp","toast","ListMaster","constructOptionList","getControlMap","showEsign","ReadOnlyText","ContentPanel","SlideOutModal","callService","crudMaster","validateEsignCredential","updateStore","getSelectedSampleStorageLocation","openPropertyModal","editSampleStorageLocation","DEFAULT_RETURN","ListWrapper","ProductList","ReactTooltip","uuid","TreeEditable","TreeViewEditable","mapTree","removeItems","ConfirmMessage","AddTreeview","AddTreeProperties","Splitter","TransactionListMaster","BreadcrumbComponent","SplitterLayout","SampleStorageLocation","constructor","props","onChange","event","setState","panes","newState","addChildNode","e","clickedItem","newData","state","treeData","item","id","items","push","text","expanded","editable","locationlastnode","containerfirstnode","containerlastnode","equalNode","parentItem","parentFound","undefined","deleteNode","editRecord","toggleAction","openModal","updateInfo","typeName","data","selectedRecord","loadTreeProperties","root","operation","closeModal","onInputChange","target","type","name","checked","value","itemRender","stopPropagation","handleChange","handleBlur","isRoot","onItemClick","onExpandChange","forceUpdate","itemRenderView","toggleActionView","setProperties","onItemClickView","treeDataView","onExpandChangeView","onSaveClick","Login","onSaveProperties","onSaveSampleStorageLocation","saveType","formRef","inputData","jsondata","postParam","inputListName","selectedObject","primaryKeyField","userInfo","masterData","selectedSampleStorageLocation","inputParam","classUrl","methodUrl","displayName","length","info","intl","formatMessage","deleteSampleStorageLocation","searchRef","confirmDelete","ncontrolCode","confirmMessage","confirm","paneSizeChange","d","splitChangeWidthPercentage","handlePageChange","skip","take","handleDetailPageChange","size","scrollable","userRoleControlRights","controlMap","Map","detailSkip","detailTake","settings","createRef","componentDidUpdate","previousProps","filterData","nformcode","Object","values","map","ncontrolcode","selectedSampleStorageVersion","JSON","parse","componentDidMount","parentHeight","height","clientHeight","firstPane","render","addId","has","get","editId","deleteId","breadCrumbData","sampleStorageLocation","selectedItem","indexOf","reloadData","paddingRight","sampleStorageVersion","getSelectedSampleStorageVersion","title","controlname","objectName","hidden","onClick","ssamplestoragelocationname","napprovalstatus","float","mapStateToProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { injectIntl, FormattedMessage } from 'react-intl';\r\nimport { Row, Col, Card, Nav, FormGroup, FormLabel, Form, Button } from 'react-bootstrap';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport PerfectScrollbar from 'react-perfect-scrollbar';\r\nimport { faTrashAlt, faCopy, faPencilAlt, faSync, faPlus,faThumbsUp } from '@fortawesome/free-solid-svg-icons';\r\nimport { toast } from 'react-toastify';\r\nimport ListMaster from '../../components/list-master/list-master.component';\r\nimport { constructOptionList, getControlMap, showEsign } from '../../components/CommonScript';\r\nimport { ReadOnlyText, ContentPanel } from '../../components/App.styles';\r\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\r\nimport {\r\n    callService, crudMaster, validateEsignCredential, updateStore, getSelectedSampleStorageLocation,\r\n    openPropertyModal, editSampleStorageLocation\r\n} from '../../actions';\r\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\r\nimport { ListWrapper } from '../../components/client-group.styles';\r\nimport { ProductList } from '../product/product.styled';\r\nimport ReactTooltip from 'react-tooltip';\r\nimport { uuid } from \"uuidv4\";\r\nimport TreeEditable from \"../../components/form-tree-editable/TreeEditable\";\r\nimport TreeViewEditable from \"../../components/form-tree-editable/form-tree-editable.component\";\r\nimport { mapTree, removeItems } from \"@progress/kendo-react-treelist\";\r\nimport ConfirmMessage from '../../components/confirm-alert/confirm-message.component';\r\nimport AddTreeview from './AddTreeview';\r\nimport AddTreeProperties from './AddTreeProperties';\r\nimport { Splitter } from '@progress/kendo-react-layout';\r\nimport TransactionListMaster from '../../components/TransactionListMaster';\r\nimport BreadcrumbComponent from '../../components/Breadcrumb.Component';\r\nimport SplitterLayout from 'react-splitter-layout';\r\n\r\nclass SampleStorageLocation extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            toggleAction: false,\r\n            treeDataView: undefined,\r\n            toggleActionView: false,\r\n            treeData: [\r\n                {\r\n                    text: \"root\",\r\n                    expanded: true,\r\n                    editable: true,\r\n                    root: true,\r\n                    id: uuid(),\r\n                }],\r\n            panes: [{\r\n                size: '50%',\r\n                scrollable: false\r\n            }],\r\n            selectedRecord: {},\r\n            userRoleControlRights: [],\r\n            controlMap: new Map(),\r\n            skip: 0,\r\n            detailSkip: 0,\r\n            detailTake: 10,\r\n            take: this.props.Login.settings ?\r\n                this.props.Login.settings[3] : 25,\r\n            splitChangeWidthPercentage: 22,\r\n        };\r\n        this.searchRef = React.createRef();\r\n        this.confirmMessage = new ConfirmMessage();\r\n    }\r\n    onChange = (event) => {\r\n\r\n        this.setState({ panes: event.newState })\r\n\r\n    };\r\n    componentDidUpdate(previousProps) {\r\n\r\n        let { filterData } = this.state;\r\n        if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\r\n            const userRoleControlRights = [];\r\n            if (this.props.Login.userRoleControlRights) {\r\n                this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item =>\r\n                    userRoleControlRights.push(item.ncontrolcode))\r\n            }\r\n            const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode)\r\n            this.setState({ controlMap, userRoleControlRights });\r\n        }\r\n\r\n        if (this.props.Login.treeData !== previousProps.Login.treeData) {\r\n            this.setState({\r\n                treeData: this.props.Login.treeData\r\n            });\r\n        }\r\n        if (this.props.Login.masterData.selectedSampleStorageVersion !== previousProps.Login.masterData.selectedSampleStorageVersion) {\r\n            this.setState({\r\n                treeDataView:\r\n                    JSON.parse(this.props.Login.masterData.selectedSampleStorageVersion[\"jsondata\"].value).data\r\n            });\r\n        }\r\n        if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\r\n            this.setState({\r\n                selectedRecord: this.props.Login.selectedRecord\r\n            });\r\n        }\r\n    }\r\n    addChildNode = (e, clickedItem) => {\r\n        let newData = mapTree(this.state.treeData, \"items\", (item) => {\r\n            if (item.id === clickedItem.id) {\r\n                item.items = item.items || [];\r\n                item.items.push({\r\n                    id: uuid(),\r\n                    text: uuid(),\r\n                    expanded: true,\r\n                    editable: false,\r\n                    locationlastnode: false,\r\n                    containerfirstnode: false,\r\n                    containerlastnode: false\r\n                });\r\n            }\r\n            return item;\r\n        });\r\n        this.setState({ treeData: newData });\r\n    };\r\n\r\n    equalNode = (e, clickedItem) => {\r\n        let parentItem = {};\r\n        let parentFound = false;\r\n        let newData = [...this.state.treeData];\r\n        mapTree(this.state.treeData, \"items\", (item) => {\r\n            if (item.items) {\r\n                if (parentFound) {\r\n                    parentItem = item;\r\n                    parentFound = false;\r\n                }\r\n            }\r\n\r\n            if (item.id === clickedItem.id) {\r\n                parentFound = true;\r\n            }\r\n\r\n            return item;\r\n        });\r\n        if (parentItem.text === undefined) {\r\n            newData.push({\r\n                id: uuid(),\r\n                text: uuid(),\r\n                expanded: true,\r\n                editable: false,\r\n                locationlastnode: false,\r\n                containerfirstnode: false,\r\n                containerlastnode: false\r\n            });\r\n            this.setState({ treeData: newData });\r\n        } else {\r\n            newData = mapTree(this.state.treeData, \"items\", (item) => {\r\n                if (item.id === parentItem.id) {\r\n                    item.items.push({\r\n                        id: uuid(),\r\n                        text: uuid(),\r\n                        expanded: true,\r\n                        editable: false,\r\n                        locationlastnode: false,\r\n                        containerfirstnode: false,\r\n                        containerlastnode: false\r\n                    });\r\n                }\r\n                return item;\r\n            });\r\n            this.setState({ treeData: newData });\r\n        }\r\n    };\r\n    deleteNode = (clickedItem) => {\r\n        const newData = removeItems(this.state.treeData, \"items\", (item) => {\r\n            return item.id === clickedItem.id;\r\n        });\r\n        this.setState({ treeData: newData });\r\n    };\r\n    editRecord = (e, clickedItem) => {\r\n        this.setState({ toggleAction: !this.state.toggleAction });\r\n    };\r\n    openModal = () => {\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                openModal: true, selectedRecord: {}, loadTreeProperties: false,\r\n                treeData: [\r\n                    {\r\n                        text: \"root\",\r\n                        expanded: true,\r\n                        editable: true,\r\n                        root: true,\r\n                        id: uuid(),\r\n                    },\r\n                ], operation: \"create\"\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n    closeModal = () => {\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                openModal: false, selectedRecord: {}\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n    onInputChange = (event) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if (event.target.type === \"checkbox\") {\r\n            selectedRecord[event.target.name] = event.target.checked;\r\n        } else {\r\n            selectedRecord[event.target.name] = event.target.value;\r\n        }\r\n\r\n        this.setState({ selectedRecord });\r\n    };\r\n\r\n    itemRender = (props) => {\r\n        if (this.state.toggleAction) {\r\n            return (\r\n                <>\r\n                    {props.item.editable ? (\r\n                        <Form.Group className=\"k-editable-text-wrap\">\r\n                            <Form.Control\r\n                                id={\"nodename\"}\r\n                                name={\"nodename\"}\r\n                                type=\"text\"\r\n                                onKeyDown={(e) => e.stopPropagation()}\r\n                                value={props.item.text}\r\n                                autoFocus\r\n                                autoComplete=\"off\"\r\n                                onChange={(e) => this.handleChange(e, props.item)}\r\n                                onBlur={(e) => this.handleBlur(e, props.item)}\r\n                            />\r\n                        </Form.Group>\r\n                    ) : (\r\n                        <span>{props.item.text}</span>\r\n                    )}\r\n                </>\r\n            );\r\n        } else {\r\n            return (\r\n                <>\r\n                    {props.item ? (\r\n                        <ul className=\"list-inline mb-0\">\r\n                            <li className=\"list-inline-item mr-3\">{props.item.text}</li>\r\n                            {props.item.editable ? (\r\n                                <>\r\n                                    <li className=\"list-inline-item\">\r\n                                        <span\r\n                                            className=\"action-icon tree-level1\"\r\n                                            onClick={(e) => {\r\n                                                e.stopPropagation();\r\n                                                this.equalNode(e, props.item);\r\n                                            }}\r\n                                        ></span>\r\n                                    </li>\r\n                                    <li className=\"list-inline-item\">\r\n                                        <span\r\n                                            className=\"action-icon tree-level2\"\r\n                                            onClick={(e) => {\r\n                                                e.stopPropagation();\r\n                                                this.addChildNode(e, props.item);\r\n                                            }}\r\n                                        ></span>\r\n                                    </li>\r\n                                    <li className=\"list-inline-item\">\r\n                                        <span\r\n                                            className=\"k-icon k-i-edit k-i-pencil\"\r\n                                            onClick={(e) => {\r\n                                                e.stopPropagation();\r\n                                                this.editRecord(e, props.item);\r\n                                            }}\r\n                                        ></span>\r\n                                    </li>\r\n\r\n                                    {!props.item.isRoot ? (\r\n                                        <li className=\"list-inline-item\">\r\n                                            <span\r\n                                                className=\"k-icon k-i-delete\"\r\n                                                onClick={(e) => {\r\n                                                    e.stopPropagation();\r\n                                                    this.deleteNode(props.item);\r\n                                                }}\r\n                                            ></span>\r\n                                        </li>\r\n                                    ) : null}\r\n                                </>\r\n                            ) : null}\r\n                        </ul>\r\n                    ) : (\r\n                        \"\"\r\n                    )}\r\n                </>\r\n            );\r\n        }\r\n    };\r\n\r\n    onItemClick = (event) => {\r\n        let newData = mapTree(this.state.treeData, \"items\", (item) => {\r\n            if (item.editable === true) {\r\n                item.editable = false;\r\n            } else if (item.id === event.item.id) {\r\n                item.editable = true;\r\n            }\r\n            return item;\r\n        });\r\n        this.setState({ treeData: newData });\r\n    };\r\n\r\n    onExpandChange = (event) => {\r\n        event.item.expanded = !event.item.expanded;\r\n        this.forceUpdate();\r\n    };\r\n    itemRenderView = (clickedItem) => {\r\n        if (!this.state.toggleActionView) {\r\n            return (\r\n                <>\r\n                    {clickedItem.item ? (\r\n                        <ul className=\"list-inline mb-0\">\r\n                            <li className=\"list-inline-item mr-3\">{clickedItem.item.text}</li>\r\n                            {clickedItem.item.editable ? (\r\n                                <>\r\n                                    <li className=\"list-inline-item\">\r\n                                        <span\r\n                                            className=\"action-icon tree-toggle\"\r\n                                            onClick={(e) => this.setProperties(e, clickedItem)}\r\n                                        ></span>\r\n                                    </li>\r\n                                </>\r\n                            ) : null}\r\n                        </ul>\r\n                    ) : (\r\n                        \"\"\r\n                    )}\r\n                </>\r\n            );\r\n        }\r\n    };\r\n    onItemClickView = (event) => {\r\n        let newData = mapTree(this.state.treeDataView, \"items\", (item) => {\r\n            if (item.editable === true) {\r\n                item.editable = false;\r\n            } else if (item.id === event.item.id) {\r\n                item.editable = true;\r\n            }\r\n            return item;\r\n        });\r\n        this.setState({ treeDataView: newData });\r\n    };\r\n\r\n    onExpandChangeView = (event) => {\r\n        event.item.expanded = !event.item.expanded;\r\n        this.forceUpdate();\r\n    };\r\n    setProperties = (event, clickedItem) => {\r\n        this.props.openPropertyModal(clickedItem);\r\n    };\r\n\r\n    handleChange = (e, clickedItem) => {\r\n        let newData = mapTree(this.state.treeData, \"items\", (item) => {\r\n            if (item.id === clickedItem.id) {\r\n                item.text = e.target.value;\r\n            }\r\n            return item;\r\n        });\r\n        this.setState({ treeData: newData });\r\n    };\r\n\r\n    handleBlur = (e, item) => {\r\n        item.editable = false;\r\n        this.setState({ toggleAction: !this.state.toggleAction });\r\n    };\r\n\r\n    onSaveClick = () => {\r\n        if (this.props.Login.loadTreeProperties === true) {\r\n            this.onSaveProperties();\r\n        } else {\r\n            this.onSaveSampleStorageLocation();\r\n        }\r\n    };\r\n    onSaveProperties = (saveType, formRef) => {\r\n\r\n        const { selectedRecord } = this.state;\r\n\r\n        if (this.props.Login.clickedItem && this.props.Login.clickedItem !== undefined) {\r\n            let inputData = [];\r\n            let jsondata = {}\r\n            let postParam = undefined;\r\n\r\n            let newData = mapTree(this.state.treeDataView, \"items\", (item) => {\r\n                if (item.id === this.props.Login.clickedItem.item.id) {\r\n                    item.locationlastnode = selectedRecord[\"locationlastnode\"] !== undefined ? selectedRecord[\"locationlastnode\"] : false;\r\n                    item.containerfirstnode = selectedRecord[\"containerfirstnode\"] !== undefined ? selectedRecord[\"containerfirstnode\"] : false;\r\n                    item.containerlastnode = selectedRecord[\"containerlastnode\"] !== undefined ? selectedRecord[\"containerlastnode\"] : false;\r\n                }\r\n                return item;\r\n            });\r\n\r\n            postParam = { inputListName: \"sampleStorageLocation\", selectedObject: \"selectedSampleStorageLocation\", primaryKeyField: \"nsamplestoragelocationcode\" };\r\n\r\n            jsondata[\"data\"] = newData;\r\n            inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n            inputData[\"sampleStorageLocation\"] = { \"nstatus\": 1 };\r\n            inputData[\"sampleStorageLocation\"][\"nsamplestoragelocationcode\"] = this.props.Login.masterData.selectedSampleStorageLocation[\"nsamplestoragelocationcode\"]\r\n            inputData[\"sampleStorageLocation\"][\"ssamplestoragelocationname\"] = this.props.Login.masterData.selectedSampleStorageLocation[\"ssamplestoragelocationname\"];\r\n            inputData[\"sampleStorageLocation\"][\"jsondata\"] = jsondata;\r\n\r\n            const inputParam = {\r\n                classUrl: \"samplestoragelocation\",\r\n                methodUrl: \"SampleStorageLocation\",\r\n                displayName: this.props.Login.inputParam.displayName,\r\n                inputData: inputData,\r\n                operation: \"update\", saveType, formRef, postParam\r\n            }\r\n            this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\r\n        }\r\n    }\r\n    onSaveSampleStorageLocation = (saveType, formRef) => {\r\n\r\n        const { selectedRecord } = this.state;\r\n\r\n        if (selectedRecord[\"ssamplestoragelocationname\"] && selectedRecord[\"ssamplestoragelocationname\"].length > 0) {\r\n\r\n            let inputData = [];\r\n            let jsondata = {}\r\n            let postParam = undefined;\r\n\r\n            let newData = mapTree(this.state.treeData, \"items\", (item) => {\r\n                if (item.editable === true) {\r\n                    item.editable = false;\r\n                }\r\n                return item;\r\n            });\r\n\r\n            // postParam = { inputListName: \"SampleStorageLocation\", selectedObject: \"selectedSampleStorageLocation\", primaryKeyField: \"nsamplestoragelocationcode\" };\r\n\r\n            jsondata[\"data\"] = newData;\r\n            inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n            inputData[\"sampleStorageLocation\"] = { \"nstatus\": 1 };\r\n            inputData[\"sampleStorageVersion\"] = { \"nstatus\": 1 };\r\n\r\n\r\n            inputData[\"sampleStorageLocation\"][\"ssamplestoragelocationname\"] = selectedRecord[\"ssamplestoragelocationname\"];\r\n            inputData[\"sampleStorageVersion\"][\"jsondata\"] = jsondata;\r\n\r\n            if (this.props.Login.operation === \"create\") {\r\n                const inputParam = {\r\n                    classUrl: \"samplestoragelocation\",\r\n                    methodUrl: \"SampleStorageLocation\",\r\n                    displayName: this.props.Login.inputParam.displayName,\r\n                    inputData: inputData,\r\n                    operation: \"create\", saveType, formRef\r\n                }\r\n                this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\r\n            } else {\r\n                inputData[\"sampleStorageLocation\"][\"nsamplestoragelocationcode\"] = this.props.Login.masterData.selectedSampleStorageLocation[\"nsamplestoragelocationcode\"]\r\n                const inputParam = {\r\n                    classUrl: \"samplestoragelocation\",\r\n                    methodUrl: \"SampleStorageLocation\",\r\n                    displayName: this.props.Login.inputParam.displayName,\r\n                    inputData: inputData,\r\n                    operation: \"update\", saveType, formRef\r\n                }\r\n                this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\r\n            }\r\n\r\n        }\r\n        else {\r\n            toast.info(this.props.intl.formatMessage({ id: \"IDS_INVALIDSAMPLESTORAGELOCATIONNAME\" }));\r\n        }\r\n    }\r\n\r\n    deleteSampleStorageLocation = () => {\r\n        let inputData = [];\r\n        inputData[\"sampleStorageLocation\"] = this.props.Login.masterData.selectedSampleStorageLocation;\r\n        inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n\r\n\r\n        const inputParam = {\r\n            methodUrl: \"SampleStorageLocation\",\r\n            classUrl: \"samplestoragelocation\",\r\n            inputData: inputData,\r\n            operation: \"delete\", searchRef: this.searchRef\r\n        }\r\n\r\n        this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\r\n\r\n    }\r\n    confirmDelete = (ncontrolCode) => {\r\n        this.confirmMessage.confirm(\"deleteMessage\",\r\n            this.props.intl.formatMessage({ id: \"IDS_DELETE\" }),\r\n            this.props.intl.formatMessage({ id: \"IDS_DEFAULTCONFIRMMSG\" }),\r\n            this.props.intl.formatMessage({ id: \"IDS_OK\" }),\r\n            this.props.intl.formatMessage({ id: \"IDS_CANCEL\" }),\r\n            () => this.deleteSampleStorageLocation(\"delete\", ncontrolCode));\r\n    };\r\n\r\n    paneSizeChange = (d) => {\r\n        this.setState({\r\n            splitChangeWidthPercentage: d\r\n        })\r\n    }\r\n    handlePageChange = e => {\r\n        this.setState({\r\n            skip: e.skip,\r\n            take: e.take\r\n        });\r\n    };\r\n    handleDetailPageChange = e => {\r\n        this.setState({\r\n            skip: e.skip,\r\n            take: e.take\r\n        });\r\n    };\r\n    componentDidMount() {\r\n        if (this.parentHeight) {\r\n            const height = this.parentHeight.clientHeight;\r\n            this.setState({\r\n                firstPane: height - 80,\r\n                parentHeight: height - 50\r\n            });\r\n        }\r\n    }\r\n    render() {\r\n\r\n        const addId = this.state.controlMap.has(\"Add SampleStorageLocation\") && this.state.controlMap.get(\"Add SampleStorageLocation\").ncontrolcode;\r\n        const editId = this.state.controlMap.has(\"Edit SampleStorageLocation\") && this.state.controlMap.get(\"Edit SampleStorageLocation\").ncontrolcode;\r\n        const deleteId = this.state.controlMap.has(\"Delete SampleStorageLocation\") && this.state.controlMap.get(\"Delete SampleStorageLocation\").ncontrolcode;\r\n        const breadCrumbData = [];\r\n\r\n        const confirmMessage = new ConfirmMessage();\r\n        return (\r\n            <>\r\n                <ListWrapper className=\"client-listing-wrap mtop-4 screen-height-window\">\r\n                    {breadCrumbData.length > 0 ?\r\n                        <BreadcrumbComponent breadCrumbItem={breadCrumbData} />\r\n                        : \"\"}\r\n                    <Row noGutters={true}>\r\n                        <Col md={12} className=\"parent-port-height\">\r\n                            {/* <Col md={12} className='parent-port-height-nobreadcrumb sticky_head_parent' ref={(parentHeight) => { this.parentHeight = parentHeight }}>\r\n                            <ListWrapper> */}\r\n                            <SplitterLayout borderColor=\"#999\" percentage={true} primaryIndex={1} onSecondaryPaneSizeChange={this.paneSizeChange} secondaryInitialSize={25} primaryMinSize={40} secondaryMinSize={20}>\r\n                                {/* First column */}\r\n                                <TransactionListMaster\r\n                                    paneHeight={this.state.parentHeight}\r\n                                    needMultiSelect={false}\r\n                                    masterList={this.props.Login.masterData.sampleStorageLocation || []}\r\n                                    selectedMaster={[this.props.Login.masterData.selectedSampleStorageLocation]}\r\n                                    primaryKeyField=\"nsamplestoragelocationcode\"\r\n                                    getMasterDetail={(selectedItem) =>\r\n                                        this.props.getSelectedSampleStorageLocation(\r\n                                            selectedItem,\r\n                                            this.props.Login.userInfo, this.props.Login.masterData\r\n                                        )}\r\n                                    inputParam={{\r\n                                        userInfo: this.props.Login.userInfo,\r\n                                        masterData: this.props.Login.masterData\r\n                                    }}\r\n                                    mainField={\"ssamplestoragelocationname\"}\r\n                                    selectedListName=\"selectedSampleStorageLocation\"\r\n                                    objectName=\"LocationMaster\"\r\n                                    listName=\"IDS_SAMPLESTORAGELOCATION\"\r\n                                    // filterColumnData={this.props.filterTransactionList}\r\n                                    searchListName=\"searchedData\"\r\n                                    searchRef={this.searchRef}\r\n                                    // filterParam={filterParam}\r\n\r\n                                    // showFilter={this.props.Login.showFilter}\r\n                                    // openFilter={this.openFilter}\r\n                                    // closeFilter={this.closeFilter}\r\n                                    // onFilterSubmit={this.onFilterSubmit}                                       \r\n                                    needFilter={false}\r\n                                    //skip={this.state.masterSkip}\r\n                                    //take={this.state.masterTake}\r\n                                    hidePaging={false}\r\n                                    handlePageChange={this.handlePageChange}\r\n                                    skip={this.state.skip}\r\n                                    take={this.state.take}\r\n                                    commonActions={\r\n                                        <ProductList className=\"d-flex product-category float-right\">\r\n                                            <Button className=\"btn btn-icon-rounded btn-circle solid-blue\" role=\"button\"\r\n                                                data-tip={this.props.intl.formatMessage({ id: \"IDS_ADD\" })}\r\n                                                data-for=\"tooltip-common-wrap\"\r\n                                                hidden={this.state.userRoleControlRights.indexOf(addId) === -1}\r\n                                                onClick={() => this.openModal()}>\r\n                                                <FontAwesomeIcon icon={faPlus} title={this.props.intl.formatMessage({ id: \"IDS_ADD\" })} />\r\n                                            </Button>\r\n                                            <Button className=\"btn btn-circle outline-grey ml-2\" variant=\"link\"\r\n                                                onClick={() => this.reloadData()}\r\n                                                data-for=\"tooltip-common-wrap\"\r\n                                                data-tip={this.props.intl.formatMessage({ id: \"IDS_REFRESH\" })}>\r\n                                                <FontAwesomeIcon icon={faSync} style={{ \"width\": \"0.6!important\" }} />\r\n                                            </Button>\r\n                                        </ProductList>\r\n                                    }\r\n\r\n                                />\r\n\r\n                                {/* End of first column */}\r\n                                <SplitterLayout vertical borderColor=\"#999\" percentage={true} primaryIndex={1} //secondaryInitialSize={400}\r\n                                    customClassName=\"fixed_list_height\">\r\n                                    <PerfectScrollbar>\r\n                                        {/* Start of second column */}\r\n                                        <div className=\"card_group\">\r\n                                            <Row>\r\n                                                <Col md={3} style={{ paddingRight: '0' }}>\r\n                                                    {/* Start of version column */}\r\n                                                    <TransactionListMaster\r\n                                                        masterList={this.props.Login.masterData.sampleStorageVersion || []}\r\n                                                        needMultiSelect={false}\r\n                                                        selectedMaster={[this.props.Login.masterData.selectedSampleStorageVersion]}\r\n                                                        primaryKeyField=\"nsamplestorageversioncode\"\r\n                                                        getMasterDetail={(selectedItem) =>\r\n                                                            this.props.getSelectedSampleStorageVersion(\r\n                                                                selectedItem, this.props.Login.userInfo,\r\n                                                                this.props.Login.masterData\r\n                                                            )}\r\n                                                        inputParam={{\r\n                                                            userInfo: this.props.Login.userInfo,\r\n                                                            masterData: this.props.Login.masterData\r\n                                                        }}\r\n                                                        mainField={\"nversionno\"}\r\n                                                        mainFieldLabel={this.props.intl.formatMessage({ id: \"IDS_VERSION\" })}\r\n                                                        selectedListName=\"selectedSampleStorageVersion\"\r\n                                                        objectName=\"Version\"\r\n                                                        listName=\"IDS_SAMPLESTORAGEVersion\"\r\n                                                        hideSearch={true}\r\n                                                        needValidation={false}\r\n                                                        needFilter={false}\r\n                                                        moreField={[]}\r\n                                                        skip={this.state.detailSkip}\r\n                                                        take={this.state.detailTake}\r\n                                                        hidePaging={true}\r\n                                                        handlePageChange={this.handleDetailPageChange}\r\n                                                        splitModeClass={this.state.splitChangeWidthPercentage && this.state.splitChangeWidthPercentage > 50 ? 'split-mode' : this.state.splitChangeWidthPercentage > 40 ? 'split-md' : ''}\r\n                                                        actionIcons={\r\n                                                            [\r\n                                                                {\r\n                                                                    title: this.props.intl.formatMessage({ id: \"IDS_EDIT\" }),\r\n                                                                    controlname: \"faPencilAlt\",\r\n                                                                    objectName: \"detailtoedit\",\r\n                                                                    hidden: this.state.userRoleControlRights.indexOf(editId) === -1,\r\n                                                                    onClick: (e) => this.props.editSampleStorageLocation(this.props.Login.masterData.selectedSampleStorageVersion, this.props.Login.userInfo, this.props.Login.masterData),\r\n                                                                },\r\n                                                                {\r\n                                                                    title: this.props.intl.formatMessage({ id: \"IDS_DELETE\" }),\r\n                                                                    controlname: \"faTrashAlt\",\r\n                                                                    objectName: \"mastertodelete\",\r\n                                                                    hidden: this.state.userRoleControlRights.indexOf(deleteId) === -1,\r\n                                                                    onClick: () => this.confirmDelete(deleteId)\r\n                                                                }\r\n                                                            ]\r\n                                                        }\r\n                                                    />\r\n                                                    {/* End of version column */}\r\n                                                </Col>\r\n                                                <Col md={9}>\r\n                                                    {/* Start of detailed content */}\r\n                                                    <ProductList className=\"panel-main-content\">\r\n                                                        {this.props.Login.masterData.sampleStorageLocation && this.props.Login.masterData.sampleStorageLocation.length > 0 && this.props.Login.masterData.selectedSampleStorageLocation ?\r\n                                                            <Card className=\"border-0\">\r\n                                                                <Card.Header>\r\n                                                                    <Card.Title className=\"product-title-main\">{this.props.Login.masterData.selectedSampleStorageLocation.ssamplestoragelocationname}</Card.Title>\r\n                                                                    <Card.Subtitle>\r\n                                                                        <h2 className=\"product-title-sub flex-grow-1\">\r\n                                                                            <Nav.Link className=\"action-icons-wrap mr-2\">\r\n                                                                                {this.props.Login.masterData.selectedSampleStorageVersion.napprovalstatus === 8 ?\r\n\r\n                                                                                    <span className={`btn btn-outlined  outline-secondary btn-sm ml-3`}>\r\n                                                                                        <FormattedMessage id={\"IDS_DRAFT\"} defaultMessage=\"Draft\" />\r\n                                                                                    </span>\r\n                                                                                    :\r\n                                                                                    this.props.Login.masterData.selectedSampleStorageVersion.napprovalstatus === 7 ?\r\n\r\n                                                                                        <span className={`btn btn-outlined outline-secondary btn-sm ml-3`}>\r\n                                                                                            <FormattedMessage id={\"IDS_RETIRED\"} defaultMessage=\"Retired\" />\r\n                                                                                        </span>\r\n                                                                                        :\r\n                                                                                        <span className={`btn btn-outlined outline-success btn-sm ml-3`}>\r\n                                                                                            <FormattedMessage id={\"IDS_APPROVED\"} defaultMessage=\"Approved\" />\r\n                                                                                        </span>\r\n                                                                                }\r\n                                                                            </Nav.Link>\r\n                                                                        </h2>\r\n                                                                    </Card.Subtitle>\r\n                                                                    <ContentPanel className=\"d-flex product-category\">\r\n                                                                        <Col md='6'>\r\n                                                                            <div className=\"d-flex product-category\" style={{ float: \"right\" }}>\r\n                                                                                <ReactTooltip place=\"bottom\" globalEventOff='click' id=\"tooltip_list_wrap\" />\r\n                                                                                <ProductList className=\"d-inline dropdown badget_menu\">\r\n                                                                                    <Nav.Link className=\"btn btn-circle outline-grey mr-2 \" href=\"#\"\r\n                                                                                        // hidden={this.state.userRoleControlRights.indexOf(editId) === -1}\r\n                                                                                        data-for=\"tooltip_list_wrap\"\r\n                                                                                        data-tip={this.props.intl.formatMessage({ id: \"IDS_EDIT\" })}\r\n                                                                                        onClick={(e) => this.props.editSampleStorageLocation(this.props.Login.masterData.selectedSampleStorageVersion, this.props.Login.userInfo, this.props.Login.masterData)}\r\n                                                                                    >\r\n                                                                                        <FontAwesomeIcon icon={faPencilAlt} className=\"ActionIconColor\" />\r\n\r\n                                                                                    </Nav.Link>\r\n                                                                                    <Nav.Link name=\"QB\" className=\"btn btn-circle outline-grey mr-2\"\r\n                                                                                        // hidden={this.state.userRoleControlRights.indexOf(deleteId) === -1}\r\n                                                                                        data-for=\"tooltip_list_wrap\"\r\n                                                                                        data-tip={this.props.intl.formatMessage({ id: \"IDS_DELETE\" })}\r\n                                                                                        onClick={() => this.confirmDelete(deleteId)}\r\n                                                                                    >\r\n                                                                                        <FontAwesomeIcon icon={faTrashAlt} />\r\n                                                                                    </Nav.Link>\r\n                                                                                    <Nav.Link name=\"QB\" className=\"btn btn-circle outline-grey mr-2\"\r\n                                                                                        // hidden={this.state.userRoleControlRights.indexOf(deleteId) === -1}\r\n                                                                                        data-for=\"tooltip_list_wrap\"\r\n                                                                                        data-tip={this.props.intl.formatMessage({ id: \"IDS_APPROVE\" })}\r\n                                                                                        // onClick={() => this.confirmDelete(deleteId)}\r\n                                                                                    >\r\n                                                                                        <FontAwesomeIcon icon={faThumbsUp} />\r\n                                                                                    </Nav.Link>\r\n                                                                                </ProductList>\r\n                                                                            </div>\r\n                                                                        </Col>\r\n                                                                    </ContentPanel>\r\n                                                                </Card.Header>\r\n                                                                <Card.Body>\r\n                                                                    <TreeViewEditable\r\n                                                                        id=\"samplestoragelocation\"\r\n                                                                        name=\"samplestoragelocation\"\r\n                                                                        // label=\"Sample Storage Location\"\r\n                                                                        data={this.state.treeDataView}\r\n                                                                        expandIcons={true}\r\n                                                                        item={this.itemRenderView}\r\n                                                                        onExpandChange={this.onExpandChangeView}\r\n                                                                        onItemClick={this.onItemClickView}\r\n                                                                    />\r\n                                                                </Card.Body>\r\n                                                            </Card>\r\n                                                            : \"\"}\r\n\r\n                                                    </ProductList>\r\n                                                    {/* End of detailed content */}\r\n                                                </Col>\r\n                                            </Row>\r\n\r\n                                        </div>\r\n                                        {/* End of second column */}\r\n                                    </PerfectScrollbar>\r\n\r\n                                </SplitterLayout>\r\n\r\n                            </SplitterLayout>\r\n                        </Col>\r\n                    </Row>\r\n                </ListWrapper>\r\n                {/* <ListWrapper className=\"client-listing-wrap mtop-4 \"> */}\r\n                {/* <Row noGutters={true}>\r\n                        <Col md=\"6\" className=\"parent-port-height\">\r\n                            <Splitter panes={this.state.panes} onChange={this.onChange}>\r\n                                <div>                                    \r\n                                    <TransactionListMaster\r\n                                        // paneHeight={this.state.parentHeight}\r\n                                        needMultiSelect={false}\r\n                                        masterList={this.props.Login.masterData &&\r\n                                            this.props.Login.masterData.sampleStorageLocation || []}\r\n                                        selectedMaster={[(this.props.Login.masterData &&\r\n                                            this.props.Login.masterData.selectedSampleStorageLocation) || []]}\r\n                                        primaryKeyField=\"nsamplestoragelocationcode\"\r\n                                        getMasterDetail={(selectedItem) =>\r\n                                            this.props.getSelectedSampleStorageLocation(\r\n                                                selectedItem,\r\n                                                this.props.Login.userInfo, this.props.Login.masterData\r\n                                            )\r\n                                        }\r\n                                        // inputParam={{\r\n                                        //   userInfo: this.props.Login.userInfo,\r\n                                        //   masterData: this.props.Login.masterData\r\n                                        // }}\r\n                                        mainField={\"ssamplestoragelocationname\"}\r\n                                        selectedListName=\"selectedSampleStorageLocation\"\r\n                                        objectName=\"LocationMaster\"\r\n                                        listName=\"IDS_SAMPLESTORAGELOCATION\"\r\n                                        // filterColumnData={this.props.filterTransactionList}\r\n                                        // searchListName=\"searchedData\"\r\n                                        searchRef={this.searchRef}\r\n                                        // filterParam={filterParam}\r\n\r\n                                        // showFilter={this.props.Login.showFilter}\r\n                                        // openFilter={this.openFilter}\r\n                                        // closeFilter={this.closeFilter}\r\n                                        // onFilterSubmit={this.onFilterSubmit}              \r\n                                        // needFilter={true}              \r\n                                        hidePaging={false}\r\n                                        pageSize={[10, 20, 30]}\r\n                                        handlePageChange={this.handlePageChange}\r\n                                        skip={0}\r\n                                        take={10}\r\n                                        commonActions={\r\n                                            <ProductList className=\"d-flex product-category float-right\">\r\n                                                <Button className=\"btn btn-icon-rounded btn-circle solid-blue\" role=\"button\"\r\n                                                    data-tip={this.props.intl.formatMessage({ id: \"IDS_ADD\" })}\r\n                                                    data-for=\"tooltip_list_wrap\"\r\n                                                    hidden={this.state.userRoleControlRights.indexOf(addId) === -1}\r\n                                                    onClick={() => this.openModal()}\r\n                                                >\r\n                                                    <FontAwesomeIcon icon={faPlus} title={this.props.intl.formatMessage({ id: \"IDS_ADD\" })} />\r\n                                                </Button>\r\n                                                <Button className=\"btn btn-circle outline-grey ml-2\" variant=\"link\"\r\n                                                    onClick={() => this.reloadData()}\r\n                                                    data-for=\"tooltip_list_wrap\"\r\n                                                    data-tip={this.props.intl.formatMessage({ id: \"IDS_REFRESH\" })}>\r\n                                                    <FontAwesomeIcon icon={faSync} style={{ \"width\": \"0.6!important\" }} />\r\n                                                </Button>\r\n                                            </ProductList>\r\n                                        }\r\n\r\n                                    />\r\n                                </div>\r\n                                <div>                                    \r\n                                    <TransactionListMaster\r\n                                        // paneHeight={this.state.parentHeight}\r\n                                        needMultiSelect={false}\r\n                                        masterList={this.props.Login.masterData &&\r\n                                            this.props.Login.masterData.sampleStorageVersion || []}\r\n                                        selectedMaster={[(this.props.Login.masterData &&\r\n                                            this.props.Login.masterData.selectedSampleStorageVersion) || []]}\r\n                                        primaryKeyField=\"nsamplestorageversioncode\"                                     \r\n                                        getMasterDetail={(selectedItem) =>\r\n                                            this.props.getSelectedSampleStorageVersion(\r\n                                                selectedItem, this.props.Login.userInfo,\r\n                                                this.props.Login.masterData\r\n                                            )\r\n                                        }\r\n                                        // inputParam={{\r\n                                        //   userInfo: this.props.Login.userInfo,\r\n                                        //   masterData: this.props.Login.masterData\r\n                                        // }}\r\n                                        mainField={\"nversionno\"}\r\n                                        mainFieldLabel={this.props.intl.formatMessage({ id: \"IDS_VERSION\" })}\r\n                                        selectedListName=\"selectedSampleStorageVersion\"\r\n                                        objectName=\"Version\"\r\n                                        listName=\"IDS_SAMPLESTORAGEVersion\"\r\n                                        // filterColumnData={this.props.filterTransactionList}\r\n                                        // searchListName=\"searchedData\"\r\n                                        searchRef={this.searchRef}\r\n                                        // filterParam={filterParam}\r\n\r\n                                        // showFilter={this.props.Login.showFilter}\r\n                                        // openFilter={this.openFilter}\r\n                                        // closeFilter={this.closeFilter}\r\n                                        // onFilterSubmit={this.onFilterSubmit}              \r\n                                        // needFilter={true}  \r\n                                        // hideSearch={true}            \r\n                                        hidePaging={false}\r\n                                        pageSize={[10, 20, 30]}\r\n                                        handlePageChange={this.handlePageChange}\r\n                                        skip={0}\r\n                                        take={10}\r\n                                        splitModeClass={this.state.splitChangeWidthPercentage && this.state.splitChangeWidthPercentage > 50 ? 'split-mode' : this.state.splitChangeWidthPercentage > 40 ? 'split-md' : ''}\r\n                                        actionIcons={\r\n                                            [\r\n                                                {\r\n                                                    title: this.props.intl.formatMessage({ id: \"IDS_EDIT\" }),\r\n                                                    controlname: \"faPencilAlt\",\r\n                                                    objectName: \"mastertoedit\",\r\n                                                    hidden: this.state.userRoleControlRights.indexOf(editId) === -1,\r\n                                                    onClick: this.editSampleStorageLocation,\r\n                                                    inputData: {\r\n                                                        primaryKeyName: \"nreportcode\",\r\n                                                        operation: \"update\",\r\n                                                        // masterData: this.props.Login.masterData,\r\n                                                        // userInfo: this.props.Login.userInfo,\r\n                                                        screenName: \"IDS_REPORTMASTER\",\r\n                                                        // ncontrolcode: editMasterId,\r\n                                                        // filterReportType:this.props.Login.masterData.SelectedFilterReportType\r\n                                                    },\r\n\r\n                                                },\r\n                                                {\r\n                                                    title: this.props.intl.formatMessage({ id: \"IDS_DELETE\" }),\r\n                                                    controlname: \"faTrashAlt\",\r\n                                                    objectName: \"mastertodelete\",\r\n                                                    hidden: false, // this.state.userRoleControlRights.indexOf(deleteMasterId) === -1,\r\n                                                    onClick: () => ConfirmMessage.confirm(\r\n                                                        \"deleteMessage\",\r\n                                                        this.props.intl.formatMessage({ id: \"IDS_DELETE\" }),\r\n                                                        this.props.intl.formatMessage({ id: \"IDS_DELETECONFIRMMSG\" }),\r\n                                                        this.props.intl.formatMessage({ id: \"IDS_OK\" }),\r\n                                                        this.props.intl.formatMessage({ id: \"IDS_CANCEL\" }),\r\n                                                        () => this.onDeleteSampleStorageLocation()\r\n                                                    ),\r\n                                                    inputData: {\r\n                                                        // primaryKeyName: \"nreportcode\",\r\n                                                        // operation: \"delete\",\r\n                                                        // masterData: this.props.Login.masterData,\r\n                                                        // userInfo: this.props.Login.userInfo,\r\n                                                        // screenName: \"IDS_REPORTMASTER\",\r\n                                                        // listName: \"reportmaster\",\r\n                                                        // ncontrolCode: deleteMasterId, methodUrl: \"ReportMaster\"\r\n                                                    }\r\n                                                },\r\n\r\n                                            ]\r\n                                        }\r\n\r\n                                    />\r\n                                </div>\r\n                            </Splitter>\r\n                        </Col>\r\n                        <Col md=\"6\">\r\n                            <ProductList className=\"panel-main-content\">\r\n                                {this.props.Login.masterData.sampleStorageLocation && this.props.Login.masterData.sampleStorageLocation.length > 0 && this.props.Login.masterData.selectedSampleStorageLocation ?\r\n                                    <Card className=\"border-0\">\r\n                                        <Card.Header>\r\n                                            <Card.Title className=\"product-title-main\">{this.props.Login.masterData.selectedSampleStorageLocation.ssamplestoragelocationname}</Card.Title>\r\n                                            <ContentPanel className=\"d-flex product-category\">\r\n                                                <Col md='6'>\r\n                                                    <div className=\"d-flex product-category\" style={{ float: \"right\" }}>\r\n                                                        <ReactTooltip place=\"bottom\" globalEventOff='click' id=\"tooltip_list_wrap\" />\r\n                                                        <ProductList className=\"d-inline dropdown badget_menu\">\r\n                                                            <Nav.Link className=\"btn btn-circle outline-grey mr-2 \" href=\"#\"\r\n                                                                // hidden={this.state.userRoleControlRights.indexOf(editId) === -1}\r\n                                                                data-for=\"tooltip_list_wrap\"\r\n                                                                data-tip={this.props.intl.formatMessage({ id: \"IDS_EDIT\" })}\r\n                                                                onClick={(e) => this.props.editSampleStorageLocation(this.props.Login.masterData.selectedSampleStorageLocation, this.props.Login.userInfo, this.props.Login.masterData)}\r\n                                                            >\r\n                                                                <FontAwesomeIcon icon={faPencilAlt} className=\"ActionIconColor\" />\r\n\r\n                                                            </Nav.Link>\r\n                                                            <Nav.Link name=\"QB\" className=\"btn btn-circle outline-grey mr-2\"\r\n                                                                // hidden={this.state.userRoleControlRights.indexOf(deleteId) === -1}\r\n                                                                data-tip={this.props.intl.formatMessage({ id: \"IDS_DELETE\" })}\r\n                                                                onClick={() => this.confirmDelete(deleteId)}\r\n                                                            >\r\n                                                                <FontAwesomeIcon icon={faTrashAlt} />\r\n                                                            </Nav.Link>\r\n\r\n                                                        </ProductList>\r\n                                                    </div>\r\n                                                </Col>\r\n                                            </ContentPanel>\r\n                                        </Card.Header>\r\n                                        <Card.Body>\r\n                                            <TreeViewEditable\r\n                                                id=\"samplestoragelocation\"\r\n                                                name=\"samplestoragelocation\"\r\n                                                // label=\"Sample Storage Location\"\r\n                                                data={this.state.treeDataView}\r\n                                                expandIcons={true}\r\n                                                item={this.itemRenderView}\r\n                                                onExpandChange={this.onExpandChangeView}\r\n                                                onItemClick={this.onItemClickView}\r\n                                            />\r\n                                        </Card.Body>\r\n                                    </Card>\r\n                                    : \"\"}\r\n\r\n                            </ProductList>\r\n                        </Col>\r\n                    </Row> */}\r\n                {/* </ListWrapper> */}\r\n                {this.props.Login.openModal &&\r\n                    <SlideOutModal show={this.props.Login.openModal}\r\n                        closeModal={this.closeModal}\r\n                        operation={this.props.Login.operation}\r\n                        inputParam={this.props.Login.inputParam}\r\n                        screenName={this.props.intl.formatMessage({ id: \"IDS_SAMPLESTORAGELOCATION\" })}\r\n                        onSaveClick={this.onSaveClick}\r\n                        selectedRecord={this.state.selectedRecord || {}}\r\n                        addComponent={\r\n                            this.props.Login.loadTreeProperties ? (\r\n                                <AddTreeProperties\r\n                                    onInputChange={(e) => this.onInputChange(e)}\r\n                                    selectedRecord={this.state.selectedRecord || {}}\r\n                                />\r\n                            ) : this.state.treeData ? (\r\n                                <AddTreeview\r\n                                    treeData={this.state.treeData}\r\n                                    onInputChange={(e) => this.onInputChange(e)}\r\n                                    selectedRecord={this.state.selectedRecord || {}}\r\n                                    itemRender={this.itemRender}\r\n                                    onExpandChange={this.onExpandChange}\r\n                                    onItemClick={this.onItemClick}\r\n                                />\r\n                            ) : (\r\n                                <></>\r\n                            )\r\n                        }\r\n                    />\r\n                }\r\n            </>\r\n        )\r\n    }\r\n\r\n\r\n}\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        Login: state.Login\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, {\r\n    callService, crudMaster, updateStore, validateEsignCredential,\r\n    getSelectedSampleStorageLocation, openPropertyModal, editSampleStorageLocation\r\n})(injectIntl(SampleStorageLocation));"]},"metadata":{},"sourceType":"module"}