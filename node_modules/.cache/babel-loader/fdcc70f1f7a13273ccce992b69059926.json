{"ast":null,"code":"import _classCallCheck from\"D:\\\\LIMSWFH\\\\LIMSPOSTGRESQL\\\\QuaLISWeb\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";import _createClass from\"D:\\\\LIMSWFH\\\\LIMSPOSTGRESQL\\\\QuaLISWeb\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";import _inherits from\"D:\\\\LIMSWFH\\\\LIMSPOSTGRESQL\\\\QuaLISWeb\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";import _createSuper from\"D:\\\\LIMSWFH\\\\LIMSPOSTGRESQL\\\\QuaLISWeb\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";import React from'react';import{Row,Col,Nav,Button,Modal,Card}from'react-bootstrap';import{FormattedMessage,injectIntl}from'react-intl';import{ListWrapper}from'../../components/client-group.styles';import FormSelectSearch from'../../components/form-select-search/form-select-search.component';import FormTextarea from'../../components/form-textarea/form-textarea.component';import DropZone from'../../components/dropzone/dropzone.component';import'../../components/list-master/list-master.styles';import{attachmentType,transactionStatus}from'../../components/Enumeration';import'../ResultEntryBySample/result.css';import'../../assets/styles/tree.css';import{MediaHeader,MediaLabel,MediaSubHeader}from'../../components/App.styles';import FormInput from'../../components/form-input/form-input.component';import{FontAwesomeIcon}from'@fortawesome/react-fontawesome';import{faCalculator,faEye,faInfo,faInfoCircle}from'@fortawesome/free-solid-svg-icons';import TestPopOver from'../ResultEntryBySample/TestPopOver';var TestGroupResultEntry=/*#__PURE__*/function(_React$Component){_inherits(TestGroupResultEntry,_React$Component);var _super=_createSuper(TestGroupResultEntry);function TestGroupResultEntry(){var _this;_classCallCheck(this,TestGroupResultEntry);for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}_this=_super.call.apply(_super,[this].concat(args));_this.renderSwitch=function(parameter,index,result,screenName){var selectedResultGrade=_this.props.selectedResultGrade;var gradeValues=_this.props.gradeValues;var gradeCode=selectedResultGrade?selectedResultGrade.length>0?selectedResultGrade[index]?selectedResultGrade[index]['ngradecode']:undefined:\"\":\"\";var isAdditionalInfoRequired=parameter.hasOwnProperty('additionalInfo')&&parameter['additionalInfo']!==\"\"&&parameter['additionalInfo']!==null?true:false;//  parameter.jsondata['value'] ? JSON.parse(parameter.jsondata['value']).hasOwnProperty('additionalInfo') &&\n//     JSON.parse(parameter.jsondata['value'])['additionalInfo'] !== \"\" ? true : false :\n//     parameter.jsondata.hasOwnProperty('additionalInfo') &&\n//         parameter.jsondata['additionalInfo'] !== \"\" ? true : false\nswitch(parameter.nparametertypecode){case 1:{return/*#__PURE__*/React.createElement(React.Fragment,null,/*#__PURE__*/React.createElement(\"div\",{className:\"row w-100\"},/*#__PURE__*/React.createElement(Col,{md:6},/*#__PURE__*/React.createElement(FormInput,{name:parameter.ntestgrouptestparametercode,type:\"text\",required:false,isMandatory:false,value:_this.props.parameterResults.length>0?_this.props.parameterResults[index]?_this.props.parameterResults[index]['sresult']!==null?_this.props.parameterResults[index]['sresult']:\"\":\"\":\"\"// placeholder={parameter.sparametersynonym}\n//label={parameter.sparametersynonym}\n,onChange:function onChange(event){return _this.props.onResultInputChange(event,index,parameter);},onBlur:function onBlur(){return _this.props.onGradeEvent(_this.props.parameterResults,index,parameter);},maxLength:9,onKeyUp:function onKeyUp(event){return _this.props.onKeyPress(event,index,_this.props.paremterResultcode);}})),parameter.ntestgrouptestformulacode>0?/*#__PURE__*/React.createElement(Col,{md:2,className:\"d-flex product-category justify-content-end icon-group-wrap\"},/*#__PURE__*/React.createElement(Nav.Link,{title:\"Calculate Formula\",className:\"btn btn-circle outline-grey ml-2\",role:\"button\",id:screenName+-+index,onClick:function onClick(event){return _this.props.getFormula(parameter,_this.props.Login.userInfo,_this.props.Login.masterData,index,event);}},/*#__PURE__*/React.createElement(FontAwesomeIcon,{title:\"Calculate Formula\",icon:faCalculator}))):\"\"));}case 2:{return/*#__PURE__*/React.createElement(React.Fragment,null,/*#__PURE__*/React.createElement(Col,{md:isAdditionalInfoRequired?8:10,className:\"pl-0\"},/*#__PURE__*/React.createElement(FormSelectSearch,{name:parameter.ntestgrouptestparametercode,as:\"select\"//formLabel={parameter.sparametersynonym}\n,defaultValue:{\"value\":parameter.sresultpredefinedname,\"label\":parameter.sresultpredefinedname}//  defaultValue={parameter.sresult && (parameter.sresult!=null || parameter.sresult !== \"\") ?  { \"value\": parameter.ngradecode, \"label\": parameter.sresult } :\n//  this.props.PredefinedValues ? constructOptionList(this.props.PredefinedValues[parameter.ntestgrouptestparametercode]||[],'ngradecode',\n// 'spredefinedname' , undefined, undefined, undefined).get(\"DefaultValue\"):\"\"}\n,options:_this.props.PredefinedValues?_this.props.PredefinedValues[parameter.ntestgrouptestparametercode]:\"\",optionId:\"ntestgrouptestpredefcode\",optionValue:\"spredefinedname\",isMulti:false,isDisabled:false,isSearchable:true,isClearable:parameter.nresultmandatory===transactionStatus.YES?false:true,isMandatory:false,onKeyUp:function onKeyUp(event){return _this.props.onKeyPress(event,index,_this.props.paremterResultcode);},onChange:function onChange(event){return _this.props.onResultInputChange(event,index,parameter);},onBlur:function onBlur(){return _this.props.onGradeEvent(_this.props.parameterResults,index,parameter);}})),isAdditionalInfoRequired&&/*#__PURE__*/React.createElement(Col,{md:2,className:\"pt-2\"},/*#__PURE__*/React.createElement(TestPopOver,{intl:_this.props.intl,needIcon:true,needPopoverTitleContent:true,placement:\"left\",stringList:// parameter.jsondata['value'] ?\n//      [JSON.parse(parameter.jsondata['value'])['additionalInfo']] :\n//              [parameter.jsondata['additionalInfo']] \nparameter.hasOwnProperty('additionalInfo')&&[parameter['additionalInfo']]})));}case 3:{return/*#__PURE__*/React.createElement(React.Fragment,null,/*#__PURE__*/React.createElement(Col,{md:10,className:\"pl-0\"},/*#__PURE__*/React.createElement(FormTextarea,{name:parameter.ntestgrouptestparametercode//label={parameter.sparametersynonym}\n//placeholder={parameter.sparametersynonym}\n,type:\"text\",defaultValue:parameter.sresult,isMandatory:false,required:false,maxLength:255,onChange:function onChange(event){return _this.props.onResultInputChange(event,index,parameter);},onBlur:function onBlur(){return _this.props.onGradeEvent(_this.props.parameterResults,index,parameter);}})));}case 4:{return/*#__PURE__*/React.createElement(Col,{md:12,className:\"pl-0\"},/*#__PURE__*/React.createElement(DropZone,{maxFiles:1,isMandatory:false//label={parameter.sparametersynonym}\n,accept:\".pdf\",minSize:0,maxSize:20,multiple:false,editFiles:parameter.sfinal!=null?parameter:\"\",attachmentTypeCode:attachmentType.FTP,fileSizeName:\"nfilesize\",fileName:\"sfinal\",index:index,deleteAttachment:_this.props.deleteAttachmentParamFile,onDrop:function onDrop(event){return _this.props.onResultInputChange(event,index,parameter);}//disabled={disabled}\n}));}default:return\"\";}};return _this;}_createClass(TestGroupResultEntry,[{key:\"render\",value:function render(){var _this2=this;return/*#__PURE__*/React.createElement(Row,null,this.props.parameterResults.map(function(parameterResult,index){return/*#__PURE__*/React.createElement(React.Fragment,null,/*#__PURE__*/React.createElement(Col,{md:12,className:\"pl-0 mt-2\"},/*#__PURE__*/React.createElement(MediaHeader,{className:\"labelfont\",style:{color:\"#505f79\"}},\" \",parameterResult.sparametersynonym,parameterResult.nresultmandatory===transactionStatus.NO?\"(optional)\":\"\")),_this2.renderSwitch(parameterResult,index,parameterResult.ntestgrouptestparametercode,_this2.props.screenName));}));}}]);return TestGroupResultEntry;}(React.Component);export default injectIntl(TestGroupResultEntry);","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/pages/testgroup/TestGroupResultEntry.jsx"],"names":["React","Row","Col","Nav","Button","Modal","Card","FormattedMessage","injectIntl","ListWrapper","FormSelectSearch","FormTextarea","DropZone","attachmentType","transactionStatus","MediaHeader","MediaLabel","MediaSubHeader","FormInput","FontAwesomeIcon","faCalculator","faEye","faInfo","faInfoCircle","TestPopOver","TestGroupResultEntry","renderSwitch","parameter","index","result","screenName","selectedResultGrade","props","gradeValues","gradeCode","length","undefined","isAdditionalInfoRequired","hasOwnProperty","nparametertypecode","ntestgrouptestparametercode","parameterResults","event","onResultInputChange","onGradeEvent","onKeyPress","paremterResultcode","ntestgrouptestformulacode","getFormula","Login","userInfo","masterData","sresultpredefinedname","PredefinedValues","nresultmandatory","YES","intl","sresult","sfinal","FTP","deleteAttachmentParamFile","map","parameterResult","color","sparametersynonym","NO","Component"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport { Row, Col, Nav, Button, Modal, Card } from 'react-bootstrap';\r\nimport { FormattedMessage, injectIntl } from 'react-intl';\r\nimport { ListWrapper } from '../../components/client-group.styles';\r\nimport FormSelectSearch from '../../components/form-select-search/form-select-search.component';\r\nimport FormTextarea from '../../components/form-textarea/form-textarea.component';\r\nimport DropZone from '../../components/dropzone/dropzone.component';\r\nimport '../../components/list-master/list-master.styles';\r\nimport { attachmentType, transactionStatus } from '../../components/Enumeration';\r\nimport '../ResultEntryBySample/result.css';\r\nimport '../../assets/styles/tree.css';\r\nimport { MediaHeader, MediaLabel, MediaSubHeader } from '../../components/App.styles';\r\nimport FormInput from '../../components/form-input/form-input.component';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faCalculator, faEye, faInfo, faInfoCircle } from '@fortawesome/free-solid-svg-icons';\r\nimport TestPopOver from '../ResultEntryBySample/TestPopOver';\r\n\r\n\r\n\r\nclass TestGroupResultEntry extends React.Component {\r\n    renderSwitch = (parameter, index, result, screenName) => {\r\n        const selectedResultGrade = this.props.selectedResultGrade;\r\n        const gradeValues = this.props.gradeValues;\r\n        const gradeCode = selectedResultGrade ? selectedResultGrade.length > 0 ?\r\n            selectedResultGrade[index] ? selectedResultGrade[index]['ngradecode'] : undefined : \"\" : \"\";\r\n        let isAdditionalInfoRequired = parameter.hasOwnProperty('additionalInfo') &&\r\n            parameter['additionalInfo'] !== \"\" && parameter['additionalInfo'] !== null ? true : false\r\n        //  parameter.jsondata['value'] ? JSON.parse(parameter.jsondata['value']).hasOwnProperty('additionalInfo') &&\r\n        //     JSON.parse(parameter.jsondata['value'])['additionalInfo'] !== \"\" ? true : false :\r\n        //     parameter.jsondata.hasOwnProperty('additionalInfo') &&\r\n        //         parameter.jsondata['additionalInfo'] !== \"\" ? true : false\r\n        switch (parameter.nparametertypecode) {\r\n            case 1: {\r\n                return (\r\n                    <>\r\n                        <div className='row w-100'>\r\n                            <Col md={6}>\r\n                                <FormInput\r\n                                    name={parameter.ntestgrouptestparametercode}\r\n                                    type=\"text\"\r\n                                    required={false}\r\n                                    isMandatory={false}\r\n                                    value={this.props.parameterResults.length > 0 ?\r\n                                        this.props.parameterResults[index] ? (this.props.parameterResults[index]['sresult'] !== null ? this.props.parameterResults[index]['sresult'] : \"\") : \"\" : \"\"}\r\n                                    // placeholder={parameter.sparametersynonym}\r\n                                    //label={parameter.sparametersynonym}\r\n                                    onChange={(event) => this.props.onResultInputChange(event, index, parameter)}\r\n                                    onBlur={() => this.props.onGradeEvent(this.props.parameterResults, index, parameter)}\r\n                                    maxLength={9}\r\n                                    onKeyUp={(event) => this.props.onKeyPress(event, index, this.props.paremterResultcode)}\r\n                                />\r\n                            </Col>\r\n                            {parameter.ntestgrouptestformulacode > 0 ?\r\n                                <Col md={2} className=\"d-flex product-category justify-content-end icon-group-wrap\">\r\n                                    <Nav.Link title=\"Calculate Formula\" className=\"btn btn-circle outline-grey ml-2\" role=\"button\" id={screenName + -+index}\r\n                                        onClick={(event) => this.props.getFormula(parameter, this.props.Login.userInfo, this.props.Login.masterData, index, event)}>\r\n                                        <FontAwesomeIcon title=\"Calculate Formula\" icon={faCalculator} />\r\n                                    </Nav.Link>\r\n                                </Col>\r\n                                : \"\"}\r\n                            {/* <Col md={4}>\r\n                                {gradeValues[gradeCode]&&\r\n                                 <ListWrapper><MediaLabel className=\"labelfont\" style={{ color: gradeValues[gradeCode][0]['scolorhexcode'] }}>\r\n                                 {gradeCode === undefined ? \"\" : gradeValues[gradeCode][0]['sgradename']}</MediaLabel></ListWrapper>}\r\n                               \r\n                              \r\n                            </Col>   */}\r\n                        </div>\r\n                    </>\r\n                );\r\n            }\r\n            case 2: {\r\n                return (\r\n                    <>\r\n                        <Col md={isAdditionalInfoRequired ? 8 : 10} className=\"pl-0\" >\r\n                            <FormSelectSearch\r\n                                name={parameter.ntestgrouptestparametercode}\r\n                                as={\"select\"}\r\n                                //formLabel={parameter.sparametersynonym}\r\n                                defaultValue={{ \"value\": parameter.sresultpredefinedname, \"label\": parameter.sresultpredefinedname }}\r\n                                //  defaultValue={parameter.sresult && (parameter.sresult!=null || parameter.sresult !== \"\") ?  { \"value\": parameter.ngradecode, \"label\": parameter.sresult } :\r\n                                //  this.props.PredefinedValues ? constructOptionList(this.props.PredefinedValues[parameter.ntestgrouptestparametercode]||[],'ngradecode',\r\n                                // 'spredefinedname' , undefined, undefined, undefined).get(\"DefaultValue\"):\"\"}\r\n\r\n                                options={this.props.PredefinedValues ? this.props.PredefinedValues[parameter.ntestgrouptestparametercode] : \"\"}\r\n                                optionId={\"ntestgrouptestpredefcode\"}\r\n                                optionValue={\"spredefinedname\"}\r\n                                isMulti={false}\r\n                                isDisabled={false}\r\n                                isSearchable={true}\r\n                                isClearable={parameter.nresultmandatory === transactionStatus.YES ? false : true}\r\n                                isMandatory={false}\r\n                                onKeyUp={(event) => this.props.onKeyPress(event, index, this.props.paremterResultcode)}\r\n                                onChange={(event) => this.props.onResultInputChange(event, index, parameter)}\r\n                                onBlur={() => this.props.onGradeEvent(this.props.parameterResults, index, parameter)}\r\n                            />\r\n                        </Col>\r\n                       {/* <Col md={2} className=\"pt-2\"> \r\n                       {gradeValues[gradeCode]&&\r\n                            <ListWrapper><MediaLabel className=\"labelfont\" style={{ color: gradeValues[gradeCode][0]['scolorhexcode'] }}>\r\n                                {gradeCode === undefined ? \"\" : gradeValues[gradeCode][0]['sgradename']}</MediaLabel></ListWrapper>}\r\n                         \r\n                        </Col>  */}\r\n                        {isAdditionalInfoRequired &&\r\n\r\n                            <Col md={2} className=\"pt-2\">\r\n                                {/* <Button className=\"btn btn-circle outline-grey ml-2\" variant=\"link\"\r\n                                     //   hidden={this.props.userRoleControlRights.indexOf(this.props.viewId) === -1}\r\n                                        title={this.props.intl.formatMessage({ id: \"IDS_VIEW\" })}\r\n                                        data-tip={  parameter.jsondata['value'] ?\r\n                                        JSON.parse(parameter.jsondata['value'])['additionalInfo'] :\r\n                                        parameter.jsondata['additionalInfo']}\r\n                                        data-for=\"tooltip_list_wrap\"\r\n                                         onClick={() => this.props.viewAdditionalInfo(parameter.ntestgrouptestparametercode)}\r\n                                        >\r\n                                        <FontAwesomeIcon icon={faEye}/>\r\n                                     </Button>     */}\r\n                                {/* <Modal.Title id=\"password\" className=\"header-primary flex-grow-1\">\r\n                                      <FormattedMessage id='IDS_ADDITIONALINFOREQURIED' defaultMessage='Cancel' />\r\n                                      </Modal.Title> */}\r\n\r\n                                <TestPopOver intl={this.props.intl} needIcon={true} needPopoverTitleContent={true} placement=\"left\" stringList={\r\n                                    // parameter.jsondata['value'] ?\r\n                                    //      [JSON.parse(parameter.jsondata['value'])['additionalInfo']] :\r\n                                    //              [parameter.jsondata['additionalInfo']] \r\n                                    parameter.hasOwnProperty('additionalInfo') &&\r\n                                    [parameter['additionalInfo']]} ></TestPopOver>\r\n                                {/* <Nav.Link\r\n                                        className=\"btn btn-circle outline-grey ml-2\"\r\n                                        // data-for=\"tooltip-common-wrap\"\r\n                                        //  data-place={action.dataplace && action.dataplace ? action.dataplace : \"\"}\r\n                                         data-tip={ parameter.jsondata['value'] ?\r\n                                         JSON.parse(parameter.jsondata['value'])['additionalInfo'] :\r\n                                                 parameter.jsondata['additionalInfo'] }\r\n                                        data-html={true}\r\n                                        //   hidden={this.props.userRoleControlRights.indexOf(this.props.viewId) === -1}\r\n                                        onClick={() => this.props.viewAdditionalInfo(parameter.ntestgrouptestparametercode)}>\r\n                                        <FontAwesomeIcon icon={faInfoCircle} />\r\n                                    </Nav.Link>  */}\r\n\r\n                            </Col>\r\n                        }\r\n\r\n                    </>\r\n                );\r\n            }\r\n            case 3: {\r\n                return (\r\n                    <>\r\n                        <Col md={10} className=\"pl-0\">\r\n                            <FormTextarea\r\n                                name={parameter.ntestgrouptestparametercode}\r\n                                //label={parameter.sparametersynonym}\r\n                                //placeholder={parameter.sparametersynonym}\r\n                                type=\"text\"\r\n                                defaultValue={parameter.sresult}\r\n                                isMandatory={false}\r\n                                required={false}\r\n                                maxLength={255}\r\n                                onChange={(event) => this.props.onResultInputChange(event, index, parameter)}\r\n                              onBlur={() => this.props.onGradeEvent(this.props.parameterResults, index, parameter)}\r\n                            />\r\n                        </Col>\r\n                        {/* <Col md={2}> \r\n                        {gradeValues[gradeCode]&&\r\n                            <ListWrapper><MediaLabel className=\"labelfont\" style={{ color: gradeValues[gradeCode][0]['scolorhexcode'] }}>\r\n                                {gradeCode === undefined ? \"\" : gradeValues[gradeCode][0]['sgradename']}</MediaLabel></ListWrapper>}\r\n                          \r\n                        </Col>  */}\r\n                    </>\r\n                );\r\n            }\r\n            case 4: {\r\n                return (\r\n                    <Col md={12} className=\"pl-0\">\r\n                        <DropZone\r\n                            maxFiles={1}\r\n                            isMandatory={false}\r\n                            //label={parameter.sparametersynonym}\r\n                            accept=\".pdf\"\r\n                            minSize={0}\r\n                            maxSize={20}\r\n                            multiple={false}\r\n                            editFiles={parameter.sfinal != null ? parameter : \"\"}\r\n                            attachmentTypeCode={attachmentType.FTP}\r\n                            fileSizeName=\"nfilesize\"\r\n                            fileName=\"sfinal\"\r\n                            index={index}\r\n                            deleteAttachment={this.props.deleteAttachmentParamFile}\r\n                            onDrop={(event) => this.props.onResultInputChange(event, index, parameter)}\r\n                        //disabled={disabled}\r\n                        />\r\n                    </Col>\r\n                )\r\n            }\r\n            default:\r\n                return (\"\");\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Row> \r\n                {this.props.parameterResults.map((parameterResult, index) => {\r\n                    return (\r\n                        <>\r\n                            {/* {this.props.needSubSample && parameterResult.ssamplearno ?\r\n                                <MediaHeader className={`labelfont`} style={{ color: \"#007bff\" }}>\r\n                                    {parameterResult.ssamplearno}\r\n                                    {parameterResult.stestsynonym ?\r\n                                        <span className={`labelfont`}\r\n                                            style={{ color: \"#97a0af\", paddingLeft: '0.2rem' }}>\r\n                                            { }{ } {parameterResult.stestsynonym}\r\n                                        </span>\r\n                                        : \"\"}\r\n                                </MediaHeader>\r\n                                : parameterResult.sarno ?\r\n                                    <MediaHeader className={`labelfont`} style={{ color: \"#007bff\" }}>\r\n                                        {parameterResult.sarno}\r\n                                        {parameterResult.stestsynonym ?\r\n                                            <span className={`labelfont`}\r\n                                                style={{ color: \"#97a0af\", paddingLeft: '0.2rem' }}>\r\n                                                { }{ } {parameterResult.stestsynonym}\r\n                                            </span>\r\n                                            : \"\"}\r\n                                    </MediaHeader>\r\n                                    : \"\"\r\n                            } */}\r\n\r\n                            <Col md={12} className=\"pl-0 mt-2\">\r\n                                <MediaHeader className={`labelfont`} style={{ color: \"#505f79\" }}\r\n                                >\r\n                                    { }{ } {parameterResult.sparametersynonym}{ }{ }\r\n                                    {parameterResult.nresultmandatory === transactionStatus.NO ? \"(optional)\" : \"\"}\r\n                                </MediaHeader>\r\n                            </Col>\r\n                            {this.renderSwitch(parameterResult, index, parameterResult.ntestgrouptestparametercode,\r\n                                this.props.screenName)}\r\n                        </>\r\n                    )\r\n                })\r\n                }\r\n            </Row >\r\n        )\r\n    }\r\n}\r\n\r\nexport default injectIntl(TestGroupResultEntry);"]},"metadata":{},"sourceType":"module"}