{"ast":null,"code":"var _jsxFileName = \"D:\\\\LIMSWFH\\\\LIMSPOSTGRESQL\\\\QuaLISWeb\\\\src\\\\pages\\\\basemaster\\\\LicenseAuthority.jsx\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { injectIntl } from 'react-intl';\nimport DataGrid from '../../components/data-grid/data-grid.component';\nimport { callService, crudMaster, validateEsignCredential, updateStore, openLicenseAuthorityModal, fetchLicenseAuthorityById } from '../../actions';\nimport { Row, Col } from 'react-bootstrap';\nimport { toast } from 'react-toastify';\nimport { process } from '@progress/kendo-data-query';\nimport { ListWrapper } from '../../components/client-group.styles';\nimport FormInput from '../../components/form-input/form-input.component';\nimport FormSelectSearch from '../../components/form-select-search/form-select-search.component';\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\nimport Esign from '../audittrail/Esign';\nimport { showEsign, getControlMap } from '../../components/CommonScript';\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\nimport { transactionStatus } from '../../components/Enumeration';\n\nconst mapStateToProps = state => {\n  return {\n    Login: state.Login\n  };\n};\n\nclass LicenseAuthority extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.dataStateChange = event => {\n      this.setState({\n        dataResult: process(this.state.data, event.dataState),\n        dataState: event.dataState\n      });\n    };\n\n    this.closeModal = () => {\n      let loadEsign = this.props.Login.loadEsign;\n      let openModal = this.props.Login.openModal;\n      let selectedRecord = this.props.Login.selectedRecord;\n\n      if (this.props.Login.loadEsign) {\n        if (this.props.Login.operation === \"delete\") {\n          loadEsign = false;\n          openModal = false;\n          selectedRecord = {};\n        } else {\n          loadEsign = false;\n        }\n      } else {\n        openModal = false;\n        selectedRecord = {};\n      }\n\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          openModal,\n          loadEsign,\n          selectedRecord,\n          selectedId: null\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.reloadData = () => {\n      const inputParam = {\n        inputData: {\n          userinfo: this.props.Login.userInfo\n        },\n        methodUrl: this.props.Login.inputParam.methodUrl,\n        classUrl: this.props.Login.inputParam.classUrl,\n        displayName: this.props.Login.inputParam.displayName,\n        userInfo: this.props.Login.userInfo\n      };\n      this.props.callService(inputParam);\n    };\n\n    this.onSaveClick = (saveType, formRef) => {\n      //add \n      let inputData = [];\n      let selectedId = null;\n      inputData[\"userinfo\"] = this.props.Login.userInfo;\n      let dataState = undefined;\n\n      if (this.props.Login.operation === \"update\") {\n        // edit\n        selectedId = this.state.selectedRecord.nauthoritycode;\n        dataState = this.state.dataState;\n        inputData[this.props.Login.inputParam.methodUrl.toLowerCase()] = {\n          nauthoritycode: this.state.selectedRecord.nauthoritycode,\n          sauthorityname: this.state.selectedRecord.sauthorityname,\n          sauthorityshortname: this.state.selectedRecord.sauthorityshortname,\n          ncountrycode: this.state.selectedRecord.ncountrycode,\n          nsitecode: this.props.Login.userInfo.nmastersitecode,\n          nstatus: 1\n        };\n      } else {\n        //add               \n        inputData[this.props.Login.inputParam.methodUrl.toLowerCase()] = {\n          sauthorityname: this.state.selectedRecord.sauthorityname,\n          sauthorityshortname: this.state.selectedRecord.sauthorityshortname,\n          ncountrycode: this.state.selectedRecord.ncountrycode,\n          nsitecode: this.props.Login.userInfo.nmastersitecode,\n          nstatus: 1\n        };\n      }\n\n      const inputParam = {\n        classUrl: this.props.Login.inputParam.classUrl,\n        methodUrl: this.props.Login.inputParam.methodUrl,\n        displayName: this.props.Login.inputParam.displayName,\n        inputData: inputData,\n        operation: this.props.Login.operation,\n        dataState,\n        saveType,\n        formRef,\n        selectedId\n      };\n      const masterData = this.props.Login.masterData;\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolcode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData\n            },\n            saveType,\n            operation: this.props.Login.operation,\n            openModal: true,\n            screenName: this.props.Login.inputParam.displayName\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, masterData, \"openModal\");\n      }\n    };\n\n    this.deleteRecord = deleteParam => {\n      const inputParam = {\n        methodUrl: this.props.Login.inputParam.methodUrl,\n        classUrl: this.props.Login.inputParam.classUrl,\n        displayName: this.props.Login.inputParam.displayName,\n        dataState: this.state.dataState,\n        inputData: {\n          \"licenseauthority\": deleteParam.selectedRecord,\n          \"userinfo\": this.props.Login.userInfo\n        },\n        operation: deleteParam.operation\n      };\n      const masterData = this.props.Login.masterData;\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, deleteParam.ncontrolCode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData\n            },\n            operation: this.props.Login.operation,\n            openModal: true,\n            screenName: this.props.Login.inputParam.displayName\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, masterData, \"openModal\");\n      }\n    };\n\n    this.validateEsign = () => {\n      const inputParam = {\n        inputData: {\n          \"userinfo\": { ...this.props.Login.userInfo,\n            sreason: this.state.selectedRecord[\"esigncomments\"]\n          },\n          password: this.state.selectedRecord[\"esignpassword\"]\n        },\n        screenData: this.props.Login.screenData\n      };\n      this.props.validateEsignCredential(inputParam, \"openModal\");\n    };\n\n    this.onInputOnChange = event => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (event.target.type === 'checkbox') {\n        selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\n      } else {\n        selectedRecord[event.target.name] = event.target.value;\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.extractedColumnList = [];\n    this.fieldList = [];\n    const _dataState = {\n      skip: 0,\n      take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n    };\n    this.state = {\n      data: [],\n      masterStatus: \"\",\n      error: \"\",\n      dataResult: [],\n      dataState: _dataState,\n      selectedRecord: {},\n      userRoleControlRights: [],\n      controlMap: new Map()\n    };\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\n      toast.warn(props.Login.masterStatus);\n      props.Login.masterStatus = \"\";\n    }\n\n    if (props.Login.error !== state.error) {\n      toast.error(props.Login.error);\n      props.Login.error = \"\";\n    }\n\n    if (props.Login.selectedRecord === undefined) {\n      return {\n        selectedRecord: {}\n      };\n    }\n\n    return null;\n  }\n\n  render() {\n    let primaryKeyField = \"\";\n\n    if (this.props.Login.inputParam !== undefined) {\n      //this.extractedColumnList =[\"sauthorityname\",\"sauthorityshortname\",\"scountryname\",\"scountryshortname\"]\n      this.extractedColumnList = [{\n        \"idsName\": \"IDS_AUTHORITYNAME\",\n        \"dataField\": \"sauthorityname\",\n        \"width\": \"200px\"\n      }, {\n        \"idsName\": \"IDS_AUTHORITYSHORTNAME\",\n        \"dataField\": \"sauthorityshortname\",\n        \"width\": \"200px\"\n      }, {\n        \"idsName\": \"IDS_COUNTRY\",\n        \"dataField\": \"scountryname\",\n        \"width\": \"200px\"\n      }, {\n        \"idsName\": \"IDS_COUNTRYSHORTNAME\",\n        \"dataField\": \"scountryshortname\",\n        \"width\": \"200px\"\n      }];\n      primaryKeyField = \"nauthoritycode\";\n    }\n\n    const addID = this.props.Login.inputParam && this.state.controlMap.has(\"AddLicenseAuthority\") && this.state.controlMap.get('AddLicenseAuthority').ncontrolcode;\n    const editID = this.props.Login.inputParam && this.state.controlMap.has(\"EditLicenseAuthority\") && this.state.controlMap.get('EditLicenseAuthority').ncontrolcode;\n    const editParam = {\n      screenName: this.props.Login.inputParam ? this.props.Login.inputParam.displayName : '',\n      operation: \"update\",\n      primaryKeyField,\n      masterData: this.props.Login.masterData,\n      userInfo: this.props.Login.userInfo,\n      ncontrolCode: editID,\n      inputparam: this.props.Login.inputparam\n    };\n    const deleteParam = {\n      screenName: this.props.Login.inputParam ? this.props.Login.inputParam.displayName : '',\n      methodUrl: this.props.Login.inputParam ? this.props.Login.inputParam.methodUrl : '',\n      operation: \"delete\"\n    };\n    const mandatoryFields = [{\n      \"idsName\": \"IDS_AUTHORITYNAME\",\n      \"dataField\": \"sauthorityname\",\n      \"mandatoryLabel\": \"IDS_ENTER\",\n      \"controlType\": \"textbox\"\n    }, {\n      \"idsName\": \"IDS_AUTHORITYSHORTNAME\",\n      \"dataField\": \"sauthorityshortname\",\n      \"mandatoryLabel\": \"IDS_ENTER\",\n      \"controlType\": \"textbox\"\n    }, {\n      \"idsName\": \"IDS_COUNTRY\",\n      \"dataField\": \"countryValue\",\n      \"mandatoryLabel\": \"IDS_ENTER\",\n      \"controlType\": \"textbox\"\n    }];\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(ListWrapper, {\n      className: \"client-list-content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 21\n      }\n    }, this.state.data ? /*#__PURE__*/React.createElement(DataGrid, {\n      primaryKeyField: primaryKeyField,\n      data: this.state.data,\n      dataResult: this.state.dataResult,\n      dataState: this.state.dataState,\n      dataStateChange: this.dataStateChange,\n      extractedColumnList: this.extractedColumnList,\n      fetchRecord: this.props.fetchLicenseAuthorityById,\n      deleteRecord: this.deleteRecord,\n      reloadData: this.reloadData,\n      pageable: {\n        buttonCount: 4,\n        pageSizes: true\n      },\n      gridHeight: '600px' // isComponent={true}\n      //pageable={false}\n      ,\n      controlMap: this.state.controlMap,\n      userRoleControlRights: this.state.userRoleControlRights,\n      inputParam: this.props.Login.inputParam,\n      userInfo: this.props.Login.userInfo,\n      isActionRequired: true,\n      isToolBarRequired: true,\n      editParam: editParam,\n      deleteParam: deleteParam,\n      scrollable: 'scrollable',\n      selectedId: this.props.Login.selectedId,\n      addRecord: () => this.props.openLicenseAuthorityModal(this.props.Login.userInfo, addID),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 29\n      }\n    }) : \"\"))), this.props.Login.openModal ? /*#__PURE__*/React.createElement(SlideOutModal, {\n      onSaveClick: this.onSaveClick,\n      operation: this.props.Login.operation,\n      screenName: \"IDS_LICENSEAUTHORITY\",\n      closeModal: this.closeModal,\n      show: this.props.Login.openModal,\n      inputParam: this.props.Login.inputParam,\n      esign: this.props.Login.loadEsign,\n      validateEsign: this.validateEsign,\n      selectedRecord: this.state.selectedRecord || {},\n      mandatoryFields: mandatoryFields,\n      addComponent: this.props.Login.loadEsign ? /*#__PURE__*/React.createElement(Esign, {\n        operation: this.props.Login.operation,\n        onInputOnChange: event => this.onInputOnChange(event),\n        inputParam: this.props.Login.inputParam,\n        selectedRecord: this.state.selectedRecord || {},\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 293,\n          columnNumber: 25\n        }\n      }) : /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 299,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(Col, {\n        md: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 300,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(FormInput, {\n        label: this.props.intl.formatMessage({\n          id: \"IDS_AUTHORITYNAME\"\n        }),\n        name: \"sauthorityname\",\n        type: \"text\",\n        onChange: event => this.onInputOnChange(event),\n        placeholder: this.props.intl.formatMessage({\n          id: \"IDS_AUTHORITYNAME\"\n        }),\n        value: this.state.selectedRecord ? this.state.selectedRecord[\"sauthorityname\"] : \"\",\n        isMandatory: true,\n        required: true,\n        maxLength: 100,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 301,\n          columnNumber: 33\n        }\n      }), /*#__PURE__*/React.createElement(FormInput, {\n        label: this.props.intl.formatMessage({\n          id: \"IDS_AUTHORITYSHORTNAME\"\n        }),\n        name: \"sauthorityshortname\",\n        type: \"text\",\n        onChange: event => this.onInputOnChange(event),\n        placeholder: this.props.intl.formatMessage({\n          id: \"IDS_AUTHORITYSHORTNAME\"\n        }),\n        value: this.state.selectedRecord ? this.state.selectedRecord[\"sauthorityshortname\"] : \"\",\n        isMandatory: true,\n        required: true,\n        maxLength: 10,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 312,\n          columnNumber: 33\n        }\n      }), /*#__PURE__*/React.createElement(FormSelectSearch, {\n        name: \"ncountrycode\",\n        formLabel: this.props.intl.formatMessage({\n          id: \"IDS_COUNTRY\"\n        }),\n        placeholder: this.props.intl.formatMessage({\n          id: \"IDS_SELECTRECORD\"\n        }),\n        value: this.state.selectedRecord.countryValue ? this.state.selectedRecord.countryValue : [],\n        options: this.props.Login.countryOptions ? this.props.Login.countryOptions : [],\n        optionId: \"ncountrycode\",\n        optionValue: \"scountryname\",\n        isMandatory: true,\n        required: true,\n        as: \"select\",\n        onChange: event => this.onComboChange(event, \"ncountrycode\"),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 323,\n          columnNumber: 33\n        }\n      }), /*#__PURE__*/React.createElement(FormInput, {\n        label: this.props.intl.formatMessage({\n          id: \"IDS_COUNTRYSHORTNAME\"\n        }),\n        name: \"scountryshortname\",\n        type: \"text\",\n        placeholder: this.props.intl.formatMessage({\n          id: \"IDS_COUNTRYSHORTNAME\"\n        }),\n        value: this.state.selectedRecord.countryShortName ? this.state.selectedRecord.countryShortName : \"\",\n        isMandatory: false,\n        required: false,\n        isDisabled: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 336,\n          columnNumber: 33\n        }\n      }))),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 281,\n        columnNumber: 17\n      }\n    }) : \"\");\n  }\n\n  componentDidUpdate(previousProps) {\n    if (this.props.Login.masterData !== previousProps.Login.masterData) {\n      if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\n        const userRoleControlRights = [];\n\n        if (this.props.Login.userRoleControlRights) {\n          this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item => userRoleControlRights.push(item.ncontrolcode));\n        }\n\n        const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode);\n        this.setState({\n          userRoleControlRights,\n          controlMap,\n          data: this.props.Login.masterData,\n          dataResult: process(this.props.Login.masterData, this.state.dataState)\n        });\n      } else {\n        let {\n          dataState\n        } = this.state;\n\n        if (this.props.Login.dataState === undefined) {\n          dataState = {\n            skip: 0,\n            take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n          };\n        }\n\n        this.setState({\n          data: this.props.Login.masterData,\n          dataResult: process(this.props.Login.masterData, dataState),\n          dataState\n        });\n      }\n    }\n\n    if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\n      this.setState({\n        selectedRecord: this.props.Login.selectedRecord\n      });\n    }\n  }\n\n  componentWillUnmount() {\n    const updateInfo = {\n      typeName: DEFAULT_RETURN,\n      data: {\n        masterData: [],\n        inputParam: undefined,\n        operation: null,\n        modalName: undefined\n      }\n    };\n    this.props.updateStore(updateInfo);\n  }\n\n  onComboChange(comboData, fieldName) {\n    const selectedRecord = this.state.selectedRecord || {};\n\n    if (comboData) {\n      selectedRecord['countryValue'] = comboData;\n      selectedRecord['countryShortName'] = comboData.item.scountryshortname;\n      selectedRecord[fieldName] = comboData.value;\n    } else {\n      selectedRecord['countryValue'] = [];\n      selectedRecord['countryShortName'] = \"\";\n      selectedRecord[fieldName] = \"\";\n    }\n\n    this.setState({\n      selectedRecord\n    });\n  }\n\n}\n\nexport default connect(mapStateToProps, {\n  callService,\n  crudMaster,\n  validateEsignCredential,\n  updateStore,\n  openLicenseAuthorityModal,\n  fetchLicenseAuthorityById\n})(injectIntl(LicenseAuthority));","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/pages/basemaster/LicenseAuthority.jsx"],"names":["React","connect","injectIntl","DataGrid","callService","crudMaster","validateEsignCredential","updateStore","openLicenseAuthorityModal","fetchLicenseAuthorityById","Row","Col","toast","process","ListWrapper","FormInput","FormSelectSearch","SlideOutModal","Esign","showEsign","getControlMap","DEFAULT_RETURN","transactionStatus","mapStateToProps","state","Login","LicenseAuthority","Component","constructor","props","dataStateChange","event","setState","dataResult","data","dataState","closeModal","loadEsign","openModal","selectedRecord","operation","updateInfo","typeName","selectedId","reloadData","inputParam","inputData","userinfo","userInfo","methodUrl","classUrl","displayName","onSaveClick","saveType","formRef","undefined","nauthoritycode","toLowerCase","sauthorityname","sauthorityshortname","ncountrycode","nsitecode","nmastersitecode","nstatus","masterData","userRoleControlRights","nformcode","ncontrolcode","screenData","screenName","deleteRecord","deleteParam","ncontrolCode","validateEsign","sreason","password","onInputOnChange","target","type","name","checked","YES","NO","value","extractedColumnList","fieldList","skip","take","settings","parseInt","masterStatus","error","controlMap","Map","getDerivedStateFromProps","warn","render","primaryKeyField","addID","has","get","editID","editParam","inputparam","mandatoryFields","buttonCount","pageSizes","intl","formatMessage","id","countryValue","countryOptions","onComboChange","countryShortName","componentDidUpdate","previousProps","Object","values","map","item","push","componentWillUnmount","modalName","comboData","fieldName","scountryshortname"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { injectIntl } from 'react-intl';\r\nimport DataGrid from '../../components/data-grid/data-grid.component';\r\nimport { callService, crudMaster ,validateEsignCredential,updateStore,openLicenseAuthorityModal,fetchLicenseAuthorityById} from '../../actions';\r\nimport {Row, Col} from 'react-bootstrap';\r\nimport { toast } from 'react-toastify';\r\nimport { process } from '@progress/kendo-data-query';\r\nimport {ListWrapper } from '../../components/client-group.styles'\r\nimport FormInput from '../../components/form-input/form-input.component';\r\nimport FormSelectSearch from '../../components/form-select-search/form-select-search.component';\r\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\r\nimport Esign from '../audittrail/Esign';\r\nimport {showEsign,getControlMap} from '../../components/CommonScript'\r\nimport {DEFAULT_RETURN} from '../../actions/LoginTypes'\r\nimport { transactionStatus } from '../../components/Enumeration';\r\n\r\nconst mapStateToProps = state => {\r\n    return ({ Login: state.Login })\r\n}\r\nclass LicenseAuthority extends React.Component{\r\n    constructor(props) {\r\n        super(props);\r\n        this.extractedColumnList = [];\r\n        this.fieldList = [];\r\n        const dataState = {\r\n            skip: 0,\r\n            take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5,\r\n        };\r\n        this.state = {\r\n            data: [], masterStatus: \"\", error: \"\",\r\n            dataResult: [],\r\n            dataState: dataState,\r\n            selectedRecord:{},userRoleControlRights:[],controlMap:new Map()\r\n        };\r\n    }\r\n    dataStateChange = (event) => {\r\n        this.setState({\r\n            dataResult: process(this.state.data, event.dataState),\r\n            dataState: event.dataState\r\n        });\r\n    }\r\n    \r\n    closeModal = () =>{\r\n        let loadEsign = this.props.Login.loadEsign;\r\n        let openModal = this.props.Login.openModal;\r\n        let selectedRecord = this.props.Login.selectedRecord;\r\n        if (this.props.Login.loadEsign){          \r\n            if (this.props.Login.operation === \"delete\"){\r\n                loadEsign = false;\r\n                openModal =  false;\r\n                selectedRecord ={};\r\n            }\r\n            else{\r\n                loadEsign = false;\r\n            }\r\n        }\r\n        else{\r\n            openModal =  false;\r\n            selectedRecord ={};\r\n        }\r\n\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {openModal, loadEsign, selectedRecord, selectedId:null}\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n    static getDerivedStateFromProps(props, state){\r\n    \r\n        if (props.Login.masterStatus !== \"\"  && props.Login.masterStatus !== state.masterStatus) {\r\n            toast.warn(props.Login.masterStatus);\r\n            props.Login.masterStatus = \"\";           \r\n        } \r\n         \r\n        if (props.Login.error !== state.error){\r\n            toast.error(props.Login.error)\r\n            props.Login.error = \"\";\r\n        }   \r\n        if (props.Login.selectedRecord === undefined){\r\n            return {selectedRecord:{}}\r\n        }\r\n        return null;\r\n     }  \r\n     reloadData = () =>{\r\n        const inputParam = {\r\n            inputData : { userinfo: this.props.Login.userInfo},\r\n            methodUrl: this.props.Login.inputParam.methodUrl,\r\n            classUrl: this.props.Login.inputParam.classUrl,\r\n            displayName:this.props.Login.inputParam.displayName,\r\n            userInfo: this.props.Login.userInfo\r\n            };\r\n                            \r\n        this.props.callService(inputParam);\r\n    }\r\n    onSaveClick = (saveType,formRef) => {\r\n        \r\n        //add \r\n\r\n        let inputData = [];\r\n        let selectedId=null;\r\n        inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n        let dataState=undefined;\r\n        if (this.props.Login.operation === \"update\") {\r\n            // edit\r\n            selectedId=this.state.selectedRecord.nauthoritycode\r\n            dataState=this.state.dataState;\r\n            inputData[this.props.Login.inputParam.methodUrl.toLowerCase()] = {\r\n                nauthoritycode:this.state.selectedRecord.nauthoritycode,\r\n                sauthorityname: this.state.selectedRecord.sauthorityname,\r\n                sauthorityshortname:this.state.selectedRecord.sauthorityshortname,\r\n                ncountrycode:this.state.selectedRecord.ncountrycode,\r\n                nsitecode:this.props.Login.userInfo.nmastersitecode,\r\n                nstatus:1\r\n\r\n            }\r\n            \r\n        }\r\n        else {\r\n            //add               \r\n            inputData[this.props.Login.inputParam.methodUrl.toLowerCase()] = {\r\n                sauthorityname: this.state.selectedRecord.sauthorityname,\r\n                sauthorityshortname:this.state.selectedRecord.sauthorityshortname,\r\n                ncountrycode:this.state.selectedRecord.ncountrycode,\r\n                nsitecode:this.props.Login.userInfo.nmastersitecode,\r\n                nstatus:1\r\n\r\n            }\r\n        }\r\n\r\n        const inputParam = {\r\n            classUrl: this.props.Login.inputParam.classUrl,\r\n            methodUrl: this.props.Login.inputParam.methodUrl,\r\n            displayName:this.props.Login.inputParam.displayName,\r\n            inputData: inputData,\r\n            operation: this.props.Login.operation,\r\n            dataState,saveType,formRef,selectedId\r\n        }\r\n\r\n        const masterData = this.props.Login.masterData;\r\n        \r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolcode)){\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign:true, screenData:{inputParam, masterData}, saveType,\r\n                    operation:this.props.Login.operation,openModal:true,\r\n                    screenName:this.props.Login.inputParam.displayName\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else{\r\n            this.props.crudMaster(inputParam, masterData, \"openModal\");\r\n       }\r\n        \r\n    }\r\n    deleteRecord = (deleteParam) =>{\r\n        const inputParam = {\r\n            methodUrl: this.props.Login.inputParam.methodUrl,\r\n            classUrl: this.props.Login.inputParam.classUrl,\r\n            displayName:this.props.Login.inputParam.displayName,\r\n            dataState:this.state.dataState,\r\n            inputData: {\r\n                \"licenseauthority\" :deleteParam.selectedRecord,\r\n                \"userinfo\": this.props.Login.userInfo},\r\n            operation:deleteParam.operation     \r\n            }       \r\n            const masterData = this.props.Login.masterData;\r\n\r\n            if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, deleteParam.ncontrolCode)){\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        loadEsign:true, screenData:{inputParam, masterData}, \r\n                        operation:this.props.Login.operation,openModal:true,\r\n                        screenName:this.props.Login.inputParam.displayName\r\n                    }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n            else{\r\n                this.props.crudMaster(inputParam, masterData, \"openModal\");\r\n            }\r\n    }\r\n    validateEsign = () =>{\r\n        const inputParam = {\r\n            inputData: {\"userinfo\": {...this.props.Login.userInfo, \r\n                                    sreason: this.state.selectedRecord[\"esigncomments\"] },\r\n                            password : this.state.selectedRecord[\"esignpassword\"]\r\n                        },\r\n            screenData : this.props.Login.screenData\r\n        }        \r\n        this.props.validateEsignCredential(inputParam, \"openModal\");\r\n    }\r\n    render(){\r\n        let primaryKeyField = \"\";\r\n        if (this.props.Login.inputParam !== undefined){\r\n            //this.extractedColumnList =[\"sauthorityname\",\"sauthorityshortname\",\"scountryname\",\"scountryshortname\"]\r\n            this.extractedColumnList=[\r\n                {\"idsName\":\"IDS_AUTHORITYNAME\",\"dataField\":\"sauthorityname\",\"width\":\"200px\"},\r\n                {\"idsName\":\"IDS_AUTHORITYSHORTNAME\",\"dataField\":\"sauthorityshortname\",\"width\":\"200px\"},\r\n                {\"idsName\":\"IDS_COUNTRY\",\"dataField\":\"scountryname\",\"width\":\"200px\"},\r\n                {\"idsName\":\"IDS_COUNTRYSHORTNAME\",\"dataField\":\"scountryshortname\",\"width\":\"200px\"}\r\n            ]\r\n            primaryKeyField = \"nauthoritycode\";\r\n        }\r\n        const addID = this.props.Login.inputParam && this.state.controlMap.has(\"AddLicenseAuthority\")\r\n                        && this.state.controlMap.get('AddLicenseAuthority').ncontrolcode;\r\n        const editID = this.props.Login.inputParam && this.state.controlMap.has(\"EditLicenseAuthority\")\r\n                        && this.state.controlMap.get('EditLicenseAuthority').ncontrolcode;\r\n        const editParam={\r\n            screenName:this.props.Login.inputParam?this.props.Login.inputParam.displayName:'', \r\n            operation:\"update\", \r\n            primaryKeyField,\r\n            masterData:this.props.Login.masterData,\r\n            userInfo:this.props.Login.userInfo,\r\n            ncontrolCode:editID,\r\n            inputparam:this.props.Login.inputparam,\r\n        }\r\n        const deleteParam={\r\n            screenName:this.props.Login.inputParam?this.props.Login.inputParam.displayName:'',\r\n            methodUrl: this.props.Login.inputParam? this.props.Login.inputParam.methodUrl:'', \r\n            operation:\"delete\"\r\n        }\r\n        const mandatoryFields=[\r\n            {\"idsName\":\"IDS_AUTHORITYNAME\",\"dataField\":\"sauthorityname\" , \"mandatoryLabel\":\"IDS_ENTER\", \"controlType\": \"textbox\"},\r\n            {\"idsName\":\"IDS_AUTHORITYSHORTNAME\",\"dataField\":\"sauthorityshortname\" , \"mandatoryLabel\":\"IDS_ENTER\", \"controlType\": \"textbox\"},\r\n            {\"idsName\":\"IDS_COUNTRY\",\"dataField\":\"countryValue\" , \"mandatoryLabel\":\"IDS_ENTER\", \"controlType\": \"textbox\"}\r\n        ]\r\n        return(\r\n            <>\r\n            <Row>\r\n                <Col>\r\n                    <ListWrapper className=\"client-list-content\">\r\n                        {/*<PrimaryHeader className=\"d-flex justify-content-between mb-3\">\r\n                             <HeaderName className=\"header-primary-md\">\r\n                                {this.props.Login.inputParam ? \r\n                                <FormattedMessage id={this.props.Login.inputParam.displayName} /> :\"\"}\r\n                            </HeaderName> \r\n                            <Button className=\"btn btn-user btn-primary-blue\" \r\n                                hidden={this.state.userRoleControlRights.indexOf(addID) === -1} \r\n                                onClick={()=>this.props.openLicenseAuthorityModal(this.props.Login.userInfo,addID)} role=\"button\">\r\n                                <FontAwesomeIcon icon={faPlus} /> { }                          \r\n                                <FormattedMessage id=\"IDS_ADD\" defaultMessage='Add'/> \r\n                                </Button>\r\n                        </PrimaryHeader>*/}\r\n                        {this.state.data ? \r\n                            <DataGrid\r\n                                primaryKeyField = {primaryKeyField}\r\n                                data = {this.state.data}\r\n                                dataResult = {this.state.dataResult}\r\n                                dataState = {this.state.dataState}\r\n                                dataStateChange = {this.dataStateChange}\r\n                                extractedColumnList = {this.extractedColumnList}\r\n                                fetchRecord = {this.props.fetchLicenseAuthorityById}\r\n                                deleteRecord = {this.deleteRecord}\r\n                                reloadData = {this.reloadData}\r\n                                pageable={{ buttonCount: 4, pageSizes: true }}\r\n                                gridHeight = {'600px'}\r\n                                // isComponent={true}\r\n                                //pageable={false}\r\n                                controlMap = {this.state.controlMap}\r\n                                userRoleControlRights={this.state.userRoleControlRights}\r\n                                inputParam={this.props.Login.inputParam}\r\n                                userInfo={this.props.Login.userInfo}\r\n                                isActionRequired={true}\r\n                                isToolBarRequired={true}\r\n                                editParam={editParam}\r\n                                deleteParam={deleteParam}\r\n                                scrollable={'scrollable'}\r\n                                selectedId={this.props.Login.selectedId}\r\n                                addRecord = {() => this.props.openLicenseAuthorityModal(this.props.Login.userInfo,addID)}\r\n                            />\r\n                        :\"\"}    \r\n                        \r\n                    </ListWrapper>\r\n                </Col>\r\n            </Row>\r\n            {this.props.Login.openModal ? \r\n                <SlideOutModal\r\n                onSaveClick={this.onSaveClick}\r\n                operation={this.props.Login.operation}\r\n                screenName=\"IDS_LICENSEAUTHORITY\"\r\n                closeModal={this.closeModal}\r\n                show={this.props.Login.openModal}\r\n                inputParam={this.props.Login.inputParam}\r\n                esign={this.props.Login.loadEsign}\r\n                validateEsign={this.validateEsign}\r\n                selectedRecord={this.state.selectedRecord || {}}\r\n                mandatoryFields={mandatoryFields}\r\n                addComponent={this.props.Login.loadEsign ? \r\n                        <Esign  operation={this.props.Login.operation}\r\n                            onInputOnChange={(event)=>this.onInputOnChange(event)}\r\n                            inputParam={this.props.Login.inputParam}                                               \r\n                            selectedRecord={this.state.selectedRecord ||{}}\r\n                            />\r\n                        :\r\n                        <Row>                                \r\n                            <Col md={12}>\r\n                                <FormInput\r\n                                    label={this.props.intl.formatMessage({ id:\"IDS_AUTHORITYNAME\"})}\r\n                                    name={\"sauthorityname\"}\r\n                                    type=\"text\"\r\n                                    onChange={(event)=>this.onInputOnChange(event)}\r\n                                    placeholder={this.props.intl.formatMessage({ id:\"IDS_AUTHORITYNAME\"})}\r\n                                    value ={this.state.selectedRecord ? this.state.selectedRecord[\"sauthorityname\"] : \"\"}\r\n                                    isMandatory={true}\r\n                                    required={ true}\r\n                                    maxLength={100}\r\n                                />\r\n                                <FormInput\r\n                                    label={this.props.intl.formatMessage({ id:\"IDS_AUTHORITYSHORTNAME\"})}\r\n                                    name={\"sauthorityshortname\"}\r\n                                    type=\"text\"\r\n                                    onChange={(event)=>this.onInputOnChange(event)}\r\n                                    placeholder={this.props.intl.formatMessage({ id:\"IDS_AUTHORITYSHORTNAME\"})}\r\n                                    value ={this.state.selectedRecord ? this.state.selectedRecord[\"sauthorityshortname\"] : \"\"}\r\n                                    isMandatory={true}\r\n                                    required={ true}\r\n                                    maxLength={10}\r\n                                />\r\n                                <FormSelectSearch\r\n                                    name={\"ncountrycode\"}\r\n                                    formLabel={this.props.intl.formatMessage({ id:\"IDS_COUNTRY\"})}\r\n                                    placeholder={this.props.intl.formatMessage({ id:\"IDS_SELECTRECORD\"})}\r\n                                    value={this.state.selectedRecord.countryValue?this.state.selectedRecord.countryValue:[]}\r\n                                    options={this.props.Login.countryOptions?this.props.Login.countryOptions:[]}\r\n                                    optionId=\"ncountrycode\"\r\n                                    optionValue=\"scountryname\"\r\n                                    isMandatory={true}\r\n                                    required={true}\r\n                                    as={\"select\"}\r\n                                    onChange={(event)=>this.onComboChange(event,\"ncountrycode\")}\r\n                                />\r\n                                <FormInput\r\n                                    label={this.props.intl.formatMessage({ id:\"IDS_COUNTRYSHORTNAME\"})}\r\n                                    name={\"scountryshortname\"}\r\n                                    type=\"text\"\r\n                                    placeholder={this.props.intl.formatMessage({ id:\"IDS_COUNTRYSHORTNAME\"})}\r\n                                    value ={this.state.selectedRecord.countryShortName?this.state.selectedRecord.countryShortName:\"\"}\r\n                                    isMandatory={false}\r\n                                    required={ false}\r\n                                    isDisabled={true}\r\n                                />\r\n                            </Col>\r\n                        </Row>\r\n                }/>\r\n                :\"\"}\r\n            </>\r\n        );\r\n    }\r\n    componentDidUpdate(previousProps){\r\n        if (this.props.Login.masterData !== previousProps.Login.masterData){            \r\n            if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode){\r\n                const userRoleControlRights = [];\r\n                if (this.props.Login.userRoleControlRights){\r\n                    this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item=>\r\n                        userRoleControlRights.push(item.ncontrolcode))\r\n                }\r\n                const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode)\r\n                this.setState({userRoleControlRights, controlMap, data:this.props.Login.masterData, \r\n                    dataResult: process(this.props.Login.masterData, this.state.dataState),});\r\n            }\r\n            else{\r\n                let {dataState}=this.state;\r\n                if(this.props.Login.dataState===undefined){\r\n                    dataState={skip:0,take:this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5}\r\n                } \r\n                this.setState({data:this.props.Login.masterData, \r\n                    dataResult: process(this.props.Login.masterData, dataState),\r\n                    dataState\r\n                });\r\n            }\r\n         }\r\n         if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord ){    \r\n            this.setState({selectedRecord:this.props.Login.selectedRecord});\r\n         }       \r\n    }      \r\n    componentWillUnmount(){\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                 masterData :[], inputParam:undefined, operation:null,modalName:undefined\r\n                }\r\n            }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n    onInputOnChange=(event)=>  {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if (event.target.type === 'checkbox')\r\n        {\r\n            selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\r\n        }\r\n        else{\r\n            selectedRecord[event.target.name] = event.target.value;\r\n        }\r\n        this.setState({selectedRecord});\r\n    }\r\n    onComboChange(comboData,fieldName)  {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if(comboData){     \r\n            selectedRecord['countryValue']=comboData;\r\n            selectedRecord['countryShortName']=comboData.item.scountryshortname;\r\n            selectedRecord[fieldName] = comboData.value;\r\n        }else{\r\n            selectedRecord['countryValue']=[];\r\n            selectedRecord['countryShortName']=\"\";\r\n            selectedRecord[fieldName] = \"\";\r\n        }\r\n        this.setState({selectedRecord});\r\n    }\r\n}\r\nexport default connect(mapStateToProps, { callService, crudMaster,validateEsignCredential,updateStore,openLicenseAuthorityModal,fetchLicenseAuthorityById})(injectIntl(LicenseAuthority));"]},"metadata":{},"sourceType":"module"}