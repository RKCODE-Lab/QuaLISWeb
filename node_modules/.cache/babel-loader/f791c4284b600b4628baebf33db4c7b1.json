{"ast":null,"code":"import rsapi from '../rsapi';\nimport { DEFAULT_RETURN } from './LoginTypes';\nimport { toast } from 'react-toastify';\nimport Axios from 'axios';\nimport { initRequest } from './LoginAction';\nimport { transactionStatus } from '../components/Enumeration';\nimport { constructOptionList } from '../components/CommonScript';\nexport function openFTPConfigModal(userInfo, ncontrolcode) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    const uiArray = [rsapi.post(\"site/getSiteForFTP\", {\n      \"userinfo\": userInfo\n    })];\n    uiArray.push(rsapi.post(\"ftpconfig/getFTPType\", {\n      \"userinfo\": userInfo\n    }));\n    Axios.all(uiArray).then(response => {\n      const selectedRecord = {}; //const siteList = response[0].data[\"SiteList\"] || [];\n      // const siteListMap = constructOptionList(response[0].data.SiteList,'nsitecode','ssitename',undefined, undefined, undefined,\n      // 'ndefaultstatus') || [];\n\n      const ftpTypeListMap = constructOptionList(response[1].data, 'nftptypecode', 'sftptypename', undefined, undefined, undefined, 'ndefaultstatus') || [];\n      const ftpTypeList = ftpTypeListMap.get(\"OptionList\");\n      const defaultftpTypeList = ftpTypeListMap.get(\"DefaultValue\"); //const siteList = siteListMap.get(\"OptionList\");\n\n      selectedRecord['nftptypecode'] = defaultftpTypeList; // selectedRecord['siteValue']=siteList.length>0? siteList[0].ndefaultstatus===transactionStatus.YES?  \n      //                             [{value:siteList[0].nsitecode,label:siteList[0].ssitename,item:siteList[0]}]\n      //                             :[]:[]\n\n      selectedRecord[\"sphysicalpath\"] = response[0].data[\"CheckSumDefaultPath\"];\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          openModal: true,\n          operation: \"create\",\n          // siteOptions:siteList,\n          ftpTypeList,\n          checkSumDefaultPath: response[0].data[\"CheckSumDefaultPath\"],\n          selectedRecord,\n          ncontrolcode,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\n;\nexport function fetchFTPConfigByID(editParam) {\n  return function (dispatch) {\n    const url1 = rsapi.post(\"site/getSiteForFTP\", {\n      \"userinfo\": editParam.userInfo\n    });\n    const url2 = rsapi.post(\"ftpconfig/getActiveFTPConfigById\", {\n      [editParam.primaryKeyField]: editParam.primaryKeyValue,\n      \"userinfo\": editParam.userInfo\n    });\n    const url3 = rsapi.post(\"ftpconfig/getFTPType\", {\n      \"userinfo\": editParam.userInfo\n    });\n    dispatch(initRequest(true));\n    Axios.all([url1, url2, url3]).then(response => {\n      let selectedId = editParam.primaryKeyValue;\n      let selectedRecord = response[1].data; // const siteListMap = constructOptionList(response[0].data.SiteList,'nsitecode','ssitename',undefined, undefined, undefined,\n      // false) || [];\n      // const siteList = siteListMap.get(\"OptionList\");\n\n      selectedRecord['nsitecode'] = {\n        value: response[1].data.nsitecode,\n        label: response[1].data.ssitename\n      };\n      selectedRecord['nftptypecode'] = {\n        value: response[1].data.nftptypecode,\n        label: response[1].data.sftptypename\n      };\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          openModal: true,\n          selectedRecord,\n          ftpTypeList: constructOptionList(response[2].data, 'nftptypecode', 'sftptypename').get(\"OptionList\"),\n          operation: editParam.operation,\n          screenName: editParam.screenName,\n          //siteOptions:response[0].data,\n          siteOptions: constructOptionList(response[0].data.SiteList, 'nsitecode', 'ssitename').get(\"OptionList\"),\n          //:siteList,\n          ncontrolcode: editParam.ncontrolCode,\n          inputparam: editParam.inputparam,\n          loading: false,\n          selectedId\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}","map":{"version":3,"sources":["E:/WorkingFolder/React_Postgres/ALPD/branches/SOURCE-513-PROD/QuaLISWeb/src/actions/FTPConfigAction.js"],"names":["rsapi","DEFAULT_RETURN","toast","Axios","initRequest","transactionStatus","constructOptionList","openFTPConfigModal","userInfo","ncontrolcode","dispatch","uiArray","post","push","all","then","response","selectedRecord","ftpTypeListMap","data","undefined","ftpTypeList","get","defaultftpTypeList","type","payload","openModal","operation","checkSumDefaultPath","loading","catch","error","status","message","warn","fetchFTPConfigByID","editParam","url1","url2","primaryKeyField","primaryKeyValue","url3","selectedId","value","nsitecode","label","ssitename","nftptypecode","sftptypename","screenName","siteOptions","SiteList","ncontrolCode","inputparam"],"mappings":"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","sourcesContent":["import rsapi from '../rsapi';\r\nimport {DEFAULT_RETURN} from './LoginTypes';\r\nimport { toast } from 'react-toastify';\r\nimport Axios from 'axios'\r\nimport { initRequest } from './LoginAction';\r\nimport { transactionStatus } from '../components/Enumeration';\r\nimport { constructOptionList } from '../components/CommonScript';\r\n\r\nexport function openFTPConfigModal  (userInfo,ncontrolcode)  {\r\n\r\n    return function(dispatch){\r\n    dispatch(initRequest(true));\r\n   const uiArray=[rsapi.post(\"site/getSiteForFTP\",{\"userinfo\": userInfo})]\r\n   uiArray.push(rsapi.post(\"ftpconfig/getFTPType\",{\"userinfo\": userInfo}))\r\n   Axios.all(uiArray).then(response=> { \r\n        const selectedRecord={};\r\n        //const siteList = response[0].data[\"SiteList\"] || [];\r\n        // const siteListMap = constructOptionList(response[0].data.SiteList,'nsitecode','ssitename',undefined, undefined, undefined,\r\n        // 'ndefaultstatus') || [];\r\n        const ftpTypeListMap =constructOptionList(response[1].data,'nftptypecode','sftptypename',undefined, undefined, undefined,\r\n        'ndefaultstatus') || [];\r\n        const ftpTypeList =ftpTypeListMap.get(\"OptionList\");\r\n        const defaultftpTypeList =ftpTypeListMap.get(\"DefaultValue\");\r\n\r\n        //const siteList = siteListMap.get(\"OptionList\");\r\n      \r\n        selectedRecord['nftptypecode']=defaultftpTypeList\r\n\r\n        // selectedRecord['siteValue']=siteList.length>0? siteList[0].ndefaultstatus===transactionStatus.YES?  \r\n        //                             [{value:siteList[0].nsitecode,label:siteList[0].ssitename,item:siteList[0]}]\r\n        //                             :[]:[]\r\n        selectedRecord[\"sphysicalpath\"]= response[0].data[\"CheckSumDefaultPath\"];\r\n        dispatch({\r\n            type: DEFAULT_RETURN, payload:{\r\n                openModal:true,\r\n                operation:\"create\",\r\n               // siteOptions:siteList,\r\n                ftpTypeList,\r\n                checkSumDefaultPath: response[0].data[\"CheckSumDefaultPath\"],\r\n                selectedRecord,ncontrolcode    \r\n                ,loading:false           \r\n                }\r\n            }) \r\n    })\r\n    .catch(error => {\r\n        dispatch({type: DEFAULT_RETURN, payload: {loading:false}})\r\n        if (error.response.status === 500){\r\n            toast.error(error.message);\r\n        } \r\n        else{               \r\n            toast.warn(error.response.data);\r\n        }         \r\n    })\r\n}\r\n};\r\n\r\nexport function fetchFTPConfigByID(editParam){\r\n\r\n    return function(dispatch){\r\n    const url1=rsapi.post(\"site/getSiteForFTP\",{\"userinfo\": editParam.userInfo})\r\n    const url2=rsapi.post(\"ftpconfig/getActiveFTPConfigById\",\r\n            { [editParam.primaryKeyField] :editParam.primaryKeyValue,\"userinfo\":editParam.userInfo} )\r\n     const url3=rsapi.post(\"ftpconfig/getFTPType\",{\"userinfo\": editParam.userInfo})\r\n    dispatch(initRequest(true));\r\n    Axios.all([url1,url2,url3])\r\n    .then(response=> { \r\n        let selectedId=editParam.primaryKeyValue\r\n        let selectedRecord=response[1].data\r\n        // const siteListMap = constructOptionList(response[0].data.SiteList,'nsitecode','ssitename',undefined, undefined, undefined,\r\n        // false) || [];\r\n        // const siteList = siteListMap.get(\"OptionList\");\r\n        selectedRecord['nsitecode']={value:response[1].data.nsitecode,label:response[1].data.ssitename}\r\n        selectedRecord['nftptypecode']={value:response[1].data.nftptypecode,label:response[1].data.sftptypename}\r\n        \r\n        dispatch({\r\n            type: DEFAULT_RETURN, payload:{\r\n            openModal:true, \r\n            selectedRecord ,\r\n            ftpTypeList:constructOptionList(response[2].data,'nftptypecode','sftptypename').get(\"OptionList\"),\r\n            operation:editParam.operation,\r\n            screenName:editParam.screenName,\r\n            //siteOptions:response[0].data,\r\n            siteOptions:constructOptionList(response[0].data.SiteList,'nsitecode','ssitename').get(\"OptionList\"),//:siteList,\r\n            ncontrolcode:editParam.ncontrolCode,\r\n            inputparam:editParam.inputparam,\r\n            loading:false,selectedId\r\n        }}) \r\n    })\r\n    .catch(error => {\r\n        dispatch({type: DEFAULT_RETURN, payload: {loading:false}})\r\n        if (error.response.status === 500){\r\n            toast.error(error.message);\r\n        } \r\n        else{               \r\n            toast.warn(error.response.data);\r\n        }         \r\n    })\r\n}\r\n}"]},"metadata":{},"sourceType":"module"}