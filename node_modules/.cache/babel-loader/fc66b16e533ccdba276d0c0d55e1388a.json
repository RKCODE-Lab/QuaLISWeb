{"ast":null,"code":"var _jsxFileName = \"D:\\\\LIMSWFH\\\\LIMSPOSTGRESQL\\\\QuaLISWeb\\\\src\\\\pages\\\\ResultEntryBySample\\\\ResultEntry.jsx\";\nimport React, { Component } from 'react';\nimport { faPlay, faAddressBook, faCheckCircle, faEye, faPencilRuler, faFileImport, faSync, faBorderAll, faLink, faComment, faComments, faPaperclip, faCommentDots, faChevronRight, faMicroscope, faFlask, faHistory } from '@fortawesome/free-solid-svg-icons';\nimport { Card, Col, Row, Nav, Button, Modal } from 'react-bootstrap';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport Axios from \"axios\";\nimport { ListWrapper } from '../../components/client-group.styles';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faFileInvoice } from '@fortawesome/free-solid-svg-icons';\nimport SplitterLayout from \"react-splitter-layout\";\nimport { ContentPanel } from '../../components/App.styles';\nimport PortalModal from '../../PortalModal';\nimport Iframe from 'react-iframe';\nimport ReactTooltip from 'react-tooltip';\nimport { crudMaster, updateStore, getsubSampleREDetail, getTestREDetail, getTestChildTabREDetail, resultGetModule, fetchMaterialRecord, completeTest, testMethodSourceEdit, addREInstrument, addREMaterial, deleteInstrumentRecord, fetchInstrumentRecord, deleteTaskRecord, fetchTaskRecord, parameterRecord, checkListRecord, onSaveCheckList, defaultTest, getFormula, getRERegistrationType, getRERegistrationSubType, getREApprovalConfigVersion, getResultEntryDetails, calculateFormula, getREFilterStatus, getREFilterTestData, getREJobStatus, viewAttachment, validateEsignCredentialComplete, getAttachmentCombo, deleteAttachment, getCommentsCombo, updateTestMethodSource, resultImportFile, filterTransactionList, validateEsignCredential, getSampleChildTabREDetail, updateParameterComments, getREMaterialCategoryByType, getREMaterialByCategory, getREMaterialInvertoryByMaterial, previewSampleReport, getMeanCalculationTestParameter, getAvailableMaterialQuantity, testStart, getSubSampleChildTabDetail, getSampleChildTabDetail, getREFilterTemplate, getAverageResult, getREMaterialComboGet, getPredefinedData, getELNTestValidation //,deleteResultUsedMaterial\n, getConfigurationFilter, getTestBasedBatchWorklist, addREAdhocParamter, createAdhocParamter // ,getPredefinedData,getConfigurationFilter,getTestBasedBatchWorklist//,deleteResultUsedMaterial\n, enforceResult //,deleteResultUsedMaterial\n} from '../../actions'; //import { sortData, create_UUID, getControlMap, listDataFromDynamicArray, formatInputDate, validateTwoDigitDate, showEsign, constructOptionList, deleteAttachmentDropZone,CF_encryptionData } from '../../components/CommonScript';\n\nimport { sortData, create_UUID, getControlMap, listDataFromDynamicArray, formatInputDate, validateTwoDigitDate, showEsign, constructOptionList, deleteAttachmentDropZone, Lims_JSON_stringify, CF_encryptionData } from '../../components/CommonScript';\nimport rsapi from '../../rsapi';\nimport { toast } from 'react-toastify';\nimport { parameterType, grade, transactionStatus, RegistrationType, RegistrationSubType, FORMULAFIELDTYPE, designProperties, SideBarSeqno, SideBarTabIndex } from '../../components/Enumeration';\nimport TransactionListMasterJson from '../../components/TransactionListMasterJson';\nimport { ProductList } from '../product/product.styled';\nimport CustomTabs from '../../components/custom-tabs/custom-tabs.component';\nimport ResultEntryResultsTab from './ResultEntryResultsTab';\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\nimport Esign from '../audittrail/Esign';\nimport BreadcrumbComponent from '../../components/Breadcrumb.Component';\nimport ResultEntryFilter from './ResultEntryFilter';\nimport ResultEntryInstrumentForm from './ResultEntryInstrumentForm';\nimport ResultEntryForm from './ResultEntryForm';\nimport TestEditForm from './TestEditForm';\nimport SampleInfoView from '../approval/SampleInfoView';\nimport SampleInfoGrid from '../approval/SampleInfoGrid';\nimport ApprovalInstrumentTab from '../approval/ApprovalInstrumentTab';\nimport ResultEntryTaskTab from './ResultEntryTaskTab';\nimport ResultEntryTaskForm from './ResultEntryTaskForm';\nimport ResultEntryParamCommetsForm from './ResultEntryParamCommetsForm';\nimport TemplateForm from '../checklist/checklist/TemplateForm';\nimport { templateChangeHandler } from '../checklist/checklist/checklistMethods';\nimport { numberConversion, numericGrade } from './ResultEntryValidation';\nimport PerfectScrollbar from 'react-perfect-scrollbar';\nimport ResultEntryFormulaForm from './ResultEntryFormulaForm';\nimport SampleApprovalHistory from '../approval/SampleApprovalHistory';\nimport ResultChangeHistoryTab from '../approval/ResultChangeHistoryTab';\nimport Attachments from '../attachmentscomments/attachments/Attachments';\nimport Comments from '../attachmentscomments/comments/Comments';\nimport { onSaveSampleAttachment, onSaveTestAttachment, onSaveSubSampleAttachment } from '../attachmentscomments/attachments/AttachmentFunctions';\nimport { onSaveSampleComments, onSaveTestComments, onSaveSubSampleComments } from '../attachmentscomments/comments/CommentFunctions';\nimport ResultEntryImport from './ResultEntryImport';\nimport { getSameRecordFromTwoArrays, convertDateValuetoString, rearrangeDateFormat } from '../../components/CommonScript'; // import ReactTooltip from 'react-tooltip';\n\nimport ResultEntryMean from './ResultEntryMean';\nimport ScrollBar from 'react-perfect-scrollbar';\nimport ResultEntryMaterialForm from './ResultEntryMaterialForm';\nimport AddAdhocParameter from './AddAdhocParameter';\nimport ResultUsedMaterial from './UsedMaterial';\nimport { FontIconWrap } from '../../components/data-grid/data-grid.styles';\nimport CustomSwitch from '../../components/custom-switch/custom-switch.component';\nimport TransactionListMasterJsonView from '../../components/TransactionListMasterJsonView';\nimport ModalShow from '../../components/ModalShow';\nimport DataGrid from '../../components/data-grid/data-grid.component';\nimport { process } from '@progress/kendo-data-query';\nimport ResultEntryPredefinedComments from './ResultEntryPredefinedComments';\nimport ResultEntryEnforceResult from './ResultEntryEnforceResult';\n\nclass ResultEntry extends Component {\n  constructor(props) {\n    super(props);\n\n    this.paneSizeChange = d => {\n      this.setState({\n        splitChangeWidthPercentage: d\n      });\n    };\n\n    this.deleteAttachment = (event, file, fieldName) => {\n      let selectedRecord = this.props.Login.masterData.selectedImportFile;\n      selectedRecord[fieldName] = deleteAttachmentDropZone(selectedRecord[fieldName], file);\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          masterData: { ...this.props.Login.masterData,\n            selectedImportFile: selectedRecord\n          }\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.deleteAttachmentParameterFile = (event, file, fieldName, index) => {\n      let selectedRecordParameter = this.state.selectedRecord.ResultParameter[index];\n      selectedRecordParameter[fieldName] = deleteAttachmentDropZone(selectedRecordParameter[fieldName], file);\n      let selectedRecord = this.state.selectedRecord;\n      selectedRecord['ResultParameter'][index]['editable'] = true; // const updateInfo = {\n      //     typeName: DEFAULT_RETURN,\n      //     data: { masterData: { ...this.props.Login.masterData, ResultParameter.editable\n      //         //selectedImportFile: selectedRecord \n      //     } }\n      // }\n      // this.props.updateStore(updateInfo);\n\n      this.setState({\n        selectedRecord: selectedRecord //fileToDelete:file.name \n\n      });\n    };\n\n    this.closeModalShow = () => {\n      let showAlertGrid = this.props.Login.showAlertGrid;\n      let selectedRecord = this.props.Login.selectedRecord;\n      let masterData = this.props.Login.masterData && this.props.Login.masterData;\n      masterData['RESelectedTest'].forEach(object => {\n        object['expanded'] && delete object['expanded'];\n      });\n      selectedRecord['ntestgrouptestpredefsubcode'] && delete selectedRecord['ntestgrouptestpredefsubcode'];\n      showAlertGrid = false;\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          showAlertGrid,\n          masterData,\n          selectedRecord\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onTabChangeRulesEngine = tabProps => {\n      let masterData = this.props.Login.masterData && this.props.Login.masterData;\n      masterData['RESelectedTest'].forEach(object => {\n        object['expanded'] && delete object['expanded'];\n      });\n      masterData['activeTabName'] = tabProps.activeTabName;\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          masterData\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.handleExpandChange = mapobject => {\n      let childListMap = new Map();\n      let keylst = Object.keys(mapobject);\n      keylst.map(key => {\n        childListMap.set(parseInt(key), Object.values(mapobject[key]));\n      });\n      this.setState({\n        childListMap\n      });\n    };\n\n    this.availableTestFilter = data => {\n      let lstntransactionsamplecode = [];\n\n      if (this.props.Login.RegistrationTestAlert) {\n        let keylst = Object.keys(this.props.Login.RegistrationTestAlert); // keylst.map(x=>{ \n        //    this.props.Login.RegistrationTestAlert[x].map(y=> lstntransactionsamplecode.push(y['ntransactionsamplecode'])) \n        // }); \n        // let boolean1 = keylst.includes(data.ntestgrouptestcode.toString())\n\n        let boolean1 = keylst.includes(data.ntransactiontestcode.toString()); //  let boolean2 = lstntransactionsamplecode.includes(data.ntransactionsamplecode)\n\n        if (boolean1 //&&boolean2\n        ) {\n          return data;\n        }\n      }\n    };\n\n    this.unavailableTestFilter = data => {\n      let lstntransactionsamplecode = [];\n\n      if (this.props.Login.NewTestGroupTestAlert) {\n        let keylst = Object.keys(this.props.Login.NewTestGroupTestAlert); // keylst.map(x=>{ \n        //     this.props.Login.NewTestGroupTestAlert[x].map(y=> lstntransactionsamplecode.push(y['ntransactionsamplecode'])) \n        // });\n        // let boolean1 = keylst.includes(data.ntestgrouptestcode.toString())\n\n        let boolean1 = keylst.includes(data.ntransactiontestcode.toString()); //  let boolean2 = lstntransactionsamplecode.includes(data.ntransactionsamplecode)\n\n        if (boolean1 //&&boolean2\n        ) {\n          return data;\n        }\n      }\n    };\n\n    this.dataStateAvailabletestAlert = event => {\n      this.setState({\n        dataStateavailabletest: event.dataState\n      });\n    };\n\n    this.dataStateUnAvailabletestAlert = event => {\n      this.setState({\n        dataStateunavailabletest: event.dataState\n      });\n    };\n\n    this.tabAlertRulesEngine = () => {\n      const tabMap = new Map();\n      {\n        this.props.Login.RegistrationTestAlert && this.props.Login.masterData.RESelectedTest && this.props.Login.masterData.RESelectedTest.filter(this.availableTestFilter).length > 0 && //this.props.Login.RegistrationTestAlert.length>0 &&\n        tabMap.set(\"IDS_AVAILABLETESTUNDERSAMPLE\", /*#__PURE__*/React.createElement(DataGrid, {\n          primaryKeyField: \"ntransactiontestcode\",\n          dataResult: process(sortData(this.props.Login.masterData.RESelectedTest.filter(this.availableTestFilter), 'descending', 'ntransactiontestcode') || [], this.state.dataStateavailabletest ? this.state.dataStateavailabletest : {\n            skip: 0,\n            take: 10\n          }),\n          dataState: this.state.dataStateavailabletest ? this.state.dataStateavailabletest : {\n            skip: 0,\n            take: 10\n          },\n          dataStateChange: this.dataStateAvailabletestAlert,\n          extractedColumnList: [{\n            \"idsName\": \"IDS_RULEAPPLIEDTESTNAME\",\n            \"dataField\": \"stestsynonym\",\n            \"width\": \"200px\"\n          }],\n          controlMap: this.state.controlMap,\n          userRoleControlRights: this.state.userRoleControlRights,\n          pageable: true,\n          scrollable: 'scrollable',\n          hideColumnFilter: true,\n          selectedId: 0,\n          gridHeight: '350px',\n          gridWidth: '700px',\n          expandField: \"expanded\",\n          handleExpandChange: () => {\n            this.handleExpandChange(this.props.Login.RegistrationTestAlert);\n          },\n          hasChild: true,\n          childMappingField: 'ntransactiontestcode',\n          childColumnList: this.props.Login.masterData.realRegSubTypeValue.nneedsubsample ? [{\n            \"idsName\": \"IDS_RULEDEPENDENTTESTNAME\",\n            \"dataField\": \"stestsynonym\",\n            \"width\": \"200px\"\n          }, {\n            \"idsName\": \"IDS_SAMPLEARNO\",\n            \"dataField\": \"samplearno\",\n            \"width\": \"200px\"\n          }, {\n            \"idsName\": \"IDS_ARNO\",\n            \"dataField\": \"sarno\",\n            \"width\": \"200px\"\n          }] : [{\n            \"idsName\": \"IDS_RULEDEPENDENTTESTNAME\",\n            \"dataField\": \"stestsynonym\",\n            \"width\": \"200px\"\n          }, {\n            \"idsName\": \"IDS_ARNO\",\n            \"dataField\": \"sarno\",\n            \"width\": \"200px\"\n          }],\n          childList: this.state.childListMap,\n          activeTabName: \"IDS_AVAILABLETESTUNDERSAMPLE\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 300,\n            columnNumber: 17\n          }\n        }));\n        this.props.Login.NewTestGroupTestAlert && this.props.Login.masterData.RESelectedTest && this.props.Login.masterData.RESelectedTest.filter(this.unavailableTestFilter).length > 0 && //this.props.Login.NewTestGroupTestAlert.length>0  &&\n        tabMap.set(\"IDS_TESTSNOTAVAILABLEUNDERSAMPLE\", /*#__PURE__*/React.createElement(DataGrid, {\n          primaryKeyField: \"ntransactiontestcode\",\n          dataResult: process(sortData(this.props.Login.masterData.RESelectedTest.filter(this.unavailableTestFilter), 'descending', 'ntransactiontestcode') || [], this.state.dataStateunavailabletest ? this.state.dataStateunavailabletest : {\n            skip: 0,\n            take: 10\n          }),\n          dataState: this.state.dataStateunavailabletest ? this.state.dataStateunavailabletest : {\n            skip: 0,\n            take: 10\n          },\n          dataStateChange: this.dataStateUnAvailabletestAlert,\n          extractedColumnList: [{\n            \"idsName\": \"IDS_RULEAPPLIEDTESTNAME\",\n            \"dataField\": \"stestsynonym\",\n            \"width\": \"200px\"\n          }],\n          controlMap: this.state.controlMap,\n          userRoleControlRights: this.state.userRoleControlRights,\n          pageable: true,\n          scrollable: 'scrollable',\n          hideColumnFilter: true,\n          selectedId: 0,\n          expandField: \"expanded\",\n          handleExpandChange: () => {\n            this.handleExpandChange(this.props.Login.NewTestGroupTestAlert);\n          },\n          gridHeight: '350px',\n          gridWidth: '700px',\n          hasChild: true,\n          childMappingField: 'ntransactiontestcode',\n          childColumnList: [{\n            \"idsName\": \"IDS_RULEDEPENDENTTESTNAME\",\n            \"dataField\": \"stestsynonym\",\n            \"width\": \"200px\"\n          }],\n          childList: this.state.childListMap,\n          activeTabName: \"IDS_TESTSNOTAVAILABLEUNDERSAMPLE\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 337,\n            columnNumber: 17\n          }\n        }));\n      }\n      return tabMap;\n    };\n\n    this.closeModal = () => {\n      let loadEsign = this.props.Login.loadEsign;\n      let openModal = this.props.Login.openModal;\n      let openTemplateModal = this.props.Login.openTemplateModal;\n      let selectedRecord = this.props.Login.selectedRecord; //let additionInfo=this.props.Login.additionInfo ||{};\n\n      let screenName = this.props.Login.screenName;\n      let operation = this.props.Login.operation;\n      let loadFile = this.props.Login.loadFile;\n      let updateInfo = {}; //additionInfo={...selectedRecord};\n\n      if (screenName === \"IDS_RESULTFORMULA\") {\n        screenName = \"IDS_RESULTENTRY\";\n        operation = \"update\";\n        let showValidate = !this.props.Login.showValidate;\n        updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            screenName,\n            operation,\n            showValidate,\n            validateFormulaMandyFields: []\n          }\n        };\n      } else {\n        if (this.props.Login.loadEsign) {\n          if (this.props.Login.operation === \"delete\" || this.props.Login.operation === \"complete\" || this.props.Login.operation === \"default\" || this.props.Login.operation === \"deleteTask\" || this.props.Login.operation === \"deleteInstrument\" || this.props.Login.operation === \"deleteMaterial\") {\n            loadEsign = false;\n            openModal = false;\n            selectedRecord = {};\n          } else if (this.props.Login.operation === \"updatechecklist\") {\n            loadEsign = false;\n            openModal = false;\n          } else {\n            loadEsign = false;\n            selectedRecord['esignpassword'] = \"\";\n            selectedRecord['esigncomments'] = \"\";\n            selectedRecord['esignreason'] = \"\";\n          }\n        } else {\n          openModal = false;\n          openTemplateModal = false;\n          selectedRecord = {};\n          loadFile = false;\n        }\n\n        updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            openModal,\n            loadEsign,\n            openTemplateModal,\n            screenName,\n            selectedRecord,\n            loadFile\n          }\n        };\n      }\n\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onFilterComboChange = (event, fieldname) => {\n      if (event !== null) {\n        let inputData = [];\n\n        if (fieldname === \"fromDate\") {\n          let dateObj = convertDateValuetoString(event, this.props.Login.masterData.toDate, this.props.Login.userInfo);\n          inputData = {\n            nflag: 2,\n            fromdate: dateObj.fromDate,\n            //this.OnDateConverstion(event, fieldname),\n            todate: dateObj.toDate,\n            //this.props.Login.masterData.toDate,\n            nsampletypecode: parseInt(this.props.Login.masterData.defaultSampleType.nsampletypecode),\n            nregtypecode: parseInt(this.props.Login.masterData.defaultRegistrationType.nregtypecode),\n            nregsubtypecode: parseInt(this.props.Login.masterData.defaultRegistrationSubType.nregsubtypecode),\n            //ntranscode: String(this.props.Login.masterData.defaultFilterStatus.ntransactionstatus),\n            transcode: this.props.Login.masterData.defaultFilterStatus.ntransactionstatus === 0 ? this.props.Login.masterData.REFilterStatus.map(item => item.ntransactionstatus).join(\",\") : String(this.props.Login.masterData.defaultFilterStatus.ntransactionstatus),\n            defaultRegistrationSubType: this.props.Login.masterData.defaultRegistrationSubType,\n            userinfo: this.props.Login.userInfo,\n            masterData: this.props.Login.masterData\n          };\n          this.props.getREApprovalConfigVersion(inputData);\n        }\n\n        if (fieldname === \"toDate\") {\n          let dateObj = convertDateValuetoString(this.props.Login.masterData.fromDate, event, this.props.Login.userInfo);\n          inputData = {\n            nflag: 2,\n            fromdate: dateObj.fromDate,\n            //this.props.Login.masterData.fromDate,\n            todate: dateObj.toDate,\n            //this.OnDateConverstion(event, fieldname),\n            nsampletypecode: parseInt(this.props.Login.masterData.defaultSampleType.nsampletypecode),\n            nregtypecode: parseInt(this.props.Login.masterData.defaultRegistrationType.nregtypecode),\n            nregsubtypecode: parseInt(this.props.Login.masterData.defaultRegistrationSubType.nregsubtypecode),\n            //ntranscode: String(this.props.Login.masterData.defaultFilterStatus.ntransactionstatus),\n            transcode: this.props.Login.masterData.defaultFilterStatus.ntransactionstatus === 0 ? this.props.Login.masterData.REFilterStatus.map(item => item.ntransactionstatus).join(\",\") : String(this.props.Login.masterData.defaultFilterStatus.ntransactionstatus),\n            defaultRegistrationSubType: this.props.Login.masterData.defaultRegistrationSubType,\n            userinfo: this.props.Login.userInfo,\n            masterData: this.props.Login.masterData\n          };\n          this.props.getREApprovalConfigVersion(inputData);\n        } // let obj = convertDateValuetoString(this.props.Login.masterData.fromDate, \n        //                  this.props.Login.masterData.toDate, this.props.Login.userInfo); \n\n\n        if (fieldname === \"nsampletypecode\") {\n          let obj = convertDateValuetoString(this.state.selectedRecord && this.state.selectedRecord[\"fromDate\"] || this.props.Login.masterData.fromDate, this.state.selectedRecord && this.state.selectedRecord[\"toDate\"] || this.props.Login.masterData.toDate, this.props.Login.userInfo);\n          inputData = {\n            nflag: 2,\n            nsampletypecode: parseInt(event.value),\n            fromdate: obj.fromDate,\n            //(this.state.selectedRecord && this.state.selectedRecord[\"fromDate\"]) || this.props.Login.masterData.fromDate,\n            todate: obj.toDate,\n            //(this.state.selectedRecord && this.state.selectedRecord[\"toDate\"]) || this.props.Login.masterData.toDate,\n            userinfo: this.props.Login.userInfo,\n            defaultSampleType: event.item,\n            masterData: this.props.Login.masterData\n          };\n          this.props.getRERegistrationType(inputData);\n        } else if (fieldname === \"nregtypecode\") {\n          let obj = convertDateValuetoString(this.state.selectedRecord && this.state.selectedRecord[\"fromDate\"] || this.props.Login.masterData.fromDate, this.state.selectedRecord && this.state.selectedRecord[\"toDate\"] || this.props.Login.masterData.toDate, this.props.Login.userInfo);\n          inputData = {\n            nflag: 3,\n            nsampletypecode: parseInt(this.props.Login.masterData.defaultSampleType.nsampletypecode),\n            fromdate: obj.fromDate,\n            //(this.state.selectedRecord && this.state.selectedRecord[\"fromDate\"]) || this.props.Login.masterData.fromDate,\n            todate: obj.toDate,\n            //(this.state.selectedRecord && this.state.selectedRecord[\"toDate\"]) || this.props.Login.masterData.toDate,\n            nregtypecode: parseInt(event.value),\n            userinfo: this.props.Login.userInfo,\n            defaultRegistrationType: event.item,\n            masterData: this.props.Login.masterData\n          };\n          this.props.getRERegistrationSubType(inputData);\n        } else if (fieldname === \"nregsubtypecode\") {\n          let obj = convertDateValuetoString(this.props.Login.masterData.fromDate, this.props.Login.masterData.toDate, this.props.Login.userInfo);\n          inputData = {\n            nflag: 4,\n            fromdate: obj.fromDate,\n            //this.props.Login.masterData.fromDate,\n            todate: obj.toDate,\n            //this.props.Login.masterData.toDate,\n            nsampletypecode: parseInt(this.props.Login.masterData.defaultSampleType.nsampletypecode),\n            nregtypecode: parseInt(this.props.Login.masterData.defaultRegistrationType.nregtypecode),\n            nregsubtypecode: event.value,\n            userinfo: this.props.Login.userInfo,\n            defaultRegistrationSubType: event.item,\n            masterData: this.props.Login.masterData\n          };\n          this.props.getREApprovalConfigVersion(inputData);\n        } else if (fieldname === 'ndesigntemplatemappingcode') {\n          let obj = convertDateValuetoString(this.props.Login.masterData.fromDate, this.props.Login.masterData.toDate, this.props.Login.userInfo);\n          const inputParamData = {\n            nflag: 3,\n            fromdate: obj.fromDate,\n            //this.props.Login.masterData.fromDate,\n            todate: obj.toDate,\n            nsampletypecode: parseInt(this.props.Login.masterData.defaultSampleType.nsampletypecode),\n            nregtypecode: parseInt(this.props.Login.masterData.defaultRegistrationType.nregtypecode),\n            nregsubtypecode: parseInt(this.props.Login.masterData.defaultRegistrationSubType.nregsubtypecode),\n            napprovalversioncode: this.props.Login.masterData.ApprovalConfigVersion[0].napprovalconfigversioncode,\n            userinfo: this.props.Login.userInfo,\n            masterData: this.props.Login.masterData,\n            //defaultFilterStatus: event.item,\n            defaultRegistrationSubType: this.props.Login.masterData.defaultRegistrationSubType,\n            //ntranscode: String(this.props.Login.masterData.defaultFilterStatus.ntransactionstatus),\n            ntranscode: this.props.Login.masterData.defaultFilterStatus.ntransactionstatus === 0 ? this.props.Login.masterData.REFilterStatus.map(item => item.ntransactionstatus).join(\",\") : String(this.props.Login.masterData.defaultFilterStatus.ntransactionstatus),\n            nneedsubsample: this.props.Login.masterData.realRegSubTypeValue.nneedsubsample || false,\n            // stransactionstatus: this.props.Login.masterData.defaultFilterStatus.ntransactionstatus === 0 ? this.props.Login.masterData.FilterStatus.map(item => item.ntransactionstatus).join(\",\") : this.props.Login.masterData.defaultFilterStatus.ntransactionstatus,\n            //nsectioncode: this.props.Login.masterData.UserSectionValue.nsectioncode === -1 ? this.props.Login.masterData.UserSection.map(item => item.nsectioncode).join(\",\") : this.props.Login.masterData.UserSectionValue.nsectioncode,\n            ndesigntemplatemappingcode: event.value,\n            DesignTemplateMappingValue: event.item,\n            defaultRegistrationSubType: this.props.Login.masterData.defaultRegistrationSubType\n          }; //this.props.getREFilterTestData(inputParamData)\n\n          this.props.getREFilterTemplate(inputParamData);\n        } else if (fieldname === \"version\") {\n          let obj = convertDateValuetoString(this.props.Login.masterData.fromDate, this.props.Login.masterData.toDate, this.props.Login.userInfo);\n          inputData = {\n            nflag: 4,\n            fromdate: obj.fromDate,\n            //this.props.Login.masterData.fromDate,\n            todate: obj.toDate,\n            //this.props.Login.masterData.toDate,\n            nsampletypecode: parseInt(this.props.Login.masterData.defaultSampleType.nsampletypecode),\n            nregtypecode: parseInt(this.props.Login.masterData.defaultRegistrationType.nregtypecode),\n            nregsubtypecode: parseInt(this.props.Login.masterData.defaultRegistrationSubType.nregsubtypecode),\n            napprovalversioncode: event.value,\n            userinfo: this.props.Login.userInfo,\n            defaultApprovalConfigVersion: event.item,\n            masterData: this.props.Login.masterData,\n            //ntranscode: String(this.props.Login.masterData.defaultFilterStatus.ntransactionstatus),\n            ntranscode: this.props.Login.masterData.defaultFilterStatus.ntransactionstatus === 0 ? this.props.Login.masterData.REFilterStatus.map(item => item.ntransactionstatus).join(\",\") : String(this.props.Login.masterData.defaultFilterStatus.ntransactionstatus),\n            ndesigntemplatemappingcode: this.props.Login.masterData.ndesigntemplatemappingcode ? this.props.Login.masterData.ndesigntemplatemappingcode : -1,\n            defaultRegistrationSubType: this.props.Login.masterData.defaultRegistrationSubType\n          };\n          this.props.getREJobStatus(inputData);\n        } else if (fieldname === \"jobstatus\") {\n          let obj = convertDateValuetoString(this.props.Login.masterData.fromDate, this.props.Login.masterData.toDate, this.props.Login.userInfo);\n          inputData = {\n            nflag: 5,\n            fromdate: obj.fromDate,\n            //this.props.Login.masterData.fromDate,\n            todate: obj.toDate,\n            //this.props.Login.masterData.toDate,\n            nsampletypecode: parseInt(this.props.Login.masterData.defaultSampleType.nsampletypecode),\n            nregtypecode: parseInt(this.props.Login.masterData.defaultRegistrationType.nregtypecode),\n            nregsubtypecode: parseInt(this.props.Login.masterData.defaultRegistrationSubType.nregsubtypecode),\n            napprovalversioncode: parseInt(this.props.Login.masterData.defaultApprovalConfigVersion.napprovalconfigversioncode),\n            njobstatuscode: event.value,\n            userinfo: this.props.Login.userInfo,\n            defaultjobstatus: event.item,\n            masterData: this.props.Login.masterData\n          };\n          this.props.getREFilterStatus(inputData);\n        } else if (fieldname === \"filter\") {\n          let obj = convertDateValuetoString(this.props.Login.masterData.fromDate, this.props.Login.masterData.toDate, this.props.Login.userInfo);\n          inputData = {\n            nflag: 5,\n            fromdate: obj.fromDate,\n            //this.props.Login.masterData.fromDate,\n            todate: obj.toDate,\n            //this.props.Login.masterData.toDate,\n            nsampletypecode: parseInt(this.props.Login.masterData.defaultSampleType.nsampletypecode),\n            nregtypecode: parseInt(this.props.Login.masterData.defaultRegistrationType.nregtypecode),\n            nregsubtypecode: parseInt(this.props.Login.masterData.defaultRegistrationSubType.nregsubtypecode),\n            napprovalversioncode: parseInt(this.props.Login.masterData.defaultApprovalConfigVersion.napprovalconfigversioncode),\n            njobstatuscode: 1,\n            // parseInt(this.props.Login.masterData.defaultjobstatus.njobstatuscode),\n            ntranscode: event.value === 0 ? this.props.Login.masterData.REFilterStatus.map(item => item.ntransactionstatus).join(\",\") : String(event.value),\n            userinfo: this.props.Login.userInfo,\n            defaultFilterStatus: event.item,\n            masterData: this.props.Login.masterData,\n            DesignTemplateMappingValue: this.props.Login.masterData.DesignTemplateMappingValue,\n            ndesigntemplatemappingcode: this.props.Login.masterData.ndesigntemplatemappingcode ? this.props.Login.masterData.ndesigntemplatemappingcode : -1,\n            defaultRegistrationSubType: this.props.Login.masterData.defaultRegistrationSubType && this.props.Login.masterData.defaultRegistrationSubType\n          };\n          this.props.getREFilterTestData(inputData);\n        } else if (fieldname === \"test\") {\n          let defaultTestvalues = event.item;\n          this.props.Login.masterData.defaultTestvalues = defaultTestvalues; // const updateInfo = {\n          //     typeName: DEFAULT_RETURN,\n          //     data: { masterData: { ...this.props.Login.masterData } }\n          // }\n          // this.props.updateStore(updateInfo);\n\n          inputData = {\n            defaultTestvalues,\n            ntestcode: this.props.Login.masterData.defaultTestvalues.ntestcode,\n            masterData: this.props.Login.masterData,\n            defaultRegistrationSubType: this.props.Login.masterData.defaultRegistrationSubType,\n            ntranscode: this.props.Login.masterData.defaultFilterStatus.ntransactionstatus === 0 ? this.props.Login.masterData.REFilterStatus.map(item => item.ntransactionstatus).join(\",\") : this.props.Login.masterData.defaultFilterStatus.ntransactionstatus,\n            userinfo: this.props.Login.userInfo,\n            napprovalversioncode: parseInt(this.props.Login.masterData.defaultApprovalConfigVersion.napprovalconfigversioncode)\n          };\n          this.props.getConfigurationFilter(inputData);\n        } else if (fieldname === \"nconfigfiltercode\") {\n          let defaultConfigurationFilterValue = event.item;\n          this.props.Login.masterData.defaultConfigurationFilterValue = defaultConfigurationFilterValue;\n          inputData = {\n            defaultConfigurationFilterValue,\n            nconfigfiltercode: parseInt(this.props.Login.masterData.defaultConfigurationFilterValue.nconfigfiltercode),\n            ntestcode: this.props.Login.masterData.defaultTestvalues.ntestcode,\n            masterData: this.props.Login.masterData,\n            defaultRegistrationSubType: this.props.Login.masterData.defaultRegistrationSubType,\n            //ntranscode: this.props.Login.masterData.defaultFilterStatus.ntransactionstatus,\n            ntranscode: this.props.Login.masterData.defaultFilterStatus.ntransactionstatus === 0 ? this.props.Login.masterData.REFilterStatus.map(item => item.ntransactionstatus).join(\",\") : this.props.Login.masterData.defaultFilterStatus.ntransactionstatus,\n            napprovalversioncode: parseInt(this.props.Login.masterData.defaultApprovalConfigVersion.napprovalconfigversioncode)\n          };\n          this.props.getTestBasedBatchWorklist(inputData);\n        } else if (fieldname === \"nworklistcode\") {\n          let defaultWorklistvalue = event.item;\n          this.props.Login.masterData.defaultWorklistvalue = defaultWorklistvalue;\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              masterData: { ...this.props.Login.masterData\n              }\n            }\n          };\n          this.props.updateStore(updateInfo);\n        } else {\n          if (fieldname === \"nbatchmastercode\") {\n            let defaultBatchvalue = event.item;\n            this.props.Login.masterData.defaultBatchvalue = defaultBatchvalue;\n            const updateInfo = {\n              typeName: DEFAULT_RETURN,\n              data: {\n                masterData: { ...this.props.Login.masterData\n                }\n              }\n            };\n            this.props.updateStore(updateInfo);\n          }\n        }\n      } else {\n        if (fieldname === \"nconfigfiltercode\") {\n          this.props.Login.masterData.defaultConfigurationFilterValue = [];\n          this.props.Login.masterData.defaultWorklistvalue = [];\n          this.props.Login.masterData.defaultBatchvalue = [];\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              masterData: { ...this.props.Login.masterData\n              }\n            }\n          };\n          this.props.updateStore(updateInfo);\n        }\n      }\n    };\n\n    this.OnDateConverstion = (date, fieldname) => {\n      const month = validateTwoDigitDate(String(date.getMonth() + 1));\n      const day = validateTwoDigitDate(String(date.getDate()));\n\n      if (fieldname === \"fromDate\") {\n        date = date.getFullYear() + '-' + month + '-' + day + \"T00:00:00\";\n      } else {\n        date = date.getFullYear() + '-' + month + '-' + day + \"T23:59:00\";\n      }\n\n      return date;\n    };\n\n    this.onReload = () => {\n      let {\n        realFromDate,\n        realToDate,\n        realSampleTypeValue,\n        realRegTypeValue,\n        realRegSubTypeValue,\n        realApproveConfigVersion,\n        realFilterStatusValue,\n        realTestcodeValue,\n        realWorklistCodeValue\n      } = this.props.Login.masterData; //let obj = this.covertDatetoString(realFromDate, realToDate)\n\n      let obj = convertDateValuetoString(realFromDate, realToDate, this.props.Login.userInfo);\n      let masterData = { ...this.props.Login.masterData,\n        realFromDate: obj.fromDate,\n        realToDate: obj.toDate,\n        realSampleTypeValue,\n        realRegTypeValue,\n        realRegSubTypeValue,\n        realFilterStatusValue,\n        realApproveConfigVersion,\n        realTestcodeValue\n      };\n      let inputData = {\n        nsampletypecode: realSampleTypeValue && realSampleTypeValue.nsampletypecode || -1,\n        nregtypecode: realRegTypeValue && realRegTypeValue.nregtypecode || -1,\n        nregsubtypecode: realRegSubTypeValue && realRegSubTypeValue.nregsubtypecode || -1,\n        napprovalversioncode: realApproveConfigVersion && realApproveConfigVersion.napprovalconfigversioncode || -1,\n        ntranscode: String(realFilterStatusValue ? realFilterStatusValue.ntransactionstatus : -1),\n        ntestcode: realTestcodeValue ? realTestcodeValue.ntestcode : -1,\n        ntransactiontestcode: 0,\n        njobstatuscode: this.props.Login.masterData.defaultjobstatus && this.props.Login.masterData.defaultjobstatus.njobstatuscode || 1,\n        fromdate: obj.fromDate,\n        todate: obj.toDate,\n        userinfo: this.props.Login.userInfo,\n        activeTestKey: this.props.Login.activeTestKey || \"IDS_RESULTS\",\n        showTest: true,\n        showSample: false,\n        checkBoxOperation: 3,\n        ndesigntemplatemappingcode: this.props.Login.masterData.ndesigntemplatemappingcode,\n        nworlistcode: realWorklistCodeValue && realWorklistCodeValue.nworklistcode || -1\n      };\n      const inpuParamData = {\n        inputData,\n        masterData,\n        refs: {\n          searchSampleRef: this.searchSampleRef,\n          searchSubSampleRef: this.searchSubSampleRef,\n          searchTestRef: this.searchTestRef\n        },\n        resultDataState: this.state.resultDataState,\n        instrumentDataState: this.state.instrumentDataState,\n        materialDataState: this.state.materialDataState,\n        taskDataState: this.state.taskDataState,\n        documentDataState: this.state.documentDataState,\n        resultChangeDataState: this.state.resultChangeDataState,\n        testCommentDataState: this.state.testCommentDataState,\n        historyDataState: this.state.historyDataState\n      };\n\n      if (inputData.nsampletypecode !== -1 && inputData.nregtypecode !== -1 && inputData.nregsubtypecode !== -1 && inputData.napprovalversioncode !== -1 && inputData.ntranscode !== -1 && inputData.njobstatuscode !== -1 && inputData.ntestcode !== -1) {\n        this.props.getResultEntryDetails(inpuParamData);\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_PLSSELECTALLTHEVALUEINFILTER\"\n        }));\n      }\n    };\n\n    this.onDesignTemplateChange = (event, fieldName, labelname) => {\n      let masterData = this.props.Login.masterData;\n      masterData = { ...masterData,\n        [labelname]: { ...event.item\n        }\n      };\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          masterData\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onREFilterSubmit = event => {\n      // let realFromDate = new Date(this.props.Login.masterData.fromDate)\n      // let realToDate = new Date(this.props.Login.masterData.toDate)\n      let realFromDate = rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.fromDate);\n      let realToDate = rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.toDate);\n      let realSampleTypeValue = this.props.Login.masterData.defaultSampleType && this.props.Login.masterData.defaultSampleType;\n      let realRegTypeValue = this.props.Login.masterData.defaultRegistrationType && this.props.Login.masterData.defaultRegistrationType;\n      let realRegSubTypeValue = this.props.Login.masterData.defaultRegistrationSubType && this.props.Login.masterData.defaultRegistrationSubType;\n      let realApproveConfigVersion = this.props.Login.masterData.defaultApprovalConfigVersion && this.props.Login.masterData.defaultApprovalConfigVersion;\n      let realFilterStatusValue = this.props.Login.masterData.defaultFilterStatus && this.props.Login.masterData.defaultFilterStatus;\n      let realTestcodeValue = this.props.Login.masterData.defaultTestvalues && this.props.Login.masterData.defaultTestvalues;\n      let realWorklistCodeValue = this.props.Login.masterData.defaultWorklistvalue && this.props.Login.masterData.defaultWorklistvalue;\n      let realBatchCodeValue = this.props.Login.masterData.defaultBatchvalue && this.props.Login.masterData.defaultBatchvalue; //let obj = this.covertDatetoString(realFromDate, realToDate)\n\n      let obj = convertDateValuetoString(realFromDate, realToDate, this.props.Login.userInfo);\n      let masterData = { ...this.props.Login.masterData,\n        realFromDate: obj.fromDate,\n        realToDate: obj.toDate,\n        realSampleTypeValue,\n        realRegTypeValue,\n        realRegSubTypeValue,\n        realFilterStatusValue,\n        realApproveConfigVersion,\n        realTestcodeValue,\n        realWorklistCodeValue,\n        realBatchCodeValue\n      };\n      let inputData = {\n        nsampletypecode: this.props.Login.masterData.defaultSampleType && this.props.Login.masterData.defaultSampleType.nsampletypecode || -1,\n        nregtypecode: this.props.Login.masterData.defaultRegistrationType && this.props.Login.masterData.defaultRegistrationType.nregtypecode || -1,\n        nregsubtypecode: this.props.Login.masterData.defaultRegistrationSubType && this.props.Login.masterData.defaultRegistrationSubType.nregsubtypecode || -1,\n        napprovalversioncode: this.props.Login.masterData.defaultApprovalConfigVersion && this.props.Login.masterData.defaultApprovalConfigVersion.napprovalconfigversioncode || -1,\n        ntranscode: this.props.Login.masterData.defaultFilterStatus && this.props.Login.masterData.defaultFilterStatus.ntransactionstatus === 0 ? this.props.Login.masterData.REFilterStatus.map(item => item.ntransactionstatus).join(\",\") : String(this.props.Login.masterData.defaultFilterStatus.ntransactionstatus),\n        //ntranscode: String(this.props.Login.masterData.defaultFilterStatus ? this.props.Login.masterData.defaultFilterStatus.ntransactionstatus : -1),\n        ntestcode: this.props.Login.masterData.defaultTestvalues ? this.props.Login.masterData.defaultTestvalues.ntestcode : -1,\n        ntransactiontestcode: 0,\n        njobstatuscode: this.props.Login.masterData.defaultjobstatus && this.props.Login.masterData.defaultjobstatus.njobstatuscode || 1,\n        fromdate: obj.fromDate,\n        todate: obj.toDate,\n        userinfo: this.props.Login.userInfo,\n        activeTestKey: this.props.Login.activeTestKey || \"IDS_RESULTS\",\n        showTest: true,\n        showSample: false,\n        nneedsubsample: this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nneedsubsample || false,\n        checkBoxOperation: 3,\n        ndesigntemplatemappingcode: this.props.Login.masterData.DesignTemplateMappingValue && this.props.Login.masterData.DesignTemplateMappingValue.ndesigntemplatemappingcode || -1,\n        nneedtemplatebasedflow: this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nneedtemplatebasedflow || false,\n        nworlistcode: this.props.Login.masterData.defaultWorklistvalue && this.props.Login.masterData.defaultWorklistvalue.nworklistcode || -1,\n        nbatchmastercode: this.props.Login.masterData.defaultBatchvalue && this.props.Login.masterData.defaultBatchvalue.nbatchmastercode || -1\n      };\n      const inpuParamData = {\n        inputData,\n        masterData,\n        refs: {\n          searchSampleRef: this.searchSampleRef,\n          searchSubSampleRef: this.searchSubSampleRef,\n          searchTestRef: this.searchTestRef\n        },\n        resultDataState: this.state.resultDataState,\n        instrumentDataState: this.state.instrumentDataState,\n        materialDataState: this.state.materialDataState,\n        taskDataState: this.state.taskDataState,\n        documentDataState: this.state.documentDataState,\n        resultChangeDataState: this.state.resultChangeDataState,\n        testCommentDataState: this.state.testCommentDataState,\n        historyDataState: this.state.historyDataState\n      };\n\n      if (inputData.nsampletypecode !== -1 && inputData.nregtypecode !== -1 && inputData.nregsubtypecode !== -1 && inputData.napprovalversioncode !== -1 && inputData.ntranscode !== -1 && inputData.njobstatuscode !== -1 && inputData.ntestcode !== undefined) {\n        this.props.getResultEntryDetails(inpuParamData);\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_PLSSELECTALLTHEVALUEINFILTER\"\n        }));\n      }\n    };\n\n    this.onSecondaryPaneSizeChange = (e, val) => {// let hGrand = this.state.grandparentheight\n      // let check = e - 400;\n      // if (check > 1) {\n      //     hGrand = this.state.parentHeight + check\n      // }\n      // this.setState({\n      //     paneHeight: e - val,\n      //     secondPaneHeight: hGrand - e - 70,\n      //     grandparentheight: hGrand\n      // })\n      // this.setState({\n      //     paneHeight: e - val,\n      //     secondPaneHeight: this.state.parentHeight - e - 70\n      // })\n    };\n\n    this.onComboCategoryChange = (event, fieldname) => {\n      if (event !== null) {\n        let uRL = \"\";\n        let inputData = [];\n        uRL = 'resultentrybysample/getResultUsedInstrumentCombo';\n\n        if (fieldname === \"ninstrumentcatcode\") {\n          inputData = {\n            userinfo: this.props.Login.userInfo,\n            nflag: 2,\n            ninstrumentcatcode: event.value,\n            ncalibrationRequired: event.item.ncalibrationreq\n          };\n        }\n\n        rsapi.post(uRL, inputData).then(response => {\n          const TagInstrument = constructOptionList(response.data.Instrument || [], \"ninstrumentcode\", \"sinstrumentid\", undefined, undefined, undefined);\n          const TagListInstrument = TagInstrument.get(\"OptionList\");\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              masterData: { ...this.props.Login.masterData,\n                Instrument: TagListInstrument\n              },\n              selectedRecord: { ...this.props.Login.selectedRecord,\n                [fieldname]: event,\n                ninstrumentcode: TagInstrument.get(\"DefaultValue\") ? TagInstrument.get(\"DefaultValue\") : []\n              }\n            }\n          };\n          this.props.updateStore(updateInfo); // const selectedRecord = this.state.selectedRecord || {};\n          // selectedRecord[fieldname] = event;\n          // this.setState({ selectedRecord });\n        }).catch(error => {\n          if (error.response.status === 500) {\n            toast.error(error.message);\n          } else {\n            toast.warn(error.response.data);\n          }\n        });\n      }\n    };\n\n    this.testRETabDetail = () => {\n      const testTabMap = new Map(); //let npreregno = this.props.Login.masterData.RESelectedSample ? this.props.Login.masterData.RESelectedSample.map(sample => sample.npreregno).join(\",\") : \"-1\";\n\n      let ntransactiontestcode = this.props.Login.masterData.RESelectedTest ? this.props.Login.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\") : \"-1\";\n      let {\n        testskip,\n        testtake\n      } = this.state;\n      let testList = this.props.Login.masterData.RE_TEST || [];\n      testList = testList.slice(testskip, testskip + testtake);\n      const meanControlId = this.state.controlMap.has(\"CalculateMean\") && this.state.controlMap.get(\"CalculateMean\").ncontrolcode;\n      let selectedTestList = getSameRecordFromTwoArrays(testList, this.props.Login.masterData.RESelectedTest, \"ntransactiontestcode\");\n      testTabMap.set(\"IDS_RESULTS\", /*#__PURE__*/React.createElement(ResultEntryResultsTab, {\n        userInfo: this.props.Login.userInfo,\n        genericLabel: this.props.Login.genericLabel,\n        masterData: this.props.Login.masterData,\n        inputParam: this.props.Login.inputParam,\n        dataState: this.state.resultDataState,\n        dataStateChange: this.dataStateChange,\n        fetchRecord: this.props.parameterRecord,\n        editpredefinedcomments: this.editpredefinedcomments,\n        enforceResult: this.enforceResult,\n        controlMap: this.state.controlMap,\n        parameterParam: {\n          primaryKeyField: \"ntransactionresultcode\",\n          masterData: this.props.Login.masterData,\n          userInfo: this.props.Login.userInfo\n        },\n        checkListRecord: this.checkListRecord,\n        checklistParam: {\n          masterData: this.props.Login.masterData,\n          userInfo: this.props.Login.userInfo\n        },\n        selectedId: this.props.Login.selectedId || null,\n        viewFile: this.props.viewAttachment,\n        userRoleControlRights: this.state.userRoleControlRights,\n        screenName: \"IDS_RESULTS\",\n        getMeanTestParameter: this.props.getMeanCalculationTestParameter,\n        meanParam: {\n          \"userInfo\": this.props.Login.userInfo,\n          ncontrolCode: meanControlId\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 958,\n          columnNumber: 39\n        }\n      }));\n      testTabMap.set(\"IDS_INSTRUMENT\", /*#__PURE__*/React.createElement(ApprovalInstrumentTab, {\n        userInfo: this.props.Login.userInfo,\n        genericLabel: this.props.Login.genericLabel,\n        masterData: this.props.Login.masterData,\n        inputParam: this.props.Login.inputParam,\n        methodUrl: \"ResultUsedInstrument\",\n        controlMap: this.state.controlMap,\n        deleteParam: {\n          masterData: this.props.Login.masterData,\n          userInfo: this.props.Login.userInfo\n        },\n        editParam: {\n          masterData: this.props.Login.masterData,\n          userInfo: this.props.Login.userInfo\n        },\n        dataState: this.state.instrumentDataState,\n        selectedId: this.props.Login.selectedId || null,\n        isActionRequired: true,\n        dataStateChange: this.dataStateChange,\n        deleteRecord: this.deleteInstrumentRecord,\n        fetchRecord: this.fetchInstrumentRecord,\n        userRoleControlRights: this.state.userRoleControlRights,\n        screenName: \"IDS_INSTRUMENT\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 979,\n          columnNumber: 42\n        }\n      }));\n      testTabMap.set(\"IDS_MATERIAL\", /*#__PURE__*/React.createElement(ResultUsedMaterial, {\n        userInfo: this.props.Login.userInfo,\n        genericLabel: this.props.Login.genericLabel,\n        masterData: this.props.Login.masterData,\n        inputParam: this.props.Login.inputParam,\n        methodUrl: \"ResultUsedMaterial\",\n        controlMap: this.state.controlMap,\n        deleteParam: {\n          masterData: this.props.Login.masterData,\n          userInfo: this.props.Login.userInfo\n        },\n        editParam: {\n          masterData: this.props.Login.masterData,\n          userInfo: this.props.Login.userInfo\n        },\n        dataState: this.state.materialDataState,\n        selectedId: this.props.Login.selectedId || null,\n        isActionRequired: true,\n        dataStateChange: this.dataStateChange,\n        deleteRecord: this.deleteMaterialRecord,\n        fetchRecord: this.props.fetchMaterialRecord,\n        userRoleControlRights: this.state.userRoleControlRights,\n        screenName: \"IDS_MATERIAL\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 997,\n          columnNumber: 40\n        }\n      }));\n      testTabMap.set(\"IDS_TASK\", /*#__PURE__*/React.createElement(ResultEntryTaskTab, {\n        userInfo: this.props.Login.userInfo,\n        genericLabel: this.props.Login.genericLabel,\n        masterData: this.props.Login.masterData,\n        inputParam: this.props.Login.inputParam,\n        methodUrl: \"ResultUsedTask\",\n        addResultEntryTask: this.addResultEntryTask,\n        controlMap: this.state.controlMap,\n        deleteParam: {\n          masterData: this.props.Login.masterData,\n          userInfo: this.props.Login.userInfo,\n          ncontrolcode: this.state.controlMap.has(\"DeleteResultUsedTask\") && this.state.controlMap.get(\"DeleteResultUsedTask\").ncontrolcode\n        },\n        editParam: {\n          masterData: this.props.Login.masterData,\n          userInfo: this.props.Login.userInfo,\n          ncontrolcode: this.state.controlMap.has(\"EditResultUsedTask\") && this.state.controlMap.get(\"EditResultUsedTask\").ncontrolcode\n        },\n        dataState: this.state.taskDataState,\n        selectedId: this.props.Login.selectedId || null,\n        isActionRequired: true,\n        dataStateChange: this.dataStateChange,\n        deleteRecord: this.deleteTaskRecord,\n        fetchRecord: this.fetchTaskRecord //fetchRecord={this.fetchInstrumentRecord}\n        ,\n        userRoleControlRights: this.state.userRoleControlRights,\n        screenName: \"IDS_TASK\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1015,\n          columnNumber: 36\n        }\n      }));\n      testTabMap.set(\"IDS_TESTATTACHMENTS\", /*#__PURE__*/React.createElement(Attachments, {\n        screenName: \"IDS_TESTATTACHMENTS\",\n        selectedMaster: \"RESelectedTest\",\n        onSaveClick: this.onAttachmentSaveClick,\n        controlMap: this.state.controlMap,\n        userRoleControlRights: this.state.userRoleControlRights,\n        masterList: selectedTestList,\n        masterAlertStatus: \"IDS_SELECTTESTTOADDATTACHEMENT\",\n        attachments: this.props.Login.masterData.RegistrationTestAttachment || [],\n        deleteRecord: this.props.deleteAttachment,\n        fetchRecord: this.props.getAttachmentCombo,\n        addName: \"AddTestAttachment\",\n        editName: \"EditTestAttachment\",\n        deleteName: \"DeleteTestAttachment\",\n        viewName: \"ViewTestAttachment\",\n        methodUrl: \"TestAttachment\",\n        nsubsampleneed: this.props.Login.masterData.realRegSubTypeValue.nneedsubsample,\n        subFields: [{\n          [designProperties.VALUE]: \"stestsynonym\"\n        }, {\n          [designProperties.VALUE]: \"dcreateddate\"\n        }],\n        userInfo: this.props.Login.userInfo,\n        isneedReport: true,\n        deleteParam: {\n          methodUrl: \"TestAttachment\",\n          ntransactiontestcode,\n          userInfo: this.props.Login.userInfo,\n          masterData: this.props.Login.masterData,\n          esignRights: this.props.Login.userRoleControlRights,\n          screenName: \"IDS_TESTATTACHMENTS\"\n        },\n        editParam: {\n          methodUrl: \"TestAttachment\",\n          ntransactiontestcode,\n          userInfo: this.props.Login.userInfo,\n          masterData: this.props.Login.masterData,\n          esignRights: this.props.Login.userRoleControlRights,\n          screenName: \"IDS_TESTATTACHMENTS\",\n          masterList: selectedTestList //this.props.Login.masterData.RESelectedTest\n\n        },\n        selectedListName: \"IDS_TESTS\",\n        displayName: \"stestsynonym\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1040,\n          columnNumber: 47\n        }\n      }));\n      testTabMap.set(\"IDS_TESTCOMMENTS\", /*#__PURE__*/React.createElement(Comments, {\n        screenName: \"IDS_TESTCOMMENTS\",\n        isSampleTestComment: true,\n        selectedMaster: \"RESelectedTest\",\n        onSaveClick: this.onCommentsSaveClick,\n        controlMap: this.state.controlMap,\n        userRoleControlRights: this.state.userRoleControlRights,\n        Comments: this.props.Login.masterData.RegistrationTestComment || [],\n        fetchRecord: this.props.getCommentsCombo,\n        addName: \"AddTestComment\",\n        editName: \"EditTestComment\",\n        deleteName: \"DeleteTestComment\",\n        methodUrl: \"TestComment\",\n        masterList: selectedTestList,\n        masterAlertStatus: \"IDS_SELECTTESTTOADDCOMMENTS\",\n        primaryKeyField: \"ntestcommentcode\",\n        dataState: this.state.testCommentDataState,\n        dataStateChange: this.dataStateChange,\n        masterData: this.props.Login.masterData,\n        isTestComment: true,\n        deleteParam: {\n          methodUrl: \"TestComment\",\n          ntransactiontestcode,\n          userInfo: this.props.Login.userInfo,\n          masterData: this.props.Login.masterData,\n          esignRights: this.props.Login.userRoleControlRights,\n          screenName: \"IDS_TESTCOMMENTS\",\n          masterList: this.props.Login.masterData.RESelectedTest,\n          ncontrolCode: this.state.controlMap.has(\"DeleteTestComment\") && this.state.controlMap.get(\"DeleteTestComment\").ncontrolcode\n        },\n        editParam: {\n          methodUrl: \"TestComment\",\n          ntransactiontestcode,\n          userInfo: this.props.Login.userInfo,\n          masterData: this.props.Login.masterData,\n          esignRights: this.props.Login.userRoleControlRights,\n          screenName: \"IDS_TESTCOMMENTS\",\n          operation: \"update\",\n          masterList: this.props.Login.masterData.RESelectedTest,\n          ncontrolCode: this.state.controlMap.has(\"EditTestComment\") && this.state.controlMap.get(\"EditTestComment\").ncontrolcode\n        },\n        selectedListName: \"IDS_TESTS\",\n        displayName: \"stestsynonym\",\n        selectedId: this.props.Login.selectedId || null,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1083,\n          columnNumber: 44\n        }\n      }));\n      testTabMap.set(\"IDS_RESULTCHANGEHISTORY\", /*#__PURE__*/React.createElement(ResultChangeHistoryTab, {\n        userInfo: this.props.Login.userInfo,\n        genericLabel: this.props.Login.genericLabel,\n        ApprovalResultChangeHistory: this.props.Login.masterData.ResultChangeHistory || [],\n        inputParam: this.props.Login.inputParam,\n        dataState: this.state.resultChangeDataState,\n        dataStateChange: this.dataStateChange,\n        screenName: \"IDS_RESULTCHANGEHISTORY\",\n        controlMap: this.state.controlMap,\n        masterData: this.props.Login.masterData,\n        userRoleControlRights: this.state.userRoleControlRights,\n        selectedId: null,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1133,\n          columnNumber: 51\n        }\n      }));\n      return testTabMap;\n    };\n\n    this.sampleDataStateChange = event => {\n      switch (this.props.Login.activeSampleKey) {\n        case \"IDS_APPROVALHISTORY\":\n          this.setState({\n            sampleHistoryDataState: event.dataState\n          });\n          break;\n\n        default:\n          this.setState({\n            sampleGridDataState: event.dataState\n          });\n          break;\n      }\n    };\n\n    this.sampleGridDataStateChange = event => {\n      this.setState({\n        sampleGridDataState: event.dataState\n      });\n    };\n\n    this.dataStateChange = event => {\n      switch (this.props.Login.activeTestKey) {\n        case \"IDS_RESULTS\":\n          this.setState({\n            resultDataState: event.dataState\n          });\n          break;\n\n        case \"IDS_INSTRUMENT\":\n          this.setState({\n            instrumentDataState: event.dataState\n          });\n          break;\n\n        case \"IDS_MATERIAL\":\n          this.setState({\n            materialDataState: event.dataState\n          });\n          break;\n\n        case \"IDS_TASK\":\n          this.setState({\n            taskDataState: event.dataState\n          });\n          break;\n\n        case \"IDS_TESTATTACHMENTS\":\n          this.setState({\n            instrumentDataState: event.dataState\n          });\n          break;\n\n        case \"IDS_TESTCOMMENTS\":\n          this.setState({\n            testCommentDataState: event.dataState\n          });\n          break;\n\n        case \"IDS_DOCUMENTS\":\n          this.setState({\n            documentDataState: event.dataState\n          });\n          break;\n\n        case \"IDS_RESULTCHANGEHISTORY\":\n          this.setState({\n            resultChangeDataState: event.dataState\n          });\n          break;\n\n        case \"IDS_SAMPLECOMMENTS\":\n          this.setState({\n            sampleChangeDataState: event.dataState\n          });\n          break;\n\n        default:\n          this.setState({\n            resultDataState: event.dataState\n          });\n          break;\n      }\n    };\n\n    this.subsampleTabDetail = () => {\n      let ntransactionsamplecode = this.props.Login.masterData.RESelectedSubSample ? this.props.Login.masterData.RESelectedSubSample.map(sample => sample.ntransactionsamplecode).join(\",\") : \"-1\";\n      const tabMap = new Map();\n      let subsampleList = this.props.Login.masterData.RE_SUBSAMPLE || [];\n      let {\n        subsampleskip,\n        subsampletake\n      } = this.state;\n      subsampleList = subsampleList.slice(subsampleskip, subsampleskip + subsampletake);\n      let selectedSubSampleList = getSameRecordFromTwoArrays(subsampleList, this.props.Login.masterData.RESelectedSubSample, \"ntransactionsamplecode\");\n      tabMap.set(\"IDS_SUBSAMPLEATTACHMENTS\", /*#__PURE__*/React.createElement(Attachments, {\n        screenName: \"IDS_SUBSAMPLEATTACHMENTS\",\n        onSaveClick: this.onAttachmentSaveClick,\n        selectedMaster: \"selectedSubSample\",\n        controlMap: this.state.controlMap,\n        userRoleControlRights: this.state.userRoleControlRights,\n        attachments: this.props.Login.masterData.RegistrationSampleAttachment || [],\n        deleteRecord: this.props.deleteAttachment,\n        masterList: this.props.Login.masterData.RESelectedSubSample,\n        masterAlertStatus: \"IDS_SELECTSUBSAMPLETOADDATTACHMENT\",\n        fetchRecord: this.props.getAttachmentCombo,\n        viewFile: this.props.viewAttachment,\n        addName: \"AddSubSampleAttachment\",\n        editName: \"EditSubSampleAttachment\",\n        deleteName: \"DeleteSubSampleAttachment\",\n        viewName: \"ViewSubSampleAttachment\",\n        methodUrl: \"SubSampleAttachment\",\n        nsubsampleneed: this.props.Login.masterData.realRegSubTypeValue.nneedsubsample,\n        skip: this.props.Login.inputParam ? this.props.Login.inputParam.attachmentskip || 0 : 0,\n        take: this.props.Login.inputParam ? this.props.Login.inputParam.attachmenttake || 10 : this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5,\n        userInfo: this.props.Login.userInfo,\n        deleteParam: {\n          methodUrl: \"SubSampleAttachment\",\n          ntransactionsamplecode,\n          userInfo: this.props.Login.userInfo,\n          masterData: this.props.Login.masterData,\n          esignRights: this.props.Login.userRoleControlRights\n        },\n        editParam: {\n          methodUrl: \"SubSampleAttachment\",\n          ntransactionsamplecode,\n          userInfo: this.props.Login.userInfo,\n          masterData: this.props.Login.masterData,\n          esignRights: this.props.Login.userRoleControlRights,\n          masterList: this.props.Login.masterData.RE_SUBSAMPLE || []\n        },\n        selectedListName: \"IDS_SAMPLEARNO\",\n        displayName: \"ssamplearno\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1374,\n          columnNumber: 48\n        }\n      }));\n      tabMap.set(\"IDS_SUBSAMPLECOMMENTS\", /*#__PURE__*/React.createElement(Comments, {\n        screenName: \"IDS_SUBSAMPLECOMMENTS\",\n        onSaveClick: this.onCommentsSaveClick,\n        selectedMaster: \"RESelectedSubSample\",\n        controlMap: this.state.controlMap,\n        userRoleControlRights: this.state.userRoleControlRights,\n        Comments: this.props.Login.masterData.RegistrationSampleComment || [],\n        fetchRecord: this.props.getCommentsCombo,\n        addName: \"AddSubSampleComment\",\n        editName: \"EditSubSampleComment\",\n        deleteName: \"DeleteSubSampleComment\",\n        methodUrl: \"SubSampleComment\",\n        masterData: this.props.Login.masterData,\n        isTestComment: false,\n        masterList: this.props.Login.masterData.RESelectedSubSample,\n        masterAlertStatus: \"IDS_SELECTSUBSAMPLETOADDCOMMENTS\",\n        primaryKeyField: \"nsamplecommentcode\",\n        dataState: this.state.subSampleCommentDataState,\n        dataStateChange: this.subSampledataStateChange,\n        deleteParam: {\n          methodUrl: \"SubSampleComment\",\n          ntransactionsamplecode,\n          userInfo: this.props.Login.userInfo,\n          masterData: this.props.Login.masterData,\n          esignRights: this.props.Login.userRoleControlRights,\n          screenName: \"IDS_SUBSAMPLECOMMENTS\"\n        },\n        editParam: {\n          methodUrl: \"SubSampleComment\",\n          ntransactionsamplecode,\n          userInfo: this.props.Login.userInfo,\n          masterData: this.props.Login.masterData,\n          esignRights: this.props.Login.userRoleControlRights,\n          screenName: \"IDS_SUBSAMPLECOMMENTS\",\n          operation: \"update\",\n          masterList: this.props.Login.masterData.RE_SUBSAMPLE || [],\n          ncontrolCode: this.state.controlMap.has(\"EditSubSampleComment\") && this.state.controlMap.get(\"EditSubSampleComment\").ncontrolcode\n        },\n        selectedListName: \"IDS_SAMPLEARNO\",\n        displayName: \"ssamplearno\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1416,\n          columnNumber: 45\n        }\n      }));\n      return tabMap;\n    };\n\n    this.onSampleTabChange = tabProps => {\n      const activeSampleTab = tabProps.screenName;\n\n      if (activeSampleTab !== this.props.Login.activeSampleTab) {\n        let inputData = {\n          masterData: this.props.Login.masterData,\n          RESelectedSample: this.props.Login.masterData.RESelectedSample,\n          npreregno: this.props.Login.masterData.RESelectedSample ? this.props.Login.masterData.RESelectedSample.map(item => item.npreregno).join(\",\") : \"-1\",\n          userinfo: this.props.Login.userInfo,\n          screenName: activeSampleTab,\n          activeSampleTab\n        };\n        this.props.getSampleChildTabDetail(inputData);\n      }\n    };\n\n    this.onTestTabChange = tabProps => {\n      const activeTestKey = tabProps.screenName;\n\n      if (activeTestKey !== this.props.Login.activeTestKey) {\n        if (this.props.Login.masterData.RESelectedTest && this.props.Login.masterData.RESelectedTest.length > 0) {\n          let inputData = {\n            masterData: this.props.Login.masterData,\n            ntransactiontestcode: this.props.Login.masterData.RESelectedTest ? this.props.Login.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\").toString() : \"\",\n            npreregno: this.props.Login.masterData.RESelectedSample ? this.props.Login.masterData.RESelectedSample.map(preregno => preregno.npreregno).join(\",\").toString() : \"\",\n            RESelectedTest: this.props.Login.masterData.RESelectedTest ? this.props.Login.masterData.RESelectedTest : \"\",\n            // ntransactiontestcode: this.props.Login.masterData.RESelectedTest ?\n            //     this.props.Login.masterData.selectedTestCode : this.props.Login.masterData.RESelectedTest ?\n            //         String(this.props.Login.masterData.RESelectedTest.ntransactiontestcode) : \"-1\",\n            userinfo: this.props.Login.userInfo,\n            activeTestKey: activeTestKey,\n            screenName: activeTestKey,\n            resultDataState: this.state.resultDataState,\n            instrumentDataState: this.state.instrumentDataState,\n            materialDataState: this.state.materialDataState,\n            taskDataState: this.state.taskDataState,\n            documentDataState: this.state.documentDataState,\n            resultChangeDataState: this.state.resultChangeDataState,\n            testCommentDataState: this.state.testCommentDataState,\n            sampleChangeDataState: this.state.sampleChangeDataState\n          };\n          this.props.getTestChildTabREDetail(inputData, true);\n        } else {\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_SELECTTEST\"\n          }));\n        }\n      }\n    };\n\n    this.openClosePortal = test => {\n      if (this.props.Login.openELNSheet === undefined || !this.props.Login.openELNSheet) {\n        // if(test.RESelectedTest.length === 1)\n        // {           \n        this.props.getELNTestValidation(test, this.props.Login.integrationSettings); // }\n        // else{\n        //     toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTONLYONETEST\" }));\n        // }\n      } else {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            openELNSheet: false\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } // if (this.state.openELNSheet === false) {\n      // if (test.test.selensheetname !== null) {\n\n      /*let enlLink = \"\";\r\n         const elnuser= {\r\n           usercode: test.elnUserInfo.nelncode,\r\n           username: test.elnUserInfo.selnusername,\r\n           userfullname: test.elnUserInfo.selnusername,\r\n          lsusergroup: {\r\n           usergroupcode: test.elnUserInfo.nelnusergroupcode,\r\n           usergroupname: test.elnUserInfo.nelnusergroupcode,\r\n           },\r\n          //  lssitemaster:{ sitecode:sitecode }\r\n          }\r\n            const user = CF_encryptionData(elnuser).EncryptData;\r\n      const enlcredential = {\r\n          ElnUser: CF_encryptionData(this.props.Login.settings[20]).EncryptData,\r\n          Elntenant: CF_encryptionData(\"-1\").EncryptData,\r\n          Elnloginfrom: CF_encryptionData(\"-1\").EncryptData,\r\n          //Elntoken: CF_encryptionData(\"\").EncryptData,\r\n          Elnpassword: CF_encryptionData(this.props.Login.settings[21]).EncryptData,\r\n          Elnsitecode: CF_encryptionData(this.props.Login.settings[22]).EncryptData,\r\n          Elnsitename: CF_encryptionData(this.props.Login.settings[23]).EncryptData,\r\n          Elnusergroupname: CF_encryptionData(this.props.Login.settings[24]).EncryptData,\r\n          Elnusergroupcode: CF_encryptionData(this.props.Login.settings[25]).EncryptData,\r\n      }\r\n        //Axios.post(\"http://5.189.171.17:8095/ELN-0.0.1-SNAPSHOT/authenticate\",inputou)\r\n      //Axios.post(this.props.Login.settings[27], inputou)\r\n      // Axios.post(\"https://logilabelntesting.azurewebsites.net/\", user)\r\n      //     .then(response => {\r\n              const testname = test.test.stestname.substring(0, test.test.stestname.indexOf(\"[\")).trim();\r\n                //const batchId = test.test.sarno+'-'+test.test.stestname;\r\n              const batchId = test.test.sarno + '-' + testname;\r\n              const ntransactiontestcode = CF_encryptionData(batchId//test.RESelectedTest[0].ntransactiontestcode\r\n              ).EncryptData;\r\n              // const Elntoken = CF_encryptionData(\"Bearer \" + response.data.token).EncryptData;\r\n                  // const link =\r\n              //     //window.location.href.toString() \r\n              //     \"\" +\r\n              //     '#{\"orderid\":\"' +\r\n              //     ntransactiontestcode +\r\n              //     '\",\"u\":\"' +\r\n              //     enlcredential.ElnUser +\r\n              //     '\",\"t\":\"' +\r\n              //     enlcredential.Elntenant +\r\n              //     '\",\"l\":\"' +\r\n              //     enlcredential.Elnloginfrom +\r\n              //     '\",\"k\":\"' +\r\n              //     Elntoken +\r\n              //     //response.data.token+\r\n              //     '\",\"uc\":\"' +\r\n              //     enlcredential.Elnusergroupcode +\r\n              //     '\",\"ug\":\"' +\r\n              //     enlcredential.Elnusergroupname +\r\n              //     '\",\"sc\":\"' +\r\n              //     enlcredential.Elnsitecode +\r\n              //     '\",\"sn\":\"' +\r\n              //     enlcredential.Elnsitename +\r\n              //     '\",\"LO\":\"' +\r\n              //     ntransactiontestcode +\r\n              //     '\"}';\r\n                const link =\r\n                  //window.location.href.toString() \r\n                  \"\" +\r\n                  '#{\"orderid\":\"' +\r\n                  ntransactiontestcode +\r\n                  '\",\"user\":\"' +\r\n                  user +\r\n                  '\",\"batchid\":\"' +\r\n                  ntransactiontestcode +\r\n                  '\"}';\r\n              \r\n              //enlLink = \"https://logilabelntest.azurewebsites.net/vieworder\".concat(link);\r\n              enlLink=\"https://logilabelntesting.azurewebsites.net/\";\r\n              console.log(\"eln link:\", enlLink);\r\n              //}\r\n              // this.setState({ openELNSheet: !this.state.openELNSheet, nflag: 1, enlLink })\r\n              this.setState({ openELNSheet: true, nflag: 1, enlLink })\r\n              //this.props.encryptionData(test);\r\n          // })\r\n          //this.getActiveTestURL() \r\n          // .catch(response => { })\r\n      // }\r\n      // else {\r\n      //     toast.warn(this.props.intl.formatMessage({ id: \"IDS_NOSHEETFORTHISTEST\" }));\r\n      // }\r\n      /*}\r\n      else {\r\n      this.setState({ openELNSheet: !this.state.openELNSheet, nflag: 1 })\r\n      let testChildGetREParam = {\r\n      masterData: this.props.Login.masterData,\r\n      userinfo: this.props.Login.userInfo,\r\n      nsampletypecode: this.props.Login.masterData.realSampleTypeValue && this.props.Login.masterData.realSampleTypeValue.nsampletypecode,\r\n      nregtypecode: this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue.nregtypecode,\r\n      nregsubtypecode: this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode,\r\n      napprovalversioncode: this.props.Login.masterData.realApproveConfigVersion && this.props.Login.masterData.realApproveConfigVersion.napprovalconfigversioncode,\r\n      ntransactionstatus: this.props.Login.masterData.realFilterStatusValue && this.props.Login.masterData.realFilterStatusValue.ntransactionstatus,\r\n      ntestcode: this.props.Login.masterData.realTestcodeValue && this.props.Login.masterData.realTestcodeValue.ntestcode,\r\n      npreregno: this.props.Login.masterData.RESelectedSample && this.props.Login.masterData.RESelectedSample.map(sample => sample.npreregno).join(\",\"),\r\n      ntransactionsamplecode: this.props.Login.masterData.RESelectedSubSample && this.props.Login.masterData.RESelectedSubSample.map(sample => sample.ntransactionsamplecode).join(\",\"),\r\n      activeTestKey: 'IDS_RESULTS',\r\n      testskip: this.state.testskip,\r\n      testtake: this.state.testtake,\r\n      resultDataState: this.state.resultDataState,\r\n      instrumentDataState: this.state.instrumentDataState,\r\n      materialDataState: this.state.materialDataState,\r\n      taskDataState: this.state.taskDataState,\r\n      documentDataState: this.state.documentDataState,\r\n      resultChangeDataState: this.state.resultChangeDataState,\r\n      testCommentDataState: this.state.testCommentDataState,\r\n      RESelectedTest: this.props.Login.masterData.RESelectedTest\r\n      }\r\n      this.props.getTestChildTabREDetail(testChildGetREParam, true)\r\n        //this.filterTestParam\r\n      }*/\n\n    };\n\n    this.onSubSampleTabChange = tabProps => {\n      const activeSubSampleTab = tabProps.screenName;\n\n      if (activeSubSampleTab !== this.props.Login.activeSubSampleTab) {\n        let inputData = {\n          masterData: this.props.Login.masterData,\n          selectedSubSample: this.props.Login.masterData.RESelectedSubSample,\n          ntransactionsamplecode: this.props.Login.masterData.RESelectedSubSample ? this.props.Login.masterData.RESelectedSubSample.map(item => item.ntransactionsamplecode).join(\",\") : \"-1\",\n          userinfo: this.props.Login.userInfo,\n          screenName: activeSubSampleTab,\n          activeSubSampleTab,\n          subSampleCommentDataState: this.state.subSampleCommentDataState,\n          subSampleAttachmentDataState: this.state.subSampleAttachmentDataState\n        };\n        this.props.getSubSampleChildTabDetail(inputData);\n      }\n    };\n\n    this.subSampledataStateChange = event => {\n      switch (this.props.Login.activeSubSampleTab) {\n        case \"IDS_SUBSAMPLECOMMENTS\":\n          this.setState({\n            subSampleCommentDataState: event.dataState\n          });\n          break;\n\n        case \"IDS_SUBSAMPLEATTACHMENTS\":\n          this.setState({\n            subSampleAttachmentDataState: event.dataState\n          });\n          break;\n\n        default:\n          this.setState({\n            popUptestDataState: event.dataState\n          });\n          break;\n      }\n    };\n\n    this.testMethodSourceEdit = test => {\n      this.props.testMethodSourceEdit(test);\n    };\n\n    this.addREInstrument = test => {\n      this.props.addREInstrument(test);\n    };\n\n    this.adhocTestParameter = test => {\n      const inputData = {\n        ntestcode: test.test.ntestcode,\n        ntestgrouptestcode: test.test.ntestgrouptestcode,\n        ntransactiontestcode: test.test.ntransactiontestcode,\n        npreregno: test.test.npreregno,\n        masterData: this.props.Login.masterData,\n        userinfo: test.userInfo,\n        adhocId: test.adhocId\n      };\n      this.props.addREAdhocParamter(inputData);\n    };\n\n    this.deleteInstrumentRecord = test => {\n      const ndesigntemplatemappingcode = parseInt(this.props.Login.masterData.ndesigntemplatemappingcode && this.props.Login.masterData.ndesigntemplatemappingcode);\n      test = { ...test,\n        'ndesigntemplatemappingcode': ndesigntemplatemappingcode\n      };\n      let inputParam = {\n        inputData: { ...test,\n          'ndesigntemplatemappingcode': ndesigntemplatemappingcode,\n          'userinfo': this.props.Login.userInfo\n        },\n        // formData: formData,\n        // isFileupload: true,\n        operation: \"deleteInstrument\",\n        screenName: \"deleteInstrumentAction\",\n        displayName: this.props.Login.inputParam.displayName //, postParam,\n        //test: test\n\n      };\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, test.ncontrolCode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData: this.props.Login.masterData\n            },\n            openModal: true,\n            screenName: \"deleteInstrumentAction\",\n            operation: \"deleteInstrument\"\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.deleteInstrumentRecord(test);\n      }\n    };\n\n    this.fetchInstrumentRecord = test => {\n      this.props.fetchInstrumentRecord(test);\n    };\n\n    this.fetchMaterialRecord = test => {\n      this.props.fetchMaterialRecord(test);\n    };\n\n    this.deleteMaterialRecord = test => {\n      const nregtypecode = parseInt(this.props.Login.masterData.realRegTypeValue.nregtypecode);\n      const nregsubtypecode = parseInt(this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode);\n      const ndesigntemplatemappingcode = parseInt(this.props.Login.masterData.ndesigntemplatemappingcode && this.props.Login.masterData.ndesigntemplatemappingcode);\n      test = { ...test,\n        nregtypecode: nregtypecode,\n        nregsubtypecode: nregsubtypecode,\n        ndesigntemplatemappingcode: ndesigntemplatemappingcode\n      };\n      let inputParam = {\n        inputData: { ...test.selectedRecord,\n          nregtypecode: nregtypecode,\n          nregsubtypecode: nregsubtypecode,\n          ndesigntemplatemappingcode: ndesigntemplatemappingcode,\n          ntransactiontestcode: test.masterData.RESelectedTest ? test.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\").toString() : \"\",\n          userinfo: this.props.Login.userInfo\n        },\n        // formData: formData,\n        // isFileupload: true,\n        classUrl: 'resultentrybysample',\n        methodUrl: \"ResultUsedMaterial\",\n        operation: \"delete\",\n        //screenName: \"deleteMaterialAction\",\n        displayName: this.props.Login.inputParam.displayName,\n        //, postParam,\n        //test: test\n        nresultusedmaterialcode: test.selectedRecord.nresultusedmaterialcode\n      };\n      const masterData = this.props.Login.masterData;\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, test.ncontrolCode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData: this.props.Login.masterData\n            },\n            openModal: true,\n            screenName: \"deleteMaterialAction\",\n            operation: \"deleteMaterial\"\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, masterData, \"openModal\"); //this.props.deleteResultUsedMaterial(test)\n      }\n    };\n\n    this.deleteTaskRecord = test => {\n      const ndesigntemplatemappingcode = parseInt(this.props.Login.masterData.ndesigntemplatemappingcode && this.props.Login.masterData.ndesigntemplatemappingcode);\n      test = { ...test,\n        ndesigntemplatemappingcode: ndesigntemplatemappingcode\n      };\n      let inputParam = {\n        inputData: { ...test,\n          'userinfo': this.props.Login.userInfo\n        },\n        // formData: formData,\n        // isFileupload: true,\n        operation: \"deleteTask\",\n        displayName: this.props.Login.inputParam.displayName //, postParam,\n        //test: test\n\n      };\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, test.ncontrolCode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData: this.props.Login.masterData\n            },\n            openModal: true,\n            screenName: \"deleteTaskaction\",\n            operation: \"deleteTask\"\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.deleteTaskRecord(test);\n      }\n    };\n\n    this.fetchTaskRecord = test => {\n      this.props.fetchTaskRecord(test);\n    };\n\n    this.addResultEntryTask = inputData => {\n      let selectedRecord = {};\n      selectedRecord = {\n        npreregno: inputData.npreregno,\n        ntransactiontestcode: inputData.ntransactiontestcode,\n        stestsynonym: inputData.stestsynonym\n      };\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          selectedRecord: selectedRecord,\n          operation: \"create\",\n          screenName: \"IDS_TASK\",\n          openModal: true,\n          activeTestKey: \"IDS_TASK\",\n          ncontrolcode: inputData.addResultUsedTaskId,\n          selectedId: null\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.checkListRecord = parameterData => {\n      this.props.checkListRecord(parameterData, this.props.Login.userInfo);\n    };\n\n    this.getFormula = (parameterData, userInfo, masterData, index, event) => {\n      this.setState({\n        modalEvent: event.currentTarget\n      });\n      this.props.getFormula(parameterData, userInfo, masterData, index, this.state.selectedRecord);\n    };\n\n    this.getAverageResult = (event, parameterData, index, selectedForumulaInput, masterData, selectedRecord) => {\n      if (!selectedRecord.selectedForumulaInput[index].senableAverage) {\n        this.props.getAverageResult(parameterData, index, selectedForumulaInput, this.props.Login.userInfo, masterData, selectedRecord);\n      } else {\n        selectedForumulaInput[index].senableAverage = !selectedRecord.selectedForumulaInput[index].senableAverage;\n        selectedForumulaInput[index].svalues = selectedForumulaInput[index].soldvalue;\n        this.setState({\n          selectedRecord: { ...selectedRecord,\n            selectedForumulaInput\n          }\n        });\n      }\n    };\n\n    this.calculateFormula = () => {\n      const selectedRecord = this.state.selectedRecord || [];\n      const selectedForumulaInput = selectedRecord.selectedForumulaInput || [];\n      let lstDynamicFields = [];\n\n      if (selectedForumulaInput) {\n        selectedForumulaInput.map(dynamicfields => lstDynamicFields.push(dynamicfields));\n        const inputData = {\n          masterData: this.props.Login.masterData,\n          lstDynamicFields: lstDynamicFields,\n          userInfo: this.props.Login.userInfo,\n          selectedRecord: selectedRecord,\n          selectedResultGrade: this.state.selectedRecord.selectedResultGrade,\n          ResultParameter: this.state.selectedRecord.ResultParameter || {}\n        };\n        this.props.calculateFormula(inputData);\n      }\n    };\n\n    this.resultImport = () => {\n      this.props.Login.masterData.selectedImportFile = [];\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          operation: \"create\",\n          screenName: \"IDS_RESULTIMPORTFILE\",\n          openModal: true,\n          loadFile: true,\n          activeTestKey: \"IDS_RESULTS\",\n          masterData: this.props.Login.masterData\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.closeFilter = () => {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          showFilter: false\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.handlePageChange = e => {\n      this.setState({\n        skip: e.skip,\n        take: e.take\n      }); //setTimeout(() => { this._scrollBarRef.updateScroll() })\n    };\n\n    this.handleSubSamplePageChange = e => {\n      this.setState({\n        subSampleSkip: e.skip,\n        subSampleTake: e.take\n      }); //setTimeout(() => { this._scrollBarRef.updateScroll() })\n    };\n\n    this.handleTestPageChange = e => {\n      this.setState({\n        testskip: e.skip,\n        testtake: e.take,\n        sampletakeDataState: e.take\n      });\n    };\n\n    this.verticalPaneSizeChange = val => {\n      if (this.state.enableAutoHeight) {\n        this.setState({\n          initialVerticalWidth: val - 150\n        });\n      }\n    };\n\n    this.changeSplitterOption = () => {\n      this.setState({\n        enableAutoHeight: !this.state.enableAutoHeight,\n        initialVerticalWidth: \"57vh\"\n      });\n    };\n\n    this.sideNavDetail = screenName => {\n      let {\n        testskip,\n        testtake\n      } = this.state;\n      let testList = this.props.Login.masterData.searchedTests ? [...this.props.Login.masterData.searchedTests] : this.props.Login.masterData.RE_TEST || [];\n      const editTestCommentsId = this.state.controlMap.has(\"EditTestComment\") && this.state.controlMap.get(\"EditTestComment\").ncontrolcode;\n      testList = testList.slice(testskip, testskip + testtake);\n      let selectedTestList = getSameRecordFromTwoArrays(testList, this.props.Login.masterData.RESelectedTest, \"ntransactiontestcode\"); // let npreregno = this.props.Login.masterData.selectedSample ? this.props.Login.masterData.selectedSample.map(sample => sample.npreregno).join(\",\") : \"-1\";\n\n      let ntransactiontestcode = this.props.Login.masterData.RESelectedTest ? this.props.Login.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\") : \"-1\";\n      return screenName == \"IDS_RESULTS\" ? /*#__PURE__*/React.createElement(CustomTabs, {\n        activeKey: this.props.Login.activeTestTab || \"IDS_RESULTS\",\n        tabDetail: this.resultTabDetail(),\n        onTabChange: this.onTabChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2036,\n          columnNumber: 17\n        }\n      }) : screenName == \"IDS_ATTACHMENTS\" ? /*#__PURE__*/React.createElement(CustomTabs, {\n        activeKey: this.props.Login.activeTestTab || \"IDS_TESTATTACHMENTS\",\n        tabDetail: this.attachmentTabDetail(),\n        destroyInactiveTabPane: true,\n        onTabChange: this.onTabChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2038,\n          columnNumber: 21\n        }\n      }) : screenName == \"IDS_COMMENTS\" ? /*#__PURE__*/React.createElement(CustomTabs, {\n        activeKey: this.props.Login.activeTestTab || \"IDS_TESTCOMMENTS\",\n        tabDetail: this.commentTabDetail(),\n        destroyInactiveTabPane: true,\n        onTabChange: this.onTabChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2040,\n          columnNumber: 25\n        }\n      }) : screenName == \"IDS_INSTRUMENT\" ? /*#__PURE__*/React.createElement(ApprovalInstrumentTab, {\n        userInfo: this.props.Login.userInfo,\n        genericLabel: this.props.Login.genericLabel,\n        masterData: this.props.Login.masterData,\n        inputParam: this.props.Login.inputParam,\n        methodUrl: \"ResultUsedInstrument\",\n        controlMap: this.state.controlMap,\n        deleteParam: {\n          masterData: this.props.Login.masterData,\n          userInfo: this.props.Login.userInfo\n        },\n        editParam: {\n          masterData: this.props.Login.masterData,\n          userInfo: this.props.Login.userInfo\n        },\n        dataState: this.state.instrumentDataState,\n        selectedId: this.props.Login.selectedId || null,\n        isActionRequired: true,\n        dataStateChange: this.dataStateChange,\n        deleteRecord: this.deleteInstrumentRecord,\n        fetchRecord: this.fetchInstrumentRecord,\n        userRoleControlRights: this.state.userRoleControlRights,\n        screenName: \"IDS_INSTRUMENT\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2043,\n          columnNumber: 29\n        }\n      }) : screenName == \"IDS_MATERIAL\" ? /*#__PURE__*/React.createElement(ResultUsedMaterial, {\n        userInfo: this.props.Login.userInfo,\n        genericLabel: this.props.Login.genericLabel,\n        masterData: this.props.Login.masterData,\n        inputParam: this.props.Login.inputParam,\n        methodUrl: \"ResultUsedMaterial\",\n        controlMap: this.state.controlMap,\n        deleteParam: {\n          masterData: this.props.Login.masterData,\n          userInfo: this.props.Login.userInfo\n        },\n        editParam: {\n          masterData: this.props.Login.masterData,\n          userInfo: this.props.Login.userInfo\n        },\n        dataState: this.state.materialDataState,\n        selectedId: this.props.Login.selectedId || null,\n        isActionRequired: true,\n        dataStateChange: this.dataStateChange,\n        deleteRecord: this.deleteMaterialRecord,\n        fetchRecord: this.props.fetchMaterialRecord,\n        userRoleControlRights: this.state.userRoleControlRights,\n        screenName: \"IDS_MATERIAL\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2063,\n          columnNumber: 33\n        }\n      }) : screenName == \"IDS_TASK\" ? /*#__PURE__*/React.createElement(ResultEntryTaskTab, {\n        userInfo: this.props.Login.userInfo,\n        genericLabel: this.props.Login.genericLabel,\n        masterData: this.props.Login.masterData,\n        inputParam: this.props.Login.inputParam,\n        methodUrl: \"ResultUsedTask\",\n        addResultEntryTask: this.addResultEntryTask,\n        controlMap: this.state.controlMap,\n        deleteParam: {\n          masterData: this.props.Login.masterData,\n          userInfo: this.props.Login.userInfo,\n          ncontrolcode: this.state.controlMap.has(\"DeleteResultUsedTask\") && this.state.controlMap.get(\"DeleteResultUsedTask\").ncontrolcode\n        },\n        editParam: {\n          masterData: this.props.Login.masterData,\n          userInfo: this.props.Login.userInfo,\n          ncontrolcode: this.state.controlMap.has(\"EditResultUsedTask\") && this.state.controlMap.get(\"EditResultUsedTask\").ncontrolcode\n        },\n        dataState: this.state.taskDataState,\n        selectedId: this.props.Login.selectedId || null,\n        isActionRequired: true,\n        dataStateChange: this.dataStateChange,\n        deleteRecord: this.deleteTaskRecord,\n        fetchRecord: this.fetchTaskRecord //fetchRecord={this.fetchInstrumentRecord}\n        ,\n        userRoleControlRights: this.state.userRoleControlRights,\n        screenName: \"IDS_TASK\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2083,\n          columnNumber: 37\n        }\n      }) : screenName == \"IDS_SAMPLEDETAILS\" ? this.props.Login.masterData.RESelectedSample && this.props.Login.masterData.RESelectedSample.length === 1 ? /*#__PURE__*/React.createElement(SampleInfoView, {\n        data: this.props.Login.masterData.RESelectedSample && this.props.Login.masterData.RESelectedSample.length > 0 ? this.props.Login.masterData.RESelectedSample[this.props.Login.masterData.RESelectedSample.length - 1] : {},\n        SingleItem: this.state.SingleItem,\n        screenName: \"IDS_SAMPLEINFO\",\n        userInfo: this.props.Login.userInfo,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2111,\n          columnNumber: 45\n        }\n      }) : /*#__PURE__*/React.createElement(SampleInfoGrid, {\n        selectedSample: this.props.Login.masterData.RESelectedSample,\n        dataState: this.state.sampleGridDataState,\n        dataStateChange: this.sampleGridDataStateChange,\n        extractedColumnList: this.gridfillingColumn(this.state.DynamicGridItem) || [],\n        detailedFieldList: this.gridfillingColumn(this.state.DynamicGridMoreField) || [],\n        userInfo: this.props.Login.userInfo,\n        inputParam: this.props.Login.inputParam,\n        screenName: \"IDS_SAMPLEGRID\",\n        jsonField: \"jsondata\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2119,\n          columnNumber: 45\n        }\n      }) : \"\";\n    };\n\n    this.resultTabDetail = () => {\n      const resultTabMap = new Map(); //let ntransactiontestcode = this.props.Login.masterData.RESelectedTest ? this.props.Login.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\") : \"-1\";\n      // let { testskip, testtake } = this.state\n      // let testList = this.props.Login.masterData.RE_TEST || [];\n      // testList = testList.slice(testskip, testskip + testtake);\n\n      const meanControlId = this.state.controlMap.has(\"CalculateMean\") && this.state.controlMap.get(\"CalculateMean\").ncontrolcode; //let selectedTestList = getSameRecordFromTwoArrays(testList, this.props.Login.masterData.RESelectedTest, \"ntransactiontestcode\");\n\n      resultTabMap.set(\"IDS_RESULTS\", /*#__PURE__*/React.createElement(ResultEntryResultsTab, {\n        tabSequence: SideBarSeqno.TEST,\n        userInfo: this.props.Login.userInfo,\n        genericLabel: this.props.Login.genericLabel,\n        masterData: this.props.Login.masterData,\n        inputParam: this.props.Login.inputParam,\n        dataState: this.state.resultDataState,\n        dataStateChange: this.dataStateChange,\n        fetchRecord: this.props.parameterRecord,\n        controlMap: this.state.controlMap,\n        parameterParam: {\n          primaryKeyField: \"ntransactionresultcode\",\n          masterData: this.props.Login.masterData,\n          userInfo: this.props.Login.userInfo\n        },\n        checkListRecord: this.checkListRecord,\n        editpredefinedcomments: this.editpredefinedcomments,\n        enforceResult: this.enforceResult,\n        checklistParam: {\n          masterData: this.props.Login.masterData,\n          userInfo: this.props.Login.userInfo\n        },\n        selectedId: this.props.Login.selectedId || null,\n        viewFile: this.props.viewAttachment,\n        userRoleControlRights: this.state.userRoleControlRights,\n        screenName: \"IDS_RESULTS\",\n        getMeanTestParameter: this.props.getMeanCalculationTestParameter,\n        meanParam: {\n          \"userInfo\": this.props.Login.userInfo,\n          ncontrolCode: meanControlId\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2146,\n          columnNumber: 41\n        }\n      }));\n      resultTabMap.set(\"IDS_RESULTCHANGEHISTORY\", /*#__PURE__*/React.createElement(ResultChangeHistoryTab, {\n        tabSequence: SideBarSeqno.TEST,\n        userInfo: this.props.Login.userInfo,\n        genericLabel: this.props.Login.genericLabel,\n        ApprovalResultChangeHistory: this.props.Login.masterData.ResultChangeHistory || [],\n        inputParam: this.props.Login.inputParam,\n        dataState: this.state.resultChangeDataState,\n        dataStateChange: this.dataStateChange,\n        screenName: \"IDS_RESULTCHANGEHISTORY\",\n        controlMap: this.state.controlMap,\n        masterData: this.props.Login.masterData,\n        userRoleControlRights: this.state.userRoleControlRights,\n        selectedId: null,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2170,\n          columnNumber: 13\n        }\n      }));\n      return resultTabMap;\n    };\n\n    this.attachmentTabDetail = () => {\n      const attachmentTabMap = new Map();\n      let ntransactiontestcode = this.props.Login.masterData.RESelectedTest ? this.props.Login.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\") : \"-1\";\n      let {\n        testskip,\n        testtake,\n        subsampleskip,\n        subsampletake\n      } = this.state;\n      let testList = this.props.Login.masterData.RE_TEST || [];\n      testList = testList.slice(testskip, testskip + testtake);\n      const meanControlId = this.state.controlMap.has(\"CalculateMean\") && this.state.controlMap.get(\"CalculateMean\").ncontrolcode;\n      let selectedTestList = getSameRecordFromTwoArrays(testList, this.props.Login.masterData.RESelectedTest, \"ntransactiontestcode\");\n      let npreregno = this.props.Login.masterData.RESelectedSample ? this.props.Login.masterData.RESelectedSample.map(sample => sample.npreregno).join(\",\") : \"-1\";\n      let ntransactionsamplecode = this.props.Login.masterData.RESelectedSubSample ? this.props.Login.masterData.RESelectedSubSample.map(sample => sample.ntransactionsamplecode).join(\",\") : \"-1\";\n      let subsampleList = this.props.Login.masterData.RE_SUBSAMPLE || [];\n      subsampleList = subsampleList.slice(subsampleskip, subsampleskip + subsampletake);\n      let selectedSubSampleList = getSameRecordFromTwoArrays(subsampleList, this.props.Login.masterData.RESelectedSubSample, \"ntransactionsamplecode\");\n      attachmentTabMap.set(\"IDS_TESTATTACHMENTS\", /*#__PURE__*/React.createElement(Attachments, {\n        tabSequence: SideBarSeqno.TEST,\n        screenName: \"IDS_TESTATTACHMENTS\",\n        selectedMaster: \"RESelectedTest\",\n        onSaveClick: this.onAttachmentSaveClick,\n        controlMap: this.state.controlMap,\n        userRoleControlRights: this.state.userRoleControlRights,\n        masterList: selectedTestList,\n        masterAlertStatus: \"IDS_SELECTTESTTOADDATTACHEMENT\",\n        attachments: this.props.Login.masterData.RegistrationTestAttachment || [],\n        deleteRecord: this.props.deleteAttachment,\n        fetchRecord: this.props.getAttachmentCombo,\n        addName: \"AddTestAttachment\",\n        editName: \"EditTestAttachment\",\n        deleteName: \"DeleteTestAttachment\",\n        viewName: \"ViewTestAttachment\",\n        methodUrl: \"TestAttachment\",\n        nsubsampleneed: this.props.Login.masterData.realRegSubTypeValue.nneedsubsample,\n        subFields: [{\n          [designProperties.VALUE]: \"stestsynonym\"\n        }, {\n          [designProperties.VALUE]: \"screateddate\"\n        }],\n        userInfo: this.props.Login.userInfo,\n        isneedReport: true,\n        deleteParam: {\n          methodUrl: \"TestAttachment\",\n          ntransactiontestcode,\n          userInfo: this.props.Login.userInfo,\n          masterData: this.props.Login.masterData,\n          esignRights: this.props.Login.userRoleControlRights,\n          screenName: \"IDS_TESTATTACHMENTS\"\n        },\n        editParam: {\n          methodUrl: \"TestAttachment\",\n          ntransactiontestcode,\n          userInfo: this.props.Login.userInfo,\n          masterData: this.props.Login.masterData,\n          esignRights: this.props.Login.userRoleControlRights,\n          screenName: \"IDS_TESTATTACHMENTS\",\n          masterList: selectedTestList //this.props.Login.masterData.RESelectedTest\n\n        },\n        selectedListName: \"IDS_TESTS\",\n        displayName: \"stestsynonym\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2205,\n          columnNumber: 53\n        }\n      }));\n      this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nneedsubsample && attachmentTabMap.set(\"IDS_SUBSAMPLEATTACHMENTS\", /*#__PURE__*/React.createElement(Attachments, {\n        tabSequence: SideBarSeqno.SUBSAMPLE,\n        screenName: \"IDS_SUBSAMPLEATTACHMENTS\",\n        onSaveClick: this.onAttachmentSaveClick,\n        selectedMaster: \"selectedSubSample\",\n        controlMap: this.state.controlMap,\n        userRoleControlRights: this.state.userRoleControlRights,\n        attachments: this.props.Login.masterData.RegistrationSampleAttachment || [],\n        deleteRecord: this.props.deleteAttachment,\n        masterList: this.props.Login.masterData.RESelectedSubSample,\n        masterAlertStatus: \"IDS_SELECTSUBSAMPLETOADDATTACHMENT\",\n        fetchRecord: this.props.getAttachmentCombo,\n        viewFile: this.props.viewAttachment,\n        addName: \"AddSubSampleAttachment\",\n        editName: \"EditSubSampleAttachment\",\n        deleteName: \"DeleteSubSampleAttachment\",\n        viewName: \"ViewSubSampleAttachment\",\n        methodUrl: \"SubSampleAttachment\",\n        nsubsampleneed: this.props.Login.masterData.realRegSubTypeValue.nneedsubsample,\n        skip: this.props.Login.inputParam ? this.props.Login.inputParam.attachmentskip || 0 : 0,\n        take: this.props.Login.inputParam ? this.props.Login.inputParam.attachmenttake || 10 : this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5,\n        userInfo: this.props.Login.userInfo,\n        deleteParam: {\n          methodUrl: \"SubSampleAttachment\",\n          ntransactionsamplecode,\n          userInfo: this.props.Login.userInfo,\n          masterData: this.props.Login.masterData,\n          esignRights: this.props.Login.userRoleControlRights\n        },\n        editParam: {\n          methodUrl: \"SubSampleAttachment\",\n          ntransactionsamplecode,\n          userInfo: this.props.Login.userInfo,\n          masterData: this.props.Login.masterData,\n          esignRights: this.props.Login.userRoleControlRights,\n          masterList: this.props.Login.masterData.RE_SUBSAMPLE || []\n        },\n        selectedListName: \"IDS_SAMPLEARNO\",\n        displayName: \"ssamplearno\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2251,\n          columnNumber: 62\n        }\n      }));\n      attachmentTabMap.set(\"IDS_SAMPLEATTACHMENTS\", /*#__PURE__*/React.createElement(Attachments, {\n        screenName: \"IDS_SAMPLEATTACHMENTS\",\n        tabSequence: SideBarSeqno.SAMPLE,\n        selectedMaster: this.props.Login.masterData.RESelectedSample,\n        controlMap: this.state.controlMap,\n        userRoleControlRights: this.state.userRoleControlRights,\n        attachments: this.props.Login.masterData.RegistrationAttachment || [],\n        deleteRecord: this.props.deleteAttachment,\n        onSaveClick: this.onAttachmentSaveClick,\n        masterList: this.props.Login.masterData.RESelectedSample,\n        masterAlertStatus: \"IDS_SELECTSAMPLETOADDATTACHEMENT\",\n        fetchRecord: this.props.getAttachmentCombo,\n        addName: \"AddSampleAttachment\",\n        editName: \"EditSampleAttachment\",\n        deleteName: \"DeleteSampleAttachment\",\n        viewName: \"ViewSampleAttachment\",\n        methodUrl: \"SampleAttachment\",\n        nsubsampleneed: this.props.Login.masterData.realRegSubTypeValue.nneedsubsample,\n        userInfo: this.props.Login.userInfo,\n        deleteParam: {\n          methodUrl: \"SampleAttachment\",\n          npreregno,\n          userInfo: this.props.Login.userInfo,\n          masterData: this.props.Login.masterData,\n          esignRights: this.props.Login.userRoleControlRights,\n          screenName: this.props.Login.screenName\n        },\n        editParam: {\n          methodUrl: \"SampleAttachment\",\n          npreregno,\n          userInfo: this.props.Login.userInfo,\n          masterData: this.props.Login.masterData,\n          esignRights: this.props.Login.userRoleControlRights,\n          masterList: this.props.Login.masterData.RESelectedSample\n        },\n        selectedListName: \"IDS_ARNUMBER\",\n        displayName: \"sarno\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2295,\n          columnNumber: 13\n        }\n      }));\n      return attachmentTabMap;\n    };\n\n    this.testDataStateChange = event => {\n      switch (this.props.Login.activeTestTab) {\n        case \"IDS_TEST\":\n          this.setState({\n            popUptestDataState: event.dataState\n          });\n          break;\n\n        case \"IDS_TESTCOMMENTS\":\n          this.setState({\n            testCommentDataState: event.dataState\n          });\n          break;\n\n        case \"IDS_TESTATTACHMENTS\":\n          this.setState({\n            testAttachmentDataState: event.dataState\n          });\n          break;\n\n        default:\n          this.setState({\n            popUptestDataState: event.dataState\n          });\n          break;\n      }\n    };\n\n    this.commentTabDetail = () => {\n      const commentTabMap = new Map();\n      let {\n        testskip,\n        testtake,\n        subSampleSkip,\n        subSampleTake\n      } = this.state;\n      let testList = this.props.Login.masterData.searchedTests ? [...this.props.Login.masterData.searchedTests] : this.props.Login.masterData.RE_TEST || [];\n      const editTestCommentsId = this.state.controlMap.has(\"EditTestComment\") && this.state.controlMap.get(\"EditTestComment\").ncontrolcode;\n      testList = testList.slice(testskip, testskip + testtake);\n      let selectedTestList = getSameRecordFromTwoArrays(testList, this.props.Login.masterData.RESelectedTest, \"ntransactiontestcode\");\n      let ntransactiontestcode = this.props.Login.masterData.RESelectedTest ? this.props.Login.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\") : \"-1\";\n      let npreregno = this.props.Login.masterData.RESelectedSample ? this.props.Login.masterData.RESelectedSample.map(sample => sample.npreregno).join(\",\") : \"-1\";\n      const ntransactionsamplecode = this.props.Login.masterData.RESelectedSubSample ? this.props.Login.masterData.RESelectedSubSample.map(sample => sample.ntransactionsamplecode).join(\",\") : \"-1\";\n      let subsampleList = this.props.Login.masterData.RE_SUBSAMPLE || [];\n      subsampleList = subsampleList.slice(subSampleSkip, subSampleSkip + subSampleTake);\n      let selectedSubSampleList = getSameRecordFromTwoArrays(subsampleList, this.props.Login.masterData.RESelectedSubSample, \"ntransactionsamplecode\");\n      commentTabMap.set(\"IDS_TESTCOMMENTS\", /*#__PURE__*/React.createElement(Comments, {\n        screenName: \"IDS_TESTCOMMENTS\",\n        isSampleTestComment: true,\n        tabSequence: SideBarSeqno.TEST,\n        selectedMaster: selectedTestList,\n        onSaveClick: this.onCommentsSaveClick,\n        controlMap: this.state.controlMap,\n        userRoleControlRights: this.state.userRoleControlRights,\n        Comments: this.props.Login.masterData.RegistrationTestComment || [],\n        fetchRecord: this.props.getCommentsCombo,\n        masterList: selectedTestList,\n        masterAlertStatus: \"IDS_SELECTTESTTOADDCOMMENTS\",\n        addName: \"AddTestComment\",\n        editName: \"EditTestComment\",\n        deleteName: \"DeleteTestComment\",\n        methodUrl: \"TestComment\",\n        isTestComment: false,\n        primaryKeyField: \"ntestcommentcode\",\n        dataState: this.state.testCommentDataState,\n        dataStateChange: this.testDataStateChange,\n        masterData: this.props.Login.masterData,\n        isneedReport: true,\n        deleteParam: {\n          methodUrl: \"TestComment\",\n          ntransactiontestcode,\n          userInfo: this.props.Login.userInfo,\n          masterData: this.props.Login.masterData,\n          esignRights: this.props.Login.userRoleControlRights,\n          screenName: \"IDS_TESTCOMMENTS\"\n        },\n        editParam: {\n          methodUrl: \"TestComment\",\n          ntransactiontestcode,\n          userInfo: this.props.Login.userInfo,\n          masterData: this.props.Login.masterData,\n          esignRights: this.props.Login.userRoleControlRights,\n          screenName: \"IDS_TESTCOMMENTS\",\n          operation: \"update\",\n          masterList: selectedTestList,\n          ncontrolCode: editTestCommentsId\n        },\n        selectedListName: \"IDS_TESTS\",\n        displayName: \"stestsynonym\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2379,\n          columnNumber: 47\n        }\n      }));\n      this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nneedsubsample && commentTabMap.set(\"IDS_SUBSAMPLECOMMENTS\", /*#__PURE__*/React.createElement(Comments, {\n        screenName: \"IDS_SUBSAMPLECOMMENTS\",\n        tabSequence: SideBarSeqno.SUBSAMPLE,\n        onSaveClick: this.onCommentsSaveClick,\n        selectedMaster: \"selectedSubSample\",\n        controlMap: this.state.controlMap,\n        userRoleControlRights: this.state.userRoleControlRights,\n        Comments: this.props.Login.masterData.RegistrationSampleComment || [],\n        fetchRecord: this.props.getCommentsCombo,\n        addName: \"AddSubSampleComment\",\n        editName: \"EditSubSampleComment\",\n        deleteName: \"DeleteSubSampleComment\",\n        methodUrl: \"SubSampleComment\",\n        masterData: this.props.Login.masterData,\n        isTestComment: false,\n        masterList: this.props.Login.masterData.RESelectedSubSample,\n        masterAlertStatus: \"IDS_SELECTSUBSAMPLETOADDCOMMENTS\",\n        primaryKeyField: \"nsamplecommentcode\",\n        dataState: this.state.subSampleCommentDataState,\n        dataStateChange: this.subSampledataStateChange,\n        deleteParam: {\n          methodUrl: \"SubSampleComment\",\n          ntransactionsamplecode,\n          userInfo: this.props.Login.userInfo,\n          masterData: this.props.Login.masterData,\n          esignRights: this.props.Login.userRoleControlRights,\n          screenName: \"IDS_SUBSAMPLECOMMENTS\"\n        },\n        editParam: {\n          methodUrl: \"SubSampleComment\",\n          ntransactionsamplecode,\n          userInfo: this.props.Login.userInfo,\n          masterData: this.props.Login.masterData,\n          esignRights: this.props.Login.userRoleControlRights,\n          screenName: \"IDS_SUBSAMPLECOMMENTS\",\n          operation: \"update\",\n          masterList: this.props.Login.masterData.RE_SUBSAMPLE || [],\n          ncontrolCode: this.state.controlMap.has(\"EditSubSampleComment\") && this.state.controlMap.get(\"EditSubSampleComment\").ncontrolcode\n        },\n        selectedListName: \"IDS_SAMPLEARNO\",\n        displayName: \"ssamplearno\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2427,\n          columnNumber: 56\n        }\n      }));\n      commentTabMap.set(\"IDS_SAMPLECOMMENTS\", /*#__PURE__*/React.createElement(Comments, {\n        screenName: \"IDS_SAMPLECOMMENTS\",\n        tabSequence: SideBarSeqno.SAMPLE,\n        onSaveClick: this.onCommentsSaveClick,\n        selectedMaster: \"RESelectedSample\",\n        controlMap: this.state.controlMap,\n        userRoleControlRights: this.state.userRoleControlRights,\n        Comments: this.props.Login.masterData.RegistrationComment || [],\n        fetchRecord: this.props.getCommentsCombo,\n        masterData: this.props.Login.masterData,\n        addName: \"AddSampleComment\",\n        editName: \"EditSampleComment\",\n        deleteName: \"DeleteSampleComment\",\n        methodUrl: \"SampleComment\",\n        isTestComment: false,\n        masterList: this.props.Login.masterData.RESelectedSample,\n        masterAlertStatus: \"IDS_SELECTSAMPLETOADDCOMMENTS\",\n        primaryKeyField: \"nregcommentcode\",\n        dataState: this.state.testCommentDataState,\n        dataStateChange: this.dataStateChange,\n        deleteParam: {\n          methodUrl: \"SampleComment\",\n          npreregno,\n          userInfo: this.props.Login.userInfo,\n          masterData: this.props.Login.masterData,\n          esignRights: this.props.Login.userRoleControlRights,\n          screenName: \"IDS_SAMPLECOMMENTS\"\n        },\n        editParam: {\n          methodUrl: \"SampleComment\",\n          npreregno,\n          userInfo: this.props.Login.userInfo,\n          masterData: this.props.Login.masterData,\n          esignRights: this.props.Login.userRoleControlRights,\n          screenName: \"IDS_SAMPLECOMMENTS\",\n          operation: \"update\",\n          masterList: this.props.Login.masterData.RESelectedSample || [],\n          ncontrolCode: this.state.controlMap.has(\"EditSampleComment\") && this.state.controlMap.get(\"EditSampleComment\").ncontrolcode\n        },\n        selectedListName: \"IDS_ARNUMBER\",\n        displayName: \"sarno\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2472,\n          columnNumber: 49\n        }\n      }));\n      return commentTabMap;\n    };\n\n    this.onInputSwitchOnChange = event => {\n      if (event.target.name == \"PopupNav\") {\n        this.setState({\n          enablePropertyPopup: !this.state.enablePropertyPopup\n        });\n      } else {\n        this.setState({\n          enableAutoClick: !this.state.enableAutoClick\n        });\n      }\n    };\n\n    this.changePropertyViewClose = id => {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          activeTabIndex: undefined,\n          activeTestTab: undefined,\n          activeTabId: id\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.changePropertyView = (index, screenName, event, status) => {\n      let id = false;\n\n      if (event && event.ntransactiontestcode) {\n        id = event.ntransactiontestcode;\n      } else if (event && event.ntransactionsamplecode) {\n        id = event.ntransactionsamplecode;\n      } else if (event && event.npreregno) {\n        id = event.npreregno;\n      } //console.log(this.state.activeTabId, id , \"=======>\")\n\n\n      let activeTabIndex;\n      let activeTabId;\n\n      if (window.innerWidth > 992 && event && this.state.enableAutoClick || !event) {\n        activeTabIndex = this.state.activeTabIndex !== index ? index : id ? index : false; //activeTabId = this.state.activeTabIndex !== index ? true:false;\n      }\n\n      if (status != \"click\") {\n        if (index) {\n          const tabProps = {\n            tabSequence: SideBarSeqno.TEST,\n            screenName: screenName == \"IDS_COMMENTS\" ? \"IDS_TESTCOMMENTS\" : screenName === \"IDS_ATTACHMENTS\" ? \"IDS_TESTATTACHMENTS\" : screenName,\n            activeTabIndex //activeTabId\n\n          };\n          this.onTabChange(tabProps);\n        } // if (index == SideBarTabIndex.RESULT) {\n        //     const tabProps = {\n        //         tabSequence: SideBarSeqno.TEST,\n        //         screenName: \"IDS_RESULTS\",\n        //         activeTabIndex,\n        //         //activeTabId\n        //     }\n        //     this.onTabChange(tabProps);\n        // }\n        // else if (index == SideBarTabIndex.ATTACHMENTS) {\n        //     const tabProps = {\n        //         tabSequence: SideBarSeqno.TEST,\n        //         screenName: \"IDS_TESTATTACHMENTS\",\n        //         activeTabIndex,\n        //        // activeTabId\n        //     }\n        //     this.onTabChange(tabProps);\n        // }\n        // else if (index == SideBarTabIndex.COMMENTS) {\n        //     const tabProps = {\n        //         tabSequence: SideBarSeqno.TEST,\n        //         screenName: \"IDS_TESTCOMMENTS\",\n        //         activeTabIndex,\n        //         //activeTabId\n        //     }\n        //     this.onTabChange(tabProps);\n        // }\n        // else {\n        //     if (window.innerWidth > 992 && event && this.state.enableAutoClick || !event) {\n        //         const updateInfo = {\n        //             typeName: DEFAULT_RETURN,\n        //             data: {\n        //                 activeTabIndex: this.state.activeTabIndex !== index ? index : id ? index : false,\n        //                 activeTabId: id\n        //             }\n        //         }\n        //         this.props.updateStore(updateInfo);\n        //     }\n        // }\n\n      }\n    };\n\n    this.onTabChange = tabProps => {\n      const activeTestTab = tabProps.screenName;\n      const tabseqno = tabProps.tabSequence; // if (activeTestTab !== this.props.Login.activeTestTab) {\n\n      if (tabseqno == SideBarSeqno.TEST) {\n        if (this.props.Login.masterData.RESelectedTest && this.props.Login.masterData.RESelectedTest.length > 0) {\n          let inputData = {\n            masterData: this.props.Login.masterData,\n            ntransactiontestcode: this.props.Login.masterData.RESelectedTest ? this.props.Login.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\").toString() : \"\",\n            npreregno: this.props.Login.masterData.RESelectedSample ? this.props.Login.masterData.RESelectedSample.map(preregno => preregno.npreregno).join(\",\").toString() : \"\",\n            RESelectedTest: this.props.Login.masterData.RESelectedTest ? this.props.Login.masterData.RESelectedTest : \"\",\n            userinfo: this.props.Login.userInfo,\n            activeTestKey: activeTestTab,\n            screenName: activeTestTab,\n            //activeTestTab,\n            resultDataState: this.state.resultDataState,\n            instrumentDataState: this.state.instrumentDataState,\n            materialDataState: this.state.materialDataState,\n            taskDataState: this.state.taskDataState,\n            documentDataState: this.state.documentDataState,\n            resultChangeDataState: this.state.resultChangeDataState,\n            testCommentDataState: this.state.testCommentDataState,\n            activeTabIndex: tabProps.activeTabIndex ? tabProps.activeTabIndex : this.state.activeTabIndex,\n            activeTabId: tabProps.activeTabId ? tabProps.activeTabId : this.state.activeTabId\n          };\n          this.props.getTestChildTabREDetail(inputData, true);\n        } else {\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_SELECTTEST\"\n          }));\n        }\n      } else if (tabseqno == SideBarSeqno.SUBSAMPLE) {\n        if (activeTestTab !== this.props.Login.activeTestTab) {\n          let inputData = {\n            masterData: this.props.Login.masterData,\n            selectedSubSample: this.props.Login.masterData.RESelectedSubSample,\n            ntransactionsamplecode: this.props.Login.masterData.RESelectedSubSample ? this.props.Login.masterData.RESelectedSubSample.map(item => item.ntransactionsamplecode).join(\",\") : \"-1\",\n            userinfo: this.props.Login.userInfo,\n            screenName: activeTestTab,\n            activeTestTab,\n            activeSubSampleTab: activeTestTab,\n            subSampleCommentDataState: this.state.subSampleCommentDataState,\n            subSampleAttachmentDataState: this.state.subSampleAttachmentDataState\n          };\n          this.props.getSubSampleChildTabDetail(inputData);\n        } else {\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_SELECTSAMPLE\"\n          }));\n        }\n      } else {\n        if (activeTestTab !== this.props.Login.activeTestTab) {\n          let inputData = {\n            masterData: this.props.Login.masterData,\n            RESelectedSample: this.props.Login.masterData.RESelectedSample,\n            npreregno: this.props.Login.masterData.RESelectedSample ? this.props.Login.masterData.RESelectedSample.map(item => item.npreregno).join(\",\") : \"-1\",\n            userinfo: this.props.Login.userInfo,\n            screenName: activeTestTab,\n            activeSampleTab: activeTestTab,\n            activeTestTab,\n            sampleChangeDataState: this.state.sampleChangeDataState\n          };\n          this.props.getSampleChildTabDetail(inputData);\n        }\n      } //}\n\n    };\n\n    this.mandatoryFieldsForAdditionalInfo = () => {\n      let mandatoryFieldsAdditionalInfo = [];\n\n      if (this.props.Login.showMultiSelectCombo) {\n        mandatoryFieldsAdditionalInfo.push({\n          \"idsName\": this.props.Login.masterData['salertmessage'],\n          \"dataField\": \"ntestgrouptestpredefsubcode\",\n          \"mandatory\": true,\n          \"mandatoryLabel\": \"IDS_SELECT\",\n          \"controlType\": \"file\"\n        });\n      } else {\n        mandatoryFieldsAdditionalInfo.push({\n          \"idsName\": this.props.Login.masterData['salertmessage'],\n          \"dataField\": \"ntestgrouptestpredefsubcode\",\n          \"mandatory\": true,\n          \"mandatoryLabel\": \"IDS_ENTER\",\n          \"controlType\": \"file\"\n        });\n      }\n\n      return mandatoryFieldsAdditionalInfo;\n    };\n\n    this.defaultActions = (testChildGetREParam, RESelectedTest, RESelectedSample, setDefaultId, testskip, testtake) => {\n      const nregtypecode = this.props.Login.masterData.realRegTypeValue.nregtypecode;\n      const nregsubtypecode = this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode;\n      const ndesigntemplatemappingcode = parseInt(this.props.Login.masterData.ndesigntemplatemappingcode && this.props.Login.masterData.ndesigntemplatemappingcode);\n      let TestList = [...this.props.Login.masterData.RE_TEST];\n      TestList = TestList.splice(testskip, testskip + testtake);\n      let acceptTestList = getSameRecordFromTwoArrays(TestList, this.props.Login.masterData.RESelectedTest, \"ntransactiontestcode\");\n\n      if (acceptTestList && acceptTestList.length > 0) {\n        let inputParam = {\n          classUrl: 'resultentrybysample',\n          methodUrl: \"completeTest\",\n          inputData: {\n            'userinfo': this.props.Login.userInfo,\n            'nregtypecode': nregtypecode,\n            'nregsubtypecode': nregsubtypecode,\n            'ncontrolcode': setDefaultId\n          },\n          // formData: formData,\n          // isFileupload: true,\n          operation: \"default\",\n          displayName: this.props.Login.inputParam.displayName,\n          //, postParam,\n          testChildGetREParam: { ...testChildGetREParam,\n            ncontrolcode: setDefaultId\n          },\n          RESelectedTest: acceptTestList,\n          RESelectedSample: RESelectedSample,\n          ndesigntemplatemappingcode: parseInt(this.props.Login.masterData.ndesigntemplatemappingcode && this.props.Login.masterData.ndesigntemplatemappingcode)\n        };\n\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, setDefaultId)) {\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              loadEsign: true,\n              screenData: {\n                inputParam,\n                masterData: this.props.Login.masterData\n              },\n              openModal: true,\n              screenName: \"defaultaction\",\n              operation: \"default\"\n            }\n          };\n          this.props.updateStore(updateInfo);\n        } else {\n          this.props.defaultTest(inputParam.testChildGetREParam, acceptTestList, RESelectedSample, nregtypecode, nregsubtypecode, ndesigntemplatemappingcode);\n        }\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_PLSSELECTTEST\"\n        }));\n      }\n    };\n\n    this.completeActions = (testChildGetREParam, RESelectedTest, userInfo, completeResultId, testskip, testtake) => {\n      let TestList = [...this.props.Login.masterData.RE_TEST];\n      TestList = TestList.splice(testskip, testskip + testtake);\n      let acceptTestList = getSameRecordFromTwoArrays(TestList, this.props.Login.masterData.RESelectedTest, \"ntransactiontestcode\");\n\n      if (acceptTestList && acceptTestList.length > 0) {\n        let inputParam = {\n          classUrl: 'resultentrybysample',\n          methodUrl: \"completeTest\",\n          inputData: {\n            'userinfo': this.props.Login.userInfo,\n            'ncontrolcode': completeResultId\n          },\n          // formData: formData,\n          // isFileupload: true,\n          operation: \"complete\",\n          postParamList: this.postParamList,\n          displayName: this.props.Login.inputParam.displayName,\n          //, postParam,\n          testChildGetREParam: testChildGetREParam,\n          RESelectedTest: acceptTestList,\n          skip: this.state.skip,\n          take: this.state.take,\n          testskip: this.state.testskip,\n          testtake: this.state.testtake\n        };\n\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, completeResultId)) {\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              loadEsign: true,\n              screenData: {\n                inputParam,\n                masterData: this.props.Login.masterData\n              },\n              openModal: true,\n              screenName: \"complete\",\n              operation: \"complete\"\n            }\n          };\n          this.props.updateStore(updateInfo);\n        } else {\n          this.props.completeTest(inputParam, acceptTestList, userInfo, completeResultId);\n        }\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTTESTTOCOMPLETE\"\n        }));\n      }\n    };\n\n    this.testStartActions = (testChildGetREParam, RESelectedTest, userInfo, completeResultId, testskip, testtake) => {\n      let TestList = [...this.props.Login.masterData.RE_TEST];\n      TestList = TestList.splice(testskip, testskip + testtake);\n      let acceptTestList = getSameRecordFromTwoArrays(TestList, this.props.Login.masterData.RESelectedTest, \"ntransactiontestcode\");\n\n      if (acceptTestList && acceptTestList.length > 0) {\n        let inputParam = {\n          classUrl: 'resultentrybysample',\n          methodUrl: \"testInitiated\",\n          inputData: {\n            'userinfo': this.props.Login.userInfo,\n            'ncontrolcode': completeResultId,\n            'subSampleNeeded': this.props.Login.masterData.defaultRegistrationSubType.nneedsubsample\n          },\n          // formData: formData,\n          // isFileupload: true,\n          operation: \"testinitiate\",\n          postParamList: this.postParamList,\n          displayName: this.props.Login.inputParam.displayName,\n          //, postParam,\n          testChildGetREParam: testChildGetREParam,\n          RESelectedTest: acceptTestList,\n          skip: this.state.skip,\n          take: this.state.take,\n          testskip: this.state.testskip,\n          progressTimerStart: true,\n          testtake: this.state.testtake\n        };\n\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, completeResultId)) {\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              loadEsign: true,\n              screenData: {\n                inputParam,\n                masterData: this.props.Login.masterData\n              },\n              openModal: true,\n              screenName: \"complete\",\n              operation: \"complete\"\n            }\n          };\n          this.props.updateStore(updateInfo);\n        } else {\n          this.props.testStart(inputParam, acceptTestList, userInfo, completeResultId);\n        }\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTTESTTOCOMPLETE\"\n        }));\n      }\n    };\n\n    this.onSaveCheckList = (selectedRecord, userInfo, nregtypecode, nregsubtypecode) => {\n      const ndesigntemplatemappingcode = parseInt(this.props.Login.masterData.ndesigntemplatemappingcode && this.props.Login.masterData.ndesigntemplatemappingcode);\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\n        let inputParam = {\n          \"inputData\": {\n            userinfo: userInfo\n          }\n        };\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              selectedRecord,\n              userInfo,\n              nregtypecode,\n              nregsubtypecode,\n              ndesigntemplatemappingcode,\n              operation: \"updatechecklist\",\n              inputParam\n            },\n            openModal: true,\n            operation: \"updatechecklist\"\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.onSaveCheckList(selectedRecord, userInfo, nregtypecode, nregsubtypecode, ndesigntemplatemappingcode);\n      }\n    };\n\n    this.validateEsign = () => {\n      const inputParam = {\n        inputData: {\n          \"userinfo\": { ...this.props.Login.userInfo,\n            sreason: this.state.selectedRecord[\"esigncomments\"],\n            nreasoncode: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].value,\n            spredefinedreason: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].label\n          },\n          password: this.state.selectedRecord[\"esignpassword\"]\n        },\n        screenData: this.props.Login.screenData\n      };\n\n      if (this.props.Login.operation === 'testinitiate' || this.props.Login.operation === 'complete' || this.props.Login.operation === 'default' || this.props.Login.operation === \"updatechecklist\" || this.props.Login.operation === 'deleteInstrument' || this.props.Login.operation === 'createMethod' || this.props.Login.operation === 'deleteTask' || this.props.Login.operation === 'updateParameterComments') {\n        this.props.validateEsignCredentialComplete(inputParam, \"openModal\");\n      } else {\n        this.props.validateEsignCredential(inputParam, \"openModal\");\n      }\n    };\n\n    this.onEsignInputOnChange = event => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (event.target.type === 'checkbox') {\n        selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\n      } else {\n        selectedRecord[event.target.name] = event.target.value;\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onInputOnChange = (event, name) => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (event.target.type === 'checkbox') {\n        selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\n      } else {\n        selectedRecord[event.target.name] = event.target.value;\n      }\n\n      switch (name) {\n        case 'ntestgroupmaterial':\n          const ntestgrouptestcode = selectedRecord.ntestgroupmaterial == transactionStatus.YES ? this.props.Login.masterData.RESelectedTest[0].ntestgrouptestcode : -1;\n          this.props.getREMaterialComboGet({\n            ntestgroupmaterial: selectedRecord.ntestgroupmaterial,\n            ntestgrouptestcode,\n            RESelectedTest: this.props.Login.masterData.RESelectedTest,\n            test: this.props.Login.masterData.RESelectedTest[0],\n            userInfo: this.props.Login.userInfo\n          });\n          break;\n\n        default:\n          this.setState({\n            selectedRecord\n          });\n      }\n    };\n\n    this.onSaveFileClick = (saveType, formRef) => {\n      const selectedImportFile = this.props.Login.masterData.selectedImportFile;\n      const acceptedFile = selectedImportFile ? selectedImportFile.sfilename : [];\n      const formData = new FormData();\n\n      if (acceptedFile && acceptedFile.length > 0) {\n        acceptedFile.forEach((file, index) => {\n          formData.append(\"uploadedFile\" + index, file);\n        });\n        formData.append(\"filecount\", acceptedFile.length);\n      } else {\n        return toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTANYONEFILETOSUBMIT\"\n        }));\n      }\n\n      formData.append(\"userinfo\", JSON.stringify(this.props.Login.userInfo));\n      formData.append(\"nregtypecode\", JSON.stringify(this.props.Login.masterData.realRegTypeValue.nregtypecode));\n      formData.append(\"nregsubtypecode\", JSON.stringify(this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode));\n      formData.append(\"stransactiontestcode\", JSON.stringify(this.props.Login.masterData.RESelectedTest ? this.props.Login.masterData.RESelectedTest.map(x => x.ntransactiontestcode).join(\",\") : \"-1\"));\n      this.props.resultImportFile(formData, this.props.Login.masterData);\n    };\n\n    this.onSaveClickAdhocParam = saveType => {\n      if (Object.keys(this.state.selectedRecord).length > 0) {\n        let Map = {};\n        let testParameter = [];\n        this.state.selectedRecord && this.state.selectedRecord.nparamtercode.forEach((data, index) => testParameter.push(data.item));\n        Map[\"ntestparametercode\"] = testParameter.map(ntestgroupparamtercode => ntestgroupparamtercode.item.ntestparametercode).join(\",\");\n        Map[\"ntestgrouptestcode\"] = testParameter.map(ntestgrouptestcode => ntestgrouptestcode.item.ntestgrouptestcode).join(\",\");\n        Map[\"ntestcode\"] = testParameter.map(ntestgrouptestcode => ntestgrouptestcode.item.ntestcode).join(\",\");\n        Map[\"userinfo\"] = this.props.Login.userInfo;\n        Map[\"npreregno\"] = this.props.Login.adhocpreregno;\n        Map[\"ntransactiontestcode\"] = this.props.Login.adhoctransactiontestcode;\n        Map[\"masterData\"] = this.props.Login.masterData;\n        Map[\"multiselecttransactiontestcode\"] = this.props.Login.masterData.RESelectedTest.map(x => x.ntransactiontestcode).join(\",\");\n        Map[\"nregtypecode\"] = this.props.Login.masterData.realRegTypeValue.nregtypecode;\n        Map[\"nregsubtypecode\"] = this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode;\n        Map[\"ndesigntemplatemappingcode\"] = this.props.Login.masterData.ndesigntemplatemappingcode && this.props.Login.masterData.ndesigntemplatemappingcode;\n        Map[\"nneedsubsample\"] = this.props.Login.masterData.nneedsubsample;\n        let inputParam = {\n          inputData: Map,\n          action: 'createAdhocParameter',\n          operation: \"create\",\n          methodUrl: \"AdhocParamter\",\n          classUrl: \"resultentrybysample\"\n        };\n\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.adhocId)) {\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              loadEsign: true,\n              screenData: {\n                inputParam,\n                masterData: this.props.Login.masterData\n              },\n              openModal: true,\n              screenName: \"Resultentry\",\n              operation: \"adhocTestParameter\"\n            }\n          };\n          this.props.updateStore(updateInfo);\n        } else {\n          this.props.createAdhocParamter(inputParam);\n        }\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTRECORD\"\n        }));\n      }\n    };\n\n    this.onDropFile = acceptedFile => {\n      this.props.Login.masterData.selectedImportFile['sfilename'] = acceptedFile;\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          masterData: this.props.Login.masterData\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onFormulaInputChange = (event, index, fields) => {\n      let selectedRecord = this.state.selectedRecord;\n      let selectedForumulaInput = this.state.selectedRecord.selectedForumulaInput || [];\n      let selectedMandatory = this.state.selectedRecord.selectedMandatory || [];\n      let dynamicformulafields = {};\n\n      if (event) {\n        if (fields.ndynamicformulafieldcode === FORMULAFIELDTYPE.INTEGER) {\n          const value = event.target.value.replace(/[^-^0-9]/g, '');\n\n          if (/^-?\\d*?$/.test(value) || value === \"\") {\n            if (this.state.selectedRecord.formulainput) {\n              dynamicformulafields.svalues = value;\n              dynamicformulafields.sparameter = fields.sdescription;\n              selectedForumulaInput[index] = dynamicformulafields;\n              selectedMandatory[index] = event.target.value;\n            }\n          }\n\n          selectedRecord[\"selectedForumulaInput\"] = selectedForumulaInput;\n          selectedRecord[\"selectedMandatory\"] = selectedMandatory;\n          this.setState({\n            selectedRecord: selectedRecord\n          });\n        } else {\n          const value = event.target.value.replace(/[^-^0-9.]/g, '');\n\n          if (/^-?\\d*?\\.?\\d*?$/.test(value) || value === \"\") {\n            if (this.state.selectedRecord.formulainput) {\n              dynamicformulafields.svalues = value;\n              dynamicformulafields.sparameter = fields.sdescription;\n              selectedForumulaInput[index] = dynamicformulafields;\n              selectedMandatory[index] = event.target.value;\n            }\n          }\n\n          selectedRecord[\"selectedForumulaInput\"] = selectedForumulaInput;\n          selectedRecord[\"selectedMandatory\"] = selectedMandatory;\n          this.setState({\n            selectedRecord: selectedRecord\n          });\n        }\n      }\n    };\n\n    this.onTemplateInputChange = (event, control) => {\n      let selectedRecord = templateChangeHandler(1, this.state.selectedRecord, event, control);\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onTemplateComboChange = (comboData, control) => {\n      let selectedRecord = templateChangeHandler(2, this.state.selectedRecord, comboData, control);\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onTemplateDateChange = (dateData, control) => {\n      let selectedRecord = templateChangeHandler(3, this.state.selectedRecord, dateData, control);\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.handleDateChange = (dateName, dateValue) => {\n      const {\n        selectedRecord\n      } = this.state;\n\n      if (dateValue === null) {\n        dateValue = new Date();\n      }\n\n      selectedRecord[dateName] = dateValue;\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.viewAdditionalInfo = currentAlertResultCode => {\n      const selectedRecord = this.state.selectedRecord || [];\n      let additionalInfo = selectedRecord['additionalInfo'];\n      let showAlertGrid = this.props.Login.showAlertGrid;\n      let additionalInfoView = this.props.Login.additionalInfoView;\n\n      if (additionalInfo[currentAlertResultCode]) {\n        showAlertGrid = true;\n        additionalInfoView = true;\n        selectedRecord['additionalResultData'] = additionalInfo[currentAlertResultCode];\n      } // this.setState({selectedRecord,additionalInfoView});\n\n\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          selectedRecord: selectedRecord,\n          showAlertGrid,\n          additionalInfoView\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onModalSave = () => {\n      const selectedRecord = this.state.selectedRecord || [];\n      let currentAlertResultCode = this.state.currentAlertResultCode || 0;\n      let currentntestgrouptestpredefcode = this.state.currentntestgrouptestpredefcode || 0;\n      let bool = this.state.selectedRecord.ResultParameter.some(x => x['ntransactionresultcode'] === currentAlertResultCode);\n\n      if (bool) {\n        this.state.selectedRecord.ResultParameter.map(Parameter => {\n          if (Parameter['ntransactionresultcode'] === currentAlertResultCode) {\n            Parameter['additionalInfoUidata'] = {\n              ntestgrouptestpredefsubcode: selectedRecord['ntestgrouptestpredefsubcode']\n            };\n\n            if (selectedRecord['ntestgrouptestpredefsubcode']) {\n              if (typeof selectedRecord['ntestgrouptestpredefsubcode'] === 'string') {\n                Parameter['additionalInfo'] = selectedRecord['ntestgrouptestpredefsubcode'];\n              } else {\n                Parameter['additionalInfo'] = \"\"; // selectedRecord['ntestgrouptestpredefsubcode'].map(x=>{ \n                //     Parameter['additionalInfo']+= x.label+\",\"  \n                // }).join('\\n')\n\n                Parameter['additionalInfo'] = selectedRecord['ntestgrouptestpredefsubcode'].map(x => x.label + \",\").join('\\n');\n                Parameter['additionalInfo'] = Parameter['additionalInfo'].substring(0, Parameter['additionalInfo'].length - 1);\n              }\n            } else {\n              Parameter['additionalInfo'] = \"\";\n              Parameter['additionalInfoUidata'] && delete Parameter['additionalInfoUidata'];\n            }\n\n            Parameter['ntestgrouptestpredefcode'] = currentntestgrouptestpredefcode;\n          }\n        });\n      }\n\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          selectedRecord: selectedRecord,\n          showAlertGrid: false\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onInputChange = (Data, name) => {\n      const selectedRecord = this.state.selectedRecord || [];\n      let currentAlertResultCode = this.state.currentAlertResultCode || 0;\n\n      if (Data) {\n        if (name === 'ntestgrouptestpredefsubcode') {// if(!selectedRecord['additionalInfo']){\n          //     selectedRecord['additionalInfo']=[] \n          // } \n          // if(selectedRecord['additionalInfo']){\n          //     selectedRecord['additionalInfo'][currentAlertResultCode]= Data.target.value\n          // } \n          // let bool=this.state.selectedRecord.ResultParameter.some(x=>x['ntransactionresultcode']===currentAlertResultCode) \n          // if(bool){\n          //   this.state.selectedRecord.ResultParameter.map(Parameter=>\n          //       {\n          //           if(Parameter['ntransactionresultcode']===currentAlertResultCode){\n          //               Parameter[\"jsondata\"]={};\n          //               Parameter['additionalInfo']=selectedRecord['additionalInfo'][currentAlertResultCode]\n          //             //   Parameter[\"jsondata\"] = { \n          //             //       ...Parameter[\"jsondata\"],\n          //             //       additionalInfo:selectedRecord['additionalInfo'][currentAlertResultCode]\n          //             //   }\n          //           }\n          //       }\n          //       );  \n          // }\n          //  selectedRecord[name] = Data.target.value;\n        } //else{\n\n\n        selectedRecord[name] = Data.target.value; //  } \n      } else {\n        selectedRecord[name] = [];\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onNumericChange = (numericData, numericName) => {\n      const selectedRecord = this.state.selectedRecord || [];\n\n      if (numericData) {\n        if (numericName !== \"scomments\") {\n          selectedRecord[numericName] = numericData;\n        } else {\n          selectedRecord[numericName] = numericData.target.value;\n        }\n      } else {\n        selectedRecord[numericName] = \"\";\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onDateChange = (dateName, dateValue) => {\n      const selectedRecord = this.state.selectedRecord || [];\n      selectedRecord[dateName] = dateValue;\n\n      if (dateName === \"dfromdate\" || dateName === \"dtodate\") {\n        this.setState({\n          selectedRecord\n        });\n      }\n    };\n\n    this.headerSelectionChange = event => {\n      const checked = event.syntheticEvent.target.checked;\n      let meanTestParameterList = this.state.meanTestParameterList || [];\n      let selectedMeanTestParam = this.state.selectedMeanTestParam || new Map();\n\n      if (checked) {\n        const data = meanTestParameterList.map(item => {\n          item.selected = checked;\n          selectedMeanTestParam.set(item.ntransactionresultcode, item.sresult);\n          return item;\n        });\n        let selectedTestParam = \"\";\n        let selectedTestParamMean = 0;\n        let size = 0;\n\n        if (selectedMeanTestParam.size > 0) {\n          [...selectedMeanTestParam.values()].forEach(item => item !== null && item !== \"\" ? (selectedTestParam = selectedTestParam === \"\" ? item : selectedTestParam + \"+\" + item, size = size + 1, selectedTestParamMean = parseInt(selectedTestParamMean) + parseInt(item)) : \"\");\n          selectedTestParamMean = selectedTestParamMean / size;\n        }\n\n        this.setState({\n          meanTestParameterList: data,\n          selectedMeanTestParam,\n          selectedTestParam,\n          testMean: selectedTestParamMean,\n          selectAll: checked\n        });\n      } else {\n        const data = meanTestParameterList.map(item => {\n          item.selected = checked;\n          return item;\n        });\n        this.setState({\n          meanTestParameterList: data,\n          selectedMeanTestParam: new Map(),\n          selectedTestParam: \"\",\n          testMean: \"\",\n          selectAll: checked\n        });\n      }\n    };\n\n    this.selectionChange = event => {\n      let meanTestParameterList = this.state.meanTestParameterList || [];\n      let selectedMeanTestParam = this.state.selectedMeanTestParam || new Map();\n      meanTestParameterList.map(item => {\n        if (item.ntransactionresultcode === event.dataItem.ntransactionresultcode) {\n          item.selected = !event.dataItem.selected;\n        }\n\n        return item;\n      });\n\n      if (event.dataItem.selected) {\n        selectedMeanTestParam.set(event.dataItem.ntransactionresultcode, event.dataItem.sresult);\n      } else {\n        if (selectedMeanTestParam.has(event.dataItem.ntransactionresultcode)) {\n          selectedMeanTestParam.delete(event.dataItem.ntransactionresultcode);\n        }\n      }\n\n      let selectedTestParam = \"\";\n      let selectedTestParamMean = 0;\n      let size = 0;\n\n      if (selectedMeanTestParam.size > 0) {\n        [...selectedMeanTestParam.values()].forEach(item => item !== null && item !== \"\" ? (selectedTestParam = selectedTestParam === \"\" ? item : selectedTestParam + \"+\" + item, size = size + 1, selectedTestParamMean = parseInt(selectedTestParamMean) + parseInt(item)) : \"\");\n        selectedTestParamMean = selectedTestParamMean / size;\n      }\n\n      this.setState({\n        meanTestParameterList,\n        selectedMeanTestParam,\n        selectedTestParam,\n        testMean: selectedTestParamMean,\n        selectAll: this.valiateCheckAll(meanTestParameterList)\n      });\n    };\n\n    this.onMeanComboChange = (comboData, comboName) => {\n      const selectedMeanTestParam = this.state.selectedMeanTestParam || [];\n      selectedMeanTestParam[comboName] = comboData[0];\n      let data = \"\";\n\n      if (selectedMeanTestParam[\"parametervalue\"] === undefined) {\n        data = comboData[0].value;\n      } else {\n        data = selectedMeanTestParam[\"parametervalue\"] + \"+\" + comboData[0].value;\n      }\n\n      selectedMeanTestParam[\"parametervalue\"] = data;\n      this.setState({\n        selectedMeanTestParam\n      });\n    };\n\n    this.onMaterialComboChange = (comboData, comboName) => {\n      const selectedRecord = this.state.selectedRecord || [];\n      const ntestgrouptestcode = selectedRecord.ntestgroupmaterial == transactionStatus.YES ? this.props.Login.masterData.RESelectedTest[0].ntestgrouptestcode : -1;\n\n      if (comboData) {\n        selectedRecord[comboName] = comboData; //this.setState({ selectedRecord });\n      } else {\n        selectedRecord[comboName] = []; //this.setState({ selectedRecord });\n      }\n\n      switch (comboName) {\n        case 'nmaterialtypecode':\n          this.props.getREMaterialCategoryByType({\n            ntestgrouptestcode,\n            selectedRecord,\n            userInfo: this.props.Login.userInfo\n          });\n          break;\n\n        case 'nmaterialcatcode':\n          selectedRecord['nsectioncode'] = selectedRecord.nmaterialcatcode.item.needSectionwise == transactionStatus.YES ? this.props.Login.masterData.RESelectedTest[0].nsectioncode : -1;\n          this.props.getREMaterialByCategory({\n            ntestgrouptestcode,\n            selectedRecord,\n            userInfo: this.props.Login.userInfo\n          });\n          break;\n\n        case 'nmaterialcode':\n          this.props.getREMaterialInvertoryByMaterial({\n            ntestgrouptestcode,\n            selectedRecord,\n            userInfo: this.props.Login.userInfo\n          });\n          break;\n\n        default:\n          this.props.getAvailableMaterialQuantity({\n            ntestgrouptestcode,\n            selectedRecord,\n            userInfo: this.props.Login.userInfo\n          });\n          break;\n      }\n    };\n\n    this.onComboChange = (comboData, comboName) => {\n      const selectedRecord = this.state.selectedRecord || [];\n      let currentAlertResultCode = this.state.currentAlertResultCode || 0;\n\n      if (comboData) {\n        // if(comboName==='ntestgrouptestpredefsubcode'){\n        //     if(!selectedRecord['additionalInfo']){\n        //         selectedRecord['additionalInfo']=[] \n        //     }  \n        //         selectedRecord['additionalInfo'][currentAlertResultCode]=\"\"\n        //         comboData.map(x=>{ \n        //             selectedRecord['additionalInfo'][currentAlertResultCode]+= x.label+\",\"//+<br/> \n        //         })\n        //         selectedRecord['additionalInfo'][currentAlertResultCode]=selectedRecord['additionalInfo'][currentAlertResultCode].substring(0,\n        //             selectedRecord['additionalInfo'][currentAlertResultCode].length-1) \n        // } \n        selectedRecord[comboName] = comboData;\n      } else {\n        selectedRecord[comboName] = [];\n      }\n\n      this.setState({\n        selectedRecord\n      }); // const updateInfo = {\n      //     typeName: DEFAULT_RETURN,\n      //     data: { selectedRecord: selectedRecord }\n      // }\n      // this.props.updateStore(updateInfo);\n    };\n\n    this.onGradeEvent = (ResultParameter, index, parameter) => {\n      if (ResultParameter.length > 0 && ResultParameter[index] !== undefined && ResultParameter[index].sresult !== null) {\n        let selectedRecord = this.state.selectedRecord || [];\n        let selectedResultGrade = this.state.selectedRecord.selectedResultGrade || [];\n\n        if (parameter.nparametertypecode === parameterType.NUMERIC) {\n          selectedResultGrade[index] = {\n            ngradecode: ResultParameter[index].sresult !== \"\" ? numericGrade(parameter, numberConversion(parseFloat(ResultParameter[index].sresult), parseInt(parameter.nroundingdigits))) : -1\n          };\n        }\n\n        if (parameter.nparametertypecode === parameterType.PREDEFINED) {\n          if (ResultParameter[index].sresult !== null) {\n            selectedResultGrade[index] = {\n              ngradecode: ResultParameter[index].ngradecode\n            };\n          } else {\n            selectedResultGrade[index] = {\n              ngradecode: 0\n            };\n          }\n        }\n\n        if (parameter.nparametertypecode === parameterType.CHARACTER) {\n          if (ResultParameter[index].sresult !== null && ResultParameter[index].sresult.trim() !== \"\") {\n            //selectedResultGrade[index] = { ngradecode: ResultParameter[index].ngradecode };\n            selectedResultGrade[index] = {\n              ngradecode: 4\n            };\n          } else {\n            selectedResultGrade[index] = {\n              ngradecode: -1\n            };\n          }\n        } //this.props.Login.masterData[\"selectedResultGrade\"] = selectedResultGrade;\n\n\n        selectedRecord.selectedResultGrade = selectedResultGrade;\n        this.setState({\n          selectedRecord\n        }); // const updateInfo = {\n        //     typeName: DEFAULT_RETURN,\n        //     data: { masterData: this.props.Login.masterData }\n        // }\n        // this.props.updateStore(updateInfo);\n      }\n    };\n\n    this.onCommentsSaveClick = (saveType, formRef, selectedRecord) => {\n      const masterData = this.props.Login.masterData;\n      let inputData = {};\n      let inputParam = {};\n      inputData[\"userinfo\"] = this.props.Login.userInfo;\n      let {\n        testskip,\n        testtake\n      } = this.state;\n      let testList = [...this.props.Login.masterData.RE_TEST];\n      testList = testList.slice(testskip, testskip + testtake);\n      let selectedTestList = getSameRecordFromTwoArrays(testList, this.props.Login.masterData.RESelectedTest, \"ntransactiontestcode\");\n\n      if (this.props.Login.screenName === \"IDS_TESTCOMMENTS\") {\n        let saveParam = {\n          userInfo: this.props.Login.userInfo,\n          isTestComment: this.props.isTestComment,\n          selectedRecord,\n          masterData: this.props.Login.masterData,\n          saveType,\n          formRef,\n          operation: this.props.Login.operation,\n          ntransactiontestcode: this.props.Login.masterData.RESelectedTest ? this.props.Login.masterData.RESelectedTest.map(x => x.ntransactiontestcode).join(\",\") : \"-1\"\n        };\n        inputParam = onSaveTestComments(saveParam, selectedTestList);\n      }\n\n      if (this.props.Login.screenName === \"IDS_SUBSAMPLECOMMENTS\") {\n        let sampleList = [];\n\n        if (this.props.Login.masterData.searchedSubSample !== undefined) {\n          sampleList = getSameRecordFromTwoArrays(this.props.Login.masterData.searchedSubSample, this.props.Login.masterData.RE_SUBSAMPLE.slice(this.state.subSampleSkip, this.state.subSampleSkip + this.state.subSampleTake), \"npreregno\");\n        } else {\n          sampleList = this.props.Login.masterData.RE_SUBSAMPLE.slice(this.state.subSampleSkip, this.state.subSampleSkip + this.state.subSampleTake);\n        }\n\n        let acceptList = getSameRecordFromTwoArrays(sampleList, this.props.Login.masterData.RESelectedSubSample, \"ntransactionsamplecode\"); // let acceptList=getSameRecordFromTwoArrays(this.props.Login.masterData.searchedTest, this.props.Login.masterData.RegistrationGetTest.slice(this.state.testskip, this.state.testskip + this.state.testtake), \"npreregno\");\n\n        let saveParam = {\n          userInfo: this.props.Login.userInfo,\n          isTestComment: this.props.isTestComment,\n          selectedRecord,\n          masterData: this.props.Login.masterData,\n          saveType,\n          formRef,\n          operation: this.props.Login.operation,\n          ntransactionsamplecode: this.props.Login.masterData.RESelectedSubSample ? this.props.Login.masterData.RESelectedSubSample.map(x => x.ntransactionsamplecode).join(\",\") : \"-1\"\n        };\n        inputParam = onSaveSubSampleComments(saveParam, acceptList);\n      }\n\n      if (this.props.Login.screenName === \"IDS_SAMPLECOMMENTS\") {\n        let sampleList = [];\n\n        if (this.props.Login.masterData.searchedSample !== undefined) {\n          sampleList = getSameRecordFromTwoArrays(this.props.Login.masterData.searchedSample, this.props.Login.masterData.RE_SAMPLE.slice(this.state.skip, this.state.skip + this.state.take), \"npreregno\");\n        } else {\n          sampleList = this.props.Login.masterData.RE_SAMPLE.slice(this.state.skip, this.state.skip + this.state.take);\n        }\n\n        let acceptList = getSameRecordFromTwoArrays(sampleList, this.props.Login.masterData.RESelectedSample, \"npreregno\"); // let acceptList=getSameRecordFromTwoArrays(this.props.Login.masterData.searchedTest, this.props.Login.masterData.RegistrationGetTest.slice(this.state.testskip, this.state.testskip + this.state.testtake), \"npreregno\");\n\n        let saveParam = {\n          userInfo: this.props.Login.userInfo,\n          isTestComment: this.props.isTestComment,\n          selectedRecord,\n          masterData: this.props.Login.masterData,\n          saveType,\n          formRef,\n          operation: this.props.Login.operation,\n          npreregno: this.props.Login.masterData.RESelectedSample ? this.props.Login.masterData.RESelectedSample.map(x => x.npreregno).join(\",\") : \"-1\"\n        };\n        inputParam = onSaveSampleComments(saveParam, acceptList);\n      }\n\n      if (this.props.Login.screenName === \"IDS_SUBSAMPLECOMMENTS\") {\n        let sampleList = [];\n\n        if (this.props.Login.masterData.searchedSubSample !== undefined) {\n          sampleList = getSameRecordFromTwoArrays(this.props.Login.masterData.searchedSubSample, this.props.Login.masterData.RESelectedSubSample.slice(this.state.subsampleskip, this.state.subsampleskip + this.state.subsampletake), \"npreregno\");\n        } else {\n          sampleList = this.props.Login.masterData.RESelectedSubSample.slice(this.state.subsampleskip, this.state.subsampleskip + this.state.subSampleTake);\n        }\n\n        let acceptList = getSameRecordFromTwoArrays(sampleList, this.props.Login.masterData.RESelectedSubSample, \"ntransactionsamplecode\");\n        let saveParam = {\n          userInfo: this.props.Login.userInfo,\n          isTestComment: this.props.isTestComment,\n          selectedRecord,\n          masterData: this.props.Login.masterData,\n          saveType,\n          formRef,\n          operation: this.props.Login.operation,\n          ntransactionsamplecode: this.props.Login.masterData.RESelectedSubSample ? this.props.Login.masterData.RESelectedSubSample.map(x => x.ntransactionsamplecode).join(\",\") : \"-1\"\n        };\n        inputParam = onSaveSubSampleComments(saveParam, acceptList);\n      }\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData\n            },\n            operation: this.props.Login.operation,\n            screenName: this.props.Login.screenName\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, masterData, \"openCommentModal\");\n      }\n    };\n\n    this.onAttachmentSaveClick = (saveType, formRef, selectedRecord) => {\n      const masterData = this.props.Login.masterData;\n      let inputData = {};\n      let inputParam = {};\n      inputData[\"userinfo\"] = this.props.Login.userInfo;\n      let {\n        testskip,\n        testtake,\n        skip,\n        take\n      } = this.state;\n      let testList = [...this.props.Login.masterData.RE_TEST];\n      testList = testList.slice(testskip, testskip + testtake);\n      let selectedTestList = getSameRecordFromTwoArrays(testList, this.props.Login.masterData.RESelectedTest, \"ntransactiontestcode\");\n      let sampleList = [...this.props.Login.masterData.RE_SAMPLE];\n      sampleList = sampleList.slice(skip, skip + take);\n      let selectedSampleList = getSameRecordFromTwoArrays(sampleList, this.props.Login.masterData.RESelectedSample, \"npreregno\");\n\n      if (this.props.Login.screenName === \"IDS_SAMPLEATTACHMENTS\") {\n        let saveParam = {\n          userInfo: this.props.Login.userInfo,\n          selectedRecord,\n          masterData: this.props.Login.masterData,\n          saveType,\n          formRef,\n          operation: this.props.Login.operation,\n          selectedMaster: this.props.selectedMaster,\n          npreregno: this.props.Login.masterData.RESelectedSample ? this.props.Login.masterData.RESelectedSample.map(x => x.npreregno).join(\",\") : \"-1\"\n        };\n        inputParam = onSaveSampleAttachment(saveParam, selectedSampleList);\n      } else if (this.props.Login.screenName === \"IDS_TESTATTACHMENTS\") {\n        let saveParam = {\n          userInfo: this.props.Login.userInfo,\n          selectedRecord,\n          masterData: this.props.Login.masterData,\n          saveType,\n          formRef,\n          operation: this.props.Login.operation,\n          ntransactiontestcode: this.props.Login.masterData.RESelectedTest ? this.props.Login.masterData.RESelectedTest.map(x => x.ntransactiontestcode).join(\",\") : \"-1\"\n        };\n        inputParam = onSaveTestAttachment(saveParam, selectedTestList);\n      } else if (this.props.Login.screenName === \"IDS_SUBSAMPLEATTACHMENTS\") {\n        let saveParam = {\n          userInfo: this.props.Login.userInfo,\n          selectedRecord,\n          masterData: this.props.Login.masterData,\n          saveType,\n          formRef,\n          operation: this.props.Login.operation,\n          selectedMaster: this.props.selectedMaster,\n          ntransactionsamplecode: this.props.Login.masterData.RESelectedSubSample ? this.props.Login.masterData.RESelectedSubSample.map(x => x.ntransactionsamplecode).join(\",\") : \"-1\"\n        };\n        inputParam = onSaveSubSampleAttachment(saveParam, this.props.Login.masterData.RESelectedSubSample);\n      }\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData\n            },\n            operation: this.props.Login.operation,\n            screenName: this.props.Login.screenName\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, masterData, \"openAttachmentModal\");\n      }\n    };\n\n    this.onKeyPress = (event, index, paremterResultcode) => {\n      if (event.keyCode === 13) {\n        for (let i = 0; i < event.target.form.elements.length; i++) {\n          if (parseInt(event.target.form.elements[i].id) === paremterResultcode[index + 1]) {\n            event.target.form.elements[i].focus();\n            break;\n          }\n        }\n\n        event.preventDefault();\n      }\n    };\n\n    this.onResultInputChange = (event, index, parameter) => {\n      //let ResultParameter = this.props.Login.masterData.ResultParameter ? this.props.Login.masterData.ResultParameter : [];\n      let selectedRecord = this.state.selectedRecord || [];\n      let ResultParameter = this.state.selectedRecord.ResultParameter ? this.state.selectedRecord.ResultParameter : [];\n      let sresult = \"\";\n      let sfinal = \"\";\n      let sresultpredefinedname = \"\";\n      let salertmessage = \"\";\n      let sresultcomment = \"\";\n      let value = -1;\n      let acceptedFile = [];\n      let ncalculatedresult;\n      let currentAlertResultCode = 0;\n      let currentntestgrouptestpredefcode = 0;\n      let inputData = {};\n\n      if (parameter.nparametertypecode === parameterType.NUMERIC) {\n        if (/^-?\\d*?\\.?\\d*?$/.test(event.target.value) || event.target.value === \"\") {\n          sresult = event.target.value;\n          ncalculatedresult = 4;\n        } else {\n          sresult = ResultParameter[index]['sresult'] === null ? \"\" : ResultParameter[index]['sresult'];\n          ncalculatedresult = ResultParameter[index]['ncalculatedresult'];\n        }\n      }\n\n      if (parameter.nparametertypecode === parameterType.PREDEFINED) {\n        currentAlertResultCode = event.item.ntransactionresultcode;\n        currentntestgrouptestpredefcode = event.item.ntestgrouptestpredefcode;\n\n        if (event != null) {\n          sresult = event.item.spredefinedname;\n          sresultpredefinedname = event.item.sresultpredefinedname;\n          sfinal = event.item.spredefinedsynonym;\n          value = event.item.ngradecode;\n          salertmessage = event.item.salertmessage ? event.item.salertmessage : \"\";\n          sresultcomment = event.item.spredefinedcomments ? event.item.spredefinedcomments : \"\";\n          ncalculatedresult = 4;\n        } else {\n          sresult = \"\";\n          sfinal = \"\";\n          sresultpredefinedname = \"\";\n          value = -1;\n          ncalculatedresult = 4;\n        }\n\n        inputData = {\n          'ntestgrouptestpredefcode': event.item.ntestgrouptestpredefcode,\n          'salertmessage': salertmessage,\n          'nneedresultentryalert': event.item.nneedresultentryalert,\n          'nneedsubcodedresult': event.item.nneedsubcodedresult\n        }; // ResultParameter[index]['additionalInfo']&& delete ResultParameter[index]['additionalInfo'] \n        // ResultParameter[index]['additionalInfo']&& delete ResultParameter[index]['additionalInfoUidata']  \n\n        if (event.item.nneedresultentryalert === transactionStatus.NO && event.item.nneedsubcodedresult === transactionStatus.NO) {\n          if (ResultParameter[index]['additionalInfo']) {\n            ResultParameter[index]['additionalInfo'] = \"\";\n          }\n\n          if (ResultParameter[index]['additionalInfoUidata']) {\n            ResultParameter[index]['additionalInfoUidata'] = \"\";\n          }\n        }\n      }\n\n      if (parameter.nparametertypecode === parameterType.CHARACTER) {\n        sresult = event.target.value;\n        if (event.target.value.trim() === \"\") ncalculatedresult = -1;else ncalculatedresult = 4;\n      }\n\n      if (parameter.nparametertypecode === parameterType.ATTACHMENT) {\n        sresult = event[0] && event[0].name;\n        sfinal = event;\n        ncalculatedresult = 4;\n      }\n\n      ResultParameter[index]['sresult'] = sresult;\n      ResultParameter[index]['sfinal'] = sfinal;\n      ResultParameter[index]['sresultpredefinedname'] = sresultpredefinedname;\n      ResultParameter[index]['sresultcomment'] = sresultcomment;\n      ResultParameter[index]['salertmessage'] = salertmessage;\n      ResultParameter[index]['acceptedFile'] = acceptedFile;\n      ResultParameter[index]['editable'] = true;\n      ResultParameter[index]['ngradecode'] = value;\n      ResultParameter[index]['ncalculatedresult'] = ncalculatedresult; // this.props.Login.masterData.ResultParameter = ResultParameter;\n\n      selectedRecord.ResultParameter = ResultParameter;\n\n      if (parameter.nparametertypecode === parameterType.PREDEFINED) {\n        this.props.getPredefinedData(inputData, selectedRecord, currentAlertResultCode, this.props.Login.masterData);\n      }\n\n      this.setState({\n        selectedRecord: selectedRecord,\n        currentAlertResultCode,\n        currentntestgrouptestpredefcode\n      }); // const updateInfo = {\n      //     typeName: DEFAULT_RETURN,\n      //     data: { masterData: this.props.Login.masterData }\n      // }\n      // this.props.updateStore(updateInfo);\n    };\n\n    this.onSaveMean = saveType => {\n      const nregtypecode = parseInt(this.props.Login.masterData.realRegTypeValue.nregtypecode);\n      const nregsubtypecode = parseInt(this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode);\n      let resultParameter = this.props.Login.selectedTestParameterMean || {}; //let resultParameter = { };\n\n      resultParameter[\"ncalculatedresult\"] = 4;\n      resultParameter[\"sresult\"] = this.state.testMean;\n      resultParameter[\"sfinal\"] = numberConversion(parseFloat(this.state.testMean), parseInt(resultParameter.nroundingdigit));\n      resultParameter[\"ngradecode\"] = numericGrade(resultParameter, parseInt(this.state.testMean));\n      resultParameter['nenteredrole'] = this.props.Login.userInfo.nuserrole;\n      resultParameter['nenteredby'] = this.props.Login.userInfo.nusercode; // resultParameter['ntransactionresultcode'] = meanParameter.ntransactionresultcode;\n      // resultParameter['ntransactiontestcode'] = meanParameter.ntransactiontestcode;\n      // resultParameter['nparametertypecode'] = meanParameter.nparametertypecode;\n      //console.log(\"result:\", resultParameter);\n\n      const formData = new FormData();\n      formData.append(\"filecount\", 0);\n      formData.append(\"nregtypecode\", nregtypecode);\n      formData.append(\"nregsubtypecode\", nregsubtypecode);\n      formData.append(\"ncontrolcode\", this.props.Login.ncontrolcode);\n      formData.append(\"transactiontestcode\", resultParameter.ntransactiontestcode); //formData.append(\"resultData\", JSON.stringify([resultParameter]));\n\n      formData.append(\"resultData\", resultParameter);\n      const inputParam = {\n        classUrl: \"resultentrybysample\",\n        methodUrl: \"TestParameterResult\",\n        inputData: {\n          userinfo: this.props.Login.userInfo\n        },\n        formData: formData,\n        isFileupload: true,\n        operation: \"update\",\n        displayName: this.props.Login.inputParam.displayName,\n        saveType\n      };\n      const masterData = this.props.Login.masterData;\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolcode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData\n            },\n            saveType\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\n      }\n    };\n\n    this.editpredefinedcomments = dataItem => {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          screenName: \"IDS_RESULTPARAMETERCOMMENTS\",\n          openModal: true,\n          selectedRecord: {\n            'sresultcomment': dataItem['sresultcomment'],\n            'selectedPredefinedComments': dataItem\n          },\n          operation: \"update\"\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.enforceResult = dataItem => {\n      let inputParam = {};\n      inputParam = {\n        dataItem: dataItem,\n        masterData: this.props.Login.masterData,\n        screenName: \"IDS_ENFORCERESULT\",\n        openModal: true,\n        operation: \"update\",\n        ncontrolcode: dataItem['ncontrolcode']\n      };\n      this.props.enforceResult(inputParam, this.props.Login.userInfo);\n    };\n\n    this.onSavePredefinedComments = saveType => {\n      let inputParam = {};\n      let stransactiontestcode = \"\";\n      this.props.Login.masterData.RESelectedTest.map(x => {\n        stransactiontestcode += x['ntransactiontestcode'] + \",\";\n      });\n      let inputData = {\n        'selectedPredefinedComments': this.state.selectedRecord['selectedPredefinedComments'],\n        'ntransactionresultcode': this.state.selectedRecord['selectedPredefinedComments']['ntransactionresultcode'],\n        'sresultcomment': this.state.selectedRecord['sresultcomment'],\n        'ntransactiontestcode': stransactiontestcode.substring(0, stransactiontestcode.length - 1),\n        //this.state.selectedRecord['selectedPredefinedComments']['ntransactiontestcode'],\n        'userinfo': this.props.Login.userInfo\n      };\n      inputParam = {\n        classUrl: 'resultentrybysample',\n        methodUrl: \"PredefinedComments\",\n        inputData: inputData,\n        //    isFileupload: false,\n        //  activeTestKey: \"IDS_INSTRUMENT\",\n        operation: this.props.Login.operation,\n        displayName: this.props.Login.inputParam.displayName,\n        saveType //postParam\n\n      };\n      const masterData = this.props.Login.masterData;\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolcode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData\n            },\n            saveType\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\n      }\n    };\n\n    this.onSaveEnforceResult = saveType => {\n      let inputParam = {};\n      let stransactiontestcode = \"\";\n      const nregtypecode = parseInt(this.props.Login.masterData.realRegTypeValue.nregtypecode);\n      const nregsubtypecode = parseInt(this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode);\n      const ndesigntemplatemappingcode = parseInt(this.props.Login.masterData.ndesigntemplatemappingcode && this.props.Login.masterData.ndesigntemplatemappingcode); // this.props.Login.masterData.RESelectedTest.map(x=>{ \n      //     stransactiontestcode+=x['ntransactiontestcode']+\",\"\n      // }\n      //   )\n\n      let inputData = {\n        'ResultParameter': {\n          //  ngradecode:this.state.selectedRecord['ngradecode'].value,\n          nparametertypecode: parameterType.CHARACTER,\n          sfinal: this.state.selectedRecord['senforceresult'],\n          senforceresultcomment: this.state.selectedRecord['senforceresultcomment'],\n          ntransactiontestcode: this.state.selectedRecord['ntransactiontestcode'],\n          ntransactionresultcode: this.state.selectedRecord['ntransactionresultcode']\n        },\n        'ntransactionresultcode': this.state.selectedRecord['ntransactionresultcode'],\n        \"nregtypecode\": nregtypecode,\n        \"nregsubtypecode\": nregsubtypecode,\n        \"ndesigntemplatemappingcode\": ndesigntemplatemappingcode,\n        'userinfo': this.props.Login.userInfo\n      };\n      inputParam = {\n        classUrl: 'resultentrybysample',\n        methodUrl: \"EnforceResult\",\n        inputData: inputData,\n        operation: this.props.Login.operation,\n        displayName: this.props.Login.inputParam.displayName,\n        saveType //postParam\n\n      };\n      const masterData = this.props.Login.masterData;\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolcode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData\n            },\n            saveType\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\n      }\n    };\n\n    this.onSaveClick = saveType => {\n      if (this.props.Login.screenName === \"IDS_MEANPARAMETER\") {\n        this.onSaveMean(saveType);\n      } else if (this.props.Login.screenName === \"IDS_RESULTPARAMETERCOMMENTS\") {\n        this.onSavePredefinedComments(saveType);\n      } else if (this.props.Login.screenName === \"IDS_ENFORCERESULT\") {\n        this.onSaveEnforceResult(saveType);\n      } else {\n        let ResultParameter = this.state.selectedRecord.ResultParameter || [];\n        let selectedRecord = this.state.selectedRecord || {};\n        let selectedId = this.props.Login.selectedId || null;\n        let additionalInfo = this.state.selectedRecord.additionalInfo || [];\n        const nregtypecode = parseInt(this.props.Login.masterData.realRegTypeValue.nregtypecode);\n        const nregsubtypecode = parseInt(this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode);\n        const ndesigntemplatemappingcode = parseInt(this.props.Login.masterData.ndesigntemplatemappingcode && this.props.Login.masterData.ndesigntemplatemappingcode);\n        const classUrl = \"resultentrybysample\";\n        const formData = new FormData();\n        let neditable = 0;\n        let resultParameters = [];\n        let inputParam = {};\n        let inputData = [];\n        let i = 0; //const postParam = {inputListName: \"RESelectedTest\", selectedObject: \"RESelectedTest\", primaryKeyField: \"ntransactionstestcode\" };\n\n        if (this.props.Login.screenName === \"IDS_RESULTENTRY\") {\n          if (ResultParameter.length > 0 && ResultParameter !== undefined) {\n            ResultParameter.map((resultData, index) => {\n              let results = {};\n\n              if (resultData.editable === true) {\n                neditable = 1;\n\n                switch (resultData.nparametertypecode) {\n                  case 1:\n                    results[\"jsondata\"] = {\n                      ncalculatedresult: resultData[\"ncalculatedresult\"],\n                      sresult: resultData.sresult,\n                      sfinal: resultData.sresult !== \"\" ? numberConversion(parseFloat(resultData.sresult), parseInt(resultData.nroundingdigits)) : \"\"\n                    };\n                    results[\"jsonstring\"] = JSON.stringify(results[\"jsondata\"]);\n                    results[\"ncalculatedresult\"] = resultData[\"ncalculatedresult\"];\n                    results[\"sresult\"] = resultData.sresult;\n                    results[\"sfinal\"] = resultData.sresult !== \"\" ? numberConversion(parseFloat(resultData.sresult), parseInt(resultData.nroundingdigits)) : \"\";\n                    results[\"ngradecode\"] = resultData.sresult !== \"\" ? numericGrade(resultData, results[\"sfinal\"]) : -1;\n                    results['nenteredrole'] = this.props.Login.userInfo.nuserrole;\n                    results['nenteredby'] = this.props.Login.userInfo.nusercode;\n                    results['ntransactionresultcode'] = resultData.ntransactionresultcode;\n                    results['ntransactiontestcode'] = resultData.ntransactiontestcode;\n                    results['nparametertypecode'] = resultData.nparametertypecode;\n                    break;\n\n                  case 2:\n                    results[\"jsondata\"] = {\n                      ncalculatedresult: 4,\n                      sresult: Lims_JSON_stringify(resultData.sresult, false),\n                      sfinal: Lims_JSON_stringify(resultData.sfinal, false),\n                      sresultcomment: resultData.sresultcomment === 'null' ? \"-\" : resultData.sresultcomment,\n                      salertmessage: resultData.salertmessage,\n                      additionalInfo: resultData['additionalInfo'],\n                      additionalInfoUidata: resultData['additionalInfoUidata'] === undefined ? \"\" : resultData['additionalInfoUidata'],\n                      ntestgrouptestpredefcode: resultData.ntestgrouptestpredefcode\n                    };\n                    results[\"jsonstring\"] = JSON.stringify(results[\"jsondata\"]);\n                    results[\"sresult\"] = resultData.sresult;\n                    results[\"ncalculatedresult\"] = 4;\n                    results[\"sfinal\"] = resultData.sresult;\n                    results[\"ngradecode\"] = resultData.ngradecode;\n                    results['nenteredrole'] = this.props.Login.userInfo.nuserrole;\n                    results['nenteredby'] = this.props.Login.userInfo.nusercode;\n                    results['ntransactionresultcode'] = resultData.ntransactionresultcode;\n                    results['ntransactiontestcode'] = resultData.ntransactiontestcode;\n                    results['nparametertypecode'] = resultData.nparametertypecode;\n                    break;\n\n                  case 3:\n                    results[\"jsondata\"] = {\n                      ncalculatedresult: 4,\n                      sresult: Lims_JSON_stringify(resultData.sresult, false),\n                      sfinal: Lims_JSON_stringify(resultData.sresult, false)\n                    };\n                    results[\"jsonstring\"] = JSON.stringify(results[\"jsondata\"]);\n                    results[\"sresult\"] = resultData.sresult;\n                    results[\"ncalculatedresult\"] = 4;\n                    results[\"sfinal\"] = resultData.sresult;\n                    results[\"ngradecode\"] = resultData.sresult.trim() === \"\" ? -1 : grade.FIO;\n                    results['nenteredrole'] = this.props.Login.userInfo.nuserrole;\n                    results['nenteredby'] = this.props.Login.userInfo.nusercode;\n                    results['ntransactionresultcode'] = resultData.ntransactionresultcode;\n                    results['ntransactiontestcode'] = resultData.ntransactiontestcode;\n                    results['nparametertypecode'] = resultData.nparametertypecode;\n                    break;\n\n                  case 4:\n                    if (resultData.sfinal.length > 0) {\n                      const splittedFileName = resultData.sfinal ? resultData.sfinal[0] && resultData.sfinal[0].name.split('.') : \"\";\n                      const fileExtension = resultData.sfinal ? resultData.sfinal[0] && resultData.sfinal[0].name.split('.')[splittedFileName.length - 1] : \"\";\n                      const uniquefilename = create_UUID() + '.' + fileExtension;\n                      results[\"jsondata\"] = {\n                        ssystemfilename: uniquefilename,\n                        nfilesize: resultData.sfinal[0] && resultData.sfinal[0].size,\n                        ncalculatedresult: 4,\n                        sresult: Lims_JSON_stringify(resultData.sresult, false),\n                        sfinal: Lims_JSON_stringify(resultData.sresult, false)\n                      };\n                      results[\"jsonstring\"] = JSON.stringify(results[\"jsondata\"]);\n                      results[\"ncalculatedresult\"] = 4;\n                      results[\"sresult\"] = resultData.sresult;\n                      results[\"sfinal\"] = resultData.sresult;\n                      results[\"ngradecode\"] = resultData.sresult.trim() === \"\" ? -1 : grade.FIO;\n                      results[\"nenteredrole\"] = this.props.Login.userInfo.nuserrole;\n                      results[\"nenteredby\"] = this.props.Login.userInfo.nusercode;\n                      results[\"ntransactionresultcode\"] = resultData.ntransactionresultcode;\n                      results[\"ntransactiontestcode\"] = resultData.ntransactiontestcode;\n                      results['nparametertypecode'] = resultData.nparametertypecode;\n                      results[\"ssystemfilename\"] = uniquefilename;\n                      results[\"nfilesize\"] = resultData.sfinal[0] && resultData.sfinal[0].size;\n                      formData.append(\"uploadedFile\" + index, resultData.sfinal[0] && resultData.sfinal[0]);\n                      formData.append(\"uniquefilename\" + index, uniquefilename);\n                      formData.append(\"ntransactiontestcode\", resultData.ntransactiontestcode);\n                      i++;\n                    } else {\n                      const splittedFileName = resultData.sfinal ? resultData.sfinal[0] && resultData.sfinal[0].name.split('.') : \"\";\n                      const fileExtension = resultData.sfinal ? resultData.sfinal[0] && resultData.sfinal[0].name.split('.')[splittedFileName.length - 1] : \"\";\n                      const uniquefilename = \"\";\n                      results[\"jsondata\"] = {\n                        ssystemfilename: uniquefilename,\n                        nfilesize: resultData.sfinal ? resultData.sfinal[0] && resultData.sfinal[0].size : \"\",\n                        ncalculatedresult: 4,\n                        sresult: \"\",\n                        sfinal: \"\"\n                      };\n                      results[\"jsonstring\"] = JSON.stringify(results[\"jsondata\"]);\n                      results[\"ncalculatedresult\"] = 4;\n                      results[\"sresult\"] = \"\";\n                      results[\"sfinal\"] = \"\";\n                      results[\"ngradecode\"] = -1;\n                      results[\"nenteredrole\"] = this.props.Login.userInfo.nuserrole;\n                      results[\"nenteredby\"] = this.props.Login.userInfo.nusercode;\n                      results[\"ntransactionresultcode\"] = resultData.ntransactionresultcode;\n                      results[\"ntransactiontestcode\"] = resultData.ntransactiontestcode;\n                      results['nparametertypecode'] = resultData.nparametertypecode;\n                      results[\"ssystemfilename\"] = \"\";\n                      results[\"nfilesize\"] = \"\";\n                      formData.append(\"uploadedFile\" + index, \"\");\n                      formData.append(\"uniquefilename\" + index, \"\");\n                      formData.append(\"ntransactiontestcode\", \"\");\n                    }\n\n                    break;\n\n                  default:\n                    break;\n                }\n\n                if (Object.values(results).length > 0) {\n                  resultParameters.push(results);\n                }\n              }\n\n              return null;\n            });\n\n            if (neditable === 0) {\n              const updateInfo = {\n                typeName: DEFAULT_RETURN,\n                data: {\n                  loading: false,\n                  openModal: false\n                }\n              };\n              return this.props.updateStore(updateInfo);\n            }\n\n            formData.append(\"filecount\", i);\n            formData.append(\"nregtypecode\", nregtypecode);\n            formData.append(\"nregsubtypecode\", nregsubtypecode);\n            formData.append(\"ncontrolcode\", this.props.Login.ncontrolcode);\n            formData.append(\"ndesigntemplatemappingcode\", ndesigntemplatemappingcode);\n            formData.append(\"resultData\", JSON.stringify(resultParameters));\n            const tests = this.props.Login.masterData.RESelectedTest ? this.props.Login.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\") : \"\";\n            formData.append(\"transactiontestcode\", tests); //let postParam = {inputListName: \"RE_TEST\", selectedObject: \"\", primaryKeyField: \"ntransactionresultcode\" };\n\n            inputParam = {\n              classUrl: classUrl,\n              methodUrl: \"TestParameterResult\",\n              inputData: {\n                userinfo: this.props.Login.userInfo\n              },\n              formData: formData,\n              isFileupload: true,\n              operation: \"update\",\n              displayName: this.props.Login.inputParam.displayName,\n              saveType //, postParam\n\n            };\n          } else {\n            const updateInfo = {\n              typeName: DEFAULT_RETURN,\n              data: {\n                loading: false,\n                openModal: false\n              }\n            };\n            return this.props.updateStore(updateInfo);\n          }\n        }\n\n        if (this.props.Login.screenName === \"IDS_TESTMETHODSOURCE\") {\n          inputData = {\n            ntype: 3,\n            nflag: 3,\n            nsampletypecode: this.props.Login.masterData.realSampleTypeValue.nsampletypecode,\n            nregtypecode: this.props.Login.masterData.realRegTypeValue.nregtypecode,\n            nregsubtypecode: this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode,\n            ntranscode: this.props.Login.masterData.realFilterStatusValue.ntransactionstatus.toString(),\n            ntestcode: this.props.Login.masterData.realTestcodeValue.ntestcode,\n            npreregno: this.props.Login.masterData.RESelectedSample && this.props.Login.masterData.RESelectedSample.map(sample => sample.npreregno).join(\",\"),\n            ntransactionsamplecode: this.props.Login.masterData.RESelectedSubSample && this.props.Login.masterData.RESelectedSubSample.map(sample => sample.ntransactionsamplecode).join(\",\"),\n            nmethodcode: selectedRecord.nmethodcode.value,\n            nsourcecode: selectedRecord.nsourcecode.value,\n            ntransactiontestcode: selectedRecord.ntransactiontestcode,\n            userinfo: this.props.Login.userInfo,\n            activeTestKey: \"IDS_RESULTS\",\n            ncontrolcode: this.props.Login.ncontrolcode\n          }; // inputParam = {\n          //     classUrl: classUrl,\n          //     methodUrl: \"TestMethodSource\",\n          //     inputData: inputData,\n          //     isFileupload: false,\n          //     operation: \"update\",\n          //     displayName: this.props.Login.inputParam.displayName, saveType//postParam\n          // }\n\n          this.updateTestMethodSource(inputData, this.props.Login.masterData, this.props.Login.ncontrolcode);\n          return;\n        }\n\n        if (this.props.Login.screenName === \"IDS_INSTRUMENT\") {\n          let inputData = [];\n\n          if (this.props.Login.operation === \"update\") {\n            inputData = {\n              ResultUsedInstrument: {\n                nresultusedinstrumentcode: selectedRecord.nresultusedinstrumentcode,\n                npreregno: selectedRecord.npreregno,\n                ninstrumentcatcode: selectedRecord.ninstrumentcatcode.value,\n                ninstrumentcode: selectedRecord.ninstrumentcode.value,\n                dfromdate: formatInputDate(selectedRecord.dfromdate, false),\n                dtodate: formatInputDate(selectedRecord.dtodate, false),\n                stzfromdate: selectedRecord.ntzfromdate.label,\n                stztodate: selectedRecord.ntztodate.label,\n                ntzfromdate: selectedRecord.ntzfromdate.value,\n                ntztodate: selectedRecord.ntztodate.value,\n                ntransactiontestcode: selectedRecord.ntransactiontestcode\n              },\n              userinfo: this.props.Login.userInfo,\n              nregtypecode: nregtypecode,\n              nregsubtypecode: nregsubtypecode,\n              ndesigntemplatemappingcode: ndesigntemplatemappingcode,\n              ntransactiontestcode: this.props.Login.masterData.RESelectedTest ? this.props.Login.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\").toString() : \"\"\n            };\n          } else {\n            inputData = {\n              ResultUsedInstrument: {\n                ntransactiontestcode: selectedRecord.ntransactiontestcode,\n                npreregno: selectedRecord.npreregno,\n                ninstrumentcatcode: selectedRecord.ninstrumentcatcode.value,\n                ninstrumentcode: selectedRecord.ninstrumentcode.value,\n                dfromdate: formatInputDate(selectedRecord.dfromdate, false),\n                dtodate: formatInputDate(selectedRecord.dtodate, false),\n                stzfromdate: selectedRecord.ntzfromdate.label,\n                stztodate: selectedRecord.ntztodate.label,\n                ntzfromdate: selectedRecord.ntzfromdate.value,\n                ntztodate: selectedRecord.ntztodate.value\n              },\n              userinfo: this.props.Login.userInfo,\n              nregtypecode: nregtypecode,\n              nregsubtypecode: nregsubtypecode,\n              ndesigntemplatemappingcode: ndesigntemplatemappingcode,\n              transactiontestcode: this.props.Login.masterData.RESelectedTest ? this.props.Login.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\") : \"-1\"\n            };\n          }\n\n          inputParam = {\n            classUrl: classUrl,\n            methodUrl: \"ResultUsedInstrument\",\n            inputData: inputData,\n            selectedId,\n            isFileupload: false,\n            activeTestKey: \"IDS_INSTRUMENT\",\n            operation: this.props.Login.operation,\n            displayName: this.props.Login.inputParam.displayName,\n            saveType //postParam\n\n          };\n        }\n\n        if (this.props.Login.screenName === \"IDS_MATERIAL\") {\n          let inputData = [];\n\n          if (this.state.selectedRecord.nmaterialcode != \"\") {\n            if (this.state.selectedRecord.nmaterialinventorycode != \"\") {\n              if (parseFloat(this.state.selectedRecord.susedquantity) <= parseFloat(this.state.selectedRecord.savailablequantity)) {\n                if (this.props.Login.operation === \"update\") {\n                  inputData = {\n                    ResultUsedMaterial: {\n                      nresultusedmaterialcode: selectedRecord.nresultusedmaterialcode,\n                      ntransactiontestcode: selectedRecord.ntransactiontestcode,\n                      npreregno: selectedRecord.npreregno,\n                      nmaterialtypecode: selectedRecord.nmaterialtypecode.value,\n                      nmaterialcategorycode: selectedRecord.nmaterialcategorycode.value,\n                      nmaterialcode: selectedRecord.nmaterialcode.value,\n                      ninventorycode: selectedRecord.nmaterialinventorycode.value,\n                      nsectioncode: selectedRecord.nsectioncode,\n                      jsondata: {\n                        sarno: selectedRecord.sarno,\n                        ssamplearno: selectedRecord.ssamplearno,\n                        stestsynonym: selectedRecord.stestsynonym,\n                        smaterialcatname: selectedRecord.nmaterialcatcode.label,\n                        smaterialname: selectedRecord.nmaterialcode.label,\n                        sinventoryid: selectedRecord.nmaterialinventorycode.label,\n                        nqtyused: selectedRecord.susedquantity,\n                        scarriergas: selectedRecord.scarriergas,\n                        smobilephase: selectedRecord.smobilephase,\n                        sremarks: selectedRecord.sremarks,\n                        susername: this.props.Login.userInfo.susername,\n                        nsectioncode: selectedRecord.nsectioncode,\n                        ssectionname: selectedRecord.ssectionname,\n                        ntestgroupmaterial: selectedRecord.ntestgroupmaterial,\n                        ntestgrouptestcode: selectedRecord.ntestgroupmaterial == transactionStatus.YES ? this.props.Login.masterData.RESelectedTest[0].ntestgrouptestcode : -1\n                      }\n                    },\n                    MaterialInventoryTrans: {\n                      nmaterialinventorycode: selectedRecord.nmaterialinventorycode.value,\n                      nsectioncode: selectedRecord.nsectioncode,\n                      jsondata: {\n                        IDS_INVENTORYID: selectedRecord.nmaterialinventorycode.label,\n                        nqtyused: selectedRecord.susedquantity\n                      }\n                    },\n                    userinfo: this.props.Login.userInfo,\n                    nregtypecode: nregtypecode,\n                    nregsubtypecode: nregsubtypecode,\n                    ndesigntemplatemappingcode: ndesigntemplatemappingcode,\n                    nresultusedmaterialcode: selectedRecord.nresultusedmaterialcode,\n                    ntransactiontestcode: this.props.Login.masterData.RESelectedTest ? this.props.Login.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\").toString() : \"\"\n                  };\n                } else {\n                  inputData = {\n                    ResultUsedMaterial: {\n                      ntransactiontestcode: selectedRecord.ntransactiontestcode,\n                      npreregno: selectedRecord.npreregno,\n                      nmaterialtypecode: selectedRecord.nmaterialtypecode.value,\n                      nmaterialcategorycode: selectedRecord.nmaterialcatcode.value,\n                      nmaterialcode: selectedRecord.nmaterialcode.value,\n                      ninventorycode: selectedRecord.nmaterialinventorycode.value,\n                      nsectioncode: selectedRecord.nsectioncode,\n                      jsondata: {\n                        sarno: selectedRecord.sarno,\n                        ssamplearno: selectedRecord.ssamplearno,\n                        stestsynonym: selectedRecord.stestsynonym,\n                        smaterialcatname: selectedRecord.nmaterialcatcode.label,\n                        smaterialname: selectedRecord.nmaterialcode.label,\n                        sinventoryid: selectedRecord.nmaterialinventorycode.label,\n                        nqtyused: selectedRecord.susedquantity,\n                        scarriergas: selectedRecord.scarriergas,\n                        smobilephase: selectedRecord.smobilephase,\n                        sremarks: selectedRecord.sremarks,\n                        smaterialtypename: selectedRecord.nmaterialtypecode.label,\n                        nsectioncode: selectedRecord.nsectioncode,\n                        ntestgroupmaterial: selectedRecord.ntestgroupmaterial,\n                        ssectionname: selectedRecord.ssectionname,\n                        ntestgrouptestcode: selectedRecord.ntestgroupmaterial == transactionStatus.YES ? this.props.Login.masterData.RESelectedTest[0].ntestgrouptestcode : -1\n                      }\n                    },\n                    MaterialInventoryTrans: {\n                      nmaterialinventorycode: selectedRecord.nmaterialinventorycode.value,\n                      nsectioncode: selectedRecord.nsectioncode,\n                      jsondata: {\n                        nqtyused: selectedRecord.susedquantity,\n                        IDS_INVENTORYID: selectedRecord.nmaterialinventorycode.label\n                      }\n                    },\n                    userinfo: this.props.Login.userInfo,\n                    nregtypecode: nregtypecode,\n                    nregsubtypecode: nregsubtypecode,\n                    ndesigntemplatemappingcode: ndesigntemplatemappingcode,\n                    transactiontestcode: this.props.Login.masterData.RESelectedTest ? this.props.Login.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\") : \"-1\"\n                  };\n                }\n\n                inputParam = {\n                  classUrl: classUrl,\n                  methodUrl: \"ResultUsedMaterial\",\n                  inputData: inputData,\n                  selectedId,\n                  isFileupload: false,\n                  activeTestKey: \"IDS_MATERIAL\",\n                  operation: this.props.Login.operation,\n                  displayName: this.props.Login.inputParam.displayName,\n                  saveType //postParam\n\n                };\n              } else {\n                toast.warn(this.props.intl.formatMessage({\n                  id: \"Quantity Not available\"\n                }));\n                return null;\n              }\n            } else {\n              toast.warn(this.props.intl.formatMessage({\n                id: \"Select Material Inventory\"\n              }));\n              return null;\n            }\n          } else {\n            toast.warn(this.props.intl.formatMessage({\n              id: \"Select Material\"\n            }));\n            return null;\n          }\n        }\n\n        if (this.props.Login.screenName === \"IDS_TASK\") {\n          if (selectedRecord.sanalysistime && selectedRecord.sanalysistime !== \"\" || selectedRecord.smisctime && selectedRecord.smisctime !== \"\" || selectedRecord.spreanalysistime && selectedRecord.spreanalysistime !== \"\" || selectedRecord.spreparationtime && selectedRecord.spreparationtime !== \"\" || selectedRecord.scomments && selectedRecord.scomments !== \"\") {\n            if (this.props.Login.operation === \"update\") {\n              inputData = {\n                ResultUsedTasks: {\n                  nresultusedtaskcode: selectedRecord.nresultusedtaskcode,\n                  jsondata: {\n                    //ntransactiontestcode: parseInt(selectedRecord.ntransactiontestcode),\n                    sarno: this.props.Login.masterData.RESelectedTest[0].sarno,\n                    ssamplearno: this.props.Login.masterData.RESelectedTest[0].ssamplearno,\n                    stestsynonym: selectedRecord.stestsynonym,\n                    sanalysistime: selectedRecord.sanalysistime ? selectedRecord.sanalysistime : \"\",\n                    sanalyst: this.props.Login.userInfo.susername,\n                    smisctime: selectedRecord.smisctime ? selectedRecord.smisctime : \"\",\n                    spreanalysistime: selectedRecord.spreanalysistime ? selectedRecord.spreanalysistime : \"\",\n                    spreparationtime: selectedRecord.spreparationtime ? selectedRecord.spreparationtime : \"\",\n                    staskprocedure: selectedRecord.staskprocedure ? selectedRecord.staskprocedure : \"\",\n                    scomments: selectedRecord.scomments ? selectedRecord.scomments : \"\"\n                  }\n                },\n                userinfo: this.props.Login.userInfo,\n                ntransactiontestcode: this.props.Login.masterData.RESelectedTest && this.props.Login.masterData.RESelectedTest.map(sample => sample.ntransactiontestcode).join(\",\"),\n                nregtypecode: nregtypecode,\n                nregsubtypecode: nregsubtypecode,\n                ndesigntemplatemappingcode: ndesigntemplatemappingcode\n              };\n            } else {\n              let taskArry = [];\n              this.props.Login.masterData.RESelectedTest && this.props.Login.masterData.RESelectedTest.map(test => taskArry.push({\n                //ntransactiontestcode: parseInt(selectedRecord.ntransactiontestcode),\n                ntransactiontestcode: parseInt(test.ntransactiontestcode),\n                npreregno: parseInt(test.npreregno),\n                // sanalysistime: selectedRecord.sanalysistime ? selectedRecord.sanalysistime : \"\",\n                // sanalyst: this.props.Login.userInfo.susername,\n                // smisctime: selectedRecord.smisctime ? selectedRecord.smisctime : \"\",\n                // spreanalysistime: selectedRecord.spreanalysistime ? selectedRecord.spreanalysistime : \"\",\n                // spreparationtime: selectedRecord.spreparationtime ? selectedRecord.spreparationtime : \"\",\n                // scomments: selectedRecord.scomments ? selectedRecord.scomments : \"\",\n                // npreregno: this.props.Login.masterData.RESelectedSample ? this.props.Login.masterData.RESelectedSample.map(preregno => preregno.npreregno).join(\",\").toString() : \"\",\n                jsondata: {\n                  //ntransactiontestcode: parseInt(selectedRecord.ntransactiontestcode),\n                  sarno: test.sarno,\n                  ssamplearno: test.ssamplearno,\n                  stestsynonym: test.stestsynonym,\n                  sanalysistime: selectedRecord.sanalysistime ? selectedRecord.sanalysistime : \"\",\n                  sanalyst: this.props.Login.userInfo.susername,\n                  smisctime: selectedRecord.smisctime ? selectedRecord.smisctime : \"\",\n                  spreanalysistime: selectedRecord.spreanalysistime ? selectedRecord.spreanalysistime : \"\",\n                  spreparationtime: selectedRecord.spreparationtime ? selectedRecord.spreparationtime : \"\",\n                  staskprocedure: selectedRecord.staskprocedure ? selectedRecord.staskprocedure : \"\",\n                  scomments: selectedRecord.scomments ? selectedRecord.scomments : \"\"\n                }\n              }));\n              inputData = {\n                ResultUsedTasks: taskArry,\n                userinfo: this.props.Login.userInfo,\n                ntransactiontestcode: this.props.Login.masterData.RESelectedTest && this.props.Login.masterData.RESelectedTest.map(sample => sample.ntransactiontestcode).join(\",\"),\n                nregtypecode: nregtypecode,\n                nregsubtypecode: nregsubtypecode,\n                ndesigntemplatemappingcode: ndesigntemplatemappingcode\n              };\n            }\n\n            inputParam = {\n              classUrl: classUrl,\n              methodUrl: \"ResultUsedTasks\",\n              inputData: inputData,\n              selectedId,\n              activeTestKey: \"IDS_TASK\",\n              isFileupload: false,\n              operation: this.props.Login.operation,\n              displayName: this.props.Login.inputParam.displayName,\n              saveType //postParam\n\n            };\n          } else {\n            toast.info(this.props.intl.formatMessage({\n              id: \"IDS_ENTERTASKTIME\"\n            }));\n            return;\n          }\n        }\n\n        if (this.props.Login.screenName === \"IDS_PARAMETERCOMMENTS\") {\n          inputData = {\n            ntransactiontestcode: selectedRecord.ntransactiontestcode,\n            ntransactionresultcode: selectedRecord.ntransactionresultcode,\n            sresultcomment: selectedRecord.sresultcomment,\n            transactiontestcode: selectedRecord.transactiontestcode,\n            userinfo: this.props.Login.userInfo,\n            nregtypecode: nregtypecode,\n            nregsubtypecode: nregsubtypecode,\n            ncontrolcode: this.props.Login.ncontrolcode\n          }; // inputParam = {\n          //     classUrl: classUrl,\n          //     methodUrl: \"ParameterComments\",\n          //     inputData: inputData, selectedId,\n          //     isFileupload: false,\n          //     operation: this.props.Login.operation,\n          //     displayName: this.props.Login.inputParam.displayName, saveType//postParam\n          // }\n\n          this.updateParameterComments(inputData, this.props.Login.masterData, selectedRecord.ncontrolcode);\n          return;\n        }\n\n        if (this.props.Login.screenName === \"IDS_CHECKLISTRESULT\") {\n          let lstResultCheckList = [];\n\n          if (selectedRecord && selectedRecord.editedQB) {\n            selectedRecord.editedQB.map(qbcode => lstResultCheckList.push(selectedRecord[qbcode]));\n            inputData = {\n              ntransactiontestcode: selectedRecord.ntransactiontestcode.toString(),\n              ntransactionresultcode: selectedRecord.ntransactionresultcode,\n              transactiontestcode: selectedRecord.transactiontestcode,\n              ResultCheckList: lstResultCheckList,\n              userinfo: this.props.Login.userInfo,\n              nregtypecode: nregtypecode,\n              nregsubtypecode: nregsubtypecode\n            };\n            inputParam = {\n              classUrl: classUrl,\n              methodUrl: \"ResultEntryChecklist\",\n              inputData: inputData,\n              selectedId,\n              isFileupload: false,\n              operation: this.props.Login.operation,\n              displayName: this.props.Login.inputParam.displayName,\n              saveType //postParam\n\n            };\n          }\n        }\n\n        const masterData = this.props.Login.masterData;\n\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolcode)) {\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              loadEsign: true,\n              screenData: {\n                inputParam,\n                masterData\n              },\n              saveType\n            }\n          };\n          this.props.updateStore(updateInfo);\n        } else {\n          this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\n        }\n      }\n    };\n\n    this.searchSampleRef = React.createRef();\n    this.searchSubSampleRef = React.createRef();\n    this.searchTestRef = React.createRef();\n    this.state = {\n      // sampleGridDataState: { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 },\n      // resultDataState: { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5, group: [{ field: 'sarno' }] },\n      // instrumentDataState: { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5, group: [{ field: 'sarno' }] },\n      // materialDataState: { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5, group: [{ field: 'sarno' }] },\n      // taskDataState: { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5, group: [{ field: 'sarno' }] },\n      // documentDataState: { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5, group: [{ field: 'sarno' }] },\n      // resultChangeDataState: { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5, group: [{ field: 'sarno' }] },\n      // testCommentDataState: { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5, group: [{ field: 'sarno' }] },\n      // historyDataState: { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5, group: [{ field: 'stestsynonym' }] },\n      // sampleHistoryDataState: { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5, group: [{ field: 'sarno' }] },\n      // historyDataState: { skip: 0, take: 5, group: [{ field: 'ArNo' }, { field: 'stestsynonym' }] },\n      subSampleCommentDataState: {\n        skip: 0,\n        take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 //, group: [{ field: 'groupingField' }] \n\n      },\n      subSampleAttachmentDataState: {\n        skip: 0,\n        take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 //, group: [{ field: 'groupingField' }] \n\n      },\n      sampleGridDataState: {\n        skip: 0,\n        take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n      },\n      resultDataState: {\n        skip: 0,\n        take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 //, group: [{ field: 'sarno' }] \n\n      },\n      instrumentDataState: {\n        skip: 0,\n        take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 //, group: [{ field: 'sarno' }] \n\n      },\n      materialDataState: {\n        skip: 0,\n        take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 //, group: [{ field: 'sarno' }] \n\n      },\n      taskDataState: {\n        skip: 0,\n        take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 //, group: [{ field: 'sarno' }] \n\n      },\n      documentDataState: {\n        skip: 0,\n        take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 //, group: [{ field: 'sarno' }]\n\n      },\n      resultChangeDataState: {\n        skip: 0,\n        take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 //, group: [{ field: 'sarno' }]\n\n      },\n      testCommentDataState: {\n        skip: 0,\n        take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 //, group: [{ field: 'sarno' }] \n\n      },\n      historyDataState: {\n        skip: 0,\n        take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 //, group: [{ field: 'stestsynonym' }] \n\n      },\n      sampleHistoryDataState: {\n        skip: 0,\n        take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 //, group: [{ field: 'sarno' }] \n\n      },\n      userRoleControlRights: [],\n      controlMap: new Map(),\n      masterStatus: \"\",\n      error: \"\",\n      operation: \"\",\n      showSample: false,\n      showSubSample: false,\n      showTest: true,\n      tabPane: 0,\n      subsampleskip: 0,\n      sampleListColumns: [],\n      subSampleListColumns: [],\n      testListColumns: [],\n      TableExpandableItem: [],\n      SingleItem: [],\n      SampleGridItem: [],\n      SampleGridExpandableItem: [],\n      sampleListMainField: [],\n      subSampleListMainField: [],\n      testListMainField: [],\n      testMoreField: [],\n      selectedRecord: {},\n      validateFormulaMandyFields: [],\n      splitChangeWidthPercentage: 22,\n      skip: 0,\n      take: this.props.Login.settings && this.props.Login.settings[3],\n      subSampleSkip: 0,\n      subSampleTake: this.props.Login.settings && this.props.Login.settings[12],\n      // subsampletake: this.props.Login.settings\n      // && this.props.Login.settings[12] ? this.props.Login.settings[12] : 10,\n      testskip: 0,\n      testtake: this.props.Login.settings && this.props.Login.settings[12],\n      initialVerticalWidth: \"57vh\",\n      enablePin: false,\n      openELNSheet: false\n    };\n    this.formRef = React.createRef(); //this.onSecondaryPaneSizeChange = this.onSecondaryPaneSizeChange.bind(this);\n  }\n\n  showRESampleInfo() {\n    this.setState({\n      showSample: true,\n      showTest: false\n    });\n  }\n\n  showRETestList() {\n    this.setState({\n      showTest: true,\n      showSample: false,\n      showSubSample: false\n    });\n  } // getMeanTestParameter =(meanParam)=>{\n  //     const inputData = {npreregno:meanParam.selectedRecord.npreregno,\n  //                        userinfo:this.props.Login.userInfo}\n  //     return rsapi.post(\"resultentrybysample/getMeanCalculationTestParameter\", inputData)\n  //         .then(response => {\n  //            const list =  response.data || [];\n  //            const optionList = [];\n  //            list.map(item=>{optionList.push({item:item, label:item.stestsynonym+\"-\"+item.sparametername+\"-\"+item.sresult, value:item.ntransactiontestresultcode})})\n  //            this.setState({meanTestParameterList:optionList});                \n  //         })\n  //         .catch(error => {\n  //             if (error.response.status === 500) {\n  //                 toast.error(error.message);\n  //             } else {\n  //                 toast.warn(error.response.data);\n  //             }\n  //         })\n  // }\n\n\n  showRESubSampleinfo() {\n    this.setState({\n      showSample: false,\n      showTest: true,\n      showSubSample: !this.state.showSubSample\n    });\n  }\n\n  // sampleTabDetail = () => {\n  //     const tabMap = new Map();\n  //     {\n  //         this.props.Login.masterData.RESelectedSample && this.props.Login.masterData.RESelectedSample.length === 1 ?\n  //             tabMap.set(\"IDS_SAMPLEINFO\", <SampleInfoView\n  //                 data={this.props.Login.masterData.RESelectedSample && this.props.Login.masterData.RESelectedSample.length > 0 ? this.props.Login.masterData.RESelectedSample[this.props.Login.masterData.RESelectedSample.length - 1] : {}}\n  //                 SingleItem={this.state.SingleItem}\n  //                 screenName=\"IDS_SAMPLEINFO\"\n  //             />) :\n  //             tabMap.set(\"IDS_SAMPLEGRID\", <SampleInfoGrid\n  //                 selectedSample={this.props.Login.masterData.RESelectedSample}\n  //                 dataState={this.state.dataState}\n  //                 dataStateChange={this.dataStateChange}\n  //                 detailedFieldList={this.state.SampleGridExpandableItem}\n  //                 extractedColumnList={this.state.SampleGridItem}\n  //                 userInfo={this.props.Login.userInfo}\n  //                 inputParam={this.props.Login.inputParam}\n  //                 screenName=\"IDS_SAMPLEGRID\"\n  //             />)\n  //         // tabMap.set(\"IDS_SAMPLEATTACHMENTS\", <></>)\n  //         // tabMap.set(\"IDS_SAMPLECOMMENTS\", <></>)\n  //         // tabMap.set(\"IDS_SUBSAMPLEATTACHMENTS\", <></>)\n  //         // tabMap.set(\"IDS_SUBSAMPLECOMMENTS\", <></>)\n  //         return tabMap;\n  //     }\n  // }\n  sampleTabDetail() {\n    const tabMap = new Map();\n    let npreregno = this.props.Login.masterData.RESelectedSample ? this.props.Login.masterData.RESelectedSample.map(sample => sample.npreregno).join(\",\") : \"-1\";\n    tabMap.set(\"IDS_SAMPLEATTACHMENTS\", /*#__PURE__*/React.createElement(Attachments, {\n      screenName: \"IDS_SAMPLEATTACHMENTS\",\n      selectedMaster: this.props.Login.masterData.RESelectedSample,\n      controlMap: this.state.controlMap,\n      userRoleControlRights: this.state.userRoleControlRights,\n      attachments: this.props.Login.masterData.RegistrationAttachment || [],\n      deleteRecord: this.props.deleteAttachment,\n      onSaveClick: this.onAttachmentSaveClick,\n      masterList: this.props.Login.masterData.RESelectedSample,\n      masterAlertStatus: \"IDS_SELECTSAMPLETOADDATTACHEMENT\",\n      fetchRecord: this.props.getAttachmentCombo,\n      addName: \"AddSampleAttachment\",\n      editName: \"EditSampleAttachment\",\n      deleteName: \"DeleteSampleAttachment\",\n      viewName: \"ViewSampleAttachment\",\n      methodUrl: \"SampleAttachment\",\n      nsubsampleneed: this.props.Login.masterData.realRegSubTypeValue.nneedsubsample,\n      userInfo: this.props.Login.userInfo,\n      deleteParam: {\n        methodUrl: \"SampleAttachment\",\n        npreregno,\n        userInfo: this.props.Login.userInfo,\n        masterData: this.props.Login.masterData,\n        esignRights: this.props.Login.userRoleControlRights,\n        screenName: this.props.Login.screenName\n      },\n      editParam: {\n        methodUrl: \"SampleAttachment\",\n        npreregno,\n        userInfo: this.props.Login.userInfo,\n        masterData: this.props.Login.masterData,\n        esignRights: this.props.Login.userRoleControlRights,\n        masterList: this.props.Login.masterData.RESelectedSample\n      },\n      selectedListName: \"IDS_ARNUMBER\",\n      displayName: \"sarno\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1259,\n        columnNumber: 13\n      }\n    }));\n    tabMap.set(\"IDS_SAMPLECOMMENTS\", /*#__PURE__*/React.createElement(Comments, {\n      screenName: \"IDS_SAMPLECOMMENTS\",\n      onSaveClick: this.onCommentsSaveClick,\n      selectedMaster: \"RESelectedSample\",\n      controlMap: this.state.controlMap,\n      userRoleControlRights: this.state.userRoleControlRights,\n      Comments: this.props.Login.masterData.RegistrationComment || [],\n      fetchRecord: this.props.getCommentsCombo,\n      masterData: this.props.Login.masterData,\n      addName: \"AddSampleComment\",\n      editName: \"EditSampleComment\",\n      deleteName: \"DeleteSampleComment\",\n      methodUrl: \"SampleComment\",\n      isTestComment: false,\n      masterList: this.props.Login.masterData.RESelectedSample,\n      masterAlertStatus: \"IDS_SELECTSAMPLETOADDCOMMENTS\",\n      primaryKeyField: \"nregcommentcode\",\n      dataState: this.state.testCommentDataState,\n      dataStateChange: this.testDataStateChange,\n      deleteParam: {\n        methodUrl: \"SampleComment\",\n        npreregno,\n        userInfo: this.props.Login.userInfo,\n        masterData: this.props.Login.masterData,\n        esignRights: this.props.Login.userRoleControlRights,\n        screenName: \"IDS_SAMPLECOMMENTS\"\n      },\n      editParam: {\n        methodUrl: \"SampleComment\",\n        npreregno,\n        userInfo: this.props.Login.userInfo,\n        masterData: this.props.Login.masterData,\n        esignRights: this.props.Login.userRoleControlRights,\n        screenName: \"IDS_SAMPLECOMMENTS\",\n        operation: \"update\",\n        masterList: this.props.Login.masterData.RESelectedSample || [],\n        ncontrolCode: this.state.controlMap.has(\"EditSampleComment\") && this.state.controlMap.get(\"EditSampleComment\").ncontrolcode\n      },\n      selectedListName: \"IDS_ARNUMBER\",\n      displayName: \"sarno\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1300,\n        columnNumber: 42\n      }\n    }));\n    tabMap.set(\"IDS_SAMPLEAPPROVALHISTORY\", /*#__PURE__*/React.createElement(SampleApprovalHistory, {\n      userInfo: this.props.Login.userInfo,\n      ApprovalHistory: this.props.Login.masterData.SampleApprovalHistory,\n      inputParam: this.props.Login.inputParam,\n      dataState: this.state.sampleHistoryDataState,\n      dataStateChange: this.sampleDataStateChange,\n      masterData: this.props.Login.masterData,\n      screenName: \"IDS_SAMPLEAPPROVALHISTORY\",\n      controlMap: this.state.controlMap,\n      userRoleControlRights: this.state.userRoleControlRights,\n      selectedId: null,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1346,\n        columnNumber: 13\n      }\n    }));\n    return tabMap;\n  }\n\n  componentDidMount() {\n    if (this.parentHeight) {\n      const height = this.parentHeight.clientHeight;\n      this.setState({\n        firstPane: height - 80,\n        parentHeight: height\n      });\n    }\n  }\n\n  getActiveTestURL() {\n    let url = \"resultentrybysample/getTestbasedParameter\";\n\n    switch (this.props.Login.activeTestKey) {\n      case \"IDS_RESULTS\":\n        url = \"resultentrybysample/getTestbasedParameter\";\n        break;\n\n      case \"IDS_INSTRUMENT\":\n        url = \"resultentrybysample/getResultUsedInstrument\";\n        break;\n\n      case \"IDS_MATERIAL\":\n        url = \"resultentrybysample/getResultUsedMaterial\";\n        break;\n\n      case \"IDS_TASK\":\n        url = \"resultentrybysample/getResultUsedTask\";\n        break;\n\n      case \"IDS_TESTATTACHMENTS\":\n        url = \"attachment/getTestAttachment\";\n        break;\n\n      case \"IDS_TESTCOMMENTS\":\n        url = \"comments/getTestComment\";\n        break;\n\n      case \"IDS_DOCUMENTS\":\n        url = \"attachment/getSampleAttachment\";\n        break;\n\n      case \"IDS_RESULTCHANGEHISTORY\":\n        url = \"resultentrybysample/getResultChangeHistory\";\n        break;\n\n      case \"IDS_APPROVALHISTORY\":\n        url = \"resultentrybysample/getSampleApprovalHistory\";\n        break;\n\n      case \"IDS_SAMPLEATTACHMENTS\":\n        url = \"attachment/getSampleAttachment\";\n        break;\n\n      default:\n        url = \"resultentrybysample/getTestbasedParameter\";\n        break;\n    }\n\n    return url;\n  }\n\n  render() {\n    let sampleListRE = this.props.Login.masterData.RE_SAMPLE ? sortData(this.props.Login.masterData.RE_SAMPLE, \"descending\", \"npreregno\") : []; //let subSampleListRE = this.props.Login.masterData.RE_SUBSAMPLE ? sortData(this.props.Login.masterData.RE_SUBSAMPLE, 'descending', 'ntransactionsamplecode') : [];\n    //let testListRE = this.props.Login.masterData.RE_TEST ? sortData(this.props.Login.masterData.RE_TEST,'descending','ntransactiontestcode') : [] //? sortData(this.props.Login.masterData.RE_TEST, 'descending', 'ntransactiontestcode') : [];\n    //let subSampleListRE = this.props.Login.masterData.RE_SUBSAMPLE ?  this.props.Login.masterData.RE_SUBSAMPLE : []\n    //let subSampleListRE = this.props.Login.masterData.RE_SUBSAMPLE ? sortData(this.props.Login.masterData.RE_SUBSAMPLE, 'descending', 'ntransactionsamplecode') : [];\n    //let testListRE = this.props.Login.masterData.RE_TEST ? sortData(this.props.Login.masterData.RE_TEST,'descending','ntransactiontestcode') : [] //? sortData(this.props.Login.masterData.RE_TEST, 'descending', 'ntransactiontestcode') : [];\n\n    let subSampleListRE = this.props.Login.masterData.RE_SUBSAMPLE ? this.props.Login.masterData.RE_SUBSAMPLE : []; //let testListRE = this.props.Login.masterData.RE_TEST ? this.props.Login.masterData.RE_TEST : []\n\n    let testListRE = this.props.Login.masterData.RE_TEST ? this.props.Login.masterData.RE_TEST : [];\n    const startDate = this.props.Login.masterData.realFromDate || this.props.Login.masterData.fromDate || new Date();\n    const endDate = this.props.Login.masterData.realToDate || this.props.Login.masterData.toDate || new Date(); // let obj = this.covertDatetoString(startDate, endDate)\n\n    let obj = convertDateValuetoString(startDate, endDate, this.props.Login.userInfo);\n    const fromDate = obj.fromDate;\n    const toDate = obj.toDate;\n    let subSampleGetREParam = {\n      masterData: this.props.Login.masterData,\n      userinfo: this.props.Login.userInfo,\n      nsampletypecode: this.props.Login.masterData.realSampleTypeValue && this.props.Login.masterData.realSampleTypeValue.nsampletypecode,\n      nregtypecode: this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue.nregtypecode,\n      nregsubtypecode: this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode,\n      napprovalversioncode: this.props.Login.masterData.realApproveConfigVersion && this.props.Login.masterData.realApproveConfigVersion.napprovalconfigversioncode,\n      ntransactionstatus: this.props.Login.masterData.realFilterStatusValue && this.props.Login.masterData.realFilterStatusValue.ntransactionstatus,\n      ntestcode: this.props.Login.masterData.realTestcodeValue && this.props.Login.masterData.realTestcodeValue.ntestcode,\n      npreregno: this.props.Login.masterData.RESelectedSample && this.props.Login.masterData.RESelectedSample.map(sample => sample && sample.npreregno).join(\",\"),\n      fromdate: fromDate,\n      todate: toDate,\n      activeTestKey: this.props.Login.activeTestTab || 'IDS_RESULTS',\n      activeSampleKey: this.props.Login.activeTestTab || 'IDS_IDS_SAMPLEINFO',\n      testskip: this.state.testskip,\n      testtake: this.state.testtake,\n      resultDataState: this.state.resultDataState,\n      instrumentDataState: this.state.instrumentDataState,\n      materialDataState: this.state.materialDataState,\n      taskDataState: this.state.taskDataState,\n      documentDataState: this.state.documentDataState,\n      resultChangeDataState: this.state.resultChangeDataState,\n      testCommentDataState: this.state.testCommentDataState,\n      sampleChangeDataState: this.state.sampleChangeDataState,\n      ndesigntemplatemappingcode: this.props.Login.masterData.ndesigntemplatemappingcode,\n      searchSubSampleRef: this.searchSubSampleRef,\n      searchTestRef: this.searchTestRef,\n      nneedtemplatebasedflow: this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nneedtemplatebasedflow || false,\n      //Aravindh\n      checkBoxOperation: 3,\n      nworlistcode: this.props.Login.masterData.realWorklistCodeValue && this.props.Login.masterData.realWorklistCodeValue.nworklistcode || -1,\n      nbatchmastercode: this.props.Login.masterData.realBatchCodeValue && this.props.Login.masterData.realBatchCodeValue.nbatchmastercode || -1\n    };\n    let testGetREParam = {\n      masterData: this.props.Login.masterData,\n      userinfo: this.props.Login.userInfo,\n      nsampletypecode: this.props.Login.masterData.realSampleTypeValue && this.props.Login.masterData.realSampleTypeValue.nsampletypecode,\n      nregtypecode: this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue.nregtypecode,\n      nregsubtypecode: this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode,\n      napprovalversioncode: this.props.Login.masterData.realApproveConfigVersion && this.props.Login.masterData.realApproveConfigVersion.napprovalconfigversioncode,\n      ntranscode: String(this.props.Login.masterData.realFilterStatusValue && this.props.Login.masterData.realFilterStatusValue.ntransactionstatus && this.props.Login.masterData.realFilterStatusValue.ntransactionstatus.toString()),\n      ntransactionstatus: this.props.Login.masterData.realFilterStatusValue && this.props.Login.masterData.realFilterStatusValue.ntransactionstatus,\n      ntestcode: this.props.Login.masterData.realTestcodeValue && this.props.Login.masterData.realTestcodeValue.ntestcode,\n      npreregno: this.props.Login.masterData.RESelectedSample && this.props.Login.masterData.RESelectedSample.map(sample => sample && sample.npreregno).join(\",\"),\n      activeTestKey: this.props.Login.activeTestTab || 'IDS_RESULTS',\n      activeSampleKey: this.props.Login.activeTestTab || 'IDS_IDS_SAMPLEINFO',\n      activeSubSampleTab: this.props.Login.activeTestTab || \"IDS_SUBSAMPLEATTACHMENTS\",\n      resultDataState: this.state.resultDataState,\n      instrumentDataState: this.state.instrumentDataState,\n      materialDataState: this.state.materialDataState,\n      taskDataState: this.state.taskDataState,\n      documentDataState: this.state.documentDataState,\n      resultChangeDataState: this.state.resultChangeDataState,\n      testCommentDataState: this.state.testCommentDataState,\n      ndesigntemplatemappingcode: this.props.Login.masterData.ndesigntemplatemappingcode,\n      nneedsubsample: this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nneedsubsample,\n      testskip: this.state.testskip,\n      testtake: this.state.testtake,\n      resultDataState: this.state.resultDataState,\n      instrumentDataState: this.state.instrumentDataState,\n      materialDataState: this.state.materialDataState,\n      taskDataState: this.state.taskDataState,\n      documentDataState: this.state.documentDataState,\n      resultChangeDataState: this.state.resultChangeDataState,\n      testCommentDataState: this.state.testCommentDataState,\n      historyDataState: this.state.historyDataState,\n      samplePrintHistoryDataState: this.state.samplePrintHistoryDataState,\n      sampleHistoryDataState: this.state.sampleHistoryDataState,\n      activeTabIndex: this.state.enableAutoClick ? 1 : this.state.activeTabIndex ? this.state.activeTabIndex : 0,\n      nworlistcode: this.props.Login.masterData.realWorklistCodeValue && this.props.Login.masterData.realWorklistCodeValue.nworklistcode || -1,\n      nbatchmastercode: this.props.Login.masterData.realBatchCodeValue && this.props.Login.masterData.realBatchCodeValue.nbatchmastercode || -1\n    };\n    let testChildGetREParam = {\n      masterData: this.props.Login.masterData,\n      userinfo: this.props.Login.userInfo,\n      nsampletypecode: this.props.Login.masterData.realSampleTypeValue && this.props.Login.masterData.realSampleTypeValue.nsampletypecode,\n      nregtypecode: this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue.nregtypecode,\n      nregsubtypecode: this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode,\n      napprovalversioncode: this.props.Login.masterData.realApproveConfigVersion && this.props.Login.masterData.realApproveConfigVersion.napprovalconfigversioncode,\n      ntransactionstatus: this.props.Login.masterData.realFilterStatusValue && this.props.Login.masterData.realFilterStatusValue.ntransactionstatus,\n      ntestcode: this.props.Login.masterData.realTestcodeValue && this.props.Login.masterData.realTestcodeValue.ntestcode,\n      npreregno: this.props.Login.masterData.RESelectedSample && this.props.Login.masterData.RESelectedSample.map(sample => sample && sample.npreregno).join(\",\"),\n      ntransactionsamplecode: this.props.Login.masterData.RESelectedSubSample && this.props.Login.masterData.RESelectedSubSample.map(sample => sample && sample.ntransactionsamplecode).join(\",\"),\n      activeTestKey: this.props.Login.activeTestTab || 'IDS_RESULTS',\n      fromdate: fromDate,\n      todate: toDate,\n      testskip: this.state.testskip,\n      testtake: this.state.testtake,\n      resultDataState: this.state.resultDataState,\n      instrumentDataState: this.state.instrumentDataState,\n      materialDataState: this.state.materialDataState,\n      taskDataState: this.state.taskDataState,\n      documentDataState: this.state.documentDataState,\n      resultChangeDataState: this.state.resultChangeDataState,\n      testCommentDataState: this.state.testCommentDataState,\n      ndesigntemplatemappingcode: this.props.Login.masterData.ndesigntemplatemappingcode,\n      activeTabIndex: this.state.enableAutoClick ? 1 : this.state.activeTabIndex ? this.state.activeTabIndex : 0,\n      nworlistcode: this.props.Login.masterData.realWorklistCodeValue && this.props.Login.masterData.realWorklistCodeValue.nworklistcode || -1,\n      nbatchmastercode: this.props.Login.masterData.realBatchCodeValue && this.props.Login.masterData.realBatchCodeValue.nbatchmastercode || -1\n    };\n    let sampleSearchField = [\"sarno\", \"ssamplearno\", \"sproductname\", \"sproductcatname\", \"seprotocolname\", \"stransdisplaystatus\", \"sstorageconditionname\", \"sdecisionstatus\", \"scomponentname\", \"splasmafilenumber\", \"sversion\", \"sbulkvolume\", \"sregsubtypename\", \"smanuflotno\", \"sregtypename\", \"sspecname\", \"saddress1\", \"sclientname\", \"smanufsitename\", \"sproductcertificatename\", \"smanufname\", \"sstoragelocationname\", \"dregdate\"];\n\n    if (this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode === RegistrationSubType.ROUTINE) {\n      sampleSearchField = [\"sarno\", \"ssamplearno\", \"sproductname\", \"sproductcatname\", \"sregsubtypename\", \"sregtypename\", \"sspecname\", \"smanufname\", \"sstorageconditionname\", \"sclientname\", \"scontainertype\", \"sdeadline\", \"sdecisionstatus\", \"sdeviationcomments\", \"sdispositionname\", \"slotno\", \"sbatchno\", \"sourfile\", \"speriodname\", \"spriorityname\", \"sreceiveddate\", \"sremarks\", \"sreportremarks\", \"ssamplecondition\", \"ssuppliername\", \"stotalqty\", \"stransdisplaystatus\"];\n    }\n\n    const filterSampleParam = {\n      inputListName: \"RE_SAMPLE\",\n      selectedObject: \"RESelectedSample\",\n      primaryKeyField: \"npreregno\",\n      fetchUrl: \"resultentrybysample/getResultEntryDetails\",\n      childRefs: [{\n        ref: this.searchSubSampleRef,\n        childFilteredListName: \"searchedSubSample\"\n      }, {\n        ref: this.searchTestRef,\n        childFilteredListName: \"searchedTest\"\n      }],\n      fecthInputObject: {\n        ntype: 2,\n        nflag: 2,\n        ntransactiontestcode: 0,\n        masterData: this.props.Login.masterData,\n        userinfo: this.props.Login.userInfo,\n        nsampletypecode: this.props.Login.masterData.realSampleTypeValue && this.props.Login.masterData.realSampleTypeValue.nsampletypecode,\n        nregtypecode: this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue.nregtypecode,\n        nregsubtypecode: this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode,\n        napprovalversioncode: this.props.Login.masterData.realApproveConfigVersion && this.props.Login.masterData.realApproveConfigVersion.napprovalconfigversioncode,\n        ntranscode: String(this.props.Login.masterData.realFilterStatusValue ? this.props.Login.masterData.realFilterStatusValue.ntransactionstatus ? this.props.Login.masterData.realFilterStatusValue.ntransactionstatus.toString() : 0 : 0),\n        ntestcode: this.props.Login.masterData.realTestcodeValue && this.props.Login.masterData.realTestcodeValue.ntestcode,\n        //npreregno: this.props.Login.masterData.RESelectedSample && this.props.Login.masterData.RESelectedSample.map(sample => sample.npreregno).join(\",\"),\n        fromdate: fromDate,\n        todate: toDate,\n        activeTestKey: this.props.Login.activeTestTab || 'IDS_RESULTS',\n        //nneedsubsample: this.props.Login.masterData.nneedsubsample || 4,\n        nneedsubsample: this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nneedsubsample ? true : false,\n        ndesigntemplatemappingcode: this.props.Login.masterData.ndesigntemplatemappingcode,\n        checkBoxOperation: 3,\n        ndesigntemplatemappingcode: this.props.Login.masterData.ndesigntemplatemappingcode && this.props.Login.masterData.ndesigntemplatemappingcode || -1,\n        nworlistcode: this.props.Login.masterData.realWorklistCodeValue && this.props.Login.masterData.realWorklistCodeValue.nworklistcode || -1,\n        nbatchmastercode: this.props.Login.masterData.realBatchCodeValue && this.props.Login.masterData.realBatchCodeValue.nbatchmastercode || -1\n      },\n      masterData: this.props.Login.masterData,\n      // searchFieldList: [\"sarno\", \"ssampletypestatus\"],\n      searchFieldList: sampleSearchField,\n      changeList: [\"RE_SUBSAMPLE\", \"RE_TEST\", \"TestParameters\", \"ResultChangeHistory\", \"ApprovalHistory\", \"ResultUsedInstrument\", \"ResultUsedTasks\", \"RegistrationTestAttachment\", \"RegistrationTestComment\", \"RegistrationAttachment\", \"RESelectedSample\", \"RESelectedSubSample\", \"RESelectedTest\"]\n    };\n    const filterSubSampleParam = {\n      inputListName: \"RE_SUBSAMPLE\",\n      selectedObject: \"RESelectedSubSample\",\n      primaryKeyField: \"ntransactionsamplecode\",\n      fetchUrl: \"resultentrybysample/getResultEntrySubSampleDetails\",\n      childRefs: [{\n        ref: this.searchTestRef,\n        childFilteredListName: \"searchedTest\"\n      }],\n      fecthInputObject: {\n        ntype: 3,\n        nflag: 3,\n        ntransactiontestcode: 0,\n        masterData: this.props.Login.masterData,\n        userinfo: this.props.Login.userInfo,\n        nsampletypecode: this.props.Login.masterData.realSampleTypeValue && this.props.Login.masterData.realSampleTypeValue.nsampletypecode,\n        nregtypecode: this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue.nregtypecode,\n        nregsubtypecode: this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode,\n        napprovalversioncode: this.props.Login.masterData.realApproveConfigVersion && this.props.Login.masterData.realApproveConfigVersion.napprovalconfigversioncode,\n        ntranscode: String(this.props.Login.masterData.realFilterStatusValue ? this.props.Login.masterData.realFilterStatusValue.ntransactionstatus ? this.props.Login.masterData.realFilterStatusValue.ntransactionstatus.toString() : 0 : 0),\n        ntestcode: this.props.Login.masterData.realTestcodeValue && this.props.Login.masterData.realTestcodeValue.ntestcode,\n        //npreregno: this.props.Login.masterData.RESelectedSample && this.props.Login.masterData.RESelectedSample.map(sample => sample.npreregno).join(\",\"),\n        fromdate: fromDate,\n        todate: toDate,\n        activeTestKey: this.props.Login.activeTestTab || 'IDS_RESULTS',\n        nneedsubsample: this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nneedsubsample ? true : false,\n        ndesigntemplatemappingcode: this.props.Login.masterData.ndesigntemplatemappingcode,\n        checkBoxOperation: 3,\n        nworlistcode: this.props.Login.masterData.realWorklistCodeValue && this.props.Login.masterData.realWorklistCodeValue.nworklistcode || -1,\n        nbatchmastercode: this.props.Login.masterData.realBatchCodeValue && this.props.Login.masterData.realBatchCodeValue.nbatchmastercode || -1\n      },\n      masterData: this.props.Login.masterData,\n      // searchFieldList: [\"sarno\", \"ssampletypestatus\"],\n      searchFieldList: ['ssamplearno', \"sarno\", \"sproductname\", \"sproductcatname\", \"sregsubtypename\", \"sregtypename\", \"sspecname\", \"smanufname\", \"sstorageconditionname\", \"sclientname\", \"scontainertype\", \"sdeadline\", \"sdecisionstatus\", \"sdeviationcomments\", \"sdispositionname\", \"slotno\", \"sbatchno\", \"sourfile\", \"speriodname\", \"spriorityname\", \"sreceiveddate\", \"sremarks\", \"sreportremarks\", \"ssamplecondition\", \"ssuppliername\", \"stotalqty\", \"stransdisplaystatus\"],\n      changeList: [\"RE_TEST\", \"TestParameters\", \"ResultChangeHistory\", \"ApprovalHistory\", \"ResultUsedInstrument\", \"ResultUsedTasks\", \"RegistrationTestAttachment\", \"RegistrationTestComment\", \"RegistrationAttachment\", \"RESelectedSubSample\", \"RESelectedTest\"]\n    };\n    let filterTestParam = {\n      inputListName: \"RE_TEST\",\n      selectedObject: \"RESelectedTest\",\n      primaryKeyField: \"ntransactiontestcode\",\n      fetchUrl: this.getActiveTestURL(),\n      fecthInputObject: {\n        ntransactiontestcode: this.props.Login.masterData.RESelectedTest ? this.props.Login.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\") : \"-1\",\n        userinfo: this.props.Login.userInfo,\n        ndesigntemplatemappingcode: this.props.Login.masterData.ndesigntemplatemappingcode && this.props.Login.masterData.ndesigntemplatemappingcode || -1,\n        nworlistcode: this.props.Login.masterData.realWorklistCodeValue && this.props.Login.masterData.realWorklistCodeValue.nworklistcode || -1,\n        nbatchmastercode: this.props.Login.masterData.realBatchCodeValue && this.props.Login.masterData.realBatchCodeValue.nbatchmastercode || -1\n      },\n      masterData: this.props.Login.masterData,\n      searchFieldList: [\"sarno\", \"ssamplearno\", \"stestsynonym\", \"dtransactiondate\", \"ssectionname\", \"ssourcename\", \"ntestrepeatno\", \"ntestretestno\", \"stransdisplaystatus\", \"stestsynonym\"],\n      changeList: [\"TestParameters\", \"ResultChangeHistory\", \"ApprovalHistory\", \"ResultUsedInstrument\", \"ResultUsedTasks\", \"RegistrationTestAttachment\", \"RegistrationTestComment\", \"RegistrationAttachment\", \"RESelectedTest\"],\n      ndesigntemplatemappingcode: this.props.Login.masterData.ndesigntemplatemappingcode,\n      nneedsubsample: this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nneedsubsample ? true : false,\n      checkBoxOperation: 3 //nworlistcode : (this.props.Login.masterData.defaultWorklistvalue && this.props.Login.masterData.defaultWorklistvalue.nworklistcode) || -1\n\n    };\n    this.postParamList = [{\n      filteredListName: \"searchedSample\",\n      clearFilter: \"no\",\n      searchRef: this.searchSampleRef,\n      primaryKeyField: \"npreregno\",\n      fetchUrl: \"resultentrybysample/getResultEntryDetails\",\n      fecthInputObject: filterSampleParam,\n      selectedObject: \"RESelectedSample\",\n      inputListName: \"RE_SAMPLE\",\n      updatedListname: \"\",\n      childRefs: [{\n        ref: this.searchSubSampleRef,\n        childFilteredListName: \"searchedSubSample\"\n      }, {\n        ref: this.searchTestRef,\n        childFilteredListName: \"searchedTest\"\n      }],\n      unchangeList: [\"realSampleTypeValue\", \"SampleTypeValue\", \"realRegTypeValue\", \"RegTypeValue\", \"realRegSubTypeValue\", \"RegSubTypeValue\", \"realApprovalVersionValue\", \"ApprovalVersionValue\", \"realFilterStatusValue\", \"FilterStatusValue\", \"fromDate\", \"toDate\", \"UserSectionValue\", \"SampleType\", \"RegType\", \"RegSubType\", \"ApprovalVersion\", \"JobStatus\", \"JobStatusValue\", \"FilterStatus\"]\n    }, {\n      filteredListName: \"searchedSubSample\",\n      updatedListname: \"updatedSubSample\",\n      clearFilter: \"no\",\n      searchRef: this.searchSubSampleRef,\n      primaryKeyField: \"ntransactionsamplecode\",\n      fetchUrl: \"resultentrybysample/getResultEntryDetails\",\n      fecthInputObject: testGetREParam,\n      selectedObject: \"RESelectedSubSample\",\n      childRefs: [{\n        ref: this.searchTestRef,\n        childFilteredListName: \"searchedTest\"\n      }],\n      inputListName: \"RE_SUBSAMPLE\",\n      unchangeList: [\"realSampleTypeValue\", \"SampleTypeValue\", \"realRegTypeValue\", \"RegTypeValue\", \"realRegSubTypeValue\", \"RegSubTypeValue\", \"realApprovalVersionValue\", \"ApprovalVersionValue\", \"realFilterStatusValue\", \"FilterStatusValue\", \"fromDate\", \"toDate\", \"UserSectionValue\", \"SampleType\", \"RegType\", \"RegSubType\", \"ApprovalVersion\", \"JobStatus\", \"JobStatusValue\", \"FilterStatus\"]\n    }, {\n      filteredListName: \"searchedTest\",\n      clearFilter: \"yes\",\n      searchRef: this.searchTestRef,\n      primaryKeyField: \"ntransactiontestcode\",\n      fetchUrl: this.getActiveTestURL(),\n      childRefs: [{\n        ref: this.searchSubSampleRef,\n        childFilteredListName: \"searchedSubSample\"\n      }, {\n        ref: this.searchSampleRef,\n        childFilteredListName: \"\"\n      }],\n      fecthInputObject: testChildGetREParam,\n      selectedObject: \"RESelectedTest\",\n      inputListName: \"RE_TEST\",\n      updatedListname: \"updatedTest\",\n      unchangeList: [\"realSampleTypeValue\", \"SampleTypeValue\", \"realRegTypeValue\", \"RegTypeValue\", \"realRegSubTypeValue\", \"RegSubTypeValue\", \"realApprovalVersionValue\", \"ApprovalVersionValue\", \"realFilterStatusValue\", \"FilterStatusValue\", \"fromDate\", \"toDate\", \"UserSectionValue\", \"SampleType\", \"RegType\", \"RegSubType\", \"ApprovalVersion\", \"JobStatus\", \"JobStatusValue\", \"FilterStatus\"]\n    }];\n    this.breadCrumbData = [{\n      \"label\": \"IDS_FROM\",\n      \"value\": obj.breadCrumbFrom\n    }, {\n      \"label\": \"IDS_TO\",\n      \"value\": obj.breadCrumbto\n    }, // {\n    //     \"label\": \"IDS_SAMPLETYPE\",\n    //     \"value\": this.props.Login.masterData.realSampleTypeValue && this.props.Login.masterData.realSampleTypeValue.ssampletypename ? this.props.Login.masterData.realSampleTypeValue.ssampletypename : \"Product\"\n    // }, \n    {\n      \"label\": \"IDS_REGISTRATIONTYPE\",\n      \"value\": this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue.sregtypename ? this.props.Login.masterData.realRegTypeValue.sregtypename : \"NA\" // \"value\": this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue.sregtypename || \"NA\" :\n      // this.props.Login.masterData.defaultRegistrationType ? this.props.Login.masterData.defaultRegistrationType.sregtypename || \"NA\" : \"NA\"\n\n    }, {\n      \"label\": \"IDS_REGISTRATIONSUBTYPE\",\n      \"value\": this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.sregsubtypename ? this.props.Login.masterData.realRegSubTypeValue.sregsubtypename : \"NA\"\n    }, // {\n    //     \"label\": \"IDS_CONFIGVERSION\",\n    //     \"value\": this.props.Login.masterData.realApproveConfigVersion && this.props.Login.masterData.realApproveConfigVersion.sversionname ? this.props.Login.masterData.realApproveConfigVersion.sversionname : \"NA\"\n    // },\n    {\n      \"label\": \"IDS_TEST\",\n      \"value\": this.props.Login.masterData.realTestcodeValue && this.props.Login.masterData.realTestcodeValue.stestsynonym ? this.props.Login.masterData.realTestcodeValue.stestsynonym : \"NA\"\n    }, {\n      \"label\": \"IDS_TESTSTATUS\",\n      \"value\": this.props.Login.masterData.realFilterStatusValue ? this.props.Login.masterData.realFilterStatusValue.sfilterstatus : \"NA\"\n    }];\n\n    if (this.props.Login.masterData.realWorklistCodeValue && this.props.Login.masterData.realWorklistCodeValue.nworklistcode) {\n      this.breadCrumbData.push({\n        \"label\": \"IDS_WORKLIST\",\n        \"value\": this.props.Login.masterData.realWorklistCodeValue ? this.props.Login.masterData.realWorklistCodeValue.sworklistno : \"NA\"\n      });\n    }\n\n    if (this.props.Login.masterData.realBatchCodeValue && this.props.Login.masterData.realBatchCodeValue.nbatchmastercode) {\n      this.breadCrumbData.push({\n        \"label\": \"IDS_BATCH\",\n        \"value\": this.props.Login.masterData.realBatchCodeValue ? this.props.Login.masterData.realBatchCodeValue.sbatcharno : \"NA\"\n      });\n    }\n\n    const testStartId = this.state.controlMap.has(\"TestStart\") && this.state.controlMap.get(\"TestStart\").ncontrolcode;\n    const resultEnterId = this.state.controlMap.has(\"ResultEnter\") && this.state.controlMap.get(\"ResultEnter\").ncontrolcode;\n    const completeResultId = this.state.controlMap.has(\"CompleteResult\") && this.state.controlMap.get(\"CompleteResult\").ncontrolcode;\n    const setDefaultId = this.state.controlMap.has(\"SetDefaultResult\") && this.state.controlMap.get(\"SetDefaultResult\").ncontrolcode;\n    const editSourceMethodId = this.state.controlMap.has(\"EditSourceMethod\") && this.state.controlMap.get(\"EditSourceMethod\").ncontrolcode;\n    const addResultUsedInstrumentId = this.state.controlMap.has(\"AddResultUsedInstrument\") && this.state.controlMap.get(\"AddResultUsedInstrument\").ncontrolcode;\n    const addResultUsedMaterailId = this.state.controlMap.has(\"AddResultUsedMaterial\") && this.state.controlMap.get(\"AddResultUsedMaterial\").ncontrolcode;\n    const adhocId = this.state.controlMap.has(\"AdhocParameter\") && this.state.controlMap.get(\"AdhocParameter\").ncontrolcode;\n    const openELNSheet = this.state.controlMap.has(\"OpenELNSheet\") && this.state.controlMap.get(\"OpenELNSheet\").ncontrolcode;\n    const mandatoryFieldsInstrument = [{\n      \"mandatory\": true,\n      \"idsName\": \"IDS_INSTRUMENTCATEGORY\",\n      \"dataField\": \"ninstrumentcatcode\"\n    }, {\n      \"mandatory\": true,\n      \"idsName\": \"IDS_INSTRUMENT\",\n      \"dataField\": \"ninstrumentcode\",\n      \"mandatoryLabel\": \"IDS_SELECT\",\n      \"controlType\": \"selectbox\"\n    }, {\n      \"mandatory\": true,\n      \"idsName\": \"IDS_FORMDATE\",\n      \"dataField\": \"dfromdate\",\n      \"mandatoryLabel\": \"IDS_SELECT\",\n      \"controlType\": \"selectbox\"\n    }, {\n      \"mandatory\": true,\n      \"idsName\": \"IDS_TODATE\",\n      \"dataField\": \"dtodate\",\n      \"mandatoryLabel\": \"IDS_SELECT\",\n      \"controlType\": \"selectbox\"\n    }, {\n      \"mandatory\": true,\n      \"idsName\": \"IDS_TIMEZONE\",\n      \"dataField\": \"ntzfromdate\",\n      \"mandatoryLabel\": \"IDS_SELECT\",\n      \"controlType\": \"selectbox\"\n    }, {\n      \"mandatory\": true,\n      \"idsName\": \"IDS_TIMEZONE\",\n      \"dataField\": \"ntztodate\",\n      \"mandatoryLabel\": \"IDS_SELECT\",\n      \"controlType\": \"selectbox\"\n    }];\n    const mandatoryFieldsTask = [{\n      \"mandatory\": true,\n      \"idsName\": \"IDS_PREANALYSISTIME\",\n      \"dataField\": \"spreanalysistime\",\n      \"mandatoryLabel\": \"IDS_ENTER\",\n      \"controlType\": \"textbox\"\n    }, {\n      \"mandatory\": true,\n      \"idsName\": \"IDS_PREPARATIONTIME\",\n      \"dataField\": \"spreparationtime\",\n      \"mandatoryLabel\": \"IDS_ENTER\",\n      \"controlType\": \"textbox\"\n    }, {\n      \"mandatory\": true,\n      \"idsName\": \"IDS_ANALYSISTIME\",\n      \"dataField\": \"sanalysistime\",\n      \"mandatoryLabel\": \"IDS_ENTER\",\n      \"controlType\": \"textbox\"\n    }, {\n      \"mandatory\": true,\n      \"idsName\": \"IDS_MISCTIME\",\n      \"dataField\": \"smisctime\",\n      \"mandatoryLabel\": \"IDS_ENTER\",\n      \"controlType\": \"textbox\"\n    }];\n    const mandatoryFieldsTestMethodSource = [{\n      \"mandatory\": true,\n      \"idsName\": \"IDS_SOURCE\",\n      \"dataField\": \"nsourcecode\",\n      \"mandatoryLabel\": \"IDS_SELECT\",\n      \"controlType\": \"selectbox\"\n    }, {\n      \"mandatory\": true,\n      \"idsName\": \"IDS_METHOD\",\n      \"dataField\": \"nmethodcode\",\n      \"mandatoryLabel\": \"IDS_SELECT\",\n      \"controlType\": \"selectbox\"\n    }];\n    const mandatoryEnforceResult = [{\n      \"mandatory\": true,\n      \"idsName\": \"IDS_RESULTS\",\n      \"dataField\": \"senforceresult\",\n      \"mandatoryLabel\": \"IDS_ENTER\",\n      \"controlType\": \"textbox\"\n    }, {\n      \"mandatory\": true,\n      \"idsName\": \"IDS_COMMENTS\",\n      \"dataField\": \"senforceresultcomment\",\n      \"mandatoryLabel\": \"IDS_ENTER\",\n      \"controlType\": \"textbox\"\n    } // { \"mandatory\": true, \"idsName\": \"IDS_PASSFLAG\", \"dataField\": \"ngradecode\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"textbox\" },\n    ];\n    const mandatoryFieldsParameter = [{\n      \"mandatory\": true,\n      \"idsName\": \"IDS_PARAMETERCOMMENTS\",\n      \"dataField\": \"sresultcomment\",\n      \"mandatoryLabel\": \"IDS_ENTER\",\n      \"controlType\": \"textbox\"\n    }];\n    const validateFormulaMandyFields = this.state.validateFormulaMandyFields;\n    const reportPreviewId = this.state.controlMap.has(\"SamplePreviewReport\") && this.state.controlMap.get(\"SamplePreviewReport\").ncontrolcode;\n    const testDesign = /*#__PURE__*/React.createElement(ContentPanel, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3070,\n        columnNumber: 28\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3071,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Card.Header, {\n      style: {\n        borderBottom: \"0px\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3072,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      style: {\n        display: \"inline-block\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3073,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"h4\", {\n      className: \"card-title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3074,\n        columnNumber: 25\n      }\n    }, this.props.intl.formatMessage({\n      id: \"IDS_TEST\"\n    })))), /*#__PURE__*/React.createElement(Card.Body, {\n      className: \"p-0 sm-pager\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3077,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(TransactionListMasterJsonView, {\n      progressTimerStart: this.props.Login.progressTimerStart || false,\n      clickIconGroup: true,\n      cardHead: 94 //paneHeight={this.state.initialVerticalWidth}\n      // paneHeight={`${testListRE && testListRE !== null && testListRE.length > 0 ? testListRE.length * 13 : 5}vh`}\n      ,\n      masterList: this.props.Login.masterData.searchedTest || testListRE,\n      selectedMaster: this.props.Login.masterData.RESelectedTest,\n      primaryKeyField: \"ntransactiontestcode\" //getMasterDetail={this.props.getTestChildTabREDetail}\n      ,\n      getMasterDetail: (event, status) => {\n        this.props.getTestChildTabREDetail(event, status);\n        this.changePropertyView(1, \"IDS_RESULTS\", event, \"click\");\n      },\n      inputParam: testChildGetREParam,\n      subFieldsLabel: true,\n      additionalParam: [],\n      mainField: \"stestsynonym\",\n      selectedListName: \"RESelectedTest\",\n      objectName: \"test\",\n      listName: \"IDS_TEST\",\n      pageSize: this.props.Login.settings && this.props.Login.settings[13].split(\",\").map(setting => parseInt(setting)),\n      showStatusLink: true,\n      statusFieldName: \"stransdisplaystatus\",\n      statusField: \"ntransactionstatus\",\n      needMultiSelect: true,\n      subFields: this.state.testListColumns || [],\n      moreField: this.state.testMoreField,\n      needValidation: false,\n      needFilter: false,\n      filterColumnData: this.props.filterTransactionList,\n      searchListName: \"searchedTest\",\n      searchRef: this.searchTestRef,\n      filterParam: filterTestParam,\n      selectionField: \"ntransactionstatus\",\n      showStatusName: true,\n      selectionFieldName: \"sfilterstatus\",\n      childTabsKey: [\"TestParameters\", \"ResultUsedInstrument\", \"ResultUsedTasks\", \"RegistrationTestAttachment\", \"ResultChangeHistory\", \"RegistrationTestComment\", \"ResultChangeHistory\", \"RegistrationComment\"] // selectionList={this.props.Login.masterData.REFilterStatus && this.props.Login.masterData.realFilterStatusValue && this.props.Login.masterData.realFilterStatusValue.ntransactionstatus === transactionStatus.ALL ? this.props.Login.masterData.REFilterStatus : []}\n      ,\n      selectionList: this.state.selectedFilter,\n      skip: this.state.testskip,\n      take: this.state.testtake,\n      handlePageChange: this.handleTestPageChange,\n      selectionColorField: \"scolorhexcode\",\n      showMoreResetList: true,\n      showMoreResetListName: \"RE_SAMPLE\",\n      buttonCount: 5,\n      jsonField: 'jsondata',\n      jsonDesignFields: true,\n      actionIcons: [{\n        title: this.props.intl.formatMessage({\n          id: \"IDS_OPENELNSHEET\"\n        }),\n        controlname: \"faMicroscope\",\n        hidden: this.state.userRoleControlRights.indexOf(openELNSheet) === -1,\n        onClick: this.openClosePortal,\n        objectName: \"test\",\n        inputData: {\n          masterData: this.props.Login.masterData,\n          userInfo: this.props.Login.userInfo,\n          elnUserInfo: this.props.Login.elnUserInfo,\n          elnSite: this.props.Login.elnSite\n        }\n      }, {\n        title: this.props.intl.formatMessage({\n          id: \"IDS_EDITMETHODSSOURCE\"\n        }),\n        controlname: \"faPencilAlt\",\n        dataplace: \"left\",\n        hidden: this.state.userRoleControlRights.indexOf(editSourceMethodId) === -1,\n        onClick: this.testMethodSourceEdit,\n        objectName: \"test\",\n        inputData: {\n          masterData: this.props.Login.masterData,\n          userInfo: this.props.Login.userInfo,\n          editSourceMethodId\n        }\n      }, {\n        title: this.props.intl.formatMessage({\n          id: \"IDS_ADHOCPARAMETER\"\n        }),\n        controlname: \"faAdhocParameter\",\n        dataplace: \"left\",\n        hidden: this.state.userRoleControlRights.indexOf(adhocId) === -1,\n        onClick: this.adhocTestParameter,\n        objectName: \"test\",\n        inputData: {\n          masterData: this.props.Login.masterData,\n          userInfo: this.props.Login.userInfo,\n          adhocId\n        }\n      }, {\n        title: this.props.intl.formatMessage({\n          id: \"IDS_EDITMETHODSSOURCE\"\n        }),\n        controlname: \"faPencilAlt\",\n        dataplace: \"left\",\n        hidden: this.state.userRoleControlRights.indexOf(editSourceMethodId) === -1,\n        onClick: this.testMethodSourceEdit,\n        objectName: \"test\",\n        inputData: {\n          masterData: this.props.Login.masterData,\n          userInfo: this.props.Login.userInfo,\n          editSourceMethodId\n        }\n      }, {\n        title: this.props.intl.formatMessage({\n          id: \"IDS_ADDINSTRUMENT\"\n        }),\n        controlname: \"faMicroscope\",\n        hidden: false,\n        onClick: this.addREInstrument,\n        objectName: \"test\",\n        inputData: {\n          masterData: this.props.Login.masterData,\n          userInfo: this.props.Login.userInfo,\n          addResultUsedInstrumentId\n        }\n      }, {\n        title: this.props.intl.formatMessage({\n          id: \"IDS_ADDMATERIAL\"\n        }),\n        controlname: \"faFlask\",\n        hidden: false,\n        onClick: this.props.addREMaterial,\n        objectName: \"test\",\n        inputData: {\n          masterData: this.props.Login.masterData,\n          userInfo: this.props.Login.userInfo,\n          addResultUsedMaterailId\n        }\n      } // { title: \"Add Task\", controlname: \"faTasks\", hidden: this.state.userRoleControlRights.indexOf(addResultUsedTaskId) === -1, onClick: this.addResultEntryTask, objectName: \"test\", inputData: { addResultUsedTaskId } }\n      ],\n      commonActions:\n      /*#__PURE__*/\n      // <Tooltip position=\"bottom\" anchorElement=\"target\" openDelay={100} parentTitle={true}>\n      React.createElement(ProductList, {\n        className: \"d-flex justify-content-end icon-group-wrap\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 3142,\n          columnNumber: 29\n        }\n      }, testListRE.length > 0 ? /*#__PURE__*/React.createElement(React.Fragment, null, this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nneedtestinitiate ? /*#__PURE__*/React.createElement(FontIconWrap //  data-for=\"tooltip-common-wrap\" \n      , {\n        \"data-tip\": this.props.intl.formatMessage({\n          id: \"IDS_TESTSTART\"\n        }),\n        hidden: this.state.userRoleControlRights.indexOf(testStartId) === -1,\n        className: \"btn btn-circle outline-grey ml-2\",\n        role: \"button\",\n        onClick: () => this.testStartActions(testChildGetREParam, this.props.Login.masterData.RESelectedTest, this.props.Login.userInfo, testStartId, this.state.testskip, this.state.testtake),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 3152,\n          columnNumber: 45\n        }\n      }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n        icon: faPlay,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 3158,\n          columnNumber: 49\n        }\n      })) : \"\", /*#__PURE__*/React.createElement(Nav.Link, {\n        // data-for=\"tooltip-common-wrap\"\n        \"data-tip\": this.props.intl.formatMessage({\n          id: \"IDS_ENTERRESULT\"\n        }),\n        hidden: this.state.userRoleControlRights.indexOf(resultEnterId) === -1,\n        className: \"btn btn-circle outline-grey ml-2\",\n        role: \"button\",\n        onClick: () => this.props.resultGetModule(this.props.Login.masterData, this.props.Login.userInfo, resultEnterId, this.state.testskip, this.state.testtake),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 3164,\n          columnNumber: 41\n        }\n      }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n        icon: faAddressBook,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 3167,\n          columnNumber: 45\n        }\n      })), /*#__PURE__*/React.createElement(Nav.Link, {\n        // data-for=\"tooltip-common-wrap\" \n        \"data-tip\": this.props.intl.formatMessage({\n          id: \"IDS_FILLDEFAULTRESULT\"\n        }),\n        hidden: this.state.userRoleControlRights.indexOf(setDefaultId) === -1,\n        className: \"btn btn-circle outline-grey ml-2\",\n        role: \"button\",\n        onClick: () => this.defaultActions(testChildGetREParam, this.props.Login.masterData.RESelectedTest, this.props.Login.masterData.RESelectedSample, setDefaultId, this.state.testskip, this.state.testtake),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 3169,\n          columnNumber: 41\n        }\n      }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n        icon: faPencilRuler,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 3172,\n          columnNumber: 45\n        }\n      })), /*#__PURE__*/React.createElement(Nav.Link, {\n        // data-for=\"tooltip-common-wrap\"\n        \"data-tip\": this.props.intl.formatMessage({\n          id: \"IDS_COMPLETE\"\n        }),\n        hidden: this.state.userRoleControlRights.indexOf(completeResultId) === -1,\n        className: \"btn btn-circle outline-grey ml-2\",\n        role: \"button\",\n        onClick: () => this.completeActions(testChildGetREParam, this.props.Login.masterData.RESelectedTest, this.props.Login.userInfo, completeResultId, this.state.testskip, this.state.testtake),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 3174,\n          columnNumber: 41\n        }\n      }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n        icon: faCheckCircle,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 3177,\n          columnNumber: 45\n        }\n      })), /*#__PURE__*/React.createElement(Nav.Link, {\n        //data-for=\"tooltip-common-wrap\" \n        \"data-tip\": this.props.intl.formatMessage({\n          id: \"IDS_IMPORTRESULT\"\n        }),\n        hidden: true,\n        className: \"btn btn-circle outline-grey ml-2\",\n        role: \"button\",\n        onClick: () => this.resultImport(testChildGetREParam, this.props.Login.masterData.RESelectedTest, this.props.Login.userInfo, completeResultId, this.state.testskip, this.state.testtake),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 3179,\n          columnNumber: 41\n        }\n      }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n        icon: faFileImport,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 3182,\n          columnNumber: 45\n        }\n      }))) : \"\") // </Tooltip>\n      ,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3078,\n        columnNumber: 21\n      }\n    }))));\n    let mainDesign = \"\";\n\n    if (this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nneedsubsample) {\n      mainDesign = /*#__PURE__*/React.createElement(SplitterLayout, {\n        borderColor: \"#999\",\n        primaryIndex: 1,\n        percentage: true,\n        secondaryInitialSize: this.state.splitChangeWidthPercentage,\n        onSecondaryPaneSizeChange: this.paneSizeChange,\n        primaryMinSize: 40,\n        secondaryMinSize: 30,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 3198,\n          columnNumber: 26\n        }\n      }, /*#__PURE__*/React.createElement(Card, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 3205,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(Card.Header, {\n        style: {\n          borderBottom: \"0px\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 3206,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        style: {\n          display: \"inline-block\",\n          marginTop: \"1%\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 3207,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(\"h4\", {\n        className: \"card-title\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 3208,\n          columnNumber: 29\n        }\n      }, this.props.intl.formatMessage({\n        id: \"IDS_SUBSAMPLE\"\n      })))), /*#__PURE__*/React.createElement(Card.Body, {\n        className: \"p-0 sm-pager\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 3211,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(TransactionListMasterJson, {\n        cardHead: 94 //paneHeight={this.state.initialVerticalWidth}\n        ,\n        masterList: this.props.Login.masterData.searchedSubSample || subSampleListRE,\n        selectedMaster: this.props.Login.masterData.RESelectedSubSample,\n        primaryKeyField: \"ntransactionsamplecode\",\n        getMasterDetail: this.props.getTestREDetail,\n        inputParam: testGetREParam,\n        additionalParam: [],\n        mainField: \"ssamplearno\",\n        selectedListName: \"RESelectedSubSample\",\n        objectName: \"subSample\",\n        listName: \"IDS_SUBSAMPLE\",\n        jsonField: 'jsondata',\n        jsonDesignFields: true,\n        subFields: this.state.DynamicSubSampleColumns,\n        moreField: this.state.subSampleMoreField,\n        needValidation: false,\n        needMultiSelect: true,\n        needFilter: false,\n        skip: this.state.subSampleSkip,\n        take: this.state.subSampleTake,\n        pageSize: this.props.Login.settings && this.props.Login.settings[13].split(\",\").map(setting => parseInt(setting)),\n        handlePageChange: this.handleSubSamplePageChange,\n        showStatusLink: true,\n        showStatusName: false,\n        selectionList: this.state.selectedFilter,\n        statusFieldName: \"stransdisplaystatus\",\n        statusField: \"ntransactionstatus\",\n        selectionFieldName: \"sfilterstatus\",\n        selectionField: \"ntransactionstatus\",\n        childTabsKey: [\"RE_TEST\", \"Registration\", \"RegistrationSampleComment\", \"RegistrationSampleAttachment\"],\n        filterColumnData: this.props.filterTransactionList,\n        searchListName: \"searchedSubSample\",\n        searchRef: this.searchSubSampleRef,\n        filterParam: filterSubSampleParam,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 3212,\n          columnNumber: 25\n        }\n      }))), testDesign);\n    } else {\n      mainDesign = testDesign;\n    }\n\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(ListWrapper, {\n      className: \"client-listing-wrap toolbar-top-wrap mtop-4 screen-height-window\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3261,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(BreadcrumbComponent, {\n      breadCrumbItem: this.breadCrumbData,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3262,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(Row, {\n      noGutters: true,\n      bsPrefix: \"toolbar-top\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3263,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      className: \"parent-port-height\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3265,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(ListWrapper, {\n      className: `vertical-tab-top ${this.state.enablePropertyPopup ? 'active-popup' : \"\"}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3266,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: `tab-left-area ${this.state.activeTabIndex ? 'active' : \"\"} ${this.state.enablePropertyPopup ? 'active-popup' : \"\"}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3267,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(SplitterLayout, {\n      borderColor: \"#999\",\n      percentage: true,\n      primaryIndex: 1,\n      secondaryInitialSize: this.state.splitChangeWidthPercentage //onSecondaryPaneSizeChange={this.paneSizeChange} \n      ,\n      primaryMinSize: 40,\n      secondaryMinSize: 20,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3268,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"toolbar-top-inner\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3272,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(TransactionListMasterJsonView, {\n      clickIconGroup: true // paneHeight={this.state.parentHeight}\n      ,\n      splitChangeWidthPercentage: this.state.splitChangeWidthPercentage,\n      masterList: this.props.Login.masterData.searchedSample || sampleListRE,\n      selectedMaster: this.props.Login.masterData.RESelectedSample,\n      primaryKeyField: \"npreregno\",\n      getMasterDetail: this.props.getsubSampleREDetail,\n      inputParam: subSampleGetREParam,\n      additionalParam: ['napprovalversioncode'],\n      mainField: \"sarno\",\n      selectedListName: \"RESelectedSample\",\n      objectName: \"sample\",\n      listName: \"IDS_SAMPLE\",\n      needValidation: false,\n      validationKey: \"napprovalversioncode\",\n      validationFailMsg: \"IDS_SELECTSAMPLESOFSAMPLEAPPROVALVERSION\",\n      subFields: this.state.DynamicSampleColumns || [],\n      moreField: this.state.sampleMoreField,\n      needFilter: true,\n      needMultiSelect: true,\n      showFilter: this.props.Login.showFilter,\n      closeFilter: this.closeFilter,\n      onFilterSubmit: this.onREFilterSubmit,\n      filterColumnData: this.props.filterTransactionList,\n      searchListName: \"searchedSample\",\n      searchRef: this.searchSampleRef,\n      handlePageChange: this.handlePageChange,\n      filterParam: filterSampleParam,\n      skip: this.state.skip,\n      take: this.state.take,\n      hidePaging: false,\n      showStatusLink: true,\n      showStatusName: true,\n      statusFieldName: \"stransdisplaystatus\",\n      statusField: \"ntransactionstatus\" //splitModeClass={this.state.splitChangeWidthPercentage && this.state.splitChangeWidthPercentage > 50 ? 'split-mode' : this.state.splitChangeWidthPercentage > 40 ? 'split-md' : ''}\n      ,\n      childTabsKey: [\"RegistrationAttachment\", \"RE_SUBSAMPLE\", \"RE_TEST\", \"SampleApprovalHistory\", \"RegistrationComment\"],\n      selectionList: this.state.selectedFilter,\n      selectionColorField: \"scolorhexcode\",\n      selectionFieldName: \"sfilterstatus\",\n      selectionField: \"ntransactionstatus\",\n      jsonField: 'jsondata',\n      jsonDesignFields: true,\n      filterComponent: [{\n        \"Sample Filter\": /*#__PURE__*/React.createElement(ResultEntryFilter, {\n          fromDate: this.props.Login.masterData.fromDate ? //new Date(this.props.Login.masterData.fromDate) \n          rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.fromDate) : new Date(),\n          toDate: this.props.Login.masterData.toDate ? //new Date(this.props.Login.masterData.toDate) \n          rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.toDate) : new Date(),\n          SampleType: this.state.SampleType || [],\n          SampleTypeValue: this.props.Login.masterData.defaultSampleType || [],\n          RegType: this.state.RegistrationType || [],\n          RegTypeValue: this.props.Login.masterData.defaultRegistrationType || [],\n          RegSubType: this.state.RegistrationSubType || [],\n          RegSubTypeValue: this.props.Login.masterData.defaultRegistrationSubType || [],\n          DesignTemplateMappingValue: this.props.Login.masterData.DesignTemplateMappingValue || [],\n          FilterStatus: this.state.REFilterStatus || [],\n          FilterStatusValue: this.props.Login.masterData.defaultFilterStatus || [],\n          ApprovalVersion: this.state.ApprovalConfigVersion || [],\n          ApprovalVersionValue: this.props.Login.masterData.defaultApprovalConfigVersion || [],\n          REJobStatus: this.state.REJobStatus || [],\n          JobStatusValue: this.props.Login.masterData.defaultjobstatus || [],\n          Test: this.state.Testvalues || [],\n          Batch: this.state.Batchvalues || [],\n          BatchValue: this.props.Login.masterData.defaultBatchvalue || [],\n          Worklist: this.state.Worklistvalues || [],\n          WorklistValue: this.props.Login.masterData.defaultWorklistvalue || [],\n          TestValue: this.props.Login.masterData.defaultTestvalues || [],\n          ConfigurationFilter: this.state.ConfigurationFilterValues || [],\n          ConfigurationFilterValue: this.props.Login.masterData.defaultConfigurationFilterValue || [],\n          onFilterComboChange: this.onFilterComboChange,\n          handleDateChange: this.handleDateChange,\n          userInfo: this.props.Login.userInfo,\n          onDesignTemplateChange: this.onDesignTemplateChange,\n          DynamicDesignMapping: this.state.stateDynamicDesign || [],\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 3319,\n            columnNumber: 74\n          }\n        })\n      }],\n      actionIcons: [this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue.nregtypecode === RegistrationType.PLASMA_POOL ? {\n        title: \"Report\",\n        controlname: \"reports\",\n        objectName: \"sample\",\n        hidden: this.state.userRoleControlRights.indexOf(reportPreviewId) === -1,\n        onClick: this.props.previewSampleReport,\n        inputData: {\n          userinfo: this.props.Login.userInfo,\n          ncontrolcode: reportPreviewId\n        }\n      } : {}],\n      commonActions: /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(ProductList, {\n        className: \"d-flex product-category float-right icon-group-wrap\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 3372,\n          columnNumber: 57\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        className: \"btn btn-circle outline-grey ml-2\",\n        variant: \"link\",\n        onClick: () => this.onReload(),\n        \"data-for\": \"tooltip-common-wrap\",\n        \"data-tip\": this.props.intl.formatMessage({\n          id: \"IDS_REFRESH\"\n        }),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 3373,\n          columnNumber: 61\n        }\n      }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n        icon: faSync,\n        style: {\n          \"width\": \"0.6!important\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 3377,\n          columnNumber: 65\n        }\n      })))),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3273,\n        columnNumber: 45\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3384,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      style: this.state.showTest === true ? {\n        display: \"block\",\n        background: \"#FFFF\"\n      } : {\n        display: \"none\",\n        background: \"#FFFF\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3385,\n        columnNumber: 45\n      }\n    }, mainDesign)))), /*#__PURE__*/React.createElement(\"div\", {\n      className: `${this.state.enablePropertyPopup ? 'active-popup' : \"\"} vertical-tab ${this.state.activeTabIndex ? 'active' : \"\"}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3393,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: `${this.state.enablePropertyPopup ? 'active-popup' : \"\"} vertical-tab-content pager_wrap wrap-class ${this.state.activeTabIndex ? 'active' : \"\"}`,\n      style: {\n        width: this.state.enablePropertyPopup ? this.state.propertyPopupWidth + '%' : \"\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3394,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      className: ` vertical-tab-close ${this.state.activeTabIndex ? 'active' : \"\"}`,\n      onClick: () => this.changePropertyViewClose(false),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3395,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faChevronRight,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3395,\n        columnNumber: 178\n      }\n    }), \" \"), /*#__PURE__*/React.createElement(\"div\", {\n      className: ` vertical-tab-content-common sm-view-v-t  ${this.state.activeTabIndex && this.state.activeTabIndex == 1 ? 'active' : \"\"}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3396,\n        columnNumber: 41\n      }\n    }, this.state.activeTabIndex && this.state.activeTabIndex == 1 ? this.sideNavDetail(\"IDS_RESULTS\") : \"\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: ` vertical-tab-content-grid  ${this.state.activeTabIndex && this.state.activeTabIndex == 2 ? 'active' : \"\"}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3399,\n        columnNumber: 41\n      }\n    }, this.state.activeTabIndex && this.state.activeTabIndex == 2 ? this.sideNavDetail(\"IDS_ATTACHMENTS\") : \"\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: ` vertical-tab-content-grid-tab  ${this.state.activeTabIndex && this.state.activeTabIndex == 3 ? 'active' : \"\"}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3402,\n        columnNumber: 41\n      }\n    }, this.state.activeTabIndex && this.state.activeTabIndex == 3 ? this.sideNavDetail(\"IDS_COMMENTS\") : \"\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: ` vertical-tab-content-grid  ${this.state.activeTabIndex && this.state.activeTabIndex == 4 ? 'active' : \"\"}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3405,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(\"h4\", {\n      className: \"inner_h4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3406,\n        columnNumber: 45\n      }\n    }, this.props.intl.formatMessage({\n      id: \"IDS_INSTRUMENT\"\n    })), this.state.activeTabIndex && this.state.activeTabIndex == 4 ? this.sideNavDetail(\"IDS_INSTRUMENT\") : \"\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: ` vertical-tab-content-comments vertical-tab-content-common ${this.state.activeTabIndex && this.state.activeTabIndex == 5 ? 'active' : \"\"}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3411,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(\"h4\", {\n      className: \"inner_h4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3412,\n        columnNumber: 45\n      }\n    }, this.props.intl.formatMessage({\n      id: \"IDS_MATERIAL\"\n    })), this.state.activeTabIndex && this.state.activeTabIndex == 5 ? this.sideNavDetail(\"IDS_MATERIAL\") : \"\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: ` vertical-tab-content-comments vertical-tab-content-common ${this.state.activeTabIndex && this.state.activeTabIndex == 6 ? 'active' : \"\"}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3417,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(\"h4\", {\n      className: \"inner_h4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3418,\n        columnNumber: 45\n      }\n    }, this.props.intl.formatMessage({\n      id: \"IDS_TASK\"\n    })), this.state.activeTabIndex && this.state.activeTabIndex == 6 ? this.sideNavDetail(\"IDS_TASK\") : \"\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: ` vertical-tab-content-comments vertical-tab-content-common ${this.state.activeTabIndex && this.state.activeTabIndex == 7 ? 'active' : \"\"}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3423,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(\"h4\", {\n      className: \"inner_h4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3424,\n        columnNumber: 45\n      }\n    }, this.props.intl.formatMessage({\n      id: \"IDS_TESTAPPROVALHISTORY\"\n    })), this.state.activeTabIndex && this.state.activeTabIndex == 7 ? this.sideNavDetail(\"IDS_TESTAPPROVALHISTORY\") : \"\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: ` vertical-tab-content-comments vertical-tab-content-common ${this.state.activeTabIndex && this.state.activeTabIndex == 8 ? 'active' : \"\"}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3429,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(\"h4\", {\n      className: \"inner_h4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3430,\n        columnNumber: 45\n      }\n    }, this.props.intl.formatMessage({\n      id: \"IDS_SAMPLEDETAILS\"\n    })), this.state.activeTabIndex && this.state.activeTabIndex == 8 ? this.sideNavDetail(\"IDS_SAMPLEDETAILS\") : \"\")), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"tab-head\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3436,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(\"ul\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3437,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(\"li\", {\n      className: `${this.state.activeTabIndex && this.state.activeTabIndex == 1 ? 'active' : \"\"}`,\n      onClick: () => this.changePropertyView(1, \"IDS_RESULTS\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3438,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faFileInvoice,\n      \"data-for\": \"tooltip-common-wrap\",\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_RESULT\"\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3439,\n        columnNumber: 49\n      }\n    }), /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3442,\n        columnNumber: 49\n      }\n    }, this.props.intl.formatMessage({\n      id: \"IDS_RESULT\"\n    }))), /*#__PURE__*/React.createElement(\"li\", {\n      className: `${this.state.activeTabIndex && this.state.activeTabIndex == 2 ? 'active' : \"\"}`,\n      onClick: () => this.changePropertyView(2, \"IDS_ATTACHMENTS\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3446,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faLink,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3447,\n        columnNumber: 49\n      }\n    }), /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3448,\n        columnNumber: 49\n      }\n    }, this.props.intl.formatMessage({\n      id: \"IDS_ATTACHMENTS\"\n    }))), /*#__PURE__*/React.createElement(\"li\", {\n      className: `${this.state.activeTabIndex && this.state.activeTabIndex == 3 ? 'active' : \"\"}`,\n      onClick: () => this.changePropertyView(3, \"IDS_COMMENTS\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3452,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faComments,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3453,\n        columnNumber: 49\n      }\n    }), /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3454,\n        columnNumber: 49\n      }\n    }, this.props.intl.formatMessage({\n      id: \"IDS_COMMENTS\"\n    }))), /*#__PURE__*/React.createElement(\"li\", {\n      className: `${this.state.activeTabIndex && this.state.activeTabIndex == 4 ? 'active' : \"\"}`,\n      onClick: () => this.changePropertyView(4, \"IDS_INSTRUMENT\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3458,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faMicroscope,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3459,\n        columnNumber: 49\n      }\n    }), /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3460,\n        columnNumber: 49\n      }\n    }, this.props.intl.formatMessage({\n      id: \"IDS_INSTRUMENT\"\n    }))), /*#__PURE__*/React.createElement(\"li\", {\n      className: `${this.state.activeTabIndex && this.state.activeTabIndex == 5 ? 'active' : \"\"}`,\n      onClick: () => this.changePropertyView(5, \"IDS_MATERIAL\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3464,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faFlask,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3465,\n        columnNumber: 49\n      }\n    }), /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3466,\n        columnNumber: 49\n      }\n    }, this.props.intl.formatMessage({\n      id: \"IDS_MATERIAL\"\n    }))), /*#__PURE__*/React.createElement(\"li\", {\n      className: `${this.state.activeTabIndex && this.state.activeTabIndex == 6 ? 'active' : \"\"}`,\n      onClick: () => this.changePropertyView(6, \"IDS_TASK\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3470,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faCommentDots,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3471,\n        columnNumber: 49\n      }\n    }), /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3472,\n        columnNumber: 49\n      }\n    }, this.props.intl.formatMessage({\n      id: \"IDS_TASK\"\n    }))), /*#__PURE__*/React.createElement(\"li\", {\n      className: `${this.state.activeTabIndex && this.state.activeTabIndex == 8 ? 'active' : \"\"}`,\n      onClick: () => this.changePropertyView(8, \"IDS_SAMPLEDETAILS\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3482,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faEye,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3483,\n        columnNumber: 49\n      }\n    }), /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3484,\n        columnNumber: 49\n      }\n    }, this.props.intl.formatMessage({\n      id: \"IDS_SAMPLEDETAILS\"\n    })))), /*#__PURE__*/React.createElement(\"span\", {\n      className: \"tab-click-toggle-btn\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3489,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(CustomSwitch // label={\"Auto Show\"}\n    , {\n      label: this.props.intl.formatMessage({\n        id: \"IDS_AUTOSHOW\"\n      }),\n      type: \"switch\",\n      name: \"Auto Click\",\n      onChange: event => this.onInputSwitchOnChange(event),\n      defaultValue: this.state.enableAutoClick,\n      isMandatory: false,\n      required: true,\n      checked: this.state.enableAutoClick,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3490,\n        columnNumber: 45\n      }\n    })), /*#__PURE__*/React.createElement(\"span\", {\n      className: \"tab-click-toggle-btn\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3502,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(CustomSwitch // label={\"Popup Nav\"}\n    , {\n      label: this.props.intl.formatMessage({\n        id: \"IDS_POPUPNAV\"\n      }),\n      type: \"switch\",\n      name: \"PopupNav\",\n      onChange: event => this.onInputSwitchOnChange(event),\n      defaultValue: this.state.enablePropertyPopup,\n      isMandatory: false,\n      required: true,\n      checked: this.state.enablePropertyPopup,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3503,\n        columnNumber: 45\n      }\n    })))))))), /*#__PURE__*/React.createElement(PortalModal, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3524,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3525,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Modal, {\n      centered: true,\n      scrollable: true,\n      bsPrefix: \"model model_zindex\",\n      show: this.props.Login.openELNSheet,\n      onHide: this.openClosePortal,\n      dialogClassName: `${this.props.nflag && this.props.nflag === 2 ? 'alert-popup' : ''} modal-fullscreen`,\n      backdrop: \"static\",\n      keyboard: false,\n      enforceFocus: false,\n      \"aria-labelledby\": \"example-custom-modal-styling-title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3526,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Modal.Header, {\n      closeButton: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3538,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Modal.Title, {\n      style: {\n        \"line-height\": \"1.0\"\n      },\n      id: \"example-custom-modal-styling-title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3539,\n        columnNumber: 33\n      }\n    }, this.props.intl.formatMessage({\n      id: \"IDS_ELNSHEET\"\n    })), /*#__PURE__*/React.createElement(ReactTooltip, {\n      globalEventOff: \"true\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3542,\n        columnNumber: 33\n      }\n    })), /*#__PURE__*/React.createElement(Modal.Body, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3545,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"modal-inner-content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3546,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(Iframe, {\n      url: this.props.Login.enlLink,\n      width: \"98%\",\n      height: \"1000px\",\n      id: \"reportviewID\",\n      className: \"reportview\" //display=\"initial\"\n      /// position=\"relative\" \n      ,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3547,\n        columnNumber: 37\n      }\n    })))))), /*#__PURE__*/React.createElement(ModalShow, {\n      modalShow: this.props.Login.showAlertGrid,\n      modalTitle: this.props.Login.showAlertForPredefined || this.props.Login.additionalInfoView ? this.props.intl.formatMessage({\n        id: \"IDS_ADDITIONALINFOREQURIED\"\n      }) //this.props.Login.onlyAlertMsgAvailable?\"Alert\":this.props.Login.masterData['salertmessage']\n      : this.props.intl.formatMessage({\n        id: \"IDS_COMPLETETHEFOLLOWINGTESTS\"\n      }) //  needCloseButton={this.props.Login.showAlertForPredefined||this.props.Login.additionalInfoView?true:false}\n      ,\n      closeModal: this.closeModalShow,\n      onSaveClick: this.onModalSave,\n      removeCancel: this.props.Login.showAlertForPredefined || this.props.Login.additionalInfoView ? true : false,\n      needSubmit: this.props.Login.showAlertForPredefined || this.props.Login.additionalInfoView ? true : false,\n      needSave: this.props.Login.showAlertForPredefined || this.props.Login.additionalInfoView ? \"\" : true,\n      selectedRecord: this.state.selectedRecord || {} // mandatoryFields={this.props.Login.showAlertForPredefined||this.props.Login.additionalInfoView?\n      //     this.mandatoryFieldsForAdditionalInfo():\"\"}\n      ,\n      size: this.props.Login.showAlertForPredefined || this.props.Login.additionalInfoView ? \"\" : 'lg',\n      showAlertMsg: this.props.Login.showAlertForPredefined ? true : false,\n      modalBody: this.props.Login.additionalInfoView ? this.state.selectedRecord['additionalResultData'] : this.props.Login.showAlertForPredefined ? /*#__PURE__*/React.createElement(ResultEntryPredefinedComments, {\n        onlyAlertMsgAvailable: this.props.Login.onlyAlertMsgAvailable,\n        salertmessage: this.props.Login.masterData['salertmessage'],\n        showMultiSelectCombo: this.props.Login.showMultiSelectCombo,\n        testgrouptestpredefsubresultOptions: this.props.Login.masterData.testgrouptestpredefsubresultOptions || [],\n        selectedRecord: this.state.selectedRecord || {},\n        onInputChange: this.onInputChange,\n        onComboChange: this.onComboChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 3580,\n          columnNumber: 24\n        }\n      }) : /*#__PURE__*/React.createElement(CustomTabs, {\n        tabDetail: this.tabAlertRulesEngine(),\n        onTabChange: this.onTabChangeRulesEngine,\n        destroyInactiveTabPane: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 3589,\n          columnNumber: 25\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3561,\n        columnNumber: 17\n      }\n    }), this.props.Login.openModal ? /*#__PURE__*/React.createElement(SlideOutModal, {\n      show: this.props.Login.openModal,\n      size: this.props.Login.screenName === 'IDS_MEANPARAMETER' ? \"xl\" : \"lg\",\n      closeModal: this.closeModal,\n      showCalculate: this.props.Login.screenName === 'IDS_RESULTFORMULA' ? true : false,\n      operation: // this.props.Login.screenName === 'IDS_RESULTPARAMETERCOMMENTS'?\"\":\n      this.props.Login.screenName === 'IDS_RESULTENTRY' || this.props.Login.screenName === 'IDS_ENFORCERESULT' ? \"\" : this.props.Login.operation,\n      inputParam: this.props.Login.inputParam,\n      screenName: this.props.Login.screenName,\n      selectedRecord: this.props.Login.screenName === 'IDS_RESULTFORMULA' ? this.state.selectedRecord.selectedMandatory : this.state.selectedRecord || {},\n      mandatoryFields: this.props.Login.screenName === 'IDS_INSTRUMENT' ? mandatoryFieldsInstrument : this.props.Login.screenName === 'IDS_TASK' ? mandatoryFieldsTask : this.props.Login.screenName === 'IDS_TESTMETHODSOURCE' ? mandatoryFieldsTestMethodSource : this.props.Login.screenName === 'IDS_PARAMETERCOMMENTS' ? mandatoryFieldsParameter : this.props.Login.screenName === 'IDS_RESULTFORMULA' ? validateFormulaMandyFields : this.props.Login.screenName === 'IDS_ENFORCERESULT' ? mandatoryEnforceResult : [],\n      esign: this.props.Login.loadEsign,\n      innerPopup: this.props.Login.screenName,\n      validateEsign: this.validateEsign,\n      onSaveClick: this.props.Login.showValidate ? this.calculateFormula : this.props.Login.screenName === 'IDS_RESULTIMPORTFILE' ? this.onSaveFileClick : this.props.Login.screenName === 'IDS_ADHOCPARAMETER' ? this.onSaveClickAdhocParam : this.onSaveClick,\n      showValidate: this.props.Login.screenName === 'IDS_RESULTFORMULA' ? false : this.props.Login.showValidate,\n      modalEvent: this.state.modalEvent,\n      addComponent: this.props.Login.loadEsign ? /*#__PURE__*/React.createElement(Esign, {\n        operation: this.props.Login.operation,\n        onInputOnChange: this.onEsignInputOnChange,\n        inputParam: this.props.Login.inputParam,\n        selectedRecord: this.state.selectedRecord || {},\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 3630,\n          columnNumber: 29\n        }\n      }) : this.props.Login.screenName === 'IDS_RESULTENTRY' ? /*#__PURE__*/React.createElement(ResultEntryForm, {\n        predefinedValues: this.props.Login.masterData.PredefinedValues,\n        defaultPredefinedValues: this.props.Login.masterData.PredefinedValues,\n        gradeValues: this.props.Login.masterData.GradeValues || [],\n        selectedNumericData: this.props.Login.masterData.selectedNumericData,\n        selectedResultGrade: this.state.selectedRecord.selectedResultGrade || [],\n        paremterResultcode: this.props.Login.masterData.paremterResultcode || [],\n        parameterResults: this.state.selectedRecord.ResultParameter || [],\n        Login: this.props.Login,\n        handleClose: this.handleClose,\n        onSaveClick: this.onSaveClick,\n        onResultInputChange: this.onResultInputChange,\n        onGradeEvent: this.onGradeEvent,\n        getFormula: this.getFormula,\n        onDropTestFile: this.onDropTestFile,\n        onKeyPress: this.onKeyPress,\n        deleteAttachmentParamFile: this.deleteAttachmentParameterFile,\n        viewAdditionalInfo: this.viewAdditionalInfo,\n        needSubSample: this.props.Login.masterData.realRegSubTypeValue.nneedsubsample,\n        intl: this.props.intl,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 3637,\n          columnNumber: 33\n        }\n      }) : this.props.Login.screenName === 'IDS_TESTMETHODSOURCE' ? /*#__PURE__*/React.createElement(TestEditForm, {\n        methodValues: this.props.Login.masterData.MethodData,\n        sourceValues: this.props.Login.masterData.SourceData,\n        selecteRecord: this.state.selectedRecord || {},\n        onComboChange: this.onComboChange,\n        handleClose: this.handleClose,\n        onSaveClick: this.onSaveClick,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 3659,\n          columnNumber: 37\n        }\n      }) : this.props.Login.screenName === 'IDS_INSTRUMENT' ? /*#__PURE__*/React.createElement(ResultEntryInstrumentForm, {\n        instrumentcatValue: this.props.Login.masterData.InstrumentCategory,\n        instrumentValue: this.props.Login.masterData.Instrument,\n        selecteRecord: this.state.selectedRecord || {},\n        timeZoneListData: this.props.Login.timeZoneList || [],\n        onComboChange: this.onComboChange,\n        onComboCategoryChange: this.onComboCategoryChange,\n        onDateChange: this.onDateChange,\n        handleClose: this.handleClose,\n        onSaveClick: this.onSaveClick,\n        userInfo: this.props.Login.userInfo,\n        needSubSample: this.props.Login.masterData.realRegSubTypeValue.nneedsubsample,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 3668,\n          columnNumber: 41\n        }\n      }) : this.props.Login.screenName === 'IDS_MATERIAL' ? /*#__PURE__*/React.createElement(ResultEntryMaterialForm, {\n        materialType: this.props.Login.materialType,\n        materialCategory: this.props.Login.materialCat,\n        material: this.props.Login.material,\n        materialInventory: this.props.Login.materialInventory,\n        selectedRecord: this.state.selectedRecord || {},\n        onMaterialComboChange: this.onMaterialComboChange,\n        onInputOnChange: this.onInputOnChange,\n        onDateChange: this.onDateChange,\n        handleClose: this.handleClose,\n        onSaveClick: this.onSaveClick,\n        userInfo: this.props.Login.userInfo,\n        needSubSample: this.props.Login.masterData.realRegSubTypeValue.nneedsubsample,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 3682,\n          columnNumber: 45\n        }\n      }) : this.props.Login.screenName === 'IDS_TASK' ? /*#__PURE__*/React.createElement(ResultEntryTaskForm, {\n        selecteRecord: this.state.selectedRecord || {},\n        onNumericChange: this.onNumericChange,\n        onInputChange: this.onInputChange,\n        handleClose: this.handleClose,\n        onSaveClick: this.onSaveClick,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 3697,\n          columnNumber: 49\n        }\n      }) : this.props.Login.screenName === 'IDS_PARAMETERCOMMENTS' ? /*#__PURE__*/React.createElement(ResultEntryParamCommetsForm, {\n        selecteRecord: this.state.selectedRecord || {},\n        onInputChange: this.onInputChange,\n        handleClose: this.handleClose,\n        onSaveClick: this.onSaveClick,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 3705,\n          columnNumber: 53\n        }\n      }) : this.props.Login.screenName === 'IDS_RESULTFORMULA' ? /*#__PURE__*/React.createElement(ResultEntryFormulaForm, {\n        DynamicFields: this.props.Login.masterData.DynamicFormulaFields // formRef={this.formRef}\n        ,\n        masterData: this.props.Login.masterData,\n        handleClose: this.handleClose,\n        screenName: this.props.Login.screenName,\n        selectedForumulaInput: this.state.selectedForumulaInput || [],\n        onFormulaInputChange: this.onFormulaInputChange,\n        getAverageResult: this.getAverageResult,\n        Login: this.props.Login,\n        showValidate: this.props.Login.showValidate,\n        selectedRecord: this.state.selectedRecord || {},\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 3711,\n          columnNumber: 57\n        }\n      }) : this.props.Login.screenName === 'IDS_RESULTIMPORTFILE' ? /*#__PURE__*/React.createElement(ResultEntryImport, {\n        handleClose: this.handleClose,\n        screenName: this.props.Login.screenName,\n        onDropFile: this.onDropFile,\n        selectedImportFile: this.props.Login.masterData.selectedImportFile || {},\n        deleteAttachment: this.deleteAttachment,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 3725,\n          columnNumber: 61\n        }\n      }) : this.props.Login.screenName === 'IDS_MEANPARAMETER' ? /*#__PURE__*/React.createElement(ResultEntryMean // onInputOnChange={this.onMeanInputOnChange}\n      // onComboChange={this.onMeanComboChange}\n      , {\n        screenName: this.props.Login.screenName,\n        headerSelectionChange: this.headerSelectionChange,\n        selectionChange: this.selectionChange,\n        selectAll: this.state.selectAll,\n        testMean: this.state.testMean,\n        meanTestParameterList: this.state.meanTestParameterList || [],\n        selectedTestParam: this.state.selectedTestParam,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 3733,\n          columnNumber: 65\n        }\n      }) : this.props.Login.screenName === 'IDS_RESULTPARAMETERCOMMENTS' ? /*#__PURE__*/React.createElement(ResultEntryPredefinedComments, {\n        selectedRecord: this.state.selectedRecord || {},\n        onInputChange: this.onInputChange,\n        onComboChange: this.onComboChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 3745,\n          columnNumber: 65\n        }\n      }) : this.props.Login.screenName === 'IDS_ENFORCERESULT' ? /*#__PURE__*/React.createElement(ResultEntryEnforceResult, {\n        selectedRecord: this.state.selectedRecord || {},\n        GradeList: this.props.Login.masterData.GradeList && this.props.Login.masterData.GradeList,\n        onInputChange: this.onInputChange,\n        onComboChange: this.onComboChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 3751,\n          columnNumber: 66\n        }\n      }) : this.props.Login.screenName === 'IDS_ADHOCPARAMETER' ? /*#__PURE__*/React.createElement(AddAdhocParameter, {\n        selectedRecord: this.state.selectedRecord || {},\n        onInputOnChange: this.onInputOnChange,\n        onComboChange: this.onComboChange,\n        adhocParamter: this.props.Login.masterData.AdhocParamter || {} //operation={this.props.operation}\n        ,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 3759,\n          columnNumber: 66\n        }\n      }) : \"\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3594,\n        columnNumber: 17\n      }\n    }) : \"\", this.props.Login.masterData.ChecklistData && this.props.Login.screenName === 'IDS_CHECKLISTRESULT' ? /*#__PURE__*/React.createElement(TemplateForm, {\n      templateData: this.props.Login.masterData.ChecklistData,\n      nregtypecode: parseInt(this.props.Login.masterData.realRegTypeValue.nregtypecode),\n      nregsubtypecode: parseInt(this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode),\n      needSaveButton: this.props.Login.needSaveButton,\n      formRef: this.formRef,\n      onTemplateInputChange: this.onTemplateInputChange,\n      handleClose: this.closeModal,\n      onTemplateComboChange: this.onTemplateComboChange,\n      screenName: this.props.Login.screenName,\n      onSaveClick: this.onSaveCheckList,\n      Login: this.props.Login,\n      viewScreen: this.props.Login.openTemplateModal,\n      selectedRecord: this.state.selectedRecord || [],\n      onTemplateDateChange: this.onTemplateDateChange,\n      needValidation: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3773,\n        columnNumber: 25\n      }\n    }) : \"\");\n  }\n\n  valiateCheckAll(data) {\n    let selectAll = true;\n\n    if (data && data.length > 0) {\n      data.forEach(dataItem => {\n        if (dataItem.selected) {\n          if (dataItem.selected === false) {\n            selectAll = false;\n          }\n        } else {\n          selectAll = false;\n        }\n      });\n    } else {\n      selectAll = false;\n    }\n\n    return selectAll;\n  }\n\n  updateTestMethodSource(inputData, masterData, ncontrolcode) {\n    let inputParam = {\n      inputData: { ...inputData,\n        'userinfo': this.props.Login.userInfo,\n        ncontrolcode\n      },\n      // formData: formData,\n      // isFileupload: true,\n      operation: \"createMethod\",\n      screenName: \"IDS_TESTMETHODSOURCE\",\n      displayName: this.props.Login.inputParam.displayName,\n      //, postParam,\n      //inputData1: inputData,\n      masterData: masterData\n    };\n\n    if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, ncontrolcode)) {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          loadEsign: true,\n          screenData: {\n            inputParam,\n            masterData: this.props.Login.masterData\n          },\n          openModal: true,\n          //screenName: \"completeaction\",\n          operation: \"createMethod\"\n        }\n      };\n      this.props.updateStore(updateInfo);\n    } else {\n      this.props.updateTestMethodSource(inputData, masterData);\n    }\n  }\n\n  updateParameterComments(inputData, masterData, ncontrolcode) {\n    // let inputData1 = { ...inputData, ncontrolcode }\n    const ndesigntemplatemappingcode = parseInt(this.props.Login.masterData.ndesigntemplatemappingcode && this.props.Login.masterData.ndesigntemplatemappingcode);\n    inputData = { ...inputData,\n      ndesigntemplatemappingcode: ndesigntemplatemappingcode\n    };\n    let inputParam = {\n      inputData: { ...inputData,\n        ncontrolcode,\n        'userinfo': this.props.Login.userInfo\n      },\n      operation: this.props.Login.operation,\n      screenName: \"IDS_RESULT\",\n      displayName: this.props.Login.inputParam.displayName,\n      //, postParam,\n      //inputData: inputData1,\n      masterData: masterData\n    };\n\n    if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, ncontrolcode)) {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          loadEsign: true,\n          screenData: {\n            inputParam,\n            masterData: this.props.Login.masterData\n          },\n          openModal: true,\n          //screenName: \"completeaction\",\n          operation: \"updateParameterComments\"\n        }\n      };\n      this.props.updateStore(updateInfo);\n    } else {\n      this.props.updateParameterComments(inputData, masterData);\n    }\n  }\n\n  gridfillingColumn(data) {\n    //  const tempArray = [];\n    const temparray = data && data.map(option => {\n      return {\n        \"idsName\": option[designProperties.LABEL][this.props.Login.userInfo.slanguagetypecode],\n        \"dataField\": option[designProperties.VALUE],\n        \"width\": \"200px\",\n        \"columnSize\": \"3\"\n      };\n    });\n    return temparray;\n  }\n\n  constructDesign(list) {\n    let newList = [];\n\n    if (list.length > 0) {\n      list.map(i => {\n        newList.push({\n          [designProperties.LABEL]: i,\n          [designProperties.VALUE]: i\n        });\n      });\n    }\n\n    return newList;\n  }\n\n  componentDidUpdate(previousProps) {\n    let {\n      showTest,\n      showSample,\n      userRoleControlRights,\n      controlMap,\n      resultDataState,\n      instrumentDataState,\n      materialDataState,\n      taskDataState,\n      documentDataState,\n      resultChangeDataState,\n      testCommentDataState,\n      historyDataState,\n      sampleListColumns,\n      subSampleListColumns,\n      testListColumns,\n      SingleItem,\n      sampleListMainField,\n      subSampleListMainField,\n      testListMainField,\n      SampleGridItem,\n      SampleGridExpandableItem,\n      sampleMoreField,\n      subSampleMoreField,\n      testMoreField,\n      selectedRecord,\n      SampleType,\n      RegistrationType,\n      RegistrationSubType,\n      REFilterStatus,\n      REJobStatus,\n      Testvalues,\n      ApprovalConfigVersion,\n      DynamicSampleColumns,\n      DynamicSubSampleColumns,\n      DynamicTestColumns,\n      DynamicGridItem,\n      DynamicGridMoreField,\n      validateFormulaMandyFields,\n      skip,\n      take,\n      testskip,\n      testtake,\n      selectedFilter,\n      stateDynamicDesign,\n      activeTabIndex,\n      activeTabId,\n      sampleChangeDataState,\n      testSearchField,\n      AdhocParamter,\n      Batchvalues,\n      Worklistvalues,\n      ConfigurationFilterValues\n    } = this.state;\n    let bool = false;\n\n    if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\n      userRoleControlRights = [];\n\n      if (this.props.Login.userRoleControlRights) {\n        bool = true;\n        this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item => userRoleControlRights.push(item.ncontrolcode));\n      }\n\n      controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode);\n    }\n\n    if (this.props.Login.masterData.DynamicDesign && this.props.Login.masterData.DynamicDesign !== previousProps.Login.masterData.DynamicDesign) {\n      const dynamicColumn = JSON.parse(this.props.Login.masterData.DynamicDesign.jsondata.value);\n      DynamicSampleColumns = dynamicColumn.samplelistitem ? dynamicColumn.samplelistitem : [];\n      DynamicSubSampleColumns = dynamicColumn.subsamplelistitem ? dynamicColumn.subsamplelistitem : [];\n      DynamicTestColumns = dynamicColumn.testlistitem ? dynamicColumn.testlistitem : [];\n      DynamicGridItem = dynamicColumn.samplegriditem ? dynamicColumn.samplegriditem : [];\n      DynamicGridMoreField = dynamicColumn.samplegridmoreitem ? dynamicColumn.samplegridmoreitem : [];\n      SingleItem = dynamicColumn.sampledisplayfields ? dynamicColumn.sampledisplayfields : []; // testMoreField = dynamicColumn.testlistmoreitems ? dynamicColumn.testlistmoreitems : [];\n      // testListColumns = dynamicColumn.testlistitem ? dynamicColumn.testlistitem : []\n\n      testMoreField = dynamicColumn.testListFields.testlistmoreitems ? dynamicColumn.testListFields.testlistmoreitems : [];\n      testListColumns = dynamicColumn.testListFields.testlistitem ? dynamicColumn.testListFields.testlistitem : [];\n      testSearchField = dynamicColumn.testListFields.testsearchfields ? dynamicColumn.testListFields.testsearchfields : [];\n      this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nneedsubsample && DynamicSubSampleColumns.push({\n        1: {\n          'en-US': 'Specimen',\n          'ru-RU': 'Образец',\n          'tg-TG': 'Намуна'\n        },\n        2: \"scomponentname\"\n      });\n      bool = true;\n    }\n\n    if (this.props.Login.masterData.RegistrationSubType && this.props.Login.masterData.RegistrationSubType !== previousProps.Login.masterData.RegistrationSubType) {\n      let dataState = {\n        skip: 0,\n        take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 //, group: [{ field: `${this.props.Login.masterData.nneedsubsample ? 'ssamplearno' : 'sarno'}` }] \n\n      };\n      bool = true;\n      resultDataState = dataState;\n      instrumentDataState = dataState;\n      materialDataState = dataState;\n      taskDataState = dataState;\n      documentDataState = dataState;\n      resultChangeDataState = dataState;\n      historyDataState = dataState;\n      testCommentDataState = dataState;\n      sampleChangeDataState = dataState;\n    }\n\n    if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\n      bool = true;\n      selectedRecord = this.props.Login.selectedRecord;\n    }\n\n    if (this.props.Login.validateFormulaMandyFields !== previousProps.Login.validateFormulaMandyFields) {\n      bool = true;\n      validateFormulaMandyFields = this.props.Login.validateFormulaMandyFields;\n    }\n\n    if (this.props.Login.masterData !== previousProps.Login.masterData) {\n      bool = true;\n      SampleType = constructOptionList(this.props.Login.masterData.SampleType || [], \"nsampletypecode\", \"ssampletypename\", 'nsampletypecode', 'ascending', 'nsampletypecode', false);\n      RegistrationType = constructOptionList(this.props.Login.masterData.RegistrationType || [], \"nregtypecode\", \"sregtypename\", \"nsorter\", 'ascending', 'nregtypecode', false);\n      RegistrationSubType = constructOptionList(this.props.Login.masterData.RegistrationSubType || [], \"nregsubtypecode\", \"sregsubtypename\", \"nsorter\", 'ascending', 'nregsubtypecode', false);\n      REFilterStatus = constructOptionList(this.props.Login.masterData.REFilterStatus || [], \"ntransactionstatus\", \"sfilterstatus\", \"nsorter\", 'ascending', \"ntransactionstatus\", false);\n      REJobStatus = constructOptionList(this.props.Login.masterData.REJobStatus || [], 'njobstatuscode', 'sidsjobstatusname', 'ascending', 'njobstatuscode', false);\n      Testvalues = constructOptionList(this.props.Login.masterData.Testvalues || [], 'ntestcode', 'stestsynonym', 'ascending', 'ntestcode', false);\n      Batchvalues = constructOptionList(this.props.Login.masterData.Batchvalues || [], 'nbatchmastercode', 'sbatcharno', 'ascending', 'nbatchmastercode', false);\n      Worklistvalues = constructOptionList(this.props.Login.masterData.Worklistvalues || [], 'nworklistcode', 'sworklistno', 'ascending', 'nworklistcode', false);\n      ConfigurationFilterValues = constructOptionList(this.props.Login.masterData.ConfigurationFilterValues || [], 'nconfigfiltercode', 'sfiltername', 'ascending', 'nconfigfiltercode', false);\n      ApprovalConfigVersion = constructOptionList(this.props.Login.masterData.ApprovalConfigVersion || [], 'napprovalconfigversioncode', 'sversionname', 'ascending', 'napprovalconfigversioncode', false); // AdhocParamter = constructOptionList(this.props.Login.masterData.AdhocParamter || [], 'ntestparametercode', 'sparametersynonym',\n      //     'ascending', 'ntestparametercode', false);\n\n      skip = this.props.Login.skip === undefined ? skip : this.props.Login.skip;\n      take = this.props.Login.take || take;\n      testskip = this.props.Login.testskip === undefined ? testskip : this.props.Login.testskip;\n      testtake = this.props.Login.testtake || testtake;\n\n      if (this.props.Login.resultDataState && this.props.Login.resultDataState !== previousProps.Login.resultDataState) {\n        resultDataState = this.props.Login.resultDataState;\n      }\n\n      if (this.props.Login.instrumentDataState && this.props.Login.instrumentDataState !== previousProps.Login.instrumentDataState) {\n        instrumentDataState = this.props.Login.instrumentDataState;\n      }\n\n      if (this.props.Login.taskDataState && this.props.Login.taskDataState !== previousProps.Login.taskDataState) {\n        taskDataState = this.props.Login.taskDataState;\n      }\n\n      if (this.props.Login.resultChangeDataState && this.props.Login.resultChangeDataState !== previousProps.Login.resultChangeDataState) {\n        resultChangeDataState = this.props.Login.resultChangeDataState;\n      }\n\n      if (this.props.Login.historyDataState && this.props.Login.historyDataState !== previousProps.Login.historyDataState) {\n        historyDataState = this.props.Login.historyDataState;\n      }\n\n      if (this.props.Login.testCommentDataState && this.props.Login.testCommentDataState !== previousProps.Login.testCommentDataState) {\n        testCommentDataState = this.props.Login.testCommentDataState;\n      }\n\n      if (this.props.Login.sampleChangeDataState && this.props.Login.sampleChangeDataState !== previousProps.Login.sampleChangeDataState) {\n        sampleChangeDataState = this.props.Login.sampleChangeDataState;\n      }\n\n      let selectFilterStatus = {\n        ntransactionstatus: transactionStatus.PARTIAL,\n        sfilterstatus: this.props.intl.formatMessage({\n          id: \"IDS_PARTIAL\"\n        }),\n        scolorhexcode: \"#800000\"\n      };\n      const selectedFilters = this.props.Login.masterData.REFilterStatus || [];\n      const selectedFiltersNew = JSON.parse(JSON.stringify(selectedFilters));\n      const index = selectedFiltersNew.findIndex(item => item.ntransactionstatus === transactionStatus.PARTIAL);\n\n      if (selectedFiltersNew.length > 0 && index === -1) {\n        selectedFiltersNew.push(selectFilterStatus);\n      }\n\n      selectedFilter = selectedFiltersNew; // const updateInfo = {\n      //     typeName: DEFAULT_RETURN,\n      //     data: {masterData: this.props.Login.masterData,showTest,showSample }\n      // }\n      // this.props.updateStore(updateInfo);\n\n      SampleType = SampleType.get(\"OptionList\");\n      RegistrationType = RegistrationType.get(\"OptionList\");\n      RegistrationSubType = RegistrationSubType.get(\"OptionList\");\n      REFilterStatus = REFilterStatus.get(\"OptionList\");\n      REJobStatus = REJobStatus.get(\"OptionList\");\n      Testvalues = Testvalues.get(\"OptionList\");\n      Batchvalues = Batchvalues.get(\"OptionList\");\n      Worklistvalues = Worklistvalues.get(\"OptionList\");\n      ConfigurationFilterValues = ConfigurationFilterValues.get(\"OptionList\");\n      ApprovalConfigVersion = ApprovalConfigVersion.get(\"OptionList\"); // AdhocParamter=AdhocParamter.get(\"OptionList\")\n    }\n\n    if (this.props.Login.activeTabIndex !== previousProps.Login.activeTabIndex) {\n      activeTabIndex = this.props.Login.activeTabIndex;\n      activeTabId = this.props.Login.activeTabId;\n      bool = true;\n    }\n\n    if (this.props.Login.masterData.DesignTemplateMapping !== previousProps.Login.masterData.DesignTemplateMapping) {\n      const DesignTemplateMappingMap = constructOptionList(this.props.Login.masterData.DesignTemplateMapping || [], \"ndesigntemplatemappingcode\", \"sregtemplatename\", undefined, undefined, false);\n      stateDynamicDesign = DesignTemplateMappingMap.get(\"OptionList\");\n    }\n\n    if (bool) {\n      this.setState({\n        showTest,\n        showSample,\n        userRoleControlRights,\n        controlMap,\n        resultDataState,\n        instrumentDataState,\n        materialDataState,\n        taskDataState,\n        documentDataState,\n        resultChangeDataState,\n        testCommentDataState,\n        historyDataState,\n        sampleListColumns,\n        subSampleListColumns,\n        testListColumns,\n        SingleItem,\n        sampleListMainField,\n        subSampleListMainField,\n        testListMainField,\n        SampleGridItem,\n        SampleGridExpandableItem,\n        sampleMoreField,\n        subSampleMoreField,\n        testMoreField,\n        selectedRecord,\n        SampleType,\n        RegistrationType,\n        RegistrationSubType,\n        REFilterStatus,\n        REJobStatus,\n        Testvalues,\n        Batchvalues,\n        Worklistvalues,\n        ConfigurationFilterValues,\n        ApprovalConfigVersion,\n        validateFormulaMandyFields,\n        skip,\n        take,\n        testskip,\n        testtake,\n        selectedFilter,\n        DynamicSampleColumns,\n        DynamicSubSampleColumns,\n        DynamicTestColumns,\n        DynamicGridItem,\n        DynamicGridMoreField,\n        stateDynamicDesign,\n        activeTabIndex,\n        activeTabId,\n        sampleChangeDataState,\n        testSearchField,\n        AdhocParamter\n      });\n    }\n\n    if (this.props.Login.meanTestParameterList !== previousProps.Login.meanTestParameterList) {\n      this.setState({\n        meanTestParameterList: this.props.Login.meanTestParameterList\n      });\n    }\n  }\n\n  componentWillUnmount() {\n    const updateInfo = {\n      typeName: DEFAULT_RETURN,\n      data: {\n        masterData: [],\n        inputParam: undefined\n      }\n    };\n    this.props.updateStore(updateInfo);\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    if (props.Login.masterStatus !== \"\") {\n      if (props.Login.errorCode === 417 || props.Login.errorCode === 409) {\n        toast.warn(props.Login.masterStatus);\n        props.Login.masterStatus = \"\";\n      }\n    }\n\n    if (props.Login.error !== state.error) {\n      toast.error(props.Login.error);\n      props.Login.error = \"\";\n    } // if (props.Login.selectedRecord !== state.selectedRecord) {\n    //     return ({ selectedRecord: { ...state.selectedRecord, ...props.Login.selectedRecord } });\n    // }\n\n\n    return null;\n  }\n\n}\n\nconst mapStatetoProps = state => {\n  return {\n    Login: state.Login\n  };\n};\n\nexport default connect(mapStatetoProps, {\n  crudMaster,\n  updateStore,\n  getsubSampleREDetail,\n  getTestREDetail,\n  getTestChildTabREDetail,\n  resultGetModule,\n  completeTest,\n  testMethodSourceEdit,\n  addREInstrument,\n  addREMaterial,\n  deleteInstrumentRecord,\n  fetchInstrumentRecord,\n  deleteTaskRecord,\n  fetchTaskRecord,\n  parameterRecord,\n  checkListRecord,\n  onSaveCheckList,\n  defaultTest,\n  getFormula,\n  getRERegistrationType,\n  getRERegistrationSubType,\n  fetchMaterialRecord,\n  getREApprovalConfigVersion,\n  getResultEntryDetails,\n  calculateFormula,\n  getREFilterStatus,\n  getREFilterTestData,\n  getREJobStatus,\n  getSampleChildTabREDetail,\n  viewAttachment,\n  getAttachmentCombo,\n  deleteAttachment,\n  resultImportFile,\n  validateEsignCredentialComplete,\n  getCommentsCombo,\n  updateTestMethodSource,\n  filterTransactionList,\n  validateEsignCredential,\n  updateParameterComments,\n  previewSampleReport,\n  getMeanCalculationTestParameter,\n  getREMaterialCategoryByType,\n  getREMaterialByCategory,\n  getREMaterialInvertoryByMaterial,\n  getAvailableMaterialQuantity,\n  testStart,\n  getSubSampleChildTabDetail,\n  getSampleChildTabDetail,\n  getREFilterTemplate,\n  getAverageResult,\n  getREMaterialComboGet //,deleteResultUsedMaterial\n  ,\n  getPredefinedData,\n  getELNTestValidation,\n  getConfigurationFilter,\n  getTestBasedBatchWorklist,\n  addREAdhocParamter,\n  createAdhocParamter,\n  enforceResult\n})(injectIntl(ResultEntry));","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/pages/ResultEntryBySample/ResultEntry.jsx"],"names":["React","Component","faPlay","faAddressBook","faCheckCircle","faEye","faPencilRuler","faFileImport","faSync","faBorderAll","faLink","faComment","faComments","faPaperclip","faCommentDots","faChevronRight","faMicroscope","faFlask","faHistory","Card","Col","Row","Nav","Button","Modal","FormattedMessage","injectIntl","connect","Axios","ListWrapper","FontAwesomeIcon","faFileInvoice","SplitterLayout","ContentPanel","PortalModal","Iframe","ReactTooltip","crudMaster","updateStore","getsubSampleREDetail","getTestREDetail","getTestChildTabREDetail","resultGetModule","fetchMaterialRecord","completeTest","testMethodSourceEdit","addREInstrument","addREMaterial","deleteInstrumentRecord","fetchInstrumentRecord","deleteTaskRecord","fetchTaskRecord","parameterRecord","checkListRecord","onSaveCheckList","defaultTest","getFormula","getRERegistrationType","getRERegistrationSubType","getREApprovalConfigVersion","getResultEntryDetails","calculateFormula","getREFilterStatus","getREFilterTestData","getREJobStatus","viewAttachment","validateEsignCredentialComplete","getAttachmentCombo","deleteAttachment","getCommentsCombo","updateTestMethodSource","resultImportFile","filterTransactionList","validateEsignCredential","getSampleChildTabREDetail","updateParameterComments","getREMaterialCategoryByType","getREMaterialByCategory","getREMaterialInvertoryByMaterial","previewSampleReport","getMeanCalculationTestParameter","getAvailableMaterialQuantity","testStart","getSubSampleChildTabDetail","getSampleChildTabDetail","getREFilterTemplate","getAverageResult","getREMaterialComboGet","getPredefinedData","getELNTestValidation","getConfigurationFilter","getTestBasedBatchWorklist","addREAdhocParamter","createAdhocParamter","enforceResult","sortData","create_UUID","getControlMap","listDataFromDynamicArray","formatInputDate","validateTwoDigitDate","showEsign","constructOptionList","deleteAttachmentDropZone","Lims_JSON_stringify","CF_encryptionData","rsapi","toast","parameterType","grade","transactionStatus","RegistrationType","RegistrationSubType","FORMULAFIELDTYPE","designProperties","SideBarSeqno","SideBarTabIndex","TransactionListMasterJson","ProductList","CustomTabs","ResultEntryResultsTab","DEFAULT_RETURN","SlideOutModal","Esign","BreadcrumbComponent","ResultEntryFilter","ResultEntryInstrumentForm","ResultEntryForm","TestEditForm","SampleInfoView","SampleInfoGrid","ApprovalInstrumentTab","ResultEntryTaskTab","ResultEntryTaskForm","ResultEntryParamCommetsForm","TemplateForm","templateChangeHandler","numberConversion","numericGrade","PerfectScrollbar","ResultEntryFormulaForm","SampleApprovalHistory","ResultChangeHistoryTab","Attachments","Comments","onSaveSampleAttachment","onSaveTestAttachment","onSaveSubSampleAttachment","onSaveSampleComments","onSaveTestComments","onSaveSubSampleComments","ResultEntryImport","getSameRecordFromTwoArrays","convertDateValuetoString","rearrangeDateFormat","ResultEntryMean","ScrollBar","ResultEntryMaterialForm","AddAdhocParameter","ResultUsedMaterial","FontIconWrap","CustomSwitch","TransactionListMasterJsonView","ModalShow","DataGrid","process","ResultEntryPredefinedComments","ResultEntryEnforceResult","ResultEntry","constructor","props","paneSizeChange","d","setState","splitChangeWidthPercentage","event","file","fieldName","selectedRecord","Login","masterData","selectedImportFile","updateInfo","typeName","data","deleteAttachmentParameterFile","index","selectedRecordParameter","state","ResultParameter","closeModalShow","showAlertGrid","forEach","object","onTabChangeRulesEngine","tabProps","activeTabName","handleExpandChange","mapobject","childListMap","Map","keylst","Object","keys","map","key","set","parseInt","values","availableTestFilter","lstntransactionsamplecode","RegistrationTestAlert","boolean1","includes","ntransactiontestcode","toString","unavailableTestFilter","NewTestGroupTestAlert","dataStateAvailabletestAlert","dataStateavailabletest","dataState","dataStateUnAvailabletestAlert","dataStateunavailabletest","tabAlertRulesEngine","tabMap","RESelectedTest","filter","length","skip","take","controlMap","userRoleControlRights","realRegSubTypeValue","nneedsubsample","closeModal","loadEsign","openModal","openTemplateModal","screenName","operation","loadFile","showValidate","validateFormulaMandyFields","onFilterComboChange","fieldname","inputData","dateObj","toDate","userInfo","nflag","fromdate","fromDate","todate","nsampletypecode","defaultSampleType","nregtypecode","defaultRegistrationType","nregsubtypecode","defaultRegistrationSubType","transcode","defaultFilterStatus","ntransactionstatus","REFilterStatus","item","join","String","userinfo","obj","value","inputParamData","napprovalversioncode","ApprovalConfigVersion","napprovalconfigversioncode","ntranscode","ndesigntemplatemappingcode","DesignTemplateMappingValue","defaultApprovalConfigVersion","njobstatuscode","defaultjobstatus","defaultTestvalues","ntestcode","defaultConfigurationFilterValue","nconfigfiltercode","defaultWorklistvalue","defaultBatchvalue","OnDateConverstion","date","month","getMonth","day","getDate","getFullYear","onReload","realFromDate","realToDate","realSampleTypeValue","realRegTypeValue","realApproveConfigVersion","realFilterStatusValue","realTestcodeValue","realWorklistCodeValue","activeTestKey","showTest","showSample","checkBoxOperation","nworlistcode","nworklistcode","inpuParamData","refs","searchSampleRef","searchSubSampleRef","searchTestRef","resultDataState","instrumentDataState","materialDataState","taskDataState","documentDataState","resultChangeDataState","testCommentDataState","historyDataState","warn","intl","formatMessage","id","onDesignTemplateChange","labelname","onREFilterSubmit","realBatchCodeValue","nneedtemplatebasedflow","nbatchmastercode","undefined","onSecondaryPaneSizeChange","e","val","onComboCategoryChange","uRL","ninstrumentcatcode","ncalibrationRequired","ncalibrationreq","post","then","response","TagInstrument","Instrument","TagListInstrument","get","ninstrumentcode","catch","error","status","message","testRETabDetail","testTabMap","test","testskip","testtake","testList","RE_TEST","slice","meanControlId","has","ncontrolcode","selectedTestList","genericLabel","inputParam","dataStateChange","editpredefinedcomments","primaryKeyField","selectedId","ncontrolCode","deleteMaterialRecord","addResultEntryTask","onAttachmentSaveClick","RegistrationTestAttachment","VALUE","methodUrl","esignRights","masterList","onCommentsSaveClick","RegistrationTestComment","ResultChangeHistory","sampleDataStateChange","activeSampleKey","sampleHistoryDataState","sampleGridDataState","sampleGridDataStateChange","sampleChangeDataState","subsampleTabDetail","ntransactionsamplecode","RESelectedSubSample","sample","subsampleList","RE_SUBSAMPLE","subsampleskip","subsampletake","selectedSubSampleList","RegistrationSampleAttachment","attachmentskip","attachmenttake","settings","RegistrationSampleComment","subSampleCommentDataState","subSampledataStateChange","onSampleTabChange","activeSampleTab","RESelectedSample","npreregno","onTestTabChange","preregno","openClosePortal","openELNSheet","integrationSettings","onSubSampleTabChange","activeSubSampleTab","selectedSubSample","subSampleAttachmentDataState","popUptestDataState","adhocTestParameter","ntestgrouptestcode","adhocId","displayName","nformcode","screenData","classUrl","nresultusedmaterialcode","stestsynonym","addResultUsedTaskId","parameterData","modalEvent","currentTarget","selectedForumulaInput","senableAverage","svalues","soldvalue","lstDynamicFields","dynamicfields","push","selectedResultGrade","resultImport","closeFilter","showFilter","handlePageChange","handleSubSamplePageChange","subSampleSkip","subSampleTake","handleTestPageChange","sampletakeDataState","verticalPaneSizeChange","enableAutoHeight","initialVerticalWidth","changeSplitterOption","sideNavDetail","searchedTests","editTestCommentsId","activeTestTab","resultTabDetail","onTabChange","attachmentTabDetail","commentTabDetail","SingleItem","gridfillingColumn","DynamicGridItem","DynamicGridMoreField","resultTabMap","TEST","attachmentTabMap","SUBSAMPLE","SAMPLE","RegistrationAttachment","testDataStateChange","testAttachmentDataState","commentTabMap","RegistrationComment","onInputSwitchOnChange","target","name","enablePropertyPopup","enableAutoClick","changePropertyViewClose","activeTabIndex","activeTabId","changePropertyView","window","innerWidth","tabSequence","tabseqno","mandatoryFieldsForAdditionalInfo","mandatoryFieldsAdditionalInfo","showMultiSelectCombo","defaultActions","testChildGetREParam","setDefaultId","TestList","splice","acceptTestList","completeActions","completeResultId","postParamList","testStartActions","progressTimerStart","validateEsign","sreason","nreasoncode","spredefinedreason","label","password","onEsignInputOnChange","type","checked","YES","NO","onInputOnChange","ntestgroupmaterial","onSaveFileClick","saveType","formRef","acceptedFile","sfilename","formData","FormData","append","JSON","stringify","x","onSaveClickAdhocParam","testParameter","nparamtercode","ntestgroupparamtercode","ntestparametercode","adhocpreregno","adhoctransactiontestcode","action","onDropFile","onFormulaInputChange","fields","selectedMandatory","dynamicformulafields","ndynamicformulafieldcode","INTEGER","replace","formulainput","sparameter","sdescription","onTemplateInputChange","control","onTemplateComboChange","comboData","onTemplateDateChange","dateData","handleDateChange","dateName","dateValue","Date","viewAdditionalInfo","currentAlertResultCode","additionalInfo","additionalInfoView","onModalSave","currentntestgrouptestpredefcode","bool","some","Parameter","ntestgrouptestpredefsubcode","substring","onInputChange","Data","onNumericChange","numericData","numericName","onDateChange","headerSelectionChange","syntheticEvent","meanTestParameterList","selectedMeanTestParam","selected","ntransactionresultcode","sresult","selectedTestParam","selectedTestParamMean","size","testMean","selectAll","selectionChange","dataItem","delete","valiateCheckAll","onMeanComboChange","comboName","onMaterialComboChange","nmaterialcatcode","needSectionwise","nsectioncode","onComboChange","onGradeEvent","parameter","nparametertypecode","NUMERIC","ngradecode","parseFloat","nroundingdigits","PREDEFINED","CHARACTER","trim","saveParam","isTestComment","sampleList","searchedSubSample","acceptList","searchedSample","RE_SAMPLE","selectedSampleList","selectedMaster","onKeyPress","paremterResultcode","keyCode","i","form","elements","focus","preventDefault","onResultInputChange","sfinal","sresultpredefinedname","salertmessage","sresultcomment","ncalculatedresult","ntestgrouptestpredefcode","spredefinedname","spredefinedsynonym","spredefinedcomments","nneedresultentryalert","nneedsubcodedresult","ATTACHMENT","onSaveMean","resultParameter","selectedTestParameterMean","nroundingdigit","nuserrole","nusercode","isFileupload","onSavePredefinedComments","stransactiontestcode","onSaveEnforceResult","senforceresultcomment","onSaveClick","neditable","resultParameters","resultData","results","editable","additionalInfoUidata","FIO","splittedFileName","split","fileExtension","uniquefilename","ssystemfilename","nfilesize","loading","tests","ntype","nmethodcode","nsourcecode","ResultUsedInstrument","nresultusedinstrumentcode","dfromdate","dtodate","stzfromdate","ntzfromdate","stztodate","ntztodate","transactiontestcode","nmaterialcode","nmaterialinventorycode","susedquantity","savailablequantity","nmaterialtypecode","nmaterialcategorycode","ninventorycode","jsondata","sarno","ssamplearno","smaterialcatname","smaterialname","sinventoryid","nqtyused","scarriergas","smobilephase","sremarks","susername","ssectionname","MaterialInventoryTrans","IDS_INVENTORYID","smaterialtypename","sanalysistime","smisctime","spreanalysistime","spreparationtime","scomments","ResultUsedTasks","nresultusedtaskcode","sanalyst","staskprocedure","taskArry","info","lstResultCheckList","editedQB","qbcode","ResultCheckList","createRef","masterStatus","showSubSample","tabPane","sampleListColumns","subSampleListColumns","testListColumns","TableExpandableItem","SampleGridItem","SampleGridExpandableItem","sampleListMainField","subSampleListMainField","testListMainField","testMoreField","enablePin","showRESampleInfo","showRETestList","showRESubSampleinfo","sampleTabDetail","componentDidMount","parentHeight","height","clientHeight","firstPane","getActiveTestURL","url","render","sampleListRE","subSampleListRE","testListRE","startDate","endDate","subSampleGetREParam","testGetREParam","samplePrintHistoryDataState","sampleSearchField","ROUTINE","filterSampleParam","inputListName","selectedObject","fetchUrl","childRefs","ref","childFilteredListName","fecthInputObject","searchFieldList","changeList","filterSubSampleParam","filterTestParam","filteredListName","clearFilter","searchRef","updatedListname","unchangeList","breadCrumbData","breadCrumbFrom","breadCrumbto","sregtypename","sregsubtypename","sfilterstatus","sworklistno","sbatcharno","testStartId","resultEnterId","editSourceMethodId","addResultUsedInstrumentId","addResultUsedMaterailId","mandatoryFieldsInstrument","mandatoryFieldsTask","mandatoryFieldsTestMethodSource","mandatoryEnforceResult","mandatoryFieldsParameter","reportPreviewId","testDesign","borderBottom","display","searchedTest","setting","selectedFilter","title","controlname","hidden","indexOf","onClick","objectName","elnUserInfo","elnSite","dataplace","nneedtestinitiate","mainDesign","marginTop","DynamicSubSampleColumns","subSampleMoreField","DynamicSampleColumns","sampleMoreField","SampleType","REJobStatus","Testvalues","Batchvalues","Worklistvalues","ConfigurationFilterValues","stateDynamicDesign","PLASMA_POOL","background","width","propertyPopupWidth","enlLink","showAlertForPredefined","onlyAlertMsgAvailable","testgrouptestpredefsubresultOptions","PredefinedValues","GradeValues","selectedNumericData","handleClose","onDropTestFile","MethodData","SourceData","InstrumentCategory","timeZoneList","materialType","materialCat","material","materialInventory","DynamicFormulaFields","GradeList","AdhocParamter","ChecklistData","needSaveButton","temparray","option","LABEL","slanguagetypecode","constructDesign","list","newList","componentDidUpdate","previousProps","DynamicTestColumns","testSearchField","DynamicDesign","dynamicColumn","parse","samplelistitem","subsamplelistitem","testlistitem","samplegriditem","samplegridmoreitem","sampledisplayfields","testListFields","testlistmoreitems","testsearchfields","RegSubTypeValue","selectFilterStatus","PARTIAL","scolorhexcode","selectedFilters","selectedFiltersNew","findIndex","DesignTemplateMapping","DesignTemplateMappingMap","componentWillUnmount","getDerivedStateFromProps","errorCode","mapStatetoProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { faPlay, faAddressBook, faCheckCircle, faEye, faPencilRuler, faFileImport, faSync, faBorderAll, faLink, faComment, faComments, faPaperclip, faCommentDots, faChevronRight, faMicroscope, faFlask, faHistory} from '@fortawesome/free-solid-svg-icons';\r\nimport { Card, Col, Row, Nav, Button, Modal } from 'react-bootstrap';\r\nimport { FormattedMessage, injectIntl } from 'react-intl';\r\nimport { connect } from 'react-redux';\r\nimport Axios from \"axios\";\r\nimport { ListWrapper } from '../../components/client-group.styles';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faFileInvoice } from '@fortawesome/free-solid-svg-icons';\r\nimport SplitterLayout from \"react-splitter-layout\";\r\nimport { ContentPanel } from '../../components/App.styles';\r\nimport PortalModal from '../../PortalModal';\r\nimport Iframe from 'react-iframe';\r\nimport ReactTooltip from 'react-tooltip';\r\nimport {\r\n    crudMaster, updateStore, getsubSampleREDetail, getTestREDetail, getTestChildTabREDetail, resultGetModule, fetchMaterialRecord,\r\n    completeTest, testMethodSourceEdit, addREInstrument, addREMaterial, deleteInstrumentRecord, fetchInstrumentRecord, deleteTaskRecord,\r\n    fetchTaskRecord, parameterRecord, checkListRecord, onSaveCheckList, defaultTest, getFormula, getRERegistrationType, getRERegistrationSubType,\r\n    getREApprovalConfigVersion, getResultEntryDetails, calculateFormula, getREFilterStatus, getREFilterTestData, getREJobStatus,\r\n    viewAttachment, validateEsignCredentialComplete, getAttachmentCombo, deleteAttachment, getCommentsCombo, updateTestMethodSource, resultImportFile,\r\n    filterTransactionList, validateEsignCredential, getSampleChildTabREDetail, updateParameterComments, getREMaterialCategoryByType, getREMaterialByCategory, getREMaterialInvertoryByMaterial,\r\n    previewSampleReport, getMeanCalculationTestParameter, getAvailableMaterialQuantity, testStart, getSubSampleChildTabDetail, getSampleChildTabDetail,\r\n    getREFilterTemplate, getAverageResult,getREMaterialComboGet,getPredefinedData,getELNTestValidation//,deleteResultUsedMaterial\r\n   \r\n    ,getConfigurationFilter,getTestBasedBatchWorklist,\r\n    addREAdhocParamter,createAdhocParamter\r\n   // ,getPredefinedData,getConfigurationFilter,getTestBasedBatchWorklist//,deleteResultUsedMaterial\r\n         ,enforceResult//,deleteResultUsedMaterial\r\n} from '../../actions';\r\n//import { sortData, create_UUID, getControlMap, listDataFromDynamicArray, formatInputDate, validateTwoDigitDate, showEsign, constructOptionList, deleteAttachmentDropZone,CF_encryptionData } from '../../components/CommonScript';\r\nimport { sortData, create_UUID, getControlMap, listDataFromDynamicArray, formatInputDate, validateTwoDigitDate, showEsign, constructOptionList, deleteAttachmentDropZone, Lims_JSON_stringify,CF_encryptionData } from '../../components/CommonScript';\r\nimport rsapi from '../../rsapi';\r\nimport { toast } from 'react-toastify';\r\nimport { parameterType, grade, transactionStatus, RegistrationType, RegistrationSubType, FORMULAFIELDTYPE, designProperties, SideBarSeqno, SideBarTabIndex } from '../../components/Enumeration';\r\nimport TransactionListMasterJson from '../../components/TransactionListMasterJson';\r\nimport { ProductList } from '../product/product.styled';\r\nimport CustomTabs from '../../components/custom-tabs/custom-tabs.component'; \r\n\r\nimport ResultEntryResultsTab from './ResultEntryResultsTab';\r\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\r\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\r\nimport Esign from '../audittrail/Esign';\r\nimport BreadcrumbComponent from '../../components/Breadcrumb.Component';\r\nimport ResultEntryFilter from './ResultEntryFilter';\r\nimport ResultEntryInstrumentForm from './ResultEntryInstrumentForm';\r\nimport ResultEntryForm from './ResultEntryForm';\r\nimport TestEditForm from './TestEditForm';\r\nimport SampleInfoView from '../approval/SampleInfoView';\r\nimport SampleInfoGrid from '../approval/SampleInfoGrid';\r\nimport ApprovalInstrumentTab from '../approval/ApprovalInstrumentTab';\r\nimport ResultEntryTaskTab from './ResultEntryTaskTab';\r\nimport ResultEntryTaskForm from './ResultEntryTaskForm';\r\nimport ResultEntryParamCommetsForm from './ResultEntryParamCommetsForm';\r\nimport TemplateForm from '../checklist/checklist/TemplateForm';\r\nimport { templateChangeHandler } from '../checklist/checklist/checklistMethods';\r\nimport { numberConversion, numericGrade } from './ResultEntryValidation';\r\nimport PerfectScrollbar from 'react-perfect-scrollbar';\r\nimport ResultEntryFormulaForm from './ResultEntryFormulaForm';\r\nimport SampleApprovalHistory from '../approval/SampleApprovalHistory';\r\nimport ResultChangeHistoryTab from '../approval/ResultChangeHistoryTab';\r\nimport Attachments from '../attachmentscomments/attachments/Attachments';\r\nimport Comments from '../attachmentscomments/comments/Comments';\r\nimport { onSaveSampleAttachment, onSaveTestAttachment, onSaveSubSampleAttachment } from '../attachmentscomments/attachments/AttachmentFunctions';\r\nimport { onSaveSampleComments, onSaveTestComments, onSaveSubSampleComments } from '../attachmentscomments/comments/CommentFunctions';\r\nimport ResultEntryImport from './ResultEntryImport';\r\nimport { getSameRecordFromTwoArrays, convertDateValuetoString, rearrangeDateFormat } from '../../components/CommonScript'\r\n// import ReactTooltip from 'react-tooltip';\r\nimport ResultEntryMean from './ResultEntryMean';\r\nimport ScrollBar from 'react-perfect-scrollbar';\r\nimport ResultEntryMaterialForm from './ResultEntryMaterialForm';\r\nimport AddAdhocParameter from './AddAdhocParameter';\r\nimport ResultUsedMaterial from './UsedMaterial';\r\nimport { FontIconWrap } from '../../components/data-grid/data-grid.styles';\r\nimport CustomSwitch from '../../components/custom-switch/custom-switch.component';\r\nimport TransactionListMasterJsonView from '../../components/TransactionListMasterJsonView';\r\nimport ModalShow from '../../components/ModalShow';\r\nimport DataGrid from '../../components/data-grid/data-grid.component';\r\nimport { process } from '@progress/kendo-data-query';\r\nimport ResultEntryPredefinedComments from './ResultEntryPredefinedComments';\r\nimport ResultEntryEnforceResult from './ResultEntryEnforceResult';\r\n\r\n\r\nclass ResultEntry extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.searchSampleRef = React.createRef();\r\n        this.searchSubSampleRef = React.createRef();\r\n        this.searchTestRef = React.createRef();\r\n        this.state = {\r\n\r\n\r\n            // sampleGridDataState: { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 },\r\n            // resultDataState: { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5, group: [{ field: 'sarno' }] },\r\n            // instrumentDataState: { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5, group: [{ field: 'sarno' }] },\r\n            // materialDataState: { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5, group: [{ field: 'sarno' }] },\r\n            // taskDataState: { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5, group: [{ field: 'sarno' }] },\r\n            // documentDataState: { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5, group: [{ field: 'sarno' }] },\r\n            // resultChangeDataState: { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5, group: [{ field: 'sarno' }] },\r\n            // testCommentDataState: { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5, group: [{ field: 'sarno' }] },\r\n            // historyDataState: { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5, group: [{ field: 'stestsynonym' }] },\r\n            // sampleHistoryDataState: { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5, group: [{ field: 'sarno' }] },\r\n\r\n\r\n            // historyDataState: { skip: 0, take: 5, group: [{ field: 'ArNo' }, { field: 'stestsynonym' }] },\r\n\r\n            subSampleCommentDataState: {\r\n                skip: 0, take: this.props.Login.settings ?\r\n                    parseInt(this.props.Login.settings[14]) : 5//, group: [{ field: 'groupingField' }] \r\n            },\r\n            subSampleAttachmentDataState: {\r\n                skip: 0, take: this.props.Login.settings ?\r\n                    parseInt(this.props.Login.settings[14]) : 5//, group: [{ field: 'groupingField' }] \r\n            },\r\n            sampleGridDataState: { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 },\r\n            resultDataState: {\r\n                skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5//, group: [{ field: 'sarno' }] \r\n            },\r\n            instrumentDataState: {\r\n                skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5//, group: [{ field: 'sarno' }] \r\n            },\r\n            materialDataState: {\r\n                skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5//, group: [{ field: 'sarno' }] \r\n            },\r\n            taskDataState: {\r\n                skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5//, group: [{ field: 'sarno' }] \r\n            },\r\n            documentDataState: {\r\n                skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5//, group: [{ field: 'sarno' }]\r\n            },\r\n            resultChangeDataState: {\r\n                skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5//, group: [{ field: 'sarno' }]\r\n            },\r\n            testCommentDataState: {\r\n                skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5//, group: [{ field: 'sarno' }] \r\n            },\r\n            historyDataState: {\r\n                skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5//, group: [{ field: 'stestsynonym' }] \r\n            },\r\n            sampleHistoryDataState: {\r\n                skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5//, group: [{ field: 'sarno' }] \r\n            },\r\n            userRoleControlRights: [],\r\n            controlMap: new Map(),\r\n            masterStatus: \"\",\r\n            error: \"\",\r\n            operation: \"\",\r\n            showSample: false,\r\n            showSubSample: false,\r\n            showTest: true,\r\n            tabPane: 0,\r\n            subsampleskip: 0,\r\n            sampleListColumns: [],\r\n            subSampleListColumns: [],\r\n            testListColumns: [],\r\n            TableExpandableItem: [],\r\n            SingleItem: [],\r\n            SampleGridItem: [],\r\n            SampleGridExpandableItem: [],\r\n            sampleListMainField: [],\r\n            subSampleListMainField: [],\r\n            testListMainField: [],\r\n            testMoreField: [],\r\n            selectedRecord: {},\r\n            validateFormulaMandyFields: [],\r\n            splitChangeWidthPercentage: 22,\r\n            skip: 0,\r\n            take: this.props.Login.settings && this.props.Login.settings[3],\r\n            subSampleSkip: 0,\r\n            subSampleTake: this.props.Login.settings && this.props.Login.settings[12],\r\n            // subsampletake: this.props.Login.settings\r\n            // && this.props.Login.settings[12] ? this.props.Login.settings[12] : 10,\r\n            testskip: 0,\r\n            testtake: this.props.Login.settings && this.props.Login.settings[12],\r\n            initialVerticalWidth: \"57vh\",\r\n            enablePin: false,\r\n            openELNSheet: false\r\n        }\r\n        this.formRef = React.createRef();\r\n        //this.onSecondaryPaneSizeChange = this.onSecondaryPaneSizeChange.bind(this);\r\n    }\r\n\r\n    paneSizeChange = (d) => {\r\n        this.setState({\r\n            splitChangeWidthPercentage: d\r\n        })\r\n    }\r\n    deleteAttachment = (event, file, fieldName) => {\r\n        let selectedRecord = this.props.Login.masterData.selectedImportFile\r\n        selectedRecord[fieldName] = deleteAttachmentDropZone(selectedRecord[fieldName], file)\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { masterData: { ...this.props.Login.masterData, selectedImportFile: selectedRecord } }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n\r\n    }\r\n\r\n    deleteAttachmentParameterFile = (event,file, fieldName,index) => {\r\n        let selectedRecordParameter = this.state.selectedRecord.ResultParameter[index];\r\n       \r\n        selectedRecordParameter[fieldName] = deleteAttachmentDropZone(selectedRecordParameter[fieldName],\r\n            file)\r\n        let selectedRecord =  this.state.selectedRecord\r\n        selectedRecord['ResultParameter'][index]['editable']= true;\r\n        // const updateInfo = {\r\n        //     typeName: DEFAULT_RETURN,\r\n        //     data: { masterData: { ...this.props.Login.masterData, ResultParameter.editable\r\n        //         //selectedImportFile: selectedRecord \r\n        //     } }\r\n        // }\r\n        // this.props.updateStore(updateInfo);\r\n        this.setState({\r\n            selectedRecord : selectedRecord//fileToDelete:file.name \r\n        });\r\n\r\n    }\r\n    closeModalShow = () => {\r\n        let showAlertGrid = this.props.Login.showAlertGrid;\r\n        let  selectedRecord=this.props.Login.selectedRecord;\r\n        let masterData = this.props.Login.masterData && this.props.Login.masterData\r\n        masterData['RESelectedTest'].forEach(object => {\r\n            object['expanded']&&delete object['expanded'];\r\n          });\r\n          selectedRecord['ntestgrouptestpredefsubcode'] &&delete selectedRecord['ntestgrouptestpredefsubcode'] \r\n        showAlertGrid = false;\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { showAlertGrid ,masterData,selectedRecord}\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n    onTabChangeRulesEngine = (tabProps) => {\r\n        let masterData = this.props.Login.masterData && this.props.Login.masterData\r\n        masterData['RESelectedTest'].forEach(object => {\r\n            object['expanded']&&delete object['expanded'];\r\n          });\r\n        masterData['activeTabName'] = tabProps.activeTabName;\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { masterData }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n    handleExpandChange = (mapobject) => {  \r\n        let childListMap =  new Map(); \r\n        let keylst = Object.keys(mapobject); \r\n        keylst.map((key) => {\r\n            childListMap.set(parseInt(key),\r\n            Object.values(mapobject[key]));\r\n        })\r\n        this.setState({ childListMap })\r\n    }\r\n    availableTestFilter = (data) => { \r\n        let lstntransactionsamplecode=[];\r\n        if (this.props.Login.RegistrationTestAlert) {\r\n            let keylst = Object.keys(this.props.Login.RegistrationTestAlert); \r\n            // keylst.map(x=>{ \r\n            //    this.props.Login.RegistrationTestAlert[x].map(y=> lstntransactionsamplecode.push(y['ntransactionsamplecode'])) \r\n            // }); \r\n           // let boolean1 = keylst.includes(data.ntestgrouptestcode.toString())\r\n            let boolean1 = keylst.includes(data.ntransactiontestcode.toString())\r\n          //  let boolean2 = lstntransactionsamplecode.includes(data.ntransactionsamplecode)\r\n            if (boolean1//&&boolean2\r\n                ) {\r\n                return data;\r\n            }\r\n        } \r\n    } \r\n    unavailableTestFilter = (data) => { \r\n        let lstntransactionsamplecode=[];\r\n        if (this.props.Login.NewTestGroupTestAlert) {\r\n            let keylst = Object.keys(this.props.Login.NewTestGroupTestAlert); \r\n            // keylst.map(x=>{ \r\n            //     this.props.Login.NewTestGroupTestAlert[x].map(y=> lstntransactionsamplecode.push(y['ntransactionsamplecode'])) \r\n            // });\r\n           // let boolean1 = keylst.includes(data.ntestgrouptestcode.toString())\r\n            let boolean1 = keylst.includes(data.ntransactiontestcode.toString())\r\n          //  let boolean2 = lstntransactionsamplecode.includes(data.ntransactionsamplecode)\r\n            if (boolean1//&&boolean2\r\n                ) {\r\n                return data;\r\n            }\r\n        } \r\n    } \r\n    dataStateAvailabletestAlert = (event) => { \r\n            this.setState({ \r\n                dataStateavailabletest: event.dataState\r\n            }); \r\n    }\r\n    dataStateUnAvailabletestAlert = (event) => {  \r\n            this.setState({ \r\n                dataStateunavailabletest: event.dataState\r\n            }); \r\n    }\r\n    tabAlertRulesEngine = () => {\r\n        const tabMap = new Map();\r\n        {\r\n            this.props.Login.RegistrationTestAlert&&this.props.Login.masterData.RESelectedTest&&this.props.Login.masterData.RESelectedTest.filter(this.availableTestFilter).length>0 &&//this.props.Login.RegistrationTestAlert.length>0 &&\r\n            tabMap.set(\"IDS_AVAILABLETESTUNDERSAMPLE\",\r\n                <DataGrid\r\n                    primaryKeyField=\"ntransactiontestcode\" \r\n                    dataResult={process(sortData(this.props.Login.masterData.RESelectedTest.filter(this.availableTestFilter), 'descending', 'ntransactiontestcode') || [],\r\n                    this.state.dataStateavailabletest?this.state.dataStateavailabletest:{ skip: 0, take: 10 })} \r\n                    dataState={this.state.dataStateavailabletest?this.state.dataStateavailabletest:{ skip: 0, take: 10 }}\r\n                    dataStateChange={this.dataStateAvailabletestAlert}\r\n                    extractedColumnList={[\r\n                        { \"idsName\": \"IDS_RULEAPPLIEDTESTNAME\", \"dataField\": \"stestsynonym\", \"width\": \"200px\" }\r\n                    ]}\r\n                    controlMap={this.state.controlMap}\r\n                    userRoleControlRights={this.state.userRoleControlRights}\r\n                        pageable={true} \r\n                    scrollable={'scrollable'}\r\n                    hideColumnFilter={true}\r\n                    selectedId={0}\r\n                    gridHeight={'350px'}\r\n                    gridWidth={'700px'}\r\n                    expandField=\"expanded\"\r\n                    handleExpandChange={() => {this.handleExpandChange(this.props.Login.RegistrationTestAlert)}}\r\n                    hasChild={true}\r\n                    childMappingField={'ntransactiontestcode'}\r\n                    childColumnList={\r\n                        this.props.Login.masterData.realRegSubTypeValue.nneedsubsample ?\r\n                        [\r\n                        { \"idsName\": \"IDS_RULEDEPENDENTTESTNAME\", \"dataField\": \"stestsynonym\", \"width\": \"200px\" },\r\n                        { \"idsName\": \"IDS_SAMPLEARNO\", \"dataField\": \"samplearno\", \"width\": \"200px\" },\r\n                        { \"idsName\": \"IDS_ARNO\", \"dataField\": \"sarno\", \"width\": \"200px\" }\r\n                    ]: [\r\n                        { \"idsName\": \"IDS_RULEDEPENDENTTESTNAME\", \"dataField\": \"stestsynonym\", \"width\": \"200px\" }, \r\n                        { \"idsName\": \"IDS_ARNO\", \"dataField\": \"sarno\", \"width\": \"200px\" }\r\n                    ]}\r\n                    childList={this.state.childListMap}\r\n                    activeTabName={\"IDS_AVAILABLETESTUNDERSAMPLE\"}\r\n                >\r\n                </DataGrid>) \r\n        this.props.Login.NewTestGroupTestAlert&&this.props.Login.masterData.RESelectedTest&&this.props.Login.masterData.RESelectedTest.filter(this.unavailableTestFilter).length>0  &&//this.props.Login.NewTestGroupTestAlert.length>0  &&\r\n            tabMap.set(\"IDS_TESTSNOTAVAILABLEUNDERSAMPLE\",\r\n                <DataGrid\r\n                    primaryKeyField=\"ntransactiontestcode\"\r\n                    dataResult={process(sortData(this.props.Login.masterData.RESelectedTest.filter(this.unavailableTestFilter), 'descending', 'ntransactiontestcode') || [],\r\n                    this.state.dataStateunavailabletest?this.state.dataStateunavailabletest:{ skip: 0, take: 10 })}\r\n                    dataState={this.state.dataStateunavailabletest?this.state.dataStateunavailabletest:{ skip: 0, take: 10 }}\r\n                    dataStateChange={this.dataStateUnAvailabletestAlert}\r\n                    extractedColumnList={[\r\n                        { \"idsName\": \"IDS_RULEAPPLIEDTESTNAME\", \"dataField\": \"stestsynonym\", \"width\": \"200px\" }\r\n                    ]}\r\n                    controlMap={this.state.controlMap}\r\n                    userRoleControlRights={this.state.userRoleControlRights}\r\n                       pageable={true} \r\n                    scrollable={'scrollable'}\r\n                    hideColumnFilter={true}\r\n                    selectedId={0}\r\n                    expandField=\"expanded\"\r\n                    handleExpandChange={() => {this.handleExpandChange(this.props.Login.NewTestGroupTestAlert)}}\r\n                    gridHeight={'350px'}\r\n                    gridWidth={'700px'}\r\n                    hasChild={true}\r\n                    childMappingField={'ntransactiontestcode'}\r\n                    childColumnList={[ \r\n                        { \"idsName\": \"IDS_RULEDEPENDENTTESTNAME\", \"dataField\": \"stestsynonym\", \"width\": \"200px\" }\r\n                    ]}\r\n                    childList={this.state.childListMap}\r\n                    activeTabName={\"IDS_TESTSNOTAVAILABLEUNDERSAMPLE\"}\r\n                >\r\n                </DataGrid>\r\n            ) \r\n        }\r\n        return tabMap;\r\n    }\r\n    closeModal = () => {\r\n        let loadEsign = this.props.Login.loadEsign;\r\n        let openModal = this.props.Login.openModal;\r\n        let openTemplateModal = this.props.Login.openTemplateModal;\r\n        let selectedRecord = this.props.Login.selectedRecord;\r\n        //let additionInfo=this.props.Login.additionInfo ||{};\r\n        let screenName = this.props.Login.screenName;\r\n        let operation = this.props.Login.operation;\r\n        let loadFile = this.props.Login.loadFile;\r\n        let updateInfo = {};\r\n        //additionInfo={...selectedRecord};\r\n        if (screenName === \"IDS_RESULTFORMULA\") {\r\n            screenName = \"IDS_RESULTENTRY\";\r\n            operation = \"update\";\r\n            let showValidate = !this.props.Login.showValidate;\r\n            updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: { screenName, operation, showValidate, validateFormulaMandyFields: [] }\r\n            }\r\n        }\r\n        else {\r\n            if (this.props.Login.loadEsign) {\r\n                if (this.props.Login.operation === \"delete\"\r\n                    || this.props.Login.operation === \"complete\"\r\n                    || this.props.Login.operation === \"default\"\r\n                    || this.props.Login.operation === \"deleteTask\"\r\n                    || this.props.Login.operation === \"deleteInstrument\" || this.props.Login.operation === \"deleteMaterial\") {\r\n                    loadEsign = false;\r\n                    openModal = false;\r\n                    selectedRecord = {};\r\n                }\r\n                else if (this.props.Login.operation === \"updatechecklist\") {\r\n                    loadEsign = false;\r\n                    openModal = false;\r\n                }\r\n                else {\r\n                    loadEsign = false;\r\n                    selectedRecord['esignpassword'] = \"\";\r\n                    selectedRecord['esigncomments'] = \"\";\r\n                    selectedRecord['esignreason']=\"\";\r\n                }\r\n            } else {\r\n                openModal = false;\r\n                openTemplateModal = false;\r\n                selectedRecord = {};\r\n                loadFile = false;\r\n            }\r\n            updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: { openModal, loadEsign,openTemplateModal,screenName, selectedRecord,loadFile }\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n    onFilterComboChange = (event, fieldname) => {\r\n        if (event !== null) {\r\n            let inputData = [];\r\n\r\n            if (fieldname === \"fromDate\") {\r\n                let dateObj = convertDateValuetoString(event, this.props.Login.masterData.toDate, this.props.Login.userInfo)\r\n                inputData = {\r\n                    nflag: 2,\r\n                    fromdate: dateObj.fromDate,//this.OnDateConverstion(event, fieldname),\r\n                    todate: dateObj.toDate,//this.props.Login.masterData.toDate,\r\n                    nsampletypecode: parseInt(this.props.Login.masterData.defaultSampleType.nsampletypecode),\r\n                    nregtypecode: parseInt(this.props.Login.masterData.defaultRegistrationType.nregtypecode),\r\n                    nregsubtypecode: parseInt(this.props.Login.masterData.defaultRegistrationSubType.nregsubtypecode),\r\n                    //ntranscode: String(this.props.Login.masterData.defaultFilterStatus.ntransactionstatus),\r\n                    transcode: this.props.Login.masterData.defaultFilterStatus.ntransactionstatus === 0 ? \r\n                    this.props.Login.masterData.REFilterStatus.map(item => item.ntransactionstatus).join(\",\") : String(this.props.Login.masterData.defaultFilterStatus.ntransactionstatus), \r\n                    defaultRegistrationSubType: this.props.Login.masterData.defaultRegistrationSubType,\r\n                    userinfo: this.props.Login.userInfo,\r\n                    masterData: this.props.Login.masterData,\r\n                }\r\n                this.props.getREApprovalConfigVersion(inputData)\r\n            }\r\n            if (fieldname === \"toDate\") {\r\n\r\n                let dateObj = convertDateValuetoString(this.props.Login.masterData.fromDate, event, this.props.Login.userInfo)\r\n\r\n                inputData = {\r\n                    nflag: 2,\r\n                    fromdate: dateObj.fromDate,//this.props.Login.masterData.fromDate,\r\n                    todate: dateObj.toDate,//this.OnDateConverstion(event, fieldname),\r\n                    nsampletypecode: parseInt(this.props.Login.masterData.defaultSampleType.nsampletypecode),\r\n                    nregtypecode: parseInt(this.props.Login.masterData.defaultRegistrationType.nregtypecode),\r\n                    nregsubtypecode: parseInt(this.props.Login.masterData.defaultRegistrationSubType.nregsubtypecode),\r\n                    //ntranscode: String(this.props.Login.masterData.defaultFilterStatus.ntransactionstatus),\r\n                    transcode: this.props.Login.masterData.defaultFilterStatus.ntransactionstatus === 0 ? \r\n                    this.props.Login.masterData.REFilterStatus.map(item => item.ntransactionstatus).join(\",\") : String(this.props.Login.masterData.defaultFilterStatus.ntransactionstatus), \r\n                    defaultRegistrationSubType: this.props.Login.masterData.defaultRegistrationSubType,\r\n                    userinfo: this.props.Login.userInfo,\r\n                    masterData: this.props.Login.masterData,\r\n                }\r\n                this.props.getREApprovalConfigVersion(inputData)\r\n            }\r\n\r\n            // let obj = convertDateValuetoString(this.props.Login.masterData.fromDate, \r\n            //                  this.props.Login.masterData.toDate, this.props.Login.userInfo); \r\n\r\n            if (fieldname === \"nsampletypecode\") {\r\n\r\n                let obj = convertDateValuetoString((this.state.selectedRecord && this.state.selectedRecord[\"fromDate\"]) || this.props.Login.masterData.fromDate,\r\n                    (this.state.selectedRecord && this.state.selectedRecord[\"toDate\"]) || this.props.Login.masterData.toDate, this.props.Login.userInfo);\r\n\r\n                inputData = {\r\n                    nflag: 2,\r\n                    nsampletypecode: parseInt(event.value),\r\n                    fromdate: obj.fromDate,//(this.state.selectedRecord && this.state.selectedRecord[\"fromDate\"]) || this.props.Login.masterData.fromDate,\r\n                    todate: obj.toDate,//(this.state.selectedRecord && this.state.selectedRecord[\"toDate\"]) || this.props.Login.masterData.toDate,\r\n                    userinfo: this.props.Login.userInfo,\r\n                    defaultSampleType: event.item,\r\n                    masterData: this.props.Login.masterData,\r\n                }\r\n                this.props.getRERegistrationType(inputData)\r\n            }\r\n            else if (fieldname === \"nregtypecode\") {\r\n\r\n                let obj = convertDateValuetoString((this.state.selectedRecord && this.state.selectedRecord[\"fromDate\"]) || this.props.Login.masterData.fromDate,\r\n                    (this.state.selectedRecord && this.state.selectedRecord[\"toDate\"]) || this.props.Login.masterData.toDate, this.props.Login.userInfo);\r\n\r\n\r\n                inputData = {\r\n                    nflag: 3,\r\n                    nsampletypecode: parseInt(this.props.Login.masterData.defaultSampleType.nsampletypecode),\r\n                    fromdate: obj.fromDate,//(this.state.selectedRecord && this.state.selectedRecord[\"fromDate\"]) || this.props.Login.masterData.fromDate,\r\n                    todate: obj.toDate,//(this.state.selectedRecord && this.state.selectedRecord[\"toDate\"]) || this.props.Login.masterData.toDate,\r\n                    nregtypecode: parseInt(event.value),\r\n                    userinfo: this.props.Login.userInfo,\r\n                    defaultRegistrationType: event.item,\r\n                    masterData: this.props.Login.masterData,\r\n                }\r\n                this.props.getRERegistrationSubType(inputData)\r\n            }\r\n            else if (fieldname === \"nregsubtypecode\") {\r\n\r\n                let obj = convertDateValuetoString(this.props.Login.masterData.fromDate,\r\n                    this.props.Login.masterData.toDate, this.props.Login.userInfo);\r\n\r\n                inputData = {\r\n                    nflag: 4,\r\n                    fromdate: obj.fromDate,//this.props.Login.masterData.fromDate,\r\n                    todate: obj.toDate,//this.props.Login.masterData.toDate,\r\n                    nsampletypecode: parseInt(this.props.Login.masterData.defaultSampleType.nsampletypecode),\r\n                    nregtypecode: parseInt(this.props.Login.masterData.defaultRegistrationType.nregtypecode),\r\n                    nregsubtypecode: event.value,\r\n                    userinfo: this.props.Login.userInfo,\r\n                    defaultRegistrationSubType: event.item,\r\n                    masterData: this.props.Login.masterData,\r\n                }\r\n                this.props.getREApprovalConfigVersion(inputData)\r\n            }\r\n\r\n            else if (fieldname === 'ndesigntemplatemappingcode') {\r\n                let obj = convertDateValuetoString(this.props.Login.masterData.fromDate,\r\n                    this.props.Login.masterData.toDate, this.props.Login.userInfo);\r\n\r\n                const inputParamData = {\r\n                    nflag: 3,\r\n                    fromdate: obj.fromDate,//this.props.Login.masterData.fromDate,\r\n                    todate: obj.toDate,\r\n                    nsampletypecode: parseInt(this.props.Login.masterData.defaultSampleType.nsampletypecode),\r\n                    nregtypecode: parseInt(this.props.Login.masterData.defaultRegistrationType.nregtypecode),\r\n                    nregsubtypecode: parseInt(this.props.Login.masterData.defaultRegistrationSubType.nregsubtypecode),\r\n                    napprovalversioncode: this.props.Login.masterData.ApprovalConfigVersion[0].napprovalconfigversioncode,\r\n                    userinfo: this.props.Login.userInfo,\r\n                    masterData: this.props.Login.masterData,\r\n                    //defaultFilterStatus: event.item,\r\n                    defaultRegistrationSubType: this.props.Login.masterData.defaultRegistrationSubType,\r\n                    //ntranscode: String(this.props.Login.masterData.defaultFilterStatus.ntransactionstatus),\r\n                    ntranscode: this.props.Login.masterData.defaultFilterStatus.ntransactionstatus === 0 ? \r\n                    this.props.Login.masterData.REFilterStatus.map(item => item.ntransactionstatus).join(\",\") : String(this.props.Login.masterData.defaultFilterStatus.ntransactionstatus), \r\n                    nneedsubsample: this.props.Login.masterData.realRegSubTypeValue.nneedsubsample || false,\r\n                    // stransactionstatus: this.props.Login.masterData.defaultFilterStatus.ntransactionstatus === 0 ? this.props.Login.masterData.FilterStatus.map(item => item.ntransactionstatus).join(\",\") : this.props.Login.masterData.defaultFilterStatus.ntransactionstatus,\r\n                    //nsectioncode: this.props.Login.masterData.UserSectionValue.nsectioncode === -1 ? this.props.Login.masterData.UserSection.map(item => item.nsectioncode).join(\",\") : this.props.Login.masterData.UserSectionValue.nsectioncode,\r\n                    ndesigntemplatemappingcode: event.value,\r\n                    DesignTemplateMappingValue: event.item,\r\n                    defaultRegistrationSubType : this.props.Login.masterData.defaultRegistrationSubType\r\n                }\r\n                //this.props.getREFilterTestData(inputParamData)\r\n                this.props.getREFilterTemplate(inputParamData)\r\n\r\n            }\r\n\r\n            else if (fieldname === \"version\") {\r\n\r\n                let obj = convertDateValuetoString(this.props.Login.masterData.fromDate,\r\n                    this.props.Login.masterData.toDate, this.props.Login.userInfo);\r\n\r\n                inputData = {\r\n                    nflag: 4,\r\n                    fromdate: obj.fromDate,//this.props.Login.masterData.fromDate,\r\n                    todate: obj.toDate,//this.props.Login.masterData.toDate,\r\n                    nsampletypecode: parseInt(this.props.Login.masterData.defaultSampleType.nsampletypecode),\r\n                    nregtypecode: parseInt(this.props.Login.masterData.defaultRegistrationType.nregtypecode),\r\n                    nregsubtypecode: parseInt(this.props.Login.masterData.defaultRegistrationSubType.nregsubtypecode),\r\n                    napprovalversioncode: event.value,\r\n                    userinfo: this.props.Login.userInfo,\r\n                    defaultApprovalConfigVersion: event.item,\r\n                    masterData: this.props.Login.masterData,\r\n                   //ntranscode: String(this.props.Login.masterData.defaultFilterStatus.ntransactionstatus),\r\n                   ntranscode: this.props.Login.masterData.defaultFilterStatus.ntransactionstatus === 0 ? \r\n                                this.props.Login.masterData.REFilterStatus.map(item => item.ntransactionstatus).join(\",\") : String(this.props.Login.masterData.defaultFilterStatus.ntransactionstatus), \r\n                    ndesigntemplatemappingcode: this.props.Login.masterData.ndesigntemplatemappingcode ? this.props.Login.masterData.ndesigntemplatemappingcode : -1,\r\n                    defaultRegistrationSubType : this.props.Login.masterData.defaultRegistrationSubType\r\n                }\r\n                this.props.getREJobStatus(inputData)\r\n            }\r\n            else if (fieldname === \"jobstatus\") {\r\n\r\n                let obj = convertDateValuetoString(this.props.Login.masterData.fromDate,\r\n                    this.props.Login.masterData.toDate, this.props.Login.userInfo);\r\n\r\n                inputData = {\r\n                    nflag: 5,\r\n                    fromdate: obj.fromDate,//this.props.Login.masterData.fromDate,\r\n                    todate: obj.toDate,//this.props.Login.masterData.toDate,\r\n                    nsampletypecode: parseInt(this.props.Login.masterData.defaultSampleType.nsampletypecode),\r\n                    nregtypecode: parseInt(this.props.Login.masterData.defaultRegistrationType.nregtypecode),\r\n                    nregsubtypecode: parseInt(this.props.Login.masterData.defaultRegistrationSubType.nregsubtypecode),\r\n                    napprovalversioncode: parseInt(this.props.Login.masterData.defaultApprovalConfigVersion.napprovalconfigversioncode),\r\n                    njobstatuscode: event.value,\r\n                    userinfo: this.props.Login.userInfo,\r\n                    defaultjobstatus: event.item,\r\n                    masterData: this.props.Login.masterData,\r\n                }\r\n                this.props.getREFilterStatus(inputData)\r\n            }\r\n            else if (fieldname === \"filter\") {\r\n\r\n                let obj = convertDateValuetoString(this.props.Login.masterData.fromDate,\r\n                    this.props.Login.masterData.toDate, this.props.Login.userInfo);\r\n\r\n                inputData = {\r\n                    nflag: 5,\r\n                    fromdate: obj.fromDate,//this.props.Login.masterData.fromDate,\r\n                    todate: obj.toDate,//this.props.Login.masterData.toDate,\r\n                    nsampletypecode: parseInt(this.props.Login.masterData.defaultSampleType.nsampletypecode),\r\n                    nregtypecode: parseInt(this.props.Login.masterData.defaultRegistrationType.nregtypecode),\r\n                    nregsubtypecode: parseInt(this.props.Login.masterData.defaultRegistrationSubType.nregsubtypecode),\r\n                    napprovalversioncode: parseInt(this.props.Login.masterData.defaultApprovalConfigVersion.napprovalconfigversioncode),\r\n                    njobstatuscode: 1,// parseInt(this.props.Login.masterData.defaultjobstatus.njobstatuscode),\r\n                    ntranscode: event.value === 0 ?  this.props.Login.masterData.REFilterStatus.map(item => item.ntransactionstatus).join(\",\"): String(event.value),\r\n                    userinfo: this.props.Login.userInfo,\r\n                    defaultFilterStatus: event.item,\r\n                    masterData: this.props.Login.masterData,\r\n                    DesignTemplateMappingValue: this.props.Login.masterData.DesignTemplateMappingValue,\r\n                    ndesigntemplatemappingcode: this.props.Login.masterData.ndesigntemplatemappingcode ? this.props.Login.masterData.ndesigntemplatemappingcode : -1,\r\n                    defaultRegistrationSubType: this.props.Login.masterData.defaultRegistrationSubType && this.props.Login.masterData.defaultRegistrationSubType\r\n                }\r\n                this.props.getREFilterTestData(inputData)\r\n            }\r\n            else if (fieldname === \"test\") {\r\n\r\n                let defaultTestvalues = event.item;\r\n                this.props.Login.masterData.defaultTestvalues = defaultTestvalues;\r\n                // const updateInfo = {\r\n                //     typeName: DEFAULT_RETURN,\r\n                //     data: { masterData: { ...this.props.Login.masterData } }\r\n                // }\r\n                // this.props.updateStore(updateInfo);\r\n                inputData = {\r\n                    defaultTestvalues,\r\n                    ntestcode : this.props.Login.masterData.defaultTestvalues.ntestcode,\r\n                    masterData: this.props.Login.masterData,\r\n                    defaultRegistrationSubType : this.props.Login.masterData.defaultRegistrationSubType,\r\n                    ntranscode: this.props.Login.masterData.defaultFilterStatus.ntransactionstatus === 0 ? \r\n                                this.props.Login.masterData.REFilterStatus.map(item => item.ntransactionstatus).join(\",\") : this.props.Login.masterData.defaultFilterStatus.ntransactionstatus, \r\n                    userinfo:this.props.Login.userInfo,\r\n                    napprovalversioncode: parseInt(this.props.Login.masterData.defaultApprovalConfigVersion.napprovalconfigversioncode)\r\n\r\n                }\r\n                this.props.getConfigurationFilter(inputData)\r\n            }\r\n            else if (fieldname === \"nconfigfiltercode\") {\r\n\r\n                let defaultConfigurationFilterValue = event.item;\r\n                this.props.Login.masterData.defaultConfigurationFilterValue = defaultConfigurationFilterValue;\r\n                inputData = {\r\n                    defaultConfigurationFilterValue,\r\n                    nconfigfiltercode : parseInt(this.props.Login.masterData.defaultConfigurationFilterValue.nconfigfiltercode),\r\n                    ntestcode : this.props.Login.masterData.defaultTestvalues.ntestcode,\r\n                    masterData: this.props.Login.masterData,\r\n                    defaultRegistrationSubType : this.props.Login.masterData.defaultRegistrationSubType,\r\n                    //ntranscode: this.props.Login.masterData.defaultFilterStatus.ntransactionstatus,\r\n                    ntranscode: this.props.Login.masterData.defaultFilterStatus.ntransactionstatus === 0 ? \r\n                                this.props.Login.masterData.REFilterStatus.map(item => item.ntransactionstatus).join(\",\") : this.props.Login.masterData.defaultFilterStatus.ntransactionstatus, \r\n                    napprovalversioncode: parseInt(this.props.Login.masterData.defaultApprovalConfigVersion.napprovalconfigversioncode)\r\n                }\r\n                this.props.getTestBasedBatchWorklist(inputData)\r\n            }\r\n            else if (fieldname === \"nworklistcode\") {\r\n\r\n                let defaultWorklistvalue = event.item;\r\n                this.props.Login.masterData.defaultWorklistvalue = defaultWorklistvalue;\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: { masterData: { ...this.props.Login.masterData } }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            if (fieldname === \"nbatchmastercode\") \r\n            {\r\n                let defaultBatchvalue = event.item;\r\n                this.props.Login.masterData.defaultBatchvalue = defaultBatchvalue;\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: { masterData: { ...this.props.Login.masterData } }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n    }\r\n}\r\n        else\r\n        {\r\n            if(fieldname === \"nconfigfiltercode\")\r\n            {\r\n                this.props.Login.masterData.defaultConfigurationFilterValue = [];\r\n                this.props.Login.masterData.defaultWorklistvalue = [];\r\n                this.props.Login.masterData.defaultBatchvalue = [];\r\n\r\n                 const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: { masterData: { ...this.props.Login.masterData } }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n        }\r\n    }\r\n    OnDateConverstion = (date, fieldname) => {\r\n        const month = validateTwoDigitDate(String(date.getMonth() + 1));\r\n        const day = validateTwoDigitDate(String(date.getDate()));\r\n        if (fieldname === \"fromDate\") {\r\n            date = date.getFullYear() + '-' + month + '-' + day + \"T00:00:00\";\r\n        }\r\n        else {\r\n            date = date.getFullYear() + '-' + month + '-' + day + \"T23:59:00\";\r\n        }\r\n        return date;\r\n    }\r\n    onReload = () => {\r\n        let { realFromDate, realToDate, realSampleTypeValue, realRegTypeValue, realRegSubTypeValue, realApproveConfigVersion,\r\n            realFilterStatusValue, realTestcodeValue,realWorklistCodeValue } = this.props.Login.masterData\r\n        //let obj = this.covertDatetoString(realFromDate, realToDate)\r\n        let obj = convertDateValuetoString(realFromDate, realToDate, this.props.Login.userInfo);\r\n        let masterData = { ...this.props.Login.masterData, realFromDate: obj.fromDate, realToDate: obj.toDate, realSampleTypeValue, realRegTypeValue, realRegSubTypeValue, realFilterStatusValue, realApproveConfigVersion, realTestcodeValue }\r\n        let inputData = {\r\n            nsampletypecode: (realSampleTypeValue && realSampleTypeValue.nsampletypecode) || -1,\r\n            nregtypecode: (realRegTypeValue && realRegTypeValue.nregtypecode) || -1,\r\n            nregsubtypecode: (realRegSubTypeValue && realRegSubTypeValue.nregsubtypecode) || -1,\r\n            napprovalversioncode: (realApproveConfigVersion && realApproveConfigVersion.napprovalconfigversioncode) || -1,\r\n            ntranscode: String(realFilterStatusValue ? realFilterStatusValue.ntransactionstatus : -1),\r\n            ntestcode: realTestcodeValue ? realTestcodeValue.ntestcode : -1,\r\n            ntransactiontestcode: 0,\r\n            njobstatuscode: (this.props.Login.masterData.defaultjobstatus && this.props.Login.masterData.defaultjobstatus.njobstatuscode) || 1,\r\n            fromdate: obj.fromDate,\r\n            todate: obj.toDate,\r\n            userinfo: this.props.Login.userInfo,\r\n            activeTestKey: this.props.Login.activeTestKey || \"IDS_RESULTS\",\r\n            showTest: true,\r\n            showSample: false,\r\n            checkBoxOperation: 3,\r\n            ndesigntemplatemappingcode: this.props.Login.masterData.ndesigntemplatemappingcode,\r\n            nworlistcode : (realWorklistCodeValue && realWorklistCodeValue.nworklistcode) || -1\r\n        }\r\n        const inpuParamData = {\r\n            inputData,\r\n            masterData,\r\n            refs: { searchSampleRef: this.searchSampleRef, searchSubSampleRef: this.searchSubSampleRef, searchTestRef: this.searchTestRef },\r\n            resultDataState: this.state.resultDataState,\r\n            instrumentDataState: this.state.instrumentDataState,\r\n            materialDataState: this.state.materialDataState,\r\n            taskDataState: this.state.taskDataState,\r\n            documentDataState: this.state.documentDataState,\r\n            resultChangeDataState: this.state.resultChangeDataState,\r\n            testCommentDataState: this.state.testCommentDataState,\r\n            historyDataState: this.state.historyDataState,\r\n        }\r\n        if (inputData.nsampletypecode !== -1 && inputData.nregtypecode !== -1 && inputData.nregsubtypecode !== -1 && inputData.napprovalversioncode !== -1\r\n            && inputData.ntranscode !== -1 && inputData.njobstatuscode !== -1 && inputData.ntestcode !== -1) {\r\n            this.props.getResultEntryDetails(inpuParamData)\r\n        }\r\n        else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_PLSSELECTALLTHEVALUEINFILTER\" }));\r\n        }\r\n    }\r\n\r\n    onDesignTemplateChange = (event, fieldName, labelname) => {\r\n        let masterData = this.props.Login.masterData;\r\n        masterData = {\r\n            ...masterData,\r\n            [labelname]: { ...event.item }\r\n        }\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { masterData }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n    onREFilterSubmit = (event) => {\r\n        // let realFromDate = new Date(this.props.Login.masterData.fromDate)\r\n        // let realToDate = new Date(this.props.Login.masterData.toDate)\r\n        let realFromDate = rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.fromDate);\r\n        let realToDate = rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.toDate);\r\n        let realSampleTypeValue = this.props.Login.masterData.defaultSampleType && this.props.Login.masterData.defaultSampleType\r\n        let realRegTypeValue = this.props.Login.masterData.defaultRegistrationType && this.props.Login.masterData.defaultRegistrationType\r\n        let realRegSubTypeValue = this.props.Login.masterData.defaultRegistrationSubType && this.props.Login.masterData.defaultRegistrationSubType\r\n        let realApproveConfigVersion = this.props.Login.masterData.defaultApprovalConfigVersion && this.props.Login.masterData.defaultApprovalConfigVersion\r\n        let realFilterStatusValue = this.props.Login.masterData.defaultFilterStatus && this.props.Login.masterData.defaultFilterStatus\r\n        let realTestcodeValue = this.props.Login.masterData.defaultTestvalues && this.props.Login.masterData.defaultTestvalues\r\n        let realWorklistCodeValue = this.props.Login.masterData.defaultWorklistvalue &&  this.props.Login.masterData.defaultWorklistvalue\r\n        let realBatchCodeValue = this.props.Login.masterData.defaultBatchvalue &&  this.props.Login.masterData.defaultBatchvalue\r\n\r\n        //let obj = this.covertDatetoString(realFromDate, realToDate)\r\n        let obj = convertDateValuetoString(realFromDate, realToDate, this.props.Login.userInfo);\r\n        let masterData = { ...this.props.Login.masterData, realFromDate: obj.fromDate, realToDate: obj.toDate, realSampleTypeValue, realRegTypeValue, realRegSubTypeValue, realFilterStatusValue, realApproveConfigVersion, realTestcodeValue,realWorklistCodeValue,realBatchCodeValue }\r\n        let inputData = {\r\n            nsampletypecode: (this.props.Login.masterData.defaultSampleType && this.props.Login.masterData.defaultSampleType.nsampletypecode) || -1,\r\n            nregtypecode: (this.props.Login.masterData.defaultRegistrationType && this.props.Login.masterData.defaultRegistrationType.nregtypecode) || -1,\r\n            nregsubtypecode: (this.props.Login.masterData.defaultRegistrationSubType && this.props.Login.masterData.defaultRegistrationSubType.nregsubtypecode) || -1,\r\n            napprovalversioncode: (this.props.Login.masterData.defaultApprovalConfigVersion && this.props.Login.masterData.defaultApprovalConfigVersion.napprovalconfigversioncode) || -1,\r\n            ntranscode: this.props.Login.masterData.defaultFilterStatus && this.props.Login.masterData.defaultFilterStatus.ntransactionstatus === 0 ? \r\n            this.props.Login.masterData.REFilterStatus.map(item => item.ntransactionstatus).join(\",\") : String(this.props.Login.masterData.defaultFilterStatus.ntransactionstatus), \r\n            //ntranscode: String(this.props.Login.masterData.defaultFilterStatus ? this.props.Login.masterData.defaultFilterStatus.ntransactionstatus : -1),\r\n            ntestcode: this.props.Login.masterData.defaultTestvalues ? this.props.Login.masterData.defaultTestvalues.ntestcode : -1,\r\n            ntransactiontestcode: 0,\r\n            njobstatuscode: (this.props.Login.masterData.defaultjobstatus && this.props.Login.masterData.defaultjobstatus.njobstatuscode) || 1,\r\n            fromdate: obj.fromDate,\r\n            todate: obj.toDate,\r\n            userinfo: this.props.Login.userInfo,\r\n            activeTestKey: this.props.Login.activeTestKey || \"IDS_RESULTS\",\r\n            showTest: true,\r\n            showSample: false,\r\n            nneedsubsample: (this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nneedsubsample) || false,\r\n            checkBoxOperation: 3,\r\n            ndesigntemplatemappingcode: (this.props.Login.masterData.DesignTemplateMappingValue && this.props.Login.masterData.DesignTemplateMappingValue.ndesigntemplatemappingcode) || -1,\r\n            nneedtemplatebasedflow: (this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nneedtemplatebasedflow) || false,\r\n            nworlistcode : (this.props.Login.masterData.defaultWorklistvalue && this.props.Login.masterData.defaultWorklistvalue.nworklistcode) || -1,\r\n            nbatchmastercode : (this.props.Login.masterData.defaultBatchvalue && this.props.Login.masterData.defaultBatchvalue.nbatchmastercode) || -1\r\n        }\r\n        const inpuParamData = {\r\n            inputData,\r\n            masterData,\r\n            refs: { searchSampleRef: this.searchSampleRef, searchSubSampleRef: this.searchSubSampleRef, searchTestRef: this.searchTestRef },\r\n            resultDataState: this.state.resultDataState,\r\n            instrumentDataState: this.state.instrumentDataState,\r\n            materialDataState: this.state.materialDataState,\r\n            taskDataState: this.state.taskDataState,\r\n            documentDataState: this.state.documentDataState,\r\n            resultChangeDataState: this.state.resultChangeDataState,\r\n            testCommentDataState: this.state.testCommentDataState,\r\n            historyDataState: this.state.historyDataState\r\n        }\r\n\r\n        if (inputData.nsampletypecode !== -1 && inputData.nregtypecode !== -1 && inputData.nregsubtypecode !== -1 && inputData.napprovalversioncode !== -1\r\n            && inputData.ntranscode !== -1 && inputData.njobstatuscode !== -1 && inputData.ntestcode !== undefined) {\r\n            this.props.getResultEntryDetails(inpuParamData)\r\n        }\r\n        else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_PLSSELECTALLTHEVALUEINFILTER\" }));\r\n        }\r\n    }\r\n\r\n    // covertDatetoString(startDateValue, endDateValue) {\r\n    //     const startDate = new Date(startDateValue);\r\n    //     const endDate = new Date(endDateValue);\r\n\r\n    //     const prevMonth = validateTwoDigitDate(String(startDate.getMonth() + 1));\r\n    //     const currentMonth = validateTwoDigitDate(String(endDate.getMonth() + 1));\r\n    //     const prevDay = validateTwoDigitDate(String(startDate.getDate()));\r\n    //     const currentDay = validateTwoDigitDate(String(endDate.getDate()));\r\n\r\n    //     const fromDateOnly = startDate.getFullYear() + '-' + prevMonth + '-' + prevDay;\r\n    //     const toDateOnly = endDate.getFullYear() + '-' + currentMonth + '-' + currentDay;\r\n\r\n    //     const fromDate = startDate.getFullYear() + '-' + prevMonth + '-' + prevDay + \"T00:00:00\";\r\n    //     const toDate = endDate.getFullYear() + '-' + currentMonth + '-' + currentDay + \"T23:59:59\";\r\n    //     return ({ fromDate, toDate, breadCrumbFrom: fromDateOnly, breadCrumbto: toDateOnly })\r\n    // }\r\n    onSecondaryPaneSizeChange = (e, val) => {\r\n\r\n        // let hGrand = this.state.grandparentheight\r\n        // let check = e - 400;\r\n        // if (check > 1) {\r\n        //     hGrand = this.state.parentHeight + check\r\n        // }\r\n        // this.setState({\r\n        //     paneHeight: e - val,\r\n        //     secondPaneHeight: hGrand - e - 70,\r\n        //     grandparentheight: hGrand\r\n        // })\r\n        // this.setState({\r\n        //     paneHeight: e - val,\r\n        //     secondPaneHeight: this.state.parentHeight - e - 70\r\n        // })\r\n    }\r\n\r\n    onComboCategoryChange = (event, fieldname) => {\r\n        if (event !== null) {\r\n            let uRL = \"\";\r\n            let inputData = [];\r\n            uRL = 'resultentrybysample/getResultUsedInstrumentCombo';\r\n            if (fieldname === \"ninstrumentcatcode\") {\r\n                inputData = {\r\n                    userinfo: this.props.Login.userInfo,\r\n                    nflag: 2,\r\n                    ninstrumentcatcode: event.value,\r\n                    ncalibrationRequired: event.item.ncalibrationreq\r\n                }\r\n            }\r\n            rsapi.post(uRL, inputData)\r\n                .then(response => {\r\n                    const TagInstrument = constructOptionList(response.data.Instrument || [], \"ninstrumentcode\",\r\n                        \"sinstrumentid\", undefined, undefined, undefined);\r\n                    const TagListInstrument = TagInstrument.get(\"OptionList\")\r\n\r\n                    const updateInfo = {\r\n                        typeName: DEFAULT_RETURN,\r\n                        data: {\r\n                            masterData: { ...this.props.Login.masterData, Instrument: TagListInstrument },\r\n                            selectedRecord: {\r\n                                ...this.props.Login.selectedRecord,\r\n                                [fieldname]: event,\r\n                                ninstrumentcode: TagInstrument.get(\"DefaultValue\") ? TagInstrument.get(\"DefaultValue\") : [],\r\n\r\n                            }\r\n                        }\r\n                    }\r\n                    this.props.updateStore(updateInfo);\r\n\r\n                    // const selectedRecord = this.state.selectedRecord || {};\r\n                    // selectedRecord[fieldname] = event;\r\n                    // this.setState({ selectedRecord });\r\n\r\n                })\r\n                .catch(error => {\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    }\r\n                    else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                })\r\n        }\r\n    }\r\n\r\n\r\n    showRESampleInfo() {\r\n        this.setState({ showSample: true, showTest: false })\r\n    }\r\n\r\n    showRETestList() {\r\n        this.setState({ showTest: true, showSample: false, showSubSample: false })\r\n    }\r\n\r\n    // getMeanTestParameter =(meanParam)=>{\r\n    //     const inputData = {npreregno:meanParam.selectedRecord.npreregno,\r\n    //                        userinfo:this.props.Login.userInfo}\r\n    //     return rsapi.post(\"resultentrybysample/getMeanCalculationTestParameter\", inputData)\r\n    //         .then(response => {\r\n    //            const list =  response.data || [];\r\n    //            const optionList = [];\r\n    //            list.map(item=>{optionList.push({item:item, label:item.stestsynonym+\"-\"+item.sparametername+\"-\"+item.sresult, value:item.ntransactiontestresultcode})})\r\n    //            this.setState({meanTestParameterList:optionList});                \r\n    //         })\r\n    //         .catch(error => {\r\n    //             if (error.response.status === 500) {\r\n    //                 toast.error(error.message);\r\n    //             } else {\r\n    //                 toast.warn(error.response.data);\r\n    //             }\r\n    //         })\r\n    // }\r\n\r\n    showRESubSampleinfo() {\r\n        this.setState({ showSample: false, showTest: true, showSubSample: !this.state.showSubSample })\r\n    } \r\n    testRETabDetail = () => {\r\n        const testTabMap = new Map();\r\n        //let npreregno = this.props.Login.masterData.RESelectedSample ? this.props.Login.masterData.RESelectedSample.map(sample => sample.npreregno).join(\",\") : \"-1\";\r\n        let ntransactiontestcode = this.props.Login.masterData.RESelectedTest ? this.props.Login.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\") : \"-1\";\r\n        let { testskip, testtake } = this.state\r\n        let testList = this.props.Login.masterData.RE_TEST || [];\r\n        testList = testList.slice(testskip, testskip + testtake);\r\n\r\n        const meanControlId = this.state.controlMap.has(\"CalculateMean\") && this.state.controlMap.get(\"CalculateMean\").ncontrolcode\r\n\r\n        let selectedTestList = getSameRecordFromTwoArrays(testList, this.props.Login.masterData.RESelectedTest, \"ntransactiontestcode\");\r\n        testTabMap.set(\"IDS_RESULTS\", <ResultEntryResultsTab\r\n            userInfo={this.props.Login.userInfo}\r\n            genericLabel ={this.props.Login.genericLabel}\r\n            masterData={this.props.Login.masterData}\r\n            inputParam={this.props.Login.inputParam}\r\n            dataState={this.state.resultDataState}\r\n            dataStateChange={this.dataStateChange}\r\n            fetchRecord={this.props.parameterRecord}\r\n            editpredefinedcomments={this.editpredefinedcomments}\r\n            enforceResult={this.enforceResult}\r\n            controlMap={this.state.controlMap}\r\n            parameterParam={{ primaryKeyField: \"ntransactionresultcode\", masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo }}\r\n            checkListRecord={this.checkListRecord}\r\n            checklistParam={{ masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo }}\r\n            selectedId={this.props.Login.selectedId || null}\r\n            viewFile={this.props.viewAttachment}\r\n            userRoleControlRights={this.state.userRoleControlRights}\r\n            screenName=\"IDS_RESULTS\"\r\n            getMeanTestParameter={this.props.getMeanCalculationTestParameter}\r\n            meanParam={{ \"userInfo\": this.props.Login.userInfo, ncontrolCode: meanControlId }}\r\n        />)\r\n        testTabMap.set(\"IDS_INSTRUMENT\", <ApprovalInstrumentTab\r\n            userInfo={this.props.Login.userInfo}\r\n            genericLabel ={this.props.Login.genericLabel}\r\n            masterData={this.props.Login.masterData}\r\n            inputParam={this.props.Login.inputParam}\r\n            methodUrl={\"ResultUsedInstrument\"}\r\n            controlMap={this.state.controlMap}\r\n            deleteParam={{ masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo }}\r\n            editParam={{ masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo }}\r\n            dataState={this.state.instrumentDataState}\r\n            selectedId={this.props.Login.selectedId || null}\r\n            isActionRequired={true}\r\n            dataStateChange={this.dataStateChange}\r\n            deleteRecord={this.deleteInstrumentRecord}\r\n            fetchRecord={this.fetchInstrumentRecord}\r\n            userRoleControlRights={this.state.userRoleControlRights}\r\n            screenName=\"IDS_INSTRUMENT\"\r\n        />)\r\n        testTabMap.set(\"IDS_MATERIAL\", <ResultUsedMaterial\r\n            userInfo={this.props.Login.userInfo}\r\n            genericLabel ={this.props.Login.genericLabel}\r\n            masterData={this.props.Login.masterData}\r\n            inputParam={this.props.Login.inputParam}\r\n            methodUrl={\"ResultUsedMaterial\"}\r\n            controlMap={this.state.controlMap}\r\n            deleteParam={{ masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo }}\r\n            editParam={{ masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo }}\r\n            dataState={this.state.materialDataState}\r\n            selectedId={this.props.Login.selectedId || null}\r\n            isActionRequired={true}\r\n            dataStateChange={this.dataStateChange}\r\n            deleteRecord={this.deleteMaterialRecord}\r\n            fetchRecord={this.props.fetchMaterialRecord}\r\n            userRoleControlRights={this.state.userRoleControlRights}\r\n            screenName=\"IDS_MATERIAL\"\r\n        />)\r\n        testTabMap.set(\"IDS_TASK\", <ResultEntryTaskTab\r\n            userInfo={this.props.Login.userInfo}\r\n            genericLabel={this.props.Login.genericLabel}\r\n            masterData={this.props.Login.masterData}\r\n            inputParam={this.props.Login.inputParam}\r\n            methodUrl={\"ResultUsedTask\"}\r\n            addResultEntryTask={this.addResultEntryTask}\r\n            controlMap={this.state.controlMap}\r\n            deleteParam={{\r\n                masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo,\r\n                ncontrolcode: this.state.controlMap.has(\"DeleteResultUsedTask\") && this.state.controlMap.get(\"DeleteResultUsedTask\").ncontrolcode\r\n            }}\r\n            editParam={{\r\n                masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo,\r\n                ncontrolcode: this.state.controlMap.has(\"EditResultUsedTask\") && this.state.controlMap.get(\"EditResultUsedTask\").ncontrolcode\r\n            }}\r\n            dataState={this.state.taskDataState}\r\n            selectedId={this.props.Login.selectedId || null}\r\n            isActionRequired={true}\r\n            dataStateChange={this.dataStateChange}\r\n            deleteRecord={this.deleteTaskRecord}\r\n            fetchRecord={this.fetchTaskRecord}\r\n            //fetchRecord={this.fetchInstrumentRecord}\r\n            userRoleControlRights={this.state.userRoleControlRights}\r\n            screenName=\"IDS_TASK\" />)\r\n        testTabMap.set(\"IDS_TESTATTACHMENTS\", <Attachments\r\n            screenName=\"IDS_TESTATTACHMENTS\"\r\n            selectedMaster=\"RESelectedTest\"\r\n            onSaveClick={this.onAttachmentSaveClick}\r\n            controlMap={this.state.controlMap}\r\n            userRoleControlRights={this.state.userRoleControlRights}\r\n            masterList={selectedTestList}\r\n            masterAlertStatus={\"IDS_SELECTTESTTOADDATTACHEMENT\"}\r\n            attachments={this.props.Login.masterData.RegistrationTestAttachment || []}\r\n            deleteRecord={this.props.deleteAttachment}\r\n            fetchRecord={this.props.getAttachmentCombo}\r\n            addName={\"AddTestAttachment\"}\r\n            editName={\"EditTestAttachment\"}\r\n            deleteName={\"DeleteTestAttachment\"}\r\n            viewName={\"ViewTestAttachment\"}\r\n            methodUrl={\"TestAttachment\"}\r\n            nsubsampleneed={this.props.Login.masterData.realRegSubTypeValue.nneedsubsample}\r\n            subFields={[{ [designProperties.VALUE]: \"stestsynonym\" }, { [designProperties.VALUE]: \"dcreateddate\" }]}\r\n            userInfo={this.props.Login.userInfo}\r\n            isneedReport = {true}\r\n            deleteParam={\r\n                {\r\n                    methodUrl: \"TestAttachment\",\r\n                    ntransactiontestcode,\r\n                    userInfo: this.props.Login.userInfo,\r\n                    masterData: this.props.Login.masterData,\r\n                    esignRights: this.props.Login.userRoleControlRights,\r\n                    screenName: \"IDS_TESTATTACHMENTS\"\r\n\r\n                }\r\n            }\r\n            editParam={{\r\n                methodUrl: \"TestAttachment\",\r\n                ntransactiontestcode,\r\n                userInfo: this.props.Login.userInfo,\r\n                masterData: this.props.Login.masterData,\r\n                esignRights: this.props.Login.userRoleControlRights,\r\n                screenName: \"IDS_TESTATTACHMENTS\",\r\n                masterList: selectedTestList//this.props.Login.masterData.RESelectedTest\r\n            }}\r\n            selectedListName=\"IDS_TESTS\"\r\n            displayName=\"stestsynonym\"\r\n        />)\r\n        testTabMap.set(\"IDS_TESTCOMMENTS\", <Comments\r\n            screenName=\"IDS_TESTCOMMENTS\"\r\n            isSampleTestComment={true}\r\n            selectedMaster=\"RESelectedTest\"\r\n            onSaveClick={this.onCommentsSaveClick}\r\n            controlMap={this.state.controlMap}\r\n            userRoleControlRights={this.state.userRoleControlRights}\r\n            Comments={this.props.Login.masterData.RegistrationTestComment || []}\r\n            fetchRecord={this.props.getCommentsCombo}\r\n            addName={\"AddTestComment\"}\r\n            editName={\"EditTestComment\"}\r\n            deleteName={\"DeleteTestComment\"}\r\n            methodUrl={\"TestComment\"}\r\n            masterList={selectedTestList}\r\n            masterAlertStatus={\"IDS_SELECTTESTTOADDCOMMENTS\"}\r\n            primaryKeyField={\"ntestcommentcode\"}\r\n            dataState={this.state.testCommentDataState}\r\n            dataStateChange={this.dataStateChange}\r\n            masterData={this.props.Login.masterData}\r\n            isTestComment={true}\r\n\r\n            deleteParam={\r\n                {\r\n                    methodUrl: \"TestComment\",\r\n                    ntransactiontestcode,\r\n                    userInfo: this.props.Login.userInfo,\r\n                    masterData: this.props.Login.masterData,\r\n                    esignRights: this.props.Login.userRoleControlRights,\r\n                    screenName: \"IDS_TESTCOMMENTS\",\r\n                    masterList: this.props.Login.masterData.RESelectedTest,\r\n                    ncontrolCode: this.state.controlMap.has(\"DeleteTestComment\") && this.state.controlMap.get(\"DeleteTestComment\").ncontrolcode\r\n\r\n                }\r\n            }\r\n            editParam={{\r\n                methodUrl: \"TestComment\",\r\n                ntransactiontestcode,\r\n                userInfo: this.props.Login.userInfo,\r\n                masterData: this.props.Login.masterData,\r\n                esignRights: this.props.Login.userRoleControlRights,\r\n                screenName: \"IDS_TESTCOMMENTS\",\r\n                operation: \"update\",\r\n                masterList: this.props.Login.masterData.RESelectedTest,\r\n                ncontrolCode: this.state.controlMap.has(\"EditTestComment\") && this.state.controlMap.get(\"EditTestComment\").ncontrolcode\r\n\r\n            }}\r\n            selectedListName=\"IDS_TESTS\"\r\n            displayName=\"stestsynonym\"\r\n            selectedId={this.props.Login.selectedId || null}\r\n        />)\r\n        testTabMap.set(\"IDS_RESULTCHANGEHISTORY\", <ResultChangeHistoryTab\r\n            userInfo={this.props.Login.userInfo}\r\n            genericLabel={this.props.Login.genericLabel}\r\n            ApprovalResultChangeHistory={this.props.Login.masterData.ResultChangeHistory || []}\r\n            inputParam={this.props.Login.inputParam}\r\n            dataState={this.state.resultChangeDataState}\r\n            dataStateChange={this.dataStateChange}\r\n            screenName=\"IDS_RESULTCHANGEHISTORY\"\r\n            controlMap={this.state.controlMap}\r\n            masterData={this.props.Login.masterData}\r\n            userRoleControlRights={this.state.userRoleControlRights}\r\n            selectedId={null}\r\n\r\n        />)\r\n\r\n        return testTabMap;\r\n    }\r\n\r\n    sampleDataStateChange = (event) => {\r\n        switch (this.props.Login.activeSampleKey) {\r\n            case \"IDS_APPROVALHISTORY\":\r\n                this.setState({\r\n                    sampleHistoryDataState: event.dataState\r\n                })\r\n                break;\r\n            default:\r\n                this.setState({\r\n                    sampleGridDataState: event.dataState\r\n                });\r\n                break;\r\n        }\r\n    }\r\n\r\n    sampleGridDataStateChange = (event) => {\r\n        this.setState({ sampleGridDataState: event.dataState })\r\n    }\r\n\r\n    dataStateChange = (event) => {\r\n        switch (this.props.Login.activeTestKey) {\r\n            case \"IDS_RESULTS\":\r\n                this.setState({\r\n                    resultDataState: event.dataState\r\n                });\r\n                break;\r\n            case \"IDS_INSTRUMENT\":\r\n                this.setState({\r\n                    instrumentDataState: event.dataState\r\n                });\r\n                break;\r\n            case \"IDS_MATERIAL\":\r\n                this.setState({\r\n                    materialDataState: event.dataState\r\n                });\r\n                break;\r\n            case \"IDS_TASK\":\r\n                this.setState({\r\n                    taskDataState: event.dataState\r\n                });\r\n                break;\r\n            case \"IDS_TESTATTACHMENTS\":\r\n                this.setState({\r\n                    instrumentDataState: event.dataState\r\n                });\r\n                break;\r\n            case \"IDS_TESTCOMMENTS\":\r\n                this.setState({\r\n                    testCommentDataState: event.dataState\r\n                });\r\n                break;\r\n            case \"IDS_DOCUMENTS\":\r\n                this.setState({\r\n                    documentDataState: event.dataState\r\n                });\r\n                break;\r\n            case \"IDS_RESULTCHANGEHISTORY\":\r\n                this.setState({\r\n                    resultChangeDataState: event.dataState\r\n                });\r\n                break;\r\n            case \"IDS_SAMPLECOMMENTS\":\r\n                this.setState({\r\n                    sampleChangeDataState: event.dataState\r\n                });\r\n                break;\r\n            default:\r\n                this.setState({\r\n                    resultDataState: event.dataState\r\n                });\r\n                break;\r\n        }\r\n    }\r\n\r\n    // sampleTabDetail = () => {\r\n    //     const tabMap = new Map();\r\n\r\n    //     {\r\n    //         this.props.Login.masterData.RESelectedSample && this.props.Login.masterData.RESelectedSample.length === 1 ?\r\n    //             tabMap.set(\"IDS_SAMPLEINFO\", <SampleInfoView\r\n    //                 data={this.props.Login.masterData.RESelectedSample && this.props.Login.masterData.RESelectedSample.length > 0 ? this.props.Login.masterData.RESelectedSample[this.props.Login.masterData.RESelectedSample.length - 1] : {}}\r\n    //                 SingleItem={this.state.SingleItem}\r\n    //                 screenName=\"IDS_SAMPLEINFO\"\r\n    //             />) :\r\n    //             tabMap.set(\"IDS_SAMPLEGRID\", <SampleInfoGrid\r\n    //                 selectedSample={this.props.Login.masterData.RESelectedSample}\r\n    //                 dataState={this.state.dataState}\r\n    //                 dataStateChange={this.dataStateChange}\r\n    //                 detailedFieldList={this.state.SampleGridExpandableItem}\r\n    //                 extractedColumnList={this.state.SampleGridItem}\r\n    //                 userInfo={this.props.Login.userInfo}\r\n    //                 inputParam={this.props.Login.inputParam}\r\n    //                 screenName=\"IDS_SAMPLEGRID\"\r\n    //             />)\r\n    //         // tabMap.set(\"IDS_SAMPLEATTACHMENTS\", <></>)\r\n    //         // tabMap.set(\"IDS_SAMPLECOMMENTS\", <></>)\r\n    //         // tabMap.set(\"IDS_SUBSAMPLEATTACHMENTS\", <></>)\r\n    //         // tabMap.set(\"IDS_SUBSAMPLECOMMENTS\", <></>)\r\n    //         return tabMap;\r\n    //     }\r\n    // }\r\n\r\n\r\n\r\n    sampleTabDetail() {\r\n        const tabMap = new Map();\r\n        let npreregno = this.props.Login.masterData.RESelectedSample ? this.props.Login.masterData.RESelectedSample.map(sample => sample.npreregno).join(\",\") : \"-1\";\r\n        tabMap.set(\"IDS_SAMPLEATTACHMENTS\",\r\n            <Attachments\r\n                screenName=\"IDS_SAMPLEATTACHMENTS\"\r\n                selectedMaster={this.props.Login.masterData.RESelectedSample}\r\n                controlMap={this.state.controlMap}\r\n                userRoleControlRights={this.state.userRoleControlRights}\r\n                attachments={this.props.Login.masterData.RegistrationAttachment || []}\r\n                deleteRecord={this.props.deleteAttachment}\r\n                onSaveClick={this.onAttachmentSaveClick}\r\n                masterList={this.props.Login.masterData.RESelectedSample}\r\n                masterAlertStatus={\"IDS_SELECTSAMPLETOADDATTACHEMENT\"}\r\n                fetchRecord={this.props.getAttachmentCombo}\r\n                addName={\"AddSampleAttachment\"}\r\n                editName={\"EditSampleAttachment\"}\r\n                deleteName={\"DeleteSampleAttachment\"}\r\n                viewName={\"ViewSampleAttachment\"}\r\n                methodUrl={\"SampleAttachment\"}\r\n                nsubsampleneed={this.props.Login.masterData.realRegSubTypeValue.nneedsubsample}\r\n                userInfo={this.props.Login.userInfo}\r\n                deleteParam={\r\n                    {\r\n                        methodUrl: \"SampleAttachment\",\r\n                        npreregno,\r\n                        userInfo: this.props.Login.userInfo,\r\n                        masterData: this.props.Login.masterData,\r\n                        esignRights: this.props.Login.userRoleControlRights,\r\n                        screenName: this.props.Login.screenName\r\n\r\n                    }\r\n                }\r\n                editParam={{\r\n                    methodUrl: \"SampleAttachment\",\r\n                    npreregno,\r\n                    userInfo: this.props.Login.userInfo,\r\n                    masterData: this.props.Login.masterData,\r\n                    esignRights: this.props.Login.userRoleControlRights,\r\n                    masterList: this.props.Login.masterData.RESelectedSample\r\n\r\n                }}\r\n                selectedListName=\"IDS_ARNUMBER\"\r\n                displayName=\"sarno\"\r\n            />)\r\n        tabMap.set(\"IDS_SAMPLECOMMENTS\", <Comments\r\n            screenName=\"IDS_SAMPLECOMMENTS\"\r\n            onSaveClick={this.onCommentsSaveClick}\r\n            selectedMaster=\"RESelectedSample\"\r\n            controlMap={this.state.controlMap}\r\n            userRoleControlRights={this.state.userRoleControlRights}\r\n            Comments={this.props.Login.masterData.RegistrationComment || []}\r\n            fetchRecord={this.props.getCommentsCombo}\r\n            masterData={this.props.Login.masterData}\r\n            addName={\"AddSampleComment\"}\r\n            editName={\"EditSampleComment\"}\r\n            deleteName={\"DeleteSampleComment\"}\r\n            methodUrl={\"SampleComment\"}\r\n            isTestComment={false}\r\n            masterList={this.props.Login.masterData.RESelectedSample}\r\n            masterAlertStatus=\"IDS_SELECTSAMPLETOADDCOMMENTS\"\r\n            primaryKeyField={\"nregcommentcode\"}\r\n            dataState={this.state.testCommentDataState}\r\n            dataStateChange={this.testDataStateChange}\r\n            deleteParam={\r\n                {\r\n                    methodUrl: \"SampleComment\",\r\n                    npreregno,\r\n                    userInfo: this.props.Login.userInfo,\r\n                    masterData: this.props.Login.masterData,\r\n                    esignRights: this.props.Login.userRoleControlRights,\r\n                    screenName: \"IDS_SAMPLECOMMENTS\"\r\n\r\n                }\r\n            }\r\n            editParam={{\r\n                methodUrl: \"SampleComment\",\r\n                npreregno,\r\n                userInfo: this.props.Login.userInfo,\r\n                masterData: this.props.Login.masterData,\r\n                esignRights: this.props.Login.userRoleControlRights,\r\n                screenName: \"IDS_SAMPLECOMMENTS\",\r\n                operation: \"update\",\r\n                masterList: this.props.Login.masterData.RESelectedSample || [],\r\n                ncontrolCode: this.state.controlMap.has(\"EditSampleComment\") && this.state.controlMap.get(\"EditSampleComment\").ncontrolcode\r\n            }}\r\n            selectedListName=\"IDS_ARNUMBER\"\r\n            displayName=\"sarno\"\r\n        />)\r\n\r\n        tabMap.set(\"IDS_SAMPLEAPPROVALHISTORY\",\r\n            <SampleApprovalHistory\r\n                userInfo={this.props.Login.userInfo}\r\n                ApprovalHistory={this.props.Login.masterData.SampleApprovalHistory}\r\n                inputParam={this.props.Login.inputParam}\r\n                dataState={this.state.sampleHistoryDataState}\r\n                dataStateChange={this.sampleDataStateChange}\r\n                masterData={this.props.Login.masterData}\r\n                screenName=\"IDS_SAMPLEAPPROVALHISTORY\"\r\n                controlMap={this.state.controlMap}\r\n                userRoleControlRights={this.state.userRoleControlRights}\r\n                selectedId={null}\r\n            />)\r\n\r\n\r\n        return tabMap;\r\n    }\r\n\r\n\r\n\r\n    subsampleTabDetail = () => {\r\n        let ntransactionsamplecode = this.props.Login.masterData.RESelectedSubSample ?\r\n            this.props.Login.masterData.RESelectedSubSample.map(sample => sample.ntransactionsamplecode).join(\",\") : \"-1\";\r\n        const tabMap = new Map();\r\n        let subsampleList = this.props.Login.masterData.RE_SUBSAMPLE || [];\r\n        let { subsampleskip, subsampletake } = this.state\r\n        subsampleList = subsampleList.slice(subsampleskip, subsampleskip + subsampletake);\r\n        let selectedSubSampleList = getSameRecordFromTwoArrays(subsampleList, this.props.Login.masterData.RESelectedSubSample, \"ntransactionsamplecode\");\r\n\r\n        tabMap.set(\"IDS_SUBSAMPLEATTACHMENTS\", <Attachments\r\n            screenName=\"IDS_SUBSAMPLEATTACHMENTS\"\r\n            onSaveClick={this.onAttachmentSaveClick}\r\n            selectedMaster=\"selectedSubSample\"\r\n            controlMap={this.state.controlMap}\r\n            userRoleControlRights={this.state.userRoleControlRights}\r\n            attachments={this.props.Login.masterData.RegistrationSampleAttachment || []}\r\n            deleteRecord={this.props.deleteAttachment}\r\n            masterList={this.props.Login.masterData.RESelectedSubSample}\r\n            masterAlertStatus={\"IDS_SELECTSUBSAMPLETOADDATTACHMENT\"}\r\n            fetchRecord={this.props.getAttachmentCombo}\r\n            viewFile={this.props.viewAttachment}\r\n            addName={\"AddSubSampleAttachment\"}\r\n            editName={\"EditSubSampleAttachment\"}\r\n            deleteName={\"DeleteSubSampleAttachment\"}\r\n            viewName={\"ViewSubSampleAttachment\"}\r\n            methodUrl={\"SubSampleAttachment\"}\r\n            nsubsampleneed={this.props.Login.masterData.realRegSubTypeValue.nneedsubsample}\r\n            skip={this.props.Login.inputParam ? this.props.Login.inputParam.attachmentskip || 0 : 0}\r\n            take={this.props.Login.inputParam ? this.props.Login.inputParam.attachmenttake || 10 : this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5}\r\n            userInfo={this.props.Login.userInfo}\r\n            deleteParam={\r\n                {\r\n                    methodUrl: \"SubSampleAttachment\",\r\n                    ntransactionsamplecode,\r\n                    userInfo: this.props.Login.userInfo,\r\n                    masterData: this.props.Login.masterData,\r\n                    esignRights: this.props.Login.userRoleControlRights\r\n                }\r\n            }\r\n            editParam={{\r\n                methodUrl: \"SubSampleAttachment\",\r\n                ntransactionsamplecode,\r\n                userInfo: this.props.Login.userInfo,\r\n                masterData: this.props.Login.masterData,\r\n                esignRights: this.props.Login.userRoleControlRights,\r\n                masterList: this.props.Login.masterData.RE_SUBSAMPLE || []\r\n\r\n            }}\r\n            selectedListName=\"IDS_SAMPLEARNO\"\r\n            displayName=\"ssamplearno\"\r\n        />)\r\n        tabMap.set(\"IDS_SUBSAMPLECOMMENTS\", <Comments\r\n            screenName=\"IDS_SUBSAMPLECOMMENTS\"\r\n            onSaveClick={this.onCommentsSaveClick}\r\n            selectedMaster=\"RESelectedSubSample\"\r\n            controlMap={this.state.controlMap}\r\n            userRoleControlRights={this.state.userRoleControlRights}\r\n            Comments={this.props.Login.masterData.RegistrationSampleComment || []}\r\n            fetchRecord={this.props.getCommentsCombo}\r\n            addName={\"AddSubSampleComment\"}\r\n            editName={\"EditSubSampleComment\"}\r\n            deleteName={\"DeleteSubSampleComment\"}\r\n            methodUrl={\"SubSampleComment\"}\r\n            masterData={this.props.Login.masterData}\r\n            isTestComment={false}\r\n            masterList={this.props.Login.masterData.RESelectedSubSample}\r\n            masterAlertStatus=\"IDS_SELECTSUBSAMPLETOADDCOMMENTS\"\r\n            primaryKeyField={\"nsamplecommentcode\"}\r\n            dataState={this.state.subSampleCommentDataState}\r\n            dataStateChange={this.subSampledataStateChange}\r\n            deleteParam={\r\n                {\r\n                    methodUrl: \"SubSampleComment\",\r\n                    ntransactionsamplecode,\r\n                    userInfo: this.props.Login.userInfo,\r\n                    masterData: this.props.Login.masterData,\r\n                    esignRights: this.props.Login.userRoleControlRights,\r\n                    screenName: \"IDS_SUBSAMPLECOMMENTS\"\r\n\r\n                }\r\n            }\r\n            editParam={{\r\n                methodUrl: \"SubSampleComment\",\r\n                ntransactionsamplecode,\r\n                userInfo: this.props.Login.userInfo,\r\n                masterData: this.props.Login.masterData,\r\n                esignRights: this.props.Login.userRoleControlRights,\r\n                screenName: \"IDS_SUBSAMPLECOMMENTS\",\r\n                operation: \"update\",\r\n                masterList: this.props.Login.masterData.RE_SUBSAMPLE || [],\r\n                ncontrolCode: this.state.controlMap.has(\"EditSubSampleComment\") && this.state.controlMap.get(\"EditSubSampleComment\").ncontrolcode\r\n            }}\r\n            selectedListName=\"IDS_SAMPLEARNO\"\r\n            displayName=\"ssamplearno\"\r\n        />)\r\n\r\n        return tabMap;\r\n    }\r\n\r\n    onSampleTabChange = (tabProps) => {\r\n        const activeSampleTab = tabProps.screenName;\r\n        if (activeSampleTab !== this.props.Login.activeSampleTab) {\r\n            let inputData = {\r\n                masterData: this.props.Login.masterData,\r\n                RESelectedSample: this.props.Login.masterData.RESelectedSample,\r\n                npreregno: this.props.Login.masterData.RESelectedSample ? this.props.Login.masterData.RESelectedSample.map(item => item.npreregno).join(\",\") : \"-1\",\r\n                userinfo: this.props.Login.userInfo,\r\n                screenName: activeSampleTab,\r\n                activeSampleTab\r\n            }\r\n            this.props.getSampleChildTabDetail(inputData)\r\n        }\r\n    }\r\n\r\n    onTestTabChange = (tabProps) => {\r\n        const activeTestKey = tabProps.screenName;\r\n        if (activeTestKey !== this.props.Login.activeTestKey) {\r\n            if (this.props.Login.masterData.RESelectedTest && this.props.Login.masterData.RESelectedTest.length > 0) {\r\n                let inputData = {\r\n                    masterData: this.props.Login.masterData,\r\n                    ntransactiontestcode: this.props.Login.masterData.RESelectedTest ? this.props.Login.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\").toString() : \"\",\r\n                    npreregno: this.props.Login.masterData.RESelectedSample ? this.props.Login.masterData.RESelectedSample.map(preregno => preregno.npreregno).join(\",\").toString() : \"\",\r\n                    RESelectedTest: this.props.Login.masterData.RESelectedTest ? this.props.Login.masterData.RESelectedTest : \"\",\r\n                    // ntransactiontestcode: this.props.Login.masterData.RESelectedTest ?\r\n                    //     this.props.Login.masterData.selectedTestCode : this.props.Login.masterData.RESelectedTest ?\r\n                    //         String(this.props.Login.masterData.RESelectedTest.ntransactiontestcode) : \"-1\",\r\n                    userinfo: this.props.Login.userInfo,\r\n                    activeTestKey: activeTestKey,\r\n                    screenName: activeTestKey,\r\n                    resultDataState: this.state.resultDataState,\r\n                    instrumentDataState: this.state.instrumentDataState,\r\n                    materialDataState: this.state.materialDataState,\r\n                    taskDataState: this.state.taskDataState,\r\n                    documentDataState: this.state.documentDataState,\r\n                    resultChangeDataState: this.state.resultChangeDataState,\r\n                    testCommentDataState: this.state.testCommentDataState,\r\n                    sampleChangeDataState: this.state.sampleChangeDataState\r\n                }\r\n                this.props.getTestChildTabREDetail(inputData, true);\r\n            } else {\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTTEST\" }));\r\n            }\r\n        }\r\n    }\r\n\r\n    openClosePortal = (test) => {\r\n        if(this.props.Login.openELNSheet===undefined || !this.props.Login.openELNSheet)\r\n        {\r\n        // if(test.RESelectedTest.length === 1)\r\n        // {           \r\n                this.props.getELNTestValidation(test,this.props.Login.integrationSettings);            \r\n        // }\r\n        // else{\r\n        //     toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTONLYONETEST\" }));\r\n        // }\r\n    }\r\n        else{\r\n            const updateInfo = {\r\n               typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    openELNSheet: false                        \r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n       \r\n        \r\n        // if (this.state.openELNSheet === false) {\r\n            // if (test.test.selensheetname !== null) {\r\n                /*let enlLink = \"\";\r\n                   const elnuser= {\r\n                     usercode: test.elnUserInfo.nelncode,\r\n                     username: test.elnUserInfo.selnusername,\r\n                     userfullname: test.elnUserInfo.selnusername,\r\n                    lsusergroup: {\r\n                     usergroupcode: test.elnUserInfo.nelnusergroupcode,\r\n                     usergroupname: test.elnUserInfo.nelnusergroupcode,\r\n                     },\r\n                    //  lssitemaster:{ sitecode:sitecode }\r\n                    }\r\n\r\n                    const user = CF_encryptionData(elnuser).EncryptData;\r\n                const enlcredential = {\r\n                    ElnUser: CF_encryptionData(this.props.Login.settings[20]).EncryptData,\r\n                    Elntenant: CF_encryptionData(\"-1\").EncryptData,\r\n                    Elnloginfrom: CF_encryptionData(\"-1\").EncryptData,\r\n                    //Elntoken: CF_encryptionData(\"\").EncryptData,\r\n                    Elnpassword: CF_encryptionData(this.props.Login.settings[21]).EncryptData,\r\n                    Elnsitecode: CF_encryptionData(this.props.Login.settings[22]).EncryptData,\r\n                    Elnsitename: CF_encryptionData(this.props.Login.settings[23]).EncryptData,\r\n                    Elnusergroupname: CF_encryptionData(this.props.Login.settings[24]).EncryptData,\r\n                    Elnusergroupcode: CF_encryptionData(this.props.Login.settings[25]).EncryptData,\r\n                }\r\n\r\n                //Axios.post(\"http://5.189.171.17:8095/ELN-0.0.1-SNAPSHOT/authenticate\",inputou)\r\n                //Axios.post(this.props.Login.settings[27], inputou)\r\n                // Axios.post(\"https://logilabelntesting.azurewebsites.net/\", user)\r\n                //     .then(response => {\r\n                        const testname = test.test.stestname.substring(0, test.test.stestname.indexOf(\"[\")).trim();\r\n\r\n                        //const batchId = test.test.sarno+'-'+test.test.stestname;\r\n                        const batchId = test.test.sarno + '-' + testname;\r\n                        const ntransactiontestcode = CF_encryptionData(batchId//test.RESelectedTest[0].ntransactiontestcode\r\n                        ).EncryptData;\r\n                        // const Elntoken = CF_encryptionData(\"Bearer \" + response.data.token).EncryptData;\r\n\r\n\r\n                        // const link =\r\n                        //     //window.location.href.toString() \r\n                        //     \"\" +\r\n                        //     '#{\"orderid\":\"' +\r\n                        //     ntransactiontestcode +\r\n                        //     '\",\"u\":\"' +\r\n                        //     enlcredential.ElnUser +\r\n                        //     '\",\"t\":\"' +\r\n                        //     enlcredential.Elntenant +\r\n                        //     '\",\"l\":\"' +\r\n                        //     enlcredential.Elnloginfrom +\r\n                        //     '\",\"k\":\"' +\r\n                        //     Elntoken +\r\n                        //     //response.data.token+\r\n                        //     '\",\"uc\":\"' +\r\n                        //     enlcredential.Elnusergroupcode +\r\n                        //     '\",\"ug\":\"' +\r\n                        //     enlcredential.Elnusergroupname +\r\n                        //     '\",\"sc\":\"' +\r\n                        //     enlcredential.Elnsitecode +\r\n                        //     '\",\"sn\":\"' +\r\n                        //     enlcredential.Elnsitename +\r\n                        //     '\",\"LO\":\"' +\r\n                        //     ntransactiontestcode +\r\n                        //     '\"}';\r\n\r\n                        const link =\r\n                            //window.location.href.toString() \r\n                            \"\" +\r\n                            '#{\"orderid\":\"' +\r\n                            ntransactiontestcode +\r\n                            '\",\"user\":\"' +\r\n                            user +\r\n                            '\",\"batchid\":\"' +\r\n                            ntransactiontestcode +\r\n                            '\"}';\r\n                        \r\n                        //enlLink = \"https://logilabelntest.azurewebsites.net/vieworder\".concat(link);\r\n                        enlLink=\"https://logilabelntesting.azurewebsites.net/\";\r\n                        console.log(\"eln link:\", enlLink);\r\n                        //}\r\n                        // this.setState({ openELNSheet: !this.state.openELNSheet, nflag: 1, enlLink })\r\n                        this.setState({ openELNSheet: true, nflag: 1, enlLink })\r\n                        //this.props.encryptionData(test);\r\n                    // })\r\n                    //this.getActiveTestURL() \r\n                    // .catch(response => { })\r\n            // }\r\n            // else {\r\n            //     toast.warn(this.props.intl.formatMessage({ id: \"IDS_NOSHEETFORTHISTEST\" }));\r\n\r\n            // }\r\n/*}\r\nelse {\r\n            this.setState({ openELNSheet: !this.state.openELNSheet, nflag: 1 })\r\n\r\n            let testChildGetREParam = {\r\n                masterData: this.props.Login.masterData,\r\n                userinfo: this.props.Login.userInfo,\r\n                nsampletypecode: this.props.Login.masterData.realSampleTypeValue && this.props.Login.masterData.realSampleTypeValue.nsampletypecode,\r\n                nregtypecode: this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue.nregtypecode,\r\n                nregsubtypecode: this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode,\r\n                napprovalversioncode: this.props.Login.masterData.realApproveConfigVersion && this.props.Login.masterData.realApproveConfigVersion.napprovalconfigversioncode,\r\n                ntransactionstatus: this.props.Login.masterData.realFilterStatusValue && this.props.Login.masterData.realFilterStatusValue.ntransactionstatus,\r\n                ntestcode: this.props.Login.masterData.realTestcodeValue && this.props.Login.masterData.realTestcodeValue.ntestcode,\r\n                npreregno: this.props.Login.masterData.RESelectedSample && this.props.Login.masterData.RESelectedSample.map(sample => sample.npreregno).join(\",\"),\r\n                ntransactionsamplecode: this.props.Login.masterData.RESelectedSubSample && this.props.Login.masterData.RESelectedSubSample.map(sample => sample.ntransactionsamplecode).join(\",\"),\r\n                activeTestKey: 'IDS_RESULTS',\r\n                testskip: this.state.testskip,\r\n                testtake: this.state.testtake,\r\n                resultDataState: this.state.resultDataState,\r\n                instrumentDataState: this.state.instrumentDataState,\r\n                materialDataState: this.state.materialDataState,\r\n                taskDataState: this.state.taskDataState,\r\n                documentDataState: this.state.documentDataState,\r\n                resultChangeDataState: this.state.resultChangeDataState,\r\n                testCommentDataState: this.state.testCommentDataState,\r\n                RESelectedTest: this.props.Login.masterData.RESelectedTest\r\n            }\r\n\r\n            this.props.getTestChildTabREDetail(testChildGetREParam, true)\r\n\r\n\r\n\r\n            //this.filterTestParam\r\n        }*/\r\n\r\n    }\r\n\r\n    onSubSampleTabChange = (tabProps) => {\r\n        const activeSubSampleTab = tabProps.screenName;\r\n        if (activeSubSampleTab !== this.props.Login.activeSubSampleTab) {\r\n            let inputData = {\r\n                masterData: this.props.Login.masterData,\r\n                selectedSubSample: this.props.Login.masterData.RESelectedSubSample,\r\n                ntransactionsamplecode: this.props.Login.masterData.RESelectedSubSample ? this.props.Login.masterData.RESelectedSubSample.map(item => item.ntransactionsamplecode).join(\",\") : \"-1\",\r\n                userinfo: this.props.Login.userInfo,\r\n                screenName: activeSubSampleTab,\r\n                activeSubSampleTab,\r\n                subSampleCommentDataState: this.state.subSampleCommentDataState,\r\n                subSampleAttachmentDataState: this.state.subSampleAttachmentDataState,\r\n            }\r\n            this.props.getSubSampleChildTabDetail(inputData)\r\n        }\r\n    }\r\n\r\n    subSampledataStateChange = (event) => {\r\n        switch (this.props.Login.activeSubSampleTab) {\r\n            case \"IDS_SUBSAMPLECOMMENTS\":\r\n                this.setState({\r\n                    subSampleCommentDataState: event.dataState\r\n                });\r\n                break;\r\n            case \"IDS_SUBSAMPLEATTACHMENTS\":\r\n                this.setState({\r\n                    subSampleAttachmentDataState: event.dataState\r\n                });\r\n                break;\r\n            default:\r\n                this.setState({\r\n                    popUptestDataState: event.dataState\r\n                });\r\n                break;\r\n        }\r\n\r\n    }\r\n\r\n    testMethodSourceEdit = (test) => {\r\n        this.props.testMethodSourceEdit(test)\r\n    }\r\n\r\n    addREInstrument = (test) => {\r\n        this.props.addREInstrument(test)\r\n    }\r\n    adhocTestParameter = (test) => {\r\n        \r\n        const inputData = {\r\n            ntestcode: test.test.ntestcode,\r\n            ntestgrouptestcode: test.test.ntestgrouptestcode,\r\n            ntransactiontestcode: test.test.ntransactiontestcode,\r\n            npreregno:test.test.npreregno,\r\n            masterData: this.props.Login.masterData,\r\n            userinfo: test.userInfo,\r\n            adhocId:test.adhocId\r\n        }\r\n            this.props.addREAdhocParamter(inputData)\r\n    }\r\n\r\n    deleteInstrumentRecord = (test) => {\r\n        const ndesigntemplatemappingcode = parseInt(this.props.Login.masterData.ndesigntemplatemappingcode && this.props.Login.masterData.ndesigntemplatemappingcode);\r\n        test = { ...test, 'ndesigntemplatemappingcode': ndesigntemplatemappingcode }\r\n        let inputParam = {\r\n            inputData: { ...test, 'ndesigntemplatemappingcode': ndesigntemplatemappingcode, 'userinfo': this.props.Login.userInfo },\r\n            // formData: formData,\r\n            // isFileupload: true,\r\n            operation: \"deleteInstrument\",\r\n            screenName: \"deleteInstrumentAction\",\r\n            displayName: this.props.Login.inputParam.displayName,//, postParam,\r\n            //test: test\r\n        }\r\n\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, test.ncontrolCode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true,\r\n                    screenData: { inputParam, masterData: this.props.Login.masterData },\r\n                    openModal: true,\r\n                    screenName: \"deleteInstrumentAction\",\r\n                    operation: \"deleteInstrument\"\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.deleteInstrumentRecord(test)\r\n        }\r\n\r\n\r\n    }\r\n    fetchInstrumentRecord = (test) => {\r\n        this.props.fetchInstrumentRecord(test)\r\n    }\r\n    fetchMaterialRecord = (test) => {\r\n        this.props.fetchMaterialRecord(test)\r\n    }\r\n\r\n    //Aravindh\r\n    deleteMaterialRecord = (test) => {\r\n        const nregtypecode = parseInt(this.props.Login.masterData.realRegTypeValue.nregtypecode);\r\n        const nregsubtypecode = parseInt(this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode);\r\n        const ndesigntemplatemappingcode = parseInt(this.props.Login.masterData.ndesigntemplatemappingcode && this.props.Login.masterData.ndesigntemplatemappingcode);\r\n\r\n        test = { ...test, nregtypecode: nregtypecode, nregsubtypecode: nregsubtypecode, ndesigntemplatemappingcode: ndesigntemplatemappingcode }\r\n        let inputParam = {\r\n            inputData: {\r\n                ...test.selectedRecord,\r\n                nregtypecode: nregtypecode, nregsubtypecode: nregsubtypecode, ndesigntemplatemappingcode: ndesigntemplatemappingcode,\r\n                ntransactiontestcode: test.masterData.RESelectedTest ?\r\n                    test.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\").toString() : \"\",\r\n                userinfo: this.props.Login.userInfo\r\n            },\r\n            // formData: formData,\r\n            // isFileupload: true,\r\n\r\n            classUrl: 'resultentrybysample',\r\n            methodUrl: \"ResultUsedMaterial\",\r\n            operation: \"delete\",\r\n            //screenName: \"deleteMaterialAction\",\r\n            displayName: this.props.Login.inputParam.displayName,//, postParam,\r\n            //test: test\r\n            nresultusedmaterialcode: test.selectedRecord.nresultusedmaterialcode,\r\n        }\r\n        const masterData = this.props.Login.masterData;\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, test.ncontrolCode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true,\r\n                    screenData: { inputParam, masterData: this.props.Login.masterData },\r\n                    openModal: true,\r\n                    screenName: \"deleteMaterialAction\",\r\n                    operation: \"deleteMaterial\"\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.crudMaster(inputParam, masterData, \"openModal\");\r\n            //this.props.deleteResultUsedMaterial(test)\r\n        }\r\n\r\n\r\n    }\r\n\r\n    deleteTaskRecord = (test) => {\r\n        const ndesigntemplatemappingcode = parseInt(this.props.Login.masterData.ndesigntemplatemappingcode && this.props.Login.masterData.ndesigntemplatemappingcode);\r\n\r\n        test = { ...test, ndesigntemplatemappingcode: ndesigntemplatemappingcode }\r\n        let inputParam = {\r\n            inputData: { ...test, 'userinfo': this.props.Login.userInfo },\r\n            // formData: formData,\r\n            // isFileupload: true,\r\n            operation: \"deleteTask\",\r\n            displayName: this.props.Login.inputParam.displayName,//, postParam,\r\n            //test: test\r\n        }\r\n\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, test.ncontrolCode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true,\r\n                    screenData: { inputParam, masterData: this.props.Login.masterData },\r\n                    openModal: true,\r\n                    screenName: \"deleteTaskaction\",\r\n                    operation: \"deleteTask\"\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.deleteTaskRecord(test)\r\n        }\r\n\r\n    }\r\n    fetchTaskRecord = (test) => {\r\n        this.props.fetchTaskRecord(test)\r\n    }\r\n    addResultEntryTask = (inputData) => {\r\n        let selectedRecord = {}\r\n        selectedRecord = {\r\n            npreregno: inputData.npreregno,\r\n            ntransactiontestcode: inputData.ntransactiontestcode,\r\n            stestsynonym: inputData.stestsynonym\r\n        }\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                selectedRecord: selectedRecord,\r\n                operation: \"create\",\r\n                screenName: \"IDS_TASK\",\r\n                openModal: true,\r\n                activeTestKey: \"IDS_TASK\",\r\n                ncontrolcode: inputData.addResultUsedTaskId,\r\n                selectedId: null\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n\r\n    }\r\n\r\n    checkListRecord = (parameterData) => {\r\n        this.props.checkListRecord(parameterData, this.props.Login.userInfo)\r\n    }\r\n    getFormula = (parameterData, userInfo, masterData, index, event) => {\r\n        this.setState({\r\n            modalEvent: event.currentTarget\r\n        })\r\n        this.props.getFormula(parameterData, userInfo, masterData, index, this.state.selectedRecord)\r\n    }\r\n\r\n    getAverageResult = (event, parameterData, index, selectedForumulaInput, masterData, selectedRecord) => {\r\n\r\n        if (!selectedRecord.selectedForumulaInput[index].senableAverage) {\r\n            this.props.getAverageResult(parameterData, index, selectedForumulaInput, this.props.Login.userInfo, masterData, selectedRecord);\r\n        }\r\n        else {\r\n            selectedForumulaInput[index].senableAverage = !selectedRecord.selectedForumulaInput[index].senableAverage;\r\n            selectedForumulaInput[index].svalues = selectedForumulaInput[index].soldvalue;\r\n\r\n            this.setState({  \r\n                selectedRecord:{\r\n                    ...selectedRecord,\r\n                    selectedForumulaInput\r\n                }\r\n            })\r\n        }\r\n\r\n\r\n    }\r\n    calculateFormula = () => {\r\n        const selectedRecord = this.state.selectedRecord || []\r\n        const selectedForumulaInput = selectedRecord.selectedForumulaInput || []\r\n        let lstDynamicFields = [];\r\n\r\n        if (selectedForumulaInput) {\r\n            selectedForumulaInput.map(dynamicfields =>\r\n                lstDynamicFields.push(dynamicfields)\r\n            );\r\n            const inputData = {\r\n                masterData: this.props.Login.masterData,\r\n                lstDynamicFields: lstDynamicFields,\r\n                userInfo: this.props.Login.userInfo,\r\n                selectedRecord: selectedRecord,\r\n                selectedResultGrade: this.state.selectedRecord.selectedResultGrade,\r\n                ResultParameter: this.state.selectedRecord.ResultParameter || {}\r\n            }\r\n            this.props.calculateFormula(inputData)\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (this.parentHeight) {\r\n            const height = this.parentHeight.clientHeight;\r\n            this.setState({\r\n                firstPane: height - 80,\r\n                parentHeight: height\r\n            });\r\n        }\r\n    }\r\n    getActiveTestURL() {\r\n        let url = \"resultentrybysample/getTestbasedParameter\"\r\n        switch (this.props.Login.activeTestKey) {\r\n            case \"IDS_RESULTS\":\r\n                url = \"resultentrybysample/getTestbasedParameter\"\r\n                break;\r\n            case \"IDS_INSTRUMENT\":\r\n                url = \"resultentrybysample/getResultUsedInstrument\"\r\n                break;\r\n            case \"IDS_MATERIAL\":\r\n                url = \"resultentrybysample/getResultUsedMaterial\"\r\n                break;\r\n            case \"IDS_TASK\":\r\n                url = \"resultentrybysample/getResultUsedTask\"\r\n                break;\r\n            case \"IDS_TESTATTACHMENTS\":\r\n                url = \"attachment/getTestAttachment\"\r\n                break;\r\n            case \"IDS_TESTCOMMENTS\":\r\n                url = \"comments/getTestComment\"\r\n                break;\r\n            case \"IDS_DOCUMENTS\":\r\n                url = \"attachment/getSampleAttachment\"\r\n                break;\r\n            case \"IDS_RESULTCHANGEHISTORY\":\r\n                url = \"resultentrybysample/getResultChangeHistory\"\r\n                break;\r\n            case \"IDS_APPROVALHISTORY\":\r\n                url = \"resultentrybysample/getSampleApprovalHistory\"\r\n                break;\r\n            case \"IDS_SAMPLEATTACHMENTS\":\r\n                url = \"attachment/getSampleAttachment\"\r\n                break;\r\n            default:\r\n                url = \"resultentrybysample/getTestbasedParameter\"\r\n                break;\r\n        }\r\n        return url;\r\n    }\r\n\r\n    resultImport = () => {\r\n        this.props.Login.masterData.selectedImportFile = []\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                operation: \"create\",\r\n                screenName: \"IDS_RESULTIMPORTFILE\",\r\n                openModal: true,\r\n                loadFile: true,\r\n                activeTestKey: \"IDS_RESULTS\",\r\n                masterData: this.props.Login.masterData\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    closeFilter = () => {\r\n\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { showFilter: false }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    handlePageChange = e => {\r\n        this.setState({\r\n            skip: e.skip,\r\n            take: e.take\r\n        });\r\n        //setTimeout(() => { this._scrollBarRef.updateScroll() })\r\n    }\r\n    handleSubSamplePageChange = e => {\r\n        this.setState({\r\n            subSampleSkip: e.skip,\r\n            subSampleTake: e.take\r\n        });\r\n        //setTimeout(() => { this._scrollBarRef.updateScroll() })\r\n    }\r\n    handleTestPageChange = e => {\r\n        this.setState({\r\n            testskip: e.skip,\r\n            testtake: e.take,\r\n            sampletakeDataState: e.take\r\n        });\r\n    };\r\n    verticalPaneSizeChange = (val) => {\r\n        if (this.state.enableAutoHeight) {\r\n            this.setState({\r\n                initialVerticalWidth: val - 150\r\n            })\r\n        }\r\n    }\r\n    changeSplitterOption = () => {\r\n        this.setState({\r\n            enableAutoHeight: !this.state.enableAutoHeight,\r\n            initialVerticalWidth: \"57vh\"\r\n\r\n        })\r\n    }\r\n\r\n\r\n    sideNavDetail = (screenName) => {\r\n        let { testskip, testtake } = this.state\r\n        let testList = this.props.Login.masterData.searchedTests ? [...this.props.Login.masterData.searchedTests] : this.props.Login.masterData.RE_TEST || [];\r\n        const editTestCommentsId = this.state.controlMap.has(\"EditTestComment\") && this.state.controlMap.get(\"EditTestComment\").ncontrolcode;\r\n        testList = testList.slice(testskip, testskip + testtake);\r\n        let selectedTestList = getSameRecordFromTwoArrays(testList, this.props.Login.masterData.RESelectedTest, \"ntransactiontestcode\");\r\n        // let npreregno = this.props.Login.masterData.selectedSample ? this.props.Login.masterData.selectedSample.map(sample => sample.npreregno).join(\",\") : \"-1\";\r\n        let ntransactiontestcode = this.props.Login.masterData.RESelectedTest ? this.props.Login.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\") : \"-1\";\r\n\r\n        return (\r\n            screenName == \"IDS_RESULTS\" ?\r\n                <CustomTabs activeKey={this.props.Login.activeTestTab || \"IDS_RESULTS\"} tabDetail={this.resultTabDetail()}  onTabChange={this.onTabChange} />\r\n                : screenName == \"IDS_ATTACHMENTS\" ?\r\n                    <CustomTabs activeKey={this.props.Login.activeTestTab || \"IDS_TESTATTACHMENTS\"} tabDetail={this.attachmentTabDetail()} destroyInactiveTabPane={true} onTabChange={this.onTabChange} />\r\n                    : screenName == \"IDS_COMMENTS\" ?\r\n                        <CustomTabs activeKey={this.props.Login.activeTestTab || \"IDS_TESTCOMMENTS\"} tabDetail={this.commentTabDetail()} destroyInactiveTabPane={true} onTabChange={this.onTabChange} />\r\n                        :\r\n                        screenName == \"IDS_INSTRUMENT\" ?\r\n                            <ApprovalInstrumentTab\r\n                                userInfo={this.props.Login.userInfo}\r\n                                genericLabel ={this.props.Login.genericLabel}\r\n                                masterData={this.props.Login.masterData}\r\n                                inputParam={this.props.Login.inputParam}\r\n                                methodUrl={\"ResultUsedInstrument\"}\r\n                                controlMap={this.state.controlMap}\r\n                                deleteParam={{ masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo }}\r\n                                editParam={{ masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo }}\r\n                                dataState={this.state.instrumentDataState}\r\n                                selectedId={this.props.Login.selectedId || null}\r\n                                isActionRequired={true}\r\n                                dataStateChange={this.dataStateChange}\r\n                                deleteRecord={this.deleteInstrumentRecord}\r\n                                fetchRecord={this.fetchInstrumentRecord}\r\n                                userRoleControlRights={this.state.userRoleControlRights}\r\n                                screenName=\"IDS_INSTRUMENT\"\r\n                            />\r\n                            :\r\n                            screenName == \"IDS_MATERIAL\" ?\r\n                                <ResultUsedMaterial\r\n                                    userInfo={this.props.Login.userInfo}\r\n                                    genericLabel ={this.props.Login.genericLabel}\r\n                                    masterData={this.props.Login.masterData}\r\n                                    inputParam={this.props.Login.inputParam}\r\n                                    methodUrl={\"ResultUsedMaterial\"}\r\n                                    controlMap={this.state.controlMap}\r\n                                    deleteParam={{ masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo }}\r\n                                    editParam={{ masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo }}\r\n                                    dataState={this.state.materialDataState}\r\n                                    selectedId={this.props.Login.selectedId || null}\r\n                                    isActionRequired={true}\r\n                                    dataStateChange={this.dataStateChange}\r\n                                    deleteRecord={this.deleteMaterialRecord}\r\n                                    fetchRecord={this.props.fetchMaterialRecord}\r\n                                    userRoleControlRights={this.state.userRoleControlRights}\r\n                                    screenName=\"IDS_MATERIAL\"\r\n                                />\r\n                                :\r\n                                screenName == \"IDS_TASK\" ?\r\n                                    <ResultEntryTaskTab\r\n                                        userInfo={this.props.Login.userInfo}\r\n                                        genericLabel ={this.props.Login.genericLabel}\r\n                                        masterData={this.props.Login.masterData}\r\n                                        inputParam={this.props.Login.inputParam}\r\n                                        methodUrl={\"ResultUsedTask\"}\r\n                                        addResultEntryTask={this.addResultEntryTask}\r\n                                        controlMap={this.state.controlMap}\r\n                                        deleteParam={{\r\n                                            masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo,\r\n                                            ncontrolcode: this.state.controlMap.has(\"DeleteResultUsedTask\") && this.state.controlMap.get(\"DeleteResultUsedTask\").ncontrolcode\r\n                                        }}\r\n                                        editParam={{\r\n                                            masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo,\r\n                                            ncontrolcode: this.state.controlMap.has(\"EditResultUsedTask\") && this.state.controlMap.get(\"EditResultUsedTask\").ncontrolcode\r\n                                        }}\r\n                                        dataState={this.state.taskDataState}\r\n                                        selectedId={this.props.Login.selectedId || null}\r\n                                        isActionRequired={true}\r\n                                        dataStateChange={this.dataStateChange}\r\n                                        deleteRecord={this.deleteTaskRecord}\r\n                                        fetchRecord={this.fetchTaskRecord}\r\n                                        //fetchRecord={this.fetchInstrumentRecord}\r\n                                        userRoleControlRights={this.state.userRoleControlRights}\r\n                                        screenName=\"IDS_TASK\" />\r\n                                    :\r\n                                    screenName == \"IDS_SAMPLEDETAILS\" ?\r\n                                        this.props.Login.masterData.RESelectedSample && this.props.Login.masterData.RESelectedSample.length === 1 ?\r\n                                            <SampleInfoView\r\n                                                data={this.props.Login.masterData.RESelectedSample && this.props.Login.masterData.RESelectedSample.length > 0\r\n                                                    ? this.props.Login.masterData.RESelectedSample[this.props.Login.masterData.RESelectedSample.length - 1] : {}}\r\n                                                SingleItem={this.state.SingleItem}\r\n\r\n                                                screenName=\"IDS_SAMPLEINFO\"\r\n                                                userInfo={this.props.Login.userInfo}\r\n                                            /> :\r\n                                            <SampleInfoGrid\r\n                                                selectedSample={this.props.Login.masterData.RESelectedSample}\r\n                                                dataState={this.state.sampleGridDataState}\r\n                                                dataStateChange={this.sampleGridDataStateChange}\r\n                                                extractedColumnList={this.gridfillingColumn(this.state.DynamicGridItem) || []}\r\n                                                detailedFieldList={this.gridfillingColumn(this.state.DynamicGridMoreField) || []}\r\n                                                userInfo={this.props.Login.userInfo}\r\n                                                inputParam={this.props.Login.inputParam}\r\n                                                screenName=\"IDS_SAMPLEGRID\"\r\n                                                jsonField={\"jsondata\"}\r\n                                            />\r\n\r\n                                        : \"\"\r\n        )\r\n    }\r\n\r\n\r\n    resultTabDetail = () => {\r\n        const resultTabMap = new Map();\r\n        //let ntransactiontestcode = this.props.Login.masterData.RESelectedTest ? this.props.Login.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\") : \"-1\";\r\n        // let { testskip, testtake } = this.state\r\n        // let testList = this.props.Login.masterData.RE_TEST || [];\r\n        // testList = testList.slice(testskip, testskip + testtake);\r\n        const meanControlId = this.state.controlMap.has(\"CalculateMean\") && this.state.controlMap.get(\"CalculateMean\").ncontrolcode\r\n        //let selectedTestList = getSameRecordFromTwoArrays(testList, this.props.Login.masterData.RESelectedTest, \"ntransactiontestcode\");\r\n\r\n\r\n        resultTabMap.set(\"IDS_RESULTS\", <ResultEntryResultsTab\r\n            tabSequence={SideBarSeqno.TEST}\r\n            userInfo={this.props.Login.userInfo}\r\n            genericLabel ={this.props.Login.genericLabel}\r\n            masterData={this.props.Login.masterData}\r\n            inputParam={this.props.Login.inputParam}\r\n            dataState={this.state.resultDataState}\r\n            dataStateChange={this.dataStateChange}\r\n            fetchRecord={this.props.parameterRecord}\r\n            controlMap={this.state.controlMap}\r\n            parameterParam={{ primaryKeyField: \"ntransactionresultcode\", masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo }}\r\n            checkListRecord={this.checkListRecord}\r\n            editpredefinedcomments={this.editpredefinedcomments}\r\n            enforceResult={this.enforceResult}\r\n            checklistParam={{ masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo }}\r\n            selectedId={this.props.Login.selectedId || null}\r\n            viewFile={this.props.viewAttachment}\r\n            userRoleControlRights={this.state.userRoleControlRights}\r\n            screenName=\"IDS_RESULTS\"\r\n            getMeanTestParameter={this.props.getMeanCalculationTestParameter}\r\n            meanParam={{ \"userInfo\": this.props.Login.userInfo, ncontrolCode: meanControlId }}\r\n        />)\r\n\r\n        resultTabMap.set(\"IDS_RESULTCHANGEHISTORY\",\r\n            <ResultChangeHistoryTab\r\n                tabSequence={SideBarSeqno.TEST}\r\n                userInfo={this.props.Login.userInfo}\r\n                genericLabel={this.props.Login.genericLabel}\r\n                ApprovalResultChangeHistory={this.props.Login.masterData.ResultChangeHistory || []}\r\n                inputParam={this.props.Login.inputParam}\r\n                dataState={this.state.resultChangeDataState}\r\n                dataStateChange={this.dataStateChange}\r\n                screenName=\"IDS_RESULTCHANGEHISTORY\"\r\n                controlMap={this.state.controlMap}\r\n                masterData={this.props.Login.masterData}\r\n                userRoleControlRights={this.state.userRoleControlRights}\r\n                selectedId={null}\r\n\r\n            />)\r\n\r\n        return resultTabMap;\r\n    }\r\n\r\n    attachmentTabDetail = () => {\r\n        const attachmentTabMap = new Map();\r\n        let ntransactiontestcode = this.props.Login.masterData.RESelectedTest ? this.props.Login.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\") : \"-1\";\r\n        let { testskip, testtake, subsampleskip, subsampletake } = this.state\r\n        let testList = this.props.Login.masterData.RE_TEST || [];\r\n        testList = testList.slice(testskip, testskip + testtake);\r\n        const meanControlId = this.state.controlMap.has(\"CalculateMean\") && this.state.controlMap.get(\"CalculateMean\").ncontrolcode\r\n        let selectedTestList = getSameRecordFromTwoArrays(testList, this.props.Login.masterData.RESelectedTest, \"ntransactiontestcode\");\r\n        let npreregno = this.props.Login.masterData.RESelectedSample ? this.props.Login.masterData.RESelectedSample.map(sample => sample.npreregno).join(\",\") : \"-1\";\r\n        let ntransactionsamplecode = this.props.Login.masterData.RESelectedSubSample ?\r\n            this.props.Login.masterData.RESelectedSubSample.map(sample => sample.ntransactionsamplecode).join(\",\") : \"-1\";\r\n        let subsampleList = this.props.Login.masterData.RE_SUBSAMPLE || [];\r\n        subsampleList = subsampleList.slice(subsampleskip, subsampleskip + subsampletake);\r\n        let selectedSubSampleList = getSameRecordFromTwoArrays(subsampleList, this.props.Login.masterData.RESelectedSubSample, \"ntransactionsamplecode\");\r\n\r\n\r\n        attachmentTabMap.set(\"IDS_TESTATTACHMENTS\", <Attachments\r\n            tabSequence={SideBarSeqno.TEST}\r\n            screenName=\"IDS_TESTATTACHMENTS\"\r\n            selectedMaster=\"RESelectedTest\"\r\n            onSaveClick={this.onAttachmentSaveClick}\r\n            controlMap={this.state.controlMap}\r\n            userRoleControlRights={this.state.userRoleControlRights}\r\n            masterList={selectedTestList}\r\n            masterAlertStatus={\"IDS_SELECTTESTTOADDATTACHEMENT\"}\r\n            attachments={this.props.Login.masterData.RegistrationTestAttachment || []}\r\n            deleteRecord={this.props.deleteAttachment}\r\n            fetchRecord={this.props.getAttachmentCombo}\r\n            addName={\"AddTestAttachment\"}\r\n            editName={\"EditTestAttachment\"}\r\n            deleteName={\"DeleteTestAttachment\"}\r\n            viewName={\"ViewTestAttachment\"}\r\n            methodUrl={\"TestAttachment\"}\r\n            nsubsampleneed={this.props.Login.masterData.realRegSubTypeValue.nneedsubsample}\r\n            subFields={[{ [designProperties.VALUE]: \"stestsynonym\" }, { [designProperties.VALUE]: \"screateddate\" }]}\r\n            userInfo={this.props.Login.userInfo}\r\n            isneedReport = {true}\r\n            deleteParam={\r\n                {\r\n                    methodUrl: \"TestAttachment\",\r\n                    ntransactiontestcode,\r\n                    userInfo: this.props.Login.userInfo,\r\n                    masterData: this.props.Login.masterData,\r\n                    esignRights: this.props.Login.userRoleControlRights,\r\n                    screenName: \"IDS_TESTATTACHMENTS\"\r\n\r\n                }\r\n            }\r\n            editParam={{\r\n                methodUrl: \"TestAttachment\",\r\n                ntransactiontestcode,\r\n                userInfo: this.props.Login.userInfo,\r\n                masterData: this.props.Login.masterData,\r\n                esignRights: this.props.Login.userRoleControlRights,\r\n                screenName: \"IDS_TESTATTACHMENTS\",\r\n                masterList: selectedTestList//this.props.Login.masterData.RESelectedTest\r\n            }}\r\n            selectedListName=\"IDS_TESTS\"\r\n            displayName=\"stestsynonym\"\r\n        />)\r\n\r\n        this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nneedsubsample &&\r\n            attachmentTabMap.set(\"IDS_SUBSAMPLEATTACHMENTS\", <Attachments\r\n                tabSequence={SideBarSeqno.SUBSAMPLE}\r\n                screenName=\"IDS_SUBSAMPLEATTACHMENTS\"\r\n                onSaveClick={this.onAttachmentSaveClick}\r\n                selectedMaster=\"selectedSubSample\"\r\n                controlMap={this.state.controlMap}\r\n                userRoleControlRights={this.state.userRoleControlRights}\r\n                attachments={this.props.Login.masterData.RegistrationSampleAttachment || []}\r\n                deleteRecord={this.props.deleteAttachment}\r\n                masterList={this.props.Login.masterData.RESelectedSubSample}\r\n                masterAlertStatus={\"IDS_SELECTSUBSAMPLETOADDATTACHMENT\"}\r\n                fetchRecord={this.props.getAttachmentCombo}\r\n                viewFile={this.props.viewAttachment}\r\n                addName={\"AddSubSampleAttachment\"}\r\n                editName={\"EditSubSampleAttachment\"}\r\n                deleteName={\"DeleteSubSampleAttachment\"}\r\n                viewName={\"ViewSubSampleAttachment\"}\r\n                methodUrl={\"SubSampleAttachment\"}\r\n                nsubsampleneed={this.props.Login.masterData.realRegSubTypeValue.nneedsubsample}\r\n                skip={this.props.Login.inputParam ? this.props.Login.inputParam.attachmentskip || 0 : 0}\r\n                take={this.props.Login.inputParam ? this.props.Login.inputParam.attachmenttake || 10 : this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5}\r\n                userInfo={this.props.Login.userInfo}\r\n                deleteParam={\r\n                    {\r\n                        methodUrl: \"SubSampleAttachment\",\r\n                        ntransactionsamplecode,\r\n                        userInfo: this.props.Login.userInfo,\r\n                        masterData: this.props.Login.masterData,\r\n                        esignRights: this.props.Login.userRoleControlRights\r\n                    }\r\n                }\r\n                editParam={{\r\n                    methodUrl: \"SubSampleAttachment\",\r\n                    ntransactionsamplecode,\r\n                    userInfo: this.props.Login.userInfo,\r\n                    masterData: this.props.Login.masterData,\r\n                    esignRights: this.props.Login.userRoleControlRights,\r\n                    masterList: this.props.Login.masterData.RE_SUBSAMPLE || []\r\n\r\n                }}\r\n                selectedListName=\"IDS_SAMPLEARNO\"\r\n                displayName=\"ssamplearno\"\r\n            />)\r\n        attachmentTabMap.set(\"IDS_SAMPLEATTACHMENTS\",\r\n            <Attachments\r\n                screenName=\"IDS_SAMPLEATTACHMENTS\"\r\n                tabSequence={SideBarSeqno.SAMPLE}\r\n                selectedMaster={this.props.Login.masterData.RESelectedSample}\r\n                controlMap={this.state.controlMap}\r\n                userRoleControlRights={this.state.userRoleControlRights}\r\n                attachments={this.props.Login.masterData.RegistrationAttachment || []}\r\n                deleteRecord={this.props.deleteAttachment}\r\n                onSaveClick={this.onAttachmentSaveClick}\r\n                masterList={this.props.Login.masterData.RESelectedSample}\r\n                masterAlertStatus={\"IDS_SELECTSAMPLETOADDATTACHEMENT\"}\r\n                fetchRecord={this.props.getAttachmentCombo}\r\n                addName={\"AddSampleAttachment\"}\r\n                editName={\"EditSampleAttachment\"}\r\n                deleteName={\"DeleteSampleAttachment\"}\r\n                viewName={\"ViewSampleAttachment\"}\r\n                methodUrl={\"SampleAttachment\"}\r\n                nsubsampleneed={this.props.Login.masterData.realRegSubTypeValue.nneedsubsample}\r\n                userInfo={this.props.Login.userInfo}\r\n                deleteParam={\r\n                    {\r\n                        methodUrl: \"SampleAttachment\",\r\n                        npreregno,\r\n                        userInfo: this.props.Login.userInfo,\r\n                        masterData: this.props.Login.masterData,\r\n                        esignRights: this.props.Login.userRoleControlRights,\r\n                        screenName: this.props.Login.screenName\r\n\r\n                    }\r\n                }\r\n                editParam={{\r\n                    methodUrl: \"SampleAttachment\",\r\n                    npreregno,\r\n                    userInfo: this.props.Login.userInfo,\r\n                    masterData: this.props.Login.masterData,\r\n                    esignRights: this.props.Login.userRoleControlRights,\r\n                    masterList: this.props.Login.masterData.RESelectedSample\r\n\r\n                }}\r\n                selectedListName=\"IDS_ARNUMBER\"\r\n                displayName=\"sarno\"\r\n            />)\r\n        return attachmentTabMap;\r\n    }\r\n    testDataStateChange = (event) => {\r\n        switch (this.props.Login.activeTestTab) {\r\n            case \"IDS_TEST\":\r\n                this.setState({\r\n                    popUptestDataState: event.dataState\r\n                });\r\n                break;\r\n            case \"IDS_TESTCOMMENTS\":\r\n                this.setState({\r\n                    testCommentDataState: event.dataState\r\n                });\r\n                break;\r\n            case \"IDS_TESTATTACHMENTS\":\r\n                this.setState({\r\n                    testAttachmentDataState: event.dataState\r\n                });\r\n                break;\r\n            default:\r\n                this.setState({\r\n                    popUptestDataState: event.dataState\r\n                });\r\n                break;\r\n        }\r\n\r\n    }\r\n    commentTabDetail = () => {\r\n        const commentTabMap = new Map();\r\n        let { testskip, testtake, subSampleSkip, subSampleTake } = this.state\r\n        let testList = this.props.Login.masterData.searchedTests ? [...this.props.Login.masterData.searchedTests] : this.props.Login.masterData.RE_TEST || [];\r\n        const editTestCommentsId = this.state.controlMap.has(\"EditTestComment\") && this.state.controlMap.get(\"EditTestComment\").ncontrolcode;\r\n        testList = testList.slice(testskip, testskip + testtake);\r\n        let selectedTestList = getSameRecordFromTwoArrays(testList, this.props.Login.masterData.RESelectedTest, \"ntransactiontestcode\");\r\n        let ntransactiontestcode = this.props.Login.masterData.RESelectedTest ? this.props.Login.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\") : \"-1\";\r\n        let npreregno = this.props.Login.masterData.RESelectedSample ? this.props.Login.masterData.RESelectedSample.map(sample => sample.npreregno).join(\",\") : \"-1\";\r\n        const ntransactionsamplecode = this.props.Login.masterData.RESelectedSubSample ? this.props.Login.masterData.RESelectedSubSample.map(sample => sample.ntransactionsamplecode).join(\",\") : \"-1\";\r\n        let subsampleList = this.props.Login.masterData.RE_SUBSAMPLE || [];\r\n        subsampleList = subsampleList.slice(subSampleSkip, subSampleSkip + subSampleTake);\r\n        let selectedSubSampleList = getSameRecordFromTwoArrays(subsampleList, this.props.Login.masterData.RESelectedSubSample, \"ntransactionsamplecode\");\r\n\r\n\r\n        commentTabMap.set(\"IDS_TESTCOMMENTS\", <Comments\r\n            screenName=\"IDS_TESTCOMMENTS\" \r\n            isSampleTestComment={true}\r\n            tabSequence={SideBarSeqno.TEST}\r\n            selectedMaster={selectedTestList}\r\n            onSaveClick={this.onCommentsSaveClick}\r\n            controlMap={this.state.controlMap}\r\n            userRoleControlRights={this.state.userRoleControlRights}\r\n            Comments={this.props.Login.masterData.RegistrationTestComment || []}\r\n            fetchRecord={this.props.getCommentsCombo}\r\n            masterList={selectedTestList}\r\n            masterAlertStatus={\"IDS_SELECTTESTTOADDCOMMENTS\"}\r\n            addName={\"AddTestComment\"}\r\n            editName={\"EditTestComment\"}\r\n            deleteName={\"DeleteTestComment\"}\r\n            methodUrl={\"TestComment\"}\r\n            isTestComment={false}\r\n            primaryKeyField={\"ntestcommentcode\"}\r\n            dataState={this.state.testCommentDataState}\r\n            dataStateChange={this.testDataStateChange}\r\n            masterData={this.props.Login.masterData}\r\n            isneedReport = {true}\r\n            deleteParam={\r\n                {\r\n                    methodUrl: \"TestComment\",\r\n                    ntransactiontestcode,\r\n                    userInfo: this.props.Login.userInfo,\r\n                    masterData: this.props.Login.masterData,\r\n                    esignRights: this.props.Login.userRoleControlRights,\r\n                    screenName: \"IDS_TESTCOMMENTS\"\r\n\r\n                }\r\n            }\r\n            editParam={{\r\n                methodUrl: \"TestComment\",\r\n                ntransactiontestcode,\r\n                userInfo: this.props.Login.userInfo,\r\n                masterData: this.props.Login.masterData,\r\n                esignRights: this.props.Login.userRoleControlRights,\r\n                screenName: \"IDS_TESTCOMMENTS\",\r\n                operation: \"update\",\r\n                masterList: selectedTestList,\r\n                ncontrolCode: editTestCommentsId\r\n            }}\r\n            selectedListName=\"IDS_TESTS\"\r\n            displayName=\"stestsynonym\"\r\n        />)\r\n        this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nneedsubsample &&\r\n            commentTabMap.set(\"IDS_SUBSAMPLECOMMENTS\", <Comments\r\n                screenName=\"IDS_SUBSAMPLECOMMENTS\" \r\n                tabSequence={SideBarSeqno.SUBSAMPLE}\r\n                onSaveClick={this.onCommentsSaveClick}\r\n                selectedMaster=\"selectedSubSample\"\r\n                controlMap={this.state.controlMap}\r\n                userRoleControlRights={this.state.userRoleControlRights}\r\n                Comments={this.props.Login.masterData.RegistrationSampleComment || []}\r\n                fetchRecord={this.props.getCommentsCombo}\r\n                addName={\"AddSubSampleComment\"}\r\n                editName={\"EditSubSampleComment\"}\r\n                deleteName={\"DeleteSubSampleComment\"}\r\n                methodUrl={\"SubSampleComment\"}\r\n                masterData={this.props.Login.masterData}\r\n                isTestComment={false}\r\n                masterList={this.props.Login.masterData.RESelectedSubSample}\r\n                masterAlertStatus=\"IDS_SELECTSUBSAMPLETOADDCOMMENTS\"\r\n                primaryKeyField={\"nsamplecommentcode\"}\r\n                dataState={this.state.subSampleCommentDataState}\r\n                dataStateChange={this.subSampledataStateChange}\r\n                deleteParam={\r\n                    {\r\n                        methodUrl: \"SubSampleComment\",\r\n                        ntransactionsamplecode,\r\n                        userInfo: this.props.Login.userInfo,\r\n                        masterData: this.props.Login.masterData,\r\n                        esignRights: this.props.Login.userRoleControlRights,\r\n                        screenName: \"IDS_SUBSAMPLECOMMENTS\"\r\n\r\n                    }\r\n                }\r\n                editParam={{\r\n                    methodUrl: \"SubSampleComment\",\r\n                    ntransactionsamplecode,\r\n                    userInfo: this.props.Login.userInfo,\r\n                    masterData: this.props.Login.masterData,\r\n                    esignRights: this.props.Login.userRoleControlRights,\r\n                    screenName: \"IDS_SUBSAMPLECOMMENTS\",\r\n                    operation: \"update\",\r\n                    masterList: this.props.Login.masterData.RE_SUBSAMPLE || [],\r\n                    ncontrolCode: this.state.controlMap.has(\"EditSubSampleComment\") && this.state.controlMap.get(\"EditSubSampleComment\").ncontrolcode\r\n                }}\r\n                selectedListName=\"IDS_SAMPLEARNO\"\r\n                displayName=\"ssamplearno\"\r\n            />)\r\n        commentTabMap.set(\"IDS_SAMPLECOMMENTS\", <Comments\r\n            screenName=\"IDS_SAMPLECOMMENTS\"\r\n            tabSequence={SideBarSeqno.SAMPLE}\r\n            onSaveClick={this.onCommentsSaveClick}\r\n            selectedMaster=\"RESelectedSample\"\r\n            controlMap={this.state.controlMap}\r\n            userRoleControlRights={this.state.userRoleControlRights}\r\n            Comments={this.props.Login.masterData.RegistrationComment || []}\r\n            fetchRecord={this.props.getCommentsCombo}\r\n            masterData={this.props.Login.masterData}\r\n            addName={\"AddSampleComment\"}\r\n            editName={\"EditSampleComment\"}\r\n            deleteName={\"DeleteSampleComment\"}\r\n            methodUrl={\"SampleComment\"}\r\n            isTestComment={false}\r\n            masterList={this.props.Login.masterData.RESelectedSample}\r\n            masterAlertStatus=\"IDS_SELECTSAMPLETOADDCOMMENTS\"\r\n            primaryKeyField={\"nregcommentcode\"}\r\n            dataState={this.state.testCommentDataState}\r\n            dataStateChange={this.dataStateChange}\r\n            deleteParam={\r\n                {\r\n                    methodUrl: \"SampleComment\",\r\n                    npreregno,\r\n                    userInfo: this.props.Login.userInfo,\r\n                    masterData: this.props.Login.masterData,\r\n                    esignRights: this.props.Login.userRoleControlRights,\r\n                    screenName: \"IDS_SAMPLECOMMENTS\"\r\n\r\n                }\r\n            }\r\n            editParam={{\r\n                methodUrl: \"SampleComment\",\r\n                npreregno,\r\n                userInfo: this.props.Login.userInfo,\r\n                masterData: this.props.Login.masterData,\r\n                esignRights: this.props.Login.userRoleControlRights,\r\n                screenName: \"IDS_SAMPLECOMMENTS\",\r\n                operation: \"update\",\r\n                masterList: this.props.Login.masterData.RESelectedSample || [],\r\n                ncontrolCode: this.state.controlMap.has(\"EditSampleComment\") && this.state.controlMap.get(\"EditSampleComment\").ncontrolcode\r\n            }}\r\n            selectedListName=\"IDS_ARNUMBER\"\r\n            displayName=\"sarno\"\r\n        />)\r\n\r\n        return commentTabMap;\r\n    }\r\n\r\n\r\n    onInputSwitchOnChange = (event) => {\r\n        if (event.target.name == \"PopupNav\") {\r\n            this.setState({\r\n                enablePropertyPopup: !this.state.enablePropertyPopup\r\n            })\r\n        }\r\n        else {\r\n            this.setState({\r\n                enableAutoClick: !this.state.enableAutoClick\r\n            })\r\n        }\r\n    }\r\n    changePropertyViewClose = (id) => {\r\n\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                activeTabIndex: undefined,\r\n                activeTestTab: undefined,\r\n                activeTabId: id\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n\r\n    changePropertyView = (index, screenName, event, status) => {\r\n\r\n        let id = false;\r\n        if (event && event.ntransactiontestcode) {\r\n            id = event.ntransactiontestcode\r\n        } else if (event && event.ntransactionsamplecode) {\r\n            id = event.ntransactionsamplecode\r\n        } else if (event && event.npreregno) {\r\n            id = event.npreregno\r\n        }\r\n        //console.log(this.state.activeTabId, id , \"=======>\")\r\n        let activeTabIndex\r\n        let activeTabId\r\n        if (window.innerWidth > 992 && event && this.state.enableAutoClick || !event) {\r\n            activeTabIndex = this.state.activeTabIndex !== index ? index : id ? index : false;\r\n            //activeTabId = this.state.activeTabIndex !== index ? true:false;\r\n        }\r\n        if (status != \"click\") {\r\n            if (index) {\r\n                const tabProps = {\r\n                    tabSequence: SideBarSeqno.TEST,\r\n                    screenName: screenName == \"IDS_COMMENTS\" ? \"IDS_TESTCOMMENTS\" : screenName === \"IDS_ATTACHMENTS\" ? \"IDS_TESTATTACHMENTS\" : screenName,\r\n                    activeTabIndex,\r\n                    //activeTabId\r\n                }\r\n                this.onTabChange(tabProps);\r\n            }\r\n            // if (index == SideBarTabIndex.RESULT) {\r\n            //     const tabProps = {\r\n            //         tabSequence: SideBarSeqno.TEST,\r\n            //         screenName: \"IDS_RESULTS\",\r\n            //         activeTabIndex,\r\n            //         //activeTabId\r\n            //     }\r\n            //     this.onTabChange(tabProps);\r\n            // }\r\n\r\n            // else if (index == SideBarTabIndex.ATTACHMENTS) {\r\n            //     const tabProps = {\r\n            //         tabSequence: SideBarSeqno.TEST,\r\n            //         screenName: \"IDS_TESTATTACHMENTS\",\r\n            //         activeTabIndex,\r\n            //        // activeTabId\r\n            //     }\r\n            //     this.onTabChange(tabProps);\r\n            // }\r\n            // else if (index == SideBarTabIndex.COMMENTS) {\r\n            //     const tabProps = {\r\n            //         tabSequence: SideBarSeqno.TEST,\r\n            //         screenName: \"IDS_TESTCOMMENTS\",\r\n            //         activeTabIndex,\r\n            //         //activeTabId\r\n            //     }\r\n            //     this.onTabChange(tabProps);\r\n            // }\r\n            // else {\r\n            //     if (window.innerWidth > 992 && event && this.state.enableAutoClick || !event) {\r\n\r\n            //         const updateInfo = {\r\n            //             typeName: DEFAULT_RETURN,\r\n            //             data: {\r\n            //                 activeTabIndex: this.state.activeTabIndex !== index ? index : id ? index : false,\r\n            //                 activeTabId: id\r\n            //             }\r\n            //         }\r\n            //         this.props.updateStore(updateInfo);\r\n            //     }\r\n            // }\r\n        }\r\n    }\r\n\r\n\r\n    onTabChange = (tabProps) => {\r\n        const activeTestTab = tabProps.screenName;\r\n        const tabseqno = tabProps.tabSequence;\r\n        // if (activeTestTab !== this.props.Login.activeTestTab) {\r\n        if (tabseqno == SideBarSeqno.TEST) {\r\n            if (this.props.Login.masterData.RESelectedTest && this.props.Login.masterData.RESelectedTest.length > 0) {\r\n                let inputData = {\r\n                    masterData: this.props.Login.masterData,\r\n                    ntransactiontestcode: this.props.Login.masterData.RESelectedTest ? this.props.Login.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\").toString() : \"\",\r\n                    npreregno: this.props.Login.masterData.RESelectedSample ? this.props.Login.masterData.RESelectedSample.map(preregno => preregno.npreregno).join(\",\").toString() : \"\",\r\n                    RESelectedTest: this.props.Login.masterData.RESelectedTest ? this.props.Login.masterData.RESelectedTest : \"\",\r\n                    userinfo: this.props.Login.userInfo,\r\n                    activeTestKey: activeTestTab,\r\n                    screenName: activeTestTab,\r\n                    //activeTestTab,\r\n                    resultDataState: this.state.resultDataState,\r\n                    instrumentDataState: this.state.instrumentDataState,\r\n                    materialDataState: this.state.materialDataState,\r\n                    taskDataState: this.state.taskDataState,\r\n                    documentDataState: this.state.documentDataState,\r\n                    resultChangeDataState: this.state.resultChangeDataState,\r\n                    testCommentDataState: this.state.testCommentDataState,\r\n                    activeTabIndex: tabProps.activeTabIndex ? tabProps.activeTabIndex : this.state.activeTabIndex,\r\n                    activeTabId: tabProps.activeTabId ? tabProps.activeTabId : this.state.activeTabId\r\n                }\r\n                this.props.getTestChildTabREDetail(inputData, true);\r\n            } else {\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTTEST\" }));\r\n            }\r\n        }\r\n        else if (tabseqno == SideBarSeqno.SUBSAMPLE) {\r\n            if (activeTestTab !== this.props.Login.activeTestTab) {\r\n                let inputData = {\r\n                    masterData: this.props.Login.masterData,\r\n                    selectedSubSample: this.props.Login.masterData.RESelectedSubSample,\r\n                    ntransactionsamplecode: this.props.Login.masterData.RESelectedSubSample ? this.props.Login.masterData.RESelectedSubSample.map(item => item.ntransactionsamplecode).join(\",\") : \"-1\",\r\n                    userinfo: this.props.Login.userInfo,\r\n                    screenName: activeTestTab,\r\n                    activeTestTab,\r\n                    activeSubSampleTab: activeTestTab,\r\n                    subSampleCommentDataState: this.state.subSampleCommentDataState,\r\n                    subSampleAttachmentDataState: this.state.subSampleAttachmentDataState,\r\n                }\r\n                this.props.getSubSampleChildTabDetail(inputData)\r\n            }\r\n            else {\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTSAMPLE\" }))\r\n            }\r\n        }\r\n        else {\r\n\r\n            if (activeTestTab !== this.props.Login.activeTestTab) {\r\n                let inputData = {\r\n                    masterData: this.props.Login.masterData,\r\n                    RESelectedSample: this.props.Login.masterData.RESelectedSample,\r\n                    npreregno: this.props.Login.masterData.RESelectedSample ? this.props.Login.masterData.RESelectedSample.map(item => item.npreregno).join(\",\") : \"-1\",\r\n                    userinfo: this.props.Login.userInfo,\r\n                    screenName: activeTestTab,\r\n                    activeSampleTab: activeTestTab,\r\n                    activeTestTab,\r\n                    sampleChangeDataState: this.state.sampleChangeDataState\r\n                }\r\n                this.props.getSampleChildTabDetail(inputData)\r\n            }\r\n        }\r\n\r\n        //}\r\n    }\r\n    mandatoryFieldsForAdditionalInfo = () => { \r\n        let mandatoryFieldsAdditionalInfo=[] \r\n        if(this.props.Login.showMultiSelectCombo){\r\n            mandatoryFieldsAdditionalInfo.push({ \"idsName\": this.props.Login.masterData['salertmessage'], \"dataField\": \"ntestgrouptestpredefsubcode\", \"mandatory\": true,\r\n             \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"file\" })\r\n        }else{\r\n            mandatoryFieldsAdditionalInfo.push({ \"idsName\": this.props.Login.masterData['salertmessage'], \"dataField\": \"ntestgrouptestpredefsubcode\", \"mandatory\": true,\r\n            \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"file\" })\r\n        } \r\n        return mandatoryFieldsAdditionalInfo; \r\n    }\r\n    render() {\r\n        let sampleListRE = this.props.Login.masterData.RE_SAMPLE ? sortData(this.props.Login.masterData.RE_SAMPLE, \"descending\", \"npreregno\") : [];\r\n        //let subSampleListRE = this.props.Login.masterData.RE_SUBSAMPLE ? sortData(this.props.Login.masterData.RE_SUBSAMPLE, 'descending', 'ntransactionsamplecode') : [];\r\n        //let testListRE = this.props.Login.masterData.RE_TEST ? sortData(this.props.Login.masterData.RE_TEST,'descending','ntransactiontestcode') : [] //? sortData(this.props.Login.masterData.RE_TEST, 'descending', 'ntransactiontestcode') : [];\r\n        //let subSampleListRE = this.props.Login.masterData.RE_SUBSAMPLE ?  this.props.Login.masterData.RE_SUBSAMPLE : []\r\n        //let subSampleListRE = this.props.Login.masterData.RE_SUBSAMPLE ? sortData(this.props.Login.masterData.RE_SUBSAMPLE, 'descending', 'ntransactionsamplecode') : [];\r\n        //let testListRE = this.props.Login.masterData.RE_TEST ? sortData(this.props.Login.masterData.RE_TEST,'descending','ntransactiontestcode') : [] //? sortData(this.props.Login.masterData.RE_TEST, 'descending', 'ntransactiontestcode') : [];\r\n        let subSampleListRE = this.props.Login.masterData.RE_SUBSAMPLE ? this.props.Login.masterData.RE_SUBSAMPLE : []\r\n\r\n        //let testListRE = this.props.Login.masterData.RE_TEST ? this.props.Login.masterData.RE_TEST : []\r\n        let testListRE = this.props.Login.masterData.RE_TEST ? this.props.Login.masterData.RE_TEST  : []\r\n        const startDate = (this.props.Login.masterData.realFromDate || this.props.Login.masterData.fromDate || new Date());\r\n        const endDate = (this.props.Login.masterData.realToDate || this.props.Login.masterData.toDate || new Date());\r\n\r\n        // let obj = this.covertDatetoString(startDate, endDate)\r\n        let obj = convertDateValuetoString(startDate, endDate, this.props.Login.userInfo);\r\n\r\n        const fromDate = obj.fromDate;\r\n        const toDate = obj.toDate;\r\n\r\n       \r\n        let subSampleGetREParam = {\r\n            masterData: this.props.Login.masterData,\r\n            userinfo: this.props.Login.userInfo,\r\n            nsampletypecode: this.props.Login.masterData.realSampleTypeValue && this.props.Login.masterData.realSampleTypeValue.nsampletypecode,\r\n            nregtypecode: this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue.nregtypecode,\r\n            nregsubtypecode: this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode,\r\n            napprovalversioncode: this.props.Login.masterData.realApproveConfigVersion && this.props.Login.masterData.realApproveConfigVersion.napprovalconfigversioncode,\r\n            ntransactionstatus: this.props.Login.masterData.realFilterStatusValue && this.props.Login.masterData.realFilterStatusValue.ntransactionstatus,\r\n            ntestcode: this.props.Login.masterData.realTestcodeValue && this.props.Login.masterData.realTestcodeValue.ntestcode,\r\n            npreregno: this.props.Login.masterData.RESelectedSample &&   this.props.Login.masterData.RESelectedSample.map(sample => sample&&sample.npreregno).join(\",\"),\r\n            fromdate: fromDate,\r\n            todate: toDate,\r\n            activeTestKey: this.props.Login.activeTestTab || 'IDS_RESULTS',\r\n            activeSampleKey: this.props.Login.activeTestTab || 'IDS_IDS_SAMPLEINFO',\r\n            testskip: this.state.testskip,\r\n            testtake: this.state.testtake,\r\n            resultDataState: this.state.resultDataState,\r\n            instrumentDataState: this.state.instrumentDataState,\r\n            materialDataState: this.state.materialDataState,\r\n            taskDataState: this.state.taskDataState,\r\n            documentDataState: this.state.documentDataState,\r\n            resultChangeDataState: this.state.resultChangeDataState,\r\n            testCommentDataState: this.state.testCommentDataState,\r\n            sampleChangeDataState: this.state.sampleChangeDataState,\r\n            ndesigntemplatemappingcode: this.props.Login.masterData.ndesigntemplatemappingcode,\r\n            searchSubSampleRef: this.searchSubSampleRef,\r\n            searchTestRef: this.searchTestRef,\r\n            nneedtemplatebasedflow: (this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nneedtemplatebasedflow) || false,\r\n            //Aravindh\r\n            checkBoxOperation: 3,\r\n            nworlistcode : (this.props.Login.masterData.realWorklistCodeValue && this.props.Login.masterData.realWorklistCodeValue.nworklistcode) || -1,\r\n            nbatchmastercode : (this.props.Login.masterData.realBatchCodeValue && this.props.Login.masterData.realBatchCodeValue.nbatchmastercode) || -1\r\n        }\r\n        let testGetREParam = {\r\n            masterData: this.props.Login.masterData,\r\n            userinfo: this.props.Login.userInfo,\r\n            nsampletypecode: this.props.Login.masterData.realSampleTypeValue && this.props.Login.masterData.realSampleTypeValue.nsampletypecode,\r\n            nregtypecode: this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue.nregtypecode,\r\n            nregsubtypecode: this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode,\r\n            napprovalversioncode: this.props.Login.masterData.realApproveConfigVersion && this.props.Login.masterData.realApproveConfigVersion.napprovalconfigversioncode,\r\n            ntranscode: String(this.props.Login.masterData.realFilterStatusValue &&this.props.Login.masterData.realFilterStatusValue.ntransactionstatus&& (this.props.Login.masterData.realFilterStatusValue.ntransactionstatus).toString()),\r\n            ntransactionstatus: this.props.Login.masterData.realFilterStatusValue && this.props.Login.masterData.realFilterStatusValue.ntransactionstatus,\r\n            ntestcode: this.props.Login.masterData.realTestcodeValue && this.props.Login.masterData.realTestcodeValue.ntestcode,\r\n            npreregno: this.props.Login.masterData.RESelectedSample && this.props.Login.masterData.RESelectedSample.map(sample => sample&&sample.npreregno).join(\",\"),\r\n            activeTestKey: this.props.Login.activeTestTab || 'IDS_RESULTS',\r\n            activeSampleKey: this.props.Login.activeTestTab || 'IDS_IDS_SAMPLEINFO',\r\n            activeSubSampleTab: this.props.Login.activeTestTab || \"IDS_SUBSAMPLEATTACHMENTS\",\r\n            resultDataState: this.state.resultDataState,\r\n            instrumentDataState: this.state.instrumentDataState,\r\n            materialDataState: this.state.materialDataState,\r\n            taskDataState: this.state.taskDataState,\r\n            documentDataState: this.state.documentDataState,\r\n            resultChangeDataState: this.state.resultChangeDataState,\r\n            testCommentDataState: this.state.testCommentDataState,\r\n            ndesigntemplatemappingcode: this.props.Login.masterData.ndesigntemplatemappingcode,\r\n            nneedsubsample: this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nneedsubsample,\r\n            testskip: this.state.testskip,\r\n            testtake: this.state.testtake,\r\n            resultDataState: this.state.resultDataState,\r\n            instrumentDataState: this.state.instrumentDataState,\r\n            materialDataState: this.state.materialDataState,\r\n            taskDataState: this.state.taskDataState,\r\n            documentDataState: this.state.documentDataState,\r\n            resultChangeDataState: this.state.resultChangeDataState,\r\n            testCommentDataState: this.state.testCommentDataState,\r\n            historyDataState: this.state.historyDataState,\r\n            samplePrintHistoryDataState: this.state.samplePrintHistoryDataState,\r\n            sampleHistoryDataState: this.state.sampleHistoryDataState,\r\n            activeTabIndex: this.state.enableAutoClick ? 1 : this.state.activeTabIndex ? this.state.activeTabIndex : 0,\r\n            nworlistcode : (this.props.Login.masterData.realWorklistCodeValue && this.props.Login.masterData.realWorklistCodeValue.nworklistcode) || -1,\r\n            nbatchmastercode : (this.props.Login.masterData.realBatchCodeValue && this.props.Login.masterData.realBatchCodeValue.nbatchmastercode) || -1\r\n        }\r\n        let testChildGetREParam = {\r\n            masterData: this.props.Login.masterData,\r\n            userinfo: this.props.Login.userInfo,\r\n            nsampletypecode: this.props.Login.masterData.realSampleTypeValue && this.props.Login.masterData.realSampleTypeValue.nsampletypecode,\r\n            nregtypecode: this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue.nregtypecode,\r\n            nregsubtypecode: this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode,\r\n            napprovalversioncode: this.props.Login.masterData.realApproveConfigVersion && this.props.Login.masterData.realApproveConfigVersion.napprovalconfigversioncode,\r\n            ntransactionstatus: this.props.Login.masterData.realFilterStatusValue && this.props.Login.masterData.realFilterStatusValue.ntransactionstatus,\r\n            ntestcode: this.props.Login.masterData.realTestcodeValue && this.props.Login.masterData.realTestcodeValue.ntestcode,\r\n            npreregno: this.props.Login.masterData.RESelectedSample && this.props.Login.masterData.RESelectedSample.map(sample => sample&&sample.npreregno).join(\",\"),\r\n            ntransactionsamplecode: this.props.Login.masterData.RESelectedSubSample && this.props.Login.masterData.RESelectedSubSample.map(sample => sample&&sample.ntransactionsamplecode).join(\",\"),\r\n            activeTestKey: this.props.Login.activeTestTab || 'IDS_RESULTS',\r\n            fromdate: fromDate,\r\n            todate: toDate,\r\n            testskip: this.state.testskip,\r\n            testtake: this.state.testtake,\r\n            resultDataState: this.state.resultDataState,\r\n            instrumentDataState: this.state.instrumentDataState,\r\n            materialDataState: this.state.materialDataState,\r\n            taskDataState: this.state.taskDataState,\r\n            documentDataState: this.state.documentDataState,\r\n            resultChangeDataState: this.state.resultChangeDataState,\r\n            testCommentDataState: this.state.testCommentDataState,\r\n            ndesigntemplatemappingcode: this.props.Login.masterData.ndesigntemplatemappingcode,\r\n            activeTabIndex: this.state.enableAutoClick ? 1 : this.state.activeTabIndex ? this.state.activeTabIndex : 0,\r\n            nworlistcode : (this.props.Login.masterData.realWorklistCodeValue && this.props.Login.masterData.realWorklistCodeValue.nworklistcode) || -1,\r\n            nbatchmastercode : (this.props.Login.masterData.realBatchCodeValue && this.props.Login.masterData.realBatchCodeValue.nbatchmastercode) || -1\r\n        }\r\n\r\n        let sampleSearchField = [\"sarno\", \"ssamplearno\", \"sproductname\", \"sproductcatname\", \"seprotocolname\", \"stransdisplaystatus\"\r\n            , \"sstorageconditionname\", \"sdecisionstatus\", \"scomponentname\", \"splasmafilenumber\", \"sversion\", \"sbulkvolume\", \"sregsubtypename\", \"smanuflotno\"\r\n            , \"sregtypename\", \"sspecname\", \"saddress1\", \"sclientname\", \"smanufsitename\", \"sproductcertificatename\", \"smanufname\", \"sstoragelocationname\", \"dregdate\"];\r\n        if (this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode === RegistrationSubType.ROUTINE) {\r\n\r\n            sampleSearchField = [\"sarno\", \"ssamplearno\", \"sproductname\", \"sproductcatname\", \"sregsubtypename\", \"sregtypename\", \"sspecname\", \"smanufname\", \"sstorageconditionname\",\r\n                \"sclientname\", \"scontainertype\", \"sdeadline\", \"sdecisionstatus\", \"sdeviationcomments\", \"sdispositionname\", \"slotno\", \"sbatchno\", \"sourfile\", \"speriodname\",\r\n                \"spriorityname\", \"sreceiveddate\", \"sremarks\", \"sreportremarks\", \"ssamplecondition\", \"ssuppliername\", \"stotalqty\", \"stransdisplaystatus\"\r\n            ]\r\n        }\r\n        const filterSampleParam = {\r\n            inputListName: \"RE_SAMPLE\",\r\n            selectedObject: \"RESelectedSample\",\r\n            primaryKeyField: \"npreregno\",\r\n            fetchUrl: \"resultentrybysample/getResultEntryDetails\",\r\n            childRefs: [{ ref: this.searchSubSampleRef, childFilteredListName: \"searchedSubSample\" }, { ref: this.searchTestRef, childFilteredListName: \"searchedTest\" }],\r\n            fecthInputObject: {\r\n                ntype: 2,\r\n                nflag: 2,\r\n                ntransactiontestcode: 0,\r\n                masterData: this.props.Login.masterData,\r\n                userinfo: this.props.Login.userInfo,\r\n                nsampletypecode: this.props.Login.masterData.realSampleTypeValue && this.props.Login.masterData.realSampleTypeValue.nsampletypecode,\r\n                nregtypecode: this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue.nregtypecode,\r\n                nregsubtypecode: this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode,\r\n                napprovalversioncode: this.props.Login.masterData.realApproveConfigVersion && this.props.Login.masterData.realApproveConfigVersion.napprovalconfigversioncode,\r\n                ntranscode: String(this.props.Login.masterData.realFilterStatusValue ? this.props.Login.masterData.realFilterStatusValue.ntransactionstatus ? this.props.Login.masterData.realFilterStatusValue.ntransactionstatus.toString() : 0 : 0),\r\n                ntestcode: this.props.Login.masterData.realTestcodeValue && this.props.Login.masterData.realTestcodeValue.ntestcode,\r\n                //npreregno: this.props.Login.masterData.RESelectedSample && this.props.Login.masterData.RESelectedSample.map(sample => sample.npreregno).join(\",\"),\r\n                fromdate: fromDate,\r\n                todate: toDate,\r\n                activeTestKey: this.props.Login.activeTestTab || 'IDS_RESULTS',\r\n                //nneedsubsample: this.props.Login.masterData.nneedsubsample || 4,\r\n                nneedsubsample: this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nneedsubsample  ? true : false,\r\n                ndesigntemplatemappingcode: this.props.Login.masterData.ndesigntemplatemappingcode,\r\n                checkBoxOperation: 3,\r\n                ndesigntemplatemappingcode: this.props.Login.masterData.ndesigntemplatemappingcode && this.props.Login.masterData.ndesigntemplatemappingcode || -1,\r\n                nworlistcode : (this.props.Login.masterData.realWorklistCodeValue && this.props.Login.masterData.realWorklistCodeValue.nworklistcode) || -1,\r\n                nbatchmastercode : (this.props.Login.masterData.realBatchCodeValue && this.props.Login.masterData.realBatchCodeValue.nbatchmastercode) || -1\r\n            },\r\n            masterData: this.props.Login.masterData,\r\n            // searchFieldList: [\"sarno\", \"ssampletypestatus\"],\r\n            searchFieldList: sampleSearchField,\r\n            changeList: [\"RE_SUBSAMPLE\", \"RE_TEST\", \"TestParameters\",\r\n                \"ResultChangeHistory\", \"ApprovalHistory\", \"ResultUsedInstrument\",\r\n                \"ResultUsedTasks\", \"RegistrationTestAttachment\", \"RegistrationTestComment\",\r\n                \"RegistrationAttachment\", \"RESelectedSample\", \"RESelectedSubSample\", \"RESelectedTest\"]\r\n        };\r\n\r\n        const filterSubSampleParam = {\r\n            inputListName: \"RE_SUBSAMPLE\",\r\n            selectedObject: \"RESelectedSubSample\",\r\n            primaryKeyField: \"ntransactionsamplecode\",\r\n            fetchUrl: \"resultentrybysample/getResultEntrySubSampleDetails\",\r\n            childRefs: [{ ref: this.searchTestRef, childFilteredListName: \"searchedTest\" }],\r\n            fecthInputObject: {\r\n                ntype: 3,\r\n                nflag: 3,\r\n                ntransactiontestcode: 0,\r\n                masterData: this.props.Login.masterData,\r\n                userinfo: this.props.Login.userInfo,\r\n                nsampletypecode: this.props.Login.masterData.realSampleTypeValue && this.props.Login.masterData.realSampleTypeValue.nsampletypecode,\r\n                nregtypecode: this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue.nregtypecode,\r\n                nregsubtypecode: this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode,\r\n                napprovalversioncode: this.props.Login.masterData.realApproveConfigVersion && this.props.Login.masterData.realApproveConfigVersion.napprovalconfigversioncode,\r\n                ntranscode: String(this.props.Login.masterData.realFilterStatusValue ? this.props.Login.masterData.realFilterStatusValue.ntransactionstatus ? this.props.Login.masterData.realFilterStatusValue.ntransactionstatus.toString() : 0 : 0),\r\n                ntestcode: this.props.Login.masterData.realTestcodeValue && this.props.Login.masterData.realTestcodeValue.ntestcode,\r\n                //npreregno: this.props.Login.masterData.RESelectedSample && this.props.Login.masterData.RESelectedSample.map(sample => sample.npreregno).join(\",\"),\r\n                fromdate: fromDate,\r\n                todate: toDate,\r\n                activeTestKey: this.props.Login.activeTestTab || 'IDS_RESULTS',\r\n                nneedsubsample:  this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nneedsubsample  ? true : false,\r\n                ndesigntemplatemappingcode: this.props.Login.masterData.ndesigntemplatemappingcode,\r\n                checkBoxOperation: 3,\r\n                nworlistcode : (this.props.Login.masterData.realWorklistCodeValue && this.props.Login.masterData.realWorklistCodeValue.nworklistcode) || -1,\r\n                nbatchmastercode : (this.props.Login.masterData.realBatchCodeValue && this.props.Login.masterData.realBatchCodeValue.nbatchmastercode) || -1\r\n            },\r\n            masterData: this.props.Login.masterData,\r\n            // searchFieldList: [\"sarno\", \"ssampletypestatus\"],\r\n            searchFieldList: ['ssamplearno', \"sarno\", \"sproductname\", \"sproductcatname\", \"sregsubtypename\", \"sregtypename\", \"sspecname\", \"smanufname\", \"sstorageconditionname\",\r\n                \"sclientname\", \"scontainertype\", \"sdeadline\", \"sdecisionstatus\", \"sdeviationcomments\", \"sdispositionname\", \"slotno\", \"sbatchno\", \"sourfile\", \"speriodname\",\r\n                \"spriorityname\", \"sreceiveddate\", \"sremarks\", \"sreportremarks\", \"ssamplecondition\", \"ssuppliername\", \"stotalqty\", \"stransdisplaystatus\"],\r\n            changeList: [\"RE_TEST\", \"TestParameters\",\r\n                \"ResultChangeHistory\", \"ApprovalHistory\", \"ResultUsedInstrument\",\r\n                \"ResultUsedTasks\", \"RegistrationTestAttachment\", \"RegistrationTestComment\",\r\n                \"RegistrationAttachment\", \"RESelectedSubSample\", \"RESelectedTest\"]\r\n        };\r\n        let filterTestParam = {\r\n            inputListName: \"RE_TEST\",\r\n            selectedObject: \"RESelectedTest\",\r\n            primaryKeyField: \"ntransactiontestcode\",\r\n            fetchUrl: this.getActiveTestURL(),\r\n            fecthInputObject: {\r\n                ntransactiontestcode: this.props.Login.masterData.RESelectedTest ? this.props.Login.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\") : \"-1\",\r\n                userinfo: this.props.Login.userInfo,\r\n                ndesigntemplatemappingcode: this.props.Login.masterData.ndesigntemplatemappingcode && this.props.Login.masterData.ndesigntemplatemappingcode || -1,\r\n                nworlistcode : (this.props.Login.masterData.realWorklistCodeValue && this.props.Login.masterData.realWorklistCodeValue.nworklistcode) || -1,\r\n                nbatchmastercode : (this.props.Login.masterData.realBatchCodeValue && this.props.Login.masterData.realBatchCodeValue.nbatchmastercode) || -1\r\n            },\r\n            masterData: this.props.Login.masterData,\r\n            searchFieldList: [\"sarno\", \"ssamplearno\", \"stestsynonym\", \"dtransactiondate\", \"ssectionname\", \"ssourcename\", \"ntestrepeatno\", \"ntestretestno\", \"stransdisplaystatus\", \"stestsynonym\"],\r\n            changeList: [\"TestParameters\",\r\n                \"ResultChangeHistory\", \"ApprovalHistory\", \"ResultUsedInstrument\",\r\n                \"ResultUsedTasks\", \"RegistrationTestAttachment\", \"RegistrationTestComment\",\r\n                \"RegistrationAttachment\", \"RESelectedTest\"],\r\n            ndesigntemplatemappingcode: this.props.Login.masterData.ndesigntemplatemappingcode,\r\n            nneedsubsample: this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nneedsubsample  ? true : false,\r\n            checkBoxOperation: 3,\r\n            //nworlistcode : (this.props.Login.masterData.defaultWorklistvalue && this.props.Login.masterData.defaultWorklistvalue.nworklistcode) || -1\r\n\r\n        }\r\n\r\n        this.postParamList = [\r\n            {\r\n                filteredListName: \"searchedSample\",\r\n                clearFilter: \"no\",\r\n                searchRef: this.searchSampleRef,\r\n                primaryKeyField: \"npreregno\",\r\n                fetchUrl: \"resultentrybysample/getResultEntryDetails\",\r\n                fecthInputObject: filterSampleParam,\r\n                selectedObject: \"RESelectedSample\",\r\n                inputListName: \"RE_SAMPLE\",\r\n                updatedListname: \"\",\r\n                childRefs: [{ ref: this.searchSubSampleRef, childFilteredListName: \"searchedSubSample\" }, { ref: this.searchTestRef, childFilteredListName: \"searchedTest\" }],\r\n                unchangeList: [\"realSampleTypeValue\", \"SampleTypeValue\", \"realRegTypeValue\", \"RegTypeValue\", \"realRegSubTypeValue\", \"RegSubTypeValue\",\r\n                    \"realApprovalVersionValue\", \"ApprovalVersionValue\", \"realFilterStatusValue\", \"FilterStatusValue\", \"fromDate\", \"toDate\",\r\n                    \"UserSectionValue\", \"SampleType\", \"RegType\", \"RegSubType\", \"ApprovalVersion\", \"JobStatus\", \"JobStatusValue\", \"FilterStatus\"]\r\n            }, {\r\n                filteredListName: \"searchedSubSample\",\r\n                updatedListname: \"updatedSubSample\",\r\n                clearFilter: \"no\",\r\n                searchRef: this.searchSubSampleRef,\r\n                primaryKeyField: \"ntransactionsamplecode\",\r\n                fetchUrl: \"resultentrybysample/getResultEntryDetails\",\r\n                fecthInputObject: testGetREParam,\r\n                selectedObject: \"RESelectedSubSample\",\r\n                childRefs: [{ ref: this.searchTestRef, childFilteredListName: \"searchedTest\" }],\r\n                inputListName: \"RE_SUBSAMPLE\",\r\n                unchangeList: [\"realSampleTypeValue\", \"SampleTypeValue\", \"realRegTypeValue\", \"RegTypeValue\", \"realRegSubTypeValue\", \"RegSubTypeValue\",\r\n                    \"realApprovalVersionValue\", \"ApprovalVersionValue\", \"realFilterStatusValue\", \"FilterStatusValue\", \"fromDate\", \"toDate\",\r\n                    \"UserSectionValue\", \"SampleType\", \"RegType\", \"RegSubType\", \"ApprovalVersion\", \"JobStatus\", \"JobStatusValue\", \"FilterStatus\"]\r\n            }, {\r\n                filteredListName: \"searchedTest\",\r\n                clearFilter: \"yes\",\r\n                searchRef: this.searchTestRef,\r\n                primaryKeyField: \"ntransactiontestcode\",\r\n                fetchUrl: this.getActiveTestURL(),\r\n                childRefs: [{ ref: this.searchSubSampleRef, childFilteredListName: \"searchedSubSample\" }, { ref: this.searchSampleRef, childFilteredListName: \"\" }],\r\n                fecthInputObject: testChildGetREParam,\r\n                selectedObject: \"RESelectedTest\",\r\n                inputListName: \"RE_TEST\",\r\n                updatedListname: \"updatedTest\",\r\n                unchangeList: [\"realSampleTypeValue\", \"SampleTypeValue\", \"realRegTypeValue\", \"RegTypeValue\", \"realRegSubTypeValue\", \"RegSubTypeValue\",\r\n                    \"realApprovalVersionValue\", \"ApprovalVersionValue\", \"realFilterStatusValue\", \"FilterStatusValue\", \"fromDate\", \"toDate\",\r\n                    \"UserSectionValue\", \"SampleType\", \"RegType\", \"RegSubType\", \"ApprovalVersion\", \"JobStatus\", \"JobStatusValue\", \"FilterStatus\"]\r\n            }];\r\n\r\n\r\n        this.breadCrumbData = [\r\n            {\r\n                \"label\": \"IDS_FROM\",\r\n                \"value\": obj.breadCrumbFrom\r\n            }, {\r\n                \"label\": \"IDS_TO\",\r\n                \"value\": obj.breadCrumbto\r\n            },\r\n            // {\r\n            //     \"label\": \"IDS_SAMPLETYPE\",\r\n            //     \"value\": this.props.Login.masterData.realSampleTypeValue && this.props.Login.masterData.realSampleTypeValue.ssampletypename ? this.props.Login.masterData.realSampleTypeValue.ssampletypename : \"Product\"\r\n            // }, \r\n            {\r\n                \"label\": \"IDS_REGISTRATIONTYPE\",\r\n                \"value\": this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue.sregtypename ? this.props.Login.masterData.realRegTypeValue.sregtypename : \"NA\"\r\n                // \"value\": this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue.sregtypename || \"NA\" :\r\n                // this.props.Login.masterData.defaultRegistrationType ? this.props.Login.masterData.defaultRegistrationType.sregtypename || \"NA\" : \"NA\"\r\n            }, {\r\n                \"label\": \"IDS_REGISTRATIONSUBTYPE\",\r\n                \"value\": this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.sregsubtypename ? this.props.Login.masterData.realRegSubTypeValue.sregsubtypename : \"NA\"\r\n            }, \r\n            // {\r\n            //     \"label\": \"IDS_CONFIGVERSION\",\r\n            //     \"value\": this.props.Login.masterData.realApproveConfigVersion && this.props.Login.masterData.realApproveConfigVersion.sversionname ? this.props.Login.masterData.realApproveConfigVersion.sversionname : \"NA\"\r\n            // },\r\n            {\r\n                \"label\": \"IDS_TEST\",\r\n                \"value\": this.props.Login.masterData.realTestcodeValue && this.props.Login.masterData.realTestcodeValue.stestsynonym ? this.props.Login.masterData.realTestcodeValue.stestsynonym : \"NA\"\r\n            },\r\n            {\r\n                \"label\": \"IDS_TESTSTATUS\",\r\n                \"value\": this.props.Login.masterData.realFilterStatusValue ? this.props.Login.masterData.realFilterStatusValue.sfilterstatus : \"NA\"\r\n            }\r\n        ]\r\n\r\n        if(this.props.Login.masterData.realWorklistCodeValue && this.props.Login.masterData.realWorklistCodeValue.nworklistcode)\r\n        {\r\n            this.breadCrumbData.push({\r\n                \"label\": \"IDS_WORKLIST\",\r\n                \"value\": this.props.Login.masterData.realWorklistCodeValue ? this.props.Login.masterData.realWorklistCodeValue.sworklistno : \"NA\"\r\n            });\r\n        }\r\n        if(this.props.Login.masterData.realBatchCodeValue && this.props.Login.masterData.realBatchCodeValue.nbatchmastercode)\r\n        {\r\n            this.breadCrumbData.push({\r\n                \"label\": \"IDS_BATCH\",\r\n                \"value\": this.props.Login.masterData.realBatchCodeValue ? this.props.Login.masterData.realBatchCodeValue.sbatcharno : \"NA\"\r\n            });\r\n        }\r\n\r\n        const testStartId = this.state.controlMap.has(\"TestStart\") && this.state.controlMap.get(\"TestStart\").ncontrolcode\r\n        const resultEnterId = this.state.controlMap.has(\"ResultEnter\") && this.state.controlMap.get(\"ResultEnter\").ncontrolcode\r\n        const completeResultId = this.state.controlMap.has(\"CompleteResult\") && this.state.controlMap.get(\"CompleteResult\").ncontrolcode\r\n        const setDefaultId = this.state.controlMap.has(\"SetDefaultResult\") && this.state.controlMap.get(\"SetDefaultResult\").ncontrolcode\r\n\r\n        const editSourceMethodId = this.state.controlMap.has(\"EditSourceMethod\") && this.state.controlMap.get(\"EditSourceMethod\").ncontrolcode\r\n        const addResultUsedInstrumentId = this.state.controlMap.has(\"AddResultUsedInstrument\") && this.state.controlMap.get(\"AddResultUsedInstrument\").ncontrolcode\r\n        const addResultUsedMaterailId = this.state.controlMap.has(\"AddResultUsedMaterial\") && this.state.controlMap.get(\"AddResultUsedMaterial\").ncontrolcode\r\n        const adhocId = this.state.controlMap.has(\"AdhocParameter\") && this.state.controlMap.get(\"AdhocParameter\").ncontrolcode\r\n        const openELNSheet = this.state.controlMap.has(\"OpenELNSheet\") && this.state.controlMap.get(\"OpenELNSheet\").ncontrolcode\r\n\r\n    \r\n\r\n\r\n        const mandatoryFieldsInstrument = [{ \"mandatory\": true, \"idsName\": \"IDS_INSTRUMENTCATEGORY\", \"dataField\": \"ninstrumentcatcode\" },\r\n        { \"mandatory\": true, \"idsName\": \"IDS_INSTRUMENT\", \"dataField\": \"ninstrumentcode\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n        { \"mandatory\": true, \"idsName\": \"IDS_FORMDATE\", \"dataField\": \"dfromdate\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n        { \"mandatory\": true, \"idsName\": \"IDS_TODATE\", \"dataField\": \"dtodate\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n        { \"mandatory\": true, \"idsName\": \"IDS_TIMEZONE\", \"dataField\": \"ntzfromdate\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n        { \"mandatory\": true, \"idsName\": \"IDS_TIMEZONE\", \"dataField\": \"ntztodate\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" }]\r\n\r\n        const mandatoryFieldsTask = [{ \"mandatory\": true, \"idsName\": \"IDS_PREANALYSISTIME\", \"dataField\": \"spreanalysistime\", \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"textbox\" },\r\n        { \"mandatory\": true, \"idsName\": \"IDS_PREPARATIONTIME\", \"dataField\": \"spreparationtime\", \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"textbox\" },\r\n        { \"mandatory\": true, \"idsName\": \"IDS_ANALYSISTIME\", \"dataField\": \"sanalysistime\", \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"textbox\" },\r\n        { \"mandatory\": true, \"idsName\": \"IDS_MISCTIME\", \"dataField\": \"smisctime\", \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"textbox\" },\r\n        ]\r\n\r\n        const mandatoryFieldsTestMethodSource = [{ \"mandatory\": true, \"idsName\": \"IDS_SOURCE\", \"dataField\": \"nsourcecode\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n        { \"mandatory\": true, \"idsName\": \"IDS_METHOD\", \"dataField\": \"nmethodcode\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" }]\r\n\r\n\r\n        const mandatoryEnforceResult = [\r\n        { \"mandatory\": true, \"idsName\": \"IDS_RESULTS\", \"dataField\": \"senforceresult\", \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"textbox\" },\r\n        { \"mandatory\": true, \"idsName\": \"IDS_COMMENTS\", \"dataField\": \"senforceresultcomment\", \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"textbox\" }\r\n       // { \"mandatory\": true, \"idsName\": \"IDS_PASSFLAG\", \"dataField\": \"ngradecode\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"textbox\" },\r\n        ]\r\n\r\n        const mandatoryFieldsParameter = [{ \"mandatory\": true, \"idsName\": \"IDS_PARAMETERCOMMENTS\", \"dataField\": \"sresultcomment\", \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"textbox\" }]\r\n        const validateFormulaMandyFields = this.state.validateFormulaMandyFields;\r\n\r\n        const reportPreviewId = this.state.controlMap.has(\"SamplePreviewReport\") && this.state.controlMap.get(\"SamplePreviewReport\").ncontrolcode\r\n        const testDesign = <ContentPanel>\r\n            <Card>\r\n                <Card.Header style={{ borderBottom: \"0px\" }}>\r\n                    <span style={{ display: \"inline-block\" }}>\r\n                        <h4 className=\"card-title\">{this.props.intl.formatMessage({ id: \"IDS_TEST\" })}</h4>\r\n                    </span>\r\n                </Card.Header>\r\n                <Card.Body className='p-0 sm-pager'>\r\n                    <TransactionListMasterJsonView\r\n                        progressTimerStart={this.props.Login.progressTimerStart||false}\r\n                        clickIconGroup = {true}\r\n                        cardHead={94}\r\n                        //paneHeight={this.state.initialVerticalWidth}\r\n                        // paneHeight={`${testListRE && testListRE !== null && testListRE.length > 0 ? testListRE.length * 13 : 5}vh`}\r\n                        masterList={this.props.Login.masterData.searchedTest || testListRE}\r\n                        selectedMaster={this.props.Login.masterData.RESelectedTest}\r\n                        primaryKeyField=\"ntransactiontestcode\"\r\n                        //getMasterDetail={this.props.getTestChildTabREDetail}\r\n                        getMasterDetail={(event, status) => { this.props.getTestChildTabREDetail(event, status); this.changePropertyView(1, \"IDS_RESULTS\", event, \"click\") }}\r\n                        inputParam={testChildGetREParam}\r\n                        subFieldsLabel={true}\r\n                        additionalParam={[]}\r\n                        mainField=\"stestsynonym\"\r\n                        selectedListName=\"RESelectedTest\"\r\n                        objectName=\"test\"\r\n                        listName=\"IDS_TEST\"\r\n                        pageSize={this.props.Login.settings && this.props.Login.settings[13].split(\",\").map(setting => parseInt(setting))}\r\n                        showStatusLink={true}\r\n                        statusFieldName=\"stransdisplaystatus\"\r\n                        statusField=\"ntransactionstatus\"\r\n                        needMultiSelect={true}\r\n                        subFields={this.state.testListColumns || []}\r\n                        moreField={this.state.testMoreField}\r\n                        needValidation={false}\r\n                        needFilter={false}\r\n                        filterColumnData={this.props.filterTransactionList}\r\n                        searchListName=\"searchedTest\"\r\n                        searchRef={this.searchTestRef}\r\n                        filterParam={filterTestParam}\r\n                        selectionField=\"ntransactionstatus\"\r\n                        showStatusName={true}\r\n                        selectionFieldName=\"sfilterstatus\"\r\n                        childTabsKey={[\"TestParameters\", \"ResultUsedInstrument\", \"ResultUsedTasks\", \"RegistrationTestAttachment\",\r\n                            \"ResultChangeHistory\", \"RegistrationTestComment\", \"ResultChangeHistory\", \"RegistrationComment\"]}\r\n                        // selectionList={this.props.Login.masterData.REFilterStatus && this.props.Login.masterData.realFilterStatusValue && this.props.Login.masterData.realFilterStatusValue.ntransactionstatus === transactionStatus.ALL ? this.props.Login.masterData.REFilterStatus : []}\r\n                        selectionList={this.state.selectedFilter}\r\n                        skip={this.state.testskip}\r\n                        take={this.state.testtake}\r\n                        handlePageChange={this.handleTestPageChange}\r\n                        selectionColorField=\"scolorhexcode\"\r\n                        showMoreResetList={true}\r\n                        showMoreResetListName=\"RE_SAMPLE\"\r\n                        buttonCount={5}\r\n                        jsonField={'jsondata'}\r\n                        jsonDesignFields={true}\r\n                        actionIcons={\r\n                             [\r\n                                { title: this.props.intl.formatMessage({ id: \"IDS_OPENELNSHEET\" }), controlname: \"faMicroscope\", hidden: this.state.userRoleControlRights.indexOf(openELNSheet) === -1, onClick: this.openClosePortal, objectName: \"test\", inputData: { masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo,elnUserInfo: this.props.Login.elnUserInfo,elnSite: this.props.Login.elnSite} },\r\n                            { title: this.props.intl.formatMessage({ id: \"IDS_EDITMETHODSSOURCE\" }), controlname: \"faPencilAlt\", dataplace: \"left\", hidden: this.state.userRoleControlRights.indexOf(editSourceMethodId) === -1, onClick: this.testMethodSourceEdit, objectName: \"test\", inputData: { masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo, editSourceMethodId } },\r\n                          \r\n                            { title: this.props.intl.formatMessage({ id: \"IDS_ADHOCPARAMETER\" }), controlname: \"faAdhocParameter\", dataplace: \"left\", \r\n                              hidden: this.state.userRoleControlRights.indexOf(adhocId) === -1,\r\n                              onClick: this.adhocTestParameter, objectName: \"test\",\r\n                                  inputData: { masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo, adhocId } },\r\n                            { title: this.props.intl.formatMessage({ id: \"IDS_EDITMETHODSSOURCE\" }), controlname: \"faPencilAlt\", dataplace: \"left\", hidden: this.state.userRoleControlRights.indexOf(editSourceMethodId) === -1, onClick: this.testMethodSourceEdit, objectName: \"test\", inputData: { masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo, editSourceMethodId } },\r\n                            { title: this.props.intl.formatMessage({ id: \"IDS_ADDINSTRUMENT\" }), controlname: \"faMicroscope\", hidden: false, onClick: this.addREInstrument, objectName: \"test\", inputData: { masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo, addResultUsedInstrumentId } },\r\n                            { title: this.props.intl.formatMessage({ id: \"IDS_ADDMATERIAL\" }), controlname: \"faFlask\", hidden: false, onClick: this.props.addREMaterial, objectName: \"test\", inputData: { masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo, addResultUsedMaterailId } }\r\n                                // { title: \"Add Task\", controlname: \"faTasks\", hidden: this.state.userRoleControlRights.indexOf(addResultUsedTaskId) === -1, onClick: this.addResultEntryTask, objectName: \"test\", inputData: { addResultUsedTaskId } }\r\n                            ]\r\n                        }\r\n                        commonActions={\r\n                            // <Tooltip position=\"bottom\" anchorElement=\"target\" openDelay={100} parentTitle={true}>\r\n                            <ProductList className=\"d-flex justify-content-end icon-group-wrap\">\r\n                                {testListRE.length > 0 ?\r\n                                    <>\r\n                                        {/* <ReactTooltip place=\"bottom\" /> */}\r\n                                        {/* <Nav.Link data-for=\"tooltip-common-wrap\" data-tip={this.props.intl.formatMessage({ id: \"IDS_TESTSTART\" })} hidden={this.state.userRoleControlRights.indexOf(testStartId) === -1} className=\"btn btn-circle outline-grey ml-2\" role=\"button\" onClick={() => this.testStartActions(testChildGetREParam, this.props.Login.masterData.RESelectedTest, this.props.Login.userInfo, testStartId, this.state.testskip, this.state.testtake)}>\r\n                                                                                                <FontAwesomeIcon icon={faPlay} />\r\n                                                                                            </Nav.Link> */}\r\n\r\n                                        {this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nneedtestinitiate ?\r\n\r\n                                            <FontIconWrap\r\n                                                //  data-for=\"tooltip-common-wrap\" \r\n                                                data-tip={this.props.intl.formatMessage({ id: \"IDS_TESTSTART\" })} hidden={this.state.userRoleControlRights.indexOf(testStartId) === -1}\r\n                                                className=\"btn btn-circle outline-grey ml-2\" role=\"button\"\r\n                                                onClick={() => this.testStartActions(testChildGetREParam, this.props.Login.masterData.RESelectedTest,\r\n                                                    this.props.Login.userInfo, testStartId, this.state.testskip, this.state.testtake)} >\r\n                                                <FontAwesomeIcon icon={faPlay} />\r\n                                                \r\n                                            </FontIconWrap> : \"\"}\r\n\r\n\r\n\r\n                                        <Nav.Link\r\n                                            // data-for=\"tooltip-common-wrap\"\r\n                                            data-tip={this.props.intl.formatMessage({ id: \"IDS_ENTERRESULT\" })} hidden={this.state.userRoleControlRights.indexOf(resultEnterId) === -1} className=\"btn btn-circle outline-grey ml-2\" role=\"button\" onClick={() => this.props.resultGetModule(this.props.Login.masterData, this.props.Login.userInfo, resultEnterId, this.state.testskip, this.state.testtake)} >\r\n                                            <FontAwesomeIcon icon={faAddressBook} />\r\n                                        </Nav.Link>\r\n                                        <Nav.Link\r\n                                            // data-for=\"tooltip-common-wrap\" \r\n                                            data-tip={this.props.intl.formatMessage({ id: \"IDS_FILLDEFAULTRESULT\" })} hidden={this.state.userRoleControlRights.indexOf(setDefaultId) === -1} className=\"btn btn-circle outline-grey ml-2\" role=\"button\" onClick={() => this.defaultActions(testChildGetREParam, this.props.Login.masterData.RESelectedTest, this.props.Login.masterData.RESelectedSample, setDefaultId, this.state.testskip, this.state.testtake)}>\r\n                                            <FontAwesomeIcon icon={faPencilRuler} />\r\n                                        </Nav.Link>\r\n                                        <Nav.Link\r\n                                            // data-for=\"tooltip-common-wrap\"\r\n                                              data-tip={this.props.intl.formatMessage({ id: \"IDS_COMPLETE\" })} hidden={this.state.userRoleControlRights.indexOf(completeResultId) === -1} className=\"btn btn-circle outline-grey ml-2\" role=\"button\" onClick={() => this.completeActions(testChildGetREParam, this.props.Login.masterData.RESelectedTest, this.props.Login.userInfo, completeResultId, this.state.testskip, this.state.testtake)}>\r\n                                            <FontAwesomeIcon icon={faCheckCircle} />\r\n                                        </Nav.Link>\r\n                                        <Nav.Link\r\n                                            //data-for=\"tooltip-common-wrap\" \r\n                                            data-tip={this.props.intl.formatMessage({ id: \"IDS_IMPORTRESULT\" })} hidden={true} className=\"btn btn-circle outline-grey ml-2\" role=\"button\" onClick={() => this.resultImport(testChildGetREParam, this.props.Login.masterData.RESelectedTest, this.props.Login.userInfo, completeResultId, this.state.testskip, this.state.testtake)}>\r\n                                            <FontAwesomeIcon icon={faFileImport} />\r\n                                        </Nav.Link>\r\n                                    </>\r\n                                    : \"\"}\r\n                            </ProductList>\r\n\r\n                            // </Tooltip>\r\n                        }\r\n                    />\r\n                </Card.Body>\r\n            </Card>\r\n        </ContentPanel>\r\n\r\n        let mainDesign = \"\";\r\n        if (this.props.Login.masterData.realRegSubTypeValue &&\r\n            this.props.Login.masterData.realRegSubTypeValue.nneedsubsample) {\r\n            mainDesign = <SplitterLayout borderColor=\"#999\"\r\n                primaryIndex={1} percentage={true}\r\n                secondaryInitialSize={this.state.splitChangeWidthPercentage}\r\n                onSecondaryPaneSizeChange={this.paneSizeChange}\r\n                primaryMinSize={40}\r\n                secondaryMinSize={30}\r\n            >\r\n                <Card>\r\n                    <Card.Header style={{ borderBottom: \"0px\" }}>\r\n                        <span style={{ display: \"inline-block\", marginTop: \"1%\" }}>\r\n                            <h4 className=\"card-title\">{this.props.intl.formatMessage({ id: \"IDS_SUBSAMPLE\" })}</h4>\r\n                        </span>\r\n                    </Card.Header>\r\n                    <Card.Body className='p-0 sm-pager'>\r\n                        <TransactionListMasterJson\r\n                            cardHead={94}\r\n                            //paneHeight={this.state.initialVerticalWidth}\r\n                            masterList={this.props.Login.masterData.searchedSubSample || subSampleListRE}\r\n                            selectedMaster={this.props.Login.masterData.RESelectedSubSample}\r\n                            primaryKeyField=\"ntransactionsamplecode\"\r\n                            getMasterDetail={this.props.getTestREDetail}\r\n                            inputParam={testGetREParam}\r\n                            additionalParam={[]}\r\n                            mainField=\"ssamplearno\"\r\n                            selectedListName=\"RESelectedSubSample\"\r\n                            objectName=\"subSample\"\r\n                            listName=\"IDS_SUBSAMPLE\"\r\n                            jsonField={'jsondata'}\r\n                            jsonDesignFields={true}\r\n                            subFields={this.state.DynamicSubSampleColumns}\r\n                            moreField={this.state.subSampleMoreField}\r\n                            needValidation={false}\r\n                            needMultiSelect={true}\r\n                            needFilter={false}\r\n                            skip={this.state.subSampleSkip}\r\n                            take={this.state.subSampleTake}\r\n                            pageSize={this.props.Login.settings && this.props.Login.settings[13].split(\",\").map(setting => parseInt(setting))}\r\n                            handlePageChange={this.handleSubSamplePageChange}\r\n                            showStatusLink={true}\r\n                            showStatusName={false}\r\n                            selectionList={this.state.selectedFilter}\r\n                            statusFieldName=\"stransdisplaystatus\"\r\n                            statusField=\"ntransactionstatus\"\r\n                            selectionFieldName=\"sfilterstatus\"\r\n                            selectionField=\"ntransactionstatus\"\r\n                            childTabsKey={[\"RE_TEST\", \"Registration\", \"RegistrationSampleComment\", \"RegistrationSampleAttachment\"]}\r\n                            filterColumnData={this.props.filterTransactionList}\r\n                            searchListName=\"searchedSubSample\"\r\n                            searchRef={this.searchSubSampleRef}\r\n                            filterParam={filterSubSampleParam}\r\n                        />\r\n                    </Card.Body>\r\n                </Card>\r\n                {testDesign}\r\n            </SplitterLayout>\r\n        }\r\n        else {\r\n            mainDesign = testDesign\r\n        }\r\n\r\n        return (\r\n            <>\r\n                {/* <PerfectScrollbar> */}\r\n                <ListWrapper className=\"client-listing-wrap toolbar-top-wrap mtop-4 screen-height-window\">\r\n                    <BreadcrumbComponent breadCrumbItem={this.breadCrumbData} />\r\n                    <Row noGutters={true} bsPrefix=\"toolbar-top\">\r\n                        {/* sticky_head_parent ref={(parentHeight) => { this.parentHeight = parentHeight }} secondaryInitialSize={40}*/}\r\n                        <Col md={12} className=\"parent-port-height\">\r\n                            <ListWrapper className={`vertical-tab-top ${this.state.enablePropertyPopup ? 'active-popup' : \"\"}`}>\r\n                                <div className={`tab-left-area ${this.state.activeTabIndex ? 'active' : \"\"} ${this.state.enablePropertyPopup ? 'active-popup' : \"\"}`}>\r\n                                    <SplitterLayout borderColor=\"#999\" percentage={true} primaryIndex={1}\r\n                                        secondaryInitialSize={this.state.splitChangeWidthPercentage}\r\n                                        //onSecondaryPaneSizeChange={this.paneSizeChange} \r\n                                        primaryMinSize={40} secondaryMinSize={20}>\r\n                                        <div className='toolbar-top-inner'>\r\n                                            <TransactionListMasterJsonView\r\n                                                clickIconGroup={true}\r\n                                                // paneHeight={this.state.parentHeight}\r\n                                                splitChangeWidthPercentage={this.state.splitChangeWidthPercentage}\r\n                                                masterList={this.props.Login.masterData.searchedSample || sampleListRE}\r\n                                                selectedMaster={this.props.Login.masterData.RESelectedSample}\r\n                                                primaryKeyField=\"npreregno\"\r\n                                                getMasterDetail={this.props.getsubSampleREDetail}\r\n                                                inputParam={subSampleGetREParam}\r\n                                                additionalParam={['napprovalversioncode']}\r\n                                                mainField=\"sarno\"\r\n                                                selectedListName=\"RESelectedSample\"\r\n                                                objectName=\"sample\"\r\n                                                listName=\"IDS_SAMPLE\"\r\n                                                needValidation={false}\r\n                                                validationKey=\"napprovalversioncode\"\r\n                                                validationFailMsg=\"IDS_SELECTSAMPLESOFSAMPLEAPPROVALVERSION\"\r\n                                                subFields={this.state.DynamicSampleColumns || []}\r\n                                                moreField={this.state.sampleMoreField}\r\n                                                needFilter={true}\r\n                                                needMultiSelect={true}\r\n                                                showFilter={this.props.Login.showFilter}\r\n                                                closeFilter={this.closeFilter}\r\n                                                onFilterSubmit={this.onREFilterSubmit}\r\n                                                filterColumnData={this.props.filterTransactionList}\r\n                                                searchListName=\"searchedSample\"\r\n                                                searchRef={this.searchSampleRef}\r\n                                                handlePageChange={this.handlePageChange}\r\n                                                filterParam={filterSampleParam}\r\n                                                skip={this.state.skip}\r\n                                                take={this.state.take}\r\n                                                hidePaging={false}\r\n                                                showStatusLink={true}\r\n                                                showStatusName={true}\r\n                                                statusFieldName=\"stransdisplaystatus\"\r\n                                                statusField=\"ntransactionstatus\"\r\n                                                //splitModeClass={this.state.splitChangeWidthPercentage && this.state.splitChangeWidthPercentage > 50 ? 'split-mode' : this.state.splitChangeWidthPercentage > 40 ? 'split-md' : ''}\r\n                                                childTabsKey={[\"RegistrationAttachment\", \"RE_SUBSAMPLE\", \"RE_TEST\", \"SampleApprovalHistory\", \"RegistrationComment\"]}\r\n                                                selectionList={this.state.selectedFilter}\r\n                                                selectionColorField=\"scolorhexcode\"\r\n                                                selectionFieldName=\"sfilterstatus\"\r\n                                                selectionField=\"ntransactionstatus\"\r\n                                                jsonField={'jsondata'}\r\n                                                jsonDesignFields={true}\r\n                                                filterComponent={[\r\n                                                    {\r\n                                                        \"Sample Filter\": <ResultEntryFilter\r\n                                                            fromDate={this.props.Login.masterData.fromDate ? //new Date(this.props.Login.masterData.fromDate) \r\n                                                                rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.fromDate)\r\n                                                                : new Date()}\r\n                                                            toDate={this.props.Login.masterData.toDate ? //new Date(this.props.Login.masterData.toDate) \r\n                                                                rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.toDate)\r\n                                                                : new Date()}\r\n                                                            SampleType={this.state.SampleType || []}\r\n                                                            SampleTypeValue={this.props.Login.masterData.defaultSampleType || []}\r\n                                                            RegType={this.state.RegistrationType || []}\r\n                                                            RegTypeValue={this.props.Login.masterData.defaultRegistrationType || []}\r\n                                                            RegSubType={this.state.RegistrationSubType || []}\r\n                                                            RegSubTypeValue={this.props.Login.masterData.defaultRegistrationSubType || []}\r\n                                                            DesignTemplateMappingValue={this.props.Login.masterData.DesignTemplateMappingValue || []}\r\n                                                            FilterStatus={this.state.REFilterStatus || []}\r\n                                                            FilterStatusValue={this.props.Login.masterData.defaultFilterStatus || []}\r\n                                                            ApprovalVersion={this.state.ApprovalConfigVersion || []}\r\n                                                            ApprovalVersionValue={this.props.Login.masterData.defaultApprovalConfigVersion || []}\r\n                                                            REJobStatus={this.state.REJobStatus || []}\r\n                                                            JobStatusValue={this.props.Login.masterData.defaultjobstatus || []}\r\n                                                            Test={this.state.Testvalues || []}\r\n                                                            Batch={this.state.Batchvalues || []}\r\n                                                            BatchValue = {this.props.Login.masterData.defaultBatchvalue || []}\r\n                                                            Worklist={this.state.Worklistvalues || []}\r\n                                                            WorklistValue = {this.props.Login.masterData.defaultWorklistvalue || []}\r\n                                                            TestValue={this.props.Login.masterData.defaultTestvalues || []}\r\n                                                            ConfigurationFilter={this.state.ConfigurationFilterValues || []}\r\n                                                            ConfigurationFilterValue = {this.props.Login.masterData.defaultConfigurationFilterValue || []}\r\n                                                            onFilterComboChange={this.onFilterComboChange}\r\n                                                            handleDateChange={this.handleDateChange}\r\n                                                            userInfo={this.props.Login.userInfo}\r\n                                                            onDesignTemplateChange={this.onDesignTemplateChange}\r\n                                                            DynamicDesignMapping={this.state.stateDynamicDesign || []}\r\n                                                        />\r\n                                                    }\r\n                                                ]}\r\n                                                actionIcons={\r\n                                                    [this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue.nregtypecode === RegistrationType.PLASMA_POOL ?\r\n                                                        {\r\n                                                            title: \"Report\",\r\n                                                            controlname: \"reports\",\r\n                                                            objectName: \"sample\",\r\n                                                            hidden: this.state.userRoleControlRights.indexOf(reportPreviewId) === -1,\r\n                                                            onClick: this.props.previewSampleReport,\r\n                                                            inputData: {\r\n                                                                userinfo: this.props.Login.userInfo,\r\n                                                                ncontrolcode: reportPreviewId\r\n                                                            },\r\n                                                        } : {}\r\n                                                    ]\r\n                                                }\r\n                                                commonActions={\r\n                                                    <>\r\n                                                        <ProductList className=\"d-flex product-category float-right icon-group-wrap\">\r\n                                                            <Button className=\"btn btn-circle outline-grey ml-2\" variant=\"link\"\r\n                                                                onClick={() => this.onReload()}\r\n                                                                data-for=\"tooltip-common-wrap\"\r\n                                                                data-tip={this.props.intl.formatMessage({ id: \"IDS_REFRESH\" })}>\r\n                                                                <FontAwesomeIcon icon={faSync} style={{ \"width\": \"0.6!important\" }} />\r\n                                                            </Button>\r\n                                                        </ProductList>\r\n                                                    </>\r\n                                                }\r\n                                            />\r\n                                        </div>\r\n                                        <div>\r\n                                            <div style={this.state.showTest === true ? { display: \"block\", background: \"#FFFF\" } : { display: \"none\", background: \"#FFFF\" }} >\r\n                                                {mainDesign}\r\n                                            </div>\r\n\r\n                                        </div>\r\n                                    </SplitterLayout>\r\n                                </div>\r\n\r\n                                <div className={`${this.state.enablePropertyPopup ? 'active-popup' : \"\"} vertical-tab ${this.state.activeTabIndex ? 'active' : \"\"}`} >\r\n                                    <div className={`${this.state.enablePropertyPopup ? 'active-popup' : \"\"} vertical-tab-content pager_wrap wrap-class ${this.state.activeTabIndex ? 'active' : \"\"}`} style={{ width: this.state.enablePropertyPopup ? this.state.propertyPopupWidth + '%' : \"\" }}>\r\n                                        <span className={` vertical-tab-close ${this.state.activeTabIndex ? 'active' : \"\"}`} onClick={() => this.changePropertyViewClose(false)}><FontAwesomeIcon icon={faChevronRight} /> </span>\r\n                                        <div className={` vertical-tab-content-common sm-view-v-t  ${this.state.activeTabIndex && this.state.activeTabIndex == 1 ? 'active' : \"\"}`}>\r\n                                            {this.state.activeTabIndex && this.state.activeTabIndex == 1 ? this.sideNavDetail(\"IDS_RESULTS\") : \"\"}\r\n                                        </div>\r\n                                        <div className={` vertical-tab-content-grid  ${this.state.activeTabIndex && this.state.activeTabIndex == 2 ? 'active' : \"\"}`}>\r\n                                            {this.state.activeTabIndex && this.state.activeTabIndex == 2 ? this.sideNavDetail(\"IDS_ATTACHMENTS\") : \"\"}\r\n                                        </div>\r\n                                        <div className={` vertical-tab-content-grid-tab  ${this.state.activeTabIndex && this.state.activeTabIndex == 3 ? 'active' : \"\"}`}>\r\n                                            {this.state.activeTabIndex && this.state.activeTabIndex == 3 ? this.sideNavDetail(\"IDS_COMMENTS\") : \"\"}\r\n                                        </div>\r\n                                        <div className={` vertical-tab-content-grid  ${this.state.activeTabIndex && this.state.activeTabIndex == 4 ? 'active' : \"\"}`}>\r\n                                            <h4 className='inner_h4'>\r\n                                                {this.props.intl.formatMessage({ id: \"IDS_INSTRUMENT\" })}\r\n                                            </h4>\r\n                                            {this.state.activeTabIndex && this.state.activeTabIndex == 4 ? this.sideNavDetail(\"IDS_INSTRUMENT\") : \"\"}\r\n                                        </div>\r\n                                        <div className={` vertical-tab-content-comments vertical-tab-content-common ${this.state.activeTabIndex && this.state.activeTabIndex == 5 ? 'active' : \"\"}`}>\r\n                                            <h4 className='inner_h4'>\r\n                                                {this.props.intl.formatMessage({ id: \"IDS_MATERIAL\" })}\r\n                                            </h4>\r\n                                            {this.state.activeTabIndex && this.state.activeTabIndex == 5 ? this.sideNavDetail(\"IDS_MATERIAL\") : \"\"}\r\n                                        </div>\r\n                                        <div className={` vertical-tab-content-comments vertical-tab-content-common ${this.state.activeTabIndex && this.state.activeTabIndex == 6 ? 'active' : \"\"}`}>\r\n                                            <h4 className='inner_h4'>\r\n                                                {this.props.intl.formatMessage({ id: \"IDS_TASK\" })}\r\n                                            </h4>\r\n                                            {this.state.activeTabIndex && this.state.activeTabIndex == 6 ? this.sideNavDetail(\"IDS_TASK\") : \"\"}\r\n                                        </div>\r\n                                        <div className={` vertical-tab-content-comments vertical-tab-content-common ${this.state.activeTabIndex && this.state.activeTabIndex == 7 ? 'active' : \"\"}`}>\r\n                                            <h4 className='inner_h4'>\r\n                                                {this.props.intl.formatMessage({ id: \"IDS_TESTAPPROVALHISTORY\" })}\r\n                                            </h4>\r\n                                            {this.state.activeTabIndex && this.state.activeTabIndex == 7 ? this.sideNavDetail(\"IDS_TESTAPPROVALHISTORY\") : \"\"}\r\n                                        </div>\r\n                                        <div className={` vertical-tab-content-comments vertical-tab-content-common ${this.state.activeTabIndex && this.state.activeTabIndex == 8 ? 'active' : \"\"}`}>\r\n                                            <h4 className='inner_h4'>\r\n                                                {this.props.intl.formatMessage({ id: \"IDS_SAMPLEDETAILS\" })}\r\n                                            </h4>\r\n                                            {this.state.activeTabIndex && this.state.activeTabIndex == 8 ? this.sideNavDetail(\"IDS_SAMPLEDETAILS\") : \"\"}\r\n                                        </div>\r\n                                    </div>\r\n                                    <div className='tab-head'>\r\n                                        <ul>\r\n                                            <li className={`${this.state.activeTabIndex && this.state.activeTabIndex == 1 ? 'active' : \"\"}`} onClick={() => this.changePropertyView(1, \"IDS_RESULTS\")}>\r\n                                                <FontAwesomeIcon icon={faFileInvoice}\r\n                                                    data-for=\"tooltip-common-wrap\"\r\n                                                    data-tip={this.props.intl.formatMessage({ id: \"IDS_RESULT\" })} />\r\n                                                <span>\r\n                                                    {this.props.intl.formatMessage({ id: \"IDS_RESULT\" })}\r\n                                                </span>\r\n                                            </li>\r\n                                            <li className={`${this.state.activeTabIndex && this.state.activeTabIndex == 2 ? 'active' : \"\"}`} onClick={() => this.changePropertyView(2, \"IDS_ATTACHMENTS\")}>\r\n                                                <FontAwesomeIcon icon={faLink} />\r\n                                                <span>\r\n                                                    {this.props.intl.formatMessage({ id: \"IDS_ATTACHMENTS\" })}\r\n                                                </span>\r\n                                            </li>\r\n                                            <li className={`${this.state.activeTabIndex && this.state.activeTabIndex == 3 ? 'active' : \"\"}`} onClick={() => this.changePropertyView(3, \"IDS_COMMENTS\")}>\r\n                                                <FontAwesomeIcon icon={faComments} />\r\n                                                <span>\r\n                                                    {this.props.intl.formatMessage({ id: \"IDS_COMMENTS\" })}\r\n                                                </span>\r\n                                            </li>\r\n                                            <li className={`${this.state.activeTabIndex && this.state.activeTabIndex == 4 ? 'active' : \"\"}`} onClick={() => this.changePropertyView(4, \"IDS_INSTRUMENT\")}>\r\n                                                <FontAwesomeIcon icon={faMicroscope} />\r\n                                                <span>\r\n                                                    {this.props.intl.formatMessage({ id: \"IDS_INSTRUMENT\" })}\r\n                                                </span>\r\n                                            </li>\r\n                                            <li className={`${this.state.activeTabIndex && this.state.activeTabIndex == 5 ? 'active' : \"\"}`} onClick={() => this.changePropertyView(5, \"IDS_MATERIAL\")}>\r\n                                                <FontAwesomeIcon icon={faFlask} />\r\n                                                <span>\r\n                                                    {this.props.intl.formatMessage({ id: \"IDS_MATERIAL\" })}\r\n                                                </span>\r\n                                            </li>\r\n                                            <li className={`${this.state.activeTabIndex && this.state.activeTabIndex == 6 ? 'active' : \"\"}`} onClick={() => this.changePropertyView(6, \"IDS_TASK\")}>\r\n                                                <FontAwesomeIcon icon={faCommentDots} />\r\n                                                <span>\r\n                                                    {this.props.intl.formatMessage({ id: \"IDS_TASK\" })}\r\n                                                </span>\r\n                                            </li>\r\n                                            {/* <li className={`${this.state.activeTabIndex && this.state.activeTabIndex == 7 ? 'active' : \"\"}`} onClick={() => this.changePropertyView(7)}>\r\n                                                <FontAwesomeIcon icon={faHistory} />\r\n                                                <span>\r\n                                                    {this.props.intl.formatMessage({ id: \"IDS_TESTAPPROVALHISTORY\" })}\r\n                                                </span>\r\n                                            </li> */}\r\n                                            <li className={`${this.state.activeTabIndex && this.state.activeTabIndex == 8 ? 'active' : \"\"}`} onClick={() => this.changePropertyView(8, \"IDS_SAMPLEDETAILS\")}>\r\n                                                <FontAwesomeIcon icon={faEye} />\r\n                                                <span>\r\n                                                    {this.props.intl.formatMessage({ id: \"IDS_SAMPLEDETAILS\" })}\r\n                                                </span>\r\n                                            </li>\r\n                                        </ul>\r\n                                        <span className='tab-click-toggle-btn'>\r\n                                            <CustomSwitch\r\n                                                // label={\"Auto Show\"}\r\n                                                label={this.props.intl.formatMessage({ id: \"IDS_AUTOSHOW\" })}\r\n                                                type=\"switch\"\r\n                                                name={\"Auto Click\"}\r\n                                                onChange={(event) => this.onInputSwitchOnChange(event)}\r\n                                                defaultValue={this.state.enableAutoClick}\r\n                                                isMandatory={false}\r\n                                                required={true}\r\n                                                checked={this.state.enableAutoClick}\r\n                                            />\r\n                                        </span>\r\n                                        <span className='tab-click-toggle-btn'>\r\n                                            <CustomSwitch\r\n                                                // label={\"Popup Nav\"}\r\n                                                label={this.props.intl.formatMessage({ id: \"IDS_POPUPNAV\" })}\r\n                                                type=\"switch\"\r\n                                                name={\"PopupNav\"}\r\n                                                onChange={(event) => this.onInputSwitchOnChange(event)}\r\n                                                defaultValue={this.state.enablePropertyPopup}\r\n                                                isMandatory={false}\r\n                                                required={true}\r\n                                                checked={this.state.enablePropertyPopup}\r\n                                            />\r\n                                        </span>\r\n                                    </div>\r\n                                </div>\r\n                            </ListWrapper >\r\n                            {/* </PerfectScrollbar> */}\r\n                        </Col >\r\n                    </Row >\r\n                </ListWrapper >\r\n                {/* </PerfectScrollbar> */}\r\n\r\n                <PortalModal>\r\n                    <div>\r\n                        <Modal\r\n                            centered\r\n                            scrollable\r\n                            bsPrefix=\"model model_zindex\"\r\n                            show={this.props.Login.openELNSheet}\r\n                            onHide={this.openClosePortal}\r\n                            dialogClassName={`${this.props.nflag && this.props.nflag === 2 ? 'alert-popup' : ''} modal-fullscreen`}\r\n                            backdrop=\"static\"\r\n                            keyboard={false}\r\n                            enforceFocus={false}\r\n                            aria-labelledby=\"example-custom-modal-styling-title\"\r\n                        >\r\n                            <Modal.Header closeButton>\r\n                                <Modal.Title style={{ \"line-height\": \"1.0\" }} id=\"example-custom-modal-styling-title\">\r\n                                    {this.props.intl.formatMessage({ id: \"IDS_ELNSHEET\" })}\r\n                                </Modal.Title>\r\n                                <ReactTooltip globalEventOff=\"true\" />\r\n\r\n                            </Modal.Header>\r\n                            <Modal.Body>\r\n                                <div className=\"modal-inner-content\">\r\n                                    <Iframe url={this.props.Login.enlLink}\r\n                                        width=\"98%\"\r\n                                        height=\"1000px\"\r\n                                        id=\"reportviewID\"\r\n                                        className=\"reportview\"\r\n                                    //display=\"initial\"\r\n                                    /// position=\"relative\" \r\n                                    />\r\n                                </div>\r\n                            </Modal.Body>\r\n                        </Modal>\r\n                    </div>\r\n                </PortalModal>\r\n                \r\n                <ModalShow\r\n                    modalShow={this.props.Login.showAlertGrid \r\n                    }\r\n                    modalTitle={this.props.Login.showAlertForPredefined||this.props.Login.additionalInfoView?this.props.intl.formatMessage({ id: \"IDS_ADDITIONALINFOREQURIED\" })//this.props.Login.onlyAlertMsgAvailable?\"Alert\":this.props.Login.masterData['salertmessage']\r\n                     :this.props.intl.formatMessage({ id: \"IDS_COMPLETETHEFOLLOWINGTESTS\" })} \r\n                  //  needCloseButton={this.props.Login.showAlertForPredefined||this.props.Login.additionalInfoView?true:false}\r\n                    closeModal={this.closeModalShow}\r\n                    onSaveClick ={this.onModalSave}\r\n                    removeCancel={this.props.Login.showAlertForPredefined||this.props.Login.additionalInfoView?true:false}\r\n                    needSubmit={this.props.Login.showAlertForPredefined||this.props.Login.additionalInfoView?true:false}\r\n                    needSave={this.props.Login.showAlertForPredefined||this.props.Login.additionalInfoView?\"\":true}\r\n                    selectedRecord={this.state.selectedRecord || {}} \r\n                    // mandatoryFields={this.props.Login.showAlertForPredefined||this.props.Login.additionalInfoView?\r\n                    //     this.mandatoryFieldsForAdditionalInfo():\"\"}\r\n                    size={ this.props.Login.showAlertForPredefined||this.props.Login.additionalInfoView?\"\":'lg'}\r\n                    showAlertMsg={this.props.Login.showAlertForPredefined?true:false}\r\n                    modalBody={this.props.Login.additionalInfoView?\r\n                        this.state.selectedRecord['additionalResultData'] :\r\n                         this.props.Login.showAlertForPredefined? \r\n                       <ResultEntryPredefinedComments \r\n                       onlyAlertMsgAvailable={this.props.Login.onlyAlertMsgAvailable}\r\n                       salertmessage={this.props.Login.masterData['salertmessage']}\r\n                       showMultiSelectCombo={this.props.Login.showMultiSelectCombo}\r\n                       testgrouptestpredefsubresultOptions={this.props.Login.masterData.testgrouptestpredefsubresultOptions||[]}\r\n                       selectedRecord={this.state.selectedRecord || {}} \r\n                       onInputChange = {this.onInputChange}\r\n                       onComboChange={this.onComboChange} \r\n                       />  :\r\n                        <CustomTabs tabDetail={this.tabAlertRulesEngine()} onTabChange={this.onTabChangeRulesEngine} destroyInactiveTabPane={true}/>\r\n                    }\r\n                />\r\n\r\n        {  this.props.Login.openModal ?\r\n                <SlideOutModal\r\n                    show={this.props.Login.openModal}\r\n                    size={this.props.Login.screenName === 'IDS_MEANPARAMETER' ? \"xl\" : \"lg\"}\r\n                    closeModal={this.closeModal}\r\n                    showCalculate={this.props.Login.screenName === 'IDS_RESULTFORMULA' ? true : false}\r\n                    operation={// this.props.Login.screenName === 'IDS_RESULTPARAMETERCOMMENTS'?\"\":\r\n                        this.props.Login.screenName === 'IDS_RESULTENTRY'||  this.props.Login.screenName === 'IDS_ENFORCERESULT' ? \"\"\r\n                            : this.props.Login.operation\r\n                    }\r\n                    inputParam={this.props.Login.inputParam}\r\n                    screenName={this.props.Login.screenName}\r\n                    selectedRecord={\r\n                        this.props.Login.screenName === 'IDS_RESULTFORMULA' ?\r\n                            this.state.selectedRecord.selectedMandatory : this.state.selectedRecord || {}\r\n                    }\r\n                    mandatoryFields={\r\n                        this.props.Login.screenName === 'IDS_INSTRUMENT' ? mandatoryFieldsInstrument :\r\n                            this.props.Login.screenName === 'IDS_TASK' ? mandatoryFieldsTask :\r\n                                this.props.Login.screenName === 'IDS_TESTMETHODSOURCE' ? mandatoryFieldsTestMethodSource :\r\n                                    this.props.Login.screenName === 'IDS_PARAMETERCOMMENTS' ? mandatoryFieldsParameter :\r\n                                        this.props.Login.screenName === 'IDS_RESULTFORMULA' ? validateFormulaMandyFields :\r\n                                        this.props.Login.screenName === 'IDS_ENFORCERESULT' ?   mandatoryEnforceResult: []\r\n                    }\r\n                    esign={this.props.Login.loadEsign}\r\n                    innerPopup={this.props.Login.screenName}\r\n                    validateEsign={this.validateEsign}\r\n                    onSaveClick={\r\n                        this.props.Login.showValidate ? this.calculateFormula\r\n                            : this.props.Login.screenName === 'IDS_RESULTIMPORTFILE' ? this.onSaveFileClick \r\n                            : this.props.Login.screenName === 'IDS_ADHOCPARAMETER' ? this.onSaveClickAdhocParam \r\n                            : this.onSaveClick\r\n                    }\r\n                    showValidate={this.props.Login.screenName === 'IDS_RESULTFORMULA'?false:this.props.Login.showValidate}\r\n                    modalEvent={this.state.modalEvent}\r\n                    addComponent={\r\n                        this.props.Login.loadEsign ?\r\n                            <Esign\r\n                                operation={this.props.Login.operation}\r\n                                onInputOnChange={this.onEsignInputOnChange}\r\n                                inputParam={this.props.Login.inputParam}\r\n                                selectedRecord={this.state.selectedRecord || {}}\r\n                            /> :\r\n                            this.props.Login.screenName === 'IDS_RESULTENTRY' ?\r\n                                <ResultEntryForm\r\n                                    predefinedValues={this.props.Login.masterData.PredefinedValues}\r\n                                    defaultPredefinedValues={this.props.Login.masterData.PredefinedValues}\r\n                                    gradeValues={this.props.Login.masterData.GradeValues || []}\r\n                                    selectedNumericData={this.props.Login.masterData.selectedNumericData}\r\n                                    selectedResultGrade={this.state.selectedRecord.selectedResultGrade || []}\r\n                                    paremterResultcode={this.props.Login.masterData.paremterResultcode || []}\r\n                                    parameterResults={this.state.selectedRecord.ResultParameter || []}\r\n                                    Login={this.props.Login}\r\n                                    handleClose={this.handleClose}\r\n                                    onSaveClick={this.onSaveClick}\r\n                                    onResultInputChange={this.onResultInputChange}\r\n                                    onGradeEvent={this.onGradeEvent}\r\n                                    getFormula={this.getFormula}\r\n                                    onDropTestFile={this.onDropTestFile}\r\n                                    onKeyPress={this.onKeyPress}\r\n                                    deleteAttachmentParamFile={this.deleteAttachmentParameterFile}\r\n                                    viewAdditionalInfo={this.viewAdditionalInfo}\r\n                                    needSubSample={this.props.Login.masterData.realRegSubTypeValue.nneedsubsample}\r\n                                    intl={this.props.intl}\r\n                                /> :\r\n                                this.props.Login.screenName === 'IDS_TESTMETHODSOURCE' ?\r\n                                    <TestEditForm\r\n                                        methodValues={this.props.Login.masterData.MethodData}\r\n                                        sourceValues={this.props.Login.masterData.SourceData}\r\n                                        selecteRecord={this.state.selectedRecord || {}}\r\n                                        onComboChange={this.onComboChange}\r\n                                        handleClose={this.handleClose}\r\n                                        onSaveClick={this.onSaveClick}\r\n                                    /> :\r\n                                    this.props.Login.screenName === 'IDS_INSTRUMENT' ?\r\n                                        <ResultEntryInstrumentForm\r\n                                            instrumentcatValue={this.props.Login.masterData.InstrumentCategory}\r\n                                            instrumentValue={this.props.Login.masterData.Instrument}\r\n                                            selecteRecord={this.state.selectedRecord || {}}\r\n                                            timeZoneListData={this.props.Login.timeZoneList || []}\r\n                                            onComboChange={this.onComboChange}\r\n                                            onComboCategoryChange={this.onComboCategoryChange}\r\n                                            onDateChange={this.onDateChange}\r\n                                            handleClose={this.handleClose}\r\n                                            onSaveClick={this.onSaveClick}\r\n                                            userInfo={this.props.Login.userInfo}\r\n                                            needSubSample={this.props.Login.masterData.realRegSubTypeValue.nneedsubsample}\r\n                                        /> :\r\n                                        this.props.Login.screenName === 'IDS_MATERIAL' ?\r\n                                            <ResultEntryMaterialForm\r\n                                                materialType={this.props.Login.materialType}\r\n                                                materialCategory={this.props.Login.materialCat}\r\n                                                material={this.props.Login.material}\r\n                                                materialInventory={this.props.Login.materialInventory}\r\n                                                selectedRecord={this.state.selectedRecord || {}}\r\n                                                onMaterialComboChange={this.onMaterialComboChange}\r\n                                                onInputOnChange={this.onInputOnChange}\r\n                                                onDateChange={this.onDateChange}\r\n                                                handleClose={this.handleClose}\r\n                                                onSaveClick={this.onSaveClick}\r\n                                                userInfo={this.props.Login.userInfo}\r\n                                                needSubSample={this.props.Login.masterData.realRegSubTypeValue.nneedsubsample}\r\n                                            /> :\r\n                                            this.props.Login.screenName === 'IDS_TASK' ?\r\n                                                <ResultEntryTaskForm\r\n                                                    selecteRecord={this.state.selectedRecord || {}}\r\n                                                    onNumericChange={this.onNumericChange}\r\n                                                    onInputChange={this.onInputChange}\r\n                                                    handleClose={this.handleClose}\r\n                                                    onSaveClick={this.onSaveClick}\r\n                                                /> :\r\n                                                this.props.Login.screenName === 'IDS_PARAMETERCOMMENTS' ?\r\n                                                    <ResultEntryParamCommetsForm\r\n                                                        selecteRecord={this.state.selectedRecord || {}}\r\n                                                        onInputChange={this.onInputChange}\r\n                                                        handleClose={this.handleClose}\r\n                                                        onSaveClick={this.onSaveClick}\r\n                                                    /> : this.props.Login.screenName === 'IDS_RESULTFORMULA' ?\r\n                                                        <ResultEntryFormulaForm\r\n                                                            DynamicFields={this.props.Login.masterData.DynamicFormulaFields}\r\n                                                            // formRef={this.formRef}\r\n                                                            masterData={this.props.Login.masterData}\r\n                                                            handleClose={this.handleClose}\r\n                                                            screenName={this.props.Login.screenName}\r\n                                                            selectedForumulaInput={this.state.selectedForumulaInput || []}\r\n                                                            onFormulaInputChange={this.onFormulaInputChange}\r\n                                                            getAverageResult={this.getAverageResult}\r\n                                                            Login={this.props.Login}\r\n                                                            showValidate={this.props.Login.showValidate}\r\n                                                            selectedRecord={this.state.selectedRecord || {}}\r\n                                                        />\r\n                                                        : this.props.Login.screenName === 'IDS_RESULTIMPORTFILE' ?\r\n                                                            <ResultEntryImport\r\n                                                                handleClose={this.handleClose}\r\n                                                                screenName={this.props.Login.screenName}\r\n                                                                onDropFile={this.onDropFile}\r\n                                                                selectedImportFile={this.props.Login.masterData.selectedImportFile || {}}\r\n                                                                deleteAttachment={this.deleteAttachment}\r\n                                                            /> :\r\n                                                            this.props.Login.screenName === 'IDS_MEANPARAMETER' ?\r\n                                                                <ResultEntryMean\r\n                                                                    // onInputOnChange={this.onMeanInputOnChange}\r\n                                                                    // onComboChange={this.onMeanComboChange}\r\n                                                                    screenName={this.props.Login.screenName}\r\n                                                                    headerSelectionChange={this.headerSelectionChange}\r\n                                                                    selectionChange={this.selectionChange}\r\n                                                                    selectAll={this.state.selectAll}\r\n                                                                    testMean={this.state.testMean}\r\n                                                                    meanTestParameterList={this.state.meanTestParameterList || []}\r\n                                                                    selectedTestParam={this.state.selectedTestParam}\r\n                                                                /> :\r\n                                                                this.props.Login.screenName === 'IDS_RESULTPARAMETERCOMMENTS' ? \r\n                                                                <ResultEntryPredefinedComments \r\n                                                                 selectedRecord={this.state.selectedRecord || {}} \r\n                                                                 onInputChange = {this.onInputChange}\r\n                                                                 onComboChange={this.onComboChange}\r\n                                                                 />:\r\n                                                                 this.props.Login.screenName === 'IDS_ENFORCERESULT' ? \r\n                                                                 <ResultEntryEnforceResult \r\n                                                                  selectedRecord={this.state.selectedRecord || {}} \r\n                                                                  GradeList={this.props.Login.masterData.GradeList&&\r\n                                                                    this.props.Login.masterData.GradeList}\r\n                                                                  onInputChange = {this.onInputChange}\r\n                                                                  onComboChange={this.onComboChange}\r\n                                                                  /> :\r\n                                                              this.props.Login.screenName === 'IDS_ADHOCPARAMETER' ?\r\n                                                                 <AddAdhocParameter\r\n                                                                 selectedRecord={this.state.selectedRecord || {}}\r\n                                                                 onInputOnChange={this.onInputOnChange}\r\n                                                                 onComboChange={this.onComboChange}\r\n                                                                 adhocParamter={this.props.Login.masterData.AdhocParamter || {}}\r\n                                                                //operation={this.props.operation}\r\n                                                             />: \"\"\r\n                                                                \r\n                                                                \r\n                    }\r\n                />\r\n                :\"\"}\r\n                {\r\n                    this.props.Login.masterData.ChecklistData && this.props.Login.screenName === 'IDS_CHECKLISTRESULT' ?\r\n                        <TemplateForm\r\n                            templateData={this.props.Login.masterData.ChecklistData}\r\n                            nregtypecode={parseInt(this.props.Login.masterData.realRegTypeValue.nregtypecode)}\r\n                            nregsubtypecode={parseInt(this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode)}\r\n                            needSaveButton={this.props.Login.needSaveButton}\r\n                            formRef={this.formRef}\r\n                            onTemplateInputChange={this.onTemplateInputChange}\r\n                            handleClose={this.closeModal}\r\n                            onTemplateComboChange={this.onTemplateComboChange}\r\n                            screenName={this.props.Login.screenName}\r\n                            onSaveClick={this.onSaveCheckList}\r\n                            Login={this.props.Login}\r\n                            viewScreen={this.props.Login.openTemplateModal}\r\n                            selectedRecord={this.state.selectedRecord || []}\r\n                            onTemplateDateChange={this.onTemplateDateChange}\r\n                            needValidation={true}\r\n                        /> : \"\"\r\n                }\r\n            </>\r\n        );\r\n    }\r\n\r\n\r\n    defaultActions = (testChildGetREParam, RESelectedTest, RESelectedSample, setDefaultId, testskip, testtake) => {\r\n        const nregtypecode = this.props.Login.masterData.realRegTypeValue.nregtypecode;\r\n        const nregsubtypecode = this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode;\r\n        const ndesigntemplatemappingcode = parseInt(this.props.Login.masterData.ndesigntemplatemappingcode && this.props.Login.masterData.ndesigntemplatemappingcode);\r\n\r\n\r\n        let TestList = [...this.props.Login.masterData.RE_TEST];\r\n        TestList = TestList.splice(testskip, testskip + testtake);\r\n        let acceptTestList = getSameRecordFromTwoArrays(TestList, this.props.Login.masterData.RESelectedTest, \"ntransactiontestcode\");\r\n        if (acceptTestList && acceptTestList.length > 0) {\r\n            let inputParam = {\r\n                classUrl: 'resultentrybysample',\r\n                methodUrl: \"completeTest\",\r\n                inputData: { 'userinfo': this.props.Login.userInfo, 'nregtypecode': nregtypecode, 'nregsubtypecode': nregsubtypecode, 'ncontrolcode': setDefaultId },\r\n                // formData: formData,\r\n                // isFileupload: true,\r\n                operation: \"default\",\r\n                displayName: this.props.Login.inputParam.displayName,//, postParam,\r\n                testChildGetREParam: { ...testChildGetREParam, ncontrolcode: setDefaultId },\r\n                RESelectedTest: acceptTestList,\r\n                RESelectedSample: RESelectedSample,\r\n                ndesigntemplatemappingcode: parseInt(this.props.Login.masterData.ndesigntemplatemappingcode && this.props.Login.masterData.ndesigntemplatemappingcode)\r\n\r\n            }\r\n\r\n            if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, setDefaultId)) {\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        loadEsign: true,\r\n                        screenData: { inputParam, masterData: this.props.Login.masterData },\r\n                        openModal: true,\r\n                        screenName: \"defaultaction\",\r\n                        operation: \"default\"\r\n                    }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n            else {\r\n                this.props.defaultTest(inputParam.testChildGetREParam, acceptTestList, RESelectedSample, nregtypecode, nregsubtypecode, ndesigntemplatemappingcode)\r\n            }\r\n        }\r\n        else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_PLSSELECTTEST\" }));\r\n        }\r\n\r\n    }\r\n\r\n    completeActions = (testChildGetREParam, RESelectedTest, userInfo, completeResultId, testskip, testtake) => {\r\n\r\n        let TestList = [...this.props.Login.masterData.RE_TEST];\r\n        TestList = TestList.splice(testskip, testskip + testtake);\r\n        let acceptTestList = getSameRecordFromTwoArrays(TestList, this.props.Login.masterData.RESelectedTest, \"ntransactiontestcode\");\r\n\r\n        if (acceptTestList && acceptTestList.length > 0) {\r\n            let inputParam = {\r\n                classUrl: 'resultentrybysample',\r\n                methodUrl: \"completeTest\",\r\n                inputData: { 'userinfo': this.props.Login.userInfo, 'ncontrolcode': completeResultId },\r\n                // formData: formData,\r\n                // isFileupload: true,\r\n                operation: \"complete\",\r\n                postParamList: this.postParamList,\r\n                displayName: this.props.Login.inputParam.displayName,//, postParam,\r\n                testChildGetREParam: testChildGetREParam,\r\n                RESelectedTest: acceptTestList,\r\n                skip: this.state.skip,\r\n                take: this.state.take,\r\n                testskip: this.state.testskip,\r\n                testtake: this.state.testtake,\r\n            }\r\n\r\n            if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, completeResultId)) {\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        loadEsign: true,\r\n                        screenData: { inputParam, masterData: this.props.Login.masterData },\r\n                        openModal: true,\r\n                        screenName: \"complete\",\r\n                        operation: \"complete\"\r\n                    }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n            else {\r\n                this.props.completeTest(inputParam, acceptTestList, userInfo, completeResultId)\r\n            }\r\n        }\r\n        else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTTESTTOCOMPLETE\" }));\r\n        }\r\n    }\r\n\r\n\r\n\r\n    testStartActions = (testChildGetREParam, RESelectedTest, userInfo, completeResultId, testskip, testtake) => {\r\n\r\n        let TestList = [...this.props.Login.masterData.RE_TEST];\r\n        TestList = TestList.splice(testskip, testskip + testtake);\r\n        let acceptTestList = getSameRecordFromTwoArrays(TestList, this.props.Login.masterData.RESelectedTest, \"ntransactiontestcode\");\r\n\r\n        if (acceptTestList && acceptTestList.length > 0) {\r\n            let inputParam = {\r\n                classUrl: 'resultentrybysample',\r\n                methodUrl: \"testInitiated\",\r\n                inputData: { 'userinfo': this.props.Login.userInfo, 'ncontrolcode': completeResultId,'subSampleNeeded': this.props.Login.masterData.defaultRegistrationSubType.nneedsubsample },\r\n                // formData: formData,\r\n                // isFileupload: true,\r\n                operation: \"testinitiate\",\r\n                postParamList: this.postParamList,\r\n                displayName: this.props.Login.inputParam.displayName,//, postParam,\r\n                testChildGetREParam: testChildGetREParam,\r\n                RESelectedTest: acceptTestList,\r\n                skip: this.state.skip,\r\n                take: this.state.take,\r\n                testskip: this.state.testskip,\r\n                progressTimerStart:true,\r\n                testtake: this.state.testtake,\r\n            }\r\n\r\n            if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, completeResultId)) {\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        loadEsign: true,\r\n                        screenData: { inputParam, masterData: this.props.Login.masterData },\r\n                        openModal: true,\r\n                        screenName: \"complete\",\r\n                        operation: \"complete\"\r\n                    }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n            else {\r\n                this.props.testStart(inputParam, acceptTestList, userInfo, completeResultId)\r\n            }\r\n        }\r\n        else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTTESTTOCOMPLETE\" }));\r\n        }\r\n    }\r\n\r\n    onSaveCheckList = (selectedRecord, userInfo, nregtypecode, nregsubtypecode) => {\r\n        const ndesigntemplatemappingcode = parseInt(this.props.Login.masterData.ndesigntemplatemappingcode && this.props.Login.masterData.ndesigntemplatemappingcode);\r\n\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\r\n            let inputParam = {\r\n                \"inputData\": { userinfo: userInfo }\r\n            }\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true,\r\n                    screenData: {\r\n                        selectedRecord, userInfo, nregtypecode, nregsubtypecode, ndesigntemplatemappingcode,\r\n                        operation: \"updatechecklist\", inputParam,\r\n                    },\r\n                    openModal: true,\r\n                    operation: \"updatechecklist\"\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.onSaveCheckList(selectedRecord, userInfo, nregtypecode, nregsubtypecode, ndesigntemplatemappingcode)\r\n        }\r\n\r\n    }\r\n\r\n    validateEsign = () => {\r\n        const inputParam = {\r\n            inputData: {\r\n                \"userinfo\": {\r\n                    ...this.props.Login.userInfo,\r\n                    sreason: this.state.selectedRecord[\"esigncomments\"],\r\n                    nreasoncode:this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].value,\r\n                    spredefinedreason:this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].label,\r\n               \r\n                },\r\n                password: this.state.selectedRecord[\"esignpassword\"]\r\n            },\r\n            screenData: this.props.Login.screenData\r\n        }\r\n        if (this.props.Login.operation === 'testinitiate' || this.props.Login.operation === 'complete' || this.props.Login.operation === 'default' || this.props.Login.operation === \"updatechecklist\" ||\r\n            this.props.Login.operation === 'deleteInstrument' || this.props.Login.operation === 'createMethod' || this.props.Login.operation === 'deleteTask' || this.props.Login.operation === 'updateParameterComments') {\r\n            this.props.validateEsignCredentialComplete(inputParam, \"openModal\");\r\n        }\r\n\r\n        else {\r\n            this.props.validateEsignCredential(inputParam, \"openModal\");\r\n        }\r\n    }\r\n\r\n    onEsignInputOnChange = (event) => {\r\n\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if (event.target.type === 'checkbox') {\r\n            selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\r\n        }\r\n        else {\r\n            selectedRecord[event.target.name] = event.target.value;\r\n        }\r\n        this.setState({ selectedRecord });\r\n\r\n    }\r\n\r\n    onInputOnChange = (event,name) => {\r\n\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if (event.target.type === 'checkbox') {\r\n            selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\r\n        }\r\n        else {\r\n            selectedRecord[event.target.name] = event.target.value;\r\n        }\r\n        switch (name) {\r\n            case 'ntestgroupmaterial':\r\n              const ntestgrouptestcode =  selectedRecord.ntestgroupmaterial == transactionStatus.YES ? this.props.Login.masterData.RESelectedTest[0].ntestgrouptestcode : -1\r\n                this.props.getREMaterialComboGet({ ntestgroupmaterial:selectedRecord.ntestgroupmaterial, ntestgrouptestcode,RESelectedTest:this.props.Login.masterData.RESelectedTest,test:this.props.Login.masterData.RESelectedTest[0], userInfo: this.props.Login.userInfo })\r\n                break; \r\n        default:\r\n        this.setState({ selectedRecord });\r\n        }\r\n    }\r\n\r\n    onSaveFileClick = (saveType, formRef) => {\r\n        const selectedImportFile = this.props.Login.masterData.selectedImportFile;\r\n        const acceptedFile = selectedImportFile ? selectedImportFile.sfilename : [];\r\n        const formData = new FormData();\r\n\r\n        if (acceptedFile && acceptedFile.length > 0) {\r\n            acceptedFile.forEach((file, index) => {\r\n                formData.append(\"uploadedFile\" + index, file);\r\n            });\r\n            formData.append(\"filecount\", acceptedFile.length);\r\n        } else {\r\n            return toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTANYONEFILETOSUBMIT\" }))\r\n        }\r\n\r\n        formData.append(\"userinfo\", JSON.stringify(this.props.Login.userInfo));\r\n        formData.append(\"nregtypecode\", JSON.stringify(this.props.Login.masterData.realRegTypeValue.nregtypecode));\r\n        formData.append(\"nregsubtypecode\", JSON.stringify(this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode));\r\n        formData.append(\"stransactiontestcode\", JSON.stringify(this.props.Login.masterData.RESelectedTest ? this.props.Login.masterData.RESelectedTest.map(x => x.ntransactiontestcode).join(\",\") : \"-1\"));\r\n        this.props.resultImportFile(formData, this.props.Login.masterData);\r\n    }\r\n\r\n    onSaveClickAdhocParam = (saveType) =>{\r\n        if(Object.keys(this.state.selectedRecord).length >0){\r\n            \r\n         let Map = {};\r\n         let testParameter=[];\r\n         this.state.selectedRecord && this.state.selectedRecord.nparamtercode.forEach((data,index)=>\r\n         testParameter.push(data.item));\r\n\r\n         Map[\"ntestparametercode\"] = testParameter.map(ntestgroupparamtercode => ntestgroupparamtercode.item.ntestparametercode).join(\",\");\r\n         Map[\"ntestgrouptestcode\"] = testParameter.map(ntestgrouptestcode => ntestgrouptestcode.item.ntestgrouptestcode).join(\",\");\r\n         Map[\"ntestcode\"] = testParameter.map(ntestgrouptestcode => ntestgrouptestcode.item.ntestcode).join(\",\");\r\n         Map[\"userinfo\"] = this.props.Login.userInfo;\r\n         Map[\"npreregno\"]=this.props.Login.adhocpreregno;\r\n         Map[\"ntransactiontestcode\"]=this.props.Login.adhoctransactiontestcode;\r\n         Map[\"masterData\"] = this.props.Login.masterData;\r\n         Map[\"multiselecttransactiontestcode\"] =  this.props.Login.masterData.RESelectedTest.map(x => x.ntransactiontestcode).join(\",\");\r\n         Map[\"nregtypecode\"]=this.props.Login.masterData.realRegTypeValue.nregtypecode;\r\n         Map[\"nregsubtypecode\"] = this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode;\r\n         Map[\"ndesigntemplatemappingcode\"] =  this.props.Login.masterData.ndesigntemplatemappingcode && this.props.Login.masterData.ndesigntemplatemappingcode;\r\n         Map[\"nneedsubsample\"]=this.props.Login.masterData.nneedsubsample;\r\n         let inputParam = {\r\n            inputData: Map,\r\n            action: 'createAdhocParameter',\r\n            operation:\"create\",\r\n            methodUrl:\"AdhocParamter\",\r\n            classUrl:\"resultentrybysample\"\r\n\r\n        }\r\n\r\n    if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.adhocId)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true,\r\n                    screenData: { inputParam, masterData: this.props.Login.masterData },\r\n                    openModal: true,\r\n                    screenName: \"Resultentry\",\r\n                    operation: \"adhocTestParameter\"\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }else{\r\n          this.props.createAdhocParamter(inputParam);\r\n        }\r\n      }else{\r\n        toast.warn(this.props.intl.formatMessage({ id:\"IDS_SELECTRECORD\" }))\r\n      }\r\n    }\r\n    onDropFile = (acceptedFile) => {\r\n        this.props.Login.masterData.selectedImportFile['sfilename'] = acceptedFile\r\n\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { masterData: this.props.Login.masterData }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    onFormulaInputChange = (event, index, fields) => {\r\n        let selectedRecord = this.state.selectedRecord\r\n        let selectedForumulaInput = this.state.selectedRecord.selectedForumulaInput || [];\r\n        let selectedMandatory = this.state.selectedRecord.selectedMandatory || [];\r\n        let dynamicformulafields = {};\r\n\r\n        if (event) {\r\n            if (fields.ndynamicformulafieldcode === FORMULAFIELDTYPE.INTEGER) {\r\n                const value = event.target.value.replace(/[^-^0-9]/g, '');\r\n                if (/^-?\\d*?$/.test(value) || value === \"\") {\r\n                    if (this.state.selectedRecord.formulainput) {\r\n                        dynamicformulafields.svalues = value;\r\n                        dynamicformulafields.sparameter = fields.sdescription;\r\n                        selectedForumulaInput[index] = dynamicformulafields;\r\n                        selectedMandatory[index] = event.target.value;\r\n                    }\r\n                }\r\n                selectedRecord[\"selectedForumulaInput\"] = selectedForumulaInput;\r\n                selectedRecord[\"selectedMandatory\"] = selectedMandatory;\r\n\r\n                this.setState({ selectedRecord: selectedRecord });\r\n            } else {\r\n                const value = event.target.value.replace(/[^-^0-9.]/g, '');\r\n                if (/^-?\\d*?\\.?\\d*?$/.test(value) || value === \"\") {\r\n                    if (this.state.selectedRecord.formulainput) {\r\n                        dynamicformulafields.svalues = value;\r\n                        dynamicformulafields.sparameter = fields.sdescription;\r\n                        selectedForumulaInput[index] = dynamicformulafields;\r\n                        selectedMandatory[index] = event.target.value;\r\n                    }\r\n                }\r\n                selectedRecord[\"selectedForumulaInput\"] = selectedForumulaInput;\r\n                selectedRecord[\"selectedMandatory\"] = selectedMandatory;\r\n\r\n                this.setState({ selectedRecord: selectedRecord });\r\n            }\r\n        }\r\n    }\r\n\r\n    onTemplateInputChange = (event, control) => {\r\n        let selectedRecord = templateChangeHandler(1, this.state.selectedRecord, event, control)\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    onTemplateComboChange = (comboData, control) => {\r\n        let selectedRecord = templateChangeHandler(2, this.state.selectedRecord, comboData, control)\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    onTemplateDateChange = (dateData, control) => {\r\n        let selectedRecord = templateChangeHandler(3, this.state.selectedRecord, dateData, control)\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    handleDateChange = (dateName, dateValue) => {\r\n        const { selectedRecord } = this.state;\r\n        if (dateValue === null) {\r\n            dateValue = new Date();\r\n        }\r\n        selectedRecord[dateName] = dateValue;\r\n        this.setState({ selectedRecord });\r\n    }\r\n    viewAdditionalInfo = (currentAlertResultCode) => {\r\n        const selectedRecord = this.state.selectedRecord || [];   \r\n        let additionalInfo=selectedRecord['additionalInfo'];  \r\n        let  showAlertGrid=this.props.Login.showAlertGrid;\r\n        let  additionalInfoView=this.props.Login.additionalInfoView\r\n        if(additionalInfo[currentAlertResultCode]){\r\n            showAlertGrid=true;\r\n            additionalInfoView=true; \r\n            selectedRecord['additionalResultData']=additionalInfo[currentAlertResultCode]\r\n        }\r\n       // this.setState({selectedRecord,additionalInfoView});\r\n     const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { selectedRecord: selectedRecord,showAlertGrid,additionalInfoView }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    } \r\n    onModalSave=()=>{\r\n      const selectedRecord = this.state.selectedRecord || [];\r\n      let currentAlertResultCode=this.state.currentAlertResultCode||0; \r\n      let currentntestgrouptestpredefcode=this.state.currentntestgrouptestpredefcode||0; \r\n      let bool=this.state.selectedRecord.ResultParameter.some(x=>x['ntransactionresultcode']===currentAlertResultCode) \r\n      if(bool){\r\n        this.state.selectedRecord.ResultParameter.map(Parameter=>\r\n            {\r\n                if(Parameter['ntransactionresultcode']===currentAlertResultCode){ \r\n                    Parameter['additionalInfoUidata']={ntestgrouptestpredefsubcode: selectedRecord['ntestgrouptestpredefsubcode']}\r\n                    if(selectedRecord['ntestgrouptestpredefsubcode']){\r\n                        if(typeof selectedRecord['ntestgrouptestpredefsubcode']==='string'){\r\n                            Parameter['additionalInfo']=selectedRecord['ntestgrouptestpredefsubcode']\r\n                        }else{\r\n                            Parameter['additionalInfo']=\"\"\r\n                            // selectedRecord['ntestgrouptestpredefsubcode'].map(x=>{ \r\n                            //     Parameter['additionalInfo']+= x.label+\",\"  \r\n                            // }).join('\\n')\r\n                            Parameter['additionalInfo']=selectedRecord['ntestgrouptestpredefsubcode'].map(x=>x.label+\",\").join('\\n')\r\n                              Parameter['additionalInfo']=Parameter['additionalInfo'].substring(0,\r\n                                 Parameter['additionalInfo'].length-1) \r\n                        } \r\n                    } else{\r\n                        Parameter['additionalInfo']=\"\"\r\n                        Parameter['additionalInfoUidata'] && delete Parameter['additionalInfoUidata']\r\n                    }\r\n                    Parameter['ntestgrouptestpredefcode']=currentntestgrouptestpredefcode\r\n                }\r\n            }\r\n            );  \r\n      } \r\n      const updateInfo = {\r\n        typeName: DEFAULT_RETURN,\r\n        data: { selectedRecord: selectedRecord,showAlertGrid:false}\r\n    }\r\n    this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    onInputChange = (Data, name) => {\r\n        const selectedRecord = this.state.selectedRecord || [];\r\n        let currentAlertResultCode=this.state.currentAlertResultCode||0; \r\n        if (Data) {\r\n            if(name==='ntestgrouptestpredefsubcode'){\r\n                // if(!selectedRecord['additionalInfo']){\r\n                //     selectedRecord['additionalInfo']=[] \r\n                // } \r\n                // if(selectedRecord['additionalInfo']){\r\n                //     selectedRecord['additionalInfo'][currentAlertResultCode]= Data.target.value\r\n                // } \r\n                // let bool=this.state.selectedRecord.ResultParameter.some(x=>x['ntransactionresultcode']===currentAlertResultCode) \r\n                // if(bool){\r\n                //   this.state.selectedRecord.ResultParameter.map(Parameter=>\r\n                //       {\r\n                //           if(Parameter['ntransactionresultcode']===currentAlertResultCode){\r\n                //               Parameter[\"jsondata\"]={};\r\n                //               Parameter['additionalInfo']=selectedRecord['additionalInfo'][currentAlertResultCode]\r\n                //             //   Parameter[\"jsondata\"] = { \r\n                //             //       ...Parameter[\"jsondata\"],\r\n                //             //       additionalInfo:selectedRecord['additionalInfo'][currentAlertResultCode]\r\n                //             //   }\r\n                //           }\r\n                //       }\r\n                //       );  \r\n                // }\r\n              //  selectedRecord[name] = Data.target.value;\r\n            }\r\n            //else{\r\n                selectedRecord[name] = Data.target.value;\r\n          //  } \r\n        }\r\n        else {\r\n            selectedRecord[name] = [];\r\n        }\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    onNumericChange = (numericData, numericName) => {\r\n        const selectedRecord = this.state.selectedRecord || [];\r\n        if (numericData) {\r\n            if (numericName !== \"scomments\") {\r\n                selectedRecord[numericName] = numericData;\r\n            } else {\r\n                selectedRecord[numericName] = numericData.target.value;\r\n            }\r\n        }\r\n        else {\r\n            selectedRecord[numericName] = \"\";\r\n        }\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    onDateChange = (dateName, dateValue) => {\r\n        const selectedRecord = this.state.selectedRecord || [];\r\n        selectedRecord[dateName] = dateValue;\r\n        if (dateName === \"dfromdate\" || dateName === \"dtodate\") {\r\n            this.setState({ selectedRecord });\r\n        }\r\n\r\n    }\r\n\r\n    headerSelectionChange = (event) => {\r\n        const checked = event.syntheticEvent.target.checked;\r\n        let meanTestParameterList = this.state.meanTestParameterList || [];\r\n        let selectedMeanTestParam = this.state.selectedMeanTestParam || new Map();\r\n        if (checked) {\r\n            const data = meanTestParameterList.map(item => {\r\n                item.selected = checked;\r\n                selectedMeanTestParam.set(item.ntransactionresultcode, item.sresult);\r\n                return item;\r\n            });\r\n\r\n            let selectedTestParam = \"\";\r\n            let selectedTestParamMean = 0;\r\n            let size = 0;\r\n            if (selectedMeanTestParam.size > 0) {\r\n                [...selectedMeanTestParam.values()].forEach(item => (\r\n                    item !== null && item !== \"\" ?\r\n                        (selectedTestParam = selectedTestParam === \"\" ? item : selectedTestParam + \"+\" + item,\r\n                            size = size + 1,\r\n                            selectedTestParamMean = parseInt(selectedTestParamMean) + parseInt(item)) : \"\"\r\n                ));\r\n                selectedTestParamMean = selectedTestParamMean / size;\r\n            }\r\n\r\n            this.setState({\r\n                meanTestParameterList: data, selectedMeanTestParam, selectedTestParam,\r\n                testMean: selectedTestParamMean,\r\n                selectAll: checked\r\n            });\r\n        }\r\n        else {\r\n            const data = meanTestParameterList.map(item => {\r\n                item.selected = checked;\r\n                return item;\r\n            });\r\n\r\n            this.setState({\r\n                meanTestParameterList: data, selectedMeanTestParam: new Map(),\r\n                selectedTestParam: \"\",\r\n                testMean: \"\",\r\n                selectAll: checked\r\n            });\r\n        }\r\n    }\r\n\r\n    selectionChange = (event) => {\r\n        let meanTestParameterList = this.state.meanTestParameterList || [];\r\n        let selectedMeanTestParam = this.state.selectedMeanTestParam || new Map();\r\n        meanTestParameterList.map(item => {\r\n            if (item.ntransactionresultcode === event.dataItem.ntransactionresultcode) {\r\n                item.selected = !event.dataItem.selected;\r\n            }\r\n            return item;\r\n        });\r\n        if (event.dataItem.selected) {\r\n            selectedMeanTestParam.set(event.dataItem.ntransactionresultcode, event.dataItem.sresult);\r\n        }\r\n        else {\r\n            if (selectedMeanTestParam.has(event.dataItem.ntransactionresultcode)) {\r\n                selectedMeanTestParam.delete(event.dataItem.ntransactionresultcode)\r\n            }\r\n        }\r\n        let selectedTestParam = \"\";\r\n        let selectedTestParamMean = 0;\r\n        let size = 0;\r\n        if (selectedMeanTestParam.size > 0) {\r\n            [...selectedMeanTestParam.values()].forEach(item => (\r\n                item !== null && item !== \"\" ?\r\n                    (selectedTestParam = selectedTestParam === \"\" ? item : selectedTestParam + \"+\" + item,\r\n                        size = size + 1,\r\n                        selectedTestParamMean = parseInt(selectedTestParamMean) + parseInt(item)) : \"\"\r\n            ));\r\n            selectedTestParamMean = selectedTestParamMean / size;\r\n        }\r\n        this.setState({\r\n            meanTestParameterList, selectedMeanTestParam, selectedTestParam, testMean: selectedTestParamMean,\r\n            selectAll: this.valiateCheckAll(meanTestParameterList)\r\n        });\r\n    }\r\n\r\n    valiateCheckAll(data) {\r\n        let selectAll = true;\r\n        if (data && data.length > 0) {\r\n            data.forEach(dataItem => {\r\n                if (dataItem.selected) {\r\n                    if (dataItem.selected === false) {\r\n                        selectAll = false;\r\n                    }\r\n                }\r\n                else {\r\n                    selectAll = false;\r\n                }\r\n            })\r\n        }\r\n        else {\r\n            selectAll = false;\r\n        }\r\n        return selectAll;\r\n    }\r\n\r\n    onMeanComboChange = (comboData, comboName) => {\r\n        const selectedMeanTestParam = this.state.selectedMeanTestParam || [];\r\n        selectedMeanTestParam[comboName] = comboData[0];\r\n        let data = \"\";\r\n        if (selectedMeanTestParam[\"parametervalue\"] === undefined) {\r\n            data = comboData[0].value;\r\n        }\r\n        else {\r\n            data = selectedMeanTestParam[\"parametervalue\"] + \"+\" + comboData[0].value;\r\n        }\r\n        selectedMeanTestParam[\"parametervalue\"] = data;\r\n        this.setState({ selectedMeanTestParam });\r\n    }\r\n\r\n    onMaterialComboChange = (comboData, comboName) => {\r\n        const selectedRecord = this.state.selectedRecord || [];\r\n        const ntestgrouptestcode = selectedRecord.ntestgroupmaterial == transactionStatus.YES ?  this.props.Login.masterData.RESelectedTest[0].ntestgrouptestcode : -1;\r\n        if (comboData) {\r\n            selectedRecord[comboName] = comboData;\r\n            //this.setState({ selectedRecord });\r\n        } else {\r\n            selectedRecord[comboName] = []\r\n            //this.setState({ selectedRecord });\r\n        }\r\n        switch (comboName) {\r\n            case 'nmaterialtypecode':\r\n                this.props.getREMaterialCategoryByType({ntestgrouptestcode,selectedRecord, userInfo: this.props.Login.userInfo })\r\n                break;\r\n            case 'nmaterialcatcode':\r\n                selectedRecord['nsectioncode'] = selectedRecord.nmaterialcatcode.item.needSectionwise == transactionStatus.YES ? \r\n                                        this.props.Login.masterData.RESelectedTest[0].nsectioncode : -1;\r\n                this.props.getREMaterialByCategory({ ntestgrouptestcode,selectedRecord, userInfo: this.props.Login.userInfo })\r\n                break;\r\n            case 'nmaterialcode':\r\n                this.props.getREMaterialInvertoryByMaterial({ ntestgrouptestcode,selectedRecord, userInfo: this.props.Login.userInfo })\r\n                break;\r\n            default:\r\n                this.props.getAvailableMaterialQuantity({ ntestgrouptestcode,selectedRecord, userInfo: this.props.Login.userInfo })\r\n                break;\r\n        }\r\n    }\r\n\r\n    onComboChange = (comboData, comboName) => {\r\n        const selectedRecord = this.state.selectedRecord || [];\r\n        let currentAlertResultCode=this.state.currentAlertResultCode||0;\r\n        if (comboData) { \r\n            // if(comboName==='ntestgrouptestpredefsubcode'){\r\n                 \r\n            //     if(!selectedRecord['additionalInfo']){\r\n            //         selectedRecord['additionalInfo']=[] \r\n            //     }  \r\n            //         selectedRecord['additionalInfo'][currentAlertResultCode]=\"\"\r\n            //         comboData.map(x=>{ \r\n            //             selectedRecord['additionalInfo'][currentAlertResultCode]+= x.label+\",\"//+<br/> \r\n            //         })\r\n            //         selectedRecord['additionalInfo'][currentAlertResultCode]=selectedRecord['additionalInfo'][currentAlertResultCode].substring(0,\r\n            //             selectedRecord['additionalInfo'][currentAlertResultCode].length-1) \r\n            // } \r\n                selectedRecord[comboName] = comboData; \r\n        } else {\r\n            selectedRecord[comboName] = [] \r\n        }\r\n        this.setState({ selectedRecord });\r\n\r\n        // const updateInfo = {\r\n        //     typeName: DEFAULT_RETURN,\r\n        //     data: { selectedRecord: selectedRecord }\r\n        // }\r\n        // this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    onGradeEvent = (ResultParameter, index, parameter) => {\r\n        if (ResultParameter.length > 0 && ResultParameter[index] !== undefined && ResultParameter[index].sresult !== null) {\r\n            let selectedRecord = this.state.selectedRecord || [];\r\n            let selectedResultGrade = this.state.selectedRecord.selectedResultGrade || [];\r\n            if (parameter.nparametertypecode === parameterType.NUMERIC) {\r\n                selectedResultGrade[index] = {\r\n                    ngradecode: ResultParameter[index].sresult !== \"\" ?\r\n                        numericGrade(parameter, numberConversion(parseFloat(ResultParameter[index].sresult), parseInt(parameter.nroundingdigits))) : -1\r\n                };\r\n            }\r\n            if (parameter.nparametertypecode === parameterType.PREDEFINED) {\r\n                if (ResultParameter[index].sresult !== null) {\r\n                    selectedResultGrade[index] = { ngradecode: ResultParameter[index].ngradecode };\r\n                }\r\n                else {\r\n                    selectedResultGrade[index] = { ngradecode: 0 };\r\n                }\r\n            }\r\n            if (parameter.nparametertypecode === parameterType.CHARACTER) {\r\n                if (ResultParameter[index].sresult !== null && ResultParameter[index].sresult.trim() !== \"\") {\r\n                    //selectedResultGrade[index] = { ngradecode: ResultParameter[index].ngradecode };\r\n                    selectedResultGrade[index] = { ngradecode: 4 };\r\n                }\r\n                else {\r\n                    selectedResultGrade[index] = { ngradecode: -1 };\r\n                }\r\n            }\r\n            //this.props.Login.masterData[\"selectedResultGrade\"] = selectedResultGrade;\r\n            selectedRecord.selectedResultGrade = selectedResultGrade;\r\n\r\n            this.setState({\r\n                selectedRecord\r\n            });\r\n\r\n            // const updateInfo = {\r\n            //     typeName: DEFAULT_RETURN,\r\n            //     data: { masterData: this.props.Login.masterData }\r\n            // }\r\n            // this.props.updateStore(updateInfo);\r\n        }\r\n    }\r\n\r\n    onCommentsSaveClick = (saveType, formRef, selectedRecord) => {\r\n        const masterData = this.props.Login.masterData;\r\n        let inputData = {}\r\n        let inputParam = {}\r\n        inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n        let { testskip, testtake } = this.state\r\n        let testList = [...this.props.Login.masterData.RE_TEST];\r\n        testList = testList.slice(testskip, testskip + testtake);\r\n        let selectedTestList = getSameRecordFromTwoArrays(testList, this.props.Login.masterData.RESelectedTest, \"ntransactiontestcode\");\r\n        if (this.props.Login.screenName === \"IDS_TESTCOMMENTS\") {\r\n            let saveParam = {\r\n                userInfo: this.props.Login.userInfo,\r\n                isTestComment: this.props.isTestComment,\r\n                selectedRecord,\r\n                masterData: this.props.Login.masterData,\r\n                saveType, formRef,\r\n                operation: this.props.Login.operation,\r\n                ntransactiontestcode: this.props.Login.masterData.RESelectedTest ? this.props.Login.masterData.RESelectedTest.map(x => x.ntransactiontestcode).join(\",\") : \"-1\"\r\n            }\r\n            inputParam = onSaveTestComments(saveParam, selectedTestList);\r\n        }\r\n        if (this.props.Login.screenName === \"IDS_SUBSAMPLECOMMENTS\") {\r\n            let sampleList = [];\r\n            if (this.props.Login.masterData.searchedSubSample !== undefined) {\r\n                sampleList = getSameRecordFromTwoArrays(this.props.Login.masterData.searchedSubSample, this.props.Login.masterData.RE_SUBSAMPLE.slice(this.state.subSampleSkip, this.state.subSampleSkip + this.state.subSampleTake), \"npreregno\");\r\n            } else {\r\n                sampleList = this.props.Login.masterData.RE_SUBSAMPLE.slice(this.state.subSampleSkip, this.state.subSampleSkip + this.state.subSampleTake);\r\n            }\r\n            let acceptList = getSameRecordFromTwoArrays(sampleList, this.props.Login.masterData.RESelectedSubSample, \"ntransactionsamplecode\");\r\n            // let acceptList=getSameRecordFromTwoArrays(this.props.Login.masterData.searchedTest, this.props.Login.masterData.RegistrationGetTest.slice(this.state.testskip, this.state.testskip + this.state.testtake), \"npreregno\");\r\n\r\n            let saveParam = {\r\n                userInfo: this.props.Login.userInfo,\r\n                isTestComment: this.props.isTestComment,\r\n                selectedRecord,\r\n                masterData: this.props.Login.masterData,\r\n                saveType, formRef,\r\n                operation: this.props.Login.operation,\r\n                ntransactionsamplecode: this.props.Login.masterData.RESelectedSubSample ? this.props.Login.masterData.RESelectedSubSample.map(x => x.ntransactionsamplecode).join(\",\") : \"-1\"\r\n            }\r\n            inputParam = onSaveSubSampleComments(saveParam, acceptList);\r\n        }\r\n\r\n        if (this.props.Login.screenName === \"IDS_SAMPLECOMMENTS\") {\r\n            let sampleList = [];\r\n            if (this.props.Login.masterData.searchedSample !== undefined) {\r\n                sampleList = getSameRecordFromTwoArrays(this.props.Login.masterData.searchedSample, this.props.Login.masterData.RE_SAMPLE.slice(this.state.skip, this.state.skip + this.state.take), \"npreregno\");\r\n            } else {\r\n                sampleList = this.props.Login.masterData.RE_SAMPLE.slice(this.state.skip, this.state.skip + this.state.take);\r\n            }\r\n            let acceptList = getSameRecordFromTwoArrays(sampleList, this.props.Login.masterData.RESelectedSample, \"npreregno\");\r\n            // let acceptList=getSameRecordFromTwoArrays(this.props.Login.masterData.searchedTest, this.props.Login.masterData.RegistrationGetTest.slice(this.state.testskip, this.state.testskip + this.state.testtake), \"npreregno\");\r\n\r\n            let saveParam = {\r\n                userInfo: this.props.Login.userInfo,\r\n                isTestComment: this.props.isTestComment,\r\n                selectedRecord,\r\n                masterData: this.props.Login.masterData,\r\n                saveType, formRef,\r\n                operation: this.props.Login.operation,\r\n                npreregno: this.props.Login.masterData.RESelectedSample ? this.props.Login.masterData.RESelectedSample.map(x => x.npreregno).join(\",\") : \"-1\"\r\n            }\r\n            inputParam = onSaveSampleComments(saveParam, acceptList);\r\n        }\r\n\r\n\r\n\r\n        if (this.props.Login.screenName === \"IDS_SUBSAMPLECOMMENTS\") {\r\n            let sampleList = [];\r\n            if (this.props.Login.masterData.searchedSubSample !== undefined) {\r\n                sampleList = getSameRecordFromTwoArrays(this.props.Login.masterData.searchedSubSample, this.props.Login.masterData.RESelectedSubSample.slice(this.state.subsampleskip, this.state.subsampleskip + this.state.subsampletake), \"npreregno\");\r\n            } else {\r\n                sampleList = this.props.Login.masterData.RESelectedSubSample.slice(this.state.subsampleskip, this.state.subsampleskip + this.state.subSampleTake);\r\n            }\r\n            let acceptList = getSameRecordFromTwoArrays(sampleList, this.props.Login.masterData.RESelectedSubSample, \"ntransactionsamplecode\");\r\n            let saveParam = {\r\n                userInfo: this.props.Login.userInfo,\r\n                isTestComment: this.props.isTestComment,\r\n                selectedRecord,\r\n                masterData: this.props.Login.masterData,\r\n                saveType, formRef,\r\n                operation: this.props.Login.operation,\r\n                ntransactionsamplecode: this.props.Login.masterData.RESelectedSubSample ? this.props.Login.masterData.RESelectedSubSample.map(x => x.ntransactionsamplecode).join(\",\") : \"-1\"\r\n            }\r\n            inputParam = onSaveSubSampleComments(saveParam, acceptList);\r\n        }\r\n\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true,\r\n                    screenData: { inputParam, masterData },\r\n                    operation: this.props.Login.operation,\r\n                    screenName: this.props.Login.screenName,\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.crudMaster(inputParam, masterData, \"openCommentModal\");\r\n        }\r\n    }\r\n    onAttachmentSaveClick = (saveType, formRef, selectedRecord) => {\r\n        const masterData = this.props.Login.masterData;\r\n        let inputData = {}\r\n        let inputParam = {}\r\n        inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n        let { testskip, testtake, skip, take } = this.state\r\n        let testList = [...this.props.Login.masterData.RE_TEST];\r\n        testList = testList.slice(testskip, testskip + testtake);\r\n        let selectedTestList = getSameRecordFromTwoArrays(testList, this.props.Login.masterData.RESelectedTest, \"ntransactiontestcode\");\r\n        let sampleList = [...this.props.Login.masterData.RE_SAMPLE];\r\n        sampleList = sampleList.slice(skip, skip + take);\r\n        let selectedSampleList = getSameRecordFromTwoArrays(sampleList, this.props.Login.masterData.RESelectedSample, \"npreregno\");\r\n        if (this.props.Login.screenName === \"IDS_SAMPLEATTACHMENTS\") {\r\n            let saveParam = {\r\n                userInfo: this.props.Login.userInfo,\r\n                selectedRecord,\r\n                masterData: this.props.Login.masterData,\r\n                saveType, formRef,\r\n                operation: this.props.Login.operation,\r\n                selectedMaster: this.props.selectedMaster,\r\n                npreregno: this.props.Login.masterData.RESelectedSample ? this.props.Login.masterData.RESelectedSample.map(x => x.npreregno).join(\",\") : \"-1\"\r\n            }\r\n            inputParam = onSaveSampleAttachment(saveParam, selectedSampleList);\r\n        } else if (this.props.Login.screenName === \"IDS_TESTATTACHMENTS\") {\r\n            let saveParam = {\r\n                userInfo: this.props.Login.userInfo,\r\n                selectedRecord,\r\n                masterData: this.props.Login.masterData,\r\n                saveType, formRef,\r\n                operation: this.props.Login.operation,\r\n                ntransactiontestcode: this.props.Login.masterData.RESelectedTest ? this.props.Login.masterData.RESelectedTest.map(x => x.ntransactiontestcode).join(\",\") : \"-1\"\r\n            }\r\n            inputParam = onSaveTestAttachment(saveParam, selectedTestList);\r\n        }\r\n\r\n        else if (this.props.Login.screenName === \"IDS_SUBSAMPLEATTACHMENTS\") {\r\n            let saveParam = {\r\n                userInfo: this.props.Login.userInfo,\r\n                selectedRecord,\r\n                masterData: this.props.Login.masterData,\r\n                saveType, formRef,\r\n                operation: this.props.Login.operation,\r\n                selectedMaster: this.props.selectedMaster,\r\n                ntransactionsamplecode: this.props.Login.masterData.RESelectedSubSample ? this.props.Login.masterData.RESelectedSubSample.map(x => x.ntransactionsamplecode).join(\",\") : \"-1\"\r\n            }\r\n            inputParam = onSaveSubSampleAttachment(saveParam, this.props.Login.masterData.RESelectedSubSample);\r\n        }\r\n\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true,\r\n                    screenData: { inputParam, masterData },\r\n                    operation: this.props.Login.operation,\r\n                    screenName: this.props.Login.screenName,\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.crudMaster(inputParam, masterData, \"openAttachmentModal\");\r\n        }\r\n    }\r\n\r\n    onKeyPress = (event, index, paremterResultcode) => {\r\n        if (event.keyCode === 13) {\r\n            for (let i = 0; i < event.target.form.elements.length; i++) {\r\n                if (parseInt(event.target.form.elements[i].id) === paremterResultcode[index + 1]) {\r\n                    event.target.form.elements[i].focus();\r\n                    break;\r\n                }\r\n            }\r\n            event.preventDefault();\r\n        }\r\n    }\r\n\r\n\r\n    onResultInputChange = (event, index, parameter) => {\r\n        //let ResultParameter = this.props.Login.masterData.ResultParameter ? this.props.Login.masterData.ResultParameter : [];\r\n        let selectedRecord = this.state.selectedRecord || [];\r\n        let ResultParameter = this.state.selectedRecord.ResultParameter ? this.state.selectedRecord.ResultParameter : [];\r\n        let sresult = \"\";\r\n        let sfinal = \"\";\r\n        let sresultpredefinedname= \"\";\r\n        let salertmessage = \"\";\r\n        let sresultcomment = \"\";\r\n        let value = -1;\r\n        let acceptedFile = [];\r\n        let ncalculatedresult; \r\n        let currentAlertResultCode=0;\r\n        let currentntestgrouptestpredefcode=0;\r\n        let inputData={}\r\n        if (parameter.nparametertypecode === parameterType.NUMERIC) {\r\n            if (/^-?\\d*?\\.?\\d*?$/.test(event.target.value) || event.target.value === \"\") {\r\n                sresult = event.target.value;\r\n                ncalculatedresult = 4\r\n            } else {\r\n                sresult = ResultParameter[index]['sresult'] === null ? \"\" : ResultParameter[index]['sresult'];\r\n                ncalculatedresult = ResultParameter[index]['ncalculatedresult'];\r\n            }\r\n        }\r\n        if (parameter.nparametertypecode === parameterType.PREDEFINED) {\r\n             currentAlertResultCode= event.item.ntransactionresultcode ;\r\n             currentntestgrouptestpredefcode= event.item.ntestgrouptestpredefcode ;\r\n            if (event != null) {\r\n                sresult = event.item.spredefinedname;\r\n                sresultpredefinedname = event.item.sresultpredefinedname;\r\n                sfinal=event.item.spredefinedsynonym\r\n                value = event.item.ngradecode;\r\n                salertmessage=event.item.salertmessage?event.item.salertmessage:\"\";\r\n                sresultcomment= event.item.spredefinedcomments?event.item.spredefinedcomments:\"\";\r\n                ncalculatedresult = 4; \r\n            }\r\n            else {\r\n                sresult = \"\";\r\n                sfinal = \"\";\r\n                sresultpredefinedname= \"\";\r\n                value = -1;\r\n                ncalculatedresult = 4\r\n            }\r\n            inputData={\r\n                'ntestgrouptestpredefcode':event.item.ntestgrouptestpredefcode,\r\n                'salertmessage':salertmessage,\r\n                'nneedresultentryalert':event.item.nneedresultentryalert,\r\n                'nneedsubcodedresult':event.item.nneedsubcodedresult\r\n            }\r\n            // ResultParameter[index]['additionalInfo']&& delete ResultParameter[index]['additionalInfo'] \r\n            // ResultParameter[index]['additionalInfo']&& delete ResultParameter[index]['additionalInfoUidata']  \r\n            if(event.item.nneedresultentryalert===transactionStatus.NO&&\r\n                event.item.nneedsubcodedresult===transactionStatus.NO){\r\n                    if(ResultParameter[index]['additionalInfo']){ \r\n                        ResultParameter[index]['additionalInfo']=\"\" \r\n                    } \r\n                    if(ResultParameter[index]['additionalInfoUidata']){  \r\n                        ResultParameter[index]['additionalInfoUidata']=\"\" \r\n                    } \r\n                }\r\n          \r\n        }\r\n        if (parameter.nparametertypecode === parameterType.CHARACTER) {\r\n            sresult = event.target.value;\r\n            if (event.target.value.trim() === \"\")\r\n                ncalculatedresult = -1;\r\n            else\r\n                ncalculatedresult = 4;\r\n        }\r\n        if (parameter.nparametertypecode === parameterType.ATTACHMENT) {\r\n            sresult = event[0] && event[0].name;\r\n            sfinal= event;\r\n            ncalculatedresult = 4\r\n        }\r\n        ResultParameter[index]['sresult'] = sresult\r\n        ResultParameter[index]['sfinal'] = sfinal\r\n        ResultParameter[index]['sresultpredefinedname'] = sresultpredefinedname\r\n        ResultParameter[index]['sresultcomment'] = sresultcomment\r\n        ResultParameter[index]['salertmessage'] = salertmessage\r\n        ResultParameter[index]['acceptedFile'] = acceptedFile\r\n        ResultParameter[index]['editable'] = true\r\n        ResultParameter[index]['ngradecode'] = value\r\n        ResultParameter[index]['ncalculatedresult'] = ncalculatedresult \r\n\r\n        // this.props.Login.masterData.ResultParameter = ResultParameter;\r\n        selectedRecord.ResultParameter = ResultParameter\r\n        if (parameter.nparametertypecode === parameterType.PREDEFINED) {\r\n            this.props.getPredefinedData(inputData,selectedRecord,currentAlertResultCode,this.props.Login.masterData) \r\n        }\r\n        this.setState({\r\n            selectedRecord: selectedRecord,\r\n            currentAlertResultCode,\r\n            currentntestgrouptestpredefcode\r\n        });\r\n\r\n        // const updateInfo = {\r\n        //     typeName: DEFAULT_RETURN,\r\n        //     data: { masterData: this.props.Login.masterData }\r\n        // }\r\n        // this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    updateTestMethodSource(inputData, masterData, ncontrolcode) {\r\n        let inputParam = {\r\n\r\n            inputData: { ...inputData, 'userinfo': this.props.Login.userInfo, ncontrolcode },\r\n            // formData: formData,\r\n            // isFileupload: true,\r\n            operation: \"createMethod\",\r\n            screenName: \"IDS_TESTMETHODSOURCE\",\r\n            displayName: this.props.Login.inputParam.displayName,//, postParam,\r\n            //inputData1: inputData,\r\n            masterData: masterData\r\n        }\r\n\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, ncontrolcode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true,\r\n                    screenData: { inputParam, masterData: this.props.Login.masterData },\r\n                    openModal: true,\r\n                    //screenName: \"completeaction\",\r\n                    operation: \"createMethod\"\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.updateTestMethodSource(inputData, masterData)\r\n        }\r\n    }\r\n\r\n\r\n\r\n    updateParameterComments(inputData, masterData, ncontrolcode) {\r\n        // let inputData1 = { ...inputData, ncontrolcode }\r\n        const ndesigntemplatemappingcode = parseInt(this.props.Login.masterData.ndesigntemplatemappingcode && this.props.Login.masterData.ndesigntemplatemappingcode);\r\n        inputData = { ...inputData, ndesigntemplatemappingcode: ndesigntemplatemappingcode }\r\n        let inputParam = {\r\n            inputData: { ...inputData, ncontrolcode, 'userinfo': this.props.Login.userInfo },\r\n            operation: this.props.Login.operation,\r\n            screenName: \"IDS_RESULT\",\r\n            displayName: this.props.Login.inputParam.displayName,//, postParam,\r\n            //inputData: inputData1,\r\n            masterData: masterData\r\n        }\r\n\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, ncontrolcode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true,\r\n                    screenData: { inputParam, masterData: this.props.Login.masterData },\r\n                    openModal: true,\r\n                    //screenName: \"completeaction\",\r\n                    operation: \"updateParameterComments\"\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.updateParameterComments(inputData, masterData)\r\n        }\r\n    }\r\n\r\n    onSaveMean = (saveType) => {\r\n        const nregtypecode = parseInt(this.props.Login.masterData.realRegTypeValue.nregtypecode);\r\n        const nregsubtypecode = parseInt(this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode);\r\n\r\n        let resultParameter = this.props.Login.selectedTestParameterMean || {};\r\n        //let resultParameter = { };\r\n\r\n        resultParameter[\"ncalculatedresult\"] = 4;\r\n        resultParameter[\"sresult\"] = this.state.testMean;\r\n        resultParameter[\"sfinal\"] = numberConversion(parseFloat(this.state.testMean), parseInt(resultParameter.nroundingdigit));\r\n\r\n        resultParameter[\"ngradecode\"] = numericGrade(resultParameter, parseInt(this.state.testMean));\r\n        resultParameter['nenteredrole'] = this.props.Login.userInfo.nuserrole;\r\n        resultParameter['nenteredby'] = this.props.Login.userInfo.nusercode;\r\n        // resultParameter['ntransactionresultcode'] = meanParameter.ntransactionresultcode;\r\n        // resultParameter['ntransactiontestcode'] = meanParameter.ntransactiontestcode;\r\n        // resultParameter['nparametertypecode'] = meanParameter.nparametertypecode;\r\n        //console.log(\"result:\", resultParameter);\r\n\r\n        const formData = new FormData();\r\n        formData.append(\"filecount\", 0);\r\n        formData.append(\"nregtypecode\", nregtypecode);\r\n        formData.append(\"nregsubtypecode\", nregsubtypecode);\r\n        formData.append(\"ncontrolcode\", this.props.Login.ncontrolcode);\r\n        formData.append(\"transactiontestcode\", resultParameter.ntransactiontestcode);\r\n        //formData.append(\"resultData\", JSON.stringify([resultParameter]));\r\n        formData.append(\"resultData\", resultParameter);\r\n\r\n        const inputParam = {\r\n            classUrl: \"resultentrybysample\",\r\n            methodUrl: \"TestParameterResult\",\r\n            inputData: { userinfo: this.props.Login.userInfo },\r\n            formData: formData,\r\n            isFileupload: true,\r\n            operation: \"update\",\r\n            displayName: this.props.Login.inputParam.displayName, saveType\r\n        }\r\n\r\n        const masterData = this.props.Login.masterData;\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolcode)) {\r\n\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData }, saveType\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\r\n        }\r\n    }\r\n    editpredefinedcomments=(dataItem)=>{\r\n\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                screenName: \"IDS_RESULTPARAMETERCOMMENTS\",\r\n                openModal: true,\r\n                selectedRecord:{'sresultcomment':dataItem['sresultcomment'],'selectedPredefinedComments':dataItem},\r\n                operation: \"update\" \r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n    enforceResult=(dataItem)=>{ \r\n        let inputParam = {}\r\n        inputParam = {\r\n            dataItem:dataItem,\r\n            masterData:this.props.Login.masterData,\r\n            screenName: \"IDS_ENFORCERESULT\",\r\n            openModal: true, \r\n            operation: \"update\" ,\r\n            ncontrolcode:dataItem['ncontrolcode']\r\n        }\r\n        this.props.enforceResult(inputParam,this.props.Login.userInfo);\r\n    }\r\n    onSavePredefinedComments = (saveType) => { \r\n        let inputParam={}\r\n        let stransactiontestcode=\"\";\r\n        this.props.Login.masterData.RESelectedTest.map(x=>{ \r\n            stransactiontestcode+=x['ntransactiontestcode']+\",\"\r\n        }\r\n          )\r\n        let inputData={\r\n            'selectedPredefinedComments':this.state.selectedRecord['selectedPredefinedComments'],\r\n            'ntransactionresultcode': this.state.selectedRecord['selectedPredefinedComments']['ntransactionresultcode']\r\n            ,\r\n            'sresultcomment':this.state.selectedRecord['sresultcomment'],\r\n            'ntransactiontestcode':stransactiontestcode.substring(0,stransactiontestcode.length-1),//this.state.selectedRecord['selectedPredefinedComments']['ntransactiontestcode'],\r\n            'userinfo':this.props.Login.userInfo\r\n        } \r\n        inputParam = {\r\n            classUrl: 'resultentrybysample',\r\n            methodUrl: \"PredefinedComments\", \r\n            inputData: inputData, \r\n        //    isFileupload: false,\r\n          //  activeTestKey: \"IDS_INSTRUMENT\",\r\n            operation: this.props.Login.operation,\r\n            displayName: this.props.Login.inputParam.displayName, saveType//postParam\r\n        }\r\n        const masterData = this.props.Login.masterData;\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolcode)) {\r\n\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData }, saveType\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\r\n        }\r\n    }\r\n    onSaveEnforceResult = (saveType) => { \r\n        let inputParam={}\r\n        let stransactiontestcode=\"\";\r\n        const nregtypecode = parseInt(this.props.Login.masterData.realRegTypeValue.nregtypecode);\r\n        const nregsubtypecode = parseInt(this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode);\r\n        const ndesigntemplatemappingcode = parseInt(this.props.Login.masterData.ndesigntemplatemappingcode && this.props.Login.masterData.ndesigntemplatemappingcode);\r\n\r\n        // this.props.Login.masterData.RESelectedTest.map(x=>{ \r\n        //     stransactiontestcode+=x['ntransactiontestcode']+\",\"\r\n        // }\r\n        //   )\r\n        let inputData={\r\n            'ResultParameter':{ \r\n              //  ngradecode:this.state.selectedRecord['ngradecode'].value,\r\n                nparametertypecode:parameterType.CHARACTER,\r\n                sfinal:this.state.selectedRecord['senforceresult'],\r\n                senforceresultcomment:this.state.selectedRecord['senforceresultcomment'],\r\n                ntransactiontestcode:this.state.selectedRecord['ntransactiontestcode'],\r\n                ntransactionresultcode:this.state.selectedRecord['ntransactionresultcode']\r\n            },  \r\n           'ntransactionresultcode':this.state.selectedRecord['ntransactionresultcode'],\r\n            \"nregtypecode\" : nregtypecode ,\r\n             \"nregsubtypecode\" : nregsubtypecode,\r\n            \"ndesigntemplatemappingcode\" : ndesigntemplatemappingcode,\r\n            'userinfo':this.props.Login.userInfo\r\n        } \r\n        inputParam = {\r\n            classUrl: 'resultentrybysample',\r\n            methodUrl: \"EnforceResult\", \r\n            inputData: inputData,  \r\n            operation: this.props.Login.operation,\r\n            displayName: this.props.Login.inputParam.displayName, saveType//postParam\r\n        }\r\n        const masterData = this.props.Login.masterData;\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolcode)) {\r\n\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData }, saveType\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\r\n        }\r\n    }\r\n\r\n    onSaveClick = (saveType) => {\r\n        if (this.props.Login.screenName === \"IDS_MEANPARAMETER\") {\r\n            this.onSaveMean(saveType);\r\n        }else if(this.props.Login.screenName === \"IDS_RESULTPARAMETERCOMMENTS\"){\r\n            this.onSavePredefinedComments(saveType);\r\n        }\r\n        else if(this.props.Login.screenName === \"IDS_ENFORCERESULT\"){\r\n            this.onSaveEnforceResult(saveType);\r\n        }\r\n        else {\r\n            let ResultParameter = this.state.selectedRecord.ResultParameter || [];\r\n            let selectedRecord = this.state.selectedRecord || {};\r\n            let selectedId = this.props.Login.selectedId || null;\r\n            let additionalInfo=this.state.selectedRecord.additionalInfo || []; \r\n            const nregtypecode = parseInt(this.props.Login.masterData.realRegTypeValue.nregtypecode);\r\n            const nregsubtypecode = parseInt(this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode);\r\n            const ndesigntemplatemappingcode = parseInt(this.props.Login.masterData.ndesigntemplatemappingcode && this.props.Login.masterData.ndesigntemplatemappingcode);\r\n\r\n            const classUrl = \"resultentrybysample\";\r\n            const formData = new FormData();\r\n            let neditable = 0;\r\n            let resultParameters = [];\r\n            let inputParam = {};\r\n            let inputData = [];\r\n            let i = 0;\r\n            //const postParam = {inputListName: \"RESelectedTest\", selectedObject: \"RESelectedTest\", primaryKeyField: \"ntransactionstestcode\" };\r\n            if (this.props.Login.screenName === \"IDS_RESULTENTRY\") {\r\n                if (ResultParameter.length > 0 && ResultParameter !== undefined) {\r\n                    ResultParameter.map((resultData, index) => {\r\n                        let results = {};\r\n                        if (resultData.editable === true) {\r\n                            neditable = 1;\r\n                            switch (resultData.nparametertypecode) {\r\n                                case 1:\r\n                                    results[\"jsondata\"] = {\r\n                                        ncalculatedresult: resultData[\"ncalculatedresult\"],\r\n                                        sresult: resultData.sresult,\r\n                                        sfinal: resultData.sresult !== \"\" ? numberConversion(parseFloat(resultData.sresult), parseInt(resultData.nroundingdigits)) : \"\"\r\n                                    }\r\n                                    results[\"jsonstring\"] = JSON.stringify(results[\"jsondata\"]);\r\n                                    results[\"ncalculatedresult\"] = resultData[\"ncalculatedresult\"];\r\n                                    results[\"sresult\"] = resultData.sresult;\r\n                                    results[\"sfinal\"] = resultData.sresult !== \"\" ?\r\n                                        numberConversion(parseFloat(resultData.sresult), parseInt(resultData.nroundingdigits)) : \"\";\r\n                                    results[\"ngradecode\"] = resultData.sresult !== \"\" ?\r\n                                        numericGrade(resultData, results[\"sfinal\"]) : -1;\r\n                                    results['nenteredrole'] = this.props.Login.userInfo.nuserrole;\r\n                                    results['nenteredby'] = this.props.Login.userInfo.nusercode;\r\n                                    results['ntransactionresultcode'] = resultData.ntransactionresultcode;\r\n                                    results['ntransactiontestcode'] = resultData.ntransactiontestcode;\r\n                                    results['nparametertypecode'] = resultData.nparametertypecode;\r\n                                    break;\r\n                                case 2:\r\n                                    results[\"jsondata\"] = {\r\n                                        ncalculatedresult: 4,\r\n                                        sresult: Lims_JSON_stringify(resultData.sresult,false),\r\n                                        sfinal: Lims_JSON_stringify(resultData.sfinal,false),  \r\n                                        sresultcomment: resultData.sresultcomment==='null'?\"-\":resultData.sresultcomment,\r\n                                        salertmessage: resultData.salertmessage,\r\n                                        additionalInfo:resultData['additionalInfo'],\r\n                                        additionalInfoUidata:resultData['additionalInfoUidata']===undefined?\"\":resultData['additionalInfoUidata'],\r\n                                        ntestgrouptestpredefcode:resultData.ntestgrouptestpredefcode  \r\n                                    }\r\n                                    results[\"jsonstring\"] = JSON.stringify(results[\"jsondata\"]);\r\n                                    results[\"sresult\"] = resultData.sresult;\r\n                                   \r\n                                    results[\"ncalculatedresult\"] = 4;\r\n                                    results[\"sfinal\"] = resultData.sresult;\r\n                                    results[\"ngradecode\"] = resultData.ngradecode;\r\n                                    results['nenteredrole'] = this.props.Login.userInfo.nuserrole;\r\n                                    results['nenteredby'] = this.props.Login.userInfo.nusercode;\r\n                                    results['ntransactionresultcode'] = resultData.ntransactionresultcode;\r\n                                    results['ntransactiontestcode'] = resultData.ntransactiontestcode;\r\n                                    results['nparametertypecode'] = resultData.nparametertypecode;\r\n                                    break;\r\n                                case 3:\r\n                                    results[\"jsondata\"] = {\r\n                                        ncalculatedresult: 4,\r\n                                        sresult: Lims_JSON_stringify(resultData.sresult,false),\r\n                                        sfinal: Lims_JSON_stringify(resultData.sresult,false)\r\n                                    }\r\n                                    results[\"jsonstring\"] = JSON.stringify(results[\"jsondata\"]);\r\n                                    results[\"sresult\"] = resultData.sresult;\r\n                                    results[\"ncalculatedresult\"] = 4;\r\n                                    results[\"sfinal\"] = resultData.sresult;\r\n                                    results[\"ngradecode\"] = resultData.sresult.trim() === \"\" ? -1 : grade.FIO;\r\n                                    results['nenteredrole'] = this.props.Login.userInfo.nuserrole;\r\n                                    results['nenteredby'] = this.props.Login.userInfo.nusercode;\r\n                                    results['ntransactionresultcode'] = resultData.ntransactionresultcode;\r\n                                    results['ntransactiontestcode'] = resultData.ntransactiontestcode;\r\n                                    results['nparametertypecode'] = resultData.nparametertypecode;\r\n                                    break;\r\n                                case 4:\r\n                                    if (resultData.sfinal.length>0 ) {\r\n                                        const splittedFileName = resultData.sfinal ?resultData.sfinal[0] && resultData.sfinal[0].name.split('.') : \"\";\r\n                                        const fileExtension = resultData.sfinal ?resultData.sfinal[0]&& resultData.sfinal[0].name.split('.')[splittedFileName.length - 1] : \"\";\r\n                                        const uniquefilename = create_UUID() + '.' + fileExtension;\r\n                                        results[\"jsondata\"] = {\r\n                                            ssystemfilename: uniquefilename,\r\n                                            nfilesize: resultData.sfinal[0] && resultData.sfinal[0].size,\r\n                                            ncalculatedresult: 4,\r\n                                            sresult: Lims_JSON_stringify(resultData.sresult,false),\r\n                                            sfinal: Lims_JSON_stringify(resultData.sresult,false)\r\n                                        }\r\n                                        results[\"jsonstring\"] = JSON.stringify(results[\"jsondata\"]);\r\n                                        results[\"ncalculatedresult\"] = 4;\r\n                                        results[\"sresult\"] = resultData.sresult;\r\n                                        results[\"sfinal\"] = resultData.sresult;\r\n                                        results[\"ngradecode\"] = resultData.sresult.trim() === \"\" ? -1 : grade.FIO;\r\n                                        results[\"nenteredrole\"] = this.props.Login.userInfo.nuserrole;\r\n                                        results[\"nenteredby\"] = this.props.Login.userInfo.nusercode;\r\n                                        results[\"ntransactionresultcode\"] = resultData.ntransactionresultcode;\r\n                                        results[\"ntransactiontestcode\"] = resultData.ntransactiontestcode;\r\n                                        results['nparametertypecode'] = resultData.nparametertypecode;\r\n                                        results[\"ssystemfilename\"] = uniquefilename;\r\n                                        results[\"nfilesize\"] =resultData.sfinal[0] && resultData.sfinal[0].size;\r\n                                        formData.append(\"uploadedFile\" + index, resultData.sfinal[0] && resultData.sfinal[0]);\r\n                                        formData.append(\"uniquefilename\" + index, uniquefilename);\r\n                                        formData.append(\"ntransactiontestcode\", resultData.ntransactiontestcode);\r\n                                        i++;\r\n                                    }\r\n                                    else\r\n                                    {\r\n                                        const splittedFileName = resultData.sfinal ?resultData.sfinal[0] &&  resultData.sfinal[0].name.split('.') : \"\";\r\n                                        const fileExtension = resultData.sfinal ? resultData.sfinal[0] &&  resultData.sfinal[0].name.split('.')[splittedFileName.length - 1] : \"\";\r\n                                        const uniquefilename = \"\";\r\n                                        results[\"jsondata\"] = {\r\n                                            ssystemfilename: uniquefilename,\r\n                                            nfilesize: resultData.sfinal ? resultData.sfinal[0] && resultData.sfinal[0].size : \"\",\r\n                                            ncalculatedresult: 4,\r\n                                            sresult: \"\",\r\n                                            sfinal: \"\"\r\n                                        }\r\n                                        results[\"jsonstring\"] = JSON.stringify(results[\"jsondata\"]);\r\n                                        results[\"ncalculatedresult\"] = 4;\r\n                                        results[\"sresult\"] = \"\";\r\n                                        results[\"sfinal\"] = \"\";\r\n                                        results[\"ngradecode\"] = -1;\r\n                                        results[\"nenteredrole\"] = this.props.Login.userInfo.nuserrole;\r\n                                        results[\"nenteredby\"] = this.props.Login.userInfo.nusercode;\r\n                                        results[\"ntransactionresultcode\"] = resultData.ntransactionresultcode;\r\n                                        results[\"ntransactiontestcode\"] = resultData.ntransactiontestcode;\r\n                                        results['nparametertypecode'] = resultData.nparametertypecode;\r\n                                        results[\"ssystemfilename\"] = \"\";\r\n                                        results[\"nfilesize\"] = \"\";\r\n                                        formData.append(\"uploadedFile\" + index,\"\");\r\n                                        formData.append(\"uniquefilename\" + index, \"\");\r\n                                        formData.append(\"ntransactiontestcode\", \"\");\r\n                                    }\r\n                                    break;\r\n                                default:\r\n                                    break;\r\n                            }\r\n                            if (Object.values(results).length > 0) {\r\n                                resultParameters.push(results);\r\n                            }\r\n                        }\r\n                        return null;\r\n                    });\r\n\r\n                    if (neditable === 0) {\r\n                        const updateInfo = {\r\n                            typeName: DEFAULT_RETURN,\r\n                            data: { loading: false, openModal: false }\r\n                        }\r\n                        return this.props.updateStore(updateInfo);\r\n                    }\r\n\r\n                    formData.append(\"filecount\", i);\r\n                    formData.append(\"nregtypecode\", nregtypecode);\r\n                    formData.append(\"nregsubtypecode\", nregsubtypecode);\r\n                    formData.append(\"ncontrolcode\", this.props.Login.ncontrolcode);\r\n                    formData.append(\"ndesigntemplatemappingcode\", ndesigntemplatemappingcode);\r\n\r\n                    formData.append(\"resultData\", JSON.stringify(resultParameters));\r\n                    const tests = this.props.Login.masterData.RESelectedTest ?\r\n                        this.props.Login.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\") : \"\"\r\n                    formData.append(\"transactiontestcode\", tests);\r\n                    //let postParam = {inputListName: \"RE_TEST\", selectedObject: \"\", primaryKeyField: \"ntransactionresultcode\" };\r\n                    inputParam = {\r\n                        classUrl: classUrl,\r\n                        methodUrl: \"TestParameterResult\",\r\n                        inputData: { userinfo: this.props.Login.userInfo },\r\n                        formData: formData,\r\n                        isFileupload: true,\r\n                        operation: \"update\",\r\n                        displayName: this.props.Login.inputParam.displayName, saveType//, postParam\r\n                    }\r\n                }\r\n                else {\r\n                    const updateInfo = {\r\n                        typeName: DEFAULT_RETURN,\r\n                        data: { loading: false, openModal: false }\r\n                    }\r\n                    return this.props.updateStore(updateInfo);\r\n                }\r\n            }\r\n\r\n            if (this.props.Login.screenName === \"IDS_TESTMETHODSOURCE\") {\r\n                inputData = {\r\n                    ntype: 3,\r\n                    nflag: 3,\r\n                    nsampletypecode: this.props.Login.masterData.realSampleTypeValue.nsampletypecode,\r\n                    nregtypecode: this.props.Login.masterData.realRegTypeValue.nregtypecode,\r\n                    nregsubtypecode: this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode,\r\n                    ntranscode: this.props.Login.masterData.realFilterStatusValue.ntransactionstatus.toString(),\r\n                    ntestcode: this.props.Login.masterData.realTestcodeValue.ntestcode,\r\n                    npreregno: this.props.Login.masterData.RESelectedSample && this.props.Login.masterData.RESelectedSample.map(sample => sample.npreregno).join(\",\"),\r\n                    ntransactionsamplecode: this.props.Login.masterData.RESelectedSubSample && this.props.Login.masterData.RESelectedSubSample.map(sample => sample.ntransactionsamplecode).join(\",\"),\r\n                    nmethodcode: selectedRecord.nmethodcode.value,\r\n                    nsourcecode: selectedRecord.nsourcecode.value,\r\n                    ntransactiontestcode: selectedRecord.ntransactiontestcode,\r\n                    userinfo: this.props.Login.userInfo,\r\n                    activeTestKey: \"IDS_RESULTS\",\r\n                    ncontrolcode: this.props.Login.ncontrolcode\r\n                }\r\n                // inputParam = {\r\n                //     classUrl: classUrl,\r\n                //     methodUrl: \"TestMethodSource\",\r\n                //     inputData: inputData,\r\n                //     isFileupload: false,\r\n                //     operation: \"update\",\r\n                //     displayName: this.props.Login.inputParam.displayName, saveType//postParam\r\n                // }\r\n\r\n                this.updateTestMethodSource(inputData, this.props.Login.masterData, this.props.Login.ncontrolcode);\r\n                return;\r\n            }\r\n            if (this.props.Login.screenName === \"IDS_INSTRUMENT\") {\r\n                let inputData = [];\r\n                if (this.props.Login.operation === \"update\") {\r\n                    inputData = {\r\n                        ResultUsedInstrument: {\r\n                            nresultusedinstrumentcode: selectedRecord.nresultusedinstrumentcode,\r\n                            npreregno: selectedRecord.npreregno,\r\n                            ninstrumentcatcode: selectedRecord.ninstrumentcatcode.value,\r\n                            ninstrumentcode: selectedRecord.ninstrumentcode.value,\r\n                            dfromdate: formatInputDate(selectedRecord.dfromdate, false),\r\n                            dtodate: formatInputDate(selectedRecord.dtodate, false),\r\n                            stzfromdate: selectedRecord.ntzfromdate.label,\r\n                            stztodate: selectedRecord.ntztodate.label,\r\n                            ntzfromdate: selectedRecord.ntzfromdate.value,\r\n                            ntztodate: selectedRecord.ntztodate.value,\r\n                            ntransactiontestcode: selectedRecord.ntransactiontestcode\r\n\r\n                        },\r\n                        userinfo: this.props.Login.userInfo,\r\n                        nregtypecode: nregtypecode,\r\n                        nregsubtypecode: nregsubtypecode,\r\n                        ndesigntemplatemappingcode: ndesigntemplatemappingcode,\r\n                        ntransactiontestcode: this.props.Login.masterData.RESelectedTest ?\r\n                            this.props.Login.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\").toString() : \"\",\r\n                    }\r\n                }\r\n                else {\r\n                    inputData = {\r\n                        ResultUsedInstrument: {\r\n                            ntransactiontestcode: selectedRecord.ntransactiontestcode,\r\n                            npreregno: selectedRecord.npreregno,\r\n                            ninstrumentcatcode: selectedRecord.ninstrumentcatcode.value,\r\n                            ninstrumentcode: selectedRecord.ninstrumentcode.value,\r\n                            dfromdate: formatInputDate(selectedRecord.dfromdate, false),\r\n                            dtodate: formatInputDate(selectedRecord.dtodate, false),\r\n                            stzfromdate: selectedRecord.ntzfromdate.label,\r\n                            stztodate: selectedRecord.ntztodate.label,\r\n                            ntzfromdate: selectedRecord.ntzfromdate.value,\r\n                            ntztodate: selectedRecord.ntztodate.value\r\n                        },\r\n                        userinfo: this.props.Login.userInfo,\r\n                        nregtypecode: nregtypecode,\r\n                        nregsubtypecode: nregsubtypecode,\r\n                        ndesigntemplatemappingcode: ndesigntemplatemappingcode,\r\n                        transactiontestcode: this.props.Login.masterData.RESelectedTest ?\r\n                            this.props.Login.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\") : \"-1\",\r\n                    }\r\n                }\r\n                inputParam = {\r\n                    classUrl: classUrl,\r\n                    methodUrl: \"ResultUsedInstrument\",\r\n\r\n                    inputData: inputData, selectedId,\r\n                    isFileupload: false,\r\n                    activeTestKey: \"IDS_INSTRUMENT\",\r\n                    operation: this.props.Login.operation,\r\n                    displayName: this.props.Login.inputParam.displayName, saveType//postParam\r\n                }\r\n            }\r\n            if (this.props.Login.screenName === \"IDS_MATERIAL\") {\r\n                let inputData = [];\r\n                if (this.state.selectedRecord.nmaterialcode != \"\") {\r\n                    if (this.state.selectedRecord.nmaterialinventorycode != \"\") {\r\n                        if (parseFloat(this.state.selectedRecord.susedquantity) <= parseFloat(this.state.selectedRecord.savailablequantity)) {\r\n                            if (this.props.Login.operation === \"update\") {\r\n                                inputData = {\r\n                                    ResultUsedMaterial: {\r\n                                        nresultusedmaterialcode: selectedRecord.nresultusedmaterialcode,\r\n                                        ntransactiontestcode: selectedRecord.ntransactiontestcode,\r\n                                        npreregno: selectedRecord.npreregno,\r\n                                        nmaterialtypecode: selectedRecord.nmaterialtypecode.value,\r\n                                        nmaterialcategorycode: selectedRecord.nmaterialcategorycode.value,\r\n                                        nmaterialcode: selectedRecord.nmaterialcode.value,\r\n                                        ninventorycode: selectedRecord.nmaterialinventorycode.value,\r\n                                        nsectioncode: selectedRecord.nsectioncode,\r\n                                        jsondata: {\r\n                                            sarno: selectedRecord.sarno,\r\n                                            ssamplearno: selectedRecord.ssamplearno,\r\n                                            stestsynonym: selectedRecord.stestsynonym,\r\n                                            smaterialcatname: selectedRecord.nmaterialcatcode.label,\r\n                                            smaterialname: selectedRecord.nmaterialcode.label,\r\n                                            sinventoryid: selectedRecord.nmaterialinventorycode.label,\r\n                                            nqtyused: selectedRecord.susedquantity,\r\n                                            scarriergas: selectedRecord.scarriergas,\r\n                                            smobilephase: selectedRecord.smobilephase,\r\n                                            sremarks: selectedRecord.sremarks,\r\n                                            susername: this.props.Login.userInfo.susername,\r\n                                            nsectioncode: selectedRecord.nsectioncode,\r\n                                            ssectionname: selectedRecord.ssectionname,\r\n                                            ntestgroupmaterial:selectedRecord.ntestgroupmaterial,\r\n                                            ntestgrouptestcode:selectedRecord.ntestgroupmaterial == transactionStatus.YES ? \r\n                                            this.props.Login.masterData.RESelectedTest[0].ntestgrouptestcode :-1\r\n                                        }\r\n                                    },\r\n                                    MaterialInventoryTrans: {\r\n                                        nmaterialinventorycode: selectedRecord.nmaterialinventorycode.value,\r\n                                        nsectioncode: selectedRecord.nsectioncode,\r\n                                        jsondata: {\r\n                                            IDS_INVENTORYID: selectedRecord.nmaterialinventorycode.label,\r\n                                            nqtyused: selectedRecord.susedquantity,\r\n                                        }\r\n                                    },\r\n                                    userinfo: this.props.Login.userInfo,\r\n                                    nregtypecode: nregtypecode,\r\n                                    nregsubtypecode: nregsubtypecode,\r\n                                    ndesigntemplatemappingcode: ndesigntemplatemappingcode,\r\n                                    nresultusedmaterialcode: selectedRecord.nresultusedmaterialcode,\r\n                                    ntransactiontestcode: this.props.Login.masterData.RESelectedTest ?\r\n                                        this.props.Login.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\").toString() : \"\",\r\n                                }\r\n                            }\r\n                            else {\r\n                                inputData = {\r\n                                    ResultUsedMaterial: {\r\n                                        ntransactiontestcode: selectedRecord.ntransactiontestcode,\r\n                                        npreregno: selectedRecord.npreregno,\r\n                                        nmaterialtypecode: selectedRecord.nmaterialtypecode.value,\r\n                                        nmaterialcategorycode: selectedRecord.nmaterialcatcode.value,\r\n                                        nmaterialcode: selectedRecord.nmaterialcode.value,\r\n                                        ninventorycode: selectedRecord.nmaterialinventorycode.value,\r\n                                        nsectioncode: selectedRecord.nsectioncode,\r\n                                        jsondata: {\r\n                                            sarno: selectedRecord.sarno,\r\n                                            ssamplearno: selectedRecord.ssamplearno,\r\n                                            stestsynonym: selectedRecord.stestsynonym,\r\n                                            smaterialcatname: selectedRecord.nmaterialcatcode.label,\r\n                                            smaterialname: selectedRecord.nmaterialcode.label,\r\n                                            sinventoryid: selectedRecord.nmaterialinventorycode.label,\r\n                                            nqtyused: selectedRecord.susedquantity,\r\n                                            scarriergas: selectedRecord.scarriergas,\r\n                                            smobilephase: selectedRecord.smobilephase,\r\n                                            sremarks: selectedRecord.sremarks,\r\n                                            smaterialtypename: selectedRecord.nmaterialtypecode.label,\r\n                                            nsectioncode: selectedRecord.nsectioncode,\r\n                                            ntestgroupmaterial:selectedRecord.ntestgroupmaterial,\r\n                                            ssectionname: selectedRecord.ssectionname,\r\n                                            ntestgrouptestcode:selectedRecord.ntestgroupmaterial == transactionStatus.YES ? \r\n                                            this.props.Login.masterData.RESelectedTest[0].ntestgrouptestcode :-1\r\n                                        }\r\n                                    },\r\n                                    MaterialInventoryTrans: {\r\n                                        nmaterialinventorycode: selectedRecord.nmaterialinventorycode.value,\r\n                                        nsectioncode: selectedRecord.nsectioncode,\r\n                                        jsondata: {\r\n                                            nqtyused: selectedRecord.susedquantity,\r\n                                            IDS_INVENTORYID: selectedRecord.nmaterialinventorycode.label\r\n                                        }\r\n                                    },\r\n                                    userinfo: this.props.Login.userInfo,\r\n                                    nregtypecode: nregtypecode,\r\n                                    nregsubtypecode: nregsubtypecode,\r\n                                    ndesigntemplatemappingcode: ndesigntemplatemappingcode,\r\n                                    transactiontestcode: this.props.Login.masterData.RESelectedTest ?\r\n                                        this.props.Login.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\") : \"-1\",\r\n                                }\r\n                            }\r\n                            inputParam = {\r\n                                classUrl: classUrl,\r\n                                methodUrl: \"ResultUsedMaterial\",\r\n                                inputData: inputData, selectedId,\r\n                                isFileupload: false,\r\n                                activeTestKey: \"IDS_MATERIAL\",\r\n                                operation: this.props.Login.operation,\r\n                                displayName: this.props.Login.inputParam.displayName, saveType//postParam\r\n                            }\r\n                        } else {\r\n                            toast.warn(this.props.intl.formatMessage({ id: \"Quantity Not available\" }))\r\n                            return null;\r\n                        }\r\n\r\n\r\n                    } else {\r\n                        toast.warn(this.props.intl.formatMessage({ id: \"Select Material Inventory\" }))\r\n                        return null;\r\n                    }\r\n                } else {\r\n                    toast.warn(this.props.intl.formatMessage({ id: \"Select Material\" }))\r\n                    return null;\r\n                }\r\n            }\r\n            if (this.props.Login.screenName === \"IDS_TASK\") {\r\n                if ((selectedRecord.sanalysistime && selectedRecord.sanalysistime !== \"\")\r\n                    || (selectedRecord.smisctime && selectedRecord.smisctime !== \"\")\r\n                    || (selectedRecord.spreanalysistime && selectedRecord.spreanalysistime !== \"\")\r\n                    || (selectedRecord.spreparationtime && selectedRecord.spreparationtime !== \"\")\r\n                    || (selectedRecord.scomments && selectedRecord.scomments !== \"\")) {\r\n                    if (this.props.Login.operation === \"update\") {\r\n                        inputData = {\r\n                            ResultUsedTasks: {\r\n                                nresultusedtaskcode: selectedRecord.nresultusedtaskcode,\r\n                                jsondata: {\r\n                                    //ntransactiontestcode: parseInt(selectedRecord.ntransactiontestcode),\r\n                                    sarno: this.props.Login.masterData.RESelectedTest[0].sarno,\r\n                                    ssamplearno: this.props.Login.masterData.RESelectedTest[0].ssamplearno,\r\n                                    stestsynonym: selectedRecord.stestsynonym,\r\n                                    sanalysistime: selectedRecord.sanalysistime ? selectedRecord.sanalysistime : \"\",\r\n                                    sanalyst: this.props.Login.userInfo.susername,\r\n                                    smisctime: selectedRecord.smisctime ? selectedRecord.smisctime : \"\",\r\n                                    spreanalysistime: selectedRecord.spreanalysistime ? selectedRecord.spreanalysistime : \"\",\r\n                                    spreparationtime: selectedRecord.spreparationtime ? selectedRecord.spreparationtime : \"\",\r\n                                    staskprocedure: selectedRecord.staskprocedure ? selectedRecord.staskprocedure : \"\",\r\n                                    scomments: selectedRecord.scomments ? selectedRecord.scomments : \"\"\r\n                                }\r\n                            },\r\n                            userinfo: this.props.Login.userInfo,\r\n                            ntransactiontestcode: this.props.Login.masterData.RESelectedTest && this.props.Login.masterData.RESelectedTest.map(sample => sample.ntransactiontestcode).join(\",\"),\r\n                            nregtypecode: nregtypecode,\r\n                            nregsubtypecode: nregsubtypecode,\r\n                            ndesigntemplatemappingcode: ndesigntemplatemappingcode,\r\n                        }\r\n                    }\r\n                    else {\r\n                        let taskArry = [];\r\n                        this.props.Login.masterData.RESelectedTest &&\r\n                            this.props.Login.masterData.RESelectedTest.map(test =>\r\n\r\n                                taskArry.push({\r\n                                    //ntransactiontestcode: parseInt(selectedRecord.ntransactiontestcode),\r\n                                    ntransactiontestcode: parseInt(test.ntransactiontestcode),\r\n                                    npreregno: parseInt(test.npreregno),\r\n                                    // sanalysistime: selectedRecord.sanalysistime ? selectedRecord.sanalysistime : \"\",\r\n                                    // sanalyst: this.props.Login.userInfo.susername,\r\n                                    // smisctime: selectedRecord.smisctime ? selectedRecord.smisctime : \"\",\r\n                                    // spreanalysistime: selectedRecord.spreanalysistime ? selectedRecord.spreanalysistime : \"\",\r\n                                    // spreparationtime: selectedRecord.spreparationtime ? selectedRecord.spreparationtime : \"\",\r\n                                    // scomments: selectedRecord.scomments ? selectedRecord.scomments : \"\",\r\n                                    // npreregno: this.props.Login.masterData.RESelectedSample ? this.props.Login.masterData.RESelectedSample.map(preregno => preregno.npreregno).join(\",\").toString() : \"\",\r\n                                    jsondata: {\r\n                                        //ntransactiontestcode: parseInt(selectedRecord.ntransactiontestcode),\r\n                                        sarno: test.sarno,\r\n                                        ssamplearno: test.ssamplearno,\r\n                                        stestsynonym: test.stestsynonym,\r\n                                        sanalysistime: selectedRecord.sanalysistime ? selectedRecord.sanalysistime : \"\",\r\n                                        sanalyst: this.props.Login.userInfo.susername,\r\n                                        smisctime: selectedRecord.smisctime ? selectedRecord.smisctime : \"\",\r\n                                        spreanalysistime: selectedRecord.spreanalysistime ? selectedRecord.spreanalysistime : \"\",\r\n                                        spreparationtime: selectedRecord.spreparationtime ? selectedRecord.spreparationtime : \"\",\r\n                                        staskprocedure: selectedRecord.staskprocedure ? selectedRecord.staskprocedure : \"\",\r\n                                        scomments: selectedRecord.scomments ? selectedRecord.scomments : \"\"\r\n                                    }\r\n                                })\r\n                            )\r\n                        inputData = {\r\n                            ResultUsedTasks: taskArry,\r\n                            userinfo: this.props.Login.userInfo,\r\n                            ntransactiontestcode: this.props.Login.masterData.RESelectedTest && this.props.Login.masterData.RESelectedTest.map(sample => sample.ntransactiontestcode).join(\",\"),\r\n                            nregtypecode: nregtypecode,\r\n                            nregsubtypecode: nregsubtypecode,\r\n                            ndesigntemplatemappingcode: ndesigntemplatemappingcode\r\n                        }\r\n                    }\r\n                    inputParam = {\r\n                        classUrl: classUrl,\r\n                        methodUrl: \"ResultUsedTasks\",\r\n                        inputData: inputData, selectedId,\r\n                        activeTestKey: \"IDS_TASK\",\r\n                        isFileupload: false,\r\n                        operation: this.props.Login.operation,\r\n                        displayName: this.props.Login.inputParam.displayName, saveType//postParam\r\n                    }\r\n                } else {\r\n                    toast.info(this.props.intl.formatMessage({ id: \"IDS_ENTERTASKTIME\" }));\r\n                    return;\r\n                }\r\n            }\r\n            if (this.props.Login.screenName === \"IDS_PARAMETERCOMMENTS\") {\r\n                inputData = {\r\n                    ntransactiontestcode: selectedRecord.ntransactiontestcode,\r\n                    ntransactionresultcode: selectedRecord.ntransactionresultcode,\r\n                    sresultcomment: selectedRecord.sresultcomment,\r\n                    transactiontestcode: selectedRecord.transactiontestcode,\r\n                    userinfo: this.props.Login.userInfo,\r\n                    nregtypecode: nregtypecode,\r\n                    nregsubtypecode: nregsubtypecode,\r\n                    ncontrolcode: this.props.Login.ncontrolcode\r\n\r\n                }\r\n                // inputParam = {\r\n                //     classUrl: classUrl,\r\n                //     methodUrl: \"ParameterComments\",\r\n                //     inputData: inputData, selectedId,\r\n                //     isFileupload: false,\r\n                //     operation: this.props.Login.operation,\r\n                //     displayName: this.props.Login.inputParam.displayName, saveType//postParam\r\n                // }\r\n                this.updateParameterComments(inputData, this.props.Login.masterData, selectedRecord.ncontrolcode);\r\n                return;\r\n            }\r\n            if (this.props.Login.screenName === \"IDS_CHECKLISTRESULT\") {\r\n                let lstResultCheckList = [];\r\n                if (selectedRecord && selectedRecord.editedQB) {\r\n                    selectedRecord.editedQB.map(qbcode =>\r\n                        lstResultCheckList.push(selectedRecord[qbcode]));\r\n                    inputData = {\r\n                        ntransactiontestcode: selectedRecord.ntransactiontestcode.toString(),\r\n                        ntransactionresultcode: selectedRecord.ntransactionresultcode,\r\n                        transactiontestcode: selectedRecord.transactiontestcode,\r\n                        ResultCheckList: lstResultCheckList,\r\n                        userinfo: this.props.Login.userInfo,\r\n                        nregtypecode: nregtypecode,\r\n                        nregsubtypecode: nregsubtypecode\r\n                    }\r\n                    inputParam = {\r\n                        classUrl: classUrl,\r\n                        methodUrl: \"ResultEntryChecklist\",\r\n                        inputData: inputData, selectedId,\r\n                        isFileupload: false,\r\n                        operation: this.props.Login.operation,\r\n                        displayName: this.props.Login.inputParam.displayName, saveType//postParam\r\n                    }\r\n                }\r\n            }\r\n            const masterData = this.props.Login.masterData;\r\n            if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolcode)) {\r\n\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        loadEsign: true, screenData: { inputParam, masterData }, saveType\r\n                    }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n            else {\r\n\r\n                this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\r\n            }\r\n        }\r\n    }\r\n    gridfillingColumn(data) {\r\n        //  const tempArray = [];\r\n        const temparray = data && data.map((option) => {\r\n            return { \"idsName\": option[designProperties.LABEL][this.props.Login.userInfo.slanguagetypecode], \"dataField\": option[designProperties.VALUE], \"width\": \"200px\", \"columnSize\": \"3\" };\r\n        });\r\n        return temparray;\r\n    }\r\n    constructDesign(list) {\r\n\r\n        let newList = []\r\n        if (list.length > 0) {\r\n            list.map((i) => {\r\n                newList.push({ [designProperties.LABEL]: i, [designProperties.VALUE]: i })\r\n            })\r\n        }\r\n        return newList;\r\n    }\r\n\r\n    componentDidUpdate(previousProps) {\r\n        let { showTest, showSample, userRoleControlRights, controlMap, resultDataState, instrumentDataState,\r\n            materialDataState, taskDataState, documentDataState, resultChangeDataState, testCommentDataState,\r\n            historyDataState, sampleListColumns, subSampleListColumns, testListColumns,\r\n            SingleItem, sampleListMainField, subSampleListMainField, testListMainField,\r\n            SampleGridItem, SampleGridExpandableItem, sampleMoreField, subSampleMoreField,\r\n            testMoreField, selectedRecord, SampleType, RegistrationType, RegistrationSubType,\r\n            REFilterStatus, REJobStatus, Testvalues, ApprovalConfigVersion, DynamicSampleColumns,\r\n            DynamicSubSampleColumns, DynamicTestColumns, DynamicGridItem, DynamicGridMoreField,\r\n            validateFormulaMandyFields, skip, take, testskip, testtake, selectedFilter, stateDynamicDesign,\r\n            activeTabIndex, activeTabId, sampleChangeDataState,testSearchField,AdhocParamter,\r\n            Batchvalues,Worklistvalues,ConfigurationFilterValues } = this.state;\r\n        let bool = false;\r\n \r\n        if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\r\n            userRoleControlRights = [];\r\n            if (this.props.Login.userRoleControlRights) {\r\n                bool = true;\r\n                this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item =>\r\n                    userRoleControlRights.push(item.ncontrolcode))\r\n            }\r\n            controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode)\r\n        }\r\n        if (this.props.Login.masterData.DynamicDesign && this.props.Login.masterData.DynamicDesign !== previousProps.Login.masterData.DynamicDesign) {\r\n            const dynamicColumn = JSON.parse(this.props.Login.masterData.DynamicDesign.jsondata.value)\r\n            DynamicSampleColumns = dynamicColumn.samplelistitem ? dynamicColumn.samplelistitem : [];\r\n            DynamicSubSampleColumns = dynamicColumn.subsamplelistitem ? dynamicColumn.subsamplelistitem : [];\r\n            DynamicTestColumns = dynamicColumn.testlistitem ? dynamicColumn.testlistitem : []\r\n\r\n            DynamicGridItem = dynamicColumn.samplegriditem ? dynamicColumn.samplegriditem : [];\r\n            DynamicGridMoreField = dynamicColumn.samplegridmoreitem ? dynamicColumn.samplegridmoreitem : [];\r\n\r\n            SingleItem = dynamicColumn.sampledisplayfields ? dynamicColumn.sampledisplayfields : [];\r\n            // testMoreField = dynamicColumn.testlistmoreitems ? dynamicColumn.testlistmoreitems : [];\r\n            // testListColumns = dynamicColumn.testlistitem ? dynamicColumn.testlistitem : []\r\n            \r\n            testMoreField = dynamicColumn.testListFields.testlistmoreitems ? dynamicColumn.testListFields.testlistmoreitems: []; \r\n            testListColumns = dynamicColumn.testListFields.testlistitem ? dynamicColumn.testListFields.testlistitem : []; \r\n            testSearchField = dynamicColumn.testListFields.testsearchfields ? dynamicColumn.testListFields.testsearchfields : [];  \r\n            \r\n            this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nneedsubsample &&\r\n            DynamicSubSampleColumns.push({1:{'en-US': 'Specimen', 'ru-RU': 'Образец', 'tg-TG': 'Намуна'},\r\n            2:\"scomponentname\"});\r\n            \r\n            bool = true;\r\n        }\r\n        if (this.props.Login.masterData.RegistrationSubType &&\r\n            this.props.Login.masterData.RegistrationSubType !== previousProps.Login.masterData.RegistrationSubType) {\r\n            let dataState = {\r\n                skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\r\n                //, group: [{ field: `${this.props.Login.masterData.nneedsubsample ? 'ssamplearno' : 'sarno'}` }] \r\n            }\r\n            bool = true;\r\n            resultDataState = dataState;\r\n            instrumentDataState = dataState;\r\n            materialDataState = dataState;\r\n            taskDataState = dataState;\r\n            documentDataState = dataState;\r\n            resultChangeDataState = dataState;\r\n            historyDataState = dataState;\r\n            testCommentDataState = dataState;\r\n            sampleChangeDataState = dataState;\r\n        }\r\n        if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\r\n            bool = true;\r\n            selectedRecord = this.props.Login.selectedRecord;\r\n        }\r\n        if (this.props.Login.validateFormulaMandyFields !== previousProps.Login.validateFormulaMandyFields) {\r\n            bool = true;\r\n            validateFormulaMandyFields = this.props.Login.validateFormulaMandyFields;\r\n        }\r\n        if (this.props.Login.masterData !== previousProps.Login.masterData) {\r\n            bool = true;\r\n            SampleType = constructOptionList(this.props.Login.masterData.SampleType || [], \"nsampletypecode\", \"ssampletypename\", 'nsampletypecode', 'ascending', 'nsampletypecode', false);\r\n            RegistrationType = constructOptionList(this.props.Login.masterData.RegistrationType || [], \"nregtypecode\", \"sregtypename\", \"nsorter\", 'ascending', 'nregtypecode', false);\r\n            RegistrationSubType = constructOptionList(this.props.Login.masterData.RegistrationSubType || [], \"nregsubtypecode\", \"sregsubtypename\", \"nsorter\", 'ascending', 'nregsubtypecode', false);\r\n            REFilterStatus = constructOptionList(this.props.Login.masterData.REFilterStatus || [], \"ntransactionstatus\", \"sfilterstatus\", \"nsorter\", 'ascending', \"ntransactionstatus\", false);\r\n            REJobStatus = constructOptionList(this.props.Login.masterData.REJobStatus || [], 'njobstatuscode', 'sidsjobstatusname', 'ascending', 'njobstatuscode', false);\r\n            Testvalues = constructOptionList(this.props.Login.masterData.Testvalues || [], 'ntestcode', 'stestsynonym', 'ascending', 'ntestcode', false);\r\n            Batchvalues = constructOptionList(this.props.Login.masterData.Batchvalues || [], 'nbatchmastercode', 'sbatcharno', 'ascending', 'nbatchmastercode', false);\r\n            Worklistvalues = constructOptionList(this.props.Login.masterData.Worklistvalues || [], 'nworklistcode', 'sworklistno', 'ascending', 'nworklistcode', false);\r\n            ConfigurationFilterValues = constructOptionList(this.props.Login.masterData.ConfigurationFilterValues || [], 'nconfigfiltercode', 'sfiltername', 'ascending', 'nconfigfiltercode', false);\r\n            ApprovalConfigVersion = constructOptionList(this.props.Login.masterData.ApprovalConfigVersion || [], 'napprovalconfigversioncode', 'sversionname',\r\n                'ascending', 'napprovalconfigversioncode', false);\r\n            // AdhocParamter = constructOptionList(this.props.Login.masterData.AdhocParamter || [], 'ntestparametercode', 'sparametersynonym',\r\n            //     'ascending', 'ntestparametercode', false);\r\n            skip = this.props.Login.skip === undefined ? skip : this.props.Login.skip\r\n            take = this.props.Login.take || take\r\n            testskip = this.props.Login.testskip === undefined ? testskip : this.props.Login.testskip\r\n            testtake = this.props.Login.testtake || testtake\r\n            if (this.props.Login.resultDataState && this.props.Login.resultDataState !== previousProps.Login.resultDataState) {\r\n                resultDataState = this.props.Login.resultDataState;\r\n            }\r\n            if (this.props.Login.instrumentDataState && this.props.Login.instrumentDataState !== previousProps.Login.instrumentDataState) {\r\n                instrumentDataState = this.props.Login.instrumentDataState;\r\n            }\r\n            if (this.props.Login.taskDataState && this.props.Login.taskDataState !== previousProps.Login.taskDataState) {\r\n                taskDataState = this.props.Login.taskDataState;\r\n            }\r\n            if (this.props.Login.resultChangeDataState && this.props.Login.resultChangeDataState !== previousProps.Login.resultChangeDataState) {\r\n                resultChangeDataState = this.props.Login.resultChangeDataState;\r\n            }\r\n            if (this.props.Login.historyDataState && this.props.Login.historyDataState !== previousProps.Login.historyDataState) {\r\n                historyDataState = this.props.Login.historyDataState;\r\n            }\r\n            if (this.props.Login.testCommentDataState && this.props.Login.testCommentDataState !== previousProps.Login.testCommentDataState) {\r\n                testCommentDataState = this.props.Login.testCommentDataState;\r\n            }\r\n            if (this.props.Login.sampleChangeDataState && this.props.Login.sampleChangeDataState !== previousProps.Login.sampleChangeDataState) {\r\n                sampleChangeDataState = this.props.Login.sampleChangeDataState;\r\n            }\r\n\r\n\r\n            let selectFilterStatus = { ntransactionstatus: transactionStatus.PARTIAL, sfilterstatus: this.props.intl.formatMessage({ id: \"IDS_PARTIAL\" }), scolorhexcode: \"#800000\" }\r\n            const selectedFilters = this.props.Login.masterData.REFilterStatus || [];\r\n\r\n            const selectedFiltersNew = JSON.parse(JSON.stringify(selectedFilters));\r\n\r\n            const index = selectedFiltersNew.findIndex(item => item.ntransactionstatus === transactionStatus.PARTIAL)\r\n            if (selectedFiltersNew.length > 0 && index === -1) {\r\n                selectedFiltersNew.push(selectFilterStatus)\r\n            }\r\n            selectedFilter = selectedFiltersNew;\r\n            // const updateInfo = {\r\n            //     typeName: DEFAULT_RETURN,\r\n            //     data: {masterData: this.props.Login.masterData,showTest,showSample }\r\n            // }\r\n            // this.props.updateStore(updateInfo);\r\n            SampleType = SampleType.get(\"OptionList\")\r\n            RegistrationType = RegistrationType.get(\"OptionList\")\r\n            RegistrationSubType = RegistrationSubType.get(\"OptionList\")\r\n            REFilterStatus = REFilterStatus.get(\"OptionList\")\r\n            REJobStatus = REJobStatus.get(\"OptionList\")\r\n            Testvalues = Testvalues.get(\"OptionList\")\r\n            Batchvalues = Batchvalues.get(\"OptionList\")\r\n            Worklistvalues = Worklistvalues.get(\"OptionList\")\r\n            ConfigurationFilterValues = ConfigurationFilterValues.get(\"OptionList\")\r\n            ApprovalConfigVersion = ApprovalConfigVersion.get(\"OptionList\")\r\n           // AdhocParamter=AdhocParamter.get(\"OptionList\")\r\n        }\r\n\r\n        if (this.props.Login.activeTabIndex !== previousProps.Login.activeTabIndex) {\r\n            activeTabIndex = this.props.Login.activeTabIndex;\r\n            activeTabId = this.props.Login.activeTabId;\r\n            bool = true;\r\n        }\r\n\r\n        if (this.props.Login.masterData.DesignTemplateMapping !== previousProps.Login.masterData.DesignTemplateMapping) {\r\n\r\n            const DesignTemplateMappingMap = constructOptionList(this.props.Login.masterData.DesignTemplateMapping || [], \"ndesigntemplatemappingcode\",\r\n                \"sregtemplatename\", undefined, undefined, false);\r\n\r\n            stateDynamicDesign = DesignTemplateMappingMap.get(\"OptionList\")\r\n        }\r\n\r\n        if (bool) {\r\n            this.setState({\r\n                showTest, showSample, userRoleControlRights, controlMap, resultDataState, instrumentDataState,\r\n                materialDataState, taskDataState, documentDataState, resultChangeDataState, testCommentDataState,\r\n                historyDataState, sampleListColumns, subSampleListColumns, testListColumns,\r\n                SingleItem, sampleListMainField, subSampleListMainField, testListMainField,\r\n                SampleGridItem, SampleGridExpandableItem, sampleMoreField, subSampleMoreField,\r\n                testMoreField, selectedRecord,\r\n                SampleType,\r\n                RegistrationType,\r\n                RegistrationSubType,\r\n                REFilterStatus,\r\n                REJobStatus,\r\n                Testvalues,\r\n                Batchvalues,\r\n                Worklistvalues,\r\n                ConfigurationFilterValues,\r\n                ApprovalConfigVersion,\r\n                validateFormulaMandyFields,\r\n                skip, take, testskip, testtake, selectedFilter,\r\n                DynamicSampleColumns, DynamicSubSampleColumns, DynamicTestColumns,\r\n                DynamicGridItem, DynamicGridMoreField, stateDynamicDesign,\r\n                 activeTabIndex, activeTabId, sampleChangeDataState,testSearchField,AdhocParamter\r\n            })\r\n        }\r\n\r\n        if (this.props.Login.meanTestParameterList !== previousProps.Login.meanTestParameterList) {\r\n            this.setState({ meanTestParameterList: this.props.Login.meanTestParameterList });\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                masterData: [], inputParam: undefined\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    static getDerivedStateFromProps(props, state) {\r\n        if (props.Login.masterStatus !== \"\") {\r\n            if (props.Login.errorCode === 417 || props.Login.errorCode === 409) {\r\n                toast.warn(props.Login.masterStatus);\r\n                props.Login.masterStatus = \"\";\r\n            }\r\n        }\r\n        if (props.Login.error !== state.error) {\r\n            toast.error(props.Login.error)\r\n            props.Login.error = \"\";\r\n        }\r\n        // if (props.Login.selectedRecord !== state.selectedRecord) {\r\n        //     return ({ selectedRecord: { ...state.selectedRecord, ...props.Login.selectedRecord } });\r\n        // }\r\n        return null;\r\n    }\r\n}\r\n\r\n\r\nconst mapStatetoProps = (state) => {\r\n    return {\r\n        Login: state.Login\r\n    }\r\n}\r\n\r\nexport default connect(mapStatetoProps, {\r\n    crudMaster, updateStore, getsubSampleREDetail, getTestREDetail, getTestChildTabREDetail, resultGetModule,\r\n    completeTest, testMethodSourceEdit, addREInstrument, addREMaterial, deleteInstrumentRecord, fetchInstrumentRecord, deleteTaskRecord, fetchTaskRecord,\r\n    parameterRecord, checkListRecord, onSaveCheckList, defaultTest, getFormula, getRERegistrationType, getRERegistrationSubType, fetchMaterialRecord,\r\n    getREApprovalConfigVersion, getResultEntryDetails, calculateFormula, getREFilterStatus, getREFilterTestData, getREJobStatus, getSampleChildTabREDetail,\r\n    viewAttachment, getAttachmentCombo, deleteAttachment, resultImportFile, validateEsignCredentialComplete, getCommentsCombo, updateTestMethodSource,\r\n    filterTransactionList, validateEsignCredential, updateParameterComments, previewSampleReport, getMeanCalculationTestParameter, \r\n    getREMaterialCategoryByType, getREMaterialByCategory, getREMaterialInvertoryByMaterial, getAvailableMaterialQuantity, testStart,\r\n     getSubSampleChildTabDetail, getSampleChildTabDetail, getREFilterTemplate, getAverageResult,getREMaterialComboGet//,deleteResultUsedMaterial\r\n     ,getPredefinedData,getELNTestValidation\r\n     ,getConfigurationFilter,getTestBasedBatchWorklist,addREAdhocParamter,createAdhocParamter,enforceResult\r\n\r\n})(injectIntl(ResultEntry));"]},"metadata":{},"sourceType":"module"}