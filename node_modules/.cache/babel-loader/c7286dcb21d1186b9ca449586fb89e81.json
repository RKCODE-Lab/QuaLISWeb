{"ast":null,"code":"var _jsxFileName = \"E:\\\\WorkingFolder\\\\React_Postgres\\\\ALPD\\\\branches\\\\SOURCE-513-PROD\\\\QuaLISWeb\\\\src\\\\pages\\\\dashboardtypes\\\\DashBoardDesignConfig.jsx\";\nimport React from 'react';\nimport { Row, Col } from 'react-bootstrap';\nimport { injectIntl } from 'react-intl';\nimport { process } from '@progress/kendo-data-query';\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\nimport { toast } from 'react-toastify';\nimport Esign from '../audittrail/Esign';\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\nimport CustomTabs from '../../components/custom-tabs/custom-tabs.component';\nimport { designComponents, transactionStatus } from '../../components/Enumeration';\nimport { showEsign, formatInputDate, sortData } from '../../components/CommonScript';\nimport AddDesign from '../../components/add-design/add-design.component';\nimport ParameterMapping from '../../components/add-design/parameter-mapping.component';\nimport { intl } from '../../components/App';\nimport DashBoardDynamicControls from './DashBoardDynamicControls';\nimport DesignParameterTab from './DesignParameterTab';\nimport ParameterMappingTab from './ParameterMappingTab';\nimport DefaultValueTab from './DefaultValueTab'; //import AddDesign from '../dashboardtypes/AddDesign';\n\nclass DashBoardDesignConfig extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.dataStateChange = event => {\n      this.setState({\n        dataResult: process(this.props.masterData[\"selectedDesignConfig\"], event.data),\n        dataState: event.data\n      });\n    };\n\n    this.closeModal = () => {\n      let loadEsign = this.props.loadEsign;\n      let openChildModal = this.props.openChildModal;\n      let selectedRecord = this.props.selectedRecord;\n\n      if (this.props.loadEsign) {\n        if (this.props.operation === \"delete\") {\n          loadEsign = false;\n          openChildModal = false;\n          selectedRecord = {};\n        } else {\n          loadEsign = false;\n        }\n      } else {\n        openChildModal = false;\n        selectedRecord = {};\n      }\n\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          openChildModal,\n          loadEsign,\n          selectedRecord,\n          selectedId: null,\n          gridData: {},\n          addDesignParam: {}\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onTabChange = tabProps => {\n      const screenName = tabProps.screenName;\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          screenName\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.tabDetail = () => {\n      const tabMap = new Map();\n      tabMap.set(\"IDS_DESIGNPARAMETERS\", /*#__PURE__*/React.createElement(DesignParameterTab, {\n        masterData: this.props.masterData,\n        dataResult: sortData(this.props.masterData[\"selectedDesignConfig\"] || [], \"ascending\", \"ndashboarddesigncode\"),\n        dataState: {\n          skip: 0,\n          take: this.props.masterData[\"selectedDesignConfig\"] ? this.props.masterData[\"selectedDesignConfig\"].length : 10\n        } // dataState={this.state.dataState}\n        //dataStateChange={this.dataStateChange}\n        ,\n        extractedColumnList: this.gridColumnList,\n        controlMap: this.props.controlMap,\n        userRoleControlRights: this.props.userRoleControlRights,\n        inputParam: this.props.inputParam,\n        userInfo: this.props.userInfo //selectedId={this.props.selectedId}\n        ,\n        getAddDashboardDesign: this.props.getAddDashboardDesign,\n        name: \"IDS_DESIGNPARAMETERS\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 291,\n          columnNumber: 13\n        }\n      }));\n      tabMap.set(\"IDS_PARAMETERMAPPING\", /*#__PURE__*/React.createElement(ParameterMappingTab, {\n        masterData: this.props.masterData,\n        dataResult: this.props.masterData[\"DashBoardParameterMapping\"] || [],\n        dataState: {\n          skip: 0,\n          take: this.props.masterData[\"DashBoardParameterMapping\"] ? this.props.masterData[\"DashBoardParameterMapping\"].length : 0\n        } // dataState={this.state.dataState}\n        // dataStateChange={this.dataStateChange}\n        ,\n        extractedColumnList: this.mappingGridFieldList,\n        controlMap: this.props.controlMap,\n        userRoleControlRights: this.props.userRoleControlRights,\n        inputParam: this.props.inputParam,\n        userInfo: this.props.userInfo // selectedId={this.props.selectedId} \n        ,\n        getDashBoardParameterMappingComboService: this.props.getDashBoardParameterMappingComboService,\n        name: \"IDS_PARAMETERMAPPING\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 311,\n          columnNumber: 13\n        }\n      }));\n      tabMap.set(\"IDS_DEFAULTVALUE\", /*#__PURE__*/React.createElement(DefaultValueTab, {\n        masterData: this.props.masterData // dataResult={this.state[\"dashBoardDefaultValue\"] || []}\n        // dataState={{skip:0, take: this.state[\"dashBoardDefaultValue\"] \n        //     ? this.state[\"dashBoardDefaultValue\"].length:0}}     \n        ,\n        dataResult: sortData(this.props.masterData[\"DashboardDesignDefaultList\"] || [], \"ascending\", \"ndashboarddesigncode\"),\n        dataState: {\n          skip: 0,\n          take: this.props.masterData[\"DashboardDesignDefaultList\"] ? this.props.masterData[\"DashboardDesignDefaultList\"].length : 0\n        } // dataState={this.state.dataState}\n        ,\n        extractedColumnList: this.defaultValueGridFieldList,\n        controlMap: this.props.controlMap,\n        userRoleControlRights: this.props.userRoleControlRights,\n        inputParam: this.props.inputParam,\n        userInfo: this.props.userInfo //  selectedId={this.props.selectedId}  \n        ,\n        checkParametersAvailableForDefaultValue: this.props.checkParametersAvailableForDefaultValue,\n        name: \"IDS_DEFAULTVALUE\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 328,\n          columnNumber: 13\n        }\n      }));\n      return tabMap;\n    };\n\n    this.bindActionParameter = (rowItem, event) => {\n      const gridMappingParam = this.state.mappingGridData;\n\n      if (event.target.checked) {\n        gridMappingParam.forEach(item => {\n          if (item.nchilddashboarddesigncode === rowItem.selectedRecord.nchilddashboarddesigncode) {\n            if (item.nparentdashboarddesigncode === rowItem.selectedRecord.nparentdashboarddesigncode) {\n              return item.nisactionparent = transactionStatus.YES;\n            } else {\n              return item.nisactionparent = transactionStatus.NO;\n            }\n          }\n        });\n      } else {\n        const index = gridMappingParam.findIndex(item => item.nchilddashboarddesigncode === rowItem.selectedRecord.nchilddashboarddesigncode && item.nparentdashboarddesigncode === rowItem.selectedRecord.nparentdashboarddesigncode);\n        gridMappingParam[index][\"nisactionparent\"] = transactionStatus.NO;\n      }\n\n      this.setState({\n        mappingGridData: gridMappingParam\n      });\n    };\n\n    this.unbindMappingParametersFromDataGrid = selectedItem => {\n      const addMappingParamNew = this.state.addMappingParam.filter(item => {\n        if (typeof item.nchilddashboarddesigncode === \"number\") {\n          if (item.nchilddashboarddesigncode === selectedItem.nchilddashboarddesigncode) {\n            return item.nparentdashboarddesigncode !== selectedItem.nparentdashboarddesigncode;\n          } else return item;\n        } else {\n          if (item.nchilddashboarddesigncode.value === selectedItem.nchilddashboarddesigncode) {\n            return item.nparentdashboarddesigncode.value !== selectedItem.nparentdashboarddesigncode;\n          } else return item;\n        }\n      });\n      const mappingGridDataNew = this.state.mappingGridData.filter(item => {\n        if (typeof item.nchilddashboarddesigncode === \"number\") {\n          if (item.nchilddashboarddesigncode === selectedItem.nchilddashboarddesigncode) {\n            return item.nparentdashboarddesigncode !== selectedItem.nparentdashboarddesigncode;\n          } else return item;\n        } else {\n          if (item.nchilddashboarddesigncode.value === selectedItem.nchilddashboarddesigncode) {\n            return item.nparentdashboarddesigncode.value !== selectedItem.nparentdashboarddesigncode;\n          } else return item;\n        }\n      });\n      this.setState({\n        addMappingParam: addMappingParamNew,\n        mappingGridData: mappingGridDataNew\n      });\n    };\n\n    this.bindMappingParametersToDataGrid = selectedRecord => {\n      if (selectedRecord[\"sfieldname\"] && selectedRecord[\"nparentdashboarddesigncode\"] && selectedRecord[\"nchilddashboarddesigncode\"]) {\n        if (selectedRecord && selectedRecord.nparentdashboarddesigncode !== undefined) {\n          let copySelected = { ...selectedRecord\n          };\n          const addMappingParam = this.state.addMappingParam;\n          const index = addMappingParam.findIndex(item => item.nparentdashboarddesigncode === copySelected.nparentdashboarddesigncode.value && item.nchilddashboarddesigncode === copySelected.nchilddashboarddesigncode.value && item.sfieldname === copySelected.sfieldname.value);\n\n          if (index === -1) {\n            addMappingParam.push(copySelected);\n            const mappingGridData = this.state.mappingGridData;\n            ;\n            mappingGridData.push({\n              nparentdashboarddesigncode: copySelected.nparentdashboarddesigncode.value,\n              nchilddashboarddesigncode: copySelected.nchilddashboarddesigncode.value,\n              sparentparametername: copySelected.nparentdashboarddesigncode.label,\n              schildparametername: copySelected.nchilddashboarddesigncode.label,\n              sfieldname: copySelected.sfieldname.value,\n              nactionparameter: transactionStatus.NO\n            });\n            this.setState({\n              addMappingParam,\n              //actionGridData,\n              selectedRecord: {\n                // nactionreportdesigncode:{label:\"\", value:-1},\n                nparentdashboarddesigncode: {\n                  label: \"\",\n                  value: -1\n                },\n                sfieldname: {\n                  label: \"\",\n                  value: -1\n                },\n                nchilddashboarddesigncode: {\n                  label: \"\",\n                  value: -1\n                }\n              },\n              mappingGridData\n            });\n          } else {\n            toast.warn(this.props.intl.formatMessage({\n              id: \"IDS_DUPLICATEMAPPING\"\n            }));\n            this.setState({\n              selectedRecord: {\n                nparentdashboarddesigncode: {\n                  label: \"\",\n                  value: -1\n                },\n                sfieldname: {\n                  label: \"\",\n                  value: -1\n                },\n                nchilddashboarddesigncode: {\n                  label: \"\",\n                  value: -1\n                }\n              }\n            });\n          }\n        }\n      } else {\n        //toast.warn(this.props.intl.formatMessage({id:\"IDS_FILLMANDATORY\"}));\n        if (selectedRecord[\"nchilddashboarddesigncode\"] === undefined || selectedRecord[\"nchilddashboarddesigncode\"].length === 0) {\n          toast.info(`${this.props.intl.formatMessage({\n            id: \"IDS_ENTER\"\n          })} ${this.props.intl.formatMessage({\n            id: \"IDS_PARAMETER\"\n          })}`);\n        } else if (selectedRecord[\"sfieldname\"] === undefined || selectedRecord[\"sfieldname\"].length === 0) {\n          toast.info(`${this.props.intl.formatMessage({\n            id: \"IDS_ENTER\"\n          })} ${this.props.intl.formatMessage({\n            id: \"IDS_FIELDNAME\"\n          })}`);\n        } else if (selectedRecord[\"nparentdashboarddesigncode\"] === undefined || selectedRecord[\"nparentdashboarddesigncode\"].length === 0) {\n          toast.info(`${this.props.intl.formatMessage({\n            id: \"IDS_ENTER\"\n          })} ${this.props.intl.formatMessage({\n            id: \"IDS_PARENTPARAMETER\"\n          })}`);\n        }\n      }\n    };\n\n    this.removeParametersInDataGrid = selectedItem => {\n      const addDesignParamNew = this.state.addDesignParam.filter(item => item.sfieldname !== selectedItem.sfieldname);\n      const gridDataNew = this.state.gridData.filter(item => item.sfieldname !== selectedItem.sfieldname);\n      this.setState({\n        addDesignParam: addDesignParamNew,\n        gridData: gridDataNew\n      });\n    };\n\n    this.addParametersInDataGrid = selectedRecord => {\n      // if (this.state.addDesignParam.length === this.props.sqlQueryForParams.length)\n      // {   \n      //     toast.warn(\"You cannot add more than Dashboard Parameters count\");\n      // }\n      // if  {\n      let validData = false;\n\n      if (selectedRecord[\"sdisplayname\"] && selectedRecord[\"sdisplayname\"].trim().length !== 0 && selectedRecord[\"sfieldname\"] && selectedRecord[\"ndesigncomponentcode\"]) {\n        validData = true;\n\n        if (selectedRecord[\"ndesigncomponentcode\"].value === designComponents.COMBOBOX) {\n          if (selectedRecord[\"nsqlquerycode\"] && selectedRecord[\"nsqlquerycode\"].length !== 0) {\n            validData = true;\n          } else {\n            validData = false;\n          }\n        }\n\n        if (selectedRecord[\"ndesigncomponentcode\"].value === designComponents.DATEPICKER) {\n          if (selectedRecord[\"ndays\"] && selectedRecord[\"ndays\"].length !== 0) {\n            validData = true;\n          } else {\n            validData = false;\n          }\n        }\n      }\n\n      if (validData) {\n        if (selectedRecord && selectedRecord.sfieldname !== undefined) {\n          const check = this.state.gridData.filter(item => item.sfieldname === selectedRecord.sfieldname.label);\n\n          if (check && check.length > 0) {\n            toast.warn(intl.formatMessage({\n              id: \"IDS_PARAMETERALREADYEXIST\"\n            }));\n            return;\n          }\n\n          let copySelected = { ...selectedRecord\n          };\n          let addDesignParam = this.state.addDesignParam || [];\n          addDesignParam.push(copySelected);\n          const gridData = this.state.gridData;\n          ;\n          gridData.push({\n            sfieldname: copySelected.sfieldname.label,\n            sdisplayname: copySelected.sdisplayname,\n            sdesigncomponentname: copySelected.ndesigncomponentcode.label,\n            ndesigncomponentcode: copySelected.ndesigncomponentcode.value,\n            ndays: selectedRecord[\"ndesigncomponentcode\"].value === designComponents.DATEPICKER ? copySelected.ndays : 0\n          });\n          this.setState({\n            addDesignParam,\n            selectedRecord: {\n              ndays: \"\",\n              // nsqlquerycode: { label: \"\", value: -1 },\n              //  sfieldname: { label: \"\", value: \"\" },\n              sdisplayname: \"\" //  ndesigncomponentcode: { label: \"\", value: -1 }\n\n            },\n            gridData: gridData\n          });\n        }\n      } else {\n        if (selectedRecord[\"sfieldname\"] === undefined || selectedRecord[\"sfieldname\"].label === \"\") {\n          toast.info(`${this.props.intl.formatMessage({\n            id: \"IDS_ENTER\"\n          })} ${this.props.intl.formatMessage({\n            id: \"IDS_PARAMETERS\"\n          })}`);\n        } else if (selectedRecord[\"sdisplayname\"] === undefined || selectedRecord[\"sdisplayname\"] === \"\") {\n          toast.info(`${this.props.intl.formatMessage({\n            id: \"IDS_ENTER\"\n          })} ${this.props.intl.formatMessage({\n            id: \"IDS_DISPLAYNAME\"\n          })}`);\n        } else if (selectedRecord[\"ndesigncomponentcode\"] === undefined || selectedRecord[\"ndesigncomponentcode\"].value === 0) {\n          toast.info(`${this.props.intl.formatMessage({\n            id: \"IDS_ENTER\"\n          })} ${this.props.intl.formatMessage({\n            id: \"IDS_INPUTTYPE\"\n          })}`);\n        } else {\n          if (selectedRecord[\"ndesigncomponentcode\"].value === designComponents.COMBOBOX) {\n            if (selectedRecord[\"nsqlquerycode\"] === undefined || selectedRecord[\"nsqlquerycode\"].length === 0) {\n              toast.info(`${this.props.intl.formatMessage({\n                id: \"IDS_ENTER\"\n              })} ${this.props.intl.formatMessage({\n                id: \"IDS_EXISTINGLINKTABLE\"\n              })}`);\n            }\n          } else if (selectedRecord[\"ndesigncomponentcode\"].value === designComponents.DATEPICKER) {\n            if (selectedRecord[\"ndays\"] === undefined || selectedRecord[\"ndays\"].length === 0) {\n              toast.info(`${this.props.intl.formatMessage({\n                id: \"IDS_ENTER\"\n              })} ${this.props.intl.formatMessage({\n                id: \"IDS_DAYS\"\n              })}`);\n            }\n          }\n        }\n      } // }\n\n    };\n\n    this.handleChangeDesign = (value, valueParam) => {\n      if (value !== null) {\n        const selectedRecord = this.state.selectedRecord || {};\n        selectedRecord[valueParam] = value;\n        this.setState({\n          selectedRecord\n        });\n      }\n    };\n\n    this.onInputOnChangeDesign = event => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (event.target.type === 'checkbox') {\n        selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\n      } else {\n        selectedRecord[event.target.name] = event.target.value;\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onComboChange = (comboData, fieldName) => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (fieldName === \"nchilddashboarddesigncode\") {\n        selectedRecord[fieldName] = comboData;\n        const sqlquery = comboData.item.ssqlquery;\n        const param = [];\n        const param1 = [];\n        let query = sqlquery;\n\n        while (query.indexOf(\"<@\") !== -1 || query.indexOf(\"<#\") !== -1) {\n          let index1 = query.indexOf(\"<@\");\n          let index2 = query.indexOf(\"@>\");\n          let check = false;\n\n          if (query.indexOf(\"<@\") !== -1) {\n            index1 = query.indexOf(\"<@\");\n            index2 = query.indexOf(\"@>\");\n            check = true;\n          } else if (query.indexOf(\"<#\") !== -1) {\n            index1 = query.indexOf(\"<#\");\n            index2 = query.indexOf(\"#>\");\n          }\n\n          const parameter = query.substring(index1 + 2, index2);\n\n          if (!param1.includes(parameter)) {\n            param.push({\n              label: parameter,\n              value: parameter\n            });\n            param1.push(parameter);\n          }\n\n          if (check) {\n            query = query.replace(\"<@\", \"\").replace(\"@>\", \"\");\n          } else {\n            query = query.replace(\"<#\", \"\").replace(\"#>\", \"\");\n          }\n        }\n\n        this.setState({\n          selectedRecord,\n          optionalParameterList: param\n        }); // selectedRecord[fieldName] = comboData;\n        // const sqlquery = comboData.item.ssqlquery;\n        // let firstIndex = sqlquery.indexOf(\"P$\");\n        // const lastIndex = sqlquery.lastIndexOf(\"P$\");\n        // const param = [];\n        // let first = sqlquery.indexOf(\"P$\");\n        // let endFirst = sqlquery.indexOf(\"$P\");\n        // do {\n        //     let second = sqlquery.indexOf(\"P$\", first + 1);\n        //     let endSecond = sqlquery.indexOf(\"$P\", endFirst + 1);\n        //     const parameter = sqlquery.substring(first + 2, endFirst);\n        //     param.push({ label: parameter, value: parameter });\n        //     first = second;\n        //     endFirst = endSecond;\n        //     firstIndex = second;\n        // }\n        // while (firstIndex === lastIndex)\n        // this.setState({ selectedRecord, optionalParameterList: param });\n      } else {\n        selectedRecord[fieldName] = comboData;\n        this.setState({\n          selectedRecord\n        });\n      }\n    };\n\n    this.onNumericInputOnChange = (value, name, item) => {\n      const selectedRecord = this.state.selectedRecord || {};\n      selectedRecord[name] = value;\n      const inputData = {\n        dashboarddesignconfig: item,\n        inputfielddata: { ...this.props.inputFieldData,\n          [name]: value,\n          [name.concat(\"_componentcode\")]: item.ndesigncomponentcode,\n          [name.concat(\"_componentname\")]: item.sdesigncomponentname\n        },\n        parentcode: value.toString(),\n        parentid: item.ndashboarddesigncode,\n        userinfo: this.props.userInfo,\n        ndashboardtypecode: this.props.masterData.selectedDashBoardTypes.ndashboardtypecode\n      };\n      const inputParam = {\n        viewDashBoardDesignConfigList: this.props.masterData.viewDashBoardDesignConfigList,\n        selectedRecord,\n        inputData\n      };\n      this.props.getReportViewChildDataListForDashBoard(inputParam);\n    };\n\n    this.onInputOnChange = (event, item) => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (event.target.type === 'checkbox') {\n        selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\n      } else {\n        selectedRecord[event.target.name] = event.target.value;\n      }\n\n      const inputData = {\n        dashboarddesignconfig: item,\n        inputfielddata: { ...this.props.Login.inputFieldData,\n          [event.target.name]: selectedRecord[event.target.name],\n          [event.target.name.concat(\"_componentcode\")]: item.ndesigncomponentcode,\n          [event.target.name.concat(\"_componentname\")]: item.sdesigncomponentname\n        },\n        parentcode: selectedRecord[event.target.name].toString(),\n        parentid: item.ndashboarddesigncode,\n        userinfo: this.props.Login.userInfo,\n        ndashboardtypecode: this.props.Login.masterData.selectedDashBoardTypes.ndashboardtypecode\n      };\n      const inputParam = {\n        viewDashBoardDesignConfigList: this.props.Login.masterData.viewDashBoardDesignConfigList,\n        selectedRecord,\n        inputData\n      };\n      this.props.getReportViewChildDataListForDashBoard(inputParam);\n    };\n\n    this.handleDateChange = (dateName, dateValue, item) => {\n      const {\n        selectedRecord\n      } = this.state;\n      selectedRecord[dateName] = dateValue;\n      const inputData = {\n        dashboarddesignconfig: item,\n        inputfielddata: { ...this.props.inputFieldData,\n          [dateName]: formatInputDate(dateValue, true),\n          [dateName.concat(\"_componentcode\")]: item.ndesigncomponentcode,\n          [dateName.concat(\"_componentname\")]: item.sdesigncomponentname\n        },\n        parentcode: formatInputDate(dateValue, true),\n        parentid: item.ndashboarddesigncode,\n        userinfo: this.props.userInfo,\n        ndashboardtypecode: this.props.masterData.selectedDashBoardTypes.ndashboardtypecode\n      };\n      const inputParam = {\n        viewDashBoardDesignConfigList: this.props.masterData.viewDashBoardDesignConfigList,\n        selectedRecord,\n        inputData\n      };\n      this.props.getReportViewChildDataListForDashBoard(inputParam);\n    };\n\n    this.onInputOnChangeDefault = (event, item) => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (event.target.type === 'checkbox') {\n        selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\n      } else {\n        selectedRecord[event.target.name] = event.target.value;\n      }\n\n      const inputData = {\n        dashboarddesignconfig: item,\n        inputfielddata: { ...this.props.inputFieldData,\n          [event.target.name]: selectedRecord[event.target.name],\n          [event.target.name.concat(\"_componentcode\")]: item.ndesigncomponentcode,\n          [event.target.name.concat(\"_componentname\")]: item.sdesigncomponentname\n        },\n        parentcode: selectedRecord[event.target.name].toString(),\n        parentid: item.ndashboarddesigncode,\n        userinfo: this.props.userInfo,\n        ndashboardtypecode: this.props.masterData.selectedDashBoardTypes.ndashboardtypecode\n      };\n      const inputParam = {\n        viewDashBoardDesignConfigList: this.props.masterData.viewDashBoardDesignConfigList,\n        selectedRecord,\n        inputData\n      };\n      this.props.getReportViewChildDataListForDashBoard(inputParam);\n    };\n\n    this.onComboChangeDefaultValue = (comboData, fieldName, item) => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (comboData !== null) {\n        selectedRecord[fieldName] = comboData;\n        const inputData = {\n          dashboarddesignconfig: item,\n          inputfielddata: { ...this.props.inputFieldData,\n            [fieldName]: comboData.value,\n            [fieldName.concat(\"_componentcode\")]: item.ndesigncomponentcode,\n            [fieldName.concat(\"_componentname\")]: item.sdesigncomponentname\n          },\n          parentcode: comboData.value.toString(),\n          parentid: item.ndashboarddesigncode,\n          userinfo: this.props.userInfo,\n          ndashboardtypecode: this.props.masterData.selectedDashBoardTypes.ndashboardtypecode\n        };\n        const inputParam = {\n          viewDashBoardDesignConfigList: this.props.masterData.viewDashBoardDesignConfigList,\n          selectedRecord,\n          inputData\n        };\n        this.props.getReportViewChildDataListForDashBoard(inputParam);\n      } else {\n        selectedRecord[fieldName] = \"\";\n        this.setState({\n          selectedRecord\n        });\n      }\n    };\n\n    this.onSaveClick = (saveType, formRef) => {\n      if (this.props.screenName === \"IDS_PARAMETERMAPPING\") {\n        this.onSaveParameterMapping(saveType, formRef);\n      } else if (this.props.screenName === \"IDS_DEFAULTVALUE\") {\n        this.onSaveClickDefaultValue(saveType, formRef);\n      } else {\n        if (this.state.addDesignParam && this.state.addDesignParam.length === 0) {\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_PLEASEADDPARAMETER\"\n          }));\n        } else {\n          this.onSaveClickAddDesign(saveType, formRef);\n        }\n      }\n    };\n\n    this.onSaveParameterMapping = (saveType, formRef) => {\n      let operation = this.props.operation;\n      let inputData = [];\n      let selectedId = null;\n      inputData[\"userinfo\"] = this.props.userInfo;\n      inputData[\"dashboardparametermapping\"] = []; //inputData[\"reportparameteraction\"] = [];\n\n      this.state.mappingGridData.forEach(item => {\n        inputData[\"dashboardparametermapping\"].push({\n          \"ndashboardtypecode\": this.props.masterData.selectedDashBoardTypes.ndashboardtypecode,\n          \"nparentdashboarddesigncode\": item.nparentdashboarddesigncode,\n          \"nchilddashboarddesigncode\": item.nchilddashboarddesigncode,\n          \"sfieldname\": item.sfieldname,\n          \"nisactionparent\": item.nisactionparent\n        });\n      });\n      const inputParam = {\n        classUrl: this.props.inputParam.classUrl,\n        methodUrl: \"DashBoardParameterMapping\",\n        displayName: this.props.inputParam.displayName,\n        inputData: inputData,\n        operation: operation,\n        saveType,\n        formRef,\n        dataState: undefined,\n        selectedId\n      };\n\n      if (showEsign(this.props.userRoleControlRights, this.props.userInfo.nformcode, this.props.ncontrolCode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData: this.props.masterData\n            },\n            saveType //openModal: true, screenName: this.props.intl.formatMessage({ id: this.props.Login.inputParam.displayName }),\n            ///operation: this.props.Login.operation\n\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, this.props.masterData, \"openChildModal\");\n      }\n    };\n\n    this.onSaveClickAddDesign = (saveType, formRef) => {\n      let dataState = undefined;\n      let operation = this.props.operation;\n      let inputData = [];\n      let selectedId = null;\n      let data = [];\n\n      if (this.state.addDesignParam.length === this.props.sqlQueryForParams.length) {\n        inputData[\"userinfo\"] = this.props.userInfo;\n        this.state.addDesignParam.map(item => {\n          data.push({\n            \"ndashboardtypecode\": this.props.masterData.selectedDashBoardTypes.ndashboardtypecode,\n            \"ndesigncomponentcode\": item.ndesigncomponentcode && item.ndesigncomponentcode.value ? item.ndesigncomponentcode.value : item.ndesigncomponentcode,\n            \"sfieldname\": item.sfieldname.label && item.sfieldname.label ? item.sfieldname.label : item.sfieldname,\n            \"nsqlquerycode\": item.nsqlquerycode && item.nsqlquerycode.value ? item.nsqlquerycode.value : -1,\n            \"sdisplayname\": item.sdisplayname,\n            \"ndays\": item.ndays ? item.ndays : 0,\n            \"nmandatory\": item.nmandatory && item.nmandatory ? item.nmandatory : item.sfieldname.item.Mandatory\n          });\n          return null;\n        });\n        inputData[\"dashboarddesignconfig\"] = data;\n        inputData[\"ndashboardtypecode\"] = this.props.masterData.selectedDashBoardTypes.ndashboardtypecode;\n        const inputParam = {\n          classUrl: this.props.inputParam.classUrl,\n          methodUrl: \"DashBoardDesignConfig\",\n          displayName: this.props.inputParam.displayName,\n          inputData: inputData,\n          operation: operation,\n          saveType,\n          formRef,\n          dataState,\n          selectedId\n        };\n\n        if (showEsign(this.props.userRoleControlRights, this.props.userInfo.nformcode, this.props.ncontrolCode)) {\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              loadEsign: true,\n              screenData: {\n                inputParam,\n                masterData: this.props.masterData\n              },\n              openChildModal: true,\n              screenName: this.props.intl.formatMessage({\n                id: this.props.inputParam.displayName\n              }),\n              operation: this.props.operation\n            }\n          };\n          this.props.updateStore(updateInfo);\n        } else {\n          this.props.crudMaster(inputParam, this.props.masterData, \"openChildModal\");\n        }\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_CONFIGUREALLPARAMETERS\"\n        }));\n      }\n    };\n\n    this.onSaveClickDefaultValue = () => {\n      // let dataState = undefined;\n      // let operation = this.props.operation;\n      let inputData = []; // let selectedId = null;\n\n      let data = [];\n      inputData[\"userinfo\"] = this.props.userInfo;\n      this.props.masterData.viewDashBoardDesignConfigList.map(item => {\n        data.push({\n          \"ndashboarddesigncode\": item.ndashboarddesigncode,\n          \"ndashboardtypecode\": item.ndashboardtypecode,\n          \"ndesigncomponentcode\": item.ndesigncomponentcode,\n          \"sfieldname\": item.sfieldname,\n          \"nsqlquerycode\": item.nsqlquerycode ? item.nsqlquerycode : -1,\n          \"sdisplayname\": item.sdisplayname,\n          \"ndays\": item.ndays ? item.ndays : 0,\n          \"sdefaultvalue\": item.ndesigncomponentcode === designComponents.COMBOBOX ? this.state.selectedRecord[item.sfieldname] && this.state.selectedRecord[item.sfieldname].value ? this.state.selectedRecord[item.sfieldname].value : \"\" : this.state.selectedRecord[item.sfieldname] === undefined ? \"\" : this.state.selectedRecord[item.sfieldname]\n        });\n        return null;\n      });\n      inputData[\"dashboarddesignconfig\"] = data;\n      inputData[\"ndashboardtypecode\"] = this.props.masterData.selectedDashBoardTypes.ndashboardtypecode;\n      this.props.updateDashBoarddesignDefaultValue(inputData, this.props.masterData); // const inputParam = {\n      //     classUrl: this.props.inputParam.classUrl,\n      //     methodUrl: \"DashBoardDesignConfig\",\n      //     displayName: this.props.inputParam.displayName,\n      //     inputData: inputData,\n      //     operation: operation, saveType, formRef, dataState, selectedId\n      // }\n      // if (showEsign(this.props.userRoleControlRights, this.props.userInfo.nformcode, this.props.ncontrolCode)) {\n      //     const updateInfo = {\n      //         typeName: DEFAULT_RETURN,\n      //         data: {\n      //             loadEsign: true, screenData: { inputParam, masterData: this.props.masterData },\n      //             openChildModal: true, screenName: this.props.intl.formatMessage({ id: this.props.inputParam.displayName }),\n      //             operation: this.props.operation\n      //         }\n      //     }\n      //     this.props.updateStore(updateInfo);\n      // }\n      // else {\n      //     this.props.crudMaster(inputParam, this.props.masterData, \"openChildModal\");\n      // }\n    };\n\n    const _dataState = {\n      skip: 0,\n      take: 10\n    };\n    this.state = {\n      isOpen: false,\n      selectedRecord: {},\n      dataResult: [],\n      dataState: _dataState,\n      addDesignParam: [],\n      gridData: [],\n      addMappingParam: [],\n      mappingGridData: []\n    };\n    this.extractedColumnList = [{\n      \"idsName\": \"IDS_DASHBOARDNAME\",\n      \"dataField\": \"sdashboardtypename\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_INPUTTYPE\",\n      \"dataField\": \"ndesigncomponentcode\",\n      \"width\": \"200px\",\n      \"listName\": \"designComponentList\",\n      \"optionId\": \"ndesigncomponentcode\",\n      \"optionValue\": \"sdesigncomponentname\"\n    }, {\n      \"idsName\": \"IDS_PARAMETERS\",\n      \"dataField\": \"sfieldname\",\n      \"width\": \"300px\",\n      \"listName\": \"reportParameterList\",\n      \"optionId\": \"sqlQueryParams\",\n      \"optionValue\": \"sqlQueryParams\"\n    }, {\n      \"idsName\": \"IDS_EXISTINGLINKTABLE\",\n      \"dataField\": \"nsqlquerycode\",\n      \"width\": \"200px\",\n      \"listName\": \"sqlQueryList\",\n      \"optionId\": \"nsqlquerycode\",\n      \"optionValue\": \"ssqlqueryname\"\n    }, {\n      \"idsName\": \"IDS_DISPLAYNAME\",\n      \"dataField\": \"sdisplayname\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_DAYS\",\n      \"dataField\": \"ndays\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_MANDATORY\",\n      \"dataField\": \"nmandatory\"\n    }];\n    this.gridColumnList = [{\n      \"idsName\": \"IDS_PARAMETERS\",\n      \"dataField\": \"sfieldname\",\n      \"width\": \"250px\"\n    }, {\n      \"idsName\": \"IDS_DISPLAYNAME\",\n      \"dataField\": \"sdisplayname\",\n      \"width\": \"250px\"\n    }, {\n      \"idsName\": \"IDS_INPUTTYPE\",\n      \"dataField\": \"sdesigncomponentname\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_DAYS\",\n      \"dataField\": \"ndays\",\n      \"width\": \"150px\"\n    }];\n    this.mappingInputFieldList = [{\n      \"idsName\": \"IDS_PARAMETER\",\n      \"dataField\": \"nchilddashboarddesigncode\",\n      \"listName\": \"childComponentList\",\n      \"optionId\": \"ndashboarddesigncode\",\n      \"optionValue\": \"sdisplayname\"\n    }, {\n      \"idsName\": \"IDS_FIELDNAME\",\n      \"dataField\": \"sfieldname\",\n      \"listName\": \"optionalParameterList\",\n      \"optionId\": \"value\",\n      \"optionValue\": \"label\"\n    }, {\n      \"idsName\": \"IDS_PARENTPARAMETER\",\n      \"dataField\": \"nparentdashboarddesigncode\",\n      \"listName\": \"parentComponentList\",\n      \"optionId\": \"ndashboarddesigncode\",\n      \"optionValue\": \"sdisplayname\"\n    }];\n    this.mappingGridFieldList = [{\n      \"idsName\": \"IDS_PARAMETERS\",\n      \"dataField\": \"schildparametername\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_FIELDNAME\",\n      \"dataField\": \"sfieldname\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_PARENTPARAMETER\",\n      \"dataField\": \"sparentparametername\",\n      \"width\": \"300px\"\n    }, {\n      \"idsName\": \"IDS_ACTIONPARAMETER\",\n      \"dataField\": \"sisactionparent\",\n      \"width\": \"200px\"\n    }];\n    this.defaultValueGridFieldList = [{\n      \"idsName\": \"IDS_DISPLAYNAME\",\n      \"dataField\": \"sdisplayname\",\n      \"width\": \"300px\"\n    }, {\n      \"idsName\": \"IDS_DEFAULTVALUE\",\n      \"dataField\": \"sdisplaymember\",\n      \"width\": \"300px\"\n    }];\n    this.detailedGridFieldList = [{\n      \"idsName\": \"IDS_FIELDNAME\",\n      \"dataField\": \"sfieldname\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_PARENTPARAMETER\",\n      \"dataField\": \"sparentparametername\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_ACTIONPARAMETER\",\n      \"dataField\": \"nisactionparent\",\n      \"width\": \"200px\",\n      \"componentName\": \"switch\",\n      \"switchFieldName\": \"nisactionparent\",\n      \"switchStatus\": transactionStatus.YES,\n      \"needRights\": false //\"controlName\": \"DefaultTestSection\"\n\n    }];\n  }\n\n  render() {\n    // const addDesignId = this.props.controlMap.has(\"AddDashBoardDesignConfig\") && this.props.controlMap.get(\"AddDashBoardDesignConfig\").ncontrolcode\n    // const parameterMapId = this.props.controlMap.has(\"AddDashBoardParameterMapping\") && this.props.controlMap.get(\"AddDashBoardParameterMapping\").ncontrolcode;\n    // const addDesignParam = {\n    //     screenName: \"Add Design\", operation: \"create\", primaryKeyField: \"ndashboarddesigncode\",\n    //     masterData: this.props.masterData, userInfo: this.props.userInfo, ncontrolCode: addDesignId\n    // };\n    //console.log(\"master data:\", this.props.masterData, this.props.screenName);\n    const mandatoryFields = [];\n\n    if (this.props.screenName === \"IDS_DEFAULTVALUE\") {\n      const fieldList = this.props.masterData.viewDashBoardDesignConfigList || [];\n      fieldList.forEach(item => {\n        if (item.nmandatory === transactionStatus.YES) {\n          mandatoryFields.push({\n            \"idsName\": item.sdisplayname,\n            \"dataField\": item.sfieldname,\n            \"mandatoryLabel\": \"IDS_PROVIDE\",\n            \"controlType\": \"textbox\"\n          });\n        }\n      });\n    }\n\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Row, {\n      className: \"no-gutters\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 21\n      }\n    }, this.props.masterData[\"DashBoardTypes\"] &&\n    /*#__PURE__*/\n    // (this.props.screenName === \"\" ||  this.props.screenName === \"IDS_DASHBOARDTYPES\")?\n    // <CustomTabs tabDetail={this.tabDetail()} activeKey=\"IDS_DESIGNPARAMETERS\" onTabChange={this.onTabChange} />\n    // :\n    React.createElement(CustomTabs, {\n      tabDetail: this.tabDetail() //activeKey={this.props.screenName}\n      ,\n      onTabChange: this.onTabChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 45\n      }\n    }))), this.props.openChildModal && /*#__PURE__*/React.createElement(SlideOutModal, {\n      show: this.props.openChildModal,\n      closeModal: this.closeModal,\n      operation: this.props.operation,\n      inputParam: this.props.inputParam,\n      screenName: this.props.screenName,\n      onSaveClick: this.onSaveClick,\n      updateStore: this.props.updateStore,\n      esign: this.props.loadEsign,\n      validateEsign: this.validateEsign,\n      selectedRecord: this.state.selectedRecord || {},\n      mandatoryFields: mandatoryFields,\n      ignoreFormValidation: this.props.screenName === \"IDS_DESIGNPARAMETERS\",\n      addComponent: this.props.loadEsign ? /*#__PURE__*/React.createElement(Esign, {\n        operation: this.props.operation,\n        formatMessage: this.props.formatMessage,\n        onInputOnChange: this.onInputOnChange,\n        inputParam: this.props.inputParam,\n        selectedRecord: this.state.selectedRecord || {},\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 29\n        }\n      }) : this.props.screenName === \"IDS_PARAMETERMAPPING\" ? /*#__PURE__*/React.createElement(ParameterMapping, {\n        operation: this.props.operation,\n        parentComponentList: this.props.parentComponentList || [],\n        childComponentList: this.props.childComponentList || [],\n        optionalParameterList: this.state.optionalParameterList || [],\n        onInputOnChange: this.onInputOnChangeDesign,\n        handleChange: this.onComboChange,\n        selectedRecord: this.state.selectedRecord || {},\n        addMappingParam: this.state.addMappingParam || this.props.masterData.DashBoardParameterMapping,\n        mappingGridData: this.state.mappingGridData || this.props.masterData.DashBoardParameterMapping,\n        addParametersInDataGrid: this.bindMappingParametersToDataGrid,\n        deleteRecordWORights: this.unbindMappingParametersFromDataGrid,\n        inputColumnList: this.mappingInputFieldList,\n        mappingGridColumnList: this.mappingGridFieldList,\n        controlMap: this.props.controlMap,\n        userRoleControlRights: this.props.userRoleControlRights,\n        detailedFieldList: this.detailedGridFieldList,\n        bindActionParameter: this.bindActionParameter,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 198,\n          columnNumber: 33\n        }\n      }) : this.props.screenName === \"IDS_DEFAULTVALUE\" ? /*#__PURE__*/React.createElement(DashBoardDynamicControls, {\n        selectedRecord: this.state.selectedRecord || {},\n        onInputOnChange: this.onInputOnChangeDefault,\n        onNumericInputOnChange: this.onNumericInputOnChange,\n        onComboChange: this.onComboChangeDefaultValue,\n        handleDateChange: this.handleDateChange,\n        viewDashBoardDesignConfigList: this.props.masterData.viewDashBoardDesignConfigList || [],\n        operation: this.props.operation,\n        userInfo: this.props.userInfo,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 219,\n          columnNumber: 37\n        }\n      }) : this.props.screenName === \"IDS_DESIGNPARAMETERS\" ? /*#__PURE__*/React.createElement(AddDesign, {\n        designName: this.props.masterData.selectedDashBoardTypes.sdashboardtypename,\n        gridPrimaryKey: \"ndesigncomponentcode\",\n        operation: this.props.operation //selectedReportMaster={this.props.Login.masterData.SelectedReportMaster || {}}\n        ,\n        reportParameterList: this.props.sqlQueryForParams || [],\n        designComponentList: this.props.designComponents || [],\n        sqlQueryList: this.props.sqlQueryForExistingLinkTable || [],\n        onInputOnChange: this.onInputOnChangeDesign,\n        handleChange: this.handleChangeDesign,\n        selectedRecord: this.state.selectedRecord || {} //handleChange={this.handleChangeDesign}\n        ,\n        addDesignParam: this.state.addDesignParam || [],\n        gridData: this.state.gridData || [],\n        addParametersInDataGrid: this.addParametersInDataGrid,\n        deleteRecordWORights: this.removeParametersInDataGrid,\n        inputColumnList: this.extractedColumnList,\n        gridColumnList: this.gridColumnList,\n        controlMap: this.props.controlMap,\n        userRoleControlRights: this.props.userRoleControlRights,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 230,\n          columnNumber: 41\n        }\n      }) : /*#__PURE__*/React.createElement(React.Fragment, null),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 21\n      }\n    }));\n  } // onTabChange = (tabProps) => {\n  //     const screenName = tabProps.name;\n  //     const updateInfo = {\n  //         typeName: DEFAULT_RETURN,\n  //         data: { screenName }\n  //     }\n  //     if (screenName === \"IDS_DEFAULTVALUE\") {\n  //         this.props.showDefaultValueInDataGrid(\n  //             this.props.masterData.selectedDashBoardTypes,\n  //             this.props.userInfo,\n  //             this.props.masterData)\n  //     }\n  //     this.props.updateStore(updateInfo);\n  // }\n\n\n  componentDidUpdate(previousProps) {\n    if (this.props.masterData !== previousProps.masterData) {\n      let {\n        dataState\n      } = this.state;\n\n      if (this.props.dataState === undefined) {\n        dataState = {\n          skip: 0,\n          take: 10\n        };\n      }\n\n      let isOpen = false;\n\n      if (this.props.errorCode !== undefined && (this.state.operation === \"create\" || this.state.operation === \"update\")) {\n        isOpen = true;\n      } // const addDesignParam = [];\n      // const gridData = [];\n      // this.props.masterData.selectedDesignConfig &&\n      //     this.props.masterData.selectedDesignConfig.forEach(item => {\n      //         addDesignParam.push({\n      //             ...item,\n      //             ndesigncomponentcode: { label: item.sdesigncomponentname, value: item.ndesigncomponentcode },\n      //             nsqlquerycode: { label: item.ssqlqueryname, value: item.nsqlquerycode }\n      //         });\n      //         gridData.push({\n      //             ...item,\n      //             ndesigncomponentcode: { label: item.sdesigncomponentname, value: item.ndesigncomponentcode },\n      //             nsqlquerycode: { label: item.ssqlqueryname, value: item.nsqlquerycode }\n      //         });\n      //     });\n      // const addMappingParam = [];\n      // const mappingGridData = [];\n      // this.props.masterData.DashBoardParameterMapping &&\n      //     this.props.masterData.DashBoardParameterMapping.forEach(item => {\n      //         addMappingParam.push({ ...item });\n      //         mappingGridData.push({ ...item });\n      //     });\n\n\n      this.setState({\n        isOpen,\n        dataState //addDesignParam, gridData,\n        //addMappingParam, mappingGridData, \n        //dashBoardDefaultValue \n\n      });\n    }\n\n    if (this.props.addDesignParam !== previousProps.addDesignParam || this.props.gridData !== previousProps.gridData) {\n      this.setState({\n        addDesignParam: this.props.addDesignParam,\n        gridData: this.props.gridData,\n        addMappingParam: this.props.addMappingParam,\n        mappingGridData: this.props.mappingGridData\n      });\n    }\n\n    if (this.props.selectedRecord !== previousProps.selectedRecord) {\n      this.setState({\n        selectedRecord: this.props.selectedRecord\n      });\n    }\n  }\n\n}\n\nexport default injectIntl(DashBoardDesignConfig);","map":{"version":3,"sources":["E:/WorkingFolder/React_Postgres/ALPD/branches/SOURCE-513-PROD/QuaLISWeb/src/pages/dashboardtypes/DashBoardDesignConfig.jsx"],"names":["React","Row","Col","injectIntl","process","SlideOutModal","toast","Esign","DEFAULT_RETURN","CustomTabs","designComponents","transactionStatus","showEsign","formatInputDate","sortData","AddDesign","ParameterMapping","intl","DashBoardDynamicControls","DesignParameterTab","ParameterMappingTab","DefaultValueTab","DashBoardDesignConfig","Component","constructor","props","dataStateChange","event","setState","dataResult","masterData","data","dataState","closeModal","loadEsign","openChildModal","selectedRecord","operation","updateInfo","typeName","selectedId","gridData","addDesignParam","updateStore","onTabChange","tabProps","screenName","tabDetail","tabMap","Map","set","skip","take","length","gridColumnList","controlMap","userRoleControlRights","inputParam","userInfo","getAddDashboardDesign","mappingGridFieldList","getDashBoardParameterMappingComboService","defaultValueGridFieldList","checkParametersAvailableForDefaultValue","bindActionParameter","rowItem","gridMappingParam","state","mappingGridData","target","checked","forEach","item","nchilddashboarddesigncode","nparentdashboarddesigncode","nisactionparent","YES","NO","index","findIndex","unbindMappingParametersFromDataGrid","selectedItem","addMappingParamNew","addMappingParam","filter","value","mappingGridDataNew","bindMappingParametersToDataGrid","undefined","copySelected","sfieldname","push","sparentparametername","label","schildparametername","nactionparameter","warn","formatMessage","id","info","removeParametersInDataGrid","addDesignParamNew","gridDataNew","addParametersInDataGrid","validData","trim","COMBOBOX","DATEPICKER","check","sdisplayname","sdesigncomponentname","ndesigncomponentcode","ndays","handleChangeDesign","valueParam","onInputOnChangeDesign","type","name","onComboChange","comboData","fieldName","sqlquery","ssqlquery","param","param1","query","indexOf","index1","index2","parameter","substring","includes","replace","optionalParameterList","onNumericInputOnChange","inputData","dashboarddesignconfig","inputfielddata","inputFieldData","concat","parentcode","toString","parentid","ndashboarddesigncode","userinfo","ndashboardtypecode","selectedDashBoardTypes","viewDashBoardDesignConfigList","getReportViewChildDataListForDashBoard","onInputOnChange","Login","handleDateChange","dateName","dateValue","onInputOnChangeDefault","onComboChangeDefaultValue","onSaveClick","saveType","formRef","onSaveParameterMapping","onSaveClickDefaultValue","onSaveClickAddDesign","classUrl","methodUrl","displayName","nformcode","ncontrolCode","screenData","crudMaster","sqlQueryForParams","map","nsqlquerycode","nmandatory","Mandatory","updateDashBoarddesignDefaultValue","isOpen","extractedColumnList","mappingInputFieldList","detailedGridFieldList","render","mandatoryFields","fieldList","validateEsign","parentComponentList","childComponentList","DashBoardParameterMapping","sdashboardtypename","sqlQueryForExistingLinkTable","componentDidUpdate","previousProps","errorCode"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport { Row, Col} from 'react-bootstrap';\r\nimport { injectIntl } from 'react-intl';\r\nimport { process } from '@progress/kendo-data-query';\r\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\r\nimport { toast } from 'react-toastify';\r\nimport Esign from '../audittrail/Esign';\r\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\r\nimport CustomTabs from '../../components/custom-tabs/custom-tabs.component';\r\nimport { designComponents, transactionStatus } from '../../components/Enumeration';\r\nimport { showEsign, formatInputDate, sortData} from '../../components/CommonScript';\r\nimport AddDesign from '../../components/add-design/add-design.component';\r\nimport ParameterMapping from '../../components/add-design/parameter-mapping.component';\r\nimport { intl } from '../../components/App';\r\nimport DashBoardDynamicControls from './DashBoardDynamicControls';\r\nimport DesignParameterTab from './DesignParameterTab';\r\nimport ParameterMappingTab from './ParameterMappingTab';\r\nimport DefaultValueTab from './DefaultValueTab';\r\n\r\n//import AddDesign from '../dashboardtypes/AddDesign';\r\n\r\nclass DashBoardDesignConfig extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        const dataState = {\r\n            skip: 0,\r\n            take: 10,\r\n        };\r\n        this.state = {\r\n            isOpen: false, selectedRecord: {}, dataResult: [],\r\n            dataState: dataState, addDesignParam: [], gridData: [],\r\n            addMappingParam: [], mappingGridData: []\r\n        };\r\n        this.extractedColumnList = [\r\n            { \"idsName\": \"IDS_DASHBOARDNAME\", \"dataField\": \"sdashboardtypename\", \"width\": \"200px\" },\r\n            {\r\n                \"idsName\": \"IDS_INPUTTYPE\", \"dataField\": \"ndesigncomponentcode\", \"width\": \"200px\", \"listName\": \"designComponentList\",\r\n                \"optionId\": \"ndesigncomponentcode\", \"optionValue\": \"sdesigncomponentname\"\r\n            },\r\n            {\r\n                \"idsName\": \"IDS_PARAMETERS\", \"dataField\": \"sfieldname\", \"width\": \"300px\", \"listName\": \"reportParameterList\",\r\n                \"optionId\": \"sqlQueryParams\", \"optionValue\": \"sqlQueryParams\"\r\n            },\r\n            {\r\n                \"idsName\": \"IDS_EXISTINGLINKTABLE\", \"dataField\": \"nsqlquerycode\", \"width\": \"200px\", \"listName\": \"sqlQueryList\",\r\n                \"optionId\": \"nsqlquerycode\", \"optionValue\": \"ssqlqueryname\"\r\n            },\r\n            { \"idsName\": \"IDS_DISPLAYNAME\", \"dataField\": \"sdisplayname\", \"width\": \"200px\" },\r\n            { \"idsName\": \"IDS_DAYS\", \"dataField\": \"ndays\", \"width\": \"200px\" },\r\n            { \"idsName\": \"IDS_MANDATORY\", \"dataField\": \"nmandatory\" }\r\n        ];\r\n        this.gridColumnList = [\r\n            { \"idsName\": \"IDS_PARAMETERS\", \"dataField\": \"sfieldname\", \"width\": \"250px\" },\r\n            { \"idsName\": \"IDS_DISPLAYNAME\", \"dataField\": \"sdisplayname\", \"width\": \"250px\" },\r\n            { \"idsName\": \"IDS_INPUTTYPE\", \"dataField\": \"sdesigncomponentname\", \"width\": \"200px\" },\r\n            { \"idsName\": \"IDS_DAYS\", \"dataField\": \"ndays\", \"width\": \"150px\" },\r\n        ];\r\n\r\n        this.mappingInputFieldList = [\r\n            {\r\n                \"idsName\": \"IDS_PARAMETER\", \"dataField\": \"nchilddashboarddesigncode\", \"listName\": \"childComponentList\",\r\n                \"optionId\": \"ndashboarddesigncode\", \"optionValue\": \"sdisplayname\"\r\n            },\r\n            {\r\n                \"idsName\": \"IDS_FIELDNAME\", \"dataField\": \"sfieldname\", \"listName\": \"optionalParameterList\",\r\n                \"optionId\": \"value\", \"optionValue\": \"label\"\r\n            },\r\n            {\r\n                \"idsName\": \"IDS_PARENTPARAMETER\", \"dataField\": \"nparentdashboarddesigncode\", \"listName\": \"parentComponentList\",\r\n                \"optionId\": \"ndashboarddesigncode\", \"optionValue\": \"sdisplayname\"\r\n            },\r\n\r\n\r\n        ];\r\n        this.mappingGridFieldList = [\r\n            { \"idsName\": \"IDS_PARAMETERS\", \"dataField\": \"schildparametername\", \"width\": \"200px\" },\r\n            { \"idsName\": \"IDS_FIELDNAME\", \"dataField\": \"sfieldname\", \"width\": \"200px\" },\r\n            { \"idsName\": \"IDS_PARENTPARAMETER\", \"dataField\": \"sparentparametername\", \"width\": \"300px\" },\r\n            { \"idsName\": \"IDS_ACTIONPARAMETER\", \"dataField\": \"sisactionparent\", \"width\": \"200px\" }\r\n        ];\r\n        this.defaultValueGridFieldList = [\r\n            { \"idsName\": \"IDS_DISPLAYNAME\", \"dataField\": \"sdisplayname\", \"width\": \"300px\" },\r\n            { \"idsName\": \"IDS_DEFAULTVALUE\", \"dataField\": \"sdisplaymember\", \"width\": \"300px\" }\r\n        ];\r\n        this.detailedGridFieldList = [\r\n            { \"idsName\": \"IDS_FIELDNAME\", \"dataField\": \"sfieldname\", \"width\": \"200px\" },\r\n            { \"idsName\": \"IDS_PARENTPARAMETER\", \"dataField\": \"sparentparametername\", \"width\": \"200px\" },\r\n            {\r\n                \"idsName\": \"IDS_ACTIONPARAMETER\", \"dataField\": \"nisactionparent\", \"width\": \"200px\",\r\n                \"componentName\": \"switch\", \"switchFieldName\": \"nisactionparent\",\r\n                \"switchStatus\": transactionStatus.YES, \"needRights\": false, //\"controlName\": \"DefaultTestSection\"\r\n            },\r\n\r\n        ];\r\n    }\r\n    dataStateChange = (event) => {\r\n        this.setState({\r\n            dataResult: process(this.props.masterData[\"selectedDesignConfig\"], event.data),\r\n            dataState: event.data\r\n        });\r\n    }\r\n    closeModal = () => {\r\n        let loadEsign = this.props.loadEsign;\r\n        let openChildModal = this.props.openChildModal;\r\n        let selectedRecord = this.props.selectedRecord;\r\n        if (this.props.loadEsign) {\r\n            if (this.props.operation === \"delete\") {\r\n                loadEsign = false;\r\n                openChildModal = false;\r\n                selectedRecord = {};\r\n            }\r\n            else {\r\n                loadEsign = false;\r\n            }\r\n        }\r\n        else {\r\n            openChildModal = false;\r\n            selectedRecord = {};\r\n        }\r\n\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { openChildModal, loadEsign, selectedRecord, selectedId: null, gridData: {}, addDesignParam: {} }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n\r\n    }\r\n    render() {\r\n        // const addDesignId = this.props.controlMap.has(\"AddDashBoardDesignConfig\") && this.props.controlMap.get(\"AddDashBoardDesignConfig\").ncontrolcode\r\n        // const parameterMapId = this.props.controlMap.has(\"AddDashBoardParameterMapping\") && this.props.controlMap.get(\"AddDashBoardParameterMapping\").ncontrolcode;\r\n        // const addDesignParam = {\r\n        //     screenName: \"Add Design\", operation: \"create\", primaryKeyField: \"ndashboarddesigncode\",\r\n        //     masterData: this.props.masterData, userInfo: this.props.userInfo, ncontrolCode: addDesignId\r\n        // };\r\n        //console.log(\"master data:\", this.props.masterData, this.props.screenName);\r\n        const mandatoryFields = [];\r\n\r\n        if (this.props.screenName === \"IDS_DEFAULTVALUE\") {\r\n            const fieldList = this.props.masterData.viewDashBoardDesignConfigList || [];\r\n            fieldList.forEach(item => {\r\n                if (item.nmandatory === transactionStatus.YES) {\r\n                    mandatoryFields.push({ \"idsName\": item.sdisplayname, \"dataField\": item.sfieldname , \"mandatoryLabel\":\"IDS_PROVIDE\", \"controlType\": \"textbox\" })\r\n                }\r\n            });\r\n        }\r\n\r\n\r\n        return (\r\n            <>\r\n                <Row className=\"no-gutters\">\r\n                    <Col md={12}>\r\n                        {/* <Card>\r\n                            <Card.Header className=\"add-txt-btn\">\r\n                                <strong> <FormattedMessage id=\"IDS_ADDDESIGN\" defaultMessage=\"Add Design\" /></strong>\r\n                            </Card.Header>\r\n                            <Card.Body>                               \r\n                                <Row className=\"no-gutters\">\r\n                                    <Col md={12}> */}\r\n                                        {this.props.masterData[\"DashBoardTypes\"] &&\r\n\r\n                                            // (this.props.screenName === \"\" ||  this.props.screenName === \"IDS_DASHBOARDTYPES\")?\r\n                                            // <CustomTabs tabDetail={this.tabDetail()} activeKey=\"IDS_DESIGNPARAMETERS\" onTabChange={this.onTabChange} />\r\n                                            // :\r\n                                            <CustomTabs tabDetail={this.tabDetail()} //activeKey={this.props.screenName}\r\n                                                 onTabChange={this.onTabChange} />\r\n\r\n                                        }\r\n                                    {/* </Col>\r\n                                </Row>\r\n                            </Card.Body>\r\n                        </Card> */}\r\n                    </Col>\r\n                </Row>\r\n                {\r\n                    this.props.openChildModal &&\r\n                    <SlideOutModal show={this.props.openChildModal}\r\n                        closeModal={this.closeModal}\r\n                        operation={this.props.operation}\r\n                        inputParam={this.props.inputParam}\r\n                        screenName={this.props.screenName}\r\n                        onSaveClick={this.onSaveClick}\r\n                        updateStore={this.props.updateStore}\r\n                        esign={this.props.loadEsign}\r\n                        validateEsign={this.validateEsign}\r\n                        selectedRecord={this.state.selectedRecord || {}}\r\n                        mandatoryFields={mandatoryFields}\r\n                        ignoreFormValidation={this.props.screenName === \"IDS_DESIGNPARAMETERS\"}\r\n                        addComponent={this.props.loadEsign ?\r\n                            <Esign operation={this.props.operation}\r\n                                formatMessage={this.props.formatMessage}\r\n                                onInputOnChange={this.onInputOnChange}\r\n                                inputParam={this.props.inputParam}\r\n                                selectedRecord={this.state.selectedRecord || {}}\r\n                            />\r\n                            :\r\n                            this.props.screenName === \"IDS_PARAMETERMAPPING\" ?\r\n                                <ParameterMapping\r\n                                    operation={this.props.operation}\r\n                                    parentComponentList={this.props.parentComponentList || []}\r\n                                    childComponentList={this.props.childComponentList || []}\r\n                                    optionalParameterList={this.state.optionalParameterList || []}\r\n                                    onInputOnChange={this.onInputOnChangeDesign}\r\n                                    handleChange={this.onComboChange}\r\n                                    selectedRecord={this.state.selectedRecord || {}}\r\n                                    addMappingParam={this.state.addMappingParam || this.props.masterData.DashBoardParameterMapping}\r\n                                    mappingGridData={this.state.mappingGridData || this.props.masterData.DashBoardParameterMapping}\r\n                                    addParametersInDataGrid={this.bindMappingParametersToDataGrid}\r\n                                    deleteRecordWORights={this.unbindMappingParametersFromDataGrid}\r\n                                    inputColumnList={this.mappingInputFieldList}\r\n                                    mappingGridColumnList={this.mappingGridFieldList}\r\n                                    controlMap={this.props.controlMap}\r\n                                    userRoleControlRights={this.props.userRoleControlRights}\r\n                                    detailedFieldList={this.detailedGridFieldList}\r\n                                    bindActionParameter={this.bindActionParameter}\r\n                                />\r\n                                : this.props.screenName === \"IDS_DEFAULTVALUE\" ?\r\n\r\n                                    <DashBoardDynamicControls\r\n                                        selectedRecord={this.state.selectedRecord || {}}\r\n                                        onInputOnChange={this.onInputOnChangeDefault}\r\n                                        onNumericInputOnChange={this.onNumericInputOnChange}\r\n                                        onComboChange={this.onComboChangeDefaultValue}\r\n                                        handleDateChange={this.handleDateChange}\r\n                                        viewDashBoardDesignConfigList={this.props.masterData.viewDashBoardDesignConfigList || []}\r\n                                        operation={this.props.operation}\r\n                                        userInfo={this.props.userInfo}\r\n                                    />\r\n                                    : this.props.screenName === \"IDS_DESIGNPARAMETERS\" ?\r\n                                        <AddDesign\r\n                                            designName={this.props.masterData.selectedDashBoardTypes.sdashboardtypename}\r\n                                            gridPrimaryKey={\"ndesigncomponentcode\"}\r\n                                            operation={this.props.operation}\r\n                                            //selectedReportMaster={this.props.Login.masterData.SelectedReportMaster || {}}\r\n                                            reportParameterList={this.props.sqlQueryForParams || []}\r\n                                            designComponentList={this.props.designComponents || []}\r\n                                            sqlQueryList={this.props.sqlQueryForExistingLinkTable || []}\r\n                                            onInputOnChange={this.onInputOnChangeDesign}\r\n                                            handleChange={this.handleChangeDesign}\r\n                                            selectedRecord={this.state.selectedRecord || {}}\r\n                                            //handleChange={this.handleChangeDesign}\r\n                                            addDesignParam={this.state.addDesignParam || []}\r\n                                            gridData={this.state.gridData || []}\r\n                                            addParametersInDataGrid={this.addParametersInDataGrid}\r\n                                            deleteRecordWORights={this.removeParametersInDataGrid}\r\n                                            inputColumnList={this.extractedColumnList}\r\n                                            gridColumnList={this.gridColumnList}\r\n                                            controlMap={this.props.controlMap}\r\n                                            userRoleControlRights={this.props.userRoleControlRights}\r\n                                        />\r\n                                        :\r\n                                        <></>\r\n                        }\r\n\r\n                    />\r\n                }\r\n            </>\r\n        )\r\n\r\n    }\r\n\r\n    // onTabChange = (tabProps) => {\r\n    //     const screenName = tabProps.name;\r\n    //     const updateInfo = {\r\n    //         typeName: DEFAULT_RETURN,\r\n    //         data: { screenName }\r\n    //     }\r\n    //     if (screenName === \"IDS_DEFAULTVALUE\") {\r\n    //         this.props.showDefaultValueInDataGrid(\r\n    //             this.props.masterData.selectedDashBoardTypes,\r\n    //             this.props.userInfo,\r\n    //             this.props.masterData)\r\n    //     }\r\n    //     this.props.updateStore(updateInfo);\r\n    // }\r\n\r\n    onTabChange = (tabProps) => {\r\n        const screenName = tabProps.screenName;\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { screenName }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n\r\n    tabDetail = () => {\r\n        const tabMap = new Map();\r\n\r\n        tabMap.set(\"IDS_DESIGNPARAMETERS\",        \r\n            <DesignParameterTab \r\n                masterData={this.props.masterData}  \r\n                dataResult={sortData(this.props.masterData[\"selectedDesignConfig\"] || [],\"ascending\", \"ndashboarddesigncode\")}           \r\n                dataState={{skip:0, take: this.props.masterData[\"selectedDesignConfig\"] \r\n                            ? this.props.masterData[\"selectedDesignConfig\"].length:10}}           \r\n                 \r\n               // dataState={this.state.dataState}\r\n                //dataStateChange={this.dataStateChange}\r\n                extractedColumnList={this.gridColumnList}\r\n                controlMap={this.props.controlMap}\r\n                userRoleControlRights={this.props.userRoleControlRights}\r\n                inputParam={this.props.inputParam}\r\n                userInfo={this.props.userInfo}               \r\n                //selectedId={this.props.selectedId}\r\n                getAddDashboardDesign={this.props.getAddDashboardDesign}\r\n                name=\"IDS_DESIGNPARAMETERS\"\r\n               \r\n            />)\r\n\r\n        tabMap.set(\"IDS_PARAMETERMAPPING\",\r\n            <ParameterMappingTab \r\n               masterData={this.props.masterData}                \r\n                dataResult={this.props.masterData[\"DashBoardParameterMapping\"] || []}\r\n                dataState={{skip:0, take: this.props.masterData[\"DashBoardParameterMapping\"] \r\n                                ? this.props.masterData[\"DashBoardParameterMapping\"].length:0}}      \r\n                // dataState={this.state.dataState}\r\n                // dataStateChange={this.dataStateChange}\r\n                extractedColumnList={this.mappingGridFieldList}\r\n                controlMap={this.props.controlMap}\r\n                userRoleControlRights={this.props.userRoleControlRights}\r\n                inputParam={this.props.inputParam}\r\n                userInfo={this.props.userInfo}               \r\n               // selectedId={this.props.selectedId} \r\n                getDashBoardParameterMappingComboService={this.props.getDashBoardParameterMappingComboService}               \r\n                name=\"IDS_PARAMETERMAPPING\"              \r\n            />);\r\n        tabMap.set(\"IDS_DEFAULTVALUE\",\r\n            <DefaultValueTab \r\n                masterData={this.props.masterData}   \r\n                // dataResult={this.state[\"dashBoardDefaultValue\"] || []}\r\n                // dataState={{skip:0, take: this.state[\"dashBoardDefaultValue\"] \r\n                //     ? this.state[\"dashBoardDefaultValue\"].length:0}}     \r\n               dataResult={sortData(this.props.masterData[\"DashboardDesignDefaultList\"] || [], \"ascending\", \"ndashboarddesigncode\")}\r\n               dataState={{skip:0, take: this.props.masterData[\"DashboardDesignDefaultList\"] \r\n                               ? this.props.masterData[\"DashboardDesignDefaultList\"].length:0}}      \r\n               // dataState={this.state.dataState}\r\n                extractedColumnList={this.defaultValueGridFieldList}\r\n                controlMap={this.props.controlMap}\r\n                userRoleControlRights={this.props.userRoleControlRights}\r\n                inputParam={this.props.inputParam}\r\n                userInfo={this.props.userInfo}               \r\n              //  selectedId={this.props.selectedId}  \r\n                checkParametersAvailableForDefaultValue= {this.props.checkParametersAvailableForDefaultValue}             \r\n                name=\"IDS_DEFAULTVALUE\"\r\n               \r\n            />);\r\n        return tabMap;\r\n    }\r\n\r\n    bindActionParameter = (rowItem, event) => {\r\n\r\n        const gridMappingParam = this.state.mappingGridData;\r\n        if (event.target.checked) {\r\n            gridMappingParam.forEach(item => {\r\n                if (item.nchilddashboarddesigncode === rowItem.selectedRecord.nchilddashboarddesigncode) {\r\n                    if (item.nparentdashboarddesigncode === rowItem.selectedRecord.nparentdashboarddesigncode) {\r\n                        return item.nisactionparent = transactionStatus.YES;\r\n                    }\r\n                    else {\r\n                        return item.nisactionparent = transactionStatus.NO;\r\n                    }\r\n                }\r\n            })\r\n\r\n        }\r\n        else {\r\n            const index = gridMappingParam.findIndex(item => item.nchilddashboarddesigncode === rowItem.selectedRecord.nchilddashboarddesigncode\r\n                && item.nparentdashboarddesigncode === rowItem.selectedRecord.nparentdashboarddesigncode);\r\n            gridMappingParam[index][\"nisactionparent\"] = transactionStatus.NO\r\n        }\r\n\r\n\r\n        this.setState({ mappingGridData: gridMappingParam });\r\n    }\r\n\r\n    unbindMappingParametersFromDataGrid = (selectedItem) => {\r\n\r\n        const addMappingParamNew = this.state.addMappingParam.filter(item => {\r\n            if (typeof item.nchilddashboarddesigncode === \"number\") {\r\n                if (item.nchilddashboarddesigncode === selectedItem.nchilddashboarddesigncode) {\r\n                    return (item.nparentdashboarddesigncode !== selectedItem.nparentdashboarddesigncode)\r\n                }\r\n                else\r\n                    return item;\r\n            }\r\n            else {\r\n                if (item.nchilddashboarddesigncode.value === selectedItem.nchilddashboarddesigncode) {\r\n                    return (item.nparentdashboarddesigncode.value !== selectedItem.nparentdashboarddesigncode)\r\n                }\r\n                else\r\n                    return item;\r\n            }\r\n        });\r\n        const mappingGridDataNew = this.state.mappingGridData.filter(item => {\r\n            if (typeof item.nchilddashboarddesigncode === \"number\") {\r\n                if (item.nchilddashboarddesigncode === selectedItem.nchilddashboarddesigncode) {\r\n                    return (item.nparentdashboarddesigncode !== selectedItem.nparentdashboarddesigncode)\r\n                }\r\n                else\r\n                    return item;\r\n            }\r\n            else {\r\n                if (item.nchilddashboarddesigncode.value === selectedItem.nchilddashboarddesigncode) {\r\n                    return (item.nparentdashboarddesigncode.value !== selectedItem.nparentdashboarddesigncode)\r\n                }\r\n                else\r\n                    return item;\r\n            }\r\n        });\r\n\r\n        this.setState({ addMappingParam: addMappingParamNew, mappingGridData: mappingGridDataNew });\r\n\r\n    }\r\n\r\n    bindMappingParametersToDataGrid = (selectedRecord) => {\r\n\r\n        if (selectedRecord[\"sfieldname\"] && selectedRecord[\"nparentdashboarddesigncode\"]\r\n            && selectedRecord[\"nchilddashboarddesigncode\"]) {\r\n            if (selectedRecord && selectedRecord.nparentdashboarddesigncode !== undefined) {\r\n                let copySelected = { ...selectedRecord };\r\n\r\n                const addMappingParam = this.state.addMappingParam;\r\n                const index = addMappingParam.findIndex(item =>\r\n                    item.nparentdashboarddesigncode === copySelected.nparentdashboarddesigncode.value\r\n                    && item.nchilddashboarddesigncode === copySelected.nchilddashboarddesigncode.value\r\n                    && item.sfieldname === copySelected.sfieldname.value);\r\n                if (index === -1) {\r\n                    addMappingParam.push(copySelected);\r\n                    const mappingGridData = this.state.mappingGridData;;\r\n                    mappingGridData.push({\r\n                        nparentdashboarddesigncode: copySelected.nparentdashboarddesigncode.value,\r\n                        nchilddashboarddesigncode: copySelected.nchilddashboarddesigncode.value,\r\n                        sparentparametername: copySelected.nparentdashboarddesigncode.label,\r\n                        schildparametername: copySelected.nchilddashboarddesigncode.label,\r\n                        sfieldname: copySelected.sfieldname.value,\r\n                        nactionparameter: transactionStatus.NO\r\n                    })\r\n\r\n                    this.setState({\r\n                        addMappingParam,\r\n                        //actionGridData,\r\n                        selectedRecord: {\r\n                            // nactionreportdesigncode:{label:\"\", value:-1},\r\n                            nparentdashboarddesigncode: { label: \"\", value: -1 },\r\n                            sfieldname: { label: \"\", value: -1 },\r\n                            nchilddashboarddesigncode: { label: \"\", value: -1 }\r\n                        },\r\n                        mappingGridData\r\n                    });\r\n                }\r\n                else {\r\n                    toast.warn(this.props.intl.formatMessage({ id: \"IDS_DUPLICATEMAPPING\" }));\r\n                    this.setState({\r\n                        selectedRecord: {\r\n                            nparentdashboarddesigncode: { label: \"\", value: -1 },\r\n                            sfieldname: { label: \"\", value: -1 },\r\n                            nchilddashboarddesigncode: { label: \"\", value: -1 }\r\n                        },\r\n                    });\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            //toast.warn(this.props.intl.formatMessage({id:\"IDS_FILLMANDATORY\"}));\r\n\r\n            if (selectedRecord[\"nchilddashboarddesigncode\"] === undefined\r\n                || selectedRecord[\"nchilddashboarddesigncode\"].length === 0) {\r\n                toast.info(`${this.props.intl.formatMessage({ id: \"IDS_ENTER\" })} ${this.props.intl.formatMessage({ id: \"IDS_PARAMETER\" })}`);\r\n            }\r\n            else if (selectedRecord[\"sfieldname\"] === undefined\r\n                || selectedRecord[\"sfieldname\"].length === 0) {\r\n                toast.info(`${this.props.intl.formatMessage({ id: \"IDS_ENTER\" })} ${this.props.intl.formatMessage({ id: \"IDS_FIELDNAME\" })}`);\r\n            }\r\n            else if (selectedRecord[\"nparentdashboarddesigncode\"] === undefined\r\n                || selectedRecord[\"nparentdashboarddesigncode\"].length === 0) {\r\n                toast.info(`${this.props.intl.formatMessage({ id: \"IDS_ENTER\" })} ${this.props.intl.formatMessage({ id: \"IDS_PARENTPARAMETER\" })}`);\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    removeParametersInDataGrid = (selectedItem) => {\r\n        const addDesignParamNew = this.state.addDesignParam.filter\r\n            (item => item.sfieldname !== selectedItem.sfieldname);\r\n\r\n        const gridDataNew = this.state.gridData.filter\r\n            (item => item.sfieldname !== selectedItem.sfieldname);\r\n\r\n        this.setState({ addDesignParam: addDesignParamNew, gridData: gridDataNew });\r\n\r\n    }\r\n\r\n    addParametersInDataGrid = (selectedRecord) => {\r\n\r\n        // if (this.state.addDesignParam.length === this.props.sqlQueryForParams.length)\r\n        // {   \r\n        //     toast.warn(\"You cannot add more than Dashboard Parameters count\");\r\n        // }\r\n        // if  {\r\n        let validData = false;\r\n        if (selectedRecord[\"sdisplayname\"] && selectedRecord[\"sdisplayname\"].trim().length !== 0\r\n            && selectedRecord[\"sfieldname\"] && selectedRecord[\"ndesigncomponentcode\"]) {\r\n            validData = true;\r\n            if (selectedRecord[\"ndesigncomponentcode\"].value === designComponents.COMBOBOX) {\r\n                if (selectedRecord[\"nsqlquerycode\"] && selectedRecord[\"nsqlquerycode\"].length !== 0) {\r\n                    validData = true;\r\n                }\r\n                else {\r\n                    validData = false;\r\n                }\r\n            }\r\n            if (selectedRecord[\"ndesigncomponentcode\"].value === designComponents.DATEPICKER) {\r\n                if (selectedRecord[\"ndays\"] && selectedRecord[\"ndays\"].length !== 0) {\r\n                    validData = true;\r\n                } else {\r\n                    validData = false;\r\n                }\r\n            }\r\n        }\r\n        if (validData) {\r\n            if (selectedRecord && selectedRecord.sfieldname !== undefined) {\r\n\r\n                const check = this.state.gridData.filter\r\n                    (item => item.sfieldname === selectedRecord.sfieldname.label);\r\n\r\n                if (check && check.length > 0) {\r\n\r\n                    toast.warn(intl.formatMessage({ id: \"IDS_PARAMETERALREADYEXIST\" }));\r\n                    return;\r\n                }\r\n\r\n                let copySelected = { ...selectedRecord };\r\n                let addDesignParam = this.state.addDesignParam || [];\r\n\r\n                addDesignParam.push(copySelected);\r\n                const gridData = this.state.gridData;;\r\n                gridData.push({\r\n                    sfieldname: copySelected.sfieldname.label, sdisplayname: copySelected.sdisplayname,\r\n                    sdesigncomponentname: copySelected.ndesigncomponentcode.label,\r\n                    ndesigncomponentcode: copySelected.ndesigncomponentcode.value,\r\n                    ndays : selectedRecord[\"ndesigncomponentcode\"].value === designComponents.DATEPICKER ? copySelected.ndays :0\r\n                });\r\n\r\n                this.setState({\r\n                    addDesignParam,\r\n                    selectedRecord: {\r\n                        ndays: \"\",\r\n                       // nsqlquerycode: { label: \"\", value: -1 },\r\n                      //  sfieldname: { label: \"\", value: \"\" },\r\n                        sdisplayname: \"\",\r\n                      //  ndesigncomponentcode: { label: \"\", value: -1 }\r\n                    },\r\n                    gridData: gridData\r\n                });\r\n            }\r\n        }\r\n        else {\r\n            if (selectedRecord[\"sfieldname\"] === undefined ||\r\n                selectedRecord[\"sfieldname\"].label === \"\") {\r\n                toast.info(`${this.props.intl.formatMessage({ id: \"IDS_ENTER\" })} ${this.props.intl.formatMessage({ id: \"IDS_PARAMETERS\" })}`);\r\n            }\r\n            else if (selectedRecord[\"sdisplayname\"] === undefined\r\n                || selectedRecord[\"sdisplayname\"] === \"\") {\r\n                toast.info(`${this.props.intl.formatMessage({ id: \"IDS_ENTER\" })} ${this.props.intl.formatMessage({ id: \"IDS_DISPLAYNAME\" })}`);\r\n            }\r\n            else if (selectedRecord[\"ndesigncomponentcode\"] === undefined\r\n                || selectedRecord[\"ndesigncomponentcode\"].value === 0) {\r\n                toast.info(`${this.props.intl.formatMessage({ id: \"IDS_ENTER\" })} ${this.props.intl.formatMessage({ id: \"IDS_INPUTTYPE\" })}`);\r\n            }\r\n            else {\r\n                if (selectedRecord[\"ndesigncomponentcode\"].value === designComponents.COMBOBOX) {\r\n                    if (selectedRecord[\"nsqlquerycode\"] === undefined || selectedRecord[\"nsqlquerycode\"].length === 0) {\r\n                        toast.info(`${this.props.intl.formatMessage({ id: \"IDS_ENTER\" })} ${this.props.intl.formatMessage({ id: \"IDS_EXISTINGLINKTABLE\" })}`);\r\n                    }\r\n                }\r\n                else if (selectedRecord[\"ndesigncomponentcode\"].value === designComponents.DATEPICKER) {\r\n                    if (selectedRecord[\"ndays\"] === undefined || selectedRecord[\"ndays\"].length === 0) {\r\n                        toast.info(`${this.props.intl.formatMessage({ id: \"IDS_ENTER\" })} ${this.props.intl.formatMessage({ id: \"IDS_DAYS\" })}`);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        // }\r\n\r\n    }\r\n\r\n    handleChangeDesign = (value, valueParam) => {\r\n\r\n        if (value !== null) {\r\n            const selectedRecord = this.state.selectedRecord || {};\r\n\r\n            selectedRecord[valueParam] = value;\r\n\r\n            this.setState({ selectedRecord });\r\n\r\n        }\r\n    }\r\n\r\n    onInputOnChangeDesign = (event) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n\r\n        if (event.target.type === 'checkbox') {\r\n            selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\r\n        }\r\n        else {\r\n            selectedRecord[event.target.name] = event.target.value;\r\n        }\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    onComboChange = (comboData, fieldName) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if (fieldName === \"nchilddashboarddesigncode\") {\r\n\r\n\r\n            selectedRecord[fieldName] = comboData;\r\n\r\n            const sqlquery = comboData.item.ssqlquery;\r\n            const param = [];\r\n            const param1 = [];\r\n      \r\n            let query = sqlquery;\r\n            while (query.indexOf(\"<@\") !== -1||query.indexOf(\"<#\") !== -1) {\r\n                let index1 = query.indexOf(\"<@\");\r\n                let index2 = query.indexOf(\"@>\");\r\n                let check=false;\r\n                if(query.indexOf(\"<@\") !== -1){\r\n                     index1 = query.indexOf(\"<@\");\r\n                     index2 = query.indexOf(\"@>\");\r\n                     check=true;\r\n                }\r\n                else if(query.indexOf(\"<#\") !== -1){\r\n                    index1 = query.indexOf(\"<#\");\r\n                    index2 = query.indexOf(\"#>\");\r\n                }\r\n                \r\n                const parameter = query.substring(index1 + 2, index2);\r\n                if (!param1.includes(parameter)) {\r\n                    param.push({ label: parameter, value: parameter });\r\n                    param1.push(parameter);\r\n                }\r\n                if(check){\r\n                    query = query.replace(\"<@\", \"\").replace(\"@>\", \"\");\r\n                }else{\r\n                    query = query.replace(\"<#\", \"\").replace(\"#>\", \"\");\r\n                }\r\n               \r\n            }\r\n            this.setState({ selectedRecord, optionalParameterList: param });\r\n\r\n            // selectedRecord[fieldName] = comboData;\r\n\r\n            // const sqlquery = comboData.item.ssqlquery;\r\n            // let firstIndex = sqlquery.indexOf(\"P$\");\r\n            // const lastIndex = sqlquery.lastIndexOf(\"P$\");\r\n\r\n            // const param = [];\r\n            // let first = sqlquery.indexOf(\"P$\");\r\n            // let endFirst = sqlquery.indexOf(\"$P\");\r\n            // do {\r\n\r\n            //     let second = sqlquery.indexOf(\"P$\", first + 1);\r\n            //     let endSecond = sqlquery.indexOf(\"$P\", endFirst + 1);\r\n            //     const parameter = sqlquery.substring(first + 2, endFirst);\r\n            //     param.push({ label: parameter, value: parameter });\r\n\r\n            //     first = second;\r\n            //     endFirst = endSecond;\r\n            //     firstIndex = second;\r\n            // }\r\n            // while (firstIndex === lastIndex)\r\n\r\n            // this.setState({ selectedRecord, optionalParameterList: param });\r\n        }\r\n        else {\r\n            selectedRecord[fieldName] = comboData;\r\n            this.setState({ selectedRecord });\r\n        }\r\n    }\r\n\r\n    onNumericInputOnChange = (value, name, item) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        selectedRecord[name] = value;\r\n\r\n        const inputData = {\r\n            dashboarddesignconfig: item,\r\n            inputfielddata: {\r\n                ...this.props.inputFieldData,\r\n                [name]: value,\r\n                [name.concat(\"_componentcode\")]: item.ndesigncomponentcode,\r\n                [name.concat(\"_componentname\")]: item.sdesigncomponentname,\r\n\r\n            },\r\n            parentcode: value.toString(),\r\n            parentid: item.ndashboarddesigncode,\r\n            userinfo: this.props.userInfo,\r\n            ndashboardtypecode: this.props.masterData.selectedDashBoardTypes.ndashboardtypecode,\r\n\r\n        }\r\n        const inputParam = {\r\n            viewDashBoardDesignConfigList: this.props.masterData.viewDashBoardDesignConfigList,\r\n            selectedRecord,\r\n            inputData\r\n        }\r\n\r\n        this.props.getReportViewChildDataListForDashBoard(inputParam);\r\n    }\r\n\r\n    onInputOnChange = (event, item) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n\r\n        if (event.target.type === 'checkbox') {\r\n            selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\r\n        }\r\n        else {\r\n            selectedRecord[event.target.name] = event.target.value;\r\n        }\r\n\r\n        const inputData = {\r\n            dashboarddesignconfig: item,\r\n            inputfielddata: {\r\n                ...this.props.Login.inputFieldData,\r\n                [event.target.name]: selectedRecord[event.target.name],\r\n                [event.target.name.concat(\"_componentcode\")]: item.ndesigncomponentcode,\r\n                [event.target.name.concat(\"_componentname\")]: item.sdesigncomponentname,\r\n\r\n            },\r\n            parentcode: selectedRecord[event.target.name].toString(),\r\n            parentid: item.ndashboarddesigncode,\r\n            userinfo: this.props.Login.userInfo,\r\n            ndashboardtypecode: this.props.Login.masterData.selectedDashBoardTypes.ndashboardtypecode,\r\n\r\n        }\r\n        const inputParam = {\r\n            viewDashBoardDesignConfigList: this.props.Login.masterData.viewDashBoardDesignConfigList,\r\n            selectedRecord,\r\n            inputData\r\n        }\r\n\r\n        this.props.getReportViewChildDataListForDashBoard(inputParam);\r\n    }\r\n\r\n    handleDateChange = (dateName, dateValue, item) => {\r\n        const { selectedRecord } = this.state;\r\n        selectedRecord[dateName] = dateValue;\r\n\r\n        const inputData = {\r\n            dashboarddesignconfig: item,\r\n            inputfielddata: {\r\n                ...this.props.inputFieldData,\r\n                [dateName]: formatInputDate(dateValue, true),\r\n                [dateName.concat(\"_componentcode\")]: item.ndesigncomponentcode,\r\n                [dateName.concat(\"_componentname\")]: item.sdesigncomponentname,\r\n\r\n            },\r\n            parentcode: formatInputDate(dateValue, true),\r\n            parentid: item.ndashboarddesigncode,\r\n            userinfo: this.props.userInfo,\r\n            ndashboardtypecode: this.props.masterData.selectedDashBoardTypes.ndashboardtypecode,\r\n\r\n        }\r\n        const inputParam = {\r\n            viewDashBoardDesignConfigList: this.props.masterData.viewDashBoardDesignConfigList,\r\n            selectedRecord,\r\n            inputData\r\n        }\r\n\r\n        this.props.getReportViewChildDataListForDashBoard(inputParam);\r\n    }\r\n\r\n    onInputOnChangeDefault = (event, item) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n\r\n        if (event.target.type === 'checkbox') {\r\n            selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\r\n        }\r\n        else {\r\n            selectedRecord[event.target.name] = event.target.value;\r\n        }\r\n\r\n        const inputData = {\r\n            dashboarddesignconfig: item,\r\n            inputfielddata: {\r\n                ...this.props.inputFieldData,\r\n                [event.target.name]: selectedRecord[event.target.name],\r\n                [event.target.name.concat(\"_componentcode\")]: item.ndesigncomponentcode,\r\n                [event.target.name.concat(\"_componentname\")]: item.sdesigncomponentname,\r\n\r\n            },\r\n            parentcode: selectedRecord[event.target.name].toString(),\r\n            parentid: item.ndashboarddesigncode,\r\n            userinfo: this.props.userInfo,\r\n            ndashboardtypecode: this.props.masterData.selectedDashBoardTypes.ndashboardtypecode,\r\n\r\n        }\r\n        const inputParam = {\r\n            viewDashBoardDesignConfigList: this.props.masterData.viewDashBoardDesignConfigList,\r\n            selectedRecord,\r\n            inputData\r\n        }\r\n\r\n        this.props.getReportViewChildDataListForDashBoard(inputParam);\r\n    }\r\n\r\n    onComboChangeDefaultValue = (comboData, fieldName, item) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if(comboData !== null)\r\n        {\r\n\r\n            selectedRecord[fieldName] = comboData;\r\n    \r\n            const inputData = {\r\n                dashboarddesignconfig: item,\r\n                inputfielddata: {\r\n                    ...this.props.inputFieldData,\r\n                    [fieldName]: comboData.value,\r\n                    [fieldName.concat(\"_componentcode\")]: item.ndesigncomponentcode,\r\n                    [fieldName.concat(\"_componentname\")]: item.sdesigncomponentname,\r\n    \r\n                },\r\n                parentcode: comboData.value.toString(),\r\n                parentid: item.ndashboarddesigncode,\r\n                userinfo: this.props.userInfo,\r\n                ndashboardtypecode: this.props.masterData.selectedDashBoardTypes.ndashboardtypecode,\r\n    \r\n            }\r\n            const inputParam = {\r\n                viewDashBoardDesignConfigList: this.props.masterData.viewDashBoardDesignConfigList,\r\n                selectedRecord,\r\n                inputData\r\n            }\r\n    \r\n            this.props.getReportViewChildDataListForDashBoard(inputParam);\r\n        }\r\n        else\r\n        {\r\n            selectedRecord[fieldName] = \"\";\r\n            this.setState({selectedRecord});\r\n        }\r\n        \r\n    }\r\n\r\n    componentDidUpdate(previousProps) {\r\n        if (this.props.masterData !== previousProps.masterData) {\r\n            let { dataState } = this.state;\r\n            if (this.props.dataState === undefined) {\r\n                dataState = { skip: 0, take: 10 }\r\n            }\r\n\r\n            let isOpen = false;\r\n            if (this.props.errorCode !== undefined && (this.state.operation === \"create\" || this.state.operation === \"update\")) {\r\n                isOpen = true;\r\n            }\r\n\r\n            // const addDesignParam = [];\r\n            // const gridData = [];\r\n\r\n            // this.props.masterData.selectedDesignConfig &&\r\n            //     this.props.masterData.selectedDesignConfig.forEach(item => {\r\n            //         addDesignParam.push({\r\n            //             ...item,\r\n            //             ndesigncomponentcode: { label: item.sdesigncomponentname, value: item.ndesigncomponentcode },\r\n            //             nsqlquerycode: { label: item.ssqlqueryname, value: item.nsqlquerycode }\r\n            //         });\r\n            //         gridData.push({\r\n            //             ...item,\r\n            //             ndesigncomponentcode: { label: item.sdesigncomponentname, value: item.ndesigncomponentcode },\r\n            //             nsqlquerycode: { label: item.ssqlqueryname, value: item.nsqlquerycode }\r\n            //         });\r\n            //     });\r\n\r\n            // const addMappingParam = [];\r\n            // const mappingGridData = [];\r\n\r\n            // this.props.masterData.DashBoardParameterMapping &&\r\n            //     this.props.masterData.DashBoardParameterMapping.forEach(item => {\r\n            //         addMappingParam.push({ ...item });\r\n            //         mappingGridData.push({ ...item });\r\n            //     });\r\n            this.setState({isOpen, dataState, \r\n                            //addDesignParam, gridData,\r\n                            //addMappingParam, mappingGridData, \r\n                            //dashBoardDefaultValue \r\n                        });\r\n        }\r\n        if ( this.props.addDesignParam !== previousProps.addDesignParam || this.props.gridData !== previousProps.gridData){\r\n            this.setState({\r\n                addDesignParam :this.props.addDesignParam, gridData:this.props.gridData,\r\n                addMappingParam:this.props.addMappingParam, mappingGridData:this.props.mappingGridData\r\n            });\r\n        }\r\n        if (this.props.selectedRecord !== previousProps.selectedRecord) {\r\n            this.setState({ selectedRecord: this.props.selectedRecord });\r\n        }\r\n\r\n    }\r\n\r\n    onSaveClick = (saveType, formRef) => {\r\n        if (this.props.screenName === \"IDS_PARAMETERMAPPING\") {\r\n            this.onSaveParameterMapping(saveType, formRef);\r\n        }\r\n        else if (this.props.screenName === \"IDS_DEFAULTVALUE\") {\r\n            this.onSaveClickDefaultValue(saveType, formRef);           \r\n        }\r\n        else {\r\n            if (this.state.addDesignParam && this.state.addDesignParam.length === 0) {\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_PLEASEADDPARAMETER\" }));\r\n            }\r\n            else {\r\n                this.onSaveClickAddDesign(saveType, formRef);\r\n            }\r\n        }\r\n    }\r\n\r\n    onSaveParameterMapping = (saveType, formRef) => {\r\n\r\n        let operation = this.props.operation;\r\n        let inputData = [];\r\n        let selectedId = null;\r\n\r\n        inputData[\"userinfo\"] = this.props.userInfo;\r\n        inputData[\"dashboardparametermapping\"] = [];\r\n        //inputData[\"reportparameteraction\"] = [];\r\n\r\n        this.state.mappingGridData.forEach(item => {\r\n            inputData[\"dashboardparametermapping\"].push({\r\n                \"ndashboardtypecode\": this.props.masterData.selectedDashBoardTypes.ndashboardtypecode,\r\n                \"nparentdashboarddesigncode\": item.nparentdashboarddesigncode,\r\n                \"nchilddashboarddesigncode\": item.nchilddashboarddesigncode,\r\n                \"sfieldname\": item.sfieldname,\r\n                \"nisactionparent\": item.nisactionparent\r\n            });\r\n        })\r\n\r\n        const inputParam = {\r\n            classUrl: this.props.inputParam.classUrl,\r\n            methodUrl: \"DashBoardParameterMapping\",\r\n            displayName: this.props.inputParam.displayName,\r\n            inputData: inputData,\r\n            operation: operation, saveType, formRef, dataState: undefined, selectedId\r\n        }\r\n        if (showEsign(this.props.userRoleControlRights, this.props.userInfo.nformcode, this.props.ncontrolCode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData: this.props.masterData }, saveType\r\n                    //openModal: true, screenName: this.props.intl.formatMessage({ id: this.props.Login.inputParam.displayName }),\r\n                    ///operation: this.props.Login.operation\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.crudMaster(inputParam, this.props.masterData, \"openChildModal\");\r\n        }\r\n    }\r\n\r\n    onSaveClickAddDesign = (saveType, formRef) => {\r\n\r\n        let dataState = undefined;\r\n        let operation = this.props.operation;\r\n        let inputData = [];\r\n        let selectedId = null;\r\n        let data = [];\r\n\r\n        if(this.state.addDesignParam.length === this.props.sqlQueryForParams.length)\r\n        {\r\n            inputData[\"userinfo\"] = this.props.userInfo;\r\n            this.state.addDesignParam.map(item => {\r\n                data.push({\r\n                    \"ndashboardtypecode\": this.props.masterData.selectedDashBoardTypes.ndashboardtypecode,\r\n                    \"ndesigncomponentcode\": item.ndesigncomponentcode && item.ndesigncomponentcode.value ? item.ndesigncomponentcode.value : item.ndesigncomponentcode,\r\n                    \"sfieldname\": item.sfieldname.label && item.sfieldname.label ? item.sfieldname.label : item.sfieldname,\r\n                    \"nsqlquerycode\": item.nsqlquerycode && item.nsqlquerycode.value ? item.nsqlquerycode.value : -1,\r\n                    \"sdisplayname\": item.sdisplayname,\r\n                    \"ndays\": item.ndays ? item.ndays : 0,\r\n                    \"nmandatory\": item.nmandatory && item.nmandatory ? item.nmandatory : item.sfieldname.item.Mandatory\r\n                });\r\n                return null;\r\n            })\r\n            inputData[\"dashboarddesignconfig\"] = data;\r\n            inputData[\"ndashboardtypecode\"] = this.props.masterData.selectedDashBoardTypes.ndashboardtypecode;\r\n\r\n            const inputParam = {\r\n                classUrl: this.props.inputParam.classUrl,\r\n                methodUrl: \"DashBoardDesignConfig\",\r\n                displayName: this.props.inputParam.displayName,\r\n                inputData: inputData,\r\n                operation: operation, saveType, formRef, dataState, selectedId\r\n            }\r\n            if (showEsign(this.props.userRoleControlRights, this.props.userInfo.nformcode, this.props.ncontrolCode)) {\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        loadEsign: true, screenData: { inputParam, masterData: this.props.masterData },\r\n                        openChildModal: true, screenName: this.props.intl.formatMessage({ id: this.props.inputParam.displayName }),\r\n                        operation: this.props.operation\r\n                    }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n            else {\r\n                this.props.crudMaster(inputParam, this.props.masterData, \"openChildModal\");\r\n            }  \r\n        }\r\n        else\r\n        {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_CONFIGUREALLPARAMETERS\" }))\r\n        }\r\n    }\r\n    \r\n    onSaveClickDefaultValue = () => {\r\n\r\n        // let dataState = undefined;\r\n        // let operation = this.props.operation;\r\n        let inputData = [];\r\n        // let selectedId = null;\r\n        let data = [];\r\n        inputData[\"userinfo\"] = this.props.userInfo;\r\n\r\n        this.props.masterData.viewDashBoardDesignConfigList.map(item => {\r\n            data.push({\r\n                \"ndashboarddesigncode\": item.ndashboarddesigncode,\r\n                \"ndashboardtypecode\": item.ndashboardtypecode,\r\n                \"ndesigncomponentcode\": item.ndesigncomponentcode,\r\n                \"sfieldname\": item.sfieldname,\r\n                \"nsqlquerycode\": item.nsqlquerycode ? item.nsqlquerycode : -1,\r\n                \"sdisplayname\": item.sdisplayname,\r\n                \"ndays\": item.ndays ? item.ndays : 0,\r\n                \"sdefaultvalue\": item.ndesigncomponentcode === designComponents.COMBOBOX ?\r\n                    this.state.selectedRecord[item.sfieldname] && this.state.selectedRecord[item.sfieldname].value ? this.state.selectedRecord[item.sfieldname].value : \"\"\r\n                    : this.state.selectedRecord[item.sfieldname] === undefined ? \"\" : this.state.selectedRecord[item.sfieldname]\r\n\r\n            });\r\n            return null;\r\n        })\r\n        inputData[\"dashboarddesignconfig\"] = data;\r\n        inputData[\"ndashboardtypecode\"] = this.props.masterData.selectedDashBoardTypes.ndashboardtypecode;\r\n\r\n        this.props.updateDashBoarddesignDefaultValue(inputData, this.props.masterData);\r\n        // const inputParam = {\r\n        //     classUrl: this.props.inputParam.classUrl,\r\n        //     methodUrl: \"DashBoardDesignConfig\",\r\n        //     displayName: this.props.inputParam.displayName,\r\n        //     inputData: inputData,\r\n        //     operation: operation, saveType, formRef, dataState, selectedId\r\n        // }\r\n        // if (showEsign(this.props.userRoleControlRights, this.props.userInfo.nformcode, this.props.ncontrolCode)) {\r\n        //     const updateInfo = {\r\n        //         typeName: DEFAULT_RETURN,\r\n        //         data: {\r\n        //             loadEsign: true, screenData: { inputParam, masterData: this.props.masterData },\r\n        //             openChildModal: true, screenName: this.props.intl.formatMessage({ id: this.props.inputParam.displayName }),\r\n        //             operation: this.props.operation\r\n        //         }\r\n        //     }\r\n        //     this.props.updateStore(updateInfo);\r\n        // }\r\n        // else {\r\n        //     this.props.crudMaster(inputParam, this.props.masterData, \"openChildModal\");\r\n        // }\r\n\r\n    }\r\n}\r\nexport default injectIntl(DashBoardDesignConfig);"]},"metadata":{},"sourceType":"module"}