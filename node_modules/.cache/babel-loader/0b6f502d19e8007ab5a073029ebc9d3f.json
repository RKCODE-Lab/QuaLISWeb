{"ast":null,"code":"var _jsxFileName = \"E:\\\\WorkingFolder\\\\React_Postgres\\\\ALPD\\\\branches\\\\SOURCE-513-PROD\\\\SOURCE-513-ALPD-5304\\\\QuaLISWeb\\\\src\\\\components\\\\type1component\\\\Type1Component.jsx\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { injectIntl } from 'react-intl';\nimport { Row, Col } from 'react-bootstrap';\nimport { toast } from 'react-toastify';\nimport { process } from '@progress/kendo-data-query';\nimport DataGrid from '../../components/data-grid/data-grid.component';\nimport SlideOutModal from '../slide-out-modal/SlideOutModal';\nimport Esign from '../../pages/audittrail/Esign';\nimport { getFieldSpecification } from './Type1FieldSpecificationList';\nimport AddType1Component from './AddType1Component';\nimport { callService, crudMaster, updateStore, validateEsignCredential, fetchRecord } from '../../actions';\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\nimport { showEsign, getControlMap, extractFieldHeader } from '../CommonScript';\nimport { ListWrapper } from '../client-group.styles';\nimport { transactionStatus, designComponents, formCode } from '../Enumeration';\n\nconst mapStateToProps = state => {\n  return {\n    Login: state.Login\n  };\n};\n\nclass Type1Component extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.dataStateChange = event => {\n      this.setState({\n        dataResult: process(this.state.data, event.dataState),\n        dataState: event.dataState\n      });\n    };\n\n    this.openModal = ncontrolCode => {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          selectedRecord: {},\n          operation: \"create\",\n          ncontrolCode,\n          selectedId: null,\n          openModal: true,\n          screenName: this.props.Login.inputParam.displayName\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.closeModal = () => {\n      let loadEsign = this.props.Login.loadEsign;\n      let openModal = this.props.Login.openModal;\n      let selectedRecord = this.props.Login.selectedRecord;\n      let selectedId = this.props.Login.selectedId;\n\n      if (this.props.Login.loadEsign) {\n        if (this.props.Login.operation === \"delete\") {\n          loadEsign = false;\n          openModal = false;\n          selectedRecord = {};\n        } else {\n          loadEsign = false;\n          selectedRecord['esignpassword'] = \"\";\n          selectedRecord['esigncomments'] = \"\";\n          selectedRecord['esignreason'] = \"\";\n        }\n      } else {\n        openModal = false;\n        selectedRecord = {};\n        selectedId = null;\n      }\n\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          openModal,\n          loadEsign,\n          selectedRecord,\n          //selectedId:null\n          selectedId\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onInputOnChange = event => {\n      const selectedRecord = this.state.selectedRecord || {};\n      selectedRecord[event.target.name] = event.target.value;\n\n      if (event.target.type === 'checkbox') {\n        if (event.target.name === \"agree\") {\n          selectedRecord[event.target.name] = event.target.checked === true ? 3 : 4;\n        }\n      } else {\n        selectedRecord[event.target.name] = event.target.value;\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.deleteRecord = deleteParam => {\n      const inputParam = {\n        classUrl: this.props.Login.inputParam.classUrl,\n        methodUrl: this.props.Login.inputParam.methodUrl,\n        displayName: this.props.Login.inputParam.displayName,\n        inputData: {\n          [this.props.Login.inputParam.methodUrl.toLowerCase()]: deleteParam.selectedRecord,\n          //.dataItem,\n          \"userinfo\": this.props.Login.userInfo\n        },\n        operation: deleteParam.operation,\n        dataState: this.state.dataState,\n        selectedRecord: { ...this.state.selectedRecord\n        }\n      };\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, deleteParam.ncontrolCode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData: this.props.Login.masterData\n            },\n            openModal: true,\n            screenName: this.props.intl.formatMessage({\n              id: this.props.Login.inputParam.displayName\n            }),\n            operation: deleteParam.operation\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\n      }\n    };\n\n    this.reloadData = () => {\n      const inputParam = {\n        inputData: {\n          \"userinfo\": this.props.Login.userInfo\n        },\n        classUrl: this.props.Login.inputParam.classUrl,\n        methodUrl: this.props.Login.inputParam.methodUrl,\n        userInfo: this.props.Login.userInfo,\n        displayName: this.props.Login.inputParam.displayName\n      };\n      this.props.callService(inputParam);\n    };\n\n    this.onSaveClick = (saveType, formRef) => {\n      //add / edit  \n      let inputData = [];\n      let dataState = undefined;\n      inputData[\"userinfo\"] = this.props.Login.userInfo;\n      let selectedId = null;\n\n      if (this.props.Login.operation === \"update\") {\n        // edit\n        dataState = this.state.dataState;\n        inputData[this.props.Login.inputParam.methodUrl.toLowerCase()] = { ...this.state.selectedRecord\n        };\n        this.extractedColumnList.map(item => {\n          return inputData[this.props.Login.inputParam.methodUrl.toLowerCase()][item.dataField] = this.state.selectedRecord[item.dataField] ? this.state.selectedRecord[item.dataField] : \"\";\n        });\n        selectedId = this.props.Login.selectedId;\n      } else {\n        //add                          \n        inputData[this.props.Login.inputParam.methodUrl.toLowerCase()] = {\n          \"nsitecode\": this.props.Login.userInfo.nmastersitecode\n        };\n        this.extractedColumnList.map(item => {\n          return inputData[this.props.Login.inputParam.methodUrl.toLowerCase()][item.dataField] = this.state.selectedRecord[item.dataField] ? this.state.selectedRecord[item.dataField] : \"\";\n        });\n      }\n\n      let clearSelectedRecordField = [];\n      this.extractedColumnList.map(item => {\n        let fieldName = item.dataField; //ALPD-5063 added by Dhanushya RI,Enable save and continue option in Type3 component based screen\n\n        if (saveType === transactionStatus.DEACTIVE && item.controlType !== \"NA\" && item.isClearField === true) {\n          clearSelectedRecordField.push(item);\n        }\n      });\n      const inputParam = {\n        classUrl: this.props.Login.inputParam.classUrl,\n        methodUrl: this.props.Login.inputParam.methodUrl,\n        displayName: this.props.Login.inputParam.displayName,\n        inputData: inputData,\n        operation: this.props.Login.operation,\n        saveType,\n        formRef,\n        selectedId,\n        dataState,\n        selectedRecord: { ...this.state.selectedRecord\n        }\n      };\n      const esignNeeded = showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode);\n\n      if (esignNeeded) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData: this.props.Login.masterData\n            },\n            openModal: true,\n            screenName: this.props.intl.formatMessage({\n              id: this.props.Login.inputParam.displayName\n            }),\n            operation: this.props.Login.operation\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\", \"\", \"\", clearSelectedRecordField);\n      }\n    };\n\n    this.validateEsign = () => {\n      const inputParam = {\n        inputData: {\n          \"userinfo\": { ...this.props.Login.userInfo,\n            sreason: this.state.selectedRecord[\"esigncomments\"],\n            nreasoncode: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].value,\n            spredefinedreason: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].label\n          },\n          password: this.state.selectedRecord[\"esignpassword\"]\n        },\n        screenData: this.props.Login.screenData\n      };\n      this.props.validateEsignCredential(inputParam, \"openModal\");\n    };\n\n    this.formRef = React.createRef();\n    this.extractedColumnList = [];\n    const _dataState = {\n      skip: 0,\n      take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n    };\n    this.state = {\n      data: [],\n      masterStatus: \"\",\n      error: \"\",\n      selectedRecord: {},\n      dataResult: [],\n      dataState: _dataState,\n      userRoleControlRights: [],\n      controlMap: new Map()\n    };\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\n      toast.warn(props.Login.masterStatus);\n      props.Login.masterStatus = \"\";\n    }\n\n    if (props.Login.error !== state.error) {\n      toast.error(props.Login.error);\n      props.Login.error = \"\";\n    }\n\n    return null;\n  }\n\n  render() {\n    let primaryKeyField = \"\";\n    let fieldList = {};\n\n    if (this.props.Login.inputParam !== undefined) {\n      fieldList = getFieldSpecification().get(this.props.Login.inputParam.methodUrl) || [];\n      this.extractedColumnList = extractFieldHeader(Object.values(fieldList));\n      primaryKeyField = Object.keys(fieldList).length > 0 ? fieldList[0].dataField : \"\";\n    }\n\n    const addId = this.props.Login.inputParam && this.state.controlMap.has(\"Add\".concat(this.props.Login.inputParam.methodUrl)) && this.state.controlMap.get(\"Add\".concat(this.props.Login.inputParam.methodUrl)).ncontrolcode;\n    const editId = this.props.Login.inputParam && this.state.controlMap.has(\"Edit\".concat(this.props.Login.inputParam.methodUrl)) && this.state.controlMap.get(\"Edit\".concat(this.props.Login.inputParam.methodUrl)).ncontrolcode;\n    const editParam = {\n      screenName: this.props.Login.inputParam && this.props.Login.inputParam.displayName && this.props.intl.formatMessage({\n        id: this.props.Login.inputParam.displayName\n      }),\n      operation: \"update\",\n      primaryKeyField,\n      inputParam: this.props.Login.inputParam,\n      userInfo: this.props.Login.userInfo,\n      ncontrolCode: editId\n    };\n    const deleteParam = {\n      operation: \"delete\"\n    };\n    const mandatoryFields = [];\n    this.extractedColumnList.forEach(item => item.mandatory === true ? mandatoryFields.push(item) : \"\");\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(ListWrapper, {\n      className: \"client-list-content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 25\n      }\n    }, this.state.data ? /*#__PURE__*/React.createElement(DataGrid, {\n      primaryKeyField: primaryKeyField,\n      data: this.state.data,\n      dataResult: this.state.dataResult,\n      dataState: this.state.dataState,\n      dataStateChange: this.dataStateChange,\n      extractedColumnList: this.extractedColumnList,\n      controlMap: this.state.controlMap,\n      userRoleControlRights: this.state.userRoleControlRights,\n      inputParam: this.props.Login.inputParam,\n      userInfo: this.props.Login.userInfo,\n      fetchRecord: this.props.fetchRecord,\n      editParam: editParam,\n      deleteRecord: this.deleteRecord,\n      deleteParam: deleteParam,\n      reloadData: this.reloadData,\n      addRecord: () => this.openModal(addId),\n      pageable: true,\n      scrollable: 'scrollable' // isComponent={true}\n      ,\n      gridHeight: '600px',\n      isActionRequired: true,\n      isToolBarRequired: true,\n      selectedId: this.props.Login.selectedId,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 33\n      }\n    }) : \"\"))), this.props.Login.openModal ? /*#__PURE__*/React.createElement(SlideOutModal, {\n      show: this.props.Login.openModal,\n      closeModal: this.closeModal,\n      operation: this.props.Login.operation,\n      inputParam: this.props.Login.inputParam,\n      screenName: this.props.Login.screenName,\n      onSaveClick: this.onSaveClick,\n      esign: this.props.Login.loadEsign,\n      validateEsign: this.validateEsign,\n      masterStatus: this.props.Login.masterStatus,\n      updateStore: this.props.updateStore,\n      selectedRecord: this.state.selectedRecord || {},\n      showSaveContinue: true //ALPD-5062 added by Dhanushya RI,Enable save and continue option in Type1 component based screen\n      ,\n      mandatoryFields: mandatoryFields,\n      addComponent: this.props.Login.loadEsign ? /*#__PURE__*/React.createElement(Esign, {\n        operation: this.props.Login.operation,\n        onInputOnChange: this.onInputOnChange,\n        inputParam: this.props.Login.inputParam,\n        selectedRecord: this.state.selectedRecord || {},\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 195,\n          columnNumber: 29\n        }\n      }) : /*#__PURE__*/React.createElement(AddType1Component, {\n        selectedRecord: this.state.selectedRecord || {},\n        onInputOnChange: this.onInputOnChange,\n        extractedColumnList: this.extractedColumnList,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 200,\n          columnNumber: 31\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 21\n      }\n    }) : \"\");\n  }\n\n  componentDidUpdate(previousProps) {\n    if (this.props.Login.masterData !== previousProps.Login.masterData) {\n      if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\n        const userRoleControlRights = [];\n\n        if (this.props.Login.userRoleControlRights) {\n          this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item => userRoleControlRights.push(item.ncontrolcode));\n        }\n\n        const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode);\n        this.setState({\n          userRoleControlRights,\n          controlMap,\n          data: this.props.Login.masterData,\n          dataResult: process(this.props.Login.masterData, this.state.dataState)\n        });\n      } else {\n        let {\n          dataState\n        } = this.state;\n\n        if (this.props.Login.dataState === undefined) {\n          dataState = {\n            skip: 0,\n            take: this.state.dataState.take\n          };\n        }\n\n        if (this.state.dataResult.data) {\n          if (this.state.dataResult.data.length === 1) {\n            let skipcount = this.state.dataState.skip > 0 ? this.state.dataState.skip - this.state.dataState.take : this.state.dataState.skip;\n            dataState = {\n              skip: skipcount,\n              take: this.state.dataState.take\n            };\n          }\n        }\n\n        this.setState({\n          data: this.props.Login.masterData,\n          selectedRecord: this.props.Login.selectedRecord,\n          dataResult: process(this.props.Login.masterData, dataState),\n          dataState\n        });\n      }\n    } else if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\n      this.setState({\n        selectedRecord: this.props.Login.selectedRecord\n      });\n    }\n  }\n\n}\n\nexport default connect(mapStateToProps, {\n  callService,\n  crudMaster,\n  updateStore,\n  validateEsignCredential,\n  fetchRecord\n})(injectIntl(Type1Component));","map":{"version":3,"sources":["E:/WorkingFolder/React_Postgres/ALPD/branches/SOURCE-513-PROD/SOURCE-513-ALPD-5304/QuaLISWeb/src/components/type1component/Type1Component.jsx"],"names":["React","connect","injectIntl","Row","Col","toast","process","DataGrid","SlideOutModal","Esign","getFieldSpecification","AddType1Component","callService","crudMaster","updateStore","validateEsignCredential","fetchRecord","DEFAULT_RETURN","showEsign","getControlMap","extractFieldHeader","ListWrapper","transactionStatus","designComponents","formCode","mapStateToProps","state","Login","Type1Component","Component","constructor","props","dataStateChange","event","setState","dataResult","data","dataState","openModal","ncontrolCode","updateInfo","typeName","selectedRecord","operation","selectedId","screenName","inputParam","displayName","closeModal","loadEsign","onInputOnChange","target","name","value","type","checked","deleteRecord","deleteParam","classUrl","methodUrl","inputData","toLowerCase","userInfo","userRoleControlRights","nformcode","screenData","masterData","intl","formatMessage","id","reloadData","onSaveClick","saveType","formRef","undefined","extractedColumnList","map","item","dataField","nmastersitecode","clearSelectedRecordField","fieldName","DEACTIVE","controlType","isClearField","push","esignNeeded","validateEsign","sreason","nreasoncode","spredefinedreason","label","password","createRef","skip","take","settings","parseInt","masterStatus","error","controlMap","Map","getDerivedStateFromProps","warn","render","primaryKeyField","fieldList","get","Object","values","keys","length","addId","has","concat","ncontrolcode","editId","editParam","mandatoryFields","forEach","mandatory","componentDidUpdate","previousProps","skipcount"],"mappings":"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","sourcesContent":["import React  from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { injectIntl } from 'react-intl';\r\nimport { Row, Col} from 'react-bootstrap';\r\nimport { toast } from 'react-toastify';\r\nimport { process } from '@progress/kendo-data-query';\r\nimport DataGrid from '../../components/data-grid/data-grid.component';\r\nimport SlideOutModal from '../slide-out-modal/SlideOutModal';\r\nimport Esign from '../../pages/audittrail/Esign';\r\nimport { getFieldSpecification } from './Type1FieldSpecificationList';\r\nimport AddType1Component from './AddType1Component';\r\nimport { callService, crudMaster, updateStore, validateEsignCredential, fetchRecord } from '../../actions';\r\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\r\nimport { showEsign, getControlMap, extractFieldHeader } from '../CommonScript';\r\nimport { ListWrapper } from '../client-group.styles';\r\nimport { transactionStatus, designComponents, formCode } from '../Enumeration';\r\n\r\nconst mapStateToProps = state => {\r\n    return ({ Login: state.Login })\r\n}\r\n\r\nclass Type1Component extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.formRef = React.createRef();\r\n        this.extractedColumnList = [];\r\n        const dataState = {\r\n            skip: 0,\r\n            take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5,\r\n        };\r\n        this.state = {\r\n            data: [], masterStatus: \"\", error: \"\", selectedRecord: {},\r\n            dataResult: [],\r\n            dataState: dataState,\r\n            userRoleControlRights: [],\r\n            controlMap: new Map(),\r\n        };\r\n    }\r\n\r\n    dataStateChange = (event) => {\r\n        this.setState({\r\n            dataResult: process(this.state.data, event.dataState),\r\n            dataState: event.dataState\r\n        });\r\n    }\r\n\r\n    openModal = (ncontrolCode) => {\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                selectedRecord: {}, operation: \"create\", ncontrolCode, selectedId:null,\r\n                openModal: true, screenName: this.props.Login.inputParam.displayName\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    closeModal = () => {\r\n        let loadEsign = this.props.Login.loadEsign;\r\n        let openModal = this.props.Login.openModal;\r\n        let selectedRecord = this.props.Login.selectedRecord;\r\n        let selectedId = this.props.Login.selectedId;\r\n        if (this.props.Login.loadEsign) {\r\n            if (this.props.Login.operation === \"delete\") {\r\n                loadEsign = false;\r\n                openModal = false;\r\n                selectedRecord = {};\r\n            }\r\n            else {\r\n                loadEsign = false;\r\n                selectedRecord['esignpassword'] = \"\"\r\n                selectedRecord['esigncomments'] = \"\"\r\n                selectedRecord['esignreason']=\"\"\r\n            }\r\n        }\r\n        else {\r\n            openModal = false;\r\n            selectedRecord = {};\r\n            selectedId=null;\r\n        }\r\n\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { openModal, loadEsign, selectedRecord, //selectedId:null\r\n            selectedId\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n\r\n    }\r\n\r\n    static getDerivedStateFromProps(props, state) {\r\n        if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\r\n            toast.warn(props.Login.masterStatus);\r\n            props.Login.masterStatus = \"\";\r\n        }\r\n\r\n        if (props.Login.error !== state.error) {\r\n            toast.error(props.Login.error)\r\n            props.Login.error = \"\";\r\n        }         \r\n        return null;\r\n    }\r\n\r\n    render() {\r\n        let primaryKeyField = \"\";\r\n        let fieldList = {};\r\n        if (this.props.Login.inputParam !== undefined) {\r\n            fieldList = getFieldSpecification().get(this.props.Login.inputParam.methodUrl) || [];\r\n            this.extractedColumnList = extractFieldHeader(Object.values(fieldList));\r\n            primaryKeyField = Object.keys(fieldList).length > 0 ? fieldList[0].dataField : \"\";\r\n        }\r\n\r\n        const addId = this.props.Login.inputParam && this.state.controlMap.has(\"Add\".concat(this.props.Login.inputParam.methodUrl))\r\n            && this.state.controlMap.get(\"Add\".concat(this.props.Login.inputParam.methodUrl)).ncontrolcode;\r\n\r\n        const editId = this.props.Login.inputParam && this.state.controlMap.has(\"Edit\".concat(this.props.Login.inputParam.methodUrl))\r\n               && this.state.controlMap.get(\"Edit\".concat(this.props.Login.inputParam.methodUrl)).ncontrolcode;\r\n    \r\n        const editParam = {screenName:this.props.Login.inputParam && this.props.Login.inputParam.displayName \r\n                            && this.props.intl.formatMessage({ id: this.props.Login.inputParam.displayName }), operation:\"update\",  primaryKeyField, \r\n            inputParam:this.props.Login.inputParam,   userInfo:this.props.Login.userInfo,  ncontrolCode:editId};\r\n\r\n        const deleteParam ={operation:\"delete\"};\r\n\r\n        const mandatoryFields=[];\r\n        this.extractedColumnList.forEach(item=>item.mandatory === true ? \r\n            mandatoryFields.push(item) :\"\"\r\n        );   \r\n        \r\n        return (<>\r\n                <Row>\r\n                    <Col>\r\n                        <ListWrapper className=\"client-list-content\">\r\n                            {/* <PrimaryHeader className=\"d-flex justify-content-between mb-3\">\r\n                                <HeaderName className=\"header-primary-md\">\r\n                                    {this.props.Login.inputParam && this.props.Login.inputParam.displayName ?\r\n                                        <FormattedMessage id={this.props.Login.inputParam.displayName} /> : \"\"}\r\n                                </HeaderName>\r\n                                <Button className=\"btn btn-user btn-primary-blue\"\r\n                                    hidden={this.props.Login.inputParam && this.state.userRoleControlRights.indexOf(addId) === -1}\r\n                                    onClick={() => this.openModal(addId)} role=\"button\">\r\n                                    <FontAwesomeIcon icon={faPlus} /> {}\r\n                                    <FormattedMessage id={\"IDS_ADD\"} defaultMessage='Add' />\r\n                                </Button>\r\n                            </PrimaryHeader> */}\r\n                            {this.state.data ?\r\n                                <DataGrid\r\n                                    primaryKeyField={primaryKeyField}\r\n                                    data={this.state.data}\r\n                                    dataResult={this.state.dataResult}\r\n                                    dataState={this.state.dataState}\r\n                                    dataStateChange={this.dataStateChange}\r\n                                    extractedColumnList={this.extractedColumnList}\r\n                                    controlMap={this.state.controlMap}\r\n                                    userRoleControlRights={this.state.userRoleControlRights}\r\n                                    inputParam={this.props.Login.inputParam}\r\n                                    userInfo={this.props.Login.userInfo}\r\n                                    fetchRecord={this.props.fetchRecord}\r\n                                    editParam={editParam}\r\n                                    deleteRecord={this.deleteRecord}\r\n                                    deleteParam={deleteParam}\r\n                                    reloadData={this.reloadData}\r\n                                    addRecord = {() => this.openModal(addId)}\r\n                                    pageable={true}\r\n                                    scrollable={'scrollable'}\r\n                                    // isComponent={true}\r\n                                    gridHeight = {'600px'}\r\n                                    isActionRequired={true}\r\n                                    isToolBarRequired={true}\r\n                                    selectedId={this.props.Login.selectedId}\r\n                                />\r\n                                : \"\"}\r\n                        </ListWrapper>\r\n                    </Col>\r\n                </Row>\r\n \r\n                {/* Below Condition Added to avoid unwanted rendering of SlideOut */}\r\n                {this.props.Login.openModal ? \r\n                    <SlideOutModal show={this.props.Login.openModal}\r\n                        closeModal={this.closeModal}\r\n                        operation={this.props.Login.operation}\r\n                        inputParam={this.props.Login.inputParam}\r\n                        screenName={this.props.Login.screenName}\r\n                        onSaveClick={this.onSaveClick}\r\n                        esign={this.props.Login.loadEsign}\r\n                        validateEsign={this.validateEsign}\r\n                        masterStatus={this.props.Login.masterStatus}\r\n                        updateStore={this.props.updateStore}\r\n                        selectedRecord={this.state.selectedRecord || {}}\r\n                        showSaveContinue={true} //ALPD-5062 added by Dhanushya RI,Enable save and continue option in Type1 component based screen\r\n                        mandatoryFields={mandatoryFields}\r\n                        addComponent={this.props.Login.loadEsign ?\r\n                            <Esign operation={this.props.Login.operation}\r\n                                onInputOnChange={this.onInputOnChange}\r\n                                inputParam={this.props.Login.inputParam}\r\n                                selectedRecord={this.state.selectedRecord || {}}\r\n                            />\r\n                            : <AddType1Component\r\n                                selectedRecord={this.state.selectedRecord || {}}\r\n                                onInputOnChange={this.onInputOnChange}\r\n                                extractedColumnList={this.extractedColumnList}\r\n                            />}\r\n                    /> :\"\"}\r\n            </>\r\n        );\r\n    }\r\n\r\n    componentDidUpdate(previousProps) {        \r\n        if (this.props.Login.masterData !== previousProps.Login.masterData) {\r\n            if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\r\n                const userRoleControlRights = [];\r\n                if (this.props.Login.userRoleControlRights) {\r\n                    this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item =>\r\n                        userRoleControlRights.push(item.ncontrolcode))\r\n                }\r\n                const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode)\r\n                this.setState({\r\n                    userRoleControlRights, controlMap, data: this.props.Login.masterData,\r\n                    dataResult: process(this.props.Login.masterData, this.state.dataState),\r\n                });\r\n            }\r\n            else {        \r\n                let {dataState}=this.state;\r\n                if(this.props.Login.dataState===undefined){\r\n                    dataState={skip:0,take:this.state.dataState.take}\r\n                }\r\n                 if(this.state.dataResult.data){\r\n                     if(this.state.dataResult.data.length ===1){\r\n                        let skipcount=this.state.dataState.skip>0?(this.state.dataState.skip-this.state.dataState.take):\r\n                        this.state.dataState.skip\r\n                         dataState={skip:skipcount,take:this.state.dataState.take}\r\n                     }\r\n                 }\r\n                this.setState({\r\n                    data: this.props.Login.masterData, selectedRecord: this.props.Login.selectedRecord,\r\n                    dataResult: process(this.props.Login.masterData,dataState),\r\n                    dataState\r\n                });\r\n            }  \r\n        }\r\n        else if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\r\n            this.setState({ selectedRecord: this.props.Login.selectedRecord });\r\n        }\r\n    }\r\n\r\n    onInputOnChange = (event) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        selectedRecord[event.target.name] = event.target.value;\r\n        if (event.target.type === 'checkbox') {\r\n            if (event.target.name === \"agree\") {\r\n                selectedRecord[event.target.name] = event.target.checked === true ? 3 : 4;\r\n            }\r\n        }\r\n        else {\r\n            selectedRecord[event.target.name] = event.target.value;\r\n        }\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    //deleteRecord = (selectedRecord, operation, ncontrolCode) => {\r\n    deleteRecord = (deleteParam) =>{\r\n        const inputParam = {\r\n            classUrl: this.props.Login.inputParam.classUrl,\r\n            methodUrl: this.props.Login.inputParam.methodUrl,\r\n            displayName: this.props.Login.inputParam.displayName,\r\n            inputData: {\r\n                [this.props.Login.inputParam.methodUrl.toLowerCase()]: deleteParam.selectedRecord,//.dataItem,\r\n                \"userinfo\": this.props.Login.userInfo\r\n            },\r\n            operation:deleteParam.operation,\r\n            dataState:this.state.dataState,\r\n            selectedRecord:{...this.state.selectedRecord}\r\n        }\r\n\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, deleteParam.ncontrolCode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData: this.props.Login.masterData },\r\n                    openModal: true, screenName: this.props.intl.formatMessage({ id: this.props.Login.inputParam.displayName }),\r\n                    operation:deleteParam.operation\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\r\n        }\r\n    }\r\n\r\n    reloadData = () => {\r\n        const inputParam = {\r\n            inputData: { \"userinfo\": this.props.Login.userInfo },\r\n            classUrl: this.props.Login.inputParam.classUrl,\r\n            methodUrl: this.props.Login.inputParam.methodUrl,\r\n            userInfo: this.props.Login.userInfo,\r\n            displayName: this.props.Login.inputParam.displayName\r\n        };\r\n        this.props.callService(inputParam);\r\n    }\r\n\r\n    onSaveClick = (saveType, formRef) => {\r\n        //add / edit  \r\n\r\n        let inputData = [];\r\n        let dataState =undefined;\r\n        inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n        let selectedId = null;\r\n        if (this.props.Login.operation === \"update\") {    // edit\r\n            dataState=this.state.dataState\r\n            inputData[this.props.Login.inputParam.methodUrl.toLowerCase()] = {...this.state.selectedRecord};\r\n            this.extractedColumnList.map(item => {\r\n                return inputData[this.props.Login.inputParam.methodUrl.toLowerCase()][item.dataField] = this.state.selectedRecord[item.dataField] ? this.state.selectedRecord[item.dataField] : \"\";\r\n            })\r\n            selectedId = this.props.Login.selectedId; \r\n        }\r\n        else {\r\n            //add                          \r\n            inputData[this.props.Login.inputParam.methodUrl.toLowerCase()] = { \"nsitecode\": this.props.Login.userInfo.nmastersitecode };\r\n\r\n            this.extractedColumnList.map(item => {\r\n                return inputData[this.props.Login.inputParam.methodUrl.toLowerCase()][item.dataField] = this.state.selectedRecord[item.dataField] ? this.state.selectedRecord[item.dataField]:\"\"\r\n            })\r\n        }\r\n        let clearSelectedRecordField=[];\r\n        this.extractedColumnList.map(item => {\r\n            let fieldName = item.dataField;\r\n            //ALPD-5063 added by Dhanushya RI,Enable save and continue option in Type3 component based screen\r\n            if(saveType===transactionStatus.DEACTIVE && item.controlType !== \"NA\" && item.isClearField === true ){\r\n                clearSelectedRecordField.push(item);\r\n            }\r\n        })\r\n\r\n        const inputParam = {\r\n            classUrl: this.props.Login.inputParam.classUrl,\r\n            methodUrl: this.props.Login.inputParam.methodUrl,\r\n            displayName: this.props.Login.inputParam.displayName,\r\n            inputData: inputData, operation: this.props.Login.operation,\r\n            saveType, formRef,  selectedId,dataState,\r\n            selectedRecord:{...this.state.selectedRecord}\r\n\r\n        }\r\n        const esignNeeded = showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode);\r\n        if (esignNeeded) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData: this.props.Login.masterData },\r\n                    openModal: true, screenName: this.props.intl.formatMessage({ id: this.props.Login.inputParam.displayName }),\r\n                    operation: this.props.Login.operation\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\",\"\",\"\",clearSelectedRecordField);\r\n        }\r\n    }\r\n\r\n    validateEsign = () => {\r\n        const inputParam = {\r\n            inputData: {\r\n                \"userinfo\": {\r\n                    ...this.props.Login.userInfo,\r\n                    sreason: this.state.selectedRecord[\"esigncomments\"],\r\n                    nreasoncode:this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].value,\r\n                    spredefinedreason:this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].label,\r\n                },\r\n                password: this.state.selectedRecord[\"esignpassword\"]\r\n            },\r\n            screenData: this.props.Login.screenData\r\n        }\r\n        this.props.validateEsignCredential(inputParam, \"openModal\");\r\n    }\r\n\r\n}\r\nexport default connect(mapStateToProps, { callService, crudMaster, updateStore, validateEsignCredential, \r\n    fetchRecord})(injectIntl(Type1Component));\r\n"]},"metadata":{},"sourceType":"module"}