{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _typeof from \"@babel/runtime/helpers/typeof\";\nimport { getFieldConfig, getOperatorConfig, getFieldWidgetConfig, getFuncConfig } from \"./configUtils\";\nimport { getOperatorsForField, getWidgetForFieldOp, getNewValueForFieldOp } from \"../utils/ruleUtils\";\nimport { defaultValue, deepEqual, logger } from \"../utils/stuff\";\nimport { getItemInListValues } from \"../utils/listValues\";\nimport { defaultOperatorOptions } from \"../utils/defaultUtils\";\nimport { fixPathsInTree } from \"../utils/treeUtils\";\nimport omit from \"lodash/omit\";\nimport { List } from \"immutable\";\n\nvar typeOf = function typeOf(v) {\n  if (_typeof(v) == \"object\" && v !== null && Array.isArray(v)) return \"array\";else return _typeof(v);\n};\n\nvar isTypeOf = function isTypeOf(v, type) {\n  if (typeOf(v) == type) return true;\n  if (type == \"number\" && !isNaN(v)) return true; //can be casted\n\n  return false;\n};\n\nexport var validateAndFixTree = function validateAndFixTree(newTree, _oldTree, newConfig, oldConfig) {\n  var tree = validateTree(newTree, _oldTree, newConfig, oldConfig);\n  tree = fixPathsInTree(tree);\n  return tree;\n};\nexport var validateTree = function validateTree(tree, _oldTree, config, oldConfig, removeEmptyGroups, removeIncompleteRules) {\n  if (removeEmptyGroups === undefined) {\n    removeEmptyGroups = config.settings.removeEmptyGroupsOnLoad;\n  }\n\n  if (removeIncompleteRules === undefined) {\n    removeIncompleteRules = config.settings.removeIncompleteRulesOnLoad;\n  }\n\n  var c = {\n    config: config,\n    oldConfig: oldConfig,\n    removeEmptyGroups: removeEmptyGroups,\n    removeIncompleteRules: removeIncompleteRules\n  };\n  return validateItem(tree, [], null, {}, c);\n};\n\nfunction validateItem(item, path, itemId, meta, c) {\n  var type = item.get(\"type\");\n  var children = item.get(\"children1\");\n\n  if ((type === \"group\" || type === \"rule_group\" || type == \"case_group\" || type == \"switch_group\") && children && children.size) {\n    return validateGroup(item, path, itemId, meta, c);\n  } else if (type === \"rule\") {\n    return validateRule(item, path, itemId, meta, c);\n  } else {\n    return item;\n  }\n}\n\nfunction validateGroup(item, path, itemId, meta, c) {\n  var removeEmptyGroups = c.removeEmptyGroups;\n  var id = item.get(\"id\");\n  var children = item.get(\"children1\");\n  var oldChildren = children;\n\n  if (!id && itemId) {\n    id = itemId;\n    item = item.set(\"id\", id);\n    meta.sanitized = true;\n  } //validate children\n\n\n  var submeta = {};\n  children = children.map(function (currentChild, childId) {\n    return validateItem(currentChild, path.concat(id), childId, submeta, c);\n  });\n  if (removeEmptyGroups) children = children.filter(function (currentChild) {\n    return currentChild != undefined;\n  });\n  var sanitized = submeta.sanitized || oldChildren.size != children.size;\n\n  if (!children.size && removeEmptyGroups && path.length) {\n    sanitized = true;\n    item = undefined;\n  }\n\n  if (sanitized) meta.sanitized = true;\n  if (sanitized && item) item = item.set(\"children1\", children);\n  return item;\n}\n\nfunction validateRule(item, path, itemId, meta, c) {\n  var removeIncompleteRules = c.removeIncompleteRules,\n      config = c.config,\n      oldConfig = c.oldConfig;\n  var showErrorMessage = config.settings.showErrorMessage;\n  var id = item.get(\"id\");\n  var properties = item.get(\"properties\");\n  var field = properties.get(\"field\") || null;\n  var operator = properties.get(\"operator\") || null;\n  var operatorOptions = properties.get(\"operatorOptions\");\n  var valueSrc = properties.get(\"valueSrc\");\n  var value = properties.get(\"value\");\n  var valueError = properties.get(\"valueError\");\n  var oldSerialized = {\n    field: field,\n    operator: operator,\n    operatorOptions: operatorOptions ? operatorOptions.toJS() : {},\n    valueSrc: valueSrc ? valueSrc.toJS() : null,\n    value: value ? value.toJS() : null,\n    valueError: valueError ? valueError.toJS() : null\n  };\n\n  var _wasValid = field && operator && value && !value.includes(undefined);\n\n  if (!id && itemId) {\n    id = itemId;\n    item = item.set(\"id\", id);\n    meta.sanitized = true;\n  } //validate field\n\n\n  var fieldDefinition = field ? getFieldConfig(config, field) : null;\n\n  if (field && !fieldDefinition) {\n    logger.warn(\"No config for field \".concat(field));\n    field = null;\n  }\n\n  if (field == null) {\n    properties = [\"operator\", \"operatorOptions\", \"valueSrc\", \"value\"].reduce(function (map, key) {\n      return map[\"delete\"](key);\n    }, properties);\n    operator = null;\n  } //validate operator\n  // Backward compatibility: obsolete operator range_between\n\n\n  if (operator == \"range_between\" || operator == \"range_not_between\") {\n    operator = operator == \"range_between\" ? \"between\" : \"not_between\";\n    console.info(\"Fixed operator \".concat(properties.get(\"operator\"), \" to \").concat(operator));\n    properties = properties.set(\"operator\", operator);\n  }\n\n  var operatorDefinition = operator ? getOperatorConfig(config, operator, field) : null;\n\n  if (operator && !operatorDefinition) {\n    console.warn(\"No config for operator \".concat(operator));\n    operator = null;\n  }\n\n  var availOps = field ? getOperatorsForField(config, field) : [];\n\n  if (!availOps) {\n    console.warn(\"Type of field \".concat(field, \" is not supported\"));\n    operator = null;\n  } else if (operator && availOps.indexOf(operator) == -1) {\n    if (operator == \"is_empty\" || operator == \"is_not_empty\") {\n      // Backward compatibility: is_empty #494\n      operator = operator == \"is_empty\" ? \"is_null\" : \"is_not_null\";\n      console.info(\"Fixed operator \".concat(properties.get(\"operator\"), \" to \").concat(operator, \" for \").concat(field));\n      properties = properties.set(\"operator\", operator);\n    } else {\n      console.warn(\"Operator \".concat(operator, \" is not supported for field \").concat(field));\n      operator = null;\n    }\n  }\n\n  if (operator == null) {\n    properties = properties[\"delete\"](\"operatorOptions\");\n    properties = properties[\"delete\"](\"valueSrc\");\n    properties = properties[\"delete\"](\"value\");\n  } //validate operator options\n\n\n  operatorOptions = properties.get(\"operatorOptions\");\n\n  var _operatorCardinality = operator ? defaultValue(operatorDefinition.cardinality, 1) : null;\n\n  if (!operator || operatorOptions && !operatorDefinition.options) {\n    operatorOptions = null;\n    properties = properties[\"delete\"](\"operatorOptions\");\n  } else if (operator && !operatorOptions && operatorDefinition.options) {\n    operatorOptions = defaultOperatorOptions(config, operator, field);\n    properties = properties.set(\"operatorOptions\", operatorOptions);\n  } //validate values\n\n\n  valueSrc = properties.get(\"valueSrc\");\n  value = properties.get(\"value\");\n  var canFix = !showErrorMessage;\n  var isEndValue = true;\n\n  var _getNewValueForFieldO = getNewValueForFieldOp(config, oldConfig, properties, field, operator, null, canFix, isEndValue),\n      newValue = _getNewValueForFieldO.newValue,\n      newValueSrc = _getNewValueForFieldO.newValueSrc,\n      newValueError = _getNewValueForFieldO.newValueError;\n\n  value = newValue;\n  valueSrc = newValueSrc;\n  valueError = newValueError;\n  properties = properties.set(\"value\", value);\n  properties = properties.set(\"valueSrc\", valueSrc);\n\n  if (showErrorMessage) {\n    properties = properties.set(\"valueError\", valueError);\n  }\n\n  var newSerialized = {\n    field: field,\n    operator: operator,\n    operatorOptions: operatorOptions ? operatorOptions.toJS() : {},\n    valueSrc: valueSrc ? valueSrc.toJS() : null,\n    value: value ? value.toJS() : null,\n    valueError: valueError ? valueError.toJS() : null\n  };\n  var sanitized = !deepEqual(oldSerialized, newSerialized);\n  var isComplete = field && operator && value && !value.includes(undefined);\n  if (sanitized) meta.sanitized = true;\n  if (!isComplete && removeIncompleteRules) item = undefined;else if (sanitized) item = item.set(\"properties\", properties);\n  return item;\n}\n/**\n * \n * @param {bool} canFix true is useful for func values to remove bad args\n * @param {bool} isEndValue false if value is in process of editing by user\n * @param {bool} isRawValue false is used only internally from validateFuncValue\n * @return {array} [validError, fixedValue] - if validError === null and canFix == true, fixedValue can differ from value if was fixed\n */\n\n\nexport var validateValue = function validateValue(config, leftField, field, operator, value, valueType, valueSrc, asyncListValues) {\n  var canFix = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : false;\n  var isEndValue = arguments.length > 9 && arguments[9] !== undefined ? arguments[9] : false;\n  var isRawValue = arguments.length > 10 && arguments[10] !== undefined ? arguments[10] : true;\n  var validError = null;\n  var fixedValue = value;\n\n  if (value != null) {\n    if (valueSrc == \"field\") {\n      var _validateFieldValue = validateFieldValue(leftField, field, value, valueSrc, valueType, asyncListValues, config, operator, isEndValue, canFix);\n\n      var _validateFieldValue2 = _slicedToArray(_validateFieldValue, 2);\n\n      validError = _validateFieldValue2[0];\n      fixedValue = _validateFieldValue2[1];\n    } else if (valueSrc == \"func\") {\n      var _validateFuncValue = validateFuncValue(leftField, field, value, valueSrc, valueType, asyncListValues, config, operator, isEndValue, canFix);\n\n      var _validateFuncValue2 = _slicedToArray(_validateFuncValue, 2);\n\n      validError = _validateFuncValue2[0];\n      fixedValue = _validateFuncValue2[1];\n    } else if (valueSrc == \"value\" || !valueSrc) {\n      var _validateNormalValue = validateNormalValue(leftField, field, value, valueSrc, valueType, asyncListValues, config, operator, isEndValue, canFix);\n\n      var _validateNormalValue2 = _slicedToArray(_validateNormalValue, 2);\n\n      validError = _validateNormalValue2[0];\n      fixedValue = _validateNormalValue2[1];\n    }\n\n    if (!validError) {\n      var fieldConfig = getFieldConfig(config, field);\n      var w = getWidgetForFieldOp(config, field, operator, valueSrc);\n      var operatorDefinition = operator ? getOperatorConfig(config, operator, field) : null;\n      var fieldWidgetDefinition = omit(getFieldWidgetConfig(config, field, operator, w, valueSrc), [\"factory\"]);\n      var rightFieldDefinition = valueSrc == \"field\" ? getFieldConfig(config, value) : null;\n      var fieldSettings = fieldWidgetDefinition; // widget definition merged with fieldSettings\n\n      var fn = fieldWidgetDefinition.validateValue;\n\n      if (typeof fn == \"function\") {\n        var args = [fixedValue, fieldSettings, operator, operatorDefinition];\n        if (valueSrc == \"field\") args.push(rightFieldDefinition);\n        var validResult = fn.apply(void 0, args);\n\n        if (typeof validResult == \"boolean\") {\n          if (validResult == false) validError = \"Invalid value\";\n        } else {\n          validError = validResult;\n        }\n      }\n    }\n  }\n\n  if (isRawValue && validError) {\n    console.warn(\"[RAQB validate]\", \"Field \".concat(field, \": \").concat(validError));\n  }\n\n  return [validError, fixedValue];\n};\n\nvar validateValueInList = function validateValueInList(value, listValues, canFix, isEndValue, removeInvalidMultiSelectValuesOnLoad) {\n  var values = List.isList(value) ? value.toJS() : value instanceof Array ? _toConsumableArray(value) : undefined;\n\n  if (values) {\n    var _values$reduce = values.reduce(function (_ref, val) {\n      var _ref2 = _slicedToArray(_ref, 2),\n          goodVals = _ref2[0],\n          badVals = _ref2[1];\n\n      var vv = getItemInListValues(listValues, val);\n\n      if (vv == undefined) {\n        return [goodVals, [].concat(_toConsumableArray(badVals), [val])];\n      } else {\n        return [[].concat(_toConsumableArray(goodVals), [vv.value]), badVals];\n      }\n    }, [[], []]),\n        _values$reduce2 = _slicedToArray(_values$reduce, 2),\n        goodValues = _values$reduce2[0],\n        badValues = _values$reduce2[1];\n\n    var plural = badValues.length > 1;\n    var err = badValues.length ? \"\".concat(plural ? \"Values\" : \"Value\", \" \").concat(badValues.join(\", \"), \" \").concat(plural ? \"are\" : \"is\", \" not in list of values\") : null; // always remove bad values at tree validation as user can't unselect them (except AntDesign widget)\n\n    if (removeInvalidMultiSelectValuesOnLoad !== undefined) {\n      canFix = removeInvalidMultiSelectValuesOnLoad;\n    } else {\n      canFix = canFix || isEndValue;\n    }\n\n    return [err, canFix ? goodValues : value];\n  } else {\n    var vv = getItemInListValues(listValues, value);\n\n    if (vv == undefined) {\n      return [\"Value \".concat(value, \" is not in list of values\"), value];\n    } else {\n      value = vv.value;\n    }\n\n    return [null, value];\n  }\n};\n/**\n* \n*/\n\n\nvar validateNormalValue = function validateNormalValue(leftField, field, value, valueSrc, valueType, asyncListValues, config) {\n  var operator = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : null;\n  var isEndValue = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : false;\n  var canFix = arguments.length > 9 && arguments[9] !== undefined ? arguments[9] : false;\n\n  if (field) {\n    var fieldConfig = getFieldConfig(config, field);\n    var w = getWidgetForFieldOp(config, field, operator, valueSrc);\n    var wConfig = config.widgets[w];\n    var wType = wConfig.type;\n    var jsType = wConfig.jsType;\n    var fieldSettings = fieldConfig.fieldSettings;\n    if (valueType && valueType != wType) return [\"Value should have type \".concat(wType, \", but got value of type \").concat(valueType), value];\n\n    if (jsType && !isTypeOf(value, jsType) && !fieldSettings.listValues) {\n      //tip: can skip tye check for listValues\n      return [\"Value should have JS type \".concat(jsType, \", but got value of type \").concat(_typeof(value)), value];\n    }\n\n    if (fieldSettings) {\n      var listValues = asyncListValues || fieldSettings.listValues;\n\n      if (listValues && !fieldSettings.allowCustomValues) {\n        return validateValueInList(value, listValues, canFix, isEndValue, config.settings.removeInvalidMultiSelectValuesOnLoad);\n      }\n\n      if (fieldSettings.min != null && value < fieldSettings.min) {\n        return [\"Value \".concat(value, \" < min \").concat(fieldSettings.min), canFix ? fieldSettings.min : value];\n      }\n\n      if (fieldSettings.max != null && value > fieldSettings.max) {\n        return [\"Value \".concat(value, \" > max \").concat(fieldSettings.max), canFix ? fieldSettings.max : value];\n      }\n    }\n  }\n\n  return [null, value];\n};\n/**\n* \n*/\n\n\nvar validateFieldValue = function validateFieldValue(leftField, field, value, _valueSrc, valueType, asyncListValues, config) {\n  var operator = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : null;\n  var isEndValue = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : false;\n  var canFix = arguments.length > 9 && arguments[9] !== undefined ? arguments[9] : false;\n  var fieldSeparator = config.settings.fieldSeparator;\n  var isFuncArg = _typeof(field) == \"object\" && (field === null || field === void 0 ? void 0 : field._isFuncArg);\n  var leftFieldStr = Array.isArray(leftField) ? leftField.join(fieldSeparator) : leftField;\n  var rightFieldStr = Array.isArray(value) ? value.join(fieldSeparator) : value;\n  var rightFieldDefinition = getFieldConfig(config, value);\n  if (!rightFieldDefinition) return [\"Unknown field \".concat(value), value];\n  if (rightFieldStr == leftFieldStr && !isFuncArg) return [\"Can't compare field \".concat(leftField, \" with itself\"), value];\n  if (valueType && valueType != rightFieldDefinition.type) return [\"Field \".concat(value, \" is of type \").concat(rightFieldDefinition.type, \", but expected \").concat(valueType), value];\n  return [null, value];\n};\n/**\n* \n*/\n\n\nvar validateFuncValue = function validateFuncValue(leftField, field, value, _valueSrc, valueType, asyncListValues, config) {\n  var operator = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : null;\n  var isEndValue = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : false;\n  var canFix = arguments.length > 9 && arguments[9] !== undefined ? arguments[9] : false;\n  var fixedValue = value;\n\n  if (value) {\n    var funcKey = value.get(\"func\");\n\n    if (funcKey) {\n      var funcConfig = getFuncConfig(config, funcKey);\n\n      if (funcConfig) {\n        if (valueType && funcConfig.returnType != valueType) return [\"Function \".concat(funcKey, \" should return value of type \").concat(funcConfig.returnType, \", but got \").concat(valueType), value];\n\n        for (var argKey in funcConfig.args) {\n          var argConfig = funcConfig.args[argKey];\n          var args = fixedValue.get(\"args\");\n          var argVal = args ? args.get(argKey) : undefined;\n          var fieldDef = getFieldConfig(config, argConfig);\n          var argValue = argVal ? argVal.get(\"value\") : undefined;\n          var argValueSrc = argVal ? argVal.get(\"valueSrc\") : undefined;\n\n          if (argValue !== undefined) {\n            var _validateValue = validateValue(config, leftField, fieldDef, operator, argValue, argConfig.type, argValueSrc, asyncListValues, canFix, isEndValue, false),\n                _validateValue2 = _slicedToArray(_validateValue, 2),\n                argValidError = _validateValue2[0],\n                fixedArgVal = _validateValue2[1];\n\n            if (argValidError !== null) {\n              if (canFix) {\n                fixedValue = fixedValue.deleteIn([\"args\", argKey]);\n\n                if (argConfig.defaultValue !== undefined) {\n                  fixedValue = fixedValue.setIn([\"args\", argKey, \"value\"], argConfig.defaultValue);\n                  fixedValue = fixedValue.setIn([\"args\", argKey, \"valueSrc\"], \"value\");\n                }\n              } else {\n                return [\"Invalid value of arg \".concat(argKey, \" for func \").concat(funcKey, \": \").concat(argValidError), value];\n              }\n            } else if (fixedArgVal !== argValue) {\n              fixedValue = fixedValue.setIn([\"args\", argKey, \"value\"], fixedArgVal);\n            }\n          } else if (isEndValue && argConfig.defaultValue === undefined && !canFix) {\n            return [\"Value of arg \".concat(argKey, \" for func \").concat(funcKey, \" is required\"), value];\n          }\n        }\n      } else return [\"Unknown function \".concat(funcKey), value];\n    } // else it's not function value\n\n  } // empty value\n\n\n  return [null, fixedValue];\n};","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/node_modules/@react-awesome-query-builder/core/esm/utils/validation.js"],"names":["_toConsumableArray","_slicedToArray","_typeof","getFieldConfig","getOperatorConfig","getFieldWidgetConfig","getFuncConfig","getOperatorsForField","getWidgetForFieldOp","getNewValueForFieldOp","defaultValue","deepEqual","logger","getItemInListValues","defaultOperatorOptions","fixPathsInTree","omit","List","typeOf","v","Array","isArray","isTypeOf","type","isNaN","validateAndFixTree","newTree","_oldTree","newConfig","oldConfig","tree","validateTree","config","removeEmptyGroups","removeIncompleteRules","undefined","settings","removeEmptyGroupsOnLoad","removeIncompleteRulesOnLoad","c","validateItem","item","path","itemId","meta","get","children","size","validateGroup","validateRule","id","oldChildren","set","sanitized","submeta","map","currentChild","childId","concat","filter","length","showErrorMessage","properties","field","operator","operatorOptions","valueSrc","value","valueError","oldSerialized","toJS","_wasValid","includes","fieldDefinition","warn","reduce","key","console","info","operatorDefinition","availOps","indexOf","_operatorCardinality","cardinality","options","canFix","isEndValue","_getNewValueForFieldO","newValue","newValueSrc","newValueError","newSerialized","isComplete","validateValue","leftField","valueType","asyncListValues","arguments","isRawValue","validError","fixedValue","_validateFieldValue","validateFieldValue","_validateFieldValue2","_validateFuncValue","validateFuncValue","_validateFuncValue2","_validateNormalValue","validateNormalValue","_validateNormalValue2","fieldConfig","w","fieldWidgetDefinition","rightFieldDefinition","fieldSettings","fn","args","push","validResult","apply","validateValueInList","listValues","removeInvalidMultiSelectValuesOnLoad","values","isList","_values$reduce","_ref","val","_ref2","goodVals","badVals","vv","_values$reduce2","goodValues","badValues","plural","err","join","wConfig","widgets","wType","jsType","allowCustomValues","min","max","_valueSrc","fieldSeparator","isFuncArg","_isFuncArg","leftFieldStr","rightFieldStr","funcKey","funcConfig","returnType","argKey","argConfig","argVal","fieldDef","argValue","argValueSrc","_validateValue","_validateValue2","argValidError","fixedArgVal","deleteIn","setIn"],"mappings":"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","sourcesContent":["import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _typeof from \"@babel/runtime/helpers/typeof\";\nimport { getFieldConfig, getOperatorConfig, getFieldWidgetConfig, getFuncConfig } from \"./configUtils\";\nimport { getOperatorsForField, getWidgetForFieldOp, getNewValueForFieldOp } from \"../utils/ruleUtils\";\nimport { defaultValue, deepEqual, logger } from \"../utils/stuff\";\nimport { getItemInListValues } from \"../utils/listValues\";\nimport { defaultOperatorOptions } from \"../utils/defaultUtils\";\nimport { fixPathsInTree } from \"../utils/treeUtils\";\nimport omit from \"lodash/omit\";\nimport { List } from \"immutable\";\nvar typeOf = function typeOf(v) {\n  if (_typeof(v) == \"object\" && v !== null && Array.isArray(v)) return \"array\";else return _typeof(v);\n};\nvar isTypeOf = function isTypeOf(v, type) {\n  if (typeOf(v) == type) return true;\n  if (type == \"number\" && !isNaN(v)) return true; //can be casted\n  return false;\n};\nexport var validateAndFixTree = function validateAndFixTree(newTree, _oldTree, newConfig, oldConfig) {\n  var tree = validateTree(newTree, _oldTree, newConfig, oldConfig);\n  tree = fixPathsInTree(tree);\n  return tree;\n};\nexport var validateTree = function validateTree(tree, _oldTree, config, oldConfig, removeEmptyGroups, removeIncompleteRules) {\n  if (removeEmptyGroups === undefined) {\n    removeEmptyGroups = config.settings.removeEmptyGroupsOnLoad;\n  }\n  if (removeIncompleteRules === undefined) {\n    removeIncompleteRules = config.settings.removeIncompleteRulesOnLoad;\n  }\n  var c = {\n    config: config,\n    oldConfig: oldConfig,\n    removeEmptyGroups: removeEmptyGroups,\n    removeIncompleteRules: removeIncompleteRules\n  };\n  return validateItem(tree, [], null, {}, c);\n};\nfunction validateItem(item, path, itemId, meta, c) {\n  var type = item.get(\"type\");\n  var children = item.get(\"children1\");\n  if ((type === \"group\" || type === \"rule_group\" || type == \"case_group\" || type == \"switch_group\") && children && children.size) {\n    return validateGroup(item, path, itemId, meta, c);\n  } else if (type === \"rule\") {\n    return validateRule(item, path, itemId, meta, c);\n  } else {\n    return item;\n  }\n}\nfunction validateGroup(item, path, itemId, meta, c) {\n  var removeEmptyGroups = c.removeEmptyGroups;\n  var id = item.get(\"id\");\n  var children = item.get(\"children1\");\n  var oldChildren = children;\n  if (!id && itemId) {\n    id = itemId;\n    item = item.set(\"id\", id);\n    meta.sanitized = true;\n  }\n\n  //validate children\n  var submeta = {};\n  children = children.map(function (currentChild, childId) {\n    return validateItem(currentChild, path.concat(id), childId, submeta, c);\n  });\n  if (removeEmptyGroups) children = children.filter(function (currentChild) {\n    return currentChild != undefined;\n  });\n  var sanitized = submeta.sanitized || oldChildren.size != children.size;\n  if (!children.size && removeEmptyGroups && path.length) {\n    sanitized = true;\n    item = undefined;\n  }\n  if (sanitized) meta.sanitized = true;\n  if (sanitized && item) item = item.set(\"children1\", children);\n  return item;\n}\nfunction validateRule(item, path, itemId, meta, c) {\n  var removeIncompleteRules = c.removeIncompleteRules,\n    config = c.config,\n    oldConfig = c.oldConfig;\n  var showErrorMessage = config.settings.showErrorMessage;\n  var id = item.get(\"id\");\n  var properties = item.get(\"properties\");\n  var field = properties.get(\"field\") || null;\n  var operator = properties.get(\"operator\") || null;\n  var operatorOptions = properties.get(\"operatorOptions\");\n  var valueSrc = properties.get(\"valueSrc\");\n  var value = properties.get(\"value\");\n  var valueError = properties.get(\"valueError\");\n  var oldSerialized = {\n    field: field,\n    operator: operator,\n    operatorOptions: operatorOptions ? operatorOptions.toJS() : {},\n    valueSrc: valueSrc ? valueSrc.toJS() : null,\n    value: value ? value.toJS() : null,\n    valueError: valueError ? valueError.toJS() : null\n  };\n  var _wasValid = field && operator && value && !value.includes(undefined);\n  if (!id && itemId) {\n    id = itemId;\n    item = item.set(\"id\", id);\n    meta.sanitized = true;\n  }\n\n  //validate field\n  var fieldDefinition = field ? getFieldConfig(config, field) : null;\n  if (field && !fieldDefinition) {\n    logger.warn(\"No config for field \".concat(field));\n    field = null;\n  }\n  if (field == null) {\n    properties = [\"operator\", \"operatorOptions\", \"valueSrc\", \"value\"].reduce(function (map, key) {\n      return map[\"delete\"](key);\n    }, properties);\n    operator = null;\n  }\n\n  //validate operator\n  // Backward compatibility: obsolete operator range_between\n  if (operator == \"range_between\" || operator == \"range_not_between\") {\n    operator = operator == \"range_between\" ? \"between\" : \"not_between\";\n    console.info(\"Fixed operator \".concat(properties.get(\"operator\"), \" to \").concat(operator));\n    properties = properties.set(\"operator\", operator);\n  }\n  var operatorDefinition = operator ? getOperatorConfig(config, operator, field) : null;\n  if (operator && !operatorDefinition) {\n    console.warn(\"No config for operator \".concat(operator));\n    operator = null;\n  }\n  var availOps = field ? getOperatorsForField(config, field) : [];\n  if (!availOps) {\n    console.warn(\"Type of field \".concat(field, \" is not supported\"));\n    operator = null;\n  } else if (operator && availOps.indexOf(operator) == -1) {\n    if (operator == \"is_empty\" || operator == \"is_not_empty\") {\n      // Backward compatibility: is_empty #494\n      operator = operator == \"is_empty\" ? \"is_null\" : \"is_not_null\";\n      console.info(\"Fixed operator \".concat(properties.get(\"operator\"), \" to \").concat(operator, \" for \").concat(field));\n      properties = properties.set(\"operator\", operator);\n    } else {\n      console.warn(\"Operator \".concat(operator, \" is not supported for field \").concat(field));\n      operator = null;\n    }\n  }\n  if (operator == null) {\n    properties = properties[\"delete\"](\"operatorOptions\");\n    properties = properties[\"delete\"](\"valueSrc\");\n    properties = properties[\"delete\"](\"value\");\n  }\n\n  //validate operator options\n  operatorOptions = properties.get(\"operatorOptions\");\n  var _operatorCardinality = operator ? defaultValue(operatorDefinition.cardinality, 1) : null;\n  if (!operator || operatorOptions && !operatorDefinition.options) {\n    operatorOptions = null;\n    properties = properties[\"delete\"](\"operatorOptions\");\n  } else if (operator && !operatorOptions && operatorDefinition.options) {\n    operatorOptions = defaultOperatorOptions(config, operator, field);\n    properties = properties.set(\"operatorOptions\", operatorOptions);\n  }\n\n  //validate values\n  valueSrc = properties.get(\"valueSrc\");\n  value = properties.get(\"value\");\n  var canFix = !showErrorMessage;\n  var isEndValue = true;\n  var _getNewValueForFieldO = getNewValueForFieldOp(config, oldConfig, properties, field, operator, null, canFix, isEndValue),\n    newValue = _getNewValueForFieldO.newValue,\n    newValueSrc = _getNewValueForFieldO.newValueSrc,\n    newValueError = _getNewValueForFieldO.newValueError;\n  value = newValue;\n  valueSrc = newValueSrc;\n  valueError = newValueError;\n  properties = properties.set(\"value\", value);\n  properties = properties.set(\"valueSrc\", valueSrc);\n  if (showErrorMessage) {\n    properties = properties.set(\"valueError\", valueError);\n  }\n  var newSerialized = {\n    field: field,\n    operator: operator,\n    operatorOptions: operatorOptions ? operatorOptions.toJS() : {},\n    valueSrc: valueSrc ? valueSrc.toJS() : null,\n    value: value ? value.toJS() : null,\n    valueError: valueError ? valueError.toJS() : null\n  };\n  var sanitized = !deepEqual(oldSerialized, newSerialized);\n  var isComplete = field && operator && value && !value.includes(undefined);\n  if (sanitized) meta.sanitized = true;\n  if (!isComplete && removeIncompleteRules) item = undefined;else if (sanitized) item = item.set(\"properties\", properties);\n  return item;\n}\n\n/**\n * \n * @param {bool} canFix true is useful for func values to remove bad args\n * @param {bool} isEndValue false if value is in process of editing by user\n * @param {bool} isRawValue false is used only internally from validateFuncValue\n * @return {array} [validError, fixedValue] - if validError === null and canFix == true, fixedValue can differ from value if was fixed\n */\nexport var validateValue = function validateValue(config, leftField, field, operator, value, valueType, valueSrc, asyncListValues) {\n  var canFix = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : false;\n  var isEndValue = arguments.length > 9 && arguments[9] !== undefined ? arguments[9] : false;\n  var isRawValue = arguments.length > 10 && arguments[10] !== undefined ? arguments[10] : true;\n  var validError = null;\n  var fixedValue = value;\n  if (value != null) {\n    if (valueSrc == \"field\") {\n      var _validateFieldValue = validateFieldValue(leftField, field, value, valueSrc, valueType, asyncListValues, config, operator, isEndValue, canFix);\n      var _validateFieldValue2 = _slicedToArray(_validateFieldValue, 2);\n      validError = _validateFieldValue2[0];\n      fixedValue = _validateFieldValue2[1];\n    } else if (valueSrc == \"func\") {\n      var _validateFuncValue = validateFuncValue(leftField, field, value, valueSrc, valueType, asyncListValues, config, operator, isEndValue, canFix);\n      var _validateFuncValue2 = _slicedToArray(_validateFuncValue, 2);\n      validError = _validateFuncValue2[0];\n      fixedValue = _validateFuncValue2[1];\n    } else if (valueSrc == \"value\" || !valueSrc) {\n      var _validateNormalValue = validateNormalValue(leftField, field, value, valueSrc, valueType, asyncListValues, config, operator, isEndValue, canFix);\n      var _validateNormalValue2 = _slicedToArray(_validateNormalValue, 2);\n      validError = _validateNormalValue2[0];\n      fixedValue = _validateNormalValue2[1];\n    }\n    if (!validError) {\n      var fieldConfig = getFieldConfig(config, field);\n      var w = getWidgetForFieldOp(config, field, operator, valueSrc);\n      var operatorDefinition = operator ? getOperatorConfig(config, operator, field) : null;\n      var fieldWidgetDefinition = omit(getFieldWidgetConfig(config, field, operator, w, valueSrc), [\"factory\"]);\n      var rightFieldDefinition = valueSrc == \"field\" ? getFieldConfig(config, value) : null;\n      var fieldSettings = fieldWidgetDefinition; // widget definition merged with fieldSettings\n\n      var fn = fieldWidgetDefinition.validateValue;\n      if (typeof fn == \"function\") {\n        var args = [fixedValue, fieldSettings, operator, operatorDefinition];\n        if (valueSrc == \"field\") args.push(rightFieldDefinition);\n        var validResult = fn.apply(void 0, args);\n        if (typeof validResult == \"boolean\") {\n          if (validResult == false) validError = \"Invalid value\";\n        } else {\n          validError = validResult;\n        }\n      }\n    }\n  }\n  if (isRawValue && validError) {\n    console.warn(\"[RAQB validate]\", \"Field \".concat(field, \": \").concat(validError));\n  }\n  return [validError, fixedValue];\n};\nvar validateValueInList = function validateValueInList(value, listValues, canFix, isEndValue, removeInvalidMultiSelectValuesOnLoad) {\n  var values = List.isList(value) ? value.toJS() : value instanceof Array ? _toConsumableArray(value) : undefined;\n  if (values) {\n    var _values$reduce = values.reduce(function (_ref, val) {\n        var _ref2 = _slicedToArray(_ref, 2),\n          goodVals = _ref2[0],\n          badVals = _ref2[1];\n        var vv = getItemInListValues(listValues, val);\n        if (vv == undefined) {\n          return [goodVals, [].concat(_toConsumableArray(badVals), [val])];\n        } else {\n          return [[].concat(_toConsumableArray(goodVals), [vv.value]), badVals];\n        }\n      }, [[], []]),\n      _values$reduce2 = _slicedToArray(_values$reduce, 2),\n      goodValues = _values$reduce2[0],\n      badValues = _values$reduce2[1];\n    var plural = badValues.length > 1;\n    var err = badValues.length ? \"\".concat(plural ? \"Values\" : \"Value\", \" \").concat(badValues.join(\", \"), \" \").concat(plural ? \"are\" : \"is\", \" not in list of values\") : null;\n    // always remove bad values at tree validation as user can't unselect them (except AntDesign widget)\n    if (removeInvalidMultiSelectValuesOnLoad !== undefined) {\n      canFix = removeInvalidMultiSelectValuesOnLoad;\n    } else {\n      canFix = canFix || isEndValue;\n    }\n    return [err, canFix ? goodValues : value];\n  } else {\n    var vv = getItemInListValues(listValues, value);\n    if (vv == undefined) {\n      return [\"Value \".concat(value, \" is not in list of values\"), value];\n    } else {\n      value = vv.value;\n    }\n    return [null, value];\n  }\n};\n\n/**\n* \n*/\nvar validateNormalValue = function validateNormalValue(leftField, field, value, valueSrc, valueType, asyncListValues, config) {\n  var operator = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : null;\n  var isEndValue = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : false;\n  var canFix = arguments.length > 9 && arguments[9] !== undefined ? arguments[9] : false;\n  if (field) {\n    var fieldConfig = getFieldConfig(config, field);\n    var w = getWidgetForFieldOp(config, field, operator, valueSrc);\n    var wConfig = config.widgets[w];\n    var wType = wConfig.type;\n    var jsType = wConfig.jsType;\n    var fieldSettings = fieldConfig.fieldSettings;\n    if (valueType && valueType != wType) return [\"Value should have type \".concat(wType, \", but got value of type \").concat(valueType), value];\n    if (jsType && !isTypeOf(value, jsType) && !fieldSettings.listValues) {\n      //tip: can skip tye check for listValues\n      return [\"Value should have JS type \".concat(jsType, \", but got value of type \").concat(_typeof(value)), value];\n    }\n    if (fieldSettings) {\n      var listValues = asyncListValues || fieldSettings.listValues;\n      if (listValues && !fieldSettings.allowCustomValues) {\n        return validateValueInList(value, listValues, canFix, isEndValue, config.settings.removeInvalidMultiSelectValuesOnLoad);\n      }\n      if (fieldSettings.min != null && value < fieldSettings.min) {\n        return [\"Value \".concat(value, \" < min \").concat(fieldSettings.min), canFix ? fieldSettings.min : value];\n      }\n      if (fieldSettings.max != null && value > fieldSettings.max) {\n        return [\"Value \".concat(value, \" > max \").concat(fieldSettings.max), canFix ? fieldSettings.max : value];\n      }\n    }\n  }\n  return [null, value];\n};\n\n/**\n* \n*/\nvar validateFieldValue = function validateFieldValue(leftField, field, value, _valueSrc, valueType, asyncListValues, config) {\n  var operator = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : null;\n  var isEndValue = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : false;\n  var canFix = arguments.length > 9 && arguments[9] !== undefined ? arguments[9] : false;\n  var fieldSeparator = config.settings.fieldSeparator;\n  var isFuncArg = _typeof(field) == \"object\" && (field === null || field === void 0 ? void 0 : field._isFuncArg);\n  var leftFieldStr = Array.isArray(leftField) ? leftField.join(fieldSeparator) : leftField;\n  var rightFieldStr = Array.isArray(value) ? value.join(fieldSeparator) : value;\n  var rightFieldDefinition = getFieldConfig(config, value);\n  if (!rightFieldDefinition) return [\"Unknown field \".concat(value), value];\n  if (rightFieldStr == leftFieldStr && !isFuncArg) return [\"Can't compare field \".concat(leftField, \" with itself\"), value];\n  if (valueType && valueType != rightFieldDefinition.type) return [\"Field \".concat(value, \" is of type \").concat(rightFieldDefinition.type, \", but expected \").concat(valueType), value];\n  return [null, value];\n};\n\n/**\n* \n*/\nvar validateFuncValue = function validateFuncValue(leftField, field, value, _valueSrc, valueType, asyncListValues, config) {\n  var operator = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : null;\n  var isEndValue = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : false;\n  var canFix = arguments.length > 9 && arguments[9] !== undefined ? arguments[9] : false;\n  var fixedValue = value;\n  if (value) {\n    var funcKey = value.get(\"func\");\n    if (funcKey) {\n      var funcConfig = getFuncConfig(config, funcKey);\n      if (funcConfig) {\n        if (valueType && funcConfig.returnType != valueType) return [\"Function \".concat(funcKey, \" should return value of type \").concat(funcConfig.returnType, \", but got \").concat(valueType), value];\n        for (var argKey in funcConfig.args) {\n          var argConfig = funcConfig.args[argKey];\n          var args = fixedValue.get(\"args\");\n          var argVal = args ? args.get(argKey) : undefined;\n          var fieldDef = getFieldConfig(config, argConfig);\n          var argValue = argVal ? argVal.get(\"value\") : undefined;\n          var argValueSrc = argVal ? argVal.get(\"valueSrc\") : undefined;\n          if (argValue !== undefined) {\n            var _validateValue = validateValue(config, leftField, fieldDef, operator, argValue, argConfig.type, argValueSrc, asyncListValues, canFix, isEndValue, false),\n              _validateValue2 = _slicedToArray(_validateValue, 2),\n              argValidError = _validateValue2[0],\n              fixedArgVal = _validateValue2[1];\n            if (argValidError !== null) {\n              if (canFix) {\n                fixedValue = fixedValue.deleteIn([\"args\", argKey]);\n                if (argConfig.defaultValue !== undefined) {\n                  fixedValue = fixedValue.setIn([\"args\", argKey, \"value\"], argConfig.defaultValue);\n                  fixedValue = fixedValue.setIn([\"args\", argKey, \"valueSrc\"], \"value\");\n                }\n              } else {\n                return [\"Invalid value of arg \".concat(argKey, \" for func \").concat(funcKey, \": \").concat(argValidError), value];\n              }\n            } else if (fixedArgVal !== argValue) {\n              fixedValue = fixedValue.setIn([\"args\", argKey, \"value\"], fixedArgVal);\n            }\n          } else if (isEndValue && argConfig.defaultValue === undefined && !canFix) {\n            return [\"Value of arg \".concat(argKey, \" for func \").concat(funcKey, \" is required\"), value];\n          }\n        }\n      } else return [\"Unknown function \".concat(funcKey), value];\n    } // else it's not function value\n  } // empty value\n\n  return [null, fixedValue];\n};"]},"metadata":{},"sourceType":"module"}