{"ast":null,"code":"var _jsxFileName = \"E:\\\\WorkingFolder\\\\React_Postgres\\\\ALPD\\\\branches\\\\SOURCE-513-FINAL\\\\SOURCE-513-ALPD-4991\\\\QuaLISWeb\\\\src\\\\pages\\\\configurationmaster\\\\SyncConfiguration.jsx\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport { Row, Col, Button } from 'react-bootstrap';\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faSync } from \"@fortawesome/free-solid-svg-icons\";\nimport { process } from '@progress/kendo-data-query';\nimport { toast } from 'react-toastify';\nimport DataGrid from '../../components/data-grid/data-grid.component';\nimport { ListWrapper } from '../../components/client-group.styles';\nimport { callService, updateStore, crudMaster, SyncRecords } from '../../actions';\nimport { getControlMap } from '../../components/CommonScript';\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\n\nconst mapStateToProps = state => {\n  return {\n    Login: state.Login\n  };\n};\n\nclass SyncConfiguration extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.dataStateChange = event => {\n      this.setState({\n        dataResult: process(this.state.data.JsonExceptionLogs, event.dataState),\n        dataState: event.dataState\n      });\n    };\n\n    this.closeModal = () => {\n      let loadEsign = this.props.Login.loadEsign;\n      let openModal = this.props.Login.openModal;\n      let selectedRecord = this.props.Login.selectedRecord;\n      let selectedId = this.props.Login.selectedId;\n\n      if (this.props.Login.loadEsign) {\n        if (this.props.Login.operation === \"delete\") {\n          loadEsign = false;\n          openModal = false;\n          selectedRecord = {};\n        } else {\n          loadEsign = false;\n          selectedRecord['esignpassword'] = \"\";\n          selectedRecord['esigncomments'] = \"\";\n        }\n      } else {\n        openModal = false;\n        selectedRecord = {};\n        selectedId = null;\n      }\n\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          openModal,\n          loadEsign,\n          selectedRecord,\n          selectedId\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.reloadData = () => {\n      const inputParam = {\n        inputData: {\n          \"userinfo\": this.props.Login.userInfo\n        },\n        classUrl: \"syncconfiguration\",\n        methodUrl: \"SyncConfiguration\",\n        displayName: this.props.Login.displayName,\n        userInfo: this.props.Login.userInfo\n      };\n      this.props.callService(inputParam);\n    };\n\n    this.formRef = React.createRef();\n    this.extractedColumnList = [];\n    const dataState = {\n      skip: 0,\n      take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n    };\n    this.state = {\n      data: [],\n      masterStatus: \"\",\n      error: \"\",\n      selectedRecord: {},\n      dataResult: [],\n      dataState: dataState,\n      isOpen: false,\n      userRoleControlRights: [],\n      controlMap: new Map()\n    };\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\n      toast.warn(props.Login.masterStatus);\n      props.Login.masterStatus = \"\";\n    }\n\n    if (props.Login.error !== state.error) {\n      toast.error(props.Login.error);\n      props.Login.error = \"\";\n    }\n\n    return null;\n  }\n\n  render() {\n    const syncConfiguration = this.state.controlMap.has(\"Sync Configuration\") && this.state.controlMap.get(\"Sync Configuration\").ncontrolcode;\n\n    if (this.props.Login.inputParam !== undefined) {\n      this.extractedColumnList = [{\n        \"idsName\": \"IDS_TRANSFERID\",\n        \"dataField\": \"stransferid\",\n        \"width\": \"200px\"\n      }, {\n        \"idsName\": \"IDS_STATUS\",\n        \"dataField\": \"sstatuscode\",\n        \"width\": \"200px\"\n      }, {\n        \"idsName\": \"IDS_TRANSFERTYPE\",\n        \"dataField\": \"stransfertype\",\n        \"width\": \"200px\"\n      }, {\n        \"idsName\": \"IDS_DATETIME\",\n        \"dataField\": \"dmodifieddate\",\n        \"width\": \"200px\"\n      }];\n    }\n\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(ListWrapper, {\n      className: \"client-list-content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 3,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      className: \"btn-user btn-primary-blue\",\n      hidden: this.state.userRoleControlRights.indexOf(syncConfiguration) === -1,\n      onClick: () => this.props.SyncRecords(this.props.Login.userInfo),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faSync,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 41\n      }\n    }), \" \", /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_SYNC\",\n      defaultMessage: \"Sync\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 41\n      }\n    }))), /*#__PURE__*/React.createElement(Col, {\n      md: 3,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 33\n      }\n    })), this.state.data ? /*#__PURE__*/React.createElement(DataGrid, {\n      primaryKeyField: \"nsynchistorycode\",\n      selectedId: this.props.Login.selectedId,\n      data: this.state.data.syncHistory,\n      dataResult: this.state.dataResult,\n      dataState: this.state.dataState,\n      dataStateChange: this.dataStateChange,\n      extractedColumnList: this.extractedColumnList,\n      controlMap: this.state.controlMap,\n      userRoleControlRights: this.state.userRoleControlRights,\n      inputParam: this.props.Login.inputParam,\n      userInfo: this.props.Login.userInfo,\n      reloadData: this.reloadData,\n      scrollable: \"scrollable\",\n      gridHeight: \"600px\",\n      isActionRequired: false,\n      isToolBarRequired: true,\n      pageable: true,\n      isAddRequired: false,\n      isDownloadPDFRequired: false // actionIcons={[{\n      //     title: this.props.intl.formatMessage({ id: \"IDS_VIEW\" }),\n      //     controlname: \"faEye\",\n      //     objectName: \"ExceptionLogs\",\n      //     hidden: this.state.userRoleControlRights.indexOf(viewJsonExceptionLogs) === -1,\n      //     onClick: (viewJsonExceptionLogs) => this.viewJsonExceptionLogs(viewJsonExceptionLogs)\n      // }]}\n      ,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 33\n      }\n    }) : \"\"))));\n  }\n\n  componentDidUpdate(previousProps) {\n    if (this.props.Login.masterData !== previousProps.Login.masterData) {\n      if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\n        const userRoleControlRights = [];\n\n        if (this.props.Login.userRoleControlRights) {\n          this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item => userRoleControlRights.push(item.ncontrolcode));\n        }\n\n        const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode);\n        this.setState({\n          userRoleControlRights,\n          controlMap,\n          data: this.props.Login.masterData,\n          dataResult: process(this.props.Login.masterData.syncHistory, this.state.dataState)\n        });\n      } else {\n        let {\n          dataState\n        } = this.state;\n\n        if (this.props.Login.dataState === undefined) {\n          dataState = {\n            skip: 0,\n            take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n          };\n        }\n\n        this.setState({\n          data: this.props.Login.masterData,\n          isOpen: false,\n          selectedRecord: this.props.Login.selectedRecord,\n          dataResult: process(this.props.Login.masterData.syncHistory ? this.props.Login.masterData.syncHistory : [], dataState),\n          //dataResult: process(this.props.Login.masterData, dataState),\n          dataState\n        });\n      }\n    } else if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\n      this.setState({\n        selectedRecord: this.props.Login.selectedRecord\n      });\n    }\n  }\n\n}\n\nexport default connect(mapStateToProps, {\n  callService,\n  updateStore,\n  crudMaster,\n  SyncRecords\n})(injectIntl(SyncConfiguration));","map":{"version":3,"sources":["E:/WorkingFolder/React_Postgres/ALPD/branches/SOURCE-513-FINAL/SOURCE-513-ALPD-4991/QuaLISWeb/src/pages/configurationmaster/SyncConfiguration.jsx"],"names":["React","connect","FormattedMessage","injectIntl","Row","Col","Button","FontAwesomeIcon","faSync","process","toast","DataGrid","ListWrapper","callService","updateStore","crudMaster","SyncRecords","getControlMap","DEFAULT_RETURN","mapStateToProps","state","Login","SyncConfiguration","Component","constructor","props","dataStateChange","event","setState","dataResult","data","JsonExceptionLogs","dataState","closeModal","loadEsign","openModal","selectedRecord","selectedId","operation","updateInfo","typeName","reloadData","inputParam","inputData","userInfo","classUrl","methodUrl","displayName","formRef","createRef","extractedColumnList","skip","take","settings","parseInt","masterStatus","error","isOpen","userRoleControlRights","controlMap","Map","getDerivedStateFromProps","warn","render","syncConfiguration","has","get","ncontrolcode","undefined","indexOf","syncHistory","componentDidUpdate","previousProps","masterData","nformcode","Object","values","map","item","push"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { FormattedMessage, injectIntl } from 'react-intl';\r\nimport { Row, Col, Button } from 'react-bootstrap';\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faSync } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { process } from '@progress/kendo-data-query';\r\nimport { toast } from 'react-toastify';\r\nimport DataGrid from '../../components/data-grid/data-grid.component';\r\nimport { ListWrapper } from '../../components/client-group.styles';\r\nimport { callService, updateStore, crudMaster, SyncRecords } from '../../actions';\r\nimport { getControlMap } from '../../components/CommonScript';\r\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\r\n\r\nconst mapStateToProps = state => {\r\n    return ({ Login: state.Login })\r\n}\r\n\r\nclass SyncConfiguration extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.formRef = React.createRef();\r\n        this.extractedColumnList = [];\r\n        const dataState = {\r\n            skip: 0,\r\n            take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5,\r\n        };\r\n\r\n        this.state = {\r\n            data: [], masterStatus: \"\", error: \"\", selectedRecord: {},\r\n            dataResult: [],\r\n            dataState: dataState,\r\n            isOpen: false,\r\n            userRoleControlRights: [],\r\n            controlMap: new Map()\r\n        };\r\n    };\r\n\r\n    static getDerivedStateFromProps(props, state) {\r\n\r\n        if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\r\n            toast.warn(props.Login.masterStatus);\r\n            props.Login.masterStatus = \"\";\r\n        }\r\n\r\n        if (props.Login.error !== state.error) {\r\n            toast.error(props.Login.error)\r\n            props.Login.error = \"\";\r\n        }\r\n        return null;\r\n    }\r\n\r\n    dataStateChange = (event) => {\r\n        this.setState({\r\n            dataResult: process(this.state.data.JsonExceptionLogs, event.dataState),\r\n            dataState: event.dataState\r\n        });\r\n    }\r\n\r\n    closeModal = () => {\r\n        let loadEsign = this.props.Login.loadEsign;\r\n        let openModal = this.props.Login.openModal;\r\n        let selectedRecord = this.props.Login.selectedRecord;\r\n        let selectedId = this.props.Login.selectedId;\r\n        if (this.props.Login.loadEsign) {\r\n            if (this.props.Login.operation === \"delete\") {\r\n                loadEsign = false;\r\n                openModal = false;\r\n                selectedRecord = {};\r\n            } else {\r\n                loadEsign = false;\r\n                selectedRecord['esignpassword'] = \"\"\r\n                selectedRecord['esigncomments'] = \"\"\r\n            }\r\n        } else {\r\n            openModal = false;\r\n            selectedRecord = {};\r\n            selectedId = null;\r\n        }\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { openModal, loadEsign, selectedRecord, selectedId }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    reloadData = () => {\r\n        const inputParam = {\r\n            inputData: { \"userinfo\": this.props.Login.userInfo },\r\n\r\n            classUrl: \"syncconfiguration\",\r\n            methodUrl: \"SyncConfiguration\",\r\n            displayName: this.props.Login.displayName,\r\n            userInfo: this.props.Login.userInfo\r\n        };\r\n\r\n        this.props.callService(inputParam);\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n      \r\n        const syncConfiguration = this.state.controlMap.has(\"Sync Configuration\") && this.state.controlMap.get(\"Sync Configuration\").ncontrolcode;\r\n\r\n        if (this.props.Login.inputParam !== undefined) {\r\n\r\n            this.extractedColumnList = [\r\n                { \"idsName\": \"IDS_TRANSFERID\", \"dataField\": \"stransferid\", \"width\": \"200px\" },\r\n                { \"idsName\": \"IDS_STATUS\", \"dataField\": \"sstatuscode\", \"width\": \"200px\" },\r\n                { \"idsName\": \"IDS_TRANSFERTYPE\", \"dataField\": \"stransfertype\", \"width\": \"200px\" },\r\n                { \"idsName\": \"IDS_DATETIME\", \"dataField\": \"dmodifieddate\", \"width\": \"200px\" }\r\n            ]\r\n           \r\n        }\r\n        return (\r\n            <>\r\n                <Row>\r\n                    <Col>\r\n                        <ListWrapper className=\"client-list-content\">\r\n                            <Row>\r\n                                <Col md={3}>\r\n                                    <Button className=\"btn-user btn-primary-blue\"\r\n                                     hidden={this.state.userRoleControlRights.indexOf(syncConfiguration) === -1}\r\n                                      onClick={() => this.props.SyncRecords(this.props.Login.userInfo)}>\r\n                                        <FontAwesomeIcon icon={faSync} /> { }\r\n                                        <FormattedMessage id='IDS_SYNC' defaultMessage='Sync' />\r\n                                    </Button>\r\n                                </Col>\r\n                                <Col md={3}>\r\n\r\n                                </Col>\r\n\r\n                            </Row>\r\n\r\n                            {this.state.data ?\r\n                                <DataGrid\r\n                                    primaryKeyField={\"nsynchistorycode\"}\r\n                                    selectedId={this.props.Login.selectedId}\r\n                                    data={this.state.data.syncHistory}\r\n                                    dataResult={this.state.dataResult}\r\n                                    dataState={this.state.dataState}\r\n                                    dataStateChange={this.dataStateChange}\r\n                                    extractedColumnList={this.extractedColumnList}\r\n                                    controlMap={this.state.controlMap}\r\n                                    userRoleControlRights={this.state.userRoleControlRights}\r\n                                    inputParam={this.props.Login.inputParam}\r\n                                    userInfo={this.props.Login.userInfo}\r\n                                    reloadData={this.reloadData}\r\n                                    scrollable={\"scrollable\"}\r\n                                    gridHeight={\"600px\"}\r\n                                    isActionRequired={false}\r\n                                    isToolBarRequired={true}\r\n                                    pageable={true}\r\n                                    isAddRequired={false}\r\n                                    isDownloadPDFRequired={false}\r\n                                // actionIcons={[{\r\n                                //     title: this.props.intl.formatMessage({ id: \"IDS_VIEW\" }),\r\n                                //     controlname: \"faEye\",\r\n                                //     objectName: \"ExceptionLogs\",\r\n                                //     hidden: this.state.userRoleControlRights.indexOf(viewJsonExceptionLogs) === -1,\r\n                                //     onClick: (viewJsonExceptionLogs) => this.viewJsonExceptionLogs(viewJsonExceptionLogs)\r\n                                // }]}\r\n                                />\r\n                                : \"\"}\r\n\r\n                        </ListWrapper>\r\n                    </Col>\r\n                </Row>\r\n            </>\r\n        );\r\n    }\r\n    componentDidUpdate(previousProps) {\r\n        if (this.props.Login.masterData !== previousProps.Login.masterData) {\r\n            if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\r\n                const userRoleControlRights = [];\r\n                if (this.props.Login.userRoleControlRights) {\r\n                    this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item =>\r\n                        userRoleControlRights.push(item.ncontrolcode))\r\n                }\r\n                const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode)\r\n                this.setState({\r\n                    userRoleControlRights, controlMap, data: this.props.Login.masterData,\r\n                    dataResult: process(this.props.Login.masterData.syncHistory, this.state.dataState),\r\n                });\r\n            }\r\n            else {\r\n                let { dataState } = this.state;\r\n                if (this.props.Login.dataState === undefined) {\r\n                    dataState = { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 }\r\n                }\r\n\r\n                this.setState({\r\n                    data: this.props.Login.masterData,\r\n                    isOpen: false,\r\n                    selectedRecord: this.props.Login.selectedRecord,\r\n                    dataResult: process(this.props.Login.masterData.syncHistory ? this.props.Login.masterData.syncHistory : [], dataState),\r\n                    //dataResult: process(this.props.Login.masterData, dataState),\r\n                    dataState\r\n                });\r\n            }\r\n        } else if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\r\n            this.setState({ selectedRecord: this.props.Login.selectedRecord });\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, { callService, updateStore, crudMaster, SyncRecords })(injectIntl(SyncConfiguration));"]},"metadata":{},"sourceType":"module"}