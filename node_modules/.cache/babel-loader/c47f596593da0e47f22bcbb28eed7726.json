{"ast":null,"code":"var _jsxFileName = \"D:\\\\LIMSWFH\\\\LIMSPOSTGRESQL\\\\QuaLISWeb\\\\src\\\\components\\\\data-grid\\\\DataGridWithSelection.jsx\";\nimport React from 'react';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport { Grid, GridColumn as Column } from '@progress/kendo-react-grid';\nimport { AtTableWrap } from '../data-grid/data-grid.styles';\nimport ReactTooltip from 'react-tooltip';\n\nclass DataGridWithSelection extends React.Component {\n  //lastSelectedIndex = 0;\n  // state = {\n  //     data: this.props.data.map(dataItem => Object.assign({ selected: false }, dataItem))\n  // }\n  // selectionChange = (event) => {\n  //     const data = this.state.data.map(item=>{\n  //         if(item.ProductID === event.dataItem.ProductID){\n  //             item.selected = !event.dataItem.selected;\n  //         }\n  //         return item;\n  //     });\n  //     this.setState({ data });\n  // }\n  // rowClick = event => {\n  //     let last = this.lastSelectedIndex;\n  //     const data = [...this.state.data];\n  //     const current = data.findIndex(dataItem => dataItem === event.dataItem);\n  //     if (!event.nativeEvent.shiftKey) {\n  //         this.lastSelectedIndex = last = current;\n  //     }\n  //     if (!event.nativeEvent.ctrlKey) {\n  //         data.forEach(item => (item.selected = false));\n  //     }\n  //     const select = !event.dataItem.selected;\n  //     for (let i = Math.min(last, current); i <= Math.max(last, current); i++) {\n  //         data[i].selected = select;\n  //     }\n  //     this.setState({ data });\n  // };\n  // headerSelectionChange = (event) => {\n  //     const checked = event.syntheticEvent.target.checked;\n  //     const data = this.state.data.map(item=>{\n  //         item.selected = checked;\n  //         return item;\n  //     });\n  //     this.setState({ data });\n  // }\n  render() {\n    // let selectAll = true;\n    // if (this.props.data && this.props.data.length > 0){\n    //     this.props.data.forEach(dataItem => {\n    //         if (dataItem.selected){\n    //             if (dataItem.selected === false){\n    //                 selectAll = false;\n    //             }\n    //         }\n    //         else{\n    //             selectAll = false;\n    //         }            \n    //     }) \n    // }\n    // else{\n    //     selectAll = false;\n    // }\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(AtTableWrap, {\n      className: \"at-list-table\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(ReactTooltip, {\n      place: \"bottom\",\n      globalEventOff: \"click\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(Grid, {\n      data: this.props.data,\n      style: {\n        height: '400px'\n      },\n      selectedField: \"selected\",\n      onSelectionChange: this.props.selectionChange,\n      onHeaderSelectionChange: this.props.headerSelectionChange,\n      onRowClick: this.props.rowClick,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Column, {\n      field: \"selected\",\n      width: \"50px\",\n      title: this.props.title,\n      headerSelectionValue: this.props.selectAll // selectable={false}  \n      // headerSelectionValue={\n      //     this.props.data.findIndex(dataItem => dataItem.selected === false) === -1\n      // }                       \n      ,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 25\n      }\n    }), this.props.extractedColumnList.map((item, index) => /*#__PURE__*/React.createElement(Column, {\n      key: index,\n      width: item.width,\n      title: this.props.intl.formatMessage({\n        id: item.idsName\n      }),\n      cell: row => /*#__PURE__*/React.createElement(\"td\", {\n        \"data-tip\": row[\"dataItem\"][item.dataField],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 37\n        }\n      }, item.isIdsField ? /*#__PURE__*/React.createElement(FormattedMessage, {\n        id: row[\"dataItem\"][item.dataField],\n        defaultMessage: row[\"dataItem\"][item.dataField],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 45\n        }\n      }) : row[\"dataItem\"][item.dataField]),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 29\n      }\n    })))));\n  }\n\n}\n\nexport default injectIntl(DataGridWithSelection);","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/components/data-grid/DataGridWithSelection.jsx"],"names":["React","FormattedMessage","injectIntl","Grid","GridColumn","Column","AtTableWrap","ReactTooltip","DataGridWithSelection","Component","render","props","data","height","selectionChange","headerSelectionChange","rowClick","title","selectAll","extractedColumnList","map","item","index","width","intl","formatMessage","id","idsName","row","dataField","isIdsField"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { FormattedMessage, injectIntl } from 'react-intl';\r\nimport { Grid, GridColumn as Column } from '@progress/kendo-react-grid';\r\nimport { AtTableWrap } from '../data-grid/data-grid.styles';\r\nimport ReactTooltip from 'react-tooltip';\r\n\r\nclass DataGridWithSelection extends React.Component {\r\n\r\n    //lastSelectedIndex = 0;\r\n    // state = {\r\n    //     data: this.props.data.map(dataItem => Object.assign({ selected: false }, dataItem))\r\n    // }\r\n\r\n    // selectionChange = (event) => {\r\n    //     const data = this.state.data.map(item=>{\r\n    //         if(item.ProductID === event.dataItem.ProductID){\r\n    //             item.selected = !event.dataItem.selected;\r\n    //         }\r\n    //         return item;\r\n    //     });\r\n    //     this.setState({ data });\r\n    // }\r\n    // rowClick = event => {\r\n    //     let last = this.lastSelectedIndex;\r\n    //     const data = [...this.state.data];\r\n    //     const current = data.findIndex(dataItem => dataItem === event.dataItem);\r\n\r\n    //     if (!event.nativeEvent.shiftKey) {\r\n    //         this.lastSelectedIndex = last = current;\r\n    //     }\r\n\r\n    //     if (!event.nativeEvent.ctrlKey) {\r\n    //         data.forEach(item => (item.selected = false));\r\n    //     }\r\n    //     const select = !event.dataItem.selected;\r\n    //     for (let i = Math.min(last, current); i <= Math.max(last, current); i++) {\r\n    //         data[i].selected = select;\r\n    //     }\r\n    //     this.setState({ data });\r\n    // };\r\n\r\n    // headerSelectionChange = (event) => {\r\n    //     const checked = event.syntheticEvent.target.checked;\r\n    //     const data = this.state.data.map(item=>{\r\n    //         item.selected = checked;\r\n    //         return item;\r\n    //     });\r\n    //     this.setState({ data });\r\n    // }\r\n\r\n    render() {\r\n        // let selectAll = true;\r\n        // if (this.props.data && this.props.data.length > 0){\r\n        //     this.props.data.forEach(dataItem => {\r\n        //         if (dataItem.selected){\r\n        //             if (dataItem.selected === false){\r\n        //                 selectAll = false;\r\n        //             }\r\n        //         }\r\n        //         else{\r\n        //             selectAll = false;\r\n        //         }            \r\n        //     }) \r\n        // }\r\n        // else{\r\n        //     selectAll = false;\r\n        // }\r\n        return (\r\n            <div>\r\n\r\n                <AtTableWrap className=\"at-list-table\">\r\n                    <ReactTooltip place=\"bottom\" globalEventOff='click' />\r\n                    <Grid\r\n                        data={this.props.data}\r\n                        style={{ height: '400px' }}\r\n                        selectedField=\"selected\"\r\n                        onSelectionChange={this.props.selectionChange}\r\n                        onHeaderSelectionChange={this.props.headerSelectionChange}\r\n                        onRowClick={this.props.rowClick}\r\n                    >\r\n                        <Column\r\n                            field=\"selected\"\r\n                            width=\"50px\"\r\n                            title={this.props.title}\r\n                            headerSelectionValue={this.props.selectAll}\r\n\r\n                        // selectable={false}  \r\n                        // headerSelectionValue={\r\n                        //     this.props.data.findIndex(dataItem => dataItem.selected === false) === -1\r\n                        // }                       \r\n                        />\r\n                        {this.props.extractedColumnList.map((item, index) =>\r\n                            <Column key={index}\r\n                                width={item.width}\r\n                                title={this.props.intl.formatMessage({ id: item.idsName })}\r\n                                cell={(row) => (\r\n                                    <td data-tip={row[\"dataItem\"][item.dataField]}>\r\n                                        {item.isIdsField ?\r\n                                            <FormattedMessage id={row[\"dataItem\"][item.dataField]} defaultMessage={row[\"dataItem\"][item.dataField]} />\r\n                                            : row[\"dataItem\"][item.dataField]}\r\n                                    </td>\r\n                                )} />\r\n                        )}\r\n\r\n                    </Grid>\r\n                </AtTableWrap>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default injectIntl(DataGridWithSelection);"]},"metadata":{},"sourceType":"module"}