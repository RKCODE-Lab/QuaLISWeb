{"ast":null,"code":"var _jsxFileName = \"D:\\\\LIMSWFH\\\\LIMSPOSTGRESQL\\\\QuaLISWeb\\\\src\\\\pages\\\\testgroup\\\\TestGroup.jsx\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { injectIntl } from 'react-intl';\nimport rsapi from '../../rsapi';\nimport { toast } from 'react-toastify';\nimport { Row, Col, Card, Button, Nav } from 'react-bootstrap';\nimport PerfectScrollbar from 'react-perfect-scrollbar';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faPencilAlt, faPlus, faSync } from '@fortawesome/free-solid-svg-icons';\nimport 'react-perfect-scrollbar/dist/css/styles.css';\nimport SplitterLayout from 'react-splitter-layout';\nimport { faEye, faTrashAlt } from '@fortawesome/free-regular-svg-icons'; // import { Tooltip } from '@progress/kendo-react-tooltip';\n\nimport { process } from '@progress/kendo-data-query';\nimport DataGrid from '../../components/data-grid/data-grid.component';\nimport OrgTree from 'react-org-tree';\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\nimport Esign from '../audittrail/Esign';\nimport { callService, crudMaster, filterTestGroup, createTree, editTree, getTestGroupDetails, sampleTypeOnChange, validateEsignCredential, updateStore, addSpecification, getSpecification, addComponent, changeTestCategory, addTestGroupTest, editTestGroupTest, getTestGroupParameter, editTestGroupParameter, addTestFile, editSpecFile, getSpecificationDetails, addTestGroupCodedResult, getComponentBySpecId, filterColumnData, viewAttachment, viewTestGroupCheckList, getTestGroupComponentDetails, filterTransactionList, reportSpecification, retireSpecification, getDataForTestMaterial, getMaterialCategoryBasedMaterialType, getMaterialBasedMaterialCategory, getTestGroupMaterial, getDataForEditTestMaterial, addTestGroupNumericTab, getTestGroupRulesEngineAdd, getEditTestGroupRulesEngine, getSelectedTestGroupRulesEngine, getParameterRulesEngine, getParameterResultValue, subCodedResultView, saveExecutionOrder } from '../../actions';\nimport { constructOptionList, formatInputDate, create_UUID, deleteAttachmentDropZone, filterRecordBasedOnTwoArrays, getControlMap, onDropAttachFileList, showEsign, sortData, Lims_JSON_stringify } from '../../components/CommonScript';\nimport TestGroupTestTab from './TestGroupTestTab';\nimport AddTestGroupSpecification from './AddTestGroupSpecification';\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\nimport { transactionStatus, REPORTTYPE, attachmentType, formCode, designProperties, parameterType, SampleType } from '../../components/Enumeration';\nimport AddTestGroupTest from './AddTestGroupTest';\nimport AddProfileTree from './AddProfileTree';\nimport SampleFilter from './SampleFilter';\nimport AddFile from '../testmanagement/AddFile';\nimport AdvFilter from '../../components/AdvFilter';\nimport SpecificationHistory from './SpecificationHistory';\nimport TestGroupSpecFile from './TestGroupSpecFile';\nimport SpecificationInfo from './SpecificationInfo';\nimport CustomTab from '../../components/custom-tabs/custom-tabs.component';\nimport TransationListMaster from '../../components/TransactionListMaster';\nimport TransationListMasterView from '../../components/TransactionListMasterView';\nimport FormTreeMenu from '../../components/form-tree-menu/form-tree-menu.component'; // import ConfirmDialog from '../../components/confirm-alert/confirm-alert.component';\n\nimport FormInput from '../../components/form-input/form-input.component';\nimport ConfirmMessage from '../../components/confirm-alert/confirm-message.component';\nimport BreadcrumbComponent from '../../components/Breadcrumb.Component';\nimport { testMoreFields, testSubFields, searchFieldList, specificationColumnList, componentColumnList, addTestColumnList, editTestColumnList } from './TestGroupFields';\nimport EditTestGroupTest from './EditTestGroupTest';\nimport { ContentPanel, SearchAdd } from '../../components/App.styles';\nimport '../../pages/registration/registration.css';\nimport { ListWrapper } from '../../components/client-group.styles';\nimport { ProductList } from '../product/product.styled';\nimport TransactionListMasterJsonView from '../../components/TransactionListMasterJsonView'; // import ReactTooltip from 'react-tooltip';\n\nimport PortalModalSlideout from '../../components/portal-modal/portal-modal-slideout';\nimport AddTestGroupRule from './AddTestGroupRule';\nimport ViewSubCodedResult from './ViewSubCodedResult';\n\nclass TestGroup extends Component {\n  constructor(_props) {\n    super(_props);\n\n    this.reloadData = () => {\n      const filterData = this.props.Login.filterData || this.state.filterData;\n\n      if (filterData.nsampletypecode === undefined) {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SAMPLETYPENOTAVAILABLE\"\n        }));\n      } else if (filterData.nproductcatcode === \"\") {\n        if (filterData.nsampletypecode.item.nformcode === formCode.PRODUCTCATEGORY) {\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_PRODUCTCATEGORYNOTAVAILABLE\"\n          }));\n        } else if (filterData.nsampletypecode.item.nformcode === formCode.INSTRUMENTCATEGORY) {\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_INSTRUMENTCATEGORYNOTAVAILABLE\"\n          }));\n        } else if (filterData.nsampletypecode.item.nformcode === formCode.MATERIALCATEGORY) {\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_MATERIALCATEGORYNOTAVAILABLE\"\n          }));\n        } else {\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_CATEGORYNOTAVAILABLE\"\n          }));\n        }\n      } else if (filterData.nproductcode === \"\" && filterData.nproductcatcode.item.ncategorybasedflow === transactionStatus.NO) {\n        if (filterData.nsampletypecode.item.nformcode === formCode.PRODUCTCATEGORY && filterData.nsampletypecode.item.ncategorybasedflowrequired === transactionStatus.NO) {\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_PRODUCTNOTAVAILABLE\"\n          }));\n        } else if (filterData.nsampletypecode.item.nformcode === formCode.INSTRUMENTCATEGORY) {\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_INSTRUMENTNOTAVAILABLE\"\n          }));\n        } else if (filterData.nsampletypecode.item.nformcode === formCode.MATERIALCATEGORY) {\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_MATERIALNOTAVAILABLE\"\n          }));\n        } else {\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_PRODUCTNOTAVAILABLE\"\n          }));\n        }\n      } else if (filterData.ntreeversiontempcode === \"\") {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_STUDYPLANTEMPLATEISNOTAVAILABLE\"\n        }));\n      } else {\n        const inputParam = {\n          inputData: {\n            userinfo: this.props.Login.userInfo,\n            nsampletypecode: filterData.nsampletypecode.item[\"nsampletypecode\"],\n            nproductcatcode: filterData.nproductcatcode.item[\"nproductcatcode\"],\n            //   nproductcode: filterData.nproductcode.item[\"nproductcode\"],\n            nproductcode: filterData.nsampletypecode.item.ncategorybasedflowrequired == transactionStatus.YES ? -1 : filterData.nproductcatcode.item.ncategorybasedflow === transactionStatus.YES ? -1 : filterData.nproductcode ? filterData.nproductcode.value : -1,\n            ntreeversiontempcode: filterData.ntreeversiontempcode.item[\"ntreeversiontempcode\"],\n            nprojectmastercode: filterData.nprojectmastercode !== undefined ? filterData.nprojectmastercode.item[\"nprojectmastercode\"] : -1,\n            filterData //: { ...this.props.Login.filterData }\n\n          },\n          historyDataState: this.state.historyDataState\n        };\n        this.props.filterTestGroup(inputParam, this.props.Login.masterData, this.searchRef);\n      }\n    };\n\n    this.ConfirmDelete = obj => {\n      this.confirmMessage.confirm(\"deleteMessage\", this.props.intl.formatMessage({\n        id: \"IDS_DELETE\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_DEFAULTCONFIRMMSG\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_OK\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_CANCEL\"\n      }), () => this.deleteRecord(obj));\n    };\n\n    this.handlePageChange = event => {\n      this.setState({\n        testskip: event.skip,\n        testtake: event.take\n      });\n    };\n\n    this.viewTestFile = props => {\n      const viewParam = {\n        operation: \"view\",\n        methodUrl: \"TestGroupTestFile\",\n        classUrl: \"testgroup\",\n        inputData: {\n          ntestgroupfilecode: props.selectedTest ? props.selectedTest.ntestgroupfilecode : 0,\n          userinfo: this.props.Login.userInfo,\n          testgroupspecification: this.props.Login.masterData.SelectedSpecification,\n          ntestgrouptestcode: props.selectedTest ? props.selectedTest.ntestgrouptestcode : 0\n        }\n      };\n      this.props.viewAttachment(viewParam);\n    };\n\n    this.fileViewIcon = master => {\n      if (master.ntestgroupfilecode > 0 && master.nlinkcode === transactionStatus.NA) {\n        return true;\n      } else {\n        return false;\n      }\n    };\n\n    this.linkViewIcon = master => {\n      if (master.ntestgroupfilecode > 0 && master.nlinkcode !== transactionStatus.NA) {\n        return true;\n      } else {\n        return false;\n      }\n    };\n\n    this.onFilterSumbit = () => {\n      const tempFilterData = this.state.tempFilterData;\n\n      if (tempFilterData.nsampletypecode === undefined) {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SAMPLETYPENOTAVAILABLE\"\n        }));\n      } else if (tempFilterData.nproductcatcode === \"\") {\n        if (tempFilterData.nsampletypecode.item.nformcode === formCode.PRODUCTCATEGORY) {\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_PRODUCTCATEGORYNOTAVAILABLE\"\n          }));\n        } else if (tempFilterData.nsampletypecode.item.nformcode === formCode.INSTRUMENTCATEGORY) {\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_INSTRUMENTCATEGORYNOTAVAILABLE\"\n          }));\n        } else if (tempFilterData.nsampletypecode.item.nformcode === formCode.MATERIALCATEGORY) {\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_MATERIALCATEGORYNOTAVAILABLE\"\n          }));\n        } else {\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_CATEGORYNOTAVAILABLE\"\n          }));\n        }\n      } // else if(tempFilterData.nproductcatcode.item.ncategorybasedflow === transactionStatus.NO){\n      else if (tempFilterData.nproductcatcode.item.ncategorybasedflow === transactionStatus.NO && tempFilterData.nproductcode === \"\" && tempFilterData.nsampletypecode.item.ncategorybasedflowrequired === transactionStatus.NO || tempFilterData.nproductcatcode.item.ncategorybasedflow === transactionStatus.NO && tempFilterData.nproductcode === undefined && tempFilterData.nsampletypecode.item.ncategorybasedflowrequired === transactionStatus.NO) {\n        if (tempFilterData.nsampletypecode.item.nformcode === formCode.PRODUCTCATEGORY && tempFilterData.nsampletypecode.item.ncategorybasedflowrequired === transactionStatus.NO) {\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_PRODUCTNOTAVAILABLE\"\n          }));\n        } else if (tempFilterData.nsampletypecode.item.nformcode === formCode.INSTRUMENTCATEGORY) {\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_INSTRUMENTNOTAVAILABLE\"\n          }));\n        } else if (tempFilterData.nsampletypecode.item.nformcode === formCode.MATERIALCATEGORY) {\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_MATERIALNOTAVAILABLE\"\n          }));\n        } else {\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_PRODUCTNOTAVAILABLE\"\n          }));\n        }\n      } // }\n      else if (tempFilterData.ntreeversiontempcode === \"\") {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_STUDYPLANTEMPLATEISNOTAVAILABLE\"\n        }));\n      } else {\n        const inputParam = {\n          inputData: {\n            userinfo: this.props.Login.userInfo,\n            nsampletypecode: tempFilterData.nsampletypecode.value,\n            nproductcatcode: tempFilterData.nproductcatcode.value,\n            nproductcode: tempFilterData.nsampletypecode.item.ncategorybasedflowrequired === transactionStatus.YES ? -1 : tempFilterData.nproductcatcode.item.ncategorybasedflow === transactionStatus.YES ? -1 : tempFilterData.nproductcode ? tempFilterData.nproductcode.value : -1,\n            ntreeversiontempcode: tempFilterData.ntreeversiontempcode.value,\n            nprojectmastercode: tempFilterData.nsampletypecode.value === SampleType.PROJECTSAMPLETYPE ? tempFilterData.nsampletypecode.item.nprojectspecrequired === transactionStatus.YES ? tempFilterData.nprojectmastercode.value : -1 : -1,\n            filterData: { ...tempFilterData\n            }\n          },\n          historyDataState: this.state.historyDataState\n        };\n        this.props.filterTestGroup(inputParam, this.props.Login.masterData, this.searchRef);\n      }\n    };\n\n    this.onTreeClick = event => {\n      const inputParam = {\n        methodUrl: \"TestGroupSpecification\",\n        screenName: \"IDS_SPECIFICATION\",\n        operation: \"get\",\n        keyName: \"treetemplatemanipulation\",\n        userinfo: this.props.Login.userInfo,\n        selectedRecord: event.item,\n        activeKey: event.key,\n        focusKey: event.key,\n        primaryKey: event.primaryKey,\n        historyDataState: this.state.historyDataState\n      };\n      this.props.getSpecification(inputParam, this.props.Login.masterData, this.searchRef);\n    };\n\n    this.tabDetail = () => {\n      const tabMap = new Map();\n      tabMap.set(\"IDS_FILE\", /*#__PURE__*/React.createElement(TestGroupSpecFile, {\n        controlMap: this.state.controlMap,\n        userRoleControlRights: this.state.userRoleControlRights,\n        userInfo: this.props.Login.userInfo,\n        inputParam: this.props.Login.inputParam,\n        deleteRecord: this.deleteRecord,\n        testGroupSpecFile: this.props.Login.masterData.TestGroupSpecFile || [],\n        selectedSpecification: this.props.Login.masterData.SelectedSpecification,\n        addTestFile: this.addFile,\n        editSpecFile: this.props.editSpecFile,\n        filterData: this.state.filterData,\n        viewTestFile: this.viewTestFile,\n        defaultRecord: this.defaultRecord,\n        screenName: \"IDS_FILE\",\n        viewAttachment: this.props.viewAttachment,\n        settings: this.props.Login.settings,\n        masterData: this.props.Login.masterData,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1238,\n          columnNumber: 13\n        }\n      }));\n      tabMap.set(\"IDS_SPECIFICATIONHISTORY\", /*#__PURE__*/React.createElement(SpecificationHistory, {\n        data: this.props.Login.masterData.TestGroupSpecificationHistory,\n        dataResult: process(this.props.Login.masterData.TestGroupSpecificationHistory || [], this.state.historyDataState),\n        dataState: this.state.historyDataState,\n        dataStateChange: this.historyDataStateChange // testGroupSpecificationHistory={this.props.Login.masterData.TestGroupSpecificationHistory}\n        // dataState={this.props.Login.screenName === \"IDS_SPECIFICATIONHISTORY\" ? this.state.historyDataState : { skip: 0, take: 10 }}\n        ,\n        controlMap: this.state.controlMap,\n        userRoleControlRights: this.state.userRoleControlRights,\n        userInfo: this.props.Login.userInfo,\n        inputParam: this.props.Login.inputParam,\n        screenName: \"IDS_SPECIFICATIONHISTORY\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1257,\n          columnNumber: 13\n        }\n      }));\n      return tabMap;\n    };\n\n    this.historyDataStateChange = event => {\n      this.setState({\n        dataResult: process(this.props.Login.masterData.TestGroupSpecificationHistory || [], event.dataState),\n        historyDataState: event.dataState\n      });\n    };\n\n    this.specDataStateChange = event => {\n      this.setState({\n        dataResult: process(this.props.Login.masterData.TestGroupTestClinicalSpec || [], event.dataState),\n        clinicalspecDataState: event.dataState\n      });\n    };\n\n    this.addFile = (userInfo, operation, ncontrolCode, screenName, modalName, nflag) => {\n      // const testgroupspecification = this.props.Login.masterData.SelectedSpecification;\n      // if (testgroupspecification.napprovalstatus === transactionStatus.DRAFT\n      //     || testgroupspecification.napprovalstatus === transactionStatus.CORRECTION) {\n      //     this.props.addTestFile(userInfo, operation, ncontrolCode, screenName, modalName, nflag);\n      // } else {\n      //     toast.warn(this.props.intl.formatMessage({ id: \"IDS_SPECIFICATIONSTATUSMUSTBEDRAFTCORRECTION\" }));\n      // }\n      const masterData = this.props.Login.masterData;\n      const treeVersionTemplateIndex = masterData[\"TreeVersionTemplate\"].findIndex(x => x[\"ntreeversiontempcode\"] === masterData.selectedNode[\"ntreeversiontempcode\"]);\n      const templateVersionStatus = masterData[\"TreeVersionTemplate\"][treeVersionTemplateIndex].ntransactionstatus;\n\n      if (templateVersionStatus === transactionStatus.RETIRED) {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTEDTEMPLATEISRETIRED\"\n        }));\n      } else {\n        const testgroupspecification = this.props.Login.masterData.SelectedSpecification;\n\n        if (testgroupspecification.napprovalstatus === transactionStatus.DRAFT || testgroupspecification.napprovalstatus === transactionStatus.CORRECTION) {\n          this.props.addTestFile(userInfo, operation, ncontrolCode, screenName, modalName);\n        } else {\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_SPECIFICATIONSTATUSMUSTBEDRAFTCORRECTION\"\n          }));\n        }\n      }\n    };\n\n    this.onTabChange = tabProps => {\n      const screenName = tabProps.screenName;\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          screenName\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.componentRowClick = event => {\n      let masterData = this.props.Login.masterData;\n      masterData[\"SelectedComponent\"] = event.testgroupspecsampletype[0];\n      const inputParam = {\n        testgroupspecsampletype: event.testgroupspecsampletype[0],\n        userInfo: this.props.Login.userInfo\n      };\n      this.props.getTestGroupComponentDetails(inputParam, masterData, this.searchRef);\n    };\n\n    this.deleteTest = deleteParam => {\n      const masterData = this.props.Login.masterData;\n      const treeVersionTemplateIndex = masterData[\"TreeVersionTemplate\"].findIndex(x => x[\"ntreeversiontempcode\"] === masterData.selectedNode[\"ntreeversiontempcode\"]);\n      const templateVersionStatus = masterData[\"TreeVersionTemplate\"][treeVersionTemplateIndex].ntransactionstatus;\n\n      if (templateVersionStatus === transactionStatus.RETIRED) {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTEDTEMPLATEISRETIRED\"\n        }));\n      } else {\n        const testgroupspecification = masterData.SelectedSpecification;\n\n        if (testgroupspecification.napprovalstatus === transactionStatus.DRAFT || testgroupspecification.napprovalstatus === transactionStatus.CORRECTION) {\n          const testgrouptest = deleteParam.props.testgrouptest;\n          const inputParam = {\n            inputData: {\n              testgrouptest,\n              userinfo: this.props.Login.userInfo,\n              testgroupspecification,\n              ntreeversiontempcode: deleteParam.filterData.ntreeversiontempcode.value\n            },\n            classUrl: \"testgroup\",\n            operation: \"delete\",\n            methodUrl: \"Test\",\n            screenName: \"IDS_TEST\",\n            postParam: {\n              inputListName: \"TestGroupTest\",\n              selectedObject: \"SelectedTest\",\n              primaryKeyField: \"ntestgrouptestcode\",\n              primaryKeyValue: testgrouptest.ntestgrouptestcode,\n              fetchUrl: \"testgroup/getTestGroupTest\",\n              fecthInputObject: {\n                userinfo: this.props.Login.userInfo\n              },\n              masterData,\n              searchFieldList,\n              unchangeList: [\"TestGroupSpecification\", \"SelectedSpecification\", \"SampleType\", \"TreeVersionTemplate\", \"ProductCategory\", \"SelectedTest\", \"Product\", \"AgaramTree\", \"OpenNodes\", \"selectedNode\", \"FocusKey\", \"ActiveKey\", \"SelectedComponent\", \"TestGroupSpecSampleType\"] //, isSingleSelect: true\n\n            }\n          };\n\n          if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, deleteParam.ncontrolCode)) {\n            const updateInfo = {\n              typeName: DEFAULT_RETURN,\n              data: {\n                loadEsign: true,\n                screenData: {\n                  inputParam,\n                  masterData\n                },\n                openModal: true,\n                screenName: \"IDS_TEST\",\n                operation: \"delete\",\n                selectedRecord: {}\n              }\n            };\n            this.props.updateStore(updateInfo);\n          } else {\n            this.props.crudMaster(inputParam, masterData, \"openModal\", {});\n          }\n        } else {\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_SPECIFICATIONSTATUSMUSTBEDRAFTCORRECTION\"\n          }));\n        }\n      }\n    };\n\n    this.closeModal = () => {\n      let loadEsign = this.props.Login.loadEsign;\n      let openModal = this.props.Login.openModal;\n      let selectedRecord = this.props.Login.selectedRecord;\n\n      if (loadEsign) {\n        if (this.props.Login.operation === \"delete\" || this.props.Login.operation === \"Default\" || this.props.Login.operation === 'approve' || this.props.Login.operation === 'complete') {\n          loadEsign = false;\n          openModal = false;\n          selectedRecord = {};\n        } else {\n          loadEsign = false;\n          selectedRecord[\"agree\"] = 4;\n          selectedRecord['esignpassword'] = \"\";\n          selectedRecord['esigncomments'] = \"\";\n          selectedRecord['esignreason'] = \"\";\n        }\n      } else {\n        openModal = false;\n        selectedRecord = {};\n      }\n\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          openModal,\n          loadEsign,\n          selectedRecord\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onInputOnChange = (event, caseNo, optional) => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      switch (caseNo) {\n        case 1:\n          if (event.target.type === 'checkbox') {\n            selectedRecord[event.target.name] = event.target.checked === true ? optional[0] : optional[1];\n          } else if (event.target.type === 'radio') {\n            selectedRecord[event.target.name] = optional; // selectedRecord[\"sfilename\"] = \"\";\n          } else {\n            selectedRecord[event.target.name] = event.target.value;\n          }\n\n          this.setState({\n            selectedRecord\n          });\n          break;\n\n        case 2:\n          selectedRecord[event.target.name] = event.target.value;\n          const indexKey = Object.keys(optional)[0];\n          const value = Object.values(optional)[0];\n          const treeData = {\n            ntreeversiontempcode: value.ntreeversiontempcode,\n            npositioncode: value.nlevelno - 1,\n            sleveldescription: event.target.value,\n            ntemptranstestgroupcode: value.ntemptranstestgroupcode,\n            nformcode: 62,\n            schildnode: \"\",\n            nnextchildcode: value.schildnode !== null ? value.schildnode : -1,\n            ntemplatemanipulationcode: value.ntemplatemanipulationcode,\n            isreadonly: value.ntemplatemanipulationcode > 0 ? true : false,\n            slevelformat: value.slevelformat\n          };\n          let treetemplatemanipulation = selectedRecord.treetemplatemanipulation || [];\n          treetemplatemanipulation[indexKey] = treeData;\n          selectedRecord[\"treetemplatemanipulation\"] = treetemplatemanipulation;\n          this.setState({\n            selectedRecord\n          });\n          break;\n\n        default:\n          break;\n      }\n    };\n\n    this.onEsignInputOnChange = event => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (event.target.type === 'checkbox') {\n        selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\n      } else {\n        selectedRecord[event.target.name] = event.target.value;\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onTabChangeRulesEngine = tabProps => {\n      let masterData = this.props.Login.masterData && this.props.Login.masterData;\n      masterData['activeTabName'] = tabProps.activeTabName;\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          masterData\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.tabDetailRulesEngine = () => {\n      let masterData = this.props.Login.masterData || {};\n      let jsonuidata = this.props.Login.masterData.SelectedRulesEngine && this.props.Login.masterData.SelectedRulesEngine['jsonuidata'];\n      const tabMap = new Map();\n      {\n        tabMap.set(\"IDS_Test\", /*#__PURE__*/React.createElement(DataGrid, {\n          key: \"testsectionkey\",\n          primaryKeyField: \"nresultusedmaterialcode\",\n          expandField: \"expanded\",\n          handleExpandChange: this.handleExpandChange,\n          dataResult: this.props.Login.masterData.SelectedRulesEngine && this.props.Login.masterData.SelectedRulesEngine && process(sortData(this.props.Login.masterData.SelectedRulesEngine['jsonuidata']['testInitiateTests'], \"descending\", \"npkAtestparametercode\") || [], this.state.dataStatetestinitiate ? this.state.dataStatetestinitiate : {\n            skip: 0,\n            take: 10\n          }),\n          dataState: this.state.dataStatetestinitiate ? this.state.dataStatetestinitiate : {\n            skip: 0,\n            take: 10\n          },\n          dataStateChange: this.dataStateChangetestinitiateTab,\n          extractedColumnList: [{\n            \"idsName\": \"IDS_TESTNAME\",\n            \"dataField\": \"stestsynonym\",\n            \"width\": \"200px\"\n          }],\n          controlMap: this.state.controlMap,\n          userRoleControlRights: this.state.userRoleControlRights,\n          pageable: true,\n          scrollable: 'scrollable',\n          hideColumnFilter: false,\n          selectedId: 0,\n          deleteParam: {\n            operation: \"delete\"\n          },\n          hasChild: true,\n          childMappingField: 'npkAtestparametercode',\n          childColumnList: [{\n            \"idsName\": \"IDS_TOSITE\",\n            \"dataField\": \"stositename\",\n            \"width\": \"200px\"\n          }, {\n            \"idsName\": \"IDS_FROMSITE\",\n            \"dataField\": \"sfromsitename\",\n            \"width\": \"200px\"\n          }],\n          childList: this.state.childListMap,\n          activeTabName: \"IDS_Test\",\n          gridHeight: '400px',\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1652,\n            columnNumber: 17\n          }\n        }));\n        tabMap.set(\"IDS_COMMENTS\", /*#__PURE__*/React.createElement(DataGrid, {\n          key: \"testsectionkey\",\n          primaryKeyField: \"nresultusedmaterialcode\",\n          handleExpandChange: this.handleExpandChange,\n          dataResult: this.props.Login.masterData.SelectedRulesEngine && process(sortData(this.props.Login.masterData.SelectedRulesEngine['jsonuidata']['testCommentsTestsTab'], \"descending\", \"nslno\") || [], this.state.dataState ? this.state.dataState : {\n            skip: 0,\n            take: 10\n          }),\n          dataState: this.state.dataState ? this.state.dataState : {\n            skip: 0,\n            take: 10\n          },\n          dataStateChange: this.dataStateChange,\n          controlMap: this.state.controlMap,\n          userRoleControlRights: this.state.userRoleControlRights,\n          pageable: true,\n          scrollable: 'scrollable',\n          hideColumnFilter: false,\n          selectedId: 0,\n          deleteParam: {\n            operation: \"delete\"\n          },\n          childMappingField: 'npkBtestparametercode',\n          extractedColumnList: [{\n            \"idsName\": \"IDS_DESCRIPTION\",\n            \"dataField\": \"sdescription\",\n            \"width\": \"200px\"\n          }, {\n            \"idsName\": \"IDS_RESULTS\",\n            \"dataField\": \"spredefinedname\",\n            \"width\": \"200px\"\n          }, {\n            \"idsName\": \"IDS_COMMENTSUBTYPE\",\n            \"dataField\": \"scommentsubtype\",\n            \"width\": \"200px\"\n          }, {\n            \"idsName\": \"IDS_COMMENTTYPE\",\n            \"dataField\": \"scommenttype\",\n            \"width\": \"200px\"\n          }, {\n            \"idsName\": \"IDS_TESTNAME\",\n            \"dataField\": \"stestsynonym\",\n            \"width\": \"200px\"\n          }],\n          childList: this.state.childListMap2 && this.state.childListMap2,\n          activeTabName: \"IDS_COMMENTS\",\n          gridHeight: '400px',\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1690,\n            columnNumber: 13\n          }\n        }));\n        tabMap.set(\"IDS_REPEAT\", /*#__PURE__*/React.createElement(DataGrid, {\n          key: \"testsectionkey\",\n          primaryKeyField: \"nresultusedmaterialcode\",\n          dataResult: this.props.Login.masterData.SelectedRulesEngine && process(sortData(this.props.Login.masterData.SelectedRulesEngine['jsonuidata']['testRepeatTestsTab'], \"descending\", \"npkCtestparametercode\") || [], this.state.dataStaterepeatTab ? this.state.dataStaterepeatTab : {\n            skip: 0,\n            take: 10\n          }),\n          dataState: this.state.dataStaterepeatTab ? this.state.dataStaterepeatTab : {\n            skip: 0,\n            take: 10\n          },\n          dataStateChange: this.dataStateChangeRepeatTab,\n          controlMap: this.state.controlMap,\n          userRoleControlRights: this.state.userRoleControlRights,\n          pageable: true,\n          scrollable: 'scrollable',\n          hideColumnFilter: false,\n          selectedId: 0,\n          deleteParam: {\n            operation: \"delete\"\n          },\n          extractedColumnList: [{\n            \"idsName\": \"IDS_TESTNAME\",\n            \"dataField\": \"stestsynonym\",\n            \"width\": \"200px\"\n          }, {\n            \"idsName\": \"IDS_REPEATCOUNT\",\n            \"dataField\": \"nrepeatcountno\",\n            \"width\": \"200px\"\n          }],\n          activeTabName: \"IDS_COMMENTS\",\n          gridHeight: '400px',\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1724,\n            columnNumber: 9\n          }\n        }));\n        tabMap.set(\"IDS_ENFORCERESULT\", /*#__PURE__*/React.createElement(DataGrid, {\n          key: \"testsectionkey\",\n          primaryKeyField: \"nresultusedmaterialcode\",\n          dataResult: this.props.Login.masterData.SelectedRulesEngine && process(sortData(this.props.Login.masterData.SelectedRulesEngine['jsonuidata']['testenforceTestsTab'], \"descending\", \"npkDtestparametercode\") || [], this.state.dataStateChangenforceTab ? this.state.dataStateChangenforceTab : {\n            skip: 0,\n            take: 10\n          }),\n          dataState: this.state.dataStateChangenforceTab ? this.state.dataStateChangenforceTab : {\n            skip: 0,\n            take: 10\n          },\n          dataStateChange: this.dataStateChangenforceTab,\n          controlMap: this.state.controlMap,\n          userRoleControlRights: this.state.userRoleControlRights,\n          pageable: true,\n          scrollable: 'scrollable',\n          hideColumnFilter: false,\n          selectedId: 0,\n          deleteParam: {\n            operation: \"delete\"\n          },\n          extractedColumnList: [{\n            \"idsName\": \"IDS_TESTNAME\",\n            \"dataField\": \"stestsynonym\",\n            \"width\": \"200px\"\n          }, {\n            \"idsName\": \"IDS_PARAMETERS\",\n            \"dataField\": \"sparametersynonym\",\n            \"width\": \"200px\"\n          }, {\n            \"idsName\": \"IDS_PASSFLAG\",\n            \"dataField\": \"sgradename\",\n            \"width\": \"200px\"\n          }, {\n            \"idsName\": \"IDS_RESULTS\",\n            \"dataField\": \"senforceresult\",\n            \"width\": \"200px\"\n          }],\n          activeTabName: \"IDS_COMMENTS\",\n          gridHeight: '400px',\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1753,\n            columnNumber: 5\n          }\n        }));\n      }\n      return tabMap;\n    };\n\n    this.dataStateChange = (event, ntestgrouptestparametercode) => {\n      let dataStateObject = this.state.dataStateObject || {};\n\n      if (ntestgrouptestparametercode) {\n        dataStateObject = { ...dataStateObject,\n          [ntestgrouptestparametercode]: event.dataState\n        };\n        this.setState({\n          dataStateObject\n        });\n      } else {\n        this.setState({\n          dataState: event.dataState\n        });\n      }\n    };\n\n    this.dataStateChangetestRepeat = event => {\n      this.setState({\n        //  dataResult: process(this.props.Login.queryData, event.dataState),\n        dataStatetestRepeat: event.dataState\n      });\n    };\n\n    this.dataStateChangetestEnforce = event => {\n      this.setState({\n        //  dataResult: process(this.props.Login.queryData, event.dataState),\n        dataStatetestEnforce: event.dataState\n      });\n    };\n\n    this.dataStateChangetestinitiateTab = event => {\n      this.setState({\n        //  dataResult: process(this.props.Login.queryData, event.dataState),\n        dataStatetestinitiate: event.dataState\n      });\n    };\n\n    this.dataStateChangeRepeatTab = event => {\n      this.setState({\n        //  dataResult: process(this.props.Login.queryData, event.dataState),\n        dataStaterepeatTab: event.dataState\n      });\n    };\n\n    this.dataStateChangenforceTab = event => {\n      this.setState({\n        //  dataResult: process(this.props.Login.queryData, event.dataState),\n        dataStateChangenforceTab: event.dataState\n      });\n    };\n\n    this.dataStateChangeMain = event => {\n      this.setState({\n        dataResultMain: process(this.props.Login.queryDataMain, event.dataStateMain),\n        dataStateMain: event.dataStateMain\n      });\n    };\n\n    this.ConfirmDeleteRule = deleteId => {\n      if (this.props.Login.masterData['RulesEngine'] && this.props.Login.masterData['RulesEngine'].length > 0) {\n        this.confirmMessage.confirm(\"deleteMessage\", this.props.intl.formatMessage({\n          id: \"IDS_DELETE\"\n        }), this.props.intl.formatMessage({\n          id: \"IDS_DEFAULTCONFIRMMSG\"\n        }), this.props.intl.formatMessage({\n          id: \"IDS_OK\"\n        }), this.props.intl.formatMessage({\n          id: \"IDS_CANCEL\"\n        }), () => this.handleClickDelete(this.props.Login.masterData, deleteId, \"openModal\"));\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTRULETODELETE\"\n        }));\n      }\n    };\n\n    this.closeModalShow = () => {\n      let openModalPopup = this.props.Login.openModalPopup;\n      let selectedRecord = this.props.Login.selectedRecord || {};\n      selectedRecord['srulename'] = \"\";\n      openModalPopup = false;\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          openModalPopup,\n          selectedRecord\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onsavevalidation = selectedRecord => {\n      let grouplist = selectedRecord[\"groupList\"];\n      let hasAll = true;\n\n      for (var i = 0; i < grouplist.length; i++) {\n        let rules = grouplist[i];\n\n        for (var j = 0; j < rules.length; j++) {\n          let props = [];\n\n          if (rules[j][\"orderresulttype\"] && rules[j][\"orderresulttype\"].value === 1) {\n            props = [\"stestname\", \"ssymbolname\", \"orderresulttype\", \"ndiagnosticcasecode\"];\n          } else if (rules[j][\"orderresulttype\"] && rules[j][\"orderresulttype\"].value === 3) {\n            if (rules[j][\"stestname\"] && rules[j][\"stestname\"]['item']['nparametertypecode'] === parameterType.PREDEFINED) {\n              props = [\"stestname\", \"ssymbolname\", \"orderresulttype\", \"ntestgrouptestpredefcode\"];\n            } else if (rules[j][\"stestname\"] && rules[j][\"stestname\"]['item']['nparametertypecode'] === parameterType.CHARACTER) {\n              props = [\"stestname\", \"ssymbolname\", \"orderresulttype\", \"ntestgrouptestcharcode\"];\n            } else if (rules[j][\"stestname\"] && rules[j][\"stestname\"]['item']['nparametertypecode'] === parameterType.NUMERIC) {\n              props = [\"stestname\", \"ssymbolname\", \"orderresulttype\", \"ntestgrouptestnumericcode\"];\n            } else {\n              if (rules[j][\"orderresulttype\"] && rules[j][\"orderresulttype\"].value === 1) {\n                props = [\"stestname\", \"ssymbolname\", \"orderresulttype\", \"ndiagnosticcasecode\"];\n              } else {\n                props = [\"stestname\", \"ssymbolname\", \"orderresulttype\", \"ngradecode\"];\n              }\n            }\n          } else {\n            props = [\"stestname\", \"ssymbolname\", \"orderresulttype\", \"ngradecode\"];\n          }\n\n          hasAll = props.every(prop => rules[j].hasOwnProperty(prop));\n\n          if (hasAll === false) {\n            break;\n          }\n        }\n\n        if (hasAll === false) {\n          break;\n        }\n      }\n\n      return hasAll;\n    };\n\n    this.save = () => {\n      let inputData = [];\n      let siteObject = this.props.Login.siteObject || {};\n      let testCommentObject = this.props.Login.testCommentObject || {};\n      let reportCommentObject = this.props.Login.reportCommentObject || {};\n      let PredefinedParameterOptions = this.props.Login.masterData.PredefinedParameterOptions || [];\n      let testInitiateTests = this.props.Login.testInitiateTests || [];\n      let testCommentsTests = this.props.Login.testCommentsTests || [];\n      let reportCommentsTests = this.props.Login.reportCommentsTests || [];\n      let testRepeatTests = this.props.Login.testRepeatTests || [];\n      let testenforceTests = this.props.Login.testenforceTests || [];\n      let testsInvolvedInRules = [];\n      let testsNameInvolvedInRules = [];\n      const {\n        selectedRecord\n      } = this.state;\n      let rules = []; //  if (selectedRecord[\"nproductcatcode\"]) {\n\n      if (testInitiateTests.length > 0 || testCommentsTests.length > 0 || testRepeatTests.length > 0 || testenforceTests.length > 0) {\n        if (selectedRecord[\"groupList\"].length > 0) {\n          if (this.onsavevalidation(selectedRecord)) {\n            if (selectedRecord[\"srulename\"] && selectedRecord[\"srulename\"] !== \"\" && this.props.Login.action !== 'update' && this.props.Login.action !== 'IDS_ADDTESTCOMMENTS' && this.props.Login.action !== 'IDS_ADDREPORTCOMMENTS' && this.props.Login.action !== 'IDS_ADDTEST' && this.props.Login.action !== 'IDS_ADDSITE') {\n              if (selectedRecord[\"groupList\"]) {\n                let groupList = [];\n                let outcomeList = {};\n                groupList = selectedRecord[\"groupList\"];\n                outcomeList['groupList'] = groupList;\n                outcomeList['addGroupList'] = this.props.Login.addGroupList;\n                outcomeList['testInitiateTests'] = this.props.Login.testInitiateTests && this.props.Login.testInitiateTests;\n                outcomeList['testCommentsTests'] = this.props.Login.testCommentsTests && this.props.Login.testCommentsTests;\n                outcomeList['testRepeatTests'] = this.props.Login.testRepeatTests && this.props.Login.testRepeatTests;\n                outcomeList['testenforceTests'] = this.props.Login.testenforceTests && this.props.Login.testenforceTests;\n                outcomeList['reportCommentsTests'] = this.props.Login.reportCommentsTests && this.props.Login.reportCommentsTests;\n                outcomeList['siteObject'] = this.props.Login.siteObject && this.props.Login.siteObject;\n                outcomeList['testCommentObject'] = this.props.Login.testCommentObject && this.props.Login.testCommentObject;\n                outcomeList['reportCommentObject'] = this.props.Login.reportCommentObject && this.props.Login.reportCommentObject;\n                outcomeList['testInitiateSiteTab'] = this.props.Login.masterData.testInitiateSiteTab && this.props.Login.masterData.testInitiateSiteTab;\n                outcomeList['testCommentsTestsTab'] = this.props.Login.masterData.testCommentsTestsTab && this.props.Login.masterData.testCommentsTestsTab;\n                outcomeList['reportCommentsTestsTab'] = this.props.Login.reportCommentsTestsTab && this.props.Login.reportCommentsTestsTab;\n                outcomeList['testRepeatTestsTab'] = this.props.Login.masterData['testRepeatTestsTab'] && this.props.Login.masterData['testRepeatTestsTab'];\n                outcomeList['testenforceTestsTab'] = this.props.Login.masterData['testenforceTestsTab'] && this.props.Login.masterData['testenforceTestsTab'];\n                outcomeList['PredefinedParameterOptions'] = PredefinedParameterOptions; // outcomeList['nproductcatcode'] = selectedRecord['nproductcatcode']\n\n                outcomeList['ntestgrouptestcode'] = this.props.Login.masterData.SelectedTest.ntestgrouptestcode; // outcomeList['nallottedspeccode'] = selectedRecord['nallottedspeccode']\n                // outcomeList['ncomponentcode'] = selectedRecord['ncomponentcode'] \n\n                outcomeList['groupListJoins'] = selectedRecord['groupListJoins'] ? selectedRecord['groupListJoins'] : [];\n                let ruleEngineLayout = [];\n                let ruleEngineLayoutObject = [];\n                let groupRuleObject = {};\n                groupList.map(List => List.map(x => {\n                  testsInvolvedInRules.push(x.stestname.item.ntestgrouptestcode);\n                  testsNameInvolvedInRules.push(x.stestname.item);\n                }));\n                outcomeList['testsNameInvolvedInRules'] = testsNameInvolvedInRules;\n                outcomeList['testsInvolvedInRules'] = testsInvolvedInRules;\n                groupList.map(List => {\n                  if (List.hasOwnProperty('button_or') && List['button_or'] === true) {\n                    if (List.hasOwnProperty('button_not') && List['button_not'] === true) {\n                      groupRuleObject['button_not_button_or'] = List;\n                    } else {\n                      groupRuleObject['button_or'] = List;\n                    } // groupRuleObject['button_or'] = List\n\n\n                    ruleEngineLayout.push(groupRuleObject);\n                    groupRuleObject = {};\n                  }\n\n                  if (List.hasOwnProperty('button_and') && List['button_and'] === true) {\n                    if (List.hasOwnProperty('button_not') && List['button_not'] === true) {\n                      groupRuleObject['button_not_button_and'] = List;\n                    } else {\n                      groupRuleObject['button_and'] = List;\n                    } //  groupRuleObject['button_and'] = List\n\n\n                    ruleEngineLayout.push(groupRuleObject);\n                    groupRuleObject = {};\n                  }\n                });\n                ruleEngineLayoutObject = groupList.hasOwnProperty('button_or') && groupList['button_or'] === true ? {\n                  'button_or': ruleEngineLayout\n                } : {\n                  'button_and': ruleEngineLayout\n                }; // console.log('savelist--->', JSON.stringify(ruleEngineLayoutObject))\n                //  inputData['nproductcatcode'] = this.props.Login.masterData.SelectedProductCategory.nproductcatcode\n                //  inputData['nproductcatcode'] = selectedRecord['nproductcatcode'].value\n\n                inputData['ntestgrouptestcode'] = this.props.Login.masterData.SelectedTest.ntestgrouptestcode; // inputData['nallottedspeccode'] = selectedRecord['nallottedspeccode'].value\n                // inputData['ncomponentcode'] = selectedRecord['ncomponentcode'].value\n\n                inputData['srulename'] = selectedRecord['srulename']; //   inputData['nruleexecorder'] = parseInt(selectedRecord['nruleexecorder'])\n\n                inputData['outcomeList'] = JSON.stringify(outcomeList);\n                inputData['jsondata'] = JSON.stringify(ruleEngineLayout);\n                inputData['userinfo'] = this.props.Login.userInfo;\n\n                if (this.props.Login.operation === 'update') {\n                  inputData['ntestgrouprulesenginecode'] = this.props.Login.masterData.SelectedRulesEngine['ntestgrouprulesenginecode'];\n                }\n\n                const inputParam = {\n                  classUrl: \"testgrouprulesengine\",\n                  methodUrl: \"TestGroupRulesEngine\",\n                  displayName: this.props.Login.inputParam.displayName,\n                  inputData: inputData,\n                  operation: this.props.Login.operation === 'create' ? 'create' : 'update'\n                };\n                this.props.crudMaster(inputParam, this.props.Login.masterData, \"openPortalModal\");\n              } else {\n                toast.info(this.props.intl.formatMessage({\n                  id: \"IDS_PLEASEADDRULE\"\n                }));\n              }\n            } else {\n              selectedRecord['srulename'] = selectedRecord['srulenamecopy'] || \"\"; //  selectedRecord['nruleexecorder'] = selectedRecord['nruleexecordercopy'] || \"\"\n\n              const updateInfo = {\n                typeName: DEFAULT_RETURN,\n                data: {\n                  openModalPopup: true,\n                  selectedRecord,\n                  action: \"IDS_SAVERULEMODAL\",\n                  openmodalsavePopup: true\n                }\n              };\n              this.props.updateStore(updateInfo); //   toast.info(this.props.intl.formatMessage({ id: \"IDS_ENTERRULESENGINENAME\" }));\n            }\n          } else {\n            toast.info(this.props.intl.formatMessage({\n              id: \"IDS_COMPLETETHERULETOSAVE\"\n            }));\n          }\n        } else {\n          toast.info(this.props.intl.formatMessage({\n            id: \"IDS_ATLEASTADDONERULE\"\n          }));\n        }\n      } else {\n        toast.info(this.props.intl.formatMessage({\n          id: \"IDS_ATLEASTADDONEOUTCOME\"\n        }));\n      }\n    };\n\n    this.onOutcomeChange = (comboData, index) => {\n      const {\n        selectedRecord\n      } = this.state;\n      selectedRecord[\"outComeList\"] = [];\n      selectedRecord[\"outComeList\"][index] = [];\n      selectedRecord[\"outComeList\"][index] = comboData;\n\n      if (selectedRecord[\"outComeList\"][index]) {\n        this.setState({\n          selectedRecord\n        });\n      }\n    };\n\n    this.writtenRules = data => {\n      let selectedRecord = this.state.selectedRecord || {};\n      let grouplist = selectedRecord[\"groupList\"];\n      let activeTabIndex = this.props.Login.activeTabIndex || 0;\n\n      if (activeTabIndex === 1) {\n        let boolean = grouplist.every(x => x.every(y => y['stestname']['item'].ntestgrouptestcode !== data['item'].ntestgrouptestcode));\n\n        if (boolean) {\n          return data;\n        }\n      } else {\n        let boolean = grouplist.some(x => x.some(y => y['stestname']['item'].ntestgrouptestcode === data['item'].ntestgrouptestcode));\n\n        if (boolean) {\n          return data;\n        }\n      }\n    };\n\n    this.selectedTestRemove = data => {\n      let activeTabIndex = this.props.Login.activeTabIndex || 0;\n\n      if (activeTabIndex === 1) {\n        if (this.props.Login.masterData.SelectedTest.ntestgrouptestcode !== data['item'].ntestgrouptestcode) {\n          return data;\n        }\n      } else {\n        if (this.props.Login.masterData.SelectedTest.ntestgrouptestcode === data['item'].ntestgrouptestcode) {\n          return data;\n        }\n      }\n    };\n\n    this.outComeTestsRemoveFromRules = data => {\n      let testInitiateTests = this.props.Login.testInitiateTests;\n      let boolean = testInitiateTests.every(x => x['ntestgrouptestcode'] !== data['item'].ntestgrouptestcode);\n\n      if (boolean) {\n        return data;\n      }\n    };\n\n    this.addTest = tabName => {\n      let openModalPopup = this.props.Login.openModalPopup;\n      let action = this.props.Login.action;\n      let selectedRecord = this.props.Login.selectedRecord || {};\n      let rulesOption = this.props.Login.masterData.rulesOption || [];\n      let testInitiateTestCombo = this.props.Login.masterData.testInitiateTestCombo || [];\n      let testCommentsTestCombo = this.props.Login.masterData.testCommentsTestCombo || [];\n      let testRepeatTestCombo = this.props.Login.masterData.testRepeatTestCombo || [];\n      let testenforceTestCombo = this.props.Login.masterData.testenforceTestCombo || [];\n\n      if (tabName == 'IDS_Test') {\n        testInitiateTestCombo = testInitiateTestCombo.filter(this.selectedTestRemove);\n        testInitiateTestCombo = testInitiateTestCombo.filter(this.writtenRules);\n      } else if (tabName == 'IDS_COMMENTS') {\n        let selectedTestTempArray = [];\n        selectedTestTempArray = testCommentsTestCombo.filter(this.selectedTestRemove);\n        testCommentsTestCombo = testCommentsTestCombo.filter(this.writtenRules);\n        let duplicatePresent = selectedTestTempArray.some(x => testCommentsTestCombo.some(y => y['item'].ntestgrouptestcode === x['item'].ntestgrouptestcode));\n\n        if (duplicatePresent) {\n          testCommentsTestCombo = testCommentsTestCombo;\n        } else {\n          testCommentsTestCombo = [...testCommentsTestCombo, ...selectedTestTempArray];\n        }\n      } else if (tabName == 'IDS_REPEAT') {\n        let selectedTestTempArray = [];\n        selectedTestTempArray = testRepeatTestCombo.filter(this.selectedTestRemove);\n        testRepeatTestCombo = testRepeatTestCombo.filter(this.writtenRules);\n        let duplicatePresent = selectedTestTempArray.some(x => testRepeatTestCombo.some(y => y['item'].ntestgrouptestcode === x['item'].ntestgrouptestcode));\n\n        if (duplicatePresent) {\n          testRepeatTestCombo = testRepeatTestCombo;\n        } else {\n          testRepeatTestCombo = [...testRepeatTestCombo, ...selectedTestTempArray];\n        }\n      } else if (tabName == 'IDS_ENFORCERESULT') {\n        let selectedTestTempArray = [];\n        selectedTestTempArray = testenforceTestCombo.filter(this.selectedTestRemove);\n        testenforceTestCombo = testenforceTestCombo.filter(this.writtenRules);\n        let duplicatePresent = selectedTestTempArray.some(x => testenforceTestCombo.some(y => y['item'].ntestgrouptestcode === x['item'].ntestgrouptestcode));\n\n        if (duplicatePresent) {\n          testenforceTestCombo = testenforceTestCombo;\n        } else {\n          testenforceTestCombo = [...testenforceTestCombo, ...selectedTestTempArray];\n        }\n      } else {}\n\n      selectedRecord['ntestgrouptestcode'] && delete selectedRecord['ntestgrouptestcode'];\n      selectedRecord['nsampletestcommentscode'] && delete selectedRecord['nsampletestcommentscode'];\n      selectedRecord['ncommentsubtypecode'] && delete selectedRecord['ncommentsubtypecode'];\n      selectedRecord['ncommenttypecode'] && delete selectedRecord['ncommenttypecode'];\n      selectedRecord['sgeneralcomments'] && delete selectedRecord['sgeneralcomments'];\n      selectedRecord['needoutsource'] && delete selectedRecord['needoutsource'];\n      selectedRecord['sdescription'] && delete selectedRecord['sdescription'];\n      selectedRecord['ntestgrouptestparametercode'] && delete selectedRecord['ntestgrouptestparametercode'];\n      selectedRecord['senforceresult'] && delete selectedRecord['senforceresult'];\n      selectedRecord['ngradecode'] && delete selectedRecord['ngradecode'];\n      selectedRecord['nfromsitecode'] && delete selectedRecord['nfromsitecode'];\n      selectedRecord['ntositecode'] && delete selectedRecord['ntositecode'];\n      selectedRecord['nrepeatcountno'] && delete selectedRecord['nrepeatcountno'];\n\n      if (this.props.Login.addGroupList.length > 0) {\n        action = \"IDS_ADDTEST\";\n        openModalPopup = true;\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            openModalPopup,\n            action,\n            selectedRecord,\n            openmodalsavePopup: false,\n            testInitiateTestCombo,\n            testCommentsTestCombo,\n            testRepeatTestCombo,\n            testenforceTestCombo\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_PLEASEADDRULETOADDOUTCOME\"\n        }));\n      }\n    };\n\n    this.onRuleChange = (comboData, fieldName, groupIndex, index) => {\n      let PredefinedParameterOptions = this.props.Login.masterData.PredefinedParameterOptions || [];\n      const {\n        selectedRecord\n      } = this.state;\n      this.clearSelectedRule(selectedRecord, index);\n\n      if (selectedRecord[\"groupList\"][groupIndex][index][fieldName] && selectedRecord[\"groupList\"][groupIndex][index][fieldName].value !== comboData.value) {\n        selectedRecord[\"groupList\"][groupIndex][index]['ndiagnosticcasecode'] && delete selectedRecord[\"groupList\"][groupIndex][index]['ndiagnosticcasecode'];\n        selectedRecord[\"groupList\"][groupIndex][index]['ngradecode'] && delete selectedRecord[\"groupList\"][groupIndex][index]['ngradecode'];\n        selectedRecord[\"groupList\"][groupIndex][index]['ntestgrouptestpredefcode'] && delete selectedRecord[\"groupList\"][groupIndex][index]['ntestgrouptestpredefcode'];\n        selectedRecord[\"groupList\"][groupIndex][index]['ntestgrouptestcharcode'] && delete selectedRecord[\"groupList\"][groupIndex][index]['ntestgrouptestcharcode'];\n        selectedRecord[\"groupList\"][groupIndex][index]['ntestgrouptestnumericcode'] && delete selectedRecord[\"groupList\"][groupIndex][index]['ntestgrouptestnumericcode'];\n        selectedRecord[\"groupList\"][groupIndex][index]['ssymbolname'] && delete selectedRecord[\"groupList\"][groupIndex][index]['ssymbolname'];\n      }\n\n      selectedRecord[\"groupList\"][groupIndex][index][fieldName] = comboData;\n      selectedRecord[\"groupList\"][groupIndex][index][fieldName]['nparenttestgrouptestcode'] = this.props.Login.masterData.SelectedTest.ntestgrouptestcode;\n      selectedRecord[\"groupList\"][groupIndex][index][fieldName]['nparentstestname'] = this.props.Login.masterData.SelectedTest.stestname;\n\n      if (selectedRecord[\"groupList\"][groupIndex][index]['orderresulttype']) {\n        if (selectedRecord[\"groupList\"][groupIndex][index]['orderresulttype'].value === 3) {\n          let nparametertypecode = selectedRecord[\"groupList\"][groupIndex][index][fieldName]['item']['nparametertypecode'];\n\n          if (nparametertypecode === parameterType.PREDEFINED) {\n            this.props.getParameterResultValue(selectedRecord[\"groupList\"][groupIndex][index], groupIndex, index, PredefinedParameterOptions, selectedRecord, this.props.Login.masterData, this.props.Login.userInfo);\n          } else {\n            if (selectedRecord[\"groupList\"][groupIndex][index][fieldName]) {\n              this.setState({\n                selectedRecord,\n                groupIndex,\n                index\n              });\n            }\n          }\n        } else {\n          if (selectedRecord[\"groupList\"][groupIndex][index][fieldName]) {\n            this.setState({\n              selectedRecord,\n              groupIndex,\n              index\n            });\n          }\n        }\n      } else {\n        if (selectedRecord[\"groupList\"][groupIndex][index][fieldName]) {\n          this.setState({\n            selectedRecord,\n            groupIndex,\n            index\n          });\n        }\n      }\n    };\n\n    this.onRuleInputChange = (event, fieldName, groupIndex, index) => {\n      const {\n        selectedRecord\n      } = this.state;\n      selectedRecord[\"groupList\"][groupIndex][index][fieldName] = event.target.value;\n      selectedRecord[\"groupList\"][groupIndex][index]['sfinal'] = event.target.value;\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onRuleNumericInputOnChange = (event, fieldName, groupIndex, index) => {\n      const {\n        selectedRecord\n      } = this.state;\n\n      if (groupIndex === undefined && index === undefined) {\n        selectedRecord[fieldName] = event;\n        this.setState({\n          selectedRecord\n        });\n      } else {\n        if (event !== 0) {\n          selectedRecord[\"groupList\"][groupIndex][index][fieldName] = event;\n          selectedRecord[\"groupList\"][groupIndex][index]['sfinal'] = event;\n          this.setState({\n            selectedRecord\n          });\n        }\n      }\n    };\n\n    this.onMasterDataChange = (comboData, fieldName, groupIndex, index) => {\n      const {\n        selectedRecord\n      } = this.state;\n      let PredefinedParameterOptions = this.props.Login.masterData.PredefinedParameterOptions || [];\n      let isResultorOrderType = [];\n      let optionsByRule = [];\n\n      if (this.state.optionsByRule && this.state.optionsByRule.length > 0) {\n        optionsByRule = this.state.optionsByRule;\n      } else {\n        optionsByRule[groupIndex] = [];\n        optionsByRule[groupIndex][index] = [];\n      }\n\n      if (this.state.isResultorOrderType && this.state.isResultorOrderType.length > 0) {\n        isResultorOrderType = this.state.isResultorOrderType;\n      } else {\n        isResultorOrderType[groupIndex] = [];\n        isResultorOrderType[groupIndex][index] = [];\n      }\n\n      if (fieldName !== 'ndiagnosticcasecode' && fieldName !== 'ngradecode' && fieldName !== 'ntestgrouptestpredefcode' && fieldName !== 'ntestgrouptestcharcode' && fieldName !== 'ntestgrouptestnumericcode') {\n        if (selectedRecord[\"groupList\"][groupIndex][index][fieldName] && selectedRecord[\"groupList\"][groupIndex][index][fieldName].value !== comboData.value) {\n          selectedRecord[\"groupList\"][groupIndex][index]['ndiagnosticcasecode'] && delete selectedRecord[\"groupList\"][groupIndex][index]['ndiagnosticcasecode'];\n          selectedRecord[\"groupList\"][groupIndex][index]['ngradecode'] && delete selectedRecord[\"groupList\"][groupIndex][index]['ngradecode'];\n          selectedRecord[\"groupList\"][groupIndex][index]['ntestgrouptestpredefcode'] && delete selectedRecord[\"groupList\"][groupIndex][index]['ntestgrouptestpredefcode'];\n          selectedRecord[\"groupList\"][groupIndex][index]['ntestgrouptestcharcode'] && delete selectedRecord[\"groupList\"][groupIndex][index]['ntestgrouptestcharcode'];\n          selectedRecord[\"groupList\"][groupIndex][index]['ntestgrouptestnumericcode'] && delete selectedRecord[\"groupList\"][groupIndex][index]['ntestgrouptestnumericcode'];\n          selectedRecord[\"groupList\"][groupIndex][index]['ssymbolname'] && delete selectedRecord[\"groupList\"][groupIndex][index]['ssymbolname'];\n        }\n\n        selectedRecord[\"groupList\"][groupIndex][index][fieldName] = comboData;\n\n        if (isResultorOrderType[groupIndex] === undefined) {\n          isResultorOrderType[groupIndex] = [];\n          isResultorOrderType[groupIndex][index] = [];\n        }\n\n        isResultorOrderType[groupIndex][index] = comboData.value;\n\n        if (optionsByRule[groupIndex] === undefined) {\n          optionsByRule[groupIndex] = [];\n          optionsByRule[groupIndex][index] = [];\n        }\n\n        if (isResultorOrderType[groupIndex][index] === 1) {\n          optionsByRule[groupIndex][index] = this.props.Login.masterData.DiagnosticCaseList;\n        } else if (isResultorOrderType[groupIndex][index] === 3) {\n          let nparametertypecode = selectedRecord[\"groupList\"][groupIndex][index]['stestname']['item']['nparametertypecode'];\n\n          if (nparametertypecode === parameterType.PREDEFINED) {\n            this.props.getParameterResultValue(selectedRecord[\"groupList\"][groupIndex][index], groupIndex, index, PredefinedParameterOptions, selectedRecord, this.props.Login.masterData, this.props.Login.userInfo);\n          } else {\n            optionsByRule[groupIndex][index] = this.props.Login.masterData.GradeList;\n          }\n        } else {\n          optionsByRule[groupIndex][index] = this.props.Login.masterData.GradeList;\n        }\n\n        this.setState({\n          selectedRecord,\n          isResultorOrderType,\n          optionsByRule\n        });\n      } else {\n        selectedRecord[\"groupList\"][groupIndex][index][fieldName] = comboData;\n        selectedRecord[\"groupList\"][groupIndex][index]['sfinal'] = comboData.label;\n        this.setState({\n          selectedRecord\n        });\n      }\n    };\n\n    this.addRule = (type, groupIndex) => {\n      const {\n        selectedRecord\n      } = this.state;\n      let viewColumnListByRule = this.props.Login.viewColumnListByRule || [];\n      const addGroupList = this.props.Login.addGroupList || [];\n      const arrayLength = addGroupList[groupIndex];\n      addGroupList[groupIndex] = arrayLength + 1;\n      selectedRecord[\"groupList\"][groupIndex][arrayLength] = {};\n      viewColumnListByRule = this.props.Login.viewColumnList || this.props.Login.databaseviewList;\n      ;\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          addGroupList,\n          viewColumnListByRule,\n          activeTabIndex: 0\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.paneSizeChange = d => {\n      this.setState({\n        splitChangeWidthPercentage: d\n      });\n    };\n\n    this.addComments = () => {\n      let openModalPopup = this.props.Login.openModalPopup;\n      let action = this.props.Login.action;\n      let selectedParameterRulesEngine = this.props.Login.masterData.selectedParameterRulesEngine || [];\n      let testparameter = this.props.Login.masterData.testCommentsTestCombo || [];\n      let selectedRecord = this.props.Login.selectedRecord || {};\n      selectedRecord['ntestgrouptestcode'] = {};\n      selectedRecord['ntestgrouptestcode'] = testparameter.filter(x => {\n        return x.value === selectedParameterRulesEngine.ntestgrouptestcode;\n      })[0];\n      delete selectedRecord['nsampletestcommentscode'];\n      delete selectedRecord['ncommentsubtypecode'];\n      delete selectedRecord['ncommenttypecode'];\n      delete selectedRecord['sgeneralcomments'];\n      delete selectedRecord['sdescription'];\n\n      if (this.props.Login.addGroupList.length > 0) {\n        if (this.props.Login.activeTabIndex === 2) {\n          action = \"IDS_ADDTESTCOMMENTS\";\n        } else {\n          action = \"IDS_ADDREPORTCOMMENTS\";\n        }\n\n        openModalPopup = true;\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            openModalPopup,\n            action,\n            selectedRecord,\n            openmodalsavePopup: false\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_PLEASEADDRULETOADDOUTCOME\"\n        }));\n      }\n    };\n\n    this.addModalSite = () => {\n      let openModalPopup = this.props.Login.openModalPopup;\n      let selectedParameterRulesEngine = this.props.Login.masterData.selectedParameterRulesEngine || [];\n      let testparameter = this.props.Login.masterData.testInitiateTestCombo || [];\n      let selectedRecord = this.props.Login.selectedRecord || {};\n      selectedRecord['ntestgrouptestcode'] = {};\n      selectedRecord['ntestgrouptestcode'] = testparameter.filter(x => {\n        return x.value === selectedParameterRulesEngine.ntestgrouptestcode;\n      })[0];\n      selectedRecord['nfromsitecode'] && delete selectedRecord['nfromsitecode'];\n      selectedRecord['ntositecode'] && delete selectedRecord['ntositecode'];\n      openModalPopup = true;\n      let action = this.props.Login.action;\n      action = \"IDS_ADDSITE\";\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          selectedRecord,\n          openModalPopup,\n          action,\n          openmodalsavePopup: false\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.modalsaveClick = () => {\n      let needoutsource = this.props.Login.needoutsource || {};\n      let selectedRecord = this.state.selectedRecord || {};\n      let masterData = this.props.Login.masterData || {};\n      let testInitiateTests = this.props.Login.testInitiateTests || [];\n      let testCommentsTests = this.props.Login.testCommentsTests || [];\n      let testRepeatTests = this.props.Login.testRepeatTests || [];\n      let testenforceTests = this.props.Login.testenforceTests || [];\n      let reportCommentsTests = this.props.Login.reportCommentsTests || [];\n      let siteObject = this.props.Login.siteObject || {};\n      let testCommentObject = this.props.Login.testCommentObject || {};\n      let reportCommentObject = this.props.Login.reportCommentObject || {};\n      let testInitiateTestsTemp = [];\n      let testCommentsTestsTemp = [];\n      let reportCommentsTestsTemp = [];\n      let testInitiateSiteTemp = [];\n      let testCommentsTestsTab = this.props.Login.masterData.testCommentsTestsTab || [];\n      let reportCommentsTestsTab = this.props.Login.reportCommentsTestsTab || [];\n      let testInitiateSiteTab = this.props.Login.masterData.testInitiateSiteTab || [];\n      let testInitiateTestOptions = this.props.Login.testInitiateTestOptions || [];\n      let testCommentsTestOptions = this.props.Login.testCommentsTestOptions || [];\n      let reportCommentsTestOptions = this.props.Login.reportCommentsTestOptions || [];\n      let testInitiateTestdeletedOptions = this.props.Login.testInitiateTestdeletedOptions || [];\n      let testCommentsTestdeletedOptions = this.props.Login.testCommentsTestdeletedOptions || [];\n      let reportCommentsTestdeletedOptions = this.props.Login.reportCommentsTestdeletedOptions || [];\n      let updateInfo = {};\n\n      if (this.props.Login.action === 'IDS_ADDTEST') {\n        let npkAtestparametercode = 0;\n        let npkBtestparametercode = 0;\n        let npkCtestparametercode = 0;\n        let npkDtestparametercode = 0;\n\n        if (this.props.Login.activeTabIndex === 1) {\n          let isduplicate = {};\n          isduplicate = testInitiateTests.filter(x => x.ntestgrouptestcode === selectedRecord['ntestgrouptestcode'].item['ntestgrouptestcode']);\n\n          if (isduplicate.length === 0) {\n            masterData['testParameter'] = {};\n            npkAtestparametercode = testInitiateTests.length > 0 ? Math.max(...testInitiateTests.map(x => x.npkAtestparametercode)) : 0;\n            npkAtestparametercode++;\n            selectedRecord['ntestgrouptestcode'].item['npkAtestparametercode'] = npkAtestparametercode;\n\n            if (selectedRecord['ntestgrouptestcode'].item['nrepeatcountno']) {\n              selectedRecord['ntestgrouptestcode'].item['nrepeatcountno'] = 0;\n            }\n\n            testInitiateTests.push(selectedRecord['ntestgrouptestcode'].item);\n            masterData['testParameter'] = sortData(testInitiateTests, 'descending', 'npkAtestparametercode');\n            masterData['selectedParameterRulesEngine'] = selectedRecord['ntestgrouptestcode'].item;\n            delete selectedRecord['ntestgrouptestcode'];\n          } else {\n            return toast.warn(this.props.intl.formatMessage({\n              id: \"IDS_ALREADYEXISTS\"\n            }));\n          }\n        }\n\n        if (this.props.Login.activeTabIndex === 2) {\n          let isduplicate = {};\n          isduplicate = testCommentsTests.filter(x => x.ntestgrouptestcode === selectedRecord['ntestgrouptestcode'].item['ntestgrouptestcode']);\n\n          if (isduplicate.length === 0) {\n            masterData['testParameterComments'] = {};\n            npkBtestparametercode = testCommentsTests.length > 0 ? Math.max(...testCommentsTests.map(x => x.npkBtestparametercode)) : 0;\n            npkBtestparametercode++;\n            selectedRecord['ntestgrouptestcode'].item['npkBtestparametercode'] = npkBtestparametercode;\n            selectedRecord['ntestgrouptestcode'].item['sdescription'] = selectedRecord['sdescription'] ? selectedRecord['sdescription'] : '-';\n            testCommentsTests.push(selectedRecord['ntestgrouptestcode'].item);\n            masterData['testParameterComments'] = sortData(testCommentsTests, 'descending', 'npkBtestparametercode');\n            masterData['selectedParameterRulesEngine'] = selectedRecord['ntestgrouptestcode'].item; //delete selectedRecord['ntestgrouptestcode']\n          } else {\n            return toast.warn(this.props.intl.formatMessage({\n              id: \"IDS_ALREADYEXISTS\"\n            }));\n          }\n        }\n\n        if (this.props.Login.activeTabIndex === 3) {\n          let isduplicate = {};\n          isduplicate = testRepeatTests.filter(x => x.ntestgrouptestcode === selectedRecord['ntestgrouptestcode'].item['ntestgrouptestcode']);\n\n          if (isduplicate.length === 0) {\n            masterData['testRepeat'] = {};\n            npkCtestparametercode = testRepeatTests.length > 0 ? Math.max(...testRepeatTests.map(x => x.npkCtestparametercode)) : 0;\n            npkCtestparametercode++;\n            selectedRecord['ntestgrouptestcode'].item['npkCtestparametercode'] = npkCtestparametercode;\n            selectedRecord['ntestgrouptestcode'].item['nrepeatcountno'] = selectedRecord['nrepeatcountno'] ? selectedRecord['nrepeatcountno'] : 1;\n            testRepeatTests.push(selectedRecord['ntestgrouptestcode'].item);\n            masterData['testRepeatTestsTab'] = sortData(testRepeatTests, 'descending', 'npkCtestparametercode');\n            masterData['testRepeat'] = sortData(testRepeatTests, 'descending', 'npkCtestparametercode');\n            masterData['selectedParameterRulesEngine'] = selectedRecord['ntestgrouptestcode'].item;\n            delete selectedRecord['ntestgrouptestcode'];\n          } else {\n            return toast.warn(this.props.intl.formatMessage({\n              id: \"IDS_ALREADYEXISTS\"\n            }));\n          }\n        }\n\n        if (this.props.Login.activeTabIndex === 4) {\n          let isduplicate = {}; // isduplicate = testenforceTests.filter(x => x.ntestgrouptestcode ===\n          //     selectedRecord['ntestgrouptestcode'].item['ntestgrouptestcode'])\n\n          isduplicate = testenforceTests.some(x => selectedRecord['ntestgrouptestcode'].value === x.ntestgrouptestcode && selectedRecord['ntestgrouptestparametercode'].value === x.ntestgrouptestparametercode);\n\n          if (!isduplicate) {\n            masterData['testenforceTests'] = {};\n            npkDtestparametercode = testenforceTests.length > 0 ? Math.max(...testenforceTests.map(x => x.npkDtestparametercode)) : 0;\n            npkDtestparametercode++; // selectedRecord['ntestgrouptestcode'].item['sparametersynonym'] = selectedRecord['ntestgrouptestparametercode'] && selectedRecord['ntestgrouptestparametercode'].label\n            // selectedRecord['ntestgrouptestcode'].item['ngradecode'] = selectedRecord['ngradecode'] && selectedRecord['ngradecode'].value\n            // selectedRecord['ntestgrouptestcode'].item['sgradename'] = selectedRecord['ngradecode'] && selectedRecord['ngradecode'].label\n            // selectedRecord['ntestgrouptestcode'].item['ntestgrouptestparametercode'] = selectedRecord['ntestgrouptestparametercode'] && selectedRecord['ntestgrouptestparametercode'].value\n            // selectedRecord['ntestgrouptestcode'].item['senforceresult'] = selectedRecord['senforceresult'] && selectedRecord['senforceresult']\n\n            let object = { ...selectedRecord['ntestgrouptestcode'].item,\n              'sparametersynonym': selectedRecord['ntestgrouptestparametercode'] && selectedRecord['ntestgrouptestparametercode'].label,\n              'ngradecode': selectedRecord['ngradecode'] && selectedRecord['ngradecode'].value,\n              'sgradename': selectedRecord['ngradecode'] && selectedRecord['ngradecode'].label,\n              'ntestgrouptestparametercode': selectedRecord['ntestgrouptestparametercode'] && selectedRecord['ntestgrouptestparametercode'].value,\n              'senforceresult': selectedRecord['senforceresult'] && selectedRecord['senforceresult'],\n              'npkDtestparametercode': npkDtestparametercode\n            }; // selectedRecord['ntestgrouptestcode'].item['npkDtestparametercode'] = npkDtestparametercode\n\n            testenforceTests.push(object);\n            masterData['testenforceTestsTab'] = sortData(testenforceTests, 'descending', 'npkDtestparametercode');\n            masterData['testenforceTests'] = sortData(testenforceTests, 'descending', 'npkDtestparametercode'); //  masterData['selectedParameterRulesEngine'] = selectedRecord['ntestgrouptestcode'].item\n\n            delete selectedRecord['ntestgrouptestcode'];\n          } else {\n            return toast.warn(this.props.intl.formatMessage({\n              id: \"IDS_ALREADYEXISTS\"\n            }));\n          }\n        }\n\n        updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            openModalPopup: false,\n            masterData,\n            testInitiateTests,\n            testCommentsTests,\n            reportCommentsTests,\n            npkAtestparametercode,\n            npkBtestparametercode,\n            npkCtestparametercode,\n            testInitiateTestOptions,\n            testInitiateTestdeletedOptions,\n            selectedRecord,\n            testRepeatTests,\n            testenforceTests\n          }\n        };\n      }\n\n      if (selectedRecord['nsampletestcommentscode'] || selectedRecord['sgeneralcomments']) {\n        masterData['testComments'] = {};\n        let npKAsampletestcommentscode = 0;\n        let nslno = 0;\n        let object = {\n          ncommentsubtypecode: selectedRecord['ncommentsubtypecode'],\n          scommentsubtype: selectedRecord['ncommentsubtypecode']['label'],\n          stestsynonym: selectedRecord['ntestgrouptestcode']['label'],\n          ncommenttypecode: selectedRecord['ncommenttypecode']['value'],\n          scommenttype: selectedRecord['ncommenttypecode']['label'],\n          nsampletestcommentscode: selectedRecord['nsampletestcommentscode'] ? selectedRecord['nsampletestcommentscode'] : -1,\n          // spredefinedname: selectedRecord['nsampletestcommentscode'] ? selectedRecord['nsampletestcommentscode'].label : \"-\",\n          // sgeneralcomments: selectedRecord['sgeneralcomments'] ? selectedRecord['sgeneralcomments'] : \"-\",\n          spredefinedname: selectedRecord['nsampletestcommentscode'] ? selectedRecord['nsampletestcommentscode'].label : selectedRecord['sgeneralcomments'] ? selectedRecord['sgeneralcomments'] : \"-\",\n          scomments: selectedRecord['sdescription'] ? selectedRecord['sdescription'] : '-',\n          sdescription: selectedRecord['sdescription'] ? selectedRecord['sdescription'] : '-',\n          stestparametersynonym: masterData.selectedParameterRulesEngine.stestparametersynonym,\n          ntestgrouptestcode: masterData.selectedParameterRulesEngine.ntestgrouptestcode,\n          npkBtestparametercode: masterData.selectedParameterRulesEngine.npkBtestparametercode\n        };\n        nslno = testCommentsTestsTab.length > 0 ? Math.max(...testCommentsTestsTab.map(x => x.nslno)) : 0;\n        nslno++;\n\n        if (testCommentObject.hasOwnProperty(masterData.selectedParameterRulesEngine.npkBtestparametercode)) {\n          npKAsampletestcommentscode = Math.max(...testCommentObject[masterData.selectedParameterRulesEngine.npkBtestparametercode].map(x => x.npKAsampletestcommentscode));\n          npKAsampletestcommentscode++;\n          object = { ...object,\n            npKAsampletestcommentscode: npKAsampletestcommentscode,\n            nslno: nslno\n          };\n          testCommentsTestsTemp = testCommentObject[masterData.selectedParameterRulesEngine.npkBtestparametercode];\n          testCommentsTestsTemp.push(object);\n          testCommentsTestsTab.push(object);\n          let commentsArrayIndex = testCommentsTests.findIndex(x => x.npkBtestparametercode === masterData.selectedParameterRulesEngine.npkBtestparametercode);\n          testCommentsTests[commentsArrayIndex]['commentsArray'] = [];\n          testCommentsTests[commentsArrayIndex]['commentsArray'] = sortData(testCommentsTestsTemp, 'ascending', 'npKAsampletestcommentscode');\n          testCommentObject[masterData.selectedParameterRulesEngine.npkBtestparametercode] = sortData(testCommentsTestsTemp, 'descending', 'npKAsampletestcommentscode');\n          delete selectedRecord['nsampletestcommentscode'];\n          delete selectedRecord['ncommentsubtypecode'];\n          delete selectedRecord['ncommenttypecode'];\n          delete selectedRecord['sgeneralcomments'];\n        } else {\n          npKAsampletestcommentscode++;\n          object = { ...object,\n            npKAsampletestcommentscode: npKAsampletestcommentscode,\n            nslno: nslno\n          };\n          testCommentsTestsTemp.push(object);\n          testCommentsTestsTab.push(object);\n          let commentsArrayIndex = testCommentsTests.findIndex(x => x.npkBtestparametercode === masterData.selectedParameterRulesEngine.npkBtestparametercode);\n          testCommentsTests[commentsArrayIndex]['commentsArray'] = [];\n          testCommentsTests[commentsArrayIndex]['commentsArray'] = sortData(testCommentsTestsTemp, 'ascending', 'npKAsampletestcommentscode');\n          testCommentObject[masterData.selectedParameterRulesEngine.npkBtestparametercode] = sortData(testCommentsTestsTemp, 'descending', 'npKAsampletestcommentscode');\n          delete selectedRecord['nsampletestcommentscode'];\n          delete selectedRecord['ncommentsubtypecode'];\n          delete selectedRecord['ncommenttypecode'];\n          delete selectedRecord['sgeneralcomments'];\n        }\n\n        masterData['testComments'] = testCommentObject;\n        masterData['testCommentsTestsTab'] = testCommentsTestsTab;\n        updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            openModalPopup: false,\n            masterData,\n            testCommentObject,\n            npKAsampletestcommentscode,\n            selectedRecord\n          }\n        };\n      }\n\n      if (selectedRecord['nfromsitecode'] && selectedRecord['ntositecode']) {\n        if (selectedRecord['nfromsitecode'].value !== selectedRecord['ntositecode'].value) {\n          let siteseqnumber = 0;\n\n          if (siteObject.hasOwnProperty(masterData.selectedParameterRulesEngine.npkAtestparametercode)) {\n            let isalreadyExist = siteObject[masterData.selectedParameterRulesEngine.npkAtestparametercode].some(x => selectedRecord['nfromsitecode'].value === x.nfromsitecode && selectedRecord['ntositecode'].value === x.ntositecode);\n\n            if (!isalreadyExist) {\n              masterData['testSite'] = {};\n              siteseqnumber = Math.max(...siteObject[masterData.selectedParameterRulesEngine.npkAtestparametercode].map(x => x.npksitecode));\n              siteseqnumber++;\n              let object = {\n                npksitecode: siteseqnumber,\n                sfromsitename: selectedRecord['nfromsitecode'].label,\n                stositename: selectedRecord['ntositecode'].label,\n                nfromsitecode: selectedRecord['nfromsitecode'].value,\n                ntositecode: selectedRecord['ntositecode'].value,\n                stestparametersynonym: masterData.selectedParameterRulesEngine.stestparametersynonym,\n                npkAtestparametercode: masterData.selectedParameterRulesEngine.ntestgrouptestcode\n              };\n              testInitiateSiteTemp = siteObject[masterData.selectedParameterRulesEngine.npkAtestparametercode];\n              testInitiateSiteTemp.push(object);\n              testInitiateSiteTab.push(object);\n              siteObject[masterData.selectedParameterRulesEngine.npkAtestparametercode] = sortData(testInitiateSiteTemp, 'descending', 'npksitecode');\n              delete selectedRecord['ntestgrouptestcode'];\n              delete selectedRecord['nfromsitecode'];\n              delete selectedRecord['ntositecode'];\n            } else {\n              return toast.warn(this.props.intl.formatMessage({\n                id: \"IDS_FROMANDTOSITEALREADYEXIST\"\n              }));\n            }\n          } else {\n            masterData['testSite'] = {};\n            siteseqnumber++;\n            let object = {\n              npksitecode: siteseqnumber,\n              sfromsitename: selectedRecord['nfromsitecode'].label,\n              stositename: selectedRecord['ntositecode'].label,\n              nfromsitecode: selectedRecord['nfromsitecode'].value,\n              ntositecode: selectedRecord['ntositecode'].value,\n              stestparametersynonym: masterData.selectedParameterRulesEngine.stestparametersynonym,\n              npkAtestparametercode: masterData.selectedParameterRulesEngine.npkAtestparametercode\n            };\n            testInitiateSiteTemp.push(object);\n            testInitiateSiteTab.push(object);\n            siteObject[masterData.selectedParameterRulesEngine.npkAtestparametercode] = sortData(testInitiateSiteTemp, 'descending', 'npksitecode');\n            delete selectedRecord['ntestgrouptestcode'];\n            delete selectedRecord['nfromsitecode'];\n            delete selectedRecord['ntositecode'];\n          }\n\n          masterData['testSite'] = siteObject;\n          masterData['testInitiateSiteTab'] = testInitiateSiteTab;\n          updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              openModalPopup: false,\n              masterData,\n              siteObject,\n              siteseqnumber\n            }\n          };\n        } else {\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_FROMANDTOSITECANNOTBESAME\"\n          }));\n        }\n      }\n\n      if (Object.keys(updateInfo).length > 0) {\n        this.props.updateStore(updateInfo);\n      }\n    };\n\n    this.deletModalSite = (inputparam, action, row) => {\n      let temparray = [];\n      let index = 0;\n      let testInitiateSiteTab = this.props.Login.masterData.testInitiateSiteTab;\n      let testCommentsTestsTab = this.props.Login.masterData.testCommentsTestsTab;\n      let reportCommentsTestsTab = this.props.Login.reportCommentsTestsTab;\n      let siteObject = this.props.Login.siteObject || {};\n      let testCommentObject = this.props.Login.testCommentObject || {};\n      let reportCommentObject = this.props.Login.reportCommentObject || {};\n      let masterData = this.props.Login.masterData || {};\n\n      if (this.props.Login.activeTabIndex === 1) {\n        temparray = siteObject[masterData.selectedParameterRulesEngine.npkAtestparametercode];\n        temparray.splice(row['dataIndex'], 1);\n        testInitiateSiteTab.splice(row['dataIndex'], 1);\n        siteObject[masterData.selectedParameterRulesEngine.npkAtestparametercode] = temparray;\n      }\n\n      if (this.props.Login.activeTabIndex === 2) {\n        temparray = testCommentObject[masterData.selectedParameterRulesEngine.npkBtestparametercode];\n        index = temparray.findIndex(x => x.npKAsampletestcommentscode === row['dataItem'].npKAsampletestcommentscode); // temparray.splice(row['dataIndex'], 1);\n\n        temparray.splice(index, 1);\n        index = testCommentsTestsTab.findIndex(x => x.nslno === row['dataItem'].nslno); //   testCommentsTestsTab.splice(row['dataIndex'], 1);\n\n        testCommentsTestsTab.splice(index, 1);\n        testCommentObject[masterData.selectedParameterRulesEngine.npkBtestparametercode] = temparray;\n      }\n\n      if (this.props.Login.activeTabIndex === 3) {\n        temparray = masterData.testRepeat;\n        temparray.splice(row['dataIndex'], 1);\n        reportCommentsTestsTab.splice(row['dataIndex'], 1);\n        reportCommentObject[masterData.selectedParameterRulesEngine.ntestgrouptestcode] = temparray;\n      }\n\n      let updateInfo = {};\n      updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          siteObject,\n          testCommentObject,\n          reportCommentObject,\n          testInitiateSiteTab,\n          reportCommentsTestsTab,\n          testCommentsTestsTab\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.deleteModalTest = (inputparam, action, row) => {\n      let testInitiateTests = this.props.Login.testInitiateTests || [];\n      let testCommentsTests = this.props.Login.testCommentsTests || [];\n      let testRepeatTests = this.props.Login.testRepeatTests || [];\n      let testenforceTests = this.props.Login.testenforceTests || [];\n      let reportCommentsTests = this.props.Login.reportCommentsTests || [];\n      let testInitiateSiteTab = this.props.Login.masterData.testInitiateSiteTab;\n      let testCommentsTestsTab = this.props.Login.masterData.testCommentsTestsTab;\n      let testRepeatTestsTab = this.props.Login.masterData.testRepeatTestsTab;\n      let testenforceTestsTab = this.props.Login.masterData.testenforceTestsTab;\n      let siteObject = this.props.Login.siteObject || {};\n      let testCommentObject = this.props.Login.testCommentObject || {};\n      let reportCommentObject = this.props.Login.reportCommentObject || {};\n      let testInitiateTestOptions = this.props.Login.testInitiateTestOptions || [];\n      let testCommentsTestOptions = this.props.Login.testCommentsTestOptions || [];\n      let reportCommentsTestOptions = this.props.Login.reportCommentsTestOptions || [];\n      let viewColumnListByRule = this.props.Login.viewColumnListByRule || [];\n      let testInitiateTestdeletedOptions = this.props.Login.testInitiateTestdeletedOptions || [];\n      let testCommentsTestdeletedOptions = this.props.Login.testCommentsTestdeletedOptions || [];\n      let reportCommentsTestdeletedOptions = this.props.Login.reportCommentsTestdeletedOptions || [];\n      let masterData = this.props.Login.masterData || {};\n      let index = 0;\n\n      if (this.props.Login.activeTabIndex === 1) {\n        // index = this.props.Login.testInitiateTests.findIndex(x => x.ntestgrouptestcode === masterData.selectedParameterRulesEngine.ntestgrouptestcode)\n        index = this.props.Login.testInitiateTests.findIndex(x => x.npkAtestparametercode === inputparam.testParameter.npkAtestparametercode);\n        testInitiateTests.splice(index, 1); // index = testInitiateSiteTab.findIndex(x => x.ntestgrouptestcode === inputparam.testParameter.ntestgrouptestcode)\n        // testInitiateSiteTab.splice(index, 1); \n\n        testInitiateSiteTab = testInitiateSiteTab.filter(function (obj) {\n          return obj.npkAtestparametercode !== inputparam.testParameter.npkAtestparametercode;\n        });\n        delete siteObject[inputparam.testParameter.npkAtestparametercode];\n      }\n\n      if (this.props.Login.activeTabIndex === 2) {\n        index = this.props.Login.testCommentsTests.findIndex(x => x.npkBtestparametercode === inputparam.testParameterComments.npkBtestparametercode);\n        testCommentsTests.splice(index, 1); // index =  testCommentsTestsTab.findIndex(x => x.ntestgrouptestcode === inputparam.testParameterComments.ntestgrouptestcode) \n        // testCommentsTestsTab.splice(index, 1);\n\n        testCommentsTestsTab = testCommentsTestsTab.filter(function (obj) {\n          return obj.npkBtestparametercode !== inputparam.testParameterComments.npkBtestparametercode;\n        });\n        delete testCommentObject[inputparam.testParameterComments.npkBtestparametercode];\n      }\n\n      if (this.props.Login.activeTabIndex === 3) {\n        //  index = this.props.Login.testRepeatTests.findIndex(x => x.ntestgrouptestcode === masterData.selectedParameterRulesEngine.ntestgrouptestcode) \n        index = row['dataIndex'];\n        testRepeatTests.splice(index, 1);\n        testRepeatTestsTab.splice(index, 1);\n      }\n\n      if (this.props.Login.activeTabIndex === 4) {\n        //    index = this.props.Login.testenforceTests.findIndex(x => x.ntestgrouptestcode === masterData.selectedParameterRulesEngine.ntestgrouptestcode)  \n        index = row['dataIndex'];\n        testenforceTests.splice(index, 1);\n        testenforceTestsTab.splice(index, 1);\n      }\n\n      let updateInfo = {};\n      updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          testInitiateTests,\n          siteObject,\n          testCommentObject,\n          testCommentsTests,\n          reportCommentsTests,\n          reportCommentObject,\n          masterData: { ...masterData,\n            testCommentsTestsTab,\n            testInitiateSiteTab,\n            testRepeatTestsTab,\n            testenforceTestsTab\n          },\n          testRepeatTests,\n          testenforceTests\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onmodalComboChange = (comboData, fieldName) => {\n      let selectedRecord = this.state.selectedRecord || {};\n      let isneedsgeneralcomments = this.state.isneedsgeneralcomments || {};\n\n      if (fieldName === 'ncommentsubtypecode') {\n        if (comboData.value === 6) {\n          isneedsgeneralcomments = true;\n          delete selectedRecord['nsampletestcommentscode'];\n        } else {\n          isneedsgeneralcomments = false;\n          delete selectedRecord['sgeneralcomments'];\n        }\n      } else if (fieldName === 'nproductcatcode') {\n        selectedRecord[fieldName] = comboData;\n        this.props.getSpecificationTestGroupRulesEngine(selectedRecord, this.props.Login.selectedRecord, true, this.props.Login.masterData, this.props.Login.userInfo);\n      } else if (fieldName === 'ntestgrouptestcode' && this.state.activeTabIndex === 4) {\n        if (selectedRecord['ntestgrouptestparametercode']) {\n          if (selectedRecord[fieldName].value !== comboData.value) {\n            delete selectedRecord['ntestgrouptestparametercode'];\n          }\n        }\n\n        selectedRecord[fieldName] = comboData;\n        this.props.getParameterRulesEngine(selectedRecord, this.props.Login.masterData, this.props.Login.userInfo);\n      } else if (fieldName === 'nallottedspeccode') {\n        selectedRecord[fieldName] = comboData;\n        this.props.getComponentTestGroupRulesEngine(selectedRecord, this.props.Login.selectedRecord, true, this.props.Login.masterData, this.props.Login.userInfo);\n      }\n\n      if (fieldName === 'nsampletestcommentscode') {\n        selectedRecord['sdescription'] = comboData.item.sdescription;\n      }\n\n      selectedRecord[fieldName] = comboData;\n      this.setState({\n        selectedRecord,\n        isneedsgeneralcomments\n      });\n    };\n\n    this.getOutcomeDetails = inputParam => {\n      let masterData = this.props.Login.masterData || {};\n      const testParameter = this.state.activeTabIndex === 1 ? inputParam.testParameter : this.state.activeTabIndex === 2 ? inputParam.testParameterComments : inputParam.testParameterreportComments;\n      masterData['selectedParameterRulesEngine'] = {};\n      masterData['selectedParameterRulesEngine'] = testParameter;\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          masterData\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.handleExpandChange = () => {\n      let childListMap1 = new Map();\n      let childListMap2 = new Map();\n      let childListMap3 = new Map();\n      let childListMap = new Map();\n\n      if (this.props.Login.masterData.activeTabName === 'IDS_Test') {\n        let keylst = this.props.Login.masterData.activeTabName === 'IDS_Test' ? Object.keys(this.props.Login.masterData.SelectedRulesEngine['jsonuidata']['siteObject']) : this.props.Login.masterData.activeTabName === 'IDS_COMMENTS' ? Object.keys(this.props.Login.masterData.SelectedRulesEngine['jsonuidata']['testCommentObject']) : Object.keys(this.props.Login.masterData.SelectedRulesEngine['jsonuidata']['reportCommentObject']);\n        keylst.map(key => {\n          childListMap.set(parseInt(key), Object.values(this.props.Login.masterData.activeTabName === 'IDS_Test' ? this.props.Login.masterData.SelectedRulesEngine['jsonuidata']['siteObject'][key] : this.props.Login.masterData.activeTabName === 'IDS_COMMENTS' ? this.props.Login.masterData.SelectedRulesEngine['jsonuidata']['testCommentObject'][key] : this.props.Login.masterData.SelectedRulesEngine['jsonuidata']['reportCommentObject'][key]));\n        });\n        this.setState({\n          childListMap\n        });\n      }\n\n      if (this.props.Login.masterData.activeTabName === 'IDS_COMMENTS') {\n        let keylst = Object.keys(this.props.Login.masterData.SelectedRulesEngine['jsonuidata']['testCommentObject']);\n        keylst.map(key => {\n          childListMap2.set(parseInt(key), Object.values(this.props.Login.masterData.SelectedRulesEngine['jsonuidata']['testCommentObject'][key]));\n        });\n        this.setState({\n          childListMap2\n        });\n      }\n\n      if (this.props.Login.masterData.activeTabName === 'IDS_REPORTCOMMENTS') {\n        let keylst = Object.keys(this.props.Login.masterData.SelectedRulesEngine['jsonuidata']['reportCommentObject']);\n        keylst.map(key => {\n          childListMap3.set(parseInt(key), Object.values(this.props.Login.masterData.SelectedRulesEngine['jsonuidata']['reportCommentObject'][key]));\n        });\n        this.setState({\n          childListMap3\n        });\n      }\n    };\n\n    this.viewOutcome = props => {\n      if (this.props.Login.masterData['RulesEngine'] && this.props.Login.masterData['RulesEngine'].length > 0) {\n        let masterData = this.props.Login.masterData;\n        masterData['SelectedRulesEngine'] = props['SelectedRulesEngine'][0];\n\n        if (masterData['SelectedRulesEngine']['jsonuidata'] && masterData['SelectedRulesEngine']['jsonuidata']['testInitiateTests']) {\n          masterData['SelectedRulesEngine']['jsonuidata']['testInitiateTests'].forEach(object => {\n            object['expanded'] && delete object['expanded'];\n          });\n        }\n\n        masterData['activeTabName'] = 'IDS_Test';\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            screenName: \"IDS_VIEWOUTCOME\",\n            operation: \"IDS_VIEW\",\n            openModal: true,\n            masterData\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTRULETOVIEWOUTCOME\"\n        }));\n      }\n    };\n\n    this.openflowview = props => {\n      if (this.props.Login.masterData['RulesEngine'] && this.props.Login.masterData['RulesEngine'].length > 0) {\n        let masterData = this.props.Login.masterData;\n        masterData['SelectedRulesEngine'] = props['SelectedRulesEngine'][0];\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            screenName: \"IDS_VIEWRULE\",\n            operation: \"IDS_VIEW\",\n            openModal: true,\n            masterData\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTRULETOVIEWRULE\"\n        }));\n      }\n    };\n\n    this.handlePageChangeRuleEngine = event => {\n      this.setState({\n        skipRulesEngine: event.skip,\n        takeRulesEngine: event.take\n      });\n    };\n\n    this.addGroup = () => {\n      const {\n        selectedRecord\n      } = this.state;\n      let viewColumnListByRule = this.props.Login.viewColumnListByRule || [];\n      const addGroupList = this.props.Login.addGroupList || [];\n      const arrayLength = addGroupList.length;\n      addGroupList[arrayLength] = 1;\n      viewColumnListByRule = this.props.Login.databaseviewList;\n\n      if (arrayLength === 0) {\n        selectedRecord[\"groupList\"] = [];\n        selectedRecord[\"filtercolumns\"] = this.props.Login.selectFields;\n      }\n\n      if (selectedRecord[\"groupListJoins\"] === undefined) {\n        selectedRecord[\"groupListJoins\"] = [];\n      }\n\n      if (selectedRecord[\"groupListJoins\"][arrayLength - 1] === undefined) {\n        selectedRecord[\"groupListJoins\"][arrayLength - 1] = {};\n      }\n\n      selectedRecord[\"groupListJoins\"][arrayLength - 1][\"button_and\"] = true;\n      selectedRecord[\"groupList\"][arrayLength] = [];\n      selectedRecord[\"groupList\"][arrayLength][\"button_and\"] = true;\n      selectedRecord[\"groupList\"][arrayLength][0] = {};\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          addGroupList,\n          viewColumnListByRule,\n          selectedRecord,\n          activeTabIndex: 0\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.getTestGroupRulesEngineAdd = () => {\n      //   if (this.state.selectedcombo['nproductcatcode']) {\n      //    const sqlQuery = false;\n      //this.setState({ selectedRecord: {} });\n      let selectedRecord = this.state.selectedRecord || {};\n      this.props.getTestGroupRulesEngineAdd(this.props.Login.userInfo, false, {\n        addRuleList: [],\n        addGroupList: [],\n        addAggregateList: [],\n        addOrderbyList: []\n      }, this.props.Login.masterData); //  } else {\n      //       toast.info(this.props.intl.formatMessage({ id: \"IDS_SELECTPRODUCTCATEGORY\" }));\n      //   }\n    };\n\n    this.closePortalModal = () => {\n      let masterData = this.props.Login.masterData || {};\n      masterData['testParameter'] = {};\n      masterData['testParameterComments'] = {};\n      masterData['testParameterreportComments'] = {};\n      masterData['testComments'] = {};\n      masterData['reportComments'] = {};\n      masterData['testSite'] = {};\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: this.props.Login.operation !== 'update' ? {\n          activeTabIndex: 0,\n          openPortalModal: false,\n          selectedRecord: {},\n          addRuleList: [],\n          count: 0,\n          masterData,\n          testInitiateTests: [],\n          reportCommentsTests: [],\n          testCommentsTests: [],\n          siteObject: {},\n          testCommentObject: {},\n          reportCommentObject: {},\n          npkAtestparametercode: 0,\n          npkBtestparametercode: 0,\n          npkCtestparametercode: 0,\n          testInitiateSiteTab: [],\n          testCommentsTestsTab: [],\n          reportCommentsTestsTab: []\n        } : {\n          activeTabIndex: 0,\n          openPortalModal: false,\n          selectedRecord: {},\n          addRuleList: [],\n          count: 0,\n          masterData,\n          //  testInitiateTests: [], reportCommentsTests: [],\n          // testCommentsTests: [], siteObject: {}, testCommentObject: {}, reportCommentObject: {},\n          npkAtestparametercode: 0,\n          npkBtestparametercode: 0,\n          npkCtestparametercode: 0 // ,\n          // testInitiateSiteTab: [],\n          // testCommentsTestsTab: [],\n          // reportCommentsTestsTab: []\n\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.changePropertyView = (index, event, status) => {\n      let id = false;\n      let activeTabIndex;\n      let activeTabId;\n      let masterData = this.props.Login.masterData || {};\n      let activeTestTab = this.props.Login.activeTestTab || \"\";\n      const {\n        selectedRecord\n      } = this.state;\n\n      if (selectedRecord[\"groupList\"].length > 0) {\n        if (this.onsavevalidation(selectedRecord)) {\n          if (window.innerWidth > 992 && event && this.state.enableAutoClick || !event) {\n            activeTabIndex = this.state.activeTabIndex !== index ? index : id ? index : false;\n          }\n\n          if (window.innerWidth > 992 && event && this.state.enableAutoClick || !event) {\n            if (index === 1) {\n              activeTestTab = 'IDS_Test';\n              masterData['selectedParameterRulesEngine'] = this.props.Login.testInitiateTests && this.props.Login.testInitiateTests[0];\n            }\n\n            if (index === 2) {\n              activeTestTab = 'IDS_COMMENTS';\n              masterData['selectedParameterRulesEngine'] = this.props.Login.testCommentsTests && this.props.Login.testCommentsTests[0];\n            }\n\n            if (index === 3) {\n              activeTestTab = 'IDS_REPEAT';\n              masterData['selectedParameterRulesEngine'] = this.props.Login.testRepeatTests && this.props.Login.testRepeatTests[0];\n            }\n\n            if (index === 4) {\n              activeTestTab = 'IDS_ENFORCERESULT';\n              masterData['selectedParameterRulesEngine'] = this.props.Login.testEnforceTests && this.props.Login.testEnforceTests[0];\n            }\n\n            const updateInfo = {\n              typeName: DEFAULT_RETURN,\n              data: {\n                activeTabIndex: index === 0 ? 0 : this.state.activeTabIndex !== index ? index : id ? index : false,\n                activeTabId: id,\n                activeTestTab,\n                masterData\n              }\n            };\n            this.props.updateStore(updateInfo);\n          }\n        } else {\n          toast.info(this.props.intl.formatMessage({\n            id: \"IDS_FILLTHERULETOADDOUTCOME\"\n          }));\n        }\n      } else {\n        toast.info(this.props.intl.formatMessage({\n          id: \"IDS_ATLEASTADDONERULETOADDOUTCOME\"\n        }));\n      }\n    };\n\n    this.deleteRule = (groupIndex, index) => {\n      let addGroupList = this.props.Login.addGroupList || [];\n      const selectedRecord = this.state.selectedRecord;\n      addGroupList[groupIndex] = addGroupList[groupIndex] - 1;\n\n      if (addGroupList[groupIndex] === 0) {\n        addGroupList.splice(groupIndex, 1);\n        selectedRecord[\"groupList\"].splice(groupIndex, 1);\n\n        if (selectedRecord[\"groupListJoins\"]) {\n          selectedRecord[\"groupListJoins\"].splice(groupIndex - 1, 1);\n        }\n      } else {\n        selectedRecord[\"groupList\"][groupIndex].splice(index, 1);\n      }\n\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          addGroupList,\n          selectedRecord,\n          activeTabIndex: 0\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.deleteOutcome = index => {\n      let addOutcomeList = this.props.Login.addOutcomeList;\n      addOutcomeList.splice(index, 1);\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          addOutcomeList\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.clearRule = () => {\n      const sviewname = this.state.selectedRecord.sviewname || \"\";\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          addRuleList: [],\n          selectedRecord: {\n            sviewname\n          },\n          sqlQuery: false\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.resetRule = () => {\n      let masterData = this.props.Login.masterData || {};\n      let selectedRecord = this.state.selectedRecord || {};\n      masterData['testParameter'] = {};\n      masterData['testParameterComments'] = {};\n      masterData['testParameterreportComments'] = {};\n      masterData['testComments'] = {};\n      masterData['reportComments'] = {};\n      masterData['testRepeat'] = [];\n      masterData['testenforceTests'] = [];\n      masterData['testSite'] = {};\n\n      if (selectedRecord[\"groupList\"]) {\n        selectedRecord[\"groupList\"] = [];\n      }\n\n      if (selectedRecord[\"groupListJoins\"]) {\n        selectedRecord[\"groupListJoins\"] = [];\n      }\n\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          addRuleList: [],\n          addGroupList: [],\n          masterData,\n          addAggregateList: [],\n          addOrderbyList: [],\n          testInitiateTests: [],\n          reportCommentsTests: [],\n          testCommentsTests: [],\n          siteObject: {},\n          testCommentObject: {},\n          reportCommentObject: {},\n          selectedRecord,\n          testRepeatTests: [],\n          testenforceTests: [],\n          activeTabIndex: 0\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onSymbolChange = (comboData, fieldName, groupIndex, index) => {\n      const {\n        selectedRecord\n      } = this.state;\n      const oldSelectedRecord = selectedRecord[\"groupList\"][groupIndex][index][fieldName] || {};\n      selectedRecord[\"groupList\"][groupIndex][index][fieldName] = comboData;\n      this.setState({\n        selectedRecord,\n        groupIndex,\n        index\n      });\n    };\n\n    this.onInputChange = (event, type, groupIndex, index) => {\n      const selectedRecord = this.state.selectedRecord || {};\n      let needoutsource = this.state.needoutsource || {};\n\n      if (event.target.type === 'checkbox') {\n        if (event.target.name === 'needoutsource' && event.target.checked === true) {\n          needoutsource = true;\n        } else {\n          needoutsource = false;\n          delete selectedRecord['nfromsitecode'];\n          delete selectedRecord['ntositecode'];\n        }\n\n        selectedRecord[event.target.name] = event.target.checked === true ? 3 : 4;\n      } else {\n        selectedRecord[event.target.name] = event.target.value;\n      }\n\n      this.setState({\n        selectedRecord,\n        needoutsource\n      });\n    };\n\n    this.viewColumnListByRule = list => {\n      let activeTabIndex = this.props.Login.activeTabIndex;\n\n      if (activeTabIndex !== 0) {\n        let selectedRecord = this.props.Login.selectedRecord && this.props.Login.selectedRecord;\n        let dynamicList = activeTabIndex === 1 ? this.props.Login.testInitiateTests : activeTabIndex === 2 ? this.props.Login.testCommentsTests : activeTabIndex === 3 ? this.props.Login.testRepeatTests : activeTabIndex === 4 ? this.props.Login.testenforceTests : \"\";\n        if (dynamicList !== undefined && dynamicList) list = list.filter(({\n          value\n        }) => !dynamicList.some(x => x.ntestgrouptestcode == value));\n      }\n\n      return list;\n    };\n\n    this.onConditionClick = (fieldName, index, isgroup) => {\n      let {\n        selectedRecord\n      } = this.state;\n      selectedRecord[\"groupListJoins\"] = selectedRecord[\"groupListJoins\"] || [];\n\n      if (index !== undefined && isgroup === false) {\n        if (fieldName === `button_and`) {\n          selectedRecord[\"groupList\"][index][fieldName] = selectedRecord[\"groupList\"][index][fieldName] === true ? true : true;\n          selectedRecord[\"groupList\"][index][`button_or`] = false;\n        } else if (fieldName === `button_or`) {\n          selectedRecord[\"groupList\"][index][fieldName] = selectedRecord[\"groupList\"][index][fieldName] === true ? true : true;\n          selectedRecord[\"groupList\"][index][`button_and`] = false;\n        } else if (fieldName === `button_not`) {\n          selectedRecord[\"groupList\"][index][fieldName] = selectedRecord[\"groupList\"][index][fieldName] === true ? false : true;\n        } else {}\n\n        this.setState({\n          selectedRecord\n        });\n      } else {\n        if (fieldName === `button_and`) {\n          if (selectedRecord[\"groupListJoins\"][index] === undefined) {\n            selectedRecord[\"groupListJoins\"][index] = {};\n          }\n\n          selectedRecord[\"groupListJoins\"][index][fieldName] = selectedRecord[\"groupListJoins\"][index][fieldName] === true ? true : true;\n          selectedRecord[\"groupListJoins\"][index][`button_or`] = false;\n        }\n\n        if (fieldName === `button_or`) {\n          if (selectedRecord[\"groupListJoins\"][index] === undefined) {\n            selectedRecord[\"groupListJoins\"][index] = {};\n          }\n\n          selectedRecord[\"groupListJoins\"][index][fieldName] = selectedRecord[\"groupListJoins\"][index][fieldName] === true ? true : true;\n          selectedRecord[\"groupListJoins\"][index][`button_and`] = false;\n        }\n\n        if (fieldName === `button_not`) {\n          if (selectedRecord[\"groupListJoins\"][index] === undefined) {\n            selectedRecord[\"groupListJoins\"][index] = {};\n          }\n\n          selectedRecord[\"groupListJoins\"][index][fieldName] = selectedRecord[\"groupListJoins\"][index][fieldName] === true ? false : true;\n        }\n\n        this.setState({\n          selectedRecord\n        });\n      }\n    };\n\n    this.changePropertyViewClose = id => {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          activeTabIndex: undefined,\n          activeTestTab: undefined,\n          activeTabId: id\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onFilterComboChange = (comboData, fieldName, caseNo) => {\n      let tempFilterData = this.state.tempFilterData || {};\n      let inputParam = {};\n\n      switch (caseNo) {\n        case 1:\n          tempFilterData[fieldName] = comboData;\n          inputParam = {\n            inputData: {\n              userinfo: this.props.Login.userInfo,\n              sampletype: comboData.item,\n              tempFilterData\n            },\n            methodUrl: \"/getProductCategory\"\n          };\n          this.props.sampleTypeOnChange(inputParam, this.props.Login.masterData);\n          break;\n\n        case 2:\n          tempFilterData[fieldName] = comboData;\n          inputParam = {\n            inputData: {\n              userinfo: this.props.Login.userInfo,\n              sampletype: tempFilterData.nsampletypecode.item,\n              productcategory: comboData.item,\n              tempFilterData\n            },\n            methodUrl: \"/getProduct\"\n          };\n          this.props.sampleTypeOnChange(inputParam, this.props.Login.masterData);\n          break;\n\n        case 3:\n          tempFilterData[fieldName] = comboData;\n          inputParam = {\n            inputData: {\n              userinfo: this.props.Login.userInfo,\n              sampletype: tempFilterData.nsampletypecode.item,\n              productcategory: tempFilterData.nproductcatcode.item,\n              product: comboData.item,\n              project: comboData.item,\n              tempFilterData\n            },\n            methodUrl: \"/getTreeVersionTemplate\"\n          };\n          this.props.sampleTypeOnChange(inputParam, this.props.Login.masterData);\n          break;\n\n        case 4:\n          tempFilterData[fieldName] = comboData;\n          this.setState({\n            tempFilterData\n          });\n          break;\n\n        case 5:\n          const selectedRecord = this.state.selectedRecord;\n          selectedRecord[fieldName] = comboData;\n          const TestGroupSpecSampleType = this.props.Login.testGroupInputData.TestGroupSpecSampleType || {};\n          let testGroupSpecSampleType = {};\n\n          if (this.props.Login.screenName === this.props.Login.genericLabel && this.props.Login.genericLabel[\"Component\"][\"jsondata\"][\"sdisplayname\"][this.props.Login.userInfo.slanguagetypecode]) {\n            testGroupSpecSampleType = selectedRecord[\"ncomponentcode\"] ? selectedRecord[\"ncomponentcode\"].item : TestGroupSpecSampleType[0].item;\n          } else {\n            testGroupSpecSampleType = this.props.Login.masterData.SelectedComponent;\n          }\n\n          inputParam = {\n            userinfo: this.props.Login.userInfo,\n            testcategory: comboData.item,\n            testgroupspecsampletype: testGroupSpecSampleType,\n            nallottedspeccode: this.props.Login.masterData.SelectedSpecification[\"nallottedspeccode\"],\n            selectedRecord\n          };\n          this.props.changeTestCategory(inputParam, this.props.Login.testGroupInputData);\n          break;\n\n        case 6:\n          tempFilterData[fieldName] = comboData;\n          inputParam = {\n            inputData: {\n              userinfo: this.props.Login.userInfo,\n              nprojecttypecode: tempFilterData.nprojecttypecode.value,\n              projecttype: tempFilterData.nprojecttypecode.item,\n              // sampletype: tempFilterData.nsampletypecode.item,\n              // productcategory: comboData.item,\n              tempFilterData\n            },\n            classUrl: \"/projectmaster\",\n            methodUrl: \"/getApprovedProjectByProjectType\"\n          };\n          this.props.sampleTypeOnChange(inputParam, this.props.Login.masterData);\n          break;\n\n        default:\n          break;\n      }\n    };\n\n    this.handleDateChange = (dateName, dateValue) => {\n      const {\n        selectedRecord\n      } = this.state;\n\n      if (dateValue === null) {\n        dateValue = new Date();\n      }\n\n      selectedRecord[dateName] = dateValue;\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onNumericInputChange = (value, name) => {\n      const selectedRecord = this.state.selectedRecord || {};\n      selectedRecord[name] = value;\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onSaveClick = (saveType, formRef) => {\n      let inputParam = {};\n\n      if (this.props.Login.screenName === \"IDS_PROFILETREE\" || this.props.Login.screenName === \"IDS_EDITTREE\") {\n        inputParam = this.onSaveTree(saveType, formRef);\n      } else if (this.props.Login.screenName === \"IDS_SPECIFICATION\") {\n        inputParam = this.onSaveSpecification(saveType, formRef);\n      } else if (this.props.Login.screenName === this.props.Login.genericLabel[\"Component\"][\"jsondata\"][\"sdisplayname\"][this.props.Login.userInfo.slanguagetypecode]) {\n        inputParam = this.onSaveComponent(saveType, formRef);\n      } else if (this.props.Login.screenName === \"IDS_COPYSPECIFICATION\") {\n        inputParam = this.onSaveCopySpecification(saveType, formRef);\n      } else if (this.props.Login.screenName === \"IDS_TEST\" || this.props.Login.screenName === \"IDS_EDITTESTGROUPTEST\") {\n        inputParam = this.onSaveTest(saveType, formRef);\n      } else if (this.props.Login.screenName === \"IDS_SPECFILE\") {\n        inputParam = this.onSaveSpecFile(saveType, formRef);\n      }\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            openModal: true,\n            operation: this.props.Login.operation,\n            screenData: {\n              inputParam,\n              masterData: this.props.Login.masterData\n            },\n            saveType\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\", {});\n      }\n    };\n\n    this.onSaveTest = (saveType, formRef) => {\n      const operation = this.props.Login.operation;\n      const masterData = this.props.Login.masterData;\n      const selectedRecord = this.state.selectedRecord;\n      let inputData = {};\n      const userinfo = this.props.Login.userInfo;\n      let postParam = undefined;\n\n      if (operation === \"create\") {\n        const testArray = selectedRecord.ntestcode.map(test => {\n          return test.item;\n        });\n        inputData = {\n          testgroupspecification: masterData.SelectedSpecification,\n          testgroupspecsampletype: [masterData.SelectedComponent],\n          testgrouptest: testArray,\n          userinfo\n        };\n      } else {\n        postParam = {\n          inputListName: \"TestGroupTest\",\n          selectedObject: \"SelectedTest\",\n          primaryKeyField: \"ntestgrouptestcode\",\n          primaryKeyValue: masterData.SelectedTest ? masterData.SelectedTest.ntestgrouptestcode : 0,\n          fetchUrl: \"testgroup/getTestGroupTest\",\n          fecthInputObject: {\n            userinfo: this.props.Login.userInfo\n          },\n          masterData: this.props.Login.masterData,\n          searchFieldList,\n          changeList: [\"TestGroupTestFormula\", \"TestGroupTestNumericParameter\", \"TestGroupTestPredefinedParameter\", \"TestGroupTestCharParameter\", \"TestGroupTestParameter\"],\n          isSingleSelect: true\n        };\n        let testgrouptestfile = null;\n        let testGroupFile = selectedRecord.ntestfilecode;\n\n        if (testGroupFile) {\n          testGroupFile = testGroupFile.item;\n          testgrouptestfile = {\n            nlinkcode: testGroupFile.nlinkcode,\n            nattachmenttypecode: testGroupFile.nattachmenttypecode,\n            sdescription: testGroupFile.sdescription,\n            ssystemfilename: testGroupFile.ssystemfilename,\n            dcreateddate: testGroupFile.dcreateddate,\n            nfilesize: testGroupFile.nfilesize,\n            ntestgroupfilecode: selectedRecord.ntestgroupfilecode,\n            ntestgrouptestcode: selectedRecord.ntestgrouptestcode,\n            sfilename: testGroupFile.sfilename,\n            nstatus: transactionStatus.ACTIVE\n          };\n        }\n\n        inputData = {\n          testgroupspecification: masterData.SelectedSpecification,\n          testgrouptest: {\n            ntestgrouptestcode: selectedRecord.ntestgrouptestcode,\n            nsectioncode: selectedRecord.nsectioncode.value,\n            //nsourcecode: selectedRecord.nsourcecode.value,\n            nmethodcode: selectedRecord.nmethodcode ? selectedRecord.nmethodcode.value : transactionStatus.NA,\n            ninstrumentcatcode: selectedRecord.ninstrumentcatcode ? selectedRecord.ninstrumentcatcode.value : transactionStatus.NA,\n            ncontainertypecode: selectedRecord.ncontainertypecode ? selectedRecord.ncontainertypecode.value : transactionStatus.NA,\n            stestsynonym: selectedRecord.stestsynonym,\n            ncost: selectedRecord.ncost,\n            nsorter: selectedRecord.nsorter,\n            nspecsampletypecode: selectedRecord.nspecsampletypecode,\n            nrepeatcountno: selectedRecord.nrepeatcountno\n          },\n          testgrouptestfile,\n          userinfo\n        };\n      }\n\n      const inputParam = {\n        inputData,\n        classUrl: \"testgroup\",\n        operation: operation,\n        methodUrl: \"Test\",\n        saveType,\n        formRef,\n        searchRef: this.searchRef,\n        postParam\n      };\n      return inputParam;\n    };\n\n    this.onSaveTree = (saveType, formRef) => {\n      const operation = this.props.Login.operation;\n      const selectedRecord = this.state.selectedRecord;\n      let inputData = {\n        userinfo: this.props.Login.userInfo\n      };\n\n      if (operation === \"update\") {\n        const selectedNode = this.props.Login.masterData.selectedNode;\n        inputData[\"treetemplatemanipulation\"] = {\n          ntemplatemanipulationcode: selectedRecord.ntemplatemanipulationcode,\n          sleveldescription: selectedRecord.sleveldescription,\n          nsampletypecode: selectedNode.nsampletypecode,\n          ntreeversiontempcode: selectedNode.ntreeversiontempcode,\n          nproductcatcode: selectedNode.nproductcatcode,\n          nproductcode: selectedNode.nproductcode,\n          nprojectmastercode: selectedNode.nprojectmastercode\n        };\n        inputData[\"selectednode\"] = this.props.Login.masterData.ActiveKey;\n      } else {\n        const TreetempTranstestGroup = this.props.Login.TreetempTranstestGroup;\n        const filterData = this.state.filterData;\n        const selectedRecord = this.state.selectedRecord;\n        let treetemplatemanipulation = [];\n        let tempArray = filterRecordBasedOnTwoArrays(TreetempTranstestGroup, selectedRecord.treetemplatemanipulation, \"ntemptranstestgroupcode\");\n        tempArray.map(item => {\n          const treeData = {\n            ntreeversiontempcode: item.ntreeversiontempcode,\n            npositioncode: item.nlevelno - 1,\n            sleveldescription: item.sleveldescription,\n            ntemptranstestgroupcode: item.ntemptranstestgroupcode,\n            nformcode: 62,\n            schildnode: \"\",\n            nnextchildcode: item.schildnode,\n            ntemplatemanipulationcode: item.ntemplatemanipulationcode,\n            isreadonly: item.ntemplatemanipulationcode > 0 ? true : false,\n            slevelformat: item.slevelformat\n          };\n          return treetemplatemanipulation.push(treeData);\n        });\n        selectedRecord.treetemplatemanipulation.map(item => {\n          const treeTemplateManip = TreetempTranstestGroup.filter(temp => temp.ntemptranstestgroupcode === item.ntemptranstestgroupcode);\n\n          if (treeTemplateManip.length > 0) {\n            item[\"ntemplatemanipulationcode\"] = treeTemplateManip[\"ntemplatemanipulationcode\"];\n          } else {\n            item[\"ntemplatemanipulationcode\"] = 0;\n          }\n\n          return treetemplatemanipulation.push(item);\n        });\n        inputData[\"treetemplatemanipulation\"] = treetemplatemanipulation;\n        inputData[\"sampletype\"] = filterData.nsampletypecode.item;\n        inputData[\"ncategorycode\"] = filterData.nproductcatcode.value;\n        inputData[\"nproductcode\"] = filterData.nsampletypecode.item.ncategorybasedflowrequired === transactionStatus.YES ? -1 : filterData.nproductcatcode.item.ncategorybasedflow == transactionStatus.YES ? -1 : filterData.nproductcode.value ? filterData.nproductcode.value : -1;\n        inputData[\"ntreeversiontempcode\"] = filterData.ntreeversiontempcode.value; //  inputData[\"nprojectmastercode\"] = filterData.nprojectmastercode ? filterData.nprojectmastercode.value:-1;\n\n        inputData[\"nprojectmastercode\"] = filterData.nprojectmastercode ? filterData.nsampletypecode.item.nprojectspecrequired === transactionStatus.YES ? filterData.nprojectmastercode.value : -1 : -1;\n      }\n\n      const inputParam = {\n        inputData,\n        classUrl: \"testgroup\",\n        operation: operation,\n        methodUrl: \"Tree\",\n        saveType,\n        formRef\n      };\n      return inputParam;\n    };\n\n    this.onSaveSpecification = (saveType, formRef) => {\n      const operation = this.props.Login.operation;\n      const selectedRecord = this.state.selectedRecord;\n      let testGroupSpec = {\n        napproveconfversioncode: -1,\n        sversion: '',\n        napprovalstatus: transactionStatus.DRAFT,\n        nstatus: transactionStatus.ACTIVE,\n        ntransactionstatus: selectedRecord[\"ntransactionstatus\"],\n        ncomponentrequired: selectedRecord[\"ncomponentrequired\"],\n        //   nclinicalspec: selectedRecord[\"nclinicalspec\"],\n        // nprojectcode: selectedRecord[\"nprojectcode\"] ? selectedRecord[\"nprojectcode\"] : -1,\n        nprojectmastercode: this.state.filterData.nprojectmastercode ? this.state.filterData.nsampletypecode.item.nprojectspecrequired === transactionStatus.YES ? this.state.filterData.nprojectmastercode.value : -1 : -1,\n        sspecname: selectedRecord[\"sspecname\"],\n        dexpirydate: selectedRecord[\"dexpirydate\"],\n        nallottedspeccode: selectedRecord[\"nallottedspeccode\"] ? selectedRecord[\"nallottedspeccode\"] : 0,\n        ntzexpirydate: selectedRecord[\"ntzexpirydate\"].value,\n        stzexpirydate: selectedRecord[\"ntzexpirydate\"].label\n      };\n      const dexpirydate = testGroupSpec[\"dexpirydate\"]; //need this conversion when the datatype of the field is 'Instant'\n\n      testGroupSpec[\"dexpirydate\"] = formatInputDate(dexpirydate, false);\n\n      if (operation === \"create\") {\n        testGroupSpec[\"ntemplatemanipulationcode\"] = this.props.Login.masterData.selectedNode.ntemplatemanipulationcode;\n      }\n\n      let ntreeversiontempcode = this.state.filterData.ntreeversiontempcode.value;\n      const inputData = {\n        userinfo: this.props.Login.userInfo,\n        testgroupspecification: testGroupSpec,\n        treetemplatemanipulation: this.props.Login.masterData.selectedNode,\n        selectedspecification: this.props.Login.masterData.SelectedSpecification,\n        ntreeversiontempcode: ntreeversiontempcode\n      };\n      const inputParam = {\n        inputData,\n        classUrl: \"testgroup\",\n        operation: operation,\n        methodUrl: \"Specification\",\n        saveType,\n        formRef\n      };\n      return inputParam;\n    };\n\n    this.onSaveComponent = (saveType, formRef) => {\n      const masterData = this.props.Login.masterData;\n      const selectedRecord = this.state.selectedRecord;\n      const testArray = selectedRecord.ntestcode.map(test => {\n        return test.item;\n      });\n      const inputData = {\n        testgroupspecification: masterData.SelectedSpecification,\n        testgroupspecsampletype: [selectedRecord.ncomponentcode.item],\n        testgrouptest: testArray,\n        userinfo: this.props.Login.userInfo,\n        genericlabel: this.props.Login.genericLabel\n      };\n      const inputParam = {\n        inputData,\n        classUrl: \"testgroup\",\n        operation: this.props.Login.operation,\n        methodUrl: \"Component\",\n        saveType,\n        formRef\n      };\n      return inputParam;\n    };\n\n    this.onSaveSpecFile = (saveType, formRef) => {\n      const selectedRecord = this.state.selectedRecord;\n      const acceptedFiles = selectedRecord.sfilename;\n      const nattachmenttypecode = selectedRecord.nattachmenttypecode;\n      let isFileEdited = transactionStatus.NO;\n      let specFileArray = [];\n      const selectedSpecification = this.props.Login.masterData.SelectedSpecification;\n      let specFile = {\n        nallottedspeccode: selectedSpecification.nallottedspeccode,\n        nspecfilecode: selectedRecord.nspecfilecode ? selectedRecord.nspecfilecode : 0,\n        nstatus: transactionStatus.ACTIVE,\n        nattachmenttypecode\n      };\n      const formData = new FormData();\n\n      if (nattachmenttypecode === attachmentType.FTP) {\n        if (acceptedFiles && Array.isArray(acceptedFiles) && acceptedFiles.length > 0) {\n          acceptedFiles.forEach((file, index) => {\n            const tempData = Object.assign({}, specFile);\n            const splittedFileName = file.name.split('.');\n            const fileExtension = file.name.split('.')[splittedFileName.length - 1];\n            const uniquefilename = nattachmenttypecode === attachmentType.FTP ? create_UUID() + '.' + fileExtension : \"\";\n            tempData[\"sfilename\"] = Lims_JSON_stringify(file.name, false);\n            tempData[\"sdescription\"] = Lims_JSON_stringify(selectedRecord.sdescription ? selectedRecord.sdescription.trim() : \"\", false);\n            tempData[\"nlinkcode\"] = transactionStatus.NA;\n            tempData[\"ssystemfilename\"] = uniquefilename;\n            tempData[\"nfilesize\"] = file.size;\n            formData.append(\"uploadedFile\" + index, file);\n            formData.append(\"uniquefilename\" + index, uniquefilename);\n            specFileArray.push(tempData);\n          });\n          formData.append(\"filecount\", acceptedFiles.length);\n          isFileEdited = transactionStatus.YES;\n        } else {\n          specFile[\"sfilename\"] = Lims_JSON_stringify(selectedRecord.sfilename, false);\n          specFile[\"sdescription\"] = Lims_JSON_stringify(selectedRecord.sdescription ? selectedRecord.sdescription.trim() : \"\", false);\n          specFile[\"nlinkcode\"] = transactionStatus.NA;\n          specFile[\"ssystemfilename\"] = selectedRecord.ssystemfilename;\n          specFile[\"nfilesize\"] = selectedRecord.nfilesize;\n          specFileArray.push(specFile);\n        }\n      } else {\n        specFile[\"sfilename\"] = Lims_JSON_stringify(selectedRecord.slinkfilename.trim(), false);\n        specFile[\"sdescription\"] = Lims_JSON_stringify(selectedRecord.slinkdescription ? selectedRecord.slinkdescription.trim() : \"\", false);\n        specFile[\"nlinkcode\"] = selectedRecord.nlinkcode.value ? selectedRecord.nlinkcode.value : -1;\n        specFile[\"ssystemfilename\"] = \"\";\n        specFile[\"nfilesize\"] = 0;\n        specFileArray.push(specFile);\n      }\n\n      formData.append(\"isFileEdited\", isFileEdited);\n      formData.append(\"testgroupspecification\", JSON.stringify(selectedSpecification));\n      formData.append(\"testgroupspecfile\", JSON.stringify(specFileArray));\n      const inputParam = {\n        // inputData: { userinfo: this.props.Login.userInfo },\n        inputData: {\n          \"userinfo\": { ...this.props.Login.userInfo,\n            sformname: Lims_JSON_stringify(this.props.Login.userInfo.sformname),\n            smodulename: Lims_JSON_stringify(this.props.Login.userInfo.smodulename)\n          }\n        },\n        formData: formData,\n        isFileupload: true,\n        operation: this.props.Login.operation,\n        classUrl: \"testgroup\",\n        saveType,\n        formRef,\n        methodUrl: \"SpecificationFile\"\n      };\n      return inputParam;\n    };\n\n    this.deleteSpecRecord = deleteParam => {\n      const selectedRecord = deleteParam.selectedRecord;\n      const masterData = this.props.Login.masterData;\n      const ntreeversiontempcode = masterData[\"TreeTemplateManipulation\"][0].ntreeversiontempcode;\n      const treeVersionTemplateIndex = masterData[\"TreeVersionTemplate\"].findIndex(x => x[\"ntreeversiontempcode\"] === ntreeversiontempcode);\n      const templateVersionStatus = masterData[\"TreeVersionTemplate\"][treeVersionTemplateIndex].ntransactionstatus;\n\n      if (templateVersionStatus === transactionStatus.RETIRED) {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTEDTEMPLATEISRETIRED\"\n        }));\n      } else {\n        if (selectedRecord.napprovalstatus === transactionStatus.DRAFT || selectedRecord.napprovalstatus === transactionStatus.CORRECTION) {\n          this.deleteRecord(deleteParam);\n        } else {\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_SPECIFICATIONSTATUSMUSTBEDRAFTCORRECTION\"\n          }));\n        }\n      }\n    };\n\n    this.deleteRecord = deleteParam => {\n      if (this.props.Login.masterData.selectedNode !== undefined && this.props.Login.masterData.selectedNode !== null) {\n        const masterData = this.props.Login.masterData;\n        const treeVersionTemplateIndex = masterData[\"TreeVersionTemplate\"].findIndex(x => x[\"ntreeversiontempcode\"] === masterData.selectedNode[\"ntreeversiontempcode\"]);\n        const templateVersionStatus = masterData[\"TreeVersionTemplate\"][treeVersionTemplateIndex].ntransactionstatus;\n\n        if (templateVersionStatus === transactionStatus.RETIRED) {\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_SELECTEDTEMPLATEISRETIRED\"\n          }));\n        } else {\n          if (this.props.Login.masterData.selectedNode) {\n            const methodUrl = deleteParam.methodUrl;\n            let dataState = this.state.componentDataState;\n            const screenName = deleteParam.screenName;\n            const inputParam = {\n              inputData: {\n                [deleteParam.keyName]: deleteParam.selectedRecord,\n                userinfo: this.props.Login.userInfo,\n                genericlabel: this.props.Login.genericLabel,\n                testgroupspecification: this.props.Login.masterData.SelectedSpecification,\n                treetemplatemanipulation: this.props.Login.masterData.selectedNode,\n                ntreeversiontempcode: deleteParam.filterData.ntreeversiontempcode.value\n              },\n              classUrl: \"testgroup\",\n              operation: deleteParam.operation,\n              methodUrl: methodUrl,\n              screenName,\n              dataState\n            };\n            const masterData = this.props.Login.masterData; //if (showEsign(this.state.controlMap, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\n\n            if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, deleteParam.ncontrolCode)) {\n              const updateInfo = {\n                typeName: DEFAULT_RETURN,\n                data: {\n                  loadEsign: true,\n                  screenData: {\n                    inputParam,\n                    masterData\n                  },\n                  openModal: true,\n                  screenName: screenName,\n                  operation: deleteParam.operation,\n                  selectedRecord: {}\n                }\n              };\n              this.props.updateStore(updateInfo);\n            } else {\n              this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\", {});\n            }\n          } else {\n            toast.warn(this.props.intl.formatMessage({\n              id: \"IDS_SELECTPROFILENODE\"\n            }));\n          }\n        }\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTPROFILENODE\"\n        }));\n      }\n    };\n\n    this.deleteMultipleRecord = deleteParam => {\n      //console.log(\"delete component:\", deleteParam, this.props.Login.masterData);\n      const masterData = this.props.Login.masterData;\n      const treeVersionTemplateIndex = masterData[\"TreeVersionTemplate\"].findIndex(x => x[\"ntreeversiontempcode\"] === masterData.selectedNode[\"ntreeversiontempcode\"]);\n      const templateVersionStatus = masterData[\"TreeVersionTemplate\"][treeVersionTemplateIndex].ntransactionstatus;\n\n      if (templateVersionStatus === transactionStatus.RETIRED) {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTEDTEMPLATEISRETIRED\"\n        }));\n      } else {\n        const testgroupspecification = this.props.Login.masterData.SelectedSpecification;\n\n        if (testgroupspecification.napprovalstatus === transactionStatus.DRAFT || testgroupspecification.napprovalstatus === transactionStatus.CORRECTION) {\n          const inputParam = {\n            inputData: {\n              testgroupspecsampletype: deleteParam.props.testgroupspecsampletype,\n              userinfo: this.props.Login.userInfo,\n              genericlabel: this.props.Login.genericLabel,\n              testgroupspecification,\n              treetemplatemanipulation: this.props.Login.masterData.selectedNode\n            },\n            classUrl: \"testgroup\",\n            operation: \"delete\",\n            methodUrl: \"TestGroupComponent\",\n            screenName: this.props.Login.genericLabel && this.props.Login.genericLabel[\"Component\"][\"jsondata\"][\"sdisplayname\"][this.props.Login.userInfo.slanguagetypecode]\n          };\n          const masterData = this.props.Login.masterData;\n\n          if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, deleteParam.ncontrolCode)) {\n            const updateInfo = {\n              typeName: DEFAULT_RETURN,\n              data: {\n                loadEsign: true,\n                screenData: {\n                  inputParam,\n                  masterData\n                },\n                openModal: true,\n                screenName: this.props.Login.genericLabel && this.props.Login.genericLabel[\"Component\"][\"jsondata\"][\"sdisplayname\"][this.props.Login.userInfo.slanguagetypecode],\n                operation: \"delete\",\n                selectedRecord: {}\n              }\n            };\n            this.props.updateStore(updateInfo);\n          } else {\n            this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\", {});\n          }\n        } else {\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_SPECIFICATIONSTATUSMUSTBEDRAFTCORRECTION\"\n          }));\n        }\n      }\n    };\n\n    this.onDropSpecFile = (attachedFiles, fieldName, maxSize) => {\n      let selectedRecord = this.state.selectedRecord || {};\n      selectedRecord[fieldName] = onDropAttachFileList(selectedRecord[fieldName], attachedFiles, maxSize);\n      this.setState({\n        selectedRecord,\n        actionType: \"new\"\n      });\n    };\n\n    this.deleteAttachment = (event, file, fieldName) => {\n      let selectedRecord = this.state.selectedRecord || {};\n      selectedRecord[fieldName] = deleteAttachmentDropZone(selectedRecord[fieldName], file);\n      this.setState({\n        selectedRecord,\n        actionType: \"delete\" //fileToDelete:file.name \n\n      });\n    };\n\n    this.validateTestGroupComplete = (operation, inputValue, ncontrolCode) => {\n      if (this.props.Login.masterData.selectedNode !== undefined && this.props.Login.masterData.selectedNode !== null) {\n        const masterData = this.props.Login.masterData;\n        const treeVersionTemplateIndex = masterData[\"TreeVersionTemplate\"].findIndex(x => x[\"ntreeversiontempcode\"] === masterData.selectedNode[\"ntreeversiontempcode\"]);\n        const templateVersionStatus = masterData[\"TreeVersionTemplate\"][treeVersionTemplateIndex].ntransactionstatus;\n\n        if (templateVersionStatus === transactionStatus.RETIRED) {\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_SELECTEDTEMPLATEISRETIRED\"\n          }));\n        } else {\n          if (inputValue.testgroupspecification) {\n            if (inputValue.testgroupspecification.napprovalstatus === transactionStatus.DRAFT || inputValue.testgroupspecification.napprovalstatus === transactionStatus.CORRECTION) {\n              return rsapi.post(\"testgroup/validateTestGroupComplete\", {\n                nallottedspeccode: inputValue.testgroupspecification.nallottedspeccode,\n                \"userinfo\": this.props.Login.userInfo\n              }).then(response => {\n                if (response.data && response.data.length > 0) {\n                  const inactiveTestArray = [];\n                  response.data.map(item => inactiveTestArray.indexOf(item.stestname) === -1 ? inactiveTestArray.push(item.stestname) : \"\");\n                  const data = \" [\" + inactiveTestArray + \"] \" + this.props.intl.formatMessage({\n                    id: \"IDS_INACTIVETESTSATCOMPLETE\"\n                  });\n                  this.confirmMessage.confirm(this.props.intl.formatMessage({\n                    id: \"IDS_CONFIRMATION\"\n                  }), this.props.intl.formatMessage({\n                    id: \"IDS_CONFIRMATION\"\n                  }), data, this.props.intl.formatMessage({\n                    id: \"IDS_OK\"\n                  }), this.props.intl.formatMessage({\n                    id: \"IDS_CANCEL\"\n                  }), () => this.completeSpecification(operation, inputValue, ncontrolCode), false, undefined);\n                } else {\n                  this.completeSpecification(operation, inputValue, ncontrolCode);\n                }\n              }).catch(error => {\n                if (error.response.status === 500) {\n                  toast.error(this.props.intl.formatMessage({\n                    id: error.message\n                  }));\n                } else {\n                  toast.warn(this.props.intl.formatMessage({\n                    id: error.response\n                  }));\n                }\n              });\n            } else {\n              toast.warn(this.props.intl.formatMessage({\n                id: \"IDS_SPECIFICATIONSTATUSMUSTBEDRAFTCORRECTION\"\n              }));\n            }\n          } else {\n            toast.warn(this.props.intl.formatMessage({\n              id: \"IDS_SELECTSPECIFICATION\"\n            }));\n          }\n        }\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTSPECIFICATION\"\n        }));\n      }\n    };\n\n    this.retireSpec = (operation, selectedSpecification, approvalRoleActionDetail, retireSpecId) => {\n      if (selectedSpecification.testgroupspecification.napprovalstatus !== transactionStatus.RETIRED) {\n        if (approvalRoleActionDetail.length > 0 && approvalRoleActionDetail[0].nlevelno === transactionStatus.ACTIVE) {\n          if (selectedSpecification.testgroupspecification[\"napprovalstatus\"] === approvalRoleActionDetail[0].ntransactionstatus) {\n            const inputParam = {\n              inputData: {\n                nallottedspeccode: selectedSpecification.testgroupspecification,\n                treetemplatemanipulation: selectedSpecification.treetemplatemanipulation,\n                approvalRoleActionDetail: approvalRoleActionDetail[0],\n                userinfo: this.props.Login.userInfo,\n                operation: operation\n              },\n              classUrl: \"testgroup\",\n              operation: operation,\n              methodUrl: \"Spec\",\n              screenName: \"IDS_STUDYPLAN\"\n            };\n            let masterData = this.props.Login.masterData;\n\n            if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, retireSpecId)) {\n              const updateInfo = {\n                typeName: DEFAULT_RETURN,\n                data: {\n                  loadEsign: true,\n                  screenData: {\n                    inputParam,\n                    masterData\n                  },\n                  openModal: true,\n                  screenName: \"IDS_STUDYPLAN\",\n                  operation: operation,\n                  selectedRecord: {}\n                }\n              };\n              this.props.updateStore(updateInfo);\n            } else {\n              this.props.retireSpecification(inputParam.inputData, masterData);\n            }\n          } else {\n            toast.warn(this.props.intl.formatMessage({\n              id: \"IDS_RETIRECANBECONEAFTERFINAL\"\n            }));\n          }\n        } else {\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_FINALLEVELAPPROVE\"\n          }));\n        }\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_ALREADYRETIRED\"\n        }));\n      }\n    };\n\n    this.specificationReport = (operation, ncontrolCode) => {\n      if (this.props.Login.masterData.SelectedComponent && this.props.Login.masterData.SelectedTest) {\n        const inputParam = {\n          inputData: {\n            sprimarykeyname: 'nallottedspeccode',\n            userinfo: this.props.Login.userInfo,\n            ncontrolcode: ncontrolCode,\n            nregtypecode: transactionStatus.NA,\n            nregsubtypecode: transactionStatus.NA,\n            nreportmodulecode: transactionStatus.NA,\n            nreporttypecode: REPORTTYPE.CONTROLBASED,\n            nreportdecisiontypecode: transactionStatus.NA,\n            certificatetypecode: transactionStatus.NA,\n            nsectioncode: transactionStatus.NA,\n            operation: operation,\n            nallottedspeccode: this.props.Login.masterData['SelectedSpecification']['nallottedspeccode'],\n            selectedComponent: this.props.Login.masterData[\"SelectedComponent\"],\n            selectedTest: this.props.Login.masterData[\"SelectedTest\"],\n            filterData: this.state.filterData\n          }\n        };\n        this.props.reportSpecification(inputParam['inputData']);\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_REPORTCANNOTGENERATEFORCOMPWITHOUTTEST\"\n        }));\n      }\n    };\n\n    this.completeSpecification = (operation, inputValue, ncontrolCode) => {\n      if (inputValue.testgroupspecification) {\n        if (inputValue.testgroupspecification.napprovalstatus === transactionStatus.DRAFT || inputValue.testgroupspecification.napprovalstatus === transactionStatus.CORRECTION) {\n          const inputParam = {\n            inputData: {\n              userinfo: this.props.Login.userInfo,\n              ntreeversiontempcode: this.state.filterData.ntreeversiontempcode.value,\n              testGroupTest: this.props.Login.masterData.TestGroupTest,\n              ...inputValue\n            },\n            classUrl: \"testgroup\",\n            operation: operation,\n            methodUrl: \"Specification\",\n            screenName: \"IDS_SPECIFICATION\"\n          };\n\n          if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, ncontrolCode)) {\n            const updateInfo = {\n              typeName: DEFAULT_RETURN,\n              data: {\n                loadEsign: true,\n                screenData: {\n                  inputParam,\n                  masterData: this.props.Login.masterData\n                },\n                openModal: true,\n                screenName: \"IDS_SPECIFICATION\",\n                operation: operation,\n                selectedRecord: {}\n              }\n            };\n            this.props.updateStore(updateInfo);\n          } else {\n            this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\", {});\n          }\n        } else {\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_SPECIFICATIONSTATUSMUSTBEDRAFTCORRECTION\"\n          }));\n        }\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTSPECIFICATION\"\n        }));\n      }\n    };\n\n    this.approveSpecification = (status, needEsign) => {\n      const masterData = this.props.Login.masterData;\n      const inputParam = {\n        inputData: {\n          userinfo: this.props.Login.userInfo,\n          treetemplatemanipulation: masterData.selectedNode,\n          ntreeversiontempcode: this.state.filterData.ntreeversiontempcode.value,\n          testgroupspecification: { ...masterData.SelectedSpecification,\n            napprovalstatus: status\n          }\n        },\n        classUrl: \"testgroup\",\n        operation: \"approve\",\n        methodUrl: \"Specification\",\n        screenName: \"IDS_SPECIFICATION\"\n      };\n\n      if (needEsign === transactionStatus.YES) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData\n            },\n            openModal: true,\n            screenName: \"IDS_SPECIFICATION\",\n            operation: \"approve\",\n            selectedRecord: {}\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, masterData, \"openModal\", {});\n      }\n    };\n\n    this.onComboChange = (comboData, fieldName, caseNo, optional) => {\n      let selectedRecord = this.state.selectedRecord || {};\n\n      switch (caseNo) {\n        case 1:\n          if (fieldName === \"ntestcode\") {\n            selectedRecord[fieldName] = comboData;\n            this.setState({\n              selectedRecord\n            });\n          } else {\n            selectedRecord[fieldName] = comboData;\n            this.setState({\n              selectedRecord\n            });\n          }\n\n          break;\n\n        case 2:\n          selectedRecord[\"parameterTypeCode\"] = comboData.value;\n          selectedRecord[fieldName] = comboData;\n          this.setState({\n            selectedRecord\n          });\n          break;\n\n        case 3:\n          selectedRecord[\"schecklistversionname\"] = comboData.item.schecklistversionname;\n          selectedRecord[fieldName] = comboData;\n          this.setState({\n            selectedRecord\n          });\n          break;\n\n        default:\n          break;\n      }\n    };\n\n    this.validateEsign = () => {\n      const inputParam = {\n        inputData: {\n          \"userinfo\": { ...this.props.Login.userInfo,\n            sreason: this.state.selectedRecord[\"esigncomments\"],\n            nreasoncode: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].value,\n            spredefinedreason: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].label\n          },\n          password: this.state.selectedRecord[\"esignpassword\"]\n        },\n        screenData: this.props.Login.screenData\n      };\n      this.props.validateEsignCredential(inputParam, \"openModal\");\n    };\n\n    const componentDataState = {\n      skip: 0,\n      take: 10\n    };\n    const historyDataState = {\n      skip: 0,\n      take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n    };\n    const clinicalspecDataState = {\n      skip: 0,\n      take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5,\n      group: [{\n        field: 'sgendername'\n      }]\n    };\n    this.state = {\n      selectedRecord: {},\n      filterData: {},\n      error: \"\",\n      userRoleControlRights: [],\n      controlMap: new Map(),\n      componentDataState,\n      historyDataState,\n      clinicalspecDataState,\n      tempFilterData: {},\n      showTest: true,\n      testskip: 0,\n      testtake: this.props.Login.settings ? this.props.Login.settings[12] : 5,\n      skipRulesEngine: 0,\n      takeRulesEngine: this.props.Login.settings ? this.props.Login.settings[12] : 5,\n      fixefScrollHeight: window.outerHeight - 400,\n      initialVerticalWidth: \"20vh\",\n      testView: true,\n      //paneHeight:'calc(100vh - ' +window.outerHeight-847 + 'px)'\n      paneHeight: 'calc(100vh -183px)'\n    };\n    this.componentBreadcrumbs = [];\n    this.breadCrumbData = [];\n    this.searchRef = React.createRef();\n    this.specSubField = [{\n      [designProperties.VALUE]: \"stransdisplaystatus\"\n    }, {\n      [designProperties.VALUE]: \"sapprovalstatus\",\n      [designProperties.COLOUR]: true\n    }];\n    this.myRef = React.createRef();\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    if (props.Login.masterStatus !== \"\") {\n      if (props.Login.errorCode === 417 || props.Login.errorCode === 409) {\n        toast.warn(props.Login.masterStatus);\n        props.Login.masterStatus = \"\";\n      }\n    }\n\n    if (props.Login.error !== state.error) {\n      toast.error(props.Login.error);\n      props.Login.error = \"\";\n    }\n\n    return null;\n  }\n\n  componentDidMount() {\n    if (this.parentHeight) {\n      const height = this.parentHeight.clientHeight;\n      this.setState({\n        parentHeight: height - 50\n      });\n    }\n  }\n\n  render() {\n    console.log(\"Screen Name need\", this.props.Login.screenName);\n    const {\n      TestGroupSpecification,\n      SelectedSpecification,\n      SelectedTest,\n      OpenNodes,\n      selectedNode,\n      FocusKey,\n      ActiveKey,\n      SelectedComponent,\n      TestGroupTest,\n      TestGroupSpecSampleType,\n      searchedData,\n      TestGroupTestParameter\n    } = this.props.Login.masterData; // const deleteTree = {\n    //     methodUrl: \"Tree\", operation: \"delete\", inputParam: this.props.Login.inputParam,\n    //     userInfo: this.props.Login.userInfo, screenName: \"IDS_TREE\"\n    // };\n\n    if (this.props.Login.masterData && this.props.Login.masterData.AgaramTree && this.props.Login.masterData.AgaramTree.length > 0) {\n      this.props.Login.masterData.AgaramTree[0][\"label\"] = this.props.Login.masterData.AgaramTree[0][\"label\"] === 'root' ? this.props.intl.formatMessage({\n        id: \"IDS_ROOT\"\n      }) : this.props.Login.masterData.AgaramTree[0][\"label\"];\n    }\n\n    const testGroupTestData = searchedData || TestGroupTest || [];\n\n    if (TestGroupTestParameter) {\n      sortData(TestGroupTestParameter, \"ascending\", \"nsorter\");\n    }\n\n    if (testGroupTestData) {\n      sortData(testGroupTestData, \"descending\", \"nsorter\");\n    }\n\n    const getComponent = {\n      screenName: this.props.Login.genericLabel && this.props.Login.genericLabel[\"Component\"][\"jsondata\"][\"sdisplayname\"][this.props.Login.userInfo.slanguagetypecode],\n      operation: \"get\",\n      inputParam: this.props.Login.inputParam,\n      userInfo: this.props.Login.userInfo,\n      methodUrl: \"TestGroupComponent\",\n      keyName: \"testgroupspecification\"\n    };\n    const addSpecParam = {\n      testgroupspecification: SelectedSpecification,\n      selectedRecord: this.state.filterData,\n      userInfo: this.props.Login.userInfo,\n      selectedNode\n    };\n    const editSpecParam = {\n      selectedRecord: this.state.filterData,\n      userinfo: this.props.Login.userInfo,\n      selectedNode\n    };\n    const specDeleteParam = {\n      operation: \"delete\",\n      methodUrl: \"Specification\",\n      screenName: \"IDS_SPECIFICATION\",\n      keyName: \"testgroupspecification\",\n      filterData: this.state.filterData\n    };\n    const addSpecId = this.state.controlMap.has(\"AddSpecification\") && this.state.controlMap.get(\"AddSpecification\").ncontrolcode;\n    const addTreeId = this.state.controlMap.has(\"AddTree\") && this.state.controlMap.get(\"AddTree\").ncontrolcode;\n    const editTreeId = this.state.controlMap.has(\"EditTree\") && this.state.controlMap.get(\"EditTree\").ncontrolcode;\n    const deleteTreeId = this.state.controlMap.has(\"DeleteTree\") && this.state.controlMap.get(\"DeleteTree\").ncontrolcode;\n    const editSpecId = this.state.controlMap.has(\"EditSpecification\") && this.state.controlMap.get(\"EditSpecification\").ncontrolcode;\n    const deleteSpecId = this.state.controlMap.has(\"DeleteSpecification\") && this.state.controlMap.get(\"DeleteSpecification\").ncontrolcode;\n    const addComponentId = this.state.controlMap.has(\"AddComponent\") && this.state.controlMap.get(\"AddComponent\").ncontrolcode;\n    const deleteComponentId = this.state.controlMap.has(\"DeleteComponent\") && this.state.controlMap.get(\"DeleteComponent\").ncontrolcode;\n    const addTestId = this.state.controlMap.has(\"AddTest\") && this.state.controlMap.get(\"AddTest\").ncontrolcode;\n    const deleteTestId = this.state.controlMap.has(\"DeleteTest\") && this.state.controlMap.get(\"DeleteTest\").ncontrolcode;\n    const editTestId = this.state.controlMap.has(\"EditTest\") && this.state.controlMap.get(\"EditTest\").ncontrolcode;\n    const viewFileId = this.state.controlMap.has(\"ViewTestFile\") && this.state.controlMap.get(\"ViewTestFile\").ncontrolcode;\n    const confirmMessage = new ConfirmMessage();\n    const deleteTree = {\n      methodUrl: \"Tree\",\n      operation: \"delete\",\n      inputParam: this.props.Login.inputParam,\n      userInfo: this.props.Login.userInfo,\n      screenName: \"IDS_TREE\",\n      ncontrolCode: deleteTreeId,\n      filterData: this.state.filterData\n    };\n    const getTest = {\n      screenName: \"IDS_TEST\",\n      operation: \"get\",\n      masterData: this.props.Login.masterData,\n      userInfo: this.props.Login.userInfo,\n      methodUrl: \"TestGroupTest\",\n      keyName: \"ntestgrouptestcode\"\n    };\n    const filterParam = {\n      testskip: 0,\n      testtake: this.props.Login.settings ? this.props.Login.settings[12] : 5,\n      inputListName: \"TestGroupTest\",\n      selectedObject: \"SelectedTest\",\n      primaryKeyField: \"ntestgrouptestcode\",\n      fetchUrl: \"testgroup/getTestGroupTest\",\n      fecthInputObject: {\n        userinfo: this.props.Login.userInfo\n      },\n      masterData: this.props.Login.masterData,\n      searchFieldList,\n      changeList: [\"TestGroupTestFormula\", \"TestGroupTestNumericParameter\", \"TestGroupTestPredefinedParameter\", \"TestGroupTestCharParameter\", \"TestGroupTestParameter\"],\n      isSingleSelect: true\n    };\n    const filterParamRulesEngine = {\n      skipRulesEngine: 0,\n      takeRulesEngine: this.props.Login.settings ? this.props.Login.settings[12] : 5,\n      inputListName: \"RulesEngine\",\n      selectedObject: \"SelectedRulesEngine\",\n      primaryKeyField: \"ntestgrouprulesenginecode\",\n      fetchUrl: \"testgrouprulesengine/getSelectedTestGroupRulesEngine\",\n      fecthInputObject: {\n        userinfo: this.props.Login.userInfo,\n        ntestgrouptestcode: this.props.Login.masterData.SelectedTest && this.props.Login.masterData.SelectedTest.ntestgrouptestcode\n      },\n      masterData: this.props.Login.masterData,\n      'searchFieldList': [\"srulename\", \"stransdisplaystatus\"],\n      changeList: [],\n      isSingleSelect: true\n    };\n    const specMandatoryFields = [];\n    const compMandatoryFields = [];\n    const editTestMandatoryFields = [];\n    const addTestMandatoryFields = [];\n    specificationColumnList.forEach(item => item.mandatory === true ? specMandatoryFields.push(item) : \"\");\n    componentColumnList.forEach(item => item.mandatory === true ? compMandatoryFields.push(item) : \"\");\n    editTestColumnList.forEach(item => item.mandatory === true ? editTestMandatoryFields.push(item) : \"\");\n    addTestColumnList.forEach(item => item.mandatory === true ? addTestMandatoryFields.push(item) : \"\");\n\n    if (this.props.Login.masterData && Object.values(this.props.Login.masterData).length > 0) {\n      if (selectedNode && selectedNode.sleveldescription) {\n        const splitNode = this.props.Login.masterData.ActiveKey.split('/');\n        let treeNodeNames = [];\n        splitNode.forEach(nodeItem => {\n          this.props.Login.masterData.TreeTemplateManipulation.forEach(treeItem => {\n            if (treeItem.ntemplatemanipulationcode === parseInt(nodeItem)) treeNodeNames.push(treeItem.sleveldescription);\n          });\n        });\n        this.componentBreadcrumbs = treeNodeNames;\n\n        if (SelectedSpecification && SelectedSpecification !== null && SelectedSpecification.sspecname) {\n          this.componentBreadcrumbs.push(SelectedSpecification.sspecname);\n\n          if (SelectedComponent && SelectedComponent !== null && SelectedComponent.ncomponentcode !== -1) {\n            // this.componentBreadcrumbs[2] = this.props.intl.formatMessage({ id: \"IDS_COMPONENT\" }) + \": \" + SelectedComponent.scomponentname;\n            this.componentBreadcrumbs.push(SelectedComponent.scomponentname);\n          } else {// delete this.componentBreadcrumbs[2];\n          }\n        } else {// delete this.componentBreadcrumbs[1];\n        }\n      } else {\n        this.componentBreadcrumbs = []; // delete this.componentBreadcrumbs[0];\n      }\n    }\n\n    this.confirmMessage = new ConfirmMessage(); //New Design\n\n    const specDesign = /*#__PURE__*/React.createElement(React.Fragment, null, this.componentBreadcrumbs && this.componentBreadcrumbs.length > 0 && /*#__PURE__*/React.createElement(\"div\", {\n      className: \"component_breadcrumbs\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 303,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"ul\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 304,\n        columnNumber: 25\n      }\n    }, this.componentBreadcrumbs.map(item => {\n      return /*#__PURE__*/React.createElement(\"li\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 306,\n          columnNumber: 40\n        }\n      }, item);\n    }))), /*#__PURE__*/React.createElement(ContentPanel, {\n      hidden: this.state.showTest,\n      className: \"mr-2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 312,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"card_group\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 313,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 314,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Card.Header, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 315,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      style: {\n        display: \"inline-block\",\n        marginTop: \"1%\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 316,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(\"h4\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 317,\n        columnNumber: 37\n      }\n    }, this.props.intl.formatMessage({\n      id: \"IDS_SPECIFICATIONINFO\"\n    }))), /*#__PURE__*/React.createElement(\"button\", {\n      className: \"btn btn-primary\",\n      style: {\n        float: \"right\",\n        marginRight: \"1rem\"\n      },\n      onClick: () => this.showSpecAndTestInfo1(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 324,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faEye,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 326,\n        columnNumber: 37\n      }\n    }), \"  \", this.props.intl.formatMessage({\n      id: \"IDS_TEST\"\n    }))), /*#__PURE__*/React.createElement(Card.Body, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 330,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(SpecificationInfo, {\n      genericLabel: this.props.Login.genericLabel,\n      controlMap: this.state.controlMap,\n      userRoleControlRights: this.state.userRoleControlRights,\n      selectedSpecification: this.props.Login.masterData.SelectedSpecification,\n      userInfo: this.props.Login.userInfo,\n      selectedNode: this.props.Login.masterData.selectedNode,\n      selectedRecord: this.state.filterData,\n      approvalRoleActionDetail: this.props.Login.masterData.ApprovalRoleActionDetail,\n      screenName: \"IDS_SPECIFICATIONINFO\",\n      deleteRecord: this.deleteRecord,\n      addSpecification: this.props.addSpecification,\n      filterData: this.state.filterData //completeSpecification={this.completeSpecification}\n      ,\n      completeSpecification: this.validateTestGroupComplete,\n      approveSpecification: this.approveSpecification,\n      specificationReport: this.specificationReport,\n      retireSpec: this.retireSpec,\n      masterData: this.props.Login.masterData,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 331,\n        columnNumber: 33\n      }\n    })))), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 356,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(CustomTab, {\n      tabDetail: this.tabDetail(),\n      onTabChange: this.onTabChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 357,\n        columnNumber: 29\n      }\n    }))));\n    const testDesign = /*#__PURE__*/React.createElement(Card, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 363,\n        columnNumber: 28\n      }\n    }, /*#__PURE__*/React.createElement(Card.Header, {\n      className: \"sm-header\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 364,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"h4\", {\n      className: \"spec-info-title\",\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_TEST\"\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 365,\n        columnNumber: 17\n      }\n    }, this.props.intl.formatMessage({\n      id: \"IDS_TEST\"\n    })), /*#__PURE__*/React.createElement(\"button\", {\n      className: \"btn btn-primary\",\n      style: {\n        position: \"absolute\",\n        right: \"7px\",\n        top: \"7px\"\n      },\n      onClick: () => this.showSpecAndTestInfo(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 366,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faEye,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 368,\n        columnNumber: 21\n      }\n    }), \"  \", this.props.intl.formatMessage({\n      id: \"IDS_SPECINFO\"\n    }))), /*#__PURE__*/React.createElement(Card.Body, {\n      className: this.state.testView ? 'p-0' : 'no-pad-t',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 372,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(TransactionListMasterJsonView, {\n      cardHead: 167,\n      componentBreadcrumbs: this.breadCrumbData ? this.breadCrumbData.length > 0 ? true : false : false // notSearchable={false}\n      ,\n      masterList: searchedData || TestGroupTest || [] //selectedMaster={[SelectedTest]}\n      ,\n      clickIconGroup: true,\n      selectedMaster: SelectedTest !== undefined ? [SelectedTest] : undefined,\n      primaryKeyField: \"ntestgrouptestcode\",\n      getMasterDetail: this.props.getTestGroupDetails,\n      inputParam: getTest,\n      additionalParam: [],\n      mainField: \"stestname\",\n      selectedListName: \"SelectedTest\",\n      objectName: \"testgrouptest\",\n      listName: \"IDS_TEST\",\n      showStatusLink: true,\n      statusFieldName: \"stransdisplaystatus\",\n      statusField: \"ntransactionstatus\",\n      subFields: testSubFields,\n      moreField: testMoreFields,\n      needValidation: false,\n      needFilter: false,\n      filterColumnData: this.props.filterTransactionList,\n      searchListName: \"searchedData\",\n      searchRef: this.searchRef,\n      hidePaging: false,\n      filterParam: filterParam,\n      handlePageChange: this.handlePageChange,\n      skip: this.state.testskip,\n      take: this.state.testtake,\n      pageSize: this.props.Login.settings && this.props.Login.settings[13].split(\",\").map(setting => parseInt(setting)),\n      actionIcons: [{\n        title: this.props.intl.formatMessage({\n          id: \"IDS_VIEW\"\n        }),\n        controlname: \"faCloudDownloadAlt\",\n        objectName: \"selectedTest\",\n        hidden: this.state.userRoleControlRights.indexOf(viewFileId) === -1,\n        inputData: {\n          masterData: this.props.Login.masterData,\n          userInfo: this.props.Login.userInfo\n        },\n        onClick: props => this.viewTestFile(props),\n        needConditionalIcon: true,\n        conditionalIconFunction: this.fileViewIcon\n      }, {\n        title: this.props.intl.formatMessage({\n          id: \"IDS_VIEW\"\n        }),\n        controlname: \"faExternalLinkAlt\",\n        objectName: \"selectedTest\",\n        hidden: this.state.userRoleControlRights.indexOf(viewFileId) === -1,\n        inputData: {\n          masterData: this.props.Login.masterData,\n          userInfo: this.props.Login.userInfo\n        },\n        onClick: props => this.viewTestFile(props),\n        needConditionalIcon: true,\n        conditionalIconFunction: this.linkViewIcon\n      }, {\n        title: this.props.intl.formatMessage({\n          id: \"IDS_EDIT\"\n        }),\n        controlname: \"faPencilAlt\",\n        objectName: \"testgroupspecification\",\n        hidden: this.state.userRoleControlRights.indexOf(editTestId) === -1,\n        inputData: {\n          masterData: this.props.Login.masterData,\n          userInfo: this.props.Login.userInfo\n        },\n        onClick: props => this.props.editTestGroupTest(\"update\", props.SelectedTest[0], this.props.Login.userInfo, editTestId, SelectedSpecification, this.state.filterData, props.masterData)\n      }, {\n        title: this.props.intl.formatMessage({\n          id: \"IDS_DELETE\"\n        }),\n        controlname: \"faTrashAlt\",\n        objectName: \"testgrouptest\",\n        hidden: this.state.userRoleControlRights.indexOf(deleteTestId) === -1,\n        inputData: {\n          masterData: this.props.Login.masterData,\n          userInfo: this.props.Login.userInfo\n        },\n        onClick: props => confirmMessage.confirm(\"deleteMessage\", this.props.intl.formatMessage({\n          id: \"IDS_DELETE\"\n        }), this.props.intl.formatMessage({\n          id: \"IDS_DEFAULTCONFIRMMSG\"\n        }), this.props.intl.formatMessage({\n          id: \"IDS_OK\"\n        }), this.props.intl.formatMessage({\n          id: \"IDS_CANCEL\"\n        }), () => this.deleteTest({\n          props,\n          ncontrolCode: deleteTestId,\n          filterData: this.state.filterData\n        }))\n      }],\n      commonActions: /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Button, {\n        className: \"btn btn-icon-rounded btn-circle solid-blue\",\n        role: \"button\",\n        hidden: this.state.userRoleControlRights.indexOf(addTestId) === -1,\n        \"data-tip\": this.props.intl.formatMessage({\n          id: \"IDS_ADD\"\n        }) // data-for=\"tooltip-list-wrap\"\n        ,\n        onClick: () => this.props.addTestGroupTest(SelectedComponent, this.props.Login.userInfo, addTestId, SelectedSpecification, this.state.filterData, this.props.Login.masterData),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 455,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n        icon: faPlus,\n        title: this.props.intl.formatMessage({\n          id: \"IDS_ADD\"\n        }),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 460,\n          columnNumber: 33\n        }\n      }))),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 373,\n        columnNumber: 17\n      }\n    })));\n    const paramDesign = /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(ContentPanel, {\n      hidden: !this.state.showTest,\n      className: \"grouped-param\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 470,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 471,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(TestGroupTestTab, {\n      paneHeight: this.state.paneHeight,\n      testView: this.state.testView,\n      isrulesenginerequired: this.props.Login.masterData.isrulesenginerequired && this.props.Login.masterData.isrulesenginerequired === transactionStatus.YES ? true : false,\n      masterData: this.props.Login.masterData,\n      inputParam: this.props.Login.inputParam,\n      userInfo: this.props.Login.userInfo,\n      userRoleControlRights: this.state.userRoleControlRights,\n      esignRights: this.props.Login.userRoleControlRights,\n      screenName: this.props.Login.screenName,\n      openChildModal: this.props.Login.openChildModal,\n      operation: this.props.Login.operation,\n      loadEsign: this.props.Login.loadEsign,\n      testGroupInputData: this.props.Login.testGroupInputData,\n      parameterData: this.props.Login.parameterData,\n      selectedRecord: this.state.selectedRecord,\n      selectedsubcodedresult: this.state.selectedsubcodedresult || [],\n      selectsubcodedelete: this.state.selectsubcodedelete,\n      screenData: this.props.Login.screenData,\n      ncontrolCode: this.props.Login.ncontrolCode,\n      controlMap: this.state.controlMap,\n      testGroupCheckList: this.props.Login.testGroupCheckList,\n      openTemplateModal: this.props.Login.openTemplateModal,\n      editTestGroupTest: this.props.editTestGroupTest,\n      updateStore: this.props.updateStore,\n      crudMaster: this.props.crudMaster,\n      getTestGroupParameter: this.props.getTestGroupParameter,\n      editTestGroupParameter: this.props.editTestGroupParameter,\n      filterData: this.state.filterData,\n      addTestGroupCodedResult: this.props.addTestGroupCodedResult,\n      subCodedResultView: this.props.subCodedResultView,\n      addTestGroupNumericTab: this.props.addTestGroupNumericTab,\n      validateEsignCredential: this.props.validateEsignCredential,\n      filterColumnData: this.props.filterColumnData,\n      viewTestGroupCheckList: this.props.viewTestGroupCheckList,\n      getDataForTestMaterial: this.props.getDataForTestMaterial,\n      materialType: this.props.Login.materialType,\n      getMaterialCategoryBasedMaterialType: this.props.getMaterialCategoryBasedMaterialType,\n      materialCategoryList: this.props.Login.materialCategoryList,\n      materialList: this.props.Login.materialList,\n      getMaterialBasedMaterialCategory: this.props.getMaterialBasedMaterialCategory,\n      getTestGroupMaterial: this.props.getTestGroupMaterial,\n      getDataForEditTestMaterial: this.props.getDataForEditTestMaterial,\n      dataState: this.state.clinicalspecDataState,\n      dataStateChange: this.specDataStateChange,\n      getTestGroupRulesEngineAdd: this.getTestGroupRulesEngineAdd,\n      settings: this.props.Login.settings,\n      skip: this.state.testskip,\n      take: this.state.testtake,\n      getEditTestGroupRulesEngine: this.props.getEditTestGroupRulesEngine,\n      getSelectedTestGroupRulesEngine: this.props.getSelectedTestGroupRulesEngine,\n      ConfirmDeleteRule: this.ConfirmDeleteRule,\n      approveVersion: (masterdata, nflag) => this.approveVersion(masterdata, nflag),\n      openflowview: props => this.openflowview(props),\n      handlePageChangeRuleEngine: event => this.handlePageChangeRuleEngine(event),\n      skipRulesEngine: this.state.skipRulesEngine,\n      takeRulesEngine: this.state.takeRulesEngine,\n      viewOutcome: props => this.viewOutcome(props),\n      filterParamRulesEngine: filterParamRulesEngine,\n      filterTransactionList: this.props.filterTransactionList,\n      saveExecutionOrder: props => this.props.saveExecutionOrder(props, this.props.Login.masterData, this.props.Login.userInfo),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 480,\n        columnNumber: 25\n      }\n    }))));\n    const mainDesign = /*#__PURE__*/React.createElement(SplitterLayout, {\n      customClassName: this.state.testView ? \"detailed-inner\" : \"detailed-inner no-height \",\n      vertical: this.state.testView ? false : true,\n      borderColor: \"#999\",\n      primaryIndex: 1,\n      percentage: true //secondaryInitialSize={this.state.testView ? 600 : this.state.fixefScrollHeight}\n      ,\n      secondaryInitialSize: 37,\n      primaryMinSize: 30,\n      secondaryMinSize: 37,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 550,\n        columnNumber: 13\n      }\n    }, testDesign, paramDesign); // const testDesign = this.state.testView ?\n    //     <SplitterLayout\n    //         customClassName=\"detailed-inner\"\n    //         borderColor=\"#999\"\n    //         primaryIndex={1}>\n    //         {tempDesign}{paramDesign}\n    //     </SplitterLayout>\n    //     :\n    //     <SplitterLayout\n    //         customClassName=\"detailed-inner no-height\"\n    //         vertical\n    //         borderColor=\"#999\"\n    //         primaryIndex={1}\n    //         // onSecondaryPaneSizeChange={this.verticalPaneSizeChange}\n    //         secondaryInitialSize={this.state.fixefScrollHeight}\n    //     >\n    //         <ContentPanel>\n    //             {tempDesign}\n    //         </ContentPanel>\n    //         {paramDesign}\n    //     </SplitterLayout>\n\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(ListWrapper, {\n      className: \"client-listing-wrap mtop-4 screen-height-window\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 592,\n        columnNumber: 17\n      }\n    }, this.breadCrumbData && this.breadCrumbData.length > 0 && /*#__PURE__*/React.createElement(BreadcrumbComponent, {\n      breadCrumbItem: this.breadCrumbData,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 594,\n        columnNumber: 25\n      }\n    }), /*#__PURE__*/React.createElement(Row, {\n      noGutters: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 597,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      className: \"parent-port-height sticky_head_parent\",\n      ref: parentHeight => {\n        this.parentHeight = parentHeight;\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 598,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(SplitterLayout, {\n      borderColor: \"#999\",\n      primaryIndex: 1,\n      percentage: true,\n      secondaryInitialSize: 30 //customClassName=\"fixed_list_height\"\n      ,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 599,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: `${this.state.showModalBg ? 'show_modal_bg fixed_list_height' : 'fixed_list_height'}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 606,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"sticky_head\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 607,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(SearchAdd, {\n      className: \"border fixed_ico_list title_grp_custom\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 608,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(\"h4\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 609,\n        columnNumber: 45\n      }\n    }, this.props.intl.formatMessage({\n      id: \"IDS_PROFILETREE\"\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"icon_group_right_aligned\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 610,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(AdvFilter, {\n      filterComponent: [{\n        \"IDS_SAMPLEFILTER\": /*#__PURE__*/React.createElement(SampleFilter, {\n          genericLabel: this.props.Login.genericLabel,\n          userInfo: this.props.Login.userInfo,\n          sampleType: this.state.sampleType,\n          treeVersionTemplate: this.state.treeVersionTemplate,\n          productCategory: this.state.productCategory,\n          product: this.state.product,\n          projectType: this.state.projectType,\n          project: this.state.project,\n          onFilterComboChange: this.onFilterComboChange,\n          tempFilterData: this.state.tempFilterData,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 614,\n            columnNumber: 61\n          }\n        }),\n        needActionStrip: false\n      }],\n      onFilterSubmit: this.onFilterSumbit,\n      showModalBg: e => this.setState({\n        showModalBg: e\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 611,\n        columnNumber: 49\n      }\n    }), /*#__PURE__*/React.createElement(ProductList, {\n      className: \"d-flex product-category float-right icon-group-wrap\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 633,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      className: \"btn btn-icon-rounded btn-circle solid-blue mr-1\",\n      role: \"button\",\n      hidden: this.state.userRoleControlRights.indexOf(addTreeId) === -1,\n      onClick: () => this.props.createTree(this.state.filterData, this.props.Login.userInfo, this.props.Login.masterData, addTreeId),\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_ADD\"\n      }) //  data-for=\"tooltip-list-wrap\"\n      ,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 635,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faPlus,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 641,\n        columnNumber: 57\n      }\n    })), /*#__PURE__*/React.createElement(Nav.Link, {\n      className: \"btn btn-circle outline-grey mr0 mr-1\",\n      name: \"edittestname\",\n      hidden: this.state.userRoleControlRights.indexOf(editTreeId) === -1,\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_EDIT\"\n      }) //  data-for=\"tooltip-list-wrap\"\n      ,\n      onClick: () => this.props.editTree(\"update\", selectedNode, this.props.Login.userInfo, editTreeId, this.state.filterData, this.props.Login.masterData),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 644,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faPencilAlt,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 650,\n        columnNumber: 57\n      }\n    })), /*#__PURE__*/React.createElement(Nav.Link, {\n      name: \"deleteLink\",\n      hidden: this.state.userRoleControlRights.indexOf(deleteTreeId) === -1,\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_DELETE\"\n      }) // data-for=\"tooltip-list-wrap\"\n      ,\n      className: \"btn btn-circle outline-grey \",\n      onClick: () => this.ConfirmDelete({ ...deleteTree\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 652,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faTrashAlt,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 658,\n        columnNumber: 57\n      }\n    })), /*#__PURE__*/React.createElement(Button, {\n      className: \"btn btn-circle outline-grey ml-1\",\n      variant: \"link\",\n      onClick: () => this.reloadData() // data-for=\"tooltip-list-wrap\"\n      ,\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_REFRESH\"\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 670,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faSync,\n      style: {\n        \"width\": \"0.6!important\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 674,\n        columnNumber: 57\n      }\n    })))))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"sticky_head_scroll_body\",\n      style: {\n        \"height\": this.state.parentHeight\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 682,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(PerfectScrollbar, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 683,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(FormTreeMenu, {\n      data: this.props.Login.masterData.AgaramTree,\n      hasSearch: false,\n      handleTreeClick: this.onTreeClick,\n      initialOpenNodes: OpenNodes,\n      focusKey: FocusKey || \"\",\n      activeKey: ActiveKey || \"\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 684,\n        columnNumber: 45\n      }\n    }), /*#__PURE__*/React.createElement(TransationListMaster, {\n      notSearchable: true,\n      titleHead: this.props.intl.formatMessage({\n        id: \"IDS_SPECIFICATION\"\n      }),\n      titleClasses: \"title_grp_custom fixed_ico_list\",\n      masterList: TestGroupSpecification || [],\n      selectedMaster: [SelectedSpecification],\n      needMultiSelect: false,\n      primaryKeyField: \"nallottedspeccode\",\n      getMasterDetail: spec => this.props.getComponentBySpecId({ ...getComponent,\n        selectedRecord: spec,\n        historyDataState: this.state.historyDataState\n      }, this.props.Login.masterData, this.searchRef),\n      mainField: \"sspecname\",\n      selectedListName: \"testgroupspecification\",\n      objectName: \"testgroupspecification\",\n      listName: \"IDS_SPECIFICATION\",\n      onFilterSumbit: this.onFilterSumbit,\n      subFields: this.specSubField,\n      actionIcons: [{\n        title: this.props.intl.formatMessage({\n          id: \"IDS_EDIT\"\n        }),\n        controlname: \"faPencilAlt\",\n        objectName: \"testgroupspecification\",\n        hidden: this.state.userRoleControlRights.indexOf(editSpecId) === -1,\n        inputData: {\n          masterData: this.props.Login.masterData,\n          userInfo: this.props.Login.userInfo\n        },\n        onClick: props => this.props.addSpecification(\"update\", { ...editSpecParam,\n          ...props\n        }, editSpecId)\n      }, {\n        title: this.props.intl.formatMessage({\n          id: \"IDS_DELETE\"\n        }),\n        controlname: \"faTrashAlt\",\n        objectName: \"testgroupspecification\",\n        hidden: this.state.userRoleControlRights.indexOf(deleteSpecId) === -1,\n        inputData: {\n          masterData: this.props.Login.masterData,\n          userInfo: this.props.Login.userInfo\n        },\n        onClick: props => confirmMessage.confirm(\"deleteMessage\", this.props.intl.formatMessage({\n          id: \"IDS_DELETE\"\n        }), this.props.intl.formatMessage({\n          id: \"IDS_DEFAULTCONFIRMMSG\"\n        }), this.props.intl.formatMessage({\n          id: \"IDS_OK\"\n        }), this.props.intl.formatMessage({\n          id: \"IDS_CANCEL\"\n        }), () => this.deleteSpecRecord({\n          props,\n          ...specDeleteParam,\n          selectedRecord: SelectedSpecification,\n          ncontrolCode: deleteSpecId\n        }))\n      }],\n      needFilter: false,\n      commonActions: /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Button, {\n        className: \"btn btn-icon-rounded btn-circle solid-blue\",\n        role: \"button\",\n        hidden: this.state.userRoleControlRights.indexOf(addSpecId) === -1,\n        \"data-tip\": this.props.intl.formatMessage({\n          id: \"IDS_ADD\"\n        }) //  data-for=\"tooltip-list-wrap\"\n        ,\n        onClick: () => this.props.addSpecification(\"create\", { ...addSpecParam\n        }, addSpecId, this.props.Login.masterData),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 738,\n          columnNumber: 57\n        }\n      }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n        icon: faPlus // title={this.props.intl.formatMessage({ id: \"IDS_ADD\" })}\n        ,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 743,\n          columnNumber: 61\n        }\n      }))),\n      hideSearch: false,\n      hidePaging: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 692,\n        columnNumber: 45\n      }\n    }), SelectedSpecification && SelectedSpecification.ncomponentrequired === transactionStatus.YES && /*#__PURE__*/React.createElement(TransationListMaster, {\n      notSearchable: true,\n      titleHead: this.props.Login.genericLabel && this.props.Login.genericLabel[\"Component\"][\"jsondata\"][\"sdisplayname\"][this.props.Login.userInfo.slanguagetypecode],\n      titleClasses: \"title_grp_custom fixed_ico_list\",\n      masterList: TestGroupSpecSampleType || [],\n      selectedMaster: [SelectedComponent],\n      needMultiSelect: false,\n      primaryKeyField: \"nspecsampletypecode\",\n      getMasterDetail: event => this.componentRowClick(event),\n      mainField: \"scomponentname\",\n      selectedListName: \"testgroupspecsampletype\",\n      objectName: \"testgroupspecsampletype\",\n      listName: this.props.Login.genericLabel && this.props.Login.genericLabel[\"Component\"][\"jsondata\"][\"sdisplayname\"][this.props.Login.userInfo.slanguagetypecode],\n      actionIcons: [{\n        title: this.props.intl.formatMessage({\n          id: \"IDS_DELETE\"\n        }),\n        // data-tip={this.props.intl.formatMessage({ id: \"IDS_ADD\" })}\n        controlname: \"faTrashAlt\",\n        objectName: \"testgroupspecsampletype\",\n        hidden: this.state.userRoleControlRights.indexOf(deleteComponentId) === -1,\n        inputData: {\n          masterData: this.props.Login.masterData,\n          userInfo: this.props.Login.userInfo\n        },\n        onClick: props => confirmMessage.confirm(\"deleteMessage\", this.props.intl.formatMessage({\n          id: \"IDS_DELETE\"\n        }), this.props.intl.formatMessage({\n          id: \"IDS_DEFAULTCONFIRMMSG\"\n        }), this.props.intl.formatMessage({\n          id: \"IDS_OK\"\n        }), this.props.intl.formatMessage({\n          id: \"IDS_CANCEL\"\n        }), () => this.deleteMultipleRecord({\n          props,\n          ncontrolCode: deleteComponentId\n        }))\n      }],\n      commonActions: /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Button, {\n        className: \"btn btn-icon-rounded btn-circle solid-blue\",\n        role: \"button\",\n        hidden: this.state.userRoleControlRights.indexOf(addComponentId) === -1,\n        \"data-tip\": this.props.intl.formatMessage({\n          id: \"IDS_ADD\"\n        }) //  data-for=\"tooltip-list-wrap\"\n        // title={this.props.intl.formatMessage({ id: \"IDS_ADD\" })}\n        ,\n        onClick: () => this.props.addComponent(SelectedSpecification, this.props.Login.userInfo, addComponentId, this.props.Login.masterData, this.props.Login.genericLabel),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 789,\n          columnNumber: 61\n        }\n      }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n        icon: faPlus // title={this.props.intl.formatMessage({ id: \"IDS_ADD\" })} \n        ,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 795,\n          columnNumber: 65\n        }\n      }))),\n      hidePaging: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 753,\n        columnNumber: 49\n      }\n    })))), /*#__PURE__*/React.createElement(React.Fragment, null, this.state.testView ? /*#__PURE__*/React.createElement(React.Fragment, null, specDesign, this.state.showTest ? /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 812,\n        columnNumber: 49\n      }\n    }, mainDesign) : \"\") : /*#__PURE__*/React.createElement(PerfectScrollbar, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 818,\n        columnNumber: 41\n      }\n    }, specDesign, this.state.showTest ? /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 821,\n        columnNumber: 49\n      }\n    }, mainDesign) : \"\")))))), this.props.Login.openModal && this.props.Login.screenName && /*#__PURE__*/React.createElement(SlideOutModal, {\n      show: this.props.Login.openModal,\n      closeModal: this.closeModal,\n      className: this.props.Login.screenName === \"IDS_VIEWRULE\" ? \"wide-popup\" : \"\",\n      operation: this.props.Login.screenName === \"IDS_VIEWRULE\" || this.props.Login.screenName === \"IDS_VIEWOUTCOME\" ? \"\" : this.props.Login.operation,\n      inputParam: this.props.Login.inputParam,\n      screenName: this.props.Login.screenName === \"IDS_VIEWRULE\" || this.props.Login.screenName === \"IDS_VIEWOUTCOME\" ? this.props.intl.formatMessage({\n        id: this.props.Login.screenName\n      }) + \" - \" + this.props.Login.masterData.SelectedTest.stestsynonym : this.props.Login.screenName,\n      esign: this.props.Login.loadEsign,\n      validateEsign: this.validateEsign,\n      onSaveClick: this.onSaveClick,\n      hideSave: this.props.Login.screenName === \"IDS_VIEWRULE\" || this.props.Login.screenName === \"IDS_VIEWOUTCOME\" || this.props.Login.screenName === \"IDS_SUBCODERESULT\" ? true : false,\n      size: this.props.Login.screenName === \"IDS_VIEWRULE\" || this.props.Login.screenName === \"IDS_VIEWOUTCOME\" ? 'xl' : \"lg\",\n      selectedRecord: this.state.selectedRecord || {},\n      mandatoryFields: this.props.Login.screenName === \"IDS_SPECFILE\" ? this.findMandatoryFields(this.props.Login.screenName, this.state.selectedRecord) : this.props.Login.screenName === \"IDS_SPECIFICATION\" ? specMandatoryFields : this.props.Login.screenName === this.props.Login.genericLabel[\"Component\"][\"jsondata\"][\"sdisplayname\"][this.props.Login.userInfo.slanguagetypecode] ? compMandatoryFields : this.props.Login.screenName === \"IDS_EDITTESTGROUPTEST\" ? editTestMandatoryFields : this.props.Login.screenName === \"IDS_TEST\" ? addTestMandatoryFields : this.props.Login.screenName === \"IDS_PROFILETREE\" || this.props.Login.screenName === \"IDS_EDITTREE\" ? this.props.Login.treeMandatoryFields : [],\n      addComponent: this.props.Login.loadEsign ? /*#__PURE__*/React.createElement(Esign, {\n        operation: this.props.Login.operation,\n        onInputOnChange: this.onEsignInputOnChange,\n        inputParam: this.props.Login.inputParam,\n        selectedRecord: this.state.selectedRecord || {},\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 859,\n          columnNumber: 29\n        }\n      }) : this.props.Login.screenName === \"IDS_SPECIFICATION\" ? /*#__PURE__*/React.createElement(AddTestGroupSpecification, {\n        genericLabel: this.props.Login.genericLabel,\n        userInfo: this.props.Login.userInfo,\n        selectedRecord: this.state.selectedRecord || {},\n        timeZoneList: this.props.Login.timeZoneList,\n        onInputOnChange: this.onInputOnChange,\n        handleDateChange: this.handleDateChange,\n        onComboChange: this.onComboChange,\n        screenName: this.props.Login.screenName,\n        operation: this.props.Login.operation,\n        nsampletypecode: this.props.Login.masterData.selectedNode.nsampletypecode,\n        settings: this.props.Login.settings,\n        tempFilterData: this.state.tempFilterData,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 866,\n          columnNumber: 33\n        }\n      }) : this.props.Login.screenName === this.props.Login.genericLabel[\"Component\"][\"jsondata\"][\"sdisplayname\"][this.props.Login.userInfo.slanguagetypecode] ? /*#__PURE__*/React.createElement(AddTestGroupTest, {\n        genericLabel: this.props.Login.genericLabel,\n        userInfo: this.props.Login.userInfo,\n        selectedRecord: this.state.selectedRecord || {},\n        testGroupInputData: this.props.Login.testGroupInputData,\n        screenName: this.props.Login.screenName,\n        onComboChange: this.onComboChange,\n        onFilterComboChange: this.onFilterComboChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 881,\n          columnNumber: 37\n        }\n      }) : this.props.Login.screenName === \"IDS_SUBCODERESULT\" ? /*#__PURE__*/React.createElement(ViewSubCodedResult, {\n        selectedRecord: this.state.selectedsubcoderesult || {},\n        selectedsubcoderesult: this.props.Login.selectedsubcoderesult || [],\n        screenName: this.props.Login.screenName,\n        onComboChange: this.onComboChange,\n        onFilterComboChange: this.onFilterComboChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 893,\n          columnNumber: 37\n        }\n      }) : this.props.Login.screenName === \"IDS_PROFILETREE\" ? /*#__PURE__*/React.createElement(AddProfileTree, {\n        selectedRecord: this.state.selectedRecord || {},\n        onInputOnChange: this.onInputOnChange,\n        treetempTranstestGroup: this.props.Login.TreetempTranstestGroup,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 902,\n          columnNumber: 41\n        }\n      }) : this.props.Login.screenName === \"IDS_SPECFILE\" ? /*#__PURE__*/React.createElement(AddFile, {\n        selectedRecord: this.state.selectedRecord || {},\n        onInputOnChange: this.onInputOnChange,\n        actionType: this.state.actionType,\n        onDrop: this.onDropSpecFile,\n        deleteAttachment: this.deleteAttachment,\n        linkMaster: this.props.Login.linkMaster,\n        editFiles: this.props.Login.editFiles,\n        maxSize: 20,\n        maxFiles: this.props.Login.operation === \"update\" ? 1 : 1,\n        multiple: this.props.Login.operation === \"update\" ? false : true,\n        label: this.props.intl.formatMessage({\n          id: \"IDS_SPECFILE\"\n        }),\n        hideDefaultToggle: true,\n        name: \"specfilename\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 908,\n          columnNumber: 45\n        }\n      }) : this.props.Login.screenName === \"IDS_EDITTREE\" ? /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 924,\n          columnNumber: 49\n        }\n      }, /*#__PURE__*/React.createElement(Col, {\n        md: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 925,\n          columnNumber: 53\n        }\n      }, /*#__PURE__*/React.createElement(FormInput, {\n        name: \"sleveldescription\",\n        label: this.state.selectedRecord.slabelname,\n        type: \"text\",\n        onChange: event => this.onInputOnChange(event, 1),\n        placeholder: this.state.selectedRecord.slabelname,\n        value: this.state.selectedRecord ? this.state.selectedRecord[\"sleveldescription\"] : \"\",\n        isMandatory: \"*\",\n        required: true,\n        maxLength: 100,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 926,\n          columnNumber: 57\n        }\n      }))) : this.props.Login.screenName === \"IDS_TEST\" ? /*#__PURE__*/React.createElement(AddTestGroupTest, {\n        genericLabel: this.props.Login.genericLabel,\n        userInfo: this.props.Login.userInfo,\n        selectedRecord: this.state.selectedRecord || {},\n        testGroupInputData: this.props.Login.testGroupInputData,\n        screenName: this.props.Login.screenName,\n        onComboChange: this.onComboChange,\n        onFilterComboChange: this.onFilterComboChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 940,\n          columnNumber: 53\n        }\n      }) : this.props.Login.screenName === \"IDS_EDITTESTGROUPTEST\" ? /*#__PURE__*/React.createElement(EditTestGroupTest, {\n        selectedRecord: this.state.selectedRecord || {},\n        testGroupInputData: this.props.Login.testGroupInputData,\n        onComboChange: this.onComboChange,\n        onInputOnChange: this.onInputOnChange,\n        onNumericInputChange: this.onNumericInputChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 949,\n          columnNumber: 57\n        }\n      }) : this.props.Login.screenName === \"IDS_VIEWRULE\" ? /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 956,\n          columnNumber: 61\n        }\n      }, /*#__PURE__*/React.createElement(Col, {\n        md: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 957,\n          columnNumber: 65\n        }\n      }, /*#__PURE__*/React.createElement(OrgTree, {\n        data: this.ruleflowobject(),\n        horizontal: true,\n        collapsable: true,\n        expandAll: true,\n        labelClassName: \"ruletree\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 958,\n          columnNumber: 69\n        }\n      }))) : this.props.Login.screenName === \"IDS_VIEWOUTCOME\" ? /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 969,\n          columnNumber: 61\n        }\n      }, /*#__PURE__*/React.createElement(Col, {\n        md: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 970,\n          columnNumber: 65\n        }\n      }, this.props.Login.masterData.SelectedRulesEngine && /*#__PURE__*/React.createElement(CustomTab, {\n        tabDetail: this.tabDetailRulesEngine(),\n        onTabChange: this.onTabChangeRulesEngine,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 972,\n          columnNumber: 65\n        }\n      }))) : \"\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 836,\n        columnNumber: 21\n      }\n    }), this.props.Login.openPortalModal && /*#__PURE__*/React.createElement(PortalModalSlideout, {\n      show: this.props.Login.openPortalModal,\n      closeModal: this.closePortalModal,\n      screenName: this.props.intl.formatMessage({\n        id: this.props.Login.screenName\n      }) + \" - \" + this.props.Login.masterData.SelectedTest.stestsynonym,\n      handleSaveClick: this.save,\n      addComponent: (this.props.Login.operation === 'update' ? this.state.selectedRecord['groupList'] : true) && /*#__PURE__*/React.createElement(AddTestGroupRule, {\n        productCategoryList: this.state.ProductCategoryList || [],\n        selectedRecord: this.state.selectedRecord || {},\n        databaseTableList: this.props.Login.databaseTableList,\n        tableColumnList: this.state.tableColumnList,\n        specificationOptions: this.state.TestGroupSpecificationList || [],\n        componentOptions: this.state.ComponentList || [],\n        foreignTableList: this.state.foreignTableList || [],\n        foreignTableColumnList: this.props.Login.foreignTableColumnList || [],\n        count: this.state.count,\n        foreignTableCount: this.state.foreignTableCount,\n        sqlQuery: this.state.sqlQuery,\n        userInfo: this.props.Login.userInfo,\n        onInputChange: this.onInputChange,\n        deleteRule: this.deleteRule,\n        clearRule: this.clearRule,\n        resetRule: this.resetRule,\n        onSymbolChange: this.onSymbolChange,\n        onRuleChange: this.onRuleChange,\n        addRule: this.addRule,\n        addTest: this.addTest,\n        onConditionClick: this.onConditionClick,\n        onMasterDataChange: this.onMasterDataChange,\n        databaseviewList: this.props.Login.databaseviewList,\n        addRuleList: this.props.Login.addRuleList || [],\n        rulesOption: this.props.Login.masterData.rulesOption && this.props.Login.masterData.rulesOption.filter(this.outComeTestsRemoveFromRules),\n        masterdata: this.props.Login.masterdata,\n        switchRecord: this.state.switchRecord,\n        data: this.state.data,\n        dataResult: this.state.dataResult || [],\n        dataState: this.state.dataState,\n        dataStateChange: this.dataStateChange,\n        userRoleControlRights: this.state.userRoleControlRights,\n        gridColumnList: this.props.Login.gridColumnList || [],\n        queryType: this.state.queryType,\n        addAggregateList: this.props.Login.addAggregateList || [],\n        addOrderbyList: this.props.Login.addOrderbyList || [],\n        addGroup: this.addGroup,\n        addGroupList: this.props.Login.addGroupList || [],\n        onFilterComboChange: this.onFilterComboChange,\n        selectFields: this.props.Login.selectFields || [],\n        SelectedProductCategory: this.props.Login.masterData.SelectedProductCategory,\n        DiagnosticCaseList: this.props.Login.masterData.DiagnosticCaseList,\n        GradeList: this.props.Login.masterData.GradeList,\n        PredefinedParameterOptions: this.props.Login.masterData.PredefinedParameterOptions,\n        siteList: this.props.Login.masterData.siteList,\n        resultTypeList: this.props.Login.masterData.resultTypeList,\n        isResultorOrderType: this.state.isResultorOrderType,\n        optionsByRule: this.state.optionsByRule || this.props.Login.masterData.DiagnosticCaseList,\n        changePropertyView: this.changePropertyView,\n        splitChangeWidthPercentage: this.state.splitChangeWidthPercentage,\n        activeTabIndex: this.props.Login.activeTabIndex,\n        enablePropertyPopup: this.state.enablePropertyPopup,\n        propertyPopupWidth: this.state.propertyPopupWidth,\n        controlMap: this.state.controlMap,\n        sectionDataState: this.state.sectionDataState,\n        masterData: this.props.Login.masterData,\n        intl: this.props.intl,\n        addOutcomeList: this.props.Login.addOutcomeList && this.props.Login.addOutcomeList || [],\n        deleteOutcome: this.deleteOutcome,\n        onmodalComboChange: this.onmodalComboChange,\n        openModalPopup: this.props.Login.openModalPopup,\n        closeModalShow: this.closeModalShow,\n        modalsaveClick: this.modalsaveClick,\n        getOutcomeDetails: this.getOutcomeDetails,\n        addModalSite: this.addModalSite,\n        action: this.props.Login.action,\n        deletModalSite: this.deletModalSite,\n        deleteModalTest: this.deleteModalTest,\n        activeTestTab: this.props.Login.activeTestTab,\n        testcomments: this.props.Login.testcomments,\n        reportcomments: this.props.Login.reportcomments,\n        addComments: this.addComments,\n        CommentType: this.props.Login.CommentType,\n        CommentSubType: this.props.Login.CommentSubType,\n        isneedsgeneralcomments: this.state.isneedsgeneralcomments,\n        predefcomments: this.props.Login.predefcomments,\n        needoutsource: this.state.selectedRecord['needoutsource'] && this.state.selectedRecord['needoutsource'] === 3 ? true : false,\n        openmodalsavePopup: this.props.Login.openmodalsavePopup,\n        save: this.save,\n        dataStateObject: this.state.dataStateObject,\n        paneSizeChange: this.paneSizeChange,\n        testInitiateTestCombo: this.props.Login.testInitiateTestCombo && this.viewColumnListByRule(this.props.Login.testInitiateTestCombo),\n        testCommentsTestCombo: this.props.Login.testCommentsTestCombo && this.viewColumnListByRule(this.props.Login.testCommentsTestCombo),\n        testRepeatTestCombo: this.props.Login.testRepeatTestCombo && this.viewColumnListByRule(this.props.Login.testRepeatTestCombo),\n        testenforceTestCombo: this.props.Login.testenforceTestCombo && this.props.Login.testenforceTestCombo,\n        dataStateChangetestRepeat: this.dataStateChangetestRepeat,\n        dataStateChangetestEnforce: this.dataStateChangetestEnforce,\n        dataStatetestEnforce: this.state.dataStatetestEnforce,\n        dataStatetestRepeat: this.state.dataStatetestRepeat,\n        testGroupTestParameterRulesEngine: this.props.Login.masterData.testGroupTestParameterRulesEngine,\n        onRuleInputChange: this.onRuleInputChange,\n        onRuleNumericInputOnChange: this.onRuleNumericInputOnChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 987,\n          columnNumber: 29\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 980,\n        columnNumber: 21\n      }\n    }));\n  }\n\n  findMandatoryFields(screenName, selectedRecord) {\n    let mandyFields = [];\n\n    if (screenName === \"IDS_SPECFILE\") {\n      if (selectedRecord && selectedRecord.nattachmenttypecode === attachmentType.LINK) {\n        mandyFields = [{\n          \"idsName\": \"IDS_FILENAME\",\n          \"dataField\": \"slinkfilename\",\n          \"mandatory\": true,\n          \"mandatoryLabel\": \"IDS_CHOOSE\",\n          \"controlType\": \"file\"\n        }, {\n          \"idsName\": \"IDS_LINKNAME\",\n          \"dataField\": \"nlinkcode\",\n          \"mandatory\": true,\n          \"mandatoryLabel\": \"IDS_SELECT\",\n          \"controlType\": \"selectbox\"\n        }];\n      } else {\n        //if (this.props.Login.operation === 'update') {\n        mandyFields = [{\n          \"idsName\": \"IDS_FILE\",\n          \"dataField\": \"sfilename\",\n          \"mandatory\": true,\n          \"mandatoryLabel\": \"IDS_CHOOSE\",\n          \"controlType\": \"file\"\n        }]; // }\n      }\n    } else {\n      return [];\n    }\n\n    let finalMandyFields = [];\n    mandyFields.forEach(item => item.mandatory === true && finalMandyFields.push(item));\n    return finalMandyFields;\n  }\n\n  showSpecAndTestInfo() {\n    this.setState({\n      showTest: !this.state.showTest,\n      testView: false\n    });\n    this.updateSpiltterLayout();\n  }\n\n  showSpecAndTestInfo1() {\n    this.setState({\n      showTest: !this.state.showTest,\n      testView: true\n    }); //this.updateSpiltterLayout()\n  }\n\n  //Rules Engine Functions Start\n  ruleflowobject() {\n    let object = {};\n    const labelColor = ['#e63109', '#2fb47d', '#eaa203', '#6554c0'];\n    const labelBGColor = ['#fcd7cd', '#e5f8f1', '#fcf3dd', '#e7e6f5'];\n    const borderColor = ['#e6310', '#c6f6e4', '#fde2a4', '#cbc5f7'];\n    let groupList = this.props.Login.masterData.SelectedRulesEngine['jsondata'];\n    let groupListJoins = this.props.Login.masterData.SelectedRulesEngine['jsonuidata'] && this.props.Login.masterData.SelectedRulesEngine['jsonuidata']['groupListJoins'];\n    let children = [];\n    let parent = [];\n    let grandparent = [];\n    groupList.map((groupobject, index) => {\n      if (groupobject.hasOwnProperty('button_or')) {\n        children = [];\n        let rulesList = groupobject['button_or'];\n        rulesList.map((rule, index) => {\n          children.push({\n            id: index,\n            label: /*#__PURE__*/React.createElement(React.Fragment, null, rule['stestname'].label + \" -> \" + rule['orderresulttype'].label + \" -> \" + rule['ssymbolname'].label + \" -> \" + (rule['ndiagnosticcasecode'] && rule['ndiagnosticcasecode'].label || rule['ngradecode'] && rule['ngradecode'].label || rule['ntestgrouptestnumericcode'] && rule['ntestgrouptestnumericcode'] || rule['ntestgrouptestcharcode'] && rule['ntestgrouptestcharcode'] || rule['ntestgrouptestpredefcode'] && rule['ntestgrouptestpredefcode'].label))\n          });\n        });\n\n        if (groupList.length === 1 ? rulesList.length > 1 : true) {\n          parent.push({\n            id: index,\n            label: /*#__PURE__*/React.createElement(\"div\", {\n              className: \"btn btn-primary\",\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 1498,\n                columnNumber: 50\n              }\n            }, this.props.intl.formatMessage({\n              id: \"IDS_OR\"\n            })),\n            children: children\n          });\n        }\n      }\n\n      if (groupobject.hasOwnProperty('button_and')) {\n        children = [];\n        let rulesList = groupobject['button_and'];\n        rulesList.map((rule, index) => {\n          children.push({\n            id: index,\n            label: /*#__PURE__*/React.createElement(React.Fragment, null, rule['stestname'].label + \" -> \" + rule['orderresulttype'].label + \" -> \" + rule['ssymbolname'].label + \" -> \" + (rule['ndiagnosticcasecode'] && rule['ndiagnosticcasecode'].label || rule['ngradecode'] && rule['ngradecode'].label || rule['ntestgrouptestnumericcode'] && rule['ntestgrouptestnumericcode'] || rule['ntestgrouptestcharcode'] && rule['ntestgrouptestcharcode'] || rule['ntestgrouptestpredefcode'] && rule['ntestgrouptestpredefcode'].label))\n          });\n        });\n\n        if (groupList.length === 1 ? rulesList.length > 1 : true) {\n          parent.push({\n            id: index,\n            label: /*#__PURE__*/React.createElement(\"div\", {\n              className: \"btn btn-primary\",\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 1522,\n                columnNumber: 49\n              }\n            }, this.props.intl.formatMessage({\n              id: \"IDS_AND\"\n            })),\n            children: children\n          });\n        }\n      }\n\n      if (groupobject.hasOwnProperty('button_not_button_and')) {\n        children = [];\n        let rulesList = groupobject['button_not_button_and'];\n        rulesList.map((rule, index) => {\n          children.push({\n            id: index,\n            label: /*#__PURE__*/React.createElement(React.Fragment, null, rule['stestname'].label + \" -> \" + rule['orderresulttype'].label + \" -> \" + rule['ssymbolname'].label + \" -> \" + (rule['ndiagnosticcasecode'] && rule['ndiagnosticcasecode'].label || rule['ngradecode'] && rule['ngradecode'].label || rule['ntestgrouptestnumericcode'] && rule['ntestgrouptestnumericcode'] || rule['ntestgrouptestcharcode'] && rule['ntestgrouptestcharcode'] || rule['ntestgrouptestpredefcode'] && rule['ntestgrouptestpredefcode'].label))\n          });\n        });\n        let notarray = [{\n          id: index,\n          label: /*#__PURE__*/React.createElement(\"div\", {\n            className: \"btn btn-primary\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 1542,\n              columnNumber: 53\n            }\n          }, this.props.intl.formatMessage({\n            id: \"IDS_AND\"\n          })),\n          children: children\n        }];\n\n        if (groupList.length === 1 ? rulesList.length > 1 : true) {\n          parent.push({\n            id: index,\n            label: /*#__PURE__*/React.createElement(\"div\", {\n              className: \"btn btn-primary\",\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 1544,\n                columnNumber: 49\n              }\n            }, this.props.intl.formatMessage({\n              id: \"IDS_NOT\"\n            })),\n            children: notarray\n          });\n        }\n      }\n\n      if (groupobject.hasOwnProperty('button_not_button_or')) {\n        children = [];\n        let rulesList = groupobject['button_not_button_or'];\n        rulesList.map((rule, index) => {\n          children.push({\n            id: index,\n            label: /*#__PURE__*/React.createElement(React.Fragment, null, rule['stestname'].label + \" -> \" + rule['orderresulttype'].label + \" -> \" + rule['ssymbolname'].label + \" -> \" + (rule['ndiagnosticcasecode'] && rule['ndiagnosticcasecode'].label || rule['ngradecode'] && rule['ngradecode'].label || rule['ntestgrouptestnumericcode'] && rule['ntestgrouptestnumericcode'] || rule['ntestgrouptestcharcode'] && rule['ntestgrouptestcharcode'] || rule['ntestgrouptestpredefcode'] && rule['ntestgrouptestpredefcode'].label))\n          });\n        });\n        let notarray = [{\n          id: index,\n          label: /*#__PURE__*/React.createElement(\"div\", {\n            className: \"btn btn-primary\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 1564,\n              columnNumber: 53\n            }\n          }, this.props.intl.formatMessage({\n            id: \"IDS_OR\"\n          })),\n          children: children\n        }];\n\n        if (groupList.length === 1 ? rulesList.length > 1 : true) {\n          parent.push({\n            id: index,\n            label: /*#__PURE__*/React.createElement(\"div\", {\n              className: \"btn btn-primary\",\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 1566,\n                columnNumber: 49\n              }\n            }, this.props.intl.formatMessage({\n              id: \"IDS_NOT\"\n            })),\n            children: notarray\n          });\n        }\n      }\n    });\n\n    if (groupListJoins !== undefined) {\n      groupListJoins.map((join, index) => {\n        let parentjoins = [];\n\n        if (join.hasOwnProperty('button_or') && join['button_or'] === true) {\n          let notarray = [];\n          parentjoins.push(parent[index]);\n          parentjoins.push(parent[index + 1]);\n\n          if (join.hasOwnProperty('button_not') && join['button_not'] === true) {\n            notarray = [{\n              id: index,\n              label: /*#__PURE__*/React.createElement(\"div\", {\n                className: \"btn btn-primary\",\n                __self: this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 1580,\n                  columnNumber: 47\n                }\n              }, this.props.intl.formatMessage({\n                id: \"IDS_OR\"\n              }), \" \") // 'button_or'\n              ,\n              children: parentjoins\n            }];\n            grandparent.push({\n              id: index,\n              label: /*#__PURE__*/React.createElement(\"div\", {\n                className: \"btn btn-primary\",\n                __self: this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 1585,\n                  columnNumber: 47\n                }\n              }, this.props.intl.formatMessage({\n                id: \"IDS_NOT\"\n              }), \" \") // 'button_or'\n              ,\n              children: notarray\n            });\n          } else {\n            grandparent.push({\n              id: index,\n              label: /*#__PURE__*/React.createElement(\"div\", {\n                className: \"btn btn-primary\",\n                __self: this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 1592,\n                  columnNumber: 47\n                }\n              }, this.props.intl.formatMessage({\n                id: \"IDS_OR\"\n              }), \" \") // 'button_or'\n              ,\n              children: parentjoins\n            });\n          }\n        }\n\n        if (join.hasOwnProperty('button_and') && join['button_and'] === true) {\n          let notarray = [];\n          parentjoins.push(parent[index]);\n          parentjoins.push(parent[index + 1]);\n\n          if (join.hasOwnProperty('button_not') && join['button_not'] === true) {\n            notarray = [{\n              id: index,\n              label: /*#__PURE__*/React.createElement(\"div\", {\n                className: \"btn btn-primary\",\n                __self: this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 1604,\n                  columnNumber: 47\n                }\n              }, this.props.intl.formatMessage({\n                id: \"IDS_AND\"\n              }), \" \") // 'button_or'\n              ,\n              children: parentjoins\n            }];\n            grandparent.push({\n              id: index,\n              label: /*#__PURE__*/React.createElement(\"div\", {\n                className: \"btn btn-primary\",\n                __self: this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 1609,\n                  columnNumber: 47\n                }\n              }, this.props.intl.formatMessage({\n                id: \"IDS_NOT\"\n              }), \" \") // 'button_or'\n              ,\n              children: notarray\n            });\n          } else {\n            grandparent.push({\n              id: index,\n              label: /*#__PURE__*/React.createElement(\"div\", {\n                className: \"btn btn-primary\",\n                __self: this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 1616,\n                  columnNumber: 47\n                }\n              }, this.props.intl.formatMessage({\n                id: \"IDS_AND\"\n              })) // 'button_and'\n              ,\n              children: parentjoins\n            });\n          }\n        }\n      });\n    }\n\n    object = grandparent.length > 0 ? {\n      id: 0,\n      label: /*#__PURE__*/React.createElement(\"div\", {\n        className: \"btn btn-primary\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1627,\n          columnNumber: 24\n        }\n      }, this.props.Login.masterData.SelectedRulesEngine.srulename, \" \"),\n      children: grandparent\n    } : {\n      id: 0,\n      label: /*#__PURE__*/React.createElement(\"div\", {\n        className: \"btn btn-primary\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1632,\n          columnNumber: 24\n        }\n      }, this.props.Login.masterData.SelectedRulesEngine.srulename, \" \"),\n      children: parent.length !== 0 ? parent : children\n    };\n    return object;\n  }\n\n  handleClickDelete(masterData, ncontrolcode //, modalName\n  ) {\n    const fieldArray = [];\n    const inputParam = {\n      methodUrl: \"TestGroupRulesEngine\",\n      classUrl: \"testgrouprulesengine\",\n      inputData: {\n        \"ntestgrouptestcode\": this.props.Login.masterData.SelectedTest.ntestgrouptestcode,\n        \"ntestgrouprulesenginecode\": this.props.Login.masterData.SelectedRulesEngine.ntestgrouprulesenginecode,\n        \"userinfo\": this.props.Login.userInfo\n      },\n      operation: \"delete\",\n      //postParam,\n      displayName: \"RulesEngine\"\n    };\n\n    if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, ncontrolcode)) {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          loadEsign: true,\n          screenData: {\n            inputParam,\n            masterData\n          },\n          // [modalName]: true,\n          operation: 'delete',\n          screenName: \"IDS_RULESENGINE\",\n          id: \"RulesEngine\"\n        }\n      };\n      this.props.updateStore(updateInfo);\n    } else {\n      this.props.crudMaster(inputParam, masterData, undefined);\n    }\n  }\n\n  approveVersion(masterData, nflag, ncontrolcode //, modalName\n  ) {\n    if (masterData['RulesEngine'] && masterData['RulesEngine'].length > 0) {\n      const fieldArray = [];\n      const inputParam = {\n        methodUrl: \"TestGroupRulesEngine\",\n        classUrl: \"testgrouprulesengine\",\n        inputData: {\n          \"ntestgrouptestcode\": this.props.Login.masterData.SelectedTest.ntestgrouptestcode,\n          \"ntestgrouprulesenginecode\": this.props.Login.masterData.SelectedRulesEngine.ntestgrouprulesenginecode,\n          \"userinfo\": this.props.Login.userInfo,\n          nflag: nflag\n        },\n        operation: \"approve\",\n        //postParam,\n        displayName: \"RulesEngine\"\n      };\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, ncontrolcode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData\n            },\n            // [modalName]: true,\n            operation: 'delete',\n            screenName: \"IDS_RULESENGINE\",\n            id: \"RulesEngine\"\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, masterData, undefined);\n      }\n    } else {\n      if (nflag == 1) {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTRULETOAPPROVE\"\n        }));\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTRULETORETIRE\"\n        }));\n      }\n    }\n  }\n\n  clearSelectedRule(selectedRecord, index) {\n    selectedRecord[\"sinputname_\" + index] && delete selectedRecord[\"sinputname_\" + index];\n    selectedRecord[\"ssymbolname_\" + index] && delete selectedRecord[\"ssymbolname_\" + index];\n    selectedRecord[\"snumericinput_\" + index] && delete selectedRecord[\"snumericinput_\" + index];\n    selectedRecord[\"columnname_\" + index] && delete selectedRecord[\"columnname_\" + index];\n    selectedRecord[\"snumericinputtwo_\" + index] && delete selectedRecord[\"snumericinputtwo_\" + index];\n    selectedRecord[\"dateinput_\" + index] && delete selectedRecord[\"dateinput_\" + index];\n    selectedRecord[\"dateinputtwo_\" + index] && delete selectedRecord[\"dateinputtwo_\" + index];\n  }\n\n  generateBreadCrumData(filterData) {\n    if (filterData && Object.values(filterData).length > 0 && filterData.nsampletypecode && filterData.nsampletypecode.item) {\n      // if (filterData.nsampletypecode && filterData.nproductcatcode \n      //     && filterData.nproductcatcode.item.ncategorybasedflow === transactionStatus.YES \n      //     && filterData.nsampletypecode.item.ncategorybasedflowrequired == transactionStatus.NO) \n      if (filterData.nsampletypecode && filterData.nsampletypecode.item.ncategorybasedflowrequired == transactionStatus.YES ? true : filterData.nproductcatcode && filterData.nproductcatcode.item.ncategorybasedflow === transactionStatus.YES ? true : false) {\n        this.breadCrumbData = [{\n          \"label\": \"IDS_SAMPLETYPE\",\n          \"value\": filterData.nsampletypecode ? filterData.nsampletypecode.label : \"\"\n        }, {\n          \"label\": filterData.nsampletypecode.item.nformcode === formCode.PRODUCTCATEGORY ? this.props.Login.genericLabel && this.props.Login.genericLabel[\"ProductCategory\"][\"jsondata\"][\"sdisplayname\"][this.props.Login.userInfo.slanguagetypecode] : filterData.nsampletypecode.item.nformcode === formCode.INSTRUMENTCATEGORY ? \"IDS_INSTRUMENTCATEGORY\" : filterData.nsampletypecode.item.nformcode === formCode.MATERIALCATEGORY ? \"IDS_MATERIALCATEGORY\" : \"\",\n          \"value\": filterData.nproductcatcode ? filterData.nproductcatcode.label : \"\"\n        }, {\n          \"label\": \"IDS_TREETEMPLATEVERSION\",\n          \"value\": filterData.ntreeversiontempcode ? filterData.ntreeversiontempcode.label : \"\"\n        }];\n\n        if (filterData.nsampletypecode.value === SampleType.PROJECTSAMPLETYPE) {\n          if (filterData.nsampletypecode.item.nprojectspecrequired === transactionStatus.YES) {\n            this.breadCrumbData.push({\n              \"label\": \"IDS_PROJECTTYPE\",\n              \"value\": filterData.nprojecttypecode ? filterData.nprojecttypecode.label : \"\"\n            }, {\n              \"label\": \"IDS_PROJECT\",\n              \"value\": filterData.nprojectmastercode ? filterData.nprojectmastercode.label : \"\"\n            });\n          }\n        }\n      } else {\n        this.breadCrumbData = [{\n          \"label\": \"IDS_SAMPLETYPE\",\n          \"value\": filterData.nsampletypecode ? filterData.nsampletypecode.label : \"\"\n        }, {\n          \"label\": filterData.nsampletypecode.item.nformcode === formCode.PRODUCTCATEGORY ? this.props.Login.genericLabel && this.props.Login.genericLabel[\"ProductCategory\"][\"jsondata\"][\"sdisplayname\"][this.props.Login.userInfo.slanguagetypecode] : filterData.nsampletypecode.item.nformcode === formCode.INSTRUMENTCATEGORY ? \"IDS_INSTRUMENTCATEGORY\" : filterData.nsampletypecode.item.nformcode === formCode.MATERIALCATEGORY ? \"IDS_MATERIALCATEGORY\" : \"\",\n          \"value\": filterData.nproductcatcode ? filterData.nproductcatcode.label : \"\"\n        }, {\n          \"label\": filterData.nsampletypecode.item.nformcode === formCode.PRODUCTCATEGORY ? this.props.Login.genericLabel && this.props.Login.genericLabel[\"Product\"][\"jsondata\"][\"sdisplayname\"][this.props.Login.userInfo.slanguagetypecode] : filterData.nsampletypecode.item.nformcode === formCode.INSTRUMENTCATEGORY ? \"IDS_INSTRUMENT\" : filterData.nsampletypecode.item.nformcode === formCode.MATERIALCATEGORY ? \"IDS_MATERIAL\" : \"\",\n          \"value\": filterData.nproductcode ? filterData.nproductcode.label : \"\"\n        }, {\n          \"label\": \"IDS_TREETEMPLATEVERSION\",\n          \"value\": filterData.ntreeversiontempcode ? filterData.ntreeversiontempcode.label : \"\"\n        }];\n\n        if (filterData.nsampletypecode.value === SampleType.PROJECTSAMPLETYPE) {\n          if (filterData.nsampletypecode.item.nprojectspecrequired === transactionStatus.YES) {\n            this.breadCrumbData.push({\n              \"label\": \"IDS_PROJECTTYPE\",\n              \"value\": filterData.nprojecttypecode ? filterData.nprojecttypecode.label : \"\"\n            }, {\n              \"label\": \"IDS_PROJECT\",\n              \"value\": filterData.nprojectmastercode ? filterData.nprojectmastercode.label : \"\"\n            });\n          }\n        }\n      }\n    } else {\n      this.breadCrumbData = [{\n        \"label\": \"IDS_SAMPLETYPE\",\n        \"value\": filterData && filterData.nsampletypecode ? filterData.nsampletypecode.label : \"\"\n      }];\n    }\n  }\n\n  updateSpiltterLayout() {\n    if (this.myRef && this.myRef.current && this.myRef.current.clientHeight + 20 !== this.state.fixefScrollHeight) {\n      this.setState({\n        fixefScrollHeight: this.myRef.current.clientHeight + 20,\n        disableSplit: true\n      }); //console.log(this.myRef.current.clientHeight)\n\n      setTimeout(() => {\n        this.setState({\n          disableSplit: false\n        });\n      });\n    }\n  }\n\n  componentDidUpdate(previousProps, previousState) {\n    let selectedRecord = this.state.selectedRecord;\n    let selectedsubcodedresult = this.state.selectedsubcodedresult;\n    let selectsubcodedelete = this.state.selectsubcodedelete;\n    let filterData = this.state.filterData || {};\n    let isStateChanged = false;\n    let activeTabIndex = this.props.Login.activeTabIndex || 0;\n    let activeTabId = this.props.Login.activeTabId || false;\n    this.updateSpiltterLayout();\n    let tempFilterData = this.state.tempFilterData || {};\n\n    if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\n      selectedRecord = this.props.Login.selectedRecord;\n      isStateChanged = true;\n    }\n\n    if (this.props.Login.selectedsubcodedresult !== previousProps.Login.selectedsubcodedresult) {\n      selectedsubcodedresult = this.props.Login.selectedsubcodedresult; //selectedsubcodedresult = this.state.selectedsubcodedresult;\n\n      isStateChanged = true;\n    }\n\n    if (this.props.Login.selectsubcodedelete !== previousProps.Login.selectsubcodedelete) {\n      selectsubcodedelete = this.props.Login.selectsubcodedelete; //selectedsubcodedresult = this.state.selectedsubcodedresult;\n\n      isStateChanged = true;\n    }\n\n    if (this.props.Login.activeTabIndex !== previousProps.Login.activeTabIndex || this.props.Login.masterData !== previousProps.Login.masterData) {\n      if (this.props.Login.activeTabIndex !== previousProps.Login.activeTabIndex) {\n        activeTabIndex = this.props.Login.activeTabIndex;\n        activeTabId = this.props.Login.activeTabId;\n        isStateChanged = true; // this.setState({\n        //     activeTabIndex,\n        //     activeTabId\n        // });\n      }\n    }\n\n    if (this.props.Login.tempFilterData !== previousProps.Login.tempFilterData) {\n      tempFilterData = this.props.Login.tempFilterData || {};\n      isStateChanged = true;\n    }\n\n    let sampleType = this.state.sampleType || [];\n\n    if (this.props.Login.masterData.SampleType !== previousProps.Login.masterData.SampleType) {\n      const sampleTypeMap = constructOptionList(this.props.Login.masterData.SampleType || [], \"nsampletypecode\", \"ssampletypename\", \"nsorter\", \"ascending\", false);\n      sampleType = sampleTypeMap.get(\"OptionList\");\n      tempFilterData[\"nsampletypecode\"] = sampleType.length ? sampleType[0] : \"\";\n      isStateChanged = true;\n    }\n\n    let productCategory = this.state.productCategory || [];\n\n    if (this.props.Login.masterData.ProductCategory !== previousProps.Login.masterData.ProductCategory) {\n      const productCatMap = constructOptionList(this.props.Login.masterData.ProductCategory || [], \"nproductcatcode\", \"sproductcatname\", \"nproductcatcode\", \"ascending\", false);\n      productCategory = productCatMap.get(\"OptionList\");\n      tempFilterData[\"nproductcatcode\"] = productCategory.length > 0 ? productCategory[0] : \"\";\n      isStateChanged = true;\n    }\n\n    let product = this.state.product || [];\n\n    if (this.props.Login.masterData.Product !== previousProps.Login.masterData.Product) {\n      const productMap = constructOptionList(this.props.Login.masterData.Product || [], \"nproductcode\", \"sproductname\", \"nproductcode\", \"ascending\", false);\n      product = productMap.get(\"OptionList\");\n      tempFilterData[\"nproductcode\"] = product.length > 0 ? product[0] : undefined;\n      isStateChanged = true;\n    }\n\n    let projectType = this.state.projectType || [];\n\n    if (this.props.Login.masterData.ProjectTypeList !== previousProps.Login.masterData.ProjectTypeList) {\n      const projectTypeMap = constructOptionList(this.props.Login.masterData.ProjectTypeList || [], \"nprojecttypecode\", \"sprojecttypename\", \"nprojecttypecode\", \"ascending\", false);\n      projectType = projectTypeMap.get(\"OptionList\");\n      tempFilterData[\"nprojecttypecode\"] = projectType.length > 0 ? projectType[0] : undefined;\n      isStateChanged = true;\n    }\n\n    let project = this.state.project || [];\n\n    if (this.props.Login.masterData.ProjectMasterList !== previousProps.Login.masterData.ProjectMasterList) {\n      const projectMasterMap = constructOptionList(this.props.Login.masterData.ProjectMasterList || [], \"nprojectmastercode\", \"sprojectcode\", \"nprojectmastercode\", \"ascending\", false);\n      project = projectMasterMap.get(\"OptionList\");\n      tempFilterData[\"nprojectmastercode\"] = project.length > 0 ? project[0] : undefined;\n      isStateChanged = true;\n    }\n\n    let treeVersionTemplate = this.state.treeVersionTemplate || [];\n\n    if (this.props.Login.masterData.TreeVersionTemplate !== previousProps.Login.masterData.TreeVersionTemplate) {\n      const templateMap = constructOptionList(this.props.Login.masterData.TreeVersionTemplate || [], \"ntreeversiontempcode\", \"sversiondescription\", \"ntreeversiontempcode\", \"ascending\", false);\n      treeVersionTemplate = templateMap.get(\"OptionList\");\n      tempFilterData[\"ntreeversiontempcode\"] = treeVersionTemplate.length > 0 ? treeVersionTemplate[treeVersionTemplate.length - 1] : \"\";\n      isStateChanged = true;\n    } // if (this.props.Login.masterData.TestGroupTestParameter && this.props.Login.masterData.TestGroupTestParameter !== previousProps.Login.masterData.TestGroupTestParameter) {\n    //     sortData(this.props.Login.masterData.TestGroupTestParameter, \"ascending\", \"nsorter\");\n    // }\n    // if (this.props.Login.masterData.TestGroupTesT && this.props.Login.masterData.TestGroupTesT !== previousProps.Login.masterData.TestGroupTesT) {\n    //     sortData(this.props.Login.masterData.TestGroupTesTest, \"ascending\", \"nsorter\");\n    // }\n\n\n    let userRoleControlRights = this.state.userRoleControlRights || [];\n    let controlMap = this.state.controlMap || [];\n\n    if (this.props.Login.userInfo && this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\n      const nformCode = this.props.Login.userInfo.nformcode;\n\n      if (this.props.Login.userRoleControlRights) {\n        this.props.Login.userRoleControlRights[nformCode] && Object.values(this.props.Login.userRoleControlRights[nformCode]).map(item => userRoleControlRights.push(item.ncontrolcode));\n      }\n\n      controlMap = getControlMap(this.props.Login.userRoleControlRights, nformCode);\n      filterData = { ...tempFilterData\n      };\n      this.generateBreadCrumData(filterData);\n    }\n\n    if (this.props.Login.filterData !== previousProps.Login.filterData) {\n      filterData = { ...this.props.Login.filterData\n      };\n      this.generateBreadCrumData(filterData);\n      isStateChanged = true;\n    } else {\n      this.generateBreadCrumData(filterData);\n    } // else if (filterData !== previousState.filterData) {\n    //     filterData = { ...tempFilterData };\n    //     this.generateBreadCrumData(filterData);\n    // }\n\n\n    let historyDataState = this.state.historyDataState;\n\n    if (this.props.Login.historyDataState && this.props.Login.historyDataState !== previousProps.Login.historyDataState) {\n      historyDataState = this.props.Login.historyDataState;\n      isStateChanged = true;\n    }\n\n    let {\n      testskip,\n      testtake\n    } = this.state;\n\n    if (this.props.Login.masterData !== previousProps.Login.masterData) {\n      testskip = this.props.Login.testskip === undefined ? testskip : this.props.Login.testskip;\n      testtake = testtake ? testtake : this.props.Login.testtake;\n      isStateChanged = true;\n    }\n\n    let {\n      skipRulesEngine,\n      takeRulesEngine\n    } = this.state;\n\n    if (this.props.Login.masterData !== previousProps.Login.masterData) {\n      skipRulesEngine = this.props.Login.skipRulesEngine === undefined ? skipRulesEngine : this.props.Login.skipRulesEngine;\n      takeRulesEngine = takeRulesEngine ? takeRulesEngine : this.props.Login.takeRulesEngine;\n      isStateChanged = true;\n    }\n\n    if (isStateChanged) {\n      this.setState({\n        selectedRecord,\n        tempFilterData,\n        filterData,\n        userRoleControlRights,\n        controlMap,\n        sampleType,\n        productCategory,\n        product,\n        treeVersionTemplate,\n        historyDataState,\n        testskip,\n        testtake,\n        projectType,\n        project,\n        activeTabIndex,\n        activeTabId,\n        skipRulesEngine,\n        takeRulesEngine,\n        selectedsubcodedresult,\n        selectsubcodedelete\n      });\n    }\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    Login: state.Login\n  };\n};\n\nexport default connect(mapStateToProps, {\n  callService,\n  crudMaster,\n  filterTestGroup,\n  createTree,\n  editTree,\n  sampleTypeOnChange,\n  getTestGroupDetails,\n  validateEsignCredential,\n  updateStore,\n  addSpecification,\n  getSpecification,\n  addComponent,\n  changeTestCategory,\n  addTestGroupTest,\n  editTestGroupTest,\n  getTestGroupParameter,\n  editTestGroupParameter,\n  addTestFile,\n  editSpecFile,\n  getSpecificationDetails,\n  addTestGroupCodedResult,\n  getComponentBySpecId,\n  filterColumnData,\n  viewAttachment,\n  viewTestGroupCheckList,\n  getTestGroupComponentDetails,\n  filterTransactionList,\n  reportSpecification,\n  retireSpecification,\n  getDataForTestMaterial,\n  getEditTestGroupRulesEngine,\n  getMaterialCategoryBasedMaterialType,\n  getMaterialBasedMaterialCategory,\n  getTestGroupMaterial,\n  getDataForEditTestMaterial,\n  addTestGroupNumericTab,\n  getTestGroupRulesEngineAdd,\n  getSelectedTestGroupRulesEngine,\n  getParameterRulesEngine,\n  getParameterResultValue,\n  subCodedResultView,\n  saveExecutionOrder\n})(injectIntl(TestGroup));","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/pages/testgroup/TestGroup.jsx"],"names":["React","Component","connect","injectIntl","rsapi","toast","Row","Col","Card","Button","Nav","PerfectScrollbar","FontAwesomeIcon","faPencilAlt","faPlus","faSync","SplitterLayout","faEye","faTrashAlt","process","DataGrid","OrgTree","SlideOutModal","Esign","callService","crudMaster","filterTestGroup","createTree","editTree","getTestGroupDetails","sampleTypeOnChange","validateEsignCredential","updateStore","addSpecification","getSpecification","addComponent","changeTestCategory","addTestGroupTest","editTestGroupTest","getTestGroupParameter","editTestGroupParameter","addTestFile","editSpecFile","getSpecificationDetails","addTestGroupCodedResult","getComponentBySpecId","filterColumnData","viewAttachment","viewTestGroupCheckList","getTestGroupComponentDetails","filterTransactionList","reportSpecification","retireSpecification","getDataForTestMaterial","getMaterialCategoryBasedMaterialType","getMaterialBasedMaterialCategory","getTestGroupMaterial","getDataForEditTestMaterial","addTestGroupNumericTab","getTestGroupRulesEngineAdd","getEditTestGroupRulesEngine","getSelectedTestGroupRulesEngine","getParameterRulesEngine","getParameterResultValue","subCodedResultView","saveExecutionOrder","constructOptionList","formatInputDate","create_UUID","deleteAttachmentDropZone","filterRecordBasedOnTwoArrays","getControlMap","onDropAttachFileList","showEsign","sortData","Lims_JSON_stringify","TestGroupTestTab","AddTestGroupSpecification","DEFAULT_RETURN","transactionStatus","REPORTTYPE","attachmentType","formCode","designProperties","parameterType","SampleType","AddTestGroupTest","AddProfileTree","SampleFilter","AddFile","AdvFilter","SpecificationHistory","TestGroupSpecFile","SpecificationInfo","CustomTab","TransationListMaster","TransationListMasterView","FormTreeMenu","FormInput","ConfirmMessage","BreadcrumbComponent","testMoreFields","testSubFields","searchFieldList","specificationColumnList","componentColumnList","addTestColumnList","editTestColumnList","EditTestGroupTest","ContentPanel","SearchAdd","ListWrapper","ProductList","TransactionListMasterJsonView","PortalModalSlideout","AddTestGroupRule","ViewSubCodedResult","TestGroup","constructor","props","reloadData","filterData","Login","state","nsampletypecode","undefined","warn","intl","formatMessage","id","nproductcatcode","item","nformcode","PRODUCTCATEGORY","INSTRUMENTCATEGORY","MATERIALCATEGORY","nproductcode","ncategorybasedflow","NO","ncategorybasedflowrequired","ntreeversiontempcode","inputParam","inputData","userinfo","userInfo","YES","value","nprojectmastercode","historyDataState","masterData","searchRef","ConfirmDelete","obj","confirmMessage","confirm","deleteRecord","handlePageChange","event","setState","testskip","skip","testtake","take","viewTestFile","viewParam","operation","methodUrl","classUrl","ntestgroupfilecode","selectedTest","testgroupspecification","SelectedSpecification","ntestgrouptestcode","fileViewIcon","master","nlinkcode","NA","linkViewIcon","onFilterSumbit","tempFilterData","PROJECTSAMPLETYPE","nprojectspecrequired","onTreeClick","screenName","keyName","selectedRecord","activeKey","key","focusKey","primaryKey","tabDetail","tabMap","Map","set","controlMap","userRoleControlRights","addFile","defaultRecord","settings","TestGroupSpecificationHistory","historyDataStateChange","dataResult","dataState","specDataStateChange","TestGroupTestClinicalSpec","clinicalspecDataState","ncontrolCode","modalName","nflag","treeVersionTemplateIndex","findIndex","x","selectedNode","templateVersionStatus","ntransactionstatus","RETIRED","napprovalstatus","DRAFT","CORRECTION","onTabChange","tabProps","updateInfo","typeName","data","componentRowClick","testgroupspecsampletype","deleteTest","deleteParam","testgrouptest","postParam","inputListName","selectedObject","primaryKeyField","primaryKeyValue","fetchUrl","fecthInputObject","unchangeList","loadEsign","screenData","openModal","closeModal","onInputOnChange","caseNo","optional","target","type","name","checked","indexKey","Object","keys","values","treeData","npositioncode","nlevelno","sleveldescription","ntemptranstestgroupcode","schildnode","nnextchildcode","ntemplatemanipulationcode","isreadonly","slevelformat","treetemplatemanipulation","onEsignInputOnChange","onTabChangeRulesEngine","activeTabName","tabDetailRulesEngine","jsonuidata","SelectedRulesEngine","handleExpandChange","dataStatetestinitiate","dataStateChangetestinitiateTab","childListMap","dataStateChange","childListMap2","dataStaterepeatTab","dataStateChangeRepeatTab","dataStateChangenforceTab","ntestgrouptestparametercode","dataStateObject","dataStateChangetestRepeat","dataStatetestRepeat","dataStateChangetestEnforce","dataStatetestEnforce","dataStateChangeMain","dataResultMain","queryDataMain","dataStateMain","ConfirmDeleteRule","deleteId","length","handleClickDelete","closeModalShow","openModalPopup","onsavevalidation","grouplist","hasAll","i","rules","j","PREDEFINED","CHARACTER","NUMERIC","every","prop","hasOwnProperty","save","siteObject","testCommentObject","reportCommentObject","PredefinedParameterOptions","testInitiateTests","testCommentsTests","reportCommentsTests","testRepeatTests","testenforceTests","testsInvolvedInRules","testsNameInvolvedInRules","action","groupList","outcomeList","addGroupList","testInitiateSiteTab","testCommentsTestsTab","reportCommentsTestsTab","SelectedTest","ruleEngineLayout","ruleEngineLayoutObject","groupRuleObject","map","List","push","stestname","JSON","stringify","displayName","info","openmodalsavePopup","onOutcomeChange","comboData","index","writtenRules","activeTabIndex","boolean","y","some","selectedTestRemove","outComeTestsRemoveFromRules","addTest","tabName","rulesOption","testInitiateTestCombo","testCommentsTestCombo","testRepeatTestCombo","testenforceTestCombo","filter","selectedTestTempArray","duplicatePresent","onRuleChange","fieldName","groupIndex","clearSelectedRule","nparametertypecode","onRuleInputChange","onRuleNumericInputOnChange","onMasterDataChange","isResultorOrderType","optionsByRule","DiagnosticCaseList","GradeList","label","addRule","viewColumnListByRule","arrayLength","viewColumnList","databaseviewList","paneSizeChange","d","splitChangeWidthPercentage","addComments","selectedParameterRulesEngine","testparameter","addModalSite","modalsaveClick","needoutsource","testInitiateTestsTemp","testCommentsTestsTemp","reportCommentsTestsTemp","testInitiateSiteTemp","testInitiateTestOptions","testCommentsTestOptions","reportCommentsTestOptions","testInitiateTestdeletedOptions","testCommentsTestdeletedOptions","reportCommentsTestdeletedOptions","npkAtestparametercode","npkBtestparametercode","npkCtestparametercode","npkDtestparametercode","isduplicate","Math","max","object","npKAsampletestcommentscode","nslno","ncommentsubtypecode","scommentsubtype","stestsynonym","ncommenttypecode","scommenttype","nsampletestcommentscode","spredefinedname","scomments","sdescription","stestparametersynonym","commentsArrayIndex","siteseqnumber","isalreadyExist","nfromsitecode","ntositecode","npksitecode","sfromsitename","stositename","deletModalSite","inputparam","row","temparray","splice","testRepeat","deleteModalTest","testRepeatTestsTab","testenforceTestsTab","testParameter","testParameterComments","onmodalComboChange","isneedsgeneralcomments","getSpecificationTestGroupRulesEngine","getComponentTestGroupRulesEngine","getOutcomeDetails","testParameterreportComments","childListMap1","childListMap3","keylst","parseInt","viewOutcome","forEach","openflowview","handlePageChangeRuleEngine","skipRulesEngine","takeRulesEngine","addGroup","selectFields","addRuleList","addAggregateList","addOrderbyList","closePortalModal","openPortalModal","count","changePropertyView","status","activeTabId","activeTestTab","window","innerWidth","enableAutoClick","testEnforceTests","deleteRule","deleteOutcome","addOutcomeList","clearRule","sviewname","sqlQuery","resetRule","onSymbolChange","oldSelectedRecord","onInputChange","list","dynamicList","onConditionClick","isgroup","changePropertyViewClose","onFilterComboChange","sampletype","productcategory","product","project","TestGroupSpecSampleType","testGroupInputData","testGroupSpecSampleType","genericLabel","slanguagetypecode","SelectedComponent","testcategory","nallottedspeccode","nprojecttypecode","projecttype","handleDateChange","dateName","dateValue","Date","onNumericInputChange","onSaveClick","saveType","formRef","onSaveTree","onSaveSpecification","onSaveComponent","onSaveCopySpecification","onSaveTest","onSaveSpecFile","testArray","ntestcode","test","changeList","isSingleSelect","testgrouptestfile","testGroupFile","ntestfilecode","nattachmenttypecode","ssystemfilename","dcreateddate","nfilesize","sfilename","nstatus","ACTIVE","nsectioncode","nmethodcode","ninstrumentcatcode","ncontainertypecode","ncost","nsorter","nspecsampletypecode","nrepeatcountno","ActiveKey","TreetempTranstestGroup","tempArray","treeTemplateManip","temp","testGroupSpec","napproveconfversioncode","sversion","ncomponentrequired","sspecname","dexpirydate","ntzexpirydate","stzexpirydate","selectedspecification","ncomponentcode","genericlabel","acceptedFiles","isFileEdited","specFileArray","selectedSpecification","specFile","nspecfilecode","formData","FormData","FTP","Array","isArray","file","tempData","assign","splittedFileName","split","fileExtension","uniquefilename","trim","size","append","slinkfilename","slinkdescription","sformname","smodulename","isFileupload","deleteSpecRecord","componentDataState","deleteMultipleRecord","onDropSpecFile","attachedFiles","maxSize","actionType","deleteAttachment","validateTestGroupComplete","inputValue","post","then","response","inactiveTestArray","indexOf","completeSpecification","catch","error","message","retireSpec","approvalRoleActionDetail","retireSpecId","specificationReport","sprimarykeyname","ncontrolcode","nregtypecode","nregsubtypecode","nreportmodulecode","nreporttypecode","CONTROLBASED","nreportdecisiontypecode","certificatetypecode","selectedComponent","testGroupTest","TestGroupTest","approveSpecification","needEsign","onComboChange","schecklistversionname","validateEsign","sreason","nreasoncode","spredefinedreason","password","group","field","showTest","fixefScrollHeight","outerHeight","initialVerticalWidth","testView","paneHeight","componentBreadcrumbs","breadCrumbData","createRef","specSubField","VALUE","COLOUR","myRef","getDerivedStateFromProps","masterStatus","errorCode","componentDidMount","parentHeight","height","clientHeight","render","console","log","TestGroupSpecification","OpenNodes","FocusKey","searchedData","TestGroupTestParameter","AgaramTree","testGroupTestData","getComponent","addSpecParam","editSpecParam","specDeleteParam","addSpecId","has","get","addTreeId","editTreeId","deleteTreeId","editSpecId","deleteSpecId","addComponentId","deleteComponentId","addTestId","deleteTestId","editTestId","viewFileId","deleteTree","getTest","filterParam","filterParamRulesEngine","specMandatoryFields","compMandatoryFields","editTestMandatoryFields","addTestMandatoryFields","mandatory","splitNode","treeNodeNames","nodeItem","TreeTemplateManipulation","treeItem","scomponentname","specDesign","display","marginTop","float","marginRight","showSpecAndTestInfo1","ApprovalRoleActionDetail","testDesign","position","right","top","showSpecAndTestInfo","setting","title","controlname","objectName","hidden","onClick","needConditionalIcon","conditionalIconFunction","paramDesign","isrulesenginerequired","openChildModal","parameterData","selectedsubcodedresult","selectsubcodedelete","testGroupCheckList","openTemplateModal","materialType","materialCategoryList","materialList","masterdata","approveVersion","mainDesign","showModalBg","sampleType","treeVersionTemplate","productCategory","projectType","needActionStrip","e","spec","findMandatoryFields","treeMandatoryFields","timeZoneList","selectedsubcoderesult","linkMaster","editFiles","slabelname","ruleflowobject","ProductCategoryList","databaseTableList","tableColumnList","TestGroupSpecificationList","ComponentList","foreignTableList","foreignTableColumnList","foreignTableCount","switchRecord","gridColumnList","queryType","SelectedProductCategory","siteList","resultTypeList","enablePropertyPopup","propertyPopupWidth","sectionDataState","testcomments","reportcomments","CommentType","CommentSubType","predefcomments","testGroupTestParameterRulesEngine","mandyFields","LINK","finalMandyFields","updateSpiltterLayout","labelColor","labelBGColor","borderColor","groupListJoins","children","parent","grandparent","groupobject","rulesList","rule","notarray","join","parentjoins","srulename","fieldArray","ntestgrouprulesenginecode","generateBreadCrumData","current","disableSplit","setTimeout","componentDidUpdate","previousProps","previousState","isStateChanged","sampleTypeMap","ProductCategory","productCatMap","Product","productMap","ProjectTypeList","projectTypeMap","ProjectMasterList","projectMasterMap","TreeVersionTemplate","templateMap","nformCode","mapStateToProps"],"mappings":"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","sourcesContent":["import React, { Component} from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { injectIntl } from 'react-intl';\r\nimport rsapi from '../../rsapi';\r\nimport { toast } from 'react-toastify';\r\nimport { Row, Col, Card, Button, Nav } from 'react-bootstrap';\r\nimport PerfectScrollbar from 'react-perfect-scrollbar';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faPencilAlt, faPlus, faSync } from '@fortawesome/free-solid-svg-icons';\r\nimport 'react-perfect-scrollbar/dist/css/styles.css';\r\nimport SplitterLayout from 'react-splitter-layout';\r\nimport { faEye, faTrashAlt } from '@fortawesome/free-regular-svg-icons';\r\n// import { Tooltip } from '@progress/kendo-react-tooltip';\r\nimport { process } from '@progress/kendo-data-query';\r\nimport DataGrid from '../../components/data-grid/data-grid.component';\r\nimport OrgTree from 'react-org-tree';\r\n\r\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\r\nimport Esign from '../audittrail/Esign';\r\nimport {\r\n    callService, crudMaster, filterTestGroup, createTree, editTree, getTestGroupDetails, sampleTypeOnChange,\r\n    validateEsignCredential, updateStore, addSpecification, getSpecification, addComponent, changeTestCategory,\r\n    addTestGroupTest, editTestGroupTest, getTestGroupParameter, editTestGroupParameter, addTestFile,\r\n    editSpecFile, getSpecificationDetails, addTestGroupCodedResult, getComponentBySpecId, filterColumnData,\r\n    viewAttachment, viewTestGroupCheckList, getTestGroupComponentDetails, filterTransactionList, reportSpecification, retireSpecification, getDataForTestMaterial,\r\n    getMaterialCategoryBasedMaterialType, getMaterialBasedMaterialCategory, getTestGroupMaterial, getDataForEditTestMaterial, addTestGroupNumericTab, getTestGroupRulesEngineAdd,\r\n    getEditTestGroupRulesEngine, getSelectedTestGroupRulesEngine, getParameterRulesEngine,getParameterResultValue,subCodedResultView,saveExecutionOrder\r\n} from '../../actions'\r\nimport { constructOptionList, formatInputDate, create_UUID, deleteAttachmentDropZone, filterRecordBasedOnTwoArrays, getControlMap, onDropAttachFileList, showEsign, sortData, Lims_JSON_stringify } from '../../components/CommonScript';\r\nimport TestGroupTestTab from './TestGroupTestTab';\r\nimport AddTestGroupSpecification from './AddTestGroupSpecification';\r\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\r\nimport { transactionStatus, REPORTTYPE, attachmentType, formCode, designProperties, \r\n    parameterType,SampleType } from '../../components/Enumeration';\r\nimport AddTestGroupTest from './AddTestGroupTest';\r\nimport AddProfileTree from './AddProfileTree';\r\nimport SampleFilter from './SampleFilter';\r\nimport AddFile from '../testmanagement/AddFile';\r\nimport AdvFilter from '../../components/AdvFilter';\r\nimport SpecificationHistory from './SpecificationHistory';\r\nimport TestGroupSpecFile from './TestGroupSpecFile';\r\nimport SpecificationInfo from './SpecificationInfo';\r\nimport CustomTab from '../../components/custom-tabs/custom-tabs.component';\r\nimport TransationListMaster from '../../components/TransactionListMaster';\r\nimport TransationListMasterView from '../../components/TransactionListMasterView';\r\nimport FormTreeMenu from '../../components/form-tree-menu/form-tree-menu.component';\r\n// import ConfirmDialog from '../../components/confirm-alert/confirm-alert.component';\r\nimport FormInput from '../../components/form-input/form-input.component';\r\nimport ConfirmMessage from '../../components/confirm-alert/confirm-message.component';\r\nimport BreadcrumbComponent from '../../components/Breadcrumb.Component';\r\n\r\nimport {\r\n    testMoreFields, testSubFields, searchFieldList, specificationColumnList, componentColumnList,\r\n    addTestColumnList, editTestColumnList \r\n} from './TestGroupFields';\r\n\r\nimport EditTestGroupTest from './EditTestGroupTest';\r\nimport { ContentPanel, SearchAdd } from '../../components/App.styles';\r\nimport '../../pages/registration/registration.css';\r\nimport { ListWrapper } from '../../components/client-group.styles';\r\nimport { ProductList } from '../product/product.styled';\r\nimport TransactionListMasterJsonView from '../../components/TransactionListMasterJsonView';\r\n// import ReactTooltip from 'react-tooltip';\r\nimport PortalModalSlideout from '../../components/portal-modal/portal-modal-slideout';\r\nimport AddTestGroupRule from './AddTestGroupRule';\r\nimport ViewSubCodedResult from './ViewSubCodedResult';\r\n\r\n\r\nclass TestGroup extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        const componentDataState = { skip: 0, take: 10 };\r\n        const historyDataState = { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 };\r\n        const clinicalspecDataState = { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5, group: [{ field: 'sgendername' }] };\r\n\r\n        this.state = {\r\n            selectedRecord: {},\r\n            filterData: {},\r\n            error: \"\",\r\n            userRoleControlRights: [],\r\n            controlMap: new Map(),\r\n            componentDataState,\r\n            historyDataState,\r\n            clinicalspecDataState,\r\n            tempFilterData: {},\r\n            showTest: true,\r\n            testskip: 0,\r\n            testtake: this.props.Login.settings ? this.props.Login.settings[12] : 5,\r\n            skipRulesEngine: 0,\r\n            takeRulesEngine: this.props.Login.settings ? this.props.Login.settings[12] : 5,\r\n            fixefScrollHeight: window.outerHeight - 400,\r\n            initialVerticalWidth: \"20vh\",\r\n            testView: true,\r\n            //paneHeight:'calc(100vh - ' +window.outerHeight-847 + 'px)'\r\n            paneHeight: 'calc(100vh -183px)'\r\n        }\r\n        this.componentBreadcrumbs = [];\r\n        this.breadCrumbData = [];\r\n        this.searchRef = React.createRef();\r\n        this.specSubField = [{ [designProperties.VALUE]: \"stransdisplaystatus\" },\r\n        { [designProperties.VALUE]: \"sapprovalstatus\", [designProperties.COLOUR]: true }];\r\n        this.myRef = React.createRef();\r\n\r\n    }\r\n\r\n    static getDerivedStateFromProps(props, state) {\r\n        if (props.Login.masterStatus !== \"\") {\r\n            if (props.Login.errorCode === 417 || props.Login.errorCode === 409) {\r\n                toast.warn(props.Login.masterStatus);\r\n                props.Login.masterStatus = \"\";\r\n            }\r\n        }\r\n        if (props.Login.error !== state.error) {\r\n            toast.error(props.Login.error)\r\n            props.Login.error = \"\";\r\n        }\r\n        return null;\r\n    }\r\n\r\n    reloadData = () => {\r\n\r\n        const filterData = this.props.Login.filterData || this.state.filterData;\r\n        if (filterData.nsampletypecode === undefined) {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SAMPLETYPENOTAVAILABLE\" }));\r\n        }\r\n        else if (filterData.nproductcatcode === \"\") {\r\n            if (filterData.nsampletypecode.item.nformcode === formCode.PRODUCTCATEGORY) {\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_PRODUCTCATEGORYNOTAVAILABLE\" }));\r\n            } else if (filterData.nsampletypecode.item.nformcode === formCode.INSTRUMENTCATEGORY) {\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_INSTRUMENTCATEGORYNOTAVAILABLE\" }));\r\n            } else if (filterData.nsampletypecode.item.nformcode === formCode.MATERIALCATEGORY) {\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_MATERIALCATEGORYNOTAVAILABLE\" }));\r\n            } else {\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_CATEGORYNOTAVAILABLE\" }));\r\n            }\r\n        }\r\n        else if (filterData.nproductcode === \"\" && (filterData.nproductcatcode.item.ncategorybasedflow === transactionStatus.NO)) {\r\n            if (filterData.nsampletypecode.item.nformcode === formCode.PRODUCTCATEGORY && filterData.nsampletypecode.item.ncategorybasedflowrequired === transactionStatus.NO ) {\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_PRODUCTNOTAVAILABLE\" }));\r\n            } else if (filterData.nsampletypecode.item.nformcode === formCode.INSTRUMENTCATEGORY) {\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_INSTRUMENTNOTAVAILABLE\" }));\r\n            } else if (filterData.nsampletypecode.item.nformcode === formCode.MATERIALCATEGORY) {\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_MATERIALNOTAVAILABLE\" }));\r\n            } else {\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_PRODUCTNOTAVAILABLE\" }));\r\n            }\r\n        } else if (filterData.ntreeversiontempcode === \"\") {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_STUDYPLANTEMPLATEISNOTAVAILABLE\" }));\r\n        }\r\n        else {\r\n            const inputParam = {\r\n                inputData: {\r\n                    userinfo: this.props.Login.userInfo,\r\n                    nsampletypecode: filterData.nsampletypecode.item[\"nsampletypecode\"],\r\n                    nproductcatcode: filterData.nproductcatcode.item[\"nproductcatcode\"],\r\n                 //   nproductcode: filterData.nproductcode.item[\"nproductcode\"],\r\n                    nproductcode: filterData.nsampletypecode.item.ncategorybasedflowrequired == transactionStatus.YES ? -1 :\r\n                    filterData.nproductcatcode.item.ncategorybasedflow === transactionStatus.YES ? -1 : filterData.nproductcode ? filterData.nproductcode.value : -1,\r\n                    ntreeversiontempcode: filterData.ntreeversiontempcode.item[\"ntreeversiontempcode\"],\r\n                    nprojectmastercode: filterData.nprojectmastercode !== undefined ? filterData.nprojectmastercode.item[\"nprojectmastercode\"]:-1,\r\n                    filterData,//: { ...this.props.Login.filterData }\r\n                },\r\n                historyDataState: this.state.historyDataState\r\n\r\n            }\r\n            this.props.filterTestGroup(inputParam, this.props.Login.masterData, this.searchRef);\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (this.parentHeight) {\r\n            const height = this.parentHeight.clientHeight;\r\n            this.setState({\r\n                parentHeight: height - 50\r\n            });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        console.log(\"Screen Name need\",this.props.Login.screenName);\r\n        const { TestGroupSpecification, SelectedSpecification, SelectedTest, OpenNodes, selectedNode, FocusKey,\r\n            ActiveKey, SelectedComponent, TestGroupTest, TestGroupSpecSampleType, searchedData,\r\n            TestGroupTestParameter } = this.props.Login.masterData;\r\n        // const deleteTree = {\r\n        //     methodUrl: \"Tree\", operation: \"delete\", inputParam: this.props.Login.inputParam,\r\n        //     userInfo: this.props.Login.userInfo, screenName: \"IDS_TREE\"\r\n        // };\r\n        if (this.props.Login.masterData && this.props.Login.masterData.AgaramTree && this.props.Login.masterData.AgaramTree.length > 0) {\r\n         this.props.Login.masterData.AgaramTree[0][\"label\"] = this.props.Login.masterData.AgaramTree[0][\"label\"] === 'root' ? \r\n         this.props.intl.formatMessage({ id: \"IDS_ROOT\" }) : this.props.Login.masterData.AgaramTree[0][\"label\"];\r\n        }\r\n\r\n        const testGroupTestData = searchedData || TestGroupTest || []\r\n\r\n        if (TestGroupTestParameter) {\r\n            sortData(TestGroupTestParameter, \"ascending\", \"nsorter\");\r\n        }\r\n\r\n        if (testGroupTestData) {\r\n            sortData(testGroupTestData, \"descending\", \"nsorter\");\r\n        }\r\n\r\n        const getComponent = {\r\n            screenName:this.props.Login.genericLabel && this.props.Login.genericLabel[\"Component\"][\"jsondata\"][\"sdisplayname\"][this.props.Login.userInfo.slanguagetypecode], operation: \"get\", inputParam: this.props.Login.inputParam,\r\n            userInfo: this.props.Login.userInfo, methodUrl: \"TestGroupComponent\", keyName: \"testgroupspecification\"\r\n        };\r\n        const addSpecParam = { testgroupspecification: SelectedSpecification, selectedRecord: this.state.filterData, userInfo: this.props.Login.userInfo, selectedNode };\r\n        const editSpecParam = { selectedRecord: this.state.filterData, userinfo: this.props.Login.userInfo, selectedNode };\r\n        const specDeleteParam = { operation: \"delete\", methodUrl: \"Specification\", screenName: \"IDS_SPECIFICATION\", keyName: \"testgroupspecification\", filterData: this.state.filterData };\r\n        const addSpecId = this.state.controlMap.has(\"AddSpecification\") && this.state.controlMap.get(\"AddSpecification\").ncontrolcode;\r\n        const addTreeId = this.state.controlMap.has(\"AddTree\") && this.state.controlMap.get(\"AddTree\").ncontrolcode;\r\n        const editTreeId = this.state.controlMap.has(\"EditTree\") && this.state.controlMap.get(\"EditTree\").ncontrolcode;\r\n        const deleteTreeId = this.state.controlMap.has(\"DeleteTree\") && this.state.controlMap.get(\"DeleteTree\").ncontrolcode;\r\n        const editSpecId = this.state.controlMap.has(\"EditSpecification\") && this.state.controlMap.get(\"EditSpecification\").ncontrolcode;\r\n        const deleteSpecId = this.state.controlMap.has(\"DeleteSpecification\") && this.state.controlMap.get(\"DeleteSpecification\").ncontrolcode;\r\n        const addComponentId = this.state.controlMap.has(\"AddComponent\") && this.state.controlMap.get(\"AddComponent\").ncontrolcode;\r\n        const deleteComponentId = this.state.controlMap.has(\"DeleteComponent\") && this.state.controlMap.get(\"DeleteComponent\").ncontrolcode;\r\n        const addTestId = this.state.controlMap.has(\"AddTest\") && this.state.controlMap.get(\"AddTest\").ncontrolcode;\r\n        const deleteTestId = this.state.controlMap.has(\"DeleteTest\") && this.state.controlMap.get(\"DeleteTest\").ncontrolcode;\r\n        const editTestId = this.state.controlMap.has(\"EditTest\") && this.state.controlMap.get(\"EditTest\").ncontrolcode;\r\n        const viewFileId = this.state.controlMap.has(\"ViewTestFile\") && this.state.controlMap.get(\"ViewTestFile\").ncontrolcode;\r\n        const confirmMessage = new ConfirmMessage();\r\n\r\n        const deleteTree = {\r\n            methodUrl: \"Tree\", operation: \"delete\", inputParam: this.props.Login.inputParam,\r\n            userInfo: this.props.Login.userInfo, screenName: \"IDS_TREE\", ncontrolCode: deleteTreeId, filterData: this.state.filterData\r\n        };\r\n\r\n        const getTest = {\r\n            screenName: \"IDS_TEST\", operation: \"get\", masterData: this.props.Login.masterData,\r\n            userInfo: this.props.Login.userInfo, methodUrl: \"TestGroupTest\", keyName: \"ntestgrouptestcode\"\r\n        };\r\n        const filterParam = {\r\n            testskip: 0, testtake: this.props.Login.settings ? this.props.Login.settings[12] : 5,\r\n            inputListName: \"TestGroupTest\", selectedObject: \"SelectedTest\", primaryKeyField: \"ntestgrouptestcode\",\r\n            fetchUrl: \"testgroup/getTestGroupTest\", fecthInputObject: { userinfo: this.props.Login.userInfo }, masterData: this.props.Login.masterData,\r\n            searchFieldList, changeList: [\"TestGroupTestFormula\", \"TestGroupTestNumericParameter\",\r\n                \"TestGroupTestPredefinedParameter\", \"TestGroupTestCharParameter\", \"TestGroupTestParameter\"], isSingleSelect: true\r\n        };\r\n        const filterParamRulesEngine = {\r\n            skipRulesEngine: 0, takeRulesEngine: this.props.Login.settings ? this.props.Login.settings[12] : 5,\r\n            inputListName: \"RulesEngine\", selectedObject: \"SelectedRulesEngine\", primaryKeyField: \"ntestgrouprulesenginecode\",\r\n            fetchUrl: \"testgrouprulesengine/getSelectedTestGroupRulesEngine\", fecthInputObject: { userinfo: this.props.Login.userInfo\r\n                ,ntestgrouptestcode:this.props.Login.masterData.SelectedTest&&this.props.Login.masterData.SelectedTest.ntestgrouptestcode }, masterData: this.props.Login.masterData,\r\n            'searchFieldList':[\"srulename\",\"stransdisplaystatus\" \r\n        ], changeList: [],  isSingleSelect: true\r\n        };\r\n        const specMandatoryFields = [];\r\n        const compMandatoryFields = [];\r\n        const editTestMandatoryFields = [];\r\n        const addTestMandatoryFields = [];\r\n        specificationColumnList.forEach(item => item.mandatory === true ?\r\n            specMandatoryFields.push(item) : \"\"\r\n        );\r\n        \r\n        componentColumnList.forEach(item => item.mandatory === true ?\r\n            compMandatoryFields.push(item) : \"\"\r\n        );\r\n        editTestColumnList.forEach(item => item.mandatory === true ?\r\n            editTestMandatoryFields.push(item) : \"\"\r\n        );\r\n        addTestColumnList.forEach(item => item.mandatory === true ?\r\n            addTestMandatoryFields.push(item) : \"\"\r\n        );\r\n\r\n        if (this.props.Login.masterData && Object.values(this.props.Login.masterData).length > 0) {\r\n            if (selectedNode && selectedNode.sleveldescription) {\r\n                const splitNode = this.props.Login.masterData.ActiveKey.split('/');\r\n                let treeNodeNames = [];\r\n                splitNode.forEach(nodeItem => {\r\n                    this.props.Login.masterData.TreeTemplateManipulation.forEach(treeItem => {\r\n                        if (treeItem.ntemplatemanipulationcode === parseInt(nodeItem))\r\n                            treeNodeNames.push(treeItem.sleveldescription);\r\n                    })\r\n                })\r\n                this.componentBreadcrumbs = treeNodeNames;\r\n                if (SelectedSpecification && SelectedSpecification !== null && SelectedSpecification.sspecname) {\r\n                    this.componentBreadcrumbs.push(SelectedSpecification.sspecname);\r\n                    if (SelectedComponent && SelectedComponent !== null && SelectedComponent.ncomponentcode !== -1) {\r\n                        // this.componentBreadcrumbs[2] = this.props.intl.formatMessage({ id: \"IDS_COMPONENT\" }) + \": \" + SelectedComponent.scomponentname;\r\n                        this.componentBreadcrumbs.push(SelectedComponent.scomponentname);\r\n                    } else {\r\n                        // delete this.componentBreadcrumbs[2];\r\n                    }\r\n                } else {\r\n                    // delete this.componentBreadcrumbs[1];\r\n                }\r\n            } else {\r\n                this.componentBreadcrumbs = [];\r\n                // delete this.componentBreadcrumbs[0];\r\n            }\r\n        }\r\n\r\n        this.confirmMessage = new ConfirmMessage();\r\n\r\n\r\n\r\n        //New Design\r\n        const specDesign =\r\n            <>\r\n                {this.componentBreadcrumbs && this.componentBreadcrumbs.length > 0 &&\r\n                    <div className=\"component_breadcrumbs\">\r\n                        <ul>\r\n                            {this.componentBreadcrumbs.map((item) => {\r\n                                return <li>{item}</li>\r\n                            })}\r\n                        </ul>\r\n                    </div>\r\n                }\r\n\r\n                <ContentPanel hidden={this.state.showTest} className='mr-2'>\r\n                    <div className='card_group'>\r\n                        <Card>\r\n                            <Card.Header>\r\n                                <span style={{ display: \"inline-block\", marginTop: \"1%\" }} >\r\n                                    <h4>{this.props.intl.formatMessage({ id: \"IDS_SPECIFICATIONINFO\" })}</h4>\r\n                                </span>\r\n                                {/* <button className=\"btn btn-primary\" style={{ float: \"right\" }}\r\n                                    onClick={() => this.showSpecAndTestInfo()}>\r\n                                    <FontAwesomeIcon icon={faEye}></FontAwesomeIcon>{\"  \"}\r\n                                    {this.props.intl.formatMessage({ id: \"IDS_TEST\" })}\r\n                                </button> */}\r\n                                <button className=\"btn btn-primary\" style={{ float: \"right\", marginRight: \"1rem\" }}\r\n                                    onClick={() => this.showSpecAndTestInfo1()}>\r\n                                    <FontAwesomeIcon icon={faEye}></FontAwesomeIcon>{\"  \"}\r\n                                    {this.props.intl.formatMessage({ id: \"IDS_TEST\" })}\r\n                                </button>\r\n                            </Card.Header>\r\n                            <Card.Body>\r\n                                <SpecificationInfo\r\n                                    genericLabel={this.props.Login.genericLabel}                             \r\n                                    controlMap={this.state.controlMap}\r\n                                    userRoleControlRights={this.state.userRoleControlRights}\r\n                                    selectedSpecification={this.props.Login.masterData.SelectedSpecification}\r\n                                    userInfo={this.props.Login.userInfo}\r\n                                    selectedNode={this.props.Login.masterData.selectedNode}\r\n                                    selectedRecord={this.state.filterData}\r\n                                    approvalRoleActionDetail={this.props.Login.masterData.ApprovalRoleActionDetail}\r\n                                    screenName=\"IDS_SPECIFICATIONINFO\"\r\n                                    deleteRecord={this.deleteRecord}\r\n                                    addSpecification={this.props.addSpecification}\r\n                                    filterData={this.state.filterData}\r\n                                    //completeSpecification={this.completeSpecification}\r\n                                    completeSpecification={this.validateTestGroupComplete}\r\n                                    approveSpecification={this.approveSpecification}\r\n                                    specificationReport={this.specificationReport}\r\n                                    retireSpec={this.retireSpec}\r\n                                    masterData={this.props.Login.masterData}\r\n\r\n                                />\r\n                            </Card.Body>\r\n                        </Card>\r\n                    </div>\r\n\r\n                        <div>\r\n                            <CustomTab tabDetail={this.tabDetail()} onTabChange={this.onTabChange} />\r\n                        </div>\r\n                </ContentPanel>\r\n            </>\r\n\r\n\r\n        const testDesign = <Card>\r\n            <Card.Header className='sm-header'>\r\n                <h4 className='spec-info-title' data-tip={ this.props.intl.formatMessage({ id: \"IDS_TEST\" }) }>{this.props.intl.formatMessage({ id: \"IDS_TEST\" })}</h4>\r\n                <button className=\"btn btn-primary\" style={{ position: \"absolute\", right: \"7px\", top: \"7px\" }}\r\n                    onClick={() => this.showSpecAndTestInfo()}>\r\n                    <FontAwesomeIcon icon={faEye}></FontAwesomeIcon>{\"  \"}\r\n                    {this.props.intl.formatMessage({ id: \"IDS_SPECINFO\" })}\r\n                </button>\r\n            </Card.Header>\r\n            <Card.Body className={this.state.testView ? 'p-0' : 'no-pad-t'}>\r\n                <TransactionListMasterJsonView\r\n                    cardHead={167}\r\n                    componentBreadcrumbs={this.breadCrumbData ? this.breadCrumbData.length > 0 ? true : false : false}\r\n                    // notSearchable={false}\r\n                    masterList={searchedData || TestGroupTest || []}\r\n                    //selectedMaster={[SelectedTest]}\r\n                    clickIconGroup={true}\r\n                    selectedMaster={SelectedTest !== undefined ? [SelectedTest] : undefined}\r\n                    primaryKeyField=\"ntestgrouptestcode\"\r\n                    getMasterDetail={this.props.getTestGroupDetails}\r\n                    inputParam={getTest}\r\n                    additionalParam={[]}\r\n                    mainField=\"stestname\"\r\n                    selectedListName=\"SelectedTest\"\r\n                    objectName=\"testgrouptest\"\r\n                    listName=\"IDS_TEST\"\r\n                    showStatusLink={true}\r\n                    statusFieldName=\"stransdisplaystatus\"\r\n                    statusField=\"ntransactionstatus\"\r\n                    subFields={testSubFields}\r\n                    moreField={testMoreFields}\r\n                    needValidation={false}\r\n                    needFilter={false}\r\n                    filterColumnData={this.props.filterTransactionList}\r\n                    searchListName=\"searchedData\"\r\n                    searchRef={this.searchRef}\r\n                    hidePaging={false}\r\n                    filterParam={filterParam}\r\n                    handlePageChange={this.handlePageChange}\r\n                    skip={this.state.testskip}\r\n                    take={this.state.testtake}\r\n                    pageSize={this.props.Login.settings && this.props.Login.settings[13].split(\",\").map(setting => parseInt(setting))}\r\n                    actionIcons={\r\n                        [\r\n                            {\r\n                                title: this.props.intl.formatMessage({ id: \"IDS_VIEW\" }),\r\n                                controlname: \"faCloudDownloadAlt\",\r\n                                objectName: \"selectedTest\",\r\n                                hidden: this.state.userRoleControlRights.indexOf(viewFileId) === -1,\r\n                                inputData: { masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo },\r\n                                onClick: (props) => this.viewTestFile(props),\r\n                                needConditionalIcon: true,\r\n                                conditionalIconFunction: this.fileViewIcon\r\n                            },\r\n                            {\r\n                                title: this.props.intl.formatMessage({ id: \"IDS_VIEW\" }),\r\n                                controlname: \"faExternalLinkAlt\",\r\n                                objectName: \"selectedTest\",\r\n                                hidden: this.state.userRoleControlRights.indexOf(viewFileId) === -1,\r\n                                inputData: { masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo },\r\n                                onClick: (props) => this.viewTestFile(props),\r\n                                needConditionalIcon: true,\r\n                                conditionalIconFunction: this.linkViewIcon\r\n                            },\r\n                            {\r\n                                title: this.props.intl.formatMessage({ id: \"IDS_EDIT\" }),\r\n                                controlname: \"faPencilAlt\",\r\n                                objectName: \"testgroupspecification\",\r\n                                hidden: this.state.userRoleControlRights.indexOf(editTestId) === -1,\r\n                                inputData: { masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo },\r\n                                onClick: (props) => this.props.editTestGroupTest(\"update\", props.SelectedTest[0], this.props.Login.userInfo, editTestId, SelectedSpecification, this.state.filterData, props.masterData)\r\n                            },\r\n                            {\r\n                                title: this.props.intl.formatMessage({ id: \"IDS_DELETE\" }),\r\n                                controlname: \"faTrashAlt\",\r\n                                objectName: \"testgrouptest\",\r\n                                hidden: this.state.userRoleControlRights.indexOf(deleteTestId) === -1,\r\n                                inputData: { masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo },\r\n                                onClick: (props) => confirmMessage.confirm(\r\n                                    \"deleteMessage\",\r\n                                    this.props.intl.formatMessage({ id: \"IDS_DELETE\" }),\r\n                                    this.props.intl.formatMessage({ id: \"IDS_DEFAULTCONFIRMMSG\" }),\r\n                                    this.props.intl.formatMessage({ id: \"IDS_OK\" }),\r\n                                    this.props.intl.formatMessage({ id: \"IDS_CANCEL\" }),\r\n                                    () => this.deleteTest({ props, ncontrolCode: deleteTestId, filterData: this.state.filterData })\r\n                                )\r\n                            }\r\n                        ]\r\n                    }\r\n                    commonActions={\r\n                        <>\r\n\r\n                            <Button className=\"btn btn-icon-rounded btn-circle solid-blue\" role=\"button\"\r\n                                hidden={this.state.userRoleControlRights.indexOf(addTestId) === -1}\r\n                                data-tip={this.props.intl.formatMessage({ id: \"IDS_ADD\" })}\r\n                                // data-for=\"tooltip-list-wrap\"\r\n                                onClick={() => this.props.addTestGroupTest(SelectedComponent, this.props.Login.userInfo, addTestId, SelectedSpecification, this.state.filterData, this.props.Login.masterData)}>\r\n                                <FontAwesomeIcon icon={faPlus} title={this.props.intl.formatMessage({ id: \"IDS_ADD\" })} />\r\n                            </Button>\r\n                        </>\r\n                    }\r\n                />\r\n            </Card.Body>\r\n        </Card>\r\n\r\n        const paramDesign =\r\n            <>\r\n                <ContentPanel hidden={!this.state.showTest} className=\"grouped-param\">\r\n                    <Card>\r\n                        {/* <Card.Header className='sm-header'>\r\n                            <span style={{ display: \"inline-block\" }} >\r\n                                <h4>{this.props.intl.formatMessage({ id: \"IDS_PARAMETER\" })}</h4>\r\n                            </span>\r\n                        </Card.Header> */}\r\n                        {/* {TestGroupTestParameter && TestGroupTestParameter.length > 0 && */}\r\n                        {/* <PerfectScrollbar> */}\r\n                       \r\n                        <TestGroupTestTab\r\n                            paneHeight={this.state.paneHeight}\r\n                            testView={this.state.testView}\r\n                            isrulesenginerequired={this.props.Login.masterData.isrulesenginerequired&&\r\n                                this.props.Login.masterData.isrulesenginerequired===transactionStatus.YES?true:false}\r\n                            masterData={this.props.Login.masterData}\r\n                            inputParam={this.props.Login.inputParam}\r\n                            userInfo={this.props.Login.userInfo}\r\n                            userRoleControlRights={this.state.userRoleControlRights}\r\n                            esignRights={this.props.Login.userRoleControlRights}\r\n                            screenName={this.props.Login.screenName}\r\n                            openChildModal={this.props.Login.openChildModal}\r\n                            operation={this.props.Login.operation}\r\n                            loadEsign={this.props.Login.loadEsign}\r\n                            testGroupInputData={this.props.Login.testGroupInputData}\r\n                            parameterData={this.props.Login.parameterData}  \r\n                            selectedRecord={this.state.selectedRecord}\r\n                            selectedsubcodedresult={this.state.selectedsubcodedresult || []}\r\n                            selectsubcodedelete={this.state.selectsubcodedelete}\r\n                            screenData={this.props.Login.screenData}\r\n                            ncontrolCode={this.props.Login.ncontrolCode}\r\n                            controlMap={this.state.controlMap}\r\n                            testGroupCheckList={this.props.Login.testGroupCheckList}\r\n                            openTemplateModal={this.props.Login.openTemplateModal}\r\n                            editTestGroupTest={this.props.editTestGroupTest}\r\n                            updateStore={this.props.updateStore}\r\n                            crudMaster={this.props.crudMaster}\r\n                            getTestGroupParameter={this.props.getTestGroupParameter}\r\n                            editTestGroupParameter={this.props.editTestGroupParameter}\r\n                            filterData={this.state.filterData}\r\n                            addTestGroupCodedResult={this.props.addTestGroupCodedResult}\r\n                            subCodedResultView={this.props.subCodedResultView}\r\n                            addTestGroupNumericTab={this.props.addTestGroupNumericTab}\r\n                            validateEsignCredential={this.props.validateEsignCredential}\r\n                            filterColumnData={this.props.filterColumnData}\r\n                            viewTestGroupCheckList={this.props.viewTestGroupCheckList}\r\n                            getDataForTestMaterial={this.props.getDataForTestMaterial}\r\n                            materialType={this.props.Login.materialType}\r\n                            getMaterialCategoryBasedMaterialType={this.props.getMaterialCategoryBasedMaterialType}\r\n                            materialCategoryList={this.props.Login.materialCategoryList}\r\n                            materialList={this.props.Login.materialList}\r\n                            getMaterialBasedMaterialCategory={this.props.getMaterialBasedMaterialCategory}\r\n                            getTestGroupMaterial={this.props.getTestGroupMaterial}\r\n                            getDataForEditTestMaterial={this.props.getDataForEditTestMaterial}\r\n                            dataState={this.state.clinicalspecDataState}\r\n                            dataStateChange={this.specDataStateChange}\r\n                            getTestGroupRulesEngineAdd={this.getTestGroupRulesEngineAdd}\r\n                            settings={this.props.Login.settings}\r\n                            skip={this.state.testskip}\r\n                            take={this.state.testtake}\r\n                            getEditTestGroupRulesEngine={this.props.getEditTestGroupRulesEngine}\r\n                            getSelectedTestGroupRulesEngine={this.props.getSelectedTestGroupRulesEngine}\r\n                            ConfirmDeleteRule={this.ConfirmDeleteRule}\r\n                            approveVersion={(masterdata, nflag) => this.approveVersion(masterdata, nflag)}\r\n                            openflowview={(props)=>this.openflowview(props)}\r\n                            handlePageChangeRuleEngine={(event) => this.handlePageChangeRuleEngine(event)}\r\n                            skipRulesEngine={this.state.skipRulesEngine}\r\n                            takeRulesEngine={this.state.takeRulesEngine}\r\n                            viewOutcome={ (props)=>this.viewOutcome(props)}\r\n                            filterParamRulesEngine={ filterParamRulesEngine}\r\n                            filterTransactionList={this.props.filterTransactionList} \r\n                            saveExecutionOrder={(props)=>this.props.saveExecutionOrder(props,this.props.Login.masterData,this.props.Login.userInfo)}  \r\n                        />\r\n                        {/* </PerfectScrollbar>\r\n                     } */}\r\n                    </Card>\r\n                </ContentPanel>\r\n            </>\r\n\r\n        const mainDesign =\r\n            <SplitterLayout\r\n                customClassName={this.state.testView ? \"detailed-inner\" : \"detailed-inner no-height \"}\r\n                vertical={this.state.testView ? false : true}\r\n                borderColor=\"#999\"\r\n                primaryIndex={1}\r\n                percentage={true}\r\n                //secondaryInitialSize={this.state.testView ? 600 : this.state.fixefScrollHeight}\r\n                secondaryInitialSize={37}\r\n                primaryMinSize={30}\r\n                secondaryMinSize={37}\r\n            >\r\n                {testDesign}{paramDesign}\r\n            </SplitterLayout >\r\n\r\n\r\n        // const testDesign = this.state.testView ?\r\n        //     <SplitterLayout\r\n        //         customClassName=\"detailed-inner\"\r\n        //         borderColor=\"#999\"\r\n        //         primaryIndex={1}>\r\n        //         {tempDesign}{paramDesign}\r\n        //     </SplitterLayout>\r\n        //     :\r\n        //     <SplitterLayout\r\n        //         customClassName=\"detailed-inner no-height\"\r\n        //         vertical\r\n        //         borderColor=\"#999\"\r\n        //         primaryIndex={1}\r\n        //         // onSecondaryPaneSizeChange={this.verticalPaneSizeChange}\r\n        //         secondaryInitialSize={this.state.fixefScrollHeight}\r\n        //     >\r\n        //         <ContentPanel>\r\n        //             {tempDesign}\r\n        //         </ContentPanel>\r\n\r\n        //         {paramDesign}\r\n        //     </SplitterLayout>\r\n\r\n        return (\r\n            <>\r\n                {/* <ReactTooltip place=\"bottom\" globalEventOff='click' id=\"tooltip-list-wrap\" /> */}\r\n                {/* screen-height-window active_seperator */}\r\n                <ListWrapper className=\"client-listing-wrap mtop-4 screen-height-window\">\r\n                    {this.breadCrumbData && this.breadCrumbData.length > 0 &&\r\n                        <BreadcrumbComponent\r\n                            breadCrumbItem={this.breadCrumbData}\r\n                        />}\r\n                    <Row noGutters>\r\n                        <Col md={12} className=\"parent-port-height sticky_head_parent\" ref={(parentHeight) => { this.parentHeight = parentHeight }}>\r\n                            <SplitterLayout\r\n                                borderColor=\"#999\"\r\n                                primaryIndex={1}\r\n                                percentage={true}\r\n                                secondaryInitialSize={30}\r\n                            //customClassName=\"fixed_list_height\"\r\n                            >\r\n                                <div className={`${this.state.showModalBg ? 'show_modal_bg fixed_list_height' : 'fixed_list_height'}`}>\r\n                                    <div className=\"sticky_head\">\r\n                                        <SearchAdd className=\"border fixed_ico_list title_grp_custom\">\r\n                                            <h4>{this.props.intl.formatMessage({ id: \"IDS_PROFILETREE\" })}</h4>\r\n                                            <div className=\"icon_group_right_aligned\">\r\n                                                <AdvFilter\r\n                                                    filterComponent={[{\r\n                                                        \"IDS_SAMPLEFILTER\":\r\n                                                            <SampleFilter\r\n                                                                genericLabel={this.props.Login.genericLabel}\r\n                                                                userInfo={this.props.Login.userInfo} \r\n                                                                sampleType={this.state.sampleType}\r\n                                                                treeVersionTemplate={this.state.treeVersionTemplate}\r\n                                                                productCategory={this.state.productCategory}\r\n                                                                product={this.state.product}\r\n                                                                projectType={this.state.projectType}\r\n                                                                project={this.state.project}\r\n                                                                onFilterComboChange={this.onFilterComboChange}\r\n                                                                tempFilterData={this.state.tempFilterData}\r\n                                                            >\r\n                                                            </SampleFilter>,\r\n                                                        needActionStrip: false\r\n                                                    }]}\r\n                                                    onFilterSubmit={this.onFilterSumbit}\r\n                                                    showModalBg={(e) => this.setState({ showModalBg: e })}\r\n                                                />\r\n\r\n                                                <ProductList className=\"d-flex product-category float-right icon-group-wrap\">\r\n                                                    {/* <Tooltip position=\"bottom\" anchorElement=\"target\" openDelay={100} parentTitle={true}> */}\r\n                                                    <Button className=\"btn btn-icon-rounded btn-circle solid-blue mr-1\" role=\"button\"\r\n                                                        hidden={this.state.userRoleControlRights.indexOf(addTreeId) === -1}\r\n                                                        onClick={() => this.props.createTree(this.state.filterData, this.props.Login.userInfo, this.props.Login.masterData, addTreeId)}\r\n                                                        data-tip={this.props.intl.formatMessage({ id: \"IDS_ADD\" })}\r\n                                                    //  data-for=\"tooltip-list-wrap\"\r\n                                                    >\r\n                                                        <FontAwesomeIcon icon={faPlus} />\r\n                                                    </Button>\r\n\r\n                                                    <Nav.Link className=\"btn btn-circle outline-grey mr0 mr-1\" name=\"edittestname\"\r\n                                                        hidden={this.state.userRoleControlRights.indexOf(editTreeId) === -1}\r\n                                                        data-tip={this.props.intl.formatMessage({ id: \"IDS_EDIT\" })}\r\n                                                        //  data-for=\"tooltip-list-wrap\"\r\n                                                        onClick={() => this.props.editTree(\"update\", selectedNode, this.props.Login.userInfo, editTreeId, this.state.filterData,\r\n                                                            this.props.Login.masterData)}>\r\n                                                        <FontAwesomeIcon icon={faPencilAlt} />\r\n                                                    </Nav.Link>\r\n                                                    <Nav.Link name=\"deleteLink\"\r\n                                                        hidden={this.state.userRoleControlRights.indexOf(deleteTreeId) === -1}\r\n                                                        data-tip={this.props.intl.formatMessage({ id: \"IDS_DELETE\" })}\r\n                                                        // data-for=\"tooltip-list-wrap\"\r\n                                                        className=\"btn btn-circle outline-grey \"\r\n                                                        onClick={() => this.ConfirmDelete({ ...deleteTree })}>\r\n                                                        <FontAwesomeIcon icon={faTrashAlt} />\r\n                                                        {/* <ConfirmDialog\r\n                                                            name=\"deleteMessage\"\r\n                                                            message={this.props.intl.formatMessage({ id: \"IDS_DEFAULTCONFIRMMSG\" })}\r\n                                                            doLabel={this.props.intl.formatMessage({ id: \"IDS_OK\" })}\r\n                                                            doNotLabel={this.props.intl.formatMessage({ id: \"IDS_CANCEL\" })}\r\n                                                            icon={faTrashAlt}\r\n                                                            title={this.props.intl.formatMessage({ id: \"IDS_DELETE\" })}\r\n                                                            hidden={this.state.userRoleControlRights.indexOf(deleteTreeId) === -1}\r\n                                                            handleClickDelete={() => this.deleteRecord({ ...deleteTree })}\r\n                                                        /> */}\r\n                                                    </Nav.Link>\r\n                                                    <Button className=\"btn btn-circle outline-grey ml-1\" variant=\"link\"\r\n                                                        onClick={() => this.reloadData()}\r\n                                                        // data-for=\"tooltip-list-wrap\"\r\n                                                        data-tip={this.props.intl.formatMessage({ id: \"IDS_REFRESH\" })}>\r\n                                                        <FontAwesomeIcon icon={faSync} style={{ \"width\": \"0.6!important\" }} />\r\n                                                    </Button>\r\n                                                    {/* </Tooltip> */}\r\n                                                </ProductList>\r\n\r\n                                            </div>\r\n                                        </SearchAdd>\r\n                                    </div>\r\n                                    <div className=\"sticky_head_scroll_body\" style={{ \"height\": this.state.parentHeight }}>\r\n                                        <PerfectScrollbar>\r\n                                            <FormTreeMenu\r\n                                                data={this.props.Login.masterData.AgaramTree}\r\n                                                hasSearch={false}\r\n                                                handleTreeClick={this.onTreeClick}\r\n                                                initialOpenNodes={OpenNodes}\r\n                                                focusKey={FocusKey || \"\"}\r\n                                                activeKey={ActiveKey || \"\"}\r\n                                            />\r\n                                            <TransationListMaster\r\n                                                notSearchable={true}\r\n                                                titleHead={this.props.intl.formatMessage({ id: \"IDS_SPECIFICATION\" })}\r\n                                                titleClasses=\"title_grp_custom fixed_ico_list\"\r\n                                                masterList={TestGroupSpecification || []}\r\n                                                selectedMaster={[SelectedSpecification]}\r\n                                                needMultiSelect={false}\r\n                                                primaryKeyField=\"nallottedspeccode\"\r\n                                                getMasterDetail={(spec) => this.props.getComponentBySpecId({ ...getComponent, selectedRecord: spec, historyDataState: this.state.historyDataState }, this.props.Login.masterData, this.searchRef)}\r\n                                                mainField=\"sspecname\"\r\n                                                selectedListName=\"testgroupspecification\"\r\n                                                objectName=\"testgroupspecification\"\r\n                                                listName=\"IDS_SPECIFICATION\"\r\n                                                onFilterSumbit={this.onFilterSumbit}\r\n                                                subFields={this.specSubField}\r\n                                                actionIcons={\r\n                                                    [\r\n                                                        {\r\n                                                            title: this.props.intl.formatMessage({ id: \"IDS_EDIT\" }),\r\n                                                            controlname: \"faPencilAlt\",\r\n                                                            objectName: \"testgroupspecification\",\r\n                                                            hidden: this.state.userRoleControlRights.indexOf(editSpecId) === -1,\r\n                                                            inputData: { masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo },\r\n                                                            onClick: (props) => this.props.addSpecification(\"update\", { ...editSpecParam, ...props }, editSpecId)\r\n                                                        },\r\n                                                        {\r\n                                                            title: this.props.intl.formatMessage({ id: \"IDS_DELETE\" }),\r\n                                                            controlname: \"faTrashAlt\",\r\n                                                            objectName: \"testgroupspecification\",\r\n                                                            hidden: this.state.userRoleControlRights.indexOf(deleteSpecId) === -1,\r\n                                                            inputData: { masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo },\r\n                                                            onClick: (props) => confirmMessage.confirm(\r\n                                                                \"deleteMessage\",\r\n                                                                this.props.intl.formatMessage({ id: \"IDS_DELETE\" }),\r\n                                                                this.props.intl.formatMessage({ id: \"IDS_DEFAULTCONFIRMMSG\" }),\r\n                                                                this.props.intl.formatMessage({ id: \"IDS_OK\" }),\r\n                                                                this.props.intl.formatMessage({ id: \"IDS_CANCEL\" }),\r\n                                                                () => this.deleteSpecRecord({ props, ...specDeleteParam, selectedRecord: SelectedSpecification, ncontrolCode: deleteSpecId })\r\n                                                            )\r\n                                                        }\r\n                                                    ]\r\n                                                }\r\n                                                needFilter={false}\r\n                                                commonActions={\r\n                                                    <>\r\n                                                        {/* <ReactTooltip place=\"bottom\" /> */}\r\n                                                        <Button className=\"btn btn-icon-rounded btn-circle solid-blue\" role=\"button\"\r\n                                                            hidden={this.state.userRoleControlRights.indexOf(addSpecId) === -1}\r\n                                                            data-tip={this.props.intl.formatMessage({ id: \"IDS_ADD\" })}\r\n                                                            //  data-for=\"tooltip-list-wrap\"\r\n                                                            onClick={() => this.props.addSpecification(\"create\", { ...addSpecParam }, addSpecId, this.props.Login.masterData)}>\r\n                                                            <FontAwesomeIcon icon={faPlus}\r\n                                                            // title={this.props.intl.formatMessage({ id: \"IDS_ADD\" })}\r\n                                                            />\r\n                                                        </Button>\r\n                                                    </>\r\n                                                }\r\n                                                hideSearch={false}\r\n                                                hidePaging={true}\r\n                                            />\r\n                                            {SelectedSpecification && SelectedSpecification.ncomponentrequired === transactionStatus.YES &&\r\n                                                <TransationListMaster\r\n                                                    notSearchable={true}\r\n                                                    titleHead={this.props.Login.genericLabel && this.props.Login.genericLabel[\"Component\"][\"jsondata\"][\"sdisplayname\"][this.props.Login.userInfo.slanguagetypecode]}\r\n                                                    titleClasses=\"title_grp_custom fixed_ico_list\"\r\n                                                    masterList={TestGroupSpecSampleType || []}\r\n                                                    selectedMaster={[SelectedComponent]}\r\n                                                    needMultiSelect={false}\r\n                                                    primaryKeyField=\"nspecsampletypecode\"\r\n                                                    getMasterDetail={(event) => this.componentRowClick(event)}\r\n                                                    mainField=\"scomponentname\"\r\n                                                    selectedListName=\"testgroupspecsampletype\"\r\n                                                    objectName=\"testgroupspecsampletype\"\r\n                                                    listName={this.props.Login.genericLabel && this.props.Login.genericLabel[\"Component\"][\"jsondata\"][\"sdisplayname\"][this.props.Login.userInfo.slanguagetypecode] }\r\n                                                    actionIcons={\r\n                                                        [\r\n                                                            {\r\n                                                                title: this.props.intl.formatMessage({ id: \"IDS_DELETE\" }),\r\n                                                                // data-tip={this.props.intl.formatMessage({ id: \"IDS_ADD\" })}\r\n                                                                controlname: \"faTrashAlt\",\r\n                                                                objectName: \"testgroupspecsampletype\",\r\n                                                                hidden: this.state.userRoleControlRights.indexOf(deleteComponentId) === -1,\r\n                                                                inputData: { masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo },\r\n                                                                onClick: (props) => confirmMessage.confirm(\r\n                                                                    \"deleteMessage\",\r\n                                                                    this.props.intl.formatMessage({ id: \"IDS_DELETE\" }),\r\n                                                                    this.props.intl.formatMessage({ id: \"IDS_DEFAULTCONFIRMMSG\" }),\r\n                                                                    this.props.intl.formatMessage({ id: \"IDS_OK\" }),\r\n                                                                    this.props.intl.formatMessage({ id: \"IDS_CANCEL\" }),\r\n                                                                    () => this.deleteMultipleRecord({ props, ncontrolCode: deleteComponentId })\r\n                                                                )\r\n                                                            }\r\n                                                        ]\r\n                                                    }\r\n                                                    commonActions={\r\n                                                        <>\r\n                                                            {/* <ReactTooltip place=\"bottom\" /> */}\r\n                                                            <Button className=\"btn btn-icon-rounded btn-circle solid-blue\" role=\"button\"\r\n                                                                hidden={this.state.userRoleControlRights.indexOf(addComponentId) === -1}\r\n                                                                data-tip={this.props.intl.formatMessage({ id: \"IDS_ADD\" })}\r\n                                                                //  data-for=\"tooltip-list-wrap\"\r\n                                                                // title={this.props.intl.formatMessage({ id: \"IDS_ADD\" })}\r\n                                                                onClick={() => this.props.addComponent(SelectedSpecification, this.props.Login.userInfo, addComponentId, this.props.Login.masterData,this.props.Login.genericLabel)}>\r\n                                                                <FontAwesomeIcon icon={faPlus}\r\n                                                                // title={this.props.intl.formatMessage({ id: \"IDS_ADD\" })} \r\n                                                                />\r\n                                                            </Button>\r\n\r\n                                                        </>\r\n                                                    }\r\n                                                    hidePaging={true}\r\n                                                />}\r\n                                        </PerfectScrollbar>\r\n                                    </div>\r\n                                </div>\r\n                                <>\r\n                                    {this.state.testView ?\r\n                                        <>\r\n                                            {specDesign}\r\n                                            {this.state.showTest ?\r\n                                                <div>\r\n                                                    {mainDesign}\r\n                                                </div>\r\n                                                : \"\"}\r\n                                        </>\r\n                                        :\r\n                                        <PerfectScrollbar>\r\n                                            {specDesign}\r\n                                            {this.state.showTest ?\r\n                                                <div>\r\n                                                    {mainDesign}\r\n                                                </div>\r\n                                                : \"\"}\r\n                                        </PerfectScrollbar>\r\n                                    }\r\n\r\n\r\n                                </>\r\n                            </SplitterLayout>\r\n                        </Col>\r\n                    </Row>\r\n                </ListWrapper>\r\n                {\r\n                    this.props.Login.openModal && this.props.Login.screenName &&\r\n                    <SlideOutModal\r\n                        show={this.props.Login.openModal}\r\n                        closeModal={this.closeModal}\r\n                        className={this.props.Login.screenName === \"IDS_VIEWRULE\"  ? \"wide-popup\" : \"\"}\r\n                        operation={this.props.Login.screenName === \"IDS_VIEWRULE\"||this.props.Login.screenName === \"IDS_VIEWOUTCOME\" ? \"\" : this.props.Login.operation}\r\n                        inputParam={this.props.Login.inputParam}\r\n                        screenName={ this.props.Login.screenName === \"IDS_VIEWRULE\"||this.props.Login.screenName === \"IDS_VIEWOUTCOME\" ?this.props.intl.formatMessage({id: this.props.Login.screenName})\r\n                        +\" - \"+this.props.Login.masterData.SelectedTest.stestsynonym:this.props.Login.screenName}\r\n                        esign={this.props.Login.loadEsign}\r\n                        validateEsign={this.validateEsign}\r\n                        onSaveClick={this.onSaveClick}\r\n                        hideSave={this.props.Login.screenName === \"IDS_VIEWRULE\"||this.props.Login.screenName === \"IDS_VIEWOUTCOME\" ||this.props.Login.screenName === \"IDS_SUBCODERESULT\"  ? true : false}\r\n                        size={this.props.Login.screenName === \"IDS_VIEWRULE\" ||this.props.Login.screenName === \"IDS_VIEWOUTCOME\"  ? 'xl' : \"lg\"}\r\n                        selectedRecord={this.state.selectedRecord || {}}\r\n                        mandatoryFields={\r\n                            this.props.Login.screenName === \"IDS_SPECFILE\" ? this.findMandatoryFields(this.props.Login.screenName, this.state.selectedRecord)\r\n                                : this.props.Login.screenName === \"IDS_SPECIFICATION\" ? specMandatoryFields\r\n                                    : this.props.Login.screenName ===this.props.Login.genericLabel[\"Component\"][\"jsondata\"][\"sdisplayname\"][this.props.Login.userInfo.slanguagetypecode] ? compMandatoryFields\r\n                                        : this.props.Login.screenName === \"IDS_EDITTESTGROUPTEST\" ? editTestMandatoryFields\r\n                                            : this.props.Login.screenName === \"IDS_TEST\" ? addTestMandatoryFields\r\n                                                : this.props.Login.screenName === \"IDS_PROFILETREE\" || this.props.Login.screenName === \"IDS_EDITTREE\"\r\n                                                    ? this.props.Login.treeMandatoryFields : []}\r\n                        addComponent={this.props.Login.loadEsign ?\r\n                            <Esign\r\n                                operation={this.props.Login.operation}\r\n                                onInputOnChange={this.onEsignInputOnChange}\r\n                                inputParam={this.props.Login.inputParam}\r\n                                selectedRecord={this.state.selectedRecord || {}}\r\n                            /> :\r\n                            this.props.Login.screenName === \"IDS_SPECIFICATION\" ?\r\n                                <AddTestGroupSpecification\r\n                                   genericLabel={this.props.Login.genericLabel}\r\n                                     userInfo={this.props.Login.userInfo}\r\n                                    selectedRecord={this.state.selectedRecord || {}}\r\n                                    timeZoneList={this.props.Login.timeZoneList}\r\n                                    onInputOnChange={this.onInputOnChange}\r\n                                    handleDateChange={this.handleDateChange}\r\n                                    onComboChange={this.onComboChange}\r\n                                    screenName={this.props.Login.screenName}\r\n                                    operation={this.props.Login.operation}\r\n                                    nsampletypecode={this.props.Login.masterData.selectedNode.nsampletypecode}\r\n                                    settings={this.props.Login.settings}\r\n                                    tempFilterData = {this.state.tempFilterData}\r\n                                /> :\r\n                                this.props.Login.screenName ===this.props.Login.genericLabel[\"Component\"][\"jsondata\"][\"sdisplayname\"][this.props.Login.userInfo.slanguagetypecode] ?\r\n                                    <AddTestGroupTest\r\n                                         genericLabel={this.props.Login.genericLabel}\r\n                                        userInfo={this.props.Login.userInfo}\r\n                                        selectedRecord={this.state.selectedRecord || {}}\r\n                                        testGroupInputData={this.props.Login.testGroupInputData}\r\n                                        screenName={this.props.Login.screenName}\r\n                                        onComboChange={this.onComboChange}\r\n                                        onFilterComboChange={this.onFilterComboChange}\r\n                                    /> :\r\n\r\n\r\n                                    this.props.Login.screenName === \"IDS_SUBCODERESULT\" ?\r\n                                    <ViewSubCodedResult\r\n                                        selectedRecord={this.state.selectedsubcoderesult || {}}\r\n                                        selectedsubcoderesult={this.props.Login.selectedsubcoderesult||[]}\r\n                                        screenName={this.props.Login.screenName}\r\n                                        onComboChange={this.onComboChange}\r\n                                        onFilterComboChange={this.onFilterComboChange}\r\n                                    /> :\r\n\r\n                                    this.props.Login.screenName === \"IDS_PROFILETREE\" ?\r\n                                        <AddProfileTree\r\n                                            selectedRecord={this.state.selectedRecord || {}}\r\n                                            onInputOnChange={this.onInputOnChange}\r\n                                            treetempTranstestGroup={this.props.Login.TreetempTranstestGroup}\r\n                                        /> :\r\n                                        this.props.Login.screenName === \"IDS_SPECFILE\" ?\r\n                                            <AddFile\r\n                                                selectedRecord={this.state.selectedRecord || {}}\r\n                                                onInputOnChange={this.onInputOnChange}\r\n                                                actionType={this.state.actionType}\r\n                                                onDrop={this.onDropSpecFile}\r\n                                                deleteAttachment={this.deleteAttachment}\r\n                                                linkMaster={this.props.Login.linkMaster}\r\n                                                editFiles={this.props.Login.editFiles}\r\n                                                maxSize={20}\r\n                                                maxFiles={this.props.Login.operation === \"update\" ? 1 : 1}\r\n                                                multiple={this.props.Login.operation === \"update\" ? false : true}\r\n                                                label={this.props.intl.formatMessage({ id: \"IDS_SPECFILE\" })}\r\n                                                hideDefaultToggle={true}\r\n                                                name=\"specfilename\"\r\n                                            /> :\r\n                                            this.props.Login.screenName === \"IDS_EDITTREE\" ?\r\n                                                <Row>\r\n                                                    <Col md={12}>\r\n                                                        <FormInput\r\n                                                            name={\"sleveldescription\"}\r\n                                                            label={this.state.selectedRecord.slabelname}\r\n                                                            type=\"text\"\r\n                                                            onChange={(event) => this.onInputOnChange(event, 1)}\r\n                                                            placeholder={this.state.selectedRecord.slabelname}\r\n                                                            value={this.state.selectedRecord ? this.state.selectedRecord[\"sleveldescription\"] : \"\"}\r\n                                                            isMandatory=\"*\"\r\n                                                            required={true}\r\n                                                            maxLength={100}\r\n                                                        />\r\n                                                    </Col>\r\n                                                </Row> :\r\n                                                this.props.Login.screenName === \"IDS_TEST\" ?\r\n                                                    <AddTestGroupTest\r\n                                                    genericLabel={this.props.Login.genericLabel}\r\n                                                    userInfo={this.props.Login.userInfo}\r\n                                                        selectedRecord={this.state.selectedRecord || {}}\r\n                                                        testGroupInputData={this.props.Login.testGroupInputData}\r\n                                                        screenName={this.props.Login.screenName}\r\n                                                        onComboChange={this.onComboChange}\r\n                                                        onFilterComboChange={this.onFilterComboChange}\r\n                                                    /> : this.props.Login.screenName === \"IDS_EDITTESTGROUPTEST\" ?\r\n                                                        <EditTestGroupTest\r\n                                                            selectedRecord={this.state.selectedRecord || {}}\r\n                                                            testGroupInputData={this.props.Login.testGroupInputData}\r\n                                                            onComboChange={this.onComboChange}\r\n                                                            onInputOnChange={this.onInputOnChange}\r\n                                                            onNumericInputChange={this.onNumericInputChange}\r\n                                                        /> : this.props.Login.screenName === \"IDS_VIEWRULE\" ?\r\n                                                            <Row>\r\n                                                                <Col md={12}>\r\n                                                                    <OrgTree\r\n                                                                        data={this.ruleflowobject()}\r\n                                                                        horizontal={true}\r\n                                                                        collapsable={true}\r\n                                                                        expandAll={true}\r\n                                                                        labelClassName={\"ruletree\"}\r\n                                                                    /> \r\n                                                                </Col>\r\n                                                            </Row>\r\n                                                               \r\n                                                            :  this.props.Login.screenName === \"IDS_VIEWOUTCOME\" ?\r\n                                                            <Row>\r\n                                                                <Col md={12}> \r\n                                                                    {this.props.Login.masterData.SelectedRulesEngine &&\r\n                                                                <CustomTab tabDetail={this.tabDetailRulesEngine()} onTabChange={this.onTabChangeRulesEngine} /> }\r\n                                                                </Col>\r\n                                                            </Row>:\"\"\r\n                        }\r\n                    />\r\n                }\r\n                {\r\n                    this.props.Login.openPortalModal &&\r\n                    <PortalModalSlideout\r\n                        show={this.props.Login.openPortalModal}\r\n                        closeModal={this.closePortalModal}\r\n                        screenName={this.props.intl.formatMessage({ id:this.props.Login.screenName})+\" - \"+this.props.Login.masterData.SelectedTest.stestsynonym}\r\n                        handleSaveClick={this.save}\r\n                        addComponent={\r\n                            (this.props.Login.operation === 'update' ? this.state.selectedRecord['groupList'] : true) &&\r\n                            <AddTestGroupRule\r\n                                productCategoryList={this.state.ProductCategoryList || []}\r\n                                selectedRecord={this.state.selectedRecord || {}}\r\n                                databaseTableList={this.props.Login.databaseTableList}\r\n                                tableColumnList={this.state.tableColumnList}\r\n                                specificationOptions={this.state.TestGroupSpecificationList || []}\r\n                                componentOptions={this.state.ComponentList || []}\r\n                                foreignTableList={this.state.foreignTableList || []}\r\n                                foreignTableColumnList={this.props.Login.foreignTableColumnList || []}\r\n                                count={this.state.count}\r\n                                foreignTableCount={this.state.foreignTableCount}\r\n                                sqlQuery={this.state.sqlQuery}\r\n                                userInfo={this.props.Login.userInfo}\r\n                                onInputChange={this.onInputChange}\r\n                                deleteRule={this.deleteRule}\r\n                                clearRule={this.clearRule}\r\n                                resetRule={this.resetRule}\r\n                                onSymbolChange={this.onSymbolChange}\r\n                                onRuleChange={this.onRuleChange}\r\n                                addRule={this.addRule}\r\n                                addTest={this.addTest}\r\n                                onConditionClick={this.onConditionClick}\r\n                                onMasterDataChange={this.onMasterDataChange}\r\n                                databaseviewList={this.props.Login.databaseviewList}\r\n                                addRuleList={this.props.Login.addRuleList || []}\r\n                                rulesOption={this.props.Login.masterData.rulesOption&&this.props.Login.masterData.rulesOption.filter(this.outComeTestsRemoveFromRules)}\r\n                                masterdata={this.props.Login.masterdata}\r\n                                switchRecord={this.state.switchRecord}\r\n                                data={this.state.data}\r\n                                dataResult={this.state.dataResult || []}\r\n                                dataState={this.state.dataState}\r\n                                dataStateChange={this.dataStateChange}\r\n                                userRoleControlRights={this.state.userRoleControlRights}\r\n                                gridColumnList={this.props.Login.gridColumnList || []}\r\n                                queryType={this.state.queryType}\r\n                                addAggregateList={this.props.Login.addAggregateList || []}\r\n                                addOrderbyList={this.props.Login.addOrderbyList || []}\r\n                                addGroup={this.addGroup}\r\n                                addGroupList={this.props.Login.addGroupList || []}\r\n                                onFilterComboChange={this.onFilterComboChange}\r\n                                selectFields={this.props.Login.selectFields || []}\r\n                                SelectedProductCategory={this.props.Login.masterData.SelectedProductCategory}\r\n                                DiagnosticCaseList={this.props.Login.masterData.DiagnosticCaseList}\r\n                                GradeList={this.props.Login.masterData.GradeList}\r\n                                PredefinedParameterOptions={this.props.Login.masterData.PredefinedParameterOptions} \r\n                                siteList={this.props.Login.masterData.siteList}\r\n                                resultTypeList={this.props.Login.masterData.resultTypeList}\r\n                                isResultorOrderType={this.state.isResultorOrderType}\r\n                                optionsByRule={this.state.optionsByRule || this.props.Login.masterData.DiagnosticCaseList}\r\n                                changePropertyView={this.changePropertyView}\r\n                                splitChangeWidthPercentage={this.state.splitChangeWidthPercentage}\r\n                                activeTabIndex={this.props.Login.activeTabIndex}\r\n                                enablePropertyPopup={this.state.enablePropertyPopup}\r\n                                propertyPopupWidth={this.state.propertyPopupWidth}\r\n                                controlMap={this.state.controlMap}\r\n                                sectionDataState={this.state.sectionDataState}\r\n                                masterData={this.props.Login.masterData}\r\n                                intl={this.props.intl}\r\n                                addOutcomeList={this.props.Login.addOutcomeList && this.props.Login.addOutcomeList || []}\r\n                                deleteOutcome={this.deleteOutcome}\r\n                                onmodalComboChange={this.onmodalComboChange}\r\n                                openModalPopup={this.props.Login.openModalPopup}\r\n                                closeModalShow={this.closeModalShow}\r\n                                modalsaveClick={this.modalsaveClick}\r\n                                getOutcomeDetails={this.getOutcomeDetails}\r\n                                addModalSite={this.addModalSite}\r\n                                action={this.props.Login.action}\r\n                                deletModalSite={this.deletModalSite}\r\n                                deleteModalTest={this.deleteModalTest}\r\n                                activeTestTab={this.props.Login.activeTestTab}\r\n                                testcomments={this.props.Login.testcomments}\r\n                                reportcomments={this.props.Login.reportcomments}\r\n                                addComments={this.addComments}\r\n                                CommentType={this.props.Login.CommentType}\r\n                                CommentSubType={this.props.Login.CommentSubType}\r\n                                isneedsgeneralcomments={this.state.isneedsgeneralcomments}\r\n                                predefcomments={this.props.Login.predefcomments}\r\n                                needoutsource={this.state.selectedRecord['needoutsource'] && this.state.selectedRecord['needoutsource'] === 3 ? true : false}\r\n                                openmodalsavePopup={this.props.Login.openmodalsavePopup}\r\n                                save={this.save}\r\n                                dataStateObject={this.state.dataStateObject}\r\n                                paneSizeChange={this.paneSizeChange}\r\n                                testInitiateTestCombo={this.props.Login.testInitiateTestCombo && this.viewColumnListByRule(this.props.Login.testInitiateTestCombo)}\r\n                                testCommentsTestCombo={this.props.Login.testCommentsTestCombo && this.viewColumnListByRule(this.props.Login.testCommentsTestCombo)}\r\n                                testRepeatTestCombo={this.props.Login.testRepeatTestCombo && this.viewColumnListByRule(this.props.Login.testRepeatTestCombo)}\r\n                                testenforceTestCombo={this.props.Login.testenforceTestCombo &&this.props.Login.testenforceTestCombo}\r\n                                dataStateChangetestRepeat={this.dataStateChangetestRepeat}\r\n                                dataStateChangetestEnforce={this.dataStateChangetestEnforce}\r\n                                dataStatetestEnforce={this.state.dataStatetestEnforce}\r\n                                dataStatetestRepeat={this.state.dataStatetestRepeat}\r\n                                testGroupTestParameterRulesEngine={this.props.Login.masterData.testGroupTestParameterRulesEngine}\r\n                                onRuleInputChange={this.onRuleInputChange}\r\n                                onRuleNumericInputOnChange={this.onRuleNumericInputOnChange} \r\n                            />\r\n                        }\r\n                    />\r\n                }\r\n            </>\r\n        );\r\n    }\r\n\r\n    ConfirmDelete = (obj) => {\r\n        this.confirmMessage.confirm(\"deleteMessage\", this.props.intl.formatMessage({ id: \"IDS_DELETE\" }), this.props.intl.formatMessage({ id: \"IDS_DEFAULTCONFIRMMSG\" }),\r\n            this.props.intl.formatMessage({ id: \"IDS_OK\" }), this.props.intl.formatMessage({ id: \"IDS_CANCEL\" }),\r\n            () => this.deleteRecord(obj));\r\n    }\r\n\r\n    handlePageChange = (event) => {\r\n        this.setState({\r\n            testskip: event.skip,\r\n            testtake: event.take\r\n        });\r\n    }\r\n\r\n    findMandatoryFields(screenName, selectedRecord) {\r\n        let mandyFields = [];\r\n        if (screenName === \"IDS_SPECFILE\") {\r\n            if (selectedRecord && selectedRecord.nattachmenttypecode === attachmentType.LINK) {\r\n                mandyFields = [\r\n                    { \"idsName\": \"IDS_FILENAME\", \"dataField\": \"slinkfilename\", \"mandatory\": true, \"mandatoryLabel\": \"IDS_CHOOSE\", \"controlType\": \"file\" },\r\n                    { \"idsName\": \"IDS_LINKNAME\", \"dataField\": \"nlinkcode\", \"mandatory\": true, \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" }\r\n                ];\r\n            } else {\r\n                //if (this.props.Login.operation === 'update') {\r\n                mandyFields = [\r\n                    { \"idsName\": \"IDS_FILE\", \"dataField\": \"sfilename\", \"mandatory\": true, \"mandatoryLabel\": \"IDS_CHOOSE\", \"controlType\": \"file\" },\r\n                ];\r\n                // }\r\n            }\r\n        } else {\r\n            return [];\r\n        }\r\n        let finalMandyFields = [];\r\n        mandyFields.forEach(item => item.mandatory === true && finalMandyFields.push(item));\r\n        return finalMandyFields;\r\n    }\r\n\r\n    viewTestFile = (props) => {\r\n        const viewParam = {\r\n            operation: \"view\",\r\n            methodUrl: \"TestGroupTestFile\",\r\n            classUrl: \"testgroup\",\r\n            inputData: {\r\n                ntestgroupfilecode: props.selectedTest ? props.selectedTest.ntestgroupfilecode : 0,\r\n                userinfo: this.props.Login.userInfo,\r\n                testgroupspecification: this.props.Login.masterData.SelectedSpecification,\r\n                ntestgrouptestcode: props.selectedTest ? props.selectedTest.ntestgrouptestcode : 0\r\n            }\r\n        }\r\n        this.props.viewAttachment(viewParam)\r\n    }\r\n\r\n    fileViewIcon = (master) => {\r\n        if (master.ntestgroupfilecode > 0 && master.nlinkcode === transactionStatus.NA) {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    linkViewIcon = (master) => {\r\n        if (master.ntestgroupfilecode > 0 && master.nlinkcode !== transactionStatus.NA) {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    showSpecAndTestInfo() {\r\n        this.setState({ showTest: !this.state.showTest, testView: false })\r\n        this.updateSpiltterLayout()\r\n\r\n    }\r\n    showSpecAndTestInfo1() {\r\n        this.setState({ showTest: !this.state.showTest, testView: true })\r\n        //this.updateSpiltterLayout()\r\n\r\n    }\r\n\r\n    onFilterSumbit = () => {\r\n        const tempFilterData = this.state.tempFilterData;\r\n        if (tempFilterData.nsampletypecode === undefined) {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SAMPLETYPENOTAVAILABLE\" }));\r\n        } else if (tempFilterData.nproductcatcode === \"\") {\r\n            if (tempFilterData.nsampletypecode.item.nformcode === formCode.PRODUCTCATEGORY) {\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_PRODUCTCATEGORYNOTAVAILABLE\" }));\r\n            } else if (tempFilterData.nsampletypecode.item.nformcode === formCode.INSTRUMENTCATEGORY) {\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_INSTRUMENTCATEGORYNOTAVAILABLE\" }));\r\n            } else if (tempFilterData.nsampletypecode.item.nformcode === formCode.MATERIALCATEGORY) {\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_MATERIALCATEGORYNOTAVAILABLE\" }));\r\n            } else {\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_CATEGORYNOTAVAILABLE\" }));\r\n            }\r\n        }\r\n        // else if(tempFilterData.nproductcatcode.item.ncategorybasedflow === transactionStatus.NO){\r\n        else if ((tempFilterData.nproductcatcode.item.ncategorybasedflow === transactionStatus.NO && tempFilterData.nproductcode === \"\" && \r\n        tempFilterData.nsampletypecode.item.ncategorybasedflowrequired === transactionStatus.NO) ||\r\n            (tempFilterData.nproductcatcode.item.ncategorybasedflow === transactionStatus.NO && tempFilterData.nproductcode === undefined  && \r\n                tempFilterData.nsampletypecode.item.ncategorybasedflowrequired === transactionStatus.NO) ) {\r\n            \r\n                if (tempFilterData.nsampletypecode.item.nformcode === formCode.PRODUCTCATEGORY && tempFilterData.nsampletypecode.item.ncategorybasedflowrequired === transactionStatus.NO ) {\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_PRODUCTNOTAVAILABLE\" }));\r\n            } else if (tempFilterData.nsampletypecode.item.nformcode === formCode.INSTRUMENTCATEGORY) {\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_INSTRUMENTNOTAVAILABLE\" }));\r\n            } else if (tempFilterData.nsampletypecode.item.nformcode === formCode.MATERIALCATEGORY) {\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_MATERIALNOTAVAILABLE\" }));\r\n            } else {\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_PRODUCTNOTAVAILABLE\" }));\r\n            }\r\n        }\r\n        // }\r\n        else if (tempFilterData.ntreeversiontempcode === \"\") {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_STUDYPLANTEMPLATEISNOTAVAILABLE\" }));\r\n        } else {\r\n            const inputParam = {\r\n                inputData: {\r\n                    userinfo: this.props.Login.userInfo,\r\n                    nsampletypecode: tempFilterData.nsampletypecode.value,\r\n                    nproductcatcode: tempFilterData.nproductcatcode.value,\r\n                    nproductcode: tempFilterData.nsampletypecode.item.ncategorybasedflowrequired === transactionStatus.YES ? -1 : \r\n                    \r\n                    tempFilterData.nproductcatcode.item.ncategorybasedflow === transactionStatus.YES ? -1 : tempFilterData.nproductcode ? tempFilterData.nproductcode.value : -1,\r\n                    ntreeversiontempcode: tempFilterData.ntreeversiontempcode.value,\r\n                    nprojectmastercode: tempFilterData.nsampletypecode.value === SampleType.PROJECTSAMPLETYPE ?  tempFilterData.nsampletypecode.item.nprojectspecrequired=== transactionStatus.YES ? tempFilterData.nprojectmastercode.value :-1 : -1,\r\n                    filterData: { ...tempFilterData },\r\n                },\r\n                historyDataState: this.state.historyDataState\r\n            }\r\n            this.props.filterTestGroup(inputParam, this.props.Login.masterData, this.searchRef);\r\n        }\r\n    }\r\n\r\n    onTreeClick = (event) => {\r\n        const inputParam = {\r\n            methodUrl: \"TestGroupSpecification\",\r\n            screenName: \"IDS_SPECIFICATION\",\r\n            operation: \"get\",\r\n            keyName: \"treetemplatemanipulation\",\r\n            userinfo: this.props.Login.userInfo,\r\n            selectedRecord: event.item,\r\n            activeKey: event.key,\r\n            focusKey: event.key,\r\n            primaryKey: event.primaryKey,\r\n            historyDataState: this.state.historyDataState\r\n        };\r\n        this.props.getSpecification(inputParam, this.props.Login.masterData, this.searchRef);\r\n    }\r\n\r\n    tabDetail = () => {\r\n        const tabMap = new Map();\r\n        tabMap.set(\"IDS_FILE\",\r\n            <TestGroupSpecFile\r\n                controlMap={this.state.controlMap}\r\n                userRoleControlRights={this.state.userRoleControlRights}\r\n                userInfo={this.props.Login.userInfo}\r\n                inputParam={this.props.Login.inputParam}\r\n                deleteRecord={this.deleteRecord}\r\n                testGroupSpecFile={this.props.Login.masterData.TestGroupSpecFile || []}\r\n                selectedSpecification={this.props.Login.masterData.SelectedSpecification}\r\n                addTestFile={this.addFile}\r\n                editSpecFile={this.props.editSpecFile}\r\n                filterData={this.state.filterData}\r\n                viewTestFile={this.viewTestFile}\r\n                defaultRecord={this.defaultRecord}\r\n                screenName=\"IDS_FILE\"\r\n                viewAttachment={this.props.viewAttachment}\r\n                settings={this.props.Login.settings}\r\n                masterData={this.props.Login.masterData}\r\n            />);\r\n        tabMap.set(\"IDS_SPECIFICATIONHISTORY\",\r\n            <SpecificationHistory\r\n                data={this.props.Login.masterData.TestGroupSpecificationHistory}\r\n                dataResult={process(this.props.Login.masterData.TestGroupSpecificationHistory || [], this.state.historyDataState)}\r\n                dataState={this.state.historyDataState}\r\n                dataStateChange={this.historyDataStateChange}\r\n\r\n                // testGroupSpecificationHistory={this.props.Login.masterData.TestGroupSpecificationHistory}\r\n                // dataState={this.props.Login.screenName === \"IDS_SPECIFICATIONHISTORY\" ? this.state.historyDataState : { skip: 0, take: 10 }}\r\n                controlMap={this.state.controlMap}\r\n                userRoleControlRights={this.state.userRoleControlRights}\r\n                userInfo={this.props.Login.userInfo}\r\n                inputParam={this.props.Login.inputParam}\r\n                screenName=\"IDS_SPECIFICATIONHISTORY\"\r\n            />);\r\n        return tabMap;\r\n    }\r\n\r\n    historyDataStateChange = (event) => {\r\n        this.setState({\r\n            dataResult: process(this.props.Login.masterData.TestGroupSpecificationHistory || [], event.dataState),\r\n            historyDataState: event.dataState\r\n        });\r\n    }\r\n    specDataStateChange = (event) => {\r\n        this.setState({\r\n            dataResult: process(this.props.Login.masterData.TestGroupTestClinicalSpec || [], event.dataState),\r\n            clinicalspecDataState: event.dataState\r\n        });\r\n    }\r\n    addFile = (userInfo, operation, ncontrolCode, screenName, modalName, nflag) => {\r\n        // const testgroupspecification = this.props.Login.masterData.SelectedSpecification;\r\n        // if (testgroupspecification.napprovalstatus === transactionStatus.DRAFT\r\n        //     || testgroupspecification.napprovalstatus === transactionStatus.CORRECTION) {\r\n        //     this.props.addTestFile(userInfo, operation, ncontrolCode, screenName, modalName, nflag);\r\n        // } else {\r\n        //     toast.warn(this.props.intl.formatMessage({ id: \"IDS_SPECIFICATIONSTATUSMUSTBEDRAFTCORRECTION\" }));\r\n        // }\r\n\r\n        const masterData = this.props.Login.masterData;\r\n        const treeVersionTemplateIndex = masterData[\"TreeVersionTemplate\"].findIndex(\r\n            x => x[\"ntreeversiontempcode\"] === masterData.selectedNode[\"ntreeversiontempcode\"]);\r\n\r\n        const templateVersionStatus = masterData[\"TreeVersionTemplate\"][treeVersionTemplateIndex].ntransactionstatus\r\n        if (templateVersionStatus === transactionStatus.RETIRED) {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTEDTEMPLATEISRETIRED\" }));\r\n        }\r\n        else {\r\n            const testgroupspecification = this.props.Login.masterData.SelectedSpecification;\r\n            if (testgroupspecification.napprovalstatus === transactionStatus.DRAFT\r\n                || testgroupspecification.napprovalstatus === transactionStatus.CORRECTION) {\r\n                this.props.addTestFile(userInfo, operation, ncontrolCode, screenName, modalName);\r\n            } else {\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_SPECIFICATIONSTATUSMUSTBEDRAFTCORRECTION\" }));\r\n            }\r\n        }\r\n    }\r\n\r\n    onTabChange = (tabProps) => {\r\n        const screenName = tabProps.screenName;\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { screenName }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    componentRowClick = (event) => {\r\n        let masterData = this.props.Login.masterData;\r\n        masterData[\"SelectedComponent\"] = event.testgroupspecsampletype[0];\r\n        const inputParam = {\r\n            testgroupspecsampletype: event.testgroupspecsampletype[0],\r\n            userInfo: this.props.Login.userInfo\r\n        };\r\n        this.props.getTestGroupComponentDetails(inputParam, masterData, this.searchRef);\r\n    }\r\n\r\n    deleteTest = (deleteParam) => {\r\n        const masterData = this.props.Login.masterData;\r\n        const treeVersionTemplateIndex = masterData[\"TreeVersionTemplate\"].findIndex(\r\n            x => x[\"ntreeversiontempcode\"] === masterData.selectedNode[\"ntreeversiontempcode\"]);\r\n\r\n        const templateVersionStatus = masterData[\"TreeVersionTemplate\"][treeVersionTemplateIndex].ntransactionstatus\r\n        if (templateVersionStatus === transactionStatus.RETIRED) {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTEDTEMPLATEISRETIRED\" }));\r\n        }\r\n        else {\r\n            const testgroupspecification = masterData.SelectedSpecification;\r\n            if (testgroupspecification.napprovalstatus === transactionStatus.DRAFT\r\n                || testgroupspecification.napprovalstatus === transactionStatus.CORRECTION) {\r\n                const testgrouptest = deleteParam.props.testgrouptest;\r\n                const inputParam = {\r\n                    inputData: {\r\n                        testgrouptest,\r\n                        userinfo: this.props.Login.userInfo,\r\n                        testgroupspecification,\r\n                        ntreeversiontempcode: deleteParam.filterData.ntreeversiontempcode.value\r\n                    },\r\n                    classUrl: \"testgroup\",\r\n                    operation: \"delete\",\r\n                    methodUrl: \"Test\",\r\n                    screenName: \"IDS_TEST\",\r\n                    postParam: {\r\n                        inputListName: \"TestGroupTest\", selectedObject: \"SelectedTest\", primaryKeyField: \"ntestgrouptestcode\",\r\n                        primaryKeyValue: testgrouptest.ntestgrouptestcode,\r\n                        fetchUrl: \"testgroup/getTestGroupTest\", fecthInputObject: { userinfo: this.props.Login.userInfo },\r\n                        masterData, searchFieldList, unchangeList: [\"TestGroupSpecification\", \"SelectedSpecification\",\r\n                            \"SampleType\", \"TreeVersionTemplate\", \"ProductCategory\", \"SelectedTest\", \"Product\",\r\n                            \"AgaramTree\", \"OpenNodes\", \"selectedNode\", \"FocusKey\", \"ActiveKey\", \"SelectedComponent\", \"TestGroupSpecSampleType\"]//, isSingleSelect: true\r\n                    }\r\n                }\r\n\r\n                if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, deleteParam.ncontrolCode)) {\r\n                    const updateInfo = {\r\n                        typeName: DEFAULT_RETURN,\r\n                        data: {\r\n                            loadEsign: true, screenData: { inputParam, masterData },\r\n                            openModal: true, screenName: \"IDS_TEST\", operation: \"delete\", selectedRecord: {}\r\n                        }\r\n                    }\r\n                    this.props.updateStore(updateInfo);\r\n                } else {\r\n                    this.props.crudMaster(inputParam, masterData, \"openModal\", {});\r\n                }\r\n            } else {\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_SPECIFICATIONSTATUSMUSTBEDRAFTCORRECTION\" }));\r\n            }\r\n        }\r\n    }\r\n\r\n    closeModal = () => {\r\n        let loadEsign = this.props.Login.loadEsign;\r\n        let openModal = this.props.Login.openModal;\r\n        let selectedRecord = this.props.Login.selectedRecord;\r\n        if (loadEsign) {\r\n            if (this.props.Login.operation === \"delete\" || this.props.Login.operation === \"Default\"\r\n                || this.props.Login.operation === 'approve' || this.props.Login.operation === 'complete') {\r\n                loadEsign = false;\r\n                openModal = false;\r\n                selectedRecord = {};\r\n            } else {\r\n                loadEsign = false;\r\n                selectedRecord[\"agree\"] = 4;\r\n                selectedRecord['esignpassword'] = \"\"\r\n                selectedRecord['esigncomments'] = \"\"\r\n                selectedRecord['esignreason'] = \"\"\r\n\r\n            }\r\n        } else {\r\n            openModal = false;\r\n            selectedRecord = {};\r\n        }\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { openModal, loadEsign, selectedRecord }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    onInputOnChange = (event, caseNo, optional) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        switch (caseNo) {\r\n            case 1:\r\n                if (event.target.type === 'checkbox') {\r\n                    selectedRecord[event.target.name] = event.target.checked === true ? optional[0] : optional[1];\r\n                } else if (event.target.type === 'radio') {\r\n                    selectedRecord[event.target.name] = optional;\r\n                    // selectedRecord[\"sfilename\"] = \"\";\r\n                } else {\r\n                    selectedRecord[event.target.name] = event.target.value;\r\n                }\r\n                this.setState({ selectedRecord });\r\n                break;\r\n\r\n            case 2:\r\n                selectedRecord[event.target.name] = event.target.value;\r\n\r\n                const indexKey = Object.keys(optional)[0];\r\n                const value = Object.values(optional)[0];\r\n                const treeData = {\r\n                    ntreeversiontempcode: value.ntreeversiontempcode,\r\n                    npositioncode: value.nlevelno - 1,\r\n                    sleveldescription: event.target.value,\r\n                    ntemptranstestgroupcode: value.ntemptranstestgroupcode,\r\n                    nformcode: 62,\r\n                    schildnode: \"\",\r\n                    nnextchildcode: value.schildnode !== null ? value.schildnode : -1,\r\n                    ntemplatemanipulationcode: value.ntemplatemanipulationcode,\r\n                    isreadonly: value.ntemplatemanipulationcode > 0 ? true : false,\r\n                    slevelformat: value.slevelformat\r\n                }\r\n                let treetemplatemanipulation = selectedRecord.treetemplatemanipulation || [];\r\n                treetemplatemanipulation[indexKey] = treeData;\r\n                selectedRecord[\"treetemplatemanipulation\"] = treetemplatemanipulation;\r\n                this.setState({ selectedRecord });\r\n                break;\r\n\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    onEsignInputOnChange = (event) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if (event.target.type === 'checkbox') {\r\n            selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\r\n        } else {\r\n            selectedRecord[event.target.name] = event.target.value;\r\n        }\r\n        this.setState({ selectedRecord });\r\n    }\r\n    //Rules Engine Functions Start\r\n    ruleflowobject() {\r\n        let object = {}\r\n        const labelColor = ['#e63109', '#2fb47d', '#eaa203', '#6554c0'];\r\n        const labelBGColor = ['#fcd7cd', '#e5f8f1', '#fcf3dd', '#e7e6f5'];\r\n        const borderColor = ['#e6310', '#c6f6e4', '#fde2a4', '#cbc5f7'];\r\n        let groupList = this.props.Login.masterData.SelectedRulesEngine['jsondata']\r\n        let groupListJoins = this.props.Login.masterData.SelectedRulesEngine['jsonuidata'] &&\r\n            this.props.Login.masterData.SelectedRulesEngine['jsonuidata']['groupListJoins']\r\n        let children = []\r\n        let parent = []\r\n        let grandparent = []\r\n        groupList.map((groupobject, index) => {\r\n            if (groupobject.hasOwnProperty('button_or')) {\r\n                children = []\r\n                let rulesList = groupobject['button_or']\r\n                rulesList.map((rule, index) => {\r\n                    children.push(\r\n                        {\r\n                            id: index, label: <>{(rule['stestname'].label) //+ \" -> \" + (this.props.intl.formatMessage({ id: \"IDS_WITH\" })) \r\n                            + \" -> \" +\r\n                                (rule['orderresulttype'].label) + \" -> \" +\r\n                                (rule['ssymbolname'].label) + \" -> \" + ( rule['ndiagnosticcasecode']&& rule['ndiagnosticcasecode'].label ||\r\n                                rule['ngradecode']&&rule['ngradecode'].label||  rule['ntestgrouptestnumericcode']&&rule['ntestgrouptestnumericcode']||\r\n                                rule['ntestgrouptestcharcode']&&rule['ntestgrouptestcharcode']|| rule['ntestgrouptestpredefcode']&&rule['ntestgrouptestpredefcode'].label)\r\n\r\n                            }</>\r\n                        }\r\n                    )\r\n                })\r\n                if(groupList.length===1?rulesList.length>1:true){\r\n                 parent.push({ id: index, label: <div className=\"btn btn-primary\" >{this.props.intl.formatMessage({ id: \"IDS_OR\" })}</div>, children: children }) \r\n                }\r\n            }\r\n            if (groupobject.hasOwnProperty('button_and')) {\r\n                children = []\r\n                let rulesList = groupobject['button_and']\r\n                rulesList.map((rule, index) => {\r\n                    children.push(\r\n                        {\r\n                            id: index, label: <>{\r\n\r\n                                (rule['stestname'].label) //+ \" -> \" + (this.props.intl.formatMessage({ id: \"IDS_WITH\" })) \r\n                                + \" -> \" +\r\n                                (rule['orderresulttype'].label) + \" -> \" +\r\n                                (rule['ssymbolname'].label) + \" -> \" +  ( rule['ndiagnosticcasecode']&& rule['ndiagnosticcasecode'].label ||\r\n                                rule['ngradecode']&&rule['ngradecode'].label||  rule['ntestgrouptestnumericcode']&&rule['ntestgrouptestnumericcode']||\r\n                                rule['ntestgrouptestcharcode']&&rule['ntestgrouptestcharcode']|| rule['ntestgrouptestpredefcode']&&rule['ntestgrouptestpredefcode'].label)\r\n\r\n\r\n                            }</>\r\n                        }\r\n                    )\r\n                })\r\n                if(groupList.length===1?rulesList.length>1:true){\r\n                parent.push({ id: index, label: <div className=\"btn btn-primary\" >{this.props.intl.formatMessage({ id: \"IDS_AND\" })}</div>, children: children })\r\n                }\r\n            }\r\n            if (groupobject.hasOwnProperty('button_not_button_and')) {\r\n                children = []\r\n                let rulesList = groupobject['button_not_button_and']\r\n                rulesList.map((rule, index) => {\r\n                    children.push(\r\n                        {\r\n                            id: index, label: <>{(rule['stestname'].label) //+ \" -> \" + (this.props.intl.formatMessage({ id: \"IDS_WITH\" })) \r\n                            + \" -> \" +\r\n                                (rule['orderresulttype'].label) + \" -> \" +\r\n                                (rule['ssymbolname'].label) + \" -> \" +  ( rule['ndiagnosticcasecode']&& rule['ndiagnosticcasecode'].label ||\r\n                                rule['ngradecode']&&rule['ngradecode'].label||  rule['ntestgrouptestnumericcode']&&rule['ntestgrouptestnumericcode']||\r\n                                rule['ntestgrouptestcharcode']&&rule['ntestgrouptestcharcode']|| rule['ntestgrouptestpredefcode']&&rule['ntestgrouptestpredefcode'].label)\r\n\r\n                            }</>\r\n                        }\r\n                    )\r\n                })\r\n                let notarray = [{ id: index, label: <div className=\"btn btn-primary\" >{this.props.intl.formatMessage({ id: \"IDS_AND\" })}</div>, children: children }]\r\n                if(groupList.length===1?rulesList.length>1:true){\r\n                parent.push({ id: index, label: <div className=\"btn btn-primary\" >{this.props.intl.formatMessage({ id: \"IDS_NOT\" })}</div>, children: notarray })\r\n                }\r\n            }\r\n            if (groupobject.hasOwnProperty('button_not_button_or')) {\r\n                children = []\r\n                let rulesList = groupobject['button_not_button_or']\r\n                rulesList.map((rule, index) => {\r\n                    children.push(\r\n                        {\r\n                            id: index, label: <>{(rule['stestname'].label)// + \" -> \" + (this.props.intl.formatMessage({ id: \"IDS_WITH\" })) \r\n                            + \" -> \" +\r\n                                (rule['orderresulttype'].label) + \" -> \" +\r\n                                (rule['ssymbolname'].label) + \" -> \" +  ( rule['ndiagnosticcasecode']&& rule['ndiagnosticcasecode'].label ||\r\n                                rule['ngradecode']&&rule['ngradecode'].label||  rule['ntestgrouptestnumericcode']&&rule['ntestgrouptestnumericcode']||\r\n                                rule['ntestgrouptestcharcode']&&rule['ntestgrouptestcharcode']|| rule['ntestgrouptestpredefcode']&&rule['ntestgrouptestpredefcode'].label)\r\n\r\n                            }</>\r\n                        }\r\n                    )\r\n                })\r\n                let notarray = [{ id: index, label: <div className=\"btn btn-primary\" >{this.props.intl.formatMessage({ id: \"IDS_OR\" })}</div>, children: children }]\r\n                if(groupList.length===1?rulesList.length>1:true){\r\n                parent.push({ id: index, label: <div className=\"btn btn-primary\" >{this.props.intl.formatMessage({ id: \"IDS_NOT\" })}</div>, children: notarray })\r\n                }\r\n            }\r\n        })\r\n\r\n        if (groupListJoins !== undefined) {\r\n            groupListJoins.map((join, index) => {\r\n                let parentjoins = []\r\n                if (join.hasOwnProperty('button_or') && join['button_or'] === true) {\r\n                    let notarray = []\r\n                    parentjoins.push(parent[index])\r\n                    parentjoins.push(parent[index + 1])\r\n                    if (join.hasOwnProperty('button_not') && join['button_not'] === true) {\r\n                        notarray = [{\r\n                            id: index, label: <div className=\"btn btn-primary\" >\r\n                                {this.props.intl.formatMessage({ id: \"IDS_OR\" })} </div>// 'button_or'\r\n                            , children: parentjoins\r\n                        }]\r\n                        grandparent.push({\r\n                            id: index, label: <div className=\"btn btn-primary\" >\r\n                                {this.props.intl.formatMessage({ id: \"IDS_NOT\" })} </div>// 'button_or'\r\n                            , children: notarray\r\n                        })\r\n                    }\r\n                    else {\r\n                        grandparent.push({\r\n                            id: index, label: <div className=\"btn btn-primary\" >\r\n                                {this.props.intl.formatMessage({ id: \"IDS_OR\" })} </div>// 'button_or'\r\n                            , children: parentjoins\r\n                        })\r\n                    }\r\n                }\r\n                if (join.hasOwnProperty('button_and') && join['button_and'] === true) {\r\n                    let notarray = []\r\n                    parentjoins.push(parent[index])\r\n                    parentjoins.push(parent[index + 1])\r\n                    if (join.hasOwnProperty('button_not') && join['button_not'] === true) {\r\n                        notarray = [{\r\n                            id: index, label: <div className=\"btn btn-primary\" >\r\n                                {this.props.intl.formatMessage({ id: \"IDS_AND\" })} </div>// 'button_or'\r\n                            , children: parentjoins\r\n                        }]\r\n                        grandparent.push({\r\n                            id: index, label: <div className=\"btn btn-primary\" >\r\n                                {this.props.intl.formatMessage({ id: \"IDS_NOT\" })} </div>// 'button_or'\r\n                            , children: notarray\r\n                        })\r\n                    }\r\n                    else {\r\n                        grandparent.push({\r\n                            id: index, label: <div className=\"btn btn-primary\" >{this.props.intl.formatMessage({ id: \"IDS_AND\" })}</div>// 'button_and'\r\n                            , children: parentjoins\r\n                        })\r\n                    }\r\n                }\r\n            })\r\n        }\r\n\r\n        object = grandparent.length > 0 ?\r\n            {\r\n                id: 0,\r\n                label: <div className=\"btn btn-primary\" >{this.props.Login.masterData.SelectedRulesEngine.srulename} </div>,\r\n                children: grandparent\r\n            }\r\n            : {\r\n                id: 0,\r\n                label: <div className=\"btn btn-primary\" >{this.props.Login.masterData.SelectedRulesEngine.srulename} </div>,\r\n                children: parent.length!==0?parent:children\r\n            }\r\n        return object\r\n    }\r\n    onTabChangeRulesEngine = (tabProps) => {\r\n        let masterData = this.props.Login.masterData && this.props.Login.masterData\r\n        masterData['activeTabName'] = tabProps.activeTabName;\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { masterData }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n    tabDetailRulesEngine = () => {\r\n        let masterData = this.props.Login.masterData || {};\r\n        let jsonuidata = this.props.Login.masterData.SelectedRulesEngine && this.props.Login.masterData.SelectedRulesEngine['jsonuidata'] \r\n        const tabMap = new Map();\r\n        {\r\n            tabMap.set(\"IDS_Test\",\r\n                <DataGrid\r\n                    key=\"testsectionkey\"\r\n                    primaryKeyField=\"nresultusedmaterialcode\"\r\n                    expandField=\"expanded\"\r\n                    handleExpandChange={this.handleExpandChange} \r\n                    dataResult={this.props.Login.masterData.SelectedRulesEngine &&\r\n                        this.props.Login.masterData.SelectedRulesEngine && process(\r\n                            sortData(this.props.Login.masterData.SelectedRulesEngine['jsonuidata']['testInitiateTests'], \"descending\", \"npkAtestparametercode\")\r\n                            || [],\r\n                            this.state.dataStatetestinitiate\r\n                                ? this.state.dataStatetestinitiate : { skip: 0, take: 10 })} \r\n                    dataState={this.state.dataStatetestinitiate\r\n                        ? this.state.dataStatetestinitiate : { skip: 0, take: 10 }} \r\n                    dataStateChange={this.dataStateChangetestinitiateTab}\r\n\r\n                    extractedColumnList={[\r\n                        { \"idsName\": \"IDS_TESTNAME\", \"dataField\": \"stestsynonym\", \"width\": \"200px\" } \r\n                    ]}\r\n                    controlMap={this.state.controlMap}\r\n                    userRoleControlRights={this.state.userRoleControlRights}\r\n                    pageable={true} \r\n                    scrollable={'scrollable'}\r\n                    hideColumnFilter={false}\r\n                    selectedId={0} \r\n                    deleteParam={{ operation: \"delete\" }} \r\n                    hasChild={true}\r\n                    childMappingField={'npkAtestparametercode'}\r\n                    childColumnList={[\r\n                        { \"idsName\": \"IDS_TOSITE\", \"dataField\": \"stositename\", \"width\": \"200px\" },\r\n                        { \"idsName\": \"IDS_FROMSITE\", \"dataField\": \"sfromsitename\", \"width\": \"200px\" }\r\n                        \r\n                    ]}\r\n                    childList={this.state.childListMap}\r\n                    activeTabName={\"IDS_Test\"}\r\n                    gridHeight = {'400px'}\r\n                >\r\n                </DataGrid>); \r\n            tabMap.set(\"IDS_COMMENTS\",\r\n            <DataGrid\r\n                key=\"testsectionkey\"\r\n                primaryKeyField=\"nresultusedmaterialcode\" \r\n                handleExpandChange={this.handleExpandChange} \r\n                dataResult={this.props.Login.masterData.SelectedRulesEngine && process(\r\n                    sortData(this.props.Login.masterData.SelectedRulesEngine['jsonuidata']['testCommentsTestsTab'], \"descending\", \"nslno\")\r\n                    || [],\r\n                    this.state.dataState\r\n                        ? this.state.dataState : { skip: 0, take: 10 })} \r\n                dataState={this.state.dataState\r\n                    ? this.state.dataState : { skip: 0, take: 10 }} \r\n                dataStateChange={this.dataStateChange} \r\n                controlMap={this.state.controlMap}\r\n                userRoleControlRights={this.state.userRoleControlRights}\r\n                pageable={true} \r\n                scrollable={'scrollable'}\r\n                hideColumnFilter={false}\r\n                selectedId={0} \r\n                deleteParam={{ operation: \"delete\" }} \r\n                childMappingField={'npkBtestparametercode'} \r\n                extractedColumnList={[\r\n                    { \"idsName\": \"IDS_DESCRIPTION\", \"dataField\": \"sdescription\", \"width\": \"200px\" },\r\n                    { \"idsName\": \"IDS_RESULTS\", \"dataField\": \"spredefinedname\", \"width\": \"200px\" },\r\n                    { \"idsName\": \"IDS_COMMENTSUBTYPE\", \"dataField\": \"scommentsubtype\", \"width\": \"200px\" }, \r\n                    { \"idsName\": \"IDS_COMMENTTYPE\", \"dataField\": \"scommenttype\", \"width\": \"200px\" } ,\r\n                    { \"idsName\": \"IDS_TESTNAME\", \"dataField\": \"stestsynonym\", \"width\": \"200px\" }   \r\n                ]}\r\n                childList={this.state.childListMap2 && this.state.childListMap2}\r\n                activeTabName={\"IDS_COMMENTS\"}\r\n                gridHeight = {'400px'}\r\n                >\r\n            </DataGrid>\r\n        ); \r\n        tabMap.set(\"IDS_REPEAT\",\r\n        <DataGrid\r\n            key=\"testsectionkey\"\r\n            primaryKeyField=\"nresultusedmaterialcode\"  \r\n            dataResult={this.props.Login.masterData.SelectedRulesEngine && process(\r\n                sortData(this.props.Login.masterData.SelectedRulesEngine['jsonuidata']['testRepeatTestsTab'], \"descending\", \"npkCtestparametercode\")\r\n                || [],\r\n                this.state.dataStaterepeatTab\r\n                    ? this.state.dataStaterepeatTab : { skip: 0, take: 10 })} \r\n            dataState={this.state.dataStaterepeatTab\r\n                ? this.state.dataStaterepeatTab : { skip: 0, take: 10 }} \r\n            dataStateChange={this.dataStateChangeRepeatTab} \r\n            controlMap={this.state.controlMap}\r\n            userRoleControlRights={this.state.userRoleControlRights}\r\n            pageable={true} \r\n            scrollable={'scrollable'}\r\n            hideColumnFilter={false}\r\n            selectedId={0} \r\n            deleteParam={{ operation: \"delete\" }}  \r\n            extractedColumnList={[ \r\n                { \"idsName\": \"IDS_TESTNAME\", \"dataField\": \"stestsynonym\", \"width\": \"200px\" },\r\n                { \"idsName\": \"IDS_REPEATCOUNT\", \"dataField\": \"nrepeatcountno\", \"width\": \"200px\" }  \r\n\r\n            ]} \r\n            activeTabName={\"IDS_COMMENTS\"}\r\n            gridHeight = {'400px'}\r\n            >\r\n        </DataGrid>\r\n    ); \r\n    tabMap.set(\"IDS_ENFORCERESULT\",\r\n    <DataGrid\r\n        key=\"testsectionkey\"\r\n        primaryKeyField=\"nresultusedmaterialcode\"  \r\n        dataResult={this.props.Login.masterData.SelectedRulesEngine && process(\r\n            sortData(this.props.Login.masterData.SelectedRulesEngine['jsonuidata']['testenforceTestsTab'], \"descending\", \"npkDtestparametercode\")\r\n            || [],\r\n            this.state.dataStateChangenforceTab\r\n                ? this.state.dataStateChangenforceTab : { skip: 0, take: 10 })} \r\n        dataState={this.state.dataStateChangenforceTab\r\n            ? this.state.dataStateChangenforceTab : { skip: 0, take: 10 }} \r\n        dataStateChange={this.dataStateChangenforceTab} \r\n        controlMap={this.state.controlMap}\r\n        userRoleControlRights={this.state.userRoleControlRights}\r\n        pageable={true} \r\n        scrollable={'scrollable'}\r\n        hideColumnFilter={false}\r\n        selectedId={0} \r\n        deleteParam={{ operation: \"delete\" }}  \r\n        extractedColumnList={[ \r\n            { \"idsName\": \"IDS_TESTNAME\", \"dataField\": \"stestsynonym\", \"width\": \"200px\" }, \r\n            { \"idsName\": \"IDS_PARAMETERS\", \"dataField\": \"sparametersynonym\", \"width\": \"200px\" },\r\n            { \"idsName\": \"IDS_PASSFLAG\", \"dataField\": \"sgradename\", \"width\": \"200px\" },\r\n            { \"idsName\": \"IDS_RESULTS\", \"dataField\": \"senforceresult\", \"width\": \"200px\" }\r\n        ]} \r\n        activeTabName={\"IDS_COMMENTS\"}\r\n        gridHeight = {'400px'}\r\n        >\r\n    </DataGrid>\r\n); \r\n        }\r\n        return tabMap;\r\n    }\r\n    dataStateChange = (event, ntestgrouptestparametercode) => {\r\n        let dataStateObject = this.state.dataStateObject || {}\r\n        if (ntestgrouptestparametercode) {\r\n            dataStateObject = {\r\n                ...dataStateObject,\r\n                [ntestgrouptestparametercode]: event.dataState\r\n            }\r\n            this.setState({\r\n                dataStateObject\r\n            });\r\n        }\r\n        else {\r\n            this.setState({\r\n                dataState: event.dataState\r\n            });\r\n        }\r\n\r\n    }\r\n    dataStateChangetestRepeat = (event) => {\r\n        this.setState({\r\n            //  dataResult: process(this.props.Login.queryData, event.dataState),\r\n            dataStatetestRepeat: event.dataState\r\n        });\r\n    }\r\n    dataStateChangetestEnforce = (event) => {\r\n        this.setState({\r\n            //  dataResult: process(this.props.Login.queryData, event.dataState),\r\n            dataStatetestEnforce: event.dataState\r\n        });\r\n    }\r\n    dataStateChangetestinitiateTab = (event) => {\r\n        this.setState({\r\n            //  dataResult: process(this.props.Login.queryData, event.dataState),\r\n            dataStatetestinitiate: event.dataState\r\n        });\r\n    }\r\n    dataStateChangeRepeatTab = (event) => {\r\n        this.setState({\r\n            //  dataResult: process(this.props.Login.queryData, event.dataState),\r\n            dataStaterepeatTab: event.dataState\r\n        });\r\n    } \r\n    dataStateChangenforceTab = (event) => {\r\n        this.setState({\r\n            //  dataResult: process(this.props.Login.queryData, event.dataState),\r\n            dataStateChangenforceTab: event.dataState\r\n        });\r\n    } \r\n    dataStateChangeMain = (event) => {\r\n        this.setState({\r\n            dataResultMain: process(this.props.Login.queryDataMain, event.dataStateMain),\r\n            dataStateMain: event.dataStateMain\r\n        });\r\n    }\r\n    ConfirmDeleteRule = (deleteId) => {\r\n        if(this.props.Login.masterData['RulesEngine']&&this.props.Login.masterData['RulesEngine'].length>0){ \r\n        this.confirmMessage.confirm(\"deleteMessage\", this.props.intl.formatMessage({ id: \"IDS_DELETE\" }), this.props.intl.formatMessage({ id: \"IDS_DEFAULTCONFIRMMSG\" }),\r\n            this.props.intl.formatMessage({ id: \"IDS_OK\" }), this.props.intl.formatMessage({ id: \"IDS_CANCEL\" }),\r\n            () => this.handleClickDelete(this.props.Login.masterData, deleteId, \"openModal\"));\r\n        }\r\n        else{\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTRULETODELETE\" })); \r\n        }\r\n    }\r\n    handleClickDelete(masterData, ncontrolcode//, modalName\r\n    ) {\r\n      \r\n        const fieldArray = [];\r\n        const inputParam = {\r\n            methodUrl: \"TestGroupRulesEngine\",\r\n            classUrl: \"testgrouprulesengine\",\r\n            inputData: {\r\n                \"ntestgrouptestcode\": this.props.Login.masterData.SelectedTest.ntestgrouptestcode,\r\n                \"ntestgrouprulesenginecode\": this.props.Login.masterData.SelectedRulesEngine.ntestgrouprulesenginecode,\r\n                \"userinfo\": this.props.Login.userInfo,\r\n            },\r\n            operation: \"delete\", //postParam,\r\n            displayName: \"RulesEngine\",\r\n        }\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, ncontrolcode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData },// [modalName]: true,\r\n                    operation: 'delete', screenName: \"IDS_RULESENGINE\", id: \"RulesEngine\"\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.crudMaster(inputParam, masterData, undefined\r\n            );\r\n        }\r\n\r\n    }\r\n\r\n\r\n    approveVersion(masterData, nflag, ncontrolcode//, modalName\r\n    ) {\r\n        if (masterData['RulesEngine']&&masterData['RulesEngine'].length > 0) {\r\n            const fieldArray = [];\r\n            const inputParam = {\r\n                methodUrl: \"TestGroupRulesEngine\",\r\n                classUrl: \"testgrouprulesengine\",\r\n                inputData: {\r\n                    \"ntestgrouptestcode\": this.props.Login.masterData.SelectedTest.ntestgrouptestcode,\r\n                    \"ntestgrouprulesenginecode\": this.props.Login.masterData.SelectedRulesEngine.ntestgrouprulesenginecode,\r\n                    \"userinfo\": this.props.Login.userInfo, nflag: nflag\r\n                },\r\n                operation: \"approve\", //postParam,\r\n                displayName: \"RulesEngine\",\r\n            }\r\n            if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, ncontrolcode)) {\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        loadEsign: true, screenData: { inputParam, masterData },// [modalName]: true,\r\n                        operation: 'delete', screenName: \"IDS_RULESENGINE\", id: \"RulesEngine\"\r\n                    }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n            else {\r\n                this.props.crudMaster(inputParam, masterData, undefined\r\n                );\r\n            }\r\n        }\r\n        else {\r\n            if(nflag==1)\r\n            { \r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTRULETOAPPROVE\" }));  \r\n            }\r\n            else\r\n            { \r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTRULETORETIRE\" }));  \r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    closeModalShow = () => {\r\n        let openModalPopup = this.props.Login.openModalPopup;\r\n        let selectedRecord = this.props.Login.selectedRecord || {};\r\n        selectedRecord['srulename'] = \"\"\r\n        openModalPopup = false;\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { openModalPopup, selectedRecord }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    onsavevalidation = (selectedRecord) => {\r\n        let grouplist = selectedRecord[\"groupList\"]\r\n        let hasAll = true;\r\n        for (var i = 0; i < grouplist.length; i++) {\r\n            let rules = grouplist[i]\r\n            for (var j = 0; j < rules.length; j++) {\r\n                let props = []\r\n                if (rules[j][\"orderresulttype\"] && rules[j][\"orderresulttype\"].value === 1) {\r\n                    props = [\"stestname\", \"ssymbolname\", \"orderresulttype\", \"ndiagnosticcasecode\"];\r\n                }\r\n                else if (rules[j][\"orderresulttype\"] && rules[j][\"orderresulttype\"].value === 3) {\r\n                    if(rules[j][\"stestname\"] && rules[j][\"stestname\"]['item']['nparametertypecode'] === parameterType.PREDEFINED)\r\n                    {\r\n                        props = [\"stestname\", \"ssymbolname\", \"orderresulttype\", \"ntestgrouptestpredefcode\"]; \r\n\r\n                    }\r\n                    else if(rules[j][\"stestname\"] && rules[j][\"stestname\"]['item']['nparametertypecode'] === parameterType.CHARACTER)\r\n                    {\r\n                        props = [\"stestname\", \"ssymbolname\", \"orderresulttype\", \"ntestgrouptestcharcode\"]; \r\n\r\n                    }\r\n                    else if (rules[j][\"stestname\"] && rules[j][\"stestname\"]['item']['nparametertypecode'] === parameterType.NUMERIC)\r\n                    {\r\n                        props = [\"stestname\", \"ssymbolname\", \"orderresulttype\", \"ntestgrouptestnumericcode\"]; \r\n\r\n                    } \r\n                    else\r\n                    {\r\n                        if (rules[j][\"orderresulttype\"] && rules[j][\"orderresulttype\"].value === 1) {\r\n                            props = [\"stestname\", \"ssymbolname\", \"orderresulttype\", \"ndiagnosticcasecode\"];\r\n                        }\r\n                        else {\r\n                            props = [\"stestname\", \"ssymbolname\", \"orderresulttype\", \"ngradecode\"];\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    props = [\"stestname\", \"ssymbolname\", \"orderresulttype\", \"ngradecode\"];\r\n                }\r\n                hasAll = props.every(prop => rules[j].hasOwnProperty(prop));\r\n                if (hasAll === false) {\r\n                    break;\r\n                }\r\n            }\r\n            if (hasAll === false) {\r\n                break;\r\n            }\r\n        }\r\n        return hasAll\r\n    }\r\n    save = () => {\r\n        let inputData = [];\r\n        let siteObject = this.props.Login.siteObject || {};\r\n        let testCommentObject = this.props.Login.testCommentObject || {};\r\n        let reportCommentObject = this.props.Login.reportCommentObject || {};\r\n        let PredefinedParameterOptions= this.props.Login.masterData.PredefinedParameterOptions||[]  \r\n\r\n        let testInitiateTests = this.props.Login.testInitiateTests || [];\r\n        let testCommentsTests = this.props.Login.testCommentsTests || [];\r\n        let reportCommentsTests = this.props.Login.reportCommentsTests || [];\r\n \r\n        let testRepeatTests = this.props.Login.testRepeatTests || [];\r\n        let testenforceTests = this.props.Login.testenforceTests || [];\r\n        let testsInvolvedInRules=[]\r\n        let testsNameInvolvedInRules=[]\r\n\r\n        const { selectedRecord } = this.state;\r\n        let rules = []\r\n        //  if (selectedRecord[\"nproductcatcode\"]) {\r\n            if(testInitiateTests.length > 0||testCommentsTests.length > 0||testRepeatTests.length > 0||testenforceTests.length > 0){\r\n        if (selectedRecord[\"groupList\"].length > 0) {\r\n            if (this.onsavevalidation(selectedRecord)) {\r\n                if (selectedRecord[\"srulename\"] && selectedRecord[\"srulename\"] !== \"\" && this.props.Login.action !== 'update'\r\n                    && this.props.Login.action !== 'IDS_ADDTESTCOMMENTS' && this.props.Login.action !== 'IDS_ADDREPORTCOMMENTS'\r\n                    && this.props.Login.action !== 'IDS_ADDTEST' && this.props.Login.action !== 'IDS_ADDSITE'\r\n                ) {\r\n\r\n                    if (selectedRecord[\"groupList\"]) {\r\n                        let groupList = [];\r\n                        let outcomeList = {};\r\n                        groupList = selectedRecord[\"groupList\"];\r\n\r\n                        outcomeList['groupList'] = groupList\r\n                        outcomeList['addGroupList'] = this.props.Login.addGroupList\r\n                        outcomeList['testInitiateTests'] = this.props.Login.testInitiateTests && this.props.Login.testInitiateTests\r\n                        outcomeList['testCommentsTests'] = this.props.Login.testCommentsTests && this.props.Login.testCommentsTests\r\n                        outcomeList['testRepeatTests'] = this.props.Login.testRepeatTests && this.props.Login.testRepeatTests\r\n                        outcomeList['testenforceTests'] = this.props.Login.testenforceTests && this.props.Login.testenforceTests\r\n\r\n                        outcomeList['reportCommentsTests'] = this.props.Login.reportCommentsTests && this.props.Login.reportCommentsTests\r\n                        outcomeList['siteObject'] = this.props.Login.siteObject && this.props.Login.siteObject\r\n                        outcomeList['testCommentObject'] = this.props.Login.testCommentObject && this.props.Login.testCommentObject\r\n                        outcomeList['reportCommentObject'] = this.props.Login.reportCommentObject && this.props.Login.reportCommentObject\r\n                        outcomeList['testInitiateSiteTab'] = this.props.Login.masterData.testInitiateSiteTab && this.props.Login.masterData.testInitiateSiteTab\r\n                        outcomeList['testCommentsTestsTab'] = this.props.Login.masterData.testCommentsTestsTab && this.props.Login.masterData.testCommentsTestsTab\r\n                        outcomeList['reportCommentsTestsTab'] = this.props.Login.reportCommentsTestsTab && this.props.Login.reportCommentsTestsTab\r\n                        outcomeList['testRepeatTestsTab'] =  this.props.Login.masterData['testRepeatTestsTab']&& this.props.Login.masterData['testRepeatTestsTab']\r\n                        outcomeList['testenforceTestsTab'] =  this.props.Login.masterData['testenforceTestsTab']&& this.props.Login.masterData['testenforceTestsTab']\r\n                        outcomeList['PredefinedParameterOptions']=PredefinedParameterOptions\r\n                        // outcomeList['nproductcatcode'] = selectedRecord['nproductcatcode']\r\n                        outcomeList['ntestgrouptestcode'] = this.props.Login.masterData.SelectedTest.ntestgrouptestcode\r\n                        // outcomeList['nallottedspeccode'] = selectedRecord['nallottedspeccode']\r\n                        // outcomeList['ncomponentcode'] = selectedRecord['ncomponentcode'] \r\n                        outcomeList['groupListJoins'] = selectedRecord['groupListJoins']?selectedRecord['groupListJoins']:[]\r\n\r\n                        let ruleEngineLayout = []\r\n                        let ruleEngineLayoutObject = []\r\n                        let groupRuleObject = {}\r\n\r\n                        groupList.map((List) => \r\n                        List.map(x=>{\r\n                            testsInvolvedInRules.push(x.stestname.item.ntestgrouptestcode);\r\n                            testsNameInvolvedInRules.push(x.stestname.item);\r\n                        }) \r\n                        )\r\n                        outcomeList['testsNameInvolvedInRules'] = testsNameInvolvedInRules\r\n                        outcomeList['testsInvolvedInRules'] = testsInvolvedInRules\r\n                        groupList.map((List) => {\r\n                            if (List.hasOwnProperty('button_or') && List['button_or'] === true) {\r\n                                if (List.hasOwnProperty('button_not') && List['button_not'] === true) {\r\n                                    groupRuleObject['button_not_button_or'] = List\r\n                                }\r\n                                else {\r\n                                    groupRuleObject['button_or'] = List\r\n                                }\r\n                                // groupRuleObject['button_or'] = List\r\n                                ruleEngineLayout.push(groupRuleObject)\r\n                                groupRuleObject = {}\r\n                            }\r\n                            if (List.hasOwnProperty('button_and') && List['button_and'] === true) {\r\n                                if (List.hasOwnProperty('button_not') && List['button_not'] === true) {\r\n                                    groupRuleObject['button_not_button_and'] = List\r\n                                }\r\n                                else {\r\n                                    groupRuleObject['button_and'] = List\r\n                                }\r\n                                //  groupRuleObject['button_and'] = List\r\n                                ruleEngineLayout.push(groupRuleObject)\r\n                                groupRuleObject = {}\r\n                            }\r\n                        })\r\n                        ruleEngineLayoutObject = groupList.hasOwnProperty('button_or') && groupList['button_or'] === true ?\r\n                            {\r\n                                'button_or': ruleEngineLayout\r\n                            } : {\r\n                                'button_and': ruleEngineLayout\r\n                            }\r\n                       // console.log('savelist--->', JSON.stringify(ruleEngineLayoutObject))\r\n                        //  inputData['nproductcatcode'] = this.props.Login.masterData.SelectedProductCategory.nproductcatcode\r\n                        //  inputData['nproductcatcode'] = selectedRecord['nproductcatcode'].value\r\n                        inputData['ntestgrouptestcode'] = this.props.Login.masterData.SelectedTest.ntestgrouptestcode\r\n                        // inputData['nallottedspeccode'] = selectedRecord['nallottedspeccode'].value\r\n                        // inputData['ncomponentcode'] = selectedRecord['ncomponentcode'].value\r\n                        inputData['srulename'] = selectedRecord['srulename']\r\n                     //   inputData['nruleexecorder'] = parseInt(selectedRecord['nruleexecorder'])\r\n                        inputData['outcomeList'] = JSON.stringify(outcomeList)\r\n                        inputData['jsondata'] = JSON.stringify(ruleEngineLayout)\r\n                        inputData['userinfo'] = this.props.Login.userInfo\r\n                        if (this.props.Login.operation === 'update') {\r\n                            inputData['ntestgrouprulesenginecode'] = this.props.Login.masterData.SelectedRulesEngine['ntestgrouprulesenginecode']\r\n                        }\r\n                        const inputParam = {\r\n                            classUrl: \"testgrouprulesengine\",\r\n                            methodUrl: \"TestGroupRulesEngine\",\r\n                            displayName: this.props.Login.inputParam.displayName,\r\n                            inputData: inputData,\r\n                            operation: this.props.Login.operation === 'create' ? 'create' : 'update'\r\n                        }\r\n                        this.props.crudMaster(inputParam, this.props.Login.masterData, \"openPortalModal\");\r\n                    }\r\n                    else {\r\n                        toast.info(this.props.intl.formatMessage({ id: \"IDS_PLEASEADDRULE\" }));\r\n                    }\r\n\r\n                }\r\n                else {\r\n                    selectedRecord['srulename'] = selectedRecord['srulenamecopy'] || \"\"\r\n                  //  selectedRecord['nruleexecorder'] = selectedRecord['nruleexecordercopy'] || \"\"\r\n                    const updateInfo = {\r\n                        typeName: DEFAULT_RETURN,\r\n                        data: { openModalPopup: true, selectedRecord, action: \"IDS_SAVERULEMODAL\", openmodalsavePopup: true }\r\n                    }\r\n                    this.props.updateStore(updateInfo);\r\n                    //   toast.info(this.props.intl.formatMessage({ id: \"IDS_ENTERRULESENGINENAME\" }));\r\n\r\n                }\r\n            } else {\r\n                toast.info(this.props.intl.formatMessage({ id: \"IDS_COMPLETETHERULETOSAVE\" }));\r\n            }\r\n        }\r\n        else {\r\n            toast.info(this.props.intl.formatMessage({ id: \"IDS_ATLEASTADDONERULE\" }));\r\n        } \r\n    }\r\n    else{\r\n        toast.info(this.props.intl.formatMessage({ id: \"IDS_ATLEASTADDONEOUTCOME\" })); \r\n    }\r\n    } \r\n    onOutcomeChange = (comboData, index) => {\r\n        const { selectedRecord } = this.state;\r\n        selectedRecord[\"outComeList\"] = []\r\n        selectedRecord[\"outComeList\"][index] = []\r\n        selectedRecord[\"outComeList\"][index] = comboData;\r\n        if (selectedRecord[\"outComeList\"][index]) {\r\n            this.setState({\r\n                selectedRecord\r\n            });\r\n        }\r\n    }\r\n    writtenRules = (data) => {\r\n        let selectedRecord = this.state.selectedRecord || {}\r\n        let grouplist = selectedRecord[\"groupList\"]\r\n        let activeTabIndex = this.props.Login.activeTabIndex || 0;\r\n        if (activeTabIndex === 1) {\r\n            let boolean = grouplist.every(x => x.every(y => y['stestname']['item'].ntestgrouptestcode !== data['item'].ntestgrouptestcode)\r\n            )\r\n            if (boolean) {\r\n                return data;\r\n            }\r\n        }\r\n        else {\r\n            let boolean = grouplist.some(x => x.some(y => y['stestname']['item'].ntestgrouptestcode === data['item'].ntestgrouptestcode)\r\n            )\r\n            if (boolean) {\r\n                return data;\r\n            }\r\n        } \r\n    } \r\n    selectedTestRemove = (data) => {\r\n        let activeTabIndex = this.props.Login.activeTabIndex || 0;\r\n        if (activeTabIndex === 1) {\r\n            if (this.props.Login.masterData.SelectedTest.ntestgrouptestcode !== data['item'].ntestgrouptestcode) {\r\n                return data;\r\n            }\r\n        }\r\n        else {\r\n            if (this.props.Login.masterData.SelectedTest.ntestgrouptestcode === data['item'].ntestgrouptestcode) {\r\n                return data;\r\n            }\r\n        } \r\n    }\r\n    outComeTestsRemoveFromRules = (data) => { \r\n        let testInitiateTests=this.props.Login.testInitiateTests;\r\n        let boolean = testInitiateTests.every(x => x['ntestgrouptestcode']!== data['item'].ntestgrouptestcode)\r\n            if (boolean) {\r\n                return data;\r\n            } \r\n    }\r\n    addTest = (tabName) => {\r\n        let openModalPopup = this.props.Login.openModalPopup;\r\n        let action = this.props.Login.action;\r\n        let selectedRecord = this.props.Login.selectedRecord || {}\r\n\r\n        let rulesOption = this.props.Login.masterData.rulesOption || [];\r\n        let testInitiateTestCombo = this.props.Login.masterData.testInitiateTestCombo || [];\r\n        let testCommentsTestCombo = this.props.Login.masterData.testCommentsTestCombo || [];\r\n        let testRepeatTestCombo = this.props.Login.masterData.testRepeatTestCombo || [];\r\n        let testenforceTestCombo = this.props.Login.masterData.testenforceTestCombo || [];\r\n\r\n        if (tabName == 'IDS_Test') {\r\n            testInitiateTestCombo = testInitiateTestCombo.filter(this.selectedTestRemove);\r\n            testInitiateTestCombo = testInitiateTestCombo.filter(this.writtenRules);\r\n        }\r\n        else if (tabName == 'IDS_COMMENTS') {\r\n            let selectedTestTempArray = []\r\n            selectedTestTempArray = testCommentsTestCombo.filter(this.selectedTestRemove);\r\n            testCommentsTestCombo = testCommentsTestCombo.filter(this.writtenRules);\r\n            let duplicatePresent = selectedTestTempArray.some(x => testCommentsTestCombo.some(y => y['item'].ntestgrouptestcode === x['item'].ntestgrouptestcode))\r\n            if (duplicatePresent) {\r\n                testCommentsTestCombo = testCommentsTestCombo\r\n            } else {\r\n                testCommentsTestCombo = [...testCommentsTestCombo, ...selectedTestTempArray];\r\n            }\r\n        }\r\n        else if (tabName == 'IDS_REPEAT') {\r\n            let selectedTestTempArray = []\r\n            selectedTestTempArray = testRepeatTestCombo.filter(this.selectedTestRemove);\r\n            testRepeatTestCombo = testRepeatTestCombo.filter(this.writtenRules);\r\n            let duplicatePresent = selectedTestTempArray.some(x => testRepeatTestCombo.some(y => y['item'].ntestgrouptestcode === x['item'].ntestgrouptestcode))\r\n            if (duplicatePresent) {\r\n                testRepeatTestCombo = testRepeatTestCombo\r\n            } else {\r\n                testRepeatTestCombo = [...testRepeatTestCombo, ...selectedTestTempArray];\r\n            }\r\n        }\r\n        else if (tabName == 'IDS_ENFORCERESULT') {\r\n            let selectedTestTempArray = []\r\n            selectedTestTempArray = testenforceTestCombo.filter(this.selectedTestRemove);\r\n            testenforceTestCombo = testenforceTestCombo.filter(this.writtenRules);\r\n            let duplicatePresent = selectedTestTempArray.some(x => testenforceTestCombo.some(y => y['item'].ntestgrouptestcode === x['item'].ntestgrouptestcode))\r\n            if (duplicatePresent) {\r\n                testenforceTestCombo = testenforceTestCombo\r\n            } else {\r\n                testenforceTestCombo = [...testenforceTestCombo, ...selectedTestTempArray];\r\n            }\r\n        }\r\n        else {\r\n\r\n        }\r\n        selectedRecord['ntestgrouptestcode']&& delete selectedRecord['ntestgrouptestcode']\r\n        selectedRecord['nsampletestcommentscode']&&delete selectedRecord['nsampletestcommentscode']\r\n        selectedRecord['ncommentsubtypecode']&&delete selectedRecord['ncommentsubtypecode']\r\n        selectedRecord['ncommenttypecode']&&delete selectedRecord['ncommenttypecode']\r\n        selectedRecord['sgeneralcomments']&&delete selectedRecord['sgeneralcomments']\r\n        selectedRecord['needoutsource']&&delete selectedRecord['needoutsource']\r\n        selectedRecord['sdescription']&&delete selectedRecord['sdescription']\r\n        selectedRecord['ntestgrouptestparametercode']&&delete selectedRecord['ntestgrouptestparametercode']\r\n        selectedRecord['senforceresult']&&delete selectedRecord['senforceresult']\r\n        selectedRecord['ngradecode']&&delete selectedRecord['ngradecode']\r\n        selectedRecord['nfromsitecode']&&delete selectedRecord['nfromsitecode']\r\n        selectedRecord['ntositecode']&&delete selectedRecord['ntositecode']\r\n        selectedRecord['nrepeatcountno']&&delete selectedRecord['nrepeatcountno']\r\n\r\n        if (this.props.Login.addGroupList.length > 0) {\r\n            action = \"IDS_ADDTEST\"\r\n            openModalPopup = true;\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    openModalPopup,\r\n                    action,\r\n                    selectedRecord,\r\n                    openmodalsavePopup: false,\r\n                    testInitiateTestCombo,\r\n                    testCommentsTestCombo,\r\n                    testRepeatTestCombo,\r\n                    testenforceTestCombo\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        } else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_PLEASEADDRULETOADDOUTCOME\" }));\r\n        }\r\n\r\n    }\r\n    onRuleChange = (comboData, fieldName, groupIndex, index) => {\r\n        let PredefinedParameterOptions= this.props.Login.masterData.PredefinedParameterOptions||[] \r\n        const { selectedRecord } = this.state;\r\n        this.clearSelectedRule(selectedRecord, index); \r\n        if(selectedRecord[\"groupList\"][groupIndex][index][fieldName]&&\r\n            selectedRecord[\"groupList\"][groupIndex][index][fieldName].value!==comboData.value)\r\n        {\r\n            selectedRecord[\"groupList\"][groupIndex][index]['ndiagnosticcasecode']&& delete selectedRecord[\"groupList\"][groupIndex][index]['ndiagnosticcasecode']\r\n            selectedRecord[\"groupList\"][groupIndex][index]['ngradecode']&&delete selectedRecord[\"groupList\"][groupIndex][index]['ngradecode'] \r\n            selectedRecord[\"groupList\"][groupIndex][index]['ntestgrouptestpredefcode']&&delete selectedRecord[\"groupList\"][groupIndex][index]['ntestgrouptestpredefcode'] \r\n            selectedRecord[\"groupList\"][groupIndex][index]['ntestgrouptestcharcode']&&delete selectedRecord[\"groupList\"][groupIndex][index]['ntestgrouptestcharcode'] \r\n            selectedRecord[\"groupList\"][groupIndex][index]['ntestgrouptestnumericcode']&&delete selectedRecord[\"groupList\"][groupIndex][index]['ntestgrouptestnumericcode']  \r\n            selectedRecord[\"groupList\"][groupIndex][index]['ssymbolname']&&delete selectedRecord[\"groupList\"][groupIndex][index]['ssymbolname']   \r\n        } \r\n        selectedRecord[\"groupList\"][groupIndex][index][fieldName] = comboData;  \r\n        selectedRecord[\"groupList\"][groupIndex][index][fieldName]['nparenttestgrouptestcode'] = this.props.Login.masterData.SelectedTest.ntestgrouptestcode;  \r\n        selectedRecord[\"groupList\"][groupIndex][index][fieldName]['nparentstestname'] = this.props.Login.masterData.SelectedTest.stestname;  \r\n        if(selectedRecord[\"groupList\"][groupIndex][index]['orderresulttype'])\r\n        {\r\n            if(selectedRecord[\"groupList\"][groupIndex][index]['orderresulttype'].value === 3)\r\n            {\r\n                let nparametertypecode=selectedRecord[\"groupList\"][groupIndex][index][fieldName]['item']['nparametertypecode'] \r\n                 if(nparametertypecode===parameterType.PREDEFINED)\r\n                {\r\n                    this.props.getParameterResultValue(selectedRecord[\"groupList\"][groupIndex][index],groupIndex,index,PredefinedParameterOptions,selectedRecord, this.props.Login.masterData, this.props.Login.userInfo) \r\n                }\r\n                else{\r\n                    if (selectedRecord[\"groupList\"][groupIndex][index][fieldName]) {\r\n                        this.setState({\r\n                            selectedRecord,\r\n                            groupIndex,\r\n                            index\r\n                        });\r\n                    }\r\n                }    \r\n            }      else{\r\n                if (selectedRecord[\"groupList\"][groupIndex][index][fieldName]) {\r\n                    this.setState({\r\n                        selectedRecord,\r\n                        groupIndex,\r\n                        index\r\n                    });\r\n                }\r\n            }  \r\n        }\r\n        else{\r\n            if (selectedRecord[\"groupList\"][groupIndex][index][fieldName]) {\r\n                this.setState({\r\n                    selectedRecord,\r\n                    groupIndex,\r\n                    index\r\n                });\r\n            }\r\n        }  \r\n    }\r\n    onRuleInputChange = (event, fieldName, groupIndex, index) => {\r\n        const { selectedRecord } = this.state;\r\n        selectedRecord[\"groupList\"][groupIndex][index][fieldName] = event.target.value;\r\n        selectedRecord[\"groupList\"][groupIndex][index]['sfinal'] = event.target.value; \r\n        this.setState({ selectedRecord });\r\n    }\r\n    onRuleNumericInputOnChange = (event, fieldName, groupIndex, index) => {\r\n        const { selectedRecord } = this.state;\r\n        if(groupIndex===undefined&&index===undefined)\r\n        {\r\n            selectedRecord[fieldName] =  event;\r\n            this.setState({ selectedRecord }); \r\n        } \r\n        else\r\n        {\r\n            if(event!==0){ \r\n                selectedRecord[\"groupList\"][groupIndex][index][fieldName] =  event;\r\n                selectedRecord[\"groupList\"][groupIndex][index]['sfinal']=  event;\r\n                this.setState({ selectedRecord });\r\n            } \r\n        } \r\n    }\r\n    onMasterDataChange = (comboData, fieldName, groupIndex, index) => {\r\n        const { selectedRecord } = this.state;\r\n        let PredefinedParameterOptions= this.props.Login.masterData.PredefinedParameterOptions||[]  \r\n        let isResultorOrderType = [];\r\n        let optionsByRule = [];\r\n        if (this.state.optionsByRule && this.state.optionsByRule.length > 0) {\r\n            optionsByRule = this.state.optionsByRule\r\n        }\r\n        else {\r\n            optionsByRule[groupIndex] = [];\r\n            optionsByRule[groupIndex][index] = [];\r\n        }\r\n        if (this.state.isResultorOrderType && this.state.isResultorOrderType.length > 0) {\r\n            isResultorOrderType = this.state.isResultorOrderType\r\n        }\r\n        else {\r\n            isResultorOrderType[groupIndex] = [];\r\n            isResultorOrderType[groupIndex][index] = [];\r\n        }\r\n        if (fieldName !== 'ndiagnosticcasecode' && fieldName !== 'ngradecode'&&\r\n        fieldName !== 'ntestgrouptestpredefcode' && fieldName !== 'ntestgrouptestcharcode' && fieldName !== 'ntestgrouptestnumericcode') {\r\n            if(selectedRecord[\"groupList\"][groupIndex][index][fieldName]&&\r\n            selectedRecord[\"groupList\"][groupIndex][index][fieldName].value!==comboData.value)\r\n        {\r\n            selectedRecord[\"groupList\"][groupIndex][index]['ndiagnosticcasecode']&& delete selectedRecord[\"groupList\"][groupIndex][index]['ndiagnosticcasecode']\r\n            selectedRecord[\"groupList\"][groupIndex][index]['ngradecode']&&delete selectedRecord[\"groupList\"][groupIndex][index]['ngradecode'] \r\n            selectedRecord[\"groupList\"][groupIndex][index]['ntestgrouptestpredefcode']&&delete selectedRecord[\"groupList\"][groupIndex][index]['ntestgrouptestpredefcode'] \r\n            selectedRecord[\"groupList\"][groupIndex][index]['ntestgrouptestcharcode']&&delete selectedRecord[\"groupList\"][groupIndex][index]['ntestgrouptestcharcode'] \r\n            selectedRecord[\"groupList\"][groupIndex][index]['ntestgrouptestnumericcode']&&delete selectedRecord[\"groupList\"][groupIndex][index]['ntestgrouptestnumericcode']  \r\n            selectedRecord[\"groupList\"][groupIndex][index]['ssymbolname']&&delete selectedRecord[\"groupList\"][groupIndex][index]['ssymbolname']   \r\n        } \r\n        selectedRecord[\"groupList\"][groupIndex][index][fieldName] = comboData; \r\n            if (isResultorOrderType[groupIndex] === undefined) {\r\n                isResultorOrderType[groupIndex] = [];\r\n                isResultorOrderType[groupIndex][index] = [];\r\n            }\r\n            isResultorOrderType[groupIndex][index] = comboData.value\r\n            if (optionsByRule[groupIndex] === undefined) {\r\n                optionsByRule[groupIndex] = [];\r\n                optionsByRule[groupIndex][index] = [];\r\n            }\r\n            if (isResultorOrderType[groupIndex][index] === 1) { \r\n                optionsByRule[groupIndex][index] = this.props.Login.masterData.DiagnosticCaseList\r\n            }\r\n            else if (isResultorOrderType[groupIndex][index] === 3) { \r\n                let nparametertypecode=selectedRecord[\"groupList\"][groupIndex][index]['stestname']['item']['nparametertypecode'] \r\n                 if(nparametertypecode===parameterType.PREDEFINED)\r\n                {\r\n                    this.props.getParameterResultValue(selectedRecord[\"groupList\"][groupIndex][index],groupIndex,index,PredefinedParameterOptions,selectedRecord, this.props.Login.masterData, this.props.Login.userInfo) \r\n                } \r\n                else\r\n                {\r\n                    optionsByRule[groupIndex][index] = this.props.Login.masterData.GradeList \r\n                }\r\n            }\r\n            else { \r\n                optionsByRule[groupIndex][index] = this.props.Login.masterData.GradeList\r\n            }\r\n            this.setState({ selectedRecord, isResultorOrderType, optionsByRule });\r\n        } \r\n        else {\r\n            selectedRecord[\"groupList\"][groupIndex][index][fieldName] = comboData; \r\n            selectedRecord[\"groupList\"][groupIndex][index]['sfinal'] = comboData.label; \r\n            this.setState({ selectedRecord });\r\n        }\r\n    }\r\n    addRule = (type, groupIndex) => {\r\n        const { selectedRecord } = this.state;\r\n        let viewColumnListByRule = this.props.Login.viewColumnListByRule || [];\r\n        const addGroupList = this.props.Login.addGroupList || [];\r\n        const arrayLength = addGroupList[groupIndex];\r\n        addGroupList[groupIndex] = arrayLength + 1;\r\n        selectedRecord[\"groupList\"][groupIndex][arrayLength] = {};\r\n        viewColumnListByRule = this.props.Login.viewColumnList || this.props.Login.databaseviewList;;\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                addGroupList,\r\n                viewColumnListByRule,\r\n                activeTabIndex:0\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n    paneSizeChange = (d) => {\r\n        this.setState({\r\n            splitChangeWidthPercentage: d\r\n        })\r\n    }\r\n\r\n    addComments = () => {\r\n        let openModalPopup = this.props.Login.openModalPopup;\r\n        let action = this.props.Login.action;\r\n        let selectedParameterRulesEngine = this.props.Login.masterData.selectedParameterRulesEngine || [];\r\n        let testparameter = this.props.Login.masterData.testCommentsTestCombo || [];\r\n        let selectedRecord = this.props.Login.selectedRecord || {}\r\n        selectedRecord['ntestgrouptestcode'] = {}\r\n        selectedRecord['ntestgrouptestcode'] = testparameter.filter(x => { return x.value === selectedParameterRulesEngine.ntestgrouptestcode })[0]\r\n\r\n        delete selectedRecord['nsampletestcommentscode']\r\n        delete selectedRecord['ncommentsubtypecode']\r\n        delete selectedRecord['ncommenttypecode']\r\n        delete selectedRecord['sgeneralcomments']\r\n        delete selectedRecord['sdescription']\r\n\r\n\r\n        if (this.props.Login.addGroupList.length > 0) {\r\n            if (this.props.Login.activeTabIndex === 2) {\r\n                action = \"IDS_ADDTESTCOMMENTS\"\r\n            }\r\n            else {\r\n                action = \"IDS_ADDREPORTCOMMENTS\"\r\n            }\r\n            openModalPopup = true;\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    openModalPopup,\r\n                    action,\r\n                    selectedRecord,\r\n                    openmodalsavePopup: false\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        } else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_PLEASEADDRULETOADDOUTCOME\" }));\r\n        }\r\n\r\n    }\r\n    addModalSite = () => {\r\n        let openModalPopup = this.props.Login.openModalPopup;\r\n\r\n        let selectedParameterRulesEngine = this.props.Login.masterData.selectedParameterRulesEngine || [];\r\n        let testparameter = this.props.Login.masterData.testInitiateTestCombo || [];\r\n        let selectedRecord = this.props.Login.selectedRecord || {}\r\n        selectedRecord['ntestgrouptestcode'] = {}\r\n        selectedRecord['ntestgrouptestcode'] = testparameter.filter(x => { return x.value === selectedParameterRulesEngine.ntestgrouptestcode })[0]\r\n        selectedRecord['nfromsitecode']&&delete selectedRecord['nfromsitecode']\r\n        selectedRecord['ntositecode']&&delete selectedRecord['ntositecode']\r\n\r\n        openModalPopup = true;\r\n        let action = this.props.Login.action;\r\n        action = \"IDS_ADDSITE\"\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                selectedRecord,\r\n                openModalPopup,\r\n                action,\r\n                openmodalsavePopup: false\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n    modalsaveClick = () => {\r\n        let needoutsource = this.props.Login.needoutsource || {};\r\n        let selectedRecord = this.state.selectedRecord || {};\r\n        let masterData = this.props.Login.masterData || {};\r\n        let testInitiateTests = this.props.Login.testInitiateTests || [];\r\n        let testCommentsTests = this.props.Login.testCommentsTests || [];\r\n        let testRepeatTests = this.props.Login.testRepeatTests || [];\r\n        let testenforceTests = this.props.Login.testenforceTests || [];\r\n\r\n\r\n        let reportCommentsTests = this.props.Login.reportCommentsTests || [];\r\n\r\n        let siteObject = this.props.Login.siteObject || {};\r\n        let testCommentObject = this.props.Login.testCommentObject || {};\r\n        let reportCommentObject = this.props.Login.reportCommentObject || {};\r\n\r\n\r\n        let testInitiateTestsTemp = [];\r\n        let testCommentsTestsTemp = [];\r\n        let reportCommentsTestsTemp = [];\r\n        let testInitiateSiteTemp = [];\r\n\r\n        let testCommentsTestsTab = this.props.Login.masterData.testCommentsTestsTab || []; \r\n\r\n\r\n        let reportCommentsTestsTab = this.props.Login.reportCommentsTestsTab || [];\r\n        let testInitiateSiteTab = this.props.Login.masterData.testInitiateSiteTab || [];\r\n\r\n        let testInitiateTestOptions = this.props.Login.testInitiateTestOptions || [];\r\n        let testCommentsTestOptions = this.props.Login.testCommentsTestOptions || [];\r\n        let reportCommentsTestOptions = this.props.Login.reportCommentsTestOptions || [];\r\n\r\n\r\n        let testInitiateTestdeletedOptions = this.props.Login.testInitiateTestdeletedOptions || [];\r\n        let testCommentsTestdeletedOptions = this.props.Login.testCommentsTestdeletedOptions || [];\r\n        let reportCommentsTestdeletedOptions = this.props.Login.reportCommentsTestdeletedOptions || [];\r\n\r\n        let updateInfo = {}\r\n        if (this.props.Login.action === 'IDS_ADDTEST') {\r\n            let npkAtestparametercode = 0;\r\n            let npkBtestparametercode = 0;\r\n            let npkCtestparametercode = 0;\r\n            let npkDtestparametercode = 0;\r\n            if (this.props.Login.activeTabIndex === 1) {\r\n                let isduplicate = {}\r\n                isduplicate = testInitiateTests.filter(x => x.ntestgrouptestcode ===\r\n                    selectedRecord['ntestgrouptestcode'].item['ntestgrouptestcode'])\r\n                if (isduplicate.length === 0) {\r\n                    masterData['testParameter'] = {}\r\n                    npkAtestparametercode = testInitiateTests.length>0?Math.max(...testInitiateTests.map(x => x.npkAtestparametercode)) : 0;\r\n                    npkAtestparametercode++;\r\n                    selectedRecord['ntestgrouptestcode'].item['npkAtestparametercode'] = npkAtestparametercode \r\n                    if( selectedRecord['ntestgrouptestcode'].item['nrepeatcountno']){\r\n                        selectedRecord['ntestgrouptestcode'].item['nrepeatcountno']=0;\r\n                    } \r\n                    testInitiateTests.push(selectedRecord['ntestgrouptestcode'].item);\r\n                    masterData['testParameter'] = sortData(testInitiateTests, 'descending', 'npkAtestparametercode')\r\n                    masterData['selectedParameterRulesEngine'] = selectedRecord['ntestgrouptestcode'].item\r\n                    delete selectedRecord['ntestgrouptestcode']\r\n\r\n                }\r\n                else {\r\n                    return toast.warn(this.props.intl.formatMessage({ id: \"IDS_ALREADYEXISTS\" }));\r\n                }\r\n\r\n            }\r\n            if (this.props.Login.activeTabIndex === 2) {\r\n                let isduplicate = {}\r\n                isduplicate = testCommentsTests.filter(x => x.ntestgrouptestcode ===\r\n                    selectedRecord['ntestgrouptestcode'].item['ntestgrouptestcode'])\r\n                if (isduplicate.length === 0) {\r\n                    masterData['testParameterComments'] = {}\r\n                    npkBtestparametercode = testCommentsTests.length>0?Math.max(...testCommentsTests.map(x => x.npkBtestparametercode)) : 0;\r\n                    npkBtestparametercode++;\r\n                    selectedRecord['ntestgrouptestcode'].item['npkBtestparametercode'] = npkBtestparametercode\r\n                    selectedRecord['ntestgrouptestcode'].item['sdescription'] = selectedRecord['sdescription'] ? selectedRecord['sdescription'] : '-'\r\n                    testCommentsTests.push(selectedRecord['ntestgrouptestcode'].item);\r\n                    masterData['testParameterComments'] = sortData(testCommentsTests, 'descending', 'npkBtestparametercode')\r\n                    masterData['selectedParameterRulesEngine'] = selectedRecord['ntestgrouptestcode'].item\r\n                    //delete selectedRecord['ntestgrouptestcode']\r\n                }\r\n                else {\r\n                    return toast.warn(this.props.intl.formatMessage({ id: \"IDS_ALREADYEXISTS\" }));\r\n                }\r\n            }\r\n            if (this.props.Login.activeTabIndex === 3) {\r\n                let isduplicate = {}\r\n                isduplicate = testRepeatTests.filter(x => x.ntestgrouptestcode ===\r\n                    selectedRecord['ntestgrouptestcode'].item['ntestgrouptestcode'])\r\n                if (isduplicate.length === 0) {\r\n                    masterData['testRepeat'] = {}\r\n                    npkCtestparametercode = testRepeatTests.length>0? Math.max(...testRepeatTests.map(x => x.npkCtestparametercode)) : 0;\r\n                    npkCtestparametercode++;\r\n                    selectedRecord['ntestgrouptestcode'].item['npkCtestparametercode'] = npkCtestparametercode\r\n                    selectedRecord['ntestgrouptestcode'].item['nrepeatcountno'] = selectedRecord['nrepeatcountno']?selectedRecord['nrepeatcountno']:1\r\n                    testRepeatTests.push(selectedRecord['ntestgrouptestcode'].item);\r\n                    masterData['testRepeatTestsTab'] = sortData(testRepeatTests, 'descending', 'npkCtestparametercode')\r\n                    masterData['testRepeat'] = sortData(testRepeatTests, 'descending', 'npkCtestparametercode')\r\n                    masterData['selectedParameterRulesEngine'] = selectedRecord['ntestgrouptestcode'].item\r\n                    delete selectedRecord['ntestgrouptestcode']\r\n                }\r\n                else {\r\n                    return toast.warn(this.props.intl.formatMessage({ id: \"IDS_ALREADYEXISTS\" }));\r\n                }\r\n            }\r\n            if (this.props.Login.activeTabIndex === 4) {\r\n                let isduplicate = {}\r\n                // isduplicate = testenforceTests.filter(x => x.ntestgrouptestcode ===\r\n                //     selectedRecord['ntestgrouptestcode'].item['ntestgrouptestcode'])\r\n                    isduplicate=testenforceTests.some(x=>selectedRecord['ntestgrouptestcode'].value===x.ntestgrouptestcode&&selectedRecord['ntestgrouptestparametercode'].value===x.ntestgrouptestparametercode)\r\n\r\n                if (!isduplicate) { \r\n                    masterData['testenforceTests'] = {}\r\n                    npkDtestparametercode = testenforceTests.length>0? Math.max(...testenforceTests.map(x => x.npkDtestparametercode)) : 0;\r\n                    npkDtestparametercode++;\r\n                    // selectedRecord['ntestgrouptestcode'].item['sparametersynonym'] = selectedRecord['ntestgrouptestparametercode'] && selectedRecord['ntestgrouptestparametercode'].label\r\n                    // selectedRecord['ntestgrouptestcode'].item['ngradecode'] = selectedRecord['ngradecode'] && selectedRecord['ngradecode'].value\r\n                    // selectedRecord['ntestgrouptestcode'].item['sgradename'] = selectedRecord['ngradecode'] && selectedRecord['ngradecode'].label\r\n                    // selectedRecord['ntestgrouptestcode'].item['ntestgrouptestparametercode'] = selectedRecord['ntestgrouptestparametercode'] && selectedRecord['ntestgrouptestparametercode'].value\r\n                    // selectedRecord['ntestgrouptestcode'].item['senforceresult'] = selectedRecord['senforceresult'] && selectedRecord['senforceresult']\r\n                    let object={...selectedRecord['ntestgrouptestcode'].item,\r\n                    'sparametersynonym':selectedRecord['ntestgrouptestparametercode'] && selectedRecord['ntestgrouptestparametercode'].label,\r\n                    'ngradecode':selectedRecord['ngradecode'] && selectedRecord['ngradecode'].value,\r\n                    'sgradename': selectedRecord['ngradecode'] && selectedRecord['ngradecode'].label,\r\n                    'ntestgrouptestparametercode':selectedRecord['ntestgrouptestparametercode'] && selectedRecord['ntestgrouptestparametercode'].value,\r\n                    'senforceresult':selectedRecord['senforceresult'] && selectedRecord['senforceresult'],\r\n                'npkDtestparametercode':npkDtestparametercode}\r\n                   // selectedRecord['ntestgrouptestcode'].item['npkDtestparametercode'] = npkDtestparametercode\r\n                    testenforceTests.push(object);\r\n                    masterData['testenforceTestsTab'] = sortData(testenforceTests, 'descending', 'npkDtestparametercode') \r\n                    masterData['testenforceTests'] = sortData(testenforceTests, 'descending', 'npkDtestparametercode')\r\n                    //  masterData['selectedParameterRulesEngine'] = selectedRecord['ntestgrouptestcode'].item\r\n                    delete selectedRecord['ntestgrouptestcode']\r\n                }\r\n                else {\r\n                    return toast.warn(this.props.intl.formatMessage({ id: \"IDS_ALREADYEXISTS\" }));\r\n                }\r\n            }\r\n            updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    openModalPopup: false,\r\n                    masterData,\r\n                    testInitiateTests,\r\n                    testCommentsTests,\r\n                    reportCommentsTests,\r\n                    npkAtestparametercode,\r\n                    npkBtestparametercode,\r\n                    npkCtestparametercode,\r\n                    testInitiateTestOptions,\r\n                    testInitiateTestdeletedOptions,\r\n                    selectedRecord,\r\n                    testRepeatTests,\r\n                    testenforceTests\r\n                }\r\n            }\r\n        }\r\n        if (selectedRecord['nsampletestcommentscode'] || selectedRecord['sgeneralcomments']\r\n        ) {\r\n            masterData['testComments'] = {}\r\n            let npKAsampletestcommentscode = 0;\r\n            let nslno = 0;\r\n\r\n            let object = {\r\n                ncommentsubtypecode: selectedRecord['ncommentsubtypecode'],\r\n                scommentsubtype: selectedRecord['ncommentsubtypecode']['label'],\r\n                stestsynonym: selectedRecord['ntestgrouptestcode']['label'], \r\n                ncommenttypecode: selectedRecord['ncommenttypecode']['value'],\r\n                scommenttype: selectedRecord['ncommenttypecode']['label'],\r\n                nsampletestcommentscode: selectedRecord['nsampletestcommentscode'] ? selectedRecord['nsampletestcommentscode'] : -1,\r\n                // spredefinedname: selectedRecord['nsampletestcommentscode'] ? selectedRecord['nsampletestcommentscode'].label : \"-\",\r\n                // sgeneralcomments: selectedRecord['sgeneralcomments'] ? selectedRecord['sgeneralcomments'] : \"-\",\r\n                spredefinedname:selectedRecord['nsampletestcommentscode']? selectedRecord['nsampletestcommentscode'].label:\r\n                selectedRecord['sgeneralcomments'] ? selectedRecord['sgeneralcomments'] : \"-\",\r\n                scomments: selectedRecord['sdescription'] ? selectedRecord['sdescription'] : '-',\r\n                sdescription: selectedRecord['sdescription'] ? selectedRecord['sdescription'] : '-'  \r\n                , stestparametersynonym: masterData.selectedParameterRulesEngine.stestparametersynonym,\r\n                ntestgrouptestcode: masterData.selectedParameterRulesEngine.ntestgrouptestcode,\r\n                npkBtestparametercode:masterData.selectedParameterRulesEngine.npkBtestparametercode\r\n            }\r\n            nslno= testCommentsTestsTab.length>0? Math.max(...testCommentsTestsTab.map(x => x.nslno)):0; \r\n            nslno++;\r\n            if (testCommentObject.hasOwnProperty(masterData.selectedParameterRulesEngine.npkBtestparametercode)) {\r\n                npKAsampletestcommentscode = Math.max(...testCommentObject[masterData.selectedParameterRulesEngine.npkBtestparametercode].map(x => x.npKAsampletestcommentscode));\r\n                npKAsampletestcommentscode++;\r\n                object = { ...object, npKAsampletestcommentscode: npKAsampletestcommentscode,nslno:nslno }\r\n                testCommentsTestsTemp = testCommentObject[masterData.selectedParameterRulesEngine.npkBtestparametercode]\r\n                testCommentsTestsTemp.push(object);\r\n                testCommentsTestsTab.push(object);\r\n                let commentsArrayIndex=testCommentsTests.findIndex(x=>x.npkBtestparametercode===masterData.selectedParameterRulesEngine.npkBtestparametercode)\r\n                testCommentsTests[commentsArrayIndex]['commentsArray']=[];\r\n                testCommentsTests[commentsArrayIndex]['commentsArray']=sortData(testCommentsTestsTemp, 'ascending', 'npKAsampletestcommentscode')\r\n                testCommentObject[masterData.selectedParameterRulesEngine.npkBtestparametercode] = sortData(testCommentsTestsTemp, 'descending', 'npKAsampletestcommentscode')\r\n                delete selectedRecord['nsampletestcommentscode']\r\n                delete selectedRecord['ncommentsubtypecode']\r\n                delete selectedRecord['ncommenttypecode']\r\n                delete selectedRecord['sgeneralcomments']\r\n            }\r\n            else {\r\n                npKAsampletestcommentscode++;\r\n                object = { ...object, npKAsampletestcommentscode: npKAsampletestcommentscode,nslno:nslno }\r\n                testCommentsTestsTemp.push(object);\r\n                testCommentsTestsTab.push(object);\r\n                let commentsArrayIndex=testCommentsTests.findIndex(x=>x.npkBtestparametercode===masterData.selectedParameterRulesEngine.npkBtestparametercode)\r\n                testCommentsTests[commentsArrayIndex]['commentsArray']=[];\r\n                testCommentsTests[commentsArrayIndex]['commentsArray']=sortData(testCommentsTestsTemp, 'ascending', 'npKAsampletestcommentscode')\r\n                testCommentObject[masterData.selectedParameterRulesEngine.npkBtestparametercode] = sortData(testCommentsTestsTemp, 'descending', 'npKAsampletestcommentscode')\r\n                delete selectedRecord['nsampletestcommentscode']\r\n                delete selectedRecord['ncommentsubtypecode']\r\n                delete selectedRecord['ncommenttypecode']\r\n                delete selectedRecord['sgeneralcomments']\r\n            }\r\n            masterData['testComments'] = testCommentObject\r\n            masterData['testCommentsTestsTab'] = testCommentsTestsTab \r\n            updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    openModalPopup: false,\r\n                    masterData,\r\n                    testCommentObject, \r\n                    npKAsampletestcommentscode,\r\n                    selectedRecord\r\n                }\r\n            }\r\n        }\r\n        if (selectedRecord['nfromsitecode'] && selectedRecord['ntositecode']) {\r\n          \r\n            if(selectedRecord['nfromsitecode'].value!==selectedRecord['ntositecode'].value){\r\n           \r\n            let siteseqnumber = 0;\r\n            if (siteObject.hasOwnProperty(masterData.selectedParameterRulesEngine.npkAtestparametercode)) {\r\n                let isalreadyExist=siteObject[masterData.selectedParameterRulesEngine.npkAtestparametercode].some(x=>selectedRecord['nfromsitecode'].value===x.nfromsitecode&&selectedRecord['ntositecode'].value===x.ntositecode)\r\n                if(!isalreadyExist){\r\n                    masterData['testSite'] = {}\r\n                siteseqnumber = Math.max(...siteObject[masterData.selectedParameterRulesEngine.npkAtestparametercode].map(x => x.npksitecode));\r\n                siteseqnumber++;\r\n                let object = {\r\n                    npksitecode: siteseqnumber, sfromsitename: selectedRecord['nfromsitecode'].label, stositename: selectedRecord['ntositecode'].label,\r\n                    nfromsitecode: selectedRecord['nfromsitecode'].value, ntositecode: selectedRecord['ntositecode'].value\r\n                    , stestparametersynonym: masterData.selectedParameterRulesEngine.stestparametersynonym, npkAtestparametercode: masterData.selectedParameterRulesEngine.ntestgrouptestcode\r\n                }\r\n                testInitiateSiteTemp = siteObject[masterData.selectedParameterRulesEngine.npkAtestparametercode]\r\n                testInitiateSiteTemp.push(object);\r\n                testInitiateSiteTab.push(object);\r\n                siteObject[masterData.selectedParameterRulesEngine.npkAtestparametercode] = sortData(testInitiateSiteTemp, 'descending', 'npksitecode')\r\n                delete selectedRecord['ntestgrouptestcode']\r\n                delete selectedRecord['nfromsitecode'];\r\n                delete selectedRecord['ntositecode'];\r\n            }\r\n            else\r\n            {\r\n                return toast.warn(this.props.intl.formatMessage({ id: \"IDS_FROMANDTOSITEALREADYEXIST\" }));  \r\n            }\r\n\r\n            }\r\n            else {\r\n                masterData['testSite'] = {}\r\n                siteseqnumber++;\r\n                let object = {\r\n                    npksitecode: siteseqnumber, sfromsitename: selectedRecord['nfromsitecode'].label, stositename: selectedRecord['ntositecode'].label,\r\n                    nfromsitecode: selectedRecord['nfromsitecode'].value, ntositecode: selectedRecord['ntositecode'].value\r\n                    , stestparametersynonym: masterData.selectedParameterRulesEngine.stestparametersynonym, npkAtestparametercode: masterData.selectedParameterRulesEngine.npkAtestparametercode\r\n                }\r\n                testInitiateSiteTemp.push(object);\r\n                testInitiateSiteTab.push(object);\r\n                siteObject[masterData.selectedParameterRulesEngine.npkAtestparametercode] = sortData(testInitiateSiteTemp, 'descending', 'npksitecode')\r\n                delete selectedRecord['ntestgrouptestcode']\r\n                delete selectedRecord['nfromsitecode'];\r\n                delete selectedRecord['ntositecode'];\r\n            }\r\n            masterData['testSite'] = siteObject\r\n            masterData['testInitiateSiteTab'] = testInitiateSiteTab \r\n            updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    openModalPopup: false,\r\n                    masterData,\r\n                    siteObject,\r\n                    siteseqnumber,\r\n                    \r\n                }\r\n            }\r\n        }\r\n        else\r\n        {\r\n           toast.warn(this.props.intl.formatMessage({ id: \"IDS_FROMANDTOSITECANNOTBESAME\" })); \r\n        }\r\n   \r\n        }\r\n        if (Object.keys(updateInfo).length > 0) {\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n    }\r\n    deletModalSite = (inputparam, action, row) => {\r\n        let temparray = [];\r\n        let index = 0;\r\n\r\n        let testInitiateSiteTab = this.props.Login.masterData.testInitiateSiteTab\r\n        let testCommentsTestsTab = this.props.Login.masterData.testCommentsTestsTab\r\n        let reportCommentsTestsTab = this.props.Login.reportCommentsTestsTab\r\n\r\n\r\n        let siteObject = this.props.Login.siteObject || {};\r\n        let testCommentObject = this.props.Login.testCommentObject || {};\r\n        let reportCommentObject = this.props.Login.reportCommentObject || {};\r\n        let masterData = this.props.Login.masterData || {};\r\n\r\n\r\n\r\n        if (this.props.Login.activeTabIndex === 1) {\r\n            temparray = siteObject[masterData.selectedParameterRulesEngine.npkAtestparametercode]\r\n            temparray.splice(row['dataIndex'], 1);\r\n            testInitiateSiteTab.splice(row['dataIndex'], 1);\r\n            siteObject[masterData.selectedParameterRulesEngine.npkAtestparametercode] = temparray\r\n\r\n        }\r\n        if (this.props.Login.activeTabIndex === 2) {\r\n            temparray = testCommentObject[masterData.selectedParameterRulesEngine.npkBtestparametercode]\r\n            index = temparray.findIndex(x => x.npKAsampletestcommentscode === row['dataItem'].npKAsampletestcommentscode)\r\n            // temparray.splice(row['dataIndex'], 1);\r\n            temparray.splice(index, 1);\r\n            index = testCommentsTestsTab.findIndex(x => x.nslno === row['dataItem'].nslno)\r\n            //   testCommentsTestsTab.splice(row['dataIndex'], 1);\r\n            testCommentsTestsTab.splice(index, 1);\r\n            testCommentObject[masterData.selectedParameterRulesEngine.npkBtestparametercode] = temparray\r\n        }\r\n        if (this.props.Login.activeTabIndex === 3) {\r\n            temparray = masterData.testRepeat\r\n            temparray.splice(row['dataIndex'], 1);\r\n            reportCommentsTestsTab.splice(row['dataIndex'], 1);\r\n            reportCommentObject[masterData.selectedParameterRulesEngine.ntestgrouptestcode] = temparray\r\n        }\r\n        let updateInfo = {}\r\n        updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                siteObject,\r\n                testCommentObject,\r\n                reportCommentObject,\r\n                testInitiateSiteTab,\r\n                reportCommentsTestsTab,\r\n                testCommentsTestsTab\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n    deleteModalTest = (inputparam, action, row) => {\r\n\r\n        let testInitiateTests = this.props.Login.testInitiateTests || [];\r\n        let testCommentsTests = this.props.Login.testCommentsTests || [];\r\n        let testRepeatTests = this.props.Login.testRepeatTests || [];\r\n        let testenforceTests = this.props.Login.testenforceTests || [];\r\n        let reportCommentsTests = this.props.Login.reportCommentsTests || [];\r\n        let testInitiateSiteTab = this.props.Login.masterData.testInitiateSiteTab \r\n        let testCommentsTestsTab = this.props.Login.masterData.testCommentsTestsTab\r\n        let testRepeatTestsTab = this.props.Login.masterData.testRepeatTestsTab\r\n        let testenforceTestsTab = this.props.Login.masterData.testenforceTestsTab\r\n\r\n        let siteObject = this.props.Login.siteObject || {};\r\n        let testCommentObject = this.props.Login.testCommentObject || {};\r\n        let reportCommentObject = this.props.Login.reportCommentObject || {};\r\n\r\n\r\n        let testInitiateTestOptions = this.props.Login.testInitiateTestOptions || [];\r\n        let testCommentsTestOptions = this.props.Login.testCommentsTestOptions || [];\r\n        let reportCommentsTestOptions = this.props.Login.reportCommentsTestOptions || [];\r\n        let viewColumnListByRule = this.props.Login.viewColumnListByRule || [];\r\n\r\n\r\n        let testInitiateTestdeletedOptions = this.props.Login.testInitiateTestdeletedOptions || [];\r\n        let testCommentsTestdeletedOptions = this.props.Login.testCommentsTestdeletedOptions || [];\r\n        let reportCommentsTestdeletedOptions = this.props.Login.reportCommentsTestdeletedOptions || [];\r\n\r\n        let masterData = this.props.Login.masterData || {};\r\n        let index = 0;\r\n        if (this.props.Login.activeTabIndex === 1) {\r\n           // index = this.props.Login.testInitiateTests.findIndex(x => x.ntestgrouptestcode === masterData.selectedParameterRulesEngine.ntestgrouptestcode)\r\n            index = this.props.Login.testInitiateTests.findIndex(x => x.npkAtestparametercode === inputparam.testParameter.npkAtestparametercode)\r\n            testInitiateTests.splice(index, 1);\r\n            // index = testInitiateSiteTab.findIndex(x => x.ntestgrouptestcode === inputparam.testParameter.ntestgrouptestcode)\r\n            // testInitiateSiteTab.splice(index, 1); \r\n            testInitiateSiteTab=testInitiateSiteTab.filter(function( obj ) {\r\n                return obj.npkAtestparametercode !== inputparam.testParameter.npkAtestparametercode;\r\n            }) \r\n            delete siteObject[inputparam.testParameter.npkAtestparametercode]\r\n        }\r\n        if (this.props.Login.activeTabIndex === 2) {\r\n            index = this.props.Login.testCommentsTests.findIndex(x => x.npkBtestparametercode === inputparam.testParameterComments.npkBtestparametercode)\r\n            testCommentsTests.splice(index, 1); \r\n            // index =  testCommentsTestsTab.findIndex(x => x.ntestgrouptestcode === inputparam.testParameterComments.ntestgrouptestcode) \r\n            // testCommentsTestsTab.splice(index, 1);\r\n            testCommentsTestsTab=testCommentsTestsTab.filter(function( obj ) {\r\n                return obj.npkBtestparametercode !== inputparam.testParameterComments.npkBtestparametercode;\r\n            }) \r\n            delete testCommentObject[inputparam.testParameterComments.npkBtestparametercode]\r\n        }\r\n        if (this.props.Login.activeTabIndex === 3) {\r\n          //  index = this.props.Login.testRepeatTests.findIndex(x => x.ntestgrouptestcode === masterData.selectedParameterRulesEngine.ntestgrouptestcode) \r\n            index=row['dataIndex'] \r\n            testRepeatTests.splice(index, 1);\r\n            testRepeatTestsTab.splice(index, 1); \r\n        }\r\n        if (this.props.Login.activeTabIndex === 4) {\r\n        //    index = this.props.Login.testenforceTests.findIndex(x => x.ntestgrouptestcode === masterData.selectedParameterRulesEngine.ntestgrouptestcode)  \r\n            index=row['dataIndex']\r\n            testenforceTests.splice(index, 1);\r\n            testenforceTestsTab.splice(index, 1); \r\n        }\r\n        let updateInfo = {}\r\n        updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                testInitiateTests,\r\n                siteObject,\r\n                testCommentObject,\r\n                testCommentsTests,\r\n                reportCommentsTests,\r\n                reportCommentObject,\r\n                masterData:{...masterData,   testCommentsTestsTab,testInitiateSiteTab,\r\n                    testRepeatTestsTab,\r\n                    testenforceTestsTab},\r\n                testRepeatTests,\r\n                testenforceTests,\r\n             \r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n    onmodalComboChange = (comboData, fieldName) => {\r\n        let selectedRecord = this.state.selectedRecord || {};\r\n        let isneedsgeneralcomments = this.state.isneedsgeneralcomments || {}\r\n\r\n        if (fieldName === 'ncommentsubtypecode') {\r\n            if (comboData.value === 6) {\r\n                isneedsgeneralcomments = true\r\n                delete selectedRecord['nsampletestcommentscode']\r\n            }\r\n            else {\r\n                isneedsgeneralcomments = false\r\n                delete selectedRecord['sgeneralcomments']\r\n\r\n            }\r\n        }\r\n        else if (fieldName === 'nproductcatcode') {\r\n            selectedRecord[fieldName] = comboData;\r\n            this.props.getSpecificationTestGroupRulesEngine(selectedRecord, this.props.Login.selectedRecord, true, this.props.Login.masterData, this.props.Login.userInfo)\r\n        }\r\n        else if (fieldName === 'ntestgrouptestcode' && this.state.activeTabIndex === 4) {\r\n\r\n            if (selectedRecord['ntestgrouptestparametercode']) {\r\n                if (selectedRecord[fieldName].value !== comboData.value) {\r\n                    delete selectedRecord['ntestgrouptestparametercode']\r\n                }\r\n            }\r\n            selectedRecord[fieldName] = comboData;\r\n            this.props.getParameterRulesEngine(selectedRecord, this.props.Login.masterData, this.props.Login.userInfo)\r\n\r\n        }\r\n        else if (fieldName === 'nallottedspeccode') {\r\n            selectedRecord[fieldName] = comboData;\r\n            this.props.getComponentTestGroupRulesEngine(selectedRecord, this.props.Login.selectedRecord, true, this.props.Login.masterData, this.props.Login.userInfo)\r\n        }\r\n        if (fieldName === 'nsampletestcommentscode') {\r\n            selectedRecord['sdescription'] = comboData.item.sdescription;\r\n        }\r\n        selectedRecord[fieldName] = comboData;\r\n        this.setState({ selectedRecord, isneedsgeneralcomments });\r\n    }\r\n    getOutcomeDetails = (inputParam) => {\r\n        let masterData = this.props.Login.masterData || {};\r\n        const testParameter = this.state.activeTabIndex === 1 ? inputParam.testParameter : this.state.activeTabIndex === 2 ?\r\n            inputParam.testParameterComments : inputParam.testParameterreportComments;\r\n        masterData['selectedParameterRulesEngine'] = {}\r\n        masterData['selectedParameterRulesEngine'] = testParameter;\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                masterData\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n    handleExpandChange = () => {\r\n        let childListMap1 =  new Map();\r\n        let childListMap2 =   new Map();\r\n        let childListMap3 =  new Map();\r\n        let childListMap =  new Map(); \r\n        if (this.props.Login.masterData.activeTabName === 'IDS_Test') { \r\n            let keylst = this.props.Login.masterData.activeTabName === 'IDS_Test' ?\r\n                Object.keys(this.props.Login.masterData.SelectedRulesEngine['jsonuidata']['siteObject']) :\r\n                this.props.Login.masterData.activeTabName === 'IDS_COMMENTS' ?\r\n                    Object.keys(this.props.Login.masterData.SelectedRulesEngine['jsonuidata']['testCommentObject']) :\r\n                    Object.keys(this.props.Login.masterData.SelectedRulesEngine['jsonuidata']['reportCommentObject'])\r\n            keylst.map(key => {\r\n                childListMap.set(parseInt(key),\r\n                    Object.values(this.props.Login.masterData.activeTabName === 'IDS_Test' ?\r\n                        this.props.Login.masterData.SelectedRulesEngine['jsonuidata']['siteObject'][key] :\r\n                        this.props.Login.masterData.activeTabName === 'IDS_COMMENTS' ?\r\n                            this.props.Login.masterData.SelectedRulesEngine['jsonuidata']['testCommentObject'][key] :\r\n                            this.props.Login.masterData.SelectedRulesEngine['jsonuidata']['reportCommentObject'][key]));\r\n            })\r\n            this.setState({ childListMap })\r\n        }\r\n        if (this.props.Login.masterData.activeTabName === 'IDS_COMMENTS') {\r\n            let keylst = Object.keys(this.props.Login.masterData.SelectedRulesEngine['jsonuidata']['testCommentObject'])\r\n            keylst.map(key => {\r\n                childListMap2.set(parseInt(key),\r\n                    Object.values(\r\n                        this.props.Login.masterData.SelectedRulesEngine['jsonuidata']['testCommentObject'][key]));\r\n            })\r\n            this.setState({ childListMap2 })\r\n        }\r\n        if (this.props.Login.masterData.activeTabName === 'IDS_REPORTCOMMENTS') {\r\n            let keylst =\r\n                Object.keys(this.props.Login.masterData.SelectedRulesEngine['jsonuidata']['reportCommentObject']);\r\n            keylst.map(key => {\r\n                childListMap3.set(parseInt(key),\r\n                    Object.values(\r\n                        this.props.Login.masterData.SelectedRulesEngine['jsonuidata']['reportCommentObject'][key]));\r\n            })\r\n            this.setState({ childListMap3 })\r\n        }\r\n    }\r\n    viewOutcome = (props) => {\r\n        if(this.props.Login.masterData['RulesEngine']&&this.props.Login.masterData['RulesEngine'].length>0){ \r\n            let  masterData= this.props.Login.masterData\r\n            masterData['SelectedRulesEngine']=props['SelectedRulesEngine'][0]\r\n            if(masterData['SelectedRulesEngine']['jsonuidata']&&masterData['SelectedRulesEngine']['jsonuidata']['testInitiateTests'])\r\n            {\r\n                 masterData['SelectedRulesEngine']['jsonuidata']['testInitiateTests'].forEach(object => {\r\n                    object['expanded']&&delete object['expanded'];\r\n                  });\r\n            } \r\n            masterData['activeTabName']='IDS_Test'\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                screenName: \"IDS_VIEWOUTCOME\",\r\n                operation: \"IDS_VIEW\",\r\n                openModal: true,\r\n                masterData\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n    else{\r\n        toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTRULETOVIEWOUTCOME\" })); \r\n    }\r\n    }\r\n    openflowview = (props) => {\r\n        if(this.props.Login.masterData['RulesEngine']&&this.props.Login.masterData['RulesEngine'].length>0){\r\n           let  masterData= this.props.Login.masterData \r\n        masterData['SelectedRulesEngine']=props['SelectedRulesEngine'][0]\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                screenName: \"IDS_VIEWRULE\",\r\n                operation: \"IDS_VIEW\",\r\n                openModal: true,\r\n                masterData\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n    else{\r\n        toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTRULETOVIEWRULE\" })); \r\n    }\r\n    } \r\n    handlePageChangeRuleEngine = (event) => {\r\n        this.setState({\r\n            skipRulesEngine: event.skip,\r\n            takeRulesEngine: event.take\r\n        });\r\n    }\r\n    addGroup = () => {\r\n\r\n        const { selectedRecord } = this.state;\r\n        let viewColumnListByRule = this.props.Login.viewColumnListByRule || [];\r\n        const addGroupList = this.props.Login.addGroupList || [];\r\n        const arrayLength = addGroupList.length;\r\n        addGroupList[arrayLength] = 1;\r\n\r\n        viewColumnListByRule = this.props.Login.databaseviewList;\r\n        if (arrayLength === 0) {\r\n            selectedRecord[\"groupList\"] = [];\r\n            selectedRecord[\"filtercolumns\"] = this.props.Login.selectFields;\r\n        }\r\n        if (selectedRecord[\"groupListJoins\"] === undefined) {\r\n            selectedRecord[\"groupListJoins\"] = []\r\n        }\r\n        if (selectedRecord[\"groupListJoins\"][arrayLength - 1] === undefined) {\r\n            selectedRecord[\"groupListJoins\"][arrayLength - 1] = {}\r\n        }\r\n        selectedRecord[\"groupListJoins\"][arrayLength - 1][\"button_and\"] = true;\r\n\r\n        selectedRecord[\"groupList\"][arrayLength] = [];\r\n        selectedRecord[\"groupList\"][arrayLength][\"button_and\"] = true;\r\n        selectedRecord[\"groupList\"][arrayLength][0] = {};\r\n\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                addGroupList,\r\n                viewColumnListByRule,\r\n                selectedRecord,\r\n                activeTabIndex:0\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n    getTestGroupRulesEngineAdd = () => {\r\n        //   if (this.state.selectedcombo['nproductcatcode']) {\r\n        //    const sqlQuery = false;\r\n        //this.setState({ selectedRecord: {} });\r\n        let selectedRecord = this.state.selectedRecord || {}\r\n        this.props.getTestGroupRulesEngineAdd(this.props.Login.userInfo, false, {\r\n            addRuleList: [], addGroupList: [],\r\n            addAggregateList: [], addOrderbyList: []\r\n        }, this.props.Login.masterData);\r\n        //  } else {\r\n        //       toast.info(this.props.intl.formatMessage({ id: \"IDS_SELECTPRODUCTCATEGORY\" }));\r\n\r\n        //   }\r\n\r\n\r\n    }\r\n    closePortalModal = () => {\r\n        let masterData = this.props.Login.masterData || {};\r\n        masterData['testParameter'] = {}\r\n        masterData['testParameterComments'] = {}\r\n        masterData['testParameterreportComments'] = {}\r\n        masterData['testComments'] = {}\r\n        masterData['reportComments'] = {}\r\n        masterData['testSite'] = {}\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: this.props.Login.operation !== 'update' ? {\r\n                activeTabIndex: 0,\r\n                openPortalModal: false, selectedRecord: {}, addRuleList: [], count: 0,\r\n                masterData, testInitiateTests: [], reportCommentsTests: [],\r\n                testCommentsTests: [], siteObject: {}, testCommentObject: {}, reportCommentObject: {},\r\n                npkAtestparametercode: 0,\r\n                npkBtestparametercode: 0,\r\n                npkCtestparametercode: 0,\r\n                testInitiateSiteTab: [],\r\n                testCommentsTestsTab: [],\r\n                reportCommentsTestsTab: []\r\n            } : {\r\n                activeTabIndex: 0,\r\n                openPortalModal: false, selectedRecord: {}, addRuleList: [], count: 0,\r\n                masterData,\r\n                //  testInitiateTests: [], reportCommentsTests: [],\r\n                // testCommentsTests: [], siteObject: {}, testCommentObject: {}, reportCommentObject: {},\r\n                npkAtestparametercode: 0,\r\n                npkBtestparametercode: 0,\r\n                npkCtestparametercode: 0\r\n                // ,\r\n                // testInitiateSiteTab: [],\r\n                // testCommentsTestsTab: [],\r\n                // reportCommentsTestsTab: []\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n    changePropertyView = (index, event, status) => {\r\n\r\n        let id = false;\r\n        let activeTabIndex\r\n        let activeTabId\r\n        let masterData = this.props.Login.masterData || {};\r\n        let activeTestTab = this.props.Login.activeTestTab || \"\"\r\n        const { selectedRecord } = this.state;\r\n        if (selectedRecord[\"groupList\"].length > 0) {\r\n            if (this.onsavevalidation(selectedRecord)) {\r\n                if (window.innerWidth > 992 && event && this.state.enableAutoClick || !event) {\r\n                    activeTabIndex = this.state.activeTabIndex !== index ? index : id ? index : false;\r\n                }\r\n                if (window.innerWidth > 992 && event && this.state.enableAutoClick || !event) {\r\n                    if (index === 1) {\r\n                        activeTestTab = 'IDS_Test'\r\n                        masterData['selectedParameterRulesEngine'] = this.props.Login.testInitiateTests && this.props.Login.testInitiateTests[0]\r\n                    }\r\n                    if (index === 2) {\r\n                        activeTestTab = 'IDS_COMMENTS'\r\n                        masterData['selectedParameterRulesEngine'] = this.props.Login.testCommentsTests && this.props.Login.testCommentsTests[0]\r\n                    }\r\n                    if (index === 3) {\r\n                        activeTestTab = 'IDS_REPEAT'\r\n                        masterData['selectedParameterRulesEngine'] = this.props.Login.testRepeatTests && this.props.Login.testRepeatTests[0]\r\n                    }\r\n                    if (index === 4) {\r\n                        activeTestTab = 'IDS_ENFORCERESULT'\r\n                        masterData['selectedParameterRulesEngine'] = this.props.Login.testEnforceTests && this.props.Login.testEnforceTests[0]\r\n                    }\r\n                    const updateInfo = {\r\n                        typeName: DEFAULT_RETURN,\r\n                        data: {\r\n                            activeTabIndex: index === 0 ? 0 : this.state.activeTabIndex !== index ? index : id ? index : false,\r\n                            activeTabId: id,\r\n                            activeTestTab,\r\n                            masterData\r\n                        }\r\n                    }\r\n                    this.props.updateStore(updateInfo);\r\n                }\r\n            } else {\r\n                toast.info(this.props.intl.formatMessage({ id: \"IDS_FILLTHERULETOADDOUTCOME\" }));\r\n            }\r\n        }\r\n        else {\r\n            toast.info(this.props.intl.formatMessage({ id: \"IDS_ATLEASTADDONERULETOADDOUTCOME\" }));\r\n        }\r\n    }\r\n\r\n\r\n    deleteRule = (groupIndex, index) => {\r\n        let addGroupList = this.props.Login.addGroupList || [];\r\n        const selectedRecord = this.state.selectedRecord;\r\n        addGroupList[groupIndex] = addGroupList[groupIndex] - 1;\r\n\r\n        if (addGroupList[groupIndex] === 0) {\r\n            addGroupList.splice(groupIndex, 1);\r\n            selectedRecord[\"groupList\"].splice(groupIndex, 1);\r\n            if (selectedRecord[\"groupListJoins\"]) {\r\n                selectedRecord[\"groupListJoins\"].splice(groupIndex - 1, 1);\r\n            }\r\n        } else {\r\n            selectedRecord[\"groupList\"][groupIndex].splice(index, 1);\r\n        }\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { addGroupList, selectedRecord,\r\n                activeTabIndex:0 }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n    deleteOutcome = (index) => {\r\n        let addOutcomeList = this.props.Login.addOutcomeList;\r\n        addOutcomeList.splice(index, 1);\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { addOutcomeList }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n    clearSelectedRule(selectedRecord, index) {\r\n        selectedRecord[\"sinputname_\" + index] && delete selectedRecord[\"sinputname_\" + index];\r\n        selectedRecord[\"ssymbolname_\" + index] && delete selectedRecord[\"ssymbolname_\" + index];\r\n        selectedRecord[\"snumericinput_\" + index] && delete selectedRecord[\"snumericinput_\" + index];\r\n        selectedRecord[\"columnname_\" + index] && delete selectedRecord[\"columnname_\" + index];\r\n        selectedRecord[\"snumericinputtwo_\" + index] && delete selectedRecord[\"snumericinputtwo_\" + index];\r\n        selectedRecord[\"dateinput_\" + index] && delete selectedRecord[\"dateinput_\" + index];\r\n        selectedRecord[\"dateinputtwo_\" + index] && delete selectedRecord[\"dateinputtwo_\" + index];\r\n    }\r\n\r\n    clearRule = () => {\r\n        const sviewname = this.state.selectedRecord.sviewname || \"\";\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { addRuleList: [], selectedRecord: { sviewname }, sqlQuery: false }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    resetRule = () => {\r\n        let masterData = this.props.Login.masterData || {};\r\n        let selectedRecord = this.state.selectedRecord || {}\r\n        masterData['testParameter'] = {}\r\n        masterData['testParameterComments'] = {}\r\n        masterData['testParameterreportComments'] = {}\r\n        masterData['testComments'] = {}\r\n        masterData['reportComments'] = {}\r\n        masterData['testRepeat'] = []\r\n        masterData['testenforceTests'] = []\r\n        masterData['testSite'] = {}\r\n        if (selectedRecord[\"groupList\"]) {\r\n            selectedRecord[\"groupList\"] = []\r\n\r\n        }\r\n        if (selectedRecord[\"groupListJoins\"]) {\r\n            selectedRecord[\"groupListJoins\"] = []\r\n\r\n        }\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                addRuleList: [], addGroupList: [], masterData,\r\n                addAggregateList: [], addOrderbyList: [], testInitiateTests: [], reportCommentsTests: [],\r\n                testCommentsTests: [], siteObject: {}, testCommentObject: {}, reportCommentObject: {}, selectedRecord, testRepeatTests: [],\r\n                testenforceTests: [],\r\n                activeTabIndex:0\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n\r\n    }\r\n\r\n    onSymbolChange = (comboData, fieldName, groupIndex, index) => {\r\n        const { selectedRecord } = this.state;\r\n        const oldSelectedRecord = selectedRecord[\"groupList\"][groupIndex][index][fieldName] || {};\r\n        selectedRecord[\"groupList\"][groupIndex][index][fieldName] = comboData;\r\n        this.setState({ selectedRecord, groupIndex, index });\r\n    }\r\n\r\n    onInputChange = (event, type, groupIndex, index) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        let needoutsource = this.state.needoutsource || {};\r\n        if (event.target.type === 'checkbox') {\r\n            if (event.target.name === 'needoutsource' && event.target.checked === true) {\r\n                needoutsource = true\r\n            }\r\n            else {\r\n                needoutsource = false\r\n                delete selectedRecord['nfromsitecode'];\r\n                delete selectedRecord['ntositecode'];\r\n            }\r\n            selectedRecord[event.target.name] = event.target.checked === true ? 3 : 4;\r\n        }\r\n        else {\r\n            selectedRecord[event.target.name] = event.target.value;\r\n        }\r\n        this.setState({ selectedRecord, needoutsource });\r\n    }\r\n\r\n\r\n\r\n    viewColumnListByRule = (list) => {\r\n        let activeTabIndex = this.props.Login.activeTabIndex\r\n\r\n        if (activeTabIndex !== 0) {\r\n            let selectedRecord = this.props.Login.selectedRecord && this.props.Login.selectedRecord\r\n            let dynamicList = activeTabIndex === 1 ? this.props.Login.testInitiateTests : activeTabIndex === 2 ? this.props.Login.testCommentsTests\r\n                : activeTabIndex === 3 ? this.props.Login.testRepeatTests : activeTabIndex === 4 ? this.props.Login.testenforceTests : \"\"\r\n            if (dynamicList !== undefined && dynamicList)\r\n                list = list.filter(({ value }) => !dynamicList.some(x => x.ntestgrouptestcode == value))\r\n        }\r\n        return list\r\n    }\r\n    onConditionClick = (fieldName, index, isgroup) => {\r\n        let { selectedRecord } = this.state;\r\n        selectedRecord[\"groupListJoins\"] = selectedRecord[\"groupListJoins\"] || []\r\n        if (index !== undefined && isgroup === false) {\r\n            if (fieldName === `button_and`) {\r\n                selectedRecord[\"groupList\"][index][fieldName] = selectedRecord[\"groupList\"][index][fieldName] === true ? true : true;\r\n                selectedRecord[\"groupList\"][index][`button_or`] = false;\r\n            } else if (fieldName === `button_or`) {\r\n                selectedRecord[\"groupList\"][index][fieldName] = selectedRecord[\"groupList\"][index][fieldName] === true ? true : true;\r\n                selectedRecord[\"groupList\"][index][`button_and`] = false;\r\n            } else if (fieldName === `button_not`) {\r\n                selectedRecord[\"groupList\"][index][fieldName] = selectedRecord[\"groupList\"][index][fieldName] === true ? false : true;\r\n            }\r\n            else {\r\n\r\n            }\r\n            this.setState({ selectedRecord });\r\n        }\r\n        else {\r\n            if (fieldName === `button_and`) {\r\n                if (selectedRecord[\"groupListJoins\"][index] === undefined) {\r\n                    selectedRecord[\"groupListJoins\"][index] = {}\r\n                }\r\n                selectedRecord[\"groupListJoins\"][index][fieldName] = selectedRecord[\"groupListJoins\"][index][fieldName] === true ? true : true;\r\n                selectedRecord[\"groupListJoins\"][index][`button_or`] = false;\r\n            }\r\n            if (fieldName === `button_or`) {\r\n                if (selectedRecord[\"groupListJoins\"][index] === undefined) {\r\n                    selectedRecord[\"groupListJoins\"][index] = {}\r\n                }\r\n                selectedRecord[\"groupListJoins\"][index][fieldName] = selectedRecord[\"groupListJoins\"][index][fieldName] === true ? true : true;\r\n                selectedRecord[\"groupListJoins\"][index][`button_and`] = false;\r\n            }\r\n            if (fieldName === `button_not`) {\r\n                if (selectedRecord[\"groupListJoins\"][index] === undefined) {\r\n                    selectedRecord[\"groupListJoins\"][index] = {}\r\n                }\r\n                selectedRecord[\"groupListJoins\"][index][fieldName] = selectedRecord[\"groupListJoins\"][index][fieldName] === true ? false : true;\r\n            }\r\n            this.setState({ selectedRecord });\r\n        }\r\n\r\n    }\r\n\r\n\r\n    //Rules Engine Functions End\r\n    changePropertyViewClose = (id) => {\r\n\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                activeTabIndex: undefined,\r\n                activeTestTab: undefined,\r\n                activeTabId: id\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n    onFilterComboChange = (comboData, fieldName, caseNo) => {\r\n        let tempFilterData = this.state.tempFilterData || {};\r\n        let inputParam = {};\r\n        switch (caseNo) {\r\n            case 1:\r\n                tempFilterData[fieldName] = comboData;\r\n                inputParam = {\r\n                    inputData: {\r\n                        userinfo: this.props.Login.userInfo,\r\n                        sampletype: comboData.item,\r\n                        tempFilterData\r\n                    },\r\n                    methodUrl: \"/getProductCategory\"\r\n                }\r\n                this.props.sampleTypeOnChange(inputParam, this.props.Login.masterData);\r\n                break;\r\n\r\n            case 2:\r\n                tempFilterData[fieldName] = comboData;\r\n                inputParam = {\r\n                    inputData: {\r\n                        userinfo: this.props.Login.userInfo,\r\n                        sampletype: tempFilterData.nsampletypecode.item,\r\n                        productcategory: comboData.item,\r\n                        tempFilterData\r\n                    },\r\n                    methodUrl: \"/getProduct\"\r\n                }\r\n                this.props.sampleTypeOnChange(inputParam, this.props.Login.masterData);\r\n                break;\r\n\r\n            case 3:\r\n                tempFilterData[fieldName] = comboData;\r\n                inputParam = {\r\n                    inputData: {\r\n                        userinfo: this.props.Login.userInfo,\r\n                        sampletype: tempFilterData.nsampletypecode.item,\r\n                        productcategory: tempFilterData.nproductcatcode.item,\r\n                        product: comboData.item,\r\n                        project:comboData.item,\r\n                        tempFilterData\r\n                    },\r\n                    methodUrl: \"/getTreeVersionTemplate\"\r\n                }\r\n                this.props.sampleTypeOnChange(inputParam, this.props.Login.masterData);\r\n                break;\r\n\r\n            case 4:\r\n                tempFilterData[fieldName] = comboData;\r\n                this.setState({ tempFilterData });\r\n                break;\r\n\r\n            case 5:\r\n                const selectedRecord = this.state.selectedRecord;\r\n                selectedRecord[fieldName] = comboData;\r\n                const TestGroupSpecSampleType = this.props.Login.testGroupInputData.TestGroupSpecSampleType || {};\r\n                let testGroupSpecSampleType = {};\r\n                if (this.props.Login.screenName ===this.props.Login.genericLabel && this.props.Login.genericLabel[\"Component\"][\"jsondata\"][\"sdisplayname\"][this.props.Login.userInfo.slanguagetypecode]) {\r\n                    testGroupSpecSampleType = selectedRecord[\"ncomponentcode\"] ? selectedRecord[\"ncomponentcode\"].item : TestGroupSpecSampleType[0].item;\r\n                } else {\r\n                    testGroupSpecSampleType = this.props.Login.masterData.SelectedComponent;\r\n                }\r\n                inputParam = {\r\n                    userinfo: this.props.Login.userInfo,\r\n                    testcategory: comboData.item,\r\n                    testgroupspecsampletype: testGroupSpecSampleType,\r\n                    nallottedspeccode: this.props.Login.masterData.SelectedSpecification[\"nallottedspeccode\"],\r\n                    selectedRecord\r\n                }\r\n                this.props.changeTestCategory(inputParam, this.props.Login.testGroupInputData);\r\n                break;\r\n            case 6:\r\n                tempFilterData[fieldName] = comboData;\r\n                inputParam = {\r\n                    inputData: {\r\n                        userinfo: this.props.Login.userInfo,\r\n                        nprojecttypecode:tempFilterData.nprojecttypecode.value,\r\n                        projecttype:tempFilterData.nprojecttypecode.item,\r\n                       // sampletype: tempFilterData.nsampletypecode.item,\r\n                       // productcategory: comboData.item,\r\n                        tempFilterData\r\n                    },\r\n                    classUrl:\"/projectmaster\",\r\n                    methodUrl: \"/getApprovedProjectByProjectType\"\r\n                }\r\n                this.props.sampleTypeOnChange(inputParam, this.props.Login.masterData);\r\n                break;\r\n           \r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    handleDateChange = (dateName, dateValue) => {\r\n        const { selectedRecord } = this.state;\r\n        if (dateValue === null) {\r\n            dateValue = new Date();\r\n        }\r\n        selectedRecord[dateName] = dateValue;\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    onNumericInputChange = (value, name) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        selectedRecord[name] = value;\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    onSaveClick = (saveType, formRef) => {\r\n        let inputParam = {};\r\n        if (this.props.Login.screenName === \"IDS_PROFILETREE\"\r\n            || this.props.Login.screenName === \"IDS_EDITTREE\") {\r\n            inputParam = this.onSaveTree(saveType, formRef);\r\n        } else if (this.props.Login.screenName === \"IDS_SPECIFICATION\") {\r\n            inputParam = this.onSaveSpecification(saveType, formRef);\r\n        } else if (this.props.Login.screenName ===this.props.Login.genericLabel[\"Component\"][\"jsondata\"][\"sdisplayname\"][this.props.Login.userInfo.slanguagetypecode]) {\r\n            inputParam = this.onSaveComponent(saveType, formRef);\r\n        } else if (this.props.Login.screenName === \"IDS_COPYSPECIFICATION\") {\r\n            inputParam = this.onSaveCopySpecification(saveType, formRef);\r\n        } else if (this.props.Login.screenName === \"IDS_TEST\"\r\n            || this.props.Login.screenName === \"IDS_EDITTESTGROUPTEST\") {\r\n            inputParam = this.onSaveTest(saveType, formRef);\r\n        } else if (this.props.Login.screenName === \"IDS_SPECFILE\") {\r\n            inputParam = this.onSaveSpecFile(saveType, formRef);\r\n        }\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, openModal: true, operation: this.props.Login.operation,\r\n                    screenData: { inputParam, masterData: this.props.Login.masterData },\r\n                    saveType\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        } else {\r\n            this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\", {});\r\n        }\r\n    }\r\n\r\n    onSaveTest = (saveType, formRef) => {\r\n        const operation = this.props.Login.operation;\r\n        const masterData = this.props.Login.masterData;\r\n        const selectedRecord = this.state.selectedRecord;\r\n        let inputData = {};\r\n        const userinfo = this.props.Login.userInfo;\r\n        let postParam = undefined;\r\n        if (operation === \"create\") {\r\n            const testArray = selectedRecord.ntestcode.map(test => { return test.item });\r\n            inputData = {\r\n                testgroupspecification: masterData.SelectedSpecification,\r\n                testgroupspecsampletype: [masterData.SelectedComponent],\r\n                testgrouptest: testArray, userinfo\r\n            }\r\n        } else {\r\n            postParam = {\r\n                inputListName: \"TestGroupTest\", selectedObject: \"SelectedTest\", primaryKeyField: \"ntestgrouptestcode\",\r\n                primaryKeyValue: masterData.SelectedTest ? masterData.SelectedTest.ntestgrouptestcode : 0,\r\n                fetchUrl: \"testgroup/getTestGroupTest\", fecthInputObject: { userinfo: this.props.Login.userInfo },\r\n                masterData: this.props.Login.masterData, searchFieldList, changeList: [\"TestGroupTestFormula\", \"TestGroupTestNumericParameter\",\r\n                    \"TestGroupTestPredefinedParameter\", \"TestGroupTestCharParameter\", \"TestGroupTestParameter\"], isSingleSelect: true\r\n            }\r\n            let testgrouptestfile = null;\r\n            let testGroupFile = selectedRecord.ntestfilecode;\r\n            if (testGroupFile) {\r\n                testGroupFile = testGroupFile.item;\r\n                testgrouptestfile = {\r\n                    nlinkcode: testGroupFile.nlinkcode,\r\n                    nattachmenttypecode: testGroupFile.nattachmenttypecode,\r\n                    sdescription: testGroupFile.sdescription,\r\n                    ssystemfilename: testGroupFile.ssystemfilename,\r\n                    dcreateddate: testGroupFile.dcreateddate,\r\n                    nfilesize: testGroupFile.nfilesize,\r\n                    ntestgroupfilecode: selectedRecord.ntestgroupfilecode,\r\n                    ntestgrouptestcode: selectedRecord.ntestgrouptestcode,\r\n                    sfilename: testGroupFile.sfilename,\r\n                    nstatus: transactionStatus.ACTIVE\r\n                };\r\n            }\r\n            inputData = {\r\n                testgroupspecification: masterData.SelectedSpecification,\r\n                testgrouptest: {\r\n                    ntestgrouptestcode: selectedRecord.ntestgrouptestcode,\r\n                    nsectioncode: selectedRecord.nsectioncode.value,\r\n                    //nsourcecode: selectedRecord.nsourcecode.value,\r\n                    nmethodcode: selectedRecord.nmethodcode ? selectedRecord.nmethodcode.value : transactionStatus.NA,\r\n                    ninstrumentcatcode: selectedRecord.ninstrumentcatcode ? selectedRecord.ninstrumentcatcode.value : transactionStatus.NA,\r\n                    ncontainertypecode: selectedRecord.ncontainertypecode ? selectedRecord.ncontainertypecode.value : transactionStatus.NA,\r\n                    stestsynonym: selectedRecord.stestsynonym,\r\n                    ncost: selectedRecord.ncost,\r\n                    nsorter: selectedRecord.nsorter,\r\n                    nspecsampletypecode: selectedRecord.nspecsampletypecode,\r\n                    nrepeatcountno: selectedRecord.nrepeatcountno\r\n\r\n                },\r\n                testgrouptestfile, userinfo\r\n            }\r\n        }\r\n        const inputParam = {\r\n            inputData,\r\n            classUrl: \"testgroup\",\r\n            operation: operation,\r\n            methodUrl: \"Test\",\r\n            saveType, formRef, searchRef: this.searchRef,\r\n            postParam\r\n        }\r\n        return inputParam;\r\n    }\r\n\r\n    onSaveTree = (saveType, formRef) => {\r\n        const operation = this.props.Login.operation;\r\n        const selectedRecord = this.state.selectedRecord;\r\n        let inputData = {\r\n            userinfo: this.props.Login.userInfo\r\n        };\r\n        if (operation === \"update\") {\r\n            const selectedNode = this.props.Login.masterData.selectedNode;\r\n            inputData[\"treetemplatemanipulation\"] = {\r\n                ntemplatemanipulationcode: selectedRecord.ntemplatemanipulationcode,\r\n                sleveldescription: selectedRecord.sleveldescription,\r\n                nsampletypecode: selectedNode.nsampletypecode,\r\n                ntreeversiontempcode: selectedNode.ntreeversiontempcode,\r\n                nproductcatcode: selectedNode.nproductcatcode,\r\n                nproductcode: selectedNode.nproductcode,\r\n                nprojectmastercode: selectedNode.nprojectmastercode,\r\n            }\r\n            inputData[\"selectednode\"] = this.props.Login.masterData.ActiveKey;\r\n        } else {\r\n            const TreetempTranstestGroup = this.props.Login.TreetempTranstestGroup;\r\n            const filterData = this.state.filterData;\r\n            const selectedRecord = this.state.selectedRecord;\r\n            let treetemplatemanipulation = [];\r\n            let tempArray = filterRecordBasedOnTwoArrays(TreetempTranstestGroup, selectedRecord.treetemplatemanipulation, \"ntemptranstestgroupcode\");\r\n\r\n            tempArray.map(item => {\r\n                const treeData = {\r\n                    ntreeversiontempcode: item.ntreeversiontempcode,\r\n                    npositioncode: item.nlevelno - 1,\r\n                    sleveldescription: item.sleveldescription,\r\n                    ntemptranstestgroupcode: item.ntemptranstestgroupcode,\r\n                    nformcode: 62,\r\n                    schildnode: \"\",\r\n                    nnextchildcode: item.schildnode,\r\n                    ntemplatemanipulationcode: item.ntemplatemanipulationcode,\r\n                    isreadonly: item.ntemplatemanipulationcode > 0 ? true : false,\r\n                    slevelformat: item.slevelformat\r\n                }\r\n                return treetemplatemanipulation.push(treeData);\r\n            });\r\n\r\n\r\n            selectedRecord.treetemplatemanipulation.map(item => {\r\n                const treeTemplateManip = TreetempTranstestGroup.filter(temp => temp.ntemptranstestgroupcode === item.ntemptranstestgroupcode);\r\n                if (treeTemplateManip.length > 0) {\r\n                    item[\"ntemplatemanipulationcode\"] = treeTemplateManip[\"ntemplatemanipulationcode\"];\r\n                } else {\r\n                    item[\"ntemplatemanipulationcode\"] = 0;\r\n                }\r\n                return treetemplatemanipulation.push(item);\r\n            });\r\n\r\n            inputData[\"treetemplatemanipulation\"] = treetemplatemanipulation;\r\n            inputData[\"sampletype\"] = filterData.nsampletypecode.item;\r\n            inputData[\"ncategorycode\"] = filterData.nproductcatcode.value;\r\n            inputData[\"nproductcode\"] = filterData.nsampletypecode.item.ncategorybasedflowrequired === transactionStatus.YES ? -1 : filterData.nproductcatcode.item.ncategorybasedflow == transactionStatus.YES ? -1 :\r\n                filterData.nproductcode.value ? filterData.nproductcode.value : -1;\r\n            inputData[\"ntreeversiontempcode\"] = filterData.ntreeversiontempcode.value;\r\n          //  inputData[\"nprojectmastercode\"] = filterData.nprojectmastercode ? filterData.nprojectmastercode.value:-1;\r\n            inputData[\"nprojectmastercode\"] = filterData.nprojectmastercode ? filterData.nsampletypecode.item.nprojectspecrequired === transactionStatus.YES ? filterData.nprojectmastercode.value :-1:-1;\r\n        }\r\n        const inputParam = {\r\n            inputData,\r\n            classUrl: \"testgroup\",\r\n            operation: operation,\r\n            methodUrl: \"Tree\",\r\n            saveType, formRef\r\n        }\r\n        return inputParam;\r\n    }\r\n\r\n    onSaveSpecification = (saveType, formRef) => {\r\n        const operation = this.props.Login.operation;\r\n        const selectedRecord = this.state.selectedRecord;\r\n\r\n        let testGroupSpec = {\r\n            napproveconfversioncode: -1,\r\n            sversion: '',\r\n            napprovalstatus: transactionStatus.DRAFT,\r\n            nstatus: transactionStatus.ACTIVE,\r\n            ntransactionstatus: selectedRecord[\"ntransactionstatus\"],\r\n            ncomponentrequired: selectedRecord[\"ncomponentrequired\"],\r\n            //   nclinicalspec: selectedRecord[\"nclinicalspec\"],\r\n           // nprojectcode: selectedRecord[\"nprojectcode\"] ? selectedRecord[\"nprojectcode\"] : -1,\r\n            nprojectmastercode: this.state.filterData.nprojectmastercode ? this.state.filterData.nsampletypecode.item.nprojectspecrequired === transactionStatus.YES ? this.state.filterData.nprojectmastercode.value :-1 : -1,\r\n            sspecname: selectedRecord[\"sspecname\"],\r\n            dexpirydate: selectedRecord[\"dexpirydate\"],\r\n            nallottedspeccode: selectedRecord[\"nallottedspeccode\"] ? selectedRecord[\"nallottedspeccode\"] : 0,\r\n            ntzexpirydate: selectedRecord[\"ntzexpirydate\"].value,\r\n            stzexpirydate: selectedRecord[\"ntzexpirydate\"].label\r\n        };\r\n\r\n        const dexpirydate = testGroupSpec[\"dexpirydate\"];\r\n        //need this conversion when the datatype of the field is 'Instant'\r\n        testGroupSpec[\"dexpirydate\"] = formatInputDate(dexpirydate, false);\r\n\r\n        if (operation === \"create\") {\r\n            testGroupSpec[\"ntemplatemanipulationcode\"] = this.props.Login.masterData.selectedNode.ntemplatemanipulationcode\r\n        }\r\n        let ntreeversiontempcode = this.state.filterData.ntreeversiontempcode.value;\r\n\r\n        const inputData = {\r\n            userinfo: this.props.Login.userInfo,\r\n            testgroupspecification: testGroupSpec,\r\n            treetemplatemanipulation: this.props.Login.masterData.selectedNode,\r\n            selectedspecification: this.props.Login.masterData.SelectedSpecification,\r\n            ntreeversiontempcode: ntreeversiontempcode\r\n        }\r\n\r\n        const inputParam = {\r\n            inputData,\r\n            classUrl: \"testgroup\",\r\n            operation: operation,\r\n            methodUrl: \"Specification\",\r\n            saveType, formRef\r\n        }\r\n        return inputParam;\r\n    }\r\n\r\n    onSaveComponent = (saveType, formRef) => {\r\n        const masterData = this.props.Login.masterData;\r\n        const selectedRecord = this.state.selectedRecord;\r\n        const testArray = selectedRecord.ntestcode.map(test => { return test.item });\r\n        const inputData = {\r\n            testgroupspecification: masterData.SelectedSpecification,\r\n            testgroupspecsampletype: [selectedRecord.ncomponentcode.item],\r\n            testgrouptest: testArray,\r\n            userinfo: this.props.Login.userInfo,\r\n            genericlabel:this.props.Login.genericLabel\r\n        }\r\n        const inputParam = {\r\n            inputData,\r\n            classUrl: \"testgroup\",\r\n            operation: this.props.Login.operation,\r\n            methodUrl: \"Component\",\r\n            saveType, formRef\r\n        }\r\n        return inputParam;\r\n    }\r\n\r\n    onSaveSpecFile = (saveType, formRef) => {\r\n        const selectedRecord = this.state.selectedRecord;\r\n        const acceptedFiles = selectedRecord.sfilename;\r\n        const nattachmenttypecode = selectedRecord.nattachmenttypecode;\r\n        let isFileEdited = transactionStatus.NO;\r\n        let specFileArray = [];\r\n        const selectedSpecification = this.props.Login.masterData.SelectedSpecification;\r\n        let specFile = {\r\n            nallottedspeccode: selectedSpecification.nallottedspeccode,\r\n            nspecfilecode: selectedRecord.nspecfilecode ? selectedRecord.nspecfilecode : 0,\r\n            nstatus: transactionStatus.ACTIVE,\r\n            nattachmenttypecode\r\n        };\r\n        const formData = new FormData();\r\n        if (nattachmenttypecode === attachmentType.FTP) {\r\n            if (acceptedFiles && Array.isArray(acceptedFiles) && acceptedFiles.length > 0) {\r\n                acceptedFiles.forEach((file, index) => {\r\n                    const tempData = Object.assign({}, specFile);\r\n                    const splittedFileName = file.name.split('.');\r\n                    const fileExtension = file.name.split('.')[splittedFileName.length - 1];\r\n                    const uniquefilename = nattachmenttypecode === attachmentType.FTP ? create_UUID() + '.' + fileExtension : \"\";\r\n                    tempData[\"sfilename\"] =Lims_JSON_stringify(file.name,false)  ;\r\n                    tempData[\"sdescription\"] =Lims_JSON_stringify( selectedRecord.sdescription ? selectedRecord.sdescription.trim() : \"\",false);\r\n                    tempData[\"nlinkcode\"] = transactionStatus.NA;\r\n                    tempData[\"ssystemfilename\"] = uniquefilename;\r\n                    tempData[\"nfilesize\"] = file.size;\r\n                    formData.append(\"uploadedFile\" + index, file);\r\n                    formData.append(\"uniquefilename\" + index, uniquefilename);\r\n                    specFileArray.push(tempData);\r\n                });\r\n                formData.append(\"filecount\", acceptedFiles.length);\r\n                isFileEdited = transactionStatus.YES;\r\n            } else {\r\n                specFile[\"sfilename\"] =Lims_JSON_stringify(selectedRecord.sfilename,false)  ;\r\n                specFile[\"sdescription\"] =Lims_JSON_stringify(selectedRecord.sdescription ? selectedRecord.sdescription.trim() : \"\",false) ;\r\n                specFile[\"nlinkcode\"] = transactionStatus.NA;\r\n                specFile[\"ssystemfilename\"] = selectedRecord.ssystemfilename;\r\n                specFile[\"nfilesize\"] = selectedRecord.nfilesize;\r\n                specFileArray.push(specFile);\r\n            }\r\n        } else {\r\n            specFile[\"sfilename\"] =Lims_JSON_stringify( selectedRecord.slinkfilename.trim(),false) ;\r\n            specFile[\"sdescription\"] =Lims_JSON_stringify( selectedRecord.slinkdescription ? selectedRecord.slinkdescription.trim() : \"\",false);\r\n            specFile[\"nlinkcode\"] = selectedRecord.nlinkcode.value ? selectedRecord.nlinkcode.value : -1;\r\n            specFile[\"ssystemfilename\"] = \"\";\r\n            specFile[\"nfilesize\"] = 0;\r\n            specFileArray.push(specFile);\r\n        }\r\n        formData.append(\"isFileEdited\", isFileEdited);\r\n        formData.append(\"testgroupspecification\", JSON.stringify(selectedSpecification));\r\n        formData.append(\"testgroupspecfile\", JSON.stringify(specFileArray));\r\n        const inputParam = {\r\n           // inputData: { userinfo: this.props.Login.userInfo },\r\n            inputData: {\r\n                \"userinfo\": {\r\n                    ...this.props.Login.userInfo,\r\n                    sformname: Lims_JSON_stringify(this.props.Login.userInfo.sformname),\r\n                    smodulename: Lims_JSON_stringify(this.props.Login.userInfo.smodulename)\r\n                }\r\n            },\r\n            formData: formData,\r\n            isFileupload: true,\r\n            operation: this.props.Login.operation,\r\n            classUrl: \"testgroup\",\r\n            saveType, formRef, methodUrl: \"SpecificationFile\"\r\n        }\r\n        return inputParam;\r\n    }\r\n\r\n    deleteSpecRecord = (deleteParam) => {\r\n        const selectedRecord = deleteParam.selectedRecord;\r\n\r\n        const masterData = this.props.Login.masterData;\r\n        const ntreeversiontempcode = masterData[\"TreeTemplateManipulation\"][0].ntreeversiontempcode;\r\n        const treeVersionTemplateIndex = masterData[\"TreeVersionTemplate\"].findIndex(\r\n            x => x[\"ntreeversiontempcode\"] === ntreeversiontempcode);\r\n\r\n        const templateVersionStatus = masterData[\"TreeVersionTemplate\"][treeVersionTemplateIndex].ntransactionstatus\r\n        if (templateVersionStatus === transactionStatus.RETIRED) {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTEDTEMPLATEISRETIRED\" }));\r\n        }\r\n        else {\r\n            if (selectedRecord.napprovalstatus === transactionStatus.DRAFT\r\n                || selectedRecord.napprovalstatus === transactionStatus.CORRECTION) {\r\n                this.deleteRecord(deleteParam);\r\n            } else {\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_SPECIFICATIONSTATUSMUSTBEDRAFTCORRECTION\" }));\r\n            }\r\n        }\r\n    }\r\n\r\n    deleteRecord = (deleteParam) => {\r\n        if (this.props.Login.masterData.selectedNode !== undefined && this.props.Login.masterData.selectedNode !== null) {\r\n            const masterData = this.props.Login.masterData;\r\n            const treeVersionTemplateIndex = masterData[\"TreeVersionTemplate\"].findIndex(\r\n                x => x[\"ntreeversiontempcode\"] === masterData.selectedNode[\"ntreeversiontempcode\"]);\r\n\r\n            const templateVersionStatus = masterData[\"TreeVersionTemplate\"][treeVersionTemplateIndex].ntransactionstatus\r\n            if (templateVersionStatus === transactionStatus.RETIRED) {\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTEDTEMPLATEISRETIRED\" }));\r\n            }\r\n            else {\r\n                if (this.props.Login.masterData.selectedNode) {\r\n                    const methodUrl = deleteParam.methodUrl;\r\n                    let dataState = this.state.componentDataState;\r\n                    const screenName = deleteParam.screenName;\r\n                    const inputParam = {\r\n                        inputData: {\r\n                            [deleteParam.keyName]: deleteParam.selectedRecord,\r\n                            userinfo: this.props.Login.userInfo,\r\n                            genericlabel: this.props.Login.genericLabel,\r\n                            testgroupspecification: this.props.Login.masterData.SelectedSpecification,\r\n                            treetemplatemanipulation: this.props.Login.masterData.selectedNode,\r\n                            ntreeversiontempcode: deleteParam.filterData.ntreeversiontempcode.value\r\n                        },\r\n                        classUrl: \"testgroup\",\r\n                        operation: deleteParam.operation,\r\n                        methodUrl: methodUrl,\r\n                        screenName, dataState\r\n                    }\r\n                    const masterData = this.props.Login.masterData;\r\n                    //if (showEsign(this.state.controlMap, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\r\n                    if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, deleteParam.ncontrolCode)) {\r\n                        const updateInfo = {\r\n                            typeName: DEFAULT_RETURN,\r\n                            data: {\r\n                                loadEsign: true, screenData: { inputParam, masterData },\r\n                                openModal: true, screenName: screenName, operation: deleteParam.operation, selectedRecord: {}\r\n                            }\r\n                        }\r\n                        this.props.updateStore(updateInfo);\r\n                    } else {\r\n                        this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\", {});\r\n                    }\r\n                } else {\r\n                    toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTPROFILENODE\" }));\r\n                }\r\n            }\r\n        } else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTPROFILENODE\" }));\r\n        }\r\n    }\r\n\r\n    deleteMultipleRecord = (deleteParam) => {\r\n        //console.log(\"delete component:\", deleteParam, this.props.Login.masterData);\r\n        const masterData = this.props.Login.masterData;\r\n        const treeVersionTemplateIndex = masterData[\"TreeVersionTemplate\"].findIndex(\r\n            x => x[\"ntreeversiontempcode\"] === masterData.selectedNode[\"ntreeversiontempcode\"]);\r\n\r\n        const templateVersionStatus = masterData[\"TreeVersionTemplate\"][treeVersionTemplateIndex].ntransactionstatus\r\n        if (templateVersionStatus === transactionStatus.RETIRED) {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTEDTEMPLATEISRETIRED\" }));\r\n        }\r\n        else {\r\n            const testgroupspecification = this.props.Login.masterData.SelectedSpecification;\r\n            if (testgroupspecification.napprovalstatus === transactionStatus.DRAFT\r\n                || testgroupspecification.napprovalstatus === transactionStatus.CORRECTION) {\r\n                const inputParam = {\r\n                    inputData: {\r\n                        testgroupspecsampletype: deleteParam.props.testgroupspecsampletype,\r\n                        userinfo: this.props.Login.userInfo,\r\n                        genericlabel:this.props.Login.genericLabel,\r\n                        testgroupspecification,\r\n                        treetemplatemanipulation: this.props.Login.masterData.selectedNode\r\n                    },\r\n                    classUrl: \"testgroup\",\r\n                    operation: \"delete\",\r\n                    methodUrl: \"TestGroupComponent\",\r\n                    screenName:this.props.Login.genericLabel && this.props.Login.genericLabel[\"Component\"][\"jsondata\"][\"sdisplayname\"][this.props.Login.userInfo.slanguagetypecode] \r\n                }\r\n                const masterData = this.props.Login.masterData;\r\n                if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, deleteParam.ncontrolCode)) {\r\n                    const updateInfo = {\r\n                        typeName: DEFAULT_RETURN,\r\n                        data: {\r\n                            loadEsign: true, screenData: { inputParam, masterData },\r\n                            openModal: true, screenName:this.props.Login.genericLabel && this.props.Login.genericLabel[\"Component\"][\"jsondata\"][\"sdisplayname\"][this.props.Login.userInfo.slanguagetypecode] , operation: \"delete\", selectedRecord: {}\r\n                        }\r\n                    }\r\n                    this.props.updateStore(updateInfo);\r\n                } else {\r\n                    this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\", {});\r\n                }\r\n            } else {\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_SPECIFICATIONSTATUSMUSTBEDRAFTCORRECTION\" }));\r\n            }\r\n        }\r\n    }\r\n\r\n    onDropSpecFile = (attachedFiles, fieldName, maxSize) => {\r\n        let selectedRecord = this.state.selectedRecord || {};\r\n        selectedRecord[fieldName] = onDropAttachFileList(selectedRecord[fieldName], attachedFiles, maxSize)\r\n        this.setState({ selectedRecord, actionType: \"new\" });\r\n    }\r\n\r\n    deleteAttachment = (event, file, fieldName) => {\r\n        let selectedRecord = this.state.selectedRecord || {};\r\n        selectedRecord[fieldName] = deleteAttachmentDropZone(selectedRecord[fieldName], file)\r\n\r\n        this.setState({\r\n            selectedRecord, actionType: \"delete\" //fileToDelete:file.name \r\n        });\r\n    }\r\n\r\n    validateTestGroupComplete = (operation, inputValue, ncontrolCode) => {\r\n        if (this.props.Login.masterData.selectedNode !== undefined && this.props.Login.masterData.selectedNode !== null) {\r\n            const masterData = this.props.Login.masterData;\r\n            const treeVersionTemplateIndex = masterData[\"TreeVersionTemplate\"].findIndex(\r\n                x => x[\"ntreeversiontempcode\"] === masterData.selectedNode[\"ntreeversiontempcode\"]);\r\n\r\n            const templateVersionStatus = masterData[\"TreeVersionTemplate\"][treeVersionTemplateIndex].ntransactionstatus\r\n            if (templateVersionStatus === transactionStatus.RETIRED) {\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTEDTEMPLATEISRETIRED\" }));\r\n            }\r\n            else {\r\n                if (inputValue.testgroupspecification) {\r\n                    if (inputValue.testgroupspecification.napprovalstatus === transactionStatus.DRAFT\r\n                        || inputValue.testgroupspecification.napprovalstatus === transactionStatus.CORRECTION) {\r\n                        return rsapi.post(\"testgroup/validateTestGroupComplete\", {\r\n                            nallottedspeccode: inputValue.testgroupspecification.nallottedspeccode,\r\n                            \"userinfo\": this.props.Login.userInfo\r\n                        })\r\n                            .then(response => {\r\n                                if (response.data && response.data.length > 0) {\r\n                                    const inactiveTestArray = [];\r\n                                    response.data.map(item => inactiveTestArray.indexOf(item.stestname) === -1 ? inactiveTestArray.push(item.stestname) : \"\");\r\n                                    const data = \" [\" + inactiveTestArray + \"] \" + this.props.intl.formatMessage({ id: \"IDS_INACTIVETESTSATCOMPLETE\" })\r\n                                    this.confirmMessage.confirm(this.props.intl.formatMessage({ id: \"IDS_CONFIRMATION\" }),\r\n                                        this.props.intl.formatMessage({ id: \"IDS_CONFIRMATION\" }),\r\n                                        data,\r\n                                        this.props.intl.formatMessage({ id: \"IDS_OK\" }),\r\n                                        this.props.intl.formatMessage({ id: \"IDS_CANCEL\" }),\r\n                                        () => this.completeSpecification(operation, inputValue, ncontrolCode),\r\n                                        false,\r\n                                        undefined);\r\n                                }\r\n                                else {\r\n                                    this.completeSpecification(operation, inputValue, ncontrolCode);\r\n                                }\r\n\r\n                            })\r\n                            .catch(error => {\r\n                                if (error.response.status === 500) {\r\n                                    toast.error(this.props.intl.formatMessage({ id: error.message }));\r\n                                }\r\n                                else {\r\n                                    toast.warn(this.props.intl.formatMessage({ id: error.response }));\r\n                                }\r\n                            })\r\n                    }\r\n                    else {\r\n                        toast.warn(this.props.intl.formatMessage({ id: \"IDS_SPECIFICATIONSTATUSMUSTBEDRAFTCORRECTION\" }));\r\n                    }\r\n                }\r\n                else {\r\n                    toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTSPECIFICATION\" }));\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTSPECIFICATION\" }));\r\n        }\r\n    }\r\n\r\n    retireSpec = (operation, selectedSpecification, approvalRoleActionDetail, retireSpecId) => {\r\n        if (selectedSpecification.testgroupspecification.napprovalstatus !== transactionStatus.RETIRED) {\r\n            if (approvalRoleActionDetail.length > 0 && approvalRoleActionDetail[0].nlevelno === transactionStatus.ACTIVE) {\r\n                if (selectedSpecification.testgroupspecification[\"napprovalstatus\"] === approvalRoleActionDetail[0].ntransactionstatus) {\r\n                    const inputParam = {\r\n                        inputData: {\r\n                            nallottedspeccode: selectedSpecification.testgroupspecification,\r\n                            treetemplatemanipulation: selectedSpecification.treetemplatemanipulation,\r\n                            approvalRoleActionDetail: approvalRoleActionDetail[0],\r\n                            userinfo: this.props.Login.userInfo,\r\n                            operation: operation\r\n                        },\r\n                        classUrl: \"testgroup\",\r\n                        operation: operation,\r\n                        methodUrl: \"Spec\",\r\n                        screenName: \"IDS_STUDYPLAN\"\r\n                    }\r\n\r\n\r\n                    let masterData = this.props.Login.masterData\r\n                    if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, retireSpecId)) {\r\n                        const updateInfo = {\r\n                            typeName: DEFAULT_RETURN,\r\n                            data: {\r\n                                loadEsign: true, screenData: { inputParam, masterData },\r\n                                openModal: true, screenName: \"IDS_STUDYPLAN\", operation: operation, selectedRecord: {}\r\n                            }\r\n                        }\r\n                        this.props.updateStore(updateInfo);\r\n                    } else {\r\n                        this.props.retireSpecification(inputParam.inputData, masterData);\r\n                    }\r\n                } else {\r\n                    toast.warn(this.props.intl.formatMessage({ id: \"IDS_RETIRECANBECONEAFTERFINAL\" }));\r\n                }\r\n            } else {\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_FINALLEVELAPPROVE\" }));\r\n            }\r\n        } else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_ALREADYRETIRED\" }));\r\n        }\r\n\r\n    }\r\n\r\n    specificationReport = (operation, ncontrolCode) => {\r\n        if (this.props.Login.masterData.SelectedComponent && this.props.Login.masterData.SelectedTest) {\r\n            const inputParam = {\r\n                inputData: {\r\n                    sprimarykeyname: 'nallottedspeccode',\r\n                    userinfo: this.props.Login.userInfo,\r\n                    ncontrolcode: ncontrolCode,\r\n                    nregtypecode: transactionStatus.NA,\r\n                    nregsubtypecode: transactionStatus.NA,\r\n                    nreportmodulecode: transactionStatus.NA,\r\n                    nreporttypecode: REPORTTYPE.CONTROLBASED,\r\n                    nreportdecisiontypecode: transactionStatus.NA,\r\n                    certificatetypecode: transactionStatus.NA,\r\n                    nsectioncode: transactionStatus.NA,\r\n                    operation: operation,\r\n                    nallottedspeccode: this.props.Login.masterData['SelectedSpecification']['nallottedspeccode'],\r\n                    selectedComponent: this.props.Login.masterData[\"SelectedComponent\"],\r\n                    selectedTest: this.props.Login.masterData[\"SelectedTest\"],\r\n                    filterData: this.state.filterData\r\n\r\n                },\r\n            }\r\n            this.props.reportSpecification(inputParam['inputData']);\r\n        } else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_REPORTCANNOTGENERATEFORCOMPWITHOUTTEST\" }));\r\n        }\r\n    }\r\n\r\n    completeSpecification = (operation, inputValue, ncontrolCode) => {\r\n        if (inputValue.testgroupspecification) {\r\n            if (inputValue.testgroupspecification.napprovalstatus === transactionStatus.DRAFT\r\n                || inputValue.testgroupspecification.napprovalstatus === transactionStatus.CORRECTION) {\r\n\r\n                const inputParam = {\r\n                    inputData: {\r\n                        userinfo: this.props.Login.userInfo,\r\n                        ntreeversiontempcode: this.state.filterData.ntreeversiontempcode.value,\r\n                        testGroupTest: this.props.Login.masterData.TestGroupTest,\r\n                        ...inputValue\r\n                    },\r\n                    classUrl: \"testgroup\",\r\n                    operation: operation,\r\n                    methodUrl: \"Specification\",\r\n                    screenName: \"IDS_SPECIFICATION\"\r\n                }\r\n                if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, ncontrolCode)) {\r\n                    const updateInfo = {\r\n                        typeName: DEFAULT_RETURN,\r\n                        data: {\r\n                            loadEsign: true, screenData: { inputParam, masterData: this.props.Login.masterData },\r\n                            openModal: true, screenName: \"IDS_SPECIFICATION\", operation: operation, selectedRecord: {}\r\n                        }\r\n                    }\r\n                    this.props.updateStore(updateInfo);\r\n                } else {\r\n                    this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\", {});\r\n                }\r\n            } else {\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_SPECIFICATIONSTATUSMUSTBEDRAFTCORRECTION\" }));\r\n            }\r\n        } else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTSPECIFICATION\" }));\r\n        }\r\n    }\r\n\r\n    approveSpecification = (status, needEsign) => {\r\n        const masterData = this.props.Login.masterData;\r\n        const inputParam = {\r\n            inputData: {\r\n                userinfo: this.props.Login.userInfo,\r\n                treetemplatemanipulation: masterData.selectedNode,\r\n                ntreeversiontempcode: this.state.filterData.ntreeversiontempcode.value,\r\n                testgroupspecification: {\r\n                    ...masterData.SelectedSpecification,\r\n                    napprovalstatus: status\r\n                }\r\n            },\r\n            classUrl: \"testgroup\",\r\n            operation: \"approve\",\r\n            methodUrl: \"Specification\",\r\n            screenName: \"IDS_SPECIFICATION\"\r\n        }\r\n        if (needEsign === transactionStatus.YES) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData },\r\n                    openModal: true, screenName: \"IDS_SPECIFICATION\", operation: \"approve\", selectedRecord: {}\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        } else {\r\n            this.props.crudMaster(inputParam, masterData, \"openModal\", {});\r\n        }\r\n    }\r\n\r\n    onComboChange = (comboData, fieldName, caseNo, optional) => {\r\n        let selectedRecord = this.state.selectedRecord || {};\r\n        switch (caseNo) {\r\n            case 1:\r\n                if (fieldName === \"ntestcode\") {\r\n                    selectedRecord[fieldName] = comboData;\r\n                    this.setState({ selectedRecord });\r\n                } else {\r\n                    selectedRecord[fieldName] = comboData;\r\n                    this.setState({ selectedRecord });\r\n                }\r\n                break;\r\n\r\n            case 2:\r\n                selectedRecord[\"parameterTypeCode\"] = comboData.value;\r\n                selectedRecord[fieldName] = comboData;\r\n                this.setState({ selectedRecord });\r\n                break;\r\n\r\n            case 3:\r\n                selectedRecord[\"schecklistversionname\"] = comboData.item.schecklistversionname;\r\n                selectedRecord[fieldName] = comboData;\r\n                this.setState({ selectedRecord });\r\n                break;\r\n\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    validateEsign = () => {\r\n        const inputParam = {\r\n            inputData: {\r\n                \"userinfo\": {\r\n                    ...this.props.Login.userInfo,\r\n                    sreason: this.state.selectedRecord[\"esigncomments\"],\r\n                    nreasoncode: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].value,\r\n                    spredefinedreason: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].label,\r\n\r\n                },\r\n                password: this.state.selectedRecord[\"esignpassword\"]\r\n            },\r\n            screenData: this.props.Login.screenData\r\n        }\r\n        this.props.validateEsignCredential(inputParam, \"openModal\");\r\n    }\r\n\r\n    generateBreadCrumData(filterData) {\r\n        if (filterData && Object.values(filterData).length > 0 && filterData.nsampletypecode && filterData.nsampletypecode.item) {\r\n            // if (filterData.nsampletypecode && filterData.nproductcatcode \r\n            //     && filterData.nproductcatcode.item.ncategorybasedflow === transactionStatus.YES \r\n            //     && filterData.nsampletypecode.item.ncategorybasedflowrequired == transactionStatus.NO) \r\n            if (filterData.nsampletypecode && filterData.nsampletypecode.item.ncategorybasedflowrequired == transactionStatus.YES ? true : filterData.nproductcatcode \r\n                && filterData.nproductcatcode.item.ncategorybasedflow === transactionStatus.YES ? true:false) \r\n                {\r\n                this.breadCrumbData = [\r\n                    {\r\n                        \"label\": \"IDS_SAMPLETYPE\",\r\n                        \"value\": filterData.nsampletypecode ? filterData.nsampletypecode.label : \"\"\r\n                    },\r\n                    {\r\n                        \"label\": filterData.nsampletypecode.item.nformcode === formCode.PRODUCTCATEGORY ?this.props.Login.genericLabel && this.props.Login.genericLabel[\"ProductCategory\"][\"jsondata\"][\"sdisplayname\"][this.props.Login.userInfo.slanguagetypecode]  :\r\n                            filterData.nsampletypecode.item.nformcode === formCode.INSTRUMENTCATEGORY ? \"IDS_INSTRUMENTCATEGORY\" :\r\n                                filterData.nsampletypecode.item.nformcode === formCode.MATERIALCATEGORY ? \"IDS_MATERIALCATEGORY\" : \"\",\r\n                        \"value\": filterData.nproductcatcode ? filterData.nproductcatcode.label : \"\"\r\n                    },\r\n                    {\r\n                        \"label\": \"IDS_TREETEMPLATEVERSION\",\r\n                        \"value\": filterData.ntreeversiontempcode ? filterData.ntreeversiontempcode.label : \"\"\r\n                    }\r\n                ]\r\n                if (filterData.nsampletypecode.value === SampleType.PROJECTSAMPLETYPE)\r\n                {\r\n                 if ( filterData.nsampletypecode.item.nprojectspecrequired === transactionStatus.YES) {\r\n                    this.breadCrumbData.push(  {\r\n                        \"label\": \"IDS_PROJECTTYPE\",\r\n                        \"value\": filterData.nprojecttypecode ? filterData.nprojecttypecode.label : \"\"\r\n                    },\r\n                    {\r\n                        \"label\": \"IDS_PROJECT\",\r\n                        \"value\": filterData.nprojectmastercode ? filterData.nprojectmastercode.label : \"\"\r\n                    })\r\n                }\r\n                }\r\n            } else {\r\n                this.breadCrumbData = [\r\n                    {\r\n                        \"label\": \"IDS_SAMPLETYPE\",\r\n                        \"value\": filterData.nsampletypecode ? filterData.nsampletypecode.label : \"\"\r\n                    },\r\n                    {\r\n                        \"label\": filterData.nsampletypecode.item.nformcode === formCode.PRODUCTCATEGORY ?this.props.Login.genericLabel && this.props.Login.genericLabel[\"ProductCategory\"][\"jsondata\"][\"sdisplayname\"][this.props.Login.userInfo.slanguagetypecode] :\r\n                            filterData.nsampletypecode.item.nformcode === formCode.INSTRUMENTCATEGORY ? \"IDS_INSTRUMENTCATEGORY\" :\r\n                                filterData.nsampletypecode.item.nformcode === formCode.MATERIALCATEGORY ? \"IDS_MATERIALCATEGORY\" : \"\",\r\n                        \"value\": filterData.nproductcatcode ? filterData.nproductcatcode.label : \"\"\r\n                    },\r\n\r\n                    {\r\n                        \"label\": filterData.nsampletypecode.item.nformcode === formCode.PRODUCTCATEGORY ? this.props.Login.genericLabel && this.props.Login.genericLabel[\"Product\"][\"jsondata\"][\"sdisplayname\"][this.props.Login.userInfo.slanguagetypecode]  :\r\n                            filterData.nsampletypecode.item.nformcode === formCode.INSTRUMENTCATEGORY ? \"IDS_INSTRUMENT\" :\r\n                                filterData.nsampletypecode.item.nformcode === formCode.MATERIALCATEGORY ? \"IDS_MATERIAL\" : \"\",\r\n                        \"value\": filterData.nproductcode ? filterData.nproductcode.label : \"\"\r\n                    },\r\n                    {\r\n                        \"label\": \"IDS_TREETEMPLATEVERSION\",\r\n                        \"value\": filterData.ntreeversiontempcode ? filterData.ntreeversiontempcode.label : \"\"\r\n                    }\r\n                ];\r\n                if (filterData.nsampletypecode.value === SampleType.PROJECTSAMPLETYPE)\r\n                {\r\n                    if ( filterData.nsampletypecode.item.nprojectspecrequired === transactionStatus.YES) {\r\n                    this.breadCrumbData.push(  {\r\n                        \"label\": \"IDS_PROJECTTYPE\",\r\n                        \"value\": filterData.nprojecttypecode ? filterData.nprojecttypecode.label : \"\"\r\n                    },\r\n                    {\r\n                        \"label\": \"IDS_PROJECT\",\r\n                        \"value\": filterData.nprojectmastercode ? filterData.nprojectmastercode.label : \"\"\r\n                    })\r\n                }\r\n                }\r\n            }\r\n\r\n        }else{\r\n            this.breadCrumbData = [\r\n                {\r\n                    \"label\": \"IDS_SAMPLETYPE\",\r\n                    \"value\":filterData && filterData.nsampletypecode ? filterData.nsampletypecode.label : \"\"\r\n                },\r\n            ]\r\n        }\r\n    }\r\n\r\n    updateSpiltterLayout() {\r\n        if (this.myRef && this.myRef.current && this.myRef.current.clientHeight + 20 !== this.state.fixefScrollHeight) {\r\n\r\n            this.setState({\r\n                fixefScrollHeight: this.myRef.current.clientHeight + 20,\r\n                disableSplit: true\r\n            })\r\n            //console.log(this.myRef.current.clientHeight)\r\n            setTimeout(() => {\r\n                this.setState({\r\n                    disableSplit: false\r\n                })\r\n            })\r\n        }\r\n\r\n    }\r\n    componentDidUpdate(previousProps, previousState) {\r\n        let selectedRecord = this.state.selectedRecord;\r\n        let selectedsubcodedresult = this.state.selectedsubcodedresult;\r\n        let selectsubcodedelete = this.state.selectsubcodedelete;\r\n        let filterData = this.state.filterData || {};\r\n        let isStateChanged = false;\r\n        let activeTabIndex = this.props.Login.activeTabIndex || 0;\r\n        let activeTabId = this.props.Login.activeTabId || false;\r\n\r\n        this.updateSpiltterLayout()\r\n        let tempFilterData = this.state.tempFilterData || {};\r\n        if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\r\n            selectedRecord = this.props.Login.selectedRecord;\r\n            isStateChanged = true;\r\n        }\r\n        if (this.props.Login.selectedsubcodedresult !== previousProps.Login.selectedsubcodedresult) {\r\n           selectedsubcodedresult = this.props.Login.selectedsubcodedresult;\r\n            //selectedsubcodedresult = this.state.selectedsubcodedresult;\r\n            isStateChanged = true;\r\n        }\r\n        if (this.props.Login.selectsubcodedelete !== previousProps.Login.selectsubcodedelete) {\r\n            selectsubcodedelete = this.props.Login.selectsubcodedelete;\r\n             //selectedsubcodedresult = this.state.selectedsubcodedresult;\r\n             isStateChanged = true;\r\n         }\r\n        if (this.props.Login.activeTabIndex !== previousProps.Login.activeTabIndex || this.props.Login.masterData !== previousProps.Login.masterData) {\r\n            if (this.props.Login.activeTabIndex !== previousProps.Login.activeTabIndex) {\r\n                activeTabIndex = this.props.Login.activeTabIndex;\r\n                activeTabId = this.props.Login.activeTabId;\r\n                isStateChanged = true;\r\n                // this.setState({\r\n                //     activeTabIndex,\r\n                //     activeTabId\r\n                // });\r\n            }\r\n        }\r\n        if (this.props.Login.tempFilterData !== previousProps.Login.tempFilterData) {\r\n            tempFilterData = this.props.Login.tempFilterData || {};\r\n            isStateChanged = true;\r\n        }\r\n        let sampleType = this.state.sampleType || [];\r\n        if (this.props.Login.masterData.SampleType !== previousProps.Login.masterData.SampleType) {\r\n            const sampleTypeMap = constructOptionList(this.props.Login.masterData.SampleType || [], \"nsampletypecode\", \"ssampletypename\", \"nsorter\", \"ascending\", false);\r\n            sampleType = sampleTypeMap.get(\"OptionList\");\r\n            tempFilterData[\"nsampletypecode\"] = sampleType.length ? sampleType[0] : \"\";\r\n            isStateChanged = true;\r\n        }\r\n        let productCategory = this.state.productCategory || [];\r\n        if (this.props.Login.masterData.ProductCategory !== previousProps.Login.masterData.ProductCategory) {\r\n            const productCatMap = constructOptionList(this.props.Login.masterData.ProductCategory || [], \"nproductcatcode\", \"sproductcatname\", \"nproductcatcode\", \"ascending\", false);\r\n            productCategory = productCatMap.get(\"OptionList\");\r\n            tempFilterData[\"nproductcatcode\"] = productCategory.length > 0 ? productCategory[0] : \"\";\r\n            isStateChanged = true;\r\n        }\r\n        let product = this.state.product || [];\r\n        if (this.props.Login.masterData.Product !== previousProps.Login.masterData.Product) {\r\n            const productMap = constructOptionList(this.props.Login.masterData.Product || [], \"nproductcode\", \"sproductname\", \"nproductcode\", \"ascending\", false);\r\n            product = productMap.get(\"OptionList\");\r\n            tempFilterData[\"nproductcode\"] = product.length > 0 ? product[0] : undefined;\r\n            isStateChanged = true;\r\n        }\r\n        let projectType = this.state.projectType || [];\r\n        if (this.props.Login.masterData.ProjectTypeList !== previousProps.Login.masterData.ProjectTypeList) {\r\n            const projectTypeMap = constructOptionList(this.props.Login.masterData.ProjectTypeList || [], \"nprojecttypecode\", \r\n                        \"sprojecttypename\", \"nprojecttypecode\", \"ascending\", false);\r\n            projectType = projectTypeMap.get(\"OptionList\");\r\n            tempFilterData[\"nprojecttypecode\"] = projectType.length > 0 ? projectType[0] : undefined;\r\n            isStateChanged = true;\r\n        }\r\n        let project = this.state.project || [];\r\n        if (this.props.Login.masterData.ProjectMasterList !== previousProps.Login.masterData.ProjectMasterList) {\r\n            const projectMasterMap = constructOptionList(this.props.Login.masterData.ProjectMasterList || [], \"nprojectmastercode\", \r\n                        \"sprojectcode\", \"nprojectmastercode\", \"ascending\", false);\r\n            project = projectMasterMap.get(\"OptionList\");\r\n            tempFilterData[\"nprojectmastercode\"] = project.length > 0 ? project[0] : undefined;\r\n            isStateChanged = true;\r\n        }\r\n        let treeVersionTemplate = this.state.treeVersionTemplate || [];\r\n        if (this.props.Login.masterData.TreeVersionTemplate !== previousProps.Login.masterData.TreeVersionTemplate) {\r\n            const templateMap = constructOptionList(this.props.Login.masterData.TreeVersionTemplate || [], \"ntreeversiontempcode\", \"sversiondescription\", \"ntreeversiontempcode\", \"ascending\", false);\r\n            treeVersionTemplate = templateMap.get(\"OptionList\");\r\n            tempFilterData[\"ntreeversiontempcode\"] = treeVersionTemplate.length > 0 ? treeVersionTemplate[treeVersionTemplate.length - 1] : \"\";\r\n            isStateChanged = true;\r\n        }\r\n\r\n        // if (this.props.Login.masterData.TestGroupTestParameter && this.props.Login.masterData.TestGroupTestParameter !== previousProps.Login.masterData.TestGroupTestParameter) {\r\n        //     sortData(this.props.Login.masterData.TestGroupTestParameter, \"ascending\", \"nsorter\");\r\n        // }\r\n\r\n        // if (this.props.Login.masterData.TestGroupTesT && this.props.Login.masterData.TestGroupTesT !== previousProps.Login.masterData.TestGroupTesT) {\r\n        //     sortData(this.props.Login.masterData.TestGroupTesTest, \"ascending\", \"nsorter\");\r\n        // }\r\n\r\n        let userRoleControlRights = this.state.userRoleControlRights || [];\r\n        let controlMap = this.state.controlMap || [];\r\n        if (this.props.Login.userInfo && this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\r\n            const nformCode = this.props.Login.userInfo.nformcode;\r\n            if (this.props.Login.userRoleControlRights) {\r\n                this.props.Login.userRoleControlRights[nformCode] && Object.values(this.props.Login.userRoleControlRights[nformCode]).map(item =>\r\n                    userRoleControlRights.push(item.ncontrolcode));\r\n            }\r\n            controlMap = getControlMap(this.props.Login.userRoleControlRights, nformCode);\r\n            filterData = { ...tempFilterData };\r\n            this.generateBreadCrumData(filterData);\r\n        }\r\n\r\n        if (this.props.Login.filterData !== previousProps.Login.filterData) {\r\n            filterData = { ...this.props.Login.filterData };\r\n            this.generateBreadCrumData(filterData);\r\n            isStateChanged = true;\r\n        }\r\n        else{\r\n             this.generateBreadCrumData(filterData);\r\n        }\r\n        // else if (filterData !== previousState.filterData) {\r\n        //     filterData = { ...tempFilterData };\r\n        //     this.generateBreadCrumData(filterData);\r\n        // }\r\n\r\n        let historyDataState = this.state.historyDataState;\r\n        if (this.props.Login.historyDataState && this.props.Login.historyDataState !== previousProps.Login.historyDataState) {\r\n            historyDataState = this.props.Login.historyDataState;\r\n            isStateChanged = true;\r\n        }\r\n\r\n        let { testskip, testtake } = this.state;\r\n        if (this.props.Login.masterData !== previousProps.Login.masterData) {\r\n            testskip = this.props.Login.testskip === undefined ? testskip : this.props.Login.testskip\r\n            testtake = testtake ? testtake : this.props.Login.testtake\r\n            isStateChanged = true;\r\n        } \r\n        let { skipRulesEngine, takeRulesEngine } = this.state;\r\n        if (this.props.Login.masterData !== previousProps.Login.masterData) {\r\n            skipRulesEngine = this.props.Login.skipRulesEngine === undefined ? skipRulesEngine : this.props.Login.skipRulesEngine\r\n            takeRulesEngine = takeRulesEngine ? takeRulesEngine : this.props.Login.takeRulesEngine\r\n            isStateChanged = true;\r\n        }\r\n        if (isStateChanged) {\r\n            this.setState({\r\n                selectedRecord, tempFilterData, filterData, userRoleControlRights, controlMap,\r\n                sampleType, productCategory, product, treeVersionTemplate, historyDataState,\r\n                testskip, testtake, projectType, project,activeTabIndex, activeTabId, skipRulesEngine, takeRulesEngine,selectedsubcodedresult,selectsubcodedelete\r\n            });\r\n        }\r\n    }\r\n\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        Login: state.Login\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, {\r\n    callService, crudMaster, filterTestGroup, createTree, editTree, sampleTypeOnChange,\r\n    getTestGroupDetails, validateEsignCredential, updateStore, addSpecification, getSpecification, addComponent,\r\n    changeTestCategory, addTestGroupTest, editTestGroupTest, getTestGroupParameter, editTestGroupParameter,\r\n    addTestFile, editSpecFile, getSpecificationDetails, addTestGroupCodedResult, getComponentBySpecId, filterColumnData,\r\n    viewAttachment, viewTestGroupCheckList, getTestGroupComponentDetails, filterTransactionList, reportSpecification, retireSpecification, getDataForTestMaterial, getEditTestGroupRulesEngine,\r\n    getMaterialCategoryBasedMaterialType, getMaterialBasedMaterialCategory, getTestGroupMaterial, getDataForEditTestMaterial, addTestGroupNumericTab, getTestGroupRulesEngineAdd,\r\n    getSelectedTestGroupRulesEngine, getParameterRulesEngine,getParameterResultValue,subCodedResultView,saveExecutionOrder\r\n})(injectIntl(TestGroup));"]},"metadata":{},"sourceType":"module"}