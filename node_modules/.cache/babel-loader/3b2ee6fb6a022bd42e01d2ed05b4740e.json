{"ast":null,"code":"var _jsxFileName = \"E:\\\\WorkingFolder\\\\React_Postgres\\\\ALPD\\\\branches\\\\SOURCE-513-PROD\\\\SOURCE-513-ALPD-5294\\\\QuaLISWeb\\\\src\\\\pages\\\\ResultEntryBySample\\\\ResultEntryInstrumentForm.jsx\";\nimport React from 'react';\nimport { Row, Col } from 'react-bootstrap';\nimport FormSelectSearch from '../../components/form-select-search/form-select-search.component';\nimport { intl } from '../../components/App';\nimport { injectIntl } from 'react-intl';\nimport DateTimePicker from '../../components/date-time-picker/date-time-picker.component';\nimport { MediaHeader } from '../../components/App.styles';\nimport rsapi from '../../rsapi';\nimport { constructOptionList } from '../../components/CommonScript';\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\nimport { toast } from 'react-toastify';\nimport Preloader from '../../components/preloader/preloader.component';\nimport { updateStore } from '../../actions';\nimport { connect } from 'react-redux'; //const ResultEntryInstrumentForm = (this.props) => {\n\nclass ResultEntryInstrumentForm extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.onComboChange = (comboData, comboName) => {\n      let selectedRecordInstrumentForm = this.state.selectedRecordInstrumentForm || {};\n\n      if (comboData) {\n        selectedRecordInstrumentForm['ninstrumentcode'] = comboData;\n      } else {\n        selectedRecordInstrumentForm['ninstrumentcode'] = [];\n      } //Sync Child Component data with Parent Component     \n\n\n      this.props.onChildDataChange(selectedRecordInstrumentForm);\n      this.setState({\n        selectedRecordInstrumentForm\n      });\n    };\n\n    this.onDateChange = (dateName, dateValue) => {\n      let selectedRecordInstrumentForm = this.state.selectedRecordInstrumentForm || {};\n      selectedRecordInstrumentForm[dateName] = dateValue;\n\n      if (dateName === \"dfromdate\" || dateName === \"dtodate\") {\n        //Sync Child Component data with Parent Component     \n        this.props.onChildDataChange(selectedRecordInstrumentForm);\n        this.setState({\n          selectedRecordInstrumentForm\n        });\n      }\n    };\n\n    this.onComboCategoryChange = (event, fieldname) => {\n      if (event !== null) {\n        let uRL = \"\";\n        let inputData = [];\n\n        if (fieldname === \"ninstrumentcatcode\") {\n          inputData = {\n            userinfo: this.props.userInfo,\n            nflag: 2,\n            ninstrumentcatcode: event.value,\n            ncalibrationRequired: event.item.ncalibrationreq\n          };\n        }\n\n        this.setState({\n          loading: true\n        });\n        rsapi.post(\"resultentrybysample/getResultUsedInstrumentNameCombo\", {\n          userinfo: this.props.userInfo,\n          nflag: 2,\n          ninstrumentcatcode: event.value,\n          ncalibrationRequired: event.item.ncalibrationreq\n        }).then(response => {\n          let TagInstrumentName = constructOptionList(response.data.InstrumentName || [], \"ninstrumentnamecode\", \"sinstrumentname\", undefined, undefined, undefined);\n          let TagListInstrumentName = TagInstrumentName.get(\"OptionList\"); // const updateInfo = {\n          //     typeName: DEFAULT_RETURN,\n          //     data: \n          //Sync Child Component data with Parent Component     \n\n          const selectedRecordInstrumentForm = this.state.selectedRecordInstrumentForm || {};\n          selectedRecordInstrumentForm['ninstrumentcatcode'] = event;\n          selectedRecordInstrumentForm['ninstrumentnamecode'] = TagInstrumentName.has('DefaultValue') && TagInstrumentName.get(\"DefaultValue\") ? TagInstrumentName.get(\"DefaultValue\") : [];\n          selectedRecordInstrumentForm['ninstrumentcode'] = [];\n\n          if (selectedRecordInstrumentForm && selectedRecordInstrumentForm['ninstrumentnamecode'].length !== 0) {\n            rsapi.post(\"resultentrybysample/getResultUsedInstrumentIdCombo\", {\n              userinfo: this.props.userInfo,\n              nflag: 3,\n              ninstrumentcatcode: event.value,\n              ninstrumentnamecode: selectedRecordInstrumentForm['ninstrumentnamecode'].value,\n              ncalibrationRequired: selectedRecordInstrumentForm['ninstrumentnamecode'].item.ncalibrationreq\n            }).then(response => {\n              let TagInstrumentId = constructOptionList(response.data.InstrumentId || [], \"ninstrumentcode\", \"sinstrumentid\", undefined, undefined, undefined);\n              let TagListInstrumentId = TagInstrumentId.get(\"OptionList\"); //Sync Child Component data with Parent Component     \n\n              const selectedRecordInstrumentForm = this.state.selectedRecordInstrumentForm || {};\n              selectedRecordInstrumentForm['ninstrumentnamecode'] = event;\n              selectedRecordInstrumentForm['ninstrumentcode'] = TagInstrumentId.has('DefaultValue') && TagInstrumentId.get(\"DefaultValue\") ? TagInstrumentId.get(\"DefaultValue\") : [];\n              this.props.onChildDataChange(selectedRecordInstrumentForm);\n              this.setState({\n                instrumentIdValue: TagListInstrumentId,\n                loading: false,\n                instrumentnameValue: TagListInstrumentName,\n                // selectedRecordInstrumentForm: {\n                //     ...this.state.selectedRecordInstrumentForm,\n                //     ninstrumentnamecode: event,\n                //     ninstrumentcode: TagInstrumentId.has('DefaultValue')\n                //         && TagInstrumentId.get(\"DefaultValue\")\n                //         ? TagInstrumentId.get(\"DefaultValue\") : [],\n                // }\n                selectedRecordInstrumentForm: { ...this.state.selectedRecordInstrumentForm,\n                  ninstrumentcatcode: event,\n                  ninstrumentnamecode: TagInstrumentName.has('DefaultValue') && TagInstrumentName.get(\"DefaultValue\") ? TagInstrumentName.get(\"DefaultValue\") : [],\n                  ninstrumentcode: TagInstrumentId.has('DefaultValue') && TagInstrumentId.get(\"DefaultValue\") ? TagInstrumentId.get(\"DefaultValue\") : [] // ninstrumentcode: [],\n\n                }\n              });\n            });\n          } else {\n            this.props.onChildDataChange(selectedRecordInstrumentForm);\n            this.setState({\n              // masterData: { ...this.props.Login.masterData, \n              instrumentIdValue: [],\n              instrumentnameValue: TagListInstrumentName // }\n              ,\n              loading: false,\n              selectedRecordInstrumentForm: { ...this.state.selectedRecordInstrumentForm,\n                ninstrumentcatcode: event,\n                ninstrumentnamecode: TagInstrumentName.has('DefaultValue') && TagInstrumentName.get(\"DefaultValue\") ? TagInstrumentName.get(\"DefaultValue\") : [],\n                ninstrumentcode: []\n              }\n            });\n          } //}\n          // this.props.updateStore(updateInfo); \n\n        }); // .catch(error => {\n        //     if (error.response.status === 500) {\n        //         toast.error(error.message);\n        //     }\n        //     else {\n        //         toast.warn(error.response.data);\n        //     }\n        // })\n      }\n    };\n\n    this.onComboNameChange = (event, fieldname) => {\n      if (event !== null) {\n        let uRL = \"\";\n        let inputData = [];\n\n        if (fieldname === \"ninstrumentnamecode\") {\n          inputData = {\n            userinfo: this.props.userInfo,\n            nflag: 3,\n            ninstrumentcatcode: this.state.selectedRecordInstrumentForm.ninstrumentcatcode.value,\n            ninstrumentnamecode: event.value,\n            ncalibrationRequired: event.item.ncalibrationreq\n          };\n        }\n\n        this.setState({\n          loading: true\n        });\n        rsapi.post(\"resultentrybysample/getResultUsedInstrumentIdCombo\", {\n          userinfo: this.props.userInfo,\n          nflag: 3,\n          ninstrumentcatcode: this.state.selectedRecordInstrumentForm.ninstrumentcatcode.value,\n          ninstrumentnamecode: event.value,\n          ncalibrationRequired: event.item.ncalibrationreq\n        }).then(response => {\n          let TagInstrumentId = constructOptionList(response.data.InstrumentId || [], \"ninstrumentcode\", \"sinstrumentid\", undefined, undefined, undefined);\n          let TagListInstrumentId = TagInstrumentId.get(\"OptionList\"); //Sync Child Component data with Parent Component     \n\n          const selectedRecordInstrumentForm = this.state.selectedRecordInstrumentForm || {};\n          selectedRecordInstrumentForm['ninstrumentnamecode'] = event;\n          selectedRecordInstrumentForm['ninstrumentcode'] = TagInstrumentId.has('DefaultValue') && TagInstrumentId.get(\"DefaultValue\") ? TagInstrumentId.get(\"DefaultValue\") : [];\n          this.props.onChildDataChange(selectedRecordInstrumentForm);\n          this.setState({\n            instrumentIdValue: TagListInstrumentId,\n            loading: false,\n            selectedRecordInstrumentForm: { ...this.state.selectedRecordInstrumentForm,\n              ninstrumentnamecode: event,\n              ninstrumentcode: TagInstrumentId.has('DefaultValue') && TagInstrumentId.get(\"DefaultValue\") ? TagInstrumentId.get(\"DefaultValue\") : []\n            }\n          });\n        });\n      }\n    };\n\n    this.state = {\n      selectedRecordInstrumentForm: this.props.selectedRecordInstrumentForm,\n      instrumentcatValue: this.props.instrumentcatValue,\n      instrumentnameValue: this.props.instrumentNameValue,\n      instrumentIdValue: this.props.instrumentIdValue,\n      loading: false\n    };\n  }\n\n  componentWillUnmount() {\n    const updateInfo = {\n      typeName: DEFAULT_RETURN,\n      data: {\n        isInstrumentInitialRender: false\n      }\n    };\n    this.props.updateStore(updateInfo);\n  }\n\n  componentDidUpdate(previousProps) {\n    if (this.props.selectedRecordInstrumentForm !== previousProps.selectedRecordInstrumentForm) {\n      this.setState({\n        selectedRecordInstrumentForm: this.props.selectedRecordInstrumentForm\n      });\n    }\n\n    if (this.props.instrumentValue !== previousProps.instrumentValue) {\n      this.setState({\n        Instrument: this.props.instrumentValue\n      });\n    }\n\n    if (this.props.instrumentcatValue !== previousProps.instrumentcatValue) {\n      this.setState({\n        instrumentcatValue: this.props.instrumentcatValue\n      });\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Preloader, {\n      loading: this.state.loading,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 17\n      }\n    }), Object.values(this.state.selectedRecordInstrumentForm).length > 0 ? /*#__PURE__*/React.createElement(Row, {\n      className: \"mb-4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 252,\n        columnNumber: 21\n      }\n    }, this.props.needSubSample ? /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 255,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(MediaHeader, {\n      className: `labelfont`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 256,\n        columnNumber: 33\n      }\n    }, intl.formatMessage({\n      id: \"IDS_SAMPLEARNO\"\n    }), \": \", \" \" + this.state.selectedRecordInstrumentForm.ssamplearno)) : /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 259,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(MediaHeader, {\n      className: `labelfont`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 260,\n        columnNumber: 33\n      }\n    }, intl.formatMessage({\n      id: \"IDS_ARNO\"\n    }), \": \", \" \" + this.state.selectedRecordInstrumentForm.sarno)), /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 263,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(MediaHeader, {\n      className: `labelfont`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 264,\n        columnNumber: 29\n      }\n    }, intl.formatMessage({\n      id: \"IDS_TEST\"\n    }), \": \", \" \" + this.state.selectedRecordInstrumentForm.stestsynonym))) : \"\", /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 269,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 270,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(FormSelectSearch, {\n      formLabel: intl.formatMessage({\n        id: \"IDS_INSTRUMENTCATEGORY\"\n      }),\n      placeholder: intl.formatMessage({\n        id: \"IDS_SELECTRECORD\"\n      }),\n      isSearchable: false,\n      name: \"ninstrumentcatcode\",\n      isDisabled: false,\n      isMandatory: true,\n      options: this.state.instrumentcatValue || [],\n      optionId: \"ninstrumentcatcode\",\n      optionValue: \"sinstrumentcatname\",\n      value: this.state.selectedRecordInstrumentForm ? this.state.selectedRecordInstrumentForm.ninstrumentcatcode : \"\",\n      showOption: true,\n      required: true,\n      onChange: event => this.onComboCategoryChange(event, 'ninstrumentcatcode'),\n      isMulti: false,\n      closeMenuOnSelect: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 271,\n        columnNumber: 25\n      }\n    })), /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 290,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(FormSelectSearch, {\n      formLabel: intl.formatMessage({\n        id: \"IDS_INSTRUMENTNAME\"\n      }),\n      placeholder: intl.formatMessage({\n        id: \"IDS_SELECTRECORD\"\n      }),\n      isSearchable: false,\n      name: \"ninstrumentnamecode\",\n      isDisabled: false,\n      isMandatory: true,\n      options: this.state.instrumentnameValue || [],\n      optionId: \"ninstrumentnamecode\",\n      optionValue: \"sinstrumentname\",\n      value: this.state.selectedRecordInstrumentForm ? this.state.selectedRecordInstrumentForm.ninstrumentnamecode : \"\",\n      showOption: true,\n      required: true,\n      onChange: event => this.onComboNameChange(event, 'ninstrumentnamecode'),\n      isMulti: false,\n      closeMenuOnSelect: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 291,\n        columnNumber: 25\n      }\n    })), /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 310,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(FormSelectSearch, {\n      formLabel: intl.formatMessage({\n        id: \"IDS_INSTRUMENTID\"\n      }),\n      placeholder: intl.formatMessage({\n        id: \"IDS_SELECTRECORD\"\n      }),\n      isSearchable: false,\n      name: \"ninstrumentcode\",\n      isDisabled: false,\n      isMandatory: true,\n      options: this.state.instrumentIdValue || [],\n      optionId: \"ninstrumentcode\",\n      optionValue: \"sinstrumentid\",\n      value: this.state.selectedRecordInstrumentForm ? this.state.selectedRecordInstrumentForm.ninstrumentcode : \"\",\n      showOption: true,\n      required: true,\n      onChange: event => this.onComboChange(event, 'ninstrumentcode'),\n      isMulti: false,\n      closeMenuOnSelect: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 311,\n        columnNumber: 25\n      }\n    })), /*#__PURE__*/React.createElement(Col, {\n      md: 6,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 330,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(DateTimePicker, {\n      name: \"dfromdate\",\n      label: intl.formatMessage({\n        id: \"IDS_FROM\"\n      }),\n      className: \"form-control\",\n      placeholderText: \"Select date..\",\n      selected: this.state.selectedRecordInstrumentForm[\"dfromdate\"],\n      value: this.state.selectedRecordInstrumentForm[\"dfromdate\"] //dateFormat={\"dd/MM/yyyy HH:mm:ss\"}\n      ,\n      dateFormat: this.props.userInfo.ssitedatetime,\n      timeInputLabel: this.props.intl.formatMessage({\n        id: \"IDS_TIME\"\n      }),\n      showTimeInput: true,\n      isClearable: false,\n      isMandatory: true,\n      required: true,\n      onChange: date => this.onDateChange(\"dfromdate\", date),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 331,\n        columnNumber: 25\n      }\n    })), /*#__PURE__*/React.createElement(Col, {\n      md: 6,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 369,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(DateTimePicker, {\n      name: \"dtodate\",\n      label: intl.formatMessage({\n        id: \"IDS_TO\"\n      }),\n      className: \"form-control\",\n      placeholderText: \"Select date..\",\n      selected: this.state.selectedRecordInstrumentForm[\"dtodate\"],\n      value: this.state.selectedRecordInstrumentForm[\"dtodate\"] //  dateFormat={\"dd/MM/yyyy HH:mm:ss\"}\n      ,\n      dateFormat: this.props.userInfo.ssitedatetime,\n      timeInputLabel: this.props.intl.formatMessage({\n        id: \"IDS_TIME\"\n      }),\n      showTimeInput: true,\n      isClearable: false,\n      isMandatory: true,\n      required: true,\n      onChange: date => this.onDateChange(\"dtodate\", date),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 370,\n        columnNumber: 25\n      }\n    }))));\n  }\n\n} // export default injectIntl(ResultEntryInstrumentForm);\n\n\nexport default connect(null, {\n  updateStore\n})(injectIntl(ResultEntryInstrumentForm));","map":{"version":3,"sources":["E:/WorkingFolder/React_Postgres/ALPD/branches/SOURCE-513-PROD/SOURCE-513-ALPD-5294/QuaLISWeb/src/pages/ResultEntryBySample/ResultEntryInstrumentForm.jsx"],"names":["React","Row","Col","FormSelectSearch","intl","injectIntl","DateTimePicker","MediaHeader","rsapi","constructOptionList","DEFAULT_RETURN","toast","Preloader","updateStore","connect","ResultEntryInstrumentForm","Component","constructor","props","onComboChange","comboData","comboName","selectedRecordInstrumentForm","state","onChildDataChange","setState","onDateChange","dateName","dateValue","onComboCategoryChange","event","fieldname","uRL","inputData","userinfo","userInfo","nflag","ninstrumentcatcode","value","ncalibrationRequired","item","ncalibrationreq","loading","post","then","response","TagInstrumentName","data","InstrumentName","undefined","TagListInstrumentName","get","has","length","ninstrumentnamecode","TagInstrumentId","InstrumentId","TagListInstrumentId","instrumentIdValue","instrumentnameValue","ninstrumentcode","onComboNameChange","instrumentcatValue","instrumentNameValue","componentWillUnmount","updateInfo","typeName","isInstrumentInitialRender","componentDidUpdate","previousProps","instrumentValue","Instrument","render","Object","values","needSubSample","formatMessage","id","ssamplearno","sarno","stestsynonym","ssitedatetime","date"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,GAAT,EAAcC,GAAd,QAAyB,iBAAzB;AACA,OAAOC,gBAAP,MAA6B,kEAA7B;AACA,SAASC,IAAT,QAAqB,sBAArB;AACA,SAASC,UAAT,QAA2B,YAA3B;AACA,OAAOC,cAAP,MAA2B,8DAA3B;AACA,SAASC,WAAT,QAA4B,6BAA5B;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,SAASC,mBAAT,QAAoC,+BAApC;AACA,SAASC,cAAT,QAA+B,0BAA/B;AACA,SAASC,KAAT,QAAsB,gBAAtB;AACA,OAAOC,SAAP,MAAsB,gDAAtB;AACA,SACIC,WADJ,QAEO,eAFP;AAGA,SAASC,OAAT,QAAwB,aAAxB,C,CACA;;AACA,MAAMC,yBAAN,SAAwCf,KAAK,CAACgB,SAA9C,CAAwD;AAEpDC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;;AADe,SAWnBC,aAXmB,GAWH,CAACC,SAAD,EAAYC,SAAZ,KAA0B;AACtC,UAAIC,4BAA4B,GAAG,KAAKC,KAAL,CAAWD,4BAAX,IAA2C,EAA9E;;AACA,UAAIF,SAAJ,EAAe;AACXE,QAAAA,4BAA4B,CAAC,iBAAD,CAA5B,GAAkDF,SAAlD;AACH,OAFD,MAEO;AACHE,QAAAA,4BAA4B,CAAC,iBAAD,CAA5B,GAAkD,EAAlD;AACH,OANqC,CAOtC;;;AACA,WAAKJ,KAAL,CAAWM,iBAAX,CAA6BF,4BAA7B;AACA,WAAKG,QAAL,CAAc;AAAEH,QAAAA;AAAF,OAAd;AACH,KArBkB;;AAAA,SAsBnBI,YAtBmB,GAsBJ,CAACC,QAAD,EAAWC,SAAX,KAAyB;AACpC,UAAIN,4BAA4B,GAAG,KAAKC,KAAL,CAAWD,4BAAX,IAA2C,EAA9E;AACAA,MAAAA,4BAA4B,CAACK,QAAD,CAA5B,GAAyCC,SAAzC;;AACA,UAAID,QAAQ,KAAK,WAAb,IAA4BA,QAAQ,KAAK,SAA7C,EAAwD;AAElD;AACA,aAAKT,KAAL,CAAWM,iBAAX,CAA6BF,4BAA7B;AACF,aAAKG,QAAL,CAAc;AAAEH,UAAAA;AAAF,SAAd;AACH;AAEJ,KAhCkB;;AAAA,SAkCnBO,qBAlCmB,GAkCK,CAACC,KAAD,EAAQC,SAAR,KAAsB;AAC1C,UAAID,KAAK,KAAK,IAAd,EAAoB;AAChB,YAAIE,GAAG,GAAG,EAAV;AACA,YAAIC,SAAS,GAAG,EAAhB;;AACA,YAAIF,SAAS,KAAK,oBAAlB,EAAwC;AACpCE,UAAAA,SAAS,GAAG;AACRC,YAAAA,QAAQ,EAAE,KAAKhB,KAAL,CAAWiB,QADb;AAERC,YAAAA,KAAK,EAAE,CAFC;AAGRC,YAAAA,kBAAkB,EAAEP,KAAK,CAACQ,KAHlB;AAIRC,YAAAA,oBAAoB,EAAET,KAAK,CAACU,IAAN,CAAWC;AAJzB,WAAZ;AAMH;;AACD,aAAKhB,QAAL,CAAc;AAAEiB,UAAAA,OAAO,EAAE;AAAX,SAAd;AACAlC,QAAAA,KAAK,CAACmC,IAAN,CAAW,sDAAX,EAAmE;AAC/DT,UAAAA,QAAQ,EAAE,KAAKhB,KAAL,CAAWiB,QAD0C;AAE/DC,UAAAA,KAAK,EAAE,CAFwD;AAG/DC,UAAAA,kBAAkB,EAAEP,KAAK,CAACQ,KAHqC;AAI/DC,UAAAA,oBAAoB,EAAET,KAAK,CAACU,IAAN,CAAWC;AAJ8B,SAAnE,EAKGG,IALH,CAKQC,QAAQ,IAAI;AAChB,cAAIC,iBAAiB,GAAGrC,mBAAmB,CAACoC,QAAQ,CAACE,IAAT,CAAcC,cAAd,IAAgC,EAAjC,EAAqC,qBAArC,EACvC,iBADuC,EACpBC,SADoB,EACTA,SADS,EACEA,SADF,CAA3C;AAEA,cAAIC,qBAAqB,GAAGJ,iBAAiB,CAACK,GAAlB,CAAsB,YAAtB,CAA5B,CAHgB,CAKhB;AACA;AACA;AAEA;;AACA,gBAAM7B,4BAA4B,GAAG,KAAKC,KAAL,CAAWD,4BAAX,IAA2C,EAAhF;AACAA,UAAAA,4BAA4B,CAAC,oBAAD,CAA5B,GAAqDQ,KAArD;AACAR,UAAAA,4BAA4B,CAAC,qBAAD,CAA5B,GAAsDwB,iBAAiB,CAACM,GAAlB,CAAsB,cAAtB,KAC/CN,iBAAiB,CAACK,GAAlB,CAAsB,cAAtB,CAD+C,GAElDL,iBAAiB,CAACK,GAAlB,CAAsB,cAAtB,CAFkD,GAEV,EAF5C;AAGA7B,UAAAA,4BAA4B,CAAC,iBAAD,CAA5B,GAAkD,EAAlD;;AACA,cAAIA,4BAA4B,IAAIA,4BAA4B,CAAC,qBAAD,CAA5B,CAAoD+B,MAApD,KAA6D,CAAjG,EAAoG;AAC5F7C,YAAAA,KAAK,CAACmC,IAAN,CAAW,oDAAX,EAAiE;AACjET,cAAAA,QAAQ,EAAE,KAAKhB,KAAL,CAAWiB,QAD4C;AAEjEC,cAAAA,KAAK,EAAE,CAF0D;AAGjEC,cAAAA,kBAAkB,EAAEP,KAAK,CAACQ,KAHuC;AAIjEgB,cAAAA,mBAAmB,EAAEhC,4BAA4B,CAAC,qBAAD,CAA5B,CAAoDgB,KAJR;AAKjEC,cAAAA,oBAAoB,EAAEjB,4BAA4B,CAAC,qBAAD,CAA5B,CAAoDkB,IAApD,CAAyDC;AALd,aAAjE,EAODG,IAPC,CAOIC,QAAQ,IAAI;AAChB,kBAAIU,eAAe,GAAG9C,mBAAmB,CAACoC,QAAQ,CAACE,IAAT,CAAcS,YAAd,IAA8B,EAA/B,EAAmC,iBAAnC,EACrC,eADqC,EACpBP,SADoB,EACTA,SADS,EACEA,SADF,CAAzC;AAEA,kBAAIQ,mBAAmB,GAAGF,eAAe,CAACJ,GAAhB,CAAoB,YAApB,CAA1B,CAHgB,CAOhB;;AACA,oBAAM7B,4BAA4B,GAAG,KAAKC,KAAL,CAAWD,4BAAX,IAA2C,EAAhF;AACAA,cAAAA,4BAA4B,CAAC,qBAAD,CAA5B,GAAsDQ,KAAtD;AACAR,cAAAA,4BAA4B,CAAC,iBAAD,CAA5B,GAAkDiC,eAAe,CAACH,GAAhB,CAAoB,cAApB,KAC3CG,eAAe,CAACJ,GAAhB,CAAoB,cAApB,CAD2C,GAE5CI,eAAe,CAACJ,GAAhB,CAAoB,cAApB,CAF4C,GAEN,EAF5C;AAGA,mBAAKjC,KAAL,CAAWM,iBAAX,CAA6BF,4BAA7B;AAEA,mBAAKG,QAAL,CAAc;AACViC,gBAAAA,iBAAiB,EAAED,mBADT;AAEVf,gBAAAA,OAAO,EAAE,KAFC;AAGViB,gBAAAA,mBAAmB,EAAET,qBAHX;AAIV;AACA;AACA;AACA;AACA;AACA;AACA;AACA5B,gBAAAA,4BAA4B,EAAE,EAC1B,GAAG,KAAKC,KAAL,CAAWD,4BADY;AAE1Be,kBAAAA,kBAAkB,EAAEP,KAFM;AAG1BwB,kBAAAA,mBAAmB,EAAER,iBAAiB,CAACM,GAAlB,CAAsB,cAAtB,KACdN,iBAAiB,CAACK,GAAlB,CAAsB,cAAtB,CADc,GAEjBL,iBAAiB,CAACK,GAAlB,CAAsB,cAAtB,CAFiB,GAEuB,EALlB;AAMtBS,kBAAAA,eAAe,EAAEL,eAAe,CAACH,GAAhB,CAAoB,cAApB,KACdG,eAAe,CAACJ,GAAhB,CAAoB,cAApB,CADc,GAEfI,eAAe,CAACJ,GAAhB,CAAoB,cAApB,CAFe,GAEuB,EARlB,CAS3B;;AAT2B;AAXpB,eAAd;AAwBH,aA9CG;AAiDP,WAlDD,MAmDK;AACD,iBAAKjC,KAAL,CAAWM,iBAAX,CAA6BF,4BAA7B;AAEA,iBAAKG,QAAL,CAAc;AACV;AACAiC,cAAAA,iBAAiB,EAAE,EAFT;AAGVC,cAAAA,mBAAmB,EAAET,qBAHX,CAIV;AAJU;AAMVR,cAAAA,OAAO,EAAE,KANC;AAOVpB,cAAAA,4BAA4B,EAAE,EAC1B,GAAG,KAAKC,KAAL,CAAWD,4BADY;AAE1Be,gBAAAA,kBAAkB,EAAEP,KAFM;AAG1BwB,gBAAAA,mBAAmB,EAAER,iBAAiB,CAACM,GAAlB,CAAsB,cAAtB,KACdN,iBAAiB,CAACK,GAAlB,CAAsB,cAAtB,CADc,GAEjBL,iBAAiB,CAACK,GAAlB,CAAsB,cAAtB,CAFiB,GAEuB,EALlB;AAM1BS,gBAAAA,eAAe,EAAE;AANS;AAPpB,aAAd;AAgBH,WAtFe,CAuFhB;AACA;;AACH,SA9FD,EAZgB,CA4GZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACP;AACJ,KAxJkB;;AAAA,SA0JnBC,iBA1JmB,GA0JC,CAAC/B,KAAD,EAAQC,SAAR,KAAsB;AACtC,UAAID,KAAK,KAAK,IAAd,EAAoB;AAChB,YAAIE,GAAG,GAAG,EAAV;AACA,YAAIC,SAAS,GAAG,EAAhB;;AACA,YAAIF,SAAS,KAAK,qBAAlB,EAAyC;AACrCE,UAAAA,SAAS,GAAG;AACRC,YAAAA,QAAQ,EAAE,KAAKhB,KAAL,CAAWiB,QADb;AAERC,YAAAA,KAAK,EAAE,CAFC;AAGRC,YAAAA,kBAAkB,EAAE,KAAKd,KAAL,CAAWD,4BAAX,CAAwCe,kBAAxC,CAA2DC,KAHvE;AAIRgB,YAAAA,mBAAmB,EAAExB,KAAK,CAACQ,KAJnB;AAKRC,YAAAA,oBAAoB,EAAGT,KAAK,CAACU,IAAN,CAAWC;AAL1B,WAAZ;AAQH;;AACD,aAAKhB,QAAL,CAAc;AAAEiB,UAAAA,OAAO,EAAE;AAAX,SAAd;AACAlC,QAAAA,KAAK,CAACmC,IAAN,CAAW,oDAAX,EAAiE;AAC7DT,UAAAA,QAAQ,EAAE,KAAKhB,KAAL,CAAWiB,QADwC;AAE7DC,UAAAA,KAAK,EAAE,CAFsD;AAG7DC,UAAAA,kBAAkB,EAAE,KAAKd,KAAL,CAAWD,4BAAX,CAAwCe,kBAAxC,CAA2DC,KAHlB;AAI7DgB,UAAAA,mBAAmB,EAAExB,KAAK,CAACQ,KAJkC;AAK7DC,UAAAA,oBAAoB,EAAET,KAAK,CAACU,IAAN,CAAWC;AAL4B,SAAjE,EAOGG,IAPH,CAOQC,QAAQ,IAAI;AACZ,cAAIU,eAAe,GAAG9C,mBAAmB,CAACoC,QAAQ,CAACE,IAAT,CAAcS,YAAd,IAA8B,EAA/B,EAAmC,iBAAnC,EACrC,eADqC,EACpBP,SADoB,EACTA,SADS,EACEA,SADF,CAAzC;AAEI,cAAIQ,mBAAmB,GAAGF,eAAe,CAACJ,GAAhB,CAAoB,YAApB,CAA1B,CAHQ,CAOZ;;AACA,gBAAM7B,4BAA4B,GAAG,KAAKC,KAAL,CAAWD,4BAAX,IAA2C,EAAhF;AACAA,UAAAA,4BAA4B,CAAC,qBAAD,CAA5B,GAAoDQ,KAApD;AACAR,UAAAA,4BAA4B,CAAC,iBAAD,CAA5B,GAAgDiC,eAAe,CAACH,GAAhB,CAAoB,cAApB,KACEG,eAAe,CAACJ,GAAhB,CAAoB,cAApB,CADF,GAEEI,eAAe,CAACJ,GAAhB,CAAoB,cAApB,CAFF,GAEwC,EAFxF;AAGA,eAAKjC,KAAL,CAAWM,iBAAX,CAA6BF,4BAA7B;AAEA,eAAKG,QAAL,CAAc;AACViC,YAAAA,iBAAiB,EAAED,mBADT;AAEVf,YAAAA,OAAO,EAAE,KAFC;AAGVpB,YAAAA,4BAA4B,EAAE,EAC1B,GAAG,KAAKC,KAAL,CAAWD,4BADY;AAE1BgC,cAAAA,mBAAmB,EAAExB,KAFK;AAG1B8B,cAAAA,eAAe,EAAEL,eAAe,CAACH,GAAhB,CAAoB,cAApB,KACEG,eAAe,CAACJ,GAAhB,CAAoB,cAApB,CADF,GAEEI,eAAe,CAACJ,GAAhB,CAAoB,cAApB,CAFF,GAEwC;AAL/B;AAHpB,WAAd;AAYH,SAlCL;AAmCH;AACJ,KA7MkB;;AAEf,SAAK5B,KAAL,GAAa;AACTD,MAAAA,4BAA4B,EAAE,KAAKJ,KAAL,CAAWI,4BADhC;AAETwC,MAAAA,kBAAkB,EAAE,KAAK5C,KAAL,CAAW4C,kBAFtB;AAGTH,MAAAA,mBAAmB,EAAE,KAAKzC,KAAL,CAAW6C,mBAHvB;AAITL,MAAAA,iBAAiB,EAAE,KAAKxC,KAAL,CAAWwC,iBAJrB;AAKThB,MAAAA,OAAO,EAAE;AALA,KAAb;AAQH;;AAoMDsB,EAAAA,oBAAoB,GAAG;AACnB,UAAMC,UAAU,GAAG;AACfC,MAAAA,QAAQ,EAAExD,cADK;AAEfqC,MAAAA,IAAI,EAAE;AAAEoB,QAAAA,yBAAyB,EAAE;AAA7B;AAFS,KAAnB;AAIA,SAAKjD,KAAL,CAAWL,WAAX,CAAuBoD,UAAvB;AACH;;AAEDG,EAAAA,kBAAkB,CAACC,aAAD,EAAgB;AAC9B,QAAI,KAAKnD,KAAL,CAAWI,4BAAX,KAA4C+C,aAAa,CAAC/C,4BAA9D,EAA4F;AACxF,WAAKG,QAAL,CAAc;AAAEH,QAAAA,4BAA4B,EAAE,KAAKJ,KAAL,CAAWI;AAA3C,OAAd;AACH;;AACD,QAAI,KAAKJ,KAAL,CAAWoD,eAAX,KAA+BD,aAAa,CAACC,eAAjD,EAAkE;AAC9D,WAAK7C,QAAL,CAAc;AAAE8C,QAAAA,UAAU,EAAE,KAAKrD,KAAL,CAAWoD;AAAzB,OAAd;AACH;;AACD,QAAI,KAAKpD,KAAL,CAAW4C,kBAAX,KAAkCO,aAAa,CAACP,kBAApD,EAAwE;AACpE,WAAKrC,QAAL,CAAc;AAAEqC,QAAAA,kBAAkB,EAAE,KAAK5C,KAAL,CAAW4C;AAAjC,OAAd;AACH;AACJ;;AAEDU,EAAAA,MAAM,GAAG;AAEL,wBACI,uDACI,oBAAC,SAAD;AAAW,MAAA,OAAO,EAAE,KAAKjD,KAAL,CAAWmB,OAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,EAEK+B,MAAM,CAACC,MAAP,CAAc,KAAKnD,KAAL,CAAWD,4BAAzB,EAAuD+B,MAAvD,GAAgE,CAAhE,gBACG,oBAAC,GAAD;AAAK,MAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACK,KAAKnC,KAAL,CAAWyD,aAAX,gBAEG,oBAAC,GAAD;AAAK,MAAA,EAAE,EAAE,EAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,WAAD;AAAa,MAAA,SAAS,EAAG,WAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAsCvE,IAAI,CAACwE,aAAL,CAAmB;AAAEC,MAAAA,EAAE,EAAE;AAAN,KAAnB,CAAtC,QAAsF,MAAM,KAAKtD,KAAL,CAAWD,4BAAX,CAAwCwD,WAApI,CADJ,CAFH,gBAMG,oBAAC,GAAD;AAAK,MAAA,EAAE,EAAE,EAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,WAAD;AAAa,MAAA,SAAS,EAAG,WAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAsC1E,IAAI,CAACwE,aAAL,CAAmB;AAAEC,MAAAA,EAAE,EAAE;AAAN,KAAnB,CAAtC,QAAgF,MAAM,KAAKtD,KAAL,CAAWD,4BAAX,CAAwCyD,KAA9H,CADJ,CAPR,eAWI,oBAAC,GAAD;AAAK,MAAA,EAAE,EAAE,EAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,WAAD;AAAa,MAAA,SAAS,EAAG,WAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAsC3E,IAAI,CAACwE,aAAL,CAAmB;AAAEC,MAAAA,EAAE,EAAE;AAAN,KAAnB,CAAtC,QAAgF,MAAM,KAAKtD,KAAL,CAAWD,4BAAX,CAAwC0D,YAA9H,CADJ,CAXJ,CADH,GAgBK,EAlBV,eAoBI,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,GAAD;AAAK,MAAA,EAAE,EAAE,EAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,gBAAD;AACI,MAAA,SAAS,EAAE5E,IAAI,CAACwE,aAAL,CAAmB;AAAEC,QAAAA,EAAE,EAAE;AAAN,OAAnB,CADf;AAEI,MAAA,WAAW,EAAEzE,IAAI,CAACwE,aAAL,CAAmB;AAAEC,QAAAA,EAAE,EAAE;AAAN,OAAnB,CAFjB;AAGI,MAAA,YAAY,EAAE,KAHlB;AAII,MAAA,IAAI,EAAE,oBAJV;AAKI,MAAA,UAAU,EAAE,KALhB;AAMI,MAAA,WAAW,EAAE,IANjB;AAOI,MAAA,OAAO,EAAE,KAAKtD,KAAL,CAAWuC,kBAAX,IAAiC,EAP9C;AAQI,MAAA,QAAQ,EAAC,oBARb;AASI,MAAA,WAAW,EAAC,oBAThB;AAUI,MAAA,KAAK,EAAE,KAAKvC,KAAL,CAAWD,4BAAX,GAA0C,KAAKC,KAAL,CAAWD,4BAAX,CAAwCe,kBAAlF,GAAuG,EAVlH;AAWI,MAAA,UAAU,EAAE,IAXhB;AAYI,MAAA,QAAQ,EAAE,IAZd;AAaI,MAAA,QAAQ,EAAGP,KAAD,IAAW,KAAKD,qBAAL,CAA2BC,KAA3B,EAAkC,oBAAlC,CAbzB;AAcI,MAAA,OAAO,EAAE,KAdb;AAeI,MAAA,iBAAiB,EAAE,IAfvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,CADJ,eAqBI,oBAAC,GAAD;AAAK,MAAA,EAAE,EAAE,EAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,gBAAD;AACI,MAAA,SAAS,EAAE1B,IAAI,CAACwE,aAAL,CAAmB;AAAEC,QAAAA,EAAE,EAAE;AAAN,OAAnB,CADf;AAEI,MAAA,WAAW,EAAEzE,IAAI,CAACwE,aAAL,CAAmB;AAAEC,QAAAA,EAAE,EAAE;AAAN,OAAnB,CAFjB;AAGI,MAAA,YAAY,EAAE,KAHlB;AAII,MAAA,IAAI,EAAE,qBAJV;AAKI,MAAA,UAAU,EAAE,KALhB;AAMI,MAAA,WAAW,EAAE,IANjB;AAOI,MAAA,OAAO,EAAE,KAAKtD,KAAL,CAAWoC,mBAAX,IAAkC,EAP/C;AAQI,MAAA,QAAQ,EAAC,qBARb;AASI,MAAA,WAAW,EAAC,iBAThB;AAUI,MAAA,KAAK,EAAE,KAAKpC,KAAL,CAAWD,4BAAX,GAA0C,KAAKC,KAAL,CAAWD,4BAAX,CAAwCgC,mBAAlF,GAAwG,EAVnH;AAWI,MAAA,UAAU,EAAE,IAXhB;AAYI,MAAA,QAAQ,EAAE,IAZd;AAaI,MAAA,QAAQ,EAAGxB,KAAD,IAAW,KAAK+B,iBAAL,CAAuB/B,KAAvB,EAA8B,qBAA9B,CAbzB;AAcI,MAAA,OAAO,EAAE,KAdb;AAeI,MAAA,iBAAiB,EAAE,IAfvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,CArBJ,eAyCI,oBAAC,GAAD;AAAK,MAAA,EAAE,EAAE,EAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,gBAAD;AACI,MAAA,SAAS,EAAE1B,IAAI,CAACwE,aAAL,CAAmB;AAAEC,QAAAA,EAAE,EAAE;AAAN,OAAnB,CADf;AAEI,MAAA,WAAW,EAAEzE,IAAI,CAACwE,aAAL,CAAmB;AAAEC,QAAAA,EAAE,EAAE;AAAN,OAAnB,CAFjB;AAGI,MAAA,YAAY,EAAE,KAHlB;AAII,MAAA,IAAI,EAAE,iBAJV;AAKI,MAAA,UAAU,EAAE,KALhB;AAMI,MAAA,WAAW,EAAE,IANjB;AAOI,MAAA,OAAO,EAAE,KAAKtD,KAAL,CAAWmC,iBAAX,IAAgC,EAP7C;AAQI,MAAA,QAAQ,EAAC,iBARb;AASI,MAAA,WAAW,EAAC,eAThB;AAUI,MAAA,KAAK,EAAE,KAAKnC,KAAL,CAAWD,4BAAX,GAA0C,KAAKC,KAAL,CAAWD,4BAAX,CAAwCsC,eAAlF,GAAoG,EAV/G;AAWI,MAAA,UAAU,EAAE,IAXhB;AAYI,MAAA,QAAQ,EAAE,IAZd;AAaI,MAAA,QAAQ,EAAG9B,KAAD,IAAW,KAAKX,aAAL,CAAmBW,KAAnB,EAA0B,iBAA1B,CAbzB;AAcI,MAAA,OAAO,EAAE,KAdb;AAeI,MAAA,iBAAiB,EAAE,IAfvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,CAzCJ,eA6DI,oBAAC,GAAD;AAAK,MAAA,EAAE,EAAE,CAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,cAAD;AACI,MAAA,IAAI,EAAE,WADV;AAEI,MAAA,KAAK,EAAE1B,IAAI,CAACwE,aAAL,CAAmB;AAAEC,QAAAA,EAAE,EAAE;AAAN,OAAnB,CAFX;AAGI,MAAA,SAAS,EAAC,cAHd;AAII,MAAA,eAAe,EAAC,eAJpB;AAKI,MAAA,QAAQ,EAAE,KAAKtD,KAAL,CAAWD,4BAAX,CAAwC,WAAxC,CALd;AAMI,MAAA,KAAK,EAAE,KAAKC,KAAL,CAAWD,4BAAX,CAAwC,WAAxC,CANX,CAOI;AAPJ;AAQI,MAAA,UAAU,EAAE,KAAKJ,KAAL,CAAWiB,QAAX,CAAoB8C,aARpC;AASI,MAAA,cAAc,EAAE,KAAK/D,KAAL,CAAWd,IAAX,CAAgBwE,aAAhB,CAA8B;AAAEC,QAAAA,EAAE,EAAE;AAAN,OAA9B,CATpB;AAUI,MAAA,aAAa,EAAE,IAVnB;AAWI,MAAA,WAAW,EAAE,KAXjB;AAYI,MAAA,WAAW,EAAE,IAZjB;AAaI,MAAA,QAAQ,EAAE,IAbd;AAcI,MAAA,QAAQ,EAAEK,IAAI,IAAI,KAAKxD,YAAL,CAAkB,WAAlB,EAA+BwD,IAA/B,CAdtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,CA7DJ,eAoGI,oBAAC,GAAD;AAAK,MAAA,EAAE,EAAE,CAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,cAAD;AACI,MAAA,IAAI,EAAE,SADV;AAEI,MAAA,KAAK,EAAE9E,IAAI,CAACwE,aAAL,CAAmB;AAAEC,QAAAA,EAAE,EAAE;AAAN,OAAnB,CAFX;AAGI,MAAA,SAAS,EAAC,cAHd;AAII,MAAA,eAAe,EAAC,eAJpB;AAKI,MAAA,QAAQ,EAAE,KAAKtD,KAAL,CAAWD,4BAAX,CAAwC,SAAxC,CALd;AAMI,MAAA,KAAK,EAAE,KAAKC,KAAL,CAAWD,4BAAX,CAAwC,SAAxC,CANX,CAOI;AAPJ;AAQI,MAAA,UAAU,EAAE,KAAKJ,KAAL,CAAWiB,QAAX,CAAoB8C,aARpC;AASI,MAAA,cAAc,EAAE,KAAK/D,KAAL,CAAWd,IAAX,CAAgBwE,aAAhB,CAA8B;AAAEC,QAAAA,EAAE,EAAE;AAAN,OAA9B,CATpB;AAUI,MAAA,aAAa,EAAE,IAVnB;AAWI,MAAA,WAAW,EAAE,KAXjB;AAYI,MAAA,WAAW,EAAE,IAZjB;AAaI,MAAA,QAAQ,EAAE,IAbd;AAcI,MAAA,QAAQ,EAAEK,IAAI,IAAI,KAAKxD,YAAL,CAAkB,SAAlB,EAA6BwD,IAA7B,CAdtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,CApGJ,CApBJ,CADJ;AAmKH;;AAzYmD,C,CA4YxD;;;AACA,eAAepE,OAAO,CAAC,IAAD,EAAO;AACzBD,EAAAA;AADyB,CAAP,CAAP,CAGZR,UAAU,CAACU,yBAAD,CAHE,CAAf","sourcesContent":["import React from 'react';\r\nimport { Row, Col } from 'react-bootstrap';\r\nimport FormSelectSearch from '../../components/form-select-search/form-select-search.component';\r\nimport { intl } from '../../components/App';\r\nimport { injectIntl } from 'react-intl';\r\nimport DateTimePicker from '../../components/date-time-picker/date-time-picker.component';\r\nimport { MediaHeader } from '../../components/App.styles';\r\nimport rsapi from '../../rsapi';\r\nimport { constructOptionList } from '../../components/CommonScript';\r\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\r\nimport { toast } from 'react-toastify';\r\nimport Preloader from '../../components/preloader/preloader.component';\r\nimport {\r\n    updateStore\r\n} from '../../actions';\r\nimport { connect } from 'react-redux';\r\n//const ResultEntryInstrumentForm = (this.props) => {\r\nclass ResultEntryInstrumentForm extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            selectedRecordInstrumentForm: this.props.selectedRecordInstrumentForm,\r\n            instrumentcatValue: this.props.instrumentcatValue,\r\n            instrumentnameValue: this.props.instrumentNameValue,\r\n            instrumentIdValue: this.props.instrumentIdValue,\r\n            loading: false\r\n        }\r\n\r\n    }\r\n    onComboChange = (comboData, comboName) => {\r\n        let selectedRecordInstrumentForm = this.state.selectedRecordInstrumentForm || {};\r\n        if (comboData) {\r\n            selectedRecordInstrumentForm['ninstrumentcode'] = comboData;\r\n        } else {\r\n            selectedRecordInstrumentForm['ninstrumentcode'] = []\r\n        }\r\n        //Sync Child Component data with Parent Component     \r\n        this.props.onChildDataChange(selectedRecordInstrumentForm);\r\n        this.setState({ selectedRecordInstrumentForm });\r\n    }\r\n    onDateChange = (dateName, dateValue) => {\r\n        let selectedRecordInstrumentForm = this.state.selectedRecordInstrumentForm || {};\r\n        selectedRecordInstrumentForm[dateName] = dateValue;\r\n        if (dateName === \"dfromdate\" || dateName === \"dtodate\") {\r\n\r\n              //Sync Child Component data with Parent Component     \r\n              this.props.onChildDataChange(selectedRecordInstrumentForm);\r\n            this.setState({ selectedRecordInstrumentForm });\r\n        }\r\n\r\n    }\r\n\r\n    onComboCategoryChange = (event, fieldname) => {\r\n        if (event !== null) {\r\n            let uRL = \"\";\r\n            let inputData = [];\r\n            if (fieldname === \"ninstrumentcatcode\") {\r\n                inputData = {\r\n                    userinfo: this.props.userInfo,\r\n                    nflag: 2,\r\n                    ninstrumentcatcode: event.value,\r\n                    ncalibrationRequired: event.item.ncalibrationreq\r\n                }\r\n            }\r\n            this.setState({ loading: true })\r\n            rsapi.post(\"resultentrybysample/getResultUsedInstrumentNameCombo\", {\r\n                userinfo: this.props.userInfo,\r\n                nflag: 2,\r\n                ninstrumentcatcode: event.value,\r\n                ncalibrationRequired: event.item.ncalibrationreq\r\n            }).then(response => {\r\n                let TagInstrumentName = constructOptionList(response.data.InstrumentName || [], \"ninstrumentnamecode\",\r\n                    \"sinstrumentname\", undefined, undefined, undefined);\r\n                let TagListInstrumentName = TagInstrumentName.get(\"OptionList\")\r\n\r\n                // const updateInfo = {\r\n                //     typeName: DEFAULT_RETURN,\r\n                //     data: \r\n\r\n                //Sync Child Component data with Parent Component     \r\n                const selectedRecordInstrumentForm = this.state.selectedRecordInstrumentForm || {};\r\n                selectedRecordInstrumentForm['ninstrumentcatcode'] = event\r\n                selectedRecordInstrumentForm['ninstrumentnamecode'] = TagInstrumentName.has('DefaultValue')\r\n                    && TagInstrumentName.get(\"DefaultValue\") ?\r\n                    TagInstrumentName.get(\"DefaultValue\") : [];\r\n                selectedRecordInstrumentForm['ninstrumentcode'] = [];\r\n                if (selectedRecordInstrumentForm && selectedRecordInstrumentForm['ninstrumentnamecode'].length!==0) {\r\n                        rsapi.post(\"resultentrybysample/getResultUsedInstrumentIdCombo\", {\r\n                        userinfo: this.props.userInfo,\r\n                        nflag: 3,\r\n                        ninstrumentcatcode: event.value,\r\n                        ninstrumentnamecode: selectedRecordInstrumentForm['ninstrumentnamecode'].value,\r\n                        ncalibrationRequired: selectedRecordInstrumentForm['ninstrumentnamecode'].item.ncalibrationreq\r\n                \r\n                    }).then(response => {\r\n                        let TagInstrumentId = constructOptionList(response.data.InstrumentId || [], \"ninstrumentcode\",\r\n                            \"sinstrumentid\", undefined, undefined, undefined);\r\n                        let TagListInstrumentId = TagInstrumentId.get(\"OptionList\")\r\n                \r\n                                  \r\n                \r\n                        //Sync Child Component data with Parent Component     \r\n                        const selectedRecordInstrumentForm = this.state.selectedRecordInstrumentForm || {};\r\n                        selectedRecordInstrumentForm['ninstrumentnamecode'] = event\r\n                        selectedRecordInstrumentForm['ninstrumentcode'] = TagInstrumentId.has('DefaultValue')\r\n                            && TagInstrumentId.get(\"DefaultValue\")\r\n                            ? TagInstrumentId.get(\"DefaultValue\") : []\r\n                        this.props.onChildDataChange(selectedRecordInstrumentForm);\r\n                \r\n                        this.setState({\r\n                            instrumentIdValue: TagListInstrumentId,\r\n                            loading: false,\r\n                            instrumentnameValue: TagListInstrumentName,\r\n                            // selectedRecordInstrumentForm: {\r\n                            //     ...this.state.selectedRecordInstrumentForm,\r\n                            //     ninstrumentnamecode: event,\r\n                            //     ninstrumentcode: TagInstrumentId.has('DefaultValue')\r\n                            //         && TagInstrumentId.get(\"DefaultValue\")\r\n                            //         ? TagInstrumentId.get(\"DefaultValue\") : [],\r\n                            // }\r\n                            selectedRecordInstrumentForm: {\r\n                                ...this.state.selectedRecordInstrumentForm,\r\n                                ninstrumentcatcode: event,\r\n                                ninstrumentnamecode: TagInstrumentName.has('DefaultValue')\r\n                                    && TagInstrumentName.get(\"DefaultValue\") ?\r\n                                    TagInstrumentName.get(\"DefaultValue\") : [],\r\n                                    ninstrumentcode: TagInstrumentId.has('DefaultValue')\r\n                                    && TagInstrumentId.get(\"DefaultValue\")\r\n                                    ? TagInstrumentId.get(\"DefaultValue\") : [],\r\n                               // ninstrumentcode: [],\r\n                            }\r\n                        })\r\n                                    \r\n                    })\r\n                        \r\n                    \r\n                }\r\n                else {\r\n                    this.props.onChildDataChange(selectedRecordInstrumentForm);\r\n\r\n                    this.setState({\r\n                        // masterData: { ...this.props.Login.masterData, \r\n                        instrumentIdValue: [],\r\n                        instrumentnameValue: TagListInstrumentName\r\n                        // }\r\n                        ,\r\n                        loading: false,\r\n                        selectedRecordInstrumentForm: {\r\n                            ...this.state.selectedRecordInstrumentForm,\r\n                            ninstrumentcatcode: event,\r\n                            ninstrumentnamecode: TagInstrumentName.has('DefaultValue')\r\n                                && TagInstrumentName.get(\"DefaultValue\") ?\r\n                                TagInstrumentName.get(\"DefaultValue\") : [],\r\n                            ninstrumentcode: [],\r\n                        }\r\n                    })\r\n                }\r\n                //}\r\n                // this.props.updateStore(updateInfo); \r\n            })\r\n        \r\n                // .catch(error => {\r\n                //     if (error.response.status === 500) {\r\n                //         toast.error(error.message);\r\n                //     }\r\n                //     else {\r\n                //         toast.warn(error.response.data);\r\n                //     }\r\n                // })\r\n        }\r\n    }\r\n\r\n    onComboNameChange = (event, fieldname) => {\r\n        if (event !== null) {\r\n            let uRL = \"\";\r\n            let inputData = []; \r\n            if (fieldname === \"ninstrumentnamecode\") {\r\n                inputData = {\r\n                    userinfo: this.props.userInfo,\r\n                    nflag: 3,\r\n                    ninstrumentcatcode: this.state.selectedRecordInstrumentForm.ninstrumentcatcode.value,\r\n                    ninstrumentnamecode: event.value,\r\n                    ncalibrationRequired:  event.item.ncalibrationreq\r\n\r\n                }\r\n            }\r\n            this.setState({ loading: true })\r\n            rsapi.post(\"resultentrybysample/getResultUsedInstrumentIdCombo\", {\r\n                userinfo: this.props.userInfo,\r\n                nflag: 3,\r\n                ninstrumentcatcode: this.state.selectedRecordInstrumentForm.ninstrumentcatcode.value,\r\n                ninstrumentnamecode: event.value,\r\n                ncalibrationRequired: event.item.ncalibrationreq\r\n\r\n            }).then(response => {\r\n                    let TagInstrumentId = constructOptionList(response.data.InstrumentId || [], \"ninstrumentcode\",\r\n                        \"sinstrumentid\", undefined, undefined, undefined);\r\n                        let TagListInstrumentId = TagInstrumentId.get(\"OptionList\")\r\n\r\n                  \r\n\r\n                    //Sync Child Component data with Parent Component     \r\n                    const selectedRecordInstrumentForm = this.state.selectedRecordInstrumentForm || {};\r\n                    selectedRecordInstrumentForm['ninstrumentnamecode']=event\r\n                    selectedRecordInstrumentForm['ninstrumentcode']=TagInstrumentId.has('DefaultValue')\r\n                                                                    &&TagInstrumentId.get(\"DefaultValue\") \r\n                                                                    ? TagInstrumentId.get(\"DefaultValue\") : []\r\n                    this.props.onChildDataChange(selectedRecordInstrumentForm);\r\n\r\n                    this.setState({\r\n                        instrumentIdValue: TagListInstrumentId,\r\n                        loading: false,\r\n                        selectedRecordInstrumentForm: {\r\n                            ...this.state.selectedRecordInstrumentForm,\r\n                            ninstrumentnamecode: event,\r\n                            ninstrumentcode: TagInstrumentId.has('DefaultValue')\r\n                                             &&TagInstrumentId.get(\"DefaultValue\") \r\n                                             ? TagInstrumentId.get(\"DefaultValue\") : [],\r\n                        }\r\n                    })\r\n                    \r\n                })               \r\n        }\r\n    }\r\n    componentWillUnmount() {\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { isInstrumentInitialRender: false }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    componentDidUpdate(previousProps) {\r\n        if (this.props.selectedRecordInstrumentForm !== previousProps.selectedRecordInstrumentForm) {\r\n            this.setState({ selectedRecordInstrumentForm: this.props.selectedRecordInstrumentForm });\r\n        }\r\n        if (this.props.instrumentValue !== previousProps.instrumentValue) {\r\n            this.setState({ Instrument: this.props.instrumentValue });\r\n        }\r\n        if (this.props.instrumentcatValue !== previousProps.instrumentcatValue) {\r\n            this.setState({ instrumentcatValue: this.props.instrumentcatValue });\r\n        } \r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <>\r\n                <Preloader loading={this.state.loading} />\r\n                {Object.values(this.state.selectedRecordInstrumentForm).length > 0 ?\r\n                    <Row className=\"mb-4\">\r\n                        {this.props.needSubSample ?\r\n\r\n                            <Col md={12}>\r\n                                <MediaHeader className={`labelfont`}>{intl.formatMessage({ id: \"IDS_SAMPLEARNO\" })}: {\" \" + this.state.selectedRecordInstrumentForm.ssamplearno}</MediaHeader>\r\n                            </Col>\r\n                            :\r\n                            <Col md={12}>\r\n                                <MediaHeader className={`labelfont`}>{intl.formatMessage({ id: \"IDS_ARNO\" })}: {\" \" + this.state.selectedRecordInstrumentForm.sarno}</MediaHeader>\r\n                            </Col>\r\n                        }\r\n                        <Col md={12}>\r\n                            <MediaHeader className={`labelfont`}>{intl.formatMessage({ id: \"IDS_TEST\" })}: {\" \" + this.state.selectedRecordInstrumentForm.stestsynonym}</MediaHeader>\r\n                        </Col>\r\n                    </Row>\r\n                    : \"\"}\r\n\r\n                <Row>\r\n                    <Col md={12}>\r\n                        <FormSelectSearch\r\n                            formLabel={intl.formatMessage({ id: \"IDS_INSTRUMENTCATEGORY\" })}\r\n                            placeholder={intl.formatMessage({ id: \"IDS_SELECTRECORD\" })}\r\n                            isSearchable={false}\r\n                            name={\"ninstrumentcatcode\"}\r\n                            isDisabled={false}\r\n                            isMandatory={true}\r\n                            options={this.state.instrumentcatValue || []}\r\n                            optionId='ninstrumentcatcode'\r\n                            optionValue='sinstrumentcatname'\r\n                            value={this.state.selectedRecordInstrumentForm ? this.state.selectedRecordInstrumentForm.ninstrumentcatcode : \"\"}\r\n                            showOption={true}\r\n                            required={true}\r\n                            onChange={(event) => this.onComboCategoryChange(event, 'ninstrumentcatcode')}\r\n                            isMulti={false}\r\n                            closeMenuOnSelect={true}\r\n                        />\r\n                    </Col>\r\n\r\n                    <Col md={12}>\r\n                        <FormSelectSearch\r\n                            formLabel={intl.formatMessage({ id: \"IDS_INSTRUMENTNAME\" })}\r\n                            placeholder={intl.formatMessage({ id: \"IDS_SELECTRECORD\" })}\r\n                            isSearchable={false}\r\n                            name={\"ninstrumentnamecode\"}\r\n                            isDisabled={false}\r\n                            isMandatory={true}\r\n                            options={this.state.instrumentnameValue || []}\r\n                            optionId='ninstrumentnamecode'\r\n                            optionValue='sinstrumentname'\r\n                            value={this.state.selectedRecordInstrumentForm ? this.state.selectedRecordInstrumentForm.ninstrumentnamecode : \"\"}\r\n                            showOption={true}\r\n                            required={true}\r\n                            onChange={(event) => this.onComboNameChange(event, 'ninstrumentnamecode')}\r\n                            isMulti={false}\r\n                            closeMenuOnSelect={true}\r\n                        />\r\n                    </Col>\r\n\r\n                    <Col md={12}>\r\n                        <FormSelectSearch\r\n                            formLabel={intl.formatMessage({ id: \"IDS_INSTRUMENTID\" })}\r\n                            placeholder={intl.formatMessage({ id: \"IDS_SELECTRECORD\" })}\r\n                            isSearchable={false}\r\n                            name={\"ninstrumentcode\"}\r\n                            isDisabled={false}\r\n                            isMandatory={true}\r\n                            options={this.state.instrumentIdValue || []}\r\n                            optionId='ninstrumentcode'\r\n                            optionValue='sinstrumentid'\r\n                            value={this.state.selectedRecordInstrumentForm ? this.state.selectedRecordInstrumentForm.ninstrumentcode : \"\"}\r\n                            showOption={true}\r\n                            required={true}\r\n                            onChange={(event) => this.onComboChange(event, 'ninstrumentcode')}\r\n                            isMulti={false}\r\n                            closeMenuOnSelect={true}\r\n                        />\r\n                    </Col>\r\n\r\n                    <Col md={6}>\r\n                        <DateTimePicker\r\n                            name={\"dfromdate\"}\r\n                            label={intl.formatMessage({ id: \"IDS_FROM\" })}\r\n                            className='form-control'\r\n                            placeholderText=\"Select date..\"\r\n                            selected={this.state.selectedRecordInstrumentForm[\"dfromdate\"]}\r\n                            value={this.state.selectedRecordInstrumentForm[\"dfromdate\"]}\r\n                            //dateFormat={\"dd/MM/yyyy HH:mm:ss\"}\r\n                            dateFormat={this.props.userInfo.ssitedatetime}\r\n                            timeInputLabel={this.props.intl.formatMessage({ id: \"IDS_TIME\" })}\r\n                            showTimeInput={true}\r\n                            isClearable={false}\r\n                            isMandatory={true}\r\n                            required={true}\r\n                            onChange={date => this.onDateChange(\"dfromdate\", date)}\r\n\r\n                        />\r\n                    </Col>\r\n                    {/* <Col md={6}>\r\n                        <FormSelectSearch\r\n                            name={\"ntzfromdate\"}\r\n                            formLabel={intl.formatMessage({ id: \"IDS_TIMEZONE\" })}\r\n                            placeholder={intl.formatMessage({ id: \"IDS_SELECTRECORD\" })}\r\n                            options={this.props.timeZoneListData}\r\n                            optionId=\"ntimezonecode\"\r\n                            optionValue=\"stimezoneid\"\r\n                            value={this.props.selectedRecordInstrumentForm.ntzfromdate}\r\n                            defaultValue={this.props.selectedRecordInstrumentForm.ntzfromdate}\r\n                            isMandatory={true}\r\n                            isMulti={false}\r\n                            isSearchable={true}\r\n                            isClearable={false}\r\n                            isDisabled={false}\r\n                            closeMenuOnSelect={true}\r\n                            alphabeticalSort={true}\r\n                            onChange={(event) => this.props.onComboChange(event, 'ntzfromdate')}\r\n                        />\r\n                    </Col> */}\r\n                    <Col md={6}>\r\n                        <DateTimePicker\r\n                            name={\"dtodate\"}\r\n                            label={intl.formatMessage({ id: \"IDS_TO\" })}\r\n                            className='form-control'\r\n                            placeholderText=\"Select date..\"\r\n                            selected={this.state.selectedRecordInstrumentForm[\"dtodate\"]}\r\n                            value={this.state.selectedRecordInstrumentForm[\"dtodate\"]}\r\n                            //  dateFormat={\"dd/MM/yyyy HH:mm:ss\"}\r\n                            dateFormat={this.props.userInfo.ssitedatetime}\r\n                            timeInputLabel={this.props.intl.formatMessage({ id: \"IDS_TIME\" })}\r\n                            showTimeInput={true}\r\n                            isClearable={false}\r\n                            isMandatory={true}\r\n                            required={true}\r\n                            onChange={date => this.onDateChange(\"dtodate\", date)}\r\n\r\n                        />\r\n                    </Col>\r\n                    {/* <Col md={6}>\r\n                        <FormSelectSearch\r\n                            name={\"ntztodate\"}\r\n                            formLabel={intl.formatMessage({ id: \"IDS_TIMEZONE\" })}\r\n                            placeholder={intl.formatMessage({ id: \"IDS_SELECTRECORD\" })}\r\n                            options={this.props.timeZoneListData}\r\n                            optionId=\"ntimezonecode\"\r\n                            optionValue=\"stimezoneid\"\r\n                            value={this.props.selectedRecordInstrumentForm.ntztodate}\r\n                            defaultValue={this.props.selectedRecordInstrumentForm.ntztodate}\r\n                            isMandatory={true}\r\n                            isMulti={false}\r\n                            isSearchable={true}\r\n                            isClearable={false}\r\n                            isDisabled={false}\r\n                            closeMenuOnSelect={true}\r\n                            alphabeticalSort={true}\r\n                            onChange={(event) => this.props.onComboChange(event, 'ntztodate')}\r\n                        />\r\n                    </Col> */}\r\n                </Row>\r\n            </>\r\n        )\r\n    }\r\n\r\n}\r\n// export default injectIntl(ResultEntryInstrumentForm);\r\nexport default connect(null, {\r\n    updateStore\r\n\r\n})(injectIntl(ResultEntryInstrumentForm));\r\n"]},"metadata":{},"sourceType":"module"}