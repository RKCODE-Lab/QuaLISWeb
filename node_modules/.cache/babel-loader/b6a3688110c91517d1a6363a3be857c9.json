{"ast":null,"code":"var _jsxFileName = \"D:\\\\LIMSWFH\\\\LIMSPOSTGRESQL\\\\QuaLISWeb\\\\src\\\\components\\\\data-grid\\\\DataGridWithMultipleGrid.jsx\";\nimport React from 'react';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport { Button, Nav, Image } from 'react-bootstrap';\nimport { Grid, GridColumn as Column, GridToolbar, GridColumnMenuFilter, GridNoRecords, getSelectedState } from '@progress/kendo-react-grid';\nimport { GridPDFExport } from '@progress/kendo-react-pdf';\nimport { ExcelExport } from '@progress/kendo-react-excel-export';\nimport ConfirmDialog from '../confirm-alert/confirm-alert.component';\nimport SimpleGrid from './SimpleGrid';\nimport { Row, Col, Card, FormGroup, FormLabel } from 'react-bootstrap';\nimport { AtTableWrap, FormControlStatic, FontIconWrap } from '../data-grid/data-grid.styles';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faCheck, faTrashAlt, faPencilAlt, faThumbsUp, faCopy, faPlus, faSync, faFileExcel, faFilePdf, faCloudDownloadAlt, faRedo, faEye, faRocket } from '@fortawesome/free-solid-svg-icons';\nimport ColumnMenu from './ColumnMenu'; // import { Tooltip } from '@progress/kendo-react-tooltip';\n\nimport reject from \"../../assets/image/reject.svg\";\nimport CustomSwitch from '../custom-switch/custom-switch.component'; // import '../../assets/styles/unicode-font.css';\n\nimport parse from 'html-react-parser';\nimport { toast } from 'react-toastify';\nimport FormCheckbox from '../form-checkbox/form-checkbox.component';\nimport messages_en from '../../assets/translations/en.json';\nimport messages_de from '../../assets/translations/de.json';\nimport { loadMessages, LocalizationProvider } from '@progress/kendo-react-intl';\nimport { connect } from 'react-redux';\nimport { process } from '@progress/kendo-data-query';\nimport ReactTooltip from 'react-tooltip';\nimport { getActionIcon } from '../HoverIcons';\nimport ConfirmMessage from '../../components/confirm-alert/confirm-message.component';\nimport messages_ru from '../../assets/translations/ru.json';\nimport messages_tg from '../../assets/translations/tg.json';\nimport SimpleGridWithSelection from './SimpleGridWithSelection';\nconst messages = {\n  'en-US': messages_en,\n  'ko-KR': messages_de,\n  'ru-RU': messages_ru,\n  'tg-TG': messages_tg\n};\n\nclass DataGridWithMultipleGrid extends React.Component {\n  constructor(_props) {\n    super(_props);\n\n    this.detailBand = props => {\n      return /*#__PURE__*/React.createElement(Row, {\n        bsPrefix: \"margin_class\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(Col, {\n        md: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 17\n        }\n      }, this.props.hasChild ? /*#__PURE__*/React.createElement(SimpleGridWithSelection, {\n        extractedColumnList: this.props.childColumnList,\n        dataState: this.props.dataState,\n        childList: this.props.childList[props.dataItem[this.props.childMappingField]] || [],\n        childDataResult: this.props.childDataResult,\n        childSelectionChange: this.props.childSelectionChange,\n        headerSelectionChange: this.props.childHeaderSelectionChange,\n        selectAll: this.props.childSelectAll,\n        hasSubChild: this.props.hasSubChild,\n        subChildDataResult: this.props.subChildDataResult && this.props.subChildDataResult || [],\n        subChildColumnList: this.props.subChildColumnList //    expandField=\"expanded\"\n        ,\n        childHandleExpandChange: this.props.childHandleExpandChange,\n        subChildSelectionChange: this.props.subChildSelectionChange,\n        subChildList: this.props.subChildList || [],\n        subChildMappingField: this.props.subChildMappingField,\n        subChildHeaderSelectionChange: this.props.subChildHeaderSelectionChange,\n        subChildSelectAll: this.props.subChildSelectAll,\n        selectedsubcild: this.props.selectedsubcild,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 25\n        }\n      }) : \"\"), \" \");\n    };\n\n    this.expandChange = event => {\n      const isExpanded = true; //     event.dataItem.expanded === undefined ?\n      //         event.dataItem.aggregates : event.dataItem.expanded;\n      // if (this.props.hasChild && event.value === true) {\n\n      event.dataItem.expanded = true;\n      this.props.handleExpandChange(event, this.props.dataState); // }\n      // else {\n      //     event.dataItem.expanded = !isExpanded;\n\n      this.setState({\n        isExpanded\n      }); // }\n    };\n\n    this.confirmMessage = new ConfirmMessage();\n  }\n\n  columnProps(field) {\n    if (!this.props.hideColumnFilter) {\n      return {\n        field: field,\n        columnMenu: ColumnMenu,\n        headerClassName: this.isColumnActive(field, this.props.dataState) ? 'active' : ''\n      };\n    }\n  }\n\n  isColumnActive(field, dataState) {\n    return GridColumnMenuFilter.active(field, dataState.filter);\n  }\n\n  render() {\n    const methodUrl = this.props.methodUrl ? this.props.methodUrl : this.props.inputParam && this.props.inputParam.methodUrl;\n    const releaseId = this.props.controlMap && this.props.controlMap.has(\"COA\".concat(methodUrl)) && this.props.controlMap.get(\"COA\".concat(methodUrl)).ncontrolcode;\n    const pageSizes = this.props.pageSizes ? this.props.pageSizes : this.props.Login.settings && this.props.Login.settings[15].split(\",\").map(setting => parseInt(setting));\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(ReactTooltip, {\n      place: \"bottom\",\n      id: \"tooltip-grid-wrap\",\n      globalEventOff: \"click\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(AtTableWrap, {\n      className: \"at-list-table\",\n      actionColWidth: this.props.actionColWidth ? this.props.actionColWidth : \"150px\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(LocalizationProvider, {\n      language: \"lang\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Grid, Object.assign({\n      className: this.props.dataResult && this.props.dataResult.length > 0 || this.props.extractedColumnList && this.props.extractedColumnList.length > 0 ? \"active-paging\" : \"no-paging\",\n      style: {\n        height: this.props.gridHeight,\n        width: this.props.gridWidth\n      },\n      sortable: true,\n      resizable: true,\n      reorderable: false,\n      scrollable: this.props.scrollable,\n      pageable: this.props.pageable ? {\n        buttonCount: 5,\n        pageSizes: pageSizes,\n        previousNext: false\n      } : \"\",\n      groupable: this.props.groupable ? true : false,\n      detail: this.props.hideDetailBand ? false : this.detailBand //    expandField=\"expanded\"\n      //     onExpandChange={this.expandChange}\n      ,\n      data: this.props.dataResult,\n      total: this.props.total\n    }, this.props.dataState, {\n      selectedField: \"selected\",\n      onRowClick: this.props.handleRowClick,\n      onSelectionChange: this.props.selectionChange,\n      onHeaderSelectionChange: this.props.headerSelectionChange,\n      onDataStateChange: this.props.dataStateChange,\n      selectable: {\n        enabled: true,\n        drag: false,\n        cell: false,\n        mode: 'multiple'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 29\n      }\n    }), /*#__PURE__*/React.createElement(GridNoRecords, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 33\n      }\n    }, this.props.intl.formatMessage({\n      id: \"IDS_NORECORDSAVAILABLE\"\n    })), this.props.isToolBarRequired ? /*#__PURE__*/React.createElement(GridToolbar, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 29\n      }\n    }, this.props.isReleaseRequired === false ? \"\" : /*#__PURE__*/React.createElement(Button, {\n      className: \"btn btn-icon-rounded btn-circle solid-blue\",\n      variant: \"link\",\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_RELEASE\"\n      }),\n      \"data-for\": \"tooltip-grid-wrap\",\n      hidden: this.props.userRoleControlRights && this.props.userRoleControlRights.indexOf(releaseId) === -1,\n      onClick: () => this.props.releaseRecord(releaseId),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faRocket,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 49\n      }\n    })), this.props.isRefreshRequired === false ? \"\" : /*#__PURE__*/React.createElement(Button, {\n      className: \"btn btn-circle outline-grey\",\n      variant: \"link\",\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_REFRESH\"\n      }),\n      \"data-for\": \"tooltip-grid-wrap\",\n      onClick: () => this.props.reloadData(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faSync,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 49\n      }\n    }))) : \"\", /*#__PURE__*/React.createElement(Column, {\n      field: \"selected\",\n      width: \"50px\",\n      title: this.props.title // headerSelectionValue={this.props.selectAll}\n      ,\n      headerSelectionValue: this.props.dataResult && this.props.dataResult.every(dd => {\n        return dd.selected === true;\n      }) ? true : false,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 33\n      }\n    }), this.props.extractedColumnList.map((item, index) => /*#__PURE__*/React.createElement(Column, Object.assign({\n      key: index,\n      title: this.props.intl.formatMessage({\n        id: item.idsName\n      })\n    }, this.columnProps(item.dataField), {\n      width: item.width,\n      cell: row => /*#__PURE__*/React.createElement(\"td\", {\n        \"data-tip\": row[\"dataItem\"][item.dataField],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 198,\n          columnNumber: 37\n        }\n      }, item.isIdsField ? /*#__PURE__*/React.createElement(FormattedMessage, {\n        id: row[\"dataItem\"][item.dataField],\n        defaultMessage: row[\"dataItem\"][item.dataField],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 200,\n          columnNumber: 45\n        }\n      }) : row[\"dataItem\"][item.dataField]),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 37\n      }\n    })))))));\n  }\n\n  componentDidUpdate() {\n    ReactTooltip.rebuild();\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    Login: state.Login\n  };\n};\n\nexport default connect(mapStateToProps, undefined)(injectIntl(DataGridWithMultipleGrid));","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/components/data-grid/DataGridWithMultipleGrid.jsx"],"names":["React","FormattedMessage","injectIntl","Button","Nav","Image","Grid","GridColumn","Column","GridToolbar","GridColumnMenuFilter","GridNoRecords","getSelectedState","GridPDFExport","ExcelExport","ConfirmDialog","SimpleGrid","Row","Col","Card","FormGroup","FormLabel","AtTableWrap","FormControlStatic","FontIconWrap","FontAwesomeIcon","faCheck","faTrashAlt","faPencilAlt","faThumbsUp","faCopy","faPlus","faSync","faFileExcel","faFilePdf","faCloudDownloadAlt","faRedo","faEye","faRocket","ColumnMenu","CustomSwitch","parse","toast","FormCheckbox","messages_en","messages_de","loadMessages","LocalizationProvider","connect","process","ReactTooltip","getActionIcon","ConfirmMessage","messages_ru","messages_tg","SimpleGridWithSelection","messages","DataGridWithMultipleGrid","Component","constructor","props","detailBand","hasChild","childColumnList","dataState","childList","dataItem","childMappingField","childDataResult","childSelectionChange","childHeaderSelectionChange","childSelectAll","hasSubChild","subChildDataResult","subChildColumnList","childHandleExpandChange","subChildSelectionChange","subChildList","subChildMappingField","subChildHeaderSelectionChange","subChildSelectAll","selectedsubcild","expandChange","event","isExpanded","expanded","handleExpandChange","setState","confirmMessage","columnProps","field","hideColumnFilter","columnMenu","headerClassName","isColumnActive","active","filter","render","methodUrl","inputParam","releaseId","controlMap","has","concat","get","ncontrolcode","pageSizes","Login","settings","split","map","setting","parseInt","actionColWidth","dataResult","length","extractedColumnList","height","gridHeight","width","gridWidth","scrollable","pageable","buttonCount","previousNext","groupable","hideDetailBand","total","handleRowClick","selectionChange","headerSelectionChange","dataStateChange","enabled","drag","cell","mode","intl","formatMessage","id","isToolBarRequired","isReleaseRequired","userRoleControlRights","indexOf","releaseRecord","isRefreshRequired","reloadData","title","every","dd","selected","item","index","idsName","dataField","row","isIdsField","componentDidUpdate","rebuild","mapStateToProps","state","undefined"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { FormattedMessage, injectIntl } from 'react-intl';\r\nimport { Button, Nav, Image } from 'react-bootstrap';\r\nimport { Grid, GridColumn as Column, GridToolbar, GridColumnMenuFilter, GridNoRecords ,getSelectedState} from '@progress/kendo-react-grid';\r\nimport { GridPDFExport } from '@progress/kendo-react-pdf';\r\nimport { ExcelExport } from '@progress/kendo-react-excel-export';\r\nimport ConfirmDialog from '../confirm-alert/confirm-alert.component';\r\nimport SimpleGrid from './SimpleGrid';\r\nimport { Row, Col, Card, FormGroup, FormLabel } from 'react-bootstrap';\r\nimport { AtTableWrap, FormControlStatic, FontIconWrap } from '../data-grid/data-grid.styles';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport {\r\n    faCheck, faTrashAlt, faPencilAlt, faThumbsUp,\r\n    faCopy, faPlus, faSync, faFileExcel, faFilePdf, faCloudDownloadAlt, faRedo, faEye, faRocket\r\n} from '@fortawesome/free-solid-svg-icons';\r\nimport ColumnMenu from './ColumnMenu';\r\n// import { Tooltip } from '@progress/kendo-react-tooltip';\r\nimport reject from '../../assets/image/reject.svg'\r\nimport CustomSwitch from '../custom-switch/custom-switch.component';// import '../../assets/styles/unicode-font.css';\r\nimport parse from 'html-react-parser';\r\nimport { toast } from 'react-toastify';\r\nimport FormCheckbox from '../form-checkbox/form-checkbox.component';\r\nimport messages_en from '../../assets/translations/en.json';\r\nimport messages_de from '../../assets/translations/de.json';\r\nimport { loadMessages, LocalizationProvider } from '@progress/kendo-react-intl';\r\nimport { connect } from 'react-redux';\r\nimport { process } from '@progress/kendo-data-query';\r\nimport ReactTooltip from 'react-tooltip';\r\nimport { getActionIcon } from '../HoverIcons';\r\nimport ConfirmMessage from '../../components/confirm-alert/confirm-message.component';\r\nimport messages_ru from '../../assets/translations/ru.json';\r\nimport messages_tg from '../../assets/translations/tg.json';\r\nimport SimpleGridWithSelection from './SimpleGridWithSelection';\r\n\r\nconst messages = {\r\n    'en-US': messages_en,\r\n    'ko-KR': messages_de,\r\n    'ru-RU': messages_ru,\r\n    'tg-TG': messages_tg\r\n}\r\n\r\nclass DataGridWithMultipleGrid extends React.Component {\r\n\r\n    _pdfExport;\r\n    _excelExport;\r\n    constructor(props){\r\n        super(props);\r\n        this.confirmMessage = new ConfirmMessage();\r\n    }\r\n\r\n\r\n    detailBand = (props) => {\r\n        return (\r\n            <Row bsPrefix=\"margin_class\">\r\n                <Col md={12}>\r\n                {this.props.hasChild ?\r\n                        <SimpleGridWithSelection\r\n                            extractedColumnList={this.props.childColumnList}\r\n                            dataState={this.props.dataState}\r\n                            childList={this.props.childList[(props.dataItem[this.props.childMappingField])] || []}\r\n                            childDataResult={this.props.childDataResult}\r\n                            childSelectionChange={this.props.childSelectionChange}\r\n                            headerSelectionChange={this.props.childHeaderSelectionChange}\r\n                            selectAll={this.props.childSelectAll}\r\n                            hasSubChild={this.props.hasSubChild}\r\n                            subChildDataResult={this.props.subChildDataResult && this.props.subChildDataResult || []}\r\n                            subChildColumnList={this.props.subChildColumnList}\r\n                        //    expandField=\"expanded\"\r\n                            childHandleExpandChange={this.props.childHandleExpandChange}\r\n                            subChildSelectionChange={this.props.subChildSelectionChange}\r\n                            subChildList={this.props.subChildList || []}\r\n                            subChildMappingField={this.props.subChildMappingField}\r\n                            subChildHeaderSelectionChange={this.props.subChildHeaderSelectionChange}\r\n                            subChildSelectAll={this.props.subChildSelectAll}\r\n                            selectedsubcild={this.props.selectedsubcild}\r\n                             />\r\n                            :\r\n                            \"\"}\r\n                </Col> </Row>\r\n        )\r\n    }\r\n\r\n\r\n\r\n    expandChange = (event) => {\r\n         const isExpanded =true\r\n        //     event.dataItem.expanded === undefined ?\r\n        //         event.dataItem.aggregates : event.dataItem.expanded;\r\n\r\n        // if (this.props.hasChild && event.value === true) {\r\n            event.dataItem.expanded = true;\r\n            this.props.handleExpandChange(event, this.props.dataState)\r\n        // }\r\n        // else {\r\n        //     event.dataItem.expanded = !isExpanded;\r\n             this.setState({ isExpanded });\r\n        // }\r\n    }\r\n\r\n    columnProps(field) {\r\n        if (!this.props.hideColumnFilter) {\r\n            return {\r\n                field: field,\r\n                columnMenu: ColumnMenu,\r\n                headerClassName: this.isColumnActive(field, this.props.dataState) ? 'active' : ''\r\n            };\r\n        }\r\n    }\r\n\r\n    isColumnActive(field, dataState) {\r\n        return GridColumnMenuFilter.active(field, dataState.filter)\r\n    }\r\n\r\n\r\n    render() {\r\n        const methodUrl = this.props.methodUrl ? this.props.methodUrl : (this.props.inputParam && this.props.inputParam.methodUrl);\r\n\r\n        const releaseId = this.props.controlMap && this.props.controlMap.has(\"COA\".concat(methodUrl))\r\n        && this.props.controlMap.get(\"COA\".concat(methodUrl)).ncontrolcode;\r\n        const pageSizes = this.props.pageSizes ? this.props.pageSizes : this.props.Login.settings && this.props.Login.settings[15].split(\",\").map(setting => parseInt(setting))\r\n        return (\r\n            <>\r\n                <ReactTooltip place=\"bottom\" id=\"tooltip-grid-wrap\" globalEventOff='click' />\r\n                <AtTableWrap className=\"at-list-table\" actionColWidth={this.props.actionColWidth ? this.props.actionColWidth : \"150px\"} >\r\n                    <LocalizationProvider language=\"lang\">\r\n\r\n                            <Grid\r\n                                className={((this.props.dataResult && this.props.dataResult.length > 0) || (this.props.extractedColumnList && this.props.extractedColumnList.length > 0)) ? \"active-paging\" : \"no-paging\"}\r\n                                style={{ height: this.props.gridHeight, width: this.props.gridWidth }}\r\n                                sortable\r\n                                resizable\r\n                                reorderable={false}\r\n                                scrollable={this.props.scrollable}\r\n                                pageable={this.props.pageable ? { buttonCount: 5, pageSizes: pageSizes, previousNext: false } : \"\"}\r\n                                groupable={this.props.groupable ? true : false}\r\n                                detail={this.props.hideDetailBand ? false : this.detailBand}\r\n                            //    expandField=\"expanded\"\r\n                           //     onExpandChange={this.expandChange}\r\n                                data={this.props.dataResult}\r\n                                total={this.props.total}\r\n                                {...this.props.dataState}\r\n                                selectedField=\"selected\"\r\n                                onRowClick={this.props.handleRowClick}\r\n                                onSelectionChange={this.props.selectionChange}\r\n                                onHeaderSelectionChange={this.props.headerSelectionChange}\r\n                            onDataStateChange={this.props.dataStateChange}\r\n                            selectable={{\r\n                                enabled: true,\r\n                                drag: false,\r\n                                cell: false,\r\n                                mode: 'multiple'\r\n                              }} \r\n                        >\r\n                                <GridNoRecords>\r\n                                {this.props.intl.formatMessage({ id: \"IDS_NORECORDSAVAILABLE\" })}\r\n                            </GridNoRecords>\r\n                            {this.props.isToolBarRequired ?\r\n                            <GridToolbar>\r\n\r\n                                        {this.props.isReleaseRequired === false ? \"\" :\r\n                                            <Button className=\"btn btn-icon-rounded btn-circle solid-blue\" variant=\"link\"\r\n                                                data-tip={this.props.intl.formatMessage({ id: \"IDS_RELEASE\" })}\r\n                                                data-for=\"tooltip-grid-wrap\"\r\n                                                hidden={this.props.userRoleControlRights && this.props.userRoleControlRights.indexOf(releaseId) === -1}\r\n                                                onClick={() => this.props.releaseRecord(releaseId)}>\r\n                                                <FontAwesomeIcon icon={faRocket} />\r\n                                            </Button>\r\n                                        }\r\n                                        {this.props.isRefreshRequired === false ? \"\" :\r\n                                            <Button className=\"btn btn-circle outline-grey\" variant=\"link\"\r\n                                                data-tip={this.props.intl.formatMessage({ id: \"IDS_REFRESH\" })}\r\n                                                data-for=\"tooltip-grid-wrap\"\r\n                                                onClick={() => this.props.reloadData()}>\r\n                                                <FontAwesomeIcon icon={faSync} />\r\n                                            </Button>\r\n                                }\r\n                            </GridToolbar>\r\n                            : \"\"}\r\n                                \r\n                                <Column\r\n                            field=\"selected\"\r\n                            width=\"50px\"\r\n                            title={this.props.title}\r\n                          // headerSelectionValue={this.props.selectAll}\r\n                          headerSelectionValue={this.props.dataResult&&this.props.dataResult.every((dd) => {\r\n                            return dd.selected === true\r\n                        }) ? true : false\r\n                        }\r\n                                             \r\n                        />\r\n\r\n                                {this.props.extractedColumnList.map((item, index) =>\r\n                                    <Column key={index}\r\n                                    title={this.props.intl.formatMessage({ id: item.idsName })}\r\n                                    {...this.columnProps(item.dataField)}\r\n                                width={item.width}\r\n                                cell={(row) => (\r\n                                    <td data-tip={row[\"dataItem\"][item.dataField]}>\r\n                                        {item.isIdsField ?\r\n                                            <FormattedMessage id={row[\"dataItem\"][item.dataField]} defaultMessage={row[\"dataItem\"][item.dataField]} />\r\n                                            : row[\"dataItem\"][item.dataField]}\r\n                                    </td>\r\n                                )} />\r\n                        )}\r\n\r\n                            \r\n                            </Grid>\r\n                    </LocalizationProvider >\r\n                    \r\n                </AtTableWrap >\r\n            </>\r\n        );\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        ReactTooltip.rebuild();\r\n    }\r\n}\r\nconst mapStateToProps = state => {\r\n    return ({ Login: state.Login })\r\n}\r\n\r\n\r\n\r\nexport default connect(mapStateToProps, undefined)(injectIntl(DataGridWithMultipleGrid));"]},"metadata":{},"sourceType":"module"}