{"ast":null,"code":"var _jsxFileName = \"E:\\\\WorkingFolder\\\\React_Postgres\\\\ALPD\\\\branches\\\\SOURCE-512\\\\QuaLISWeb\\\\src\\\\pages\\\\batchruncreation\\\\AddSample.js\";\nimport React, { Component } from 'react';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport { Button, Row, Col } from 'react-bootstrap';\nimport DataGridWithSelection from '../../components/data-grid/DataGridWithSelection';\nimport { faSave } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { MediaHeader } from '../product/product.styled';\nimport { toast } from 'react-toastify';\nimport { process } from \"@progress/kendo-data-query\"; // ADDed by Vignesh R-ALPD-5137\n//Changed functional component into class component\n\nclass AddSample extends Component {\n  constructor(props) {\n    super(props);\n\n    this.headerSelectionChange = event => {\n      const checked = event.syntheticEvent.target.checked;\n      const eventData = event.target.props.data.hasOwnProperty('data') ? event.target.props.data.data || [] : event.target.props.data || [];\n      let samples = //event.target.props.data \n      this.state.samples || [];\n      let addedSamplesList = this.state.addedSamplesList || [];\n\n      if (checked) {\n        const data = samples.map(item => {\n          const matchingData = eventData.find(dataItem => dataItem.ntransactiontestcode === item.ntransactiontestcode);\n\n          if (matchingData) {\n            const existingIndex = addedSamplesList.findIndex(x => x.ntransactiontestcode === item.ntransactiontestcode);\n\n            if (existingIndex === -1) {\n              const newItem = { ...item,\n                selected: true,\n                jsondata: {\n                  samplelist: item\n                },\n                jsonuidata: {\n                  samplelist: item\n                }\n              };\n              addedSamplesList.push(newItem);\n            } else {\n              const oldItem = { ...addedSamplesList[existingIndex],\n                selected: true\n              };\n              const newItem = { ...oldItem,\n                selected: true,\n                jsondata: {\n                  samplelist: oldItem\n                },\n                jsonuidata: {\n                  samplelist: oldItem\n                }\n              };\n              addedSamplesList.push(newItem);\n            }\n\n            return { ...item,\n              selected: true\n            };\n          } else {\n            return { ...item,\n              selected: item.selected ? true : false\n            };\n          }\n        });\n        this.setState({\n          samples: data,\n          addedSamplesList,\n          addComponentDataListCopy: this.valiateCopy(this.state.addedSamplesListSortedList || [], data || [], addedSamplesList || []),\n          addSelectAll: this.valiateCheckAll(process(data || [], this.state.dataState)),\n          addSelectAll: checked,\n          deleteSelectAll: false\n        });\n      } else {\n        let addedSamplesList = this.state.addedSamplesList || [];\n        let deletedListdData = this.state.deletedList || [];\n        const data = samples.map(x => {\n          const matchedItem = eventData.find(item => x.ntransactiontestcode === item.ntransactiontestcode);\n\n          if (matchedItem) {\n            addedSamplesList = addedSamplesList.filter(item1 => item1.npreregno !== matchedItem.npreregno);\n            deletedListdData = deletedListdData.filter(item1 => item1.npreregno !== matchedItem.npreregno);\n            matchedItem.selected = false;\n            return matchedItem;\n          }\n\n          return x;\n        });\n        this.setState({\n          samples: data,\n          addedSamplesList: addedSamplesList,\n          deletedList: deletedListdData,\n          addSelectAll: this.valiateCheckAll(addedSamplesList),\n          deleteSelectAll: this.valiateCheckAll(addedSamplesList),\n          addSelectAll: checked,\n          deleteSelectAll: false,\n          addComponentDataListCopy: this.valiateCopy(this.state.addedSamplesListSortedList || [], data || [], addedSamplesList || [])\n        });\n      }\n    };\n\n    this.addSaveDataGrid = () => {\n      let filterdata1 = this.state.dataState ? process(this.state.addComponentDataListCopy || [], { ...this.state.dataState,\n        take: this.state.samples.length\n      }).data : [];\n      let sortListedData1 = filterdata1.filter(x => this.state.addedSamplesList.some(item => item.ntransactiontestcode === x.ntransactiontestcode));\n      let exists = this.state.dataState && this.state.dataState.filter !== null && this.state.dataState.filter !== undefined ? sortListedData1.length > 0 ? true : false : true;\n      let sortListedDataList = this.state.addedSamplesList && this.state.addedSamplesList.filter(addedItem => process(this.state.samples || [], this.state.dataState).data.some(item => addedItem.ntransactiontestcode === item.ntransactiontestcode)) || [];\n\n      if (sortListedDataList && sortListedDataList.length > 0 && exists) {\n        let addedSamplesListSortedList = [];\n        let updatedList = [];\n        let ListedData = [];\n        let sortListedData = [];\n        let updatedDataList = [];\n\n        if (this.state.dataState && this.state.dataState.filter !== null && this.state.dataState.filter !== undefined) {\n          let filterdata = process(this.state.addComponentDataListCopy || this.state.samples || [], this.state.dataState).data || [];\n          sortListedData = filterdata.filter(x => this.state.addedSamplesList.some(item => item.ntransactiontestcode === x.ntransactiontestcode));\n          updatedDataList = this.state.addedSamplesList.filter(item => !sortListedData.some(addedItem => addedItem.ntransactiontestcode === item.ntransactiontestcode));\n          updatedList = process(this.state.addComponentDataListCopy || this.state.samples || [], { ...this.state.dataState,\n            skip: 0,\n            take: this.state.samples.length\n          }).data.filter(item => !sortListedData.some(addedItem => addedItem.ntransactiontestcode === item.ntransactiontestcode));\n          updatedDataList.map(x => {\n            if (x.selected) {\n              ListedData.push(x);\n            }\n          });\n        } else {\n          ListedData = this.state.addedSamplesList.filter(addedItem => !process(this.state.samples || [], this.state.dataState).data.some(item => addedItem.ntransactiontestcode === item.ntransactiontestcode)) || [];\n          sortListedData = this.state.addedSamplesList.filter(addedItem => process(this.state.samples || [], this.state.dataState).data.some(item => addedItem.ntransactiontestcode === item.ntransactiontestcode));\n          updatedList = this.state.samples.filter(item => !sortListedData.some(addedItem => addedItem.ntransactiontestcode === item.ntransactiontestcode));\n        }\n\n        if (this.state.addedSamplesListSortedList.length > 0) {\n          this.state.addedSamplesListSortedList.map(item => {\n            const newItem = JSON.parse(JSON.stringify(item));\n            newItem[\"jsondata\"] = {};\n            newItem[\"jsonuidata\"] = {};\n            newItem[\"selected\"] = false;\n            newItem[\"jsondata\"]['samplelist'] = { ...item,\n              selected: false\n            };\n            newItem[\"jsonuidata\"]['samplelist'] = { ...item,\n              selected: false\n            };\n            addedSamplesListSortedList.push(newItem);\n          });\n        }\n\n        sortListedData.map(item => {\n          const newItem = JSON.parse(JSON.stringify(item));\n          newItem[\"jsondata\"] = {};\n          newItem[\"jsonuidata\"] = {};\n          newItem[\"selected\"] = false;\n          newItem[\"jsondata\"]['samplelist'] = { ...item,\n            selected: false\n          };\n          newItem[\"jsonuidata\"]['samplelist'] = { ...item,\n            selected: false\n          };\n          addedSamplesListSortedList.push(newItem);\n        });\n        this.props.childDataChange(addedSamplesListSortedList);\n        this.setState({\n          samples: updatedList || [],\n          addSelectAll: this.valiateCheckAll(this.state.dataState && this.state.dataState.filter !== null && this.state.dataState.filter !== undefined ? process(updatedList || [], { ...this.state.dataState,\n            skip: 0,\n            take: updatedList.length\n          }).data || [] : updatedList),\n          addedSamplesListSortedList: addedSamplesListSortedList,\n          addedSamplesList: ListedData,\n          addComponentDataListCopy: this.valiateCopy(addedSamplesListSortedList || [], updatedList || [], ListedData || []),\n          dataState: this.dataStateValidation()\n        });\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELCETONESAMPLE\"\n        }));\n      }\n    };\n\n    this.handleClickDelete = row => {\n      let updatedAddList = [];\n\n      if (row) {\n        const ntransactiontestcode = row && row.dataItem && row.dataItem.ntransactiontestcode;\n        const updatedList = this.state.addedSamplesListSortedList && this.state.addedSamplesListSortedList.filter(item => item.ntransactiontestcode !== ntransactiontestcode);\n        const exists = this.state.samples && this.state.samples.some(item => item.ntransactiontestcode === ntransactiontestcode);\n\n        if (!exists) {\n          updatedAddList = this.state.samples && this.state.samples.map(item => {\n            return item;\n          });\n          updatedAddList.push({ ...row.dataItem,\n            selected: false\n          });\n        }\n\n        this.props.childDataChange(updatedList);\n        this.setState({\n          samples: updatedAddList,\n          addedSamplesListSortedList: updatedList,\n          addComponentDataListCopy: this.valiateCopy(updatedList || [], updatedAddList || []),\n          addSelectAll: this.valiateCheckAll(updatedAddList)\n        });\n      }\n    };\n\n    this.selectionChange = event => {\n      let addedSamplesList = this.state.addedSamplesList || [];\n      const samples = this.state.samples.map(item => {\n        if (item.ntransactiontestcode === event.dataItem.ntransactiontestcode) {\n          item.selected = !event.dataItem.selected;\n\n          if (item.selected) {\n            const newItem = JSON.parse(JSON.stringify(item));\n            newItem[\"jsondata\"] = {};\n            newItem[\"jsonuidata\"] = {};\n            delete newItem['selected'];\n            newItem.selected = true;\n            newItem[\"jsondata\"]['samplelist'] = item;\n            newItem[\"jsonuidata\"]['samplelist'] = item;\n            addedSamplesList.push(newItem);\n          } else {\n            addedSamplesList = addedSamplesList.filter(item1 => item1.ntransactiontestcode !== item.ntransactiontestcode);\n          }\n        }\n\n        return item;\n      });\n      this.setState({\n        addSelectAll: this.valiateCheckAll(process(samples || [], this.state.dataState).data),\n        samples,\n        addedSamplesList,\n        deleteSelectAll: this.valiateCheckAll(addedSamplesList),\n        addComponentDataListCopy: this.valiateCopy(this.state.addedSamplesListSortedList || [], samples || [], addedSamplesList || [])\n      });\n    };\n\n    this.dataStateChangeBatchSample = event => {\n      let updatedList = [];\n\n      if (event.dataState && event.dataState.filter === null) {\n        let addComponentDataListCopy = this.state.addComponentDataListCopy || this.state.samples || [];\n        addComponentDataListCopy.forEach(x => {\n          const exists = this.state.addedSamplesListSortedList.some(item => item.ntransactiontestcode === x.ntransactiontestcode);\n\n          if (!exists) {\n            updatedList.push(x);\n          }\n        });\n      } else {\n        updatedList = this.state.samples || [];\n      }\n\n      this.setState({\n        dataResult: process(this.state.samples || [], event.dataState),\n        dataState: event.dataState,\n        samples: updatedList,\n        addSelectAll: event.dataState && event.dataState.filter === null ? this.valiateCheckAll(updatedList) : this.valiateCheckAll(process(updatedList || [], event.dataState).data)\n      });\n    };\n\n    const dataState = {\n      skip: 0,\n      take: 10\n    };\n    this.state = {\n      addedSamplesListSortedList: [],\n      dataState\n    };\n    this.formRef = React.createRef();\n  }\n\n  render() {\n    const extractedColumnList = []; //ALPD-5137--Vignesh R(20-12-2024)---Including filter in Data selection Kendo Grid\n\n    let count = (this.state.addedSamplesListSortedList || []).length;\n\n    if (this.props.nneedsubsample) {\n      extractedColumnList.push({\n        \"idsName\": \"IDS_ARNUMBER\",\n        \"dataField\": \"sarno\"\n      }, {\n        \"idsName\": \"IDS_SAMPLEARNO\",\n        \"dataField\": \"ssamplearno\"\n      });\n    } else {\n      extractedColumnList.push({\n        \"idsName\": \"IDS_ARNUMBER\",\n        \"dataField\": \"sarno\"\n      });\n    }\n\n    extractedColumnList.push({\n      \"idsName\": \"IDS_TESTNAME\",\n      \"dataField\": \"stestname\",\n      \"width\": \"155px\"\n    }, {\n      \"idsName\": \"IDS_SAMPLENAME\",\n      \"dataField\": \"ssamplename\",\n      \"width\": \"155px\"\n    }, {\n      \"idsName\": \"IDS_REGDATE\",\n      \"dataField\": \"dregdate\",\n      \"width\": \"200px\"\n    });\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 2\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      className: \"d-flex justify-content-end p-2\",\n      md: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 1\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      className: \"btn-user btn-primary-blue\",\n      onClick: () => this.addSaveDataGrid(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faSave,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 41\n      }\n    }), \" \", /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_ADD\",\n      defaultMessage: \"Add\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 41\n      }\n    }))), /*#__PURE__*/React.createElement(Row, {\n      style: {\n        marginTop: '10px'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(DataGridWithSelection, {\n      primaryKeyField: \"nbatchsamplecode\",\n      data: this.state.samples || [] //dataState={this.state.dataState}\n      //dataResult={this.state.dataResult}\n      ,\n      selectAll: this.state.addSelectAll,\n      userInfo: this.props.userInfo,\n      title: this.props.intl.formatMessage({\n        id: \"IDS_SELECTTODELETE\"\n      }),\n      headerSelectionChange: this.headerSelectionChange,\n      selectionChange: this.selectionChange,\n      dataStateChange: this.dataStateChangeBatchSample,\n      extractedColumnList: extractedColumnList,\n      dataState: this.state.dataState ? this.state.dataState : {\n        skip: 0,\n        take: 10\n      },\n      dataResult: this.state.dataResult ? this.state.dataResult : process(this.state.samples || [], this.state.dataState ? this.state.dataState : {\n        skip: 0,\n        take: 10\n      }),\n      scrollable: 'scrollable',\n      pageable: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 25\n      }\n    })))), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(Row, {\n      style: {\n        marginTop: '10px'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: '12',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(MediaHeader, {\n      className: \"mb-3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      style: {\n        fontWeight: \"bold\",\n        color: \"black\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 49\n      }\n    }, this.props.intl.formatMessage({\n      id: \"IDS_SELECTEDSAMPLES\"\n    }) + \" : \"), /*#__PURE__*/React.createElement(\"span\", {\n      style: {\n        fontWeight: \"bold\",\n        color: \"blue\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 49\n      }\n    }, count))), /*#__PURE__*/React.createElement(Col, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(DataGridWithSelection, {\n      primaryKeyField: \"nbatchsamplecode\",\n      userInfo: this.props.userInfo,\n      data: this.state.addedSamplesListSortedList || [],\n      title: this.props.intl.formatMessage({\n        id: \"IDS_SELECTTODELETE\"\n      }),\n      extractedColumnList: extractedColumnList,\n      hideColumnFilter: true,\n      isHidemulipleselect: true,\n      isActionRequired: true,\n      handleClickDelete: this.handleClickDelete,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 41\n      }\n    }))), /*#__PURE__*/React.createElement(Row, {\n      style: {\n        marginTop: '10px'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }\n    }));\n  } //ALPD-5137--Vignesh R(19-01-2025)---Including filter in Data selection Kendo Grid\n\n\n  componentDidUpdate(previousProps, previousState) {\n    if (this.props.samples !== previousProps.samples) {\n      this.setState({\n        samples: this.props.samples || []\n      });\n    }\n\n    if (this.state.samples !== previousState.samples) {\n      this.setState({\n        dataResult: process(this.state.samples || [], this.state.dataState)\n      });\n    }\n  } //ALPD-5137--Vignesh R(19-01-2025)---Including filter in Data selection Kendo Grid\n\n\n  //ALPD-5137--Vignesh R(19-01-2025)---Including filter in Data selection Kendo Grid\n  valiateCopy(sortedList, samples, addedSamplesList) {\n    let addedSamplesLists = addedSamplesList || this.state.addedSamplesList || [];\n    let listData = this.props.samples || [];\n    let copyingList = listData.filter(item1 => !sortedList.some(item2 => item1.ntransactiontestcode === item2.ntransactiontestcode)) || [];\n    let copyingListData = copyingList.map(item => {\n      const existsInAddComponentDataList = addedSamplesLists.some(item1 => item1.ntransactiontestcode === item.ntransactiontestcode);\n\n      if (existsInAddComponentDataList) {\n        return { ...item,\n          selected: true\n        };\n      } else {\n        return { ...item,\n          selected: false\n        };\n      }\n    });\n    return copyingListData;\n  } //ALPD-5137--Vignesh R(19-01-2025)---Including filter in Data selection Kendo Grid\n\n\n  dataStateValidation() {\n    let dataState = { ...this.state.dataState\n    };\n    let count = 0;\n    this.state.dataResult.data.map(x => {\n      if (x.selected) {\n        count++;\n      }\n    });\n\n    if (this.state.dataResult.data) {\n      if (parseInt(this.state.dataResult.total) === parseInt(count) + parseInt(this.state.dataState.skip)) {\n        let skipcount = this.state.dataState.skip > 0 ? this.state.dataState.skip - this.state.dataState.take : this.state.dataState.skip;\n        dataState = { ...dataState,\n          skip: skipcount,\n          take: this.state.dataState.take\n        };\n      }\n    }\n\n    return dataState;\n  } //ALPD-5137--Vignesh R(19-01-2025)---Including filter in Data selection Kendo Grid\n\n\n  valiateCheckAll(data) {\n    let selectAll = true;\n\n    if (data && data.length > 0) {\n      data.forEach(dataItem => {\n        if (dataItem.selected) {\n          if (dataItem.selected === false) {\n            selectAll = false;\n          }\n        } else {\n          selectAll = false;\n        }\n      });\n    } else {\n      selectAll = false;\n    }\n\n    return selectAll;\n  } //ALPD-5137--Vignesh R(20-12-2024)---Including filter in Data selection Kendo Grid\n\n\n}\n\nexport default injectIntl(AddSample);","map":{"version":3,"sources":["E:/WorkingFolder/React_Postgres/ALPD/branches/SOURCE-512/QuaLISWeb/src/pages/batchruncreation/AddSample.js"],"names":["React","Component","FormattedMessage","injectIntl","Button","Row","Col","DataGridWithSelection","faSave","FontAwesomeIcon","MediaHeader","toast","process","AddSample","constructor","props","headerSelectionChange","event","checked","syntheticEvent","target","eventData","data","hasOwnProperty","samples","state","addedSamplesList","map","item","matchingData","find","dataItem","ntransactiontestcode","existingIndex","findIndex","x","newItem","selected","jsondata","samplelist","jsonuidata","push","oldItem","setState","addComponentDataListCopy","valiateCopy","addedSamplesListSortedList","addSelectAll","valiateCheckAll","dataState","deleteSelectAll","deletedListdData","deletedList","matchedItem","filter","item1","npreregno","addSaveDataGrid","filterdata1","take","length","sortListedData1","some","exists","undefined","sortListedDataList","addedItem","updatedList","ListedData","sortListedData","updatedDataList","filterdata","skip","JSON","parse","stringify","childDataChange","dataStateValidation","warn","intl","formatMessage","id","handleClickDelete","row","updatedAddList","selectionChange","dataStateChangeBatchSample","forEach","dataResult","formRef","createRef","render","extractedColumnList","count","nneedsubsample","marginTop","userInfo","fontWeight","color","componentDidUpdate","previousProps","previousState","sortedList","addedSamplesLists","listData","copyingList","item2","copyingListData","existsInAddComponentDataList","parseInt","total","skipcount","selectAll"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { FormattedMessage, injectIntl } from 'react-intl';\r\nimport {Button,Row, Col} from 'react-bootstrap';\r\nimport DataGridWithSelection from '../../components/data-grid/DataGridWithSelection';\r\nimport {faSave } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { MediaHeader } from '../product/product.styled';\r\nimport { toast } from 'react-toastify';\r\nimport { process } from \"@progress/kendo-data-query\";\r\n\r\n// ADDed by Vignesh R-ALPD-5137\r\n//Changed functional component into class component\r\nclass AddSample extends Component {\r\n        \r\n        constructor(props) {\r\n\r\n                super(props);\r\n                const dataState = { skip: 0, take: 10 };\r\n                this.state = {\r\n                        addedSamplesListSortedList: [], dataState\r\n                };\r\n                this.formRef = React.createRef();\r\n        }\r\n        render() {\r\n        const extractedColumnList = [];\r\n\t//ALPD-5137--Vignesh R(20-12-2024)---Including filter in Data selection Kendo Grid\r\n        let count = (this.state.addedSamplesListSortedList || []).length;\r\n        if (this.props.nneedsubsample){\r\n                extractedColumnList.push({\"idsName\":\"IDS_ARNUMBER\",\"dataField\":\"sarno\"},\r\n                        {\"idsName\":\"IDS_SAMPLEARNO\",\"dataField\":\"ssamplearno\" } \r\n                );\r\n            }\r\n            else{\r\n                extractedColumnList.push({\"idsName\":\"IDS_ARNUMBER\",\"dataField\":\"sarno\"});\r\n            }\r\n            extractedColumnList .push(      \r\n                {\"idsName\":\"IDS_TESTNAME\",\"dataField\":\"stestname\",\"width\": \"155px\"},\r\n                {\"idsName\":\"IDS_SAMPLENAME\",\"dataField\":\"ssamplename\", \"width\": \"155px\"},\r\n                {\"idsName\":\"IDS_REGDATE\",\"dataField\":\"dregdate\",\"width\": \"200px\" },\r\n\r\n             );\r\n       return (\r\n       <>\r\n\r\n <Row>\r\n{ /*ALPD-5137--Vignesh R(20-12-2024)---Including filter in Data selection Kendo Grid*/}\r\n<Col className=\"d-flex justify-content-end p-2\" md={12}>\r\n                                <Button className=\"btn-user btn-primary-blue\"\r\n                                onClick={() => this.addSaveDataGrid()}\r\n                                >\r\n                                        <FontAwesomeIcon icon={faSave} /> { }\r\n                                        <FormattedMessage id='IDS_ADD' defaultMessage='Add' />\r\n                                </Button>\r\n                        </Col>\r\n        <Row style={{marginTop:'10px'}}>\r\n                <Col>                     \r\n                        <DataGridWithSelection  \r\n                                primaryKeyField={\"nbatchsamplecode\"}                            \r\n                                data={this.state.samples ||[]} \r\n                                //dataState={this.state.dataState}\r\n                                //dataResult={this.state.dataResult}\r\n                                selectAll={this.state.addSelectAll}\r\n                                userInfo={this.props.userInfo}\r\n                                title={this.props.intl.formatMessage({ id: \"IDS_SELECTTODELETE\" })}\r\n                                headerSelectionChange={this.headerSelectionChange}\r\n                                selectionChange={this.selectionChange}\r\n                                dataStateChange={this.dataStateChangeBatchSample}\r\n                                extractedColumnList={extractedColumnList}\r\n                                dataState={this.state.dataState ? this.state.dataState : { skip: 0, take: 10 }}\r\n                                dataResult={this.state.dataResult ? this.state.dataResult :\r\n                                process(this.state.samples || [], this.state.dataState\r\n                                 ? this.state.dataState : { skip: 0, take: 10 })}   \r\n                                 scrollable={'scrollable'}\r\n                                 pageable={true}              \r\n                        /> \r\n                </Col>\r\n                \r\n        </Row>\r\n        </Row>\r\n        { /*ALPD-5137--Vignesh R(20-12-2024)---Including filter in Data selection Kendo Grid*/}\r\n\r\n        <br>\r\n                        </br>\r\n                        <Row style={{ marginTop: '10px' }}>\r\n        {/*ALPD-5137--Vignesh R(20-12-2024)---Including filter in Data selection Kendo Grid*/}\r\n                                <Col md={'12'}>\r\n                                        <MediaHeader className='mb-3'>\r\n                                                <span style={{ fontWeight: \"bold\", color: \"black\" }}>\r\n                                                        {this.props.intl.formatMessage({ id: \"IDS_SELECTEDSAMPLES\" }) + \" : \"}\r\n                                                </span>\r\n                                                <span style={{ fontWeight: \"bold\", color: \"blue\" }}>\r\n                                                        {count}\r\n                                                </span>\r\n                                        </MediaHeader>\r\n                                </Col>\r\n\r\n                                <Col>\r\n                                        <DataGridWithSelection\r\n                                               primaryKeyField={\"nbatchsamplecode\"}\r\n                                                userInfo={this.props.userInfo}\r\n                                                data={this.state.addedSamplesListSortedList || []}\r\n                                                title={this.props.intl.formatMessage({ id: \"IDS_SELECTTODELETE\" })}\r\n                                                extractedColumnList={extractedColumnList}                                                \r\n                                            \r\n                                                hideColumnFilter={true}\r\n                                                isHidemulipleselect={true}\r\n                                                isActionRequired={true}\r\n                                                handleClickDelete={this.handleClickDelete}\r\n                                        />\r\n                                </Col>\r\n                        </Row>\r\n             \r\n        <Row style={{marginTop:'10px'}}>\r\n                {/* <Col md={6}>\r\n                        <span className=\"add-txt-btn\">\r\n                                <FormattedMessage id=\"IDS_ADDEDCOMPONENTS\" defaultMessage=\"Added Components\"/>\r\n                                 : {props.addedComponentList && props.addedComponentList.length}\r\n                        </span>\r\n                </Col> */}\r\n\r\n                {/* <Col md={12} className=\"d-flex justify-content-end\">\r\n                     \r\n                        <Button variant=\"outline-danger\" onClick={() => props.onDeleteSelectedComponent()} >\r\n                                <FormattedMessage id='IDS_REMOVECOMPONENTS' defaultMessage='Remove Components' />\r\n                        </Button> */}\r\n                        {/* <Nav.Link name=\"addrole\" className=\"add-txt-btn\" onClick={() => props.onDeleteSelectedComponent()}>\r\n                                <FormattedMessage id='IDS_DELETECOMPONENTS' defaultMessage='Delete Components' />\r\n                        </Nav.Link> */}\r\n                {/* </Col> */}\r\n        </Row>\r\n        {/* <Row style={{marginTop:'10px'}}> \r\n                 <Col>      \r\n                        <DataGridWithSelection\r\n                                primaryKeyField={\"npreregno\"}                               \r\n                                data={props.samples }\r\n                                // componentPopupSkip={props.componentPopupSkip}\r\n                                // componentPopupTake={props.componentPopupTake}\r\n                                // componentPageSizes={props.componentPageSizes}\r\n                                selectAll={props.deleteSelectAll}\r\n                                title={props.intl.formatMessage({id:\"IDS_SELECTTODELETE\"})}\r\n                                headerSelectionChange={props.addedHeaderSelectionChange}\r\n                                selectionChange={props.addedSelectionChange}\r\n                                extractedColumnList={[  {idsName:\"IDS_ARNO\", dataField:\"sarno\"},\r\n                                                        {idsName:\"IDS_COMPONENTNAME\", dataField:\"scomponentname\"},\r\n                                                        {idsName:\"IDS_BATCHLOTNO\", dataField:\"smanuflotno\"},\r\n                                                        {idsName:\"IDS_SPECNAME\", dataField:\"sspecname\"}]}\r\n                              \r\n                        /> \r\n                </Col>\r\n        </Row> */}\r\n        </>\r\n       );\r\n   }\r\n\t    //ALPD-5137--Vignesh R(19-01-2025)---Including filter in Data selection Kendo Grid\r\n componentDidUpdate(previousProps,previousState) {\r\n                if (this.props.samples !== previousProps.samples) {\r\n                        this.setState({ samples: this.props.samples || [] });\r\n                }\r\n                if(this.state.samples!==previousState.samples){\r\n                        this.setState({ dataResult: process(this.state.samples || [], this.state.dataState) });\r\n                }\r\n        }\r\n\r\n\t\t    //ALPD-5137--Vignesh R(19-01-2025)---Including filter in Data selection Kendo Grid\r\n        headerSelectionChange = (event) => {\r\n                        const checked = event.syntheticEvent.target.checked;\r\n                        const eventData = event.target.props.data.hasOwnProperty('data') ? event.target.props.data.data || [] : event.target.props.data || [];\r\n                        let samples = //event.target.props.data \r\n                                this.state.samples || [];\r\n                        let addedSamplesList = this.state.addedSamplesList || [];\r\n                        if (checked) {\r\n                                const data = samples.map(item => {\r\n                                        const matchingData = eventData.find(dataItem => dataItem.ntransactiontestcode === item.ntransactiontestcode);\r\n                                        if (matchingData) {\r\n                                                const existingIndex = addedSamplesList.findIndex(\r\n                                                        x => x.ntransactiontestcode === item.ntransactiontestcode\r\n                                                );\r\n        \r\n                                                if (existingIndex === -1) {\r\n                                                        const newItem = {\r\n                                                                ...item,\r\n                                                                selected: true,\r\n                                                                jsondata: { samplelist: item },\r\n                                                                jsonuidata: { samplelist: item },\r\n                                                        };\r\n                                                        addedSamplesList.push(newItem);\r\n                                                } else {\r\n                                                        const oldItem = { ...addedSamplesList[existingIndex], selected: true };\r\n                                                        const newItem = {\r\n                                                                ...oldItem,\r\n                                                                selected: true,\r\n                                                                jsondata: { samplelist: oldItem },\r\n                                                                jsonuidata: { samplelist: oldItem },\r\n                                                        };\r\n                                                        addedSamplesList.push(newItem);\r\n                                                }\r\n        \r\n                                                return { ...item, selected: true };\r\n                                        } else {\r\n                                                return { ...item, selected: item.selected ? true : false };\r\n                                        }\r\n                                });\r\n                                this.setState({\r\n                                        samples: data, addedSamplesList,\r\n                                        addComponentDataListCopy: this.valiateCopy(this.state.addedSamplesListSortedList || [], data || [], addedSamplesList || []),\r\n                                        addSelectAll: this.valiateCheckAll(process(data || [], this.state.dataState)),\r\n                                        addSelectAll: checked, deleteSelectAll: false\r\n                                });\r\n                        } else {\r\n                                let addedSamplesList = this.state.addedSamplesList || [];\r\n                                let deletedListdData = this.state.deletedList || [];\r\n                                const data = samples.map(x => {\r\n                                        const matchedItem = eventData.find(item => x.ntransactiontestcode === item.ntransactiontestcode);\r\n                                        if (matchedItem) {\r\n                                                addedSamplesList = addedSamplesList.filter(item1 => item1.npreregno !== matchedItem.npreregno);\r\n                                                deletedListdData = deletedListdData.filter(item1 => item1.npreregno !== matchedItem.npreregno);\r\n                                                matchedItem.selected = false;\r\n                                                return matchedItem;\r\n                                        }\r\n                                        return x;\r\n                                });\r\n        \r\n                                this.setState({\r\n                                        samples: data, addedSamplesList: addedSamplesList, deletedList: deletedListdData,\r\n                                        addSelectAll: this.valiateCheckAll(addedSamplesList),\r\n                                        deleteSelectAll: this.valiateCheckAll(addedSamplesList),\r\n                                        addSelectAll: checked, deleteSelectAll: false,\r\n                                        addComponentDataListCopy: this.valiateCopy(this.state.addedSamplesListSortedList || [], data || [], addedSamplesList || []),\r\n                                });\r\n                        }\r\n                }\r\n\r\n\t    //ALPD-5137--Vignesh R(19-01-2025)---Including filter in Data selection Kendo Grid\r\n          addSaveDataGrid = () => {\r\n                        let filterdata1 = this.state.dataState ? process(this.state.addComponentDataListCopy || [], { ...this.state.dataState, take: this.state.samples.length }).data : [];\r\n                        let sortListedData1 = filterdata1.filter(x =>\r\n                                this.state.addedSamplesList.some(item => item.ntransactiontestcode === x.ntransactiontestcode)\r\n                        );\r\n                        let exists = this.state.dataState && this.state.dataState.filter !== null && this.state.dataState.filter !== undefined ?\r\n                                sortListedData1.length > 0 ? true : false : true;\r\n                        let sortListedDataList = this.state.addedSamplesList && this.state.addedSamplesList.filter(\r\n                                (addedItem) => process(this.state.samples || [], this.state.dataState).data.some(\r\n                                        (item) => addedItem.ntransactiontestcode === item.ntransactiontestcode\r\n                                )\r\n                        ) || [];\r\n                        if (sortListedDataList && sortListedDataList.length > 0 && exists) {\r\n                                let addedSamplesListSortedList = [];\r\n                                let updatedList = [];\r\n                                let ListedData = [];\r\n                                let sortListedData = [];\r\n                                let updatedDataList = [];\r\n                                if (this.state.dataState && this.state.dataState.filter !== null && this.state.dataState.filter !== undefined) {\r\n                                        let filterdata = process(this.state.addComponentDataListCopy || this.state.samples || [],\r\n                                                this.state.dataState ).data || [];\r\n                                        sortListedData = filterdata.filter(x =>\r\n                                                this.state.addedSamplesList.some(item => item.ntransactiontestcode === x.ntransactiontestcode)\r\n                                        );\r\n                                        updatedDataList = this.state.addedSamplesList.filter(\r\n                                                (item) => !sortListedData.some(\r\n                                                        (addedItem) => addedItem.ntransactiontestcode === item.ntransactiontestcode\r\n                                                )\r\n                                        );\r\n                                        updatedList = process(this.state.addComponentDataListCopy || this.state.samples || [],{ ...this.state.dataState,skip:0, take: this.state.samples.length } ).data.filter(\r\n                                                (item) => !sortListedData.some(\r\n                                                        (addedItem) => addedItem.ntransactiontestcode === item.ntransactiontestcode\r\n                                                )\r\n                                        );\r\n                                        updatedDataList.map(x => { if (x.selected) { ListedData.push(x) } });\r\n        \r\n                                } else {\r\n        \r\n                                        ListedData = this.state.addedSamplesList.filter(\r\n                                                (addedItem) => !process(this.state.samples || [], this.state.dataState).data.some(\r\n                                                        (item) => addedItem.ntransactiontestcode === item.ntransactiontestcode\r\n                                                )\r\n                                        ) || [];\r\n        \r\n                                        sortListedData = this.state.addedSamplesList.filter(\r\n                                                (addedItem) => process(this.state.samples || [], this.state.dataState).data.some(\r\n                                                        (item) => addedItem.ntransactiontestcode === item.ntransactiontestcode\r\n                                                )\r\n                                        );\r\n                                        updatedList = this.state.samples.filter(\r\n                                                (item) => !sortListedData.some(\r\n                                                        (addedItem) => addedItem.ntransactiontestcode === item.ntransactiontestcode\r\n                                                )\r\n                                        );\r\n                                }\r\n                                if (this.state.addedSamplesListSortedList.length > 0) {\r\n                                        this.state.addedSamplesListSortedList.map(item => {\r\n                                                const newItem = JSON.parse(JSON.stringify(item));\r\n                                                newItem[\"jsondata\"] = {}\r\n                                                newItem[\"jsonuidata\"] = {}\r\n                                                newItem[\"selected\"]=false;\r\n                                                newItem[\"jsondata\"]['samplelist'] =  {...item,selected:false}\r\n                                                newItem[\"jsonuidata\"]['samplelist'] =  {...item,selected:false}\r\n                                                addedSamplesListSortedList.push(newItem)\r\n                                        })\r\n                                }\r\n                                sortListedData.map(item => {\r\n                                        const newItem = JSON.parse(JSON.stringify(item));\r\n                                        newItem[\"jsondata\"] = {}\r\n                                        newItem[\"jsonuidata\"] = {}\r\n                                        newItem[\"selected\"]=false;\r\n                                        newItem[\"jsondata\"]['samplelist'] =  {...item,selected:false}\r\n                                        newItem[\"jsonuidata\"]['samplelist'] =  {...item,selected:false}\r\n                                        addedSamplesListSortedList.push(newItem)\r\n                                })\r\n                                this.props.childDataChange(addedSamplesListSortedList);\r\n                                this.setState({\r\n                                        samples:updatedList||[],\r\n                                        addSelectAll: this.valiateCheckAll(this.state.dataState && this.state.dataState.filter !== null && this.state.dataState.filter !== undefined\r\n                                                ? process(updatedList || [],\r\n                                                        { ...this.state.dataState,skip:0, take: updatedList.length }).data || [] : updatedList)\r\n                                        , addedSamplesListSortedList: addedSamplesListSortedList\r\n                                        , addedSamplesList: ListedData,\r\n                                        addComponentDataListCopy: this.valiateCopy(addedSamplesListSortedList || [], updatedList || [], ListedData || []),\r\n                                        dataState: this.dataStateValidation()\r\n                                })\r\n                        } else {\r\n                                toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELCETONESAMPLE\" }));\r\n                        }\r\n                }\r\n\r\n\t\t\t\t//ALPD-5137--Vignesh R(19-01-2025)---Including filter in Data selection Kendo Grid\r\n                valiateCopy(sortedList, samples, addedSamplesList) {\r\n                        let addedSamplesLists = addedSamplesList || this.state.addedSamplesList || [];\r\n                        let listData = this.props.samples || [];\r\n                        let copyingList = listData.filter(item1 =>\r\n                                !sortedList.some(item2 => item1.ntransactiontestcode === item2.ntransactiontestcode)\r\n                        ) || [];\r\n                        let copyingListData = copyingList.map(item => {\r\n                                const existsInAddComponentDataList = addedSamplesLists.some(\r\n                                        item1 => item1.ntransactiontestcode === item.ntransactiontestcode\r\n                                );\r\n                                if (existsInAddComponentDataList) {\r\n                                        return { ...item, selected: true };\r\n                                } else {\r\n                                        return { ...item, selected: false };\r\n                                }\r\n                        });\r\n                        return copyingListData;\r\n                }\r\n\r\n\r\n\t\t\t\t //ALPD-5137--Vignesh R(19-01-2025)---Including filter in Data selection Kendo Grid\r\n                  handleClickDelete = (row) => {\r\n                        let updatedAddList = [];\r\n                        if (row) {\r\n                                const ntransactiontestcode = row && row.dataItem && row.dataItem.ntransactiontestcode;\r\n                                const updatedList = this.state.addedSamplesListSortedList && this.state.addedSamplesListSortedList.filter(\r\n                                        (item) => item.ntransactiontestcode !== ntransactiontestcode\r\n                                );\r\n                                const exists = this.state.samples && this.state.samples.some(\r\n                                        (item) => item.ntransactiontestcode === ntransactiontestcode\r\n                                );\r\n                                if (!exists) {\r\n                                        updatedAddList = this.state.samples && this.state.samples.map(item => {\r\n                                                return item\r\n                                        })\r\n                                        updatedAddList.push({ ...row.dataItem, selected: false });\r\n                                }\r\n                                this.props.childDataChange(updatedList);\r\n                                this.setState({\r\n                                        samples: updatedAddList, addedSamplesListSortedList: updatedList,\r\n                                        addComponentDataListCopy: this.valiateCopy(updatedList || [], updatedAddList || []),\r\n                                        addSelectAll: this.valiateCheckAll(updatedAddList)\r\n                                })\r\n                        }\r\n                }\r\n\r\n                  dataStateValidation() {\r\n                        let dataState = { ...this.state.dataState };\r\n                        let count=0;\r\n                        this.state.dataResult.data.map(x=>{if(x.selected){count++}});\r\n                        if (this.state.dataResult.data) {\r\n                                if (parseInt(this.state.dataResult.total) ===  (parseInt(count)+parseInt(this.state.dataState.skip))) {\r\n                                        let skipcount = this.state.dataState.skip > 0 ? (this.state.dataState.skip - this.state.dataState.take) :\r\n                                                this.state.dataState.skip\r\n                                        dataState = { ...dataState,skip: skipcount, take: this.state.dataState.take }\r\n                                }\r\n                        }\r\n                       return dataState;\r\n                }\r\n\r\n    //ALPD-5137--Vignesh R(19-01-2025)---Including filter in Data selection Kendo Grid\r\n        selectionChange = (event) => {\r\n                        let addedSamplesList = this.state.addedSamplesList || [];\r\n                        const samples = this.state.samples.map(item => {\r\n                                if (item.ntransactiontestcode === event.dataItem.ntransactiontestcode) {\r\n                                        item.selected = !event.dataItem.selected;\r\n                                        if (item.selected) {\r\n                                                const newItem = JSON.parse(JSON.stringify(item));\r\n                                                newItem[\"jsondata\"] = {}\r\n                                                newItem[\"jsonuidata\"] = {}\r\n                                                delete newItem['selected']\r\n                                                newItem.selected = true;\r\n                                                newItem[\"jsondata\"]['samplelist'] = item\r\n                                                newItem[\"jsonuidata\"]['samplelist'] = item\r\n                                                addedSamplesList.push(newItem);\r\n                                        }\r\n                                        else {\r\n                                                addedSamplesList = addedSamplesList.filter(item1 => item1.ntransactiontestcode !== item.ntransactiontestcode)\r\n                                        }\r\n                                }\r\n                                return item;\r\n                        });\r\n                        this.setState({\r\n                                addSelectAll: this.valiateCheckAll(process(samples || [], this.state.dataState).data),\r\n                                samples, addedSamplesList,\r\n                                deleteSelectAll: this.valiateCheckAll(addedSamplesList),\r\n                                addComponentDataListCopy: this.valiateCopy(this.state.addedSamplesListSortedList || [], samples || [], addedSamplesList || [])\r\n                        });\r\n                }\r\n\r\n        valiateCheckAll(data) {\r\n                        let selectAll = true;\r\n                        if (data && data.length > 0) {\r\n                                data.forEach(dataItem => {\r\n                                        if (dataItem.selected) {\r\n                                                if (dataItem.selected === false) {\r\n                                                        selectAll = false;\r\n                                                }\r\n                                        } else {\r\n                                                selectAll = false;\r\n                                        }\r\n                                })\r\n                        } else {\r\n                                selectAll = false;\r\n                        }\r\n                        return selectAll;\r\n                }\r\n         //ALPD-5137--Vignesh R(20-12-2024)---Including filter in Data selection Kendo Grid\r\n         dataStateChangeBatchSample = (event) => {\r\n                       let updatedList = [];\r\n                       if (event.dataState && event.dataState.filter === null) {\r\n                               let addComponentDataListCopy = this.state.addComponentDataListCopy || this.state.samples || [];\r\n                               addComponentDataListCopy.forEach(x => {\r\n                                       const exists = this.state.addedSamplesListSortedList.some(\r\n                                               item => item.ntransactiontestcode === x.ntransactiontestcode\r\n                                       );\r\n                                       if (!exists) {\r\n                                               updatedList.push(x);\r\n                                       }\r\n                               });\r\n                       } else {\r\n                               updatedList = this.state.samples || []\r\n                       }\r\n                       this.setState({\r\n                               dataResult: process(this.state.samples || [], event.dataState),\r\n                               dataState: event.dataState, samples: updatedList, addSelectAll: event.dataState && event.dataState.filter === null ?\r\n                                       this.valiateCheckAll(updatedList) :\r\n                                       this.valiateCheckAll(process(updatedList || [], event.dataState).data)\r\n                       });\r\n               }\r\n}\r\n   export default injectIntl(AddSample);\r\n"]},"metadata":{},"sourceType":"module"}