{"ast":null,"code":"'use strict';\n\nvar BaseDialect = require('../base');\n\nvar _ = require('underscore');\n\nvar util = require('util');\n\nvar templatesInit = require('./templates');\n\nvar blocksInit = require('./blocks');\n\nvar operatorsInit = require('./operators');\n\nvar modifiersInit = require('./modifiers');\n\nvar Dialect = module.exports = function (builder) {\n  BaseDialect.call(this, builder); // init templates\n\n  templatesInit(this); // init blocks\n\n  blocksInit(this); // init operators\n\n  operatorsInit(this); // init modifiers\n\n  modifiersInit(this);\n};\n\nutil.inherits(Dialect, BaseDialect);\nDialect.prototype.config = _({\n  jsonSeparatorRegexp: /->>?/g\n}).extend(BaseDialect.prototype.config);\n\nDialect.prototype._wrapIdentifier = function (name) {\n  // split by json separator\n  var nameParts = name.split(this.config.jsonSeparatorRegexp);\n  var separators = name.match(this.config.jsonSeparatorRegexp); // wrap base identifier\n\n  var identifier = BaseDialect.prototype._wrapIdentifier.call(this, nameParts[0]); // wrap all json identifier and join them with separators\n\n\n  identifier += _(separators).reduce(function (memo, separator, index) {\n    return memo + separator + '\\'' + nameParts[index + 1] + '\\'';\n  }, '');\n  return identifier;\n};","map":{"version":3,"sources":["D:/Postgres_workingFolder/QuaLISWeb/node_modules/json-sql/lib/dialects/postgresql/index.js"],"names":["BaseDialect","require","_","util","templatesInit","blocksInit","operatorsInit","modifiersInit","Dialect","module","exports","builder","call","inherits","prototype","config","jsonSeparatorRegexp","extend","_wrapIdentifier","name","nameParts","split","separators","match","identifier","reduce","memo","separator","index"],"mappings":"AAAA;;AAEA,IAAIA,WAAW,GAAGC,OAAO,CAAC,SAAD,CAAzB;;AACA,IAAIC,CAAC,GAAGD,OAAO,CAAC,YAAD,CAAf;;AACA,IAAIE,IAAI,GAAGF,OAAO,CAAC,MAAD,CAAlB;;AAEA,IAAIG,aAAa,GAAGH,OAAO,CAAC,aAAD,CAA3B;;AACA,IAAII,UAAU,GAAGJ,OAAO,CAAC,UAAD,CAAxB;;AACA,IAAIK,aAAa,GAAGL,OAAO,CAAC,aAAD,CAA3B;;AACA,IAAIM,aAAa,GAAGN,OAAO,CAAC,aAAD,CAA3B;;AAEA,IAAIO,OAAO,GAAGC,MAAM,CAACC,OAAP,GAAiB,UAASC,OAAT,EAAkB;AAChDX,EAAAA,WAAW,CAACY,IAAZ,CAAiB,IAAjB,EAAuBD,OAAvB,EADgD,CAGhD;;AACAP,EAAAA,aAAa,CAAC,IAAD,CAAb,CAJgD,CAMhD;;AACAC,EAAAA,UAAU,CAAC,IAAD,CAAV,CAPgD,CAShD;;AACAC,EAAAA,aAAa,CAAC,IAAD,CAAb,CAVgD,CAYhD;;AACAC,EAAAA,aAAa,CAAC,IAAD,CAAb;AACA,CAdD;;AAgBAJ,IAAI,CAACU,QAAL,CAAcL,OAAd,EAAuBR,WAAvB;AAEAQ,OAAO,CAACM,SAAR,CAAkBC,MAAlB,GAA2Bb,CAAC,CAAC;AAC5Bc,EAAAA,mBAAmB,EAAE;AADO,CAAD,CAAD,CAExBC,MAFwB,CAEjBjB,WAAW,CAACc,SAAZ,CAAsBC,MAFL,CAA3B;;AAIAP,OAAO,CAACM,SAAR,CAAkBI,eAAlB,GAAoC,UAASC,IAAT,EAAe;AAClD;AACA,MAAIC,SAAS,GAAGD,IAAI,CAACE,KAAL,CAAW,KAAKN,MAAL,CAAYC,mBAAvB,CAAhB;AACA,MAAIM,UAAU,GAAGH,IAAI,CAACI,KAAL,CAAW,KAAKR,MAAL,CAAYC,mBAAvB,CAAjB,CAHkD,CAKlD;;AACA,MAAIQ,UAAU,GAAGxB,WAAW,CAACc,SAAZ,CAAsBI,eAAtB,CAAsCN,IAAtC,CAA2C,IAA3C,EAAiDQ,SAAS,CAAC,CAAD,CAA1D,CAAjB,CANkD,CAQlD;;;AACAI,EAAAA,UAAU,IAAItB,CAAC,CAACoB,UAAD,CAAD,CAAcG,MAAd,CAAqB,UAASC,IAAT,EAAeC,SAAf,EAA0BC,KAA1B,EAAiC;AACnE,WAAOF,IAAI,GAAGC,SAAP,GAAmB,IAAnB,GAA0BP,SAAS,CAACQ,KAAK,GAAG,CAAT,CAAnC,GAAiD,IAAxD;AACA,GAFa,EAEX,EAFW,CAAd;AAIA,SAAOJ,UAAP;AACA,CAdD","sourcesContent":["'use strict';\n\nvar BaseDialect = require('../base');\nvar\t_ = require('underscore');\nvar\tutil = require('util');\n\nvar templatesInit = require('./templates');\nvar blocksInit = require('./blocks');\nvar operatorsInit = require('./operators');\nvar modifiersInit = require('./modifiers');\n\nvar Dialect = module.exports = function(builder) {\n\tBaseDialect.call(this, builder);\n\n\t// init templates\n\ttemplatesInit(this);\n\n\t// init blocks\n\tblocksInit(this);\n\n\t// init operators\n\toperatorsInit(this);\n\n\t// init modifiers\n\tmodifiersInit(this);\n};\n\nutil.inherits(Dialect, BaseDialect);\n\nDialect.prototype.config = _({\n\tjsonSeparatorRegexp: /->>?/g\n}).extend(BaseDialect.prototype.config);\n\nDialect.prototype._wrapIdentifier = function(name) {\n\t// split by json separator\n\tvar nameParts = name.split(this.config.jsonSeparatorRegexp);\n\tvar separators = name.match(this.config.jsonSeparatorRegexp);\n\n\t// wrap base identifier\n\tvar identifier = BaseDialect.prototype._wrapIdentifier.call(this, nameParts[0]);\n\n\t// wrap all json identifier and join them with separators\n\tidentifier += _(separators).reduce(function(memo, separator, index) {\n\t\treturn memo + separator + '\\'' + nameParts[index + 1] + '\\'';\n\t}, '');\n\n\treturn identifier;\n};\n"]},"metadata":{},"sourceType":"script"}