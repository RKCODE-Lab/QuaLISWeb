{"ast":null,"code":"import _defineProperty from\"E:\\\\WorkingFolder\\\\React_Postgres\\\\ALPD\\\\SOURCE-512\\\\QuaLISWeb\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";import _objectSpread from\"E:\\\\WorkingFolder\\\\React_Postgres\\\\ALPD\\\\SOURCE-512\\\\QuaLISWeb\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";import _classCallCheck from\"E:\\\\WorkingFolder\\\\React_Postgres\\\\ALPD\\\\SOURCE-512\\\\QuaLISWeb\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";import _createClass from\"E:\\\\WorkingFolder\\\\React_Postgres\\\\ALPD\\\\SOURCE-512\\\\QuaLISWeb\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";import _inherits from\"E:\\\\WorkingFolder\\\\React_Postgres\\\\ALPD\\\\SOURCE-512\\\\QuaLISWeb\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";import _createSuper from\"E:\\\\WorkingFolder\\\\React_Postgres\\\\ALPD\\\\SOURCE-512\\\\QuaLISWeb\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";import React from'react';import{FormattedMessage,injectIntl}from'react-intl';import'rc-tabs/assets/index.css';import{AtTabs}from'../../components/custom-tabs/custom-tabs.styles';import Tabs,{TabPane}from'rc-tabs';import ReactTooltip from'react-tooltip';import{Grid,GridColumn}from'@progress/kendo-react-grid';import CustomSwitch from'../../components/custom-switch/custom-switch.component';import{LocalizationProvider}from'@progress/kendo-react-intl';import{AtTableWrap}from'../../components/data-grid/data-grid.styles';import PerfectScrollbar from'react-perfect-scrollbar';import{SampleType,designProperties,formCode}from'../../components/Enumeration';import FilterQueryBuilder from'../../components/FilterQueryBuilder';import{toast}from'react-toastify';import{queryBuilderfillingColumns,getFilterConditionsBasedonDataType}from'../../components/CommonScript';import{Col,Card}from\"react-bootstrap\";import{DEFAULT_RETURN}from'../../actions/LoginTypes';import{Utils as QbUtils}from\"@react-awesome-query-builder/ui\";var ConfigureReportFilterType=/*#__PURE__*/function(_React$Component){_inherits(ConfigureReportFilterType,_React$Component);var _super=_createSuper(ConfigureReportFilterType);function ConfigureReportFilterType(props){var _this;_classCallCheck(this,ConfigureReportFilterType);_this=_super.call(this,props);_this.onTabChange=function(tab){_this.setState({selectedScreen:_this.state.screens.find(function(screen){return screen.eventKey===tab;})// awesomeTree:this.state.awesomeTree,\n//,extractedColumnList:\n//  tab==='sample'||tab==='master'?this.state.sampleColumnList:this.state.subsampleColumnList\n});};_this.onChangeReportFilterTypeFields=function(event,dataItem,field,dataIndex,formCode,operation){var comboValues=_this.state.comboValues||[];var count=0;var sampleReportFilterTypeData=_this.props.sampleReportFilterTypeData;if(field!=='ismandatory'){sampleReportFilterTypeData[formCode][dataIndex]=_objectSpread(_objectSpread({},sampleReportFilterTypeData[formCode][dataIndex]),{},{samplefiltertypefields:event.target.checked});if(!event.target.checked){sampleReportFilterTypeData[formCode][dataIndex]=_objectSpread(_objectSpread({},sampleReportFilterTypeData[formCode][dataIndex]),{},{ismandatory:event.target.checked});}sampleReportFilterTypeData.sample.map(function(x){if(x.samplefiltertypefields===true){count++;}});if(count>_this.props.settingsCount){sampleReportFilterTypeData[formCode][dataIndex]=_objectSpread(_objectSpread({},sampleReportFilterTypeData[formCode][dataIndex]),{},{samplefiltertypefields:false});toast.warn(_this.props.intl.formatMessage({id:\"IDS_MAXIMUMSELECTIONEXCEEDSFILTEERTYPE\"}));}else{// let  extractedColumnList=this.props.extractedColumnList(this.props.sampleReportFilterTypeData[\"sample\"])\nvar extractedColumnList=queryBuilderfillingColumns(_this.props.sampleReportFilterTypeData[\"sample\"],_this.props.userInfo.slanguagetypecode);sampleReportFilterTypeData[\"sample\"].map(function(x){if(x.realData[designProperties.LISTITEM]===\"combo\"){comboValues=_objectSpread(_objectSpread({},comboValues),{},_defineProperty({},x.realData[designProperties.LABEL][_this.props.userInfo.slanguagetypecode],[{\"value\":-1,\"title\":'NA'}]));}});var fields=getFilterConditionsBasedonDataType(extractedColumnList,comboValues);var data={sampleReportFilterTypeData:sampleReportFilterTypeData,fields:fields,fieldName:formCode,fieldIndex:dataIndex};_this.setState({sampleReportFilterTypeData:sampleReportFilterTypeData,fields:_objectSpread({},fields),isRender:true,comboValues:comboValues});_this.props.childDataChange(data);}}else{if(sampleReportFilterTypeData[formCode][dataIndex].samplefiltertypefields===true){sampleReportFilterTypeData[formCode][dataIndex]=_objectSpread(_objectSpread({},sampleReportFilterTypeData[formCode][dataIndex]),{},{ismandatory:event.target.checked});_this.setState({sampleReportFilterTypeData:sampleReportFilterTypeData});}else{toast.warn(_this.props.intl.formatMessage({id:\"IDS_ENABLEFIELDSFORTHISFIELD\"}));}}};_this.onChangeAwesomeQueryBuilder=function(immutableTree,config){var filterquery=QbUtils.sqlFormat(immutableTree,config);var filterQueryTreeStr=QbUtils.getTree(immutableTree);var data={awesomeTree:immutableTree,awesomeConfig:config,filterquery:filterquery,filterQueryTreeStr:filterQueryTreeStr};_this.setState({awesomeTree:immutableTree,awesomeConfig:config,filterquery:filterquery,filterQueryTreeStr:filterQueryTreeStr,isRender:false});_this.props.childDataChange(data);};var screens=[{eventKey:'sample',name:\"IDS_SAMPLE\"},{eventKey:'configuredfilterinputs',name:\"IDS_CONFIGUREDFILTERINPUTS\"}];var sampleColumnList=[{\"title\":\"IDS_FILTERFIELD\",\"field\":\"samplefiltertypefields\",\"width\":\"600px\"},{\"title\":\"IDS_REPORTFILTERTYPEMANDATORY\",\"field\":\"ismandatory\",\"width\":\"600px\"}];_this.state={screens:screens,sampleColumnList:sampleColumnList,extractedColumnList:sampleColumnList,selectedScreen:{eventKey:'sample',name:\"IDS_SAMPLE\"},fields:_this.props.fields,awesomeTree:_this.props.awesomeTree//fields:this.props.fields||[]\n};return _this;}_createClass(ConfigureReportFilterType,[{key:\"render\",value:function render(){var _this2=this;return/*#__PURE__*/React.createElement(React.Fragment,null,/*#__PURE__*/React.createElement(AtTabs,null,/*#__PURE__*/React.createElement(Tabs,{activeKey:this.state.selectedScreen.eventKey,moreIcon:\"...\",onChange:this.onTabChange},this.state.screens.map(function(screen){return/*#__PURE__*/ (//{\nReact.createElement(TabPane,{name:screen.eventKey,tab:_this2.props.intl.formatMessage({id:screen.name}),key:screen.eventKey},_this2.state.selectedScreen.eventKey==='sample'&&/*#__PURE__*/React.createElement(PerfectScrollbar,null,/*#__PURE__*/React.createElement(AtTableWrap,{className:\"at-list-table\"},/*#__PURE__*/React.createElement(LocalizationProvider,{language:\"lang\"},/*#__PURE__*/React.createElement(React.Fragment,null,/*#__PURE__*/React.createElement(Grid,Object.assign({className:\"active-paging\",style:{height:'550px'},resizable:true,reorderable:true,scrollable:\"scrollable\",data:_this2.props.dataResult[_this2.state.selectedScreen.eventKey]?_this2.props.dataResult[_this2.state.selectedScreen.eventKey]:[]},_this2.state.dataState,{onDataStateChange:_this2.dataStateChange}),/*#__PURE__*/React.createElement(GridColumn,{field:\"label\",title:_this2.props.intl.formatMessage({id:\"IDS_FIELDS\"}),cell:function cell(row){return/*#__PURE__*/React.createElement(\"td\",{\"data-tip\":row[\"dataItem\"]['label'],\"data-for\":\"tooltip-grid-wrap\"},row[\"dataItem\"]['label']);}}),_this2.state.extractedColumnList.map(function(column){return/*#__PURE__*/React.createElement(GridColumn,{field:column.field,title:_this2.props.intl.formatMessage({id:column.title}),headerClassName:\"text-center\",cell:function cell(row){return/*#__PURE__*/React.createElement(\"td\",{style:{textAlign:\"center\"},\"data-tip\":_this2.props.intl.formatMessage({id:column.title}),\"data-for\":\"tooltip-grid-wrap\"},/*#__PURE__*/React.createElement(CustomSwitch,{type:\"switch\",id:row[\"dataItem\"][column.field],onChange:function onChange(event){return _this2.onChangeReportFilterTypeFields(event,row[\"dataItem\"],column.field,row.dataIndex,_this2.state.selectedScreen.eventKey,_this2.props.operation);},checked:row[\"dataItem\"][column.field]||false,name:row[\"dataItem\"][\"label\"]+\"_\"+row.dataIndex+\"_\"+row.columnIndex}));}});}))))))));}//}\n))),/*#__PURE__*/React.createElement(Col,{md:\"12\",className:\"pb-0 mt-4\"},this.state.selectedScreen.eventKey==='configuredfilterinputs'&&/*#__PURE__*/React.createElement(FilterQueryBuilder,{fields:this.state.fields||{},onChange:this.onChangeAwesomeQueryBuilder,tree:this.state.isRender?undefined:this.state.awesomeTree//config={this.props.awesomeConfig}\n,skip:this.props.kendoSkip||0,take:this.props.kendoTake||5,handlePageChange:this.props.handlePageChange,gridColumns:this.props.gridColumns||[],filterData:this.props.filterDataRecord,onRowClick:this.props.handleKendoRowClick,handleExecuteClick:this.props.handleExecuteClick,userInfo:this.props.userInfo,static:true,isRender:this.state.isRender})));}},{key:\"componentDidUpdate\",value:function componentDidUpdate(previousProps,previousState){var _this$state=this.state,selectedRecord=_this$state.selectedRecord,sampleReportFilterTypeData=_this$state.sampleReportFilterTypeData,fields=_this$state.fields,awesomeTree=_this$state.awesomeTree;var bool=false;if(this.props.sampleReportFilterTypeData!==previousProps.sampleReportFilterTypeData){bool=true;sampleReportFilterTypeData=this.props.sampleReportFilterTypeData||{};}if(this.props.fields!==previousProps.fields){bool=true;fields=this.props.fields||{};}if(this.props.awesomeTree!==previousProps.awesomeTree){bool=true;awesomeTree=this.props.awesomeTree||{};}if(this.state.awesomeTree!==previousState.awesomeTree){bool=true;awesomeTree=this.state.awesomeTree||{};}if(bool){this.setState({selectedRecord:selectedRecord,sampleReportFilterTypeData:sampleReportFilterTypeData,fields:fields,awesomeTree:awesomeTree});}}}]);return ConfigureReportFilterType;}(React.Component);export default injectIntl(ConfigureReportFilterType);","map":{"version":3,"sources":["E:/WorkingFolder/React_Postgres/ALPD/branches/SOURCE-513-PROD/SOURCE-513-ALPD-5500/QuaLISWeb/src/pages/designtemplatemapping/ConfigureReportFilterType.jsx"],"names":["React","FormattedMessage","injectIntl","AtTabs","Tabs","TabPane","ReactTooltip","Grid","GridColumn","CustomSwitch","LocalizationProvider","AtTableWrap","PerfectScrollbar","SampleType","designProperties","formCode","FilterQueryBuilder","toast","queryBuilderfillingColumns","getFilterConditionsBasedonDataType","Col","Card","DEFAULT_RETURN","Utils","QbUtils","ConfigureReportFilterType","props","onTabChange","tab","setState","selectedScreen","state","screens","find","screen","eventKey","onChangeReportFilterTypeFields","event","dataItem","field","dataIndex","operation","comboValues","count","sampleReportFilterTypeData","samplefiltertypefields","target","checked","ismandatory","sample","map","x","settingsCount","warn","intl","formatMessage","id","extractedColumnList","userInfo","slanguagetypecode","realData","LISTITEM","LABEL","fields","data","fieldName","fieldIndex","isRender","childDataChange","onChangeAwesomeQueryBuilder","immutableTree","config","filterquery","sqlFormat","filterQueryTreeStr","getTree","awesomeTree","awesomeConfig","name","sampleColumnList","height","dataResult","dataState","dataStateChange","row","column","title","textAlign","columnIndex","undefined","kendoSkip","kendoTake","handlePageChange","gridColumns","filterDataRecord","handleKendoRowClick","handleExecuteClick","previousProps","previousState","selectedRecord","bool","Component"],"mappings":"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","sourcesContent":["\r\nimport React from 'react'\r\nimport { FormattedMessage, injectIntl } from 'react-intl'\r\nimport 'rc-tabs/assets/index.css';\r\nimport { AtTabs } from '../../components/custom-tabs/custom-tabs.styles';\r\nimport Tabs, { TabPane } from 'rc-tabs';\r\nimport ReactTooltip from 'react-tooltip';\r\nimport { Grid,GridColumn } from '@progress/kendo-react-grid';\r\nimport CustomSwitch from '../../components/custom-switch/custom-switch.component';\r\nimport { LocalizationProvider } from '@progress/kendo-react-intl';\r\nimport { AtTableWrap } from '../../components/data-grid/data-grid.styles';\r\nimport PerfectScrollbar from 'react-perfect-scrollbar';\r\nimport { SampleType, designProperties, formCode } from '../../components/Enumeration';\r\nimport FilterQueryBuilder from '../../components/FilterQueryBuilder';\r\nimport { toast } from 'react-toastify';\r\nimport {queryBuilderfillingColumns,getFilterConditionsBasedonDataType} from '../../components/CommonScript'\r\nimport {  Col, Card,  } from \"react-bootstrap\";\r\nimport {DEFAULT_RETURN} from '../../actions/LoginTypes';\r\nimport {Utils as QbUtils,} from \"@react-awesome-query-builder/ui\";\r\n\r\n\r\nclass ConfigureReportFilterType extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n            const screens = [{ eventKey: 'sample', name: \"IDS_SAMPLE\" },\r\n            { eventKey: 'configuredfilterinputs', name: \"IDS_CONFIGUREDFILTERINPUTS\" }];\r\n\r\n            let sampleColumnList = [{ \"title\": \"IDS_FILTERFIELD\", \"field\": \"samplefiltertypefields\", \"width\": \"600px\" },\r\n            { \"title\": \"IDS_REPORTFILTERTYPEMANDATORY\", \"field\": \"ismandatory\", \"width\": \"600px\" },\r\n            ];\r\n\r\n\r\n            this.state = {\r\n                screens, sampleColumnList, extractedColumnList: sampleColumnList,\r\n                selectedScreen: { eventKey: 'sample', name: \"IDS_SAMPLE\" },fields:this.props.fields,\r\n                awesomeTree:this.props.awesomeTree\r\n                //fields:this.props.fields||[]\r\n            }\r\n\r\n    }\r\n\r\n    onTabChange = (tab) => {\r\n        this.setState({\r\n            selectedScreen: this.state.screens.find(screen => screen.eventKey === tab),\r\n           // awesomeTree:this.state.awesomeTree,\r\n\r\n            //,extractedColumnList:\r\n          //  tab==='sample'||tab==='master'?this.state.sampleColumnList:this.state.subsampleColumnList\r\n        })\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <>\r\n                <AtTabs>\r\n\r\n                    <Tabs activeKey={this.state.selectedScreen.eventKey} moreIcon=\"...\" onChange={this.onTabChange}>\r\n                        {this.state.screens.map(screen =>//{\r\n                            <TabPane name={screen.eventKey} tab={this.props.intl.formatMessage({ id: screen.name })} key={screen.eventKey}>\r\n                                {this.state.selectedScreen.eventKey==='sample'&&\r\n                                <PerfectScrollbar>\r\n                                    {/* <ReactTooltip place=\"bottom\" id=\"tooltip-grid-wrap\" globalEventOff='click' /> */}\r\n                                    <AtTableWrap className=\"at-list-table\">\r\n                                        <LocalizationProvider language=\"lang\">\r\n                                            <>\r\n                                                <Grid\r\n                                                    className={\"active-paging\"}\r\n                                                    style={{ height: '550px' }}\r\n                                                    resizable\r\n                                                    reorderable\r\n                                                    scrollable={\"scrollable\"}\r\n                                                    data={this.props.dataResult[this.state.selectedScreen.eventKey]?this.props.dataResult[this.state.selectedScreen.eventKey]:[]}\r\n                                                    {...this.state.dataState}\r\n                                                    onDataStateChange={this.dataStateChange}>\r\n                                                    <GridColumn\r\n                                                        field=\"label\"\r\n                                                        title={this.props.intl.formatMessage({ id: \"IDS_FIELDS\" })}\r\n                                                        cell={(row) => (\r\n                                                            <td data-tip={row[\"dataItem\"]['label']} data-for=\"tooltip-grid-wrap\">\r\n                                                                {row[\"dataItem\"]['label']}\r\n                                                            </td>\r\n                                                        )}\r\n                                                    />\r\n                                                    {this.state.extractedColumnList.map(column =>\r\n                                                            <GridColumn\r\n                                                                field={column.field}\r\n                                                                title={this.props.intl.formatMessage({ id: column.title })}\r\n                                                                headerClassName=\"text-center\"\r\n                                                                cell={(row) => (\r\n                                                                    <td style={{ textAlign: \"center\" }} data-tip={this.props.intl.formatMessage({ id: column.title })} data-for=\"tooltip-grid-wrap\">\r\n                                                                        <CustomSwitch type=\"switch\" id={row[\"dataItem\"][column.field]}\r\n                                                                            onChange={(event) => this.onChangeReportFilterTypeFields(event, row[\"dataItem\"], column.field,\r\n                                                                                row.dataIndex, this.state.selectedScreen.eventKey,\r\n                                                                                this.props.operation)}\r\n                                                                            checked={row[\"dataItem\"][column.field] || false}\r\n                                                                            name={row[\"dataItem\"][\"label\"] + \"_\" + row.dataIndex + \"_\" + row.columnIndex} />\r\n\r\n\r\n                                                                    </td>)}\r\n                                                            />\r\n\r\n                                                    )}\r\n\r\n                                                </Grid>\r\n                                            </>\r\n\r\n                                        </LocalizationProvider>\r\n                                    </AtTableWrap>\r\n                                    {/* <ReactTooltip /> */}\r\n                                </PerfectScrollbar>}\r\n\r\n                            </TabPane>\r\n                            //}\r\n                        )}\r\n                    </Tabs>\r\n                </AtTabs>\r\n                <Col md='12'className='pb-0 mt-4'>\r\n                      {/* <Card.Title >\r\n                        <FormattedMessage\r\n                          id=\"IDS_CONFIGUREDFILTERINPUTS\" />\r\n                      </Card.Title> */}\r\n                      \r\n                      {this.state.selectedScreen.eventKey==='configuredfilterinputs'&&\r\n                <FilterQueryBuilder\r\n                            fields={this.state.fields || {}}\r\n                            onChange={this.onChangeAwesomeQueryBuilder}\r\n                            tree={this.state.isRender?undefined:this.state.awesomeTree}\r\n                            //config={this.props.awesomeConfig}\r\n                            skip={this.props.kendoSkip||0}\r\n                            take={this.props.kendoTake||5}\r\n                            handlePageChange={this.props.handlePageChange}\r\n                            gridColumns={this.props.gridColumns || []}\r\n                            filterData={this.props.filterDataRecord}\r\n                            onRowClick={this.props.handleKendoRowClick}\r\n                            handleExecuteClick={this.props.handleExecuteClick}\r\n                            userInfo={this.props.userInfo}\r\n\r\n                            static={true}\r\n                            isRender={this.state.isRender}\r\n                         \r\n                          />\r\n                         \r\n                       }\r\n                        </Col>\r\n            </>\r\n        );\r\n    }\r\n\r\n    onChangeReportFilterTypeFields = (event, dataItem, field, dataIndex, formCode, operation) => {\r\n        let   comboValues=this.state.comboValues||[];\r\n        let count=0;\r\n        const sampleReportFilterTypeData = this.props.sampleReportFilterTypeData\r\n        if(field!=='ismandatory'){\r\n        sampleReportFilterTypeData[formCode][dataIndex] = { ...sampleReportFilterTypeData[formCode][dataIndex],\r\n             samplefiltertypefields: event.target.checked, }\r\n             if(!event.target.checked){\r\n             sampleReportFilterTypeData[formCode][dataIndex] = { ...sampleReportFilterTypeData[formCode][dataIndex],\r\n                ismandatory: event.target.checked, }\r\n             }\r\n\r\n        sampleReportFilterTypeData.sample.map(x=>{\r\n            if(x.samplefiltertypefields===true){\r\n                count++\r\n            }\r\n        })\r\n        if(count>this.props.settingsCount){\r\n            sampleReportFilterTypeData[formCode][dataIndex] = { ...sampleReportFilterTypeData[formCode][dataIndex], samplefiltertypefields: false }\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_MAXIMUMSELECTIONEXCEEDSFILTEERTYPE\" })) \r\n         }else{\r\n           // let  extractedColumnList=this.props.extractedColumnList(this.props.sampleReportFilterTypeData[\"sample\"])\r\n            let  extractedColumnList=queryBuilderfillingColumns(this.props.sampleReportFilterTypeData[\"sample\"],this.props.userInfo.slanguagetypecode)\r\n             sampleReportFilterTypeData[\"sample\"].map(x=>{\r\n                if(x.realData[designProperties.LISTITEM]===\"combo\"){\r\n                    comboValues={...comboValues,\r\n                        [x.realData[designProperties.LABEL][this.props.userInfo.slanguagetypecode]]:\r\n                    [{\"value\":-1,\"title\":'NA'}]}\r\n                }})\r\n            let fields =getFilterConditionsBasedonDataType(extractedColumnList,comboValues);\r\n        let data={sampleReportFilterTypeData:sampleReportFilterTypeData,fields:fields,fieldName:formCode,fieldIndex:dataIndex}\r\n        \r\n        this.setState({sampleReportFilterTypeData:sampleReportFilterTypeData,fields:{...fields},isRender:true,comboValues})\r\n       this.props.childDataChange(data);\r\n    }\r\n    }else{\r\n        if(sampleReportFilterTypeData[formCode][dataIndex].samplefiltertypefields===true){\r\n            sampleReportFilterTypeData[formCode][dataIndex] = { ...sampleReportFilterTypeData[formCode][dataIndex], ismandatory: event.target.checked }\r\n            this.setState({sampleReportFilterTypeData:sampleReportFilterTypeData})\r\n        }else{\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_ENABLEFIELDSFORTHISFIELD\" })) \r\n        }\r\n    }\r\n    }\r\n    onChangeAwesomeQueryBuilder = (immutableTree, config) => {\r\n        const filterquery = QbUtils.sqlFormat(immutableTree, config);\r\n        const filterQueryTreeStr = QbUtils.getTree(immutableTree);\r\n        let data={awesomeTree: immutableTree, awesomeConfig: config, filterquery, filterQueryTreeStr}\r\n        this.setState({awesomeTree: immutableTree, awesomeConfig: config, filterquery, filterQueryTreeStr,isRender:false})\r\n        this.props.childDataChange(data);\r\n    };\r\n    \r\n    componentDidUpdate(previousProps,previousState) {\r\n        let { selectedRecord , sampleReportFilterTypeData,fields,awesomeTree\r\n        } = this.state\r\n        let bool = false;\r\n\r\n        if (this.props.sampleReportFilterTypeData !== previousProps.sampleReportFilterTypeData) {\r\n            bool = true;\r\n            sampleReportFilterTypeData = this.props.sampleReportFilterTypeData || {};\r\n        }\r\n        if (this.props.fields !== previousProps.fields) {\r\n            bool = true;\r\n            fields = this.props.fields || {};\r\n        }\r\n        if (this.props.awesomeTree !== previousProps.awesomeTree) {\r\n            bool = true;\r\n            awesomeTree = this.props.awesomeTree || {};\r\n        }\r\n        if (this.state.awesomeTree !== previousState.awesomeTree) {\r\n            bool = true;\r\n            awesomeTree = this.state.awesomeTree || {};\r\n        }\r\n        if (bool) {\r\n            this.setState({\r\n                selectedRecord ,sampleReportFilterTypeData,fields,awesomeTree\r\n            });\r\n        }\r\n    }\r\n\r\n}\r\nexport default injectIntl(ConfigureReportFilterType)"]},"metadata":{},"sourceType":"module"}